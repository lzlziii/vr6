using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Net.Sockets;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;
using System.Threading;
using ExitGames.Client.Photon.LoadBalancing;
using ExitGames.Client.Photon.Voice;
using FMOD;
using FMOD.Studio;
using HttpAuth;
using Il2CppDummyDll;
using POpusCodec;
using POpusCodec.Enums;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.SceneManagement;
using UnityEngine.UI;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x394FBC", Offset = "0x394FBC")]
internal sealed class <>f__AnonymousType0<<customEventName>j__TPar, <x>j__TPar, <y>j__TPar, <z>j__TPar>
{
	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x396A48", Offset = "0x396A48")]
	private readonly <customEventName>j__TPar <customEventName>i__Field;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x396A5C", Offset = "0x396A5C")]
	private readonly <x>j__TPar <x>i__Field;

	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x396A70", Offset = "0x396A70")]
	private readonly <y>j__TPar <y>i__Field;

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0x396A84", Offset = "0x396A84")]
	private readonly <z>j__TPar <z>i__Field;

	[Token(Token = "0x17000001")]
	public <customEventName>j__TPar customEventName
	{
		[Token(Token = "0x6000001")]
		get
		{
			return (<customEventName>j__TPar)null;
		}
	}

	[Token(Token = "0x17000002")]
	public <x>j__TPar x
	{
		[Token(Token = "0x6000002")]
		get
		{
			return (<x>j__TPar)null;
		}
	}

	[Token(Token = "0x17000003")]
	public <y>j__TPar y
	{
		[Token(Token = "0x6000003")]
		get
		{
			return (<y>j__TPar)null;
		}
	}

	[Token(Token = "0x17000004")]
	public <z>j__TPar z
	{
		[Token(Token = "0x6000004")]
		get
		{
			return (<z>j__TPar)null;
		}
	}

	[Token(Token = "0x6000005")]
	[DebuggerHidden]
	public <>f__AnonymousType0(<customEventName>j__TPar customEventName, <x>j__TPar x, <y>j__TPar y, <z>j__TPar z)
	{
	}

	[Token(Token = "0x6000006")]
	[DebuggerHidden]
	public override bool Equals(object value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000007")]
	[DebuggerHidden]
	public override int GetHashCode()
	{
		return default(int);
	}

	[Token(Token = "0x6000008")]
	[DebuggerHidden]
	public override string ToString()
	{
		return null;
	}
}
[Token(Token = "0x2000003")]
public class FMODAsset : ScriptableObject
{
	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public string path;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string id;

	[Token(Token = "0x6000009")]
	[Address(RVA = "0x1691B88", Offset = "0x1691B88", VA = "0x1691B88")]
	public FMODAsset()
	{
	}
}
[Token(Token = "0x2000004")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x394FCC", Offset = "0x394FCC")]
public class FMOD_Listener : MonoBehaviour
{
	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x396A98", Offset = "0x396A98")]
	public string[] pluginPaths;

	[Token(Token = "0x600000A")]
	[Address(RVA = "0xF96C0C", Offset = "0xF96C0C", VA = "0xF96C0C")]
	public FMOD_Listener()
	{
	}
}
[Token(Token = "0x2000005")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x395000", Offset = "0x395000")]
public class FMOD_StudioEventEmitter : MonoBehaviour
{
	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x396ACC", Offset = "0x396ACC")]
	public FMODAsset asset;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string path;

	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public bool startEventOnAwake;

	[Token(Token = "0x600000B")]
	[Address(RVA = "0xF96C78", Offset = "0xF96C78", VA = "0xF96C78")]
	public FMOD_StudioEventEmitter()
	{
	}
}
[Token(Token = "0x2000006")]
public class AndroidAudioInAEC : IAudioPusher<short>, IAudioSource, IDisposable
{
	[Token(Token = "0x2000321")]
	private class DataCallback : AndroidJavaProxy
	{
		[Token(Token = "0x400133F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Action<short[]> callback;

		[Token(Token = "0x4001340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private IntPtr javaBuf;

		[Token(Token = "0x4001341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int cntFrame;

		[Token(Token = "0x4001342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int cntShort;

		[Token(Token = "0x600159A")]
		[Address(RVA = "0xB7BE6C", Offset = "0xB7BE6C", VA = "0xB7BE6C")]
		public DataCallback(Action<short[]> callback, IntPtr javaBuf)
		{
		}

		[Token(Token = "0x600159B")]
		[Address(RVA = "0xB7BF18", Offset = "0xB7BF18", VA = "0xB7BF18")]
		public void OnData()
		{
		}

		[Token(Token = "0x600159C")]
		[Address(RVA = "0xB7BFC0", Offset = "0xB7BFC0", VA = "0xB7BFC0")]
		public void OnStop()
		{
		}
	}

	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private AndroidJavaObject audioIn;

	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private IntPtr javaBuf;

	[Token(Token = "0x400000D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private DataCallback callback;

	[Token(Token = "0x17000005")]
	public int Channels
	{
		[Token(Token = "0x600000E")]
		[Address(RVA = "0xB7BF10", Offset = "0xB7BF10", VA = "0xB7BF10", Slot = "6")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000006")]
	public int SamplingRate
	{
		[Token(Token = "0x600000F")]
		[Address(RVA = "0xB7BF08", Offset = "0xB7BF08", VA = "0xB7BF08", Slot = "5")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x600000C")]
	[Address(RVA = "0xB7B16C", Offset = "0xB7B16C", VA = "0xB7B16C")]
	public AndroidAudioInAEC()
	{
	}

	[Token(Token = "0x600000D")]
	[Address(RVA = "0xB7B174", Offset = "0xB7B174", VA = "0xB7B174", Slot = "4")]
	public void SetCallback(Action<short[]> callback, LocalVoice localVoice)
	{
	}

	[Token(Token = "0x6000010")]
	[Address(RVA = "0xB7BD44", Offset = "0xB7BD44", VA = "0xB7BD44", Slot = "7")]
	public void Dispose()
	{
	}
}
[Token(Token = "0x2000007")]
public class AudioClipWrapper : IAudioReader<float>, IDataReader<float>, IDisposable, IAudioSource
{
	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private AudioClip audioClip;

	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private int readPos;

	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private float startTime;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396B00", Offset = "0x396B00")]
	private bool <Loop>k__BackingField;

	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
	private bool playing;

	[Token(Token = "0x17000007")]
	public bool Loop
	{
		[Token(Token = "0x6000011")]
		[Address(RVA = "0xB7BFCC", Offset = "0xB7BFCC", VA = "0xB7BFCC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397A1C", Offset = "0x397A1C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000012")]
		[Address(RVA = "0xB7BFD4", Offset = "0xB7BFD4", VA = "0xB7BFD4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397A2C", Offset = "0x397A2C")]
		set
		{
		}
	}

	[Token(Token = "0x17000008")]
	public int SamplingRate
	{
		[Token(Token = "0x6000015")]
		[Address(RVA = "0xB7C164", Offset = "0xB7C164", VA = "0xB7C164", Slot = "6")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000009")]
	public int Channels
	{
		[Token(Token = "0x6000016")]
		[Address(RVA = "0xB7C18C", Offset = "0xB7C18C", VA = "0xB7C18C", Slot = "7")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000013")]
	[Address(RVA = "0xB7BFDC", Offset = "0xB7BFDC", VA = "0xB7BFDC")]
	public AudioClipWrapper(AudioClip audioClip)
	{
	}

	[Token(Token = "0x6000014")]
	[Address(RVA = "0xB7C014", Offset = "0xB7C014", VA = "0xB7C014", Slot = "4")]
	public bool Read(float[] buffer)
	{
		return default(bool);
	}

	[Token(Token = "0x6000017")]
	[Address(RVA = "0xB7C1B4", Offset = "0xB7C1B4", VA = "0xB7C1B4", Slot = "5")]
	public void Dispose()
	{
	}
}
[Token(Token = "0x2000008")]
public class AudioOutCapture : MonoBehaviour
{
	[Token(Token = "0x14000001")]
	public event Action<float[], int> OnAudioFrame
	{
		[Token(Token = "0x6000018")]
		[Address(RVA = "0xB7C1B8", Offset = "0xB7C1B8", VA = "0xB7C1B8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397A3C", Offset = "0x397A3C")]
		add
		{
		}
		[Token(Token = "0x6000019")]
		[Address(RVA = "0xB7C268", Offset = "0xB7C268", VA = "0xB7C268")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397A4C", Offset = "0x397A4C")]
		remove
		{
		}
	}

	[Token(Token = "0x600001A")]
	[Address(RVA = "0xB7C318", Offset = "0xB7C318", VA = "0xB7C318")]
	private void OnAudioFilterRead(float[] frame, int channels)
	{
	}

	[Token(Token = "0x600001B")]
	[Address(RVA = "0xB7C390", Offset = "0xB7C390", VA = "0xB7C390")]
	public AudioOutCapture()
	{
	}
}
[Token(Token = "0x2000009")]
public class AudioStreamPlayer : IAudioOut
{
	[Token(Token = "0x4000014")]
	private const int maxPlayLagMs = 100;

	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private int maxPlayLagSamples;

	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private int playDelaySamples;

	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private int bufferSamples;

	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private int channels;

	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int frameSize;

	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int frameSamples;

	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int streamSamplePos;

	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396B20", Offset = "0x396B20")]
	private int <CurrentBufferLag>k__BackingField;

	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int streamSamplePosAvg;

	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private AudioSource source;

	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private string logPrefix;

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private bool debugInfo;

	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int sourceTimeSamplesPrev;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int playLoopCount;

	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Queue<float[]> frameQueue;

	[Token(Token = "0x4000024")]
	public const int FRAME_POOL_CAPACITY = 50;

	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private PrimitiveArrayPool<float> framePool;

	[Token(Token = "0x1700000A")]
	public int CurrentBufferLag
	{
		[Token(Token = "0x600001C")]
		[Address(RVA = "0xB7C398", Offset = "0xB7C398", VA = "0xB7C398", Slot = "9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397A5C", Offset = "0x397A5C")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600001D")]
		[Address(RVA = "0xB7C3A0", Offset = "0xB7C3A0", VA = "0xB7C3A0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397A6C", Offset = "0x397A6C")]
		private set
		{
		}
	}

	[Token(Token = "0x1700000B")]
	public AudioSource AudioSource
	{
		[Token(Token = "0x600001E")]
		[Address(RVA = "0xB7C3A8", Offset = "0xB7C3A8", VA = "0xB7C3A8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700000C")]
	private int playSamplePos
	{
		[Token(Token = "0x6000020")]
		[Address(RVA = "0xB7C494", Offset = "0xB7C494", VA = "0xB7C494")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000021")]
		[Address(RVA = "0xB7C56C", Offset = "0xB7C56C", VA = "0xB7C56C")]
		set
		{
		}
	}

	[Token(Token = "0x1700000D")]
	public bool IsPlaying
	{
		[Token(Token = "0x6000022")]
		[Address(RVA = "0xB7C684", Offset = "0xB7C684", VA = "0xB7C684", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600001F")]
	[Address(RVA = "0xB7C3B0", Offset = "0xB7C3B0", VA = "0xB7C3B0")]
	public AudioStreamPlayer(AudioSource audioSource, string logPrefix, bool debugInfo)
	{
	}

	[Token(Token = "0x6000023")]
	[Address(RVA = "0xB7C6AC", Offset = "0xB7C6AC", VA = "0xB7C6AC", Slot = "5")]
	public void Start(int frequency, int channels, int frameSamples, int playDelayMs)
	{
	}

	[Token(Token = "0x6000024")]
	[Address(RVA = "0xB7C864", Offset = "0xB7C864", VA = "0xB7C864", Slot = "8")]
	public void Service()
	{
	}

	[Token(Token = "0x6000025")]
	[Address(RVA = "0xB7D11C", Offset = "0xB7D11C", VA = "0xB7D11C", Slot = "7")]
	public void OnAudioFrame(float[] frame)
	{
	}

	[Token(Token = "0x6000026")]
	[Address(RVA = "0xB7D418", Offset = "0xB7D418", VA = "0xB7D418", Slot = "6")]
	public void Stop()
	{
	}
}
[Token(Token = "0x200000A")]
public class IOSAudioForceToSpeaker : MonoBehaviour
{
	[Token(Token = "0x6000027")]
	[Address(RVA = "0xF96CF4", Offset = "0xF96CF4", VA = "0xF96CF4")]
	private void PhotonVoiceCreated()
	{
	}

	[Token(Token = "0x6000028")]
	[Address(RVA = "0xF96CF8", Offset = "0xF96CF8", VA = "0xF96CF8")]
	public IOSAudioForceToSpeaker()
	{
	}
}
[Token(Token = "0x200000B")]
public class MicWrapper : IAudioReader<float>, IDataReader<float>, IDisposable, IAudioSource
{
	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private AudioClip mic;

	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private string device;

	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private int micPrevPos;

	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private int micLoopCnt;

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int readAbsPos;

	[Token(Token = "0x1700000E")]
	public int SamplingRate
	{
		[Token(Token = "0x600002A")]
		[Address(RVA = "0xF96F84", Offset = "0xF96F84", VA = "0xF96F84", Slot = "6")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700000F")]
	public int Channels
	{
		[Token(Token = "0x600002B")]
		[Address(RVA = "0xF96FAC", Offset = "0xF96FAC", VA = "0xF96FAC", Slot = "7")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000029")]
	[Address(RVA = "0xF96D00", Offset = "0xF96D00", VA = "0xF96D00")]
	public MicWrapper(string device, int suggestedFrequency)
	{
	}

	[Token(Token = "0x600002C")]
	[Address(RVA = "0xF96FD4", Offset = "0xF96FD4", VA = "0xF96FD4", Slot = "5")]
	public void Dispose()
	{
	}

	[Token(Token = "0x600002D")]
	[Address(RVA = "0xF96FE0", Offset = "0xF96FE0", VA = "0xF96FE0", Slot = "4")]
	public bool Read(float[] buffer)
	{
		return default(bool);
	}
}
[Serializable]
[Token(Token = "0x200000C")]
public class AuthResultEvent : UnityEvent<bool, int, string>
{
	[Token(Token = "0x600002E")]
	[Address(RVA = "0xB7D464", Offset = "0xB7D464", VA = "0xB7D464")]
	public AuthResultEvent()
	{
	}
}
[Token(Token = "0x200000D")]
public class WebAuthManager : MonoBehaviour
{
	[Token(Token = "0x2000322")]
	public delegate void OnResult();

	[Token(Token = "0x2000323")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396760", Offset = "0x396760")]
	private sealed class <WaitforRequest>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private int <>1__state;

		[Token(Token = "0x4001344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private object <>2__current;

		[Token(Token = "0x4001345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public WWW www;

		[Token(Token = "0x4001346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public WebAuthManager <>4__this;

		[Token(Token = "0x17000148")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60015A4")]
			[Address(RVA = "0x1AF15C4", Offset = "0x1AF15C4", VA = "0x1AF15C4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000149")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60015A6")]
			[Address(RVA = "0x1AF1644", Offset = "0x1AF1644", VA = "0x1AF1644", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60015A1")]
		[Address(RVA = "0x1AF1194", Offset = "0x1AF1194", VA = "0x1AF1194")]
		[DebuggerHidden]
		public <WaitforRequest>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x60015A2")]
		[Address(RVA = "0x1AF14B8", Offset = "0x1AF14B8", VA = "0x1AF14B8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60015A3")]
		[Address(RVA = "0x1AF14BC", Offset = "0x1AF14BC", VA = "0x1AF14BC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60015A5")]
		[Address(RVA = "0x1AF15CC", Offset = "0x1AF15CC", VA = "0x1AF15CC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public GameAuthInfo AuthInfo;

	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AuthResultEvent OnSuccessEvent;

	[Token(Token = "0x600002F")]
	[Address(RVA = "0x1AF0D7C", Offset = "0x1AF0D7C", VA = "0x1AF0D7C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000030")]
	[Address(RVA = "0x1AF0F04", Offset = "0x1AF0F04", VA = "0x1AF0F04")]
	private void Start()
	{
	}

	[Token(Token = "0x6000031")]
	[Address(RVA = "0x1AF0F08", Offset = "0x1AF0F08", VA = "0x1AF0F08")]
	private void Update()
	{
	}

	[Token(Token = "0x6000032")]
	[Address(RVA = "0x1AF0D80", Offset = "0x1AF0D80", VA = "0x1AF0D80")]
	private bool Check_Auth()
	{
		return default(bool);
	}

	[Token(Token = "0x6000033")]
	[Address(RVA = "0x1AF0F0C", Offset = "0x1AF0F0C", VA = "0x1AF0F0C")]
	public WWW Send_PostRequest(string addrURL, Dictionary<string, string> post)
	{
		return null;
	}

	[Token(Token = "0x6000034")]
	[Address(RVA = "0x1AF10FC", Offset = "0x1AF10FC", VA = "0x1AF10FC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x397A7C", Offset = "0x397A7C")]
	private IEnumerator WaitforRequest(WWW www)
	{
		return null;
	}

	[Token(Token = "0x6000035")]
	[Address(RVA = "0x1AF11B4", Offset = "0x1AF11B4", VA = "0x1AF11B4")]
	public void OnHttpRequest(bool bSuccess, string strMessage)
	{
	}

	[Token(Token = "0x6000036")]
	[Address(RVA = "0x1AF14B0", Offset = "0x1AF14B0", VA = "0x1AF14B0")]
	public WebAuthManager()
	{
	}
}
namespace Google2u
{
	[Token(Token = "0x200000E")]
	public interface IGoogle2uRow
	{
		[Token(Token = "0x6000037")]
		string GetStringData(string in_colID);
	}
	[Token(Token = "0x200000F")]
	public interface IGoogle2uDB
	{
		[Token(Token = "0x6000038")]
		IGoogle2uRow GetGenRow(string in_rowString);
	}
	[Token(Token = "0x2000010")]
	public class Google2uComponentBase : MonoBehaviour
	{
		[Token(Token = "0x6000039")]
		[Address(RVA = "0xF96CE4", Offset = "0xF96CE4", VA = "0xF96CE4", Slot = "4")]
		public virtual void AddRowGeneric(List<string> input)
		{
		}

		[Token(Token = "0x600003A")]
		[Address(RVA = "0xF96CE8", Offset = "0xF96CE8", VA = "0xF96CE8", Slot = "5")]
		public virtual void Clear()
		{
		}

		[Token(Token = "0x600003B")]
		[Address(RVA = "0xF96CEC", Offset = "0xF96CEC", VA = "0xF96CEC")]
		public Google2uComponentBase()
		{
		}
	}
}
namespace Steamworks
{
	[Token(Token = "0x2000011")]
	public static class CallbackDispatcher
	{
		[Token(Token = "0x600003C")]
		[Address(RVA = "0xF9D97C", Offset = "0xF9D97C", VA = "0xF9D97C")]
		public static void ExceptionHandler(Exception e)
		{
		}
	}
	[Token(Token = "0x2000012")]
	public sealed class Callback<T> : IDisposable
	{
		[Token(Token = "0x2000324")]
		public delegate void DispatchDelegate(T param);

		[Token(Token = "0x400002D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private CCallbackBaseVTable VTable;

		[Token(Token = "0x400002E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IntPtr m_pVTable;

		[Token(Token = "0x400002F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private CCallbackBase m_CCallbackBase;

		[Token(Token = "0x4000030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private GCHandle m_pCCallbackBase;

		[Token(Token = "0x4000032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool m_bGameServer;

		[Token(Token = "0x4000033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly int m_size;

		[Token(Token = "0x4000034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool m_bDisposed;

		[Token(Token = "0x14000002")]
		private event DispatchDelegate m_Func
		{
			[Token(Token = "0x600003D")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397AEC", Offset = "0x397AEC")]
			add
			{
			}
			[Token(Token = "0x600003E")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397AFC", Offset = "0x397AFC")]
			remove
			{
			}
		}

		[Token(Token = "0x600003F")]
		public static Callback<T> Create(DispatchDelegate func)
		{
			return null;
		}

		[Token(Token = "0x6000040")]
		public static Callback<T> CreateGameServer(DispatchDelegate func)
		{
			return null;
		}

		[Token(Token = "0x6000041")]
		public Callback(DispatchDelegate func, bool bGameServer = false)
		{
		}

		[Token(Token = "0x6000042")]
		~Callback()
		{
		}

		[Token(Token = "0x6000043")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000044")]
		public void Register(DispatchDelegate func)
		{
		}

		[Token(Token = "0x6000045")]
		public void Unregister()
		{
		}

		[Token(Token = "0x6000046")]
		public void SetGameserverFlag()
		{
		}

		[Token(Token = "0x6000047")]
		private void OnRunCallback(IntPtr thisptr, IntPtr pvParam)
		{
		}

		[Token(Token = "0x6000048")]
		private void OnRunCallResult(IntPtr thisptr, IntPtr pvParam, bool bFailed, ulong hSteamAPICall)
		{
		}

		[Token(Token = "0x6000049")]
		private int OnGetCallbackSizeBytes(IntPtr thisptr)
		{
			return default(int);
		}

		[Token(Token = "0x600004A")]
		private void BuildCCallbackBase()
		{
		}
	}
	[Token(Token = "0x2000013")]
	public sealed class CallResult<T> : IDisposable
	{
		[Token(Token = "0x2000325")]
		public delegate void APIDispatchDelegate(T param, bool bIOFailure);

		[Token(Token = "0x4000035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private CCallbackBaseVTable VTable;

		[Token(Token = "0x4000036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IntPtr m_pVTable;

		[Token(Token = "0x4000037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private CCallbackBase m_CCallbackBase;

		[Token(Token = "0x4000038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private GCHandle m_pCCallbackBase;

		[Token(Token = "0x400003A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private SteamAPICall_t m_hAPICall;

		[Token(Token = "0x400003B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly int m_size;

		[Token(Token = "0x400003C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool m_bDisposed;

		[Token(Token = "0x17000010")]
		public SteamAPICall_t Handle
		{
			[Token(Token = "0x600004D")]
			get
			{
				return default(SteamAPICall_t);
			}
		}

		[Token(Token = "0x14000003")]
		private event APIDispatchDelegate m_Func
		{
			[Token(Token = "0x600004B")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397B0C", Offset = "0x397B0C")]
			add
			{
			}
			[Token(Token = "0x600004C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397B1C", Offset = "0x397B1C")]
			remove
			{
			}
		}

		[Token(Token = "0x600004E")]
		public static CallResult<T> Create([Optional] APIDispatchDelegate func)
		{
			return null;
		}

		[Token(Token = "0x600004F")]
		public CallResult([Optional] APIDispatchDelegate func)
		{
		}

		[Token(Token = "0x6000050")]
		~CallResult()
		{
		}

		[Token(Token = "0x6000051")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000052")]
		public void Set(SteamAPICall_t hAPICall, [Optional] APIDispatchDelegate func)
		{
		}

		[Token(Token = "0x6000053")]
		public bool IsActive()
		{
			return default(bool);
		}

		[Token(Token = "0x6000054")]
		public void Cancel()
		{
		}

		[Token(Token = "0x6000055")]
		public void SetGameserverFlag()
		{
		}

		[Token(Token = "0x6000056")]
		private void OnRunCallback(IntPtr thisptr, IntPtr pvParam)
		{
		}

		[Token(Token = "0x6000057")]
		private void OnRunCallResult(IntPtr thisptr, IntPtr pvParam, bool bFailed, ulong hSteamAPICall_)
		{
		}

		[Token(Token = "0x6000058")]
		private int OnGetCallbackSizeBytes(IntPtr thisptr)
		{
			return default(int);
		}

		[Token(Token = "0x6000059")]
		private void BuildCCallbackBase()
		{
		}
	}
	[StructLayout(0)]
	[Token(Token = "0x2000014")]
	internal class CCallbackBase
	{
		[Token(Token = "0x400003D")]
		public const byte k_ECallbackFlagsRegistered = 1;

		[Token(Token = "0x400003E")]
		public const byte k_ECallbackFlagsGameServer = 2;

		[Token(Token = "0x400003F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr m_vfptr;

		[Token(Token = "0x4000040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public byte m_nCallbackFlags;

		[Token(Token = "0x4000041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_iCallback;

		[Token(Token = "0x600005A")]
		[Address(RVA = "0xF9C3B0", Offset = "0xF9C3B0", VA = "0xF9C3B0")]
		public CCallbackBase()
		{
		}
	}
	[StructLayout(0)]
	[Token(Token = "0x2000015")]
	internal class CCallbackBaseVTable
	{
		[Token(Token = "0x2000326")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x396770", Offset = "0x396770")]
		public delegate void RunCBDel(IntPtr thisptr, IntPtr pvParam);

		[Token(Token = "0x2000327")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x396784", Offset = "0x396784")]
		public delegate void RunCRDel(IntPtr thisptr, IntPtr pvParam, bool bIOFailure, ulong hSteamAPICall);

		[Token(Token = "0x2000328")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x396798", Offset = "0x396798")]
		public delegate int GetCallbackSizeBytesDel(IntPtr thisptr);

		[Token(Token = "0x4000042")]
		private const CallingConvention cc = CallingConvention.Cdecl;

		[NonSerialized]
		[Token(Token = "0x4000043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public RunCBDel m_RunCallback;

		[NonSerialized]
		[Token(Token = "0x4000044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public RunCRDel m_RunCallResult;

		[NonSerialized]
		[Token(Token = "0x4000045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GetCallbackSizeBytesDel m_GetCallbackSizeBytes;

		[Token(Token = "0x600005B")]
		[Address(RVA = "0xF9C3B8", Offset = "0xF9C3B8", VA = "0xF9C3B8")]
		public CCallbackBaseVTable()
		{
		}
	}
	[Token(Token = "0x2000016")]
	internal class CallbackIdentities
	{
		[Token(Token = "0x600005C")]
		[Address(RVA = "0xF9D980", Offset = "0xF9D980", VA = "0xF9D980")]
		public static int GetCallbackIdentity(Type callbackStruct)
		{
			return default(int);
		}

		[Token(Token = "0x600005D")]
		[Address(RVA = "0xF9DA20", Offset = "0xF9DA20", VA = "0xF9DA20")]
		public CallbackIdentities()
		{
		}
	}
	[Token(Token = "0x2000017")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x395034", Offset = "0x395034")]
	internal class CallbackIdentityAttribute : Attribute
	{
		[Token(Token = "0x4000046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396B50", Offset = "0x396B50")]
		private int <Identity>k__BackingField;

		[Token(Token = "0x17000011")]
		public int Identity
		{
			[Token(Token = "0x600005E")]
			[Address(RVA = "0xF9DA28", Offset = "0xF9DA28", VA = "0xF9DA28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397B2C", Offset = "0x397B2C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600005F")]
			[Address(RVA = "0xF9DA30", Offset = "0xF9DA30", VA = "0xF9DA30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397B3C", Offset = "0x397B3C")]
			set
			{
			}
		}

		[Token(Token = "0x6000060")]
		[Address(RVA = "0xF9DA38", Offset = "0xF9DA38", VA = "0xF9DA38")]
		public CallbackIdentityAttribute(int callbackNum)
		{
		}
	}
	[Token(Token = "0x2000018")]
	public class ISteamMatchmakingServerListResponse
	{
		[Token(Token = "0x2000329")]
		public delegate void ServerResponded(HServerListRequest hRequest, int iServer);

		[Token(Token = "0x200032A")]
		public delegate void ServerFailedToRespond(HServerListRequest hRequest, int iServer);

		[Token(Token = "0x200032B")]
		public delegate void RefreshComplete(HServerListRequest hRequest, EMatchMakingServerResponse response);

		[Token(Token = "0x200032C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x3967AC", Offset = "0x3967AC")]
		private delegate void InternalServerResponded(IntPtr thisptr, HServerListRequest hRequest, int iServer);

		[Token(Token = "0x200032D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x3967C0", Offset = "0x3967C0")]
		private delegate void InternalServerFailedToRespond(IntPtr thisptr, HServerListRequest hRequest, int iServer);

		[Token(Token = "0x200032E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x3967D4", Offset = "0x3967D4")]
		private delegate void InternalRefreshComplete(IntPtr thisptr, HServerListRequest hRequest, EMatchMakingServerResponse response);

		[StructLayout(0)]
		[Token(Token = "0x200032F")]
		private class VTable
		{
			[NonSerialized]
			[Token(Token = "0x4001347")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public InternalServerResponded m_VTServerResponded;

			[NonSerialized]
			[Token(Token = "0x4001348")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public InternalServerFailedToRespond m_VTServerFailedToRespond;

			[NonSerialized]
			[Token(Token = "0x4001349")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public InternalRefreshComplete m_VTRefreshComplete;

			[Token(Token = "0x60015D3")]
			[Address(RVA = "0x165BDD0", Offset = "0x165BDD0", VA = "0x165BDD0")]
			public VTable()
			{
			}
		}

		[Token(Token = "0x4000047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private VTable m_VTable;

		[Token(Token = "0x4000048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private IntPtr m_pVTable;

		[Token(Token = "0x4000049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GCHandle m_pGCHandle;

		[Token(Token = "0x400004A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private ServerResponded m_ServerResponded;

		[Token(Token = "0x400004B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ServerFailedToRespond m_ServerFailedToRespond;

		[Token(Token = "0x400004C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private RefreshComplete m_RefreshComplete;

		[Token(Token = "0x6000061")]
		[Address(RVA = "0x165BB34", Offset = "0x165BB34", VA = "0x165BB34")]
		public ISteamMatchmakingServerListResponse(ServerResponded onServerResponded, ServerFailedToRespond onServerFailedToRespond, RefreshComplete onRefreshComplete)
		{
		}

		[Token(Token = "0x6000062")]
		[Address(RVA = "0x165BE14", Offset = "0x165BE14", VA = "0x165BE14", Slot = "1")]
		~ISteamMatchmakingServerListResponse()
		{
		}

		[Token(Token = "0x6000063")]
		[Address(RVA = "0x165BF28", Offset = "0x165BF28", VA = "0x165BF28")]
		private void InternalOnServerResponded(IntPtr thisptr, HServerListRequest hRequest, int iServer)
		{
		}

		[Token(Token = "0x6000064")]
		[Address(RVA = "0x165C22C", Offset = "0x165C22C", VA = "0x165C22C")]
		private void InternalOnServerFailedToRespond(IntPtr thisptr, HServerListRequest hRequest, int iServer)
		{
		}

		[Token(Token = "0x6000065")]
		[Address(RVA = "0x165C530", Offset = "0x165C530", VA = "0x165C530")]
		private void InternalOnRefreshComplete(IntPtr thisptr, HServerListRequest hRequest, EMatchMakingServerResponse response)
		{
		}

		[Token(Token = "0x6000066")]
		[Address(RVA = "0x165C834", Offset = "0x165C834", VA = "0x165C834")]
		public static explicit operator IntPtr(ISteamMatchmakingServerListResponse that)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x2000019")]
	public class ISteamMatchmakingPingResponse
	{
		[Token(Token = "0x2000330")]
		public delegate void ServerResponded(gameserveritem_t server);

		[Token(Token = "0x2000331")]
		public delegate void ServerFailedToRespond();

		[Token(Token = "0x2000332")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x3967E8", Offset = "0x3967E8")]
		private delegate void InternalServerResponded(IntPtr thisptr, gameserveritem_t server);

		[Token(Token = "0x2000333")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x3967FC", Offset = "0x3967FC")]
		private delegate void InternalServerFailedToRespond(IntPtr thisptr);

		[StructLayout(0)]
		[Token(Token = "0x2000334")]
		private class VTable
		{
			[NonSerialized]
			[Token(Token = "0x400134A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public InternalServerResponded m_VTServerResponded;

			[NonSerialized]
			[Token(Token = "0x400134B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public InternalServerFailedToRespond m_VTServerFailedToRespond;

			[Token(Token = "0x60015E4")]
			[Address(RVA = "0xF9F818", Offset = "0xF9F818", VA = "0xF9F818")]
			public VTable()
			{
			}
		}

		[Token(Token = "0x400004D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private VTable m_VTable;

		[Token(Token = "0x400004E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private IntPtr m_pVTable;

		[Token(Token = "0x400004F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GCHandle m_pGCHandle;

		[Token(Token = "0x4000050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private ServerResponded m_ServerResponded;

		[Token(Token = "0x4000051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ServerFailedToRespond m_ServerFailedToRespond;

		[Token(Token = "0x6000067")]
		[Address(RVA = "0xF9F5D4", Offset = "0xF9F5D4", VA = "0xF9F5D4")]
		public ISteamMatchmakingPingResponse(ServerResponded onServerResponded, ServerFailedToRespond onServerFailedToRespond)
		{
		}

		[Token(Token = "0x6000068")]
		[Address(RVA = "0xF9F848", Offset = "0xF9F848", VA = "0xF9F848", Slot = "1")]
		~ISteamMatchmakingPingResponse()
		{
		}

		[Token(Token = "0x6000069")]
		[Address(RVA = "0xF9F95C", Offset = "0xF9F95C", VA = "0xF9F95C")]
		private void InternalOnServerResponded(IntPtr thisptr, gameserveritem_t server)
		{
		}

		[Token(Token = "0x600006A")]
		[Address(RVA = "0xF9FDB4", Offset = "0xF9FDB4", VA = "0xF9FDB4")]
		private void InternalOnServerFailedToRespond(IntPtr thisptr)
		{
		}

		[Token(Token = "0x600006B")]
		[Address(RVA = "0xFA001C", Offset = "0xFA001C", VA = "0xFA001C")]
		public static explicit operator IntPtr(ISteamMatchmakingPingResponse that)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x200001A")]
	public class ISteamMatchmakingPlayersResponse
	{
		[Token(Token = "0x2000335")]
		public delegate void AddPlayerToList(string pchName, int nScore, float flTimePlayed);

		[Token(Token = "0x2000336")]
		public delegate void PlayersFailedToRespond();

		[Token(Token = "0x2000337")]
		public delegate void PlayersRefreshComplete();

		[Token(Token = "0x2000338")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x396810", Offset = "0x396810")]
		public delegate void InternalAddPlayerToList(IntPtr thisptr, IntPtr pchName, int nScore, float flTimePlayed);

		[Token(Token = "0x2000339")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x396824", Offset = "0x396824")]
		public delegate void InternalPlayersFailedToRespond(IntPtr thisptr);

		[Token(Token = "0x200033A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x396838", Offset = "0x396838")]
		public delegate void InternalPlayersRefreshComplete(IntPtr thisptr);

		[StructLayout(0)]
		[Token(Token = "0x200033B")]
		private class VTable
		{
			[NonSerialized]
			[Token(Token = "0x400134C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public InternalAddPlayerToList m_VTAddPlayerToList;

			[NonSerialized]
			[Token(Token = "0x400134D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public InternalPlayersFailedToRespond m_VTPlayersFailedToRespond;

			[NonSerialized]
			[Token(Token = "0x400134E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public InternalPlayersRefreshComplete m_VTPlayersRefreshComplete;

			[Token(Token = "0x60015FD")]
			[Address(RVA = "0xFA0A40", Offset = "0xFA0A40", VA = "0xFA0A40")]
			public VTable()
			{
			}
		}

		[Token(Token = "0x4000052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private VTable m_VTable;

		[Token(Token = "0x4000053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private IntPtr m_pVTable;

		[Token(Token = "0x4000054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GCHandle m_pGCHandle;

		[Token(Token = "0x4000055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private AddPlayerToList m_AddPlayerToList;

		[Token(Token = "0x4000056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private PlayersFailedToRespond m_PlayersFailedToRespond;

		[Token(Token = "0x4000057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private PlayersRefreshComplete m_PlayersRefreshComplete;

		[Token(Token = "0x600006C")]
		[Address(RVA = "0xFA07A4", Offset = "0xFA07A4", VA = "0xFA07A4")]
		public ISteamMatchmakingPlayersResponse(AddPlayerToList onAddPlayerToList, PlayersFailedToRespond onPlayersFailedToRespond, PlayersRefreshComplete onPlayersRefreshComplete)
		{
		}

		[Token(Token = "0x600006D")]
		[Address(RVA = "0xFA0A84", Offset = "0xFA0A84", VA = "0xFA0A84", Slot = "1")]
		~ISteamMatchmakingPlayersResponse()
		{
		}

		[Token(Token = "0x600006E")]
		[Address(RVA = "0xFA0B98", Offset = "0xFA0B98", VA = "0xFA0B98")]
		private void InternalOnAddPlayerToList(IntPtr thisptr, IntPtr pchName, int nScore, float flTimePlayed)
		{
		}

		[Token(Token = "0x600006F")]
		[Address(RVA = "0xFA10DC", Offset = "0xFA10DC", VA = "0xFA10DC")]
		private void InternalOnPlayersFailedToRespond(IntPtr thisptr)
		{
		}

		[Token(Token = "0x6000070")]
		[Address(RVA = "0xFA1344", Offset = "0xFA1344", VA = "0xFA1344")]
		private void InternalOnPlayersRefreshComplete(IntPtr thisptr)
		{
		}

		[Token(Token = "0x6000071")]
		[Address(RVA = "0xFA15AC", Offset = "0xFA15AC", VA = "0xFA15AC")]
		public static explicit operator IntPtr(ISteamMatchmakingPlayersResponse that)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x200001B")]
	public class ISteamMatchmakingRulesResponse
	{
		[Token(Token = "0x200033C")]
		public delegate void RulesResponded(string pchRule, string pchValue);

		[Token(Token = "0x200033D")]
		public delegate void RulesFailedToRespond();

		[Token(Token = "0x200033E")]
		public delegate void RulesRefreshComplete();

		[Token(Token = "0x200033F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x39684C", Offset = "0x39684C")]
		public delegate void InternalRulesResponded(IntPtr thisptr, IntPtr pchRule, IntPtr pchValue);

		[Token(Token = "0x2000340")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x396860", Offset = "0x396860")]
		public delegate void InternalRulesFailedToRespond(IntPtr thisptr);

		[Token(Token = "0x2000341")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x396874", Offset = "0x396874")]
		public delegate void InternalRulesRefreshComplete(IntPtr thisptr);

		[StructLayout(0)]
		[Token(Token = "0x2000342")]
		private class VTable
		{
			[NonSerialized]
			[Token(Token = "0x400134F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public InternalRulesResponded m_VTRulesResponded;

			[NonSerialized]
			[Token(Token = "0x4001350")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public InternalRulesFailedToRespond m_VTRulesFailedToRespond;

			[NonSerialized]
			[Token(Token = "0x4001351")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public InternalRulesRefreshComplete m_VTRulesRefreshComplete;

			[Token(Token = "0x6001616")]
			[Address(RVA = "0x165BB2C", Offset = "0x165BB2C", VA = "0x165BB2C")]
			public VTable()
			{
			}
		}

		[Token(Token = "0x4000058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private VTable m_VTable;

		[Token(Token = "0x4000059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private IntPtr m_pVTable;

		[Token(Token = "0x400005A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GCHandle m_pGCHandle;

		[Token(Token = "0x400005B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private RulesResponded m_RulesResponded;

		[Token(Token = "0x400005C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private RulesFailedToRespond m_RulesFailedToRespond;

		[Token(Token = "0x400005D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private RulesRefreshComplete m_RulesRefreshComplete;

		[Token(Token = "0x6000072")]
		[Address(RVA = "0xFA2214", Offset = "0xFA2214", VA = "0xFA2214")]
		public ISteamMatchmakingRulesResponse(RulesResponded onRulesResponded, RulesFailedToRespond onRulesFailedToRespond, RulesRefreshComplete onRulesRefreshComplete)
		{
		}

		[Token(Token = "0x6000073")]
		[Address(RVA = "0xFA24C4", Offset = "0xFA24C4", VA = "0xFA24C4", Slot = "1")]
		~ISteamMatchmakingRulesResponse()
		{
		}

		[Token(Token = "0x6000074")]
		[Address(RVA = "0xFA25D8", Offset = "0xFA25D8", VA = "0xFA25D8")]
		private void InternalOnRulesResponded(IntPtr thisptr, IntPtr pchRule, IntPtr pchValue)
		{
		}

		[Token(Token = "0x6000075")]
		[Address(RVA = "0xFA262C", Offset = "0xFA262C", VA = "0xFA262C")]
		private void InternalOnRulesFailedToRespond(IntPtr thisptr)
		{
		}

		[Token(Token = "0x6000076")]
		[Address(RVA = "0xFA2654", Offset = "0xFA2654", VA = "0xFA2654")]
		private void InternalOnRulesRefreshComplete(IntPtr thisptr)
		{
		}

		[Token(Token = "0x6000077")]
		[Address(RVA = "0xFA267C", Offset = "0xFA267C", VA = "0xFA267C")]
		public static explicit operator IntPtr(ISteamMatchmakingRulesResponse that)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x200001C")]
	public class InteropHelp
	{
		[Token(Token = "0x2000343")]
		public class UTF8StringHandle : IDisposable
		{
			[Token(Token = "0x6001617")]
			[Address(RVA = "0x165E1BC", Offset = "0x165E1BC", VA = "0x165E1BC")]
			public UTF8StringHandle(string str)
			{
			}

			[Token(Token = "0x6001618")]
			[Address(RVA = "0x165E1C4", Offset = "0x165E1C4", VA = "0x165E1C4", Slot = "4")]
			public void Dispose()
			{
			}
		}

		[Token(Token = "0x2000344")]
		public class SteamParamStringArray
		{
			[Token(Token = "0x4001352")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private IntPtr[] m_Strings;

			[Token(Token = "0x4001353")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private IntPtr m_ptrStrings;

			[Token(Token = "0x4001354")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private IntPtr m_pSteamParamStringArray;

			[Token(Token = "0x6001619")]
			[Address(RVA = "0x165D9DC", Offset = "0x165D9DC", VA = "0x165D9DC")]
			public SteamParamStringArray(IList<string> strings)
			{
			}

			[Token(Token = "0x600161A")]
			[Address(RVA = "0x165DFEC", Offset = "0x165DFEC", VA = "0x165DFEC", Slot = "1")]
			~SteamParamStringArray()
			{
			}

			[Token(Token = "0x600161B")]
			[Address(RVA = "0x165E19C", Offset = "0x165E19C", VA = "0x165E19C")]
			public static implicit operator IntPtr(SteamParamStringArray that)
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x6000078")]
		[Address(RVA = "0x165D624", Offset = "0x165D624", VA = "0x165D624")]
		public static void TestIfPlatformSupported()
		{
		}

		[Token(Token = "0x6000079")]
		[Address(RVA = "0x165D6B0", Offset = "0x165D6B0", VA = "0x165D6B0")]
		public static void TestIfAvailableClient()
		{
		}

		[Token(Token = "0x600007A")]
		[Address(RVA = "0x165D788", Offset = "0x165D788", VA = "0x165D788")]
		public static void TestIfAvailableGameServer()
		{
		}

		[Token(Token = "0x600007B")]
		[Address(RVA = "0x165D860", Offset = "0x165D860", VA = "0x165D860")]
		public static string PtrToStringUTF8(IntPtr nativeUtf8)
		{
			return null;
		}

		[Token(Token = "0x600007C")]
		[Address(RVA = "0x165D9D4", Offset = "0x165D9D4", VA = "0x165D9D4")]
		public InteropHelp()
		{
		}
	}
	[Token(Token = "0x200001D")]
	public class MMKVPMarshaller
	{
		[Token(Token = "0x400005E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IntPtr m_pNativeArray;

		[Token(Token = "0x400005F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private IntPtr m_pArrayEntries;

		[Token(Token = "0x600007D")]
		[Address(RVA = "0x165E1C8", Offset = "0x165E1C8", VA = "0x165E1C8")]
		public MMKVPMarshaller(MatchMakingKeyValuePair_t[] filters)
		{
		}

		[Token(Token = "0x600007E")]
		[Address(RVA = "0x165E420", Offset = "0x165E420", VA = "0x165E420", Slot = "1")]
		~MMKVPMarshaller()
		{
		}

		[Token(Token = "0x600007F")]
		[Address(RVA = "0x165E564", Offset = "0x165E564", VA = "0x165E564")]
		public static implicit operator IntPtr(MMKVPMarshaller that)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x200001E")]
	public class DllCheck
	{
		[Token(Token = "0x6000080")]
		[Address(RVA = "0xF9E374", Offset = "0xF9E374", VA = "0xF9E374")]
		public static bool Test()
		{
			return default(bool);
		}

		[Token(Token = "0x6000081")]
		[Address(RVA = "0xF9E37C", Offset = "0xF9E37C", VA = "0xF9E37C")]
		public DllCheck()
		{
		}
	}
	[Token(Token = "0x200001F")]
	public static class Packsize
	{
		[Token(Token = "0x2000345")]
		private struct ValvePackingSentinel_t
		{
			[Token(Token = "0x4001355")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private uint m_u32;

			[Token(Token = "0x4001356")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			private ulong m_u64;

			[Token(Token = "0x4001357")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private ushort m_u16;

			[Token(Token = "0x4001358")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private double m_d;
		}

		[Token(Token = "0x4000060")]
		public const int value = 4;

		[Token(Token = "0x6000082")]
		[Address(RVA = "0x14FC6C0", Offset = "0x14FC6C0", VA = "0x14FC6C0")]
		public static bool Test()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000020")]
	public static class Version
	{
		[Token(Token = "0x4000061")]
		public const string SteamworksNETVersion = "10.0.0";

		[Token(Token = "0x4000062")]
		public const string SteamworksSDKVersion = "1.40";

		[Token(Token = "0x4000063")]
		public const string SteamAPIDLLVersion = "03.92.72.58";

		[Token(Token = "0x4000064")]
		public const int SteamAPIDLLSize = 221984;

		[Token(Token = "0x4000065")]
		public const int SteamAPI64DLLSize = 245536;
	}
	[Token(Token = "0x2000021")]
	public static class SteamAPI
	{
		[Token(Token = "0x6000083")]
		[Address(RVA = "0x14FD02C", Offset = "0x14FD02C", VA = "0x14FD02C")]
		public static bool InitSafe()
		{
			return default(bool);
		}

		[Token(Token = "0x6000084")]
		[Address(RVA = "0x14FD048", Offset = "0x14FD048", VA = "0x14FD048")]
		public static bool Init()
		{
			return default(bool);
		}

		[Token(Token = "0x6000085")]
		[Address(RVA = "0x14FD064", Offset = "0x14FD064", VA = "0x14FD064")]
		public static void Shutdown()
		{
		}

		[Token(Token = "0x6000086")]
		[Address(RVA = "0x14FD080", Offset = "0x14FD080", VA = "0x14FD080")]
		public static bool RestartAppIfNecessary(AppId_t unOwnAppID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000087")]
		[Address(RVA = "0x14FD0A4", Offset = "0x14FD0A4", VA = "0x14FD0A4")]
		public static void ReleaseCurrentThreadMemory()
		{
		}

		[Token(Token = "0x6000088")]
		[Address(RVA = "0x14FD0C0", Offset = "0x14FD0C0", VA = "0x14FD0C0")]
		public static void RunCallbacks()
		{
		}

		[Token(Token = "0x6000089")]
		[Address(RVA = "0x14FD0DC", Offset = "0x14FD0DC", VA = "0x14FD0DC")]
		public static bool IsSteamRunning()
		{
			return default(bool);
		}

		[Token(Token = "0x600008A")]
		[Address(RVA = "0x14FD0F8", Offset = "0x14FD0F8", VA = "0x14FD0F8")]
		public static HSteamUser GetHSteamUserCurrent()
		{
			return default(HSteamUser);
		}

		[Token(Token = "0x600008B")]
		[Address(RVA = "0x14FD11C", Offset = "0x14FD11C", VA = "0x14FD11C")]
		public static HSteamPipe GetHSteamPipe()
		{
			return default(HSteamPipe);
		}

		[Token(Token = "0x600008C")]
		[Address(RVA = "0x14FD140", Offset = "0x14FD140", VA = "0x14FD140")]
		public static HSteamUser GetHSteamUser()
		{
			return default(HSteamUser);
		}
	}
	[Token(Token = "0x2000022")]
	public static class GameServer
	{
		[Token(Token = "0x600008D")]
		[Address(RVA = "0xF9E598", Offset = "0xF9E598", VA = "0xF9E598")]
		public static bool Init(uint unIP, ushort usSteamPort, ushort usGamePort, ushort usQueryPort, EServerMode eServerMode, string pchVersionString)
		{
			return default(bool);
		}

		[Token(Token = "0x600008E")]
		[Address(RVA = "0xF9E70C", Offset = "0xF9E70C", VA = "0xF9E70C")]
		public static void Shutdown()
		{
		}

		[Token(Token = "0x600008F")]
		[Address(RVA = "0xF9E728", Offset = "0xF9E728", VA = "0xF9E728")]
		public static void RunCallbacks()
		{
		}

		[Token(Token = "0x6000090")]
		[Address(RVA = "0xF9E744", Offset = "0xF9E744", VA = "0xF9E744")]
		public static void ReleaseCurrentThreadMemory()
		{
		}

		[Token(Token = "0x6000091")]
		[Address(RVA = "0xF9E760", Offset = "0xF9E760", VA = "0xF9E760")]
		public static bool BSecure()
		{
			return default(bool);
		}

		[Token(Token = "0x6000092")]
		[Address(RVA = "0xF9E77C", Offset = "0xF9E77C", VA = "0xF9E77C")]
		public static CSteamID GetSteamID()
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000093")]
		[Address(RVA = "0xF9E808", Offset = "0xF9E808", VA = "0xF9E808")]
		public static HSteamPipe GetHSteamPipe()
		{
			return default(HSteamPipe);
		}

		[Token(Token = "0x6000094")]
		[Address(RVA = "0xF9E828", Offset = "0xF9E828", VA = "0xF9E828")]
		public static HSteamUser GetHSteamUser()
		{
			return default(HSteamUser);
		}
	}
	[Token(Token = "0x2000023")]
	public static class SteamEncryptedAppTicket
	{
		[Token(Token = "0x6000095")]
		[Address(RVA = "0x15012A4", Offset = "0x15012A4", VA = "0x15012A4")]
		public static bool BDecryptTicket(byte[] rgubTicketEncrypted, uint cubTicketEncrypted, byte[] rgubTicketDecrypted, ref uint pcubTicketDecrypted, byte[] rgubKey, int cubKey)
		{
			return default(bool);
		}

		[Token(Token = "0x6000096")]
		[Address(RVA = "0x15012F4", Offset = "0x15012F4", VA = "0x15012F4")]
		public static bool BIsTicketForApp(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, AppId_t nAppID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000097")]
		[Address(RVA = "0x1501328", Offset = "0x1501328", VA = "0x1501328")]
		public static uint GetTicketIssueTime(byte[] rgubTicketDecrypted, uint cubTicketDecrypted)
		{
			return default(uint);
		}

		[Token(Token = "0x6000098")]
		[Address(RVA = "0x1501354", Offset = "0x1501354", VA = "0x1501354")]
		public static void GetTicketSteamID(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, out CSteamID psteamID)
		{
		}

		[Token(Token = "0x6000099")]
		[Address(RVA = "0x1501388", Offset = "0x1501388", VA = "0x1501388")]
		public static uint GetTicketAppID(byte[] rgubTicketDecrypted, uint cubTicketDecrypted)
		{
			return default(uint);
		}

		[Token(Token = "0x600009A")]
		[Address(RVA = "0x15013B4", Offset = "0x15013B4", VA = "0x15013B4")]
		public static bool BUserOwnsAppInTicket(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, AppId_t nAppID)
		{
			return default(bool);
		}

		[Token(Token = "0x600009B")]
		[Address(RVA = "0x15013E8", Offset = "0x15013E8", VA = "0x15013E8")]
		public static bool BUserIsVacBanned(byte[] rgubTicketDecrypted, uint cubTicketDecrypted)
		{
			return default(bool);
		}

		[Token(Token = "0x600009C")]
		[Address(RVA = "0x1501414", Offset = "0x1501414", VA = "0x1501414")]
		public static byte[] GetUserVariableData(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, out uint pcubUserData)
		{
			return null;
		}
	}
	[Token(Token = "0x2000024")]
	[SuppressUnmanagedCodeSecurity]
	internal static class NativeMethods
	{
		[Token(Token = "0x4000066")]
		internal const string NativeLibraryName = "CSteamworks";

		[Token(Token = "0x4000067")]
		internal const string NativeLibrary_SDKEncryptedAppTicket = "sdkencryptedappticket";

		[PreserveSig]
		[Token(Token = "0x600009D")]
		[Address(RVA = "0x165E7E0", Offset = "0x165E7E0", VA = "0x165E7E0")]
		public static extern bool SteamAPI_Init();

		[PreserveSig]
		[Token(Token = "0x600009E")]
		[Address(RVA = "0x165E880", Offset = "0x165E880", VA = "0x165E880")]
		public static extern void SteamAPI_Shutdown();

		[PreserveSig]
		[Token(Token = "0x600009F")]
		[Address(RVA = "0x165E918", Offset = "0x165E918", VA = "0x165E918")]
		public static extern bool SteamAPI_RestartAppIfNecessary(AppId_t unOwnAppID);

		[PreserveSig]
		[Token(Token = "0x60000A0")]
		[Address(RVA = "0x165E9C0", Offset = "0x165E9C0", VA = "0x165E9C0")]
		public static extern void SteamAPI_ReleaseCurrentThreadMemory();

		[PreserveSig]
		[Token(Token = "0x60000A1")]
		[Address(RVA = "0x165EA58", Offset = "0x165EA58", VA = "0x165EA58")]
		public static extern void SteamAPI_WriteMiniDump(uint uStructuredExceptionCode, IntPtr pvExceptionInfo, uint uBuildID);

		[PreserveSig]
		[Token(Token = "0x60000A2")]
		[Address(RVA = "0x165EB08", Offset = "0x165EB08", VA = "0x165EB08")]
		public static extern void SteamAPI_SetMiniDumpComment(InteropHelp.UTF8StringHandle pchMsg);

		[PreserveSig]
		[Token(Token = "0x60000A3")]
		[Address(RVA = "0x165EB30", Offset = "0x165EB30", VA = "0x165EB30")]
		public static extern void SteamAPI_RunCallbacks();

		[PreserveSig]
		[Token(Token = "0x60000A4")]
		[Address(RVA = "0x165EBC8", Offset = "0x165EBC8", VA = "0x165EBC8")]
		public static extern void SteamAPI_RegisterCallback(IntPtr pCallback, int iCallback);

		[PreserveSig]
		[Token(Token = "0x60000A5")]
		[Address(RVA = "0x165EC70", Offset = "0x165EC70", VA = "0x165EC70")]
		public static extern void SteamAPI_UnregisterCallback(IntPtr pCallback);

		[PreserveSig]
		[Token(Token = "0x60000A6")]
		[Address(RVA = "0x165ED10", Offset = "0x165ED10", VA = "0x165ED10")]
		public static extern void SteamAPI_RegisterCallResult(IntPtr pCallback, ulong hAPICall);

		[PreserveSig]
		[Token(Token = "0x60000A7")]
		[Address(RVA = "0x165EDC0", Offset = "0x165EDC0", VA = "0x165EDC0")]
		public static extern void SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong hAPICall);

		[PreserveSig]
		[Token(Token = "0x60000A8")]
		[Address(RVA = "0x165EE70", Offset = "0x165EE70", VA = "0x165EE70")]
		public static extern bool SteamAPI_IsSteamRunning();

		[PreserveSig]
		[Token(Token = "0x60000A9")]
		[Address(RVA = "0x165EF10", Offset = "0x165EF10", VA = "0x165EF10")]
		public static extern void Steam_RunCallbacks(HSteamPipe hSteamPipe, bool bGameServerCallbacks);

		[PreserveSig]
		[Token(Token = "0x60000AA")]
		[Address(RVA = "0x165EFB8", Offset = "0x165EFB8", VA = "0x165EFB8")]
		public static extern void Steam_RegisterInterfaceFuncs(IntPtr hModule);

		[PreserveSig]
		[Token(Token = "0x60000AB")]
		[Address(RVA = "0x165F058", Offset = "0x165F058", VA = "0x165F058")]
		public static extern int Steam_GetHSteamUserCurrent();

		[PreserveSig]
		[Token(Token = "0x60000AC")]
		[Address(RVA = "0x165F0F0", Offset = "0x165F0F0", VA = "0x165F0F0")]
		public static extern int SteamAPI_GetSteamInstallPath();

		[PreserveSig]
		[Token(Token = "0x60000AD")]
		[Address(RVA = "0x165F188", Offset = "0x165F188", VA = "0x165F188")]
		public static extern int SteamAPI_GetHSteamPipe();

		[PreserveSig]
		[Token(Token = "0x60000AE")]
		[Address(RVA = "0x165F220", Offset = "0x165F220", VA = "0x165F220")]
		public static extern void SteamAPI_SetTryCatchCallbacks(bool bTryCatchCallbacks);

		[PreserveSig]
		[Token(Token = "0x60000AF")]
		[Address(RVA = "0x165F2C0", Offset = "0x165F2C0", VA = "0x165F2C0")]
		public static extern int SteamAPI_GetHSteamUser();

		[PreserveSig]
		[Token(Token = "0x60000B0")]
		[Address(RVA = "0x165F358", Offset = "0x165F358", VA = "0x165F358")]
		public static extern void SteamInternal_CreateInterface(IntPtr ver);

		[PreserveSig]
		[Token(Token = "0x60000B1")]
		[Address(RVA = "0x165F3F8", Offset = "0x165F3F8", VA = "0x165F3F8")]
		public static extern void SteamAPI_UseBreakpadCrashHandler(InteropHelp.UTF8StringHandle pchVersion, InteropHelp.UTF8StringHandle pchDate, InteropHelp.UTF8StringHandle pchTime, bool bFullMemoryDumps, IntPtr pvContext, IntPtr m_pfnPreMinidumpCallback);

		[PreserveSig]
		[Token(Token = "0x60000B2")]
		[Address(RVA = "0x165F420", Offset = "0x165F420", VA = "0x165F420")]
		public static extern void SteamAPI_SetBreakpadAppID(uint unAppID);

		[PreserveSig]
		[Token(Token = "0x60000B3")]
		[Address(RVA = "0x165F4C0", Offset = "0x165F4C0", VA = "0x165F4C0")]
		public static extern bool SteamGameServer_Init(uint unIP, ushort usSteamPort, ushort usGamePort, ushort usQueryPort, EServerMode eServerMode, InteropHelp.UTF8StringHandle pchVersionString);

		[PreserveSig]
		[Token(Token = "0x60000B4")]
		[Address(RVA = "0x165F4E8", Offset = "0x165F4E8", VA = "0x165F4E8")]
		public static extern void SteamGameServer_Shutdown();

		[PreserveSig]
		[Token(Token = "0x60000B5")]
		[Address(RVA = "0x165F580", Offset = "0x165F580", VA = "0x165F580")]
		public static extern void SteamGameServer_RunCallbacks();

		[PreserveSig]
		[Token(Token = "0x60000B6")]
		[Address(RVA = "0x165F618", Offset = "0x165F618", VA = "0x165F618")]
		public static extern void SteamGameServer_ReleaseCurrentThreadMemory();

		[PreserveSig]
		[Token(Token = "0x60000B7")]
		[Address(RVA = "0x165F6B0", Offset = "0x165F6B0", VA = "0x165F6B0")]
		public static extern bool SteamGameServer_BSecure();

		[PreserveSig]
		[Token(Token = "0x60000B8")]
		[Address(RVA = "0x165F750", Offset = "0x165F750", VA = "0x165F750")]
		public static extern ulong SteamGameServer_GetSteamID();

		[PreserveSig]
		[Token(Token = "0x60000B9")]
		[Address(RVA = "0x165F7E8", Offset = "0x165F7E8", VA = "0x165F7E8")]
		public static extern int SteamGameServer_GetHSteamPipe();

		[PreserveSig]
		[Token(Token = "0x60000BA")]
		[Address(RVA = "0x165F880", Offset = "0x165F880", VA = "0x165F880")]
		public static extern int SteamGameServer_GetHSteamUser();

		[PreserveSig]
		[Token(Token = "0x60000BB")]
		[Address(RVA = "0x165F918", Offset = "0x165F918", VA = "0x165F918")]
		public static extern bool SteamInternal_GameServer_Init(uint unIP, ushort usPort, ushort usGamePort, ushort usQueryPort, EServerMode eServerMode, InteropHelp.UTF8StringHandle pchVersionString);

		[PreserveSig]
		[Token(Token = "0x60000BC")]
		[Address(RVA = "0x165D6F0", Offset = "0x165D6F0", VA = "0x165D6F0")]
		public static extern IntPtr SteamClient();

		[PreserveSig]
		[Token(Token = "0x60000BD")]
		[Address(RVA = "0x165D7C8", Offset = "0x165D7C8", VA = "0x165D7C8")]
		public static extern IntPtr SteamGameServerClient();

		[PreserveSig]
		[Token(Token = "0x60000BE")]
		[Address(RVA = "0x165F940", Offset = "0x165F940", VA = "0x165F940")]
		public static extern bool SteamEncryptedAppTicket_BDecryptTicket(byte[] rgubTicketEncrypted, uint cubTicketEncrypted, byte[] rgubTicketDecrypted, ref uint pcubTicketDecrypted, byte[] rgubKey, int cubKey);

		[PreserveSig]
		[Token(Token = "0x60000BF")]
		[Address(RVA = "0x165FA28", Offset = "0x165FA28", VA = "0x165FA28")]
		public static extern bool SteamEncryptedAppTicket_BIsTicketForApp(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x60000C0")]
		[Address(RVA = "0x165FAE8", Offset = "0x165FAE8", VA = "0x165FAE8")]
		public static extern uint SteamEncryptedAppTicket_GetTicketIssueTime(byte[] rgubTicketDecrypted, uint cubTicketDecrypted);

		[PreserveSig]
		[Token(Token = "0x60000C1")]
		[Address(RVA = "0x165FB98", Offset = "0x165FB98", VA = "0x165FB98")]
		public static extern void SteamEncryptedAppTicket_GetTicketSteamID(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, out CSteamID psteamID);

		[PreserveSig]
		[Token(Token = "0x60000C2")]
		[Address(RVA = "0x165FC50", Offset = "0x165FC50", VA = "0x165FC50")]
		public static extern uint SteamEncryptedAppTicket_GetTicketAppID(byte[] rgubTicketDecrypted, uint cubTicketDecrypted);

		[PreserveSig]
		[Token(Token = "0x60000C3")]
		[Address(RVA = "0x165FD00", Offset = "0x165FD00", VA = "0x165FD00")]
		public static extern bool SteamEncryptedAppTicket_BUserOwnsAppInTicket(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x60000C4")]
		[Address(RVA = "0x165FDC0", Offset = "0x165FDC0", VA = "0x165FDC0")]
		public static extern bool SteamEncryptedAppTicket_BUserIsVacBanned(byte[] rgubTicketDecrypted, uint cubTicketDecrypted);

		[PreserveSig]
		[Token(Token = "0x60000C5")]
		[Address(RVA = "0x165FE78", Offset = "0x165FE78", VA = "0x165FE78")]
		public static extern IntPtr SteamEncryptedAppTicket_GetUserVariableData(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, out uint pcubUserData);

		[PreserveSig]
		[Token(Token = "0x60000C6")]
		[Address(RVA = "0x165FF30", Offset = "0x165FF30", VA = "0x165FF30")]
		public static extern uint ISteamAppList_GetNumInstalledApps();

		[PreserveSig]
		[Token(Token = "0x60000C7")]
		[Address(RVA = "0x165FFC8", Offset = "0x165FFC8", VA = "0x165FFC8")]
		public static extern uint ISteamAppList_GetInstalledApps([In][Out] AppId_t[] pvecAppID, uint unMaxAppIDs);

		[PreserveSig]
		[Token(Token = "0x60000C8")]
		[Address(RVA = "0x1660078", Offset = "0x1660078", VA = "0x1660078")]
		public static extern int ISteamAppList_GetAppName(AppId_t nAppID, IntPtr pchName, int cchNameMax);

		[PreserveSig]
		[Token(Token = "0x60000C9")]
		[Address(RVA = "0x1660128", Offset = "0x1660128", VA = "0x1660128")]
		public static extern int ISteamAppList_GetAppInstallDir(AppId_t nAppID, IntPtr pchDirectory, int cchNameMax);

		[PreserveSig]
		[Token(Token = "0x60000CA")]
		[Address(RVA = "0x16601D8", Offset = "0x16601D8", VA = "0x16601D8")]
		public static extern int ISteamAppList_GetAppBuildId(AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x60000CB")]
		[Address(RVA = "0x1660278", Offset = "0x1660278", VA = "0x1660278")]
		public static extern bool ISteamApps_BIsSubscribed();

		[PreserveSig]
		[Token(Token = "0x60000CC")]
		[Address(RVA = "0x1660318", Offset = "0x1660318", VA = "0x1660318")]
		public static extern bool ISteamApps_BIsLowViolence();

		[PreserveSig]
		[Token(Token = "0x60000CD")]
		[Address(RVA = "0x16603B8", Offset = "0x16603B8", VA = "0x16603B8")]
		public static extern bool ISteamApps_BIsCybercafe();

		[PreserveSig]
		[Token(Token = "0x60000CE")]
		[Address(RVA = "0x1660458", Offset = "0x1660458", VA = "0x1660458")]
		public static extern bool ISteamApps_BIsVACBanned();

		[PreserveSig]
		[Token(Token = "0x60000CF")]
		[Address(RVA = "0x16604F8", Offset = "0x16604F8", VA = "0x16604F8")]
		public static extern IntPtr ISteamApps_GetCurrentGameLanguage();

		[PreserveSig]
		[Token(Token = "0x60000D0")]
		[Address(RVA = "0x1660590", Offset = "0x1660590", VA = "0x1660590")]
		public static extern IntPtr ISteamApps_GetAvailableGameLanguages();

		[PreserveSig]
		[Token(Token = "0x60000D1")]
		[Address(RVA = "0x1660628", Offset = "0x1660628", VA = "0x1660628")]
		public static extern bool ISteamApps_BIsSubscribedApp(AppId_t appID);

		[PreserveSig]
		[Token(Token = "0x60000D2")]
		[Address(RVA = "0x16606D0", Offset = "0x16606D0", VA = "0x16606D0")]
		public static extern bool ISteamApps_BIsDlcInstalled(AppId_t appID);

		[PreserveSig]
		[Token(Token = "0x60000D3")]
		[Address(RVA = "0x1660778", Offset = "0x1660778", VA = "0x1660778")]
		public static extern uint ISteamApps_GetEarliestPurchaseUnixTime(AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x60000D4")]
		[Address(RVA = "0x1660818", Offset = "0x1660818", VA = "0x1660818")]
		public static extern bool ISteamApps_BIsSubscribedFromFreeWeekend();

		[PreserveSig]
		[Token(Token = "0x60000D5")]
		[Address(RVA = "0x16608B8", Offset = "0x16608B8", VA = "0x16608B8")]
		public static extern int ISteamApps_GetDLCCount();

		[PreserveSig]
		[Token(Token = "0x60000D6")]
		[Address(RVA = "0x1660950", Offset = "0x1660950", VA = "0x1660950")]
		public static extern bool ISteamApps_BGetDLCDataByIndex(int iDLC, out AppId_t pAppID, out bool pbAvailable, IntPtr pchName, int cchNameBufferSize);

		[PreserveSig]
		[Token(Token = "0x60000D7")]
		[Address(RVA = "0x1660A30", Offset = "0x1660A30", VA = "0x1660A30")]
		public static extern void ISteamApps_InstallDLC(AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x60000D8")]
		[Address(RVA = "0x1660AD0", Offset = "0x1660AD0", VA = "0x1660AD0")]
		public static extern void ISteamApps_UninstallDLC(AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x60000D9")]
		[Address(RVA = "0x1660B70", Offset = "0x1660B70", VA = "0x1660B70")]
		public static extern void ISteamApps_RequestAppProofOfPurchaseKey(AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x60000DA")]
		[Address(RVA = "0x1660C10", Offset = "0x1660C10", VA = "0x1660C10")]
		public static extern bool ISteamApps_GetCurrentBetaName(IntPtr pchName, int cchNameBufferSize);

		[PreserveSig]
		[Token(Token = "0x60000DB")]
		[Address(RVA = "0x1660CC0", Offset = "0x1660CC0", VA = "0x1660CC0")]
		public static extern bool ISteamApps_MarkContentCorrupt(bool bMissingFilesOnly);

		[PreserveSig]
		[Token(Token = "0x60000DC")]
		[Address(RVA = "0x1660D68", Offset = "0x1660D68", VA = "0x1660D68")]
		public static extern uint ISteamApps_GetInstalledDepots(AppId_t appID, [In][Out] DepotId_t[] pvecDepots, uint cMaxDepots);

		[PreserveSig]
		[Token(Token = "0x60000DD")]
		[Address(RVA = "0x1660E20", Offset = "0x1660E20", VA = "0x1660E20")]
		public static extern uint ISteamApps_GetAppInstallDir(AppId_t appID, IntPtr pchFolder, uint cchFolderBufferSize);

		[PreserveSig]
		[Token(Token = "0x60000DE")]
		[Address(RVA = "0x1660ED0", Offset = "0x1660ED0", VA = "0x1660ED0")]
		public static extern bool ISteamApps_BIsAppInstalled(AppId_t appID);

		[PreserveSig]
		[Token(Token = "0x60000DF")]
		[Address(RVA = "0x1660F78", Offset = "0x1660F78", VA = "0x1660F78")]
		public static extern ulong ISteamApps_GetAppOwner();

		[PreserveSig]
		[Token(Token = "0x60000E0")]
		[Address(RVA = "0x1661010", Offset = "0x1661010", VA = "0x1661010")]
		public static extern IntPtr ISteamApps_GetLaunchQueryParam(InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x60000E1")]
		[Address(RVA = "0x1661038", Offset = "0x1661038", VA = "0x1661038")]
		public static extern bool ISteamApps_GetDlcDownloadProgress(AppId_t nAppID, out ulong punBytesDownloaded, out ulong punBytesTotal);

		[PreserveSig]
		[Token(Token = "0x60000E2")]
		[Address(RVA = "0x16610F0", Offset = "0x16610F0", VA = "0x16610F0")]
		public static extern int ISteamApps_GetAppBuildId();

		[PreserveSig]
		[Token(Token = "0x60000E3")]
		[Address(RVA = "0x1661188", Offset = "0x1661188", VA = "0x1661188")]
		public static extern void ISteamApps_RequestAllProofOfPurchaseKeys();

		[PreserveSig]
		[Token(Token = "0x60000E4")]
		[Address(RVA = "0x1661220", Offset = "0x1661220", VA = "0x1661220")]
		public static extern ulong ISteamApps_GetFileDetails(InteropHelp.UTF8StringHandle pszFileName);

		[PreserveSig]
		[Token(Token = "0x60000E5")]
		[Address(RVA = "0x1661248", Offset = "0x1661248", VA = "0x1661248")]
		public static extern int ISteamClient_CreateSteamPipe();

		[PreserveSig]
		[Token(Token = "0x60000E6")]
		[Address(RVA = "0x16612E0", Offset = "0x16612E0", VA = "0x16612E0")]
		public static extern bool ISteamClient_BReleaseSteamPipe(HSteamPipe hSteamPipe);

		[PreserveSig]
		[Token(Token = "0x60000E7")]
		[Address(RVA = "0x1661388", Offset = "0x1661388", VA = "0x1661388")]
		public static extern int ISteamClient_ConnectToGlobalUser(HSteamPipe hSteamPipe);

		[PreserveSig]
		[Token(Token = "0x60000E8")]
		[Address(RVA = "0x1661428", Offset = "0x1661428", VA = "0x1661428")]
		public static extern int ISteamClient_CreateLocalUser(out HSteamPipe phSteamPipe, EAccountType eAccountType);

		[PreserveSig]
		[Token(Token = "0x60000E9")]
		[Address(RVA = "0x16614D0", Offset = "0x16614D0", VA = "0x16614D0")]
		public static extern void ISteamClient_ReleaseUser(HSteamPipe hSteamPipe, HSteamUser hUser);

		[PreserveSig]
		[Token(Token = "0x60000EA")]
		[Address(RVA = "0x1661578", Offset = "0x1661578", VA = "0x1661578")]
		public static extern IntPtr ISteamClient_GetISteamUser(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60000EB")]
		[Address(RVA = "0x166159C", Offset = "0x166159C", VA = "0x166159C")]
		public static extern IntPtr ISteamClient_GetISteamGameServer(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60000EC")]
		[Address(RVA = "0x16615C0", Offset = "0x16615C0", VA = "0x16615C0")]
		public static extern void ISteamClient_SetLocalIPBinding(uint unIP, ushort usPort);

		[PreserveSig]
		[Token(Token = "0x60000ED")]
		[Address(RVA = "0x1661668", Offset = "0x1661668", VA = "0x1661668")]
		public static extern IntPtr ISteamClient_GetISteamFriends(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60000EE")]
		[Address(RVA = "0x166168C", Offset = "0x166168C", VA = "0x166168C")]
		public static extern IntPtr ISteamClient_GetISteamUtils(HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60000EF")]
		[Address(RVA = "0x16616B0", Offset = "0x16616B0", VA = "0x16616B0")]
		public static extern IntPtr ISteamClient_GetISteamMatchmaking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60000F0")]
		[Address(RVA = "0x16616D4", Offset = "0x16616D4", VA = "0x16616D4")]
		public static extern IntPtr ISteamClient_GetISteamMatchmakingServers(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60000F1")]
		[Address(RVA = "0x16616F8", Offset = "0x16616F8", VA = "0x16616F8")]
		public static extern IntPtr ISteamClient_GetISteamGenericInterface(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60000F2")]
		[Address(RVA = "0x166171C", Offset = "0x166171C", VA = "0x166171C")]
		public static extern IntPtr ISteamClient_GetISteamUserStats(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60000F3")]
		[Address(RVA = "0x1661740", Offset = "0x1661740", VA = "0x1661740")]
		public static extern IntPtr ISteamClient_GetISteamGameServerStats(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60000F4")]
		[Address(RVA = "0x1661764", Offset = "0x1661764", VA = "0x1661764")]
		public static extern IntPtr ISteamClient_GetISteamApps(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60000F5")]
		[Address(RVA = "0x1661788", Offset = "0x1661788", VA = "0x1661788")]
		public static extern IntPtr ISteamClient_GetISteamNetworking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60000F6")]
		[Address(RVA = "0x16617AC", Offset = "0x16617AC", VA = "0x16617AC")]
		public static extern IntPtr ISteamClient_GetISteamRemoteStorage(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60000F7")]
		[Address(RVA = "0x16617D0", Offset = "0x16617D0", VA = "0x16617D0")]
		public static extern IntPtr ISteamClient_GetISteamScreenshots(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60000F8")]
		[Address(RVA = "0x16617F8", Offset = "0x16617F8", VA = "0x16617F8")]
		public static extern uint ISteamClient_GetIPCCallCount();

		[PreserveSig]
		[Token(Token = "0x60000F9")]
		[Address(RVA = "0x1661890", Offset = "0x1661890", VA = "0x1661890")]
		public static extern void ISteamClient_SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction);

		[PreserveSig]
		[Token(Token = "0x60000FA")]
		[Address(RVA = "0x1661940", Offset = "0x1661940", VA = "0x1661940")]
		public static extern bool ISteamClient_BShutdownIfAllPipesClosed();

		[PreserveSig]
		[Token(Token = "0x60000FB")]
		[Address(RVA = "0x16619E0", Offset = "0x16619E0", VA = "0x16619E0")]
		public static extern IntPtr ISteamClient_GetISteamHTTP(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60000FC")]
		[Address(RVA = "0x1661A04", Offset = "0x1661A04", VA = "0x1661A04")]
		public static extern IntPtr ISteamClient_GetISteamUnifiedMessages(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60000FD")]
		[Address(RVA = "0x1661A28", Offset = "0x1661A28", VA = "0x1661A28")]
		public static extern IntPtr ISteamClient_GetISteamController(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60000FE")]
		[Address(RVA = "0x1661A4C", Offset = "0x1661A4C", VA = "0x1661A4C")]
		public static extern IntPtr ISteamClient_GetISteamUGC(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60000FF")]
		[Address(RVA = "0x1661A70", Offset = "0x1661A70", VA = "0x1661A70")]
		public static extern IntPtr ISteamClient_GetISteamAppList(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000100")]
		[Address(RVA = "0x1661A94", Offset = "0x1661A94", VA = "0x1661A94")]
		public static extern IntPtr ISteamClient_GetISteamMusic(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000101")]
		[Address(RVA = "0x1661AB8", Offset = "0x1661AB8", VA = "0x1661AB8")]
		public static extern IntPtr ISteamClient_GetISteamMusicRemote(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000102")]
		[Address(RVA = "0x1661ADC", Offset = "0x1661ADC", VA = "0x1661ADC")]
		public static extern IntPtr ISteamClient_GetISteamHTMLSurface(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000103")]
		[Address(RVA = "0x1661B00", Offset = "0x1661B00", VA = "0x1661B00")]
		public static extern IntPtr ISteamClient_GetISteamInventory(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000104")]
		[Address(RVA = "0x1661B24", Offset = "0x1661B24", VA = "0x1661B24")]
		public static extern IntPtr ISteamClient_GetISteamVideo(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000105")]
		[Address(RVA = "0x1661B48", Offset = "0x1661B48", VA = "0x1661B48")]
		public static extern bool ISteamController_Init();

		[PreserveSig]
		[Token(Token = "0x6000106")]
		[Address(RVA = "0x1661BE8", Offset = "0x1661BE8", VA = "0x1661BE8")]
		public static extern bool ISteamController_Shutdown();

		[PreserveSig]
		[Token(Token = "0x6000107")]
		[Address(RVA = "0x1661C88", Offset = "0x1661C88", VA = "0x1661C88")]
		public static extern void ISteamController_RunFrame();

		[PreserveSig]
		[Token(Token = "0x6000108")]
		[Address(RVA = "0x1661D20", Offset = "0x1661D20", VA = "0x1661D20")]
		public static extern int ISteamController_GetConnectedControllers([In][Out] ControllerHandle_t[] handlesOut);

		[PreserveSig]
		[Token(Token = "0x6000109")]
		[Address(RVA = "0x1661DC8", Offset = "0x1661DC8", VA = "0x1661DC8")]
		public static extern bool ISteamController_ShowBindingPanel(ControllerHandle_t controllerHandle);

		[PreserveSig]
		[Token(Token = "0x600010A")]
		[Address(RVA = "0x1661E78", Offset = "0x1661E78", VA = "0x1661E78")]
		public static extern ulong ISteamController_GetActionSetHandle(InteropHelp.UTF8StringHandle pszActionSetName);

		[PreserveSig]
		[Token(Token = "0x600010B")]
		[Address(RVA = "0x1661EA0", Offset = "0x1661EA0", VA = "0x1661EA0")]
		public static extern void ISteamController_ActivateActionSet(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle);

		[PreserveSig]
		[Token(Token = "0x600010C")]
		[Address(RVA = "0x1661F58", Offset = "0x1661F58", VA = "0x1661F58")]
		public static extern ulong ISteamController_GetCurrentActionSet(ControllerHandle_t controllerHandle);

		[PreserveSig]
		[Token(Token = "0x600010D")]
		[Address(RVA = "0x1662000", Offset = "0x1662000", VA = "0x1662000")]
		public static extern ulong ISteamController_GetDigitalActionHandle(InteropHelp.UTF8StringHandle pszActionName);

		[PreserveSig]
		[Token(Token = "0x600010E")]
		[Address(RVA = "0x1662028", Offset = "0x1662028", VA = "0x1662028")]
		public static extern ControllerDigitalActionData_t ISteamController_GetDigitalActionData(ControllerHandle_t controllerHandle, ControllerDigitalActionHandle_t digitalActionHandle);

		[PreserveSig]
		[Token(Token = "0x600010F")]
		[Address(RVA = "0x16620E0", Offset = "0x16620E0", VA = "0x16620E0")]
		public static extern int ISteamController_GetDigitalActionOrigins(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerDigitalActionHandle_t digitalActionHandle, [In][Out] EControllerActionOrigin[] originsOut);

		[PreserveSig]
		[Token(Token = "0x6000110")]
		[Address(RVA = "0x16621B8", Offset = "0x16621B8", VA = "0x16621B8")]
		public static extern ulong ISteamController_GetAnalogActionHandle(InteropHelp.UTF8StringHandle pszActionName);

		[PreserveSig]
		[Token(Token = "0x6000111")]
		[Address(RVA = "0x16621E0", Offset = "0x16621E0", VA = "0x16621E0")]
		public static extern ControllerAnalogActionData_t ISteamController_GetAnalogActionData(ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t analogActionHandle);

		[PreserveSig]
		[Token(Token = "0x6000112")]
		[Address(RVA = "0x16622A0", Offset = "0x16622A0", VA = "0x16622A0")]
		public static extern int ISteamController_GetAnalogActionOrigins(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerAnalogActionHandle_t analogActionHandle, [In][Out] EControllerActionOrigin[] originsOut);

		[PreserveSig]
		[Token(Token = "0x6000113")]
		[Address(RVA = "0x1662378", Offset = "0x1662378", VA = "0x1662378")]
		public static extern void ISteamController_StopAnalogActionMomentum(ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t eAction);

		[PreserveSig]
		[Token(Token = "0x6000114")]
		[Address(RVA = "0x1662430", Offset = "0x1662430", VA = "0x1662430")]
		public static extern void ISteamController_TriggerHapticPulse(ControllerHandle_t controllerHandle, ESteamControllerPad eTargetPad, ushort usDurationMicroSec);

		[PreserveSig]
		[Token(Token = "0x6000115")]
		[Address(RVA = "0x16624E8", Offset = "0x16624E8", VA = "0x16624E8")]
		public static extern void ISteamController_TriggerRepeatedHapticPulse(ControllerHandle_t controllerHandle, ESteamControllerPad eTargetPad, ushort usDurationMicroSec, ushort usOffMicroSec, ushort unRepeat, uint nFlags);

		[PreserveSig]
		[Token(Token = "0x6000116")]
		[Address(RVA = "0x16625B8", Offset = "0x16625B8", VA = "0x16625B8")]
		public static extern void ISteamController_TriggerVibration(ControllerHandle_t controllerHandle, ushort usLeftSpeed, ushort usRightSpeed);

		[PreserveSig]
		[Token(Token = "0x6000117")]
		[Address(RVA = "0x1662670", Offset = "0x1662670", VA = "0x1662670")]
		public static extern void ISteamController_SetLEDColor(ControllerHandle_t controllerHandle, byte nColorR, byte nColorG, byte nColorB, uint nFlags);

		[PreserveSig]
		[Token(Token = "0x6000118")]
		[Address(RVA = "0x1662738", Offset = "0x1662738", VA = "0x1662738")]
		public static extern int ISteamController_GetGamepadIndexForController(ControllerHandle_t ulControllerHandle);

		[PreserveSig]
		[Token(Token = "0x6000119")]
		[Address(RVA = "0x16627E0", Offset = "0x16627E0", VA = "0x16627E0")]
		public static extern ulong ISteamController_GetControllerForGamepadIndex(int nIndex);

		[PreserveSig]
		[Token(Token = "0x600011A")]
		[Address(RVA = "0x1662880", Offset = "0x1662880", VA = "0x1662880")]
		public static extern ControllerMotionData_t ISteamController_GetMotionData(ControllerHandle_t controllerHandle);

		[PreserveSig]
		[Token(Token = "0x600011B")]
		[Address(RVA = "0x1662930", Offset = "0x1662930", VA = "0x1662930")]
		public static extern bool ISteamController_ShowDigitalActionOrigins(ControllerHandle_t controllerHandle, ControllerDigitalActionHandle_t digitalActionHandle, float flScale, float flXPosition, float flYPosition);

		[PreserveSig]
		[Token(Token = "0x600011C")]
		[Address(RVA = "0x1662A10", Offset = "0x1662A10", VA = "0x1662A10")]
		public static extern bool ISteamController_ShowAnalogActionOrigins(ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t analogActionHandle, float flScale, float flXPosition, float flYPosition);

		[PreserveSig]
		[Token(Token = "0x600011D")]
		[Address(RVA = "0x1662AF0", Offset = "0x1662AF0", VA = "0x1662AF0")]
		public static extern IntPtr ISteamController_GetStringForActionOrigin(EControllerActionOrigin eOrigin);

		[PreserveSig]
		[Token(Token = "0x600011E")]
		[Address(RVA = "0x1662B90", Offset = "0x1662B90", VA = "0x1662B90")]
		public static extern IntPtr ISteamController_GetGlyphForActionOrigin(EControllerActionOrigin eOrigin);

		[PreserveSig]
		[Token(Token = "0x600011F")]
		[Address(RVA = "0x1662C30", Offset = "0x1662C30", VA = "0x1662C30")]
		public static extern IntPtr ISteamFriends_GetPersonaName();

		[PreserveSig]
		[Token(Token = "0x6000120")]
		[Address(RVA = "0x1662CC8", Offset = "0x1662CC8", VA = "0x1662CC8")]
		public static extern ulong ISteamFriends_SetPersonaName(InteropHelp.UTF8StringHandle pchPersonaName);

		[PreserveSig]
		[Token(Token = "0x6000121")]
		[Address(RVA = "0x1662CF0", Offset = "0x1662CF0", VA = "0x1662CF0")]
		public static extern EPersonaState ISteamFriends_GetPersonaState();

		[PreserveSig]
		[Token(Token = "0x6000122")]
		[Address(RVA = "0x1662D88", Offset = "0x1662D88", VA = "0x1662D88")]
		public static extern int ISteamFriends_GetFriendCount(EFriendFlags iFriendFlags);

		[PreserveSig]
		[Token(Token = "0x6000123")]
		[Address(RVA = "0x1662E28", Offset = "0x1662E28", VA = "0x1662E28")]
		public static extern ulong ISteamFriends_GetFriendByIndex(int iFriend, EFriendFlags iFriendFlags);

		[PreserveSig]
		[Token(Token = "0x6000124")]
		[Address(RVA = "0x1662ED0", Offset = "0x1662ED0", VA = "0x1662ED0")]
		public static extern EFriendRelationship ISteamFriends_GetFriendRelationship(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x6000125")]
		[Address(RVA = "0x1662F78", Offset = "0x1662F78", VA = "0x1662F78")]
		public static extern EPersonaState ISteamFriends_GetFriendPersonaState(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x6000126")]
		[Address(RVA = "0x1663020", Offset = "0x1663020", VA = "0x1663020")]
		public static extern IntPtr ISteamFriends_GetFriendPersonaName(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x6000127")]
		[Address(RVA = "0x16630C8", Offset = "0x16630C8", VA = "0x16630C8")]
		public static extern bool ISteamFriends_GetFriendGamePlayed(CSteamID steamIDFriend, out FriendGameInfo_t pFriendGameInfo);

		[PreserveSig]
		[Token(Token = "0x6000128")]
		[Address(RVA = "0x1663180", Offset = "0x1663180", VA = "0x1663180")]
		public static extern IntPtr ISteamFriends_GetFriendPersonaNameHistory(CSteamID steamIDFriend, int iPersonaName);

		[PreserveSig]
		[Token(Token = "0x6000129")]
		[Address(RVA = "0x1663230", Offset = "0x1663230", VA = "0x1663230")]
		public static extern int ISteamFriends_GetFriendSteamLevel(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x600012A")]
		[Address(RVA = "0x16632D8", Offset = "0x16632D8", VA = "0x16632D8")]
		public static extern IntPtr ISteamFriends_GetPlayerNickname(CSteamID steamIDPlayer);

		[PreserveSig]
		[Token(Token = "0x600012B")]
		[Address(RVA = "0x1663380", Offset = "0x1663380", VA = "0x1663380")]
		public static extern int ISteamFriends_GetFriendsGroupCount();

		[PreserveSig]
		[Token(Token = "0x600012C")]
		[Address(RVA = "0x1663418", Offset = "0x1663418", VA = "0x1663418")]
		public static extern short ISteamFriends_GetFriendsGroupIDByIndex(int iFG);

		[PreserveSig]
		[Token(Token = "0x600012D")]
		[Address(RVA = "0x16634B8", Offset = "0x16634B8", VA = "0x16634B8")]
		public static extern IntPtr ISteamFriends_GetFriendsGroupName(FriendsGroupID_t friendsGroupID);

		[PreserveSig]
		[Token(Token = "0x600012E")]
		[Address(RVA = "0x1663558", Offset = "0x1663558", VA = "0x1663558")]
		public static extern int ISteamFriends_GetFriendsGroupMembersCount(FriendsGroupID_t friendsGroupID);

		[PreserveSig]
		[Token(Token = "0x600012F")]
		[Address(RVA = "0x16635F8", Offset = "0x16635F8", VA = "0x16635F8")]
		public static extern void ISteamFriends_GetFriendsGroupMembersList(FriendsGroupID_t friendsGroupID, [In][Out] CSteamID[] pOutSteamIDMembers, int nMembersCount);

		[PreserveSig]
		[Token(Token = "0x6000130")]
		[Address(RVA = "0x16636B0", Offset = "0x16636B0", VA = "0x16636B0")]
		public static extern bool ISteamFriends_HasFriend(CSteamID steamIDFriend, EFriendFlags iFriendFlags);

		[PreserveSig]
		[Token(Token = "0x6000131")]
		[Address(RVA = "0x1663768", Offset = "0x1663768", VA = "0x1663768")]
		public static extern int ISteamFriends_GetClanCount();

		[PreserveSig]
		[Token(Token = "0x6000132")]
		[Address(RVA = "0x1663800", Offset = "0x1663800", VA = "0x1663800")]
		public static extern ulong ISteamFriends_GetClanByIndex(int iClan);

		[PreserveSig]
		[Token(Token = "0x6000133")]
		[Address(RVA = "0x16638A0", Offset = "0x16638A0", VA = "0x16638A0")]
		public static extern IntPtr ISteamFriends_GetClanName(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x6000134")]
		[Address(RVA = "0x1663948", Offset = "0x1663948", VA = "0x1663948")]
		public static extern IntPtr ISteamFriends_GetClanTag(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x6000135")]
		[Address(RVA = "0x16639F0", Offset = "0x16639F0", VA = "0x16639F0")]
		public static extern bool ISteamFriends_GetClanActivityCounts(CSteamID steamIDClan, out int pnOnline, out int pnInGame, out int pnChatting);

		[PreserveSig]
		[Token(Token = "0x6000136")]
		[Address(RVA = "0x1663AB8", Offset = "0x1663AB8", VA = "0x1663AB8")]
		public static extern ulong ISteamFriends_DownloadClanActivityCounts([In][Out] CSteamID[] psteamIDClans, int cClansToRequest);

		[PreserveSig]
		[Token(Token = "0x6000137")]
		[Address(RVA = "0x1663B68", Offset = "0x1663B68", VA = "0x1663B68")]
		public static extern int ISteamFriends_GetFriendCountFromSource(CSteamID steamIDSource);

		[PreserveSig]
		[Token(Token = "0x6000138")]
		[Address(RVA = "0x1663C10", Offset = "0x1663C10", VA = "0x1663C10")]
		public static extern ulong ISteamFriends_GetFriendFromSourceByIndex(CSteamID steamIDSource, int iFriend);

		[PreserveSig]
		[Token(Token = "0x6000139")]
		[Address(RVA = "0x1663CC0", Offset = "0x1663CC0", VA = "0x1663CC0")]
		public static extern bool ISteamFriends_IsUserInSource(CSteamID steamIDUser, CSteamID steamIDSource);

		[PreserveSig]
		[Token(Token = "0x600013A")]
		[Address(RVA = "0x1663D80", Offset = "0x1663D80", VA = "0x1663D80")]
		public static extern void ISteamFriends_SetInGameVoiceSpeaking(CSteamID steamIDUser, bool bSpeaking);

		[PreserveSig]
		[Token(Token = "0x600013B")]
		[Address(RVA = "0x1663E30", Offset = "0x1663E30", VA = "0x1663E30")]
		public static extern void ISteamFriends_ActivateGameOverlay(InteropHelp.UTF8StringHandle pchDialog);

		[PreserveSig]
		[Token(Token = "0x600013C")]
		[Address(RVA = "0x1663E54", Offset = "0x1663E54", VA = "0x1663E54")]
		public static extern void ISteamFriends_ActivateGameOverlayToUser(InteropHelp.UTF8StringHandle pchDialog, CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x600013D")]
		[Address(RVA = "0x1663E78", Offset = "0x1663E78", VA = "0x1663E78")]
		public static extern void ISteamFriends_ActivateGameOverlayToWebPage(InteropHelp.UTF8StringHandle pchURL);

		[PreserveSig]
		[Token(Token = "0x600013E")]
		[Address(RVA = "0x1663EA0", Offset = "0x1663EA0", VA = "0x1663EA0")]
		public static extern void ISteamFriends_ActivateGameOverlayToStore(AppId_t nAppID, EOverlayToStoreFlag eFlag);

		[PreserveSig]
		[Token(Token = "0x600013F")]
		[Address(RVA = "0x1663F48", Offset = "0x1663F48", VA = "0x1663F48")]
		public static extern void ISteamFriends_SetPlayedWith(CSteamID steamIDUserPlayedWith);

		[PreserveSig]
		[Token(Token = "0x6000140")]
		[Address(RVA = "0x1663FF0", Offset = "0x1663FF0", VA = "0x1663FF0")]
		public static extern void ISteamFriends_ActivateGameOverlayInviteDialog(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x6000141")]
		[Address(RVA = "0x1664098", Offset = "0x1664098", VA = "0x1664098")]
		public static extern int ISteamFriends_GetSmallFriendAvatar(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x6000142")]
		[Address(RVA = "0x1664140", Offset = "0x1664140", VA = "0x1664140")]
		public static extern int ISteamFriends_GetMediumFriendAvatar(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x6000143")]
		[Address(RVA = "0x16641E8", Offset = "0x16641E8", VA = "0x16641E8")]
		public static extern int ISteamFriends_GetLargeFriendAvatar(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x6000144")]
		[Address(RVA = "0x1664290", Offset = "0x1664290", VA = "0x1664290")]
		public static extern bool ISteamFriends_RequestUserInformation(CSteamID steamIDUser, bool bRequireNameOnly);

		[PreserveSig]
		[Token(Token = "0x6000145")]
		[Address(RVA = "0x1664348", Offset = "0x1664348", VA = "0x1664348")]
		public static extern ulong ISteamFriends_RequestClanOfficerList(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x6000146")]
		[Address(RVA = "0x16643F0", Offset = "0x16643F0", VA = "0x16643F0")]
		public static extern ulong ISteamFriends_GetClanOwner(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x6000147")]
		[Address(RVA = "0x1664498", Offset = "0x1664498", VA = "0x1664498")]
		public static extern int ISteamFriends_GetClanOfficerCount(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x6000148")]
		[Address(RVA = "0x1664540", Offset = "0x1664540", VA = "0x1664540")]
		public static extern ulong ISteamFriends_GetClanOfficerByIndex(CSteamID steamIDClan, int iOfficer);

		[PreserveSig]
		[Token(Token = "0x6000149")]
		[Address(RVA = "0x16645F0", Offset = "0x16645F0", VA = "0x16645F0")]
		public static extern uint ISteamFriends_GetUserRestrictions();

		[PreserveSig]
		[Token(Token = "0x600014A")]
		[Address(RVA = "0x1664688", Offset = "0x1664688", VA = "0x1664688")]
		public static extern bool ISteamFriends_SetRichPresence(InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue);

		[PreserveSig]
		[Token(Token = "0x600014B")]
		[Address(RVA = "0x16646B0", Offset = "0x16646B0", VA = "0x16646B0")]
		public static extern void ISteamFriends_ClearRichPresence();

		[PreserveSig]
		[Token(Token = "0x600014C")]
		[Address(RVA = "0x1664748", Offset = "0x1664748", VA = "0x1664748")]
		public static extern IntPtr ISteamFriends_GetFriendRichPresence(CSteamID steamIDFriend, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x600014D")]
		[Address(RVA = "0x1664770", Offset = "0x1664770", VA = "0x1664770")]
		public static extern int ISteamFriends_GetFriendRichPresenceKeyCount(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x600014E")]
		[Address(RVA = "0x1664818", Offset = "0x1664818", VA = "0x1664818")]
		public static extern IntPtr ISteamFriends_GetFriendRichPresenceKeyByIndex(CSteamID steamIDFriend, int iKey);

		[PreserveSig]
		[Token(Token = "0x600014F")]
		[Address(RVA = "0x16648C8", Offset = "0x16648C8", VA = "0x16648C8")]
		public static extern void ISteamFriends_RequestFriendRichPresence(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x6000150")]
		[Address(RVA = "0x1664970", Offset = "0x1664970", VA = "0x1664970")]
		public static extern bool ISteamFriends_InviteUserToGame(CSteamID steamIDFriend, InteropHelp.UTF8StringHandle pchConnectString);

		[PreserveSig]
		[Token(Token = "0x6000151")]
		[Address(RVA = "0x1664998", Offset = "0x1664998", VA = "0x1664998")]
		public static extern int ISteamFriends_GetCoplayFriendCount();

		[PreserveSig]
		[Token(Token = "0x6000152")]
		[Address(RVA = "0x1664A30", Offset = "0x1664A30", VA = "0x1664A30")]
		public static extern ulong ISteamFriends_GetCoplayFriend(int iCoplayFriend);

		[PreserveSig]
		[Token(Token = "0x6000153")]
		[Address(RVA = "0x1664AD0", Offset = "0x1664AD0", VA = "0x1664AD0")]
		public static extern int ISteamFriends_GetFriendCoplayTime(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x6000154")]
		[Address(RVA = "0x1664B78", Offset = "0x1664B78", VA = "0x1664B78")]
		public static extern uint ISteamFriends_GetFriendCoplayGame(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x6000155")]
		[Address(RVA = "0x1664C20", Offset = "0x1664C20", VA = "0x1664C20")]
		public static extern ulong ISteamFriends_JoinClanChatRoom(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x6000156")]
		[Address(RVA = "0x1664CC8", Offset = "0x1664CC8", VA = "0x1664CC8")]
		public static extern bool ISteamFriends_LeaveClanChatRoom(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x6000157")]
		[Address(RVA = "0x1664D78", Offset = "0x1664D78", VA = "0x1664D78")]
		public static extern int ISteamFriends_GetClanChatMemberCount(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x6000158")]
		[Address(RVA = "0x1664E20", Offset = "0x1664E20", VA = "0x1664E20")]
		public static extern ulong ISteamFriends_GetChatMemberByIndex(CSteamID steamIDClan, int iUser);

		[PreserveSig]
		[Token(Token = "0x6000159")]
		[Address(RVA = "0x1664ED0", Offset = "0x1664ED0", VA = "0x1664ED0")]
		public static extern bool ISteamFriends_SendClanChatMessage(CSteamID steamIDClanChat, InteropHelp.UTF8StringHandle pchText);

		[PreserveSig]
		[Token(Token = "0x600015A")]
		[Address(RVA = "0x1664EF8", Offset = "0x1664EF8", VA = "0x1664EF8")]
		public static extern int ISteamFriends_GetClanChatMessage(CSteamID steamIDClanChat, int iMessage, IntPtr prgchText, int cchTextMax, out EChatEntryType peChatEntryType, out CSteamID psteamidChatter);

		[PreserveSig]
		[Token(Token = "0x600015B")]
		[Address(RVA = "0x1664FC8", Offset = "0x1664FC8", VA = "0x1664FC8")]
		public static extern bool ISteamFriends_IsClanChatAdmin(CSteamID steamIDClanChat, CSteamID steamIDUser);

		[PreserveSig]
		[Token(Token = "0x600015C")]
		[Address(RVA = "0x1665088", Offset = "0x1665088", VA = "0x1665088")]
		public static extern bool ISteamFriends_IsClanChatWindowOpenInSteam(CSteamID steamIDClanChat);

		[PreserveSig]
		[Token(Token = "0x600015D")]
		[Address(RVA = "0x1665138", Offset = "0x1665138", VA = "0x1665138")]
		public static extern bool ISteamFriends_OpenClanChatWindowInSteam(CSteamID steamIDClanChat);

		[PreserveSig]
		[Token(Token = "0x600015E")]
		[Address(RVA = "0x16651E8", Offset = "0x16651E8", VA = "0x16651E8")]
		public static extern bool ISteamFriends_CloseClanChatWindowInSteam(CSteamID steamIDClanChat);

		[PreserveSig]
		[Token(Token = "0x600015F")]
		[Address(RVA = "0x1665298", Offset = "0x1665298", VA = "0x1665298")]
		public static extern bool ISteamFriends_SetListenForFriendsMessages(bool bInterceptEnabled);

		[PreserveSig]
		[Token(Token = "0x6000160")]
		[Address(RVA = "0x1665340", Offset = "0x1665340", VA = "0x1665340")]
		public static extern bool ISteamFriends_ReplyToFriendMessage(CSteamID steamIDFriend, InteropHelp.UTF8StringHandle pchMsgToSend);

		[PreserveSig]
		[Token(Token = "0x6000161")]
		[Address(RVA = "0x1665368", Offset = "0x1665368", VA = "0x1665368")]
		public static extern int ISteamFriends_GetFriendMessage(CSteamID steamIDFriend, int iMessageID, IntPtr pvData, int cubData, out EChatEntryType peChatEntryType);

		[PreserveSig]
		[Token(Token = "0x6000162")]
		[Address(RVA = "0x1665430", Offset = "0x1665430", VA = "0x1665430")]
		public static extern ulong ISteamFriends_GetFollowerCount(CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x6000163")]
		[Address(RVA = "0x16654D8", Offset = "0x16654D8", VA = "0x16654D8")]
		public static extern ulong ISteamFriends_IsFollowing(CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x6000164")]
		[Address(RVA = "0x1665580", Offset = "0x1665580", VA = "0x1665580")]
		public static extern ulong ISteamFriends_EnumerateFollowingList(uint unStartIndex);

		[PreserveSig]
		[Token(Token = "0x6000165")]
		[Address(RVA = "0x1665620", Offset = "0x1665620", VA = "0x1665620")]
		public static extern bool ISteamGameServer_InitGameServer(uint unIP, ushort usGamePort, ushort usQueryPort, uint unFlags, AppId_t nGameAppId, InteropHelp.UTF8StringHandle pchVersionString);

		[PreserveSig]
		[Token(Token = "0x6000166")]
		[Address(RVA = "0x1665644", Offset = "0x1665644", VA = "0x1665644")]
		public static extern void ISteamGameServer_SetProduct(InteropHelp.UTF8StringHandle pszProduct);

		[PreserveSig]
		[Token(Token = "0x6000167")]
		[Address(RVA = "0x1665668", Offset = "0x1665668", VA = "0x1665668")]
		public static extern void ISteamGameServer_SetGameDescription(InteropHelp.UTF8StringHandle pszGameDescription);

		[PreserveSig]
		[Token(Token = "0x6000168")]
		[Address(RVA = "0x166568C", Offset = "0x166568C", VA = "0x166568C")]
		public static extern void ISteamGameServer_SetModDir(InteropHelp.UTF8StringHandle pszModDir);

		[PreserveSig]
		[Token(Token = "0x6000169")]
		[Address(RVA = "0x16656B0", Offset = "0x16656B0", VA = "0x16656B0")]
		public static extern void ISteamGameServer_SetDedicatedServer(bool bDedicated);

		[PreserveSig]
		[Token(Token = "0x600016A")]
		[Address(RVA = "0x1665750", Offset = "0x1665750", VA = "0x1665750")]
		public static extern void ISteamGameServer_LogOn(InteropHelp.UTF8StringHandle pszToken);

		[PreserveSig]
		[Token(Token = "0x600016B")]
		[Address(RVA = "0x1665778", Offset = "0x1665778", VA = "0x1665778")]
		public static extern void ISteamGameServer_LogOnAnonymous();

		[PreserveSig]
		[Token(Token = "0x600016C")]
		[Address(RVA = "0x1665810", Offset = "0x1665810", VA = "0x1665810")]
		public static extern void ISteamGameServer_LogOff();

		[PreserveSig]
		[Token(Token = "0x600016D")]
		[Address(RVA = "0x16658A8", Offset = "0x16658A8", VA = "0x16658A8")]
		public static extern bool ISteamGameServer_BLoggedOn();

		[PreserveSig]
		[Token(Token = "0x600016E")]
		[Address(RVA = "0x1665948", Offset = "0x1665948", VA = "0x1665948")]
		public static extern bool ISteamGameServer_BSecure();

		[PreserveSig]
		[Token(Token = "0x600016F")]
		[Address(RVA = "0x16659E8", Offset = "0x16659E8", VA = "0x16659E8")]
		public static extern ulong ISteamGameServer_GetSteamID();

		[PreserveSig]
		[Token(Token = "0x6000170")]
		[Address(RVA = "0x1665A80", Offset = "0x1665A80", VA = "0x1665A80")]
		public static extern bool ISteamGameServer_WasRestartRequested();

		[PreserveSig]
		[Token(Token = "0x6000171")]
		[Address(RVA = "0x1665B20", Offset = "0x1665B20", VA = "0x1665B20")]
		public static extern void ISteamGameServer_SetMaxPlayerCount(int cPlayersMax);

		[PreserveSig]
		[Token(Token = "0x6000172")]
		[Address(RVA = "0x1665BC0", Offset = "0x1665BC0", VA = "0x1665BC0")]
		public static extern void ISteamGameServer_SetBotPlayerCount(int cBotplayers);

		[PreserveSig]
		[Token(Token = "0x6000173")]
		[Address(RVA = "0x1665C60", Offset = "0x1665C60", VA = "0x1665C60")]
		public static extern void ISteamGameServer_SetServerName(InteropHelp.UTF8StringHandle pszServerName);

		[PreserveSig]
		[Token(Token = "0x6000174")]
		[Address(RVA = "0x1665C84", Offset = "0x1665C84", VA = "0x1665C84")]
		public static extern void ISteamGameServer_SetMapName(InteropHelp.UTF8StringHandle pszMapName);

		[PreserveSig]
		[Token(Token = "0x6000175")]
		[Address(RVA = "0x1665CA8", Offset = "0x1665CA8", VA = "0x1665CA8")]
		public static extern void ISteamGameServer_SetPasswordProtected(bool bPasswordProtected);

		[PreserveSig]
		[Token(Token = "0x6000176")]
		[Address(RVA = "0x1665D48", Offset = "0x1665D48", VA = "0x1665D48")]
		public static extern void ISteamGameServer_SetSpectatorPort(ushort unSpectatorPort);

		[PreserveSig]
		[Token(Token = "0x6000177")]
		[Address(RVA = "0x1665DE8", Offset = "0x1665DE8", VA = "0x1665DE8")]
		public static extern void ISteamGameServer_SetSpectatorServerName(InteropHelp.UTF8StringHandle pszSpectatorServerName);

		[PreserveSig]
		[Token(Token = "0x6000178")]
		[Address(RVA = "0x1665E10", Offset = "0x1665E10", VA = "0x1665E10")]
		public static extern void ISteamGameServer_ClearAllKeyValues();

		[PreserveSig]
		[Token(Token = "0x6000179")]
		[Address(RVA = "0x1665EA8", Offset = "0x1665EA8", VA = "0x1665EA8")]
		public static extern void ISteamGameServer_SetKeyValue(InteropHelp.UTF8StringHandle pKey, InteropHelp.UTF8StringHandle pValue);

		[PreserveSig]
		[Token(Token = "0x600017A")]
		[Address(RVA = "0x1665ECC", Offset = "0x1665ECC", VA = "0x1665ECC")]
		public static extern void ISteamGameServer_SetGameTags(InteropHelp.UTF8StringHandle pchGameTags);

		[PreserveSig]
		[Token(Token = "0x600017B")]
		[Address(RVA = "0x1665EF0", Offset = "0x1665EF0", VA = "0x1665EF0")]
		public static extern void ISteamGameServer_SetGameData(InteropHelp.UTF8StringHandle pchGameData);

		[PreserveSig]
		[Token(Token = "0x600017C")]
		[Address(RVA = "0x1665F14", Offset = "0x1665F14", VA = "0x1665F14")]
		public static extern void ISteamGameServer_SetRegion(InteropHelp.UTF8StringHandle pszRegion);

		[PreserveSig]
		[Token(Token = "0x600017D")]
		[Address(RVA = "0x1665F38", Offset = "0x1665F38", VA = "0x1665F38")]
		public static extern bool ISteamGameServer_SendUserConnectAndAuthenticate(uint unIPClient, byte[] pvAuthBlob, uint cubAuthBlobSize, out CSteamID pSteamIDUser);

		[PreserveSig]
		[Token(Token = "0x600017E")]
		[Address(RVA = "0x1666000", Offset = "0x1666000", VA = "0x1666000")]
		public static extern ulong ISteamGameServer_CreateUnauthenticatedUserConnection();

		[PreserveSig]
		[Token(Token = "0x600017F")]
		[Address(RVA = "0x1666098", Offset = "0x1666098", VA = "0x1666098")]
		public static extern void ISteamGameServer_SendUserDisconnect(CSteamID steamIDUser);

		[PreserveSig]
		[Token(Token = "0x6000180")]
		[Address(RVA = "0x1666140", Offset = "0x1666140", VA = "0x1666140")]
		public static extern bool ISteamGameServer_BUpdateUserData(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchPlayerName, uint uScore);

		[PreserveSig]
		[Token(Token = "0x6000181")]
		[Address(RVA = "0x1666168", Offset = "0x1666168", VA = "0x1666168")]
		public static extern uint ISteamGameServer_GetAuthSessionTicket(byte[] pTicket, int cbMaxTicket, out uint pcbTicket);

		[PreserveSig]
		[Token(Token = "0x6000182")]
		[Address(RVA = "0x1666220", Offset = "0x1666220", VA = "0x1666220")]
		public static extern EBeginAuthSessionResult ISteamGameServer_BeginAuthSession(byte[] pAuthTicket, int cbAuthTicket, CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x6000183")]
		[Address(RVA = "0x16662E0", Offset = "0x16662E0", VA = "0x16662E0")]
		public static extern void ISteamGameServer_EndAuthSession(CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x6000184")]
		[Address(RVA = "0x1666388", Offset = "0x1666388", VA = "0x1666388")]
		public static extern void ISteamGameServer_CancelAuthTicket(HAuthTicket hAuthTicket);

		[PreserveSig]
		[Token(Token = "0x6000185")]
		[Address(RVA = "0x1666428", Offset = "0x1666428", VA = "0x1666428")]
		public static extern EUserHasLicenseForAppResult ISteamGameServer_UserHasLicenseForApp(CSteamID steamID, AppId_t appID);

		[PreserveSig]
		[Token(Token = "0x6000186")]
		[Address(RVA = "0x16664D8", Offset = "0x16664D8", VA = "0x16664D8")]
		public static extern bool ISteamGameServer_RequestUserGroupStatus(CSteamID steamIDUser, CSteamID steamIDGroup);

		[PreserveSig]
		[Token(Token = "0x6000187")]
		[Address(RVA = "0x1666598", Offset = "0x1666598", VA = "0x1666598")]
		public static extern void ISteamGameServer_GetGameplayStats();

		[PreserveSig]
		[Token(Token = "0x6000188")]
		[Address(RVA = "0x1666630", Offset = "0x1666630", VA = "0x1666630")]
		public static extern ulong ISteamGameServer_GetServerReputation();

		[PreserveSig]
		[Token(Token = "0x6000189")]
		[Address(RVA = "0x16666C8", Offset = "0x16666C8", VA = "0x16666C8")]
		public static extern uint ISteamGameServer_GetPublicIP();

		[PreserveSig]
		[Token(Token = "0x600018A")]
		[Address(RVA = "0x1666760", Offset = "0x1666760", VA = "0x1666760")]
		public static extern bool ISteamGameServer_HandleIncomingPacket(byte[] pData, int cbData, uint srcIP, ushort srcPort);

		[PreserveSig]
		[Token(Token = "0x600018B")]
		[Address(RVA = "0x1666828", Offset = "0x1666828", VA = "0x1666828")]
		public static extern int ISteamGameServer_GetNextOutgoingPacket(byte[] pOut, int cbMaxOut, out uint pNetAdr, out ushort pPort);

		[PreserveSig]
		[Token(Token = "0x600018C")]
		[Address(RVA = "0x16668E8", Offset = "0x16668E8", VA = "0x16668E8")]
		public static extern void ISteamGameServer_EnableHeartbeats(bool bActive);

		[PreserveSig]
		[Token(Token = "0x600018D")]
		[Address(RVA = "0x1666988", Offset = "0x1666988", VA = "0x1666988")]
		public static extern void ISteamGameServer_SetHeartbeatInterval(int iHeartbeatInterval);

		[PreserveSig]
		[Token(Token = "0x600018E")]
		[Address(RVA = "0x1666A28", Offset = "0x1666A28", VA = "0x1666A28")]
		public static extern void ISteamGameServer_ForceHeartbeat();

		[PreserveSig]
		[Token(Token = "0x600018F")]
		[Address(RVA = "0x1666AC0", Offset = "0x1666AC0", VA = "0x1666AC0")]
		public static extern ulong ISteamGameServer_AssociateWithClan(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x6000190")]
		[Address(RVA = "0x1666B68", Offset = "0x1666B68", VA = "0x1666B68")]
		public static extern ulong ISteamGameServer_ComputeNewPlayerCompatibility(CSteamID steamIDNewPlayer);

		[PreserveSig]
		[Token(Token = "0x6000191")]
		[Address(RVA = "0x1666C10", Offset = "0x1666C10", VA = "0x1666C10")]
		public static extern ulong ISteamGameServerStats_RequestUserStats(CSteamID steamIDUser);

		[PreserveSig]
		[Token(Token = "0x6000192")]
		[Address(RVA = "0x1666CB8", Offset = "0x1666CB8", VA = "0x1666CB8")]
		public static extern bool ISteamGameServerStats_GetUserStat(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out int pData);

		[PreserveSig]
		[Token(Token = "0x6000193")]
		[Address(RVA = "0x1666CDC", Offset = "0x1666CDC", VA = "0x1666CDC")]
		public static extern bool ISteamGameServerStats_GetUserStat_(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out float pData);

		[PreserveSig]
		[Token(Token = "0x6000194")]
		[Address(RVA = "0x1666D00", Offset = "0x1666D00", VA = "0x1666D00")]
		public static extern bool ISteamGameServerStats_GetUserAchievement(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out bool pbAchieved);

		[PreserveSig]
		[Token(Token = "0x6000195")]
		[Address(RVA = "0x1666D24", Offset = "0x1666D24", VA = "0x1666D24")]
		public static extern bool ISteamGameServerStats_SetUserStat(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, int nData);

		[PreserveSig]
		[Token(Token = "0x6000196")]
		[Address(RVA = "0x1666D48", Offset = "0x1666D48", VA = "0x1666D48")]
		public static extern bool ISteamGameServerStats_SetUserStat_(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, float fData);

		[PreserveSig]
		[Token(Token = "0x6000197")]
		[Address(RVA = "0x1666D6C", Offset = "0x1666D6C", VA = "0x1666D6C")]
		public static extern bool ISteamGameServerStats_UpdateUserAvgRateStat(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, float flCountThisSession, double dSessionLength);

		[PreserveSig]
		[Token(Token = "0x6000198")]
		[Address(RVA = "0x1666D90", Offset = "0x1666D90", VA = "0x1666D90")]
		public static extern bool ISteamGameServerStats_SetUserAchievement(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName);

		[PreserveSig]
		[Token(Token = "0x6000199")]
		[Address(RVA = "0x1666DB4", Offset = "0x1666DB4", VA = "0x1666DB4")]
		public static extern bool ISteamGameServerStats_ClearUserAchievement(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName);

		[PreserveSig]
		[Token(Token = "0x600019A")]
		[Address(RVA = "0x1666DD8", Offset = "0x1666DD8", VA = "0x1666DD8")]
		public static extern ulong ISteamGameServerStats_StoreUserStats(CSteamID steamIDUser);

		[PreserveSig]
		[Token(Token = "0x600019B")]
		[Address(RVA = "0x1666E80", Offset = "0x1666E80", VA = "0x1666E80")]
		public static extern bool ISteamHTMLSurface_Init();

		[PreserveSig]
		[Token(Token = "0x600019C")]
		[Address(RVA = "0x1666F20", Offset = "0x1666F20", VA = "0x1666F20")]
		public static extern bool ISteamHTMLSurface_Shutdown();

		[PreserveSig]
		[Token(Token = "0x600019D")]
		[Address(RVA = "0x1666FC0", Offset = "0x1666FC0", VA = "0x1666FC0")]
		public static extern ulong ISteamHTMLSurface_CreateBrowser(InteropHelp.UTF8StringHandle pchUserAgent, InteropHelp.UTF8StringHandle pchUserCSS);

		[PreserveSig]
		[Token(Token = "0x600019E")]
		[Address(RVA = "0x1666FE8", Offset = "0x1666FE8", VA = "0x1666FE8")]
		public static extern void ISteamHTMLSurface_RemoveBrowser(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x600019F")]
		[Address(RVA = "0x1667088", Offset = "0x1667088", VA = "0x1667088")]
		public static extern void ISteamHTMLSurface_LoadURL(HHTMLBrowser unBrowserHandle, InteropHelp.UTF8StringHandle pchURL, InteropHelp.UTF8StringHandle pchPostData);

		[PreserveSig]
		[Token(Token = "0x60001A0")]
		[Address(RVA = "0x16670B0", Offset = "0x16670B0", VA = "0x16670B0")]
		public static extern void ISteamHTMLSurface_SetSize(HHTMLBrowser unBrowserHandle, uint unWidth, uint unHeight);

		[PreserveSig]
		[Token(Token = "0x60001A1")]
		[Address(RVA = "0x1667160", Offset = "0x1667160", VA = "0x1667160")]
		public static extern void ISteamHTMLSurface_StopLoad(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x60001A2")]
		[Address(RVA = "0x1667200", Offset = "0x1667200", VA = "0x1667200")]
		public static extern void ISteamHTMLSurface_Reload(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x60001A3")]
		[Address(RVA = "0x16672A0", Offset = "0x16672A0", VA = "0x16672A0")]
		public static extern void ISteamHTMLSurface_GoBack(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x60001A4")]
		[Address(RVA = "0x1667340", Offset = "0x1667340", VA = "0x1667340")]
		public static extern void ISteamHTMLSurface_GoForward(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x60001A5")]
		[Address(RVA = "0x16673E0", Offset = "0x16673E0", VA = "0x16673E0")]
		public static extern void ISteamHTMLSurface_AddHeader(HHTMLBrowser unBrowserHandle, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue);

		[PreserveSig]
		[Token(Token = "0x60001A6")]
		[Address(RVA = "0x1667404", Offset = "0x1667404", VA = "0x1667404")]
		public static extern void ISteamHTMLSurface_ExecuteJavascript(HHTMLBrowser unBrowserHandle, InteropHelp.UTF8StringHandle pchScript);

		[PreserveSig]
		[Token(Token = "0x60001A7")]
		[Address(RVA = "0x1667428", Offset = "0x1667428", VA = "0x1667428")]
		public static extern void ISteamHTMLSurface_MouseUp(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton);

		[PreserveSig]
		[Token(Token = "0x60001A8")]
		[Address(RVA = "0x16674D0", Offset = "0x16674D0", VA = "0x16674D0")]
		public static extern void ISteamHTMLSurface_MouseDown(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton);

		[PreserveSig]
		[Token(Token = "0x60001A9")]
		[Address(RVA = "0x1667578", Offset = "0x1667578", VA = "0x1667578")]
		public static extern void ISteamHTMLSurface_MouseDoubleClick(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton);

		[PreserveSig]
		[Token(Token = "0x60001AA")]
		[Address(RVA = "0x1667620", Offset = "0x1667620", VA = "0x1667620")]
		public static extern void ISteamHTMLSurface_MouseMove(HHTMLBrowser unBrowserHandle, int x, int y);

		[PreserveSig]
		[Token(Token = "0x60001AB")]
		[Address(RVA = "0x16676D0", Offset = "0x16676D0", VA = "0x16676D0")]
		public static extern void ISteamHTMLSurface_MouseWheel(HHTMLBrowser unBrowserHandle, int nDelta);

		[PreserveSig]
		[Token(Token = "0x60001AC")]
		[Address(RVA = "0x1667778", Offset = "0x1667778", VA = "0x1667778")]
		public static extern void ISteamHTMLSurface_KeyDown(HHTMLBrowser unBrowserHandle, uint nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers);

		[PreserveSig]
		[Token(Token = "0x60001AD")]
		[Address(RVA = "0x1667828", Offset = "0x1667828", VA = "0x1667828")]
		public static extern void ISteamHTMLSurface_KeyUp(HHTMLBrowser unBrowserHandle, uint nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers);

		[PreserveSig]
		[Token(Token = "0x60001AE")]
		[Address(RVA = "0x16678D8", Offset = "0x16678D8", VA = "0x16678D8")]
		public static extern void ISteamHTMLSurface_KeyChar(HHTMLBrowser unBrowserHandle, uint cUnicodeChar, EHTMLKeyModifiers eHTMLKeyModifiers);

		[PreserveSig]
		[Token(Token = "0x60001AF")]
		[Address(RVA = "0x1667988", Offset = "0x1667988", VA = "0x1667988")]
		public static extern void ISteamHTMLSurface_SetHorizontalScroll(HHTMLBrowser unBrowserHandle, uint nAbsolutePixelScroll);

		[PreserveSig]
		[Token(Token = "0x60001B0")]
		[Address(RVA = "0x1667A30", Offset = "0x1667A30", VA = "0x1667A30")]
		public static extern void ISteamHTMLSurface_SetVerticalScroll(HHTMLBrowser unBrowserHandle, uint nAbsolutePixelScroll);

		[PreserveSig]
		[Token(Token = "0x60001B1")]
		[Address(RVA = "0x1667AD8", Offset = "0x1667AD8", VA = "0x1667AD8")]
		public static extern void ISteamHTMLSurface_SetKeyFocus(HHTMLBrowser unBrowserHandle, bool bHasKeyFocus);

		[PreserveSig]
		[Token(Token = "0x60001B2")]
		[Address(RVA = "0x1667B80", Offset = "0x1667B80", VA = "0x1667B80")]
		public static extern void ISteamHTMLSurface_ViewSource(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x60001B3")]
		[Address(RVA = "0x1667C20", Offset = "0x1667C20", VA = "0x1667C20")]
		public static extern void ISteamHTMLSurface_CopyToClipboard(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x60001B4")]
		[Address(RVA = "0x1667CC0", Offset = "0x1667CC0", VA = "0x1667CC0")]
		public static extern void ISteamHTMLSurface_PasteFromClipboard(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x60001B5")]
		[Address(RVA = "0x1667D60", Offset = "0x1667D60", VA = "0x1667D60")]
		public static extern void ISteamHTMLSurface_Find(HHTMLBrowser unBrowserHandle, InteropHelp.UTF8StringHandle pchSearchStr, bool bCurrentlyInFind, bool bReverse);

		[PreserveSig]
		[Token(Token = "0x60001B6")]
		[Address(RVA = "0x1667D88", Offset = "0x1667D88", VA = "0x1667D88")]
		public static extern void ISteamHTMLSurface_StopFind(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x60001B7")]
		[Address(RVA = "0x1667E28", Offset = "0x1667E28", VA = "0x1667E28")]
		public static extern void ISteamHTMLSurface_GetLinkAtPosition(HHTMLBrowser unBrowserHandle, int x, int y);

		[PreserveSig]
		[Token(Token = "0x60001B8")]
		[Address(RVA = "0x1667ED8", Offset = "0x1667ED8", VA = "0x1667ED8")]
		public static extern void ISteamHTMLSurface_SetCookie(InteropHelp.UTF8StringHandle pchHostname, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue, InteropHelp.UTF8StringHandle pchPath, uint nExpires, bool bSecure, bool bHTTPOnly);

		[PreserveSig]
		[Token(Token = "0x60001B9")]
		[Address(RVA = "0x1667F00", Offset = "0x1667F00", VA = "0x1667F00")]
		public static extern void ISteamHTMLSurface_SetPageScaleFactor(HHTMLBrowser unBrowserHandle, float flZoom, int nPointX, int nPointY);

		[PreserveSig]
		[Token(Token = "0x60001BA")]
		[Address(RVA = "0x1667FB8", Offset = "0x1667FB8", VA = "0x1667FB8")]
		public static extern void ISteamHTMLSurface_SetBackgroundMode(HHTMLBrowser unBrowserHandle, bool bBackgroundMode);

		[PreserveSig]
		[Token(Token = "0x60001BB")]
		[Address(RVA = "0x1668060", Offset = "0x1668060", VA = "0x1668060")]
		public static extern void ISteamHTMLSurface_AllowStartRequest(HHTMLBrowser unBrowserHandle, bool bAllowed);

		[PreserveSig]
		[Token(Token = "0x60001BC")]
		[Address(RVA = "0x1668108", Offset = "0x1668108", VA = "0x1668108")]
		public static extern void ISteamHTMLSurface_JSDialogResponse(HHTMLBrowser unBrowserHandle, bool bResult);

		[PreserveSig]
		[Token(Token = "0x60001BD")]
		[Address(RVA = "0x16681B0", Offset = "0x16681B0", VA = "0x16681B0")]
		public static extern void ISteamHTMLSurface_FileLoadDialogResponse(HHTMLBrowser unBrowserHandle, IntPtr pchSelectedFiles);

		[PreserveSig]
		[Token(Token = "0x60001BE")]
		[Address(RVA = "0x1668258", Offset = "0x1668258", VA = "0x1668258")]
		public static extern uint ISteamHTTP_CreateHTTPRequest(EHTTPMethod eHTTPRequestMethod, InteropHelp.UTF8StringHandle pchAbsoluteURL);

		[PreserveSig]
		[Token(Token = "0x60001BF")]
		[Address(RVA = "0x1668280", Offset = "0x1668280", VA = "0x1668280")]
		public static extern bool ISteamHTTP_SetHTTPRequestContextValue(HTTPRequestHandle hRequest, ulong ulContextValue);

		[PreserveSig]
		[Token(Token = "0x60001C0")]
		[Address(RVA = "0x1668338", Offset = "0x1668338", VA = "0x1668338")]
		public static extern bool ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(HTTPRequestHandle hRequest, uint unTimeoutSeconds);

		[PreserveSig]
		[Token(Token = "0x60001C1")]
		[Address(RVA = "0x16683E8", Offset = "0x16683E8", VA = "0x16683E8")]
		public static extern bool ISteamHTTP_SetHTTPRequestHeaderValue(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchHeaderName, InteropHelp.UTF8StringHandle pchHeaderValue);

		[PreserveSig]
		[Token(Token = "0x60001C2")]
		[Address(RVA = "0x166840C", Offset = "0x166840C", VA = "0x166840C")]
		public static extern bool ISteamHTTP_SetHTTPRequestGetOrPostParameter(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchParamName, InteropHelp.UTF8StringHandle pchParamValue);

		[PreserveSig]
		[Token(Token = "0x60001C3")]
		[Address(RVA = "0x1668430", Offset = "0x1668430", VA = "0x1668430")]
		public static extern bool ISteamHTTP_SendHTTPRequest(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle);

		[PreserveSig]
		[Token(Token = "0x60001C4")]
		[Address(RVA = "0x16684E0", Offset = "0x16684E0", VA = "0x16684E0")]
		public static extern bool ISteamHTTP_SendHTTPRequestAndStreamResponse(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle);

		[PreserveSig]
		[Token(Token = "0x60001C5")]
		[Address(RVA = "0x1668590", Offset = "0x1668590", VA = "0x1668590")]
		public static extern bool ISteamHTTP_DeferHTTPRequest(HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x60001C6")]
		[Address(RVA = "0x1668638", Offset = "0x1668638", VA = "0x1668638")]
		public static extern bool ISteamHTTP_PrioritizeHTTPRequest(HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x60001C7")]
		[Address(RVA = "0x16686E0", Offset = "0x16686E0", VA = "0x16686E0")]
		public static extern bool ISteamHTTP_GetHTTPResponseHeaderSize(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchHeaderName, out uint unResponseHeaderSize);

		[PreserveSig]
		[Token(Token = "0x60001C8")]
		[Address(RVA = "0x1668704", Offset = "0x1668704", VA = "0x1668704")]
		public static extern bool ISteamHTTP_GetHTTPResponseHeaderValue(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchHeaderName, byte[] pHeaderValueBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x60001C9")]
		[Address(RVA = "0x1668728", Offset = "0x1668728", VA = "0x1668728")]
		public static extern bool ISteamHTTP_GetHTTPResponseBodySize(HTTPRequestHandle hRequest, out uint unBodySize);

		[PreserveSig]
		[Token(Token = "0x60001CA")]
		[Address(RVA = "0x16687D8", Offset = "0x16687D8", VA = "0x16687D8")]
		public static extern bool ISteamHTTP_GetHTTPResponseBodyData(HTTPRequestHandle hRequest, byte[] pBodyDataBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x60001CB")]
		[Address(RVA = "0x1668898", Offset = "0x1668898", VA = "0x1668898")]
		public static extern bool ISteamHTTP_GetHTTPStreamingResponseBodyData(HTTPRequestHandle hRequest, uint cOffset, byte[] pBodyDataBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x60001CC")]
		[Address(RVA = "0x1668960", Offset = "0x1668960", VA = "0x1668960")]
		public static extern bool ISteamHTTP_ReleaseHTTPRequest(HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x60001CD")]
		[Address(RVA = "0x1668A08", Offset = "0x1668A08", VA = "0x1668A08")]
		public static extern bool ISteamHTTP_GetHTTPDownloadProgressPct(HTTPRequestHandle hRequest, out float pflPercentOut);

		[PreserveSig]
		[Token(Token = "0x60001CE")]
		[Address(RVA = "0x1668AB8", Offset = "0x1668AB8", VA = "0x1668AB8")]
		public static extern bool ISteamHTTP_SetHTTPRequestRawPostBody(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchContentType, byte[] pubBody, uint unBodyLen);

		[PreserveSig]
		[Token(Token = "0x60001CF")]
		[Address(RVA = "0x1668AE0", Offset = "0x1668AE0", VA = "0x1668AE0")]
		public static extern uint ISteamHTTP_CreateCookieContainer(bool bAllowResponsesToModify);

		[PreserveSig]
		[Token(Token = "0x60001D0")]
		[Address(RVA = "0x1668B80", Offset = "0x1668B80", VA = "0x1668B80")]
		public static extern bool ISteamHTTP_ReleaseCookieContainer(HTTPCookieContainerHandle hCookieContainer);

		[PreserveSig]
		[Token(Token = "0x60001D1")]
		[Address(RVA = "0x1668C28", Offset = "0x1668C28", VA = "0x1668C28")]
		public static extern bool ISteamHTTP_SetCookie(HTTPCookieContainerHandle hCookieContainer, InteropHelp.UTF8StringHandle pchHost, InteropHelp.UTF8StringHandle pchUrl, InteropHelp.UTF8StringHandle pchCookie);

		[PreserveSig]
		[Token(Token = "0x60001D2")]
		[Address(RVA = "0x1668C50", Offset = "0x1668C50", VA = "0x1668C50")]
		public static extern bool ISteamHTTP_SetHTTPRequestCookieContainer(HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer);

		[PreserveSig]
		[Token(Token = "0x60001D3")]
		[Address(RVA = "0x1668D00", Offset = "0x1668D00", VA = "0x1668D00")]
		public static extern bool ISteamHTTP_SetHTTPRequestUserAgentInfo(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchUserAgentInfo);

		[PreserveSig]
		[Token(Token = "0x60001D4")]
		[Address(RVA = "0x1668D28", Offset = "0x1668D28", VA = "0x1668D28")]
		public static extern bool ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate);

		[PreserveSig]
		[Token(Token = "0x60001D5")]
		[Address(RVA = "0x1668DD8", Offset = "0x1668DD8", VA = "0x1668DD8")]
		public static extern bool ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(HTTPRequestHandle hRequest, uint unMilliseconds);

		[PreserveSig]
		[Token(Token = "0x60001D6")]
		[Address(RVA = "0x1668E88", Offset = "0x1668E88", VA = "0x1668E88")]
		public static extern bool ISteamHTTP_GetHTTPRequestWasTimedOut(HTTPRequestHandle hRequest, out bool pbWasTimedOut);

		[PreserveSig]
		[Token(Token = "0x60001D7")]
		[Address(RVA = "0x1668F50", Offset = "0x1668F50", VA = "0x1668F50")]
		public static extern EResult ISteamInventory_GetResultStatus(SteamInventoryResult_t resultHandle);

		[PreserveSig]
		[Token(Token = "0x60001D8")]
		[Address(RVA = "0x1668FF0", Offset = "0x1668FF0", VA = "0x1668FF0")]
		public static extern bool ISteamInventory_GetResultItems(SteamInventoryResult_t resultHandle, [In][Out] SteamItemDetails_t[] pOutItemsArray, ref uint punOutItemsArraySize);

		[PreserveSig]
		[Token(Token = "0x60001D9")]
		[Address(RVA = "0x16690B0", Offset = "0x16690B0", VA = "0x16690B0")]
		public static extern bool ISteamInventory_GetResultItemProperty(SteamInventoryResult_t resultHandle, uint unItemIndex, InteropHelp.UTF8StringHandle pchPropertyName, IntPtr pchValueBuffer, ref uint punValueBufferSizeOut);

		[PreserveSig]
		[Token(Token = "0x60001DA")]
		[Address(RVA = "0x16690D8", Offset = "0x16690D8", VA = "0x16690D8")]
		public static extern uint ISteamInventory_GetResultTimestamp(SteamInventoryResult_t resultHandle);

		[PreserveSig]
		[Token(Token = "0x60001DB")]
		[Address(RVA = "0x1669178", Offset = "0x1669178", VA = "0x1669178")]
		public static extern bool ISteamInventory_CheckResultSteamID(SteamInventoryResult_t resultHandle, CSteamID steamIDExpected);

		[PreserveSig]
		[Token(Token = "0x60001DC")]
		[Address(RVA = "0x1669230", Offset = "0x1669230", VA = "0x1669230")]
		public static extern void ISteamInventory_DestroyResult(SteamInventoryResult_t resultHandle);

		[PreserveSig]
		[Token(Token = "0x60001DD")]
		[Address(RVA = "0x16692D0", Offset = "0x16692D0", VA = "0x16692D0")]
		public static extern bool ISteamInventory_GetAllItems(out SteamInventoryResult_t pResultHandle);

		[PreserveSig]
		[Token(Token = "0x60001DE")]
		[Address(RVA = "0x1669378", Offset = "0x1669378", VA = "0x1669378")]
		public static extern bool ISteamInventory_GetItemsByID(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemInstanceID_t[] pInstanceIDs, uint unCountInstanceIDs);

		[PreserveSig]
		[Token(Token = "0x60001DF")]
		[Address(RVA = "0x1669438", Offset = "0x1669438", VA = "0x1669438")]
		public static extern bool ISteamInventory_SerializeResult(SteamInventoryResult_t resultHandle, byte[] pOutBuffer, out uint punOutBufferSize);

		[PreserveSig]
		[Token(Token = "0x60001E0")]
		[Address(RVA = "0x16694F8", Offset = "0x16694F8", VA = "0x16694F8")]
		public static extern bool ISteamInventory_DeserializeResult(out SteamInventoryResult_t pOutResultHandle, byte[] pBuffer, uint unBufferSize, bool bRESERVED_MUST_BE_FALSE);

		[PreserveSig]
		[Token(Token = "0x60001E1")]
		[Address(RVA = "0x16695C0", Offset = "0x16695C0", VA = "0x16695C0")]
		public static extern bool ISteamInventory_GenerateItems(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemDef_t[] pArrayItemDefs, [In][Out] uint[] punArrayQuantity, uint unArrayLength);

		[PreserveSig]
		[Token(Token = "0x60001E2")]
		[Address(RVA = "0x1669690", Offset = "0x1669690", VA = "0x1669690")]
		public static extern bool ISteamInventory_GrantPromoItems(out SteamInventoryResult_t pResultHandle);

		[PreserveSig]
		[Token(Token = "0x60001E3")]
		[Address(RVA = "0x1669738", Offset = "0x1669738", VA = "0x1669738")]
		public static extern bool ISteamInventory_AddPromoItem(out SteamInventoryResult_t pResultHandle, SteamItemDef_t itemDef);

		[PreserveSig]
		[Token(Token = "0x60001E4")]
		[Address(RVA = "0x16697E8", Offset = "0x16697E8", VA = "0x16697E8")]
		public static extern bool ISteamInventory_AddPromoItems(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemDef_t[] pArrayItemDefs, uint unArrayLength);

		[PreserveSig]
		[Token(Token = "0x60001E5")]
		[Address(RVA = "0x16698A8", Offset = "0x16698A8", VA = "0x16698A8")]
		public static extern bool ISteamInventory_ConsumeItem(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemConsume, uint unQuantity);

		[PreserveSig]
		[Token(Token = "0x60001E6")]
		[Address(RVA = "0x1669968", Offset = "0x1669968", VA = "0x1669968")]
		public static extern bool ISteamInventory_ExchangeItems(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemDef_t[] pArrayGenerate, [In][Out] uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, [In][Out] SteamItemInstanceID_t[] pArrayDestroy, [In][Out] uint[] punArrayDestroyQuantity, uint unArrayDestroyLength);

		[PreserveSig]
		[Token(Token = "0x60001E7")]
		[Address(RVA = "0x1669A68", Offset = "0x1669A68", VA = "0x1669A68")]
		public static extern bool ISteamInventory_TransferItemQuantity(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemIdSource, uint unQuantity, SteamItemInstanceID_t itemIdDest);

		[PreserveSig]
		[Token(Token = "0x60001E8")]
		[Address(RVA = "0x1669B38", Offset = "0x1669B38", VA = "0x1669B38")]
		public static extern void ISteamInventory_SendItemDropHeartbeat();

		[PreserveSig]
		[Token(Token = "0x60001E9")]
		[Address(RVA = "0x1669BD0", Offset = "0x1669BD0", VA = "0x1669BD0")]
		public static extern bool ISteamInventory_TriggerItemDrop(out SteamInventoryResult_t pResultHandle, SteamItemDef_t dropListDefinition);

		[PreserveSig]
		[Token(Token = "0x60001EA")]
		[Address(RVA = "0x1669C80", Offset = "0x1669C80", VA = "0x1669C80")]
		public static extern bool ISteamInventory_TradeItems(out SteamInventoryResult_t pResultHandle, CSteamID steamIDTradePartner, [In][Out] SteamItemInstanceID_t[] pArrayGive, [In][Out] uint[] pArrayGiveQuantity, uint nArrayGiveLength, [In][Out] SteamItemInstanceID_t[] pArrayGet, [In][Out] uint[] pArrayGetQuantity, uint nArrayGetLength);

		[PreserveSig]
		[Token(Token = "0x60001EB")]
		[Address(RVA = "0x1669D90", Offset = "0x1669D90", VA = "0x1669D90")]
		public static extern bool ISteamInventory_LoadItemDefinitions();

		[PreserveSig]
		[Token(Token = "0x60001EC")]
		[Address(RVA = "0x1669E30", Offset = "0x1669E30", VA = "0x1669E30")]
		public static extern bool ISteamInventory_GetItemDefinitionIDs([In][Out] SteamItemDef_t[] pItemDefIDs, out uint punItemDefIDsArraySize);

		[PreserveSig]
		[Token(Token = "0x60001ED")]
		[Address(RVA = "0x1669EE8", Offset = "0x1669EE8", VA = "0x1669EE8")]
		public static extern bool ISteamInventory_GetItemDefinitionProperty(SteamItemDef_t iDefinition, InteropHelp.UTF8StringHandle pchPropertyName, IntPtr pchValueBuffer, ref uint punValueBufferSizeOut);

		[PreserveSig]
		[Token(Token = "0x60001EE")]
		[Address(RVA = "0x1669F10", Offset = "0x1669F10", VA = "0x1669F10")]
		public static extern ulong ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x60001EF")]
		[Address(RVA = "0x1669FB8", Offset = "0x1669FB8", VA = "0x1669FB8")]
		public static extern bool ISteamInventory_GetEligiblePromoItemDefinitionIDs(CSteamID steamID, [In][Out] SteamItemDef_t[] pItemDefIDs, ref uint punItemDefIDsArraySize);

		[PreserveSig]
		[Token(Token = "0x60001F0")]
		[Address(RVA = "0x166A080", Offset = "0x166A080", VA = "0x166A080")]
		public static extern int ISteamMatchmaking_GetFavoriteGameCount();

		[PreserveSig]
		[Token(Token = "0x60001F1")]
		[Address(RVA = "0x166A118", Offset = "0x166A118", VA = "0x166A118")]
		public static extern bool ISteamMatchmaking_GetFavoriteGame(int iGame, out AppId_t pnAppID, out uint pnIP, out ushort pnConnPort, out ushort pnQueryPort, out uint punFlags, out uint pRTime32LastPlayedOnServer);

		[PreserveSig]
		[Token(Token = "0x60001F2")]
		[Address(RVA = "0x166A1F0", Offset = "0x166A1F0", VA = "0x166A1F0")]
		public static extern int ISteamMatchmaking_AddFavoriteGame(AppId_t nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags, uint rTime32LastPlayedOnServer);

		[PreserveSig]
		[Token(Token = "0x60001F3")]
		[Address(RVA = "0x166A2B8", Offset = "0x166A2B8", VA = "0x166A2B8")]
		public static extern bool ISteamMatchmaking_RemoveFavoriteGame(AppId_t nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags);

		[PreserveSig]
		[Token(Token = "0x60001F4")]
		[Address(RVA = "0x166A380", Offset = "0x166A380", VA = "0x166A380")]
		public static extern ulong ISteamMatchmaking_RequestLobbyList();

		[PreserveSig]
		[Token(Token = "0x60001F5")]
		[Address(RVA = "0x166A418", Offset = "0x166A418", VA = "0x166A418")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListStringFilter(InteropHelp.UTF8StringHandle pchKeyToMatch, InteropHelp.UTF8StringHandle pchValueToMatch, ELobbyComparison eComparisonType);

		[PreserveSig]
		[Token(Token = "0x60001F6")]
		[Address(RVA = "0x166A43C", Offset = "0x166A43C", VA = "0x166A43C")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListNumericalFilter(InteropHelp.UTF8StringHandle pchKeyToMatch, int nValueToMatch, ELobbyComparison eComparisonType);

		[PreserveSig]
		[Token(Token = "0x60001F7")]
		[Address(RVA = "0x166A460", Offset = "0x166A460", VA = "0x166A460")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListNearValueFilter(InteropHelp.UTF8StringHandle pchKeyToMatch, int nValueToBeCloseTo);

		[PreserveSig]
		[Token(Token = "0x60001F8")]
		[Address(RVA = "0x166A488", Offset = "0x166A488", VA = "0x166A488")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(int nSlotsAvailable);

		[PreserveSig]
		[Token(Token = "0x60001F9")]
		[Address(RVA = "0x166A528", Offset = "0x166A528", VA = "0x166A528")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListDistanceFilter(ELobbyDistanceFilter eLobbyDistanceFilter);

		[PreserveSig]
		[Token(Token = "0x60001FA")]
		[Address(RVA = "0x166A5C8", Offset = "0x166A5C8", VA = "0x166A5C8")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListResultCountFilter(int cMaxResults);

		[PreserveSig]
		[Token(Token = "0x60001FB")]
		[Address(RVA = "0x166A668", Offset = "0x166A668", VA = "0x166A668")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x60001FC")]
		[Address(RVA = "0x166A710", Offset = "0x166A710", VA = "0x166A710")]
		public static extern ulong ISteamMatchmaking_GetLobbyByIndex(int iLobby);

		[PreserveSig]
		[Token(Token = "0x60001FD")]
		[Address(RVA = "0x166A7B0", Offset = "0x166A7B0", VA = "0x166A7B0")]
		public static extern ulong ISteamMatchmaking_CreateLobby(ELobbyType eLobbyType, int cMaxMembers);

		[PreserveSig]
		[Token(Token = "0x60001FE")]
		[Address(RVA = "0x166A858", Offset = "0x166A858", VA = "0x166A858")]
		public static extern ulong ISteamMatchmaking_JoinLobby(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x60001FF")]
		[Address(RVA = "0x166A900", Offset = "0x166A900", VA = "0x166A900")]
		public static extern void ISteamMatchmaking_LeaveLobby(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x6000200")]
		[Address(RVA = "0x166A9A8", Offset = "0x166A9A8", VA = "0x166A9A8")]
		public static extern bool ISteamMatchmaking_InviteUserToLobby(CSteamID steamIDLobby, CSteamID steamIDInvitee);

		[PreserveSig]
		[Token(Token = "0x6000201")]
		[Address(RVA = "0x166AA68", Offset = "0x166AA68", VA = "0x166AA68")]
		public static extern int ISteamMatchmaking_GetNumLobbyMembers(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x6000202")]
		[Address(RVA = "0x166AB10", Offset = "0x166AB10", VA = "0x166AB10")]
		public static extern ulong ISteamMatchmaking_GetLobbyMemberByIndex(CSteamID steamIDLobby, int iMember);

		[PreserveSig]
		[Token(Token = "0x6000203")]
		[Address(RVA = "0x166ABC0", Offset = "0x166ABC0", VA = "0x166ABC0")]
		public static extern IntPtr ISteamMatchmaking_GetLobbyData(CSteamID steamIDLobby, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x6000204")]
		[Address(RVA = "0x166ABE4", Offset = "0x166ABE4", VA = "0x166ABE4")]
		public static extern bool ISteamMatchmaking_SetLobbyData(CSteamID steamIDLobby, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue);

		[PreserveSig]
		[Token(Token = "0x6000205")]
		[Address(RVA = "0x166AC08", Offset = "0x166AC08", VA = "0x166AC08")]
		public static extern int ISteamMatchmaking_GetLobbyDataCount(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x6000206")]
		[Address(RVA = "0x166ACB0", Offset = "0x166ACB0", VA = "0x166ACB0")]
		public static extern bool ISteamMatchmaking_GetLobbyDataByIndex(CSteamID steamIDLobby, int iLobbyData, IntPtr pchKey, int cchKeyBufferSize, IntPtr pchValue, int cchValueBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000207")]
		[Address(RVA = "0x166AD88", Offset = "0x166AD88", VA = "0x166AD88")]
		public static extern bool ISteamMatchmaking_DeleteLobbyData(CSteamID steamIDLobby, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x6000208")]
		[Address(RVA = "0x166ADAC", Offset = "0x166ADAC", VA = "0x166ADAC")]
		public static extern IntPtr ISteamMatchmaking_GetLobbyMemberData(CSteamID steamIDLobby, CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x6000209")]
		[Address(RVA = "0x166ADD0", Offset = "0x166ADD0", VA = "0x166ADD0")]
		public static extern void ISteamMatchmaking_SetLobbyMemberData(CSteamID steamIDLobby, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue);

		[PreserveSig]
		[Token(Token = "0x600020A")]
		[Address(RVA = "0x166ADF8", Offset = "0x166ADF8", VA = "0x166ADF8")]
		public static extern bool ISteamMatchmaking_SendLobbyChatMsg(CSteamID steamIDLobby, byte[] pvMsgBody, int cubMsgBody);

		[PreserveSig]
		[Token(Token = "0x600020B")]
		[Address(RVA = "0x166AEC0", Offset = "0x166AEC0", VA = "0x166AEC0")]
		public static extern int ISteamMatchmaking_GetLobbyChatEntry(CSteamID steamIDLobby, int iChatID, out CSteamID pSteamIDUser, byte[] pvData, int cubData, out EChatEntryType peChatEntryType);

		[PreserveSig]
		[Token(Token = "0x600020C")]
		[Address(RVA = "0x166AF98", Offset = "0x166AF98", VA = "0x166AF98")]
		public static extern bool ISteamMatchmaking_RequestLobbyData(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x600020D")]
		[Address(RVA = "0x166B048", Offset = "0x166B048", VA = "0x166B048")]
		public static extern void ISteamMatchmaking_SetLobbyGameServer(CSteamID steamIDLobby, uint unGameServerIP, ushort unGameServerPort, CSteamID steamIDGameServer);

		[PreserveSig]
		[Token(Token = "0x600020E")]
		[Address(RVA = "0x166B110", Offset = "0x166B110", VA = "0x166B110")]
		public static extern bool ISteamMatchmaking_GetLobbyGameServer(CSteamID steamIDLobby, out uint punGameServerIP, out ushort punGameServerPort, out CSteamID psteamIDGameServer);

		[PreserveSig]
		[Token(Token = "0x600020F")]
		[Address(RVA = "0x166B1D8", Offset = "0x166B1D8", VA = "0x166B1D8")]
		public static extern bool ISteamMatchmaking_SetLobbyMemberLimit(CSteamID steamIDLobby, int cMaxMembers);

		[PreserveSig]
		[Token(Token = "0x6000210")]
		[Address(RVA = "0x166B290", Offset = "0x166B290", VA = "0x166B290")]
		public static extern int ISteamMatchmaking_GetLobbyMemberLimit(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x6000211")]
		[Address(RVA = "0x166B338", Offset = "0x166B338", VA = "0x166B338")]
		public static extern bool ISteamMatchmaking_SetLobbyType(CSteamID steamIDLobby, ELobbyType eLobbyType);

		[PreserveSig]
		[Token(Token = "0x6000212")]
		[Address(RVA = "0x166B3F0", Offset = "0x166B3F0", VA = "0x166B3F0")]
		public static extern bool ISteamMatchmaking_SetLobbyJoinable(CSteamID steamIDLobby, bool bLobbyJoinable);

		[PreserveSig]
		[Token(Token = "0x6000213")]
		[Address(RVA = "0x166B4A8", Offset = "0x166B4A8", VA = "0x166B4A8")]
		public static extern ulong ISteamMatchmaking_GetLobbyOwner(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x6000214")]
		[Address(RVA = "0x166B550", Offset = "0x166B550", VA = "0x166B550")]
		public static extern bool ISteamMatchmaking_SetLobbyOwner(CSteamID steamIDLobby, CSteamID steamIDNewOwner);

		[PreserveSig]
		[Token(Token = "0x6000215")]
		[Address(RVA = "0x166B610", Offset = "0x166B610", VA = "0x166B610")]
		public static extern bool ISteamMatchmaking_SetLinkedLobby(CSteamID steamIDLobby, CSteamID steamIDLobbyDependent);

		[PreserveSig]
		[Token(Token = "0x6000216")]
		[Address(RVA = "0x166B6D0", Offset = "0x166B6D0", VA = "0x166B6D0")]
		public static extern IntPtr ISteamMatchmakingServers_RequestInternetServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x6000217")]
		[Address(RVA = "0x166B788", Offset = "0x166B788", VA = "0x166B788")]
		public static extern IntPtr ISteamMatchmakingServers_RequestLANServerList(AppId_t iApp, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x6000218")]
		[Address(RVA = "0x166B830", Offset = "0x166B830", VA = "0x166B830")]
		public static extern IntPtr ISteamMatchmakingServers_RequestFriendsServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x6000219")]
		[Address(RVA = "0x166B8E8", Offset = "0x166B8E8", VA = "0x166B8E8")]
		public static extern IntPtr ISteamMatchmakingServers_RequestFavoritesServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x600021A")]
		[Address(RVA = "0x166B9A0", Offset = "0x166B9A0", VA = "0x166B9A0")]
		public static extern IntPtr ISteamMatchmakingServers_RequestHistoryServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x600021B")]
		[Address(RVA = "0x166BA58", Offset = "0x166BA58", VA = "0x166BA58")]
		public static extern IntPtr ISteamMatchmakingServers_RequestSpectatorServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x600021C")]
		[Address(RVA = "0x166BB10", Offset = "0x166BB10", VA = "0x166BB10")]
		public static extern void ISteamMatchmakingServers_ReleaseRequest(HServerListRequest hServerListRequest);

		[PreserveSig]
		[Token(Token = "0x600021D")]
		[Address(RVA = "0x166BBB0", Offset = "0x166BBB0", VA = "0x166BBB0")]
		public static extern IntPtr ISteamMatchmakingServers_GetServerDetails(HServerListRequest hRequest, int iServer);

		[PreserveSig]
		[Token(Token = "0x600021E")]
		[Address(RVA = "0x166BC58", Offset = "0x166BC58", VA = "0x166BC58")]
		public static extern void ISteamMatchmakingServers_CancelQuery(HServerListRequest hRequest);

		[PreserveSig]
		[Token(Token = "0x600021F")]
		[Address(RVA = "0x166BCF8", Offset = "0x166BCF8", VA = "0x166BCF8")]
		public static extern void ISteamMatchmakingServers_RefreshQuery(HServerListRequest hRequest);

		[PreserveSig]
		[Token(Token = "0x6000220")]
		[Address(RVA = "0x166BD98", Offset = "0x166BD98", VA = "0x166BD98")]
		public static extern bool ISteamMatchmakingServers_IsRefreshing(HServerListRequest hRequest);

		[PreserveSig]
		[Token(Token = "0x6000221")]
		[Address(RVA = "0x166BE40", Offset = "0x166BE40", VA = "0x166BE40")]
		public static extern int ISteamMatchmakingServers_GetServerCount(HServerListRequest hRequest);

		[PreserveSig]
		[Token(Token = "0x6000222")]
		[Address(RVA = "0x166BEE0", Offset = "0x166BEE0", VA = "0x166BEE0")]
		public static extern void ISteamMatchmakingServers_RefreshServer(HServerListRequest hRequest, int iServer);

		[PreserveSig]
		[Token(Token = "0x6000223")]
		[Address(RVA = "0x166BF88", Offset = "0x166BF88", VA = "0x166BF88")]
		public static extern int ISteamMatchmakingServers_PingServer(uint unIP, ushort usPort, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x6000224")]
		[Address(RVA = "0x166C038", Offset = "0x166C038", VA = "0x166C038")]
		public static extern int ISteamMatchmakingServers_PlayerDetails(uint unIP, ushort usPort, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x6000225")]
		[Address(RVA = "0x166C0E8", Offset = "0x166C0E8", VA = "0x166C0E8")]
		public static extern int ISteamMatchmakingServers_ServerRules(uint unIP, ushort usPort, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x6000226")]
		[Address(RVA = "0x166C198", Offset = "0x166C198", VA = "0x166C198")]
		public static extern void ISteamMatchmakingServers_CancelServerQuery(HServerQuery hServerQuery);

		[PreserveSig]
		[Token(Token = "0x6000227")]
		[Address(RVA = "0x166C238", Offset = "0x166C238", VA = "0x166C238")]
		public static extern bool ISteamMusic_BIsEnabled();

		[PreserveSig]
		[Token(Token = "0x6000228")]
		[Address(RVA = "0x166C2D8", Offset = "0x166C2D8", VA = "0x166C2D8")]
		public static extern bool ISteamMusic_BIsPlaying();

		[PreserveSig]
		[Token(Token = "0x6000229")]
		[Address(RVA = "0x166C378", Offset = "0x166C378", VA = "0x166C378")]
		public static extern AudioPlayback_Status ISteamMusic_GetPlaybackStatus();

		[PreserveSig]
		[Token(Token = "0x600022A")]
		[Address(RVA = "0x166C410", Offset = "0x166C410", VA = "0x166C410")]
		public static extern void ISteamMusic_Play();

		[PreserveSig]
		[Token(Token = "0x600022B")]
		[Address(RVA = "0x166C4A8", Offset = "0x166C4A8", VA = "0x166C4A8")]
		public static extern void ISteamMusic_Pause();

		[PreserveSig]
		[Token(Token = "0x600022C")]
		[Address(RVA = "0x166C540", Offset = "0x166C540", VA = "0x166C540")]
		public static extern void ISteamMusic_PlayPrevious();

		[PreserveSig]
		[Token(Token = "0x600022D")]
		[Address(RVA = "0x166C5D8", Offset = "0x166C5D8", VA = "0x166C5D8")]
		public static extern void ISteamMusic_PlayNext();

		[PreserveSig]
		[Token(Token = "0x600022E")]
		[Address(RVA = "0x166C670", Offset = "0x166C670", VA = "0x166C670")]
		public static extern void ISteamMusic_SetVolume(float flVolume);

		[PreserveSig]
		[Token(Token = "0x600022F")]
		[Address(RVA = "0x166C710", Offset = "0x166C710", VA = "0x166C710")]
		public static extern float ISteamMusic_GetVolume();

		[PreserveSig]
		[Token(Token = "0x6000230")]
		[Address(RVA = "0x166C7A8", Offset = "0x166C7A8", VA = "0x166C7A8")]
		public static extern bool ISteamMusicRemote_RegisterSteamMusicRemote(InteropHelp.UTF8StringHandle pchName);

		[PreserveSig]
		[Token(Token = "0x6000231")]
		[Address(RVA = "0x166C7D0", Offset = "0x166C7D0", VA = "0x166C7D0")]
		public static extern bool ISteamMusicRemote_DeregisterSteamMusicRemote();

		[PreserveSig]
		[Token(Token = "0x6000232")]
		[Address(RVA = "0x166C870", Offset = "0x166C870", VA = "0x166C870")]
		public static extern bool ISteamMusicRemote_BIsCurrentMusicRemote();

		[PreserveSig]
		[Token(Token = "0x6000233")]
		[Address(RVA = "0x166C910", Offset = "0x166C910", VA = "0x166C910")]
		public static extern bool ISteamMusicRemote_BActivationSuccess(bool bValue);

		[PreserveSig]
		[Token(Token = "0x6000234")]
		[Address(RVA = "0x166C9B8", Offset = "0x166C9B8", VA = "0x166C9B8")]
		public static extern bool ISteamMusicRemote_SetDisplayName(InteropHelp.UTF8StringHandle pchDisplayName);

		[PreserveSig]
		[Token(Token = "0x6000235")]
		[Address(RVA = "0x166C9E0", Offset = "0x166C9E0", VA = "0x166C9E0")]
		public static extern bool ISteamMusicRemote_SetPNGIcon_64x64(byte[] pvBuffer, uint cbBufferLength);

		[PreserveSig]
		[Token(Token = "0x6000236")]
		[Address(RVA = "0x166CA98", Offset = "0x166CA98", VA = "0x166CA98")]
		public static extern bool ISteamMusicRemote_EnablePlayPrevious(bool bValue);

		[PreserveSig]
		[Token(Token = "0x6000237")]
		[Address(RVA = "0x166CB40", Offset = "0x166CB40", VA = "0x166CB40")]
		public static extern bool ISteamMusicRemote_EnablePlayNext(bool bValue);

		[PreserveSig]
		[Token(Token = "0x6000238")]
		[Address(RVA = "0x166CBE8", Offset = "0x166CBE8", VA = "0x166CBE8")]
		public static extern bool ISteamMusicRemote_EnableShuffled(bool bValue);

		[PreserveSig]
		[Token(Token = "0x6000239")]
		[Address(RVA = "0x166CC90", Offset = "0x166CC90", VA = "0x166CC90")]
		public static extern bool ISteamMusicRemote_EnableLooped(bool bValue);

		[PreserveSig]
		[Token(Token = "0x600023A")]
		[Address(RVA = "0x166CD38", Offset = "0x166CD38", VA = "0x166CD38")]
		public static extern bool ISteamMusicRemote_EnableQueue(bool bValue);

		[PreserveSig]
		[Token(Token = "0x600023B")]
		[Address(RVA = "0x166CDE0", Offset = "0x166CDE0", VA = "0x166CDE0")]
		public static extern bool ISteamMusicRemote_EnablePlaylists(bool bValue);

		[PreserveSig]
		[Token(Token = "0x600023C")]
		[Address(RVA = "0x166CE88", Offset = "0x166CE88", VA = "0x166CE88")]
		public static extern bool ISteamMusicRemote_UpdatePlaybackStatus(AudioPlayback_Status nStatus);

		[PreserveSig]
		[Token(Token = "0x600023D")]
		[Address(RVA = "0x166CF30", Offset = "0x166CF30", VA = "0x166CF30")]
		public static extern bool ISteamMusicRemote_UpdateShuffled(bool bValue);

		[PreserveSig]
		[Token(Token = "0x600023E")]
		[Address(RVA = "0x166CFD8", Offset = "0x166CFD8", VA = "0x166CFD8")]
		public static extern bool ISteamMusicRemote_UpdateLooped(bool bValue);

		[PreserveSig]
		[Token(Token = "0x600023F")]
		[Address(RVA = "0x166D080", Offset = "0x166D080", VA = "0x166D080")]
		public static extern bool ISteamMusicRemote_UpdateVolume(float flValue);

		[PreserveSig]
		[Token(Token = "0x6000240")]
		[Address(RVA = "0x166D128", Offset = "0x166D128", VA = "0x166D128")]
		public static extern bool ISteamMusicRemote_CurrentEntryWillChange();

		[PreserveSig]
		[Token(Token = "0x6000241")]
		[Address(RVA = "0x166D1C8", Offset = "0x166D1C8", VA = "0x166D1C8")]
		public static extern bool ISteamMusicRemote_CurrentEntryIsAvailable(bool bAvailable);

		[PreserveSig]
		[Token(Token = "0x6000242")]
		[Address(RVA = "0x166D270", Offset = "0x166D270", VA = "0x166D270")]
		public static extern bool ISteamMusicRemote_UpdateCurrentEntryText(InteropHelp.UTF8StringHandle pchText);

		[PreserveSig]
		[Token(Token = "0x6000243")]
		[Address(RVA = "0x166D298", Offset = "0x166D298", VA = "0x166D298")]
		public static extern bool ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(int nValue);

		[PreserveSig]
		[Token(Token = "0x6000244")]
		[Address(RVA = "0x166D340", Offset = "0x166D340", VA = "0x166D340")]
		public static extern bool ISteamMusicRemote_UpdateCurrentEntryCoverArt(byte[] pvBuffer, uint cbBufferLength);

		[PreserveSig]
		[Token(Token = "0x6000245")]
		[Address(RVA = "0x166D3F8", Offset = "0x166D3F8", VA = "0x166D3F8")]
		public static extern bool ISteamMusicRemote_CurrentEntryDidChange();

		[PreserveSig]
		[Token(Token = "0x6000246")]
		[Address(RVA = "0x166D498", Offset = "0x166D498", VA = "0x166D498")]
		public static extern bool ISteamMusicRemote_QueueWillChange();

		[PreserveSig]
		[Token(Token = "0x6000247")]
		[Address(RVA = "0x166D538", Offset = "0x166D538", VA = "0x166D538")]
		public static extern bool ISteamMusicRemote_ResetQueueEntries();

		[PreserveSig]
		[Token(Token = "0x6000248")]
		[Address(RVA = "0x166D5D8", Offset = "0x166D5D8", VA = "0x166D5D8")]
		public static extern bool ISteamMusicRemote_SetQueueEntry(int nID, int nPosition, InteropHelp.UTF8StringHandle pchEntryText);

		[PreserveSig]
		[Token(Token = "0x6000249")]
		[Address(RVA = "0x166D600", Offset = "0x166D600", VA = "0x166D600")]
		public static extern bool ISteamMusicRemote_SetCurrentQueueEntry(int nID);

		[PreserveSig]
		[Token(Token = "0x600024A")]
		[Address(RVA = "0x166D6A8", Offset = "0x166D6A8", VA = "0x166D6A8")]
		public static extern bool ISteamMusicRemote_QueueDidChange();

		[PreserveSig]
		[Token(Token = "0x600024B")]
		[Address(RVA = "0x166D748", Offset = "0x166D748", VA = "0x166D748")]
		public static extern bool ISteamMusicRemote_PlaylistWillChange();

		[PreserveSig]
		[Token(Token = "0x600024C")]
		[Address(RVA = "0x166D7E8", Offset = "0x166D7E8", VA = "0x166D7E8")]
		public static extern bool ISteamMusicRemote_ResetPlaylistEntries();

		[PreserveSig]
		[Token(Token = "0x600024D")]
		[Address(RVA = "0x166D888", Offset = "0x166D888", VA = "0x166D888")]
		public static extern bool ISteamMusicRemote_SetPlaylistEntry(int nID, int nPosition, InteropHelp.UTF8StringHandle pchEntryText);

		[PreserveSig]
		[Token(Token = "0x600024E")]
		[Address(RVA = "0x166D8B0", Offset = "0x166D8B0", VA = "0x166D8B0")]
		public static extern bool ISteamMusicRemote_SetCurrentPlaylistEntry(int nID);

		[PreserveSig]
		[Token(Token = "0x600024F")]
		[Address(RVA = "0x166D958", Offset = "0x166D958", VA = "0x166D958")]
		public static extern bool ISteamMusicRemote_PlaylistDidChange();

		[PreserveSig]
		[Token(Token = "0x6000250")]
		[Address(RVA = "0x166D9F8", Offset = "0x166D9F8", VA = "0x166D9F8")]
		public static extern bool ISteamNetworking_SendP2PPacket(CSteamID steamIDRemote, byte[] pubData, uint cubData, EP2PSend eP2PSendType, int nChannel);

		[PreserveSig]
		[Token(Token = "0x6000251")]
		[Address(RVA = "0x166DAD0", Offset = "0x166DAD0", VA = "0x166DAD0")]
		public static extern bool ISteamNetworking_IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel);

		[PreserveSig]
		[Token(Token = "0x6000252")]
		[Address(RVA = "0x166DB80", Offset = "0x166DB80", VA = "0x166DB80")]
		public static extern bool ISteamNetworking_ReadP2PPacket(byte[] pubDest, uint cubDest, out uint pcubMsgSize, out CSteamID psteamIDRemote, int nChannel);

		[PreserveSig]
		[Token(Token = "0x6000253")]
		[Address(RVA = "0x166DC50", Offset = "0x166DC50", VA = "0x166DC50")]
		public static extern bool ISteamNetworking_AcceptP2PSessionWithUser(CSteamID steamIDRemote);

		[PreserveSig]
		[Token(Token = "0x6000254")]
		[Address(RVA = "0x166DD00", Offset = "0x166DD00", VA = "0x166DD00")]
		public static extern bool ISteamNetworking_CloseP2PSessionWithUser(CSteamID steamIDRemote);

		[PreserveSig]
		[Token(Token = "0x6000255")]
		[Address(RVA = "0x166DDB0", Offset = "0x166DDB0", VA = "0x166DDB0")]
		public static extern bool ISteamNetworking_CloseP2PChannelWithUser(CSteamID steamIDRemote, int nChannel);

		[PreserveSig]
		[Token(Token = "0x6000256")]
		[Address(RVA = "0x166DE68", Offset = "0x166DE68", VA = "0x166DE68")]
		public static extern bool ISteamNetworking_GetP2PSessionState(CSteamID steamIDRemote, out P2PSessionState_t pConnectionState);

		[PreserveSig]
		[Token(Token = "0x6000257")]
		[Address(RVA = "0x166DF20", Offset = "0x166DF20", VA = "0x166DF20")]
		public static extern bool ISteamNetworking_AllowP2PPacketRelay(bool bAllow);

		[PreserveSig]
		[Token(Token = "0x6000258")]
		[Address(RVA = "0x166DFC8", Offset = "0x166DFC8", VA = "0x166DFC8")]
		public static extern uint ISteamNetworking_CreateListenSocket(int nVirtualP2PPort, uint nIP, ushort nPort, bool bAllowUseOfPacketRelay);

		[PreserveSig]
		[Token(Token = "0x6000259")]
		[Address(RVA = "0x166E080", Offset = "0x166E080", VA = "0x166E080")]
		public static extern uint ISteamNetworking_CreateP2PConnectionSocket(CSteamID steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay);

		[PreserveSig]
		[Token(Token = "0x600025A")]
		[Address(RVA = "0x166E140", Offset = "0x166E140", VA = "0x166E140")]
		public static extern uint ISteamNetworking_CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec);

		[PreserveSig]
		[Token(Token = "0x600025B")]
		[Address(RVA = "0x166E1F0", Offset = "0x166E1F0", VA = "0x166E1F0")]
		public static extern bool ISteamNetworking_DestroySocket(SNetSocket_t hSocket, bool bNotifyRemoteEnd);

		[PreserveSig]
		[Token(Token = "0x600025C")]
		[Address(RVA = "0x166E2A0", Offset = "0x166E2A0", VA = "0x166E2A0")]
		public static extern bool ISteamNetworking_DestroyListenSocket(SNetListenSocket_t hSocket, bool bNotifyRemoteEnd);

		[PreserveSig]
		[Token(Token = "0x600025D")]
		[Address(RVA = "0x166E350", Offset = "0x166E350", VA = "0x166E350")]
		public static extern bool ISteamNetworking_SendDataOnSocket(SNetSocket_t hSocket, byte[] pubData, uint cubData, bool bReliable);

		[PreserveSig]
		[Token(Token = "0x600025E")]
		[Address(RVA = "0x166E418", Offset = "0x166E418", VA = "0x166E418")]
		public static extern bool ISteamNetworking_IsDataAvailableOnSocket(SNetSocket_t hSocket, out uint pcubMsgSize);

		[PreserveSig]
		[Token(Token = "0x600025F")]
		[Address(RVA = "0x166E4C8", Offset = "0x166E4C8", VA = "0x166E4C8")]
		public static extern bool ISteamNetworking_RetrieveDataFromSocket(SNetSocket_t hSocket, byte[] pubDest, uint cubDest, out uint pcubMsgSize);

		[PreserveSig]
		[Token(Token = "0x6000260")]
		[Address(RVA = "0x166E590", Offset = "0x166E590", VA = "0x166E590")]
		public static extern bool ISteamNetworking_IsDataAvailable(SNetListenSocket_t hListenSocket, out uint pcubMsgSize, out SNetSocket_t phSocket);

		[PreserveSig]
		[Token(Token = "0x6000261")]
		[Address(RVA = "0x166E648", Offset = "0x166E648", VA = "0x166E648")]
		public static extern bool ISteamNetworking_RetrieveData(SNetListenSocket_t hListenSocket, byte[] pubDest, uint cubDest, out uint pcubMsgSize, out SNetSocket_t phSocket);

		[PreserveSig]
		[Token(Token = "0x6000262")]
		[Address(RVA = "0x166E718", Offset = "0x166E718", VA = "0x166E718")]
		public static extern bool ISteamNetworking_GetSocketInfo(SNetSocket_t hSocket, out CSteamID pSteamIDRemote, out int peSocketStatus, out uint punIPRemote, out ushort punPortRemote);

		[PreserveSig]
		[Token(Token = "0x6000263")]
		[Address(RVA = "0x166E7E0", Offset = "0x166E7E0", VA = "0x166E7E0")]
		public static extern bool ISteamNetworking_GetListenSocketInfo(SNetListenSocket_t hListenSocket, out uint pnIP, out ushort pnPort);

		[PreserveSig]
		[Token(Token = "0x6000264")]
		[Address(RVA = "0x166E898", Offset = "0x166E898", VA = "0x166E898")]
		public static extern ESNetSocketConnectionType ISteamNetworking_GetSocketConnectionType(SNetSocket_t hSocket);

		[PreserveSig]
		[Token(Token = "0x6000265")]
		[Address(RVA = "0x166E938", Offset = "0x166E938", VA = "0x166E938")]
		public static extern int ISteamNetworking_GetMaxPacketSize(SNetSocket_t hSocket);

		[PreserveSig]
		[Token(Token = "0x6000266")]
		[Address(RVA = "0x166E9D8", Offset = "0x166E9D8", VA = "0x166E9D8")]
		public static extern bool ISteamRemoteStorage_FileWrite(InteropHelp.UTF8StringHandle pchFile, byte[] pvData, int cubData);

		[PreserveSig]
		[Token(Token = "0x6000267")]
		[Address(RVA = "0x166E9FC", Offset = "0x166E9FC", VA = "0x166E9FC")]
		public static extern int ISteamRemoteStorage_FileRead(InteropHelp.UTF8StringHandle pchFile, byte[] pvData, int cubDataToRead);

		[PreserveSig]
		[Token(Token = "0x6000268")]
		[Address(RVA = "0x166EA20", Offset = "0x166EA20", VA = "0x166EA20")]
		public static extern ulong ISteamRemoteStorage_FileWriteAsync(InteropHelp.UTF8StringHandle pchFile, byte[] pvData, uint cubData);

		[PreserveSig]
		[Token(Token = "0x6000269")]
		[Address(RVA = "0x166EA44", Offset = "0x166EA44", VA = "0x166EA44")]
		public static extern ulong ISteamRemoteStorage_FileReadAsync(InteropHelp.UTF8StringHandle pchFile, uint nOffset, uint cubToRead);

		[PreserveSig]
		[Token(Token = "0x600026A")]
		[Address(RVA = "0x166EA68", Offset = "0x166EA68", VA = "0x166EA68")]
		public static extern bool ISteamRemoteStorage_FileReadAsyncComplete(SteamAPICall_t hReadCall, byte[] pvBuffer, uint cubToRead);

		[PreserveSig]
		[Token(Token = "0x600026B")]
		[Address(RVA = "0x166EB30", Offset = "0x166EB30", VA = "0x166EB30")]
		public static extern bool ISteamRemoteStorage_FileForget(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x600026C")]
		[Address(RVA = "0x166EB54", Offset = "0x166EB54", VA = "0x166EB54")]
		public static extern bool ISteamRemoteStorage_FileDelete(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x600026D")]
		[Address(RVA = "0x166EB78", Offset = "0x166EB78", VA = "0x166EB78")]
		public static extern ulong ISteamRemoteStorage_FileShare(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x600026E")]
		[Address(RVA = "0x166EB9C", Offset = "0x166EB9C", VA = "0x166EB9C")]
		public static extern bool ISteamRemoteStorage_SetSyncPlatforms(InteropHelp.UTF8StringHandle pchFile, ERemoteStoragePlatform eRemoteStoragePlatform);

		[PreserveSig]
		[Token(Token = "0x600026F")]
		[Address(RVA = "0x166EBC0", Offset = "0x166EBC0", VA = "0x166EBC0")]
		public static extern ulong ISteamRemoteStorage_FileWriteStreamOpen(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x6000270")]
		[Address(RVA = "0x166EBE8", Offset = "0x166EBE8", VA = "0x166EBE8")]
		public static extern bool ISteamRemoteStorage_FileWriteStreamWriteChunk(UGCFileWriteStreamHandle_t writeHandle, byte[] pvData, int cubData);

		[PreserveSig]
		[Token(Token = "0x6000271")]
		[Address(RVA = "0x166ECB0", Offset = "0x166ECB0", VA = "0x166ECB0")]
		public static extern bool ISteamRemoteStorage_FileWriteStreamClose(UGCFileWriteStreamHandle_t writeHandle);

		[PreserveSig]
		[Token(Token = "0x6000272")]
		[Address(RVA = "0x166ED60", Offset = "0x166ED60", VA = "0x166ED60")]
		public static extern bool ISteamRemoteStorage_FileWriteStreamCancel(UGCFileWriteStreamHandle_t writeHandle);

		[PreserveSig]
		[Token(Token = "0x6000273")]
		[Address(RVA = "0x166EE10", Offset = "0x166EE10", VA = "0x166EE10")]
		public static extern bool ISteamRemoteStorage_FileExists(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x6000274")]
		[Address(RVA = "0x166EE34", Offset = "0x166EE34", VA = "0x166EE34")]
		public static extern bool ISteamRemoteStorage_FilePersisted(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x6000275")]
		[Address(RVA = "0x166EE58", Offset = "0x166EE58", VA = "0x166EE58")]
		public static extern int ISteamRemoteStorage_GetFileSize(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x6000276")]
		[Address(RVA = "0x166EE7C", Offset = "0x166EE7C", VA = "0x166EE7C")]
		public static extern long ISteamRemoteStorage_GetFileTimestamp(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x6000277")]
		[Address(RVA = "0x166EEA0", Offset = "0x166EEA0", VA = "0x166EEA0")]
		public static extern ERemoteStoragePlatform ISteamRemoteStorage_GetSyncPlatforms(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x6000278")]
		[Address(RVA = "0x166EEC8", Offset = "0x166EEC8", VA = "0x166EEC8")]
		public static extern int ISteamRemoteStorage_GetFileCount();

		[PreserveSig]
		[Token(Token = "0x6000279")]
		[Address(RVA = "0x166EF60", Offset = "0x166EF60", VA = "0x166EF60")]
		public static extern IntPtr ISteamRemoteStorage_GetFileNameAndSize(int iFile, out int pnFileSizeInBytes);

		[PreserveSig]
		[Token(Token = "0x600027A")]
		[Address(RVA = "0x166F008", Offset = "0x166F008", VA = "0x166F008")]
		public static extern bool ISteamRemoteStorage_GetQuota(out ulong pnTotalBytes, out ulong puAvailableBytes);

		[PreserveSig]
		[Token(Token = "0x600027B")]
		[Address(RVA = "0x166F0B8", Offset = "0x166F0B8", VA = "0x166F0B8")]
		public static extern bool ISteamRemoteStorage_IsCloudEnabledForAccount();

		[PreserveSig]
		[Token(Token = "0x600027C")]
		[Address(RVA = "0x166F158", Offset = "0x166F158", VA = "0x166F158")]
		public static extern bool ISteamRemoteStorage_IsCloudEnabledForApp();

		[PreserveSig]
		[Token(Token = "0x600027D")]
		[Address(RVA = "0x166F1F8", Offset = "0x166F1F8", VA = "0x166F1F8")]
		public static extern void ISteamRemoteStorage_SetCloudEnabledForApp(bool bEnabled);

		[PreserveSig]
		[Token(Token = "0x600027E")]
		[Address(RVA = "0x166F298", Offset = "0x166F298", VA = "0x166F298")]
		public static extern ulong ISteamRemoteStorage_UGCDownload(UGCHandle_t hContent, uint unPriority);

		[PreserveSig]
		[Token(Token = "0x600027F")]
		[Address(RVA = "0x166F348", Offset = "0x166F348", VA = "0x166F348")]
		public static extern bool ISteamRemoteStorage_GetUGCDownloadProgress(UGCHandle_t hContent, out int pnBytesDownloaded, out int pnBytesExpected);

		[PreserveSig]
		[Token(Token = "0x6000280")]
		[Address(RVA = "0x166F408", Offset = "0x166F408", VA = "0x166F408")]
		public static extern bool ISteamRemoteStorage_GetUGCDetails(UGCHandle_t hContent, out AppId_t pnAppID, out IntPtr ppchName, out int pnFileSizeInBytes, out CSteamID pSteamIDOwner);

		[PreserveSig]
		[Token(Token = "0x6000281")]
		[Address(RVA = "0x166F4D8", Offset = "0x166F4D8", VA = "0x166F4D8")]
		public static extern int ISteamRemoteStorage_UGCRead(UGCHandle_t hContent, byte[] pvData, int cubDataToRead, uint cOffset, EUGCReadAction eAction);

		[PreserveSig]
		[Token(Token = "0x6000282")]
		[Address(RVA = "0x166F5A8", Offset = "0x166F5A8", VA = "0x166F5A8")]
		public static extern int ISteamRemoteStorage_GetCachedUGCCount();

		[PreserveSig]
		[Token(Token = "0x6000283")]
		[Address(RVA = "0x166F640", Offset = "0x166F640", VA = "0x166F640")]
		public static extern ulong ISteamRemoteStorage_GetCachedUGCHandle(int iCachedContent);

		[PreserveSig]
		[Token(Token = "0x6000284")]
		[Address(RVA = "0x166F6E0", Offset = "0x166F6E0", VA = "0x166F6E0")]
		public static extern ulong ISteamRemoteStorage_PublishWorkshopFile(InteropHelp.UTF8StringHandle pchFile, InteropHelp.UTF8StringHandle pchPreviewFile, AppId_t nConsumerAppId, InteropHelp.UTF8StringHandle pchTitle, InteropHelp.UTF8StringHandle pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, IntPtr pTags, EWorkshopFileType eWorkshopFileType);

		[PreserveSig]
		[Token(Token = "0x6000285")]
		[Address(RVA = "0x166F708", Offset = "0x166F708", VA = "0x166F708")]
		public static extern ulong ISteamRemoteStorage_CreatePublishedFileUpdateRequest(PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x6000286")]
		[Address(RVA = "0x166F7B0", Offset = "0x166F7B0", VA = "0x166F7B0")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileFile(PublishedFileUpdateHandle_t updateHandle, InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x6000287")]
		[Address(RVA = "0x166F7D4", Offset = "0x166F7D4", VA = "0x166F7D4")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFilePreviewFile(PublishedFileUpdateHandle_t updateHandle, InteropHelp.UTF8StringHandle pchPreviewFile);

		[PreserveSig]
		[Token(Token = "0x6000288")]
		[Address(RVA = "0x166F7F8", Offset = "0x166F7F8", VA = "0x166F7F8")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileTitle(PublishedFileUpdateHandle_t updateHandle, InteropHelp.UTF8StringHandle pchTitle);

		[PreserveSig]
		[Token(Token = "0x6000289")]
		[Address(RVA = "0x166F81C", Offset = "0x166F81C", VA = "0x166F81C")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileDescription(PublishedFileUpdateHandle_t updateHandle, InteropHelp.UTF8StringHandle pchDescription);

		[PreserveSig]
		[Token(Token = "0x600028A")]
		[Address(RVA = "0x166F840", Offset = "0x166F840", VA = "0x166F840")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileVisibility(PublishedFileUpdateHandle_t updateHandle, ERemoteStoragePublishedFileVisibility eVisibility);

		[PreserveSig]
		[Token(Token = "0x600028B")]
		[Address(RVA = "0x166F8F8", Offset = "0x166F8F8", VA = "0x166F8F8")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileTags(PublishedFileUpdateHandle_t updateHandle, IntPtr pTags);

		[PreserveSig]
		[Token(Token = "0x600028C")]
		[Address(RVA = "0x166F9B0", Offset = "0x166F9B0", VA = "0x166F9B0")]
		public static extern ulong ISteamRemoteStorage_CommitPublishedFileUpdate(PublishedFileUpdateHandle_t updateHandle);

		[PreserveSig]
		[Token(Token = "0x600028D")]
		[Address(RVA = "0x166FA58", Offset = "0x166FA58", VA = "0x166FA58")]
		public static extern ulong ISteamRemoteStorage_GetPublishedFileDetails(PublishedFileId_t unPublishedFileId, uint unMaxSecondsOld);

		[PreserveSig]
		[Token(Token = "0x600028E")]
		[Address(RVA = "0x166FB08", Offset = "0x166FB08", VA = "0x166FB08")]
		public static extern ulong ISteamRemoteStorage_DeletePublishedFile(PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x600028F")]
		[Address(RVA = "0x166FBB0", Offset = "0x166FBB0", VA = "0x166FBB0")]
		public static extern ulong ISteamRemoteStorage_EnumerateUserPublishedFiles(uint unStartIndex);

		[PreserveSig]
		[Token(Token = "0x6000290")]
		[Address(RVA = "0x166FC50", Offset = "0x166FC50", VA = "0x166FC50")]
		public static extern ulong ISteamRemoteStorage_SubscribePublishedFile(PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x6000291")]
		[Address(RVA = "0x166FCF8", Offset = "0x166FCF8", VA = "0x166FCF8")]
		public static extern ulong ISteamRemoteStorage_EnumerateUserSubscribedFiles(uint unStartIndex);

		[PreserveSig]
		[Token(Token = "0x6000292")]
		[Address(RVA = "0x166FD98", Offset = "0x166FD98", VA = "0x166FD98")]
		public static extern ulong ISteamRemoteStorage_UnsubscribePublishedFile(PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x6000293")]
		[Address(RVA = "0x166FE40", Offset = "0x166FE40", VA = "0x166FE40")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(PublishedFileUpdateHandle_t updateHandle, InteropHelp.UTF8StringHandle pchChangeDescription);

		[PreserveSig]
		[Token(Token = "0x6000294")]
		[Address(RVA = "0x166FE68", Offset = "0x166FE68", VA = "0x166FE68")]
		public static extern ulong ISteamRemoteStorage_GetPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x6000295")]
		[Address(RVA = "0x166FF10", Offset = "0x166FF10", VA = "0x166FF10")]
		public static extern ulong ISteamRemoteStorage_UpdateUserPublishedItemVote(PublishedFileId_t unPublishedFileId, bool bVoteUp);

		[PreserveSig]
		[Token(Token = "0x6000296")]
		[Address(RVA = "0x166FFC0", Offset = "0x166FFC0", VA = "0x166FFC0")]
		public static extern ulong ISteamRemoteStorage_GetUserPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x6000297")]
		[Address(RVA = "0x1670068", Offset = "0x1670068", VA = "0x1670068")]
		public static extern ulong ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(CSteamID steamId, uint unStartIndex, IntPtr pRequiredTags, IntPtr pExcludedTags);

		[PreserveSig]
		[Token(Token = "0x6000298")]
		[Address(RVA = "0x1670128", Offset = "0x1670128", VA = "0x1670128")]
		public static extern ulong ISteamRemoteStorage_PublishVideo(EWorkshopVideoProvider eVideoProvider, InteropHelp.UTF8StringHandle pchVideoAccount, InteropHelp.UTF8StringHandle pchVideoIdentifier, InteropHelp.UTF8StringHandle pchPreviewFile, AppId_t nConsumerAppId, InteropHelp.UTF8StringHandle pchTitle, InteropHelp.UTF8StringHandle pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, IntPtr pTags);

		[PreserveSig]
		[Token(Token = "0x6000299")]
		[Address(RVA = "0x1670150", Offset = "0x1670150", VA = "0x1670150")]
		public static extern ulong ISteamRemoteStorage_SetUserPublishedFileAction(PublishedFileId_t unPublishedFileId, EWorkshopFileAction eAction);

		[PreserveSig]
		[Token(Token = "0x600029A")]
		[Address(RVA = "0x1670200", Offset = "0x1670200", VA = "0x1670200")]
		public static extern ulong ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(EWorkshopFileAction eAction, uint unStartIndex);

		[PreserveSig]
		[Token(Token = "0x600029B")]
		[Address(RVA = "0x16702A8", Offset = "0x16702A8", VA = "0x16702A8")]
		public static extern ulong ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(EWorkshopEnumerationType eEnumerationType, uint unStartIndex, uint unCount, uint unDays, IntPtr pTags, IntPtr pUserTags);

		[PreserveSig]
		[Token(Token = "0x600029C")]
		[Address(RVA = "0x1670370", Offset = "0x1670370", VA = "0x1670370")]
		public static extern ulong ISteamRemoteStorage_UGCDownloadToLocation(UGCHandle_t hContent, InteropHelp.UTF8StringHandle pchLocation, uint unPriority);

		[PreserveSig]
		[Token(Token = "0x600029D")]
		[Address(RVA = "0x1670398", Offset = "0x1670398", VA = "0x1670398")]
		public static extern uint ISteamScreenshots_WriteScreenshot(byte[] pubRGB, uint cubRGB, int nWidth, int nHeight);

		[PreserveSig]
		[Token(Token = "0x600029E")]
		[Address(RVA = "0x1670458", Offset = "0x1670458", VA = "0x1670458")]
		public static extern uint ISteamScreenshots_AddScreenshotToLibrary(InteropHelp.UTF8StringHandle pchFilename, InteropHelp.UTF8StringHandle pchThumbnailFilename, int nWidth, int nHeight);

		[PreserveSig]
		[Token(Token = "0x600029F")]
		[Address(RVA = "0x1670480", Offset = "0x1670480", VA = "0x1670480")]
		public static extern void ISteamScreenshots_TriggerScreenshot();

		[PreserveSig]
		[Token(Token = "0x60002A0")]
		[Address(RVA = "0x1670518", Offset = "0x1670518", VA = "0x1670518")]
		public static extern void ISteamScreenshots_HookScreenshots(bool bHook);

		[PreserveSig]
		[Token(Token = "0x60002A1")]
		[Address(RVA = "0x16705B8", Offset = "0x16705B8", VA = "0x16705B8")]
		public static extern bool ISteamScreenshots_SetLocation(ScreenshotHandle hScreenshot, InteropHelp.UTF8StringHandle pchLocation);

		[PreserveSig]
		[Token(Token = "0x60002A2")]
		[Address(RVA = "0x16705E0", Offset = "0x16705E0", VA = "0x16705E0")]
		public static extern bool ISteamScreenshots_TagUser(ScreenshotHandle hScreenshot, CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x60002A3")]
		[Address(RVA = "0x1670698", Offset = "0x1670698", VA = "0x1670698")]
		public static extern bool ISteamScreenshots_TagPublishedFile(ScreenshotHandle hScreenshot, PublishedFileId_t unPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60002A4")]
		[Address(RVA = "0x1670750", Offset = "0x1670750", VA = "0x1670750")]
		public static extern bool ISteamScreenshots_IsScreenshotsHooked();

		[PreserveSig]
		[Token(Token = "0x60002A5")]
		[Address(RVA = "0x16707F0", Offset = "0x16707F0", VA = "0x16707F0")]
		public static extern uint ISteamScreenshots_AddVRScreenshotToLibrary(EVRScreenshotType eType, InteropHelp.UTF8StringHandle pchFilename, InteropHelp.UTF8StringHandle pchVRFilename);

		[PreserveSig]
		[Token(Token = "0x60002A6")]
		[Address(RVA = "0x1670818", Offset = "0x1670818", VA = "0x1670818")]
		public static extern ulong ISteamUGC_CreateQueryUserUGCRequest(AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage);

		[PreserveSig]
		[Token(Token = "0x60002A7")]
		[Address(RVA = "0x16708E8", Offset = "0x16708E8", VA = "0x16708E8")]
		public static extern ulong ISteamUGC_CreateQueryAllUGCRequest(EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage);

		[PreserveSig]
		[Token(Token = "0x60002A8")]
		[Address(RVA = "0x16709A8", Offset = "0x16709A8", VA = "0x16709A8")]
		public static extern ulong ISteamUGC_CreateQueryUGCDetailsRequest([In][Out] PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs);

		[PreserveSig]
		[Token(Token = "0x60002A9")]
		[Address(RVA = "0x1670A58", Offset = "0x1670A58", VA = "0x1670A58")]
		public static extern ulong ISteamUGC_SendQueryUGCRequest(UGCQueryHandle_t handle);

		[PreserveSig]
		[Token(Token = "0x60002AA")]
		[Address(RVA = "0x1670B00", Offset = "0x1670B00", VA = "0x1670B00")]
		public static extern bool ISteamUGC_GetQueryUGCResult(UGCQueryHandle_t handle, uint index, out SteamUGCDetails_t pDetails);

		[PreserveSig]
		[Token(Token = "0x60002AB")]
		[Address(RVA = "0x1670C10", Offset = "0x1670C10", VA = "0x1670C10")]
		public static extern bool ISteamUGC_GetQueryUGCPreviewURL(UGCQueryHandle_t handle, uint index, IntPtr pchURL, uint cchURLSize);

		[PreserveSig]
		[Token(Token = "0x60002AC")]
		[Address(RVA = "0x1670CD8", Offset = "0x1670CD8", VA = "0x1670CD8")]
		public static extern bool ISteamUGC_GetQueryUGCMetadata(UGCQueryHandle_t handle, uint index, IntPtr pchMetadata, uint cchMetadatasize);

		[PreserveSig]
		[Token(Token = "0x60002AD")]
		[Address(RVA = "0x1670DA0", Offset = "0x1670DA0", VA = "0x1670DA0")]
		public static extern bool ISteamUGC_GetQueryUGCChildren(UGCQueryHandle_t handle, uint index, [In][Out] PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries);

		[PreserveSig]
		[Token(Token = "0x60002AE")]
		[Address(RVA = "0x1670E70", Offset = "0x1670E70", VA = "0x1670E70")]
		public static extern bool ISteamUGC_GetQueryUGCStatistic(UGCQueryHandle_t handle, uint index, EItemStatistic eStatType, out ulong pStatValue);

		[PreserveSig]
		[Token(Token = "0x60002AF")]
		[Address(RVA = "0x1670F38", Offset = "0x1670F38", VA = "0x1670F38")]
		public static extern uint ISteamUGC_GetQueryUGCNumAdditionalPreviews(UGCQueryHandle_t handle, uint index);

		[PreserveSig]
		[Token(Token = "0x60002B0")]
		[Address(RVA = "0x1670FE8", Offset = "0x1670FE8", VA = "0x1670FE8")]
		public static extern bool ISteamUGC_GetQueryUGCAdditionalPreview(UGCQueryHandle_t handle, uint index, uint previewIndex, IntPtr pchURLOrVideoID, uint cchURLSize, IntPtr pchOriginalFileName, uint cchOriginalFileNameSize, out EItemPreviewType pPreviewType);

		[PreserveSig]
		[Token(Token = "0x60002B1")]
		[Address(RVA = "0x16710E0", Offset = "0x16710E0", VA = "0x16710E0")]
		public static extern uint ISteamUGC_GetQueryUGCNumKeyValueTags(UGCQueryHandle_t handle, uint index);

		[PreserveSig]
		[Token(Token = "0x60002B2")]
		[Address(RVA = "0x1671190", Offset = "0x1671190", VA = "0x1671190")]
		public static extern bool ISteamUGC_GetQueryUGCKeyValueTag(UGCQueryHandle_t handle, uint index, uint keyValueTagIndex, IntPtr pchKey, uint cchKeySize, IntPtr pchValue, uint cchValueSize);

		[PreserveSig]
		[Token(Token = "0x60002B3")]
		[Address(RVA = "0x1671280", Offset = "0x1671280", VA = "0x1671280")]
		public static extern bool ISteamUGC_ReleaseQueryUGCRequest(UGCQueryHandle_t handle);

		[PreserveSig]
		[Token(Token = "0x60002B4")]
		[Address(RVA = "0x1671330", Offset = "0x1671330", VA = "0x1671330")]
		public static extern bool ISteamUGC_AddRequiredTag(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pTagName);

		[PreserveSig]
		[Token(Token = "0x60002B5")]
		[Address(RVA = "0x1671354", Offset = "0x1671354", VA = "0x1671354")]
		public static extern bool ISteamUGC_AddExcludedTag(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pTagName);

		[PreserveSig]
		[Token(Token = "0x60002B6")]
		[Address(RVA = "0x1671378", Offset = "0x1671378", VA = "0x1671378")]
		public static extern bool ISteamUGC_SetReturnOnlyIDs(UGCQueryHandle_t handle, bool bReturnOnlyIDs);

		[PreserveSig]
		[Token(Token = "0x60002B7")]
		[Address(RVA = "0x1671430", Offset = "0x1671430", VA = "0x1671430")]
		public static extern bool ISteamUGC_SetReturnKeyValueTags(UGCQueryHandle_t handle, bool bReturnKeyValueTags);

		[PreserveSig]
		[Token(Token = "0x60002B8")]
		[Address(RVA = "0x16714E8", Offset = "0x16714E8", VA = "0x16714E8")]
		public static extern bool ISteamUGC_SetReturnLongDescription(UGCQueryHandle_t handle, bool bReturnLongDescription);

		[PreserveSig]
		[Token(Token = "0x60002B9")]
		[Address(RVA = "0x16715A0", Offset = "0x16715A0", VA = "0x16715A0")]
		public static extern bool ISteamUGC_SetReturnMetadata(UGCQueryHandle_t handle, bool bReturnMetadata);

		[PreserveSig]
		[Token(Token = "0x60002BA")]
		[Address(RVA = "0x1671658", Offset = "0x1671658", VA = "0x1671658")]
		public static extern bool ISteamUGC_SetReturnChildren(UGCQueryHandle_t handle, bool bReturnChildren);

		[PreserveSig]
		[Token(Token = "0x60002BB")]
		[Address(RVA = "0x1671710", Offset = "0x1671710", VA = "0x1671710")]
		public static extern bool ISteamUGC_SetReturnAdditionalPreviews(UGCQueryHandle_t handle, bool bReturnAdditionalPreviews);

		[PreserveSig]
		[Token(Token = "0x60002BC")]
		[Address(RVA = "0x16717C8", Offset = "0x16717C8", VA = "0x16717C8")]
		public static extern bool ISteamUGC_SetReturnTotalOnly(UGCQueryHandle_t handle, bool bReturnTotalOnly);

		[PreserveSig]
		[Token(Token = "0x60002BD")]
		[Address(RVA = "0x1671880", Offset = "0x1671880", VA = "0x1671880")]
		public static extern bool ISteamUGC_SetReturnPlaytimeStats(UGCQueryHandle_t handle, uint unDays);

		[PreserveSig]
		[Token(Token = "0x60002BE")]
		[Address(RVA = "0x1671938", Offset = "0x1671938", VA = "0x1671938")]
		public static extern bool ISteamUGC_SetLanguage(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pchLanguage);

		[PreserveSig]
		[Token(Token = "0x60002BF")]
		[Address(RVA = "0x1671960", Offset = "0x1671960", VA = "0x1671960")]
		public static extern bool ISteamUGC_SetAllowCachedResponse(UGCQueryHandle_t handle, uint unMaxAgeSeconds);

		[PreserveSig]
		[Token(Token = "0x60002C0")]
		[Address(RVA = "0x1671A18", Offset = "0x1671A18", VA = "0x1671A18")]
		public static extern bool ISteamUGC_SetCloudFileNameFilter(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pMatchCloudFileName);

		[PreserveSig]
		[Token(Token = "0x60002C1")]
		[Address(RVA = "0x1671A40", Offset = "0x1671A40", VA = "0x1671A40")]
		public static extern bool ISteamUGC_SetMatchAnyTag(UGCQueryHandle_t handle, bool bMatchAnyTag);

		[PreserveSig]
		[Token(Token = "0x60002C2")]
		[Address(RVA = "0x1671AF8", Offset = "0x1671AF8", VA = "0x1671AF8")]
		public static extern bool ISteamUGC_SetSearchText(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pSearchText);

		[PreserveSig]
		[Token(Token = "0x60002C3")]
		[Address(RVA = "0x1671B20", Offset = "0x1671B20", VA = "0x1671B20")]
		public static extern bool ISteamUGC_SetRankedByTrendDays(UGCQueryHandle_t handle, uint unDays);

		[PreserveSig]
		[Token(Token = "0x60002C4")]
		[Address(RVA = "0x1671BD8", Offset = "0x1671BD8", VA = "0x1671BD8")]
		public static extern bool ISteamUGC_AddRequiredKeyValueTag(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pKey, InteropHelp.UTF8StringHandle pValue);

		[PreserveSig]
		[Token(Token = "0x60002C5")]
		[Address(RVA = "0x1671C00", Offset = "0x1671C00", VA = "0x1671C00")]
		public static extern ulong ISteamUGC_RequestUGCDetails(PublishedFileId_t nPublishedFileID, uint unMaxAgeSeconds);

		[PreserveSig]
		[Token(Token = "0x60002C6")]
		[Address(RVA = "0x1671CB0", Offset = "0x1671CB0", VA = "0x1671CB0")]
		public static extern ulong ISteamUGC_CreateItem(AppId_t nConsumerAppId, EWorkshopFileType eFileType);

		[PreserveSig]
		[Token(Token = "0x60002C7")]
		[Address(RVA = "0x1671D58", Offset = "0x1671D58", VA = "0x1671D58")]
		public static extern ulong ISteamUGC_StartItemUpdate(AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60002C8")]
		[Address(RVA = "0x1671E08", Offset = "0x1671E08", VA = "0x1671E08")]
		public static extern bool ISteamUGC_SetItemTitle(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchTitle);

		[PreserveSig]
		[Token(Token = "0x60002C9")]
		[Address(RVA = "0x1671E2C", Offset = "0x1671E2C", VA = "0x1671E2C")]
		public static extern bool ISteamUGC_SetItemDescription(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchDescription);

		[PreserveSig]
		[Token(Token = "0x60002CA")]
		[Address(RVA = "0x1671E50", Offset = "0x1671E50", VA = "0x1671E50")]
		public static extern bool ISteamUGC_SetItemUpdateLanguage(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchLanguage);

		[PreserveSig]
		[Token(Token = "0x60002CB")]
		[Address(RVA = "0x1671E74", Offset = "0x1671E74", VA = "0x1671E74")]
		public static extern bool ISteamUGC_SetItemMetadata(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchMetaData);

		[PreserveSig]
		[Token(Token = "0x60002CC")]
		[Address(RVA = "0x1671E98", Offset = "0x1671E98", VA = "0x1671E98")]
		public static extern bool ISteamUGC_SetItemVisibility(UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility);

		[PreserveSig]
		[Token(Token = "0x60002CD")]
		[Address(RVA = "0x1671F50", Offset = "0x1671F50", VA = "0x1671F50")]
		public static extern bool ISteamUGC_SetItemTags(UGCUpdateHandle_t updateHandle, IntPtr pTags);

		[PreserveSig]
		[Token(Token = "0x60002CE")]
		[Address(RVA = "0x1672008", Offset = "0x1672008", VA = "0x1672008")]
		public static extern bool ISteamUGC_SetItemContent(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszContentFolder);

		[PreserveSig]
		[Token(Token = "0x60002CF")]
		[Address(RVA = "0x167202C", Offset = "0x167202C", VA = "0x167202C")]
		public static extern bool ISteamUGC_SetItemPreview(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszPreviewFile);

		[PreserveSig]
		[Token(Token = "0x60002D0")]
		[Address(RVA = "0x1672050", Offset = "0x1672050", VA = "0x1672050")]
		public static extern bool ISteamUGC_RemoveItemKeyValueTags(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x60002D1")]
		[Address(RVA = "0x1672074", Offset = "0x1672074", VA = "0x1672074")]
		public static extern bool ISteamUGC_AddItemKeyValueTag(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue);

		[PreserveSig]
		[Token(Token = "0x60002D2")]
		[Address(RVA = "0x1672098", Offset = "0x1672098", VA = "0x1672098")]
		public static extern bool ISteamUGC_AddItemPreviewFile(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszPreviewFile, EItemPreviewType type);

		[PreserveSig]
		[Token(Token = "0x60002D3")]
		[Address(RVA = "0x16720BC", Offset = "0x16720BC", VA = "0x16720BC")]
		public static extern bool ISteamUGC_AddItemPreviewVideo(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszVideoID);

		[PreserveSig]
		[Token(Token = "0x60002D4")]
		[Address(RVA = "0x16720E0", Offset = "0x16720E0", VA = "0x16720E0")]
		public static extern bool ISteamUGC_UpdateItemPreviewFile(UGCUpdateHandle_t handle, uint index, InteropHelp.UTF8StringHandle pszPreviewFile);

		[PreserveSig]
		[Token(Token = "0x60002D5")]
		[Address(RVA = "0x1672104", Offset = "0x1672104", VA = "0x1672104")]
		public static extern bool ISteamUGC_UpdateItemPreviewVideo(UGCUpdateHandle_t handle, uint index, InteropHelp.UTF8StringHandle pszVideoID);

		[PreserveSig]
		[Token(Token = "0x60002D6")]
		[Address(RVA = "0x1672128", Offset = "0x1672128", VA = "0x1672128")]
		public static extern bool ISteamUGC_RemoveItemPreview(UGCUpdateHandle_t handle, uint index);

		[PreserveSig]
		[Token(Token = "0x60002D7")]
		[Address(RVA = "0x16721E0", Offset = "0x16721E0", VA = "0x16721E0")]
		public static extern ulong ISteamUGC_SubmitItemUpdate(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchChangeNote);

		[PreserveSig]
		[Token(Token = "0x60002D8")]
		[Address(RVA = "0x1672208", Offset = "0x1672208", VA = "0x1672208")]
		public static extern EItemUpdateStatus ISteamUGC_GetItemUpdateProgress(UGCUpdateHandle_t handle, out ulong punBytesProcessed, out ulong punBytesTotal);

		[PreserveSig]
		[Token(Token = "0x60002D9")]
		[Address(RVA = "0x16722C0", Offset = "0x16722C0", VA = "0x16722C0")]
		public static extern ulong ISteamUGC_SetUserItemVote(PublishedFileId_t nPublishedFileID, bool bVoteUp);

		[PreserveSig]
		[Token(Token = "0x60002DA")]
		[Address(RVA = "0x1672370", Offset = "0x1672370", VA = "0x1672370")]
		public static extern ulong ISteamUGC_GetUserItemVote(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60002DB")]
		[Address(RVA = "0x1672418", Offset = "0x1672418", VA = "0x1672418")]
		public static extern ulong ISteamUGC_AddItemToFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60002DC")]
		[Address(RVA = "0x16724C8", Offset = "0x16724C8", VA = "0x16724C8")]
		public static extern ulong ISteamUGC_RemoveItemFromFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60002DD")]
		[Address(RVA = "0x1672578", Offset = "0x1672578", VA = "0x1672578")]
		public static extern ulong ISteamUGC_SubscribeItem(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60002DE")]
		[Address(RVA = "0x1672620", Offset = "0x1672620", VA = "0x1672620")]
		public static extern ulong ISteamUGC_UnsubscribeItem(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60002DF")]
		[Address(RVA = "0x16726C8", Offset = "0x16726C8", VA = "0x16726C8")]
		public static extern uint ISteamUGC_GetNumSubscribedItems();

		[PreserveSig]
		[Token(Token = "0x60002E0")]
		[Address(RVA = "0x1672760", Offset = "0x1672760", VA = "0x1672760")]
		public static extern uint ISteamUGC_GetSubscribedItems([In][Out] PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries);

		[PreserveSig]
		[Token(Token = "0x60002E1")]
		[Address(RVA = "0x1672810", Offset = "0x1672810", VA = "0x1672810")]
		public static extern uint ISteamUGC_GetItemState(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60002E2")]
		[Address(RVA = "0x16728B8", Offset = "0x16728B8", VA = "0x16728B8")]
		public static extern bool ISteamUGC_GetItemInstallInfo(PublishedFileId_t nPublishedFileID, out ulong punSizeOnDisk, IntPtr pchFolder, uint cchFolderSize, out uint punTimeStamp);

		[PreserveSig]
		[Token(Token = "0x60002E3")]
		[Address(RVA = "0x1672988", Offset = "0x1672988", VA = "0x1672988")]
		public static extern bool ISteamUGC_GetItemDownloadInfo(PublishedFileId_t nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal);

		[PreserveSig]
		[Token(Token = "0x60002E4")]
		[Address(RVA = "0x1672A48", Offset = "0x1672A48", VA = "0x1672A48")]
		public static extern bool ISteamUGC_DownloadItem(PublishedFileId_t nPublishedFileID, bool bHighPriority);

		[PreserveSig]
		[Token(Token = "0x60002E5")]
		[Address(RVA = "0x1672B00", Offset = "0x1672B00", VA = "0x1672B00")]
		public static extern bool ISteamUGC_BInitWorkshopForGameServer(DepotId_t unWorkshopDepotID, InteropHelp.UTF8StringHandle pszFolder);

		[PreserveSig]
		[Token(Token = "0x60002E6")]
		[Address(RVA = "0x1672B28", Offset = "0x1672B28", VA = "0x1672B28")]
		public static extern void ISteamUGC_SuspendDownloads(bool bSuspend);

		[PreserveSig]
		[Token(Token = "0x60002E7")]
		[Address(RVA = "0x1672BC8", Offset = "0x1672BC8", VA = "0x1672BC8")]
		public static extern ulong ISteamUGC_StartPlaytimeTracking([In][Out] PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs);

		[PreserveSig]
		[Token(Token = "0x60002E8")]
		[Address(RVA = "0x1672C78", Offset = "0x1672C78", VA = "0x1672C78")]
		public static extern ulong ISteamUGC_StopPlaytimeTracking([In][Out] PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs);

		[PreserveSig]
		[Token(Token = "0x60002E9")]
		[Address(RVA = "0x1672D28", Offset = "0x1672D28", VA = "0x1672D28")]
		public static extern ulong ISteamUGC_StopPlaytimeTrackingForAllItems();

		[PreserveSig]
		[Token(Token = "0x60002EA")]
		[Address(RVA = "0x1672DC0", Offset = "0x1672DC0", VA = "0x1672DC0")]
		public static extern ulong ISteamUGC_AddDependency(PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60002EB")]
		[Address(RVA = "0x1672E78", Offset = "0x1672E78", VA = "0x1672E78")]
		public static extern ulong ISteamUGC_RemoveDependency(PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60002EC")]
		[Address(RVA = "0x1672F30", Offset = "0x1672F30", VA = "0x1672F30")]
		public static extern ulong ISteamUnifiedMessages_SendMethod(InteropHelp.UTF8StringHandle pchServiceMethod, byte[] pRequestBuffer, uint unRequestBufferSize, ulong unContext);

		[PreserveSig]
		[Token(Token = "0x60002ED")]
		[Address(RVA = "0x1672F58", Offset = "0x1672F58", VA = "0x1672F58")]
		public static extern bool ISteamUnifiedMessages_GetMethodResponseInfo(ClientUnifiedMessageHandle hHandle, out uint punResponseSize, out EResult peResult);

		[PreserveSig]
		[Token(Token = "0x60002EE")]
		[Address(RVA = "0x1673018", Offset = "0x1673018", VA = "0x1673018")]
		public static extern bool ISteamUnifiedMessages_GetMethodResponseData(ClientUnifiedMessageHandle hHandle, byte[] pResponseBuffer, uint unResponseBufferSize, bool bAutoRelease);

		[PreserveSig]
		[Token(Token = "0x60002EF")]
		[Address(RVA = "0x16730E8", Offset = "0x16730E8", VA = "0x16730E8")]
		public static extern bool ISteamUnifiedMessages_ReleaseMethod(ClientUnifiedMessageHandle hHandle);

		[PreserveSig]
		[Token(Token = "0x60002F0")]
		[Address(RVA = "0x1673198", Offset = "0x1673198", VA = "0x1673198")]
		public static extern bool ISteamUnifiedMessages_SendNotification(InteropHelp.UTF8StringHandle pchServiceNotification, byte[] pNotificationBuffer, uint unNotificationBufferSize);

		[PreserveSig]
		[Token(Token = "0x60002F1")]
		[Address(RVA = "0x16731C0", Offset = "0x16731C0", VA = "0x16731C0")]
		public static extern int ISteamUser_GetHSteamUser();

		[PreserveSig]
		[Token(Token = "0x60002F2")]
		[Address(RVA = "0x1673258", Offset = "0x1673258", VA = "0x1673258")]
		public static extern bool ISteamUser_BLoggedOn();

		[PreserveSig]
		[Token(Token = "0x60002F3")]
		[Address(RVA = "0x16732F8", Offset = "0x16732F8", VA = "0x16732F8")]
		public static extern ulong ISteamUser_GetSteamID();

		[PreserveSig]
		[Token(Token = "0x60002F4")]
		[Address(RVA = "0x1673390", Offset = "0x1673390", VA = "0x1673390")]
		public static extern int ISteamUser_InitiateGameConnection(byte[] pAuthBlob, int cbMaxAuthBlob, CSteamID steamIDGameServer, uint unIPServer, ushort usPortServer, bool bSecure);

		[PreserveSig]
		[Token(Token = "0x60002F5")]
		[Address(RVA = "0x1673468", Offset = "0x1673468", VA = "0x1673468")]
		public static extern void ISteamUser_TerminateGameConnection(uint unIPServer, ushort usPortServer);

		[PreserveSig]
		[Token(Token = "0x60002F6")]
		[Address(RVA = "0x1673510", Offset = "0x1673510", VA = "0x1673510")]
		public static extern void ISteamUser_TrackAppUsageEvent(CGameID gameID, int eAppUsageEvent, InteropHelp.UTF8StringHandle pchExtraInfo);

		[PreserveSig]
		[Token(Token = "0x60002F7")]
		[Address(RVA = "0x1673538", Offset = "0x1673538", VA = "0x1673538")]
		public static extern bool ISteamUser_GetUserDataFolder(IntPtr pchBuffer, int cubBuffer);

		[PreserveSig]
		[Token(Token = "0x60002F8")]
		[Address(RVA = "0x16735E8", Offset = "0x16735E8", VA = "0x16735E8")]
		public static extern void ISteamUser_StartVoiceRecording();

		[PreserveSig]
		[Token(Token = "0x60002F9")]
		[Address(RVA = "0x1673680", Offset = "0x1673680", VA = "0x1673680")]
		public static extern void ISteamUser_StopVoiceRecording();

		[PreserveSig]
		[Token(Token = "0x60002FA")]
		[Address(RVA = "0x1673718", Offset = "0x1673718", VA = "0x1673718")]
		public static extern EVoiceResult ISteamUser_GetAvailableVoice(out uint pcbCompressed, IntPtr pcbUncompressed_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated);

		[PreserveSig]
		[Token(Token = "0x60002FB")]
		[Address(RVA = "0x16737C8", Offset = "0x16737C8", VA = "0x16737C8")]
		public static extern EVoiceResult ISteamUser_GetVoice(bool bWantCompressed, byte[] pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, bool bWantUncompressed_Deprecated, IntPtr pUncompressedDestBuffer_Deprecated, uint cbUncompressedDestBufferSize_Deprecated, IntPtr nUncompressBytesWritten_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated);

		[PreserveSig]
		[Token(Token = "0x60002FC")]
		[Address(RVA = "0x16738B8", Offset = "0x16738B8", VA = "0x16738B8")]
		public static extern EVoiceResult ISteamUser_DecompressVoice(byte[] pCompressed, uint cbCompressed, byte[] pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, uint nDesiredSampleRate);

		[PreserveSig]
		[Token(Token = "0x60002FD")]
		[Address(RVA = "0x1673990", Offset = "0x1673990", VA = "0x1673990")]
		public static extern uint ISteamUser_GetVoiceOptimalSampleRate();

		[PreserveSig]
		[Token(Token = "0x60002FE")]
		[Address(RVA = "0x1673A28", Offset = "0x1673A28", VA = "0x1673A28")]
		public static extern uint ISteamUser_GetAuthSessionTicket(byte[] pTicket, int cbMaxTicket, out uint pcbTicket);

		[PreserveSig]
		[Token(Token = "0x60002FF")]
		[Address(RVA = "0x1673AE0", Offset = "0x1673AE0", VA = "0x1673AE0")]
		public static extern EBeginAuthSessionResult ISteamUser_BeginAuthSession(byte[] pAuthTicket, int cbAuthTicket, CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x6000300")]
		[Address(RVA = "0x1673BA0", Offset = "0x1673BA0", VA = "0x1673BA0")]
		public static extern void ISteamUser_EndAuthSession(CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x6000301")]
		[Address(RVA = "0x1673C48", Offset = "0x1673C48", VA = "0x1673C48")]
		public static extern void ISteamUser_CancelAuthTicket(HAuthTicket hAuthTicket);

		[PreserveSig]
		[Token(Token = "0x6000302")]
		[Address(RVA = "0x1673CE8", Offset = "0x1673CE8", VA = "0x1673CE8")]
		public static extern EUserHasLicenseForAppResult ISteamUser_UserHasLicenseForApp(CSteamID steamID, AppId_t appID);

		[PreserveSig]
		[Token(Token = "0x6000303")]
		[Address(RVA = "0x1673D98", Offset = "0x1673D98", VA = "0x1673D98")]
		public static extern bool ISteamUser_BIsBehindNAT();

		[PreserveSig]
		[Token(Token = "0x6000304")]
		[Address(RVA = "0x1673E38", Offset = "0x1673E38", VA = "0x1673E38")]
		public static extern void ISteamUser_AdvertiseGame(CSteamID steamIDGameServer, uint unIPServer, ushort usPortServer);

		[PreserveSig]
		[Token(Token = "0x6000305")]
		[Address(RVA = "0x1673EF0", Offset = "0x1673EF0", VA = "0x1673EF0")]
		public static extern ulong ISteamUser_RequestEncryptedAppTicket(byte[] pDataToInclude, int cbDataToInclude);

		[PreserveSig]
		[Token(Token = "0x6000306")]
		[Address(RVA = "0x1673FA0", Offset = "0x1673FA0", VA = "0x1673FA0")]
		public static extern bool ISteamUser_GetEncryptedAppTicket(byte[] pTicket, int cbMaxTicket, out uint pcbTicket);

		[PreserveSig]
		[Token(Token = "0x6000307")]
		[Address(RVA = "0x1674060", Offset = "0x1674060", VA = "0x1674060")]
		public static extern int ISteamUser_GetGameBadgeLevel(int nSeries, bool bFoil);

		[PreserveSig]
		[Token(Token = "0x6000308")]
		[Address(RVA = "0x1674108", Offset = "0x1674108", VA = "0x1674108")]
		public static extern int ISteamUser_GetPlayerSteamLevel();

		[PreserveSig]
		[Token(Token = "0x6000309")]
		[Address(RVA = "0x16741A0", Offset = "0x16741A0", VA = "0x16741A0")]
		public static extern ulong ISteamUser_RequestStoreAuthURL(InteropHelp.UTF8StringHandle pchRedirectURL);

		[PreserveSig]
		[Token(Token = "0x600030A")]
		[Address(RVA = "0x16741C8", Offset = "0x16741C8", VA = "0x16741C8")]
		public static extern bool ISteamUser_BIsPhoneVerified();

		[PreserveSig]
		[Token(Token = "0x600030B")]
		[Address(RVA = "0x1674268", Offset = "0x1674268", VA = "0x1674268")]
		public static extern bool ISteamUser_BIsTwoFactorEnabled();

		[PreserveSig]
		[Token(Token = "0x600030C")]
		[Address(RVA = "0x1674308", Offset = "0x1674308", VA = "0x1674308")]
		public static extern bool ISteamUser_BIsPhoneIdentifying();

		[PreserveSig]
		[Token(Token = "0x600030D")]
		[Address(RVA = "0x16743A8", Offset = "0x16743A8", VA = "0x16743A8")]
		public static extern bool ISteamUser_BIsPhoneRequiringVerification();

		[PreserveSig]
		[Token(Token = "0x600030E")]
		[Address(RVA = "0x1674448", Offset = "0x1674448", VA = "0x1674448")]
		public static extern bool ISteamUserStats_RequestCurrentStats();

		[PreserveSig]
		[Token(Token = "0x600030F")]
		[Address(RVA = "0x16744E8", Offset = "0x16744E8", VA = "0x16744E8")]
		public static extern bool ISteamUserStats_GetStat(InteropHelp.UTF8StringHandle pchName, out int pData);

		[PreserveSig]
		[Token(Token = "0x6000310")]
		[Address(RVA = "0x167450C", Offset = "0x167450C", VA = "0x167450C")]
		public static extern bool ISteamUserStats_GetStat_(InteropHelp.UTF8StringHandle pchName, out float pData);

		[PreserveSig]
		[Token(Token = "0x6000311")]
		[Address(RVA = "0x1674530", Offset = "0x1674530", VA = "0x1674530")]
		public static extern bool ISteamUserStats_SetStat(InteropHelp.UTF8StringHandle pchName, int nData);

		[PreserveSig]
		[Token(Token = "0x6000312")]
		[Address(RVA = "0x1674554", Offset = "0x1674554", VA = "0x1674554")]
		public static extern bool ISteamUserStats_SetStat_(InteropHelp.UTF8StringHandle pchName, float fData);

		[PreserveSig]
		[Token(Token = "0x6000313")]
		[Address(RVA = "0x1674578", Offset = "0x1674578", VA = "0x1674578")]
		public static extern bool ISteamUserStats_UpdateAvgRateStat(InteropHelp.UTF8StringHandle pchName, float flCountThisSession, double dSessionLength);

		[PreserveSig]
		[Token(Token = "0x6000314")]
		[Address(RVA = "0x167459C", Offset = "0x167459C", VA = "0x167459C")]
		public static extern bool ISteamUserStats_GetAchievement(InteropHelp.UTF8StringHandle pchName, out bool pbAchieved);

		[PreserveSig]
		[Token(Token = "0x6000315")]
		[Address(RVA = "0x16745C0", Offset = "0x16745C0", VA = "0x16745C0")]
		public static extern bool ISteamUserStats_SetAchievement(InteropHelp.UTF8StringHandle pchName);

		[PreserveSig]
		[Token(Token = "0x6000316")]
		[Address(RVA = "0x16745E4", Offset = "0x16745E4", VA = "0x16745E4")]
		public static extern bool ISteamUserStats_ClearAchievement(InteropHelp.UTF8StringHandle pchName);

		[PreserveSig]
		[Token(Token = "0x6000317")]
		[Address(RVA = "0x1674608", Offset = "0x1674608", VA = "0x1674608")]
		public static extern bool ISteamUserStats_GetAchievementAndUnlockTime(InteropHelp.UTF8StringHandle pchName, out bool pbAchieved, out uint punUnlockTime);

		[PreserveSig]
		[Token(Token = "0x6000318")]
		[Address(RVA = "0x1674630", Offset = "0x1674630", VA = "0x1674630")]
		public static extern bool ISteamUserStats_StoreStats();

		[PreserveSig]
		[Token(Token = "0x6000319")]
		[Address(RVA = "0x16746D0", Offset = "0x16746D0", VA = "0x16746D0")]
		public static extern int ISteamUserStats_GetAchievementIcon(InteropHelp.UTF8StringHandle pchName);

		[PreserveSig]
		[Token(Token = "0x600031A")]
		[Address(RVA = "0x16746F4", Offset = "0x16746F4", VA = "0x16746F4")]
		public static extern IntPtr ISteamUserStats_GetAchievementDisplayAttribute(InteropHelp.UTF8StringHandle pchName, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x600031B")]
		[Address(RVA = "0x1674718", Offset = "0x1674718", VA = "0x1674718")]
		public static extern bool ISteamUserStats_IndicateAchievementProgress(InteropHelp.UTF8StringHandle pchName, uint nCurProgress, uint nMaxProgress);

		[PreserveSig]
		[Token(Token = "0x600031C")]
		[Address(RVA = "0x1674740", Offset = "0x1674740", VA = "0x1674740")]
		public static extern uint ISteamUserStats_GetNumAchievements();

		[PreserveSig]
		[Token(Token = "0x600031D")]
		[Address(RVA = "0x16747D8", Offset = "0x16747D8", VA = "0x16747D8")]
		public static extern IntPtr ISteamUserStats_GetAchievementName(uint iAchievement);

		[PreserveSig]
		[Token(Token = "0x600031E")]
		[Address(RVA = "0x1674878", Offset = "0x1674878", VA = "0x1674878")]
		public static extern ulong ISteamUserStats_RequestUserStats(CSteamID steamIDUser);

		[PreserveSig]
		[Token(Token = "0x600031F")]
		[Address(RVA = "0x1674920", Offset = "0x1674920", VA = "0x1674920")]
		public static extern bool ISteamUserStats_GetUserStat(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out int pData);

		[PreserveSig]
		[Token(Token = "0x6000320")]
		[Address(RVA = "0x1674944", Offset = "0x1674944", VA = "0x1674944")]
		public static extern bool ISteamUserStats_GetUserStat_(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out float pData);

		[PreserveSig]
		[Token(Token = "0x6000321")]
		[Address(RVA = "0x1674968", Offset = "0x1674968", VA = "0x1674968")]
		public static extern bool ISteamUserStats_GetUserAchievement(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out bool pbAchieved);

		[PreserveSig]
		[Token(Token = "0x6000322")]
		[Address(RVA = "0x167498C", Offset = "0x167498C", VA = "0x167498C")]
		public static extern bool ISteamUserStats_GetUserAchievementAndUnlockTime(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out bool pbAchieved, out uint punUnlockTime);

		[PreserveSig]
		[Token(Token = "0x6000323")]
		[Address(RVA = "0x16749B0", Offset = "0x16749B0", VA = "0x16749B0")]
		public static extern bool ISteamUserStats_ResetAllStats(bool bAchievementsToo);

		[PreserveSig]
		[Token(Token = "0x6000324")]
		[Address(RVA = "0x1674A58", Offset = "0x1674A58", VA = "0x1674A58")]
		public static extern ulong ISteamUserStats_FindOrCreateLeaderboard(InteropHelp.UTF8StringHandle pchLeaderboardName, ELeaderboardSortMethod eLeaderboardSortMethod, ELeaderboardDisplayType eLeaderboardDisplayType);

		[PreserveSig]
		[Token(Token = "0x6000325")]
		[Address(RVA = "0x1674A7C", Offset = "0x1674A7C", VA = "0x1674A7C")]
		public static extern ulong ISteamUserStats_FindLeaderboard(InteropHelp.UTF8StringHandle pchLeaderboardName);

		[PreserveSig]
		[Token(Token = "0x6000326")]
		[Address(RVA = "0x1674AA0", Offset = "0x1674AA0", VA = "0x1674AA0")]
		public static extern IntPtr ISteamUserStats_GetLeaderboardName(SteamLeaderboard_t hSteamLeaderboard);

		[PreserveSig]
		[Token(Token = "0x6000327")]
		[Address(RVA = "0x1674B48", Offset = "0x1674B48", VA = "0x1674B48")]
		public static extern int ISteamUserStats_GetLeaderboardEntryCount(SteamLeaderboard_t hSteamLeaderboard);

		[PreserveSig]
		[Token(Token = "0x6000328")]
		[Address(RVA = "0x1674BF0", Offset = "0x1674BF0", VA = "0x1674BF0")]
		public static extern ELeaderboardSortMethod ISteamUserStats_GetLeaderboardSortMethod(SteamLeaderboard_t hSteamLeaderboard);

		[PreserveSig]
		[Token(Token = "0x6000329")]
		[Address(RVA = "0x1674C98", Offset = "0x1674C98", VA = "0x1674C98")]
		public static extern ELeaderboardDisplayType ISteamUserStats_GetLeaderboardDisplayType(SteamLeaderboard_t hSteamLeaderboard);

		[PreserveSig]
		[Token(Token = "0x600032A")]
		[Address(RVA = "0x1674D40", Offset = "0x1674D40", VA = "0x1674D40")]
		public static extern ulong ISteamUserStats_DownloadLeaderboardEntries(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd);

		[PreserveSig]
		[Token(Token = "0x600032B")]
		[Address(RVA = "0x1674E00", Offset = "0x1674E00", VA = "0x1674E00")]
		public static extern ulong ISteamUserStats_DownloadLeaderboardEntriesForUsers(SteamLeaderboard_t hSteamLeaderboard, [In][Out] CSteamID[] prgUsers, int cUsers);

		[PreserveSig]
		[Token(Token = "0x600032C")]
		[Address(RVA = "0x1674EC0", Offset = "0x1674EC0", VA = "0x1674EC0")]
		public static extern bool ISteamUserStats_GetDownloadedLeaderboardEntry(SteamLeaderboardEntries_t hSteamLeaderboardEntries, int index, out LeaderboardEntry_t pLeaderboardEntry, [In][Out] int[] pDetails, int cDetailsMax);

		[PreserveSig]
		[Token(Token = "0x600032D")]
		[Address(RVA = "0x1674F98", Offset = "0x1674F98", VA = "0x1674F98")]
		public static extern ulong ISteamUserStats_UploadLeaderboardScore(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, [In][Out] int[] pScoreDetails, int cScoreDetailsCount);

		[PreserveSig]
		[Token(Token = "0x600032E")]
		[Address(RVA = "0x1675068", Offset = "0x1675068", VA = "0x1675068")]
		public static extern ulong ISteamUserStats_AttachLeaderboardUGC(SteamLeaderboard_t hSteamLeaderboard, UGCHandle_t hUGC);

		[PreserveSig]
		[Token(Token = "0x600032F")]
		[Address(RVA = "0x1675120", Offset = "0x1675120", VA = "0x1675120")]
		public static extern ulong ISteamUserStats_GetNumberOfCurrentPlayers();

		[PreserveSig]
		[Token(Token = "0x6000330")]
		[Address(RVA = "0x16751B8", Offset = "0x16751B8", VA = "0x16751B8")]
		public static extern ulong ISteamUserStats_RequestGlobalAchievementPercentages();

		[PreserveSig]
		[Token(Token = "0x6000331")]
		[Address(RVA = "0x1675250", Offset = "0x1675250", VA = "0x1675250")]
		public static extern int ISteamUserStats_GetMostAchievedAchievementInfo(IntPtr pchName, uint unNameBufLen, out float pflPercent, out bool pbAchieved);

		[PreserveSig]
		[Token(Token = "0x6000332")]
		[Address(RVA = "0x1675320", Offset = "0x1675320", VA = "0x1675320")]
		public static extern int ISteamUserStats_GetNextMostAchievedAchievementInfo(int iIteratorPrevious, IntPtr pchName, uint unNameBufLen, out float pflPercent, out bool pbAchieved);

		[PreserveSig]
		[Token(Token = "0x6000333")]
		[Address(RVA = "0x1675400", Offset = "0x1675400", VA = "0x1675400")]
		public static extern bool ISteamUserStats_GetAchievementAchievedPercent(InteropHelp.UTF8StringHandle pchName, out float pflPercent);

		[PreserveSig]
		[Token(Token = "0x6000334")]
		[Address(RVA = "0x1675428", Offset = "0x1675428", VA = "0x1675428")]
		public static extern ulong ISteamUserStats_RequestGlobalStats(int nHistoryDays);

		[PreserveSig]
		[Token(Token = "0x6000335")]
		[Address(RVA = "0x16754C8", Offset = "0x16754C8", VA = "0x16754C8")]
		public static extern bool ISteamUserStats_GetGlobalStat(InteropHelp.UTF8StringHandle pchStatName, out long pData);

		[PreserveSig]
		[Token(Token = "0x6000336")]
		[Address(RVA = "0x16754EC", Offset = "0x16754EC", VA = "0x16754EC")]
		public static extern bool ISteamUserStats_GetGlobalStat_(InteropHelp.UTF8StringHandle pchStatName, out double pData);

		[PreserveSig]
		[Token(Token = "0x6000337")]
		[Address(RVA = "0x1675510", Offset = "0x1675510", VA = "0x1675510")]
		public static extern int ISteamUserStats_GetGlobalStatHistory(InteropHelp.UTF8StringHandle pchStatName, [In][Out] long[] pData, uint cubData);

		[PreserveSig]
		[Token(Token = "0x6000338")]
		[Address(RVA = "0x1675534", Offset = "0x1675534", VA = "0x1675534")]
		public static extern int ISteamUserStats_GetGlobalStatHistory_(InteropHelp.UTF8StringHandle pchStatName, [In][Out] double[] pData, uint cubData);

		[PreserveSig]
		[Token(Token = "0x6000339")]
		[Address(RVA = "0x1675558", Offset = "0x1675558", VA = "0x1675558")]
		public static extern uint ISteamUtils_GetSecondsSinceAppActive();

		[PreserveSig]
		[Token(Token = "0x600033A")]
		[Address(RVA = "0x16755F0", Offset = "0x16755F0", VA = "0x16755F0")]
		public static extern uint ISteamUtils_GetSecondsSinceComputerActive();

		[PreserveSig]
		[Token(Token = "0x600033B")]
		[Address(RVA = "0x1675688", Offset = "0x1675688", VA = "0x1675688")]
		public static extern EUniverse ISteamUtils_GetConnectedUniverse();

		[PreserveSig]
		[Token(Token = "0x600033C")]
		[Address(RVA = "0x1675720", Offset = "0x1675720", VA = "0x1675720")]
		public static extern uint ISteamUtils_GetServerRealTime();

		[PreserveSig]
		[Token(Token = "0x600033D")]
		[Address(RVA = "0x16757B8", Offset = "0x16757B8", VA = "0x16757B8")]
		public static extern IntPtr ISteamUtils_GetIPCountry();

		[PreserveSig]
		[Token(Token = "0x600033E")]
		[Address(RVA = "0x1675850", Offset = "0x1675850", VA = "0x1675850")]
		public static extern bool ISteamUtils_GetImageSize(int iImage, out uint pnWidth, out uint pnHeight);

		[PreserveSig]
		[Token(Token = "0x600033F")]
		[Address(RVA = "0x1675908", Offset = "0x1675908", VA = "0x1675908")]
		public static extern bool ISteamUtils_GetImageRGBA(int iImage, byte[] pubDest, int nDestBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000340")]
		[Address(RVA = "0x16759C8", Offset = "0x16759C8", VA = "0x16759C8")]
		public static extern bool ISteamUtils_GetCSERIPPort(out uint unIP, out ushort usPort);

		[PreserveSig]
		[Token(Token = "0x6000341")]
		[Address(RVA = "0x1675A78", Offset = "0x1675A78", VA = "0x1675A78")]
		public static extern byte ISteamUtils_GetCurrentBatteryPower();

		[PreserveSig]
		[Token(Token = "0x6000342")]
		[Address(RVA = "0x1675B10", Offset = "0x1675B10", VA = "0x1675B10")]
		public static extern uint ISteamUtils_GetAppID();

		[PreserveSig]
		[Token(Token = "0x6000343")]
		[Address(RVA = "0x1675BA8", Offset = "0x1675BA8", VA = "0x1675BA8")]
		public static extern void ISteamUtils_SetOverlayNotificationPosition(ENotificationPosition eNotificationPosition);

		[PreserveSig]
		[Token(Token = "0x6000344")]
		[Address(RVA = "0x1675C48", Offset = "0x1675C48", VA = "0x1675C48")]
		public static extern bool ISteamUtils_IsAPICallCompleted(SteamAPICall_t hSteamAPICall, out bool pbFailed);

		[PreserveSig]
		[Token(Token = "0x6000345")]
		[Address(RVA = "0x1675D18", Offset = "0x1675D18", VA = "0x1675D18")]
		public static extern ESteamAPICallFailure ISteamUtils_GetAPICallFailureReason(SteamAPICall_t hSteamAPICall);

		[PreserveSig]
		[Token(Token = "0x6000346")]
		[Address(RVA = "0x1675DC0", Offset = "0x1675DC0", VA = "0x1675DC0")]
		public static extern bool ISteamUtils_GetAPICallResult(SteamAPICall_t hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, out bool pbFailed);

		[PreserveSig]
		[Token(Token = "0x6000347")]
		[Address(RVA = "0x1675EB0", Offset = "0x1675EB0", VA = "0x1675EB0")]
		public static extern uint ISteamUtils_GetIPCCallCount();

		[PreserveSig]
		[Token(Token = "0x6000348")]
		[Address(RVA = "0x1675F48", Offset = "0x1675F48", VA = "0x1675F48")]
		public static extern void ISteamUtils_SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction);

		[PreserveSig]
		[Token(Token = "0x6000349")]
		[Address(RVA = "0x1675FF8", Offset = "0x1675FF8", VA = "0x1675FF8")]
		public static extern bool ISteamUtils_IsOverlayEnabled();

		[PreserveSig]
		[Token(Token = "0x600034A")]
		[Address(RVA = "0x1676098", Offset = "0x1676098", VA = "0x1676098")]
		public static extern bool ISteamUtils_BOverlayNeedsPresent();

		[PreserveSig]
		[Token(Token = "0x600034B")]
		[Address(RVA = "0x1676138", Offset = "0x1676138", VA = "0x1676138")]
		public static extern ulong ISteamUtils_CheckFileSignature(InteropHelp.UTF8StringHandle szFileName);

		[PreserveSig]
		[Token(Token = "0x600034C")]
		[Address(RVA = "0x167615C", Offset = "0x167615C", VA = "0x167615C")]
		public static extern bool ISteamUtils_ShowGamepadTextInput(EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, InteropHelp.UTF8StringHandle pchDescription, uint unCharMax, InteropHelp.UTF8StringHandle pchExistingText);

		[PreserveSig]
		[Token(Token = "0x600034D")]
		[Address(RVA = "0x1676180", Offset = "0x1676180", VA = "0x1676180")]
		public static extern uint ISteamUtils_GetEnteredGamepadTextLength();

		[PreserveSig]
		[Token(Token = "0x600034E")]
		[Address(RVA = "0x1676218", Offset = "0x1676218", VA = "0x1676218")]
		public static extern bool ISteamUtils_GetEnteredGamepadTextInput(IntPtr pchText, uint cchText);

		[PreserveSig]
		[Token(Token = "0x600034F")]
		[Address(RVA = "0x16762C8", Offset = "0x16762C8", VA = "0x16762C8")]
		public static extern IntPtr ISteamUtils_GetSteamUILanguage();

		[PreserveSig]
		[Token(Token = "0x6000350")]
		[Address(RVA = "0x1676360", Offset = "0x1676360", VA = "0x1676360")]
		public static extern bool ISteamUtils_IsSteamRunningInVR();

		[PreserveSig]
		[Token(Token = "0x6000351")]
		[Address(RVA = "0x1676400", Offset = "0x1676400", VA = "0x1676400")]
		public static extern void ISteamUtils_SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset);

		[PreserveSig]
		[Token(Token = "0x6000352")]
		[Address(RVA = "0x16764A8", Offset = "0x16764A8", VA = "0x16764A8")]
		public static extern bool ISteamUtils_IsSteamInBigPictureMode();

		[PreserveSig]
		[Token(Token = "0x6000353")]
		[Address(RVA = "0x1676548", Offset = "0x1676548", VA = "0x1676548")]
		public static extern void ISteamUtils_StartVRDashboard();

		[PreserveSig]
		[Token(Token = "0x6000354")]
		[Address(RVA = "0x16765E0", Offset = "0x16765E0", VA = "0x16765E0")]
		public static extern bool ISteamUtils_IsVRHeadsetStreamingEnabled();

		[PreserveSig]
		[Token(Token = "0x6000355")]
		[Address(RVA = "0x1676680", Offset = "0x1676680", VA = "0x1676680")]
		public static extern void ISteamUtils_SetVRHeadsetStreamingEnabled(bool bEnabled);

		[PreserveSig]
		[Token(Token = "0x6000356")]
		[Address(RVA = "0x1676720", Offset = "0x1676720", VA = "0x1676720")]
		public static extern void ISteamVideo_GetVideoURL(AppId_t unVideoAppID);

		[PreserveSig]
		[Token(Token = "0x6000357")]
		[Address(RVA = "0x16767C0", Offset = "0x16767C0", VA = "0x16767C0")]
		public static extern bool ISteamVideo_IsBroadcasting(out int pnNumViewers);

		[PreserveSig]
		[Token(Token = "0x6000358")]
		[Address(RVA = "0x1676868", Offset = "0x1676868", VA = "0x1676868")]
		public static extern void ISteamVideo_GetOPFSettings(AppId_t unVideoAppID);

		[PreserveSig]
		[Token(Token = "0x6000359")]
		[Address(RVA = "0x1676908", Offset = "0x1676908", VA = "0x1676908")]
		public static extern bool ISteamVideo_GetOPFStringForApp(AppId_t unVideoAppID, IntPtr pchBuffer, ref int pnBufferSize);

		[PreserveSig]
		[Token(Token = "0x600035A")]
		[Address(RVA = "0x16769C0", Offset = "0x16769C0", VA = "0x16769C0")]
		public static extern uint ISteamGameServerHTTP_CreateHTTPRequest(EHTTPMethod eHTTPRequestMethod, InteropHelp.UTF8StringHandle pchAbsoluteURL);

		[PreserveSig]
		[Token(Token = "0x600035B")]
		[Address(RVA = "0x16769E8", Offset = "0x16769E8", VA = "0x16769E8")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestContextValue(HTTPRequestHandle hRequest, ulong ulContextValue);

		[PreserveSig]
		[Token(Token = "0x600035C")]
		[Address(RVA = "0x1676AA0", Offset = "0x1676AA0", VA = "0x1676AA0")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestNetworkActivityTimeout(HTTPRequestHandle hRequest, uint unTimeoutSeconds);

		[PreserveSig]
		[Token(Token = "0x600035D")]
		[Address(RVA = "0x1676B50", Offset = "0x1676B50", VA = "0x1676B50")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestHeaderValue(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchHeaderName, InteropHelp.UTF8StringHandle pchHeaderValue);

		[PreserveSig]
		[Token(Token = "0x600035E")]
		[Address(RVA = "0x1676B74", Offset = "0x1676B74", VA = "0x1676B74")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestGetOrPostParameter(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchParamName, InteropHelp.UTF8StringHandle pchParamValue);

		[PreserveSig]
		[Token(Token = "0x600035F")]
		[Address(RVA = "0x1676B98", Offset = "0x1676B98", VA = "0x1676B98")]
		public static extern bool ISteamGameServerHTTP_SendHTTPRequest(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle);

		[PreserveSig]
		[Token(Token = "0x6000360")]
		[Address(RVA = "0x1676C48", Offset = "0x1676C48", VA = "0x1676C48")]
		public static extern bool ISteamGameServerHTTP_SendHTTPRequestAndStreamResponse(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle);

		[PreserveSig]
		[Token(Token = "0x6000361")]
		[Address(RVA = "0x1676CF8", Offset = "0x1676CF8", VA = "0x1676CF8")]
		public static extern bool ISteamGameServerHTTP_DeferHTTPRequest(HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x6000362")]
		[Address(RVA = "0x1676DA0", Offset = "0x1676DA0", VA = "0x1676DA0")]
		public static extern bool ISteamGameServerHTTP_PrioritizeHTTPRequest(HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x6000363")]
		[Address(RVA = "0x1676E48", Offset = "0x1676E48", VA = "0x1676E48")]
		public static extern bool ISteamGameServerHTTP_GetHTTPResponseHeaderSize(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchHeaderName, out uint unResponseHeaderSize);

		[PreserveSig]
		[Token(Token = "0x6000364")]
		[Address(RVA = "0x1676E6C", Offset = "0x1676E6C", VA = "0x1676E6C")]
		public static extern bool ISteamGameServerHTTP_GetHTTPResponseHeaderValue(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchHeaderName, byte[] pHeaderValueBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000365")]
		[Address(RVA = "0x1676E90", Offset = "0x1676E90", VA = "0x1676E90")]
		public static extern bool ISteamGameServerHTTP_GetHTTPResponseBodySize(HTTPRequestHandle hRequest, out uint unBodySize);

		[PreserveSig]
		[Token(Token = "0x6000366")]
		[Address(RVA = "0x1676F40", Offset = "0x1676F40", VA = "0x1676F40")]
		public static extern bool ISteamGameServerHTTP_GetHTTPResponseBodyData(HTTPRequestHandle hRequest, byte[] pBodyDataBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000367")]
		[Address(RVA = "0x1677000", Offset = "0x1677000", VA = "0x1677000")]
		public static extern bool ISteamGameServerHTTP_GetHTTPStreamingResponseBodyData(HTTPRequestHandle hRequest, uint cOffset, byte[] pBodyDataBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000368")]
		[Address(RVA = "0x16770C8", Offset = "0x16770C8", VA = "0x16770C8")]
		public static extern bool ISteamGameServerHTTP_ReleaseHTTPRequest(HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x6000369")]
		[Address(RVA = "0x1677170", Offset = "0x1677170", VA = "0x1677170")]
		public static extern bool ISteamGameServerHTTP_GetHTTPDownloadProgressPct(HTTPRequestHandle hRequest, out float pflPercentOut);

		[PreserveSig]
		[Token(Token = "0x600036A")]
		[Address(RVA = "0x1677220", Offset = "0x1677220", VA = "0x1677220")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestRawPostBody(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchContentType, byte[] pubBody, uint unBodyLen);

		[PreserveSig]
		[Token(Token = "0x600036B")]
		[Address(RVA = "0x1677248", Offset = "0x1677248", VA = "0x1677248")]
		public static extern uint ISteamGameServerHTTP_CreateCookieContainer(bool bAllowResponsesToModify);

		[PreserveSig]
		[Token(Token = "0x600036C")]
		[Address(RVA = "0x16772E8", Offset = "0x16772E8", VA = "0x16772E8")]
		public static extern bool ISteamGameServerHTTP_ReleaseCookieContainer(HTTPCookieContainerHandle hCookieContainer);

		[PreserveSig]
		[Token(Token = "0x600036D")]
		[Address(RVA = "0x1677390", Offset = "0x1677390", VA = "0x1677390")]
		public static extern bool ISteamGameServerHTTP_SetCookie(HTTPCookieContainerHandle hCookieContainer, InteropHelp.UTF8StringHandle pchHost, InteropHelp.UTF8StringHandle pchUrl, InteropHelp.UTF8StringHandle pchCookie);

		[PreserveSig]
		[Token(Token = "0x600036E")]
		[Address(RVA = "0x16773B8", Offset = "0x16773B8", VA = "0x16773B8")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestCookieContainer(HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer);

		[PreserveSig]
		[Token(Token = "0x600036F")]
		[Address(RVA = "0x1677468", Offset = "0x1677468", VA = "0x1677468")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestUserAgentInfo(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchUserAgentInfo);

		[PreserveSig]
		[Token(Token = "0x6000370")]
		[Address(RVA = "0x1677490", Offset = "0x1677490", VA = "0x1677490")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestRequiresVerifiedCertificate(HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate);

		[PreserveSig]
		[Token(Token = "0x6000371")]
		[Address(RVA = "0x1677540", Offset = "0x1677540", VA = "0x1677540")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestAbsoluteTimeoutMS(HTTPRequestHandle hRequest, uint unMilliseconds);

		[PreserveSig]
		[Token(Token = "0x6000372")]
		[Address(RVA = "0x16775F0", Offset = "0x16775F0", VA = "0x16775F0")]
		public static extern bool ISteamGameServerHTTP_GetHTTPRequestWasTimedOut(HTTPRequestHandle hRequest, out bool pbWasTimedOut);

		[PreserveSig]
		[Token(Token = "0x6000373")]
		[Address(RVA = "0x16776B8", Offset = "0x16776B8", VA = "0x16776B8")]
		public static extern EResult ISteamGameServerInventory_GetResultStatus(SteamInventoryResult_t resultHandle);

		[PreserveSig]
		[Token(Token = "0x6000374")]
		[Address(RVA = "0x1677758", Offset = "0x1677758", VA = "0x1677758")]
		public static extern bool ISteamGameServerInventory_GetResultItems(SteamInventoryResult_t resultHandle, [In][Out] SteamItemDetails_t[] pOutItemsArray, ref uint punOutItemsArraySize);

		[PreserveSig]
		[Token(Token = "0x6000375")]
		[Address(RVA = "0x1677818", Offset = "0x1677818", VA = "0x1677818")]
		public static extern bool ISteamGameServerInventory_GetResultItemProperty(SteamInventoryResult_t resultHandle, uint unItemIndex, InteropHelp.UTF8StringHandle pchPropertyName, IntPtr pchValueBuffer, ref uint punValueBufferSizeOut);

		[PreserveSig]
		[Token(Token = "0x6000376")]
		[Address(RVA = "0x1677840", Offset = "0x1677840", VA = "0x1677840")]
		public static extern uint ISteamGameServerInventory_GetResultTimestamp(SteamInventoryResult_t resultHandle);

		[PreserveSig]
		[Token(Token = "0x6000377")]
		[Address(RVA = "0x16778E0", Offset = "0x16778E0", VA = "0x16778E0")]
		public static extern bool ISteamGameServerInventory_CheckResultSteamID(SteamInventoryResult_t resultHandle, CSteamID steamIDExpected);

		[PreserveSig]
		[Token(Token = "0x6000378")]
		[Address(RVA = "0x1677998", Offset = "0x1677998", VA = "0x1677998")]
		public static extern void ISteamGameServerInventory_DestroyResult(SteamInventoryResult_t resultHandle);

		[PreserveSig]
		[Token(Token = "0x6000379")]
		[Address(RVA = "0x1677A38", Offset = "0x1677A38", VA = "0x1677A38")]
		public static extern bool ISteamGameServerInventory_GetAllItems(out SteamInventoryResult_t pResultHandle);

		[PreserveSig]
		[Token(Token = "0x600037A")]
		[Address(RVA = "0x1677AE0", Offset = "0x1677AE0", VA = "0x1677AE0")]
		public static extern bool ISteamGameServerInventory_GetItemsByID(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemInstanceID_t[] pInstanceIDs, uint unCountInstanceIDs);

		[PreserveSig]
		[Token(Token = "0x600037B")]
		[Address(RVA = "0x1677BA0", Offset = "0x1677BA0", VA = "0x1677BA0")]
		public static extern bool ISteamGameServerInventory_SerializeResult(SteamInventoryResult_t resultHandle, byte[] pOutBuffer, out uint punOutBufferSize);

		[PreserveSig]
		[Token(Token = "0x600037C")]
		[Address(RVA = "0x1677C60", Offset = "0x1677C60", VA = "0x1677C60")]
		public static extern bool ISteamGameServerInventory_DeserializeResult(out SteamInventoryResult_t pOutResultHandle, byte[] pBuffer, uint unBufferSize, bool bRESERVED_MUST_BE_FALSE);

		[PreserveSig]
		[Token(Token = "0x600037D")]
		[Address(RVA = "0x1677D28", Offset = "0x1677D28", VA = "0x1677D28")]
		public static extern bool ISteamGameServerInventory_GenerateItems(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemDef_t[] pArrayItemDefs, [In][Out] uint[] punArrayQuantity, uint unArrayLength);

		[PreserveSig]
		[Token(Token = "0x600037E")]
		[Address(RVA = "0x1677DF8", Offset = "0x1677DF8", VA = "0x1677DF8")]
		public static extern bool ISteamGameServerInventory_GrantPromoItems(out SteamInventoryResult_t pResultHandle);

		[PreserveSig]
		[Token(Token = "0x600037F")]
		[Address(RVA = "0x1677EA0", Offset = "0x1677EA0", VA = "0x1677EA0")]
		public static extern bool ISteamGameServerInventory_AddPromoItem(out SteamInventoryResult_t pResultHandle, SteamItemDef_t itemDef);

		[PreserveSig]
		[Token(Token = "0x6000380")]
		[Address(RVA = "0x1677F50", Offset = "0x1677F50", VA = "0x1677F50")]
		public static extern bool ISteamGameServerInventory_AddPromoItems(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemDef_t[] pArrayItemDefs, uint unArrayLength);

		[PreserveSig]
		[Token(Token = "0x6000381")]
		[Address(RVA = "0x1678010", Offset = "0x1678010", VA = "0x1678010")]
		public static extern bool ISteamGameServerInventory_ConsumeItem(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemConsume, uint unQuantity);

		[PreserveSig]
		[Token(Token = "0x6000382")]
		[Address(RVA = "0x16780D0", Offset = "0x16780D0", VA = "0x16780D0")]
		public static extern bool ISteamGameServerInventory_ExchangeItems(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemDef_t[] pArrayGenerate, [In][Out] uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, [In][Out] SteamItemInstanceID_t[] pArrayDestroy, [In][Out] uint[] punArrayDestroyQuantity, uint unArrayDestroyLength);

		[PreserveSig]
		[Token(Token = "0x6000383")]
		[Address(RVA = "0x16781D0", Offset = "0x16781D0", VA = "0x16781D0")]
		public static extern bool ISteamGameServerInventory_TransferItemQuantity(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemIdSource, uint unQuantity, SteamItemInstanceID_t itemIdDest);

		[PreserveSig]
		[Token(Token = "0x6000384")]
		[Address(RVA = "0x16782A0", Offset = "0x16782A0", VA = "0x16782A0")]
		public static extern void ISteamGameServerInventory_SendItemDropHeartbeat();

		[PreserveSig]
		[Token(Token = "0x6000385")]
		[Address(RVA = "0x1678338", Offset = "0x1678338", VA = "0x1678338")]
		public static extern bool ISteamGameServerInventory_TriggerItemDrop(out SteamInventoryResult_t pResultHandle, SteamItemDef_t dropListDefinition);

		[PreserveSig]
		[Token(Token = "0x6000386")]
		[Address(RVA = "0x16783E8", Offset = "0x16783E8", VA = "0x16783E8")]
		public static extern bool ISteamGameServerInventory_TradeItems(out SteamInventoryResult_t pResultHandle, CSteamID steamIDTradePartner, [In][Out] SteamItemInstanceID_t[] pArrayGive, [In][Out] uint[] pArrayGiveQuantity, uint nArrayGiveLength, [In][Out] SteamItemInstanceID_t[] pArrayGet, [In][Out] uint[] pArrayGetQuantity, uint nArrayGetLength);

		[PreserveSig]
		[Token(Token = "0x6000387")]
		[Address(RVA = "0x16784F8", Offset = "0x16784F8", VA = "0x16784F8")]
		public static extern bool ISteamGameServerInventory_LoadItemDefinitions();

		[PreserveSig]
		[Token(Token = "0x6000388")]
		[Address(RVA = "0x1678598", Offset = "0x1678598", VA = "0x1678598")]
		public static extern bool ISteamGameServerInventory_GetItemDefinitionIDs([In][Out] SteamItemDef_t[] pItemDefIDs, out uint punItemDefIDsArraySize);

		[PreserveSig]
		[Token(Token = "0x6000389")]
		[Address(RVA = "0x1678650", Offset = "0x1678650", VA = "0x1678650")]
		public static extern bool ISteamGameServerInventory_GetItemDefinitionProperty(SteamItemDef_t iDefinition, InteropHelp.UTF8StringHandle pchPropertyName, IntPtr pchValueBuffer, ref uint punValueBufferSizeOut);

		[PreserveSig]
		[Token(Token = "0x600038A")]
		[Address(RVA = "0x1678678", Offset = "0x1678678", VA = "0x1678678")]
		public static extern ulong ISteamGameServerInventory_RequestEligiblePromoItemDefinitionsIDs(CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x600038B")]
		[Address(RVA = "0x1678720", Offset = "0x1678720", VA = "0x1678720")]
		public static extern bool ISteamGameServerInventory_GetEligiblePromoItemDefinitionIDs(CSteamID steamID, [In][Out] SteamItemDef_t[] pItemDefIDs, ref uint punItemDefIDsArraySize);

		[PreserveSig]
		[Token(Token = "0x600038C")]
		[Address(RVA = "0x16787E8", Offset = "0x16787E8", VA = "0x16787E8")]
		public static extern bool ISteamGameServerNetworking_SendP2PPacket(CSteamID steamIDRemote, byte[] pubData, uint cubData, EP2PSend eP2PSendType, int nChannel);

		[PreserveSig]
		[Token(Token = "0x600038D")]
		[Address(RVA = "0x16788C0", Offset = "0x16788C0", VA = "0x16788C0")]
		public static extern bool ISteamGameServerNetworking_IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel);

		[PreserveSig]
		[Token(Token = "0x600038E")]
		[Address(RVA = "0x1678970", Offset = "0x1678970", VA = "0x1678970")]
		public static extern bool ISteamGameServerNetworking_ReadP2PPacket(byte[] pubDest, uint cubDest, out uint pcubMsgSize, out CSteamID psteamIDRemote, int nChannel);

		[PreserveSig]
		[Token(Token = "0x600038F")]
		[Address(RVA = "0x1678A40", Offset = "0x1678A40", VA = "0x1678A40")]
		public static extern bool ISteamGameServerNetworking_AcceptP2PSessionWithUser(CSteamID steamIDRemote);

		[PreserveSig]
		[Token(Token = "0x6000390")]
		[Address(RVA = "0x1678AF0", Offset = "0x1678AF0", VA = "0x1678AF0")]
		public static extern bool ISteamGameServerNetworking_CloseP2PSessionWithUser(CSteamID steamIDRemote);

		[PreserveSig]
		[Token(Token = "0x6000391")]
		[Address(RVA = "0x1678BA0", Offset = "0x1678BA0", VA = "0x1678BA0")]
		public static extern bool ISteamGameServerNetworking_CloseP2PChannelWithUser(CSteamID steamIDRemote, int nChannel);

		[PreserveSig]
		[Token(Token = "0x6000392")]
		[Address(RVA = "0x1678C58", Offset = "0x1678C58", VA = "0x1678C58")]
		public static extern bool ISteamGameServerNetworking_GetP2PSessionState(CSteamID steamIDRemote, out P2PSessionState_t pConnectionState);

		[PreserveSig]
		[Token(Token = "0x6000393")]
		[Address(RVA = "0x1678D10", Offset = "0x1678D10", VA = "0x1678D10")]
		public static extern bool ISteamGameServerNetworking_AllowP2PPacketRelay(bool bAllow);

		[PreserveSig]
		[Token(Token = "0x6000394")]
		[Address(RVA = "0x1678DB8", Offset = "0x1678DB8", VA = "0x1678DB8")]
		public static extern uint ISteamGameServerNetworking_CreateListenSocket(int nVirtualP2PPort, uint nIP, ushort nPort, bool bAllowUseOfPacketRelay);

		[PreserveSig]
		[Token(Token = "0x6000395")]
		[Address(RVA = "0x1678E70", Offset = "0x1678E70", VA = "0x1678E70")]
		public static extern uint ISteamGameServerNetworking_CreateP2PConnectionSocket(CSteamID steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay);

		[PreserveSig]
		[Token(Token = "0x6000396")]
		[Address(RVA = "0x1678F30", Offset = "0x1678F30", VA = "0x1678F30")]
		public static extern uint ISteamGameServerNetworking_CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec);

		[PreserveSig]
		[Token(Token = "0x6000397")]
		[Address(RVA = "0x1678FE0", Offset = "0x1678FE0", VA = "0x1678FE0")]
		public static extern bool ISteamGameServerNetworking_DestroySocket(SNetSocket_t hSocket, bool bNotifyRemoteEnd);

		[PreserveSig]
		[Token(Token = "0x6000398")]
		[Address(RVA = "0x1679090", Offset = "0x1679090", VA = "0x1679090")]
		public static extern bool ISteamGameServerNetworking_DestroyListenSocket(SNetListenSocket_t hSocket, bool bNotifyRemoteEnd);

		[PreserveSig]
		[Token(Token = "0x6000399")]
		[Address(RVA = "0x1679140", Offset = "0x1679140", VA = "0x1679140")]
		public static extern bool ISteamGameServerNetworking_SendDataOnSocket(SNetSocket_t hSocket, byte[] pubData, uint cubData, bool bReliable);

		[PreserveSig]
		[Token(Token = "0x600039A")]
		[Address(RVA = "0x1679208", Offset = "0x1679208", VA = "0x1679208")]
		public static extern bool ISteamGameServerNetworking_IsDataAvailableOnSocket(SNetSocket_t hSocket, out uint pcubMsgSize);

		[PreserveSig]
		[Token(Token = "0x600039B")]
		[Address(RVA = "0x16792B8", Offset = "0x16792B8", VA = "0x16792B8")]
		public static extern bool ISteamGameServerNetworking_RetrieveDataFromSocket(SNetSocket_t hSocket, byte[] pubDest, uint cubDest, out uint pcubMsgSize);

		[PreserveSig]
		[Token(Token = "0x600039C")]
		[Address(RVA = "0x1679380", Offset = "0x1679380", VA = "0x1679380")]
		public static extern bool ISteamGameServerNetworking_IsDataAvailable(SNetListenSocket_t hListenSocket, out uint pcubMsgSize, out SNetSocket_t phSocket);

		[PreserveSig]
		[Token(Token = "0x600039D")]
		[Address(RVA = "0x1679438", Offset = "0x1679438", VA = "0x1679438")]
		public static extern bool ISteamGameServerNetworking_RetrieveData(SNetListenSocket_t hListenSocket, byte[] pubDest, uint cubDest, out uint pcubMsgSize, out SNetSocket_t phSocket);

		[PreserveSig]
		[Token(Token = "0x600039E")]
		[Address(RVA = "0x1679508", Offset = "0x1679508", VA = "0x1679508")]
		public static extern bool ISteamGameServerNetworking_GetSocketInfo(SNetSocket_t hSocket, out CSteamID pSteamIDRemote, out int peSocketStatus, out uint punIPRemote, out ushort punPortRemote);

		[PreserveSig]
		[Token(Token = "0x600039F")]
		[Address(RVA = "0x16795D0", Offset = "0x16795D0", VA = "0x16795D0")]
		public static extern bool ISteamGameServerNetworking_GetListenSocketInfo(SNetListenSocket_t hListenSocket, out uint pnIP, out ushort pnPort);

		[PreserveSig]
		[Token(Token = "0x60003A0")]
		[Address(RVA = "0x1679688", Offset = "0x1679688", VA = "0x1679688")]
		public static extern ESNetSocketConnectionType ISteamGameServerNetworking_GetSocketConnectionType(SNetSocket_t hSocket);

		[PreserveSig]
		[Token(Token = "0x60003A1")]
		[Address(RVA = "0x1679728", Offset = "0x1679728", VA = "0x1679728")]
		public static extern int ISteamGameServerNetworking_GetMaxPacketSize(SNetSocket_t hSocket);

		[PreserveSig]
		[Token(Token = "0x60003A2")]
		[Address(RVA = "0x16797C8", Offset = "0x16797C8", VA = "0x16797C8")]
		public static extern ulong ISteamGameServerUGC_CreateQueryUserUGCRequest(AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage);

		[PreserveSig]
		[Token(Token = "0x60003A3")]
		[Address(RVA = "0x1679898", Offset = "0x1679898", VA = "0x1679898")]
		public static extern ulong ISteamGameServerUGC_CreateQueryAllUGCRequest(EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage);

		[PreserveSig]
		[Token(Token = "0x60003A4")]
		[Address(RVA = "0x1679958", Offset = "0x1679958", VA = "0x1679958")]
		public static extern ulong ISteamGameServerUGC_CreateQueryUGCDetailsRequest([In][Out] PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs);

		[PreserveSig]
		[Token(Token = "0x60003A5")]
		[Address(RVA = "0x1679A08", Offset = "0x1679A08", VA = "0x1679A08")]
		public static extern ulong ISteamGameServerUGC_SendQueryUGCRequest(UGCQueryHandle_t handle);

		[PreserveSig]
		[Token(Token = "0x60003A6")]
		[Address(RVA = "0x1679AB0", Offset = "0x1679AB0", VA = "0x1679AB0")]
		public static extern bool ISteamGameServerUGC_GetQueryUGCResult(UGCQueryHandle_t handle, uint index, out SteamUGCDetails_t pDetails);

		[PreserveSig]
		[Token(Token = "0x60003A7")]
		[Address(RVA = "0x1679BC0", Offset = "0x1679BC0", VA = "0x1679BC0")]
		public static extern bool ISteamGameServerUGC_GetQueryUGCPreviewURL(UGCQueryHandle_t handle, uint index, IntPtr pchURL, uint cchURLSize);

		[PreserveSig]
		[Token(Token = "0x60003A8")]
		[Address(RVA = "0x1679C88", Offset = "0x1679C88", VA = "0x1679C88")]
		public static extern bool ISteamGameServerUGC_GetQueryUGCMetadata(UGCQueryHandle_t handle, uint index, IntPtr pchMetadata, uint cchMetadatasize);

		[PreserveSig]
		[Token(Token = "0x60003A9")]
		[Address(RVA = "0x1679D50", Offset = "0x1679D50", VA = "0x1679D50")]
		public static extern bool ISteamGameServerUGC_GetQueryUGCChildren(UGCQueryHandle_t handle, uint index, [In][Out] PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries);

		[PreserveSig]
		[Token(Token = "0x60003AA")]
		[Address(RVA = "0x1679E20", Offset = "0x1679E20", VA = "0x1679E20")]
		public static extern bool ISteamGameServerUGC_GetQueryUGCStatistic(UGCQueryHandle_t handle, uint index, EItemStatistic eStatType, out ulong pStatValue);

		[PreserveSig]
		[Token(Token = "0x60003AB")]
		[Address(RVA = "0x1679EE8", Offset = "0x1679EE8", VA = "0x1679EE8")]
		public static extern uint ISteamGameServerUGC_GetQueryUGCNumAdditionalPreviews(UGCQueryHandle_t handle, uint index);

		[PreserveSig]
		[Token(Token = "0x60003AC")]
		[Address(RVA = "0x1679F98", Offset = "0x1679F98", VA = "0x1679F98")]
		public static extern bool ISteamGameServerUGC_GetQueryUGCAdditionalPreview(UGCQueryHandle_t handle, uint index, uint previewIndex, IntPtr pchURLOrVideoID, uint cchURLSize, IntPtr pchOriginalFileName, uint cchOriginalFileNameSize, out EItemPreviewType pPreviewType);

		[PreserveSig]
		[Token(Token = "0x60003AD")]
		[Address(RVA = "0x167A090", Offset = "0x167A090", VA = "0x167A090")]
		public static extern uint ISteamGameServerUGC_GetQueryUGCNumKeyValueTags(UGCQueryHandle_t handle, uint index);

		[PreserveSig]
		[Token(Token = "0x60003AE")]
		[Address(RVA = "0x167A140", Offset = "0x167A140", VA = "0x167A140")]
		public static extern bool ISteamGameServerUGC_GetQueryUGCKeyValueTag(UGCQueryHandle_t handle, uint index, uint keyValueTagIndex, IntPtr pchKey, uint cchKeySize, IntPtr pchValue, uint cchValueSize);

		[PreserveSig]
		[Token(Token = "0x60003AF")]
		[Address(RVA = "0x167A230", Offset = "0x167A230", VA = "0x167A230")]
		public static extern bool ISteamGameServerUGC_ReleaseQueryUGCRequest(UGCQueryHandle_t handle);

		[PreserveSig]
		[Token(Token = "0x60003B0")]
		[Address(RVA = "0x167A2E0", Offset = "0x167A2E0", VA = "0x167A2E0")]
		public static extern bool ISteamGameServerUGC_AddRequiredTag(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pTagName);

		[PreserveSig]
		[Token(Token = "0x60003B1")]
		[Address(RVA = "0x167A304", Offset = "0x167A304", VA = "0x167A304")]
		public static extern bool ISteamGameServerUGC_AddExcludedTag(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pTagName);

		[PreserveSig]
		[Token(Token = "0x60003B2")]
		[Address(RVA = "0x167A328", Offset = "0x167A328", VA = "0x167A328")]
		public static extern bool ISteamGameServerUGC_SetReturnOnlyIDs(UGCQueryHandle_t handle, bool bReturnOnlyIDs);

		[PreserveSig]
		[Token(Token = "0x60003B3")]
		[Address(RVA = "0x167A3E0", Offset = "0x167A3E0", VA = "0x167A3E0")]
		public static extern bool ISteamGameServerUGC_SetReturnKeyValueTags(UGCQueryHandle_t handle, bool bReturnKeyValueTags);

		[PreserveSig]
		[Token(Token = "0x60003B4")]
		[Address(RVA = "0x167A498", Offset = "0x167A498", VA = "0x167A498")]
		public static extern bool ISteamGameServerUGC_SetReturnLongDescription(UGCQueryHandle_t handle, bool bReturnLongDescription);

		[PreserveSig]
		[Token(Token = "0x60003B5")]
		[Address(RVA = "0x167A550", Offset = "0x167A550", VA = "0x167A550")]
		public static extern bool ISteamGameServerUGC_SetReturnMetadata(UGCQueryHandle_t handle, bool bReturnMetadata);

		[PreserveSig]
		[Token(Token = "0x60003B6")]
		[Address(RVA = "0x167A608", Offset = "0x167A608", VA = "0x167A608")]
		public static extern bool ISteamGameServerUGC_SetReturnChildren(UGCQueryHandle_t handle, bool bReturnChildren);

		[PreserveSig]
		[Token(Token = "0x60003B7")]
		[Address(RVA = "0x167A6C0", Offset = "0x167A6C0", VA = "0x167A6C0")]
		public static extern bool ISteamGameServerUGC_SetReturnAdditionalPreviews(UGCQueryHandle_t handle, bool bReturnAdditionalPreviews);

		[PreserveSig]
		[Token(Token = "0x60003B8")]
		[Address(RVA = "0x167A778", Offset = "0x167A778", VA = "0x167A778")]
		public static extern bool ISteamGameServerUGC_SetReturnTotalOnly(UGCQueryHandle_t handle, bool bReturnTotalOnly);

		[PreserveSig]
		[Token(Token = "0x60003B9")]
		[Address(RVA = "0x167A830", Offset = "0x167A830", VA = "0x167A830")]
		public static extern bool ISteamGameServerUGC_SetReturnPlaytimeStats(UGCQueryHandle_t handle, uint unDays);

		[PreserveSig]
		[Token(Token = "0x60003BA")]
		[Address(RVA = "0x167A8E8", Offset = "0x167A8E8", VA = "0x167A8E8")]
		public static extern bool ISteamGameServerUGC_SetLanguage(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pchLanguage);

		[PreserveSig]
		[Token(Token = "0x60003BB")]
		[Address(RVA = "0x167A910", Offset = "0x167A910", VA = "0x167A910")]
		public static extern bool ISteamGameServerUGC_SetAllowCachedResponse(UGCQueryHandle_t handle, uint unMaxAgeSeconds);

		[PreserveSig]
		[Token(Token = "0x60003BC")]
		[Address(RVA = "0x167A9C8", Offset = "0x167A9C8", VA = "0x167A9C8")]
		public static extern bool ISteamGameServerUGC_SetCloudFileNameFilter(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pMatchCloudFileName);

		[PreserveSig]
		[Token(Token = "0x60003BD")]
		[Address(RVA = "0x167A9F0", Offset = "0x167A9F0", VA = "0x167A9F0")]
		public static extern bool ISteamGameServerUGC_SetMatchAnyTag(UGCQueryHandle_t handle, bool bMatchAnyTag);

		[PreserveSig]
		[Token(Token = "0x60003BE")]
		[Address(RVA = "0x167AAA8", Offset = "0x167AAA8", VA = "0x167AAA8")]
		public static extern bool ISteamGameServerUGC_SetSearchText(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pSearchText);

		[PreserveSig]
		[Token(Token = "0x60003BF")]
		[Address(RVA = "0x167AAD0", Offset = "0x167AAD0", VA = "0x167AAD0")]
		public static extern bool ISteamGameServerUGC_SetRankedByTrendDays(UGCQueryHandle_t handle, uint unDays);

		[PreserveSig]
		[Token(Token = "0x60003C0")]
		[Address(RVA = "0x167AB88", Offset = "0x167AB88", VA = "0x167AB88")]
		public static extern bool ISteamGameServerUGC_AddRequiredKeyValueTag(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pKey, InteropHelp.UTF8StringHandle pValue);

		[PreserveSig]
		[Token(Token = "0x60003C1")]
		[Address(RVA = "0x167ABB0", Offset = "0x167ABB0", VA = "0x167ABB0")]
		public static extern ulong ISteamGameServerUGC_RequestUGCDetails(PublishedFileId_t nPublishedFileID, uint unMaxAgeSeconds);

		[PreserveSig]
		[Token(Token = "0x60003C2")]
		[Address(RVA = "0x167AC60", Offset = "0x167AC60", VA = "0x167AC60")]
		public static extern ulong ISteamGameServerUGC_CreateItem(AppId_t nConsumerAppId, EWorkshopFileType eFileType);

		[PreserveSig]
		[Token(Token = "0x60003C3")]
		[Address(RVA = "0x167AD08", Offset = "0x167AD08", VA = "0x167AD08")]
		public static extern ulong ISteamGameServerUGC_StartItemUpdate(AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60003C4")]
		[Address(RVA = "0x167ADB8", Offset = "0x167ADB8", VA = "0x167ADB8")]
		public static extern bool ISteamGameServerUGC_SetItemTitle(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchTitle);

		[PreserveSig]
		[Token(Token = "0x60003C5")]
		[Address(RVA = "0x167ADDC", Offset = "0x167ADDC", VA = "0x167ADDC")]
		public static extern bool ISteamGameServerUGC_SetItemDescription(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchDescription);

		[PreserveSig]
		[Token(Token = "0x60003C6")]
		[Address(RVA = "0x167AE00", Offset = "0x167AE00", VA = "0x167AE00")]
		public static extern bool ISteamGameServerUGC_SetItemUpdateLanguage(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchLanguage);

		[PreserveSig]
		[Token(Token = "0x60003C7")]
		[Address(RVA = "0x167AE24", Offset = "0x167AE24", VA = "0x167AE24")]
		public static extern bool ISteamGameServerUGC_SetItemMetadata(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchMetaData);

		[PreserveSig]
		[Token(Token = "0x60003C8")]
		[Address(RVA = "0x167AE48", Offset = "0x167AE48", VA = "0x167AE48")]
		public static extern bool ISteamGameServerUGC_SetItemVisibility(UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility);

		[PreserveSig]
		[Token(Token = "0x60003C9")]
		[Address(RVA = "0x167AF00", Offset = "0x167AF00", VA = "0x167AF00")]
		public static extern bool ISteamGameServerUGC_SetItemTags(UGCUpdateHandle_t updateHandle, IntPtr pTags);

		[PreserveSig]
		[Token(Token = "0x60003CA")]
		[Address(RVA = "0x167AFB8", Offset = "0x167AFB8", VA = "0x167AFB8")]
		public static extern bool ISteamGameServerUGC_SetItemContent(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszContentFolder);

		[PreserveSig]
		[Token(Token = "0x60003CB")]
		[Address(RVA = "0x167AFDC", Offset = "0x167AFDC", VA = "0x167AFDC")]
		public static extern bool ISteamGameServerUGC_SetItemPreview(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszPreviewFile);

		[PreserveSig]
		[Token(Token = "0x60003CC")]
		[Address(RVA = "0x167B000", Offset = "0x167B000", VA = "0x167B000")]
		public static extern bool ISteamGameServerUGC_RemoveItemKeyValueTags(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x60003CD")]
		[Address(RVA = "0x167B024", Offset = "0x167B024", VA = "0x167B024")]
		public static extern bool ISteamGameServerUGC_AddItemKeyValueTag(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue);

		[PreserveSig]
		[Token(Token = "0x60003CE")]
		[Address(RVA = "0x167B048", Offset = "0x167B048", VA = "0x167B048")]
		public static extern bool ISteamGameServerUGC_AddItemPreviewFile(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszPreviewFile, EItemPreviewType type);

		[PreserveSig]
		[Token(Token = "0x60003CF")]
		[Address(RVA = "0x167B06C", Offset = "0x167B06C", VA = "0x167B06C")]
		public static extern bool ISteamGameServerUGC_AddItemPreviewVideo(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszVideoID);

		[PreserveSig]
		[Token(Token = "0x60003D0")]
		[Address(RVA = "0x167B090", Offset = "0x167B090", VA = "0x167B090")]
		public static extern bool ISteamGameServerUGC_UpdateItemPreviewFile(UGCUpdateHandle_t handle, uint index, InteropHelp.UTF8StringHandle pszPreviewFile);

		[PreserveSig]
		[Token(Token = "0x60003D1")]
		[Address(RVA = "0x167B0B4", Offset = "0x167B0B4", VA = "0x167B0B4")]
		public static extern bool ISteamGameServerUGC_UpdateItemPreviewVideo(UGCUpdateHandle_t handle, uint index, InteropHelp.UTF8StringHandle pszVideoID);

		[PreserveSig]
		[Token(Token = "0x60003D2")]
		[Address(RVA = "0x167B0D8", Offset = "0x167B0D8", VA = "0x167B0D8")]
		public static extern bool ISteamGameServerUGC_RemoveItemPreview(UGCUpdateHandle_t handle, uint index);

		[PreserveSig]
		[Token(Token = "0x60003D3")]
		[Address(RVA = "0x167B190", Offset = "0x167B190", VA = "0x167B190")]
		public static extern ulong ISteamGameServerUGC_SubmitItemUpdate(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchChangeNote);

		[PreserveSig]
		[Token(Token = "0x60003D4")]
		[Address(RVA = "0x167B1B8", Offset = "0x167B1B8", VA = "0x167B1B8")]
		public static extern EItemUpdateStatus ISteamGameServerUGC_GetItemUpdateProgress(UGCUpdateHandle_t handle, out ulong punBytesProcessed, out ulong punBytesTotal);

		[PreserveSig]
		[Token(Token = "0x60003D5")]
		[Address(RVA = "0x167B270", Offset = "0x167B270", VA = "0x167B270")]
		public static extern ulong ISteamGameServerUGC_SetUserItemVote(PublishedFileId_t nPublishedFileID, bool bVoteUp);

		[PreserveSig]
		[Token(Token = "0x60003D6")]
		[Address(RVA = "0x167B320", Offset = "0x167B320", VA = "0x167B320")]
		public static extern ulong ISteamGameServerUGC_GetUserItemVote(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60003D7")]
		[Address(RVA = "0x167B3C8", Offset = "0x167B3C8", VA = "0x167B3C8")]
		public static extern ulong ISteamGameServerUGC_AddItemToFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60003D8")]
		[Address(RVA = "0x167B478", Offset = "0x167B478", VA = "0x167B478")]
		public static extern ulong ISteamGameServerUGC_RemoveItemFromFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60003D9")]
		[Address(RVA = "0x167B528", Offset = "0x167B528", VA = "0x167B528")]
		public static extern ulong ISteamGameServerUGC_SubscribeItem(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60003DA")]
		[Address(RVA = "0x167B5D0", Offset = "0x167B5D0", VA = "0x167B5D0")]
		public static extern ulong ISteamGameServerUGC_UnsubscribeItem(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60003DB")]
		[Address(RVA = "0x167B678", Offset = "0x167B678", VA = "0x167B678")]
		public static extern uint ISteamGameServerUGC_GetNumSubscribedItems();

		[PreserveSig]
		[Token(Token = "0x60003DC")]
		[Address(RVA = "0x167B710", Offset = "0x167B710", VA = "0x167B710")]
		public static extern uint ISteamGameServerUGC_GetSubscribedItems([In][Out] PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries);

		[PreserveSig]
		[Token(Token = "0x60003DD")]
		[Address(RVA = "0x167B7C0", Offset = "0x167B7C0", VA = "0x167B7C0")]
		public static extern uint ISteamGameServerUGC_GetItemState(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60003DE")]
		[Address(RVA = "0x167B868", Offset = "0x167B868", VA = "0x167B868")]
		public static extern bool ISteamGameServerUGC_GetItemInstallInfo(PublishedFileId_t nPublishedFileID, out ulong punSizeOnDisk, IntPtr pchFolder, uint cchFolderSize, out uint punTimeStamp);

		[PreserveSig]
		[Token(Token = "0x60003DF")]
		[Address(RVA = "0x167B938", Offset = "0x167B938", VA = "0x167B938")]
		public static extern bool ISteamGameServerUGC_GetItemDownloadInfo(PublishedFileId_t nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal);

		[PreserveSig]
		[Token(Token = "0x60003E0")]
		[Address(RVA = "0x167B9F8", Offset = "0x167B9F8", VA = "0x167B9F8")]
		public static extern bool ISteamGameServerUGC_DownloadItem(PublishedFileId_t nPublishedFileID, bool bHighPriority);

		[PreserveSig]
		[Token(Token = "0x60003E1")]
		[Address(RVA = "0x167BAB0", Offset = "0x167BAB0", VA = "0x167BAB0")]
		public static extern bool ISteamGameServerUGC_BInitWorkshopForGameServer(DepotId_t unWorkshopDepotID, InteropHelp.UTF8StringHandle pszFolder);

		[PreserveSig]
		[Token(Token = "0x60003E2")]
		[Address(RVA = "0x167BAD8", Offset = "0x167BAD8", VA = "0x167BAD8")]
		public static extern void ISteamGameServerUGC_SuspendDownloads(bool bSuspend);

		[PreserveSig]
		[Token(Token = "0x60003E3")]
		[Address(RVA = "0x167BB78", Offset = "0x167BB78", VA = "0x167BB78")]
		public static extern ulong ISteamGameServerUGC_StartPlaytimeTracking([In][Out] PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs);

		[PreserveSig]
		[Token(Token = "0x60003E4")]
		[Address(RVA = "0x167BC28", Offset = "0x167BC28", VA = "0x167BC28")]
		public static extern ulong ISteamGameServerUGC_StopPlaytimeTracking([In][Out] PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs);

		[PreserveSig]
		[Token(Token = "0x60003E5")]
		[Address(RVA = "0x167BCD8", Offset = "0x167BCD8", VA = "0x167BCD8")]
		public static extern ulong ISteamGameServerUGC_StopPlaytimeTrackingForAllItems();

		[PreserveSig]
		[Token(Token = "0x60003E6")]
		[Address(RVA = "0x167BD70", Offset = "0x167BD70", VA = "0x167BD70")]
		public static extern ulong ISteamGameServerUGC_AddDependency(PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60003E7")]
		[Address(RVA = "0x167BE28", Offset = "0x167BE28", VA = "0x167BE28")]
		public static extern ulong ISteamGameServerUGC_RemoveDependency(PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60003E8")]
		[Address(RVA = "0x167BEE0", Offset = "0x167BEE0", VA = "0x167BEE0")]
		public static extern uint ISteamGameServerUtils_GetSecondsSinceAppActive();

		[PreserveSig]
		[Token(Token = "0x60003E9")]
		[Address(RVA = "0x167BF78", Offset = "0x167BF78", VA = "0x167BF78")]
		public static extern uint ISteamGameServerUtils_GetSecondsSinceComputerActive();

		[PreserveSig]
		[Token(Token = "0x60003EA")]
		[Address(RVA = "0x167C010", Offset = "0x167C010", VA = "0x167C010")]
		public static extern EUniverse ISteamGameServerUtils_GetConnectedUniverse();

		[PreserveSig]
		[Token(Token = "0x60003EB")]
		[Address(RVA = "0x167C0A8", Offset = "0x167C0A8", VA = "0x167C0A8")]
		public static extern uint ISteamGameServerUtils_GetServerRealTime();

		[PreserveSig]
		[Token(Token = "0x60003EC")]
		[Address(RVA = "0x167C140", Offset = "0x167C140", VA = "0x167C140")]
		public static extern IntPtr ISteamGameServerUtils_GetIPCountry();

		[PreserveSig]
		[Token(Token = "0x60003ED")]
		[Address(RVA = "0x167C1D8", Offset = "0x167C1D8", VA = "0x167C1D8")]
		public static extern bool ISteamGameServerUtils_GetImageSize(int iImage, out uint pnWidth, out uint pnHeight);

		[PreserveSig]
		[Token(Token = "0x60003EE")]
		[Address(RVA = "0x167C290", Offset = "0x167C290", VA = "0x167C290")]
		public static extern bool ISteamGameServerUtils_GetImageRGBA(int iImage, byte[] pubDest, int nDestBufferSize);

		[PreserveSig]
		[Token(Token = "0x60003EF")]
		[Address(RVA = "0x167C350", Offset = "0x167C350", VA = "0x167C350")]
		public static extern bool ISteamGameServerUtils_GetCSERIPPort(out uint unIP, out ushort usPort);

		[PreserveSig]
		[Token(Token = "0x60003F0")]
		[Address(RVA = "0x167C400", Offset = "0x167C400", VA = "0x167C400")]
		public static extern byte ISteamGameServerUtils_GetCurrentBatteryPower();

		[PreserveSig]
		[Token(Token = "0x60003F1")]
		[Address(RVA = "0x167C498", Offset = "0x167C498", VA = "0x167C498")]
		public static extern uint ISteamGameServerUtils_GetAppID();

		[PreserveSig]
		[Token(Token = "0x60003F2")]
		[Address(RVA = "0x167C530", Offset = "0x167C530", VA = "0x167C530")]
		public static extern void ISteamGameServerUtils_SetOverlayNotificationPosition(ENotificationPosition eNotificationPosition);

		[PreserveSig]
		[Token(Token = "0x60003F3")]
		[Address(RVA = "0x167C5D0", Offset = "0x167C5D0", VA = "0x167C5D0")]
		public static extern bool ISteamGameServerUtils_IsAPICallCompleted(SteamAPICall_t hSteamAPICall, out bool pbFailed);

		[PreserveSig]
		[Token(Token = "0x60003F4")]
		[Address(RVA = "0x167C6A0", Offset = "0x167C6A0", VA = "0x167C6A0")]
		public static extern ESteamAPICallFailure ISteamGameServerUtils_GetAPICallFailureReason(SteamAPICall_t hSteamAPICall);

		[PreserveSig]
		[Token(Token = "0x60003F5")]
		[Address(RVA = "0x167C748", Offset = "0x167C748", VA = "0x167C748")]
		public static extern bool ISteamGameServerUtils_GetAPICallResult(SteamAPICall_t hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, out bool pbFailed);

		[PreserveSig]
		[Token(Token = "0x60003F6")]
		[Address(RVA = "0x167C838", Offset = "0x167C838", VA = "0x167C838")]
		public static extern uint ISteamGameServerUtils_GetIPCCallCount();

		[PreserveSig]
		[Token(Token = "0x60003F7")]
		[Address(RVA = "0x167C8D0", Offset = "0x167C8D0", VA = "0x167C8D0")]
		public static extern void ISteamGameServerUtils_SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction);

		[PreserveSig]
		[Token(Token = "0x60003F8")]
		[Address(RVA = "0x167C980", Offset = "0x167C980", VA = "0x167C980")]
		public static extern bool ISteamGameServerUtils_IsOverlayEnabled();

		[PreserveSig]
		[Token(Token = "0x60003F9")]
		[Address(RVA = "0x167CA20", Offset = "0x167CA20", VA = "0x167CA20")]
		public static extern bool ISteamGameServerUtils_BOverlayNeedsPresent();

		[PreserveSig]
		[Token(Token = "0x60003FA")]
		[Address(RVA = "0x167CAC0", Offset = "0x167CAC0", VA = "0x167CAC0")]
		public static extern ulong ISteamGameServerUtils_CheckFileSignature(InteropHelp.UTF8StringHandle szFileName);

		[PreserveSig]
		[Token(Token = "0x60003FB")]
		[Address(RVA = "0x167CAE4", Offset = "0x167CAE4", VA = "0x167CAE4")]
		public static extern bool ISteamGameServerUtils_ShowGamepadTextInput(EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, InteropHelp.UTF8StringHandle pchDescription, uint unCharMax, InteropHelp.UTF8StringHandle pchExistingText);

		[PreserveSig]
		[Token(Token = "0x60003FC")]
		[Address(RVA = "0x167CB08", Offset = "0x167CB08", VA = "0x167CB08")]
		public static extern uint ISteamGameServerUtils_GetEnteredGamepadTextLength();

		[PreserveSig]
		[Token(Token = "0x60003FD")]
		[Address(RVA = "0x167CBA0", Offset = "0x167CBA0", VA = "0x167CBA0")]
		public static extern bool ISteamGameServerUtils_GetEnteredGamepadTextInput(IntPtr pchText, uint cchText);

		[PreserveSig]
		[Token(Token = "0x60003FE")]
		[Address(RVA = "0x167CC50", Offset = "0x167CC50", VA = "0x167CC50")]
		public static extern IntPtr ISteamGameServerUtils_GetSteamUILanguage();

		[PreserveSig]
		[Token(Token = "0x60003FF")]
		[Address(RVA = "0x167CCE8", Offset = "0x167CCE8", VA = "0x167CCE8")]
		public static extern bool ISteamGameServerUtils_IsSteamRunningInVR();

		[PreserveSig]
		[Token(Token = "0x6000400")]
		[Address(RVA = "0x167CD88", Offset = "0x167CD88", VA = "0x167CD88")]
		public static extern void ISteamGameServerUtils_SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset);

		[PreserveSig]
		[Token(Token = "0x6000401")]
		[Address(RVA = "0x167CE30", Offset = "0x167CE30", VA = "0x167CE30")]
		public static extern bool ISteamGameServerUtils_IsSteamInBigPictureMode();

		[PreserveSig]
		[Token(Token = "0x6000402")]
		[Address(RVA = "0x167CED0", Offset = "0x167CED0", VA = "0x167CED0")]
		public static extern void ISteamGameServerUtils_StartVRDashboard();

		[PreserveSig]
		[Token(Token = "0x6000403")]
		[Address(RVA = "0x167CF68", Offset = "0x167CF68", VA = "0x167CF68")]
		public static extern bool ISteamGameServerUtils_IsVRHeadsetStreamingEnabled();

		[PreserveSig]
		[Token(Token = "0x6000404")]
		[Address(RVA = "0x167D008", Offset = "0x167D008", VA = "0x167D008")]
		public static extern void ISteamGameServerUtils_SetVRHeadsetStreamingEnabled(bool bEnabled);
	}
	[Token(Token = "0x2000025")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395070", Offset = "0x395070")]
	public struct SteamAppInstalled_t
	{
		[Token(Token = "0x4000068")]
		public const int k_iCallback = 3901;

		[Token(Token = "0x4000069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x2000026")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395084", Offset = "0x395084")]
	public struct SteamAppUninstalled_t
	{
		[Token(Token = "0x400006A")]
		public const int k_iCallback = 3902;

		[Token(Token = "0x400006B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x2000027")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395098", Offset = "0x395098")]
	public struct DlcInstalled_t
	{
		[Token(Token = "0x400006C")]
		public const int k_iCallback = 1005;

		[Token(Token = "0x400006D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x2000028")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3950AC", Offset = "0x3950AC")]
	public struct RegisterActivationCodeResponse_t
	{
		[Token(Token = "0x400006E")]
		public const int k_iCallback = 1008;

		[Token(Token = "0x400006F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ERegisterActivationCodeResult m_eResult;

		[Token(Token = "0x4000070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_unPackageRegistered;
	}
	[Token(Token = "0x2000029")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3950C0", Offset = "0x3950C0")]
	public struct NewLaunchQueryParameters_t
	{
		[Token(Token = "0x4000071")]
		public const int k_iCallback = 1014;
	}
	[Token(Token = "0x200002A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3950D4", Offset = "0x3950D4")]
	public struct AppProofOfPurchaseKeyResponse_t
	{
		[Token(Token = "0x4000072")]
		public const int k_iCallback = 1021;

		[Token(Token = "0x4000073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_nAppID;

		[Token(Token = "0x4000075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_cchKeyLength;

		[Token(Token = "0x4000076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string m_rgchKey;
	}
	[Token(Token = "0x200002B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3950E8", Offset = "0x3950E8")]
	public struct FileDetailsResult_t
	{
		[Token(Token = "0x4000077")]
		public const int k_iCallback = 1023;

		[Token(Token = "0x4000078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulFileSize;

		[Token(Token = "0x400007A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte[] m_FileSHA;

		[Token(Token = "0x400007B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint m_unFlags;
	}
	[Token(Token = "0x200002C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3950FC", Offset = "0x3950FC")]
	public struct PersonaStateChange_t
	{
		[Token(Token = "0x400007C")]
		public const int k_iCallback = 304;

		[Token(Token = "0x400007D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamID;

		[Token(Token = "0x400007E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EPersonaChange m_nChangeFlags;
	}
	[Token(Token = "0x200002D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395110", Offset = "0x395110")]
	public struct GameOverlayActivated_t
	{
		[Token(Token = "0x400007F")]
		public const int k_iCallback = 331;

		[Token(Token = "0x4000080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_bActive;
	}
	[Token(Token = "0x200002E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395124", Offset = "0x395124")]
	public struct GameServerChangeRequested_t
	{
		[Token(Token = "0x4000081")]
		public const int k_iCallback = 332;

		[Token(Token = "0x4000082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string m_rgchServer;

		[Token(Token = "0x4000083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public string m_rgchPassword;
	}
	[Token(Token = "0x200002F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395138", Offset = "0x395138")]
	public struct GameLobbyJoinRequested_t
	{
		[Token(Token = "0x4000084")]
		public const int k_iCallback = 333;

		[Token(Token = "0x4000085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDLobby;

		[Token(Token = "0x4000086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_steamIDFriend;
	}
	[Token(Token = "0x2000030")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x39514C", Offset = "0x39514C")]
	public struct AvatarImageLoaded_t
	{
		[Token(Token = "0x4000087")]
		public const int k_iCallback = 334;

		[Token(Token = "0x4000088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamID;

		[Token(Token = "0x4000089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_iImage;

		[Token(Token = "0x400008A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_iWide;

		[Token(Token = "0x400008B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_iTall;
	}
	[Token(Token = "0x2000031")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395160", Offset = "0x395160")]
	public struct ClanOfficerListResponse_t
	{
		[Token(Token = "0x400008C")]
		public const int k_iCallback = 335;

		[Token(Token = "0x400008D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDClan;

		[Token(Token = "0x400008E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_cOfficers;

		[Token(Token = "0x400008F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public byte m_bSuccess;
	}
	[Token(Token = "0x2000032")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395174", Offset = "0x395174")]
	public struct FriendRichPresenceUpdate_t
	{
		[Token(Token = "0x4000090")]
		public const int k_iCallback = 336;

		[Token(Token = "0x4000091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDFriend;

		[Token(Token = "0x4000092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x2000033")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395188", Offset = "0x395188")]
	public struct GameRichPresenceJoinRequested_t
	{
		[Token(Token = "0x4000093")]
		public const int k_iCallback = 337;

		[Token(Token = "0x4000094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDFriend;

		[Token(Token = "0x4000095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_rgchConnect;
	}
	[Token(Token = "0x2000034")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x39519C", Offset = "0x39519C")]
	public struct GameConnectedClanChatMsg_t
	{
		[Token(Token = "0x4000096")]
		public const int k_iCallback = 338;

		[Token(Token = "0x4000097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDClanChat;

		[Token(Token = "0x4000098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_steamIDUser;

		[Token(Token = "0x4000099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_iMessageID;
	}
	[Token(Token = "0x2000035")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3951B0", Offset = "0x3951B0")]
	public struct GameConnectedChatJoin_t
	{
		[Token(Token = "0x400009A")]
		public const int k_iCallback = 339;

		[Token(Token = "0x400009B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDClanChat;

		[Token(Token = "0x400009C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x2000036")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3951C4", Offset = "0x3951C4")]
	public struct GameConnectedChatLeave_t
	{
		[Token(Token = "0x400009D")]
		public const int k_iCallback = 340;

		[Token(Token = "0x400009E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDClanChat;

		[Token(Token = "0x400009F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_steamIDUser;

		[Token(Token = "0x40000A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bKicked;

		[Token(Token = "0x40000A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool m_bDropped;
	}
	[Token(Token = "0x2000037")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3951D8", Offset = "0x3951D8")]
	public struct DownloadClanActivityCountsResult_t
	{
		[Token(Token = "0x40000A2")]
		public const int k_iCallback = 341;

		[Token(Token = "0x40000A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool m_bSuccess;
	}
	[Token(Token = "0x2000038")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3951EC", Offset = "0x3951EC")]
	public struct JoinClanChatRoomCompletionResult_t
	{
		[Token(Token = "0x40000A4")]
		public const int k_iCallback = 342;

		[Token(Token = "0x40000A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDClanChat;

		[Token(Token = "0x40000A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EChatRoomEnterResponse m_eChatRoomEnterResponse;
	}
	[Token(Token = "0x2000039")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395200", Offset = "0x395200")]
	public struct GameConnectedFriendChatMsg_t
	{
		[Token(Token = "0x40000A7")]
		public const int k_iCallback = 343;

		[Token(Token = "0x40000A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDUser;

		[Token(Token = "0x40000A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_iMessageID;
	}
	[Token(Token = "0x200003A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395214", Offset = "0x395214")]
	public struct FriendsGetFollowerCount_t
	{
		[Token(Token = "0x40000AA")]
		public const int k_iCallback = 344;

		[Token(Token = "0x40000AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40000AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public CSteamID m_steamID;

		[Token(Token = "0x40000AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_nCount;
	}
	[Token(Token = "0x200003B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395228", Offset = "0x395228")]
	public struct FriendsIsFollowing_t
	{
		[Token(Token = "0x40000AE")]
		public const int k_iCallback = 345;

		[Token(Token = "0x40000AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40000B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public CSteamID m_steamID;

		[Token(Token = "0x40000B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bIsFollowing;
	}
	[Token(Token = "0x200003C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x39523C", Offset = "0x39523C")]
	public struct FriendsEnumerateFollowingList_t
	{
		[Token(Token = "0x40000B2")]
		public const int k_iCallback = 346;

		[Token(Token = "0x40000B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40000B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public CSteamID[] m_rgSteamID;

		[Token(Token = "0x40000B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nResultsReturned;

		[Token(Token = "0x40000B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_nTotalResultCount;
	}
	[Token(Token = "0x200003D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395250", Offset = "0x395250")]
	public struct SetPersonaNameResponse_t
	{
		[Token(Token = "0x40000B7")]
		public const int k_iCallback = 347;

		[Token(Token = "0x40000B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool m_bSuccess;

		[Token(Token = "0x40000B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public bool m_bLocalSuccess;

		[Token(Token = "0x40000BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_result;
	}
	[Token(Token = "0x200003E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395264", Offset = "0x395264")]
	public struct GCMessageAvailable_t
	{
		[Token(Token = "0x40000BB")]
		public const int k_iCallback = 1701;

		[Token(Token = "0x40000BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nMessageSize;
	}
	[Token(Token = "0x200003F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395278", Offset = "0x395278")]
	public struct GCMessageFailed_t
	{
		[Token(Token = "0x40000BD")]
		public const int k_iCallback = 1702;
	}
	[Token(Token = "0x2000040")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x39528C", Offset = "0x39528C")]
	public struct GSClientApprove_t
	{
		[Token(Token = "0x40000BE")]
		public const int k_iCallback = 201;

		[Token(Token = "0x40000BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_SteamID;

		[Token(Token = "0x40000C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_OwnerSteamID;
	}
	[Token(Token = "0x2000041")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3952A0", Offset = "0x3952A0")]
	public struct GSClientDeny_t
	{
		[Token(Token = "0x40000C1")]
		public const int k_iCallback = 202;

		[Token(Token = "0x40000C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_SteamID;

		[Token(Token = "0x40000C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EDenyReason m_eDenyReason;

		[Token(Token = "0x40000C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string m_rgchOptionalText;
	}
	[Token(Token = "0x2000042")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3952B4", Offset = "0x3952B4")]
	public struct GSClientKick_t
	{
		[Token(Token = "0x40000C5")]
		public const int k_iCallback = 203;

		[Token(Token = "0x40000C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_SteamID;

		[Token(Token = "0x40000C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EDenyReason m_eDenyReason;
	}
	[Token(Token = "0x2000043")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3952C8", Offset = "0x3952C8")]
	public struct GSClientAchievementStatus_t
	{
		[Token(Token = "0x40000C8")]
		public const int k_iCallback = 206;

		[Token(Token = "0x40000C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamID;

		[Token(Token = "0x40000CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_pchAchievement;

		[Token(Token = "0x40000CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bUnlocked;
	}
	[Token(Token = "0x2000044")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3952DC", Offset = "0x3952DC")]
	public struct GSPolicyResponse_t
	{
		[Token(Token = "0x40000CC")]
		public const int k_iCallback = 115;

		[Token(Token = "0x40000CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_bSecure;
	}
	[Token(Token = "0x2000045")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3952F0", Offset = "0x3952F0")]
	public struct GSGameplayStats_t
	{
		[Token(Token = "0x40000CE")]
		public const int k_iCallback = 207;

		[Token(Token = "0x40000CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40000D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nRank;

		[Token(Token = "0x40000D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_unTotalConnects;

		[Token(Token = "0x40000D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_unTotalMinutesPlayed;
	}
	[Token(Token = "0x2000046")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395304", Offset = "0x395304")]
	public struct GSClientGroupStatus_t
	{
		[Token(Token = "0x40000D3")]
		public const int k_iCallback = 208;

		[Token(Token = "0x40000D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_SteamIDUser;

		[Token(Token = "0x40000D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_SteamIDGroup;

		[Token(Token = "0x40000D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bMember;

		[Token(Token = "0x40000D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool m_bOfficer;
	}
	[Token(Token = "0x2000047")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395318", Offset = "0x395318")]
	public struct GSReputation_t
	{
		[Token(Token = "0x40000D8")]
		public const int k_iCallback = 209;

		[Token(Token = "0x40000D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40000DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_unReputationScore;

		[Token(Token = "0x40000DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool m_bBanned;

		[Token(Token = "0x40000DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_unBannedIP;

		[Token(Token = "0x40000DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ushort m_usBannedPort;

		[Token(Token = "0x40000DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public ulong m_ulBannedGameID;

		[Token(Token = "0x40000DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint m_unBanExpires;
	}
	[Token(Token = "0x2000048")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x39532C", Offset = "0x39532C")]
	public struct AssociateWithClanResult_t
	{
		[Token(Token = "0x40000E0")]
		public const int k_iCallback = 210;

		[Token(Token = "0x40000E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000049")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395340", Offset = "0x395340")]
	public struct ComputeNewPlayerCompatibilityResult_t
	{
		[Token(Token = "0x40000E2")]
		public const int k_iCallback = 211;

		[Token(Token = "0x40000E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40000E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_cPlayersThatDontLikeCandidate;

		[Token(Token = "0x40000E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_cPlayersThatCandidateDoesntLike;

		[Token(Token = "0x40000E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_cClanPlayersThatDontLikeCandidate;

		[Token(Token = "0x40000E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CSteamID m_SteamIDCandidate;
	}
	[Token(Token = "0x200004A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395354", Offset = "0x395354")]
	public struct GSStatsReceived_t
	{
		[Token(Token = "0x40000E8")]
		public const int k_iCallback = 1800;

		[Token(Token = "0x40000E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40000EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x200004B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395368", Offset = "0x395368")]
	public struct GSStatsStored_t
	{
		[Token(Token = "0x40000EB")]
		public const int k_iCallback = 1801;

		[Token(Token = "0x40000EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40000ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x200004C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x39537C", Offset = "0x39537C")]
	public struct GSStatsUnloaded_t
	{
		[Token(Token = "0x40000EE")]
		public const int k_iCallback = 1108;

		[Token(Token = "0x40000EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x200004D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395390", Offset = "0x395390")]
	public struct HTML_BrowserReady_t
	{
		[Token(Token = "0x40000F0")]
		public const int k_iCallback = 4501;

		[Token(Token = "0x40000F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;
	}
	[Token(Token = "0x200004E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3953A4", Offset = "0x3953A4")]
	public struct HTML_NeedsPaint_t
	{
		[Token(Token = "0x40000F2")]
		public const int k_iCallback = 4502;

		[Token(Token = "0x40000F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x40000F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public IntPtr pBGRA;

		[Token(Token = "0x40000F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unWide;

		[Token(Token = "0x40000F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint unTall;

		[Token(Token = "0x40000F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint unUpdateX;

		[Token(Token = "0x40000F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint unUpdateY;

		[Token(Token = "0x40000F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint unUpdateWide;

		[Token(Token = "0x40000FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint unUpdateTall;

		[Token(Token = "0x40000FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public uint unScrollX;

		[Token(Token = "0x40000FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public uint unScrollY;

		[Token(Token = "0x40000FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float flPageScale;

		[Token(Token = "0x40000FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public uint unPageSerial;
	}
	[Token(Token = "0x200004F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3953B8", Offset = "0x3953B8")]
	public struct HTML_StartRequest_t
	{
		[Token(Token = "0x40000FF")]
		public const int k_iCallback = 4503;

		[Token(Token = "0x4000100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public string pchURL;

		[Token(Token = "0x4000102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchTarget;

		[Token(Token = "0x4000103")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string pchPostData;

		[Token(Token = "0x4000104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool bIsRedirect;
	}
	[Token(Token = "0x2000050")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3953CC", Offset = "0x3953CC")]
	public struct HTML_CloseBrowser_t
	{
		[Token(Token = "0x4000105")]
		public const int k_iCallback = 4504;

		[Token(Token = "0x4000106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;
	}
	[Token(Token = "0x2000051")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3953E0", Offset = "0x3953E0")]
	public struct HTML_URLChanged_t
	{
		[Token(Token = "0x4000107")]
		public const int k_iCallback = 4505;

		[Token(Token = "0x4000108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public string pchURL;

		[Token(Token = "0x400010A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchPostData;

		[Token(Token = "0x400010B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool bIsRedirect;

		[Token(Token = "0x400010C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string pchPageTitle;

		[Token(Token = "0x400010D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool bNewNavigation;
	}
	[Token(Token = "0x2000052")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3953F4", Offset = "0x3953F4")]
	public struct HTML_FinishedRequest_t
	{
		[Token(Token = "0x400010E")]
		public const int k_iCallback = 4506;

		[Token(Token = "0x400010F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public string pchURL;

		[Token(Token = "0x4000111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchPageTitle;
	}
	[Token(Token = "0x2000053")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395408", Offset = "0x395408")]
	public struct HTML_OpenLinkInNewTab_t
	{
		[Token(Token = "0x4000112")]
		public const int k_iCallback = 4507;

		[Token(Token = "0x4000113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public string pchURL;
	}
	[Token(Token = "0x2000054")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x39541C", Offset = "0x39541C")]
	public struct HTML_ChangedTitle_t
	{
		[Token(Token = "0x4000115")]
		public const int k_iCallback = 4508;

		[Token(Token = "0x4000116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public string pchTitle;
	}
	[Token(Token = "0x2000055")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395430", Offset = "0x395430")]
	public struct HTML_SearchResults_t
	{
		[Token(Token = "0x4000118")]
		public const int k_iCallback = 4509;

		[Token(Token = "0x4000119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x400011A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint unResults;

		[Token(Token = "0x400011B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unCurrentMatch;
	}
	[Token(Token = "0x2000056")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395444", Offset = "0x395444")]
	public struct HTML_CanGoBackAndForward_t
	{
		[Token(Token = "0x400011C")]
		public const int k_iCallback = 4510;

		[Token(Token = "0x400011D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x400011E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public bool bCanGoBack;

		[Token(Token = "0x400011F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
		public bool bCanGoForward;
	}
	[Token(Token = "0x2000057")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395458", Offset = "0x395458")]
	public struct HTML_HorizontalScroll_t
	{
		[Token(Token = "0x4000120")]
		public const int k_iCallback = 4511;

		[Token(Token = "0x4000121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint unScrollMax;

		[Token(Token = "0x4000123")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unScrollCurrent;

		[Token(Token = "0x4000124")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float flPageScale;

		[Token(Token = "0x4000125")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool bVisible;

		[Token(Token = "0x4000126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint unPageSize;
	}
	[Token(Token = "0x2000058")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x39546C", Offset = "0x39546C")]
	public struct HTML_VerticalScroll_t
	{
		[Token(Token = "0x4000127")]
		public const int k_iCallback = 4512;

		[Token(Token = "0x4000128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint unScrollMax;

		[Token(Token = "0x400012A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unScrollCurrent;

		[Token(Token = "0x400012B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float flPageScale;

		[Token(Token = "0x400012C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool bVisible;

		[Token(Token = "0x400012D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint unPageSize;
	}
	[Token(Token = "0x2000059")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395480", Offset = "0x395480")]
	public struct HTML_LinkAtPosition_t
	{
		[Token(Token = "0x400012E")]
		public const int k_iCallback = 4513;

		[Token(Token = "0x400012F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint x;

		[Token(Token = "0x4000131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint y;

		[Token(Token = "0x4000132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string pchURL;

		[Token(Token = "0x4000133")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool bInput;

		[Token(Token = "0x4000134")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool bLiveLink;
	}
	[Token(Token = "0x200005A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395494", Offset = "0x395494")]
	public struct HTML_JSAlert_t
	{
		[Token(Token = "0x4000135")]
		public const int k_iCallback = 4514;

		[Token(Token = "0x4000136")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public string pchMessage;
	}
	[Token(Token = "0x200005B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3954A8", Offset = "0x3954A8")]
	public struct HTML_JSConfirm_t
	{
		[Token(Token = "0x4000138")]
		public const int k_iCallback = 4515;

		[Token(Token = "0x4000139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x400013A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public string pchMessage;
	}
	[Token(Token = "0x200005C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3954BC", Offset = "0x3954BC")]
	public struct HTML_FileOpenDialog_t
	{
		[Token(Token = "0x400013B")]
		public const int k_iCallback = 4516;

		[Token(Token = "0x400013C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x400013D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public string pchTitle;

		[Token(Token = "0x400013E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchInitialFile;
	}
	[Token(Token = "0x200005D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3954D0", Offset = "0x3954D0")]
	public struct HTML_NewWindow_t
	{
		[Token(Token = "0x400013F")]
		public const int k_iCallback = 4521;

		[Token(Token = "0x4000140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public string pchURL;

		[Token(Token = "0x4000142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unX;

		[Token(Token = "0x4000143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint unY;

		[Token(Token = "0x4000144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint unWide;

		[Token(Token = "0x4000145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint unTall;

		[Token(Token = "0x4000146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HHTMLBrowser unNewWindow_BrowserHandle;
	}
	[Token(Token = "0x200005E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3954E4", Offset = "0x3954E4")]
	public struct HTML_SetCursor_t
	{
		[Token(Token = "0x4000147")]
		public const int k_iCallback = 4522;

		[Token(Token = "0x4000148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint eMouseCursor;
	}
	[Token(Token = "0x200005F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3954F8", Offset = "0x3954F8")]
	public struct HTML_StatusText_t
	{
		[Token(Token = "0x400014A")]
		public const int k_iCallback = 4523;

		[Token(Token = "0x400014B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x400014C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public string pchMsg;
	}
	[Token(Token = "0x2000060")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x39550C", Offset = "0x39550C")]
	public struct HTML_ShowToolTip_t
	{
		[Token(Token = "0x400014D")]
		public const int k_iCallback = 4524;

		[Token(Token = "0x400014E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x400014F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public string pchMsg;
	}
	[Token(Token = "0x2000061")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395520", Offset = "0x395520")]
	public struct HTML_UpdateToolTip_t
	{
		[Token(Token = "0x4000150")]
		public const int k_iCallback = 4525;

		[Token(Token = "0x4000151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public string pchMsg;
	}
	[Token(Token = "0x2000062")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395534", Offset = "0x395534")]
	public struct HTML_HideToolTip_t
	{
		[Token(Token = "0x4000153")]
		public const int k_iCallback = 4526;

		[Token(Token = "0x4000154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;
	}
	[Token(Token = "0x2000063")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395548", Offset = "0x395548")]
	public struct HTTPRequestCompleted_t
	{
		[Token(Token = "0x4000155")]
		public const int k_iCallback = 2101;

		[Token(Token = "0x4000156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HTTPRequestHandle m_hRequest;

		[Token(Token = "0x4000157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ulong m_ulContextValue;

		[Token(Token = "0x4000158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bRequestSuccessful;

		[Token(Token = "0x4000159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public EHTTPStatusCode m_eStatusCode;

		[Token(Token = "0x400015A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint m_unBodySize;
	}
	[Token(Token = "0x2000064")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x39555C", Offset = "0x39555C")]
	public struct HTTPRequestHeadersReceived_t
	{
		[Token(Token = "0x400015B")]
		public const int k_iCallback = 2102;

		[Token(Token = "0x400015C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HTTPRequestHandle m_hRequest;

		[Token(Token = "0x400015D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ulong m_ulContextValue;
	}
	[Token(Token = "0x2000065")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395570", Offset = "0x395570")]
	public struct HTTPRequestDataReceived_t
	{
		[Token(Token = "0x400015E")]
		public const int k_iCallback = 2103;

		[Token(Token = "0x400015F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HTTPRequestHandle m_hRequest;

		[Token(Token = "0x4000160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ulong m_ulContextValue;

		[Token(Token = "0x4000161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_cOffset;

		[Token(Token = "0x4000162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_cBytesReceived;
	}
	[Token(Token = "0x2000066")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395584", Offset = "0x395584")]
	public struct SteamInventoryResultReady_t
	{
		[Token(Token = "0x4000163")]
		public const int k_iCallback = 4700;

		[Token(Token = "0x4000164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamInventoryResult_t m_handle;

		[Token(Token = "0x4000165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_result;
	}
	[Token(Token = "0x2000067")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395598", Offset = "0x395598")]
	public struct SteamInventoryFullUpdate_t
	{
		[Token(Token = "0x4000166")]
		public const int k_iCallback = 4701;

		[Token(Token = "0x4000167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamInventoryResult_t m_handle;
	}
	[Token(Token = "0x2000068")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3955AC", Offset = "0x3955AC")]
	public struct SteamInventoryDefinitionUpdate_t
	{
		[Token(Token = "0x4000168")]
		public const int k_iCallback = 4702;
	}
	[Token(Token = "0x2000069")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3955C0", Offset = "0x3955C0")]
	public struct SteamInventoryEligiblePromoItemDefIDs_t
	{
		[Token(Token = "0x4000169")]
		public const int k_iCallback = 4703;

		[Token(Token = "0x400016A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_result;

		[Token(Token = "0x400016B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public CSteamID m_steamID;

		[Token(Token = "0x400016C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_numEligiblePromoItemDefs;

		[Token(Token = "0x400016D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bCachedData;
	}
	[Token(Token = "0x200006A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3955D4", Offset = "0x3955D4")]
	public struct FavoritesListChanged_t
	{
		[Token(Token = "0x400016E")]
		public const int k_iCallback = 502;

		[Token(Token = "0x400016F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nIP;

		[Token(Token = "0x4000170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_nQueryPort;

		[Token(Token = "0x4000171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_nConnPort;

		[Token(Token = "0x4000172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_nAppID;

		[Token(Token = "0x4000173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_nFlags;

		[Token(Token = "0x4000174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool m_bAdd;

		[Token(Token = "0x4000175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AccountID_t m_unAccountId;
	}
	[Token(Token = "0x200006B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3955E8", Offset = "0x3955E8")]
	public struct LobbyInvite_t
	{
		[Token(Token = "0x4000176")]
		public const int k_iCallback = 503;

		[Token(Token = "0x4000177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDUser;

		[Token(Token = "0x4000178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x4000179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ulong m_ulGameID;
	}
	[Token(Token = "0x200006C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3955FC", Offset = "0x3955FC")]
	public struct LobbyEnter_t
	{
		[Token(Token = "0x400017A")]
		public const int k_iCallback = 504;

		[Token(Token = "0x400017B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x400017C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_rgfChatPermissions;

		[Token(Token = "0x400017D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bLocked;

		[Token(Token = "0x400017E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_EChatRoomEnterResponse;
	}
	[Token(Token = "0x200006D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395610", Offset = "0x395610")]
	public struct LobbyDataUpdate_t
	{
		[Token(Token = "0x400017F")]
		public const int k_iCallback = 505;

		[Token(Token = "0x4000180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x4000181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDMember;

		[Token(Token = "0x4000182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte m_bSuccess;
	}
	[Token(Token = "0x200006E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395624", Offset = "0x395624")]
	public struct LobbyChatUpdate_t
	{
		[Token(Token = "0x4000183")]
		public const int k_iCallback = 506;

		[Token(Token = "0x4000184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x4000185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDUserChanged;

		[Token(Token = "0x4000186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ulong m_ulSteamIDMakingChange;

		[Token(Token = "0x4000187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint m_rgfChatMemberStateChange;
	}
	[Token(Token = "0x200006F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395638", Offset = "0x395638")]
	public struct LobbyChatMsg_t
	{
		[Token(Token = "0x4000188")]
		public const int k_iCallback = 507;

		[Token(Token = "0x4000189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x400018A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDUser;

		[Token(Token = "0x400018B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte m_eChatEntryType;

		[Token(Token = "0x400018C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint m_iChatID;
	}
	[Token(Token = "0x2000070")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x39564C", Offset = "0x39564C")]
	public struct LobbyGameCreated_t
	{
		[Token(Token = "0x400018D")]
		public const int k_iCallback = 509;

		[Token(Token = "0x400018E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x400018F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDGameServer;

		[Token(Token = "0x4000190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_unIP;

		[Token(Token = "0x4000191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public ushort m_usPort;
	}
	[Token(Token = "0x2000071")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395660", Offset = "0x395660")]
	public struct LobbyMatchList_t
	{
		[Token(Token = "0x4000192")]
		public const int k_iCallback = 510;

		[Token(Token = "0x4000193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nLobbiesMatching;
	}
	[Token(Token = "0x2000072")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395674", Offset = "0x395674")]
	public struct LobbyKicked_t
	{
		[Token(Token = "0x4000194")]
		public const int k_iCallback = 512;

		[Token(Token = "0x4000195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x4000196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDAdmin;

		[Token(Token = "0x4000197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte m_bKickedDueToDisconnect;
	}
	[Token(Token = "0x2000073")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395688", Offset = "0x395688")]
	public struct LobbyCreated_t
	{
		[Token(Token = "0x4000198")]
		public const int k_iCallback = 513;

		[Token(Token = "0x4000199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400019A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ulong m_ulSteamIDLobby;
	}
	[Token(Token = "0x2000074")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x39569C", Offset = "0x39569C")]
	public struct FavoritesListAccountsUpdated_t
	{
		[Token(Token = "0x400019B")]
		public const int k_iCallback = 516;

		[Token(Token = "0x400019C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000075")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3956B0", Offset = "0x3956B0")]
	public struct PlaybackStatusHasChanged_t
	{
		[Token(Token = "0x400019D")]
		public const int k_iCallback = 4001;
	}
	[Token(Token = "0x2000076")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3956C4", Offset = "0x3956C4")]
	public struct VolumeHasChanged_t
	{
		[Token(Token = "0x400019E")]
		public const int k_iCallback = 4002;

		[Token(Token = "0x400019F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m_flNewVolume;
	}
	[Token(Token = "0x2000077")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3956D8", Offset = "0x3956D8")]
	public struct MusicPlayerRemoteWillActivate_t
	{
		[Token(Token = "0x40001A0")]
		public const int k_iCallback = 4101;
	}
	[Token(Token = "0x2000078")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3956EC", Offset = "0x3956EC")]
	public struct MusicPlayerRemoteWillDeactivate_t
	{
		[Token(Token = "0x40001A1")]
		public const int k_iCallback = 4102;
	}
	[Token(Token = "0x2000079")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395700", Offset = "0x395700")]
	public struct MusicPlayerRemoteToFront_t
	{
		[Token(Token = "0x40001A2")]
		public const int k_iCallback = 4103;
	}
	[Token(Token = "0x200007A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395714", Offset = "0x395714")]
	public struct MusicPlayerWillQuit_t
	{
		[Token(Token = "0x40001A3")]
		public const int k_iCallback = 4104;
	}
	[Token(Token = "0x200007B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395728", Offset = "0x395728")]
	public struct MusicPlayerWantsPlay_t
	{
		[Token(Token = "0x40001A4")]
		public const int k_iCallback = 4105;
	}
	[Token(Token = "0x200007C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x39573C", Offset = "0x39573C")]
	public struct MusicPlayerWantsPause_t
	{
		[Token(Token = "0x40001A5")]
		public const int k_iCallback = 4106;
	}
	[Token(Token = "0x200007D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395750", Offset = "0x395750")]
	public struct MusicPlayerWantsPlayPrevious_t
	{
		[Token(Token = "0x40001A6")]
		public const int k_iCallback = 4107;
	}
	[Token(Token = "0x200007E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395764", Offset = "0x395764")]
	public struct MusicPlayerWantsPlayNext_t
	{
		[Token(Token = "0x40001A7")]
		public const int k_iCallback = 4108;
	}
	[Token(Token = "0x200007F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395778", Offset = "0x395778")]
	public struct MusicPlayerWantsShuffled_t
	{
		[Token(Token = "0x40001A8")]
		public const int k_iCallback = 4109;

		[Token(Token = "0x40001A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool m_bShuffled;
	}
	[Token(Token = "0x2000080")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x39578C", Offset = "0x39578C")]
	public struct MusicPlayerWantsLooped_t
	{
		[Token(Token = "0x40001AA")]
		public const int k_iCallback = 4110;

		[Token(Token = "0x40001AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool m_bLooped;
	}
	[Token(Token = "0x2000081")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3957A0", Offset = "0x3957A0")]
	public struct MusicPlayerWantsVolume_t
	{
		[Token(Token = "0x40001AC")]
		public const int k_iCallback = 4011;

		[Token(Token = "0x40001AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m_flNewVolume;
	}
	[Token(Token = "0x2000082")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3957B4", Offset = "0x3957B4")]
	public struct MusicPlayerSelectsQueueEntry_t
	{
		[Token(Token = "0x40001AE")]
		public const int k_iCallback = 4012;

		[Token(Token = "0x40001AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int nID;
	}
	[Token(Token = "0x2000083")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3957C8", Offset = "0x3957C8")]
	public struct MusicPlayerSelectsPlaylistEntry_t
	{
		[Token(Token = "0x40001B0")]
		public const int k_iCallback = 4013;

		[Token(Token = "0x40001B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int nID;
	}
	[Token(Token = "0x2000084")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3957DC", Offset = "0x3957DC")]
	public struct MusicPlayerWantsPlayingRepeatStatus_t
	{
		[Token(Token = "0x40001B2")]
		public const int k_iCallback = 4114;

		[Token(Token = "0x40001B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_nPlayingRepeatStatus;
	}
	[Token(Token = "0x2000085")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3957F0", Offset = "0x3957F0")]
	public struct P2PSessionRequest_t
	{
		[Token(Token = "0x40001B4")]
		public const int k_iCallback = 1202;

		[Token(Token = "0x40001B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDRemote;
	}
	[Token(Token = "0x2000086")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395804", Offset = "0x395804")]
	public struct P2PSessionConnectFail_t
	{
		[Token(Token = "0x40001B6")]
		public const int k_iCallback = 1203;

		[Token(Token = "0x40001B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDRemote;

		[Token(Token = "0x40001B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public byte m_eP2PSessionError;
	}
	[Token(Token = "0x2000087")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395818", Offset = "0x395818")]
	public struct SocketStatusCallback_t
	{
		[Token(Token = "0x40001B9")]
		public const int k_iCallback = 1201;

		[Token(Token = "0x40001BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SNetSocket_t m_hSocket;

		[Token(Token = "0x40001BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public SNetListenSocket_t m_hListenSocket;

		[Token(Token = "0x40001BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_steamIDRemote;

		[Token(Token = "0x40001BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_eSNetSocketState;
	}
	[Token(Token = "0x2000088")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x39582C", Offset = "0x39582C")]
	public struct RemoteStorageAppSyncedClient_t
	{
		[Token(Token = "0x40001BE")]
		public const int k_iCallback = 1301;

		[Token(Token = "0x40001BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;

		[Token(Token = "0x40001C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;

		[Token(Token = "0x40001C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_unNumDownloads;
	}
	[Token(Token = "0x2000089")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395840", Offset = "0x395840")]
	public struct RemoteStorageAppSyncedServer_t
	{
		[Token(Token = "0x40001C2")]
		public const int k_iCallback = 1302;

		[Token(Token = "0x40001C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;

		[Token(Token = "0x40001C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;

		[Token(Token = "0x40001C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_unNumUploads;
	}
	[Token(Token = "0x200008A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395854", Offset = "0x395854")]
	public struct RemoteStorageAppSyncProgress_t
	{
		[Token(Token = "0x40001C6")]
		public const int k_iCallback = 1303;

		[Token(Token = "0x40001C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string m_rgchCurrentFile;

		[Token(Token = "0x40001C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public AppId_t m_nAppID;

		[Token(Token = "0x40001C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_uBytesTransferredThisChunk;

		[Token(Token = "0x40001CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public double m_dAppPercentComplete;

		[Token(Token = "0x40001CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool m_bUploading;
	}
	[Token(Token = "0x200008B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395868", Offset = "0x395868")]
	public struct RemoteStorageAppSyncStatusCheck_t
	{
		[Token(Token = "0x40001CC")]
		public const int k_iCallback = 1305;

		[Token(Token = "0x40001CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;

		[Token(Token = "0x40001CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;
	}
	[Token(Token = "0x200008C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x39587C", Offset = "0x39587C")]
	public struct RemoteStorageFileShareResult_t
	{
		[Token(Token = "0x40001CF")]
		public const int k_iCallback = 1307;

		[Token(Token = "0x40001D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40001D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public UGCHandle_t m_hFile;

		[Token(Token = "0x40001D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string m_rgchFilename;
	}
	[Token(Token = "0x200008D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395890", Offset = "0x395890")]
	public struct RemoteStoragePublishFileResult_t
	{
		[Token(Token = "0x40001D3")]
		public const int k_iCallback = 1309;

		[Token(Token = "0x40001D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40001D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x40001D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bUserNeedsToAcceptWorkshopLegalAgreement;
	}
	[Token(Token = "0x200008E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3958A4", Offset = "0x3958A4")]
	public struct RemoteStorageDeletePublishedFileResult_t
	{
		[Token(Token = "0x40001D7")]
		public const int k_iCallback = 1311;

		[Token(Token = "0x40001D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40001D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;
	}
	[Token(Token = "0x200008F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3958B8", Offset = "0x3958B8")]
	public struct RemoteStorageEnumerateUserPublishedFilesResult_t
	{
		[Token(Token = "0x40001DA")]
		public const int k_iCallback = 1312;

		[Token(Token = "0x40001DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40001DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nResultsReturned;

		[Token(Token = "0x40001DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nTotalResultCount;

		[Token(Token = "0x40001DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public PublishedFileId_t[] m_rgPublishedFileId;
	}
	[Token(Token = "0x2000090")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3958CC", Offset = "0x3958CC")]
	public struct RemoteStorageSubscribePublishedFileResult_t
	{
		[Token(Token = "0x40001DF")]
		public const int k_iCallback = 1313;

		[Token(Token = "0x40001E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40001E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;
	}
	[Token(Token = "0x2000091")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3958E0", Offset = "0x3958E0")]
	public struct RemoteStorageEnumerateUserSubscribedFilesResult_t
	{
		[Token(Token = "0x40001E2")]
		public const int k_iCallback = 1314;

		[Token(Token = "0x40001E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40001E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nResultsReturned;

		[Token(Token = "0x40001E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nTotalResultCount;

		[Token(Token = "0x40001E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public PublishedFileId_t[] m_rgPublishedFileId;

		[Token(Token = "0x40001E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint[] m_rgRTimeSubscribed;
	}
	[Token(Token = "0x2000092")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3958F4", Offset = "0x3958F4")]
	public struct RemoteStorageUnsubscribePublishedFileResult_t
	{
		[Token(Token = "0x40001E8")]
		public const int k_iCallback = 1315;

		[Token(Token = "0x40001E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40001EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;
	}
	[Token(Token = "0x2000093")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395908", Offset = "0x395908")]
	public struct RemoteStorageUpdatePublishedFileResult_t
	{
		[Token(Token = "0x40001EB")]
		public const int k_iCallback = 1316;

		[Token(Token = "0x40001EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40001ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x40001EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bUserNeedsToAcceptWorkshopLegalAgreement;
	}
	[Token(Token = "0x2000094")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x39591C", Offset = "0x39591C")]
	public struct RemoteStorageDownloadUGCResult_t
	{
		[Token(Token = "0x40001EF")]
		public const int k_iCallback = 1317;

		[Token(Token = "0x40001F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40001F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public UGCHandle_t m_hFile;

		[Token(Token = "0x40001F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AppId_t m_nAppID;

		[Token(Token = "0x40001F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int m_nSizeInBytes;

		[Token(Token = "0x40001F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string m_pchFileName;

		[Token(Token = "0x40001F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ulong m_ulSteamIDOwner;
	}
	[Token(Token = "0x2000095")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395930", Offset = "0x395930")]
	public struct RemoteStorageGetPublishedFileDetailsResult_t
	{
		[Token(Token = "0x40001F6")]
		public const int k_iCallback = 1318;

		[Token(Token = "0x40001F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40001F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x40001F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AppId_t m_nCreatorAppID;

		[Token(Token = "0x40001FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public AppId_t m_nConsumerAppID;

		[Token(Token = "0x40001FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string m_rgchTitle;

		[Token(Token = "0x40001FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public string m_rgchDescription;

		[Token(Token = "0x40001FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UGCHandle_t m_hFile;

		[Token(Token = "0x40001FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UGCHandle_t m_hPreviewFile;

		[Token(Token = "0x40001FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ulong m_ulSteamIDOwner;

		[Token(Token = "0x4000200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public uint m_rtimeCreated;

		[Token(Token = "0x4000201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public uint m_rtimeUpdated;

		[Token(Token = "0x4000202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ERemoteStoragePublishedFileVisibility m_eVisibility;

		[Token(Token = "0x4000203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool m_bBanned;

		[Token(Token = "0x4000204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string m_rgchTags;

		[Token(Token = "0x4000205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool m_bTagsTruncated;

		[Token(Token = "0x4000206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string m_pchFileName;

		[Token(Token = "0x4000207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public int m_nFileSize;

		[Token(Token = "0x4000208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int m_nPreviewFileSize;

		[Token(Token = "0x4000209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public string m_rgchURL;

		[Token(Token = "0x400020A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public EWorkshopFileType m_eFileType;

		[Token(Token = "0x400020B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public bool m_bAcceptedForUse;
	}
	[Token(Token = "0x2000096")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395944", Offset = "0x395944")]
	public struct RemoteStorageEnumerateWorkshopFilesResult_t
	{
		[Token(Token = "0x400020C")]
		public const int k_iCallback = 1319;

		[Token(Token = "0x400020D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400020E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nResultsReturned;

		[Token(Token = "0x400020F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nTotalResultCount;

		[Token(Token = "0x4000210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public PublishedFileId_t[] m_rgPublishedFileId;

		[Token(Token = "0x4000211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float[] m_rgScore;

		[Token(Token = "0x4000212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public AppId_t m_nAppId;

		[Token(Token = "0x4000213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint m_unStartIndex;
	}
	[Token(Token = "0x2000097")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395958", Offset = "0x395958")]
	public struct RemoteStorageGetPublishedItemVoteDetailsResult_t
	{
		[Token(Token = "0x4000214")]
		public const int k_iCallback = 1320;

		[Token(Token = "0x4000215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_unPublishedFileId;

		[Token(Token = "0x4000217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_nVotesFor;

		[Token(Token = "0x4000218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_nVotesAgainst;

		[Token(Token = "0x4000219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int m_nReports;

		[Token(Token = "0x400021A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float m_fScore;
	}
	[Token(Token = "0x2000098")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x39596C", Offset = "0x39596C")]
	public struct RemoteStoragePublishedFileSubscribed_t
	{
		[Token(Token = "0x400021B")]
		public const int k_iCallback = 1321;

		[Token(Token = "0x400021C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x400021D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x2000099")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395980", Offset = "0x395980")]
	public struct RemoteStoragePublishedFileUnsubscribed_t
	{
		[Token(Token = "0x400021E")]
		public const int k_iCallback = 1322;

		[Token(Token = "0x400021F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x200009A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395994", Offset = "0x395994")]
	public struct RemoteStoragePublishedFileDeleted_t
	{
		[Token(Token = "0x4000221")]
		public const int k_iCallback = 1323;

		[Token(Token = "0x4000222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x200009B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3959A8", Offset = "0x3959A8")]
	public struct RemoteStorageUpdateUserPublishedItemVoteResult_t
	{
		[Token(Token = "0x4000224")]
		public const int k_iCallback = 1324;

		[Token(Token = "0x4000225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;
	}
	[Token(Token = "0x200009C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3959BC", Offset = "0x3959BC")]
	public struct RemoteStorageUserVoteDetails_t
	{
		[Token(Token = "0x4000227")]
		public const int k_iCallback = 1325;

		[Token(Token = "0x4000228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x400022A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public EWorkshopVote m_eVote;
	}
	[Token(Token = "0x200009D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3959D0", Offset = "0x3959D0")]
	public struct RemoteStorageEnumerateUserSharedWorkshopFilesResult_t
	{
		[Token(Token = "0x400022B")]
		public const int k_iCallback = 1326;

		[Token(Token = "0x400022C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400022D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nResultsReturned;

		[Token(Token = "0x400022E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nTotalResultCount;

		[Token(Token = "0x400022F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public PublishedFileId_t[] m_rgPublishedFileId;
	}
	[Token(Token = "0x200009E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3959E4", Offset = "0x3959E4")]
	public struct RemoteStorageSetUserPublishedFileActionResult_t
	{
		[Token(Token = "0x4000230")]
		public const int k_iCallback = 1327;

		[Token(Token = "0x4000231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public EWorkshopFileAction m_eAction;
	}
	[Token(Token = "0x200009F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x3959F8", Offset = "0x3959F8")]
	public struct RemoteStorageEnumeratePublishedFilesByUserActionResult_t
	{
		[Token(Token = "0x4000234")]
		public const int k_iCallback = 1328;

		[Token(Token = "0x4000235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EWorkshopFileAction m_eAction;

		[Token(Token = "0x4000237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nResultsReturned;

		[Token(Token = "0x4000238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_nTotalResultCount;

		[Token(Token = "0x4000239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PublishedFileId_t[] m_rgPublishedFileId;

		[Token(Token = "0x400023A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint[] m_rgRTimeUpdated;
	}
	[Token(Token = "0x20000A0")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395A0C", Offset = "0x395A0C")]
	public struct RemoteStoragePublishFileProgress_t
	{
		[Token(Token = "0x400023B")]
		public const int k_iCallback = 1329;

		[Token(Token = "0x400023C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double m_dPercentFile;

		[Token(Token = "0x400023D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool m_bPreview;
	}
	[Token(Token = "0x20000A1")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395A20", Offset = "0x395A20")]
	public struct RemoteStoragePublishedFileUpdated_t
	{
		[Token(Token = "0x400023E")]
		public const int k_iCallback = 1330;

		[Token(Token = "0x400023F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;

		[Token(Token = "0x4000241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public ulong m_ulUnused;
	}
	[Token(Token = "0x20000A2")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395A34", Offset = "0x395A34")]
	public struct RemoteStorageFileWriteAsyncComplete_t
	{
		[Token(Token = "0x4000242")]
		public const int k_iCallback = 1331;

		[Token(Token = "0x4000243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x20000A3")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395A48", Offset = "0x395A48")]
	public struct RemoteStorageFileReadAsyncComplete_t
	{
		[Token(Token = "0x4000244")]
		public const int k_iCallback = 1332;

		[Token(Token = "0x4000245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamAPICall_t m_hFileReadAsync;

		[Token(Token = "0x4000246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x4000247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_nOffset;

		[Token(Token = "0x4000248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_cubRead;
	}
	[Token(Token = "0x20000A4")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395A5C", Offset = "0x395A5C")]
	public struct ScreenshotReady_t
	{
		[Token(Token = "0x4000249")]
		public const int k_iCallback = 2301;

		[Token(Token = "0x400024A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ScreenshotHandle m_hLocal;

		[Token(Token = "0x400024B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;
	}
	[Token(Token = "0x20000A5")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395A70", Offset = "0x395A70")]
	public struct ScreenshotRequested_t
	{
		[Token(Token = "0x400024C")]
		public const int k_iCallback = 2302;
	}
	[Token(Token = "0x20000A6")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395A84", Offset = "0x395A84")]
	public struct SteamUGCQueryCompleted_t
	{
		[Token(Token = "0x400024D")]
		public const int k_iCallback = 3401;

		[Token(Token = "0x400024E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public UGCQueryHandle_t m_handle;

		[Token(Token = "0x400024F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x4000250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_unNumResultsReturned;

		[Token(Token = "0x4000251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_unTotalMatchingResults;

		[Token(Token = "0x4000252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool m_bCachedData;
	}
	[Token(Token = "0x20000A7")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395A98", Offset = "0x395A98")]
	public struct SteamUGCRequestUGCDetailsResult_t
	{
		[Token(Token = "0x4000253")]
		public const int k_iCallback = 3402;

		[Token(Token = "0x4000254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamUGCDetails_t m_details;

		[Token(Token = "0x4000255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool m_bCachedData;
	}
	[Token(Token = "0x20000A8")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395AAC", Offset = "0x395AAC")]
	public struct CreateItemResult_t
	{
		[Token(Token = "0x4000256")]
		public const int k_iCallback = 3403;

		[Token(Token = "0x4000257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bUserNeedsToAcceptWorkshopLegalAgreement;
	}
	[Token(Token = "0x20000A9")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395AC0", Offset = "0x395AC0")]
	public struct SubmitItemUpdateResult_t
	{
		[Token(Token = "0x400025A")]
		public const int k_iCallback = 3404;

		[Token(Token = "0x400025B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400025C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public bool m_bUserNeedsToAcceptWorkshopLegalAgreement;
	}
	[Token(Token = "0x20000AA")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395AD4", Offset = "0x395AD4")]
	public struct ItemInstalled_t
	{
		[Token(Token = "0x400025D")]
		public const int k_iCallback = 3405;

		[Token(Token = "0x400025E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_unAppID;

		[Token(Token = "0x400025F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;
	}
	[Token(Token = "0x20000AB")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395AE8", Offset = "0x395AE8")]
	public struct DownloadItemResult_t
	{
		[Token(Token = "0x4000260")]
		public const int k_iCallback = 3406;

		[Token(Token = "0x4000261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_unAppID;

		[Token(Token = "0x4000262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public EResult m_eResult;
	}
	[Token(Token = "0x20000AC")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395AFC", Offset = "0x395AFC")]
	public struct UserFavoriteItemsListChanged_t
	{
		[Token(Token = "0x4000264")]
		public const int k_iCallback = 3407;

		[Token(Token = "0x4000265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x4000267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bWasAddRequest;
	}
	[Token(Token = "0x20000AD")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395B10", Offset = "0x395B10")]
	public struct SetUserItemVoteResult_t
	{
		[Token(Token = "0x4000268")]
		public const int k_iCallback = 3408;

		[Token(Token = "0x4000269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x400026A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x400026B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bVoteUp;
	}
	[Token(Token = "0x20000AE")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395B24", Offset = "0x395B24")]
	public struct GetUserItemVoteResult_t
	{
		[Token(Token = "0x400026C")]
		public const int k_iCallback = 3409;

		[Token(Token = "0x400026D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x400026E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x400026F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bVotedUp;

		[Token(Token = "0x4000270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
		public bool m_bVotedDown;

		[Token(Token = "0x4000271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
		public bool m_bVoteSkipped;
	}
	[Token(Token = "0x20000AF")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395B38", Offset = "0x395B38")]
	public struct StartPlaytimeTrackingResult_t
	{
		[Token(Token = "0x4000272")]
		public const int k_iCallback = 3410;

		[Token(Token = "0x4000273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x20000B0")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395B4C", Offset = "0x395B4C")]
	public struct StopPlaytimeTrackingResult_t
	{
		[Token(Token = "0x4000274")]
		public const int k_iCallback = 3411;

		[Token(Token = "0x4000275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x20000B1")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395B60", Offset = "0x395B60")]
	public struct AddUGCDependencyResult_t
	{
		[Token(Token = "0x4000276")]
		public const int k_iCallback = 3412;

		[Token(Token = "0x4000277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public PublishedFileId_t m_nChildPublishedFileId;
	}
	[Token(Token = "0x20000B2")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395B74", Offset = "0x395B74")]
	public struct RemoveUGCDependencyResult_t
	{
		[Token(Token = "0x400027A")]
		public const int k_iCallback = 3413;

		[Token(Token = "0x400027B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400027C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x400027D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public PublishedFileId_t m_nChildPublishedFileId;
	}
	[Token(Token = "0x20000B3")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395B88", Offset = "0x395B88")]
	public struct SteamUnifiedMessagesSendMethodResult_t
	{
		[Token(Token = "0x400027E")]
		public const int k_iCallback = 2501;

		[Token(Token = "0x400027F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ClientUnifiedMessageHandle m_hHandle;

		[Token(Token = "0x4000280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_unContext;

		[Token(Token = "0x4000281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public EResult m_eResult;

		[Token(Token = "0x4000282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint m_unResponseSize;
	}
	[Token(Token = "0x20000B4")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395B9C", Offset = "0x395B9C")]
	public struct SteamServersConnected_t
	{
		[Token(Token = "0x4000283")]
		public const int k_iCallback = 101;
	}
	[Token(Token = "0x20000B5")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395BB0", Offset = "0x395BB0")]
	public struct SteamServerConnectFailure_t
	{
		[Token(Token = "0x4000284")]
		public const int k_iCallback = 102;

		[Token(Token = "0x4000285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public bool m_bStillRetrying;
	}
	[Token(Token = "0x20000B6")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395BC4", Offset = "0x395BC4")]
	public struct SteamServersDisconnected_t
	{
		[Token(Token = "0x4000287")]
		public const int k_iCallback = 103;

		[Token(Token = "0x4000288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x20000B7")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395BD8", Offset = "0x395BD8")]
	public struct ClientGameServerDeny_t
	{
		[Token(Token = "0x4000289")]
		public const int k_iCallback = 113;

		[Token(Token = "0x400028A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_uAppID;

		[Token(Token = "0x400028B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_unGameServerIP;

		[Token(Token = "0x400028C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ushort m_usGameServerPort;

		[Token(Token = "0x400028D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
		public ushort m_bSecure;

		[Token(Token = "0x400028E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_uReason;
	}
	[Token(Token = "0x20000B8")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395BEC", Offset = "0x395BEC")]
	public struct IPCFailure_t
	{
		[Token(Token = "0x400028F")]
		public const int k_iCallback = 117;

		[Token(Token = "0x4000290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_eFailureType;
	}
	[Token(Token = "0x20000B9")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395C00", Offset = "0x395C00")]
	public struct LicensesUpdated_t
	{
		[Token(Token = "0x4000291")]
		public const int k_iCallback = 125;
	}
	[Token(Token = "0x20000BA")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395C14", Offset = "0x395C14")]
	public struct ValidateAuthTicketResponse_t
	{
		[Token(Token = "0x4000292")]
		public const int k_iCallback = 143;

		[Token(Token = "0x4000293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_SteamID;

		[Token(Token = "0x4000294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EAuthSessionResponse m_eAuthSessionResponse;

		[Token(Token = "0x4000295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public CSteamID m_OwnerSteamID;
	}
	[Token(Token = "0x20000BB")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395C28", Offset = "0x395C28")]
	public struct MicroTxnAuthorizationResponse_t
	{
		[Token(Token = "0x4000296")]
		public const int k_iCallback = 152;

		[Token(Token = "0x4000297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_unAppID;

		[Token(Token = "0x4000298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ulong m_ulOrderID;

		[Token(Token = "0x4000299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public byte m_bAuthorized;
	}
	[Token(Token = "0x20000BC")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395C3C", Offset = "0x395C3C")]
	public struct EncryptedAppTicketResponse_t
	{
		[Token(Token = "0x400029A")]
		public const int k_iCallback = 154;

		[Token(Token = "0x400029B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x20000BD")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395C50", Offset = "0x395C50")]
	public struct GetAuthSessionTicketResponse_t
	{
		[Token(Token = "0x400029C")]
		public const int k_iCallback = 163;

		[Token(Token = "0x400029D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HAuthTicket m_hAuthTicket;

		[Token(Token = "0x400029E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;
	}
	[Token(Token = "0x20000BE")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395C64", Offset = "0x395C64")]
	public struct GameWebCallback_t
	{
		[Token(Token = "0x400029F")]
		public const int k_iCallback = 164;

		[Token(Token = "0x40002A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string m_szURL;
	}
	[Token(Token = "0x20000BF")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395C78", Offset = "0x395C78")]
	public struct StoreAuthURLResponse_t
	{
		[Token(Token = "0x40002A1")]
		public const int k_iCallback = 165;

		[Token(Token = "0x40002A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string m_szURL;
	}
	[StructLayout(2)]
	[Token(Token = "0x20000C0")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395C8C", Offset = "0x395C8C")]
	public struct UserStatsReceived_t
	{
		[Token(Token = "0x40002A3")]
		public const int k_iCallback = 1101;

		[Token(Token = "0x40002A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nGameID;

		[Token(Token = "0x40002A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x40002A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x20000C1")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395CA0", Offset = "0x395CA0")]
	public struct UserStatsStored_t
	{
		[Token(Token = "0x40002A7")]
		public const int k_iCallback = 1102;

		[Token(Token = "0x40002A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nGameID;

		[Token(Token = "0x40002A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;
	}
	[Token(Token = "0x20000C2")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395CB4", Offset = "0x395CB4")]
	public struct UserAchievementStored_t
	{
		[Token(Token = "0x40002AA")]
		public const int k_iCallback = 1103;

		[Token(Token = "0x40002AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nGameID;

		[Token(Token = "0x40002AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool m_bGroupAchievement;

		[Token(Token = "0x40002AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string m_rgchAchievementName;

		[Token(Token = "0x40002AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_nCurProgress;

		[Token(Token = "0x40002AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint m_nMaxProgress;
	}
	[Token(Token = "0x20000C3")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395CC8", Offset = "0x395CC8")]
	public struct LeaderboardFindResult_t
	{
		[Token(Token = "0x40002B0")]
		public const int k_iCallback = 1104;

		[Token(Token = "0x40002B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamLeaderboard_t m_hSteamLeaderboard;

		[Token(Token = "0x40002B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public byte m_bLeaderboardFound;
	}
	[Token(Token = "0x20000C4")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395CDC", Offset = "0x395CDC")]
	public struct LeaderboardScoresDownloaded_t
	{
		[Token(Token = "0x40002B3")]
		public const int k_iCallback = 1105;

		[Token(Token = "0x40002B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamLeaderboard_t m_hSteamLeaderboard;

		[Token(Token = "0x40002B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public SteamLeaderboardEntries_t m_hSteamLeaderboardEntries;

		[Token(Token = "0x40002B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_cEntryCount;
	}
	[Token(Token = "0x20000C5")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395CF0", Offset = "0x395CF0")]
	public struct LeaderboardScoreUploaded_t
	{
		[Token(Token = "0x40002B7")]
		public const int k_iCallback = 1106;

		[Token(Token = "0x40002B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_bSuccess;

		[Token(Token = "0x40002B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public SteamLeaderboard_t m_hSteamLeaderboard;

		[Token(Token = "0x40002BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_nScore;

		[Token(Token = "0x40002BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte m_bScoreChanged;

		[Token(Token = "0x40002BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int m_nGlobalRankNew;

		[Token(Token = "0x40002BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int m_nGlobalRankPrevious;
	}
	[Token(Token = "0x20000C6")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395D04", Offset = "0x395D04")]
	public struct NumberOfCurrentPlayers_t
	{
		[Token(Token = "0x40002BE")]
		public const int k_iCallback = 1107;

		[Token(Token = "0x40002BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_bSuccess;

		[Token(Token = "0x40002C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_cPlayers;
	}
	[Token(Token = "0x20000C7")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395D18", Offset = "0x395D18")]
	public struct UserStatsUnloaded_t
	{
		[Token(Token = "0x40002C1")]
		public const int k_iCallback = 1108;

		[Token(Token = "0x40002C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x20000C8")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395D2C", Offset = "0x395D2C")]
	public struct UserAchievementIconFetched_t
	{
		[Token(Token = "0x40002C3")]
		public const int k_iCallback = 1109;

		[Token(Token = "0x40002C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CGameID m_nGameID;

		[Token(Token = "0x40002C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_rgchAchievementName;

		[Token(Token = "0x40002C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bAchieved;

		[Token(Token = "0x40002C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_nIconHandle;
	}
	[Token(Token = "0x20000C9")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395D40", Offset = "0x395D40")]
	public struct GlobalAchievementPercentagesReady_t
	{
		[Token(Token = "0x40002C8")]
		public const int k_iCallback = 1110;

		[Token(Token = "0x40002C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nGameID;

		[Token(Token = "0x40002CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;
	}
	[Token(Token = "0x20000CA")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395D54", Offset = "0x395D54")]
	public struct LeaderboardUGCSet_t
	{
		[Token(Token = "0x40002CB")]
		public const int k_iCallback = 1111;

		[Token(Token = "0x40002CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40002CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public SteamLeaderboard_t m_hSteamLeaderboard;
	}
	[Token(Token = "0x20000CB")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395D68", Offset = "0x395D68")]
	public struct GlobalStatsReceived_t
	{
		[Token(Token = "0x40002CE")]
		public const int k_iCallback = 1112;

		[Token(Token = "0x40002CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nGameID;

		[Token(Token = "0x40002D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;
	}
	[Token(Token = "0x20000CC")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395D7C", Offset = "0x395D7C")]
	public struct IPCountry_t
	{
		[Token(Token = "0x40002D1")]
		public const int k_iCallback = 701;
	}
	[Token(Token = "0x20000CD")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395D90", Offset = "0x395D90")]
	public struct LowBatteryPower_t
	{
		[Token(Token = "0x40002D2")]
		public const int k_iCallback = 702;

		[Token(Token = "0x40002D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_nMinutesBatteryLeft;
	}
	[Token(Token = "0x20000CE")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395DA4", Offset = "0x395DA4")]
	public struct SteamAPICallCompleted_t
	{
		[Token(Token = "0x40002D4")]
		public const int k_iCallback = 703;

		[Token(Token = "0x40002D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamAPICall_t m_hAsyncCall;

		[Token(Token = "0x40002D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_iCallback;

		[Token(Token = "0x40002D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_cubParam;
	}
	[Token(Token = "0x20000CF")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395DB8", Offset = "0x395DB8")]
	public struct SteamShutdown_t
	{
		[Token(Token = "0x40002D8")]
		public const int k_iCallback = 704;
	}
	[Token(Token = "0x20000D0")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395DCC", Offset = "0x395DCC")]
	public struct CheckFileSignature_t
	{
		[Token(Token = "0x40002D9")]
		public const int k_iCallback = 705;

		[Token(Token = "0x40002DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ECheckFileSignature m_eCheckFileSignature;
	}
	[Token(Token = "0x20000D1")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395DE0", Offset = "0x395DE0")]
	public struct GamepadTextInputDismissed_t
	{
		[Token(Token = "0x40002DB")]
		public const int k_iCallback = 714;

		[Token(Token = "0x40002DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool m_bSubmitted;

		[Token(Token = "0x40002DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_unSubmittedText;
	}
	[Token(Token = "0x20000D2")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395DF4", Offset = "0x395DF4")]
	public struct BroadcastUploadStart_t
	{
		[Token(Token = "0x40002DE")]
		public const int k_iCallback = 4604;
	}
	[Token(Token = "0x20000D3")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395E08", Offset = "0x395E08")]
	public struct BroadcastUploadStop_t
	{
		[Token(Token = "0x40002DF")]
		public const int k_iCallback = 4605;

		[Token(Token = "0x40002E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EBroadcastUploadResult m_eResult;
	}
	[Token(Token = "0x20000D4")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395E1C", Offset = "0x395E1C")]
	public struct GetVideoURLResult_t
	{
		[Token(Token = "0x40002E1")]
		public const int k_iCallback = 4611;

		[Token(Token = "0x40002E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40002E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public AppId_t m_unVideoAppID;

		[Token(Token = "0x40002E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_rgchURL;
	}
	[Token(Token = "0x20000D5")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x395E30", Offset = "0x395E30")]
	public struct GetOPFSettingsResult_t
	{
		[Token(Token = "0x40002E5")]
		public const int k_iCallback = 4624;

		[Token(Token = "0x40002E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40002E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public AppId_t m_unVideoAppID;
	}
	[Token(Token = "0x20000D6")]
	public static class Constants
	{
		[Token(Token = "0x40002E8")]
		public const string STEAMAPPLIST_INTERFACE_VERSION = "STEAMAPPLIST_INTERFACE_VERSION001";

		[Token(Token = "0x40002E9")]
		public const string STEAMAPPS_INTERFACE_VERSION = "STEAMAPPS_INTERFACE_VERSION008";

		[Token(Token = "0x40002EA")]
		public const string STEAMAPPTICKET_INTERFACE_VERSION = "STEAMAPPTICKET_INTERFACE_VERSION001";

		[Token(Token = "0x40002EB")]
		public const string STEAMCLIENT_INTERFACE_VERSION = "SteamClient017";

		[Token(Token = "0x40002EC")]
		public const string STEAMCONTROLLER_INTERFACE_VERSION = "SteamController005";

		[Token(Token = "0x40002ED")]
		public const string STEAMFRIENDS_INTERFACE_VERSION = "SteamFriends015";

		[Token(Token = "0x40002EE")]
		public const string STEAMGAMECOORDINATOR_INTERFACE_VERSION = "SteamGameCoordinator001";

		[Token(Token = "0x40002EF")]
		public const string STEAMGAMESERVER_INTERFACE_VERSION = "SteamGameServer012";

		[Token(Token = "0x40002F0")]
		public const string STEAMGAMESERVERSTATS_INTERFACE_VERSION = "SteamGameServerStats001";

		[Token(Token = "0x40002F1")]
		public const string STEAMHTMLSURFACE_INTERFACE_VERSION = "STEAMHTMLSURFACE_INTERFACE_VERSION_003";

		[Token(Token = "0x40002F2")]
		public const string STEAMHTTP_INTERFACE_VERSION = "STEAMHTTP_INTERFACE_VERSION002";

		[Token(Token = "0x40002F3")]
		public const string STEAMINVENTORY_INTERFACE_VERSION = "STEAMINVENTORY_INTERFACE_V002";

		[Token(Token = "0x40002F4")]
		public const string STEAMMATCHMAKING_INTERFACE_VERSION = "SteamMatchMaking009";

		[Token(Token = "0x40002F5")]
		public const string STEAMMATCHMAKINGSERVERS_INTERFACE_VERSION = "SteamMatchMakingServers002";

		[Token(Token = "0x40002F6")]
		public const string STEAMMUSIC_INTERFACE_VERSION = "STEAMMUSIC_INTERFACE_VERSION001";

		[Token(Token = "0x40002F7")]
		public const string STEAMMUSICREMOTE_INTERFACE_VERSION = "STEAMMUSICREMOTE_INTERFACE_VERSION001";

		[Token(Token = "0x40002F8")]
		public const string STEAMNETWORKING_INTERFACE_VERSION = "SteamNetworking005";

		[Token(Token = "0x40002F9")]
		public const string STEAMREMOTESTORAGE_INTERFACE_VERSION = "STEAMREMOTESTORAGE_INTERFACE_VERSION014";

		[Token(Token = "0x40002FA")]
		public const string STEAMSCREENSHOTS_INTERFACE_VERSION = "STEAMSCREENSHOTS_INTERFACE_VERSION003";

		[Token(Token = "0x40002FB")]
		public const string STEAMUGC_INTERFACE_VERSION = "STEAMUGC_INTERFACE_VERSION010";

		[Token(Token = "0x40002FC")]
		public const string STEAMUNIFIEDMESSAGES_INTERFACE_VERSION = "STEAMUNIFIEDMESSAGES_INTERFACE_VERSION001";

		[Token(Token = "0x40002FD")]
		public const string STEAMUSER_INTERFACE_VERSION = "SteamUser019";

		[Token(Token = "0x40002FE")]
		public const string STEAMUSERSTATS_INTERFACE_VERSION = "STEAMUSERSTATS_INTERFACE_VERSION011";

		[Token(Token = "0x40002FF")]
		public const string STEAMUTILS_INTERFACE_VERSION = "SteamUtils009";

		[Token(Token = "0x4000300")]
		public const string STEAMVIDEO_INTERFACE_VERSION = "STEAMVIDEO_INTERFACE_V002";

		[Token(Token = "0x4000301")]
		public const int k_cubAppProofOfPurchaseKeyMax = 240;

		[Token(Token = "0x4000302")]
		public const int k_iSteamUserCallbacks = 100;

		[Token(Token = "0x4000303")]
		public const int k_iSteamGameServerCallbacks = 200;

		[Token(Token = "0x4000304")]
		public const int k_iSteamFriendsCallbacks = 300;

		[Token(Token = "0x4000305")]
		public const int k_iSteamBillingCallbacks = 400;

		[Token(Token = "0x4000306")]
		public const int k_iSteamMatchmakingCallbacks = 500;

		[Token(Token = "0x4000307")]
		public const int k_iSteamContentServerCallbacks = 600;

		[Token(Token = "0x4000308")]
		public const int k_iSteamUtilsCallbacks = 700;

		[Token(Token = "0x4000309")]
		public const int k_iClientFriendsCallbacks = 800;

		[Token(Token = "0x400030A")]
		public const int k_iClientUserCallbacks = 900;

		[Token(Token = "0x400030B")]
		public const int k_iSteamAppsCallbacks = 1000;

		[Token(Token = "0x400030C")]
		public const int k_iSteamUserStatsCallbacks = 1100;

		[Token(Token = "0x400030D")]
		public const int k_iSteamNetworkingCallbacks = 1200;

		[Token(Token = "0x400030E")]
		public const int k_iClientRemoteStorageCallbacks = 1300;

		[Token(Token = "0x400030F")]
		public const int k_iClientDepotBuilderCallbacks = 1400;

		[Token(Token = "0x4000310")]
		public const int k_iSteamGameServerItemsCallbacks = 1500;

		[Token(Token = "0x4000311")]
		public const int k_iClientUtilsCallbacks = 1600;

		[Token(Token = "0x4000312")]
		public const int k_iSteamGameCoordinatorCallbacks = 1700;

		[Token(Token = "0x4000313")]
		public const int k_iSteamGameServerStatsCallbacks = 1800;

		[Token(Token = "0x4000314")]
		public const int k_iSteam2AsyncCallbacks = 1900;

		[Token(Token = "0x4000315")]
		public const int k_iSteamGameStatsCallbacks = 2000;

		[Token(Token = "0x4000316")]
		public const int k_iClientHTTPCallbacks = 2100;

		[Token(Token = "0x4000317")]
		public const int k_iClientScreenshotsCallbacks = 2200;

		[Token(Token = "0x4000318")]
		public const int k_iSteamScreenshotsCallbacks = 2300;

		[Token(Token = "0x4000319")]
		public const int k_iClientAudioCallbacks = 2400;

		[Token(Token = "0x400031A")]
		public const int k_iClientUnifiedMessagesCallbacks = 2500;

		[Token(Token = "0x400031B")]
		public const int k_iSteamStreamLauncherCallbacks = 2600;

		[Token(Token = "0x400031C")]
		public const int k_iClientControllerCallbacks = 2700;

		[Token(Token = "0x400031D")]
		public const int k_iSteamControllerCallbacks = 2800;

		[Token(Token = "0x400031E")]
		public const int k_iClientParentalSettingsCallbacks = 2900;

		[Token(Token = "0x400031F")]
		public const int k_iClientDeviceAuthCallbacks = 3000;

		[Token(Token = "0x4000320")]
		public const int k_iClientNetworkDeviceManagerCallbacks = 3100;

		[Token(Token = "0x4000321")]
		public const int k_iClientMusicCallbacks = 3200;

		[Token(Token = "0x4000322")]
		public const int k_iClientRemoteClientManagerCallbacks = 3300;

		[Token(Token = "0x4000323")]
		public const int k_iClientUGCCallbacks = 3400;

		[Token(Token = "0x4000324")]
		public const int k_iSteamStreamClientCallbacks = 3500;

		[Token(Token = "0x4000325")]
		public const int k_IClientProductBuilderCallbacks = 3600;

		[Token(Token = "0x4000326")]
		public const int k_iClientShortcutsCallbacks = 3700;

		[Token(Token = "0x4000327")]
		public const int k_iClientRemoteControlManagerCallbacks = 3800;

		[Token(Token = "0x4000328")]
		public const int k_iSteamAppListCallbacks = 3900;

		[Token(Token = "0x4000329")]
		public const int k_iSteamMusicCallbacks = 4000;

		[Token(Token = "0x400032A")]
		public const int k_iSteamMusicRemoteCallbacks = 4100;

		[Token(Token = "0x400032B")]
		public const int k_iClientVRCallbacks = 4200;

		[Token(Token = "0x400032C")]
		public const int k_iClientGameNotificationCallbacks = 4300;

		[Token(Token = "0x400032D")]
		public const int k_iSteamGameNotificationCallbacks = 4400;

		[Token(Token = "0x400032E")]
		public const int k_iSteamHTMLSurfaceCallbacks = 4500;

		[Token(Token = "0x400032F")]
		public const int k_iClientVideoCallbacks = 4600;

		[Token(Token = "0x4000330")]
		public const int k_iClientInventoryCallbacks = 4700;

		[Token(Token = "0x4000331")]
		public const int k_iClientBluetoothManagerCallbacks = 4800;

		[Token(Token = "0x4000332")]
		public const int k_cchMaxFriendsGroupName = 64;

		[Token(Token = "0x4000333")]
		public const int k_cFriendsGroupLimit = 100;

		[Token(Token = "0x4000334")]
		public const int k_cEnumerateFollowersMax = 50;

		[Token(Token = "0x4000335")]
		public const int k_cchPersonaNameMax = 128;

		[Token(Token = "0x4000336")]
		public const int k_cwchPersonaNameMax = 32;

		[Token(Token = "0x4000337")]
		public const int k_cubChatMetadataMax = 8192;

		[Token(Token = "0x4000338")]
		public const int k_cchMaxRichPresenceKeys = 20;

		[Token(Token = "0x4000339")]
		public const int k_cchMaxRichPresenceKeyLength = 64;

		[Token(Token = "0x400033A")]
		public const int k_cchMaxRichPresenceValueLength = 256;

		[Token(Token = "0x400033B")]
		public const int k_unServerFlagNone = 0;

		[Token(Token = "0x400033C")]
		public const int k_unServerFlagActive = 1;

		[Token(Token = "0x400033D")]
		public const int k_unServerFlagSecure = 2;

		[Token(Token = "0x400033E")]
		public const int k_unServerFlagDedicated = 4;

		[Token(Token = "0x400033F")]
		public const int k_unServerFlagLinux = 8;

		[Token(Token = "0x4000340")]
		public const int k_unServerFlagPassworded = 16;

		[Token(Token = "0x4000341")]
		public const int k_unServerFlagPrivate = 32;

		[Token(Token = "0x4000342")]
		public const int k_unFavoriteFlagNone = 0;

		[Token(Token = "0x4000343")]
		public const int k_unFavoriteFlagFavorite = 1;

		[Token(Token = "0x4000344")]
		public const int k_unFavoriteFlagHistory = 2;

		[Token(Token = "0x4000345")]
		public const int k_unMaxCloudFileChunkSize = 104857600;

		[Token(Token = "0x4000346")]
		public const int k_cchPublishedDocumentTitleMax = 129;

		[Token(Token = "0x4000347")]
		public const int k_cchPublishedDocumentDescriptionMax = 8000;

		[Token(Token = "0x4000348")]
		public const int k_cchPublishedDocumentChangeDescriptionMax = 8000;

		[Token(Token = "0x4000349")]
		public const int k_unEnumeratePublishedFilesMaxResults = 50;

		[Token(Token = "0x400034A")]
		public const int k_cchTagListMax = 1025;

		[Token(Token = "0x400034B")]
		public const int k_cchFilenameMax = 260;

		[Token(Token = "0x400034C")]
		public const int k_cchPublishedFileURLMax = 256;

		[Token(Token = "0x400034D")]
		public const int k_nScreenshotMaxTaggedUsers = 32;

		[Token(Token = "0x400034E")]
		public const int k_nScreenshotMaxTaggedPublishedFiles = 32;

		[Token(Token = "0x400034F")]
		public const int k_cubUFSTagTypeMax = 255;

		[Token(Token = "0x4000350")]
		public const int k_cubUFSTagValueMax = 255;

		[Token(Token = "0x4000351")]
		public const int k_ScreenshotThumbWidth = 200;

		[Token(Token = "0x4000352")]
		public const int kNumUGCResultsPerPage = 50;

		[Token(Token = "0x4000353")]
		public const int k_cchDeveloperMetadataMax = 5000;

		[Token(Token = "0x4000354")]
		public const int k_cchStatNameMax = 128;

		[Token(Token = "0x4000355")]
		public const int k_cchLeaderboardNameMax = 128;

		[Token(Token = "0x4000356")]
		public const int k_cLeaderboardDetailsMax = 64;

		[Token(Token = "0x4000357")]
		public const int k_cbMaxGameServerGameDir = 32;

		[Token(Token = "0x4000358")]
		public const int k_cbMaxGameServerMapName = 32;

		[Token(Token = "0x4000359")]
		public const int k_cbMaxGameServerGameDescription = 64;

		[Token(Token = "0x400035A")]
		public const int k_cbMaxGameServerName = 64;

		[Token(Token = "0x400035B")]
		public const int k_cbMaxGameServerTags = 128;

		[Token(Token = "0x400035C")]
		public const int k_cbMaxGameServerGameData = 2048;

		[Token(Token = "0x400035D")]
		public const int k_unSteamAccountIDMask = -1;

		[Token(Token = "0x400035E")]
		public const int k_unSteamAccountInstanceMask = 1048575;

		[Token(Token = "0x400035F")]
		public const int k_unSteamUserDesktopInstance = 1;

		[Token(Token = "0x4000360")]
		public const int k_unSteamUserConsoleInstance = 2;

		[Token(Token = "0x4000361")]
		public const int k_unSteamUserWebInstance = 4;

		[Token(Token = "0x4000362")]
		public const int k_cchGameExtraInfoMax = 64;

		[Token(Token = "0x4000363")]
		public const int k_nSteamEncryptedAppTicketSymmetricKeyLen = 32;

		[Token(Token = "0x4000364")]
		public const int k_cubSaltSize = 8;

		[Token(Token = "0x4000365")]
		public const ulong k_GIDNil = ulong.MaxValue;

		[Token(Token = "0x4000366")]
		public const ulong k_TxnIDNil = ulong.MaxValue;

		[Token(Token = "0x4000367")]
		public const ulong k_TxnIDUnknown = 0uL;

		[Token(Token = "0x4000368")]
		public const int k_uPackageIdFreeSub = 0;

		[Token(Token = "0x4000369")]
		public const int k_uPackageIdInvalid = -1;

		[Token(Token = "0x400036A")]
		public const ulong k_ulAssetClassIdInvalid = 0uL;

		[Token(Token = "0x400036B")]
		public const int k_uPhysicalItemIdInvalid = 0;

		[Token(Token = "0x400036C")]
		public const int k_uCellIDInvalid = -1;

		[Token(Token = "0x400036D")]
		public const int k_uPartnerIdInvalid = 0;

		[Token(Token = "0x400036E")]
		public const int STEAM_CONTROLLER_MAX_COUNT = 16;

		[Token(Token = "0x400036F")]
		public const int STEAM_CONTROLLER_MAX_ANALOG_ACTIONS = 16;

		[Token(Token = "0x4000370")]
		public const int STEAM_CONTROLLER_MAX_DIGITAL_ACTIONS = 128;

		[Token(Token = "0x4000371")]
		public const int STEAM_CONTROLLER_MAX_ORIGINS = 8;

		[Token(Token = "0x4000372")]
		public const ulong STEAM_CONTROLLER_HANDLE_ALL_CONTROLLERS = ulong.MaxValue;

		[Token(Token = "0x4000373")]
		public const float STEAM_CONTROLLER_MIN_ANALOG_ACTION_DATA = -1f;

		[Token(Token = "0x4000374")]
		public const float STEAM_CONTROLLER_MAX_ANALOG_ACTION_DATA = 1f;

		[Token(Token = "0x4000375")]
		public const ushort MASTERSERVERUPDATERPORT_USEGAMESOCKETSHARE = ushort.MaxValue;

		[Token(Token = "0x4000376")]
		public const int INVALID_HTTPREQUEST_HANDLE = 0;

		[Token(Token = "0x4000377")]
		public const byte k_nMaxLobbyKeyLength = byte.MaxValue;

		[Token(Token = "0x4000378")]
		public const int k_SteamMusicNameMaxLength = 255;

		[Token(Token = "0x4000379")]
		public const int k_SteamMusicPNGMaxLength = 65535;

		[Token(Token = "0x400037A")]
		public const int QUERY_PORT_NOT_INITIALIZED = 65535;

		[Token(Token = "0x400037B")]
		public const int QUERY_PORT_ERROR = 65534;
	}
	[Token(Token = "0x20000D7")]
	public enum ERegisterActivationCodeResult
	{
		[Token(Token = "0x400037D")]
		k_ERegisterActivationCodeResultOK,
		[Token(Token = "0x400037E")]
		k_ERegisterActivationCodeResultFail,
		[Token(Token = "0x400037F")]
		k_ERegisterActivationCodeResultAlreadyRegistered,
		[Token(Token = "0x4000380")]
		k_ERegisterActivationCodeResultTimeout,
		[Token(Token = "0x4000381")]
		k_ERegisterActivationCodeAlreadyOwned
	}
	[Token(Token = "0x20000D8")]
	public enum ESteamControllerPad
	{
		[Token(Token = "0x4000383")]
		k_ESteamControllerPad_Left,
		[Token(Token = "0x4000384")]
		k_ESteamControllerPad_Right
	}
	[Token(Token = "0x20000D9")]
	public enum EControllerSource
	{
		[Token(Token = "0x4000386")]
		k_EControllerSource_None,
		[Token(Token = "0x4000387")]
		k_EControllerSource_LeftTrackpad,
		[Token(Token = "0x4000388")]
		k_EControllerSource_RightTrackpad,
		[Token(Token = "0x4000389")]
		k_EControllerSource_Joystick,
		[Token(Token = "0x400038A")]
		k_EControllerSource_ABXY,
		[Token(Token = "0x400038B")]
		k_EControllerSource_Switch,
		[Token(Token = "0x400038C")]
		k_EControllerSource_LeftTrigger,
		[Token(Token = "0x400038D")]
		k_EControllerSource_RightTrigger,
		[Token(Token = "0x400038E")]
		k_EControllerSource_Gyro,
		[Token(Token = "0x400038F")]
		k_EControllerSource_CenterTrackpad,
		[Token(Token = "0x4000390")]
		k_EControllerSource_RightJoystick,
		[Token(Token = "0x4000391")]
		k_EControllerSource_DPad,
		[Token(Token = "0x4000392")]
		k_EControllerSource_Count
	}
	[Token(Token = "0x20000DA")]
	public enum EControllerSourceMode
	{
		[Token(Token = "0x4000394")]
		k_EControllerSourceMode_None,
		[Token(Token = "0x4000395")]
		k_EControllerSourceMode_Dpad,
		[Token(Token = "0x4000396")]
		k_EControllerSourceMode_Buttons,
		[Token(Token = "0x4000397")]
		k_EControllerSourceMode_FourButtons,
		[Token(Token = "0x4000398")]
		k_EControllerSourceMode_AbsoluteMouse,
		[Token(Token = "0x4000399")]
		k_EControllerSourceMode_RelativeMouse,
		[Token(Token = "0x400039A")]
		k_EControllerSourceMode_JoystickMove,
		[Token(Token = "0x400039B")]
		k_EControllerSourceMode_JoystickMouse,
		[Token(Token = "0x400039C")]
		k_EControllerSourceMode_JoystickCamera,
		[Token(Token = "0x400039D")]
		k_EControllerSourceMode_ScrollWheel,
		[Token(Token = "0x400039E")]
		k_EControllerSourceMode_Trigger,
		[Token(Token = "0x400039F")]
		k_EControllerSourceMode_TouchMenu,
		[Token(Token = "0x40003A0")]
		k_EControllerSourceMode_MouseJoystick,
		[Token(Token = "0x40003A1")]
		k_EControllerSourceMode_MouseRegion,
		[Token(Token = "0x40003A2")]
		k_EControllerSourceMode_RadialMenu,
		[Token(Token = "0x40003A3")]
		k_EControllerSourceMode_SingleButton,
		[Token(Token = "0x40003A4")]
		k_EControllerSourceMode_Switches
	}
	[Token(Token = "0x20000DB")]
	public enum EControllerActionOrigin
	{
		[Token(Token = "0x40003A6")]
		k_EControllerActionOrigin_None,
		[Token(Token = "0x40003A7")]
		k_EControllerActionOrigin_A,
		[Token(Token = "0x40003A8")]
		k_EControllerActionOrigin_B,
		[Token(Token = "0x40003A9")]
		k_EControllerActionOrigin_X,
		[Token(Token = "0x40003AA")]
		k_EControllerActionOrigin_Y,
		[Token(Token = "0x40003AB")]
		k_EControllerActionOrigin_LeftBumper,
		[Token(Token = "0x40003AC")]
		k_EControllerActionOrigin_RightBumper,
		[Token(Token = "0x40003AD")]
		k_EControllerActionOrigin_LeftGrip,
		[Token(Token = "0x40003AE")]
		k_EControllerActionOrigin_RightGrip,
		[Token(Token = "0x40003AF")]
		k_EControllerActionOrigin_Start,
		[Token(Token = "0x40003B0")]
		k_EControllerActionOrigin_Back,
		[Token(Token = "0x40003B1")]
		k_EControllerActionOrigin_LeftPad_Touch,
		[Token(Token = "0x40003B2")]
		k_EControllerActionOrigin_LeftPad_Swipe,
		[Token(Token = "0x40003B3")]
		k_EControllerActionOrigin_LeftPad_Click,
		[Token(Token = "0x40003B4")]
		k_EControllerActionOrigin_LeftPad_DPadNorth,
		[Token(Token = "0x40003B5")]
		k_EControllerActionOrigin_LeftPad_DPadSouth,
		[Token(Token = "0x40003B6")]
		k_EControllerActionOrigin_LeftPad_DPadWest,
		[Token(Token = "0x40003B7")]
		k_EControllerActionOrigin_LeftPad_DPadEast,
		[Token(Token = "0x40003B8")]
		k_EControllerActionOrigin_RightPad_Touch,
		[Token(Token = "0x40003B9")]
		k_EControllerActionOrigin_RightPad_Swipe,
		[Token(Token = "0x40003BA")]
		k_EControllerActionOrigin_RightPad_Click,
		[Token(Token = "0x40003BB")]
		k_EControllerActionOrigin_RightPad_DPadNorth,
		[Token(Token = "0x40003BC")]
		k_EControllerActionOrigin_RightPad_DPadSouth,
		[Token(Token = "0x40003BD")]
		k_EControllerActionOrigin_RightPad_DPadWest,
		[Token(Token = "0x40003BE")]
		k_EControllerActionOrigin_RightPad_DPadEast,
		[Token(Token = "0x40003BF")]
		k_EControllerActionOrigin_LeftTrigger_Pull,
		[Token(Token = "0x40003C0")]
		k_EControllerActionOrigin_LeftTrigger_Click,
		[Token(Token = "0x40003C1")]
		k_EControllerActionOrigin_RightTrigger_Pull,
		[Token(Token = "0x40003C2")]
		k_EControllerActionOrigin_RightTrigger_Click,
		[Token(Token = "0x40003C3")]
		k_EControllerActionOrigin_LeftStick_Move,
		[Token(Token = "0x40003C4")]
		k_EControllerActionOrigin_LeftStick_Click,
		[Token(Token = "0x40003C5")]
		k_EControllerActionOrigin_LeftStick_DPadNorth,
		[Token(Token = "0x40003C6")]
		k_EControllerActionOrigin_LeftStick_DPadSouth,
		[Token(Token = "0x40003C7")]
		k_EControllerActionOrigin_LeftStick_DPadWest,
		[Token(Token = "0x40003C8")]
		k_EControllerActionOrigin_LeftStick_DPadEast,
		[Token(Token = "0x40003C9")]
		k_EControllerActionOrigin_Gyro_Move,
		[Token(Token = "0x40003CA")]
		k_EControllerActionOrigin_Gyro_Pitch,
		[Token(Token = "0x40003CB")]
		k_EControllerActionOrigin_Gyro_Yaw,
		[Token(Token = "0x40003CC")]
		k_EControllerActionOrigin_Gyro_Roll,
		[Token(Token = "0x40003CD")]
		k_EControllerActionOrigin_PS4_X,
		[Token(Token = "0x40003CE")]
		k_EControllerActionOrigin_PS4_Circle,
		[Token(Token = "0x40003CF")]
		k_EControllerActionOrigin_PS4_Triangle,
		[Token(Token = "0x40003D0")]
		k_EControllerActionOrigin_PS4_Square,
		[Token(Token = "0x40003D1")]
		k_EControllerActionOrigin_PS4_LeftBumper,
		[Token(Token = "0x40003D2")]
		k_EControllerActionOrigin_PS4_RightBumper,
		[Token(Token = "0x40003D3")]
		k_EControllerActionOrigin_PS4_Options,
		[Token(Token = "0x40003D4")]
		k_EControllerActionOrigin_PS4_Share,
		[Token(Token = "0x40003D5")]
		k_EControllerActionOrigin_PS4_LeftPad_Touch,
		[Token(Token = "0x40003D6")]
		k_EControllerActionOrigin_PS4_LeftPad_Swipe,
		[Token(Token = "0x40003D7")]
		k_EControllerActionOrigin_PS4_LeftPad_Click,
		[Token(Token = "0x40003D8")]
		k_EControllerActionOrigin_PS4_LeftPad_DPadNorth,
		[Token(Token = "0x40003D9")]
		k_EControllerActionOrigin_PS4_LeftPad_DPadSouth,
		[Token(Token = "0x40003DA")]
		k_EControllerActionOrigin_PS4_LeftPad_DPadWest,
		[Token(Token = "0x40003DB")]
		k_EControllerActionOrigin_PS4_LeftPad_DPadEast,
		[Token(Token = "0x40003DC")]
		k_EControllerActionOrigin_PS4_RightPad_Touch,
		[Token(Token = "0x40003DD")]
		k_EControllerActionOrigin_PS4_RightPad_Swipe,
		[Token(Token = "0x40003DE")]
		k_EControllerActionOrigin_PS4_RightPad_Click,
		[Token(Token = "0x40003DF")]
		k_EControllerActionOrigin_PS4_RightPad_DPadNorth,
		[Token(Token = "0x40003E0")]
		k_EControllerActionOrigin_PS4_RightPad_DPadSouth,
		[Token(Token = "0x40003E1")]
		k_EControllerActionOrigin_PS4_RightPad_DPadWest,
		[Token(Token = "0x40003E2")]
		k_EControllerActionOrigin_PS4_RightPad_DPadEast,
		[Token(Token = "0x40003E3")]
		k_EControllerActionOrigin_PS4_CenterPad_Touch,
		[Token(Token = "0x40003E4")]
		k_EControllerActionOrigin_PS4_CenterPad_Swipe,
		[Token(Token = "0x40003E5")]
		k_EControllerActionOrigin_PS4_CenterPad_Click,
		[Token(Token = "0x40003E6")]
		k_EControllerActionOrigin_PS4_CenterPad_DPadNorth,
		[Token(Token = "0x40003E7")]
		k_EControllerActionOrigin_PS4_CenterPad_DPadSouth,
		[Token(Token = "0x40003E8")]
		k_EControllerActionOrigin_PS4_CenterPad_DPadWest,
		[Token(Token = "0x40003E9")]
		k_EControllerActionOrigin_PS4_CenterPad_DPadEast,
		[Token(Token = "0x40003EA")]
		k_EControllerActionOrigin_PS4_LeftTrigger_Pull,
		[Token(Token = "0x40003EB")]
		k_EControllerActionOrigin_PS4_LeftTrigger_Click,
		[Token(Token = "0x40003EC")]
		k_EControllerActionOrigin_PS4_RightTrigger_Pull,
		[Token(Token = "0x40003ED")]
		k_EControllerActionOrigin_PS4_RightTrigger_Click,
		[Token(Token = "0x40003EE")]
		k_EControllerActionOrigin_PS4_LeftStick_Move,
		[Token(Token = "0x40003EF")]
		k_EControllerActionOrigin_PS4_LeftStick_Click,
		[Token(Token = "0x40003F0")]
		k_EControllerActionOrigin_PS4_LeftStick_DPadNorth,
		[Token(Token = "0x40003F1")]
		k_EControllerActionOrigin_PS4_LeftStick_DPadSouth,
		[Token(Token = "0x40003F2")]
		k_EControllerActionOrigin_PS4_LeftStick_DPadWest,
		[Token(Token = "0x40003F3")]
		k_EControllerActionOrigin_PS4_LeftStick_DPadEast,
		[Token(Token = "0x40003F4")]
		k_EControllerActionOrigin_PS4_RightStick_Move,
		[Token(Token = "0x40003F5")]
		k_EControllerActionOrigin_PS4_RightStick_Click,
		[Token(Token = "0x40003F6")]
		k_EControllerActionOrigin_PS4_RightStick_DPadNorth,
		[Token(Token = "0x40003F7")]
		k_EControllerActionOrigin_PS4_RightStick_DPadSouth,
		[Token(Token = "0x40003F8")]
		k_EControllerActionOrigin_PS4_RightStick_DPadWest,
		[Token(Token = "0x40003F9")]
		k_EControllerActionOrigin_PS4_RightStick_DPadEast,
		[Token(Token = "0x40003FA")]
		k_EControllerActionOrigin_PS4_DPad_North,
		[Token(Token = "0x40003FB")]
		k_EControllerActionOrigin_PS4_DPad_South,
		[Token(Token = "0x40003FC")]
		k_EControllerActionOrigin_PS4_DPad_West,
		[Token(Token = "0x40003FD")]
		k_EControllerActionOrigin_PS4_DPad_East,
		[Token(Token = "0x40003FE")]
		k_EControllerActionOrigin_PS4_Gyro_Move,
		[Token(Token = "0x40003FF")]
		k_EControllerActionOrigin_PS4_Gyro_Pitch,
		[Token(Token = "0x4000400")]
		k_EControllerActionOrigin_PS4_Gyro_Yaw,
		[Token(Token = "0x4000401")]
		k_EControllerActionOrigin_PS4_Gyro_Roll,
		[Token(Token = "0x4000402")]
		k_EControllerActionOrigin_XBoxOne_A,
		[Token(Token = "0x4000403")]
		k_EControllerActionOrigin_XBoxOne_B,
		[Token(Token = "0x4000404")]
		k_EControllerActionOrigin_XBoxOne_X,
		[Token(Token = "0x4000405")]
		k_EControllerActionOrigin_XBoxOne_Y,
		[Token(Token = "0x4000406")]
		k_EControllerActionOrigin_XBoxOne_LeftBumper,
		[Token(Token = "0x4000407")]
		k_EControllerActionOrigin_XBoxOne_RightBumper,
		[Token(Token = "0x4000408")]
		k_EControllerActionOrigin_XBoxOne_Menu,
		[Token(Token = "0x4000409")]
		k_EControllerActionOrigin_XBoxOne_View,
		[Token(Token = "0x400040A")]
		k_EControllerActionOrigin_XBoxOne_LeftTrigger_Pull,
		[Token(Token = "0x400040B")]
		k_EControllerActionOrigin_XBoxOne_LeftTrigger_Click,
		[Token(Token = "0x400040C")]
		k_EControllerActionOrigin_XBoxOne_RightTrigger_Pull,
		[Token(Token = "0x400040D")]
		k_EControllerActionOrigin_XBoxOne_RightTrigger_Click,
		[Token(Token = "0x400040E")]
		k_EControllerActionOrigin_XBoxOne_LeftStick_Move,
		[Token(Token = "0x400040F")]
		k_EControllerActionOrigin_XBoxOne_LeftStick_Click,
		[Token(Token = "0x4000410")]
		k_EControllerActionOrigin_XBoxOne_LeftStick_DPadNorth,
		[Token(Token = "0x4000411")]
		k_EControllerActionOrigin_XBoxOne_LeftStick_DPadSouth,
		[Token(Token = "0x4000412")]
		k_EControllerActionOrigin_XBoxOne_LeftStick_DPadWest,
		[Token(Token = "0x4000413")]
		k_EControllerActionOrigin_XBoxOne_LeftStick_DPadEast,
		[Token(Token = "0x4000414")]
		k_EControllerActionOrigin_XBoxOne_RightStick_Move,
		[Token(Token = "0x4000415")]
		k_EControllerActionOrigin_XBoxOne_RightStick_Click,
		[Token(Token = "0x4000416")]
		k_EControllerActionOrigin_XBoxOne_RightStick_DPadNorth,
		[Token(Token = "0x4000417")]
		k_EControllerActionOrigin_XBoxOne_RightStick_DPadSouth,
		[Token(Token = "0x4000418")]
		k_EControllerActionOrigin_XBoxOne_RightStick_DPadWest,
		[Token(Token = "0x4000419")]
		k_EControllerActionOrigin_XBoxOne_RightStick_DPadEast,
		[Token(Token = "0x400041A")]
		k_EControllerActionOrigin_XBoxOne_DPad_North,
		[Token(Token = "0x400041B")]
		k_EControllerActionOrigin_XBoxOne_DPad_South,
		[Token(Token = "0x400041C")]
		k_EControllerActionOrigin_XBoxOne_DPad_West,
		[Token(Token = "0x400041D")]
		k_EControllerActionOrigin_XBoxOne_DPad_East,
		[Token(Token = "0x400041E")]
		k_EControllerActionOrigin_XBox360_A,
		[Token(Token = "0x400041F")]
		k_EControllerActionOrigin_XBox360_B,
		[Token(Token = "0x4000420")]
		k_EControllerActionOrigin_XBox360_X,
		[Token(Token = "0x4000421")]
		k_EControllerActionOrigin_XBox360_Y,
		[Token(Token = "0x4000422")]
		k_EControllerActionOrigin_XBox360_LeftBumper,
		[Token(Token = "0x4000423")]
		k_EControllerActionOrigin_XBox360_RightBumper,
		[Token(Token = "0x4000424")]
		k_EControllerActionOrigin_XBox360_Start,
		[Token(Token = "0x4000425")]
		k_EControllerActionOrigin_XBox360_Back,
		[Token(Token = "0x4000426")]
		k_EControllerActionOrigin_XBox360_LeftTrigger_Pull,
		[Token(Token = "0x4000427")]
		k_EControllerActionOrigin_XBox360_LeftTrigger_Click,
		[Token(Token = "0x4000428")]
		k_EControllerActionOrigin_XBox360_RightTrigger_Pull,
		[Token(Token = "0x4000429")]
		k_EControllerActionOrigin_XBox360_RightTrigger_Click,
		[Token(Token = "0x400042A")]
		k_EControllerActionOrigin_XBox360_LeftStick_Move,
		[Token(Token = "0x400042B")]
		k_EControllerActionOrigin_XBox360_LeftStick_Click,
		[Token(Token = "0x400042C")]
		k_EControllerActionOrigin_XBox360_LeftStick_DPadNorth,
		[Token(Token = "0x400042D")]
		k_EControllerActionOrigin_XBox360_LeftStick_DPadSouth,
		[Token(Token = "0x400042E")]
		k_EControllerActionOrigin_XBox360_LeftStick_DPadWest,
		[Token(Token = "0x400042F")]
		k_EControllerActionOrigin_XBox360_LeftStick_DPadEast,
		[Token(Token = "0x4000430")]
		k_EControllerActionOrigin_XBox360_RightStick_Move,
		[Token(Token = "0x4000431")]
		k_EControllerActionOrigin_XBox360_RightStick_Click,
		[Token(Token = "0x4000432")]
		k_EControllerActionOrigin_XBox360_RightStick_DPadNorth,
		[Token(Token = "0x4000433")]
		k_EControllerActionOrigin_XBox360_RightStick_DPadSouth,
		[Token(Token = "0x4000434")]
		k_EControllerActionOrigin_XBox360_RightStick_DPadWest,
		[Token(Token = "0x4000435")]
		k_EControllerActionOrigin_XBox360_RightStick_DPadEast,
		[Token(Token = "0x4000436")]
		k_EControllerActionOrigin_XBox360_DPad_North,
		[Token(Token = "0x4000437")]
		k_EControllerActionOrigin_XBox360_DPad_South,
		[Token(Token = "0x4000438")]
		k_EControllerActionOrigin_XBox360_DPad_West,
		[Token(Token = "0x4000439")]
		k_EControllerActionOrigin_XBox360_DPad_East,
		[Token(Token = "0x400043A")]
		k_EControllerActionOrigin_SteamV2_A,
		[Token(Token = "0x400043B")]
		k_EControllerActionOrigin_SteamV2_B,
		[Token(Token = "0x400043C")]
		k_EControllerActionOrigin_SteamV2_X,
		[Token(Token = "0x400043D")]
		k_EControllerActionOrigin_SteamV2_Y,
		[Token(Token = "0x400043E")]
		k_EControllerActionOrigin_SteamV2_LeftBumper,
		[Token(Token = "0x400043F")]
		k_EControllerActionOrigin_SteamV2_RightBumper,
		[Token(Token = "0x4000440")]
		k_EControllerActionOrigin_SteamV2_LeftGrip,
		[Token(Token = "0x4000441")]
		k_EControllerActionOrigin_SteamV2_RightGrip,
		[Token(Token = "0x4000442")]
		k_EControllerActionOrigin_SteamV2_LeftGrip_Upper,
		[Token(Token = "0x4000443")]
		k_EControllerActionOrigin_SteamV2_RightGrip_Upper,
		[Token(Token = "0x4000444")]
		k_EControllerActionOrigin_SteamV2_LeftBumper_Pressure,
		[Token(Token = "0x4000445")]
		k_EControllerActionOrigin_SteamV2_RightBumper_Pressure,
		[Token(Token = "0x4000446")]
		k_EControllerActionOrigin_SteamV2_LeftGrip_Pressure,
		[Token(Token = "0x4000447")]
		k_EControllerActionOrigin_SteamV2_RightGrip_Pressure,
		[Token(Token = "0x4000448")]
		k_EControllerActionOrigin_SteamV2_LeftGrip_Upper_Pressure,
		[Token(Token = "0x4000449")]
		k_EControllerActionOrigin_SteamV2_RightGrip_Upper_Pressure,
		[Token(Token = "0x400044A")]
		k_EControllerActionOrigin_SteamV2_Start,
		[Token(Token = "0x400044B")]
		k_EControllerActionOrigin_SteamV2_Back,
		[Token(Token = "0x400044C")]
		k_EControllerActionOrigin_SteamV2_LeftPad_Touch,
		[Token(Token = "0x400044D")]
		k_EControllerActionOrigin_SteamV2_LeftPad_Swipe,
		[Token(Token = "0x400044E")]
		k_EControllerActionOrigin_SteamV2_LeftPad_Click,
		[Token(Token = "0x400044F")]
		k_EControllerActionOrigin_SteamV2_LeftPad_Pressure,
		[Token(Token = "0x4000450")]
		k_EControllerActionOrigin_SteamV2_LeftPad_DPadNorth,
		[Token(Token = "0x4000451")]
		k_EControllerActionOrigin_SteamV2_LeftPad_DPadSouth,
		[Token(Token = "0x4000452")]
		k_EControllerActionOrigin_SteamV2_LeftPad_DPadWest,
		[Token(Token = "0x4000453")]
		k_EControllerActionOrigin_SteamV2_LeftPad_DPadEast,
		[Token(Token = "0x4000454")]
		k_EControllerActionOrigin_SteamV2_RightPad_Touch,
		[Token(Token = "0x4000455")]
		k_EControllerActionOrigin_SteamV2_RightPad_Swipe,
		[Token(Token = "0x4000456")]
		k_EControllerActionOrigin_SteamV2_RightPad_Click,
		[Token(Token = "0x4000457")]
		k_EControllerActionOrigin_SteamV2_RightPad_Pressure,
		[Token(Token = "0x4000458")]
		k_EControllerActionOrigin_SteamV2_RightPad_DPadNorth,
		[Token(Token = "0x4000459")]
		k_EControllerActionOrigin_SteamV2_RightPad_DPadSouth,
		[Token(Token = "0x400045A")]
		k_EControllerActionOrigin_SteamV2_RightPad_DPadWest,
		[Token(Token = "0x400045B")]
		k_EControllerActionOrigin_SteamV2_RightPad_DPadEast,
		[Token(Token = "0x400045C")]
		k_EControllerActionOrigin_SteamV2_LeftTrigger_Pull,
		[Token(Token = "0x400045D")]
		k_EControllerActionOrigin_SteamV2_LeftTrigger_Click,
		[Token(Token = "0x400045E")]
		k_EControllerActionOrigin_SteamV2_RightTrigger_Pull,
		[Token(Token = "0x400045F")]
		k_EControllerActionOrigin_SteamV2_RightTrigger_Click,
		[Token(Token = "0x4000460")]
		k_EControllerActionOrigin_SteamV2_LeftStick_Move,
		[Token(Token = "0x4000461")]
		k_EControllerActionOrigin_SteamV2_LeftStick_Click,
		[Token(Token = "0x4000462")]
		k_EControllerActionOrigin_SteamV2_LeftStick_DPadNorth,
		[Token(Token = "0x4000463")]
		k_EControllerActionOrigin_SteamV2_LeftStick_DPadSouth,
		[Token(Token = "0x4000464")]
		k_EControllerActionOrigin_SteamV2_LeftStick_DPadWest,
		[Token(Token = "0x4000465")]
		k_EControllerActionOrigin_SteamV2_LeftStick_DPadEast,
		[Token(Token = "0x4000466")]
		k_EControllerActionOrigin_SteamV2_Gyro_Move,
		[Token(Token = "0x4000467")]
		k_EControllerActionOrigin_SteamV2_Gyro_Pitch,
		[Token(Token = "0x4000468")]
		k_EControllerActionOrigin_SteamV2_Gyro_Yaw,
		[Token(Token = "0x4000469")]
		k_EControllerActionOrigin_SteamV2_Gyro_Roll,
		[Token(Token = "0x400046A")]
		k_EControllerActionOrigin_Count
	}
	[Token(Token = "0x20000DC")]
	public enum ESteamControllerLEDFlag
	{
		[Token(Token = "0x400046C")]
		k_ESteamControllerLEDFlag_SetColor,
		[Token(Token = "0x400046D")]
		k_ESteamControllerLEDFlag_RestoreUserDefault
	}
	[Token(Token = "0x20000DD")]
	public enum EFriendRelationship
	{
		[Token(Token = "0x400046F")]
		k_EFriendRelationshipNone,
		[Token(Token = "0x4000470")]
		k_EFriendRelationshipBlocked,
		[Token(Token = "0x4000471")]
		k_EFriendRelationshipRequestRecipient,
		[Token(Token = "0x4000472")]
		k_EFriendRelationshipFriend,
		[Token(Token = "0x4000473")]
		k_EFriendRelationshipRequestInitiator,
		[Token(Token = "0x4000474")]
		k_EFriendRelationshipIgnored,
		[Token(Token = "0x4000475")]
		k_EFriendRelationshipIgnoredFriend,
		[Token(Token = "0x4000476")]
		k_EFriendRelationshipSuggested_DEPRECATED,
		[Token(Token = "0x4000477")]
		k_EFriendRelationshipMax
	}
	[Token(Token = "0x20000DE")]
	public enum EPersonaState
	{
		[Token(Token = "0x4000479")]
		k_EPersonaStateOffline,
		[Token(Token = "0x400047A")]
		k_EPersonaStateOnline,
		[Token(Token = "0x400047B")]
		k_EPersonaStateBusy,
		[Token(Token = "0x400047C")]
		k_EPersonaStateAway,
		[Token(Token = "0x400047D")]
		k_EPersonaStateSnooze,
		[Token(Token = "0x400047E")]
		k_EPersonaStateLookingToTrade,
		[Token(Token = "0x400047F")]
		k_EPersonaStateLookingToPlay,
		[Token(Token = "0x4000480")]
		k_EPersonaStateMax
	}
	[Token(Token = "0x20000DF")]
	[Flags]
	public enum EFriendFlags
	{
		[Token(Token = "0x4000482")]
		k_EFriendFlagNone = 0,
		[Token(Token = "0x4000483")]
		k_EFriendFlagBlocked = 1,
		[Token(Token = "0x4000484")]
		k_EFriendFlagFriendshipRequested = 2,
		[Token(Token = "0x4000485")]
		k_EFriendFlagImmediate = 4,
		[Token(Token = "0x4000486")]
		k_EFriendFlagClanMember = 8,
		[Token(Token = "0x4000487")]
		k_EFriendFlagOnGameServer = 0x10,
		[Token(Token = "0x4000488")]
		k_EFriendFlagRequestingFriendship = 0x80,
		[Token(Token = "0x4000489")]
		k_EFriendFlagRequestingInfo = 0x100,
		[Token(Token = "0x400048A")]
		k_EFriendFlagIgnored = 0x200,
		[Token(Token = "0x400048B")]
		k_EFriendFlagIgnoredFriend = 0x400,
		[Token(Token = "0x400048C")]
		k_EFriendFlagChatMember = 0x1000,
		[Token(Token = "0x400048D")]
		k_EFriendFlagAll = 0xFFFF
	}
	[Token(Token = "0x20000E0")]
	public enum EUserRestriction
	{
		[Token(Token = "0x400048F")]
		k_nUserRestrictionNone = 0,
		[Token(Token = "0x4000490")]
		k_nUserRestrictionUnknown = 1,
		[Token(Token = "0x4000491")]
		k_nUserRestrictionAnyChat = 2,
		[Token(Token = "0x4000492")]
		k_nUserRestrictionVoiceChat = 4,
		[Token(Token = "0x4000493")]
		k_nUserRestrictionGroupChat = 8,
		[Token(Token = "0x4000494")]
		k_nUserRestrictionRating = 0x10,
		[Token(Token = "0x4000495")]
		k_nUserRestrictionGameInvites = 0x20,
		[Token(Token = "0x4000496")]
		k_nUserRestrictionTrading = 0x40
	}
	[Token(Token = "0x20000E1")]
	public enum EOverlayToStoreFlag
	{
		[Token(Token = "0x4000498")]
		k_EOverlayToStoreFlag_None,
		[Token(Token = "0x4000499")]
		k_EOverlayToStoreFlag_AddToCart,
		[Token(Token = "0x400049A")]
		k_EOverlayToStoreFlag_AddToCartAndShow
	}
	[Token(Token = "0x20000E2")]
	[Flags]
	public enum EPersonaChange
	{
		[Token(Token = "0x400049C")]
		k_EPersonaChangeName = 1,
		[Token(Token = "0x400049D")]
		k_EPersonaChangeStatus = 2,
		[Token(Token = "0x400049E")]
		k_EPersonaChangeComeOnline = 4,
		[Token(Token = "0x400049F")]
		k_EPersonaChangeGoneOffline = 8,
		[Token(Token = "0x40004A0")]
		k_EPersonaChangeGamePlayed = 0x10,
		[Token(Token = "0x40004A1")]
		k_EPersonaChangeGameServer = 0x20,
		[Token(Token = "0x40004A2")]
		k_EPersonaChangeAvatar = 0x40,
		[Token(Token = "0x40004A3")]
		k_EPersonaChangeJoinedSource = 0x80,
		[Token(Token = "0x40004A4")]
		k_EPersonaChangeLeftSource = 0x100,
		[Token(Token = "0x40004A5")]
		k_EPersonaChangeRelationshipChanged = 0x200,
		[Token(Token = "0x40004A6")]
		k_EPersonaChangeNameFirstSet = 0x400,
		[Token(Token = "0x40004A7")]
		k_EPersonaChangeFacebookInfo = 0x800,
		[Token(Token = "0x40004A8")]
		k_EPersonaChangeNickname = 0x1000,
		[Token(Token = "0x40004A9")]
		k_EPersonaChangeSteamLevel = 0x2000
	}
	[Token(Token = "0x20000E3")]
	public enum EGCResults
	{
		[Token(Token = "0x40004AB")]
		k_EGCResultOK,
		[Token(Token = "0x40004AC")]
		k_EGCResultNoMessage,
		[Token(Token = "0x40004AD")]
		k_EGCResultBufferTooSmall,
		[Token(Token = "0x40004AE")]
		k_EGCResultNotLoggedOn,
		[Token(Token = "0x40004AF")]
		k_EGCResultInvalidMessage
	}
	[Token(Token = "0x20000E4")]
	public enum EHTMLMouseButton
	{
		[Token(Token = "0x40004B1")]
		eHTMLMouseButton_Left,
		[Token(Token = "0x40004B2")]
		eHTMLMouseButton_Right,
		[Token(Token = "0x40004B3")]
		eHTMLMouseButton_Middle
	}
	[Token(Token = "0x20000E5")]
	public enum EMouseCursor
	{
		[Token(Token = "0x40004B5")]
		dc_user,
		[Token(Token = "0x40004B6")]
		dc_none,
		[Token(Token = "0x40004B7")]
		dc_arrow,
		[Token(Token = "0x40004B8")]
		dc_ibeam,
		[Token(Token = "0x40004B9")]
		dc_hourglass,
		[Token(Token = "0x40004BA")]
		dc_waitarrow,
		[Token(Token = "0x40004BB")]
		dc_crosshair,
		[Token(Token = "0x40004BC")]
		dc_up,
		[Token(Token = "0x40004BD")]
		dc_sizenw,
		[Token(Token = "0x40004BE")]
		dc_sizese,
		[Token(Token = "0x40004BF")]
		dc_sizene,
		[Token(Token = "0x40004C0")]
		dc_sizesw,
		[Token(Token = "0x40004C1")]
		dc_sizew,
		[Token(Token = "0x40004C2")]
		dc_sizee,
		[Token(Token = "0x40004C3")]
		dc_sizen,
		[Token(Token = "0x40004C4")]
		dc_sizes,
		[Token(Token = "0x40004C5")]
		dc_sizewe,
		[Token(Token = "0x40004C6")]
		dc_sizens,
		[Token(Token = "0x40004C7")]
		dc_sizeall,
		[Token(Token = "0x40004C8")]
		dc_no,
		[Token(Token = "0x40004C9")]
		dc_hand,
		[Token(Token = "0x40004CA")]
		dc_blank,
		[Token(Token = "0x40004CB")]
		dc_middle_pan,
		[Token(Token = "0x40004CC")]
		dc_north_pan,
		[Token(Token = "0x40004CD")]
		dc_north_east_pan,
		[Token(Token = "0x40004CE")]
		dc_east_pan,
		[Token(Token = "0x40004CF")]
		dc_south_east_pan,
		[Token(Token = "0x40004D0")]
		dc_south_pan,
		[Token(Token = "0x40004D1")]
		dc_south_west_pan,
		[Token(Token = "0x40004D2")]
		dc_west_pan,
		[Token(Token = "0x40004D3")]
		dc_north_west_pan,
		[Token(Token = "0x40004D4")]
		dc_alias,
		[Token(Token = "0x40004D5")]
		dc_cell,
		[Token(Token = "0x40004D6")]
		dc_colresize,
		[Token(Token = "0x40004D7")]
		dc_copycur,
		[Token(Token = "0x40004D8")]
		dc_verticaltext,
		[Token(Token = "0x40004D9")]
		dc_rowresize,
		[Token(Token = "0x40004DA")]
		dc_zoomin,
		[Token(Token = "0x40004DB")]
		dc_zoomout,
		[Token(Token = "0x40004DC")]
		dc_help,
		[Token(Token = "0x40004DD")]
		dc_custom,
		[Token(Token = "0x40004DE")]
		dc_last
	}
	[Token(Token = "0x20000E6")]
	[Flags]
	public enum EHTMLKeyModifiers
	{
		[Token(Token = "0x40004E0")]
		k_eHTMLKeyModifier_None = 0,
		[Token(Token = "0x40004E1")]
		k_eHTMLKeyModifier_AltDown = 1,
		[Token(Token = "0x40004E2")]
		k_eHTMLKeyModifier_CtrlDown = 2,
		[Token(Token = "0x40004E3")]
		k_eHTMLKeyModifier_ShiftDown = 4
	}
	[Token(Token = "0x20000E7")]
	[Flags]
	public enum ESteamItemFlags
	{
		[Token(Token = "0x40004E5")]
		k_ESteamItemNoTrade = 1,
		[Token(Token = "0x40004E6")]
		k_ESteamItemRemoved = 0x100,
		[Token(Token = "0x40004E7")]
		k_ESteamItemConsumed = 0x200
	}
	[Token(Token = "0x20000E8")]
	public enum ELobbyType
	{
		[Token(Token = "0x40004E9")]
		k_ELobbyTypePrivate,
		[Token(Token = "0x40004EA")]
		k_ELobbyTypeFriendsOnly,
		[Token(Token = "0x40004EB")]
		k_ELobbyTypePublic,
		[Token(Token = "0x40004EC")]
		k_ELobbyTypeInvisible
	}
	[Token(Token = "0x20000E9")]
	public enum ELobbyComparison
	{
		[Token(Token = "0x40004EE")]
		k_ELobbyComparisonEqualToOrLessThan = -2,
		[Token(Token = "0x40004EF")]
		k_ELobbyComparisonLessThan,
		[Token(Token = "0x40004F0")]
		k_ELobbyComparisonEqual,
		[Token(Token = "0x40004F1")]
		k_ELobbyComparisonGreaterThan,
		[Token(Token = "0x40004F2")]
		k_ELobbyComparisonEqualToOrGreaterThan,
		[Token(Token = "0x40004F3")]
		k_ELobbyComparisonNotEqual
	}
	[Token(Token = "0x20000EA")]
	public enum ELobbyDistanceFilter
	{
		[Token(Token = "0x40004F5")]
		k_ELobbyDistanceFilterClose,
		[Token(Token = "0x40004F6")]
		k_ELobbyDistanceFilterDefault,
		[Token(Token = "0x40004F7")]
		k_ELobbyDistanceFilterFar,
		[Token(Token = "0x40004F8")]
		k_ELobbyDistanceFilterWorldwide
	}
	[Token(Token = "0x20000EB")]
	[Flags]
	public enum EChatMemberStateChange
	{
		[Token(Token = "0x40004FA")]
		k_EChatMemberStateChangeEntered = 1,
		[Token(Token = "0x40004FB")]
		k_EChatMemberStateChangeLeft = 2,
		[Token(Token = "0x40004FC")]
		k_EChatMemberStateChangeDisconnected = 4,
		[Token(Token = "0x40004FD")]
		k_EChatMemberStateChangeKicked = 8,
		[Token(Token = "0x40004FE")]
		k_EChatMemberStateChangeBanned = 0x10
	}
	[Token(Token = "0x20000EC")]
	public enum AudioPlayback_Status
	{
		[Token(Token = "0x4000500")]
		AudioPlayback_Undefined,
		[Token(Token = "0x4000501")]
		AudioPlayback_Playing,
		[Token(Token = "0x4000502")]
		AudioPlayback_Paused,
		[Token(Token = "0x4000503")]
		AudioPlayback_Idle
	}
	[Token(Token = "0x20000ED")]
	public enum EP2PSessionError
	{
		[Token(Token = "0x4000505")]
		k_EP2PSessionErrorNone,
		[Token(Token = "0x4000506")]
		k_EP2PSessionErrorNotRunningApp,
		[Token(Token = "0x4000507")]
		k_EP2PSessionErrorNoRightsToApp,
		[Token(Token = "0x4000508")]
		k_EP2PSessionErrorDestinationNotLoggedIn,
		[Token(Token = "0x4000509")]
		k_EP2PSessionErrorTimeout,
		[Token(Token = "0x400050A")]
		k_EP2PSessionErrorMax
	}
	[Token(Token = "0x20000EE")]
	public enum EP2PSend
	{
		[Token(Token = "0x400050C")]
		k_EP2PSendUnreliable,
		[Token(Token = "0x400050D")]
		k_EP2PSendUnreliableNoDelay,
		[Token(Token = "0x400050E")]
		k_EP2PSendReliable,
		[Token(Token = "0x400050F")]
		k_EP2PSendReliableWithBuffering
	}
	[Token(Token = "0x20000EF")]
	public enum ESNetSocketState
	{
		[Token(Token = "0x4000511")]
		k_ESNetSocketStateInvalid = 0,
		[Token(Token = "0x4000512")]
		k_ESNetSocketStateConnected = 1,
		[Token(Token = "0x4000513")]
		k_ESNetSocketStateInitiated = 10,
		[Token(Token = "0x4000514")]
		k_ESNetSocketStateLocalCandidatesFound = 11,
		[Token(Token = "0x4000515")]
		k_ESNetSocketStateReceivedRemoteCandidates = 12,
		[Token(Token = "0x4000516")]
		k_ESNetSocketStateChallengeHandshake = 15,
		[Token(Token = "0x4000517")]
		k_ESNetSocketStateDisconnecting = 21,
		[Token(Token = "0x4000518")]
		k_ESNetSocketStateLocalDisconnect = 22,
		[Token(Token = "0x4000519")]
		k_ESNetSocketStateTimeoutDuringConnect = 23,
		[Token(Token = "0x400051A")]
		k_ESNetSocketStateRemoteEndDisconnected = 24,
		[Token(Token = "0x400051B")]
		k_ESNetSocketStateConnectionBroken = 25
	}
	[Token(Token = "0x20000F0")]
	public enum ESNetSocketConnectionType
	{
		[Token(Token = "0x400051D")]
		k_ESNetSocketConnectionTypeNotConnected,
		[Token(Token = "0x400051E")]
		k_ESNetSocketConnectionTypeUDP,
		[Token(Token = "0x400051F")]
		k_ESNetSocketConnectionTypeUDPRelay
	}
	[Token(Token = "0x20000F1")]
	[Flags]
	public enum ERemoteStoragePlatform
	{
		[Token(Token = "0x4000521")]
		k_ERemoteStoragePlatformNone = 0,
		[Token(Token = "0x4000522")]
		k_ERemoteStoragePlatformWindows = 1,
		[Token(Token = "0x4000523")]
		k_ERemoteStoragePlatformOSX = 2,
		[Token(Token = "0x4000524")]
		k_ERemoteStoragePlatformPS3 = 4,
		[Token(Token = "0x4000525")]
		k_ERemoteStoragePlatformLinux = 8,
		[Token(Token = "0x4000526")]
		k_ERemoteStoragePlatformReserved2 = 0x10,
		[Token(Token = "0x4000527")]
		k_ERemoteStoragePlatformAll = -1
	}
	[Token(Token = "0x20000F2")]
	public enum ERemoteStoragePublishedFileVisibility
	{
		[Token(Token = "0x4000529")]
		k_ERemoteStoragePublishedFileVisibilityPublic,
		[Token(Token = "0x400052A")]
		k_ERemoteStoragePublishedFileVisibilityFriendsOnly,
		[Token(Token = "0x400052B")]
		k_ERemoteStoragePublishedFileVisibilityPrivate
	}
	[Token(Token = "0x20000F3")]
	public enum EWorkshopFileType
	{
		[Token(Token = "0x400052D")]
		k_EWorkshopFileTypeFirst = 0,
		[Token(Token = "0x400052E")]
		k_EWorkshopFileTypeCommunity = 0,
		[Token(Token = "0x400052F")]
		k_EWorkshopFileTypeMicrotransaction = 1,
		[Token(Token = "0x4000530")]
		k_EWorkshopFileTypeCollection = 2,
		[Token(Token = "0x4000531")]
		k_EWorkshopFileTypeArt = 3,
		[Token(Token = "0x4000532")]
		k_EWorkshopFileTypeVideo = 4,
		[Token(Token = "0x4000533")]
		k_EWorkshopFileTypeScreenshot = 5,
		[Token(Token = "0x4000534")]
		k_EWorkshopFileTypeGame = 6,
		[Token(Token = "0x4000535")]
		k_EWorkshopFileTypeSoftware = 7,
		[Token(Token = "0x4000536")]
		k_EWorkshopFileTypeConcept = 8,
		[Token(Token = "0x4000537")]
		k_EWorkshopFileTypeWebGuide = 9,
		[Token(Token = "0x4000538")]
		k_EWorkshopFileTypeIntegratedGuide = 10,
		[Token(Token = "0x4000539")]
		k_EWorkshopFileTypeMerch = 11,
		[Token(Token = "0x400053A")]
		k_EWorkshopFileTypeControllerBinding = 12,
		[Token(Token = "0x400053B")]
		k_EWorkshopFileTypeSteamworksAccessInvite = 13,
		[Token(Token = "0x400053C")]
		k_EWorkshopFileTypeSteamVideo = 14,
		[Token(Token = "0x400053D")]
		k_EWorkshopFileTypeGameManagedItem = 15,
		[Token(Token = "0x400053E")]
		k_EWorkshopFileTypeMax = 16
	}
	[Token(Token = "0x20000F4")]
	public enum EWorkshopVote
	{
		[Token(Token = "0x4000540")]
		k_EWorkshopVoteUnvoted,
		[Token(Token = "0x4000541")]
		k_EWorkshopVoteFor,
		[Token(Token = "0x4000542")]
		k_EWorkshopVoteAgainst,
		[Token(Token = "0x4000543")]
		k_EWorkshopVoteLater
	}
	[Token(Token = "0x20000F5")]
	public enum EWorkshopFileAction
	{
		[Token(Token = "0x4000545")]
		k_EWorkshopFileActionPlayed,
		[Token(Token = "0x4000546")]
		k_EWorkshopFileActionCompleted
	}
	[Token(Token = "0x20000F6")]
	public enum EWorkshopEnumerationType
	{
		[Token(Token = "0x4000548")]
		k_EWorkshopEnumerationTypeRankedByVote,
		[Token(Token = "0x4000549")]
		k_EWorkshopEnumerationTypeRecent,
		[Token(Token = "0x400054A")]
		k_EWorkshopEnumerationTypeTrending,
		[Token(Token = "0x400054B")]
		k_EWorkshopEnumerationTypeFavoritesOfFriends,
		[Token(Token = "0x400054C")]
		k_EWorkshopEnumerationTypeVotedByFriends,
		[Token(Token = "0x400054D")]
		k_EWorkshopEnumerationTypeContentByFriends,
		[Token(Token = "0x400054E")]
		k_EWorkshopEnumerationTypeRecentFromFollowedUsers
	}
	[Token(Token = "0x20000F7")]
	public enum EWorkshopVideoProvider
	{
		[Token(Token = "0x4000550")]
		k_EWorkshopVideoProviderNone,
		[Token(Token = "0x4000551")]
		k_EWorkshopVideoProviderYoutube
	}
	[Token(Token = "0x20000F8")]
	public enum EUGCReadAction
	{
		[Token(Token = "0x4000553")]
		k_EUGCRead_ContinueReadingUntilFinished,
		[Token(Token = "0x4000554")]
		k_EUGCRead_ContinueReading,
		[Token(Token = "0x4000555")]
		k_EUGCRead_Close
	}
	[Token(Token = "0x20000F9")]
	public enum EVRScreenshotType
	{
		[Token(Token = "0x4000557")]
		k_EVRScreenshotType_None,
		[Token(Token = "0x4000558")]
		k_EVRScreenshotType_Mono,
		[Token(Token = "0x4000559")]
		k_EVRScreenshotType_Stereo,
		[Token(Token = "0x400055A")]
		k_EVRScreenshotType_MonoCubemap,
		[Token(Token = "0x400055B")]
		k_EVRScreenshotType_MonoPanorama,
		[Token(Token = "0x400055C")]
		k_EVRScreenshotType_StereoPanorama
	}
	[Token(Token = "0x20000FA")]
	public enum EUGCMatchingUGCType
	{
		[Token(Token = "0x400055E")]
		k_EUGCMatchingUGCType_Items = 0,
		[Token(Token = "0x400055F")]
		k_EUGCMatchingUGCType_Items_Mtx = 1,
		[Token(Token = "0x4000560")]
		k_EUGCMatchingUGCType_Items_ReadyToUse = 2,
		[Token(Token = "0x4000561")]
		k_EUGCMatchingUGCType_Collections = 3,
		[Token(Token = "0x4000562")]
		k_EUGCMatchingUGCType_Artwork = 4,
		[Token(Token = "0x4000563")]
		k_EUGCMatchingUGCType_Videos = 5,
		[Token(Token = "0x4000564")]
		k_EUGCMatchingUGCType_Screenshots = 6,
		[Token(Token = "0x4000565")]
		k_EUGCMatchingUGCType_AllGuides = 7,
		[Token(Token = "0x4000566")]
		k_EUGCMatchingUGCType_WebGuides = 8,
		[Token(Token = "0x4000567")]
		k_EUGCMatchingUGCType_IntegratedGuides = 9,
		[Token(Token = "0x4000568")]
		k_EUGCMatchingUGCType_UsableInGame = 10,
		[Token(Token = "0x4000569")]
		k_EUGCMatchingUGCType_ControllerBindings = 11,
		[Token(Token = "0x400056A")]
		k_EUGCMatchingUGCType_GameManagedItems = 12,
		[Token(Token = "0x400056B")]
		k_EUGCMatchingUGCType_All = -1
	}
	[Token(Token = "0x20000FB")]
	public enum EUserUGCList
	{
		[Token(Token = "0x400056D")]
		k_EUserUGCList_Published,
		[Token(Token = "0x400056E")]
		k_EUserUGCList_VotedOn,
		[Token(Token = "0x400056F")]
		k_EUserUGCList_VotedUp,
		[Token(Token = "0x4000570")]
		k_EUserUGCList_VotedDown,
		[Token(Token = "0x4000571")]
		k_EUserUGCList_WillVoteLater,
		[Token(Token = "0x4000572")]
		k_EUserUGCList_Favorited,
		[Token(Token = "0x4000573")]
		k_EUserUGCList_Subscribed,
		[Token(Token = "0x4000574")]
		k_EUserUGCList_UsedOrPlayed,
		[Token(Token = "0x4000575")]
		k_EUserUGCList_Followed
	}
	[Token(Token = "0x20000FC")]
	public enum EUserUGCListSortOrder
	{
		[Token(Token = "0x4000577")]
		k_EUserUGCListSortOrder_CreationOrderDesc,
		[Token(Token = "0x4000578")]
		k_EUserUGCListSortOrder_CreationOrderAsc,
		[Token(Token = "0x4000579")]
		k_EUserUGCListSortOrder_TitleAsc,
		[Token(Token = "0x400057A")]
		k_EUserUGCListSortOrder_LastUpdatedDesc,
		[Token(Token = "0x400057B")]
		k_EUserUGCListSortOrder_SubscriptionDateDesc,
		[Token(Token = "0x400057C")]
		k_EUserUGCListSortOrder_VoteScoreDesc,
		[Token(Token = "0x400057D")]
		k_EUserUGCListSortOrder_ForModeration
	}
	[Token(Token = "0x20000FD")]
	public enum EUGCQuery
	{
		[Token(Token = "0x400057F")]
		k_EUGCQuery_RankedByVote,
		[Token(Token = "0x4000580")]
		k_EUGCQuery_RankedByPublicationDate,
		[Token(Token = "0x4000581")]
		k_EUGCQuery_AcceptedForGameRankedByAcceptanceDate,
		[Token(Token = "0x4000582")]
		k_EUGCQuery_RankedByTrend,
		[Token(Token = "0x4000583")]
		k_EUGCQuery_FavoritedByFriendsRankedByPublicationDate,
		[Token(Token = "0x4000584")]
		k_EUGCQuery_CreatedByFriendsRankedByPublicationDate,
		[Token(Token = "0x4000585")]
		k_EUGCQuery_RankedByNumTimesReported,
		[Token(Token = "0x4000586")]
		k_EUGCQuery_CreatedByFollowedUsersRankedByPublicationDate,
		[Token(Token = "0x4000587")]
		k_EUGCQuery_NotYetRated,
		[Token(Token = "0x4000588")]
		k_EUGCQuery_RankedByTotalVotesAsc,
		[Token(Token = "0x4000589")]
		k_EUGCQuery_RankedByVotesUp,
		[Token(Token = "0x400058A")]
		k_EUGCQuery_RankedByTextSearch,
		[Token(Token = "0x400058B")]
		k_EUGCQuery_RankedByTotalUniqueSubscriptions,
		[Token(Token = "0x400058C")]
		k_EUGCQuery_RankedByPlaytimeTrend,
		[Token(Token = "0x400058D")]
		k_EUGCQuery_RankedByTotalPlaytime,
		[Token(Token = "0x400058E")]
		k_EUGCQuery_RankedByAveragePlaytimeTrend,
		[Token(Token = "0x400058F")]
		k_EUGCQuery_RankedByLifetimeAveragePlaytime,
		[Token(Token = "0x4000590")]
		k_EUGCQuery_RankedByPlaytimeSessionsTrend,
		[Token(Token = "0x4000591")]
		k_EUGCQuery_RankedByLifetimePlaytimeSessions
	}
	[Token(Token = "0x20000FE")]
	public enum EItemUpdateStatus
	{
		[Token(Token = "0x4000593")]
		k_EItemUpdateStatusInvalid,
		[Token(Token = "0x4000594")]
		k_EItemUpdateStatusPreparingConfig,
		[Token(Token = "0x4000595")]
		k_EItemUpdateStatusPreparingContent,
		[Token(Token = "0x4000596")]
		k_EItemUpdateStatusUploadingContent,
		[Token(Token = "0x4000597")]
		k_EItemUpdateStatusUploadingPreviewFile,
		[Token(Token = "0x4000598")]
		k_EItemUpdateStatusCommittingChanges
	}
	[Token(Token = "0x20000FF")]
	[Flags]
	public enum EItemState
	{
		[Token(Token = "0x400059A")]
		k_EItemStateNone = 0,
		[Token(Token = "0x400059B")]
		k_EItemStateSubscribed = 1,
		[Token(Token = "0x400059C")]
		k_EItemStateLegacyItem = 2,
		[Token(Token = "0x400059D")]
		k_EItemStateInstalled = 4,
		[Token(Token = "0x400059E")]
		k_EItemStateNeedsUpdate = 8,
		[Token(Token = "0x400059F")]
		k_EItemStateDownloading = 0x10,
		[Token(Token = "0x40005A0")]
		k_EItemStateDownloadPending = 0x20
	}
	[Token(Token = "0x2000100")]
	public enum EItemStatistic
	{
		[Token(Token = "0x40005A2")]
		k_EItemStatistic_NumSubscriptions,
		[Token(Token = "0x40005A3")]
		k_EItemStatistic_NumFavorites,
		[Token(Token = "0x40005A4")]
		k_EItemStatistic_NumFollowers,
		[Token(Token = "0x40005A5")]
		k_EItemStatistic_NumUniqueSubscriptions,
		[Token(Token = "0x40005A6")]
		k_EItemStatistic_NumUniqueFavorites,
		[Token(Token = "0x40005A7")]
		k_EItemStatistic_NumUniqueFollowers,
		[Token(Token = "0x40005A8")]
		k_EItemStatistic_NumUniqueWebsiteViews,
		[Token(Token = "0x40005A9")]
		k_EItemStatistic_ReportScore,
		[Token(Token = "0x40005AA")]
		k_EItemStatistic_NumSecondsPlayed,
		[Token(Token = "0x40005AB")]
		k_EItemStatistic_NumPlaytimeSessions,
		[Token(Token = "0x40005AC")]
		k_EItemStatistic_NumComments,
		[Token(Token = "0x40005AD")]
		k_EItemStatistic_NumSecondsPlayedDuringTimePeriod,
		[Token(Token = "0x40005AE")]
		k_EItemStatistic_NumPlaytimeSessionsDuringTimePeriod
	}
	[Token(Token = "0x2000101")]
	public enum EItemPreviewType
	{
		[Token(Token = "0x40005B0")]
		k_EItemPreviewType_Image = 0,
		[Token(Token = "0x40005B1")]
		k_EItemPreviewType_YouTubeVideo = 1,
		[Token(Token = "0x40005B2")]
		k_EItemPreviewType_Sketchfab = 2,
		[Token(Token = "0x40005B3")]
		k_EItemPreviewType_EnvironmentMap_HorizontalCross = 3,
		[Token(Token = "0x40005B4")]
		k_EItemPreviewType_EnvironmentMap_LatLong = 4,
		[Token(Token = "0x40005B5")]
		k_EItemPreviewType_ReservedMax = 255
	}
	[Token(Token = "0x2000102")]
	public enum EFailureType
	{
		[Token(Token = "0x40005B7")]
		k_EFailureFlushedCallbackQueue,
		[Token(Token = "0x40005B8")]
		k_EFailurePipeFail
	}
	[Token(Token = "0x2000103")]
	public enum ELeaderboardDataRequest
	{
		[Token(Token = "0x40005BA")]
		k_ELeaderboardDataRequestGlobal,
		[Token(Token = "0x40005BB")]
		k_ELeaderboardDataRequestGlobalAroundUser,
		[Token(Token = "0x40005BC")]
		k_ELeaderboardDataRequestFriends,
		[Token(Token = "0x40005BD")]
		k_ELeaderboardDataRequestUsers
	}
	[Token(Token = "0x2000104")]
	public enum ELeaderboardSortMethod
	{
		[Token(Token = "0x40005BF")]
		k_ELeaderboardSortMethodNone,
		[Token(Token = "0x40005C0")]
		k_ELeaderboardSortMethodAscending,
		[Token(Token = "0x40005C1")]
		k_ELeaderboardSortMethodDescending
	}
	[Token(Token = "0x2000105")]
	public enum ELeaderboardDisplayType
	{
		[Token(Token = "0x40005C3")]
		k_ELeaderboardDisplayTypeNone,
		[Token(Token = "0x40005C4")]
		k_ELeaderboardDisplayTypeNumeric,
		[Token(Token = "0x40005C5")]
		k_ELeaderboardDisplayTypeTimeSeconds,
		[Token(Token = "0x40005C6")]
		k_ELeaderboardDisplayTypeTimeMilliSeconds
	}
	[Token(Token = "0x2000106")]
	public enum ELeaderboardUploadScoreMethod
	{
		[Token(Token = "0x40005C8")]
		k_ELeaderboardUploadScoreMethodNone,
		[Token(Token = "0x40005C9")]
		k_ELeaderboardUploadScoreMethodKeepBest,
		[Token(Token = "0x40005CA")]
		k_ELeaderboardUploadScoreMethodForceUpdate
	}
	[Token(Token = "0x2000107")]
	public enum ESteamAPICallFailure
	{
		[Token(Token = "0x40005CC")]
		k_ESteamAPICallFailureNone = -1,
		[Token(Token = "0x40005CD")]
		k_ESteamAPICallFailureSteamGone,
		[Token(Token = "0x40005CE")]
		k_ESteamAPICallFailureNetworkFailure,
		[Token(Token = "0x40005CF")]
		k_ESteamAPICallFailureInvalidHandle,
		[Token(Token = "0x40005D0")]
		k_ESteamAPICallFailureMismatchedCallback
	}
	[Token(Token = "0x2000108")]
	public enum EGamepadTextInputMode
	{
		[Token(Token = "0x40005D2")]
		k_EGamepadTextInputModeNormal,
		[Token(Token = "0x40005D3")]
		k_EGamepadTextInputModePassword
	}
	[Token(Token = "0x2000109")]
	public enum EGamepadTextInputLineMode
	{
		[Token(Token = "0x40005D5")]
		k_EGamepadTextInputLineModeSingleLine,
		[Token(Token = "0x40005D6")]
		k_EGamepadTextInputLineModeMultipleLines
	}
	[Token(Token = "0x200010A")]
	public enum ECheckFileSignature
	{
		[Token(Token = "0x40005D8")]
		k_ECheckFileSignatureInvalidSignature,
		[Token(Token = "0x40005D9")]
		k_ECheckFileSignatureValidSignature,
		[Token(Token = "0x40005DA")]
		k_ECheckFileSignatureFileNotFound,
		[Token(Token = "0x40005DB")]
		k_ECheckFileSignatureNoSignaturesFoundForThisApp,
		[Token(Token = "0x40005DC")]
		k_ECheckFileSignatureNoSignaturesFoundForThisFile
	}
	[Token(Token = "0x200010B")]
	public enum EMatchMakingServerResponse
	{
		[Token(Token = "0x40005DE")]
		eServerResponded,
		[Token(Token = "0x40005DF")]
		eServerFailedToRespond,
		[Token(Token = "0x40005E0")]
		eNoServersListedOnMasterServer
	}
	[Token(Token = "0x200010C")]
	public enum EServerMode
	{
		[Token(Token = "0x40005E2")]
		eServerModeInvalid,
		[Token(Token = "0x40005E3")]
		eServerModeNoAuthentication,
		[Token(Token = "0x40005E4")]
		eServerModeAuthentication,
		[Token(Token = "0x40005E5")]
		eServerModeAuthenticationAndSecure
	}
	[Token(Token = "0x200010D")]
	public enum EResult
	{
		[Token(Token = "0x40005E7")]
		k_EResultOK = 1,
		[Token(Token = "0x40005E8")]
		k_EResultFail = 2,
		[Token(Token = "0x40005E9")]
		k_EResultNoConnection = 3,
		[Token(Token = "0x40005EA")]
		k_EResultInvalidPassword = 5,
		[Token(Token = "0x40005EB")]
		k_EResultLoggedInElsewhere = 6,
		[Token(Token = "0x40005EC")]
		k_EResultInvalidProtocolVer = 7,
		[Token(Token = "0x40005ED")]
		k_EResultInvalidParam = 8,
		[Token(Token = "0x40005EE")]
		k_EResultFileNotFound = 9,
		[Token(Token = "0x40005EF")]
		k_EResultBusy = 10,
		[Token(Token = "0x40005F0")]
		k_EResultInvalidState = 11,
		[Token(Token = "0x40005F1")]
		k_EResultInvalidName = 12,
		[Token(Token = "0x40005F2")]
		k_EResultInvalidEmail = 13,
		[Token(Token = "0x40005F3")]
		k_EResultDuplicateName = 14,
		[Token(Token = "0x40005F4")]
		k_EResultAccessDenied = 15,
		[Token(Token = "0x40005F5")]
		k_EResultTimeout = 16,
		[Token(Token = "0x40005F6")]
		k_EResultBanned = 17,
		[Token(Token = "0x40005F7")]
		k_EResultAccountNotFound = 18,
		[Token(Token = "0x40005F8")]
		k_EResultInvalidSteamID = 19,
		[Token(Token = "0x40005F9")]
		k_EResultServiceUnavailable = 20,
		[Token(Token = "0x40005FA")]
		k_EResultNotLoggedOn = 21,
		[Token(Token = "0x40005FB")]
		k_EResultPending = 22,
		[Token(Token = "0x40005FC")]
		k_EResultEncryptionFailure = 23,
		[Token(Token = "0x40005FD")]
		k_EResultInsufficientPrivilege = 24,
		[Token(Token = "0x40005FE")]
		k_EResultLimitExceeded = 25,
		[Token(Token = "0x40005FF")]
		k_EResultRevoked = 26,
		[Token(Token = "0x4000600")]
		k_EResultExpired = 27,
		[Token(Token = "0x4000601")]
		k_EResultAlreadyRedeemed = 28,
		[Token(Token = "0x4000602")]
		k_EResultDuplicateRequest = 29,
		[Token(Token = "0x4000603")]
		k_EResultAlreadyOwned = 30,
		[Token(Token = "0x4000604")]
		k_EResultIPNotFound = 31,
		[Token(Token = "0x4000605")]
		k_EResultPersistFailed = 32,
		[Token(Token = "0x4000606")]
		k_EResultLockingFailed = 33,
		[Token(Token = "0x4000607")]
		k_EResultLogonSessionReplaced = 34,
		[Token(Token = "0x4000608")]
		k_EResultConnectFailed = 35,
		[Token(Token = "0x4000609")]
		k_EResultHandshakeFailed = 36,
		[Token(Token = "0x400060A")]
		k_EResultIOFailure = 37,
		[Token(Token = "0x400060B")]
		k_EResultRemoteDisconnect = 38,
		[Token(Token = "0x400060C")]
		k_EResultShoppingCartNotFound = 39,
		[Token(Token = "0x400060D")]
		k_EResultBlocked = 40,
		[Token(Token = "0x400060E")]
		k_EResultIgnored = 41,
		[Token(Token = "0x400060F")]
		k_EResultNoMatch = 42,
		[Token(Token = "0x4000610")]
		k_EResultAccountDisabled = 43,
		[Token(Token = "0x4000611")]
		k_EResultServiceReadOnly = 44,
		[Token(Token = "0x4000612")]
		k_EResultAccountNotFeatured = 45,
		[Token(Token = "0x4000613")]
		k_EResultAdministratorOK = 46,
		[Token(Token = "0x4000614")]
		k_EResultContentVersion = 47,
		[Token(Token = "0x4000615")]
		k_EResultTryAnotherCM = 48,
		[Token(Token = "0x4000616")]
		k_EResultPasswordRequiredToKickSession = 49,
		[Token(Token = "0x4000617")]
		k_EResultAlreadyLoggedInElsewhere = 50,
		[Token(Token = "0x4000618")]
		k_EResultSuspended = 51,
		[Token(Token = "0x4000619")]
		k_EResultCancelled = 52,
		[Token(Token = "0x400061A")]
		k_EResultDataCorruption = 53,
		[Token(Token = "0x400061B")]
		k_EResultDiskFull = 54,
		[Token(Token = "0x400061C")]
		k_EResultRemoteCallFailed = 55,
		[Token(Token = "0x400061D")]
		k_EResultPasswordUnset = 56,
		[Token(Token = "0x400061E")]
		k_EResultExternalAccountUnlinked = 57,
		[Token(Token = "0x400061F")]
		k_EResultPSNTicketInvalid = 58,
		[Token(Token = "0x4000620")]
		k_EResultExternalAccountAlreadyLinked = 59,
		[Token(Token = "0x4000621")]
		k_EResultRemoteFileConflict = 60,
		[Token(Token = "0x4000622")]
		k_EResultIllegalPassword = 61,
		[Token(Token = "0x4000623")]
		k_EResultSameAsPreviousValue = 62,
		[Token(Token = "0x4000624")]
		k_EResultAccountLogonDenied = 63,
		[Token(Token = "0x4000625")]
		k_EResultCannotUseOldPassword = 64,
		[Token(Token = "0x4000626")]
		k_EResultInvalidLoginAuthCode = 65,
		[Token(Token = "0x4000627")]
		k_EResultAccountLogonDeniedNoMail = 66,
		[Token(Token = "0x4000628")]
		k_EResultHardwareNotCapableOfIPT = 67,
		[Token(Token = "0x4000629")]
		k_EResultIPTInitError = 68,
		[Token(Token = "0x400062A")]
		k_EResultParentalControlRestricted = 69,
		[Token(Token = "0x400062B")]
		k_EResultFacebookQueryError = 70,
		[Token(Token = "0x400062C")]
		k_EResultExpiredLoginAuthCode = 71,
		[Token(Token = "0x400062D")]
		k_EResultIPLoginRestrictionFailed = 72,
		[Token(Token = "0x400062E")]
		k_EResultAccountLockedDown = 73,
		[Token(Token = "0x400062F")]
		k_EResultAccountLogonDeniedVerifiedEmailRequired = 74,
		[Token(Token = "0x4000630")]
		k_EResultNoMatchingURL = 75,
		[Token(Token = "0x4000631")]
		k_EResultBadResponse = 76,
		[Token(Token = "0x4000632")]
		k_EResultRequirePasswordReEntry = 77,
		[Token(Token = "0x4000633")]
		k_EResultValueOutOfRange = 78,
		[Token(Token = "0x4000634")]
		k_EResultUnexpectedError = 79,
		[Token(Token = "0x4000635")]
		k_EResultDisabled = 80,
		[Token(Token = "0x4000636")]
		k_EResultInvalidCEGSubmission = 81,
		[Token(Token = "0x4000637")]
		k_EResultRestrictedDevice = 82,
		[Token(Token = "0x4000638")]
		k_EResultRegionLocked = 83,
		[Token(Token = "0x4000639")]
		k_EResultRateLimitExceeded = 84,
		[Token(Token = "0x400063A")]
		k_EResultAccountLoginDeniedNeedTwoFactor = 85,
		[Token(Token = "0x400063B")]
		k_EResultItemDeleted = 86,
		[Token(Token = "0x400063C")]
		k_EResultAccountLoginDeniedThrottle = 87,
		[Token(Token = "0x400063D")]
		k_EResultTwoFactorCodeMismatch = 88,
		[Token(Token = "0x400063E")]
		k_EResultTwoFactorActivationCodeMismatch = 89,
		[Token(Token = "0x400063F")]
		k_EResultAccountAssociatedToMultiplePartners = 90,
		[Token(Token = "0x4000640")]
		k_EResultNotModified = 91,
		[Token(Token = "0x4000641")]
		k_EResultNoMobileDevice = 92,
		[Token(Token = "0x4000642")]
		k_EResultTimeNotSynced = 93,
		[Token(Token = "0x4000643")]
		k_EResultSmsCodeFailed = 94,
		[Token(Token = "0x4000644")]
		k_EResultAccountLimitExceeded = 95,
		[Token(Token = "0x4000645")]
		k_EResultAccountActivityLimitExceeded = 96,
		[Token(Token = "0x4000646")]
		k_EResultPhoneActivityLimitExceeded = 97,
		[Token(Token = "0x4000647")]
		k_EResultRefundToWallet = 98,
		[Token(Token = "0x4000648")]
		k_EResultEmailSendFailure = 99,
		[Token(Token = "0x4000649")]
		k_EResultNotSettled = 100,
		[Token(Token = "0x400064A")]
		k_EResultNeedCaptcha = 101,
		[Token(Token = "0x400064B")]
		k_EResultGSLTDenied = 102,
		[Token(Token = "0x400064C")]
		k_EResultGSOwnerDenied = 103,
		[Token(Token = "0x400064D")]
		k_EResultInvalidItemType = 104,
		[Token(Token = "0x400064E")]
		k_EResultIPBanned = 105,
		[Token(Token = "0x400064F")]
		k_EResultGSLTExpired = 106,
		[Token(Token = "0x4000650")]
		k_EResultInsufficientFunds = 107,
		[Token(Token = "0x4000651")]
		k_EResultTooManyPending = 108
	}
	[Token(Token = "0x200010E")]
	public enum EVoiceResult
	{
		[Token(Token = "0x4000653")]
		k_EVoiceResultOK,
		[Token(Token = "0x4000654")]
		k_EVoiceResultNotInitialized,
		[Token(Token = "0x4000655")]
		k_EVoiceResultNotRecording,
		[Token(Token = "0x4000656")]
		k_EVoiceResultNoData,
		[Token(Token = "0x4000657")]
		k_EVoiceResultBufferTooSmall,
		[Token(Token = "0x4000658")]
		k_EVoiceResultDataCorrupted,
		[Token(Token = "0x4000659")]
		k_EVoiceResultRestricted,
		[Token(Token = "0x400065A")]
		k_EVoiceResultUnsupportedCodec,
		[Token(Token = "0x400065B")]
		k_EVoiceResultReceiverOutOfDate,
		[Token(Token = "0x400065C")]
		k_EVoiceResultReceiverDidNotAnswer
	}
	[Token(Token = "0x200010F")]
	public enum EDenyReason
	{
		[Token(Token = "0x400065E")]
		k_EDenyInvalid,
		[Token(Token = "0x400065F")]
		k_EDenyInvalidVersion,
		[Token(Token = "0x4000660")]
		k_EDenyGeneric,
		[Token(Token = "0x4000661")]
		k_EDenyNotLoggedOn,
		[Token(Token = "0x4000662")]
		k_EDenyNoLicense,
		[Token(Token = "0x4000663")]
		k_EDenyCheater,
		[Token(Token = "0x4000664")]
		k_EDenyLoggedInElseWhere,
		[Token(Token = "0x4000665")]
		k_EDenyUnknownText,
		[Token(Token = "0x4000666")]
		k_EDenyIncompatibleAnticheat,
		[Token(Token = "0x4000667")]
		k_EDenyMemoryCorruption,
		[Token(Token = "0x4000668")]
		k_EDenyIncompatibleSoftware,
		[Token(Token = "0x4000669")]
		k_EDenySteamConnectionLost,
		[Token(Token = "0x400066A")]
		k_EDenySteamConnectionError,
		[Token(Token = "0x400066B")]
		k_EDenySteamResponseTimedOut,
		[Token(Token = "0x400066C")]
		k_EDenySteamValidationStalled,
		[Token(Token = "0x400066D")]
		k_EDenySteamOwnerLeftGuestUser
	}
	[Token(Token = "0x2000110")]
	public enum EBeginAuthSessionResult
	{
		[Token(Token = "0x400066F")]
		k_EBeginAuthSessionResultOK,
		[Token(Token = "0x4000670")]
		k_EBeginAuthSessionResultInvalidTicket,
		[Token(Token = "0x4000671")]
		k_EBeginAuthSessionResultDuplicateRequest,
		[Token(Token = "0x4000672")]
		k_EBeginAuthSessionResultInvalidVersion,
		[Token(Token = "0x4000673")]
		k_EBeginAuthSessionResultGameMismatch,
		[Token(Token = "0x4000674")]
		k_EBeginAuthSessionResultExpiredTicket
	}
	[Token(Token = "0x2000111")]
	public enum EAuthSessionResponse
	{
		[Token(Token = "0x4000676")]
		k_EAuthSessionResponseOK,
		[Token(Token = "0x4000677")]
		k_EAuthSessionResponseUserNotConnectedToSteam,
		[Token(Token = "0x4000678")]
		k_EAuthSessionResponseNoLicenseOrExpired,
		[Token(Token = "0x4000679")]
		k_EAuthSessionResponseVACBanned,
		[Token(Token = "0x400067A")]
		k_EAuthSessionResponseLoggedInElseWhere,
		[Token(Token = "0x400067B")]
		k_EAuthSessionResponseVACCheckTimedOut,
		[Token(Token = "0x400067C")]
		k_EAuthSessionResponseAuthTicketCanceled,
		[Token(Token = "0x400067D")]
		k_EAuthSessionResponseAuthTicketInvalidAlreadyUsed,
		[Token(Token = "0x400067E")]
		k_EAuthSessionResponseAuthTicketInvalid,
		[Token(Token = "0x400067F")]
		k_EAuthSessionResponsePublisherIssuedBan
	}
	[Token(Token = "0x2000112")]
	public enum EUserHasLicenseForAppResult
	{
		[Token(Token = "0x4000681")]
		k_EUserHasLicenseResultHasLicense,
		[Token(Token = "0x4000682")]
		k_EUserHasLicenseResultDoesNotHaveLicense,
		[Token(Token = "0x4000683")]
		k_EUserHasLicenseResultNoAuth
	}
	[Token(Token = "0x2000113")]
	public enum EAccountType
	{
		[Token(Token = "0x4000685")]
		k_EAccountTypeInvalid,
		[Token(Token = "0x4000686")]
		k_EAccountTypeIndividual,
		[Token(Token = "0x4000687")]
		k_EAccountTypeMultiseat,
		[Token(Token = "0x4000688")]
		k_EAccountTypeGameServer,
		[Token(Token = "0x4000689")]
		k_EAccountTypeAnonGameServer,
		[Token(Token = "0x400068A")]
		k_EAccountTypePending,
		[Token(Token = "0x400068B")]
		k_EAccountTypeContentServer,
		[Token(Token = "0x400068C")]
		k_EAccountTypeClan,
		[Token(Token = "0x400068D")]
		k_EAccountTypeChat,
		[Token(Token = "0x400068E")]
		k_EAccountTypeConsoleUser,
		[Token(Token = "0x400068F")]
		k_EAccountTypeAnonUser,
		[Token(Token = "0x4000690")]
		k_EAccountTypeMax
	}
	[Token(Token = "0x2000114")]
	public enum EAppReleaseState
	{
		[Token(Token = "0x4000692")]
		k_EAppReleaseState_Unknown,
		[Token(Token = "0x4000693")]
		k_EAppReleaseState_Unavailable,
		[Token(Token = "0x4000694")]
		k_EAppReleaseState_Prerelease,
		[Token(Token = "0x4000695")]
		k_EAppReleaseState_PreloadOnly,
		[Token(Token = "0x4000696")]
		k_EAppReleaseState_Released
	}
	[Token(Token = "0x2000115")]
	[Flags]
	public enum EAppOwnershipFlags
	{
		[Token(Token = "0x4000698")]
		k_EAppOwnershipFlags_None = 0,
		[Token(Token = "0x4000699")]
		k_EAppOwnershipFlags_OwnsLicense = 1,
		[Token(Token = "0x400069A")]
		k_EAppOwnershipFlags_FreeLicense = 2,
		[Token(Token = "0x400069B")]
		k_EAppOwnershipFlags_RegionRestricted = 4,
		[Token(Token = "0x400069C")]
		k_EAppOwnershipFlags_LowViolence = 8,
		[Token(Token = "0x400069D")]
		k_EAppOwnershipFlags_InvalidPlatform = 0x10,
		[Token(Token = "0x400069E")]
		k_EAppOwnershipFlags_SharedLicense = 0x20,
		[Token(Token = "0x400069F")]
		k_EAppOwnershipFlags_FreeWeekend = 0x40,
		[Token(Token = "0x40006A0")]
		k_EAppOwnershipFlags_RetailLicense = 0x80,
		[Token(Token = "0x40006A1")]
		k_EAppOwnershipFlags_LicenseLocked = 0x100,
		[Token(Token = "0x40006A2")]
		k_EAppOwnershipFlags_LicensePending = 0x200,
		[Token(Token = "0x40006A3")]
		k_EAppOwnershipFlags_LicenseExpired = 0x400,
		[Token(Token = "0x40006A4")]
		k_EAppOwnershipFlags_LicensePermanent = 0x800,
		[Token(Token = "0x40006A5")]
		k_EAppOwnershipFlags_LicenseRecurring = 0x1000,
		[Token(Token = "0x40006A6")]
		k_EAppOwnershipFlags_LicenseCanceled = 0x2000,
		[Token(Token = "0x40006A7")]
		k_EAppOwnershipFlags_AutoGrant = 0x4000,
		[Token(Token = "0x40006A8")]
		k_EAppOwnershipFlags_PendingGift = 0x8000,
		[Token(Token = "0x40006A9")]
		k_EAppOwnershipFlags_RentalNotActivated = 0x10000,
		[Token(Token = "0x40006AA")]
		k_EAppOwnershipFlags_Rental = 0x20000,
		[Token(Token = "0x40006AB")]
		k_EAppOwnershipFlags_SiteLicense = 0x40000
	}
	[Token(Token = "0x2000116")]
	[Flags]
	public enum EAppType
	{
		[Token(Token = "0x40006AD")]
		k_EAppType_Invalid = 0,
		[Token(Token = "0x40006AE")]
		k_EAppType_Game = 1,
		[Token(Token = "0x40006AF")]
		k_EAppType_Application = 2,
		[Token(Token = "0x40006B0")]
		k_EAppType_Tool = 4,
		[Token(Token = "0x40006B1")]
		k_EAppType_Demo = 8,
		[Token(Token = "0x40006B2")]
		k_EAppType_Media_DEPRECATED = 0x10,
		[Token(Token = "0x40006B3")]
		k_EAppType_DLC = 0x20,
		[Token(Token = "0x40006B4")]
		k_EAppType_Guide = 0x40,
		[Token(Token = "0x40006B5")]
		k_EAppType_Driver = 0x80,
		[Token(Token = "0x40006B6")]
		k_EAppType_Config = 0x100,
		[Token(Token = "0x40006B7")]
		k_EAppType_Hardware = 0x200,
		[Token(Token = "0x40006B8")]
		k_EAppType_Franchise = 0x400,
		[Token(Token = "0x40006B9")]
		k_EAppType_Video = 0x800,
		[Token(Token = "0x40006BA")]
		k_EAppType_Plugin = 0x1000,
		[Token(Token = "0x40006BB")]
		k_EAppType_Music = 0x2000,
		[Token(Token = "0x40006BC")]
		k_EAppType_Series = 0x4000,
		[Token(Token = "0x40006BD")]
		k_EAppType_Shortcut = 0x40000000,
		[Token(Token = "0x40006BE")]
		k_EAppType_DepotOnly = -2147483647
	}
	[Token(Token = "0x2000117")]
	public enum ESteamUserStatType
	{
		[Token(Token = "0x40006C0")]
		k_ESteamUserStatTypeINVALID,
		[Token(Token = "0x40006C1")]
		k_ESteamUserStatTypeINT,
		[Token(Token = "0x40006C2")]
		k_ESteamUserStatTypeFLOAT,
		[Token(Token = "0x40006C3")]
		k_ESteamUserStatTypeAVGRATE,
		[Token(Token = "0x40006C4")]
		k_ESteamUserStatTypeACHIEVEMENTS,
		[Token(Token = "0x40006C5")]
		k_ESteamUserStatTypeGROUPACHIEVEMENTS,
		[Token(Token = "0x40006C6")]
		k_ESteamUserStatTypeMAX
	}
	[Token(Token = "0x2000118")]
	public enum EChatEntryType
	{
		[Token(Token = "0x40006C8")]
		k_EChatEntryTypeInvalid = 0,
		[Token(Token = "0x40006C9")]
		k_EChatEntryTypeChatMsg = 1,
		[Token(Token = "0x40006CA")]
		k_EChatEntryTypeTyping = 2,
		[Token(Token = "0x40006CB")]
		k_EChatEntryTypeInviteGame = 3,
		[Token(Token = "0x40006CC")]
		k_EChatEntryTypeEmote = 4,
		[Token(Token = "0x40006CD")]
		k_EChatEntryTypeLeftConversation = 6,
		[Token(Token = "0x40006CE")]
		k_EChatEntryTypeEntered = 7,
		[Token(Token = "0x40006CF")]
		k_EChatEntryTypeWasKicked = 8,
		[Token(Token = "0x40006D0")]
		k_EChatEntryTypeWasBanned = 9,
		[Token(Token = "0x40006D1")]
		k_EChatEntryTypeDisconnected = 10,
		[Token(Token = "0x40006D2")]
		k_EChatEntryTypeHistoricalChat = 11,
		[Token(Token = "0x40006D3")]
		k_EChatEntryTypeLinkBlocked = 14
	}
	[Token(Token = "0x2000119")]
	public enum EChatRoomEnterResponse
	{
		[Token(Token = "0x40006D5")]
		k_EChatRoomEnterResponseSuccess = 1,
		[Token(Token = "0x40006D6")]
		k_EChatRoomEnterResponseDoesntExist,
		[Token(Token = "0x40006D7")]
		k_EChatRoomEnterResponseNotAllowed,
		[Token(Token = "0x40006D8")]
		k_EChatRoomEnterResponseFull,
		[Token(Token = "0x40006D9")]
		k_EChatRoomEnterResponseError,
		[Token(Token = "0x40006DA")]
		k_EChatRoomEnterResponseBanned,
		[Token(Token = "0x40006DB")]
		k_EChatRoomEnterResponseLimited,
		[Token(Token = "0x40006DC")]
		k_EChatRoomEnterResponseClanDisabled,
		[Token(Token = "0x40006DD")]
		k_EChatRoomEnterResponseCommunityBan,
		[Token(Token = "0x40006DE")]
		k_EChatRoomEnterResponseMemberBlockedYou,
		[Token(Token = "0x40006DF")]
		k_EChatRoomEnterResponseYouBlockedMember
	}
	[Token(Token = "0x200011A")]
	[Flags]
	public enum EChatSteamIDInstanceFlags
	{
		[Token(Token = "0x40006E1")]
		k_EChatAccountInstanceMask = 0xFFF,
		[Token(Token = "0x40006E2")]
		k_EChatInstanceFlagClan = 0x80000,
		[Token(Token = "0x40006E3")]
		k_EChatInstanceFlagLobby = 0x40000,
		[Token(Token = "0x40006E4")]
		k_EChatInstanceFlagMMSLobby = 0x20000
	}
	[Token(Token = "0x200011B")]
	[Flags]
	public enum EMarketingMessageFlags
	{
		[Token(Token = "0x40006E6")]
		k_EMarketingMessageFlagsNone = 0,
		[Token(Token = "0x40006E7")]
		k_EMarketingMessageFlagsHighPriority = 1,
		[Token(Token = "0x40006E8")]
		k_EMarketingMessageFlagsPlatformWindows = 2,
		[Token(Token = "0x40006E9")]
		k_EMarketingMessageFlagsPlatformMac = 4,
		[Token(Token = "0x40006EA")]
		k_EMarketingMessageFlagsPlatformLinux = 8,
		[Token(Token = "0x40006EB")]
		k_EMarketingMessageFlagsPlatformRestrictions = 0xE
	}
	[Token(Token = "0x200011C")]
	public enum ENotificationPosition
	{
		[Token(Token = "0x40006ED")]
		k_EPositionTopLeft,
		[Token(Token = "0x40006EE")]
		k_EPositionTopRight,
		[Token(Token = "0x40006EF")]
		k_EPositionBottomLeft,
		[Token(Token = "0x40006F0")]
		k_EPositionBottomRight
	}
	[Token(Token = "0x200011D")]
	public enum EBroadcastUploadResult
	{
		[Token(Token = "0x40006F2")]
		k_EBroadcastUploadResultNone,
		[Token(Token = "0x40006F3")]
		k_EBroadcastUploadResultOK,
		[Token(Token = "0x40006F4")]
		k_EBroadcastUploadResultInitFailed,
		[Token(Token = "0x40006F5")]
		k_EBroadcastUploadResultFrameFailed,
		[Token(Token = "0x40006F6")]
		k_EBroadcastUploadResultTimeout,
		[Token(Token = "0x40006F7")]
		k_EBroadcastUploadResultBandwidthExceeded,
		[Token(Token = "0x40006F8")]
		k_EBroadcastUploadResultLowFPS,
		[Token(Token = "0x40006F9")]
		k_EBroadcastUploadResultMissingKeyFrames,
		[Token(Token = "0x40006FA")]
		k_EBroadcastUploadResultNoConnection,
		[Token(Token = "0x40006FB")]
		k_EBroadcastUploadResultRelayFailed,
		[Token(Token = "0x40006FC")]
		k_EBroadcastUploadResultSettingsChanged,
		[Token(Token = "0x40006FD")]
		k_EBroadcastUploadResultMissingAudio,
		[Token(Token = "0x40006FE")]
		k_EBroadcastUploadResultTooFarBehind,
		[Token(Token = "0x40006FF")]
		k_EBroadcastUploadResultTranscodeBehind
	}
	[Token(Token = "0x200011E")]
	public enum ELaunchOptionType
	{
		[Token(Token = "0x4000701")]
		k_ELaunchOptionType_None = 0,
		[Token(Token = "0x4000702")]
		k_ELaunchOptionType_Default = 1,
		[Token(Token = "0x4000703")]
		k_ELaunchOptionType_SafeMode = 2,
		[Token(Token = "0x4000704")]
		k_ELaunchOptionType_Multiplayer = 3,
		[Token(Token = "0x4000705")]
		k_ELaunchOptionType_Config = 4,
		[Token(Token = "0x4000706")]
		k_ELaunchOptionType_OpenVR = 5,
		[Token(Token = "0x4000707")]
		k_ELaunchOptionType_Server = 6,
		[Token(Token = "0x4000708")]
		k_ELaunchOptionType_Editor = 7,
		[Token(Token = "0x4000709")]
		k_ELaunchOptionType_Manual = 8,
		[Token(Token = "0x400070A")]
		k_ELaunchOptionType_Benchmark = 9,
		[Token(Token = "0x400070B")]
		k_ELaunchOptionType_Option1 = 10,
		[Token(Token = "0x400070C")]
		k_ELaunchOptionType_Option2 = 11,
		[Token(Token = "0x400070D")]
		k_ELaunchOptionType_Option3 = 12,
		[Token(Token = "0x400070E")]
		k_ELaunchOptionType_OculusVR = 13,
		[Token(Token = "0x400070F")]
		k_ELaunchOptionType_OpenVROverlay = 14,
		[Token(Token = "0x4000710")]
		k_ELaunchOptionType_OSVR = 15,
		[Token(Token = "0x4000711")]
		k_ELaunchOptionType_Dialog = 1000
	}
	[Token(Token = "0x200011F")]
	public enum EVRHMDType
	{
		[Token(Token = "0x4000713")]
		k_eEVRHMDType_None = -1,
		[Token(Token = "0x4000714")]
		k_eEVRHMDType_Unknown = 0,
		[Token(Token = "0x4000715")]
		k_eEVRHMDType_HTC_Dev = 1,
		[Token(Token = "0x4000716")]
		k_eEVRHMDType_HTC_VivePre = 2,
		[Token(Token = "0x4000717")]
		k_eEVRHMDType_HTC_Vive = 3,
		[Token(Token = "0x4000718")]
		k_eEVRHMDType_HTC_Unknown = 20,
		[Token(Token = "0x4000719")]
		k_eEVRHMDType_Oculus_DK1 = 21,
		[Token(Token = "0x400071A")]
		k_eEVRHMDType_Oculus_DK2 = 22,
		[Token(Token = "0x400071B")]
		k_eEVRHMDType_Oculus_Rift = 23,
		[Token(Token = "0x400071C")]
		k_eEVRHMDType_Oculus_Unknown = 40
	}
	[Token(Token = "0x2000120")]
	public enum EHTTPMethod
	{
		[Token(Token = "0x400071E")]
		k_EHTTPMethodInvalid,
		[Token(Token = "0x400071F")]
		k_EHTTPMethodGET,
		[Token(Token = "0x4000720")]
		k_EHTTPMethodHEAD,
		[Token(Token = "0x4000721")]
		k_EHTTPMethodPOST,
		[Token(Token = "0x4000722")]
		k_EHTTPMethodPUT,
		[Token(Token = "0x4000723")]
		k_EHTTPMethodDELETE,
		[Token(Token = "0x4000724")]
		k_EHTTPMethodOPTIONS,
		[Token(Token = "0x4000725")]
		k_EHTTPMethodPATCH
	}
	[Token(Token = "0x2000121")]
	public enum EHTTPStatusCode
	{
		[Token(Token = "0x4000727")]
		k_EHTTPStatusCodeInvalid = 0,
		[Token(Token = "0x4000728")]
		k_EHTTPStatusCode100Continue = 100,
		[Token(Token = "0x4000729")]
		k_EHTTPStatusCode101SwitchingProtocols = 101,
		[Token(Token = "0x400072A")]
		k_EHTTPStatusCode200OK = 200,
		[Token(Token = "0x400072B")]
		k_EHTTPStatusCode201Created = 201,
		[Token(Token = "0x400072C")]
		k_EHTTPStatusCode202Accepted = 202,
		[Token(Token = "0x400072D")]
		k_EHTTPStatusCode203NonAuthoritative = 203,
		[Token(Token = "0x400072E")]
		k_EHTTPStatusCode204NoContent = 204,
		[Token(Token = "0x400072F")]
		k_EHTTPStatusCode205ResetContent = 205,
		[Token(Token = "0x4000730")]
		k_EHTTPStatusCode206PartialContent = 206,
		[Token(Token = "0x4000731")]
		k_EHTTPStatusCode300MultipleChoices = 300,
		[Token(Token = "0x4000732")]
		k_EHTTPStatusCode301MovedPermanently = 301,
		[Token(Token = "0x4000733")]
		k_EHTTPStatusCode302Found = 302,
		[Token(Token = "0x4000734")]
		k_EHTTPStatusCode303SeeOther = 303,
		[Token(Token = "0x4000735")]
		k_EHTTPStatusCode304NotModified = 304,
		[Token(Token = "0x4000736")]
		k_EHTTPStatusCode305UseProxy = 305,
		[Token(Token = "0x4000737")]
		k_EHTTPStatusCode307TemporaryRedirect = 307,
		[Token(Token = "0x4000738")]
		k_EHTTPStatusCode400BadRequest = 400,
		[Token(Token = "0x4000739")]
		k_EHTTPStatusCode401Unauthorized = 401,
		[Token(Token = "0x400073A")]
		k_EHTTPStatusCode402PaymentRequired = 402,
		[Token(Token = "0x400073B")]
		k_EHTTPStatusCode403Forbidden = 403,
		[Token(Token = "0x400073C")]
		k_EHTTPStatusCode404NotFound = 404,
		[Token(Token = "0x400073D")]
		k_EHTTPStatusCode405MethodNotAllowed = 405,
		[Token(Token = "0x400073E")]
		k_EHTTPStatusCode406NotAcceptable = 406,
		[Token(Token = "0x400073F")]
		k_EHTTPStatusCode407ProxyAuthRequired = 407,
		[Token(Token = "0x4000740")]
		k_EHTTPStatusCode408RequestTimeout = 408,
		[Token(Token = "0x4000741")]
		k_EHTTPStatusCode409Conflict = 409,
		[Token(Token = "0x4000742")]
		k_EHTTPStatusCode410Gone = 410,
		[Token(Token = "0x4000743")]
		k_EHTTPStatusCode411LengthRequired = 411,
		[Token(Token = "0x4000744")]
		k_EHTTPStatusCode412PreconditionFailed = 412,
		[Token(Token = "0x4000745")]
		k_EHTTPStatusCode413RequestEntityTooLarge = 413,
		[Token(Token = "0x4000746")]
		k_EHTTPStatusCode414RequestURITooLong = 414,
		[Token(Token = "0x4000747")]
		k_EHTTPStatusCode415UnsupportedMediaType = 415,
		[Token(Token = "0x4000748")]
		k_EHTTPStatusCode416RequestedRangeNotSatisfiable = 416,
		[Token(Token = "0x4000749")]
		k_EHTTPStatusCode417ExpectationFailed = 417,
		[Token(Token = "0x400074A")]
		k_EHTTPStatusCode4xxUnknown = 418,
		[Token(Token = "0x400074B")]
		k_EHTTPStatusCode429TooManyRequests = 429,
		[Token(Token = "0x400074C")]
		k_EHTTPStatusCode500InternalServerError = 500,
		[Token(Token = "0x400074D")]
		k_EHTTPStatusCode501NotImplemented = 501,
		[Token(Token = "0x400074E")]
		k_EHTTPStatusCode502BadGateway = 502,
		[Token(Token = "0x400074F")]
		k_EHTTPStatusCode503ServiceUnavailable = 503,
		[Token(Token = "0x4000750")]
		k_EHTTPStatusCode504GatewayTimeout = 504,
		[Token(Token = "0x4000751")]
		k_EHTTPStatusCode505HTTPVersionNotSupported = 505,
		[Token(Token = "0x4000752")]
		k_EHTTPStatusCode5xxUnknown = 599
	}
	[Token(Token = "0x2000122")]
	public enum EUniverse
	{
		[Token(Token = "0x4000754")]
		k_EUniverseInvalid,
		[Token(Token = "0x4000755")]
		k_EUniversePublic,
		[Token(Token = "0x4000756")]
		k_EUniverseBeta,
		[Token(Token = "0x4000757")]
		k_EUniverseInternal,
		[Token(Token = "0x4000758")]
		k_EUniverseDev,
		[Token(Token = "0x4000759")]
		k_EUniverseMax
	}
	[Token(Token = "0x2000123")]
	public struct ControllerAnalogActionData_t
	{
		[Token(Token = "0x400075A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EControllerSourceMode eMode;

		[Token(Token = "0x400075B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float x;

		[Token(Token = "0x400075C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float y;

		[Token(Token = "0x400075D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public byte bActive;
	}
	[Token(Token = "0x2000124")]
	public struct ControllerDigitalActionData_t
	{
		[Token(Token = "0x400075E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte bState;

		[Token(Token = "0x400075F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public byte bActive;
	}
	[Token(Token = "0x2000125")]
	public struct ControllerMotionData_t
	{
		[Token(Token = "0x4000760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float rotQuatX;

		[Token(Token = "0x4000761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float rotQuatY;

		[Token(Token = "0x4000762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float rotQuatZ;

		[Token(Token = "0x4000763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float rotQuatW;

		[Token(Token = "0x4000764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float posAccelX;

		[Token(Token = "0x4000765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float posAccelY;

		[Token(Token = "0x4000766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float posAccelZ;

		[Token(Token = "0x4000767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float rotVelX;

		[Token(Token = "0x4000768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float rotVelY;

		[Token(Token = "0x4000769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float rotVelZ;
	}
	[Token(Token = "0x2000126")]
	public struct FriendGameInfo_t
	{
		[Token(Token = "0x400076A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CGameID m_gameID;

		[Token(Token = "0x400076B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_unGameIP;

		[Token(Token = "0x400076C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public ushort m_usGamePort;

		[Token(Token = "0x400076D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
		public ushort m_usQueryPort;

		[Token(Token = "0x400076E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CSteamID m_steamIDLobby;
	}
	[Token(Token = "0x2000127")]
	public struct FriendSessionStateInfo_t
	{
		[Token(Token = "0x400076F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_uiOnlineSessionInstances;

		[Token(Token = "0x4000770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public byte m_uiPublishedToFriendsSessionInstance;
	}
	[Token(Token = "0x2000128")]
	public struct SteamItemDetails_t
	{
		[Token(Token = "0x4000771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamItemInstanceID_t m_itemId;

		[Token(Token = "0x4000772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public SteamItemDef_t m_iDefinition;

		[Token(Token = "0x4000773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public ushort m_unQuantity;

		[Token(Token = "0x4000774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
		public ushort m_unFlags;
	}
	[Token(Token = "0x2000129")]
	public struct P2PSessionState_t
	{
		[Token(Token = "0x4000775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_bConnectionActive;

		[Token(Token = "0x4000776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public byte m_bConnecting;

		[Token(Token = "0x4000777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public byte m_eP2PSessionError;

		[Token(Token = "0x4000778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
		public byte m_bUsingRelay;

		[Token(Token = "0x4000779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nBytesQueuedForSend;

		[Token(Token = "0x400077A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nPacketsQueuedForSend;

		[Token(Token = "0x400077B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_nRemoteIP;

		[Token(Token = "0x400077C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ushort m_nRemotePort;
	}
	[Token(Token = "0x200012A")]
	public struct SteamParamStringArray_t
	{
		[Token(Token = "0x400077D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr m_ppStrings;

		[Token(Token = "0x400077E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nNumStrings;
	}
	[Token(Token = "0x200012B")]
	public struct SteamUGCDetails_t
	{
		[Token(Token = "0x400077F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x4000781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public EWorkshopFileType m_eFileType;

		[Token(Token = "0x4000782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AppId_t m_nCreatorAppID;

		[Token(Token = "0x4000783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public AppId_t m_nConsumerAppID;

		[Token(Token = "0x4000784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string m_rgchTitle;

		[Token(Token = "0x4000785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public string m_rgchDescription;

		[Token(Token = "0x4000786")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ulong m_ulSteamIDOwner;

		[Token(Token = "0x4000787")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public uint m_rtimeCreated;

		[Token(Token = "0x4000788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public uint m_rtimeUpdated;

		[Token(Token = "0x4000789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public uint m_rtimeAddedToUserList;

		[Token(Token = "0x400078A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public ERemoteStoragePublishedFileVisibility m_eVisibility;

		[Token(Token = "0x400078B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool m_bBanned;

		[Token(Token = "0x400078C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool m_bAcceptedForUse;

		[Token(Token = "0x400078D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		public bool m_bTagsTruncated;

		[Token(Token = "0x400078E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public string m_rgchTags;

		[Token(Token = "0x400078F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UGCHandle_t m_hFile;

		[Token(Token = "0x4000790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UGCHandle_t m_hPreviewFile;

		[Token(Token = "0x4000791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string m_pchFileName;

		[Token(Token = "0x4000792")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public int m_nFileSize;

		[Token(Token = "0x4000793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int m_nPreviewFileSize;

		[Token(Token = "0x4000794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public string m_rgchURL;

		[Token(Token = "0x4000795")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public uint m_unVotesUp;

		[Token(Token = "0x4000796")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public uint m_unVotesDown;

		[Token(Token = "0x4000797")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float m_flScore;

		[Token(Token = "0x4000798")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public uint m_unNumChildren;
	}
	[Token(Token = "0x200012C")]
	public struct CallbackMsg_t
	{
		[Token(Token = "0x4000799")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_hSteamUser;

		[Token(Token = "0x400079A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_iCallback;

		[Token(Token = "0x400079B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr m_pubParam;

		[Token(Token = "0x400079C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_cubParam;
	}
	[Token(Token = "0x200012D")]
	public struct LeaderboardEntry_t
	{
		[Token(Token = "0x400079D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDUser;

		[Token(Token = "0x400079E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nGlobalRank;

		[Token(Token = "0x400079F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_nScore;

		[Token(Token = "0x40007A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_cDetails;

		[Token(Token = "0x40007A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public UGCHandle_t m_hUGC;
	}
	[Token(Token = "0x200012E")]
	public struct MatchMakingKeyValuePair_t
	{
		[Token(Token = "0x40007A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string m_szKey;

		[Token(Token = "0x40007A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public string m_szValue;

		[Token(Token = "0x6000405")]
		[Address(RVA = "0x481430", Offset = "0x481430", VA = "0x481430")]
		private MatchMakingKeyValuePair_t(string strKey, string strValue)
		{
		}
	}
	[Token(Token = "0x200012F")]
	public static class SteamAppList
	{
		[Token(Token = "0x6000406")]
		[Address(RVA = "0x14FDAB0", Offset = "0x14FDAB0", VA = "0x14FDAB0")]
		public static uint GetNumInstalledApps()
		{
			return default(uint);
		}

		[Token(Token = "0x6000407")]
		[Address(RVA = "0x14FDACC", Offset = "0x14FDACC", VA = "0x14FDACC")]
		public static uint GetInstalledApps(AppId_t[] pvecAppID, uint unMaxAppIDs)
		{
			return default(uint);
		}

		[Token(Token = "0x6000408")]
		[Address(RVA = "0x14FDAF8", Offset = "0x14FDAF8", VA = "0x14FDAF8")]
		public static int GetAppName(AppId_t nAppID, out string pchName, int cchNameMax)
		{
			return default(int);
		}

		[Token(Token = "0x6000409")]
		[Address(RVA = "0x14FDBF0", Offset = "0x14FDBF0", VA = "0x14FDBF0")]
		public static int GetAppInstallDir(AppId_t nAppID, out string pchDirectory, int cchNameMax)
		{
			return default(int);
		}

		[Token(Token = "0x600040A")]
		[Address(RVA = "0x14FDCE8", Offset = "0x14FDCE8", VA = "0x14FDCE8")]
		public static int GetAppBuildId(AppId_t nAppID)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000130")]
	public static class SteamApps
	{
		[Token(Token = "0x600040B")]
		[Address(RVA = "0x14FDD0C", Offset = "0x14FDD0C", VA = "0x14FDD0C")]
		public static bool BIsSubscribed()
		{
			return default(bool);
		}

		[Token(Token = "0x600040C")]
		[Address(RVA = "0x14FDD28", Offset = "0x14FDD28", VA = "0x14FDD28")]
		public static bool BIsLowViolence()
		{
			return default(bool);
		}

		[Token(Token = "0x600040D")]
		[Address(RVA = "0x14FDD44", Offset = "0x14FDD44", VA = "0x14FDD44")]
		public static bool BIsCybercafe()
		{
			return default(bool);
		}

		[Token(Token = "0x600040E")]
		[Address(RVA = "0x14FDD60", Offset = "0x14FDD60", VA = "0x14FDD60")]
		public static bool BIsVACBanned()
		{
			return default(bool);
		}

		[Token(Token = "0x600040F")]
		[Address(RVA = "0x14FDD7C", Offset = "0x14FDD7C", VA = "0x14FDD7C")]
		public static string GetCurrentGameLanguage()
		{
			return null;
		}

		[Token(Token = "0x6000410")]
		[Address(RVA = "0x14FDDA0", Offset = "0x14FDDA0", VA = "0x14FDDA0")]
		public static string GetAvailableGameLanguages()
		{
			return null;
		}

		[Token(Token = "0x6000411")]
		[Address(RVA = "0x14FDDC4", Offset = "0x14FDDC4", VA = "0x14FDDC4")]
		public static bool BIsSubscribedApp(AppId_t appID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000412")]
		[Address(RVA = "0x14FDDE8", Offset = "0x14FDDE8", VA = "0x14FDDE8")]
		public static bool BIsDlcInstalled(AppId_t appID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000413")]
		[Address(RVA = "0x14FDE0C", Offset = "0x14FDE0C", VA = "0x14FDE0C")]
		public static uint GetEarliestPurchaseUnixTime(AppId_t nAppID)
		{
			return default(uint);
		}

		[Token(Token = "0x6000414")]
		[Address(RVA = "0x14FDE30", Offset = "0x14FDE30", VA = "0x14FDE30")]
		public static bool BIsSubscribedFromFreeWeekend()
		{
			return default(bool);
		}

		[Token(Token = "0x6000415")]
		[Address(RVA = "0x14FDE4C", Offset = "0x14FDE4C", VA = "0x14FDE4C")]
		public static int GetDLCCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000416")]
		[Address(RVA = "0x14FDE68", Offset = "0x14FDE68", VA = "0x14FDE68")]
		public static bool BGetDLCDataByIndex(int iDLC, out AppId_t pAppID, out bool pbAvailable, out string pchName, int cchNameBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000417")]
		[Address(RVA = "0x14FDF84", Offset = "0x14FDF84", VA = "0x14FDF84")]
		public static void InstallDLC(AppId_t nAppID)
		{
		}

		[Token(Token = "0x6000418")]
		[Address(RVA = "0x14FDFA8", Offset = "0x14FDFA8", VA = "0x14FDFA8")]
		public static void UninstallDLC(AppId_t nAppID)
		{
		}

		[Token(Token = "0x6000419")]
		[Address(RVA = "0x14FDFCC", Offset = "0x14FDFCC", VA = "0x14FDFCC")]
		public static void RequestAppProofOfPurchaseKey(AppId_t nAppID)
		{
		}

		[Token(Token = "0x600041A")]
		[Address(RVA = "0x14FDFF0", Offset = "0x14FDFF0", VA = "0x14FDFF0")]
		public static bool GetCurrentBetaName(out string pchName, int cchNameBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x600041B")]
		[Address(RVA = "0x14FE0DC", Offset = "0x14FE0DC", VA = "0x14FE0DC")]
		public static bool MarkContentCorrupt(bool bMissingFilesOnly)
		{
			return default(bool);
		}

		[Token(Token = "0x600041C")]
		[Address(RVA = "0x14FE100", Offset = "0x14FE100", VA = "0x14FE100")]
		public static uint GetInstalledDepots(AppId_t appID, DepotId_t[] pvecDepots, uint cMaxDepots)
		{
			return default(uint);
		}

		[Token(Token = "0x600041D")]
		[Address(RVA = "0x14FE134", Offset = "0x14FE134", VA = "0x14FE134")]
		public static uint GetAppInstallDir(AppId_t appID, out string pchFolder, uint cchFolderBufferSize)
		{
			return default(uint);
		}

		[Token(Token = "0x600041E")]
		[Address(RVA = "0x14FE22C", Offset = "0x14FE22C", VA = "0x14FE22C")]
		public static bool BIsAppInstalled(AppId_t appID)
		{
			return default(bool);
		}

		[Token(Token = "0x600041F")]
		[Address(RVA = "0x14FE250", Offset = "0x14FE250", VA = "0x14FE250")]
		public static CSteamID GetAppOwner()
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000420")]
		[Address(RVA = "0x14FE2F8", Offset = "0x14FE2F8", VA = "0x14FE2F8")]
		public static string GetLaunchQueryParam(string pchKey)
		{
			return null;
		}

		[Token(Token = "0x6000421")]
		[Address(RVA = "0x14FE458", Offset = "0x14FE458", VA = "0x14FE458")]
		public static bool GetDlcDownloadProgress(AppId_t nAppID, out ulong punBytesDownloaded, out ulong punBytesTotal)
		{
			return default(bool);
		}

		[Token(Token = "0x6000422")]
		[Address(RVA = "0x14FE48C", Offset = "0x14FE48C", VA = "0x14FE48C")]
		public static int GetAppBuildId()
		{
			return default(int);
		}

		[Token(Token = "0x6000423")]
		[Address(RVA = "0x14FE4A8", Offset = "0x14FE4A8", VA = "0x14FE4A8")]
		public static void RequestAllProofOfPurchaseKeys()
		{
		}

		[Token(Token = "0x6000424")]
		[Address(RVA = "0x14FE4C4", Offset = "0x14FE4C4", VA = "0x14FE4C4")]
		public static SteamAPICall_t GetFileDetails(string pszFileName)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x2000131")]
	public static class SteamClient
	{
		[Token(Token = "0x6000425")]
		[Address(RVA = "0x14FE670", Offset = "0x14FE670", VA = "0x14FE670")]
		public static HSteamPipe CreateSteamPipe()
		{
			return default(HSteamPipe);
		}

		[Token(Token = "0x6000426")]
		[Address(RVA = "0x14FE694", Offset = "0x14FE694", VA = "0x14FE694")]
		public static bool BReleaseSteamPipe(HSteamPipe hSteamPipe)
		{
			return default(bool);
		}

		[Token(Token = "0x6000427")]
		[Address(RVA = "0x14FE6B8", Offset = "0x14FE6B8", VA = "0x14FE6B8")]
		public static HSteamUser ConnectToGlobalUser(HSteamPipe hSteamPipe)
		{
			return default(HSteamUser);
		}

		[Token(Token = "0x6000428")]
		[Address(RVA = "0x14FE6E4", Offset = "0x14FE6E4", VA = "0x14FE6E4")]
		public static HSteamUser CreateLocalUser(out HSteamPipe phSteamPipe, EAccountType eAccountType)
		{
			return default(HSteamUser);
		}

		[Token(Token = "0x6000429")]
		[Address(RVA = "0x14FE718", Offset = "0x14FE718", VA = "0x14FE718")]
		public static void ReleaseUser(HSteamPipe hSteamPipe, HSteamUser hUser)
		{
		}

		[Token(Token = "0x600042A")]
		[Address(RVA = "0x14FE744", Offset = "0x14FE744", VA = "0x14FE744")]
		public static IntPtr GetISteamUser(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600042B")]
		[Address(RVA = "0x14FE8A8", Offset = "0x14FE8A8", VA = "0x14FE8A8")]
		public static IntPtr GetISteamGameServer(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600042C")]
		[Address(RVA = "0x14FEA0C", Offset = "0x14FEA0C", VA = "0x14FEA0C")]
		public static void SetLocalIPBinding(uint unIP, ushort usPort)
		{
		}

		[Token(Token = "0x600042D")]
		[Address(RVA = "0x14FEA38", Offset = "0x14FEA38", VA = "0x14FEA38")]
		public static IntPtr GetISteamFriends(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600042E")]
		[Address(RVA = "0x14FEB9C", Offset = "0x14FEB9C", VA = "0x14FEB9C")]
		public static IntPtr GetISteamUtils(HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600042F")]
		[Address(RVA = "0x14FECF8", Offset = "0x14FECF8", VA = "0x14FECF8")]
		public static IntPtr GetISteamMatchmaking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000430")]
		[Address(RVA = "0x14FEE5C", Offset = "0x14FEE5C", VA = "0x14FEE5C")]
		public static IntPtr GetISteamMatchmakingServers(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000431")]
		[Address(RVA = "0x14FEFC0", Offset = "0x14FEFC0", VA = "0x14FEFC0")]
		public static IntPtr GetISteamGenericInterface(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000432")]
		[Address(RVA = "0x14FF124", Offset = "0x14FF124", VA = "0x14FF124")]
		public static IntPtr GetISteamUserStats(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000433")]
		[Address(RVA = "0x14FF288", Offset = "0x14FF288", VA = "0x14FF288")]
		public static IntPtr GetISteamGameServerStats(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000434")]
		[Address(RVA = "0x14FF3EC", Offset = "0x14FF3EC", VA = "0x14FF3EC")]
		public static IntPtr GetISteamApps(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000435")]
		[Address(RVA = "0x14FF550", Offset = "0x14FF550", VA = "0x14FF550")]
		public static IntPtr GetISteamNetworking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000436")]
		[Address(RVA = "0x14FF6B4", Offset = "0x14FF6B4", VA = "0x14FF6B4")]
		public static IntPtr GetISteamRemoteStorage(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000437")]
		[Address(RVA = "0x14FF818", Offset = "0x14FF818", VA = "0x14FF818")]
		public static IntPtr GetISteamScreenshots(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000438")]
		[Address(RVA = "0x14FF97C", Offset = "0x14FF97C", VA = "0x14FF97C")]
		public static uint GetIPCCallCount()
		{
			return default(uint);
		}

		[Token(Token = "0x6000439")]
		[Address(RVA = "0x14FF998", Offset = "0x14FF998", VA = "0x14FF998")]
		public static void SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction)
		{
		}

		[Token(Token = "0x600043A")]
		[Address(RVA = "0x14FF9BC", Offset = "0x14FF9BC", VA = "0x14FF9BC")]
		public static bool BShutdownIfAllPipesClosed()
		{
			return default(bool);
		}

		[Token(Token = "0x600043B")]
		[Address(RVA = "0x14FF9D8", Offset = "0x14FF9D8", VA = "0x14FF9D8")]
		public static IntPtr GetISteamHTTP(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600043C")]
		[Address(RVA = "0x14FFB3C", Offset = "0x14FFB3C", VA = "0x14FFB3C")]
		public static IntPtr GetISteamUnifiedMessages(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600043D")]
		[Address(RVA = "0x14FFCA0", Offset = "0x14FFCA0", VA = "0x14FFCA0")]
		public static IntPtr GetISteamController(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600043E")]
		[Address(RVA = "0x14FFE04", Offset = "0x14FFE04", VA = "0x14FFE04")]
		public static IntPtr GetISteamUGC(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600043F")]
		[Address(RVA = "0x14FFF68", Offset = "0x14FFF68", VA = "0x14FFF68")]
		public static IntPtr GetISteamAppList(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000440")]
		[Address(RVA = "0x15000CC", Offset = "0x15000CC", VA = "0x15000CC")]
		public static IntPtr GetISteamMusic(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000441")]
		[Address(RVA = "0x1500230", Offset = "0x1500230", VA = "0x1500230")]
		public static IntPtr GetISteamMusicRemote(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000442")]
		[Address(RVA = "0x1500394", Offset = "0x1500394", VA = "0x1500394")]
		public static IntPtr GetISteamHTMLSurface(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000443")]
		[Address(RVA = "0x15004F8", Offset = "0x15004F8", VA = "0x15004F8")]
		public static IntPtr GetISteamInventory(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000444")]
		[Address(RVA = "0x150065C", Offset = "0x150065C", VA = "0x150065C")]
		public static IntPtr GetISteamVideo(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x2000132")]
	public static class SteamController
	{
		[Token(Token = "0x6000445")]
		[Address(RVA = "0x15007C0", Offset = "0x15007C0", VA = "0x15007C0")]
		public static bool Init()
		{
			return default(bool);
		}

		[Token(Token = "0x6000446")]
		[Address(RVA = "0x15007DC", Offset = "0x15007DC", VA = "0x15007DC")]
		public static bool Shutdown()
		{
			return default(bool);
		}

		[Token(Token = "0x6000447")]
		[Address(RVA = "0x15007F8", Offset = "0x15007F8", VA = "0x15007F8")]
		public static void RunFrame()
		{
		}

		[Token(Token = "0x6000448")]
		[Address(RVA = "0x1500814", Offset = "0x1500814", VA = "0x1500814")]
		public static int GetConnectedControllers(ControllerHandle_t[] handlesOut)
		{
			return default(int);
		}

		[Token(Token = "0x6000449")]
		[Address(RVA = "0x15008D4", Offset = "0x15008D4", VA = "0x15008D4")]
		public static bool ShowBindingPanel(ControllerHandle_t controllerHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x600044A")]
		[Address(RVA = "0x1500900", Offset = "0x1500900", VA = "0x1500900")]
		public static ControllerActionSetHandle_t GetActionSetHandle(string pszActionSetName)
		{
			return default(ControllerActionSetHandle_t);
		}

		[Token(Token = "0x600044B")]
		[Address(RVA = "0x1500A88", Offset = "0x1500A88", VA = "0x1500A88")]
		public static void ActivateActionSet(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle)
		{
		}

		[Token(Token = "0x600044C")]
		[Address(RVA = "0x1500AD0", Offset = "0x1500AD0", VA = "0x1500AD0")]
		public static ControllerActionSetHandle_t GetCurrentActionSet(ControllerHandle_t controllerHandle)
		{
			return default(ControllerActionSetHandle_t);
		}

		[Token(Token = "0x600044D")]
		[Address(RVA = "0x1500B20", Offset = "0x1500B20", VA = "0x1500B20")]
		public static ControllerDigitalActionHandle_t GetDigitalActionHandle(string pszActionName)
		{
			return default(ControllerDigitalActionHandle_t);
		}

		[Token(Token = "0x600044E")]
		[Address(RVA = "0x1500CA8", Offset = "0x1500CA8", VA = "0x1500CA8")]
		public static ControllerDigitalActionData_t GetDigitalActionData(ControllerHandle_t controllerHandle, ControllerDigitalActionHandle_t digitalActionHandle)
		{
			return default(ControllerDigitalActionData_t);
		}

		[Token(Token = "0x600044F")]
		[Address(RVA = "0x1500CF0", Offset = "0x1500CF0", VA = "0x1500CF0")]
		public static int GetDigitalActionOrigins(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerDigitalActionHandle_t digitalActionHandle, EControllerActionOrigin[] originsOut)
		{
			return default(int);
		}

		[Token(Token = "0x6000450")]
		[Address(RVA = "0x1500D40", Offset = "0x1500D40", VA = "0x1500D40")]
		public static ControllerAnalogActionHandle_t GetAnalogActionHandle(string pszActionName)
		{
			return default(ControllerAnalogActionHandle_t);
		}

		[Token(Token = "0x6000451")]
		[Address(RVA = "0x1500EC8", Offset = "0x1500EC8", VA = "0x1500EC8")]
		public static ControllerAnalogActionData_t GetAnalogActionData(ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t analogActionHandle)
		{
			return default(ControllerAnalogActionData_t);
		}

		[Token(Token = "0x6000452")]
		[Address(RVA = "0x1500F10", Offset = "0x1500F10", VA = "0x1500F10")]
		public static int GetAnalogActionOrigins(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerAnalogActionHandle_t analogActionHandle, EControllerActionOrigin[] originsOut)
		{
			return default(int);
		}

		[Token(Token = "0x6000453")]
		[Address(RVA = "0x1500F60", Offset = "0x1500F60", VA = "0x1500F60")]
		public static void StopAnalogActionMomentum(ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t eAction)
		{
		}

		[Token(Token = "0x6000454")]
		[Address(RVA = "0x1500FA8", Offset = "0x1500FA8", VA = "0x1500FA8")]
		public static void TriggerHapticPulse(ControllerHandle_t controllerHandle, ESteamControllerPad eTargetPad, ushort usDurationMicroSec)
		{
		}

		[Token(Token = "0x6000455")]
		[Address(RVA = "0x1500FF0", Offset = "0x1500FF0", VA = "0x1500FF0")]
		public static void TriggerRepeatedHapticPulse(ControllerHandle_t controllerHandle, ESteamControllerPad eTargetPad, ushort usDurationMicroSec, ushort usOffMicroSec, ushort unRepeat, uint nFlags)
		{
		}

		[Token(Token = "0x6000456")]
		[Address(RVA = "0x1501040", Offset = "0x1501040", VA = "0x1501040")]
		public static void TriggerVibration(ControllerHandle_t controllerHandle, ushort usLeftSpeed, ushort usRightSpeed)
		{
		}

		[Token(Token = "0x6000457")]
		[Address(RVA = "0x1501088", Offset = "0x1501088", VA = "0x1501088")]
		public static void SetLEDColor(ControllerHandle_t controllerHandle, byte nColorR, byte nColorG, byte nColorB, uint nFlags)
		{
		}

		[Token(Token = "0x6000458")]
		[Address(RVA = "0x15010D8", Offset = "0x15010D8", VA = "0x15010D8")]
		public static int GetGamepadIndexForController(ControllerHandle_t ulControllerHandle)
		{
			return default(int);
		}

		[Token(Token = "0x6000459")]
		[Address(RVA = "0x1501104", Offset = "0x1501104", VA = "0x1501104")]
		public static ControllerHandle_t GetControllerForGamepadIndex(int nIndex)
		{
			return default(ControllerHandle_t);
		}

		[Token(Token = "0x600045A")]
		[Address(RVA = "0x150114C", Offset = "0x150114C", VA = "0x150114C")]
		public static ControllerMotionData_t GetMotionData(ControllerHandle_t controllerHandle)
		{
			return default(ControllerMotionData_t);
		}

		[Token(Token = "0x600045B")]
		[Address(RVA = "0x150118C", Offset = "0x150118C", VA = "0x150118C")]
		public static bool ShowDigitalActionOrigins(ControllerHandle_t controllerHandle, ControllerDigitalActionHandle_t digitalActionHandle, float flScale, float flXPosition, float flYPosition)
		{
			return default(bool);
		}

		[Token(Token = "0x600045C")]
		[Address(RVA = "0x15011EC", Offset = "0x15011EC", VA = "0x15011EC")]
		public static bool ShowAnalogActionOrigins(ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t analogActionHandle, float flScale, float flXPosition, float flYPosition)
		{
			return default(bool);
		}

		[Token(Token = "0x600045D")]
		[Address(RVA = "0x150124C", Offset = "0x150124C", VA = "0x150124C")]
		public static string GetStringForActionOrigin(EControllerActionOrigin eOrigin)
		{
			return null;
		}

		[Token(Token = "0x600045E")]
		[Address(RVA = "0x1501278", Offset = "0x1501278", VA = "0x1501278")]
		public static string GetGlyphForActionOrigin(EControllerActionOrigin eOrigin)
		{
			return null;
		}
	}
	[Token(Token = "0x2000133")]
	public static class SteamFriends
	{
		[Token(Token = "0x600045F")]
		[Address(RVA = "0x15014F4", Offset = "0x15014F4", VA = "0x15014F4")]
		public static string GetPersonaName()
		{
			return null;
		}

		[Token(Token = "0x6000460")]
		[Address(RVA = "0x1501518", Offset = "0x1501518", VA = "0x1501518")]
		public static SteamAPICall_t SetPersonaName(string pchPersonaName)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000461")]
		[Address(RVA = "0x15016C4", Offset = "0x15016C4", VA = "0x15016C4")]
		public static EPersonaState GetPersonaState()
		{
			return default(EPersonaState);
		}

		[Token(Token = "0x6000462")]
		[Address(RVA = "0x15016E0", Offset = "0x15016E0", VA = "0x15016E0")]
		public static int GetFriendCount(EFriendFlags iFriendFlags)
		{
			return default(int);
		}

		[Token(Token = "0x6000463")]
		[Address(RVA = "0x1501704", Offset = "0x1501704", VA = "0x1501704")]
		public static CSteamID GetFriendByIndex(int iFriend, EFriendFlags iFriendFlags)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000464")]
		[Address(RVA = "0x15017BC", Offset = "0x15017BC", VA = "0x15017BC")]
		public static EFriendRelationship GetFriendRelationship(CSteamID steamIDFriend)
		{
			return default(EFriendRelationship);
		}

		[Token(Token = "0x6000465")]
		[Address(RVA = "0x15017E8", Offset = "0x15017E8", VA = "0x15017E8")]
		public static EPersonaState GetFriendPersonaState(CSteamID steamIDFriend)
		{
			return default(EPersonaState);
		}

		[Token(Token = "0x6000466")]
		[Address(RVA = "0x1501814", Offset = "0x1501814", VA = "0x1501814")]
		public static string GetFriendPersonaName(CSteamID steamIDFriend)
		{
			return null;
		}

		[Token(Token = "0x6000467")]
		[Address(RVA = "0x1501848", Offset = "0x1501848", VA = "0x1501848")]
		public static bool GetFriendGamePlayed(CSteamID steamIDFriend, out FriendGameInfo_t pFriendGameInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x6000468")]
		[Address(RVA = "0x150187C", Offset = "0x150187C", VA = "0x150187C")]
		public static string GetFriendPersonaNameHistory(CSteamID steamIDFriend, int iPersonaName)
		{
			return null;
		}

		[Token(Token = "0x6000469")]
		[Address(RVA = "0x15018B8", Offset = "0x15018B8", VA = "0x15018B8")]
		public static int GetFriendSteamLevel(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x600046A")]
		[Address(RVA = "0x15018E4", Offset = "0x15018E4", VA = "0x15018E4")]
		public static string GetPlayerNickname(CSteamID steamIDPlayer)
		{
			return null;
		}

		[Token(Token = "0x600046B")]
		[Address(RVA = "0x1501918", Offset = "0x1501918", VA = "0x1501918")]
		public static int GetFriendsGroupCount()
		{
			return default(int);
		}

		[Token(Token = "0x600046C")]
		[Address(RVA = "0x1501934", Offset = "0x1501934", VA = "0x1501934")]
		public static FriendsGroupID_t GetFriendsGroupIDByIndex(int iFG)
		{
			return default(FriendsGroupID_t);
		}

		[Token(Token = "0x600046D")]
		[Address(RVA = "0x15019C8", Offset = "0x15019C8", VA = "0x15019C8")]
		public static string GetFriendsGroupName(FriendsGroupID_t friendsGroupID)
		{
			return null;
		}

		[Token(Token = "0x600046E")]
		[Address(RVA = "0x15019F4", Offset = "0x15019F4", VA = "0x15019F4")]
		public static int GetFriendsGroupMembersCount(FriendsGroupID_t friendsGroupID)
		{
			return default(int);
		}

		[Token(Token = "0x600046F")]
		[Address(RVA = "0x1501A18", Offset = "0x1501A18", VA = "0x1501A18")]
		public static void GetFriendsGroupMembersList(FriendsGroupID_t friendsGroupID, CSteamID[] pOutSteamIDMembers, int nMembersCount)
		{
		}

		[Token(Token = "0x6000470")]
		[Address(RVA = "0x1501A4C", Offset = "0x1501A4C", VA = "0x1501A4C")]
		public static bool HasFriend(CSteamID steamIDFriend, EFriendFlags iFriendFlags)
		{
			return default(bool);
		}

		[Token(Token = "0x6000471")]
		[Address(RVA = "0x1501A80", Offset = "0x1501A80", VA = "0x1501A80")]
		public static int GetClanCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000472")]
		[Address(RVA = "0x1501A9C", Offset = "0x1501A9C", VA = "0x1501A9C")]
		public static CSteamID GetClanByIndex(int iClan)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000473")]
		[Address(RVA = "0x1501B4C", Offset = "0x1501B4C", VA = "0x1501B4C")]
		public static string GetClanName(CSteamID steamIDClan)
		{
			return null;
		}

		[Token(Token = "0x6000474")]
		[Address(RVA = "0x1501B80", Offset = "0x1501B80", VA = "0x1501B80")]
		public static string GetClanTag(CSteamID steamIDClan)
		{
			return null;
		}

		[Token(Token = "0x6000475")]
		[Address(RVA = "0x1501BB4", Offset = "0x1501BB4", VA = "0x1501BB4")]
		public static bool GetClanActivityCounts(CSteamID steamIDClan, out int pnOnline, out int pnInGame, out int pnChatting)
		{
			return default(bool);
		}

		[Token(Token = "0x6000476")]
		[Address(RVA = "0x1501C00", Offset = "0x1501C00", VA = "0x1501C00")]
		public static SteamAPICall_t DownloadClanActivityCounts(CSteamID[] psteamIDClans, int cClansToRequest)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000477")]
		[Address(RVA = "0x1501C9C", Offset = "0x1501C9C", VA = "0x1501C9C")]
		public static int GetFriendCountFromSource(CSteamID steamIDSource)
		{
			return default(int);
		}

		[Token(Token = "0x6000478")]
		[Address(RVA = "0x1501CC8", Offset = "0x1501CC8", VA = "0x1501CC8")]
		public static CSteamID GetFriendFromSourceByIndex(CSteamID steamIDSource, int iFriend)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000479")]
		[Address(RVA = "0x1501D88", Offset = "0x1501D88", VA = "0x1501D88")]
		public static bool IsUserInSource(CSteamID steamIDUser, CSteamID steamIDSource)
		{
			return default(bool);
		}

		[Token(Token = "0x600047A")]
		[Address(RVA = "0x1501DD0", Offset = "0x1501DD0", VA = "0x1501DD0")]
		public static void SetInGameVoiceSpeaking(CSteamID steamIDUser, bool bSpeaking)
		{
		}

		[Token(Token = "0x600047B")]
		[Address(RVA = "0x1501E04", Offset = "0x1501E04", VA = "0x1501E04")]
		public static void ActivateGameOverlay(string pchDialog)
		{
		}

		[Token(Token = "0x600047C")]
		[Address(RVA = "0x1501F48", Offset = "0x1501F48", VA = "0x1501F48")]
		public static void ActivateGameOverlayToUser(string pchDialog, CSteamID steamID)
		{
		}

		[Token(Token = "0x600047D")]
		[Address(RVA = "0x150209C", Offset = "0x150209C", VA = "0x150209C")]
		public static void ActivateGameOverlayToWebPage(string pchURL)
		{
		}

		[Token(Token = "0x600047E")]
		[Address(RVA = "0x15021E0", Offset = "0x15021E0", VA = "0x15021E0")]
		public static void ActivateGameOverlayToStore(AppId_t nAppID, EOverlayToStoreFlag eFlag)
		{
		}

		[Token(Token = "0x600047F")]
		[Address(RVA = "0x150220C", Offset = "0x150220C", VA = "0x150220C")]
		public static void SetPlayedWith(CSteamID steamIDUserPlayedWith)
		{
		}

		[Token(Token = "0x6000480")]
		[Address(RVA = "0x1502238", Offset = "0x1502238", VA = "0x1502238")]
		public static void ActivateGameOverlayInviteDialog(CSteamID steamIDLobby)
		{
		}

		[Token(Token = "0x6000481")]
		[Address(RVA = "0x1502264", Offset = "0x1502264", VA = "0x1502264")]
		public static int GetSmallFriendAvatar(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x6000482")]
		[Address(RVA = "0x1502290", Offset = "0x1502290", VA = "0x1502290")]
		public static int GetMediumFriendAvatar(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x6000483")]
		[Address(RVA = "0x15022BC", Offset = "0x15022BC", VA = "0x15022BC")]
		public static int GetLargeFriendAvatar(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x6000484")]
		[Address(RVA = "0x15022E8", Offset = "0x15022E8", VA = "0x15022E8")]
		public static bool RequestUserInformation(CSteamID steamIDUser, bool bRequireNameOnly)
		{
			return default(bool);
		}

		[Token(Token = "0x6000485")]
		[Address(RVA = "0x150231C", Offset = "0x150231C", VA = "0x150231C")]
		public static SteamAPICall_t RequestClanOfficerList(CSteamID steamIDClan)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000486")]
		[Address(RVA = "0x15023B8", Offset = "0x15023B8", VA = "0x15023B8")]
		public static CSteamID GetClanOwner(CSteamID steamIDClan)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000487")]
		[Address(RVA = "0x1502470", Offset = "0x1502470", VA = "0x1502470")]
		public static int GetClanOfficerCount(CSteamID steamIDClan)
		{
			return default(int);
		}

		[Token(Token = "0x6000488")]
		[Address(RVA = "0x150249C", Offset = "0x150249C", VA = "0x150249C")]
		public static CSteamID GetClanOfficerByIndex(CSteamID steamIDClan, int iOfficer)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000489")]
		[Address(RVA = "0x150255C", Offset = "0x150255C", VA = "0x150255C")]
		public static uint GetUserRestrictions()
		{
			return default(uint);
		}

		[Token(Token = "0x600048A")]
		[Address(RVA = "0x1502578", Offset = "0x1502578", VA = "0x1502578")]
		public static bool SetRichPresence(string pchKey, string pchValue)
		{
			return default(bool);
		}

		[Token(Token = "0x600048B")]
		[Address(RVA = "0x1502818", Offset = "0x1502818", VA = "0x1502818")]
		public static void ClearRichPresence()
		{
		}

		[Token(Token = "0x600048C")]
		[Address(RVA = "0x1502834", Offset = "0x1502834", VA = "0x1502834")]
		public static string GetFriendRichPresence(CSteamID steamIDFriend, string pchKey)
		{
			return null;
		}

		[Token(Token = "0x600048D")]
		[Address(RVA = "0x15029A4", Offset = "0x15029A4", VA = "0x15029A4")]
		public static int GetFriendRichPresenceKeyCount(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x600048E")]
		[Address(RVA = "0x15029D0", Offset = "0x15029D0", VA = "0x15029D0")]
		public static string GetFriendRichPresenceKeyByIndex(CSteamID steamIDFriend, int iKey)
		{
			return null;
		}

		[Token(Token = "0x600048F")]
		[Address(RVA = "0x1502A0C", Offset = "0x1502A0C", VA = "0x1502A0C")]
		public static void RequestFriendRichPresence(CSteamID steamIDFriend)
		{
		}

		[Token(Token = "0x6000490")]
		[Address(RVA = "0x1502A38", Offset = "0x1502A38", VA = "0x1502A38")]
		public static bool InviteUserToGame(CSteamID steamIDFriend, string pchConnectString)
		{
			return default(bool);
		}

		[Token(Token = "0x6000491")]
		[Address(RVA = "0x1502B9C", Offset = "0x1502B9C", VA = "0x1502B9C")]
		public static int GetCoplayFriendCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000492")]
		[Address(RVA = "0x1502BB8", Offset = "0x1502BB8", VA = "0x1502BB8")]
		public static CSteamID GetCoplayFriend(int iCoplayFriend)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000493")]
		[Address(RVA = "0x1502C68", Offset = "0x1502C68", VA = "0x1502C68")]
		public static int GetFriendCoplayTime(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x6000494")]
		[Address(RVA = "0x1502C94", Offset = "0x1502C94", VA = "0x1502C94")]
		public static AppId_t GetFriendCoplayGame(CSteamID steamIDFriend)
		{
			return default(AppId_t);
		}

		[Token(Token = "0x6000495")]
		[Address(RVA = "0x1502D30", Offset = "0x1502D30", VA = "0x1502D30")]
		public static SteamAPICall_t JoinClanChatRoom(CSteamID steamIDClan)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000496")]
		[Address(RVA = "0x1502DCC", Offset = "0x1502DCC", VA = "0x1502DCC")]
		public static bool LeaveClanChatRoom(CSteamID steamIDClan)
		{
			return default(bool);
		}

		[Token(Token = "0x6000497")]
		[Address(RVA = "0x1502DF8", Offset = "0x1502DF8", VA = "0x1502DF8")]
		public static int GetClanChatMemberCount(CSteamID steamIDClan)
		{
			return default(int);
		}

		[Token(Token = "0x6000498")]
		[Address(RVA = "0x1502E24", Offset = "0x1502E24", VA = "0x1502E24")]
		public static CSteamID GetChatMemberByIndex(CSteamID steamIDClan, int iUser)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000499")]
		[Address(RVA = "0x1502EE4", Offset = "0x1502EE4", VA = "0x1502EE4")]
		public static bool SendClanChatMessage(CSteamID steamIDClanChat, string pchText)
		{
			return default(bool);
		}

		[Token(Token = "0x600049A")]
		[Address(RVA = "0x1503048", Offset = "0x1503048", VA = "0x1503048")]
		public static int GetClanChatMessage(CSteamID steamIDClanChat, int iMessage, out string prgchText, int cchTextMax, out EChatEntryType peChatEntryType, out CSteamID psteamidChatter)
		{
			return default(int);
		}

		[Token(Token = "0x600049B")]
		[Address(RVA = "0x150316C", Offset = "0x150316C", VA = "0x150316C")]
		public static bool IsClanChatAdmin(CSteamID steamIDClanChat, CSteamID steamIDUser)
		{
			return default(bool);
		}

		[Token(Token = "0x600049C")]
		[Address(RVA = "0x15031B4", Offset = "0x15031B4", VA = "0x15031B4")]
		public static bool IsClanChatWindowOpenInSteam(CSteamID steamIDClanChat)
		{
			return default(bool);
		}

		[Token(Token = "0x600049D")]
		[Address(RVA = "0x15031E0", Offset = "0x15031E0", VA = "0x15031E0")]
		public static bool OpenClanChatWindowInSteam(CSteamID steamIDClanChat)
		{
			return default(bool);
		}

		[Token(Token = "0x600049E")]
		[Address(RVA = "0x150320C", Offset = "0x150320C", VA = "0x150320C")]
		public static bool CloseClanChatWindowInSteam(CSteamID steamIDClanChat)
		{
			return default(bool);
		}

		[Token(Token = "0x600049F")]
		[Address(RVA = "0x1503238", Offset = "0x1503238", VA = "0x1503238")]
		public static bool SetListenForFriendsMessages(bool bInterceptEnabled)
		{
			return default(bool);
		}

		[Token(Token = "0x60004A0")]
		[Address(RVA = "0x150325C", Offset = "0x150325C", VA = "0x150325C")]
		public static bool ReplyToFriendMessage(CSteamID steamIDFriend, string pchMsgToSend)
		{
			return default(bool);
		}

		[Token(Token = "0x60004A1")]
		[Address(RVA = "0x15033C0", Offset = "0x15033C0", VA = "0x15033C0")]
		public static int GetFriendMessage(CSteamID steamIDFriend, int iMessageID, out string pvData, int cubData, out EChatEntryType peChatEntryType)
		{
			return default(int);
		}

		[Token(Token = "0x60004A2")]
		[Address(RVA = "0x15034E0", Offset = "0x15034E0", VA = "0x15034E0")]
		public static SteamAPICall_t GetFollowerCount(CSteamID steamID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60004A3")]
		[Address(RVA = "0x150357C", Offset = "0x150357C", VA = "0x150357C")]
		public static SteamAPICall_t IsFollowing(CSteamID steamID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60004A4")]
		[Address(RVA = "0x1503618", Offset = "0x1503618", VA = "0x1503618")]
		public static SteamAPICall_t EnumerateFollowingList(uint unStartIndex)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x2000134")]
	public static class SteamGameServer
	{
		[Token(Token = "0x60004A5")]
		[Address(RVA = "0x15036AC", Offset = "0x15036AC", VA = "0x15036AC")]
		public static bool InitGameServer(uint unIP, ushort usGamePort, ushort usQueryPort, uint unFlags, AppId_t nGameAppId, string pchVersionString)
		{
			return default(bool);
		}

		[Token(Token = "0x60004A6")]
		[Address(RVA = "0x1503820", Offset = "0x1503820", VA = "0x1503820")]
		public static void SetProduct(string pszProduct)
		{
		}

		[Token(Token = "0x60004A7")]
		[Address(RVA = "0x1503964", Offset = "0x1503964", VA = "0x1503964")]
		public static void SetGameDescription(string pszGameDescription)
		{
		}

		[Token(Token = "0x60004A8")]
		[Address(RVA = "0x1503AA8", Offset = "0x1503AA8", VA = "0x1503AA8")]
		public static void SetModDir(string pszModDir)
		{
		}

		[Token(Token = "0x60004A9")]
		[Address(RVA = "0x1503BEC", Offset = "0x1503BEC", VA = "0x1503BEC")]
		public static void SetDedicatedServer(bool bDedicated)
		{
		}

		[Token(Token = "0x60004AA")]
		[Address(RVA = "0x1503C10", Offset = "0x1503C10", VA = "0x1503C10")]
		public static void LogOn(string pszToken)
		{
		}

		[Token(Token = "0x60004AB")]
		[Address(RVA = "0x1503D54", Offset = "0x1503D54", VA = "0x1503D54")]
		public static void LogOnAnonymous()
		{
		}

		[Token(Token = "0x60004AC")]
		[Address(RVA = "0x1503D70", Offset = "0x1503D70", VA = "0x1503D70")]
		public static void LogOff()
		{
		}

		[Token(Token = "0x60004AD")]
		[Address(RVA = "0x1503D8C", Offset = "0x1503D8C", VA = "0x1503D8C")]
		public static bool BLoggedOn()
		{
			return default(bool);
		}

		[Token(Token = "0x60004AE")]
		[Address(RVA = "0x1503DA8", Offset = "0x1503DA8", VA = "0x1503DA8")]
		public static bool BSecure()
		{
			return default(bool);
		}

		[Token(Token = "0x60004AF")]
		[Address(RVA = "0x1503DC4", Offset = "0x1503DC4", VA = "0x1503DC4")]
		public static CSteamID GetSteamID()
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60004B0")]
		[Address(RVA = "0x1503E6C", Offset = "0x1503E6C", VA = "0x1503E6C")]
		public static bool WasRestartRequested()
		{
			return default(bool);
		}

		[Token(Token = "0x60004B1")]
		[Address(RVA = "0x1503E88", Offset = "0x1503E88", VA = "0x1503E88")]
		public static void SetMaxPlayerCount(int cPlayersMax)
		{
		}

		[Token(Token = "0x60004B2")]
		[Address(RVA = "0x1503EAC", Offset = "0x1503EAC", VA = "0x1503EAC")]
		public static void SetBotPlayerCount(int cBotplayers)
		{
		}

		[Token(Token = "0x60004B3")]
		[Address(RVA = "0x1503ED0", Offset = "0x1503ED0", VA = "0x1503ED0")]
		public static void SetServerName(string pszServerName)
		{
		}

		[Token(Token = "0x60004B4")]
		[Address(RVA = "0x1504014", Offset = "0x1504014", VA = "0x1504014")]
		public static void SetMapName(string pszMapName)
		{
		}

		[Token(Token = "0x60004B5")]
		[Address(RVA = "0x1504158", Offset = "0x1504158", VA = "0x1504158")]
		public static void SetPasswordProtected(bool bPasswordProtected)
		{
		}

		[Token(Token = "0x60004B6")]
		[Address(RVA = "0x150417C", Offset = "0x150417C", VA = "0x150417C")]
		public static void SetSpectatorPort(ushort unSpectatorPort)
		{
		}

		[Token(Token = "0x60004B7")]
		[Address(RVA = "0x15041A0", Offset = "0x15041A0", VA = "0x15041A0")]
		public static void SetSpectatorServerName(string pszSpectatorServerName)
		{
		}

		[Token(Token = "0x60004B8")]
		[Address(RVA = "0x15042E4", Offset = "0x15042E4", VA = "0x15042E4")]
		public static void ClearAllKeyValues()
		{
		}

		[Token(Token = "0x60004B9")]
		[Address(RVA = "0x1504300", Offset = "0x1504300", VA = "0x1504300")]
		public static void SetKeyValue(string pKey, string pValue)
		{
		}

		[Token(Token = "0x60004BA")]
		[Address(RVA = "0x1504544", Offset = "0x1504544", VA = "0x1504544")]
		public static void SetGameTags(string pchGameTags)
		{
		}

		[Token(Token = "0x60004BB")]
		[Address(RVA = "0x1504688", Offset = "0x1504688", VA = "0x1504688")]
		public static void SetGameData(string pchGameData)
		{
		}

		[Token(Token = "0x60004BC")]
		[Address(RVA = "0x15047CC", Offset = "0x15047CC", VA = "0x15047CC")]
		public static void SetRegion(string pszRegion)
		{
		}

		[Token(Token = "0x60004BD")]
		[Address(RVA = "0x1504910", Offset = "0x1504910", VA = "0x1504910")]
		public static bool SendUserConnectAndAuthenticate(uint unIPClient, byte[] pvAuthBlob, uint cubAuthBlobSize, out CSteamID pSteamIDUser)
		{
			return default(bool);
		}

		[Token(Token = "0x60004BE")]
		[Address(RVA = "0x1504958", Offset = "0x1504958", VA = "0x1504958")]
		public static CSteamID CreateUnauthenticatedUserConnection()
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60004BF")]
		[Address(RVA = "0x1504A00", Offset = "0x1504A00", VA = "0x1504A00")]
		public static void SendUserDisconnect(CSteamID steamIDUser)
		{
		}

		[Token(Token = "0x60004C0")]
		[Address(RVA = "0x1504A2C", Offset = "0x1504A2C", VA = "0x1504A2C")]
		public static bool BUpdateUserData(CSteamID steamIDUser, string pchPlayerName, uint uScore)
		{
			return default(bool);
		}

		[Token(Token = "0x60004C1")]
		[Address(RVA = "0x1504B98", Offset = "0x1504B98", VA = "0x1504B98")]
		public static HAuthTicket GetAuthSessionTicket(byte[] pTicket, int cbMaxTicket, out uint pcbTicket)
		{
			return default(HAuthTicket);
		}

		[Token(Token = "0x60004C2")]
		[Address(RVA = "0x1504C3C", Offset = "0x1504C3C", VA = "0x1504C3C")]
		public static EBeginAuthSessionResult BeginAuthSession(byte[] pAuthTicket, int cbAuthTicket, CSteamID steamID)
		{
			return default(EBeginAuthSessionResult);
		}

		[Token(Token = "0x60004C3")]
		[Address(RVA = "0x1504C84", Offset = "0x1504C84", VA = "0x1504C84")]
		public static void EndAuthSession(CSteamID steamID)
		{
		}

		[Token(Token = "0x60004C4")]
		[Address(RVA = "0x1504CB0", Offset = "0x1504CB0", VA = "0x1504CB0")]
		public static void CancelAuthTicket(HAuthTicket hAuthTicket)
		{
		}

		[Token(Token = "0x60004C5")]
		[Address(RVA = "0x1504CD4", Offset = "0x1504CD4", VA = "0x1504CD4")]
		public static EUserHasLicenseForAppResult UserHasLicenseForApp(CSteamID steamID, AppId_t appID)
		{
			return default(EUserHasLicenseForAppResult);
		}

		[Token(Token = "0x60004C6")]
		[Address(RVA = "0x1504D08", Offset = "0x1504D08", VA = "0x1504D08")]
		public static bool RequestUserGroupStatus(CSteamID steamIDUser, CSteamID steamIDGroup)
		{
			return default(bool);
		}

		[Token(Token = "0x60004C7")]
		[Address(RVA = "0x1504D50", Offset = "0x1504D50", VA = "0x1504D50")]
		public static void GetGameplayStats()
		{
		}

		[Token(Token = "0x60004C8")]
		[Address(RVA = "0x1504D6C", Offset = "0x1504D6C", VA = "0x1504D6C")]
		public static SteamAPICall_t GetServerReputation()
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60004C9")]
		[Address(RVA = "0x1504DF8", Offset = "0x1504DF8", VA = "0x1504DF8")]
		public static uint GetPublicIP()
		{
			return default(uint);
		}

		[Token(Token = "0x60004CA")]
		[Address(RVA = "0x1504E14", Offset = "0x1504E14", VA = "0x1504E14")]
		public static bool HandleIncomingPacket(byte[] pData, int cbData, uint srcIP, ushort srcPort)
		{
			return default(bool);
		}

		[Token(Token = "0x60004CB")]
		[Address(RVA = "0x1504E5C", Offset = "0x1504E5C", VA = "0x1504E5C")]
		public static int GetNextOutgoingPacket(byte[] pOut, int cbMaxOut, out uint pNetAdr, out ushort pPort)
		{
			return default(int);
		}

		[Token(Token = "0x60004CC")]
		[Address(RVA = "0x1504EA4", Offset = "0x1504EA4", VA = "0x1504EA4")]
		public static void EnableHeartbeats(bool bActive)
		{
		}

		[Token(Token = "0x60004CD")]
		[Address(RVA = "0x1504EC8", Offset = "0x1504EC8", VA = "0x1504EC8")]
		public static void SetHeartbeatInterval(int iHeartbeatInterval)
		{
		}

		[Token(Token = "0x60004CE")]
		[Address(RVA = "0x1504EEC", Offset = "0x1504EEC", VA = "0x1504EEC")]
		public static void ForceHeartbeat()
		{
		}

		[Token(Token = "0x60004CF")]
		[Address(RVA = "0x1504F08", Offset = "0x1504F08", VA = "0x1504F08")]
		public static SteamAPICall_t AssociateWithClan(CSteamID steamIDClan)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60004D0")]
		[Address(RVA = "0x1504FA4", Offset = "0x1504FA4", VA = "0x1504FA4")]
		public static SteamAPICall_t ComputeNewPlayerCompatibility(CSteamID steamIDNewPlayer)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x2000135")]
	public static class SteamGameServerHTTP
	{
		[Token(Token = "0x60004D1")]
		[Address(RVA = "0x1505040", Offset = "0x1505040", VA = "0x1505040")]
		public static HTTPRequestHandle CreateHTTPRequest(EHTTPMethod eHTTPRequestMethod, string pchAbsoluteURL)
		{
			return default(HTTPRequestHandle);
		}

		[Token(Token = "0x60004D2")]
		[Address(RVA = "0x15051DC", Offset = "0x15051DC", VA = "0x15051DC")]
		public static bool SetHTTPRequestContextValue(HTTPRequestHandle hRequest, ulong ulContextValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60004D3")]
		[Address(RVA = "0x150521C", Offset = "0x150521C", VA = "0x150521C")]
		public static bool SetHTTPRequestNetworkActivityTimeout(HTTPRequestHandle hRequest, uint unTimeoutSeconds)
		{
			return default(bool);
		}

		[Token(Token = "0x60004D4")]
		[Address(RVA = "0x1505248", Offset = "0x1505248", VA = "0x1505248")]
		public static bool SetHTTPRequestHeaderValue(HTTPRequestHandle hRequest, string pchHeaderName, string pchHeaderValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60004D5")]
		[Address(RVA = "0x15054F0", Offset = "0x15054F0", VA = "0x15054F0")]
		public static bool SetHTTPRequestGetOrPostParameter(HTTPRequestHandle hRequest, string pchParamName, string pchParamValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60004D6")]
		[Address(RVA = "0x1505798", Offset = "0x1505798", VA = "0x1505798")]
		public static bool SendHTTPRequest(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x60004D7")]
		[Address(RVA = "0x15057C4", Offset = "0x15057C4", VA = "0x15057C4")]
		public static bool SendHTTPRequestAndStreamResponse(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x60004D8")]
		[Address(RVA = "0x15057F0", Offset = "0x15057F0", VA = "0x15057F0")]
		public static bool DeferHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x60004D9")]
		[Address(RVA = "0x1505814", Offset = "0x1505814", VA = "0x1505814")]
		public static bool PrioritizeHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x60004DA")]
		[Address(RVA = "0x1505838", Offset = "0x1505838", VA = "0x1505838")]
		public static bool GetHTTPResponseHeaderSize(HTTPRequestHandle hRequest, string pchHeaderName, out uint unResponseHeaderSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60004DB")]
		[Address(RVA = "0x150599C", Offset = "0x150599C", VA = "0x150599C")]
		public static bool GetHTTPResponseHeaderValue(HTTPRequestHandle hRequest, string pchHeaderName, byte[] pHeaderValueBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60004DC")]
		[Address(RVA = "0x1505B08", Offset = "0x1505B08", VA = "0x1505B08")]
		public static bool GetHTTPResponseBodySize(HTTPRequestHandle hRequest, out uint unBodySize)
		{
			return default(bool);
		}

		[Token(Token = "0x60004DD")]
		[Address(RVA = "0x1505B34", Offset = "0x1505B34", VA = "0x1505B34")]
		public static bool GetHTTPResponseBodyData(HTTPRequestHandle hRequest, byte[] pBodyDataBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60004DE")]
		[Address(RVA = "0x1505B68", Offset = "0x1505B68", VA = "0x1505B68")]
		public static bool GetHTTPStreamingResponseBodyData(HTTPRequestHandle hRequest, uint cOffset, byte[] pBodyDataBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60004DF")]
		[Address(RVA = "0x1505BB0", Offset = "0x1505BB0", VA = "0x1505BB0")]
		public static bool ReleaseHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x60004E0")]
		[Address(RVA = "0x1505BD4", Offset = "0x1505BD4", VA = "0x1505BD4")]
		public static bool GetHTTPDownloadProgressPct(HTTPRequestHandle hRequest, out float pflPercentOut)
		{
			return default(bool);
		}

		[Token(Token = "0x60004E1")]
		[Address(RVA = "0x1505C00", Offset = "0x1505C00", VA = "0x1505C00")]
		public static bool SetHTTPRequestRawPostBody(HTTPRequestHandle hRequest, string pchContentType, byte[] pubBody, uint unBodyLen)
		{
			return default(bool);
		}

		[Token(Token = "0x60004E2")]
		[Address(RVA = "0x1505D6C", Offset = "0x1505D6C", VA = "0x1505D6C")]
		public static HTTPCookieContainerHandle CreateCookieContainer(bool bAllowResponsesToModify)
		{
			return default(HTTPCookieContainerHandle);
		}

		[Token(Token = "0x60004E3")]
		[Address(RVA = "0x1505E00", Offset = "0x1505E00", VA = "0x1505E00")]
		public static bool ReleaseCookieContainer(HTTPCookieContainerHandle hCookieContainer)
		{
			return default(bool);
		}

		[Token(Token = "0x60004E4")]
		[Address(RVA = "0x1505E24", Offset = "0x1505E24", VA = "0x1505E24")]
		public static bool SetCookie(HTTPCookieContainerHandle hCookieContainer, string pchHost, string pchUrl, string pchCookie)
		{
			return default(bool);
		}

		[Token(Token = "0x60004E5")]
		[Address(RVA = "0x15061DC", Offset = "0x15061DC", VA = "0x15061DC")]
		public static bool SetHTTPRequestCookieContainer(HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer)
		{
			return default(bool);
		}

		[Token(Token = "0x60004E6")]
		[Address(RVA = "0x1506208", Offset = "0x1506208", VA = "0x1506208")]
		public static bool SetHTTPRequestUserAgentInfo(HTTPRequestHandle hRequest, string pchUserAgentInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x60004E7")]
		[Address(RVA = "0x1506364", Offset = "0x1506364", VA = "0x1506364")]
		public static bool SetHTTPRequestRequiresVerifiedCertificate(HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate)
		{
			return default(bool);
		}

		[Token(Token = "0x60004E8")]
		[Address(RVA = "0x1506390", Offset = "0x1506390", VA = "0x1506390")]
		public static bool SetHTTPRequestAbsoluteTimeoutMS(HTTPRequestHandle hRequest, uint unMilliseconds)
		{
			return default(bool);
		}

		[Token(Token = "0x60004E9")]
		[Address(RVA = "0x15063BC", Offset = "0x15063BC", VA = "0x15063BC")]
		public static bool GetHTTPRequestWasTimedOut(HTTPRequestHandle hRequest, out bool pbWasTimedOut)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000136")]
	public static class SteamGameServerInventory
	{
		[Token(Token = "0x60004EA")]
		[Address(RVA = "0x15063E8", Offset = "0x15063E8", VA = "0x15063E8")]
		public static EResult GetResultStatus(SteamInventoryResult_t resultHandle)
		{
			return default(EResult);
		}

		[Token(Token = "0x60004EB")]
		[Address(RVA = "0x150640C", Offset = "0x150640C", VA = "0x150640C")]
		public static bool GetResultItems(SteamInventoryResult_t resultHandle, SteamItemDetails_t[] pOutItemsArray, ref uint punOutItemsArraySize)
		{
			return default(bool);
		}

		[Token(Token = "0x60004EC")]
		[Address(RVA = "0x1506440", Offset = "0x1506440", VA = "0x1506440")]
		public static bool GetResultItemProperty(SteamInventoryResult_t resultHandle, uint unItemIndex, string pchPropertyName, out string pchValueBuffer, ref uint punValueBufferSizeOut)
		{
			return default(bool);
		}

		[Token(Token = "0x60004ED")]
		[Address(RVA = "0x1506654", Offset = "0x1506654", VA = "0x1506654")]
		public static uint GetResultTimestamp(SteamInventoryResult_t resultHandle)
		{
			return default(uint);
		}

		[Token(Token = "0x60004EE")]
		[Address(RVA = "0x1506678", Offset = "0x1506678", VA = "0x1506678")]
		public static bool CheckResultSteamID(SteamInventoryResult_t resultHandle, CSteamID steamIDExpected)
		{
			return default(bool);
		}

		[Token(Token = "0x60004EF")]
		[Address(RVA = "0x15066AC", Offset = "0x15066AC", VA = "0x15066AC")]
		public static void DestroyResult(SteamInventoryResult_t resultHandle)
		{
		}

		[Token(Token = "0x60004F0")]
		[Address(RVA = "0x15066D0", Offset = "0x15066D0", VA = "0x15066D0")]
		public static bool GetAllItems(out SteamInventoryResult_t pResultHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F1")]
		[Address(RVA = "0x15066F4", Offset = "0x15066F4", VA = "0x15066F4")]
		public static bool GetItemsByID(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t[] pInstanceIDs, uint unCountInstanceIDs)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F2")]
		[Address(RVA = "0x1506728", Offset = "0x1506728", VA = "0x1506728")]
		public static bool SerializeResult(SteamInventoryResult_t resultHandle, byte[] pOutBuffer, out uint punOutBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F3")]
		[Address(RVA = "0x150675C", Offset = "0x150675C", VA = "0x150675C")]
		public static bool DeserializeResult(out SteamInventoryResult_t pOutResultHandle, byte[] pBuffer, uint unBufferSize, bool bRESERVED_MUST_BE_FALSE = false)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F4")]
		[Address(RVA = "0x15067A4", Offset = "0x15067A4", VA = "0x15067A4")]
		public static bool GenerateItems(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F5")]
		[Address(RVA = "0x15067EC", Offset = "0x15067EC", VA = "0x15067EC")]
		public static bool GrantPromoItems(out SteamInventoryResult_t pResultHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F6")]
		[Address(RVA = "0x1506810", Offset = "0x1506810", VA = "0x1506810")]
		public static bool AddPromoItem(out SteamInventoryResult_t pResultHandle, SteamItemDef_t itemDef)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F7")]
		[Address(RVA = "0x150683C", Offset = "0x150683C", VA = "0x150683C")]
		public static bool AddPromoItems(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayItemDefs, uint unArrayLength)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F8")]
		[Address(RVA = "0x1506870", Offset = "0x1506870", VA = "0x1506870")]
		public static bool ConsumeItem(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemConsume, uint unQuantity)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F9")]
		[Address(RVA = "0x15068B4", Offset = "0x15068B4", VA = "0x15068B4")]
		public static bool ExchangeItems(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayGenerate, uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, SteamItemInstanceID_t[] pArrayDestroy, uint[] punArrayDestroyQuantity, uint unArrayDestroyLength)
		{
			return default(bool);
		}

		[Token(Token = "0x60004FA")]
		[Address(RVA = "0x1506904", Offset = "0x1506904", VA = "0x1506904")]
		public static bool TransferItemQuantity(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemIdSource, uint unQuantity, SteamItemInstanceID_t itemIdDest)
		{
			return default(bool);
		}

		[Token(Token = "0x60004FB")]
		[Address(RVA = "0x1506958", Offset = "0x1506958", VA = "0x1506958")]
		public static void SendItemDropHeartbeat()
		{
		}

		[Token(Token = "0x60004FC")]
		[Address(RVA = "0x1506974", Offset = "0x1506974", VA = "0x1506974")]
		public static bool TriggerItemDrop(out SteamInventoryResult_t pResultHandle, SteamItemDef_t dropListDefinition)
		{
			return default(bool);
		}

		[Token(Token = "0x60004FD")]
		[Address(RVA = "0x15069A0", Offset = "0x15069A0", VA = "0x15069A0")]
		public static bool TradeItems(out SteamInventoryResult_t pResultHandle, CSteamID steamIDTradePartner, SteamItemInstanceID_t[] pArrayGive, uint[] pArrayGiveQuantity, uint nArrayGiveLength, SteamItemInstanceID_t[] pArrayGet, uint[] pArrayGetQuantity, uint nArrayGetLength)
		{
			return default(bool);
		}

		[Token(Token = "0x60004FE")]
		[Address(RVA = "0x1506A0C", Offset = "0x1506A0C", VA = "0x1506A0C")]
		public static bool LoadItemDefinitions()
		{
			return default(bool);
		}

		[Token(Token = "0x60004FF")]
		[Address(RVA = "0x1506A28", Offset = "0x1506A28", VA = "0x1506A28")]
		public static bool GetItemDefinitionIDs(SteamItemDef_t[] pItemDefIDs, out uint punItemDefIDsArraySize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000500")]
		[Address(RVA = "0x1506A54", Offset = "0x1506A54", VA = "0x1506A54")]
		public static bool GetItemDefinitionProperty(SteamItemDef_t iDefinition, string pchPropertyName, out string pchValueBuffer, ref uint punValueBufferSizeOut)
		{
			return default(bool);
		}

		[Token(Token = "0x6000501")]
		[Address(RVA = "0x1506C54", Offset = "0x1506C54", VA = "0x1506C54")]
		public static SteamAPICall_t RequestEligiblePromoItemDefinitionsIDs(CSteamID steamID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000502")]
		[Address(RVA = "0x1506CF0", Offset = "0x1506CF0", VA = "0x1506CF0")]
		public static bool GetEligiblePromoItemDefinitionIDs(CSteamID steamID, SteamItemDef_t[] pItemDefIDs, ref uint punItemDefIDsArraySize)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000137")]
	public static class SteamGameServerNetworking
	{
		[Token(Token = "0x6000503")]
		[Address(RVA = "0x1506D38", Offset = "0x1506D38", VA = "0x1506D38")]
		public static bool SendP2PPacket(CSteamID steamIDRemote, byte[] pubData, uint cubData, EP2PSend eP2PSendType, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x6000504")]
		[Address(RVA = "0x1506D88", Offset = "0x1506D88", VA = "0x1506D88")]
		public static bool IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x6000505")]
		[Address(RVA = "0x1506DB4", Offset = "0x1506DB4", VA = "0x1506DB4")]
		public static bool ReadP2PPacket(byte[] pubDest, uint cubDest, out uint pcubMsgSize, out CSteamID psteamIDRemote, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x6000506")]
		[Address(RVA = "0x1506E00", Offset = "0x1506E00", VA = "0x1506E00")]
		public static bool AcceptP2PSessionWithUser(CSteamID steamIDRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x6000507")]
		[Address(RVA = "0x1506E2C", Offset = "0x1506E2C", VA = "0x1506E2C")]
		public static bool CloseP2PSessionWithUser(CSteamID steamIDRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x6000508")]
		[Address(RVA = "0x1506E58", Offset = "0x1506E58", VA = "0x1506E58")]
		public static bool CloseP2PChannelWithUser(CSteamID steamIDRemote, int nChannel)
		{
			return default(bool);
		}

		[Token(Token = "0x6000509")]
		[Address(RVA = "0x1506E8C", Offset = "0x1506E8C", VA = "0x1506E8C")]
		public static bool GetP2PSessionState(CSteamID steamIDRemote, out P2PSessionState_t pConnectionState)
		{
			return default(bool);
		}

		[Token(Token = "0x600050A")]
		[Address(RVA = "0x1506EC0", Offset = "0x1506EC0", VA = "0x1506EC0")]
		public static bool AllowP2PPacketRelay(bool bAllow)
		{
			return default(bool);
		}

		[Token(Token = "0x600050B")]
		[Address(RVA = "0x1506EE4", Offset = "0x1506EE4", VA = "0x1506EE4")]
		public static SNetListenSocket_t CreateListenSocket(int nVirtualP2PPort, uint nIP, ushort nPort, bool bAllowUseOfPacketRelay)
		{
			return default(SNetListenSocket_t);
		}

		[Token(Token = "0x600050C")]
		[Address(RVA = "0x1506F2C", Offset = "0x1506F2C", VA = "0x1506F2C")]
		public static SNetSocket_t CreateP2PConnectionSocket(CSteamID steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay)
		{
			return default(SNetSocket_t);
		}

		[Token(Token = "0x600050D")]
		[Address(RVA = "0x1506F78", Offset = "0x1506F78", VA = "0x1506F78")]
		public static SNetSocket_t CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec)
		{
			return default(SNetSocket_t);
		}

		[Token(Token = "0x600050E")]
		[Address(RVA = "0x1506FAC", Offset = "0x1506FAC", VA = "0x1506FAC")]
		public static bool DestroySocket(SNetSocket_t hSocket, bool bNotifyRemoteEnd)
		{
			return default(bool);
		}

		[Token(Token = "0x600050F")]
		[Address(RVA = "0x1506FD8", Offset = "0x1506FD8", VA = "0x1506FD8")]
		public static bool DestroyListenSocket(SNetListenSocket_t hSocket, bool bNotifyRemoteEnd)
		{
			return default(bool);
		}

		[Token(Token = "0x6000510")]
		[Address(RVA = "0x1507004", Offset = "0x1507004", VA = "0x1507004")]
		public static bool SendDataOnSocket(SNetSocket_t hSocket, byte[] pubData, uint cubData, bool bReliable)
		{
			return default(bool);
		}

		[Token(Token = "0x6000511")]
		[Address(RVA = "0x150704C", Offset = "0x150704C", VA = "0x150704C")]
		public static bool IsDataAvailableOnSocket(SNetSocket_t hSocket, out uint pcubMsgSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000512")]
		[Address(RVA = "0x1507078", Offset = "0x1507078", VA = "0x1507078")]
		public static bool RetrieveDataFromSocket(SNetSocket_t hSocket, byte[] pubDest, uint cubDest, out uint pcubMsgSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000513")]
		[Address(RVA = "0x15070C0", Offset = "0x15070C0", VA = "0x15070C0")]
		public static bool IsDataAvailable(SNetListenSocket_t hListenSocket, out uint pcubMsgSize, out SNetSocket_t phSocket)
		{
			return default(bool);
		}

		[Token(Token = "0x6000514")]
		[Address(RVA = "0x15070F4", Offset = "0x15070F4", VA = "0x15070F4")]
		public static bool RetrieveData(SNetListenSocket_t hListenSocket, byte[] pubDest, uint cubDest, out uint pcubMsgSize, out SNetSocket_t phSocket)
		{
			return default(bool);
		}

		[Token(Token = "0x6000515")]
		[Address(RVA = "0x1507140", Offset = "0x1507140", VA = "0x1507140")]
		public static bool GetSocketInfo(SNetSocket_t hSocket, out CSteamID pSteamIDRemote, out int peSocketStatus, out uint punIPRemote, out ushort punPortRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x6000516")]
		[Address(RVA = "0x150718C", Offset = "0x150718C", VA = "0x150718C")]
		public static bool GetListenSocketInfo(SNetListenSocket_t hListenSocket, out uint pnIP, out ushort pnPort)
		{
			return default(bool);
		}

		[Token(Token = "0x6000517")]
		[Address(RVA = "0x15071C0", Offset = "0x15071C0", VA = "0x15071C0")]
		public static ESNetSocketConnectionType GetSocketConnectionType(SNetSocket_t hSocket)
		{
			return default(ESNetSocketConnectionType);
		}

		[Token(Token = "0x6000518")]
		[Address(RVA = "0x15071E4", Offset = "0x15071E4", VA = "0x15071E4")]
		public static int GetMaxPacketSize(SNetSocket_t hSocket)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000138")]
	public static class SteamGameServerStats
	{
		[Token(Token = "0x6000519")]
		[Address(RVA = "0x1507208", Offset = "0x1507208", VA = "0x1507208")]
		public static SteamAPICall_t RequestUserStats(CSteamID steamIDUser)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600051A")]
		[Address(RVA = "0x15072A4", Offset = "0x15072A4", VA = "0x15072A4")]
		public static bool GetUserStat(CSteamID steamIDUser, string pchName, out int pData)
		{
			return default(bool);
		}

		[Token(Token = "0x600051B")]
		[Address(RVA = "0x1507410", Offset = "0x1507410", VA = "0x1507410")]
		public static bool GetUserStat(CSteamID steamIDUser, string pchName, out float pData)
		{
			return default(bool);
		}

		[Token(Token = "0x600051C")]
		[Address(RVA = "0x150757C", Offset = "0x150757C", VA = "0x150757C")]
		public static bool GetUserAchievement(CSteamID steamIDUser, string pchName, out bool pbAchieved)
		{
			return default(bool);
		}

		[Token(Token = "0x600051D")]
		[Address(RVA = "0x15076E8", Offset = "0x15076E8", VA = "0x15076E8")]
		public static bool SetUserStat(CSteamID steamIDUser, string pchName, int nData)
		{
			return default(bool);
		}

		[Token(Token = "0x600051E")]
		[Address(RVA = "0x1507854", Offset = "0x1507854", VA = "0x1507854")]
		public static bool SetUserStat(CSteamID steamIDUser, string pchName, float fData)
		{
			return default(bool);
		}

		[Token(Token = "0x600051F")]
		[Address(RVA = "0x15079C0", Offset = "0x15079C0", VA = "0x15079C0")]
		public static bool UpdateUserAvgRateStat(CSteamID steamIDUser, string pchName, float flCountThisSession, double dSessionLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000520")]
		[Address(RVA = "0x1507B44", Offset = "0x1507B44", VA = "0x1507B44")]
		public static bool SetUserAchievement(CSteamID steamIDUser, string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000521")]
		[Address(RVA = "0x1507CA8", Offset = "0x1507CA8", VA = "0x1507CA8")]
		public static bool ClearUserAchievement(CSteamID steamIDUser, string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000522")]
		[Address(RVA = "0x1507E0C", Offset = "0x1507E0C", VA = "0x1507E0C")]
		public static SteamAPICall_t StoreUserStats(CSteamID steamIDUser)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x2000139")]
	public static class SteamGameServerUGC
	{
		[Token(Token = "0x6000523")]
		[Address(RVA = "0x1507EA8", Offset = "0x1507EA8", VA = "0x1507EA8")]
		public static UGCQueryHandle_t CreateQueryUserUGCRequest(AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x6000524")]
		[Address(RVA = "0x1507F84", Offset = "0x1507F84", VA = "0x1507F84")]
		public static UGCQueryHandle_t CreateQueryAllUGCRequest(EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x6000525")]
		[Address(RVA = "0x1508050", Offset = "0x1508050", VA = "0x1508050")]
		public static UGCQueryHandle_t CreateQueryUGCDetailsRequest(PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x6000526")]
		[Address(RVA = "0x1508108", Offset = "0x1508108", VA = "0x1508108")]
		public static SteamAPICall_t SendQueryUGCRequest(UGCQueryHandle_t handle)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000527")]
		[Address(RVA = "0x15081A4", Offset = "0x15081A4", VA = "0x15081A4")]
		public static bool GetQueryUGCResult(UGCQueryHandle_t handle, uint index, out SteamUGCDetails_t pDetails)
		{
			return default(bool);
		}

		[Token(Token = "0x6000528")]
		[Address(RVA = "0x15081EC", Offset = "0x15081EC", VA = "0x15081EC")]
		public static bool GetQueryUGCPreviewURL(UGCQueryHandle_t handle, uint index, out string pchURL, uint cchURLSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000529")]
		[Address(RVA = "0x1508308", Offset = "0x1508308", VA = "0x1508308")]
		public static bool GetQueryUGCMetadata(UGCQueryHandle_t handle, uint index, out string pchMetadata, uint cchMetadatasize)
		{
			return default(bool);
		}

		[Token(Token = "0x600052A")]
		[Address(RVA = "0x1508424", Offset = "0x1508424", VA = "0x1508424")]
		public static bool GetQueryUGCChildren(UGCQueryHandle_t handle, uint index, PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries)
		{
			return default(bool);
		}

		[Token(Token = "0x600052B")]
		[Address(RVA = "0x1508470", Offset = "0x1508470", VA = "0x1508470")]
		public static bool GetQueryUGCStatistic(UGCQueryHandle_t handle, uint index, EItemStatistic eStatType, out ulong pStatValue)
		{
			return default(bool);
		}

		[Token(Token = "0x600052C")]
		[Address(RVA = "0x15084BC", Offset = "0x15084BC", VA = "0x15084BC")]
		public static uint GetQueryUGCNumAdditionalPreviews(UGCQueryHandle_t handle, uint index)
		{
			return default(uint);
		}

		[Token(Token = "0x600052D")]
		[Address(RVA = "0x15084F0", Offset = "0x15084F0", VA = "0x15084F0")]
		public static bool GetQueryUGCAdditionalPreview(UGCQueryHandle_t handle, uint index, uint previewIndex, out string pchURLOrVideoID, uint cchURLSize, out string pchOriginalFileName, uint cchOriginalFileNameSize, out EItemPreviewType pPreviewType)
		{
			return default(bool);
		}

		[Token(Token = "0x600052E")]
		[Address(RVA = "0x1508684", Offset = "0x1508684", VA = "0x1508684")]
		public static uint GetQueryUGCNumKeyValueTags(UGCQueryHandle_t handle, uint index)
		{
			return default(uint);
		}

		[Token(Token = "0x600052F")]
		[Address(RVA = "0x15086B8", Offset = "0x15086B8", VA = "0x15086B8")]
		public static bool GetQueryUGCKeyValueTag(UGCQueryHandle_t handle, uint index, uint keyValueTagIndex, out string pchKey, uint cchKeySize, out string pchValue, uint cchValueSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000530")]
		[Address(RVA = "0x1508844", Offset = "0x1508844", VA = "0x1508844")]
		public static bool ReleaseQueryUGCRequest(UGCQueryHandle_t handle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000531")]
		[Address(RVA = "0x1508870", Offset = "0x1508870", VA = "0x1508870")]
		public static bool AddRequiredTag(UGCQueryHandle_t handle, string pTagName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000532")]
		[Address(RVA = "0x15089D4", Offset = "0x15089D4", VA = "0x15089D4")]
		public static bool AddExcludedTag(UGCQueryHandle_t handle, string pTagName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000533")]
		[Address(RVA = "0x1508B38", Offset = "0x1508B38", VA = "0x1508B38")]
		public static bool SetReturnOnlyIDs(UGCQueryHandle_t handle, bool bReturnOnlyIDs)
		{
			return default(bool);
		}

		[Token(Token = "0x6000534")]
		[Address(RVA = "0x1508B6C", Offset = "0x1508B6C", VA = "0x1508B6C")]
		public static bool SetReturnKeyValueTags(UGCQueryHandle_t handle, bool bReturnKeyValueTags)
		{
			return default(bool);
		}

		[Token(Token = "0x6000535")]
		[Address(RVA = "0x1508BA0", Offset = "0x1508BA0", VA = "0x1508BA0")]
		public static bool SetReturnLongDescription(UGCQueryHandle_t handle, bool bReturnLongDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x6000536")]
		[Address(RVA = "0x1508BD4", Offset = "0x1508BD4", VA = "0x1508BD4")]
		public static bool SetReturnMetadata(UGCQueryHandle_t handle, bool bReturnMetadata)
		{
			return default(bool);
		}

		[Token(Token = "0x6000537")]
		[Address(RVA = "0x1508C08", Offset = "0x1508C08", VA = "0x1508C08")]
		public static bool SetReturnChildren(UGCQueryHandle_t handle, bool bReturnChildren)
		{
			return default(bool);
		}

		[Token(Token = "0x6000538")]
		[Address(RVA = "0x1508C3C", Offset = "0x1508C3C", VA = "0x1508C3C")]
		public static bool SetReturnAdditionalPreviews(UGCQueryHandle_t handle, bool bReturnAdditionalPreviews)
		{
			return default(bool);
		}

		[Token(Token = "0x6000539")]
		[Address(RVA = "0x1508C70", Offset = "0x1508C70", VA = "0x1508C70")]
		public static bool SetReturnTotalOnly(UGCQueryHandle_t handle, bool bReturnTotalOnly)
		{
			return default(bool);
		}

		[Token(Token = "0x600053A")]
		[Address(RVA = "0x1508CA4", Offset = "0x1508CA4", VA = "0x1508CA4")]
		public static bool SetReturnPlaytimeStats(UGCQueryHandle_t handle, uint unDays)
		{
			return default(bool);
		}

		[Token(Token = "0x600053B")]
		[Address(RVA = "0x1508CD8", Offset = "0x1508CD8", VA = "0x1508CD8")]
		public static bool SetLanguage(UGCQueryHandle_t handle, string pchLanguage)
		{
			return default(bool);
		}

		[Token(Token = "0x600053C")]
		[Address(RVA = "0x1508E3C", Offset = "0x1508E3C", VA = "0x1508E3C")]
		public static bool SetAllowCachedResponse(UGCQueryHandle_t handle, uint unMaxAgeSeconds)
		{
			return default(bool);
		}

		[Token(Token = "0x600053D")]
		[Address(RVA = "0x1508E70", Offset = "0x1508E70", VA = "0x1508E70")]
		public static bool SetCloudFileNameFilter(UGCQueryHandle_t handle, string pMatchCloudFileName)
		{
			return default(bool);
		}

		[Token(Token = "0x600053E")]
		[Address(RVA = "0x1508FD4", Offset = "0x1508FD4", VA = "0x1508FD4")]
		public static bool SetMatchAnyTag(UGCQueryHandle_t handle, bool bMatchAnyTag)
		{
			return default(bool);
		}

		[Token(Token = "0x600053F")]
		[Address(RVA = "0x1509008", Offset = "0x1509008", VA = "0x1509008")]
		public static bool SetSearchText(UGCQueryHandle_t handle, string pSearchText)
		{
			return default(bool);
		}

		[Token(Token = "0x6000540")]
		[Address(RVA = "0x150916C", Offset = "0x150916C", VA = "0x150916C")]
		public static bool SetRankedByTrendDays(UGCQueryHandle_t handle, uint unDays)
		{
			return default(bool);
		}

		[Token(Token = "0x6000541")]
		[Address(RVA = "0x15091A0", Offset = "0x15091A0", VA = "0x15091A0")]
		public static bool AddRequiredKeyValueTag(UGCQueryHandle_t handle, string pKey, string pValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000542")]
		[Address(RVA = "0x1509448", Offset = "0x1509448", VA = "0x1509448")]
		public static SteamAPICall_t RequestUGCDetails(PublishedFileId_t nPublishedFileID, uint unMaxAgeSeconds)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000543")]
		[Address(RVA = "0x15094EC", Offset = "0x15094EC", VA = "0x15094EC")]
		public static SteamAPICall_t CreateItem(AppId_t nConsumerAppId, EWorkshopFileType eFileType)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000544")]
		[Address(RVA = "0x1509588", Offset = "0x1509588", VA = "0x1509588")]
		public static UGCUpdateHandle_t StartItemUpdate(AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID)
		{
			return default(UGCUpdateHandle_t);
		}

		[Token(Token = "0x6000545")]
		[Address(RVA = "0x1509648", Offset = "0x1509648", VA = "0x1509648")]
		public static bool SetItemTitle(UGCUpdateHandle_t handle, string pchTitle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000546")]
		[Address(RVA = "0x15097AC", Offset = "0x15097AC", VA = "0x15097AC")]
		public static bool SetItemDescription(UGCUpdateHandle_t handle, string pchDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x6000547")]
		[Address(RVA = "0x1509910", Offset = "0x1509910", VA = "0x1509910")]
		public static bool SetItemUpdateLanguage(UGCUpdateHandle_t handle, string pchLanguage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000548")]
		[Address(RVA = "0x1509A74", Offset = "0x1509A74", VA = "0x1509A74")]
		public static bool SetItemMetadata(UGCUpdateHandle_t handle, string pchMetaData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000549")]
		[Address(RVA = "0x1509BD8", Offset = "0x1509BD8", VA = "0x1509BD8")]
		public static bool SetItemVisibility(UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility)
		{
			return default(bool);
		}

		[Token(Token = "0x600054A")]
		[Address(RVA = "0x1509C0C", Offset = "0x1509C0C", VA = "0x1509C0C")]
		public static bool SetItemTags(UGCUpdateHandle_t updateHandle, IList<string> pTags)
		{
			return default(bool);
		}

		[Token(Token = "0x600054B")]
		[Address(RVA = "0x1509CA4", Offset = "0x1509CA4", VA = "0x1509CA4")]
		public static bool SetItemContent(UGCUpdateHandle_t handle, string pszContentFolder)
		{
			return default(bool);
		}

		[Token(Token = "0x600054C")]
		[Address(RVA = "0x1509E08", Offset = "0x1509E08", VA = "0x1509E08")]
		public static bool SetItemPreview(UGCUpdateHandle_t handle, string pszPreviewFile)
		{
			return default(bool);
		}

		[Token(Token = "0x600054D")]
		[Address(RVA = "0x1509F6C", Offset = "0x1509F6C", VA = "0x1509F6C")]
		public static bool RemoveItemKeyValueTags(UGCUpdateHandle_t handle, string pchKey)
		{
			return default(bool);
		}

		[Token(Token = "0x600054E")]
		[Address(RVA = "0x150A0D0", Offset = "0x150A0D0", VA = "0x150A0D0")]
		public static bool AddItemKeyValueTag(UGCUpdateHandle_t handle, string pchKey, string pchValue)
		{
			return default(bool);
		}

		[Token(Token = "0x600054F")]
		[Address(RVA = "0x150A378", Offset = "0x150A378", VA = "0x150A378")]
		public static bool AddItemPreviewFile(UGCUpdateHandle_t handle, string pszPreviewFile, EItemPreviewType type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000550")]
		[Address(RVA = "0x150A4E4", Offset = "0x150A4E4", VA = "0x150A4E4")]
		public static bool AddItemPreviewVideo(UGCUpdateHandle_t handle, string pszVideoID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000551")]
		[Address(RVA = "0x150A648", Offset = "0x150A648", VA = "0x150A648")]
		public static bool UpdateItemPreviewFile(UGCUpdateHandle_t handle, uint index, string pszPreviewFile)
		{
			return default(bool);
		}

		[Token(Token = "0x6000552")]
		[Address(RVA = "0x150A7B4", Offset = "0x150A7B4", VA = "0x150A7B4")]
		public static bool UpdateItemPreviewVideo(UGCUpdateHandle_t handle, uint index, string pszVideoID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000553")]
		[Address(RVA = "0x150A920", Offset = "0x150A920", VA = "0x150A920")]
		public static bool RemoveItemPreview(UGCUpdateHandle_t handle, uint index)
		{
			return default(bool);
		}

		[Token(Token = "0x6000554")]
		[Address(RVA = "0x150A954", Offset = "0x150A954", VA = "0x150A954")]
		public static SteamAPICall_t SubmitItemUpdate(UGCUpdateHandle_t handle, string pchChangeNote)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000555")]
		[Address(RVA = "0x150AB10", Offset = "0x150AB10", VA = "0x150AB10")]
		public static EItemUpdateStatus GetItemUpdateProgress(UGCUpdateHandle_t handle, out ulong punBytesProcessed, out ulong punBytesTotal)
		{
			return default(EItemUpdateStatus);
		}

		[Token(Token = "0x6000556")]
		[Address(RVA = "0x150AB58", Offset = "0x150AB58", VA = "0x150AB58")]
		public static SteamAPICall_t SetUserItemVote(PublishedFileId_t nPublishedFileID, bool bVoteUp)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000557")]
		[Address(RVA = "0x150ABFC", Offset = "0x150ABFC", VA = "0x150ABFC")]
		public static SteamAPICall_t GetUserItemVote(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000558")]
		[Address(RVA = "0x150AC98", Offset = "0x150AC98", VA = "0x150AC98")]
		public static SteamAPICall_t AddItemToFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000559")]
		[Address(RVA = "0x150AD48", Offset = "0x150AD48", VA = "0x150AD48")]
		public static SteamAPICall_t RemoveItemFromFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600055A")]
		[Address(RVA = "0x150ADF8", Offset = "0x150ADF8", VA = "0x150ADF8")]
		public static SteamAPICall_t SubscribeItem(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600055B")]
		[Address(RVA = "0x150AE94", Offset = "0x150AE94", VA = "0x150AE94")]
		public static SteamAPICall_t UnsubscribeItem(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600055C")]
		[Address(RVA = "0x150AF30", Offset = "0x150AF30", VA = "0x150AF30")]
		public static uint GetNumSubscribedItems()
		{
			return default(uint);
		}

		[Token(Token = "0x600055D")]
		[Address(RVA = "0x150AF4C", Offset = "0x150AF4C", VA = "0x150AF4C")]
		public static uint GetSubscribedItems(PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries)
		{
			return default(uint);
		}

		[Token(Token = "0x600055E")]
		[Address(RVA = "0x150AF78", Offset = "0x150AF78", VA = "0x150AF78")]
		public static uint GetItemState(PublishedFileId_t nPublishedFileID)
		{
			return default(uint);
		}

		[Token(Token = "0x600055F")]
		[Address(RVA = "0x150AFA4", Offset = "0x150AFA4", VA = "0x150AFA4")]
		public static bool GetItemInstallInfo(PublishedFileId_t nPublishedFileID, out ulong punSizeOnDisk, out string pchFolder, uint cchFolderSize, out uint punTimeStamp)
		{
			return default(bool);
		}

		[Token(Token = "0x6000560")]
		[Address(RVA = "0x150B0C4", Offset = "0x150B0C4", VA = "0x150B0C4")]
		public static bool GetItemDownloadInfo(PublishedFileId_t nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal)
		{
			return default(bool);
		}

		[Token(Token = "0x6000561")]
		[Address(RVA = "0x150B10C", Offset = "0x150B10C", VA = "0x150B10C")]
		public static bool DownloadItem(PublishedFileId_t nPublishedFileID, bool bHighPriority)
		{
			return default(bool);
		}

		[Token(Token = "0x6000562")]
		[Address(RVA = "0x150B140", Offset = "0x150B140", VA = "0x150B140")]
		public static bool BInitWorkshopForGameServer(DepotId_t unWorkshopDepotID, string pszFolder)
		{
			return default(bool);
		}

		[Token(Token = "0x6000563")]
		[Address(RVA = "0x150B29C", Offset = "0x150B29C", VA = "0x150B29C")]
		public static void SuspendDownloads(bool bSuspend)
		{
		}

		[Token(Token = "0x6000564")]
		[Address(RVA = "0x150B2C0", Offset = "0x150B2C0", VA = "0x150B2C0")]
		public static SteamAPICall_t StartPlaytimeTracking(PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000565")]
		[Address(RVA = "0x150B35C", Offset = "0x150B35C", VA = "0x150B35C")]
		public static SteamAPICall_t StopPlaytimeTracking(PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000566")]
		[Address(RVA = "0x150B3F8", Offset = "0x150B3F8", VA = "0x150B3F8")]
		public static SteamAPICall_t StopPlaytimeTrackingForAllItems()
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000567")]
		[Address(RVA = "0x150B484", Offset = "0x150B484", VA = "0x150B484")]
		public static SteamAPICall_t AddDependency(PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000568")]
		[Address(RVA = "0x150B53C", Offset = "0x150B53C", VA = "0x150B53C")]
		public static SteamAPICall_t RemoveDependency(PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x200013A")]
	public static class SteamGameServerUtils
	{
		[Token(Token = "0x6000569")]
		[Address(RVA = "0x150B5F4", Offset = "0x150B5F4", VA = "0x150B5F4")]
		public static uint GetSecondsSinceAppActive()
		{
			return default(uint);
		}

		[Token(Token = "0x600056A")]
		[Address(RVA = "0x150B610", Offset = "0x150B610", VA = "0x150B610")]
		public static uint GetSecondsSinceComputerActive()
		{
			return default(uint);
		}

		[Token(Token = "0x600056B")]
		[Address(RVA = "0x150B62C", Offset = "0x150B62C", VA = "0x150B62C")]
		public static EUniverse GetConnectedUniverse()
		{
			return default(EUniverse);
		}

		[Token(Token = "0x600056C")]
		[Address(RVA = "0x150B648", Offset = "0x150B648", VA = "0x150B648")]
		public static uint GetServerRealTime()
		{
			return default(uint);
		}

		[Token(Token = "0x600056D")]
		[Address(RVA = "0x150B664", Offset = "0x150B664", VA = "0x150B664")]
		public static string GetIPCountry()
		{
			return null;
		}

		[Token(Token = "0x600056E")]
		[Address(RVA = "0x150B688", Offset = "0x150B688", VA = "0x150B688")]
		public static bool GetImageSize(int iImage, out uint pnWidth, out uint pnHeight)
		{
			return default(bool);
		}

		[Token(Token = "0x600056F")]
		[Address(RVA = "0x150B6BC", Offset = "0x150B6BC", VA = "0x150B6BC")]
		public static bool GetImageRGBA(int iImage, byte[] pubDest, int nDestBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000570")]
		[Address(RVA = "0x150B6F0", Offset = "0x150B6F0", VA = "0x150B6F0")]
		public static bool GetCSERIPPort(out uint unIP, out ushort usPort)
		{
			return default(bool);
		}

		[Token(Token = "0x6000571")]
		[Address(RVA = "0x150B71C", Offset = "0x150B71C", VA = "0x150B71C")]
		public static byte GetCurrentBatteryPower()
		{
			return default(byte);
		}

		[Token(Token = "0x6000572")]
		[Address(RVA = "0x150B738", Offset = "0x150B738", VA = "0x150B738")]
		public static AppId_t GetAppID()
		{
			return default(AppId_t);
		}

		[Token(Token = "0x6000573")]
		[Address(RVA = "0x150B7C4", Offset = "0x150B7C4", VA = "0x150B7C4")]
		public static void SetOverlayNotificationPosition(ENotificationPosition eNotificationPosition)
		{
		}

		[Token(Token = "0x6000574")]
		[Address(RVA = "0x150B7E8", Offset = "0x150B7E8", VA = "0x150B7E8")]
		public static bool IsAPICallCompleted(SteamAPICall_t hSteamAPICall, out bool pbFailed)
		{
			return default(bool);
		}

		[Token(Token = "0x6000575")]
		[Address(RVA = "0x150B81C", Offset = "0x150B81C", VA = "0x150B81C")]
		public static ESteamAPICallFailure GetAPICallFailureReason(SteamAPICall_t hSteamAPICall)
		{
			return default(ESteamAPICallFailure);
		}

		[Token(Token = "0x6000576")]
		[Address(RVA = "0x150B848", Offset = "0x150B848", VA = "0x150B848")]
		public static bool GetAPICallResult(SteamAPICall_t hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, out bool pbFailed)
		{
			return default(bool);
		}

		[Token(Token = "0x6000577")]
		[Address(RVA = "0x150B898", Offset = "0x150B898", VA = "0x150B898")]
		public static uint GetIPCCallCount()
		{
			return default(uint);
		}

		[Token(Token = "0x6000578")]
		[Address(RVA = "0x150B8B4", Offset = "0x150B8B4", VA = "0x150B8B4")]
		public static void SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction)
		{
		}

		[Token(Token = "0x6000579")]
		[Address(RVA = "0x150B8D8", Offset = "0x150B8D8", VA = "0x150B8D8")]
		public static bool IsOverlayEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x600057A")]
		[Address(RVA = "0x150B8F4", Offset = "0x150B8F4", VA = "0x150B8F4")]
		public static bool BOverlayNeedsPresent()
		{
			return default(bool);
		}

		[Token(Token = "0x600057B")]
		[Address(RVA = "0x150B910", Offset = "0x150B910", VA = "0x150B910")]
		public static SteamAPICall_t CheckFileSignature(string szFileName)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600057C")]
		[Address(RVA = "0x150BABC", Offset = "0x150BABC", VA = "0x150BABC")]
		public static bool ShowGamepadTextInput(EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText)
		{
			return default(bool);
		}

		[Token(Token = "0x600057D")]
		[Address(RVA = "0x150BD68", Offset = "0x150BD68", VA = "0x150BD68")]
		public static uint GetEnteredGamepadTextLength()
		{
			return default(uint);
		}

		[Token(Token = "0x600057E")]
		[Address(RVA = "0x150BD84", Offset = "0x150BD84", VA = "0x150BD84")]
		public static bool GetEnteredGamepadTextInput(out string pchText, uint cchText)
		{
			return default(bool);
		}

		[Token(Token = "0x600057F")]
		[Address(RVA = "0x150BE70", Offset = "0x150BE70", VA = "0x150BE70")]
		public static string GetSteamUILanguage()
		{
			return null;
		}

		[Token(Token = "0x6000580")]
		[Address(RVA = "0x150BE94", Offset = "0x150BE94", VA = "0x150BE94")]
		public static bool IsSteamRunningInVR()
		{
			return default(bool);
		}

		[Token(Token = "0x6000581")]
		[Address(RVA = "0x150BEB0", Offset = "0x150BEB0", VA = "0x150BEB0")]
		public static void SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset)
		{
		}

		[Token(Token = "0x6000582")]
		[Address(RVA = "0x150BEDC", Offset = "0x150BEDC", VA = "0x150BEDC")]
		public static bool IsSteamInBigPictureMode()
		{
			return default(bool);
		}

		[Token(Token = "0x6000583")]
		[Address(RVA = "0x150BEF8", Offset = "0x150BEF8", VA = "0x150BEF8")]
		public static void StartVRDashboard()
		{
		}

		[Token(Token = "0x6000584")]
		[Address(RVA = "0x150BF14", Offset = "0x150BF14", VA = "0x150BF14")]
		public static bool IsVRHeadsetStreamingEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x6000585")]
		[Address(RVA = "0x150BF30", Offset = "0x150BF30", VA = "0x150BF30")]
		public static void SetVRHeadsetStreamingEnabled(bool bEnabled)
		{
		}
	}
	[Token(Token = "0x200013B")]
	public static class SteamHTMLSurface
	{
		[Token(Token = "0x6000586")]
		[Address(RVA = "0x150BF54", Offset = "0x150BF54", VA = "0x150BF54")]
		public static bool Init()
		{
			return default(bool);
		}

		[Token(Token = "0x6000587")]
		[Address(RVA = "0x150BF70", Offset = "0x150BF70", VA = "0x150BF70")]
		public static bool Shutdown()
		{
			return default(bool);
		}

		[Token(Token = "0x6000588")]
		[Address(RVA = "0x150BF8C", Offset = "0x150BF8C", VA = "0x150BF8C")]
		public static SteamAPICall_t CreateBrowser(string pchUserAgent, string pchUserCSS)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000589")]
		[Address(RVA = "0x150C244", Offset = "0x150C244", VA = "0x150C244")]
		public static void RemoveBrowser(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x600058A")]
		[Address(RVA = "0x150C268", Offset = "0x150C268", VA = "0x150C268")]
		public static void LoadURL(HHTMLBrowser unBrowserHandle, string pchURL, string pchPostData)
		{
		}

		[Token(Token = "0x600058B")]
		[Address(RVA = "0x150C4B4", Offset = "0x150C4B4", VA = "0x150C4B4")]
		public static void SetSize(HHTMLBrowser unBrowserHandle, uint unWidth, uint unHeight)
		{
		}

		[Token(Token = "0x600058C")]
		[Address(RVA = "0x150C4E8", Offset = "0x150C4E8", VA = "0x150C4E8")]
		public static void StopLoad(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x600058D")]
		[Address(RVA = "0x150C50C", Offset = "0x150C50C", VA = "0x150C50C")]
		public static void Reload(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x600058E")]
		[Address(RVA = "0x150C530", Offset = "0x150C530", VA = "0x150C530")]
		public static void GoBack(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x600058F")]
		[Address(RVA = "0x150C554", Offset = "0x150C554", VA = "0x150C554")]
		public static void GoForward(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x6000590")]
		[Address(RVA = "0x150C578", Offset = "0x150C578", VA = "0x150C578")]
		public static void AddHeader(HHTMLBrowser unBrowserHandle, string pchKey, string pchValue)
		{
		}

		[Token(Token = "0x6000591")]
		[Address(RVA = "0x150C7C4", Offset = "0x150C7C4", VA = "0x150C7C4")]
		public static void ExecuteJavascript(HHTMLBrowser unBrowserHandle, string pchScript)
		{
		}

		[Token(Token = "0x6000592")]
		[Address(RVA = "0x150C910", Offset = "0x150C910", VA = "0x150C910")]
		public static void MouseUp(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton)
		{
		}

		[Token(Token = "0x6000593")]
		[Address(RVA = "0x150C93C", Offset = "0x150C93C", VA = "0x150C93C")]
		public static void MouseDown(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton)
		{
		}

		[Token(Token = "0x6000594")]
		[Address(RVA = "0x150C968", Offset = "0x150C968", VA = "0x150C968")]
		public static void MouseDoubleClick(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton)
		{
		}

		[Token(Token = "0x6000595")]
		[Address(RVA = "0x150C994", Offset = "0x150C994", VA = "0x150C994")]
		public static void MouseMove(HHTMLBrowser unBrowserHandle, int x, int y)
		{
		}

		[Token(Token = "0x6000596")]
		[Address(RVA = "0x150C9C8", Offset = "0x150C9C8", VA = "0x150C9C8")]
		public static void MouseWheel(HHTMLBrowser unBrowserHandle, int nDelta)
		{
		}

		[Token(Token = "0x6000597")]
		[Address(RVA = "0x150C9F4", Offset = "0x150C9F4", VA = "0x150C9F4")]
		public static void KeyDown(HHTMLBrowser unBrowserHandle, uint nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers)
		{
		}

		[Token(Token = "0x6000598")]
		[Address(RVA = "0x150CA28", Offset = "0x150CA28", VA = "0x150CA28")]
		public static void KeyUp(HHTMLBrowser unBrowserHandle, uint nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers)
		{
		}

		[Token(Token = "0x6000599")]
		[Address(RVA = "0x150CA5C", Offset = "0x150CA5C", VA = "0x150CA5C")]
		public static void KeyChar(HHTMLBrowser unBrowserHandle, uint cUnicodeChar, EHTMLKeyModifiers eHTMLKeyModifiers)
		{
		}

		[Token(Token = "0x600059A")]
		[Address(RVA = "0x150CA90", Offset = "0x150CA90", VA = "0x150CA90")]
		public static void SetHorizontalScroll(HHTMLBrowser unBrowserHandle, uint nAbsolutePixelScroll)
		{
		}

		[Token(Token = "0x600059B")]
		[Address(RVA = "0x150CABC", Offset = "0x150CABC", VA = "0x150CABC")]
		public static void SetVerticalScroll(HHTMLBrowser unBrowserHandle, uint nAbsolutePixelScroll)
		{
		}

		[Token(Token = "0x600059C")]
		[Address(RVA = "0x150CAE8", Offset = "0x150CAE8", VA = "0x150CAE8")]
		public static void SetKeyFocus(HHTMLBrowser unBrowserHandle, bool bHasKeyFocus)
		{
		}

		[Token(Token = "0x600059D")]
		[Address(RVA = "0x150CB14", Offset = "0x150CB14", VA = "0x150CB14")]
		public static void ViewSource(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x600059E")]
		[Address(RVA = "0x150CB38", Offset = "0x150CB38", VA = "0x150CB38")]
		public static void CopyToClipboard(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x600059F")]
		[Address(RVA = "0x150CB5C", Offset = "0x150CB5C", VA = "0x150CB5C")]
		public static void PasteFromClipboard(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x60005A0")]
		[Address(RVA = "0x150CB80", Offset = "0x150CB80", VA = "0x150CB80")]
		public static void Find(HHTMLBrowser unBrowserHandle, string pchSearchStr, bool bCurrentlyInFind, bool bReverse)
		{
		}

		[Token(Token = "0x60005A1")]
		[Address(RVA = "0x150CCE8", Offset = "0x150CCE8", VA = "0x150CCE8")]
		public static void StopFind(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x60005A2")]
		[Address(RVA = "0x150CD0C", Offset = "0x150CD0C", VA = "0x150CD0C")]
		public static void GetLinkAtPosition(HHTMLBrowser unBrowserHandle, int x, int y)
		{
		}

		[Token(Token = "0x60005A3")]
		[Address(RVA = "0x150CD40", Offset = "0x150CD40", VA = "0x150CD40")]
		public static void SetCookie(string pchHostname, string pchKey, string pchValue, string pchPath = "/", uint nExpires = 0u, bool bSecure = false, bool bHTTPOnly = false)
		{
		}

		[Token(Token = "0x60005A4")]
		[Address(RVA = "0x150D1D4", Offset = "0x150D1D4", VA = "0x150D1D4")]
		public static void SetPageScaleFactor(HHTMLBrowser unBrowserHandle, float flZoom, int nPointX, int nPointY)
		{
		}

		[Token(Token = "0x60005A5")]
		[Address(RVA = "0x150D21C", Offset = "0x150D21C", VA = "0x150D21C")]
		public static void SetBackgroundMode(HHTMLBrowser unBrowserHandle, bool bBackgroundMode)
		{
		}

		[Token(Token = "0x60005A6")]
		[Address(RVA = "0x150D248", Offset = "0x150D248", VA = "0x150D248")]
		public static void AllowStartRequest(HHTMLBrowser unBrowserHandle, bool bAllowed)
		{
		}

		[Token(Token = "0x60005A7")]
		[Address(RVA = "0x150D274", Offset = "0x150D274", VA = "0x150D274")]
		public static void JSDialogResponse(HHTMLBrowser unBrowserHandle, bool bResult)
		{
		}

		[Token(Token = "0x60005A8")]
		[Address(RVA = "0x150D2A0", Offset = "0x150D2A0", VA = "0x150D2A0")]
		public static void FileLoadDialogResponse(HHTMLBrowser unBrowserHandle, IntPtr pchSelectedFiles)
		{
		}
	}
	[Token(Token = "0x200013C")]
	public static class SteamHTTP
	{
		[Token(Token = "0x60005A9")]
		[Address(RVA = "0x150D2CC", Offset = "0x150D2CC", VA = "0x150D2CC")]
		public static HTTPRequestHandle CreateHTTPRequest(EHTTPMethod eHTTPRequestMethod, string pchAbsoluteURL)
		{
			return default(HTTPRequestHandle);
		}

		[Token(Token = "0x60005AA")]
		[Address(RVA = "0x150D468", Offset = "0x150D468", VA = "0x150D468")]
		public static bool SetHTTPRequestContextValue(HTTPRequestHandle hRequest, ulong ulContextValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60005AB")]
		[Address(RVA = "0x150D4A8", Offset = "0x150D4A8", VA = "0x150D4A8")]
		public static bool SetHTTPRequestNetworkActivityTimeout(HTTPRequestHandle hRequest, uint unTimeoutSeconds)
		{
			return default(bool);
		}

		[Token(Token = "0x60005AC")]
		[Address(RVA = "0x150D4D4", Offset = "0x150D4D4", VA = "0x150D4D4")]
		public static bool SetHTTPRequestHeaderValue(HTTPRequestHandle hRequest, string pchHeaderName, string pchHeaderValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60005AD")]
		[Address(RVA = "0x150D77C", Offset = "0x150D77C", VA = "0x150D77C")]
		public static bool SetHTTPRequestGetOrPostParameter(HTTPRequestHandle hRequest, string pchParamName, string pchParamValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60005AE")]
		[Address(RVA = "0x150DA24", Offset = "0x150DA24", VA = "0x150DA24")]
		public static bool SendHTTPRequest(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x60005AF")]
		[Address(RVA = "0x150DA50", Offset = "0x150DA50", VA = "0x150DA50")]
		public static bool SendHTTPRequestAndStreamResponse(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x60005B0")]
		[Address(RVA = "0x150DA7C", Offset = "0x150DA7C", VA = "0x150DA7C")]
		public static bool DeferHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x60005B1")]
		[Address(RVA = "0x150DAA0", Offset = "0x150DAA0", VA = "0x150DAA0")]
		public static bool PrioritizeHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x60005B2")]
		[Address(RVA = "0x150DAC4", Offset = "0x150DAC4", VA = "0x150DAC4")]
		public static bool GetHTTPResponseHeaderSize(HTTPRequestHandle hRequest, string pchHeaderName, out uint unResponseHeaderSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60005B3")]
		[Address(RVA = "0x150DC28", Offset = "0x150DC28", VA = "0x150DC28")]
		public static bool GetHTTPResponseHeaderValue(HTTPRequestHandle hRequest, string pchHeaderName, byte[] pHeaderValueBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60005B4")]
		[Address(RVA = "0x150DD94", Offset = "0x150DD94", VA = "0x150DD94")]
		public static bool GetHTTPResponseBodySize(HTTPRequestHandle hRequest, out uint unBodySize)
		{
			return default(bool);
		}

		[Token(Token = "0x60005B5")]
		[Address(RVA = "0x150DDC0", Offset = "0x150DDC0", VA = "0x150DDC0")]
		public static bool GetHTTPResponseBodyData(HTTPRequestHandle hRequest, byte[] pBodyDataBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60005B6")]
		[Address(RVA = "0x150DDF4", Offset = "0x150DDF4", VA = "0x150DDF4")]
		public static bool GetHTTPStreamingResponseBodyData(HTTPRequestHandle hRequest, uint cOffset, byte[] pBodyDataBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60005B7")]
		[Address(RVA = "0x150DE3C", Offset = "0x150DE3C", VA = "0x150DE3C")]
		public static bool ReleaseHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x60005B8")]
		[Address(RVA = "0x150DE60", Offset = "0x150DE60", VA = "0x150DE60")]
		public static bool GetHTTPDownloadProgressPct(HTTPRequestHandle hRequest, out float pflPercentOut)
		{
			return default(bool);
		}

		[Token(Token = "0x60005B9")]
		[Address(RVA = "0x150DE8C", Offset = "0x150DE8C", VA = "0x150DE8C")]
		public static bool SetHTTPRequestRawPostBody(HTTPRequestHandle hRequest, string pchContentType, byte[] pubBody, uint unBodyLen)
		{
			return default(bool);
		}

		[Token(Token = "0x60005BA")]
		[Address(RVA = "0x150DFF8", Offset = "0x150DFF8", VA = "0x150DFF8")]
		public static HTTPCookieContainerHandle CreateCookieContainer(bool bAllowResponsesToModify)
		{
			return default(HTTPCookieContainerHandle);
		}

		[Token(Token = "0x60005BB")]
		[Address(RVA = "0x150E08C", Offset = "0x150E08C", VA = "0x150E08C")]
		public static bool ReleaseCookieContainer(HTTPCookieContainerHandle hCookieContainer)
		{
			return default(bool);
		}

		[Token(Token = "0x60005BC")]
		[Address(RVA = "0x150E0B0", Offset = "0x150E0B0", VA = "0x150E0B0")]
		public static bool SetCookie(HTTPCookieContainerHandle hCookieContainer, string pchHost, string pchUrl, string pchCookie)
		{
			return default(bool);
		}

		[Token(Token = "0x60005BD")]
		[Address(RVA = "0x150E468", Offset = "0x150E468", VA = "0x150E468")]
		public static bool SetHTTPRequestCookieContainer(HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer)
		{
			return default(bool);
		}

		[Token(Token = "0x60005BE")]
		[Address(RVA = "0x150E494", Offset = "0x150E494", VA = "0x150E494")]
		public static bool SetHTTPRequestUserAgentInfo(HTTPRequestHandle hRequest, string pchUserAgentInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x60005BF")]
		[Address(RVA = "0x150E5F0", Offset = "0x150E5F0", VA = "0x150E5F0")]
		public static bool SetHTTPRequestRequiresVerifiedCertificate(HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate)
		{
			return default(bool);
		}

		[Token(Token = "0x60005C0")]
		[Address(RVA = "0x150E61C", Offset = "0x150E61C", VA = "0x150E61C")]
		public static bool SetHTTPRequestAbsoluteTimeoutMS(HTTPRequestHandle hRequest, uint unMilliseconds)
		{
			return default(bool);
		}

		[Token(Token = "0x60005C1")]
		[Address(RVA = "0x150E648", Offset = "0x150E648", VA = "0x150E648")]
		public static bool GetHTTPRequestWasTimedOut(HTTPRequestHandle hRequest, out bool pbWasTimedOut)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200013D")]
	public static class SteamInventory
	{
		[Token(Token = "0x60005C2")]
		[Address(RVA = "0x150E674", Offset = "0x150E674", VA = "0x150E674")]
		public static EResult GetResultStatus(SteamInventoryResult_t resultHandle)
		{
			return default(EResult);
		}

		[Token(Token = "0x60005C3")]
		[Address(RVA = "0x150E698", Offset = "0x150E698", VA = "0x150E698")]
		public static bool GetResultItems(SteamInventoryResult_t resultHandle, SteamItemDetails_t[] pOutItemsArray, ref uint punOutItemsArraySize)
		{
			return default(bool);
		}

		[Token(Token = "0x60005C4")]
		[Address(RVA = "0x150E6CC", Offset = "0x150E6CC", VA = "0x150E6CC")]
		public static bool GetResultItemProperty(SteamInventoryResult_t resultHandle, uint unItemIndex, string pchPropertyName, out string pchValueBuffer, ref uint punValueBufferSizeOut)
		{
			return default(bool);
		}

		[Token(Token = "0x60005C5")]
		[Address(RVA = "0x150E8E0", Offset = "0x150E8E0", VA = "0x150E8E0")]
		public static uint GetResultTimestamp(SteamInventoryResult_t resultHandle)
		{
			return default(uint);
		}

		[Token(Token = "0x60005C6")]
		[Address(RVA = "0x150E904", Offset = "0x150E904", VA = "0x150E904")]
		public static bool CheckResultSteamID(SteamInventoryResult_t resultHandle, CSteamID steamIDExpected)
		{
			return default(bool);
		}

		[Token(Token = "0x60005C7")]
		[Address(RVA = "0x150E938", Offset = "0x150E938", VA = "0x150E938")]
		public static void DestroyResult(SteamInventoryResult_t resultHandle)
		{
		}

		[Token(Token = "0x60005C8")]
		[Address(RVA = "0x150E95C", Offset = "0x150E95C", VA = "0x150E95C")]
		public static bool GetAllItems(out SteamInventoryResult_t pResultHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x60005C9")]
		[Address(RVA = "0x150E980", Offset = "0x150E980", VA = "0x150E980")]
		public static bool GetItemsByID(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t[] pInstanceIDs, uint unCountInstanceIDs)
		{
			return default(bool);
		}

		[Token(Token = "0x60005CA")]
		[Address(RVA = "0x150E9B4", Offset = "0x150E9B4", VA = "0x150E9B4")]
		public static bool SerializeResult(SteamInventoryResult_t resultHandle, byte[] pOutBuffer, out uint punOutBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60005CB")]
		[Address(RVA = "0x150E9E8", Offset = "0x150E9E8", VA = "0x150E9E8")]
		public static bool DeserializeResult(out SteamInventoryResult_t pOutResultHandle, byte[] pBuffer, uint unBufferSize, bool bRESERVED_MUST_BE_FALSE = false)
		{
			return default(bool);
		}

		[Token(Token = "0x60005CC")]
		[Address(RVA = "0x150EA30", Offset = "0x150EA30", VA = "0x150EA30")]
		public static bool GenerateItems(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength)
		{
			return default(bool);
		}

		[Token(Token = "0x60005CD")]
		[Address(RVA = "0x150EA78", Offset = "0x150EA78", VA = "0x150EA78")]
		public static bool GrantPromoItems(out SteamInventoryResult_t pResultHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x60005CE")]
		[Address(RVA = "0x150EA9C", Offset = "0x150EA9C", VA = "0x150EA9C")]
		public static bool AddPromoItem(out SteamInventoryResult_t pResultHandle, SteamItemDef_t itemDef)
		{
			return default(bool);
		}

		[Token(Token = "0x60005CF")]
		[Address(RVA = "0x150EAC8", Offset = "0x150EAC8", VA = "0x150EAC8")]
		public static bool AddPromoItems(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayItemDefs, uint unArrayLength)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D0")]
		[Address(RVA = "0x150EAFC", Offset = "0x150EAFC", VA = "0x150EAFC")]
		public static bool ConsumeItem(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemConsume, uint unQuantity)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D1")]
		[Address(RVA = "0x150EB40", Offset = "0x150EB40", VA = "0x150EB40")]
		public static bool ExchangeItems(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayGenerate, uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, SteamItemInstanceID_t[] pArrayDestroy, uint[] punArrayDestroyQuantity, uint unArrayDestroyLength)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D2")]
		[Address(RVA = "0x150EB90", Offset = "0x150EB90", VA = "0x150EB90")]
		public static bool TransferItemQuantity(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemIdSource, uint unQuantity, SteamItemInstanceID_t itemIdDest)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D3")]
		[Address(RVA = "0x150EBE4", Offset = "0x150EBE4", VA = "0x150EBE4")]
		public static void SendItemDropHeartbeat()
		{
		}

		[Token(Token = "0x60005D4")]
		[Address(RVA = "0x150EC00", Offset = "0x150EC00", VA = "0x150EC00")]
		public static bool TriggerItemDrop(out SteamInventoryResult_t pResultHandle, SteamItemDef_t dropListDefinition)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D5")]
		[Address(RVA = "0x150EC2C", Offset = "0x150EC2C", VA = "0x150EC2C")]
		public static bool TradeItems(out SteamInventoryResult_t pResultHandle, CSteamID steamIDTradePartner, SteamItemInstanceID_t[] pArrayGive, uint[] pArrayGiveQuantity, uint nArrayGiveLength, SteamItemInstanceID_t[] pArrayGet, uint[] pArrayGetQuantity, uint nArrayGetLength)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D6")]
		[Address(RVA = "0x150EC98", Offset = "0x150EC98", VA = "0x150EC98")]
		public static bool LoadItemDefinitions()
		{
			return default(bool);
		}

		[Token(Token = "0x60005D7")]
		[Address(RVA = "0x150ECB4", Offset = "0x150ECB4", VA = "0x150ECB4")]
		public static bool GetItemDefinitionIDs(SteamItemDef_t[] pItemDefIDs, out uint punItemDefIDsArraySize)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D8")]
		[Address(RVA = "0x150ECE0", Offset = "0x150ECE0", VA = "0x150ECE0")]
		public static bool GetItemDefinitionProperty(SteamItemDef_t iDefinition, string pchPropertyName, out string pchValueBuffer, ref uint punValueBufferSizeOut)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D9")]
		[Address(RVA = "0x150EEE0", Offset = "0x150EEE0", VA = "0x150EEE0")]
		public static SteamAPICall_t RequestEligiblePromoItemDefinitionsIDs(CSteamID steamID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005DA")]
		[Address(RVA = "0x150EF7C", Offset = "0x150EF7C", VA = "0x150EF7C")]
		public static bool GetEligiblePromoItemDefinitionIDs(CSteamID steamID, SteamItemDef_t[] pItemDefIDs, ref uint punItemDefIDsArraySize)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200013E")]
	public static class SteamMatchmaking
	{
		[Token(Token = "0x60005DB")]
		[Address(RVA = "0x150F760", Offset = "0x150F760", VA = "0x150F760")]
		public static int GetFavoriteGameCount()
		{
			return default(int);
		}

		[Token(Token = "0x60005DC")]
		[Address(RVA = "0x150F77C", Offset = "0x150F77C", VA = "0x150F77C")]
		public static bool GetFavoriteGame(int iGame, out AppId_t pnAppID, out uint pnIP, out ushort pnConnPort, out ushort pnQueryPort, out uint punFlags, out uint pRTime32LastPlayedOnServer)
		{
			return default(bool);
		}

		[Token(Token = "0x60005DD")]
		[Address(RVA = "0x150F7CC", Offset = "0x150F7CC", VA = "0x150F7CC")]
		public static int AddFavoriteGame(AppId_t nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags, uint rTime32LastPlayedOnServer)
		{
			return default(int);
		}

		[Token(Token = "0x60005DE")]
		[Address(RVA = "0x150F81C", Offset = "0x150F81C", VA = "0x150F81C")]
		public static bool RemoveFavoriteGame(AppId_t nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags)
		{
			return default(bool);
		}

		[Token(Token = "0x60005DF")]
		[Address(RVA = "0x150F868", Offset = "0x150F868", VA = "0x150F868")]
		public static SteamAPICall_t RequestLobbyList()
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005E0")]
		[Address(RVA = "0x150F8F4", Offset = "0x150F8F4", VA = "0x150F8F4")]
		public static void AddRequestLobbyListStringFilter(string pchKeyToMatch, string pchValueToMatch, ELobbyComparison eComparisonType)
		{
		}

		[Token(Token = "0x60005E1")]
		[Address(RVA = "0x150FB40", Offset = "0x150FB40", VA = "0x150FB40")]
		public static void AddRequestLobbyListNumericalFilter(string pchKeyToMatch, int nValueToMatch, ELobbyComparison eComparisonType)
		{
		}

		[Token(Token = "0x60005E2")]
		[Address(RVA = "0x150FC94", Offset = "0x150FC94", VA = "0x150FC94")]
		public static void AddRequestLobbyListNearValueFilter(string pchKeyToMatch, int nValueToBeCloseTo)
		{
		}

		[Token(Token = "0x60005E3")]
		[Address(RVA = "0x150FDE0", Offset = "0x150FDE0", VA = "0x150FDE0")]
		public static void AddRequestLobbyListFilterSlotsAvailable(int nSlotsAvailable)
		{
		}

		[Token(Token = "0x60005E4")]
		[Address(RVA = "0x150FE04", Offset = "0x150FE04", VA = "0x150FE04")]
		public static void AddRequestLobbyListDistanceFilter(ELobbyDistanceFilter eLobbyDistanceFilter)
		{
		}

		[Token(Token = "0x60005E5")]
		[Address(RVA = "0x150FE28", Offset = "0x150FE28", VA = "0x150FE28")]
		public static void AddRequestLobbyListResultCountFilter(int cMaxResults)
		{
		}

		[Token(Token = "0x60005E6")]
		[Address(RVA = "0x150FE4C", Offset = "0x150FE4C", VA = "0x150FE4C")]
		public static void AddRequestLobbyListCompatibleMembersFilter(CSteamID steamIDLobby)
		{
		}

		[Token(Token = "0x60005E7")]
		[Address(RVA = "0x150FE78", Offset = "0x150FE78", VA = "0x150FE78")]
		public static CSteamID GetLobbyByIndex(int iLobby)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60005E8")]
		[Address(RVA = "0x150FF28", Offset = "0x150FF28", VA = "0x150FF28")]
		public static SteamAPICall_t CreateLobby(ELobbyType eLobbyType, int cMaxMembers)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005E9")]
		[Address(RVA = "0x150FFC4", Offset = "0x150FFC4", VA = "0x150FFC4")]
		public static SteamAPICall_t JoinLobby(CSteamID steamIDLobby)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005EA")]
		[Address(RVA = "0x1510060", Offset = "0x1510060", VA = "0x1510060")]
		public static void LeaveLobby(CSteamID steamIDLobby)
		{
		}

		[Token(Token = "0x60005EB")]
		[Address(RVA = "0x151008C", Offset = "0x151008C", VA = "0x151008C")]
		public static bool InviteUserToLobby(CSteamID steamIDLobby, CSteamID steamIDInvitee)
		{
			return default(bool);
		}

		[Token(Token = "0x60005EC")]
		[Address(RVA = "0x15100D4", Offset = "0x15100D4", VA = "0x15100D4")]
		public static int GetNumLobbyMembers(CSteamID steamIDLobby)
		{
			return default(int);
		}

		[Token(Token = "0x60005ED")]
		[Address(RVA = "0x1510100", Offset = "0x1510100", VA = "0x1510100")]
		public static CSteamID GetLobbyMemberByIndex(CSteamID steamIDLobby, int iMember)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60005EE")]
		[Address(RVA = "0x15101C0", Offset = "0x15101C0", VA = "0x15101C0")]
		public static string GetLobbyData(CSteamID steamIDLobby, string pchKey)
		{
			return null;
		}

		[Token(Token = "0x60005EF")]
		[Address(RVA = "0x1510330", Offset = "0x1510330", VA = "0x1510330")]
		public static bool SetLobbyData(CSteamID steamIDLobby, string pchKey, string pchValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60005F0")]
		[Address(RVA = "0x15105D8", Offset = "0x15105D8", VA = "0x15105D8")]
		public static int GetLobbyDataCount(CSteamID steamIDLobby)
		{
			return default(int);
		}

		[Token(Token = "0x60005F1")]
		[Address(RVA = "0x1510604", Offset = "0x1510604", VA = "0x1510604")]
		public static bool GetLobbyDataByIndex(CSteamID steamIDLobby, int iLobbyData, out string pchKey, int cchKeyBufferSize, out string pchValue, int cchValueBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60005F2")]
		[Address(RVA = "0x151078C", Offset = "0x151078C", VA = "0x151078C")]
		public static bool DeleteLobbyData(CSteamID steamIDLobby, string pchKey)
		{
			return default(bool);
		}

		[Token(Token = "0x60005F3")]
		[Address(RVA = "0x15108F0", Offset = "0x15108F0", VA = "0x15108F0")]
		public static string GetLobbyMemberData(CSteamID steamIDLobby, CSteamID steamIDUser, string pchKey)
		{
			return null;
		}

		[Token(Token = "0x60005F4")]
		[Address(RVA = "0x1510A6C", Offset = "0x1510A6C", VA = "0x1510A6C")]
		public static void SetLobbyMemberData(CSteamID steamIDLobby, string pchKey, string pchValue)
		{
		}

		[Token(Token = "0x60005F5")]
		[Address(RVA = "0x1510CC0", Offset = "0x1510CC0", VA = "0x1510CC0")]
		public static bool SendLobbyChatMsg(CSteamID steamIDLobby, byte[] pvMsgBody, int cubMsgBody)
		{
			return default(bool);
		}

		[Token(Token = "0x60005F6")]
		[Address(RVA = "0x1510D08", Offset = "0x1510D08", VA = "0x1510D08")]
		public static int GetLobbyChatEntry(CSteamID steamIDLobby, int iChatID, out CSteamID pSteamIDUser, byte[] pvData, int cubData, out EChatEntryType peChatEntryType)
		{
			return default(int);
		}

		[Token(Token = "0x60005F7")]
		[Address(RVA = "0x1510D58", Offset = "0x1510D58", VA = "0x1510D58")]
		public static bool RequestLobbyData(CSteamID steamIDLobby)
		{
			return default(bool);
		}

		[Token(Token = "0x60005F8")]
		[Address(RVA = "0x1510D84", Offset = "0x1510D84", VA = "0x1510D84")]
		public static void SetLobbyGameServer(CSteamID steamIDLobby, uint unGameServerIP, ushort unGameServerPort, CSteamID steamIDGameServer)
		{
		}

		[Token(Token = "0x60005F9")]
		[Address(RVA = "0x1510DD4", Offset = "0x1510DD4", VA = "0x1510DD4")]
		public static bool GetLobbyGameServer(CSteamID steamIDLobby, out uint punGameServerIP, out ushort punGameServerPort, out CSteamID psteamIDGameServer)
		{
			return default(bool);
		}

		[Token(Token = "0x60005FA")]
		[Address(RVA = "0x1510E20", Offset = "0x1510E20", VA = "0x1510E20")]
		public static bool SetLobbyMemberLimit(CSteamID steamIDLobby, int cMaxMembers)
		{
			return default(bool);
		}

		[Token(Token = "0x60005FB")]
		[Address(RVA = "0x1510E54", Offset = "0x1510E54", VA = "0x1510E54")]
		public static int GetLobbyMemberLimit(CSteamID steamIDLobby)
		{
			return default(int);
		}

		[Token(Token = "0x60005FC")]
		[Address(RVA = "0x1510E80", Offset = "0x1510E80", VA = "0x1510E80")]
		public static bool SetLobbyType(CSteamID steamIDLobby, ELobbyType eLobbyType)
		{
			return default(bool);
		}

		[Token(Token = "0x60005FD")]
		[Address(RVA = "0x1510EB4", Offset = "0x1510EB4", VA = "0x1510EB4")]
		public static bool SetLobbyJoinable(CSteamID steamIDLobby, bool bLobbyJoinable)
		{
			return default(bool);
		}

		[Token(Token = "0x60005FE")]
		[Address(RVA = "0x1510EE8", Offset = "0x1510EE8", VA = "0x1510EE8")]
		public static CSteamID GetLobbyOwner(CSteamID steamIDLobby)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60005FF")]
		[Address(RVA = "0x1510FA0", Offset = "0x1510FA0", VA = "0x1510FA0")]
		public static bool SetLobbyOwner(CSteamID steamIDLobby, CSteamID steamIDNewOwner)
		{
			return default(bool);
		}

		[Token(Token = "0x6000600")]
		[Address(RVA = "0x1510FE8", Offset = "0x1510FE8", VA = "0x1510FE8")]
		public static bool SetLinkedLobby(CSteamID steamIDLobby, CSteamID steamIDLobbyDependent)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200013F")]
	public static class SteamMatchmakingServers
	{
		[Token(Token = "0x6000601")]
		[Address(RVA = "0x1511030", Offset = "0x1511030", VA = "0x1511030")]
		public static HServerListRequest RequestInternetServerList(AppId_t iApp, MatchMakingKeyValuePair_t[] ppchFilters, uint nFilters, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x6000602")]
		[Address(RVA = "0x1511128", Offset = "0x1511128", VA = "0x1511128")]
		public static HServerListRequest RequestLANServerList(AppId_t iApp, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x6000603")]
		[Address(RVA = "0x15111D0", Offset = "0x15111D0", VA = "0x15111D0")]
		public static HServerListRequest RequestFriendsServerList(AppId_t iApp, MatchMakingKeyValuePair_t[] ppchFilters, uint nFilters, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x6000604")]
		[Address(RVA = "0x15112C8", Offset = "0x15112C8", VA = "0x15112C8")]
		public static HServerListRequest RequestFavoritesServerList(AppId_t iApp, MatchMakingKeyValuePair_t[] ppchFilters, uint nFilters, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x6000605")]
		[Address(RVA = "0x15113C0", Offset = "0x15113C0", VA = "0x15113C0")]
		public static HServerListRequest RequestHistoryServerList(AppId_t iApp, MatchMakingKeyValuePair_t[] ppchFilters, uint nFilters, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x6000606")]
		[Address(RVA = "0x15114B8", Offset = "0x15114B8", VA = "0x15114B8")]
		public static HServerListRequest RequestSpectatorServerList(AppId_t iApp, MatchMakingKeyValuePair_t[] ppchFilters, uint nFilters, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x6000607")]
		[Address(RVA = "0x15115B0", Offset = "0x15115B0", VA = "0x15115B0")]
		public static void ReleaseRequest(HServerListRequest hServerListRequest)
		{
		}

		[Token(Token = "0x6000608")]
		[Address(RVA = "0x15115D4", Offset = "0x15115D4", VA = "0x15115D4")]
		public static gameserveritem_t GetServerDetails(HServerListRequest hRequest, int iServer)
		{
			return null;
		}

		[Token(Token = "0x6000609")]
		[Address(RVA = "0x1511714", Offset = "0x1511714", VA = "0x1511714")]
		public static void CancelQuery(HServerListRequest hRequest)
		{
		}

		[Token(Token = "0x600060A")]
		[Address(RVA = "0x1511738", Offset = "0x1511738", VA = "0x1511738")]
		public static void RefreshQuery(HServerListRequest hRequest)
		{
		}

		[Token(Token = "0x600060B")]
		[Address(RVA = "0x151175C", Offset = "0x151175C", VA = "0x151175C")]
		public static bool IsRefreshing(HServerListRequest hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x600060C")]
		[Address(RVA = "0x1511780", Offset = "0x1511780", VA = "0x1511780")]
		public static int GetServerCount(HServerListRequest hRequest)
		{
			return default(int);
		}

		[Token(Token = "0x600060D")]
		[Address(RVA = "0x15117A4", Offset = "0x15117A4", VA = "0x15117A4")]
		public static void RefreshServer(HServerListRequest hRequest, int iServer)
		{
		}

		[Token(Token = "0x600060E")]
		[Address(RVA = "0x15117D0", Offset = "0x15117D0", VA = "0x15117D0")]
		public static HServerQuery PingServer(uint unIP, ushort usPort, ISteamMatchmakingPingResponse pRequestServersResponse)
		{
			return default(HServerQuery);
		}

		[Token(Token = "0x600060F")]
		[Address(RVA = "0x1511880", Offset = "0x1511880", VA = "0x1511880")]
		public static HServerQuery PlayerDetails(uint unIP, ushort usPort, ISteamMatchmakingPlayersResponse pRequestServersResponse)
		{
			return default(HServerQuery);
		}

		[Token(Token = "0x6000610")]
		[Address(RVA = "0x1511930", Offset = "0x1511930", VA = "0x1511930")]
		public static HServerQuery ServerRules(uint unIP, ushort usPort, ISteamMatchmakingRulesResponse pRequestServersResponse)
		{
			return default(HServerQuery);
		}

		[Token(Token = "0x6000611")]
		[Address(RVA = "0x15119E0", Offset = "0x15119E0", VA = "0x15119E0")]
		public static void CancelServerQuery(HServerQuery hServerQuery)
		{
		}
	}
	[Token(Token = "0x2000140")]
	public static class SteamMusic
	{
		[Token(Token = "0x6000612")]
		[Address(RVA = "0x1AE2954", Offset = "0x1AE2954", VA = "0x1AE2954")]
		public static bool BIsEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x6000613")]
		[Address(RVA = "0x1AE2970", Offset = "0x1AE2970", VA = "0x1AE2970")]
		public static bool BIsPlaying()
		{
			return default(bool);
		}

		[Token(Token = "0x6000614")]
		[Address(RVA = "0x1AE298C", Offset = "0x1AE298C", VA = "0x1AE298C")]
		public static AudioPlayback_Status GetPlaybackStatus()
		{
			return default(AudioPlayback_Status);
		}

		[Token(Token = "0x6000615")]
		[Address(RVA = "0x1AE29A8", Offset = "0x1AE29A8", VA = "0x1AE29A8")]
		public static void Play()
		{
		}

		[Token(Token = "0x6000616")]
		[Address(RVA = "0x1AE29C4", Offset = "0x1AE29C4", VA = "0x1AE29C4")]
		public static void Pause()
		{
		}

		[Token(Token = "0x6000617")]
		[Address(RVA = "0x1AE29E0", Offset = "0x1AE29E0", VA = "0x1AE29E0")]
		public static void PlayPrevious()
		{
		}

		[Token(Token = "0x6000618")]
		[Address(RVA = "0x1AE29FC", Offset = "0x1AE29FC", VA = "0x1AE29FC")]
		public static void PlayNext()
		{
		}

		[Token(Token = "0x6000619")]
		[Address(RVA = "0x1AE2A18", Offset = "0x1AE2A18", VA = "0x1AE2A18")]
		public static void SetVolume(float flVolume)
		{
		}

		[Token(Token = "0x600061A")]
		[Address(RVA = "0x1AE2A3C", Offset = "0x1AE2A3C", VA = "0x1AE2A3C")]
		public static float GetVolume()
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000141")]
	public static class SteamMusicRemote
	{
		[Token(Token = "0x600061B")]
		[Address(RVA = "0x1AE2A58", Offset = "0x1AE2A58", VA = "0x1AE2A58")]
		public static bool RegisterSteamMusicRemote(string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x600061C")]
		[Address(RVA = "0x1AE2BAC", Offset = "0x1AE2BAC", VA = "0x1AE2BAC")]
		public static bool DeregisterSteamMusicRemote()
		{
			return default(bool);
		}

		[Token(Token = "0x600061D")]
		[Address(RVA = "0x1AE2BC8", Offset = "0x1AE2BC8", VA = "0x1AE2BC8")]
		public static bool BIsCurrentMusicRemote()
		{
			return default(bool);
		}

		[Token(Token = "0x600061E")]
		[Address(RVA = "0x1AE2BE4", Offset = "0x1AE2BE4", VA = "0x1AE2BE4")]
		public static bool BActivationSuccess(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x600061F")]
		[Address(RVA = "0x1AE2C08", Offset = "0x1AE2C08", VA = "0x1AE2C08")]
		public static bool SetDisplayName(string pchDisplayName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000620")]
		[Address(RVA = "0x1AE2D5C", Offset = "0x1AE2D5C", VA = "0x1AE2D5C")]
		public static bool SetPNGIcon_64x64(byte[] pvBuffer, uint cbBufferLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000621")]
		[Address(RVA = "0x1AE2D88", Offset = "0x1AE2D88", VA = "0x1AE2D88")]
		public static bool EnablePlayPrevious(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000622")]
		[Address(RVA = "0x1AE2DAC", Offset = "0x1AE2DAC", VA = "0x1AE2DAC")]
		public static bool EnablePlayNext(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000623")]
		[Address(RVA = "0x1AE2DD0", Offset = "0x1AE2DD0", VA = "0x1AE2DD0")]
		public static bool EnableShuffled(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000624")]
		[Address(RVA = "0x1AE2DF4", Offset = "0x1AE2DF4", VA = "0x1AE2DF4")]
		public static bool EnableLooped(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000625")]
		[Address(RVA = "0x1AE2E18", Offset = "0x1AE2E18", VA = "0x1AE2E18")]
		public static bool EnableQueue(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000626")]
		[Address(RVA = "0x1AE2E3C", Offset = "0x1AE2E3C", VA = "0x1AE2E3C")]
		public static bool EnablePlaylists(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000627")]
		[Address(RVA = "0x1AE2E60", Offset = "0x1AE2E60", VA = "0x1AE2E60")]
		public static bool UpdatePlaybackStatus(AudioPlayback_Status nStatus)
		{
			return default(bool);
		}

		[Token(Token = "0x6000628")]
		[Address(RVA = "0x1AE2E84", Offset = "0x1AE2E84", VA = "0x1AE2E84")]
		public static bool UpdateShuffled(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000629")]
		[Address(RVA = "0x1AE2EA8", Offset = "0x1AE2EA8", VA = "0x1AE2EA8")]
		public static bool UpdateLooped(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x600062A")]
		[Address(RVA = "0x1AE2ECC", Offset = "0x1AE2ECC", VA = "0x1AE2ECC")]
		public static bool UpdateVolume(float flValue)
		{
			return default(bool);
		}

		[Token(Token = "0x600062B")]
		[Address(RVA = "0x1AE2EF0", Offset = "0x1AE2EF0", VA = "0x1AE2EF0")]
		public static bool CurrentEntryWillChange()
		{
			return default(bool);
		}

		[Token(Token = "0x600062C")]
		[Address(RVA = "0x1AE2F0C", Offset = "0x1AE2F0C", VA = "0x1AE2F0C")]
		public static bool CurrentEntryIsAvailable(bool bAvailable)
		{
			return default(bool);
		}

		[Token(Token = "0x600062D")]
		[Address(RVA = "0x1AE2F30", Offset = "0x1AE2F30", VA = "0x1AE2F30")]
		public static bool UpdateCurrentEntryText(string pchText)
		{
			return default(bool);
		}

		[Token(Token = "0x600062E")]
		[Address(RVA = "0x1AE3084", Offset = "0x1AE3084", VA = "0x1AE3084")]
		public static bool UpdateCurrentEntryElapsedSeconds(int nValue)
		{
			return default(bool);
		}

		[Token(Token = "0x600062F")]
		[Address(RVA = "0x1AE30A8", Offset = "0x1AE30A8", VA = "0x1AE30A8")]
		public static bool UpdateCurrentEntryCoverArt(byte[] pvBuffer, uint cbBufferLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000630")]
		[Address(RVA = "0x1AE30D4", Offset = "0x1AE30D4", VA = "0x1AE30D4")]
		public static bool CurrentEntryDidChange()
		{
			return default(bool);
		}

		[Token(Token = "0x6000631")]
		[Address(RVA = "0x1AE30F0", Offset = "0x1AE30F0", VA = "0x1AE30F0")]
		public static bool QueueWillChange()
		{
			return default(bool);
		}

		[Token(Token = "0x6000632")]
		[Address(RVA = "0x1AE310C", Offset = "0x1AE310C", VA = "0x1AE310C")]
		public static bool ResetQueueEntries()
		{
			return default(bool);
		}

		[Token(Token = "0x6000633")]
		[Address(RVA = "0x1AE3128", Offset = "0x1AE3128", VA = "0x1AE3128")]
		public static bool SetQueueEntry(int nID, int nPosition, string pchEntryText)
		{
			return default(bool);
		}

		[Token(Token = "0x6000634")]
		[Address(RVA = "0x1AE328C", Offset = "0x1AE328C", VA = "0x1AE328C")]
		public static bool SetCurrentQueueEntry(int nID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000635")]
		[Address(RVA = "0x1AE32B0", Offset = "0x1AE32B0", VA = "0x1AE32B0")]
		public static bool QueueDidChange()
		{
			return default(bool);
		}

		[Token(Token = "0x6000636")]
		[Address(RVA = "0x1AE32CC", Offset = "0x1AE32CC", VA = "0x1AE32CC")]
		public static bool PlaylistWillChange()
		{
			return default(bool);
		}

		[Token(Token = "0x6000637")]
		[Address(RVA = "0x1AE32E8", Offset = "0x1AE32E8", VA = "0x1AE32E8")]
		public static bool ResetPlaylistEntries()
		{
			return default(bool);
		}

		[Token(Token = "0x6000638")]
		[Address(RVA = "0x1AE3304", Offset = "0x1AE3304", VA = "0x1AE3304")]
		public static bool SetPlaylistEntry(int nID, int nPosition, string pchEntryText)
		{
			return default(bool);
		}

		[Token(Token = "0x6000639")]
		[Address(RVA = "0x1AE3468", Offset = "0x1AE3468", VA = "0x1AE3468")]
		public static bool SetCurrentPlaylistEntry(int nID)
		{
			return default(bool);
		}

		[Token(Token = "0x600063A")]
		[Address(RVA = "0x1AE348C", Offset = "0x1AE348C", VA = "0x1AE348C")]
		public static bool PlaylistDidChange()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000142")]
	public static class SteamNetworking
	{
		[Token(Token = "0x600063B")]
		[Address(RVA = "0x1AE34A8", Offset = "0x1AE34A8", VA = "0x1AE34A8")]
		public static bool SendP2PPacket(CSteamID steamIDRemote, byte[] pubData, uint cubData, EP2PSend eP2PSendType, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x600063C")]
		[Address(RVA = "0x1AE34F8", Offset = "0x1AE34F8", VA = "0x1AE34F8")]
		public static bool IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x600063D")]
		[Address(RVA = "0x1AE3524", Offset = "0x1AE3524", VA = "0x1AE3524")]
		public static bool ReadP2PPacket(byte[] pubDest, uint cubDest, out uint pcubMsgSize, out CSteamID psteamIDRemote, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x600063E")]
		[Address(RVA = "0x1AE3570", Offset = "0x1AE3570", VA = "0x1AE3570")]
		public static bool AcceptP2PSessionWithUser(CSteamID steamIDRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x600063F")]
		[Address(RVA = "0x1AE359C", Offset = "0x1AE359C", VA = "0x1AE359C")]
		public static bool CloseP2PSessionWithUser(CSteamID steamIDRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x6000640")]
		[Address(RVA = "0x1AE35C8", Offset = "0x1AE35C8", VA = "0x1AE35C8")]
		public static bool CloseP2PChannelWithUser(CSteamID steamIDRemote, int nChannel)
		{
			return default(bool);
		}

		[Token(Token = "0x6000641")]
		[Address(RVA = "0x1AE35FC", Offset = "0x1AE35FC", VA = "0x1AE35FC")]
		public static bool GetP2PSessionState(CSteamID steamIDRemote, out P2PSessionState_t pConnectionState)
		{
			return default(bool);
		}

		[Token(Token = "0x6000642")]
		[Address(RVA = "0x1AE3630", Offset = "0x1AE3630", VA = "0x1AE3630")]
		public static bool AllowP2PPacketRelay(bool bAllow)
		{
			return default(bool);
		}

		[Token(Token = "0x6000643")]
		[Address(RVA = "0x1AE3654", Offset = "0x1AE3654", VA = "0x1AE3654")]
		public static SNetListenSocket_t CreateListenSocket(int nVirtualP2PPort, uint nIP, ushort nPort, bool bAllowUseOfPacketRelay)
		{
			return default(SNetListenSocket_t);
		}

		[Token(Token = "0x6000644")]
		[Address(RVA = "0x1AE36A4", Offset = "0x1AE36A4", VA = "0x1AE36A4")]
		public static SNetSocket_t CreateP2PConnectionSocket(CSteamID steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay)
		{
			return default(SNetSocket_t);
		}

		[Token(Token = "0x6000645")]
		[Address(RVA = "0x1AE36F8", Offset = "0x1AE36F8", VA = "0x1AE36F8")]
		public static SNetSocket_t CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec)
		{
			return default(SNetSocket_t);
		}

		[Token(Token = "0x6000646")]
		[Address(RVA = "0x1AE3734", Offset = "0x1AE3734", VA = "0x1AE3734")]
		public static bool DestroySocket(SNetSocket_t hSocket, bool bNotifyRemoteEnd)
		{
			return default(bool);
		}

		[Token(Token = "0x6000647")]
		[Address(RVA = "0x1AE3760", Offset = "0x1AE3760", VA = "0x1AE3760")]
		public static bool DestroyListenSocket(SNetListenSocket_t hSocket, bool bNotifyRemoteEnd)
		{
			return default(bool);
		}

		[Token(Token = "0x6000648")]
		[Address(RVA = "0x1AE378C", Offset = "0x1AE378C", VA = "0x1AE378C")]
		public static bool SendDataOnSocket(SNetSocket_t hSocket, byte[] pubData, uint cubData, bool bReliable)
		{
			return default(bool);
		}

		[Token(Token = "0x6000649")]
		[Address(RVA = "0x1AE37D4", Offset = "0x1AE37D4", VA = "0x1AE37D4")]
		public static bool IsDataAvailableOnSocket(SNetSocket_t hSocket, out uint pcubMsgSize)
		{
			return default(bool);
		}

		[Token(Token = "0x600064A")]
		[Address(RVA = "0x1AE3800", Offset = "0x1AE3800", VA = "0x1AE3800")]
		public static bool RetrieveDataFromSocket(SNetSocket_t hSocket, byte[] pubDest, uint cubDest, out uint pcubMsgSize)
		{
			return default(bool);
		}

		[Token(Token = "0x600064B")]
		[Address(RVA = "0x1AE3848", Offset = "0x1AE3848", VA = "0x1AE3848")]
		public static bool IsDataAvailable(SNetListenSocket_t hListenSocket, out uint pcubMsgSize, out SNetSocket_t phSocket)
		{
			return default(bool);
		}

		[Token(Token = "0x600064C")]
		[Address(RVA = "0x1AE387C", Offset = "0x1AE387C", VA = "0x1AE387C")]
		public static bool RetrieveData(SNetListenSocket_t hListenSocket, byte[] pubDest, uint cubDest, out uint pcubMsgSize, out SNetSocket_t phSocket)
		{
			return default(bool);
		}

		[Token(Token = "0x600064D")]
		[Address(RVA = "0x1AE38C8", Offset = "0x1AE38C8", VA = "0x1AE38C8")]
		public static bool GetSocketInfo(SNetSocket_t hSocket, out CSteamID pSteamIDRemote, out int peSocketStatus, out uint punIPRemote, out ushort punPortRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x600064E")]
		[Address(RVA = "0x1AE3914", Offset = "0x1AE3914", VA = "0x1AE3914")]
		public static bool GetListenSocketInfo(SNetListenSocket_t hListenSocket, out uint pnIP, out ushort pnPort)
		{
			return default(bool);
		}

		[Token(Token = "0x600064F")]
		[Address(RVA = "0x1AE3948", Offset = "0x1AE3948", VA = "0x1AE3948")]
		public static ESNetSocketConnectionType GetSocketConnectionType(SNetSocket_t hSocket)
		{
			return default(ESNetSocketConnectionType);
		}

		[Token(Token = "0x6000650")]
		[Address(RVA = "0x1AE396C", Offset = "0x1AE396C", VA = "0x1AE396C")]
		public static int GetMaxPacketSize(SNetSocket_t hSocket)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000143")]
	public static class SteamRemoteStorage
	{
		[Token(Token = "0x6000651")]
		[Address(RVA = "0x1AE3990", Offset = "0x1AE3990", VA = "0x1AE3990")]
		public static bool FileWrite(string pchFile, byte[] pvData, int cubData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000652")]
		[Address(RVA = "0x1AE3AF4", Offset = "0x1AE3AF4", VA = "0x1AE3AF4")]
		public static int FileRead(string pchFile, byte[] pvData, int cubDataToRead)
		{
			return default(int);
		}

		[Token(Token = "0x6000653")]
		[Address(RVA = "0x1AE3C58", Offset = "0x1AE3C58", VA = "0x1AE3C58")]
		public static SteamAPICall_t FileWriteAsync(string pchFile, byte[] pvData, uint cubData)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000654")]
		[Address(RVA = "0x1AE3E24", Offset = "0x1AE3E24", VA = "0x1AE3E24")]
		public static SteamAPICall_t FileReadAsync(string pchFile, uint nOffset, uint cubToRead)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000655")]
		[Address(RVA = "0x1AE3FF0", Offset = "0x1AE3FF0", VA = "0x1AE3FF0")]
		public static bool FileReadAsyncComplete(SteamAPICall_t hReadCall, byte[] pvBuffer, uint cubToRead)
		{
			return default(bool);
		}

		[Token(Token = "0x6000656")]
		[Address(RVA = "0x1AE4038", Offset = "0x1AE4038", VA = "0x1AE4038")]
		public static bool FileForget(string pchFile)
		{
			return default(bool);
		}

		[Token(Token = "0x6000657")]
		[Address(RVA = "0x1AE418C", Offset = "0x1AE418C", VA = "0x1AE418C")]
		public static bool FileDelete(string pchFile)
		{
			return default(bool);
		}

		[Token(Token = "0x6000658")]
		[Address(RVA = "0x1AE42E0", Offset = "0x1AE42E0", VA = "0x1AE42E0")]
		public static SteamAPICall_t FileShare(string pchFile)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000659")]
		[Address(RVA = "0x1AE449C", Offset = "0x1AE449C", VA = "0x1AE449C")]
		public static bool SetSyncPlatforms(string pchFile, ERemoteStoragePlatform eRemoteStoragePlatform)
		{
			return default(bool);
		}

		[Token(Token = "0x600065A")]
		[Address(RVA = "0x1AE45F8", Offset = "0x1AE45F8", VA = "0x1AE45F8")]
		public static UGCFileWriteStreamHandle_t FileWriteStreamOpen(string pchFile)
		{
			return default(UGCFileWriteStreamHandle_t);
		}

		[Token(Token = "0x600065B")]
		[Address(RVA = "0x1AE47B4", Offset = "0x1AE47B4", VA = "0x1AE47B4")]
		public static bool FileWriteStreamWriteChunk(UGCFileWriteStreamHandle_t writeHandle, byte[] pvData, int cubData)
		{
			return default(bool);
		}

		[Token(Token = "0x600065C")]
		[Address(RVA = "0x1AE47FC", Offset = "0x1AE47FC", VA = "0x1AE47FC")]
		public static bool FileWriteStreamClose(UGCFileWriteStreamHandle_t writeHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x600065D")]
		[Address(RVA = "0x1AE4828", Offset = "0x1AE4828", VA = "0x1AE4828")]
		public static bool FileWriteStreamCancel(UGCFileWriteStreamHandle_t writeHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x600065E")]
		[Address(RVA = "0x1AE4854", Offset = "0x1AE4854", VA = "0x1AE4854")]
		public static bool FileExists(string pchFile)
		{
			return default(bool);
		}

		[Token(Token = "0x600065F")]
		[Address(RVA = "0x1AE49A8", Offset = "0x1AE49A8", VA = "0x1AE49A8")]
		public static bool FilePersisted(string pchFile)
		{
			return default(bool);
		}

		[Token(Token = "0x6000660")]
		[Address(RVA = "0x1AE4AFC", Offset = "0x1AE4AFC", VA = "0x1AE4AFC")]
		public static int GetFileSize(string pchFile)
		{
			return default(int);
		}

		[Token(Token = "0x6000661")]
		[Address(RVA = "0x1AE4C50", Offset = "0x1AE4C50", VA = "0x1AE4C50")]
		public static long GetFileTimestamp(string pchFile)
		{
			return default(long);
		}

		[Token(Token = "0x6000662")]
		[Address(RVA = "0x1AE4DB8", Offset = "0x1AE4DB8", VA = "0x1AE4DB8")]
		public static ERemoteStoragePlatform GetSyncPlatforms(string pchFile)
		{
			return default(ERemoteStoragePlatform);
		}

		[Token(Token = "0x6000663")]
		[Address(RVA = "0x1AE4F0C", Offset = "0x1AE4F0C", VA = "0x1AE4F0C")]
		public static int GetFileCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000664")]
		[Address(RVA = "0x1AE4F28", Offset = "0x1AE4F28", VA = "0x1AE4F28")]
		public static string GetFileNameAndSize(int iFile, out int pnFileSizeInBytes)
		{
			return null;
		}

		[Token(Token = "0x6000665")]
		[Address(RVA = "0x1AE4F5C", Offset = "0x1AE4F5C", VA = "0x1AE4F5C")]
		public static bool GetQuota(out ulong pnTotalBytes, out ulong puAvailableBytes)
		{
			return default(bool);
		}

		[Token(Token = "0x6000666")]
		[Address(RVA = "0x1AE4F88", Offset = "0x1AE4F88", VA = "0x1AE4F88")]
		public static bool IsCloudEnabledForAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000667")]
		[Address(RVA = "0x1AE4FA4", Offset = "0x1AE4FA4", VA = "0x1AE4FA4")]
		public static bool IsCloudEnabledForApp()
		{
			return default(bool);
		}

		[Token(Token = "0x6000668")]
		[Address(RVA = "0x1AE4FC0", Offset = "0x1AE4FC0", VA = "0x1AE4FC0")]
		public static void SetCloudEnabledForApp(bool bEnabled)
		{
		}

		[Token(Token = "0x6000669")]
		[Address(RVA = "0x1AE4FE4", Offset = "0x1AE4FE4", VA = "0x1AE4FE4")]
		public static SteamAPICall_t UGCDownload(UGCHandle_t hContent, uint unPriority)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600066A")]
		[Address(RVA = "0x1AE50A4", Offset = "0x1AE50A4", VA = "0x1AE50A4")]
		public static bool GetUGCDownloadProgress(UGCHandle_t hContent, out int pnBytesDownloaded, out int pnBytesExpected)
		{
			return default(bool);
		}

		[Token(Token = "0x600066B")]
		[Address(RVA = "0x1AE50EC", Offset = "0x1AE50EC", VA = "0x1AE50EC")]
		public static bool GetUGCDetails(UGCHandle_t hContent, out AppId_t pnAppID, out string ppchName, out int pnFileSizeInBytes, out CSteamID pSteamIDOwner)
		{
			return default(bool);
		}

		[Token(Token = "0x600066C")]
		[Address(RVA = "0x1AE5164", Offset = "0x1AE5164", VA = "0x1AE5164")]
		public static int UGCRead(UGCHandle_t hContent, byte[] pvData, int cubDataToRead, uint cOffset, EUGCReadAction eAction)
		{
			return default(int);
		}

		[Token(Token = "0x600066D")]
		[Address(RVA = "0x1AE51B4", Offset = "0x1AE51B4", VA = "0x1AE51B4")]
		public static int GetCachedUGCCount()
		{
			return default(int);
		}

		[Token(Token = "0x600066E")]
		[Address(RVA = "0x1AE51D0", Offset = "0x1AE51D0", VA = "0x1AE51D0")]
		public static UGCHandle_t GetCachedUGCHandle(int iCachedContent)
		{
			return default(UGCHandle_t);
		}

		[Token(Token = "0x600066F")]
		[Address(RVA = "0x1AE5274", Offset = "0x1AE5274", VA = "0x1AE5274")]
		public static SteamAPICall_t PublishWorkshopFile(string pchFile, string pchPreviewFile, AppId_t nConsumerAppId, string pchTitle, string pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, IList<string> pTags, EWorkshopFileType eWorkshopFileType)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000670")]
		[Address(RVA = "0x1AE57A8", Offset = "0x1AE57A8", VA = "0x1AE57A8")]
		public static PublishedFileUpdateHandle_t CreatePublishedFileUpdateRequest(PublishedFileId_t unPublishedFileId)
		{
			return default(PublishedFileUpdateHandle_t);
		}

		[Token(Token = "0x6000671")]
		[Address(RVA = "0x1AE5860", Offset = "0x1AE5860", VA = "0x1AE5860")]
		public static bool UpdatePublishedFileFile(PublishedFileUpdateHandle_t updateHandle, string pchFile)
		{
			return default(bool);
		}

		[Token(Token = "0x6000672")]
		[Address(RVA = "0x1AE59C4", Offset = "0x1AE59C4", VA = "0x1AE59C4")]
		public static bool UpdatePublishedFilePreviewFile(PublishedFileUpdateHandle_t updateHandle, string pchPreviewFile)
		{
			return default(bool);
		}

		[Token(Token = "0x6000673")]
		[Address(RVA = "0x1AE5B28", Offset = "0x1AE5B28", VA = "0x1AE5B28")]
		public static bool UpdatePublishedFileTitle(PublishedFileUpdateHandle_t updateHandle, string pchTitle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000674")]
		[Address(RVA = "0x1AE5C8C", Offset = "0x1AE5C8C", VA = "0x1AE5C8C")]
		public static bool UpdatePublishedFileDescription(PublishedFileUpdateHandle_t updateHandle, string pchDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x6000675")]
		[Address(RVA = "0x1AE5DF0", Offset = "0x1AE5DF0", VA = "0x1AE5DF0")]
		public static bool UpdatePublishedFileVisibility(PublishedFileUpdateHandle_t updateHandle, ERemoteStoragePublishedFileVisibility eVisibility)
		{
			return default(bool);
		}

		[Token(Token = "0x6000676")]
		[Address(RVA = "0x1AE5E24", Offset = "0x1AE5E24", VA = "0x1AE5E24")]
		public static bool UpdatePublishedFileTags(PublishedFileUpdateHandle_t updateHandle, IList<string> pTags)
		{
			return default(bool);
		}

		[Token(Token = "0x6000677")]
		[Address(RVA = "0x1AE5EBC", Offset = "0x1AE5EBC", VA = "0x1AE5EBC")]
		public static SteamAPICall_t CommitPublishedFileUpdate(PublishedFileUpdateHandle_t updateHandle)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000678")]
		[Address(RVA = "0x1AE5F74", Offset = "0x1AE5F74", VA = "0x1AE5F74")]
		public static SteamAPICall_t GetPublishedFileDetails(PublishedFileId_t unPublishedFileId, uint unMaxSecondsOld)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000679")]
		[Address(RVA = "0x1AE6034", Offset = "0x1AE6034", VA = "0x1AE6034")]
		public static SteamAPICall_t DeletePublishedFile(PublishedFileId_t unPublishedFileId)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600067A")]
		[Address(RVA = "0x1AE60EC", Offset = "0x1AE60EC", VA = "0x1AE60EC")]
		public static SteamAPICall_t EnumerateUserPublishedFiles(uint unStartIndex)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600067B")]
		[Address(RVA = "0x1AE619C", Offset = "0x1AE619C", VA = "0x1AE619C")]
		public static SteamAPICall_t SubscribePublishedFile(PublishedFileId_t unPublishedFileId)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600067C")]
		[Address(RVA = "0x1AE6254", Offset = "0x1AE6254", VA = "0x1AE6254")]
		public static SteamAPICall_t EnumerateUserSubscribedFiles(uint unStartIndex)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600067D")]
		[Address(RVA = "0x1AE6304", Offset = "0x1AE6304", VA = "0x1AE6304")]
		public static SteamAPICall_t UnsubscribePublishedFile(PublishedFileId_t unPublishedFileId)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600067E")]
		[Address(RVA = "0x1AE63BC", Offset = "0x1AE63BC", VA = "0x1AE63BC")]
		public static bool UpdatePublishedFileSetChangeDescription(PublishedFileUpdateHandle_t updateHandle, string pchChangeDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x600067F")]
		[Address(RVA = "0x1AE6520", Offset = "0x1AE6520", VA = "0x1AE6520")]
		public static SteamAPICall_t GetPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000680")]
		[Address(RVA = "0x1AE65D8", Offset = "0x1AE65D8", VA = "0x1AE65D8")]
		public static SteamAPICall_t UpdateUserPublishedItemVote(PublishedFileId_t unPublishedFileId, bool bVoteUp)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000681")]
		[Address(RVA = "0x1AE6698", Offset = "0x1AE6698", VA = "0x1AE6698")]
		public static SteamAPICall_t GetUserPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000682")]
		[Address(RVA = "0x1AE6750", Offset = "0x1AE6750", VA = "0x1AE6750")]
		public static SteamAPICall_t EnumerateUserSharedWorkshopFiles(CSteamID steamId, uint unStartIndex, IList<string> pRequiredTags, IList<string> pExcludedTags)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000683")]
		[Address(RVA = "0x1AE6878", Offset = "0x1AE6878", VA = "0x1AE6878")]
		public static SteamAPICall_t PublishVideo(EWorkshopVideoProvider eVideoProvider, string pchVideoAccount, string pchVideoIdentifier, string pchPreviewFile, AppId_t nConsumerAppId, string pchTitle, string pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, IList<string> pTags)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000684")]
		[Address(RVA = "0x1AE6EE0", Offset = "0x1AE6EE0", VA = "0x1AE6EE0")]
		public static SteamAPICall_t SetUserPublishedFileAction(PublishedFileId_t unPublishedFileId, EWorkshopFileAction eAction)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000685")]
		[Address(RVA = "0x1AE6FA0", Offset = "0x1AE6FA0", VA = "0x1AE6FA0")]
		public static SteamAPICall_t EnumeratePublishedFilesByUserAction(EWorkshopFileAction eAction, uint unStartIndex)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000686")]
		[Address(RVA = "0x1AE7058", Offset = "0x1AE7058", VA = "0x1AE7058")]
		public static SteamAPICall_t EnumeratePublishedWorkshopFiles(EWorkshopEnumerationType eEnumerationType, uint unStartIndex, uint unCount, uint unDays, IList<string> pTags, IList<string> pUserTags)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000687")]
		[Address(RVA = "0x1AE7188", Offset = "0x1AE7188", VA = "0x1AE7188")]
		public static SteamAPICall_t UGCDownloadToLocation(UGCHandle_t hContent, string pchLocation, uint unPriority)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x2000144")]
	public static class SteamScreenshots
	{
		[Token(Token = "0x6000688")]
		[Address(RVA = "0x1AE735C", Offset = "0x1AE735C", VA = "0x1AE735C")]
		public static ScreenshotHandle WriteScreenshot(byte[] pubRGB, uint cubRGB, int nWidth, int nHeight)
		{
			return default(ScreenshotHandle);
		}

		[Token(Token = "0x6000689")]
		[Address(RVA = "0x1AE7414", Offset = "0x1AE7414", VA = "0x1AE7414")]
		public static ScreenshotHandle AddScreenshotToLibrary(string pchFilename, string pchThumbnailFilename, int nWidth, int nHeight)
		{
			return default(ScreenshotHandle);
		}

		[Token(Token = "0x600068A")]
		[Address(RVA = "0x1AE76B4", Offset = "0x1AE76B4", VA = "0x1AE76B4")]
		public static void TriggerScreenshot()
		{
		}

		[Token(Token = "0x600068B")]
		[Address(RVA = "0x1AE76D0", Offset = "0x1AE76D0", VA = "0x1AE76D0")]
		public static void HookScreenshots(bool bHook)
		{
		}

		[Token(Token = "0x600068C")]
		[Address(RVA = "0x1AE76F4", Offset = "0x1AE76F4", VA = "0x1AE76F4")]
		public static bool SetLocation(ScreenshotHandle hScreenshot, string pchLocation)
		{
			return default(bool);
		}

		[Token(Token = "0x600068D")]
		[Address(RVA = "0x1AE7850", Offset = "0x1AE7850", VA = "0x1AE7850")]
		public static bool TagUser(ScreenshotHandle hScreenshot, CSteamID steamID)
		{
			return default(bool);
		}

		[Token(Token = "0x600068E")]
		[Address(RVA = "0x1AE7884", Offset = "0x1AE7884", VA = "0x1AE7884")]
		public static bool TagPublishedFile(ScreenshotHandle hScreenshot, PublishedFileId_t unPublishedFileID)
		{
			return default(bool);
		}

		[Token(Token = "0x600068F")]
		[Address(RVA = "0x1AE78C4", Offset = "0x1AE78C4", VA = "0x1AE78C4")]
		public static bool IsScreenshotsHooked()
		{
			return default(bool);
		}

		[Token(Token = "0x6000690")]
		[Address(RVA = "0x1AE78E0", Offset = "0x1AE78E0", VA = "0x1AE78E0")]
		public static ScreenshotHandle AddVRScreenshotToLibrary(EVRScreenshotType eType, string pchFilename, string pchVRFilename)
		{
			return default(ScreenshotHandle);
		}
	}
	[Token(Token = "0x2000145")]
	public static class SteamUGC
	{
		[Token(Token = "0x6000691")]
		[Address(RVA = "0x1AE7B74", Offset = "0x1AE7B74", VA = "0x1AE7B74")]
		public static UGCQueryHandle_t CreateQueryUserUGCRequest(AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x6000692")]
		[Address(RVA = "0x1AE7C50", Offset = "0x1AE7C50", VA = "0x1AE7C50")]
		public static UGCQueryHandle_t CreateQueryAllUGCRequest(EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x6000693")]
		[Address(RVA = "0x1AE7D10", Offset = "0x1AE7D10", VA = "0x1AE7D10")]
		public static UGCQueryHandle_t CreateQueryUGCDetailsRequest(PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x6000694")]
		[Address(RVA = "0x1AE7DAC", Offset = "0x1AE7DAC", VA = "0x1AE7DAC")]
		public static SteamAPICall_t SendQueryUGCRequest(UGCQueryHandle_t handle)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000695")]
		[Address(RVA = "0x1AE7E64", Offset = "0x1AE7E64", VA = "0x1AE7E64")]
		public static bool GetQueryUGCResult(UGCQueryHandle_t handle, uint index, out SteamUGCDetails_t pDetails)
		{
			return default(bool);
		}

		[Token(Token = "0x6000696")]
		[Address(RVA = "0x1AE7EAC", Offset = "0x1AE7EAC", VA = "0x1AE7EAC")]
		public static bool GetQueryUGCPreviewURL(UGCQueryHandle_t handle, uint index, out string pchURL, uint cchURLSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000697")]
		[Address(RVA = "0x1AE7FC8", Offset = "0x1AE7FC8", VA = "0x1AE7FC8")]
		public static bool GetQueryUGCMetadata(UGCQueryHandle_t handle, uint index, out string pchMetadata, uint cchMetadatasize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000698")]
		[Address(RVA = "0x1AE80E4", Offset = "0x1AE80E4", VA = "0x1AE80E4")]
		public static bool GetQueryUGCChildren(UGCQueryHandle_t handle, uint index, PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries)
		{
			return default(bool);
		}

		[Token(Token = "0x6000699")]
		[Address(RVA = "0x1AE8130", Offset = "0x1AE8130", VA = "0x1AE8130")]
		public static bool GetQueryUGCStatistic(UGCQueryHandle_t handle, uint index, EItemStatistic eStatType, out ulong pStatValue)
		{
			return default(bool);
		}

		[Token(Token = "0x600069A")]
		[Address(RVA = "0x1AE817C", Offset = "0x1AE817C", VA = "0x1AE817C")]
		public static uint GetQueryUGCNumAdditionalPreviews(UGCQueryHandle_t handle, uint index)
		{
			return default(uint);
		}

		[Token(Token = "0x600069B")]
		[Address(RVA = "0x1AE81B0", Offset = "0x1AE81B0", VA = "0x1AE81B0")]
		public static bool GetQueryUGCAdditionalPreview(UGCQueryHandle_t handle, uint index, uint previewIndex, out string pchURLOrVideoID, uint cchURLSize, out string pchOriginalFileName, uint cchOriginalFileNameSize, out EItemPreviewType pPreviewType)
		{
			return default(bool);
		}

		[Token(Token = "0x600069C")]
		[Address(RVA = "0x1AE8344", Offset = "0x1AE8344", VA = "0x1AE8344")]
		public static uint GetQueryUGCNumKeyValueTags(UGCQueryHandle_t handle, uint index)
		{
			return default(uint);
		}

		[Token(Token = "0x600069D")]
		[Address(RVA = "0x1AE8378", Offset = "0x1AE8378", VA = "0x1AE8378")]
		public static bool GetQueryUGCKeyValueTag(UGCQueryHandle_t handle, uint index, uint keyValueTagIndex, out string pchKey, uint cchKeySize, out string pchValue, uint cchValueSize)
		{
			return default(bool);
		}

		[Token(Token = "0x600069E")]
		[Address(RVA = "0x1AE8504", Offset = "0x1AE8504", VA = "0x1AE8504")]
		public static bool ReleaseQueryUGCRequest(UGCQueryHandle_t handle)
		{
			return default(bool);
		}

		[Token(Token = "0x600069F")]
		[Address(RVA = "0x1AE8530", Offset = "0x1AE8530", VA = "0x1AE8530")]
		public static bool AddRequiredTag(UGCQueryHandle_t handle, string pTagName)
		{
			return default(bool);
		}

		[Token(Token = "0x60006A0")]
		[Address(RVA = "0x1AE8694", Offset = "0x1AE8694", VA = "0x1AE8694")]
		public static bool AddExcludedTag(UGCQueryHandle_t handle, string pTagName)
		{
			return default(bool);
		}

		[Token(Token = "0x60006A1")]
		[Address(RVA = "0x1AE87F8", Offset = "0x1AE87F8", VA = "0x1AE87F8")]
		public static bool SetReturnOnlyIDs(UGCQueryHandle_t handle, bool bReturnOnlyIDs)
		{
			return default(bool);
		}

		[Token(Token = "0x60006A2")]
		[Address(RVA = "0x1AE882C", Offset = "0x1AE882C", VA = "0x1AE882C")]
		public static bool SetReturnKeyValueTags(UGCQueryHandle_t handle, bool bReturnKeyValueTags)
		{
			return default(bool);
		}

		[Token(Token = "0x60006A3")]
		[Address(RVA = "0x1AE8860", Offset = "0x1AE8860", VA = "0x1AE8860")]
		public static bool SetReturnLongDescription(UGCQueryHandle_t handle, bool bReturnLongDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x60006A4")]
		[Address(RVA = "0x1AE8894", Offset = "0x1AE8894", VA = "0x1AE8894")]
		public static bool SetReturnMetadata(UGCQueryHandle_t handle, bool bReturnMetadata)
		{
			return default(bool);
		}

		[Token(Token = "0x60006A5")]
		[Address(RVA = "0x1AE88C8", Offset = "0x1AE88C8", VA = "0x1AE88C8")]
		public static bool SetReturnChildren(UGCQueryHandle_t handle, bool bReturnChildren)
		{
			return default(bool);
		}

		[Token(Token = "0x60006A6")]
		[Address(RVA = "0x1AE88FC", Offset = "0x1AE88FC", VA = "0x1AE88FC")]
		public static bool SetReturnAdditionalPreviews(UGCQueryHandle_t handle, bool bReturnAdditionalPreviews)
		{
			return default(bool);
		}

		[Token(Token = "0x60006A7")]
		[Address(RVA = "0x1AE8930", Offset = "0x1AE8930", VA = "0x1AE8930")]
		public static bool SetReturnTotalOnly(UGCQueryHandle_t handle, bool bReturnTotalOnly)
		{
			return default(bool);
		}

		[Token(Token = "0x60006A8")]
		[Address(RVA = "0x1AE8964", Offset = "0x1AE8964", VA = "0x1AE8964")]
		public static bool SetReturnPlaytimeStats(UGCQueryHandle_t handle, uint unDays)
		{
			return default(bool);
		}

		[Token(Token = "0x60006A9")]
		[Address(RVA = "0x1AE8998", Offset = "0x1AE8998", VA = "0x1AE8998")]
		public static bool SetLanguage(UGCQueryHandle_t handle, string pchLanguage)
		{
			return default(bool);
		}

		[Token(Token = "0x60006AA")]
		[Address(RVA = "0x1AE8AFC", Offset = "0x1AE8AFC", VA = "0x1AE8AFC")]
		public static bool SetAllowCachedResponse(UGCQueryHandle_t handle, uint unMaxAgeSeconds)
		{
			return default(bool);
		}

		[Token(Token = "0x60006AB")]
		[Address(RVA = "0x1AE8B30", Offset = "0x1AE8B30", VA = "0x1AE8B30")]
		public static bool SetCloudFileNameFilter(UGCQueryHandle_t handle, string pMatchCloudFileName)
		{
			return default(bool);
		}

		[Token(Token = "0x60006AC")]
		[Address(RVA = "0x1AE8C94", Offset = "0x1AE8C94", VA = "0x1AE8C94")]
		public static bool SetMatchAnyTag(UGCQueryHandle_t handle, bool bMatchAnyTag)
		{
			return default(bool);
		}

		[Token(Token = "0x60006AD")]
		[Address(RVA = "0x1AE8CC8", Offset = "0x1AE8CC8", VA = "0x1AE8CC8")]
		public static bool SetSearchText(UGCQueryHandle_t handle, string pSearchText)
		{
			return default(bool);
		}

		[Token(Token = "0x60006AE")]
		[Address(RVA = "0x1AE8E2C", Offset = "0x1AE8E2C", VA = "0x1AE8E2C")]
		public static bool SetRankedByTrendDays(UGCQueryHandle_t handle, uint unDays)
		{
			return default(bool);
		}

		[Token(Token = "0x60006AF")]
		[Address(RVA = "0x1AE8E60", Offset = "0x1AE8E60", VA = "0x1AE8E60")]
		public static bool AddRequiredKeyValueTag(UGCQueryHandle_t handle, string pKey, string pValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60006B0")]
		[Address(RVA = "0x1AE9108", Offset = "0x1AE9108", VA = "0x1AE9108")]
		public static SteamAPICall_t RequestUGCDetails(PublishedFileId_t nPublishedFileID, uint unMaxAgeSeconds)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60006B1")]
		[Address(RVA = "0x1AE91C8", Offset = "0x1AE91C8", VA = "0x1AE91C8")]
		public static SteamAPICall_t CreateItem(AppId_t nConsumerAppId, EWorkshopFileType eFileType)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60006B2")]
		[Address(RVA = "0x1AE9280", Offset = "0x1AE9280", VA = "0x1AE9280")]
		public static UGCUpdateHandle_t StartItemUpdate(AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID)
		{
			return default(UGCUpdateHandle_t);
		}

		[Token(Token = "0x60006B3")]
		[Address(RVA = "0x1AE9340", Offset = "0x1AE9340", VA = "0x1AE9340")]
		public static bool SetItemTitle(UGCUpdateHandle_t handle, string pchTitle)
		{
			return default(bool);
		}

		[Token(Token = "0x60006B4")]
		[Address(RVA = "0x1AE94A4", Offset = "0x1AE94A4", VA = "0x1AE94A4")]
		public static bool SetItemDescription(UGCUpdateHandle_t handle, string pchDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x60006B5")]
		[Address(RVA = "0x1AE9608", Offset = "0x1AE9608", VA = "0x1AE9608")]
		public static bool SetItemUpdateLanguage(UGCUpdateHandle_t handle, string pchLanguage)
		{
			return default(bool);
		}

		[Token(Token = "0x60006B6")]
		[Address(RVA = "0x1AE976C", Offset = "0x1AE976C", VA = "0x1AE976C")]
		public static bool SetItemMetadata(UGCUpdateHandle_t handle, string pchMetaData)
		{
			return default(bool);
		}

		[Token(Token = "0x60006B7")]
		[Address(RVA = "0x1AE98D0", Offset = "0x1AE98D0", VA = "0x1AE98D0")]
		public static bool SetItemVisibility(UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility)
		{
			return default(bool);
		}

		[Token(Token = "0x60006B8")]
		[Address(RVA = "0x1AE9904", Offset = "0x1AE9904", VA = "0x1AE9904")]
		public static bool SetItemTags(UGCUpdateHandle_t updateHandle, IList<string> pTags)
		{
			return default(bool);
		}

		[Token(Token = "0x60006B9")]
		[Address(RVA = "0x1AE999C", Offset = "0x1AE999C", VA = "0x1AE999C")]
		public static bool SetItemContent(UGCUpdateHandle_t handle, string pszContentFolder)
		{
			return default(bool);
		}

		[Token(Token = "0x60006BA")]
		[Address(RVA = "0x1AE9B00", Offset = "0x1AE9B00", VA = "0x1AE9B00")]
		public static bool SetItemPreview(UGCUpdateHandle_t handle, string pszPreviewFile)
		{
			return default(bool);
		}

		[Token(Token = "0x60006BB")]
		[Address(RVA = "0x1AE9C64", Offset = "0x1AE9C64", VA = "0x1AE9C64")]
		public static bool RemoveItemKeyValueTags(UGCUpdateHandle_t handle, string pchKey)
		{
			return default(bool);
		}

		[Token(Token = "0x60006BC")]
		[Address(RVA = "0x1AE9DC8", Offset = "0x1AE9DC8", VA = "0x1AE9DC8")]
		public static bool AddItemKeyValueTag(UGCUpdateHandle_t handle, string pchKey, string pchValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60006BD")]
		[Address(RVA = "0x1AEA070", Offset = "0x1AEA070", VA = "0x1AEA070")]
		public static bool AddItemPreviewFile(UGCUpdateHandle_t handle, string pszPreviewFile, EItemPreviewType type)
		{
			return default(bool);
		}

		[Token(Token = "0x60006BE")]
		[Address(RVA = "0x1AEA1DC", Offset = "0x1AEA1DC", VA = "0x1AEA1DC")]
		public static bool AddItemPreviewVideo(UGCUpdateHandle_t handle, string pszVideoID)
		{
			return default(bool);
		}

		[Token(Token = "0x60006BF")]
		[Address(RVA = "0x1AEA340", Offset = "0x1AEA340", VA = "0x1AEA340")]
		public static bool UpdateItemPreviewFile(UGCUpdateHandle_t handle, uint index, string pszPreviewFile)
		{
			return default(bool);
		}

		[Token(Token = "0x60006C0")]
		[Address(RVA = "0x1AEA4AC", Offset = "0x1AEA4AC", VA = "0x1AEA4AC")]
		public static bool UpdateItemPreviewVideo(UGCUpdateHandle_t handle, uint index, string pszVideoID)
		{
			return default(bool);
		}

		[Token(Token = "0x60006C1")]
		[Address(RVA = "0x1AEA618", Offset = "0x1AEA618", VA = "0x1AEA618")]
		public static bool RemoveItemPreview(UGCUpdateHandle_t handle, uint index)
		{
			return default(bool);
		}

		[Token(Token = "0x60006C2")]
		[Address(RVA = "0x1AEA64C", Offset = "0x1AEA64C", VA = "0x1AEA64C")]
		public static SteamAPICall_t SubmitItemUpdate(UGCUpdateHandle_t handle, string pchChangeNote)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60006C3")]
		[Address(RVA = "0x1AEA818", Offset = "0x1AEA818", VA = "0x1AEA818")]
		public static EItemUpdateStatus GetItemUpdateProgress(UGCUpdateHandle_t handle, out ulong punBytesProcessed, out ulong punBytesTotal)
		{
			return default(EItemUpdateStatus);
		}

		[Token(Token = "0x60006C4")]
		[Address(RVA = "0x1AEA860", Offset = "0x1AEA860", VA = "0x1AEA860")]
		public static SteamAPICall_t SetUserItemVote(PublishedFileId_t nPublishedFileID, bool bVoteUp)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60006C5")]
		[Address(RVA = "0x1AEA920", Offset = "0x1AEA920", VA = "0x1AEA920")]
		public static SteamAPICall_t GetUserItemVote(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60006C6")]
		[Address(RVA = "0x1AEA9D8", Offset = "0x1AEA9D8", VA = "0x1AEA9D8")]
		public static SteamAPICall_t AddItemToFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60006C7")]
		[Address(RVA = "0x1AEAA98", Offset = "0x1AEAA98", VA = "0x1AEAA98")]
		public static SteamAPICall_t RemoveItemFromFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60006C8")]
		[Address(RVA = "0x1AEAB58", Offset = "0x1AEAB58", VA = "0x1AEAB58")]
		public static SteamAPICall_t SubscribeItem(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60006C9")]
		[Address(RVA = "0x1AEAC10", Offset = "0x1AEAC10", VA = "0x1AEAC10")]
		public static SteamAPICall_t UnsubscribeItem(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60006CA")]
		[Address(RVA = "0x1AEACC8", Offset = "0x1AEACC8", VA = "0x1AEACC8")]
		public static uint GetNumSubscribedItems()
		{
			return default(uint);
		}

		[Token(Token = "0x60006CB")]
		[Address(RVA = "0x1AEACE4", Offset = "0x1AEACE4", VA = "0x1AEACE4")]
		public static uint GetSubscribedItems(PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries)
		{
			return default(uint);
		}

		[Token(Token = "0x60006CC")]
		[Address(RVA = "0x1AEAD10", Offset = "0x1AEAD10", VA = "0x1AEAD10")]
		public static uint GetItemState(PublishedFileId_t nPublishedFileID)
		{
			return default(uint);
		}

		[Token(Token = "0x60006CD")]
		[Address(RVA = "0x1AEAD3C", Offset = "0x1AEAD3C", VA = "0x1AEAD3C")]
		public static bool GetItemInstallInfo(PublishedFileId_t nPublishedFileID, out ulong punSizeOnDisk, out string pchFolder, uint cchFolderSize, out uint punTimeStamp)
		{
			return default(bool);
		}

		[Token(Token = "0x60006CE")]
		[Address(RVA = "0x1AEAE5C", Offset = "0x1AEAE5C", VA = "0x1AEAE5C")]
		public static bool GetItemDownloadInfo(PublishedFileId_t nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal)
		{
			return default(bool);
		}

		[Token(Token = "0x60006CF")]
		[Address(RVA = "0x1AEAEA4", Offset = "0x1AEAEA4", VA = "0x1AEAEA4")]
		public static bool DownloadItem(PublishedFileId_t nPublishedFileID, bool bHighPriority)
		{
			return default(bool);
		}

		[Token(Token = "0x60006D0")]
		[Address(RVA = "0x1AEAED8", Offset = "0x1AEAED8", VA = "0x1AEAED8")]
		public static bool BInitWorkshopForGameServer(DepotId_t unWorkshopDepotID, string pszFolder)
		{
			return default(bool);
		}

		[Token(Token = "0x60006D1")]
		[Address(RVA = "0x1AEB034", Offset = "0x1AEB034", VA = "0x1AEB034")]
		public static void SuspendDownloads(bool bSuspend)
		{
		}

		[Token(Token = "0x60006D2")]
		[Address(RVA = "0x1AEB058", Offset = "0x1AEB058", VA = "0x1AEB058")]
		public static SteamAPICall_t StartPlaytimeTracking(PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60006D3")]
		[Address(RVA = "0x1AEB110", Offset = "0x1AEB110", VA = "0x1AEB110")]
		public static SteamAPICall_t StopPlaytimeTracking(PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60006D4")]
		[Address(RVA = "0x1AEB1C8", Offset = "0x1AEB1C8", VA = "0x1AEB1C8")]
		public static SteamAPICall_t StopPlaytimeTrackingForAllItems()
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60006D5")]
		[Address(RVA = "0x1AEB270", Offset = "0x1AEB270", VA = "0x1AEB270")]
		public static SteamAPICall_t AddDependency(PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60006D6")]
		[Address(RVA = "0x1AEB338", Offset = "0x1AEB338", VA = "0x1AEB338")]
		public static SteamAPICall_t RemoveDependency(PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x2000146")]
	public static class SteamUnifiedMessages
	{
		[Token(Token = "0x60006D7")]
		[Address(RVA = "0x1AEB400", Offset = "0x1AEB400", VA = "0x1AEB400")]
		public static ClientUnifiedMessageHandle SendMethod(string pchServiceMethod, byte[] pRequestBuffer, uint unRequestBufferSize, ulong unContext)
		{
			return default(ClientUnifiedMessageHandle);
		}

		[Token(Token = "0x60006D8")]
		[Address(RVA = "0x1AEB5DC", Offset = "0x1AEB5DC", VA = "0x1AEB5DC")]
		public static bool GetMethodResponseInfo(ClientUnifiedMessageHandle hHandle, out uint punResponseSize, out EResult peResult)
		{
			return default(bool);
		}

		[Token(Token = "0x60006D9")]
		[Address(RVA = "0x1AEB624", Offset = "0x1AEB624", VA = "0x1AEB624")]
		public static bool GetMethodResponseData(ClientUnifiedMessageHandle hHandle, byte[] pResponseBuffer, uint unResponseBufferSize, bool bAutoRelease)
		{
			return default(bool);
		}

		[Token(Token = "0x60006DA")]
		[Address(RVA = "0x1AEB670", Offset = "0x1AEB670", VA = "0x1AEB670")]
		public static bool ReleaseMethod(ClientUnifiedMessageHandle hHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x60006DB")]
		[Address(RVA = "0x1AEB69C", Offset = "0x1AEB69C", VA = "0x1AEB69C")]
		public static bool SendNotification(string pchServiceNotification, byte[] pNotificationBuffer, uint unNotificationBufferSize)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000147")]
	public static class SteamUser
	{
		[Token(Token = "0x60006DC")]
		[Address(RVA = "0x1AEB800", Offset = "0x1AEB800", VA = "0x1AEB800")]
		public static HSteamUser GetHSteamUser()
		{
			return default(HSteamUser);
		}

		[Token(Token = "0x60006DD")]
		[Address(RVA = "0x1AEB824", Offset = "0x1AEB824", VA = "0x1AEB824")]
		public static bool BLoggedOn()
		{
			return default(bool);
		}

		[Token(Token = "0x60006DE")]
		[Address(RVA = "0x1AEB840", Offset = "0x1AEB840", VA = "0x1AEB840")]
		public static CSteamID GetSteamID()
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60006DF")]
		[Address(RVA = "0x1AEB8E8", Offset = "0x1AEB8E8", VA = "0x1AEB8E8")]
		public static int InitiateGameConnection(byte[] pAuthBlob, int cbMaxAuthBlob, CSteamID steamIDGameServer, uint unIPServer, ushort usPortServer, bool bSecure)
		{
			return default(int);
		}

		[Token(Token = "0x60006E0")]
		[Address(RVA = "0x1AEB938", Offset = "0x1AEB938", VA = "0x1AEB938")]
		public static void TerminateGameConnection(uint unIPServer, ushort usPortServer)
		{
		}

		[Token(Token = "0x60006E1")]
		[Address(RVA = "0x1AEB964", Offset = "0x1AEB964", VA = "0x1AEB964")]
		public static void TrackAppUsageEvent(CGameID gameID, int eAppUsageEvent, string pchExtraInfo = "")
		{
		}

		[Token(Token = "0x60006E2")]
		[Address(RVA = "0x1AEBACC", Offset = "0x1AEBACC", VA = "0x1AEBACC")]
		public static bool GetUserDataFolder(out string pchBuffer, int cubBuffer)
		{
			return default(bool);
		}

		[Token(Token = "0x60006E3")]
		[Address(RVA = "0x1AEBBB8", Offset = "0x1AEBBB8", VA = "0x1AEBBB8")]
		public static void StartVoiceRecording()
		{
		}

		[Token(Token = "0x60006E4")]
		[Address(RVA = "0x1AEBBD4", Offset = "0x1AEBBD4", VA = "0x1AEBBD4")]
		public static void StopVoiceRecording()
		{
		}

		[Token(Token = "0x60006E5")]
		[Address(RVA = "0x1AEBBF0", Offset = "0x1AEBBF0", VA = "0x1AEBBF0")]
		public static EVoiceResult GetAvailableVoice(out uint pcbCompressed)
		{
			return default(EVoiceResult);
		}

		[Token(Token = "0x60006E6")]
		[Address(RVA = "0x1AEBC50", Offset = "0x1AEBC50", VA = "0x1AEBC50")]
		public static EVoiceResult GetVoice(bool bWantCompressed, byte[] pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten)
		{
			return default(EVoiceResult);
		}

		[Token(Token = "0x60006E7")]
		[Address(RVA = "0x1AEBCE0", Offset = "0x1AEBCE0", VA = "0x1AEBCE0")]
		public static EVoiceResult DecompressVoice(byte[] pCompressed, uint cbCompressed, byte[] pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, uint nDesiredSampleRate)
		{
			return default(EVoiceResult);
		}

		[Token(Token = "0x60006E8")]
		[Address(RVA = "0x1AEBD30", Offset = "0x1AEBD30", VA = "0x1AEBD30")]
		public static uint GetVoiceOptimalSampleRate()
		{
			return default(uint);
		}

		[Token(Token = "0x60006E9")]
		[Address(RVA = "0x1AEBD4C", Offset = "0x1AEBD4C", VA = "0x1AEBD4C")]
		public static HAuthTicket GetAuthSessionTicket(byte[] pTicket, int cbMaxTicket, out uint pcbTicket)
		{
			return default(HAuthTicket);
		}

		[Token(Token = "0x60006EA")]
		[Address(RVA = "0x1AEBDF0", Offset = "0x1AEBDF0", VA = "0x1AEBDF0")]
		public static EBeginAuthSessionResult BeginAuthSession(byte[] pAuthTicket, int cbAuthTicket, CSteamID steamID)
		{
			return default(EBeginAuthSessionResult);
		}

		[Token(Token = "0x60006EB")]
		[Address(RVA = "0x1AEBE38", Offset = "0x1AEBE38", VA = "0x1AEBE38")]
		public static void EndAuthSession(CSteamID steamID)
		{
		}

		[Token(Token = "0x60006EC")]
		[Address(RVA = "0x1AEBE64", Offset = "0x1AEBE64", VA = "0x1AEBE64")]
		public static void CancelAuthTicket(HAuthTicket hAuthTicket)
		{
		}

		[Token(Token = "0x60006ED")]
		[Address(RVA = "0x1AEBE88", Offset = "0x1AEBE88", VA = "0x1AEBE88")]
		public static EUserHasLicenseForAppResult UserHasLicenseForApp(CSteamID steamID, AppId_t appID)
		{
			return default(EUserHasLicenseForAppResult);
		}

		[Token(Token = "0x60006EE")]
		[Address(RVA = "0x1AEBEBC", Offset = "0x1AEBEBC", VA = "0x1AEBEBC")]
		public static bool BIsBehindNAT()
		{
			return default(bool);
		}

		[Token(Token = "0x60006EF")]
		[Address(RVA = "0x1AEBED8", Offset = "0x1AEBED8", VA = "0x1AEBED8")]
		public static void AdvertiseGame(CSteamID steamIDGameServer, uint unIPServer, ushort usPortServer)
		{
		}

		[Token(Token = "0x60006F0")]
		[Address(RVA = "0x1AEBF20", Offset = "0x1AEBF20", VA = "0x1AEBF20")]
		public static SteamAPICall_t RequestEncryptedAppTicket(byte[] pDataToInclude, int cbDataToInclude)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60006F1")]
		[Address(RVA = "0x1AEBFD8", Offset = "0x1AEBFD8", VA = "0x1AEBFD8")]
		public static bool GetEncryptedAppTicket(byte[] pTicket, int cbMaxTicket, out uint pcbTicket)
		{
			return default(bool);
		}

		[Token(Token = "0x60006F2")]
		[Address(RVA = "0x1AEC00C", Offset = "0x1AEC00C", VA = "0x1AEC00C")]
		public static int GetGameBadgeLevel(int nSeries, bool bFoil)
		{
			return default(int);
		}

		[Token(Token = "0x60006F3")]
		[Address(RVA = "0x1AEC038", Offset = "0x1AEC038", VA = "0x1AEC038")]
		public static int GetPlayerSteamLevel()
		{
			return default(int);
		}

		[Token(Token = "0x60006F4")]
		[Address(RVA = "0x1AEC054", Offset = "0x1AEC054", VA = "0x1AEC054")]
		public static SteamAPICall_t RequestStoreAuthURL(string pchRedirectURL)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60006F5")]
		[Address(RVA = "0x1AEC210", Offset = "0x1AEC210", VA = "0x1AEC210")]
		public static bool BIsPhoneVerified()
		{
			return default(bool);
		}

		[Token(Token = "0x60006F6")]
		[Address(RVA = "0x1AEC22C", Offset = "0x1AEC22C", VA = "0x1AEC22C")]
		public static bool BIsTwoFactorEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x60006F7")]
		[Address(RVA = "0x1AEC248", Offset = "0x1AEC248", VA = "0x1AEC248")]
		public static bool BIsPhoneIdentifying()
		{
			return default(bool);
		}

		[Token(Token = "0x60006F8")]
		[Address(RVA = "0x1AEC264", Offset = "0x1AEC264", VA = "0x1AEC264")]
		public static bool BIsPhoneRequiringVerification()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000148")]
	public static class SteamUserStats
	{
		[Token(Token = "0x60006F9")]
		[Address(RVA = "0x1AEC280", Offset = "0x1AEC280", VA = "0x1AEC280")]
		public static bool RequestCurrentStats()
		{
			return default(bool);
		}

		[Token(Token = "0x60006FA")]
		[Address(RVA = "0x1AEC29C", Offset = "0x1AEC29C", VA = "0x1AEC29C")]
		public static bool GetStat(string pchName, out int pData)
		{
			return default(bool);
		}

		[Token(Token = "0x60006FB")]
		[Address(RVA = "0x1AEC3F8", Offset = "0x1AEC3F8", VA = "0x1AEC3F8")]
		public static bool GetStat(string pchName, out float pData)
		{
			return default(bool);
		}

		[Token(Token = "0x60006FC")]
		[Address(RVA = "0x1AEC554", Offset = "0x1AEC554", VA = "0x1AEC554")]
		public static bool SetStat(string pchName, int nData)
		{
			return default(bool);
		}

		[Token(Token = "0x60006FD")]
		[Address(RVA = "0x1AEC6B0", Offset = "0x1AEC6B0", VA = "0x1AEC6B0")]
		public static bool SetStat(string pchName, float fData)
		{
			return default(bool);
		}

		[Token(Token = "0x60006FE")]
		[Address(RVA = "0x1AEC80C", Offset = "0x1AEC80C", VA = "0x1AEC80C")]
		public static bool UpdateAvgRateStat(string pchName, float flCountThisSession, double dSessionLength)
		{
			return default(bool);
		}

		[Token(Token = "0x60006FF")]
		[Address(RVA = "0x1AEC978", Offset = "0x1AEC978", VA = "0x1AEC978")]
		public static bool GetAchievement(string pchName, out bool pbAchieved)
		{
			return default(bool);
		}

		[Token(Token = "0x6000700")]
		[Address(RVA = "0x1AECAD4", Offset = "0x1AECAD4", VA = "0x1AECAD4")]
		public static bool SetAchievement(string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000701")]
		[Address(RVA = "0x1AECC28", Offset = "0x1AECC28", VA = "0x1AECC28")]
		public static bool ClearAchievement(string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000702")]
		[Address(RVA = "0x1AECD7C", Offset = "0x1AECD7C", VA = "0x1AECD7C")]
		public static bool GetAchievementAndUnlockTime(string pchName, out bool pbAchieved, out uint punUnlockTime)
		{
			return default(bool);
		}

		[Token(Token = "0x6000703")]
		[Address(RVA = "0x1AECEE0", Offset = "0x1AECEE0", VA = "0x1AECEE0")]
		public static bool StoreStats()
		{
			return default(bool);
		}

		[Token(Token = "0x6000704")]
		[Address(RVA = "0x1AECEFC", Offset = "0x1AECEFC", VA = "0x1AECEFC")]
		public static int GetAchievementIcon(string pchName)
		{
			return default(int);
		}

		[Token(Token = "0x6000705")]
		[Address(RVA = "0x1AED050", Offset = "0x1AED050", VA = "0x1AED050")]
		public static string GetAchievementDisplayAttribute(string pchName, string pchKey)
		{
			return null;
		}

		[Token(Token = "0x6000706")]
		[Address(RVA = "0x1AED2B8", Offset = "0x1AED2B8", VA = "0x1AED2B8")]
		public static bool IndicateAchievementProgress(string pchName, uint nCurProgress, uint nMaxProgress)
		{
			return default(bool);
		}

		[Token(Token = "0x6000707")]
		[Address(RVA = "0x1AED41C", Offset = "0x1AED41C", VA = "0x1AED41C")]
		public static uint GetNumAchievements()
		{
			return default(uint);
		}

		[Token(Token = "0x6000708")]
		[Address(RVA = "0x1AED438", Offset = "0x1AED438", VA = "0x1AED438")]
		public static string GetAchievementName(uint iAchievement)
		{
			return null;
		}

		[Token(Token = "0x6000709")]
		[Address(RVA = "0x1AED464", Offset = "0x1AED464", VA = "0x1AED464")]
		public static SteamAPICall_t RequestUserStats(CSteamID steamIDUser)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600070A")]
		[Address(RVA = "0x1AED51C", Offset = "0x1AED51C", VA = "0x1AED51C")]
		public static bool GetUserStat(CSteamID steamIDUser, string pchName, out int pData)
		{
			return default(bool);
		}

		[Token(Token = "0x600070B")]
		[Address(RVA = "0x1AED688", Offset = "0x1AED688", VA = "0x1AED688")]
		public static bool GetUserStat(CSteamID steamIDUser, string pchName, out float pData)
		{
			return default(bool);
		}

		[Token(Token = "0x600070C")]
		[Address(RVA = "0x1AED7F4", Offset = "0x1AED7F4", VA = "0x1AED7F4")]
		public static bool GetUserAchievement(CSteamID steamIDUser, string pchName, out bool pbAchieved)
		{
			return default(bool);
		}

		[Token(Token = "0x600070D")]
		[Address(RVA = "0x1AED960", Offset = "0x1AED960", VA = "0x1AED960")]
		public static bool GetUserAchievementAndUnlockTime(CSteamID steamIDUser, string pchName, out bool pbAchieved, out uint punUnlockTime)
		{
			return default(bool);
		}

		[Token(Token = "0x600070E")]
		[Address(RVA = "0x1AEDAD4", Offset = "0x1AEDAD4", VA = "0x1AEDAD4")]
		public static bool ResetAllStats(bool bAchievementsToo)
		{
			return default(bool);
		}

		[Token(Token = "0x600070F")]
		[Address(RVA = "0x1AEDAF8", Offset = "0x1AEDAF8", VA = "0x1AEDAF8")]
		public static SteamAPICall_t FindOrCreateLeaderboard(string pchLeaderboardName, ELeaderboardSortMethod eLeaderboardSortMethod, ELeaderboardDisplayType eLeaderboardDisplayType)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000710")]
		[Address(RVA = "0x1AEDCC4", Offset = "0x1AEDCC4", VA = "0x1AEDCC4")]
		public static SteamAPICall_t FindLeaderboard(string pchLeaderboardName)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000711")]
		[Address(RVA = "0x1AEDE80", Offset = "0x1AEDE80", VA = "0x1AEDE80")]
		public static string GetLeaderboardName(SteamLeaderboard_t hSteamLeaderboard)
		{
			return null;
		}

		[Token(Token = "0x6000712")]
		[Address(RVA = "0x1AEDEB4", Offset = "0x1AEDEB4", VA = "0x1AEDEB4")]
		public static int GetLeaderboardEntryCount(SteamLeaderboard_t hSteamLeaderboard)
		{
			return default(int);
		}

		[Token(Token = "0x6000713")]
		[Address(RVA = "0x1AEDEE0", Offset = "0x1AEDEE0", VA = "0x1AEDEE0")]
		public static ELeaderboardSortMethod GetLeaderboardSortMethod(SteamLeaderboard_t hSteamLeaderboard)
		{
			return default(ELeaderboardSortMethod);
		}

		[Token(Token = "0x6000714")]
		[Address(RVA = "0x1AEDF0C", Offset = "0x1AEDF0C", VA = "0x1AEDF0C")]
		public static ELeaderboardDisplayType GetLeaderboardDisplayType(SteamLeaderboard_t hSteamLeaderboard)
		{
			return default(ELeaderboardDisplayType);
		}

		[Token(Token = "0x6000715")]
		[Address(RVA = "0x1AEDF38", Offset = "0x1AEDF38", VA = "0x1AEDF38")]
		public static SteamAPICall_t DownloadLeaderboardEntries(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000716")]
		[Address(RVA = "0x1AEE008", Offset = "0x1AEE008", VA = "0x1AEE008")]
		public static SteamAPICall_t DownloadLeaderboardEntriesForUsers(SteamLeaderboard_t hSteamLeaderboard, CSteamID[] prgUsers, int cUsers)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000717")]
		[Address(RVA = "0x1AEE0D0", Offset = "0x1AEE0D0", VA = "0x1AEE0D0")]
		public static bool GetDownloadedLeaderboardEntry(SteamLeaderboardEntries_t hSteamLeaderboardEntries, int index, out LeaderboardEntry_t pLeaderboardEntry, int[] pDetails, int cDetailsMax)
		{
			return default(bool);
		}

		[Token(Token = "0x6000718")]
		[Address(RVA = "0x1AEE120", Offset = "0x1AEE120", VA = "0x1AEE120")]
		public static SteamAPICall_t UploadLeaderboardScore(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, int[] pScoreDetails, int cScoreDetailsCount)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000719")]
		[Address(RVA = "0x1AEE1F0", Offset = "0x1AEE1F0", VA = "0x1AEE1F0")]
		public static SteamAPICall_t AttachLeaderboardUGC(SteamLeaderboard_t hSteamLeaderboard, UGCHandle_t hUGC)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600071A")]
		[Address(RVA = "0x1AEE2B8", Offset = "0x1AEE2B8", VA = "0x1AEE2B8")]
		public static SteamAPICall_t GetNumberOfCurrentPlayers()
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600071B")]
		[Address(RVA = "0x1AEE360", Offset = "0x1AEE360", VA = "0x1AEE360")]
		public static SteamAPICall_t RequestGlobalAchievementPercentages()
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600071C")]
		[Address(RVA = "0x1AEE408", Offset = "0x1AEE408", VA = "0x1AEE408")]
		public static int GetMostAchievedAchievementInfo(out string pchName, uint unNameBufLen, out float pflPercent, out bool pbAchieved)
		{
			return default(int);
		}

		[Token(Token = "0x600071D")]
		[Address(RVA = "0x1AEE50C", Offset = "0x1AEE50C", VA = "0x1AEE50C")]
		public static int GetNextMostAchievedAchievementInfo(int iIteratorPrevious, out string pchName, uint unNameBufLen, out float pflPercent, out bool pbAchieved)
		{
			return default(int);
		}

		[Token(Token = "0x600071E")]
		[Address(RVA = "0x1AEE618", Offset = "0x1AEE618", VA = "0x1AEE618")]
		public static bool GetAchievementAchievedPercent(string pchName, out float pflPercent)
		{
			return default(bool);
		}

		[Token(Token = "0x600071F")]
		[Address(RVA = "0x1AEE774", Offset = "0x1AEE774", VA = "0x1AEE774")]
		public static SteamAPICall_t RequestGlobalStats(int nHistoryDays)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000720")]
		[Address(RVA = "0x1AEE824", Offset = "0x1AEE824", VA = "0x1AEE824")]
		public static bool GetGlobalStat(string pchStatName, out long pData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000721")]
		[Address(RVA = "0x1AEE980", Offset = "0x1AEE980", VA = "0x1AEE980")]
		public static bool GetGlobalStat(string pchStatName, out double pData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000722")]
		[Address(RVA = "0x1AEEADC", Offset = "0x1AEEADC", VA = "0x1AEEADC")]
		public static int GetGlobalStatHistory(string pchStatName, long[] pData, uint cubData)
		{
			return default(int);
		}

		[Token(Token = "0x6000723")]
		[Address(RVA = "0x1AEEC40", Offset = "0x1AEEC40", VA = "0x1AEEC40")]
		public static int GetGlobalStatHistory(string pchStatName, double[] pData, uint cubData)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000149")]
	public static class SteamUtils
	{
		[Token(Token = "0x6000724")]
		[Address(RVA = "0x1AEEDA4", Offset = "0x1AEEDA4", VA = "0x1AEEDA4")]
		public static uint GetSecondsSinceAppActive()
		{
			return default(uint);
		}

		[Token(Token = "0x6000725")]
		[Address(RVA = "0x1AEEDC0", Offset = "0x1AEEDC0", VA = "0x1AEEDC0")]
		public static uint GetSecondsSinceComputerActive()
		{
			return default(uint);
		}

		[Token(Token = "0x6000726")]
		[Address(RVA = "0x1AEEDDC", Offset = "0x1AEEDDC", VA = "0x1AEEDDC")]
		public static EUniverse GetConnectedUniverse()
		{
			return default(EUniverse);
		}

		[Token(Token = "0x6000727")]
		[Address(RVA = "0x1AEEDF8", Offset = "0x1AEEDF8", VA = "0x1AEEDF8")]
		public static uint GetServerRealTime()
		{
			return default(uint);
		}

		[Token(Token = "0x6000728")]
		[Address(RVA = "0x1AEEE14", Offset = "0x1AEEE14", VA = "0x1AEEE14")]
		public static string GetIPCountry()
		{
			return null;
		}

		[Token(Token = "0x6000729")]
		[Address(RVA = "0x1AEEE38", Offset = "0x1AEEE38", VA = "0x1AEEE38")]
		public static bool GetImageSize(int iImage, out uint pnWidth, out uint pnHeight)
		{
			return default(bool);
		}

		[Token(Token = "0x600072A")]
		[Address(RVA = "0x1AEEE6C", Offset = "0x1AEEE6C", VA = "0x1AEEE6C")]
		public static bool GetImageRGBA(int iImage, byte[] pubDest, int nDestBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x600072B")]
		[Address(RVA = "0x1AEEEA0", Offset = "0x1AEEEA0", VA = "0x1AEEEA0")]
		public static bool GetCSERIPPort(out uint unIP, out ushort usPort)
		{
			return default(bool);
		}

		[Token(Token = "0x600072C")]
		[Address(RVA = "0x1AEEECC", Offset = "0x1AEEECC", VA = "0x1AEEECC")]
		public static byte GetCurrentBatteryPower()
		{
			return default(byte);
		}

		[Token(Token = "0x600072D")]
		[Address(RVA = "0x1AEEEE8", Offset = "0x1AEEEE8", VA = "0x1AEEEE8")]
		public static AppId_t GetAppID()
		{
			return default(AppId_t);
		}

		[Token(Token = "0x600072E")]
		[Address(RVA = "0x1AEEF74", Offset = "0x1AEEF74", VA = "0x1AEEF74")]
		public static void SetOverlayNotificationPosition(ENotificationPosition eNotificationPosition)
		{
		}

		[Token(Token = "0x600072F")]
		[Address(RVA = "0x1AEEF98", Offset = "0x1AEEF98", VA = "0x1AEEF98")]
		public static bool IsAPICallCompleted(SteamAPICall_t hSteamAPICall, out bool pbFailed)
		{
			return default(bool);
		}

		[Token(Token = "0x6000730")]
		[Address(RVA = "0x1AEEFCC", Offset = "0x1AEEFCC", VA = "0x1AEEFCC")]
		public static ESteamAPICallFailure GetAPICallFailureReason(SteamAPICall_t hSteamAPICall)
		{
			return default(ESteamAPICallFailure);
		}

		[Token(Token = "0x6000731")]
		[Address(RVA = "0x1AEEFF8", Offset = "0x1AEEFF8", VA = "0x1AEEFF8")]
		public static bool GetAPICallResult(SteamAPICall_t hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, out bool pbFailed)
		{
			return default(bool);
		}

		[Token(Token = "0x6000732")]
		[Address(RVA = "0x1AEF048", Offset = "0x1AEF048", VA = "0x1AEF048")]
		public static uint GetIPCCallCount()
		{
			return default(uint);
		}

		[Token(Token = "0x6000733")]
		[Address(RVA = "0x1AEF064", Offset = "0x1AEF064", VA = "0x1AEF064")]
		public static void SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction)
		{
		}

		[Token(Token = "0x6000734")]
		[Address(RVA = "0x1AEF088", Offset = "0x1AEF088", VA = "0x1AEF088")]
		public static bool IsOverlayEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x6000735")]
		[Address(RVA = "0x1AEF0A4", Offset = "0x1AEF0A4", VA = "0x1AEF0A4")]
		public static bool BOverlayNeedsPresent()
		{
			return default(bool);
		}

		[Token(Token = "0x6000736")]
		[Address(RVA = "0x1AEF0C0", Offset = "0x1AEF0C0", VA = "0x1AEF0C0")]
		public static SteamAPICall_t CheckFileSignature(string szFileName)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000737")]
		[Address(RVA = "0x1AEF27C", Offset = "0x1AEF27C", VA = "0x1AEF27C")]
		public static bool ShowGamepadTextInput(EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText)
		{
			return default(bool);
		}

		[Token(Token = "0x6000738")]
		[Address(RVA = "0x1AEF528", Offset = "0x1AEF528", VA = "0x1AEF528")]
		public static uint GetEnteredGamepadTextLength()
		{
			return default(uint);
		}

		[Token(Token = "0x6000739")]
		[Address(RVA = "0x1AEF544", Offset = "0x1AEF544", VA = "0x1AEF544")]
		public static bool GetEnteredGamepadTextInput(out string pchText, uint cchText)
		{
			return default(bool);
		}

		[Token(Token = "0x600073A")]
		[Address(RVA = "0x1AEF630", Offset = "0x1AEF630", VA = "0x1AEF630")]
		public static string GetSteamUILanguage()
		{
			return null;
		}

		[Token(Token = "0x600073B")]
		[Address(RVA = "0x1AEF654", Offset = "0x1AEF654", VA = "0x1AEF654")]
		public static bool IsSteamRunningInVR()
		{
			return default(bool);
		}

		[Token(Token = "0x600073C")]
		[Address(RVA = "0x1AEF670", Offset = "0x1AEF670", VA = "0x1AEF670")]
		public static void SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset)
		{
		}

		[Token(Token = "0x600073D")]
		[Address(RVA = "0x1AEF69C", Offset = "0x1AEF69C", VA = "0x1AEF69C")]
		public static bool IsSteamInBigPictureMode()
		{
			return default(bool);
		}

		[Token(Token = "0x600073E")]
		[Address(RVA = "0x1AEF6B8", Offset = "0x1AEF6B8", VA = "0x1AEF6B8")]
		public static void StartVRDashboard()
		{
		}

		[Token(Token = "0x600073F")]
		[Address(RVA = "0x1AEF6D4", Offset = "0x1AEF6D4", VA = "0x1AEF6D4")]
		public static bool IsVRHeadsetStreamingEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x6000740")]
		[Address(RVA = "0x1AEF6F0", Offset = "0x1AEF6F0", VA = "0x1AEF6F0")]
		public static void SetVRHeadsetStreamingEnabled(bool bEnabled)
		{
		}
	}
	[Token(Token = "0x200014A")]
	public static class SteamVideo
	{
		[Token(Token = "0x6000741")]
		[Address(RVA = "0x1AEF714", Offset = "0x1AEF714", VA = "0x1AEF714")]
		public static void GetVideoURL(AppId_t unVideoAppID)
		{
		}

		[Token(Token = "0x6000742")]
		[Address(RVA = "0x1AEF738", Offset = "0x1AEF738", VA = "0x1AEF738")]
		public static bool IsBroadcasting(out int pnNumViewers)
		{
			return default(bool);
		}

		[Token(Token = "0x6000743")]
		[Address(RVA = "0x1AEF75C", Offset = "0x1AEF75C", VA = "0x1AEF75C")]
		public static void GetOPFSettings(AppId_t unVideoAppID)
		{
		}

		[Token(Token = "0x6000744")]
		[Address(RVA = "0x1AEF780", Offset = "0x1AEF780", VA = "0x1AEF780")]
		public static bool GetOPFStringForApp(AppId_t unVideoAppID, out string pchBuffer, ref int pnBufferSize)
		{
			return default(bool);
		}
	}
	[Serializable]
	[StructLayout(0)]
	[Token(Token = "0x200014B")]
	public class gameserveritem_t
	{
		[Token(Token = "0x40007A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public servernetadr_t m_NetAdr;

		[Token(Token = "0x40007A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_nPing;

		[Token(Token = "0x40007A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool m_bHadSuccessfulResponse;

		[Token(Token = "0x40007A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		public bool m_bDoNotRefresh;

		[Token(Token = "0x40007A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private byte[] m_szGameDir;

		[Token(Token = "0x40007A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private byte[] m_szMap;

		[Token(Token = "0x40007AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private byte[] m_szGameDescription;

		[Token(Token = "0x40007AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public uint m_nAppID;

		[Token(Token = "0x40007AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int m_nPlayers;

		[Token(Token = "0x40007AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int m_nMaxPlayers;

		[Token(Token = "0x40007AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int m_nBotPlayers;

		[Token(Token = "0x40007AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool m_bPassword;

		[Token(Token = "0x40007B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		public bool m_bSecure;

		[Token(Token = "0x40007B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public uint m_ulTimeLastPlayed;

		[Token(Token = "0x40007B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int m_nServerVersion;

		[Token(Token = "0x40007B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private byte[] m_szServerName;

		[Token(Token = "0x40007B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private byte[] m_szGameTags;

		[Token(Token = "0x40007B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public CSteamID m_steamID;

		[Token(Token = "0x6000745")]
		[Address(RVA = "0x1AF018C", Offset = "0x1AF018C", VA = "0x1AF018C")]
		public string GetGameDir()
		{
			return null;
		}

		[Token(Token = "0x6000746")]
		[Address(RVA = "0x1AF0238", Offset = "0x1AF0238", VA = "0x1AF0238")]
		public void SetGameDir(string dir)
		{
		}

		[Token(Token = "0x6000747")]
		[Address(RVA = "0x1AF02D4", Offset = "0x1AF02D4", VA = "0x1AF02D4")]
		public string GetMap()
		{
			return null;
		}

		[Token(Token = "0x6000748")]
		[Address(RVA = "0x1AF0380", Offset = "0x1AF0380", VA = "0x1AF0380")]
		public void SetMap(string map)
		{
		}

		[Token(Token = "0x6000749")]
		[Address(RVA = "0x1AF041C", Offset = "0x1AF041C", VA = "0x1AF041C")]
		public string GetGameDescription()
		{
			return null;
		}

		[Token(Token = "0x600074A")]
		[Address(RVA = "0x1AF04C8", Offset = "0x1AF04C8", VA = "0x1AF04C8")]
		public void SetGameDescription(string desc)
		{
		}

		[Token(Token = "0x600074B")]
		[Address(RVA = "0x1AF0564", Offset = "0x1AF0564", VA = "0x1AF0564")]
		public string GetServerName()
		{
			return null;
		}

		[Token(Token = "0x600074C")]
		[Address(RVA = "0x1AF0664", Offset = "0x1AF0664", VA = "0x1AF0664")]
		public void SetServerName(string name)
		{
		}

		[Token(Token = "0x600074D")]
		[Address(RVA = "0x1AF0700", Offset = "0x1AF0700", VA = "0x1AF0700")]
		public string GetGameTags()
		{
			return null;
		}

		[Token(Token = "0x600074E")]
		[Address(RVA = "0x1AF07AC", Offset = "0x1AF07AC", VA = "0x1AF07AC")]
		public void SetGameTags(string tags)
		{
		}

		[Token(Token = "0x600074F")]
		[Address(RVA = "0x1AF0848", Offset = "0x1AF0848", VA = "0x1AF0848")]
		public gameserveritem_t()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200014C")]
	public struct servernetadr_t
	{
		[Token(Token = "0x40007B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ushort m_usConnectionPort;

		[Token(Token = "0x40007B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		private ushort m_usQueryPort;

		[Token(Token = "0x40007B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private uint m_unIP;

		[Token(Token = "0x6000750")]
		[Address(RVA = "0x491A04", Offset = "0x491A04", VA = "0x491A04")]
		public void Init(uint ip, ushort usQueryPort, ushort usConnectionPort)
		{
		}

		[Token(Token = "0x6000751")]
		[Address(RVA = "0x491A14", Offset = "0x491A14", VA = "0x491A14")]
		public ushort GetQueryPort()
		{
			return default(ushort);
		}

		[Token(Token = "0x6000752")]
		[Address(RVA = "0x491A1C", Offset = "0x491A1C", VA = "0x491A1C")]
		public void SetQueryPort(ushort usPort)
		{
		}

		[Token(Token = "0x6000753")]
		[Address(RVA = "0x491A24", Offset = "0x491A24", VA = "0x491A24")]
		public ushort GetConnectionPort()
		{
			return default(ushort);
		}

		[Token(Token = "0x6000754")]
		[Address(RVA = "0x491A2C", Offset = "0x491A2C", VA = "0x491A2C")]
		public void SetConnectionPort(ushort usPort)
		{
		}

		[Token(Token = "0x6000755")]
		[Address(RVA = "0x491A34", Offset = "0x491A34", VA = "0x491A34")]
		public uint GetIP()
		{
			return default(uint);
		}

		[Token(Token = "0x6000756")]
		[Address(RVA = "0x491A3C", Offset = "0x491A3C", VA = "0x491A3C")]
		public void SetIP(uint unIP)
		{
		}

		[Token(Token = "0x6000757")]
		[Address(RVA = "0x491A44", Offset = "0x491A44", VA = "0x491A44")]
		public string GetConnectionAddressString()
		{
			return null;
		}

		[Token(Token = "0x6000758")]
		[Address(RVA = "0x491A50", Offset = "0x491A50", VA = "0x491A50")]
		public string GetQueryAddressString()
		{
			return null;
		}

		[Token(Token = "0x6000759")]
		[Address(RVA = "0x1AF0890", Offset = "0x1AF0890", VA = "0x1AF0890")]
		public static string ToString(uint unIP, ushort usPort)
		{
			return null;
		}

		[Token(Token = "0x600075A")]
		[Address(RVA = "0x1AF0B44", Offset = "0x1AF0B44", VA = "0x1AF0B44")]
		public static bool operator <(servernetadr_t x, servernetadr_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x600075B")]
		[Address(RVA = "0x1AF0B70", Offset = "0x1AF0B70", VA = "0x1AF0B70")]
		public static bool operator >(servernetadr_t x, servernetadr_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x600075C")]
		[Address(RVA = "0x491A5C", Offset = "0x491A5C", VA = "0x491A5C", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x600075D")]
		[Address(RVA = "0x491A64", Offset = "0x491A64", VA = "0x491A64", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600075E")]
		[Address(RVA = "0x1AF0C50", Offset = "0x1AF0C50", VA = "0x1AF0C50")]
		public static bool operator ==(servernetadr_t x, servernetadr_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x600075F")]
		[Address(RVA = "0x1AF0CC4", Offset = "0x1AF0CC4", VA = "0x1AF0CC4")]
		public static bool operator !=(servernetadr_t x, servernetadr_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000760")]
		[Address(RVA = "0x491A6C", Offset = "0x491A6C", VA = "0x491A6C")]
		public bool Equals(servernetadr_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000761")]
		[Address(RVA = "0x491AA4", Offset = "0x491AA4", VA = "0x491AA4")]
		public int CompareTo(servernetadr_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200014D")]
	public struct HSteamPipe : IEquatable<HSteamPipe>, IComparable<HSteamPipe>
	{
		[Token(Token = "0x40007B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_HSteamPipe;

		[Token(Token = "0x6000762")]
		[Address(RVA = "0x471090", Offset = "0x471090", VA = "0x471090")]
		public HSteamPipe(int value)
		{
		}

		[Token(Token = "0x6000763")]
		[Address(RVA = "0x471098", Offset = "0x471098", VA = "0x471098", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000764")]
		[Address(RVA = "0x4710A4", Offset = "0x4710A4", VA = "0x4710A4", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000765")]
		[Address(RVA = "0x4710AC", Offset = "0x4710AC", VA = "0x4710AC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000766")]
		[Address(RVA = "0xF9F0BC", Offset = "0xF9F0BC", VA = "0xF9F0BC")]
		public static bool operator ==(HSteamPipe x, HSteamPipe y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000767")]
		[Address(RVA = "0xF9F0D4", Offset = "0xF9F0D4", VA = "0xF9F0D4")]
		public static bool operator !=(HSteamPipe x, HSteamPipe y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000768")]
		[Address(RVA = "0xF9E824", Offset = "0xF9E824", VA = "0xF9E824")]
		public static explicit operator HSteamPipe(int value)
		{
			return default(HSteamPipe);
		}

		[Token(Token = "0x6000769")]
		[Address(RVA = "0xF9F0E0", Offset = "0xF9F0E0", VA = "0xF9F0E0")]
		public static explicit operator int(HSteamPipe that)
		{
			return default(int);
		}

		[Token(Token = "0x600076A")]
		[Address(RVA = "0x4710B8", Offset = "0x4710B8", VA = "0x4710B8", Slot = "4")]
		public bool Equals(HSteamPipe other)
		{
			return default(bool);
		}

		[Token(Token = "0x600076B")]
		[Address(RVA = "0x4710CC", Offset = "0x4710CC", VA = "0x4710CC", Slot = "5")]
		public int CompareTo(HSteamPipe other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200014E")]
	public struct HSteamUser : IEquatable<HSteamUser>, IComparable<HSteamUser>
	{
		[Token(Token = "0x40007BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_HSteamUser;

		[Token(Token = "0x600076C")]
		[Address(RVA = "0x4710D8", Offset = "0x4710D8", VA = "0x4710D8")]
		public HSteamUser(int value)
		{
		}

		[Token(Token = "0x600076D")]
		[Address(RVA = "0x4710E0", Offset = "0x4710E0", VA = "0x4710E0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600076E")]
		[Address(RVA = "0x4710EC", Offset = "0x4710EC", VA = "0x4710EC", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x600076F")]
		[Address(RVA = "0x4710F4", Offset = "0x4710F4", VA = "0x4710F4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000770")]
		[Address(RVA = "0xF9F1A0", Offset = "0xF9F1A0", VA = "0xF9F1A0")]
		public static bool operator ==(HSteamUser x, HSteamUser y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000771")]
		[Address(RVA = "0xF9F1B8", Offset = "0xF9F1B8", VA = "0xF9F1B8")]
		public static bool operator !=(HSteamUser x, HSteamUser y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000772")]
		[Address(RVA = "0xF9E844", Offset = "0xF9E844", VA = "0xF9E844")]
		public static explicit operator HSteamUser(int value)
		{
			return default(HSteamUser);
		}

		[Token(Token = "0x6000773")]
		[Address(RVA = "0xF9F1C4", Offset = "0xF9F1C4", VA = "0xF9F1C4")]
		public static explicit operator int(HSteamUser that)
		{
			return default(int);
		}

		[Token(Token = "0x6000774")]
		[Address(RVA = "0x471100", Offset = "0x471100", VA = "0x471100", Slot = "4")]
		public bool Equals(HSteamUser other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000775")]
		[Address(RVA = "0x471114", Offset = "0x471114", VA = "0x471114", Slot = "5")]
		public int CompareTo(HSteamUser other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200014F")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x395EF4", Offset = "0x395EF4")]
	public delegate void SteamAPIWarningMessageHook_t(int nSeverity, StringBuilder pchDebugText);
	[Token(Token = "0x2000150")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x395F08", Offset = "0x395F08")]
	public delegate void SteamAPI_CheckCallbackRegistered_t(int iCallbackNum);
	[Serializable]
	[Token(Token = "0x2000151")]
	public struct CGameID : IEquatable<CGameID>, IComparable<CGameID>
	{
		[Token(Token = "0x2000346")]
		public enum EGameIDType
		{
			[Token(Token = "0x400135A")]
			k_EGameIDTypeApp,
			[Token(Token = "0x400135B")]
			k_EGameIDTypeGameMod,
			[Token(Token = "0x400135C")]
			k_EGameIDTypeShortcut,
			[Token(Token = "0x400135D")]
			k_EGameIDTypeP2P
		}

		[Token(Token = "0x40007BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_GameID;

		[Token(Token = "0x600077E")]
		[Address(RVA = "0x47037C", Offset = "0x47037C", VA = "0x47037C")]
		public CGameID(ulong GameID)
		{
		}

		[Token(Token = "0x600077F")]
		[Address(RVA = "0x47038C", Offset = "0x47038C", VA = "0x47038C")]
		public CGameID(AppId_t nAppID)
		{
		}

		[Token(Token = "0x6000780")]
		[Address(RVA = "0x47039C", Offset = "0x47039C", VA = "0x47039C")]
		public CGameID(AppId_t nAppID, uint nModID)
		{
		}

		[Token(Token = "0x6000781")]
		[Address(RVA = "0x4703D4", Offset = "0x4703D4", VA = "0x4703D4")]
		public bool IsSteamApp()
		{
			return default(bool);
		}

		[Token(Token = "0x6000782")]
		[Address(RVA = "0x4703E4", Offset = "0x4703E4", VA = "0x4703E4")]
		public bool IsMod()
		{
			return default(bool);
		}

		[Token(Token = "0x6000783")]
		[Address(RVA = "0x4703FC", Offset = "0x4703FC", VA = "0x4703FC")]
		public bool IsShortcut()
		{
			return default(bool);
		}

		[Token(Token = "0x6000784")]
		[Address(RVA = "0x470414", Offset = "0x470414", VA = "0x470414")]
		public bool IsP2PFile()
		{
			return default(bool);
		}

		[Token(Token = "0x6000785")]
		[Address(RVA = "0x47042C", Offset = "0x47042C", VA = "0x47042C")]
		public AppId_t AppID()
		{
			return default(AppId_t);
		}

		[Token(Token = "0x6000786")]
		[Address(RVA = "0x470438", Offset = "0x470438", VA = "0x470438")]
		public EGameIDType Type()
		{
			return default(EGameIDType);
		}

		[Token(Token = "0x6000787")]
		[Address(RVA = "0x470440", Offset = "0x470440", VA = "0x470440")]
		public uint ModID()
		{
			return default(uint);
		}

		[Token(Token = "0x6000788")]
		[Address(RVA = "0x470448", Offset = "0x470448", VA = "0x470448")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x6000789")]
		[Address(RVA = "0x470450", Offset = "0x470450", VA = "0x470450")]
		public void Reset()
		{
		}

		[Token(Token = "0x600078A")]
		[Address(RVA = "0x470460", Offset = "0x470460", VA = "0x470460")]
		public void Set(ulong GameID)
		{
		}

		[Token(Token = "0x600078B")]
		[Address(RVA = "0x470470", Offset = "0x470470", VA = "0x470470")]
		private void SetAppID(AppId_t other)
		{
		}

		[Token(Token = "0x600078C")]
		[Address(RVA = "0x470478", Offset = "0x470478", VA = "0x470478")]
		private void SetType(EGameIDType other)
		{
		}

		[Token(Token = "0x600078D")]
		[Address(RVA = "0x470480", Offset = "0x470480", VA = "0x470480")]
		private void SetModID(uint other)
		{
		}

		[Token(Token = "0x600078E")]
		[Address(RVA = "0x470488", Offset = "0x470488", VA = "0x470488", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600078F")]
		[Address(RVA = "0x470494", Offset = "0x470494", VA = "0x470494", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000790")]
		[Address(RVA = "0x47049C", Offset = "0x47049C", VA = "0x47049C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000791")]
		[Address(RVA = "0xF9D2DC", Offset = "0xF9D2DC", VA = "0xF9D2DC")]
		public static bool operator ==(CGameID x, CGameID y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000792")]
		[Address(RVA = "0xF9D2FC", Offset = "0xF9D2FC", VA = "0xF9D2FC")]
		public static bool operator !=(CGameID x, CGameID y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000793")]
		[Address(RVA = "0xF9D310", Offset = "0xF9D310", VA = "0xF9D310")]
		public static explicit operator CGameID(ulong value)
		{
			return default(CGameID);
		}

		[Token(Token = "0x6000794")]
		[Address(RVA = "0xF9D320", Offset = "0xF9D320", VA = "0xF9D320")]
		public static explicit operator ulong(CGameID that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000795")]
		[Address(RVA = "0x4704A8", Offset = "0x4704A8", VA = "0x4704A8", Slot = "4")]
		public bool Equals(CGameID other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000796")]
		[Address(RVA = "0x4704C4", Offset = "0x4704C4", VA = "0x4704C4", Slot = "5")]
		public int CompareTo(CGameID other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000152")]
	public struct CSteamID : IEquatable<CSteamID>, IComparable<CSteamID>
	{
		[Token(Token = "0x40007BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly CSteamID Nil;

		[Token(Token = "0x40007BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly CSteamID OutofDateGS;

		[Token(Token = "0x40007BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly CSteamID LanModeGS;

		[Token(Token = "0x40007BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly CSteamID NotInitYetGS;

		[Token(Token = "0x40007C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly CSteamID NonSteamGS;

		[Token(Token = "0x40007C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamID;

		[Token(Token = "0x6000797")]
		[Address(RVA = "0x4704E8", Offset = "0x4704E8", VA = "0x4704E8")]
		public CSteamID(AccountID_t unAccountID, EUniverse eUniverse, EAccountType eAccountType)
		{
		}

		[Token(Token = "0x6000798")]
		[Address(RVA = "0x470510", Offset = "0x470510", VA = "0x470510")]
		public CSteamID(AccountID_t unAccountID, uint unAccountInstance, EUniverse eUniverse, EAccountType eAccountType)
		{
		}

		[Token(Token = "0x6000799")]
		[Address(RVA = "0x470530", Offset = "0x470530", VA = "0x470530")]
		public CSteamID(ulong ulSteamID)
		{
		}

		[Token(Token = "0x600079A")]
		[Address(RVA = "0x47053C", Offset = "0x47053C", VA = "0x47053C")]
		public void Set(AccountID_t unAccountID, EUniverse eUniverse, EAccountType eAccountType)
		{
		}

		[Token(Token = "0x600079B")]
		[Address(RVA = "0x470578", Offset = "0x470578", VA = "0x470578")]
		public void InstancedSet(AccountID_t unAccountID, uint unInstance, EUniverse eUniverse, EAccountType eAccountType)
		{
		}

		[Token(Token = "0x600079C")]
		[Address(RVA = "0x470598", Offset = "0x470598", VA = "0x470598")]
		public void Clear()
		{
		}

		[Token(Token = "0x600079D")]
		[Address(RVA = "0x4705A8", Offset = "0x4705A8", VA = "0x4705A8")]
		public void CreateBlankAnonLogon(EUniverse eUniverse)
		{
		}

		[Token(Token = "0x600079E")]
		[Address(RVA = "0x4705C0", Offset = "0x4705C0", VA = "0x4705C0")]
		public void CreateBlankAnonUserLogon(EUniverse eUniverse)
		{
		}

		[Token(Token = "0x600079F")]
		[Address(RVA = "0x4705D8", Offset = "0x4705D8", VA = "0x4705D8")]
		public bool BBlankAnonAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x60007A0")]
		[Address(RVA = "0x470614", Offset = "0x470614", VA = "0x470614")]
		public bool BGameServerAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x60007A1")]
		[Address(RVA = "0x470630", Offset = "0x470630", VA = "0x470630")]
		public bool BPersistentGameServerAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x60007A2")]
		[Address(RVA = "0x470648", Offset = "0x470648", VA = "0x470648")]
		public bool BAnonGameServerAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x60007A3")]
		[Address(RVA = "0x470660", Offset = "0x470660", VA = "0x470660")]
		public bool BContentServerAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x60007A4")]
		[Address(RVA = "0x470678", Offset = "0x470678", VA = "0x470678")]
		public bool BClanAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x60007A5")]
		[Address(RVA = "0x470690", Offset = "0x470690", VA = "0x470690")]
		public bool BChatAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x60007A6")]
		[Address(RVA = "0x4706A8", Offset = "0x4706A8", VA = "0x4706A8")]
		public bool IsLobby()
		{
			return default(bool);
		}

		[Token(Token = "0x60007A7")]
		[Address(RVA = "0x4706C0", Offset = "0x4706C0", VA = "0x4706C0")]
		public bool BIndividualAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x60007A8")]
		[Address(RVA = "0x4706E0", Offset = "0x4706E0", VA = "0x4706E0")]
		public bool BAnonAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x60007A9")]
		[Address(RVA = "0x470708", Offset = "0x470708", VA = "0x470708")]
		public bool BAnonUserAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x60007AA")]
		[Address(RVA = "0x470720", Offset = "0x470720", VA = "0x470720")]
		public bool BConsoleUserAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x60007AB")]
		[Address(RVA = "0x470738", Offset = "0x470738", VA = "0x470738")]
		public void SetAccountID(AccountID_t other)
		{
		}

		[Token(Token = "0x60007AC")]
		[Address(RVA = "0x470740", Offset = "0x470740", VA = "0x470740")]
		public void SetAccountInstance(uint other)
		{
		}

		[Token(Token = "0x60007AD")]
		[Address(RVA = "0x470750", Offset = "0x470750", VA = "0x470750")]
		public void SetEAccountType(EAccountType other)
		{
		}

		[Token(Token = "0x60007AE")]
		[Address(RVA = "0x470768", Offset = "0x470768", VA = "0x470768")]
		public void SetEUniverse(EUniverse other)
		{
		}

		[Token(Token = "0x60007AF")]
		[Address(RVA = "0x470770", Offset = "0x470770", VA = "0x470770")]
		public void ClearIndividualInstance()
		{
		}

		[Token(Token = "0x60007B0")]
		[Address(RVA = "0x470798", Offset = "0x470798", VA = "0x470798")]
		public bool HasNoIndividualInstance()
		{
			return default(bool);
		}

		[Token(Token = "0x60007B1")]
		[Address(RVA = "0x4707C0", Offset = "0x4707C0", VA = "0x4707C0")]
		public AccountID_t GetAccountID()
		{
			return default(AccountID_t);
		}

		[Token(Token = "0x60007B2")]
		[Address(RVA = "0x4707C8", Offset = "0x4707C8", VA = "0x4707C8")]
		public uint GetUnAccountInstance()
		{
			return default(uint);
		}

		[Token(Token = "0x60007B3")]
		[Address(RVA = "0x4707D4", Offset = "0x4707D4", VA = "0x4707D4")]
		public EAccountType GetEAccountType()
		{
			return default(EAccountType);
		}

		[Token(Token = "0x60007B4")]
		[Address(RVA = "0x4707E0", Offset = "0x4707E0", VA = "0x4707E0")]
		public EUniverse GetEUniverse()
		{
			return default(EUniverse);
		}

		[Token(Token = "0x60007B5")]
		[Address(RVA = "0x4707E8", Offset = "0x4707E8", VA = "0x4707E8")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x60007B6")]
		[Address(RVA = "0x4707F0", Offset = "0x4707F0", VA = "0x4707F0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60007B7")]
		[Address(RVA = "0x4707FC", Offset = "0x4707FC", VA = "0x4707FC", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60007B8")]
		[Address(RVA = "0x470804", Offset = "0x470804", VA = "0x470804", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60007B9")]
		[Address(RVA = "0xF9D7D4", Offset = "0xF9D7D4", VA = "0xF9D7D4")]
		public static bool operator ==(CSteamID x, CSteamID y)
		{
			return default(bool);
		}

		[Token(Token = "0x60007BA")]
		[Address(RVA = "0xF9D7F4", Offset = "0xF9D7F4", VA = "0xF9D7F4")]
		public static bool operator !=(CSteamID x, CSteamID y)
		{
			return default(bool);
		}

		[Token(Token = "0x60007BB")]
		[Address(RVA = "0xF9D880", Offset = "0xF9D880", VA = "0xF9D880")]
		public static explicit operator CSteamID(ulong value)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60007BC")]
		[Address(RVA = "0xF9D890", Offset = "0xF9D890", VA = "0xF9D890")]
		public static explicit operator ulong(CSteamID that)
		{
			return default(ulong);
		}

		[Token(Token = "0x60007BD")]
		[Address(RVA = "0x470810", Offset = "0x470810", VA = "0x470810", Slot = "4")]
		public bool Equals(CSteamID other)
		{
			return default(bool);
		}

		[Token(Token = "0x60007BE")]
		[Address(RVA = "0x470830", Offset = "0x470830", VA = "0x470830", Slot = "5")]
		public int CompareTo(CSteamID other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000153")]
	public struct HAuthTicket : IEquatable<HAuthTicket>, IComparable<HAuthTicket>
	{
		[Token(Token = "0x40007C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HAuthTicket Invalid;

		[Token(Token = "0x40007C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_HAuthTicket;

		[Token(Token = "0x60007C0")]
		[Address(RVA = "0x470F84", Offset = "0x470F84", VA = "0x470F84")]
		public HAuthTicket(uint value)
		{
		}

		[Token(Token = "0x60007C1")]
		[Address(RVA = "0x470F8C", Offset = "0x470F8C", VA = "0x470F8C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60007C2")]
		[Address(RVA = "0x470F98", Offset = "0x470F98", VA = "0x470F98", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60007C3")]
		[Address(RVA = "0x470FA0", Offset = "0x470FA0", VA = "0x470FA0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60007C4")]
		[Address(RVA = "0xF9E92C", Offset = "0xF9E92C", VA = "0xF9E92C")]
		public static bool operator ==(HAuthTicket x, HAuthTicket y)
		{
			return default(bool);
		}

		[Token(Token = "0x60007C5")]
		[Address(RVA = "0xF9E944", Offset = "0xF9E944", VA = "0xF9E944")]
		public static bool operator !=(HAuthTicket x, HAuthTicket y)
		{
			return default(bool);
		}

		[Token(Token = "0x60007C6")]
		[Address(RVA = "0xF9E9C0", Offset = "0xF9E9C0", VA = "0xF9E9C0")]
		public static explicit operator HAuthTicket(uint value)
		{
			return default(HAuthTicket);
		}

		[Token(Token = "0x60007C7")]
		[Address(RVA = "0xF9E9C4", Offset = "0xF9E9C4", VA = "0xF9E9C4")]
		public static explicit operator uint(HAuthTicket that)
		{
			return default(uint);
		}

		[Token(Token = "0x60007C8")]
		[Address(RVA = "0x470FAC", Offset = "0x470FAC", VA = "0x470FAC", Slot = "4")]
		public bool Equals(HAuthTicket other)
		{
			return default(bool);
		}

		[Token(Token = "0x60007C9")]
		[Address(RVA = "0x470FC0", Offset = "0x470FC0", VA = "0x470FC0", Slot = "5")]
		public int CompareTo(HAuthTicket other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000154")]
	public struct ControllerActionSetHandle_t : IEquatable<ControllerActionSetHandle_t>, IComparable<ControllerActionSetHandle_t>
	{
		[Token(Token = "0x40007C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ControllerActionSetHandle;

		[Token(Token = "0x60007CB")]
		[Address(RVA = "0x4708CC", Offset = "0x4708CC", VA = "0x4708CC")]
		public ControllerActionSetHandle_t(ulong value)
		{
		}

		[Token(Token = "0x60007CC")]
		[Address(RVA = "0x4708DC", Offset = "0x4708DC", VA = "0x4708DC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60007CD")]
		[Address(RVA = "0x4708E8", Offset = "0x4708E8", VA = "0x4708E8", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60007CE")]
		[Address(RVA = "0x4708F0", Offset = "0x4708F0", VA = "0x4708F0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60007CF")]
		[Address(RVA = "0xF9DD5C", Offset = "0xF9DD5C", VA = "0xF9DD5C")]
		public static bool operator ==(ControllerActionSetHandle_t x, ControllerActionSetHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60007D0")]
		[Address(RVA = "0xF9DD7C", Offset = "0xF9DD7C", VA = "0xF9DD7C")]
		public static bool operator !=(ControllerActionSetHandle_t x, ControllerActionSetHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60007D1")]
		[Address(RVA = "0xF9DD90", Offset = "0xF9DD90", VA = "0xF9DD90")]
		public static explicit operator ControllerActionSetHandle_t(ulong value)
		{
			return default(ControllerActionSetHandle_t);
		}

		[Token(Token = "0x60007D2")]
		[Address(RVA = "0xF9DDA0", Offset = "0xF9DDA0", VA = "0xF9DDA0")]
		public static explicit operator ulong(ControllerActionSetHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x60007D3")]
		[Address(RVA = "0x4708FC", Offset = "0x4708FC", VA = "0x4708FC", Slot = "4")]
		public bool Equals(ControllerActionSetHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x60007D4")]
		[Address(RVA = "0x470918", Offset = "0x470918", VA = "0x470918", Slot = "5")]
		public int CompareTo(ControllerActionSetHandle_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000155")]
	public struct ControllerAnalogActionHandle_t : IEquatable<ControllerAnalogActionHandle_t>, IComparable<ControllerAnalogActionHandle_t>
	{
		[Token(Token = "0x40007C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ControllerAnalogActionHandle;

		[Token(Token = "0x60007D5")]
		[Address(RVA = "0x47093C", Offset = "0x47093C", VA = "0x47093C")]
		public ControllerAnalogActionHandle_t(ulong value)
		{
		}

		[Token(Token = "0x60007D6")]
		[Address(RVA = "0x47094C", Offset = "0x47094C", VA = "0x47094C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60007D7")]
		[Address(RVA = "0x470958", Offset = "0x470958", VA = "0x470958", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60007D8")]
		[Address(RVA = "0x470960", Offset = "0x470960", VA = "0x470960", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60007D9")]
		[Address(RVA = "0xF9DE90", Offset = "0xF9DE90", VA = "0xF9DE90")]
		public static bool operator ==(ControllerAnalogActionHandle_t x, ControllerAnalogActionHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60007DA")]
		[Address(RVA = "0xF9DEB0", Offset = "0xF9DEB0", VA = "0xF9DEB0")]
		public static bool operator !=(ControllerAnalogActionHandle_t x, ControllerAnalogActionHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60007DB")]
		[Address(RVA = "0xF9DEC4", Offset = "0xF9DEC4", VA = "0xF9DEC4")]
		public static explicit operator ControllerAnalogActionHandle_t(ulong value)
		{
			return default(ControllerAnalogActionHandle_t);
		}

		[Token(Token = "0x60007DC")]
		[Address(RVA = "0xF9DED4", Offset = "0xF9DED4", VA = "0xF9DED4")]
		public static explicit operator ulong(ControllerAnalogActionHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x60007DD")]
		[Address(RVA = "0x47096C", Offset = "0x47096C", VA = "0x47096C", Slot = "4")]
		public bool Equals(ControllerAnalogActionHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x60007DE")]
		[Address(RVA = "0x470988", Offset = "0x470988", VA = "0x470988", Slot = "5")]
		public int CompareTo(ControllerAnalogActionHandle_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000156")]
	public struct ControllerDigitalActionHandle_t : IEquatable<ControllerDigitalActionHandle_t>, IComparable<ControllerDigitalActionHandle_t>
	{
		[Token(Token = "0x40007C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ControllerDigitalActionHandle;

		[Token(Token = "0x60007DF")]
		[Address(RVA = "0x4709AC", Offset = "0x4709AC", VA = "0x4709AC")]
		public ControllerDigitalActionHandle_t(ulong value)
		{
		}

		[Token(Token = "0x60007E0")]
		[Address(RVA = "0x4709BC", Offset = "0x4709BC", VA = "0x4709BC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60007E1")]
		[Address(RVA = "0x4709C8", Offset = "0x4709C8", VA = "0x4709C8", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60007E2")]
		[Address(RVA = "0x4709D0", Offset = "0x4709D0", VA = "0x4709D0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60007E3")]
		[Address(RVA = "0xF9DFC4", Offset = "0xF9DFC4", VA = "0xF9DFC4")]
		public static bool operator ==(ControllerDigitalActionHandle_t x, ControllerDigitalActionHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60007E4")]
		[Address(RVA = "0xF9DFE4", Offset = "0xF9DFE4", VA = "0xF9DFE4")]
		public static bool operator !=(ControllerDigitalActionHandle_t x, ControllerDigitalActionHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60007E5")]
		[Address(RVA = "0xF9DFF8", Offset = "0xF9DFF8", VA = "0xF9DFF8")]
		public static explicit operator ControllerDigitalActionHandle_t(ulong value)
		{
			return default(ControllerDigitalActionHandle_t);
		}

		[Token(Token = "0x60007E6")]
		[Address(RVA = "0xF9E008", Offset = "0xF9E008", VA = "0xF9E008")]
		public static explicit operator ulong(ControllerDigitalActionHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x60007E7")]
		[Address(RVA = "0x4709DC", Offset = "0x4709DC", VA = "0x4709DC", Slot = "4")]
		public bool Equals(ControllerDigitalActionHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x60007E8")]
		[Address(RVA = "0x4709F8", Offset = "0x4709F8", VA = "0x4709F8", Slot = "5")]
		public int CompareTo(ControllerDigitalActionHandle_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000157")]
	public struct ControllerHandle_t : IEquatable<ControllerHandle_t>, IComparable<ControllerHandle_t>
	{
		[Token(Token = "0x40007C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ControllerHandle;

		[Token(Token = "0x60007E9")]
		[Address(RVA = "0x470A1C", Offset = "0x470A1C", VA = "0x470A1C")]
		public ControllerHandle_t(ulong value)
		{
		}

		[Token(Token = "0x60007EA")]
		[Address(RVA = "0x470A2C", Offset = "0x470A2C", VA = "0x470A2C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60007EB")]
		[Address(RVA = "0x470A38", Offset = "0x470A38", VA = "0x470A38", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60007EC")]
		[Address(RVA = "0x470A40", Offset = "0x470A40", VA = "0x470A40", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60007ED")]
		[Address(RVA = "0xF9E0F8", Offset = "0xF9E0F8", VA = "0xF9E0F8")]
		public static bool operator ==(ControllerHandle_t x, ControllerHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60007EE")]
		[Address(RVA = "0xF9E118", Offset = "0xF9E118", VA = "0xF9E118")]
		public static bool operator !=(ControllerHandle_t x, ControllerHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60007EF")]
		[Address(RVA = "0xF9E12C", Offset = "0xF9E12C", VA = "0xF9E12C")]
		public static explicit operator ControllerHandle_t(ulong value)
		{
			return default(ControllerHandle_t);
		}

		[Token(Token = "0x60007F0")]
		[Address(RVA = "0xF9E13C", Offset = "0xF9E13C", VA = "0xF9E13C")]
		public static explicit operator ulong(ControllerHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x60007F1")]
		[Address(RVA = "0x470A4C", Offset = "0x470A4C", VA = "0x470A4C", Slot = "4")]
		public bool Equals(ControllerHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x60007F2")]
		[Address(RVA = "0x470A68", Offset = "0x470A68", VA = "0x470A68", Slot = "5")]
		public int CompareTo(ControllerHandle_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000158")]
	public struct FriendsGroupID_t : IEquatable<FriendsGroupID_t>, IComparable<FriendsGroupID_t>
	{
		[Token(Token = "0x40007C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly FriendsGroupID_t Invalid;

		[Token(Token = "0x40007C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public short m_FriendsGroupID;

		[Token(Token = "0x60007F3")]
		[Address(RVA = "0x470D5C", Offset = "0x470D5C", VA = "0x470D5C")]
		public FriendsGroupID_t(short value)
		{
		}

		[Token(Token = "0x60007F4")]
		[Address(RVA = "0x470D64", Offset = "0x470D64", VA = "0x470D64", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60007F5")]
		[Address(RVA = "0x470D70", Offset = "0x470D70", VA = "0x470D70", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60007F6")]
		[Address(RVA = "0x470D78", Offset = "0x470D78", VA = "0x470D78", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60007F7")]
		[Address(RVA = "0xF9E468", Offset = "0xF9E468", VA = "0xF9E468")]
		public static bool operator ==(FriendsGroupID_t x, FriendsGroupID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60007F8")]
		[Address(RVA = "0xF9E488", Offset = "0xF9E488", VA = "0xF9E488")]
		public static bool operator !=(FriendsGroupID_t x, FriendsGroupID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60007F9")]
		[Address(RVA = "0xF9E50C", Offset = "0xF9E50C", VA = "0xF9E50C")]
		public static explicit operator FriendsGroupID_t(short value)
		{
			return default(FriendsGroupID_t);
		}

		[Token(Token = "0x60007FA")]
		[Address(RVA = "0xF9E510", Offset = "0xF9E510", VA = "0xF9E510")]
		public static explicit operator short(FriendsGroupID_t that)
		{
			return default(short);
		}

		[Token(Token = "0x60007FB")]
		[Address(RVA = "0x470D84", Offset = "0x470D84", VA = "0x470D84", Slot = "4")]
		public bool Equals(FriendsGroupID_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x60007FC")]
		[Address(RVA = "0x470D9C", Offset = "0x470D9C", VA = "0x470D9C", Slot = "5")]
		public int CompareTo(FriendsGroupID_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000159")]
	public struct HHTMLBrowser : IEquatable<HHTMLBrowser>, IComparable<HHTMLBrowser>
	{
		[Token(Token = "0x40007CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HHTMLBrowser Invalid;

		[Token(Token = "0x40007CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_HHTMLBrowser;

		[Token(Token = "0x60007FE")]
		[Address(RVA = "0x470FCC", Offset = "0x470FCC", VA = "0x470FCC")]
		public HHTMLBrowser(uint value)
		{
		}

		[Token(Token = "0x60007FF")]
		[Address(RVA = "0x470FD4", Offset = "0x470FD4", VA = "0x470FD4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000800")]
		[Address(RVA = "0x470FE0", Offset = "0x470FE0", VA = "0x470FE0", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000801")]
		[Address(RVA = "0x470FE8", Offset = "0x470FE8", VA = "0x470FE8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000802")]
		[Address(RVA = "0xF9EB24", Offset = "0xF9EB24", VA = "0xF9EB24")]
		public static bool operator ==(HHTMLBrowser x, HHTMLBrowser y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000803")]
		[Address(RVA = "0xF9EB3C", Offset = "0xF9EB3C", VA = "0xF9EB3C")]
		public static bool operator !=(HHTMLBrowser x, HHTMLBrowser y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000804")]
		[Address(RVA = "0xF9EBB8", Offset = "0xF9EBB8", VA = "0xF9EBB8")]
		public static explicit operator HHTMLBrowser(uint value)
		{
			return default(HHTMLBrowser);
		}

		[Token(Token = "0x6000805")]
		[Address(RVA = "0xF9EBBC", Offset = "0xF9EBBC", VA = "0xF9EBBC")]
		public static explicit operator uint(HHTMLBrowser that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000806")]
		[Address(RVA = "0x470FF4", Offset = "0x470FF4", VA = "0x470FF4", Slot = "4")]
		public bool Equals(HHTMLBrowser other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000807")]
		[Address(RVA = "0x471008", Offset = "0x471008", VA = "0x471008", Slot = "5")]
		public int CompareTo(HHTMLBrowser other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200015A")]
	public struct HTTPCookieContainerHandle : IEquatable<HTTPCookieContainerHandle>, IComparable<HTTPCookieContainerHandle>
	{
		[Token(Token = "0x40007CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HTTPCookieContainerHandle Invalid;

		[Token(Token = "0x40007CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_HTTPCookieContainerHandle;

		[Token(Token = "0x6000809")]
		[Address(RVA = "0x471858", Offset = "0x471858", VA = "0x471858")]
		public HTTPCookieContainerHandle(uint value)
		{
		}

		[Token(Token = "0x600080A")]
		[Address(RVA = "0x471860", Offset = "0x471860", VA = "0x471860", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600080B")]
		[Address(RVA = "0x47186C", Offset = "0x47186C", VA = "0x47186C", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x600080C")]
		[Address(RVA = "0x471874", Offset = "0x471874", VA = "0x471874", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600080D")]
		[Address(RVA = "0xF9F2C8", Offset = "0xF9F2C8", VA = "0xF9F2C8")]
		public static bool operator ==(HTTPCookieContainerHandle x, HTTPCookieContainerHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x600080E")]
		[Address(RVA = "0xF9F2E0", Offset = "0xF9F2E0", VA = "0xF9F2E0")]
		public static bool operator !=(HTTPCookieContainerHandle x, HTTPCookieContainerHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x600080F")]
		[Address(RVA = "0xF9F35C", Offset = "0xF9F35C", VA = "0xF9F35C")]
		public static explicit operator HTTPCookieContainerHandle(uint value)
		{
			return default(HTTPCookieContainerHandle);
		}

		[Token(Token = "0x6000810")]
		[Address(RVA = "0xF9F360", Offset = "0xF9F360", VA = "0xF9F360")]
		public static explicit operator uint(HTTPCookieContainerHandle that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000811")]
		[Address(RVA = "0x471880", Offset = "0x471880", VA = "0x471880", Slot = "4")]
		public bool Equals(HTTPCookieContainerHandle other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000812")]
		[Address(RVA = "0x471894", Offset = "0x471894", VA = "0x471894", Slot = "5")]
		public int CompareTo(HTTPCookieContainerHandle other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200015B")]
	public struct HTTPRequestHandle : IEquatable<HTTPRequestHandle>, IComparable<HTTPRequestHandle>
	{
		[Token(Token = "0x40007CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HTTPRequestHandle Invalid;

		[Token(Token = "0x40007CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_HTTPRequestHandle;

		[Token(Token = "0x6000814")]
		[Address(RVA = "0x4718A0", Offset = "0x4718A0", VA = "0x4718A0")]
		public HTTPRequestHandle(uint value)
		{
		}

		[Token(Token = "0x6000815")]
		[Address(RVA = "0x4718A8", Offset = "0x4718A8", VA = "0x4718A8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000816")]
		[Address(RVA = "0x4718B4", Offset = "0x4718B4", VA = "0x4718B4", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000817")]
		[Address(RVA = "0x4718BC", Offset = "0x4718BC", VA = "0x4718BC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000818")]
		[Address(RVA = "0xF9F4C0", Offset = "0xF9F4C0", VA = "0xF9F4C0")]
		public static bool operator ==(HTTPRequestHandle x, HTTPRequestHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000819")]
		[Address(RVA = "0xF9F4D8", Offset = "0xF9F4D8", VA = "0xF9F4D8")]
		public static bool operator !=(HTTPRequestHandle x, HTTPRequestHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x600081A")]
		[Address(RVA = "0xF9F554", Offset = "0xF9F554", VA = "0xF9F554")]
		public static explicit operator HTTPRequestHandle(uint value)
		{
			return default(HTTPRequestHandle);
		}

		[Token(Token = "0x600081B")]
		[Address(RVA = "0xF9F558", Offset = "0xF9F558", VA = "0xF9F558")]
		public static explicit operator uint(HTTPRequestHandle that)
		{
			return default(uint);
		}

		[Token(Token = "0x600081C")]
		[Address(RVA = "0x4718C8", Offset = "0x4718C8", VA = "0x4718C8", Slot = "4")]
		public bool Equals(HTTPRequestHandle other)
		{
			return default(bool);
		}

		[Token(Token = "0x600081D")]
		[Address(RVA = "0x4718DC", Offset = "0x4718DC", VA = "0x4718DC", Slot = "5")]
		public int CompareTo(HTTPRequestHandle other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200015C")]
	public struct SteamInventoryResult_t : IEquatable<SteamInventoryResult_t>, IComparable<SteamInventoryResult_t>
	{
		[Token(Token = "0x40007D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly SteamInventoryResult_t Invalid;

		[Token(Token = "0x40007D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_SteamInventoryResult;

		[Token(Token = "0x600081F")]
		[Address(RVA = "0x47F1D8", Offset = "0x47F1D8", VA = "0x47F1D8")]
		public SteamInventoryResult_t(int value)
		{
		}

		[Token(Token = "0x6000820")]
		[Address(RVA = "0x47F1E0", Offset = "0x47F1E0", VA = "0x47F1E0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000821")]
		[Address(RVA = "0x47F1EC", Offset = "0x47F1EC", VA = "0x47F1EC", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000822")]
		[Address(RVA = "0x47F1F4", Offset = "0x47F1F4", VA = "0x47F1F4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000823")]
		[Address(RVA = "0x150F0A8", Offset = "0x150F0A8", VA = "0x150F0A8")]
		public static bool operator ==(SteamInventoryResult_t x, SteamInventoryResult_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000824")]
		[Address(RVA = "0x150F0C0", Offset = "0x150F0C0", VA = "0x150F0C0")]
		public static bool operator !=(SteamInventoryResult_t x, SteamInventoryResult_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000825")]
		[Address(RVA = "0x150F13C", Offset = "0x150F13C", VA = "0x150F13C")]
		public static explicit operator SteamInventoryResult_t(int value)
		{
			return default(SteamInventoryResult_t);
		}

		[Token(Token = "0x6000826")]
		[Address(RVA = "0x150F140", Offset = "0x150F140", VA = "0x150F140")]
		public static explicit operator int(SteamInventoryResult_t that)
		{
			return default(int);
		}

		[Token(Token = "0x6000827")]
		[Address(RVA = "0x47F200", Offset = "0x47F200", VA = "0x47F200", Slot = "4")]
		public bool Equals(SteamInventoryResult_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000828")]
		[Address(RVA = "0x47F214", Offset = "0x47F214", VA = "0x47F214", Slot = "5")]
		public int CompareTo(SteamInventoryResult_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200015D")]
	public struct SteamItemDef_t : IEquatable<SteamItemDef_t>, IComparable<SteamItemDef_t>
	{
		[Token(Token = "0x40007D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_SteamItemDef;

		[Token(Token = "0x600082A")]
		[Address(RVA = "0x47F220", Offset = "0x47F220", VA = "0x47F220")]
		public SteamItemDef_t(int value)
		{
		}

		[Token(Token = "0x600082B")]
		[Address(RVA = "0x47F228", Offset = "0x47F228", VA = "0x47F228", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600082C")]
		[Address(RVA = "0x47F234", Offset = "0x47F234", VA = "0x47F234", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x600082D")]
		[Address(RVA = "0x47F23C", Offset = "0x47F23C", VA = "0x47F23C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600082E")]
		[Address(RVA = "0x150F25C", Offset = "0x150F25C", VA = "0x150F25C")]
		public static bool operator ==(SteamItemDef_t x, SteamItemDef_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x600082F")]
		[Address(RVA = "0x150F274", Offset = "0x150F274", VA = "0x150F274")]
		public static bool operator !=(SteamItemDef_t x, SteamItemDef_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000830")]
		[Address(RVA = "0x150F280", Offset = "0x150F280", VA = "0x150F280")]
		public static explicit operator SteamItemDef_t(int value)
		{
			return default(SteamItemDef_t);
		}

		[Token(Token = "0x6000831")]
		[Address(RVA = "0x150F284", Offset = "0x150F284", VA = "0x150F284")]
		public static explicit operator int(SteamItemDef_t that)
		{
			return default(int);
		}

		[Token(Token = "0x6000832")]
		[Address(RVA = "0x47F248", Offset = "0x47F248", VA = "0x47F248", Slot = "4")]
		public bool Equals(SteamItemDef_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000833")]
		[Address(RVA = "0x47F25C", Offset = "0x47F25C", VA = "0x47F25C", Slot = "5")]
		public int CompareTo(SteamItemDef_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200015E")]
	public struct SteamItemInstanceID_t : IEquatable<SteamItemInstanceID_t>, IComparable<SteamItemInstanceID_t>
	{
		[Token(Token = "0x40007D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly SteamItemInstanceID_t Invalid;

		[Token(Token = "0x40007D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamItemInstanceID;

		[Token(Token = "0x6000834")]
		[Address(RVA = "0x47F268", Offset = "0x47F268", VA = "0x47F268")]
		public SteamItemInstanceID_t(ulong value)
		{
		}

		[Token(Token = "0x6000835")]
		[Address(RVA = "0x47F278", Offset = "0x47F278", VA = "0x47F278", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000836")]
		[Address(RVA = "0x47F284", Offset = "0x47F284", VA = "0x47F284", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000837")]
		[Address(RVA = "0x47F28C", Offset = "0x47F28C", VA = "0x47F28C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000838")]
		[Address(RVA = "0x150F39C", Offset = "0x150F39C", VA = "0x150F39C")]
		public static bool operator ==(SteamItemInstanceID_t x, SteamItemInstanceID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000839")]
		[Address(RVA = "0x150F3BC", Offset = "0x150F3BC", VA = "0x150F3BC")]
		public static bool operator !=(SteamItemInstanceID_t x, SteamItemInstanceID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x600083A")]
		[Address(RVA = "0x150F448", Offset = "0x150F448", VA = "0x150F448")]
		public static explicit operator SteamItemInstanceID_t(ulong value)
		{
			return default(SteamItemInstanceID_t);
		}

		[Token(Token = "0x600083B")]
		[Address(RVA = "0x150F458", Offset = "0x150F458", VA = "0x150F458")]
		public static explicit operator ulong(SteamItemInstanceID_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x600083C")]
		[Address(RVA = "0x47F298", Offset = "0x47F298", VA = "0x47F298", Slot = "4")]
		public bool Equals(SteamItemInstanceID_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x600083D")]
		[Address(RVA = "0x47F2B4", Offset = "0x47F2B4", VA = "0x47F2B4", Slot = "5")]
		public int CompareTo(SteamItemInstanceID_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200015F")]
	public struct HServerListRequest : IEquatable<HServerListRequest>
	{
		[Token(Token = "0x40007D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HServerListRequest Invalid;

		[Token(Token = "0x40007D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr m_HServerListRequest;

		[Token(Token = "0x600083F")]
		[Address(RVA = "0x471014", Offset = "0x471014", VA = "0x471014")]
		public HServerListRequest(IntPtr value)
		{
		}

		[Token(Token = "0x6000840")]
		[Address(RVA = "0x47101C", Offset = "0x47101C", VA = "0x47101C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000841")]
		[Address(RVA = "0x471028", Offset = "0x471028", VA = "0x471028", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000842")]
		[Address(RVA = "0x471030", Offset = "0x471030", VA = "0x471030", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000843")]
		[Address(RVA = "0xF9ED1C", Offset = "0xF9ED1C", VA = "0xF9ED1C")]
		public static bool operator ==(HServerListRequest x, HServerListRequest y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000844")]
		[Address(RVA = "0xF9ED2C", Offset = "0xF9ED2C", VA = "0xF9ED2C")]
		public static bool operator !=(HServerListRequest x, HServerListRequest y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000845")]
		[Address(RVA = "0xF9EDB4", Offset = "0xF9EDB4", VA = "0xF9EDB4")]
		public static explicit operator HServerListRequest(IntPtr value)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x6000846")]
		[Address(RVA = "0xF9EDB8", Offset = "0xF9EDB8", VA = "0xF9EDB8")]
		public static explicit operator IntPtr(HServerListRequest that)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000847")]
		[Address(RVA = "0x47103C", Offset = "0x47103C", VA = "0x47103C", Slot = "4")]
		public bool Equals(HServerListRequest other)
		{
			return default(bool);
		}
	}
	[Serializable]
	[Token(Token = "0x2000160")]
	public struct HServerQuery : IEquatable<HServerQuery>, IComparable<HServerQuery>
	{
		[Token(Token = "0x40007D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HServerQuery Invalid;

		[Token(Token = "0x40007D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_HServerQuery;

		[Token(Token = "0x6000849")]
		[Address(RVA = "0x471048", Offset = "0x471048", VA = "0x471048")]
		public HServerQuery(int value)
		{
		}

		[Token(Token = "0x600084A")]
		[Address(RVA = "0x471050", Offset = "0x471050", VA = "0x471050", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600084B")]
		[Address(RVA = "0x47105C", Offset = "0x47105C", VA = "0x47105C", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x600084C")]
		[Address(RVA = "0x471064", Offset = "0x471064", VA = "0x471064", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600084D")]
		[Address(RVA = "0xF9EF08", Offset = "0xF9EF08", VA = "0xF9EF08")]
		public static bool operator ==(HServerQuery x, HServerQuery y)
		{
			return default(bool);
		}

		[Token(Token = "0x600084E")]
		[Address(RVA = "0xF9EF20", Offset = "0xF9EF20", VA = "0xF9EF20")]
		public static bool operator !=(HServerQuery x, HServerQuery y)
		{
			return default(bool);
		}

		[Token(Token = "0x600084F")]
		[Address(RVA = "0xF9EF9C", Offset = "0xF9EF9C", VA = "0xF9EF9C")]
		public static explicit operator HServerQuery(int value)
		{
			return default(HServerQuery);
		}

		[Token(Token = "0x6000850")]
		[Address(RVA = "0xF9EFA0", Offset = "0xF9EFA0", VA = "0xF9EFA0")]
		public static explicit operator int(HServerQuery that)
		{
			return default(int);
		}

		[Token(Token = "0x6000851")]
		[Address(RVA = "0x471070", Offset = "0x471070", VA = "0x471070", Slot = "4")]
		public bool Equals(HServerQuery other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000852")]
		[Address(RVA = "0x471084", Offset = "0x471084", VA = "0x471084", Slot = "5")]
		public int CompareTo(HServerQuery other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000161")]
	public struct SNetListenSocket_t : IEquatable<SNetListenSocket_t>, IComparable<SNetListenSocket_t>
	{
		[Token(Token = "0x40007D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_SNetListenSocket;

		[Token(Token = "0x6000854")]
		[Address(RVA = "0x47F038", Offset = "0x47F038", VA = "0x47F038")]
		public SNetListenSocket_t(uint value)
		{
		}

		[Token(Token = "0x6000855")]
		[Address(RVA = "0x47F040", Offset = "0x47F040", VA = "0x47F040", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000856")]
		[Address(RVA = "0x47F04C", Offset = "0x47F04C", VA = "0x47F04C", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000857")]
		[Address(RVA = "0x47F054", Offset = "0x47F054", VA = "0x47F054", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000858")]
		[Address(RVA = "0x14FCD04", Offset = "0x14FCD04", VA = "0x14FCD04")]
		public static bool operator ==(SNetListenSocket_t x, SNetListenSocket_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000859")]
		[Address(RVA = "0x14FCD1C", Offset = "0x14FCD1C", VA = "0x14FCD1C")]
		public static bool operator !=(SNetListenSocket_t x, SNetListenSocket_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x600085A")]
		[Address(RVA = "0x14FCD28", Offset = "0x14FCD28", VA = "0x14FCD28")]
		public static explicit operator SNetListenSocket_t(uint value)
		{
			return default(SNetListenSocket_t);
		}

		[Token(Token = "0x600085B")]
		[Address(RVA = "0x14FCD2C", Offset = "0x14FCD2C", VA = "0x14FCD2C")]
		public static explicit operator uint(SNetListenSocket_t that)
		{
			return default(uint);
		}

		[Token(Token = "0x600085C")]
		[Address(RVA = "0x47F060", Offset = "0x47F060", VA = "0x47F060", Slot = "4")]
		public bool Equals(SNetListenSocket_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x600085D")]
		[Address(RVA = "0x47F074", Offset = "0x47F074", VA = "0x47F074", Slot = "5")]
		public int CompareTo(SNetListenSocket_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000162")]
	public struct SNetSocket_t : IEquatable<SNetSocket_t>, IComparable<SNetSocket_t>
	{
		[Token(Token = "0x40007DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_SNetSocket;

		[Token(Token = "0x600085E")]
		[Address(RVA = "0x47F080", Offset = "0x47F080", VA = "0x47F080")]
		public SNetSocket_t(uint value)
		{
		}

		[Token(Token = "0x600085F")]
		[Address(RVA = "0x47F088", Offset = "0x47F088", VA = "0x47F088", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000860")]
		[Address(RVA = "0x47F094", Offset = "0x47F094", VA = "0x47F094", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000861")]
		[Address(RVA = "0x47F09C", Offset = "0x47F09C", VA = "0x47F09C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000862")]
		[Address(RVA = "0x14FCDEC", Offset = "0x14FCDEC", VA = "0x14FCDEC")]
		public static bool operator ==(SNetSocket_t x, SNetSocket_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000863")]
		[Address(RVA = "0x14FCE04", Offset = "0x14FCE04", VA = "0x14FCE04")]
		public static bool operator !=(SNetSocket_t x, SNetSocket_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000864")]
		[Address(RVA = "0x14FCE10", Offset = "0x14FCE10", VA = "0x14FCE10")]
		public static explicit operator SNetSocket_t(uint value)
		{
			return default(SNetSocket_t);
		}

		[Token(Token = "0x6000865")]
		[Address(RVA = "0x14FCE14", Offset = "0x14FCE14", VA = "0x14FCE14")]
		public static explicit operator uint(SNetSocket_t that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000866")]
		[Address(RVA = "0x47F0A8", Offset = "0x47F0A8", VA = "0x47F0A8", Slot = "4")]
		public bool Equals(SNetSocket_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000867")]
		[Address(RVA = "0x47F0BC", Offset = "0x47F0BC", VA = "0x47F0BC", Slot = "5")]
		public int CompareTo(SNetSocket_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000163")]
	public struct PublishedFileId_t : IEquatable<PublishedFileId_t>, IComparable<PublishedFileId_t>
	{
		[Token(Token = "0x40007DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly PublishedFileId_t Invalid;

		[Token(Token = "0x40007DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_PublishedFileId;

		[Token(Token = "0x6000868")]
		[Address(RVA = "0x47E2EC", Offset = "0x47E2EC", VA = "0x47E2EC")]
		public PublishedFileId_t(ulong value)
		{
		}

		[Token(Token = "0x6000869")]
		[Address(RVA = "0x47E2FC", Offset = "0x47E2FC", VA = "0x47E2FC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600086A")]
		[Address(RVA = "0x47E308", Offset = "0x47E308", VA = "0x47E308", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x600086B")]
		[Address(RVA = "0x47E310", Offset = "0x47E310", VA = "0x47E310", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600086C")]
		[Address(RVA = "0x14FC8B4", Offset = "0x14FC8B4", VA = "0x14FC8B4")]
		public static bool operator ==(PublishedFileId_t x, PublishedFileId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x600086D")]
		[Address(RVA = "0x14FC8D4", Offset = "0x14FC8D4", VA = "0x14FC8D4")]
		public static bool operator !=(PublishedFileId_t x, PublishedFileId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x600086E")]
		[Address(RVA = "0x14FC960", Offset = "0x14FC960", VA = "0x14FC960")]
		public static explicit operator PublishedFileId_t(ulong value)
		{
			return default(PublishedFileId_t);
		}

		[Token(Token = "0x600086F")]
		[Address(RVA = "0x14FC970", Offset = "0x14FC970", VA = "0x14FC970")]
		public static explicit operator ulong(PublishedFileId_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000870")]
		[Address(RVA = "0x47E31C", Offset = "0x47E31C", VA = "0x47E31C", Slot = "4")]
		public bool Equals(PublishedFileId_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000871")]
		[Address(RVA = "0x47E338", Offset = "0x47E338", VA = "0x47E338", Slot = "5")]
		public int CompareTo(PublishedFileId_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000164")]
	public struct PublishedFileUpdateHandle_t : IEquatable<PublishedFileUpdateHandle_t>, IComparable<PublishedFileUpdateHandle_t>
	{
		[Token(Token = "0x40007DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly PublishedFileUpdateHandle_t Invalid;

		[Token(Token = "0x40007DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_PublishedFileUpdateHandle;

		[Token(Token = "0x6000873")]
		[Address(RVA = "0x47E35C", Offset = "0x47E35C", VA = "0x47E35C")]
		public PublishedFileUpdateHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6000874")]
		[Address(RVA = "0x47E36C", Offset = "0x47E36C", VA = "0x47E36C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000875")]
		[Address(RVA = "0x47E378", Offset = "0x47E378", VA = "0x47E378", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000876")]
		[Address(RVA = "0x47E380", Offset = "0x47E380", VA = "0x47E380", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000877")]
		[Address(RVA = "0x14FCB08", Offset = "0x14FCB08", VA = "0x14FCB08")]
		public static bool operator ==(PublishedFileUpdateHandle_t x, PublishedFileUpdateHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000878")]
		[Address(RVA = "0x14FCB28", Offset = "0x14FCB28", VA = "0x14FCB28")]
		public static bool operator !=(PublishedFileUpdateHandle_t x, PublishedFileUpdateHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000879")]
		[Address(RVA = "0x14FCBB4", Offset = "0x14FCBB4", VA = "0x14FCBB4")]
		public static explicit operator PublishedFileUpdateHandle_t(ulong value)
		{
			return default(PublishedFileUpdateHandle_t);
		}

		[Token(Token = "0x600087A")]
		[Address(RVA = "0x14FCBC4", Offset = "0x14FCBC4", VA = "0x14FCBC4")]
		public static explicit operator ulong(PublishedFileUpdateHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x600087B")]
		[Address(RVA = "0x47E38C", Offset = "0x47E38C", VA = "0x47E38C", Slot = "4")]
		public bool Equals(PublishedFileUpdateHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x600087C")]
		[Address(RVA = "0x47E3A8", Offset = "0x47E3A8", VA = "0x47E3A8", Slot = "5")]
		public int CompareTo(PublishedFileUpdateHandle_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000165")]
	public struct UGCFileWriteStreamHandle_t : IEquatable<UGCFileWriteStreamHandle_t>, IComparable<UGCFileWriteStreamHandle_t>
	{
		[Token(Token = "0x40007DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly UGCFileWriteStreamHandle_t Invalid;

		[Token(Token = "0x40007E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_UGCFileWriteStreamHandle;

		[Token(Token = "0x600087E")]
		[Address(RVA = "0x491318", Offset = "0x491318", VA = "0x491318")]
		public UGCFileWriteStreamHandle_t(ulong value)
		{
		}

		[Token(Token = "0x600087F")]
		[Address(RVA = "0x491328", Offset = "0x491328", VA = "0x491328", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000880")]
		[Address(RVA = "0x491334", Offset = "0x491334", VA = "0x491334", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000881")]
		[Address(RVA = "0x49133C", Offset = "0x49133C", VA = "0x49133C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000882")]
		[Address(RVA = "0x1AEF974", Offset = "0x1AEF974", VA = "0x1AEF974")]
		public static bool operator ==(UGCFileWriteStreamHandle_t x, UGCFileWriteStreamHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000883")]
		[Address(RVA = "0x1AEF994", Offset = "0x1AEF994", VA = "0x1AEF994")]
		public static bool operator !=(UGCFileWriteStreamHandle_t x, UGCFileWriteStreamHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000884")]
		[Address(RVA = "0x1AE47A4", Offset = "0x1AE47A4", VA = "0x1AE47A4")]
		public static explicit operator UGCFileWriteStreamHandle_t(ulong value)
		{
			return default(UGCFileWriteStreamHandle_t);
		}

		[Token(Token = "0x6000885")]
		[Address(RVA = "0x1AEFA20", Offset = "0x1AEFA20", VA = "0x1AEFA20")]
		public static explicit operator ulong(UGCFileWriteStreamHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000886")]
		[Address(RVA = "0x491348", Offset = "0x491348", VA = "0x491348", Slot = "4")]
		public bool Equals(UGCFileWriteStreamHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000887")]
		[Address(RVA = "0x491364", Offset = "0x491364", VA = "0x491364", Slot = "5")]
		public int CompareTo(UGCFileWriteStreamHandle_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000166")]
	public struct UGCHandle_t : IEquatable<UGCHandle_t>, IComparable<UGCHandle_t>
	{
		[Token(Token = "0x40007E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly UGCHandle_t Invalid;

		[Token(Token = "0x40007E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_UGCHandle;

		[Token(Token = "0x6000889")]
		[Address(RVA = "0x491388", Offset = "0x491388", VA = "0x491388")]
		public UGCHandle_t(ulong value)
		{
		}

		[Token(Token = "0x600088A")]
		[Address(RVA = "0x491398", Offset = "0x491398", VA = "0x491398", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600088B")]
		[Address(RVA = "0x4913A4", Offset = "0x4913A4", VA = "0x4913A4", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x600088C")]
		[Address(RVA = "0x4913AC", Offset = "0x4913AC", VA = "0x4913AC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600088D")]
		[Address(RVA = "0x1AEFBB8", Offset = "0x1AEFBB8", VA = "0x1AEFBB8")]
		public static bool operator ==(UGCHandle_t x, UGCHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x600088E")]
		[Address(RVA = "0x1AEFBD8", Offset = "0x1AEFBD8", VA = "0x1AEFBD8")]
		public static bool operator !=(UGCHandle_t x, UGCHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x600088F")]
		[Address(RVA = "0x1AE5264", Offset = "0x1AE5264", VA = "0x1AE5264")]
		public static explicit operator UGCHandle_t(ulong value)
		{
			return default(UGCHandle_t);
		}

		[Token(Token = "0x6000890")]
		[Address(RVA = "0x1AEFC64", Offset = "0x1AEFC64", VA = "0x1AEFC64")]
		public static explicit operator ulong(UGCHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000891")]
		[Address(RVA = "0x4913B8", Offset = "0x4913B8", VA = "0x4913B8", Slot = "4")]
		public bool Equals(UGCHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000892")]
		[Address(RVA = "0x4913D4", Offset = "0x4913D4", VA = "0x4913D4", Slot = "5")]
		public int CompareTo(UGCHandle_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000167")]
	public struct ScreenshotHandle : IEquatable<ScreenshotHandle>, IComparable<ScreenshotHandle>
	{
		[Token(Token = "0x40007E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly ScreenshotHandle Invalid;

		[Token(Token = "0x40007E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_ScreenshotHandle;

		[Token(Token = "0x6000894")]
		[Address(RVA = "0x47F0C8", Offset = "0x47F0C8", VA = "0x47F0C8")]
		public ScreenshotHandle(uint value)
		{
		}

		[Token(Token = "0x6000895")]
		[Address(RVA = "0x47F0D0", Offset = "0x47F0D0", VA = "0x47F0D0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000896")]
		[Address(RVA = "0x47F0DC", Offset = "0x47F0DC", VA = "0x47F0DC", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000897")]
		[Address(RVA = "0x47F0E4", Offset = "0x47F0E4", VA = "0x47F0E4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000898")]
		[Address(RVA = "0x14FCF18", Offset = "0x14FCF18", VA = "0x14FCF18")]
		public static bool operator ==(ScreenshotHandle x, ScreenshotHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000899")]
		[Address(RVA = "0x14FCF30", Offset = "0x14FCF30", VA = "0x14FCF30")]
		public static bool operator !=(ScreenshotHandle x, ScreenshotHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x600089A")]
		[Address(RVA = "0x14FCFAC", Offset = "0x14FCFAC", VA = "0x14FCFAC")]
		public static explicit operator ScreenshotHandle(uint value)
		{
			return default(ScreenshotHandle);
		}

		[Token(Token = "0x600089B")]
		[Address(RVA = "0x14FCFB0", Offset = "0x14FCFB0", VA = "0x14FCFB0")]
		public static explicit operator uint(ScreenshotHandle that)
		{
			return default(uint);
		}

		[Token(Token = "0x600089C")]
		[Address(RVA = "0x47F0F0", Offset = "0x47F0F0", VA = "0x47F0F0", Slot = "4")]
		public bool Equals(ScreenshotHandle other)
		{
			return default(bool);
		}

		[Token(Token = "0x600089D")]
		[Address(RVA = "0x47F104", Offset = "0x47F104", VA = "0x47F104", Slot = "5")]
		public int CompareTo(ScreenshotHandle other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000168")]
	public struct AccountID_t : IEquatable<AccountID_t>, IComparable<AccountID_t>
	{
		[Token(Token = "0x40007E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_AccountID;

		[Token(Token = "0x600089F")]
		[Address(RVA = "0x470138", Offset = "0x470138", VA = "0x470138")]
		public AccountID_t(uint value)
		{
		}

		[Token(Token = "0x60008A0")]
		[Address(RVA = "0x470140", Offset = "0x470140", VA = "0x470140", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60008A1")]
		[Address(RVA = "0x47014C", Offset = "0x47014C", VA = "0x47014C", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60008A2")]
		[Address(RVA = "0x470154", Offset = "0x470154", VA = "0x470154", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60008A3")]
		[Address(RVA = "0xF9C170", Offset = "0xF9C170", VA = "0xF9C170")]
		public static bool operator ==(AccountID_t x, AccountID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60008A4")]
		[Address(RVA = "0xF9C188", Offset = "0xF9C188", VA = "0xF9C188")]
		public static bool operator !=(AccountID_t x, AccountID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60008A5")]
		[Address(RVA = "0xF9C194", Offset = "0xF9C194", VA = "0xF9C194")]
		public static explicit operator AccountID_t(uint value)
		{
			return default(AccountID_t);
		}

		[Token(Token = "0x60008A6")]
		[Address(RVA = "0xF9C198", Offset = "0xF9C198", VA = "0xF9C198")]
		public static explicit operator uint(AccountID_t that)
		{
			return default(uint);
		}

		[Token(Token = "0x60008A7")]
		[Address(RVA = "0x470160", Offset = "0x470160", VA = "0x470160", Slot = "4")]
		public bool Equals(AccountID_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x60008A8")]
		[Address(RVA = "0x470174", Offset = "0x470174", VA = "0x470174", Slot = "5")]
		public int CompareTo(AccountID_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000169")]
	public struct AppId_t : IEquatable<AppId_t>, IComparable<AppId_t>
	{
		[Token(Token = "0x40007E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly AppId_t Invalid;

		[Token(Token = "0x40007E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_AppId;

		[Token(Token = "0x60008A9")]
		[Address(RVA = "0x470180", Offset = "0x470180", VA = "0x470180")]
		public AppId_t(uint value)
		{
		}

		[Token(Token = "0x60008AA")]
		[Address(RVA = "0x470188", Offset = "0x470188", VA = "0x470188", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60008AB")]
		[Address(RVA = "0x470194", Offset = "0x470194", VA = "0x470194", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60008AC")]
		[Address(RVA = "0x47019C", Offset = "0x47019C", VA = "0x47019C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60008AD")]
		[Address(RVA = "0xF9C29C", Offset = "0xF9C29C", VA = "0xF9C29C")]
		public static bool operator ==(AppId_t x, AppId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60008AE")]
		[Address(RVA = "0xF9C2B4", Offset = "0xF9C2B4", VA = "0xF9C2B4")]
		public static bool operator !=(AppId_t x, AppId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60008AF")]
		[Address(RVA = "0xF9C330", Offset = "0xF9C330", VA = "0xF9C330")]
		public static explicit operator AppId_t(uint value)
		{
			return default(AppId_t);
		}

		[Token(Token = "0x60008B0")]
		[Address(RVA = "0xF9C334", Offset = "0xF9C334", VA = "0xF9C334")]
		public static explicit operator uint(AppId_t that)
		{
			return default(uint);
		}

		[Token(Token = "0x60008B1")]
		[Address(RVA = "0x4701A8", Offset = "0x4701A8", VA = "0x4701A8", Slot = "4")]
		public bool Equals(AppId_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x60008B2")]
		[Address(RVA = "0x4701BC", Offset = "0x4701BC", VA = "0x4701BC", Slot = "5")]
		public int CompareTo(AppId_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200016A")]
	public struct DepotId_t : IEquatable<DepotId_t>, IComparable<DepotId_t>
	{
		[Token(Token = "0x40007E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly DepotId_t Invalid;

		[Token(Token = "0x40007E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_DepotId;

		[Token(Token = "0x60008B4")]
		[Address(RVA = "0x470A8C", Offset = "0x470A8C", VA = "0x470A8C")]
		public DepotId_t(uint value)
		{
		}

		[Token(Token = "0x60008B5")]
		[Address(RVA = "0x470A94", Offset = "0x470A94", VA = "0x470A94", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60008B6")]
		[Address(RVA = "0x470AA0", Offset = "0x470AA0", VA = "0x470AA0", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60008B7")]
		[Address(RVA = "0x470AA8", Offset = "0x470AA8", VA = "0x470AA8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60008B8")]
		[Address(RVA = "0xF9E260", Offset = "0xF9E260", VA = "0xF9E260")]
		public static bool operator ==(DepotId_t x, DepotId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60008B9")]
		[Address(RVA = "0xF9E278", Offset = "0xF9E278", VA = "0xF9E278")]
		public static bool operator !=(DepotId_t x, DepotId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60008BA")]
		[Address(RVA = "0xF9E2F4", Offset = "0xF9E2F4", VA = "0xF9E2F4")]
		public static explicit operator DepotId_t(uint value)
		{
			return default(DepotId_t);
		}

		[Token(Token = "0x60008BB")]
		[Address(RVA = "0xF9E2F8", Offset = "0xF9E2F8", VA = "0xF9E2F8")]
		public static explicit operator uint(DepotId_t that)
		{
			return default(uint);
		}

		[Token(Token = "0x60008BC")]
		[Address(RVA = "0x470AB4", Offset = "0x470AB4", VA = "0x470AB4", Slot = "4")]
		public bool Equals(DepotId_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x60008BD")]
		[Address(RVA = "0x470AC8", Offset = "0x470AC8", VA = "0x470AC8", Slot = "5")]
		public int CompareTo(DepotId_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200016B")]
	public struct ManifestId_t : IEquatable<ManifestId_t>, IComparable<ManifestId_t>
	{
		[Token(Token = "0x40007EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly ManifestId_t Invalid;

		[Token(Token = "0x40007EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ManifestId;

		[Token(Token = "0x60008BF")]
		[Address(RVA = "0x481364", Offset = "0x481364", VA = "0x481364")]
		public ManifestId_t(ulong value)
		{
		}

		[Token(Token = "0x60008C0")]
		[Address(RVA = "0x481374", Offset = "0x481374", VA = "0x481374", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60008C1")]
		[Address(RVA = "0x481380", Offset = "0x481380", VA = "0x481380", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60008C2")]
		[Address(RVA = "0x481388", Offset = "0x481388", VA = "0x481388", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60008C3")]
		[Address(RVA = "0x165E67C", Offset = "0x165E67C", VA = "0x165E67C")]
		public static bool operator ==(ManifestId_t x, ManifestId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60008C4")]
		[Address(RVA = "0x165E69C", Offset = "0x165E69C", VA = "0x165E69C")]
		public static bool operator !=(ManifestId_t x, ManifestId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60008C5")]
		[Address(RVA = "0x165E728", Offset = "0x165E728", VA = "0x165E728")]
		public static explicit operator ManifestId_t(ulong value)
		{
			return default(ManifestId_t);
		}

		[Token(Token = "0x60008C6")]
		[Address(RVA = "0x165E738", Offset = "0x165E738", VA = "0x165E738")]
		public static explicit operator ulong(ManifestId_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x60008C7")]
		[Address(RVA = "0x481394", Offset = "0x481394", VA = "0x481394", Slot = "4")]
		public bool Equals(ManifestId_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x60008C8")]
		[Address(RVA = "0x4813B0", Offset = "0x4813B0", VA = "0x4813B0", Slot = "5")]
		public int CompareTo(ManifestId_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200016C")]
	public struct SteamAPICall_t : IEquatable<SteamAPICall_t>, IComparable<SteamAPICall_t>
	{
		[Token(Token = "0x40007EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly SteamAPICall_t Invalid;

		[Token(Token = "0x40007ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamAPICall;

		[Token(Token = "0x60008CA")]
		[Address(RVA = "0x47F110", Offset = "0x47F110", VA = "0x47F110")]
		public SteamAPICall_t(ulong value)
		{
		}

		[Token(Token = "0x60008CB")]
		[Address(RVA = "0x47F120", Offset = "0x47F120", VA = "0x47F120", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60008CC")]
		[Address(RVA = "0x47F12C", Offset = "0x47F12C", VA = "0x47F12C", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60008CD")]
		[Address(RVA = "0x47F134", Offset = "0x47F134", VA = "0x47F134", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60008CE")]
		[Address(RVA = "0x14FD25C", Offset = "0x14FD25C", VA = "0x14FD25C")]
		public static bool operator ==(SteamAPICall_t x, SteamAPICall_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60008CF")]
		[Address(RVA = "0x14FD27C", Offset = "0x14FD27C", VA = "0x14FD27C")]
		public static bool operator !=(SteamAPICall_t x, SteamAPICall_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60008D0")]
		[Address(RVA = "0x14FD308", Offset = "0x14FD308", VA = "0x14FD308")]
		public static explicit operator SteamAPICall_t(ulong value)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60008D1")]
		[Address(RVA = "0x14FD318", Offset = "0x14FD318", VA = "0x14FD318")]
		public static explicit operator ulong(SteamAPICall_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x60008D2")]
		[Address(RVA = "0x47F140", Offset = "0x47F140", VA = "0x47F140", Slot = "4")]
		public bool Equals(SteamAPICall_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x60008D3")]
		[Address(RVA = "0x47F15C", Offset = "0x47F15C", VA = "0x47F15C", Slot = "5")]
		public int CompareTo(SteamAPICall_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200016D")]
	public struct UGCQueryHandle_t : IEquatable<UGCQueryHandle_t>, IComparable<UGCQueryHandle_t>
	{
		[Token(Token = "0x40007EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly UGCQueryHandle_t Invalid;

		[Token(Token = "0x40007EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_UGCQueryHandle;

		[Token(Token = "0x60008D5")]
		[Address(RVA = "0x4913F8", Offset = "0x4913F8", VA = "0x4913F8")]
		public UGCQueryHandle_t(ulong value)
		{
		}

		[Token(Token = "0x60008D6")]
		[Address(RVA = "0x491408", Offset = "0x491408", VA = "0x491408", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60008D7")]
		[Address(RVA = "0x491414", Offset = "0x491414", VA = "0x491414", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60008D8")]
		[Address(RVA = "0x49141C", Offset = "0x49141C", VA = "0x49141C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60008D9")]
		[Address(RVA = "0x1AEFDFC", Offset = "0x1AEFDFC", VA = "0x1AEFDFC")]
		public static bool operator ==(UGCQueryHandle_t x, UGCQueryHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60008DA")]
		[Address(RVA = "0x1AEFE1C", Offset = "0x1AEFE1C", VA = "0x1AEFE1C")]
		public static bool operator !=(UGCQueryHandle_t x, UGCQueryHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60008DB")]
		[Address(RVA = "0x1AE7C40", Offset = "0x1AE7C40", VA = "0x1AE7C40")]
		public static explicit operator UGCQueryHandle_t(ulong value)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x60008DC")]
		[Address(RVA = "0x1AEFEA8", Offset = "0x1AEFEA8", VA = "0x1AEFEA8")]
		public static explicit operator ulong(UGCQueryHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x60008DD")]
		[Address(RVA = "0x491428", Offset = "0x491428", VA = "0x491428", Slot = "4")]
		public bool Equals(UGCQueryHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x60008DE")]
		[Address(RVA = "0x491444", Offset = "0x491444", VA = "0x491444", Slot = "5")]
		public int CompareTo(UGCQueryHandle_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200016E")]
	public struct UGCUpdateHandle_t : IEquatable<UGCUpdateHandle_t>, IComparable<UGCUpdateHandle_t>
	{
		[Token(Token = "0x40007F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly UGCUpdateHandle_t Invalid;

		[Token(Token = "0x40007F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_UGCUpdateHandle;

		[Token(Token = "0x60008E0")]
		[Address(RVA = "0x491468", Offset = "0x491468", VA = "0x491468")]
		public UGCUpdateHandle_t(ulong value)
		{
		}

		[Token(Token = "0x60008E1")]
		[Address(RVA = "0x491478", Offset = "0x491478", VA = "0x491478", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60008E2")]
		[Address(RVA = "0x491484", Offset = "0x491484", VA = "0x491484", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60008E3")]
		[Address(RVA = "0x49148C", Offset = "0x49148C", VA = "0x49148C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60008E4")]
		[Address(RVA = "0x1AF0040", Offset = "0x1AF0040", VA = "0x1AF0040")]
		public static bool operator ==(UGCUpdateHandle_t x, UGCUpdateHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60008E5")]
		[Address(RVA = "0x1AF0060", Offset = "0x1AF0060", VA = "0x1AF0060")]
		public static bool operator !=(UGCUpdateHandle_t x, UGCUpdateHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60008E6")]
		[Address(RVA = "0x1AE9330", Offset = "0x1AE9330", VA = "0x1AE9330")]
		public static explicit operator UGCUpdateHandle_t(ulong value)
		{
			return default(UGCUpdateHandle_t);
		}

		[Token(Token = "0x60008E7")]
		[Address(RVA = "0x1AF00EC", Offset = "0x1AF00EC", VA = "0x1AF00EC")]
		public static explicit operator ulong(UGCUpdateHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x60008E8")]
		[Address(RVA = "0x491498", Offset = "0x491498", VA = "0x491498", Slot = "4")]
		public bool Equals(UGCUpdateHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x60008E9")]
		[Address(RVA = "0x4914B4", Offset = "0x4914B4", VA = "0x4914B4", Slot = "5")]
		public int CompareTo(UGCUpdateHandle_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200016F")]
	public struct ClientUnifiedMessageHandle : IEquatable<ClientUnifiedMessageHandle>, IComparable<ClientUnifiedMessageHandle>
	{
		[Token(Token = "0x40007F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly ClientUnifiedMessageHandle Invalid;

		[Token(Token = "0x40007F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ClientUnifiedMessageHandle;

		[Token(Token = "0x60008EB")]
		[Address(RVA = "0x47085C", Offset = "0x47085C", VA = "0x47085C")]
		public ClientUnifiedMessageHandle(ulong value)
		{
		}

		[Token(Token = "0x60008EC")]
		[Address(RVA = "0x47086C", Offset = "0x47086C", VA = "0x47086C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60008ED")]
		[Address(RVA = "0x470878", Offset = "0x470878", VA = "0x470878", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60008EE")]
		[Address(RVA = "0x470880", Offset = "0x470880", VA = "0x470880", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60008EF")]
		[Address(RVA = "0xF9DB50", Offset = "0xF9DB50", VA = "0xF9DB50")]
		public static bool operator ==(ClientUnifiedMessageHandle x, ClientUnifiedMessageHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x60008F0")]
		[Address(RVA = "0xF9DB70", Offset = "0xF9DB70", VA = "0xF9DB70")]
		public static bool operator !=(ClientUnifiedMessageHandle x, ClientUnifiedMessageHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x60008F1")]
		[Address(RVA = "0xF9DBFC", Offset = "0xF9DBFC", VA = "0xF9DBFC")]
		public static explicit operator ClientUnifiedMessageHandle(ulong value)
		{
			return default(ClientUnifiedMessageHandle);
		}

		[Token(Token = "0x60008F2")]
		[Address(RVA = "0xF9DC0C", Offset = "0xF9DC0C", VA = "0xF9DC0C")]
		public static explicit operator ulong(ClientUnifiedMessageHandle that)
		{
			return default(ulong);
		}

		[Token(Token = "0x60008F3")]
		[Address(RVA = "0x47088C", Offset = "0x47088C", VA = "0x47088C", Slot = "4")]
		public bool Equals(ClientUnifiedMessageHandle other)
		{
			return default(bool);
		}

		[Token(Token = "0x60008F4")]
		[Address(RVA = "0x4708A8", Offset = "0x4708A8", VA = "0x4708A8", Slot = "5")]
		public int CompareTo(ClientUnifiedMessageHandle other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000170")]
	public struct SteamLeaderboardEntries_t : IEquatable<SteamLeaderboardEntries_t>, IComparable<SteamLeaderboardEntries_t>
	{
		[Token(Token = "0x40007F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamLeaderboardEntries;

		[Token(Token = "0x60008F6")]
		[Address(RVA = "0x47F2D8", Offset = "0x47F2D8", VA = "0x47F2D8")]
		public SteamLeaderboardEntries_t(ulong value)
		{
		}

		[Token(Token = "0x60008F7")]
		[Address(RVA = "0x47F2E8", Offset = "0x47F2E8", VA = "0x47F2E8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60008F8")]
		[Address(RVA = "0x47F2F4", Offset = "0x47F2F4", VA = "0x47F2F4", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60008F9")]
		[Address(RVA = "0x47F2FC", Offset = "0x47F2FC", VA = "0x47F2FC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60008FA")]
		[Address(RVA = "0x150F5A8", Offset = "0x150F5A8", VA = "0x150F5A8")]
		public static bool operator ==(SteamLeaderboardEntries_t x, SteamLeaderboardEntries_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60008FB")]
		[Address(RVA = "0x150F5C8", Offset = "0x150F5C8", VA = "0x150F5C8")]
		public static bool operator !=(SteamLeaderboardEntries_t x, SteamLeaderboardEntries_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60008FC")]
		[Address(RVA = "0x150F5DC", Offset = "0x150F5DC", VA = "0x150F5DC")]
		public static explicit operator SteamLeaderboardEntries_t(ulong value)
		{
			return default(SteamLeaderboardEntries_t);
		}

		[Token(Token = "0x60008FD")]
		[Address(RVA = "0x150F5EC", Offset = "0x150F5EC", VA = "0x150F5EC")]
		public static explicit operator ulong(SteamLeaderboardEntries_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x60008FE")]
		[Address(RVA = "0x47F308", Offset = "0x47F308", VA = "0x47F308", Slot = "4")]
		public bool Equals(SteamLeaderboardEntries_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x60008FF")]
		[Address(RVA = "0x47F324", Offset = "0x47F324", VA = "0x47F324", Slot = "5")]
		public int CompareTo(SteamLeaderboardEntries_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000171")]
	public struct SteamLeaderboard_t : IEquatable<SteamLeaderboard_t>, IComparable<SteamLeaderboard_t>
	{
		[Token(Token = "0x40007F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamLeaderboard;

		[Token(Token = "0x6000900")]
		[Address(RVA = "0x47F348", Offset = "0x47F348", VA = "0x47F348")]
		public SteamLeaderboard_t(ulong value)
		{
		}

		[Token(Token = "0x6000901")]
		[Address(RVA = "0x47F358", Offset = "0x47F358", VA = "0x47F358", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000902")]
		[Address(RVA = "0x47F364", Offset = "0x47F364", VA = "0x47F364", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000903")]
		[Address(RVA = "0x47F36C", Offset = "0x47F36C", VA = "0x47F36C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000904")]
		[Address(RVA = "0x150F6DC", Offset = "0x150F6DC", VA = "0x150F6DC")]
		public static bool operator ==(SteamLeaderboard_t x, SteamLeaderboard_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000905")]
		[Address(RVA = "0x150F6FC", Offset = "0x150F6FC", VA = "0x150F6FC")]
		public static bool operator !=(SteamLeaderboard_t x, SteamLeaderboard_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000906")]
		[Address(RVA = "0x150F710", Offset = "0x150F710", VA = "0x150F710")]
		public static explicit operator SteamLeaderboard_t(ulong value)
		{
			return default(SteamLeaderboard_t);
		}

		[Token(Token = "0x6000907")]
		[Address(RVA = "0x150F720", Offset = "0x150F720", VA = "0x150F720")]
		public static explicit operator ulong(SteamLeaderboard_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000908")]
		[Address(RVA = "0x47F378", Offset = "0x47F378", VA = "0x47F378", Slot = "4")]
		public bool Equals(SteamLeaderboard_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000909")]
		[Address(RVA = "0x47F394", Offset = "0x47F394", VA = "0x47F394", Slot = "5")]
		public int CompareTo(SteamLeaderboard_t other)
		{
			return default(int);
		}
	}
}
namespace RelationsInspector.Backend.AutoBackend
{
	[Token(Token = "0x2000172")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x395F1C", Offset = "0x395F1C")]
	public class AutoBackendAttribute : Attribute
	{
		[Token(Token = "0x600090A")]
		[Address(RVA = "0xF9C0B8", Offset = "0xF9C0B8", VA = "0xF9C0B8")]
		public AutoBackendAttribute()
		{
		}
	}
	[Token(Token = "0x2000173")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x395F30", Offset = "0x395F30")]
	public class RelatedAttribute : Attribute
	{
		[Token(Token = "0x600090B")]
		[Address(RVA = "0xF9C0C0", Offset = "0xF9C0C0", VA = "0xF9C0C0")]
		public RelatedAttribute()
		{
		}
	}
	[Token(Token = "0x2000174")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x395F44", Offset = "0x395F44")]
	public class RelatingAttribute : Attribute
	{
		[Token(Token = "0x600090C")]
		[Address(RVA = "0xF9C0C8", Offset = "0xF9C0C8", VA = "0xF9C0C8")]
		public RelatingAttribute()
		{
		}
	}
}
namespace POpusCodec
{
	[Token(Token = "0x2000175")]
	public class OpusDecoder : IDisposable
	{
		[Token(Token = "0x40007F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IntPtr _handle;

		[Token(Token = "0x40007F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private string _version;

		[Token(Token = "0x40007F8")]
		private const int MaxFrameSize = 5760;

		[Token(Token = "0x40007F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool _previousPacketInvalid;

		[Token(Token = "0x40007FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int _channelCount;

		[Token(Token = "0x40007FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly float[] EmptyBufferFloat;

		[Token(Token = "0x40007FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly short[] EmptyBufferShort;

		[Token(Token = "0x40007FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Bandwidth? _previousPacketBandwidth;

		[Token(Token = "0x40007FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float[] bufferFloat;

		[Token(Token = "0x40007FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private short[] bufferShort;

		[Token(Token = "0x17000012")]
		public string Version
		{
			[Token(Token = "0x600090D")]
			[Address(RVA = "0xF970F4", Offset = "0xF970F4", VA = "0xF970F4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000013")]
		public Bandwidth? PreviousPacketBandwidth
		{
			[Token(Token = "0x600090E")]
			[Address(RVA = "0xF970FC", Offset = "0xF970FC", VA = "0xF970FC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600090F")]
		[Address(RVA = "0xF97110", Offset = "0xF97110", VA = "0xF97110")]
		public OpusDecoder(SamplingRate outputSamplingRateHz, Channels numChannels)
		{
		}

		[Token(Token = "0x6000910")]
		[Address(RVA = "0xF975FC", Offset = "0xF975FC", VA = "0xF975FC")]
		public float[] DecodePacketFloat(byte[] packetData)
		{
			return null;
		}

		[Token(Token = "0x6000911")]
		[Address(RVA = "0xF97958", Offset = "0xF97958", VA = "0xF97958")]
		public short[] DecodePacketShort(byte[] packetData)
		{
			return null;
		}

		[Token(Token = "0x6000912")]
		[Address(RVA = "0xF97C0C", Offset = "0xF97C0C", VA = "0xF97C0C", Slot = "4")]
		public void Dispose()
		{
		}
	}
	[Token(Token = "0x2000176")]
	public class OpusEncoder : IDisposable
	{
		[Token(Token = "0x4000800")]
		public const int BitrateMax = -1;

		[Token(Token = "0x4000801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IntPtr _handle;

		[Token(Token = "0x4000802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private string _version;

		[Token(Token = "0x4000803")]
		private const int RecommendedMaxPacketSize = 4000;

		[Token(Token = "0x4000804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int _frameSizePerChannel;

		[Token(Token = "0x4000805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private SamplingRate _inputSamplingRate;

		[Token(Token = "0x4000806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Channels _inputChannels;

		[Token(Token = "0x4000807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private readonly byte[] writePacket;

		[Token(Token = "0x4000808")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly ArraySegment<byte> EmptyBuffer;

		[Token(Token = "0x4000809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Delay _encoderDelay;

		[Token(Token = "0x17000014")]
		public SamplingRate InputSamplingRate
		{
			[Token(Token = "0x6000914")]
			[Address(RVA = "0xF97D88", Offset = "0xF97D88", VA = "0xF97D88")]
			get
			{
				return default(SamplingRate);
			}
		}

		[Token(Token = "0x17000015")]
		public Channels InputChannels
		{
			[Token(Token = "0x6000915")]
			[Address(RVA = "0xF97D90", Offset = "0xF97D90", VA = "0xF97D90")]
			get
			{
				return default(Channels);
			}
		}

		[Token(Token = "0x17000016")]
		public string Version
		{
			[Token(Token = "0x6000916")]
			[Address(RVA = "0xF97D98", Offset = "0xF97D98", VA = "0xF97D98")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000017")]
		public Delay EncoderDelay
		{
			[Token(Token = "0x6000918")]
			[Address(RVA = "0xF97EFC", Offset = "0xF97EFC", VA = "0xF97EFC")]
			get
			{
				return default(Delay);
			}
			[Token(Token = "0x6000917")]
			[Address(RVA = "0xF97DA0", Offset = "0xF97DA0", VA = "0xF97DA0")]
			set
			{
			}
		}

		[Token(Token = "0x17000018")]
		public int FrameSizePerChannel
		{
			[Token(Token = "0x6000919")]
			[Address(RVA = "0xF97F04", Offset = "0xF97F04", VA = "0xF97F04")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000019")]
		public int Bitrate
		{
			[Token(Token = "0x600091A")]
			[Address(RVA = "0xF97F0C", Offset = "0xF97F0C", VA = "0xF97F0C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600091B")]
			[Address(RVA = "0xF97FF4", Offset = "0xF97FF4", VA = "0xF97FF4")]
			set
			{
			}
		}

		[Token(Token = "0x1700001A")]
		public Bandwidth MaxBandwidth
		{
			[Token(Token = "0x600091C")]
			[Address(RVA = "0xF980CC", Offset = "0xF980CC", VA = "0xF980CC")]
			get
			{
				return default(Bandwidth);
			}
			[Token(Token = "0x600091D")]
			[Address(RVA = "0xF980D8", Offset = "0xF980D8", VA = "0xF980D8")]
			set
			{
			}
		}

		[Token(Token = "0x1700001B")]
		public Complexity Complexity
		{
			[Token(Token = "0x600091E")]
			[Address(RVA = "0xF980E8", Offset = "0xF980E8", VA = "0xF980E8")]
			get
			{
				return default(Complexity);
			}
			[Token(Token = "0x600091F")]
			[Address(RVA = "0xF980F4", Offset = "0xF980F4", VA = "0xF980F4")]
			set
			{
			}
		}

		[Token(Token = "0x1700001C")]
		public int ExpectedPacketLossPercentage
		{
			[Token(Token = "0x6000920")]
			[Address(RVA = "0xF98104", Offset = "0xF98104", VA = "0xF98104")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000921")]
			[Address(RVA = "0xF98110", Offset = "0xF98110", VA = "0xF98110")]
			set
			{
			}
		}

		[Token(Token = "0x1700001D")]
		public SignalHint SignalHint
		{
			[Token(Token = "0x6000922")]
			[Address(RVA = "0xF98120", Offset = "0xF98120", VA = "0xF98120")]
			get
			{
				return default(SignalHint);
			}
			[Token(Token = "0x6000923")]
			[Address(RVA = "0xF9812C", Offset = "0xF9812C", VA = "0xF9812C")]
			set
			{
			}
		}

		[Token(Token = "0x1700001E")]
		public ForceChannels ForceChannels
		{
			[Token(Token = "0x6000924")]
			[Address(RVA = "0xF9813C", Offset = "0xF9813C", VA = "0xF9813C")]
			get
			{
				return default(ForceChannels);
			}
			[Token(Token = "0x6000925")]
			[Address(RVA = "0xF98148", Offset = "0xF98148", VA = "0xF98148")]
			set
			{
			}
		}

		[Token(Token = "0x1700001F")]
		public bool UseInbandFEC
		{
			[Token(Token = "0x6000926")]
			[Address(RVA = "0xF98158", Offset = "0xF98158", VA = "0xF98158")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000927")]
			[Address(RVA = "0xF9817C", Offset = "0xF9817C", VA = "0xF9817C")]
			set
			{
			}
		}

		[Token(Token = "0x17000020")]
		public bool UseUnconstrainedVBR
		{
			[Token(Token = "0x6000928")]
			[Address(RVA = "0xF9818C", Offset = "0xF9818C", VA = "0xF9818C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000929")]
			[Address(RVA = "0xF981AC", Offset = "0xF981AC", VA = "0xF981AC")]
			set
			{
			}
		}

		[Token(Token = "0x17000021")]
		public bool DtxEnabled
		{
			[Token(Token = "0x600092A")]
			[Address(RVA = "0xF981BC", Offset = "0xF981BC", VA = "0xF981BC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600092B")]
			[Address(RVA = "0xF981E0", Offset = "0xF981E0", VA = "0xF981E0")]
			set
			{
			}
		}

		[Token(Token = "0x600092C")]
		[Address(RVA = "0xF981F0", Offset = "0xF981F0", VA = "0xF981F0")]
		public OpusEncoder(SamplingRate inputSamplingRateHz, Channels numChannels, int bitrate, OpusApplicationType applicationType, Delay encoderDelay)
		{
		}

		[Token(Token = "0x600092D")]
		[Address(RVA = "0xF98768", Offset = "0xF98768", VA = "0xF98768")]
		public ArraySegment<byte> Encode(float[] pcmSamples)
		{
			return default(ArraySegment<byte>);
		}

		[Token(Token = "0x600092E")]
		[Address(RVA = "0xF98958", Offset = "0xF98958", VA = "0xF98958")]
		public ArraySegment<byte> Encode(short[] pcmSamples)
		{
			return default(ArraySegment<byte>);
		}

		[Token(Token = "0x600092F")]
		[Address(RVA = "0xF98B48", Offset = "0xF98B48", VA = "0xF98B48", Slot = "4")]
		public void Dispose()
		{
		}
	}
	[Token(Token = "0x2000177")]
	public class OpusException : Exception
	{
		[Token(Token = "0x400080A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private OpusStatusCode _statusCode;

		[Token(Token = "0x17000022")]
		public OpusStatusCode StatusCode
		{
			[Token(Token = "0x6000931")]
			[Address(RVA = "0xF98CD8", Offset = "0xF98CD8", VA = "0xF98CD8")]
			get
			{
				return default(OpusStatusCode);
			}
		}

		[Token(Token = "0x6000932")]
		[Address(RVA = "0xF97570", Offset = "0xF97570", VA = "0xF97570")]
		public OpusException(OpusStatusCode statusCode, string message)
		{
		}
	}
	[Token(Token = "0x2000178")]
	internal class Wrapper
	{
		[Token(Token = "0x400080B")]
		private const string lib_name = "opus_egpv";

		[PreserveSig]
		[Token(Token = "0x6000933")]
		[Address(RVA = "0xF98CE0", Offset = "0xF98CE0", VA = "0xF98CE0")]
		private static extern int opus_encoder_get_size(Channels channels);

		[PreserveSig]
		[Token(Token = "0x6000934")]
		[Address(RVA = "0xF98D80", Offset = "0xF98D80", VA = "0xF98D80")]
		private static extern OpusStatusCode opus_encoder_init(IntPtr st, SamplingRate Fs, Channels channels, OpusApplicationType application);

		[PreserveSig]
		[Token(Token = "0x6000935")]
		[Address(RVA = "0xF974D8", Offset = "0xF974D8", VA = "0xF974D8")]
		public static extern IntPtr opus_get_version_string();

		[PreserveSig]
		[Token(Token = "0x6000936")]
		[Address(RVA = "0xF98E38", Offset = "0xF98E38", VA = "0xF98E38")]
		private static extern int opus_encode(IntPtr st, short[] pcm, int frame_size, byte[] data, int max_data_bytes);

		[PreserveSig]
		[Token(Token = "0x6000937")]
		[Address(RVA = "0xF98F08", Offset = "0xF98F08", VA = "0xF98F08")]
		private static extern int opus_encode_float(IntPtr st, float[] pcm, int frame_size, byte[] data, int max_data_bytes);

		[PreserveSig]
		[Token(Token = "0x6000938")]
		[Address(RVA = "0xF98FD8", Offset = "0xF98FD8", VA = "0xF98FD8")]
		private static extern int opus_encoder_ctl_set(IntPtr st, OpusCtlSetRequest request, int value);

		[PreserveSig]
		[Token(Token = "0x6000939")]
		[Address(RVA = "0xF99088", Offset = "0xF99088", VA = "0xF99088")]
		private static extern int opus_encoder_ctl_get(IntPtr st, OpusCtlGetRequest request, ref int value);

		[PreserveSig]
		[Token(Token = "0x600093A")]
		[Address(RVA = "0xF99138", Offset = "0xF99138", VA = "0xF99138")]
		private static extern int opus_decoder_ctl_set(IntPtr st, OpusCtlSetRequest request, int value);

		[PreserveSig]
		[Token(Token = "0x600093B")]
		[Address(RVA = "0xF991E8", Offset = "0xF991E8", VA = "0xF991E8")]
		private static extern int opus_decoder_ctl_get(IntPtr st, OpusCtlGetRequest request, ref int value);

		[PreserveSig]
		[Token(Token = "0x600093C")]
		[Address(RVA = "0xF99298", Offset = "0xF99298", VA = "0xF99298")]
		private static extern int opus_decoder_get_size(Channels channels);

		[PreserveSig]
		[Token(Token = "0x600093D")]
		[Address(RVA = "0xF99338", Offset = "0xF99338", VA = "0xF99338")]
		private static extern OpusStatusCode opus_decoder_init(IntPtr st, SamplingRate Fs, Channels channels);

		[PreserveSig]
		[Token(Token = "0x600093E")]
		[Address(RVA = "0xF993E8", Offset = "0xF993E8", VA = "0xF993E8")]
		private static extern int opus_decode(IntPtr st, byte[] data, int len, short[] pcm, int frame_size, int decode_fec);

		[PreserveSig]
		[Token(Token = "0x600093F")]
		[Address(RVA = "0xF994C0", Offset = "0xF994C0", VA = "0xF994C0")]
		private static extern int opus_decode_float(IntPtr st, byte[] data, int len, float[] pcm, int frame_size, int decode_fec);

		[PreserveSig]
		[Token(Token = "0x6000940")]
		[Address(RVA = "0xF978B0", Offset = "0xF978B0", VA = "0xF978B0")]
		public static extern int opus_packet_get_bandwidth(byte[] data);

		[PreserveSig]
		[Token(Token = "0x6000941")]
		[Address(RVA = "0xF99598", Offset = "0xF99598", VA = "0xF99598")]
		public static extern int opus_packet_get_nb_channels(byte[] data);

		[PreserveSig]
		[Token(Token = "0x6000942")]
		[Address(RVA = "0xF99640", Offset = "0xF99640", VA = "0xF99640")]
		private static extern IntPtr opus_strerror(OpusStatusCode error);

		[Token(Token = "0x6000943")]
		[Address(RVA = "0xF98604", Offset = "0xF98604", VA = "0xF98604")]
		public static IntPtr opus_encoder_create(SamplingRate Fs, Channels channels, OpusApplicationType application)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000944")]
		[Address(RVA = "0xF98A4C", Offset = "0xF98A4C", VA = "0xF98A4C")]
		public static int opus_encode(IntPtr st, short[] pcm, int frame_size, byte[] data)
		{
			return default(int);
		}

		[Token(Token = "0x6000945")]
		[Address(RVA = "0xF9885C", Offset = "0xF9885C", VA = "0xF9885C")]
		public static int opus_encode(IntPtr st, float[] pcm, int frame_size, byte[] data)
		{
			return default(int);
		}

		[Token(Token = "0x6000946")]
		[Address(RVA = "0xF98BB4", Offset = "0xF98BB4", VA = "0xF98BB4")]
		public static void opus_encoder_destroy(IntPtr st)
		{
		}

		[Token(Token = "0x6000947")]
		[Address(RVA = "0xF97F18", Offset = "0xF97F18", VA = "0xF97F18")]
		public static int get_opus_encoder_ctl(IntPtr st, OpusCtlGetRequest request)
		{
			return default(int);
		}

		[Token(Token = "0x6000948")]
		[Address(RVA = "0xF98004", Offset = "0xF98004", VA = "0xF98004")]
		public static void set_opus_encoder_ctl(IntPtr st, OpusCtlSetRequest request, int value)
		{
		}

		[Token(Token = "0x6000949")]
		[Address(RVA = "0xF997B0", Offset = "0xF997B0", VA = "0xF997B0")]
		public static int get_opus_decoder_ctl(IntPtr st, OpusCtlGetRequest request)
		{
			return default(int);
		}

		[Token(Token = "0x600094A")]
		[Address(RVA = "0xF9988C", Offset = "0xF9988C", VA = "0xF9988C")]
		public static void set_opus_decoder_ctl(IntPtr st, OpusCtlSetRequest request, int value)
		{
		}

		[Token(Token = "0x600094B")]
		[Address(RVA = "0xF97380", Offset = "0xF97380", VA = "0xF97380")]
		public static IntPtr opus_decoder_create(SamplingRate Fs, Channels channels)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600094C")]
		[Address(RVA = "0xF97C78", Offset = "0xF97C78", VA = "0xF97C78")]
		public static void opus_decoder_destroy(IntPtr st)
		{
		}

		[Token(Token = "0x600094D")]
		[Address(RVA = "0xF97AC4", Offset = "0xF97AC4", VA = "0xF97AC4")]
		public static int opus_decode(IntPtr st, byte[] data, short[] pcm, int decode_fec, int channels)
		{
			return default(int);
		}

		[Token(Token = "0x600094E")]
		[Address(RVA = "0xF97764", Offset = "0xF97764", VA = "0xF97764")]
		public static int opus_decode(IntPtr st, byte[] data, float[] pcm, int decode_fec, int channels)
		{
			return default(int);
		}

		[Token(Token = "0x600094F")]
		[Address(RVA = "0xF996E0", Offset = "0xF996E0", VA = "0xF996E0")]
		private static void HandleStatusCode(OpusStatusCode statusCode)
		{
		}

		[Token(Token = "0x6000950")]
		[Address(RVA = "0xF99954", Offset = "0xF99954", VA = "0xF99954")]
		public Wrapper()
		{
		}
	}
}
namespace POpusCodec.Enums
{
	[Token(Token = "0x2000179")]
	public enum Bandwidth
	{
		[Token(Token = "0x400080D")]
		Narrowband = 1101,
		[Token(Token = "0x400080E")]
		Mediumband,
		[Token(Token = "0x400080F")]
		Wideband,
		[Token(Token = "0x4000810")]
		SuperWideband,
		[Token(Token = "0x4000811")]
		Fullband
	}
	[Token(Token = "0x200017A")]
	public enum Channels
	{
		[Token(Token = "0x4000813")]
		Mono = 1,
		[Token(Token = "0x4000814")]
		Stereo
	}
	[Token(Token = "0x200017B")]
	public enum Complexity
	{
		[Token(Token = "0x4000816")]
		Complexity0,
		[Token(Token = "0x4000817")]
		Complexity1,
		[Token(Token = "0x4000818")]
		Complexity2,
		[Token(Token = "0x4000819")]
		Complexity3,
		[Token(Token = "0x400081A")]
		Complexity4,
		[Token(Token = "0x400081B")]
		Complexity5,
		[Token(Token = "0x400081C")]
		Complexity6,
		[Token(Token = "0x400081D")]
		Complexity7,
		[Token(Token = "0x400081E")]
		Complexity8,
		[Token(Token = "0x400081F")]
		Complexity9,
		[Token(Token = "0x4000820")]
		Complexity10
	}
	[Token(Token = "0x200017C")]
	public enum Delay
	{
		[Token(Token = "0x4000822")]
		Delay2dot5ms = 5,
		[Token(Token = "0x4000823")]
		Delay5ms = 10,
		[Token(Token = "0x4000824")]
		Delay10ms = 20,
		[Token(Token = "0x4000825")]
		Delay20ms = 40,
		[Token(Token = "0x4000826")]
		Delay40ms = 80,
		[Token(Token = "0x4000827")]
		Delay60ms = 120
	}
	[Token(Token = "0x200017D")]
	public enum ForceChannels
	{
		[Token(Token = "0x4000829")]
		NoForce = -1000,
		[Token(Token = "0x400082A")]
		Mono = 1,
		[Token(Token = "0x400082B")]
		Stereo = 2
	}
	[Token(Token = "0x200017E")]
	public enum OpusApplicationType
	{
		[Token(Token = "0x400082D")]
		Voip = 2048,
		[Token(Token = "0x400082E")]
		Audio = 2049,
		[Token(Token = "0x400082F")]
		RestrictedLowDelay = 2051
	}
	[Token(Token = "0x200017F")]
	internal enum OpusCtlGetRequest
	{
		[Token(Token = "0x4000831")]
		Application = 4001,
		[Token(Token = "0x4000832")]
		Bitrate = 4003,
		[Token(Token = "0x4000833")]
		MaxBandwidth = 4005,
		[Token(Token = "0x4000834")]
		VBR = 4007,
		[Token(Token = "0x4000835")]
		Bandwidth = 4009,
		[Token(Token = "0x4000836")]
		Complexity = 4011,
		[Token(Token = "0x4000837")]
		InbandFec = 4013,
		[Token(Token = "0x4000838")]
		PacketLossPercentage = 4015,
		[Token(Token = "0x4000839")]
		Dtx = 4017,
		[Token(Token = "0x400083A")]
		VBRConstraint = 4021,
		[Token(Token = "0x400083B")]
		ForceChannels = 4023,
		[Token(Token = "0x400083C")]
		Signal = 4025,
		[Token(Token = "0x400083D")]
		LookAhead = 4027,
		[Token(Token = "0x400083E")]
		SampleRate = 4029,
		[Token(Token = "0x400083F")]
		FinalRange = 4031,
		[Token(Token = "0x4000840")]
		Pitch = 4033,
		[Token(Token = "0x4000841")]
		Gain = 4035,
		[Token(Token = "0x4000842")]
		LsbDepth = 4037,
		[Token(Token = "0x4000843")]
		LastPacketDurationRequest = 4039
	}
	[Token(Token = "0x2000180")]
	internal enum OpusCtlSetRequest
	{
		[Token(Token = "0x4000845")]
		Application = 4000,
		[Token(Token = "0x4000846")]
		Bitrate = 4002,
		[Token(Token = "0x4000847")]
		MaxBandwidth = 4004,
		[Token(Token = "0x4000848")]
		VBR = 4006,
		[Token(Token = "0x4000849")]
		Bandwidth = 4008,
		[Token(Token = "0x400084A")]
		Complexity = 4010,
		[Token(Token = "0x400084B")]
		InbandFec = 4012,
		[Token(Token = "0x400084C")]
		PacketLossPercentage = 4014,
		[Token(Token = "0x400084D")]
		Dtx = 4016,
		[Token(Token = "0x400084E")]
		VBRConstraint = 4020,
		[Token(Token = "0x400084F")]
		ForceChannels = 4022,
		[Token(Token = "0x4000850")]
		Signal = 4024,
		[Token(Token = "0x4000851")]
		Gain = 4034,
		[Token(Token = "0x4000852")]
		LsbDepth = 4036
	}
	[Token(Token = "0x2000181")]
	public enum OpusStatusCode
	{
		[Token(Token = "0x4000854")]
		OK = 0,
		[Token(Token = "0x4000855")]
		BadArguments = -1,
		[Token(Token = "0x4000856")]
		BufferTooSmall = -2,
		[Token(Token = "0x4000857")]
		InternalError = -3,
		[Token(Token = "0x4000858")]
		InvalidPacket = -4,
		[Token(Token = "0x4000859")]
		Unimplemented = -5,
		[Token(Token = "0x400085A")]
		InvalidState = -6,
		[Token(Token = "0x400085B")]
		AllocFail = -7
	}
	[Token(Token = "0x2000182")]
	public enum SamplingRate
	{
		[Token(Token = "0x400085D")]
		Sampling08000 = 8000,
		[Token(Token = "0x400085E")]
		Sampling12000 = 12000,
		[Token(Token = "0x400085F")]
		Sampling16000 = 16000,
		[Token(Token = "0x4000860")]
		Sampling24000 = 24000,
		[Token(Token = "0x4000861")]
		Sampling48000 = 48000
	}
	[Token(Token = "0x2000183")]
	public enum SignalHint
	{
		[Token(Token = "0x4000863")]
		Auto = -1000,
		[Token(Token = "0x4000864")]
		Voice = 3001,
		[Token(Token = "0x4000865")]
		Music = 3002
	}
}
namespace ExitGames.Client.Photon.Voice
{
	[Token(Token = "0x2000184")]
	public static class AudioUtil
	{
		[Token(Token = "0x2000347")]
		public class Resampler<T> : LocalVoiceFramed<T>.IProcessor, IDisposable
		{
			[Token(Token = "0x400135E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			protected T[] frameResampled;

			[Token(Token = "0x400135F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int channels;

			[Token(Token = "0x600161C")]
			public Resampler(int dstSize, int channels)
			{
			}

			[Token(Token = "0x600161D")]
			public T[] Process(T[] buf)
			{
				return null;
			}

			[Token(Token = "0x600161E")]
			public void Dispose()
			{
			}
		}

		[Token(Token = "0x2000348")]
		public interface ILevelMeter
		{
			[Token(Token = "0x1700014A")]
			float CurrentAvgAmp
			{
				[Token(Token = "0x600161F")]
				get;
			}

			[Token(Token = "0x1700014B")]
			float CurrentPeakAmp
			{
				[Token(Token = "0x6001620")]
				get;
			}

			[Token(Token = "0x1700014C")]
			float AccumAvgPeakAmp
			{
				[Token(Token = "0x6001621")]
				get;
			}

			[Token(Token = "0x6001622")]
			void ResetAccumAvgPeakAmp();
		}

		[Token(Token = "0x2000349")]
		public class LevelMetterDummy : ILevelMeter
		{
			[Token(Token = "0x1700014D")]
			public float CurrentAvgAmp
			{
				[Token(Token = "0x6001623")]
				[Address(RVA = "0xE518A4", Offset = "0xE518A4", VA = "0xE518A4", Slot = "4")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700014E")]
			public float CurrentPeakAmp
			{
				[Token(Token = "0x6001624")]
				[Address(RVA = "0xE518AC", Offset = "0xE518AC", VA = "0xE518AC", Slot = "5")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700014F")]
			public float AccumAvgPeakAmp
			{
				[Token(Token = "0x6001625")]
				[Address(RVA = "0xE518B4", Offset = "0xE518B4", VA = "0xE518B4", Slot = "6")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x6001626")]
			[Address(RVA = "0xE518BC", Offset = "0xE518BC", VA = "0xE518BC", Slot = "7")]
			public void ResetAccumAvgPeakAmp()
			{
			}

			[Token(Token = "0x6001627")]
			[Address(RVA = "0xE518C0", Offset = "0xE518C0", VA = "0xE518C0")]
			public LevelMetterDummy()
			{
			}
		}

		[Token(Token = "0x200034A")]
		public abstract class LevelMeter<T> : LocalVoiceFramed<T>.IProcessor, IDisposable, ILevelMeter
		{
			[Token(Token = "0x4001360")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			protected float ampSum;

			[Token(Token = "0x4001361")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			protected float ampPeak;

			[Token(Token = "0x4001362")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			protected int bufferSize;

			[Token(Token = "0x4001363")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			protected float[] buffer;

			[Token(Token = "0x4001364")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			protected int prevValuesPtr;

			[Token(Token = "0x4001365")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			protected float accumAvgPeakAmpSum;

			[Token(Token = "0x4001366")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			protected int accumAvgPeakAmpCount;

			[Token(Token = "0x4001367")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39792C", Offset = "0x39792C")]
			private float <CurrentPeakAmp>k__BackingField;

			[Token(Token = "0x17000150")]
			public float CurrentAvgAmp
			{
				[Token(Token = "0x6001629")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000151")]
			public float CurrentPeakAmp
			{
				[Token(Token = "0x600162A")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x398D4C", Offset = "0x398D4C")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x600162B")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x398D5C", Offset = "0x398D5C")]
				protected set
				{
				}
			}

			[Token(Token = "0x17000152")]
			public float AccumAvgPeakAmp
			{
				[Token(Token = "0x600162C")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x6001628")]
			internal LevelMeter(int samplingRate, int numChannels)
			{
			}

			[Token(Token = "0x600162D")]
			public void ResetAccumAvgPeakAmp()
			{
			}

			[Token(Token = "0x600162E")]
			public abstract T[] Process(T[] buf);

			[Token(Token = "0x600162F")]
			public void Dispose()
			{
			}
		}

		[Token(Token = "0x200034B")]
		public class LevelMeterFloat : LevelMeter<float>
		{
			[Token(Token = "0x6001630")]
			[Address(RVA = "0xE514AC", Offset = "0xE514AC", VA = "0xE514AC")]
			public LevelMeterFloat(int samplingRate, int numChannels)
			{
			}

			[Token(Token = "0x6001631")]
			[Address(RVA = "0xE51518", Offset = "0xE51518", VA = "0xE51518", Slot = "10")]
			public override float[] Process(float[] buf)
			{
				return null;
			}
		}

		[Token(Token = "0x200034C")]
		public class LevelMeterShort : LevelMeter<short>
		{
			[Token(Token = "0x6001632")]
			[Address(RVA = "0xE51694", Offset = "0xE51694", VA = "0xE51694")]
			public LevelMeterShort(int samplingRate, int numChannels)
			{
			}

			[Token(Token = "0x6001633")]
			[Address(RVA = "0xE51700", Offset = "0xE51700", VA = "0xE51700", Slot = "10")]
			public override short[] Process(short[] buf)
			{
				return null;
			}
		}

		[Token(Token = "0x200034D")]
		public interface IVoiceDetector
		{
			[Token(Token = "0x17000153")]
			bool On
			{
				[Token(Token = "0x6001634")]
				get;
				[Token(Token = "0x6001635")]
				set;
			}

			[Token(Token = "0x17000154")]
			float Threshold
			{
				[Token(Token = "0x6001636")]
				get;
				[Token(Token = "0x6001637")]
				set;
			}

			[Token(Token = "0x17000155")]
			bool Detected
			{
				[Token(Token = "0x6001638")]
				get;
			}

			[Token(Token = "0x17000156")]
			DateTime DetectedTime
			{
				[Token(Token = "0x6001639")]
				get;
			}

			[Token(Token = "0x17000157")]
			int ActivityDelayMs
			{
				[Token(Token = "0x600163C")]
				get;
				[Token(Token = "0x600163D")]
				set;
			}

			[Token(Token = "0x14000007")]
			event Action OnDetected;
		}

		[Token(Token = "0x200034E")]
		public class VoiceDetectorCalibration<T> : LocalVoiceFramed<T>.IProcessor, IDisposable
		{
			[Token(Token = "0x4001368")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IVoiceDetector voiceDetector;

			[Token(Token = "0x4001369")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ILevelMeter levelMeter;

			[Token(Token = "0x400136A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int valuesPerSec;

			[Token(Token = "0x400136B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			protected int voiceDetectorCalibrateCount;

			[Token(Token = "0x17000158")]
			public bool VoiceDetectorCalibrating
			{
				[Token(Token = "0x600163E")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x600163F")]
			public VoiceDetectorCalibration(IVoiceDetector voiceDetector, ILevelMeter levelMeter, int samplingRate, int channels)
			{
			}

			[Token(Token = "0x6001640")]
			public void VoiceDetectorCalibrate(int durationMs)
			{
			}

			[Token(Token = "0x6001641")]
			public T[] Process(T[] buf)
			{
				return null;
			}

			[Token(Token = "0x6001642")]
			public void Dispose()
			{
			}
		}

		[Token(Token = "0x200034F")]
		public class VoiceDetectorDummy : IVoiceDetector
		{
			[Token(Token = "0x400136C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39793C", Offset = "0x39793C")]
			private DateTime <DetectedTime>k__BackingField;

			[Token(Token = "0x17000159")]
			public bool On
			{
				[Token(Token = "0x6001643")]
				[Address(RVA = "0xE518C8", Offset = "0xE518C8", VA = "0xE518C8", Slot = "4")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001644")]
				[Address(RVA = "0xE518D0", Offset = "0xE518D0", VA = "0xE518D0", Slot = "5")]
				set
				{
				}
			}

			[Token(Token = "0x1700015A")]
			public float Threshold
			{
				[Token(Token = "0x6001645")]
				[Address(RVA = "0xE518D4", Offset = "0xE518D4", VA = "0xE518D4", Slot = "6")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6001646")]
				[Address(RVA = "0xE518DC", Offset = "0xE518DC", VA = "0xE518DC", Slot = "7")]
				set
				{
				}
			}

			[Token(Token = "0x1700015B")]
			public bool Detected
			{
				[Token(Token = "0x6001647")]
				[Address(RVA = "0xE518E0", Offset = "0xE518E0", VA = "0xE518E0", Slot = "8")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x1700015C")]
			public int ActivityDelayMs
			{
				[Token(Token = "0x6001648")]
				[Address(RVA = "0xE518E8", Offset = "0xE518E8", VA = "0xE518E8", Slot = "12")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6001649")]
				[Address(RVA = "0xE518F0", Offset = "0xE518F0", VA = "0xE518F0", Slot = "13")]
				set
				{
				}
			}

			[Token(Token = "0x1700015D")]
			public DateTime DetectedTime
			{
				[Token(Token = "0x600164A")]
				[Address(RVA = "0xE518F4", Offset = "0xE518F4", VA = "0xE518F4", Slot = "9")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x398D8C", Offset = "0x398D8C")]
				get
				{
					return default(DateTime);
				}
				[Token(Token = "0x600164B")]
				[Address(RVA = "0xE51900", Offset = "0xE51900", VA = "0xE51900")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x398D9C", Offset = "0x398D9C")]
				private set
				{
				}
			}

			[Token(Token = "0x14000008")]
			public event Action OnDetected
			{
				[Token(Token = "0x600164C")]
				[Address(RVA = "0xE51910", Offset = "0xE51910", VA = "0xE51910", Slot = "10")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x398DAC", Offset = "0x398DAC")]
				add
				{
				}
				[Token(Token = "0x600164D")]
				[Address(RVA = "0xE519C0", Offset = "0xE519C0", VA = "0xE519C0", Slot = "11")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x398DBC", Offset = "0x398DBC")]
				remove
				{
				}
			}

			[Token(Token = "0x600164E")]
			[Address(RVA = "0xE51A70", Offset = "0xE51A70", VA = "0xE51A70")]
			public VoiceDetectorDummy()
			{
			}
		}

		[Token(Token = "0x2000350")]
		public abstract class VoiceDetector<T> : LocalVoiceFramed<T>.IProcessor, IDisposable, IVoiceDetector
		{
			[Token(Token = "0x400136E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39795C", Offset = "0x39795C")]
			private bool <On>k__BackingField;

			[Token(Token = "0x400136F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39796C", Offset = "0x39796C")]
			private float <Threshold>k__BackingField;

			[Token(Token = "0x4001370")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private bool detected;

			[Token(Token = "0x4001371")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39797C", Offset = "0x39797C")]
			private DateTime <DetectedTime>k__BackingField;

			[Token(Token = "0x4001373")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			protected int activityDelay;

			[Token(Token = "0x4001374")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			protected int autoSilenceCounter;

			[Token(Token = "0x4001375")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			protected int valuesCountPerSec;

			[Token(Token = "0x4001376")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			protected int activityDelayValuesCount;

			[Token(Token = "0x1700015E")]
			public bool On
			{
				[Token(Token = "0x600164F")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x398DCC", Offset = "0x398DCC")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001650")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x398DDC", Offset = "0x398DDC")]
				set
				{
				}
			}

			[Token(Token = "0x1700015F")]
			public float Threshold
			{
				[Token(Token = "0x6001651")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x398DEC", Offset = "0x398DEC")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6001652")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x398DFC", Offset = "0x398DFC")]
				set
				{
				}
			}

			[Token(Token = "0x17000160")]
			public bool Detected
			{
				[Token(Token = "0x6001653")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001654")]
				protected set
				{
				}
			}

			[Token(Token = "0x17000161")]
			public DateTime DetectedTime
			{
				[Token(Token = "0x6001655")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x398E0C", Offset = "0x398E0C")]
				get
				{
					return default(DateTime);
				}
				[Token(Token = "0x6001656")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x398E1C", Offset = "0x398E1C")]
				private set
				{
				}
			}

			[Token(Token = "0x17000162")]
			public int ActivityDelayMs
			{
				[Token(Token = "0x6001657")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6001658")]
				set
				{
				}
			}

			[Token(Token = "0x14000009")]
			public event Action OnDetected
			{
				[Token(Token = "0x6001659")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x398E2C", Offset = "0x398E2C")]
				add
				{
				}
				[Token(Token = "0x600165A")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x398E3C", Offset = "0x398E3C")]
				remove
				{
				}
			}

			[Token(Token = "0x600165B")]
			internal VoiceDetector(int samplingRate, int numChannels)
			{
			}

			[Token(Token = "0x600165C")]
			public abstract T[] Process(T[] buf);

			[Token(Token = "0x600165D")]
			public void Dispose()
			{
			}
		}

		[Token(Token = "0x2000351")]
		public class VoiceDetectorFloat : VoiceDetector<float>
		{
			[Token(Token = "0x600165E")]
			[Address(RVA = "0xE51A78", Offset = "0xE51A78", VA = "0xE51A78")]
			public VoiceDetectorFloat(int samplingRate, int numChannels)
			{
			}

			[Token(Token = "0x600165F")]
			[Address(RVA = "0xE51AF0", Offset = "0xE51AF0", VA = "0xE51AF0", Slot = "16")]
			public override float[] Process(float[] buffer)
			{
				return null;
			}
		}

		[Token(Token = "0x2000352")]
		public class VoiceDetectorShort : VoiceDetector<short>
		{
			[Token(Token = "0x6001660")]
			[Address(RVA = "0xE51BF8", Offset = "0xE51BF8", VA = "0xE51BF8")]
			internal VoiceDetectorShort(int samplingRate, int numChannels)
			{
			}

			[Token(Token = "0x6001661")]
			[Address(RVA = "0xE51C70", Offset = "0xE51C70", VA = "0xE51C70", Slot = "16")]
			public override short[] Process(short[] buffer)
			{
				return null;
			}
		}

		[Token(Token = "0x2000353")]
		public class VoiceLevelDetectCalibrate<T> : LocalVoiceFramed<T>.IProcessor, IDisposable
		{
			[Token(Token = "0x4001377")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39799C", Offset = "0x39799C")]
			private ILevelMeter <Level>k__BackingField;

			[Token(Token = "0x4001378")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3979AC", Offset = "0x3979AC")]
			private IVoiceDetector <Detector>k__BackingField;

			[Token(Token = "0x4001379")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private VoiceDetectorCalibration<T> c;

			[Token(Token = "0x17000163")]
			public ILevelMeter Level
			{
				[Token(Token = "0x6001662")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x398E4C", Offset = "0x398E4C")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001663")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x398E5C", Offset = "0x398E5C")]
				private set
				{
				}
			}

			[Token(Token = "0x17000164")]
			public IVoiceDetector Detector
			{
				[Token(Token = "0x6001664")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x398E6C", Offset = "0x398E6C")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001665")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x398E7C", Offset = "0x398E7C")]
				private set
				{
				}
			}

			[Token(Token = "0x6001666")]
			public VoiceLevelDetectCalibrate(int samplingRate, int channels)
			{
			}

			[Token(Token = "0x6001667")]
			public void Calibrate(int durationMs)
			{
			}

			[Token(Token = "0x6001668")]
			public T[] Process(T[] buf)
			{
				return null;
			}

			[Token(Token = "0x6001669")]
			public void Dispose()
			{
			}
		}

		[Token(Token = "0x6000951")]
		public static void Resample<T>(T[] src, T[] dst, int dstCount, int channels)
		{
		}

		[Token(Token = "0x6000952")]
		[Address(RVA = "0xE50C94", Offset = "0xE50C94", VA = "0xE50C94")]
		public static void ResampleAndConvert(short[] src, float[] dst, int dstCount, int channels)
		{
		}

		[Token(Token = "0x6000953")]
		[Address(RVA = "0xE50FF4", Offset = "0xE50FF4", VA = "0xE50FF4")]
		public static void ResampleAndConvert(float[] src, short[] dst, int dstCount, int channels)
		{
		}

		[Token(Token = "0x6000954")]
		[Address(RVA = "0xE51348", Offset = "0xE51348", VA = "0xE51348")]
		public static void Convert(float[] src, short[] dst, int dstCount)
		{
		}

		[Token(Token = "0x6000955")]
		[Address(RVA = "0xE513F8", Offset = "0xE513F8", VA = "0xE513F8")]
		public static void Convert(short[] src, float[] dst, int dstCount)
		{
		}

		[Token(Token = "0x6000956")]
		public static void ForceToStereo<T>(T[] src, T[] dst, int srcChannels)
		{
		}

		[Token(Token = "0x6000957")]
		internal static string tostr<T>(T[] x, int lim = 10)
		{
			return null;
		}
	}
	[Token(Token = "0x2000185")]
	public interface IAudioOut
	{
		[Token(Token = "0x17000023")]
		bool IsPlaying
		{
			[Token(Token = "0x6000958")]
			get;
		}

		[Token(Token = "0x17000024")]
		int CurrentBufferLag
		{
			[Token(Token = "0x600095D")]
			get;
		}

		[Token(Token = "0x6000959")]
		void Start(int frequency, int channels, int frameSamplesPerChannel, int playDelayMs);

		[Token(Token = "0x600095A")]
		void Stop();

		[Token(Token = "0x600095B")]
		void OnAudioFrame(float[] frame);

		[Token(Token = "0x600095C")]
		void Service();
	}
	[Token(Token = "0x2000186")]
	public abstract class ObjectPool<TType, TInfo> : IDisposable
	{
		[Token(Token = "0x4000866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected int capacity;

		[Token(Token = "0x4000867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected TInfo info;

		[Token(Token = "0x4000868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private TType[] freeObj;

		[Token(Token = "0x4000869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected int pos;

		[Token(Token = "0x400086A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected string name;

		[Token(Token = "0x400086B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool inited;

		[Token(Token = "0x17000025")]
		internal string LogPrefix
		{
			[Token(Token = "0x6000961")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000026")]
		public TInfo Info
		{
			[Token(Token = "0x6000965")]
			get
			{
				return (TInfo)null;
			}
		}

		[Token(Token = "0x600095E")]
		protected abstract TType createObject(TInfo info);

		[Token(Token = "0x600095F")]
		protected abstract void destroyObject(TType obj);

		[Token(Token = "0x6000960")]
		protected abstract bool infosMatch(TInfo i0, TInfo i1);

		[Token(Token = "0x6000962")]
		public ObjectPool(int capacity, string name)
		{
		}

		[Token(Token = "0x6000963")]
		public ObjectPool(int capacity, string name, TInfo info)
		{
		}

		[Token(Token = "0x6000964")]
		public void Init(TInfo info)
		{
		}

		[Token(Token = "0x6000966")]
		public TType AcquireOrCreate()
		{
			return (TType)null;
		}

		[Token(Token = "0x6000967")]
		public TType AcquireOrCreate(TInfo info)
		{
			return (TType)null;
		}

		[Token(Token = "0x6000968")]
		public virtual bool Release(TType obj, TInfo objInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x6000969")]
		public virtual bool Release(TType obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600096A")]
		public void Dispose()
		{
		}
	}
	[Token(Token = "0x2000187")]
	public class PrimitiveArrayPool<T> : ObjectPool<T[], int>
	{
		[Token(Token = "0x600096B")]
		public PrimitiveArrayPool(int capacity, string name)
		{
		}

		[Token(Token = "0x600096C")]
		public PrimitiveArrayPool(int capacity, string name, int info)
		{
		}

		[Token(Token = "0x600096D")]
		protected override T[] createObject(int info)
		{
			return null;
		}

		[Token(Token = "0x600096E")]
		protected override void destroyObject(T[] obj)
		{
		}

		[Token(Token = "0x600096F")]
		protected override bool infosMatch(int i0, int i1)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000188")]
	public class ImageBufferNativePool<T> : ObjectPool<T, ImageBufferInfo> where T : ImageBufferNative
	{
		[Token(Token = "0x2000354")]
		public delegate T Factory(ImageBufferNativePool<T> pool, ImageBufferInfo info);

		[Token(Token = "0x400086C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Factory factory;

		[Token(Token = "0x6000970")]
		public ImageBufferNativePool(int capacity, Factory factory, string name)
		{
		}

		[Token(Token = "0x6000971")]
		public ImageBufferNativePool(int capacity, Factory factory, string name, ImageBufferInfo info)
		{
		}

		[Token(Token = "0x6000972")]
		protected override T createObject(ImageBufferInfo info)
		{
			return null;
		}

		[Token(Token = "0x6000973")]
		protected override void destroyObject(T obj)
		{
		}

		[Token(Token = "0x6000974")]
		protected override bool infosMatch(ImageBufferInfo i0, ImageBufferInfo i1)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000189")]
	public class OpusCodec
	{
		[Token(Token = "0x2000355")]
		public enum FrameDuration
		{
			[Token(Token = "0x400137B")]
			Frame2dot5ms = 2500,
			[Token(Token = "0x400137C")]
			Frame5ms = 5000,
			[Token(Token = "0x400137D")]
			Frame10ms = 10000,
			[Token(Token = "0x400137E")]
			Frame20ms = 20000,
			[Token(Token = "0x400137F")]
			Frame40ms = 40000,
			[Token(Token = "0x4001380")]
			Frame60ms = 60000
		}

		[Token(Token = "0x2000356")]
		public static class EncoderFactory
		{
			[Token(Token = "0x600166E")]
			[Address(RVA = "0xE57FE8", Offset = "0xE57FE8", VA = "0xE57FE8")]
			public static IEncoder Create(VoiceInfo i, LocalVoice localVoice)
			{
				return null;
			}
		}

		[Token(Token = "0x2000357")]
		public abstract class Encoder<T> : IEncoderDataFlowDirect<T>, IEncoderDataFlow<T>, IEncoder, IDisposable
		{
			[Token(Token = "0x4001381")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			protected OpusEncoder encoder;

			[Token(Token = "0x4001382")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			protected bool disposed;

			[Token(Token = "0x600166F")]
			protected Encoder(VoiceInfo i)
			{
			}

			[Token(Token = "0x6001670")]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001671")]
			public abstract ArraySegment<byte> EncodeAndGetOutput(T[] buf);
		}

		[Token(Token = "0x2000358")]
		public class EncoderFloat : Encoder<float>
		{
			[Token(Token = "0x4001383")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static readonly ArraySegment<byte> EmptyBuffer;

			[Token(Token = "0x6001672")]
			[Address(RVA = "0xE58214", Offset = "0xE58214", VA = "0xE58214")]
			internal EncoderFloat(VoiceInfo i)
			{
			}

			[Token(Token = "0x6001673")]
			[Address(RVA = "0xE585F8", Offset = "0xE585F8", VA = "0xE585F8", Slot = "6")]
			public override ArraySegment<byte> EncodeAndGetOutput(float[] buf)
			{
				return default(ArraySegment<byte>);
			}
		}

		[Token(Token = "0x2000359")]
		public class EncoderShort : Encoder<short>
		{
			[Token(Token = "0x4001384")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static readonly ArraySegment<byte> EmptyBuffer;

			[Token(Token = "0x6001675")]
			[Address(RVA = "0xE582E4", Offset = "0xE582E4", VA = "0xE582E4")]
			internal EncoderShort(VoiceInfo i)
			{
			}

			[Token(Token = "0x6001676")]
			[Address(RVA = "0xE58840", Offset = "0xE58840", VA = "0xE58840", Slot = "6")]
			public override ArraySegment<byte> EncodeAndGetOutput(short[] buf)
			{
				return default(ArraySegment<byte>);
			}
		}

		[Token(Token = "0x200035A")]
		public class Decoder : IDecoderDirect, IDecoder, IDisposable
		{
			[Token(Token = "0x4001385")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private OpusDecoder decoder;

			[Token(Token = "0x6001678")]
			[Address(RVA = "0xE57E68", Offset = "0xE57E68", VA = "0xE57E68", Slot = "7")]
			public void Open(VoiceInfo i)
			{
			}

			[Token(Token = "0x6001679")]
			[Address(RVA = "0xE57EE0", Offset = "0xE57EE0", VA = "0xE57EE0", Slot = "4")]
			public byte[] DecodeToByte(byte[] buf)
			{
				return null;
			}

			[Token(Token = "0x600167A")]
			[Address(RVA = "0xE57F58", Offset = "0xE57F58", VA = "0xE57F58", Slot = "5")]
			public float[] DecodeToFloat(byte[] buf)
			{
				return null;
			}

			[Token(Token = "0x600167B")]
			[Address(RVA = "0xE57F88", Offset = "0xE57F88", VA = "0xE57F88", Slot = "6")]
			public short[] DecodeToShort(byte[] buf)
			{
				return null;
			}

			[Token(Token = "0x600167C")]
			[Address(RVA = "0xE57FB8", Offset = "0xE57FB8", VA = "0xE57FB8", Slot = "8")]
			public void Dispose()
			{
			}

			[Token(Token = "0x600167D")]
			[Address(RVA = "0xE57FE0", Offset = "0xE57FE0", VA = "0xE57FE0")]
			public Decoder()
			{
			}
		}

		[Token(Token = "0x200035B")]
		public class Util
		{
			[Token(Token = "0x600167E")]
			[Address(RVA = "0xE58A88", Offset = "0xE58A88", VA = "0xE58A88")]
			internal static int bestEncoderSampleRate(int f)
			{
				return default(int);
			}

			[Token(Token = "0x600167F")]
			[Address(RVA = "0xE58E5C", Offset = "0xE58E5C", VA = "0xE58E5C")]
			public Util()
			{
			}
		}

		[Token(Token = "0x6000975")]
		[Address(RVA = "0xE57E60", Offset = "0xE57E60", VA = "0xE57E60")]
		public OpusCodec()
		{
		}
	}
	[Token(Token = "0x200018A")]
	public interface IDataReader<T> : IDisposable
	{
		[Token(Token = "0x6000976")]
		bool Read(T[] buffer);
	}
	[Token(Token = "0x200018B")]
	public interface IServiceable
	{
		[Token(Token = "0x6000977")]
		void Service(LocalVoice localVoice);
	}
	[Token(Token = "0x200018C")]
	public class LocalVoice : IDisposable
	{
		[Token(Token = "0x400086D")]
		public const int DATA_POOL_CAPACITY = 50;

		[Token(Token = "0x400086E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396B60", Offset = "0x396B60")]
		private byte <Group>k__BackingField;

		[Token(Token = "0x400086F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396B70", Offset = "0x396B70")]
		private bool <Transmit>k__BackingField;

		[Token(Token = "0x4000870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396B80", Offset = "0x396B80")]
		private bool <IsTransmitting>k__BackingField;

		[Token(Token = "0x4000871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396B90", Offset = "0x396B90")]
		private int <FramesSent>k__BackingField;

		[Token(Token = "0x4000872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396BA0", Offset = "0x396BA0")]
		private int <FramesSentBytes>k__BackingField;

		[Token(Token = "0x4000873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396BB0", Offset = "0x396BB0")]
		private bool <Reliable>k__BackingField;

		[Token(Token = "0x4000874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396BC0", Offset = "0x396BC0")]
		private bool <Encrypt>k__BackingField;

		[Token(Token = "0x4000875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396BD0", Offset = "0x396BD0")]
		private object <LocalUserObject>k__BackingField;

		[Token(Token = "0x4000876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396BE0", Offset = "0x396BE0")]
		private IServiceable <LocalUserServiceable>k__BackingField;

		[Token(Token = "0x4000877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool debugEchoMode;

		[Token(Token = "0x4000878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal VoiceInfo info;

		[Token(Token = "0x4000879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected IEncoder encoder;

		[Token(Token = "0x400087A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		internal byte id;

		[Token(Token = "0x400087B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal int channelId;

		[Token(Token = "0x400087C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		internal byte evNumber;

		[Token(Token = "0x400087D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected VoiceClient voiceClient;

		[Token(Token = "0x400087E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		protected bool disposed;

		[Token(Token = "0x400087F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected object disposeLock;

		[Token(Token = "0x4000880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private int noTransmitCnt;

		[Token(Token = "0x4000881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal Dictionary<byte, int> eventTimestamps;

		[Token(Token = "0x17000027")]
		public byte Group
		{
			[Token(Token = "0x6000978")]
			[Address(RVA = "0xE561A0", Offset = "0xE561A0", VA = "0xE561A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397B4C", Offset = "0x397B4C")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x6000979")]
			[Address(RVA = "0xE561A8", Offset = "0xE561A8", VA = "0xE561A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397B5C", Offset = "0x397B5C")]
			set
			{
			}
		}

		[Token(Token = "0x17000028")]
		public VoiceInfo Info
		{
			[Token(Token = "0x600097A")]
			[Address(RVA = "0xE561B0", Offset = "0xE561B0", VA = "0xE561B0")]
			get
			{
				return default(VoiceInfo);
			}
		}

		[Token(Token = "0x17000029")]
		public bool Transmit
		{
			[Token(Token = "0x600097B")]
			[Address(RVA = "0xE561D0", Offset = "0xE561D0", VA = "0xE561D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397B6C", Offset = "0x397B6C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600097C")]
			[Address(RVA = "0xE561D8", Offset = "0xE561D8", VA = "0xE561D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397B7C", Offset = "0x397B7C")]
			set
			{
			}
		}

		[Token(Token = "0x1700002A")]
		public bool IsTransmitting
		{
			[Token(Token = "0x600097D")]
			[Address(RVA = "0xE561E0", Offset = "0xE561E0", VA = "0xE561E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397B8C", Offset = "0x397B8C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600097E")]
			[Address(RVA = "0xE561E8", Offset = "0xE561E8", VA = "0xE561E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397B9C", Offset = "0x397B9C")]
			protected set
			{
			}
		}

		[Token(Token = "0x1700002B")]
		public int FramesSent
		{
			[Token(Token = "0x600097F")]
			[Address(RVA = "0xE561F0", Offset = "0xE561F0", VA = "0xE561F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397BAC", Offset = "0x397BAC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000980")]
			[Address(RVA = "0xE561F8", Offset = "0xE561F8", VA = "0xE561F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397BBC", Offset = "0x397BBC")]
			private set
			{
			}
		}

		[Token(Token = "0x1700002C")]
		public int FramesSentBytes
		{
			[Token(Token = "0x6000981")]
			[Address(RVA = "0xE56200", Offset = "0xE56200", VA = "0xE56200")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397BCC", Offset = "0x397BCC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000982")]
			[Address(RVA = "0xE56208", Offset = "0xE56208", VA = "0xE56208")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397BDC", Offset = "0x397BDC")]
			private set
			{
			}
		}

		[Token(Token = "0x1700002D")]
		public bool Reliable
		{
			[Token(Token = "0x6000983")]
			[Address(RVA = "0xE56210", Offset = "0xE56210", VA = "0xE56210")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397BEC", Offset = "0x397BEC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000984")]
			[Address(RVA = "0xE56218", Offset = "0xE56218", VA = "0xE56218")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397BFC", Offset = "0x397BFC")]
			set
			{
			}
		}

		[Token(Token = "0x1700002E")]
		public bool Encrypt
		{
			[Token(Token = "0x6000985")]
			[Address(RVA = "0xE56220", Offset = "0xE56220", VA = "0xE56220")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397C0C", Offset = "0x397C0C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000986")]
			[Address(RVA = "0xE56228", Offset = "0xE56228", VA = "0xE56228")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397C1C", Offset = "0x397C1C")]
			set
			{
			}
		}

		[Token(Token = "0x1700002F")]
		public object LocalUserObject
		{
			[Token(Token = "0x6000987")]
			[Address(RVA = "0xE56230", Offset = "0xE56230", VA = "0xE56230")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397C2C", Offset = "0x397C2C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000988")]
			[Address(RVA = "0xE56238", Offset = "0xE56238", VA = "0xE56238")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397C3C", Offset = "0x397C3C")]
			set
			{
			}
		}

		[Token(Token = "0x17000030")]
		public IServiceable LocalUserServiceable
		{
			[Token(Token = "0x6000989")]
			[Address(RVA = "0xE56240", Offset = "0xE56240", VA = "0xE56240")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397C4C", Offset = "0x397C4C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600098A")]
			[Address(RVA = "0xE56248", Offset = "0xE56248", VA = "0xE56248")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397C5C", Offset = "0x397C5C")]
			set
			{
			}
		}

		[Token(Token = "0x17000031")]
		public bool DebugEchoMode
		{
			[Token(Token = "0x600098B")]
			[Address(RVA = "0xE56250", Offset = "0xE56250", VA = "0xE56250")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600098C")]
			[Address(RVA = "0xE56258", Offset = "0xE56258", VA = "0xE56258")]
			set
			{
			}
		}

		[Token(Token = "0x17000032")]
		internal string Name
		{
			[Token(Token = "0x600098F")]
			[Address(RVA = "0xE56518", Offset = "0xE56518", VA = "0xE56518")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000033")]
		internal string LogPrefix
		{
			[Token(Token = "0x6000990")]
			[Address(RVA = "0xE569A8", Offset = "0xE569A8", VA = "0xE569A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600098D")]
		[Address(RVA = "0xE56350", Offset = "0xE56350", VA = "0xE56350")]
		internal LocalVoice()
		{
		}

		[Token(Token = "0x600098E")]
		[Address(RVA = "0xE563F8", Offset = "0xE563F8", VA = "0xE563F8")]
		internal LocalVoice(VoiceClient voiceClient, IEncoder encoder, byte id, VoiceInfo voiceInfo, int channelId)
		{
		}

		[Token(Token = "0x6000991")]
		[Address(RVA = "0xE56A10", Offset = "0xE56A10", VA = "0xE56A10")]
		protected void resetNoTransmitCnt()
		{
		}

		[Token(Token = "0x6000992")]
		[Address(RVA = "0xE56A1C", Offset = "0xE56A1C", VA = "0xE56A1C", Slot = "5")]
		internal virtual void service()
		{
		}

		[Token(Token = "0x6000993")]
		[Address(RVA = "0xE56F58", Offset = "0xE56F58", VA = "0xE56F58")]
		internal void sendFrame(ArraySegment<byte> compressed)
		{
		}

		[Token(Token = "0x6000994")]
		[Address(RVA = "0xE570F0", Offset = "0xE570F0", VA = "0xE570F0")]
		public void RemoveSelf()
		{
		}

		[Token(Token = "0x6000995")]
		[Address(RVA = "0xE574CC", Offset = "0xE574CC", VA = "0xE574CC", Slot = "6")]
		public virtual void Dispose()
		{
		}
	}
	[Token(Token = "0x200018D")]
	public struct RemoteVoiceOptions
	{
		[Token(Token = "0x4000882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396BF0", Offset = "0x396BF0")]
		private Action<byte[]> <OnDecodedFrameByteAction>k__BackingField;

		[Token(Token = "0x4000883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396C00", Offset = "0x396C00")]
		private Action<float[]> <OnDecodedFrameFloatAction>k__BackingField;

		[Token(Token = "0x4000884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396C10", Offset = "0x396C10")]
		private Action<short[]> <OnDecodedFrameShortAction>k__BackingField;

		[Token(Token = "0x4000885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396C20", Offset = "0x396C20")]
		private Action <OnRemoteVoiceRemoveAction>k__BackingField;

		[Token(Token = "0x4000886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396C30", Offset = "0x396C30")]
		private object <LocalUserObject>k__BackingField;

		[Token(Token = "0x4000887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396C40", Offset = "0x396C40")]
		private IDecoder <Decoder>k__BackingField;

		[Token(Token = "0x17000034")]
		public Action<byte[]> OnDecodedFrameByteAction
		{
			[Token(Token = "0x6000996")]
			[Address(RVA = "0x46CD50", Offset = "0x46CD50", VA = "0x46CD50")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397C6C", Offset = "0x397C6C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000997")]
			[Address(RVA = "0x46CD58", Offset = "0x46CD58", VA = "0x46CD58")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397C7C", Offset = "0x397C7C")]
			set
			{
			}
		}

		[Token(Token = "0x17000035")]
		public Action<float[]> OnDecodedFrameFloatAction
		{
			[Token(Token = "0x6000998")]
			[Address(RVA = "0x46CD60", Offset = "0x46CD60", VA = "0x46CD60")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397C8C", Offset = "0x397C8C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000999")]
			[Address(RVA = "0x46CD68", Offset = "0x46CD68", VA = "0x46CD68")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397C9C", Offset = "0x397C9C")]
			set
			{
			}
		}

		[Token(Token = "0x17000036")]
		public Action<short[]> OnDecodedFrameShortAction
		{
			[Token(Token = "0x600099A")]
			[Address(RVA = "0x46CD70", Offset = "0x46CD70", VA = "0x46CD70")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397CAC", Offset = "0x397CAC")]
			get
			{
				return null;
			}
			[Token(Token = "0x600099B")]
			[Address(RVA = "0x46CD78", Offset = "0x46CD78", VA = "0x46CD78")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397CBC", Offset = "0x397CBC")]
			set
			{
			}
		}

		[Token(Token = "0x17000037")]
		public Action OnRemoteVoiceRemoveAction
		{
			[Token(Token = "0x600099C")]
			[Address(RVA = "0x46CD80", Offset = "0x46CD80", VA = "0x46CD80")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397CCC", Offset = "0x397CCC")]
			get
			{
				return null;
			}
			[Token(Token = "0x600099D")]
			[Address(RVA = "0x46CD88", Offset = "0x46CD88", VA = "0x46CD88")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397CDC", Offset = "0x397CDC")]
			set
			{
			}
		}

		[Token(Token = "0x17000038")]
		public object LocalUserObject
		{
			[Token(Token = "0x600099E")]
			[Address(RVA = "0x46CD90", Offset = "0x46CD90", VA = "0x46CD90")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397CEC", Offset = "0x397CEC")]
			get
			{
				return null;
			}
			[Token(Token = "0x600099F")]
			[Address(RVA = "0x46CD98", Offset = "0x46CD98", VA = "0x46CD98")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397CFC", Offset = "0x397CFC")]
			set
			{
			}
		}

		[Token(Token = "0x17000039")]
		public IDecoder Decoder
		{
			[Token(Token = "0x60009A0")]
			[Address(RVA = "0x46CDA0", Offset = "0x46CDA0", VA = "0x46CDA0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397D0C", Offset = "0x397D0C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009A1")]
			[Address(RVA = "0x46CDA8", Offset = "0x46CDA8", VA = "0x46CDA8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397D1C", Offset = "0x397D1C")]
			set
			{
			}
		}
	}
	[Token(Token = "0x200018E")]
	internal class RemoteVoice : IDisposable
	{
		[Token(Token = "0x4000888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396C50", Offset = "0x396C50")]
		private VoiceInfo <Info>k__BackingField;

		[Token(Token = "0x4000889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal RemoteVoiceOptions options;

		[Token(Token = "0x400088A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int channelId;

		[Token(Token = "0x400088B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int playerId;

		[Token(Token = "0x400088C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private byte voiceId;

		[Token(Token = "0x400088D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		private bool disposed;

		[Token(Token = "0x400088E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private object disposeLock;

		[Token(Token = "0x400088F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		internal byte lastEvNumber;

		[Token(Token = "0x4000890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private VoiceClient voiceClient;

		[Token(Token = "0x4000891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Queue<byte[]> frameQueue;

		[Token(Token = "0x4000892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AutoResetEvent frameQueueReady;

		[Token(Token = "0x1700003A")]
		internal VoiceInfo Info
		{
			[Token(Token = "0x60009A2")]
			[Address(RVA = "0xE58E64", Offset = "0xE58E64", VA = "0xE58E64")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397D2C", Offset = "0x397D2C")]
			get
			{
				return default(VoiceInfo);
			}
			[Token(Token = "0x60009A3")]
			[Address(RVA = "0xE58E84", Offset = "0xE58E84", VA = "0xE58E84")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397D3C", Offset = "0x397D3C")]
			private set
			{
			}
		}

		[Token(Token = "0x1700003B")]
		protected string Name
		{
			[Token(Token = "0x60009A5")]
			[Address(RVA = "0xE59354", Offset = "0xE59354", VA = "0xE59354")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700003C")]
		protected string LogPrefix
		{
			[Token(Token = "0x60009A6")]
			[Address(RVA = "0xE592EC", Offset = "0xE592EC", VA = "0xE592EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009A4")]
		[Address(RVA = "0xE58EC0", Offset = "0xE58EC0", VA = "0xE58EC0")]
		internal RemoteVoice(VoiceClient client, RemoteVoiceOptions options, int channelId, int playerId, byte voiceId, VoiceInfo info, byte lastEventNumber)
		{
		}

		[Token(Token = "0x60009A7")]
		[Address(RVA = "0xE59620", Offset = "0xE59620", VA = "0xE59620")]
		private static byte byteDiff(byte latest, byte last)
		{
			return default(byte);
		}

		[Token(Token = "0x60009A8")]
		[Address(RVA = "0xE59630", Offset = "0xE59630", VA = "0xE59630")]
		internal void receiveBytes(byte[] receivedBytes, byte evNumber)
		{
		}

		[Token(Token = "0x60009A9")]
		[Address(RVA = "0xE59E00", Offset = "0xE59E00", VA = "0xE59E00")]
		private void receiveFrame(byte[] frame)
		{
		}

		[Token(Token = "0x60009AA")]
		[Address(RVA = "0xE59BDC", Offset = "0xE59BDC", VA = "0xE59BDC")]
		private void receiveNullFrames(int count)
		{
		}

		[Token(Token = "0x60009AB")]
		[Address(RVA = "0xE5A00C", Offset = "0xE5A00C", VA = "0xE5A00C")]
		private void decodeThread(IDecoder decoder)
		{
		}

		[Token(Token = "0x60009AC")]
		[Address(RVA = "0xE5AAD0", Offset = "0xE5AAD0", VA = "0xE5AAD0")]
		private void decodeFrame(IDecoder decoder, byte[] frame)
		{
		}

		[Token(Token = "0x60009AD")]
		[Address(RVA = "0xE5ACF0", Offset = "0xE5ACF0", VA = "0xE5ACF0")]
		internal byte[] decodeFrameToByte(byte[] buffer)
		{
			return null;
		}

		[Token(Token = "0x60009AE")]
		[Address(RVA = "0xE5B050", Offset = "0xE5B050", VA = "0xE5B050")]
		internal short[] decodeFrameToShort(byte[] buffer)
		{
			return null;
		}

		[Token(Token = "0x60009AF")]
		[Address(RVA = "0xE5B3B0", Offset = "0xE5B3B0", VA = "0xE5B3B0")]
		internal float[] decodeFrameToFloat(byte[] buffer)
		{
			return null;
		}

		[Token(Token = "0x60009B0")]
		[Address(RVA = "0xE5B710", Offset = "0xE5B710", VA = "0xE5B710")]
		internal void removeAndDispose()
		{
		}

		[Token(Token = "0x60009B1")]
		[Address(RVA = "0xE5B73C", Offset = "0xE5B73C", VA = "0xE5B73C", Slot = "4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x60009B2")]
		[Address(RVA = "0xE5B818", Offset = "0xE5B818", VA = "0xE5B818")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397D4C", Offset = "0x397D4C")]
		private void <.ctor>b__10_0()
		{
		}
	}
	[Token(Token = "0x200018F")]
	public interface IAudioSource : IDisposable
	{
		[Token(Token = "0x1700003D")]
		int SamplingRate
		{
			[Token(Token = "0x60009B3")]
			get;
		}

		[Token(Token = "0x1700003E")]
		int Channels
		{
			[Token(Token = "0x60009B4")]
			get;
		}
	}
	[Token(Token = "0x2000190")]
	public interface IAudioReader<T> : IDataReader<T>, IDisposable, IAudioSource
	{
	}
	[Token(Token = "0x2000191")]
	public interface IAudioPusher<T> : IAudioSource, IDisposable
	{
		[Token(Token = "0x60009B5")]
		void SetCallback(Action<T[]> callback, LocalVoice localVoice);
	}
	[Token(Token = "0x2000192")]
	public interface ILocalVoiceAudio
	{
		[Token(Token = "0x1700003F")]
		AudioUtil.IVoiceDetector VoiceDetector
		{
			[Token(Token = "0x60009B6")]
			get;
		}

		[Token(Token = "0x17000040")]
		AudioUtil.ILevelMeter LevelMeter
		{
			[Token(Token = "0x60009B7")]
			get;
		}

		[Token(Token = "0x17000041")]
		bool VoiceDetectorCalibrating
		{
			[Token(Token = "0x60009B8")]
			get;
		}

		[Token(Token = "0x60009B9")]
		void VoiceDetectorCalibrate(int durationMs);
	}
	[Token(Token = "0x2000193")]
	public static class LocalVoiceAudio
	{
		[Token(Token = "0x4000893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static LocalVoiceAudioDummy Dummy;

		[Token(Token = "0x60009BA")]
		public static LocalVoiceAudio<T> Create<T>(VoiceClient voiceClient, byte voiceId, IEncoder encoder, VoiceInfo voiceInfo, int channelId)
		{
			return null;
		}
	}
	[Token(Token = "0x2000194")]
	public abstract class LocalVoiceAudio<T> : LocalVoiceFramed<T>, ILocalVoiceAudio
	{
		[Token(Token = "0x4000894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected AudioUtil.VoiceDetector<T> voiceDetector;

		[Token(Token = "0x4000895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected AudioUtil.VoiceDetectorCalibration<T> voiceDetectorCalibration;

		[Token(Token = "0x4000896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected AudioUtil.LevelMeter<T> levelMeter;

		[Token(Token = "0x4000897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected int channels;

		[Token(Token = "0x4000898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected int sourceSamplingRateHz;

		[Token(Token = "0x4000899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected bool resampleSource;

		[Token(Token = "0x17000042")]
		public virtual AudioUtil.IVoiceDetector VoiceDetector
		{
			[Token(Token = "0x60009BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000043")]
		public virtual AudioUtil.ILevelMeter LevelMeter
		{
			[Token(Token = "0x60009BD")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000044")]
		public bool VoiceDetectorCalibrating
		{
			[Token(Token = "0x60009BF")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60009BE")]
		public void VoiceDetectorCalibrate(int durationMs)
		{
		}

		[Token(Token = "0x60009C0")]
		internal LocalVoiceAudio(VoiceClient voiceClient, IEncoderDataFlow<T> encoder, byte id, VoiceInfo voiceInfo, int channelId)
		{
		}

		[Token(Token = "0x60009C1")]
		protected void initBuiltinProcessors()
		{
		}
	}
	[Token(Token = "0x2000195")]
	public class LocalVoiceAudioDummy : LocalVoice, ILocalVoiceAudio
	{
		[Token(Token = "0x400089A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private AudioUtil.VoiceDetectorDummy voiceDetector;

		[Token(Token = "0x400089B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private AudioUtil.LevelMetterDummy levelMeter;

		[Token(Token = "0x17000045")]
		public AudioUtil.IVoiceDetector VoiceDetector
		{
			[Token(Token = "0x60009C2")]
			[Address(RVA = "0xE576B8", Offset = "0xE576B8", VA = "0xE576B8", Slot = "7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000046")]
		public AudioUtil.ILevelMeter LevelMeter
		{
			[Token(Token = "0x60009C3")]
			[Address(RVA = "0xE576C0", Offset = "0xE576C0", VA = "0xE576C0", Slot = "8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000047")]
		public bool VoiceDetectorCalibrating
		{
			[Token(Token = "0x60009C4")]
			[Address(RVA = "0xE576C8", Offset = "0xE576C8", VA = "0xE576C8", Slot = "9")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60009C5")]
		[Address(RVA = "0xE576D0", Offset = "0xE576D0", VA = "0xE576D0", Slot = "10")]
		public void VoiceDetectorCalibrate(int durationMs)
		{
		}

		[Token(Token = "0x60009C6")]
		[Address(RVA = "0xE57624", Offset = "0xE57624", VA = "0xE57624")]
		public LocalVoiceAudioDummy()
		{
		}
	}
	[Token(Token = "0x2000196")]
	public class LocalVoiceAudioFloat : LocalVoiceAudio<float>
	{
		[Token(Token = "0x60009C7")]
		[Address(RVA = "0xE576D4", Offset = "0xE576D4", VA = "0xE576D4")]
		internal LocalVoiceAudioFloat(VoiceClient voiceClient, IEncoderDataFlow<float> encoder, byte id, VoiceInfo voiceInfo, int channelId)
		{
		}
	}
	[Token(Token = "0x2000197")]
	public class LocalVoiceAudioShort : LocalVoiceAudio<short>
	{
		[Token(Token = "0x60009C8")]
		[Address(RVA = "0xE57854", Offset = "0xE57854", VA = "0xE57854")]
		internal LocalVoiceAudioShort(VoiceClient voiceClient, IEncoderDataFlow<short> encoder, byte id, VoiceInfo voiceInfo, int channelId)
		{
		}
	}
	[Token(Token = "0x2000198")]
	internal enum EventSubcode : byte
	{
		[Token(Token = "0x400089D")]
		VoiceInfo = 1,
		[Token(Token = "0x400089E")]
		VoiceRemove,
		[Token(Token = "0x400089F")]
		Frame
	}
	[Token(Token = "0x2000199")]
	internal enum EventParam : byte
	{
		[Token(Token = "0x40008A1")]
		VoiceId = 1,
		[Token(Token = "0x40008A2")]
		SamplingRate = 2,
		[Token(Token = "0x40008A3")]
		Channels = 3,
		[Token(Token = "0x40008A4")]
		FrameDurationUs = 4,
		[Token(Token = "0x40008A5")]
		Bitrate = 5,
		[Token(Token = "0x40008A6")]
		UserData = 10,
		[Token(Token = "0x40008A7")]
		EventNumber = 11,
		[Token(Token = "0x40008A8")]
		Codec = 12
	}
	[Token(Token = "0x200019A")]
	public interface ILogger
	{
		[Token(Token = "0x60009C9")]
		void LogError(string fmt, params object[] args);

		[Token(Token = "0x60009CA")]
		void LogWarning(string fmt, params object[] args);

		[Token(Token = "0x60009CB")]
		void LogInfo(string fmt, params object[] args);

		[Token(Token = "0x60009CC")]
		void LogDebug(string fmt, params object[] args);
	}
	[Token(Token = "0x200019B")]
	internal interface IVoiceFrontend : ILogger
	{
		[Token(Token = "0x60009CD")]
		int AssignChannel(VoiceInfo v);

		[Token(Token = "0x60009CE")]
		bool IsChannelJoined(int channelId);

		[Token(Token = "0x60009CF")]
		void SendVoicesInfo(IEnumerable<LocalVoice> voices, int channelId, int targetPlayerId);

		[Token(Token = "0x60009D0")]
		void SendVoiceRemove(LocalVoice voice, int channelId, int targetPlayerId);

		[Token(Token = "0x60009D1")]
		void SendFrame(ArraySegment<byte> data, byte evNumber, byte voiceId, int channelId, LocalVoice localVoice);

		[Token(Token = "0x60009D2")]
		string ChannelIdStr(int channelId);

		[Token(Token = "0x60009D3")]
		string PlayerIdStr(int playerId);

		[Token(Token = "0x60009D4")]
		void SetDebugEchoMode(LocalVoice v);
	}
	[Token(Token = "0x200019C")]
	public class VoiceClient : IDisposable
	{
		[Token(Token = "0x200035C")]
		public delegate void RemoteVoiceInfoDelegate(int channelId, int playerId, byte voiceId, VoiceInfo voiceInfo, ref RemoteVoiceOptions options);

		[Token(Token = "0x200035D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396888", Offset = "0x396888")]
		private sealed class <get_RemoteVoiceInfos>d__39 : IEnumerable<RemoteVoiceInfo>, IEnumerable, IEnumerator<RemoteVoiceInfo>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001386")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int <>1__state;

			[Token(Token = "0x4001387")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private RemoteVoiceInfo <>2__current;

			[Token(Token = "0x4001388")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4001389")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public VoiceClient <>4__this;

			[Token(Token = "0x400138A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Dictionary<int, Dictionary<int, Dictionary<byte, RemoteVoice>>>.Enumerator <>7__wrap1;

			[Token(Token = "0x400138B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private KeyValuePair<int, Dictionary<int, Dictionary<byte, RemoteVoice>>> <channelVoices>5__3;

			[Token(Token = "0x400138C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private Dictionary<int, Dictionary<byte, RemoteVoice>>.Enumerator <>7__wrap3;

			[Token(Token = "0x400138D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private KeyValuePair<int, Dictionary<byte, RemoteVoice>> <playerVoices>5__5;

			[Token(Token = "0x400138E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private Dictionary<byte, RemoteVoice>.Enumerator <>7__wrap5;

			[Token(Token = "0x17000165")]
			private RemoteVoiceInfo System.Collections.Generic.IEnumerator<ExitGames.Client.Photon.Voice.RemoteVoiceInfo>.Current
			{
				[Token(Token = "0x600168A")]
				[Address(RVA = "0xE61464", Offset = "0xE61464", VA = "0xE61464", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000166")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600168C")]
				[Address(RVA = "0xE614E4", Offset = "0xE614E4", VA = "0xE614E4", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001684")]
			[Address(RVA = "0xE5BEC8", Offset = "0xE5BEC8", VA = "0xE5BEC8")]
			[DebuggerHidden]
			public <get_RemoteVoiceInfos>d__39(int <>1__state)
			{
			}

			[Token(Token = "0x6001685")]
			[Address(RVA = "0xE60EE8", Offset = "0xE60EE8", VA = "0xE60EE8", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001686")]
			[Address(RVA = "0xE61098", Offset = "0xE61098", VA = "0xE61098", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001687")]
			[Address(RVA = "0xE61034", Offset = "0xE61034", VA = "0xE61034")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6001688")]
			[Address(RVA = "0xE60FD0", Offset = "0xE60FD0", VA = "0xE60FD0")]
			private void <>m__Finally2()
			{
			}

			[Token(Token = "0x6001689")]
			[Address(RVA = "0xE60F6C", Offset = "0xE60F6C", VA = "0xE60F6C")]
			private void <>m__Finally3()
			{
			}

			[Token(Token = "0x600168B")]
			[Address(RVA = "0xE6146C", Offset = "0xE6146C", VA = "0xE6146C", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x600168D")]
			[Address(RVA = "0xE614EC", Offset = "0xE614EC", VA = "0xE614EC", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<RemoteVoiceInfo> System.Collections.Generic.IEnumerable<ExitGames.Client.Photon.Voice.RemoteVoiceInfo>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x600168E")]
			[Address(RVA = "0xE615AC", Offset = "0xE615AC", VA = "0xE615AC", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x200035E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396898", Offset = "0x396898")]
		private sealed class <get_RemoteVoiceLocalUserObjects>d__41 : IEnumerable<object>, IEnumerable, IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400138F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int <>1__state;

			[Token(Token = "0x4001390")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private object <>2__current;

			[Token(Token = "0x4001391")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4001392")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public VoiceClient <>4__this;

			[Token(Token = "0x4001393")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Dictionary<int, Dictionary<int, Dictionary<byte, RemoteVoice>>>.Enumerator <>7__wrap1;

			[Token(Token = "0x4001394")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Dictionary<int, Dictionary<byte, RemoteVoice>>.Enumerator <>7__wrap2;

			[Token(Token = "0x4001395")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Dictionary<byte, RemoteVoice>.Enumerator <>7__wrap3;

			[Token(Token = "0x17000167")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001695")]
				[Address(RVA = "0xE61A40", Offset = "0xE61A40", VA = "0xE61A40", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000168")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001697")]
				[Address(RVA = "0xE61AC0", Offset = "0xE61AC0", VA = "0xE61AC0", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600168F")]
			[Address(RVA = "0xE5BF80", Offset = "0xE5BF80", VA = "0xE5BF80")]
			[DebuggerHidden]
			public <get_RemoteVoiceLocalUserObjects>d__41(int <>1__state)
			{
			}

			[Token(Token = "0x6001690")]
			[Address(RVA = "0xE615B0", Offset = "0xE615B0", VA = "0xE615B0", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001691")]
			[Address(RVA = "0xE61760", Offset = "0xE61760", VA = "0xE61760", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001692")]
			[Address(RVA = "0xE616FC", Offset = "0xE616FC", VA = "0xE616FC")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6001693")]
			[Address(RVA = "0xE61698", Offset = "0xE61698", VA = "0xE61698")]
			private void <>m__Finally2()
			{
			}

			[Token(Token = "0x6001694")]
			[Address(RVA = "0xE61634", Offset = "0xE61634", VA = "0xE61634")]
			private void <>m__Finally3()
			{
			}

			[Token(Token = "0x6001696")]
			[Address(RVA = "0xE61A48", Offset = "0xE61A48", VA = "0xE61A48", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6001698")]
			[Address(RVA = "0xE61AC8", Offset = "0xE61AC8", VA = "0xE61AC8", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<object> System.Collections.Generic.IEnumerable<System.Object>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001699")]
			[Address(RVA = "0xE61B88", Offset = "0xE61B88", VA = "0xE61B88", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x200035F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3968A8", Offset = "0x3968A8")]
		private sealed class <>c__DisplayClass46_0
		{
			[Token(Token = "0x4001396")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public VoiceClient <>4__this;

			[Token(Token = "0x4001397")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public IEncoder encoder;

			[Token(Token = "0x4001398")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public VoiceInfo voiceInfo;

			[Token(Token = "0x600169A")]
			[Address(RVA = "0xE5D0A8", Offset = "0xE5D0A8", VA = "0xE5D0A8")]
			public <>c__DisplayClass46_0()
			{
			}

			[Token(Token = "0x600169B")]
			[Address(RVA = "0xE60DF4", Offset = "0xE60DF4", VA = "0xE60DF4")]
			internal LocalVoice <CreateLocalVoice>b__0(byte vId, int chId)
			{
				return null;
			}
		}

		[Token(Token = "0x2000360")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3968B8", Offset = "0x3968B8")]
		private sealed class <>c__DisplayClass47_0<T>
		{
			[Token(Token = "0x4001399")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public VoiceClient <>4__this;

			[Token(Token = "0x400139A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IEncoderDataFlow<T> encoder;

			[Token(Token = "0x400139B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public VoiceInfo voiceInfo;

			[Token(Token = "0x400139C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int frameSize;

			[Token(Token = "0x600169C")]
			public <>c__DisplayClass47_0()
			{
			}

			[Token(Token = "0x600169D")]
			internal LocalVoice <CreateLocalVoiceFramed>b__0(byte vId, int chId)
			{
				return null;
			}
		}

		[Token(Token = "0x2000361")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3968C8", Offset = "0x3968C8")]
		private sealed class <>c__DisplayClass48_0<T>
		{
			[Token(Token = "0x400139D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public VoiceClient <>4__this;

			[Token(Token = "0x400139E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IEncoderDataFlow<T> encoder;

			[Token(Token = "0x400139F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public VoiceInfo voiceInfo;

			[Token(Token = "0x600169E")]
			public <>c__DisplayClass48_0()
			{
			}

			[Token(Token = "0x600169F")]
			internal LocalVoice <CreateLocalVoiceAudio>b__0(byte vId, int chId)
			{
				return null;
			}
		}

		[Token(Token = "0x40008A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal IVoiceFrontend frontend;

		[Token(Token = "0x40008AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396C60", Offset = "0x396C60")]
		private int <FramesLost>k__BackingField;

		[Token(Token = "0x40008AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396C70", Offset = "0x396C70")]
		private int <FramesReceived>k__BackingField;

		[Token(Token = "0x40008AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396C80", Offset = "0x396C80")]
		private int <RoundTripTime>k__BackingField;

		[Token(Token = "0x40008AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396C90", Offset = "0x396C90")]
		private int <RoundTripTimeVariance>k__BackingField;

		[Token(Token = "0x40008AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396CA0", Offset = "0x396CA0")]
		private bool <SuppressInfoDuplicateWarning>k__BackingField;

		[Token(Token = "0x40008AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396CB0", Offset = "0x396CB0")]
		private RemoteVoiceInfoDelegate <OnRemoteVoiceInfoAction>k__BackingField;

		[Token(Token = "0x40008B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396CC0", Offset = "0x396CC0")]
		private int <DebugLostPercent>k__BackingField;

		[Token(Token = "0x40008B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int prevRtt;

		[Token(Token = "0x40008B2")]
		public const int ChannelAuto = -1;

		[Token(Token = "0x40008B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private byte globalGroup;

		[Token(Token = "0x40008B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		private byte voiceIdCnt;

		[Token(Token = "0x40008B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<byte, LocalVoice> localVoices;

		[Token(Token = "0x40008B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Dictionary<int, List<LocalVoice>> localVoicesPerChannel;

		[Token(Token = "0x40008B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Dictionary<int, Dictionary<int, Dictionary<byte, RemoteVoice>>> remoteVoices;

		[Token(Token = "0x40008B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private System.Random rnd;

		[Token(Token = "0x17000048")]
		public int FramesLost
		{
			[Token(Token = "0x60009D5")]
			[Address(RVA = "0xE5BA3C", Offset = "0xE5BA3C", VA = "0xE5BA3C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397D5C", Offset = "0x397D5C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60009D6")]
			[Address(RVA = "0xE5BA44", Offset = "0xE5BA44", VA = "0xE5BA44")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397D6C", Offset = "0x397D6C")]
			internal set
			{
			}
		}

		[Token(Token = "0x17000049")]
		public int FramesReceived
		{
			[Token(Token = "0x60009D7")]
			[Address(RVA = "0xE5BA4C", Offset = "0xE5BA4C", VA = "0xE5BA4C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397D7C", Offset = "0x397D7C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60009D8")]
			[Address(RVA = "0xE5BA54", Offset = "0xE5BA54", VA = "0xE5BA54")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397D8C", Offset = "0x397D8C")]
			private set
			{
			}
		}

		[Token(Token = "0x1700004A")]
		public int FramesSent
		{
			[Token(Token = "0x60009D9")]
			[Address(RVA = "0xE5BA5C", Offset = "0xE5BA5C", VA = "0xE5BA5C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700004B")]
		public int FramesSentBytes
		{
			[Token(Token = "0x60009DA")]
			[Address(RVA = "0xE5BB9C", Offset = "0xE5BB9C", VA = "0xE5BB9C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700004C")]
		public int RoundTripTime
		{
			[Token(Token = "0x60009DB")]
			[Address(RVA = "0xE5BCDC", Offset = "0xE5BCDC", VA = "0xE5BCDC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397D9C", Offset = "0x397D9C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60009DC")]
			[Address(RVA = "0xE5BCE4", Offset = "0xE5BCE4", VA = "0xE5BCE4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397DAC", Offset = "0x397DAC")]
			private set
			{
			}
		}

		[Token(Token = "0x1700004D")]
		public int RoundTripTimeVariance
		{
			[Token(Token = "0x60009DD")]
			[Address(RVA = "0xE5BCEC", Offset = "0xE5BCEC", VA = "0xE5BCEC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397DBC", Offset = "0x397DBC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60009DE")]
			[Address(RVA = "0xE5BCF4", Offset = "0xE5BCF4", VA = "0xE5BCF4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397DCC", Offset = "0x397DCC")]
			private set
			{
			}
		}

		[Token(Token = "0x1700004E")]
		public bool SuppressInfoDuplicateWarning
		{
			[Token(Token = "0x60009DF")]
			[Address(RVA = "0xE5BCFC", Offset = "0xE5BCFC", VA = "0xE5BCFC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397DDC", Offset = "0x397DDC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60009E0")]
			[Address(RVA = "0xE5BD04", Offset = "0xE5BD04", VA = "0xE5BD04")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397DEC", Offset = "0x397DEC")]
			set
			{
			}
		}

		[Token(Token = "0x1700004F")]
		public RemoteVoiceInfoDelegate OnRemoteVoiceInfoAction
		{
			[Token(Token = "0x60009E1")]
			[Address(RVA = "0xE5BD0C", Offset = "0xE5BD0C", VA = "0xE5BD0C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397DFC", Offset = "0x397DFC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009E2")]
			[Address(RVA = "0xE5BD14", Offset = "0xE5BD14", VA = "0xE5BD14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397E0C", Offset = "0x397E0C")]
			set
			{
			}
		}

		[Token(Token = "0x17000050")]
		public int DebugLostPercent
		{
			[Token(Token = "0x60009E3")]
			[Address(RVA = "0xE5BD1C", Offset = "0xE5BD1C", VA = "0xE5BD1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397E1C", Offset = "0x397E1C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60009E4")]
			[Address(RVA = "0xE5BD24", Offset = "0xE5BD24", VA = "0xE5BD24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397E2C", Offset = "0x397E2C")]
			set
			{
			}
		}

		[Token(Token = "0x17000051")]
		public IEnumerable<LocalVoice> LocalVoices
		{
			[Token(Token = "0x60009E5")]
			[Address(RVA = "0xE54208", Offset = "0xE54208", VA = "0xE54208")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000052")]
		public IEnumerable<RemoteVoiceInfo> RemoteVoiceInfos
		{
			[Token(Token = "0x60009E7")]
			[Address(RVA = "0xE5BE3C", Offset = "0xE5BE3C", VA = "0xE5BE3C")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x397E3C", Offset = "0x397E3C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000053")]
		public IEnumerable<object> RemoteVoiceLocalUserObjects
		{
			[Token(Token = "0x60009E8")]
			[Address(RVA = "0xE5BEF4", Offset = "0xE5BEF4", VA = "0xE5BEF4")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x397EAC", Offset = "0x397EAC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000054")]
		internal byte GlobalGroup
		{
			[Token(Token = "0x60009F5")]
			[Address(RVA = "0xE5FCD0", Offset = "0xE5FCD0", VA = "0xE5FCD0")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x60009F6")]
			[Address(RVA = "0xE53428", Offset = "0xE53428", VA = "0xE53428")]
			set
			{
			}
		}

		[Token(Token = "0x60009E6")]
		[Address(RVA = "0xE5BD2C", Offset = "0xE5BD2C", VA = "0xE5BD2C")]
		public IEnumerable<LocalVoice> LocalVoicesInChannel(int channelId)
		{
			return null;
		}

		[Token(Token = "0x60009E9")]
		[Address(RVA = "0xE52FEC", Offset = "0xE52FEC", VA = "0xE52FEC")]
		internal VoiceClient(IVoiceFrontend frontend)
		{
		}

		[Token(Token = "0x60009EA")]
		[Address(RVA = "0xE53134", Offset = "0xE53134", VA = "0xE53134")]
		public void Service()
		{
		}

		[Token(Token = "0x60009EB")]
		[Address(RVA = "0xE5BFAC", Offset = "0xE5BFAC", VA = "0xE5BFAC")]
		private LocalVoice createLocalVoice(VoiceInfo voiceInfo, int channelId, Func<byte, int, LocalVoice> voiceFactory)
		{
			return null;
		}

		[Token(Token = "0x60009EC")]
		[Address(RVA = "0xE5CED0", Offset = "0xE5CED0", VA = "0xE5CED0")]
		public LocalVoice CreateLocalVoice(VoiceInfo voiceInfo, int channelId = -1, [Optional] IEncoder encoder)
		{
			return null;
		}

		[Token(Token = "0x60009ED")]
		public LocalVoiceFramed<T> CreateLocalVoiceFramed<T>(VoiceInfo voiceInfo, int frameSize, int channelId = -1, [Optional] IEncoderDataFlow<T> encoder)
		{
			return null;
		}

		[Token(Token = "0x60009EE")]
		public LocalVoiceAudio<T> CreateLocalVoiceAudio<T>(VoiceInfo voiceInfo, int channelId = -1, [Optional] IEncoderDataFlow<T> encoder)
		{
			return null;
		}

		[Token(Token = "0x60009EF")]
		[Address(RVA = "0xE5C2D0", Offset = "0xE5C2D0", VA = "0xE5C2D0")]
		private byte getNewVoiceId()
		{
			return default(byte);
		}

		[Token(Token = "0x60009F0")]
		[Address(RVA = "0xE5C4C0", Offset = "0xE5C4C0", VA = "0xE5C4C0")]
		private void addVoice(byte newId, int channelId, LocalVoice v)
		{
		}

		[Token(Token = "0x60009F1")]
		[Address(RVA = "0xE5711C", Offset = "0xE5711C", VA = "0xE5711C")]
		public void RemoveLocalVoice(LocalVoice voice)
		{
		}

		[Token(Token = "0x60009F2")]
		[Address(RVA = "0xE551D8", Offset = "0xE551D8", VA = "0xE551D8")]
		internal void sendVoicesInfo(int targetPlayerId)
		{
		}

		[Token(Token = "0x60009F3")]
		[Address(RVA = "0xE5D0B0", Offset = "0xE5D0B0", VA = "0xE5D0B0")]
		internal void sendChannelVoicesInfo(int channelId, int targetPlayerId)
		{
		}

		[Token(Token = "0x60009F4")]
		[Address(RVA = "0xE54C7C", Offset = "0xE54C7C", VA = "0xE54C7C")]
		internal void onVoiceEvent(object content0, int channelId, int playerId, int localPlayerId)
		{
		}

		[Token(Token = "0x60009F7")]
		[Address(RVA = "0xE5356C", Offset = "0xE5356C", VA = "0xE5356C")]
		internal object[] buildVoicesInfo(IEnumerable<LocalVoice> voicesToSend, bool logInfo)
		{
			return null;
		}

		[Token(Token = "0x60009F8")]
		[Address(RVA = "0xE542EC", Offset = "0xE542EC", VA = "0xE542EC")]
		internal object[] buildVoiceRemoveMessage(LocalVoice v)
		{
			return null;
		}

		[Token(Token = "0x60009F9")]
		[Address(RVA = "0xE55324", Offset = "0xE55324", VA = "0xE55324")]
		internal void clearRemoteVoices()
		{
		}

		[Token(Token = "0x60009FA")]
		[Address(RVA = "0xE5FCD8", Offset = "0xE5FCD8", VA = "0xE5FCD8")]
		internal void clearRemoteVoicesInChannel(int channelId)
		{
		}

		[Token(Token = "0x60009FB")]
		[Address(RVA = "0xE5D26C", Offset = "0xE5D26C", VA = "0xE5D26C")]
		private void onVoiceInfo(int channelId, int playerId, object payload)
		{
		}

		[Token(Token = "0x60009FC")]
		[Address(RVA = "0xE5E178", Offset = "0xE5E178", VA = "0xE5E178")]
		private void onVoiceRemove(int channelId, int playerId, object payload)
		{
		}

		[Token(Token = "0x60009FD")]
		[Address(RVA = "0xE5F054", Offset = "0xE5F054", VA = "0xE5F054")]
		private void onFrame(int channelId, int playerId, byte voiceId, byte evNumber, byte[] receivedBytes)
		{
		}

		[Token(Token = "0x60009FE")]
		[Address(RVA = "0xE55ABC", Offset = "0xE55ABC", VA = "0xE55ABC")]
		internal bool removePlayerVoices(int playerId)
		{
			return default(bool);
		}

		[Token(Token = "0x60009FF")]
		[Address(RVA = "0xE60BF8", Offset = "0xE60BF8", VA = "0xE60BF8")]
		internal bool removePlayerVoices(int channelId, int playerId)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A00")]
		[Address(RVA = "0xE56720", Offset = "0xE56720", VA = "0xE56720")]
		internal string channelStr(int channelId)
		{
			return null;
		}

		[Token(Token = "0x6000A01")]
		[Address(RVA = "0xE603EC", Offset = "0xE603EC", VA = "0xE603EC")]
		internal string playerStr(int playerId)
		{
			return null;
		}

		[Token(Token = "0x6000A02")]
		[Address(RVA = "0xE55C30", Offset = "0xE55C30", VA = "0xE55C30", Slot = "4")]
		public void Dispose()
		{
		}
	}
	[Token(Token = "0x200019D")]
	public interface IEncoder : IDisposable
	{
	}
	[Token(Token = "0x200019E")]
	public interface IEncoderDataFlow<T> : IEncoder, IDisposable
	{
	}
	[Token(Token = "0x200019F")]
	public interface IEncoderDataFlowDirect<T> : IEncoderDataFlow<T>, IEncoder, IDisposable
	{
		[Token(Token = "0x6000A03")]
		ArraySegment<byte> EncodeAndGetOutput(T[] buf);
	}
	[Token(Token = "0x20001A0")]
	public interface IEncoderNativeImageDirect : IEncoder, IDisposable
	{
		[Token(Token = "0x6000A04")]
		IEnumerable<ArraySegment<byte>> EncodeAndGetOutput(IntPtr[] buf, int width, int height, int[] stride, ImageFormat imageFormat, Rotation rotation, Flip flip);
	}
	[Token(Token = "0x20001A1")]
	public interface IEncoderQueued : IEncoder, IDisposable
	{
		[Token(Token = "0x6000A05")]
		IEnumerable<ArraySegment<byte>> GetOutput();
	}
	[Token(Token = "0x20001A2")]
	public interface IDecoder : IDisposable
	{
		[Token(Token = "0x6000A06")]
		void Open(VoiceInfo info);
	}
	[Token(Token = "0x20001A3")]
	public interface IDecoderDirect : IDecoder, IDisposable
	{
		[Token(Token = "0x6000A07")]
		byte[] DecodeToByte(byte[] buf);

		[Token(Token = "0x6000A08")]
		float[] DecodeToFloat(byte[] buf);

		[Token(Token = "0x6000A09")]
		short[] DecodeToShort(byte[] buf);
	}
	[Token(Token = "0x20001A4")]
	public interface IDecoderQueued : IDecoder, IDisposable
	{
		[Token(Token = "0x6000A0A")]
		void Decode(byte[] buf);
	}
	[Token(Token = "0x20001A5")]
	public delegate void OnImageOutputNative(IntPtr buf, int width, int height, int stride);
	[Token(Token = "0x20001A6")]
	public interface IDecoderQueuedOutputImageNative : IDecoderQueued, IDecoder, IDisposable
	{
		[Token(Token = "0x17000055")]
		ImageFormat OutputImageFormat
		{
			[Token(Token = "0x6000A0F")]
			get;
			[Token(Token = "0x6000A10")]
			set;
		}

		[Token(Token = "0x17000056")]
		Flip OutputImageFlip
		{
			[Token(Token = "0x6000A11")]
			get;
			[Token(Token = "0x6000A12")]
			set;
		}

		[Token(Token = "0x17000057")]
		Func<int, int, IntPtr> OutputImageBufferGetter
		{
			[Token(Token = "0x6000A13")]
			get;
			[Token(Token = "0x6000A14")]
			set;
		}

		[Token(Token = "0x17000058")]
		OnImageOutputNative OnOutputImage
		{
			[Token(Token = "0x6000A15")]
			get;
			[Token(Token = "0x6000A16")]
			set;
		}
	}
	[Token(Token = "0x20001A7")]
	internal class UnsupportedSampleTypeException : Exception
	{
		[Token(Token = "0x6000A17")]
		[Address(RVA = "0xE5B998", Offset = "0xE5B998", VA = "0xE5B998")]
		public UnsupportedSampleTypeException(Type t)
		{
		}
	}
	[Token(Token = "0x20001A8")]
	internal class UnsupportedCodecException : Exception
	{
		[Token(Token = "0x6000A18")]
		[Address(RVA = "0xE583B4", Offset = "0xE583B4", VA = "0xE583B4")]
		public UnsupportedCodecException(Codec codec, LocalVoice voice)
		{
		}
	}
	[Token(Token = "0x20001A9")]
	public enum Codec
	{
		[Token(Token = "0x40008BA")]
		AudioOpus = 11
	}
	[Token(Token = "0x20001AA")]
	public enum ImageFormat
	{
		[Token(Token = "0x40008BC")]
		I420,
		[Token(Token = "0x40008BD")]
		YV12,
		[Token(Token = "0x40008BE")]
		Android420,
		[Token(Token = "0x40008BF")]
		RGBA,
		[Token(Token = "0x40008C0")]
		ABGR,
		[Token(Token = "0x40008C1")]
		BGRA,
		[Token(Token = "0x40008C2")]
		ARGB
	}
	[Token(Token = "0x20001AB")]
	public enum Rotation
	{
		[Token(Token = "0x40008C4")]
		Rotate0 = 0,
		[Token(Token = "0x40008C5")]
		Rotate90 = 90,
		[Token(Token = "0x40008C6")]
		Rotate180 = 180,
		[Token(Token = "0x40008C7")]
		Rotate270 = 270
	}
	[Token(Token = "0x20001AC")]
	public enum Flip
	{
		[Token(Token = "0x40008C9")]
		None,
		[Token(Token = "0x40008CA")]
		Vertical,
		[Token(Token = "0x40008CB")]
		Horizontal
	}
	[Token(Token = "0x20001AD")]
	public class ImageBufferInfo
	{
		[Token(Token = "0x40008CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396CD0", Offset = "0x396CD0")]
		private int <Width>k__BackingField;

		[Token(Token = "0x40008CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396CE0", Offset = "0x396CE0")]
		private int <Height>k__BackingField;

		[Token(Token = "0x40008CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396CF0", Offset = "0x396CF0")]
		private int[] <Stride>k__BackingField;

		[Token(Token = "0x40008CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396D00", Offset = "0x396D00")]
		private ImageFormat <Format>k__BackingField;

		[Token(Token = "0x40008D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396D10", Offset = "0x396D10")]
		private Rotation <Rotation>k__BackingField;

		[Token(Token = "0x40008D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396D20", Offset = "0x396D20")]
		private Flip <Flip>k__BackingField;

		[Token(Token = "0x17000059")]
		public int Width
		{
			[Token(Token = "0x6000A19")]
			[Address(RVA = "0xE52118", Offset = "0xE52118", VA = "0xE52118")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397F1C", Offset = "0x397F1C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000A1A")]
			[Address(RVA = "0xE52120", Offset = "0xE52120", VA = "0xE52120")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397F2C", Offset = "0x397F2C")]
			private set
			{
			}
		}

		[Token(Token = "0x1700005A")]
		public int Height
		{
			[Token(Token = "0x6000A1B")]
			[Address(RVA = "0xE52128", Offset = "0xE52128", VA = "0xE52128")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397F3C", Offset = "0x397F3C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000A1C")]
			[Address(RVA = "0xE52130", Offset = "0xE52130", VA = "0xE52130")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397F4C", Offset = "0x397F4C")]
			private set
			{
			}
		}

		[Token(Token = "0x1700005B")]
		public int[] Stride
		{
			[Token(Token = "0x6000A1D")]
			[Address(RVA = "0xE52138", Offset = "0xE52138", VA = "0xE52138")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397F5C", Offset = "0x397F5C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A1E")]
			[Address(RVA = "0xE52140", Offset = "0xE52140", VA = "0xE52140")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397F6C", Offset = "0x397F6C")]
			private set
			{
			}
		}

		[Token(Token = "0x1700005C")]
		public ImageFormat Format
		{
			[Token(Token = "0x6000A1F")]
			[Address(RVA = "0xE52148", Offset = "0xE52148", VA = "0xE52148")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397F7C", Offset = "0x397F7C")]
			get
			{
				return default(ImageFormat);
			}
			[Token(Token = "0x6000A20")]
			[Address(RVA = "0xE52150", Offset = "0xE52150", VA = "0xE52150")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397F8C", Offset = "0x397F8C")]
			private set
			{
			}
		}

		[Token(Token = "0x1700005D")]
		public Rotation Rotation
		{
			[Token(Token = "0x6000A21")]
			[Address(RVA = "0xE52158", Offset = "0xE52158", VA = "0xE52158")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397F9C", Offset = "0x397F9C")]
			get
			{
				return default(Rotation);
			}
			[Token(Token = "0x6000A22")]
			[Address(RVA = "0xE52160", Offset = "0xE52160", VA = "0xE52160")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397FAC", Offset = "0x397FAC")]
			set
			{
			}
		}

		[Token(Token = "0x1700005E")]
		public Flip Flip
		{
			[Token(Token = "0x6000A23")]
			[Address(RVA = "0xE52168", Offset = "0xE52168", VA = "0xE52168")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397FBC", Offset = "0x397FBC")]
			get
			{
				return default(Flip);
			}
			[Token(Token = "0x6000A24")]
			[Address(RVA = "0xE52170", Offset = "0xE52170", VA = "0xE52170")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397FCC", Offset = "0x397FCC")]
			set
			{
			}
		}

		[Token(Token = "0x6000A25")]
		[Address(RVA = "0xE52178", Offset = "0xE52178", VA = "0xE52178")]
		public ImageBufferInfo(int width, int height, int[] stride, ImageFormat format)
		{
		}
	}
	[Token(Token = "0x20001AE")]
	public class ImageBufferNative
	{
		[Token(Token = "0x40008D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396D30", Offset = "0x396D30")]
		private ImageBufferInfo <Info>k__BackingField;

		[Token(Token = "0x40008D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396D40", Offset = "0x396D40")]
		private IntPtr[] <Planes>k__BackingField;

		[Token(Token = "0x1700005F")]
		public ImageBufferInfo Info
		{
			[Token(Token = "0x6000A27")]
			[Address(RVA = "0xE521D0", Offset = "0xE521D0", VA = "0xE521D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397FDC", Offset = "0x397FDC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A28")]
			[Address(RVA = "0xE521D8", Offset = "0xE521D8", VA = "0xE521D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397FEC", Offset = "0x397FEC")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000060")]
		public IntPtr[] Planes
		{
			[Token(Token = "0x6000A29")]
			[Address(RVA = "0xE521E0", Offset = "0xE521E0", VA = "0xE521E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397FFC", Offset = "0x397FFC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A2A")]
			[Address(RVA = "0xE521E8", Offset = "0xE521E8", VA = "0xE521E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39800C", Offset = "0x39800C")]
			protected set
			{
			}
		}

		[Token(Token = "0x6000A26")]
		[Address(RVA = "0xE521B0", Offset = "0xE521B0", VA = "0xE521B0")]
		public ImageBufferNative(ImageBufferInfo info)
		{
		}

		[Token(Token = "0x6000A2B")]
		[Address(RVA = "0xE521F0", Offset = "0xE521F0", VA = "0xE521F0", Slot = "4")]
		public virtual void Release()
		{
		}

		[Token(Token = "0x6000A2C")]
		[Address(RVA = "0xE521F4", Offset = "0xE521F4", VA = "0xE521F4", Slot = "5")]
		public virtual void Dispose()
		{
		}
	}
	[Token(Token = "0x20001AF")]
	public class ImageBufferNativeAlloc : ImageBufferNative, IDisposable
	{
		[Token(Token = "0x40008D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ImageBufferNativePool<ImageBufferNativeAlloc> pool;

		[Token(Token = "0x6000A2D")]
		[Address(RVA = "0xE521F8", Offset = "0xE521F8", VA = "0xE521F8")]
		public ImageBufferNativeAlloc(ImageBufferNativePool<ImageBufferNativeAlloc> pool, ImageBufferInfo info)
		{
		}

		[Token(Token = "0x6000A2E")]
		[Address(RVA = "0xE5235C", Offset = "0xE5235C", VA = "0xE5235C", Slot = "4")]
		public override void Release()
		{
		}

		[Token(Token = "0x6000A2F")]
		[Address(RVA = "0xE5238C", Offset = "0xE5238C", VA = "0xE5238C", Slot = "5")]
		public override void Dispose()
		{
		}
	}
	[Token(Token = "0x20001B0")]
	public class ImageBufferNativeGCHandleSinglePlane : ImageBufferNative, IDisposable
	{
		[Token(Token = "0x40008D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ImageBufferNativePool<ImageBufferNativeGCHandleSinglePlane> pool;

		[Token(Token = "0x40008D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private GCHandle planeHandle;

		[Token(Token = "0x6000A30")]
		[Address(RVA = "0xE52470", Offset = "0xE52470", VA = "0xE52470")]
		public ImageBufferNativeGCHandleSinglePlane(ImageBufferNativePool<ImageBufferNativeGCHandleSinglePlane> pool, ImageBufferInfo info)
		{
		}

		[Token(Token = "0x6000A31")]
		[Address(RVA = "0xE525B0", Offset = "0xE525B0", VA = "0xE525B0")]
		public void PinPlane(byte[] plane)
		{
		}

		[Token(Token = "0x6000A32")]
		[Address(RVA = "0xE52610", Offset = "0xE52610", VA = "0xE52610", Slot = "4")]
		public override void Release()
		{
		}

		[Token(Token = "0x6000A33")]
		[Address(RVA = "0xE5264C", Offset = "0xE5264C", VA = "0xE5264C", Slot = "5")]
		public override void Dispose()
		{
		}
	}
	[Token(Token = "0x20001B1")]
	internal static class VoiceCodec
	{
		[Token(Token = "0x6000A34")]
		[Address(RVA = "0xE61D10", Offset = "0xE61D10", VA = "0xE61D10")]
		internal static IEncoder CreateDefaultEncoder(VoiceInfo info, LocalVoice localVoice)
		{
			return null;
		}

		[Token(Token = "0x6000A35")]
		[Address(RVA = "0xE60674", Offset = "0xE60674", VA = "0xE60674")]
		internal static IDecoder CreateDefaultDecoder(int channelId, int playerId, byte voiceId, VoiceInfo info)
		{
			return null;
		}
	}
	[Token(Token = "0x20001B2")]
	public class Framer<T>
	{
		[Token(Token = "0x2000362")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3968D8", Offset = "0x3968D8")]
		private sealed class <Frame>d__5 : IEnumerable<T[]>, IEnumerable, IEnumerator<T[]>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40013A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x40013A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T[] <>2__current;

			[Token(Token = "0x40013A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>l__initialThreadId;

			[Token(Token = "0x40013A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Framer<T> <>4__this;

			[Token(Token = "0x40013A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T[] buf;

			[Token(Token = "0x40013A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T[] <>3__buf;

			[Token(Token = "0x40013A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <s>5__2;

			[Token(Token = "0x40013A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <bufPos>5__3;

			[Token(Token = "0x17000169")]
			private T[] System.Collections.Generic.IEnumerator<T[]>.Current
			{
				[Token(Token = "0x60016A3")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700016A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60016A5")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60016A0")]
			[DebuggerHidden]
			public <Frame>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x60016A1")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60016A2")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60016A4")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x60016A6")]
			[DebuggerHidden]
			private IEnumerator<T[]> System.Collections.Generic.IEnumerable<T[]>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x60016A7")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x40008D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T[] frame;

		[Token(Token = "0x40008D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int sizeofT;

		[Token(Token = "0x40008D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int framePos;

		[Token(Token = "0x6000A36")]
		public Framer(int frameSize)
		{
		}

		[Token(Token = "0x6000A37")]
		public int Count(int bufLen)
		{
			return default(int);
		}

		[Token(Token = "0x6000A38")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x39801C", Offset = "0x39801C")]
		public IEnumerable<T[]> Frame(T[] buf)
		{
			return null;
		}
	}
	[Token(Token = "0x20001B3")]
	public class LocalVoiceFramed : LocalVoice
	{
		[Token(Token = "0x40008DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396D50", Offset = "0x396D50")]
		private int <FrameSize>k__BackingField;

		[Token(Token = "0x17000061")]
		public int FrameSize
		{
			[Token(Token = "0x6000A39")]
			[Address(RVA = "0xE579D4", Offset = "0xE579D4", VA = "0xE579D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39808C", Offset = "0x39808C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000A3A")]
			[Address(RVA = "0xE579DC", Offset = "0xE579DC", VA = "0xE579DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39809C", Offset = "0x39809C")]
			private set
			{
			}
		}

		[Token(Token = "0x6000A3B")]
		[Address(RVA = "0xE579E4", Offset = "0xE579E4", VA = "0xE579E4")]
		internal LocalVoiceFramed(VoiceClient voiceClient, IEncoder encoder, byte id, VoiceInfo voiceInfo, int channelId, int frameSize)
		{
		}
	}
	[Token(Token = "0x20001B4")]
	public class LocalVoiceFramed<T> : LocalVoiceFramed
	{
		[Token(Token = "0x2000363")]
		public interface IProcessor : IDisposable
		{
			[Token(Token = "0x60016A8")]
			T[] Process(T[] buf);
		}

		[Token(Token = "0x40008DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Framer<T> framer;

		[Token(Token = "0x40008DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int preProcessorsCnt;

		[Token(Token = "0x40008DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private List<IProcessor> processors;

		[Token(Token = "0x40008DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool dataEncodeThreadStarted;

		[Token(Token = "0x40008DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Queue<T[]> pushDataQueue;

		[Token(Token = "0x40008E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private AutoResetEvent pushDataQueueReady;

		[Token(Token = "0x40008E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private PrimitiveArrayPool<T> pushDataBufferPool;

		[Token(Token = "0x40008E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int framesSkipped;

		[Token(Token = "0x40008E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool exitThread;

		[Token(Token = "0x17000062")]
		public PrimitiveArrayPool<T> PushDataBufferPool
		{
			[Token(Token = "0x6000A41")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000063")]
		public bool PushDataAsyncReady
		{
			[Token(Token = "0x6000A42")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000A3C")]
		internal T[] processFrame(T[] buf)
		{
			return null;
		}

		[Token(Token = "0x6000A3D")]
		public void AddPostProcessor(params IProcessor[] processors)
		{
		}

		[Token(Token = "0x6000A3E")]
		public void AddPreProcessor(params IProcessor[] processors)
		{
		}

		[Token(Token = "0x6000A3F")]
		public void ClearProcessors()
		{
		}

		[Token(Token = "0x6000A40")]
		internal LocalVoiceFramed(VoiceClient voiceClient, IEncoder encoder, byte id, VoiceInfo voiceInfo, int channelId, int frameSize)
		{
		}

		[Token(Token = "0x6000A43")]
		public void PushDataAsync(T[] buf)
		{
		}

		[Token(Token = "0x6000A44")]
		private void PushDataAsyncThread()
		{
		}

		[Token(Token = "0x6000A45")]
		public void PushData(T[] buf)
		{
		}

		[Token(Token = "0x6000A46")]
		public override void Dispose()
		{
		}
	}
	[Token(Token = "0x20001B5")]
	public struct VoiceInfo
	{
		[Token(Token = "0x40008E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396D60", Offset = "0x396D60")]
		private Codec <Codec>k__BackingField;

		[Token(Token = "0x40008E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396D70", Offset = "0x396D70")]
		private int <SamplingRate>k__BackingField;

		[Token(Token = "0x40008E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396D80", Offset = "0x396D80")]
		private int <SourceSamplingRate>k__BackingField;

		[Token(Token = "0x40008E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396D90", Offset = "0x396D90")]
		private int <Channels>k__BackingField;

		[Token(Token = "0x40008E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396DA0", Offset = "0x396DA0")]
		private int <FrameDurationUs>k__BackingField;

		[Token(Token = "0x40008E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396DB0", Offset = "0x396DB0")]
		private int <Bitrate>k__BackingField;

		[Token(Token = "0x40008EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396DC0", Offset = "0x396DC0")]
		private object <UserData>k__BackingField;

		[Token(Token = "0x40008EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396DD0", Offset = "0x396DD0")]
		private int <Width>k__BackingField;

		[Token(Token = "0x40008EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396DE0", Offset = "0x396DE0")]
		private int <Height>k__BackingField;

		[Token(Token = "0x17000064")]
		public Codec Codec
		{
			[Token(Token = "0x6000A4A")]
			[Address(RVA = "0x46CF74", Offset = "0x46CF74", VA = "0x46CF74")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3980AC", Offset = "0x3980AC")]
			get
			{
				return default(Codec);
			}
			[Token(Token = "0x6000A4B")]
			[Address(RVA = "0x46CF7C", Offset = "0x46CF7C", VA = "0x46CF7C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3980BC", Offset = "0x3980BC")]
			set
			{
			}
		}

		[Token(Token = "0x17000065")]
		public int SamplingRate
		{
			[Token(Token = "0x6000A4C")]
			[Address(RVA = "0x46CF84", Offset = "0x46CF84", VA = "0x46CF84")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3980CC", Offset = "0x3980CC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000A4D")]
			[Address(RVA = "0x46CF8C", Offset = "0x46CF8C", VA = "0x46CF8C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3980DC", Offset = "0x3980DC")]
			set
			{
			}
		}

		[Token(Token = "0x17000066")]
		public int SourceSamplingRate
		{
			[Token(Token = "0x6000A4E")]
			[Address(RVA = "0x46CF94", Offset = "0x46CF94", VA = "0x46CF94")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3980EC", Offset = "0x3980EC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000A4F")]
			[Address(RVA = "0x46CF9C", Offset = "0x46CF9C", VA = "0x46CF9C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3980FC", Offset = "0x3980FC")]
			set
			{
			}
		}

		[Token(Token = "0x17000067")]
		public int Channels
		{
			[Token(Token = "0x6000A50")]
			[Address(RVA = "0x46CFA4", Offset = "0x46CFA4", VA = "0x46CFA4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39810C", Offset = "0x39810C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000A51")]
			[Address(RVA = "0x46CFAC", Offset = "0x46CFAC", VA = "0x46CFAC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39811C", Offset = "0x39811C")]
			set
			{
			}
		}

		[Token(Token = "0x17000068")]
		public int FrameDurationUs
		{
			[Token(Token = "0x6000A52")]
			[Address(RVA = "0x46CFB4", Offset = "0x46CFB4", VA = "0x46CFB4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39812C", Offset = "0x39812C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000A53")]
			[Address(RVA = "0x46CFBC", Offset = "0x46CFBC", VA = "0x46CFBC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39813C", Offset = "0x39813C")]
			set
			{
			}
		}

		[Token(Token = "0x17000069")]
		public int Bitrate
		{
			[Token(Token = "0x6000A54")]
			[Address(RVA = "0x46CFC4", Offset = "0x46CFC4", VA = "0x46CFC4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39814C", Offset = "0x39814C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000A55")]
			[Address(RVA = "0x46CFCC", Offset = "0x46CFCC", VA = "0x46CFCC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39815C", Offset = "0x39815C")]
			set
			{
			}
		}

		[Token(Token = "0x1700006A")]
		public object UserData
		{
			[Token(Token = "0x6000A56")]
			[Address(RVA = "0x46CFD4", Offset = "0x46CFD4", VA = "0x46CFD4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39816C", Offset = "0x39816C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A57")]
			[Address(RVA = "0x46CFDC", Offset = "0x46CFDC", VA = "0x46CFDC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39817C", Offset = "0x39817C")]
			set
			{
			}
		}

		[Token(Token = "0x1700006B")]
		public int FrameDurationSamples
		{
			[Token(Token = "0x6000A58")]
			[Address(RVA = "0x46CFE4", Offset = "0x46CFE4", VA = "0x46CFE4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700006C")]
		public int FrameSize
		{
			[Token(Token = "0x6000A59")]
			[Address(RVA = "0x46D00C", Offset = "0x46D00C", VA = "0x46D00C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700006D")]
		public int Width
		{
			[Token(Token = "0x6000A5A")]
			[Address(RVA = "0x46D03C", Offset = "0x46D03C", VA = "0x46D03C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39818C", Offset = "0x39818C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000A5B")]
			[Address(RVA = "0x46D044", Offset = "0x46D044", VA = "0x46D044")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39819C", Offset = "0x39819C")]
			set
			{
			}
		}

		[Token(Token = "0x1700006E")]
		public int Height
		{
			[Token(Token = "0x6000A5C")]
			[Address(RVA = "0x46D04C", Offset = "0x46D04C", VA = "0x46D04C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3981AC", Offset = "0x3981AC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000A5D")]
			[Address(RVA = "0x46D054", Offset = "0x46D054", VA = "0x46D054")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3981BC", Offset = "0x3981BC")]
			set
			{
			}
		}

		[Token(Token = "0x6000A47")]
		[Address(RVA = "0xE61DFC", Offset = "0xE61DFC", VA = "0xE61DFC")]
		public static VoiceInfo CreateAudioOpus(SamplingRate samplingRate, int sourceSamplingRate, int channels, OpusCodec.FrameDuration frameDurationUs, int bitrate, [Optional] object userdata)
		{
			return default(VoiceInfo);
		}

		[Token(Token = "0x6000A48")]
		[Address(RVA = "0x46CF6C", Offset = "0x46CF6C", VA = "0x46CF6C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A49")]
		[Address(RVA = "0xE6016C", Offset = "0xE6016C", VA = "0xE6016C")]
		internal static VoiceInfo CreateFromEventPayload(Dictionary<byte, object> h)
		{
			return default(VoiceInfo);
		}
	}
	[Token(Token = "0x20001B6")]
	public class RemoteVoiceInfo
	{
		[Token(Token = "0x40008ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396DF0", Offset = "0x396DF0")]
		private VoiceInfo <Info>k__BackingField;

		[Token(Token = "0x40008EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396E00", Offset = "0x396E00")]
		private int <ChannelId>k__BackingField;

		[Token(Token = "0x40008EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396E10", Offset = "0x396E10")]
		private int <PlayerId>k__BackingField;

		[Token(Token = "0x40008F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396E20", Offset = "0x396E20")]
		private byte <VoiceId>k__BackingField;

		[Token(Token = "0x40008F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396E30", Offset = "0x396E30")]
		private object <LocalUserObject>k__BackingField;

		[Token(Token = "0x1700006F")]
		public VoiceInfo Info
		{
			[Token(Token = "0x6000A5F")]
			[Address(RVA = "0xE5B89C", Offset = "0xE5B89C", VA = "0xE5B89C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3981CC", Offset = "0x3981CC")]
			get
			{
				return default(VoiceInfo);
			}
			[Token(Token = "0x6000A60")]
			[Address(RVA = "0xE5B8BC", Offset = "0xE5B8BC", VA = "0xE5B8BC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3981DC", Offset = "0x3981DC")]
			private set
			{
			}
		}

		[Token(Token = "0x17000070")]
		public int ChannelId
		{
			[Token(Token = "0x6000A61")]
			[Address(RVA = "0xE5B8F8", Offset = "0xE5B8F8", VA = "0xE5B8F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3981EC", Offset = "0x3981EC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000A62")]
			[Address(RVA = "0xE5B900", Offset = "0xE5B900", VA = "0xE5B900")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3981FC", Offset = "0x3981FC")]
			private set
			{
			}
		}

		[Token(Token = "0x17000071")]
		public int PlayerId
		{
			[Token(Token = "0x6000A63")]
			[Address(RVA = "0xE5B908", Offset = "0xE5B908", VA = "0xE5B908")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39820C", Offset = "0x39820C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000A64")]
			[Address(RVA = "0xE5B910", Offset = "0xE5B910", VA = "0xE5B910")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39821C", Offset = "0x39821C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000072")]
		public byte VoiceId
		{
			[Token(Token = "0x6000A65")]
			[Address(RVA = "0xE5B918", Offset = "0xE5B918", VA = "0xE5B918")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39822C", Offset = "0x39822C")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x6000A66")]
			[Address(RVA = "0xE5B920", Offset = "0xE5B920", VA = "0xE5B920")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39823C", Offset = "0x39823C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000073")]
		public object LocalUserObject
		{
			[Token(Token = "0x6000A67")]
			[Address(RVA = "0xE5B928", Offset = "0xE5B928", VA = "0xE5B928")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39824C", Offset = "0x39824C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A68")]
			[Address(RVA = "0xE5B930", Offset = "0xE5B930", VA = "0xE5B930")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39825C", Offset = "0x39825C")]
			private set
			{
			}
		}

		[Token(Token = "0x6000A5E")]
		[Address(RVA = "0xE5B820", Offset = "0xE5B820", VA = "0xE5B820")]
		internal RemoteVoiceInfo(int channelId, int playerId, byte voiceId, VoiceInfo info, object localUserObject)
		{
		}
	}
	[Token(Token = "0x20001B7")]
	public abstract class BufferReaderPushAdapterBase<T> : IServiceable
	{
		[Token(Token = "0x40008F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected IDataReader<T> reader;

		[Token(Token = "0x6000A69")]
		public abstract void Service(LocalVoice localVoice);

		[Token(Token = "0x6000A6A")]
		public BufferReaderPushAdapterBase(IDataReader<T> reader)
		{
		}

		[Token(Token = "0x6000A6B")]
		public void Dispose()
		{
		}
	}
	[Token(Token = "0x20001B8")]
	public class BufferReaderPushAdapter<T> : BufferReaderPushAdapterBase<T>
	{
		[Token(Token = "0x40008F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected T[] buffer;

		[Token(Token = "0x6000A6C")]
		public BufferReaderPushAdapter(LocalVoice localVoice, IDataReader<T> reader)
		{
		}

		[Token(Token = "0x6000A6D")]
		public override void Service(LocalVoice localVoice)
		{
		}
	}
	[Token(Token = "0x20001B9")]
	public class BufferReaderPushAdapterAsyncPool<T> : BufferReaderPushAdapterBase<T>
	{
		[Token(Token = "0x6000A6E")]
		public BufferReaderPushAdapterAsyncPool(LocalVoice localVoice, IDataReader<T> reader)
		{
		}

		[Token(Token = "0x6000A6F")]
		public override void Service(LocalVoice localVoice)
		{
		}
	}
	[Token(Token = "0x20001BA")]
	public class BufferReaderPushAdapterAsyncPoolCopy<T> : BufferReaderPushAdapterBase<T>
	{
		[Token(Token = "0x40008F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected T[] buffer;

		[Token(Token = "0x6000A70")]
		public BufferReaderPushAdapterAsyncPoolCopy(LocalVoice localVoice, IDataReader<T> reader)
		{
		}

		[Token(Token = "0x6000A71")]
		public override void Service(LocalVoice localVoice)
		{
		}
	}
	[Token(Token = "0x20001BB")]
	public class BufferReaderPushAdapterAsyncPoolFloatToShort : BufferReaderPushAdapterBase<float>
	{
		[Token(Token = "0x40008F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private float[] buffer;

		[Token(Token = "0x6000A72")]
		[Address(RVA = "0xE51D84", Offset = "0xE51D84", VA = "0xE51D84")]
		public BufferReaderPushAdapterAsyncPoolFloatToShort(LocalVoice localVoice, IDataReader<float> reader)
		{
		}

		[Token(Token = "0x6000A73")]
		[Address(RVA = "0xE51E88", Offset = "0xE51E88", VA = "0xE51E88", Slot = "5")]
		public override void Service(LocalVoice localVoice)
		{
		}
	}
	[Token(Token = "0x20001BC")]
	internal class VoiceEventCode
	{
		[Token(Token = "0x40008F6")]
		public const byte Code0 = 201;

		[Token(Token = "0x6000A74")]
		[Address(RVA = "0xE54074", Offset = "0xE54074", VA = "0xE54074")]
		public static byte GetCode(int channelID)
		{
			return default(byte);
		}

		[Token(Token = "0x6000A75")]
		[Address(RVA = "0xE54C48", Offset = "0xE54C48", VA = "0xE54C48")]
		public static bool TryGetChannelID(byte evCode, int maxChannels, out byte channelID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A76")]
		[Address(RVA = "0xE61DF4", Offset = "0xE61DF4", VA = "0xE61DF4")]
		public VoiceEventCode()
		{
		}
	}
	[Token(Token = "0x20001BD")]
	public class LoadBalancingFrontend : LoadBalancingClient, IVoiceFrontend, ILogger, IDisposable
	{
		[Serializable]
		[Token(Token = "0x2000364")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3968E8", Offset = "0x3968E8")]
		private sealed class <>c
		{
			[Token(Token = "0x40013A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40013A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public static Func<LocalVoice, bool> <>9__26_0;

			[Token(Token = "0x60016AA")]
			[Address(RVA = "0xE56178", Offset = "0xE56178", VA = "0xE56178")]
			public <>c()
			{
			}

			[Token(Token = "0x60016AB")]
			[Address(RVA = "0xE56180", Offset = "0xE56180", VA = "0xE56180")]
			internal bool <SendDebugEchoVoicesInfo>b__26_0(LocalVoice x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40008F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected VoiceClient voiceClient;

		[Token(Token = "0x40008F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396E40", Offset = "0x396E40")]
		private Action<EventData> <OnEventAction>k__BackingField;

		[Token(Token = "0x40008F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396E50", Offset = "0x396E50")]
		private Action<ClientState> <OnStateChangeAction>k__BackingField;

		[Token(Token = "0x40008FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private object sendLock;

		[Token(Token = "0x17000074")]
		public VoiceClient VoiceClient
		{
			[Token(Token = "0x6000A77")]
			[Address(RVA = "0xE52650", Offset = "0xE52650", VA = "0xE52650")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000075")]
		public new Action<EventData> OnEventAction
		{
			[Token(Token = "0x6000A7F")]
			[Address(RVA = "0xE52D84", Offset = "0xE52D84", VA = "0xE52D84")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39826C", Offset = "0x39826C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A80")]
			[Address(RVA = "0xE52D8C", Offset = "0xE52D8C", VA = "0xE52D8C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39827C", Offset = "0x39827C")]
			set
			{
			}
		}

		[Token(Token = "0x17000076")]
		public new Action<ClientState> OnStateChangeAction
		{
			[Token(Token = "0x6000A81")]
			[Address(RVA = "0xE52D94", Offset = "0xE52D94", VA = "0xE52D94")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39828C", Offset = "0x39828C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A82")]
			[Address(RVA = "0xE52D9C", Offset = "0xE52D9C", VA = "0xE52D9C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39829C", Offset = "0x39829C")]
			set
			{
			}
		}

		[Token(Token = "0x17000077")]
		public byte GlobalAudioGroup
		{
			[Token(Token = "0x6000A86")]
			[Address(RVA = "0xE532BC", Offset = "0xE532BC", VA = "0xE532BC")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x6000A87")]
			[Address(RVA = "0xE532DC", Offset = "0xE532DC", VA = "0xE532DC")]
			set
			{
			}
		}

		[Token(Token = "0x6000A78")]
		[Address(RVA = "0xE52658", Offset = "0xE52658", VA = "0xE52658", Slot = "27")]
		public void LogError(string fmt, params object[] args)
		{
		}

		[Token(Token = "0x6000A79")]
		[Address(RVA = "0xE52694", Offset = "0xE52694", VA = "0xE52694", Slot = "28")]
		public void LogWarning(string fmt, params object[] args)
		{
		}

		[Token(Token = "0x6000A7A")]
		[Address(RVA = "0xE526D0", Offset = "0xE526D0", VA = "0xE526D0", Slot = "29")]
		public void LogInfo(string fmt, params object[] args)
		{
		}

		[Token(Token = "0x6000A7B")]
		[Address(RVA = "0xE5270C", Offset = "0xE5270C", VA = "0xE5270C", Slot = "30")]
		public void LogDebug(string fmt, params object[] args)
		{
		}

		[Token(Token = "0x6000A7C")]
		[Address(RVA = "0xE52748", Offset = "0xE52748", VA = "0xE52748", Slot = "19")]
		public int AssignChannel(VoiceInfo v)
		{
			return default(int);
		}

		[Token(Token = "0x6000A7D")]
		[Address(RVA = "0xE5284C", Offset = "0xE5284C", VA = "0xE5284C", Slot = "20")]
		public bool IsChannelJoined(int channelId)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A7E")]
		[Address(RVA = "0xE52860", Offset = "0xE52860", VA = "0xE52860", Slot = "26")]
		public void SetDebugEchoMode(LocalVoice v)
		{
		}

		[Token(Token = "0x6000A83")]
		[Address(RVA = "0xE52DA4", Offset = "0xE52DA4", VA = "0xE52DA4")]
		public LoadBalancingFrontend(ConnectionProtocol connectionProtocol = ConnectionProtocol.Udp)
		{
		}

		[Token(Token = "0x6000A84")]
		[Address(RVA = "0xE53104", Offset = "0xE53104", VA = "0xE53104")]
		public new void Service()
		{
		}

		[Token(Token = "0x6000A85")]
		[Address(RVA = "0xE5327C", Offset = "0xE5327C", VA = "0xE5327C", Slot = "32")]
		public virtual bool ChangeAudioGroups(byte[] groupsToRemove, byte[] groupsToAdd)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A88")]
		[Address(RVA = "0xE52980", Offset = "0xE52980", VA = "0xE52980", Slot = "21")]
		public void SendVoicesInfo(IEnumerable<LocalVoice> voices, int channelId, int targetPlayerId)
		{
		}

		[Token(Token = "0x6000A89")]
		[Address(RVA = "0xE54080", Offset = "0xE54080", VA = "0xE54080")]
		public void SendDebugEchoVoicesInfo(int channelId)
		{
		}

		[Token(Token = "0x6000A8A")]
		[Address(RVA = "0xE52B7C", Offset = "0xE52B7C", VA = "0xE52B7C", Slot = "22")]
		public void SendVoiceRemove(LocalVoice voice, int channelId, int targetPlayerId)
		{
		}

		[Token(Token = "0x6000A8B")]
		[Address(RVA = "0xE54630", Offset = "0xE54630", VA = "0xE54630", Slot = "23")]
		public void SendFrame(ArraySegment<byte> data, byte evNumber, byte voiceId, int channelId, LocalVoice localVoice)
		{
		}

		[Token(Token = "0x6000A8C")]
		[Address(RVA = "0xE54990", Offset = "0xE54990", VA = "0xE54990", Slot = "24")]
		public string ChannelIdStr(int channelId)
		{
			return null;
		}

		[Token(Token = "0x6000A8D")]
		[Address(RVA = "0xE54998", Offset = "0xE54998", VA = "0xE54998", Slot = "25")]
		public string PlayerIdStr(int playerId)
		{
			return null;
		}

		[Token(Token = "0x6000A8E")]
		[Address(RVA = "0xE549A0", Offset = "0xE549A0", VA = "0xE549A0")]
		private void onEventActionVoiceClient(EventData ev)
		{
		}

		[Token(Token = "0x6000A8F")]
		[Address(RVA = "0xE55930", Offset = "0xE55930", VA = "0xE55930")]
		private void onStateChangeVoiceClient(ClientState state)
		{
		}

		[Token(Token = "0x6000A90")]
		[Address(RVA = "0xE55860", Offset = "0xE55860", VA = "0xE55860")]
		private void onPlayerLeave(int playerId)
		{
		}

		[Token(Token = "0x6000A91")]
		[Address(RVA = "0xE55C0C", Offset = "0xE55C0C", VA = "0xE55C0C", Slot = "31")]
		public void Dispose()
		{
		}
	}
	[Token(Token = "0x20001BE")]
	public class AudioInEnumerator : IDisposable
	{
		[Token(Token = "0x40008FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly bool IsSupported;

		[Token(Token = "0x17000078")]
		public int Count
		{
			[Token(Token = "0x6000A94")]
			[Address(RVA = "0xE50C68", Offset = "0xE50C68", VA = "0xE50C68")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000A92")]
		[Address(RVA = "0xE50C5C", Offset = "0xE50C5C", VA = "0xE50C5C")]
		public AudioInEnumerator()
		{
		}

		[Token(Token = "0x6000A93")]
		[Address(RVA = "0xE50C64", Offset = "0xE50C64", VA = "0xE50C64")]
		public void Refresh()
		{
		}

		[Token(Token = "0x6000A95")]
		[Address(RVA = "0xE50C70", Offset = "0xE50C70", VA = "0xE50C70")]
		public string NameAtIndex(int i)
		{
			return null;
		}

		[Token(Token = "0x6000A96")]
		[Address(RVA = "0xE50C78", Offset = "0xE50C78", VA = "0xE50C78")]
		public int IDAtIndex(int i)
		{
			return default(int);
		}

		[Token(Token = "0x6000A97")]
		[Address(RVA = "0xE50C80", Offset = "0xE50C80", VA = "0xE50C80")]
		public bool IDIsValid(int id)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A98")]
		[Address(RVA = "0xE50C90", Offset = "0xE50C90", VA = "0xE50C90", Slot = "4")]
		public void Dispose()
		{
		}
	}
}
namespace ExitGames.Client.Photon.LoadBalancing
{
	[Token(Token = "0x20001BF")]
	public static class Extensions
	{
		[Token(Token = "0x6000A99")]
		[Address(RVA = "0xEA8BC8", Offset = "0xEA8BC8", VA = "0xEA8BC8")]
		public static void Merge(this IDictionary target, IDictionary addHash)
		{
		}

		[Token(Token = "0x6000A9A")]
		[Address(RVA = "0xEA906C", Offset = "0xEA906C", VA = "0xEA906C")]
		public static void MergeStringKeys(this IDictionary target, IDictionary addHash)
		{
		}

		[Token(Token = "0x6000A9B")]
		[Address(RVA = "0xEA9528", Offset = "0xEA9528", VA = "0xEA9528")]
		public static string ToStringFull(this IDictionary origin)
		{
			return null;
		}

		[Token(Token = "0x6000A9C")]
		[Address(RVA = "0xEA95A8", Offset = "0xEA95A8", VA = "0xEA95A8")]
		public static string ToStringFull(this object[] data)
		{
			return null;
		}

		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0xEA9710", Offset = "0xEA9710", VA = "0xEA9710")]
		public static Hashtable StripToStringKeys(this IDictionary original)
		{
			return null;
		}

		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0xEA9B40", Offset = "0xEA9B40", VA = "0xEA9B40")]
		public static void StripKeysWithNullValues(this IDictionary original)
		{
		}

		[Token(Token = "0x6000A9F")]
		[Address(RVA = "0xEA9E8C", Offset = "0xEA9E8C", VA = "0xEA9E8C")]
		public static bool Contains(this int[] target, int nr)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001C0")]
	public class FriendInfo
	{
		[Token(Token = "0x40008FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396E60", Offset = "0x396E60")]
		private string <UserId>k__BackingField;

		[Token(Token = "0x40008FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396E70", Offset = "0x396E70")]
		private bool <IsOnline>k__BackingField;

		[Token(Token = "0x40008FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396E80", Offset = "0x396E80")]
		private string <Room>k__BackingField;

		[Token(Token = "0x17000079")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x39924C", Offset = "0x39924C")]
		public string Name
		{
			[Token(Token = "0x6000AA0")]
			[Address(RVA = "0xEA9EFC", Offset = "0xEA9EFC", VA = "0xEA9EFC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007A")]
		public string UserId
		{
			[Token(Token = "0x6000AA1")]
			[Address(RVA = "0xEA9F04", Offset = "0xEA9F04", VA = "0xEA9F04")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39831C", Offset = "0x39831C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AA2")]
			[Address(RVA = "0xEA9F0C", Offset = "0xEA9F0C", VA = "0xEA9F0C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39832C", Offset = "0x39832C")]
			protected internal set
			{
			}
		}

		[Token(Token = "0x1700007B")]
		public bool IsOnline
		{
			[Token(Token = "0x6000AA3")]
			[Address(RVA = "0xEA9F14", Offset = "0xEA9F14", VA = "0xEA9F14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39833C", Offset = "0x39833C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000AA4")]
			[Address(RVA = "0xEA9F1C", Offset = "0xEA9F1C", VA = "0xEA9F1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39834C", Offset = "0x39834C")]
			protected internal set
			{
			}
		}

		[Token(Token = "0x1700007C")]
		public string Room
		{
			[Token(Token = "0x6000AA5")]
			[Address(RVA = "0xEA9F24", Offset = "0xEA9F24", VA = "0xEA9F24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39835C", Offset = "0x39835C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AA6")]
			[Address(RVA = "0xEA9F2C", Offset = "0xEA9F2C", VA = "0xEA9F2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39836C", Offset = "0x39836C")]
			protected internal set
			{
			}
		}

		[Token(Token = "0x1700007D")]
		public bool IsInRoom
		{
			[Token(Token = "0x6000AA7")]
			[Address(RVA = "0xEA9F34", Offset = "0xEA9F34", VA = "0xEA9F34")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000AA8")]
		[Address(RVA = "0xEA9F60", Offset = "0xEA9F60", VA = "0xEA9F60", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000AA9")]
		[Address(RVA = "0xEAA014", Offset = "0xEAA014", VA = "0xEAA014")]
		public FriendInfo()
		{
		}
	}
	[Token(Token = "0x20001C1")]
	public enum ClientState
	{
		[Token(Token = "0x4000900")]
		PeerCreated = 0,
		[Token(Token = "0x4000901")]
		Authenticating = 1,
		[Token(Token = "0x4000902")]
		Authenticated = 2,
		[Token(Token = "0x4000903")]
		JoinedLobby = 3,
		[Token(Token = "0x4000904")]
		DisconnectingFromMasterserver = 4,
		[Token(Token = "0x4000905")]
		ConnectingToGameserver = 5,
		[Token(Token = "0x4000906")]
		ConnectedToGameserver = 6,
		[Token(Token = "0x4000907")]
		Joining = 7,
		[Token(Token = "0x4000908")]
		Joined = 8,
		[Token(Token = "0x4000909")]
		Leaving = 9,
		[Token(Token = "0x400090A")]
		DisconnectingFromGameserver = 10,
		[Token(Token = "0x400090B")]
		ConnectingToMasterserver = 11,
		[Token(Token = "0x400090C")]
		Disconnecting = 12,
		[Token(Token = "0x400090D")]
		Disconnected = 13,
		[Token(Token = "0x400090E")]
		ConnectedToMasterserver = 14,
		[Token(Token = "0x400090F")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x396E90", Offset = "0x396E90")]
		ConnectedToMaster = 14,
		[Token(Token = "0x4000910")]
		ConnectingToNameServer = 15,
		[Token(Token = "0x4000911")]
		ConnectedToNameServer = 16,
		[Token(Token = "0x4000912")]
		DisconnectingFromNameServer = 17
	}
	[Token(Token = "0x20001C2")]
	internal enum JoinType
	{
		[Token(Token = "0x4000914")]
		CreateRoom,
		[Token(Token = "0x4000915")]
		JoinRoom,
		[Token(Token = "0x4000916")]
		JoinRandomRoom,
		[Token(Token = "0x4000917")]
		JoinOrCreateRoom
	}
	[Token(Token = "0x20001C3")]
	public enum DisconnectCause
	{
		[Token(Token = "0x4000919")]
		None,
		[Token(Token = "0x400091A")]
		DisconnectByServerUserLimit,
		[Token(Token = "0x400091B")]
		ExceptionOnConnect,
		[Token(Token = "0x400091C")]
		DisconnectByServer,
		[Token(Token = "0x400091D")]
		TimeoutDisconnect,
		[Token(Token = "0x400091E")]
		Exception,
		[Token(Token = "0x400091F")]
		InvalidAuthentication,
		[Token(Token = "0x4000920")]
		MaxCcuReached,
		[Token(Token = "0x4000921")]
		InvalidRegion,
		[Token(Token = "0x4000922")]
		OperationNotAllowedInCurrentState,
		[Token(Token = "0x4000923")]
		CustomAuthenticationFailed,
		[Token(Token = "0x4000924")]
		DisconnectByServerLogic,
		[Token(Token = "0x4000925")]
		AuthenticationTicketExpired
	}
	[Token(Token = "0x20001C4")]
	public enum ServerConnection
	{
		[Token(Token = "0x4000927")]
		MasterServer,
		[Token(Token = "0x4000928")]
		GameServer,
		[Token(Token = "0x4000929")]
		NameServer
	}
	[Token(Token = "0x20001C5")]
	public enum EncryptionMode
	{
		[Token(Token = "0x400092B")]
		PayloadEncryption = 0,
		[Token(Token = "0x400092C")]
		DatagramEncryption = 10,
		[Token(Token = "0x400092D")]
		DatagramEncryptionRandomSequence = 11
	}
	[Token(Token = "0x20001C6")]
	public static class EncryptionDataParameters
	{
		[Token(Token = "0x400092E")]
		public const byte Mode = 0;

		[Token(Token = "0x400092F")]
		public const byte Secret1 = 1;

		[Token(Token = "0x4000930")]
		public const byte Secret2 = 2;
	}
	[Token(Token = "0x20001C7")]
	public class LoadBalancingClient : IPhotonPeerListener
	{
		[Token(Token = "0x4000931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public LoadBalancingPeer loadBalancingPeer;

		[Token(Token = "0x4000932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396EC4", Offset = "0x396EC4")]
		private string <AppVersion>k__BackingField;

		[Token(Token = "0x4000933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396ED4", Offset = "0x396ED4")]
		private string <AppId>k__BackingField;

		[Token(Token = "0x4000934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396EE4", Offset = "0x396EE4")]
		private AuthenticationValues <AuthValues>k__BackingField;

		[Token(Token = "0x4000935")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AuthModeOption AuthMode;

		[Token(Token = "0x4000936")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public EncryptionMode EncryptionMode;

		[Token(Token = "0x4000937")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ConnectionProtocol ExpectedProtocol;

		[Token(Token = "0x4000938")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396EF4", Offset = "0x396EF4")]
		private bool <IsUsingNameServer>k__BackingField;

		[Token(Token = "0x4000939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public string NameServerHost;

		[Token(Token = "0x400093A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string NameServerHttp;

		[Token(Token = "0x400093B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Dictionary<ConnectionProtocol, int> ProtocolToNameServerPort;

		[Token(Token = "0x400093C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396F04", Offset = "0x396F04")]
		private string <MasterServerAddress>k__BackingField;

		[Token(Token = "0x400093D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396F14", Offset = "0x396F14")]
		private string <GameServerAddress>k__BackingField;

		[Token(Token = "0x400093E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396F24", Offset = "0x396F24")]
		private ServerConnection <Server>k__BackingField;

		[Token(Token = "0x400093F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ClientState state;

		[Token(Token = "0x4000943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396F64", Offset = "0x396F64")]
		private DisconnectCause <DisconnectedCause>k__BackingField;

		[Token(Token = "0x4000944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool inLobby;

		[Token(Token = "0x4000945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396F74", Offset = "0x396F74")]
		private TypedLobby <CurrentLobby>k__BackingField;

		[Token(Token = "0x4000946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool autoJoinLobby;

		[Token(Token = "0x4000947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		public bool EnableLobbyStatistics;

		[Token(Token = "0x4000948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<TypedLobbyInfo> lobbyStatistics;

		[Token(Token = "0x4000949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396F84", Offset = "0x396F84")]
		private Player <LocalPlayer>k__BackingField;

		[Token(Token = "0x400094A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Dictionary<string, RoomInfo> RoomInfoList;

		[Token(Token = "0x400094B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Room CurrentRoom;

		[Token(Token = "0x400094C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396F94", Offset = "0x396F94")]
		private int <PlayersOnMasterCount>k__BackingField;

		[Token(Token = "0x400094D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396FA4", Offset = "0x396FA4")]
		private int <PlayersInRoomsCount>k__BackingField;

		[Token(Token = "0x400094E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396FB4", Offset = "0x396FB4")]
		private int <RoomsCount>k__BackingField;

		[Token(Token = "0x400094F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private JoinType lastJoinType;

		[Token(Token = "0x4000950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected internal EnterRoomParams enterRoomParamsCache;

		[Token(Token = "0x4000951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private bool didAuthenticate;

		[Token(Token = "0x4000952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396FC4", Offset = "0x396FC4")]
		private List<FriendInfo> <FriendList>k__BackingField;

		[Token(Token = "0x4000953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private string[] friendListRequested;

		[Token(Token = "0x4000954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int friendListTimestamp;

		[Token(Token = "0x4000955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private bool isFetchingFriendList;

		[Token(Token = "0x4000956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396FD4", Offset = "0x396FD4")]
		private string[] <AvailableRegions>k__BackingField;

		[Token(Token = "0x4000957")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396FE4", Offset = "0x396FE4")]
		private string[] <AvailableRegionsServers>k__BackingField;

		[Token(Token = "0x4000958")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396FF4", Offset = "0x396FF4")]
		private string <CloudRegion>k__BackingField;

		[Token(Token = "0x4000959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private byte[] encryptionSecret;

		[Token(Token = "0x1700007E")]
		public string AppVersion
		{
			[Token(Token = "0x6000AAA")]
			[Address(RVA = "0xEAA024", Offset = "0xEAA024", VA = "0xEAA024")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39837C", Offset = "0x39837C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AAB")]
			[Address(RVA = "0xEAA02C", Offset = "0xEAA02C", VA = "0xEAA02C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39838C", Offset = "0x39838C")]
			set
			{
			}
		}

		[Token(Token = "0x1700007F")]
		public string AppId
		{
			[Token(Token = "0x6000AAC")]
			[Address(RVA = "0xEAA034", Offset = "0xEAA034", VA = "0xEAA034")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39839C", Offset = "0x39839C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AAD")]
			[Address(RVA = "0xEAA03C", Offset = "0xEAA03C", VA = "0xEAA03C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3983AC", Offset = "0x3983AC")]
			set
			{
			}
		}

		[Token(Token = "0x17000080")]
		public AuthenticationValues AuthValues
		{
			[Token(Token = "0x6000AAE")]
			[Address(RVA = "0xEAA044", Offset = "0xEAA044", VA = "0xEAA044")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3983BC", Offset = "0x3983BC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AAF")]
			[Address(RVA = "0xEAA04C", Offset = "0xEAA04C", VA = "0xEAA04C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3983CC", Offset = "0x3983CC")]
			set
			{
			}
		}

		[Token(Token = "0x17000081")]
		public ConnectionProtocol TransportProtocol
		{
			[Token(Token = "0x6000AB0")]
			[Address(RVA = "0xEAA054", Offset = "0xEAA054", VA = "0xEAA054")]
			get
			{
				return default(ConnectionProtocol);
			}
			[Token(Token = "0x6000AB1")]
			[Address(RVA = "0xEAA074", Offset = "0xEAA074", VA = "0xEAA074")]
			set
			{
			}
		}

		[Token(Token = "0x17000082")]
		public Dictionary<ConnectionProtocol, Type> SocketImplementationConfig
		{
			[Token(Token = "0x6000AB2")]
			[Address(RVA = "0xEAA1A8", Offset = "0xEAA1A8", VA = "0xEAA1A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000083")]
		private string TokenForInit
		{
			[Token(Token = "0x6000AB3")]
			[Address(RVA = "0xEAA1C8", Offset = "0xEAA1C8", VA = "0xEAA1C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000084")]
		public bool IsUsingNameServer
		{
			[Token(Token = "0x6000AB4")]
			[Address(RVA = "0xEAA1E8", Offset = "0xEAA1E8", VA = "0xEAA1E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3983DC", Offset = "0x3983DC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000AB5")]
			[Address(RVA = "0xEAA1F0", Offset = "0xEAA1F0", VA = "0xEAA1F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3983EC", Offset = "0x3983EC")]
			protected internal set
			{
			}
		}

		[Token(Token = "0x17000085")]
		public string NameServerAddress
		{
			[Token(Token = "0x6000AB6")]
			[Address(RVA = "0xEAA1F8", Offset = "0xEAA1F8", VA = "0xEAA1F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000086")]
		public string CurrentServerAddress
		{
			[Token(Token = "0x6000AB7")]
			[Address(RVA = "0xEAA3E4", Offset = "0xEAA3E4", VA = "0xEAA3E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000087")]
		public string MasterServerAddress
		{
			[Token(Token = "0x6000AB8")]
			[Address(RVA = "0xEAA40C", Offset = "0xEAA40C", VA = "0xEAA40C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3983FC", Offset = "0x3983FC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AB9")]
			[Address(RVA = "0xEAA414", Offset = "0xEAA414", VA = "0xEAA414")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39840C", Offset = "0x39840C")]
			protected internal set
			{
			}
		}

		[Token(Token = "0x17000088")]
		public string GameServerAddress
		{
			[Token(Token = "0x6000ABA")]
			[Address(RVA = "0xEAA41C", Offset = "0xEAA41C", VA = "0xEAA41C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39841C", Offset = "0x39841C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000ABB")]
			[Address(RVA = "0xEAA424", Offset = "0xEAA424", VA = "0xEAA424")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39842C", Offset = "0x39842C")]
			protected internal set
			{
			}
		}

		[Token(Token = "0x17000089")]
		public ServerConnection Server
		{
			[Token(Token = "0x6000ABC")]
			[Address(RVA = "0xEAA42C", Offset = "0xEAA42C", VA = "0xEAA42C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39843C", Offset = "0x39843C")]
			get
			{
				return default(ServerConnection);
			}
			[Token(Token = "0x6000ABD")]
			[Address(RVA = "0xEAA434", Offset = "0xEAA434", VA = "0xEAA434")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39844C", Offset = "0x39844C")]
			private set
			{
			}
		}

		[Token(Token = "0x1700008A")]
		public ClientState State
		{
			[Token(Token = "0x6000ABE")]
			[Address(RVA = "0xEAA43C", Offset = "0xEAA43C", VA = "0xEAA43C")]
			get
			{
				return default(ClientState);
			}
			[Token(Token = "0x6000ABF")]
			[Address(RVA = "0xEAA444", Offset = "0xEAA444", VA = "0xEAA444")]
			protected internal set
			{
			}
		}

		[Token(Token = "0x1700008B")]
		public bool IsConnected
		{
			[Token(Token = "0x6000AC0")]
			[Address(RVA = "0xEAA4B8", Offset = "0xEAA4B8", VA = "0xEAA4B8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700008C")]
		public bool IsConnectedAndReady
		{
			[Token(Token = "0x6000AC1")]
			[Address(RVA = "0xEAA4E4", Offset = "0xEAA4E4", VA = "0xEAA4E4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700008D")]
		public DisconnectCause DisconnectedCause
		{
			[Token(Token = "0x6000AC8")]
			[Address(RVA = "0xEAA934", Offset = "0xEAA934", VA = "0xEAA934")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3984BC", Offset = "0x3984BC")]
			get
			{
				return default(DisconnectCause);
			}
			[Token(Token = "0x6000AC9")]
			[Address(RVA = "0xEAA93C", Offset = "0xEAA93C", VA = "0xEAA93C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3984CC", Offset = "0x3984CC")]
			protected set
			{
			}
		}

		[Token(Token = "0x1700008E")]
		public TypedLobby CurrentLobby
		{
			[Token(Token = "0x6000ACA")]
			[Address(RVA = "0xEAA944", Offset = "0xEAA944", VA = "0xEAA944")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3984DC", Offset = "0x3984DC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000ACB")]
			[Address(RVA = "0xEAA94C", Offset = "0xEAA94C", VA = "0xEAA94C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3984EC", Offset = "0x3984EC")]
			protected internal set
			{
			}
		}

		[Token(Token = "0x1700008F")]
		public bool AutoJoinLobby
		{
			[Token(Token = "0x6000ACC")]
			[Address(RVA = "0xEAA954", Offset = "0xEAA954", VA = "0xEAA954")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000ACD")]
			[Address(RVA = "0xEAA95C", Offset = "0xEAA95C", VA = "0xEAA95C")]
			set
			{
			}
		}

		[Token(Token = "0x17000090")]
		public List<TypedLobbyInfo> LobbyStatistics
		{
			[Token(Token = "0x6000ACE")]
			[Address(RVA = "0xEAA964", Offset = "0xEAA964", VA = "0xEAA964")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000ACF")]
			[Address(RVA = "0xEAA96C", Offset = "0xEAA96C", VA = "0xEAA96C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000091")]
		public Player LocalPlayer
		{
			[Token(Token = "0x6000AD0")]
			[Address(RVA = "0xEAA974", Offset = "0xEAA974", VA = "0xEAA974")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3984FC", Offset = "0x3984FC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AD1")]
			[Address(RVA = "0xEAA97C", Offset = "0xEAA97C", VA = "0xEAA97C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39850C", Offset = "0x39850C")]
			internal set
			{
			}
		}

		[Token(Token = "0x17000092")]
		public string NickName
		{
			[Token(Token = "0x6000AD2")]
			[Address(RVA = "0xEAA984", Offset = "0xEAA984", VA = "0xEAA984")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AD3")]
			[Address(RVA = "0xEAA9A4", Offset = "0xEAA9A4", VA = "0xEAA9A4")]
			set
			{
			}
		}

		[Token(Token = "0x17000093")]
		public string UserId
		{
			[Token(Token = "0x6000AD4")]
			[Address(RVA = "0xEAA9B8", Offset = "0xEAA9B8", VA = "0xEAA9B8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AD5")]
			[Address(RVA = "0xEAA9CC", Offset = "0xEAA9CC", VA = "0xEAA9CC")]
			set
			{
			}
		}

		[Token(Token = "0x17000094")]
		public int PlayersOnMasterCount
		{
			[Token(Token = "0x6000AD6")]
			[Address(RVA = "0xEAAA60", Offset = "0xEAAA60", VA = "0xEAAA60")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39851C", Offset = "0x39851C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000AD7")]
			[Address(RVA = "0xEAAA68", Offset = "0xEAAA68", VA = "0xEAAA68")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39852C", Offset = "0x39852C")]
			internal set
			{
			}
		}

		[Token(Token = "0x17000095")]
		public int PlayersInRoomsCount
		{
			[Token(Token = "0x6000AD8")]
			[Address(RVA = "0xEAAA70", Offset = "0xEAAA70", VA = "0xEAAA70")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39853C", Offset = "0x39853C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000AD9")]
			[Address(RVA = "0xEAAA78", Offset = "0xEAAA78", VA = "0xEAAA78")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39854C", Offset = "0x39854C")]
			internal set
			{
			}
		}

		[Token(Token = "0x17000096")]
		public int RoomsCount
		{
			[Token(Token = "0x6000ADA")]
			[Address(RVA = "0xEAAA80", Offset = "0xEAAA80", VA = "0xEAAA80")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39855C", Offset = "0x39855C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000ADB")]
			[Address(RVA = "0xEAAA88", Offset = "0xEAAA88", VA = "0xEAAA88")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39856C", Offset = "0x39856C")]
			internal set
			{
			}
		}

		[Token(Token = "0x17000097")]
		public List<FriendInfo> FriendList
		{
			[Token(Token = "0x6000ADC")]
			[Address(RVA = "0xEAAA90", Offset = "0xEAAA90", VA = "0xEAAA90")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39857C", Offset = "0x39857C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000ADD")]
			[Address(RVA = "0xEAAA98", Offset = "0xEAAA98", VA = "0xEAAA98")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39858C", Offset = "0x39858C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000098")]
		public int FriendListAge
		{
			[Token(Token = "0x6000ADE")]
			[Address(RVA = "0xEAAAA0", Offset = "0xEAAAA0", VA = "0xEAAAA0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000099")]
		protected bool IsAuthorizeSecretAvailable
		{
			[Token(Token = "0x6000ADF")]
			[Address(RVA = "0xEAAADC", Offset = "0xEAAADC", VA = "0xEAAADC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700009A")]
		public string[] AvailableRegions
		{
			[Token(Token = "0x6000AE0")]
			[Address(RVA = "0xEAAB08", Offset = "0xEAAB08", VA = "0xEAAB08")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39859C", Offset = "0x39859C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AE1")]
			[Address(RVA = "0xEAAB10", Offset = "0xEAAB10", VA = "0xEAAB10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3985AC", Offset = "0x3985AC")]
			private set
			{
			}
		}

		[Token(Token = "0x1700009B")]
		public string[] AvailableRegionsServers
		{
			[Token(Token = "0x6000AE2")]
			[Address(RVA = "0xEAAB18", Offset = "0xEAAB18", VA = "0xEAAB18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3985BC", Offset = "0x3985BC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AE3")]
			[Address(RVA = "0xEAAB20", Offset = "0xEAAB20", VA = "0xEAAB20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3985CC", Offset = "0x3985CC")]
			private set
			{
			}
		}

		[Token(Token = "0x1700009C")]
		public string CloudRegion
		{
			[Token(Token = "0x6000AE4")]
			[Address(RVA = "0xEAAB28", Offset = "0xEAAB28", VA = "0xEAAB28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3985DC", Offset = "0x3985DC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AE5")]
			[Address(RVA = "0xEAAB30", Offset = "0xEAAB30", VA = "0xEAAB30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3985EC", Offset = "0x3985EC")]
			private set
			{
			}
		}

		[Token(Token = "0x14000004")]
		public event Action<ClientState> OnStateChangeAction
		{
			[Token(Token = "0x6000AC2")]
			[Address(RVA = "0xEAA514", Offset = "0xEAA514", VA = "0xEAA514")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39845C", Offset = "0x39845C")]
			add
			{
			}
			[Token(Token = "0x6000AC3")]
			[Address(RVA = "0xEAA5C4", Offset = "0xEAA5C4", VA = "0xEAA5C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39846C", Offset = "0x39846C")]
			remove
			{
			}
		}

		[Token(Token = "0x14000005")]
		public event Action<EventData> OnEventAction
		{
			[Token(Token = "0x6000AC4")]
			[Address(RVA = "0xEAA674", Offset = "0xEAA674", VA = "0xEAA674")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39847C", Offset = "0x39847C")]
			add
			{
			}
			[Token(Token = "0x6000AC5")]
			[Address(RVA = "0xEAA724", Offset = "0xEAA724", VA = "0xEAA724")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39848C", Offset = "0x39848C")]
			remove
			{
			}
		}

		[Token(Token = "0x14000006")]
		public event Action<OperationResponse> OnOpResponseAction
		{
			[Token(Token = "0x6000AC6")]
			[Address(RVA = "0xEAA7D4", Offset = "0xEAA7D4", VA = "0xEAA7D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39849C", Offset = "0x39849C")]
			add
			{
			}
			[Token(Token = "0x6000AC7")]
			[Address(RVA = "0xEAA884", Offset = "0xEAA884", VA = "0xEAA884")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3984AC", Offset = "0x3984AC")]
			remove
			{
			}
		}

		[Token(Token = "0x6000AE6")]
		[Address(RVA = "0xEAAB38", Offset = "0xEAAB38", VA = "0xEAAB38")]
		public LoadBalancingClient(ConnectionProtocol protocol = ConnectionProtocol.Udp)
		{
		}

		[Token(Token = "0x6000AE7")]
		[Address(RVA = "0xEAAD2C", Offset = "0xEAAD2C", VA = "0xEAAD2C")]
		public LoadBalancingClient(string masterAddress, string appId, string gameVersion, ConnectionProtocol protocol = ConnectionProtocol.Udp)
		{
		}

		[Token(Token = "0x6000AE8")]
		[Address(RVA = "0xEAA1FC", Offset = "0xEAA1FC", VA = "0xEAA1FC")]
		private string GetNameServerAddress()
		{
			return null;
		}

		[Token(Token = "0x6000AE9")]
		[Address(RVA = "0xEAAD5C", Offset = "0xEAAD5C", VA = "0xEAAD5C")]
		public bool Connect(string masterServerAddress, string appId, string appVersion, string nickName, AuthenticationValues authValues)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AEA")]
		[Address(RVA = "0xEAAE00", Offset = "0xEAAE00", VA = "0xEAAE00", Slot = "8")]
		public virtual bool Connect()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AEB")]
		[Address(RVA = "0xEAAE90", Offset = "0xEAAE90", VA = "0xEAAE90")]
		public bool ConnectToNameServer()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AEC")]
		[Address(RVA = "0xEAAFB8", Offset = "0xEAAFB8", VA = "0xEAAFB8")]
		public bool ConnectToRegionMaster(string region)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AED")]
		[Address(RVA = "0xEAB1EC", Offset = "0xEAB1EC", VA = "0xEAB1EC")]
		public void Disconnect()
		{
		}

		[Token(Token = "0x6000AEE")]
		[Address(RVA = "0xEAB110", Offset = "0xEAB110", VA = "0xEAB110")]
		private bool CallAuthenticate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AEF")]
		[Address(RVA = "0xEAB238", Offset = "0xEAB238", VA = "0xEAB238")]
		public void Service()
		{
		}

		[Token(Token = "0x6000AF0")]
		[Address(RVA = "0xEAB254", Offset = "0xEAB254", VA = "0xEAB254")]
		private void DisconnectToReconnect()
		{
		}

		[Token(Token = "0x6000AF1")]
		[Address(RVA = "0xEAB2C8", Offset = "0xEAB2C8", VA = "0xEAB2C8")]
		private bool ConnectToGameServer()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AF2")]
		[Address(RVA = "0xEAB354", Offset = "0xEAB354", VA = "0xEAB354")]
		public bool OpGetRegions()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AF3")]
		[Address(RVA = "0xEAB3B4", Offset = "0xEAB3B4", VA = "0xEAB3B4")]
		public bool OpFindFriends(string[] friendsToFind)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AF4")]
		[Address(RVA = "0xEAB6F4", Offset = "0xEAB6F4", VA = "0xEAB6F4")]
		public bool OpJoinLobby(TypedLobby lobby)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AF5")]
		[Address(RVA = "0xEAB7B8", Offset = "0xEAB7B8", VA = "0xEAB7B8")]
		public bool OpLeaveLobby()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AF6")]
		[Address(RVA = "0xEAB7E8", Offset = "0xEAB7E8", VA = "0xEAB7E8")]
		public bool OpJoinRandomRoom(Hashtable expectedCustomRoomProperties, byte expectedMaxPlayers, [Optional] string[] expectedUsers)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AF7")]
		[Address(RVA = "0xEABA58", Offset = "0xEABA58", VA = "0xEABA58")]
		public bool OpJoinRandomRoom(Hashtable expectedCustomRoomProperties, byte expectedMaxPlayers, MatchmakingMode matchmakingMode)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AF8")]
		[Address(RVA = "0xEAB894", Offset = "0xEAB894", VA = "0xEAB894")]
		public bool OpJoinRandomRoom(Hashtable expectedCustomRoomProperties, byte expectedMaxPlayers, MatchmakingMode matchmakingMode, TypedLobby lobby, string sqlLobbyFilter, [Optional] string[] expectedUsers)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AF9")]
		[Address(RVA = "0xEABB08", Offset = "0xEABB08", VA = "0xEABB08")]
		public bool OpJoinRoom(string roomName, [Optional] string[] expectedUsers)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AFA")]
		[Address(RVA = "0xEABC04", Offset = "0xEABC04", VA = "0xEABC04")]
		public bool OpReJoinRoom(string roomName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AFB")]
		[Address(RVA = "0xEABD00", Offset = "0xEABD00", VA = "0xEABD00")]
		public bool OpJoinOrCreateRoom(string roomName, RoomOptions roomOptions, TypedLobby lobby, [Optional] string[] expectedUsers)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AFC")]
		[Address(RVA = "0xEABE48", Offset = "0xEABE48", VA = "0xEABE48")]
		public bool OpCreateRoom(string roomName, RoomOptions roomOptions, TypedLobby lobby, [Optional] string[] expectedUsers)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AFD")]
		[Address(RVA = "0xEABF80", Offset = "0xEABF80", VA = "0xEABF80")]
		public bool OpLeaveRoom()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AFE")]
		[Address(RVA = "0xEABF8C", Offset = "0xEABF8C", VA = "0xEABF8C")]
		public bool OpLeaveRoom(bool becomeInactive, bool sendAuthCookie = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AFF")]
		[Address(RVA = "0xEAC008", Offset = "0xEAC008", VA = "0xEAC008")]
		public bool OpGetGameList(TypedLobby typedLobby, string sqlLobbyFilter)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B00")]
		[Address(RVA = "0xEAC048", Offset = "0xEAC048", VA = "0xEAC048")]
		public bool OpSetCustomPropertiesOfActor(int actorNr, Hashtable propertiesToSet, [Optional] Hashtable expectedProperties, [Optional] WebFlags webFlags)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B01")]
		[Address(RVA = "0xEAC33C", Offset = "0xEAC33C", VA = "0xEAC33C")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x3985FC", Offset = "0x3985FC")]
		public bool OpSetCustomPropertiesOfActor(int actorNr, Hashtable propertiesToSet, Hashtable expectedProperties, bool webForward)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B02")]
		[Address(RVA = "0xEAC1C4", Offset = "0xEAC1C4", VA = "0xEAC1C4")]
		protected internal bool OpSetPropertiesOfActor(int actorNr, Hashtable actorProperties, [Optional] Hashtable expectedProperties, [Optional] WebFlags webFlags)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B03")]
		[Address(RVA = "0xEAC7B4", Offset = "0xEAC7B4", VA = "0xEAC7B4")]
		public bool OpSetCustomPropertiesOfRoom(Hashtable propertiesToSet, [Optional] Hashtable expectedProperties, [Optional] WebFlags webFlags)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B04")]
		[Address(RVA = "0xEAC9A0", Offset = "0xEAC9A0", VA = "0xEAC9A0")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x398630", Offset = "0x398630")]
		public bool OpSetCustomPropertiesOfRoom(Hashtable propertiesToSet, Hashtable expectedProperties, bool webForward)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B05")]
		[Address(RVA = "0xEAC84C", Offset = "0xEAC84C", VA = "0xEAC84C")]
		protected internal bool OpSetPropertiesOfRoom(Hashtable gameProperties, [Optional] Hashtable expectedProperties, [Optional] WebFlags webFlags)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B06")]
		[Address(RVA = "0xEACD04", Offset = "0xEACD04", VA = "0xEACD04", Slot = "9")]
		public virtual bool OpRaiseEvent(byte eventCode, object customEventContent, RaiseEventOptions raiseEventOptions, SendOptions sendOptions)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B07")]
		[Address(RVA = "0xEACD4C", Offset = "0xEACD4C", VA = "0xEACD4C", Slot = "10")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x398664", Offset = "0x398664")]
		public virtual bool OpRaiseEvent(byte eventCode, object customEventContent, bool sendReliable, RaiseEventOptions raiseEventOptions)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B08")]
		[Address(RVA = "0xEACDE8", Offset = "0xEACDE8", VA = "0xEACDE8", Slot = "11")]
		public virtual bool OpChangeGroups(byte[] groupsToRemove, byte[] groupsToAdd)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B09")]
		[Address(RVA = "0xEACE08", Offset = "0xEACE08", VA = "0xEACE08")]
		private void ReadoutProperties(Hashtable gameProperties, Hashtable actorProperties, int targetActorNr)
		{
		}

		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0xEAD1F4", Offset = "0xEAD1F4", VA = "0xEAD1F4")]
		private Hashtable ReadoutPropertiesForActorNr(Hashtable actorProperties, int actorNr)
		{
			return null;
		}

		[Token(Token = "0x6000B0B")]
		[Address(RVA = "0xEAD320", Offset = "0xEAD320", VA = "0xEAD320")]
		protected internal void ChangeLocalID(int newID)
		{
		}

		[Token(Token = "0x6000B0C")]
		[Address(RVA = "0xEAD4C0", Offset = "0xEAD4C0", VA = "0xEAD4C0")]
		private void CleanCachedValues()
		{
		}

		[Token(Token = "0x6000B0D")]
		[Address(RVA = "0xEAD580", Offset = "0xEAD580", VA = "0xEAD580")]
		private void GameEnteredOnGameServer(OperationResponse operationResponse)
		{
		}

		[Token(Token = "0x6000B0E")]
		[Address(RVA = "0xEAD844", Offset = "0xEAD844", VA = "0xEAD844")]
		private void UpdatedActorList(int[] actorsInGame)
		{
		}

		[Token(Token = "0x6000B0F")]
		[Address(RVA = "0xEAD970", Offset = "0xEAD970", VA = "0xEAD970", Slot = "12")]
		protected internal virtual Player CreatePlayer(string actorName, int actorNumber, bool isLocal, Hashtable actorProperties)
		{
			return null;
		}

		[Token(Token = "0x6000B10")]
		[Address(RVA = "0xEADA04", Offset = "0xEADA04", VA = "0xEADA04", Slot = "13")]
		protected internal virtual Room CreateRoom(string roomName, RoomOptions opt)
		{
			return null;
		}

		[Token(Token = "0x6000B11")]
		[Address(RVA = "0xEADA78", Offset = "0xEADA78", VA = "0xEADA78", Slot = "14")]
		public virtual void DebugReturn(DebugLevel level, string message)
		{
		}

		[Token(Token = "0x6000B12")]
		[Address(RVA = "0xEADBDC", Offset = "0xEADBDC", VA = "0xEADBDC", Slot = "15")]
		public virtual void OnOperationResponse(OperationResponse operationResponse)
		{
		}

		[Token(Token = "0x6000B13")]
		[Address(RVA = "0xEAEE50", Offset = "0xEAEE50", VA = "0xEAEE50", Slot = "16")]
		public virtual void OnStatusChanged(StatusCode statusCode)
		{
		}

		[Token(Token = "0x6000B14")]
		[Address(RVA = "0xEAF55C", Offset = "0xEAF55C", VA = "0xEAF55C", Slot = "17")]
		public virtual void OnEvent(EventData photonEvent)
		{
		}

		[Token(Token = "0x6000B15")]
		[Address(RVA = "0xEB0284", Offset = "0xEB0284", VA = "0xEB0284", Slot = "18")]
		public virtual void OnMessage(object message)
		{
		}

		[Token(Token = "0x6000B16")]
		[Address(RVA = "0xEAEBAC", Offset = "0xEAEBAC", VA = "0xEAEBAC")]
		private void SetupEncryption(Dictionary<byte, object> encryptionData)
		{
		}

		[Token(Token = "0x6000B17")]
		[Address(RVA = "0xEB0304", Offset = "0xEB0304", VA = "0xEB0304")]
		public bool OpWebRpc(string uriPath, object parameters, bool sendAuthCookie = false)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001C8")]
	public class LoadBalancingPeer : PhotonPeer
	{
		[Token(Token = "0x2000365")]
		private enum RoomOptionBit
		{
			[Token(Token = "0x40013AB")]
			CheckUserOnJoin = 1,
			[Token(Token = "0x40013AC")]
			DeleteCacheOnLeave = 2,
			[Token(Token = "0x40013AD")]
			SuppressRoomEvents = 4,
			[Token(Token = "0x40013AE")]
			PublishUserId = 8,
			[Token(Token = "0x40013AF")]
			DeleteNullProps = 0x10,
			[Token(Token = "0x40013B0")]
			BroadcastPropsChangeToAll = 0x20
		}

		[Token(Token = "0x400095A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected internal static Type PingImplementation;

		[Token(Token = "0x400095B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private readonly Dictionary<byte, object> opParameters;

		[Token(Token = "0x6000B19")]
		[Address(RVA = "0xEB0608", Offset = "0xEB0608", VA = "0xEB0608")]
		public LoadBalancingPeer(ConnectionProtocol protocolType)
		{
		}

		[Token(Token = "0x6000B1A")]
		[Address(RVA = "0xEAACA4", Offset = "0xEAACA4", VA = "0xEAACA4")]
		public LoadBalancingPeer(IPhotonPeerListener listener, ConnectionProtocol protocolType)
		{
		}

		[Token(Token = "0x6000B1B")]
		[Address(RVA = "0xEB06C8", Offset = "0xEB06C8", VA = "0xEB06C8")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x398698", Offset = "0x398698")]
		private void ConfigUnitySockets()
		{
		}

		[Token(Token = "0x6000B1C")]
		[Address(RVA = "0xEB09B8", Offset = "0xEB09B8", VA = "0xEB09B8", Slot = "16")]
		public virtual bool OpGetRegions(string appId)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B1D")]
		[Address(RVA = "0xEB0ABC", Offset = "0xEB0ABC", VA = "0xEB0ABC", Slot = "17")]
		public virtual bool OpJoinLobby([Optional] TypedLobby lobby)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B1E")]
		[Address(RVA = "0xEB0CD0", Offset = "0xEB0CD0", VA = "0xEB0CD0", Slot = "18")]
		public virtual bool OpLeaveLobby()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B1F")]
		[Address(RVA = "0xEB0E18", Offset = "0xEB0E18", VA = "0xEB0E18")]
		private void RoomOptionsToOpParameters(Dictionary<byte, object> op, RoomOptions roomOptions)
		{
		}

		[Token(Token = "0x6000B20")]
		[Address(RVA = "0xEB1340", Offset = "0xEB1340", VA = "0xEB1340", Slot = "19")]
		public virtual bool OpCreateRoom(EnterRoomParams opParams)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B21")]
		[Address(RVA = "0xEB16B8", Offset = "0xEB16B8", VA = "0xEB16B8", Slot = "20")]
		public virtual bool OpJoinRoom(EnterRoomParams opParams)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B22")]
		[Address(RVA = "0xEB1AB4", Offset = "0xEB1AB4", VA = "0xEB1AB4", Slot = "21")]
		public virtual bool OpJoinRandomRoom(OpJoinRandomRoomParams opJoinRandomRoomParams)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B23")]
		[Address(RVA = "0xEB1ED4", Offset = "0xEB1ED4", VA = "0xEB1ED4", Slot = "22")]
		public virtual bool OpLeaveRoom(bool becomeInactive, bool sendAuthCookie = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B24")]
		[Address(RVA = "0xEB205C", Offset = "0xEB205C", VA = "0xEB205C", Slot = "23")]
		public virtual bool OpGetGameList(TypedLobby lobby, string queryData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B25")]
		[Address(RVA = "0xEB23D8", Offset = "0xEB23D8", VA = "0xEB23D8", Slot = "24")]
		public virtual bool OpFindFriends(string[] friendsToFind)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B26")]
		[Address(RVA = "0xEB24E4", Offset = "0xEB24E4", VA = "0xEB24E4")]
		public bool OpSetCustomPropertiesOfActor(int actorNr, Hashtable actorProperties)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B27")]
		[Address(RVA = "0xEAC3EC", Offset = "0xEAC3EC", VA = "0xEAC3EC")]
		protected internal bool OpSetPropertiesOfActor(int actorNr, Hashtable actorProperties, [Optional] Hashtable expectedProperties, [Optional] WebFlags webflags)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B28")]
		[Address(RVA = "0xEB2524", Offset = "0xEB2524", VA = "0xEB2524")]
		protected void OpSetPropertyOfRoom(byte propCode, object value)
		{
		}

		[Token(Token = "0x6000B29")]
		[Address(RVA = "0xEB25EC", Offset = "0xEB25EC", VA = "0xEB25EC")]
		public bool OpSetCustomPropertiesOfRoom(Hashtable gameProperties)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B2A")]
		[Address(RVA = "0xEACA48", Offset = "0xEACA48", VA = "0xEACA48")]
		protected internal bool OpSetPropertiesOfRoom(Hashtable gameProperties, [Optional] Hashtable expectedProperties, [Optional] WebFlags webflags)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B2B")]
		[Address(RVA = "0xEB2620", Offset = "0xEB2620", VA = "0xEB2620", Slot = "25")]
		public virtual bool OpAuthenticate(string appId, string appVersion, AuthenticationValues authValues, string regionCode, bool getLobbyStatistics)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B2C")]
		[Address(RVA = "0xEB2A5C", Offset = "0xEB2A5C", VA = "0xEB2A5C", Slot = "26")]
		public virtual bool OpAuthenticateOnce(string appId, string appVersion, AuthenticationValues authValues, string regionCode, EncryptionMode encryptionMode, ConnectionProtocol expectedProtocol)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B2D")]
		[Address(RVA = "0xEB2E9C", Offset = "0xEB2E9C", VA = "0xEB2E9C", Slot = "27")]
		public virtual bool OpChangeGroups(byte[] groupsToRemove, byte[] groupsToAdd)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B2E")]
		[Address(RVA = "0xEB3090", Offset = "0xEB3090", VA = "0xEB3090", Slot = "28")]
		public virtual bool OpRaiseEvent(byte eventCode, object customEventContent, RaiseEventOptions raiseEventOptions, SendOptions sendOptions)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B2F")]
		[Address(RVA = "0xEB3368", Offset = "0xEB3368", VA = "0xEB3368", Slot = "29")]
		public virtual bool OpSettings(bool receiveLobbyStats)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001C9")]
	public class OpJoinRandomRoomParams
	{
		[Token(Token = "0x400095C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Hashtable ExpectedCustomRoomProperties;

		[Token(Token = "0x400095D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public byte ExpectedMaxPlayers;

		[Token(Token = "0x400095E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
		public MatchmakingMode MatchingType;

		[Token(Token = "0x400095F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public TypedLobby TypedLobby;

		[Token(Token = "0x4000960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public string SqlLobbyFilter;

		[Token(Token = "0x4000961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string[] ExpectedUsers;

		[Token(Token = "0x6000B31")]
		[Address(RVA = "0xE4CB40", Offset = "0xE4CB40", VA = "0xE4CB40")]
		public OpJoinRandomRoomParams()
		{
		}
	}
	[Token(Token = "0x20001CA")]
	public class EnterRoomParams
	{
		[Token(Token = "0x4000962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string RoomName;

		[Token(Token = "0x4000963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public RoomOptions RoomOptions;

		[Token(Token = "0x4000964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public TypedLobby Lobby;

		[Token(Token = "0x4000965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Hashtable PlayerProperties;

		[Token(Token = "0x4000966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool OnGameServer;

		[Token(Token = "0x4000967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool CreateIfNotExists;

		[Token(Token = "0x4000968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool RejoinOnly;

		[Token(Token = "0x4000969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public string[] ExpectedUsers;

		[Token(Token = "0x6000B32")]
		[Address(RVA = "0xEA8BA8", Offset = "0xEA8BA8", VA = "0xEA8BA8")]
		public EnterRoomParams()
		{
		}
	}
	[Token(Token = "0x20001CB")]
	public class ErrorCode
	{
		[Token(Token = "0x400096A")]
		public const int Ok = 0;

		[Token(Token = "0x400096B")]
		public const int OperationNotAllowedInCurrentState = -3;

		[Token(Token = "0x400096C")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x397004", Offset = "0x397004")]
		public const int InvalidOperationCode = -2;

		[Token(Token = "0x400096D")]
		public const int InvalidOperation = -2;

		[Token(Token = "0x400096E")]
		public const int InternalServerError = -1;

		[Token(Token = "0x400096F")]
		public const int InvalidAuthentication = 32767;

		[Token(Token = "0x4000970")]
		public const int GameIdAlreadyExists = 32766;

		[Token(Token = "0x4000971")]
		public const int GameFull = 32765;

		[Token(Token = "0x4000972")]
		public const int GameClosed = 32764;

		[Token(Token = "0x4000973")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x397038", Offset = "0x397038")]
		public const int AlreadyMatched = 32763;

		[Token(Token = "0x4000974")]
		public const int ServerFull = 32762;

		[Token(Token = "0x4000975")]
		public const int UserBlocked = 32761;

		[Token(Token = "0x4000976")]
		public const int NoRandomMatchFound = 32760;

		[Token(Token = "0x4000977")]
		public const int GameDoesNotExist = 32758;

		[Token(Token = "0x4000978")]
		public const int MaxCcuReached = 32757;

		[Token(Token = "0x4000979")]
		public const int InvalidRegion = 32756;

		[Token(Token = "0x400097A")]
		public const int CustomAuthenticationFailed = 32755;

		[Token(Token = "0x400097B")]
		public const int AuthenticationTicketExpired = 32753;

		[Token(Token = "0x400097C")]
		public const int PluginReportedError = 32752;

		[Token(Token = "0x400097D")]
		public const int PluginMismatch = 32751;

		[Token(Token = "0x400097E")]
		public const int JoinFailedPeerAlreadyJoined = 32750;

		[Token(Token = "0x400097F")]
		public const int JoinFailedFoundInactiveJoiner = 32749;

		[Token(Token = "0x4000980")]
		public const int JoinFailedWithRejoinerNotFound = 32748;

		[Token(Token = "0x4000981")]
		public const int JoinFailedFoundExcludedUserId = 32747;

		[Token(Token = "0x4000982")]
		public const int JoinFailedFoundActiveJoiner = 32746;

		[Token(Token = "0x4000983")]
		public const int HttpLimitReached = 32745;

		[Token(Token = "0x4000984")]
		public const int ExternalHttpCallFailed = 32744;

		[Token(Token = "0x4000985")]
		public const int SlotError = 32742;

		[Token(Token = "0x4000986")]
		public const int InvalidEncryptionParameters = 32741;

		[Token(Token = "0x6000B33")]
		[Address(RVA = "0xEA8BB8", Offset = "0xEA8BB8", VA = "0xEA8BB8")]
		public ErrorCode()
		{
		}
	}
	[Token(Token = "0x20001CC")]
	public class ActorProperties
	{
		[Token(Token = "0x4000987")]
		public const byte PlayerName = byte.MaxValue;

		[Token(Token = "0x4000988")]
		public const byte IsInactive = 254;

		[Token(Token = "0x4000989")]
		public const byte UserId = 253;

		[Token(Token = "0x6000B34")]
		[Address(RVA = "0xEA87F8", Offset = "0xEA87F8", VA = "0xEA87F8")]
		public ActorProperties()
		{
		}
	}
	[Token(Token = "0x20001CD")]
	public class GamePropertyKey
	{
		[Token(Token = "0x400098A")]
		public const byte MaxPlayers = byte.MaxValue;

		[Token(Token = "0x400098B")]
		public const byte IsVisible = 254;

		[Token(Token = "0x400098C")]
		public const byte IsOpen = 253;

		[Token(Token = "0x400098D")]
		public const byte PlayerCount = 252;

		[Token(Token = "0x400098E")]
		public const byte Removed = 251;

		[Token(Token = "0x400098F")]
		public const byte PropsListedInLobby = 250;

		[Token(Token = "0x4000990")]
		public const byte CleanupCacheOnLeave = 249;

		[Token(Token = "0x4000991")]
		public const byte MasterClientId = 248;

		[Token(Token = "0x4000992")]
		public const byte ExpectedUsers = 247;

		[Token(Token = "0x6000B35")]
		[Address(RVA = "0xEAA01C", Offset = "0xEAA01C", VA = "0xEAA01C")]
		public GamePropertyKey()
		{
		}
	}
	[Token(Token = "0x20001CE")]
	public class EventCode
	{
		[Token(Token = "0x4000993")]
		public const byte GameList = 230;

		[Token(Token = "0x4000994")]
		public const byte GameListUpdate = 229;

		[Token(Token = "0x4000995")]
		public const byte QueueState = 228;

		[Token(Token = "0x4000996")]
		public const byte Match = 227;

		[Token(Token = "0x4000997")]
		public const byte AppStats = 226;

		[Token(Token = "0x4000998")]
		public const byte LobbyStats = 224;

		[Token(Token = "0x4000999")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x39706C", Offset = "0x39706C")]
		public const byte AzureNodeInfo = 210;

		[Token(Token = "0x400099A")]
		public const byte Join = byte.MaxValue;

		[Token(Token = "0x400099B")]
		public const byte Leave = 254;

		[Token(Token = "0x400099C")]
		public const byte PropertiesChanged = 253;

		[Token(Token = "0x400099D")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x3970A0", Offset = "0x3970A0")]
		public const byte SetProperties = 253;

		[Token(Token = "0x400099E")]
		public const byte ErrorInfo = 251;

		[Token(Token = "0x400099F")]
		public const byte CacheSliceChanged = 250;

		[Token(Token = "0x40009A0")]
		public const byte AuthEvent = 223;

		[Token(Token = "0x6000B36")]
		[Address(RVA = "0xEA8BC0", Offset = "0xEA8BC0", VA = "0xEA8BC0")]
		public EventCode()
		{
		}
	}
	[Token(Token = "0x20001CF")]
	public class ParameterCode
	{
		[Token(Token = "0x40009A1")]
		public const byte SuppressRoomEvents = 237;

		[Token(Token = "0x40009A2")]
		public const byte EmptyRoomTTL = 236;

		[Token(Token = "0x40009A3")]
		public const byte PlayerTTL = 235;

		[Token(Token = "0x40009A4")]
		public const byte EventForward = 234;

		[Token(Token = "0x40009A5")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x3970D4", Offset = "0x3970D4")]
		public const byte IsComingBack = 233;

		[Token(Token = "0x40009A6")]
		public const byte IsInactive = 233;

		[Token(Token = "0x40009A7")]
		public const byte CheckUserOnJoin = 232;

		[Token(Token = "0x40009A8")]
		public const byte ExpectedValues = 231;

		[Token(Token = "0x40009A9")]
		public const byte Address = 230;

		[Token(Token = "0x40009AA")]
		public const byte PeerCount = 229;

		[Token(Token = "0x40009AB")]
		public const byte GameCount = 228;

		[Token(Token = "0x40009AC")]
		public const byte MasterPeerCount = 227;

		[Token(Token = "0x40009AD")]
		public const byte UserId = 225;

		[Token(Token = "0x40009AE")]
		public const byte ApplicationId = 224;

		[Token(Token = "0x40009AF")]
		public const byte Position = 223;

		[Token(Token = "0x40009B0")]
		public const byte MatchMakingType = 223;

		[Token(Token = "0x40009B1")]
		public const byte GameList = 222;

		[Token(Token = "0x40009B2")]
		public const byte Secret = 221;

		[Token(Token = "0x40009B3")]
		public const byte AppVersion = 220;

		[Token(Token = "0x40009B4")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x397108", Offset = "0x397108")]
		public const byte AzureNodeInfo = 210;

		[Token(Token = "0x40009B5")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x39713C", Offset = "0x39713C")]
		public const byte AzureLocalNodeId = 209;

		[Token(Token = "0x40009B6")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x397170", Offset = "0x397170")]
		public const byte AzureMasterNodeId = 208;

		[Token(Token = "0x40009B7")]
		public const byte RoomName = byte.MaxValue;

		[Token(Token = "0x40009B8")]
		public const byte Broadcast = 250;

		[Token(Token = "0x40009B9")]
		public const byte ActorList = 252;

		[Token(Token = "0x40009BA")]
		public const byte ActorNr = 254;

		[Token(Token = "0x40009BB")]
		public const byte PlayerProperties = 249;

		[Token(Token = "0x40009BC")]
		public const byte CustomEventContent = 245;

		[Token(Token = "0x40009BD")]
		public const byte Data = 245;

		[Token(Token = "0x40009BE")]
		public const byte Code = 244;

		[Token(Token = "0x40009BF")]
		public const byte GameProperties = 248;

		[Token(Token = "0x40009C0")]
		public const byte Properties = 251;

		[Token(Token = "0x40009C1")]
		public const byte TargetActorNr = 253;

		[Token(Token = "0x40009C2")]
		public const byte ReceiverGroup = 246;

		[Token(Token = "0x40009C3")]
		public const byte Cache = 247;

		[Token(Token = "0x40009C4")]
		public const byte CleanupCacheOnLeave = 241;

		[Token(Token = "0x40009C5")]
		public const byte Group = 240;

		[Token(Token = "0x40009C6")]
		public const byte Remove = 239;

		[Token(Token = "0x40009C7")]
		public const byte PublishUserId = 239;

		[Token(Token = "0x40009C8")]
		public const byte Add = 238;

		[Token(Token = "0x40009C9")]
		public const byte Info = 218;

		[Token(Token = "0x40009CA")]
		public const byte ClientAuthenticationType = 217;

		[Token(Token = "0x40009CB")]
		public const byte ClientAuthenticationParams = 216;

		[Token(Token = "0x40009CC")]
		public const byte JoinMode = 215;

		[Token(Token = "0x40009CD")]
		public const byte ClientAuthenticationData = 214;

		[Token(Token = "0x40009CE")]
		public const byte MasterClientId = 203;

		[Token(Token = "0x40009CF")]
		public const byte FindFriendsRequestList = 1;

		[Token(Token = "0x40009D0")]
		public const byte FindFriendsResponseOnlineList = 1;

		[Token(Token = "0x40009D1")]
		public const byte FindFriendsResponseRoomIdList = 2;

		[Token(Token = "0x40009D2")]
		public const byte LobbyName = 213;

		[Token(Token = "0x40009D3")]
		public const byte LobbyType = 212;

		[Token(Token = "0x40009D4")]
		public const byte LobbyStats = 211;

		[Token(Token = "0x40009D5")]
		public const byte Region = 210;

		[Token(Token = "0x40009D6")]
		public const byte UriPath = 209;

		[Token(Token = "0x40009D7")]
		public const byte WebRpcParameters = 208;

		[Token(Token = "0x40009D8")]
		public const byte WebRpcReturnCode = 207;

		[Token(Token = "0x40009D9")]
		public const byte WebRpcReturnMessage = 206;

		[Token(Token = "0x40009DA")]
		public const byte CacheSliceIndex = 205;

		[Token(Token = "0x40009DB")]
		public const byte Plugins = 204;

		[Token(Token = "0x40009DC")]
		public const byte NickName = 202;

		[Token(Token = "0x40009DD")]
		public const byte PluginName = 201;

		[Token(Token = "0x40009DE")]
		public const byte PluginVersion = 200;

		[Token(Token = "0x40009DF")]
		public const byte ExpectedProtocol = 195;

		[Token(Token = "0x40009E0")]
		public const byte CustomInitData = 194;

		[Token(Token = "0x40009E1")]
		public const byte EncryptionMode = 193;

		[Token(Token = "0x40009E2")]
		public const byte EncryptionData = 192;

		[Token(Token = "0x40009E3")]
		public const byte RoomOptionFlags = 191;

		[Token(Token = "0x6000B37")]
		[Address(RVA = "0xE4CB50", Offset = "0xE4CB50", VA = "0xE4CB50")]
		public ParameterCode()
		{
		}
	}
	[Token(Token = "0x20001D0")]
	public class OperationCode
	{
		[Token(Token = "0x40009E4")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x3971A4", Offset = "0x3971A4")]
		public const byte ExchangeKeysForEncryption = 250;

		[Token(Token = "0x40009E5")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x3971D8", Offset = "0x3971D8")]
		public const byte Join = byte.MaxValue;

		[Token(Token = "0x40009E6")]
		public const byte AuthenticateOnce = 231;

		[Token(Token = "0x40009E7")]
		public const byte Authenticate = 230;

		[Token(Token = "0x40009E8")]
		public const byte JoinLobby = 229;

		[Token(Token = "0x40009E9")]
		public const byte LeaveLobby = 228;

		[Token(Token = "0x40009EA")]
		public const byte CreateGame = 227;

		[Token(Token = "0x40009EB")]
		public const byte JoinGame = 226;

		[Token(Token = "0x40009EC")]
		public const byte JoinRandomGame = 225;

		[Token(Token = "0x40009ED")]
		public const byte Leave = 254;

		[Token(Token = "0x40009EE")]
		public const byte RaiseEvent = 253;

		[Token(Token = "0x40009EF")]
		public const byte SetProperties = 252;

		[Token(Token = "0x40009F0")]
		public const byte GetProperties = 251;

		[Token(Token = "0x40009F1")]
		public const byte ChangeGroups = 248;

		[Token(Token = "0x40009F2")]
		public const byte FindFriends = 222;

		[Token(Token = "0x40009F3")]
		public const byte GetLobbyStats = 221;

		[Token(Token = "0x40009F4")]
		public const byte GetRegions = 220;

		[Token(Token = "0x40009F5")]
		public const byte WebRpc = 219;

		[Token(Token = "0x40009F6")]
		public const byte ServerSettings = 218;

		[Token(Token = "0x40009F7")]
		public const byte GetGameList = 217;

		[Token(Token = "0x6000B38")]
		[Address(RVA = "0xE4CB48", Offset = "0xE4CB48", VA = "0xE4CB48")]
		public OperationCode()
		{
		}
	}
	[Token(Token = "0x20001D1")]
	public enum JoinMode : byte
	{
		[Token(Token = "0x40009F9")]
		Default,
		[Token(Token = "0x40009FA")]
		CreateIfNotExists,
		[Token(Token = "0x40009FB")]
		JoinOrRejoin,
		[Token(Token = "0x40009FC")]
		RejoinOnly
	}
	[Token(Token = "0x20001D2")]
	public enum MatchmakingMode : byte
	{
		[Token(Token = "0x40009FE")]
		FillRoom,
		[Token(Token = "0x40009FF")]
		SerialMatching,
		[Token(Token = "0x4000A00")]
		RandomMatching
	}
	[Token(Token = "0x20001D3")]
	public enum ReceiverGroup : byte
	{
		[Token(Token = "0x4000A02")]
		Others,
		[Token(Token = "0x4000A03")]
		All,
		[Token(Token = "0x4000A04")]
		MasterClient
	}
	[Token(Token = "0x20001D4")]
	public enum EventCaching : byte
	{
		[Token(Token = "0x4000A06")]
		DoNotCache = 0,
		[Token(Token = "0x4000A07")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x3971E8", Offset = "0x3971E8")]
		MergeCache = 1,
		[Token(Token = "0x4000A08")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x3971F8", Offset = "0x3971F8")]
		ReplaceCache = 2,
		[Token(Token = "0x4000A09")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x397208", Offset = "0x397208")]
		RemoveCache = 3,
		[Token(Token = "0x4000A0A")]
		AddToRoomCache = 4,
		[Token(Token = "0x4000A0B")]
		AddToRoomCacheGlobal = 5,
		[Token(Token = "0x4000A0C")]
		RemoveFromRoomCache = 6,
		[Token(Token = "0x4000A0D")]
		RemoveFromRoomCacheForActorsLeft = 7,
		[Token(Token = "0x4000A0E")]
		SliceIncreaseIndex = 10,
		[Token(Token = "0x4000A0F")]
		SliceSetIndex = 11,
		[Token(Token = "0x4000A10")]
		SlicePurgeIndex = 12,
		[Token(Token = "0x4000A11")]
		SlicePurgeUpToIndex = 13
	}
	[Token(Token = "0x20001D5")]
	[Flags]
	public enum PropertyTypeFlag : byte
	{
		[Token(Token = "0x4000A13")]
		None = 0,
		[Token(Token = "0x4000A14")]
		Game = 1,
		[Token(Token = "0x4000A15")]
		Actor = 2,
		[Token(Token = "0x4000A16")]
		GameAndActor = 3
	}
	[Token(Token = "0x20001D6")]
	public class RoomOptions
	{
		[Token(Token = "0x4000A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private bool isVisible;

		[Token(Token = "0x4000A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		private bool isOpen;

		[Token(Token = "0x4000A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
		public byte MaxPlayers;

		[Token(Token = "0x4000A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int PlayerTtl;

		[Token(Token = "0x4000A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int EmptyRoomTtl;

		[Token(Token = "0x4000A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private bool cleanupCacheOnLeave;

		[Token(Token = "0x4000A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Hashtable CustomRoomProperties;

		[Token(Token = "0x4000A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public string[] CustomRoomPropertiesForLobby;

		[Token(Token = "0x4000A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string[] Plugins;

		[Token(Token = "0x4000A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397218", Offset = "0x397218")]
		private bool <SuppressRoomEvents>k__BackingField;

		[Token(Token = "0x4000A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397228", Offset = "0x397228")]
		private bool <PublishUserId>k__BackingField;

		[Token(Token = "0x4000A22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397238", Offset = "0x397238")]
		private bool <DeleteNullProperties>k__BackingField;

		[Token(Token = "0x1700009D")]
		public bool IsVisible
		{
			[Token(Token = "0x6000B39")]
			[Address(RVA = "0xE501B8", Offset = "0xE501B8", VA = "0xE501B8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B3A")]
			[Address(RVA = "0xE501C0", Offset = "0xE501C0", VA = "0xE501C0")]
			set
			{
			}
		}

		[Token(Token = "0x1700009E")]
		public bool IsOpen
		{
			[Token(Token = "0x6000B3B")]
			[Address(RVA = "0xE501C8", Offset = "0xE501C8", VA = "0xE501C8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B3C")]
			[Address(RVA = "0xE501D0", Offset = "0xE501D0", VA = "0xE501D0")]
			set
			{
			}
		}

		[Token(Token = "0x1700009F")]
		public bool CleanupCacheOnLeave
		{
			[Token(Token = "0x6000B3D")]
			[Address(RVA = "0xE501D8", Offset = "0xE501D8", VA = "0xE501D8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B3E")]
			[Address(RVA = "0xE501E0", Offset = "0xE501E0", VA = "0xE501E0")]
			set
			{
			}
		}

		[Token(Token = "0x170000A0")]
		public bool SuppressRoomEvents
		{
			[Token(Token = "0x6000B3F")]
			[Address(RVA = "0xE501E8", Offset = "0xE501E8", VA = "0xE501E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3986CC", Offset = "0x3986CC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B40")]
			[Address(RVA = "0xE501F0", Offset = "0xE501F0", VA = "0xE501F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3986DC", Offset = "0x3986DC")]
			set
			{
			}
		}

		[Token(Token = "0x170000A1")]
		public bool PublishUserId
		{
			[Token(Token = "0x6000B41")]
			[Address(RVA = "0xE501F8", Offset = "0xE501F8", VA = "0xE501F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3986EC", Offset = "0x3986EC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B42")]
			[Address(RVA = "0xE50200", Offset = "0xE50200", VA = "0xE50200")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3986FC", Offset = "0x3986FC")]
			set
			{
			}
		}

		[Token(Token = "0x170000A2")]
		public bool DeleteNullProperties
		{
			[Token(Token = "0x6000B43")]
			[Address(RVA = "0xE50208", Offset = "0xE50208", VA = "0xE50208")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39870C", Offset = "0x39870C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B44")]
			[Address(RVA = "0xE50210", Offset = "0xE50210", VA = "0xE50210")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39871C", Offset = "0x39871C")]
			set
			{
			}
		}

		[Token(Token = "0x6000B45")]
		[Address(RVA = "0xE50218", Offset = "0xE50218", VA = "0xE50218")]
		public RoomOptions()
		{
		}
	}
	[Token(Token = "0x20001D7")]
	public class RaiseEventOptions
	{
		[Token(Token = "0x4000A23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly RaiseEventOptions Default;

		[Token(Token = "0x4000A24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EventCaching CachingOption;

		[Token(Token = "0x4000A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		public byte InterestGroup;

		[Token(Token = "0x4000A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int[] TargetActors;

		[Token(Token = "0x4000A27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ReceiverGroup Receivers;

		[Token(Token = "0x4000A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x397248", Offset = "0x397248")]
		public byte SequenceChannel;

		[Token(Token = "0x4000A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public WebFlags Flags;

		[Token(Token = "0x6000B46")]
		[Address(RVA = "0xE4E054", Offset = "0xE4E054", VA = "0xE4E054")]
		public RaiseEventOptions()
		{
		}
	}
	[Token(Token = "0x20001D8")]
	public enum LobbyType : byte
	{
		[Token(Token = "0x4000A2B")]
		Default = 0,
		[Token(Token = "0x4000A2C")]
		SqlLobby = 2,
		[Token(Token = "0x4000A2D")]
		AsyncRandomLobby = 3
	}
	[Token(Token = "0x20001D9")]
	public class TypedLobby
	{
		[Token(Token = "0x4000A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string Name;

		[Token(Token = "0x4000A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public LobbyType Type;

		[Token(Token = "0x4000A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly TypedLobby Default;

		[Token(Token = "0x170000A3")]
		public bool IsDefault
		{
			[Token(Token = "0x6000B48")]
			[Address(RVA = "0xE50294", Offset = "0xE50294", VA = "0xE50294")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000B49")]
		[Address(RVA = "0xE502B0", Offset = "0xE502B0", VA = "0xE502B0")]
		public TypedLobby()
		{
		}

		[Token(Token = "0x6000B4A")]
		[Address(RVA = "0xE50324", Offset = "0xE50324", VA = "0xE50324")]
		public TypedLobby(string name, LobbyType type)
		{
		}

		[Token(Token = "0x6000B4B")]
		[Address(RVA = "0xE5034C", Offset = "0xE5034C", VA = "0xE5034C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20001DA")]
	public class TypedLobbyInfo : TypedLobby
	{
		[Token(Token = "0x4000A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int PlayerCount;

		[Token(Token = "0x4000A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int RoomCount;

		[Token(Token = "0x6000B4D")]
		[Address(RVA = "0xE50444", Offset = "0xE50444", VA = "0xE50444", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B4E")]
		[Address(RVA = "0xE50658", Offset = "0xE50658", VA = "0xE50658")]
		public TypedLobbyInfo()
		{
		}
	}
	[Token(Token = "0x20001DB")]
	public enum AuthModeOption
	{
		[Token(Token = "0x4000A34")]
		Auth,
		[Token(Token = "0x4000A35")]
		AuthOnce,
		[Token(Token = "0x4000A36")]
		AuthOnceWss
	}
	[Token(Token = "0x20001DC")]
	public enum CustomAuthenticationType : byte
	{
		[Token(Token = "0x4000A38")]
		Custom = 0,
		[Token(Token = "0x4000A39")]
		Steam = 1,
		[Token(Token = "0x4000A3A")]
		Facebook = 2,
		[Token(Token = "0x4000A3B")]
		Oculus = 3,
		[Token(Token = "0x4000A3C")]
		PlayStation = 4,
		[Token(Token = "0x4000A3D")]
		Xbox = 5,
		[Token(Token = "0x4000A3E")]
		None = byte.MaxValue
	}
	[Token(Token = "0x20001DD")]
	public class AuthenticationValues
	{
		[Token(Token = "0x4000A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private CustomAuthenticationType authType;

		[Token(Token = "0x4000A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39727C", Offset = "0x39727C")]
		private string <AuthGetParameters>k__BackingField;

		[Token(Token = "0x4000A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39728C", Offset = "0x39728C")]
		private object <AuthPostData>k__BackingField;

		[Token(Token = "0x4000A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39729C", Offset = "0x39729C")]
		private string <Token>k__BackingField;

		[Token(Token = "0x4000A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3972AC", Offset = "0x3972AC")]
		private string <UserId>k__BackingField;

		[Token(Token = "0x170000A4")]
		public CustomAuthenticationType AuthType
		{
			[Token(Token = "0x6000B4F")]
			[Address(RVA = "0xEA8800", Offset = "0xEA8800", VA = "0xEA8800")]
			get
			{
				return default(CustomAuthenticationType);
			}
			[Token(Token = "0x6000B50")]
			[Address(RVA = "0xEA8808", Offset = "0xEA8808", VA = "0xEA8808")]
			set
			{
			}
		}

		[Token(Token = "0x170000A5")]
		public string AuthGetParameters
		{
			[Token(Token = "0x6000B51")]
			[Address(RVA = "0xEA8810", Offset = "0xEA8810", VA = "0xEA8810")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39872C", Offset = "0x39872C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B52")]
			[Address(RVA = "0xEA8818", Offset = "0xEA8818", VA = "0xEA8818")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39873C", Offset = "0x39873C")]
			set
			{
			}
		}

		[Token(Token = "0x170000A6")]
		public object AuthPostData
		{
			[Token(Token = "0x6000B53")]
			[Address(RVA = "0xEA8820", Offset = "0xEA8820", VA = "0xEA8820")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39874C", Offset = "0x39874C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B54")]
			[Address(RVA = "0xEA8828", Offset = "0xEA8828", VA = "0xEA8828")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39875C", Offset = "0x39875C")]
			private set
			{
			}
		}

		[Token(Token = "0x170000A7")]
		public string Token
		{
			[Token(Token = "0x6000B55")]
			[Address(RVA = "0xEA8830", Offset = "0xEA8830", VA = "0xEA8830")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39876C", Offset = "0x39876C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B56")]
			[Address(RVA = "0xEA8838", Offset = "0xEA8838", VA = "0xEA8838")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39877C", Offset = "0x39877C")]
			set
			{
			}
		}

		[Token(Token = "0x170000A8")]
		public string UserId
		{
			[Token(Token = "0x6000B57")]
			[Address(RVA = "0xEA8840", Offset = "0xEA8840", VA = "0xEA8840")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39878C", Offset = "0x39878C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B58")]
			[Address(RVA = "0xEA8848", Offset = "0xEA8848", VA = "0xEA8848")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39879C", Offset = "0x39879C")]
			set
			{
			}
		}

		[Token(Token = "0x6000B59")]
		[Address(RVA = "0xEA8850", Offset = "0xEA8850", VA = "0xEA8850")]
		public AuthenticationValues()
		{
		}

		[Token(Token = "0x6000B5A")]
		[Address(RVA = "0xEA8860", Offset = "0xEA8860", VA = "0xEA8860")]
		public AuthenticationValues(string userId)
		{
		}

		[Token(Token = "0x6000B5B")]
		[Address(RVA = "0xEA888C", Offset = "0xEA888C", VA = "0xEA888C", Slot = "4")]
		public virtual void SetAuthPostData(string stringData)
		{
		}

		[Token(Token = "0x6000B5C")]
		[Address(RVA = "0xEA88C4", Offset = "0xEA88C4", VA = "0xEA88C4", Slot = "5")]
		public virtual void SetAuthPostData(byte[] byteData)
		{
		}

		[Token(Token = "0x6000B5D")]
		[Address(RVA = "0xEA88CC", Offset = "0xEA88CC", VA = "0xEA88CC", Slot = "6")]
		public virtual void AddAuthParameter(string key, string value)
		{
		}

		[Token(Token = "0x6000B5E")]
		[Address(RVA = "0xEA8B04", Offset = "0xEA8B04", VA = "0xEA8B04", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20001DE")]
	public abstract class PhotonPing : IDisposable
	{
		[Token(Token = "0x4000A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string DebugString;

		[Token(Token = "0x4000A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool Successful;

		[Token(Token = "0x4000A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
		protected internal bool GotResult;

		[Token(Token = "0x4000A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected internal int PingLength;

		[Token(Token = "0x4000A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		protected internal byte[] PingBytes;

		[Token(Token = "0x4000A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected internal byte PingId;

		[Token(Token = "0x6000B5F")]
		[Address(RVA = "0xE4CB58", Offset = "0xE4CB58", VA = "0xE4CB58", Slot = "5")]
		public virtual bool StartPing(string ip)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B60")]
		[Address(RVA = "0xE4CBD0", Offset = "0xE4CBD0", VA = "0xE4CBD0", Slot = "6")]
		public virtual bool Done()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B61")]
		[Address(RVA = "0xE4CC48", Offset = "0xE4CC48", VA = "0xE4CC48", Slot = "7")]
		public virtual void Dispose()
		{
		}

		[Token(Token = "0x6000B62")]
		[Address(RVA = "0xE4CCC0", Offset = "0xE4CCC0", VA = "0xE4CCC0")]
		protected internal void Init()
		{
		}

		[Token(Token = "0x6000B63")]
		[Address(RVA = "0xE4CCFC", Offset = "0xE4CCFC", VA = "0xE4CCFC")]
		protected PhotonPing()
		{
		}
	}
	[Token(Token = "0x20001DF")]
	public class PingMono : PhotonPing
	{
		[Token(Token = "0x4000A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Socket sock;

		[Token(Token = "0x6000B64")]
		[Address(RVA = "0xE4CDA4", Offset = "0xE4CDA4", VA = "0xE4CDA4", Slot = "5")]
		public override bool StartPing(string ip)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B65")]
		[Address(RVA = "0xE4D08C", Offset = "0xE4D08C", VA = "0xE4D08C", Slot = "6")]
		public override bool Done()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B66")]
		[Address(RVA = "0xE4D214", Offset = "0xE4D214", VA = "0xE4D214", Slot = "7")]
		public override void Dispose()
		{
		}

		[Token(Token = "0x6000B67")]
		[Address(RVA = "0xE4D2F8", Offset = "0xE4D2F8", VA = "0xE4D2F8")]
		public PingMono()
		{
		}
	}
	[Token(Token = "0x20001E0")]
	public class Player
	{
		[Token(Token = "0x4000A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3972BC", Offset = "0x3972BC")]
		private Room <RoomReference>k__BackingField;

		[Token(Token = "0x4000A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private int actorID;

		[Token(Token = "0x4000A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly bool IsLocal;

		[Token(Token = "0x4000A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private string nickName;

		[Token(Token = "0x4000A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3972CC", Offset = "0x3972CC")]
		private string <UserId>k__BackingField;

		[Token(Token = "0x4000A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3972DC", Offset = "0x3972DC")]
		private bool <IsInactive>k__BackingField;

		[Token(Token = "0x4000A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3972EC", Offset = "0x3972EC")]
		private Hashtable <CustomProperties>k__BackingField;

		[Token(Token = "0x4000A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public object TagObject;

		[Token(Token = "0x170000A9")]
		protected internal Room RoomReference
		{
			[Token(Token = "0x6000B68")]
			[Address(RVA = "0xE4D2FC", Offset = "0xE4D2FC", VA = "0xE4D2FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3987AC", Offset = "0x3987AC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B69")]
			[Address(RVA = "0xE4D304", Offset = "0xE4D304", VA = "0xE4D304")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3987BC", Offset = "0x3987BC")]
			set
			{
			}
		}

		[Token(Token = "0x170000AA")]
		public int ID
		{
			[Token(Token = "0x6000B6A")]
			[Address(RVA = "0xE4D30C", Offset = "0xE4D30C", VA = "0xE4D30C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000AB")]
		public string NickName
		{
			[Token(Token = "0x6000B6B")]
			[Address(RVA = "0xE4D314", Offset = "0xE4D314", VA = "0xE4D314")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B6C")]
			[Address(RVA = "0xE4D31C", Offset = "0xE4D31C", VA = "0xE4D31C")]
			set
			{
			}
		}

		[Token(Token = "0x170000AC")]
		public string UserId
		{
			[Token(Token = "0x6000B6D")]
			[Address(RVA = "0xE4D4B8", Offset = "0xE4D4B8", VA = "0xE4D4B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3987CC", Offset = "0x3987CC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B6E")]
			[Address(RVA = "0xE4D4C0", Offset = "0xE4D4C0", VA = "0xE4D4C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3987DC", Offset = "0x3987DC")]
			internal set
			{
			}
		}

		[Token(Token = "0x170000AD")]
		public bool IsMasterClient
		{
			[Token(Token = "0x6000B6F")]
			[Address(RVA = "0xE4D4C8", Offset = "0xE4D4C8", VA = "0xE4D4C8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000AE")]
		public bool IsInactive
		{
			[Token(Token = "0x6000B70")]
			[Address(RVA = "0xE4D4F0", Offset = "0xE4D4F0", VA = "0xE4D4F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3987EC", Offset = "0x3987EC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B71")]
			[Address(RVA = "0xE4D4F8", Offset = "0xE4D4F8", VA = "0xE4D4F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3987FC", Offset = "0x3987FC")]
			set
			{
			}
		}

		[Token(Token = "0x170000AF")]
		public Hashtable CustomProperties
		{
			[Token(Token = "0x6000B72")]
			[Address(RVA = "0xE4D500", Offset = "0xE4D500", VA = "0xE4D500")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39880C", Offset = "0x39880C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B73")]
			[Address(RVA = "0xE4D508", Offset = "0xE4D508", VA = "0xE4D508")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39881C", Offset = "0x39881C")]
			private set
			{
			}
		}

		[Token(Token = "0x170000B0")]
		public Hashtable AllProperties
		{
			[Token(Token = "0x6000B74")]
			[Address(RVA = "0xE4D510", Offset = "0xE4D510", VA = "0xE4D510")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B75")]
		[Address(RVA = "0xE4D5D8", Offset = "0xE4D5D8", VA = "0xE4D5D8")]
		protected internal Player(string nickName, int actorID, bool isLocal)
		{
		}

		[Token(Token = "0x6000B76")]
		[Address(RVA = "0xE4D5F8", Offset = "0xE4D5F8", VA = "0xE4D5F8")]
		protected internal Player(string nickName, int actorID, bool isLocal, Hashtable playerProperties)
		{
		}

		[Token(Token = "0x6000B77")]
		[Address(RVA = "0xE4D6B0", Offset = "0xE4D6B0", VA = "0xE4D6B0")]
		public Player Get(int id)
		{
			return null;
		}

		[Token(Token = "0x6000B78")]
		[Address(RVA = "0xE4D6D0", Offset = "0xE4D6D0", VA = "0xE4D6D0")]
		public Player GetNext()
		{
			return null;
		}

		[Token(Token = "0x6000B79")]
		[Address(RVA = "0xE4D8C0", Offset = "0xE4D8C0", VA = "0xE4D8C0")]
		public Player GetNextFor(Player currentPlayer)
		{
			return null;
		}

		[Token(Token = "0x6000B7A")]
		[Address(RVA = "0xE4D6D8", Offset = "0xE4D6D8", VA = "0xE4D6D8")]
		public Player GetNextFor(int currentPlayerId)
		{
			return null;
		}

		[Token(Token = "0x6000B7B")]
		[Address(RVA = "0xE4D8D4", Offset = "0xE4D8D4", VA = "0xE4D8D4", Slot = "4")]
		public virtual void InternalCacheProperties(Hashtable properties)
		{
		}

		[Token(Token = "0x6000B7C")]
		[Address(RVA = "0xE4DB8C", Offset = "0xE4DB8C", VA = "0xE4DB8C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B7D")]
		[Address(RVA = "0xE4DC30", Offset = "0xE4DC30", VA = "0xE4DC30")]
		public string ToStringFull()
		{
			return null;
		}

		[Token(Token = "0x6000B7E")]
		[Address(RVA = "0xE4DE44", Offset = "0xE4DE44", VA = "0xE4DE44", Slot = "0")]
		public override bool Equals(object p)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B7F")]
		[Address(RVA = "0xE4DF20", Offset = "0xE4DF20", VA = "0xE4DF20", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B80")]
		[Address(RVA = "0xE4DF28", Offset = "0xE4DF28", VA = "0xE4DF28")]
		protected internal void ChangeLocalID(int newID)
		{
		}

		[Token(Token = "0x6000B81")]
		[Address(RVA = "0xE4DF38", Offset = "0xE4DF38", VA = "0xE4DF38")]
		public void SetCustomProperties(Hashtable propertiesToSet, [Optional] Hashtable expectedValues, [Optional] WebFlags webFlags)
		{
		}

		[Token(Token = "0x6000B82")]
		[Address(RVA = "0xE4D39C", Offset = "0xE4D39C", VA = "0xE4D39C")]
		private void SetPlayerNameProperty()
		{
		}
	}
	[Token(Token = "0x20001E1")]
	public class Room : RoomInfo
	{
		[Token(Token = "0x4000A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected internal int PlayerTTL;

		[Token(Token = "0x4000A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		protected internal int RoomTTL;

		[Token(Token = "0x4000A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3972FC", Offset = "0x3972FC")]
		private LoadBalancingClient <LoadBalancingClient>k__BackingField;

		[Token(Token = "0x4000A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Dictionary<int, Player> players;

		[Token(Token = "0x170000B1")]
		protected internal LoadBalancingClient LoadBalancingClient
		{
			[Token(Token = "0x6000B83")]
			[Address(RVA = "0xE4E148", Offset = "0xE4E148", VA = "0xE4E148")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39882C", Offset = "0x39882C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B84")]
			[Address(RVA = "0xE4E150", Offset = "0xE4E150", VA = "0xE4E150")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39883C", Offset = "0x39883C")]
			set
			{
			}
		}

		[Token(Token = "0x170000B2")]
		public new string Name
		{
			[Token(Token = "0x6000B85")]
			[Address(RVA = "0xE4E158", Offset = "0xE4E158", VA = "0xE4E158")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B86")]
			[Address(RVA = "0xE4E160", Offset = "0xE4E160", VA = "0xE4E160")]
			internal set
			{
			}
		}

		[Token(Token = "0x170000B3")]
		public new bool IsOpen
		{
			[Token(Token = "0x6000B87")]
			[Address(RVA = "0xE4E168", Offset = "0xE4E168", VA = "0xE4E168")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B88")]
			[Address(RVA = "0xE4E170", Offset = "0xE4E170", VA = "0xE4E170")]
			set
			{
			}
		}

		[Token(Token = "0x170000B4")]
		public new bool IsVisible
		{
			[Token(Token = "0x6000B89")]
			[Address(RVA = "0xE4E2DC", Offset = "0xE4E2DC", VA = "0xE4E2DC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B8A")]
			[Address(RVA = "0xE4E2E4", Offset = "0xE4E2E4", VA = "0xE4E2E4")]
			set
			{
			}
		}

		[Token(Token = "0x170000B5")]
		public new byte MaxPlayers
		{
			[Token(Token = "0x6000B8B")]
			[Address(RVA = "0xE4E450", Offset = "0xE4E450", VA = "0xE4E450")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x6000B8C")]
			[Address(RVA = "0xE4E458", Offset = "0xE4E458", VA = "0xE4E458")]
			set
			{
			}
		}

		[Token(Token = "0x170000B6")]
		public new byte PlayerCount
		{
			[Token(Token = "0x6000B8D")]
			[Address(RVA = "0xE4E5AC", Offset = "0xE4E5AC", VA = "0xE4E5AC")]
			get
			{
				return default(byte);
			}
		}

		[Token(Token = "0x170000B7")]
		public Dictionary<int, Player> Players
		{
			[Token(Token = "0x6000B8E")]
			[Address(RVA = "0xE4E61C", Offset = "0xE4E61C", VA = "0xE4E61C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B8F")]
			[Address(RVA = "0xE4E624", Offset = "0xE4E624", VA = "0xE4E624")]
			private set
			{
			}
		}

		[Token(Token = "0x170000B8")]
		public string[] ExpectedUsers
		{
			[Token(Token = "0x6000B90")]
			[Address(RVA = "0xE4E62C", Offset = "0xE4E62C", VA = "0xE4E62C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B9")]
		public int MasterClientId
		{
			[Token(Token = "0x6000B91")]
			[Address(RVA = "0xE4E634", Offset = "0xE4E634", VA = "0xE4E634")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000BA")]
		public string[] PropertiesListedInLobby
		{
			[Token(Token = "0x6000B92")]
			[Address(RVA = "0xE4E63C", Offset = "0xE4E63C", VA = "0xE4E63C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B93")]
			[Address(RVA = "0xE4E644", Offset = "0xE4E644", VA = "0xE4E644")]
			private set
			{
			}
		}

		[Token(Token = "0x170000BB")]
		public bool AutoCleanUp
		{
			[Token(Token = "0x6000B94")]
			[Address(RVA = "0xE4E64C", Offset = "0xE4E64C", VA = "0xE4E64C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000B95")]
		[Address(RVA = "0xE4E654", Offset = "0xE4E654", VA = "0xE4E654")]
		protected internal Room(string roomName, RoomOptions options)
		{
		}

		[Token(Token = "0x6000B96")]
		[Address(RVA = "0xE4E7D8", Offset = "0xE4E7D8", VA = "0xE4E7D8", Slot = "5")]
		public virtual void SetCustomProperties(Hashtable propertiesToSet, [Optional] Hashtable expectedProperties, [Optional] WebFlags webFlags)
		{
		}

		[Token(Token = "0x6000B97")]
		[Address(RVA = "0xE4E8CC", Offset = "0xE4E8CC", VA = "0xE4E8CC")]
		public void SetPropertiesListedInLobby(string[] propertiesListedInLobby)
		{
		}

		[Token(Token = "0x6000B98")]
		[Address(RVA = "0xE4E9B4", Offset = "0xE4E9B4", VA = "0xE4E9B4", Slot = "6")]
		protected internal virtual void RemovePlayer(Player player)
		{
		}

		[Token(Token = "0x6000B99")]
		[Address(RVA = "0xE4EA40", Offset = "0xE4EA40", VA = "0xE4EA40", Slot = "7")]
		protected internal virtual void RemovePlayer(int id)
		{
		}

		[Token(Token = "0x6000B9A")]
		[Address(RVA = "0xE4EA7C", Offset = "0xE4EA7C", VA = "0xE4EA7C")]
		public bool SetMasterClient(Player masterClientPlayer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B9B")]
		[Address(RVA = "0xE4EC60", Offset = "0xE4EC60", VA = "0xE4EC60", Slot = "8")]
		public virtual bool AddPlayer(Player player)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B9C")]
		[Address(RVA = "0xE4ED10", Offset = "0xE4ED10", VA = "0xE4ED10", Slot = "9")]
		public virtual Player StorePlayer(Player player)
		{
			return null;
		}

		[Token(Token = "0x6000B9D")]
		[Address(RVA = "0xE4EDC0", Offset = "0xE4EDC0", VA = "0xE4EDC0", Slot = "10")]
		public virtual Player GetPlayer(int id)
		{
			return null;
		}

		[Token(Token = "0x6000B9E")]
		[Address(RVA = "0xE4EE4C", Offset = "0xE4EE4C", VA = "0xE4EE4C")]
		public void ClearExpectedUsers()
		{
		}

		[Token(Token = "0x6000B9F")]
		[Address(RVA = "0xE4EF90", Offset = "0xE4EF90", VA = "0xE4EF90", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000BA0")]
		[Address(RVA = "0xE4F22C", Offset = "0xE4F22C", VA = "0xE4F22C")]
		public new string ToStringFull()
		{
			return null;
		}
	}
	[Token(Token = "0x20001E2")]
	public class RoomInfo
	{
		[Token(Token = "0x4000A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		protected internal bool removedFromList;

		[Token(Token = "0x4000A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private Hashtable customProperties;

		[Token(Token = "0x4000A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected byte maxPlayers;

		[Token(Token = "0x4000A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		protected string[] expectedUsers;

		[Token(Token = "0x4000A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected bool isOpen;

		[Token(Token = "0x4000A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		protected bool isVisible;

		[Token(Token = "0x4000A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		protected bool autoCleanUp;

		[Token(Token = "0x4000A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		protected string name;

		[Token(Token = "0x4000A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected internal int masterClientId;

		[Token(Token = "0x4000A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		protected string[] propertiesListedInLobby;

		[Token(Token = "0x4000A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39730C", Offset = "0x39730C")]
		private int <PlayerCount>k__BackingField;

		[Token(Token = "0x4000A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39731C", Offset = "0x39731C")]
		private bool <IsLocalClientInside>k__BackingField;

		[Token(Token = "0x170000BC")]
		public Hashtable CustomProperties
		{
			[Token(Token = "0x6000BA1")]
			[Address(RVA = "0xE4F520", Offset = "0xE4F520", VA = "0xE4F520")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BD")]
		public string Name
		{
			[Token(Token = "0x6000BA2")]
			[Address(RVA = "0xE4F528", Offset = "0xE4F528", VA = "0xE4F528")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BE")]
		public int PlayerCount
		{
			[Token(Token = "0x6000BA3")]
			[Address(RVA = "0xE4F530", Offset = "0xE4F530", VA = "0xE4F530")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39884C", Offset = "0x39884C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000BA4")]
			[Address(RVA = "0xE4F538", Offset = "0xE4F538", VA = "0xE4F538")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39885C", Offset = "0x39885C")]
			private set
			{
			}
		}

		[Token(Token = "0x170000BF")]
		public bool IsLocalClientInside
		{
			[Token(Token = "0x6000BA5")]
			[Address(RVA = "0xE4F540", Offset = "0xE4F540", VA = "0xE4F540")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39886C", Offset = "0x39886C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BA6")]
			[Address(RVA = "0xE4F548", Offset = "0xE4F548", VA = "0xE4F548")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39887C", Offset = "0x39887C")]
			set
			{
			}
		}

		[Token(Token = "0x170000C0")]
		public byte MaxPlayers
		{
			[Token(Token = "0x6000BA7")]
			[Address(RVA = "0xE4F550", Offset = "0xE4F550", VA = "0xE4F550")]
			get
			{
				return default(byte);
			}
		}

		[Token(Token = "0x170000C1")]
		public bool IsOpen
		{
			[Token(Token = "0x6000BA8")]
			[Address(RVA = "0xE4F558", Offset = "0xE4F558", VA = "0xE4F558")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000C2")]
		public bool IsVisible
		{
			[Token(Token = "0x6000BA9")]
			[Address(RVA = "0xE4F560", Offset = "0xE4F560", VA = "0xE4F560")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000BAA")]
		[Address(RVA = "0xE4E730", Offset = "0xE4E730", VA = "0xE4E730")]
		protected internal RoomInfo(string roomName, Hashtable roomProperties)
		{
		}

		[Token(Token = "0x6000BAB")]
		[Address(RVA = "0xE4F568", Offset = "0xE4F568", VA = "0xE4F568", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BAC")]
		[Address(RVA = "0xE4F62C", Offset = "0xE4F62C", VA = "0xE4F62C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000BAD")]
		[Address(RVA = "0xE4F65C", Offset = "0xE4F65C", VA = "0xE4F65C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000BAE")]
		[Address(RVA = "0xE4F8FC", Offset = "0xE4F8FC", VA = "0xE4F8FC")]
		public string ToStringFull()
		{
			return null;
		}

		[Token(Token = "0x6000BAF")]
		[Address(RVA = "0xE4FBF4", Offset = "0xE4FBF4", VA = "0xE4FBF4", Slot = "4")]
		protected internal virtual void InternalCacheProperties(Hashtable propertiesToCache)
		{
		}
	}
	[Token(Token = "0x20001E3")]
	public class WebRpcResponse
	{
		[Token(Token = "0x4000A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39732C", Offset = "0x39732C")]
		private string <Name>k__BackingField;

		[Token(Token = "0x4000A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39733C", Offset = "0x39733C")]
		private int <ReturnCode>k__BackingField;

		[Token(Token = "0x4000A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39734C", Offset = "0x39734C")]
		private string <DebugMessage>k__BackingField;

		[Token(Token = "0x4000A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39735C", Offset = "0x39735C")]
		private Dictionary<string, object> <Parameters>k__BackingField;

		[Token(Token = "0x170000C3")]
		public string Name
		{
			[Token(Token = "0x6000BB0")]
			[Address(RVA = "0xE507F4", Offset = "0xE507F4", VA = "0xE507F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39888C", Offset = "0x39888C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BB1")]
			[Address(RVA = "0xE507FC", Offset = "0xE507FC", VA = "0xE507FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39889C", Offset = "0x39889C")]
			private set
			{
			}
		}

		[Token(Token = "0x170000C4")]
		public int ReturnCode
		{
			[Token(Token = "0x6000BB2")]
			[Address(RVA = "0xE50804", Offset = "0xE50804", VA = "0xE50804")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3988AC", Offset = "0x3988AC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000BB3")]
			[Address(RVA = "0xE5080C", Offset = "0xE5080C", VA = "0xE5080C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3988BC", Offset = "0x3988BC")]
			private set
			{
			}
		}

		[Token(Token = "0x170000C5")]
		public string DebugMessage
		{
			[Token(Token = "0x6000BB4")]
			[Address(RVA = "0xE50814", Offset = "0xE50814", VA = "0xE50814")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3988CC", Offset = "0x3988CC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BB5")]
			[Address(RVA = "0xE5081C", Offset = "0xE5081C", VA = "0xE5081C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3988DC", Offset = "0x3988DC")]
			private set
			{
			}
		}

		[Token(Token = "0x170000C6")]
		public Dictionary<string, object> Parameters
		{
			[Token(Token = "0x6000BB6")]
			[Address(RVA = "0xE50824", Offset = "0xE50824", VA = "0xE50824")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3988EC", Offset = "0x3988EC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BB7")]
			[Address(RVA = "0xE5082C", Offset = "0xE5082C", VA = "0xE5082C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3988FC", Offset = "0x3988FC")]
			private set
			{
			}
		}

		[Token(Token = "0x6000BB8")]
		[Address(RVA = "0xE50834", Offset = "0xE50834", VA = "0xE50834")]
		public WebRpcResponse(OperationResponse response)
		{
		}

		[Token(Token = "0x6000BB9")]
		[Address(RVA = "0xE50A40", Offset = "0xE50A40", VA = "0xE50A40")]
		public string ToStringFull()
		{
			return null;
		}
	}
	[Token(Token = "0x20001E4")]
	public class WebFlags
	{
		[Token(Token = "0x4000A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly WebFlags Default;

		[Token(Token = "0x4000A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public byte WebhookFlags;

		[Token(Token = "0x4000A69")]
		public const byte HttpForwardConst = 1;

		[Token(Token = "0x4000A6A")]
		public const byte SendAuthCookieConst = 2;

		[Token(Token = "0x4000A6B")]
		public const byte SendSyncConst = 4;

		[Token(Token = "0x4000A6C")]
		public const byte SendStateConst = 8;

		[Token(Token = "0x170000C7")]
		public bool HttpForward
		{
			[Token(Token = "0x6000BBA")]
			[Address(RVA = "0xE506D0", Offset = "0xE506D0", VA = "0xE506D0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BBB")]
			[Address(RVA = "0xE506DC", Offset = "0xE506DC", VA = "0xE506DC")]
			set
			{
			}
		}

		[Token(Token = "0x170000C8")]
		public bool SendAuthCookie
		{
			[Token(Token = "0x6000BBC")]
			[Address(RVA = "0xE506F4", Offset = "0xE506F4", VA = "0xE506F4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BBD")]
			[Address(RVA = "0xE50700", Offset = "0xE50700", VA = "0xE50700")]
			set
			{
			}
		}

		[Token(Token = "0x170000C9")]
		public bool SendSync
		{
			[Token(Token = "0x6000BBE")]
			[Address(RVA = "0xE50718", Offset = "0xE50718", VA = "0xE50718")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BBF")]
			[Address(RVA = "0xE50724", Offset = "0xE50724", VA = "0xE50724")]
			set
			{
			}
		}

		[Token(Token = "0x170000CA")]
		public bool SendState
		{
			[Token(Token = "0x6000BC0")]
			[Address(RVA = "0xE5073C", Offset = "0xE5073C", VA = "0xE5073C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BC1")]
			[Address(RVA = "0xE50748", Offset = "0xE50748", VA = "0xE50748")]
			set
			{
			}
		}

		[Token(Token = "0x6000BC2")]
		[Address(RVA = "0xE50760", Offset = "0xE50760", VA = "0xE50760")]
		public WebFlags(byte webhookFlags)
		{
		}
	}
}
namespace FMOD
{
	[Token(Token = "0x20001E5")]
	public class VERSION
	{
		[Token(Token = "0x4000A6D")]
		public const int number = 69632;

		[Token(Token = "0x4000A6E")]
		public const string dll = "fmod";

		[Token(Token = "0x6000BC4")]
		[Address(RVA = "0x1691B80", Offset = "0x1691B80", VA = "0x1691B80")]
		public VERSION()
		{
		}
	}
	[Token(Token = "0x20001E6")]
	public class CONSTANTS
	{
		[Token(Token = "0x4000A6F")]
		public const int MAX_CHANNEL_WIDTH = 32;

		[Token(Token = "0x4000A70")]
		public const int MAX_LISTENERS = 8;

		[Token(Token = "0x4000A71")]
		public const int REVERB_MAXINSTANCES = 4;

		[Token(Token = "0x4000A72")]
		public const int MAX_SYSTEMS = 8;

		[Token(Token = "0x6000BC5")]
		[Address(RVA = "0xE62B60", Offset = "0xE62B60", VA = "0xE62B60")]
		public CONSTANTS()
		{
		}
	}
	[Token(Token = "0x20001E7")]
	public enum RESULT
	{
		[Token(Token = "0x4000A74")]
		OK,
		[Token(Token = "0x4000A75")]
		ERR_BADCOMMAND,
		[Token(Token = "0x4000A76")]
		ERR_CHANNEL_ALLOC,
		[Token(Token = "0x4000A77")]
		ERR_CHANNEL_STOLEN,
		[Token(Token = "0x4000A78")]
		ERR_DMA,
		[Token(Token = "0x4000A79")]
		ERR_DSP_CONNECTION,
		[Token(Token = "0x4000A7A")]
		ERR_DSP_DONTPROCESS,
		[Token(Token = "0x4000A7B")]
		ERR_DSP_FORMAT,
		[Token(Token = "0x4000A7C")]
		ERR_DSP_INUSE,
		[Token(Token = "0x4000A7D")]
		ERR_DSP_NOTFOUND,
		[Token(Token = "0x4000A7E")]
		ERR_DSP_RESERVED,
		[Token(Token = "0x4000A7F")]
		ERR_DSP_SILENCE,
		[Token(Token = "0x4000A80")]
		ERR_DSP_TYPE,
		[Token(Token = "0x4000A81")]
		ERR_FILE_BAD,
		[Token(Token = "0x4000A82")]
		ERR_FILE_COULDNOTSEEK,
		[Token(Token = "0x4000A83")]
		ERR_FILE_DISKEJECTED,
		[Token(Token = "0x4000A84")]
		ERR_FILE_EOF,
		[Token(Token = "0x4000A85")]
		ERR_FILE_ENDOFDATA,
		[Token(Token = "0x4000A86")]
		ERR_FILE_NOTFOUND,
		[Token(Token = "0x4000A87")]
		ERR_FORMAT,
		[Token(Token = "0x4000A88")]
		ERR_HEADER_MISMATCH,
		[Token(Token = "0x4000A89")]
		ERR_HTTP,
		[Token(Token = "0x4000A8A")]
		ERR_HTTP_ACCESS,
		[Token(Token = "0x4000A8B")]
		ERR_HTTP_PROXY_AUTH,
		[Token(Token = "0x4000A8C")]
		ERR_HTTP_SERVER_ERROR,
		[Token(Token = "0x4000A8D")]
		ERR_HTTP_TIMEOUT,
		[Token(Token = "0x4000A8E")]
		ERR_INITIALIZATION,
		[Token(Token = "0x4000A8F")]
		ERR_INITIALIZED,
		[Token(Token = "0x4000A90")]
		ERR_INTERNAL,
		[Token(Token = "0x4000A91")]
		ERR_INVALID_FLOAT,
		[Token(Token = "0x4000A92")]
		ERR_INVALID_HANDLE,
		[Token(Token = "0x4000A93")]
		ERR_INVALID_PARAM,
		[Token(Token = "0x4000A94")]
		ERR_INVALID_POSITION,
		[Token(Token = "0x4000A95")]
		ERR_INVALID_SPEAKER,
		[Token(Token = "0x4000A96")]
		ERR_INVALID_SYNCPOINT,
		[Token(Token = "0x4000A97")]
		ERR_INVALID_THREAD,
		[Token(Token = "0x4000A98")]
		ERR_INVALID_VECTOR,
		[Token(Token = "0x4000A99")]
		ERR_MAXAUDIBLE,
		[Token(Token = "0x4000A9A")]
		ERR_MEMORY,
		[Token(Token = "0x4000A9B")]
		ERR_MEMORY_CANTPOINT,
		[Token(Token = "0x4000A9C")]
		ERR_NEEDS3D,
		[Token(Token = "0x4000A9D")]
		ERR_NEEDSHARDWARE,
		[Token(Token = "0x4000A9E")]
		ERR_NET_CONNECT,
		[Token(Token = "0x4000A9F")]
		ERR_NET_SOCKET_ERROR,
		[Token(Token = "0x4000AA0")]
		ERR_NET_URL,
		[Token(Token = "0x4000AA1")]
		ERR_NET_WOULD_BLOCK,
		[Token(Token = "0x4000AA2")]
		ERR_NOTREADY,
		[Token(Token = "0x4000AA3")]
		ERR_OUTPUT_ALLOCATED,
		[Token(Token = "0x4000AA4")]
		ERR_OUTPUT_CREATEBUFFER,
		[Token(Token = "0x4000AA5")]
		ERR_OUTPUT_DRIVERCALL,
		[Token(Token = "0x4000AA6")]
		ERR_OUTPUT_FORMAT,
		[Token(Token = "0x4000AA7")]
		ERR_OUTPUT_INIT,
		[Token(Token = "0x4000AA8")]
		ERR_OUTPUT_NODRIVERS,
		[Token(Token = "0x4000AA9")]
		ERR_PLUGIN,
		[Token(Token = "0x4000AAA")]
		ERR_PLUGIN_MISSING,
		[Token(Token = "0x4000AAB")]
		ERR_PLUGIN_RESOURCE,
		[Token(Token = "0x4000AAC")]
		ERR_PLUGIN_VERSION,
		[Token(Token = "0x4000AAD")]
		ERR_RECORD,
		[Token(Token = "0x4000AAE")]
		ERR_REVERB_CHANNELGROUP,
		[Token(Token = "0x4000AAF")]
		ERR_REVERB_INSTANCE,
		[Token(Token = "0x4000AB0")]
		ERR_SUBSOUNDS,
		[Token(Token = "0x4000AB1")]
		ERR_SUBSOUND_ALLOCATED,
		[Token(Token = "0x4000AB2")]
		ERR_SUBSOUND_CANTMOVE,
		[Token(Token = "0x4000AB3")]
		ERR_TAGNOTFOUND,
		[Token(Token = "0x4000AB4")]
		ERR_TOOMANYCHANNELS,
		[Token(Token = "0x4000AB5")]
		ERR_TRUNCATED,
		[Token(Token = "0x4000AB6")]
		ERR_UNIMPLEMENTED,
		[Token(Token = "0x4000AB7")]
		ERR_UNINITIALIZED,
		[Token(Token = "0x4000AB8")]
		ERR_UNSUPPORTED,
		[Token(Token = "0x4000AB9")]
		ERR_VERSION,
		[Token(Token = "0x4000ABA")]
		ERR_EVENT_ALREADY_LOADED,
		[Token(Token = "0x4000ABB")]
		ERR_EVENT_LIVEUPDATE_BUSY,
		[Token(Token = "0x4000ABC")]
		ERR_EVENT_LIVEUPDATE_MISMATCH,
		[Token(Token = "0x4000ABD")]
		ERR_EVENT_LIVEUPDATE_TIMEOUT,
		[Token(Token = "0x4000ABE")]
		ERR_EVENT_NOTFOUND,
		[Token(Token = "0x4000ABF")]
		ERR_STUDIO_UNINITIALIZED,
		[Token(Token = "0x4000AC0")]
		ERR_STUDIO_NOT_LOADED,
		[Token(Token = "0x4000AC1")]
		ERR_INVALID_STRING,
		[Token(Token = "0x4000AC2")]
		ERR_ALREADY_LOCKED,
		[Token(Token = "0x4000AC3")]
		ERR_NOT_LOCKED,
		[Token(Token = "0x4000AC4")]
		ERR_RECORD_DISCONNECTED,
		[Token(Token = "0x4000AC5")]
		ERR_TOOMANYSAMPLES
	}
	[Token(Token = "0x20001E8")]
	public enum CHANNELCONTROL_TYPE
	{
		[Token(Token = "0x4000AC7")]
		CHANNEL,
		[Token(Token = "0x4000AC8")]
		CHANNELGROUP
	}
	[Token(Token = "0x20001E9")]
	public struct VECTOR
	{
		[Token(Token = "0x4000AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x4000ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x4000ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float z;
	}
	[Token(Token = "0x20001EA")]
	public struct ATTRIBUTES_3D
	{
		[Token(Token = "0x4000ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VECTOR position;

		[Token(Token = "0x4000ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public VECTOR velocity;

		[Token(Token = "0x4000ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VECTOR forward;

		[Token(Token = "0x4000ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public VECTOR up;
	}
	[Token(Token = "0x20001EB")]
	public struct ASYNCREADINFO
	{
		[Token(Token = "0x4000AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Token(Token = "0x4000AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint offset;

		[Token(Token = "0x4000AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint sizebytes;

		[Token(Token = "0x4000AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int priority;

		[Token(Token = "0x4000AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntPtr userdata;

		[Token(Token = "0x4000AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public IntPtr buffer;

		[Token(Token = "0x4000AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint bytesread;

		[Token(Token = "0x4000AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public ASYNCREADINFO_DONE_CALLBACK done;
	}
	[Token(Token = "0x20001EC")]
	public enum OUTPUTTYPE
	{
		[Token(Token = "0x4000AD9")]
		AUTODETECT,
		[Token(Token = "0x4000ADA")]
		UNKNOWN,
		[Token(Token = "0x4000ADB")]
		NOSOUND,
		[Token(Token = "0x4000ADC")]
		WAVWRITER,
		[Token(Token = "0x4000ADD")]
		NOSOUND_NRT,
		[Token(Token = "0x4000ADE")]
		WAVWRITER_NRT,
		[Token(Token = "0x4000ADF")]
		DSOUND,
		[Token(Token = "0x4000AE0")]
		WINMM,
		[Token(Token = "0x4000AE1")]
		WASAPI,
		[Token(Token = "0x4000AE2")]
		ASIO,
		[Token(Token = "0x4000AE3")]
		PULSEAUDIO,
		[Token(Token = "0x4000AE4")]
		ALSA,
		[Token(Token = "0x4000AE5")]
		COREAUDIO,
		[Token(Token = "0x4000AE6")]
		XAUDIO,
		[Token(Token = "0x4000AE7")]
		PS3,
		[Token(Token = "0x4000AE8")]
		AUDIOTRACK,
		[Token(Token = "0x4000AE9")]
		OPENSL,
		[Token(Token = "0x4000AEA")]
		WIIU,
		[Token(Token = "0x4000AEB")]
		AUDIOOUT,
		[Token(Token = "0x4000AEC")]
		AUDIO3D,
		[Token(Token = "0x4000AED")]
		ATMOS,
		[Token(Token = "0x4000AEE")]
		WEBAUDIO,
		[Token(Token = "0x4000AEF")]
		NNAUDIO,
		[Token(Token = "0x4000AF0")]
		WINSONIC,
		[Token(Token = "0x4000AF1")]
		MAX
	}
	[Token(Token = "0x20001ED")]
	public enum DEBUG_MODE
	{
		[Token(Token = "0x4000AF3")]
		TTY,
		[Token(Token = "0x4000AF4")]
		FILE,
		[Token(Token = "0x4000AF5")]
		CALLBACK
	}
	[Token(Token = "0x20001EE")]
	[Flags]
	public enum DEBUG_FLAGS : uint
	{
		[Token(Token = "0x4000AF7")]
		NONE = 0u,
		[Token(Token = "0x4000AF8")]
		ERROR = 1u,
		[Token(Token = "0x4000AF9")]
		WARNING = 2u,
		[Token(Token = "0x4000AFA")]
		LOG = 4u,
		[Token(Token = "0x4000AFB")]
		TYPE_MEMORY = 0x100u,
		[Token(Token = "0x4000AFC")]
		TYPE_FILE = 0x200u,
		[Token(Token = "0x4000AFD")]
		TYPE_CODEC = 0x400u,
		[Token(Token = "0x4000AFE")]
		TYPE_TRACE = 0x800u,
		[Token(Token = "0x4000AFF")]
		DISPLAY_TIMESTAMPS = 0x10000u,
		[Token(Token = "0x4000B00")]
		DISPLAY_LINENUMBERS = 0x20000u,
		[Token(Token = "0x4000B01")]
		DISPLAY_THREAD = 0x40000u
	}
	[Token(Token = "0x20001EF")]
	[Flags]
	public enum MEMORY_TYPE : uint
	{
		[Token(Token = "0x4000B03")]
		NORMAL = 0u,
		[Token(Token = "0x4000B04")]
		STREAM_FILE = 1u,
		[Token(Token = "0x4000B05")]
		STREAM_DECODE = 2u,
		[Token(Token = "0x4000B06")]
		SAMPLEDATA = 4u,
		[Token(Token = "0x4000B07")]
		DSP_BUFFER = 8u,
		[Token(Token = "0x4000B08")]
		PLUGIN = 0x10u,
		[Token(Token = "0x4000B09")]
		XBOX360_PHYSICAL = 0x100000u,
		[Token(Token = "0x4000B0A")]
		PERSISTENT = 0x200000u,
		[Token(Token = "0x4000B0B")]
		SECONDARY = 0x400000u,
		[Token(Token = "0x4000B0C")]
		ALL = uint.MaxValue
	}
	[Token(Token = "0x20001F0")]
	public enum SPEAKERMODE
	{
		[Token(Token = "0x4000B0E")]
		DEFAULT,
		[Token(Token = "0x4000B0F")]
		RAW,
		[Token(Token = "0x4000B10")]
		MONO,
		[Token(Token = "0x4000B11")]
		STEREO,
		[Token(Token = "0x4000B12")]
		QUAD,
		[Token(Token = "0x4000B13")]
		SURROUND,
		[Token(Token = "0x4000B14")]
		_5POINT1,
		[Token(Token = "0x4000B15")]
		_7POINT1,
		[Token(Token = "0x4000B16")]
		_7POINT1POINT4,
		[Token(Token = "0x4000B17")]
		MAX
	}
	[Token(Token = "0x20001F1")]
	public enum SPEAKER
	{
		[Token(Token = "0x4000B19")]
		FRONT_LEFT,
		[Token(Token = "0x4000B1A")]
		FRONT_RIGHT,
		[Token(Token = "0x4000B1B")]
		FRONT_CENTER,
		[Token(Token = "0x4000B1C")]
		LOW_FREQUENCY,
		[Token(Token = "0x4000B1D")]
		SURROUND_LEFT,
		[Token(Token = "0x4000B1E")]
		SURROUND_RIGHT,
		[Token(Token = "0x4000B1F")]
		BACK_LEFT,
		[Token(Token = "0x4000B20")]
		BACK_RIGHT,
		[Token(Token = "0x4000B21")]
		TOP_FRONT_LEFT,
		[Token(Token = "0x4000B22")]
		TOP_FRONT_RIGHT,
		[Token(Token = "0x4000B23")]
		TOP_BACK_LEFT,
		[Token(Token = "0x4000B24")]
		TOP_BACK_RIGHT,
		[Token(Token = "0x4000B25")]
		MAX
	}
	[Token(Token = "0x20001F2")]
	[Flags]
	public enum CHANNELMASK : uint
	{
		[Token(Token = "0x4000B27")]
		FRONT_LEFT = 1u,
		[Token(Token = "0x4000B28")]
		FRONT_RIGHT = 2u,
		[Token(Token = "0x4000B29")]
		FRONT_CENTER = 4u,
		[Token(Token = "0x4000B2A")]
		LOW_FREQUENCY = 8u,
		[Token(Token = "0x4000B2B")]
		SURROUND_LEFT = 0x10u,
		[Token(Token = "0x4000B2C")]
		SURROUND_RIGHT = 0x20u,
		[Token(Token = "0x4000B2D")]
		BACK_LEFT = 0x40u,
		[Token(Token = "0x4000B2E")]
		BACK_RIGHT = 0x80u,
		[Token(Token = "0x4000B2F")]
		BACK_CENTER = 0x100u,
		[Token(Token = "0x4000B30")]
		MONO = 1u,
		[Token(Token = "0x4000B31")]
		STEREO = 3u,
		[Token(Token = "0x4000B32")]
		LRC = 7u,
		[Token(Token = "0x4000B33")]
		QUAD = 0x33u,
		[Token(Token = "0x4000B34")]
		SURROUND = 0x37u,
		[Token(Token = "0x4000B35")]
		_5POINT1 = 0x3Fu,
		[Token(Token = "0x4000B36")]
		_5POINT1_REARS = 0xCFu,
		[Token(Token = "0x4000B37")]
		_7POINT0 = 0xF7u,
		[Token(Token = "0x4000B38")]
		_7POINT1 = 0xFFu
	}
	[Token(Token = "0x20001F3")]
	public enum CHANNELORDER
	{
		[Token(Token = "0x4000B3A")]
		DEFAULT,
		[Token(Token = "0x4000B3B")]
		WAVEFORMAT,
		[Token(Token = "0x4000B3C")]
		PROTOOLS,
		[Token(Token = "0x4000B3D")]
		ALLMONO,
		[Token(Token = "0x4000B3E")]
		ALLSTEREO,
		[Token(Token = "0x4000B3F")]
		ALSA,
		[Token(Token = "0x4000B40")]
		MAX
	}
	[Token(Token = "0x20001F4")]
	public enum PLUGINTYPE
	{
		[Token(Token = "0x4000B42")]
		OUTPUT,
		[Token(Token = "0x4000B43")]
		CODEC,
		[Token(Token = "0x4000B44")]
		DSP,
		[Token(Token = "0x4000B45")]
		MAX
	}
	[Token(Token = "0x20001F5")]
	public struct PLUGINLIST
	{
		[Token(Token = "0x4000B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private PLUGINTYPE type;

		[Token(Token = "0x4000B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private IntPtr description;
	}
	[Token(Token = "0x20001F6")]
	[Flags]
	public enum INITFLAGS : uint
	{
		[Token(Token = "0x4000B49")]
		NORMAL = 0u,
		[Token(Token = "0x4000B4A")]
		STREAM_FROM_UPDATE = 1u,
		[Token(Token = "0x4000B4B")]
		MIX_FROM_UPDATE = 2u,
		[Token(Token = "0x4000B4C")]
		_3D_RIGHTHANDED = 4u,
		[Token(Token = "0x4000B4D")]
		CHANNEL_LOWPASS = 0x100u,
		[Token(Token = "0x4000B4E")]
		CHANNEL_DISTANCEFILTER = 0x200u,
		[Token(Token = "0x4000B4F")]
		PROFILE_ENABLE = 0x10000u,
		[Token(Token = "0x4000B50")]
		VOL0_BECOMES_VIRTUAL = 0x20000u,
		[Token(Token = "0x4000B51")]
		GEOMETRY_USECLOSEST = 0x40000u,
		[Token(Token = "0x4000B52")]
		PREFER_DOLBY_DOWNMIX = 0x80000u,
		[Token(Token = "0x4000B53")]
		THREAD_UNSAFE = 0x100000u,
		[Token(Token = "0x4000B54")]
		PROFILE_METER_ALL = 0x200000u,
		[Token(Token = "0x4000B55")]
		DISABLE_SRS_HIGHPASSFILTER = 0x400000u
	}
	[Token(Token = "0x20001F7")]
	public enum SOUND_TYPE
	{
		[Token(Token = "0x4000B57")]
		UNKNOWN,
		[Token(Token = "0x4000B58")]
		AIFF,
		[Token(Token = "0x4000B59")]
		ASF,
		[Token(Token = "0x4000B5A")]
		DLS,
		[Token(Token = "0x4000B5B")]
		FLAC,
		[Token(Token = "0x4000B5C")]
		FSB,
		[Token(Token = "0x4000B5D")]
		IT,
		[Token(Token = "0x4000B5E")]
		MIDI,
		[Token(Token = "0x4000B5F")]
		MOD,
		[Token(Token = "0x4000B60")]
		MPEG,
		[Token(Token = "0x4000B61")]
		OGGVORBIS,
		[Token(Token = "0x4000B62")]
		PLAYLIST,
		[Token(Token = "0x4000B63")]
		RAW,
		[Token(Token = "0x4000B64")]
		S3M,
		[Token(Token = "0x4000B65")]
		USER,
		[Token(Token = "0x4000B66")]
		WAV,
		[Token(Token = "0x4000B67")]
		XM,
		[Token(Token = "0x4000B68")]
		XMA,
		[Token(Token = "0x4000B69")]
		AUDIOQUEUE,
		[Token(Token = "0x4000B6A")]
		AT9,
		[Token(Token = "0x4000B6B")]
		VORBIS,
		[Token(Token = "0x4000B6C")]
		MEDIA_FOUNDATION,
		[Token(Token = "0x4000B6D")]
		MEDIACODEC,
		[Token(Token = "0x4000B6E")]
		FADPCM,
		[Token(Token = "0x4000B6F")]
		MAX
	}
	[Token(Token = "0x20001F8")]
	public enum SOUND_FORMAT
	{
		[Token(Token = "0x4000B71")]
		NONE,
		[Token(Token = "0x4000B72")]
		PCM8,
		[Token(Token = "0x4000B73")]
		PCM16,
		[Token(Token = "0x4000B74")]
		PCM24,
		[Token(Token = "0x4000B75")]
		PCM32,
		[Token(Token = "0x4000B76")]
		PCMFLOAT,
		[Token(Token = "0x4000B77")]
		BITSTREAM,
		[Token(Token = "0x4000B78")]
		MAX
	}
	[Token(Token = "0x20001F9")]
	[Flags]
	public enum MODE : uint
	{
		[Token(Token = "0x4000B7A")]
		DEFAULT = 0u,
		[Token(Token = "0x4000B7B")]
		LOOP_OFF = 1u,
		[Token(Token = "0x4000B7C")]
		LOOP_NORMAL = 2u,
		[Token(Token = "0x4000B7D")]
		LOOP_BIDI = 4u,
		[Token(Token = "0x4000B7E")]
		_2D = 8u,
		[Token(Token = "0x4000B7F")]
		_3D = 0x10u,
		[Token(Token = "0x4000B80")]
		CREATESTREAM = 0x80u,
		[Token(Token = "0x4000B81")]
		CREATESAMPLE = 0x100u,
		[Token(Token = "0x4000B82")]
		CREATECOMPRESSEDSAMPLE = 0x200u,
		[Token(Token = "0x4000B83")]
		OPENUSER = 0x400u,
		[Token(Token = "0x4000B84")]
		OPENMEMORY = 0x800u,
		[Token(Token = "0x4000B85")]
		OPENMEMORY_POINT = 0x10000000u,
		[Token(Token = "0x4000B86")]
		OPENRAW = 0x1000u,
		[Token(Token = "0x4000B87")]
		OPENONLY = 0x2000u,
		[Token(Token = "0x4000B88")]
		ACCURATETIME = 0x4000u,
		[Token(Token = "0x4000B89")]
		MPEGSEARCH = 0x8000u,
		[Token(Token = "0x4000B8A")]
		NONBLOCKING = 0x10000u,
		[Token(Token = "0x4000B8B")]
		UNIQUE = 0x20000u,
		[Token(Token = "0x4000B8C")]
		_3D_HEADRELATIVE = 0x40000u,
		[Token(Token = "0x4000B8D")]
		_3D_WORLDRELATIVE = 0x80000u,
		[Token(Token = "0x4000B8E")]
		_3D_INVERSEROLLOFF = 0x100000u,
		[Token(Token = "0x4000B8F")]
		_3D_LINEARROLLOFF = 0x200000u,
		[Token(Token = "0x4000B90")]
		_3D_LINEARSQUAREROLLOFF = 0x400000u,
		[Token(Token = "0x4000B91")]
		_3D_INVERSETAPEREDROLLOFF = 0x800000u,
		[Token(Token = "0x4000B92")]
		_3D_CUSTOMROLLOFF = 0x4000000u,
		[Token(Token = "0x4000B93")]
		_3D_IGNOREGEOMETRY = 0x40000000u,
		[Token(Token = "0x4000B94")]
		IGNORETAGS = 0x2000000u,
		[Token(Token = "0x4000B95")]
		LOWMEM = 0x8000000u,
		[Token(Token = "0x4000B96")]
		LOADSECONDARYRAM = 0x20000000u,
		[Token(Token = "0x4000B97")]
		VIRTUAL_PLAYFROMSTART = 0x80000000u
	}
	[Token(Token = "0x20001FA")]
	public enum OPENSTATE
	{
		[Token(Token = "0x4000B99")]
		READY,
		[Token(Token = "0x4000B9A")]
		LOADING,
		[Token(Token = "0x4000B9B")]
		ERROR,
		[Token(Token = "0x4000B9C")]
		CONNECTING,
		[Token(Token = "0x4000B9D")]
		BUFFERING,
		[Token(Token = "0x4000B9E")]
		SEEKING,
		[Token(Token = "0x4000B9F")]
		PLAYING,
		[Token(Token = "0x4000BA0")]
		SETPOSITION,
		[Token(Token = "0x4000BA1")]
		MAX
	}
	[Token(Token = "0x20001FB")]
	public enum SOUNDGROUP_BEHAVIOR
	{
		[Token(Token = "0x4000BA3")]
		BEHAVIOR_FAIL,
		[Token(Token = "0x4000BA4")]
		BEHAVIOR_MUTE,
		[Token(Token = "0x4000BA5")]
		BEHAVIOR_STEALLOWEST,
		[Token(Token = "0x4000BA6")]
		MAX
	}
	[Token(Token = "0x20001FC")]
	public enum CHANNELCONTROL_CALLBACK_TYPE
	{
		[Token(Token = "0x4000BA8")]
		END,
		[Token(Token = "0x4000BA9")]
		VIRTUALVOICE,
		[Token(Token = "0x4000BAA")]
		SYNCPOINT,
		[Token(Token = "0x4000BAB")]
		OCCLUSION,
		[Token(Token = "0x4000BAC")]
		MAX
	}
	[Token(Token = "0x20001FD")]
	public struct CHANNELCONTROL_DSP_INDEX
	{
		[Token(Token = "0x4000BAD")]
		public const int HEAD = -1;

		[Token(Token = "0x4000BAE")]
		public const int FADER = -2;

		[Token(Token = "0x4000BAF")]
		public const int TAIL = -3;
	}
	[Token(Token = "0x20001FE")]
	public enum ERRORCALLBACK_INSTANCETYPE
	{
		[Token(Token = "0x4000BB1")]
		NONE,
		[Token(Token = "0x4000BB2")]
		SYSTEM,
		[Token(Token = "0x4000BB3")]
		CHANNEL,
		[Token(Token = "0x4000BB4")]
		CHANNELGROUP,
		[Token(Token = "0x4000BB5")]
		CHANNELCONTROL,
		[Token(Token = "0x4000BB6")]
		SOUND,
		[Token(Token = "0x4000BB7")]
		SOUNDGROUP,
		[Token(Token = "0x4000BB8")]
		DSP,
		[Token(Token = "0x4000BB9")]
		DSPCONNECTION,
		[Token(Token = "0x4000BBA")]
		GEOMETRY,
		[Token(Token = "0x4000BBB")]
		REVERB3D,
		[Token(Token = "0x4000BBC")]
		STUDIO_SYSTEM,
		[Token(Token = "0x4000BBD")]
		STUDIO_EVENTDESCRIPTION,
		[Token(Token = "0x4000BBE")]
		STUDIO_EVENTINSTANCE,
		[Token(Token = "0x4000BBF")]
		STUDIO_PARAMETERINSTANCE,
		[Token(Token = "0x4000BC0")]
		STUDIO_BUS,
		[Token(Token = "0x4000BC1")]
		STUDIO_VCA,
		[Token(Token = "0x4000BC2")]
		STUDIO_BANK,
		[Token(Token = "0x4000BC3")]
		STUDIO_COMMANDREPLAY
	}
	[Token(Token = "0x20001FF")]
	public struct ERRORCALLBACK_INFO
	{
		[Token(Token = "0x4000BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public RESULT result;

		[Token(Token = "0x4000BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ERRORCALLBACK_INSTANCETYPE instancetype;

		[Token(Token = "0x4000BC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr instance;

		[Token(Token = "0x4000BC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public StringWrapper functionname;

		[Token(Token = "0x4000BC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public StringWrapper functionparams;
	}
	[Token(Token = "0x2000200")]
	[Flags]
	public enum SYSTEM_CALLBACK_TYPE : uint
	{
		[Token(Token = "0x4000BCA")]
		DEVICELISTCHANGED = 1u,
		[Token(Token = "0x4000BCB")]
		DEVICELOST = 2u,
		[Token(Token = "0x4000BCC")]
		MEMORYALLOCATIONFAILED = 4u,
		[Token(Token = "0x4000BCD")]
		THREADCREATED = 8u,
		[Token(Token = "0x4000BCE")]
		BADDSPCONNECTION = 0x10u,
		[Token(Token = "0x4000BCF")]
		PREMIX = 0x20u,
		[Token(Token = "0x4000BD0")]
		POSTMIX = 0x40u,
		[Token(Token = "0x4000BD1")]
		ERROR = 0x80u,
		[Token(Token = "0x4000BD2")]
		MIDMIX = 0x100u,
		[Token(Token = "0x4000BD3")]
		THREADDESTROYED = 0x200u,
		[Token(Token = "0x4000BD4")]
		PREUPDATE = 0x400u,
		[Token(Token = "0x4000BD5")]
		POSTUPDATE = 0x800u,
		[Token(Token = "0x4000BD6")]
		RECORDLISTCHANGED = 0x1000u,
		[Token(Token = "0x4000BD7")]
		ALL = uint.MaxValue
	}
	[Token(Token = "0x2000201")]
	public delegate RESULT ASYNCREADINFO_DONE_CALLBACK(IntPtr info, RESULT result);
	[Token(Token = "0x2000202")]
	public delegate RESULT DEBUG_CALLBACK(DEBUG_FLAGS flags, StringWrapper file, int line, StringWrapper func, StringWrapper message);
	[Token(Token = "0x2000203")]
	public delegate RESULT SYSTEM_CALLBACK(IntPtr systemraw, SYSTEM_CALLBACK_TYPE type, IntPtr commanddata1, IntPtr commanddata2, IntPtr userdata);
	[Token(Token = "0x2000204")]
	public delegate RESULT CHANNEL_CALLBACK(IntPtr channelraw, CHANNELCONTROL_TYPE controltype, CHANNELCONTROL_CALLBACK_TYPE type, IntPtr commanddata1, IntPtr commanddata2);
	[Token(Token = "0x2000205")]
	public delegate RESULT SOUND_NONBLOCKCALLBACK(IntPtr soundraw, RESULT result);
	[Token(Token = "0x2000206")]
	public delegate RESULT SOUND_PCMREADCALLBACK(IntPtr soundraw, IntPtr data, uint datalen);
	[Token(Token = "0x2000207")]
	public delegate RESULT SOUND_PCMSETPOSCALLBACK(IntPtr soundraw, int subsound, uint position, TIMEUNIT postype);
	[Token(Token = "0x2000208")]
	public delegate RESULT FILE_OPENCALLBACK(StringWrapper name, ref uint filesize, ref IntPtr handle, IntPtr userdata);
	[Token(Token = "0x2000209")]
	public delegate RESULT FILE_CLOSECALLBACK(IntPtr handle, IntPtr userdata);
	[Token(Token = "0x200020A")]
	public delegate RESULT FILE_READCALLBACK(IntPtr handle, IntPtr buffer, uint sizebytes, ref uint bytesread, IntPtr userdata);
	[Token(Token = "0x200020B")]
	public delegate RESULT FILE_SEEKCALLBACK(IntPtr handle, uint pos, IntPtr userdata);
	[Token(Token = "0x200020C")]
	public delegate RESULT FILE_ASYNCREADCALLBACK(IntPtr handle, IntPtr info, IntPtr userdata);
	[Token(Token = "0x200020D")]
	public delegate RESULT FILE_ASYNCCANCELCALLBACK(IntPtr handle, IntPtr userdata);
	[Token(Token = "0x200020E")]
	public delegate IntPtr MEMORY_ALLOC_CALLBACK(uint size, MEMORY_TYPE type, StringWrapper sourcestr);
	[Token(Token = "0x200020F")]
	public delegate IntPtr MEMORY_REALLOC_CALLBACK(IntPtr ptr, uint size, MEMORY_TYPE type, StringWrapper sourcestr);
	[Token(Token = "0x2000210")]
	public delegate void MEMORY_FREE_CALLBACK(IntPtr ptr, MEMORY_TYPE type, StringWrapper sourcestr);
	[Token(Token = "0x2000211")]
	public delegate float CB_3D_ROLLOFFCALLBACK(IntPtr channelraw, float distance);
	[Token(Token = "0x2000212")]
	public enum DSP_RESAMPLER
	{
		[Token(Token = "0x4000BD9")]
		DEFAULT,
		[Token(Token = "0x4000BDA")]
		NOINTERP,
		[Token(Token = "0x4000BDB")]
		LINEAR,
		[Token(Token = "0x4000BDC")]
		CUBIC,
		[Token(Token = "0x4000BDD")]
		SPLINE,
		[Token(Token = "0x4000BDE")]
		MAX
	}
	[Token(Token = "0x2000213")]
	public enum DSPCONNECTION_TYPE
	{
		[Token(Token = "0x4000BE0")]
		STANDARD,
		[Token(Token = "0x4000BE1")]
		SIDECHAIN,
		[Token(Token = "0x4000BE2")]
		SEND,
		[Token(Token = "0x4000BE3")]
		SEND_SIDECHAIN,
		[Token(Token = "0x4000BE4")]
		MAX
	}
	[Token(Token = "0x2000214")]
	public enum TAGTYPE
	{
		[Token(Token = "0x4000BE6")]
		UNKNOWN,
		[Token(Token = "0x4000BE7")]
		ID3V1,
		[Token(Token = "0x4000BE8")]
		ID3V2,
		[Token(Token = "0x4000BE9")]
		VORBISCOMMENT,
		[Token(Token = "0x4000BEA")]
		SHOUTCAST,
		[Token(Token = "0x4000BEB")]
		ICECAST,
		[Token(Token = "0x4000BEC")]
		ASF,
		[Token(Token = "0x4000BED")]
		MIDI,
		[Token(Token = "0x4000BEE")]
		PLAYLIST,
		[Token(Token = "0x4000BEF")]
		FMOD,
		[Token(Token = "0x4000BF0")]
		USER,
		[Token(Token = "0x4000BF1")]
		MAX
	}
	[Token(Token = "0x2000215")]
	public enum TAGDATATYPE
	{
		[Token(Token = "0x4000BF3")]
		BINARY,
		[Token(Token = "0x4000BF4")]
		INT,
		[Token(Token = "0x4000BF5")]
		FLOAT,
		[Token(Token = "0x4000BF6")]
		STRING,
		[Token(Token = "0x4000BF7")]
		STRING_UTF16,
		[Token(Token = "0x4000BF8")]
		STRING_UTF16BE,
		[Token(Token = "0x4000BF9")]
		STRING_UTF8,
		[Token(Token = "0x4000BFA")]
		CDTOC,
		[Token(Token = "0x4000BFB")]
		MAX
	}
	[Token(Token = "0x2000216")]
	public struct TAG
	{
		[Token(Token = "0x4000BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public TAGTYPE type;

		[Token(Token = "0x4000BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public TAGDATATYPE datatype;

		[Token(Token = "0x4000BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public StringWrapper name;

		[Token(Token = "0x4000BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public IntPtr data;

		[Token(Token = "0x4000C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint datalen;

		[Token(Token = "0x4000C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool updated;
	}
	[Token(Token = "0x2000217")]
	[Flags]
	public enum TIMEUNIT : uint
	{
		[Token(Token = "0x4000C03")]
		MS = 1u,
		[Token(Token = "0x4000C04")]
		PCM = 2u,
		[Token(Token = "0x4000C05")]
		PCMBYTES = 4u,
		[Token(Token = "0x4000C06")]
		RAWBYTES = 8u,
		[Token(Token = "0x4000C07")]
		PCMFRACTION = 0x10u,
		[Token(Token = "0x4000C08")]
		MODORDER = 0x100u,
		[Token(Token = "0x4000C09")]
		MODROW = 0x200u,
		[Token(Token = "0x4000C0A")]
		MODPATTERN = 0x400u
	}
	[Token(Token = "0x2000218")]
	public struct PORT_INDEX
	{
		[Token(Token = "0x4000C0B")]
		public const ulong NONE = ulong.MaxValue;
	}
	[Token(Token = "0x2000219")]
	public struct CREATESOUNDEXINFO
	{
		[Token(Token = "0x4000C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int cbsize;

		[Token(Token = "0x4000C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint length;

		[Token(Token = "0x4000C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint fileoffset;

		[Token(Token = "0x4000C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int numchannels;

		[Token(Token = "0x4000C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int defaultfrequency;

		[Token(Token = "0x4000C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public SOUND_FORMAT format;

		[Token(Token = "0x4000C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint decodebuffersize;

		[Token(Token = "0x4000C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int initialsubsound;

		[Token(Token = "0x4000C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int numsubsounds;

		[Token(Token = "0x4000C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public IntPtr inclusionlist;

		[Token(Token = "0x4000C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int inclusionlistnum;

		[Token(Token = "0x4000C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public SOUND_PCMREADCALLBACK pcmreadcallback;

		[Token(Token = "0x4000C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SOUND_PCMSETPOSCALLBACK pcmsetposcallback;

		[Token(Token = "0x4000C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public SOUND_NONBLOCKCALLBACK nonblockcallback;

		[Token(Token = "0x4000C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IntPtr dlsname;

		[Token(Token = "0x4000C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public IntPtr encryptionkey;

		[Token(Token = "0x4000C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int maxpolyphony;

		[Token(Token = "0x4000C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public IntPtr userdata;

		[Token(Token = "0x4000C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public SOUND_TYPE suggestedsoundtype;

		[Token(Token = "0x4000C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public FILE_OPENCALLBACK fileuseropen;

		[Token(Token = "0x4000C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public FILE_CLOSECALLBACK fileuserclose;

		[Token(Token = "0x4000C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public FILE_READCALLBACK fileuserread;

		[Token(Token = "0x4000C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FILE_SEEKCALLBACK fileuserseek;

		[Token(Token = "0x4000C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public FILE_ASYNCREADCALLBACK fileuserasyncread;

		[Token(Token = "0x4000C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FILE_ASYNCCANCELCALLBACK fileuserasynccancel;

		[Token(Token = "0x4000C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public IntPtr fileuserdata;

		[Token(Token = "0x4000C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int filebuffersize;

		[Token(Token = "0x4000C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public CHANNELORDER channelorder;

		[Token(Token = "0x4000C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public CHANNELMASK channelmask;

		[Token(Token = "0x4000C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public IntPtr initialsoundgroup;

		[Token(Token = "0x4000C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public uint initialseekposition;

		[Token(Token = "0x4000C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public TIMEUNIT initialseekpostype;

		[Token(Token = "0x4000C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public int ignoresetfilesystem;

		[Token(Token = "0x4000C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public uint audioqueuepolicy;

		[Token(Token = "0x4000C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public uint minmidigranularity;

		[Token(Token = "0x4000C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public int nonblockthreadid;

		[Token(Token = "0x4000C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public IntPtr fsbguid;
	}
	[Token(Token = "0x200021A")]
	public struct REVERB_PROPERTIES
	{
		[Token(Token = "0x4000C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float DecayTime;

		[Token(Token = "0x4000C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float EarlyDelay;

		[Token(Token = "0x4000C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float LateDelay;

		[Token(Token = "0x4000C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float HFReference;

		[Token(Token = "0x4000C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float HFDecayRatio;

		[Token(Token = "0x4000C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float Diffusion;

		[Token(Token = "0x4000C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Density;

		[Token(Token = "0x4000C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float LowShelfFrequency;

		[Token(Token = "0x4000C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float LowShelfGain;

		[Token(Token = "0x4000C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float HighCut;

		[Token(Token = "0x4000C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float EarlyLateMix;

		[Token(Token = "0x4000C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float WetLevel;

		[Token(Token = "0x6000C0A")]
		[Address(RVA = "0x487C00", Offset = "0x487C00", VA = "0x487C00")]
		public REVERB_PROPERTIES(float decayTime, float earlyDelay, float lateDelay, float hfReference, float hfDecayRatio, float diffusion, float density, float lowShelfFrequency, float lowShelfGain, float highCut, float earlyLateMix, float wetLevel)
		{
		}
	}
	[Token(Token = "0x200021B")]
	public class PRESET
	{
		[Token(Token = "0x6000C0B")]
		[Address(RVA = "0x176CB38", Offset = "0x176CB38", VA = "0x176CB38")]
		public static REVERB_PROPERTIES OFF()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x6000C0C")]
		[Address(RVA = "0x176CBE8", Offset = "0x176CBE8", VA = "0x176CBE8")]
		public static REVERB_PROPERTIES GENERIC()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x6000C0D")]
		[Address(RVA = "0x176CC48", Offset = "0x176CC48", VA = "0x176CC48")]
		public static REVERB_PROPERTIES PADDEDCELL()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x6000C0E")]
		[Address(RVA = "0x176CCA8", Offset = "0x176CCA8", VA = "0x176CCA8")]
		public static REVERB_PROPERTIES ROOM()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x6000C0F")]
		[Address(RVA = "0x176CD08", Offset = "0x176CD08", VA = "0x176CD08")]
		public static REVERB_PROPERTIES BATHROOM()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x6000C10")]
		[Address(RVA = "0x176CD68", Offset = "0x176CD68", VA = "0x176CD68")]
		public static REVERB_PROPERTIES LIVINGROOM()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x6000C11")]
		[Address(RVA = "0x176CDC8", Offset = "0x176CDC8", VA = "0x176CDC8")]
		public static REVERB_PROPERTIES STONEROOM()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x6000C12")]
		[Address(RVA = "0x176CE28", Offset = "0x176CE28", VA = "0x176CE28")]
		public static REVERB_PROPERTIES AUDITORIUM()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x6000C13")]
		[Address(RVA = "0x176CE88", Offset = "0x176CE88", VA = "0x176CE88")]
		public static REVERB_PROPERTIES CONCERTHALL()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x6000C14")]
		[Address(RVA = "0x176CEE8", Offset = "0x176CEE8", VA = "0x176CEE8")]
		public static REVERB_PROPERTIES CAVE()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x6000C15")]
		[Address(RVA = "0x176CF48", Offset = "0x176CF48", VA = "0x176CF48")]
		public static REVERB_PROPERTIES ARENA()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x6000C16")]
		[Address(RVA = "0x176CFA8", Offset = "0x176CFA8", VA = "0x176CFA8")]
		public static REVERB_PROPERTIES HANGAR()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x6000C17")]
		[Address(RVA = "0x176D008", Offset = "0x176D008", VA = "0x176D008")]
		public static REVERB_PROPERTIES CARPETTEDHALLWAY()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x6000C18")]
		[Address(RVA = "0x176D068", Offset = "0x176D068", VA = "0x176D068")]
		public static REVERB_PROPERTIES HALLWAY()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x6000C19")]
		[Address(RVA = "0x176D0C8", Offset = "0x176D0C8", VA = "0x176D0C8")]
		public static REVERB_PROPERTIES STONECORRIDOR()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x6000C1A")]
		[Address(RVA = "0x176D128", Offset = "0x176D128", VA = "0x176D128")]
		public static REVERB_PROPERTIES ALLEY()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x6000C1B")]
		[Address(RVA = "0x176D188", Offset = "0x176D188", VA = "0x176D188")]
		public static REVERB_PROPERTIES FOREST()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x6000C1C")]
		[Address(RVA = "0x176D1E8", Offset = "0x176D1E8", VA = "0x176D1E8")]
		public static REVERB_PROPERTIES CITY()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x6000C1D")]
		[Address(RVA = "0x176D248", Offset = "0x176D248", VA = "0x176D248")]
		public static REVERB_PROPERTIES MOUNTAINS()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x6000C1E")]
		[Address(RVA = "0x176D2A8", Offset = "0x176D2A8", VA = "0x176D2A8")]
		public static REVERB_PROPERTIES QUARRY()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x6000C1F")]
		[Address(RVA = "0x176D308", Offset = "0x176D308", VA = "0x176D308")]
		public static REVERB_PROPERTIES PLAIN()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x6000C20")]
		[Address(RVA = "0x176D368", Offset = "0x176D368", VA = "0x176D368")]
		public static REVERB_PROPERTIES PARKINGLOT()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x6000C21")]
		[Address(RVA = "0x176D3C8", Offset = "0x176D3C8", VA = "0x176D3C8")]
		public static REVERB_PROPERTIES SEWERPIPE()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x6000C22")]
		[Address(RVA = "0x176D428", Offset = "0x176D428", VA = "0x176D428")]
		public static REVERB_PROPERTIES UNDERWATER()
		{
			return default(REVERB_PROPERTIES);
		}

		[Token(Token = "0x6000C23")]
		[Address(RVA = "0x176D488", Offset = "0x176D488", VA = "0x176D488")]
		public PRESET()
		{
		}
	}
	[Token(Token = "0x200021C")]
	public struct ADVANCEDSETTINGS
	{
		[Token(Token = "0x4000C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int cbSize;

		[Token(Token = "0x4000C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int maxMPEGCodecs;

		[Token(Token = "0x4000C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int maxADPCMCodecs;

		[Token(Token = "0x4000C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int maxXMACodecs;

		[Token(Token = "0x4000C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int maxVorbisCodecs;

		[Token(Token = "0x4000C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int maxAT9Codecs;

		[Token(Token = "0x4000C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int maxFADPCMCodecs;

		[Token(Token = "0x4000C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int maxPCMCodecs;

		[Token(Token = "0x4000C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int ASIONumChannels;

		[Token(Token = "0x4000C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public IntPtr ASIOChannelList;

		[Token(Token = "0x4000C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IntPtr ASIOSpeakerList;

		[Token(Token = "0x4000C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float HRTFMinAngle;

		[Token(Token = "0x4000C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float HRTFMaxAngle;

		[Token(Token = "0x4000C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float HRTFFreq;

		[Token(Token = "0x4000C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float vol0virtualvol;

		[Token(Token = "0x4000C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public uint defaultDecodeBufferSize;

		[Token(Token = "0x4000C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ushort profilePort;

		[Token(Token = "0x4000C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public uint geometryMaxFadeTime;

		[Token(Token = "0x4000C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float distanceFilterCenterFreq;

		[Token(Token = "0x4000C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public int reverb3Dinstance;

		[Token(Token = "0x4000C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int DSPBufferPoolSize;

		[Token(Token = "0x4000C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public uint stackSizeStream;

		[Token(Token = "0x4000C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public uint stackSizeNonBlocking;

		[Token(Token = "0x4000C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public uint stackSizeMixer;

		[Token(Token = "0x4000C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public DSP_RESAMPLER resamplerMethod;

		[Token(Token = "0x4000C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public uint commandQueueSize;

		[Token(Token = "0x4000C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public uint randomSeed;
	}
	[Token(Token = "0x200021D")]
	[Flags]
	public enum DRIVER_STATE : uint
	{
		[Token(Token = "0x4000C59")]
		CONNECTED = 1u,
		[Token(Token = "0x4000C5A")]
		DEFAULT = 2u
	}
	[Token(Token = "0x200021E")]
	public struct Factory
	{
		[Token(Token = "0x6000C24")]
		[Address(RVA = "0x176ACAC", Offset = "0x176ACAC", VA = "0x176ACAC")]
		public static RESULT System_Create(out System system)
		{
			return default(RESULT);
		}

		[PreserveSig]
		[Token(Token = "0x6000C25")]
		[Address(RVA = "0x176ACB0", Offset = "0x176ACB0", VA = "0x176ACB0")]
		private static extern RESULT FMOD5_System_Create(out IntPtr system);
	}
	[Token(Token = "0x200021F")]
	public struct Memory
	{
		[Token(Token = "0x6000C26")]
		[Address(RVA = "0x176C96C", Offset = "0x176C96C", VA = "0x176C96C")]
		public static RESULT Initialize(IntPtr poolmem, int poollen, MEMORY_ALLOC_CALLBACK useralloc, MEMORY_REALLOC_CALLBACK userrealloc, MEMORY_FREE_CALLBACK userfree, MEMORY_TYPE memtypeflags)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C27")]
		[Address(RVA = "0x176CA7C", Offset = "0x176CA7C", VA = "0x176CA7C")]
		public static RESULT GetStats(out int currentalloced, out int maxalloced)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C28")]
		[Address(RVA = "0x176CA84", Offset = "0x176CA84", VA = "0x176CA84")]
		public static RESULT GetStats(out int currentalloced, out int maxalloced, bool blocking)
		{
			return default(RESULT);
		}

		[PreserveSig]
		[Token(Token = "0x6000C29")]
		[Address(RVA = "0x176C990", Offset = "0x176C990", VA = "0x176C990")]
		private static extern RESULT FMOD5_Memory_Initialize(IntPtr poolmem, int poollen, MEMORY_ALLOC_CALLBACK useralloc, MEMORY_REALLOC_CALLBACK userrealloc, MEMORY_FREE_CALLBACK userfree, MEMORY_TYPE memtypeflags);

		[PreserveSig]
		[Token(Token = "0x6000C2A")]
		[Address(RVA = "0x176CA88", Offset = "0x176CA88", VA = "0x176CA88")]
		private static extern RESULT FMOD5_Memory_GetStats(out int currentalloced, out int maxalloced, bool blocking);
	}
	[Token(Token = "0x2000220")]
	public struct Debug
	{
		[Token(Token = "0x6000C2B")]
		[Address(RVA = "0x1769158", Offset = "0x1769158", VA = "0x1769158")]
		public static RESULT Initialize(DEBUG_FLAGS flags, DEBUG_MODE mode, DEBUG_CALLBACK callback, string filename)
		{
			return default(RESULT);
		}

		[PreserveSig]
		[Token(Token = "0x6000C2C")]
		[Address(RVA = "0x17692F0", Offset = "0x17692F0", VA = "0x17692F0")]
		private static extern RESULT FMOD5_Debug_Initialize(DEBUG_FLAGS flags, DEBUG_MODE mode, DEBUG_CALLBACK callback, byte[] filename);
	}
	[Token(Token = "0x2000221")]
	public struct System
	{
		[Token(Token = "0x4000C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Token(Token = "0x6000C2D")]
		[Address(RVA = "0x482334", Offset = "0x482334", VA = "0x482334")]
		public RESULT release()
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C2E")]
		[Address(RVA = "0x48233C", Offset = "0x48233C", VA = "0x48233C")]
		public RESULT setOutput(OUTPUTTYPE output)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C2F")]
		[Address(RVA = "0x482344", Offset = "0x482344", VA = "0x482344")]
		public RESULT getOutput(out OUTPUTTYPE output)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C30")]
		[Address(RVA = "0x48234C", Offset = "0x48234C", VA = "0x48234C")]
		public RESULT getNumDrivers(out int numdrivers)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C31")]
		[Address(RVA = "0x482354", Offset = "0x482354", VA = "0x482354")]
		public RESULT getDriverInfo(int id, out string name, int namelen, out Guid guid, out int systemrate, out SPEAKERMODE speakermode, out int speakermodechannels)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C32")]
		[Address(RVA = "0x482390", Offset = "0x482390", VA = "0x482390")]
		public RESULT getDriverInfo(int id, out Guid guid, out int systemrate, out SPEAKERMODE speakermode, out int speakermodechannels)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C33")]
		[Address(RVA = "0x4823B8", Offset = "0x4823B8", VA = "0x4823B8")]
		public RESULT setDriver(int driver)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C34")]
		[Address(RVA = "0x4823C0", Offset = "0x4823C0", VA = "0x4823C0")]
		public RESULT getDriver(out int driver)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C35")]
		[Address(RVA = "0x4823C8", Offset = "0x4823C8", VA = "0x4823C8")]
		public RESULT setSoftwareChannels(int numsoftwarechannels)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C36")]
		[Address(RVA = "0x4823D0", Offset = "0x4823D0", VA = "0x4823D0")]
		public RESULT getSoftwareChannels(out int numsoftwarechannels)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C37")]
		[Address(RVA = "0x4823D8", Offset = "0x4823D8", VA = "0x4823D8")]
		public RESULT setSoftwareFormat(int samplerate, SPEAKERMODE speakermode, int numrawspeakers)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C38")]
		[Address(RVA = "0x4823F4", Offset = "0x4823F4", VA = "0x4823F4")]
		public RESULT getSoftwareFormat(out int samplerate, out SPEAKERMODE speakermode, out int numrawspeakers)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C39")]
		[Address(RVA = "0x482410", Offset = "0x482410", VA = "0x482410")]
		public RESULT setDSPBufferSize(uint bufferlength, int numbuffers)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C3A")]
		[Address(RVA = "0x482418", Offset = "0x482418", VA = "0x482418")]
		public RESULT getDSPBufferSize(out uint bufferlength, out int numbuffers)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C3B")]
		[Address(RVA = "0x482420", Offset = "0x482420", VA = "0x482420")]
		public RESULT setFileSystem(FILE_OPENCALLBACK useropen, FILE_CLOSECALLBACK userclose, FILE_READCALLBACK userread, FILE_SEEKCALLBACK userseek, FILE_ASYNCREADCALLBACK userasyncread, FILE_ASYNCCANCELCALLBACK userasynccancel, int blockalign)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C3C")]
		[Address(RVA = "0x48245C", Offset = "0x48245C", VA = "0x48245C")]
		public RESULT attachFileSystem(FILE_OPENCALLBACK useropen, FILE_CLOSECALLBACK userclose, FILE_READCALLBACK userread, FILE_SEEKCALLBACK userseek)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C3D")]
		[Address(RVA = "0x482480", Offset = "0x482480", VA = "0x482480")]
		public RESULT setAdvancedSettings(ref ADVANCEDSETTINGS settings)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C3E")]
		[Address(RVA = "0x482488", Offset = "0x482488", VA = "0x482488")]
		public RESULT getAdvancedSettings(ref ADVANCEDSETTINGS settings)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C3F")]
		[Address(RVA = "0x482490", Offset = "0x482490", VA = "0x482490")]
		public RESULT setCallback(SYSTEM_CALLBACK callback, SYSTEM_CALLBACK_TYPE callbackmask)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C40")]
		[Address(RVA = "0x482498", Offset = "0x482498", VA = "0x482498")]
		public RESULT setPluginPath(string path)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C41")]
		[Address(RVA = "0x4824A0", Offset = "0x4824A0", VA = "0x4824A0")]
		public RESULT loadPlugin(string filename, out uint handle, uint priority)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C42")]
		[Address(RVA = "0x4824BC", Offset = "0x4824BC", VA = "0x4824BC")]
		public RESULT loadPlugin(string filename, out uint handle)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C43")]
		[Address(RVA = "0x4824DC", Offset = "0x4824DC", VA = "0x4824DC")]
		public RESULT unloadPlugin(uint handle)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C44")]
		[Address(RVA = "0x4824E4", Offset = "0x4824E4", VA = "0x4824E4")]
		public RESULT getNumNestedPlugins(uint handle, out int count)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C45")]
		[Address(RVA = "0x4824EC", Offset = "0x4824EC", VA = "0x4824EC")]
		public RESULT getNestedPlugin(uint handle, int index, out uint nestedhandle)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C46")]
		[Address(RVA = "0x482508", Offset = "0x482508", VA = "0x482508")]
		public RESULT getNumPlugins(PLUGINTYPE plugintype, out int numplugins)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C47")]
		[Address(RVA = "0x482510", Offset = "0x482510", VA = "0x482510")]
		public RESULT getPluginHandle(PLUGINTYPE plugintype, int index, out uint handle)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C48")]
		[Address(RVA = "0x48252C", Offset = "0x48252C", VA = "0x48252C")]
		public RESULT getPluginInfo(uint handle, out PLUGINTYPE plugintype, out string name, int namelen, out uint version)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C49")]
		[Address(RVA = "0x482554", Offset = "0x482554", VA = "0x482554")]
		public RESULT getPluginInfo(uint handle, out PLUGINTYPE plugintype, out uint version)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C4A")]
		[Address(RVA = "0x482570", Offset = "0x482570", VA = "0x482570")]
		public RESULT setOutputByPlugin(uint handle)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C4B")]
		[Address(RVA = "0x482578", Offset = "0x482578", VA = "0x482578")]
		public RESULT getOutputByPlugin(out uint handle)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C4C")]
		[Address(RVA = "0x482580", Offset = "0x482580", VA = "0x482580")]
		public RESULT createDSPByPlugin(uint handle, out DSP dsp)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C4D")]
		[Address(RVA = "0x482588", Offset = "0x482588", VA = "0x482588")]
		public RESULT getDSPInfoByPlugin(uint handle, out IntPtr description)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C4E")]
		[Address(RVA = "0x482590", Offset = "0x482590", VA = "0x482590")]
		public RESULT registerDSP(ref DSP_DESCRIPTION description, out uint handle)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C4F")]
		[Address(RVA = "0x482598", Offset = "0x482598", VA = "0x482598")]
		public RESULT init(int maxchannels, INITFLAGS flags, IntPtr extradriverdata)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C50")]
		[Address(RVA = "0x4825B4", Offset = "0x4825B4", VA = "0x4825B4")]
		public RESULT close()
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C51")]
		[Address(RVA = "0x4825BC", Offset = "0x4825BC", VA = "0x4825BC")]
		public RESULT update()
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C52")]
		[Address(RVA = "0x4825C4", Offset = "0x4825C4", VA = "0x4825C4")]
		public RESULT setSpeakerPosition(SPEAKER speaker, float x, float y, bool active)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C53")]
		[Address(RVA = "0x4825E8", Offset = "0x4825E8", VA = "0x4825E8")]
		public RESULT getSpeakerPosition(SPEAKER speaker, out float x, out float y, out bool active)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C54")]
		[Address(RVA = "0x48260C", Offset = "0x48260C", VA = "0x48260C")]
		public RESULT setStreamBufferSize(uint filebuffersize, TIMEUNIT filebuffersizetype)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C55")]
		[Address(RVA = "0x482614", Offset = "0x482614", VA = "0x482614")]
		public RESULT getStreamBufferSize(out uint filebuffersize, out TIMEUNIT filebuffersizetype)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C56")]
		[Address(RVA = "0x48261C", Offset = "0x48261C", VA = "0x48261C")]
		public RESULT set3DSettings(float dopplerscale, float distancefactor, float rolloffscale)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C57")]
		[Address(RVA = "0x482638", Offset = "0x482638", VA = "0x482638")]
		public RESULT get3DSettings(out float dopplerscale, out float distancefactor, out float rolloffscale)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C58")]
		[Address(RVA = "0x482654", Offset = "0x482654", VA = "0x482654")]
		public RESULT set3DNumListeners(int numlisteners)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C59")]
		[Address(RVA = "0x48265C", Offset = "0x48265C", VA = "0x48265C")]
		public RESULT get3DNumListeners(out int numlisteners)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C5A")]
		[Address(RVA = "0x482664", Offset = "0x482664", VA = "0x482664")]
		public RESULT set3DListenerAttributes(int listener, ref VECTOR pos, ref VECTOR vel, ref VECTOR forward, ref VECTOR up)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C5B")]
		[Address(RVA = "0x48268C", Offset = "0x48268C", VA = "0x48268C")]
		public RESULT get3DListenerAttributes(int listener, out VECTOR pos, out VECTOR vel, out VECTOR forward, out VECTOR up)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C5C")]
		[Address(RVA = "0x4826B4", Offset = "0x4826B4", VA = "0x4826B4")]
		public RESULT set3DRolloffCallback(CB_3D_ROLLOFFCALLBACK callback)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C5D")]
		[Address(RVA = "0x4826BC", Offset = "0x4826BC", VA = "0x4826BC")]
		public RESULT mixerSuspend()
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C5E")]
		[Address(RVA = "0x4826C4", Offset = "0x4826C4", VA = "0x4826C4")]
		public RESULT mixerResume()
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C5F")]
		[Address(RVA = "0x4826CC", Offset = "0x4826CC", VA = "0x4826CC")]
		public RESULT getDefaultMixMatrix(SPEAKERMODE sourcespeakermode, SPEAKERMODE targetspeakermode, float[] matrix, int matrixhop)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C60")]
		[Address(RVA = "0x4826F0", Offset = "0x4826F0", VA = "0x4826F0")]
		public RESULT getSpeakerModeChannels(SPEAKERMODE mode, out int channels)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C61")]
		[Address(RVA = "0x4826F8", Offset = "0x4826F8", VA = "0x4826F8")]
		public RESULT getVersion(out uint version)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C62")]
		[Address(RVA = "0x482700", Offset = "0x482700", VA = "0x482700")]
		public RESULT getOutputHandle(out IntPtr handle)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C63")]
		[Address(RVA = "0x482708", Offset = "0x482708", VA = "0x482708")]
		public RESULT getChannelsPlaying(out int channels, out int realchannels)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C64")]
		[Address(RVA = "0x482710", Offset = "0x482710", VA = "0x482710")]
		public RESULT getCPUUsage(out float dsp, out float stream, out float geometry, out float update, out float total)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C65")]
		[Address(RVA = "0x482738", Offset = "0x482738", VA = "0x482738")]
		public RESULT getFileUsage(out long sampleBytesRead, out long streamBytesRead, out long otherBytesRead)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C66")]
		[Address(RVA = "0x482754", Offset = "0x482754", VA = "0x482754")]
		public RESULT getSoundRAM(out int currentalloced, out int maxalloced, out int total)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C67")]
		[Address(RVA = "0x482770", Offset = "0x482770", VA = "0x482770")]
		public RESULT createSound(string name, MODE mode, ref CREATESOUNDEXINFO exinfo, out Sound sound)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C68")]
		[Address(RVA = "0x482794", Offset = "0x482794", VA = "0x482794")]
		public RESULT createSound(byte[] data, MODE mode, ref CREATESOUNDEXINFO exinfo, out Sound sound)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C69")]
		[Address(RVA = "0x4827B8", Offset = "0x4827B8", VA = "0x4827B8")]
		public RESULT createSound(IntPtr name_or_data, MODE mode, ref CREATESOUNDEXINFO exinfo, out Sound sound)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C6A")]
		[Address(RVA = "0x4827DC", Offset = "0x4827DC", VA = "0x4827DC")]
		public RESULT createSound(string name, MODE mode, out Sound sound)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C6B")]
		[Address(RVA = "0x4827F8", Offset = "0x4827F8", VA = "0x4827F8")]
		public RESULT createStream(string name, MODE mode, ref CREATESOUNDEXINFO exinfo, out Sound sound)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C6C")]
		[Address(RVA = "0x48281C", Offset = "0x48281C", VA = "0x48281C")]
		public RESULT createStream(byte[] data, MODE mode, ref CREATESOUNDEXINFO exinfo, out Sound sound)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C6D")]
		[Address(RVA = "0x482840", Offset = "0x482840", VA = "0x482840")]
		public RESULT createStream(IntPtr name_or_data, MODE mode, ref CREATESOUNDEXINFO exinfo, out Sound sound)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C6E")]
		[Address(RVA = "0x482864", Offset = "0x482864", VA = "0x482864")]
		public RESULT createStream(string name, MODE mode, out Sound sound)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C6F")]
		[Address(RVA = "0x482880", Offset = "0x482880", VA = "0x482880")]
		public RESULT createDSP(ref DSP_DESCRIPTION description, out DSP dsp)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C70")]
		[Address(RVA = "0x482888", Offset = "0x482888", VA = "0x482888")]
		public RESULT createDSPByType(DSP_TYPE type, out DSP dsp)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C71")]
		[Address(RVA = "0x482890", Offset = "0x482890", VA = "0x482890")]
		public RESULT createChannelGroup(string name, out ChannelGroup channelgroup)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C72")]
		[Address(RVA = "0x482898", Offset = "0x482898", VA = "0x482898")]
		public RESULT createSoundGroup(string name, out SoundGroup soundgroup)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C73")]
		[Address(RVA = "0x4828A0", Offset = "0x4828A0", VA = "0x4828A0")]
		public RESULT createReverb3D(out Reverb3D reverb)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C74")]
		[Address(RVA = "0x4828A8", Offset = "0x4828A8", VA = "0x4828A8")]
		public RESULT playSound(Sound sound, ChannelGroup channelGroup, bool paused, out Channel channel)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C75")]
		[Address(RVA = "0x4828CC", Offset = "0x4828CC", VA = "0x4828CC")]
		public RESULT playDSP(DSP dsp, ChannelGroup channelGroup, bool paused, out Channel channel)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C76")]
		[Address(RVA = "0x4828F0", Offset = "0x4828F0", VA = "0x4828F0")]
		public RESULT getChannel(int channelid, out Channel channel)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C77")]
		[Address(RVA = "0x4828F8", Offset = "0x4828F8", VA = "0x4828F8")]
		public RESULT getMasterChannelGroup(out ChannelGroup channelgroup)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C78")]
		[Address(RVA = "0x482900", Offset = "0x482900", VA = "0x482900")]
		public RESULT getMasterSoundGroup(out SoundGroup soundgroup)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C79")]
		[Address(RVA = "0x482908", Offset = "0x482908", VA = "0x482908")]
		public RESULT attachChannelGroupToPort(uint portType, ulong portIndex, ChannelGroup channelgroup, bool passThru = false)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C7A")]
		[Address(RVA = "0x482930", Offset = "0x482930", VA = "0x482930")]
		public RESULT detachChannelGroupFromPort(ChannelGroup channelgroup)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C7B")]
		[Address(RVA = "0x482938", Offset = "0x482938", VA = "0x482938")]
		public RESULT setReverbProperties(int instance, ref REVERB_PROPERTIES prop)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C7C")]
		[Address(RVA = "0x482940", Offset = "0x482940", VA = "0x482940")]
		public RESULT getReverbProperties(int instance, out REVERB_PROPERTIES prop)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C7D")]
		[Address(RVA = "0x482948", Offset = "0x482948", VA = "0x482948")]
		public RESULT lockDSP()
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C7E")]
		[Address(RVA = "0x482950", Offset = "0x482950", VA = "0x482950")]
		public RESULT unlockDSP()
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C7F")]
		[Address(RVA = "0x482958", Offset = "0x482958", VA = "0x482958")]
		public RESULT getRecordNumDrivers(out int numdrivers, out int numconnected)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C80")]
		[Address(RVA = "0x482960", Offset = "0x482960", VA = "0x482960")]
		public RESULT getRecordDriverInfo(int id, out string name, int namelen, out Guid guid, out int systemrate, out SPEAKERMODE speakermode, out int speakermodechannels, out DRIVER_STATE state)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C81")]
		[Address(RVA = "0x4829A0", Offset = "0x4829A0", VA = "0x4829A0")]
		public RESULT getRecordDriverInfo(int id, out Guid guid, out int systemrate, out SPEAKERMODE speakermode, out int speakermodechannels, out DRIVER_STATE state)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C82")]
		[Address(RVA = "0x4829D0", Offset = "0x4829D0", VA = "0x4829D0")]
		public RESULT getRecordPosition(int id, out uint position)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C83")]
		[Address(RVA = "0x4829D8", Offset = "0x4829D8", VA = "0x4829D8")]
		public RESULT recordStart(int id, Sound sound, bool loop)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C84")]
		[Address(RVA = "0x4829F4", Offset = "0x4829F4", VA = "0x4829F4")]
		public RESULT recordStop(int id)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C85")]
		[Address(RVA = "0x4829FC", Offset = "0x4829FC", VA = "0x4829FC")]
		public RESULT isRecording(int id, out bool recording)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C86")]
		[Address(RVA = "0x482A04", Offset = "0x482A04", VA = "0x482A04")]
		public RESULT createGeometry(int maxpolygons, int maxvertices, out Geometry geometry)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C87")]
		[Address(RVA = "0x482A20", Offset = "0x482A20", VA = "0x482A20")]
		public RESULT setGeometrySettings(float maxworldsize)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C88")]
		[Address(RVA = "0x482A28", Offset = "0x482A28", VA = "0x482A28")]
		public RESULT getGeometrySettings(out float maxworldsize)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C89")]
		[Address(RVA = "0x482A30", Offset = "0x482A30", VA = "0x482A30")]
		public RESULT loadGeometry(IntPtr data, int datasize, out Geometry geometry)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C8A")]
		[Address(RVA = "0x482A4C", Offset = "0x482A4C", VA = "0x482A4C")]
		public RESULT getGeometryOcclusion(ref VECTOR listener, ref VECTOR source, out float direct, out float reverb)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C8B")]
		[Address(RVA = "0x482A70", Offset = "0x482A70", VA = "0x482A70")]
		public RESULT setNetworkProxy(string proxy)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C8C")]
		[Address(RVA = "0x482A78", Offset = "0x482A78", VA = "0x482A78")]
		public RESULT getNetworkProxy(out string proxy, int proxylen)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C8D")]
		[Address(RVA = "0x482A80", Offset = "0x482A80", VA = "0x482A80")]
		public RESULT setNetworkTimeout(int timeout)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C8E")]
		[Address(RVA = "0x482A88", Offset = "0x482A88", VA = "0x482A88")]
		public RESULT getNetworkTimeout(out int timeout)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C8F")]
		[Address(RVA = "0x482A90", Offset = "0x482A90", VA = "0x482A90")]
		public RESULT setUserData(IntPtr userdata)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000C90")]
		[Address(RVA = "0x482A98", Offset = "0x482A98", VA = "0x482A98")]
		public RESULT getUserData(out IntPtr userdata)
		{
			return default(RESULT);
		}

		[PreserveSig]
		[Token(Token = "0x6000C91")]
		[Address(RVA = "0x168B8E0", Offset = "0x168B8E0", VA = "0x168B8E0")]
		private static extern RESULT FMOD5_System_Release(IntPtr system);

		[PreserveSig]
		[Token(Token = "0x6000C92")]
		[Address(RVA = "0x168B988", Offset = "0x168B988", VA = "0x168B988")]
		private static extern RESULT FMOD5_System_SetOutput(IntPtr system, OUTPUTTYPE output);

		[PreserveSig]
		[Token(Token = "0x6000C93")]
		[Address(RVA = "0x168BA38", Offset = "0x168BA38", VA = "0x168BA38")]
		private static extern RESULT FMOD5_System_GetOutput(IntPtr system, out OUTPUTTYPE output);

		[PreserveSig]
		[Token(Token = "0x6000C94")]
		[Address(RVA = "0x168BAE8", Offset = "0x168BAE8", VA = "0x168BAE8")]
		private static extern RESULT FMOD5_System_GetNumDrivers(IntPtr system, out int numdrivers);

		[PreserveSig]
		[Token(Token = "0x6000C95")]
		[Address(RVA = "0x168BDC0", Offset = "0x168BDC0", VA = "0x168BDC0")]
		private static extern RESULT FMOD5_System_GetDriverInfo(IntPtr system, int id, IntPtr name, int namelen, out Guid guid, out int systemrate, out SPEAKERMODE speakermode, out int speakermodechannels);

		[PreserveSig]
		[Token(Token = "0x6000C96")]
		[Address(RVA = "0x168BF30", Offset = "0x168BF30", VA = "0x168BF30")]
		private static extern RESULT FMOD5_System_SetDriver(IntPtr system, int driver);

		[PreserveSig]
		[Token(Token = "0x6000C97")]
		[Address(RVA = "0x168BFE0", Offset = "0x168BFE0", VA = "0x168BFE0")]
		private static extern RESULT FMOD5_System_GetDriver(IntPtr system, out int driver);

		[PreserveSig]
		[Token(Token = "0x6000C98")]
		[Address(RVA = "0x168C090", Offset = "0x168C090", VA = "0x168C090")]
		private static extern RESULT FMOD5_System_SetSoftwareChannels(IntPtr system, int numsoftwarechannels);

		[PreserveSig]
		[Token(Token = "0x6000C99")]
		[Address(RVA = "0x168C140", Offset = "0x168C140", VA = "0x168C140")]
		private static extern RESULT FMOD5_System_GetSoftwareChannels(IntPtr system, out int numsoftwarechannels);

		[PreserveSig]
		[Token(Token = "0x6000C9A")]
		[Address(RVA = "0x168C208", Offset = "0x168C208", VA = "0x168C208")]
		private static extern RESULT FMOD5_System_SetSoftwareFormat(IntPtr system, int samplerate, SPEAKERMODE speakermode, int numrawspeakers);

		[PreserveSig]
		[Token(Token = "0x6000C9B")]
		[Address(RVA = "0x168C2E0", Offset = "0x168C2E0", VA = "0x168C2E0")]
		private static extern RESULT FMOD5_System_GetSoftwareFormat(IntPtr system, out int samplerate, out SPEAKERMODE speakermode, out int numrawspeakers);

		[PreserveSig]
		[Token(Token = "0x6000C9C")]
		[Address(RVA = "0x168C3A0", Offset = "0x168C3A0", VA = "0x168C3A0")]
		private static extern RESULT FMOD5_System_SetDSPBufferSize(IntPtr system, uint bufferlength, int numbuffers);

		[PreserveSig]
		[Token(Token = "0x6000C9D")]
		[Address(RVA = "0x168C458", Offset = "0x168C458", VA = "0x168C458")]
		private static extern RESULT FMOD5_System_GetDSPBufferSize(IntPtr system, out uint bufferlength, out int numbuffers);

		[PreserveSig]
		[Token(Token = "0x6000C9E")]
		[Address(RVA = "0x168C548", Offset = "0x168C548", VA = "0x168C548")]
		private static extern RESULT FMOD5_System_SetFileSystem(IntPtr system, FILE_OPENCALLBACK useropen, FILE_CLOSECALLBACK userclose, FILE_READCALLBACK userread, FILE_SEEKCALLBACK userseek, FILE_ASYNCREADCALLBACK userasyncread, FILE_ASYNCCANCELCALLBACK userasynccancel, int blockalign);

		[PreserveSig]
		[Token(Token = "0x6000C9F")]
		[Address(RVA = "0x168C688", Offset = "0x168C688", VA = "0x168C688")]
		private static extern RESULT FMOD5_System_AttachFileSystem(IntPtr system, FILE_OPENCALLBACK useropen, FILE_CLOSECALLBACK userclose, FILE_READCALLBACK userread, FILE_SEEKCALLBACK userseek);

		[PreserveSig]
		[Token(Token = "0x6000CA0")]
		[Address(RVA = "0x168C858", Offset = "0x168C858", VA = "0x168C858")]
		private static extern RESULT FMOD5_System_SetAdvancedSettings(IntPtr system, ref ADVANCEDSETTINGS settings);

		[PreserveSig]
		[Token(Token = "0x6000CA1")]
		[Address(RVA = "0x168C9E0", Offset = "0x168C9E0", VA = "0x168C9E0")]
		private static extern RESULT FMOD5_System_GetAdvancedSettings(IntPtr system, ref ADVANCEDSETTINGS settings);

		[PreserveSig]
		[Token(Token = "0x6000CA2")]
		[Address(RVA = "0x168CA90", Offset = "0x168CA90", VA = "0x168CA90")]
		private static extern RESULT FMOD5_System_SetCallback(IntPtr system, SYSTEM_CALLBACK callback, SYSTEM_CALLBACK_TYPE callbackmask);

		[PreserveSig]
		[Token(Token = "0x6000CA3")]
		[Address(RVA = "0x168CCD8", Offset = "0x168CCD8", VA = "0x168CCD8")]
		private static extern RESULT FMOD5_System_SetPluginPath(IntPtr system, byte[] path);

		[PreserveSig]
		[Token(Token = "0x6000CA4")]
		[Address(RVA = "0x168CF20", Offset = "0x168CF20", VA = "0x168CF20")]
		private static extern RESULT FMOD5_System_LoadPlugin(IntPtr system, byte[] filename, out uint handle, uint priority);

		[PreserveSig]
		[Token(Token = "0x6000CA5")]
		[Address(RVA = "0x168D008", Offset = "0x168D008", VA = "0x168D008")]
		private static extern RESULT FMOD5_System_UnloadPlugin(IntPtr system, uint handle);

		[PreserveSig]
		[Token(Token = "0x6000CA6")]
		[Address(RVA = "0x168D0B8", Offset = "0x168D0B8", VA = "0x168D0B8")]
		private static extern RESULT FMOD5_System_GetNumNestedPlugins(IntPtr system, uint handle, out int count);

		[PreserveSig]
		[Token(Token = "0x6000CA7")]
		[Address(RVA = "0x168D188", Offset = "0x168D188", VA = "0x168D188")]
		private static extern RESULT FMOD5_System_GetNestedPlugin(IntPtr system, uint handle, int index, out uint nestedhandle);

		[PreserveSig]
		[Token(Token = "0x6000CA8")]
		[Address(RVA = "0x168D248", Offset = "0x168D248", VA = "0x168D248")]
		private static extern RESULT FMOD5_System_GetNumPlugins(IntPtr system, PLUGINTYPE plugintype, out int numplugins);

		[PreserveSig]
		[Token(Token = "0x6000CA9")]
		[Address(RVA = "0x168D318", Offset = "0x168D318", VA = "0x168D318")]
		private static extern RESULT FMOD5_System_GetPluginHandle(IntPtr system, PLUGINTYPE plugintype, int index, out uint handle);

		[PreserveSig]
		[Token(Token = "0x6000CAA")]
		[Address(RVA = "0x168D5E8", Offset = "0x168D5E8", VA = "0x168D5E8")]
		private static extern RESULT FMOD5_System_GetPluginInfo(IntPtr system, uint handle, out PLUGINTYPE plugintype, IntPtr name, int namelen, out uint version);

		[PreserveSig]
		[Token(Token = "0x6000CAB")]
		[Address(RVA = "0x168D730", Offset = "0x168D730", VA = "0x168D730")]
		private static extern RESULT FMOD5_System_SetOutputByPlugin(IntPtr system, uint handle);

		[PreserveSig]
		[Token(Token = "0x6000CAC")]
		[Address(RVA = "0x168D7E0", Offset = "0x168D7E0", VA = "0x168D7E0")]
		private static extern RESULT FMOD5_System_GetOutputByPlugin(IntPtr system, out uint handle);

		[PreserveSig]
		[Token(Token = "0x6000CAD")]
		[Address(RVA = "0x168D890", Offset = "0x168D890", VA = "0x168D890")]
		private static extern RESULT FMOD5_System_CreateDSPByPlugin(IntPtr system, uint handle, out IntPtr dsp);

		[PreserveSig]
		[Token(Token = "0x6000CAE")]
		[Address(RVA = "0x168D948", Offset = "0x168D948", VA = "0x168D948")]
		private static extern RESULT FMOD5_System_GetDSPInfoByPlugin(IntPtr system, uint handle, out IntPtr description);

		[PreserveSig]
		[Token(Token = "0x6000CAF")]
		[Address(RVA = "0x168DA00", Offset = "0x168DA00", VA = "0x168DA00")]
		private static extern RESULT FMOD5_System_RegisterDSP(IntPtr system, ref DSP_DESCRIPTION description, out uint handle);

		[PreserveSig]
		[Token(Token = "0x6000CB0")]
		[Address(RVA = "0x168DB30", Offset = "0x168DB30", VA = "0x168DB30")]
		private static extern RESULT FMOD5_System_Init(IntPtr system, int maxchannels, INITFLAGS flags, IntPtr extradriverdata);

		[PreserveSig]
		[Token(Token = "0x6000CB1")]
		[Address(RVA = "0x168DBF0", Offset = "0x168DBF0", VA = "0x168DBF0")]
		private static extern RESULT FMOD5_System_Close(IntPtr system);

		[PreserveSig]
		[Token(Token = "0x6000CB2")]
		[Address(RVA = "0x168DC98", Offset = "0x168DC98", VA = "0x168DC98")]
		private static extern RESULT FMOD5_System_Update(IntPtr system);

		[PreserveSig]
		[Token(Token = "0x6000CB3")]
		[Address(RVA = "0x168DD60", Offset = "0x168DD60", VA = "0x168DD60")]
		private static extern RESULT FMOD5_System_SetSpeakerPosition(IntPtr system, SPEAKER speaker, float x, float y, bool active);

		[PreserveSig]
		[Token(Token = "0x6000CB4")]
		[Address(RVA = "0x168DE48", Offset = "0x168DE48", VA = "0x168DE48")]
		private static extern RESULT FMOD5_System_GetSpeakerPosition(IntPtr system, SPEAKER speaker, out float x, out float y, out bool active);

		[PreserveSig]
		[Token(Token = "0x6000CB5")]
		[Address(RVA = "0x168DF30", Offset = "0x168DF30", VA = "0x168DF30")]
		private static extern RESULT FMOD5_System_SetStreamBufferSize(IntPtr system, uint filebuffersize, TIMEUNIT filebuffersizetype);

		[PreserveSig]
		[Token(Token = "0x6000CB6")]
		[Address(RVA = "0x168DFE8", Offset = "0x168DFE8", VA = "0x168DFE8")]
		private static extern RESULT FMOD5_System_GetStreamBufferSize(IntPtr system, out uint filebuffersize, out TIMEUNIT filebuffersizetype);

		[PreserveSig]
		[Token(Token = "0x6000CB7")]
		[Address(RVA = "0x168E0B8", Offset = "0x168E0B8", VA = "0x168E0B8")]
		private static extern RESULT FMOD5_System_Set3DSettings(IntPtr system, float dopplerscale, float distancefactor, float rolloffscale);

		[PreserveSig]
		[Token(Token = "0x6000CB8")]
		[Address(RVA = "0x168E190", Offset = "0x168E190", VA = "0x168E190")]
		private static extern RESULT FMOD5_System_Get3DSettings(IntPtr system, out float dopplerscale, out float distancefactor, out float rolloffscale);

		[PreserveSig]
		[Token(Token = "0x6000CB9")]
		[Address(RVA = "0x168E250", Offset = "0x168E250", VA = "0x168E250")]
		private static extern RESULT FMOD5_System_Set3DNumListeners(IntPtr system, int numlisteners);

		[PreserveSig]
		[Token(Token = "0x6000CBA")]
		[Address(RVA = "0x168E300", Offset = "0x168E300", VA = "0x168E300")]
		private static extern RESULT FMOD5_System_Get3DNumListeners(IntPtr system, out int numlisteners);

		[PreserveSig]
		[Token(Token = "0x6000CBB")]
		[Address(RVA = "0x168E3D0", Offset = "0x168E3D0", VA = "0x168E3D0")]
		private static extern RESULT FMOD5_System_Set3DListenerAttributes(IntPtr system, int listener, ref VECTOR pos, ref VECTOR vel, ref VECTOR forward, ref VECTOR up);

		[PreserveSig]
		[Token(Token = "0x6000CBC")]
		[Address(RVA = "0x168E4C0", Offset = "0x168E4C0", VA = "0x168E4C0")]
		private static extern RESULT FMOD5_System_Get3DListenerAttributes(IntPtr system, int listener, out VECTOR pos, out VECTOR vel, out VECTOR forward, out VECTOR up);

		[PreserveSig]
		[Token(Token = "0x6000CBD")]
		[Address(RVA = "0x168E590", Offset = "0x168E590", VA = "0x168E590")]
		private static extern RESULT FMOD5_System_Set3DRolloffCallback(IntPtr system, CB_3D_ROLLOFFCALLBACK callback);

		[PreserveSig]
		[Token(Token = "0x6000CBE")]
		[Address(RVA = "0x168E658", Offset = "0x168E658", VA = "0x168E658")]
		private static extern RESULT FMOD5_System_MixerSuspend(IntPtr system);

		[PreserveSig]
		[Token(Token = "0x6000CBF")]
		[Address(RVA = "0x168E700", Offset = "0x168E700", VA = "0x168E700")]
		private static extern RESULT FMOD5_System_MixerResume(IntPtr system);

		[PreserveSig]
		[Token(Token = "0x6000CC0")]
		[Address(RVA = "0x168E7C8", Offset = "0x168E7C8", VA = "0x168E7C8")]
		private static extern RESULT FMOD5_System_GetDefaultMixMatrix(IntPtr system, SPEAKERMODE sourcespeakermode, SPEAKERMODE targetspeakermode, float[] matrix, int matrixhop);

		[PreserveSig]
		[Token(Token = "0x6000CC1")]
		[Address(RVA = "0x168E898", Offset = "0x168E898", VA = "0x168E898")]
		private static extern RESULT FMOD5_System_GetSpeakerModeChannels(IntPtr system, SPEAKERMODE mode, out int channels);

		[PreserveSig]
		[Token(Token = "0x6000CC2")]
		[Address(RVA = "0x168E950", Offset = "0x168E950", VA = "0x168E950")]
		private static extern RESULT FMOD5_System_GetVersion(IntPtr system, out uint version);

		[PreserveSig]
		[Token(Token = "0x6000CC3")]
		[Address(RVA = "0x168EA00", Offset = "0x168EA00", VA = "0x168EA00")]
		private static extern RESULT FMOD5_System_GetOutputHandle(IntPtr system, out IntPtr handle);

		[PreserveSig]
		[Token(Token = "0x6000CC4")]
		[Address(RVA = "0x168EAB0", Offset = "0x168EAB0", VA = "0x168EAB0")]
		private static extern RESULT FMOD5_System_GetChannelsPlaying(IntPtr system, out int channels, out int realchannels);

		[PreserveSig]
		[Token(Token = "0x6000CC5")]
		[Address(RVA = "0x168EB88", Offset = "0x168EB88", VA = "0x168EB88")]
		private static extern RESULT FMOD5_System_GetCPUUsage(IntPtr system, out float dsp, out float stream, out float geometry, out float update, out float total);

		[PreserveSig]
		[Token(Token = "0x6000CC6")]
		[Address(RVA = "0x168EC70", Offset = "0x168EC70", VA = "0x168EC70")]
		private static extern RESULT FMOD5_System_GetFileUsage(IntPtr system, out long sampleBytesRead, out long streamBytesRead, out long otherBytesRead);

		[PreserveSig]
		[Token(Token = "0x6000CC7")]
		[Address(RVA = "0x168ED48", Offset = "0x168ED48", VA = "0x168ED48")]
		private static extern RESULT FMOD5_System_GetSoundRAM(IntPtr system, out int currentalloced, out int maxalloced, out int total);

		[PreserveSig]
		[Token(Token = "0x6000CC8")]
		[Address(RVA = "0x168EFA0", Offset = "0x168EFA0", VA = "0x168EFA0")]
		private static extern RESULT FMOD5_System_CreateSound(IntPtr system, byte[] name_or_data, MODE mode, ref CREATESOUNDEXINFO exinfo, out IntPtr sound);

		[PreserveSig]
		[Token(Token = "0x6000CC9")]
		[Address(RVA = "0x168F118", Offset = "0x168F118", VA = "0x168F118")]
		private static extern RESULT FMOD5_System_CreateSound(IntPtr system, IntPtr name_or_data, MODE mode, ref CREATESOUNDEXINFO exinfo, out IntPtr sound);

		[PreserveSig]
		[Token(Token = "0x6000CCA")]
		[Address(RVA = "0x168F4D0", Offset = "0x168F4D0", VA = "0x168F4D0")]
		private static extern RESULT FMOD5_System_CreateStream(IntPtr system, byte[] name_or_data, MODE mode, ref CREATESOUNDEXINFO exinfo, out IntPtr sound);

		[PreserveSig]
		[Token(Token = "0x6000CCB")]
		[Address(RVA = "0x168F648", Offset = "0x168F648", VA = "0x168F648")]
		private static extern RESULT FMOD5_System_CreateStream(IntPtr system, IntPtr name_or_data, MODE mode, ref CREATESOUNDEXINFO exinfo, out IntPtr sound);

		[PreserveSig]
		[Token(Token = "0x6000CCC")]
		[Address(RVA = "0x168F870", Offset = "0x168F870", VA = "0x168F870")]
		private static extern RESULT FMOD5_System_CreateDSP(IntPtr system, ref DSP_DESCRIPTION description, out IntPtr dsp);

		[PreserveSig]
		[Token(Token = "0x6000CCD")]
		[Address(RVA = "0x168F990", Offset = "0x168F990", VA = "0x168F990")]
		private static extern RESULT FMOD5_System_CreateDSPByType(IntPtr system, DSP_TYPE type, out IntPtr dsp);

		[PreserveSig]
		[Token(Token = "0x6000CCE")]
		[Address(RVA = "0x168FBD0", Offset = "0x168FBD0", VA = "0x168FBD0")]
		private static extern RESULT FMOD5_System_CreateChannelGroup(IntPtr system, byte[] name, out IntPtr channelgroup);

		[PreserveSig]
		[Token(Token = "0x6000CCF")]
		[Address(RVA = "0x168FE18", Offset = "0x168FE18", VA = "0x168FE18")]
		private static extern RESULT FMOD5_System_CreateSoundGroup(IntPtr system, byte[] name, out IntPtr soundgroup);

		[PreserveSig]
		[Token(Token = "0x6000CD0")]
		[Address(RVA = "0x168FED8", Offset = "0x168FED8", VA = "0x168FED8")]
		private static extern RESULT FMOD5_System_CreateReverb3D(IntPtr system, out IntPtr reverb);

		[PreserveSig]
		[Token(Token = "0x6000CD1")]
		[Address(RVA = "0x168FFA8", Offset = "0x168FFA8", VA = "0x168FFA8")]
		private static extern RESULT FMOD5_System_PlaySound(IntPtr system, IntPtr sound, IntPtr channelGroup, bool paused, out IntPtr channel);

		[PreserveSig]
		[Token(Token = "0x6000CD2")]
		[Address(RVA = "0x1690090", Offset = "0x1690090", VA = "0x1690090")]
		private static extern RESULT FMOD5_System_PlayDSP(IntPtr system, IntPtr dsp, IntPtr channelGroup, bool paused, out IntPtr channel);

		[PreserveSig]
		[Token(Token = "0x6000CD3")]
		[Address(RVA = "0x1690158", Offset = "0x1690158", VA = "0x1690158")]
		private static extern RESULT FMOD5_System_GetChannel(IntPtr system, int channelid, out IntPtr channel);

		[PreserveSig]
		[Token(Token = "0x6000CD4")]
		[Address(RVA = "0x1690210", Offset = "0x1690210", VA = "0x1690210")]
		private static extern RESULT FMOD5_System_GetMasterChannelGroup(IntPtr system, out IntPtr channelgroup);

		[PreserveSig]
		[Token(Token = "0x6000CD5")]
		[Address(RVA = "0x16902C0", Offset = "0x16902C0", VA = "0x16902C0")]
		private static extern RESULT FMOD5_System_GetMasterSoundGroup(IntPtr system, out IntPtr soundgroup);

		[PreserveSig]
		[Token(Token = "0x6000CD6")]
		[Address(RVA = "0x1690390", Offset = "0x1690390", VA = "0x1690390")]
		private static extern RESULT FMOD5_System_AttachChannelGroupToPort(IntPtr system, uint portType, ulong portIndex, IntPtr channelgroup, bool passThru);

		[PreserveSig]
		[Token(Token = "0x6000CD7")]
		[Address(RVA = "0x1690460", Offset = "0x1690460", VA = "0x1690460")]
		private static extern RESULT FMOD5_System_DetachChannelGroupFromPort(IntPtr system, IntPtr channelgroup);

		[PreserveSig]
		[Token(Token = "0x6000CD8")]
		[Address(RVA = "0x1690510", Offset = "0x1690510", VA = "0x1690510")]
		private static extern RESULT FMOD5_System_SetReverbProperties(IntPtr system, int instance, ref REVERB_PROPERTIES prop);

		[PreserveSig]
		[Token(Token = "0x6000CD9")]
		[Address(RVA = "0x16905C8", Offset = "0x16905C8", VA = "0x16905C8")]
		private static extern RESULT FMOD5_System_GetReverbProperties(IntPtr system, int instance, out REVERB_PROPERTIES prop);

		[PreserveSig]
		[Token(Token = "0x6000CDA")]
		[Address(RVA = "0x1690680", Offset = "0x1690680", VA = "0x1690680")]
		private static extern RESULT FMOD5_System_LockDSP(IntPtr system);

		[PreserveSig]
		[Token(Token = "0x6000CDB")]
		[Address(RVA = "0x1690728", Offset = "0x1690728", VA = "0x1690728")]
		private static extern RESULT FMOD5_System_UnlockDSP(IntPtr system);

		[PreserveSig]
		[Token(Token = "0x6000CDC")]
		[Address(RVA = "0x16907D0", Offset = "0x16907D0", VA = "0x16907D0")]
		private static extern RESULT FMOD5_System_GetRecordNumDrivers(IntPtr system, out int numdrivers, out int numconnected);

		[PreserveSig]
		[Token(Token = "0x6000CDD")]
		[Address(RVA = "0x1690AB0", Offset = "0x1690AB0", VA = "0x1690AB0")]
		private static extern RESULT FMOD5_System_GetRecordDriverInfo(IntPtr system, int id, IntPtr name, int namelen, out Guid guid, out int systemrate, out SPEAKERMODE speakermode, out int speakermodechannels, out DRIVER_STATE state);

		[PreserveSig]
		[Token(Token = "0x6000CDE")]
		[Address(RVA = "0x1690C38", Offset = "0x1690C38", VA = "0x1690C38")]
		private static extern RESULT FMOD5_System_GetRecordPosition(IntPtr system, int id, out uint position);

		[PreserveSig]
		[Token(Token = "0x6000CDF")]
		[Address(RVA = "0x1690D08", Offset = "0x1690D08", VA = "0x1690D08")]
		private static extern RESULT FMOD5_System_RecordStart(IntPtr system, int id, IntPtr sound, bool loop);

		[PreserveSig]
		[Token(Token = "0x6000CE0")]
		[Address(RVA = "0x1690DC8", Offset = "0x1690DC8", VA = "0x1690DC8")]
		private static extern RESULT FMOD5_System_RecordStop(IntPtr system, int id);

		[PreserveSig]
		[Token(Token = "0x6000CE1")]
		[Address(RVA = "0x1690E78", Offset = "0x1690E78", VA = "0x1690E78")]
		private static extern RESULT FMOD5_System_IsRecording(IntPtr system, int id, out bool recording);

		[PreserveSig]
		[Token(Token = "0x6000CE2")]
		[Address(RVA = "0x1690F60", Offset = "0x1690F60", VA = "0x1690F60")]
		private static extern RESULT FMOD5_System_CreateGeometry(IntPtr system, int maxpolygons, int maxvertices, out IntPtr geometry);

		[PreserveSig]
		[Token(Token = "0x6000CE3")]
		[Address(RVA = "0x1691020", Offset = "0x1691020", VA = "0x1691020")]
		private static extern RESULT FMOD5_System_SetGeometrySettings(IntPtr system, float maxworldsize);

		[PreserveSig]
		[Token(Token = "0x6000CE4")]
		[Address(RVA = "0x16910D0", Offset = "0x16910D0", VA = "0x16910D0")]
		private static extern RESULT FMOD5_System_GetGeometrySettings(IntPtr system, out float maxworldsize);

		[PreserveSig]
		[Token(Token = "0x6000CE5")]
		[Address(RVA = "0x1691198", Offset = "0x1691198", VA = "0x1691198")]
		private static extern RESULT FMOD5_System_LoadGeometry(IntPtr system, IntPtr data, int datasize, out IntPtr geometry);

		[PreserveSig]
		[Token(Token = "0x6000CE6")]
		[Address(RVA = "0x1691278", Offset = "0x1691278", VA = "0x1691278")]
		private static extern RESULT FMOD5_System_GetGeometryOcclusion(IntPtr system, ref VECTOR listener, ref VECTOR source, out float direct, out float reverb);

		[PreserveSig]
		[Token(Token = "0x6000CE7")]
		[Address(RVA = "0x16914C0", Offset = "0x16914C0", VA = "0x16914C0")]
		private static extern RESULT FMOD5_System_SetNetworkProxy(IntPtr system, byte[] proxy);

		[PreserveSig]
		[Token(Token = "0x6000CE8")]
		[Address(RVA = "0x1691770", Offset = "0x1691770", VA = "0x1691770")]
		private static extern RESULT FMOD5_System_GetNetworkProxy(IntPtr system, IntPtr proxy, int proxylen);

		[PreserveSig]
		[Token(Token = "0x6000CE9")]
		[Address(RVA = "0x1691828", Offset = "0x1691828", VA = "0x1691828")]
		private static extern RESULT FMOD5_System_SetNetworkTimeout(IntPtr system, int timeout);

		[PreserveSig]
		[Token(Token = "0x6000CEA")]
		[Address(RVA = "0x16918D8", Offset = "0x16918D8", VA = "0x16918D8")]
		private static extern RESULT FMOD5_System_GetNetworkTimeout(IntPtr system, out int timeout);

		[PreserveSig]
		[Token(Token = "0x6000CEB")]
		[Address(RVA = "0x1691988", Offset = "0x1691988", VA = "0x1691988")]
		private static extern RESULT FMOD5_System_SetUserData(IntPtr system, IntPtr userdata);

		[PreserveSig]
		[Token(Token = "0x6000CEC")]
		[Address(RVA = "0x1691A38", Offset = "0x1691A38", VA = "0x1691A38")]
		private static extern RESULT FMOD5_System_GetUserData(IntPtr system, out IntPtr userdata);

		[Token(Token = "0x6000CED")]
		[Address(RVA = "0x482AA0", Offset = "0x482AA0", VA = "0x482AA0")]
		public bool hasHandle()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CEE")]
		[Address(RVA = "0x482AA8", Offset = "0x482AA8", VA = "0x482AA8")]
		public void clearHandle()
		{
		}
	}
	[Token(Token = "0x2000222")]
	public struct Sound
	{
		[Token(Token = "0x4000C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Token(Token = "0x6000CEF")]
		[Address(RVA = "0x487DB0", Offset = "0x487DB0", VA = "0x487DB0")]
		public RESULT release()
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000CF0")]
		[Address(RVA = "0x487DB8", Offset = "0x487DB8", VA = "0x487DB8")]
		public RESULT getSystemObject(out System system)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000CF1")]
		[Address(RVA = "0x487DC0", Offset = "0x487DC0", VA = "0x487DC0")]
		public RESULT @lock(uint offset, uint length, out IntPtr ptr1, out IntPtr ptr2, out uint len1, out uint len2)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000CF2")]
		[Address(RVA = "0x487DF0", Offset = "0x487DF0", VA = "0x487DF0")]
		public RESULT unlock(IntPtr ptr1, IntPtr ptr2, uint len1, uint len2)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000CF3")]
		[Address(RVA = "0x487E14", Offset = "0x487E14", VA = "0x487E14")]
		public RESULT setDefaults(float frequency, int priority)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000CF4")]
		[Address(RVA = "0x487E1C", Offset = "0x487E1C", VA = "0x487E1C")]
		public RESULT getDefaults(out float frequency, out int priority)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000CF5")]
		[Address(RVA = "0x487E24", Offset = "0x487E24", VA = "0x487E24")]
		public RESULT set3DMinMaxDistance(float min, float max)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000CF6")]
		[Address(RVA = "0x487E2C", Offset = "0x487E2C", VA = "0x487E2C")]
		public RESULT get3DMinMaxDistance(out float min, out float max)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000CF7")]
		[Address(RVA = "0x487E34", Offset = "0x487E34", VA = "0x487E34")]
		public RESULT set3DConeSettings(float insideconeangle, float outsideconeangle, float outsidevolume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000CF8")]
		[Address(RVA = "0x487E50", Offset = "0x487E50", VA = "0x487E50")]
		public RESULT get3DConeSettings(out float insideconeangle, out float outsideconeangle, out float outsidevolume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000CF9")]
		[Address(RVA = "0x487E6C", Offset = "0x487E6C", VA = "0x487E6C")]
		public RESULT set3DCustomRolloff(ref VECTOR points, int numpoints)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000CFA")]
		[Address(RVA = "0x487E74", Offset = "0x487E74", VA = "0x487E74")]
		public RESULT get3DCustomRolloff(out IntPtr points, out int numpoints)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000CFB")]
		[Address(RVA = "0x487E7C", Offset = "0x487E7C", VA = "0x487E7C")]
		public RESULT getSubSound(int index, out Sound subsound)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000CFC")]
		[Address(RVA = "0x487E84", Offset = "0x487E84", VA = "0x487E84")]
		public RESULT getSubSoundParent(out Sound parentsound)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000CFD")]
		[Address(RVA = "0x487E8C", Offset = "0x487E8C", VA = "0x487E8C")]
		public RESULT getName(out string name, int namelen)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000CFE")]
		[Address(RVA = "0x487E94", Offset = "0x487E94", VA = "0x487E94")]
		public RESULT getLength(out uint length, TIMEUNIT lengthtype)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000CFF")]
		[Address(RVA = "0x487E9C", Offset = "0x487E9C", VA = "0x487E9C")]
		public RESULT getFormat(out SOUND_TYPE type, out SOUND_FORMAT format, out int channels, out int bits)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D00")]
		[Address(RVA = "0x487EC0", Offset = "0x487EC0", VA = "0x487EC0")]
		public RESULT getNumSubSounds(out int numsubsounds)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D01")]
		[Address(RVA = "0x487EC8", Offset = "0x487EC8", VA = "0x487EC8")]
		public RESULT getNumTags(out int numtags, out int numtagsupdated)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D02")]
		[Address(RVA = "0x487ED0", Offset = "0x487ED0", VA = "0x487ED0")]
		public RESULT getTag(string name, int index, out TAG tag)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D03")]
		[Address(RVA = "0x487EEC", Offset = "0x487EEC", VA = "0x487EEC")]
		public RESULT getOpenState(out OPENSTATE openstate, out uint percentbuffered, out bool starving, out bool diskbusy)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D04")]
		[Address(RVA = "0x487F10", Offset = "0x487F10", VA = "0x487F10")]
		public RESULT readData(IntPtr buffer, uint lenbytes, out uint read)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D05")]
		[Address(RVA = "0x487F2C", Offset = "0x487F2C", VA = "0x487F2C")]
		public RESULT seekData(uint pcm)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D06")]
		[Address(RVA = "0x487F34", Offset = "0x487F34", VA = "0x487F34")]
		public RESULT setSoundGroup(SoundGroup soundgroup)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D07")]
		[Address(RVA = "0x487F3C", Offset = "0x487F3C", VA = "0x487F3C")]
		public RESULT getSoundGroup(out SoundGroup soundgroup)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D08")]
		[Address(RVA = "0x487F44", Offset = "0x487F44", VA = "0x487F44")]
		public RESULT getNumSyncPoints(out int numsyncpoints)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D09")]
		[Address(RVA = "0x487F4C", Offset = "0x487F4C", VA = "0x487F4C")]
		public RESULT getSyncPoint(int index, out IntPtr point)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D0A")]
		[Address(RVA = "0x487F54", Offset = "0x487F54", VA = "0x487F54")]
		public RESULT getSyncPointInfo(IntPtr point, out string name, int namelen, out uint offset, TIMEUNIT offsettype)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D0B")]
		[Address(RVA = "0x487F7C", Offset = "0x487F7C", VA = "0x487F7C")]
		public RESULT getSyncPointInfo(IntPtr point, out uint offset, TIMEUNIT offsettype)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D0C")]
		[Address(RVA = "0x487F98", Offset = "0x487F98", VA = "0x487F98")]
		public RESULT addSyncPoint(uint offset, TIMEUNIT offsettype, string name, out IntPtr point)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D0D")]
		[Address(RVA = "0x487FBC", Offset = "0x487FBC", VA = "0x487FBC")]
		public RESULT deleteSyncPoint(IntPtr point)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D0E")]
		[Address(RVA = "0x487FC4", Offset = "0x487FC4", VA = "0x487FC4")]
		public RESULT setMode(MODE mode)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D0F")]
		[Address(RVA = "0x487FCC", Offset = "0x487FCC", VA = "0x487FCC")]
		public RESULT getMode(out MODE mode)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D10")]
		[Address(RVA = "0x487FD4", Offset = "0x487FD4", VA = "0x487FD4")]
		public RESULT setLoopCount(int loopcount)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D11")]
		[Address(RVA = "0x487FDC", Offset = "0x487FDC", VA = "0x487FDC")]
		public RESULT getLoopCount(out int loopcount)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D12")]
		[Address(RVA = "0x487FE4", Offset = "0x487FE4", VA = "0x487FE4")]
		public RESULT setLoopPoints(uint loopstart, TIMEUNIT loopstarttype, uint loopend, TIMEUNIT loopendtype)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D13")]
		[Address(RVA = "0x488008", Offset = "0x488008", VA = "0x488008")]
		public RESULT getLoopPoints(out uint loopstart, TIMEUNIT loopstarttype, out uint loopend, TIMEUNIT loopendtype)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D14")]
		[Address(RVA = "0x48802C", Offset = "0x48802C", VA = "0x48802C")]
		public RESULT getMusicNumChannels(out int numchannels)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D15")]
		[Address(RVA = "0x488034", Offset = "0x488034", VA = "0x488034")]
		public RESULT setMusicChannelVolume(int channel, float volume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D16")]
		[Address(RVA = "0x48803C", Offset = "0x48803C", VA = "0x48803C")]
		public RESULT getMusicChannelVolume(int channel, out float volume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D17")]
		[Address(RVA = "0x488044", Offset = "0x488044", VA = "0x488044")]
		public RESULT setMusicSpeed(float speed)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D18")]
		[Address(RVA = "0x48804C", Offset = "0x48804C", VA = "0x48804C")]
		public RESULT getMusicSpeed(out float speed)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D19")]
		[Address(RVA = "0x488054", Offset = "0x488054", VA = "0x488054")]
		public RESULT setUserData(IntPtr userdata)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D1A")]
		[Address(RVA = "0x48805C", Offset = "0x48805C", VA = "0x48805C")]
		public RESULT getUserData(out IntPtr userdata)
		{
			return default(RESULT);
		}

		[PreserveSig]
		[Token(Token = "0x6000D1B")]
		[Address(RVA = "0x176EC80", Offset = "0x176EC80", VA = "0x176EC80")]
		private static extern RESULT FMOD5_Sound_Release(IntPtr sound);

		[PreserveSig]
		[Token(Token = "0x6000D1C")]
		[Address(RVA = "0x176ED28", Offset = "0x176ED28", VA = "0x176ED28")]
		private static extern RESULT FMOD5_Sound_GetSystemObject(IntPtr sound, out IntPtr system);

		[PreserveSig]
		[Token(Token = "0x6000D1D")]
		[Address(RVA = "0x176EE00", Offset = "0x176EE00", VA = "0x176EE00")]
		private static extern RESULT FMOD5_Sound_Lock(IntPtr sound, uint offset, uint length, out IntPtr ptr1, out IntPtr ptr2, out uint len1, out uint len2);

		[PreserveSig]
		[Token(Token = "0x6000D1E")]
		[Address(RVA = "0x176EEF8", Offset = "0x176EEF8", VA = "0x176EEF8")]
		private static extern RESULT FMOD5_Sound_Unlock(IntPtr sound, IntPtr ptr1, IntPtr ptr2, uint len1, uint len2);

		[PreserveSig]
		[Token(Token = "0x6000D1F")]
		[Address(RVA = "0x176EFC0", Offset = "0x176EFC0", VA = "0x176EFC0")]
		private static extern RESULT FMOD5_Sound_SetDefaults(IntPtr sound, float frequency, int priority);

		[PreserveSig]
		[Token(Token = "0x6000D20")]
		[Address(RVA = "0x176F078", Offset = "0x176F078", VA = "0x176F078")]
		private static extern RESULT FMOD5_Sound_GetDefaults(IntPtr sound, out float frequency, out int priority);

		[PreserveSig]
		[Token(Token = "0x6000D21")]
		[Address(RVA = "0x176F130", Offset = "0x176F130", VA = "0x176F130")]
		private static extern RESULT FMOD5_Sound_Set3DMinMaxDistance(IntPtr sound, float min, float max);

		[PreserveSig]
		[Token(Token = "0x6000D22")]
		[Address(RVA = "0x176F1E8", Offset = "0x176F1E8", VA = "0x176F1E8")]
		private static extern RESULT FMOD5_Sound_Get3DMinMaxDistance(IntPtr sound, out float min, out float max);

		[PreserveSig]
		[Token(Token = "0x6000D23")]
		[Address(RVA = "0x176F2B8", Offset = "0x176F2B8", VA = "0x176F2B8")]
		private static extern RESULT FMOD5_Sound_Set3DConeSettings(IntPtr sound, float insideconeangle, float outsideconeangle, float outsidevolume);

		[PreserveSig]
		[Token(Token = "0x6000D24")]
		[Address(RVA = "0x176F390", Offset = "0x176F390", VA = "0x176F390")]
		private static extern RESULT FMOD5_Sound_Get3DConeSettings(IntPtr sound, out float insideconeangle, out float outsideconeangle, out float outsidevolume);

		[PreserveSig]
		[Token(Token = "0x6000D25")]
		[Address(RVA = "0x176F450", Offset = "0x176F450", VA = "0x176F450")]
		private static extern RESULT FMOD5_Sound_Set3DCustomRolloff(IntPtr sound, ref VECTOR points, int numpoints);

		[PreserveSig]
		[Token(Token = "0x6000D26")]
		[Address(RVA = "0x176F508", Offset = "0x176F508", VA = "0x176F508")]
		private static extern RESULT FMOD5_Sound_Get3DCustomRolloff(IntPtr sound, out IntPtr points, out int numpoints);

		[PreserveSig]
		[Token(Token = "0x6000D27")]
		[Address(RVA = "0x176F5C0", Offset = "0x176F5C0", VA = "0x176F5C0")]
		private static extern RESULT FMOD5_Sound_GetSubSound(IntPtr sound, int index, out IntPtr subsound);

		[PreserveSig]
		[Token(Token = "0x6000D28")]
		[Address(RVA = "0x176F678", Offset = "0x176F678", VA = "0x176F678")]
		private static extern RESULT FMOD5_Sound_GetSubSoundParent(IntPtr sound, out IntPtr parentsound);

		[PreserveSig]
		[Token(Token = "0x6000D29")]
		[Address(RVA = "0x176F928", Offset = "0x176F928", VA = "0x176F928")]
		private static extern RESULT FMOD5_Sound_GetName(IntPtr sound, IntPtr name, int namelen);

		[PreserveSig]
		[Token(Token = "0x6000D2A")]
		[Address(RVA = "0x176F9E0", Offset = "0x176F9E0", VA = "0x176F9E0")]
		private static extern RESULT FMOD5_Sound_GetLength(IntPtr sound, out uint length, TIMEUNIT lengthtype);

		[PreserveSig]
		[Token(Token = "0x6000D2B")]
		[Address(RVA = "0x176FAB8", Offset = "0x176FAB8", VA = "0x176FAB8")]
		private static extern RESULT FMOD5_Sound_GetFormat(IntPtr sound, out SOUND_TYPE type, out SOUND_FORMAT format, out int channels, out int bits);

		[PreserveSig]
		[Token(Token = "0x6000D2C")]
		[Address(RVA = "0x176FB80", Offset = "0x176FB80", VA = "0x176FB80")]
		private static extern RESULT FMOD5_Sound_GetNumSubSounds(IntPtr sound, out int numsubsounds);

		[PreserveSig]
		[Token(Token = "0x6000D2D")]
		[Address(RVA = "0x176FC30", Offset = "0x176FC30", VA = "0x176FC30")]
		private static extern RESULT FMOD5_Sound_GetNumTags(IntPtr sound, out int numtags, out int numtagsupdated);

		[PreserveSig]
		[Token(Token = "0x6000D2E")]
		[Address(RVA = "0x176FE80", Offset = "0x176FE80", VA = "0x176FE80")]
		private static extern RESULT FMOD5_Sound_GetTag(IntPtr sound, byte[] name, int index, out TAG tag);

		[PreserveSig]
		[Token(Token = "0x6000D2F")]
		[Address(RVA = "0x176FFD8", Offset = "0x176FFD8", VA = "0x176FFD8")]
		private static extern RESULT FMOD5_Sound_GetOpenState(IntPtr sound, out OPENSTATE openstate, out uint percentbuffered, out bool starving, out bool diskbusy);

		[PreserveSig]
		[Token(Token = "0x6000D30")]
		[Address(RVA = "0x17700E8", Offset = "0x17700E8", VA = "0x17700E8")]
		private static extern RESULT FMOD5_Sound_ReadData(IntPtr sound, IntPtr buffer, uint lenbytes, out uint read);

		[PreserveSig]
		[Token(Token = "0x6000D31")]
		[Address(RVA = "0x17701A8", Offset = "0x17701A8", VA = "0x17701A8")]
		private static extern RESULT FMOD5_Sound_SeekData(IntPtr sound, uint pcm);

		[PreserveSig]
		[Token(Token = "0x6000D32")]
		[Address(RVA = "0x1770258", Offset = "0x1770258", VA = "0x1770258")]
		private static extern RESULT FMOD5_Sound_SetSoundGroup(IntPtr sound, IntPtr soundgroup);

		[PreserveSig]
		[Token(Token = "0x6000D33")]
		[Address(RVA = "0x1770308", Offset = "0x1770308", VA = "0x1770308")]
		private static extern RESULT FMOD5_Sound_GetSoundGroup(IntPtr sound, out IntPtr soundgroup);

		[PreserveSig]
		[Token(Token = "0x6000D34")]
		[Address(RVA = "0x17703B8", Offset = "0x17703B8", VA = "0x17703B8")]
		private static extern RESULT FMOD5_Sound_GetNumSyncPoints(IntPtr sound, out int numsyncpoints);

		[PreserveSig]
		[Token(Token = "0x6000D35")]
		[Address(RVA = "0x1770468", Offset = "0x1770468", VA = "0x1770468")]
		private static extern RESULT FMOD5_Sound_GetSyncPoint(IntPtr sound, int index, out IntPtr point);

		[PreserveSig]
		[Token(Token = "0x6000D36")]
		[Address(RVA = "0x1770738", Offset = "0x1770738", VA = "0x1770738")]
		private static extern RESULT FMOD5_Sound_GetSyncPointInfo(IntPtr sound, IntPtr point, IntPtr name, int namelen, out uint offset, TIMEUNIT offsettype);

		[PreserveSig]
		[Token(Token = "0x6000D37")]
		[Address(RVA = "0x1770A18", Offset = "0x1770A18", VA = "0x1770A18")]
		private static extern RESULT FMOD5_Sound_AddSyncPoint(IntPtr sound, uint offset, TIMEUNIT offsettype, byte[] name, out IntPtr point);

		[PreserveSig]
		[Token(Token = "0x6000D38")]
		[Address(RVA = "0x1770AE8", Offset = "0x1770AE8", VA = "0x1770AE8")]
		private static extern RESULT FMOD5_Sound_DeleteSyncPoint(IntPtr sound, IntPtr point);

		[PreserveSig]
		[Token(Token = "0x6000D39")]
		[Address(RVA = "0x1770B98", Offset = "0x1770B98", VA = "0x1770B98")]
		private static extern RESULT FMOD5_Sound_SetMode(IntPtr sound, MODE mode);

		[PreserveSig]
		[Token(Token = "0x6000D3A")]
		[Address(RVA = "0x1770C48", Offset = "0x1770C48", VA = "0x1770C48")]
		private static extern RESULT FMOD5_Sound_GetMode(IntPtr sound, out MODE mode);

		[PreserveSig]
		[Token(Token = "0x6000D3B")]
		[Address(RVA = "0x1770CF8", Offset = "0x1770CF8", VA = "0x1770CF8")]
		private static extern RESULT FMOD5_Sound_SetLoopCount(IntPtr sound, int loopcount);

		[PreserveSig]
		[Token(Token = "0x6000D3C")]
		[Address(RVA = "0x1770DA8", Offset = "0x1770DA8", VA = "0x1770DA8")]
		private static extern RESULT FMOD5_Sound_GetLoopCount(IntPtr sound, out int loopcount);

		[PreserveSig]
		[Token(Token = "0x6000D3D")]
		[Address(RVA = "0x1770E78", Offset = "0x1770E78", VA = "0x1770E78")]
		private static extern RESULT FMOD5_Sound_SetLoopPoints(IntPtr sound, uint loopstart, TIMEUNIT loopstarttype, uint loopend, TIMEUNIT loopendtype);

		[PreserveSig]
		[Token(Token = "0x6000D3E")]
		[Address(RVA = "0x1770F60", Offset = "0x1770F60", VA = "0x1770F60")]
		private static extern RESULT FMOD5_Sound_GetLoopPoints(IntPtr sound, out uint loopstart, TIMEUNIT loopstarttype, out uint loopend, TIMEUNIT loopendtype);

		[PreserveSig]
		[Token(Token = "0x6000D3F")]
		[Address(RVA = "0x1771028", Offset = "0x1771028", VA = "0x1771028")]
		private static extern RESULT FMOD5_Sound_GetMusicNumChannels(IntPtr sound, out int numchannels);

		[PreserveSig]
		[Token(Token = "0x6000D40")]
		[Address(RVA = "0x17710D8", Offset = "0x17710D8", VA = "0x17710D8")]
		private static extern RESULT FMOD5_Sound_SetMusicChannelVolume(IntPtr sound, int channel, float volume);

		[PreserveSig]
		[Token(Token = "0x6000D41")]
		[Address(RVA = "0x1771190", Offset = "0x1771190", VA = "0x1771190")]
		private static extern RESULT FMOD5_Sound_GetMusicChannelVolume(IntPtr sound, int channel, out float volume);

		[PreserveSig]
		[Token(Token = "0x6000D42")]
		[Address(RVA = "0x1771248", Offset = "0x1771248", VA = "0x1771248")]
		private static extern RESULT FMOD5_Sound_SetMusicSpeed(IntPtr sound, float speed);

		[PreserveSig]
		[Token(Token = "0x6000D43")]
		[Address(RVA = "0x17712F8", Offset = "0x17712F8", VA = "0x17712F8")]
		private static extern RESULT FMOD5_Sound_GetMusicSpeed(IntPtr sound, out float speed);

		[PreserveSig]
		[Token(Token = "0x6000D44")]
		[Address(RVA = "0x17713A8", Offset = "0x17713A8", VA = "0x17713A8")]
		private static extern RESULT FMOD5_Sound_SetUserData(IntPtr sound, IntPtr userdata);

		[PreserveSig]
		[Token(Token = "0x6000D45")]
		[Address(RVA = "0x1771458", Offset = "0x1771458", VA = "0x1771458")]
		private static extern RESULT FMOD5_Sound_GetUserData(IntPtr sound, out IntPtr userdata);

		[Token(Token = "0x6000D46")]
		[Address(RVA = "0x488064", Offset = "0x488064", VA = "0x488064")]
		public bool hasHandle()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D47")]
		[Address(RVA = "0x48806C", Offset = "0x48806C", VA = "0x48806C")]
		public void clearHandle()
		{
		}
	}
	[Token(Token = "0x2000223")]
	internal interface IChannelControl
	{
		[Token(Token = "0x6000D48")]
		RESULT getSystemObject(out System system);

		[Token(Token = "0x6000D49")]
		RESULT stop();

		[Token(Token = "0x6000D4A")]
		RESULT setPaused(bool paused);

		[Token(Token = "0x6000D4B")]
		RESULT getPaused(out bool paused);

		[Token(Token = "0x6000D4C")]
		RESULT setVolume(float volume);

		[Token(Token = "0x6000D4D")]
		RESULT getVolume(out float volume);

		[Token(Token = "0x6000D4E")]
		RESULT setVolumeRamp(bool ramp);

		[Token(Token = "0x6000D4F")]
		RESULT getVolumeRamp(out bool ramp);

		[Token(Token = "0x6000D50")]
		RESULT getAudibility(out float audibility);

		[Token(Token = "0x6000D51")]
		RESULT setPitch(float pitch);

		[Token(Token = "0x6000D52")]
		RESULT getPitch(out float pitch);

		[Token(Token = "0x6000D53")]
		RESULT setMute(bool mute);

		[Token(Token = "0x6000D54")]
		RESULT getMute(out bool mute);

		[Token(Token = "0x6000D55")]
		RESULT setReverbProperties(int instance, float wet);

		[Token(Token = "0x6000D56")]
		RESULT getReverbProperties(int instance, out float wet);

		[Token(Token = "0x6000D57")]
		RESULT setLowPassGain(float gain);

		[Token(Token = "0x6000D58")]
		RESULT getLowPassGain(out float gain);

		[Token(Token = "0x6000D59")]
		RESULT setMode(MODE mode);

		[Token(Token = "0x6000D5A")]
		RESULT getMode(out MODE mode);

		[Token(Token = "0x6000D5B")]
		RESULT setCallback(CHANNEL_CALLBACK callback);

		[Token(Token = "0x6000D5C")]
		RESULT isPlaying(out bool isplaying);

		[Token(Token = "0x6000D5D")]
		RESULT setPan(float pan);

		[Token(Token = "0x6000D5E")]
		RESULT setMixLevelsOutput(float frontleft, float frontright, float center, float lfe, float surroundleft, float surroundright, float backleft, float backright);

		[Token(Token = "0x6000D5F")]
		RESULT setMixLevelsInput(float[] levels, int numlevels);

		[Token(Token = "0x6000D60")]
		RESULT setMixMatrix(float[] matrix, int outchannels, int inchannels, int inchannel_hop);

		[Token(Token = "0x6000D61")]
		RESULT getMixMatrix(float[] matrix, out int outchannels, out int inchannels, int inchannel_hop);

		[Token(Token = "0x6000D62")]
		RESULT getDSPClock(out ulong dspclock, out ulong parentclock);

		[Token(Token = "0x6000D63")]
		RESULT setDelay(ulong dspclock_start, ulong dspclock_end, bool stopchannels);

		[Token(Token = "0x6000D64")]
		RESULT getDelay(out ulong dspclock_start, out ulong dspclock_end, out bool stopchannels);

		[Token(Token = "0x6000D65")]
		RESULT addFadePoint(ulong dspclock, float volume);

		[Token(Token = "0x6000D66")]
		RESULT setFadePointRamp(ulong dspclock, float volume);

		[Token(Token = "0x6000D67")]
		RESULT removeFadePoints(ulong dspclock_start, ulong dspclock_end);

		[Token(Token = "0x6000D68")]
		RESULT getFadePoints(ref uint numpoints, ulong[] point_dspclock, float[] point_volume);

		[Token(Token = "0x6000D69")]
		RESULT getDSP(int index, out DSP dsp);

		[Token(Token = "0x6000D6A")]
		RESULT addDSP(int index, DSP dsp);

		[Token(Token = "0x6000D6B")]
		RESULT removeDSP(DSP dsp);

		[Token(Token = "0x6000D6C")]
		RESULT getNumDSPs(out int numdsps);

		[Token(Token = "0x6000D6D")]
		RESULT setDSPIndex(DSP dsp, int index);

		[Token(Token = "0x6000D6E")]
		RESULT getDSPIndex(DSP dsp, out int index);

		[Token(Token = "0x6000D6F")]
		RESULT set3DAttributes(ref VECTOR pos, ref VECTOR vel, ref VECTOR alt_pan_pos);

		[Token(Token = "0x6000D70")]
		RESULT get3DAttributes(out VECTOR pos, out VECTOR vel, out VECTOR alt_pan_pos);

		[Token(Token = "0x6000D71")]
		RESULT set3DMinMaxDistance(float mindistance, float maxdistance);

		[Token(Token = "0x6000D72")]
		RESULT get3DMinMaxDistance(out float mindistance, out float maxdistance);

		[Token(Token = "0x6000D73")]
		RESULT set3DConeSettings(float insideconeangle, float outsideconeangle, float outsidevolume);

		[Token(Token = "0x6000D74")]
		RESULT get3DConeSettings(out float insideconeangle, out float outsideconeangle, out float outsidevolume);

		[Token(Token = "0x6000D75")]
		RESULT set3DConeOrientation(ref VECTOR orientation);

		[Token(Token = "0x6000D76")]
		RESULT get3DConeOrientation(out VECTOR orientation);

		[Token(Token = "0x6000D77")]
		RESULT set3DCustomRolloff(ref VECTOR points, int numpoints);

		[Token(Token = "0x6000D78")]
		RESULT get3DCustomRolloff(out IntPtr points, out int numpoints);

		[Token(Token = "0x6000D79")]
		RESULT set3DOcclusion(float directocclusion, float reverbocclusion);

		[Token(Token = "0x6000D7A")]
		RESULT get3DOcclusion(out float directocclusion, out float reverbocclusion);

		[Token(Token = "0x6000D7B")]
		RESULT set3DSpread(float angle);

		[Token(Token = "0x6000D7C")]
		RESULT get3DSpread(out float angle);

		[Token(Token = "0x6000D7D")]
		RESULT set3DLevel(float level);

		[Token(Token = "0x6000D7E")]
		RESULT get3DLevel(out float level);

		[Token(Token = "0x6000D7F")]
		RESULT set3DDopplerLevel(float level);

		[Token(Token = "0x6000D80")]
		RESULT get3DDopplerLevel(out float level);

		[Token(Token = "0x6000D81")]
		RESULT set3DDistanceFilter(bool custom, float customLevel, float centerFreq);

		[Token(Token = "0x6000D82")]
		RESULT get3DDistanceFilter(out bool custom, out float customLevel, out float centerFreq);

		[Token(Token = "0x6000D83")]
		RESULT setUserData(IntPtr userdata);

		[Token(Token = "0x6000D84")]
		RESULT getUserData(out IntPtr userdata);
	}
	[Token(Token = "0x2000224")]
	public struct Channel : IChannelControl
	{
		[Token(Token = "0x4000C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Token(Token = "0x6000D85")]
		[Address(RVA = "0x46D53C", Offset = "0x46D53C", VA = "0x46D53C")]
		public RESULT setFrequency(float frequency)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D86")]
		[Address(RVA = "0x46D544", Offset = "0x46D544", VA = "0x46D544")]
		public RESULT getFrequency(out float frequency)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D87")]
		[Address(RVA = "0x46D54C", Offset = "0x46D54C", VA = "0x46D54C")]
		public RESULT setPriority(int priority)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D88")]
		[Address(RVA = "0x46D554", Offset = "0x46D554", VA = "0x46D554")]
		public RESULT getPriority(out int priority)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D89")]
		[Address(RVA = "0x46D55C", Offset = "0x46D55C", VA = "0x46D55C")]
		public RESULT setPosition(uint position, TIMEUNIT postype)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D8A")]
		[Address(RVA = "0x46D564", Offset = "0x46D564", VA = "0x46D564")]
		public RESULT getPosition(out uint position, TIMEUNIT postype)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D8B")]
		[Address(RVA = "0x46D56C", Offset = "0x46D56C", VA = "0x46D56C")]
		public RESULT setChannelGroup(ChannelGroup channelgroup)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D8C")]
		[Address(RVA = "0x46D574", Offset = "0x46D574", VA = "0x46D574")]
		public RESULT getChannelGroup(out ChannelGroup channelgroup)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D8D")]
		[Address(RVA = "0x46D57C", Offset = "0x46D57C", VA = "0x46D57C")]
		public RESULT setLoopCount(int loopcount)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D8E")]
		[Address(RVA = "0x46D584", Offset = "0x46D584", VA = "0x46D584")]
		public RESULT getLoopCount(out int loopcount)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D8F")]
		[Address(RVA = "0x46D58C", Offset = "0x46D58C", VA = "0x46D58C")]
		public RESULT setLoopPoints(uint loopstart, TIMEUNIT loopstarttype, uint loopend, TIMEUNIT loopendtype)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D90")]
		[Address(RVA = "0x46D5B0", Offset = "0x46D5B0", VA = "0x46D5B0")]
		public RESULT getLoopPoints(out uint loopstart, TIMEUNIT loopstarttype, out uint loopend, TIMEUNIT loopendtype)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D91")]
		[Address(RVA = "0x46D5D4", Offset = "0x46D5D4", VA = "0x46D5D4")]
		public RESULT isVirtual(out bool isvirtual)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D92")]
		[Address(RVA = "0x46D5DC", Offset = "0x46D5DC", VA = "0x46D5DC")]
		public RESULT getCurrentSound(out Sound sound)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D93")]
		[Address(RVA = "0x46D5E4", Offset = "0x46D5E4", VA = "0x46D5E4")]
		public RESULT getIndex(out int index)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D94")]
		[Address(RVA = "0x46D5EC", Offset = "0x46D5EC", VA = "0x46D5EC", Slot = "4")]
		public RESULT getSystemObject(out System system)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D95")]
		[Address(RVA = "0x46D5F4", Offset = "0x46D5F4", VA = "0x46D5F4", Slot = "5")]
		public RESULT stop()
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D96")]
		[Address(RVA = "0x46D5FC", Offset = "0x46D5FC", VA = "0x46D5FC", Slot = "6")]
		public RESULT setPaused(bool paused)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D97")]
		[Address(RVA = "0x46D604", Offset = "0x46D604", VA = "0x46D604", Slot = "7")]
		public RESULT getPaused(out bool paused)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D98")]
		[Address(RVA = "0x46D60C", Offset = "0x46D60C", VA = "0x46D60C", Slot = "8")]
		public RESULT setVolume(float volume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D99")]
		[Address(RVA = "0x46D614", Offset = "0x46D614", VA = "0x46D614", Slot = "9")]
		public RESULT getVolume(out float volume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D9A")]
		[Address(RVA = "0x46D61C", Offset = "0x46D61C", VA = "0x46D61C", Slot = "10")]
		public RESULT setVolumeRamp(bool ramp)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D9B")]
		[Address(RVA = "0x46D624", Offset = "0x46D624", VA = "0x46D624", Slot = "11")]
		public RESULT getVolumeRamp(out bool ramp)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D9C")]
		[Address(RVA = "0x46D62C", Offset = "0x46D62C", VA = "0x46D62C", Slot = "12")]
		public RESULT getAudibility(out float audibility)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D9D")]
		[Address(RVA = "0x46D634", Offset = "0x46D634", VA = "0x46D634", Slot = "13")]
		public RESULT setPitch(float pitch)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D9E")]
		[Address(RVA = "0x46D63C", Offset = "0x46D63C", VA = "0x46D63C", Slot = "14")]
		public RESULT getPitch(out float pitch)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000D9F")]
		[Address(RVA = "0x46D644", Offset = "0x46D644", VA = "0x46D644", Slot = "15")]
		public RESULT setMute(bool mute)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DA0")]
		[Address(RVA = "0x46D64C", Offset = "0x46D64C", VA = "0x46D64C", Slot = "16")]
		public RESULT getMute(out bool mute)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DA1")]
		[Address(RVA = "0x46D654", Offset = "0x46D654", VA = "0x46D654", Slot = "17")]
		public RESULT setReverbProperties(int instance, float wet)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DA2")]
		[Address(RVA = "0x46D65C", Offset = "0x46D65C", VA = "0x46D65C", Slot = "18")]
		public RESULT getReverbProperties(int instance, out float wet)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DA3")]
		[Address(RVA = "0x46D664", Offset = "0x46D664", VA = "0x46D664", Slot = "19")]
		public RESULT setLowPassGain(float gain)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DA4")]
		[Address(RVA = "0x46D66C", Offset = "0x46D66C", VA = "0x46D66C", Slot = "20")]
		public RESULT getLowPassGain(out float gain)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DA5")]
		[Address(RVA = "0x46D674", Offset = "0x46D674", VA = "0x46D674", Slot = "21")]
		public RESULT setMode(MODE mode)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DA6")]
		[Address(RVA = "0x46D67C", Offset = "0x46D67C", VA = "0x46D67C", Slot = "22")]
		public RESULT getMode(out MODE mode)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DA7")]
		[Address(RVA = "0x46D684", Offset = "0x46D684", VA = "0x46D684", Slot = "23")]
		public RESULT setCallback(CHANNEL_CALLBACK callback)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DA8")]
		[Address(RVA = "0x46D68C", Offset = "0x46D68C", VA = "0x46D68C", Slot = "24")]
		public RESULT isPlaying(out bool isplaying)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DA9")]
		[Address(RVA = "0x46D694", Offset = "0x46D694", VA = "0x46D694", Slot = "25")]
		public RESULT setPan(float pan)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DAA")]
		[Address(RVA = "0x46D69C", Offset = "0x46D69C", VA = "0x46D69C", Slot = "26")]
		public RESULT setMixLevelsOutput(float frontleft, float frontright, float center, float lfe, float surroundleft, float surroundright, float backleft, float backright)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DAB")]
		[Address(RVA = "0x46D6E0", Offset = "0x46D6E0", VA = "0x46D6E0", Slot = "27")]
		public RESULT setMixLevelsInput(float[] levels, int numlevels)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DAC")]
		[Address(RVA = "0x46D6E8", Offset = "0x46D6E8", VA = "0x46D6E8", Slot = "28")]
		public RESULT setMixMatrix(float[] matrix, int outchannels, int inchannels, int inchannel_hop)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DAD")]
		[Address(RVA = "0x46D70C", Offset = "0x46D70C", VA = "0x46D70C", Slot = "29")]
		public RESULT getMixMatrix(float[] matrix, out int outchannels, out int inchannels, int inchannel_hop)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DAE")]
		[Address(RVA = "0x46D730", Offset = "0x46D730", VA = "0x46D730", Slot = "30")]
		public RESULT getDSPClock(out ulong dspclock, out ulong parentclock)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DAF")]
		[Address(RVA = "0x46D738", Offset = "0x46D738", VA = "0x46D738", Slot = "31")]
		public RESULT setDelay(ulong dspclock_start, ulong dspclock_end, bool stopchannels)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DB0")]
		[Address(RVA = "0x46D76C", Offset = "0x46D76C", VA = "0x46D76C", Slot = "32")]
		public RESULT getDelay(out ulong dspclock_start, out ulong dspclock_end, out bool stopchannels)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DB1")]
		[Address(RVA = "0x46D788", Offset = "0x46D788", VA = "0x46D788", Slot = "33")]
		public RESULT addFadePoint(ulong dspclock, float volume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DB2")]
		[Address(RVA = "0x46D7AC", Offset = "0x46D7AC", VA = "0x46D7AC", Slot = "34")]
		public RESULT setFadePointRamp(ulong dspclock, float volume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DB3")]
		[Address(RVA = "0x46D7D0", Offset = "0x46D7D0", VA = "0x46D7D0", Slot = "35")]
		public RESULT removeFadePoints(ulong dspclock_start, ulong dspclock_end)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DB4")]
		[Address(RVA = "0x46D7FC", Offset = "0x46D7FC", VA = "0x46D7FC", Slot = "36")]
		public RESULT getFadePoints(ref uint numpoints, ulong[] point_dspclock, float[] point_volume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DB5")]
		[Address(RVA = "0x46D818", Offset = "0x46D818", VA = "0x46D818", Slot = "37")]
		public RESULT getDSP(int index, out DSP dsp)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DB6")]
		[Address(RVA = "0x46D820", Offset = "0x46D820", VA = "0x46D820", Slot = "38")]
		public RESULT addDSP(int index, DSP dsp)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DB7")]
		[Address(RVA = "0x46D828", Offset = "0x46D828", VA = "0x46D828", Slot = "39")]
		public RESULT removeDSP(DSP dsp)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DB8")]
		[Address(RVA = "0x46D830", Offset = "0x46D830", VA = "0x46D830", Slot = "40")]
		public RESULT getNumDSPs(out int numdsps)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DB9")]
		[Address(RVA = "0x46D838", Offset = "0x46D838", VA = "0x46D838", Slot = "41")]
		public RESULT setDSPIndex(DSP dsp, int index)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DBA")]
		[Address(RVA = "0x46D840", Offset = "0x46D840", VA = "0x46D840", Slot = "42")]
		public RESULT getDSPIndex(DSP dsp, out int index)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DBB")]
		[Address(RVA = "0x46D848", Offset = "0x46D848", VA = "0x46D848", Slot = "43")]
		public RESULT set3DAttributes(ref VECTOR pos, ref VECTOR vel, ref VECTOR alt_pan_pos)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DBC")]
		[Address(RVA = "0x46D864", Offset = "0x46D864", VA = "0x46D864", Slot = "44")]
		public RESULT get3DAttributes(out VECTOR pos, out VECTOR vel, out VECTOR alt_pan_pos)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DBD")]
		[Address(RVA = "0x46D880", Offset = "0x46D880", VA = "0x46D880", Slot = "45")]
		public RESULT set3DMinMaxDistance(float mindistance, float maxdistance)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DBE")]
		[Address(RVA = "0x46D888", Offset = "0x46D888", VA = "0x46D888", Slot = "46")]
		public RESULT get3DMinMaxDistance(out float mindistance, out float maxdistance)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DBF")]
		[Address(RVA = "0x46D890", Offset = "0x46D890", VA = "0x46D890", Slot = "47")]
		public RESULT set3DConeSettings(float insideconeangle, float outsideconeangle, float outsidevolume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DC0")]
		[Address(RVA = "0x46D8AC", Offset = "0x46D8AC", VA = "0x46D8AC", Slot = "48")]
		public RESULT get3DConeSettings(out float insideconeangle, out float outsideconeangle, out float outsidevolume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DC1")]
		[Address(RVA = "0x46D8C8", Offset = "0x46D8C8", VA = "0x46D8C8", Slot = "49")]
		public RESULT set3DConeOrientation(ref VECTOR orientation)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DC2")]
		[Address(RVA = "0x46D8D0", Offset = "0x46D8D0", VA = "0x46D8D0", Slot = "50")]
		public RESULT get3DConeOrientation(out VECTOR orientation)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DC3")]
		[Address(RVA = "0x46D8D8", Offset = "0x46D8D8", VA = "0x46D8D8", Slot = "51")]
		public RESULT set3DCustomRolloff(ref VECTOR points, int numpoints)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DC4")]
		[Address(RVA = "0x46D8E0", Offset = "0x46D8E0", VA = "0x46D8E0", Slot = "52")]
		public RESULT get3DCustomRolloff(out IntPtr points, out int numpoints)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DC5")]
		[Address(RVA = "0x46D8E8", Offset = "0x46D8E8", VA = "0x46D8E8", Slot = "53")]
		public RESULT set3DOcclusion(float directocclusion, float reverbocclusion)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DC6")]
		[Address(RVA = "0x46D8F0", Offset = "0x46D8F0", VA = "0x46D8F0", Slot = "54")]
		public RESULT get3DOcclusion(out float directocclusion, out float reverbocclusion)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DC7")]
		[Address(RVA = "0x46D8F8", Offset = "0x46D8F8", VA = "0x46D8F8", Slot = "55")]
		public RESULT set3DSpread(float angle)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DC8")]
		[Address(RVA = "0x46D900", Offset = "0x46D900", VA = "0x46D900", Slot = "56")]
		public RESULT get3DSpread(out float angle)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DC9")]
		[Address(RVA = "0x46D908", Offset = "0x46D908", VA = "0x46D908", Slot = "57")]
		public RESULT set3DLevel(float level)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DCA")]
		[Address(RVA = "0x46D910", Offset = "0x46D910", VA = "0x46D910", Slot = "58")]
		public RESULT get3DLevel(out float level)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DCB")]
		[Address(RVA = "0x46D918", Offset = "0x46D918", VA = "0x46D918", Slot = "59")]
		public RESULT set3DDopplerLevel(float level)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DCC")]
		[Address(RVA = "0x46D920", Offset = "0x46D920", VA = "0x46D920", Slot = "60")]
		public RESULT get3DDopplerLevel(out float level)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DCD")]
		[Address(RVA = "0x46D928", Offset = "0x46D928", VA = "0x46D928", Slot = "61")]
		public RESULT set3DDistanceFilter(bool custom, float customLevel, float centerFreq)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DCE")]
		[Address(RVA = "0x46D944", Offset = "0x46D944", VA = "0x46D944", Slot = "62")]
		public RESULT get3DDistanceFilter(out bool custom, out float customLevel, out float centerFreq)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DCF")]
		[Address(RVA = "0x46D960", Offset = "0x46D960", VA = "0x46D960", Slot = "63")]
		public RESULT setUserData(IntPtr userdata)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000DD0")]
		[Address(RVA = "0x46D968", Offset = "0x46D968", VA = "0x46D968", Slot = "64")]
		public RESULT getUserData(out IntPtr userdata)
		{
			return default(RESULT);
		}

		[PreserveSig]
		[Token(Token = "0x6000DD1")]
		[Address(RVA = "0xE62B70", Offset = "0xE62B70", VA = "0xE62B70")]
		private static extern RESULT FMOD5_Channel_SetFrequency(IntPtr channel, float frequency);

		[PreserveSig]
		[Token(Token = "0x6000DD2")]
		[Address(RVA = "0xE62C20", Offset = "0xE62C20", VA = "0xE62C20")]
		private static extern RESULT FMOD5_Channel_GetFrequency(IntPtr channel, out float frequency);

		[PreserveSig]
		[Token(Token = "0x6000DD3")]
		[Address(RVA = "0xE62CD0", Offset = "0xE62CD0", VA = "0xE62CD0")]
		private static extern RESULT FMOD5_Channel_SetPriority(IntPtr channel, int priority);

		[PreserveSig]
		[Token(Token = "0x6000DD4")]
		[Address(RVA = "0xE62D80", Offset = "0xE62D80", VA = "0xE62D80")]
		private static extern RESULT FMOD5_Channel_GetPriority(IntPtr channel, out int priority);

		[PreserveSig]
		[Token(Token = "0x6000DD5")]
		[Address(RVA = "0xE62E30", Offset = "0xE62E30", VA = "0xE62E30")]
		private static extern RESULT FMOD5_Channel_SetPosition(IntPtr channel, uint position, TIMEUNIT postype);

		[PreserveSig]
		[Token(Token = "0x6000DD6")]
		[Address(RVA = "0xE62EE8", Offset = "0xE62EE8", VA = "0xE62EE8")]
		private static extern RESULT FMOD5_Channel_GetPosition(IntPtr channel, out uint position, TIMEUNIT postype);

		[PreserveSig]
		[Token(Token = "0x6000DD7")]
		[Address(RVA = "0xE62FA0", Offset = "0xE62FA0", VA = "0xE62FA0")]
		private static extern RESULT FMOD5_Channel_SetChannelGroup(IntPtr channel, IntPtr channelgroup);

		[PreserveSig]
		[Token(Token = "0x6000DD8")]
		[Address(RVA = "0xE63050", Offset = "0xE63050", VA = "0xE63050")]
		private static extern RESULT FMOD5_Channel_GetChannelGroup(IntPtr channel, out IntPtr channelgroup);

		[PreserveSig]
		[Token(Token = "0x6000DD9")]
		[Address(RVA = "0xE63100", Offset = "0xE63100", VA = "0xE63100")]
		private static extern RESULT FMOD5_Channel_SetLoopCount(IntPtr channel, int loopcount);

		[PreserveSig]
		[Token(Token = "0x6000DDA")]
		[Address(RVA = "0xE631B0", Offset = "0xE631B0", VA = "0xE631B0")]
		private static extern RESULT FMOD5_Channel_GetLoopCount(IntPtr channel, out int loopcount);

		[PreserveSig]
		[Token(Token = "0x6000DDB")]
		[Address(RVA = "0xE63280", Offset = "0xE63280", VA = "0xE63280")]
		private static extern RESULT FMOD5_Channel_SetLoopPoints(IntPtr channel, uint loopstart, TIMEUNIT loopstarttype, uint loopend, TIMEUNIT loopendtype);

		[PreserveSig]
		[Token(Token = "0x6000DDC")]
		[Address(RVA = "0xE63368", Offset = "0xE63368", VA = "0xE63368")]
		private static extern RESULT FMOD5_Channel_GetLoopPoints(IntPtr channel, out uint loopstart, TIMEUNIT loopstarttype, out uint loopend, TIMEUNIT loopendtype);

		[PreserveSig]
		[Token(Token = "0x6000DDD")]
		[Address(RVA = "0xE63430", Offset = "0xE63430", VA = "0xE63430")]
		private static extern RESULT FMOD5_Channel_IsVirtual(IntPtr channel, out bool isvirtual);

		[PreserveSig]
		[Token(Token = "0x6000DDE")]
		[Address(RVA = "0xE634F8", Offset = "0xE634F8", VA = "0xE634F8")]
		private static extern RESULT FMOD5_Channel_GetCurrentSound(IntPtr channel, out IntPtr sound);

		[PreserveSig]
		[Token(Token = "0x6000DDF")]
		[Address(RVA = "0xE635A8", Offset = "0xE635A8", VA = "0xE635A8")]
		private static extern RESULT FMOD5_Channel_GetIndex(IntPtr channel, out int index);

		[PreserveSig]
		[Token(Token = "0x6000DE0")]
		[Address(RVA = "0xE63658", Offset = "0xE63658", VA = "0xE63658")]
		private static extern RESULT FMOD5_Channel_GetSystemObject(IntPtr channel, out IntPtr system);

		[PreserveSig]
		[Token(Token = "0x6000DE1")]
		[Address(RVA = "0xE63708", Offset = "0xE63708", VA = "0xE63708")]
		private static extern RESULT FMOD5_Channel_Stop(IntPtr channel);

		[PreserveSig]
		[Token(Token = "0x6000DE2")]
		[Address(RVA = "0xE637B0", Offset = "0xE637B0", VA = "0xE637B0")]
		private static extern RESULT FMOD5_Channel_SetPaused(IntPtr channel, bool paused);

		[PreserveSig]
		[Token(Token = "0x6000DE3")]
		[Address(RVA = "0xE63860", Offset = "0xE63860", VA = "0xE63860")]
		private static extern RESULT FMOD5_Channel_GetPaused(IntPtr channel, out bool paused);

		[PreserveSig]
		[Token(Token = "0x6000DE4")]
		[Address(RVA = "0xE63928", Offset = "0xE63928", VA = "0xE63928")]
		private static extern RESULT FMOD5_Channel_SetVolume(IntPtr channel, float volume);

		[PreserveSig]
		[Token(Token = "0x6000DE5")]
		[Address(RVA = "0xE639D8", Offset = "0xE639D8", VA = "0xE639D8")]
		private static extern RESULT FMOD5_Channel_GetVolume(IntPtr channel, out float volume);

		[PreserveSig]
		[Token(Token = "0x6000DE6")]
		[Address(RVA = "0xE63A88", Offset = "0xE63A88", VA = "0xE63A88")]
		private static extern RESULT FMOD5_Channel_SetVolumeRamp(IntPtr channel, bool ramp);

		[PreserveSig]
		[Token(Token = "0x6000DE7")]
		[Address(RVA = "0xE63B38", Offset = "0xE63B38", VA = "0xE63B38")]
		private static extern RESULT FMOD5_Channel_GetVolumeRamp(IntPtr channel, out bool ramp);

		[PreserveSig]
		[Token(Token = "0x6000DE8")]
		[Address(RVA = "0xE63C00", Offset = "0xE63C00", VA = "0xE63C00")]
		private static extern RESULT FMOD5_Channel_GetAudibility(IntPtr channel, out float audibility);

		[PreserveSig]
		[Token(Token = "0x6000DE9")]
		[Address(RVA = "0xE63CB0", Offset = "0xE63CB0", VA = "0xE63CB0")]
		private static extern RESULT FMOD5_Channel_SetPitch(IntPtr channel, float pitch);

		[PreserveSig]
		[Token(Token = "0x6000DEA")]
		[Address(RVA = "0xE63D60", Offset = "0xE63D60", VA = "0xE63D60")]
		private static extern RESULT FMOD5_Channel_GetPitch(IntPtr channel, out float pitch);

		[PreserveSig]
		[Token(Token = "0x6000DEB")]
		[Address(RVA = "0xE63E10", Offset = "0xE63E10", VA = "0xE63E10")]
		private static extern RESULT FMOD5_Channel_SetMute(IntPtr channel, bool mute);

		[PreserveSig]
		[Token(Token = "0x6000DEC")]
		[Address(RVA = "0xE63EC0", Offset = "0xE63EC0", VA = "0xE63EC0")]
		private static extern RESULT FMOD5_Channel_GetMute(IntPtr channel, out bool mute);

		[PreserveSig]
		[Token(Token = "0x6000DED")]
		[Address(RVA = "0xE63F88", Offset = "0xE63F88", VA = "0xE63F88")]
		private static extern RESULT FMOD5_Channel_SetReverbProperties(IntPtr channel, int instance, float wet);

		[PreserveSig]
		[Token(Token = "0x6000DEE")]
		[Address(RVA = "0xE64040", Offset = "0xE64040", VA = "0xE64040")]
		private static extern RESULT FMOD5_Channel_GetReverbProperties(IntPtr channel, int instance, out float wet);

		[PreserveSig]
		[Token(Token = "0x6000DEF")]
		[Address(RVA = "0xE640F8", Offset = "0xE640F8", VA = "0xE640F8")]
		private static extern RESULT FMOD5_Channel_SetLowPassGain(IntPtr channel, float gain);

		[PreserveSig]
		[Token(Token = "0x6000DF0")]
		[Address(RVA = "0xE641A8", Offset = "0xE641A8", VA = "0xE641A8")]
		private static extern RESULT FMOD5_Channel_GetLowPassGain(IntPtr channel, out float gain);

		[PreserveSig]
		[Token(Token = "0x6000DF1")]
		[Address(RVA = "0xE64258", Offset = "0xE64258", VA = "0xE64258")]
		private static extern RESULT FMOD5_Channel_SetMode(IntPtr channel, MODE mode);

		[PreserveSig]
		[Token(Token = "0x6000DF2")]
		[Address(RVA = "0xE64308", Offset = "0xE64308", VA = "0xE64308")]
		private static extern RESULT FMOD5_Channel_GetMode(IntPtr channel, out MODE mode);

		[PreserveSig]
		[Token(Token = "0x6000DF3")]
		[Address(RVA = "0xE643B8", Offset = "0xE643B8", VA = "0xE643B8")]
		private static extern RESULT FMOD5_Channel_SetCallback(IntPtr channel, CHANNEL_CALLBACK callback);

		[PreserveSig]
		[Token(Token = "0x6000DF4")]
		[Address(RVA = "0xE64480", Offset = "0xE64480", VA = "0xE64480")]
		private static extern RESULT FMOD5_Channel_IsPlaying(IntPtr channel, out bool isplaying);

		[PreserveSig]
		[Token(Token = "0x6000DF5")]
		[Address(RVA = "0xE64548", Offset = "0xE64548", VA = "0xE64548")]
		private static extern RESULT FMOD5_Channel_SetPan(IntPtr channel, float pan);

		[PreserveSig]
		[Token(Token = "0x6000DF6")]
		[Address(RVA = "0xE64638", Offset = "0xE64638", VA = "0xE64638")]
		private static extern RESULT FMOD5_Channel_SetMixLevelsOutput(IntPtr channel, float frontleft, float frontright, float center, float lfe, float surroundleft, float surroundright, float backleft, float backright);

		[PreserveSig]
		[Token(Token = "0x6000DF7")]
		[Address(RVA = "0xE64728", Offset = "0xE64728", VA = "0xE64728")]
		private static extern RESULT FMOD5_Channel_SetMixLevelsInput(IntPtr channel, float[] levels, int numlevels);

		[PreserveSig]
		[Token(Token = "0x6000DF8")]
		[Address(RVA = "0xE64808", Offset = "0xE64808", VA = "0xE64808")]
		private static extern RESULT FMOD5_Channel_SetMixMatrix(IntPtr channel, float[] matrix, int outchannels, int inchannels, int inchannel_hop);

		[PreserveSig]
		[Token(Token = "0x6000DF9")]
		[Address(RVA = "0xE648F8", Offset = "0xE648F8", VA = "0xE648F8")]
		private static extern RESULT FMOD5_Channel_GetMixMatrix(IntPtr channel, float[] matrix, out int outchannels, out int inchannels, int inchannel_hop);

		[PreserveSig]
		[Token(Token = "0x6000DFA")]
		[Address(RVA = "0xE649C8", Offset = "0xE649C8", VA = "0xE649C8")]
		private static extern RESULT FMOD5_Channel_GetDSPClock(IntPtr channel, out ulong dspclock, out ulong parentclock);

		[PreserveSig]
		[Token(Token = "0x6000DFB")]
		[Address(RVA = "0xE64AB0", Offset = "0xE64AB0", VA = "0xE64AB0")]
		private static extern RESULT FMOD5_Channel_SetDelay(IntPtr channel, ulong dspclock_start, ulong dspclock_end, bool stopchannels);

		[PreserveSig]
		[Token(Token = "0x6000DFC")]
		[Address(RVA = "0xE64B90", Offset = "0xE64B90", VA = "0xE64B90")]
		private static extern RESULT FMOD5_Channel_GetDelay(IntPtr channel, out ulong dspclock_start, out ulong dspclock_end, out bool stopchannels);

		[PreserveSig]
		[Token(Token = "0x6000DFD")]
		[Address(RVA = "0xE64C88", Offset = "0xE64C88", VA = "0xE64C88")]
		private static extern RESULT FMOD5_Channel_AddFadePoint(IntPtr channel, ulong dspclock, float volume);

		[PreserveSig]
		[Token(Token = "0x6000DFE")]
		[Address(RVA = "0xE64D70", Offset = "0xE64D70", VA = "0xE64D70")]
		private static extern RESULT FMOD5_Channel_SetFadePointRamp(IntPtr channel, ulong dspclock, float volume);

		[PreserveSig]
		[Token(Token = "0x6000DFF")]
		[Address(RVA = "0xE64E60", Offset = "0xE64E60", VA = "0xE64E60")]
		private static extern RESULT FMOD5_Channel_RemoveFadePoints(IntPtr channel, ulong dspclock_start, ulong dspclock_end);

		[PreserveSig]
		[Token(Token = "0x6000E00")]
		[Address(RVA = "0xE64F40", Offset = "0xE64F40", VA = "0xE64F40")]
		private static extern RESULT FMOD5_Channel_GetFadePoints(IntPtr channel, ref uint numpoints, ulong[] point_dspclock, float[] point_volume);

		[PreserveSig]
		[Token(Token = "0x6000E01")]
		[Address(RVA = "0xE65010", Offset = "0xE65010", VA = "0xE65010")]
		private static extern RESULT FMOD5_Channel_GetDSP(IntPtr channel, int index, out IntPtr dsp);

		[PreserveSig]
		[Token(Token = "0x6000E02")]
		[Address(RVA = "0xE650C8", Offset = "0xE650C8", VA = "0xE650C8")]
		private static extern RESULT FMOD5_Channel_AddDSP(IntPtr channel, int index, IntPtr dsp);

		[PreserveSig]
		[Token(Token = "0x6000E03")]
		[Address(RVA = "0xE65180", Offset = "0xE65180", VA = "0xE65180")]
		private static extern RESULT FMOD5_Channel_RemoveDSP(IntPtr channel, IntPtr dsp);

		[PreserveSig]
		[Token(Token = "0x6000E04")]
		[Address(RVA = "0xE65230", Offset = "0xE65230", VA = "0xE65230")]
		private static extern RESULT FMOD5_Channel_GetNumDSPs(IntPtr channel, out int numdsps);

		[PreserveSig]
		[Token(Token = "0x6000E05")]
		[Address(RVA = "0xE652E0", Offset = "0xE652E0", VA = "0xE652E0")]
		private static extern RESULT FMOD5_Channel_SetDSPIndex(IntPtr channel, IntPtr dsp, int index);

		[PreserveSig]
		[Token(Token = "0x6000E06")]
		[Address(RVA = "0xE65398", Offset = "0xE65398", VA = "0xE65398")]
		private static extern RESULT FMOD5_Channel_GetDSPIndex(IntPtr channel, IntPtr dsp, out int index);

		[PreserveSig]
		[Token(Token = "0x6000E07")]
		[Address(RVA = "0xE65468", Offset = "0xE65468", VA = "0xE65468")]
		private static extern RESULT FMOD5_Channel_Set3DAttributes(IntPtr channel, ref VECTOR pos, ref VECTOR vel, ref VECTOR alt_pan_pos);

		[PreserveSig]
		[Token(Token = "0x6000E08")]
		[Address(RVA = "0xE65540", Offset = "0xE65540", VA = "0xE65540")]
		private static extern RESULT FMOD5_Channel_Get3DAttributes(IntPtr channel, out VECTOR pos, out VECTOR vel, out VECTOR alt_pan_pos);

		[PreserveSig]
		[Token(Token = "0x6000E09")]
		[Address(RVA = "0xE65600", Offset = "0xE65600", VA = "0xE65600")]
		private static extern RESULT FMOD5_Channel_Set3DMinMaxDistance(IntPtr channel, float mindistance, float maxdistance);

		[PreserveSig]
		[Token(Token = "0x6000E0A")]
		[Address(RVA = "0xE656B8", Offset = "0xE656B8", VA = "0xE656B8")]
		private static extern RESULT FMOD5_Channel_Get3DMinMaxDistance(IntPtr channel, out float mindistance, out float maxdistance);

		[PreserveSig]
		[Token(Token = "0x6000E0B")]
		[Address(RVA = "0xE65788", Offset = "0xE65788", VA = "0xE65788")]
		private static extern RESULT FMOD5_Channel_Set3DConeSettings(IntPtr channel, float insideconeangle, float outsideconeangle, float outsidevolume);

		[PreserveSig]
		[Token(Token = "0x6000E0C")]
		[Address(RVA = "0xE65860", Offset = "0xE65860", VA = "0xE65860")]
		private static extern RESULT FMOD5_Channel_Get3DConeSettings(IntPtr channel, out float insideconeangle, out float outsideconeangle, out float outsidevolume);

		[PreserveSig]
		[Token(Token = "0x6000E0D")]
		[Address(RVA = "0xE65920", Offset = "0xE65920", VA = "0xE65920")]
		private static extern RESULT FMOD5_Channel_Set3DConeOrientation(IntPtr channel, ref VECTOR orientation);

		[PreserveSig]
		[Token(Token = "0x6000E0E")]
		[Address(RVA = "0xE659D0", Offset = "0xE659D0", VA = "0xE659D0")]
		private static extern RESULT FMOD5_Channel_Get3DConeOrientation(IntPtr channel, out VECTOR orientation);

		[PreserveSig]
		[Token(Token = "0x6000E0F")]
		[Address(RVA = "0xE65A80", Offset = "0xE65A80", VA = "0xE65A80")]
		private static extern RESULT FMOD5_Channel_Set3DCustomRolloff(IntPtr channel, ref VECTOR points, int numpoints);

		[PreserveSig]
		[Token(Token = "0x6000E10")]
		[Address(RVA = "0xE65B38", Offset = "0xE65B38", VA = "0xE65B38")]
		private static extern RESULT FMOD5_Channel_Get3DCustomRolloff(IntPtr channel, out IntPtr points, out int numpoints);

		[PreserveSig]
		[Token(Token = "0x6000E11")]
		[Address(RVA = "0xE65BF0", Offset = "0xE65BF0", VA = "0xE65BF0")]
		private static extern RESULT FMOD5_Channel_Set3DOcclusion(IntPtr channel, float directocclusion, float reverbocclusion);

		[PreserveSig]
		[Token(Token = "0x6000E12")]
		[Address(RVA = "0xE65CA8", Offset = "0xE65CA8", VA = "0xE65CA8")]
		private static extern RESULT FMOD5_Channel_Get3DOcclusion(IntPtr channel, out float directocclusion, out float reverbocclusion);

		[PreserveSig]
		[Token(Token = "0x6000E13")]
		[Address(RVA = "0xE65D60", Offset = "0xE65D60", VA = "0xE65D60")]
		private static extern RESULT FMOD5_Channel_Set3DSpread(IntPtr channel, float angle);

		[PreserveSig]
		[Token(Token = "0x6000E14")]
		[Address(RVA = "0xE65E10", Offset = "0xE65E10", VA = "0xE65E10")]
		private static extern RESULT FMOD5_Channel_Get3DSpread(IntPtr channel, out float angle);

		[PreserveSig]
		[Token(Token = "0x6000E15")]
		[Address(RVA = "0xE65EC0", Offset = "0xE65EC0", VA = "0xE65EC0")]
		private static extern RESULT FMOD5_Channel_Set3DLevel(IntPtr channel, float level);

		[PreserveSig]
		[Token(Token = "0x6000E16")]
		[Address(RVA = "0xE65F70", Offset = "0xE65F70", VA = "0xE65F70")]
		private static extern RESULT FMOD5_Channel_Get3DLevel(IntPtr channel, out float level);

		[PreserveSig]
		[Token(Token = "0x6000E17")]
		[Address(RVA = "0xE66020", Offset = "0xE66020", VA = "0xE66020")]
		private static extern RESULT FMOD5_Channel_Set3DDopplerLevel(IntPtr channel, float level);

		[PreserveSig]
		[Token(Token = "0x6000E18")]
		[Address(RVA = "0xE660D0", Offset = "0xE660D0", VA = "0xE660D0")]
		private static extern RESULT FMOD5_Channel_Get3DDopplerLevel(IntPtr channel, out float level);

		[PreserveSig]
		[Token(Token = "0x6000E19")]
		[Address(RVA = "0xE66198", Offset = "0xE66198", VA = "0xE66198")]
		private static extern RESULT FMOD5_Channel_Set3DDistanceFilter(IntPtr channel, bool custom, float customLevel, float centerFreq);

		[PreserveSig]
		[Token(Token = "0x6000E1A")]
		[Address(RVA = "0xE66270", Offset = "0xE66270", VA = "0xE66270")]
		private static extern RESULT FMOD5_Channel_Get3DDistanceFilter(IntPtr channel, out bool custom, out float customLevel, out float centerFreq);

		[PreserveSig]
		[Token(Token = "0x6000E1B")]
		[Address(RVA = "0xE66348", Offset = "0xE66348", VA = "0xE66348")]
		private static extern RESULT FMOD5_Channel_SetUserData(IntPtr channel, IntPtr userdata);

		[PreserveSig]
		[Token(Token = "0x6000E1C")]
		[Address(RVA = "0xE663F8", Offset = "0xE663F8", VA = "0xE663F8")]
		private static extern RESULT FMOD5_Channel_GetUserData(IntPtr channel, out IntPtr userdata);

		[Token(Token = "0x6000E1D")]
		[Address(RVA = "0x46D970", Offset = "0x46D970", VA = "0x46D970")]
		public bool hasHandle()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E1E")]
		[Address(RVA = "0x46D978", Offset = "0x46D978", VA = "0x46D978")]
		public void clearHandle()
		{
		}
	}
	[Token(Token = "0x2000225")]
	public struct ChannelGroup : IChannelControl
	{
		[Token(Token = "0x4000C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Token(Token = "0x6000E1F")]
		[Address(RVA = "0x485740", Offset = "0x485740", VA = "0x485740")]
		public RESULT release()
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E20")]
		[Address(RVA = "0x485748", Offset = "0x485748", VA = "0x485748")]
		public RESULT addGroup(ChannelGroup group, bool propagatedspclock, out DSPConnection connection)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E21")]
		[Address(RVA = "0x485764", Offset = "0x485764", VA = "0x485764")]
		public RESULT getNumGroups(out int numgroups)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E22")]
		[Address(RVA = "0x48576C", Offset = "0x48576C", VA = "0x48576C")]
		public RESULT getGroup(int index, out ChannelGroup group)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E23")]
		[Address(RVA = "0x485774", Offset = "0x485774", VA = "0x485774")]
		public RESULT getParentGroup(out ChannelGroup group)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E24")]
		[Address(RVA = "0x48577C", Offset = "0x48577C", VA = "0x48577C")]
		public RESULT getName(out string name, int namelen)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E25")]
		[Address(RVA = "0x485784", Offset = "0x485784", VA = "0x485784")]
		public RESULT getNumChannels(out int numchannels)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E26")]
		[Address(RVA = "0x48578C", Offset = "0x48578C", VA = "0x48578C")]
		public RESULT getChannel(int index, out Channel channel)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E27")]
		[Address(RVA = "0x485794", Offset = "0x485794", VA = "0x485794", Slot = "4")]
		public RESULT getSystemObject(out System system)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E28")]
		[Address(RVA = "0x48579C", Offset = "0x48579C", VA = "0x48579C", Slot = "5")]
		public RESULT stop()
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E29")]
		[Address(RVA = "0x4857A4", Offset = "0x4857A4", VA = "0x4857A4", Slot = "6")]
		public RESULT setPaused(bool paused)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E2A")]
		[Address(RVA = "0x4857AC", Offset = "0x4857AC", VA = "0x4857AC", Slot = "7")]
		public RESULT getPaused(out bool paused)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E2B")]
		[Address(RVA = "0x4857B4", Offset = "0x4857B4", VA = "0x4857B4", Slot = "8")]
		public RESULT setVolume(float volume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E2C")]
		[Address(RVA = "0x4857BC", Offset = "0x4857BC", VA = "0x4857BC", Slot = "9")]
		public RESULT getVolume(out float volume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E2D")]
		[Address(RVA = "0x4857C4", Offset = "0x4857C4", VA = "0x4857C4", Slot = "10")]
		public RESULT setVolumeRamp(bool ramp)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E2E")]
		[Address(RVA = "0x4857CC", Offset = "0x4857CC", VA = "0x4857CC", Slot = "11")]
		public RESULT getVolumeRamp(out bool ramp)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E2F")]
		[Address(RVA = "0x4857D4", Offset = "0x4857D4", VA = "0x4857D4", Slot = "12")]
		public RESULT getAudibility(out float audibility)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E30")]
		[Address(RVA = "0x4857DC", Offset = "0x4857DC", VA = "0x4857DC", Slot = "13")]
		public RESULT setPitch(float pitch)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E31")]
		[Address(RVA = "0x4857E4", Offset = "0x4857E4", VA = "0x4857E4", Slot = "14")]
		public RESULT getPitch(out float pitch)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E32")]
		[Address(RVA = "0x4857EC", Offset = "0x4857EC", VA = "0x4857EC", Slot = "15")]
		public RESULT setMute(bool mute)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E33")]
		[Address(RVA = "0x4857F4", Offset = "0x4857F4", VA = "0x4857F4", Slot = "16")]
		public RESULT getMute(out bool mute)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E34")]
		[Address(RVA = "0x4857FC", Offset = "0x4857FC", VA = "0x4857FC", Slot = "17")]
		public RESULT setReverbProperties(int instance, float wet)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E35")]
		[Address(RVA = "0x485804", Offset = "0x485804", VA = "0x485804", Slot = "18")]
		public RESULT getReverbProperties(int instance, out float wet)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E36")]
		[Address(RVA = "0x48580C", Offset = "0x48580C", VA = "0x48580C", Slot = "19")]
		public RESULT setLowPassGain(float gain)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E37")]
		[Address(RVA = "0x485814", Offset = "0x485814", VA = "0x485814", Slot = "20")]
		public RESULT getLowPassGain(out float gain)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E38")]
		[Address(RVA = "0x48581C", Offset = "0x48581C", VA = "0x48581C", Slot = "21")]
		public RESULT setMode(MODE mode)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E39")]
		[Address(RVA = "0x485824", Offset = "0x485824", VA = "0x485824", Slot = "22")]
		public RESULT getMode(out MODE mode)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E3A")]
		[Address(RVA = "0x48582C", Offset = "0x48582C", VA = "0x48582C", Slot = "23")]
		public RESULT setCallback(CHANNEL_CALLBACK callback)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E3B")]
		[Address(RVA = "0x485834", Offset = "0x485834", VA = "0x485834", Slot = "24")]
		public RESULT isPlaying(out bool isplaying)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E3C")]
		[Address(RVA = "0x48583C", Offset = "0x48583C", VA = "0x48583C", Slot = "25")]
		public RESULT setPan(float pan)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E3D")]
		[Address(RVA = "0x485844", Offset = "0x485844", VA = "0x485844", Slot = "26")]
		public RESULT setMixLevelsOutput(float frontleft, float frontright, float center, float lfe, float surroundleft, float surroundright, float backleft, float backright)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E3E")]
		[Address(RVA = "0x485888", Offset = "0x485888", VA = "0x485888", Slot = "27")]
		public RESULT setMixLevelsInput(float[] levels, int numlevels)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E3F")]
		[Address(RVA = "0x485890", Offset = "0x485890", VA = "0x485890", Slot = "28")]
		public RESULT setMixMatrix(float[] matrix, int outchannels, int inchannels, int inchannel_hop)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E40")]
		[Address(RVA = "0x4858B4", Offset = "0x4858B4", VA = "0x4858B4", Slot = "29")]
		public RESULT getMixMatrix(float[] matrix, out int outchannels, out int inchannels, int inchannel_hop)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E41")]
		[Address(RVA = "0x4858D8", Offset = "0x4858D8", VA = "0x4858D8", Slot = "30")]
		public RESULT getDSPClock(out ulong dspclock, out ulong parentclock)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E42")]
		[Address(RVA = "0x4858E0", Offset = "0x4858E0", VA = "0x4858E0", Slot = "31")]
		public RESULT setDelay(ulong dspclock_start, ulong dspclock_end, bool stopchannels)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E43")]
		[Address(RVA = "0x485914", Offset = "0x485914", VA = "0x485914", Slot = "32")]
		public RESULT getDelay(out ulong dspclock_start, out ulong dspclock_end, out bool stopchannels)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E44")]
		[Address(RVA = "0x485930", Offset = "0x485930", VA = "0x485930", Slot = "33")]
		public RESULT addFadePoint(ulong dspclock, float volume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E45")]
		[Address(RVA = "0x485954", Offset = "0x485954", VA = "0x485954", Slot = "34")]
		public RESULT setFadePointRamp(ulong dspclock, float volume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E46")]
		[Address(RVA = "0x485978", Offset = "0x485978", VA = "0x485978", Slot = "35")]
		public RESULT removeFadePoints(ulong dspclock_start, ulong dspclock_end)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E47")]
		[Address(RVA = "0x4859A4", Offset = "0x4859A4", VA = "0x4859A4", Slot = "36")]
		public RESULT getFadePoints(ref uint numpoints, ulong[] point_dspclock, float[] point_volume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E48")]
		[Address(RVA = "0x4859C0", Offset = "0x4859C0", VA = "0x4859C0", Slot = "37")]
		public RESULT getDSP(int index, out DSP dsp)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E49")]
		[Address(RVA = "0x4859C8", Offset = "0x4859C8", VA = "0x4859C8", Slot = "38")]
		public RESULT addDSP(int index, DSP dsp)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E4A")]
		[Address(RVA = "0x4859D0", Offset = "0x4859D0", VA = "0x4859D0", Slot = "39")]
		public RESULT removeDSP(DSP dsp)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E4B")]
		[Address(RVA = "0x4859D8", Offset = "0x4859D8", VA = "0x4859D8", Slot = "40")]
		public RESULT getNumDSPs(out int numdsps)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E4C")]
		[Address(RVA = "0x4859E0", Offset = "0x4859E0", VA = "0x4859E0", Slot = "41")]
		public RESULT setDSPIndex(DSP dsp, int index)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E4D")]
		[Address(RVA = "0x4859E8", Offset = "0x4859E8", VA = "0x4859E8", Slot = "42")]
		public RESULT getDSPIndex(DSP dsp, out int index)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E4E")]
		[Address(RVA = "0x4859F0", Offset = "0x4859F0", VA = "0x4859F0", Slot = "43")]
		public RESULT set3DAttributes(ref VECTOR pos, ref VECTOR vel, ref VECTOR alt_pan_pos)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E4F")]
		[Address(RVA = "0x485A0C", Offset = "0x485A0C", VA = "0x485A0C", Slot = "44")]
		public RESULT get3DAttributes(out VECTOR pos, out VECTOR vel, out VECTOR alt_pan_pos)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E50")]
		[Address(RVA = "0x485A28", Offset = "0x485A28", VA = "0x485A28", Slot = "45")]
		public RESULT set3DMinMaxDistance(float mindistance, float maxdistance)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E51")]
		[Address(RVA = "0x485A30", Offset = "0x485A30", VA = "0x485A30", Slot = "46")]
		public RESULT get3DMinMaxDistance(out float mindistance, out float maxdistance)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E52")]
		[Address(RVA = "0x485A38", Offset = "0x485A38", VA = "0x485A38", Slot = "47")]
		public RESULT set3DConeSettings(float insideconeangle, float outsideconeangle, float outsidevolume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E53")]
		[Address(RVA = "0x485A54", Offset = "0x485A54", VA = "0x485A54", Slot = "48")]
		public RESULT get3DConeSettings(out float insideconeangle, out float outsideconeangle, out float outsidevolume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E54")]
		[Address(RVA = "0x485A70", Offset = "0x485A70", VA = "0x485A70", Slot = "49")]
		public RESULT set3DConeOrientation(ref VECTOR orientation)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E55")]
		[Address(RVA = "0x485A78", Offset = "0x485A78", VA = "0x485A78", Slot = "50")]
		public RESULT get3DConeOrientation(out VECTOR orientation)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E56")]
		[Address(RVA = "0x485A80", Offset = "0x485A80", VA = "0x485A80", Slot = "51")]
		public RESULT set3DCustomRolloff(ref VECTOR points, int numpoints)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E57")]
		[Address(RVA = "0x485A88", Offset = "0x485A88", VA = "0x485A88", Slot = "52")]
		public RESULT get3DCustomRolloff(out IntPtr points, out int numpoints)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E58")]
		[Address(RVA = "0x485A90", Offset = "0x485A90", VA = "0x485A90", Slot = "53")]
		public RESULT set3DOcclusion(float directocclusion, float reverbocclusion)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E59")]
		[Address(RVA = "0x485A98", Offset = "0x485A98", VA = "0x485A98", Slot = "54")]
		public RESULT get3DOcclusion(out float directocclusion, out float reverbocclusion)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E5A")]
		[Address(RVA = "0x485AA0", Offset = "0x485AA0", VA = "0x485AA0", Slot = "55")]
		public RESULT set3DSpread(float angle)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E5B")]
		[Address(RVA = "0x485AA8", Offset = "0x485AA8", VA = "0x485AA8", Slot = "56")]
		public RESULT get3DSpread(out float angle)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E5C")]
		[Address(RVA = "0x485AB0", Offset = "0x485AB0", VA = "0x485AB0", Slot = "57")]
		public RESULT set3DLevel(float level)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E5D")]
		[Address(RVA = "0x485AB8", Offset = "0x485AB8", VA = "0x485AB8", Slot = "58")]
		public RESULT get3DLevel(out float level)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E5E")]
		[Address(RVA = "0x485AC0", Offset = "0x485AC0", VA = "0x485AC0", Slot = "59")]
		public RESULT set3DDopplerLevel(float level)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E5F")]
		[Address(RVA = "0x485AC8", Offset = "0x485AC8", VA = "0x485AC8", Slot = "60")]
		public RESULT get3DDopplerLevel(out float level)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E60")]
		[Address(RVA = "0x485AD0", Offset = "0x485AD0", VA = "0x485AD0", Slot = "61")]
		public RESULT set3DDistanceFilter(bool custom, float customLevel, float centerFreq)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E61")]
		[Address(RVA = "0x485AEC", Offset = "0x485AEC", VA = "0x485AEC", Slot = "62")]
		public RESULT get3DDistanceFilter(out bool custom, out float customLevel, out float centerFreq)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E62")]
		[Address(RVA = "0x485B08", Offset = "0x485B08", VA = "0x485B08", Slot = "63")]
		public RESULT setUserData(IntPtr userdata)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000E63")]
		[Address(RVA = "0x485B10", Offset = "0x485B10", VA = "0x485B10", Slot = "64")]
		public RESULT getUserData(out IntPtr userdata)
		{
			return default(RESULT);
		}

		[PreserveSig]
		[Token(Token = "0x6000E64")]
		[Address(RVA = "0x17592C0", Offset = "0x17592C0", VA = "0x17592C0")]
		private static extern RESULT FMOD5_ChannelGroup_Release(IntPtr channelgroup);

		[PreserveSig]
		[Token(Token = "0x6000E65")]
		[Address(RVA = "0x1759380", Offset = "0x1759380", VA = "0x1759380")]
		private static extern RESULT FMOD5_ChannelGroup_AddGroup(IntPtr channelgroup, IntPtr group, bool propogatedspclocks, out IntPtr connection);

		[PreserveSig]
		[Token(Token = "0x6000E66")]
		[Address(RVA = "0x1759440", Offset = "0x1759440", VA = "0x1759440")]
		private static extern RESULT FMOD5_ChannelGroup_GetNumGroups(IntPtr channelgroup, out int numgroups);

		[PreserveSig]
		[Token(Token = "0x6000E67")]
		[Address(RVA = "0x17594F0", Offset = "0x17594F0", VA = "0x17594F0")]
		private static extern RESULT FMOD5_ChannelGroup_GetGroup(IntPtr channelgroup, int index, out IntPtr group);

		[PreserveSig]
		[Token(Token = "0x6000E68")]
		[Address(RVA = "0x17595A8", Offset = "0x17595A8", VA = "0x17595A8")]
		private static extern RESULT FMOD5_ChannelGroup_GetParentGroup(IntPtr channelgroup, out IntPtr group);

		[PreserveSig]
		[Token(Token = "0x6000E69")]
		[Address(RVA = "0x1759858", Offset = "0x1759858", VA = "0x1759858")]
		private static extern RESULT FMOD5_ChannelGroup_GetName(IntPtr channelgroup, IntPtr name, int namelen);

		[PreserveSig]
		[Token(Token = "0x6000E6A")]
		[Address(RVA = "0x1759910", Offset = "0x1759910", VA = "0x1759910")]
		private static extern RESULT FMOD5_ChannelGroup_GetNumChannels(IntPtr channelgroup, out int numchannels);

		[PreserveSig]
		[Token(Token = "0x6000E6B")]
		[Address(RVA = "0x17599C0", Offset = "0x17599C0", VA = "0x17599C0")]
		private static extern RESULT FMOD5_ChannelGroup_GetChannel(IntPtr channelgroup, int index, out IntPtr channel);

		[PreserveSig]
		[Token(Token = "0x6000E6C")]
		[Address(RVA = "0x1759A78", Offset = "0x1759A78", VA = "0x1759A78")]
		private static extern RESULT FMOD5_ChannelGroup_GetSystemObject(IntPtr channelgroup, out IntPtr system);

		[PreserveSig]
		[Token(Token = "0x6000E6D")]
		[Address(RVA = "0x1759B28", Offset = "0x1759B28", VA = "0x1759B28")]
		private static extern RESULT FMOD5_ChannelGroup_Stop(IntPtr channelgroup);

		[PreserveSig]
		[Token(Token = "0x6000E6E")]
		[Address(RVA = "0x1759BD0", Offset = "0x1759BD0", VA = "0x1759BD0")]
		private static extern RESULT FMOD5_ChannelGroup_SetPaused(IntPtr channelgroup, bool paused);

		[PreserveSig]
		[Token(Token = "0x6000E6F")]
		[Address(RVA = "0x1759C80", Offset = "0x1759C80", VA = "0x1759C80")]
		private static extern RESULT FMOD5_ChannelGroup_GetPaused(IntPtr channelgroup, out bool paused);

		[PreserveSig]
		[Token(Token = "0x6000E70")]
		[Address(RVA = "0x1759D48", Offset = "0x1759D48", VA = "0x1759D48")]
		private static extern RESULT FMOD5_ChannelGroup_SetVolume(IntPtr channelgroup, float volume);

		[PreserveSig]
		[Token(Token = "0x6000E71")]
		[Address(RVA = "0x1759DF8", Offset = "0x1759DF8", VA = "0x1759DF8")]
		private static extern RESULT FMOD5_ChannelGroup_GetVolume(IntPtr channelgroup, out float volume);

		[PreserveSig]
		[Token(Token = "0x6000E72")]
		[Address(RVA = "0x1759EA8", Offset = "0x1759EA8", VA = "0x1759EA8")]
		private static extern RESULT FMOD5_ChannelGroup_SetVolumeRamp(IntPtr channelgroup, bool ramp);

		[PreserveSig]
		[Token(Token = "0x6000E73")]
		[Address(RVA = "0x1759F58", Offset = "0x1759F58", VA = "0x1759F58")]
		private static extern RESULT FMOD5_ChannelGroup_GetVolumeRamp(IntPtr channelgroup, out bool ramp);

		[PreserveSig]
		[Token(Token = "0x6000E74")]
		[Address(RVA = "0x175A020", Offset = "0x175A020", VA = "0x175A020")]
		private static extern RESULT FMOD5_ChannelGroup_GetAudibility(IntPtr channelgroup, out float audibility);

		[PreserveSig]
		[Token(Token = "0x6000E75")]
		[Address(RVA = "0x175A0D0", Offset = "0x175A0D0", VA = "0x175A0D0")]
		private static extern RESULT FMOD5_ChannelGroup_SetPitch(IntPtr channelgroup, float pitch);

		[PreserveSig]
		[Token(Token = "0x6000E76")]
		[Address(RVA = "0x175A180", Offset = "0x175A180", VA = "0x175A180")]
		private static extern RESULT FMOD5_ChannelGroup_GetPitch(IntPtr channelgroup, out float pitch);

		[PreserveSig]
		[Token(Token = "0x6000E77")]
		[Address(RVA = "0x175A230", Offset = "0x175A230", VA = "0x175A230")]
		private static extern RESULT FMOD5_ChannelGroup_SetMute(IntPtr channelgroup, bool mute);

		[PreserveSig]
		[Token(Token = "0x6000E78")]
		[Address(RVA = "0x175A2E0", Offset = "0x175A2E0", VA = "0x175A2E0")]
		private static extern RESULT FMOD5_ChannelGroup_GetMute(IntPtr channelgroup, out bool mute);

		[PreserveSig]
		[Token(Token = "0x6000E79")]
		[Address(RVA = "0x175A3A8", Offset = "0x175A3A8", VA = "0x175A3A8")]
		private static extern RESULT FMOD5_ChannelGroup_SetReverbProperties(IntPtr channelgroup, int instance, float wet);

		[PreserveSig]
		[Token(Token = "0x6000E7A")]
		[Address(RVA = "0x175A460", Offset = "0x175A460", VA = "0x175A460")]
		private static extern RESULT FMOD5_ChannelGroup_GetReverbProperties(IntPtr channelgroup, int instance, out float wet);

		[PreserveSig]
		[Token(Token = "0x6000E7B")]
		[Address(RVA = "0x175A518", Offset = "0x175A518", VA = "0x175A518")]
		private static extern RESULT FMOD5_ChannelGroup_SetLowPassGain(IntPtr channelgroup, float gain);

		[PreserveSig]
		[Token(Token = "0x6000E7C")]
		[Address(RVA = "0x175A5C8", Offset = "0x175A5C8", VA = "0x175A5C8")]
		private static extern RESULT FMOD5_ChannelGroup_GetLowPassGain(IntPtr channelgroup, out float gain);

		[PreserveSig]
		[Token(Token = "0x6000E7D")]
		[Address(RVA = "0x175A678", Offset = "0x175A678", VA = "0x175A678")]
		private static extern RESULT FMOD5_ChannelGroup_SetMode(IntPtr channelgroup, MODE mode);

		[PreserveSig]
		[Token(Token = "0x6000E7E")]
		[Address(RVA = "0x175A728", Offset = "0x175A728", VA = "0x175A728")]
		private static extern RESULT FMOD5_ChannelGroup_GetMode(IntPtr channelgroup, out MODE mode);

		[PreserveSig]
		[Token(Token = "0x6000E7F")]
		[Address(RVA = "0x175A7D8", Offset = "0x175A7D8", VA = "0x175A7D8")]
		private static extern RESULT FMOD5_ChannelGroup_SetCallback(IntPtr channelgroup, CHANNEL_CALLBACK callback);

		[PreserveSig]
		[Token(Token = "0x6000E80")]
		[Address(RVA = "0x175A8A0", Offset = "0x175A8A0", VA = "0x175A8A0")]
		private static extern RESULT FMOD5_ChannelGroup_IsPlaying(IntPtr channelgroup, out bool isplaying);

		[PreserveSig]
		[Token(Token = "0x6000E81")]
		[Address(RVA = "0x175A968", Offset = "0x175A968", VA = "0x175A968")]
		private static extern RESULT FMOD5_ChannelGroup_SetPan(IntPtr channelgroup, float pan);

		[PreserveSig]
		[Token(Token = "0x6000E82")]
		[Address(RVA = "0x175AA58", Offset = "0x175AA58", VA = "0x175AA58")]
		private static extern RESULT FMOD5_ChannelGroup_SetMixLevelsOutput(IntPtr channelgroup, float frontleft, float frontright, float center, float lfe, float surroundleft, float surroundright, float backleft, float backright);

		[PreserveSig]
		[Token(Token = "0x6000E83")]
		[Address(RVA = "0x175AB48", Offset = "0x175AB48", VA = "0x175AB48")]
		private static extern RESULT FMOD5_ChannelGroup_SetMixLevelsInput(IntPtr channelgroup, float[] levels, int numlevels);

		[PreserveSig]
		[Token(Token = "0x6000E84")]
		[Address(RVA = "0x175AC28", Offset = "0x175AC28", VA = "0x175AC28")]
		private static extern RESULT FMOD5_ChannelGroup_SetMixMatrix(IntPtr channelgroup, float[] matrix, int outchannels, int inchannels, int inchannel_hop);

		[PreserveSig]
		[Token(Token = "0x6000E85")]
		[Address(RVA = "0x175AD18", Offset = "0x175AD18", VA = "0x175AD18")]
		private static extern RESULT FMOD5_ChannelGroup_GetMixMatrix(IntPtr channelgroup, float[] matrix, out int outchannels, out int inchannels, int inchannel_hop);

		[PreserveSig]
		[Token(Token = "0x6000E86")]
		[Address(RVA = "0x175ADE8", Offset = "0x175ADE8", VA = "0x175ADE8")]
		private static extern RESULT FMOD5_ChannelGroup_GetDSPClock(IntPtr channelgroup, out ulong dspclock, out ulong parentclock);

		[PreserveSig]
		[Token(Token = "0x6000E87")]
		[Address(RVA = "0x175AED0", Offset = "0x175AED0", VA = "0x175AED0")]
		private static extern RESULT FMOD5_ChannelGroup_SetDelay(IntPtr channelgroup, ulong dspclock_start, ulong dspclock_end, bool stopchannels);

		[PreserveSig]
		[Token(Token = "0x6000E88")]
		[Address(RVA = "0x175AFB0", Offset = "0x175AFB0", VA = "0x175AFB0")]
		private static extern RESULT FMOD5_ChannelGroup_GetDelay(IntPtr channelgroup, out ulong dspclock_start, out ulong dspclock_end, out bool stopchannels);

		[PreserveSig]
		[Token(Token = "0x6000E89")]
		[Address(RVA = "0x175B0A8", Offset = "0x175B0A8", VA = "0x175B0A8")]
		private static extern RESULT FMOD5_ChannelGroup_AddFadePoint(IntPtr channelgroup, ulong dspclock, float volume);

		[PreserveSig]
		[Token(Token = "0x6000E8A")]
		[Address(RVA = "0x175B190", Offset = "0x175B190", VA = "0x175B190")]
		private static extern RESULT FMOD5_ChannelGroup_SetFadePointRamp(IntPtr channelgroup, ulong dspclock, float volume);

		[PreserveSig]
		[Token(Token = "0x6000E8B")]
		[Address(RVA = "0x175B280", Offset = "0x175B280", VA = "0x175B280")]
		private static extern RESULT FMOD5_ChannelGroup_RemoveFadePoints(IntPtr channelgroup, ulong dspclock_start, ulong dspclock_end);

		[PreserveSig]
		[Token(Token = "0x6000E8C")]
		[Address(RVA = "0x175B360", Offset = "0x175B360", VA = "0x175B360")]
		private static extern RESULT FMOD5_ChannelGroup_GetFadePoints(IntPtr channelgroup, ref uint numpoints, ulong[] point_dspclock, float[] point_volume);

		[PreserveSig]
		[Token(Token = "0x6000E8D")]
		[Address(RVA = "0x175B430", Offset = "0x175B430", VA = "0x175B430")]
		private static extern RESULT FMOD5_ChannelGroup_GetDSP(IntPtr channelgroup, int index, out IntPtr dsp);

		[PreserveSig]
		[Token(Token = "0x6000E8E")]
		[Address(RVA = "0x175B4E8", Offset = "0x175B4E8", VA = "0x175B4E8")]
		private static extern RESULT FMOD5_ChannelGroup_AddDSP(IntPtr channelgroup, int index, IntPtr dsp);

		[PreserveSig]
		[Token(Token = "0x6000E8F")]
		[Address(RVA = "0x175B5A0", Offset = "0x175B5A0", VA = "0x175B5A0")]
		private static extern RESULT FMOD5_ChannelGroup_RemoveDSP(IntPtr channelgroup, IntPtr dsp);

		[PreserveSig]
		[Token(Token = "0x6000E90")]
		[Address(RVA = "0x175B650", Offset = "0x175B650", VA = "0x175B650")]
		private static extern RESULT FMOD5_ChannelGroup_GetNumDSPs(IntPtr channelgroup, out int numdsps);

		[PreserveSig]
		[Token(Token = "0x6000E91")]
		[Address(RVA = "0x175B700", Offset = "0x175B700", VA = "0x175B700")]
		private static extern RESULT FMOD5_ChannelGroup_SetDSPIndex(IntPtr channelgroup, IntPtr dsp, int index);

		[PreserveSig]
		[Token(Token = "0x6000E92")]
		[Address(RVA = "0x175B7B8", Offset = "0x175B7B8", VA = "0x175B7B8")]
		private static extern RESULT FMOD5_ChannelGroup_GetDSPIndex(IntPtr channelgroup, IntPtr dsp, out int index);

		[PreserveSig]
		[Token(Token = "0x6000E93")]
		[Address(RVA = "0x175B888", Offset = "0x175B888", VA = "0x175B888")]
		private static extern RESULT FMOD5_ChannelGroup_Set3DAttributes(IntPtr channelgroup, ref VECTOR pos, ref VECTOR vel, ref VECTOR alt_pan_pos);

		[PreserveSig]
		[Token(Token = "0x6000E94")]
		[Address(RVA = "0x175B960", Offset = "0x175B960", VA = "0x175B960")]
		private static extern RESULT FMOD5_ChannelGroup_Get3DAttributes(IntPtr channelgroup, out VECTOR pos, out VECTOR vel, out VECTOR alt_pan_pos);

		[PreserveSig]
		[Token(Token = "0x6000E95")]
		[Address(RVA = "0x175BA20", Offset = "0x175BA20", VA = "0x175BA20")]
		private static extern RESULT FMOD5_ChannelGroup_Set3DMinMaxDistance(IntPtr channelgroup, float mindistance, float maxdistance);

		[PreserveSig]
		[Token(Token = "0x6000E96")]
		[Address(RVA = "0x175BAD8", Offset = "0x175BAD8", VA = "0x175BAD8")]
		private static extern RESULT FMOD5_ChannelGroup_Get3DMinMaxDistance(IntPtr channelgroup, out float mindistance, out float maxdistance);

		[PreserveSig]
		[Token(Token = "0x6000E97")]
		[Address(RVA = "0x175BBA8", Offset = "0x175BBA8", VA = "0x175BBA8")]
		private static extern RESULT FMOD5_ChannelGroup_Set3DConeSettings(IntPtr channelgroup, float insideconeangle, float outsideconeangle, float outsidevolume);

		[PreserveSig]
		[Token(Token = "0x6000E98")]
		[Address(RVA = "0x175BC80", Offset = "0x175BC80", VA = "0x175BC80")]
		private static extern RESULT FMOD5_ChannelGroup_Get3DConeSettings(IntPtr channelgroup, out float insideconeangle, out float outsideconeangle, out float outsidevolume);

		[PreserveSig]
		[Token(Token = "0x6000E99")]
		[Address(RVA = "0x175BD40", Offset = "0x175BD40", VA = "0x175BD40")]
		private static extern RESULT FMOD5_ChannelGroup_Set3DConeOrientation(IntPtr channelgroup, ref VECTOR orientation);

		[PreserveSig]
		[Token(Token = "0x6000E9A")]
		[Address(RVA = "0x175BDF0", Offset = "0x175BDF0", VA = "0x175BDF0")]
		private static extern RESULT FMOD5_ChannelGroup_Get3DConeOrientation(IntPtr channelgroup, out VECTOR orientation);

		[PreserveSig]
		[Token(Token = "0x6000E9B")]
		[Address(RVA = "0x175BEA0", Offset = "0x175BEA0", VA = "0x175BEA0")]
		private static extern RESULT FMOD5_ChannelGroup_Set3DCustomRolloff(IntPtr channelgroup, ref VECTOR points, int numpoints);

		[PreserveSig]
		[Token(Token = "0x6000E9C")]
		[Address(RVA = "0x175BF58", Offset = "0x175BF58", VA = "0x175BF58")]
		private static extern RESULT FMOD5_ChannelGroup_Get3DCustomRolloff(IntPtr channelgroup, out IntPtr points, out int numpoints);

		[PreserveSig]
		[Token(Token = "0x6000E9D")]
		[Address(RVA = "0x175C010", Offset = "0x175C010", VA = "0x175C010")]
		private static extern RESULT FMOD5_ChannelGroup_Set3DOcclusion(IntPtr channelgroup, float directocclusion, float reverbocclusion);

		[PreserveSig]
		[Token(Token = "0x6000E9E")]
		[Address(RVA = "0x175C0C8", Offset = "0x175C0C8", VA = "0x175C0C8")]
		private static extern RESULT FMOD5_ChannelGroup_Get3DOcclusion(IntPtr channelgroup, out float directocclusion, out float reverbocclusion);

		[PreserveSig]
		[Token(Token = "0x6000E9F")]
		[Address(RVA = "0x175C180", Offset = "0x175C180", VA = "0x175C180")]
		private static extern RESULT FMOD5_ChannelGroup_Set3DSpread(IntPtr channelgroup, float angle);

		[PreserveSig]
		[Token(Token = "0x6000EA0")]
		[Address(RVA = "0x175C230", Offset = "0x175C230", VA = "0x175C230")]
		private static extern RESULT FMOD5_ChannelGroup_Get3DSpread(IntPtr channelgroup, out float angle);

		[PreserveSig]
		[Token(Token = "0x6000EA1")]
		[Address(RVA = "0x175C2E0", Offset = "0x175C2E0", VA = "0x175C2E0")]
		private static extern RESULT FMOD5_ChannelGroup_Set3DLevel(IntPtr channelgroup, float level);

		[PreserveSig]
		[Token(Token = "0x6000EA2")]
		[Address(RVA = "0x175C390", Offset = "0x175C390", VA = "0x175C390")]
		private static extern RESULT FMOD5_ChannelGroup_Get3DLevel(IntPtr channelgroup, out float level);

		[PreserveSig]
		[Token(Token = "0x6000EA3")]
		[Address(RVA = "0x175C440", Offset = "0x175C440", VA = "0x175C440")]
		private static extern RESULT FMOD5_ChannelGroup_Set3DDopplerLevel(IntPtr channelgroup, float level);

		[PreserveSig]
		[Token(Token = "0x6000EA4")]
		[Address(RVA = "0x175C4F0", Offset = "0x175C4F0", VA = "0x175C4F0")]
		private static extern RESULT FMOD5_ChannelGroup_Get3DDopplerLevel(IntPtr channelgroup, out float level);

		[PreserveSig]
		[Token(Token = "0x6000EA5")]
		[Address(RVA = "0x175C5B8", Offset = "0x175C5B8", VA = "0x175C5B8")]
		private static extern RESULT FMOD5_ChannelGroup_Set3DDistanceFilter(IntPtr channelgroup, bool custom, float customLevel, float centerFreq);

		[PreserveSig]
		[Token(Token = "0x6000EA6")]
		[Address(RVA = "0x175C690", Offset = "0x175C690", VA = "0x175C690")]
		private static extern RESULT FMOD5_ChannelGroup_Get3DDistanceFilter(IntPtr channelgroup, out bool custom, out float customLevel, out float centerFreq);

		[PreserveSig]
		[Token(Token = "0x6000EA7")]
		[Address(RVA = "0x175C768", Offset = "0x175C768", VA = "0x175C768")]
		private static extern RESULT FMOD5_ChannelGroup_SetUserData(IntPtr channelgroup, IntPtr userdata);

		[PreserveSig]
		[Token(Token = "0x6000EA8")]
		[Address(RVA = "0x175C818", Offset = "0x175C818", VA = "0x175C818")]
		private static extern RESULT FMOD5_ChannelGroup_GetUserData(IntPtr channelgroup, out IntPtr userdata);

		[Token(Token = "0x6000EA9")]
		[Address(RVA = "0x485B18", Offset = "0x485B18", VA = "0x485B18")]
		public bool hasHandle()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EAA")]
		[Address(RVA = "0x485B20", Offset = "0x485B20", VA = "0x485B20")]
		public void clearHandle()
		{
		}
	}
	[Token(Token = "0x2000226")]
	public struct SoundGroup
	{
		[Token(Token = "0x4000C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Token(Token = "0x6000EAB")]
		[Address(RVA = "0x48143C", Offset = "0x48143C", VA = "0x48143C")]
		public RESULT release()
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EAC")]
		[Address(RVA = "0x481444", Offset = "0x481444", VA = "0x481444")]
		public RESULT getSystemObject(out System system)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EAD")]
		[Address(RVA = "0x48144C", Offset = "0x48144C", VA = "0x48144C")]
		public RESULT setMaxAudible(int maxaudible)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EAE")]
		[Address(RVA = "0x481454", Offset = "0x481454", VA = "0x481454")]
		public RESULT getMaxAudible(out int maxaudible)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EAF")]
		[Address(RVA = "0x48145C", Offset = "0x48145C", VA = "0x48145C")]
		public RESULT setMaxAudibleBehavior(SOUNDGROUP_BEHAVIOR behavior)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EB0")]
		[Address(RVA = "0x481464", Offset = "0x481464", VA = "0x481464")]
		public RESULT getMaxAudibleBehavior(out SOUNDGROUP_BEHAVIOR behavior)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EB1")]
		[Address(RVA = "0x48146C", Offset = "0x48146C", VA = "0x48146C")]
		public RESULT setMuteFadeSpeed(float speed)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EB2")]
		[Address(RVA = "0x481474", Offset = "0x481474", VA = "0x481474")]
		public RESULT getMuteFadeSpeed(out float speed)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EB3")]
		[Address(RVA = "0x48147C", Offset = "0x48147C", VA = "0x48147C")]
		public RESULT setVolume(float volume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EB4")]
		[Address(RVA = "0x481484", Offset = "0x481484", VA = "0x481484")]
		public RESULT getVolume(out float volume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EB5")]
		[Address(RVA = "0x48148C", Offset = "0x48148C", VA = "0x48148C")]
		public RESULT stop()
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EB6")]
		[Address(RVA = "0x481494", Offset = "0x481494", VA = "0x481494")]
		public RESULT getName(out string name, int namelen)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EB7")]
		[Address(RVA = "0x48149C", Offset = "0x48149C", VA = "0x48149C")]
		public RESULT getNumSounds(out int numsounds)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EB8")]
		[Address(RVA = "0x4814A4", Offset = "0x4814A4", VA = "0x4814A4")]
		public RESULT getSound(int index, out Sound sound)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EB9")]
		[Address(RVA = "0x4814AC", Offset = "0x4814AC", VA = "0x4814AC")]
		public RESULT getNumPlaying(out int numplaying)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EBA")]
		[Address(RVA = "0x4814B4", Offset = "0x4814B4", VA = "0x4814B4")]
		public RESULT setUserData(IntPtr userdata)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EBB")]
		[Address(RVA = "0x4814BC", Offset = "0x4814BC", VA = "0x4814BC")]
		public RESULT getUserData(out IntPtr userdata)
		{
			return default(RESULT);
		}

		[PreserveSig]
		[Token(Token = "0x6000EBC")]
		[Address(RVA = "0x167D0B0", Offset = "0x167D0B0", VA = "0x167D0B0")]
		private static extern RESULT FMOD5_SoundGroup_Release(IntPtr soundgroup);

		[PreserveSig]
		[Token(Token = "0x6000EBD")]
		[Address(RVA = "0x167D158", Offset = "0x167D158", VA = "0x167D158")]
		private static extern RESULT FMOD5_SoundGroup_GetSystemObject(IntPtr soundgroup, out IntPtr system);

		[PreserveSig]
		[Token(Token = "0x6000EBE")]
		[Address(RVA = "0x167D208", Offset = "0x167D208", VA = "0x167D208")]
		private static extern RESULT FMOD5_SoundGroup_SetMaxAudible(IntPtr soundgroup, int maxaudible);

		[PreserveSig]
		[Token(Token = "0x6000EBF")]
		[Address(RVA = "0x167D2B8", Offset = "0x167D2B8", VA = "0x167D2B8")]
		private static extern RESULT FMOD5_SoundGroup_GetMaxAudible(IntPtr soundgroup, out int maxaudible);

		[PreserveSig]
		[Token(Token = "0x6000EC0")]
		[Address(RVA = "0x167D368", Offset = "0x167D368", VA = "0x167D368")]
		private static extern RESULT FMOD5_SoundGroup_SetMaxAudibleBehavior(IntPtr soundgroup, SOUNDGROUP_BEHAVIOR behavior);

		[PreserveSig]
		[Token(Token = "0x6000EC1")]
		[Address(RVA = "0x167D418", Offset = "0x167D418", VA = "0x167D418")]
		private static extern RESULT FMOD5_SoundGroup_GetMaxAudibleBehavior(IntPtr soundgroup, out SOUNDGROUP_BEHAVIOR behavior);

		[PreserveSig]
		[Token(Token = "0x6000EC2")]
		[Address(RVA = "0x167D4C8", Offset = "0x167D4C8", VA = "0x167D4C8")]
		private static extern RESULT FMOD5_SoundGroup_SetMuteFadeSpeed(IntPtr soundgroup, float speed);

		[PreserveSig]
		[Token(Token = "0x6000EC3")]
		[Address(RVA = "0x167D578", Offset = "0x167D578", VA = "0x167D578")]
		private static extern RESULT FMOD5_SoundGroup_GetMuteFadeSpeed(IntPtr soundgroup, out float speed);

		[PreserveSig]
		[Token(Token = "0x6000EC4")]
		[Address(RVA = "0x167D628", Offset = "0x167D628", VA = "0x167D628")]
		private static extern RESULT FMOD5_SoundGroup_SetVolume(IntPtr soundgroup, float volume);

		[PreserveSig]
		[Token(Token = "0x6000EC5")]
		[Address(RVA = "0x167D6D8", Offset = "0x167D6D8", VA = "0x167D6D8")]
		private static extern RESULT FMOD5_SoundGroup_GetVolume(IntPtr soundgroup, out float volume);

		[PreserveSig]
		[Token(Token = "0x6000EC6")]
		[Address(RVA = "0x167D788", Offset = "0x167D788", VA = "0x167D788")]
		private static extern RESULT FMOD5_SoundGroup_Stop(IntPtr soundgroup);

		[PreserveSig]
		[Token(Token = "0x6000EC7")]
		[Address(RVA = "0x167DA28", Offset = "0x167DA28", VA = "0x167DA28")]
		private static extern RESULT FMOD5_SoundGroup_GetName(IntPtr soundgroup, IntPtr name, int namelen);

		[PreserveSig]
		[Token(Token = "0x6000EC8")]
		[Address(RVA = "0x167DF60", Offset = "0x167DF60", VA = "0x167DF60")]
		private static extern RESULT FMOD5_SoundGroup_GetNumSounds(IntPtr soundgroup, out int numsounds);

		[PreserveSig]
		[Token(Token = "0x6000EC9")]
		[Address(RVA = "0x167E010", Offset = "0x167E010", VA = "0x167E010")]
		private static extern RESULT FMOD5_SoundGroup_GetSound(IntPtr soundgroup, int index, out IntPtr sound);

		[PreserveSig]
		[Token(Token = "0x6000ECA")]
		[Address(RVA = "0x167E0C8", Offset = "0x167E0C8", VA = "0x167E0C8")]
		private static extern RESULT FMOD5_SoundGroup_GetNumPlaying(IntPtr soundgroup, out int numplaying);

		[PreserveSig]
		[Token(Token = "0x6000ECB")]
		[Address(RVA = "0x167E178", Offset = "0x167E178", VA = "0x167E178")]
		private static extern RESULT FMOD5_SoundGroup_SetUserData(IntPtr soundgroup, IntPtr userdata);

		[PreserveSig]
		[Token(Token = "0x6000ECC")]
		[Address(RVA = "0x167E228", Offset = "0x167E228", VA = "0x167E228")]
		private static extern RESULT FMOD5_SoundGroup_GetUserData(IntPtr soundgroup, out IntPtr userdata);

		[Token(Token = "0x6000ECD")]
		[Address(RVA = "0x4814C4", Offset = "0x4814C4", VA = "0x4814C4")]
		public bool hasHandle()
		{
			return default(bool);
		}

		[Token(Token = "0x6000ECE")]
		[Address(RVA = "0x4814CC", Offset = "0x4814CC", VA = "0x4814CC")]
		public void clearHandle()
		{
		}
	}
	[Token(Token = "0x2000227")]
	public struct DSP
	{
		[Token(Token = "0x4000C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Token(Token = "0x6000ECF")]
		[Address(RVA = "0x485BA8", Offset = "0x485BA8", VA = "0x485BA8")]
		public RESULT release()
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000ED0")]
		[Address(RVA = "0x485BB0", Offset = "0x485BB0", VA = "0x485BB0")]
		public RESULT getSystemObject(out System system)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000ED1")]
		[Address(RVA = "0x485BB8", Offset = "0x485BB8", VA = "0x485BB8")]
		public RESULT addInput(DSP target, out DSPConnection connection, DSPCONNECTION_TYPE type)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000ED2")]
		[Address(RVA = "0x485BD4", Offset = "0x485BD4", VA = "0x485BD4")]
		public RESULT disconnectFrom(DSP target, DSPConnection connection)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000ED3")]
		[Address(RVA = "0x485BDC", Offset = "0x485BDC", VA = "0x485BDC")]
		public RESULT disconnectAll(bool inputs, bool outputs)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000ED4")]
		[Address(RVA = "0x485BE4", Offset = "0x485BE4", VA = "0x485BE4")]
		public RESULT getNumInputs(out int numinputs)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000ED5")]
		[Address(RVA = "0x485BEC", Offset = "0x485BEC", VA = "0x485BEC")]
		public RESULT getNumOutputs(out int numoutputs)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000ED6")]
		[Address(RVA = "0x485BF4", Offset = "0x485BF4", VA = "0x485BF4")]
		public RESULT getInput(int index, out DSP input, out DSPConnection inputconnection)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000ED7")]
		[Address(RVA = "0x485C10", Offset = "0x485C10", VA = "0x485C10")]
		public RESULT getOutput(int index, out DSP output, out DSPConnection outputconnection)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000ED8")]
		[Address(RVA = "0x485C2C", Offset = "0x485C2C", VA = "0x485C2C")]
		public RESULT setActive(bool active)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000ED9")]
		[Address(RVA = "0x485C34", Offset = "0x485C34", VA = "0x485C34")]
		public RESULT getActive(out bool active)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EDA")]
		[Address(RVA = "0x485C3C", Offset = "0x485C3C", VA = "0x485C3C")]
		public RESULT setBypass(bool bypass)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EDB")]
		[Address(RVA = "0x485C44", Offset = "0x485C44", VA = "0x485C44")]
		public RESULT getBypass(out bool bypass)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EDC")]
		[Address(RVA = "0x485C4C", Offset = "0x485C4C", VA = "0x485C4C")]
		public RESULT setWetDryMix(float prewet, float postwet, float dry)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EDD")]
		[Address(RVA = "0x485C68", Offset = "0x485C68", VA = "0x485C68")]
		public RESULT getWetDryMix(out float prewet, out float postwet, out float dry)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EDE")]
		[Address(RVA = "0x485C84", Offset = "0x485C84", VA = "0x485C84")]
		public RESULT setChannelFormat(CHANNELMASK channelmask, int numchannels, SPEAKERMODE source_speakermode)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EDF")]
		[Address(RVA = "0x485CA0", Offset = "0x485CA0", VA = "0x485CA0")]
		public RESULT getChannelFormat(out CHANNELMASK channelmask, out int numchannels, out SPEAKERMODE source_speakermode)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EE0")]
		[Address(RVA = "0x485CBC", Offset = "0x485CBC", VA = "0x485CBC")]
		public RESULT getOutputChannelFormat(CHANNELMASK inmask, int inchannels, SPEAKERMODE inspeakermode, out CHANNELMASK outmask, out int outchannels, out SPEAKERMODE outspeakermode)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EE1")]
		[Address(RVA = "0x485CEC", Offset = "0x485CEC", VA = "0x485CEC")]
		public RESULT reset()
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EE2")]
		[Address(RVA = "0x485CF4", Offset = "0x485CF4", VA = "0x485CF4")]
		public RESULT setParameterFloat(int index, float value)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EE3")]
		[Address(RVA = "0x485CFC", Offset = "0x485CFC", VA = "0x485CFC")]
		public RESULT setParameterInt(int index, int value)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EE4")]
		[Address(RVA = "0x485D04", Offset = "0x485D04", VA = "0x485D04")]
		public RESULT setParameterBool(int index, bool value)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EE5")]
		[Address(RVA = "0x485D0C", Offset = "0x485D0C", VA = "0x485D0C")]
		public RESULT setParameterData(int index, byte[] data)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EE6")]
		[Address(RVA = "0x485D14", Offset = "0x485D14", VA = "0x485D14")]
		public RESULT getParameterFloat(int index, out float value)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EE7")]
		[Address(RVA = "0x485D1C", Offset = "0x485D1C", VA = "0x485D1C")]
		public RESULT getParameterInt(int index, out int value)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EE8")]
		[Address(RVA = "0x485D24", Offset = "0x485D24", VA = "0x485D24")]
		public RESULT getParameterBool(int index, out bool value)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EE9")]
		[Address(RVA = "0x485D2C", Offset = "0x485D2C", VA = "0x485D2C")]
		public RESULT getParameterData(int index, out IntPtr data, out uint length)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EEA")]
		[Address(RVA = "0x485D48", Offset = "0x485D48", VA = "0x485D48")]
		public RESULT getNumParameters(out int numparams)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EEB")]
		[Address(RVA = "0x485D50", Offset = "0x485D50", VA = "0x485D50")]
		public RESULT getParameterInfo(int index, out DSP_PARAMETER_DESC desc)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EEC")]
		[Address(RVA = "0x485D58", Offset = "0x485D58", VA = "0x485D58")]
		public RESULT getDataParameterIndex(int datatype, out int index)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EED")]
		[Address(RVA = "0x485D60", Offset = "0x485D60", VA = "0x485D60")]
		public RESULT showConfigDialog(IntPtr hwnd, bool show)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EEE")]
		[Address(RVA = "0x485D68", Offset = "0x485D68", VA = "0x485D68")]
		public RESULT getInfo(out string name, out uint version, out int channels, out int configwidth, out int configheight)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EEF")]
		[Address(RVA = "0x485D90", Offset = "0x485D90", VA = "0x485D90")]
		public RESULT getInfo(out uint version, out int channels, out int configwidth, out int configheight)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EF0")]
		[Address(RVA = "0x485DB4", Offset = "0x485DB4", VA = "0x485DB4")]
		public RESULT getType(out DSP_TYPE type)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EF1")]
		[Address(RVA = "0x485DBC", Offset = "0x485DBC", VA = "0x485DBC")]
		public RESULT getIdle(out bool idle)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EF2")]
		[Address(RVA = "0x485DC4", Offset = "0x485DC4", VA = "0x485DC4")]
		public RESULT setUserData(IntPtr userdata)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EF3")]
		[Address(RVA = "0x485DCC", Offset = "0x485DCC", VA = "0x485DCC")]
		public RESULT getUserData(out IntPtr userdata)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EF4")]
		[Address(RVA = "0x485DD4", Offset = "0x485DD4", VA = "0x485DD4")]
		public RESULT setMeteringEnabled(bool inputEnabled, bool outputEnabled)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EF5")]
		[Address(RVA = "0x485DDC", Offset = "0x485DDC", VA = "0x485DDC")]
		public RESULT getMeteringEnabled(out bool inputEnabled, out bool outputEnabled)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EF6")]
		[Address(RVA = "0x485DE4", Offset = "0x485DE4", VA = "0x485DE4")]
		public RESULT getMeteringInfo(IntPtr zero, out DSP_METERING_INFO outputInfo)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000EF7")]
		[Address(RVA = "0x485DEC", Offset = "0x485DEC", VA = "0x485DEC")]
		public RESULT getMeteringInfo(out DSP_METERING_INFO inputInfo, IntPtr zero)
		{
			return default(RESULT);
		}

		[PreserveSig]
		[Token(Token = "0x6000EF8")]
		[Address(RVA = "0x175CE08", Offset = "0x175CE08", VA = "0x175CE08")]
		private static extern RESULT FMOD5_DSP_Release(IntPtr dsp);

		[PreserveSig]
		[Token(Token = "0x6000EF9")]
		[Address(RVA = "0x175CEB0", Offset = "0x175CEB0", VA = "0x175CEB0")]
		private static extern RESULT FMOD5_DSP_GetSystemObject(IntPtr dsp, out IntPtr system);

		[PreserveSig]
		[Token(Token = "0x6000EFA")]
		[Address(RVA = "0x175CF78", Offset = "0x175CF78", VA = "0x175CF78")]
		private static extern RESULT FMOD5_DSP_AddInput(IntPtr dsp, IntPtr target, out IntPtr connection, DSPCONNECTION_TYPE type);

		[PreserveSig]
		[Token(Token = "0x6000EFB")]
		[Address(RVA = "0x175D038", Offset = "0x175D038", VA = "0x175D038")]
		private static extern RESULT FMOD5_DSP_DisconnectFrom(IntPtr dsp, IntPtr target, IntPtr connection);

		[PreserveSig]
		[Token(Token = "0x6000EFC")]
		[Address(RVA = "0x175D0F0", Offset = "0x175D0F0", VA = "0x175D0F0")]
		private static extern RESULT FMOD5_DSP_DisconnectAll(IntPtr dsp, bool inputs, bool outputs);

		[PreserveSig]
		[Token(Token = "0x6000EFD")]
		[Address(RVA = "0x175D1A8", Offset = "0x175D1A8", VA = "0x175D1A8")]
		private static extern RESULT FMOD5_DSP_GetNumInputs(IntPtr dsp, out int numinputs);

		[PreserveSig]
		[Token(Token = "0x6000EFE")]
		[Address(RVA = "0x175D258", Offset = "0x175D258", VA = "0x175D258")]
		private static extern RESULT FMOD5_DSP_GetNumOutputs(IntPtr dsp, out int numoutputs);

		[PreserveSig]
		[Token(Token = "0x6000EFF")]
		[Address(RVA = "0x175D320", Offset = "0x175D320", VA = "0x175D320")]
		private static extern RESULT FMOD5_DSP_GetInput(IntPtr dsp, int index, out IntPtr input, out IntPtr inputconnection);

		[PreserveSig]
		[Token(Token = "0x6000F00")]
		[Address(RVA = "0x175D3F8", Offset = "0x175D3F8", VA = "0x175D3F8")]
		private static extern RESULT FMOD5_DSP_GetOutput(IntPtr dsp, int index, out IntPtr output, out IntPtr outputconnection);

		[PreserveSig]
		[Token(Token = "0x6000F01")]
		[Address(RVA = "0x175D4B8", Offset = "0x175D4B8", VA = "0x175D4B8")]
		private static extern RESULT FMOD5_DSP_SetActive(IntPtr dsp, bool active);

		[PreserveSig]
		[Token(Token = "0x6000F02")]
		[Address(RVA = "0x175D568", Offset = "0x175D568", VA = "0x175D568")]
		private static extern RESULT FMOD5_DSP_GetActive(IntPtr dsp, out bool active);

		[PreserveSig]
		[Token(Token = "0x6000F03")]
		[Address(RVA = "0x175D630", Offset = "0x175D630", VA = "0x175D630")]
		private static extern RESULT FMOD5_DSP_SetBypass(IntPtr dsp, bool bypass);

		[PreserveSig]
		[Token(Token = "0x6000F04")]
		[Address(RVA = "0x175D6E0", Offset = "0x175D6E0", VA = "0x175D6E0")]
		private static extern RESULT FMOD5_DSP_GetBypass(IntPtr dsp, out bool bypass);

		[PreserveSig]
		[Token(Token = "0x6000F05")]
		[Address(RVA = "0x175D7C0", Offset = "0x175D7C0", VA = "0x175D7C0")]
		private static extern RESULT FMOD5_DSP_SetWetDryMix(IntPtr dsp, float prewet, float postwet, float dry);

		[PreserveSig]
		[Token(Token = "0x6000F06")]
		[Address(RVA = "0x175D898", Offset = "0x175D898", VA = "0x175D898")]
		private static extern RESULT FMOD5_DSP_GetWetDryMix(IntPtr dsp, out float prewet, out float postwet, out float dry);

		[PreserveSig]
		[Token(Token = "0x6000F07")]
		[Address(RVA = "0x175D970", Offset = "0x175D970", VA = "0x175D970")]
		private static extern RESULT FMOD5_DSP_SetChannelFormat(IntPtr dsp, CHANNELMASK channelmask, int numchannels, SPEAKERMODE source_speakermode);

		[PreserveSig]
		[Token(Token = "0x6000F08")]
		[Address(RVA = "0x175DA48", Offset = "0x175DA48", VA = "0x175DA48")]
		private static extern RESULT FMOD5_DSP_GetChannelFormat(IntPtr dsp, out CHANNELMASK channelmask, out int numchannels, out SPEAKERMODE source_speakermode);

		[PreserveSig]
		[Token(Token = "0x6000F09")]
		[Address(RVA = "0x175DB30", Offset = "0x175DB30", VA = "0x175DB30")]
		private static extern RESULT FMOD5_DSP_GetOutputChannelFormat(IntPtr dsp, CHANNELMASK inmask, int inchannels, SPEAKERMODE inspeakermode, out CHANNELMASK outmask, out int outchannels, out SPEAKERMODE outspeakermode);

		[PreserveSig]
		[Token(Token = "0x6000F0A")]
		[Address(RVA = "0x175DC08", Offset = "0x175DC08", VA = "0x175DC08")]
		private static extern RESULT FMOD5_DSP_Reset(IntPtr dsp);

		[PreserveSig]
		[Token(Token = "0x6000F0B")]
		[Address(RVA = "0x175DCB0", Offset = "0x175DCB0", VA = "0x175DCB0")]
		private static extern RESULT FMOD5_DSP_SetParameterFloat(IntPtr dsp, int index, float value);

		[PreserveSig]
		[Token(Token = "0x6000F0C")]
		[Address(RVA = "0x175DD68", Offset = "0x175DD68", VA = "0x175DD68")]
		private static extern RESULT FMOD5_DSP_SetParameterInt(IntPtr dsp, int index, int value);

		[PreserveSig]
		[Token(Token = "0x6000F0D")]
		[Address(RVA = "0x175DE20", Offset = "0x175DE20", VA = "0x175DE20")]
		private static extern RESULT FMOD5_DSP_SetParameterBool(IntPtr dsp, int index, bool value);

		[PreserveSig]
		[Token(Token = "0x6000F0E")]
		[Address(RVA = "0x175DF98", Offset = "0x175DF98", VA = "0x175DF98")]
		private static extern RESULT FMOD5_DSP_SetParameterData(IntPtr dsp, int index, IntPtr data, uint length);

		[PreserveSig]
		[Token(Token = "0x6000F0F")]
		[Address(RVA = "0x175E0C0", Offset = "0x175E0C0", VA = "0x175E0C0")]
		private static extern RESULT FMOD5_DSP_GetParameterFloat(IntPtr dsp, int index, out float value, IntPtr valuestr, int valuestrlen);

		[PreserveSig]
		[Token(Token = "0x6000F10")]
		[Address(RVA = "0x175E1F0", Offset = "0x175E1F0", VA = "0x175E1F0")]
		private static extern RESULT FMOD5_DSP_GetParameterInt(IntPtr dsp, int index, out int value, IntPtr valuestr, int valuestrlen);

		[PreserveSig]
		[Token(Token = "0x6000F11")]
		[Address(RVA = "0x175E320", Offset = "0x175E320", VA = "0x175E320")]
		private static extern RESULT FMOD5_DSP_GetParameterBool(IntPtr dsp, int index, out bool value, IntPtr valuestr, int valuestrlen);

		[PreserveSig]
		[Token(Token = "0x6000F12")]
		[Address(RVA = "0x175E470", Offset = "0x175E470", VA = "0x175E470")]
		private static extern RESULT FMOD5_DSP_GetParameterData(IntPtr dsp, int index, out IntPtr data, out uint length, IntPtr valuestr, int valuestrlen);

		[PreserveSig]
		[Token(Token = "0x6000F13")]
		[Address(RVA = "0x175E540", Offset = "0x175E540", VA = "0x175E540")]
		private static extern RESULT FMOD5_DSP_GetNumParameters(IntPtr dsp, out int numparams);

		[PreserveSig]
		[Token(Token = "0x6000F14")]
		[Address(RVA = "0x175E5F0", Offset = "0x175E5F0", VA = "0x175E5F0")]
		private static extern RESULT FMOD5_DSP_GetParameterInfo(IntPtr dsp, int index, out DSP_PARAMETER_DESC desc);

		[PreserveSig]
		[Token(Token = "0x6000F15")]
		[Address(RVA = "0x175E708", Offset = "0x175E708", VA = "0x175E708")]
		private static extern RESULT FMOD5_DSP_GetDataParameterIndex(IntPtr dsp, int datatype, out int index);

		[PreserveSig]
		[Token(Token = "0x6000F16")]
		[Address(RVA = "0x175E7C0", Offset = "0x175E7C0", VA = "0x175E7C0")]
		private static extern RESULT FMOD5_DSP_ShowConfigDialog(IntPtr dsp, IntPtr hwnd, bool show);

		[PreserveSig]
		[Token(Token = "0x6000F17")]
		[Address(RVA = "0x175EA90", Offset = "0x175EA90", VA = "0x175EA90")]
		private static extern RESULT FMOD5_DSP_GetInfo(IntPtr dsp, IntPtr name, out uint version, out int channels, out int configwidth, out int configheight);

		[PreserveSig]
		[Token(Token = "0x6000F18")]
		[Address(RVA = "0x175EBD8", Offset = "0x175EBD8", VA = "0x175EBD8")]
		private static extern RESULT FMOD5_DSP_GetType(IntPtr dsp, out DSP_TYPE type);

		[PreserveSig]
		[Token(Token = "0x6000F19")]
		[Address(RVA = "0x175EC88", Offset = "0x175EC88", VA = "0x175EC88")]
		private static extern RESULT FMOD5_DSP_GetIdle(IntPtr dsp, out bool idle);

		[PreserveSig]
		[Token(Token = "0x6000F1A")]
		[Address(RVA = "0x175ED50", Offset = "0x175ED50", VA = "0x175ED50")]
		private static extern RESULT FMOD5_DSP_SetUserData(IntPtr dsp, IntPtr userdata);

		[PreserveSig]
		[Token(Token = "0x6000F1B")]
		[Address(RVA = "0x175EE00", Offset = "0x175EE00", VA = "0x175EE00")]
		private static extern RESULT FMOD5_DSP_GetUserData(IntPtr dsp, out IntPtr userdata);

		[PreserveSig]
		[Token(Token = "0x6000F1C")]
		[Address(RVA = "0x175EEB0", Offset = "0x175EEB0", VA = "0x175EEB0")]
		public static extern RESULT FMOD5_DSP_SetMeteringEnabled(IntPtr dsp, bool inputEnabled, bool outputEnabled);

		[PreserveSig]
		[Token(Token = "0x6000F1D")]
		[Address(RVA = "0x175EF68", Offset = "0x175EF68", VA = "0x175EF68")]
		public static extern RESULT FMOD5_DSP_GetMeteringEnabled(IntPtr dsp, out bool inputEnabled, out bool outputEnabled);

		[PreserveSig]
		[Token(Token = "0x6000F1E")]
		[Address(RVA = "0x175F050", Offset = "0x175F050", VA = "0x175F050")]
		public static extern RESULT FMOD5_DSP_GetMeteringInfo(IntPtr dsp, IntPtr zero, out DSP_METERING_INFO outputInfo);

		[PreserveSig]
		[Token(Token = "0x6000F1F")]
		[Address(RVA = "0x175F140", Offset = "0x175F140", VA = "0x175F140")]
		public static extern RESULT FMOD5_DSP_GetMeteringInfo(IntPtr dsp, out DSP_METERING_INFO inputInfo, IntPtr zero);

		[Token(Token = "0x6000F20")]
		[Address(RVA = "0x486010", Offset = "0x486010", VA = "0x486010")]
		public bool hasHandle()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F21")]
		[Address(RVA = "0x486018", Offset = "0x486018", VA = "0x486018")]
		public void clearHandle()
		{
		}
	}
	[Token(Token = "0x2000228")]
	public struct DSPConnection
	{
		[Token(Token = "0x4000C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Token(Token = "0x6000F22")]
		[Address(RVA = "0x486064", Offset = "0x486064", VA = "0x486064")]
		public RESULT getInput(out DSP input)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000F23")]
		[Address(RVA = "0x48606C", Offset = "0x48606C", VA = "0x48606C")]
		public RESULT getOutput(out DSP output)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000F24")]
		[Address(RVA = "0x486074", Offset = "0x486074", VA = "0x486074")]
		public RESULT setMix(float volume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000F25")]
		[Address(RVA = "0x48607C", Offset = "0x48607C", VA = "0x48607C")]
		public RESULT getMix(out float volume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000F26")]
		[Address(RVA = "0x486084", Offset = "0x486084", VA = "0x486084")]
		public RESULT setMixMatrix(float[] matrix, int outchannels, int inchannels, int inchannel_hop)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000F27")]
		[Address(RVA = "0x4860A8", Offset = "0x4860A8", VA = "0x4860A8")]
		public RESULT getMixMatrix(float[] matrix, out int outchannels, out int inchannels, int inchannel_hop)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000F28")]
		[Address(RVA = "0x4860CC", Offset = "0x4860CC", VA = "0x4860CC")]
		public RESULT getType(out DSPCONNECTION_TYPE type)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000F29")]
		[Address(RVA = "0x4860D4", Offset = "0x4860D4", VA = "0x4860D4")]
		public RESULT setUserData(IntPtr userdata)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000F2A")]
		[Address(RVA = "0x4860DC", Offset = "0x4860DC", VA = "0x4860DC")]
		public RESULT getUserData(out IntPtr userdata)
		{
			return default(RESULT);
		}

		[PreserveSig]
		[Token(Token = "0x6000F2B")]
		[Address(RVA = "0x175F2D0", Offset = "0x175F2D0", VA = "0x175F2D0")]
		private static extern RESULT FMOD5_DSPConnection_GetInput(IntPtr dspconnection, out IntPtr input);

		[PreserveSig]
		[Token(Token = "0x6000F2C")]
		[Address(RVA = "0x175F380", Offset = "0x175F380", VA = "0x175F380")]
		private static extern RESULT FMOD5_DSPConnection_GetOutput(IntPtr dspconnection, out IntPtr output);

		[PreserveSig]
		[Token(Token = "0x6000F2D")]
		[Address(RVA = "0x175F430", Offset = "0x175F430", VA = "0x175F430")]
		private static extern RESULT FMOD5_DSPConnection_SetMix(IntPtr dspconnection, float volume);

		[PreserveSig]
		[Token(Token = "0x6000F2E")]
		[Address(RVA = "0x175F4E0", Offset = "0x175F4E0", VA = "0x175F4E0")]
		private static extern RESULT FMOD5_DSPConnection_GetMix(IntPtr dspconnection, out float volume);

		[PreserveSig]
		[Token(Token = "0x6000F2F")]
		[Address(RVA = "0x175F5B0", Offset = "0x175F5B0", VA = "0x175F5B0")]
		private static extern RESULT FMOD5_DSPConnection_SetMixMatrix(IntPtr dspconnection, float[] matrix, int outchannels, int inchannels, int inchannel_hop);

		[PreserveSig]
		[Token(Token = "0x6000F30")]
		[Address(RVA = "0x175F6A0", Offset = "0x175F6A0", VA = "0x175F6A0")]
		private static extern RESULT FMOD5_DSPConnection_GetMixMatrix(IntPtr dspconnection, float[] matrix, out int outchannels, out int inchannels, int inchannel_hop);

		[PreserveSig]
		[Token(Token = "0x6000F31")]
		[Address(RVA = "0x175F770", Offset = "0x175F770", VA = "0x175F770")]
		private static extern RESULT FMOD5_DSPConnection_GetType(IntPtr dspconnection, out DSPCONNECTION_TYPE type);

		[PreserveSig]
		[Token(Token = "0x6000F32")]
		[Address(RVA = "0x175F820", Offset = "0x175F820", VA = "0x175F820")]
		private static extern RESULT FMOD5_DSPConnection_SetUserData(IntPtr dspconnection, IntPtr userdata);

		[PreserveSig]
		[Token(Token = "0x6000F33")]
		[Address(RVA = "0x175F8D0", Offset = "0x175F8D0", VA = "0x175F8D0")]
		private static extern RESULT FMOD5_DSPConnection_GetUserData(IntPtr dspconnection, out IntPtr userdata);

		[Token(Token = "0x6000F34")]
		[Address(RVA = "0x4860E4", Offset = "0x4860E4", VA = "0x4860E4")]
		public bool hasHandle()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F35")]
		[Address(RVA = "0x4860EC", Offset = "0x4860EC", VA = "0x4860EC")]
		public void clearHandle()
		{
		}
	}
	[Token(Token = "0x2000229")]
	public struct Geometry
	{
		[Token(Token = "0x4000C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Token(Token = "0x6000F36")]
		[Address(RVA = "0x487A20", Offset = "0x487A20", VA = "0x487A20")]
		public RESULT release()
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000F37")]
		[Address(RVA = "0x487A28", Offset = "0x487A28", VA = "0x487A28")]
		public RESULT addPolygon(float directocclusion, float reverbocclusion, bool doublesided, int numvertices, VECTOR[] vertices, out int polygonindex)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000F38")]
		[Address(RVA = "0x487A58", Offset = "0x487A58", VA = "0x487A58")]
		public RESULT getNumPolygons(out int numpolygons)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000F39")]
		[Address(RVA = "0x487A60", Offset = "0x487A60", VA = "0x487A60")]
		public RESULT getMaxPolygons(out int maxpolygons, out int maxvertices)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000F3A")]
		[Address(RVA = "0x487A68", Offset = "0x487A68", VA = "0x487A68")]
		public RESULT getPolygonNumVertices(int index, out int numvertices)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000F3B")]
		[Address(RVA = "0x487A70", Offset = "0x487A70", VA = "0x487A70")]
		public RESULT setPolygonVertex(int index, int vertexindex, ref VECTOR vertex)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000F3C")]
		[Address(RVA = "0x487A8C", Offset = "0x487A8C", VA = "0x487A8C")]
		public RESULT getPolygonVertex(int index, int vertexindex, out VECTOR vertex)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000F3D")]
		[Address(RVA = "0x487AA8", Offset = "0x487AA8", VA = "0x487AA8")]
		public RESULT setPolygonAttributes(int index, float directocclusion, float reverbocclusion, bool doublesided)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000F3E")]
		[Address(RVA = "0x487ACC", Offset = "0x487ACC", VA = "0x487ACC")]
		public RESULT getPolygonAttributes(int index, out float directocclusion, out float reverbocclusion, out bool doublesided)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000F3F")]
		[Address(RVA = "0x487AF0", Offset = "0x487AF0", VA = "0x487AF0")]
		public RESULT setActive(bool active)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000F40")]
		[Address(RVA = "0x487AF8", Offset = "0x487AF8", VA = "0x487AF8")]
		public RESULT getActive(out bool active)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000F41")]
		[Address(RVA = "0x487B00", Offset = "0x487B00", VA = "0x487B00")]
		public RESULT setRotation(ref VECTOR forward, ref VECTOR up)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000F42")]
		[Address(RVA = "0x487B08", Offset = "0x487B08", VA = "0x487B08")]
		public RESULT getRotation(out VECTOR forward, out VECTOR up)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000F43")]
		[Address(RVA = "0x487B10", Offset = "0x487B10", VA = "0x487B10")]
		public RESULT setPosition(ref VECTOR position)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000F44")]
		[Address(RVA = "0x487B18", Offset = "0x487B18", VA = "0x487B18")]
		public RESULT getPosition(out VECTOR position)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000F45")]
		[Address(RVA = "0x487B20", Offset = "0x487B20", VA = "0x487B20")]
		public RESULT setScale(ref VECTOR scale)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000F46")]
		[Address(RVA = "0x487B28", Offset = "0x487B28", VA = "0x487B28")]
		public RESULT getScale(out VECTOR scale)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000F47")]
		[Address(RVA = "0x487B30", Offset = "0x487B30", VA = "0x487B30")]
		public RESULT save(IntPtr data, out int datasize)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000F48")]
		[Address(RVA = "0x487B38", Offset = "0x487B38", VA = "0x487B38")]
		public RESULT setUserData(IntPtr userdata)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000F49")]
		[Address(RVA = "0x487B40", Offset = "0x487B40", VA = "0x487B40")]
		public RESULT getUserData(out IntPtr userdata)
		{
			return default(RESULT);
		}

		[PreserveSig]
		[Token(Token = "0x6000F4A")]
		[Address(RVA = "0x176AD58", Offset = "0x176AD58", VA = "0x176AD58")]
		private static extern RESULT FMOD5_Geometry_Release(IntPtr geometry);

		[PreserveSig]
		[Token(Token = "0x6000F4B")]
		[Address(RVA = "0x176AE28", Offset = "0x176AE28", VA = "0x176AE28")]
		private static extern RESULT FMOD5_Geometry_AddPolygon(IntPtr geometry, float directocclusion, float reverbocclusion, bool doublesided, int numvertices, VECTOR[] vertices, out int polygonindex);

		[PreserveSig]
		[Token(Token = "0x6000F4C")]
		[Address(RVA = "0x176AF10", Offset = "0x176AF10", VA = "0x176AF10")]
		private static extern RESULT FMOD5_Geometry_GetNumPolygons(IntPtr geometry, out int numpolygons);

		[PreserveSig]
		[Token(Token = "0x6000F4D")]
		[Address(RVA = "0x176AFC0", Offset = "0x176AFC0", VA = "0x176AFC0")]
		private static extern RESULT FMOD5_Geometry_GetMaxPolygons(IntPtr geometry, out int maxpolygons, out int maxvertices);

		[PreserveSig]
		[Token(Token = "0x6000F4E")]
		[Address(RVA = "0x176B078", Offset = "0x176B078", VA = "0x176B078")]
		private static extern RESULT FMOD5_Geometry_GetPolygonNumVertices(IntPtr geometry, int index, out int numvertices);

		[PreserveSig]
		[Token(Token = "0x6000F4F")]
		[Address(RVA = "0x176B148", Offset = "0x176B148", VA = "0x176B148")]
		private static extern RESULT FMOD5_Geometry_SetPolygonVertex(IntPtr geometry, int index, int vertexindex, ref VECTOR vertex);

		[PreserveSig]
		[Token(Token = "0x6000F50")]
		[Address(RVA = "0x176B220", Offset = "0x176B220", VA = "0x176B220")]
		private static extern RESULT FMOD5_Geometry_GetPolygonVertex(IntPtr geometry, int index, int vertexindex, out VECTOR vertex);

		[PreserveSig]
		[Token(Token = "0x6000F51")]
		[Address(RVA = "0x176B300", Offset = "0x176B300", VA = "0x176B300")]
		private static extern RESULT FMOD5_Geometry_SetPolygonAttributes(IntPtr geometry, int index, float directocclusion, float reverbocclusion, bool doublesided);

		[PreserveSig]
		[Token(Token = "0x6000F52")]
		[Address(RVA = "0x176B3E8", Offset = "0x176B3E8", VA = "0x176B3E8")]
		private static extern RESULT FMOD5_Geometry_GetPolygonAttributes(IntPtr geometry, int index, out float directocclusion, out float reverbocclusion, out bool doublesided);

		[PreserveSig]
		[Token(Token = "0x6000F53")]
		[Address(RVA = "0x176B4D0", Offset = "0x176B4D0", VA = "0x176B4D0")]
		private static extern RESULT FMOD5_Geometry_SetActive(IntPtr geometry, bool active);

		[PreserveSig]
		[Token(Token = "0x6000F54")]
		[Address(RVA = "0x176B580", Offset = "0x176B580", VA = "0x176B580")]
		private static extern RESULT FMOD5_Geometry_GetActive(IntPtr geometry, out bool active);

		[PreserveSig]
		[Token(Token = "0x6000F55")]
		[Address(RVA = "0x176B648", Offset = "0x176B648", VA = "0x176B648")]
		private static extern RESULT FMOD5_Geometry_SetRotation(IntPtr geometry, ref VECTOR forward, ref VECTOR up);

		[PreserveSig]
		[Token(Token = "0x6000F56")]
		[Address(RVA = "0x176B700", Offset = "0x176B700", VA = "0x176B700")]
		private static extern RESULT FMOD5_Geometry_GetRotation(IntPtr geometry, out VECTOR forward, out VECTOR up);

		[PreserveSig]
		[Token(Token = "0x6000F57")]
		[Address(RVA = "0x176B7B8", Offset = "0x176B7B8", VA = "0x176B7B8")]
		private static extern RESULT FMOD5_Geometry_SetPosition(IntPtr geometry, ref VECTOR position);

		[PreserveSig]
		[Token(Token = "0x6000F58")]
		[Address(RVA = "0x176B868", Offset = "0x176B868", VA = "0x176B868")]
		private static extern RESULT FMOD5_Geometry_GetPosition(IntPtr geometry, out VECTOR position);

		[PreserveSig]
		[Token(Token = "0x6000F59")]
		[Address(RVA = "0x176B918", Offset = "0x176B918", VA = "0x176B918")]
		private static extern RESULT FMOD5_Geometry_SetScale(IntPtr geometry, ref VECTOR scale);

		[PreserveSig]
		[Token(Token = "0x6000F5A")]
		[Address(RVA = "0x176B9C8", Offset = "0x176B9C8", VA = "0x176B9C8")]
		private static extern RESULT FMOD5_Geometry_GetScale(IntPtr geometry, out VECTOR scale);

		[PreserveSig]
		[Token(Token = "0x6000F5B")]
		[Address(RVA = "0x176BA78", Offset = "0x176BA78", VA = "0x176BA78")]
		private static extern RESULT FMOD5_Geometry_Save(IntPtr geometry, IntPtr data, out int datasize);

		[PreserveSig]
		[Token(Token = "0x6000F5C")]
		[Address(RVA = "0x176BB30", Offset = "0x176BB30", VA = "0x176BB30")]
		private static extern RESULT FMOD5_Geometry_SetUserData(IntPtr geometry, IntPtr userdata);

		[PreserveSig]
		[Token(Token = "0x6000F5D")]
		[Address(RVA = "0x176BBE0", Offset = "0x176BBE0", VA = "0x176BBE0")]
		private static extern RESULT FMOD5_Geometry_GetUserData(IntPtr geometry, out IntPtr userdata);

		[Token(Token = "0x6000F5E")]
		[Address(RVA = "0x487B48", Offset = "0x487B48", VA = "0x487B48")]
		public bool hasHandle()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F5F")]
		[Address(RVA = "0x487B50", Offset = "0x487B50", VA = "0x487B50")]
		public void clearHandle()
		{
		}
	}
	[Token(Token = "0x200022A")]
	public struct Reverb3D
	{
		[Token(Token = "0x4000C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Token(Token = "0x6000F60")]
		[Address(RVA = "0x487C54", Offset = "0x487C54", VA = "0x487C54")]
		public RESULT release()
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000F61")]
		[Address(RVA = "0x487C5C", Offset = "0x487C5C", VA = "0x487C5C")]
		public RESULT set3DAttributes(ref VECTOR position, float mindistance, float maxdistance)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000F62")]
		[Address(RVA = "0x487C78", Offset = "0x487C78", VA = "0x487C78")]
		public RESULT get3DAttributes(ref VECTOR position, ref float mindistance, ref float maxdistance)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000F63")]
		[Address(RVA = "0x487C94", Offset = "0x487C94", VA = "0x487C94")]
		public RESULT setProperties(ref REVERB_PROPERTIES properties)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000F64")]
		[Address(RVA = "0x487C9C", Offset = "0x487C9C", VA = "0x487C9C")]
		public RESULT getProperties(ref REVERB_PROPERTIES properties)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000F65")]
		[Address(RVA = "0x487CA4", Offset = "0x487CA4", VA = "0x487CA4")]
		public RESULT setActive(bool active)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000F66")]
		[Address(RVA = "0x487CAC", Offset = "0x487CAC", VA = "0x487CAC")]
		public RESULT getActive(out bool active)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000F67")]
		[Address(RVA = "0x487CB4", Offset = "0x487CB4", VA = "0x487CB4")]
		public RESULT setUserData(IntPtr userdata)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6000F68")]
		[Address(RVA = "0x487CBC", Offset = "0x487CBC", VA = "0x487CBC")]
		public RESULT getUserData(out IntPtr userdata)
		{
			return default(RESULT);
		}

		[PreserveSig]
		[Token(Token = "0x6000F69")]
		[Address(RVA = "0x176D498", Offset = "0x176D498", VA = "0x176D498")]
		private static extern RESULT FMOD5_Reverb3D_Release(IntPtr reverb);

		[PreserveSig]
		[Token(Token = "0x6000F6A")]
		[Address(RVA = "0x176D558", Offset = "0x176D558", VA = "0x176D558")]
		private static extern RESULT FMOD5_Reverb3D_Set3DAttributes(IntPtr reverb, ref VECTOR position, float mindistance, float maxdistance);

		[PreserveSig]
		[Token(Token = "0x6000F6B")]
		[Address(RVA = "0x176D630", Offset = "0x176D630", VA = "0x176D630")]
		private static extern RESULT FMOD5_Reverb3D_Get3DAttributes(IntPtr reverb, ref VECTOR position, ref float mindistance, ref float maxdistance);

		[PreserveSig]
		[Token(Token = "0x6000F6C")]
		[Address(RVA = "0x176D6F0", Offset = "0x176D6F0", VA = "0x176D6F0")]
		private static extern RESULT FMOD5_Reverb3D_SetProperties(IntPtr reverb, ref REVERB_PROPERTIES properties);

		[PreserveSig]
		[Token(Token = "0x6000F6D")]
		[Address(RVA = "0x176D7A0", Offset = "0x176D7A0", VA = "0x176D7A0")]
		private static extern RESULT FMOD5_Reverb3D_GetProperties(IntPtr reverb, ref REVERB_PROPERTIES properties);

		[PreserveSig]
		[Token(Token = "0x6000F6E")]
		[Address(RVA = "0x176D850", Offset = "0x176D850", VA = "0x176D850")]
		private static extern RESULT FMOD5_Reverb3D_SetActive(IntPtr reverb, bool active);

		[PreserveSig]
		[Token(Token = "0x6000F6F")]
		[Address(RVA = "0x176D900", Offset = "0x176D900", VA = "0x176D900")]
		private static extern RESULT FMOD5_Reverb3D_GetActive(IntPtr reverb, out bool active);

		[PreserveSig]
		[Token(Token = "0x6000F70")]
		[Address(RVA = "0x176D9C8", Offset = "0x176D9C8", VA = "0x176D9C8")]
		private static extern RESULT FMOD5_Reverb3D_SetUserData(IntPtr reverb, IntPtr userdata);

		[PreserveSig]
		[Token(Token = "0x6000F71")]
		[Address(RVA = "0x176DA78", Offset = "0x176DA78", VA = "0x176DA78")]
		private static extern RESULT FMOD5_Reverb3D_GetUserData(IntPtr reverb, out IntPtr userdata);

		[Token(Token = "0x6000F72")]
		[Address(RVA = "0x487CC4", Offset = "0x487CC4", VA = "0x487CC4")]
		public bool hasHandle()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F73")]
		[Address(RVA = "0x487CCC", Offset = "0x487CCC", VA = "0x487CCC")]
		public void clearHandle()
		{
		}
	}
	[Token(Token = "0x200022B")]
	public struct StringWrapper
	{
		[Token(Token = "0x4000C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IntPtr nativeUtf8Ptr;

		[Token(Token = "0x6000F74")]
		[Address(RVA = "0x167E760", Offset = "0x167E760", VA = "0x167E760")]
		public static implicit operator string(StringWrapper fstring)
		{
			return null;
		}
	}
	[Token(Token = "0x200022C")]
	internal static class StringHelper
	{
		[Token(Token = "0x2000366")]
		public class ThreadSafeEncoding : IDisposable
		{
			[Token(Token = "0x40013B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private UTF8Encoding encoding;

			[Token(Token = "0x40013B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private byte[] buffer;

			[Token(Token = "0x40013B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private bool inUse;

			[Token(Token = "0x60016AC")]
			[Address(RVA = "0x167E498", Offset = "0x167E498", VA = "0x167E498")]
			public bool InUse()
			{
				return default(bool);
			}

			[Token(Token = "0x60016AD")]
			[Address(RVA = "0x167E400", Offset = "0x167E400", VA = "0x167E400")]
			public void SetInUse()
			{
			}

			[Token(Token = "0x60016AE")]
			[Address(RVA = "0x167E4A0", Offset = "0x167E4A0", VA = "0x167E4A0")]
			public byte[] byteFromStringUTF8(string s)
			{
				return null;
			}

			[Token(Token = "0x60016AF")]
			[Address(RVA = "0x167DDAC", Offset = "0x167DDAC", VA = "0x167DDAC")]
			public string stringFromNative(IntPtr nativePtr)
			{
				return null;
			}

			[Token(Token = "0x60016B0")]
			[Address(RVA = "0x167E660", Offset = "0x167E660", VA = "0x167E660", Slot = "4")]
			public void Dispose()
			{
			}

			[Token(Token = "0x60016B1")]
			[Address(RVA = "0x167E370", Offset = "0x167E370", VA = "0x167E370")]
			public ThreadSafeEncoding()
			{
			}
		}

		[Token(Token = "0x4000C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<ThreadSafeEncoding> encoders;

		[Token(Token = "0x6000F75")]
		[Address(RVA = "0x167DAD8", Offset = "0x167DAD8", VA = "0x167DAD8")]
		public static ThreadSafeEncoding GetFreeHelper()
		{
			return null;
		}
	}
	[Token(Token = "0x200022D")]
	public struct DSP_BUFFER_ARRAY
	{
		[Token(Token = "0x4000C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int numbuffers;

		[Token(Token = "0x4000C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int[] buffernumchannels;

		[Token(Token = "0x4000C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CHANNELMASK[] bufferchannelmask;

		[Token(Token = "0x4000C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public IntPtr[] buffers;

		[Token(Token = "0x4000C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SPEAKERMODE speakermode;
	}
	[Token(Token = "0x200022E")]
	public enum DSP_PROCESS_OPERATION
	{
		[Token(Token = "0x4000C6C")]
		PROCESS_PERFORM,
		[Token(Token = "0x4000C6D")]
		PROCESS_QUERY
	}
	[Token(Token = "0x200022F")]
	public struct COMPLEX
	{
		[Token(Token = "0x4000C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float real;

		[Token(Token = "0x4000C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float imag;
	}
	[Token(Token = "0x2000230")]
	public enum DSP_PAN_SURROUND_FLAGS
	{
		[Token(Token = "0x4000C71")]
		DEFAULT,
		[Token(Token = "0x4000C72")]
		ROTATION_NOT_BIASED
	}
	[Token(Token = "0x2000231")]
	public delegate RESULT DSP_CREATECALLBACK(ref DSP_STATE dsp_state);
	[Token(Token = "0x2000232")]
	public delegate RESULT DSP_RELEASECALLBACK(ref DSP_STATE dsp_state);
	[Token(Token = "0x2000233")]
	public delegate RESULT DSP_RESETCALLBACK(ref DSP_STATE dsp_state);
	[Token(Token = "0x2000234")]
	public delegate RESULT DSP_SETPOSITIONCALLBACK(ref DSP_STATE dsp_state, uint pos);
	[Token(Token = "0x2000235")]
	public delegate RESULT DSP_READCALLBACK(ref DSP_STATE dsp_state, IntPtr inbuffer, IntPtr outbuffer, uint length, int inchannels, ref int outchannels);
	[Token(Token = "0x2000236")]
	public delegate RESULT DSP_SHOULDIPROCESS_CALLBACK(ref DSP_STATE dsp_state, bool inputsidle, uint length, CHANNELMASK inmask, int inchannels, SPEAKERMODE speakermode);
	[Token(Token = "0x2000237")]
	public delegate RESULT DSP_PROCESS_CALLBACK(ref DSP_STATE dsp_state, uint length, ref DSP_BUFFER_ARRAY inbufferarray, ref DSP_BUFFER_ARRAY outbufferarray, bool inputsidle, DSP_PROCESS_OPERATION op);
	[Token(Token = "0x2000238")]
	public delegate RESULT DSP_SETPARAM_FLOAT_CALLBACK(ref DSP_STATE dsp_state, int index, float value);
	[Token(Token = "0x2000239")]
	public delegate RESULT DSP_SETPARAM_INT_CALLBACK(ref DSP_STATE dsp_state, int index, int value);
	[Token(Token = "0x200023A")]
	public delegate RESULT DSP_SETPARAM_BOOL_CALLBACK(ref DSP_STATE dsp_state, int index, bool value);
	[Token(Token = "0x200023B")]
	public delegate RESULT DSP_SETPARAM_DATA_CALLBACK(ref DSP_STATE dsp_state, int index, IntPtr data, uint length);
	[Token(Token = "0x200023C")]
	public delegate RESULT DSP_GETPARAM_FLOAT_CALLBACK(ref DSP_STATE dsp_state, int index, ref float value, IntPtr valuestr);
	[Token(Token = "0x200023D")]
	public delegate RESULT DSP_GETPARAM_INT_CALLBACK(ref DSP_STATE dsp_state, int index, ref int value, IntPtr valuestr);
	[Token(Token = "0x200023E")]
	public delegate RESULT DSP_GETPARAM_BOOL_CALLBACK(ref DSP_STATE dsp_state, int index, ref bool value, IntPtr valuestr);
	[Token(Token = "0x200023F")]
	public delegate RESULT DSP_GETPARAM_DATA_CALLBACK(ref DSP_STATE dsp_state, int index, ref IntPtr data, ref uint length, IntPtr valuestr);
	[Token(Token = "0x2000240")]
	public delegate RESULT DSP_SYSTEM_REGISTER_CALLBACK(ref DSP_STATE dsp_state);
	[Token(Token = "0x2000241")]
	public delegate RESULT DSP_SYSTEM_DEREGISTER_CALLBACK(ref DSP_STATE dsp_state);
	[Token(Token = "0x2000242")]
	public delegate RESULT DSP_SYSTEM_MIX_CALLBACK(ref DSP_STATE dsp_state, int stage);
	[Token(Token = "0x2000243")]
	public delegate IntPtr DSP_ALLOC_FUNC(uint size, MEMORY_TYPE type, StringWrapper sourcestr);
	[Token(Token = "0x2000244")]
	public delegate IntPtr DSP_REALLOC_FUNC(IntPtr ptr, uint size, MEMORY_TYPE type, StringWrapper sourcestr);
	[Token(Token = "0x2000245")]
	public delegate void DSP_FREE_FUNC(IntPtr ptr, MEMORY_TYPE type, StringWrapper sourcestr);
	[Token(Token = "0x2000246")]
	public delegate void DSP_LOG_FUNC(DEBUG_FLAGS level, StringWrapper file, int line, StringWrapper function, StringWrapper format);
	[Token(Token = "0x2000247")]
	public delegate RESULT DSP_GETSAMPLERATE_FUNC(ref DSP_STATE dsp_state, ref int rate);
	[Token(Token = "0x2000248")]
	public delegate RESULT DSP_GETBLOCKSIZE_FUNC(ref DSP_STATE dsp_state, ref uint blocksize);
	[Token(Token = "0x2000249")]
	public delegate RESULT DSP_GETSPEAKERMODE_FUNC(ref DSP_STATE dsp_state, ref int speakermode_mixer, ref int speakermode_output);
	[Token(Token = "0x200024A")]
	public delegate RESULT DSP_GETCLOCK_FUNC(ref DSP_STATE dsp_state, out ulong clock, out uint offset, out uint length);
	[Token(Token = "0x200024B")]
	public delegate RESULT DSP_GETLISTENERATTRIBUTES_FUNC(ref DSP_STATE dsp_state, ref int numlisteners, IntPtr attributes);
	[Token(Token = "0x200024C")]
	public delegate RESULT DSP_GETUSERDATA_FUNC(ref DSP_STATE dsp_state, out IntPtr userdata);
	[Token(Token = "0x200024D")]
	public delegate RESULT DSP_DFT_FFTREAL_FUNC(ref DSP_STATE dsp_state, int size, IntPtr signal, IntPtr dft, IntPtr window, int signalhop);
	[Token(Token = "0x200024E")]
	public delegate RESULT DSP_DFT_IFFTREAL_FUNC(ref DSP_STATE dsp_state, int size, IntPtr dft, IntPtr signal, IntPtr window, int signalhop);
	[Token(Token = "0x200024F")]
	public delegate RESULT DSP_PAN_SUMMONOMATRIX_FUNC(ref DSP_STATE dsp_state, int sourceSpeakerMode, float lowFrequencyGain, float overallGain, IntPtr matrix);
	[Token(Token = "0x2000250")]
	public delegate RESULT DSP_PAN_SUMSTEREOMATRIX_FUNC(ref DSP_STATE dsp_state, int sourceSpeakerMode, float pan, float lowFrequencyGain, float overallGain, int matrixHop, IntPtr matrix);
	[Token(Token = "0x2000251")]
	public delegate RESULT DSP_PAN_SUMSURROUNDMATRIX_FUNC(ref DSP_STATE dsp_state, int sourceSpeakerMode, int targetSpeakerMode, float direction, float extent, float rotation, float lowFrequencyGain, float overallGain, int matrixHop, IntPtr matrix, DSP_PAN_SURROUND_FLAGS flags);
	[Token(Token = "0x2000252")]
	public delegate RESULT DSP_PAN_SUMMONOTOSURROUNDMATRIX_FUNC(ref DSP_STATE dsp_state, int targetSpeakerMode, float direction, float extent, float lowFrequencyGain, float overallGain, int matrixHop, IntPtr matrix);
	[Token(Token = "0x2000253")]
	public delegate RESULT DSP_PAN_SUMSTEREOTOSURROUNDMATRIX_FUNC(ref DSP_STATE dsp_state, int targetSpeakerMode, float direction, float extent, float rotation, float lowFrequencyGain, float overallGain, int matrixHop, IntPtr matrix);
	[Token(Token = "0x2000254")]
	public delegate RESULT DSP_PAN_GETROLLOFFGAIN_FUNC(ref DSP_STATE dsp_state, DSP_PAN_3D_ROLLOFF_TYPE rolloff, float distance, float mindistance, float maxdistance, out float gain);
	[Token(Token = "0x2000255")]
	public enum DSP_TYPE
	{
		[Token(Token = "0x4000C74")]
		UNKNOWN,
		[Token(Token = "0x4000C75")]
		MIXER,
		[Token(Token = "0x4000C76")]
		OSCILLATOR,
		[Token(Token = "0x4000C77")]
		LOWPASS,
		[Token(Token = "0x4000C78")]
		ITLOWPASS,
		[Token(Token = "0x4000C79")]
		HIGHPASS,
		[Token(Token = "0x4000C7A")]
		ECHO,
		[Token(Token = "0x4000C7B")]
		FADER,
		[Token(Token = "0x4000C7C")]
		FLANGE,
		[Token(Token = "0x4000C7D")]
		DISTORTION,
		[Token(Token = "0x4000C7E")]
		NORMALIZE,
		[Token(Token = "0x4000C7F")]
		LIMITER,
		[Token(Token = "0x4000C80")]
		PARAMEQ,
		[Token(Token = "0x4000C81")]
		PITCHSHIFT,
		[Token(Token = "0x4000C82")]
		CHORUS,
		[Token(Token = "0x4000C83")]
		VSTPLUGIN,
		[Token(Token = "0x4000C84")]
		WINAMPPLUGIN,
		[Token(Token = "0x4000C85")]
		ITECHO,
		[Token(Token = "0x4000C86")]
		COMPRESSOR,
		[Token(Token = "0x4000C87")]
		SFXREVERB,
		[Token(Token = "0x4000C88")]
		LOWPASS_SIMPLE,
		[Token(Token = "0x4000C89")]
		DELAY,
		[Token(Token = "0x4000C8A")]
		TREMOLO,
		[Token(Token = "0x4000C8B")]
		LADSPAPLUGIN,
		[Token(Token = "0x4000C8C")]
		SEND,
		[Token(Token = "0x4000C8D")]
		RETURN,
		[Token(Token = "0x4000C8E")]
		HIGHPASS_SIMPLE,
		[Token(Token = "0x4000C8F")]
		PAN,
		[Token(Token = "0x4000C90")]
		THREE_EQ,
		[Token(Token = "0x4000C91")]
		FFT,
		[Token(Token = "0x4000C92")]
		LOUDNESS_METER,
		[Token(Token = "0x4000C93")]
		ENVELOPEFOLLOWER,
		[Token(Token = "0x4000C94")]
		CONVOLUTIONREVERB,
		[Token(Token = "0x4000C95")]
		CHANNELMIX,
		[Token(Token = "0x4000C96")]
		TRANSCEIVER,
		[Token(Token = "0x4000C97")]
		OBJECTPAN,
		[Token(Token = "0x4000C98")]
		MULTIBAND_EQ
	}
	[Token(Token = "0x2000256")]
	public enum DSP_PARAMETER_TYPE
	{
		[Token(Token = "0x4000C9A")]
		FLOAT,
		[Token(Token = "0x4000C9B")]
		INT,
		[Token(Token = "0x4000C9C")]
		BOOL,
		[Token(Token = "0x4000C9D")]
		DATA
	}
	[Token(Token = "0x2000257")]
	public enum DSP_PARAMETER_FLOAT_MAPPING_TYPE
	{
		[Token(Token = "0x4000C9F")]
		DSP_PARAMETER_FLOAT_MAPPING_TYPE_LINEAR,
		[Token(Token = "0x4000CA0")]
		DSP_PARAMETER_FLOAT_MAPPING_TYPE_AUTO,
		[Token(Token = "0x4000CA1")]
		DSP_PARAMETER_FLOAT_MAPPING_TYPE_PIECEWISE_LINEAR
	}
	[Token(Token = "0x2000258")]
	public struct DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR
	{
		[Token(Token = "0x4000CA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int numpoints;

		[Token(Token = "0x4000CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public IntPtr pointparamvalues;

		[Token(Token = "0x4000CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr pointpositions;
	}
	[Token(Token = "0x2000259")]
	public struct DSP_PARAMETER_FLOAT_MAPPING
	{
		[Token(Token = "0x4000CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public DSP_PARAMETER_FLOAT_MAPPING_TYPE type;

		[Token(Token = "0x4000CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR piecewiselinearmapping;
	}
	[Token(Token = "0x200025A")]
	public struct DSP_PARAMETER_DESC_FLOAT
	{
		[Token(Token = "0x4000CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float min;

		[Token(Token = "0x4000CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float max;

		[Token(Token = "0x4000CA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float defaultval;

		[Token(Token = "0x4000CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public DSP_PARAMETER_FLOAT_MAPPING mapping;
	}
	[Token(Token = "0x200025B")]
	public struct DSP_PARAMETER_DESC_INT
	{
		[Token(Token = "0x4000CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int min;

		[Token(Token = "0x4000CAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int max;

		[Token(Token = "0x4000CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int defaultval;

		[Token(Token = "0x4000CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool goestoinf;

		[Token(Token = "0x4000CAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntPtr valuenames;
	}
	[Token(Token = "0x200025C")]
	public struct DSP_PARAMETER_DESC_BOOL
	{
		[Token(Token = "0x4000CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool defaultval;

		[Token(Token = "0x4000CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public IntPtr valuenames;
	}
	[Token(Token = "0x200025D")]
	public struct DSP_PARAMETER_DESC_DATA
	{
		[Token(Token = "0x4000CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int datatype;
	}
	[StructLayout(2)]
	[Token(Token = "0x200025E")]
	public struct DSP_PARAMETER_DESC_UNION
	{
		[Token(Token = "0x4000CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public DSP_PARAMETER_DESC_FLOAT floatdesc;

		[Token(Token = "0x4000CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public DSP_PARAMETER_DESC_INT intdesc;

		[Token(Token = "0x4000CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public DSP_PARAMETER_DESC_BOOL booldesc;

		[Token(Token = "0x4000CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public DSP_PARAMETER_DESC_DATA datadesc;
	}
	[Token(Token = "0x200025F")]
	public struct DSP_PARAMETER_DESC
	{
		[Token(Token = "0x4000CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public DSP_PARAMETER_TYPE type;

		[Token(Token = "0x4000CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public char[] name;

		[Token(Token = "0x4000CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public char[] label;

		[Token(Token = "0x4000CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string description;

		[Token(Token = "0x4000CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public DSP_PARAMETER_DESC_UNION desc;
	}
	[Token(Token = "0x2000260")]
	public enum DSP_PARAMETER_DATA_TYPE
	{
		[Token(Token = "0x4000CBD")]
		DSP_PARAMETER_DATA_TYPE_USER = 0,
		[Token(Token = "0x4000CBE")]
		DSP_PARAMETER_DATA_TYPE_OVERALLGAIN = -1,
		[Token(Token = "0x4000CBF")]
		DSP_PARAMETER_DATA_TYPE_3DATTRIBUTES = -2,
		[Token(Token = "0x4000CC0")]
		DSP_PARAMETER_DATA_TYPE_SIDECHAIN = -3,
		[Token(Token = "0x4000CC1")]
		DSP_PARAMETER_DATA_TYPE_FFT = -4,
		[Token(Token = "0x4000CC2")]
		DSP_PARAMETER_DATA_TYPE_3DATTRIBUTES_MULTI = -5
	}
	[Token(Token = "0x2000261")]
	public struct DSP_PARAMETER_OVERALLGAIN
	{
		[Token(Token = "0x4000CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float linear_gain;

		[Token(Token = "0x4000CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float linear_gain_additive;
	}
	[Token(Token = "0x2000262")]
	public struct DSP_PARAMETER_3DATTRIBUTES
	{
		[Token(Token = "0x4000CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ATTRIBUTES_3D relative;

		[Token(Token = "0x4000CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ATTRIBUTES_3D absolute;
	}
	[Token(Token = "0x2000263")]
	public struct DSP_PARAMETER_3DATTRIBUTES_MULTI
	{
		[Token(Token = "0x4000CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int numlisteners;

		[Token(Token = "0x4000CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ATTRIBUTES_3D[] relative;

		[Token(Token = "0x4000CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float[] weight;

		[Token(Token = "0x4000CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public ATTRIBUTES_3D absolute;
	}
	[Token(Token = "0x2000264")]
	public struct DSP_PARAMETER_SIDECHAIN
	{
		[Token(Token = "0x4000CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int sidechainenable;
	}
	[Token(Token = "0x2000265")]
	public struct DSP_PARAMETER_FFT
	{
		[Token(Token = "0x4000CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int length;

		[Token(Token = "0x4000CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int numchannels;

		[Token(Token = "0x4000CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IntPtr[] spectrum_internal;

		[Token(Token = "0x170000CB")]
		public float[][] spectrum
		{
			[Token(Token = "0x6001007")]
			[Address(RVA = "0x487288", Offset = "0x487288", VA = "0x487288")]
			get
			{
				return null;
			}
		}
	}
	[Token(Token = "0x2000266")]
	public struct DSP_DESCRIPTION
	{
		[Token(Token = "0x4000CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint pluginsdkversion;

		[Token(Token = "0x4000CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public char[] name;

		[Token(Token = "0x4000CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint version;

		[Token(Token = "0x4000CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int numinputbuffers;

		[Token(Token = "0x4000CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int numoutputbuffers;

		[Token(Token = "0x4000CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public DSP_CREATECALLBACK create;

		[Token(Token = "0x4000CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DSP_RELEASECALLBACK release;

		[Token(Token = "0x4000CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public DSP_RESETCALLBACK reset;

		[Token(Token = "0x4000CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DSP_READCALLBACK read;

		[Token(Token = "0x4000CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public DSP_PROCESS_CALLBACK process;

		[Token(Token = "0x4000CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public DSP_SETPOSITIONCALLBACK setposition;

		[Token(Token = "0x4000CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int numparameters;

		[Token(Token = "0x4000CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IntPtr paramdesc;

		[Token(Token = "0x4000CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public DSP_SETPARAM_FLOAT_CALLBACK setparameterfloat;

		[Token(Token = "0x4000CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public DSP_SETPARAM_INT_CALLBACK setparameterint;

		[Token(Token = "0x4000CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public DSP_SETPARAM_BOOL_CALLBACK setparameterbool;

		[Token(Token = "0x4000CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public DSP_SETPARAM_DATA_CALLBACK setparameterdata;

		[Token(Token = "0x4000CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public DSP_GETPARAM_FLOAT_CALLBACK getparameterfloat;

		[Token(Token = "0x4000CE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public DSP_GETPARAM_INT_CALLBACK getparameterint;

		[Token(Token = "0x4000CE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public DSP_GETPARAM_BOOL_CALLBACK getparameterbool;

		[Token(Token = "0x4000CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public DSP_GETPARAM_DATA_CALLBACK getparameterdata;

		[Token(Token = "0x4000CE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public DSP_SHOULDIPROCESS_CALLBACK shouldiprocess;

		[Token(Token = "0x4000CE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public IntPtr userdata;

		[Token(Token = "0x4000CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public DSP_SYSTEM_REGISTER_CALLBACK sys_register;

		[Token(Token = "0x4000CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public DSP_SYSTEM_DEREGISTER_CALLBACK sys_deregister;

		[Token(Token = "0x4000CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public DSP_SYSTEM_MIX_CALLBACK sys_mix;
	}
	[Token(Token = "0x2000267")]
	public struct DSP_STATE_DFT_FUNCTIONS
	{
		[Token(Token = "0x4000CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public DSP_DFT_FFTREAL_FUNC fftreal;

		[Token(Token = "0x4000CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public DSP_DFT_IFFTREAL_FUNC inversefftreal;
	}
	[Token(Token = "0x2000268")]
	public struct DSP_STATE_PAN_FUNCTIONS
	{
		[Token(Token = "0x4000CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public DSP_PAN_SUMMONOMATRIX_FUNC summonomatrix;

		[Token(Token = "0x4000CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public DSP_PAN_SUMSTEREOMATRIX_FUNC sumstereomatrix;

		[Token(Token = "0x4000CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public DSP_PAN_SUMSURROUNDMATRIX_FUNC sumsurroundmatrix;

		[Token(Token = "0x4000CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public DSP_PAN_SUMMONOTOSURROUNDMATRIX_FUNC summonotosurroundmatrix;

		[Token(Token = "0x4000CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public DSP_PAN_SUMSTEREOTOSURROUNDMATRIX_FUNC sumstereotosurroundmatrix;

		[Token(Token = "0x4000CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public DSP_PAN_GETROLLOFFGAIN_FUNC getrolloffgain;
	}
	[Token(Token = "0x2000269")]
	public struct DSP_STATE_FUNCTIONS
	{
		[Token(Token = "0x4000CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private DSP_ALLOC_FUNC alloc;

		[Token(Token = "0x4000CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private DSP_REALLOC_FUNC realloc;

		[Token(Token = "0x4000CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private DSP_FREE_FUNC free;

		[Token(Token = "0x4000CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private DSP_GETSAMPLERATE_FUNC getsamplerate;

		[Token(Token = "0x4000CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private DSP_GETBLOCKSIZE_FUNC getblocksize;

		[Token(Token = "0x4000CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private IntPtr dft;

		[Token(Token = "0x4000CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IntPtr pan;

		[Token(Token = "0x4000CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private DSP_GETSPEAKERMODE_FUNC getspeakermode;

		[Token(Token = "0x4000CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private DSP_GETCLOCK_FUNC getclock;

		[Token(Token = "0x4000CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private DSP_GETLISTENERATTRIBUTES_FUNC getlistenerattributes;

		[Token(Token = "0x4000CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private DSP_LOG_FUNC log;

		[Token(Token = "0x4000CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private DSP_GETUSERDATA_FUNC getuserdata;
	}
	[Token(Token = "0x200026A")]
	public struct DSP_STATE
	{
		[Token(Token = "0x4000CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr instance;

		[Token(Token = "0x4000CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public IntPtr plugindata;

		[Token(Token = "0x4000CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint channelmask;

		[Token(Token = "0x4000D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int source_speakermode;

		[Token(Token = "0x4000D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntPtr sidechaindata;

		[Token(Token = "0x4000D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int sidechainchannels;

		[Token(Token = "0x4000D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IntPtr functions;

		[Token(Token = "0x4000D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int systemobject;
	}
	[Token(Token = "0x200026B")]
	public struct DSP_METERING_INFO
	{
		[Token(Token = "0x4000D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int numsamples;

		[Token(Token = "0x4000D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float[] peaklevel;

		[Token(Token = "0x4000D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float[] rmslevel;

		[Token(Token = "0x4000D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public short numchannels;
	}
	[Token(Token = "0x200026C")]
	public enum DSP_OSCILLATOR
	{
		[Token(Token = "0x4000D0A")]
		TYPE,
		[Token(Token = "0x4000D0B")]
		RATE
	}
	[Token(Token = "0x200026D")]
	public enum DSP_LOWPASS
	{
		[Token(Token = "0x4000D0D")]
		CUTOFF,
		[Token(Token = "0x4000D0E")]
		RESONANCE
	}
	[Token(Token = "0x200026E")]
	public enum DSP_ITLOWPASS
	{
		[Token(Token = "0x4000D10")]
		CUTOFF,
		[Token(Token = "0x4000D11")]
		RESONANCE
	}
	[Token(Token = "0x200026F")]
	public enum DSP_HIGHPASS
	{
		[Token(Token = "0x4000D13")]
		CUTOFF,
		[Token(Token = "0x4000D14")]
		RESONANCE
	}
	[Token(Token = "0x2000270")]
	public enum DSP_ECHO
	{
		[Token(Token = "0x4000D16")]
		DELAY,
		[Token(Token = "0x4000D17")]
		FEEDBACK,
		[Token(Token = "0x4000D18")]
		DRYLEVEL,
		[Token(Token = "0x4000D19")]
		WETLEVEL
	}
	[Token(Token = "0x2000271")]
	public enum DSP_FADER
	{
		[Token(Token = "0x4000D1B")]
		GAIN
	}
	[Token(Token = "0x2000272")]
	public enum DSP_DELAY
	{
		[Token(Token = "0x4000D1D")]
		CH0,
		[Token(Token = "0x4000D1E")]
		CH1,
		[Token(Token = "0x4000D1F")]
		CH2,
		[Token(Token = "0x4000D20")]
		CH3,
		[Token(Token = "0x4000D21")]
		CH4,
		[Token(Token = "0x4000D22")]
		CH5,
		[Token(Token = "0x4000D23")]
		CH6,
		[Token(Token = "0x4000D24")]
		CH7,
		[Token(Token = "0x4000D25")]
		CH8,
		[Token(Token = "0x4000D26")]
		CH9,
		[Token(Token = "0x4000D27")]
		CH10,
		[Token(Token = "0x4000D28")]
		CH11,
		[Token(Token = "0x4000D29")]
		CH12,
		[Token(Token = "0x4000D2A")]
		CH13,
		[Token(Token = "0x4000D2B")]
		CH14,
		[Token(Token = "0x4000D2C")]
		CH15,
		[Token(Token = "0x4000D2D")]
		MAXDELAY
	}
	[Token(Token = "0x2000273")]
	public enum DSP_FLANGE
	{
		[Token(Token = "0x4000D2F")]
		MIX,
		[Token(Token = "0x4000D30")]
		DEPTH,
		[Token(Token = "0x4000D31")]
		RATE
	}
	[Token(Token = "0x2000274")]
	public enum DSP_TREMOLO
	{
		[Token(Token = "0x4000D33")]
		FREQUENCY,
		[Token(Token = "0x4000D34")]
		DEPTH,
		[Token(Token = "0x4000D35")]
		SHAPE,
		[Token(Token = "0x4000D36")]
		SKEW,
		[Token(Token = "0x4000D37")]
		DUTY,
		[Token(Token = "0x4000D38")]
		SQUARE,
		[Token(Token = "0x4000D39")]
		PHASE,
		[Token(Token = "0x4000D3A")]
		SPREAD
	}
	[Token(Token = "0x2000275")]
	public enum DSP_DISTORTION
	{
		[Token(Token = "0x4000D3C")]
		LEVEL
	}
	[Token(Token = "0x2000276")]
	public enum DSP_NORMALIZE
	{
		[Token(Token = "0x4000D3E")]
		FADETIME,
		[Token(Token = "0x4000D3F")]
		THRESHHOLD,
		[Token(Token = "0x4000D40")]
		MAXAMP
	}
	[Token(Token = "0x2000277")]
	public enum DSP_LIMITER
	{
		[Token(Token = "0x4000D42")]
		RELEASETIME,
		[Token(Token = "0x4000D43")]
		CEILING,
		[Token(Token = "0x4000D44")]
		MAXIMIZERGAIN,
		[Token(Token = "0x4000D45")]
		MODE
	}
	[Token(Token = "0x2000278")]
	public enum DSP_PARAMEQ
	{
		[Token(Token = "0x4000D47")]
		CENTER,
		[Token(Token = "0x4000D48")]
		BANDWIDTH,
		[Token(Token = "0x4000D49")]
		GAIN
	}
	[Token(Token = "0x2000279")]
	public enum DSP_MULTIBAND_EQ
	{
		[Token(Token = "0x4000D4B")]
		A_FILTER,
		[Token(Token = "0x4000D4C")]
		A_FREQUENCY,
		[Token(Token = "0x4000D4D")]
		A_Q,
		[Token(Token = "0x4000D4E")]
		A_GAIN,
		[Token(Token = "0x4000D4F")]
		B_FILTER,
		[Token(Token = "0x4000D50")]
		B_FREQUENCY,
		[Token(Token = "0x4000D51")]
		B_Q,
		[Token(Token = "0x4000D52")]
		B_GAIN,
		[Token(Token = "0x4000D53")]
		C_FILTER,
		[Token(Token = "0x4000D54")]
		C_FREQUENCY,
		[Token(Token = "0x4000D55")]
		C_Q,
		[Token(Token = "0x4000D56")]
		C_GAIN,
		[Token(Token = "0x4000D57")]
		D_FILTER,
		[Token(Token = "0x4000D58")]
		D_FREQUENCY,
		[Token(Token = "0x4000D59")]
		D_Q,
		[Token(Token = "0x4000D5A")]
		D_GAIN,
		[Token(Token = "0x4000D5B")]
		E_FILTER,
		[Token(Token = "0x4000D5C")]
		E_FREQUENCY,
		[Token(Token = "0x4000D5D")]
		E_Q,
		[Token(Token = "0x4000D5E")]
		E_GAIN
	}
	[Token(Token = "0x200027A")]
	public enum DSP_MULTIBAND_EQ_FILTER_TYPE
	{
		[Token(Token = "0x4000D60")]
		DISABLED,
		[Token(Token = "0x4000D61")]
		LOWPASS_12DB,
		[Token(Token = "0x4000D62")]
		LOWPASS_24DB,
		[Token(Token = "0x4000D63")]
		LOWPASS_48DB,
		[Token(Token = "0x4000D64")]
		HIGHPASS_12DB,
		[Token(Token = "0x4000D65")]
		HIGHPASS_24DB,
		[Token(Token = "0x4000D66")]
		HIGHPASS_48DB,
		[Token(Token = "0x4000D67")]
		LOWSHELF,
		[Token(Token = "0x4000D68")]
		HIGHSHELF,
		[Token(Token = "0x4000D69")]
		PEAKING,
		[Token(Token = "0x4000D6A")]
		BANDPASS,
		[Token(Token = "0x4000D6B")]
		NOTCH,
		[Token(Token = "0x4000D6C")]
		ALLPASS
	}
	[Token(Token = "0x200027B")]
	public enum DSP_PITCHSHIFT
	{
		[Token(Token = "0x4000D6E")]
		PITCH,
		[Token(Token = "0x4000D6F")]
		FFTSIZE,
		[Token(Token = "0x4000D70")]
		OVERLAP,
		[Token(Token = "0x4000D71")]
		MAXCHANNELS
	}
	[Token(Token = "0x200027C")]
	public enum DSP_CHORUS
	{
		[Token(Token = "0x4000D73")]
		MIX,
		[Token(Token = "0x4000D74")]
		RATE,
		[Token(Token = "0x4000D75")]
		DEPTH
	}
	[Token(Token = "0x200027D")]
	public enum DSP_ITECHO
	{
		[Token(Token = "0x4000D77")]
		WETDRYMIX,
		[Token(Token = "0x4000D78")]
		FEEDBACK,
		[Token(Token = "0x4000D79")]
		LEFTDELAY,
		[Token(Token = "0x4000D7A")]
		RIGHTDELAY,
		[Token(Token = "0x4000D7B")]
		PANDELAY
	}
	[Token(Token = "0x200027E")]
	public enum DSP_COMPRESSOR
	{
		[Token(Token = "0x4000D7D")]
		THRESHOLD,
		[Token(Token = "0x4000D7E")]
		RATIO,
		[Token(Token = "0x4000D7F")]
		ATTACK,
		[Token(Token = "0x4000D80")]
		RELEASE,
		[Token(Token = "0x4000D81")]
		GAINMAKEUP,
		[Token(Token = "0x4000D82")]
		USESIDECHAIN,
		[Token(Token = "0x4000D83")]
		LINKED
	}
	[Token(Token = "0x200027F")]
	public enum DSP_SFXREVERB
	{
		[Token(Token = "0x4000D85")]
		DECAYTIME,
		[Token(Token = "0x4000D86")]
		EARLYDELAY,
		[Token(Token = "0x4000D87")]
		LATEDELAY,
		[Token(Token = "0x4000D88")]
		HFREFERENCE,
		[Token(Token = "0x4000D89")]
		HFDECAYRATIO,
		[Token(Token = "0x4000D8A")]
		DIFFUSION,
		[Token(Token = "0x4000D8B")]
		DENSITY,
		[Token(Token = "0x4000D8C")]
		LOWSHELFFREQUENCY,
		[Token(Token = "0x4000D8D")]
		LOWSHELFGAIN,
		[Token(Token = "0x4000D8E")]
		HIGHCUT,
		[Token(Token = "0x4000D8F")]
		EARLYLATEMIX,
		[Token(Token = "0x4000D90")]
		WETLEVEL,
		[Token(Token = "0x4000D91")]
		DRYLEVEL
	}
	[Token(Token = "0x2000280")]
	public enum DSP_LOWPASS_SIMPLE
	{
		[Token(Token = "0x4000D93")]
		CUTOFF
	}
	[Token(Token = "0x2000281")]
	public enum DSP_SEND
	{
		[Token(Token = "0x4000D95")]
		RETURNID,
		[Token(Token = "0x4000D96")]
		LEVEL
	}
	[Token(Token = "0x2000282")]
	public enum DSP_RETURN
	{
		[Token(Token = "0x4000D98")]
		ID,
		[Token(Token = "0x4000D99")]
		INPUT_SPEAKER_MODE
	}
	[Token(Token = "0x2000283")]
	public enum DSP_HIGHPASS_SIMPLE
	{
		[Token(Token = "0x4000D9B")]
		CUTOFF
	}
	[Token(Token = "0x2000284")]
	public enum DSP_PAN_2D_STEREO_MODE_TYPE
	{
		[Token(Token = "0x4000D9D")]
		DISTRIBUTED,
		[Token(Token = "0x4000D9E")]
		DISCRETE
	}
	[Token(Token = "0x2000285")]
	public enum DSP_PAN_MODE_TYPE
	{
		[Token(Token = "0x4000DA0")]
		MONO,
		[Token(Token = "0x4000DA1")]
		STEREO,
		[Token(Token = "0x4000DA2")]
		SURROUND
	}
	[Token(Token = "0x2000286")]
	public enum DSP_PAN_3D_ROLLOFF_TYPE
	{
		[Token(Token = "0x4000DA4")]
		LINEARSQUARED,
		[Token(Token = "0x4000DA5")]
		LINEAR,
		[Token(Token = "0x4000DA6")]
		INVERSE,
		[Token(Token = "0x4000DA7")]
		INVERSETAPERED,
		[Token(Token = "0x4000DA8")]
		CUSTOM
	}
	[Token(Token = "0x2000287")]
	public enum DSP_PAN_3D_EXTENT_MODE_TYPE
	{
		[Token(Token = "0x4000DAA")]
		AUTO,
		[Token(Token = "0x4000DAB")]
		USER,
		[Token(Token = "0x4000DAC")]
		OFF
	}
	[Token(Token = "0x2000288")]
	public enum DSP_PAN
	{
		[Token(Token = "0x4000DAE")]
		MODE,
		[Token(Token = "0x4000DAF")]
		_2D_STEREO_POSITION,
		[Token(Token = "0x4000DB0")]
		_2D_DIRECTION,
		[Token(Token = "0x4000DB1")]
		_2D_EXTENT,
		[Token(Token = "0x4000DB2")]
		_2D_ROTATION,
		[Token(Token = "0x4000DB3")]
		_2D_LFE_LEVEL,
		[Token(Token = "0x4000DB4")]
		_2D_STEREO_MODE,
		[Token(Token = "0x4000DB5")]
		_2D_STEREO_SEPARATION,
		[Token(Token = "0x4000DB6")]
		_2D_STEREO_AXIS,
		[Token(Token = "0x4000DB7")]
		ENABLED_SPEAKERS,
		[Token(Token = "0x4000DB8")]
		_3D_POSITION,
		[Token(Token = "0x4000DB9")]
		_3D_ROLLOFF,
		[Token(Token = "0x4000DBA")]
		_3D_MIN_DISTANCE,
		[Token(Token = "0x4000DBB")]
		_3D_MAX_DISTANCE,
		[Token(Token = "0x4000DBC")]
		_3D_EXTENT_MODE,
		[Token(Token = "0x4000DBD")]
		_3D_SOUND_SIZE,
		[Token(Token = "0x4000DBE")]
		_3D_MIN_EXTENT,
		[Token(Token = "0x4000DBF")]
		_3D_PAN_BLEND,
		[Token(Token = "0x4000DC0")]
		LFE_UPMIX_ENABLED,
		[Token(Token = "0x4000DC1")]
		OVERALL_GAIN,
		[Token(Token = "0x4000DC2")]
		SURROUND_SPEAKER_MODE,
		[Token(Token = "0x4000DC3")]
		_2D_HEIGHT_BLEND
	}
	[Token(Token = "0x2000289")]
	public enum DSP_THREE_EQ_CROSSOVERSLOPE_TYPE
	{
		[Token(Token = "0x4000DC5")]
		_12DB,
		[Token(Token = "0x4000DC6")]
		_24DB,
		[Token(Token = "0x4000DC7")]
		_48DB
	}
	[Token(Token = "0x200028A")]
	public enum DSP_THREE_EQ
	{
		[Token(Token = "0x4000DC9")]
		LOWGAIN,
		[Token(Token = "0x4000DCA")]
		MIDGAIN,
		[Token(Token = "0x4000DCB")]
		HIGHGAIN,
		[Token(Token = "0x4000DCC")]
		LOWCROSSOVER,
		[Token(Token = "0x4000DCD")]
		HIGHCROSSOVER,
		[Token(Token = "0x4000DCE")]
		CROSSOVERSLOPE
	}
	[Token(Token = "0x200028B")]
	public enum DSP_FFT_WINDOW
	{
		[Token(Token = "0x4000DD0")]
		RECT,
		[Token(Token = "0x4000DD1")]
		TRIANGLE,
		[Token(Token = "0x4000DD2")]
		HAMMING,
		[Token(Token = "0x4000DD3")]
		HANNING,
		[Token(Token = "0x4000DD4")]
		BLACKMAN,
		[Token(Token = "0x4000DD5")]
		BLACKMANHARRIS
	}
	[Token(Token = "0x200028C")]
	public enum DSP_FFT
	{
		[Token(Token = "0x4000DD7")]
		WINDOWSIZE,
		[Token(Token = "0x4000DD8")]
		WINDOWTYPE,
		[Token(Token = "0x4000DD9")]
		SPECTRUMDATA,
		[Token(Token = "0x4000DDA")]
		DOMINANT_FREQ
	}
	[Token(Token = "0x200028D")]
	public enum DSP_ENVELOPEFOLLOWER
	{
		[Token(Token = "0x4000DDC")]
		ATTACK,
		[Token(Token = "0x4000DDD")]
		RELEASE,
		[Token(Token = "0x4000DDE")]
		ENVELOPE,
		[Token(Token = "0x4000DDF")]
		USESIDECHAIN
	}
	[Token(Token = "0x200028E")]
	public enum DSP_CONVOLUTION_REVERB
	{
		[Token(Token = "0x4000DE1")]
		IR,
		[Token(Token = "0x4000DE2")]
		WET,
		[Token(Token = "0x4000DE3")]
		DRY,
		[Token(Token = "0x4000DE4")]
		LINKED
	}
	[Token(Token = "0x200028F")]
	public enum DSP_CHANNELMIX_OUTPUT
	{
		[Token(Token = "0x4000DE6")]
		DEFAULT,
		[Token(Token = "0x4000DE7")]
		ALLMONO,
		[Token(Token = "0x4000DE8")]
		ALLSTEREO,
		[Token(Token = "0x4000DE9")]
		ALLQUAD,
		[Token(Token = "0x4000DEA")]
		ALL5POINT1,
		[Token(Token = "0x4000DEB")]
		ALL7POINT1,
		[Token(Token = "0x4000DEC")]
		ALLLFE
	}
	[Token(Token = "0x2000290")]
	public enum DSP_CHANNELMIX
	{
		[Token(Token = "0x4000DEE")]
		OUTPUTGROUPING,
		[Token(Token = "0x4000DEF")]
		GAIN_CH0,
		[Token(Token = "0x4000DF0")]
		GAIN_CH1,
		[Token(Token = "0x4000DF1")]
		GAIN_CH2,
		[Token(Token = "0x4000DF2")]
		GAIN_CH3,
		[Token(Token = "0x4000DF3")]
		GAIN_CH4,
		[Token(Token = "0x4000DF4")]
		GAIN_CH5,
		[Token(Token = "0x4000DF5")]
		GAIN_CH6,
		[Token(Token = "0x4000DF6")]
		GAIN_CH7,
		[Token(Token = "0x4000DF7")]
		GAIN_CH8,
		[Token(Token = "0x4000DF8")]
		GAIN_CH9,
		[Token(Token = "0x4000DF9")]
		GAIN_CH10,
		[Token(Token = "0x4000DFA")]
		GAIN_CH11,
		[Token(Token = "0x4000DFB")]
		GAIN_CH12,
		[Token(Token = "0x4000DFC")]
		GAIN_CH13,
		[Token(Token = "0x4000DFD")]
		GAIN_CH14,
		[Token(Token = "0x4000DFE")]
		GAIN_CH15,
		[Token(Token = "0x4000DFF")]
		GAIN_CH16,
		[Token(Token = "0x4000E00")]
		GAIN_CH17,
		[Token(Token = "0x4000E01")]
		GAIN_CH18,
		[Token(Token = "0x4000E02")]
		GAIN_CH19,
		[Token(Token = "0x4000E03")]
		GAIN_CH20,
		[Token(Token = "0x4000E04")]
		GAIN_CH21,
		[Token(Token = "0x4000E05")]
		GAIN_CH22,
		[Token(Token = "0x4000E06")]
		GAIN_CH23,
		[Token(Token = "0x4000E07")]
		GAIN_CH24,
		[Token(Token = "0x4000E08")]
		GAIN_CH25,
		[Token(Token = "0x4000E09")]
		GAIN_CH26,
		[Token(Token = "0x4000E0A")]
		GAIN_CH27,
		[Token(Token = "0x4000E0B")]
		GAIN_CH28,
		[Token(Token = "0x4000E0C")]
		GAIN_CH29,
		[Token(Token = "0x4000E0D")]
		GAIN_CH30,
		[Token(Token = "0x4000E0E")]
		GAIN_CH31
	}
	[Token(Token = "0x2000291")]
	public enum DSP_TRANSCEIVER_SPEAKERMODE
	{
		[Token(Token = "0x4000E10")]
		AUTO = -1,
		[Token(Token = "0x4000E11")]
		MONO,
		[Token(Token = "0x4000E12")]
		STEREO,
		[Token(Token = "0x4000E13")]
		SURROUND
	}
	[Token(Token = "0x2000292")]
	public enum DSP_TRANSCEIVER
	{
		[Token(Token = "0x4000E15")]
		TRANSMIT,
		[Token(Token = "0x4000E16")]
		GAIN,
		[Token(Token = "0x4000E17")]
		CHANNEL,
		[Token(Token = "0x4000E18")]
		TRANSMITSPEAKERMODE
	}
	[Token(Token = "0x2000293")]
	public enum DSP_OBJECTPAN
	{
		[Token(Token = "0x4000E1A")]
		_3D_POSITION,
		[Token(Token = "0x4000E1B")]
		_3D_ROLLOFF,
		[Token(Token = "0x4000E1C")]
		_3D_MIN_DISTANCE,
		[Token(Token = "0x4000E1D")]
		_3D_MAX_DISTANCE,
		[Token(Token = "0x4000E1E")]
		_3D_EXTENT_MODE,
		[Token(Token = "0x4000E1F")]
		_3D_SOUND_SIZE,
		[Token(Token = "0x4000E20")]
		_3D_MIN_EXTENT,
		[Token(Token = "0x4000E21")]
		OVERALL_GAIN,
		[Token(Token = "0x4000E22")]
		OUTPUTGAIN
	}
	[Token(Token = "0x2000294")]
	public class Error
	{
		[Token(Token = "0x6001008")]
		[Address(RVA = "0x17693C4", Offset = "0x17693C4", VA = "0x17693C4")]
		public static string String(RESULT errcode)
		{
			return null;
		}

		[Token(Token = "0x6001009")]
		[Address(RVA = "0x1769434", Offset = "0x1769434", VA = "0x1769434")]
		public Error()
		{
		}
	}
}
namespace FMOD.Studio
{
	[Token(Token = "0x2000295")]
	public class STUDIO_VERSION
	{
		[Token(Token = "0x4000E23")]
		public const string dll = "fmodstudio";

		[Token(Token = "0x600100A")]
		[Address(RVA = "0x1687464", Offset = "0x1687464", VA = "0x1687464")]
		public STUDIO_VERSION()
		{
		}
	}
	[Token(Token = "0x2000296")]
	public enum STOP_MODE
	{
		[Token(Token = "0x4000E25")]
		ALLOWFADEOUT,
		[Token(Token = "0x4000E26")]
		IMMEDIATE
	}
	[Token(Token = "0x2000297")]
	public enum LOADING_STATE
	{
		[Token(Token = "0x4000E28")]
		UNLOADING,
		[Token(Token = "0x4000E29")]
		UNLOADED,
		[Token(Token = "0x4000E2A")]
		LOADING,
		[Token(Token = "0x4000E2B")]
		LOADED,
		[Token(Token = "0x4000E2C")]
		ERROR
	}
	[Token(Token = "0x2000298")]
	public struct PROGRAMMER_SOUND_PROPERTIES
	{
		[Token(Token = "0x4000E2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public StringWrapper name;

		[Token(Token = "0x4000E2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public IntPtr sound;

		[Token(Token = "0x4000E2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int subsoundIndex;
	}
	[Token(Token = "0x2000299")]
	public struct TIMELINE_MARKER_PROPERTIES
	{
		[Token(Token = "0x4000E30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public StringWrapper name;

		[Token(Token = "0x4000E31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int position;
	}
	[Token(Token = "0x200029A")]
	public struct TIMELINE_BEAT_PROPERTIES
	{
		[Token(Token = "0x4000E32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int bar;

		[Token(Token = "0x4000E33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int beat;

		[Token(Token = "0x4000E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int position;

		[Token(Token = "0x4000E35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float tempo;

		[Token(Token = "0x4000E36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int timesignatureupper;

		[Token(Token = "0x4000E37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int timesignaturelower;
	}
	[Token(Token = "0x200029B")]
	public struct ADVANCEDSETTINGS
	{
		[Token(Token = "0x4000E38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int cbsize;

		[Token(Token = "0x4000E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int commandqueuesize;

		[Token(Token = "0x4000E3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int handleinitialsize;

		[Token(Token = "0x4000E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int studioupdateperiod;

		[Token(Token = "0x4000E3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int idlesampledatapoolsize;
	}
	[Token(Token = "0x200029C")]
	public struct CPU_USAGE
	{
		[Token(Token = "0x4000E3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float dspusage;

		[Token(Token = "0x4000E3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float streamusage;

		[Token(Token = "0x4000E3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float geometryusage;

		[Token(Token = "0x4000E40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float updateusage;

		[Token(Token = "0x4000E41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float studiousage;
	}
	[Token(Token = "0x200029D")]
	public struct BUFFER_INFO
	{
		[Token(Token = "0x4000E42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int currentusage;

		[Token(Token = "0x4000E43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int peakusage;

		[Token(Token = "0x4000E44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int capacity;

		[Token(Token = "0x4000E45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int stallcount;

		[Token(Token = "0x4000E46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float stalltime;
	}
	[Token(Token = "0x200029E")]
	public struct BUFFER_USAGE
	{
		[Token(Token = "0x4000E47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public BUFFER_INFO studiocommandqueue;

		[Token(Token = "0x4000E48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public BUFFER_INFO studiohandle;
	}
	[Token(Token = "0x200029F")]
	public struct BANK_INFO
	{
		[Token(Token = "0x4000E49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int size;

		[Token(Token = "0x4000E4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public IntPtr userdata;

		[Token(Token = "0x4000E4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int userdatalength;

		[Token(Token = "0x4000E4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public FILE_OPENCALLBACK opencallback;

		[Token(Token = "0x4000E4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FILE_CLOSECALLBACK closecallback;

		[Token(Token = "0x4000E4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public FILE_READCALLBACK readcallback;

		[Token(Token = "0x4000E4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FILE_SEEKCALLBACK seekcallback;
	}
	[Token(Token = "0x20002A0")]
	[Flags]
	public enum SYSTEM_CALLBACK_TYPE : uint
	{
		[Token(Token = "0x4000E51")]
		PREUPDATE = 1u,
		[Token(Token = "0x4000E52")]
		POSTUPDATE = 2u,
		[Token(Token = "0x4000E53")]
		BANK_UNLOAD = 4u,
		[Token(Token = "0x4000E54")]
		ALL = uint.MaxValue
	}
	[Token(Token = "0x20002A1")]
	public delegate RESULT SYSTEM_CALLBACK(IntPtr systemraw, SYSTEM_CALLBACK_TYPE type, IntPtr parameters, IntPtr userdata);
	[Token(Token = "0x20002A2")]
	public enum PARAMETER_TYPE
	{
		[Token(Token = "0x4000E56")]
		GAME_CONTROLLED,
		[Token(Token = "0x4000E57")]
		AUTOMATIC_DISTANCE,
		[Token(Token = "0x4000E58")]
		AUTOMATIC_EVENT_CONE_ANGLE,
		[Token(Token = "0x4000E59")]
		AUTOMATIC_EVENT_ORIENTATION,
		[Token(Token = "0x4000E5A")]
		AUTOMATIC_DIRECTION,
		[Token(Token = "0x4000E5B")]
		AUTOMATIC_ELEVATION,
		[Token(Token = "0x4000E5C")]
		AUTOMATIC_LISTENER_ORIENTATION
	}
	[Token(Token = "0x20002A3")]
	public struct PARAMETER_DESCRIPTION
	{
		[Token(Token = "0x4000E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public StringWrapper name;

		[Token(Token = "0x4000E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int index;

		[Token(Token = "0x4000E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float minimum;

		[Token(Token = "0x4000E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float maximum;

		[Token(Token = "0x4000E61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float defaultvalue;

		[Token(Token = "0x4000E62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public PARAMETER_TYPE type;
	}
	[Token(Token = "0x20002A4")]
	internal enum LOAD_MEMORY_MODE
	{
		[Token(Token = "0x4000E64")]
		LOAD_MEMORY,
		[Token(Token = "0x4000E65")]
		LOAD_MEMORY_POINT
	}
	[Token(Token = "0x20002A5")]
	internal enum LOAD_MEMORY_ALIGNMENT
	{
		[Token(Token = "0x4000E67")]
		VALUE = 0x20
	}
	[Token(Token = "0x20002A6")]
	public struct SOUND_INFO
	{
		[Token(Token = "0x4000E68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr name_or_data;

		[Token(Token = "0x4000E69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public MODE mode;

		[Token(Token = "0x4000E6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CREATESOUNDEXINFO exinfo;

		[Token(Token = "0x4000E6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public int subsoundindex;

		[Token(Token = "0x170000CC")]
		public string name
		{
			[Token(Token = "0x600100F")]
			[Address(RVA = "0x481E48", Offset = "0x481E48", VA = "0x481E48")]
			get
			{
				return null;
			}
		}
	}
	[Token(Token = "0x20002A7")]
	public enum USER_PROPERTY_TYPE
	{
		[Token(Token = "0x4000E6D")]
		INTEGER,
		[Token(Token = "0x4000E6E")]
		BOOLEAN,
		[Token(Token = "0x4000E6F")]
		FLOAT,
		[Token(Token = "0x4000E70")]
		STRING
	}
	[Token(Token = "0x20002A8")]
	public struct USER_PROPERTY
	{
		[Token(Token = "0x4000E71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public StringWrapper name;

		[Token(Token = "0x4000E72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public USER_PROPERTY_TYPE type;

		[Token(Token = "0x4000E73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private Union_IntBoolFloatString value;

		[Token(Token = "0x6001010")]
		[Address(RVA = "0x48225C", Offset = "0x48225C", VA = "0x48225C")]
		public int intValue()
		{
			return default(int);
		}

		[Token(Token = "0x6001011")]
		[Address(RVA = "0x482274", Offset = "0x482274", VA = "0x482274")]
		public bool boolValue()
		{
			return default(bool);
		}

		[Token(Token = "0x6001012")]
		[Address(RVA = "0x482298", Offset = "0x482298", VA = "0x482298")]
		public float floatValue()
		{
			return default(float);
		}

		[Token(Token = "0x6001013")]
		[Address(RVA = "0x4822B0", Offset = "0x4822B0", VA = "0x4822B0")]
		public string stringValue()
		{
			return null;
		}
	}
	[StructLayout(2)]
	[Token(Token = "0x20002A9")]
	internal struct Union_IntBoolFloatString
	{
		[Token(Token = "0x4000E74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int intvalue;

		[Token(Token = "0x4000E75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool boolvalue;

		[Token(Token = "0x4000E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float floatvalue;

		[Token(Token = "0x4000E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public StringWrapper stringvalue;
	}
	[Token(Token = "0x20002AA")]
	[Flags]
	public enum INITFLAGS : uint
	{
		[Token(Token = "0x4000E79")]
		NORMAL = 0u,
		[Token(Token = "0x4000E7A")]
		LIVEUPDATE = 1u,
		[Token(Token = "0x4000E7B")]
		ALLOW_MISSING_PLUGINS = 2u,
		[Token(Token = "0x4000E7C")]
		SYNCHRONOUS_UPDATE = 4u,
		[Token(Token = "0x4000E7D")]
		DEFERRED_CALLBACKS = 8u,
		[Token(Token = "0x4000E7E")]
		LOAD_FROM_UPDATE = 0x10u
	}
	[Token(Token = "0x20002AB")]
	[Flags]
	public enum LOAD_BANK_FLAGS : uint
	{
		[Token(Token = "0x4000E80")]
		NORMAL = 0u,
		[Token(Token = "0x4000E81")]
		NONBLOCKING = 1u,
		[Token(Token = "0x4000E82")]
		DECOMPRESS_SAMPLES = 2u
	}
	[Token(Token = "0x20002AC")]
	[Flags]
	public enum COMMANDCAPTURE_FLAGS : uint
	{
		[Token(Token = "0x4000E84")]
		NORMAL = 0u,
		[Token(Token = "0x4000E85")]
		FILEFLUSH = 1u,
		[Token(Token = "0x4000E86")]
		SKIP_INITIAL_STATE = 2u
	}
	[Token(Token = "0x20002AD")]
	[Flags]
	public enum COMMANDREPLAY_FLAGS : uint
	{
		[Token(Token = "0x4000E88")]
		NORMAL = 0u,
		[Token(Token = "0x4000E89")]
		SKIP_CLEANUP = 1u,
		[Token(Token = "0x4000E8A")]
		FAST_FORWARD = 2u
	}
	[Token(Token = "0x20002AE")]
	public enum PLAYBACK_STATE
	{
		[Token(Token = "0x4000E8C")]
		PLAYING,
		[Token(Token = "0x4000E8D")]
		SUSTAINING,
		[Token(Token = "0x4000E8E")]
		STOPPED,
		[Token(Token = "0x4000E8F")]
		STARTING,
		[Token(Token = "0x4000E90")]
		STOPPING
	}
	[Token(Token = "0x20002AF")]
	public enum EVENT_PROPERTY
	{
		[Token(Token = "0x4000E92")]
		CHANNELPRIORITY,
		[Token(Token = "0x4000E93")]
		SCHEDULE_DELAY,
		[Token(Token = "0x4000E94")]
		SCHEDULE_LOOKAHEAD,
		[Token(Token = "0x4000E95")]
		MINIMUM_DISTANCE,
		[Token(Token = "0x4000E96")]
		MAXIMUM_DISTANCE
	}
	[Token(Token = "0x20002B0")]
	public struct PLUGIN_INSTANCE_PROPERTIES
	{
		[Token(Token = "0x4000E97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr name;

		[Token(Token = "0x4000E98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public IntPtr dsp;
	}
	[Token(Token = "0x20002B1")]
	[Flags]
	public enum EVENT_CALLBACK_TYPE : uint
	{
		[Token(Token = "0x4000E9A")]
		CREATED = 1u,
		[Token(Token = "0x4000E9B")]
		DESTROYED = 2u,
		[Token(Token = "0x4000E9C")]
		STARTING = 4u,
		[Token(Token = "0x4000E9D")]
		STARTED = 8u,
		[Token(Token = "0x4000E9E")]
		RESTARTED = 0x10u,
		[Token(Token = "0x4000E9F")]
		STOPPED = 0x20u,
		[Token(Token = "0x4000EA0")]
		START_FAILED = 0x40u,
		[Token(Token = "0x4000EA1")]
		CREATE_PROGRAMMER_SOUND = 0x80u,
		[Token(Token = "0x4000EA2")]
		DESTROY_PROGRAMMER_SOUND = 0x100u,
		[Token(Token = "0x4000EA3")]
		PLUGIN_CREATED = 0x200u,
		[Token(Token = "0x4000EA4")]
		PLUGIN_DESTROYED = 0x400u,
		[Token(Token = "0x4000EA5")]
		TIMELINE_MARKER = 0x800u,
		[Token(Token = "0x4000EA6")]
		TIMELINE_BEAT = 0x1000u,
		[Token(Token = "0x4000EA7")]
		SOUND_PLAYED = 0x2000u,
		[Token(Token = "0x4000EA8")]
		SOUND_STOPPED = 0x4000u,
		[Token(Token = "0x4000EA9")]
		ALL = uint.MaxValue
	}
	[Token(Token = "0x20002B2")]
	public delegate RESULT EVENT_CALLBACK(EVENT_CALLBACK_TYPE type, EventInstance eventInstance, IntPtr parameters);
	[Token(Token = "0x20002B3")]
	public delegate RESULT COMMANDREPLAY_FRAME_CALLBACK(CommandReplay replay, int commandIndex, float currentTime, IntPtr userdata);
	[Token(Token = "0x20002B4")]
	public delegate RESULT COMMANDREPLAY_LOAD_BANK_CALLBACK(CommandReplay replay, Guid guid, StringWrapper bankFilename, LOAD_BANK_FLAGS flags, out Bank bank, IntPtr userdata);
	[Token(Token = "0x20002B5")]
	public delegate RESULT COMMANDREPLAY_CREATE_INSTANCE_CALLBACK(CommandReplay replay, EventDescription eventDescription, IntPtr originalHandle, out EventInstance instance, IntPtr userdata);
	[Token(Token = "0x20002B6")]
	public enum INSTANCETYPE
	{
		[Token(Token = "0x4000EAB")]
		NONE,
		[Token(Token = "0x4000EAC")]
		SYSTEM,
		[Token(Token = "0x4000EAD")]
		EVENTDESCRIPTION,
		[Token(Token = "0x4000EAE")]
		EVENTINSTANCE,
		[Token(Token = "0x4000EAF")]
		PARAMETERINSTANCE,
		[Token(Token = "0x4000EB0")]
		BUS,
		[Token(Token = "0x4000EB1")]
		VCA,
		[Token(Token = "0x4000EB2")]
		BANK,
		[Token(Token = "0x4000EB3")]
		COMMANDREPLAY
	}
	[Token(Token = "0x20002B7")]
	public struct COMMAND_INFO
	{
		[Token(Token = "0x4000EB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private StringWrapper commandname;

		[Token(Token = "0x4000EB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int parentcommandindex;

		[Token(Token = "0x4000EB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int framenumber;

		[Token(Token = "0x4000EB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float frametime;

		[Token(Token = "0x4000EB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public INSTANCETYPE instancetype;

		[Token(Token = "0x4000EB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public INSTANCETYPE outputtype;

		[Token(Token = "0x4000EBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint instancehandle;

		[Token(Token = "0x4000EBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint outputhandle;
	}
	[Token(Token = "0x20002B8")]
	public struct Util
	{
		[Token(Token = "0x6001024")]
		[Address(RVA = "0x168AFDC", Offset = "0x168AFDC", VA = "0x168AFDC")]
		public static RESULT ParseID(string idString, out Guid id)
		{
			return default(RESULT);
		}

		[PreserveSig]
		[Token(Token = "0x6001025")]
		[Address(RVA = "0x168B158", Offset = "0x168B158", VA = "0x168B158")]
		private static extern RESULT FMOD_Studio_ParseID(byte[] idString, out Guid id);
	}
	[Token(Token = "0x20002B9")]
	public struct System
	{
		[Token(Token = "0x4000EBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Token(Token = "0x6001026")]
		[Address(RVA = "0x16878B0", Offset = "0x16878B0", VA = "0x16878B0")]
		public static RESULT create(out System studiosystem)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001027")]
		[Address(RVA = "0x481E7C", Offset = "0x481E7C", VA = "0x481E7C")]
		public RESULT setAdvancedSettings(ADVANCEDSETTINGS settings)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001028")]
		[Address(RVA = "0x481EA4", Offset = "0x481EA4", VA = "0x481EA4")]
		public RESULT getAdvancedSettings(out ADVANCEDSETTINGS settings)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001029")]
		[Address(RVA = "0x481EAC", Offset = "0x481EAC", VA = "0x481EAC")]
		public RESULT initialize(int maxchannels, INITFLAGS studioFlags, FMOD.INITFLAGS flags, IntPtr extradriverdata)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600102A")]
		[Address(RVA = "0x481ED0", Offset = "0x481ED0", VA = "0x481ED0")]
		public RESULT release()
		{
			return default(RESULT);
		}

		[Token(Token = "0x600102B")]
		[Address(RVA = "0x481ED8", Offset = "0x481ED8", VA = "0x481ED8")]
		public RESULT update()
		{
			return default(RESULT);
		}

		[Token(Token = "0x600102C")]
		[Address(RVA = "0x481EE0", Offset = "0x481EE0", VA = "0x481EE0")]
		public RESULT getLowLevelSystem(out FMOD.System system)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600102D")]
		[Address(RVA = "0x481EE8", Offset = "0x481EE8", VA = "0x481EE8")]
		public RESULT getEvent(string path, out EventDescription _event)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600102E")]
		[Address(RVA = "0x481EF0", Offset = "0x481EF0", VA = "0x481EF0")]
		public RESULT getBus(string path, out Bus bus)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600102F")]
		[Address(RVA = "0x481EF8", Offset = "0x481EF8", VA = "0x481EF8")]
		public RESULT getVCA(string path, out VCA vca)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001030")]
		[Address(RVA = "0x481F00", Offset = "0x481F00", VA = "0x481F00")]
		public RESULT getBank(string path, out Bank bank)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001031")]
		[Address(RVA = "0x481F08", Offset = "0x481F08", VA = "0x481F08")]
		public RESULT getEventByID(Guid guid, out EventDescription _event)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001032")]
		[Address(RVA = "0x481F38", Offset = "0x481F38", VA = "0x481F38")]
		public RESULT getBusByID(Guid guid, out Bus bus)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001033")]
		[Address(RVA = "0x481F68", Offset = "0x481F68", VA = "0x481F68")]
		public RESULT getVCAByID(Guid guid, out VCA vca)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001034")]
		[Address(RVA = "0x481F98", Offset = "0x481F98", VA = "0x481F98")]
		public RESULT getBankByID(Guid guid, out Bank bank)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001035")]
		[Address(RVA = "0x481FC8", Offset = "0x481FC8", VA = "0x481FC8")]
		public RESULT getSoundInfo(string key, out SOUND_INFO info)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001036")]
		[Address(RVA = "0x481FD0", Offset = "0x481FD0", VA = "0x481FD0")]
		public RESULT lookupID(string path, out Guid guid)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001037")]
		[Address(RVA = "0x481FD8", Offset = "0x481FD8", VA = "0x481FD8")]
		public RESULT lookupPath(Guid guid, out string path)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001038")]
		[Address(RVA = "0x482000", Offset = "0x482000", VA = "0x482000")]
		public RESULT getNumListeners(out int numlisteners)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001039")]
		[Address(RVA = "0x482008", Offset = "0x482008", VA = "0x482008")]
		public RESULT setNumListeners(int numlisteners)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600103A")]
		[Address(RVA = "0x482010", Offset = "0x482010", VA = "0x482010")]
		public RESULT getListenerAttributes(int listener, out ATTRIBUTES_3D attributes)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600103B")]
		[Address(RVA = "0x482018", Offset = "0x482018", VA = "0x482018")]
		public RESULT setListenerAttributes(int listener, ATTRIBUTES_3D attributes)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600103C")]
		[Address(RVA = "0x48207C", Offset = "0x48207C", VA = "0x48207C")]
		public RESULT getListenerWeight(int listener, out float weight)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600103D")]
		[Address(RVA = "0x482084", Offset = "0x482084", VA = "0x482084")]
		public RESULT setListenerWeight(int listener, float weight)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600103E")]
		[Address(RVA = "0x48208C", Offset = "0x48208C", VA = "0x48208C")]
		public RESULT loadBankFile(string name, LOAD_BANK_FLAGS flags, out Bank bank)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600103F")]
		[Address(RVA = "0x4820A8", Offset = "0x4820A8", VA = "0x4820A8")]
		public RESULT loadBankMemory(byte[] buffer, LOAD_BANK_FLAGS flags, out Bank bank)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001040")]
		[Address(RVA = "0x4820C4", Offset = "0x4820C4", VA = "0x4820C4")]
		public RESULT loadBankCustom(BANK_INFO info, LOAD_BANK_FLAGS flags, out Bank bank)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001041")]
		[Address(RVA = "0x48210C", Offset = "0x48210C", VA = "0x48210C")]
		public RESULT unloadAll()
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001042")]
		[Address(RVA = "0x482114", Offset = "0x482114", VA = "0x482114")]
		public RESULT flushCommands()
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001043")]
		[Address(RVA = "0x48211C", Offset = "0x48211C", VA = "0x48211C")]
		public RESULT flushSampleLoading()
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001044")]
		[Address(RVA = "0x482124", Offset = "0x482124", VA = "0x482124")]
		public RESULT startCommandCapture(string path, COMMANDCAPTURE_FLAGS flags)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001045")]
		[Address(RVA = "0x48212C", Offset = "0x48212C", VA = "0x48212C")]
		public RESULT stopCommandCapture()
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001046")]
		[Address(RVA = "0x482134", Offset = "0x482134", VA = "0x482134")]
		public RESULT loadCommandReplay(string path, COMMANDREPLAY_FLAGS flags, out CommandReplay replay)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001047")]
		[Address(RVA = "0x482150", Offset = "0x482150", VA = "0x482150")]
		public RESULT getBankCount(out int count)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001048")]
		[Address(RVA = "0x482158", Offset = "0x482158", VA = "0x482158")]
		public RESULT getBankList(out Bank[] array)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001049")]
		[Address(RVA = "0x482160", Offset = "0x482160", VA = "0x482160")]
		public RESULT getCPUUsage(out CPU_USAGE usage)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600104A")]
		[Address(RVA = "0x482168", Offset = "0x482168", VA = "0x482168")]
		public RESULT getBufferUsage(out BUFFER_USAGE usage)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600104B")]
		[Address(RVA = "0x482170", Offset = "0x482170", VA = "0x482170")]
		public RESULT resetBufferUsage()
		{
			return default(RESULT);
		}

		[Token(Token = "0x600104C")]
		[Address(RVA = "0x482178", Offset = "0x482178", VA = "0x482178")]
		public RESULT setCallback(SYSTEM_CALLBACK callback, SYSTEM_CALLBACK_TYPE callbackmask = SYSTEM_CALLBACK_TYPE.ALL)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600104D")]
		[Address(RVA = "0x482180", Offset = "0x482180", VA = "0x482180")]
		public RESULT getUserData(out IntPtr userdata)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600104E")]
		[Address(RVA = "0x482188", Offset = "0x482188", VA = "0x482188")]
		public RESULT setUserData(IntPtr userdata)
		{
			return default(RESULT);
		}

		[PreserveSig]
		[Token(Token = "0x600104F")]
		[Address(RVA = "0x16878B8", Offset = "0x16878B8", VA = "0x16878B8")]
		private static extern RESULT FMOD_Studio_System_Create(out IntPtr studiosystem, uint headerversion);

		[PreserveSig]
		[Token(Token = "0x6001050")]
		[Address(RVA = "0x168ADA8", Offset = "0x168ADA8", VA = "0x168ADA8")]
		private static extern bool FMOD_Studio_System_IsValid(IntPtr studiosystem);

		[PreserveSig]
		[Token(Token = "0x6001051")]
		[Address(RVA = "0x1687A58", Offset = "0x1687A58", VA = "0x1687A58")]
		private static extern RESULT FMOD_Studio_System_SetAdvancedSettings(IntPtr studiosystem, ref ADVANCEDSETTINGS settings);

		[PreserveSig]
		[Token(Token = "0x6001052")]
		[Address(RVA = "0x1687BE0", Offset = "0x1687BE0", VA = "0x1687BE0")]
		private static extern RESULT FMOD_Studio_System_GetAdvancedSettings(IntPtr studiosystem, out ADVANCEDSETTINGS settings);

		[PreserveSig]
		[Token(Token = "0x6001053")]
		[Address(RVA = "0x1687CB0", Offset = "0x1687CB0", VA = "0x1687CB0")]
		private static extern RESULT FMOD_Studio_System_Initialize(IntPtr studiosystem, int maxchannels, INITFLAGS studioFlags, FMOD.INITFLAGS flags, IntPtr extradriverdata);

		[PreserveSig]
		[Token(Token = "0x6001054")]
		[Address(RVA = "0x1687D78", Offset = "0x1687D78", VA = "0x1687D78")]
		private static extern RESULT FMOD_Studio_System_Release(IntPtr studiosystem);

		[PreserveSig]
		[Token(Token = "0x6001055")]
		[Address(RVA = "0x1687E20", Offset = "0x1687E20", VA = "0x1687E20")]
		private static extern RESULT FMOD_Studio_System_Update(IntPtr studiosystem);

		[PreserveSig]
		[Token(Token = "0x6001056")]
		[Address(RVA = "0x1687EC8", Offset = "0x1687EC8", VA = "0x1687EC8")]
		private static extern RESULT FMOD_Studio_System_GetLowLevelSystem(IntPtr studiosystem, out IntPtr system);

		[PreserveSig]
		[Token(Token = "0x6001057")]
		[Address(RVA = "0x1688100", Offset = "0x1688100", VA = "0x1688100")]
		private static extern RESULT FMOD_Studio_System_GetEvent(IntPtr studiosystem, byte[] path, out IntPtr description);

		[PreserveSig]
		[Token(Token = "0x6001058")]
		[Address(RVA = "0x1688348", Offset = "0x1688348", VA = "0x1688348")]
		private static extern RESULT FMOD_Studio_System_GetBus(IntPtr studiosystem, byte[] path, out IntPtr bus);

		[PreserveSig]
		[Token(Token = "0x6001059")]
		[Address(RVA = "0x1688590", Offset = "0x1688590", VA = "0x1688590")]
		private static extern RESULT FMOD_Studio_System_GetVCA(IntPtr studiosystem, byte[] path, out IntPtr vca);

		[PreserveSig]
		[Token(Token = "0x600105A")]
		[Address(RVA = "0x16887D8", Offset = "0x16887D8", VA = "0x16887D8")]
		private static extern RESULT FMOD_Studio_System_GetBank(IntPtr studiosystem, byte[] path, out IntPtr bank);

		[PreserveSig]
		[Token(Token = "0x600105B")]
		[Address(RVA = "0x16888C0", Offset = "0x16888C0", VA = "0x16888C0")]
		private static extern RESULT FMOD_Studio_System_GetEventByID(IntPtr studiosystem, ref Guid guid, out IntPtr description);

		[PreserveSig]
		[Token(Token = "0x600105C")]
		[Address(RVA = "0x16889A0", Offset = "0x16889A0", VA = "0x16889A0")]
		private static extern RESULT FMOD_Studio_System_GetBusByID(IntPtr studiosystem, ref Guid guid, out IntPtr bus);

		[PreserveSig]
		[Token(Token = "0x600105D")]
		[Address(RVA = "0x1688A80", Offset = "0x1688A80", VA = "0x1688A80")]
		private static extern RESULT FMOD_Studio_System_GetVCAByID(IntPtr studiosystem, ref Guid guid, out IntPtr vca);

		[PreserveSig]
		[Token(Token = "0x600105E")]
		[Address(RVA = "0x1688B60", Offset = "0x1688B60", VA = "0x1688B60")]
		private static extern RESULT FMOD_Studio_System_GetBankByID(IntPtr studiosystem, ref Guid guid, out IntPtr bank);

		[PreserveSig]
		[Token(Token = "0x600105F")]
		[Address(RVA = "0x1688DA0", Offset = "0x1688DA0", VA = "0x1688DA0")]
		private static extern RESULT FMOD_Studio_System_GetSoundInfo(IntPtr studiosystem, byte[] key, out SOUND_INFO info);

		[PreserveSig]
		[Token(Token = "0x6001060")]
		[Address(RVA = "0x1689070", Offset = "0x1689070", VA = "0x1689070")]
		private static extern RESULT FMOD_Studio_System_LookupID(IntPtr studiosystem, byte[] path, out Guid guid);

		[PreserveSig]
		[Token(Token = "0x6001061")]
		[Address(RVA = "0x16893D0", Offset = "0x16893D0", VA = "0x16893D0")]
		private static extern RESULT FMOD_Studio_System_LookupPath(IntPtr studiosystem, ref Guid guid, IntPtr path, int size, out int retrieved);

		[PreserveSig]
		[Token(Token = "0x6001062")]
		[Address(RVA = "0x1689498", Offset = "0x1689498", VA = "0x1689498")]
		private static extern RESULT FMOD_Studio_System_GetNumListeners(IntPtr studiosystem, out int numlisteners);

		[PreserveSig]
		[Token(Token = "0x6001063")]
		[Address(RVA = "0x1689548", Offset = "0x1689548", VA = "0x1689548")]
		private static extern RESULT FMOD_Studio_System_SetNumListeners(IntPtr studiosystem, int numlisteners);

		[PreserveSig]
		[Token(Token = "0x6001064")]
		[Address(RVA = "0x16895F8", Offset = "0x16895F8", VA = "0x16895F8")]
		private static extern RESULT FMOD_Studio_System_GetListenerAttributes(IntPtr studiosystem, int listener, out ATTRIBUTES_3D attributes);

		[PreserveSig]
		[Token(Token = "0x6001065")]
		[Address(RVA = "0x1689710", Offset = "0x1689710", VA = "0x1689710")]
		private static extern RESULT FMOD_Studio_System_SetListenerAttributes(IntPtr studiosystem, int listener, ref ATTRIBUTES_3D attributes);

		[PreserveSig]
		[Token(Token = "0x6001066")]
		[Address(RVA = "0x16897C8", Offset = "0x16897C8", VA = "0x16897C8")]
		private static extern RESULT FMOD_Studio_System_GetListenerWeight(IntPtr studiosystem, int listener, out float weight);

		[PreserveSig]
		[Token(Token = "0x6001067")]
		[Address(RVA = "0x1689880", Offset = "0x1689880", VA = "0x1689880")]
		private static extern RESULT FMOD_Studio_System_SetListenerWeight(IntPtr studiosystem, int listener, float weight);

		[PreserveSig]
		[Token(Token = "0x6001068")]
		[Address(RVA = "0x1689AC8", Offset = "0x1689AC8", VA = "0x1689AC8")]
		private static extern RESULT FMOD_Studio_System_LoadBankFile(IntPtr studiosystem, byte[] filename, LOAD_BANK_FLAGS flags, out IntPtr bank);

		[PreserveSig]
		[Token(Token = "0x6001069")]
		[Address(RVA = "0x1689C10", Offset = "0x1689C10", VA = "0x1689C10")]
		private static extern RESULT FMOD_Studio_System_LoadBankMemory(IntPtr studiosystem, IntPtr buffer, int length, LOAD_MEMORY_MODE mode, LOAD_BANK_FLAGS flags, out IntPtr bank);

		[PreserveSig]
		[Token(Token = "0x600106A")]
		[Address(RVA = "0x1689DF0", Offset = "0x1689DF0", VA = "0x1689DF0")]
		private static extern RESULT FMOD_Studio_System_LoadBankCustom(IntPtr studiosystem, ref BANK_INFO info, LOAD_BANK_FLAGS flags, out IntPtr bank);

		[PreserveSig]
		[Token(Token = "0x600106B")]
		[Address(RVA = "0x1689F28", Offset = "0x1689F28", VA = "0x1689F28")]
		private static extern RESULT FMOD_Studio_System_UnloadAll(IntPtr studiosystem);

		[PreserveSig]
		[Token(Token = "0x600106C")]
		[Address(RVA = "0x1689FD0", Offset = "0x1689FD0", VA = "0x1689FD0")]
		private static extern RESULT FMOD_Studio_System_FlushCommands(IntPtr studiosystem);

		[PreserveSig]
		[Token(Token = "0x600106D")]
		[Address(RVA = "0x168A078", Offset = "0x168A078", VA = "0x168A078")]
		private static extern RESULT FMOD_Studio_System_FlushSampleLoading(IntPtr studiosystem);

		[PreserveSig]
		[Token(Token = "0x600106E")]
		[Address(RVA = "0x168A2A8", Offset = "0x168A2A8", VA = "0x168A2A8")]
		private static extern RESULT FMOD_Studio_System_StartCommandCapture(IntPtr studiosystem, byte[] path, COMMANDCAPTURE_FLAGS flags);

		[PreserveSig]
		[Token(Token = "0x600106F")]
		[Address(RVA = "0x168A368", Offset = "0x168A368", VA = "0x168A368")]
		private static extern RESULT FMOD_Studio_System_StopCommandCapture(IntPtr studiosystem);

		[PreserveSig]
		[Token(Token = "0x6001070")]
		[Address(RVA = "0x168A5A0", Offset = "0x168A5A0", VA = "0x168A5A0")]
		private static extern RESULT FMOD_Studio_System_LoadCommandReplay(IntPtr studiosystem, byte[] path, COMMANDREPLAY_FLAGS flags, out IntPtr commandReplay);

		[PreserveSig]
		[Token(Token = "0x6001071")]
		[Address(RVA = "0x168A668", Offset = "0x168A668", VA = "0x168A668")]
		private static extern RESULT FMOD_Studio_System_GetBankCount(IntPtr studiosystem, out int count);

		[PreserveSig]
		[Token(Token = "0x6001072")]
		[Address(RVA = "0x168A8B0", Offset = "0x168A8B0", VA = "0x168A8B0")]
		private static extern RESULT FMOD_Studio_System_GetBankList(IntPtr studiosystem, IntPtr[] array, int capacity, out int count);

		[PreserveSig]
		[Token(Token = "0x6001073")]
		[Address(RVA = "0x168A978", Offset = "0x168A978", VA = "0x168A978")]
		private static extern RESULT FMOD_Studio_System_GetCPUUsage(IntPtr studiosystem, out CPU_USAGE usage);

		[PreserveSig]
		[Token(Token = "0x6001074")]
		[Address(RVA = "0x168AA28", Offset = "0x168AA28", VA = "0x168AA28")]
		private static extern RESULT FMOD_Studio_System_GetBufferUsage(IntPtr studiosystem, out BUFFER_USAGE usage);

		[PreserveSig]
		[Token(Token = "0x6001075")]
		[Address(RVA = "0x168AAD8", Offset = "0x168AAD8", VA = "0x168AAD8")]
		private static extern RESULT FMOD_Studio_System_ResetBufferUsage(IntPtr studiosystem);

		[PreserveSig]
		[Token(Token = "0x6001076")]
		[Address(RVA = "0x168AB80", Offset = "0x168AB80", VA = "0x168AB80")]
		private static extern RESULT FMOD_Studio_System_SetCallback(IntPtr studiosystem, SYSTEM_CALLBACK callback, SYSTEM_CALLBACK_TYPE callbackmask);

		[PreserveSig]
		[Token(Token = "0x6001077")]
		[Address(RVA = "0x168AC50", Offset = "0x168AC50", VA = "0x168AC50")]
		private static extern RESULT FMOD_Studio_System_GetUserData(IntPtr studiosystem, out IntPtr userdata);

		[PreserveSig]
		[Token(Token = "0x6001078")]
		[Address(RVA = "0x168AD00", Offset = "0x168AD00", VA = "0x168AD00")]
		private static extern RESULT FMOD_Studio_System_SetUserData(IntPtr studiosystem, IntPtr userdata);

		[Token(Token = "0x6001079")]
		[Address(RVA = "0x482190", Offset = "0x482190", VA = "0x482190")]
		public bool hasHandle()
		{
			return default(bool);
		}

		[Token(Token = "0x600107A")]
		[Address(RVA = "0x482198", Offset = "0x482198", VA = "0x482198")]
		public void clearHandle()
		{
		}

		[Token(Token = "0x600107B")]
		[Address(RVA = "0x4821E4", Offset = "0x4821E4", VA = "0x4821E4")]
		public bool isValid()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20002BA")]
	public struct EventDescription
	{
		[Token(Token = "0x4000EBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Token(Token = "0x600107C")]
		[Address(RVA = "0x4819E0", Offset = "0x4819E0", VA = "0x4819E0")]
		public RESULT getID(out Guid id)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600107D")]
		[Address(RVA = "0x4819E8", Offset = "0x4819E8", VA = "0x4819E8")]
		public RESULT getPath(out string path)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600107E")]
		[Address(RVA = "0x4819F0", Offset = "0x4819F0", VA = "0x4819F0")]
		public RESULT getParameterCount(out int count)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600107F")]
		[Address(RVA = "0x4819F8", Offset = "0x4819F8", VA = "0x4819F8")]
		public RESULT getParameterByIndex(int index, out PARAMETER_DESCRIPTION parameter)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001080")]
		[Address(RVA = "0x481A00", Offset = "0x481A00", VA = "0x481A00")]
		public RESULT getParameter(string name, out PARAMETER_DESCRIPTION parameter)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001081")]
		[Address(RVA = "0x481A08", Offset = "0x481A08", VA = "0x481A08")]
		public RESULT getUserPropertyCount(out int count)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001082")]
		[Address(RVA = "0x481A10", Offset = "0x481A10", VA = "0x481A10")]
		public RESULT getUserPropertyByIndex(int index, out USER_PROPERTY property)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001083")]
		[Address(RVA = "0x481A18", Offset = "0x481A18", VA = "0x481A18")]
		public RESULT getUserProperty(string name, out USER_PROPERTY property)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001084")]
		[Address(RVA = "0x481A20", Offset = "0x481A20", VA = "0x481A20")]
		public RESULT getLength(out int length)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001085")]
		[Address(RVA = "0x481A28", Offset = "0x481A28", VA = "0x481A28")]
		public RESULT getMinimumDistance(out float distance)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001086")]
		[Address(RVA = "0x481A30", Offset = "0x481A30", VA = "0x481A30")]
		public RESULT getMaximumDistance(out float distance)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001087")]
		[Address(RVA = "0x481A38", Offset = "0x481A38", VA = "0x481A38")]
		public RESULT getSoundSize(out float size)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001088")]
		[Address(RVA = "0x481A40", Offset = "0x481A40", VA = "0x481A40")]
		public RESULT isSnapshot(out bool snapshot)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001089")]
		[Address(RVA = "0x481A48", Offset = "0x481A48", VA = "0x481A48")]
		public RESULT isOneshot(out bool oneshot)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600108A")]
		[Address(RVA = "0x481A50", Offset = "0x481A50", VA = "0x481A50")]
		public RESULT isStream(out bool isStream)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600108B")]
		[Address(RVA = "0x481A58", Offset = "0x481A58", VA = "0x481A58")]
		public RESULT is3D(out bool is3D)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600108C")]
		[Address(RVA = "0x481A60", Offset = "0x481A60", VA = "0x481A60")]
		public RESULT hasCue(out bool cue)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600108D")]
		[Address(RVA = "0x481A68", Offset = "0x481A68", VA = "0x481A68")]
		public RESULT createInstance(out EventInstance instance)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600108E")]
		[Address(RVA = "0x481A70", Offset = "0x481A70", VA = "0x481A70")]
		public RESULT getInstanceCount(out int count)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600108F")]
		[Address(RVA = "0x481A78", Offset = "0x481A78", VA = "0x481A78")]
		public RESULT getInstanceList(out EventInstance[] array)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001090")]
		[Address(RVA = "0x481A80", Offset = "0x481A80", VA = "0x481A80")]
		public RESULT loadSampleData()
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001091")]
		[Address(RVA = "0x481A88", Offset = "0x481A88", VA = "0x481A88")]
		public RESULT unloadSampleData()
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001092")]
		[Address(RVA = "0x481A90", Offset = "0x481A90", VA = "0x481A90")]
		public RESULT getSampleLoadingState(out LOADING_STATE state)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001093")]
		[Address(RVA = "0x481A98", Offset = "0x481A98", VA = "0x481A98")]
		public RESULT releaseAllInstances()
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001094")]
		[Address(RVA = "0x481AA0", Offset = "0x481AA0", VA = "0x481AA0")]
		public RESULT setCallback(EVENT_CALLBACK callback, EVENT_CALLBACK_TYPE callbackmask = EVENT_CALLBACK_TYPE.ALL)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001095")]
		[Address(RVA = "0x481AA8", Offset = "0x481AA8", VA = "0x481AA8")]
		public RESULT getUserData(out IntPtr userdata)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001096")]
		[Address(RVA = "0x481AB0", Offset = "0x481AB0", VA = "0x481AB0")]
		public RESULT setUserData(IntPtr userdata)
		{
			return default(RESULT);
		}

		[PreserveSig]
		[Token(Token = "0x6001097")]
		[Address(RVA = "0x1684F20", Offset = "0x1684F20", VA = "0x1684F20")]
		private static extern bool FMOD_Studio_EventDescription_IsValid(IntPtr eventdescription);

		[PreserveSig]
		[Token(Token = "0x6001098")]
		[Address(RVA = "0x1683468", Offset = "0x1683468", VA = "0x1683468")]
		private static extern RESULT FMOD_Studio_EventDescription_GetID(IntPtr eventdescription, out Guid id);

		[PreserveSig]
		[Token(Token = "0x6001099")]
		[Address(RVA = "0x1683798", Offset = "0x1683798", VA = "0x1683798")]
		private static extern RESULT FMOD_Studio_EventDescription_GetPath(IntPtr eventdescription, IntPtr path, int size, out int retrieved);

		[PreserveSig]
		[Token(Token = "0x600109A")]
		[Address(RVA = "0x1683858", Offset = "0x1683858", VA = "0x1683858")]
		private static extern RESULT FMOD_Studio_EventDescription_GetParameterCount(IntPtr eventdescription, out int count);

		[PreserveSig]
		[Token(Token = "0x600109B")]
		[Address(RVA = "0x1683908", Offset = "0x1683908", VA = "0x1683908")]
		private static extern RESULT FMOD_Studio_EventDescription_GetParameterByIndex(IntPtr eventdescription, int index, out PARAMETER_DESCRIPTION parameter);

		[PreserveSig]
		[Token(Token = "0x600109C")]
		[Address(RVA = "0x1683B48", Offset = "0x1683B48", VA = "0x1683B48")]
		private static extern RESULT FMOD_Studio_EventDescription_GetParameter(IntPtr eventdescription, byte[] name, out PARAMETER_DESCRIPTION parameter);

		[PreserveSig]
		[Token(Token = "0x600109D")]
		[Address(RVA = "0x1683C08", Offset = "0x1683C08", VA = "0x1683C08")]
		private static extern RESULT FMOD_Studio_EventDescription_GetUserPropertyCount(IntPtr eventdescription, out int count);

		[PreserveSig]
		[Token(Token = "0x600109E")]
		[Address(RVA = "0x1683CB8", Offset = "0x1683CB8", VA = "0x1683CB8")]
		private static extern RESULT FMOD_Studio_EventDescription_GetUserPropertyByIndex(IntPtr eventdescription, int index, out USER_PROPERTY property);

		[PreserveSig]
		[Token(Token = "0x600109F")]
		[Address(RVA = "0x1683F10", Offset = "0x1683F10", VA = "0x1683F10")]
		private static extern RESULT FMOD_Studio_EventDescription_GetUserProperty(IntPtr eventdescription, byte[] name, out USER_PROPERTY property);

		[PreserveSig]
		[Token(Token = "0x60010A0")]
		[Address(RVA = "0x1683FE8", Offset = "0x1683FE8", VA = "0x1683FE8")]
		private static extern RESULT FMOD_Studio_EventDescription_GetLength(IntPtr eventdescription, out int length);

		[PreserveSig]
		[Token(Token = "0x60010A1")]
		[Address(RVA = "0x1684098", Offset = "0x1684098", VA = "0x1684098")]
		private static extern RESULT FMOD_Studio_EventDescription_GetMinimumDistance(IntPtr eventdescription, out float distance);

		[PreserveSig]
		[Token(Token = "0x60010A2")]
		[Address(RVA = "0x1684148", Offset = "0x1684148", VA = "0x1684148")]
		private static extern RESULT FMOD_Studio_EventDescription_GetMaximumDistance(IntPtr eventdescription, out float distance);

		[PreserveSig]
		[Token(Token = "0x60010A3")]
		[Address(RVA = "0x16841F8", Offset = "0x16841F8", VA = "0x16841F8")]
		private static extern RESULT FMOD_Studio_EventDescription_GetSoundSize(IntPtr eventdescription, out float size);

		[PreserveSig]
		[Token(Token = "0x60010A4")]
		[Address(RVA = "0x16842A8", Offset = "0x16842A8", VA = "0x16842A8")]
		private static extern RESULT FMOD_Studio_EventDescription_IsSnapshot(IntPtr eventdescription, out bool snapshot);

		[PreserveSig]
		[Token(Token = "0x60010A5")]
		[Address(RVA = "0x1684370", Offset = "0x1684370", VA = "0x1684370")]
		private static extern RESULT FMOD_Studio_EventDescription_IsOneshot(IntPtr eventdescription, out bool oneshot);

		[PreserveSig]
		[Token(Token = "0x60010A6")]
		[Address(RVA = "0x1684438", Offset = "0x1684438", VA = "0x1684438")]
		private static extern RESULT FMOD_Studio_EventDescription_IsStream(IntPtr eventdescription, out bool isStream);

		[PreserveSig]
		[Token(Token = "0x60010A7")]
		[Address(RVA = "0x1684500", Offset = "0x1684500", VA = "0x1684500")]
		private static extern RESULT FMOD_Studio_EventDescription_Is3D(IntPtr eventdescription, out bool is3D);

		[PreserveSig]
		[Token(Token = "0x60010A8")]
		[Address(RVA = "0x16845C8", Offset = "0x16845C8", VA = "0x16845C8")]
		private static extern RESULT FMOD_Studio_EventDescription_HasCue(IntPtr eventdescription, out bool cue);

		[PreserveSig]
		[Token(Token = "0x60010A9")]
		[Address(RVA = "0x1684690", Offset = "0x1684690", VA = "0x1684690")]
		private static extern RESULT FMOD_Studio_EventDescription_CreateInstance(IntPtr eventdescription, out IntPtr instance);

		[PreserveSig]
		[Token(Token = "0x60010AA")]
		[Address(RVA = "0x1684740", Offset = "0x1684740", VA = "0x1684740")]
		private static extern RESULT FMOD_Studio_EventDescription_GetInstanceCount(IntPtr eventdescription, out int count);

		[PreserveSig]
		[Token(Token = "0x60010AB")]
		[Address(RVA = "0x1684988", Offset = "0x1684988", VA = "0x1684988")]
		private static extern RESULT FMOD_Studio_EventDescription_GetInstanceList(IntPtr eventdescription, IntPtr[] array, int capacity, out int count);

		[PreserveSig]
		[Token(Token = "0x60010AC")]
		[Address(RVA = "0x1684A50", Offset = "0x1684A50", VA = "0x1684A50")]
		private static extern RESULT FMOD_Studio_EventDescription_LoadSampleData(IntPtr eventdescription);

		[PreserveSig]
		[Token(Token = "0x60010AD")]
		[Address(RVA = "0x1684AF8", Offset = "0x1684AF8", VA = "0x1684AF8")]
		private static extern RESULT FMOD_Studio_EventDescription_UnloadSampleData(IntPtr eventdescription);

		[PreserveSig]
		[Token(Token = "0x60010AE")]
		[Address(RVA = "0x1684BA0", Offset = "0x1684BA0", VA = "0x1684BA0")]
		private static extern RESULT FMOD_Studio_EventDescription_GetSampleLoadingState(IntPtr eventdescription, out LOADING_STATE state);

		[PreserveSig]
		[Token(Token = "0x60010AF")]
		[Address(RVA = "0x1684C50", Offset = "0x1684C50", VA = "0x1684C50")]
		private static extern RESULT FMOD_Studio_EventDescription_ReleaseAllInstances(IntPtr eventdescription);

		[PreserveSig]
		[Token(Token = "0x60010B0")]
		[Address(RVA = "0x1684CF8", Offset = "0x1684CF8", VA = "0x1684CF8")]
		private static extern RESULT FMOD_Studio_EventDescription_SetCallback(IntPtr eventdescription, EVENT_CALLBACK callback, EVENT_CALLBACK_TYPE callbackmask);

		[PreserveSig]
		[Token(Token = "0x60010B1")]
		[Address(RVA = "0x1684DC8", Offset = "0x1684DC8", VA = "0x1684DC8")]
		private static extern RESULT FMOD_Studio_EventDescription_GetUserData(IntPtr eventdescription, out IntPtr userdata);

		[PreserveSig]
		[Token(Token = "0x60010B2")]
		[Address(RVA = "0x1684E78", Offset = "0x1684E78", VA = "0x1684E78")]
		private static extern RESULT FMOD_Studio_EventDescription_SetUserData(IntPtr eventdescription, IntPtr userdata);

		[Token(Token = "0x60010B3")]
		[Address(RVA = "0x481AD8", Offset = "0x481AD8", VA = "0x481AD8")]
		public bool hasHandle()
		{
			return default(bool);
		}

		[Token(Token = "0x60010B4")]
		[Address(RVA = "0x481AE0", Offset = "0x481AE0", VA = "0x481AE0")]
		public void clearHandle()
		{
		}

		[Token(Token = "0x60010B5")]
		[Address(RVA = "0x481B2C", Offset = "0x481B2C", VA = "0x481B2C")]
		public bool isValid()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20002BB")]
	public struct EventInstance
	{
		[Token(Token = "0x4000EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Token(Token = "0x60010B6")]
		[Address(RVA = "0x481B34", Offset = "0x481B34", VA = "0x481B34")]
		public RESULT getDescription(out EventDescription description)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60010B7")]
		[Address(RVA = "0x481B3C", Offset = "0x481B3C", VA = "0x481B3C")]
		public RESULT getVolume(out float volume, out float finalvolume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60010B8")]
		[Address(RVA = "0x481B44", Offset = "0x481B44", VA = "0x481B44")]
		public RESULT setVolume(float volume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60010B9")]
		[Address(RVA = "0x481B4C", Offset = "0x481B4C", VA = "0x481B4C")]
		public RESULT getPitch(out float pitch, out float finalpitch)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60010BA")]
		[Address(RVA = "0x481B54", Offset = "0x481B54", VA = "0x481B54")]
		public RESULT setPitch(float pitch)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60010BB")]
		[Address(RVA = "0x481B5C", Offset = "0x481B5C", VA = "0x481B5C")]
		public RESULT get3DAttributes(out ATTRIBUTES_3D attributes)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60010BC")]
		[Address(RVA = "0x481B64", Offset = "0x481B64", VA = "0x481B64")]
		public RESULT set3DAttributes(ATTRIBUTES_3D attributes)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60010BD")]
		[Address(RVA = "0x481BBC", Offset = "0x481BBC", VA = "0x481BBC")]
		public RESULT getListenerMask(out uint mask)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60010BE")]
		[Address(RVA = "0x481BC4", Offset = "0x481BC4", VA = "0x481BC4")]
		public RESULT setListenerMask(uint mask)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60010BF")]
		[Address(RVA = "0x481BCC", Offset = "0x481BCC", VA = "0x481BCC")]
		public RESULT getProperty(EVENT_PROPERTY index, out float value)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60010C0")]
		[Address(RVA = "0x481BD4", Offset = "0x481BD4", VA = "0x481BD4")]
		public RESULT setProperty(EVENT_PROPERTY index, float value)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60010C1")]
		[Address(RVA = "0x481BDC", Offset = "0x481BDC", VA = "0x481BDC")]
		public RESULT getReverbLevel(int index, out float level)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60010C2")]
		[Address(RVA = "0x481BE4", Offset = "0x481BE4", VA = "0x481BE4")]
		public RESULT setReverbLevel(int index, float level)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60010C3")]
		[Address(RVA = "0x481BEC", Offset = "0x481BEC", VA = "0x481BEC")]
		public RESULT getPaused(out bool paused)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60010C4")]
		[Address(RVA = "0x481BF4", Offset = "0x481BF4", VA = "0x481BF4")]
		public RESULT setPaused(bool paused)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60010C5")]
		[Address(RVA = "0x481BFC", Offset = "0x481BFC", VA = "0x481BFC")]
		public RESULT start()
		{
			return default(RESULT);
		}

		[Token(Token = "0x60010C6")]
		[Address(RVA = "0x481C04", Offset = "0x481C04", VA = "0x481C04")]
		public RESULT stop(STOP_MODE mode)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60010C7")]
		[Address(RVA = "0x481C0C", Offset = "0x481C0C", VA = "0x481C0C")]
		public RESULT getTimelinePosition(out int position)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60010C8")]
		[Address(RVA = "0x481C14", Offset = "0x481C14", VA = "0x481C14")]
		public RESULT setTimelinePosition(int position)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60010C9")]
		[Address(RVA = "0x481C1C", Offset = "0x481C1C", VA = "0x481C1C")]
		public RESULT getPlaybackState(out PLAYBACK_STATE state)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60010CA")]
		[Address(RVA = "0x481C24", Offset = "0x481C24", VA = "0x481C24")]
		public RESULT getChannelGroup(out ChannelGroup group)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60010CB")]
		[Address(RVA = "0x481C2C", Offset = "0x481C2C", VA = "0x481C2C")]
		public RESULT release()
		{
			return default(RESULT);
		}

		[Token(Token = "0x60010CC")]
		[Address(RVA = "0x481C34", Offset = "0x481C34", VA = "0x481C34")]
		public RESULT isVirtual(out bool virtualState)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60010CD")]
		[Address(RVA = "0x481C3C", Offset = "0x481C3C", VA = "0x481C3C")]
		public RESULT getParameter(string name, out ParameterInstance instance)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60010CE")]
		[Address(RVA = "0x481C44", Offset = "0x481C44", VA = "0x481C44")]
		public RESULT getParameterCount(out int count)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60010CF")]
		[Address(RVA = "0x481C4C", Offset = "0x481C4C", VA = "0x481C4C")]
		public RESULT getParameterByIndex(int index, out ParameterInstance instance)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60010D0")]
		[Address(RVA = "0x481C54", Offset = "0x481C54", VA = "0x481C54")]
		public RESULT getParameterValue(string name, out float value, out float finalvalue)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60010D1")]
		[Address(RVA = "0x481C70", Offset = "0x481C70", VA = "0x481C70")]
		public RESULT setParameterValue(string name, float value)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60010D2")]
		[Address(RVA = "0x481C78", Offset = "0x481C78", VA = "0x481C78")]
		public RESULT getParameterValueByIndex(int index, out float value, out float finalvalue)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60010D3")]
		[Address(RVA = "0x481C94", Offset = "0x481C94", VA = "0x481C94")]
		public RESULT setParameterValueByIndex(int index, float value)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60010D4")]
		[Address(RVA = "0x481C9C", Offset = "0x481C9C", VA = "0x481C9C")]
		public RESULT triggerCue()
		{
			return default(RESULT);
		}

		[Token(Token = "0x60010D5")]
		[Address(RVA = "0x481CA4", Offset = "0x481CA4", VA = "0x481CA4")]
		public RESULT setCallback(EVENT_CALLBACK callback, EVENT_CALLBACK_TYPE callbackmask = EVENT_CALLBACK_TYPE.ALL)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60010D6")]
		[Address(RVA = "0x481CAC", Offset = "0x481CAC", VA = "0x481CAC")]
		public RESULT getUserData(out IntPtr userdata)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60010D7")]
		[Address(RVA = "0x481CB4", Offset = "0x481CB4", VA = "0x481CB4")]
		public RESULT setUserData(IntPtr userdata)
		{
			return default(RESULT);
		}

		[PreserveSig]
		[Token(Token = "0x60010D8")]
		[Address(RVA = "0x1686DC8", Offset = "0x1686DC8", VA = "0x1686DC8")]
		private static extern bool FMOD_Studio_EventInstance_IsValid(IntPtr _event);

		[PreserveSig]
		[Token(Token = "0x60010D9")]
		[Address(RVA = "0x16850A0", Offset = "0x16850A0", VA = "0x16850A0")]
		private static extern RESULT FMOD_Studio_EventInstance_GetDescription(IntPtr _event, out IntPtr description);

		[PreserveSig]
		[Token(Token = "0x60010DA")]
		[Address(RVA = "0x1685150", Offset = "0x1685150", VA = "0x1685150")]
		private static extern RESULT FMOD_Studio_EventInstance_GetVolume(IntPtr _event, out float volume, out float finalvolume);

		[PreserveSig]
		[Token(Token = "0x60010DB")]
		[Address(RVA = "0x1685208", Offset = "0x1685208", VA = "0x1685208")]
		private static extern RESULT FMOD_Studio_EventInstance_SetVolume(IntPtr _event, float volume);

		[PreserveSig]
		[Token(Token = "0x60010DC")]
		[Address(RVA = "0x16852B8", Offset = "0x16852B8", VA = "0x16852B8")]
		private static extern RESULT FMOD_Studio_EventInstance_GetPitch(IntPtr _event, out float pitch, out float finalpitch);

		[PreserveSig]
		[Token(Token = "0x60010DD")]
		[Address(RVA = "0x1685370", Offset = "0x1685370", VA = "0x1685370")]
		private static extern RESULT FMOD_Studio_EventInstance_SetPitch(IntPtr _event, float pitch);

		[PreserveSig]
		[Token(Token = "0x60010DE")]
		[Address(RVA = "0x1685420", Offset = "0x1685420", VA = "0x1685420")]
		private static extern RESULT FMOD_Studio_EventInstance_Get3DAttributes(IntPtr _event, out ATTRIBUTES_3D attributes);

		[PreserveSig]
		[Token(Token = "0x60010DF")]
		[Address(RVA = "0x1685528", Offset = "0x1685528", VA = "0x1685528")]
		private static extern RESULT FMOD_Studio_EventInstance_Set3DAttributes(IntPtr _event, ref ATTRIBUTES_3D attributes);

		[PreserveSig]
		[Token(Token = "0x60010E0")]
		[Address(RVA = "0x16855D8", Offset = "0x16855D8", VA = "0x16855D8")]
		private static extern RESULT FMOD_Studio_EventInstance_GetListenerMask(IntPtr _event, out uint mask);

		[PreserveSig]
		[Token(Token = "0x60010E1")]
		[Address(RVA = "0x1685688", Offset = "0x1685688", VA = "0x1685688")]
		private static extern RESULT FMOD_Studio_EventInstance_SetListenerMask(IntPtr _event, uint mask);

		[PreserveSig]
		[Token(Token = "0x60010E2")]
		[Address(RVA = "0x1685738", Offset = "0x1685738", VA = "0x1685738")]
		private static extern RESULT FMOD_Studio_EventInstance_GetProperty(IntPtr _event, EVENT_PROPERTY index, out float value);

		[PreserveSig]
		[Token(Token = "0x60010E3")]
		[Address(RVA = "0x16857F0", Offset = "0x16857F0", VA = "0x16857F0")]
		private static extern RESULT FMOD_Studio_EventInstance_SetProperty(IntPtr _event, EVENT_PROPERTY index, float value);

		[PreserveSig]
		[Token(Token = "0x60010E4")]
		[Address(RVA = "0x16858A8", Offset = "0x16858A8", VA = "0x16858A8")]
		private static extern RESULT FMOD_Studio_EventInstance_GetReverbLevel(IntPtr _event, int index, out float level);

		[PreserveSig]
		[Token(Token = "0x60010E5")]
		[Address(RVA = "0x1685960", Offset = "0x1685960", VA = "0x1685960")]
		private static extern RESULT FMOD_Studio_EventInstance_SetReverbLevel(IntPtr _event, int index, float level);

		[PreserveSig]
		[Token(Token = "0x60010E6")]
		[Address(RVA = "0x1685A18", Offset = "0x1685A18", VA = "0x1685A18")]
		private static extern RESULT FMOD_Studio_EventInstance_GetPaused(IntPtr _event, out bool paused);

		[PreserveSig]
		[Token(Token = "0x60010E7")]
		[Address(RVA = "0x1685AE0", Offset = "0x1685AE0", VA = "0x1685AE0")]
		private static extern RESULT FMOD_Studio_EventInstance_SetPaused(IntPtr _event, bool paused);

		[PreserveSig]
		[Token(Token = "0x60010E8")]
		[Address(RVA = "0x1685B90", Offset = "0x1685B90", VA = "0x1685B90")]
		private static extern RESULT FMOD_Studio_EventInstance_Start(IntPtr _event);

		[PreserveSig]
		[Token(Token = "0x60010E9")]
		[Address(RVA = "0x1685C38", Offset = "0x1685C38", VA = "0x1685C38")]
		private static extern RESULT FMOD_Studio_EventInstance_Stop(IntPtr _event, STOP_MODE mode);

		[PreserveSig]
		[Token(Token = "0x60010EA")]
		[Address(RVA = "0x1685CE8", Offset = "0x1685CE8", VA = "0x1685CE8")]
		private static extern RESULT FMOD_Studio_EventInstance_GetTimelinePosition(IntPtr _event, out int position);

		[PreserveSig]
		[Token(Token = "0x60010EB")]
		[Address(RVA = "0x1685D98", Offset = "0x1685D98", VA = "0x1685D98")]
		private static extern RESULT FMOD_Studio_EventInstance_SetTimelinePosition(IntPtr _event, int position);

		[PreserveSig]
		[Token(Token = "0x60010EC")]
		[Address(RVA = "0x1685E48", Offset = "0x1685E48", VA = "0x1685E48")]
		private static extern RESULT FMOD_Studio_EventInstance_GetPlaybackState(IntPtr _event, out PLAYBACK_STATE state);

		[PreserveSig]
		[Token(Token = "0x60010ED")]
		[Address(RVA = "0x1685EF8", Offset = "0x1685EF8", VA = "0x1685EF8")]
		private static extern RESULT FMOD_Studio_EventInstance_GetChannelGroup(IntPtr _event, out IntPtr group);

		[PreserveSig]
		[Token(Token = "0x60010EE")]
		[Address(RVA = "0x1685FA8", Offset = "0x1685FA8", VA = "0x1685FA8")]
		private static extern RESULT FMOD_Studio_EventInstance_Release(IntPtr _event);

		[PreserveSig]
		[Token(Token = "0x60010EF")]
		[Address(RVA = "0x1686050", Offset = "0x1686050", VA = "0x1686050")]
		private static extern RESULT FMOD_Studio_EventInstance_IsVirtual(IntPtr _event, out bool virtualState);

		[PreserveSig]
		[Token(Token = "0x60010F0")]
		[Address(RVA = "0x16862A0", Offset = "0x16862A0", VA = "0x16862A0")]
		private static extern RESULT FMOD_Studio_EventInstance_GetParameter(IntPtr _event, byte[] name, out IntPtr parameter);

		[PreserveSig]
		[Token(Token = "0x60010F1")]
		[Address(RVA = "0x1686410", Offset = "0x1686410", VA = "0x1686410")]
		private static extern RESULT FMOD_Studio_EventInstance_GetParameterByIndex(IntPtr _event, int index, out IntPtr parameter);

		[PreserveSig]
		[Token(Token = "0x60010F2")]
		[Address(RVA = "0x1686360", Offset = "0x1686360", VA = "0x1686360")]
		private static extern RESULT FMOD_Studio_EventInstance_GetParameterCount(IntPtr _event, out int count);

		[PreserveSig]
		[Token(Token = "0x60010F3")]
		[Address(RVA = "0x1686658", Offset = "0x1686658", VA = "0x1686658")]
		private static extern RESULT FMOD_Studio_EventInstance_GetParameterValue(IntPtr _event, byte[] name, out float value, out float finalvalue);

		[PreserveSig]
		[Token(Token = "0x60010F4")]
		[Address(RVA = "0x16868A8", Offset = "0x16868A8", VA = "0x16868A8")]
		private static extern RESULT FMOD_Studio_EventInstance_SetParameterValue(IntPtr _event, byte[] name, float value);

		[PreserveSig]
		[Token(Token = "0x60010F5")]
		[Address(RVA = "0x1686980", Offset = "0x1686980", VA = "0x1686980")]
		private static extern RESULT FMOD_Studio_EventInstance_GetParameterValueByIndex(IntPtr _event, int index, out float value, out float finalvalue);

		[PreserveSig]
		[Token(Token = "0x60010F6")]
		[Address(RVA = "0x1686A40", Offset = "0x1686A40", VA = "0x1686A40")]
		private static extern RESULT FMOD_Studio_EventInstance_SetParameterValueByIndex(IntPtr _event, int index, float value);

		[PreserveSig]
		[Token(Token = "0x60010F7")]
		[Address(RVA = "0x1686AF8", Offset = "0x1686AF8", VA = "0x1686AF8")]
		private static extern RESULT FMOD_Studio_EventInstance_TriggerCue(IntPtr _event);

		[PreserveSig]
		[Token(Token = "0x60010F8")]
		[Address(RVA = "0x1686BA0", Offset = "0x1686BA0", VA = "0x1686BA0")]
		private static extern RESULT FMOD_Studio_EventInstance_SetCallback(IntPtr _event, EVENT_CALLBACK callback, EVENT_CALLBACK_TYPE callbackmask);

		[PreserveSig]
		[Token(Token = "0x60010F9")]
		[Address(RVA = "0x1686C70", Offset = "0x1686C70", VA = "0x1686C70")]
		private static extern RESULT FMOD_Studio_EventInstance_GetUserData(IntPtr _event, out IntPtr userdata);

		[PreserveSig]
		[Token(Token = "0x60010FA")]
		[Address(RVA = "0x1686D20", Offset = "0x1686D20", VA = "0x1686D20")]
		private static extern RESULT FMOD_Studio_EventInstance_SetUserData(IntPtr _event, IntPtr userdata);

		[Token(Token = "0x60010FB")]
		[Address(RVA = "0x481CBC", Offset = "0x481CBC", VA = "0x481CBC")]
		public bool hasHandle()
		{
			return default(bool);
		}

		[Token(Token = "0x60010FC")]
		[Address(RVA = "0x481CC4", Offset = "0x481CC4", VA = "0x481CC4")]
		public void clearHandle()
		{
		}

		[Token(Token = "0x60010FD")]
		[Address(RVA = "0x481D10", Offset = "0x481D10", VA = "0x481D10")]
		public bool isValid()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20002BC")]
	public struct ParameterInstance
	{
		[Token(Token = "0x4000EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Token(Token = "0x60010FE")]
		[Address(RVA = "0x481D18", Offset = "0x481D18", VA = "0x481D18")]
		public RESULT getDescription(out PARAMETER_DESCRIPTION description)
		{
			return default(RESULT);
		}

		[Token(Token = "0x60010FF")]
		[Address(RVA = "0x481D20", Offset = "0x481D20", VA = "0x481D20")]
		public RESULT getValue(out float value)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001100")]
		[Address(RVA = "0x481D28", Offset = "0x481D28", VA = "0x481D28")]
		public RESULT setValue(float value)
		{
			return default(RESULT);
		}

		[PreserveSig]
		[Token(Token = "0x6001101")]
		[Address(RVA = "0x1687150", Offset = "0x1687150", VA = "0x1687150")]
		private static extern bool FMOD_Studio_ParameterInstance_IsValid(IntPtr parameter);

		[PreserveSig]
		[Token(Token = "0x6001102")]
		[Address(RVA = "0x1686F48", Offset = "0x1686F48", VA = "0x1686F48")]
		private static extern RESULT FMOD_Studio_ParameterInstance_GetDescription(IntPtr parameter, out PARAMETER_DESCRIPTION description);

		[PreserveSig]
		[Token(Token = "0x6001103")]
		[Address(RVA = "0x1686FF8", Offset = "0x1686FF8", VA = "0x1686FF8")]
		private static extern RESULT FMOD_Studio_ParameterInstance_GetValue(IntPtr parameter, out float value);

		[PreserveSig]
		[Token(Token = "0x6001104")]
		[Address(RVA = "0x16870A8", Offset = "0x16870A8", VA = "0x16870A8")]
		private static extern RESULT FMOD_Studio_ParameterInstance_SetValue(IntPtr parameter, float value);

		[Token(Token = "0x6001105")]
		[Address(RVA = "0x481D30", Offset = "0x481D30", VA = "0x481D30")]
		public bool hasHandle()
		{
			return default(bool);
		}

		[Token(Token = "0x6001106")]
		[Address(RVA = "0x481D38", Offset = "0x481D38", VA = "0x481D38")]
		public void clearHandle()
		{
		}

		[Token(Token = "0x6001107")]
		[Address(RVA = "0x481D84", Offset = "0x481D84", VA = "0x481D84")]
		public bool isValid()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20002BD")]
	public struct Bus
	{
		[Token(Token = "0x4000EC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Token(Token = "0x6001108")]
		[Address(RVA = "0x481740", Offset = "0x481740", VA = "0x481740")]
		public RESULT getID(out Guid id)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001109")]
		[Address(RVA = "0x481748", Offset = "0x481748", VA = "0x481748")]
		public RESULT getPath(out string path)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600110A")]
		[Address(RVA = "0x481750", Offset = "0x481750", VA = "0x481750")]
		public RESULT getVolume(out float volume, out float finalvolume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600110B")]
		[Address(RVA = "0x481758", Offset = "0x481758", VA = "0x481758")]
		public RESULT setVolume(float volume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600110C")]
		[Address(RVA = "0x481760", Offset = "0x481760", VA = "0x481760")]
		public RESULT getPaused(out bool paused)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600110D")]
		[Address(RVA = "0x481768", Offset = "0x481768", VA = "0x481768")]
		public RESULT setPaused(bool paused)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600110E")]
		[Address(RVA = "0x481770", Offset = "0x481770", VA = "0x481770")]
		public RESULT getMute(out bool mute)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600110F")]
		[Address(RVA = "0x481778", Offset = "0x481778", VA = "0x481778")]
		public RESULT setMute(bool mute)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001110")]
		[Address(RVA = "0x481780", Offset = "0x481780", VA = "0x481780")]
		public RESULT stopAllEvents(STOP_MODE mode)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001111")]
		[Address(RVA = "0x481788", Offset = "0x481788", VA = "0x481788")]
		public RESULT lockChannelGroup()
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001112")]
		[Address(RVA = "0x481790", Offset = "0x481790", VA = "0x481790")]
		public RESULT unlockChannelGroup()
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001113")]
		[Address(RVA = "0x481798", Offset = "0x481798", VA = "0x481798")]
		public RESULT getChannelGroup(out ChannelGroup group)
		{
			return default(RESULT);
		}

		[PreserveSig]
		[Token(Token = "0x6001114")]
		[Address(RVA = "0x1680B90", Offset = "0x1680B90", VA = "0x1680B90")]
		private static extern bool FMOD_Studio_Bus_IsValid(IntPtr bus);

		[PreserveSig]
		[Token(Token = "0x6001115")]
		[Address(RVA = "0x16800A0", Offset = "0x16800A0", VA = "0x16800A0")]
		private static extern RESULT FMOD_Studio_Bus_GetID(IntPtr bus, out Guid id);

		[PreserveSig]
		[Token(Token = "0x6001116")]
		[Address(RVA = "0x16803D0", Offset = "0x16803D0", VA = "0x16803D0")]
		private static extern RESULT FMOD_Studio_Bus_GetPath(IntPtr bus, IntPtr path, int size, out int retrieved);

		[PreserveSig]
		[Token(Token = "0x6001117")]
		[Address(RVA = "0x1680490", Offset = "0x1680490", VA = "0x1680490")]
		private static extern RESULT FMOD_Studio_Bus_GetVolume(IntPtr bus, out float volume, out float finalvolume);

		[PreserveSig]
		[Token(Token = "0x6001118")]
		[Address(RVA = "0x1680548", Offset = "0x1680548", VA = "0x1680548")]
		private static extern RESULT FMOD_Studio_Bus_SetVolume(IntPtr bus, float value);

		[PreserveSig]
		[Token(Token = "0x6001119")]
		[Address(RVA = "0x16805F8", Offset = "0x16805F8", VA = "0x16805F8")]
		private static extern RESULT FMOD_Studio_Bus_GetPaused(IntPtr bus, out bool paused);

		[PreserveSig]
		[Token(Token = "0x600111A")]
		[Address(RVA = "0x16806C0", Offset = "0x16806C0", VA = "0x16806C0")]
		private static extern RESULT FMOD_Studio_Bus_SetPaused(IntPtr bus, bool paused);

		[PreserveSig]
		[Token(Token = "0x600111B")]
		[Address(RVA = "0x1680770", Offset = "0x1680770", VA = "0x1680770")]
		private static extern RESULT FMOD_Studio_Bus_GetMute(IntPtr bus, out bool mute);

		[PreserveSig]
		[Token(Token = "0x600111C")]
		[Address(RVA = "0x1680838", Offset = "0x1680838", VA = "0x1680838")]
		private static extern RESULT FMOD_Studio_Bus_SetMute(IntPtr bus, bool mute);

		[PreserveSig]
		[Token(Token = "0x600111D")]
		[Address(RVA = "0x16808E8", Offset = "0x16808E8", VA = "0x16808E8")]
		private static extern RESULT FMOD_Studio_Bus_StopAllEvents(IntPtr bus, STOP_MODE mode);

		[PreserveSig]
		[Token(Token = "0x600111E")]
		[Address(RVA = "0x1680998", Offset = "0x1680998", VA = "0x1680998")]
		private static extern RESULT FMOD_Studio_Bus_LockChannelGroup(IntPtr bus);

		[PreserveSig]
		[Token(Token = "0x600111F")]
		[Address(RVA = "0x1680A40", Offset = "0x1680A40", VA = "0x1680A40")]
		private static extern RESULT FMOD_Studio_Bus_UnlockChannelGroup(IntPtr bus);

		[PreserveSig]
		[Token(Token = "0x6001120")]
		[Address(RVA = "0x1680AE8", Offset = "0x1680AE8", VA = "0x1680AE8")]
		private static extern RESULT FMOD_Studio_Bus_GetChannelGroup(IntPtr bus, out IntPtr group);

		[Token(Token = "0x6001121")]
		[Address(RVA = "0x4817A0", Offset = "0x4817A0", VA = "0x4817A0")]
		public bool hasHandle()
		{
			return default(bool);
		}

		[Token(Token = "0x6001122")]
		[Address(RVA = "0x4817A8", Offset = "0x4817A8", VA = "0x4817A8")]
		public void clearHandle()
		{
		}

		[Token(Token = "0x6001123")]
		[Address(RVA = "0x4817F4", Offset = "0x4817F4", VA = "0x4817F4")]
		public bool isValid()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20002BE")]
	public struct VCA
	{
		[Token(Token = "0x4000EC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Token(Token = "0x6001124")]
		[Address(RVA = "0x4822B8", Offset = "0x4822B8", VA = "0x4822B8")]
		public RESULT getID(out Guid id)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001125")]
		[Address(RVA = "0x4822C0", Offset = "0x4822C0", VA = "0x4822C0")]
		public RESULT getPath(out string path)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001126")]
		[Address(RVA = "0x4822C8", Offset = "0x4822C8", VA = "0x4822C8")]
		public RESULT getVolume(out float volume, out float finalvolume)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001127")]
		[Address(RVA = "0x4822D0", Offset = "0x4822D0", VA = "0x4822D0")]
		public RESULT setVolume(float volume)
		{
			return default(RESULT);
		}

		[PreserveSig]
		[Token(Token = "0x6001128")]
		[Address(RVA = "0x168B760", Offset = "0x168B760", VA = "0x168B760")]
		private static extern bool FMOD_Studio_VCA_IsValid(IntPtr vca);

		[PreserveSig]
		[Token(Token = "0x6001129")]
		[Address(RVA = "0x168B210", Offset = "0x168B210", VA = "0x168B210")]
		private static extern RESULT FMOD_Studio_VCA_GetID(IntPtr vca, out Guid id);

		[PreserveSig]
		[Token(Token = "0x600112A")]
		[Address(RVA = "0x168B540", Offset = "0x168B540", VA = "0x168B540")]
		private static extern RESULT FMOD_Studio_VCA_GetPath(IntPtr vca, IntPtr path, int size, out int retrieved);

		[PreserveSig]
		[Token(Token = "0x600112B")]
		[Address(RVA = "0x168B600", Offset = "0x168B600", VA = "0x168B600")]
		private static extern RESULT FMOD_Studio_VCA_GetVolume(IntPtr vca, out float volume, out float finalvolume);

		[PreserveSig]
		[Token(Token = "0x600112C")]
		[Address(RVA = "0x168B6B8", Offset = "0x168B6B8", VA = "0x168B6B8")]
		private static extern RESULT FMOD_Studio_VCA_SetVolume(IntPtr vca, float value);

		[Token(Token = "0x600112D")]
		[Address(RVA = "0x4822D8", Offset = "0x4822D8", VA = "0x4822D8")]
		public bool hasHandle()
		{
			return default(bool);
		}

		[Token(Token = "0x600112E")]
		[Address(RVA = "0x4822E0", Offset = "0x4822E0", VA = "0x4822E0")]
		public void clearHandle()
		{
		}

		[Token(Token = "0x600112F")]
		[Address(RVA = "0x48232C", Offset = "0x48232C", VA = "0x48232C")]
		public bool isValid()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20002BF")]
	public struct Bank
	{
		[Token(Token = "0x4000EC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Token(Token = "0x6001130")]
		[Address(RVA = "0x481648", Offset = "0x481648", VA = "0x481648")]
		public RESULT getID(out Guid id)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001131")]
		[Address(RVA = "0x481650", Offset = "0x481650", VA = "0x481650")]
		public RESULT getPath(out string path)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001132")]
		[Address(RVA = "0x481658", Offset = "0x481658", VA = "0x481658")]
		public RESULT unload()
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001133")]
		[Address(RVA = "0x481660", Offset = "0x481660", VA = "0x481660")]
		public RESULT loadSampleData()
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001134")]
		[Address(RVA = "0x481668", Offset = "0x481668", VA = "0x481668")]
		public RESULT unloadSampleData()
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001135")]
		[Address(RVA = "0x481670", Offset = "0x481670", VA = "0x481670")]
		public RESULT getLoadingState(out LOADING_STATE state)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001136")]
		[Address(RVA = "0x481678", Offset = "0x481678", VA = "0x481678")]
		public RESULT getSampleLoadingState(out LOADING_STATE state)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001137")]
		[Address(RVA = "0x481680", Offset = "0x481680", VA = "0x481680")]
		public RESULT getStringCount(out int count)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001138")]
		[Address(RVA = "0x481688", Offset = "0x481688", VA = "0x481688")]
		public RESULT getStringInfo(int index, out Guid id, out string path)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001139")]
		[Address(RVA = "0x4816A4", Offset = "0x4816A4", VA = "0x4816A4")]
		public RESULT getEventCount(out int count)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600113A")]
		[Address(RVA = "0x4816AC", Offset = "0x4816AC", VA = "0x4816AC")]
		public RESULT getEventList(out EventDescription[] array)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600113B")]
		[Address(RVA = "0x4816B4", Offset = "0x4816B4", VA = "0x4816B4")]
		public RESULT getBusCount(out int count)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600113C")]
		[Address(RVA = "0x4816BC", Offset = "0x4816BC", VA = "0x4816BC")]
		public RESULT getBusList(out Bus[] array)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600113D")]
		[Address(RVA = "0x4816C4", Offset = "0x4816C4", VA = "0x4816C4")]
		public RESULT getVCACount(out int count)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600113E")]
		[Address(RVA = "0x4816CC", Offset = "0x4816CC", VA = "0x4816CC")]
		public RESULT getVCAList(out VCA[] array)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600113F")]
		[Address(RVA = "0x4816D4", Offset = "0x4816D4", VA = "0x4816D4")]
		public RESULT getUserData(out IntPtr userdata)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001140")]
		[Address(RVA = "0x4816DC", Offset = "0x4816DC", VA = "0x4816DC")]
		public RESULT setUserData(IntPtr userdata)
		{
			return default(RESULT);
		}

		[PreserveSig]
		[Token(Token = "0x6001141")]
		[Address(RVA = "0x167FF20", Offset = "0x167FF20", VA = "0x167FF20")]
		private static extern bool FMOD_Studio_Bank_IsValid(IntPtr bank);

		[PreserveSig]
		[Token(Token = "0x6001142")]
		[Address(RVA = "0x167E8D8", Offset = "0x167E8D8", VA = "0x167E8D8")]
		private static extern RESULT FMOD_Studio_Bank_GetID(IntPtr bank, out Guid id);

		[PreserveSig]
		[Token(Token = "0x6001143")]
		[Address(RVA = "0x167EC08", Offset = "0x167EC08", VA = "0x167EC08")]
		private static extern RESULT FMOD_Studio_Bank_GetPath(IntPtr bank, IntPtr path, int size, out int retrieved);

		[PreserveSig]
		[Token(Token = "0x6001144")]
		[Address(RVA = "0x167ECC8", Offset = "0x167ECC8", VA = "0x167ECC8")]
		private static extern RESULT FMOD_Studio_Bank_Unload(IntPtr bank);

		[PreserveSig]
		[Token(Token = "0x6001145")]
		[Address(RVA = "0x167ED70", Offset = "0x167ED70", VA = "0x167ED70")]
		private static extern RESULT FMOD_Studio_Bank_LoadSampleData(IntPtr bank);

		[PreserveSig]
		[Token(Token = "0x6001146")]
		[Address(RVA = "0x167EE18", Offset = "0x167EE18", VA = "0x167EE18")]
		private static extern RESULT FMOD_Studio_Bank_UnloadSampleData(IntPtr bank);

		[PreserveSig]
		[Token(Token = "0x6001147")]
		[Address(RVA = "0x167EEC0", Offset = "0x167EEC0", VA = "0x167EEC0")]
		private static extern RESULT FMOD_Studio_Bank_GetLoadingState(IntPtr bank, out LOADING_STATE state);

		[PreserveSig]
		[Token(Token = "0x6001148")]
		[Address(RVA = "0x167EF70", Offset = "0x167EF70", VA = "0x167EF70")]
		private static extern RESULT FMOD_Studio_Bank_GetSampleLoadingState(IntPtr bank, out LOADING_STATE state);

		[PreserveSig]
		[Token(Token = "0x6001149")]
		[Address(RVA = "0x167F020", Offset = "0x167F020", VA = "0x167F020")]
		private static extern RESULT FMOD_Studio_Bank_GetStringCount(IntPtr bank, out int count);

		[PreserveSig]
		[Token(Token = "0x600114A")]
		[Address(RVA = "0x167F3C8", Offset = "0x167F3C8", VA = "0x167F3C8")]
		private static extern RESULT FMOD_Studio_Bank_GetStringInfo(IntPtr bank, int index, out Guid id, IntPtr path, int size, out int retrieved);

		[PreserveSig]
		[Token(Token = "0x600114B")]
		[Address(RVA = "0x167F498", Offset = "0x167F498", VA = "0x167F498")]
		private static extern RESULT FMOD_Studio_Bank_GetEventCount(IntPtr bank, out int count);

		[PreserveSig]
		[Token(Token = "0x600114C")]
		[Address(RVA = "0x167F6E0", Offset = "0x167F6E0", VA = "0x167F6E0")]
		private static extern RESULT FMOD_Studio_Bank_GetEventList(IntPtr bank, IntPtr[] array, int capacity, out int count);

		[PreserveSig]
		[Token(Token = "0x600114D")]
		[Address(RVA = "0x167F7A8", Offset = "0x167F7A8", VA = "0x167F7A8")]
		private static extern RESULT FMOD_Studio_Bank_GetBusCount(IntPtr bank, out int count);

		[PreserveSig]
		[Token(Token = "0x600114E")]
		[Address(RVA = "0x167F9F0", Offset = "0x167F9F0", VA = "0x167F9F0")]
		private static extern RESULT FMOD_Studio_Bank_GetBusList(IntPtr bank, IntPtr[] array, int capacity, out int count);

		[PreserveSig]
		[Token(Token = "0x600114F")]
		[Address(RVA = "0x167FAB8", Offset = "0x167FAB8", VA = "0x167FAB8")]
		private static extern RESULT FMOD_Studio_Bank_GetVCACount(IntPtr bank, out int count);

		[PreserveSig]
		[Token(Token = "0x6001150")]
		[Address(RVA = "0x167FD00", Offset = "0x167FD00", VA = "0x167FD00")]
		private static extern RESULT FMOD_Studio_Bank_GetVCAList(IntPtr bank, IntPtr[] array, int capacity, out int count);

		[PreserveSig]
		[Token(Token = "0x6001151")]
		[Address(RVA = "0x167FDC8", Offset = "0x167FDC8", VA = "0x167FDC8")]
		private static extern RESULT FMOD_Studio_Bank_GetUserData(IntPtr bank, out IntPtr userdata);

		[PreserveSig]
		[Token(Token = "0x6001152")]
		[Address(RVA = "0x167FE78", Offset = "0x167FE78", VA = "0x167FE78")]
		private static extern RESULT FMOD_Studio_Bank_SetUserData(IntPtr bank, IntPtr userdata);

		[Token(Token = "0x6001153")]
		[Address(RVA = "0x4816E4", Offset = "0x4816E4", VA = "0x4816E4")]
		public bool hasHandle()
		{
			return default(bool);
		}

		[Token(Token = "0x6001154")]
		[Address(RVA = "0x4816EC", Offset = "0x4816EC", VA = "0x4816EC")]
		public void clearHandle()
		{
		}

		[Token(Token = "0x6001155")]
		[Address(RVA = "0x481738", Offset = "0x481738", VA = "0x481738")]
		public bool isValid()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20002C0")]
	public struct CommandReplay
	{
		[Token(Token = "0x4000EC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Token(Token = "0x6001156")]
		[Address(RVA = "0x4818C0", Offset = "0x4818C0", VA = "0x4818C0")]
		public RESULT getSystem(out System system)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001157")]
		[Address(RVA = "0x4818C8", Offset = "0x4818C8", VA = "0x4818C8")]
		public RESULT getLength(out float totalTime)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001158")]
		[Address(RVA = "0x4818D0", Offset = "0x4818D0", VA = "0x4818D0")]
		public RESULT getCommandCount(out int count)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001159")]
		[Address(RVA = "0x4818D8", Offset = "0x4818D8", VA = "0x4818D8")]
		public RESULT getCommandInfo(int commandIndex, out COMMAND_INFO info)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600115A")]
		[Address(RVA = "0x4818E0", Offset = "0x4818E0", VA = "0x4818E0")]
		public RESULT getCommandString(int commandIndex, out string description)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600115B")]
		[Address(RVA = "0x4818E8", Offset = "0x4818E8", VA = "0x4818E8")]
		public RESULT getCommandAtTime(float time, out int commandIndex)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600115C")]
		[Address(RVA = "0x4818F0", Offset = "0x4818F0", VA = "0x4818F0")]
		public RESULT setBankPath(string bankPath)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600115D")]
		[Address(RVA = "0x4818F8", Offset = "0x4818F8", VA = "0x4818F8")]
		public RESULT start()
		{
			return default(RESULT);
		}

		[Token(Token = "0x600115E")]
		[Address(RVA = "0x481900", Offset = "0x481900", VA = "0x481900")]
		public RESULT stop()
		{
			return default(RESULT);
		}

		[Token(Token = "0x600115F")]
		[Address(RVA = "0x481908", Offset = "0x481908", VA = "0x481908")]
		public RESULT seekToTime(float time)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001160")]
		[Address(RVA = "0x481910", Offset = "0x481910", VA = "0x481910")]
		public RESULT seekToCommand(int commandIndex)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001161")]
		[Address(RVA = "0x481918", Offset = "0x481918", VA = "0x481918")]
		public RESULT getPaused(out bool paused)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001162")]
		[Address(RVA = "0x481920", Offset = "0x481920", VA = "0x481920")]
		public RESULT setPaused(bool paused)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001163")]
		[Address(RVA = "0x481928", Offset = "0x481928", VA = "0x481928")]
		public RESULT getPlaybackState(out PLAYBACK_STATE state)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001164")]
		[Address(RVA = "0x481930", Offset = "0x481930", VA = "0x481930")]
		public RESULT getCurrentCommand(out int commandIndex, out float currentTime)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001165")]
		[Address(RVA = "0x481938", Offset = "0x481938", VA = "0x481938")]
		public RESULT release()
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001166")]
		[Address(RVA = "0x481940", Offset = "0x481940", VA = "0x481940")]
		public RESULT setFrameCallback(COMMANDREPLAY_FRAME_CALLBACK callback)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001167")]
		[Address(RVA = "0x481948", Offset = "0x481948", VA = "0x481948")]
		public RESULT setLoadBankCallback(COMMANDREPLAY_LOAD_BANK_CALLBACK callback)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001168")]
		[Address(RVA = "0x481950", Offset = "0x481950", VA = "0x481950")]
		public RESULT setCreateInstanceCallback(COMMANDREPLAY_CREATE_INSTANCE_CALLBACK callback)
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001169")]
		[Address(RVA = "0x481958", Offset = "0x481958", VA = "0x481958")]
		public RESULT getUserData(out IntPtr userdata)
		{
			return default(RESULT);
		}

		[Token(Token = "0x600116A")]
		[Address(RVA = "0x481960", Offset = "0x481960", VA = "0x481960")]
		public RESULT setUserData(IntPtr userdata)
		{
			return default(RESULT);
		}

		[PreserveSig]
		[Token(Token = "0x600116B")]
		[Address(RVA = "0x1682EE0", Offset = "0x1682EE0", VA = "0x1682EE0")]
		private static extern bool FMOD_Studio_CommandReplay_IsValid(IntPtr replay);

		[PreserveSig]
		[Token(Token = "0x600116C")]
		[Address(RVA = "0x1681BF8", Offset = "0x1681BF8", VA = "0x1681BF8")]
		private static extern RESULT FMOD_Studio_CommandReplay_GetSystem(IntPtr replay, out IntPtr system);

		[PreserveSig]
		[Token(Token = "0x600116D")]
		[Address(RVA = "0x1681CA8", Offset = "0x1681CA8", VA = "0x1681CA8")]
		private static extern RESULT FMOD_Studio_CommandReplay_GetLength(IntPtr replay, out float totalTime);

		[PreserveSig]
		[Token(Token = "0x600116E")]
		[Address(RVA = "0x1681D58", Offset = "0x1681D58", VA = "0x1681D58")]
		private static extern RESULT FMOD_Studio_CommandReplay_GetCommandCount(IntPtr replay, out int count);

		[PreserveSig]
		[Token(Token = "0x600116F")]
		[Address(RVA = "0x1681E08", Offset = "0x1681E08", VA = "0x1681E08")]
		private static extern RESULT FMOD_Studio_CommandReplay_GetCommandInfo(IntPtr replay, int commandIndex, out COMMAND_INFO info);

		[PreserveSig]
		[Token(Token = "0x6001170")]
		[Address(RVA = "0x1682148", Offset = "0x1682148", VA = "0x1682148")]
		private static extern RESULT FMOD_Studio_CommandReplay_GetCommandString(IntPtr replay, int commandIndex, IntPtr description, int capacity);

		[PreserveSig]
		[Token(Token = "0x6001171")]
		[Address(RVA = "0x1682208", Offset = "0x1682208", VA = "0x1682208")]
		private static extern RESULT FMOD_Studio_CommandReplay_GetCommandAtTime(IntPtr replay, float time, out int commandIndex);

		[PreserveSig]
		[Token(Token = "0x6001172")]
		[Address(RVA = "0x1682440", Offset = "0x1682440", VA = "0x1682440")]
		private static extern RESULT FMOD_Studio_CommandReplay_SetBankPath(IntPtr replay, byte[] bankPath);

		[PreserveSig]
		[Token(Token = "0x6001173")]
		[Address(RVA = "0x16824F8", Offset = "0x16824F8", VA = "0x16824F8")]
		private static extern RESULT FMOD_Studio_CommandReplay_Start(IntPtr replay);

		[PreserveSig]
		[Token(Token = "0x6001174")]
		[Address(RVA = "0x16825A0", Offset = "0x16825A0", VA = "0x16825A0")]
		private static extern RESULT FMOD_Studio_CommandReplay_Stop(IntPtr replay);

		[PreserveSig]
		[Token(Token = "0x6001175")]
		[Address(RVA = "0x1682648", Offset = "0x1682648", VA = "0x1682648")]
		private static extern RESULT FMOD_Studio_CommandReplay_SeekToTime(IntPtr replay, float time);

		[PreserveSig]
		[Token(Token = "0x6001176")]
		[Address(RVA = "0x16826F8", Offset = "0x16826F8", VA = "0x16826F8")]
		private static extern RESULT FMOD_Studio_CommandReplay_SeekToCommand(IntPtr replay, int commandIndex);

		[PreserveSig]
		[Token(Token = "0x6001177")]
		[Address(RVA = "0x16827A8", Offset = "0x16827A8", VA = "0x16827A8")]
		private static extern RESULT FMOD_Studio_CommandReplay_GetPaused(IntPtr replay, out bool paused);

		[PreserveSig]
		[Token(Token = "0x6001178")]
		[Address(RVA = "0x1682870", Offset = "0x1682870", VA = "0x1682870")]
		private static extern RESULT FMOD_Studio_CommandReplay_SetPaused(IntPtr replay, bool paused);

		[PreserveSig]
		[Token(Token = "0x6001179")]
		[Address(RVA = "0x1682920", Offset = "0x1682920", VA = "0x1682920")]
		private static extern RESULT FMOD_Studio_CommandReplay_GetPlaybackState(IntPtr replay, out PLAYBACK_STATE state);

		[PreserveSig]
		[Token(Token = "0x600117A")]
		[Address(RVA = "0x16829D0", Offset = "0x16829D0", VA = "0x16829D0")]
		private static extern RESULT FMOD_Studio_CommandReplay_GetCurrentCommand(IntPtr replay, out int commandIndex, out float currentTime);

		[PreserveSig]
		[Token(Token = "0x600117B")]
		[Address(RVA = "0x1682A88", Offset = "0x1682A88", VA = "0x1682A88")]
		private static extern RESULT FMOD_Studio_CommandReplay_Release(IntPtr replay);

		[PreserveSig]
		[Token(Token = "0x600117C")]
		[Address(RVA = "0x1682B30", Offset = "0x1682B30", VA = "0x1682B30")]
		private static extern RESULT FMOD_Studio_CommandReplay_SetFrameCallback(IntPtr replay, COMMANDREPLAY_FRAME_CALLBACK callback);

		[PreserveSig]
		[Token(Token = "0x600117D")]
		[Address(RVA = "0x1682BF8", Offset = "0x1682BF8", VA = "0x1682BF8")]
		private static extern RESULT FMOD_Studio_CommandReplay_SetLoadBankCallback(IntPtr replay, COMMANDREPLAY_LOAD_BANK_CALLBACK callback);

		[PreserveSig]
		[Token(Token = "0x600117E")]
		[Address(RVA = "0x1682CC0", Offset = "0x1682CC0", VA = "0x1682CC0")]
		private static extern RESULT FMOD_Studio_CommandReplay_SetCreateInstanceCallback(IntPtr replay, COMMANDREPLAY_CREATE_INSTANCE_CALLBACK callback);

		[PreserveSig]
		[Token(Token = "0x600117F")]
		[Address(RVA = "0x1682D88", Offset = "0x1682D88", VA = "0x1682D88")]
		private static extern RESULT FMOD_Studio_CommandReplay_GetUserData(IntPtr replay, out IntPtr userdata);

		[PreserveSig]
		[Token(Token = "0x6001180")]
		[Address(RVA = "0x1682E38", Offset = "0x1682E38", VA = "0x1682E38")]
		private static extern RESULT FMOD_Studio_CommandReplay_SetUserData(IntPtr replay, IntPtr userdata);

		[Token(Token = "0x6001181")]
		[Address(RVA = "0x481968", Offset = "0x481968", VA = "0x481968")]
		public bool hasHandle()
		{
			return default(bool);
		}

		[Token(Token = "0x6001182")]
		[Address(RVA = "0x481970", Offset = "0x481970", VA = "0x481970")]
		public void clearHandle()
		{
		}

		[Token(Token = "0x6001183")]
		[Address(RVA = "0x4819BC", Offset = "0x4819BC", VA = "0x4819BC")]
		public bool isValid()
		{
			return default(bool);
		}
	}
}
namespace FMODUnity
{
	[Token(Token = "0x20002C1")]
	public class BankRefAttribute : PropertyAttribute
	{
		[Token(Token = "0x6001184")]
		[Address(RVA = "0x1691D74", Offset = "0x1691D74", VA = "0x1691D74")]
		public BankRefAttribute()
		{
		}
	}
	[Token(Token = "0x20002C2")]
	public class EventRefAttribute : PropertyAttribute
	{
		[Token(Token = "0x6001185")]
		[Address(RVA = "0x1691FFC", Offset = "0x1691FFC", VA = "0x1691FFC")]
		public EventRefAttribute()
		{
		}
	}
	[Token(Token = "0x20002C3")]
	public class OneshotList
	{
		[Token(Token = "0x2000367")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3968F8", Offset = "0x3968F8")]
		private sealed class <>c__DisplayClass2_0
		{
			[Token(Token = "0x40013B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public PLAYBACK_STATE state;

			[Token(Token = "0x60016B2")]
			[Address(RVA = "0x1692494", Offset = "0x1692494", VA = "0x1692494")]
			public <>c__DisplayClass2_0()
			{
			}

			[Token(Token = "0x60016B3")]
			[Address(RVA = "0x1692858", Offset = "0x1692858", VA = "0x1692858")]
			internal bool <Update>b__0(EventInstance x)
			{
				return default(bool);
			}
		}

		[Serializable]
		[Token(Token = "0x2000368")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396908", Offset = "0x396908")]
		private sealed class <>c
		{
			[Token(Token = "0x40013B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40013B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public static Predicate<EventInstance> <>9__2_1;

			[Token(Token = "0x60016B5")]
			[Address(RVA = "0x169282C", Offset = "0x169282C", VA = "0x169282C")]
			public <>c()
			{
			}

			[Token(Token = "0x60016B6")]
			[Address(RVA = "0x1692834", Offset = "0x1692834", VA = "0x1692834")]
			internal bool <Update>b__2_1(EventInstance x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000EC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private List<EventInstance> instances;

		[Token(Token = "0x6001186")]
		[Address(RVA = "0x1692004", Offset = "0x1692004", VA = "0x1692004")]
		public void Add(EventInstance instance)
		{
		}

		[Token(Token = "0x6001187")]
		[Address(RVA = "0x1692078", Offset = "0x1692078", VA = "0x1692078")]
		public void Update(ATTRIBUTES_3D attributes)
		{
		}

		[Token(Token = "0x6001188")]
		[Address(RVA = "0x169249C", Offset = "0x169249C", VA = "0x169249C")]
		public void SetParameterValue(string name, float value)
		{
		}

		[Token(Token = "0x6001189")]
		[Address(RVA = "0x16925E0", Offset = "0x16925E0", VA = "0x16925E0")]
		public void StopAll(STOP_MODE stopMode)
		{
		}

		[Token(Token = "0x600118A")]
		[Address(RVA = "0x169273C", Offset = "0x169273C", VA = "0x169273C")]
		public OneshotList()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002C4")]
	public class ParamRef
	{
		[Token(Token = "0x4000EC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string Name;

		[Token(Token = "0x4000EC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float Value;

		[Token(Token = "0x600118B")]
		[Address(RVA = "0x1692888", Offset = "0x1692888", VA = "0x1692888")]
		public ParamRef()
		{
		}
	}
	[Token(Token = "0x20002C5")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x396058", Offset = "0x396058")]
	public class RuntimeManager : MonoBehaviour
	{
		[Token(Token = "0x2000369")]
		private struct LoadedBank
		{
			[Token(Token = "0x40013B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Bank Bank;

			[Token(Token = "0x40013B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int RefCount;
		}

		[Token(Token = "0x200036A")]
		private class GuidComparer : IEqualityComparer<Guid>
		{
			[Token(Token = "0x60016B7")]
			[Address(RVA = "0xF94D68", Offset = "0xF94D68", VA = "0xF94D68", Slot = "4")]
			private bool System.Collections.Generic.IEqualityComparer<System.Guid>.Equals(Guid x, Guid y)
			{
				return default(bool);
			}

			[Token(Token = "0x60016B8")]
			[Address(RVA = "0xF94DB8", Offset = "0xF94DB8", VA = "0xF94DB8", Slot = "5")]
			private int System.Collections.Generic.IEqualityComparer<System.Guid>.GetHashCode(Guid obj)
			{
				return default(int);
			}

			[Token(Token = "0x60016B9")]
			[Address(RVA = "0xF94CD4", Offset = "0xF94CD4", VA = "0xF94CD4")]
			public GuidComparer()
			{
			}
		}

		[Token(Token = "0x200036B")]
		private class AttachedInstance
		{
			[Token(Token = "0x40013B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public EventInstance instance;

			[Token(Token = "0x40013BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Transform transform;

			[Token(Token = "0x40013BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody rigidBody;

			[Token(Token = "0x40013BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Rigidbody2D rigidBody2D;

			[Token(Token = "0x60016BA")]
			[Address(RVA = "0xF9154C", Offset = "0xF9154C", VA = "0xF9154C")]
			public AttachedInstance()
			{
			}
		}

		[Token(Token = "0x4000EC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static SystemNotInitializedException initException;

		[Token(Token = "0x4000EC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static RuntimeManager instance;

		[Token(Token = "0x4000EC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static bool isQuitting;

		[Token(Token = "0x4000ECA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private FMODPlatform fmodPlatform;

		[Token(Token = "0x4000ECB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private FMOD.Studio.System studioSystem;

		[Token(Token = "0x4000ECC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private FMOD.System lowlevelSystem;

		[Token(Token = "0x4000ECD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private DSP mixerHead;

		[Token(Token = "0x4000ECE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private long[] cachedPointers;

		[Token(Token = "0x4000ECF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<string, LoadedBank> loadedBanks;

		[Token(Token = "0x4000ED0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Dictionary<string, uint> loadedPlugins;

		[Token(Token = "0x4000ED1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Dictionary<Guid, EventDescription> cachedDescriptions;

		[Token(Token = "0x4000ED2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private List<AttachedInstance> attachedInstances;

		[Token(Token = "0x4000ED3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool listenerWarningIssued;

		[Token(Token = "0x4000ED4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private string lastDebugText;

		[Token(Token = "0x4000ED5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float lastDebugUpdate;

		[Token(Token = "0x4000ED6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static bool[] HasListener;

		[Token(Token = "0x170000CD")]
		private static RuntimeManager Instance
		{
			[Token(Token = "0x600118C")]
			[Address(RVA = "0xF8E7D4", Offset = "0xF8E7D4", VA = "0xF8E7D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000CE")]
		public static FMOD.Studio.System StudioSystem
		{
			[Token(Token = "0x600118D")]
			[Address(RVA = "0xF8FC3C", Offset = "0xF8FC3C", VA = "0xF8FC3C")]
			get
			{
				return default(FMOD.Studio.System);
			}
		}

		[Token(Token = "0x170000CF")]
		public static FMOD.System LowlevelSystem
		{
			[Token(Token = "0x600118E")]
			[Address(RVA = "0xF8FCC0", Offset = "0xF8FCC0", VA = "0xF8FCC0")]
			get
			{
				return default(FMOD.System);
			}
		}

		[Token(Token = "0x170000D0")]
		public static bool IsInitialized
		{
			[Token(Token = "0x60011B2")]
			[Address(RVA = "0xF9494C", Offset = "0xF9494C", VA = "0xF9494C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600118F")]
		[Address(RVA = "0xF8FD44", Offset = "0xF8FD44", VA = "0xF8FD44")]
		private void CheckInitResult(RESULT result, string cause)
		{
		}

		[Token(Token = "0x6001190")]
		[Address(RVA = "0xF8F4E8", Offset = "0xF8F4E8", VA = "0xF8F4E8")]
		private RESULT Initialize()
		{
			return default(RESULT);
		}

		[Token(Token = "0x6001191")]
		[Address(RVA = "0xF90BB4", Offset = "0xF90BB4", VA = "0xF90BB4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001192")]
		[Address(RVA = "0xF91440", Offset = "0xF91440", VA = "0xF91440")]
		public static void AttachInstanceToGameObject(EventInstance instance, Transform transform, Rigidbody rigidBody)
		{
		}

		[Token(Token = "0x6001193")]
		[Address(RVA = "0xF91554", Offset = "0xF91554", VA = "0xF91554")]
		public static void AttachInstanceToGameObject(EventInstance instance, Transform transform, Rigidbody2D rigidBody2D)
		{
		}

		[Token(Token = "0x6001194")]
		[Address(RVA = "0xF91674", Offset = "0xF91674", VA = "0xF91674")]
		public static void DetachInstanceFromGameObject(EventInstance instance)
		{
		}

		[Token(Token = "0x6001195")]
		[Address(RVA = "0xF917A4", Offset = "0xF917A4", VA = "0xF917A4")]
		private void DrawDebugOverlay(int windowID)
		{
		}

		[Token(Token = "0x6001196")]
		[Address(RVA = "0xF91D5C", Offset = "0xF91D5C", VA = "0xF91D5C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001197")]
		[Address(RVA = "0xF91DEC", Offset = "0xF91DEC", VA = "0xF91DEC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001198")]
		[Address(RVA = "0xF91EB4", Offset = "0xF91EB4", VA = "0xF91EB4")]
		private void OnApplicationPause(bool pauseStatus)
		{
		}

		[Token(Token = "0x6001199")]
		[Address(RVA = "0xF9200C", Offset = "0xF9200C", VA = "0xF9200C")]
		public static void LoadBank(string bankName, bool loadSamples = false)
		{
		}

		[Token(Token = "0x600119A")]
		[Address(RVA = "0xF927AC", Offset = "0xF927AC", VA = "0xF927AC")]
		public static void LoadBank(TextAsset asset, bool loadSamples = false)
		{
		}

		[Token(Token = "0x600119B")]
		[Address(RVA = "0xF90880", Offset = "0xF90880", VA = "0xF90880")]
		private void LoadBanks(Settings fmodSettings)
		{
		}

		[Token(Token = "0x600119C")]
		[Address(RVA = "0xF92B94", Offset = "0xF92B94", VA = "0xF92B94")]
		public static void UnloadBank(string bankName)
		{
		}

		[Token(Token = "0x600119D")]
		[Address(RVA = "0xF92D58", Offset = "0xF92D58", VA = "0xF92D58")]
		public static bool AnyBankLoading()
		{
			return default(bool);
		}

		[Token(Token = "0x600119E")]
		[Address(RVA = "0xF92B08", Offset = "0xF92B08", VA = "0xF92B08")]
		public static void WaitForAllLoads()
		{
		}

		[Token(Token = "0x600119F")]
		[Address(RVA = "0xF92F1C", Offset = "0xF92F1C", VA = "0xF92F1C")]
		public static Guid PathToGUID(string path)
		{
			return default(Guid);
		}

		[Token(Token = "0x60011A0")]
		[Address(RVA = "0xF9309C", Offset = "0xF9309C", VA = "0xF9309C")]
		public static EventInstance CreateInstance(string path)
		{
			return default(EventInstance);
		}

		[Token(Token = "0x60011A1")]
		[Address(RVA = "0xF931E0", Offset = "0xF931E0", VA = "0xF931E0")]
		public static EventInstance CreateInstance(Guid guid)
		{
			return default(EventInstance);
		}

		[Token(Token = "0x60011A2")]
		[Address(RVA = "0xF935B4", Offset = "0xF935B4", VA = "0xF935B4")]
		public static void PlayOneShot(string path, [Optional] Vector3 position)
		{
		}

		[Token(Token = "0x60011A3")]
		[Address(RVA = "0xF93710", Offset = "0xF93710", VA = "0xF93710")]
		public static void PlayOneShot(Guid guid, [Optional] Vector3 position)
		{
		}

		[Token(Token = "0x60011A4")]
		[Address(RVA = "0xF9391C", Offset = "0xF9391C", VA = "0xF9391C")]
		public static void PlayOneShotAttached(string path, GameObject gameObject)
		{
		}

		[Token(Token = "0x60011A5")]
		[Address(RVA = "0xF93A68", Offset = "0xF93A68", VA = "0xF93A68")]
		public static void PlayOneShotAttached(Guid guid, GameObject gameObject)
		{
		}

		[Token(Token = "0x60011A6")]
		[Address(RVA = "0xF93B8C", Offset = "0xF93B8C", VA = "0xF93B8C")]
		public static EventDescription GetEventDescription(string path)
		{
			return default(EventDescription);
		}

		[Token(Token = "0x60011A7")]
		[Address(RVA = "0xF9329C", Offset = "0xF9329C", VA = "0xF9329C")]
		public static EventDescription GetEventDescription(Guid guid)
		{
			return default(EventDescription);
		}

		[Token(Token = "0x60011A8")]
		[Address(RVA = "0xF93CD0", Offset = "0xF93CD0", VA = "0xF93CD0")]
		public static void SetListenerLocation(GameObject gameObject, [Optional] Rigidbody rigidBody)
		{
		}

		[Token(Token = "0x60011A9")]
		[Address(RVA = "0xF93F28", Offset = "0xF93F28", VA = "0xF93F28")]
		public static void SetListenerLocation(GameObject gameObject, Rigidbody2D rigidBody2D)
		{
		}

		[Token(Token = "0x60011AA")]
		[Address(RVA = "0xF941A0", Offset = "0xF941A0", VA = "0xF941A0")]
		public static void SetListenerLocation(Transform transform)
		{
		}

		[Token(Token = "0x60011AB")]
		[Address(RVA = "0xF94338", Offset = "0xF94338", VA = "0xF94338")]
		public static void SetListenerLocation(int listenerIndex, GameObject gameObject, [Optional] Rigidbody rigidBody)
		{
		}

		[Token(Token = "0x60011AC")]
		[Address(RVA = "0xF94430", Offset = "0xF94430", VA = "0xF94430")]
		public static void SetListenerLocation(int listenerIndex, GameObject gameObject, Rigidbody2D rigidBody2D)
		{
		}

		[Token(Token = "0x60011AD")]
		[Address(RVA = "0xF94528", Offset = "0xF94528", VA = "0xF94528")]
		public static void SetListenerLocation(int listenerIndex, Transform transform)
		{
		}

		[Token(Token = "0x60011AE")]
		[Address(RVA = "0xF94620", Offset = "0xF94620", VA = "0xF94620")]
		public static Bus GetBus(string path)
		{
			return default(Bus);
		}

		[Token(Token = "0x60011AF")]
		[Address(RVA = "0xF94708", Offset = "0xF94708", VA = "0xF94708")]
		public static VCA GetVCA(string path)
		{
			return default(VCA);
		}

		[Token(Token = "0x60011B0")]
		[Address(RVA = "0xF91F64", Offset = "0xF91F64", VA = "0xF91F64")]
		public static void PauseAllEvents(bool paused)
		{
		}

		[Token(Token = "0x60011B1")]
		[Address(RVA = "0xF948A4", Offset = "0xF948A4", VA = "0xF948A4")]
		public static void MuteAllEvents(bool muted)
		{
		}

		[Token(Token = "0x60011B3")]
		[Address(RVA = "0xF906A4", Offset = "0xF906A4", VA = "0xF906A4")]
		private void LoadPlugins(Settings fmodSettings)
		{
		}

		[Token(Token = "0x60011B4")]
		[Address(RVA = "0xF94B70", Offset = "0xF94B70", VA = "0xF94B70")]
		public RuntimeManager()
		{
		}
	}
	[Token(Token = "0x20002C6")]
	public class EventNotFoundException : Exception
	{
		[Token(Token = "0x4000ED7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Guid Guid;

		[Token(Token = "0x4000ED8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public string Path;

		[Token(Token = "0x60011B6")]
		[Address(RVA = "0x1691E3C", Offset = "0x1691E3C", VA = "0x1691E3C")]
		public EventNotFoundException(string path)
		{
		}

		[Token(Token = "0x60011B7")]
		[Address(RVA = "0x1691EF4", Offset = "0x1691EF4", VA = "0x1691EF4")]
		public EventNotFoundException(Guid guid)
		{
		}
	}
	[Token(Token = "0x20002C7")]
	public class BusNotFoundException : Exception
	{
		[Token(Token = "0x4000ED9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public string Path;

		[Token(Token = "0x60011B8")]
		[Address(RVA = "0x1691D7C", Offset = "0x1691D7C", VA = "0x1691D7C")]
		public BusNotFoundException(string path)
		{
		}
	}
	[Token(Token = "0x20002C8")]
	public class VCANotFoundException : Exception
	{
		[Token(Token = "0x4000EDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public string Path;

		[Token(Token = "0x60011B9")]
		[Address(RVA = "0xF947EC", Offset = "0xF947EC", VA = "0xF947EC")]
		public VCANotFoundException(string path)
		{
		}
	}
	[Token(Token = "0x20002C9")]
	public class BankLoadException : Exception
	{
		[Token(Token = "0x4000EDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public string Path;

		[Token(Token = "0x4000EDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public RESULT Result;

		[Token(Token = "0x60011BA")]
		[Address(RVA = "0x1691B90", Offset = "0x1691B90", VA = "0x1691B90")]
		public BankLoadException(string path, RESULT result)
		{
		}

		[Token(Token = "0x60011BB")]
		[Address(RVA = "0x1691CBC", Offset = "0x1691CBC", VA = "0x1691CBC")]
		public BankLoadException(string path, string error)
		{
		}
	}
	[Token(Token = "0x20002CA")]
	public class SystemNotInitializedException : Exception
	{
		[Token(Token = "0x4000EDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public RESULT Result;

		[Token(Token = "0x4000EDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string Location;

		[Token(Token = "0x60011BC")]
		[Address(RVA = "0xF8FB10", Offset = "0xF8FB10", VA = "0xF8FB10")]
		public SystemNotInitializedException(RESULT result, string location)
		{
		}

		[Token(Token = "0x60011BD")]
		[Address(RVA = "0xF8FA7C", Offset = "0xF8FA7C", VA = "0xF8FA7C")]
		public SystemNotInitializedException(Exception inner)
		{
		}
	}
	[Token(Token = "0x20002CB")]
	public enum EmitterGameEvent
	{
		[Token(Token = "0x4000EE0")]
		None,
		[Token(Token = "0x4000EE1")]
		ObjectStart,
		[Token(Token = "0x4000EE2")]
		ObjectDestroy,
		[Token(Token = "0x4000EE3")]
		TriggerEnter,
		[Token(Token = "0x4000EE4")]
		TriggerExit,
		[Token(Token = "0x4000EE5")]
		TriggerEnter2D,
		[Token(Token = "0x4000EE6")]
		TriggerExit2D,
		[Token(Token = "0x4000EE7")]
		CollisionEnter,
		[Token(Token = "0x4000EE8")]
		CollisionExit,
		[Token(Token = "0x4000EE9")]
		CollisionEnter2D,
		[Token(Token = "0x4000EEA")]
		CollisionExit2D,
		[Token(Token = "0x4000EEB")]
		ObjectEnable,
		[Token(Token = "0x4000EEC")]
		ObjectDisable
	}
	[Token(Token = "0x20002CC")]
	public enum LoaderGameEvent
	{
		[Token(Token = "0x4000EEE")]
		None,
		[Token(Token = "0x4000EEF")]
		ObjectStart,
		[Token(Token = "0x4000EF0")]
		ObjectDestroy,
		[Token(Token = "0x4000EF1")]
		TriggerEnter,
		[Token(Token = "0x4000EF2")]
		TriggerExit,
		[Token(Token = "0x4000EF3")]
		TriggerEnter2D,
		[Token(Token = "0x4000EF4")]
		TriggerExit2D
	}
	[Token(Token = "0x20002CD")]
	public static class RuntimeUtils
	{
		[Token(Token = "0x4000EF5")]
		public const string LogFileName = "fmod.log";

		[Token(Token = "0x4000EF6")]
		private const string BankExtension = ".bank";

		[Token(Token = "0x60011BE")]
		[Address(RVA = "0xF94DE4", Offset = "0xF94DE4", VA = "0xF94DE4")]
		public static VECTOR ToFMODVector(this Vector3 vec)
		{
			return default(VECTOR);
		}

		[Token(Token = "0x60011BF")]
		[Address(RVA = "0xF9383C", Offset = "0xF9383C", VA = "0xF9383C")]
		public static ATTRIBUTES_3D To3DAttributes(this Vector3 pos)
		{
			return default(ATTRIBUTES_3D);
		}

		[Token(Token = "0x60011C0")]
		[Address(RVA = "0xF94278", Offset = "0xF94278", VA = "0xF94278")]
		public static ATTRIBUTES_3D To3DAttributes(this Transform transform)
		{
			return default(ATTRIBUTES_3D);
		}

		[Token(Token = "0x60011C1")]
		[Address(RVA = "0xF91188", Offset = "0xF91188", VA = "0xF91188")]
		public static ATTRIBUTES_3D To3DAttributes(Transform transform, [Optional] Rigidbody rigidbody)
		{
			return default(ATTRIBUTES_3D);
		}

		[Token(Token = "0x60011C2")]
		[Address(RVA = "0xF93DB8", Offset = "0xF93DB8", VA = "0xF93DB8")]
		public static ATTRIBUTES_3D To3DAttributes(GameObject go, [Optional] Rigidbody rigidbody)
		{
			return default(ATTRIBUTES_3D);
		}

		[Token(Token = "0x60011C3")]
		[Address(RVA = "0xF912CC", Offset = "0xF912CC", VA = "0xF912CC")]
		public static ATTRIBUTES_3D To3DAttributes(Transform transform, Rigidbody2D rigidbody)
		{
			return default(ATTRIBUTES_3D);
		}

		[Token(Token = "0x60011C4")]
		[Address(RVA = "0xF94010", Offset = "0xF94010", VA = "0xF94010")]
		public static ATTRIBUTES_3D To3DAttributes(GameObject go, Rigidbody2D rigidbody)
		{
			return default(ATTRIBUTES_3D);
		}

		[Token(Token = "0x60011C5")]
		[Address(RVA = "0xF90070", Offset = "0xF90070", VA = "0xF90070")]
		internal static FMODPlatform GetCurrentPlatform()
		{
			return default(FMODPlatform);
		}

		[Token(Token = "0x60011C6")]
		[Address(RVA = "0xF92650", Offset = "0xF92650", VA = "0xF92650")]
		internal static string GetBankPath(string bankName)
		{
			return null;
		}

		[Token(Token = "0x60011C7")]
		[Address(RVA = "0xF94A58", Offset = "0xF94A58", VA = "0xF94A58")]
		internal static string GetPluginPath(string pluginName)
		{
			return null;
		}

		[Token(Token = "0x60011C8")]
		[Address(RVA = "0xF8F2E8", Offset = "0xF8F2E8", VA = "0xF8F2E8")]
		public static void EnforceLibraryOrder()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002CE")]
	public enum FMODPlatform
	{
		[Token(Token = "0x4000EF8")]
		None,
		[Token(Token = "0x4000EF9")]
		PlayInEditor,
		[Token(Token = "0x4000EFA")]
		Default,
		[Token(Token = "0x4000EFB")]
		Desktop,
		[Token(Token = "0x4000EFC")]
		Mobile,
		[Token(Token = "0x4000EFD")]
		MobileHigh,
		[Token(Token = "0x4000EFE")]
		MobileLow,
		[Token(Token = "0x4000EFF")]
		Console,
		[Token(Token = "0x4000F00")]
		Windows,
		[Token(Token = "0x4000F01")]
		Mac,
		[Token(Token = "0x4000F02")]
		Linux,
		[Token(Token = "0x4000F03")]
		iOS,
		[Token(Token = "0x4000F04")]
		Android,
		[Token(Token = "0x4000F05")]
		WindowsPhone,
		[Token(Token = "0x4000F06")]
		XboxOne,
		[Token(Token = "0x4000F07")]
		PS4,
		[Token(Token = "0x4000F08")]
		WiiU,
		[Token(Token = "0x4000F09")]
		PSVita,
		[Token(Token = "0x4000F0A")]
		AppleTV,
		[Token(Token = "0x4000F0B")]
		UWP,
		[Token(Token = "0x4000F0C")]
		Switch,
		[Token(Token = "0x4000F0D")]
		Count
	}
	[Serializable]
	[Token(Token = "0x20002CF")]
	public enum ImportType
	{
		[Token(Token = "0x4000F0F")]
		StreamingAssets,
		[Token(Token = "0x4000F10")]
		AssetBundle
	}
	[Token(Token = "0x20002D0")]
	public class PlatformSettingBase
	{
		[Token(Token = "0x4000F11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public FMODPlatform Platform;

		[Token(Token = "0x60011C9")]
		[Address(RVA = "0xF8E770", Offset = "0xF8E770", VA = "0xF8E770")]
		public PlatformSettingBase()
		{
		}
	}
	[Token(Token = "0x20002D1")]
	public class PlatformSetting<T> : PlatformSettingBase
	{
		[Token(Token = "0x4000F12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T Value;

		[Token(Token = "0x60011CA")]
		public PlatformSetting()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002D2")]
	public class PlatformIntSetting : PlatformSetting<int>
	{
		[Token(Token = "0x60011CB")]
		[Address(RVA = "0x16928EC", Offset = "0x16928EC", VA = "0x16928EC")]
		public PlatformIntSetting()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002D3")]
	public class PlatformStringSetting : PlatformSetting<string>
	{
		[Token(Token = "0x60011CC")]
		[Address(RVA = "0xF8E778", Offset = "0xF8E778", VA = "0xF8E778")]
		public PlatformStringSetting()
		{
		}
	}
	[Token(Token = "0x20002D4")]
	public enum TriStateBool
	{
		[Token(Token = "0x4000F14")]
		Disabled,
		[Token(Token = "0x4000F15")]
		Enabled,
		[Token(Token = "0x4000F16")]
		Development
	}
	[Serializable]
	[Token(Token = "0x20002D5")]
	public class PlatformBoolSetting : PlatformSetting<TriStateBool>
	{
		[Token(Token = "0x60011CD")]
		[Address(RVA = "0x1692890", Offset = "0x1692890", VA = "0x1692890")]
		public PlatformBoolSetting()
		{
		}
	}
	[Token(Token = "0x20002D6")]
	public class Settings : ScriptableObject
	{
		[Token(Token = "0x200036C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396918", Offset = "0x396918")]
		private sealed class <>c__DisplayClass32_0<T> where T : PlatformSettingBase
		{
			[Token(Token = "0x40013BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public FMODPlatform platform;

			[Token(Token = "0x60016BB")]
			public <>c__DisplayClass32_0()
			{
			}

			[Token(Token = "0x60016BC")]
			internal bool <HasSetting>b__0(T x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200036D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396928", Offset = "0x396928")]
		private sealed class <>c__DisplayClass33_0<T, U> where T : PlatformSetting<U>
		{
			[Token(Token = "0x40013BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public FMODPlatform platform;

			[Token(Token = "0x60016BD")]
			public <>c__DisplayClass33_0()
			{
			}

			[Token(Token = "0x60016BE")]
			internal bool <GetSetting>b__0(T x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200036E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396938", Offset = "0x396938")]
		private sealed class <>c__DisplayClass34_0<T, U> where T : PlatformSetting<U>, new()
		{
			[Token(Token = "0x40013BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public FMODPlatform platform;

			[Token(Token = "0x60016BF")]
			public <>c__DisplayClass34_0()
			{
			}

			[Token(Token = "0x60016C0")]
			internal bool <SetSetting>b__0(T x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200036F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396948", Offset = "0x396948")]
		private sealed class <>c__DisplayClass35_0<T> where T : PlatformSettingBase
		{
			[Token(Token = "0x40013C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public FMODPlatform platform;

			[Token(Token = "0x60016C1")]
			public <>c__DisplayClass35_0()
			{
			}

			[Token(Token = "0x60016C2")]
			internal bool <RemoveSetting>b__0(T x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000F17")]
		private const string SettingsAssetName = "FMODStudioSettings";

		[Token(Token = "0x4000F18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Settings instance;

		[Token(Token = "0x4000F19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		public bool HasSourceProject;

		[Token(Token = "0x4000F1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
		[SerializeField]
		public bool HasPlatforms;

		[Token(Token = "0x4000F1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private string sourceProjectPath;

		[Token(Token = "0x4000F1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		public string SourceProjectPathUnformatted;

		[Token(Token = "0x4000F1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string sourceBankPath;

		[Token(Token = "0x4000F1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		public string SourceBankPathUnformatted;

		[Token(Token = "0x4000F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		public bool AutomaticEventLoading;

		[Token(Token = "0x4000F20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[SerializeField]
		public bool AutomaticSampleLoading;

		[Token(Token = "0x4000F21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		public ImportType ImportType;

		[Token(Token = "0x4000F22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		public string TargetAssetPath;

		[Token(Token = "0x4000F23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		public List<PlatformIntSetting> SpeakerModeSettings;

		[Token(Token = "0x4000F24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		public List<PlatformIntSetting> SampleRateSettings;

		[Token(Token = "0x4000F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		public List<PlatformBoolSetting> LiveUpdateSettings;

		[Token(Token = "0x4000F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		public List<PlatformBoolSetting> OverlaySettings;

		[Token(Token = "0x4000F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		public List<PlatformBoolSetting> LoggingSettings;

		[Token(Token = "0x4000F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		public List<PlatformStringSetting> BankDirectorySettings;

		[Token(Token = "0x4000F29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		public List<PlatformIntSetting> VirtualChannelSettings;

		[Token(Token = "0x4000F2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		public List<PlatformIntSetting> RealChannelSettings;

		[Token(Token = "0x4000F2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		public List<string> Plugins;

		[Token(Token = "0x4000F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		public string MasterBank;

		[Token(Token = "0x4000F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[SerializeField]
		public List<string> Banks;

		[Token(Token = "0x170000D1")]
		public static Settings Instance
		{
			[Token(Token = "0x60011CE")]
			[Address(RVA = "0xF8FE04", Offset = "0xF8FE04", VA = "0xF8FE04")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D2")]
		public string SourceProjectPath
		{
			[Token(Token = "0x60011CF")]
			[Address(RVA = "0xF94DEC", Offset = "0xF94DEC", VA = "0xF94DEC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011D0")]
			[Address(RVA = "0xF94F00", Offset = "0xF94F00", VA = "0xF94F00")]
			set
			{
			}
		}

		[Token(Token = "0x170000D3")]
		public string SourceBankPath
		{
			[Token(Token = "0x60011D1")]
			[Address(RVA = "0xF94F18", Offset = "0xF94F18", VA = "0xF94F18")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011D2")]
			[Address(RVA = "0xF94F60", Offset = "0xF94F60", VA = "0xF94F60")]
			set
			{
			}
		}

		[Token(Token = "0x60011D3")]
		[Address(RVA = "0xF94F78", Offset = "0xF94F78", VA = "0xF94F78")]
		public static FMODPlatform GetParent(FMODPlatform platform)
		{
			return default(FMODPlatform);
		}

		[Token(Token = "0x60011D4")]
		public static bool HasSetting<T>(List<T> list, FMODPlatform platform) where T : PlatformSettingBase
		{
			return default(bool);
		}

		[Token(Token = "0x60011D5")]
		public static U GetSetting<T, U>(List<T> list, FMODPlatform platform, U def) where T : PlatformSetting<U>
		{
			return (U)null;
		}

		[Token(Token = "0x60011D6")]
		public static void SetSetting<T, U>(List<T> list, FMODPlatform platform, U value) where T : PlatformSetting<U>, new()
		{
		}

		[Token(Token = "0x60011D7")]
		public static void RemoveSetting<T>(List<T> list, FMODPlatform platform) where T : PlatformSettingBase
		{
		}

		[Token(Token = "0x60011D8")]
		[Address(RVA = "0xF90600", Offset = "0xF90600", VA = "0xF90600")]
		public bool IsLiveUpdateEnabled(FMODPlatform platform)
		{
			return default(bool);
		}

		[Token(Token = "0x60011D9")]
		[Address(RVA = "0xF94F9C", Offset = "0xF94F9C", VA = "0xF94F9C")]
		public bool IsOverlayEnabled(FMODPlatform platform)
		{
			return default(bool);
		}

		[Token(Token = "0x60011DA")]
		[Address(RVA = "0xF90438", Offset = "0xF90438", VA = "0xF90438")]
		public int GetRealChannels(FMODPlatform platform)
		{
			return default(int);
		}

		[Token(Token = "0x60011DB")]
		[Address(RVA = "0xF904D0", Offset = "0xF904D0", VA = "0xF904D0")]
		public int GetVirtualChannels(FMODPlatform platform)
		{
			return default(int);
		}

		[Token(Token = "0x60011DC")]
		[Address(RVA = "0xF90568", Offset = "0xF90568", VA = "0xF90568")]
		public int GetSpeakerMode(FMODPlatform platform)
		{
			return default(int);
		}

		[Token(Token = "0x60011DD")]
		[Address(RVA = "0xF903A0", Offset = "0xF903A0", VA = "0xF903A0")]
		public int GetSampleRate(FMODPlatform platform)
		{
			return default(int);
		}

		[Token(Token = "0x60011DE")]
		[Address(RVA = "0xF95040", Offset = "0xF95040", VA = "0xF95040")]
		public string GetBankPlatform(FMODPlatform platform)
		{
			return null;
		}

		[Token(Token = "0x60011DF")]
		[Address(RVA = "0xF95104", Offset = "0xF95104", VA = "0xF95104")]
		private Settings()
		{
		}

		[Token(Token = "0x60011E0")]
		[Address(RVA = "0xF94E34", Offset = "0xF94E34", VA = "0xF94E34")]
		private string GetPlatformSpecificPath(string path)
		{
			return null;
		}
	}
	[Token(Token = "0x20002D7")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x39609C", Offset = "0x39609C")]
	public class StudioBankLoader : MonoBehaviour
	{
		[Token(Token = "0x4000F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public LoaderGameEvent LoadEvent;

		[Token(Token = "0x4000F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LoaderGameEvent UnloadEvent;

		[Token(Token = "0x4000F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[BankRef]
		public List<string> Banks;

		[Token(Token = "0x4000F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string CollisionTag;

		[Token(Token = "0x4000F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool PreloadSamples;

		[Token(Token = "0x4000F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		private bool isQuitting;

		[Token(Token = "0x60011E2")]
		[Address(RVA = "0xF95418", Offset = "0xF95418", VA = "0xF95418")]
		private void HandleGameEvent(LoaderGameEvent gameEvent)
		{
		}

		[Token(Token = "0x60011E3")]
		[Address(RVA = "0xF9580C", Offset = "0xF9580C", VA = "0xF9580C")]
		private void Start()
		{
		}

		[Token(Token = "0x60011E4")]
		[Address(RVA = "0xF9582C", Offset = "0xF9582C", VA = "0xF9582C")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x60011E5")]
		[Address(RVA = "0xF95838", Offset = "0xF95838", VA = "0xF95838")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60011E6")]
		[Address(RVA = "0xF9584C", Offset = "0xF9584C", VA = "0xF9584C")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60011E7")]
		[Address(RVA = "0xF958AC", Offset = "0xF958AC", VA = "0xF958AC")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x60011E8")]
		[Address(RVA = "0xF9590C", Offset = "0xF9590C", VA = "0xF9590C")]
		private void OnTriggerEnter2D(Collider2D other)
		{
		}

		[Token(Token = "0x60011E9")]
		[Address(RVA = "0xF9596C", Offset = "0xF9596C", VA = "0xF9596C")]
		private void OnTriggerExit2D(Collider2D other)
		{
		}

		[Token(Token = "0x60011EA")]
		[Address(RVA = "0xF95450", Offset = "0xF95450", VA = "0xF95450")]
		public void Load()
		{
		}

		[Token(Token = "0x60011EB")]
		[Address(RVA = "0xF956C4", Offset = "0xF956C4", VA = "0xF956C4")]
		public void Unload()
		{
		}

		[Token(Token = "0x60011EC")]
		[Address(RVA = "0xF959CC", Offset = "0xF959CC", VA = "0xF959CC")]
		public StudioBankLoader()
		{
		}
	}
	[Token(Token = "0x20002D8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x3960D0", Offset = "0x3960D0")]
	public class StudioEventEmitter : MonoBehaviour
	{
		[Token(Token = "0x4000F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[EventRef]
		public string Event;

		[Token(Token = "0x4000F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public EmitterGameEvent PlayEvent;

		[Token(Token = "0x4000F36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public EmitterGameEvent StopEvent;

		[Token(Token = "0x4000F37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string CollisionTag;

		[Token(Token = "0x4000F38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool AllowFadeout;

		[Token(Token = "0x4000F39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool TriggerOnce;

		[Token(Token = "0x4000F3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		public bool Preload;

		[Token(Token = "0x4000F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ParamRef[] Params;

		[Token(Token = "0x4000F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool OverrideAttenuation;

		[Token(Token = "0x4000F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float OverrideMinDistance;

		[Token(Token = "0x4000F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float OverrideMaxDistance;

		[Token(Token = "0x4000F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private EventDescription eventDescription;

		[Token(Token = "0x4000F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private EventInstance instance;

		[Token(Token = "0x4000F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool hasTriggered;

		[Token(Token = "0x4000F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private bool isQuitting;

		[Token(Token = "0x60011ED")]
		[Address(RVA = "0xF959D4", Offset = "0xF959D4", VA = "0xF959D4")]
		private void Start()
		{
		}

		[Token(Token = "0x60011EE")]
		[Address(RVA = "0xF95BA0", Offset = "0xF95BA0", VA = "0xF95BA0")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x60011EF")]
		[Address(RVA = "0xF95BAC", Offset = "0xF95BAC", VA = "0xF95BAC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60011F0")]
		[Address(RVA = "0xF95C70", Offset = "0xF95C70", VA = "0xF95C70")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60011F1")]
		[Address(RVA = "0xF95C78", Offset = "0xF95C78", VA = "0xF95C78")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60011F2")]
		[Address(RVA = "0xF95C80", Offset = "0xF95C80", VA = "0xF95C80")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60011F3")]
		[Address(RVA = "0xF95CE0", Offset = "0xF95CE0", VA = "0xF95CE0")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x60011F4")]
		[Address(RVA = "0xF95D40", Offset = "0xF95D40", VA = "0xF95D40")]
		private void OnTriggerEnter2D(Collider2D other)
		{
		}

		[Token(Token = "0x60011F5")]
		[Address(RVA = "0xF95DA0", Offset = "0xF95DA0", VA = "0xF95DA0")]
		private void OnTriggerExit2D(Collider2D other)
		{
		}

		[Token(Token = "0x60011F6")]
		[Address(RVA = "0xF95E00", Offset = "0xF95E00", VA = "0xF95E00")]
		private void OnCollisionEnter()
		{
		}

		[Token(Token = "0x60011F7")]
		[Address(RVA = "0xF95E08", Offset = "0xF95E08", VA = "0xF95E08")]
		private void OnCollisionExit()
		{
		}

		[Token(Token = "0x60011F8")]
		[Address(RVA = "0xF95E10", Offset = "0xF95E10", VA = "0xF95E10")]
		private void OnCollisionEnter2D()
		{
		}

		[Token(Token = "0x60011F9")]
		[Address(RVA = "0xF95E18", Offset = "0xF95E18", VA = "0xF95E18")]
		private void OnCollisionExit2D()
		{
		}

		[Token(Token = "0x60011FA")]
		[Address(RVA = "0xF95B68", Offset = "0xF95B68", VA = "0xF95B68")]
		private void HandleGameEvent(EmitterGameEvent gameEvent)
		{
		}

		[Token(Token = "0x60011FB")]
		[Address(RVA = "0xF95AE8", Offset = "0xF95AE8", VA = "0xF95AE8")]
		private void Lookup()
		{
		}

		[Token(Token = "0x60011FC")]
		[Address(RVA = "0xF95E20", Offset = "0xF95E20", VA = "0xF95E20")]
		public void Play()
		{
		}

		[Token(Token = "0x60011FD")]
		[Address(RVA = "0xF96284", Offset = "0xF96284", VA = "0xF96284")]
		public void Stop()
		{
		}

		[Token(Token = "0x60011FE")]
		[Address(RVA = "0xF962D8", Offset = "0xF962D8", VA = "0xF962D8")]
		public void SetParameter(string name, float value)
		{
		}

		[Token(Token = "0x60011FF")]
		[Address(RVA = "0xF9631C", Offset = "0xF9631C", VA = "0xF9631C")]
		public bool IsPlaying()
		{
			return default(bool);
		}

		[Token(Token = "0x6001200")]
		[Address(RVA = "0xF96388", Offset = "0xF96388", VA = "0xF96388")]
		public StudioEventEmitter()
		{
		}
	}
	[Token(Token = "0x20002D9")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x396104", Offset = "0x396104")]
	public class StudioListener : MonoBehaviour
	{
		[Token(Token = "0x4000F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private Rigidbody rigidBody;

		[Token(Token = "0x4000F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Rigidbody2D rigidBody2D;

		[Token(Token = "0x4000F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int ListenerNumber;

		[Token(Token = "0x6001201")]
		[Address(RVA = "0xF96424", Offset = "0xF96424", VA = "0xF96424")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001202")]
		[Address(RVA = "0xF96668", Offset = "0xF96668", VA = "0xF96668")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001203")]
		[Address(RVA = "0xF96718", Offset = "0xF96718", VA = "0xF96718")]
		private void Update()
		{
		}

		[Token(Token = "0x6001204")]
		[Address(RVA = "0xF96550", Offset = "0xF96550", VA = "0xF96550")]
		private void SetListenerLocation()
		{
		}

		[Token(Token = "0x6001205")]
		[Address(RVA = "0xF9671C", Offset = "0xF9671C", VA = "0xF9671C")]
		public StudioListener()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002DA")]
	public class EmitterRef
	{
		[Token(Token = "0x4000F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public StudioEventEmitter Target;

		[Token(Token = "0x4000F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public ParamRef[] Params;

		[Token(Token = "0x6001206")]
		[Address(RVA = "0x1691E34", Offset = "0x1691E34", VA = "0x1691E34")]
		public EmitterRef()
		{
		}
	}
	[Token(Token = "0x20002DB")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x396138", Offset = "0x396138")]
	public class StudioParameterTrigger : MonoBehaviour
	{
		[Token(Token = "0x4000F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public EmitterRef[] Emitters;

		[Token(Token = "0x4000F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public EmitterGameEvent TriggerEvent;

		[Token(Token = "0x4000F4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public string CollisionTag;

		[Token(Token = "0x6001207")]
		[Address(RVA = "0xF96724", Offset = "0xF96724", VA = "0xF96724")]
		private void Start()
		{
		}

		[Token(Token = "0x6001208")]
		[Address(RVA = "0xF96744", Offset = "0xF96744", VA = "0xF96744")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001209")]
		[Address(RVA = "0xF96754", Offset = "0xF96754", VA = "0xF96754")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600120A")]
		[Address(RVA = "0xF96764", Offset = "0xF96764", VA = "0xF96764")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600120B")]
		[Address(RVA = "0xF96774", Offset = "0xF96774", VA = "0xF96774")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600120C")]
		[Address(RVA = "0xF967DC", Offset = "0xF967DC", VA = "0xF967DC")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x600120D")]
		[Address(RVA = "0xF96844", Offset = "0xF96844", VA = "0xF96844")]
		private void OnTriggerEnter2D(Collider2D other)
		{
		}

		[Token(Token = "0x600120E")]
		[Address(RVA = "0xF968AC", Offset = "0xF968AC", VA = "0xF968AC")]
		private void OnTriggerExit2D(Collider2D other)
		{
		}

		[Token(Token = "0x600120F")]
		[Address(RVA = "0xF96914", Offset = "0xF96914", VA = "0xF96914")]
		private void OnCollisionEnter()
		{
		}

		[Token(Token = "0x6001210")]
		[Address(RVA = "0xF96924", Offset = "0xF96924", VA = "0xF96924")]
		private void OnCollisionExit()
		{
		}

		[Token(Token = "0x6001211")]
		[Address(RVA = "0xF96934", Offset = "0xF96934", VA = "0xF96934")]
		private void OnCollisionEnter2D()
		{
		}

		[Token(Token = "0x6001212")]
		[Address(RVA = "0xF96944", Offset = "0xF96944", VA = "0xF96944")]
		private void OnCollisionExit2D()
		{
		}

		[Token(Token = "0x6001213")]
		[Address(RVA = "0xF96734", Offset = "0xF96734", VA = "0xF96734")]
		private void HandleGameEvent(EmitterGameEvent gameEvent)
		{
		}

		[Token(Token = "0x6001214")]
		[Address(RVA = "0xF96954", Offset = "0xF96954", VA = "0xF96954")]
		public void TriggerParameters()
		{
		}

		[Token(Token = "0x6001215")]
		[Address(RVA = "0xF96C04", Offset = "0xF96C04", VA = "0xF96C04")]
		public StudioParameterTrigger()
		{
		}
	}
}
namespace PreviewLabs
{
	[Token(Token = "0x20002DC")]
	public static class PlayerPrefs
	{
		[Token(Token = "0x4000F4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Hashtable PlayerPrefsHashtable;

		[Token(Token = "0x4000F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static bool _hashTableChanged;

		[Token(Token = "0x4000F4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static string _serializedOutput;

		[Token(Token = "0x4000F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static readonly string SerializedInput;

		[Token(Token = "0x4000F4F")]
		private const string ParametersSeperator = ";";

		[Token(Token = "0x4000F50")]
		private const string KeyValueSeperator = ":";

		[Token(Token = "0x4000F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly string FileName;

		[Token(Token = "0x6001216")]
		[Address(RVA = "0xF9995C", Offset = "0xF9995C", VA = "0xF9995C")]
		static PlayerPrefs()
		{
		}

		[Token(Token = "0x6001217")]
		[Address(RVA = "0xF99E6C", Offset = "0xF99E6C", VA = "0xF99E6C")]
		public static bool HasKey(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x6001218")]
		[Address(RVA = "0xF99F0C", Offset = "0xF99F0C", VA = "0xF99F0C")]
		public static void SetString(string key, string value)
		{
		}

		[Token(Token = "0x6001219")]
		[Address(RVA = "0xF9A084", Offset = "0xF9A084", VA = "0xF9A084")]
		public static void SetInt(string key, int value)
		{
		}

		[Token(Token = "0x600121A")]
		[Address(RVA = "0xF9A244", Offset = "0xF9A244", VA = "0xF9A244")]
		public static void SetFloat(string key, float value)
		{
		}

		[Token(Token = "0x600121B")]
		[Address(RVA = "0xF9A410", Offset = "0xF9A410", VA = "0xF9A410")]
		public static void SetBool(string key, bool value)
		{
		}

		[Token(Token = "0x600121C")]
		[Address(RVA = "0xF9A5D0", Offset = "0xF9A5D0", VA = "0xF9A5D0")]
		public static string GetString(string key)
		{
			return null;
		}

		[Token(Token = "0x600121D")]
		[Address(RVA = "0xF9A6F4", Offset = "0xF9A6F4", VA = "0xF9A6F4")]
		public static string GetString(string key, string defaultValue)
		{
			return null;
		}

		[Token(Token = "0x600121E")]
		[Address(RVA = "0xF9A880", Offset = "0xF9A880", VA = "0xF9A880")]
		public static int GetInt(string key)
		{
			return default(int);
		}

		[Token(Token = "0x600121F")]
		[Address(RVA = "0xF9AAA0", Offset = "0xF9AAA0", VA = "0xF9AAA0")]
		public static int GetInt(string key, int defaultValue)
		{
			return default(int);
		}

		[Token(Token = "0x6001220")]
		[Address(RVA = "0xF9AC7C", Offset = "0xF9AC7C", VA = "0xF9AC7C")]
		public static float GetFloat(string key)
		{
			return default(float);
		}

		[Token(Token = "0x6001221")]
		[Address(RVA = "0xF9AEB0", Offset = "0xF9AEB0", VA = "0xF9AEB0")]
		public static float GetFloat(string key, float defaultValue)
		{
			return default(float);
		}

		[Token(Token = "0x6001222")]
		[Address(RVA = "0xF9B098", Offset = "0xF9B098", VA = "0xF9B098")]
		public static bool GetBool(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x6001223")]
		[Address(RVA = "0xF9B1EC", Offset = "0xF9B1EC", VA = "0xF9B1EC")]
		public static bool GetBool(string key, bool defaultValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6001224")]
		[Address(RVA = "0xF9B3D0", Offset = "0xF9B3D0", VA = "0xF9B3D0")]
		public static void DeleteKey(string key)
		{
		}

		[Token(Token = "0x6001225")]
		[Address(RVA = "0xF9B470", Offset = "0xF9B470", VA = "0xF9B470")]
		public static void DeleteAll()
		{
		}

		[Token(Token = "0x6001226")]
		[Address(RVA = "0xF9B508", Offset = "0xF9B508", VA = "0xF9B508")]
		public static void Flush()
		{
		}

		[Token(Token = "0x6001227")]
		[Address(RVA = "0xF9B6D4", Offset = "0xF9B6D4", VA = "0xF9B6D4")]
		private static void Serialize()
		{
		}

		[Token(Token = "0x6001228")]
		[Address(RVA = "0xF99AC0", Offset = "0xF99AC0", VA = "0xF99AC0")]
		private static void Deserialize()
		{
		}

		[Token(Token = "0x6001229")]
		[Address(RVA = "0xF9BCFC", Offset = "0xF9BCFC", VA = "0xF9BCFC")]
		private static string EscapeNonSeperators(string inputToEscape)
		{
			return null;
		}

		[Token(Token = "0x600122A")]
		[Address(RVA = "0xF9BDB4", Offset = "0xF9BDB4", VA = "0xF9BDB4")]
		private static string DeEscapeNonSeperators(string inputToDeEscape)
		{
			return null;
		}

		[Token(Token = "0x600122B")]
		[Address(RVA = "0xF9BE6C", Offset = "0xF9BE6C", VA = "0xF9BE6C")]
		public static object GetTypeValue(string typeName, string value)
		{
			return null;
		}
	}
}
namespace DarkTonic.CoreGameKit
{
	[Token(Token = "0x20002DD")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x39616C", Offset = "0x39616C")]
	public class ClickToKillOrDamage : MonoBehaviour
	{
		[Token(Token = "0x4000F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool killObjects;

		[Token(Token = "0x4000F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int damagePointsToInflict;

		[Token(Token = "0x600122C")]
		[Address(RVA = "0xB7D708", Offset = "0xB7D708", VA = "0xB7D708")]
		private void Update()
		{
		}

		[Token(Token = "0x600122D")]
		[Address(RVA = "0xB7D924", Offset = "0xB7D924", VA = "0xB7D924")]
		private void KillOrDamage(GameObject go)
		{
		}

		[Token(Token = "0x600122E")]
		[Address(RVA = "0xB7DA44", Offset = "0xB7DA44", VA = "0xB7DA44")]
		public ClickToKillOrDamage()
		{
		}
	}
	[Token(Token = "0x20002DE")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x3961A0", Offset = "0x3961A0")]
	public class ClickToKillOrDamage2D : MonoBehaviour
	{
		[Token(Token = "0x4000F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool killObjects;

		[Token(Token = "0x4000F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int damagePointsToInflict;

		[Token(Token = "0x600122F")]
		[Address(RVA = "0xB7DA58", Offset = "0xB7DA58", VA = "0xB7DA58")]
		private void Update()
		{
		}

		[Token(Token = "0x6001230")]
		[Address(RVA = "0xB7DD28", Offset = "0xB7DD28", VA = "0xB7DD28")]
		private void KillOrDamage(GameObject go)
		{
		}

		[Token(Token = "0x6001231")]
		[Address(RVA = "0xB7DE48", Offset = "0xB7DE48", VA = "0xB7DE48")]
		public ClickToKillOrDamage2D()
		{
		}
	}
	[Token(Token = "0x20002DF")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x3961D4", Offset = "0x3961D4")]
	public class Killable : MonoBehaviour
	{
		[Token(Token = "0x2000370")]
		public enum DeathPrefabSpawnLocation
		{
			[Token(Token = "0x40013C2")]
			DeathPosition,
			[Token(Token = "0x40013C3")]
			RespawnPosition
		}

		[Token(Token = "0x2000371")]
		public enum DeathDespawnBehavior
		{
			[Token(Token = "0x40013C5")]
			ReturnToPool,
			[Token(Token = "0x40013C6")]
			Disable
		}

		[Token(Token = "0x2000372")]
		public enum RespawnType
		{
			[Token(Token = "0x40013C8")]
			None,
			[Token(Token = "0x40013C9")]
			Infinite,
			[Token(Token = "0x40013CA")]
			SetNumber
		}

		[Token(Token = "0x2000373")]
		public enum SpawnerDestroyedBehavior
		{
			[Token(Token = "0x40013CC")]
			DoNothing,
			[Token(Token = "0x40013CD")]
			Despawn,
			[Token(Token = "0x40013CE")]
			Die
		}

		[Token(Token = "0x2000374")]
		public enum SpawnSource
		{
			[Token(Token = "0x40013D0")]
			None,
			[Token(Token = "0x40013D1")]
			Specific,
			[Token(Token = "0x40013D2")]
			PrefabPool
		}

		[Token(Token = "0x2000375")]
		public enum DamagePrefabSpawnMode
		{
			[Token(Token = "0x40013D4")]
			None,
			[Token(Token = "0x40013D5")]
			PerHit,
			[Token(Token = "0x40013D6")]
			PerHitPointLost,
			[Token(Token = "0x40013D7")]
			PerGroupHitPointsLost
		}

		[Token(Token = "0x2000376")]
		public enum RotationMode
		{
			[Token(Token = "0x40013D9")]
			CustomRotation,
			[Token(Token = "0x40013DA")]
			InheritExistingRotation,
			[Token(Token = "0x40013DB")]
			UseDeathPrefabRotation
		}

		[Token(Token = "0x2000377")]
		public enum DespawnMode
		{
			[Token(Token = "0x40013DD")]
			None = -1,
			[Token(Token = "0x40013DE")]
			ZeroHitPoints,
			[Token(Token = "0x40013DF")]
			LostAnyHitPoints,
			[Token(Token = "0x40013E0")]
			CollisionOrTrigger
		}

		[Token(Token = "0x2000378")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396958", Offset = "0x396958")]
		private sealed class <>c__DisplayClass216_0
		{
			[Token(Token = "0x40013E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string scenarioName;

			[Token(Token = "0x60016C3")]
			[Address(RVA = "0xB838FC", Offset = "0xB838FC", VA = "0xB838FC")]
			public <>c__DisplayClass216_0()
			{
			}

			[Token(Token = "0x60016C4")]
			[Address(RVA = "0xB88F3C", Offset = "0xB88F3C", VA = "0xB88F3C")]
			internal bool <PerformDeath>b__0(WorldVariableCollection obj)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000379")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396968", Offset = "0x396968")]
		private sealed class <SetSpawnInvincibleForSeconds>d__254 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40013E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int <>1__state;

			[Token(Token = "0x40013E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private object <>2__current;

			[Token(Token = "0x40013E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Killable <>4__this;

			[Token(Token = "0x40013E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float seconds;

			[Token(Token = "0x1700016B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60016C8")]
				[Address(RVA = "0xB89068", Offset = "0xB89068", VA = "0xB89068", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700016C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60016CA")]
				[Address(RVA = "0xB890E8", Offset = "0xB890E8", VA = "0xB890E8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60016C5")]
			[Address(RVA = "0xB88778", Offset = "0xB88778", VA = "0xB88778")]
			[DebuggerHidden]
			public <SetSpawnInvincibleForSeconds>d__254(int <>1__state)
			{
			}

			[Token(Token = "0x60016C6")]
			[Address(RVA = "0xB88F6C", Offset = "0xB88F6C", VA = "0xB88F6C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60016C7")]
			[Address(RVA = "0xB88F70", Offset = "0xB88F70", VA = "0xB88F70", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60016C9")]
			[Address(RVA = "0xB89070", Offset = "0xB89070", VA = "0xB89070", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200037A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396978", Offset = "0x396978")]
		private sealed class <WaitThenDestroy>d__255 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40013E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int <>1__state;

			[Token(Token = "0x40013E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private object <>2__current;

			[Token(Token = "0x40013E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Killable <>4__this;

			[Token(Token = "0x40013E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public string scenarioName;

			[Token(Token = "0x1700016D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60016CE")]
				[Address(RVA = "0xB892F8", Offset = "0xB892F8", VA = "0xB892F8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700016E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60016D0")]
				[Address(RVA = "0xB89378", Offset = "0xB89378", VA = "0xB89378", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60016CB")]
			[Address(RVA = "0xB88798", Offset = "0xB88798", VA = "0xB88798")]
			[DebuggerHidden]
			public <WaitThenDestroy>d__255(int <>1__state)
			{
			}

			[Token(Token = "0x60016CC")]
			[Address(RVA = "0xB890F0", Offset = "0xB890F0", VA = "0xB890F0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60016CD")]
			[Address(RVA = "0xB890F4", Offset = "0xB890F4", VA = "0xB890F4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60016CF")]
			[Address(RVA = "0xB89300", Offset = "0xB89300", VA = "0xB89300", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000F56")]
		public const string DestroyedText = "Destroyed";

		[Token(Token = "0x4000F57")]
		public const int MaxHitPoints = 100000;

		[Token(Token = "0x4000F58")]
		public const int MaxAttackPoints = 100000;

		[Token(Token = "0x4000F59")]
		public const int MinAttackPoints = -100000;

		[Token(Token = "0x4000F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public TriggeredSpawner.GameOverBehavior gameOverBehavior;

		[Token(Token = "0x4000F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool syncHitPointWorldVariable;

		[Token(Token = "0x4000F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public KillerInt hitPoints;

		[Token(Token = "0x4000F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public KillerInt maxHitPoints;

		[Token(Token = "0x4000F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public KillerInt atckPoints;

		[Token(Token = "0x4000F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public KillableListener listener;

		[Token(Token = "0x4000F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public string poolBossCategoryName;

		[Token(Token = "0x4000F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool invincibilityExpanded;

		[Token(Token = "0x4000F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool isInvincible;

		[Token(Token = "0x4000F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool invincibleWhileChildrenKillablesExist;

		[Token(Token = "0x4000F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
		public bool disableCollidersWhileChildrenKillablesExist;

		[Token(Token = "0x4000F65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool invincibleOnSpawn;

		[Token(Token = "0x4000F66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public KillerFloat invincibleTimeSpawn;

		[Token(Token = "0x4000F67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool invincibleWhenDamaged;

		[Token(Token = "0x4000F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public KillerFloat invincibleDamageTime;

		[Token(Token = "0x4000F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public SpawnSource invinceHitPrefabSource;

		[Token(Token = "0x4000F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int invinceHitPrefabPoolIndex;

		[Token(Token = "0x4000F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public string invinceHitPrefabPoolName;

		[Token(Token = "0x4000F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform invinceHitPrefabSpecific;

		[Token(Token = "0x4000F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public string invinceHitPrefabCategoryName;

		[Token(Token = "0x4000F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool invinceHitPrefabRandomizeXRotation;

		[Token(Token = "0x4000F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool invinceHitPrefabRandomizeYRotation;

		[Token(Token = "0x4000F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		public bool invinceHitPrefabRandomizeZRotation;

		[Token(Token = "0x4000F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
		public bool enableLogging;

		[Token(Token = "0x4000F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool filtersExpanded;

		[Token(Token = "0x4000F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		public bool ignoreKillablesSpawnedByMe;

		[Token(Token = "0x4000F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
		public bool useLayerFilter;

		[Token(Token = "0x4000F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x57")]
		public bool useTagFilter;

		[Token(Token = "0x4000F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool showVisibilitySettings;

		[Token(Token = "0x4000F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		public bool despawnWhenOffscreen;

		[Token(Token = "0x4000F78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		public bool despawnOnClick;

		[Token(Token = "0x4000F79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5B")]
		public bool despawnOnMouseClick;

		[Token(Token = "0x4000F7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public bool despawnIfNotVisible;

		[Token(Token = "0x4000F7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public KillerFloat despawnIfNotVisibleForSec;

		[Token(Token = "0x4000F7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public SpawnSource vanishPrefabSource;

		[Token(Token = "0x4000F7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int vanishPrefabPoolIndex;

		[Token(Token = "0x4000F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public string vanishPrefabPoolName;

		[Token(Token = "0x4000F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform vanishPrefabSpecific;

		[Token(Token = "0x4000F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public string vanishPrefabCategoryName;

		[Token(Token = "0x4000F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool vanishPrefabRandomizeXRotation;

		[Token(Token = "0x4000F82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		public bool vanishPrefabRandomizeYRotation;

		[Token(Token = "0x4000F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7A")]
		public bool vanishPrefabRandomizeZRotation;

		[Token(Token = "0x4000F84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7B")]
		public bool ignoreOffscreenHits;

		[Token(Token = "0x4000F85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public List<string> matchingTags;

		[Token(Token = "0x4000F86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public List<int> matchingLayers;

		[Token(Token = "0x4000F87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public DespawnMode despawnMode;

		[Token(Token = "0x4000F88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool includeNonKillables;

		[Token(Token = "0x4000F89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		public bool damageFireEvents;

		[Token(Token = "0x4000F8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public List<CGKCustomEventToFire> damageCustomEvents;

		[Token(Token = "0x4000F8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool dealDamageFireEvents;

		[Token(Token = "0x4000F8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public List<CGKCustomEventToFire> dealDamageCustomEvents;

		[Token(Token = "0x4000F8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool deathFireEvents;

		[Token(Token = "0x4000F8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public List<CGKCustomEventToFire> deathCustomEvents;

		[Token(Token = "0x4000F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public bool despawnStatModifiersExpanded;

		[Token(Token = "0x4000F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public WorldVariableCollection playerStatDespawnModifiers;

		[Token(Token = "0x4000F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public List<WorldVariableCollection> alternateModifiers;

		[Token(Token = "0x4000F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public bool dealDamagePrefabExpanded;

		[Token(Token = "0x4000F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public SpawnSource dealDamagePrefabSource;

		[Token(Token = "0x4000F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public int dealDamagePrefabPoolIndex;

		[Token(Token = "0x4000F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public string dealDamagePrefabPoolName;

		[Token(Token = "0x4000F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public Transform dealDamagePrefabSpecific;

		[Token(Token = "0x4000F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public string dealDamagePrefabCategoryName;

		[Token(Token = "0x4000F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public bool dealDamagePrefabOnDeathHit;

		[Token(Token = "0x4000F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC5")]
		public bool dealDamagePrefabRandomizeXRotation;

		[Token(Token = "0x4000F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC6")]
		public bool dealDamagePrefabRandomizeYRotation;

		[Token(Token = "0x4000F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC7")]
		public bool dealDamagePrefabRandomizeZRotation;

		[Token(Token = "0x4000F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public bool damagePrefabExpanded;

		[Token(Token = "0x4000F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public SpawnSource damagePrefabSource;

		[Token(Token = "0x4000F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public int damagePrefabPoolIndex;

		[Token(Token = "0x4000F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public string damagePrefabPoolName;

		[Token(Token = "0x4000FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Transform damagePrefabSpecific;

		[Token(Token = "0x4000FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public string damagePrefabCategoryName;

		[Token(Token = "0x4000FA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public DamagePrefabSpawnMode damagePrefabSpawnMode;

		[Token(Token = "0x4000FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public KillerInt damagePrefabSpawnQuantity;

		[Token(Token = "0x4000FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public KillerInt damageGroupsize;

		[Token(Token = "0x4000FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public Vector3 damagePrefabOffset;

		[Token(Token = "0x4000FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public Vector3 damagePrefabIncrementalOffset;

		[Token(Token = "0x4000FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		public bool damagePrefabRandomizeXRotation;

		[Token(Token = "0x4000FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x105")]
		public bool damagePrefabRandomizeYRotation;

		[Token(Token = "0x4000FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x106")]
		public bool damagePrefabRandomizeZRotation;

		[Token(Token = "0x4000FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x107")]
		public bool despawnStatDamageModifiersExpanded;

		[Token(Token = "0x4000FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public bool damagePrefabOnDeathHit;

		[Token(Token = "0x4000FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public WorldVariableCollection playerStatDamageModifiers;

		[Token(Token = "0x4000FAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public bool damageKnockBackExpanded;

		[Token(Token = "0x4000FAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x111")]
		public bool sendDamageKnockback;

		[Token(Token = "0x4000FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x112")]
		public bool receiveKnockbackWhenDamaged;

		[Token(Token = "0x4000FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x113")]
		public bool receiveKnockbackWhenInvince;

		[Token(Token = "0x4000FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		public KillerFloat damageKnockUpMeters;

		[Token(Token = "0x4000FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public KillerFloat damageKnockBackFactor;

		[Token(Token = "0x4000FB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		public WaveSpecifics.SpawnOrigin deathPrefabSource;

		[Token(Token = "0x4000FB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public int deathPrefabPoolIndex;

		[Token(Token = "0x4000FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		public string deathPrefabPoolName;

		[Token(Token = "0x4000FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public bool deathPrefabSettingsExpanded;

		[Token(Token = "0x4000FB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		public Transform deathPrefabSpecific;

		[Token(Token = "0x4000FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public string deathPrefabCategoryName;

		[Token(Token = "0x4000FB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		public bool deathPrefabKeepSameParent;

		[Token(Token = "0x4000FBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public KillerInt deathPrefabSpawnPercent;

		[Token(Token = "0x4000FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		public DeathPrefabSpawnLocation deathPrefabSpawnLocation;

		[Token(Token = "0x4000FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public KillerInt deathPrefabQty;

		[Token(Token = "0x4000FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		public Vector3 deathPrefabOffset;

		[Token(Token = "0x4000FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public Vector3 deathPrefabIncrementalOffset;

		[Token(Token = "0x4000FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		public RotationMode rotationMode;

		[Token(Token = "0x4000FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public bool deathPrefabRandomizeXRotation;

		[Token(Token = "0x4000FC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x161")]
		public bool deathPrefabRandomizeYRotation;

		[Token(Token = "0x4000FC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x162")]
		public bool deathPrefabRandomizeZRotation;

		[Token(Token = "0x4000FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x163")]
		public bool deathPrefabKeepVelocity;

		[Token(Token = "0x4000FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		public Vector3 deathPrefabCustomRotation;

		[Token(Token = "0x4000FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public KillerFloat deathDelay;

		[Token(Token = "0x4000FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		public SpawnerDestroyedBehavior spawnerDestroyedAction;

		[Token(Token = "0x4000FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public Killable parentKillableForParentDestroyed;

		[Token(Token = "0x4000FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		public SpawnerDestroyedBehavior parentDestroyedAction;

		[Token(Token = "0x4000FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public DeathDespawnBehavior deathDespawnBehavior;

		[Token(Token = "0x4000FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		public bool timerDeathEnabled;

		[Token(Token = "0x4000FCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public KillerFloat timerDeathSeconds;

		[Token(Token = "0x4000FCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		public SpawnerDestroyedBehavior timeUpAction;

		[Token(Token = "0x4000FCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public bool distanceDeathEnabled;

		[Token(Token = "0x4000FCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		public KillerFloat tooFarDistance;

		[Token(Token = "0x4000FCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public SpawnerDestroyedBehavior distanceDeathAction;

		[Token(Token = "0x4000FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		public int currentHitPoints;

		[Token(Token = "0x4000FD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public bool isVisible;

		[Token(Token = "0x4000FD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A1")]
		public bool showRespawnSettings;

		[Token(Token = "0x4000FD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		public RespawnType respawnType;

		[Token(Token = "0x4000FD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public int timesToRespawn;

		[Token(Token = "0x4000FD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		public KillerFloat respawnDelay;

		[Token(Token = "0x4000FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public bool respawnFireEvents;

		[Token(Token = "0x4000FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		public List<CGKCustomEventToFire> respawnCustomEvents;

		[Token(Token = "0x4000FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private Vector3 _respawnLocation;

		[Token(Token = "0x4000FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		private VisualizationMarker _visualizationMarker;

		[Token(Token = "0x4000FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private int _timesRespawned;

		[Token(Token = "0x4000FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		private Vector3 _spawnPoint;

		[Token(Token = "0x4000FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private GameObject _spawnedFromObject;

		[Token(Token = "0x4000FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		private int? _spawnedFromGOInstanceId;

		[Token(Token = "0x4000FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		private WavePrefabPool _deathPrefabWavePool;

		[Token(Token = "0x4000FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private Transform _trans;

		[Token(Token = "0x4000FE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
		private GameObject _go;

		[Token(Token = "0x4000FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private int? _instanceId;

		[Token(Token = "0x4000FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private CharacterController _charCtrl;

		[Token(Token = "0x4000FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
		private Rigidbody _body;

		[Token(Token = "0x4000FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private Killable _parentKillable;

		[Token(Token = "0x4000FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		private List<Collider> _colliders;

		[Token(Token = "0x4000FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private bool _willSkipDeathDelay;

		[Token(Token = "0x4000FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
		private string _deathScenarioName;

		[Token(Token = "0x4000FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private Rigidbody2D _body2D;

		[Token(Token = "0x4000FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
		private List<Collider2D> _colliders2D;

		[Token(Token = "0x4000FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private int _damageTaken;

		[Token(Token = "0x4000FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
		private int _damagePrefabsSpawned;

		[Token(Token = "0x4000FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private WavePrefabPool _damagePrefabWavePool;

		[Token(Token = "0x4000FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x224")]
		private WavePrefabPool _dealDamagePrefabWavePool;

		[Token(Token = "0x4000FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private WavePrefabPool _vanishPrefabWavePool;

		[Token(Token = "0x4000FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22C")]
		private WavePrefabPool _invinceHitPrefabWavePool;

		[Token(Token = "0x4000FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private bool _becameVisible;

		[Token(Token = "0x4000FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x234")]
		private float _spawnTime;

		[Token(Token = "0x4000FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		private bool _isDespawning;

		[Token(Token = "0x4000FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x239")]
		private bool _isTemporarilyInvincible;

		[Token(Token = "0x4000FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23A")]
		private bool _spawnerSet;

		[Token(Token = "0x4000FF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23B")]
		private bool _spawnLocationSet;

		[Token(Token = "0x4000FF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23C")]
		private bool _waitingToDestroy;

		[Token(Token = "0x4000FF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23D")]
		private bool _deathDelayGoing;

		[Token(Token = "0x4000FF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		private readonly List<Killable> _childrenToDestroy;

		[Token(Token = "0x4000FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x244")]
		private readonly List<Killable> _childKillables;

		[Token(Token = "0x4000FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3974EC", Offset = "0x3974EC")]
		private Killable <KilledBy>k__BackingField;

		[Token(Token = "0x170000D4")]
		private Transform CurrentDeathPrefab
		{
			[Token(Token = "0x6001286")]
			[Address(RVA = "0xB84E48", Offset = "0xB84E48", VA = "0xB84E48")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D5")]
		private Transform CurrentDamagePrefab
		{
			[Token(Token = "0x6001287")]
			[Address(RVA = "0xB848A0", Offset = "0xB848A0", VA = "0xB848A0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D6")]
		private bool IsVisualizationClone
		{
			[Token(Token = "0x6001288")]
			[Address(RVA = "0xB80350", Offset = "0xB80350", VA = "0xB80350")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000D7")]
		public int? SpawnedFromObjectId
		{
			[Token(Token = "0x6001289")]
			[Address(RVA = "0xB831AC", Offset = "0xB831AC", VA = "0xB831AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D8")]
		private GameObject GameObj
		{
			[Token(Token = "0x600128A")]
			[Address(RVA = "0xB80F54", Offset = "0xB80F54", VA = "0xB80F54")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D9")]
		private int? KillableId
		{
			[Token(Token = "0x600128B")]
			[Address(RVA = "0xB832AC", Offset = "0xB832AC", VA = "0xB832AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DA")]
		public bool CanReceiveKnockback
		{
			[Token(Token = "0x600128C")]
			[Address(RVA = "0xB887B8", Offset = "0xB887B8", VA = "0xB887B8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000DB")]
		public bool ReceiveKnockbackWhenInvince
		{
			[Token(Token = "0x600128D")]
			[Address(RVA = "0xB86990", Offset = "0xB86990", VA = "0xB86990")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000DC")]
		public bool ReceiveKnockbackWhenDamaged
		{
			[Token(Token = "0x600128E")]
			[Address(RVA = "0xB869D0", Offset = "0xB869D0", VA = "0xB869D0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000DD")]
		public Rigidbody Body
		{
			[Token(Token = "0x600128F")]
			[Address(RVA = "0xB841C4", Offset = "0xB841C4", VA = "0xB841C4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DE")]
		public List<Killable> ChildKillables
		{
			[Token(Token = "0x6001290")]
			[Address(RVA = "0xB88870", Offset = "0xB88870", VA = "0xB88870")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DF")]
		public List<Collider> Colidrs
		{
			[Token(Token = "0x6001291")]
			[Address(RVA = "0xB8336C", Offset = "0xB8336C", VA = "0xB8336C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E0")]
		public int CurrentHitPoints
		{
			[Token(Token = "0x6001292")]
			[Address(RVA = "0xB88878", Offset = "0xB88878", VA = "0xB88878")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001293")]
			[Address(RVA = "0xB88880", Offset = "0xB88880", VA = "0xB88880")]
			set
			{
			}
		}

		[Token(Token = "0x170000E1")]
		public Transform CurrentVanishPrefab
		{
			[Token(Token = "0x6001294")]
			[Address(RVA = "0xB8543C", Offset = "0xB8543C", VA = "0xB8543C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E2")]
		public Transform CurrentDealDamagePrefab
		{
			[Token(Token = "0x6001295")]
			[Address(RVA = "0xB84D24", Offset = "0xB84D24", VA = "0xB84D24")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E3")]
		public Transform CurrentInvinceHitPrefab
		{
			[Token(Token = "0x6001296")]
			[Address(RVA = "0xB85100", Offset = "0xB85100", VA = "0xB85100")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E4")]
		public bool GameIsOverForKillable
		{
			[Token(Token = "0x6001297")]
			[Address(RVA = "0xB835A8", Offset = "0xB835A8", VA = "0xB835A8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000E5")]
		public bool IsDead
		{
			[Token(Token = "0x6001298")]
			[Address(RVA = "0xB88888", Offset = "0xB88888", VA = "0xB88888")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000E6")]
		public bool IsGravBody
		{
			[Token(Token = "0x6001299")]
			[Address(RVA = "0xB8407C", Offset = "0xB8407C", VA = "0xB8407C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000E7")]
		public bool IsCharController
		{
			[Token(Token = "0x600129A")]
			[Address(RVA = "0xB887E4", Offset = "0xB887E4", VA = "0xB887E4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000E8")]
		public bool IsMyMultiplayerPrefab
		{
			[Token(Token = "0x600129B")]
			[Address(RVA = "0xB8352C", Offset = "0xB8352C", VA = "0xB8352C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000E9")]
		public Killable KilledBy
		{
			[Token(Token = "0x600129C")]
			[Address(RVA = "0xB88890", Offset = "0xB88890", VA = "0xB88890")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x398A1C", Offset = "0x398A1C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600129D")]
			[Address(RVA = "0xB88898", Offset = "0xB88898", VA = "0xB88898")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x398A2C", Offset = "0x398A2C")]
			private set
			{
			}
		}

		[Token(Token = "0x170000EA")]
		public Vector3 RespawnPosition
		{
			[Token(Token = "0x600129E")]
			[Address(RVA = "0xB888A0", Offset = "0xB888A0", VA = "0xB888A0")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600129F")]
			[Address(RVA = "0xB888B4", Offset = "0xB888B4", VA = "0xB888B4")]
			set
			{
			}
		}

		[Token(Token = "0x170000EB")]
		public GameObject SpawnedFromObject
		{
			[Token(Token = "0x60012A0")]
			[Address(RVA = "0xB888C0", Offset = "0xB888C0", VA = "0xB888C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EC")]
		public Transform Trans
		{
			[Token(Token = "0x60012A1")]
			[Address(RVA = "0xB81AF8", Offset = "0xB81AF8", VA = "0xB81AF8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000ED")]
		public int TimesRespawned
		{
			[Token(Token = "0x60012A2")]
			[Address(RVA = "0xB888C8", Offset = "0xB888C8", VA = "0xB888C8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000EE")]
		private Rigidbody2D Body2D
		{
			[Token(Token = "0x60012A3")]
			[Address(RVA = "0xB84274", Offset = "0xB84274", VA = "0xB84274")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EF")]
		private Vector3 DeathPrefabSpawnPosition
		{
			[Token(Token = "0x60012A4")]
			[Address(RVA = "0xB84DF0", Offset = "0xB84DF0", VA = "0xB84DF0")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000F0")]
		private List<Collider2D> Colidrs2D
		{
			[Token(Token = "0x60012A5")]
			[Address(RVA = "0xB8344C", Offset = "0xB8344C", VA = "0xB8344C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F1")]
		private CharacterController CharController
		{
			[Token(Token = "0x60012A6")]
			[Address(RVA = "0xB80EA4", Offset = "0xB80EA4", VA = "0xB80EA4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001232")]
		[Address(RVA = "0xB7FE60", Offset = "0xB7FE60", VA = "0xB7FE60")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001233")]
		[Address(RVA = "0xB7FE94", Offset = "0xB7FE94", VA = "0xB7FE94")]
		private void Start()
		{
		}

		[Token(Token = "0x6001234")]
		[Address(RVA = "0xB7FEA8", Offset = "0xB7FEA8", VA = "0xB7FEA8")]
		private void OnSpawned()
		{
		}

		[Token(Token = "0x6001235")]
		[Address(RVA = "0xB7FEBC", Offset = "0xB7FEBC", VA = "0xB7FEBC")]
		private void OnDespawned()
		{
		}

		[Token(Token = "0x6001236")]
		[Address(RVA = "0xB8018C", Offset = "0xB8018C", VA = "0xB8018C", Slot = "4")]
		protected virtual void Despawned()
		{
		}

		[Token(Token = "0x6001237")]
		[Address(RVA = "0xB80190", Offset = "0xB80190", VA = "0xB80190")]
		private void OnClick()
		{
		}

		[Token(Token = "0x6001238")]
		[Address(RVA = "0xB801A0", Offset = "0xB801A0", VA = "0xB801A0", Slot = "5")]
		protected virtual void _OnClick()
		{
		}

		[Token(Token = "0x6001239")]
		[Address(RVA = "0xB8021C", Offset = "0xB8021C", VA = "0xB8021C")]
		private void OnMouseDown()
		{
		}

		[Token(Token = "0x600123A")]
		[Address(RVA = "0xB8022C", Offset = "0xB8022C", VA = "0xB8022C", Slot = "6")]
		protected virtual void _OnMouseDown()
		{
		}

		[Token(Token = "0x600123B")]
		[Address(RVA = "0xB802A8", Offset = "0xB802A8", VA = "0xB802A8")]
		private void OnBecameVisible()
		{
		}

		[Token(Token = "0x600123C")]
		[Address(RVA = "0xB802B8", Offset = "0xB802B8", VA = "0xB802B8", Slot = "7")]
		public virtual void BecameVisible()
		{
		}

		[Token(Token = "0x600123D")]
		[Address(RVA = "0xB802D0", Offset = "0xB802D0", VA = "0xB802D0")]
		private void OnBecameInvisible()
		{
		}

		[Token(Token = "0x600123E")]
		[Address(RVA = "0xB802E0", Offset = "0xB802E0", VA = "0xB802E0", Slot = "8")]
		public virtual void BecameInvisible()
		{
		}

		[Token(Token = "0x600123F")]
		[Address(RVA = "0xB80318", Offset = "0xB80318", VA = "0xB80318")]
		private void OnCollisionEnter2D(Collision2D coll)
		{
		}

		[Token(Token = "0x6001240")]
		[Address(RVA = "0xB80434", Offset = "0xB80434", VA = "0xB80434", Slot = "9")]
		public virtual void CollisionEnter2D(Collision2D collision)
		{
		}

		[Token(Token = "0x6001241")]
		[Address(RVA = "0xB809E0", Offset = "0xB809E0", VA = "0xB809E0")]
		private void OnTriggerEnter2D(Collider2D other)
		{
		}

		[Token(Token = "0x6001242")]
		[Address(RVA = "0xB80A18", Offset = "0xB80A18", VA = "0xB80A18", Slot = "10")]
		public virtual void TriggerEnter2D(Collider2D other)
		{
		}

		[Token(Token = "0x6001243")]
		[Address(RVA = "0xB80ABC", Offset = "0xB80ABC", VA = "0xB80ABC")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001244")]
		[Address(RVA = "0xB80AF4", Offset = "0xB80AF4", VA = "0xB80AF4", Slot = "11")]
		public virtual void CollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001245")]
		[Address(RVA = "0xB80B98", Offset = "0xB80B98", VA = "0xB80B98")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001246")]
		[Address(RVA = "0xB80BD0", Offset = "0xB80BD0", VA = "0xB80BD0", Slot = "12")]
		public virtual void TriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001247")]
		[Address(RVA = "0xB80CB4", Offset = "0xB80CB4", VA = "0xB80CB4")]
		private void OnControllerColliderHit(ControllerColliderHit hit)
		{
		}

		[Token(Token = "0x6001248")]
		[Address(RVA = "0xB80D08", Offset = "0xB80D08", VA = "0xB80D08", Slot = "13")]
		public virtual void ControllerColliderHit(GameObject hit, bool calledFromOtherKillable = false)
		{
		}

		[Token(Token = "0x6001249")]
		[Address(RVA = "0xB80FF8", Offset = "0xB80FF8", VA = "0xB80FF8", Slot = "14")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x600124A")]
		[Address(RVA = "0xB81B9C", Offset = "0xB81B9C", VA = "0xB81B9C")]
		public void AddAttackPoints(int pointsToAdd)
		{
		}

		[Token(Token = "0x600124B")]
		[Address(RVA = "0xB81D88", Offset = "0xB81D88", VA = "0xB81D88")]
		public void AddHitPoints(int pointsToAdd)
		{
		}

		[Token(Token = "0x600124C")]
		[Address(RVA = "0xB81E24", Offset = "0xB81E24", VA = "0xB81E24")]
		public void FireRespawnEvents()
		{
		}

		[Token(Token = "0x600124D")]
		[Address(RVA = "0xB81F20", Offset = "0xB81F20", VA = "0xB81F20")]
		public void StartDeathTimer()
		{
		}

		[Token(Token = "0x600124E")]
		[Address(RVA = "0xB81F44", Offset = "0xB81F44", VA = "0xB81F44")]
		public void StopDeathTimer()
		{
		}

		[Token(Token = "0x600124F")]
		[Address(RVA = "0xB81F5C", Offset = "0xB81F5C", VA = "0xB81F5C")]
		public void TemporaryInvincibility(float seconds)
		{
		}

		[Token(Token = "0x6001250")]
		[Address(RVA = "0xB82034", Offset = "0xB82034", VA = "0xB82034")]
		public bool IsUsingPrefabPool(Transform poolTrans)
		{
			return default(bool);
		}

		[Token(Token = "0x6001251")]
		[Address(RVA = "0xB82094", Offset = "0xB82094", VA = "0xB82094")]
		public void RegisterChildKillable(Killable kill)
		{
		}

		[Token(Token = "0x6001252")]
		[Address(RVA = "0xB822C8", Offset = "0xB822C8", VA = "0xB822C8")]
		public void RecordSpawner(GameObject spawnerObject)
		{
		}

		[Token(Token = "0x6001253")]
		[Address(RVA = "0xB822D8", Offset = "0xB822D8", VA = "0xB822D8", Slot = "15")]
		public virtual void UnregisterChildKillable(Killable kill)
		{
		}

		[Token(Token = "0x6001254")]
		[Address(RVA = "0xB824FC", Offset = "0xB824FC", VA = "0xB824FC")]
		public void RecordChildToDie(Killable kilChild)
		{
		}

		[Token(Token = "0x6001255")]
		[Address(RVA = "0xB825A8", Offset = "0xB825A8", VA = "0xB825A8")]
		private void CheckForValidVariables()
		{
		}

		[Token(Token = "0x6001256")]
		[Address(RVA = "0xB80800", Offset = "0xB80800", VA = "0xB80800")]
		private void CheckForAttackPoints(Killable enemy, GameObject goHit)
		{
		}

		[Token(Token = "0x6001257")]
		[Address(RVA = "0xB81384", Offset = "0xB81384", VA = "0xB81384")]
		private void DestroyRecordedChildren()
		{
		}

		[Token(Token = "0x6001258")]
		[Address(RVA = "0xB8215C", Offset = "0xB8215C", VA = "0xB8215C")]
		private void DisableColliders()
		{
		}

		[Token(Token = "0x6001259")]
		[Address(RVA = "0xB82390", Offset = "0xB82390", VA = "0xB82390")]
		private void EnableColliders()
		{
		}

		[Token(Token = "0x600125A")]
		[Address(RVA = "0xB806DC", Offset = "0xB806DC", VA = "0xB806DC")]
		private static Killable GetOtherKillable(GameObject other)
		{
			return null;
		}

		[Token(Token = "0x600125B")]
		[Address(RVA = "0xB804D8", Offset = "0xB804D8", VA = "0xB804D8")]
		private bool IsValidHit(int hitLayer, string hitTag)
		{
			return default(bool);
		}

		[Token(Token = "0x600125C")]
		[Address(RVA = "0xB830B4", Offset = "0xB830B4", VA = "0xB830B4")]
		private void LogIfEnabled(string msg)
		{
		}

		[Token(Token = "0x600125D")]
		[Address(RVA = "0xB83690", Offset = "0xB83690", VA = "0xB83690", Slot = "16")]
		public virtual void ModifyWorldVariables(WorldVariableCollection modCollection, bool isDamage, bool fireAnyway = false)
		{
		}

		[Token(Token = "0x600125E")]
		[Address(RVA = "0xB8151C", Offset = "0xB8151C", VA = "0xB8151C")]
		protected bool PerformDeath(string scenarioName, bool skipDespawn = false)
		{
			return default(bool);
		}

		[Token(Token = "0x600125F")]
		[Address(RVA = "0xB7FEFC", Offset = "0xB7FEFC", VA = "0xB7FEFC")]
		private void ResetVelocity()
		{
		}

		[Token(Token = "0x6001260")]
		[Address(RVA = "0xB7FE7C", Offset = "0xB7FE7C", VA = "0xB7FE7C")]
		private void ResetSpawnerInfo()
		{
		}

		[Token(Token = "0x6001261")]
		[Address(RVA = "0xB84324", Offset = "0xB84324", VA = "0xB84324")]
		private bool SpawnDamagePrefabsIfPerHit(int damagePoints)
		{
			return default(bool);
		}

		[Token(Token = "0x6001262")]
		[Address(RVA = "0xB84350", Offset = "0xB84350", VA = "0xB84350")]
		private void SpawnDamagePrefabs(int damagePoints)
		{
		}

		[Token(Token = "0x6001263")]
		[Address(RVA = "0xB8496C", Offset = "0xB8496C", VA = "0xB8496C")]
		private bool SpawnDealDamagePrefabsIfTakingDamage(int damagePoints, Killable enemy)
		{
			return default(bool);
		}

		[Token(Token = "0x6001264")]
		[Address(RVA = "0xB83904", Offset = "0xB83904", VA = "0xB83904")]
		private void SpawnDeathPrefabs()
		{
		}

		[Token(Token = "0x6001265")]
		[Address(RVA = "0xB84E90", Offset = "0xB84E90", VA = "0xB84E90")]
		private void SpawnInvinceHitPrefab()
		{
		}

		[Token(Token = "0x6001266")]
		[Address(RVA = "0xB851CC", Offset = "0xB851CC", VA = "0xB851CC")]
		private void SpawnVanishPrefab()
		{
		}

		[Token(Token = "0x6001267")]
		[Address(RVA = "0xB82D7C", Offset = "0xB82D7C", VA = "0xB82D7C")]
		private void ValidateWorldVariableModifier(WorldVariableModifier mod)
		{
		}

		[Token(Token = "0x6001268")]
		[Address(RVA = "0xB8550C", Offset = "0xB8550C", VA = "0xB8550C", Slot = "17")]
		public virtual bool DespawnPrefab()
		{
			return default(bool);
		}

		[Token(Token = "0x6001269")]
		[Address(RVA = "0xB85598", Offset = "0xB85598", VA = "0xB85598", Slot = "18")]
		public virtual Transform SpawnPrefab(Transform prefabToSpawn, Vector3 spawnPos)
		{
			return null;
		}

		[Token(Token = "0x600126A")]
		[Address(RVA = "0xB85678", Offset = "0xB85678", VA = "0xB85678", Slot = "19")]
		public virtual Transform SpawnDeathPrefab(Transform deathPre, Vector3 spawnPos, Quaternion spawnRotation, Transform theParent)
		{
			return null;
		}

		[Token(Token = "0x600126B")]
		[Address(RVA = "0xB85740", Offset = "0xB85740", VA = "0xB85740", Slot = "20")]
		protected virtual void DamagePrefabFailedSpawn(Transform prefabToSpawn)
		{
		}

		[Token(Token = "0x600126C")]
		[Address(RVA = "0xB857FC", Offset = "0xB857FC", VA = "0xB857FC", Slot = "21")]
		protected virtual void DamagePrefabSpawned(Transform spawnedDamagePrefab)
		{
		}

		[Token(Token = "0x600126D")]
		[Address(RVA = "0xB858B8", Offset = "0xB858B8", VA = "0xB858B8", Slot = "22")]
		protected virtual void DamagePrevented(int pointsDamage, Killable enemyHitBy)
		{
		}

		[Token(Token = "0x600126E")]
		[Address(RVA = "0xB858F8", Offset = "0xB858F8", VA = "0xB858F8", Slot = "23")]
		protected virtual void DeathDelayStarted()
		{
		}

		[Token(Token = "0x600126F")]
		[Address(RVA = "0xB859C8", Offset = "0xB859C8", VA = "0xB859C8", Slot = "24")]
		protected virtual void DeathPrefabFailedSpawn(Transform deathPre)
		{
		}

		[Token(Token = "0x6001270")]
		[Address(RVA = "0xB85A84", Offset = "0xB85A84", VA = "0xB85A84", Slot = "25")]
		protected virtual void DeathPrefabSpawned(Transform spawnedDeathPrefab)
		{
		}

		[Token(Token = "0x6001271")]
		[Address(RVA = "0xB85B40", Offset = "0xB85B40", VA = "0xB85B40", Slot = "26")]
		public virtual bool Despawn(TriggeredSpawner.EventType eType)
		{
			return default(bool);
		}

		[Token(Token = "0x6001272")]
		[Address(RVA = "0xB85CB8", Offset = "0xB85CB8", VA = "0xB85CB8", Slot = "27")]
		public virtual bool DespawnOrRespawn()
		{
			return default(bool);
		}

		[Token(Token = "0x6001273")]
		[Address(RVA = "0xB86054", Offset = "0xB86054", VA = "0xB86054", Slot = "28")]
		public virtual bool DespawnThis()
		{
			return default(bool);
		}

		[Token(Token = "0x6001274")]
		[Address(RVA = "0xB86194", Offset = "0xB86194", VA = "0xB86194")]
		public void DestroyImmediately(string scenarioName = "Destroyed")
		{
		}

		[Token(Token = "0x6001275")]
		[Address(RVA = "0xB861A8", Offset = "0xB861A8", VA = "0xB861A8", Slot = "29")]
		public virtual void DestroyKillable(string scenarioName = "Destroyed", bool skipDeathDelay = false)
		{
		}

		[Token(Token = "0x6001276")]
		[Address(RVA = "0xB861C8", Offset = "0xB861C8", VA = "0xB861C8", Slot = "30")]
		public virtual string DetermineScenario(string scenarioName)
		{
			return null;
		}

		[Token(Token = "0x6001277")]
		[Address(RVA = "0xB861D0", Offset = "0xB861D0", VA = "0xB861D0", Slot = "31")]
		public virtual bool IsInvincible()
		{
			return default(bool);
		}

		[Token(Token = "0x6001278")]
		[Address(RVA = "0xB86258", Offset = "0xB86258", VA = "0xB86258", Slot = "32")]
		public virtual bool IsTemporarilyInvincible()
		{
			return default(bool);
		}

		[Token(Token = "0x6001279")]
		[Address(RVA = "0xB86260", Offset = "0xB86260", VA = "0xB86260", Slot = "33")]
		public virtual void Knockback(Killable enemy)
		{
		}

		[Token(Token = "0x600127A")]
		[Address(RVA = "0xB86A10", Offset = "0xB86A10", VA = "0xB86A10", Slot = "34")]
		protected virtual void ModifyDamageWorldVariables(List<WorldVariableModifier> mods)
		{
		}

		[Token(Token = "0x600127B")]
		[Address(RVA = "0xB86A48", Offset = "0xB86A48", VA = "0xB86A48", Slot = "35")]
		protected virtual void ModifyDeathWorldVariables(List<WorldVariableModifier> mods)
		{
		}

		[Token(Token = "0x600127C")]
		[Address(RVA = "0xB86A80", Offset = "0xB86A80", VA = "0xB86A80", Slot = "36")]
		protected virtual bool ShouldDieFromNonDamageHit(Killable enemyKillable)
		{
			return default(bool);
		}

		[Token(Token = "0x600127D")]
		[Address(RVA = "0xB86A94", Offset = "0xB86A94", VA = "0xB86A94", Slot = "37")]
		protected virtual bool ShouldFireDamageVariableModifiers()
		{
			return default(bool);
		}

		[Token(Token = "0x600127E")]
		[Address(RVA = "0xB86A9C", Offset = "0xB86A9C", VA = "0xB86A9C", Slot = "38")]
		protected virtual bool ShouldFireDeathVariableModifiers()
		{
			return default(bool);
		}

		[Token(Token = "0x600127F")]
		[Address(RVA = "0xB86AA4", Offset = "0xB86AA4", VA = "0xB86AA4", Slot = "39")]
		protected virtual void SpawnedOrAwake(bool spawned = true)
		{
		}

		[Token(Token = "0x6001280")]
		[Address(RVA = "0xB87E6C", Offset = "0xB87E6C", VA = "0xB87E6C", Slot = "40")]
		protected virtual void SpawnerDestroyed()
		{
		}

		[Token(Token = "0x6001281")]
		[Address(RVA = "0xB87F1C", Offset = "0xB87F1C", VA = "0xB87F1C", Slot = "41")]
		public virtual void TakeDamage(int damagePoints)
		{
		}

		[Token(Token = "0x6001282")]
		[Address(RVA = "0xB87F30", Offset = "0xB87F30", VA = "0xB87F30", Slot = "42")]
		public virtual void TakeDamage(int damagePoints, Killable enemy)
		{
		}

		[Token(Token = "0x6001283")]
		[Address(RVA = "0xB886B4", Offset = "0xB886B4", VA = "0xB886B4", Slot = "43")]
		protected virtual void TakingDamage(int damagePoints, Killable enemy)
		{
		}

		[Token(Token = "0x6001284")]
		[Address(RVA = "0xB81F90", Offset = "0xB81F90", VA = "0xB81F90")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x39893C", Offset = "0x39893C")]
		private IEnumerator SetSpawnInvincibleForSeconds(float seconds)
		{
			return null;
		}

		[Token(Token = "0x6001285")]
		[Address(RVA = "0xB81484", Offset = "0xB81484", VA = "0xB81484")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x3989AC", Offset = "0x3989AC")]
		private IEnumerator WaitThenDestroy(string scenarioName)
		{
			return null;
		}

		[Token(Token = "0x60012A7")]
		[Address(RVA = "0xB888D0", Offset = "0xB888D0", VA = "0xB888D0")]
		public Killable()
		{
		}
	}
	[Token(Token = "0x20002E0")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x396208", Offset = "0x396208")]
	public class KillableChildCollision : MonoBehaviour
	{
		[Token(Token = "0x4000FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Killable killable;

		[Token(Token = "0x4000FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool _isValid;

		[Token(Token = "0x170000F2")]
		private Killable KillableToAlert
		{
			[Token(Token = "0x60012A8")]
			[Address(RVA = "0xB89380", Offset = "0xB89380", VA = "0xB89380")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60012A9")]
		[Address(RVA = "0xB895C0", Offset = "0xB895C0", VA = "0xB895C0")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x60012AA")]
		[Address(RVA = "0xB89620", Offset = "0xB89620", VA = "0xB89620")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60012AB")]
		[Address(RVA = "0xB89680", Offset = "0xB89680", VA = "0xB89680")]
		private void OnCollisionEnter2D(Collision2D coll)
		{
		}

		[Token(Token = "0x60012AC")]
		[Address(RVA = "0xB896CC", Offset = "0xB896CC", VA = "0xB896CC")]
		private void OnTriggerEnter2D(Collider2D other)
		{
		}

		[Token(Token = "0x60012AD")]
		[Address(RVA = "0xB89718", Offset = "0xB89718", VA = "0xB89718")]
		public KillableChildCollision()
		{
		}
	}
	[Token(Token = "0x20002E1")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x39623C", Offset = "0x39623C")]
	public class KillableChildVisibility : MonoBehaviour
	{
		[Token(Token = "0x4000FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Killable killableWithRenderer;

		[Token(Token = "0x4000FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool _isValid;

		[Token(Token = "0x170000F3")]
		private Killable KillableToAlert
		{
			[Token(Token = "0x60012AE")]
			[Address(RVA = "0xB89728", Offset = "0xB89728", VA = "0xB89728")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60012AF")]
		[Address(RVA = "0xB89968", Offset = "0xB89968", VA = "0xB89968")]
		private void OnBecameVisible()
		{
		}

		[Token(Token = "0x60012B0")]
		[Address(RVA = "0xB899C0", Offset = "0xB899C0", VA = "0xB899C0")]
		private void OnBecameInvisible()
		{
		}

		[Token(Token = "0x60012B1")]
		[Address(RVA = "0xB89A18", Offset = "0xB89A18", VA = "0xB89A18")]
		public KillableChildVisibility()
		{
		}
	}
	[Token(Token = "0x20002E2")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x396270", Offset = "0x396270")]
	public class KillableListener : MonoBehaviour
	{
		[Token(Token = "0x4000FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string sourceKillableName;

		[Token(Token = "0x60012B2")]
		[Address(RVA = "0xB89A28", Offset = "0xB89A28", VA = "0xB89A28")]
		private void Reset()
		{
		}

		[Token(Token = "0x60012B3")]
		[Address(RVA = "0xB89AEC", Offset = "0xB89AEC", VA = "0xB89AEC", Slot = "4")]
		public virtual void SpawnerDestroyed()
		{
		}

		[Token(Token = "0x60012B4")]
		[Address(RVA = "0xB89AF0", Offset = "0xB89AF0", VA = "0xB89AF0", Slot = "5")]
		public virtual void Despawning(TriggeredSpawner.EventType eType)
		{
		}

		[Token(Token = "0x60012B5")]
		[Address(RVA = "0xB89AF4", Offset = "0xB89AF4", VA = "0xB89AF4", Slot = "6")]
		public virtual void Despawned()
		{
		}

		[Token(Token = "0x60012B6")]
		[Address(RVA = "0xB89AF8", Offset = "0xB89AF8", VA = "0xB89AF8", Slot = "7")]
		public virtual void TakingDamage(int pointsDamage, Killable enemyHitBy)
		{
		}

		[Token(Token = "0x60012B7")]
		[Address(RVA = "0xB89AFC", Offset = "0xB89AFC", VA = "0xB89AFC", Slot = "8")]
		public virtual void DamagePrevented(int pointsDamage, Killable enemyHitBy)
		{
		}

		[Token(Token = "0x60012B8")]
		[Address(RVA = "0xB89B00", Offset = "0xB89B00", VA = "0xB89B00", Slot = "9")]
		public virtual void DamagePrefabSpawned(Transform damagePrefab)
		{
		}

		[Token(Token = "0x60012B9")]
		[Address(RVA = "0xB89B04", Offset = "0xB89B04", VA = "0xB89B04", Slot = "10")]
		public virtual void DamagePrefabFailedToSpawn(Transform damagePrefab)
		{
		}

		[Token(Token = "0x60012BA")]
		[Address(RVA = "0xB89B08", Offset = "0xB89B08", VA = "0xB89B08", Slot = "11")]
		public virtual void DeathDelayStarted(float delayTime)
		{
		}

		[Token(Token = "0x60012BB")]
		[Address(RVA = "0xB89B0C", Offset = "0xB89B0C", VA = "0xB89B0C", Slot = "12")]
		public virtual void DeathPrefabSpawned(Transform deathPrefab)
		{
		}

		[Token(Token = "0x60012BC")]
		[Address(RVA = "0xB89B10", Offset = "0xB89B10", VA = "0xB89B10", Slot = "13")]
		public virtual void DeathPrefabFailedToSpawn(Transform deathPrefab)
		{
		}

		[Token(Token = "0x60012BD")]
		[Address(RVA = "0xB89B14", Offset = "0xB89B14", VA = "0xB89B14", Slot = "14")]
		public virtual void ModifyingDamageWorldVariables(List<WorldVariableModifier> variableModifiers)
		{
		}

		[Token(Token = "0x60012BE")]
		[Address(RVA = "0xB89B18", Offset = "0xB89B18", VA = "0xB89B18", Slot = "15")]
		public virtual void ModifyingDeathWorldVariables(List<WorldVariableModifier> variableModifiers)
		{
		}

		[Token(Token = "0x60012BF")]
		[Address(RVA = "0xB89B1C", Offset = "0xB89B1C", VA = "0xB89B1C", Slot = "16")]
		public virtual void WaitingToDestroyKillable(Killable deadKillable)
		{
		}

		[Token(Token = "0x60012C0")]
		[Address(RVA = "0xB89B20", Offset = "0xB89B20", VA = "0xB89B20", Slot = "17")]
		public virtual void DestroyingKillable(Killable deadKillable)
		{
		}

		[Token(Token = "0x60012C1")]
		[Address(RVA = "0xB89B24", Offset = "0xB89B24", VA = "0xB89B24", Slot = "18")]
		public virtual string DeterminingScenario(Killable deadKillable, string scenario)
		{
			return null;
		}

		[Token(Token = "0x60012C2")]
		[Address(RVA = "0xB89B2C", Offset = "0xB89B2C", VA = "0xB89B2C", Slot = "19")]
		public virtual void Spawned(Killable newKillable)
		{
		}

		[Token(Token = "0x60012C3")]
		[Address(RVA = "0xB89B30", Offset = "0xB89B30", VA = "0xB89B30", Slot = "20")]
		public virtual void StartedInScene(Killable newKillable)
		{
		}

		[Token(Token = "0x60012C4")]
		[Address(RVA = "0xB89B34", Offset = "0xB89B34", VA = "0xB89B34")]
		public KillableListener()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002E3")]
	public class CGKCustomEventCategory
	{
		[Token(Token = "0x4001000")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string CatName;

		[Token(Token = "0x4001001")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool IsExpanded;

		[Token(Token = "0x4001002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
		public bool IsEditing;

		[Token(Token = "0x4001003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
		public bool IsTemporary;

		[Token(Token = "0x4001004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string ProspectiveName;

		[Token(Token = "0x60012C5")]
		[Address(RVA = "0xB7D4C0", Offset = "0xB7D4C0", VA = "0xB7D4C0")]
		public CGKCustomEventCategory()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002E4")]
	public class CgkCustomEvent
	{
		[Token(Token = "0x4001005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string EventName;

		[Token(Token = "0x4001006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string ProspectiveName;

		[Token(Token = "0x4001007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool IsEditing;

		[Token(Token = "0x4001008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool eventExpanded;

		[Token(Token = "0x4001009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public LevelSettings.EventReceiveMode eventRcvMode;

		[Token(Token = "0x400100A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LevelSettings.EventReceiveFilter eventRcvFilterMode;

		[Token(Token = "0x400100B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public KillerInt filterModeQty;

		[Token(Token = "0x400100C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public KillerFloat distanceThreshold;

		[Token(Token = "0x400100D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int frameLastFired;

		[Token(Token = "0x400100E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public CgkCustomEventsFireDuringFrame customEventsDuringFrame;

		[Token(Token = "0x400100F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public string categoryName;

		[Token(Token = "0x60012C6")]
		[Address(RVA = "0xB7D594", Offset = "0xB7D594", VA = "0xB7D594")]
		public CgkCustomEvent(string eventName)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002E5")]
	public class CgkCustomEventsFireDuringFrame
	{
		[Token(Token = "0x4001010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int FrameNumber;

		[Token(Token = "0x4001011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public HashSet<int> CustomEventHashes;

		[Token(Token = "0x60012C7")]
		[Address(RVA = "0xB7D700", Offset = "0xB7D700", VA = "0xB7D700")]
		public CgkCustomEventsFireDuringFrame()
		{
		}
	}
	[Token(Token = "0x20002E6")]
	public interface ICgkEventReceiver
	{
		[Token(Token = "0x60012C8")]
		void CheckForIllegalCustomEvents();

		[Token(Token = "0x60012C9")]
		void ReceiveEvent(string customEventName, Vector3 eventOrigin);

		[Token(Token = "0x60012CA")]
		bool SubscribesToEvent(string customEventName);

		[Token(Token = "0x60012CB")]
		void RegisterReceiver();

		[Token(Token = "0x60012CC")]
		void UnregisterReceiver();
	}
	[Token(Token = "0x20002E7")]
	public class UniversalCustomEventReceiver : MonoBehaviour, ICgkEventReceiver
	{
		[Token(Token = "0x200037B")]
		public enum EventReceivedBehavior
		{
			[Token(Token = "0x40013EB")]
			None,
			[Token(Token = "0x40013EC")]
			DealXDamage,
			[Token(Token = "0x40013ED")]
			Despawn,
			[Token(Token = "0x40013EE")]
			Destroy
		}

		[Token(Token = "0x4001012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[CoreCustomEvent]
		public string CustomEvent;

		[Token(Token = "0x4001013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public EventReceivedBehavior eventReceivedBehavior;

		[Token(Token = "0x4001014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x39750C", Offset = "0x39750C")]
		public int damageToDeal;

		[Token(Token = "0x4001015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Transform _trans;

		[Token(Token = "0x4001016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Killable _kill;

		[Token(Token = "0x170000F4")]
		public Killable Kill
		{
			[Token(Token = "0x60012D6")]
			[Address(RVA = "0xE97494", Offset = "0xE97494", VA = "0xE97494")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F5")]
		public Transform Trans
		{
			[Token(Token = "0x60012D7")]
			[Address(RVA = "0xE973E4", Offset = "0xE973E4", VA = "0xE973E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60012CD")]
		[Address(RVA = "0xE96DF8", Offset = "0xE96DF8", VA = "0xE96DF8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60012CE")]
		[Address(RVA = "0xE96EAC", Offset = "0xE96EAC", VA = "0xE96EAC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60012CF")]
		[Address(RVA = "0xE96F50", Offset = "0xE96F50", VA = "0xE96F50")]
		private void Start()
		{
		}

		[Token(Token = "0x60012D0")]
		[Address(RVA = "0xE96F54", Offset = "0xE96F54", VA = "0xE96F54", Slot = "4")]
		public void CheckForIllegalCustomEvents()
		{
		}

		[Token(Token = "0x60012D1")]
		[Address(RVA = "0xE97218", Offset = "0xE97218", VA = "0xE97218", Slot = "5")]
		public void ReceiveEvent(string customEventName, Vector3 eventOrigin)
		{
		}

		[Token(Token = "0x60012D2")]
		[Address(RVA = "0xE975FC", Offset = "0xE975FC", VA = "0xE975FC", Slot = "6")]
		public bool SubscribesToEvent(string customEventName)
		{
			return default(bool);
		}

		[Token(Token = "0x60012D3")]
		[Address(RVA = "0xE96DFC", Offset = "0xE96DFC", VA = "0xE96DFC", Slot = "7")]
		public void RegisterReceiver()
		{
		}

		[Token(Token = "0x60012D4")]
		[Address(RVA = "0xE96EB0", Offset = "0xE96EB0", VA = "0xE96EB0", Slot = "8")]
		public void UnregisterReceiver()
		{
		}

		[Token(Token = "0x60012D5")]
		[Address(RVA = "0xE97544", Offset = "0xE97544", VA = "0xE97544")]
		private void LogNoKillable()
		{
		}

		[Token(Token = "0x60012D8")]
		[Address(RVA = "0xE97608", Offset = "0xE97608", VA = "0xE97608")]
		public UniversalCustomEventReceiver()
		{
		}
	}
	[Token(Token = "0x20002E8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x3962A4", Offset = "0x3962A4")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x3962A4", Offset = "0x3962A4")]
	public class ParticleDespawner : MonoBehaviour
	{
		[Token(Token = "0x4001017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private ParticleSystem _particles;

		[Token(Token = "0x4001018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Transform _trans;

		[Token(Token = "0x60012D9")]
		[Address(RVA = "0x9E08DC", Offset = "0x9E08DC", VA = "0x9E08DC")]
		private void Awake()
		{
		}

		[Token(Token = "0x60012DA")]
		[Address(RVA = "0x9E094C", Offset = "0x9E094C", VA = "0x9E094C")]
		private void Update()
		{
		}

		[Token(Token = "0x60012DB")]
		[Address(RVA = "0x9E12A4", Offset = "0x9E12A4", VA = "0x9E12A4")]
		public ParticleDespawner()
		{
		}
	}
	[Token(Token = "0x20002E9")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x39633C", Offset = "0x39633C")]
	public class TimedDespawner : MonoBehaviour
	{
		[Token(Token = "0x200037C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396988", Offset = "0x396988")]
		private sealed class <WaitUntilTimeUp>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40013EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int <>1__state;

			[Token(Token = "0x40013F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private object <>2__current;

			[Token(Token = "0x40013F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public TimedDespawner <>4__this;

			[Token(Token = "0x1700016F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60016D4")]
				[Address(RVA = "0x9EBFC0", Offset = "0x9EBFC0", VA = "0x9EBFC0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000170")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60016D6")]
				[Address(RVA = "0x9EC040", Offset = "0x9EC040", VA = "0x9EC040", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60016D1")]
			[Address(RVA = "0x9EBDB4", Offset = "0x9EBDB4", VA = "0x9EBDB4")]
			[DebuggerHidden]
			public <WaitUntilTimeUp>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x60016D2")]
			[Address(RVA = "0x9EBE60", Offset = "0x9EBE60", VA = "0x9EBE60", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60016D3")]
			[Address(RVA = "0x9EBE64", Offset = "0x9EBE64", VA = "0x9EBE64", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60016D5")]
			[Address(RVA = "0x9EBFC8", Offset = "0x9EBFC8", VA = "0x9EBFC8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float LifeSeconds;

		[Token(Token = "0x400101A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool StartTimerOnSpawn;

		[Token(Token = "0x400101B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public TimedDespawnerListener listener;

		[Token(Token = "0x400101C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Transform _trans;

		[Token(Token = "0x400101D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private YieldInstruction _timerDelay;

		[Token(Token = "0x60012DC")]
		[Address(RVA = "0x9EBC4C", Offset = "0x9EBC4C", VA = "0x9EBC4C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60012DD")]
		[Address(RVA = "0x9EBD0C", Offset = "0x9EBD0C", VA = "0x9EBD0C")]
		private void OnSpawned()
		{
		}

		[Token(Token = "0x60012DE")]
		[Address(RVA = "0x9EBCD4", Offset = "0x9EBCD4", VA = "0x9EBCD4")]
		private void AwakeOrSpawn()
		{
		}

		[Token(Token = "0x60012DF")]
		[Address(RVA = "0x9EBD10", Offset = "0x9EBD10", VA = "0x9EBD10")]
		public void StartTimer()
		{
		}

		[Token(Token = "0x60012E0")]
		[Address(RVA = "0x9EBD34", Offset = "0x9EBD34", VA = "0x9EBD34")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x398A3C", Offset = "0x398A3C")]
		private IEnumerator WaitUntilTimeUp()
		{
			return null;
		}

		[Token(Token = "0x60012E1")]
		[Address(RVA = "0x9EBDD4", Offset = "0x9EBDD4", VA = "0x9EBDD4")]
		public void ChangeTimerDelay(float time)
		{
		}

		[Token(Token = "0x60012E2")]
		[Address(RVA = "0x9EBE44", Offset = "0x9EBE44", VA = "0x9EBE44")]
		public TimedDespawner()
		{
		}
	}
	[Token(Token = "0x20002EA")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x396370", Offset = "0x396370")]
	public class TimedDespawnerListener : MonoBehaviour
	{
		[Token(Token = "0x400101E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string sourceDespawnerName;

		[Token(Token = "0x60012E3")]
		[Address(RVA = "0x9EC048", Offset = "0x9EC048", VA = "0x9EC048")]
		private void Reset()
		{
		}

		[Token(Token = "0x60012E4")]
		[Address(RVA = "0x9EC10C", Offset = "0x9EC10C", VA = "0x9EC10C", Slot = "4")]
		public virtual void Despawning(Transform transDespawning)
		{
		}

		[Token(Token = "0x60012E5")]
		[Address(RVA = "0x9EC110", Offset = "0x9EC110", VA = "0x9EC110")]
		public TimedDespawnerListener()
		{
		}
	}
	[Token(Token = "0x20002EB")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x3963A4", Offset = "0x3963A4")]
	public class TriggeredDespawner : MonoBehaviour
	{
		[Token(Token = "0x400101F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private Transform _trans;

		[Token(Token = "0x4001020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public EventDespawnSpecifics invisibleSpec;

		[Token(Token = "0x4001021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public EventDespawnSpecifics mouseOverSpec;

		[Token(Token = "0x4001022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EventDespawnSpecifics mouseClickSpec;

		[Token(Token = "0x4001023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public EventDespawnSpecifics collisionSpec;

		[Token(Token = "0x4001024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EventDespawnSpecifics triggerEnterSpec;

		[Token(Token = "0x4001025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public EventDespawnSpecifics triggerExitSpec;

		[Token(Token = "0x4001026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EventDespawnSpecifics collision2dSpec;

		[Token(Token = "0x4001027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public EventDespawnSpecifics triggerEnter2dSpec;

		[Token(Token = "0x4001028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public EventDespawnSpecifics triggerExit2dSpec;

		[Token(Token = "0x4001029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public EventDespawnSpecifics onClickSpec;

		[Token(Token = "0x400102A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TriggeredDespawnerListener listener;

		[Token(Token = "0x400102B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool _isDespawning;

		[Token(Token = "0x60012E6")]
		[Address(RVA = "0x9EC2E4", Offset = "0x9EC2E4", VA = "0x9EC2E4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60012E7")]
		[Address(RVA = "0x9EC314", Offset = "0x9EC314", VA = "0x9EC314")]
		private void OnSpawned()
		{
		}

		[Token(Token = "0x60012E8")]
		[Address(RVA = "0x9EC324", Offset = "0x9EC324", VA = "0x9EC324", Slot = "4")]
		protected virtual void SpawnedOrAwake()
		{
		}

		[Token(Token = "0x60012E9")]
		[Address(RVA = "0x9EC330", Offset = "0x9EC330", VA = "0x9EC330")]
		private void OnBecameInvisible()
		{
		}

		[Token(Token = "0x60012EA")]
		[Address(RVA = "0x9EC518", Offset = "0x9EC518", VA = "0x9EC518")]
		private void OnMouseEnter()
		{
		}

		[Token(Token = "0x60012EB")]
		[Address(RVA = "0x9EC554", Offset = "0x9EC554", VA = "0x9EC554")]
		private void OnMouseDown()
		{
		}

		[Token(Token = "0x60012EC")]
		[Address(RVA = "0x9EC590", Offset = "0x9EC590", VA = "0x9EC590")]
		private void OnClick()
		{
		}

		[Token(Token = "0x60012ED")]
		[Address(RVA = "0x9EC5CC", Offset = "0x9EC5CC", VA = "0x9EC5CC")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x60012EE")]
		[Address(RVA = "0x9EC770", Offset = "0x9EC770", VA = "0x9EC770")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60012EF")]
		[Address(RVA = "0x9EC914", Offset = "0x9EC914", VA = "0x9EC914")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x60012F0")]
		[Address(RVA = "0x9ECAB8", Offset = "0x9ECAB8", VA = "0x9ECAB8")]
		private void OnCollisionEnter2D(Collision2D collision)
		{
		}

		[Token(Token = "0x60012F1")]
		[Address(RVA = "0x9ECC5C", Offset = "0x9ECC5C", VA = "0x9ECC5C")]
		private void OnTriggerEnter2D(Collider2D other)
		{
		}

		[Token(Token = "0x60012F2")]
		[Address(RVA = "0x9ECE00", Offset = "0x9ECE00", VA = "0x9ECE00")]
		private void OnTriggerExit2D(Collider2D other)
		{
		}

		[Token(Token = "0x60012F3")]
		[Address(RVA = "0x9EC36C", Offset = "0x9EC36C", VA = "0x9EC36C")]
		private void Despawn(TriggeredSpawner.EventType eType)
		{
		}

		[Token(Token = "0x60012F4")]
		[Address(RVA = "0x9ECFA4", Offset = "0x9ECFA4", VA = "0x9ECFA4")]
		public TriggeredDespawner()
		{
		}
	}
	[Token(Token = "0x20002EC")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x3963D8", Offset = "0x3963D8")]
	public class TriggeredDespawnerListener : MonoBehaviour
	{
		[Token(Token = "0x400102C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string sourceDespawnerName;

		[Token(Token = "0x60012F5")]
		[Address(RVA = "0x9ED0F0", Offset = "0x9ED0F0", VA = "0x9ED0F0")]
		private void Reset()
		{
		}

		[Token(Token = "0x60012F6")]
		[Address(RVA = "0x9ED1B4", Offset = "0x9ED1B4", VA = "0x9ED1B4", Slot = "4")]
		public virtual void Despawning(TriggeredSpawner.EventType eType, Transform transDespawning)
		{
		}

		[Token(Token = "0x60012F7")]
		[Address(RVA = "0x9ED1B8", Offset = "0x9ED1B8", VA = "0x9ED1B8")]
		public TriggeredDespawnerListener()
		{
		}
	}
	[Token(Token = "0x20002ED")]
	[AttributeAttribute(Name = "CoreScriptOrder", RVA = "0x39640C", Offset = "0x39640C")]
	public class LevelSettings : MonoBehaviour
	{
		[Token(Token = "0x200037D")]
		public enum DistanceType
		{
			[Token(Token = "0x40013F3")]
			Local,
			[Token(Token = "0x40013F4")]
			World
		}

		[Token(Token = "0x200037E")]
		public enum RepeatToUseItem
		{
			[Token(Token = "0x40013F6")]
			All,
			[Token(Token = "0x40013F7")]
			Final
		}

		[Token(Token = "0x200037F")]
		public enum WaveSpawnerUseMode
		{
			[Token(Token = "0x40013F9")]
			AllAbove,
			[Token(Token = "0x40013FA")]
			RandomSubset
		}

		[Token(Token = "0x2000380")]
		public enum LevelLoopMode
		{
			[Token(Token = "0x40013FC")]
			Win,
			[Token(Token = "0x40013FD")]
			RepeatAllLevelsFromBeginning
		}

		[Token(Token = "0x2000381")]
		public enum EventReceiveMode
		{
			[Token(Token = "0x40013FF")]
			Always,
			[Token(Token = "0x4001400")]
			WhenDistanceLessThan,
			[Token(Token = "0x4001401")]
			WhenDistanceMoreThan,
			[Token(Token = "0x4001402")]
			Never,
			[Token(Token = "0x4001403")]
			OnSameGameObject,
			[Token(Token = "0x4001404")]
			OnChildGameObject,
			[Token(Token = "0x4001405")]
			OnParentGameObject,
			[Token(Token = "0x4001406")]
			OnSameOrChildGameObject,
			[Token(Token = "0x4001407")]
			OnSameOrParentGameObject
		}

		[Token(Token = "0x2000382")]
		public enum EventReceiveFilter
		{
			[Token(Token = "0x4001409")]
			All,
			[Token(Token = "0x400140A")]
			Closest,
			[Token(Token = "0x400140B")]
			Random
		}

		[Token(Token = "0x2000383")]
		public enum WaveOrder
		{
			[Token(Token = "0x400140D")]
			SpecifiedOrder,
			[Token(Token = "0x400140E")]
			RandomOrder
		}

		[Token(Token = "0x2000384")]
		public enum WaveRestartBehavior
		{
			[Token(Token = "0x4001410")]
			LeaveSpawned,
			[Token(Token = "0x4001411")]
			DestroySpawned,
			[Token(Token = "0x4001412")]
			DespawnSpawned
		}

		[Token(Token = "0x2000385")]
		public enum VariableSource
		{
			[Token(Token = "0x4001414")]
			Variable,
			[Token(Token = "0x4001415")]
			Value
		}

		[Token(Token = "0x2000386")]
		public enum WaveMusicMode
		{
			[Token(Token = "0x4001417")]
			KeepPreviousMusic,
			[Token(Token = "0x4001418")]
			PlayNew,
			[Token(Token = "0x4001419")]
			Silence
		}

		[Token(Token = "0x2000387")]
		public enum ActiveItemMode
		{
			[Token(Token = "0x400141B")]
			Always,
			[Token(Token = "0x400141C")]
			Never,
			[Token(Token = "0x400141D")]
			IfWorldVariableInRange,
			[Token(Token = "0x400141E")]
			IfWorldVariableOutsideRange
		}

		[Token(Token = "0x2000388")]
		public enum SkipWaveMode
		{
			[Token(Token = "0x4001420")]
			None,
			[Token(Token = "0x4001421")]
			Always,
			[Token(Token = "0x4001422")]
			IfWorldVariableValueAbove,
			[Token(Token = "0x4001423")]
			IfWorldVariableValueBelow
		}

		[Token(Token = "0x2000389")]
		public enum WaveType
		{
			[Token(Token = "0x4001425")]
			Timed,
			[Token(Token = "0x4001426")]
			Elimination
		}

		[Token(Token = "0x200038A")]
		public enum SpawnerType
		{
			[Token(Token = "0x4001428")]
			Green,
			[Token(Token = "0x4001429")]
			Red
		}

		[Token(Token = "0x200038B")]
		public enum RotationType
		{
			[Token(Token = "0x400142B")]
			Identity,
			[Token(Token = "0x400142C")]
			CustomEuler,
			[Token(Token = "0x400142D")]
			SpawnerRotation
		}

		[Token(Token = "0x200038C")]
		public enum SpawnPositionMode
		{
			[Token(Token = "0x400142F")]
			UseVector3,
			[Token(Token = "0x4001430")]
			UseThisObjectPosition,
			[Token(Token = "0x4001431")]
			UseOtherObjectPosition
		}

		[Token(Token = "0x200038D")]
		public struct RespawnTimer
		{
			[Token(Token = "0x4001432")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float TimeToRespawn;

			[Token(Token = "0x4001433")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public Transform PrefabToRespawn;

			[Token(Token = "0x4001434")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Vector3 Position;

			[Token(Token = "0x4001435")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public bool HasRespawnCustomEvents;

			[Token(Token = "0x60016D7")]
			[Address(RVA = "0x4610F8", Offset = "0x4610F8", VA = "0x4610F8")]
			public RespawnTimer(float timeToWait, Transform prefab, Vector3 position, bool hasRespawnCustomEvents)
			{
			}
		}

		[Token(Token = "0x200038E")]
		public struct CustomEventCandidate
		{
			[Token(Token = "0x4001436")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float DistanceAway;

			[Token(Token = "0x4001437")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public ICgkEventReceiver Receiver;

			[Token(Token = "0x4001438")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Transform Trans;

			[Token(Token = "0x4001439")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public int RandomId;

			[Token(Token = "0x60016D8")]
			[Address(RVA = "0x46109C", Offset = "0x46109C", VA = "0x46109C")]
			public CustomEventCandidate(float distance, ICgkEventReceiver rec, Transform trans, int randomId)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200038F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396998", Offset = "0x396998")]
		private sealed class <>c
		{
			[Token(Token = "0x400143A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x400143B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public static Comparison<LevelWave> <>9__115_0;

			[Token(Token = "0x400143C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Comparison<WaveSyncroPrefabSpawner> <>9__119_0;

			[Token(Token = "0x400143D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public static Comparison<CustomEventCandidate> <>9__213_0;

			[Token(Token = "0x400143E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Comparison<CustomEventCandidate> <>9__213_1;

			[Token(Token = "0x60016DA")]
			[Address(RVA = "0xB954E0", Offset = "0xB954E0", VA = "0xB954E0")]
			public <>c()
			{
			}

			[Token(Token = "0x60016DB")]
			[Address(RVA = "0xB954E8", Offset = "0xB954E8", VA = "0xB954E8")]
			internal int <CoUpdate>b__115_0(LevelWave x, LevelWave y)
			{
				return default(int);
			}

			[Token(Token = "0x60016DC")]
			[Address(RVA = "0xB95528", Offset = "0xB95528", VA = "0xB95528")]
			internal int <SpawnNewWave>b__119_0(WaveSyncroPrefabSpawner x, WaveSyncroPrefabSpawner y)
			{
				return default(int);
			}

			[Token(Token = "0x60016DD")]
			[Address(RVA = "0xB95568", Offset = "0xB95568", VA = "0xB95568")]
			internal int <FireCustomEvent>b__213_0(CustomEventCandidate x, CustomEventCandidate y)
			{
				return default(int);
			}

			[Token(Token = "0x60016DE")]
			[Address(RVA = "0xB9559C", Offset = "0xB9559C", VA = "0xB9559C")]
			internal int <FireCustomEvent>b__213_1(CustomEventCandidate x, CustomEventCandidate y)
			{
				return default(int);
			}
		}

		[Token(Token = "0x2000390")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3969A8", Offset = "0x3969A8")]
		private sealed class <CoUpdate>d__115 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400143F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int <>1__state;

			[Token(Token = "0x4001440")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private object <>2__current;

			[Token(Token = "0x4001441")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public LevelSettings <>4__this;

			[Token(Token = "0x17000171")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60016E2")]
				[Address(RVA = "0xB97494", Offset = "0xB97494", VA = "0xB97494", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000172")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60016E4")]
				[Address(RVA = "0xB97514", Offset = "0xB97514", VA = "0xB97514", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60016DF")]
			[Address(RVA = "0xB8C75C", Offset = "0xB8C75C", VA = "0xB8C75C")]
			[DebuggerHidden]
			public <CoUpdate>d__115(int <>1__state)
			{
			}

			[Token(Token = "0x60016E0")]
			[Address(RVA = "0xB9589C", Offset = "0xB9589C", VA = "0xB9589C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60016E1")]
			[Address(RVA = "0xB958A0", Offset = "0xB958A0", VA = "0xB958A0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60016E3")]
			[Address(RVA = "0xB9749C", Offset = "0xB9749C", VA = "0xB9749C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000391")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3969B8", Offset = "0x3969B8")]
		private sealed class <>c__DisplayClass128_0
		{
			[Token(Token = "0x4001442")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public TriggeredSpawnerV2 spawner;

			[Token(Token = "0x4001443")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public TriggeredSpawner.EventType eType;

			[Token(Token = "0x4001444")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public TriggeredWaveSpecifics wave;

			[Token(Token = "0x60016E5")]
			[Address(RVA = "0xB8F390", Offset = "0xB8F390", VA = "0xB8F390")]
			public <>c__DisplayClass128_0()
			{
			}

			[Token(Token = "0x60016E6")]
			[Address(RVA = "0xB955D4", Offset = "0xB955D4", VA = "0xB955D4")]
			internal bool <TriggeredSpawnerWaveEliminated>b__0(TrigSpawnerWaveWaiter waiter)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000392")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3969C8", Offset = "0x3969C8")]
		private sealed class <>c__DisplayClass214_0
		{
			[Token(Token = "0x4001445")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string customEventName;

			[Token(Token = "0x60016E7")]
			[Address(RVA = "0xB944F8", Offset = "0xB944F8", VA = "0xB944F8")]
			public <>c__DisplayClass214_0()
			{
			}

			[Token(Token = "0x60016E8")]
			[Address(RVA = "0xB956BC", Offset = "0xB956BC", VA = "0xB956BC")]
			internal bool <GetCustomEventByName>b__0(CgkCustomEvent obj)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000393")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3969D8", Offset = "0x3969D8")]
		private sealed class <>c__DisplayClass216_0
		{
			[Token(Token = "0x4001446")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string eventName;

			[Token(Token = "0x60016E9")]
			[Address(RVA = "0xB94500", Offset = "0xB94500", VA = "0xB94500")]
			public <>c__DisplayClass216_0()
			{
			}

			[Token(Token = "0x60016EA")]
			[Address(RVA = "0xB956EC", Offset = "0xB956EC", VA = "0xB956EC")]
			internal bool <GetChildReceivers>b__0(ICgkEventReceiver rec)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000394")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3969E8", Offset = "0x3969E8")]
		private sealed class <>c__DisplayClass217_0
		{
			[Token(Token = "0x4001447")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string eventName;

			[Token(Token = "0x60016EB")]
			[Address(RVA = "0xB947F0", Offset = "0xB947F0", VA = "0xB947F0")]
			public <>c__DisplayClass217_0()
			{
			}

			[Token(Token = "0x60016EC")]
			[Address(RVA = "0xB957C4", Offset = "0xB957C4", VA = "0xB957C4")]
			internal bool <GetParentReceivers>b__0(ICgkEventReceiver rec)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x400102D")]
		public const int DefaultWaveDuration = 5;

		[Token(Token = "0x400102E")]
		public const string DynamicEventName = "[Type In]";

		[Token(Token = "0x400102F")]
		public const string NoEventName = "[None]";

		[Token(Token = "0x4001030")]
		public const string EmptyValue = "[Empty]";

		[Token(Token = "0x4001031")]
		public const string NoCategory = "[Uncategorized]";

		[Token(Token = "0x4001032")]
		public const string KillerPoolingContainerTransName = "PoolBoss";

		[Token(Token = "0x4001033")]
		public const string PrefabPoolsContainerTransName = "PrefabPools";

		[Token(Token = "0x4001034")]
		public const string SpawnerContainerTransName = "Spawners";

		[Token(Token = "0x4001035")]
		public const string WorldVariablesContainerTransName = "WorldVariables";

		[Token(Token = "0x4001036")]
		public const string DropDownNoneOption = "-None-";

		[Token(Token = "0x4001037")]
		public const string RevertLevelSettingsAlert = "Please revert your LevelSettings prefab.";

		[Token(Token = "0x4001038")]
		public const string NoSpawnContainerAlert = "You have no 'Spawners' prefab under LevelSettings. Please revert your LevelSettings prefab.";

		[Token(Token = "0x4001039")]
		public const string NoPrefabPoolsContainerAlert = "You have no 'PrefabPools' prefab under LevelSettings. Please revert your LevelSettings prefab.";

		[Token(Token = "0x400103A")]
		public const string NoWorldVariablesContainerAlert = "You have no 'WorldVariables' prefab under LevelSettings. Please revert your LevelSettings prefab.";

		[Token(Token = "0x400103B")]
		private const float WaveCheckInterval = 0.1f;

		[Token(Token = "0x400103C")]
		private const int MaxComponents = 20;

		[Token(Token = "0x400103D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool useMusicSettings;

		[Token(Token = "0x400103E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
		public bool showLevelSettings;

		[Token(Token = "0x400103F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
		public bool showCustomEvents;

		[Token(Token = "0x4001040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF")]
		public bool gameStatsExpanded;

		[Token(Token = "0x4001041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string newEventName;

		[Token(Token = "0x4001042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public LevelSettingsListener listener;

		[Token(Token = "0x4001043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform RedSpawnerTrans;

		[Token(Token = "0x4001044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Transform GreenSpawnerTrans;

		[Token(Token = "0x4001045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform PrefabPoolTrans;

		[Token(Token = "0x4001046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public string newSpawnerName;

		[Token(Token = "0x4001047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool newPrefabPoolExpanded;

		[Token(Token = "0x4001048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public string newPrefabPoolName;

		[Token(Token = "0x4001049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SpawnerType newSpawnerType;

		[Token(Token = "0x400104A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public LevelWaveMusicSettings gameOverMusicSettings;

		[Token(Token = "0x400104B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool spawnersExpanded;

		[Token(Token = "0x400104C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool createSpawnerExpanded;

		[Token(Token = "0x400104D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		public bool createPrefabPoolsExpanded;

		[Token(Token = "0x400104E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B")]
		public bool killerPoolingExpanded;

		[Token(Token = "0x400104F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool disableSyncroSpawners;

		[Token(Token = "0x4001050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		public bool startFirstWaveImmediately;

		[Token(Token = "0x4001051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public WaveRestartBehavior waveRestartMode;

		[Token(Token = "0x4001052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool enableWaveWarp;

		[Token(Token = "0x4001053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public KillerInt startLevelNumber;

		[Token(Token = "0x4001054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public KillerInt startWaveNumber;

		[Token(Token = "0x4001055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool persistBetweenScenes;

		[Token(Token = "0x4001056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool isLoggingOn;

		[Token(Token = "0x4001057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public List<LevelSpecifics> LevelTimes;

		[Token(Token = "0x4001058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool useWaves;

		[Token(Token = "0x4001059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		public bool showCustomWaveClasses;

		[Token(Token = "0x400105A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public List<string> customWaveClasses;

		[Token(Token = "0x400105B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public LevelLoopMode repeatLevelMode;

		[Token(Token = "0x400105C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public bool useWaveNameFilter;

		[Token(Token = "0x400105D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public string waveNameFilterText;

		[Token(Token = "0x400105E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public List<CgkCustomEvent> customEvents;

		[Token(Token = "0x400105F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public List<CGKCustomEventCategory> customEventCategories;

		[Token(Token = "0x4001060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public string newCustomEventCategoryName;

		[Token(Token = "0x4001061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public string addToCustomEventCategoryName;

		[Token(Token = "0x4001062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public bool initializationSettingsExpanded;

		[Token(Token = "0x4001063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public List<CGKCustomEventToFire> initializationCustomEvents;

		[Token(Token = "0x4001064")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public bool waveDurationsCopied;

		[Token(Token = "0x4001065")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly List<string> IllegalVariableNames;

		[Token(Token = "0x4001066")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static LevelSettings _lsInstance;

		[Token(Token = "0x4001067")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Dictionary<int, List<LevelWave>> _waveSettingsByLevel;

		[Token(Token = "0x4001068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static int _currentLevel;

		[Token(Token = "0x4001069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static int _currentLevelWave;

		[Token(Token = "0x400106A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static int _displayCurrentLevel;

		[Token(Token = "0x400106B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static int _displayCurrentWave;

		[Token(Token = "0x400106C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private static bool _gameIsOver;

		[Token(Token = "0x400106D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		private static bool _hasPlayerWon;

		[Token(Token = "0x400106E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		private static bool _wavesArePaused;

		[Token(Token = "0x400106F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static float _lastWavePauseTime;

		[Token(Token = "0x4001070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private static float _wavePausedTime;

		[Token(Token = "0x4001071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static LevelWave _previousWave;

		[Token(Token = "0x4001072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private static readonly List<TrigSpawnerWaveWaiter> TriggeredWavesToAwait;

		[Token(Token = "0x4001073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static readonly Dictionary<int, WaveSyncroPrefabSpawner> EliminationSpawnersUnkilled;

		[Token(Token = "0x4001074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private static bool _skippingWaveForRestart;

		[Token(Token = "0x4001075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		private static bool _skipCurrentWave;

		[Token(Token = "0x4001076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static readonly List<Transform> SpawnedItemsRemaining;

		[Token(Token = "0x4001077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private static int _waveTimeRemaining;

		[Token(Token = "0x4001078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static readonly Dictionary<string, float> RecentErrorsByTime;

		[Token(Token = "0x4001079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private static readonly List<RespawnTimer> PrefabsToRespawn;

		[Token(Token = "0x400107A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static readonly Dictionary<int, object> CustomEventParams;

		[Token(Token = "0x400107B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private static readonly Dictionary<int, Transform> CustomEventParamSenders;

		[Token(Token = "0x400107C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private static readonly List<CustomEventCandidate> ValidReceivers;

		[Token(Token = "0x400107D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private static readonly Dictionary<string, Dictionary<ICgkEventReceiver, Transform>> ReceiversByEventName;

		[Token(Token = "0x400107E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private static Transform _trans;

		[Token(Token = "0x400107F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly List<WaveSyncroPrefabSpawner> _syncroSpawners;

		[Token(Token = "0x4001080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private bool _initCustomEventsFired;

		[Token(Token = "0x4001081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8D")]
		private bool _isValid;

		[Token(Token = "0x4001082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float _lastWaveChangeTime;

		[Token(Token = "0x4001083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool _hasFirstWaveBeenStarted;

		[Token(Token = "0x4001084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public int _frames;

		[Token(Token = "0x4001085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public static readonly YieldInstruction EndOfFrameDelay;

		[Token(Token = "0x4001086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private readonly YieldInstruction _loopDelay;

		[Token(Token = "0x4001087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397540", Offset = "0x397540")]
		private static bool <AppIsShuttingDown>k__BackingField;

		[Token(Token = "0x170000F6")]
		public static LevelSettings Instance
		{
			[Token(Token = "0x6001307")]
			[Address(RVA = "0xB7E6CC", Offset = "0xB7E6CC", VA = "0xB7E6CC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001308")]
			[Address(RVA = "0xB8E4C0", Offset = "0xB8E4C0", VA = "0xB8E4C0")]
			set
			{
			}
		}

		[Token(Token = "0x170000F7")]
		public static bool AppIsShuttingDown
		{
			[Token(Token = "0x600131C")]
			[Address(RVA = "0xB90888", Offset = "0xB90888", VA = "0xB90888")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x398B1C", Offset = "0x398B1C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600131D")]
			[Address(RVA = "0xB90900", Offset = "0xB90900", VA = "0xB90900")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x398B2C", Offset = "0x398B2C")]
			set
			{
			}
		}

		[Token(Token = "0x170000F8")]
		public static LevelWave ActiveWaveInfo
		{
			[Token(Token = "0x600131E")]
			[Address(RVA = "0xB8CCE0", Offset = "0xB8CCE0", VA = "0xB8CCE0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F9")]
		public static int CurrentDisplayLevel
		{
			[Token(Token = "0x600131F")]
			[Address(RVA = "0xB90790", Offset = "0xB90790", VA = "0xB90790")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000FA")]
		public static int CurrentDisplayWave
		{
			[Token(Token = "0x6001320")]
			[Address(RVA = "0xB9080C", Offset = "0xB9080C", VA = "0xB9080C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000FB")]
		public static int CurrentLevel
		{
			[Token(Token = "0x6001321")]
			[Address(RVA = "0xB9097C", Offset = "0xB9097C", VA = "0xB9097C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000FC")]
		public static int CurrentLevelWave
		{
			[Token(Token = "0x6001322")]
			[Address(RVA = "0xB909F4", Offset = "0xB909F4", VA = "0xB909F4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000FD")]
		public int LevelNumber
		{
			[Token(Token = "0x6001323")]
			[Address(RVA = "0xB90A6C", Offset = "0xB90A6C", VA = "0xB90A6C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000FE")]
		public int WaveNumber
		{
			[Token(Token = "0x6001324")]
			[Address(RVA = "0xB90B38", Offset = "0xB90B38", VA = "0xB90B38")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000FF")]
		public static LevelWave CurrentWaveInfo
		{
			[Token(Token = "0x6001325")]
			[Address(RVA = "0xB8DB28", Offset = "0xB8DB28", VA = "0xB8DB28")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000100")]
		public static List<Transform> GetAllPrefabPools
		{
			[Token(Token = "0x6001326")]
			[Address(RVA = "0xB90D40", Offset = "0xB90D40", VA = "0xB90D40")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000101")]
		public static List<Transform> GetAllSpawners
		{
			[Token(Token = "0x6001327")]
			[Address(RVA = "0xB8ACE4", Offset = "0xB8ACE4", VA = "0xB8ACE4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000102")]
		public static List<WaveSyncroPrefabSpawner> GetAllSpawnerScripts
		{
			[Token(Token = "0x6001328")]
			[Address(RVA = "0xB90EE0", Offset = "0xB90EE0", VA = "0xB90EE0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000103")]
		public static List<Transform> GetAllWorldVariables
		{
			[Token(Token = "0x6001329")]
			[Address(RVA = "0xB910F4", Offset = "0xB910F4", VA = "0xB910F4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000104")]
		public static bool IsGameOver
		{
			[Token(Token = "0x600132A")]
			[Address(RVA = "0xB9139C", Offset = "0xB9139C", VA = "0xB9139C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600132B")]
			[Address(RVA = "0xB7F990", Offset = "0xB7F990", VA = "0xB7F990")]
			set
			{
			}
		}

		[Token(Token = "0x17000105")]
		public static bool HasNextWave
		{
			[Token(Token = "0x600132C")]
			[Address(RVA = "0xB91414", Offset = "0xB91414", VA = "0xB91414")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000106")]
		public static bool HasPlayerWon
		{
			[Token(Token = "0x600132D")]
			[Address(RVA = "0xB91518", Offset = "0xB91518", VA = "0xB91518")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600132E")]
			[Address(RVA = "0xB8E388", Offset = "0xB8E388", VA = "0xB8E388")]
			set
			{
			}
		}

		[Token(Token = "0x17000107")]
		public static bool IsLoggingOn
		{
			[Token(Token = "0x600132F")]
			[Address(RVA = "0xB8E288", Offset = "0xB8E288", VA = "0xB8E288")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000108")]
		public static int LastLevel
		{
			[Token(Token = "0x6001330")]
			[Address(RVA = "0xB91590", Offset = "0xB91590", VA = "0xB91590")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000109")]
		public static LevelSettingsListener Listener
		{
			[Token(Token = "0x6001331")]
			[Address(RVA = "0xB90588", Offset = "0xB90588", VA = "0xB90588")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010A")]
		public static LevelWave PreviousWaveInfo
		{
			[Token(Token = "0x6001332")]
			[Address(RVA = "0xB9162C", Offset = "0xB9162C", VA = "0xB9162C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010B")]
		public static List<WaveSyncroPrefabSpawner> SyncroSpawners
		{
			[Token(Token = "0x6001333")]
			[Address(RVA = "0xB916A4", Offset = "0xB916A4", VA = "0xB916A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010C")]
		public static WaveSyncroPrefabSpawner RandomSyncroSpawner
		{
			[Token(Token = "0x6001334")]
			[Address(RVA = "0xB91728", Offset = "0xB91728", VA = "0xB91728")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010D")]
		public static int TimeRemainingInCurrentWave
		{
			[Token(Token = "0x6001335")]
			[Address(RVA = "0xB917F4", Offset = "0xB917F4", VA = "0xB917F4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001336")]
			[Address(RVA = "0xB8DC54", Offset = "0xB8DC54", VA = "0xB8DC54")]
			set
			{
			}
		}

		[Token(Token = "0x1700010E")]
		public static List<LevelWave> WaveLengths
		{
			[Token(Token = "0x6001337")]
			[Address(RVA = "0xB90C04", Offset = "0xB90C04", VA = "0xB90C04")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010F")]
		public static bool WavesArePaused
		{
			[Token(Token = "0x6001338")]
			[Address(RVA = "0xB918B0", Offset = "0xB918B0", VA = "0xB918B0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000110")]
		public static int EliminationSpawnersRemaining
		{
			[Token(Token = "0x6001339")]
			[Address(RVA = "0xB91928", Offset = "0xB91928", VA = "0xB91928")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000111")]
		private static Transform GetPoolsHolder
		{
			[Token(Token = "0x600133A")]
			[Address(RVA = "0xB8F928", Offset = "0xB8F928", VA = "0xB8F928")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000112")]
		private static Transform GetWorldVariablesHolder
		{
			[Token(Token = "0x600133B")]
			[Address(RVA = "0xB91294", Offset = "0xB91294", VA = "0xB91294")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000113")]
		public static int WaveRemainingItemCount
		{
			[Token(Token = "0x600133C")]
			[Address(RVA = "0xB90708", Offset = "0xB90708", VA = "0xB90708")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000114")]
		public static Transform WorldVariablePanel
		{
			[Token(Token = "0x600134B")]
			[Address(RVA = "0xB9492C", Offset = "0xB9492C", VA = "0xB9492C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000115")]
		public static Transform PrefabPoolsPanel
		{
			[Token(Token = "0x600134C")]
			[Address(RVA = "0xB949E8", Offset = "0xB949E8", VA = "0xB949E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000116")]
		public static Transform PoolBossPanel
		{
			[Token(Token = "0x600134D")]
			[Address(RVA = "0xB94AA4", Offset = "0xB94AA4", VA = "0xB94AA4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000117")]
		public List<string> CustomEventNames
		{
			[Token(Token = "0x600134E")]
			[Address(RVA = "0xB94B60", Offset = "0xB94B60", VA = "0xB94B60")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60012F8")]
		[Address(RVA = "0xB89DA4", Offset = "0xB89DA4", VA = "0xB89DA4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60012F9")]
		[Address(RVA = "0xB8AED0", Offset = "0xB8AED0", VA = "0xB8AED0")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x60012FA")]
		[Address(RVA = "0xB8AFA8", Offset = "0xB8AFA8", VA = "0xB8AFA8")]
		private void OnApplicationPause(bool paused)
		{
		}

		[Token(Token = "0x60012FB")]
		[Address(RVA = "0xB8AFB8", Offset = "0xB8AFB8", VA = "0xB8AFB8")]
		private static void LevelWasLoaded(Scene scene, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x60012FC")]
		[Address(RVA = "0xB8AFC0", Offset = "0xB8AFC0", VA = "0xB8AFC0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60012FD")]
		[Address(RVA = "0xB8AFC8", Offset = "0xB8AFC8", VA = "0xB8AFC8")]
		private void Start()
		{
		}

		[Token(Token = "0x60012FE")]
		[Address(RVA = "0xB8B090", Offset = "0xB8B090", VA = "0xB8B090")]
		private bool CheckForValidVariables()
		{
			return default(bool);
		}

		[Token(Token = "0x60012FF")]
		[Address(RVA = "0xB8BD88", Offset = "0xB8BD88", VA = "0xB8BD88")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x398AAC", Offset = "0x398AAC")]
		private IEnumerator CoUpdate()
		{
			return null;
		}

		[Token(Token = "0x6001300")]
		[Address(RVA = "0xB8BE08", Offset = "0xB8BE08", VA = "0xB8BE08")]
		private void CheckWaveCompletionVars(LevelWave wave, int i, int w)
		{
		}

		[Token(Token = "0x6001301")]
		[Address(RVA = "0xB8C77C", Offset = "0xB8C77C", VA = "0xB8C77C")]
		private void EndCurrentWaveNormally()
		{
		}

		[Token(Token = "0x6001302")]
		[Address(RVA = "0xB8CED4", Offset = "0xB8CED4", VA = "0xB8CED4")]
		private static bool SkipWaveOrNot(LevelWave waveInfo, bool valueAbove)
		{
			return default(bool);
		}

		[Token(Token = "0x6001303")]
		[Address(RVA = "0xB8D064", Offset = "0xB8D064", VA = "0xB8D064")]
		private void SpawnNewWave(LevelWave waveInfo, bool isRestartWave)
		{
		}

		[Token(Token = "0x6001304")]
		[Address(RVA = "0xB8D99C", Offset = "0xB8D99C", VA = "0xB8D99C")]
		private void AddTriggeredSpawnerAwaitersIfAny(LevelWave wave)
		{
		}

		[Token(Token = "0x6001305")]
		[Address(RVA = "0xB8DDB8", Offset = "0xB8DDB8", VA = "0xB8DDB8")]
		private bool SpawnOrSkipNewWave(LevelWave waveInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x6001306")]
		[Address(RVA = "0xB8E1A4", Offset = "0xB8E1A4", VA = "0xB8E1A4")]
		private static void Win()
		{
		}

		[Token(Token = "0x6001309")]
		[Address(RVA = "0xB8E53C", Offset = "0xB8E53C", VA = "0xB8E53C")]
		public static void AddWaveSpawnedItem(Transform spawnedTrans)
		{
		}

		[Token(Token = "0x600130A")]
		[Address(RVA = "0xB8E644", Offset = "0xB8E644", VA = "0xB8E644")]
		public static void EliminationSpawnerCompleted(int instanceId, Transform lastPrefabKilled)
		{
		}

		[Token(Token = "0x600130B")]
		[Address(RVA = "0xB8F1A8", Offset = "0xB8F1A8", VA = "0xB8F1A8")]
		public static void TriggeredSpawnerWaveEliminated(TriggeredSpawner.EventType eType, TriggeredSpawnerV2 spawner, TriggeredWaveSpecifics wave)
		{
		}

		[Token(Token = "0x600130C")]
		[Address(RVA = "0xB8F398", Offset = "0xB8F398", VA = "0xB8F398")]
		public static void ContinueGame()
		{
		}

		[Token(Token = "0x600130D")]
		[Address(RVA = "0xB8F4D4", Offset = "0xB8F4D4", VA = "0xB8F4D4")]
		public static void RestartGame()
		{
		}

		[Token(Token = "0x600130E")]
		[Address(RVA = "0xB8F8AC", Offset = "0xB8F8AC", VA = "0xB8F8AC")]
		public static void EndWave()
		{
		}

		[Token(Token = "0x600130F")]
		[Address(RVA = "0xB8F6C8", Offset = "0xB8F6C8", VA = "0xB8F6C8")]
		public static void GotoWave(int levelNum, int waveNum)
		{
		}

		[Token(Token = "0x6001310")]
		[Address(RVA = "0xB87D0C", Offset = "0xB87D0C", VA = "0xB87D0C")]
		public static WavePrefabPool GetFirstMatchingPrefabPool(string poolName)
		{
			return null;
		}

		[Token(Token = "0x6001311")]
		[Address(RVA = "0xB8FA30", Offset = "0xB8FA30", VA = "0xB8FA30")]
		public static List<string> GetSortedPrefabPoolNames()
		{
			return null;
		}

		[Token(Token = "0x6001312")]
		[Address(RVA = "0xB7F3E0", Offset = "0xB7F3E0", VA = "0xB7F3E0")]
		public static void LogIfNew(string message, bool logAsWarning = false)
		{
		}

		[Token(Token = "0x6001313")]
		[Address(RVA = "0xB8CDBC", Offset = "0xB8CDBC", VA = "0xB8CDBC")]
		public static void PauseWave()
		{
		}

		[Token(Token = "0x6001314")]
		[Address(RVA = "0xB8FC20", Offset = "0xB8FC20", VA = "0xB8FC20")]
		public static void RestartCurrentWave()
		{
		}

		[Token(Token = "0x6001315")]
		[Address(RVA = "0xB90228", Offset = "0xB90228", VA = "0xB90228")]
		public static void RemoveWaveSpawnedItem(Transform spawnedTrans)
		{
		}

		[Token(Token = "0x6001316")]
		[Address(RVA = "0xB85F5C", Offset = "0xB85F5C", VA = "0xB85F5C")]
		public static void TrackTimedRespawn(float delay, Transform prefabTrans, Vector3 pos, bool hasRespawnCustomEvents)
		{
		}

		[Token(Token = "0x6001317")]
		[Address(RVA = "0xB90104", Offset = "0xB90104", VA = "0xB90104")]
		public static void UnpauseWave()
		{
		}

		[Token(Token = "0x6001318")]
		[Address(RVA = "0xB90388", Offset = "0xB90388", VA = "0xB90388")]
		public static void WarpToLevel(int levelNumber, int waveNumber)
		{
		}

		[Token(Token = "0x6001319")]
		[Address(RVA = "0xB90478", Offset = "0xB90478", VA = "0xB90478")]
		private static void PlayMusicIfSet(LevelWaveMusicSettings musicSpec)
		{
		}

		[Token(Token = "0x600131A")]
		[Address(RVA = "0xB8D890", Offset = "0xB8D890", VA = "0xB8D890")]
		private static void WaveRemainingItemsChanged()
		{
		}

		[Token(Token = "0x600131B")]
		[Address(RVA = "0xB8E7E4", Offset = "0xB8E7E4", VA = "0xB8E7E4")]
		private static void SpawnBonusPrefabIfAny(Vector3 spawnPosition)
		{
		}

		[Token(Token = "0x600133D")]
		[Address(RVA = "0xB919C4", Offset = "0xB919C4", VA = "0xB919C4")]
		public static void AddCustomEventReceiver(ICgkEventReceiver receiver, Transform receiverTrans)
		{
		}

		[Token(Token = "0x600133E")]
		[Address(RVA = "0xB91E00", Offset = "0xB91E00", VA = "0xB91E00")]
		public static void RemoveCustomEventReceiver(ICgkEventReceiver receiver)
		{
		}

		[Token(Token = "0x600133F")]
		[Address(RVA = "0xB923CC", Offset = "0xB923CC", VA = "0xB923CC")]
		public static List<Transform> ReceiversForEvent(string customEventName)
		{
			return null;
		}

		[Token(Token = "0x6001340")]
		[Address(RVA = "0xB7E8A8", Offset = "0xB7E8A8", VA = "0xB7E8A8")]
		public static void FireCustomEventIfValid(string anEvent, Transform eventOrigin)
		{
		}

		[Token(Token = "0x6001341")]
		[Address(RVA = "0xB93C94", Offset = "0xB93C94", VA = "0xB93C94")]
		public static void FireCustomEventWithParam(string customEventName, Transform originObject, object eventParam, bool logDupe = true)
		{
		}

		[Token(Token = "0x6001342")]
		[Address(RVA = "0xB926E8", Offset = "0xB926E8", VA = "0xB926E8")]
		public static void FireCustomEvent(string customEventName, Transform originObject, bool logDupe = true)
		{
		}

		[Token(Token = "0x6001343")]
		[Address(RVA = "0xB940CC", Offset = "0xB940CC", VA = "0xB940CC")]
		private static CgkCustomEvent GetCustomEventByName(string customEventName)
		{
			return null;
		}

		[Token(Token = "0x6001344")]
		[Address(RVA = "0xB93FBC", Offset = "0xB93FBC", VA = "0xB93FBC")]
		public static bool CustomEventExists(string customEventName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001345")]
		[Address(RVA = "0xB94214", Offset = "0xB94214", VA = "0xB94214")]
		private static List<ICgkEventReceiver> GetChildReceivers(Transform origin, string eventName, bool includeSelf)
		{
			return null;
		}

		[Token(Token = "0x6001346")]
		[Address(RVA = "0xB94380", Offset = "0xB94380", VA = "0xB94380")]
		private static List<ICgkEventReceiver> GetParentReceivers(Transform origin, string eventName, bool includeSelf)
		{
			return null;
		}

		[Token(Token = "0x6001347")]
		[Address(RVA = "0xB94508", Offset = "0xB94508", VA = "0xB94508")]
		private static List<ICgkEventReceiver> FilterOutSelf(List<ICgkEventReceiver> sourceList, Transform origin)
		{
			return null;
		}

		[Token(Token = "0x6001348")]
		[Address(RVA = "0xB93F00", Offset = "0xB93F00", VA = "0xB93F00")]
		private static int GetCustomEventHash(string customEventName, Vector3 eventOrigin)
		{
			return default(int);
		}

		[Token(Token = "0x6001349")]
		public static T GetCustomEventParam<T>(string customEventName, Vector3 eventOrigin)
		{
			return (T)null;
		}

		[Token(Token = "0x600134A")]
		[Address(RVA = "0xB947F8", Offset = "0xB947F8", VA = "0xB947F8")]
		public static Transform GetCustomEventParamSender(string customEventName, Vector3 eventOrigin)
		{
			return null;
		}

		[Token(Token = "0x600134F")]
		[Address(RVA = "0xB94D10", Offset = "0xB94D10", VA = "0xB94D10")]
		public LevelSettings()
		{
		}
	}
	[Token(Token = "0x20002EE")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x396420", Offset = "0x396420")]
	public class LevelSettingsListener : MonoBehaviour
	{
		[Token(Token = "0x4001088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string sourceTransName;

		[Token(Token = "0x6001351")]
		[Address(RVA = "0x9DFDF8", Offset = "0x9DFDF8", VA = "0x9DFDF8")]
		private void Reset()
		{
		}

		[Token(Token = "0x6001352")]
		[Address(RVA = "0x9DFEBC", Offset = "0x9DFEBC", VA = "0x9DFEBC", Slot = "4")]
		public virtual void WaveItemsRemainingChanged(int waveItemsRemaining)
		{
		}

		[Token(Token = "0x6001353")]
		[Address(RVA = "0x9DFEC0", Offset = "0x9DFEC0", VA = "0x9DFEC0", Slot = "5")]
		public virtual void WaveTimeRemainingChanged(int secondsRemaining)
		{
		}

		[Token(Token = "0x6001354")]
		[Address(RVA = "0x9DFEC4", Offset = "0x9DFEC4", VA = "0x9DFEC4", Slot = "6")]
		public virtual void Win()
		{
		}

		[Token(Token = "0x6001355")]
		[Address(RVA = "0x9DFEC8", Offset = "0x9DFEC8", VA = "0x9DFEC8", Slot = "7")]
		public virtual void Lose()
		{
		}

		[Token(Token = "0x6001356")]
		[Address(RVA = "0x9DFECC", Offset = "0x9DFECC", VA = "0x9DFECC", Slot = "8")]
		public virtual void GameOver(bool hasWon)
		{
		}

		[Token(Token = "0x6001357")]
		[Address(RVA = "0x9DFED0", Offset = "0x9DFED0", VA = "0x9DFED0", Slot = "9")]
		public virtual void LevelStarted(int levelNum)
		{
		}

		[Token(Token = "0x6001358")]
		[Address(RVA = "0x9DFED4", Offset = "0x9DFED4", VA = "0x9DFED4", Slot = "10")]
		public virtual void LevelEnded(int levelNum)
		{
		}

		[Token(Token = "0x6001359")]
		[Address(RVA = "0x9DFED8", Offset = "0x9DFED8", VA = "0x9DFED8", Slot = "11")]
		public virtual void WaveStarted(LevelWave levelWaveInfo)
		{
		}

		[Token(Token = "0x600135A")]
		[Address(RVA = "0x9DFEDC", Offset = "0x9DFEDC", VA = "0x9DFEDC", Slot = "12")]
		public virtual void WaveEnded(LevelWave levelWaveInfo)
		{
		}

		[Token(Token = "0x600135B")]
		[Address(RVA = "0x9DFEE0", Offset = "0x9DFEE0", VA = "0x9DFEE0", Slot = "13")]
		public virtual void WaveRestarted(LevelWave levelWaveInf)
		{
		}

		[Token(Token = "0x600135C")]
		[Address(RVA = "0x9DFEE4", Offset = "0x9DFEE4", VA = "0x9DFEE4", Slot = "14")]
		public virtual void WaveCompleteBonusesStart(List<WorldVariableModifier> bonusModifiers)
		{
		}

		[Token(Token = "0x600135D")]
		[Address(RVA = "0x9DFEE8", Offset = "0x9DFEE8", VA = "0x9DFEE8", Slot = "15")]
		public virtual void WaveEliminationBonusesStart(List<WorldVariableModifier> elimModifiers)
		{
		}

		[Token(Token = "0x600135E")]
		[Address(RVA = "0x9DFEEC", Offset = "0x9DFEEC", VA = "0x9DFEEC", Slot = "16")]
		public virtual void WaveEndedEarly(LevelWave levelWaveInfo)
		{
		}

		[Token(Token = "0x600135F")]
		[Address(RVA = "0x9DFEF0", Offset = "0x9DFEF0", VA = "0x9DFEF0", Slot = "17")]
		public virtual void WaveSkipped(LevelWave levelWaveInfo)
		{
		}

		[Token(Token = "0x6001360")]
		[Address(RVA = "0x9DFEF4", Offset = "0x9DFEF4", VA = "0x9DFEF4")]
		public LevelSettingsListener()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002EF")]
	public class LevelSpecifics
	{
		[Token(Token = "0x4001089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string levelName;

		[Token(Token = "0x400108A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public LevelSettings.WaveOrder waveOrder;

		[Token(Token = "0x400108B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<LevelWave> WaveSettings;

		[Token(Token = "0x400108C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool isExpanded;

		[Token(Token = "0x6001361")]
		[Address(RVA = "0x9DFEFC", Offset = "0x9DFEFC", VA = "0x9DFEFC")]
		public LevelSpecifics()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002F0")]
	public class LevelWave
	{
		[Token(Token = "0x400108D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public LevelSettings.WaveType waveType;

		[Token(Token = "0x400108E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public LevelSettings.SkipWaveMode skipWaveType;

		[Token(Token = "0x400108F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public WorldVariableCollection skipWavePassCriteria;

		[Token(Token = "0x4001090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool pauseGlobalWavesWhenCompleted;

		[Token(Token = "0x4001091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string waveName;

		[Token(Token = "0x4001092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public string waveClass;

		[Token(Token = "0x4001093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string waveDescription;

		[Token(Token = "0x4001094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public LevelWaveMusicSettings musicSettings;

		[Token(Token = "0x4001095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int WaveDuration;

		[Token(Token = "0x4001096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public KillerInt waveDurationFlex;

		[Token(Token = "0x4001097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool endEarlyIfAllDestroyed;

		[Token(Token = "0x4001098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool waveBeatBonusesEnabled;

		[Token(Token = "0x4001099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool useCompletionEvents;

		[Token(Token = "0x400109A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
		public bool useSpawnBonusPrefab;

		[Token(Token = "0x400109B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public WaveSpecifics.SpawnOrigin bonusPrefabSource;

		[Token(Token = "0x400109C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int bonusPrefabPoolIndex;

		[Token(Token = "0x400109D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public string bonusPrefabPoolName;

		[Token(Token = "0x400109E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform bonusPrefabSpecific;

		[Token(Token = "0x400109F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public KillerInt bonusPrefabSpawnPercent;

		[Token(Token = "0x40010A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public KillerInt bonusPrefabQty;

		[Token(Token = "0x40010A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public string bonusPrefabCategoryName;

		[Token(Token = "0x40010A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public LevelSettings.WaveSpawnerUseMode spawnerUseMode;

		[Token(Token = "0x40010A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public int spawnersToUseMin;

		[Token(Token = "0x40010A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int spawnersToUseMax;

		[Token(Token = "0x40010A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public bool isDummyWave;

		[Token(Token = "0x40010A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
		public bool useTriggeredSpawners;

		[Token(Token = "0x40010A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<TrigSpawnerWaveWaiter> trigSpawnerWavesToAwait;

		[Token(Token = "0x40010A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public List<CGKCustomEventToFire> completionCustomEvents;

		[Token(Token = "0x40010A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public WorldVariableCollection waveDefeatVariableModifiers;

		[Token(Token = "0x40010AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public bool isExpanded;

		[Token(Token = "0x40010AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public int sequencedWaveNumber;

		[Token(Token = "0x40010AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public int randomWaveNumber;

		[Token(Token = "0x6001362")]
		[Address(RVA = "0x9DFF9C", Offset = "0x9DFF9C", VA = "0x9DFF9C")]
		public LevelWave()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002F1")]
	public class LevelWaveMusicSettings
	{
		[Token(Token = "0x40010AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public LevelSettings.WaveMusicMode WaveMusicMode;

		[Token(Token = "0x40010AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public AudioClip WaveMusic;

		[Token(Token = "0x40010AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float WaveMusicVolume;

		[Token(Token = "0x40010B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float FadeTime;

		[Token(Token = "0x6001363")]
		[Address(RVA = "0x9E01A0", Offset = "0x9E01A0", VA = "0x9E01A0")]
		public LevelWaveMusicSettings()
		{
		}
	}
	[Token(Token = "0x20002F2")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x396454", Offset = "0x396454")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x396454", Offset = "0x396454")]
	public class WaveMusicChanger : MonoBehaviour
	{
		[Token(Token = "0x2000395")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3969F8", Offset = "0x3969F8")]
		private sealed class <CoUpdate>d__12 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001448")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int <>1__state;

			[Token(Token = "0x4001449")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private object <>2__current;

			[Token(Token = "0x17000173")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60016F0")]
				[Address(RVA = "0xE98398", Offset = "0xE98398", VA = "0xE98398", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000174")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60016F2")]
				[Address(RVA = "0xE98418", Offset = "0xE98418", VA = "0xE98418", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60016ED")]
			[Address(RVA = "0xE978D0", Offset = "0xE978D0", VA = "0xE978D0")]
			[DebuggerHidden]
			public <CoUpdate>d__12(int <>1__state)
			{
			}

			[Token(Token = "0x60016EE")]
			[Address(RVA = "0xE980D0", Offset = "0xE980D0", VA = "0xE980D0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60016EF")]
			[Address(RVA = "0xE980D4", Offset = "0xE980D4", VA = "0xE980D4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60016F1")]
			[Address(RVA = "0xE983A0", Offset = "0xE983A0", VA = "0xE983A0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40010B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public WaveMusicChangerListener listener;

		[Token(Token = "0x40010B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static WaveMusicChangerListener _statListener;

		[Token(Token = "0x40010B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static AudioSource _statAudio;

		[Token(Token = "0x40010B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static bool _isValid;

		[Token(Token = "0x40010B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		private static bool _isFading;

		[Token(Token = "0x40010B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static float _fadeStartTime;

		[Token(Token = "0x40010B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static float _fadeStartVolume;

		[Token(Token = "0x40010B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static float _fadeTotalTime;

		[Token(Token = "0x40010B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static float _lastVolume;

		[Token(Token = "0x40010BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private static readonly YieldInstruction LoopDelay;

		[Token(Token = "0x6001364")]
		[Address(RVA = "0xE9767C", Offset = "0xE9767C", VA = "0xE9767C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001365")]
		[Address(RVA = "0xE977AC", Offset = "0xE977AC", VA = "0xE977AC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001366")]
		[Address(RVA = "0xE97864", Offset = "0xE97864", VA = "0xE97864")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x398B3C", Offset = "0x398B3C")]
		private static IEnumerator CoUpdate()
		{
			return null;
		}

		[Token(Token = "0x6001367")]
		[Address(RVA = "0xE978F0", Offset = "0xE978F0", VA = "0xE978F0")]
		public static void WaveUp(LevelWaveMusicSettings newWave)
		{
		}

		[Token(Token = "0x6001368")]
		[Address(RVA = "0xE97968", Offset = "0xE97968", VA = "0xE97968")]
		private static void PlayMusic(LevelWaveMusicSettings musicSettings)
		{
		}

		[Token(Token = "0x6001369")]
		[Address(RVA = "0xE97CF0", Offset = "0xE97CF0", VA = "0xE97CF0")]
		public static void PlayGameOverMusic(LevelWaveMusicSettings musicSettings)
		{
		}

		[Token(Token = "0x600136A")]
		[Address(RVA = "0xE97D68", Offset = "0xE97D68", VA = "0xE97D68")]
		public static void MuteMusic()
		{
		}

		[Token(Token = "0x600136B")]
		[Address(RVA = "0xE97ED8", Offset = "0xE97ED8", VA = "0xE97ED8")]
		public static void UnmuteMusic()
		{
		}

		[Token(Token = "0x600136C")]
		[Address(RVA = "0xE98048", Offset = "0xE98048", VA = "0xE98048")]
		public WaveMusicChanger()
		{
		}
	}
	[Token(Token = "0x20002F3")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x3964EC", Offset = "0x3964EC")]
	public class WaveMusicChangerListener : MonoBehaviour
	{
		[Token(Token = "0x600136E")]
		[Address(RVA = "0xE98420", Offset = "0xE98420", VA = "0xE98420")]
		private void Reset()
		{
		}

		[Token(Token = "0x600136F")]
		[Address(RVA = "0xE984D4", Offset = "0xE984D4", VA = "0xE984D4", Slot = "4")]
		public virtual void MusicChanging(LevelWaveMusicSettings musicSettings)
		{
		}

		[Token(Token = "0x6001370")]
		[Address(RVA = "0xE984D8", Offset = "0xE984D8", VA = "0xE984D8")]
		public WaveMusicChangerListener()
		{
		}
	}
	[Token(Token = "0x20002F4")]
	public class PoolBoss : MonoBehaviour
	{
		[Token(Token = "0x2000396")]
		public class PoolItemInstanceList
		{
			[Token(Token = "0x400144A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public bool LogMessages;

			[Token(Token = "0x400144B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
			public bool AllowInstantiateMore;

			[Token(Token = "0x400144C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public int? ItemHardLimit;

			[Token(Token = "0x400144D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public bool EnableNavMeshAgent;

			[Token(Token = "0x400144E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform SourceTrans;

			[Token(Token = "0x400144F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public List<Transform> SpawnedClones;

			[Token(Token = "0x4001450")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public List<Transform> DespawnedClones;

			[Token(Token = "0x4001451")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public bool AllowRecycle;

			[Token(Token = "0x4001452")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string CategoryName;

			[Token(Token = "0x4001453")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public int Peak;

			[Token(Token = "0x4001454")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float PeakTime;

			[Token(Token = "0x60016F3")]
			[Address(RVA = "0x9E42A4", Offset = "0x9E42A4", VA = "0x9E42A4")]
			public PoolItemInstanceList(List<Transform> clones)
			{
			}
		}

		[Token(Token = "0x2000397")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396A08", Offset = "0x396A08")]
		private sealed class <>c__DisplayClass41_0
		{
			[Token(Token = "0x4001455")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public PoolBossItem item;

			[Token(Token = "0x60016F4")]
			[Address(RVA = "0x9E4588", Offset = "0x9E4588", VA = "0x9E4588")]
			public <>c__DisplayClass41_0()
			{
			}

			[Token(Token = "0x60016F5")]
			[Address(RVA = "0x9E97B8", Offset = "0x9E97B8", VA = "0x9E97B8")]
			internal bool <CreatePoolItemClones>b__0(PoolBossCategory x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000398")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396A18", Offset = "0x396A18")]
		private sealed class <>c__DisplayClass64_0
		{
			[Token(Token = "0x4001456")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public PoolItemInstanceList item;

			[Token(Token = "0x60016F6")]
			[Address(RVA = "0x9E7E04", Offset = "0x9E7E04", VA = "0x9E7E04")]
			public <>c__DisplayClass64_0()
			{
			}

			[Token(Token = "0x60016F7")]
			[Address(RVA = "0x9E97FC", Offset = "0x9E97FC", VA = "0x9E97FC")]
			internal bool <DestroyPoolItem>b__0(PoolBossItem x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000399")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396A28", Offset = "0x396A28")]
		private sealed class <>c__DisplayClass65_0
		{
			[Token(Token = "0x4001457")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public PoolItemInstanceList item;

			[Token(Token = "0x60016F8")]
			[Address(RVA = "0x9E85A0", Offset = "0x9E85A0", VA = "0x9E85A0")]
			public <>c__DisplayClass65_0()
			{
			}

			[Token(Token = "0x60016F9")]
			[Address(RVA = "0x9E98FC", Offset = "0x9E98FC", VA = "0x9E98FC")]
			internal bool <DestroyCategoryPoolItems>b__0(PoolBossItem x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40010BB")]
		public const string NoCategory = "[Uncategorized]";

		[Token(Token = "0x40010BC")]
		private const string SpawnedMessageName = "OnSpawned";

		[Token(Token = "0x40010BD")]
		private const string DespawnedMessageName = "OnDespawned";

		[Token(Token = "0x40010BE")]
		private const string NotInitError = "Pool Boss has not initialized (does so in Awake event and may take additional frames if you configured it that way) and is not ready to be used yet. Check that PoolBoss.IsReady returns true before calling other methods.";

		[Token(Token = "0x40010BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public List<PoolBossItem> poolItems;

		[Token(Token = "0x40010C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool logMessages;

		[Token(Token = "0x40010C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool useTextFilter;

		[Token(Token = "0x40010C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public bool showLegend;

		[Token(Token = "0x40010C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public string textFilter;

		[Token(Token = "0x40010C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool autoAddMissingPoolItems;

		[Token(Token = "0x40010C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool allowDespawningInactive;

		[Token(Token = "0x40010C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public string newCategoryName;

		[Token(Token = "0x40010C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string addToCategoryName;

		[Token(Token = "0x40010C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int framesForInit;

		[Token(Token = "0x40010C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PoolBossListener listener;

		[Token(Token = "0x40010CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int _changes;

		[Token(Token = "0x40010CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<PoolBossCategory> _categories;

		[Token(Token = "0x40010CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Dictionary<string, PoolItemInstanceList> PoolItemsByName;

		[Token(Token = "0x40010CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static Transform _trans;

		[Token(Token = "0x40010CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly List<PoolableInfo> _deadList;

		[Token(Token = "0x40010CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static readonly Dictionary<PoolableInfo, object> _potentialInSceneObjects;

		[Token(Token = "0x40010D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static PoolBoss _instance;

		[Token(Token = "0x40010D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static int _initFrameStart;

		[Token(Token = "0x40010D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static float _itemsToInitPerFrame;

		[Token(Token = "0x40010D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private static int _lastFramInitContinued;

		[Token(Token = "0x40010D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int _itemsInited;

		[Token(Token = "0x40010D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static bool _isReady;

		[Token(Token = "0x40010D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool IsPhotonNetworked;

		[Token(Token = "0x17000118")]
		public static PoolBoss Instance
		{
			[Token(Token = "0x6001371")]
			[Address(RVA = "0x9E1CA8", Offset = "0x9E1CA8", VA = "0x9E1CA8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000119")]
		public static int PrefabCount
		{
			[Token(Token = "0x600139F")]
			[Address(RVA = "0x9E9274", Offset = "0x9E9274", VA = "0x9E9274")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700011A")]
		public static bool IsServer
		{
			[Token(Token = "0x60013A5")]
			[Address(RVA = "0x9E9458", Offset = "0x9E9458", VA = "0x9E9458")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700011B")]
		public static bool IsReady
		{
			[Token(Token = "0x60013A6")]
			[Address(RVA = "0x9E9460", Offset = "0x9E9460", VA = "0x9E9460")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700011C")]
		public static Transform Trans
		{
			[Token(Token = "0x60013A7")]
			[Address(RVA = "0x9E4034", Offset = "0x9E4034", VA = "0x9E4034")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001372")]
		[Address(RVA = "0x9E1E84", Offset = "0x9E1E84", VA = "0x9E1E84")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001373")]
		[Address(RVA = "0x9E2088", Offset = "0x9E2088", VA = "0x9E2088")]
		private void Update()
		{
		}

		[Token(Token = "0x6001374")]
		[Address(RVA = "0x9E212C", Offset = "0x9E212C", VA = "0x9E212C")]
		private void RegisterInSceneObjects()
		{
		}

		[Token(Token = "0x6001375")]
		[Address(RVA = "0x9E1F48", Offset = "0x9E1F48", VA = "0x9E1F48")]
		public static void Initialize()
		{
		}

		[Token(Token = "0x6001376")]
		[Address(RVA = "0x9E26F8", Offset = "0x9E26F8", VA = "0x9E26F8")]
		private void ContinueInit()
		{
		}

		[Token(Token = "0x6001377")]
		[Address(RVA = "0x9E3B28", Offset = "0x9E3B28", VA = "0x9E3B28")]
		public static void RegisterPotentialInScenePoolable(PoolableInfo poolable)
		{
		}

		[Token(Token = "0x6001378")]
		[Address(RVA = "0x9E3C30", Offset = "0x9E3C30", VA = "0x9E3C30")]
		public static void UnregisterNonStartInScenePoolable(PoolableInfo poolable)
		{
		}

		[Token(Token = "0x6001379")]
		[Address(RVA = "0x9E3CD4", Offset = "0x9E3CD4", VA = "0x9E3CD4")]
		private static Transform InstantiateForPool(Transform prefabTrans, int cloneNumber)
		{
			return null;
		}

		[Token(Token = "0x600137A")]
		[Address(RVA = "0x9E2ED0", Offset = "0x9E2ED0", VA = "0x9E2ED0")]
		private static string CreateMissingPoolItem(Transform missingTrans, string itemName, bool isSpawn, bool enableNavMeshAgentOnSpawn = true)
		{
			return null;
		}

		[Token(Token = "0x600137B")]
		[Address(RVA = "0x9E43BC", Offset = "0x9E43BC", VA = "0x9E43BC")]
		public static void CreateNewPoolItem(Transform itemTrans, int preloadInstances, bool canInstantiateMore, int hardLimit, bool logMsgs, string catName)
		{
		}

		[Token(Token = "0x600137C")]
		[Address(RVA = "0x9E3428", Offset = "0x9E3428", VA = "0x9E3428")]
		private void CreatePoolItemClones(PoolBossItem item, bool isDuringAwake)
		{
		}

		[Token(Token = "0x600137D")]
		[Address(RVA = "0x9E4754", Offset = "0x9E4754", VA = "0x9E4754")]
		public static Transform SpawnOutsidePool(string itemName, Vector3 position, Quaternion rotation)
		{
			return null;
		}

		[Token(Token = "0x600137E")]
		[Address(RVA = "0x9E1A80", Offset = "0x9E1A80", VA = "0x9E1A80")]
		public static Transform SpawnOutsidePool(Transform transToSpawn, Vector3 position, Quaternion rotation)
		{
			return null;
		}

		[Token(Token = "0x600137F")]
		[Address(RVA = "0x9E5804", Offset = "0x9E5804", VA = "0x9E5804")]
		public static Transform SpawnInPool(string itemName, Vector3 position, Quaternion rotation)
		{
			return null;
		}

		[Token(Token = "0x6001380")]
		[Address(RVA = "0x9E1B40", Offset = "0x9E1B40", VA = "0x9E1B40")]
		public static Transform SpawnInPool(Transform transToSpawn, Vector3 position, Quaternion rotation)
		{
			return null;
		}

		[Token(Token = "0x6001381")]
		[Address(RVA = "0x9E58C0", Offset = "0x9E58C0", VA = "0x9E58C0")]
		public static Transform SpawnWithFollow(Transform transToSpawn, Vector3 position, Quaternion rotation, Transform followTarget)
		{
			return null;
		}

		[Token(Token = "0x6001382")]
		[Address(RVA = "0x9E597C", Offset = "0x9E597C", VA = "0x9E597C")]
		public static Transform NetworkSpawn(string itemName, Vector3 position, Quaternion rotation)
		{
			return null;
		}

		[Token(Token = "0x6001383")]
		[Address(RVA = "0x9E5A04", Offset = "0x9E5A04", VA = "0x9E5A04")]
		public static void NetworkDespawn(Transform transToDespawn)
		{
		}

		[Token(Token = "0x6001384")]
		[Address(RVA = "0x9E5488", Offset = "0x9E5488", VA = "0x9E5488")]
		public static Transform Spawn(Transform transToSpawn, Vector3 position, Quaternion rotation, Transform parentTransform)
		{
			return null;
		}

		[Token(Token = "0x6001385")]
		[Address(RVA = "0x9E4814", Offset = "0x9E4814", VA = "0x9E4814")]
		public static Transform Spawn(string itemName, Vector3 position, Quaternion rotation, Transform parentTransform)
		{
			return null;
		}

		[Token(Token = "0x6001386")]
		[Address(RVA = "0x9E417C", Offset = "0x9E417C", VA = "0x9E417C")]
		private static void SetParent(Transform trns, Transform parentTrans)
		{
		}

		[Token(Token = "0x6001387")]
		[Address(RVA = "0x9E5B94", Offset = "0x9E5B94", VA = "0x9E5B94")]
		public static int CategoryItemsDespawned(string category)
		{
			return default(int);
		}

		[Token(Token = "0x6001388")]
		[Address(RVA = "0x9E5DB0", Offset = "0x9E5DB0", VA = "0x9E5DB0")]
		public static List<Transform> CategoryActiveItems(string category)
		{
			return null;
		}

		[Token(Token = "0x6001389")]
		[Address(RVA = "0x9E5FFC", Offset = "0x9E5FFC", VA = "0x9E5FFC")]
		public static int CategoryItemsSpawned(string category)
		{
			return default(int);
		}

		[Token(Token = "0x600138A")]
		[Address(RVA = "0x9E09F0", Offset = "0x9E09F0", VA = "0x9E09F0")]
		public static bool Despawn(Transform transToDespawn, bool keepParent = false)
		{
			return default(bool);
		}

		[Token(Token = "0x600138B")]
		[Address(RVA = "0x9E63EC", Offset = "0x9E63EC", VA = "0x9E63EC")]
		public static void DamageAllPrefabs(int damagePoints)
		{
		}

		[Token(Token = "0x600138C")]
		[Address(RVA = "0x9E6918", Offset = "0x9E6918", VA = "0x9E6918")]
		public static void DespawnAllPrefabs()
		{
		}

		[Token(Token = "0x600138D")]
		[Address(RVA = "0x9E6DB0", Offset = "0x9E6DB0", VA = "0x9E6DB0")]
		public static void KillAllPrefabs()
		{
		}

		[Token(Token = "0x600138E")]
		[Address(RVA = "0x9E72E0", Offset = "0x9E72E0", VA = "0x9E72E0")]
		public static void DespawnAllPrefabsInCategory(string category)
		{
		}

		[Token(Token = "0x600138F")]
		[Address(RVA = "0x9E74CC", Offset = "0x9E74CC", VA = "0x9E74CC")]
		public static void DamageAllPrefabsInCategory(string category, int damagePoints)
		{
		}

		[Token(Token = "0x6001390")]
		[Address(RVA = "0x9E76C0", Offset = "0x9E76C0", VA = "0x9E76C0")]
		public static void KillAllPrefabsInCategory(string category)
		{
		}

		[Token(Token = "0x6001391")]
		[Address(RVA = "0x9E65B4", Offset = "0x9E65B4", VA = "0x9E65B4")]
		public static void DamageAllOfPrefab(Transform transToDespawn, int damagePoints)
		{
		}

		[Token(Token = "0x6001392")]
		[Address(RVA = "0x9E6AD8", Offset = "0x9E6AD8", VA = "0x9E6AD8")]
		public static void DespawnAllOfPrefab(Transform transToDespawn)
		{
		}

		[Token(Token = "0x6001393")]
		[Address(RVA = "0x9E78AC", Offset = "0x9E78AC", VA = "0x9E78AC")]
		public static void DestroyPoolItem(Transform transDeadItem)
		{
		}

		[Token(Token = "0x6001394")]
		[Address(RVA = "0x9E7E0C", Offset = "0x9E7E0C", VA = "0x9E7E0C")]
		public static void DestroyCategoryPoolItems(string categoryName)
		{
		}

		[Token(Token = "0x6001395")]
		[Address(RVA = "0x9E6F70", Offset = "0x9E6F70", VA = "0x9E6F70")]
		public static void KillAllOfPrefab(Transform transToKill)
		{
		}

		[Token(Token = "0x6001396")]
		[Address(RVA = "0x9E85A8", Offset = "0x9E85A8", VA = "0x9E85A8")]
		public static Transform NextPoolItemToSpawn(Transform trans)
		{
			return null;
		}

		[Token(Token = "0x6001397")]
		[Address(RVA = "0x9E863C", Offset = "0x9E863C", VA = "0x9E863C")]
		public static Transform NextPoolItemToSpawn(string itemName)
		{
			return null;
		}

		[Token(Token = "0x6001398")]
		[Address(RVA = "0x9E88CC", Offset = "0x9E88CC", VA = "0x9E88CC")]
		public static PoolItemInstanceList PoolItemInfoByName(string poolItemName)
		{
			return null;
		}

		[Token(Token = "0x6001399")]
		[Address(RVA = "0x9E89EC", Offset = "0x9E89EC", VA = "0x9E89EC")]
		public static bool PrefabIsInPool(Transform trans)
		{
			return default(bool);
		}

		[Token(Token = "0x600139A")]
		[Address(RVA = "0x9E8B04", Offset = "0x9E8B04", VA = "0x9E8B04")]
		public static bool PrefabIsInPool(string transName)
		{
			return default(bool);
		}

		[Token(Token = "0x600139B")]
		[Address(RVA = "0x9E8CD4", Offset = "0x9E8CD4", VA = "0x9E8CD4")]
		public static int PrefabDespawnedCount(Transform transPrefab)
		{
			return default(int);
		}

		[Token(Token = "0x600139C")]
		[Address(RVA = "0x9E8F60", Offset = "0x9E8F60", VA = "0x9E8F60")]
		public static int PrefabSpawnedCount(Transform transPrefab)
		{
			return default(int);
		}

		[Token(Token = "0x600139D")]
		[Address(RVA = "0x9E91EC", Offset = "0x9E91EC", VA = "0x9E91EC")]
		public static bool AllOfPrefabAreDespawned(Transform transPrefab)
		{
			return default(bool);
		}

		[Token(Token = "0x600139E")]
		[Address(RVA = "0x9E926C", Offset = "0x9E926C", VA = "0x9E926C")]
		public static bool IsMyMultiplayerPrefab(Killable kill)
		{
			return default(bool);
		}

		[Token(Token = "0x60013A0")]
		[Address(RVA = "0x9E4590", Offset = "0x9E4590", VA = "0x9E4590")]
		public static string GetPrefabName(Transform trans)
		{
			return null;
		}

		[Token(Token = "0x60013A1")]
		[Address(RVA = "0x9E9390", Offset = "0x9E9390", VA = "0x9E9390")]
		public static string GetPrefabName(GameObject go)
		{
			return null;
		}

		[Token(Token = "0x60013A2")]
		[Address(RVA = "0x9E8C30", Offset = "0x9E8C30", VA = "0x9E8C30")]
		public static string GetPrefabShortName(string prefabName)
		{
			return null;
		}

		[Token(Token = "0x60013A3")]
		[Address(RVA = "0x9E5A88", Offset = "0x9E5A88", VA = "0x9E5A88")]
		private static int NumberOfClones(PoolItemInstanceList instList)
		{
			return default(int);
		}

		[Token(Token = "0x60013A4")]
		[Address(RVA = "0x9E6218", Offset = "0x9E6218", VA = "0x9E6218")]
		public static bool IsSpawned(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x60013A8")]
		[Address(RVA = "0x9E94D8", Offset = "0x9E94D8", VA = "0x9E94D8")]
		public PoolBoss()
		{
		}
	}
	[Token(Token = "0x20002F5")]
	public static class PoolBossExtensions
	{
		[Token(Token = "0x60013AA")]
		[Address(RVA = "0x9E99FC", Offset = "0x9E99FC", VA = "0x9E99FC")]
		public static bool AllOfPrefabAreDespawned(this Transform transPrefab)
		{
			return default(bool);
		}

		[Token(Token = "0x60013AB")]
		[Address(RVA = "0x9E9A74", Offset = "0x9E9A74", VA = "0x9E9A74")]
		public static void CreateNewPoolItem(this Transform itemTrans, int preloadInstances, bool canInstantiateMore, int hardLimit, bool logMsgs, string catName)
		{
		}

		[Token(Token = "0x60013AC")]
		[Address(RVA = "0x9E9B1C", Offset = "0x9E9B1C", VA = "0x9E9B1C")]
		public static void DamageAllOfPrefab(this Transform transToDespawn, int damagePoints)
		{
		}

		[Token(Token = "0x60013AD")]
		[Address(RVA = "0x9E9B9C", Offset = "0x9E9B9C", VA = "0x9E9B9C")]
		public static bool Despawn(this Transform transToDespawn)
		{
			return default(bool);
		}

		[Token(Token = "0x60013AE")]
		[Address(RVA = "0x9E9C18", Offset = "0x9E9C18", VA = "0x9E9C18")]
		public static void DespawnAllOfPrefab(this Transform transToDespawn)
		{
		}

		[Token(Token = "0x60013AF")]
		[Address(RVA = "0x9E9C90", Offset = "0x9E9C90", VA = "0x9E9C90")]
		public static string GetPrefabName(this Transform trans)
		{
			return null;
		}

		[Token(Token = "0x60013B0")]
		[Address(RVA = "0x9E9D08", Offset = "0x9E9D08", VA = "0x9E9D08")]
		public static void KillAllOfPrefab(this Transform transToKill)
		{
		}

		[Token(Token = "0x60013B1")]
		[Address(RVA = "0x9E9D80", Offset = "0x9E9D80", VA = "0x9E9D80")]
		public static Transform NextPoolItemToSpawn(this Transform trans)
		{
			return null;
		}

		[Token(Token = "0x60013B2")]
		[Address(RVA = "0x9E9DF8", Offset = "0x9E9DF8", VA = "0x9E9DF8")]
		public static int PrefabDespawnedCount(this Transform transPrefab)
		{
			return default(int);
		}

		[Token(Token = "0x60013B3")]
		[Address(RVA = "0x9E9E70", Offset = "0x9E9E70", VA = "0x9E9E70")]
		public static bool PrefabIsInPool(this Transform trans)
		{
			return default(bool);
		}

		[Token(Token = "0x60013B4")]
		[Address(RVA = "0x9E9EE8", Offset = "0x9E9EE8", VA = "0x9E9EE8")]
		public static int PrefabSpawnedCount(this Transform transPrefab)
		{
			return default(int);
		}

		[Token(Token = "0x60013B5")]
		[Address(RVA = "0x9E9F60", Offset = "0x9E9F60", VA = "0x9E9F60")]
		public static Transform SpawnInPool(this Transform transToSpawn, Vector3 position, Quaternion rotation)
		{
			return null;
		}

		[Token(Token = "0x60013B6")]
		[Address(RVA = "0x9EA018", Offset = "0x9EA018", VA = "0x9EA018")]
		public static Transform SpawnOutsidePool(this Transform transToSpawn, Vector3 position, Quaternion rotation)
		{
			return null;
		}

		[Token(Token = "0x60013B7")]
		[Address(RVA = "0x9EA0D0", Offset = "0x9EA0D0", VA = "0x9EA0D0")]
		public static Transform Spawn(this Transform transToSpawn, Vector3 position, Quaternion rotation, Transform parentTransform)
		{
			return null;
		}

		[Token(Token = "0x60013B8")]
		[Address(RVA = "0x9EA198", Offset = "0x9EA198", VA = "0x9EA198")]
		public static Transform OnLayer(this Transform spawned, int layer)
		{
			return null;
		}

		[Token(Token = "0x60013B9")]
		[Address(RVA = "0x9EA228", Offset = "0x9EA228", VA = "0x9EA228")]
		public static Transform WithScale(this Transform spawned, Vector3 newScale)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20002F6")]
	public class PoolBossCategory
	{
		[Token(Token = "0x40010D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string CatName;

		[Token(Token = "0x40010D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool IsExpanded;

		[Token(Token = "0x40010D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
		public bool IsEditing;

		[Token(Token = "0x40010DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string ProspectiveName;

		[Token(Token = "0x60013BA")]
		[Address(RVA = "0x9E46E4", Offset = "0x9E46E4", VA = "0x9E46E4")]
		public PoolBossCategory()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002F7")]
	public class PoolBossItem
	{
		[Token(Token = "0x40010DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Transform prefabTransform;

		[Token(Token = "0x40010DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int instancesToPreload;

		[Token(Token = "0x40010DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool isExpanded;

		[Token(Token = "0x40010DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool logMessages;

		[Token(Token = "0x40010DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public bool allowInstantiateMore;

		[Token(Token = "0x40010E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
		public bool enableNavMeshAgentOnSpawn;

		[Token(Token = "0x40010E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int itemHardLimit;

		[Token(Token = "0x40010E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool allowRecycle;

		[Token(Token = "0x40010E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public string categoryName;

		[Token(Token = "0x60013BB")]
		[Address(RVA = "0x9EA278", Offset = "0x9EA278", VA = "0x9EA278")]
		public PoolBossItem Clone()
		{
			return null;
		}

		[Token(Token = "0x60013BC")]
		[Address(RVA = "0x9E4344", Offset = "0x9E4344", VA = "0x9E4344")]
		public PoolBossItem()
		{
		}
	}
	[Token(Token = "0x20002F8")]
	public class PoolBossListener : MonoBehaviour
	{
		[Token(Token = "0x40010E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string sourceTransName;

		[Token(Token = "0x60013BD")]
		[Address(RVA = "0x9EA394", Offset = "0x9EA394", VA = "0x9EA394")]
		private void Reset()
		{
		}

		[Token(Token = "0x60013BE")]
		[Address(RVA = "0x9EA458", Offset = "0x9EA458", VA = "0x9EA458", Slot = "4")]
		public virtual void PercentInitialized(float percentDone)
		{
		}

		[Token(Token = "0x60013BF")]
		[Address(RVA = "0x9EA45C", Offset = "0x9EA45C", VA = "0x9EA45C", Slot = "5")]
		public virtual void InitializationComplete()
		{
		}

		[Token(Token = "0x60013C0")]
		[Address(RVA = "0x9EA460", Offset = "0x9EA460", VA = "0x9EA460", Slot = "6")]
		public virtual void ItemSpawned(Transform cloneSpawned)
		{
		}

		[Token(Token = "0x60013C1")]
		[Address(RVA = "0x9EA464", Offset = "0x9EA464", VA = "0x9EA464", Slot = "7")]
		public virtual void ItemDespawned(Transform transDespawned)
		{
		}

		[Token(Token = "0x60013C2")]
		[Address(RVA = "0x9EA468", Offset = "0x9EA468", VA = "0x9EA468")]
		public PoolBossListener()
		{
		}
	}
	[Token(Token = "0x20002F9")]
	public class PoolableInfo : MonoBehaviour
	{
		[Token(Token = "0x40010E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string poolItemName;

		[Token(Token = "0x1700011D")]
		public string ItemName
		{
			[Token(Token = "0x60013C9")]
			[Address(RVA = "0x9E2EA4", Offset = "0x9E2EA4", VA = "0x9E2EA4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60013C3")]
		[Address(RVA = "0x9EA470", Offset = "0x9EA470", VA = "0x9EA470")]
		private void OnSpawned()
		{
		}

		[Token(Token = "0x60013C4")]
		[Address(RVA = "0x9EA4E8", Offset = "0x9EA4E8", VA = "0x9EA4E8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60013C5")]
		[Address(RVA = "0x9EA560", Offset = "0x9EA560", VA = "0x9EA560")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60013C6")]
		[Address(RVA = "0x9EA5D8", Offset = "0x9EA5D8", VA = "0x9EA5D8")]
		private void Reset()
		{
		}

		[Token(Token = "0x60013C7")]
		[Address(RVA = "0x9EA600", Offset = "0x9EA600", VA = "0x9EA600")]
		public void FindPoolItemName()
		{
		}

		[Token(Token = "0x60013C8")]
		[Address(RVA = "0x9EA6A0", Offset = "0x9EA6A0", VA = "0x9EA6A0")]
		public void SetPoolItemName(string itemName)
		{
		}

		[Token(Token = "0x60013CA")]
		[Address(RVA = "0x9EA6A8", Offset = "0x9EA6A8", VA = "0x9EA6A8")]
		public PoolableInfo()
		{
		}
	}
	[Token(Token = "0x20002FA")]
	public class WavePrefabPool : MonoBehaviour
	{
		[Token(Token = "0x200039A")]
		public enum PoolDispersalMode
		{
			[Token(Token = "0x4001459")]
			Randomized,
			[Token(Token = "0x400145A")]
			OriginalPoolOrder
		}

		[Token(Token = "0x200039B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x396A38", Offset = "0x396A38")]
		private sealed class <>c__DisplayClass12_0
		{
			[Token(Token = "0x400145B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int index;

			[Token(Token = "0x60016FA")]
			[Address(RVA = "0xE99328", Offset = "0xE99328", VA = "0xE99328")]
			public <>c__DisplayClass12_0()
			{
			}

			[Token(Token = "0x60016FB")]
			[Address(RVA = "0xE993BC", Offset = "0xE993BC", VA = "0xE993BC")]
			internal bool <PoolInstancesOfIndex>b__0(int obj)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40010E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool isExpanded;

		[Token(Token = "0x40010E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
		public bool exhaustiveList;

		[Token(Token = "0x40010E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PoolDispersalMode dispersalMode;

		[Token(Token = "0x40010E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public WavePrefabPoolListener listener;

		[Token(Token = "0x40010EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<WavePrefabPoolItem> poolItems;

		[Token(Token = "0x40010EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool _isValid;

		[Token(Token = "0x40010EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly List<int> _poolItemIndexes;

		[Token(Token = "0x60013CB")]
		[Address(RVA = "0xE984E0", Offset = "0xE984E0", VA = "0xE984E0")]
		private void Awake()
		{
		}

		[Token(Token = "0x60013CC")]
		[Address(RVA = "0xE98504", Offset = "0xE98504", VA = "0xE98504")]
		private void FillPool()
		{
		}

		[Token(Token = "0x60013CD")]
		[Address(RVA = "0xE98E14", Offset = "0xE98E14", VA = "0xE98E14")]
		public Transform GetRandomWeightedTransform()
		{
			return null;
		}

		[Token(Token = "0x60013CE")]
		[Address(RVA = "0xE991B8", Offset = "0xE991B8", VA = "0xE991B8")]
		public void ResetPool()
		{
		}

		[Token(Token = "0x60013CF")]
		[Address(RVA = "0xE9922C", Offset = "0xE9922C", VA = "0xE9922C")]
		public int PoolInstancesOfIndex(int index)
		{
			return default(int);
		}

		[Token(Token = "0x60013D0")]
		[Address(RVA = "0xE99330", Offset = "0xE99330", VA = "0xE99330")]
		public WavePrefabPool()
		{
		}
	}
	[Token(Token = "0x20002FB")]
	public class WavePrefabPoolGroup : MonoBehaviour
	{
		[Token(Token = "0x40010ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool newPrefabPoolExpanded;

		[Token(Token = "0x40010EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string newPrefabPoolName;

		[Token(Token = "0x60013D1")]
		[Address(RVA = "0xE993E4", Offset = "0xE993E4", VA = "0xE993E4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60013D2")]
		[Address(RVA = "0xE993F0", Offset = "0xE993F0", VA = "0xE993F0")]
		private void Start()
		{
		}

		[Token(Token = "0x60013D3")]
		[Address(RVA = "0xE99690", Offset = "0xE99690", VA = "0xE99690")]
		public WavePrefabPoolGroup()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002FC")]
	public class WavePrefabPoolItem
	{
		[Token(Token = "0x40010EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Transform prefabToSpawn;

		[Token(Token = "0x40010F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string prefabPoolBossCategory;

		[Token(Token = "0x40010F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LevelSettings.ActiveItemMode activeMode;

		[Token(Token = "0x40010F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public WorldVariableRangeCollection activeItemCriteria;

		[Token(Token = "0x40010F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public KillerInt thisWeight;

		[Token(Token = "0x40010F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool isExpanded;

		[Token(Token = "0x60013D4")]
		[Address(RVA = "0xE996FC", Offset = "0xE996FC", VA = "0xE996FC")]
		public WavePrefabPoolItem()
		{
		}
	}
	[Token(Token = "0x20002FD")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x396530", Offset = "0x396530")]
	public class WavePrefabPoolListener : MonoBehaviour
	{
		[Token(Token = "0x40010F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string sourcePrefabPoolName;

		[Token(Token = "0x60013D5")]
		[Address(RVA = "0xE99838", Offset = "0xE99838", VA = "0xE99838")]
		private void Reset()
		{
		}

		[Token(Token = "0x60013D6")]
		[Address(RVA = "0xE998FC", Offset = "0xE998FC", VA = "0xE998FC", Slot = "4")]
		public virtual void PrefabGrabbedFromPool(Transform transGrabbed)
		{
		}

		[Token(Token = "0x60013D7")]
		[Address(RVA = "0xE99900", Offset = "0xE99900", VA = "0xE99900", Slot = "5")]
		public virtual void PoolRefilling()
		{
		}

		[Token(Token = "0x60013D8")]
		[Address(RVA = "0xE99904", Offset = "0xE99904", VA = "0xE99904")]
		public WavePrefabPoolListener()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002FE")]
	public class CGKCustomEventToFire
	{
		[Token(Token = "0x40010F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string CustomEventName;

		[Token(Token = "0x60013D9")]
		[Address(RVA = "0xB7D530", Offset = "0xB7D530", VA = "0xB7D530")]
		public CGKCustomEventToFire()
		{
		}
	}
	[Token(Token = "0x20002FF")]
	public class CoreCustomEventAttribute : PropertyAttribute
	{
		[Token(Token = "0x60013DA")]
		[Address(RVA = "0xB7DE5C", Offset = "0xB7DE5C", VA = "0xB7DE5C")]
		public CoreCustomEventAttribute()
		{
		}
	}
	[Token(Token = "0x2000300")]
	public class CoreScriptOrder : Attribute
	{
		[Token(Token = "0x40010F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int Order;

		[Token(Token = "0x60013DB")]
		[Address(RVA = "0xB7DF30", Offset = "0xB7DF30", VA = "0xB7DF30")]
		public CoreScriptOrder(int order)
		{
		}
	}
	[Token(Token = "0x2000301")]
	public class CoreWaveClassAttribute : PropertyAttribute
	{
		[Token(Token = "0x60013DC")]
		[Address(RVA = "0xB7DF50", Offset = "0xB7DF50", VA = "0xB7DF50")]
		public CoreWaveClassAttribute()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000302")]
	public class KillerFloat : KillerVariable
	{
		[Token(Token = "0x40010F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float selfValue;

		[Token(Token = "0x40010F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float minimum;

		[Token(Token = "0x40010FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float maximum;

		[Token(Token = "0x40010FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool _isValid;

		[Token(Token = "0x1700011E")]
		public float Value
		{
			[Token(Token = "0x60013E0")]
			[Address(RVA = "0xB7F634", Offset = "0xB7F634", VA = "0xB7F634")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60013E1")]
			[Address(RVA = "0xB89BF8", Offset = "0xB89BF8", VA = "0xB89BF8")]
			set
			{
			}
		}

		[Token(Token = "0x1700011F")]
		public static float DefaultValue
		{
			[Token(Token = "0x60013E2")]
			[Address(RVA = "0xB89BF0", Offset = "0xB89BF0", VA = "0xB89BF0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60013DD")]
		[Address(RVA = "0xB89B3C", Offset = "0xB89B3C", VA = "0xB89B3C")]
		public KillerFloat(float startingValue)
		{
		}

		[Token(Token = "0x60013DE")]
		[Address(RVA = "0xB7D6C8", Offset = "0xB7D6C8", VA = "0xB7D6C8")]
		public KillerFloat(float startingValue, float min, float max)
		{
		}

		[Token(Token = "0x60013DF")]
		[Address(RVA = "0xB82D08", Offset = "0xB82D08", VA = "0xB82D08")]
		public float LogIfInvalid(Transform trans, string fieldName, [Optional] int? levelNum, [Optional] int? waveNum, [Optional] string trigEventName)
		{
			return default(float);
		}
	}
	[Serializable]
	[Token(Token = "0x2000303")]
	public class KillerInt : KillerVariable
	{
		[Token(Token = "0x40010FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int selfValue;

		[Token(Token = "0x40010FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int minimum;

		[Token(Token = "0x40010FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int maximum;

		[Token(Token = "0x40010FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool _isValid;

		[Token(Token = "0x17000120")]
		public int Value
		{
			[Token(Token = "0x60013E6")]
			[Address(RVA = "0xB7F0D4", Offset = "0xB7F0D4", VA = "0xB7F0D4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60013E7")]
			[Address(RVA = "0xB81C28", Offset = "0xB81C28", VA = "0xB81C28")]
			set
			{
			}
		}

		[Token(Token = "0x17000121")]
		public static int DefaultValue
		{
			[Token(Token = "0x60013E8")]
			[Address(RVA = "0xB89D9C", Offset = "0xB89D9C", VA = "0xB89D9C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60013E3")]
		[Address(RVA = "0xB89D64", Offset = "0xB89D64", VA = "0xB89D64")]
		public KillerInt(int startingValue)
		{
		}

		[Token(Token = "0x60013E4")]
		[Address(RVA = "0xB7D690", Offset = "0xB7D690", VA = "0xB7D690")]
		public KillerInt(int startingValue, int min, int max)
		{
		}

		[Token(Token = "0x60013E5")]
		[Address(RVA = "0xB82C94", Offset = "0xB82C94", VA = "0xB82C94")]
		public int LogIfInvalid(Transform trans, string fieldName, [Optional] int? levelNum, [Optional] int? waveNum, [Optional] string trigEventName)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000304")]
	public class KillerVariable
	{
		[Token(Token = "0x200039C")]
		public enum ModMode
		{
			[Token(Token = "0x400145D")]
			Set,
			[Token(Token = "0x400145E")]
			Add,
			[Token(Token = "0x400145F")]
			Sub,
			[Token(Token = "0x4001460")]
			Mult
		}

		[Token(Token = "0x4001100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public LevelSettings.VariableSource variableSource;

		[Token(Token = "0x4001101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string worldVariableName;

		[Token(Token = "0x4001102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ModMode curModMode;

		[Token(Token = "0x60013E9")]
		[Address(RVA = "0xB89B78", Offset = "0xB89B78", VA = "0xB89B78")]
		public KillerVariable()
		{
		}
	}
	[Token(Token = "0x2000305")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x396564", Offset = "0x396564")]
	public class PlayerSpawner : MonoBehaviour
	{
		[Token(Token = "0x4001103")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Transform PlayerPrefab;

		[Token(Token = "0x4001104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform RespawnParticlePrefab;

		[Token(Token = "0x4001105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector3 RespawnParticleOffset;

		[Token(Token = "0x4001106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float RespawnDelay;

		[Token(Token = "0x4001107")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 spawnPosition;

		[Token(Token = "0x4001108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool followPlayer;

		[Token(Token = "0x4001109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Transform _player;

		[Token(Token = "0x400110A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float? _nextSpawnTime;

		[Token(Token = "0x400110B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 _playerPosition;

		[Token(Token = "0x400110C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool _isDisabled;

		[Token(Token = "0x60013EA")]
		[Address(RVA = "0x9E12AC", Offset = "0x9E12AC", VA = "0x9E12AC")]
		private void Start()
		{
		}

		[Token(Token = "0x60013EB")]
		[Address(RVA = "0x9E1770", Offset = "0x9E1770", VA = "0x9E1770")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60013EC")]
		[Address(RVA = "0x9E1550", Offset = "0x9E1550", VA = "0x9E1550")]
		private void SpawnPlayer()
		{
		}

		[Token(Token = "0x60013ED")]
		[Address(RVA = "0x9E1BFC", Offset = "0x9E1BFC", VA = "0x9E1BFC")]
		public void UpdateSpawnPosition(Vector3 newPosition)
		{
		}

		[Token(Token = "0x60013EE")]
		[Address(RVA = "0x9E1C08", Offset = "0x9E1C08", VA = "0x9E1C08")]
		public PlayerSpawner()
		{
		}
	}
	[Token(Token = "0x2000306")]
	public class SpawnTracker : MonoBehaviour
	{
		[Token(Token = "0x400110D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private Transform _trans;

		[Token(Token = "0x400110E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x397550", Offset = "0x397550")]
		private WaveSyncroPrefabSpawner <SourceSpawner>k__BackingField;

		[Token(Token = "0x17000122")]
		public WaveSyncroPrefabSpawner SourceSpawner
		{
			[Token(Token = "0x60013F1")]
			[Address(RVA = "0x9EA87C", Offset = "0x9EA87C", VA = "0x9EA87C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x398CAC", Offset = "0x398CAC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60013F2")]
			[Address(RVA = "0x9EA884", Offset = "0x9EA884", VA = "0x9EA884")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x398CBC", Offset = "0x398CBC")]
			set
			{
			}
		}

		[Token(Token = "0x17000123")]
		public Transform Trans
		{
			[Token(Token = "0x60013F3")]
			[Address(RVA = "0x9EA7D8", Offset = "0x9EA7D8", VA = "0x9EA7D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60013EF")]
		[Address(RVA = "0x9EA714", Offset = "0x9EA714", VA = "0x9EA714")]
		private void Awake()
		{
		}

		[Token(Token = "0x60013F0")]
		[Address(RVA = "0x9EA718", Offset = "0x9EA718", VA = "0x9EA718")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60013F4")]
		[Address(RVA = "0x9EA88C", Offset = "0x9EA88C", VA = "0x9EA88C")]
		public SpawnTracker()
		{
		}
	}
	[Token(Token = "0x2000307")]
	public class TrigSpawnTracker : MonoBehaviour
	{
		[Token(Token = "0x400110F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private Transform _trans;

		[Token(Token = "0x4001110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private TriggeredSpawnerV2 _sourceSpawner;

		[Token(Token = "0x4001111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private TriggeredSpawner.EventType _waveEventType;

		[Token(Token = "0x4001112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TriggeredWaveMetaData _waveMeta;

		[Token(Token = "0x4001113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private string _customEventName;

		[Token(Token = "0x17000124")]
		public Transform Trans
		{
			[Token(Token = "0x60013F8")]
			[Address(RVA = "0x9EC210", Offset = "0x9EC210", VA = "0x9EC210")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60013F5")]
		[Address(RVA = "0x9EC118", Offset = "0x9EC118", VA = "0x9EC118")]
		private void Awake()
		{
		}

		[Token(Token = "0x60013F6")]
		[Address(RVA = "0x9EC11C", Offset = "0x9EC11C", VA = "0x9EC11C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60013F7")]
		[Address(RVA = "0x9EC2B4", Offset = "0x9EC2B4", VA = "0x9EC2B4")]
		public void StartTracking(TriggeredSpawnerV2 sourceSpawner, TriggeredSpawner.EventType eType, string customEventName, TriggeredWaveMetaData waveMeta)
		{
		}

		[Token(Token = "0x60013F9")]
		[Address(RVA = "0x9EC2CC", Offset = "0x9EC2CC", VA = "0x9EC2CC")]
		public TrigSpawnTracker()
		{
		}
	}
	[Token(Token = "0x2000308")]
	[AttributeAttribute(Name = "CoreScriptOrder", RVA = "0x396598", Offset = "0x396598")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x396598", Offset = "0x396598")]
	public class TriggeredSpawner : MonoBehaviour, ICgkEventReceiver
	{
		[Token(Token = "0x200039D")]
		public enum Unity_UIVersion
		{
			[Token(Token = "0x4001462")]
			Legacy,
			[Token(Token = "0x4001463")]
			uGUI
		}

		[Token(Token = "0x200039E")]
		public enum EventType
		{
			[Token(Token = "0x4001465")]
			OnEnabled,
			[Token(Token = "0x4001466")]
			OnDisabled,
			[Token(Token = "0x4001467")]
			Visible,
			[Token(Token = "0x4001468")]
			Invisible,
			[Token(Token = "0x4001469")]
			MouseOver_Legacy,
			[Token(Token = "0x400146A")]
			MouseClick_Legacy,
			[Token(Token = "0x400146B")]
			OnCollision,
			[Token(Token = "0x400146C")]
			OnTriggerEnter,
			[Token(Token = "0x400146D")]
			OnSpawned,
			[Token(Token = "0x400146E")]
			OnDespawned,
			[Token(Token = "0x400146F")]
			OnClick_NGUI,
			[Token(Token = "0x4001470")]
			CodeTriggered1,
			[Token(Token = "0x4001471")]
			CodeTriggered2,
			[Token(Token = "0x4001472")]
			LostHitPoints,
			[Token(Token = "0x4001473")]
			OnTriggerExit,
			[Token(Token = "0x4001474")]
			OnCollision2D,
			[Token(Token = "0x4001475")]
			OnTriggerEnter2D,
			[Token(Token = "0x4001476")]
			OnTriggerExit2D,
			[Token(Token = "0x4001477")]
			SpawnerDestroyed,
			[Token(Token = "0x4001478")]
			DeathTimer,
			[Token(Token = "0x4001479")]
			CustomEvent,
			[Token(Token = "0x400147A")]
			SliderChanged_uGUI,
			[Token(Token = "0x400147B")]
			ButtonClicked_uGUI,
			[Token(Token = "0x400147C")]
			PointerDown_uGUI,
			[Token(Token = "0x400147D")]
			PointerUp_uGUI,
			[Token(Token = "0x400147E")]
			PointerEnter_uGUI,
			[Token(Token = "0x400147F")]
			PointerExit_uGUI,
			[Token(Token = "0x4001480")]
			Drag_uGUI,
			[Token(Token = "0x4001481")]
			Drop_uGUI,
			[Token(Token = "0x4001482")]
			Scroll_uGUI,
			[Token(Token = "0x4001483")]
			UpdateSelected_uGUI,
			[Token(Token = "0x4001484")]
			Select_uGUI,
			[Token(Token = "0x4001485")]
			Deselect_uGUI,
			[Token(Token = "0x4001486")]
			Move_uGUI,
			[Token(Token = "0x4001487")]
			InitializePotentialDrag_uGUI,
			[Token(Token = "0x4001488")]
			BeginDrag_uGUI,
			[Token(Token = "0x4001489")]
			EndDrag_uGUI,
			[Token(Token = "0x400148A")]
			Submit_uGUI,
			[Token(Token = "0x400148B")]
			Cancel_uGUI,
			[Token(Token = "0x400148C")]
			ParentDestroyed,
			[Token(Token = "0x400148D")]
			DistanceDeath,
			[Token(Token = "0x400148E")]
			OnTriggerStay,
			[Token(Token = "0x400148F")]
			OnTriggerStay2D
		}

		[Token(Token = "0x200039F")]
		public enum SpawnerEventSource
		{
			[Token(Token = "0x4001491")]
			ReceiveFromParent,
			[Token(Token = "0x4001492")]
			Self,
			[Token(Token = "0x4001493")]
			None
		}

		[Token(Token = "0x20003A0")]
		public enum GameOverBehavior
		{
			[Token(Token = "0x4001495")]
			BehaveAsNormal,
			[Token(Token = "0x4001496")]
			Disable
		}

		[Token(Token = "0x20003A1")]
		public enum WavePauseBehavior
		{
			[Token(Token = "0x4001498")]
			BehaveAsNormal,
			[Token(Token = "0x4001499")]
			Disable
		}

		[Token(Token = "0x20003A2")]
		public enum RetriggerLimitMode
		{
			[Token(Token = "0x400149B")]
			None,
			[Token(Token = "0x400149C")]
			FrameBased,
			[Token(Token = "0x400149D")]
			TimeBased
		}

		[Token(Token = "0x20003A3")]
		public class TriggeredSpawnerUGUIHandler : MonoBehaviour
		{
			[Token(Token = "0x400149E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3979BC", Offset = "0x3979BC")]
			private TriggeredSpawner <trigSpawner>k__BackingField;

			[Token(Token = "0x17000175")]
			public TriggeredSpawner trigSpawner
			{
				[Token(Token = "0x60016FC")]
				[Address(RVA = "0xE82CA4", Offset = "0xE82CA4", VA = "0xE82CA4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39916C", Offset = "0x39916C")]
				get
				{
					return null;
				}
				[Token(Token = "0x60016FD")]
				[Address(RVA = "0xE82CAC", Offset = "0xE82CAC", VA = "0xE82CAC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39917C", Offset = "0x39917C")]
				set
				{
				}
			}

			[Token(Token = "0x60016FE")]
			[Address(RVA = "0xE82254", Offset = "0xE82254", VA = "0xE82254")]
			public TriggeredSpawnerUGUIHandler()
			{
			}
		}

		[Token(Token = "0x20003A4")]
		public class TriggeredSpawnerPointerEnterHandler : TriggeredSpawnerUGUIHandler, IPointerEnterHandler, IEventSystemHandler
		{
			[Token(Token = "0x60016FF")]
			[Address(RVA = "0xE8283C", Offset = "0xE8283C", VA = "0xE8283C", Slot = "4")]
			public void OnPointerEnter(PointerEventData data)
			{
			}

			[Token(Token = "0x6001700")]
			[Address(RVA = "0xE828F0", Offset = "0xE828F0", VA = "0xE828F0")]
			public TriggeredSpawnerPointerEnterHandler()
			{
			}
		}

		[Token(Token = "0x20003A5")]
		public class TriggeredSpawnerPointerExitHandler : TriggeredSpawnerUGUIHandler, IPointerExitHandler, IEventSystemHandler
		{
			[Token(Token = "0x6001701")]
			[Address(RVA = "0xE828F8", Offset = "0xE828F8", VA = "0xE828F8", Slot = "4")]
			public void OnPointerExit(PointerEventData data)
			{
			}

			[Token(Token = "0x6001702")]
			[Address(RVA = "0xE829AC", Offset = "0xE829AC", VA = "0xE829AC")]
			public TriggeredSpawnerPointerExitHandler()
			{
			}
		}

		[Token(Token = "0x20003A6")]
		public class TriggeredSpawnerPointerDownHandler : TriggeredSpawnerUGUIHandler, IPointerDownHandler, IEventSystemHandler
		{
			[Token(Token = "0x6001703")]
			[Address(RVA = "0xE82780", Offset = "0xE82780", VA = "0xE82780", Slot = "4")]
			public void OnPointerDown(PointerEventData data)
			{
			}

			[Token(Token = "0x6001704")]
			[Address(RVA = "0xE82834", Offset = "0xE82834", VA = "0xE82834")]
			public TriggeredSpawnerPointerDownHandler()
			{
			}
		}

		[Token(Token = "0x20003A7")]
		public class TriggeredSpawnerPointerUpHandler : TriggeredSpawnerUGUIHandler, IPointerUpHandler, IEventSystemHandler
		{
			[Token(Token = "0x6001705")]
			[Address(RVA = "0xE829B4", Offset = "0xE829B4", VA = "0xE829B4", Slot = "4")]
			public void OnPointerUp(PointerEventData data)
			{
			}

			[Token(Token = "0x6001706")]
			[Address(RVA = "0xE82A68", Offset = "0xE82A68", VA = "0xE82A68")]
			public TriggeredSpawnerPointerUpHandler()
			{
			}
		}

		[Token(Token = "0x20003A8")]
		public class TriggeredSpawnerDragHandler : TriggeredSpawnerUGUIHandler, IDragHandler, IEventSystemHandler
		{
			[Token(Token = "0x6001707")]
			[Address(RVA = "0xE823D4", Offset = "0xE823D4", VA = "0xE823D4", Slot = "4")]
			public void OnDrag(PointerEventData data)
			{
			}

			[Token(Token = "0x6001708")]
			[Address(RVA = "0xE82488", Offset = "0xE82488", VA = "0xE82488")]
			public TriggeredSpawnerDragHandler()
			{
			}
		}

		[Token(Token = "0x20003A9")]
		public class TriggeredSpawnerDropHandler : TriggeredSpawnerUGUIHandler, IDropHandler, IEventSystemHandler
		{
			[Token(Token = "0x6001709")]
			[Address(RVA = "0xE82490", Offset = "0xE82490", VA = "0xE82490", Slot = "4")]
			public void OnDrop(PointerEventData data)
			{
			}

			[Token(Token = "0x600170A")]
			[Address(RVA = "0xE82544", Offset = "0xE82544", VA = "0xE82544")]
			public TriggeredSpawnerDropHandler()
			{
			}
		}

		[Token(Token = "0x20003AA")]
		public class TriggeredSpawnerScrollHandler : TriggeredSpawnerUGUIHandler, IScrollHandler, IEventSystemHandler
		{
			[Token(Token = "0x600170B")]
			[Address(RVA = "0xE82A70", Offset = "0xE82A70", VA = "0xE82A70", Slot = "4")]
			public void OnScroll(PointerEventData data)
			{
			}

			[Token(Token = "0x600170C")]
			[Address(RVA = "0xE82B24", Offset = "0xE82B24", VA = "0xE82B24")]
			public TriggeredSpawnerScrollHandler()
			{
			}
		}

		[Token(Token = "0x20003AB")]
		public class TriggeredSpawnerUpdateSelectedHandler : TriggeredSpawnerUGUIHandler, IUpdateSelectedHandler, IEventSystemHandler
		{
			[Token(Token = "0x600170D")]
			[Address(RVA = "0xE82CB4", Offset = "0xE82CB4", VA = "0xE82CB4", Slot = "4")]
			public void OnUpdateSelected(BaseEventData data)
			{
			}

			[Token(Token = "0x600170E")]
			[Address(RVA = "0xE82D68", Offset = "0xE82D68", VA = "0xE82D68")]
			public TriggeredSpawnerUpdateSelectedHandler()
			{
			}
		}

		[Token(Token = "0x20003AC")]
		public class TriggeredSpawnerSelectHandler : TriggeredSpawnerUGUIHandler, ISelectHandler, IEventSystemHandler
		{
			[Token(Token = "0x600170F")]
			[Address(RVA = "0xE82B2C", Offset = "0xE82B2C", VA = "0xE82B2C", Slot = "4")]
			public void OnSelect(BaseEventData data)
			{
			}

			[Token(Token = "0x6001710")]
			[Address(RVA = "0xE82BE0", Offset = "0xE82BE0", VA = "0xE82BE0")]
			public TriggeredSpawnerSelectHandler()
			{
			}
		}

		[Token(Token = "0x20003AD")]
		public class TriggeredSpawnerDeselectHandler : TriggeredSpawnerUGUIHandler, IDeselectHandler, IEventSystemHandler
		{
			[Token(Token = "0x6001711")]
			[Address(RVA = "0xE82318", Offset = "0xE82318", VA = "0xE82318", Slot = "4")]
			public void OnDeselect(BaseEventData data)
			{
			}

			[Token(Token = "0x6001712")]
			[Address(RVA = "0xE823CC", Offset = "0xE823CC", VA = "0xE823CC")]
			public TriggeredSpawnerDeselectHandler()
			{
			}
		}

		[Token(Token = "0x20003AE")]
		public class TriggeredSpawnerMoveHandler : TriggeredSpawnerUGUIHandler, IMoveHandler, IEventSystemHandler
		{
			[Token(Token = "0x6001713")]
			[Address(RVA = "0xE826C4", Offset = "0xE826C4", VA = "0xE826C4", Slot = "4")]
			public void OnMove(AxisEventData data)
			{
			}

			[Token(Token = "0x6001714")]
			[Address(RVA = "0xE82778", Offset = "0xE82778", VA = "0xE82778")]
			public TriggeredSpawnerMoveHandler()
			{
			}
		}

		[Token(Token = "0x20003AF")]
		public class TriggeredSpawnerInitializePotentialDragHandler : TriggeredSpawnerUGUIHandler, IInitializePotentialDragHandler, IEventSystemHandler
		{
			[Token(Token = "0x6001715")]
			[Address(RVA = "0xE82608", Offset = "0xE82608", VA = "0xE82608", Slot = "4")]
			public void OnInitializePotentialDrag(PointerEventData data)
			{
			}

			[Token(Token = "0x6001716")]
			[Address(RVA = "0xE826BC", Offset = "0xE826BC", VA = "0xE826BC")]
			public TriggeredSpawnerInitializePotentialDragHandler()
			{
			}
		}

		[Token(Token = "0x20003B0")]
		public class TriggeredSpawnerBeginDragHandler : TriggeredSpawnerUGUIHandler, IBeginDragHandler, IEventSystemHandler
		{
			[Token(Token = "0x6001717")]
			[Address(RVA = "0xE82198", Offset = "0xE82198", VA = "0xE82198", Slot = "4")]
			public void OnBeginDrag(PointerEventData data)
			{
			}

			[Token(Token = "0x6001718")]
			[Address(RVA = "0xE8224C", Offset = "0xE8224C", VA = "0xE8224C")]
			public TriggeredSpawnerBeginDragHandler()
			{
			}
		}

		[Token(Token = "0x20003B1")]
		public class TriggeredSpawnerEndDragHandler : TriggeredSpawnerUGUIHandler, IEndDragHandler, IEventSystemHandler
		{
			[Token(Token = "0x6001719")]
			[Address(RVA = "0xE8254C", Offset = "0xE8254C", VA = "0xE8254C", Slot = "4")]
			public void OnEndDrag(PointerEventData data)
			{
			}

			[Token(Token = "0x600171A")]
			[Address(RVA = "0xE82600", Offset = "0xE82600", VA = "0xE82600")]
			public TriggeredSpawnerEndDragHandler()
			{
			}
		}

		[Token(Token = "0x20003B2")]
		public class TriggeredSpawnerSubmitHandler : TriggeredSpawnerUGUIHandler, ISubmitHandler, IEventSystemHandler
		{
			[Token(Token = "0x600171B")]
			[Address(RVA = "0xE82BE8", Offset = "0xE82BE8", VA = "0xE82BE8", Slot = "4")]
			public void OnSubmit(BaseEventData data)
			{
			}

			[Token(Token = "0x600171C")]
			[Address(RVA = "0xE82C9C", Offset = "0xE82C9C", VA = "0xE82C9C")]
			public TriggeredSpawnerSubmitHandler()
			{
			}
		}

		[Token(Token = "0x20003B3")]
		public class TriggeredSpawnerCancelHandler : TriggeredSpawnerUGUIHandler, ICancelHandler, IEventSystemHandler
		{
			[Token(Token = "0x600171D")]
			[Address(RVA = "0xE8225C", Offset = "0xE8225C", VA = "0xE8225C", Slot = "4")]
			public void OnCancel(BaseEventData data)
			{
			}

			[Token(Token = "0x600171E")]
			[Address(RVA = "0xE82310", Offset = "0xE82310", VA = "0xE82310")]
			public TriggeredSpawnerCancelHandler()
			{
			}
		}

		[Token(Token = "0x4001114")]
		public const int MaxDistance = 5000;

		[Token(Token = "0x4001115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Unity_UIVersion unityUIMode;

		[Token(Token = "0x4001116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static List<EventType> eventsThatCanRepeatWave;

		[Token(Token = "0x4001117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static List<EventType> eventsWithTagLayerFilters;

		[Token(Token = "0x4001118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static List<EventType> eventsWithInflexibleWaveLength;

		[Token(Token = "0x4001119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static List<EventType> eventsThatCanTriggerDespawn;

		[Token(Token = "0x400111A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool logMissingEvents;

		[Token(Token = "0x400111B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public LevelSettings.ActiveItemMode activeMode;

		[Token(Token = "0x400111C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public WorldVariableRangeCollection activeItemCriteria;

		[Token(Token = "0x400111D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public GameOverBehavior gameOverBehavior;

		[Token(Token = "0x400111E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WavePauseBehavior wavePauseBehavior;

		[Token(Token = "0x400111F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public SpawnerEventSource eventSourceType;

		[Token(Token = "0x4001120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool transmitEventsToChildren;

		[Token(Token = "0x4001121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool spawnOutsidePool;

		[Token(Token = "0x4001122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public WaveSyncroPrefabSpawner.SpawnLayerTagMode spawnLayerMode;

		[Token(Token = "0x4001123")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public WaveSyncroPrefabSpawner.SpawnLayerTagMode spawnTagMode;

		[Token(Token = "0x4001124")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int spawnCustomLayer;

		[Token(Token = "0x4001125")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string spawnCustomTag;

		[Token(Token = "0x4001126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool applyLayerRecursively;

		[Token(Token = "0x4001127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public TriggeredSpawnerListener listener;

		[Token(Token = "0x4001128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public TriggeredWaveSpecifics enableWave;

		[Token(Token = "0x4001129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public TriggeredWaveSpecifics disableWave;

		[Token(Token = "0x400112A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public TriggeredWaveSpecifics visibleWave;

		[Token(Token = "0x400112B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public TriggeredWaveSpecifics invisibleWave;

		[Token(Token = "0x400112C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public TriggeredWaveSpecifics mouseOverWave;

		[Token(Token = "0x400112D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public TriggeredWaveSpecifics mouseClickWave;

		[Token(Token = "0x400112E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public TriggeredWaveSpecifics collisionWave;

		[Token(Token = "0x400112F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public TriggeredWaveSpecifics triggerEnterWave;

		[Token(Token = "0x4001130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public TriggeredWaveSpecifics triggerExitWave;

		[Token(Token = "0x4001131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public TriggeredWaveSpecifics spawnedWave;

		[Token(Token = "0x4001132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public TriggeredWaveSpecifics despawnedWave;

		[Token(Token = "0x4001133")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public TriggeredWaveSpecifics codeTriggeredWave1;

		[Token(Token = "0x4001134")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public TriggeredWaveSpecifics codeTriggeredWave2;

		[Token(Token = "0x4001135")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public TriggeredWaveSpecifics clickWave;

		[Token(Token = "0x4001136")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public TriggeredWaveSpecifics collision2dWave;

		[Token(Token = "0x4001137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public TriggeredWaveSpecifics triggerEnter2dWave;

		[Token(Token = "0x4001138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public TriggeredWaveSpecifics triggerExit2dWave;

		[Token(Token = "0x4001139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public List<TriggeredWaveSpecifics> userDefinedEventWaves;

		[Token(Token = "0x400113A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public TriggeredWaveSpecifics unitySliderChangedWave;

		[Token(Token = "0x400113B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public TriggeredWaveSpecifics unityButtonClickedWave;

		[Token(Token = "0x400113C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public TriggeredWaveSpecifics unityPointerDownWave;

		[Token(Token = "0x400113D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public TriggeredWaveSpecifics unityPointerUpWave;

		[Token(Token = "0x400113E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public TriggeredWaveSpecifics unityPointerEnterWave;

		[Token(Token = "0x400113F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public TriggeredWaveSpecifics unityPointerExitWave;

		[Token(Token = "0x4001140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public TriggeredWaveSpecifics unityDragWave;

		[Token(Token = "0x4001141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public TriggeredWaveSpecifics unityDropWave;

		[Token(Token = "0x4001142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public TriggeredWaveSpecifics unityScrollWave;

		[Token(Token = "0x4001143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public TriggeredWaveSpecifics unityUpdateSelectedWave;

		[Token(Token = "0x4001144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public TriggeredWaveSpecifics unitySelectWave;

		[Token(Token = "0x4001145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public TriggeredWaveSpecifics unityDeselectWave;

		[Token(Token = "0x4001146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public TriggeredWaveSpecifics unityMoveWave;

		[Token(Token = "0x4001147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public TriggeredWaveSpecifics unityInitializePotentialDragWave;

		[Token(Token = "0x4001148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public TriggeredWaveSpecifics unityBeginDragWave;

		[Token(Token = "0x4001149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public TriggeredWaveSpecifics unityEndDragWave;

		[Token(Token = "0x400114A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public TriggeredWaveSpecifics unitySubmitWave;

		[Token(Token = "0x400114B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public TriggeredWaveSpecifics unityCancelWave;

		[Token(Token = "0x400114C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private TriggeredWaveMetaData _enableWaveMeta;

		[Token(Token = "0x400114D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private TriggeredWaveMetaData _disableWaveMeta;

		[Token(Token = "0x400114E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private TriggeredWaveMetaData _visibleWaveMeta;

		[Token(Token = "0x400114F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private TriggeredWaveMetaData _invisibleWaveMeta;

		[Token(Token = "0x4001150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private TriggeredWaveMetaData _mouseOverWaveMeta;

		[Token(Token = "0x4001151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private TriggeredWaveMetaData _mouseClickWaveMeta;

		[Token(Token = "0x4001152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private TriggeredWaveMetaData _collisionWaveMeta;

		[Token(Token = "0x4001153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private TriggeredWaveMetaData _triggerEnterWaveMeta;

		[Token(Token = "0x4001154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private TriggeredWaveMetaData _triggerExitWaveMeta;

		[Token(Token = "0x4001155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private TriggeredWaveMetaData _spawnedWaveMeta;

		[Token(Token = "0x4001156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private TriggeredWaveMetaData _despawnedWaveMeta;

		[Token(Token = "0x4001157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private TriggeredWaveMetaData _codeTriggeredWave1Meta;

		[Token(Token = "0x4001158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private TriggeredWaveMetaData _codeTriggeredWave2Meta;

		[Token(Token = "0x4001159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private TriggeredWaveMetaData _clickWaveMeta;

		[Token(Token = "0x400115A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private TriggeredWaveMetaData _collision2DWaveMeta;

		[Token(Token = "0x400115B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private TriggeredWaveMetaData _triggerEnter2DWaveMeta;

		[Token(Token = "0x400115C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private TriggeredWaveMetaData _triggerExit2DWaveMeta;

		[Token(Token = "0x400115D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private readonly List<TriggeredWaveMetaData> _userDefinedEventWaveMeta;

		[Token(Token = "0x400115E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private TriggeredWaveMetaData _unitySliderChangedWaveMeta;

		[Token(Token = "0x400115F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private TriggeredWaveMetaData _unityButtonClickedWaveMeta;

		[Token(Token = "0x4001160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private TriggeredWaveMetaData _unityPointerDownWaveMeta;

		[Token(Token = "0x4001161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private TriggeredWaveMetaData _unityPointerUpWaveMeta;

		[Token(Token = "0x4001162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private TriggeredWaveMetaData _unityPointerEnterWaveMeta;

		[Token(Token = "0x4001163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private TriggeredWaveMetaData _unityPointerExitWaveMeta;

		[Token(Token = "0x4001164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private TriggeredWaveMetaData _unityDragWaveMeta;

		[Token(Token = "0x4001165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private TriggeredWaveMetaData _unityDropWaveMeta;

		[Token(Token = "0x4001166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private TriggeredWaveMetaData _unityScrollWaveMeta;

		[Token(Token = "0x4001167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private TriggeredWaveMetaData _unityUpdateSelectedWaveMeta;

		[Token(Token = "0x4001168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		private TriggeredWaveMetaData _unitySelectWaveMeta;

		[Token(Token = "0x4001169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private TriggeredWaveMetaData _unityDeselectWaveMeta;

		[Token(Token = "0x400116A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		private TriggeredWaveMetaData _unityMoveWaveMeta;

		[Token(Token = "0x400116B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private TriggeredWaveMetaData _unityInitializePotentialDragWaveMeta;

		[Token(Token = "0x400116C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		private TriggeredWaveMetaData _unityBeginDragWaveMeta;

		[Token(Token = "0x400116D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private TriggeredWaveMetaData _unityEndDragWaveMeta;

		[Token(Token = "0x400116E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		private TriggeredWaveMetaData _unitySubmitWaveMeta;

		[Token(Token = "0x400116F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private TriggeredWaveMetaData _unityCancelWaveMeta;

		[Token(Token = "0x4001170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private Button _button;

		[Token(Token = "0x4001171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private Slider _slider;

		[Token(Token = "0x4001172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private Transform _trans;

		[Token(Token = "0x4001173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private GameObject _go;

		[Token(Token = "0x4001174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		private bool _isVisible;

		[Token(Token = "0x4001175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private List<TriggeredSpawner> _childSpawners;

		[Token(Token = "0x4001176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		private readonly List<TriggeredWaveSpecifics> _allWaves;

		[Token(Token = "0x17000125")]
		public List<TriggeredWaveSpecifics> AllWaves
		{
			[Token(Token = "0x6001464")]
			[Address(RVA = "0x9FB7D0", Offset = "0x9FB7D0", VA = "0x9FB7D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000126")]
		public bool SpawnerIsPaused
		{
			[Token(Token = "0x6001465")]
			[Address(RVA = "0x9F0320", Offset = "0x9F0320", VA = "0x9F0320")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000127")]
		public bool GameIsOverForSpawner
		{
			[Token(Token = "0x6001466")]
			[Address(RVA = "0x9F0238", Offset = "0x9F0238", VA = "0x9F0238")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000128")]
		public bool IsVisible
		{
			[Token(Token = "0x6001467")]
			[Address(RVA = "0x9FBE14", Offset = "0x9FBE14", VA = "0x9FBE14")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000129")]
		public Transform Trans
		{
			[Token(Token = "0x6001468")]
			[Address(RVA = "0x9EFE44", Offset = "0x9EFE44", VA = "0x9EFE44")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012A")]
		private bool IsSetToUGUI
		{
			[Token(Token = "0x6001469")]
			[Address(RVA = "0x9ED2F0", Offset = "0x9ED2F0", VA = "0x9ED2F0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700012B")]
		private bool IsSetToLegacyUI
		{
			[Token(Token = "0x600146A")]
			[Address(RVA = "0x9F6794", Offset = "0x9F6794", VA = "0x9F6794")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700012C")]
		private bool HasActiveSpawningWave
		{
			[Token(Token = "0x600146B")]
			[Address(RVA = "0x9F0408", Offset = "0x9F0408", VA = "0x9F0408")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700012D")]
		public bool SpawnerIsActive
		{
			[Token(Token = "0x600146C")]
			[Address(RVA = "0x9F0638", Offset = "0x9F0638", VA = "0x9F0638")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60013FA")]
		[Address(RVA = "0x9ED1C0", Offset = "0x9ED1C0", VA = "0x9ED1C0")]
		private void Awake()
		{
		}

		[Token(Token = "0x60013FB")]
		[Address(RVA = "0x9ED604", Offset = "0x9ED604", VA = "0x9ED604")]
		private void Start()
		{
		}

		[Token(Token = "0x60013FC")]
		[Address(RVA = "0x9EFEF4", Offset = "0x9EFEF4", VA = "0x9EFEF4")]
		private void Update()
		{
		}

		[Token(Token = "0x60013FD")]
		[Address(RVA = "0x9F18C4", Offset = "0x9F18C4", VA = "0x9F18C4")]
		private void PropagateEventToChildSpawners(EventType eType)
		{
		}

		[Token(Token = "0x60013FE")]
		[Address(RVA = "0x9F1A5C", Offset = "0x9F1A5C", VA = "0x9F1A5C")]
		public void PropagateEventTrigger(EventType eType, Transform transmitterTrans, bool calledFromInspector = false)
		{
		}

		[Token(Token = "0x60013FF")]
		[Address(RVA = "0x9F1E00", Offset = "0x9F1E00", VA = "0x9F1E00")]
		public void ActivateCodeTriggeredEvent1()
		{
		}

		[Token(Token = "0x6001400")]
		[Address(RVA = "0x9F1F38", Offset = "0x9F1F38", VA = "0x9F1F38")]
		public void ActivateCodeTriggeredEvent2()
		{
		}

		[Token(Token = "0x6001401")]
		[Address(RVA = "0x9F5EAC", Offset = "0x9F5EAC", VA = "0x9F5EAC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001402")]
		[Address(RVA = "0x9F29C0", Offset = "0x9F29C0", VA = "0x9F29C0")]
		private void _EnableEvent(bool calledFromSelf)
		{
		}

		[Token(Token = "0x6001403")]
		[Address(RVA = "0x9F6540", Offset = "0x9F6540", VA = "0x9F6540")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001404")]
		[Address(RVA = "0x9F284C", Offset = "0x9F284C", VA = "0x9F284C")]
		private void _DisableEvent(bool calledFromSelf)
		{
		}

		[Token(Token = "0x6001405")]
		[Address(RVA = "0x9F6548", Offset = "0x9F6548", VA = "0x9F6548")]
		private void OnSpawned()
		{
		}

		[Token(Token = "0x6001406")]
		[Address(RVA = "0x9F2BC8", Offset = "0x9F2BC8", VA = "0x9F2BC8")]
		private void _OnSpawned(bool calledFromSelf)
		{
		}

		[Token(Token = "0x6001407")]
		[Address(RVA = "0x9F661C", Offset = "0x9F661C", VA = "0x9F661C")]
		private void OnDespawned()
		{
		}

		[Token(Token = "0x6001408")]
		[Address(RVA = "0x9F26EC", Offset = "0x9F26EC", VA = "0x9F26EC")]
		private void _OnDespawned(bool calledFromSelf)
		{
		}

		[Token(Token = "0x6001409")]
		[Address(RVA = "0x9F66DC", Offset = "0x9F66DC", VA = "0x9F66DC")]
		private void OnBecameVisible()
		{
		}

		[Token(Token = "0x600140A")]
		[Address(RVA = "0x9F2FC0", Offset = "0x9F2FC0", VA = "0x9F2FC0")]
		private void _OnBecameVisible(bool calledFromSelf)
		{
		}

		[Token(Token = "0x600140B")]
		[Address(RVA = "0x9F66F0", Offset = "0x9F66F0", VA = "0x9F66F0")]
		private void OnBecameInvisible()
		{
		}

		[Token(Token = "0x600140C")]
		[Address(RVA = "0x9F2070", Offset = "0x9F2070", VA = "0x9F2070")]
		private void _OnBecameInvisible(bool calledFromSelf)
		{
		}

		[Token(Token = "0x600140D")]
		[Address(RVA = "0x9F678C", Offset = "0x9F678C", VA = "0x9F678C")]
		private void OnMouseEnter()
		{
		}

		[Token(Token = "0x600140E")]
		[Address(RVA = "0x9F232C", Offset = "0x9F232C", VA = "0x9F232C")]
		private void _OnMouseEnter(bool calledFromSelf)
		{
		}

		[Token(Token = "0x600140F")]
		[Address(RVA = "0x9F67A4", Offset = "0x9F67A4", VA = "0x9F67A4")]
		private void OnMouseDown()
		{
		}

		[Token(Token = "0x6001410")]
		[Address(RVA = "0x9F21E4", Offset = "0x9F21E4", VA = "0x9F21E4")]
		private void _OnMouseDown(bool calledFromSelf)
		{
		}

		[Token(Token = "0x6001411")]
		[Address(RVA = "0x9F67AC", Offset = "0x9F67AC", VA = "0x9F67AC")]
		private void OnClick()
		{
		}

		[Token(Token = "0x6001412")]
		[Address(RVA = "0x9F2474", Offset = "0x9F2474", VA = "0x9F2474")]
		private void _OnClick(bool calledFromSelf)
		{
		}

		[Token(Token = "0x6001413")]
		[Address(RVA = "0x9F67B4", Offset = "0x9F67B4", VA = "0x9F67B4")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001414")]
		[Address(RVA = "0x9F25B0", Offset = "0x9F25B0", VA = "0x9F25B0")]
		private void _OnCollisionEnter(bool calledFromSelf)
		{
		}

		[Token(Token = "0x6001415")]
		[Address(RVA = "0x9F693C", Offset = "0x9F693C", VA = "0x9F693C")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001416")]
		[Address(RVA = "0x9F2D28", Offset = "0x9F2D28", VA = "0x9F2D28")]
		private void _OnTriggerEnter(bool calledFromSelf)
		{
		}

		[Token(Token = "0x6001417")]
		[Address(RVA = "0x9F6BD8", Offset = "0x9F6BD8", VA = "0x9F6BD8")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6001418")]
		[Address(RVA = "0x9F2E74", Offset = "0x9F2E74", VA = "0x9F2E74")]
		private void _OnTriggerExit(bool calledFromSelf)
		{
		}

		[Token(Token = "0x6001419")]
		[Address(RVA = "0x9F6E74", Offset = "0x9F6E74", VA = "0x9F6E74")]
		private void OnCollisionEnter2D(Collision2D collision)
		{
		}

		[Token(Token = "0x600141A")]
		[Address(RVA = "0x9F3128", Offset = "0x9F3128", VA = "0x9F3128")]
		private void _OnCollision2dEnter(bool calledFromSelf)
		{
		}

		[Token(Token = "0x600141B")]
		[Address(RVA = "0x9F6FFC", Offset = "0x9F6FFC", VA = "0x9F6FFC")]
		private void OnTriggerEnter2D(Collider2D other)
		{
		}

		[Token(Token = "0x600141C")]
		[Address(RVA = "0x9F3264", Offset = "0x9F3264", VA = "0x9F3264")]
		private void _OnTriggerEnter2D(bool calledFromSelf)
		{
		}

		[Token(Token = "0x600141D")]
		[Address(RVA = "0x9F7298", Offset = "0x9F7298", VA = "0x9F7298")]
		private void OnTriggerExit2D(Collider2D other)
		{
		}

		[Token(Token = "0x600141E")]
		[Address(RVA = "0x9F33B0", Offset = "0x9F33B0", VA = "0x9F33B0")]
		private void _OnTriggerExit2D(bool calledFromSelf)
		{
		}

		[Token(Token = "0x600141F")]
		[Address(RVA = "0x9F7534", Offset = "0x9F7534", VA = "0x9F7534")]
		public void OnPointerEnter(PointerEventData data)
		{
		}

		[Token(Token = "0x6001420")]
		[Address(RVA = "0x9F3A10", Offset = "0x9F3A10", VA = "0x9F3A10")]
		private void _OnPointerEnter(bool calledFromSelf)
		{
		}

		[Token(Token = "0x6001421")]
		[Address(RVA = "0x9F753C", Offset = "0x9F753C", VA = "0x9F753C")]
		public void OnPointerExit(PointerEventData data)
		{
		}

		[Token(Token = "0x6001422")]
		[Address(RVA = "0x9F3B54", Offset = "0x9F3B54", VA = "0x9F3B54")]
		private void _OnPointerExit(bool calledFromSelf)
		{
		}

		[Token(Token = "0x6001423")]
		[Address(RVA = "0x9F7544", Offset = "0x9F7544", VA = "0x9F7544")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x6001424")]
		[Address(RVA = "0x9F3788", Offset = "0x9F3788", VA = "0x9F3788")]
		private void _OnPointerDown(bool calledFromSelf)
		{
		}

		[Token(Token = "0x6001425")]
		[Address(RVA = "0x9F754C", Offset = "0x9F754C", VA = "0x9F754C")]
		public void OnPointerUp(PointerEventData data)
		{
		}

		[Token(Token = "0x6001426")]
		[Address(RVA = "0x9F38CC", Offset = "0x9F38CC", VA = "0x9F38CC")]
		private void _OnPointerUp(bool calledFromSelf)
		{
		}

		[Token(Token = "0x6001427")]
		[Address(RVA = "0x9F7554", Offset = "0x9F7554", VA = "0x9F7554")]
		public void OnDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6001428")]
		[Address(RVA = "0x9F3C98", Offset = "0x9F3C98", VA = "0x9F3C98")]
		private void _OnDrag(bool calledFromSelf)
		{
		}

		[Token(Token = "0x6001429")]
		[Address(RVA = "0x9F755C", Offset = "0x9F755C", VA = "0x9F755C")]
		public void OnDrop(PointerEventData data)
		{
		}

		[Token(Token = "0x600142A")]
		[Address(RVA = "0x9F3DDC", Offset = "0x9F3DDC", VA = "0x9F3DDC")]
		private void _OnDrop(bool calledFromSelf)
		{
		}

		[Token(Token = "0x600142B")]
		[Address(RVA = "0x9F7564", Offset = "0x9F7564", VA = "0x9F7564")]
		public void OnScroll(PointerEventData data)
		{
		}

		[Token(Token = "0x600142C")]
		[Address(RVA = "0x9F3F20", Offset = "0x9F3F20", VA = "0x9F3F20")]
		private void _OnScroll(bool calledFromSelf)
		{
		}

		[Token(Token = "0x600142D")]
		[Address(RVA = "0x9F756C", Offset = "0x9F756C", VA = "0x9F756C")]
		public void OnUpdateSelected(BaseEventData data)
		{
		}

		[Token(Token = "0x600142E")]
		[Address(RVA = "0x9F4064", Offset = "0x9F4064", VA = "0x9F4064")]
		private void _OnUpdateSelected(bool calledFromSelf)
		{
		}

		[Token(Token = "0x600142F")]
		[Address(RVA = "0x9F7574", Offset = "0x9F7574", VA = "0x9F7574")]
		public void OnSelect(BaseEventData data)
		{
		}

		[Token(Token = "0x6001430")]
		[Address(RVA = "0x9F41A8", Offset = "0x9F41A8", VA = "0x9F41A8")]
		private void _OnSelect(bool calledFromSelf)
		{
		}

		[Token(Token = "0x6001431")]
		[Address(RVA = "0x9F757C", Offset = "0x9F757C", VA = "0x9F757C")]
		public void OnDeselect(BaseEventData data)
		{
		}

		[Token(Token = "0x6001432")]
		[Address(RVA = "0x9F42EC", Offset = "0x9F42EC", VA = "0x9F42EC")]
		private void _OnDeselect(bool calledFromSelf)
		{
		}

		[Token(Token = "0x6001433")]
		[Address(RVA = "0x9F7584", Offset = "0x9F7584", VA = "0x9F7584")]
		public void OnMove(AxisEventData data)
		{
		}

		[Token(Token = "0x6001434")]
		[Address(RVA = "0x9F4430", Offset = "0x9F4430", VA = "0x9F4430")]
		private void _OnMove(bool calledFromSelf)
		{
		}

		[Token(Token = "0x6001435")]
		[Address(RVA = "0x9F758C", Offset = "0x9F758C", VA = "0x9F758C")]
		public void OnInitializePotentialDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6001436")]
		[Address(RVA = "0x9F4574", Offset = "0x9F4574", VA = "0x9F4574")]
		private void _OnInitializePotentialDrag(bool calledFromSelf)
		{
		}

		[Token(Token = "0x6001437")]
		[Address(RVA = "0x9F7594", Offset = "0x9F7594", VA = "0x9F7594")]
		public void OnBeginDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6001438")]
		[Address(RVA = "0x9F46B8", Offset = "0x9F46B8", VA = "0x9F46B8")]
		private void _OnBeginDrag(bool calledFromSelf)
		{
		}

		[Token(Token = "0x6001439")]
		[Address(RVA = "0x9F759C", Offset = "0x9F759C", VA = "0x9F759C")]
		public void OnEndDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x600143A")]
		[Address(RVA = "0x9F47FC", Offset = "0x9F47FC", VA = "0x9F47FC")]
		private void _OnEndDrag(bool calledFromSelf)
		{
		}

		[Token(Token = "0x600143B")]
		[Address(RVA = "0x9F75A4", Offset = "0x9F75A4", VA = "0x9F75A4")]
		public void OnSubmit(BaseEventData data)
		{
		}

		[Token(Token = "0x600143C")]
		[Address(RVA = "0x9F4940", Offset = "0x9F4940", VA = "0x9F4940")]
		private void _OnSubmit(bool calledFromSelf)
		{
		}

		[Token(Token = "0x600143D")]
		[Address(RVA = "0x9F75AC", Offset = "0x9F75AC", VA = "0x9F75AC")]
		public void OnCancel(BaseEventData data)
		{
		}

		[Token(Token = "0x600143E")]
		[Address(RVA = "0x9F4A84", Offset = "0x9F4A84", VA = "0x9F4A84")]
		private void _OnCancel(bool calledFromSelf)
		{
		}

		[Token(Token = "0x600143F")]
		[Address(RVA = "0x9F75B4", Offset = "0x9F75B4", VA = "0x9F75B4")]
		private void SliderChanged(float newValue)
		{
		}

		[Token(Token = "0x6001440")]
		[Address(RVA = "0x9F34FC", Offset = "0x9F34FC", VA = "0x9F34FC")]
		private void _SliderChanged(bool calledFromSelf)
		{
		}

		[Token(Token = "0x6001441")]
		[Address(RVA = "0x9F75BC", Offset = "0x9F75BC", VA = "0x9F75BC")]
		private void ButtonClicked()
		{
		}

		[Token(Token = "0x6001442")]
		[Address(RVA = "0x9F3640", Offset = "0x9F3640", VA = "0x9F3640")]
		private void _ButtonClicked(bool calledFromSelf)
		{
		}

		[Token(Token = "0x6001443")]
		[Address(RVA = "0x9F75C4", Offset = "0x9F75C4", VA = "0x9F75C4")]
		public static List<TriggeredSpawner> GetChildSpawners(Transform trans)
		{
			return null;
		}

		[Token(Token = "0x6001444")]
		[Address(RVA = "0x9F775C", Offset = "0x9F775C", VA = "0x9F775C")]
		public bool HasActiveWaveOfType(EventType eType, string customEventName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001445")]
		[Address(RVA = "0x9F6068", Offset = "0x9F6068", VA = "0x9F6068")]
		public void EndWave(EventType eType, string customEventName)
		{
		}

		[Token(Token = "0x6001446")]
		[Address(RVA = "0x9F7C84", Offset = "0x9F7C84", VA = "0x9F7C84")]
		public bool IsUsingPrefabPool(Transform poolTrans)
		{
			return default(bool);
		}

		[Token(Token = "0x6001447")]
		[Address(RVA = "0x9F8598", Offset = "0x9F8598", VA = "0x9F8598")]
		public void SpawnWaveVisual(TriggeredWaveSpecifics wave)
		{
		}

		[Token(Token = "0x6001448")]
		[Address(RVA = "0x9F8924", Offset = "0x9F8924", VA = "0x9F8924")]
		private static Vector3 GetSpawnPositionForVisualization(TriggeredWaveSpecifics wave, Vector3 pos, int itemSpawnedIndex)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001449")]
		[Address(RVA = "0x9F8E78", Offset = "0x9F8E78", VA = "0x9F8E78")]
		private static Quaternion GetSpawnRotationForVisualization(TriggeredWaveSpecifics wave, Transform spawner, int itemSpawnedIndex)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600144A")]
		[Address(RVA = "0x9F938C", Offset = "0x9F938C", VA = "0x9F938C")]
		private void AfterSpawnForVisualization(TriggeredWaveSpecifics wave, Transform spawnedTrans)
		{
		}

		[Token(Token = "0x600144B")]
		[Address(RVA = "0x9F9544", Offset = "0x9F9544", VA = "0x9F9544", Slot = "9")]
		protected virtual Transform SpawnWaveItem(Transform prefabToSpawn, Vector3 spawnPosition, Quaternion rotation)
		{
			return null;
		}

		[Token(Token = "0x600144C")]
		[Address(RVA = "0x9F9664", Offset = "0x9F9664", VA = "0x9F9664", Slot = "10")]
		protected virtual void DespawnSpawner()
		{
		}

		[Token(Token = "0x600144D")]
		[Address(RVA = "0x9F96EC", Offset = "0x9F96EC", VA = "0x9F96EC", Slot = "11")]
		protected virtual void SpawnedOrAwake()
		{
		}

		[Token(Token = "0x600144E")]
		[Address(RVA = "0x9F9794", Offset = "0x9F9794", VA = "0x9F9794", Slot = "12")]
		protected virtual Transform GetSpawnable(TriggeredWaveMetaData wave)
		{
			return null;
		}

		[Token(Token = "0x600144F")]
		[Address(RVA = "0x9F980C", Offset = "0x9F980C", VA = "0x9F980C", Slot = "13")]
		protected virtual bool CanSpawnOne()
		{
			return default(bool);
		}

		[Token(Token = "0x6001450")]
		[Address(RVA = "0x9F9814", Offset = "0x9F9814", VA = "0x9F9814", Slot = "14")]
		protected virtual Vector3 GetSpawnPosition(Vector3 pos, int itemSpawnedIndex, TriggeredWaveMetaData wave)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001451")]
		[Address(RVA = "0x9F9F2C", Offset = "0x9F9F2C", VA = "0x9F9F2C", Slot = "15")]
		protected virtual Quaternion GetSpawnRotation(Transform prefabToSpawn, int itemSpawnedIndex, TriggeredWaveMetaData wave)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001452")]
		[Address(RVA = "0x9FA4F8", Offset = "0x9FA4F8", VA = "0x9FA4F8", Slot = "16")]
		protected virtual void AfterSpawn(Transform spawnedTrans, TriggeredWaveMetaData wave, EventType eType)
		{
		}

		[Token(Token = "0x6001453")]
		[Address(RVA = "0x9FA8D4", Offset = "0x9FA8D4", VA = "0x9FA8D4", Slot = "17")]
		public virtual void CheckForIllegalCustomEvents()
		{
		}

		[Token(Token = "0x6001454")]
		[Address(RVA = "0x9FAC74", Offset = "0x9FAC74", VA = "0x9FAC74", Slot = "18")]
		public virtual void ReceiveEvent(string customEventName, Vector3 eventOrigin)
		{
		}

		[Token(Token = "0x6001455")]
		[Address(RVA = "0x9FB000", Offset = "0x9FB000", VA = "0x9FB000", Slot = "19")]
		public virtual bool SubscribesToEvent(string customEventName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001456")]
		[Address(RVA = "0x9FB100", Offset = "0x9FB100", VA = "0x9FB100", Slot = "20")]
		public virtual void RegisterReceiver()
		{
		}

		[Token(Token = "0x6001457")]
		[Address(RVA = "0x9FB1AC", Offset = "0x9FB1AC", VA = "0x9FB1AC", Slot = "21")]
		public virtual void UnregisterReceiver()
		{
		}

		[Token(Token = "0x6001458")]
		[Address(RVA = "0x9ED300", Offset = "0x9ED300", VA = "0x9ED300")]
		private void AddUGUIComponents()
		{
		}

		[Token(Token = "0x6001459")]
		private void AddUGUIHandler<T>(bool useEvent) where T : TriggeredSpawnerUGUIHandler
		{
		}

		[Token(Token = "0x600145A")]
		[Address(RVA = "0x9F4BC8", Offset = "0x9F4BC8", VA = "0x9F4BC8")]
		private bool IsWaveValid(TriggeredWaveSpecifics wave, EventType eType, bool calledFromSelf)
		{
			return default(bool);
		}

		[Token(Token = "0x600145B")]
		[Address(RVA = "0x9FB248", Offset = "0x9FB248", VA = "0x9FB248")]
		private bool CanRepeatWave(TriggeredWaveMetaData wave)
		{
			return default(bool);
		}

		[Token(Token = "0x600145C")]
		[Address(RVA = "0x9F7AE8", Offset = "0x9F7AE8", VA = "0x9F7AE8")]
		private void PropagateEndWaveToChildSpawners(EventType eType, string customEventName)
		{
		}

		[Token(Token = "0x600145D")]
		[Address(RVA = "0x9F09A8", Offset = "0x9F09A8", VA = "0x9F09A8")]
		private void SpawnFromWaveMeta(TriggeredWaveMetaData wave, EventType eType)
		{
		}

		[Token(Token = "0x600145E")]
		[Address(RVA = "0x9FB6CC", Offset = "0x9FB6CC", VA = "0x9FB6CC")]
		private void AfterSpawnWave(TriggeredWaveMetaData newWave)
		{
		}

		[Token(Token = "0x600145F")]
		[Address(RVA = "0x9F4F24", Offset = "0x9F4F24", VA = "0x9F4F24")]
		private bool SetupNextWave(TriggeredWaveSpecifics newWave, EventType eventType, int repetitionNumber = 0, int repetitionNumberWithReset = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x6001460")]
		[Address(RVA = "0x9FA978", Offset = "0x9FA978", VA = "0x9FA978")]
		private void LogIfCustomEventMissing(TriggeredWaveSpecifics eventGroup)
		{
		}

		[Token(Token = "0x6001461")]
		[Address(RVA = "0x9ED948", Offset = "0x9ED948", VA = "0x9ED948")]
		private void CheckForValidVariablesForWave(TriggeredWaveSpecifics wave, EventType eType)
		{
		}

		[Token(Token = "0x6001462")]
		[Address(RVA = "0x9F8534", Offset = "0x9F8534", VA = "0x9F8534")]
		private static bool WaveIsUsingPrefabPool(TriggeredWaveSpecifics spec, string poolName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001463")]
		[Address(RVA = "0x9F66F8", Offset = "0x9F66F8", VA = "0x9F66F8")]
		private void StopOppositeWaveIfActive(TriggeredWaveSpecifics wave, EventType eType)
		{
		}

		[Token(Token = "0x600146D")]
		[Address(RVA = "0x9FBE1C", Offset = "0x9FBE1C", VA = "0x9FBE1C")]
		public TriggeredSpawner()
		{
		}
	}
	[Token(Token = "0x2000309")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x3965E4", Offset = "0x3965E4")]
	public class TriggeredSpawnerListener : MonoBehaviour
	{
		[Token(Token = "0x4001177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string sourceSpawnerName;

		[Token(Token = "0x600146F")]
		[Address(RVA = "0xE82D70", Offset = "0xE82D70", VA = "0xE82D70")]
		private void Reset()
		{
		}

		[Token(Token = "0x6001470")]
		[Address(RVA = "0xE82E34", Offset = "0xE82E34", VA = "0xE82E34", Slot = "4")]
		public virtual void EventPropagating(TriggeredSpawner.EventType eType, Transform transmitterTrans, int receiverSpawnerCount)
		{
		}

		[Token(Token = "0x6001471")]
		[Address(RVA = "0xE82E38", Offset = "0xE82E38", VA = "0xE82E38", Slot = "5")]
		public virtual void PropagatedEventReceived(TriggeredSpawner.EventType eType, Transform transmitterTrans)
		{
		}

		[Token(Token = "0x6001472")]
		[Address(RVA = "0xE82E3C", Offset = "0xE82E3C", VA = "0xE82E3C", Slot = "6")]
		public virtual void WaveEndedEarly(TriggeredSpawner.EventType eType)
		{
		}

		[Token(Token = "0x6001473")]
		[Address(RVA = "0xE82E40", Offset = "0xE82E40", VA = "0xE82E40", Slot = "7")]
		public virtual void PropagatedWaveEndedEarly(TriggeredSpawner.EventType eType, string customEventName, Transform transmitterTrans, int receiverSpawnerCount)
		{
		}

		[Token(Token = "0x6001474")]
		[Address(RVA = "0xE82E44", Offset = "0xE82E44", VA = "0xE82E44", Slot = "8")]
		public virtual void ItemFailedToSpawn(TriggeredSpawner.EventType eType, Transform failedPrefabTrans)
		{
		}

		[Token(Token = "0x6001475")]
		[Address(RVA = "0xE82E48", Offset = "0xE82E48", VA = "0xE82E48", Slot = "9")]
		public virtual void ItemSpawned(TriggeredSpawner.EventType eType, Transform spawnedTrans)
		{
		}

		[Token(Token = "0x6001476")]
		[Address(RVA = "0xE82E4C", Offset = "0xE82E4C", VA = "0xE82E4C", Slot = "10")]
		public virtual void WaveFinishedSpawning(TriggeredSpawner.EventType eType, TriggeredWaveSpecifics spec)
		{
		}

		[Token(Token = "0x6001477")]
		[Address(RVA = "0xE82E50", Offset = "0xE82E50", VA = "0xE82E50", Slot = "11")]
		public virtual void WaveEliminated(TriggeredSpawner.EventType eType, TriggeredWaveSpecifics spec)
		{
		}

		[Token(Token = "0x6001478")]
		[Address(RVA = "0xE82E54", Offset = "0xE82E54", VA = "0xE82E54", Slot = "12")]
		public virtual void WaveStart(TriggeredSpawner.EventType eType, TriggeredWaveSpecifics spec)
		{
		}

		[Token(Token = "0x6001479")]
		[Address(RVA = "0xE82E58", Offset = "0xE82E58", VA = "0xE82E58", Slot = "13")]
		public virtual void WaveRepeat(TriggeredSpawner.EventType eType, TriggeredWaveSpecifics spec)
		{
		}

		[Token(Token = "0x600147A")]
		[Address(RVA = "0xE82E5C", Offset = "0xE82E5C", VA = "0xE82E5C", Slot = "14")]
		public virtual void SpawnerDespawning(Transform transDespawning)
		{
		}

		[Token(Token = "0x600147B")]
		[Address(RVA = "0xE82E60", Offset = "0xE82E60", VA = "0xE82E60", Slot = "15")]
		public virtual void CustomEventReceived(string customEventName, Vector3 eventOrigin)
		{
		}

		[Token(Token = "0x600147C")]
		[Address(RVA = "0xE82E64", Offset = "0xE82E64", VA = "0xE82E64", Slot = "16")]
		public virtual void Spawned(MonoBehaviour spawner)
		{
		}

		[Token(Token = "0x600147D")]
		[Address(RVA = "0xE82E68", Offset = "0xE82E68", VA = "0xE82E68", Slot = "17")]
		public virtual void Despawned(MonoBehaviour spawner)
		{
		}

		[Token(Token = "0x600147E")]
		[Address(RVA = "0xE82E6C", Offset = "0xE82E6C", VA = "0xE82E6C")]
		public TriggeredSpawnerListener()
		{
		}
	}
	[Token(Token = "0x200030A")]
	[AttributeAttribute(Name = "CoreScriptOrder", RVA = "0x396618", Offset = "0x396618")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x396618", Offset = "0x396618")]
	public class TriggeredSpawnerV2 : MonoBehaviour, ICgkEventReceiver
	{
		[Token(Token = "0x20003B4")]
		public enum RepeatWaitFor
		{
			[Token(Token = "0x40014A0")]
			ItemsDoneSpawning,
			[Token(Token = "0x40014A1")]
			ItemsEliminated
		}

		[Token(Token = "0x20003B5")]
		public class TriggeredSpawnerUGUIHandler : MonoBehaviour
		{
			[Token(Token = "0x40014A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x3979CC", Offset = "0x3979CC")]
			private TriggeredSpawnerV2 <trigSpawner>k__BackingField;

			[Token(Token = "0x17000176")]
			public TriggeredSpawnerV2 trigSpawner
			{
				[Token(Token = "0x600171F")]
				[Address(RVA = "0xE96474", Offset = "0xE96474", VA = "0xE96474")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39918C", Offset = "0x39918C")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001720")]
				[Address(RVA = "0xE9647C", Offset = "0xE9647C", VA = "0xE9647C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x39919C", Offset = "0x39919C")]
				set
				{
				}
			}

			[Token(Token = "0x6001721")]
			[Address(RVA = "0xE95ACC", Offset = "0xE95ACC", VA = "0xE95ACC")]
			public TriggeredSpawnerUGUIHandler()
			{
			}
		}

		[Token(Token = "0x20003B6")]
		public class TriggeredSpawnerPointerEnterHandler : TriggeredSpawnerUGUIHandler, IPointerEnterHandler, IEventSystemHandler
		{
			[Token(Token = "0x6001722")]
			[Address(RVA = "0xE96054", Offset = "0xE96054", VA = "0xE96054", Slot = "4")]
			public void OnPointerEnter(PointerEventData data)
			{
			}

			[Token(Token = "0x6001723")]
			[Address(RVA = "0xE960FC", Offset = "0xE960FC", VA = "0xE960FC")]
			public TriggeredSpawnerPointerEnterHandler()
			{
			}
		}

		[Token(Token = "0x20003B7")]
		public class TriggeredSpawnerPointerExitHandler : TriggeredSpawnerUGUIHandler, IPointerExitHandler, IEventSystemHandler
		{
			[Token(Token = "0x6001724")]
			[Address(RVA = "0xE96104", Offset = "0xE96104", VA = "0xE96104", Slot = "4")]
			public void OnPointerExit(PointerEventData data)
			{
			}

			[Token(Token = "0x6001725")]
			[Address(RVA = "0xE961AC", Offset = "0xE961AC", VA = "0xE961AC")]
			public TriggeredSpawnerPointerExitHandler()
			{
			}
		}

		[Token(Token = "0x20003B8")]
		public class TriggeredSpawnerPointerDownHandler : TriggeredSpawnerUGUIHandler, IPointerDownHandler, IEventSystemHandler
		{
			[Token(Token = "0x6001726")]
			[Address(RVA = "0xE95FA4", Offset = "0xE95FA4", VA = "0xE95FA4", Slot = "4")]
			public void OnPointerDown(PointerEventData data)
			{
			}

			[Token(Token = "0x6001727")]
			[Address(RVA = "0xE9604C", Offset = "0xE9604C", VA = "0xE9604C")]
			public TriggeredSpawnerPointerDownHandler()
			{
			}
		}

		[Token(Token = "0x20003B9")]
		public class TriggeredSpawnerPointerUpHandler : TriggeredSpawnerUGUIHandler, IPointerUpHandler, IEventSystemHandler
		{
			[Token(Token = "0x6001728")]
			[Address(RVA = "0xE961B4", Offset = "0xE961B4", VA = "0xE961B4", Slot = "4")]
			public void OnPointerUp(PointerEventData data)
			{
			}

			[Token(Token = "0x6001729")]
			[Address(RVA = "0xE9625C", Offset = "0xE9625C", VA = "0xE9625C")]
			public TriggeredSpawnerPointerUpHandler()
			{
			}
		}

		[Token(Token = "0x20003BA")]
		public class TriggeredSpawnerDragHandler : TriggeredSpawnerUGUIHandler, IDragHandler, IEventSystemHandler
		{
			[Token(Token = "0x600172A")]
			[Address(RVA = "0xE95C34", Offset = "0xE95C34", VA = "0xE95C34", Slot = "4")]
			public void OnDrag(PointerEventData data)
			{
			}

			[Token(Token = "0x600172B")]
			[Address(RVA = "0xE95CDC", Offset = "0xE95CDC", VA = "0xE95CDC")]
			public TriggeredSpawnerDragHandler()
			{
			}
		}

		[Token(Token = "0x20003BB")]
		public class TriggeredSpawnerDropHandler : TriggeredSpawnerUGUIHandler, IDropHandler, IEventSystemHandler
		{
			[Token(Token = "0x600172C")]
			[Address(RVA = "0xE95CE4", Offset = "0xE95CE4", VA = "0xE95CE4", Slot = "4")]
			public void OnDrop(PointerEventData data)
			{
			}

			[Token(Token = "0x600172D")]
			[Address(RVA = "0xE95D8C", Offset = "0xE95D8C", VA = "0xE95D8C")]
			public TriggeredSpawnerDropHandler()
			{
			}
		}

		[Token(Token = "0x20003BC")]
		public class TriggeredSpawnerScrollHandler : TriggeredSpawnerUGUIHandler, IScrollHandler, IEventSystemHandler
		{
			[Token(Token = "0x600172E")]
			[Address(RVA = "0xE96264", Offset = "0xE96264", VA = "0xE96264", Slot = "4")]
			public void OnScroll(PointerEventData data)
			{
			}

			[Token(Token = "0x600172F")]
			[Address(RVA = "0xE9630C", Offset = "0xE9630C", VA = "0xE9630C")]
			public TriggeredSpawnerScrollHandler()
			{
			}
		}

		[Token(Token = "0x20003BD")]
		public class TriggeredSpawnerUpdateSelectedHandler : TriggeredSpawnerUGUIHandler, IUpdateSelectedHandler, IEventSystemHandler
		{
			[Token(Token = "0x6001730")]
			[Address(RVA = "0xE96484", Offset = "0xE96484", VA = "0xE96484", Slot = "4")]
			public void OnUpdateSelected(BaseEventData data)
			{
			}

			[Token(Token = "0x6001731")]
			[Address(RVA = "0xE9652C", Offset = "0xE9652C", VA = "0xE9652C")]
			public TriggeredSpawnerUpdateSelectedHandler()
			{
			}
		}

		[Token(Token = "0x20003BE")]
		public class TriggeredSpawnerSelectHandler : TriggeredSpawnerUGUIHandler, ISelectHandler, IEventSystemHandler
		{
			[Token(Token = "0x6001732")]
			[Address(RVA = "0xE96314", Offset = "0xE96314", VA = "0xE96314", Slot = "4")]
			public void OnSelect(BaseEventData data)
			{
			}

			[Token(Token = "0x6001733")]
			[Address(RVA = "0xE963BC", Offset = "0xE963BC", VA = "0xE963BC")]
			public TriggeredSpawnerSelectHandler()
			{
			}
		}

		[Token(Token = "0x20003BF")]
		public class TriggeredSpawnerDeselectHandler : TriggeredSpawnerUGUIHandler, IDeselectHandler, IEventSystemHandler
		{
			[Token(Token = "0x6001734")]
			[Address(RVA = "0xE95B84", Offset = "0xE95B84", VA = "0xE95B84", Slot = "4")]
			public void OnDeselect(BaseEventData data)
			{
			}

			[Token(Token = "0x6001735")]
			[Address(RVA = "0xE95C2C", Offset = "0xE95C2C", VA = "0xE95C2C")]
			public TriggeredSpawnerDeselectHandler()
			{
			}
		}

		[Token(Token = "0x20003C0")]
		public class TriggeredSpawnerMoveHandler : TriggeredSpawnerUGUIHandler, IMoveHandler, IEventSystemHandler
		{
			[Token(Token = "0x6001736")]
			[Address(RVA = "0xE95EF4", Offset = "0xE95EF4", VA = "0xE95EF4", Slot = "4")]
			public void OnMove(AxisEventData data)
			{
			}

			[Token(Token = "0x6001737")]
			[Address(RVA = "0xE95F9C", Offset = "0xE95F9C", VA = "0xE95F9C")]
			public TriggeredSpawnerMoveHandler()
			{
			}
		}

		[Token(Token = "0x20003C1")]
		public class TriggeredSpawnerInitializePotentialDragHandler : TriggeredSpawnerUGUIHandler, IInitializePotentialDragHandler, IEventSystemHandler
		{
			[Token(Token = "0x6001738")]
			[Address(RVA = "0xE95E44", Offset = "0xE95E44", VA = "0xE95E44", Slot = "4")]
			public void OnInitializePotentialDrag(PointerEventData data)
			{
			}

			[Token(Token = "0x6001739")]
			[Address(RVA = "0xE95EEC", Offset = "0xE95EEC", VA = "0xE95EEC")]
			public TriggeredSpawnerInitializePotentialDragHandler()
			{
			}
		}

		[Token(Token = "0x20003C2")]
		public class TriggeredSpawnerBeginDragHandler : TriggeredSpawnerUGUIHandler, IBeginDragHandler, IEventSystemHandler
		{
			[Token(Token = "0x600173A")]
			[Address(RVA = "0xE95A1C", Offset = "0xE95A1C", VA = "0xE95A1C", Slot = "4")]
			public void OnBeginDrag(PointerEventData data)
			{
			}

			[Token(Token = "0x600173B")]
			[Address(RVA = "0xE95AC4", Offset = "0xE95AC4", VA = "0xE95AC4")]
			public TriggeredSpawnerBeginDragHandler()
			{
			}
		}

		[Token(Token = "0x20003C3")]
		public class TriggeredSpawnerEndDragHandler : TriggeredSpawnerUGUIHandler, IEndDragHandler, IEventSystemHandler
		{
			[Token(Token = "0x600173C")]
			[Address(RVA = "0xE95D94", Offset = "0xE95D94", VA = "0xE95D94", Slot = "4")]
			public void OnEndDrag(PointerEventData data)
			{
			}

			[Token(Token = "0x600173D")]
			[Address(RVA = "0xE95E3C", Offset = "0xE95E3C", VA = "0xE95E3C")]
			public TriggeredSpawnerEndDragHandler()
			{
			}
		}

		[Token(Token = "0x20003C4")]
		public class TriggeredSpawnerSubmitHandler : TriggeredSpawnerUGUIHandler, ISubmitHandler, IEventSystemHandler
		{
			[Token(Token = "0x600173E")]
			[Address(RVA = "0xE963C4", Offset = "0xE963C4", VA = "0xE963C4", Slot = "4")]
			public void OnSubmit(BaseEventData data)
			{
			}

			[Token(Token = "0x600173F")]
			[Address(RVA = "0xE9646C", Offset = "0xE9646C", VA = "0xE9646C")]
			public TriggeredSpawnerSubmitHandler()
			{
			}
		}

		[Token(Token = "0x20003C5")]
		public class TriggeredSpawnerCancelHandler : TriggeredSpawnerUGUIHandler, ICancelHandler, IEventSystemHandler
		{
			[Token(Token = "0x6001740")]
			[Address(RVA = "0xE95AD4", Offset = "0xE95AD4", VA = "0xE95AD4", Slot = "4")]
			public void OnCancel(BaseEventData data)
			{
			}

			[Token(Token = "0x6001741")]
			[Address(RVA = "0xE95B7C", Offset = "0xE95B7C", VA = "0xE95B7C")]
			public TriggeredSpawnerCancelHandler()
			{
			}
		}

		[Token(Token = "0x4001178")]
		public const int MaxDistance = 5000;

		[Token(Token = "0x4001179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public TriggeredSpawner.Unity_UIVersion unityUIMode;

		[Token(Token = "0x400117A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static List<TriggeredSpawner.EventType> eventsThatCanRepeatWave;

		[Token(Token = "0x400117B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static List<TriggeredSpawner.EventType> eventsWithTagLayerFilters;

		[Token(Token = "0x400117C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static List<TriggeredSpawner.EventType> eventsWithInflexibleWaveLength;

		[Token(Token = "0x400117D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static List<TriggeredSpawner.EventType> eventsThatCanTriggerDespawn;

		[Token(Token = "0x400117E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool logMissingEvents;

		[Token(Token = "0x400117F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public LevelSettings.ActiveItemMode activeMode;

		[Token(Token = "0x4001180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public WorldVariableRangeCollection activeItemCriteria;

		[Token(Token = "0x4001181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TriggeredSpawner.GameOverBehavior gameOverBehavior;

		[Token(Token = "0x4001182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TriggeredSpawner.WavePauseBehavior wavePauseBehavior;

		[Token(Token = "0x4001183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public TriggeredSpawner.SpawnerEventSource eventSourceType;

		[Token(Token = "0x4001184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool transmitEventsToChildren;

		[Token(Token = "0x4001185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool spawnOutsidePool;

		[Token(Token = "0x4001186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public WaveSyncroPrefabSpawner.SpawnLayerTagMode spawnLayerMode;

		[Token(Token = "0x4001187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public WaveSyncroPrefabSpawner.SpawnLayerTagMode spawnTagMode;

		[Token(Token = "0x4001188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int spawnCustomLayer;

		[Token(Token = "0x4001189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string spawnCustomTag;

		[Token(Token = "0x400118A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool applyLayerRecursively;

		[Token(Token = "0x400118B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public TriggeredSpawnerListener listener;

		[Token(Token = "0x400118C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public List<TriggeredWaveSpecifics> enableWaves;

		[Token(Token = "0x400118D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<TriggeredWaveSpecifics> disableWaves;

		[Token(Token = "0x400118E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public List<TriggeredWaveSpecifics> visibleWaves;

		[Token(Token = "0x400118F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<TriggeredWaveSpecifics> invisibleWaves;

		[Token(Token = "0x4001190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public List<TriggeredWaveSpecifics> mouseOverWaves;

		[Token(Token = "0x4001191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<TriggeredWaveSpecifics> mouseClickWaves;

		[Token(Token = "0x4001192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public List<TriggeredWaveSpecifics> collisionWaves;

		[Token(Token = "0x4001193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<TriggeredWaveSpecifics> triggerEnterWaves;

		[Token(Token = "0x4001194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public List<TriggeredWaveSpecifics> triggerStayWaves;

		[Token(Token = "0x4001195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public List<TriggeredWaveSpecifics> triggerExitWaves;

		[Token(Token = "0x4001196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public List<TriggeredWaveSpecifics> spawnedWaves;

		[Token(Token = "0x4001197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public List<TriggeredWaveSpecifics> despawnedWaves;

		[Token(Token = "0x4001198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public List<TriggeredWaveSpecifics> codeTriggeredWaves1;

		[Token(Token = "0x4001199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public List<TriggeredWaveSpecifics> codeTriggeredWaves2;

		[Token(Token = "0x400119A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public List<TriggeredWaveSpecifics> clickWaves;

		[Token(Token = "0x400119B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public List<TriggeredWaveSpecifics> collision2dWaves;

		[Token(Token = "0x400119C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public List<TriggeredWaveSpecifics> triggerEnter2dWaves;

		[Token(Token = "0x400119D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public List<TriggeredWaveSpecifics> triggerStay2dWaves;

		[Token(Token = "0x400119E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public List<TriggeredWaveSpecifics> triggerExit2dWaves;

		[Token(Token = "0x400119F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public List<TriggeredWaveSpecifics> userDefinedEventWaves;

		[Token(Token = "0x40011A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public List<TriggeredWaveSpecifics> unitySliderChangedWaves;

		[Token(Token = "0x40011A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public List<TriggeredWaveSpecifics> unityButtonClickedWaves;

		[Token(Token = "0x40011A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public List<TriggeredWaveSpecifics> unityPointerDownWaves;

		[Token(Token = "0x40011A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public List<TriggeredWaveSpecifics> unityPointerUpWaves;

		[Token(Token = "0x40011A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public List<TriggeredWaveSpecifics> unityPointerEnterWaves;

		[Token(Token = "0x40011A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public List<TriggeredWaveSpecifics> unityPointerExitWaves;

		[Token(Token = "0x40011A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public List<TriggeredWaveSpecifics> unityDragWaves;

		[Token(Token = "0x40011A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public List<TriggeredWaveSpecifics> unityDropWaves;

		[Token(Token = "0x40011A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public List<TriggeredWaveSpecifics> unityScrollWaves;

		[Token(Token = "0x40011A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public List<TriggeredWaveSpecifics> unityUpdateSelectedWaves;

		[Token(Token = "0x40011AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public List<TriggeredWaveSpecifics> unitySelectWaves;

		[Token(Token = "0x40011AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public List<TriggeredWaveSpecifics> unityDeselectWaves;

		[Token(Token = "0x40011AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public List<TriggeredWaveSpecifics> unityMoveWaves;

		[Token(Token = "0x40011AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public List<TriggeredWaveSpecifics> unityInitializePotentialDragWaves;

		[Token(Token = "0x40011AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public List<TriggeredWaveSpecifics> unityBeginDragWaves;

		[Token(Token = "0x40011AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public List<TriggeredWaveSpecifics> unityEndDragWaves;

		[Token(Token = "0x40011B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public List<TriggeredWaveSpecifics> unitySubmitWaves;

		[Token(Token = "0x40011B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public List<TriggeredWaveSpecifics> unityCancelWaves;

		[Token(Token = "0x40011B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private TriggeredWaveMetaData _enableWaveMeta;

		[Token(Token = "0x40011B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private TriggeredWaveMetaData _disableWaveMeta;

		[Token(Token = "0x40011B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private TriggeredWaveMetaData _visibleWaveMeta;

		[Token(Token = "0x40011B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private TriggeredWaveMetaData _invisibleWaveMeta;

		[Token(Token = "0x40011B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private TriggeredWaveMetaData _mouseOverWaveMeta;

		[Token(Token = "0x40011B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private TriggeredWaveMetaData _mouseClickWaveMeta;

		[Token(Token = "0x40011B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private TriggeredWaveMetaData _collisionWaveMeta;

		[Token(Token = "0x40011B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private TriggeredWaveMetaData _triggerEnterWaveMeta;

		[Token(Token = "0x40011BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private TriggeredWaveMetaData _triggerStayWaveMeta;

		[Token(Token = "0x40011BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private TriggeredWaveMetaData _triggerExitWaveMeta;

		[Token(Token = "0x40011BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private TriggeredWaveMetaData _spawnedWaveMeta;

		[Token(Token = "0x40011BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private TriggeredWaveMetaData _despawnedWaveMeta;

		[Token(Token = "0x40011BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private TriggeredWaveMetaData _codeTriggeredWave1Meta;

		[Token(Token = "0x40011BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private TriggeredWaveMetaData _codeTriggeredWave2Meta;

		[Token(Token = "0x40011C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private TriggeredWaveMetaData _clickWaveMeta;

		[Token(Token = "0x40011C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private TriggeredWaveMetaData _collision2DWaveMeta;

		[Token(Token = "0x40011C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private TriggeredWaveMetaData _triggerEnter2DWaveMeta;

		[Token(Token = "0x40011C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private TriggeredWaveMetaData _triggerStay2DWaveMeta;

		[Token(Token = "0x40011C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private TriggeredWaveMetaData _triggerExit2DWaveMeta;

		[Token(Token = "0x40011C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private readonly List<TriggeredWaveMetaData> _userDefinedEventWaveMeta;

		[Token(Token = "0x40011C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private TriggeredWaveMetaData _unitySliderChangedWaveMeta;

		[Token(Token = "0x40011C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private TriggeredWaveMetaData _unityButtonClickedWaveMeta;

		[Token(Token = "0x40011C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private TriggeredWaveMetaData _unityPointerDownWaveMeta;

		[Token(Token = "0x40011C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private TriggeredWaveMetaData _unityPointerUpWaveMeta;

		[Token(Token = "0x40011CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private TriggeredWaveMetaData _unityPointerEnterWaveMeta;

		[Token(Token = "0x40011CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private TriggeredWaveMetaData _unityPointerExitWaveMeta;

		[Token(Token = "0x40011CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		private TriggeredWaveMetaData _unityDragWaveMeta;

		[Token(Token = "0x40011CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private TriggeredWaveMetaData _unityDropWaveMeta;

		[Token(Token = "0x40011CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		private TriggeredWaveMetaData _unityScrollWaveMeta;

		[Token(Token = "0x40011CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private TriggeredWaveMetaData _unityUpdateSelectedWaveMeta;

		[Token(Token = "0x40011D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		private TriggeredWaveMetaData _unitySelectWaveMeta;

		[Token(Token = "0x40011D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private TriggeredWaveMetaData _unityDeselectWaveMeta;

		[Token(Token = "0x40011D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		private TriggeredWaveMetaData _unityMoveWaveMeta;

		[Token(Token = "0x40011D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private TriggeredWaveMetaData _unityInitializePotentialDragWaveMeta;

		[Token(Token = "0x40011D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private TriggeredWaveMetaData _unityBeginDragWaveMeta;

		[Token(Token = "0x40011D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private TriggeredWaveMetaData _unityEndDragWaveMeta;

		[Token(Token = "0x40011D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private TriggeredWaveMetaData _unitySubmitWaveMeta;

		[Token(Token = "0x40011D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private TriggeredWaveMetaData _unityCancelWaveMeta;

		[Token(Token = "0x40011D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		private Button _button;

		[Token(Token = "0x40011D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private Slider _slider;

		[Token(Token = "0x40011DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		private Transform _trans;

		[Token(Token = "0x40011DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private GameObject _go;

		[Token(Token = "0x40011DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		private bool _isVisible;

		[Token(Token = "0x40011DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private List<TriggeredSpawnerV2> _childSpawners;

		[Token(Token = "0x40011DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		private Dictionary<TriggeredSpawner.EventType, List<TriggeredWaveSpecifics>> _allWaves;

		[Token(Token = "0x40011DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private float? _triggerEnterTime;

		[Token(Token = "0x40011E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private float? _triggerEnter2dTime;

		[Token(Token = "0x1700012E")]
		public List<TrigSpawnerWaiterSpecifics> ActiveEliminationWaves
		{
			[Token(Token = "0x60014F8")]
			[Address(RVA = "0xE941DC", Offset = "0xE941DC", VA = "0xE941DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012F")]
		public Dictionary<TriggeredSpawner.EventType, List<TriggeredWaveSpecifics>> AllWaves
		{
			[Token(Token = "0x60014F9")]
			[Address(RVA = "0xE94580", Offset = "0xE94580", VA = "0xE94580")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000130")]
		public bool SpawnerIsPaused
		{
			[Token(Token = "0x60014FA")]
			[Address(RVA = "0xE86314", Offset = "0xE86314", VA = "0xE86314")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000131")]
		public bool GameIsOverForSpawner
		{
			[Token(Token = "0x60014FB")]
			[Address(RVA = "0xE8622C", Offset = "0xE8622C", VA = "0xE8622C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000132")]
		public bool IsVisible
		{
			[Token(Token = "0x60014FC")]
			[Address(RVA = "0xE948CC", Offset = "0xE948CC", VA = "0xE948CC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000133")]
		public Transform Trans
		{
			[Token(Token = "0x60014FD")]
			[Address(RVA = "0xE85E18", Offset = "0xE85E18", VA = "0xE85E18")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000134")]
		private bool IsSetToUGUI
		{
			[Token(Token = "0x60014FE")]
			[Address(RVA = "0xE82F94", Offset = "0xE82F94", VA = "0xE82F94")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000135")]
		private bool IsSetToLegacyUI
		{
			[Token(Token = "0x60014FF")]
			[Address(RVA = "0xE8CD50", Offset = "0xE8CD50", VA = "0xE8CD50")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000136")]
		private bool HasActiveSpawningWave
		{
			[Token(Token = "0x6001500")]
			[Address(RVA = "0xE863FC", Offset = "0xE863FC", VA = "0xE863FC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000137")]
		public bool SpawnerIsActive
		{
			[Token(Token = "0x6001501")]
			[Address(RVA = "0xE8662C", Offset = "0xE8662C", VA = "0xE8662C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600147F")]
		[Address(RVA = "0xE82ED8", Offset = "0xE82ED8", VA = "0xE82ED8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001480")]
		[Address(RVA = "0xE833FC", Offset = "0xE833FC", VA = "0xE833FC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001481")]
		[Address(RVA = "0xE85EC8", Offset = "0xE85EC8", VA = "0xE85EC8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001482")]
		[Address(RVA = "0xE8792C", Offset = "0xE8792C", VA = "0xE8792C")]
		private void PropagateEventToChildSpawners(TriggeredSpawner.EventType eType)
		{
		}

		[Token(Token = "0x6001483")]
		[Address(RVA = "0xE87AC4", Offset = "0xE87AC4", VA = "0xE87AC4")]
		public void PropagateEventTrigger(TriggeredSpawner.EventType eType, Transform transmitterTrans, bool calledFromInspector = false)
		{
		}

		[Token(Token = "0x6001484")]
		[Address(RVA = "0xE87E98", Offset = "0xE87E98", VA = "0xE87E98")]
		public void ActivateCodeTriggeredEvent1()
		{
		}

		[Token(Token = "0x6001485")]
		[Address(RVA = "0xE87FDC", Offset = "0xE87FDC", VA = "0xE87FDC")]
		public void ActivateCodeTriggeredEvent2()
		{
		}

		[Token(Token = "0x6001486")]
		[Address(RVA = "0xE8C444", Offset = "0xE8C444", VA = "0xE8C444")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001487")]
		[Address(RVA = "0xE88ACC", Offset = "0xE88ACC", VA = "0xE88ACC")]
		private void _EnableEvent(bool calledFromSelf)
		{
		}

		[Token(Token = "0x6001488")]
		[Address(RVA = "0xE8CB00", Offset = "0xE8CB00", VA = "0xE8CB00")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001489")]
		[Address(RVA = "0xE8894C", Offset = "0xE8894C", VA = "0xE8894C")]
		private void _DisableEvent(bool calledFromSelf)
		{
		}

		[Token(Token = "0x600148A")]
		[Address(RVA = "0xE8CB08", Offset = "0xE8CB08", VA = "0xE8CB08")]
		private void OnSpawned()
		{
		}

		[Token(Token = "0x600148B")]
		[Address(RVA = "0xE88CE0", Offset = "0xE88CE0", VA = "0xE88CE0")]
		private void _OnSpawned(bool calledFromSelf)
		{
		}

		[Token(Token = "0x600148C")]
		[Address(RVA = "0xE8CBDC", Offset = "0xE8CBDC", VA = "0xE8CBDC")]
		private void OnDespawned()
		{
		}

		[Token(Token = "0x600148D")]
		[Address(RVA = "0xE887E0", Offset = "0xE887E0", VA = "0xE887E0")]
		private void _OnDespawned(bool calledFromSelf)
		{
		}

		[Token(Token = "0x600148E")]
		[Address(RVA = "0xE8CC9C", Offset = "0xE8CC9C", VA = "0xE8CC9C")]
		private void OnBecameVisible()
		{
		}

		[Token(Token = "0x600148F")]
		[Address(RVA = "0xE89258", Offset = "0xE89258", VA = "0xE89258")]
		private void _OnBecameVisible(bool calledFromSelf)
		{
		}

		[Token(Token = "0x6001490")]
		[Address(RVA = "0xE8CCB0", Offset = "0xE8CCB0", VA = "0xE8CCB0")]
		private void OnBecameInvisible()
		{
		}

		[Token(Token = "0x6001491")]
		[Address(RVA = "0xE88120", Offset = "0xE88120", VA = "0xE88120")]
		private void _OnBecameInvisible(bool calledFromSelf)
		{
		}

		[Token(Token = "0x6001492")]
		[Address(RVA = "0xE8CD48", Offset = "0xE8CD48", VA = "0xE8CD48")]
		private void OnMouseEnter()
		{
		}

		[Token(Token = "0x6001493")]
		[Address(RVA = "0xE883FC", Offset = "0xE883FC", VA = "0xE883FC")]
		private void _OnMouseEnter(bool calledFromSelf)
		{
		}

		[Token(Token = "0x6001494")]
		[Address(RVA = "0xE8CD60", Offset = "0xE8CD60", VA = "0xE8CD60")]
		private void OnMouseDown()
		{
		}

		[Token(Token = "0x6001495")]
		[Address(RVA = "0xE882A8", Offset = "0xE882A8", VA = "0xE882A8")]
		private void _OnMouseDown(bool calledFromSelf)
		{
		}

		[Token(Token = "0x6001496")]
		[Address(RVA = "0xE8CD68", Offset = "0xE8CD68", VA = "0xE8CD68")]
		private void OnClick()
		{
		}

		[Token(Token = "0x6001497")]
		[Address(RVA = "0xE88550", Offset = "0xE88550", VA = "0xE88550")]
		private void _OnClick(bool calledFromSelf)
		{
		}

		[Token(Token = "0x6001498")]
		[Address(RVA = "0xE8CD70", Offset = "0xE8CD70", VA = "0xE8CD70")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001499")]
		[Address(RVA = "0xE88698", Offset = "0xE88698", VA = "0xE88698")]
		private void _OnCollisionEnter(bool calledFromSelf)
		{
		}

		[Token(Token = "0x600149A")]
		[Address(RVA = "0xE8CECC", Offset = "0xE8CECC", VA = "0xE8CECC")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600149B")]
		[Address(RVA = "0xE88E4C", Offset = "0xE88E4C", VA = "0xE88E4C")]
		private void _OnTriggerEnter(bool calledFromSelf)
		{
		}

		[Token(Token = "0x600149C")]
		[Address(RVA = "0xE8D128", Offset = "0xE8D128", VA = "0xE8D128")]
		private void OnTriggerStay(Collider other)
		{
		}

		[Token(Token = "0x600149D")]
		[Address(RVA = "0xE88FB0", Offset = "0xE88FB0", VA = "0xE88FB0")]
		private void _OnTriggerStay(bool calledFromSelf)
		{
		}

		[Token(Token = "0x600149E")]
		[Address(RVA = "0xE8D2EC", Offset = "0xE8D2EC", VA = "0xE8D2EC")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x600149F")]
		[Address(RVA = "0xE890F8", Offset = "0xE890F8", VA = "0xE890F8")]
		private void _OnTriggerExit(bool calledFromSelf)
		{
		}

		[Token(Token = "0x60014A0")]
		[Address(RVA = "0xE8D5C4", Offset = "0xE8D5C4", VA = "0xE8D5C4")]
		private void OnCollisionEnter2D(Collision2D collision)
		{
		}

		[Token(Token = "0x60014A1")]
		[Address(RVA = "0xE893CC", Offset = "0xE893CC", VA = "0xE893CC")]
		private void _OnCollision2dEnter(bool calledFromSelf)
		{
		}

		[Token(Token = "0x60014A2")]
		[Address(RVA = "0xE8D720", Offset = "0xE8D720", VA = "0xE8D720")]
		private void OnTriggerEnter2D(Collider2D other)
		{
		}

		[Token(Token = "0x60014A3")]
		[Address(RVA = "0xE89514", Offset = "0xE89514", VA = "0xE89514")]
		private void _OnTriggerEnter2D(bool calledFromSelf)
		{
		}

		[Token(Token = "0x60014A4")]
		[Address(RVA = "0xE8D97C", Offset = "0xE8D97C", VA = "0xE8D97C")]
		private void OnTriggerStay2D(Collider2D other)
		{
		}

		[Token(Token = "0x60014A5")]
		[Address(RVA = "0xE89674", Offset = "0xE89674", VA = "0xE89674")]
		private void _OnTriggerStay2D(bool calledFromSelf)
		{
		}

		[Token(Token = "0x60014A6")]
		[Address(RVA = "0xE8DB50", Offset = "0xE8DB50", VA = "0xE8DB50")]
		private void OnTriggerExit2D(Collider2D other)
		{
		}

		[Token(Token = "0x60014A7")]
		[Address(RVA = "0xE897BC", Offset = "0xE897BC", VA = "0xE897BC")]
		private void _OnTriggerExit2D(bool calledFromSelf)
		{
		}

		[Token(Token = "0x60014A8")]
		[Address(RVA = "0xE8DE28", Offset = "0xE8DE28", VA = "0xE8DE28")]
		public void OnPointerEnter(PointerEventData data)
		{
		}

		[Token(Token = "0x60014A9")]
		[Address(RVA = "0xE89E60", Offset = "0xE89E60", VA = "0xE89E60")]
		private void _OnPointerEnter(bool calledFromSelf)
		{
		}

		[Token(Token = "0x60014AA")]
		[Address(RVA = "0xE8DE30", Offset = "0xE8DE30", VA = "0xE8DE30")]
		public void OnPointerExit(PointerEventData data)
		{
		}

		[Token(Token = "0x60014AB")]
		[Address(RVA = "0xE89FB0", Offset = "0xE89FB0", VA = "0xE89FB0")]
		private void _OnPointerExit(bool calledFromSelf)
		{
		}

		[Token(Token = "0x60014AC")]
		[Address(RVA = "0xE8DE38", Offset = "0xE8DE38", VA = "0xE8DE38")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x60014AD")]
		[Address(RVA = "0xE89BC0", Offset = "0xE89BC0", VA = "0xE89BC0")]
		private void _OnPointerDown(bool calledFromSelf)
		{
		}

		[Token(Token = "0x60014AE")]
		[Address(RVA = "0xE8DE40", Offset = "0xE8DE40", VA = "0xE8DE40")]
		public void OnPointerUp(PointerEventData data)
		{
		}

		[Token(Token = "0x60014AF")]
		[Address(RVA = "0xE89D10", Offset = "0xE89D10", VA = "0xE89D10")]
		private void _OnPointerUp(bool calledFromSelf)
		{
		}

		[Token(Token = "0x60014B0")]
		[Address(RVA = "0xE8DE48", Offset = "0xE8DE48", VA = "0xE8DE48")]
		public void OnDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x60014B1")]
		[Address(RVA = "0xE8A100", Offset = "0xE8A100", VA = "0xE8A100")]
		private void _OnDrag(bool calledFromSelf)
		{
		}

		[Token(Token = "0x60014B2")]
		[Address(RVA = "0xE8DE50", Offset = "0xE8DE50", VA = "0xE8DE50")]
		public void OnDrop(PointerEventData data)
		{
		}

		[Token(Token = "0x60014B3")]
		[Address(RVA = "0xE8A250", Offset = "0xE8A250", VA = "0xE8A250")]
		private void _OnDrop(bool calledFromSelf)
		{
		}

		[Token(Token = "0x60014B4")]
		[Address(RVA = "0xE8DE58", Offset = "0xE8DE58", VA = "0xE8DE58")]
		public void OnScroll(PointerEventData data)
		{
		}

		[Token(Token = "0x60014B5")]
		[Address(RVA = "0xE8A3A0", Offset = "0xE8A3A0", VA = "0xE8A3A0")]
		private void _OnScroll(bool calledFromSelf)
		{
		}

		[Token(Token = "0x60014B6")]
		[Address(RVA = "0xE8DE60", Offset = "0xE8DE60", VA = "0xE8DE60")]
		public void OnUpdateSelected(BaseEventData data)
		{
		}

		[Token(Token = "0x60014B7")]
		[Address(RVA = "0xE8A4F0", Offset = "0xE8A4F0", VA = "0xE8A4F0")]
		private void _OnUpdateSelected(bool calledFromSelf)
		{
		}

		[Token(Token = "0x60014B8")]
		[Address(RVA = "0xE8DE68", Offset = "0xE8DE68", VA = "0xE8DE68")]
		public void OnSelect(BaseEventData data)
		{
		}

		[Token(Token = "0x60014B9")]
		[Address(RVA = "0xE8A640", Offset = "0xE8A640", VA = "0xE8A640")]
		private void _OnSelect(bool calledFromSelf)
		{
		}

		[Token(Token = "0x60014BA")]
		[Address(RVA = "0xE8DE70", Offset = "0xE8DE70", VA = "0xE8DE70")]
		public void OnDeselect(BaseEventData data)
		{
		}

		[Token(Token = "0x60014BB")]
		[Address(RVA = "0xE8A790", Offset = "0xE8A790", VA = "0xE8A790")]
		private void _OnDeselect(bool calledFromSelf)
		{
		}

		[Token(Token = "0x60014BC")]
		[Address(RVA = "0xE8DE78", Offset = "0xE8DE78", VA = "0xE8DE78")]
		public void OnMove(AxisEventData data)
		{
		}

		[Token(Token = "0x60014BD")]
		[Address(RVA = "0xE8A8E0", Offset = "0xE8A8E0", VA = "0xE8A8E0")]
		private void _OnMove(bool calledFromSelf)
		{
		}

		[Token(Token = "0x60014BE")]
		[Address(RVA = "0xE8DE80", Offset = "0xE8DE80", VA = "0xE8DE80")]
		public void OnInitializePotentialDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x60014BF")]
		[Address(RVA = "0xE8AA30", Offset = "0xE8AA30", VA = "0xE8AA30")]
		private void _OnInitializePotentialDrag(bool calledFromSelf)
		{
		}

		[Token(Token = "0x60014C0")]
		[Address(RVA = "0xE8DE88", Offset = "0xE8DE88", VA = "0xE8DE88")]
		public void OnBeginDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x60014C1")]
		[Address(RVA = "0xE8AB80", Offset = "0xE8AB80", VA = "0xE8AB80")]
		private void _OnBeginDrag(bool calledFromSelf)
		{
		}

		[Token(Token = "0x60014C2")]
		[Address(RVA = "0xE8DE90", Offset = "0xE8DE90", VA = "0xE8DE90")]
		public void OnEndDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x60014C3")]
		[Address(RVA = "0xE8ACD0", Offset = "0xE8ACD0", VA = "0xE8ACD0")]
		private void _OnEndDrag(bool calledFromSelf)
		{
		}

		[Token(Token = "0x60014C4")]
		[Address(RVA = "0xE8DE98", Offset = "0xE8DE98", VA = "0xE8DE98")]
		public void OnSubmit(BaseEventData data)
		{
		}

		[Token(Token = "0x60014C5")]
		[Address(RVA = "0xE8AE20", Offset = "0xE8AE20", VA = "0xE8AE20")]
		private void _OnSubmit(bool calledFromSelf)
		{
		}

		[Token(Token = "0x60014C6")]
		[Address(RVA = "0xE8DEA0", Offset = "0xE8DEA0", VA = "0xE8DEA0")]
		public void OnCancel(BaseEventData data)
		{
		}

		[Token(Token = "0x60014C7")]
		[Address(RVA = "0xE8AF70", Offset = "0xE8AF70", VA = "0xE8AF70")]
		private void _OnCancel(bool calledFromSelf)
		{
		}

		[Token(Token = "0x60014C8")]
		[Address(RVA = "0xE8DEA8", Offset = "0xE8DEA8", VA = "0xE8DEA8")]
		private void SliderChanged(float newValue)
		{
		}

		[Token(Token = "0x60014C9")]
		[Address(RVA = "0xE8991C", Offset = "0xE8991C", VA = "0xE8991C")]
		private void _SliderChanged(bool calledFromSelf)
		{
		}

		[Token(Token = "0x60014CA")]
		[Address(RVA = "0xE8DEB0", Offset = "0xE8DEB0", VA = "0xE8DEB0")]
		private void ButtonClicked()
		{
		}

		[Token(Token = "0x60014CB")]
		[Address(RVA = "0xE89A6C", Offset = "0xE89A6C", VA = "0xE89A6C")]
		private void _ButtonClicked(bool calledFromSelf)
		{
		}

		[Token(Token = "0x60014CC")]
		[Address(RVA = "0xE8DEB8", Offset = "0xE8DEB8", VA = "0xE8DEB8")]
		public static List<TriggeredSpawnerV2> GetChildSpawners(Transform trans)
		{
			return null;
		}

		[Token(Token = "0x60014CD")]
		[Address(RVA = "0xE8E050", Offset = "0xE8E050", VA = "0xE8E050")]
		public bool HasActiveWaveOfType(TriggeredSpawner.EventType eType, string customEventName)
		{
			return default(bool);
		}

		[Token(Token = "0x60014CE")]
		[Address(RVA = "0xE8C600", Offset = "0xE8C600", VA = "0xE8C600")]
		public void EndWave(TriggeredSpawner.EventType eType, string customEventName)
		{
		}

		[Token(Token = "0x60014CF")]
		[Address(RVA = "0xE8E590", Offset = "0xE8E590", VA = "0xE8E590")]
		public bool IsUsingPrefabPool(Transform poolTrans)
		{
			return default(bool);
		}

		[Token(Token = "0x60014D0")]
		[Address(RVA = "0xE8EFB4", Offset = "0xE8EFB4", VA = "0xE8EFB4")]
		public void SpawnWaveVisual(TriggeredWaveSpecifics wave)
		{
		}

		[Token(Token = "0x60014D1")]
		[Address(RVA = "0xE90124", Offset = "0xE90124", VA = "0xE90124", Slot = "9")]
		protected virtual Transform SpawnWaveItem(Transform prefabToSpawn, Vector3 spawnPosition, Quaternion rotation, TriggeredWaveMetaData wave)
		{
			return null;
		}

		[Token(Token = "0x60014D2")]
		[Address(RVA = "0xE902F0", Offset = "0xE902F0", VA = "0xE902F0", Slot = "10")]
		protected virtual void DespawnSpawner()
		{
		}

		[Token(Token = "0x60014D3")]
		[Address(RVA = "0xE9037C", Offset = "0xE9037C", VA = "0xE9037C", Slot = "11")]
		protected virtual void SpawnedOrAwake()
		{
		}

		[Token(Token = "0x60014D4")]
		[Address(RVA = "0xE90440", Offset = "0xE90440", VA = "0xE90440", Slot = "12")]
		protected virtual Transform GetSpawnable(TriggeredWaveMetaData wave)
		{
			return null;
		}

		[Token(Token = "0x60014D5")]
		[Address(RVA = "0xE904B8", Offset = "0xE904B8", VA = "0xE904B8", Slot = "13")]
		protected virtual bool CanSpawnOne()
		{
			return default(bool);
		}

		[Token(Token = "0x60014D6")]
		[Address(RVA = "0xE904C0", Offset = "0xE904C0", VA = "0xE904C0", Slot = "14")]
		protected virtual Vector3 GetSpawnPosition(Vector3 pos, int itemSpawnedIndex, TriggeredWaveMetaData wave)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60014D7")]
		[Address(RVA = "0xE90EA4", Offset = "0xE90EA4", VA = "0xE90EA4", Slot = "15")]
		protected virtual Quaternion GetSpawnRotation(Transform prefabToSpawn, int itemSpawnedIndex, TriggeredWaveMetaData wave)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60014D8")]
		[Address(RVA = "0xE91470", Offset = "0xE91470", VA = "0xE91470", Slot = "16")]
		protected virtual void AfterSpawn(Transform spawnedTrans, TriggeredWaveMetaData wave, TriggeredSpawner.EventType eType)
		{
		}

		[Token(Token = "0x60014D9")]
		[Address(RVA = "0xE9184C", Offset = "0xE9184C", VA = "0xE9184C", Slot = "17")]
		public virtual void CheckForIllegalCustomEvents()
		{
		}

		[Token(Token = "0x60014DA")]
		[Address(RVA = "0xE91BEC", Offset = "0xE91BEC", VA = "0xE91BEC", Slot = "18")]
		public virtual void ReceiveEvent(string customEventName, Vector3 eventOrigin)
		{
		}

		[Token(Token = "0x60014DB")]
		[Address(RVA = "0xE91F78", Offset = "0xE91F78", VA = "0xE91F78", Slot = "19")]
		public virtual bool SubscribesToEvent(string customEventName)
		{
			return default(bool);
		}

		[Token(Token = "0x60014DC")]
		[Address(RVA = "0xE92078", Offset = "0xE92078", VA = "0xE92078", Slot = "20")]
		public virtual void RegisterReceiver()
		{
		}

		[Token(Token = "0x60014DD")]
		[Address(RVA = "0xE92124", Offset = "0xE92124", VA = "0xE92124", Slot = "21")]
		public virtual void UnregisterReceiver()
		{
		}

		[Token(Token = "0x60014DE")]
		[Address(RVA = "0xE82FA4", Offset = "0xE82FA4", VA = "0xE82FA4")]
		private void AddUGUIComponents()
		{
		}

		[Token(Token = "0x60014DF")]
		private void AddUGUIHandler<T>(bool useEvent) where T : TriggeredSpawnerUGUIHandler
		{
		}

		[Token(Token = "0x60014E0")]
		[Address(RVA = "0xE8F32C", Offset = "0xE8F32C", VA = "0xE8F32C")]
		private static Vector3 GetSpawnPositionForVisualization(TriggeredWaveSpecifics wave, Transform spawnerTrans, int itemSpawnedIndex)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60014E1")]
		[Address(RVA = "0xE8FA58", Offset = "0xE8FA58", VA = "0xE8FA58")]
		private static Quaternion GetSpawnRotationForVisualization(TriggeredWaveSpecifics wave, Transform spawner, int itemSpawnedIndex)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60014E2")]
		[Address(RVA = "0xE8FF6C", Offset = "0xE8FF6C", VA = "0xE8FF6C")]
		private void AfterSpawnForVisualization(TriggeredWaveSpecifics wave, Transform spawnedTrans)
		{
		}

		[Token(Token = "0x60014E3")]
		[Address(RVA = "0xE921C0", Offset = "0xE921C0", VA = "0xE921C0")]
		public void DeleteAllWaves()
		{
		}

		[Token(Token = "0x60014E4")]
		[Address(RVA = "0xE9261C", Offset = "0xE9261C", VA = "0xE9261C")]
		public void RemoveItemFromWave(Transform transDeadItem, TriggeredSpawner.EventType eType, string customEventName, TriggeredWaveMetaData waveMeta)
		{
		}

		[Token(Token = "0x60014E5")]
		[Address(RVA = "0xE93598", Offset = "0xE93598", VA = "0xE93598")]
		private void AwardEliminationBonusesAndFireEventsIfAny(TriggeredWaveSpecifics wave)
		{
		}

		[Token(Token = "0x60014E6")]
		[Address(RVA = "0xE9288C", Offset = "0xE9288C", VA = "0xE9288C")]
		private TriggeredWaveMetaData GetWaveMetaByType(TriggeredSpawner.EventType eType, string customEventName)
		{
			return null;
		}

		[Token(Token = "0x60014E7")]
		[Address(RVA = "0xE93744", Offset = "0xE93744", VA = "0xE93744")]
		private void AddFirstWaveIfAny(TriggeredSpawner.EventType eType, List<TriggeredWaveSpecifics> listOfSingleWaveType, ref Dictionary<TriggeredSpawner.EventType, List<TriggeredWaveSpecifics>> allWaves)
		{
		}

		[Token(Token = "0x60014E8")]
		[Address(RVA = "0xE83820", Offset = "0xE83820", VA = "0xE83820")]
		private TriggeredWaveSpecifics GetFirstWaveIfAny(List<TriggeredWaveSpecifics> waveList)
		{
			return null;
		}

		[Token(Token = "0x60014E9")]
		[Address(RVA = "0xE8B0C0", Offset = "0xE8B0C0", VA = "0xE8B0C0")]
		private bool IsWaveValid(TriggeredWaveSpecifics wave, TriggeredSpawner.EventType eType, bool calledFromSelf)
		{
			return default(bool);
		}

		[Token(Token = "0x60014EA")]
		[Address(RVA = "0xE93830", Offset = "0xE93830", VA = "0xE93830")]
		private float WaveEndTime(TriggeredWaveMetaData wave)
		{
			return default(float);
		}

		[Token(Token = "0x60014EB")]
		[Address(RVA = "0xE93870", Offset = "0xE93870", VA = "0xE93870")]
		private bool WaveEliminatedIfRequired(TriggeredWaveMetaData wave)
		{
			return default(bool);
		}

		[Token(Token = "0x60014EC")]
		[Address(RVA = "0xE93900", Offset = "0xE93900", VA = "0xE93900")]
		private bool CanRepeatWave(TriggeredWaveMetaData wave)
		{
			return default(bool);
		}

		[Token(Token = "0x60014ED")]
		[Address(RVA = "0xE8E3F4", Offset = "0xE8E3F4", VA = "0xE8E3F4")]
		private void PropagateEndWaveToChildSpawners(TriggeredSpawner.EventType eType, string customEventName)
		{
		}

		[Token(Token = "0x60014EE")]
		[Address(RVA = "0xE8699C", Offset = "0xE8699C", VA = "0xE8699C")]
		private void SpawnFromWaveMeta(TriggeredWaveMetaData wave, TriggeredSpawner.EventType eType)
		{
		}

		[Token(Token = "0x60014EF")]
		[Address(RVA = "0xE93E0C", Offset = "0xE93E0C", VA = "0xE93E0C")]
		private void AddSpawnTracker(Transform spawnedTrans, TriggeredSpawner.EventType eType, TriggeredWaveMetaData waveMeta)
		{
		}

		[Token(Token = "0x60014F0")]
		[Address(RVA = "0xE94048", Offset = "0xE94048", VA = "0xE94048")]
		private void AfterSpawnWave(TriggeredWaveMetaData newWave)
		{
		}

		[Token(Token = "0x60014F1")]
		[Address(RVA = "0xE8B414", Offset = "0xE8B414", VA = "0xE8B414")]
		private bool SetupNextWave(TriggeredWaveSpecifics newWave, TriggeredSpawner.EventType eventType, int repetitionNumber = 0, int repetitionNumberWithReset = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x60014F2")]
		[Address(RVA = "0xE918F0", Offset = "0xE918F0", VA = "0xE918F0")]
		private void LogIfCustomEventMissing(TriggeredWaveSpecifics eventGroup)
		{
		}

		[Token(Token = "0x60014F3")]
		[Address(RVA = "0xE83884", Offset = "0xE83884", VA = "0xE83884")]
		private void CheckForValidVariablesForWave(TriggeredWaveSpecifics wave, TriggeredSpawner.EventType eType)
		{
		}

		[Token(Token = "0x60014F4")]
		[Address(RVA = "0xE8EF58", Offset = "0xE8EF58", VA = "0xE8EF58")]
		private static bool WaveIsUsingPrefabPool(TriggeredWaveSpecifics spec, string poolName)
		{
			return default(bool);
		}

		[Token(Token = "0x60014F5")]
		[Address(RVA = "0xE8CCB8", Offset = "0xE8CCB8", VA = "0xE8CCB8")]
		private void StopOppositeWaveIfActive(TriggeredWaveSpecifics wave, TriggeredSpawner.EventType eType)
		{
		}

		[Token(Token = "0x60014F6")]
		[Address(RVA = "0xE93D84", Offset = "0xE93D84", VA = "0xE93D84")]
		private float WaveDelay(TriggeredWaveMetaData wave)
		{
			return default(float);
		}

		[Token(Token = "0x60014F7")]
		[Address(RVA = "0xE92C38", Offset = "0xE92C38", VA = "0xE92C38")]
		private void SpawnBonusPrefabIfAny(TriggeredWaveSpecifics currentWave, Vector3 spawnPosition)
		{
		}

		[Token(Token = "0x6001502")]
		[Address(RVA = "0xE948D4", Offset = "0xE948D4", VA = "0xE948D4")]
		public TriggeredSpawnerV2()
		{
		}
	}
	[Token(Token = "0x200030B")]
	public class VisualizationMarker : MonoBehaviour
	{
		[Token(Token = "0x6001504")]
		[Address(RVA = "0xE97674", Offset = "0xE97674", VA = "0xE97674")]
		public VisualizationMarker()
		{
		}
	}
	[Token(Token = "0x200030C")]
	public class WaveSyncroPrefabSpawner : MonoBehaviour
	{
		[Token(Token = "0x20003C6")]
		public enum SpawnLayerTagMode
		{
			[Token(Token = "0x40014A4")]
			UseSpawnPrefabSettings,
			[Token(Token = "0x40014A5")]
			UseSpawnerSettings,
			[Token(Token = "0x40014A6")]
			Custom
		}

		[Token(Token = "0x40011E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public List<WaveSpecifics> waveSpecs;

		[Token(Token = "0x40011E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool isExpanded;

		[Token(Token = "0x40011E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public LevelSettings.ActiveItemMode activeMode;

		[Token(Token = "0x40011E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public WorldVariableRangeCollection activeItemCriteria;

		[Token(Token = "0x40011E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int randomSortKey;

		[Token(Token = "0x40011E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool spawnOutsidePool;

		[Token(Token = "0x40011E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public TriggeredSpawner.GameOverBehavior gameOverBehavior;

		[Token(Token = "0x40011E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TriggeredSpawner.WavePauseBehavior wavePauseBehavior;

		[Token(Token = "0x40011E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public WaveSyncroSpawnerListener listener;

		[Token(Token = "0x40011EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SpawnLayerTagMode spawnLayerMode;

		[Token(Token = "0x40011EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public SpawnLayerTagMode spawnTagMode;

		[Token(Token = "0x40011EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int spawnCustomLayer;

		[Token(Token = "0x40011ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool applyLayerRecursively;

		[Token(Token = "0x40011EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string spawnCustomTag;

		[Token(Token = "0x40011EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool useLevelFilter;

		[Token(Token = "0x40011F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int levelFilter;

		[Token(Token = "0x40011F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool useCopyWave;

		[Token(Token = "0x40011F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		public bool isSpawnerSelectedAsTarget;

		[Token(Token = "0x40011F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int _currentWaveSize;

		[Token(Token = "0x40011F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int _itemsToCompleteWave;

		[Token(Token = "0x40011F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float _currentWaveLength;

		[Token(Token = "0x40011F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private bool _waveFinishedSpawning;

		[Token(Token = "0x40011F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
		private bool _levelSettingsNotifiedOfCompletion;

		[Token(Token = "0x40011F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int _countSpawned;

		[Token(Token = "0x40011F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float _singleSpawnTime;

		[Token(Token = "0x40011FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float _lastSpawnTime;

		[Token(Token = "0x40011FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private WaveSpecifics _currentWave;

		[Token(Token = "0x40011FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float _waveStartTime;

		[Token(Token = "0x40011FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Transform _trans;

		[Token(Token = "0x40011FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject _go;

		[Token(Token = "0x40011FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private readonly List<Transform> _spawnedWaveMembers;

		[Token(Token = "0x4001200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float? _repeatTimer;

		[Token(Token = "0x4001201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float _repeatWaitTime;

		[Token(Token = "0x4001202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private int _waveRepetitionNumber;

		[Token(Token = "0x4001203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int _waveRepetitionNumberWithReset;

		[Token(Token = "0x4001204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool _spawnerValid;

		[Token(Token = "0x4001205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private WavePrefabPool _wavePool;

		[Token(Token = "0x4001206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private int _instanceId;

		[Token(Token = "0x4001207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private bool _settingUpWave;

		[Token(Token = "0x4001208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Transform _lastPrefabKilled;

		[Token(Token = "0x4001209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float _currentRandomLimitDistance;

		[Token(Token = "0x17000138")]
		public List<Transform> SpawnedWaveMembers
		{
			[Token(Token = "0x6001515")]
			[Address(RVA = "0xEA073C", Offset = "0xEA073C", VA = "0xEA073C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000139")]
		private float WaveDelay
		{
			[Token(Token = "0x6001529")]
			[Address(RVA = "0xE9DDB8", Offset = "0xE9DDB8", VA = "0xE9DDB8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700013A")]
		public bool GameIsOverForSpawner
		{
			[Token(Token = "0x600152F")]
			[Address(RVA = "0xE9D478", Offset = "0xE9D478", VA = "0xE9D478")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700013B")]
		public bool SpawnerIsPaused
		{
			[Token(Token = "0x6001530")]
			[Address(RVA = "0xE9D560", Offset = "0xE9D560", VA = "0xE9D560")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001505")]
		[Address(RVA = "0xE9A32C", Offset = "0xE9A32C", VA = "0xE9A32C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001506")]
		[Address(RVA = "0xE9A73C", Offset = "0xE9A73C", VA = "0xE9A73C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001507")]
		[Address(RVA = "0xE9D0D8", Offset = "0xE9D0D8", VA = "0xE9D0D8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001508")]
		[Address(RVA = "0xE9E3CC", Offset = "0xE9E3CC", VA = "0xE9E3CC")]
		public void DeleteLevel(int level)
		{
		}

		[Token(Token = "0x6001509")]
		[Address(RVA = "0xE9E914", Offset = "0xE9E914", VA = "0xE9E914")]
		public void ShiftUpLevel(int level)
		{
		}

		[Token(Token = "0x600150A")]
		[Address(RVA = "0xE9EE3C", Offset = "0xE9EE3C", VA = "0xE9EE3C")]
		public void ShiftDownLevel(int level)
		{
		}

		[Token(Token = "0x600150B")]
		[Address(RVA = "0xE9F360", Offset = "0xE9F360", VA = "0xE9F360")]
		public void ShiftUpWave(int level, int waveNum)
		{
		}

		[Token(Token = "0x600150C")]
		[Address(RVA = "0xE9FA38", Offset = "0xE9FA38", VA = "0xE9FA38")]
		public void ShiftDownWave(int level, int waveNum)
		{
		}

		[Token(Token = "0x600150D")]
		[Address(RVA = "0xE9FFC8", Offset = "0xE9FFC8", VA = "0xE9FFC8")]
		public void DeleteWave(int level, int wav)
		{
		}

		[Token(Token = "0x600150E")]
		[Address(RVA = "0xE9F8F0", Offset = "0xE9F8F0", VA = "0xE9F8F0")]
		public WaveSpecifics FindWave(int levelToMatch, int waveToMatch)
		{
			return null;
		}

		[Token(Token = "0x600150F")]
		[Address(RVA = "0xEA01D0", Offset = "0xEA01D0", VA = "0xEA01D0")]
		public void InsertLevel(int level)
		{
		}

		[Token(Token = "0x6001510")]
		[Address(RVA = "0xEA031C", Offset = "0xEA031C", VA = "0xEA031C")]
		public void InsertWave(int newWaveNumber, int level)
		{
		}

		[Token(Token = "0x6001511")]
		[Address(RVA = "0xEA0478", Offset = "0xEA0478", VA = "0xEA0478")]
		public bool IsUsingPrefabPool(Transform poolTrans)
		{
			return default(bool);
		}

		[Token(Token = "0x6001512")]
		[Address(RVA = "0xEA05F8", Offset = "0xEA05F8", VA = "0xEA05F8")]
		public void RemoveSpawnedMember(Transform transMember)
		{
		}

		[Token(Token = "0x6001513")]
		[Address(RVA = "0xE9A39C", Offset = "0xE9A39C", VA = "0xE9A39C")]
		public string CheckForDuplicateWaveLevelSettings()
		{
			return null;
		}

		[Token(Token = "0x6001514")]
		[Address(RVA = "0xEA0734", Offset = "0xEA0734", VA = "0xEA0734")]
		public Transform SpawnOneItem()
		{
			return null;
		}

		[Token(Token = "0x6001516")]
		[Address(RVA = "0xEA0744", Offset = "0xEA0744", VA = "0xEA0744")]
		public bool WaveChange(bool isRestart)
		{
			return default(bool);
		}

		[Token(Token = "0x6001517")]
		[Address(RVA = "0xEA1B90", Offset = "0xEA1B90", VA = "0xEA1B90")]
		public void WaveRepeat()
		{
		}

		[Token(Token = "0x6001518")]
		[Address(RVA = "0xEA2084", Offset = "0xEA2084", VA = "0xEA2084")]
		public void SpawnWaveVisual(WaveSpecifics wave)
		{
		}

		[Token(Token = "0x6001519")]
		[Address(RVA = "0xEA3328", Offset = "0xEA3328", VA = "0xEA3328")]
		public void ResetWaveIncrementCounter()
		{
		}

		[Token(Token = "0x600151A")]
		[Address(RVA = "0xEA33A4", Offset = "0xEA33A4", VA = "0xEA33A4", Slot = "4")]
		protected virtual void AfterSpawn(Transform spawnedTrans)
		{
		}

		[Token(Token = "0x600151B")]
		[Address(RVA = "0xEA377C", Offset = "0xEA377C", VA = "0xEA377C", Slot = "5")]
		protected virtual bool CanSpawnOne()
		{
			return default(bool);
		}

		[Token(Token = "0x600151C")]
		[Address(RVA = "0xEA3804", Offset = "0xEA3804", VA = "0xEA3804", Slot = "6")]
		protected virtual Transform GetSpawnable(WaveSpecifics wave)
		{
			return null;
		}

		[Token(Token = "0x600151D")]
		[Address(RVA = "0xEA3850", Offset = "0xEA3850", VA = "0xEA3850", Slot = "7")]
		protected virtual Vector3 GetSpawnPosition(Vector3 pos, int itemSpawnedIndex)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600151E")]
		[Address(RVA = "0xEA40E8", Offset = "0xEA40E8", VA = "0xEA40E8", Slot = "8")]
		protected virtual Quaternion GetSpawnRotation(Transform prefabToSpawn, int itemSpawnedIndex)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600151F")]
		[Address(RVA = "0xEA4750", Offset = "0xEA4750", VA = "0xEA4750", Slot = "9")]
		protected virtual Transform SpawnWaveItem(Transform prefabToSpawn, Vector3 spawnPosition, Quaternion rotation)
		{
			return null;
		}

		[Token(Token = "0x6001520")]
		[Address(RVA = "0xEA48A0", Offset = "0xEA48A0", VA = "0xEA48A0")]
		private void SpawnBonusPrefabIfSelected(Vector3 spawnPosition)
		{
		}

		[Token(Token = "0x6001521")]
		[Address(RVA = "0xEA48F4", Offset = "0xEA48F4", VA = "0xEA48F4")]
		private void SpawnBonusPrefabIfAny(Vector3 spawnPosition)
		{
		}

		[Token(Token = "0x6001522")]
		[Address(RVA = "0xEA52E0", Offset = "0xEA52E0", VA = "0xEA52E0")]
		private void AddSpawnTracker(Transform spawnedTrans)
		{
		}

		[Token(Token = "0x6001523")]
		[Address(RVA = "0xE9A7E8", Offset = "0xE9A7E8", VA = "0xE9A7E8")]
		private void CheckForValidVariablesForWave(WaveSpecifics wave)
		{
		}

		[Token(Token = "0x6001524")]
		[Address(RVA = "0xE9C310", Offset = "0xE9C310", VA = "0xE9C310")]
		private void CheckForValidWorldVariables()
		{
		}

		[Token(Token = "0x6001525")]
		[Address(RVA = "0xE9E834", Offset = "0xE9E834", VA = "0xE9E834")]
		private void LogAdjustments(int adjustments)
		{
		}

		[Token(Token = "0x6001526")]
		[Address(RVA = "0xEA5574", Offset = "0xEA5574", VA = "0xEA5574")]
		private bool WillRepeatWave()
		{
			return default(bool);
		}

		[Token(Token = "0x6001527")]
		[Address(RVA = "0xEA59A0", Offset = "0xEA59A0", VA = "0xEA59A0")]
		private void MaybeRepeatWave()
		{
		}

		[Token(Token = "0x6001528")]
		[Address(RVA = "0xEA0834", Offset = "0xEA0834", VA = "0xEA0834")]
		private bool SetupNextWave(bool scanForWave, bool isRestart)
		{
			return default(bool);
		}

		[Token(Token = "0x600152A")]
		[Address(RVA = "0xE9DE34", Offset = "0xE9DE34", VA = "0xE9DE34")]
		private Transform SpawnOne(bool fromExternalScript = false)
		{
			return null;
		}

		[Token(Token = "0x600152B")]
		[Address(RVA = "0xE9D648", Offset = "0xE9D648", VA = "0xE9D648")]
		private void CheckForWaveRepeat()
		{
		}

		[Token(Token = "0x600152C")]
		[Address(RVA = "0xEA23E4", Offset = "0xEA23E4", VA = "0xEA23E4")]
		private static Vector3 GetSpawnPositionForVisualization(WaveSpecifics wave, Transform spawnerTrans, int itemSpawnedIndex)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600152D")]
		[Address(RVA = "0xEA2B10", Offset = "0xEA2B10", VA = "0xEA2B10")]
		private static Quaternion GetSpawnRotationForVisualization(WaveSpecifics wave, Transform spawner, int itemSpawnedIndex)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600152E")]
		[Address(RVA = "0xEA3024", Offset = "0xEA3024", VA = "0xEA3024")]
		private void AfterSpawnForVisualization(WaveSpecifics wave, Transform spawnedTrans)
		{
		}

		[Token(Token = "0x6001531")]
		[Address(RVA = "0xEA6008", Offset = "0xEA6008", VA = "0xEA6008")]
		public WaveSyncroPrefabSpawner()
		{
		}
	}
	[Token(Token = "0x200030D")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x396664", Offset = "0x396664")]
	public class WaveSyncroSpawnerListener : MonoBehaviour
	{
		[Token(Token = "0x400120A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string sourceSpawnerName;

		[Token(Token = "0x6001532")]
		[Address(RVA = "0xEA6104", Offset = "0xEA6104", VA = "0xEA6104")]
		private void Reset()
		{
		}

		[Token(Token = "0x6001533")]
		[Address(RVA = "0xEA61C8", Offset = "0xEA61C8", VA = "0xEA61C8", Slot = "4")]
		public virtual void ItemFailedToSpawn(Transform failedPrefabTrans)
		{
		}

		[Token(Token = "0x6001534")]
		[Address(RVA = "0xEA61CC", Offset = "0xEA61CC", VA = "0xEA61CC", Slot = "5")]
		public virtual void ItemSpawned(Transform spawnedTrans)
		{
		}

		[Token(Token = "0x6001535")]
		[Address(RVA = "0xEA61D0", Offset = "0xEA61D0", VA = "0xEA61D0", Slot = "6")]
		public virtual void WaveFinishedSpawning(WaveSpecifics spec)
		{
		}

		[Token(Token = "0x6001536")]
		[Address(RVA = "0xEA61D4", Offset = "0xEA61D4", VA = "0xEA61D4", Slot = "7")]
		public virtual void WaveStart(WaveSpecifics spec)
		{
		}

		[Token(Token = "0x6001537")]
		[Address(RVA = "0xEA61D8", Offset = "0xEA61D8", VA = "0xEA61D8", Slot = "8")]
		public virtual void EliminationWaveCompleted(WaveSpecifics spec)
		{
		}

		[Token(Token = "0x6001538")]
		[Address(RVA = "0xEA61DC", Offset = "0xEA61DC", VA = "0xEA61DC", Slot = "9")]
		public virtual void WaveRepeat(WaveSpecifics spec)
		{
		}

		[Token(Token = "0x6001539")]
		[Address(RVA = "0xEA61E0", Offset = "0xEA61E0", VA = "0xEA61E0")]
		public WaveSyncroSpawnerListener()
		{
		}
	}
	[Token(Token = "0x200030E")]
	public static class CoreMonoHelper
	{
		[Token(Token = "0x600153A")]
		[Address(RVA = "0xB7DE64", Offset = "0xB7DE64", VA = "0xB7DE64")]
		public static Transform GetChildTransform(this Transform transParent, string childName)
		{
			return null;
		}

		[Token(Token = "0x600153B")]
		[Address(RVA = "0xB7DE94", Offset = "0xB7DE94", VA = "0xB7DE94")]
		public static void SetLayerOnAllChildren(this Transform trans, int layer)
		{
		}
	}
	[Token(Token = "0x200030F")]
	public class MechanimStateCoreCustomEvents : StateMachineBehaviour
	{
		[Token(Token = "0x400120B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x397560", Offset = "0x397560")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x397560", Offset = "0x397560")]
		public bool RetriggerWhenStateLoops;

		[Token(Token = "0x400120C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x3975C0", Offset = "0x3975C0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x3975C0", Offset = "0x3975C0")]
		public bool fireEnterEvent;

		[Token(Token = "0x400120D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[CoreCustomEvent]
		public string EnterCustomEvent;

		[Token(Token = "0x400120E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x397630", Offset = "0x397630")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x397630", Offset = "0x397630")]
		public bool fireExitEvent;

		[Token(Token = "0x400120F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[CoreCustomEvent]
		public string ExitCustomEvent;

		[Token(Token = "0x4001210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x3976A0", Offset = "0x3976A0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x3976A0", Offset = "0x3976A0")]
		public bool fireAnimTimeEvent;

		[Token(Token = "0x4001211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x397700", Offset = "0x397700")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x397700", Offset = "0x397700")]
		public float whenToFireEvent;

		[Token(Token = "0x4001212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[CoreCustomEvent]
		public string timedCustomEvent;

		[Token(Token = "0x4001213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x397760", Offset = "0x397760")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x397760", Offset = "0x397760")]
		public bool fireMultiAnimTimeEvent;

		[Token(Token = "0x4001214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x3977C0", Offset = "0x3977C0")]
		public int numOfMultiEventsToFire;

		[Token(Token = "0x4001215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x3977DC", Offset = "0x3977DC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x3977DC", Offset = "0x3977DC")]
		public float whenToFireMultiEvent1;

		[Token(Token = "0x4001216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x39782C", Offset = "0x39782C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x39782C", Offset = "0x39782C")]
		public float whenToFireMultiEvent2;

		[Token(Token = "0x4001217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x39787C", Offset = "0x39787C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x39787C", Offset = "0x39787C")]
		public float whenToFireMultiEvent3;

		[Token(Token = "0x4001218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x3978CC", Offset = "0x3978CC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x3978CC", Offset = "0x3978CC")]
		public float whenToFireMultiEvent4;

		[Token(Token = "0x4001219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[CoreCustomEvent]
		public string MultiTimedEvent;

		[Token(Token = "0x400121A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool _playMultiEvent1;

		[Token(Token = "0x400121B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		private bool _playMultiEvent2;

		[Token(Token = "0x400121C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
		private bool _playMultiEvent3;

		[Token(Token = "0x400121D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
		private bool _playMultiEvent4;

		[Token(Token = "0x400121E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform _actorTrans;

		[Token(Token = "0x400121F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int _lastRepetition;

		[Token(Token = "0x600153C")]
		[Address(RVA = "0x9E01C0", Offset = "0x9E01C0", VA = "0x9E01C0", Slot = "4")]
		public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x600153D")]
		[Address(RVA = "0x9E0364", Offset = "0x9E0364", VA = "0x9E0364", Slot = "5")]
		public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x600153E")]
		[Address(RVA = "0x9E0768", Offset = "0x9E0768", VA = "0x9E0768", Slot = "6")]
		public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x600153F")]
		[Address(RVA = "0x9E02B0", Offset = "0x9E02B0", VA = "0x9E02B0")]
		private Transform ActorTrans(Animator anim)
		{
			return null;
		}

		[Token(Token = "0x6001540")]
		[Address(RVA = "0x9E084C", Offset = "0x9E084C", VA = "0x9E084C")]
		public MechanimStateCoreCustomEvents()
		{
		}
	}
	[Token(Token = "0x2000310")]
	public static class SpawnUtility
	{
		[Token(Token = "0x6001541")]
		[Address(RVA = "0x9EA894", Offset = "0x9EA894", VA = "0x9EA894")]
		public static void DamageAllOfPrefab(Transform transToDamage, int damagePoints)
		{
		}

		[Token(Token = "0x6001542")]
		[Address(RVA = "0x9EA914", Offset = "0x9EA914", VA = "0x9EA914")]
		public static void DespawnAllOfPrefab(Transform transToDespawn)
		{
		}

		[Token(Token = "0x6001543")]
		[Address(RVA = "0x9EA98C", Offset = "0x9EA98C", VA = "0x9EA98C")]
		public static void KillAllOfPrefab(Transform transToKill)
		{
		}

		[Token(Token = "0x6001544")]
		[Address(RVA = "0x9EAA04", Offset = "0x9EAA04", VA = "0x9EAA04")]
		public static void DespawnAllPrefabs()
		{
		}

		[Token(Token = "0x6001545")]
		[Address(RVA = "0x9EAA74", Offset = "0x9EAA74", VA = "0x9EAA74")]
		public static void DamageAllPrefabs(int damagePoints)
		{
		}

		[Token(Token = "0x6001546")]
		[Address(RVA = "0x9EAAEC", Offset = "0x9EAAEC", VA = "0x9EAAEC")]
		public static void KillAllPrefabs()
		{
		}

		[Token(Token = "0x6001547")]
		[Address(RVA = "0x9EAB5C", Offset = "0x9EAB5C", VA = "0x9EAB5C")]
		public static void DespawnAllPrefabsInCategory(string category)
		{
		}

		[Token(Token = "0x6001548")]
		[Address(RVA = "0x9EABD4", Offset = "0x9EABD4", VA = "0x9EABD4")]
		public static void DamageAllPrefabsInCategory(string category, int damagePoints)
		{
		}

		[Token(Token = "0x6001549")]
		[Address(RVA = "0x9EAC54", Offset = "0x9EAC54", VA = "0x9EAC54")]
		public static void KillAllPrefabsInCategory(string category)
		{
		}

		[Token(Token = "0x600154A")]
		[Address(RVA = "0x9EACCC", Offset = "0x9EACCC", VA = "0x9EACCC")]
		public static bool SpawnedMembersAreAllBeyondDistance(Transform spawnerTrans, List<Transform> members, float minDist)
		{
			return default(bool);
		}

		[Token(Token = "0x600154B")]
		[Address(RVA = "0x9EAF98", Offset = "0x9EAF98", VA = "0x9EAF98")]
		public static void RecordSpawnerObjectIfKillable(Transform spawnedObject, GameObject spawnerObject)
		{
		}

		[Token(Token = "0x600154C")]
		[Address(RVA = "0x9EB06C", Offset = "0x9EB06C", VA = "0x9EB06C")]
		public static bool IsDespawnedOrDestroyed(GameObject objectToCheck)
		{
			return default(bool);
		}

		[Token(Token = "0x600154D")]
		[Address(RVA = "0x9E1A58", Offset = "0x9E1A58", VA = "0x9E1A58")]
		public static bool IsActive(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x600154E")]
		[Address(RVA = "0x9E4274", Offset = "0x9E4274", VA = "0x9E4274")]
		public static void SetActive(GameObject go, bool isActive)
		{
		}
	}
	[Token(Token = "0x2000311")]
	public static class SpawnerUtility
	{
		[Token(Token = "0x4001220")]
		private const int MaxVisualizeItems = 100;

		[Token(Token = "0x600154F")]
		[Address(RVA = "0x9EB118", Offset = "0x9EB118", VA = "0x9EB118")]
		public static void ActivateWave(Transform transSpawner, int levelNumber, int waveNumber)
		{
		}

		[Token(Token = "0x6001550")]
		[Address(RVA = "0x9EB1A0", Offset = "0x9EB1A0", VA = "0x9EB1A0")]
		public static void ActivateWave(WaveSyncroPrefabSpawner spawner, int levelNumber, int waveNumber)
		{
		}

		[Token(Token = "0x6001551")]
		[Address(RVA = "0x9EB70C", Offset = "0x9EB70C", VA = "0x9EB70C")]
		public static void DeactivateWave(Transform transSpawner, int levelNumber, int waveNumber)
		{
		}

		[Token(Token = "0x6001552")]
		[Address(RVA = "0x9EB794", Offset = "0x9EB794", VA = "0x9EB794")]
		public static void DeactivateWave(WaveSyncroPrefabSpawner spawner, int levelNumber, int waveNumber)
		{
		}

		[Token(Token = "0x6001553")]
		[Address(RVA = "0x9EB1BC", Offset = "0x9EB1BC", VA = "0x9EB1BC")]
		private static void ChangeSpawnerWaveStatus(WaveSyncroPrefabSpawner spawner, int levelNumber, int waveNumber, bool isActivate)
		{
		}

		[Token(Token = "0x6001554")]
		[Address(RVA = "0x9EB7B0", Offset = "0x9EB7B0", VA = "0x9EB7B0")]
		public static void DestroyChildrenWithoutMarker(this GameObject go)
		{
		}

		[Token(Token = "0x6001555")]
		[Address(RVA = "0x9EBC1C", Offset = "0x9EBC1C", VA = "0x9EBC1C")]
		public static int GetMaxVisualizeItems(KillerInt kInt)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000312")]
	public class EventDespawnSpecifics
	{
		[Token(Token = "0x4001221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool eventEnabled;

		[Token(Token = "0x4001222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		public bool useLayerFilter;

		[Token(Token = "0x4001223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
		public bool useTagFilter;

		[Token(Token = "0x4001224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public List<string> matchingTags;

		[Token(Token = "0x4001225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<int> matchingLayers;

		[Token(Token = "0x6001556")]
		[Address(RVA = "0xB7DF58", Offset = "0xB7DF58", VA = "0xB7DF58")]
		public EventDespawnSpecifics()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000313")]
	public class TrigSpawnerWaiterSpecifics
	{
		[Token(Token = "0x4001226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public TriggeredSpawner.EventType EventType;

		[Token(Token = "0x4001227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public TriggeredWaveSpecifics Wave;

		[Token(Token = "0x6001557")]
		[Address(RVA = "0x9EC2D4", Offset = "0x9EC2D4", VA = "0x9EC2D4")]
		public TrigSpawnerWaiterSpecifics()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000314")]
	public class TrigSpawnerWaveWaiter
	{
		[Token(Token = "0x4001228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public TriggeredSpawnerV2 TrigSpawner;

		[Token(Token = "0x4001229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public TriggeredSpawner.EventType EventType;

		[Token(Token = "0x400122A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string CustomEventName;

		[Token(Token = "0x6001558")]
		[Address(RVA = "0x9EC2DC", Offset = "0x9EC2DC", VA = "0x9EC2DC")]
		public TrigSpawnerWaveWaiter()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000315")]
	public class TriggeredWaveMetaData
	{
		[Token(Token = "0x400122B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public WavePrefabPool wavePool;

		[Token(Token = "0x400122C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public List<Transform> spawnedWaveMembers;

		[Token(Token = "0x400122D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int currentWaveSize;

		[Token(Token = "0x400122E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float waveStartTime;

		[Token(Token = "0x400122F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool waveFinishedSpawning;

		[Token(Token = "0x4001230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int countSpawned;

		[Token(Token = "0x4001231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float singleSpawnTime;

		[Token(Token = "0x4001232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float lastSpawnTime;

		[Token(Token = "0x4001233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TriggeredWaveSpecifics waveSpec;

		[Token(Token = "0x4001234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int waveRepetitionNumber;

		[Token(Token = "0x4001235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int waveRepetitionWithResetNum;

		[Token(Token = "0x4001236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float previousWaveEndTime;

		[Token(Token = "0x4001237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float eliminationTime;

		[Token(Token = "0x4001238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Transform lastPrefabKilled;

		[Token(Token = "0x4001239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float wavePauseTime;

		[Token(Token = "0x6001559")]
		[Address(RVA = "0xE9414C", Offset = "0xE9414C", VA = "0xE9414C")]
		public TriggeredWaveMetaData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000316")]
	public class TriggeredWaveSpecifics
	{
		[Token(Token = "0x20003C7")]
		public enum SpawnSource
		{
			[Token(Token = "0x40014A8")]
			Specific,
			[Token(Token = "0x40014A9")]
			PrefabPool
		}

		[Token(Token = "0x400123A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool isExpanded;

		[Token(Token = "0x400123B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		public bool enableWave;

		[Token(Token = "0x400123C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public KillerInt NumberToSpwn;

		[Token(Token = "0x400123D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public KillerInt MaxToSpawn;

		[Token(Token = "0x400123E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public KillerFloat WaveDelaySec;

		[Token(Token = "0x400123F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool doesRepeatUseWaveDelay;

		[Token(Token = "0x4001240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public KillerFloat TimeToSpawnEntireWave;

		[Token(Token = "0x4001241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform prefabToSpawn;

		[Token(Token = "0x4001242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public string prefabToSpawnCategoryName;

		[Token(Token = "0x4001243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool visualizeWave;

		[Token(Token = "0x4001244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public WaveSpecifics.SpawnOrigin spawnSource;

		[Token(Token = "0x4001245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int prefabPoolIndex;

		[Token(Token = "0x4001246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public string prefabPoolName;

		[Token(Token = "0x4001247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool enableRepeatWave;

		[Token(Token = "0x4001248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public TriggeredSpawnerV2.RepeatWaitFor repeatWaitsForType;

		[Token(Token = "0x4001249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public WaveSpecifics.RepeatWaveMode curWaveRepeatMode;

		[Token(Token = "0x400124A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public KillerFloat repeatWavePauseSec;

		[Token(Token = "0x400124B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public KillerFloat repeatWavePauseMax;

		[Token(Token = "0x400124C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public KillerInt maxRepeat;

		[Token(Token = "0x400124D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public KillerInt repeatItemInc;

		[Token(Token = "0x400124E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public KillerInt repeatItemMinLmt;

		[Token(Token = "0x400124F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public KillerInt repeatItemLmt;

		[Token(Token = "0x4001250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public bool resetOnItemLimitReached;

		[Token(Token = "0x4001251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public KillerFloat repeatTimeInc;

		[Token(Token = "0x4001252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public KillerFloat repeatTimeMinLmt;

		[Token(Token = "0x4001253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public KillerFloat repeatTimeLmt;

		[Token(Token = "0x4001254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public bool resetOnTimeLimitReached;

		[Token(Token = "0x4001255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
		public bool useWaveSpawnBonusForRepeats;

		[Token(Token = "0x4001256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6E")]
		public bool useWaveSpawnBonusForBeginning;

		[Token(Token = "0x4001257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6F")]
		public bool waveSpawnFireEvents;

		[Token(Token = "0x4001258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public List<CGKCustomEventToFire> waveSpawnCustomEvents;

		[Token(Token = "0x4001259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public bool waveRepeatFireEvents;

		[Token(Token = "0x400125A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public List<CGKCustomEventToFire> waveRepeatCustomEvents;

		[Token(Token = "0x400125B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public WorldVariableCollection repeatPassCriteria;

		[Token(Token = "0x400125C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool willDespawnOnEvent;

		[Token(Token = "0x400125D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public WaveSpecifics.WaveOffsetChoiceMode offsetChoiceMode;

		[Token(Token = "0x400125E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public List<Vector3> waveOffsetList;

		[Token(Token = "0x400125F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public bool waveSpawnBonusesEnabled;

		[Token(Token = "0x4001260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public WorldVariableCollection waveSpawnVariableModifiers;

		[Token(Token = "0x4001261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public bool waveElimBonusesEnabled;

		[Token(Token = "0x4001262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public WorldVariableCollection waveElimVariableModifiers;

		[Token(Token = "0x4001263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public bool waveElimFireEvents;

		[Token(Token = "0x4001264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public List<CGKCustomEventToFire> waveElimCustomEvents;

		[Token(Token = "0x4001265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public bool useSpawnBonusPrefab;

		[Token(Token = "0x4001266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public WaveSpecifics.SpawnOrigin bonusPrefabSource;

		[Token(Token = "0x4001267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public int bonusPrefabPoolIndex;

		[Token(Token = "0x4001268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public string bonusPrefabPoolName;

		[Token(Token = "0x4001269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public Transform bonusPrefabSpecific;

		[Token(Token = "0x400126A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public KillerInt bonusPrefabSpawnPercent;

		[Token(Token = "0x400126B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public KillerInt bonusPrefabQty;

		[Token(Token = "0x400126C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public string bonusPrefabCategoryName;

		[Token(Token = "0x400126D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public bool useLayerFilter;

		[Token(Token = "0x400126E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC5")]
		public bool useTagFilter;

		[Token(Token = "0x400126F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public List<string> matchingTags;

		[Token(Token = "0x4001270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public List<int> matchingLayers;

		[Token(Token = "0x4001271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public bool positionExpanded;

		[Token(Token = "0x4001272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public WaveSpecifics.PositionMode positionXmode;

		[Token(Token = "0x4001273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public WaveSpecifics.PositionMode positionYmode;

		[Token(Token = "0x4001274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public WaveSpecifics.PositionMode positionZmode;

		[Token(Token = "0x4001275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public KillerFloat customPosX;

		[Token(Token = "0x4001276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public KillerFloat customPosY;

		[Token(Token = "0x4001277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public KillerFloat customPosZ;

		[Token(Token = "0x4001278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public Transform otherObjectX;

		[Token(Token = "0x4001279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Transform otherObjectY;

		[Token(Token = "0x400127A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public Transform otherObjectZ;

		[Token(Token = "0x400127B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public WaveSpecifics.RotationMode curRotationMode;

		[Token(Token = "0x400127C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		public Vector3 customRotation;

		[Token(Token = "0x400127D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public Vector3 keepCenterRotation;

		[Token(Token = "0x400127E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		public WaveSpecifics.SpawnerRotationMode curSpawnerRotMode;

		[Token(Token = "0x400127F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public bool eventOriginIgnoreX;

		[Token(Token = "0x4001280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x119")]
		public bool eventOriginIgnoreY;

		[Token(Token = "0x4001281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11A")]
		public bool eventOriginIgnoreZ;

		[Token(Token = "0x4001282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11B")]
		public bool customEventActive;

		[Token(Token = "0x4001283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		public bool isCustomEvent;

		[Token(Token = "0x4001284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public string customEventName;

		[Token(Token = "0x4001285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		public Vector3 customEventLookRotation;

		[Token(Token = "0x4001286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public bool enableRandomizations;

		[Token(Token = "0x4001287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x131")]
		public bool randomXRotation;

		[Token(Token = "0x4001288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x132")]
		public bool randomYRotation;

		[Token(Token = "0x4001289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x133")]
		public bool randomZRotation;

		[Token(Token = "0x400128A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		public LevelSettings.DistanceType randomDistanceType;

		[Token(Token = "0x400128B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public KillerFloat randomDistX;

		[Token(Token = "0x400128C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		public KillerFloat randomDistY;

		[Token(Token = "0x400128D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public KillerFloat randomDistZ;

		[Token(Token = "0x400128E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		public KillerFloat randomXRotMin;

		[Token(Token = "0x400128F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public KillerFloat randomXRotMax;

		[Token(Token = "0x4001290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		public KillerFloat randomYRotMin;

		[Token(Token = "0x4001291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public KillerFloat randomYRotMax;

		[Token(Token = "0x4001292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		public KillerFloat randomZRotMin;

		[Token(Token = "0x4001293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public KillerFloat randomZRotMax;

		[Token(Token = "0x4001294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		public bool enableIncrements;

		[Token(Token = "0x4001295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15D")]
		public bool enableKeepCenter;

		[Token(Token = "0x4001296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public KillerFloat incrementPositionX;

		[Token(Token = "0x4001297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		public KillerFloat incrementPositionY;

		[Token(Token = "0x4001298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public KillerFloat incrementPositionZ;

		[Token(Token = "0x4001299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		public KillerFloat incrementRotX;

		[Token(Token = "0x400129A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public KillerFloat incrementRotY;

		[Token(Token = "0x400129B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		public KillerFloat incrementRotZ;

		[Token(Token = "0x400129C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public bool enablePostSpawnNudge;

		[Token(Token = "0x400129D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		public KillerFloat postSpawnNudgeFwd;

		[Token(Token = "0x400129E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public KillerFloat postSpawnNudgeRgt;

		[Token(Token = "0x400129F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		public KillerFloat postSpawnNudgeDwn;

		[Token(Token = "0x40012A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public bool stopWaveOnOppositeEvent;

		[Token(Token = "0x40012A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x189")]
		public bool disableAfterFirstTrigger;

		[Token(Token = "0x40012A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		public TriggeredSpawner.RetriggerLimitMode retriggerLimitMode;

		[Token(Token = "0x40012A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public KillerInt limitPerXFrm;

		[Token(Token = "0x40012A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		public KillerFloat limitPerXSec;

		[Token(Token = "0x40012A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public float triggerStayForTime;

		[Token(Token = "0x40012A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		public int trigLastFrame;

		[Token(Token = "0x40012A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public float trigLastTime;

		[Token(Token = "0x40012A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		private int waveOffsetIndex;

		[Token(Token = "0x1700013C")]
		public bool IsValid
		{
			[Token(Token = "0x600155A")]
			[Address(RVA = "0xE96534", Offset = "0xE96534", VA = "0xE96534")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700013D")]
		public Vector3 WaveOffset
		{
			[Token(Token = "0x600155B")]
			[Address(RVA = "0xE90D10", Offset = "0xE90D10", VA = "0xE90D10")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x600155C")]
		[Address(RVA = "0xE9653C", Offset = "0xE9653C", VA = "0xE9653C")]
		public TriggeredWaveSpecifics()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000317")]
	public class WaveSpecifics
	{
		[Token(Token = "0x20003C8")]
		public enum WaveOffsetChoiceMode
		{
			[Token(Token = "0x40014AB")]
			RandomlyChosen,
			[Token(Token = "0x40014AC")]
			UseInOrder
		}

		[Token(Token = "0x20003C9")]
		public enum RepeatWaveMode
		{
			[Token(Token = "0x40014AE")]
			Endless,
			[Token(Token = "0x40014AF")]
			NumberOfRepetitions,
			[Token(Token = "0x40014B0")]
			UntilWorldVariableAbove,
			[Token(Token = "0x40014B1")]
			UntilWorldVariableBelow
		}

		[Token(Token = "0x20003CA")]
		public enum TimedRepeatWaveMode
		{
			[Token(Token = "0x40014B3")]
			EliminationStyle,
			[Token(Token = "0x40014B4")]
			StrictTimeStyle
		}

		[Token(Token = "0x20003CB")]
		public enum SpawnOrigin
		{
			[Token(Token = "0x40014B6")]
			Specific,
			[Token(Token = "0x40014B7")]
			PrefabPool
		}

		[Token(Token = "0x20003CC")]
		public enum PositionMode
		{
			[Token(Token = "0x40014B9")]
			SpawnerPosition,
			[Token(Token = "0x40014BA")]
			CustomPosition,
			[Token(Token = "0x40014BB")]
			OtherObjectPosition
		}

		[Token(Token = "0x20003CD")]
		public enum SpawnerRotationMode
		{
			[Token(Token = "0x40014BD")]
			KeepRotation,
			[Token(Token = "0x40014BE")]
			LookAtCustomEventOrigin
		}

		[Token(Token = "0x20003CE")]
		public enum RotationMode
		{
			[Token(Token = "0x40014C0")]
			UsePrefabRotation,
			[Token(Token = "0x40014C1")]
			UseSpawnerRotation,
			[Token(Token = "0x40014C2")]
			CustomRotation,
			[Token(Token = "0x40014C3")]
			LookAtCustomEventOrigin
		}

		[Token(Token = "0x40012A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool isExpanded;

		[Token(Token = "0x40012AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		public bool enableWave;

		[Token(Token = "0x40012AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
		public bool visualizeWave;

		[Token(Token = "0x40012AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB")]
		public bool isSelectedToCopyFrom;

		[Token(Token = "0x40012AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int SpawnLevelNumber;

		[Token(Token = "0x40012AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int SpawnWaveNumber;

		[Token(Token = "0x40012AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public KillerInt MinToSpwn;

		[Token(Token = "0x40012B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public KillerInt MaxToSpwn;

		[Token(Token = "0x40012B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public LevelSettings.DistanceType randomDistanceType;

		[Token(Token = "0x40012B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public KillerFloat WaveDelaySec;

		[Token(Token = "0x40012B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool doesRepeatUseWaveDelay;

		[Token(Token = "0x40012B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public KillerFloat TimeToSpawnEntireWave;

		[Token(Token = "0x40012B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Transform prefabToSpawn;

		[Token(Token = "0x40012B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string prefabToSpawnCategoryName;

		[Token(Token = "0x40012B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public SpawnOrigin spawnSource;

		[Token(Token = "0x40012B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int prefabPoolIndex;

		[Token(Token = "0x40012B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public string prefabPoolName;

		[Token(Token = "0x40012BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool repeatWaveUntilNew;

		[Token(Token = "0x40012BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int waveCompletePercentage;

		[Token(Token = "0x40012BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool useSpawnBonusPrefab;

		[Token(Token = "0x40012BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public SpawnOrigin bonusPrefabSource;

		[Token(Token = "0x40012BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int bonusPrefabPoolIndex;

		[Token(Token = "0x40012BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public string bonusPrefabPoolName;

		[Token(Token = "0x40012C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform bonusPrefabSpecific;

		[Token(Token = "0x40012C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public KillerInt bonusPrefabSpawnPercent;

		[Token(Token = "0x40012C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public KillerInt bonusPrefabQty;

		[Token(Token = "0x40012C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public string bonusPrefabCategoryName;

		[Token(Token = "0x40012C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public LevelSettings.RepeatToUseItem bonusRepeatToUseItem;

		[Token(Token = "0x40012C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public RepeatWaveMode curWaveRepeatMode;

		[Token(Token = "0x40012C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public TimedRepeatWaveMode curTimedRepeatWaveMode;

		[Token(Token = "0x40012C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public KillerFloat repeatPauseMinimum;

		[Token(Token = "0x40012C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public KillerFloat repeatPauseMaximum;

		[Token(Token = "0x40012C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public KillerInt repeatItemInc;

		[Token(Token = "0x40012CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public KillerInt repeatItemMinLmt;

		[Token(Token = "0x40012CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public KillerInt repeatItemLmt;

		[Token(Token = "0x40012CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool resetOnItemLimitReached;

		[Token(Token = "0x40012CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public KillerFloat repeatTimeInc;

		[Token(Token = "0x40012CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public KillerFloat repeatTimeMinLmt;

		[Token(Token = "0x40012CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public KillerFloat repeatTimeLmt;

		[Token(Token = "0x40012D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool resetOnTimeLimitReached;

		[Token(Token = "0x40012D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public KillerInt repetitionsToDo;

		[Token(Token = "0x40012D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public WorldVariableCollection repeatPassCriteria;

		[Token(Token = "0x40012D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public bool waveRepeatBonusesEnabled;

		[Token(Token = "0x40012D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public WorldVariableCollection waveRepeatVariableModifiers;

		[Token(Token = "0x40012D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public bool waveRepeatFireEvents;

		[Token(Token = "0x40012D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public List<CGKCustomEventToFire> waveRepeatCustomEvents;

		[Token(Token = "0x40012D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public bool positionExpanded;

		[Token(Token = "0x40012D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public PositionMode positionXmode;

		[Token(Token = "0x40012D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public PositionMode positionYmode;

		[Token(Token = "0x40012DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public PositionMode positionZmode;

		[Token(Token = "0x40012DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public KillerFloat customPosX;

		[Token(Token = "0x40012DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public KillerFloat customPosY;

		[Token(Token = "0x40012DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public KillerFloat customPosZ;

		[Token(Token = "0x40012DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Transform otherObjectX;

		[Token(Token = "0x40012DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public Transform otherObjectY;

		[Token(Token = "0x40012E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Transform otherObjectZ;

		[Token(Token = "0x40012E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public RotationMode curRotationMode;

		[Token(Token = "0x40012E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Vector3 customRotation;

		[Token(Token = "0x40012E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public bool enableLimits;

		[Token(Token = "0x40012E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public KillerFloat doNotSpawnIfMbrCloserThan;

		[Token(Token = "0x40012E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public KillerFloat doNotSpawnRandomDist;

		[Token(Token = "0x40012E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public bool enableRandomizations;

		[Token(Token = "0x40012E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF9")]
		public bool randomXRotation;

		[Token(Token = "0x40012E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFA")]
		public bool randomYRotation;

		[Token(Token = "0x40012E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFB")]
		public bool randomZRotation;

		[Token(Token = "0x40012EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		public KillerFloat randomDistX;

		[Token(Token = "0x40012EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public KillerFloat randomDistY;

		[Token(Token = "0x40012EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		public KillerFloat randomDistZ;

		[Token(Token = "0x40012ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public KillerFloat randomXRotMin;

		[Token(Token = "0x40012EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public KillerFloat randomXRotMax;

		[Token(Token = "0x40012EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public KillerFloat randomYRotMin;

		[Token(Token = "0x40012F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		public KillerFloat randomYRotMax;

		[Token(Token = "0x40012F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public KillerFloat randomZRotMin;

		[Token(Token = "0x40012F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		public KillerFloat randomZRotMax;

		[Token(Token = "0x40012F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public bool enableIncrements;

		[Token(Token = "0x40012F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x121")]
		public bool enableKeepCenter;

		[Token(Token = "0x40012F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		public KillerFloat incrementPositionX;

		[Token(Token = "0x40012F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public KillerFloat incrementPositionY;

		[Token(Token = "0x40012F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		public KillerFloat incrementPositionZ;

		[Token(Token = "0x40012F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public KillerFloat incrementRotX;

		[Token(Token = "0x40012F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		public KillerFloat incrementRotY;

		[Token(Token = "0x40012FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public KillerFloat incrementRotZ;

		[Token(Token = "0x40012FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		public WaveOffsetChoiceMode offsetChoiceMode;

		[Token(Token = "0x40012FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public List<Vector3> waveOffsetList;

		[Token(Token = "0x40012FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		public bool enablePostSpawnNudge;

		[Token(Token = "0x40012FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public KillerFloat postSpawnNudgeFwd;

		[Token(Token = "0x40012FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		public KillerFloat postSpawnNudgeRgt;

		[Token(Token = "0x4001300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public KillerFloat postSpawnNudgeDwn;

		[Token(Token = "0x4001301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		private int waveOffsetIndex;

		[Token(Token = "0x1700013E")]
		public bool IsValid
		{
			[Token(Token = "0x600155D")]
			[Address(RVA = "0xE9990C", Offset = "0xE9990C", VA = "0xE9990C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700013F")]
		public Vector3 WaveOffset
		{
			[Token(Token = "0x600155E")]
			[Address(RVA = "0xE999D4", Offset = "0xE999D4", VA = "0xE999D4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x600155F")]
		[Address(RVA = "0xE99B68", Offset = "0xE99B68", VA = "0xE99B68")]
		public WaveSpecifics()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000318")]
	public class InGameWorldVariable
	{
		[Token(Token = "0x4001302")]
		private const string PlayerPrefStatToken = "~KWStat_{0}~";

		[Token(Token = "0x4001303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private readonly string _statName;

		[Token(Token = "0x4001304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private readonly WorldVariable _sourceStat;

		[Token(Token = "0x4001305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly WorldVariableTracker.VariableType _varType;

		[Token(Token = "0x4001306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private string _tokenizedPrefsKey;

		[Token(Token = "0x17000140")]
		public WorldVariableTracker.VariableType VariableType
		{
			[Token(Token = "0x6001561")]
			[Address(RVA = "0xB7E0F0", Offset = "0xB7E0F0", VA = "0xB7E0F0")]
			get
			{
				return default(WorldVariableTracker.VariableType);
			}
		}

		[Token(Token = "0x17000141")]
		public int CurrentIntValue
		{
			[Token(Token = "0x6001562")]
			[Address(RVA = "0xB7E0F8", Offset = "0xB7E0F8", VA = "0xB7E0F8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001563")]
			[Address(RVA = "0xB7E294", Offset = "0xB7E294", VA = "0xB7E294")]
			set
			{
			}
		}

		[Token(Token = "0x17000142")]
		public float CurrentFloatValue
		{
			[Token(Token = "0x6001565")]
			[Address(RVA = "0xB7E99C", Offset = "0xB7E99C", VA = "0xB7E99C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001566")]
			[Address(RVA = "0xB7EABC", Offset = "0xB7EABC", VA = "0xB7EABC")]
			set
			{
			}
		}

		[Token(Token = "0x17000143")]
		private string TokenizedPrefsKey
		{
			[Token(Token = "0x6001572")]
			[Address(RVA = "0xB7E210", Offset = "0xB7E210", VA = "0xB7E210")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001560")]
		[Address(RVA = "0xB7E06C", Offset = "0xB7E06C", VA = "0xB7E06C")]
		public InGameWorldVariable(WorldVariable srcStat, string statName, WorldVariableTracker.VariableType varType)
		{
		}

		[Token(Token = "0x6001564")]
		[Address(RVA = "0xB7E58C", Offset = "0xB7E58C", VA = "0xB7E58C")]
		private void FireCustomEvents()
		{
		}

		[Token(Token = "0x6001567")]
		[Address(RVA = "0xB7EDF0", Offset = "0xB7EDF0", VA = "0xB7EDF0")]
		public void ModifyVariable(WorldVariableModifier mod)
		{
		}

		[Token(Token = "0x6001568")]
		[Address(RVA = "0xB7E4A4", Offset = "0xB7E4A4", VA = "0xB7E4A4")]
		private void EndGameIfIntInRange()
		{
		}

		[Token(Token = "0x6001569")]
		[Address(RVA = "0xB7ECEC", Offset = "0xB7ECEC", VA = "0xB7ECEC")]
		private void EndGameIfFloatInRange()
		{
		}

		[Token(Token = "0x600156A")]
		[Address(RVA = "0xB7F328", Offset = "0xB7F328", VA = "0xB7F328")]
		public void SetIntValueIfAllowed(int newVal)
		{
		}

		[Token(Token = "0x600156B")]
		[Address(RVA = "0xB7F8AC", Offset = "0xB7F8AC", VA = "0xB7F8AC")]
		public void SetFloatValueIfAllowed(float newVal)
		{
		}

		[Token(Token = "0x600156C")]
		[Address(RVA = "0xB7EC00", Offset = "0xB7EC00", VA = "0xB7EC00")]
		private void UpdateFloatValue(float val, float oldVal)
		{
		}

		[Token(Token = "0x600156D")]
		[Address(RVA = "0xB7E3B8", Offset = "0xB7E3B8", VA = "0xB7E3B8")]
		private void UpdateIntValue(int val, int oldVal)
		{
		}

		[Token(Token = "0x600156E")]
		[Address(RVA = "0xB7F2D8", Offset = "0xB7F2D8", VA = "0xB7F2D8")]
		private void AddToIntValue(int valueToAdd)
		{
		}

		[Token(Token = "0x600156F")]
		[Address(RVA = "0xB7F390", Offset = "0xB7F390", VA = "0xB7F390")]
		private void MultiplyByIntValue(int valueToMultiplyBy)
		{
		}

		[Token(Token = "0x6001570")]
		[Address(RVA = "0xB7F850", Offset = "0xB7F850", VA = "0xB7F850")]
		private void AddToFloatValue(float valueToAdd)
		{
		}

		[Token(Token = "0x6001571")]
		[Address(RVA = "0xB7F934", Offset = "0xB7F934", VA = "0xB7F934")]
		private void MultiplyByFloatValue(float valueToMultiplyBy)
		{
		}

		[Token(Token = "0x6001573")]
		[Address(RVA = "0xB7FE00", Offset = "0xB7FE00", VA = "0xB7FE00")]
		public static string GetTokenPrefsKey(string myStatName)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000319")]
	public class WorldVariable : MonoBehaviour
	{
		[Token(Token = "0x20003CF")]
		public enum StatPersistanceMode
		{
			[Token(Token = "0x40014C5")]
			ResetToStartingValue,
			[Token(Token = "0x40014C6")]
			KeepFromPrevious
		}

		[Token(Token = "0x20003D0")]
		public enum VariableChangeMode
		{
			[Token(Token = "0x40014C8")]
			OnlyIncrease,
			[Token(Token = "0x40014C9")]
			OnlyDecrease,
			[Token(Token = "0x40014CA")]
			Any
		}

		[Token(Token = "0x4001307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool isExpanded;

		[Token(Token = "0x4001308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public WorldVariableTracker.VariableType varType;

		[Token(Token = "0x4001309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool allowNegative;

		[Token(Token = "0x400130A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		public bool canEndGame;

		[Token(Token = "0x400130B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
		public bool hasMaxValue;

		[Token(Token = "0x400130C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int startingValue;

		[Token(Token = "0x400130D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int endGameMinValue;

		[Token(Token = "0x400130E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int endGameMaxValue;

		[Token(Token = "0x400130F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int prospectiveValue;

		[Token(Token = "0x4001310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int intMaxValue;

		[Token(Token = "0x4001311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float startingValueFloat;

		[Token(Token = "0x4001312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float endGameMinValueFloat;

		[Token(Token = "0x4001313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float endGameMaxValueFloat;

		[Token(Token = "0x4001314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float prospectiveFloatValue;

		[Token(Token = "0x4001315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float floatMaxValue;

		[Token(Token = "0x4001316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public StatPersistanceMode persistanceMode;

		[Token(Token = "0x4001317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public WorldVariableListener listenerPrefab;

		[Token(Token = "0x4001318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public VariableChangeMode changeMode;

		[Token(Token = "0x4001319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool fireEventsOnChange;

		[Token(Token = "0x400131A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<CGKCustomEventToFire> changeCustomEventsToFire;

		[Token(Token = "0x6001574")]
		[Address(RVA = "0xEA624C", Offset = "0xEA624C", VA = "0xEA624C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001575")]
		[Address(RVA = "0xEA6258", Offset = "0xEA6258", VA = "0xEA6258")]
		private void Start()
		{
		}

		[Token(Token = "0x6001576")]
		[Address(RVA = "0xEA6338", Offset = "0xEA6338", VA = "0xEA6338")]
		public WorldVariable()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200031A")]
	public class WorldVariableCollection
	{
		[Token(Token = "0x400131B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string scenarioName;

		[Token(Token = "0x400131C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public List<WorldVariableModifier> statMods;

		[Token(Token = "0x6001577")]
		[Address(RVA = "0xEA63E0", Offset = "0xEA63E0", VA = "0xEA63E0")]
		public void DeleteByIndex(int index)
		{
		}

		[Token(Token = "0x6001578")]
		[Address(RVA = "0xEA6454", Offset = "0xEA6454", VA = "0xEA6454")]
		public bool HasKey(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x6001579")]
		[Address(RVA = "0xE9A294", Offset = "0xE9A294", VA = "0xE9A294")]
		public WorldVariableCollection()
		{
		}
	}
	[Token(Token = "0x200031B")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x3966B8", Offset = "0x3966B8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x3966B8", Offset = "0x3966B8")]
	public class WorldVariableListener : MonoBehaviour
	{
		[Token(Token = "0x400131D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string variableName;

		[Token(Token = "0x400131E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public WorldVariableTracker.VariableType vType;

		[Token(Token = "0x400131F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool displayVariableName;

		[Token(Token = "0x4001320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int decimalPlaces;

		[Token(Token = "0x4001321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool useCommaFormatting;

		[Token(Token = "0x4001322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool useFixedNumberOfDigits;

		[Token(Token = "0x4001323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int fixedDigitCount;

		[Token(Token = "0x4001324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int _variableValue;

		[Token(Token = "0x4001325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float _variableFloatValue;

		[Token(Token = "0x4001326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Text _text;

		[Token(Token = "0x600157A")]
		[Address(RVA = "0xEA6520", Offset = "0xEA6520", VA = "0xEA6520")]
		private void Awake()
		{
		}

		[Token(Token = "0x600157B")]
		[Address(RVA = "0xEA6580", Offset = "0xEA6580", VA = "0xEA6580")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600157C")]
		[Address(RVA = "0xEA6890", Offset = "0xEA6890", VA = "0xEA6890", Slot = "4")]
		public virtual void UpdateValue(int newValue, int oldVal)
		{
		}

		[Token(Token = "0x600157D")]
		[Address(RVA = "0xEA6AF4", Offset = "0xEA6AF4", VA = "0xEA6AF4", Slot = "5")]
		public virtual void UpdateFloatValue(float newValue, float oldVal)
		{
		}

		[Token(Token = "0x600157E")]
		[Address(RVA = "0xEA6D20", Offset = "0xEA6D20", VA = "0xEA6D20")]
		public WorldVariableListener()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200031C")]
	public class WorldVariableModifier
	{
		[Token(Token = "0x4001327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string _statName;

		[Token(Token = "0x4001328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public KillerInt _modValueIntAmt;

		[Token(Token = "0x4001329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public KillerFloat _modValueFloatAmt;

		[Token(Token = "0x400132A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public WorldVariableTracker.VariableType _varTypeToUse;

		[Token(Token = "0x600157F")]
		[Address(RVA = "0xEA6D98", Offset = "0xEA6D98", VA = "0xEA6D98")]
		public WorldVariableModifier(string statName, WorldVariableTracker.VariableType vType)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200031D")]
	public class WorldVariableRange
	{
		[Token(Token = "0x400132B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int _modValueIntMin;

		[Token(Token = "0x400132C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int _modValueIntMax;

		[Token(Token = "0x400132D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float _modValueFloatMin;

		[Token(Token = "0x400132E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float _modValueFloatMax;

		[Token(Token = "0x400132F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string _statName;

		[Token(Token = "0x4001330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public WorldVariableTracker.VariableType _varTypeToUse;

		[Token(Token = "0x6001580")]
		[Address(RVA = "0xEA6E68", Offset = "0xEA6E68", VA = "0xEA6E68")]
		public WorldVariableRange(string statName, WorldVariableTracker.VariableType vType)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200031E")]
	public class WorldVariableRangeCollection
	{
		[Token(Token = "0x4001331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public List<WorldVariableRange> statMods;

		[Token(Token = "0x6001581")]
		[Address(RVA = "0xEA6E90", Offset = "0xEA6E90", VA = "0xEA6E90")]
		public void DeleteByIndex(int index)
		{
		}

		[Token(Token = "0x6001582")]
		[Address(RVA = "0xEA6F04", Offset = "0xEA6F04", VA = "0xEA6F04")]
		public bool HasKey(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x6001583")]
		[Address(RVA = "0xE997B4", Offset = "0xE997B4", VA = "0xE997B4")]
		public WorldVariableRangeCollection()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200031F")]
	public class WorldVariableTracker : MonoBehaviour
	{
		[Token(Token = "0x20003D1")]
		public enum VariableType
		{
			[Token(Token = "0x40014CC")]
			_integer,
			[Token(Token = "0x40014CD")]
			_float
		}

		[Token(Token = "0x4001332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<string, InGameWorldVariable> _inGamePlayerStats;

		[Token(Token = "0x4001333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static bool _doneInitializing;

		[Token(Token = "0x4001334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Transform statPrefab;

		[Token(Token = "0x4001335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string newVariableName;

		[Token(Token = "0x4001336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool showNewVarSection;

		[Token(Token = "0x4001337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VariableType newVarType;

		[Token(Token = "0x4001338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool worldVariablesExpanded;

		[Token(Token = "0x4001339")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool showIntVars;

		[Token(Token = "0x400133A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		public bool showFloatVars;

		[Token(Token = "0x400133B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int frames;

		[Token(Token = "0x400133C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Transform _trans;

		[Token(Token = "0x400133D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static WorldVariableTracker _instance;

		[Token(Token = "0x17000144")]
		public static WorldVariableTracker Instance
		{
			[Token(Token = "0x6001586")]
			[Address(RVA = "0xEA75D4", Offset = "0xEA75D4", VA = "0xEA75D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000145")]
		public static Dictionary<string, InGameWorldVariable> InGamePlayerStats
		{
			[Token(Token = "0x6001594")]
			[Address(RVA = "0xEA799C", Offset = "0xEA799C", VA = "0xEA799C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000146")]
		public static Transform TrackerTransform
		{
			[Token(Token = "0x6001596")]
			[Address(RVA = "0xEA7750", Offset = "0xEA7750", VA = "0xEA7750")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000147")]
		public static bool IsInitializing
		{
			[Token(Token = "0x6001597")]
			[Address(RVA = "0xEA86AC", Offset = "0xEA86AC", VA = "0xEA86AC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001584")]
		[Address(RVA = "0xEA6FD0", Offset = "0xEA6FD0", VA = "0xEA6FD0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001585")]
		[Address(RVA = "0xEA7578", Offset = "0xEA7578", VA = "0xEA7578")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001587")]
		[Address(RVA = "0xEA7740", Offset = "0xEA7740", VA = "0xEA7740")]
		private void Update()
		{
		}

		[Token(Token = "0x6001588")]
		[Address(RVA = "0xEA6FEC", Offset = "0xEA6FEC", VA = "0xEA6FEC")]
		private static void Init()
		{
		}

		[Token(Token = "0x6001589")]
		[Address(RVA = "0xE98C50", Offset = "0xE98C50", VA = "0xE98C50")]
		public static bool VariableExistsInScene(string statName)
		{
			return default(bool);
		}

		[Token(Token = "0x600158A")]
		[Address(RVA = "0xEA54D0", Offset = "0xEA54D0", VA = "0xEA54D0")]
		public static bool IsBlankVariableName(string statName)
		{
			return default(bool);
		}

		[Token(Token = "0x600158B")]
		[Address(RVA = "0xEA7A0C", Offset = "0xEA7A0C", VA = "0xEA7A0C")]
		public static void ForceReInit()
		{
		}

		[Token(Token = "0x600158C")]
		[Address(RVA = "0xEA1E40", Offset = "0xEA1E40", VA = "0xEA1E40")]
		public static void ModifyPlayerStat(WorldVariableModifier modifier, [Optional] Transform sourceTrans)
		{
		}

		[Token(Token = "0x600158D")]
		[Address(RVA = "0xE98CC4", Offset = "0xE98CC4", VA = "0xE98CC4")]
		public static InGameWorldVariable GetWorldVariable(string statName)
		{
			return null;
		}

		[Token(Token = "0x600158E")]
		[Address(RVA = "0xEA785C", Offset = "0xEA785C", VA = "0xEA785C")]
		public static int? GetExistingWorldVariableIntValue(string variableName, int startingValue)
		{
			return null;
		}

		[Token(Token = "0x600158F")]
		[Address(RVA = "0xEA7A6C", Offset = "0xEA7A6C", VA = "0xEA7A6C")]
		public static float? GetExistingWorldVariableFloatValue(string variableName, float startingValue)
		{
			return null;
		}

		[Token(Token = "0x6001590")]
		[Address(RVA = "0xEA6584", Offset = "0xEA6584", VA = "0xEA6584")]
		public static void UpdateAllListeners()
		{
		}

		[Token(Token = "0x6001591")]
		[Address(RVA = "0xEA7BAC", Offset = "0xEA7BAC", VA = "0xEA7BAC")]
		public static string GetVariableTypeFriendlyString(VariableType varType)
		{
			return null;
		}

		[Token(Token = "0x6001592")]
		[Address(RVA = "0xEA7CE0", Offset = "0xEA7CE0", VA = "0xEA7CE0")]
		public static WorldVariable GetWorldVariableScript(string varName)
		{
			return null;
		}

		[Token(Token = "0x6001593")]
		[Address(RVA = "0xEA7E60", Offset = "0xEA7E60", VA = "0xEA7E60")]
		public static void LogIfInvalidWorldVariable(string worldVariableName, Transform trans, string fieldName, [Optional] int? levelNum, [Optional] int? waveNum, [Optional] string trigEventName)
		{
		}

		[Token(Token = "0x6001595")]
		[Address(RVA = "0xEA8640", Offset = "0xEA8640", VA = "0xEA8640")]
		public static void ClearInGamePlayerStats()
		{
		}

		[Token(Token = "0x6001598")]
		[Address(RVA = "0xEA870C", Offset = "0xEA870C", VA = "0xEA870C")]
		public static void FlushAll()
		{
		}

		[Token(Token = "0x6001599")]
		[Address(RVA = "0xEA8780", Offset = "0xEA8780", VA = "0xEA8780")]
		public WorldVariableTracker()
		{
		}
	}
}
