using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Threading;
using AudioTrip;
using DebuggingEssentials;
using Il2CppDummyDll;
using NGTools.NGGameConsole;
using RootMotion.FinalIK;
using SonicBloom.Koreo;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.Playables;
using UnityEngine.Rendering;
using UnityEngine.SceneManagement;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
public class SO_WindowManager : ScriptableObject
{
	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public FloatInputField guiScale;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool useDontDestroyOnLoadScene;

	[Token(Token = "0x6000001")]
	[Address(RVA = "0x2FD7F70", Offset = "0x2FD7F70", VA = "0x2FD7F70")]
	public SO_WindowManager()
	{
	}
}
[Token(Token = "0x2000003")]
public static class MaterialModifier
{
	[Token(Token = "0x20001A1")]
	public interface Interface
	{
		[Token(Token = "0x6000C5A")]
		void SetMaterialProp(int nameID, float value);

		[Token(Token = "0x6000C5B")]
		void SetMaterialProp(int nameID, Vector4 value);

		[Token(Token = "0x6000C5C")]
		void SetMaterialProp(int nameID, Color value);

		[Token(Token = "0x6000C5D")]
		void SetMaterialProp(int nameID, Matrix4x4 value);

		[Token(Token = "0x6000C5E")]
		void SetMaterialProp(int nameID, Texture value);
	}

	[Token(Token = "0x20001A2")]
	public delegate void Callback(Interface owner);
}
[Token(Token = "0x2000004")]
public static class SRPHelper
{
	[Token(Token = "0x20001A3")]
	public enum RenderPipeline
	{
		[Token(Token = "0x4000B63")]
		BuiltIn,
		[Token(Token = "0x4000B64")]
		URP,
		[Token(Token = "0x4000B65")]
		LWRP,
		[Token(Token = "0x4000B66")]
		HDRP
	}

	[Token(Token = "0x17000001")]
	public static RenderPipeline renderPipelineType
	{
		[Token(Token = "0x6000002")]
		[Address(RVA = "0x2FD7FE8", Offset = "0x2FD7FE8", VA = "0x2FD7FE8")]
		get
		{
			return default(RenderPipeline);
		}
	}

	[Token(Token = "0x6000003")]
	[Address(RVA = "0x2FD80FC", Offset = "0x2FD80FC", VA = "0x2FD80FC")]
	public static bool IsUsingCustomRenderPipeline()
	{
		return default(bool);
	}

	[Token(Token = "0x6000004")]
	[Address(RVA = "0x2FD81F0", Offset = "0x2FD81F0", VA = "0x2FD81F0")]
	public static void RegisterOnBeginCameraRendering(Action<ScriptableRenderContext, Camera> cb)
	{
	}

	[Token(Token = "0x6000005")]
	[Address(RVA = "0x2FD8278", Offset = "0x2FD8278", VA = "0x2FD8278")]
	public static void UnregisterOnBeginCameraRendering(Action<ScriptableRenderContext, Camera> cb)
	{
	}
}
namespace UnityStandardAssets.CinematicEffects
{
	[Token(Token = "0x2000005")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x15D37A8", Offset = "0x15D37A8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x15D37A8", Offset = "0x15D37A8")]
	[ImageEffectAllowedInSceneView]
	public class AntiAliasing : MonoBehaviour
	{
		[Token(Token = "0x20001A4")]
		public enum Method
		{
			[Token(Token = "0x4000B68")]
			Smaa,
			[Token(Token = "0x4000B69")]
			Fxaa
		}

		[Token(Token = "0x4000003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private SMAA m_SMAA;

		[Token(Token = "0x4000004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private FXAA m_FXAA;

		[Token(Token = "0x4000005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[HideInInspector]
		private int m_Method;

		[Token(Token = "0x4000006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Camera m_Camera;

		[Token(Token = "0x17000002")]
		public int method
		{
			[Token(Token = "0x6000006")]
			[Address(RVA = "0x2B31C60", Offset = "0x2B31C60", VA = "0x2B31C60")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000007")]
			[Address(RVA = "0x2B31C68", Offset = "0x2B31C68", VA = "0x2B31C68")]
			set
			{
			}
		}

		[Token(Token = "0x17000003")]
		public IAntiAliasing current
		{
			[Token(Token = "0x6000008")]
			[Address(RVA = "0x2B31C7C", Offset = "0x2B31C7C", VA = "0x2B31C7C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000004")]
		public Camera cameraComponent
		{
			[Token(Token = "0x6000009")]
			[Address(RVA = "0x2B31C94", Offset = "0x2B31C94", VA = "0x2B31C94")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600000A")]
		[Address(RVA = "0x2B31D40", Offset = "0x2B31D40", VA = "0x2B31D40")]
		private void Awake()
		{
		}

		[Token(Token = "0x600000B")]
		[Address(RVA = "0x2B31F14", Offset = "0x2B31F14", VA = "0x2B31F14")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600000C")]
		[Address(RVA = "0x2B31FF8", Offset = "0x2B31FF8", VA = "0x2B31FF8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600000D")]
		[Address(RVA = "0x2B32200", Offset = "0x2B32200", VA = "0x2B32200")]
		private void OnPreCull()
		{
		}

		[Token(Token = "0x600000E")]
		[Address(RVA = "0x2B322D4", Offset = "0x2B322D4", VA = "0x2B322D4")]
		private void OnPostRender()
		{
		}

		[Token(Token = "0x600000F")]
		[Address(RVA = "0x2B323A8", Offset = "0x2B323A8", VA = "0x2B323A8")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000010")]
		[Address(RVA = "0x2B32494", Offset = "0x2B32494", VA = "0x2B32494")]
		public AntiAliasing()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000006")]
	public class FXAA : IAntiAliasing
	{
		[Serializable]
		[Token(Token = "0x20001A5")]
		public struct QualitySettings
		{
			[Token(Token = "0x4000B6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DCE28", Offset = "0x15DCE28")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DCE28", Offset = "0x15DCE28")]
			public float subpixelAliasingRemovalAmount;

			[Token(Token = "0x4000B6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DCE7C", Offset = "0x15DCE7C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DCE7C", Offset = "0x15DCE7C")]
			public float edgeDetectionThreshold;

			[Token(Token = "0x4000B6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DCED8", Offset = "0x15DCED8")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DCED8", Offset = "0x15DCED8")]
			public float minimumRequiredLuminance;
		}

		[Serializable]
		[Token(Token = "0x20001A6")]
		public struct ConsoleSettings
		{
			[Token(Token = "0x4000B6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DCF30", Offset = "0x15DCF30")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DCF30", Offset = "0x15DCF30")]
			public float subpixelSpreadAmount;

			[Token(Token = "0x4000B6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DCF88", Offset = "0x15DCF88")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DCF88", Offset = "0x15DCF88")]
			public float edgeSharpnessAmount;

			[Token(Token = "0x4000B6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DCFDC", Offset = "0x15DCFDC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DCFDC", Offset = "0x15DCFDC")]
			public float edgeDetectionThreshold;

			[Token(Token = "0x4000B70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DD030", Offset = "0x15DD030")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DD030", Offset = "0x15DD030")]
			public float minimumRequiredLuminance;
		}

		[Serializable]
		[Token(Token = "0x20001A7")]
		public struct Preset
		{
			[Token(Token = "0x2000286")]
			[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x15D5824", Offset = "0x15D5824")]
			public class LayoutAttribute : PropertyAttribute
			{
				[Token(Token = "0x6000F15")]
				[Address(RVA = "0x2B36F94", Offset = "0x2B36F94", VA = "0x2B36F94")]
				public LayoutAttribute()
				{
				}
			}

			[Token(Token = "0x4000B71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Layout]
			public QualitySettings qualitySettings;

			[Token(Token = "0x4000B72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Layout]
			public ConsoleSettings consoleSettings;

			[Token(Token = "0x4000B73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static readonly Preset s_ExtremePerformance;

			[Token(Token = "0x4000B74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private static readonly Preset s_Performance;

			[Token(Token = "0x4000B75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private static readonly Preset s_Default;

			[Token(Token = "0x4000B76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private static readonly Preset s_Quality;

			[Token(Token = "0x4000B77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private static readonly Preset s_ExtremeQuality;

			[Token(Token = "0x17000155")]
			public static Preset extremePerformancePreset
			{
				[Token(Token = "0x6000C63")]
				[Address(RVA = "0x2B36C40", Offset = "0x2B36C40", VA = "0x2B36C40")]
				get
				{
					return default(Preset);
				}
			}

			[Token(Token = "0x17000156")]
			public static Preset performancePreset
			{
				[Token(Token = "0x6000C64")]
				[Address(RVA = "0x2B36CB8", Offset = "0x2B36CB8", VA = "0x2B36CB8")]
				get
				{
					return default(Preset);
				}
			}

			[Token(Token = "0x17000157")]
			public static Preset defaultPreset
			{
				[Token(Token = "0x6000C65")]
				[Address(RVA = "0x2B36D30", Offset = "0x2B36D30", VA = "0x2B36D30")]
				get
				{
					return default(Preset);
				}
			}

			[Token(Token = "0x17000158")]
			public static Preset qualityPreset
			{
				[Token(Token = "0x6000C66")]
				[Address(RVA = "0x2B36DA8", Offset = "0x2B36DA8", VA = "0x2B36DA8")]
				get
				{
					return default(Preset);
				}
			}

			[Token(Token = "0x17000159")]
			public static Preset extremeQualityPreset
			{
				[Token(Token = "0x6000C67")]
				[Address(RVA = "0x2B36E20", Offset = "0x2B36E20", VA = "0x2B36E20")]
				get
				{
					return default(Preset);
				}
			}
		}

		[Token(Token = "0x4000007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Shader m_Shader;

		[Token(Token = "0x4000008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Material m_Material;

		[Token(Token = "0x4000009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[HideInInspector]
		public Preset preset;

		[Token(Token = "0x400000A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Preset[] availablePresets;

		[Token(Token = "0x400000B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D58DC", Offset = "0x15D58DC")]
		private bool <validSourceFormat>k__BackingField;

		[Token(Token = "0x400000C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int m_QualitySettings;

		[Token(Token = "0x400000D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int m_ConsoleSettings;

		[Token(Token = "0x17000005")]
		private Shader shader
		{
			[Token(Token = "0x6000011")]
			[Address(RVA = "0x2B36688", Offset = "0x2B36688", VA = "0x2B36688")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000006")]
		public Material material
		{
			[Token(Token = "0x6000012")]
			[Address(RVA = "0x2B36728", Offset = "0x2B36728", VA = "0x2B36728")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000007")]
		public bool validSourceFormat
		{
			[Token(Token = "0x6000013")]
			[Address(RVA = "0x2B367CC", Offset = "0x2B367CC", VA = "0x2B367CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E26D0", Offset = "0x15E26D0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000014")]
			[Address(RVA = "0x2B367D4", Offset = "0x2B367D4", VA = "0x2B367D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E26E0", Offset = "0x15E26E0")]
			private set
			{
			}
		}

		[Token(Token = "0x6000015")]
		[Address(RVA = "0x2B31EA4", Offset = "0x2B31EA4", VA = "0x2B31EA4", Slot = "4")]
		public void Awake()
		{
		}

		[Token(Token = "0x6000016")]
		[Address(RVA = "0x2B31FA4", Offset = "0x2B31FA4", VA = "0x2B31FA4", Slot = "5")]
		public void OnEnable(AntiAliasing owner)
		{
		}

		[Token(Token = "0x6000017")]
		[Address(RVA = "0x2B3214C", Offset = "0x2B3214C", VA = "0x2B3214C", Slot = "6")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6000018")]
		[Address(RVA = "0x2B367E0", Offset = "0x2B367E0", VA = "0x2B367E0", Slot = "7")]
		public void OnPreCull(Camera camera)
		{
		}

		[Token(Token = "0x6000019")]
		[Address(RVA = "0x2B367E4", Offset = "0x2B367E4", VA = "0x2B367E4", Slot = "8")]
		public void OnPostRender(Camera camera)
		{
		}

		[Token(Token = "0x600001A")]
		[Address(RVA = "0x2B367E8", Offset = "0x2B367E8", VA = "0x2B367E8", Slot = "9")]
		public void OnRenderImage(Camera camera, RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600001B")]
		[Address(RVA = "0x2B32604", Offset = "0x2B32604", VA = "0x2B32604")]
		public FXAA()
		{
		}
	}
	[Token(Token = "0x2000007")]
	public interface IAntiAliasing
	{
		[Token(Token = "0x600001D")]
		void Awake();

		[Token(Token = "0x600001E")]
		void OnEnable(AntiAliasing owner);

		[Token(Token = "0x600001F")]
		void OnDisable();

		[Token(Token = "0x6000020")]
		void OnPreCull(Camera camera);

		[Token(Token = "0x6000021")]
		void OnPostRender(Camera camera);

		[Token(Token = "0x6000022")]
		void OnRenderImage(Camera camera, RenderTexture source, RenderTexture destination);
	}
	[Serializable]
	[Token(Token = "0x2000008")]
	public class SMAA : IAntiAliasing
	{
		[Token(Token = "0x20001A8")]
		[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x15D55BC", Offset = "0x15D55BC")]
		public class SettingsGroup : Attribute
		{
			[Token(Token = "0x6000C69")]
			[Address(RVA = "0x2B3A7E8", Offset = "0x2B3A7E8", VA = "0x2B3A7E8")]
			public SettingsGroup()
			{
			}
		}

		[Token(Token = "0x20001A9")]
		[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x15D55D0", Offset = "0x15D55D0")]
		public class TopLevelSettings : Attribute
		{
			[Token(Token = "0x6000C6A")]
			[Address(RVA = "0x2B3A7F8", Offset = "0x2B3A7F8", VA = "0x2B3A7F8")]
			public TopLevelSettings()
			{
			}
		}

		[Token(Token = "0x20001AA")]
		[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x15D55E4", Offset = "0x15D55E4")]
		public class ExperimentalGroup : Attribute
		{
			[Token(Token = "0x6000C6B")]
			[Address(RVA = "0x2B3A6C4", Offset = "0x2B3A6C4", VA = "0x2B3A6C4")]
			public ExperimentalGroup()
			{
			}
		}

		[Token(Token = "0x20001AB")]
		public enum DebugPass
		{
			[Token(Token = "0x4000B79")]
			Off,
			[Token(Token = "0x4000B7A")]
			Edges,
			[Token(Token = "0x4000B7B")]
			Weights,
			[Token(Token = "0x4000B7C")]
			Accumulation
		}

		[Token(Token = "0x20001AC")]
		public enum QualityPreset
		{
			[Token(Token = "0x4000B7E")]
			Low,
			[Token(Token = "0x4000B7F")]
			Medium,
			[Token(Token = "0x4000B80")]
			High,
			[Token(Token = "0x4000B81")]
			Ultra,
			[Token(Token = "0x4000B82")]
			Custom
		}

		[Token(Token = "0x20001AD")]
		public enum EdgeDetectionMethod
		{
			[Token(Token = "0x4000B84")]
			Luma = 1,
			[Token(Token = "0x4000B85")]
			Color,
			[Token(Token = "0x4000B86")]
			Depth
		}

		[Serializable]
		[Token(Token = "0x20001AE")]
		public struct GlobalSettings
		{
			[Token(Token = "0x4000B87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DD0AC", Offset = "0x15DD0AC")]
			public DebugPass debugPass;

			[Token(Token = "0x4000B88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DD0E4", Offset = "0x15DD0E4")]
			public QualityPreset quality;

			[Token(Token = "0x4000B89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DD11C", Offset = "0x15DD11C")]
			public EdgeDetectionMethod edgeDetectionMethod;

			[Token(Token = "0x1700015A")]
			public static GlobalSettings defaultSettings
			{
				[Token(Token = "0x6000C6C")]
				[Address(RVA = "0x2B3A698", Offset = "0x2B3A698", VA = "0x2B3A698")]
				get
				{
					return default(GlobalSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x20001AF")]
		public struct QualitySettings
		{
			[Token(Token = "0x4000B8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DD154", Offset = "0x15DD154")]
			public bool diagonalDetection;

			[Token(Token = "0x4000B8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DD18C", Offset = "0x15DD18C")]
			public bool cornerDetection;

			[Token(Token = "0x4000B8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DD1C4", Offset = "0x15DD1C4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DD1C4", Offset = "0x15DD1C4")]
			public float threshold;

			[Token(Token = "0x4000B8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "MinAttribute", RVA = "0x15DD218", Offset = "0x15DD218")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DD218", Offset = "0x15DD218")]
			public float depthThreshold;

			[Token(Token = "0x4000B8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DD26C", Offset = "0x15DD26C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DD26C", Offset = "0x15DD26C")]
			public int maxSearchSteps;

			[Token(Token = "0x4000B8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DD2C4", Offset = "0x15DD2C4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DD2C4", Offset = "0x15DD2C4")]
			public int maxDiagonalSearchSteps;

			[Token(Token = "0x4000B90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DD318", Offset = "0x15DD318")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DD318", Offset = "0x15DD318")]
			public int cornerRounding;

			[Token(Token = "0x4000B91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "MinAttribute", RVA = "0x15DD370", Offset = "0x15DD370")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DD370", Offset = "0x15DD370")]
			public float localContrastAdaptationFactor;

			[Token(Token = "0x4000B92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static QualitySettings[] presetQualitySettings;
		}

		[Serializable]
		[Token(Token = "0x20001B0")]
		public struct TemporalSettings
		{
			[Token(Token = "0x4000B93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DD3C0", Offset = "0x15DD3C0")]
			public bool enabled;

			[Token(Token = "0x4000B94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DD3F8", Offset = "0x15DD3F8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DD3F8", Offset = "0x15DD3F8")]
			public float fuzzSize;

			[Token(Token = "0x1700015B")]
			public static TemporalSettings defaultSettings
			{
				[Token(Token = "0x6000C6F")]
				[Address(RVA = "0x2B3A6BC", Offset = "0x2B3A6BC", VA = "0x2B3A6BC")]
				get
				{
					return default(TemporalSettings);
				}
			}

			[Token(Token = "0x6000C6E")]
			[Address(RVA = "0x2B3A7F0", Offset = "0x2B3A7F0", VA = "0x2B3A7F0")]
			public bool UseTemporal()
			{
				return default(bool);
			}
		}

		[Serializable]
		[Token(Token = "0x20001B1")]
		public struct PredicationSettings
		{
			[Token(Token = "0x4000B95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DD44C", Offset = "0x15DD44C")]
			public bool enabled;

			[Token(Token = "0x4000B96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "MinAttribute", RVA = "0x15DD484", Offset = "0x15DD484")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DD484", Offset = "0x15DD484")]
			public float threshold;

			[Token(Token = "0x4000B97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DD4D8", Offset = "0x15DD4D8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DD4D8", Offset = "0x15DD4D8")]
			public float scale;

			[Token(Token = "0x4000B98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DD52C", Offset = "0x15DD52C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DD52C", Offset = "0x15DD52C")]
			public float strength;

			[Token(Token = "0x1700015C")]
			public static PredicationSettings defaultSettings
			{
				[Token(Token = "0x6000C70")]
				[Address(RVA = "0x2B3A6A4", Offset = "0x2B3A6A4", VA = "0x2B3A6A4")]
				get
				{
					return default(PredicationSettings);
				}
			}
		}

		[Token(Token = "0x400000E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[TopLevelSettings]
		public GlobalSettings settings;

		[Token(Token = "0x400000F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SettingsGroup]
		public QualitySettings quality;

		[Token(Token = "0x4000010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SettingsGroup]
		public PredicationSettings predication;

		[Token(Token = "0x4000011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SettingsGroup]
		[ExperimentalGroup]
		public TemporalSettings temporal;

		[Token(Token = "0x4000012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Matrix4x4 m_ProjectionMatrix;

		[Token(Token = "0x4000013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Matrix4x4 m_PreviousViewProjectionMatrix;

		[Token(Token = "0x4000014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float m_FlipFlop;

		[Token(Token = "0x4000015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private RenderTexture m_Accumulation;

		[Token(Token = "0x4000016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Shader m_Shader;

		[Token(Token = "0x4000017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Texture2D m_AreaTexture;

		[Token(Token = "0x4000018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Texture2D m_SearchTexture;

		[Token(Token = "0x4000019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Material m_Material;

		[Token(Token = "0x400001A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private int m_AreaTex;

		[Token(Token = "0x400001B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private int m_SearchTex;

		[Token(Token = "0x400001C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private int m_Metrics;

		[Token(Token = "0x400001D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private int m_Params1;

		[Token(Token = "0x400001E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private int m_Params2;

		[Token(Token = "0x400001F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private int m_Params3;

		[Token(Token = "0x4000020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private int m_ReprojectionMatrix;

		[Token(Token = "0x4000021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private int m_SubsampleIndices;

		[Token(Token = "0x4000022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private int m_BlendTex;

		[Token(Token = "0x4000023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private int m_AccumulationTex;

		[Token(Token = "0x17000008")]
		public Shader shader
		{
			[Token(Token = "0x6000023")]
			[Address(RVA = "0x2B397E0", Offset = "0x2B397E0", VA = "0x2B397E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000009")]
		private Texture2D areaTexture
		{
			[Token(Token = "0x6000024")]
			[Address(RVA = "0x2B39880", Offset = "0x2B39880", VA = "0x2B39880")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000A")]
		private Texture2D searchTexture
		{
			[Token(Token = "0x6000025")]
			[Address(RVA = "0x2B39928", Offset = "0x2B39928", VA = "0x2B39928")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000B")]
		private Material material
		{
			[Token(Token = "0x6000026")]
			[Address(RVA = "0x2B399D0", Offset = "0x2B399D0", VA = "0x2B399D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000027")]
		[Address(RVA = "0x2B31D74", Offset = "0x2B31D74", VA = "0x2B31D74", Slot = "4")]
		public void Awake()
		{
		}

		[Token(Token = "0x6000028")]
		[Address(RVA = "0x2B31F50", Offset = "0x2B31F50", VA = "0x2B31F50", Slot = "5")]
		public void OnEnable(AntiAliasing owner)
		{
		}

		[Token(Token = "0x6000029")]
		[Address(RVA = "0x2B3202C", Offset = "0x2B3202C", VA = "0x2B3202C", Slot = "6")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x600002A")]
		[Address(RVA = "0x2B39A74", Offset = "0x2B39A74", VA = "0x2B39A74", Slot = "7")]
		public void OnPreCull(Camera camera)
		{
		}

		[Token(Token = "0x600002B")]
		[Address(RVA = "0x2B39C20", Offset = "0x2B39C20", VA = "0x2B39C20", Slot = "8")]
		public void OnPostRender(Camera camera)
		{
		}

		[Token(Token = "0x600002C")]
		[Address(RVA = "0x2B39C48", Offset = "0x2B39C48", VA = "0x2B39C48", Slot = "9")]
		public void OnRenderImage(Camera camera, RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600002D")]
		[Address(RVA = "0x2B3A680", Offset = "0x2B3A680", VA = "0x2B3A680")]
		private RenderTexture TempRT(int width, int height, RenderTextureFormat format)
		{
			return null;
		}

		[Token(Token = "0x600002E")]
		[Address(RVA = "0x2B3252C", Offset = "0x2B3252C", VA = "0x2B3252C")]
		public SMAA()
		{
		}
	}
	[Token(Token = "0x2000009")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x15D3850", Offset = "0x15D3850")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x15D3850", Offset = "0x15D3850")]
	[ImageEffectAllowedInSceneView]
	public class Bloom : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20001B2")]
		public struct Settings
		{
			[Token(Token = "0x4000B99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[SerializeField]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DD580", Offset = "0x15DD580")]
			public float threshold;

			[Token(Token = "0x4000B9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[SerializeField]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DD5CC", Offset = "0x15DD5CC")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DD5CC", Offset = "0x15DD5CC")]
			public float softKnee;

			[Token(Token = "0x4000B9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[SerializeField]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DD630", Offset = "0x15DD630")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DD630", Offset = "0x15DD630")]
			public float radius;

			[Token(Token = "0x4000B9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[SerializeField]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DD694", Offset = "0x15DD694")]
			public float intensity;

			[Token(Token = "0x4000B9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DD6E0", Offset = "0x15DD6E0")]
			public bool highQuality;

			[Token(Token = "0x4000B9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
			[SerializeField]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DD72C", Offset = "0x15DD72C")]
			public bool antiFlicker;

			[Token(Token = "0x4000B9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DD778", Offset = "0x15DD778")]
			public Texture dirtTexture;

			[Token(Token = "0x4000BA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "MinAttribute", RVA = "0x15DD7B0", Offset = "0x15DD7B0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DD7B0", Offset = "0x15DD7B0")]
			public float dirtIntensity;

			[Token(Token = "0x1700015D")]
			public float thresholdGamma
			{
				[Token(Token = "0x6000C72")]
				[Address(RVA = "0x2B337E4", Offset = "0x2B337E4", VA = "0x2B337E4")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000C71")]
				[Address(RVA = "0x2B337DC", Offset = "0x2B337DC", VA = "0x2B337DC")]
				set
				{
				}
			}

			[Token(Token = "0x1700015E")]
			public float thresholdLinear
			{
				[Token(Token = "0x6000C74")]
				[Address(RVA = "0x2B335FC", Offset = "0x2B335FC", VA = "0x2B335FC")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000C73")]
				[Address(RVA = "0x2B3385C", Offset = "0x2B3385C", VA = "0x2B3385C")]
				set
				{
				}
			}

			[Token(Token = "0x1700015F")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6000C75")]
				[Address(RVA = "0x2B33770", Offset = "0x2B33770", VA = "0x2B33770")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x4000024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public Settings settings;

		[Token(Token = "0x4000025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[HideInInspector]
		private Shader m_Shader;

		[Token(Token = "0x4000026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material m_Material;

		[Token(Token = "0x4000027")]
		private const int kMaxIterations = 16;

		[Token(Token = "0x4000028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private RenderTexture[] m_blurBuffer1;

		[Token(Token = "0x4000029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private RenderTexture[] m_blurBuffer2;

		[Token(Token = "0x400002A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int m_Threshold;

		[Token(Token = "0x400002B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private int m_Curve;

		[Token(Token = "0x400002C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int m_PrefilterOffs;

		[Token(Token = "0x400002D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int m_SampleScale;

		[Token(Token = "0x400002E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int m_Intensity;

		[Token(Token = "0x400002F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int m_DirtTex;

		[Token(Token = "0x4000030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int m_DirtIntensity;

		[Token(Token = "0x4000031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int m_BaseTex;

		[Token(Token = "0x1700000C")]
		public Shader shader
		{
			[Token(Token = "0x600002F")]
			[Address(RVA = "0x2B326D0", Offset = "0x2B326D0", VA = "0x2B326D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000D")]
		public Material material
		{
			[Token(Token = "0x6000030")]
			[Address(RVA = "0x2B32770", Offset = "0x2B32770", VA = "0x2B32770")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000031")]
		[Address(RVA = "0x2B328E0", Offset = "0x2B328E0", VA = "0x2B328E0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000032")]
		[Address(RVA = "0x2B329E0", Offset = "0x2B329E0", VA = "0x2B329E0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000033")]
		[Address(RVA = "0x2B32D18", Offset = "0x2B32D18", VA = "0x2B32D18")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000034")]
		[Address(RVA = "0x2B32DCC", Offset = "0x2B32DCC", VA = "0x2B32DCC")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000035")]
		[Address(RVA = "0x2B33678", Offset = "0x2B33678", VA = "0x2B33678")]
		public Bloom()
		{
		}
	}
	[Token(Token = "0x200000A")]
	public static class ImageEffectHelper
	{
		[Token(Token = "0x1700000E")]
		public static bool supportsDX11
		{
			[Token(Token = "0x6000038")]
			[Address(RVA = "0x2B34054", Offset = "0x2B34054", VA = "0x2B34054")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000036")]
		[Address(RVA = "0x2B32A2C", Offset = "0x2B32A2C", VA = "0x2B32A2C")]
		public static bool IsSupported(Shader s, bool needDepth, bool needHdr, MonoBehaviour effect)
		{
			return default(bool);
		}

		[Token(Token = "0x6000037")]
		[Address(RVA = "0x2B32814", Offset = "0x2B32814", VA = "0x2B32814")]
		public static Material CheckShaderAndCreateMaterial(Shader s)
		{
			return null;
		}
	}
	[Token(Token = "0x200000B")]
	public sealed class MinAttribute : PropertyAttribute
	{
		[Token(Token = "0x4000032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly float min;

		[Token(Token = "0x6000039")]
		[Address(RVA = "0x2B37E8C", Offset = "0x2B37E8C", VA = "0x2B37E8C")]
		public MinAttribute(float min)
		{
		}
	}
	[Token(Token = "0x200000C")]
	public class RenderTextureUtility
	{
		[Token(Token = "0x4000033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<RenderTexture> m_TemporaryRTs;

		[Token(Token = "0x600003A")]
		[Address(RVA = "0x2B3582C", Offset = "0x2B3582C", VA = "0x2B3582C")]
		public RenderTexture GetTemporaryRenderTexture(int width, int height, int depthBuffer = 0, RenderTextureFormat format = RenderTextureFormat.ARGBHalf, FilterMode filterMode = FilterMode.Bilinear)
		{
			return null;
		}

		[Token(Token = "0x600003B")]
		[Address(RVA = "0x2B35A30", Offset = "0x2B35A30", VA = "0x2B35A30")]
		public void ReleaseTemporaryRenderTexture(RenderTexture rt)
		{
		}

		[Token(Token = "0x600003C")]
		[Address(RVA = "0x2B345E4", Offset = "0x2B345E4", VA = "0x2B345E4")]
		public void ReleaseAllTemporaryRenderTextures()
		{
		}

		[Token(Token = "0x600003D")]
		[Address(RVA = "0x2B36550", Offset = "0x2B36550", VA = "0x2B36550")]
		public RenderTextureUtility()
		{
		}
	}
	[Token(Token = "0x200000D")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x15D38F8", Offset = "0x15D38F8")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x15D38F8", Offset = "0x15D38F8")]
	public class DepthOfField : MonoBehaviour
	{
		[Token(Token = "0x20001B3")]
		private enum Passes
		{
			[Token(Token = "0x4000BA2")]
			BlurAlphaWeighted,
			[Token(Token = "0x4000BA3")]
			BoxBlur,
			[Token(Token = "0x4000BA4")]
			DilateFgCocFromColor,
			[Token(Token = "0x4000BA5")]
			DilateFgCoc,
			[Token(Token = "0x4000BA6")]
			CaptureCocExplicit,
			[Token(Token = "0x4000BA7")]
			VisualizeCocExplicit,
			[Token(Token = "0x4000BA8")]
			CocPrefilter,
			[Token(Token = "0x4000BA9")]
			CircleBlur,
			[Token(Token = "0x4000BAA")]
			CircleBlurWithDilatedFg,
			[Token(Token = "0x4000BAB")]
			CircleBlurLowQuality,
			[Token(Token = "0x4000BAC")]
			CircleBlowLowQualityWithDilatedFg,
			[Token(Token = "0x4000BAD")]
			MergeExplicit,
			[Token(Token = "0x4000BAE")]
			ShapeLowQuality,
			[Token(Token = "0x4000BAF")]
			ShapeLowQualityDilateFg,
			[Token(Token = "0x4000BB0")]
			ShapeLowQualityMerge,
			[Token(Token = "0x4000BB1")]
			ShapeLowQualityMergeDilateFg,
			[Token(Token = "0x4000BB2")]
			ShapeMediumQuality,
			[Token(Token = "0x4000BB3")]
			ShapeMediumQualityDilateFg,
			[Token(Token = "0x4000BB4")]
			ShapeMediumQualityMerge,
			[Token(Token = "0x4000BB5")]
			ShapeMediumQualityMergeDilateFg,
			[Token(Token = "0x4000BB6")]
			ShapeHighQuality,
			[Token(Token = "0x4000BB7")]
			ShapeHighQualityDilateFg,
			[Token(Token = "0x4000BB8")]
			ShapeHighQualityMerge,
			[Token(Token = "0x4000BB9")]
			ShapeHighQualityMergeDilateFg
		}

		[Token(Token = "0x20001B4")]
		private enum MedianPasses
		{
			[Token(Token = "0x4000BBB")]
			Median3,
			[Token(Token = "0x4000BBC")]
			Median3X3
		}

		[Token(Token = "0x20001B5")]
		private enum BokehTexturesPasses
		{
			[Token(Token = "0x4000BBE")]
			Apply,
			[Token(Token = "0x4000BBF")]
			Collect
		}

		[Token(Token = "0x20001B6")]
		public enum TweakMode
		{
			[Token(Token = "0x4000BC1")]
			Range,
			[Token(Token = "0x4000BC2")]
			Explicit
		}

		[Token(Token = "0x20001B7")]
		public enum ApertureShape
		{
			[Token(Token = "0x4000BC4")]
			Circular,
			[Token(Token = "0x4000BC5")]
			Hexagonal,
			[Token(Token = "0x4000BC6")]
			Octogonal
		}

		[Token(Token = "0x20001B8")]
		public enum QualityPreset
		{
			[Token(Token = "0x4000BC8")]
			Low,
			[Token(Token = "0x4000BC9")]
			Medium,
			[Token(Token = "0x4000BCA")]
			High
		}

		[Token(Token = "0x20001B9")]
		public enum FilterQuality
		{
			[Token(Token = "0x4000BCC")]
			None,
			[Token(Token = "0x4000BCD")]
			Normal,
			[Token(Token = "0x4000BCE")]
			High
		}

		[Serializable]
		[Token(Token = "0x20001BA")]
		public struct GlobalSettings
		{
			[Token(Token = "0x4000BCF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DD800", Offset = "0x15DD800")]
			public bool visualizeFocus;

			[Token(Token = "0x4000BD0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DD838", Offset = "0x15DD838")]
			public TweakMode tweakMode;

			[Token(Token = "0x4000BD1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DD870", Offset = "0x15DD870")]
			public QualityPreset filteringQuality;

			[Token(Token = "0x4000BD2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DD8A8", Offset = "0x15DD8A8")]
			public ApertureShape apertureShape;

			[Token(Token = "0x4000BD3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DD8E0", Offset = "0x15DD8E0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DD8E0", Offset = "0x15DD8E0")]
			public float apertureOrientation;

			[Token(Token = "0x17000160")]
			public static GlobalSettings defaultSettings
			{
				[Token(Token = "0x6000C76")]
				[Address(RVA = "0x2B36484", Offset = "0x2B36484", VA = "0x2B36484")]
				get
				{
					return default(GlobalSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x20001BB")]
		public struct QualitySettings
		{
			[Token(Token = "0x4000BD4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DD938", Offset = "0x15DD938")]
			public bool prefilterBlur;

			[Token(Token = "0x4000BD5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DD970", Offset = "0x15DD970")]
			public FilterQuality medianFilter;

			[Token(Token = "0x4000BD6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DD9A8", Offset = "0x15DD9A8")]
			public bool dilateNearBlur;

			[Token(Token = "0x4000BD7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static QualitySettings[] presetQualitySettings;
		}

		[Serializable]
		[Token(Token = "0x20001BC")]
		public struct FocusSettings
		{
			[Token(Token = "0x4000BD8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DD9E0", Offset = "0x15DD9E0")]
			public Transform transform;

			[Token(Token = "0x4000BD9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "MinAttribute", RVA = "0x15DDA18", Offset = "0x15DDA18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DDA18", Offset = "0x15DDA18")]
			public float focusPlane;

			[Token(Token = "0x4000BDA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[AttributeAttribute(Name = "MinAttribute", RVA = "0x15DDA68", Offset = "0x15DDA68")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DDA68", Offset = "0x15DDA68")]
			public float range;

			[Token(Token = "0x4000BDB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "MinAttribute", RVA = "0x15DDABC", Offset = "0x15DDABC")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DDABC", Offset = "0x15DDABC")]
			public float nearPlane;

			[Token(Token = "0x4000BDC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "MinAttribute", RVA = "0x15DDB0C", Offset = "0x15DDB0C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DDB0C", Offset = "0x15DDB0C")]
			public float nearFalloff;

			[Token(Token = "0x4000BDD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "MinAttribute", RVA = "0x15DDB5C", Offset = "0x15DDB5C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DDB5C", Offset = "0x15DDB5C")]
			public float farPlane;

			[Token(Token = "0x4000BDE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "MinAttribute", RVA = "0x15DDBAC", Offset = "0x15DDBAC")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DDBAC", Offset = "0x15DDBAC")]
			public float farFalloff;

			[Token(Token = "0x4000BDF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DDBFC", Offset = "0x15DDBFC")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DDBFC", Offset = "0x15DDBFC")]
			public float nearBlurRadius;

			[Token(Token = "0x4000BE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DDC54", Offset = "0x15DDC54")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DDC54", Offset = "0x15DDC54")]
			public float farBlurRadius;

			[Token(Token = "0x17000161")]
			public static FocusSettings defaultSettings
			{
				[Token(Token = "0x6000C78")]
				[Address(RVA = "0x2B3649C", Offset = "0x2B3649C", VA = "0x2B3649C")]
				get
				{
					return default(FocusSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x20001BD")]
		public struct BokehTextureSettings
		{
			[Token(Token = "0x4000BE1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DDCAC", Offset = "0x15DDCAC")]
			public Texture2D texture;

			[Token(Token = "0x4000BE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DDCE4", Offset = "0x15DDCE4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DDCE4", Offset = "0x15DDCE4")]
			public float scale;

			[Token(Token = "0x4000BE3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DDD3C", Offset = "0x15DDD3C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DDD3C", Offset = "0x15DDD3C")]
			public float intensity;

			[Token(Token = "0x4000BE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DDD98", Offset = "0x15DDD98")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DDD98", Offset = "0x15DDD98")]
			public float threshold;

			[Token(Token = "0x4000BE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DDDF0", Offset = "0x15DDDF0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DDDF0", Offset = "0x15DDDF0")]
			public float spawnHeuristic;

			[Token(Token = "0x17000162")]
			public static BokehTextureSettings defaultSettings
			{
				[Token(Token = "0x6000C79")]
				[Address(RVA = "0x2B36500", Offset = "0x2B36500", VA = "0x2B36500")]
				get
				{
					return default(BokehTextureSettings);
				}
			}
		}

		[Token(Token = "0x4000034")]
		private const float kMaxBlur = 40f;

		[Token(Token = "0x4000035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GlobalSettings settings;

		[Token(Token = "0x4000036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public FocusSettings focus;

		[Token(Token = "0x4000037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public BokehTextureSettings bokehTexture;

		[Token(Token = "0x4000038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Shader m_FilmicDepthOfFieldShader;

		[Token(Token = "0x4000039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private Shader m_MedianFilterShader;

		[Token(Token = "0x400003A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private Shader m_TextureBokehShader;

		[Token(Token = "0x400003B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private RenderTextureUtility m_RTU;

		[Token(Token = "0x400003C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Material m_FilmicDepthOfFieldMaterial;

		[Token(Token = "0x400003D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Material m_MedianFilterMaterial;

		[Token(Token = "0x400003E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Material m_TextureBokehMaterial;

		[Token(Token = "0x400003F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private ComputeBuffer m_ComputeBufferDrawArgs;

		[Token(Token = "0x4000040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private ComputeBuffer m_ComputeBufferPoints;

		[Token(Token = "0x4000041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private QualitySettings m_CurrentQualitySettings;

		[Token(Token = "0x4000042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private float m_LastApertureOrientation;

		[Token(Token = "0x4000043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Vector4 m_OctogonalBokehDirection1;

		[Token(Token = "0x4000044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Vector4 m_OctogonalBokehDirection2;

		[Token(Token = "0x4000045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Vector4 m_OctogonalBokehDirection3;

		[Token(Token = "0x4000046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Vector4 m_OctogonalBokehDirection4;

		[Token(Token = "0x4000047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Vector4 m_HexagonalBokehDirection1;

		[Token(Token = "0x4000048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Vector4 m_HexagonalBokehDirection2;

		[Token(Token = "0x4000049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Vector4 m_HexagonalBokehDirection3;

		[Token(Token = "0x400004A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private int m_BlurParams;

		[Token(Token = "0x400004B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private int m_BlurCoe;

		[Token(Token = "0x400004C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private int m_Offsets;

		[Token(Token = "0x400004D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		private int m_BlurredColor;

		[Token(Token = "0x400004E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private int m_SpawnHeuristic;

		[Token(Token = "0x400004F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		private int m_BokehParams;

		[Token(Token = "0x4000050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private int m_Convolved_TexelSize;

		[Token(Token = "0x4000051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		private int m_SecondTex;

		[Token(Token = "0x4000052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private int m_ThirdTex;

		[Token(Token = "0x4000053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		private int m_MainTex;

		[Token(Token = "0x4000054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private int m_Screen;

		[Token(Token = "0x1700000F")]
		public Shader filmicDepthOfFieldShader
		{
			[Token(Token = "0x600003E")]
			[Address(RVA = "0x2B338D8", Offset = "0x2B338D8", VA = "0x2B338D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000010")]
		public Shader medianFilterShader
		{
			[Token(Token = "0x600003F")]
			[Address(RVA = "0x2B33978", Offset = "0x2B33978", VA = "0x2B33978")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000011")]
		public Shader textureBokehShader
		{
			[Token(Token = "0x6000040")]
			[Address(RVA = "0x2B33A18", Offset = "0x2B33A18", VA = "0x2B33A18")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000012")]
		public Material filmicDepthOfFieldMaterial
		{
			[Token(Token = "0x6000041")]
			[Address(RVA = "0x2B33AB8", Offset = "0x2B33AB8", VA = "0x2B33AB8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000013")]
		public Material medianFilterMaterial
		{
			[Token(Token = "0x6000042")]
			[Address(RVA = "0x2B33B5C", Offset = "0x2B33B5C", VA = "0x2B33B5C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000014")]
		public Material textureBokehMaterial
		{
			[Token(Token = "0x6000043")]
			[Address(RVA = "0x2B33C00", Offset = "0x2B33C00", VA = "0x2B33C00")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000015")]
		public ComputeBuffer computeBufferDrawArgs
		{
			[Token(Token = "0x6000044")]
			[Address(RVA = "0x2B33CA4", Offset = "0x2B33CA4", VA = "0x2B33CA4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000016")]
		public ComputeBuffer computeBufferPoints
		{
			[Token(Token = "0x6000045")]
			[Address(RVA = "0x2B33D7C", Offset = "0x2B33D7C", VA = "0x2B33D7C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000017")]
		private bool shouldPerformBokeh
		{
			[Token(Token = "0x6000051")]
			[Address(RVA = "0x2B35910", Offset = "0x2B35910", VA = "0x2B35910")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000046")]
		[Address(RVA = "0x2B33E04", Offset = "0x2B33E04", VA = "0x2B33E04")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000047")]
		[Address(RVA = "0x2B33F4C", Offset = "0x2B33F4C", VA = "0x2B33F4C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000048")]
		[Address(RVA = "0x2B343D8", Offset = "0x2B343D8", VA = "0x2B343D8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000049")]
		[Address(RVA = "0x2B3468C", Offset = "0x2B3468C", VA = "0x2B3468C")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600004A")]
		[Address(RVA = "0x2B34B10", Offset = "0x2B34B10", VA = "0x2B34B10")]
		private void DoDepthOfField(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600004B")]
		[Address(RVA = "0x2B35D10", Offset = "0x2B35D10", VA = "0x2B35D10")]
		private void DoHexagonalBlur(RenderTexture blurredFgCoc, ref RenderTexture src, ref RenderTexture dst, float maxRadius)
		{
		}

		[Token(Token = "0x600004C")]
		[Address(RVA = "0x2B35F9C", Offset = "0x2B35F9C", VA = "0x2B35F9C")]
		private void DoOctogonalBlur(RenderTexture blurredFgCoc, ref RenderTexture src, ref RenderTexture dst, float maxRadius)
		{
		}

		[Token(Token = "0x600004D")]
		[Address(RVA = "0x2B35BB0", Offset = "0x2B35BB0", VA = "0x2B35BB0")]
		private void DoCircularBlur(RenderTexture blurredFgCoc, ref RenderTexture src, ref RenderTexture dst, float maxRadius)
		{
		}

		[Token(Token = "0x600004E")]
		[Address(RVA = "0x2B3486C", Offset = "0x2B3486C", VA = "0x2B3486C")]
		private void ComputeCocParameters(out Vector4 blurParams, out Vector4 blurCoe)
		{
		}

		[Token(Token = "0x600004F")]
		[Address(RVA = "0x2B34588", Offset = "0x2B34588", VA = "0x2B34588")]
		private void ReleaseComputeResources()
		{
		}

		[Token(Token = "0x6000050")]
		[Address(RVA = "0x2B34084", Offset = "0x2B34084", VA = "0x2B34084")]
		private void ComputeBlurDirections(bool force)
		{
		}

		[Token(Token = "0x6000052")]
		[Address(RVA = "0x2B3632C", Offset = "0x2B3632C", VA = "0x2B3632C")]
		private static void Rotate2D(ref Vector4 direction, float cosinus, float sinus)
		{
		}

		[Token(Token = "0x6000053")]
		[Address(RVA = "0x2B359F0", Offset = "0x2B359F0", VA = "0x2B359F0")]
		private static void SwapRenderTexture(ref RenderTexture src, ref RenderTexture dst)
		{
		}

		[Token(Token = "0x6000054")]
		[Address(RVA = "0x2B36234", Offset = "0x2B36234", VA = "0x2B36234")]
		private static void GetDirectionalBlurPassesFromRadius(RenderTexture blurredFgCoc, float maxRadius, out int blurPass, out int blurAndMergePass)
		{
		}

		[Token(Token = "0x6000055")]
		[Address(RVA = "0x2B36350", Offset = "0x2B36350", VA = "0x2B36350")]
		public DepthOfField()
		{
		}
	}
	[Token(Token = "0x200000E")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x15D3990", Offset = "0x15D3990")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x15D3990", Offset = "0x15D3990")]
	public class LensAberrations : MonoBehaviour
	{
		[Token(Token = "0x20001BE")]
		[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x15D55F8", Offset = "0x15D55F8")]
		public class SettingsGroup : Attribute
		{
			[Token(Token = "0x6000C7A")]
			[Address(RVA = "0x2B37E84", Offset = "0x2B37E84", VA = "0x2B37E84")]
			public SettingsGroup()
			{
			}
		}

		[Token(Token = "0x20001BF")]
		[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x15D560C", Offset = "0x15D560C")]
		public class AdvancedSetting : Attribute
		{
			[Token(Token = "0x6000C7B")]
			[Address(RVA = "0x2B37E7C", Offset = "0x2B37E7C", VA = "0x2B37E7C")]
			public AdvancedSetting()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001C0")]
		public struct DistortionSettings
		{
			[Token(Token = "0x4000BE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool enabled;

			[Token(Token = "0x4000BE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DDE48", Offset = "0x15DDE48")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DDE48", Offset = "0x15DDE48")]
			public float amount;

			[Token(Token = "0x4000BE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DDEA4", Offset = "0x15DDEA4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DDEA4", Offset = "0x15DDEA4")]
			public float centerX;

			[Token(Token = "0x4000BE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DDEF8", Offset = "0x15DDEF8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DDEF8", Offset = "0x15DDEF8")]
			public float centerY;

			[Token(Token = "0x4000BEA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DDF4C", Offset = "0x15DDF4C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DDF4C", Offset = "0x15DDF4C")]
			public float amountX;

			[Token(Token = "0x4000BEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DDFA0", Offset = "0x15DDFA0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DDFA0", Offset = "0x15DDFA0")]
			public float amountY;

			[Token(Token = "0x4000BEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DDFF4", Offset = "0x15DDFF4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DDFF4", Offset = "0x15DDFF4")]
			public float scale;

			[Token(Token = "0x17000163")]
			public static DistortionSettings defaultSettings
			{
				[Token(Token = "0x6000C7C")]
				[Address(RVA = "0x2B37DA8", Offset = "0x2B37DA8", VA = "0x2B37DA8")]
				get
				{
					return default(DistortionSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x20001C1")]
		public struct VignetteSettings
		{
			[Token(Token = "0x4000BED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool enabled;

			[Token(Token = "0x4000BEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x15DE04C", Offset = "0x15DE04C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DE04C", Offset = "0x15DE04C")]
			public Color color;

			[Token(Token = "0x4000BEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DE09C", Offset = "0x15DE09C")]
			public Vector2 center;

			[Token(Token = "0x4000BF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DE0D4", Offset = "0x15DE0D4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DE0D4", Offset = "0x15DE0D4")]
			public float intensity;

			[Token(Token = "0x4000BF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DE128", Offset = "0x15DE128")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DE128", Offset = "0x15DE128")]
			public float smoothness;

			[Token(Token = "0x4000BF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AdvancedSetting]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DE180", Offset = "0x15DE180")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DE180", Offset = "0x15DE180")]
			public float roundness;

			[Token(Token = "0x4000BF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DE1E4", Offset = "0x15DE1E4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DE1E4", Offset = "0x15DE1E4")]
			public float blur;

			[Token(Token = "0x4000BF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DE238", Offset = "0x15DE238")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DE238", Offset = "0x15DE238")]
			public float desaturate;

			[Token(Token = "0x17000164")]
			public static VignetteSettings defaultSettings
			{
				[Token(Token = "0x6000C7D")]
				[Address(RVA = "0x2B37DC0", Offset = "0x2B37DC0", VA = "0x2B37DC0")]
				get
				{
					return default(VignetteSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x20001C2")]
		public struct ChromaticAberrationSettings
		{
			[Token(Token = "0x4000BF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool enabled;

			[Token(Token = "0x4000BF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x15DE28C", Offset = "0x15DE28C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DE28C", Offset = "0x15DE28C")]
			public Color color;

			[Token(Token = "0x4000BF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DE2DC", Offset = "0x15DE2DC")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DE2DC", Offset = "0x15DE2DC")]
			public float amount;

			[Token(Token = "0x17000165")]
			public static ChromaticAberrationSettings defaultSettings
			{
				[Token(Token = "0x6000C7E")]
				[Address(RVA = "0x2B37E48", Offset = "0x2B37E48", VA = "0x2B37E48")]
				get
				{
					return default(ChromaticAberrationSettings);
				}
			}
		}

		[Token(Token = "0x20001C3")]
		private enum Pass
		{
			[Token(Token = "0x4000BF9")]
			BlurPrePass,
			[Token(Token = "0x4000BFA")]
			Chroma,
			[Token(Token = "0x4000BFB")]
			Distort,
			[Token(Token = "0x4000BFC")]
			Vignette,
			[Token(Token = "0x4000BFD")]
			ChromaDistort,
			[Token(Token = "0x4000BFE")]
			ChromaVignette,
			[Token(Token = "0x4000BFF")]
			DistortVignette,
			[Token(Token = "0x4000C00")]
			ChromaDistortVignette
		}

		[Token(Token = "0x4000055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SettingsGroup]
		public DistortionSettings distortion;

		[Token(Token = "0x4000056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SettingsGroup]
		public VignetteSettings vignette;

		[Token(Token = "0x4000057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[SettingsGroup]
		public ChromaticAberrationSettings chromaticAberration;

		[Token(Token = "0x4000058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private Shader m_Shader;

		[Token(Token = "0x4000059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Material m_Material;

		[Token(Token = "0x400005A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private RenderTextureUtility m_RTU;

		[Token(Token = "0x400005B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int m_DistCenterScale;

		[Token(Token = "0x400005C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private int m_DistAmount;

		[Token(Token = "0x400005D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private int m_ChromaticAberration;

		[Token(Token = "0x400005E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private int m_VignetteColor;

		[Token(Token = "0x400005F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private int m_BlurPass;

		[Token(Token = "0x4000060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private int m_BlurTex;

		[Token(Token = "0x4000061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private int m_VignetteBlur;

		[Token(Token = "0x4000062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private int m_VignetteDesat;

		[Token(Token = "0x4000063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private int m_VignetteCenter;

		[Token(Token = "0x4000064")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private int m_VignetteSettings;

		[Token(Token = "0x17000018")]
		public Shader shader
		{
			[Token(Token = "0x6000056")]
			[Address(RVA = "0x2B36F9C", Offset = "0x2B36F9C", VA = "0x2B36F9C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000019")]
		public Material material
		{
			[Token(Token = "0x6000057")]
			[Address(RVA = "0x2B3703C", Offset = "0x2B3703C", VA = "0x2B3703C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000058")]
		[Address(RVA = "0x2B370E0", Offset = "0x2B370E0", VA = "0x2B370E0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000059")]
		[Address(RVA = "0x2B37210", Offset = "0x2B37210", VA = "0x2B37210")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600005A")]
		[Address(RVA = "0x2B372A0", Offset = "0x2B372A0", VA = "0x2B372A0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600005B")]
		[Address(RVA = "0x2B37368", Offset = "0x2B37368", VA = "0x2B37368")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600005C")]
		[Address(RVA = "0x2B37D34", Offset = "0x2B37D34", VA = "0x2B37D34")]
		public LensAberrations()
		{
		}
	}
	[Token(Token = "0x200000F")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x15D3A28", Offset = "0x15D3A28")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x15D3A28", Offset = "0x15D3A28")]
	public class MotionBlur : MonoBehaviour
	{
		[Token(Token = "0x20001C4")]
		private class FrameBlendingFilter
		{
			[Token(Token = "0x2000287")]
			private struct Frame
			{
				[Token(Token = "0x4001051")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public RenderTexture lumaTexture;

				[Token(Token = "0x4001052")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
				public RenderTexture chromaTexture;

				[Token(Token = "0x4001053")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public float time;

				[Token(Token = "0x4001054")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private RenderBuffer[] _mrt;

				[Token(Token = "0x6000F16")]
				[Address(RVA = "0x2B3955C", Offset = "0x2B3955C", VA = "0x2B3955C")]
				public float CalculateWeight(float strength, float currentTime)
				{
					return default(float);
				}

				[Token(Token = "0x6000F17")]
				[Address(RVA = "0x2B390D8", Offset = "0x2B390D8", VA = "0x2B390D8")]
				public void Release()
				{
				}

				[Token(Token = "0x6000F18")]
				[Address(RVA = "0x2B391C0", Offset = "0x2B391C0", VA = "0x2B391C0")]
				public void MakeRecord(RenderTexture source, Material material)
				{
				}

				[Token(Token = "0x6000F19")]
				[Address(RVA = "0x2B393E4", Offset = "0x2B393E4", VA = "0x2B393E4")]
				public void MakeRecordRaw(RenderTexture source, RenderTextureFormat format)
				{
				}
			}

			[Token(Token = "0x4000C01")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private bool _useCompression;

			[Token(Token = "0x4000C02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private RenderTextureFormat _rawTextureFormat;

			[Token(Token = "0x4000C03")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Material _material;

			[Token(Token = "0x4000C04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Frame[] _frameList;

			[Token(Token = "0x4000C05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int _lastFrameCount;

			[Token(Token = "0x4000C06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private int _History1LumaTex;

			[Token(Token = "0x4000C07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int _History2LumaTex;

			[Token(Token = "0x4000C08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private int _History3LumaTex;

			[Token(Token = "0x4000C09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int _History4LumaTex;

			[Token(Token = "0x4000C0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int _History1ChromaTex;

			[Token(Token = "0x4000C0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int _History2ChromaTex;

			[Token(Token = "0x4000C0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private int _History3ChromaTex;

			[Token(Token = "0x4000C0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private int _History4ChromaTex;

			[Token(Token = "0x4000C0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private int _History1Weight;

			[Token(Token = "0x4000C0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private int _History2Weight;

			[Token(Token = "0x4000C10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private int _History3Weight;

			[Token(Token = "0x4000C11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private int _History4Weight;

			[Token(Token = "0x6000C7F")]
			[Address(RVA = "0x2B38068", Offset = "0x2B38068", VA = "0x2B38068")]
			public FrameBlendingFilter()
			{
			}

			[Token(Token = "0x6000C80")]
			[Address(RVA = "0x2B38268", Offset = "0x2B38268", VA = "0x2B38268")]
			public void Release()
			{
			}

			[Token(Token = "0x6000C81")]
			[Address(RVA = "0x2B38D04", Offset = "0x2B38D04", VA = "0x2B38D04")]
			public void PushFrame(RenderTexture source)
			{
			}

			[Token(Token = "0x6000C82")]
			[Address(RVA = "0x2B38A78", Offset = "0x2B38A78", VA = "0x2B38A78")]
			public void BlendFrames(float strength, RenderTexture source, RenderTexture destination)
			{
			}

			[Token(Token = "0x6000C83")]
			[Address(RVA = "0x2B38E60", Offset = "0x2B38E60", VA = "0x2B38E60")]
			private static bool CheckSupportCompression()
			{
				return default(bool);
			}

			[Token(Token = "0x6000C84")]
			[Address(RVA = "0x2B38EA8", Offset = "0x2B38EA8", VA = "0x2B38EA8")]
			private static RenderTextureFormat GetPreferredRenderTextureFormat()
			{
				return default(RenderTextureFormat);
			}

			[Token(Token = "0x6000C85")]
			[Address(RVA = "0x2B394E4", Offset = "0x2B394E4", VA = "0x2B394E4")]
			private Frame GetFrameRelative(int offset)
			{
				return default(Frame);
			}

			[Token(Token = "0x6000C86")]
			[Address(RVA = "0x2B38F78", Offset = "0x2B38F78", VA = "0x2B38F78")]
			private void FetchUniformLocations()
			{
			}
		}

		[Token(Token = "0x20001C5")]
		private class ReconstructionFilter
		{
			[Token(Token = "0x4000C12")]
			private const float kMaxBlurRadius = 5f;

			[Token(Token = "0x4000C13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private Material _material;

			[Token(Token = "0x4000C14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private bool _unroll;

			[Token(Token = "0x4000C15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private RenderTextureFormat _vectorRTFormat;

			[Token(Token = "0x4000C16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private RenderTextureFormat _packedRTFormat;

			[Token(Token = "0x4000C17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private int _VelocityScale;

			[Token(Token = "0x4000C18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int _MaxBlurRadius;

			[Token(Token = "0x4000C19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private int _TileMaxOffs;

			[Token(Token = "0x4000C1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int _TileMaxLoop;

			[Token(Token = "0x4000C1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private int _LoopCount;

			[Token(Token = "0x4000C1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int _NeighborMaxTex;

			[Token(Token = "0x4000C1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int _VelocityTex;

			[Token(Token = "0x6000C87")]
			[Address(RVA = "0x2B37F5C", Offset = "0x2B37F5C", VA = "0x2B37F5C")]
			public ReconstructionFilter()
			{
			}

			[Token(Token = "0x6000C88")]
			[Address(RVA = "0x2B381B4", Offset = "0x2B381B4", VA = "0x2B381B4")]
			public void Release()
			{
			}

			[Token(Token = "0x6000C89")]
			[Address(RVA = "0x2B385D8", Offset = "0x2B385D8", VA = "0x2B385D8")]
			public void ProcessImage(float shutterAngle, int sampleCount, RenderTexture source, RenderTexture destination)
			{
			}

			[Token(Token = "0x6000C8A")]
			[Address(RVA = "0x2B39610", Offset = "0x2B39610", VA = "0x2B39610")]
			private bool CheckTextureFormatSupport()
			{
				return default(bool);
			}

			[Token(Token = "0x6000C8B")]
			[Address(RVA = "0x2B39744", Offset = "0x2B39744", VA = "0x2B39744")]
			private RenderTexture GetTemporaryRT(Texture source, int divider, RenderTextureFormat format)
			{
				return null;
			}

			[Token(Token = "0x6000C8C")]
			[Address(RVA = "0x2B397CC", Offset = "0x2B397CC", VA = "0x2B397CC")]
			private void ReleaseTemporaryRT(RenderTexture rt)
			{
			}

			[Token(Token = "0x6000C8D")]
			[Address(RVA = "0x2B3965C", Offset = "0x2B3965C", VA = "0x2B3965C")]
			private void FetchUniformLocations()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001C6")]
		public class Settings
		{
			[Token(Token = "0x4000C1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DE338", Offset = "0x15DE338")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DE338", Offset = "0x15DE338")]
			public float shutterAngle;

			[Token(Token = "0x4000C1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[SerializeField]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DE3A0", Offset = "0x15DE3A0")]
			public int sampleCount;

			[Token(Token = "0x4000C20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DE3EC", Offset = "0x15DE3EC")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DE3EC", Offset = "0x15DE3EC")]
			public float frameBlending;

			[Token(Token = "0x17000166")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6000C8E")]
				[Address(RVA = "0x2B38DEC", Offset = "0x2B38DEC", VA = "0x2B38DEC")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000C8F")]
			[Address(RVA = "0x2B397D8", Offset = "0x2B397D8", VA = "0x2B397D8")]
			public Settings()
			{
			}
		}

		[Token(Token = "0x4000065")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Settings _settings;

		[Token(Token = "0x4000066")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Shader _reconstructionShader;

		[Token(Token = "0x4000067")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Shader _frameBlendingShader;

		[Token(Token = "0x4000068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ReconstructionFilter _reconstructionFilter;

		[Token(Token = "0x4000069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private FrameBlendingFilter _frameBlendingFilter;

		[Token(Token = "0x1700001A")]
		public Settings settings
		{
			[Token(Token = "0x600005D")]
			[Address(RVA = "0x2B37EC0", Offset = "0x2B37EC0", VA = "0x2B37EC0")]
			get
			{
				return null;
			}
			[Token(Token = "0x600005E")]
			[Address(RVA = "0x2B37EC8", Offset = "0x2B37EC8", VA = "0x2B37EC8")]
			set
			{
			}
		}

		[Token(Token = "0x600005F")]
		[Address(RVA = "0x2B37ED0", Offset = "0x2B37ED0", VA = "0x2B37ED0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000060")]
		[Address(RVA = "0x2B3815C", Offset = "0x2B3815C", VA = "0x2B3815C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000061")]
		[Address(RVA = "0x2B3836C", Offset = "0x2B3836C", VA = "0x2B3836C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000062")]
		[Address(RVA = "0x2B38404", Offset = "0x2B38404", VA = "0x2B38404")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000063")]
		[Address(RVA = "0x2B38DB4", Offset = "0x2B38DB4", VA = "0x2B38DB4")]
		public MotionBlur()
		{
		}
	}
	[Token(Token = "0x2000010")]
	[ExecuteInEditMode]
	[ImageEffectAllowedInSceneView]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x15D3AB0", Offset = "0x15D3AB0")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x15D3AB0", Offset = "0x15D3AB0")]
	public class TemporalAntiAliasing : MonoBehaviour
	{
		[Token(Token = "0x20001C7")]
		public enum Sequence
		{
			[Token(Token = "0x4000C22")]
			Halton
		}

		[Serializable]
		[Token(Token = "0x20001C8")]
		public struct JitterSettings
		{
			[Token(Token = "0x4000C23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DE450", Offset = "0x15DE450")]
			public Sequence sequence;

			[Token(Token = "0x4000C24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DE488", Offset = "0x15DE488")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DE488", Offset = "0x15DE488")]
			public float spread;

			[Token(Token = "0x4000C25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DE4E0", Offset = "0x15DE4E0")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DE4E0", Offset = "0x15DE4E0")]
			public int sampleCount;
		}

		[Serializable]
		[Token(Token = "0x20001C9")]
		public struct SharpenFilterSettings
		{
			[Token(Token = "0x4000C26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DE538", Offset = "0x15DE538")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DE538", Offset = "0x15DE538")]
			public float amount;
		}

		[Serializable]
		[Token(Token = "0x20001CA")]
		public struct BlendSettings
		{
			[Token(Token = "0x4000C27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DE58C", Offset = "0x15DE58C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DE58C", Offset = "0x15DE58C")]
			public float stationary;

			[Token(Token = "0x4000C28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DE5E4", Offset = "0x15DE5E4")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DE5E4", Offset = "0x15DE5E4")]
			public float moving;

			[Token(Token = "0x4000C29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DE63C", Offset = "0x15DE63C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DE63C", Offset = "0x15DE63C")]
			public float motionAmplification;
		}

		[Serializable]
		[Token(Token = "0x20001CB")]
		public struct DebugSettings
		{
			[Token(Token = "0x4000C2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DE694", Offset = "0x15DE694")]
			public bool forceRepaint;
		}

		[Serializable]
		[Token(Token = "0x20001CC")]
		public class Settings
		{
			[Token(Token = "0x2000288")]
			[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x15D5838", Offset = "0x15D5838")]
			public class LayoutAttribute : PropertyAttribute
			{
				[Token(Token = "0x6000F1A")]
				[Address(RVA = "0x2B3BC2C", Offset = "0x2B3BC2C", VA = "0x2B3BC2C")]
				public LayoutAttribute()
				{
				}
			}

			[Token(Token = "0x4000C2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Layout]
			public JitterSettings jitterSettings;

			[Token(Token = "0x4000C2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Layout]
			public SharpenFilterSettings sharpenFilterSettings;

			[Token(Token = "0x4000C2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Layout]
			public BlendSettings blendSettings;

			[Token(Token = "0x4000C2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Layout]
			public DebugSettings debugSettings;

			[Token(Token = "0x17000167")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6000C90")]
				[Address(RVA = "0x2B3BBA0", Offset = "0x2B3BBA0", VA = "0x2B3BBA0")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000C91")]
			[Address(RVA = "0x2B3BC24", Offset = "0x2B3BC24", VA = "0x2B3BC24")]
			public Settings()
			{
			}
		}

		[Token(Token = "0x400006A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public Settings settings;

		[Token(Token = "0x400006B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Shader m_Shader;

		[Token(Token = "0x400006C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material m_Material;

		[Token(Token = "0x400006D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Camera m_Camera;

		[Token(Token = "0x400006E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RenderTexture m_History;

		[Token(Token = "0x400006F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int m_SampleIndex;

		[Token(Token = "0x1700001B")]
		public Shader shader
		{
			[Token(Token = "0x6000064")]
			[Address(RVA = "0x2B3A800", Offset = "0x2B3A800", VA = "0x2B3A800")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001C")]
		public Material material
		{
			[Token(Token = "0x6000065")]
			[Address(RVA = "0x2B3A8A0", Offset = "0x2B3A8A0", VA = "0x2B3A8A0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001D")]
		public Camera camera_
		{
			[Token(Token = "0x6000066")]
			[Address(RVA = "0x2B3A9D0", Offset = "0x2B3A9D0", VA = "0x2B3A9D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000067")]
		[Address(RVA = "0x2B3AA7C", Offset = "0x2B3AA7C", VA = "0x2B3AA7C")]
		private void RenderFullScreenQuad(int pass)
		{
		}

		[Token(Token = "0x6000068")]
		[Address(RVA = "0x2B3AB84", Offset = "0x2B3AB84", VA = "0x2B3AB84")]
		private float GetHaltonValue(int index, int radix)
		{
			return default(float);
		}

		[Token(Token = "0x6000069")]
		[Address(RVA = "0x2B3ABC8", Offset = "0x2B3ABC8", VA = "0x2B3ABC8")]
		private Vector2 GenerateRandomOffset()
		{
			return default(Vector2);
		}

		[Token(Token = "0x600006A")]
		[Address(RVA = "0x2B3ACA0", Offset = "0x2B3ACA0", VA = "0x2B3ACA0")]
		private Matrix4x4 GetPerspectiveProjectionMatrix(Vector2 offset)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x600006B")]
		[Address(RVA = "0x2B3B11C", Offset = "0x2B3B11C", VA = "0x2B3B11C")]
		private Matrix4x4 GetOrthographicProjectionMatrix(Vector2 offset)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x600006C")]
		[Address(RVA = "0x2B3B298", Offset = "0x2B3B298", VA = "0x2B3B298")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600006D")]
		[Address(RVA = "0x2B3B2E0", Offset = "0x2B3B2E0", VA = "0x2B3B2E0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600006E")]
		[Address(RVA = "0x2B3B3B0", Offset = "0x2B3B3B0", VA = "0x2B3B3B0")]
		private void OnPreCull()
		{
		}

		[Token(Token = "0x600006F")]
		[Address(RVA = "0x2B3B5E0", Offset = "0x2B3B5E0", VA = "0x2B3B5E0")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000070")]
		[Address(RVA = "0x2B3BB48", Offset = "0x2B3BB48", VA = "0x2B3BB48")]
		public void OnPostRender()
		{
		}

		[Token(Token = "0x6000071")]
		[Address(RVA = "0x2B3BB68", Offset = "0x2B3BB68", VA = "0x2B3BB68")]
		public TemporalAntiAliasing()
		{
		}
	}
	[Token(Token = "0x2000011")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x15D3B58", Offset = "0x15D3B58")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x15D3B58", Offset = "0x15D3B58")]
	[ImageEffectAllowedInSceneView]
	public class TonemappingColorGrading : MonoBehaviour
	{
		[Token(Token = "0x20001CD")]
		[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x15D5620", Offset = "0x15D5620")]
		public class SettingsGroup : Attribute
		{
			[Token(Token = "0x6000C92")]
			[Address(RVA = "0x2B3EF74", Offset = "0x2B3EF74", VA = "0x2B3EF74")]
			public SettingsGroup()
			{
			}
		}

		[Token(Token = "0x20001CE")]
		public class IndentedGroup : PropertyAttribute
		{
			[Token(Token = "0x6000C93")]
			[Address(RVA = "0x2B3EF6C", Offset = "0x2B3EF6C", VA = "0x2B3EF6C")]
			public IndentedGroup()
			{
			}
		}

		[Token(Token = "0x20001CF")]
		public class ChannelMixer : PropertyAttribute
		{
			[Token(Token = "0x6000C94")]
			[Address(RVA = "0x2B3EA84", Offset = "0x2B3EA84", VA = "0x2B3EA84")]
			public ChannelMixer()
			{
			}
		}

		[Token(Token = "0x20001D0")]
		public class ColorWheelGroup : PropertyAttribute
		{
			[Token(Token = "0x4000C2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int minSizePerWheel;

			[Token(Token = "0x4000C30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int maxSizePerWheel;

			[Token(Token = "0x6000C95")]
			[Address(RVA = "0x2B3ED20", Offset = "0x2B3ED20", VA = "0x2B3ED20")]
			public ColorWheelGroup()
			{
			}

			[Token(Token = "0x6000C96")]
			[Address(RVA = "0x2B3ED34", Offset = "0x2B3ED34", VA = "0x2B3ED34")]
			public ColorWheelGroup(int minSizePerWheel, int maxSizePerWheel)
			{
			}
		}

		[Token(Token = "0x20001D1")]
		public class Curve : PropertyAttribute
		{
			[Token(Token = "0x4000C31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Color color;

			[Token(Token = "0x6000C97")]
			[Address(RVA = "0x2B3ED78", Offset = "0x2B3ED78", VA = "0x2B3ED78")]
			public Curve()
			{
			}

			[Token(Token = "0x6000C98")]
			[Address(RVA = "0x2B3EDAC", Offset = "0x2B3EDAC", VA = "0x2B3EDAC")]
			public Curve(float r, float g, float b, float a)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001D2")]
		public struct EyeAdaptationSettings
		{
			[Token(Token = "0x4000C32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool enabled;

			[Token(Token = "0x4000C33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "MinAttribute", RVA = "0x15DE70C", Offset = "0x15DE70C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DE70C", Offset = "0x15DE70C")]
			public float middleGrey;

			[Token(Token = "0x4000C34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DE75C", Offset = "0x15DE75C")]
			public float min;

			[Token(Token = "0x4000C35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DE794", Offset = "0x15DE794")]
			public float max;

			[Token(Token = "0x4000C36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "MinAttribute", RVA = "0x15DE7CC", Offset = "0x15DE7CC")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DE7CC", Offset = "0x15DE7CC")]
			public float speed;

			[Token(Token = "0x4000C37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DE81C", Offset = "0x15DE81C")]
			public bool showDebug;

			[Token(Token = "0x17000168")]
			public static EyeAdaptationSettings defaultSettings
			{
				[Token(Token = "0x6000C99")]
				[Address(RVA = "0x2B3E8A4", Offset = "0x2B3E8A4", VA = "0x2B3E8A4")]
				get
				{
					return default(EyeAdaptationSettings);
				}
			}
		}

		[Token(Token = "0x20001D3")]
		public enum Tonemapper
		{
			[Token(Token = "0x4000C39")]
			ACES,
			[Token(Token = "0x4000C3A")]
			Curve,
			[Token(Token = "0x4000C3B")]
			Hable,
			[Token(Token = "0x4000C3C")]
			HejlDawson,
			[Token(Token = "0x4000C3D")]
			Photographic,
			[Token(Token = "0x4000C3E")]
			Reinhard,
			[Token(Token = "0x4000C3F")]
			Neutral
		}

		[Serializable]
		[Token(Token = "0x20001D4")]
		public struct TonemappingSettings
		{
			[Token(Token = "0x4000C40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool enabled;

			[Token(Token = "0x4000C41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DE854", Offset = "0x15DE854")]
			public Tonemapper tonemapper;

			[Token(Token = "0x4000C42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "MinAttribute", RVA = "0x15DE88C", Offset = "0x15DE88C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DE88C", Offset = "0x15DE88C")]
			public float exposure;

			[Token(Token = "0x4000C43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DE8DC", Offset = "0x15DE8DC")]
			public AnimationCurve curve;

			[Token(Token = "0x4000C44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DE914", Offset = "0x15DE914")]
			public float neutralBlackIn;

			[Token(Token = "0x4000C45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DE934", Offset = "0x15DE934")]
			public float neutralWhiteIn;

			[Token(Token = "0x4000C46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DE94C", Offset = "0x15DE94C")]
			public float neutralBlackOut;

			[Token(Token = "0x4000C47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DE96C", Offset = "0x15DE96C")]
			public float neutralWhiteOut;

			[Token(Token = "0x4000C48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DE984", Offset = "0x15DE984")]
			public float neutralWhiteLevel;

			[Token(Token = "0x4000C49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DE9A0", Offset = "0x15DE9A0")]
			public float neutralWhiteClip;

			[Token(Token = "0x17000169")]
			public static TonemappingSettings defaultSettings
			{
				[Token(Token = "0x6000C9A")]
				[Address(RVA = "0x2B3E8C4", Offset = "0x2B3E8C4", VA = "0x2B3E8C4")]
				get
				{
					return default(TonemappingSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x20001D5")]
		public struct LUTSettings
		{
			[Token(Token = "0x4000C4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool enabled;

			[Token(Token = "0x4000C4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DE9B8", Offset = "0x15DE9B8")]
			public Texture texture;

			[Token(Token = "0x4000C4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DE9F0", Offset = "0x15DE9F0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DE9F0", Offset = "0x15DE9F0")]
			public float contribution;

			[Token(Token = "0x1700016A")]
			public static LUTSettings defaultSettings
			{
				[Token(Token = "0x6000C9B")]
				[Address(RVA = "0x2B3EA14", Offset = "0x2B3EA14", VA = "0x2B3EA14")]
				get
				{
					return default(LUTSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x20001D6")]
		public struct ColorWheelsSettings
		{
			[Token(Token = "0x4000C4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x15DEA44", Offset = "0x15DEA44")]
			public Color shadows;

			[Token(Token = "0x4000C4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x15DEA58", Offset = "0x15DEA58")]
			public Color midtones;

			[Token(Token = "0x4000C4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x15DEA6C", Offset = "0x15DEA6C")]
			public Color highlights;

			[Token(Token = "0x1700016B")]
			public static ColorWheelsSettings defaultSettings
			{
				[Token(Token = "0x6000C9C")]
				[Address(RVA = "0x2B3EBC8", Offset = "0x2B3EBC8", VA = "0x2B3EBC8")]
				get
				{
					return default(ColorWheelsSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x20001D7")]
		public struct BasicsSettings
		{
			[Token(Token = "0x4000C50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DEA80", Offset = "0x15DEA80")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DEA80", Offset = "0x15DEA80")]
			public float temperatureShift;

			[Token(Token = "0x4000C51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DEAD4", Offset = "0x15DEAD4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DEAD4", Offset = "0x15DEAD4")]
			public float tint;

			[Token(Token = "0x4000C52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x15DEB28", Offset = "0x15DEB28")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DEB28", Offset = "0x15DEB28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DEB28", Offset = "0x15DEB28")]
			public float hue;

			[Token(Token = "0x4000C53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DEB8C", Offset = "0x15DEB8C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DEB8C", Offset = "0x15DEB8C")]
			public float saturation;

			[Token(Token = "0x4000C54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DEBE0", Offset = "0x15DEBE0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DEBE0", Offset = "0x15DEBE0")]
			public float vibrance;

			[Token(Token = "0x4000C55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DEC34", Offset = "0x15DEC34")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DEC34", Offset = "0x15DEC34")]
			public float value;

			[Token(Token = "0x4000C56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x15DEC88", Offset = "0x15DEC88")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DEC88", Offset = "0x15DEC88")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DEC88", Offset = "0x15DEC88")]
			public float contrast;

			[Token(Token = "0x4000C57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DECEC", Offset = "0x15DECEC")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DECEC", Offset = "0x15DECEC")]
			public float gain;

			[Token(Token = "0x4000C58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DED44", Offset = "0x15DED44")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DED44", Offset = "0x15DED44")]
			public float gamma;

			[Token(Token = "0x1700016C")]
			public static BasicsSettings defaultSettings
			{
				[Token(Token = "0x6000C9D")]
				[Address(RVA = "0x2B3EA64", Offset = "0x2B3EA64", VA = "0x2B3EA64")]
				get
				{
					return default(BasicsSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x20001D8")]
		public struct ChannelMixerSettings
		{
			[Token(Token = "0x4000C59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int currentChannel;

			[Token(Token = "0x4000C5A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Vector3[] channels;

			[Token(Token = "0x1700016D")]
			public static ChannelMixerSettings defaultSettings
			{
				[Token(Token = "0x6000C9E")]
				[Address(RVA = "0x2B3EA8C", Offset = "0x2B3EA8C", VA = "0x2B3EA8C")]
				get
				{
					return default(ChannelMixerSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x20001D9")]
		public struct CurvesSettings
		{
			[Token(Token = "0x4000C5B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "Curve", RVA = "0x15DED9C", Offset = "0x15DED9C")]
			public AnimationCurve master;

			[Token(Token = "0x4000C5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "Curve", RVA = "0x15DEDAC", Offset = "0x15DEDAC")]
			public AnimationCurve red;

			[Token(Token = "0x4000C5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "Curve", RVA = "0x15DEDCC", Offset = "0x15DEDCC")]
			public AnimationCurve green;

			[Token(Token = "0x4000C5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "Curve", RVA = "0x15DEDEC", Offset = "0x15DEDEC")]
			public AnimationCurve blue;

			[Token(Token = "0x1700016E")]
			public static CurvesSettings defaultSettings
			{
				[Token(Token = "0x6000C9F")]
				[Address(RVA = "0x2B3EC54", Offset = "0x2B3EC54", VA = "0x2B3EC54")]
				get
				{
					return default(CurvesSettings);
				}
			}

			[Token(Token = "0x1700016F")]
			public static AnimationCurve defaultCurve
			{
				[Token(Token = "0x6000CA0")]
				[Address(RVA = "0x2B3EE34", Offset = "0x2B3EE34", VA = "0x2B3EE34")]
				get
				{
					return null;
				}
			}
		}

		[Token(Token = "0x20001DA")]
		public enum ColorGradingPrecision
		{
			[Token(Token = "0x4000C60")]
			Normal = 0x10,
			[Token(Token = "0x4000C61")]
			High = 0x20
		}

		[Serializable]
		[Token(Token = "0x20001DB")]
		public struct ColorGradingSettings
		{
			[Token(Token = "0x4000C62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool enabled;

			[Token(Token = "0x4000C63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DEE0C", Offset = "0x15DEE0C")]
			public ColorGradingPrecision precision;

			[Token(Token = "0x4000C64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x15DEE44", Offset = "0x15DEE44")]
			[AttributeAttribute(Name = "ColorWheelGroup", RVA = "0x15DEE44", Offset = "0x15DEE44")]
			public ColorWheelsSettings colorWheels;

			[Token(Token = "0x4000C65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x15DEE7C", Offset = "0x15DEE7C")]
			[IndentedGroup]
			public BasicsSettings basics;

			[Token(Token = "0x4000C66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x15DEEB4", Offset = "0x15DEEB4")]
			[ChannelMixer]
			public ChannelMixerSettings channelMixer;

			[Token(Token = "0x4000C67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x15DEEEC", Offset = "0x15DEEEC")]
			[IndentedGroup]
			public CurvesSettings curves;

			[Token(Token = "0x4000C68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x15DEF24", Offset = "0x15DEF24")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DEF24", Offset = "0x15DEF24")]
			public bool useDithering;

			[Token(Token = "0x4000C69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DEF70", Offset = "0x15DEF70")]
			public bool showDebug;

			[Token(Token = "0x17000170")]
			public static ColorGradingSettings defaultSettings
			{
				[Token(Token = "0x6000CA1")]
				[Address(RVA = "0x2B3E948", Offset = "0x2B3E948", VA = "0x2B3E948")]
				get
				{
					return default(ColorGradingSettings);
				}
			}

			[Token(Token = "0x6000CA2")]
			[Address(RVA = "0x2B3ECE4", Offset = "0x2B3ECE4", VA = "0x2B3ECE4")]
			internal void Reset()
			{
			}
		}

		[Token(Token = "0x20001DC")]
		private enum Pass
		{
			[Token(Token = "0x4000C6B")]
			LutGen,
			[Token(Token = "0x4000C6C")]
			AdaptationLog,
			[Token(Token = "0x4000C6D")]
			AdaptationExpBlend,
			[Token(Token = "0x4000C6E")]
			AdaptationExp,
			[Token(Token = "0x4000C6F")]
			TonemappingOff,
			[Token(Token = "0x4000C70")]
			TonemappingACES,
			[Token(Token = "0x4000C71")]
			TonemappingCurve,
			[Token(Token = "0x4000C72")]
			TonemappingHable,
			[Token(Token = "0x4000C73")]
			TonemappingHejlDawson,
			[Token(Token = "0x4000C74")]
			TonemappingPhotographic,
			[Token(Token = "0x4000C75")]
			TonemappingReinhard,
			[Token(Token = "0x4000C76")]
			TonemappingNeutral,
			[Token(Token = "0x4000C77")]
			AdaptationDebug
		}

		[Token(Token = "0x4000070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[SettingsGroup]
		private EyeAdaptationSettings m_EyeAdaptation;

		[Token(Token = "0x4000071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[SettingsGroup]
		private TonemappingSettings m_Tonemapping;

		[Token(Token = "0x4000072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		[SettingsGroup]
		private ColorGradingSettings m_ColorGrading;

		[Token(Token = "0x4000073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		[SettingsGroup]
		private LUTSettings m_Lut;

		[Token(Token = "0x4000074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Texture2D m_IdentityLut;

		[Token(Token = "0x4000075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private RenderTexture m_InternalLut;

		[Token(Token = "0x4000076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Texture2D m_CurveTexture;

		[Token(Token = "0x4000077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Texture2D m_TonemapperCurve;

		[Token(Token = "0x4000078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private float m_TonemapperCurveRange;

		[Token(Token = "0x4000079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[SerializeField]
		private Shader m_Shader;

		[Token(Token = "0x400007A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Material m_Material;

		[Token(Token = "0x400007B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D5B3C", Offset = "0x15D5B3C")]
		private bool <validRenderTextureFormat>k__BackingField;

		[Token(Token = "0x400007C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x149")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D5B4C", Offset = "0x15D5B4C")]
		private bool <validUserLutSize>k__BackingField;

		[Token(Token = "0x400007D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14A")]
		private bool m_Dirty;

		[Token(Token = "0x400007E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14B")]
		private bool m_TonemapperDirty;

		[Token(Token = "0x400007F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private RenderTexture m_SmallAdaptiveRt;

		[Token(Token = "0x4000080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private RenderTextureFormat m_AdaptiveRtFormat;

		[Token(Token = "0x4000081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		private int m_AdaptationSpeed;

		[Token(Token = "0x4000082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private int m_MiddleGrey;

		[Token(Token = "0x4000083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private int m_AdaptationMin;

		[Token(Token = "0x4000084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private int m_AdaptationMax;

		[Token(Token = "0x4000085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private int m_LumTex;

		[Token(Token = "0x4000086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private int m_ToneCurveRange;

		[Token(Token = "0x4000087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		private int m_ToneCurve;

		[Token(Token = "0x4000088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private int m_Exposure;

		[Token(Token = "0x4000089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		private int m_NeutralTonemapperParams1;

		[Token(Token = "0x400008A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private int m_NeutralTonemapperParams2;

		[Token(Token = "0x400008B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		private int m_WhiteBalance;

		[Token(Token = "0x400008C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private int m_Lift;

		[Token(Token = "0x400008D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		private int m_Gamma;

		[Token(Token = "0x400008E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private int m_Gain;

		[Token(Token = "0x400008F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		private int m_ContrastGainGamma;

		[Token(Token = "0x4000090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private int m_Vibrance;

		[Token(Token = "0x4000091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		private int m_HSV;

		[Token(Token = "0x4000092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private int m_ChannelMixerRed;

		[Token(Token = "0x4000093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		private int m_ChannelMixerGreen;

		[Token(Token = "0x4000094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private int m_ChannelMixerBlue;

		[Token(Token = "0x4000095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		private int m_CurveTex;

		[Token(Token = "0x4000096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private int m_InternalLutTex;

		[Token(Token = "0x4000097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		private int m_InternalLutParams;

		[Token(Token = "0x4000098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private int m_UserLutTex;

		[Token(Token = "0x4000099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		private int m_UserLutParams;

		[Token(Token = "0x400009A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private RenderTexture[] m_AdaptRts;

		[Token(Token = "0x1700001E")]
		public EyeAdaptationSettings eyeAdaptation
		{
			[Token(Token = "0x6000072")]
			[Address(RVA = "0x2B3BC34", Offset = "0x2B3BC34", VA = "0x2B3BC34")]
			get
			{
				return default(EyeAdaptationSettings);
			}
			[Token(Token = "0x6000073")]
			[Address(RVA = "0x2B3BC48", Offset = "0x2B3BC48", VA = "0x2B3BC48")]
			set
			{
			}
		}

		[Token(Token = "0x1700001F")]
		public TonemappingSettings tonemapping
		{
			[Token(Token = "0x6000074")]
			[Address(RVA = "0x2B3BC5C", Offset = "0x2B3BC5C", VA = "0x2B3BC5C")]
			get
			{
				return default(TonemappingSettings);
			}
			[Token(Token = "0x6000075")]
			[Address(RVA = "0x2B3BC70", Offset = "0x2B3BC70", VA = "0x2B3BC70")]
			set
			{
			}
		}

		[Token(Token = "0x17000020")]
		public ColorGradingSettings colorGrading
		{
			[Token(Token = "0x6000076")]
			[Address(RVA = "0x2B3BCBC", Offset = "0x2B3BCBC", VA = "0x2B3BCBC")]
			get
			{
				return default(ColorGradingSettings);
			}
			[Token(Token = "0x6000077")]
			[Address(RVA = "0x2B3BCCC", Offset = "0x2B3BCCC", VA = "0x2B3BCCC")]
			set
			{
			}
		}

		[Token(Token = "0x17000021")]
		public LUTSettings lut
		{
			[Token(Token = "0x6000078")]
			[Address(RVA = "0x2B3BD14", Offset = "0x2B3BD14", VA = "0x2B3BD14")]
			get
			{
				return default(LUTSettings);
			}
			[Token(Token = "0x6000079")]
			[Address(RVA = "0x2B3BD28", Offset = "0x2B3BD28", VA = "0x2B3BD28")]
			set
			{
			}
		}

		[Token(Token = "0x17000022")]
		private Texture2D identityLut
		{
			[Token(Token = "0x600007A")]
			[Address(RVA = "0x2B3BD48", Offset = "0x2B3BD48", VA = "0x2B3BD48")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000023")]
		private RenderTexture internalLutRt
		{
			[Token(Token = "0x600007B")]
			[Address(RVA = "0x2B3C054", Offset = "0x2B3C054", VA = "0x2B3C054")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000024")]
		private Texture2D curveTexture
		{
			[Token(Token = "0x600007C")]
			[Address(RVA = "0x2B3C1C8", Offset = "0x2B3C1C8", VA = "0x2B3C1C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000025")]
		private Texture2D tonemapperCurve
		{
			[Token(Token = "0x600007D")]
			[Address(RVA = "0x2B3C2E8", Offset = "0x2B3C2E8", VA = "0x2B3C2E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000026")]
		public Shader shader
		{
			[Token(Token = "0x600007E")]
			[Address(RVA = "0x2B3C440", Offset = "0x2B3C440", VA = "0x2B3C440")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000027")]
		public Material material
		{
			[Token(Token = "0x600007F")]
			[Address(RVA = "0x2B3C4E4", Offset = "0x2B3C4E4", VA = "0x2B3C4E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000028")]
		public bool isGammaColorSpace
		{
			[Token(Token = "0x6000080")]
			[Address(RVA = "0x2B3C588", Offset = "0x2B3C588", VA = "0x2B3C588")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000029")]
		public int lutSize
		{
			[Token(Token = "0x6000081")]
			[Address(RVA = "0x2B3BE34", Offset = "0x2B3BE34", VA = "0x2B3BE34")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700002A")]
		public bool validRenderTextureFormat
		{
			[Token(Token = "0x6000082")]
			[Address(RVA = "0x2B3C5A8", Offset = "0x2B3C5A8", VA = "0x2B3C5A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E2710", Offset = "0x15E2710")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000083")]
			[Address(RVA = "0x2B3C5B0", Offset = "0x2B3C5B0", VA = "0x2B3C5B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E2720", Offset = "0x15E2720")]
			private set
			{
			}
		}

		[Token(Token = "0x1700002B")]
		public bool validUserLutSize
		{
			[Token(Token = "0x6000084")]
			[Address(RVA = "0x2B3C5BC", Offset = "0x2B3C5BC", VA = "0x2B3C5BC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E2730", Offset = "0x15E2730")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000085")]
			[Address(RVA = "0x2B3C5C4", Offset = "0x2B3C5C4", VA = "0x2B3C5C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E2740", Offset = "0x15E2740")]
			private set
			{
			}
		}

		[Token(Token = "0x6000086")]
		[Address(RVA = "0x2B3BD08", Offset = "0x2B3BD08", VA = "0x2B3BD08")]
		public void SetDirty()
		{
		}

		[Token(Token = "0x6000087")]
		[Address(RVA = "0x2B3BCB0", Offset = "0x2B3BCB0", VA = "0x2B3BCB0")]
		public void SetTonemapperDirty()
		{
		}

		[Token(Token = "0x6000088")]
		[Address(RVA = "0x2B3C5D0", Offset = "0x2B3C5D0", VA = "0x2B3C5D0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000089")]
		[Address(RVA = "0x2B3C868", Offset = "0x2B3C868", VA = "0x2B3C868")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600008A")]
		[Address(RVA = "0x2B3C8BC", Offset = "0x2B3C8BC", VA = "0x2B3C8BC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600008B")]
		[Address(RVA = "0x2B3CBAC", Offset = "0x2B3CBAC", VA = "0x2B3CBAC")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x600008C")]
		[Address(RVA = "0x2B3BE3C", Offset = "0x2B3BE3C", VA = "0x2B3BE3C")]
		private static Texture2D GenerateIdentityLut(int dim)
		{
			return null;
		}

		[Token(Token = "0x600008D")]
		[Address(RVA = "0x2B3CBB8", Offset = "0x2B3CBB8", VA = "0x2B3CBB8")]
		private float StandardIlluminantY(float x)
		{
			return default(float);
		}

		[Token(Token = "0x600008E")]
		[Address(RVA = "0x2B3CBE4", Offset = "0x2B3CBE4", VA = "0x2B3CBE4")]
		private Vector3 CIExyToLMS(float x, float y)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600008F")]
		[Address(RVA = "0x2B3CCA4", Offset = "0x2B3CCA4", VA = "0x2B3CCA4")]
		private Vector3 GetWhiteBalance()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000090")]
		[Address(RVA = "0x2B3CD8C", Offset = "0x2B3CD8C", VA = "0x2B3CD8C")]
		private static Color NormalizeColor(Color c)
		{
			return default(Color);
		}

		[Token(Token = "0x6000091")]
		[Address(RVA = "0x2B3CE7C", Offset = "0x2B3CE7C", VA = "0x2B3CE7C")]
		private void GenerateLiftGammaGain(out Color lift, out Color gamma, out Color gain)
		{
		}

		[Token(Token = "0x6000092")]
		[Address(RVA = "0x2B3D0E4", Offset = "0x2B3D0E4", VA = "0x2B3D0E4")]
		private void GenCurveTexture()
		{
		}

		[Token(Token = "0x6000093")]
		[Address(RVA = "0x2B3D308", Offset = "0x2B3D308", VA = "0x2B3D308")]
		private bool CheckUserLut()
		{
			return default(bool);
		}

		[Token(Token = "0x6000094")]
		[Address(RVA = "0x2B3D3EC", Offset = "0x2B3D3EC", VA = "0x2B3D3EC")]
		private bool CheckSmallAdaptiveRt()
		{
			return default(bool);
		}

		[Token(Token = "0x6000095")]
		[Address(RVA = "0x2B3D4F8", Offset = "0x2B3D4F8", VA = "0x2B3D4F8")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000096")]
		[Address(RVA = "0x2B3D6E8", Offset = "0x2B3D6E8", VA = "0x2B3D6E8")]
		[ImageEffectTransformsToLDR]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000097")]
		[Address(RVA = "0x2B3E670", Offset = "0x2B3E670", VA = "0x2B3E670")]
		public Texture2D BakeLUT()
		{
			return null;
		}

		[Token(Token = "0x6000098")]
		[Address(RVA = "0x2B3E7B4", Offset = "0x2B3E7B4", VA = "0x2B3E7B4")]
		public TonemappingColorGrading()
		{
		}
	}
}
namespace VLB
{
	[Token(Token = "0x2000012")]
	public static class BatchingHelper
	{
		[Token(Token = "0x400009B")]
		public const bool isGpuInstancingSupported = true;

		[Token(Token = "0x1700002C")]
		public static bool forceEnableDepthBlend
		{
			[Token(Token = "0x6000099")]
			[Address(RVA = "0x2B3EF7C", Offset = "0x2B3EF7C", VA = "0x2B3EF7C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600009A")]
		[Address(RVA = "0x2B3F034", Offset = "0x2B3F034", VA = "0x2B3F034")]
		public static bool IsGpuInstancingEnabled(Material material)
		{
			return default(bool);
		}

		[Token(Token = "0x600009B")]
		[Address(RVA = "0x2B3F04C", Offset = "0x2B3F04C", VA = "0x2B3F04C")]
		public static void SetMaterialProperties(Material material, bool enableGpuInstancing)
		{
		}

		[Token(Token = "0x600009C")]
		[Address(RVA = "0x2B3F068", Offset = "0x2B3F068", VA = "0x2B3F068")]
		public static bool CanBeBatched(VolumetricLightBeam beamA, VolumetricLightBeam beamB, ref string reasons)
		{
			return default(bool);
		}

		[Token(Token = "0x600009D")]
		[Address(RVA = "0x2B3F3B0", Offset = "0x2B3F3B0", VA = "0x2B3F3B0")]
		public static bool CanBeBatched(VolumetricLightBeam beam, ref string reasons)
		{
			return default(bool);
		}

		[Token(Token = "0x600009E")]
		[Address(RVA = "0x2B3F514", Offset = "0x2B3F514", VA = "0x2B3F514")]
		private static void AppendErrorMessage(ref string message, string toAppend)
		{
		}
	}
	[Token(Token = "0x2000013")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x15D3C00", Offset = "0x15D3C00")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x15D3C00", Offset = "0x15D3C00")]
	public class BeamGeometry : MonoBehaviour, MaterialModifier.Interface
	{
		[Token(Token = "0x20001DD")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D5634", Offset = "0x15D5634")]
		private sealed class <CoUpdateFadeOut>d__30 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000C78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000C79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000C7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public BeamGeometry <>4__this;

			[Token(Token = "0x17000171")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000CA6")]
				[Address(RVA = "0x3665334", Offset = "0x3665334", VA = "0x3665334", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000172")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000CA8")]
				[Address(RVA = "0x366539C", Offset = "0x366539C", VA = "0x366539C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000CA3")]
			[Address(RVA = "0x3660E98", Offset = "0x3660E98", VA = "0x3660E98")]
			[DebuggerHidden]
			public <CoUpdateFadeOut>d__30(int <>1__state)
			{
			}

			[Token(Token = "0x6000CA4")]
			[Address(RVA = "0x3665290", Offset = "0x3665290", VA = "0x3665290", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000CA5")]
			[Address(RVA = "0x3665294", Offset = "0x3665294", VA = "0x3665294", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000CA7")]
			[Address(RVA = "0x366533C", Offset = "0x366533C", VA = "0x366533C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400009C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private VolumetricLightBeam m_Master;

		[Token(Token = "0x400009D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Matrix4x4 m_ColorGradientMatrix;

		[Token(Token = "0x400009E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private MeshType m_CurrentMeshType;

		[Token(Token = "0x400009F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material m_CustomMaterial;

		[Token(Token = "0x40000A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private MaterialModifier.Callback m_MaterialModifierCallback;

		[Token(Token = "0x40000A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Coroutine m_CoFadeOut;

		[Token(Token = "0x40000A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D5B5C", Offset = "0x15D5B5C")]
		private MeshRenderer <meshRenderer>k__BackingField;

		[Token(Token = "0x40000A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D5B6C", Offset = "0x15D5B6C")]
		private MeshFilter <meshFilter>k__BackingField;

		[Token(Token = "0x40000A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D5B7C", Offset = "0x15D5B7C")]
		private Mesh <coneMesh>k__BackingField;

		[Token(Token = "0x40000A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Camera m_CurrentCameraRenderingSRP;

		[Token(Token = "0x1700002D")]
		public MeshRenderer meshRenderer
		{
			[Token(Token = "0x600009F")]
			[Address(RVA = "0x3660B8C", Offset = "0x3660B8C", VA = "0x3660B8C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E2760", Offset = "0x15E2760")]
			get
			{
				return null;
			}
			[Token(Token = "0x60000A0")]
			[Address(RVA = "0x3660B94", Offset = "0x3660B94", VA = "0x3660B94")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E2770", Offset = "0x15E2770")]
			private set
			{
			}
		}

		[Token(Token = "0x1700002E")]
		public MeshFilter meshFilter
		{
			[Token(Token = "0x60000A1")]
			[Address(RVA = "0x3660B9C", Offset = "0x3660B9C", VA = "0x3660B9C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E2780", Offset = "0x15E2780")]
			get
			{
				return null;
			}
			[Token(Token = "0x60000A2")]
			[Address(RVA = "0x3660BA4", Offset = "0x3660BA4", VA = "0x3660BA4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E2790", Offset = "0x15E2790")]
			private set
			{
			}
		}

		[Token(Token = "0x1700002F")]
		public Mesh coneMesh
		{
			[Token(Token = "0x60000A3")]
			[Address(RVA = "0x3660BAC", Offset = "0x3660BAC", VA = "0x3660BAC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E27A0", Offset = "0x15E27A0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60000A4")]
			[Address(RVA = "0x3660BB4", Offset = "0x3660BB4", VA = "0x3660BB4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E27B0", Offset = "0x15E27B0")]
			private set
			{
			}
		}

		[Token(Token = "0x17000030")]
		public bool visible
		{
			[Token(Token = "0x60000A5")]
			[Address(RVA = "0x3660BBC", Offset = "0x3660BBC", VA = "0x3660BBC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60000A6")]
			[Address(RVA = "0x3660BD8", Offset = "0x3660BD8", VA = "0x3660BD8")]
			set
			{
			}
		}

		[Token(Token = "0x17000031")]
		public int sortingLayerID
		{
			[Token(Token = "0x60000A7")]
			[Address(RVA = "0x3660BF8", Offset = "0x3660BF8", VA = "0x3660BF8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60000A8")]
			[Address(RVA = "0x3660C14", Offset = "0x3660C14", VA = "0x3660C14")]
			set
			{
			}
		}

		[Token(Token = "0x17000032")]
		public int sortingOrder
		{
			[Token(Token = "0x60000A9")]
			[Address(RVA = "0x3660C30", Offset = "0x3660C30", VA = "0x3660C30")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60000AA")]
			[Address(RVA = "0x3660C4C", Offset = "0x3660C4C", VA = "0x3660C4C")]
			set
			{
			}
		}

		[Token(Token = "0x17000033")]
		public bool _INTERNAL_IsFadeOutCoroutineRunning
		{
			[Token(Token = "0x60000AB")]
			[Address(RVA = "0x3660C68", Offset = "0x3660C68", VA = "0x3660C68")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000034")]
		public static bool isCustomRenderPipelineSupported
		{
			[Token(Token = "0x60000B4")]
			[Address(RVA = "0x36616B4", Offset = "0x36616B4", VA = "0x36616B4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000035")]
		private bool shouldUseGPUInstancedMaterial
		{
			[Token(Token = "0x60000B5")]
			[Address(RVA = "0x36616BC", Offset = "0x36616BC", VA = "0x36616BC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000036")]
		private bool isNoiseEnabled
		{
			[Token(Token = "0x60000BA")]
			[Address(RVA = "0x3663880", Offset = "0x3663880", VA = "0x3663880")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000037")]
		private bool isDepthBlendEnabled
		{
			[Token(Token = "0x60000BB")]
			[Address(RVA = "0x3663A70", Offset = "0x3663A70", VA = "0x3663A70")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60000AC")]
		[Address(RVA = "0x3660C78", Offset = "0x3660C78", VA = "0x3660C78")]
		private float ComputeFadeOutFactor(Transform camTransform)
		{
			return default(float);
		}

		[Token(Token = "0x60000AD")]
		[Address(RVA = "0x3660E1C", Offset = "0x3660E1C", VA = "0x3660E1C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x15E27C0", Offset = "0x15E27C0")]
		private IEnumerator CoUpdateFadeOut()
		{
			return null;
		}

		[Token(Token = "0x60000AE")]
		[Address(RVA = "0x3660EC4", Offset = "0x3660EC4", VA = "0x3660EC4")]
		private void ComputeFadeOutFactor()
		{
		}

		[Token(Token = "0x60000AF")]
		[Address(RVA = "0x3661068", Offset = "0x3661068", VA = "0x3661068")]
		private void SetFadeOutFactorProp(float value)
		{
		}

		[Token(Token = "0x60000B0")]
		[Address(RVA = "0x36613AC", Offset = "0x36613AC", VA = "0x36613AC")]
		public void RestartFadeOutCoroutine()
		{
		}

		[Token(Token = "0x60000B1")]
		[Address(RVA = "0x36614A8", Offset = "0x36614A8", VA = "0x36614A8")]
		private void Start()
		{
		}

		[Token(Token = "0x60000B2")]
		[Address(RVA = "0x3661568", Offset = "0x3661568", VA = "0x3661568")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60000B3")]
		[Address(RVA = "0x3661628", Offset = "0x3661628", VA = "0x3661628")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60000B6")]
		[Address(RVA = "0x36617A8", Offset = "0x36617A8", VA = "0x36617A8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60000B7")]
		[Address(RVA = "0x366182C", Offset = "0x366182C", VA = "0x366182C")]
		public void Initialize(VolumetricLightBeam master)
		{
		}

		[Token(Token = "0x60000B8")]
		[Address(RVA = "0x3662054", Offset = "0x3662054", VA = "0x3662054")]
		public void RegenerateMesh()
		{
		}

		[Token(Token = "0x60000B9")]
		[Address(RVA = "0x36635CC", Offset = "0x36635CC", VA = "0x36635CC")]
		private void ComputeLocalMatrix()
		{
		}

		[Token(Token = "0x60000BC")]
		[Address(RVA = "0x3661D5C", Offset = "0x3661D5C", VA = "0x3661D5C")]
		private bool ApplyMaterial()
		{
			return default(bool);
		}

		[Token(Token = "0x60000BD")]
		[Address(RVA = "0x36611F4", Offset = "0x36611F4", VA = "0x36611F4", Slot = "4")]
		public void SetMaterialProp(int nameID, float value)
		{
		}

		[Token(Token = "0x60000BE")]
		[Address(RVA = "0x3664088", Offset = "0x3664088", VA = "0x3664088", Slot = "5")]
		public void SetMaterialProp(int nameID, Vector4 value)
		{
		}

		[Token(Token = "0x60000BF")]
		[Address(RVA = "0x36641AC", Offset = "0x36641AC", VA = "0x36641AC", Slot = "6")]
		public void SetMaterialProp(int nameID, Color value)
		{
		}

		[Token(Token = "0x60000C0")]
		[Address(RVA = "0x36642D0", Offset = "0x36642D0", VA = "0x36642D0", Slot = "7")]
		public void SetMaterialProp(int nameID, Matrix4x4 value)
		{
		}

		[Token(Token = "0x60000C1")]
		[Address(RVA = "0x36643FC", Offset = "0x36643FC", VA = "0x36643FC", Slot = "8")]
		public void SetMaterialProp(int nameID, Texture value)
		{
		}

		[Token(Token = "0x60000C2")]
		[Address(RVA = "0x3661130", Offset = "0x3661130", VA = "0x3661130")]
		private void MaterialChangeStart()
		{
		}

		[Token(Token = "0x60000C3")]
		[Address(RVA = "0x36612E8", Offset = "0x36612E8", VA = "0x36612E8")]
		private void MaterialChangeStop()
		{
		}

		[Token(Token = "0x60000C4")]
		[Address(RVA = "0x36644D8", Offset = "0x36644D8", VA = "0x36644D8")]
		public void SetDynamicOcclusionCallback(string shaderKeyword, MaterialModifier.Callback cb)
		{
		}

		[Token(Token = "0x60000C5")]
		[Address(RVA = "0x3662F6C", Offset = "0x3662F6C", VA = "0x3662F6C")]
		public void UpdateMaterialAndBounds()
		{
		}

		[Token(Token = "0x60000C6")]
		[Address(RVA = "0x3664AD0", Offset = "0x3664AD0", VA = "0x3664AD0")]
		private void UpdateMatricesPropertiesForGPUInstancingSRP()
		{
		}

		[Token(Token = "0x60000C7")]
		[Address(RVA = "0x3664C14", Offset = "0x3664C14", VA = "0x3664C14")]
		private void OnBeginCameraRenderingSRP(ScriptableRenderContext context, Camera cam)
		{
		}

		[Token(Token = "0x60000C8")]
		[Address(RVA = "0x3664C20", Offset = "0x3664C20", VA = "0x3664C20")]
		private void OnWillRenderObject()
		{
		}

		[Token(Token = "0x60000C9")]
		[Address(RVA = "0x3664C60", Offset = "0x3664C60", VA = "0x3664C60")]
		private void OnWillCameraRenderThisBeam(Camera cam)
		{
		}

		[Token(Token = "0x60000CA")]
		[Address(RVA = "0x3664D50", Offset = "0x3664D50", VA = "0x3664D50")]
		private void UpdateCameraRelatedProperties(Camera cam)
		{
		}

		[Token(Token = "0x60000CB")]
		[Address(RVA = "0x3665288", Offset = "0x3665288", VA = "0x3665288")]
		public BeamGeometry()
		{
		}
	}
	[Token(Token = "0x2000014")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x15D3C70", Offset = "0x15D3C70")]
	public class Config : ScriptableObject
	{
		[Token(Token = "0x40000A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool geometryOverrideLayer;

		[Token(Token = "0x40000A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int geometryLayerID;

		[Token(Token = "0x40000A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string geometryTag;

		[Token(Token = "0x40000A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int geometryRenderQueue;

		[Token(Token = "0x40000AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x15D5B8C", Offset = "0x15D5B8C")]
		[SerializeField]
		private RenderPipeline _RenderPipeline;

		[Token(Token = "0x40000AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x15D5BD8", Offset = "0x15D5BD8")]
		[SerializeField]
		private RenderingMode _RenderingMode;

		[Token(Token = "0x40000AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float ditheringFactor;

		[Token(Token = "0x40000AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int sharedMeshSides;

		[Token(Token = "0x40000AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int sharedMeshSegments;

		[Token(Token = "0x40000AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D5C24", Offset = "0x15D5C24")]
		public float globalNoiseScale;

		[Token(Token = "0x40000B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 globalNoiseVelocity;

		[Token(Token = "0x40000B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string fadeOutCameraTag;

		[Token(Token = "0x40000B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HighlightNull]
		public TextAsset noise3DData;

		[Token(Token = "0x40000B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int noise3DSize;

		[Token(Token = "0x40000B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HighlightNull]
		public ParticleSystem dustParticlesPrefab;

		[Token(Token = "0x40000B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Texture2D ditheringNoiseTexture;

		[Token(Token = "0x40000B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private int pluginVersion;

		[Token(Token = "0x40000B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private Material _DummyMaterial;

		[Token(Token = "0x40000B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private Shader _BeamShader;

		[Token(Token = "0x40000B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Transform m_CachedFadeOutCamera;

		[Token(Token = "0x40000BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Config m_Instance;

		[Token(Token = "0x17000038")]
		public RenderPipeline renderPipeline
		{
			[Token(Token = "0x60000CC")]
			[Address(RVA = "0x36653A4", Offset = "0x36653A4", VA = "0x36653A4")]
			get
			{
				return default(RenderPipeline);
			}
			[Token(Token = "0x60000CD")]
			[Address(RVA = "0x36653AC", Offset = "0x36653AC", VA = "0x36653AC")]
			set
			{
			}
		}

		[Token(Token = "0x17000039")]
		public RenderingMode renderingMode
		{
			[Token(Token = "0x60000CE")]
			[Address(RVA = "0x3665418", Offset = "0x3665418", VA = "0x3665418")]
			get
			{
				return default(RenderingMode);
			}
			[Token(Token = "0x60000CF")]
			[Address(RVA = "0x3665420", Offset = "0x3665420", VA = "0x3665420")]
			set
			{
			}
		}

		[Token(Token = "0x1700003A")]
		public RenderingMode actualRenderingMode
		{
			[Token(Token = "0x60000D2")]
			[Address(RVA = "0x3661750", Offset = "0x3661750", VA = "0x3661750")]
			get
			{
				return default(RenderingMode);
			}
		}

		[Token(Token = "0x1700003B")]
		public bool useSinglePassShader
		{
			[Token(Token = "0x60000D3")]
			[Address(RVA = "0x3662358", Offset = "0x3662358", VA = "0x3662358")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700003C")]
		public Shader beamShader
		{
			[Token(Token = "0x60000D4")]
			[Address(RVA = "0x36654C0", Offset = "0x36654C0", VA = "0x36654C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700003D")]
		public Vector4 globalNoiseParam
		{
			[Token(Token = "0x60000D5")]
			[Address(RVA = "0x36654C8", Offset = "0x36654C8", VA = "0x36654C8")]
			get
			{
				return default(Vector4);
			}
		}

		[Token(Token = "0x1700003E")]
		public Transform fadeOutCameraTransform
		{
			[Token(Token = "0x60000D6")]
			[Address(RVA = "0x3660FE4", Offset = "0x3660FE4", VA = "0x3660FE4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700003F")]
		public static Config Instance
		{
			[Token(Token = "0x60000DF")]
			[Address(RVA = "0x3660F84", Offset = "0x3660F84", VA = "0x3660F84")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000D0")]
		[Address(RVA = "0x366548C", Offset = "0x366548C", VA = "0x366548C")]
		public void SetRenderingModeAndRefreshShader(RenderingMode mode)
		{
		}

		[Token(Token = "0x60000D1")]
		[Address(RVA = "0x3665490", Offset = "0x3665490", VA = "0x3665490")]
		public bool IsSRPBatcherSupported()
		{
			return default(bool);
		}

		[Token(Token = "0x60000D7")]
		[Address(RVA = "0x3665500", Offset = "0x3665500", VA = "0x3665500")]
		public void ForceUpdateFadeOutCamera()
		{
		}

		[Token(Token = "0x60000D8")]
		[Address(RVA = "0x36655B0", Offset = "0x36655B0", VA = "0x36655B0")]
		[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0x15E2824", Offset = "0x15E2824")]
		private static void OnStartup()
		{
		}

		[Token(Token = "0x60000D9")]
		[Address(RVA = "0x36656B8", Offset = "0x36656B8", VA = "0x36656B8")]
		public void Reset()
		{
		}

		[Token(Token = "0x60000DA")]
		[Address(RVA = "0x366562C", Offset = "0x366562C", VA = "0x366562C")]
		private void RefreshGlobalShaderProperties()
		{
		}

		[Token(Token = "0x60000DB")]
		[Address(RVA = "0x3665780", Offset = "0x3665780", VA = "0x3665780")]
		public void ResetInternalData()
		{
		}

		[Token(Token = "0x60000DC")]
		[Address(RVA = "0x366590C", Offset = "0x366590C", VA = "0x366590C")]
		public ParticleSystem NewVolumetricDustParticles()
		{
			return null;
		}

		[Token(Token = "0x60000DD")]
		[Address(RVA = "0x3665AA0", Offset = "0x3665AA0", VA = "0x3665AA0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60000DE")]
		[Address(RVA = "0x3665AAC", Offset = "0x3665AAC", VA = "0x3665AAC")]
		private void HandleBackwardCompatibility(int serializedVersion, int newVersion)
		{
		}

		[Token(Token = "0x60000E0")]
		[Address(RVA = "0x3665AB0", Offset = "0x3665AB0", VA = "0x3665AB0")]
		private static Config GetInstance(bool assertIfNotFound)
		{
			return null;
		}

		[Token(Token = "0x60000E1")]
		[Address(RVA = "0x3665BF4", Offset = "0x3665BF4", VA = "0x3665BF4")]
		public Config()
		{
		}
	}
	[Token(Token = "0x2000015")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x15D3CA8", Offset = "0x15D3CA8")]
	public class ConfigOverride : Config
	{
		[Token(Token = "0x40000BB")]
		public const string kAssetName = "VLBConfigOverride";

		[Token(Token = "0x60000E3")]
		[Address(RVA = "0x3665CE4", Offset = "0x3665CE4", VA = "0x3665CE4")]
		public ConfigOverride()
		{
		}
	}
	[Token(Token = "0x2000016")]
	public static class Consts
	{
		[Token(Token = "0x40000BC")]
		private const string HelpUrlBase = "http://saladgamer.com/vlb-doc/";

		[Token(Token = "0x40000BD")]
		public const string HelpUrlBeam = "http://saladgamer.com/vlb-doc/comp-lightbeam/";

		[Token(Token = "0x40000BE")]
		public const string HelpUrlDustParticles = "http://saladgamer.com/vlb-doc/comp-dustparticles/";

		[Token(Token = "0x40000BF")]
		public const string HelpUrlDynamicOcclusionRaycasting = "http://saladgamer.com/vlb-doc/comp-dynocclusion-raycasting/";

		[Token(Token = "0x40000C0")]
		public const string HelpUrlDynamicOcclusionDepthBuffer = "http://saladgamer.com/vlb-doc/comp-dynocclusion-depthbuffer/";

		[Token(Token = "0x40000C1")]
		public const string HelpUrlTriggerZone = "http://saladgamer.com/vlb-doc/comp-triggerzone/";

		[Token(Token = "0x40000C2")]
		public const string HelpUrlConfig = "http://saladgamer.com/vlb-doc/config/";

		[Token(Token = "0x40000C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly bool ProceduralObjectsVisibleInEditor;

		[Token(Token = "0x40000C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static readonly Color FlatColor;

		[Token(Token = "0x40000C5")]
		public const ColorMode ColorModeDefault = ColorMode.Flat;

		[Token(Token = "0x40000C6")]
		public const float IntensityDefault = 1f;

		[Token(Token = "0x40000C7")]
		public const float IntensityMin = 0f;

		[Token(Token = "0x40000C8")]
		public const float IntensityMax = 8f;

		[Token(Token = "0x40000C9")]
		public const float SpotAngleDefault = 35f;

		[Token(Token = "0x40000CA")]
		public const float SpotAngleMin = 0.1f;

		[Token(Token = "0x40000CB")]
		public const float SpotAngleMax = 179.9f;

		[Token(Token = "0x40000CC")]
		public const float ConeRadiusStart = 0.1f;

		[Token(Token = "0x40000CD")]
		public const MeshType GeomMeshType = MeshType.Shared;

		[Token(Token = "0x40000CE")]
		public const int GeomSidesDefault = 18;

		[Token(Token = "0x40000CF")]
		public const int GeomSidesMin = 3;

		[Token(Token = "0x40000D0")]
		public const int GeomSidesMax = 256;

		[Token(Token = "0x40000D1")]
		public const int GeomSegmentsDefault = 5;

		[Token(Token = "0x40000D2")]
		public const int GeomSegmentsMin = 0;

		[Token(Token = "0x40000D3")]
		public const int GeomSegmentsMax = 64;

		[Token(Token = "0x40000D4")]
		public const bool GeomCap = false;

		[Token(Token = "0x40000D5")]
		public const AttenuationEquation AttenuationEquationDefault = AttenuationEquation.Quadratic;

		[Token(Token = "0x40000D6")]
		public const float AttenuationCustomBlending = 0.5f;

		[Token(Token = "0x40000D7")]
		public const float FallOffStart = 0f;

		[Token(Token = "0x40000D8")]
		public const float FallOffEnd = 3f;

		[Token(Token = "0x40000D9")]
		public const float FallOffDistancesMinThreshold = 0.01f;

		[Token(Token = "0x40000DA")]
		public const float DepthBlendDistance = 2f;

		[Token(Token = "0x40000DB")]
		public const float CameraClippingDistance = 0.5f;

		[Token(Token = "0x40000DC")]
		public const float FresnelPowMaxValue = 10f;

		[Token(Token = "0x40000DD")]
		public const float FresnelPow = 8f;

		[Token(Token = "0x40000DE")]
		public const float GlareFrontal = 0.5f;

		[Token(Token = "0x40000DF")]
		public const float GlareBehind = 0.5f;

		[Token(Token = "0x40000E0")]
		public const NoiseMode NoiseModeDefault = NoiseMode.Disabled;

		[Token(Token = "0x40000E1")]
		public const float NoiseIntensityMin = 0f;

		[Token(Token = "0x40000E2")]
		public const float NoiseIntensityMax = 1f;

		[Token(Token = "0x40000E3")]
		public const float NoiseIntensityDefault = 0.5f;

		[Token(Token = "0x40000E4")]
		public const float NoiseScaleMin = 0.01f;

		[Token(Token = "0x40000E5")]
		public const float NoiseScaleMax = 2f;

		[Token(Token = "0x40000E6")]
		public const float NoiseScaleDefault = 0.5f;

		[Token(Token = "0x40000E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public static readonly Vector3 NoiseVelocityDefault;

		[Token(Token = "0x40000E8")]
		public const BlendingMode BlendingModeDefault = BlendingMode.Additive;

		[Token(Token = "0x40000E9")]
		public const float FadeOutBeginDefault = -150f;

		[Token(Token = "0x40000EA")]
		public const float FadeOutEndDefault = -200f;

		[Token(Token = "0x40000EB")]
		public const Dimensions BeamDimensions = Dimensions.Dim3D;

		[Token(Token = "0x40000EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly LayerMask DynOcclusionLayerMaskDefault;

		[Token(Token = "0x40000ED")]
		public const float DynOcclusionFadeDistanceToSurfaceDefault = 0.25f;

		[Token(Token = "0x40000EE")]
		public const DynamicOcclusionUpdateRate DynamicOcclusionUpdateRateDefault = DynamicOcclusionUpdateRate.EveryXFrames;

		[Token(Token = "0x40000EF")]
		public const int DynOcclusionWaitFramesCountDefault = 3;

		[Token(Token = "0x40000F0")]
		public const Dimensions DynOcclusionRaycastingDimensionsDefault = Dimensions.Dim3D;

		[Token(Token = "0x40000F1")]
		public const bool DynOcclusionRaycastingConsiderTriggersDefault = false;

		[Token(Token = "0x40000F2")]
		public const float DynOcclusionRaycastingMinOccluderAreaDefault = 0f;

		[Token(Token = "0x40000F3")]
		public const float DynOcclusionRaycastingMinSurfaceRatioDefault = 0.5f;

		[Token(Token = "0x40000F4")]
		public const float DynOcclusionRaycastingMinSurfaceRatioMin = 50f;

		[Token(Token = "0x40000F5")]
		public const float DynOcclusionRaycastingMinSurfaceRatioMax = 100f;

		[Token(Token = "0x40000F6")]
		public const float DynOcclusionRaycastingMaxSurfaceDotDefault = 0.25f;

		[Token(Token = "0x40000F7")]
		public const float DynOcclusionRaycastingMaxSurfaceAngleMin = 45f;

		[Token(Token = "0x40000F8")]
		public const float DynOcclusionRaycastingMaxSurfaceAngleMax = 90f;

		[Token(Token = "0x40000F9")]
		public const PlaneAlignment DynOcclusionRaycastingPlaneAlignmentDefault = PlaneAlignment.Surface;

		[Token(Token = "0x40000FA")]
		public const float DynOcclusionRaycastingPlaneOffsetDefault = 0.1f;

		[Token(Token = "0x40000FB")]
		public const int DynOcclusionDepthBufferDepthMapResolutionDefault = 32;

		[Token(Token = "0x40000FC")]
		public const bool DynOcclusionDepthBufferOcclusionCullingDefault = true;

		[Token(Token = "0x40000FD")]
		public const bool ConfigGeometryOverrideLayerDefault = true;

		[Token(Token = "0x40000FE")]
		public const int ConfigGeometryLayerIDDefault = 1;

		[Token(Token = "0x40000FF")]
		public const string ConfigGeometryTagDefault = "Untagged";

		[Token(Token = "0x4000100")]
		public const string ConfigFadeOutCameraTagDefault = "MainCamera";

		[Token(Token = "0x4000101")]
		public const RenderQueue ConfigGeometryRenderQueueDefault = RenderQueue.Transparent;

		[Token(Token = "0x4000102")]
		public const RenderPipeline ConfigGeometryRenderPipelineDefault = RenderPipeline.BuiltIn;

		[Token(Token = "0x4000103")]
		public const RenderingMode ConfigGeometryRenderingModeDefault = RenderingMode.SinglePass;

		[Token(Token = "0x4000104")]
		public const int ConfigNoise3DSizeDefault = 64;

		[Token(Token = "0x4000105")]
		public const int ConfigSharedMeshSides = 24;

		[Token(Token = "0x4000106")]
		public const int ConfigSharedMeshSegments = 5;

		[Token(Token = "0x4000107")]
		public const float ConfigDitheringFactor = 0f;

		[Token(Token = "0x17000040")]
		public static HideFlags ProceduralObjectsHideFlags
		{
			[Token(Token = "0x60000E4")]
			[Address(RVA = "0x3661B9C", Offset = "0x3661B9C", VA = "0x3661B9C")]
			get
			{
				return default(HideFlags);
			}
		}
	}
	[Token(Token = "0x2000017")]
	public static class DummyMaterial
	{
	}
	[Token(Token = "0x2000018")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x15D3CE0", Offset = "0x15D3CE0")]
	[DisallowMultipleComponent]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x15D3CE0", Offset = "0x15D3CE0")]
	public abstract class DynamicOcclusionAbstractBase : MonoBehaviour
	{
		[Token(Token = "0x20001DE")]
		protected enum ProcessOcclusionSource
		{
			[Token(Token = "0x4000C7C")]
			RenderLoop,
			[Token(Token = "0x4000C7D")]
			OnEnable,
			[Token(Token = "0x4000C7E")]
			EditorUpdate,
			[Token(Token = "0x4000C7F")]
			User
		}

		[Token(Token = "0x4000108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DynamicOcclusionUpdateRate updateRate;

		[Token(Token = "0x4000109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x15D5C90", Offset = "0x15D5C90")]
		public int waitXFrames;

		[Token(Token = "0x400010B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool _INTERNAL_ApplyRandomFrameOffset;

		[Token(Token = "0x400010C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TransformUtils.Packed m_TransformPacked;

		[Token(Token = "0x400010D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int m_LastFrameRendered;

		[Token(Token = "0x400010E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected VolumetricLightBeam m_Master;

		[Token(Token = "0x17000041")]
		public int _INTERNAL_LastFrameRendered
		{
			[Token(Token = "0x60000EA")]
			[Address(RVA = "0x36662AC", Offset = "0x36662AC", VA = "0x36662AC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x14000001")]
		public event Action onOcclusionProcessed
		{
			[Token(Token = "0x60000E7")]
			[Address(RVA = "0x3666008", Offset = "0x3666008", VA = "0x3666008")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E2834", Offset = "0x15E2834")]
			add
			{
			}
			[Token(Token = "0x60000E8")]
			[Address(RVA = "0x36660AC", Offset = "0x36660AC", VA = "0x36660AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E2844", Offset = "0x15E2844")]
			remove
			{
			}
		}

		[Token(Token = "0x60000E6")]
		[Address(RVA = "0x3665E18", Offset = "0x3665E18", VA = "0x3665E18")]
		public void ProcessOcclusionManually()
		{
		}

		[Token(Token = "0x60000E9")]
		[Address(RVA = "0x3665E20", Offset = "0x3665E20", VA = "0x3665E20")]
		protected void ProcessOcclusion(ProcessOcclusionSource source)
		{
		}

		[Token(Token = "0x60000EB")]
		protected abstract string GetShaderKeyword();

		[Token(Token = "0x60000EC")]
		protected abstract MaterialManager.DynamicOcclusion GetDynamicOcclusionMode();

		[Token(Token = "0x60000ED")]
		protected abstract bool OnProcessOcclusion(ProcessOcclusionSource source);

		[Token(Token = "0x60000EE")]
		protected abstract void OnModifyMaterialCallback(MaterialModifier.Interface owner);

		[Token(Token = "0x60000EF")]
		protected abstract void OnEnablePostValidate();

		[Token(Token = "0x60000F0")]
		[Address(RVA = "0x36662B4", Offset = "0x36662B4", VA = "0x36662B4", Slot = "9")]
		protected virtual void OnValidateProperties()
		{
		}

		[Token(Token = "0x60000F1")]
		[Address(RVA = "0x3666330", Offset = "0x3666330", VA = "0x3666330", Slot = "10")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60000F2")]
		[Address(RVA = "0x36663B4", Offset = "0x36663B4", VA = "0x36663B4", Slot = "11")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x60000F3")]
		[Address(RVA = "0x366640C", Offset = "0x366640C", VA = "0x366640C", Slot = "12")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x60000F4")]
		[Address(RVA = "0x3666708", Offset = "0x3666708", VA = "0x3666708", Slot = "13")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x60000F5")]
		[Address(RVA = "0x3666848", Offset = "0x3666848", VA = "0x3666848")]
		private void OnWillCameraRender(Camera cam)
		{
		}

		[Token(Token = "0x60000F6")]
		[Address(RVA = "0x36663D0", Offset = "0x36663D0", VA = "0x36663D0")]
		private void DisableOcclusion()
		{
		}

		[Token(Token = "0x60000F7")]
		[Address(RVA = "0x3666B88", Offset = "0x3666B88", VA = "0x3666B88")]
		protected DynamicOcclusionAbstractBase()
		{
		}

		[Token(Token = "0x60000F9")]
		[Address(RVA = "0x3666BF8", Offset = "0x3666BF8", VA = "0x3666BF8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E2854", Offset = "0x15E2854")]
		private void <OnEnable>b__22_0()
		{
		}
	}
	[Token(Token = "0x2000019")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x15D3D78", Offset = "0x15D3D78")]
	public class DynamicOcclusionDepthBuffer : DynamicOcclusionAbstractBase
	{
		[Token(Token = "0x400010F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public LayerMask layerMask;

		[Token(Token = "0x4000110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool useOcclusionCulling;

		[Token(Token = "0x4000111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int depthMapResolution;

		[Token(Token = "0x4000112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float fadeDistanceToSurface;

		[Token(Token = "0x4000113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Camera m_DepthCamera;

		[Token(Token = "0x4000114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool m_NeedToUpdateOcclusionNextFrame;

		[Token(Token = "0x60000FA")]
		[Address(RVA = "0x3666C00", Offset = "0x3666C00", VA = "0x3666C00", Slot = "4")]
		protected override string GetShaderKeyword()
		{
			return null;
		}

		[Token(Token = "0x60000FB")]
		[Address(RVA = "0x3666C48", Offset = "0x3666C48", VA = "0x3666C48", Slot = "5")]
		protected override MaterialManager.DynamicOcclusion GetDynamicOcclusionMode()
		{
			return default(MaterialManager.DynamicOcclusion);
		}

		[Token(Token = "0x60000FC")]
		[Address(RVA = "0x3666C50", Offset = "0x3666C50", VA = "0x3666C50")]
		private void ProcessOcclusionInternal()
		{
		}

		[Token(Token = "0x60000FD")]
		[Address(RVA = "0x3666EC0", Offset = "0x3666EC0", VA = "0x3666EC0", Slot = "6")]
		protected override bool OnProcessOcclusion(ProcessOcclusionSource source)
		{
			return default(bool);
		}

		[Token(Token = "0x60000FE")]
		[Address(RVA = "0x3666F04", Offset = "0x3666F04", VA = "0x3666F04")]
		private void Update()
		{
		}

		[Token(Token = "0x60000FF")]
		[Address(RVA = "0x3666C80", Offset = "0x3666C80", VA = "0x3666C80")]
		private void UpdateDepthCameraPropertiesAccordingToBeam()
		{
		}

		[Token(Token = "0x6000100")]
		[Address(RVA = "0x3667108", Offset = "0x3667108", VA = "0x3667108")]
		public bool HasLayerMaskIssues()
		{
			return default(bool);
		}

		[Token(Token = "0x6000101")]
		[Address(RVA = "0x36671C4", Offset = "0x36671C4", VA = "0x36671C4", Slot = "9")]
		protected override void OnValidateProperties()
		{
		}

		[Token(Token = "0x6000102")]
		[Address(RVA = "0x3667264", Offset = "0x3667264", VA = "0x3667264")]
		private void InstantiateOrActivateDepthCamera()
		{
		}

		[Token(Token = "0x6000103")]
		[Address(RVA = "0x3667528", Offset = "0x3667528", VA = "0x3667528", Slot = "8")]
		protected override void OnEnablePostValidate()
		{
		}

		[Token(Token = "0x6000104")]
		[Address(RVA = "0x366752C", Offset = "0x366752C", VA = "0x366752C", Slot = "13")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6000105")]
		[Address(RVA = "0x36675D4", Offset = "0x36675D4", VA = "0x36675D4", Slot = "10")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000106")]
		[Address(RVA = "0x36675D8", Offset = "0x36675D8", VA = "0x36675D8", Slot = "11")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6000107")]
		[Address(RVA = "0x36675FC", Offset = "0x36675FC", VA = "0x36675FC")]
		private void DestroyDepthCamera()
		{
		}

		[Token(Token = "0x6000108")]
		[Address(RVA = "0x3667780", Offset = "0x3667780", VA = "0x3667780", Slot = "7")]
		protected override void OnModifyMaterialCallback(MaterialModifier.Interface owner)
		{
		}

		[Token(Token = "0x6000109")]
		[Address(RVA = "0x3667910", Offset = "0x3667910", VA = "0x3667910")]
		public DynamicOcclusionDepthBuffer()
		{
		}
	}
	[Token(Token = "0x200001A")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x15D3DC4", Offset = "0x15D3DC4")]
	public class DynamicOcclusionRaycasting : DynamicOcclusionAbstractBase
	{
		[Token(Token = "0x20001DF")]
		public class HitResult
		{
			[Token(Token = "0x4000C80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 point;

			[Token(Token = "0x4000C81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 normal;

			[Token(Token = "0x4000C82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float distance;

			[Token(Token = "0x4000C83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Collider2D collider2D;

			[Token(Token = "0x4000C84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private Collider collider3D;

			[Token(Token = "0x17000173")]
			public bool hasCollider
			{
				[Token(Token = "0x6000CAC")]
				[Address(RVA = "0x3668D14", Offset = "0x3668D14", VA = "0x3668D14")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000174")]
			public string name
			{
				[Token(Token = "0x6000CAD")]
				[Address(RVA = "0x36697FC", Offset = "0x36697FC", VA = "0x36697FC")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000175")]
			public Bounds bounds
			{
				[Token(Token = "0x6000CAE")]
				[Address(RVA = "0x36698D8", Offset = "0x36698D8", VA = "0x36698D8")]
				get
				{
					return default(Bounds);
				}
			}

			[Token(Token = "0x6000CA9")]
			[Address(RVA = "0x36686E4", Offset = "0x36686E4", VA = "0x36686E4")]
			public HitResult(RaycastHit hit3D)
			{
			}

			[Token(Token = "0x6000CAA")]
			[Address(RVA = "0x3668818", Offset = "0x3668818", VA = "0x3668818")]
			public HitResult(RaycastHit2D hit2D)
			{
			}

			[Token(Token = "0x6000CAB")]
			[Address(RVA = "0x366876C", Offset = "0x366876C", VA = "0x366876C")]
			public HitResult()
			{
			}
		}

		[Token(Token = "0x20001E0")]
		private enum Direction
		{
			[Token(Token = "0x4000C86")]
			Up = 0,
			[Token(Token = "0x4000C87")]
			Down = 1,
			[Token(Token = "0x4000C88")]
			Left = 2,
			[Token(Token = "0x4000C89")]
			Right = 3,
			[Token(Token = "0x4000C8A")]
			Max2D = 1,
			[Token(Token = "0x4000C8B")]
			Max3D = 3
		}

		[Token(Token = "0x4000115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Dimensions dimensions;

		[Token(Token = "0x4000116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public LayerMask layerMask;

		[Token(Token = "0x4000117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool considerTriggers;

		[Token(Token = "0x4000118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float minOccluderArea;

		[Token(Token = "0x4000119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float minSurfaceRatio;

		[Token(Token = "0x400011A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float maxSurfaceDot;

		[Token(Token = "0x400011B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public PlaneAlignment planeAlignment;

		[Token(Token = "0x400011C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float planeOffset;

		[Token(Token = "0x400011D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x15D5CD8", Offset = "0x15D5CD8")]
		public float fadeDistanceToSurface;

		[Token(Token = "0x400011E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D5D10", Offset = "0x15D5D10")]
		private HitResult <currentHit>k__BackingField;

		[Token(Token = "0x400011F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float m_RangeMultiplier;

		[Token(Token = "0x4000120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D5D20", Offset = "0x15D5D20")]
		private Plane <planeEquationWS>k__BackingField;

		[Token(Token = "0x4000121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private uint m_PrevNonSubHitDirectionId;

		[Token(Token = "0x17000042")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x15E6434", Offset = "0x15E6434")]
		public float fadeDistanceToPlane
		{
			[Token(Token = "0x600010A")]
			[Address(RVA = "0x36679D0", Offset = "0x36679D0", VA = "0x36679D0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600010B")]
			[Address(RVA = "0x36679D8", Offset = "0x36679D8", VA = "0x36679D8")]
			set
			{
			}
		}

		[Token(Token = "0x17000043")]
		public HitResult currentHit
		{
			[Token(Token = "0x600010D")]
			[Address(RVA = "0x3667B50", Offset = "0x3667B50", VA = "0x3667B50")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E2864", Offset = "0x15E2864")]
			get
			{
				return null;
			}
			[Token(Token = "0x600010E")]
			[Address(RVA = "0x3667B58", Offset = "0x3667B58", VA = "0x3667B58")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E2874", Offset = "0x15E2874")]
			private set
			{
			}
		}

		[Token(Token = "0x17000044")]
		public Plane planeEquationWS
		{
			[Token(Token = "0x6000111")]
			[Address(RVA = "0x3667BB0", Offset = "0x3667BB0", VA = "0x3667BB0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E2884", Offset = "0x15E2884")]
			get
			{
				return default(Plane);
			}
			[Token(Token = "0x6000112")]
			[Address(RVA = "0x3667BBC", Offset = "0x3667BBC", VA = "0x3667BBC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E2894", Offset = "0x15E2894")]
			private set
			{
			}
		}

		[Token(Token = "0x17000045")]
		private QueryTriggerInteraction queryTriggerInteraction
		{
			[Token(Token = "0x6000118")]
			[Address(RVA = "0x3667F90", Offset = "0x3667F90", VA = "0x3667F90")]
			get
			{
				return default(QueryTriggerInteraction);
			}
		}

		[Token(Token = "0x17000046")]
		private float raycastMaxDistance
		{
			[Token(Token = "0x6000119")]
			[Address(RVA = "0x3667FA4", Offset = "0x3667FA4", VA = "0x3667FA4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600010C")]
		[Address(RVA = "0x36679E0", Offset = "0x36679E0", VA = "0x36679E0")]
		public bool IsColliderHiddenByDynamicOccluder(Collider collider)
		{
			return default(bool);
		}

		[Token(Token = "0x600010F")]
		[Address(RVA = "0x3667B60", Offset = "0x3667B60", VA = "0x3667B60", Slot = "4")]
		protected override string GetShaderKeyword()
		{
			return null;
		}

		[Token(Token = "0x6000110")]
		[Address(RVA = "0x3667BA8", Offset = "0x3667BA8", VA = "0x3667BA8", Slot = "5")]
		protected override MaterialManager.DynamicOcclusion GetDynamicOcclusionMode()
		{
			return default(MaterialManager.DynamicOcclusion);
		}

		[Token(Token = "0x6000113")]
		[Address(RVA = "0x3667BC8", Offset = "0x3667BC8", VA = "0x3667BC8", Slot = "9")]
		protected override void OnValidateProperties()
		{
		}

		[Token(Token = "0x6000114")]
		[Address(RVA = "0x3667C68", Offset = "0x3667C68", VA = "0x3667C68", Slot = "8")]
		protected override void OnEnablePostValidate()
		{
		}

		[Token(Token = "0x6000115")]
		[Address(RVA = "0x3667C74", Offset = "0x3667C74", VA = "0x3667C74", Slot = "13")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6000116")]
		[Address(RVA = "0x3667DB4", Offset = "0x3667DB4", VA = "0x3667DB4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000117")]
		[Address(RVA = "0x3667E94", Offset = "0x3667E94", VA = "0x3667E94")]
		private Vector3 GetRandomVectorAround(Vector3 direction, float angleDiff)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600011A")]
		[Address(RVA = "0x3667FE0", Offset = "0x3667FE0", VA = "0x3667FE0")]
		private HitResult GetBestHit(Vector3 rayPos, Vector3 rayDir)
		{
			return null;
		}

		[Token(Token = "0x600011B")]
		[Address(RVA = "0x3667FF4", Offset = "0x3667FF4", VA = "0x3667FF4")]
		private HitResult GetBestHit3D(Vector3 rayPos, Vector3 rayDir)
		{
			return null;
		}

		[Token(Token = "0x600011C")]
		[Address(RVA = "0x36682CC", Offset = "0x36682CC", VA = "0x36682CC")]
		private HitResult GetBestHit2D(Vector3 rayPos, Vector3 rayDir)
		{
			return null;
		}

		[Token(Token = "0x600011D")]
		[Address(RVA = "0x3668918", Offset = "0x3668918", VA = "0x3668918")]
		private uint GetDirectionCount()
		{
			return default(uint);
		}

		[Token(Token = "0x600011E")]
		[Address(RVA = "0x3668930", Offset = "0x3668930", VA = "0x3668930")]
		private Vector3 GetDirection(uint dirInt)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600011F")]
		[Address(RVA = "0x3668C14", Offset = "0x3668C14", VA = "0x3668C14")]
		private bool IsHitValid(HitResult hit)
		{
			return default(bool);
		}

		[Token(Token = "0x6000120")]
		[Address(RVA = "0x3668EA8", Offset = "0x3668EA8", VA = "0x3668EA8", Slot = "6")]
		protected override bool OnProcessOcclusion(ProcessOcclusionSource source)
		{
			return default(bool);
		}

		[Token(Token = "0x6000121")]
		[Address(RVA = "0x3667C9C", Offset = "0x3667C9C", VA = "0x3667C9C")]
		private void SetHit(HitResult hit)
		{
		}

		[Token(Token = "0x6000122")]
		[Address(RVA = "0x3669400", Offset = "0x3669400", VA = "0x3669400", Slot = "7")]
		protected override void OnModifyMaterialCallback(MaterialModifier.Interface owner)
		{
		}

		[Token(Token = "0x6000123")]
		[Address(RVA = "0x366926C", Offset = "0x366926C", VA = "0x366926C")]
		private void SetClippingPlane(Plane planeWS)
		{
		}

		[Token(Token = "0x6000124")]
		[Address(RVA = "0x3669228", Offset = "0x3669228", VA = "0x3669228")]
		private void SetClippingPlaneOff()
		{
		}

		[Token(Token = "0x6000125")]
		[Address(RVA = "0x3669724", Offset = "0x3669724", VA = "0x3669724")]
		private void SetPlaneWS(Plane planeWS)
		{
		}

		[Token(Token = "0x6000126")]
		[Address(RVA = "0x3669730", Offset = "0x3669730", VA = "0x3669730")]
		public DynamicOcclusionRaycasting()
		{
		}
	}
	[Token(Token = "0x200001B")]
	public enum ColorMode
	{
		[Token(Token = "0x4000123")]
		Flat,
		[Token(Token = "0x4000124")]
		Gradient
	}
	[Token(Token = "0x200001C")]
	public enum AttenuationEquation
	{
		[Token(Token = "0x4000126")]
		Linear,
		[Token(Token = "0x4000127")]
		Quadratic,
		[Token(Token = "0x4000128")]
		Blend
	}
	[Token(Token = "0x200001D")]
	public enum BlendingMode
	{
		[Token(Token = "0x400012A")]
		Additive,
		[Token(Token = "0x400012B")]
		SoftAdditive,
		[Token(Token = "0x400012C")]
		TraditionalTransparency
	}
	[Token(Token = "0x200001E")]
	public enum NoiseMode
	{
		[Token(Token = "0x400012E")]
		Disabled,
		[Token(Token = "0x400012F")]
		WorldSpace,
		[Token(Token = "0x4000130")]
		LocalSpace
	}
	[Token(Token = "0x200001F")]
	public enum MeshType
	{
		[Token(Token = "0x4000132")]
		Shared,
		[Token(Token = "0x4000133")]
		Custom
	}
	[Token(Token = "0x2000020")]
	public enum RenderPipeline
	{
		[Token(Token = "0x4000135")]
		BuiltIn,
		[Token(Token = "0x4000136")]
		URP,
		[Token(Token = "0x4000137")]
		HDRP
	}
	[Token(Token = "0x2000021")]
	public enum RenderingMode
	{
		[Token(Token = "0x4000139")]
		MultiPass,
		[Token(Token = "0x400013A")]
		SinglePass,
		[Token(Token = "0x400013B")]
		GPUInstancing,
		[Token(Token = "0x400013C")]
		SRPBatcher
	}
	[Token(Token = "0x2000022")]
	public enum RenderQueue
	{
		[Token(Token = "0x400013E")]
		Custom = 0,
		[Token(Token = "0x400013F")]
		Background = 1000,
		[Token(Token = "0x4000140")]
		Geometry = 2000,
		[Token(Token = "0x4000141")]
		AlphaTest = 2450,
		[Token(Token = "0x4000142")]
		GeometryLast = 2500,
		[Token(Token = "0x4000143")]
		Transparent = 3000,
		[Token(Token = "0x4000144")]
		Overlay = 4000
	}
	[Token(Token = "0x2000023")]
	public enum Dimensions
	{
		[Token(Token = "0x4000146")]
		Dim3D,
		[Token(Token = "0x4000147")]
		Dim2D
	}
	[Token(Token = "0x2000024")]
	public enum PlaneAlignment
	{
		[Token(Token = "0x4000149")]
		Surface,
		[Token(Token = "0x400014A")]
		Beam
	}
	[Token(Token = "0x2000025")]
	[Flags]
	public enum DynamicOcclusionUpdateRate
	{
		[Token(Token = "0x400014C")]
		Never = 1,
		[Token(Token = "0x400014D")]
		OnEnable = 2,
		[Token(Token = "0x400014E")]
		OnBeamMove = 4,
		[Token(Token = "0x400014F")]
		EveryXFrames = 8,
		[Token(Token = "0x4000150")]
		OnBeamMoveAndEveryXFrames = 0xC
	}
	[Token(Token = "0x2000026")]
	public static class GlobalMesh
	{
		[Token(Token = "0x4000151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Mesh ms_Mesh;

		[Token(Token = "0x4000152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static bool ms_DoubleSided;

		[Token(Token = "0x6000127")]
		[Address(RVA = "0x3662D50", Offset = "0x3662D50", VA = "0x3662D50")]
		public static Mesh Get()
		{
			return null;
		}

		[Token(Token = "0x6000128")]
		[Address(RVA = "0x36699D0", Offset = "0x36699D0", VA = "0x36699D0")]
		public static void Destroy()
		{
		}
	}
	[Token(Token = "0x2000027")]
	public sealed class HighlightNullAttribute : PropertyAttribute
	{
		[Token(Token = "0x600012A")]
		[Address(RVA = "0x3669AE8", Offset = "0x3669AE8", VA = "0x3669AE8")]
		public HighlightNullAttribute()
		{
		}
	}
	[Token(Token = "0x2000028")]
	public static class MaterialManager
	{
		[Token(Token = "0x20001E1")]
		public enum BlendingMode
		{
			[Token(Token = "0x4000C8D")]
			Additive,
			[Token(Token = "0x4000C8E")]
			SoftAdditive,
			[Token(Token = "0x4000C8F")]
			TraditionalTransparency,
			[Token(Token = "0x4000C90")]
			Count
		}

		[Token(Token = "0x20001E2")]
		public enum Noise3D
		{
			[Token(Token = "0x4000C92")]
			Off,
			[Token(Token = "0x4000C93")]
			On,
			[Token(Token = "0x4000C94")]
			Count
		}

		[Token(Token = "0x20001E3")]
		public enum DepthBlend
		{
			[Token(Token = "0x4000C96")]
			Off,
			[Token(Token = "0x4000C97")]
			On,
			[Token(Token = "0x4000C98")]
			Count
		}

		[Token(Token = "0x20001E4")]
		public enum ColorGradient
		{
			[Token(Token = "0x4000C9A")]
			Off,
			[Token(Token = "0x4000C9B")]
			MatrixLow,
			[Token(Token = "0x4000C9C")]
			MatrixHigh,
			[Token(Token = "0x4000C9D")]
			Count
		}

		[Token(Token = "0x20001E5")]
		public enum DynamicOcclusion
		{
			[Token(Token = "0x4000C9F")]
			Off,
			[Token(Token = "0x4000CA0")]
			ClippingPlane,
			[Token(Token = "0x4000CA1")]
			DepthTexture,
			[Token(Token = "0x4000CA2")]
			Count
		}

		[Token(Token = "0x20001E6")]
		public class StaticProperties
		{
			[Token(Token = "0x4000CA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public BlendingMode blendingMode;

			[Token(Token = "0x4000CA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Noise3D noise3D;

			[Token(Token = "0x4000CA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public DepthBlend depthBlend;

			[Token(Token = "0x4000CA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public ColorGradient colorGradient;

			[Token(Token = "0x4000CA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DynamicOcclusion dynamicOcclusion;

			[Token(Token = "0x17000176")]
			public int materialID
			{
				[Token(Token = "0x6000CAF")]
				[Address(RVA = "0x3669C70", Offset = "0x3669C70", VA = "0x3669C70")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x6000CB0")]
			[Address(RVA = "0x3663BA8", Offset = "0x3663BA8", VA = "0x3663BA8")]
			public void ApplyToMaterial(Material mat)
			{
			}

			[Token(Token = "0x6000CB1")]
			[Address(RVA = "0x3663B88", Offset = "0x3663B88", VA = "0x3663B88")]
			public StaticProperties()
			{
			}
		}

		[Token(Token = "0x20001E7")]
		private class MaterialsGroup
		{
			[Token(Token = "0x4000CA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Material[] materials;

			[Token(Token = "0x6000CB2")]
			[Address(RVA = "0x3669BDC", Offset = "0x3669BDC", VA = "0x3669BDC")]
			public MaterialsGroup()
			{
			}
		}

		[Token(Token = "0x4000153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static MaterialPropertyBlock materialPropertyBlock;

		[Token(Token = "0x4000154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly BlendMode[] BlendingMode_SrcFactor;

		[Token(Token = "0x4000155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly BlendMode[] BlendingMode_DstFactor;

		[Token(Token = "0x4000156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly bool[] BlendingMode_AlphaAsBlack;

		[Token(Token = "0x4000157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static int kStaticPropertiesCount;

		[Token(Token = "0x4000158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static Hashtable ms_MaterialsGroup;

		[Token(Token = "0x600012B")]
		[Address(RVA = "0x3661C10", Offset = "0x3661C10", VA = "0x3661C10")]
		public static Material NewMaterialTransient(bool gpuInstanced)
		{
			return null;
		}

		[Token(Token = "0x600012C")]
		[Address(RVA = "0x3669AF0", Offset = "0x3669AF0", VA = "0x3669AF0")]
		public static Material NewMaterialPersistent(Shader shader, bool gpuInstanced)
		{
			return null;
		}

		[Token(Token = "0x600012D")]
		[Address(RVA = "0x3663DE8", Offset = "0x3663DE8", VA = "0x3663DE8")]
		public static Material GetInstancedMaterial(uint groupID, StaticProperties staticProps)
		{
			return null;
		}
	}
	[Token(Token = "0x2000029")]
	public static class MeshGenerator
	{
		[Token(Token = "0x4000159")]
		private const float kMinTruncatedRadius = 0.001f;

		[Token(Token = "0x600012F")]
		[Address(RVA = "0x3669E24", Offset = "0x3669E24", VA = "0x3669E24")]
		private static float GetAngleOffset(int numSides)
		{
			return default(float);
		}

		[Token(Token = "0x6000130")]
		[Address(RVA = "0x3669E3C", Offset = "0x3669E3C", VA = "0x3669E3C")]
		public static Mesh GenerateConeZ_RadiusAndAngle(float lengthZ, float radiusStart, float coneAngle, int numSides, int numSegments, bool cap, bool doubleSided)
		{
			return null;
		}

		[Token(Token = "0x6000131")]
		[Address(RVA = "0x3669F08", Offset = "0x3669F08", VA = "0x3669F08")]
		public static Mesh GenerateConeZ_Angle(float lengthZ, float coneAngle, int numSides, int numSegments, bool cap, bool doubleSided)
		{
			return null;
		}

		[Token(Token = "0x6000132")]
		[Address(RVA = "0x3662374", Offset = "0x3662374", VA = "0x3662374")]
		public static Mesh GenerateConeZ_Radius(float lengthZ, float radiusStart, float radiusEnd, int numSides, int numSegments, bool cap, bool doubleSided)
		{
			return null;
		}

		[Token(Token = "0x6000133")]
		[Address(RVA = "0x3669F1C", Offset = "0x3669F1C", VA = "0x3669F1C")]
		public static int GetVertexCount(int numSides, int numSegments, bool geomCap, bool doubleSided)
		{
			return default(int);
		}

		[Token(Token = "0x6000134")]
		[Address(RVA = "0x3669F38", Offset = "0x3669F38", VA = "0x3669F38")]
		public static int GetIndicesCount(int numSides, int numSegments, bool geomCap, bool doubleSided)
		{
			return default(int);
		}

		[Token(Token = "0x6000135")]
		[Address(RVA = "0x3669F60", Offset = "0x3669F60", VA = "0x3669F60")]
		public static int GetSharedMeshVertexCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000136")]
		[Address(RVA = "0x3669FFC", Offset = "0x3669FFC", VA = "0x3669FFC")]
		public static int GetSharedMeshIndicesCount()
		{
			return default(int);
		}
	}
	[Token(Token = "0x200002A")]
	public static class Noise3D
	{
		[Token(Token = "0x400015A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool ms_IsSupportedChecked;

		[Token(Token = "0x400015B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		private static bool ms_IsSupported;

		[Token(Token = "0x400015C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Texture3D ms_NoiseTexture;

		[Token(Token = "0x400015D")]
		private const HideFlags kHideFlags = HideFlags.HideAndDontSave;

		[Token(Token = "0x400015E")]
		private const int kMinShaderLevel = 35;

		[Token(Token = "0x17000047")]
		public static bool isSupported
		{
			[Token(Token = "0x6000137")]
			[Address(RVA = "0x3663920", Offset = "0x3663920", VA = "0x3663920")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000048")]
		public static bool isProperlyLoaded
		{
			[Token(Token = "0x6000138")]
			[Address(RVA = "0x366A13C", Offset = "0x366A13C", VA = "0x366A13C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000049")]
		public static string isNotSupportedString
		{
			[Token(Token = "0x6000139")]
			[Address(RVA = "0x366A09C", Offset = "0x366A09C", VA = "0x366A09C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600013A")]
		[Address(RVA = "0x366A1D4", Offset = "0x366A1D4", VA = "0x366A1D4")]
		[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0x15E28A4", Offset = "0x15E28A4")]
		private static void OnStartUp()
		{
		}

		[Token(Token = "0x600013B")]
		[Address(RVA = "0x3664870", Offset = "0x3664870", VA = "0x3664870")]
		public static void LoadIfNeeded()
		{
		}

		[Token(Token = "0x600013C")]
		[Address(RVA = "0x366A230", Offset = "0x366A230", VA = "0x366A230")]
		private static Texture3D LoadTexture3D(TextAsset textData, int size)
		{
			return null;
		}
	}
	[Token(Token = "0x200002B")]
	public class PolygonHelper : MonoBehaviour
	{
		[Token(Token = "0x20001E8")]
		public struct Plane2D
		{
			[Token(Token = "0x4000CA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector2 normal;

			[Token(Token = "0x4000CAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float distance;

			[Token(Token = "0x6000CB3")]
			[Address(RVA = "0x366A58C", Offset = "0x366A58C", VA = "0x366A58C")]
			public float Distance(Vector2 point)
			{
				return default(float);
			}

			[Token(Token = "0x6000CB4")]
			[Address(RVA = "0x366A628", Offset = "0x366A628", VA = "0x366A628")]
			public Vector2 ClosestPoint(Vector2 pt)
			{
				return default(Vector2);
			}

			[Token(Token = "0x6000CB5")]
			[Address(RVA = "0x366A6E8", Offset = "0x366A6E8", VA = "0x366A6E8")]
			public Vector2 Intersect(Vector2 p1, Vector2 p2)
			{
				return default(Vector2);
			}

			[Token(Token = "0x6000CB6")]
			[Address(RVA = "0x366A91C", Offset = "0x366A91C", VA = "0x366A91C")]
			public bool GetSide(Vector2 point)
			{
				return default(bool);
			}

			[Token(Token = "0x6000CB7")]
			[Address(RVA = "0x366A938", Offset = "0x366A938", VA = "0x366A938")]
			public static Plane2D FromPoints(Vector3 p1, Vector3 p2)
			{
				return default(Plane2D);
			}

			[Token(Token = "0x6000CB8")]
			[Address(RVA = "0x366AA38", Offset = "0x366AA38", VA = "0x366AA38")]
			public static Plane2D FromNormalAndPoint(Vector3 normalizedNormal, Vector3 p1)
			{
				return default(Plane2D);
			}

			[Token(Token = "0x6000CB9")]
			[Address(RVA = "0x366AAE0", Offset = "0x366AAE0", VA = "0x366AAE0")]
			public void Flip()
			{
			}

			[Token(Token = "0x6000CBA")]
			[Address(RVA = "0x366AB6C", Offset = "0x366AB6C", VA = "0x366AB6C")]
			public Vector2[] CutConvex(Vector2[] poly)
			{
				return null;
			}

			[Token(Token = "0x6000CBB")]
			[Address(RVA = "0x366AD54", Offset = "0x366AD54", VA = "0x366AD54", Slot = "3")]
			public override string ToString()
			{
				return null;
			}
		}

		[Token(Token = "0x600013E")]
		[Address(RVA = "0x366A584", Offset = "0x366A584", VA = "0x366A584")]
		public PolygonHelper()
		{
		}
	}
	[Token(Token = "0x200002C")]
	public static class ShaderProperties
	{
		[Token(Token = "0x400015F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly int FadeOutFactor;

		[Token(Token = "0x4000160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static readonly int ClippingPlaneWS;

		[Token(Token = "0x4000161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly int ClippingPlaneProps;

		[Token(Token = "0x4000162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static readonly int ConeSlopeCosSin;

		[Token(Token = "0x4000163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly int ConeRadius;

		[Token(Token = "0x4000164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public static readonly int ConeApexOffsetZ;

		[Token(Token = "0x4000165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly int ColorFlat;

		[Token(Token = "0x4000166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public static readonly int AlphaInside;

		[Token(Token = "0x4000167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly int AlphaOutside;

		[Token(Token = "0x4000168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public static readonly int AttenuationLerpLinearQuad;

		[Token(Token = "0x4000169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly int DistanceFadeStart;

		[Token(Token = "0x400016A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public static readonly int DistanceFadeEnd;

		[Token(Token = "0x400016B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly int DistanceCamClipping;

		[Token(Token = "0x400016C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public static readonly int FresnelPow;

		[Token(Token = "0x400016D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static readonly int GlareBehind;

		[Token(Token = "0x400016E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public static readonly int GlareFrontal;

		[Token(Token = "0x400016F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static readonly int DrawCap;

		[Token(Token = "0x4000170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public static readonly int DepthBlendDistance;

		[Token(Token = "0x4000171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static readonly int NoiseLocal;

		[Token(Token = "0x4000172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public static readonly int NoiseParam;

		[Token(Token = "0x4000173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static readonly int CameraParams;

		[Token(Token = "0x4000174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public static readonly int CameraBufferSizeSRP;

		[Token(Token = "0x4000175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static readonly int ColorGradientMatrix;

		[Token(Token = "0x4000176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public static readonly int LocalToWorldMatrix;

		[Token(Token = "0x4000177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static readonly int WorldToLocalMatrix;

		[Token(Token = "0x4000178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public static readonly int BlendSrcFactor;

		[Token(Token = "0x4000179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static readonly int BlendDstFactor;

		[Token(Token = "0x400017A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public static readonly int DynamicOcclusionDepthTexture;

		[Token(Token = "0x400017B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static readonly int DynamicOcclusionDepthProps;

		[Token(Token = "0x400017C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public static readonly int GlobalNoiseTex3D;

		[Token(Token = "0x400017D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static readonly int GlobalNoiseParam;

		[Token(Token = "0x400017E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public static readonly int GlobalDitheringFactor;

		[Token(Token = "0x400017F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static readonly int GlobalDitheringNoiseTex;

		[Token(Token = "0x4000180")]
		public const string KeywordSRP = "VLB_SRP_API";
	}
	[Token(Token = "0x200002D")]
	public static class TransformUtils
	{
		[Token(Token = "0x20001E9")]
		public class Packed
		{
			[Token(Token = "0x4000CAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 position;

			[Token(Token = "0x4000CAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Quaternion rotation;

			[Token(Token = "0x4000CAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Vector3 lossyScale;

			[Token(Token = "0x6000CBC")]
			[Address(RVA = "0x366B278", Offset = "0x366B278", VA = "0x366B278")]
			public Packed()
			{
			}
		}

		[Token(Token = "0x6000140")]
		[Address(RVA = "0x3666204", Offset = "0x3666204", VA = "0x3666204")]
		public static Packed GetWorldPacked(this Transform self)
		{
			return null;
		}

		[Token(Token = "0x6000141")]
		[Address(RVA = "0x36669C4", Offset = "0x36669C4", VA = "0x36669C4")]
		public static bool IsSame(this Transform self, Packed packed)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200002E")]
	[DisallowMultipleComponent]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x15D3E30", Offset = "0x15D3E30")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x15D3E30", Offset = "0x15D3E30")]
	public class TriggerZone : MonoBehaviour
	{
		[Token(Token = "0x20001EA")]
		private enum TriggerZoneUpdateRate
		{
			[Token(Token = "0x4000CAF")]
			OnEnable,
			[Token(Token = "0x4000CB0")]
			OnOcclusionChange
		}

		[Token(Token = "0x4000181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool setIsTrigger;

		[Token(Token = "0x4000182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float rangeMultiplier;

		[Token(Token = "0x4000183")]
		private const int kMeshColliderNumSides = 8;

		[Token(Token = "0x4000184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private VolumetricLightBeam m_Beam;

		[Token(Token = "0x4000185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private DynamicOcclusionRaycasting m_DynamicOcclusionRaycasting;

		[Token(Token = "0x4000186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private PolygonCollider2D m_PolygonCollider2D;

		[Token(Token = "0x1700004A")]
		private TriggerZoneUpdateRate updateRate
		{
			[Token(Token = "0x6000142")]
			[Address(RVA = "0x366B280", Offset = "0x366B280", VA = "0x366B280")]
			get
			{
				return default(TriggerZoneUpdateRate);
			}
		}

		[Token(Token = "0x6000143")]
		[Address(RVA = "0x366B314", Offset = "0x366B314", VA = "0x366B314")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000144")]
		[Address(RVA = "0x366BAD4", Offset = "0x366BAD4", VA = "0x366BAD4")]
		private void OnOcclusionProcessed()
		{
		}

		[Token(Token = "0x6000145")]
		[Address(RVA = "0x366B464", Offset = "0x366B464", VA = "0x366B464")]
		private void ComputeZone()
		{
		}

		[Token(Token = "0x6000146")]
		[Address(RVA = "0x366BBDC", Offset = "0x366BBDC", VA = "0x366BBDC")]
		public TriggerZone()
		{
		}
	}
	[Token(Token = "0x200002F")]
	public static class Utils
	{
		[Token(Token = "0x20001EB")]
		public enum FloatPackingPrecision
		{
			[Token(Token = "0x4000CB2")]
			High = 64,
			[Token(Token = "0x4000CB3")]
			Low = 8,
			[Token(Token = "0x4000CB4")]
			Undef = 0
		}

		[Token(Token = "0x4000187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static FloatPackingPrecision ms_FloatPackingPrecision;

		[Token(Token = "0x4000188")]
		private const int kFloatPackingHighMinShaderLevel = 35;

		[Token(Token = "0x6000147")]
		[Address(RVA = "0x366BBF4", Offset = "0x366BBF4", VA = "0x366BBF4")]
		public static float ComputeConeRadiusEnd(float fallOffEnd, float spotAngle)
		{
			return default(float);
		}

		[Token(Token = "0x6000148")]
		public static void Swap<T>(ref T a, ref T b)
		{
		}

		[Token(Token = "0x6000149")]
		[Address(RVA = "0x3661F30", Offset = "0x3661F30", VA = "0x3661F30")]
		public static string GetPath(Transform current)
		{
			return null;
		}

		[Token(Token = "0x600014A")]
		public static T NewWithComponent<T>(string name) where T : Component
		{
			return null;
		}

		[Token(Token = "0x600014B")]
		public static T GetOrAddComponent<T>(this GameObject self) where T : Component
		{
			return null;
		}

		[Token(Token = "0x600014C")]
		public static T GetOrAddComponent<T>(this MonoBehaviour self) where T : Component
		{
			return null;
		}

		[Token(Token = "0x600014D")]
		[Address(RVA = "0x366BC7C", Offset = "0x366BC7C", VA = "0x366BC7C")]
		public static bool HasFlag(this Enum mask, Enum flags)
		{
			return default(bool);
		}

		[Token(Token = "0x600014E")]
		[Address(RVA = "0x366BD60", Offset = "0x366BD60", VA = "0x366BD60")]
		public static Vector2 xy(this Vector3 aVector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600014F")]
		[Address(RVA = "0x366BD8C", Offset = "0x366BD8C", VA = "0x366BD8C")]
		public static Vector2 xz(this Vector3 aVector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000150")]
		[Address(RVA = "0x366BDBC", Offset = "0x366BDBC", VA = "0x366BDBC")]
		public static Vector2 yz(this Vector3 aVector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000151")]
		[Address(RVA = "0x366BDF0", Offset = "0x366BDF0", VA = "0x366BDF0")]
		public static Vector2 yx(this Vector3 aVector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000152")]
		[Address(RVA = "0x366BE28", Offset = "0x366BE28", VA = "0x366BE28")]
		public static Vector2 zx(this Vector3 aVector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000153")]
		[Address(RVA = "0x366BE5C", Offset = "0x366BE5C", VA = "0x366BE5C")]
		public static Vector2 zy(this Vector3 aVector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000154")]
		[Address(RVA = "0x366BE8C", Offset = "0x366BE8C", VA = "0x366BE8C")]
		public static float GetVolumeCubic(this Bounds self)
		{
			return default(float);
		}

		[Token(Token = "0x6000155")]
		[Address(RVA = "0x36685F8", Offset = "0x36685F8", VA = "0x36685F8")]
		public static float GetMaxArea2D(this Bounds self)
		{
			return default(float);
		}

		[Token(Token = "0x6000156")]
		[Address(RVA = "0x366BEE0", Offset = "0x366BEE0", VA = "0x366BEE0")]
		public static Color Opaque(this Color self)
		{
			return default(Color);
		}

		[Token(Token = "0x6000157")]
		[Address(RVA = "0x366BF14", Offset = "0x366BF14", VA = "0x366BF14")]
		public static void GizmosDrawPlane(Vector3 normal, Vector3 position, Color color, float size = 1f)
		{
		}

		[Token(Token = "0x6000158")]
		[Address(RVA = "0x3669604", Offset = "0x3669604", VA = "0x3669604")]
		public static Plane TranslateCustom(this Plane plane, Vector3 translation)
		{
			return default(Plane);
		}

		[Token(Token = "0x6000159")]
		[Address(RVA = "0x366BAD8", Offset = "0x366BAD8", VA = "0x366BAD8")]
		public static Vector3 ClosestPointOnPlaneCustom(this Plane plane, Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600015A")]
		[Address(RVA = "0x366A8A0", Offset = "0x366A8A0", VA = "0x366A8A0")]
		public static bool IsAlmostZero(float f)
		{
			return default(bool);
		}

		[Token(Token = "0x600015B")]
		[Address(RVA = "0x3667B04", Offset = "0x3667B04", VA = "0x3667B04")]
		public static bool IsValid(this Plane plane)
		{
			return default(bool);
		}

		[Token(Token = "0x600015C")]
		[Address(RVA = "0x36645DC", Offset = "0x36645DC", VA = "0x36645DC")]
		public static void SetKeywordEnabled(this Material mat, string name, bool enabled)
		{
		}

		[Token(Token = "0x600015D")]
		[Address(RVA = "0x366C328", Offset = "0x366C328", VA = "0x366C328")]
		public static void SetShaderKeywordEnabled(string name, bool enabled)
		{
		}

		[Token(Token = "0x600015E")]
		[Address(RVA = "0x36646F8", Offset = "0x36646F8", VA = "0x36646F8")]
		public static Matrix4x4 SampleInMatrix(this Gradient self, int floatPackingPrecision)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x600015F")]
		[Address(RVA = "0x366C438", Offset = "0x366C438", VA = "0x366C438")]
		public static Color[] SampleInArray(this Gradient self, int samplesCount)
		{
			return null;
		}

		[Token(Token = "0x6000160")]
		[Address(RVA = "0x366C540", Offset = "0x366C540", VA = "0x366C540")]
		private static Vector4 Vector4_Floor(Vector4 vec)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6000161")]
		[Address(RVA = "0x366C33C", Offset = "0x366C33C", VA = "0x366C33C")]
		public static float PackToFloat(this Color color, int floatPackingPrecision)
		{
			return default(float);
		}

		[Token(Token = "0x6000162")]
		[Address(RVA = "0x3663AB8", Offset = "0x3663AB8", VA = "0x3663AB8")]
		public static FloatPackingPrecision GetFloatPackingPrecision()
		{
			return default(FloatPackingPrecision);
		}

		[Token(Token = "0x6000163")]
		[Address(RVA = "0x366C5EC", Offset = "0x366C5EC", VA = "0x366C5EC")]
		public static void MarkCurrentSceneDirty()
		{
		}

		[Token(Token = "0x6000164")]
		[Address(RVA = "0x366C5F0", Offset = "0x366C5F0", VA = "0x366C5F0")]
		public static void MarkObjectDirty(UnityEngine.Object obj)
		{
		}
	}
	[Token(Token = "0x2000030")]
	public static class Version
	{
		[Token(Token = "0x4000189")]
		public const int Current = 1860;
	}
	[Token(Token = "0x2000031")]
	[ExecuteInEditMode]
	[DisallowMultipleComponent]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x15D3ED8", Offset = "0x15D3ED8")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x15D3ED8", Offset = "0x15D3ED8")]
	public class VolumetricDustParticles : MonoBehaviour
	{
		[Token(Token = "0x20001EC")]
		public enum Direction
		{
			[Token(Token = "0x4000CB6")]
			Beam,
			[Token(Token = "0x4000CB7")]
			Random
		}

		[Token(Token = "0x400018A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D5D30", Offset = "0x15D5D30")]
		public float alpha;

		[Token(Token = "0x400018B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D5D48", Offset = "0x15D5D48")]
		public float size;

		[Token(Token = "0x400018C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Direction direction;

		[Token(Token = "0x400018D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float speed;

		[Token(Token = "0x400018E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float density;

		[Token(Token = "0x400018F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D5D68", Offset = "0x15D5D68")]
		public float spawnMinDistance;

		[Token(Token = "0x4000190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D5D80", Offset = "0x15D5D80")]
		public float spawnMaxDistance;

		[Token(Token = "0x4000191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool cullingEnabled;

		[Token(Token = "0x4000192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float cullingMaxDistance;

		[Token(Token = "0x4000193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D5D98", Offset = "0x15D5D98")]
		private bool <isCulled>k__BackingField;

		[Token(Token = "0x4000194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool isFeatureSupported;

		[Token(Token = "0x4000195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ParticleSystem m_Particles;

		[Token(Token = "0x4000196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private ParticleSystemRenderer m_Renderer;

		[Token(Token = "0x4000197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		private static bool ms_NoMainCameraLogged;

		[Token(Token = "0x4000198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Camera ms_MainCamera;

		[Token(Token = "0x4000199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private VolumetricLightBeam m_Master;

		[Token(Token = "0x1700004B")]
		public bool isCulled
		{
			[Token(Token = "0x6000166")]
			[Address(RVA = "0x366C5F8", Offset = "0x366C5F8", VA = "0x366C5F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E2A04", Offset = "0x15E2A04")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000167")]
			[Address(RVA = "0x366C600", Offset = "0x366C600", VA = "0x366C600")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E2A14", Offset = "0x15E2A14")]
			private set
			{
			}
		}

		[Token(Token = "0x1700004C")]
		public bool particlesAreInstantiated
		{
			[Token(Token = "0x6000168")]
			[Address(RVA = "0x366C60C", Offset = "0x366C60C", VA = "0x366C60C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700004D")]
		public int particlesCurrentCount
		{
			[Token(Token = "0x6000169")]
			[Address(RVA = "0x366C678", Offset = "0x366C678", VA = "0x366C678")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700004E")]
		public int particlesMaxCount
		{
			[Token(Token = "0x600016A")]
			[Address(RVA = "0x366C70C", Offset = "0x366C70C", VA = "0x366C70C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700004F")]
		public Camera mainCamera
		{
			[Token(Token = "0x600016B")]
			[Address(RVA = "0x366C7B8", Offset = "0x366C7B8", VA = "0x366C7B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600016C")]
		[Address(RVA = "0x366CA1C", Offset = "0x366CA1C", VA = "0x366CA1C")]
		private void Start()
		{
		}

		[Token(Token = "0x600016D")]
		[Address(RVA = "0x366CA90", Offset = "0x366CA90", VA = "0x366CA90")]
		private void InstantiateParticleSystem()
		{
		}

		[Token(Token = "0x600016E")]
		[Address(RVA = "0x366CD5C", Offset = "0x366CD5C", VA = "0x366CD5C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600016F")]
		[Address(RVA = "0x366CCA0", Offset = "0x366CCA0", VA = "0x366CCA0")]
		private void SetActiveAndPlay()
		{
		}

		[Token(Token = "0x6000170")]
		[Address(RVA = "0x366D434", Offset = "0x366D434", VA = "0x366D434")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000171")]
		[Address(RVA = "0x366D4D4", Offset = "0x366D4D4", VA = "0x366D4D4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000172")]
		[Address(RVA = "0x366D59C", Offset = "0x366D59C", VA = "0x366D59C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000173")]
		[Address(RVA = "0x366CD60", Offset = "0x366CD60", VA = "0x366CD60")]
		private void SetParticleProperties()
		{
		}

		[Token(Token = "0x6000174")]
		[Address(RVA = "0x366D5D0", Offset = "0x366D5D0", VA = "0x366D5D0")]
		private void UpdateCulling()
		{
		}

		[Token(Token = "0x6000175")]
		[Address(RVA = "0x366D9A8", Offset = "0x366D9A8", VA = "0x366D9A8")]
		public VolumetricDustParticles()
		{
		}
	}
	[Token(Token = "0x2000032")]
	[ExecuteInEditMode]
	[DisallowMultipleComponent]
	[SelectionBase]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x15D3F80", Offset = "0x15D3F80")]
	public class VolumetricLightBeam : MonoBehaviour
	{
		[Token(Token = "0x20001ED")]
		public delegate void OnWillCameraRenderCB(Camera cam);

		[Token(Token = "0x20001EE")]
		public delegate void OnBeamGeometryInitialized();

		[Token(Token = "0x20001EF")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D5644", Offset = "0x15D5644")]
		private sealed class <CoPlaytimeUpdate>d__162 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000CB8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000CB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000CBA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VolumetricLightBeam <>4__this;

			[Token(Token = "0x17000177")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000CC8")]
				[Address(RVA = "0x366F6D4", Offset = "0x366F6D4", VA = "0x366F6D4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000178")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000CCA")]
				[Address(RVA = "0x366F73C", Offset = "0x366F73C", VA = "0x366F73C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000CC5")]
			[Address(RVA = "0x366F140", Offset = "0x366F140", VA = "0x366F140")]
			[DebuggerHidden]
			public <CoPlaytimeUpdate>d__162(int <>1__state)
			{
			}

			[Token(Token = "0x6000CC6")]
			[Address(RVA = "0x366F63C", Offset = "0x366F63C", VA = "0x366F63C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000CC7")]
			[Address(RVA = "0x366F640", Offset = "0x366F640", VA = "0x366F640", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000CC9")]
			[Address(RVA = "0x366F6DC", Offset = "0x366F6DC", VA = "0x366F6DC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400019A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool colorFromLight;

		[Token(Token = "0x400019B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public ColorMode colorMode;

		[Token(Token = "0x400019C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x15D5DA8", Offset = "0x15D5DA8")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x15D5DA8", Offset = "0x15D5DA8")]
		public Color color;

		[Token(Token = "0x400019D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Gradient colorGradient;

		[Token(Token = "0x400019E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool intensityFromLight;

		[Token(Token = "0x400019F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool intensityModeAdvanced;

		[Token(Token = "0x40001A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x15D5DFC", Offset = "0x15D5DFC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D5DFC", Offset = "0x15D5DFC")]
		public float intensityInside;

		[Token(Token = "0x40001A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x15D5E50", Offset = "0x15D5E50")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x15D5E50", Offset = "0x15D5E50")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D5E50", Offset = "0x15D5E50")]
		public float intensityOutside;

		[Token(Token = "0x40001A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public BlendingMode blendingMode;

		[Token(Token = "0x40001A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x15D5EC8", Offset = "0x15D5EC8")]
		public bool spotAngleFromLight;

		[Token(Token = "0x40001A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D5F00", Offset = "0x15D5F00")]
		public float spotAngle;

		[Token(Token = "0x40001A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x15D5F20", Offset = "0x15D5F20")]
		public float coneRadiusStart;

		[Token(Token = "0x40001A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public MeshType geomMeshType;

		[Token(Token = "0x40001A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x15D5F58", Offset = "0x15D5F58")]
		public int geomCustomSides;

		[Token(Token = "0x40001A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public int geomCustomSegments;

		[Token(Token = "0x40001A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool geomCap;

		[Token(Token = "0x40001AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x15D5F90", Offset = "0x15D5F90")]
		public bool fallOffEndFromLight;

		[Token(Token = "0x40001AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public AttenuationEquation attenuationEquation;

		[Token(Token = "0x40001AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D5FC8", Offset = "0x15D5FC8")]
		public float attenuationCustomBlending;

		[Token(Token = "0x40001AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x15D5FE0", Offset = "0x15D5FE0")]
		public float fallOffStart;

		[Token(Token = "0x40001AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x15D6018", Offset = "0x15D6018")]
		public float fallOffEnd;

		[Token(Token = "0x40001AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float depthBlendDistance;

		[Token(Token = "0x40001B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float cameraClippingDistance;

		[Token(Token = "0x40001B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D6050", Offset = "0x15D6050")]
		public float glareFrontal;

		[Token(Token = "0x40001B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D6068", Offset = "0x15D6068")]
		public float glareBehind;

		[Token(Token = "0x40001B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x15D6080", Offset = "0x15D6080")]
		public float fresnelPow;

		[Token(Token = "0x40001B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public NoiseMode noiseMode;

		[Token(Token = "0x40001B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x15D60B8", Offset = "0x15D60B8")]
		[SerializeField]
		private bool _DEPRECATED_NoiseEnabled;

		[Token(Token = "0x40001B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D6104", Offset = "0x15D6104")]
		public float noiseIntensity;

		[Token(Token = "0x40001B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public bool noiseScaleUseGlobal;

		[Token(Token = "0x40001B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D611C", Offset = "0x15D611C")]
		public float noiseScaleLocal;

		[Token(Token = "0x40001B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public bool noiseVelocityUseGlobal;

		[Token(Token = "0x40001BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Vector3 noiseVelocityLocal;

		[Token(Token = "0x40001BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public Dimensions dimensions;

		[Token(Token = "0x40001BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D6138", Offset = "0x15D6138")]
		private MaterialManager.DynamicOcclusion <_INTERNAL_DynamicOcclusionMode>k__BackingField;

		[Token(Token = "0x40001BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private bool m_IsDynamicOcclusionEnabled;

		[Token(Token = "0x40001BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private OnBeamGeometryInitialized m_OnBeamGeometryInitialized;

		[Token(Token = "0x40001C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private int pluginVersion;

		[Token(Token = "0x40001C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x15D6168", Offset = "0x15D6168")]
		[SerializeField]
		private bool _TrackChangesDuringPlaytime;

		[Token(Token = "0x40001C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private int _SortingLayerID;

		[Token(Token = "0x40001C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[SerializeField]
		private int _SortingOrder;

		[Token(Token = "0x40001C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x15D61D4", Offset = "0x15D61D4")]
		[SerializeField]
		private float _FadeOutBegin;

		[Token(Token = "0x40001C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x15D6220", Offset = "0x15D6220")]
		[SerializeField]
		private float _FadeOutEnd;

		[Token(Token = "0x40001C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D626C", Offset = "0x15D626C")]
		private uint <_INTERNAL_InstancedMaterialGroupID>k__BackingField;

		[Token(Token = "0x40001C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private BeamGeometry m_BeamGeom;

		[Token(Token = "0x40001C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Coroutine m_CoPlaytimeUpdate;

		[Token(Token = "0x40001C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Light _CachedLight;

		[Token(Token = "0x17000050")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x15E646C", Offset = "0x15E646C")]
		public float alphaInside
		{
			[Token(Token = "0x6000177")]
			[Address(RVA = "0x366DA58", Offset = "0x366DA58", VA = "0x366DA58")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000178")]
			[Address(RVA = "0x366DA60", Offset = "0x366DA60", VA = "0x366DA60")]
			set
			{
			}
		}

		[Token(Token = "0x17000051")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x15E64A4", Offset = "0x15E64A4")]
		public float alphaOutside
		{
			[Token(Token = "0x6000179")]
			[Address(RVA = "0x366DA68", Offset = "0x366DA68", VA = "0x366DA68")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600017A")]
			[Address(RVA = "0x366DA70", Offset = "0x366DA70", VA = "0x366DA70")]
			set
			{
			}
		}

		[Token(Token = "0x17000052")]
		public float intensityGlobal
		{
			[Token(Token = "0x600017B")]
			[Address(RVA = "0x366DA78", Offset = "0x366DA78", VA = "0x366DA78")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600017C")]
			[Address(RVA = "0x366DA80", Offset = "0x366DA80", VA = "0x366DA80")]
			set
			{
			}
		}

		[Token(Token = "0x17000053")]
		public float coneAngle
		{
			[Token(Token = "0x600017D")]
			[Address(RVA = "0x3664600", Offset = "0x3664600", VA = "0x3664600")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000054")]
		public float coneRadiusEnd
		{
			[Token(Token = "0x600017E")]
			[Address(RVA = "0x36636E8", Offset = "0x36636E8", VA = "0x36636E8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000055")]
		public float coneVolume
		{
			[Token(Token = "0x600017F")]
			[Address(RVA = "0x366DA88", Offset = "0x366DA88", VA = "0x366DA88")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000056")]
		public float coneApexOffsetZ
		{
			[Token(Token = "0x6000180")]
			[Address(RVA = "0x36646A0", Offset = "0x36646A0", VA = "0x36646A0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000057")]
		public int geomSides
		{
			[Token(Token = "0x6000181")]
			[Address(RVA = "0x366DADC", Offset = "0x366DADC", VA = "0x366DADC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000182")]
			[Address(RVA = "0x366DB64", Offset = "0x366DB64", VA = "0x366DB64")]
			set
			{
			}
		}

		[Token(Token = "0x17000058")]
		public int geomSegments
		{
			[Token(Token = "0x6000183")]
			[Address(RVA = "0x366DBE4", Offset = "0x366DBE4", VA = "0x366DBE4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000184")]
			[Address(RVA = "0x366DC6C", Offset = "0x366DC6C", VA = "0x366DC6C")]
			set
			{
			}
		}

		[Token(Token = "0x17000059")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x15E64DC", Offset = "0x15E64DC")]
		public bool fadeEndFromLight
		{
			[Token(Token = "0x6000185")]
			[Address(RVA = "0x366DCEC", Offset = "0x366DCEC", VA = "0x366DCEC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000186")]
			[Address(RVA = "0x366DCF4", Offset = "0x366DCF4", VA = "0x366DCF4")]
			set
			{
			}
		}

		[Token(Token = "0x1700005A")]
		public float attenuationLerpLinearQuad
		{
			[Token(Token = "0x6000187")]
			[Address(RVA = "0x3664848", Offset = "0x3664848", VA = "0x3664848")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700005B")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x15E6514", Offset = "0x15E6514")]
		public float fadeStart
		{
			[Token(Token = "0x6000188")]
			[Address(RVA = "0x366DD00", Offset = "0x366DD00", VA = "0x366DD00")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000189")]
			[Address(RVA = "0x366DD08", Offset = "0x366DD08", VA = "0x366DD08")]
			set
			{
			}
		}

		[Token(Token = "0x1700005C")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x15E654C", Offset = "0x15E654C")]
		public float fadeEnd
		{
			[Token(Token = "0x600018A")]
			[Address(RVA = "0x366DD10", Offset = "0x366DD10", VA = "0x366DD10")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600018B")]
			[Address(RVA = "0x366DD18", Offset = "0x366DD18", VA = "0x366DD18")]
			set
			{
			}
		}

		[Token(Token = "0x1700005D")]
		public bool isNoiseEnabled
		{
			[Token(Token = "0x600018C")]
			[Address(RVA = "0x3663910", Offset = "0x3663910", VA = "0x3663910")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700005E")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x15E6584", Offset = "0x15E6584")]
		public bool noiseEnabled
		{
			[Token(Token = "0x600018D")]
			[Address(RVA = "0x366DD20", Offset = "0x366DD20", VA = "0x366DD20")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600018E")]
			[Address(RVA = "0x366DD30", Offset = "0x366DD30", VA = "0x366DD30")]
			set
			{
			}
		}

		[Token(Token = "0x1700005F")]
		public float fadeOutBegin
		{
			[Token(Token = "0x600018F")]
			[Address(RVA = "0x366DD4C", Offset = "0x366DD4C", VA = "0x366DD4C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000190")]
			[Address(RVA = "0x366DD54", Offset = "0x366DD54", VA = "0x366DD54")]
			set
			{
			}
		}

		[Token(Token = "0x17000060")]
		public float fadeOutEnd
		{
			[Token(Token = "0x6000191")]
			[Address(RVA = "0x366DDB0", Offset = "0x366DDB0", VA = "0x366DDB0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000192")]
			[Address(RVA = "0x366DDB8", Offset = "0x366DDB8", VA = "0x366DDB8")]
			set
			{
			}
		}

		[Token(Token = "0x17000061")]
		public bool isFadeOutEnabled
		{
			[Token(Token = "0x6000193")]
			[Address(RVA = "0x3660DF8", Offset = "0x3660DF8", VA = "0x3660DF8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000062")]
		public int sortingLayerID
		{
			[Token(Token = "0x6000194")]
			[Address(RVA = "0x366DDC0", Offset = "0x366DDC0", VA = "0x366DDC0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000195")]
			[Address(RVA = "0x366DDC8", Offset = "0x366DDC8", VA = "0x366DDC8")]
			set
			{
			}
		}

		[Token(Token = "0x17000063")]
		public string sortingLayerName
		{
			[Token(Token = "0x6000196")]
			[Address(RVA = "0x366DE78", Offset = "0x366DE78", VA = "0x366DE78")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000197")]
			[Address(RVA = "0x366DE84", Offset = "0x366DE84", VA = "0x366DE84")]
			set
			{
			}
		}

		[Token(Token = "0x17000064")]
		public int sortingOrder
		{
			[Token(Token = "0x6000198")]
			[Address(RVA = "0x366DEB4", Offset = "0x366DEB4", VA = "0x366DEB4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000199")]
			[Address(RVA = "0x366DEBC", Offset = "0x366DEBC", VA = "0x366DEBC")]
			set
			{
			}
		}

		[Token(Token = "0x17000065")]
		public bool trackChangesDuringPlaytime
		{
			[Token(Token = "0x600019A")]
			[Address(RVA = "0x366DF6C", Offset = "0x366DF6C", VA = "0x366DF6C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600019B")]
			[Address(RVA = "0x366DF74", Offset = "0x366DF74", VA = "0x366DF74")]
			set
			{
			}
		}

		[Token(Token = "0x17000066")]
		public bool isCurrentlyTrackingChanges
		{
			[Token(Token = "0x600019C")]
			[Address(RVA = "0x366DFEC", Offset = "0x366DFEC", VA = "0x366DFEC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000067")]
		public bool hasGeometry
		{
			[Token(Token = "0x600019D")]
			[Address(RVA = "0x366D80C", Offset = "0x366D80C", VA = "0x366D80C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000068")]
		public Bounds bounds
		{
			[Token(Token = "0x600019E")]
			[Address(RVA = "0x366D87C", Offset = "0x366D87C", VA = "0x366D87C")]
			get
			{
				return default(Bounds);
			}
		}

		[Token(Token = "0x17000069")]
		public int blendingModeAsInt
		{
			[Token(Token = "0x600019F")]
			[Address(RVA = "0x366DFFC", Offset = "0x366DFFC", VA = "0x366DFFC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700006A")]
		public Quaternion beamInternalLocalRotation
		{
			[Token(Token = "0x60001A0")]
			[Address(RVA = "0x3663760", Offset = "0x3663760", VA = "0x3663760")]
			get
			{
				return default(Quaternion);
			}
		}

		[Token(Token = "0x1700006B")]
		public Vector3 beamLocalForward
		{
			[Token(Token = "0x60001A1")]
			[Address(RVA = "0x3666FC0", Offset = "0x3666FC0", VA = "0x3666FC0")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700006C")]
		public Vector3 beamGlobalForward
		{
			[Token(Token = "0x60001A2")]
			[Address(RVA = "0x3668DC8", Offset = "0x3668DC8", VA = "0x3668DC8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700006D")]
		public Vector3 beamGlobalUp
		{
			[Token(Token = "0x60001A3")]
			[Address(RVA = "0x3668A54", Offset = "0x3668A54", VA = "0x3668A54")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700006E")]
		public Vector3 beamGlobalRight
		{
			[Token(Token = "0x60001A4")]
			[Address(RVA = "0x3668B34", Offset = "0x3668B34", VA = "0x3668B34")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700006F")]
		public Vector3 lossyScale
		{
			[Token(Token = "0x60001A5")]
			[Address(RVA = "0x366704C", Offset = "0x366704C", VA = "0x366704C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000070")]
		public MaterialManager.DynamicOcclusion _INTERNAL_DynamicOcclusionMode
		{
			[Token(Token = "0x60001A6")]
			[Address(RVA = "0x366E0F4", Offset = "0x366E0F4", VA = "0x366E0F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E2A24", Offset = "0x15E2A24")]
			get
			{
				return default(MaterialManager.DynamicOcclusion);
			}
			[Token(Token = "0x60001A7")]
			[Address(RVA = "0x366E0FC", Offset = "0x366E0FC", VA = "0x366E0FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E2A34", Offset = "0x15E2A34")]
			set
			{
			}
		}

		[Token(Token = "0x17000071")]
		public MaterialManager.DynamicOcclusion _INTERNAL_EnabledDynamicOcclusionMode
		{
			[Token(Token = "0x60001A8")]
			[Address(RVA = "0x3663B90", Offset = "0x3663B90", VA = "0x3663B90")]
			get
			{
				return default(MaterialManager.DynamicOcclusion);
			}
		}

		[Token(Token = "0x17000072")]
		public uint _INTERNAL_InstancedMaterialGroupID
		{
			[Token(Token = "0x60001B1")]
			[Address(RVA = "0x366E788", Offset = "0x366E788", VA = "0x366E788")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E2A64", Offset = "0x15E2A64")]
			get
			{
				return default(uint);
			}
			[Token(Token = "0x60001B2")]
			[Address(RVA = "0x366E790", Offset = "0x366E790", VA = "0x366E790")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E2A74", Offset = "0x15E2A74")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000073")]
		public string meshStats
		{
			[Token(Token = "0x60001B3")]
			[Address(RVA = "0x366E798", Offset = "0x366E798", VA = "0x366E798")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000074")]
		public int meshVerticesCount
		{
			[Token(Token = "0x60001B4")]
			[Address(RVA = "0x366E920", Offset = "0x366E920", VA = "0x366E920")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000075")]
		public int meshTrianglesCount
		{
			[Token(Token = "0x60001B5")]
			[Address(RVA = "0x366E9FC", Offset = "0x366E9FC", VA = "0x366E9FC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000076")]
		private Light lightSpotAttached
		{
			[Token(Token = "0x60001B6")]
			[Address(RVA = "0x366EAF0", Offset = "0x366EAF0", VA = "0x366EAF0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000002")]
		public event OnWillCameraRenderCB onWillCameraRenderThisBeam
		{
			[Token(Token = "0x60001AA")]
			[Address(RVA = "0x3666570", Offset = "0x3666570", VA = "0x3666570")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E2A44", Offset = "0x15E2A44")]
			add
			{
			}
			[Token(Token = "0x60001AB")]
			[Address(RVA = "0x36667A4", Offset = "0x36667A4", VA = "0x36667A4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E2A54", Offset = "0x15E2A54")]
			remove
			{
			}
		}

		[Token(Token = "0x60001A9")]
		[Address(RVA = "0x3666150", Offset = "0x3666150", VA = "0x3666150")]
		public void _INTERNAL_SetDynamicOcclusionCallback(string shaderKeyword, MaterialModifier.Callback cb)
		{
		}

		[Token(Token = "0x60001AC")]
		[Address(RVA = "0x36650DC", Offset = "0x36650DC", VA = "0x36650DC")]
		public void _INTERNAL_OnWillCameraRenderThisBeam(Camera cam)
		{
		}

		[Token(Token = "0x60001AD")]
		[Address(RVA = "0x3666628", Offset = "0x3666628", VA = "0x3666628")]
		public void RegisterOnBeamGeometryInitializedCallback(OnBeamGeometryInitialized cb)
		{
		}

		[Token(Token = "0x60001AE")]
		[Address(RVA = "0x366E498", Offset = "0x366E498", VA = "0x366E498")]
		private void CallOnBeamGeometryInitializedCallback()
		{
		}

		[Token(Token = "0x60001AF")]
		[Address(RVA = "0x366DD5C", Offset = "0x366DD5C", VA = "0x366DD5C")]
		private void SetFadeOutValue(ref float propToChange, float value)
		{
		}

		[Token(Token = "0x60001B0")]
		[Address(RVA = "0x366E6E4", Offset = "0x366E6E4", VA = "0x366E6E4")]
		private void OnFadeOutStateChanged()
		{
		}

		[Token(Token = "0x60001B7")]
		[Address(RVA = "0x366EBF0", Offset = "0x366EBF0", VA = "0x366EBF0")]
		public float GetInsideBeamFactor(Vector3 posWS)
		{
			return default(float);
		}

		[Token(Token = "0x60001B8")]
		[Address(RVA = "0x36650EC", Offset = "0x36650EC", VA = "0x36650EC")]
		public float GetInsideBeamFactorFromObjectSpacePos(Vector3 posOS)
		{
			return default(float);
		}

		[Token(Token = "0x60001B9")]
		[Address(RVA = "0x366EC50", Offset = "0x366EC50", VA = "0x366EC50")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x15E2A84", Offset = "0x15E2A84")]
		public void Generate()
		{
		}

		[Token(Token = "0x60001BA")]
		[Address(RVA = "0x366EC5C", Offset = "0x366EC5C", VA = "0x366EC5C", Slot = "4")]
		public virtual void GenerateGeometry()
		{
		}

		[Token(Token = "0x60001BB")]
		[Address(RVA = "0x366EEEC", Offset = "0x366EEEC", VA = "0x366EEEC", Slot = "5")]
		public virtual void UpdateAfterManualPropertyChange()
		{
		}

		[Token(Token = "0x60001BC")]
		[Address(RVA = "0x366EF80", Offset = "0x366EF80", VA = "0x366EF80")]
		private void Start()
		{
		}

		[Token(Token = "0x60001BD")]
		[Address(RVA = "0x366EF8C", Offset = "0x366EF8C", VA = "0x366EF8C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60001BE")]
		[Address(RVA = "0x366F024", Offset = "0x366F024", VA = "0x366F024")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60001BF")]
		[Address(RVA = "0x366DF80", Offset = "0x366DF80", VA = "0x366DF80")]
		private void StartPlaytimeUpdateIfNeeded()
		{
		}

		[Token(Token = "0x60001C0")]
		[Address(RVA = "0x366F0C4", Offset = "0x366F0C4", VA = "0x366F0C4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x15E2ABC", Offset = "0x15E2ABC")]
		private IEnumerator CoPlaytimeUpdate()
		{
			return null;
		}

		[Token(Token = "0x60001C1")]
		[Address(RVA = "0x366F16C", Offset = "0x366F16C", VA = "0x366F16C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60001C2")]
		[Address(RVA = "0x366F170", Offset = "0x366F170", VA = "0x366F170")]
		private void DestroyBeam()
		{
		}

		[Token(Token = "0x60001C3")]
		[Address(RVA = "0x366F238", Offset = "0x366F238", VA = "0x366F238")]
		private void AssignPropertiesFromSpotLight(Light lightSpot)
		{
		}

		[Token(Token = "0x60001C4")]
		[Address(RVA = "0x366F338", Offset = "0x366F338", VA = "0x366F338")]
		private void ClampProperties()
		{
		}

		[Token(Token = "0x60001C5")]
		[Address(RVA = "0x366EEBC", Offset = "0x366EEBC", VA = "0x366EEBC")]
		private void ValidateProperties()
		{
		}

		[Token(Token = "0x60001C6")]
		[Address(RVA = "0x366ED9C", Offset = "0x366ED9C", VA = "0x366ED9C")]
		private void HandleBackwardCompatibility(int serializedVersion, int newVersion)
		{
		}

		[Token(Token = "0x60001C7")]
		[Address(RVA = "0x366F524", Offset = "0x366F524", VA = "0x366F524")]
		public VolumetricLightBeam()
		{
		}
	}
}
namespace VLB_Samples
{
	[Token(Token = "0x2000033")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x15D3FEC", Offset = "0x15D3FEC")]
	public class CameraToggleBeamVisibility : MonoBehaviour
	{
		[Token(Token = "0x40001CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private KeyCode m_KeyCode;

		[Token(Token = "0x60001C8")]
		[Address(RVA = "0x366F7AC", Offset = "0x366F7AC", VA = "0x366F7AC")]
		private void Update()
		{
		}

		[Token(Token = "0x60001C9")]
		[Address(RVA = "0x366F8A0", Offset = "0x366F8A0", VA = "0x366F8A0")]
		public CameraToggleBeamVisibility()
		{
		}
	}
	[Token(Token = "0x2000034")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x15D4050", Offset = "0x15D4050")]
	public class CheckIfInsideBeam : MonoBehaviour
	{
		[Token(Token = "0x40001CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool isInsideBeam;

		[Token(Token = "0x40001CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material m_Material;

		[Token(Token = "0x40001CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Collider m_Collider;

		[Token(Token = "0x60001CA")]
		[Address(RVA = "0x366F8B0", Offset = "0x366F8B0", VA = "0x366F8B0")]
		private void Start()
		{
		}

		[Token(Token = "0x60001CB")]
		[Address(RVA = "0x366F98C", Offset = "0x366F98C", VA = "0x366F98C")]
		private void Update()
		{
		}

		[Token(Token = "0x60001CC")]
		[Address(RVA = "0x366FA48", Offset = "0x366FA48", VA = "0x366FA48")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60001CD")]
		[Address(RVA = "0x366FA50", Offset = "0x366FA50", VA = "0x366FA50")]
		private void OnTriggerStay(Collider trigger)
		{
		}

		[Token(Token = "0x60001CE")]
		[Address(RVA = "0x366FB14", Offset = "0x366FB14", VA = "0x366FB14")]
		public CheckIfInsideBeam()
		{
		}
	}
	[Token(Token = "0x2000035")]
	public class FeaturesNotSupportedMessage : MonoBehaviour
	{
		[Token(Token = "0x60001CF")]
		[Address(RVA = "0x366FB1C", Offset = "0x366FB1C", VA = "0x366FB1C")]
		private void Start()
		{
		}

		[Token(Token = "0x60001D0")]
		[Address(RVA = "0x366FBD8", Offset = "0x366FBD8", VA = "0x366FBD8")]
		public FeaturesNotSupportedMessage()
		{
		}
	}
	[Token(Token = "0x2000036")]
	public class FreeCameraController : MonoBehaviour
	{
		[Token(Token = "0x40001CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float cameraSensitivity;

		[Token(Token = "0x40001CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float speedNormal;

		[Token(Token = "0x40001D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float speedFactorSlow;

		[Token(Token = "0x40001D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float speedFactorFast;

		[Token(Token = "0x40001D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float speedClimb;

		[Token(Token = "0x40001D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float rotationH;

		[Token(Token = "0x40001D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float rotationV;

		[Token(Token = "0x40001D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool m_UseMouseView;

		[Token(Token = "0x17000077")]
		private bool useMouseView
		{
			[Token(Token = "0x60001D1")]
			[Address(RVA = "0x366FBE0", Offset = "0x366FBE0", VA = "0x366FBE0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60001D2")]
			[Address(RVA = "0x366FBE8", Offset = "0x366FBE8", VA = "0x366FBE8")]
			set
			{
			}
		}

		[Token(Token = "0x60001D3")]
		[Address(RVA = "0x366FC24", Offset = "0x366FC24", VA = "0x366FC24")]
		private void Start()
		{
		}

		[Token(Token = "0x60001D4")]
		[Address(RVA = "0x366FCBC", Offset = "0x366FCBC", VA = "0x366FCBC")]
		private void Update()
		{
		}

		[Token(Token = "0x60001D5")]
		[Address(RVA = "0x367035C", Offset = "0x367035C", VA = "0x367035C")]
		public FreeCameraController()
		{
		}
	}
	[Token(Token = "0x2000037")]
	public class LightGenerator : MonoBehaviour
	{
		[Token(Token = "0x40001D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D628C", Offset = "0x15D628C")]
		[SerializeField]
		private int CountX;

		[Token(Token = "0x40001D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D62D0", Offset = "0x15D62D0")]
		[SerializeField]
		private int CountY;

		[Token(Token = "0x40001D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float OffsetUnits;

		[Token(Token = "0x40001D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float PositionY;

		[Token(Token = "0x40001DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private bool NoiseEnabled;

		[Token(Token = "0x40001DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[SerializeField]
		private bool AddLight;

		[Token(Token = "0x60001D6")]
		[Address(RVA = "0x3670380", Offset = "0x3670380", VA = "0x3670380")]
		public void Generate()
		{
		}

		[Token(Token = "0x60001D7")]
		[Address(RVA = "0x3670C3C", Offset = "0x3670C3C", VA = "0x3670C3C")]
		public LightGenerator()
		{
		}
	}
	[Token(Token = "0x2000038")]
	public class Rotater : MonoBehaviour
	{
		[Token(Token = "0x40001DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x15D6354", Offset = "0x15D6354")]
		public Vector3 EulerSpeed;

		[Token(Token = "0x60001D8")]
		[Address(RVA = "0x3670C58", Offset = "0x3670C58", VA = "0x3670C58")]
		private void Update()
		{
		}

		[Token(Token = "0x60001D9")]
		[Address(RVA = "0x3670DD0", Offset = "0x3670DD0", VA = "0x3670DD0")]
		public Rotater()
		{
		}
	}
}
namespace RootMotion
{
	[Token(Token = "0x2000039")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x15D40F4", Offset = "0x15D40F4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x15D40F4", Offset = "0x15D40F4")]
	public abstract class Baker : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20001F0")]
		public enum Mode
		{
			[Token(Token = "0x4000CBC")]
			AnimationClips,
			[Token(Token = "0x4000CBD")]
			AnimationStates,
			[Token(Token = "0x4000CBE")]
			PlayableDirector,
			[Token(Token = "0x4000CBF")]
			Realtime
		}

		[Token(Token = "0x40001DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D638C", Offset = "0x15D638C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D638C", Offset = "0x15D638C")]
		public int frameRate;

		[Token(Token = "0x40001DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D63E4", Offset = "0x15D63E4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D63E4", Offset = "0x15D63E4")]
		public float keyReductionError;

		[Token(Token = "0x40001DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D643C", Offset = "0x15D643C")]
		public Mode mode;

		[Token(Token = "0x40001E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D6474", Offset = "0x15D6474")]
		public AnimationClip[] animationClips;

		[Token(Token = "0x40001E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D64AC", Offset = "0x15D64AC")]
		public string[] animationStates;

		[Token(Token = "0x40001E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D64E4", Offset = "0x15D64E4")]
		public bool loop;

		[Token(Token = "0x40001E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D651C", Offset = "0x15D651C")]
		public string saveToFolder;

		[Token(Token = "0x40001E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D6554", Offset = "0x15D6554")]
		public string appendName;

		[Token(Token = "0x40001E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D658C", Offset = "0x15D658C")]
		public string saveName;

		[Token(Token = "0x40001E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D65C4", Offset = "0x15D65C4")]
		private bool <isBaking>k__BackingField;

		[Token(Token = "0x40001E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D65D4", Offset = "0x15D65D4")]
		private float <bakingProgress>k__BackingField;

		[Token(Token = "0x40001E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		[HideInInspector]
		public Animator animator;

		[Token(Token = "0x40001E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		[HideInInspector]
		public PlayableDirector director;

		[Token(Token = "0x40001EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D6654", Offset = "0x15D6654")]
		private float <clipLength>k__BackingField;

		[Token(Token = "0x17000078")]
		public bool isBaking
		{
			[Token(Token = "0x60001DE")]
			[Address(RVA = "0x1F233D4", Offset = "0x1F233D4", VA = "0x1F233D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E2C00", Offset = "0x15E2C00")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60001DF")]
			[Address(RVA = "0x1F233DC", Offset = "0x1F233DC", VA = "0x1F233DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E2C10", Offset = "0x15E2C10")]
			private set
			{
			}
		}

		[Token(Token = "0x17000079")]
		public float bakingProgress
		{
			[Token(Token = "0x60001E0")]
			[Address(RVA = "0x1F233E8", Offset = "0x1F233E8", VA = "0x1F233E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E2C20", Offset = "0x15E2C20")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60001E1")]
			[Address(RVA = "0x1F233F0", Offset = "0x1F233F0", VA = "0x1F233F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E2C30", Offset = "0x15E2C30")]
			private set
			{
			}
		}

		[Token(Token = "0x1700007A")]
		protected float clipLength
		{
			[Token(Token = "0x60001E7")]
			[Address(RVA = "0x1F233F8", Offset = "0x1F233F8", VA = "0x1F233F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E2C40", Offset = "0x15E2C40")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60001E8")]
			[Address(RVA = "0x1F23400", Offset = "0x1F23400", VA = "0x1F23400")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E2C50", Offset = "0x15E2C50")]
			private set
			{
			}
		}

		[Token(Token = "0x60001DA")]
		[Address(RVA = "0x1F232A4", Offset = "0x1F232A4", VA = "0x1F232A4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E2B20", Offset = "0x15E2B20")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x60001DB")]
		[Address(RVA = "0x1F232F0", Offset = "0x1F232F0", VA = "0x1F232F0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E2B58", Offset = "0x15E2B58")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x60001DC")]
		[Address(RVA = "0x1F2333C", Offset = "0x1F2333C", VA = "0x1F2333C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E2B90", Offset = "0x15E2B90")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60001DD")]
		[Address(RVA = "0x1F23388", Offset = "0x1F23388", VA = "0x1F23388")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E2BC8", Offset = "0x15E2BC8")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60001E2")]
		protected abstract Transform GetCharacterRoot();

		[Token(Token = "0x60001E3")]
		protected abstract void OnStartBaking();

		[Token(Token = "0x60001E4")]
		protected abstract void OnSetLoopFrame(float time);

		[Token(Token = "0x60001E5")]
		protected abstract void OnSetCurves(ref AnimationClip clip);

		[Token(Token = "0x60001E6")]
		protected abstract void OnSetKeyframes(float time, bool lastFrame);

		[Token(Token = "0x60001E9")]
		[Address(RVA = "0x1F23408", Offset = "0x1F23408", VA = "0x1F23408")]
		public void BakeClip()
		{
		}

		[Token(Token = "0x60001EA")]
		[Address(RVA = "0x1F2340C", Offset = "0x1F2340C", VA = "0x1F2340C")]
		public void StartBaking()
		{
		}

		[Token(Token = "0x60001EB")]
		[Address(RVA = "0x1F23410", Offset = "0x1F23410", VA = "0x1F23410")]
		public void StopBaking()
		{
		}

		[Token(Token = "0x60001EC")]
		[Address(RVA = "0x1F23414", Offset = "0x1F23414", VA = "0x1F23414")]
		protected Baker()
		{
		}
	}
	[Token(Token = "0x200003A")]
	public class GenericBaker : Baker
	{
		[Token(Token = "0x40001EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D6664", Offset = "0x15D6664")]
		public bool markAsLegacy;

		[Token(Token = "0x40001EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D669C", Offset = "0x15D669C")]
		public Transform root;

		[Token(Token = "0x40001ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D66D4", Offset = "0x15D66D4")]
		public Transform rootNode;

		[Token(Token = "0x40001EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D670C", Offset = "0x15D670C")]
		public Transform[] ignoreList;

		[Token(Token = "0x40001EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D6744", Offset = "0x15D6744")]
		public Transform[] bakePositionList;

		[Token(Token = "0x40001F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private BakerTransform[] children;

		[Token(Token = "0x40001F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private BakerTransform rootChild;

		[Token(Token = "0x40001F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private int rootChildIndex;

		[Token(Token = "0x60001ED")]
		[Address(RVA = "0x28C9D9C", Offset = "0x28C9D9C", VA = "0x28C9D9C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60001EE")]
		[Address(RVA = "0x28CA17C", Offset = "0x28CA17C", VA = "0x28CA17C", Slot = "4")]
		protected override Transform GetCharacterRoot()
		{
			return null;
		}

		[Token(Token = "0x60001EF")]
		[Address(RVA = "0x28CA184", Offset = "0x28CA184", VA = "0x28CA184", Slot = "5")]
		protected override void OnStartBaking()
		{
		}

		[Token(Token = "0x60001F0")]
		[Address(RVA = "0x28CA294", Offset = "0x28CA294", VA = "0x28CA294", Slot = "6")]
		protected override void OnSetLoopFrame(float time)
		{
		}

		[Token(Token = "0x60001F1")]
		[Address(RVA = "0x28CA310", Offset = "0x28CA310", VA = "0x28CA310", Slot = "7")]
		protected override void OnSetCurves(ref AnimationClip clip)
		{
		}

		[Token(Token = "0x60001F2")]
		[Address(RVA = "0x28CA38C", Offset = "0x28CA38C", VA = "0x28CA38C", Slot = "8")]
		protected override void OnSetKeyframes(float time, bool lastFrame)
		{
		}

		[Token(Token = "0x60001F3")]
		[Address(RVA = "0x28C9FCC", Offset = "0x28C9FCC", VA = "0x28C9FCC")]
		private bool IsIgnored(Transform t)
		{
			return default(bool);
		}

		[Token(Token = "0x60001F4")]
		[Address(RVA = "0x28CA0A4", Offset = "0x28CA0A4", VA = "0x28CA0A4")]
		private bool BakePosition(Transform t)
		{
			return default(bool);
		}

		[Token(Token = "0x60001F5")]
		[Address(RVA = "0x28CA408", Offset = "0x28CA408", VA = "0x28CA408")]
		public GenericBaker()
		{
		}
	}
	[Token(Token = "0x200003B")]
	public class TQ
	{
		[Token(Token = "0x40001F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 t;

		[Token(Token = "0x40001F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion q;

		[Token(Token = "0x60001F6")]
		[Address(RVA = "0x2FD66A8", Offset = "0x2FD66A8", VA = "0x2FD66A8")]
		public TQ(Vector3 translation, Quaternion rotation)
		{
		}
	}
	[Token(Token = "0x200003C")]
	public class AvatarUtility
	{
		[Token(Token = "0x60001F7")]
		[Address(RVA = "0x1F22268", Offset = "0x1F22268", VA = "0x1F22268")]
		public static Quaternion GetPostRotation(Avatar avatar, AvatarIKGoal avatarIKGoal)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60001F8")]
		[Address(RVA = "0x1F22488", Offset = "0x1F22488", VA = "0x1F22488")]
		public static TQ GetIKGoalTQ(Avatar avatar, float humanScale, AvatarIKGoal avatarIKGoal, TQ bodyPositionRotation, TQ boneTQ)
		{
			return null;
		}

		[Token(Token = "0x60001F9")]
		[Address(RVA = "0x1F22468", Offset = "0x1F22468", VA = "0x1F22468")]
		public static HumanBodyBones HumanIDFromAvatarIKGoal(AvatarIKGoal avatarIKGoal)
		{
			return default(HumanBodyBones);
		}

		[Token(Token = "0x60001FA")]
		[Address(RVA = "0x1F22B20", Offset = "0x1F22B20", VA = "0x1F22B20")]
		public AvatarUtility()
		{
		}
	}
	[Token(Token = "0x200003D")]
	public static class BakerUtilities
	{
		[Token(Token = "0x60001FB")]
		[Address(RVA = "0x1F24694", Offset = "0x1F24694", VA = "0x1F24694")]
		public static void ReduceKeyframes(AnimationCurve curve, float maxError)
		{
		}

		[Token(Token = "0x60001FC")]
		[Address(RVA = "0x1F25BE0", Offset = "0x1F25BE0", VA = "0x1F25BE0")]
		public static Keyframe[] GetReducedKeyframes(AnimationCurve curve, float maxError)
		{
			return null;
		}

		[Token(Token = "0x60001FD")]
		[Address(RVA = "0x1F240A8", Offset = "0x1F240A8", VA = "0x1F240A8")]
		public static void SetLoopFrame(float time, AnimationCurve curve)
		{
		}

		[Token(Token = "0x60001FE")]
		[Address(RVA = "0x1F246DC", Offset = "0x1F246DC", VA = "0x1F246DC")]
		public static void SetTangentMode(AnimationCurve curve)
		{
		}

		[Token(Token = "0x60001FF")]
		[Address(RVA = "0x1F23BE0", Offset = "0x1F23BE0", VA = "0x1F23BE0")]
		public static Quaternion EnsureQuaternionContinuity(Quaternion lastQ, Quaternion q)
		{
			return default(Quaternion);
		}
	}
	[Serializable]
	[Token(Token = "0x200003E")]
	public class BakerHumanoidQT
	{
		[Token(Token = "0x40001F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Transform transform;

		[Token(Token = "0x40001F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string Qx;

		[Token(Token = "0x40001F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string Qy;

		[Token(Token = "0x40001F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string Qz;

		[Token(Token = "0x40001F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string Qw;

		[Token(Token = "0x40001FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string Tx;

		[Token(Token = "0x40001FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string Ty;

		[Token(Token = "0x40001FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string Tz;

		[Token(Token = "0x40001FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve rotX;

		[Token(Token = "0x40001FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AnimationCurve rotY;

		[Token(Token = "0x40001FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public AnimationCurve rotZ;

		[Token(Token = "0x4000200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AnimationCurve rotW;

		[Token(Token = "0x4000201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public AnimationCurve posX;

		[Token(Token = "0x4000202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public AnimationCurve posY;

		[Token(Token = "0x4000203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public AnimationCurve posZ;

		[Token(Token = "0x4000204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private AvatarIKGoal goal;

		[Token(Token = "0x4000205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Quaternion lastQ;

		[Token(Token = "0x4000206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private bool lastQSet;

		[Token(Token = "0x6000200")]
		[Address(RVA = "0x1F23504", Offset = "0x1F23504", VA = "0x1F23504")]
		public BakerHumanoidQT(string name)
		{
		}

		[Token(Token = "0x6000201")]
		[Address(RVA = "0x1F237FC", Offset = "0x1F237FC", VA = "0x1F237FC")]
		public BakerHumanoidQT(Transform transform, AvatarIKGoal goal, string name)
		{
		}

		[Token(Token = "0x6000202")]
		[Address(RVA = "0x1F23678", Offset = "0x1F23678", VA = "0x1F23678")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000203")]
		[Address(RVA = "0x1F23994", Offset = "0x1F23994", VA = "0x1F23994")]
		public void SetIKKeyframes(float time, Avatar avatar, float humanScale, Vector3 bodyPosition, Quaternion bodyRotation)
		{
		}

		[Token(Token = "0x6000204")]
		[Address(RVA = "0x1F23E3C", Offset = "0x1F23E3C", VA = "0x1F23E3C")]
		public void SetKeyframes(float time, Vector3 pos, Quaternion rot)
		{
		}

		[Token(Token = "0x6000205")]
		[Address(RVA = "0x1F23F38", Offset = "0x1F23F38", VA = "0x1F23F38")]
		public void MoveLastKeyframes(float time)
		{
		}

		[Token(Token = "0x6000206")]
		[Address(RVA = "0x1F24034", Offset = "0x1F24034", VA = "0x1F24034")]
		public void SetLoopFrame(float time)
		{
		}

		[Token(Token = "0x6000207")]
		[Address(RVA = "0x1F23FAC", Offset = "0x1F23FAC", VA = "0x1F23FAC")]
		private void MoveLastKeyframe(float time, AnimationCurve curve)
		{
		}

		[Token(Token = "0x6000208")]
		[Address(RVA = "0x1F242F4", Offset = "0x1F242F4", VA = "0x1F242F4")]
		public void MultiplyLength(AnimationCurve curve, float mlp)
		{
		}

		[Token(Token = "0x6000209")]
		[Address(RVA = "0x1F243A8", Offset = "0x1F243A8", VA = "0x1F243A8")]
		public void SetCurves(ref AnimationClip clip, float maxError, float lengthMlp)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200003F")]
	public class BakerMuscle
	{
		[Token(Token = "0x4000207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AnimationCurve curve;

		[Token(Token = "0x4000208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int muscleIndex;

		[Token(Token = "0x4000209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string propertyName;

		[Token(Token = "0x600020A")]
		[Address(RVA = "0x1F246E0", Offset = "0x1F246E0", VA = "0x1F246E0")]
		public BakerMuscle(int muscleIndex)
		{
		}

		[Token(Token = "0x600020B")]
		[Address(RVA = "0x1F2475C", Offset = "0x1F2475C", VA = "0x1F2475C")]
		private string MuscleNameToPropertyName(string n)
		{
			return null;
		}

		[Token(Token = "0x600020C")]
		[Address(RVA = "0x1F24E4C", Offset = "0x1F24E4C", VA = "0x1F24E4C")]
		public void MultiplyLength(AnimationCurve curve, float mlp)
		{
		}

		[Token(Token = "0x600020D")]
		[Address(RVA = "0x1F24F00", Offset = "0x1F24F00", VA = "0x1F24F00")]
		public void SetCurves(ref AnimationClip clip, float maxError, float lengthMlp)
		{
		}

		[Token(Token = "0x600020E")]
		[Address(RVA = "0x1F24DE4", Offset = "0x1F24DE4", VA = "0x1F24DE4")]
		public void Reset()
		{
		}

		[Token(Token = "0x600020F")]
		[Address(RVA = "0x1F24FE4", Offset = "0x1F24FE4", VA = "0x1F24FE4")]
		public void SetKeyframe(float time, float[] muscles)
		{
		}

		[Token(Token = "0x6000210")]
		[Address(RVA = "0x1F2502C", Offset = "0x1F2502C", VA = "0x1F2502C")]
		public void SetLoopFrame(float time)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000040")]
	public class BakerTransform
	{
		[Token(Token = "0x400020A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x400020B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationCurve posX;

		[Token(Token = "0x400020C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve posY;

		[Token(Token = "0x400020D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve posZ;

		[Token(Token = "0x400020E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve rotX;

		[Token(Token = "0x400020F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve rotY;

		[Token(Token = "0x4000210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AnimationCurve rotZ;

		[Token(Token = "0x4000211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AnimationCurve rotW;

		[Token(Token = "0x4000212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private string relativePath;

		[Token(Token = "0x4000213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool recordPosition;

		[Token(Token = "0x4000214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 relativePosition;

		[Token(Token = "0x4000215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool isRootNode;

		[Token(Token = "0x4000216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Quaternion relativeRotation;

		[Token(Token = "0x6000211")]
		[Address(RVA = "0x1F25034", Offset = "0x1F25034", VA = "0x1F25034")]
		public BakerTransform(Transform transform, Transform root, bool recordPosition, bool isRootNode)
		{
		}

		[Token(Token = "0x6000212")]
		[Address(RVA = "0x1F2522C", Offset = "0x1F2522C", VA = "0x1F2522C")]
		public void SetRelativeSpace(Vector3 position, Quaternion rotation)
		{
		}

		[Token(Token = "0x6000213")]
		[Address(RVA = "0x1F25240", Offset = "0x1F25240", VA = "0x1F25240")]
		public void SetCurves(ref AnimationClip clip)
		{
		}

		[Token(Token = "0x6000214")]
		[Address(RVA = "0x1F254D0", Offset = "0x1F254D0", VA = "0x1F254D0")]
		private void AddRootMotionCurves(ref AnimationClip clip)
		{
		}

		[Token(Token = "0x6000215")]
		[Address(RVA = "0x1F250E4", Offset = "0x1F250E4", VA = "0x1F250E4")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000216")]
		[Address(RVA = "0x1F2571C", Offset = "0x1F2571C", VA = "0x1F2571C")]
		public void ReduceKeyframes(float maxError)
		{
		}

		[Token(Token = "0x6000217")]
		[Address(RVA = "0x1F25790", Offset = "0x1F25790", VA = "0x1F25790")]
		public void SetKeyframes(float time)
		{
		}

		[Token(Token = "0x6000218")]
		[Address(RVA = "0x1F259DC", Offset = "0x1F259DC", VA = "0x1F259DC")]
		public void AddLoopFrame(float time)
		{
		}
	}
	[Token(Token = "0x2000041")]
	public class HumanoidBaker : Baker
	{
		[Token(Token = "0x4000217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D677C", Offset = "0x15D677C")]
		public bool bakeHandIK;

		[Token(Token = "0x4000218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D67B4", Offset = "0x15D67B4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D67B4", Offset = "0x15D67B4")]
		public float IKKeyReductionError;

		[Token(Token = "0x4000219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D680C", Offset = "0x15D680C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D680C", Offset = "0x15D680C")]
		public int muscleFrameRateDiv;

		[Token(Token = "0x400021A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private BakerMuscle[] bakerMuscles;

		[Token(Token = "0x400021B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private BakerHumanoidQT rootQT;

		[Token(Token = "0x400021C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private BakerHumanoidQT leftFootQT;

		[Token(Token = "0x400021D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private BakerHumanoidQT rightFootQT;

		[Token(Token = "0x400021E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private BakerHumanoidQT leftHandQT;

		[Token(Token = "0x400021F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private BakerHumanoidQT rightHandQT;

		[Token(Token = "0x4000220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float[] muscles;

		[Token(Token = "0x4000221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private HumanPose pose;

		[Token(Token = "0x4000222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private HumanPoseHandler handler;

		[Token(Token = "0x4000223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Vector3 bodyPosition;

		[Token(Token = "0x4000224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private Quaternion bodyRotation;

		[Token(Token = "0x4000225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private int mN;

		[Token(Token = "0x4000226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Quaternion lastBodyRotation;

		[Token(Token = "0x6000219")]
		[Address(RVA = "0x28CB354", Offset = "0x28CB354", VA = "0x28CB354")]
		private void Awake()
		{
		}

		[Token(Token = "0x600021A")]
		[Address(RVA = "0x28CB838", Offset = "0x28CB838", VA = "0x28CB838", Slot = "4")]
		protected override Transform GetCharacterRoot()
		{
			return null;
		}

		[Token(Token = "0x600021B")]
		[Address(RVA = "0x28CB854", Offset = "0x28CB854", VA = "0x28CB854", Slot = "5")]
		protected override void OnStartBaking()
		{
		}

		[Token(Token = "0x600021C")]
		[Address(RVA = "0x28CB974", Offset = "0x28CB974", VA = "0x28CB974", Slot = "6")]
		protected override void OnSetLoopFrame(float time)
		{
		}

		[Token(Token = "0x600021D")]
		[Address(RVA = "0x28CBA50", Offset = "0x28CBA50", VA = "0x28CBA50", Slot = "7")]
		protected override void OnSetCurves(ref AnimationClip clip)
		{
		}

		[Token(Token = "0x600021E")]
		[Address(RVA = "0x28CBC20", Offset = "0x28CBC20", VA = "0x28CBC20", Slot = "8")]
		protected override void OnSetKeyframes(float time, bool lastFrame)
		{
		}

		[Token(Token = "0x600021F")]
		[Address(RVA = "0x28CBF48", Offset = "0x28CBF48", VA = "0x28CBF48")]
		private void UpdateHumanPose()
		{
		}

		[Token(Token = "0x6000220")]
		[Address(RVA = "0x28CC024", Offset = "0x28CC024", VA = "0x28CC024")]
		public HumanoidBaker()
		{
		}
	}
	[Token(Token = "0x2000042")]
	public class CameraController : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20001F1")]
		public enum UpdateMode
		{
			[Token(Token = "0x4000CC1")]
			Update,
			[Token(Token = "0x4000CC2")]
			FixedUpdate,
			[Token(Token = "0x4000CC3")]
			LateUpdate,
			[Token(Token = "0x4000CC4")]
			FixedLateUpdate
		}

		[Token(Token = "0x4000227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4000228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform rotationSpace;

		[Token(Token = "0x4000229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UpdateMode updateMode;

		[Token(Token = "0x400022A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool lockCursor;

		[Token(Token = "0x400022B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x15D6860", Offset = "0x15D6860")]
		public bool smoothFollow;

		[Token(Token = "0x400022C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 offset;

		[Token(Token = "0x400022D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float followSpeed;

		[Token(Token = "0x400022E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x15D6898", Offset = "0x15D6898")]
		public float rotationSensitivity;

		[Token(Token = "0x400022F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float yMinLimit;

		[Token(Token = "0x4000230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float yMaxLimit;

		[Token(Token = "0x4000231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool rotateAlways;

		[Token(Token = "0x4000232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		public bool rotateOnLeftButton;

		[Token(Token = "0x4000233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
		public bool rotateOnRightButton;

		[Token(Token = "0x4000234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F")]
		public bool rotateOnMiddleButton;

		[Token(Token = "0x4000235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x15D68D0", Offset = "0x15D68D0")]
		public float distance;

		[Token(Token = "0x4000236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float minDistance;

		[Token(Token = "0x4000237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float maxDistance;

		[Token(Token = "0x4000238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float zoomSpeed;

		[Token(Token = "0x4000239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float zoomSensitivity;

		[Token(Token = "0x400023A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x15D6908", Offset = "0x15D6908")]
		public LayerMask blockingLayers;

		[Token(Token = "0x400023B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float blockingRadius;

		[Token(Token = "0x400023C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float blockingSmoothTime;

		[Token(Token = "0x400023D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D6940", Offset = "0x15D6940")]
		public float blockedOffset;

		[Token(Token = "0x400023E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D6958", Offset = "0x15D6958")]
		private float <x>k__BackingField;

		[Token(Token = "0x400023F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D6968", Offset = "0x15D6968")]
		private float <y>k__BackingField;

		[Token(Token = "0x4000240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D6978", Offset = "0x15D6978")]
		private float <distanceTarget>k__BackingField;

		[Token(Token = "0x4000241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 targetDistance;

		[Token(Token = "0x4000242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Vector3 position;

		[Token(Token = "0x4000243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Quaternion rotation;

		[Token(Token = "0x4000244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3 smoothPosition;

		[Token(Token = "0x4000245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Camera cam;

		[Token(Token = "0x4000246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool fixedFrame;

		[Token(Token = "0x4000247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private float fixedDeltaTime;

		[Token(Token = "0x4000248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Quaternion r;

		[Token(Token = "0x4000249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Vector3 lastUp;

		[Token(Token = "0x400024A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float blockedDistance;

		[Token(Token = "0x400024B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float blockedDistanceV;

		[Token(Token = "0x1700007B")]
		public float x
		{
			[Token(Token = "0x6000221")]
			[Address(RVA = "0x1F2D2B0", Offset = "0x1F2D2B0", VA = "0x1F2D2B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E2C60", Offset = "0x15E2C60")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000222")]
			[Address(RVA = "0x1F2D2B8", Offset = "0x1F2D2B8", VA = "0x1F2D2B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E2C70", Offset = "0x15E2C70")]
			private set
			{
			}
		}

		[Token(Token = "0x1700007C")]
		public float y
		{
			[Token(Token = "0x6000223")]
			[Address(RVA = "0x1F2D2C0", Offset = "0x1F2D2C0", VA = "0x1F2D2C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E2C80", Offset = "0x15E2C80")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000224")]
			[Address(RVA = "0x1F2D2C8", Offset = "0x1F2D2C8", VA = "0x1F2D2C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E2C90", Offset = "0x15E2C90")]
			private set
			{
			}
		}

		[Token(Token = "0x1700007D")]
		public float distanceTarget
		{
			[Token(Token = "0x6000225")]
			[Address(RVA = "0x1F2D2D0", Offset = "0x1F2D2D0", VA = "0x1F2D2D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E2CA0", Offset = "0x15E2CA0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000226")]
			[Address(RVA = "0x1F2D2D8", Offset = "0x1F2D2D8", VA = "0x1F2D2D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E2CB0", Offset = "0x15E2CB0")]
			private set
			{
			}
		}

		[Token(Token = "0x1700007E")]
		private float zoomAdd
		{
			[Token(Token = "0x6000230")]
			[Address(RVA = "0x1F2DD90", Offset = "0x1F2DD90", VA = "0x1F2DD90")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000227")]
		[Address(RVA = "0x1F2D2E0", Offset = "0x1F2D2E0", VA = "0x1F2D2E0")]
		public void SetAngles(Quaternion rotation)
		{
		}

		[Token(Token = "0x6000228")]
		[Address(RVA = "0x1F2D31C", Offset = "0x1F2D31C", VA = "0x1F2D31C")]
		public void SetAngles(float yaw, float pitch)
		{
		}

		[Token(Token = "0x6000229")]
		[Address(RVA = "0x1F2D324", Offset = "0x1F2D324", VA = "0x1F2D324", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x600022A")]
		[Address(RVA = "0x1F2D44C", Offset = "0x1F2D44C", VA = "0x1F2D44C", Slot = "5")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x600022B")]
		[Address(RVA = "0x1F2D4A8", Offset = "0x1F2D4A8", VA = "0x1F2D4A8", Slot = "6")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x600022C")]
		[Address(RVA = "0x1F2D510", Offset = "0x1F2D510", VA = "0x1F2D510", Slot = "7")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x600022D")]
		[Address(RVA = "0x1F2D574", Offset = "0x1F2D574", VA = "0x1F2D574")]
		public void UpdateInput()
		{
		}

		[Token(Token = "0x600022E")]
		[Address(RVA = "0x1F2D480", Offset = "0x1F2D480", VA = "0x1F2D480")]
		public void UpdateTransform()
		{
		}

		[Token(Token = "0x600022F")]
		[Address(RVA = "0x1F2D6F4", Offset = "0x1F2D6F4", VA = "0x1F2D6F4")]
		public void UpdateTransform(float deltaTime)
		{
		}

		[Token(Token = "0x6000231")]
		[Address(RVA = "0x1F2DCE0", Offset = "0x1F2DCE0", VA = "0x1F2DCE0")]
		private float ClampAngle(float angle, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6000232")]
		[Address(RVA = "0x1F2DE04", Offset = "0x1F2DE04", VA = "0x1F2DE04")]
		public CameraController()
		{
		}
	}
	[Token(Token = "0x2000043")]
	public class CameraControllerFPS : MonoBehaviour
	{
		[Token(Token = "0x400024C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float rotationSensitivity;

		[Token(Token = "0x400024D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float yMinLimit;

		[Token(Token = "0x400024E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float yMaxLimit;

		[Token(Token = "0x400024F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float x;

		[Token(Token = "0x4000250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float y;

		[Token(Token = "0x6000233")]
		[Address(RVA = "0x1F2DF14", Offset = "0x1F2DF14", VA = "0x1F2DF14")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000234")]
		[Address(RVA = "0x1F2DF4C", Offset = "0x1F2DF4C", VA = "0x1F2DF4C")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x6000235")]
		[Address(RVA = "0x1F2E104", Offset = "0x1F2E104", VA = "0x1F2E104")]
		private float ClampAngle(float angle, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6000236")]
		[Address(RVA = "0x1F2E1B4", Offset = "0x1F2E1B4", VA = "0x1F2E1B4")]
		public CameraControllerFPS()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000044")]
	public enum Axis
	{
		[Token(Token = "0x4000252")]
		X,
		[Token(Token = "0x4000253")]
		Y,
		[Token(Token = "0x4000254")]
		Z
	}
	[Token(Token = "0x2000045")]
	public class AxisTools
	{
		[Token(Token = "0x6000237")]
		[Address(RVA = "0x1F22B28", Offset = "0x1F22B28", VA = "0x1F22B28")]
		public static Vector3 ToVector3(Axis axis)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000238")]
		[Address(RVA = "0x1F22BE0", Offset = "0x1F22BE0", VA = "0x1F22BE0")]
		public static Axis ToAxis(Vector3 v)
		{
			return default(Axis);
		}

		[Token(Token = "0x6000239")]
		[Address(RVA = "0x1F22C8C", Offset = "0x1F22C8C", VA = "0x1F22C8C")]
		public static Axis GetAxisToPoint(Transform t, Vector3 worldPosition)
		{
			return default(Axis);
		}

		[Token(Token = "0x600023A")]
		[Address(RVA = "0x1F22E70", Offset = "0x1F22E70", VA = "0x1F22E70")]
		public static Axis GetAxisToDirection(Transform t, Vector3 direction)
		{
			return default(Axis);
		}

		[Token(Token = "0x600023B")]
		[Address(RVA = "0x1F22DA8", Offset = "0x1F22DA8", VA = "0x1F22DA8")]
		public static Vector3 GetAxisVectorToPoint(Transform t, Vector3 worldPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600023C")]
		[Address(RVA = "0x1F22F8C", Offset = "0x1F22F8C", VA = "0x1F22F8C")]
		public static Vector3 GetAxisVectorToDirection(Transform t, Vector3 direction)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600023D")]
		[Address(RVA = "0x1F22FD4", Offset = "0x1F22FD4", VA = "0x1F22FD4")]
		public static Vector3 GetAxisVectorToDirection(Quaternion r, Vector3 direction)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600023E")]
		[Address(RVA = "0x1F2329C", Offset = "0x1F2329C", VA = "0x1F2329C")]
		public AxisTools()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000046")]
	public class BipedLimbOrientations
	{
		[Serializable]
		[Token(Token = "0x20001F2")]
		public class LimbOrientation
		{
			[Token(Token = "0x4000CC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 upperBoneForwardAxis;

			[Token(Token = "0x4000CC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 lowerBoneForwardAxis;

			[Token(Token = "0x4000CC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 lastBoneLeftAxis;

			[Token(Token = "0x6000CCB")]
			[Address(RVA = "0x1F262C0", Offset = "0x1F262C0", VA = "0x1F262C0")]
			public LimbOrientation(Vector3 upperBoneForwardAxis, Vector3 lowerBoneForwardAxis, Vector3 lastBoneLeftAxis)
			{
			}
		}

		[Token(Token = "0x4000255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LimbOrientation leftArm;

		[Token(Token = "0x4000256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LimbOrientation rightArm;

		[Token(Token = "0x4000257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LimbOrientation leftLeg;

		[Token(Token = "0x4000258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LimbOrientation rightLeg;

		[Token(Token = "0x1700007F")]
		public static BipedLimbOrientations UMA
		{
			[Token(Token = "0x6000240")]
			[Address(RVA = "0x1F26048", Offset = "0x1F26048", VA = "0x1F26048")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000080")]
		public static BipedLimbOrientations MaxBiped
		{
			[Token(Token = "0x6000241")]
			[Address(RVA = "0x1F26338", Offset = "0x1F26338", VA = "0x1F26338")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600023F")]
		[Address(RVA = "0x1F25FC8", Offset = "0x1F25FC8", VA = "0x1F25FC8")]
		public BipedLimbOrientations(LimbOrientation leftArm, LimbOrientation rightArm, LimbOrientation leftLeg, LimbOrientation rightLeg)
		{
		}
	}
	[Token(Token = "0x2000047")]
	public static class BipedNaming
	{
		[Serializable]
		[Token(Token = "0x20001F3")]
		public enum BoneType
		{
			[Token(Token = "0x4000CC9")]
			Unassigned,
			[Token(Token = "0x4000CCA")]
			Spine,
			[Token(Token = "0x4000CCB")]
			Head,
			[Token(Token = "0x4000CCC")]
			Arm,
			[Token(Token = "0x4000CCD")]
			Leg,
			[Token(Token = "0x4000CCE")]
			Tail,
			[Token(Token = "0x4000CCF")]
			Eye
		}

		[Serializable]
		[Token(Token = "0x20001F4")]
		public enum BoneSide
		{
			[Token(Token = "0x4000CD1")]
			Center,
			[Token(Token = "0x4000CD2")]
			Left,
			[Token(Token = "0x4000CD3")]
			Right
		}

		[Token(Token = "0x4000259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string[] typeLeft;

		[Token(Token = "0x400025A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string[] typeRight;

		[Token(Token = "0x400025B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static string[] typeSpine;

		[Token(Token = "0x400025C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static string[] typeHead;

		[Token(Token = "0x400025D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static string[] typeArm;

		[Token(Token = "0x400025E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static string[] typeLeg;

		[Token(Token = "0x400025F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static string[] typeTail;

		[Token(Token = "0x4000260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static string[] typeEye;

		[Token(Token = "0x4000261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static string[] typeExclude;

		[Token(Token = "0x4000262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static string[] typeExcludeSpine;

		[Token(Token = "0x4000263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static string[] typeExcludeHead;

		[Token(Token = "0x4000264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static string[] typeExcludeArm;

		[Token(Token = "0x4000265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static string[] typeExcludeLeg;

		[Token(Token = "0x4000266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static string[] typeExcludeTail;

		[Token(Token = "0x4000267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static string[] typeExcludeEye;

		[Token(Token = "0x4000268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static string[] pelvis;

		[Token(Token = "0x4000269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static string[] hand;

		[Token(Token = "0x400026A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static string[] foot;

		[Token(Token = "0x6000242")]
		[Address(RVA = "0x1F265B0", Offset = "0x1F265B0", VA = "0x1F265B0")]
		public static Transform[] GetBonesOfType(BoneType boneType, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x6000243")]
		[Address(RVA = "0x1F268B8", Offset = "0x1F268B8", VA = "0x1F268B8")]
		public static Transform[] GetBonesOfSide(BoneSide boneSide, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x6000244")]
		[Address(RVA = "0x1F26B10", Offset = "0x1F26B10", VA = "0x1F26B10")]
		public static Transform[] GetBonesOfTypeAndSide(BoneType boneType, BoneSide boneSide, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x6000245")]
		[Address(RVA = "0x1F26B94", Offset = "0x1F26B94", VA = "0x1F26B94")]
		public static Transform GetFirstBoneOfTypeAndSide(BoneType boneType, BoneSide boneSide, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x6000246")]
		[Address(RVA = "0x1F26C40", Offset = "0x1F26C40", VA = "0x1F26C40")]
		public static Transform GetNamingMatch(Transform[] transforms, params string[][] namings)
		{
			return null;
		}

		[Token(Token = "0x6000247")]
		[Address(RVA = "0x1F26768", Offset = "0x1F26768", VA = "0x1F26768")]
		public static BoneType GetBoneType(string boneName)
		{
			return default(BoneType);
		}

		[Token(Token = "0x6000248")]
		[Address(RVA = "0x1F26A70", Offset = "0x1F26A70", VA = "0x1F26A70")]
		public static BoneSide GetBoneSide(string boneName)
		{
			return default(BoneSide);
		}

		[Token(Token = "0x6000249")]
		[Address(RVA = "0x1F27480", Offset = "0x1F27480", VA = "0x1F27480")]
		public static Transform GetBone(Transform[] transforms, BoneType boneType, BoneSide boneSide = BoneSide.Center, params string[][] namings)
		{
			return null;
		}

		[Token(Token = "0x600024A")]
		[Address(RVA = "0x1F27298", Offset = "0x1F27298", VA = "0x1F27298")]
		private static bool isLeft(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x600024B")]
		[Address(RVA = "0x1F2738C", Offset = "0x1F2738C", VA = "0x1F2738C")]
		private static bool isRight(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x600024C")]
		[Address(RVA = "0x1F26E60", Offset = "0x1F26E60", VA = "0x1F26E60")]
		private static bool isSpine(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x600024D")]
		[Address(RVA = "0x1F26F14", Offset = "0x1F26F14", VA = "0x1F26F14")]
		private static bool isHead(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x600024E")]
		[Address(RVA = "0x1F26FC8", Offset = "0x1F26FC8", VA = "0x1F26FC8")]
		private static bool isArm(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x600024F")]
		[Address(RVA = "0x1F2707C", Offset = "0x1F2707C", VA = "0x1F2707C")]
		private static bool isLeg(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000250")]
		[Address(RVA = "0x1F27130", Offset = "0x1F27130", VA = "0x1F27130")]
		private static bool isTail(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000251")]
		[Address(RVA = "0x1F271E4", Offset = "0x1F271E4", VA = "0x1F271E4")]
		private static bool isEye(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000252")]
		[Address(RVA = "0x1F27694", Offset = "0x1F27694", VA = "0x1F27694")]
		private static bool isTypeExclude(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000253")]
		[Address(RVA = "0x1F26D74", Offset = "0x1F26D74", VA = "0x1F26D74")]
		private static bool matchesNaming(string boneName, string[] namingConvention)
		{
			return default(bool);
		}

		[Token(Token = "0x6000254")]
		[Address(RVA = "0x1F27604", Offset = "0x1F27604", VA = "0x1F27604")]
		private static bool excludesNaming(string boneName, string[] namingConvention)
		{
			return default(bool);
		}

		[Token(Token = "0x6000255")]
		[Address(RVA = "0x1F27704", Offset = "0x1F27704", VA = "0x1F27704")]
		private static bool matchesLastLetter(string boneName, string[] namingConvention)
		{
			return default(bool);
		}

		[Token(Token = "0x6000256")]
		[Address(RVA = "0x1F277DC", Offset = "0x1F277DC", VA = "0x1F277DC")]
		private static bool LastLetterIs(string boneName, string letter)
		{
			return default(bool);
		}

		[Token(Token = "0x6000257")]
		[Address(RVA = "0x1F27588", Offset = "0x1F27588", VA = "0x1F27588")]
		private static string firstLetter(string boneName)
		{
			return null;
		}

		[Token(Token = "0x6000258")]
		[Address(RVA = "0x1F27510", Offset = "0x1F27510", VA = "0x1F27510")]
		private static string lastLetter(string boneName)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000048")]
	public class BipedReferences
	{
		[Token(Token = "0x20001F5")]
		public struct AutoDetectParams
		{
			[Token(Token = "0x4000CD4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool legsParentInSpine;

			[Token(Token = "0x4000CD5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
			public bool includeEyes;

			[Token(Token = "0x17000179")]
			public static AutoDetectParams Default
			{
				[Token(Token = "0x6000CCD")]
				[Address(RVA = "0x1F2D2A8", Offset = "0x1F2D2A8", VA = "0x1F2D2A8")]
				get
				{
					return default(AutoDetectParams);
				}
			}

			[Token(Token = "0x6000CCC")]
			[Address(RVA = "0x1F2D294", Offset = "0x1F2D294", VA = "0x1F2D294")]
			public AutoDetectParams(bool legsParentInSpine, bool includeEyes)
			{
			}
		}

		[Token(Token = "0x400026B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform root;

		[Token(Token = "0x400026C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform pelvis;

		[Token(Token = "0x400026D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform leftThigh;

		[Token(Token = "0x400026E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform leftCalf;

		[Token(Token = "0x400026F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform leftFoot;

		[Token(Token = "0x4000270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform rightThigh;

		[Token(Token = "0x4000271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform rightCalf;

		[Token(Token = "0x4000272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform rightFoot;

		[Token(Token = "0x4000273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform leftUpperArm;

		[Token(Token = "0x4000274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform leftForearm;

		[Token(Token = "0x4000275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform leftHand;

		[Token(Token = "0x4000276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform rightUpperArm;

		[Token(Token = "0x4000277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform rightForearm;

		[Token(Token = "0x4000278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform rightHand;

		[Token(Token = "0x4000279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Transform head;

		[Token(Token = "0x400027A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform[] spine;

		[Token(Token = "0x400027B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Transform[] eyes;

		[Token(Token = "0x17000081")]
		public virtual bool isFilled
		{
			[Token(Token = "0x600025A")]
			[Address(RVA = "0x1F29B74", Offset = "0x1F29B74", VA = "0x1F29B74", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000082")]
		public bool isEmpty
		{
			[Token(Token = "0x600025B")]
			[Address(RVA = "0x1F29F60", Offset = "0x1F29F60", VA = "0x1F29F60")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600025C")]
		[Address(RVA = "0x1F29F70", Offset = "0x1F29F70", VA = "0x1F29F70", Slot = "5")]
		public virtual bool IsEmpty(bool includeRoot)
		{
			return default(bool);
		}

		[Token(Token = "0x600025D")]
		[Address(RVA = "0x1F2A39C", Offset = "0x1F2A39C", VA = "0x1F2A39C", Slot = "6")]
		public virtual bool Contains(Transform t, bool ignoreRoot = false)
		{
			return default(bool);
		}

		[Token(Token = "0x600025E")]
		[Address(RVA = "0x1F2A7D4", Offset = "0x1F2A7D4", VA = "0x1F2A7D4")]
		public static bool AutoDetectReferences(ref BipedReferences references, Transform root, AutoDetectParams autoDetectParams)
		{
			return default(bool);
		}

		[Token(Token = "0x600025F")]
		[Address(RVA = "0x1F2AEE0", Offset = "0x1F2AEE0", VA = "0x1F2AEE0")]
		public static void DetectReferencesByNaming(ref BipedReferences references, Transform root, AutoDetectParams autoDetectParams)
		{
		}

		[Token(Token = "0x6000260")]
		[Address(RVA = "0x1F2AA50", Offset = "0x1F2AA50", VA = "0x1F2AA50")]
		public static void AssignHumanoidReferences(ref BipedReferences references, Animator animator, AutoDetectParams autoDetectParams)
		{
		}

		[Token(Token = "0x6000261")]
		[Address(RVA = "0x1F2B714", Offset = "0x1F2B714", VA = "0x1F2B714")]
		public static bool SetupError(BipedReferences references, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000262")]
		[Address(RVA = "0x1F2B814", Offset = "0x1F2B814", VA = "0x1F2B814")]
		public static bool SetupWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000263")]
		[Address(RVA = "0x1F2BDC8", Offset = "0x1F2BDC8", VA = "0x1F2BDC8")]
		private static bool IsNeckBone(Transform bone, Transform leftUpperArm)
		{
			return default(bool);
		}

		[Token(Token = "0x6000264")]
		[Address(RVA = "0x1F2BBB8", Offset = "0x1F2BBB8", VA = "0x1F2BBB8")]
		private static bool AddBoneToEyes(Transform bone, ref BipedReferences references, AutoDetectParams autoDetectParams)
		{
			return default(bool);
		}

		[Token(Token = "0x6000265")]
		[Address(RVA = "0x1F2BA30", Offset = "0x1F2BA30", VA = "0x1F2BA30")]
		private static bool AddBoneToSpine(Transform bone, ref BipedReferences references, AutoDetectParams autoDetectParams)
		{
			return default(bool);
		}

		[Token(Token = "0x6000266")]
		[Address(RVA = "0x1F2B8B4", Offset = "0x1F2B8B4", VA = "0x1F2B8B4")]
		private static void DetectLimb(BipedNaming.BoneType boneType, BipedNaming.BoneSide boneSide, ref Transform firstBone, ref Transform secondBone, ref Transform lastBone, Transform[] transforms)
		{
		}

		[Token(Token = "0x6000267")]
		[Address(RVA = "0x1F2BCBC", Offset = "0x1F2BCBC", VA = "0x1F2BCBC")]
		private static void AddBoneToHierarchy(ref Transform[] bones, Transform transform)
		{
		}

		[Token(Token = "0x6000268")]
		[Address(RVA = "0x1F2BEC4", Offset = "0x1F2BEC4", VA = "0x1F2BEC4")]
		private static bool LimbError(Transform bone1, Transform bone2, Transform bone3, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000269")]
		[Address(RVA = "0x1F2CA28", Offset = "0x1F2CA28", VA = "0x1F2CA28")]
		private static bool LimbWarning(Transform bone1, Transform bone2, Transform bone3, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x600026A")]
		[Address(RVA = "0x1F2C4F4", Offset = "0x1F2C4F4", VA = "0x1F2C4F4")]
		private static bool SpineError(BipedReferences references, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x600026B")]
		[Address(RVA = "0x1F2CD70", Offset = "0x1F2CD70", VA = "0x1F2CD70")]
		private static bool SpineWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x600026C")]
		[Address(RVA = "0x1F2C840", Offset = "0x1F2C840", VA = "0x1F2C840")]
		private static bool EyesError(BipedReferences references, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x600026D")]
		[Address(RVA = "0x1F2CD78", Offset = "0x1F2CD78", VA = "0x1F2CD78")]
		private static bool EyesWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x600026E")]
		[Address(RVA = "0x1F2CD80", Offset = "0x1F2CD80", VA = "0x1F2CD80")]
		private static bool RootHeightWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x600026F")]
		[Address(RVA = "0x1F2CF4C", Offset = "0x1F2CF4C", VA = "0x1F2CF4C")]
		private static bool FacingAxisWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000270")]
		[Address(RVA = "0x1F2D170", Offset = "0x1F2D170", VA = "0x1F2D170")]
		private static float GetVerticalOffset(Vector3 p1, Vector3 p2, Quaternion rotation)
		{
			return default(float);
		}

		[Token(Token = "0x6000271")]
		[Address(RVA = "0x1F2A9C8", Offset = "0x1F2A9C8", VA = "0x1F2A9C8")]
		public BipedReferences()
		{
		}
	}
	[Token(Token = "0x2000049")]
	public class Comments : MonoBehaviour
	{
		[Token(Token = "0x400027C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "MultilineAttribute", RVA = "0x15D6988", Offset = "0x15D6988")]
		public string text;

		[Token(Token = "0x6000272")]
		[Address(RVA = "0x1F2E1D0", Offset = "0x1F2E1D0", VA = "0x1F2E1D0")]
		public Comments()
		{
		}
	}
	[Token(Token = "0x200004A")]
	public class DemoGUIMessage : MonoBehaviour
	{
		[Token(Token = "0x400027D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string text;

		[Token(Token = "0x400027E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color color;

		[Token(Token = "0x6000273")]
		[Address(RVA = "0x1F2E1D8", Offset = "0x1F2E1D8", VA = "0x1F2E1D8")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000274")]
		[Address(RVA = "0x1F2E318", Offset = "0x1F2E318", VA = "0x1F2E318")]
		public DemoGUIMessage()
		{
		}
	}
	[Token(Token = "0x200004B")]
	public class Hierarchy
	{
		[Token(Token = "0x6000275")]
		[Address(RVA = "0x28CA47C", Offset = "0x28CA47C", VA = "0x28CA47C")]
		public static bool HierarchyIsValid(Transform[] bones)
		{
			return default(bool);
		}

		[Token(Token = "0x6000276")]
		[Address(RVA = "0x28CA67C", Offset = "0x28CA67C", VA = "0x28CA67C")]
		public static UnityEngine.Object ContainsDuplicate(UnityEngine.Object[] objects)
		{
			return null;
		}

		[Token(Token = "0x6000277")]
		[Address(RVA = "0x28CA514", Offset = "0x28CA514", VA = "0x28CA514")]
		public static bool IsAncestor(Transform transform, Transform ancestor)
		{
			return default(bool);
		}

		[Token(Token = "0x6000278")]
		[Address(RVA = "0x28CA7A0", Offset = "0x28CA7A0", VA = "0x28CA7A0")]
		public static bool ContainsChild(Transform transform, Transform child)
		{
			return default(bool);
		}

		[Token(Token = "0x6000279")]
		[Address(RVA = "0x28CA8C4", Offset = "0x28CA8C4", VA = "0x28CA8C4")]
		public static void AddAncestors(Transform transform, Transform blocker, ref Transform[] array)
		{
		}

		[Token(Token = "0x600027A")]
		[Address(RVA = "0x28CAB74", Offset = "0x28CAB74", VA = "0x28CAB74")]
		public static Transform GetAncestor(Transform transform, int minChildCount)
		{
			return null;
		}

		[Token(Token = "0x600027B")]
		[Address(RVA = "0x28CAC90", Offset = "0x28CAC90", VA = "0x28CAC90")]
		public static Transform GetFirstCommonAncestor(Transform t1, Transform t2)
		{
			return null;
		}

		[Token(Token = "0x600027C")]
		[Address(RVA = "0x28CAE18", Offset = "0x28CAE18", VA = "0x28CAE18")]
		public static Transform GetFirstCommonAncestor(Transform[] transforms)
		{
			return null;
		}

		[Token(Token = "0x600027D")]
		[Address(RVA = "0x28CB1AC", Offset = "0x28CB1AC", VA = "0x28CB1AC")]
		public static Transform GetFirstCommonAncestorRecursive(Transform transform, Transform[] transforms)
		{
			return null;
		}

		[Token(Token = "0x600027E")]
		[Address(RVA = "0x28CAF98", Offset = "0x28CAF98", VA = "0x28CAF98")]
		public static bool IsCommonAncestor(Transform transform, Transform[] transforms)
		{
			return default(bool);
		}

		[Token(Token = "0x600027F")]
		[Address(RVA = "0x28CB34C", Offset = "0x28CB34C", VA = "0x28CB34C")]
		public Hierarchy()
		{
		}
	}
	[Token(Token = "0x200004C")]
	public class InspectorComment : PropertyAttribute
	{
		[Token(Token = "0x400027F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string name;

		[Token(Token = "0x4000280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string color;

		[Token(Token = "0x6000280")]
		[Address(RVA = "0x2FD3A10", Offset = "0x2FD3A10", VA = "0x2FD3A10")]
		public InspectorComment(string name)
		{
		}

		[Token(Token = "0x6000281")]
		[Address(RVA = "0x2FD3AA0", Offset = "0x2FD3AA0", VA = "0x2FD3AA0")]
		public InspectorComment(string name, string color)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200004D")]
	public enum InterpolationMode
	{
		[Token(Token = "0x4000282")]
		None,
		[Token(Token = "0x4000283")]
		InOutCubic,
		[Token(Token = "0x4000284")]
		InOutQuintic,
		[Token(Token = "0x4000285")]
		InOutSine,
		[Token(Token = "0x4000286")]
		InQuintic,
		[Token(Token = "0x4000287")]
		InQuartic,
		[Token(Token = "0x4000288")]
		InCubic,
		[Token(Token = "0x4000289")]
		InQuadratic,
		[Token(Token = "0x400028A")]
		InElastic,
		[Token(Token = "0x400028B")]
		InElasticSmall,
		[Token(Token = "0x400028C")]
		InElasticBig,
		[Token(Token = "0x400028D")]
		InSine,
		[Token(Token = "0x400028E")]
		InBack,
		[Token(Token = "0x400028F")]
		OutQuintic,
		[Token(Token = "0x4000290")]
		OutQuartic,
		[Token(Token = "0x4000291")]
		OutCubic,
		[Token(Token = "0x4000292")]
		OutInCubic,
		[Token(Token = "0x4000293")]
		OutInQuartic,
		[Token(Token = "0x4000294")]
		OutElastic,
		[Token(Token = "0x4000295")]
		OutElasticSmall,
		[Token(Token = "0x4000296")]
		OutElasticBig,
		[Token(Token = "0x4000297")]
		OutSine,
		[Token(Token = "0x4000298")]
		OutBack,
		[Token(Token = "0x4000299")]
		OutBackCubic,
		[Token(Token = "0x400029A")]
		OutBackQuartic,
		[Token(Token = "0x400029B")]
		BackInCubic,
		[Token(Token = "0x400029C")]
		BackInQuartic
	}
	[Token(Token = "0x200004E")]
	public class Interp
	{
		[Token(Token = "0x6000282")]
		[Address(RVA = "0x2FD3B34", Offset = "0x2FD3B34", VA = "0x2FD3B34")]
		public static float Float(float t, InterpolationMode mode)
		{
			return default(float);
		}

		[Token(Token = "0x6000283")]
		[Address(RVA = "0x2FD459C", Offset = "0x2FD459C", VA = "0x2FD459C")]
		public static Vector3 V3(Vector3 v1, Vector3 v2, float t, InterpolationMode mode)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000284")]
		[Address(RVA = "0x2FD46A4", Offset = "0x2FD46A4", VA = "0x2FD46A4")]
		public static float LerpValue(float value, float target, float increaseSpeed, float decreaseSpeed)
		{
			return default(float);
		}

		[Token(Token = "0x6000285")]
		[Address(RVA = "0x2FD3EA0", Offset = "0x2FD3EA0", VA = "0x2FD3EA0")]
		private static float None(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000286")]
		[Address(RVA = "0x2FD3EAC", Offset = "0x2FD3EAC", VA = "0x2FD3EAC")]
		private static float InOutCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000287")]
		[Address(RVA = "0x2FD3ED0", Offset = "0x2FD3ED0", VA = "0x2FD3ED0")]
		private static float InOutQuintic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000288")]
		[Address(RVA = "0x2FD3F0C", Offset = "0x2FD3F0C", VA = "0x2FD3F0C")]
		private static float InQuintic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000289")]
		[Address(RVA = "0x2FD3F24", Offset = "0x2FD3F24", VA = "0x2FD3F24")]
		private static float InQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600028A")]
		[Address(RVA = "0x2FD3F38", Offset = "0x2FD3F38", VA = "0x2FD3F38")]
		private static float InCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600028B")]
		[Address(RVA = "0x2FD3F4C", Offset = "0x2FD3F4C", VA = "0x2FD3F4C")]
		private static float InQuadratic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600028C")]
		[Address(RVA = "0x2FD3F5C", Offset = "0x2FD3F5C", VA = "0x2FD3F5C")]
		private static float OutQuintic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600028D")]
		[Address(RVA = "0x2FD3FA4", Offset = "0x2FD3FA4", VA = "0x2FD3FA4")]
		private static float OutQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600028E")]
		[Address(RVA = "0x2FD3FDC", Offset = "0x2FD3FDC", VA = "0x2FD3FDC")]
		private static float OutCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600028F")]
		[Address(RVA = "0x2FD4004", Offset = "0x2FD4004", VA = "0x2FD4004")]
		private static float OutInCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000290")]
		[Address(RVA = "0x2FD47A0", Offset = "0x2FD47A0", VA = "0x2FD47A0")]
		private static float OutInQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000291")]
		[Address(RVA = "0x2FD4038", Offset = "0x2FD4038", VA = "0x2FD4038")]
		private static float BackInCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000292")]
		[Address(RVA = "0x2FD4060", Offset = "0x2FD4060", VA = "0x2FD4060")]
		private static float BackInQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000293")]
		[Address(RVA = "0x2FD4090", Offset = "0x2FD4090", VA = "0x2FD4090")]
		private static float OutBackCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000294")]
		[Address(RVA = "0x2FD40C4", Offset = "0x2FD40C4", VA = "0x2FD40C4")]
		private static float OutBackQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000295")]
		[Address(RVA = "0x2FD4108", Offset = "0x2FD4108", VA = "0x2FD4108")]
		private static float OutElasticSmall(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000296")]
		[Address(RVA = "0x2FD416C", Offset = "0x2FD416C", VA = "0x2FD416C")]
		private static float OutElasticBig(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000297")]
		[Address(RVA = "0x2FD41D0", Offset = "0x2FD41D0", VA = "0x2FD41D0")]
		private static float InElasticSmall(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000298")]
		[Address(RVA = "0x2FD4224", Offset = "0x2FD4224", VA = "0x2FD4224")]
		private static float InElasticBig(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000299")]
		[Address(RVA = "0x2FD4278", Offset = "0x2FD4278", VA = "0x2FD4278")]
		private static float InSine(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600029A")]
		[Address(RVA = "0x2FD4310", Offset = "0x2FD4310", VA = "0x2FD4310")]
		private static float OutSine(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600029B")]
		[Address(RVA = "0x2FD43A4", Offset = "0x2FD43A4", VA = "0x2FD43A4")]
		private static float InOutSine(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600029C")]
		[Address(RVA = "0x2FD47D4", Offset = "0x2FD47D4", VA = "0x2FD47D4")]
		private static float InElastic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600029D")]
		[Address(RVA = "0x2FD4448", Offset = "0x2FD4448", VA = "0x2FD4448")]
		private static float OutElastic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600029E")]
		[Address(RVA = "0x2FD452C", Offset = "0x2FD452C", VA = "0x2FD452C")]
		private static float InBack(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600029F")]
		[Address(RVA = "0x2FD455C", Offset = "0x2FD455C", VA = "0x2FD455C")]
		private static float OutBack(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002A0")]
		[Address(RVA = "0x2FD48BC", Offset = "0x2FD48BC", VA = "0x2FD48BC")]
		public Interp()
		{
		}
	}
	[Token(Token = "0x200004F")]
	public class LargeHeader : PropertyAttribute
	{
		[Token(Token = "0x400029D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string name;

		[Token(Token = "0x400029E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string color;

		[Token(Token = "0x60002A1")]
		[Address(RVA = "0x2FD48C4", Offset = "0x2FD48C4", VA = "0x2FD48C4")]
		public LargeHeader(string name)
		{
		}

		[Token(Token = "0x60002A2")]
		[Address(RVA = "0x2FD4954", Offset = "0x2FD4954", VA = "0x2FD4954")]
		public LargeHeader(string name, string color)
		{
		}
	}
	[Token(Token = "0x2000050")]
	public static class LayerMaskExtensions
	{
		[Token(Token = "0x60002A3")]
		[Address(RVA = "0x2FD49E8", Offset = "0x2FD49E8", VA = "0x2FD49E8")]
		public static bool Contains(LayerMask mask, int layer)
		{
			return default(bool);
		}

		[Token(Token = "0x60002A4")]
		[Address(RVA = "0x2FD4A40", Offset = "0x2FD4A40", VA = "0x2FD4A40")]
		public static LayerMask Create(params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60002A5")]
		[Address(RVA = "0x2FD4B0C", Offset = "0x2FD4B0C", VA = "0x2FD4B0C")]
		public static LayerMask Create(params int[] layerNumbers)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60002A6")]
		[Address(RVA = "0x2FD4A58", Offset = "0x2FD4A58", VA = "0x2FD4A58")]
		public static LayerMask NamesToMask(params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60002A7")]
		[Address(RVA = "0x2FD4B24", Offset = "0x2FD4B24", VA = "0x2FD4B24")]
		public static LayerMask LayerNumbersToMask(params int[] layerNumbers)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60002A8")]
		[Address(RVA = "0x2FD4BC8", Offset = "0x2FD4BC8", VA = "0x2FD4BC8")]
		public static LayerMask Inverse(this LayerMask original)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60002A9")]
		[Address(RVA = "0x2FD4BF4", Offset = "0x2FD4BF4", VA = "0x2FD4BF4")]
		public static LayerMask AddToMask(this LayerMask original, params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60002AA")]
		[Address(RVA = "0x2FD4C44", Offset = "0x2FD4C44", VA = "0x2FD4C44")]
		public static LayerMask RemoveFromMask(this LayerMask original, params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60002AB")]
		[Address(RVA = "0x2FD4CB0", Offset = "0x2FD4CB0", VA = "0x2FD4CB0")]
		public static string[] MaskToNames(this LayerMask original)
		{
			return null;
		}

		[Token(Token = "0x60002AC")]
		[Address(RVA = "0x2FD4DA4", Offset = "0x2FD4DA4", VA = "0x2FD4DA4")]
		public static int[] MaskToNumbers(this LayerMask original)
		{
			return null;
		}

		[Token(Token = "0x60002AD")]
		[Address(RVA = "0x2FD4E7C", Offset = "0x2FD4E7C", VA = "0x2FD4E7C")]
		public static string MaskToString(this LayerMask original)
		{
			return null;
		}

		[Token(Token = "0x60002AE")]
		[Address(RVA = "0x2FD4EDC", Offset = "0x2FD4EDC", VA = "0x2FD4EDC")]
		public static string MaskToString(this LayerMask original, string delimiter)
		{
			return null;
		}
	}
	[Token(Token = "0x2000051")]
	public static class QuaTools
	{
		[Token(Token = "0x60002AF")]
		[Address(RVA = "0x2FD4F0C", Offset = "0x2FD4F0C", VA = "0x2FD4F0C")]
		public static Quaternion Lerp(Quaternion fromRotation, Quaternion toRotation, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60002B0")]
		[Address(RVA = "0x2FD5058", Offset = "0x2FD5058", VA = "0x2FD5058")]
		public static Quaternion Slerp(Quaternion fromRotation, Quaternion toRotation, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60002B1")]
		[Address(RVA = "0x2FD51A4", Offset = "0x2FD51A4", VA = "0x2FD51A4")]
		public static Quaternion LinearBlend(Quaternion q, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60002B2")]
		[Address(RVA = "0x2FD52B8", Offset = "0x2FD52B8", VA = "0x2FD52B8")]
		public static Quaternion SphericalBlend(Quaternion q, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60002B3")]
		[Address(RVA = "0x2FD53CC", Offset = "0x2FD53CC", VA = "0x2FD53CC")]
		public static Quaternion FromToAroundAxis(Vector3 fromDirection, Vector3 toDirection, Vector3 axis)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60002B4")]
		[Address(RVA = "0x2FD5558", Offset = "0x2FD5558", VA = "0x2FD5558")]
		public static Quaternion RotationToLocalSpace(Quaternion space, Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60002B5")]
		[Address(RVA = "0x2FD5628", Offset = "0x2FD5628", VA = "0x2FD5628")]
		public static Quaternion FromToRotation(Quaternion from, Quaternion to)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60002B6")]
		[Address(RVA = "0x2FD577C", Offset = "0x2FD577C", VA = "0x2FD577C")]
		public static Vector3 GetAxis(Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60002B7")]
		[Address(RVA = "0x2FD5A00", Offset = "0x2FD5A00", VA = "0x2FD5A00")]
		public static Quaternion ClampRotation(Quaternion rotation, float clampWeight, int clampSmoothing)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60002B8")]
		[Address(RVA = "0x2FD5C14", Offset = "0x2FD5C14", VA = "0x2FD5C14")]
		public static float ClampAngle(float angle, float clampWeight, int clampSmoothing)
		{
			return default(float);
		}

		[Token(Token = "0x60002B9")]
		[Address(RVA = "0x2FD5D94", Offset = "0x2FD5D94", VA = "0x2FD5D94")]
		public static Quaternion MatchRotation(Quaternion targetRotation, Vector3 targetforwardAxis, Vector3 targetUpAxis, Vector3 forwardAxis, Vector3 upAxis)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60002BA")]
		[Address(RVA = "0x2FD5F04", Offset = "0x2FD5F04", VA = "0x2FD5F04")]
		public static Vector3 ToBiPolar(Vector3 euler)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60002BB")]
		[Address(RVA = "0x2FD6014", Offset = "0x2FD6014", VA = "0x2FD6014")]
		public static float ToBiPolar(float angle)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000052")]
	public abstract class Singleton<T> : MonoBehaviour where T : Singleton<T>
	{
		[Token(Token = "0x400029F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static T sInstance;

		[Token(Token = "0x17000083")]
		public static T instance
		{
			[Token(Token = "0x60002BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002BD")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60002BE")]
		protected Singleton()
		{
		}
	}
	[Token(Token = "0x2000053")]
	public class SolverManager : MonoBehaviour
	{
		[Token(Token = "0x40002A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D6998", Offset = "0x15D6998")]
		public bool fixTransforms;

		[Token(Token = "0x40002A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator animator;

		[Token(Token = "0x40002A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Animation legacy;

		[Token(Token = "0x40002A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool updateFrame;

		[Token(Token = "0x40002A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool componentInitiated;

		[Token(Token = "0x40002A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool skipSolverUpdate;

		[Token(Token = "0x17000084")]
		private bool animatePhysics
		{
			[Token(Token = "0x60002C6")]
			[Address(RVA = "0x2FD61A8", Offset = "0x2FD61A8", VA = "0x2FD61A8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000085")]
		private bool isAnimated
		{
			[Token(Token = "0x60002CA")]
			[Address(RVA = "0x2FD64DC", Offset = "0x2FD64DC", VA = "0x2FD64DC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60002C0")]
		[Address(RVA = "0x2FD6070", Offset = "0x2FD6070", VA = "0x2FD6070")]
		public void Disable()
		{
		}

		[Token(Token = "0x60002C1")]
		[Address(RVA = "0x2FD6108", Offset = "0x2FD6108", VA = "0x2FD6108", Slot = "4")]
		protected virtual void InitiateSolver()
		{
		}

		[Token(Token = "0x60002C2")]
		[Address(RVA = "0x2FD610C", Offset = "0x2FD610C", VA = "0x2FD610C", Slot = "5")]
		protected virtual void UpdateSolver()
		{
		}

		[Token(Token = "0x60002C3")]
		[Address(RVA = "0x2FD6110", Offset = "0x2FD6110", VA = "0x2FD6110", Slot = "6")]
		protected virtual void FixTransforms()
		{
		}

		[Token(Token = "0x60002C4")]
		[Address(RVA = "0x2FD6114", Offset = "0x2FD6114", VA = "0x2FD6114")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60002C5")]
		[Address(RVA = "0x2FD61A4", Offset = "0x2FD61A4", VA = "0x2FD61A4")]
		private void Start()
		{
		}

		[Token(Token = "0x60002C7")]
		[Address(RVA = "0x2FD614C", Offset = "0x2FD614C", VA = "0x2FD614C")]
		private void Initiate()
		{
		}

		[Token(Token = "0x60002C8")]
		[Address(RVA = "0x2FD6490", Offset = "0x2FD6490", VA = "0x2FD6490")]
		private void Update()
		{
		}

		[Token(Token = "0x60002C9")]
		[Address(RVA = "0x2FD6298", Offset = "0x2FD6298", VA = "0x2FD6298")]
		private void FindAnimatorRecursive(Transform t, bool findInChildren)
		{
		}

		[Token(Token = "0x60002CB")]
		[Address(RVA = "0x2FD6598", Offset = "0x2FD6598", VA = "0x2FD6598")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60002CC")]
		[Address(RVA = "0x2FD65F4", Offset = "0x2FD65F4", VA = "0x2FD65F4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60002CD")]
		[Address(RVA = "0x2FD6650", Offset = "0x2FD6650", VA = "0x2FD6650")]
		public void UpdateSolverExternal()
		{
		}

		[Token(Token = "0x60002CE")]
		[Address(RVA = "0x2FD6698", Offset = "0x2FD6698", VA = "0x2FD6698")]
		public SolverManager()
		{
		}
	}
	[Token(Token = "0x2000054")]
	public class TriggerEventBroadcaster : MonoBehaviour
	{
		[Token(Token = "0x40002A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject target;

		[Token(Token = "0x60002CF")]
		[Address(RVA = "0x2FD6718", Offset = "0x2FD6718", VA = "0x2FD6718")]
		private void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x60002D0")]
		[Address(RVA = "0x2FD67D0", Offset = "0x2FD67D0", VA = "0x2FD67D0")]
		private void OnTriggerStay(Collider collider)
		{
		}

		[Token(Token = "0x60002D1")]
		[Address(RVA = "0x2FD6888", Offset = "0x2FD6888", VA = "0x2FD6888")]
		private void OnTriggerExit(Collider collider)
		{
		}

		[Token(Token = "0x60002D2")]
		[Address(RVA = "0x2FD6940", Offset = "0x2FD6940", VA = "0x2FD6940")]
		public TriggerEventBroadcaster()
		{
		}
	}
	[Token(Token = "0x2000055")]
	public static class V3Tools
	{
		[Token(Token = "0x60002D3")]
		[Address(RVA = "0x2FD6948", Offset = "0x2FD6948", VA = "0x2FD6948")]
		public static Vector3 Lerp(Vector3 fromVector, Vector3 toVector, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60002D4")]
		[Address(RVA = "0x2FD6A40", Offset = "0x2FD6A40", VA = "0x2FD6A40")]
		public static Vector3 Slerp(Vector3 fromVector, Vector3 toVector, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60002D5")]
		[Address(RVA = "0x2FD6B38", Offset = "0x2FD6B38", VA = "0x2FD6B38")]
		public static Vector3 ExtractVertical(Vector3 v, Vector3 verticalAxis, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60002D6")]
		[Address(RVA = "0x2FD6C30", Offset = "0x2FD6C30", VA = "0x2FD6C30")]
		public static Vector3 ExtractHorizontal(Vector3 v, Vector3 normal, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60002D7")]
		[Address(RVA = "0x2FD6D30", Offset = "0x2FD6D30", VA = "0x2FD6D30")]
		public static Vector3 ClampDirection(Vector3 direction, Vector3 normalDirection, float clampWeight, int clampSmoothing)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60002D8")]
		[Address(RVA = "0x2FD6F54", Offset = "0x2FD6F54", VA = "0x2FD6F54")]
		public static Vector3 ClampDirection(Vector3 direction, Vector3 normalDirection, float clampWeight, int clampSmoothing, out bool changed)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60002D9")]
		[Address(RVA = "0x2FD7190", Offset = "0x2FD7190", VA = "0x2FD7190")]
		public static Vector3 ClampDirection(Vector3 direction, Vector3 normalDirection, float clampWeight, int clampSmoothing, out float clampValue)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60002DA")]
		[Address(RVA = "0x2FD73E0", Offset = "0x2FD73E0", VA = "0x2FD73E0")]
		public static Vector3 LineToPlane(Vector3 origin, Vector3 direction, Vector3 planeNormal, Vector3 planePoint)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60002DB")]
		[Address(RVA = "0x2FD75E0", Offset = "0x2FD75E0", VA = "0x2FD75E0")]
		public static Vector3 PointToPlane(Vector3 point, Vector3 planePosition, Vector3 planeNormal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60002DC")]
		[Address(RVA = "0x2FD77BC", Offset = "0x2FD77BC", VA = "0x2FD77BC")]
		public static Vector3 TransformPointUnscaled(Transform t, Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60002DD")]
		[Address(RVA = "0x2FD78F0", Offset = "0x2FD78F0", VA = "0x2FD78F0")]
		public static Vector3 InverseTransformPointUnscaled(Transform t, Vector3 point)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x2000056")]
	public static class Warning
	{
		[Token(Token = "0x20001F6")]
		public delegate void Logger(string message);

		[Token(Token = "0x40002A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool logged;

		[Token(Token = "0x60002DE")]
		[Address(RVA = "0x2FD7A48", Offset = "0x2FD7A48", VA = "0x2FD7A48")]
		public static void Log(string message, Logger logger, bool logInEditMode = false)
		{
		}

		[Token(Token = "0x60002DF")]
		[Address(RVA = "0x2FD7E74", Offset = "0x2FD7E74", VA = "0x2FD7E74")]
		public static void Log(string message, Transform context, bool logInEditMode = false)
		{
		}
	}
}
namespace RootMotion.FinalIK
{
	[Token(Token = "0x2000057")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x15D4164", Offset = "0x15D4164")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x15D4164", Offset = "0x15D4164")]
	public class BipedIK : SolverManager
	{
		[Token(Token = "0x40002A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BipedReferences references;

		[Token(Token = "0x40002A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public BipedIKSolvers solvers;

		[Token(Token = "0x60002E0")]
		[Address(RVA = "0x2368B3C", Offset = "0x2368B3C", VA = "0x2368B3C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E2D30", Offset = "0x15E2D30")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x60002E1")]
		[Address(RVA = "0x2368B88", Offset = "0x2368B88", VA = "0x2368B88")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E2D68", Offset = "0x15E2D68")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x60002E2")]
		[Address(RVA = "0x2368BD4", Offset = "0x2368BD4", VA = "0x2368BD4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E2DA0", Offset = "0x15E2DA0")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60002E3")]
		[Address(RVA = "0x2368C20", Offset = "0x2368C20", VA = "0x2368C20")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E2DD8", Offset = "0x15E2DD8")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60002E4")]
		[Address(RVA = "0x2368C6C", Offset = "0x2368C6C", VA = "0x2368C6C")]
		public float GetIKPositionWeight(AvatarIKGoal goal)
		{
			return default(float);
		}

		[Token(Token = "0x60002E5")]
		[Address(RVA = "0x2368D08", Offset = "0x2368D08", VA = "0x2368D08")]
		public float GetIKRotationWeight(AvatarIKGoal goal)
		{
			return default(float);
		}

		[Token(Token = "0x60002E6")]
		[Address(RVA = "0x2368D28", Offset = "0x2368D28", VA = "0x2368D28")]
		public void SetIKPositionWeight(AvatarIKGoal goal, float weight)
		{
		}

		[Token(Token = "0x60002E7")]
		[Address(RVA = "0x2368D58", Offset = "0x2368D58", VA = "0x2368D58")]
		public void SetIKRotationWeight(AvatarIKGoal goal, float weight)
		{
		}

		[Token(Token = "0x60002E8")]
		[Address(RVA = "0x2368D88", Offset = "0x2368D88", VA = "0x2368D88")]
		public void SetIKPosition(AvatarIKGoal goal, Vector3 IKPosition)
		{
		}

		[Token(Token = "0x60002E9")]
		[Address(RVA = "0x2368DC8", Offset = "0x2368DC8", VA = "0x2368DC8")]
		public void SetIKRotation(AvatarIKGoal goal, Quaternion IKRotation)
		{
		}

		[Token(Token = "0x60002EA")]
		[Address(RVA = "0x2368E0C", Offset = "0x2368E0C", VA = "0x2368E0C")]
		public Vector3 GetIKPosition(AvatarIKGoal goal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60002EB")]
		[Address(RVA = "0x2368E30", Offset = "0x2368E30", VA = "0x2368E30")]
		public Quaternion GetIKRotation(AvatarIKGoal goal)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60002EC")]
		[Address(RVA = "0x2368E54", Offset = "0x2368E54", VA = "0x2368E54")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight, float clampWeightHead, float clampWeightEyes)
		{
		}

		[Token(Token = "0x60002ED")]
		[Address(RVA = "0x2368E7C", Offset = "0x2368E7C", VA = "0x2368E7C")]
		public void SetLookAtPosition(Vector3 lookAtPosition)
		{
		}

		[Token(Token = "0x60002EE")]
		[Address(RVA = "0x2368EA8", Offset = "0x2368EA8", VA = "0x2368EA8")]
		public void SetSpinePosition(Vector3 spinePosition)
		{
		}

		[Token(Token = "0x60002EF")]
		[Address(RVA = "0x2368ED4", Offset = "0x2368ED4", VA = "0x2368ED4")]
		public void SetSpineWeight(float weight)
		{
		}

		[Token(Token = "0x60002F0")]
		[Address(RVA = "0x2368C8C", Offset = "0x2368C8C", VA = "0x2368C8C")]
		public IKSolverLimb GetGoalIK(AvatarIKGoal goal)
		{
			return null;
		}

		[Token(Token = "0x60002F1")]
		[Address(RVA = "0x2368EFC", Offset = "0x2368EFC", VA = "0x2368EFC")]
		public void InitiateBipedIK()
		{
		}

		[Token(Token = "0x60002F2")]
		[Address(RVA = "0x2368F08", Offset = "0x2368F08", VA = "0x2368F08")]
		public void UpdateBipedIK()
		{
		}

		[Token(Token = "0x60002F3")]
		[Address(RVA = "0x2368F14", Offset = "0x2368F14", VA = "0x2368F14")]
		public void SetToDefaults()
		{
		}

		[Token(Token = "0x60002F4")]
		[Address(RVA = "0x236923C", Offset = "0x236923C", VA = "0x236923C", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x60002F5")]
		[Address(RVA = "0x23692E4", Offset = "0x23692E4", VA = "0x23692E4", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x60002F6")]
		[Address(RVA = "0x2369630", Offset = "0x2369630", VA = "0x2369630", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x60002F7")]
		[Address(RVA = "0x2369B18", Offset = "0x2369B18", VA = "0x2369B18")]
		public void LogWarning(string message)
		{
		}

		[Token(Token = "0x60002F8")]
		[Address(RVA = "0x2369B4C", Offset = "0x2369B4C", VA = "0x2369B4C")]
		public BipedIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000058")]
	public class BipedIKSolvers
	{
		[Token(Token = "0x40002AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IKSolverLimb leftFoot;

		[Token(Token = "0x40002AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IKSolverLimb rightFoot;

		[Token(Token = "0x40002AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IKSolverLimb leftHand;

		[Token(Token = "0x40002AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IKSolverLimb rightHand;

		[Token(Token = "0x40002AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IKSolverFABRIK spine;

		[Token(Token = "0x40002AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLookAt lookAt;

		[Token(Token = "0x40002B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IKSolverAim aim;

		[Token(Token = "0x40002B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Constraints pelvis;

		[Token(Token = "0x40002B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IKSolverLimb[] _limbs;

		[Token(Token = "0x40002B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private IKSolver[] _ikSolvers;

		[Token(Token = "0x17000086")]
		public IKSolverLimb[] limbs
		{
			[Token(Token = "0x60002F9")]
			[Address(RVA = "0x23690B4", Offset = "0x23690B4", VA = "0x23690B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000087")]
		public IKSolver[] ikSolvers
		{
			[Token(Token = "0x60002FA")]
			[Address(RVA = "0x2369D90", Offset = "0x2369D90", VA = "0x2369D90")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002FB")]
		[Address(RVA = "0x23694B4", Offset = "0x23694B4", VA = "0x23694B4")]
		public void AssignReferences(BipedReferences references)
		{
		}

		[Token(Token = "0x60002FC")]
		[Address(RVA = "0x2369BE8", Offset = "0x2369BE8", VA = "0x2369BE8")]
		public BipedIKSolvers()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000059")]
	public abstract class Constraint
	{
		[Token(Token = "0x40002B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x40002B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float weight;

		[Token(Token = "0x17000088")]
		public bool isValid
		{
			[Token(Token = "0x60002FD")]
			[Address(RVA = "0x236A400", Offset = "0x236A400", VA = "0x236A400")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60002FE")]
		public abstract void UpdateConstraint();

		[Token(Token = "0x60002FF")]
		[Address(RVA = "0x236A470", Offset = "0x236A470", VA = "0x236A470")]
		protected Constraint()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200005A")]
	public class ConstraintPosition : Constraint
	{
		[Token(Token = "0x40002B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 position;

		[Token(Token = "0x6000300")]
		[Address(RVA = "0x236A478", Offset = "0x236A478", VA = "0x236A478", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x6000301")]
		[Address(RVA = "0x236A584", Offset = "0x236A584", VA = "0x236A584")]
		public ConstraintPosition()
		{
		}

		[Token(Token = "0x6000302")]
		[Address(RVA = "0x236A58C", Offset = "0x236A58C", VA = "0x236A58C")]
		public ConstraintPosition(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200005B")]
	public class ConstraintPositionOffset : Constraint
	{
		[Token(Token = "0x40002B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 offset;

		[Token(Token = "0x40002B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 defaultLocalPosition;

		[Token(Token = "0x40002B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 lastLocalPosition;

		[Token(Token = "0x40002BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool initiated;

		[Token(Token = "0x17000089")]
		private bool positionChanged
		{
			[Token(Token = "0x6000306")]
			[Address(RVA = "0x236A75C", Offset = "0x236A75C", VA = "0x236A75C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000303")]
		[Address(RVA = "0x236A5C0", Offset = "0x236A5C0", VA = "0x236A5C0", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x6000304")]
		[Address(RVA = "0x236A818", Offset = "0x236A818", VA = "0x236A818")]
		public ConstraintPositionOffset()
		{
		}

		[Token(Token = "0x6000305")]
		[Address(RVA = "0x236A820", Offset = "0x236A820", VA = "0x236A820")]
		public ConstraintPositionOffset(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200005C")]
	public class ConstraintRotation : Constraint
	{
		[Token(Token = "0x40002BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion rotation;

		[Token(Token = "0x6000307")]
		[Address(RVA = "0x236A854", Offset = "0x236A854", VA = "0x236A854", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x6000308")]
		[Address(RVA = "0x236A97C", Offset = "0x236A97C", VA = "0x236A97C")]
		public ConstraintRotation()
		{
		}

		[Token(Token = "0x6000309")]
		[Address(RVA = "0x236A984", Offset = "0x236A984", VA = "0x236A984")]
		public ConstraintRotation(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200005D")]
	public class ConstraintRotationOffset : Constraint
	{
		[Token(Token = "0x40002BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion offset;

		[Token(Token = "0x40002BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion defaultRotation;

		[Token(Token = "0x40002BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion defaultLocalRotation;

		[Token(Token = "0x40002BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion lastLocalRotation;

		[Token(Token = "0x40002C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Quaternion defaultTargetLocalRotation;

		[Token(Token = "0x40002C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool initiated;

		[Token(Token = "0x1700008A")]
		private bool rotationChanged
		{
			[Token(Token = "0x600030D")]
			[Address(RVA = "0x236AB58", Offset = "0x236AB58", VA = "0x236AB58")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600030A")]
		[Address(RVA = "0x236A9B8", Offset = "0x236A9B8", VA = "0x236A9B8", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x600030B")]
		[Address(RVA = "0x236AC28", Offset = "0x236AC28", VA = "0x236AC28")]
		public ConstraintRotationOffset()
		{
		}

		[Token(Token = "0x600030C")]
		[Address(RVA = "0x236AC30", Offset = "0x236AC30", VA = "0x236AC30")]
		public ConstraintRotationOffset(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200005E")]
	public class Constraints
	{
		[Token(Token = "0x40002C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x40002C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x40002C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 positionOffset;

		[Token(Token = "0x40002C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 position;

		[Token(Token = "0x40002C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D69D0", Offset = "0x15D69D0")]
		public float positionWeight;

		[Token(Token = "0x40002C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 rotationOffset;

		[Token(Token = "0x40002C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 rotation;

		[Token(Token = "0x40002C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D69E8", Offset = "0x15D69E8")]
		public float rotationWeight;

		[Token(Token = "0x600030E")]
		[Address(RVA = "0x236AC64", Offset = "0x236AC64", VA = "0x236AC64")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x600030F")]
		[Address(RVA = "0x23695D8", Offset = "0x23695D8", VA = "0x23695D8")]
		public void Initiate(Transform transform)
		{
		}

		[Token(Token = "0x6000310")]
		[Address(RVA = "0x23697B8", Offset = "0x23697B8", VA = "0x23697B8")]
		public void Update()
		{
		}

		[Token(Token = "0x6000311")]
		[Address(RVA = "0x2369FC0", Offset = "0x2369FC0", VA = "0x2369FC0")]
		public Constraints()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200005F")]
	public class Finger
	{
		[Serializable]
		[Token(Token = "0x20001F7")]
		public enum DOF
		{
			[Token(Token = "0x4000CD7")]
			One,
			[Token(Token = "0x4000CD8")]
			Three
		}

		[Token(Token = "0x40002CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D6A00", Offset = "0x15D6A00")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D6A00", Offset = "0x15D6A00")]
		public float weight;

		[Token(Token = "0x40002CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D6A54", Offset = "0x15D6A54")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D6A54", Offset = "0x15D6A54")]
		public float rotationWeight;

		[Token(Token = "0x40002CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D6AA8", Offset = "0x15D6AA8")]
		public DOF rotationDOF;

		[Token(Token = "0x40002CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D6AE0", Offset = "0x15D6AE0")]
		public bool fixBone1Twist;

		[Token(Token = "0x40002CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D6B18", Offset = "0x15D6B18")]
		public Transform bone1;

		[Token(Token = "0x40002CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D6B50", Offset = "0x15D6B50")]
		public Transform bone2;

		[Token(Token = "0x40002D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D6B88", Offset = "0x15D6B88")]
		public Transform bone3;

		[Token(Token = "0x40002D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D6BC0", Offset = "0x15D6BC0")]
		public Transform tip;

		[Token(Token = "0x40002D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D6BF8", Offset = "0x15D6BF8")]
		public Transform target;

		[Token(Token = "0x40002D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D6C30", Offset = "0x15D6C30")]
		private bool <initiated>k__BackingField;

		[Token(Token = "0x40002D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IKSolverLimb solver;

		[Token(Token = "0x40002D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion bone3RelativeToTarget;

		[Token(Token = "0x40002D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 bone3DefaultLocalPosition;

		[Token(Token = "0x40002D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Quaternion bone3DefaultLocalRotation;

		[Token(Token = "0x40002D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector3 bone1Axis;

		[Token(Token = "0x40002D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 tipAxis;

		[Token(Token = "0x40002DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Vector3 bone1TwistAxis;

		[Token(Token = "0x1700008B")]
		public bool initiated
		{
			[Token(Token = "0x6000312")]
			[Address(RVA = "0x2F5C2BC", Offset = "0x2F5C2BC", VA = "0x2F5C2BC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E2E10", Offset = "0x15E2E10")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000313")]
			[Address(RVA = "0x2F5C2C4", Offset = "0x2F5C2C4", VA = "0x2F5C2C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E2E20", Offset = "0x15E2E20")]
			private set
			{
			}
		}

		[Token(Token = "0x1700008C")]
		public Vector3 IKPosition
		{
			[Token(Token = "0x6000314")]
			[Address(RVA = "0x2F5C2D0", Offset = "0x2F5C2D0", VA = "0x2F5C2D0")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000315")]
			[Address(RVA = "0x2F5C2F0", Offset = "0x2F5C2F0", VA = "0x2F5C2F0")]
			set
			{
			}
		}

		[Token(Token = "0x1700008D")]
		public Quaternion IKRotation
		{
			[Token(Token = "0x6000316")]
			[Address(RVA = "0x2F5C310", Offset = "0x2F5C310", VA = "0x2F5C310")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x6000317")]
			[Address(RVA = "0x2F5C330", Offset = "0x2F5C330", VA = "0x2F5C330")]
			set
			{
			}
		}

		[Token(Token = "0x6000318")]
		[Address(RVA = "0x2F5C350", Offset = "0x2F5C350", VA = "0x2F5C350")]
		public bool IsValid(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000319")]
		[Address(RVA = "0x2F5C45C", Offset = "0x2F5C45C", VA = "0x2F5C45C")]
		public void Initiate(Transform hand, int index)
		{
		}

		[Token(Token = "0x600031A")]
		[Address(RVA = "0x2F5CA10", Offset = "0x2F5CA10", VA = "0x2F5CA10")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x600031B")]
		[Address(RVA = "0x2F5CAEC", Offset = "0x2F5CAEC", VA = "0x2F5CAEC")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x600031C")]
		[Address(RVA = "0x2F5CBB4", Offset = "0x2F5CBB4", VA = "0x2F5CBB4")]
		public void Update(float masterWeight)
		{
		}

		[Token(Token = "0x600031D")]
		[Address(RVA = "0x2F5D2FC", Offset = "0x2F5D2FC", VA = "0x2F5D2FC")]
		public Finger()
		{
		}
	}
	[Token(Token = "0x2000060")]
	public class FingerRig : SolverManager
	{
		[Token(Token = "0x40002DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D6C40", Offset = "0x15D6C40")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D6C40", Offset = "0x15D6C40")]
		public float weight;

		[Token(Token = "0x40002DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Finger[] fingers;

		[Token(Token = "0x40002DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D6C94", Offset = "0x15D6C94")]
		private bool <initiated>k__BackingField;

		[Token(Token = "0x1700008E")]
		public bool initiated
		{
			[Token(Token = "0x600031E")]
			[Address(RVA = "0x2F5D30C", Offset = "0x2F5D30C", VA = "0x2F5D30C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E2E30", Offset = "0x15E2E30")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600031F")]
			[Address(RVA = "0x2F5D314", Offset = "0x2F5D314", VA = "0x2F5D314")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E2E40", Offset = "0x15E2E40")]
			private set
			{
			}
		}

		[Token(Token = "0x6000320")]
		[Address(RVA = "0x2F5D320", Offset = "0x2F5D320", VA = "0x2F5D320")]
		public bool IsValid(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000321")]
		[Address(RVA = "0x2F5D3A8", Offset = "0x2F5D3A8", VA = "0x2F5D3A8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E2E50", Offset = "0x15E2E50")]
		public void AutoDetect()
		{
		}

		[Token(Token = "0x6000322")]
		[Address(RVA = "0x2F5D720", Offset = "0x2F5D720", VA = "0x2F5D720")]
		public void AddFinger(Transform bone1, Transform bone2, Transform bone3, Transform tip, [Optional] Transform target)
		{
		}

		[Token(Token = "0x6000323")]
		[Address(RVA = "0x2F5D8DC", Offset = "0x2F5D8DC", VA = "0x2F5D8DC")]
		public void RemoveFinger(int index)
		{
		}

		[Token(Token = "0x6000324")]
		[Address(RVA = "0x2F5D610", Offset = "0x2F5D610", VA = "0x2F5D610")]
		private void AddChildrenRecursive(Transform parent, ref Transform[] array)
		{
		}

		[Token(Token = "0x6000325")]
		[Address(RVA = "0x2F5DA60", Offset = "0x2F5DA60", VA = "0x2F5DA60", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x6000326")]
		[Address(RVA = "0x2F5DB20", Offset = "0x2F5DB20", VA = "0x2F5DB20")]
		public void UpdateFingerSolvers()
		{
		}

		[Token(Token = "0x6000327")]
		[Address(RVA = "0x2F5DB98", Offset = "0x2F5DB98", VA = "0x2F5DB98")]
		public void FixFingerTransforms()
		{
		}

		[Token(Token = "0x6000328")]
		[Address(RVA = "0x2F5DC0C", Offset = "0x2F5DC0C", VA = "0x2F5DC0C")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000329")]
		[Address(RVA = "0x2F5DC74", Offset = "0x2F5DC74", VA = "0x2F5DC74", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x600032A")]
		[Address(RVA = "0x2F5DC78", Offset = "0x2F5DC78", VA = "0x2F5DC78", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x600032B")]
		[Address(RVA = "0x2F5DC8C", Offset = "0x2F5DC8C", VA = "0x2F5DC8C")]
		public FingerRig()
		{
		}
	}
	[Token(Token = "0x2000061")]
	public abstract class Grounder : MonoBehaviour
	{
		[Token(Token = "0x20001F8")]
		public delegate void GrounderDelegate();

		[Token(Token = "0x40002DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D6CA4", Offset = "0x15D6CA4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D6CA4", Offset = "0x15D6CA4")]
		public float weight;

		[Token(Token = "0x40002DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D6CF8", Offset = "0x15D6CF8")]
		public Grounding solver;

		[Token(Token = "0x40002E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GrounderDelegate OnPreGrounder;

		[Token(Token = "0x40002E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GrounderDelegate OnPostGrounder;

		[Token(Token = "0x40002E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D6D30", Offset = "0x15D6D30")]
		private bool <initiated>k__BackingField;

		[Token(Token = "0x1700008F")]
		public bool initiated
		{
			[Token(Token = "0x600032D")]
			[Address(RVA = "0x2F5ED64", Offset = "0x2F5ED64", VA = "0x2F5ED64")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E2E88", Offset = "0x15E2E88")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600032E")]
			[Address(RVA = "0x2F5ED6C", Offset = "0x2F5ED6C", VA = "0x2F5ED6C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E2E98", Offset = "0x15E2E98")]
			protected set
			{
			}
		}

		[Token(Token = "0x600032C")]
		public abstract void ResetPosition();

		[Token(Token = "0x600032F")]
		[Address(RVA = "0x2F5ED78", Offset = "0x2F5ED78", VA = "0x2F5ED78")]
		protected Vector3 GetSpineOffsetTarget()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000330")]
		[Address(RVA = "0x2F5F04C", Offset = "0x2F5F04C", VA = "0x2F5F04C")]
		protected void LogWarning(string message)
		{
		}

		[Token(Token = "0x6000331")]
		[Address(RVA = "0x2F5EEBC", Offset = "0x2F5EEBC", VA = "0x2F5EEBC")]
		private Vector3 GetLegSpineBendVector(Grounding.Leg leg)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000332")]
		[Address(RVA = "0x2F5F080", Offset = "0x2F5F080", VA = "0x2F5F080")]
		private Vector3 GetLegSpineTangent(Grounding.Leg leg)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000333")]
		protected abstract void OpenUserManual();

		[Token(Token = "0x6000334")]
		protected abstract void OpenScriptReference();

		[Token(Token = "0x6000335")]
		[Address(RVA = "0x2F5F288", Offset = "0x2F5F288", VA = "0x2F5F288")]
		protected Grounder()
		{
		}
	}
	[Token(Token = "0x2000062")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x15D41C4", Offset = "0x15D41C4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x15D41C4", Offset = "0x15D41C4")]
	public class GrounderBipedIK : Grounder
	{
		[Token(Token = "0x40002E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D6D40", Offset = "0x15D6D40")]
		public BipedIK ik;

		[Token(Token = "0x40002E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D6D78", Offset = "0x15D6D78")]
		public float spineBend;

		[Token(Token = "0x40002E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D6DB0", Offset = "0x15D6DB0")]
		public float spineSpeed;

		[Token(Token = "0x40002E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform[] feet;

		[Token(Token = "0x40002E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion[] footRotations;

		[Token(Token = "0x40002E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 animatedPelvisLocalPosition;

		[Token(Token = "0x40002E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 solvedPelvisLocalPosition;

		[Token(Token = "0x40002EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 spineOffset;

		[Token(Token = "0x40002EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float lastWeight;

		[Token(Token = "0x6000336")]
		[Address(RVA = "0x2F5F600", Offset = "0x2F5F600", VA = "0x2F5F600", Slot = "5")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E2EA8", Offset = "0x15E2EA8")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000337")]
		[Address(RVA = "0x2F5F64C", Offset = "0x2F5F64C", VA = "0x2F5F64C", Slot = "6")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E2EE0", Offset = "0x15E2EE0")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000338")]
		[Address(RVA = "0x2F5F698", Offset = "0x2F5F698", VA = "0x2F5F698", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x6000339")]
		[Address(RVA = "0x2F5F79C", Offset = "0x2F5F79C", VA = "0x2F5F79C")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x600033A")]
		[Address(RVA = "0x2F5F84C", Offset = "0x2F5F84C", VA = "0x2F5F84C")]
		private void Update()
		{
		}

		[Token(Token = "0x600033B")]
		[Address(RVA = "0x2F5F900", Offset = "0x2F5F900", VA = "0x2F5F900")]
		private void Initiate()
		{
		}

		[Token(Token = "0x600033C")]
		[Address(RVA = "0x2F5FEC8", Offset = "0x2F5FEC8", VA = "0x2F5FEC8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600033D")]
		[Address(RVA = "0x2F5FF1C", Offset = "0x2F5FF1C", VA = "0x2F5FF1C")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x600033E")]
		[Address(RVA = "0x2F606D0", Offset = "0x2F606D0", VA = "0x2F606D0")]
		private void SetLegIK(IKSolverLimb limb, int index)
		{
		}

		[Token(Token = "0x600033F")]
		[Address(RVA = "0x2F60830", Offset = "0x2F60830", VA = "0x2F60830")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x6000340")]
		[Address(RVA = "0x2F609C0", Offset = "0x2F609C0", VA = "0x2F609C0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000341")]
		[Address(RVA = "0x2F60B64", Offset = "0x2F60B64", VA = "0x2F60B64")]
		public GrounderBipedIK()
		{
		}
	}
	[Token(Token = "0x2000063")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x15D4224", Offset = "0x15D4224")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x15D4224", Offset = "0x15D4224")]
	public class GrounderFBBIK : Grounder
	{
		[Serializable]
		[Token(Token = "0x20001F9")]
		public class SpineEffector
		{
			[Token(Token = "0x4000CD9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DEFA8", Offset = "0x15DEFA8")]
			public FullBodyBipedEffector effectorType;

			[Token(Token = "0x4000CDA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DEFE0", Offset = "0x15DEFE0")]
			public float horizontalWeight;

			[Token(Token = "0x4000CDB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DF018", Offset = "0x15DF018")]
			public float verticalWeight;

			[Token(Token = "0x6000CD6")]
			[Address(RVA = "0x2F61A80", Offset = "0x2F61A80", VA = "0x2F61A80")]
			public SpineEffector()
			{
			}

			[Token(Token = "0x6000CD7")]
			[Address(RVA = "0x2F61A90", Offset = "0x2F61A90", VA = "0x2F61A90")]
			public SpineEffector(FullBodyBipedEffector effectorType, float horizontalWeight, float verticalWeight)
			{
			}
		}

		[Token(Token = "0x40002EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D6DE8", Offset = "0x15D6DE8")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x40002ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D6E20", Offset = "0x15D6E20")]
		public float spineBend;

		[Token(Token = "0x40002EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D6E58", Offset = "0x15D6E58")]
		public float spineSpeed;

		[Token(Token = "0x40002EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public SpineEffector[] spine;

		[Token(Token = "0x40002F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform[] feet;

		[Token(Token = "0x40002F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 spineOffset;

		[Token(Token = "0x40002F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool firstSolve;

		[Token(Token = "0x6000342")]
		[Address(RVA = "0x2F60BFC", Offset = "0x2F60BFC", VA = "0x2F60BFC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E2F18", Offset = "0x15E2F18")]
		private void OpenTutorial()
		{
		}

		[Token(Token = "0x6000343")]
		[Address(RVA = "0x2F60C48", Offset = "0x2F60C48", VA = "0x2F60C48", Slot = "5")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E2F50", Offset = "0x15E2F50")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000344")]
		[Address(RVA = "0x2F60C94", Offset = "0x2F60C94", VA = "0x2F60C94", Slot = "6")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E2F88", Offset = "0x15E2F88")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000345")]
		[Address(RVA = "0x2F60CE0", Offset = "0x2F60CE0", VA = "0x2F60CE0", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x6000346")]
		[Address(RVA = "0x2F60D60", Offset = "0x2F60D60", VA = "0x2F60D60")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000347")]
		[Address(RVA = "0x2F60DF8", Offset = "0x2F60DF8", VA = "0x2F60DF8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000348")]
		[Address(RVA = "0x2F610F0", Offset = "0x2F610F0", VA = "0x2F610F0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000349")]
		[Address(RVA = "0x2F610FC", Offset = "0x2F610FC", VA = "0x2F610FC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600034A")]
		[Address(RVA = "0x2F60EB4", Offset = "0x2F60EB4", VA = "0x2F60EB4")]
		private void Initiate()
		{
		}

		[Token(Token = "0x600034B")]
		[Address(RVA = "0x2F61108", Offset = "0x2F61108", VA = "0x2F61108")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x600034C")]
		[Address(RVA = "0x2F615A8", Offset = "0x2F615A8", VA = "0x2F615A8")]
		private void SetLegIK(IKEffector effector, Grounding.Leg leg)
		{
		}

		[Token(Token = "0x600034D")]
		[Address(RVA = "0x2F61768", Offset = "0x2F61768", VA = "0x2F61768")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x600034E")]
		[Address(RVA = "0x2F618C4", Offset = "0x2F618C4", VA = "0x2F618C4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600034F")]
		[Address(RVA = "0x2F619E8", Offset = "0x2F619E8", VA = "0x2F619E8")]
		public GrounderFBBIK()
		{
		}
	}
	[Token(Token = "0x2000064")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x15D4284", Offset = "0x15D4284")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x15D4284", Offset = "0x15D4284")]
	public class GrounderIK : Grounder
	{
		[Token(Token = "0x40002F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IK[] legs;

		[Token(Token = "0x40002F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D6E90", Offset = "0x15D6E90")]
		public Transform pelvis;

		[Token(Token = "0x40002F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D6EC8", Offset = "0x15D6EC8")]
		public Transform characterRoot;

		[Token(Token = "0x40002F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D6F00", Offset = "0x15D6F00")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D6F00", Offset = "0x15D6F00")]
		public float rootRotationWeight;

		[Token(Token = "0x40002F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D6F54", Offset = "0x15D6F54")]
		public float rootRotationSpeed;

		[Token(Token = "0x40002F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D6F8C", Offset = "0x15D6F8C")]
		public float maxRootRotationAngle;

		[Token(Token = "0x40002F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform[] feet;

		[Token(Token = "0x40002FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Quaternion[] footRotations;

		[Token(Token = "0x40002FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 animatedPelvisLocalPosition;

		[Token(Token = "0x40002FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector3 solvedPelvisLocalPosition;

		[Token(Token = "0x40002FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int solvedFeet;

		[Token(Token = "0x40002FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool solved;

		[Token(Token = "0x40002FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float lastWeight;

		[Token(Token = "0x4000300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Rigidbody characterRootRigidbody;

		[Token(Token = "0x6000350")]
		[Address(RVA = "0x2F61AD8", Offset = "0x2F61AD8", VA = "0x2F61AD8", Slot = "5")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E2FC0", Offset = "0x15E2FC0")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000351")]
		[Address(RVA = "0x2F61B24", Offset = "0x2F61B24", VA = "0x2F61B24", Slot = "6")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E2FF8", Offset = "0x15E2FF8")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000352")]
		[Address(RVA = "0x2F61B70", Offset = "0x2F61B70", VA = "0x2F61B70", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x6000353")]
		[Address(RVA = "0x2F61B88", Offset = "0x2F61B88", VA = "0x2F61B88")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000354")]
		[Address(RVA = "0x2F61D78", Offset = "0x2F61D78", VA = "0x2F61D78")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000355")]
		[Address(RVA = "0x2F61E78", Offset = "0x2F61E78", VA = "0x2F61E78")]
		private void Update()
		{
		}

		[Token(Token = "0x6000356")]
		[Address(RVA = "0x2F625C0", Offset = "0x2F625C0", VA = "0x2F625C0")]
		private void Initiate()
		{
		}

		[Token(Token = "0x6000357")]
		[Address(RVA = "0x2F62A00", Offset = "0x2F62A00", VA = "0x2F62A00")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x6000358")]
		[Address(RVA = "0x2F62C70", Offset = "0x2F62C70", VA = "0x2F62C70")]
		private void SetLegIK(int index)
		{
		}

		[Token(Token = "0x6000359")]
		[Address(RVA = "0x2F62F90", Offset = "0x2F62F90", VA = "0x2F62F90")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x600035A")]
		[Address(RVA = "0x2F6312C", Offset = "0x2F6312C", VA = "0x2F6312C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600035B")]
		[Address(RVA = "0x2F63318", Offset = "0x2F63318", VA = "0x2F63318")]
		public GrounderIK()
		{
		}
	}
	[Token(Token = "0x2000065")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x15D42E4", Offset = "0x15D42E4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x15D42E4", Offset = "0x15D42E4")]
	public class GrounderQuadruped : Grounder
	{
		[Token(Token = "0x20001FA")]
		public struct Foot
		{
			[Token(Token = "0x4000CDC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IKSolver solver;

			[Token(Token = "0x4000CDD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Transform transform;

			[Token(Token = "0x4000CDE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Quaternion rotation;

			[Token(Token = "0x4000CDF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Grounding.Leg leg;

			[Token(Token = "0x6000CD8")]
			[Address(RVA = "0x2F63F34", Offset = "0x2F63F34", VA = "0x2F63F34")]
			public Foot(IKSolver solver, Transform transform)
			{
			}
		}

		[Token(Token = "0x4000301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D6FC4", Offset = "0x15D6FC4")]
		public Grounding forelegSolver;

		[Token(Token = "0x4000302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D6FFC", Offset = "0x15D6FFC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D6FFC", Offset = "0x15D6FFC")]
		public float rootRotationWeight;

		[Token(Token = "0x4000303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D7050", Offset = "0x15D7050")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D7050", Offset = "0x15D7050")]
		public float minRootRotation;

		[Token(Token = "0x4000304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D70A8", Offset = "0x15D70A8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D70A8", Offset = "0x15D70A8")]
		public float maxRootRotation;

		[Token(Token = "0x4000305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D7100", Offset = "0x15D7100")]
		public float rootRotationSpeed;

		[Token(Token = "0x4000306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D7138", Offset = "0x15D7138")]
		public float maxLegOffset;

		[Token(Token = "0x4000307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D7170", Offset = "0x15D7170")]
		public float maxForeLegOffset;

		[Token(Token = "0x4000308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D71A8", Offset = "0x15D71A8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D71A8", Offset = "0x15D71A8")]
		public float maintainHeadRotationWeight;

		[Token(Token = "0x4000309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D71FC", Offset = "0x15D71FC")]
		public Transform characterRoot;

		[Token(Token = "0x400030A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D7234", Offset = "0x15D7234")]
		public Transform pelvis;

		[Token(Token = "0x400030B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D726C", Offset = "0x15D726C")]
		public Transform lastSpineBone;

		[Token(Token = "0x400030C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D72A4", Offset = "0x15D72A4")]
		public Transform head;

		[Token(Token = "0x400030D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public IK[] legs;

		[Token(Token = "0x400030E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public IK[] forelegs;

		[Token(Token = "0x400030F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HideInInspector]
		public Vector3 gravity;

		[Token(Token = "0x4000310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Foot[] feet;

		[Token(Token = "0x4000311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 animatedPelvisLocalPosition;

		[Token(Token = "0x4000312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private Quaternion animatedPelvisLocalRotation;

		[Token(Token = "0x4000313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private Quaternion animatedHeadLocalRotation;

		[Token(Token = "0x4000314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private Vector3 solvedPelvisLocalPosition;

		[Token(Token = "0x4000315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Quaternion solvedPelvisLocalRotation;

		[Token(Token = "0x4000316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Quaternion solvedHeadLocalRotation;

		[Token(Token = "0x4000317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private int solvedFeet;

		[Token(Token = "0x4000318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private bool solved;

		[Token(Token = "0x4000319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private float angle;

		[Token(Token = "0x400031A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Transform forefeetRoot;

		[Token(Token = "0x400031B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Quaternion headRotation;

		[Token(Token = "0x400031C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private float lastWeight;

		[Token(Token = "0x400031D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private Rigidbody characterRootRigidbody;

		[Token(Token = "0x600035C")]
		[Address(RVA = "0x2F633B0", Offset = "0x2F633B0", VA = "0x2F633B0", Slot = "5")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3030", Offset = "0x15E3030")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x600035D")]
		[Address(RVA = "0x2F633FC", Offset = "0x2F633FC", VA = "0x2F633FC", Slot = "6")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3068", Offset = "0x15E3068")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x600035E")]
		[Address(RVA = "0x2F63448", Offset = "0x2F63448", VA = "0x2F63448", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x600035F")]
		[Address(RVA = "0x2F6347C", Offset = "0x2F6347C", VA = "0x2F6347C")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000360")]
		[Address(RVA = "0x2F635AC", Offset = "0x2F635AC", VA = "0x2F635AC")]
		private bool IsReadyToInitiateLegs(IK[] ikComponents)
		{
			return default(bool);
		}

		[Token(Token = "0x6000361")]
		[Address(RVA = "0x2F6376C", Offset = "0x2F6376C", VA = "0x2F6376C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000362")]
		[Address(RVA = "0x2F637D4", Offset = "0x2F637D4", VA = "0x2F637D4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000363")]
		[Address(RVA = "0x2F6388C", Offset = "0x2F6388C", VA = "0x2F6388C")]
		private void Initiate()
		{
		}

		[Token(Token = "0x6000364")]
		[Address(RVA = "0x2F63BC0", Offset = "0x2F63BC0", VA = "0x2F63BC0")]
		private Transform[] InitiateFeet(IK[] ikComponents, ref Foot[] f, int indexOffset)
		{
			return null;
		}

		[Token(Token = "0x6000365")]
		[Address(RVA = "0x2F63F98", Offset = "0x2F63F98", VA = "0x2F63F98")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000366")]
		[Address(RVA = "0x2F640E4", Offset = "0x2F640E4", VA = "0x2F640E4")]
		private void RootRotation()
		{
		}

		[Token(Token = "0x6000367")]
		[Address(RVA = "0x2F64588", Offset = "0x2F64588", VA = "0x2F64588")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x6000368")]
		[Address(RVA = "0x2F64D78", Offset = "0x2F64D78", VA = "0x2F64D78")]
		private void UpdateForefeetRoot()
		{
		}

		[Token(Token = "0x6000369")]
		[Address(RVA = "0x2F65038", Offset = "0x2F65038", VA = "0x2F65038")]
		private void SetFootIK(Foot foot, float maxOffset)
		{
		}

		[Token(Token = "0x600036A")]
		[Address(RVA = "0x2F65198", Offset = "0x2F65198", VA = "0x2F65198")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x600036B")]
		[Address(RVA = "0x2F65474", Offset = "0x2F65474", VA = "0x2F65474")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600036C")]
		[Address(RVA = "0x2F654AC", Offset = "0x2F654AC", VA = "0x2F654AC")]
		private void DestroyLegs(IK[] ikComponents)
		{
		}

		[Token(Token = "0x600036D")]
		[Address(RVA = "0x2F65690", Offset = "0x2F65690", VA = "0x2F65690")]
		public GrounderQuadruped()
		{
		}
	}
	[Token(Token = "0x2000066")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x15D4344", Offset = "0x15D4344")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x15D4344", Offset = "0x15D4344")]
	public class GrounderVRIK : Grounder
	{
		[Token(Token = "0x400031E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D72EC", Offset = "0x15D72EC")]
		public VRIK ik;

		[Token(Token = "0x400031F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform[] feet;

		[Token(Token = "0x600036E")]
		[Address(RVA = "0x2F657C4", Offset = "0x2F657C4", VA = "0x2F657C4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E30A0", Offset = "0x15E30A0")]
		private void OpenTutorial()
		{
		}

		[Token(Token = "0x600036F")]
		[Address(RVA = "0x2F65810", Offset = "0x2F65810", VA = "0x2F65810", Slot = "5")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E30D8", Offset = "0x15E30D8")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000370")]
		[Address(RVA = "0x2F6585C", Offset = "0x2F6585C", VA = "0x2F6585C", Slot = "6")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3110", Offset = "0x15E3110")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000371")]
		[Address(RVA = "0x2F658A8", Offset = "0x2F658A8", VA = "0x2F658A8", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x6000372")]
		[Address(RVA = "0x2F658C0", Offset = "0x2F658C0", VA = "0x2F658C0")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000373")]
		[Address(RVA = "0x2F65958", Offset = "0x2F65958", VA = "0x2F65958")]
		private void Update()
		{
		}

		[Token(Token = "0x6000374")]
		[Address(RVA = "0x2F65A0C", Offset = "0x2F65A0C", VA = "0x2F65A0C")]
		private void Initiate()
		{
		}

		[Token(Token = "0x6000375")]
		[Address(RVA = "0x2F65C58", Offset = "0x2F65C58", VA = "0x2F65C58")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x6000376")]
		[Address(RVA = "0x2F65EEC", Offset = "0x2F65EEC", VA = "0x2F65EEC")]
		private void SetLegIK(IKSolverVR.PositionOffset positionOffset, Transform bone, Grounding.Leg leg)
		{
		}

		[Token(Token = "0x6000377")]
		[Address(RVA = "0x2F65FF4", Offset = "0x2F65FF4", VA = "0x2F65FF4")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x6000378")]
		[Address(RVA = "0x2F661F4", Offset = "0x2F661F4", VA = "0x2F661F4")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000379")]
		[Address(RVA = "0x2F66350", Offset = "0x2F66350", VA = "0x2F66350")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600037A")]
		[Address(RVA = "0x2F664E4", Offset = "0x2F664E4", VA = "0x2F664E4")]
		public GrounderVRIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000067")]
	public class Grounding
	{
		[Serializable]
		[Token(Token = "0x20001FB")]
		public enum Quality
		{
			[Token(Token = "0x4000CE1")]
			Fastest,
			[Token(Token = "0x4000CE2")]
			Simple,
			[Token(Token = "0x4000CE3")]
			Best
		}

		[Token(Token = "0x20001FC")]
		public class Leg
		{
			[Token(Token = "0x4000CE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DF050", Offset = "0x15DF050")]
			private bool <isGrounded>k__BackingField;

			[Token(Token = "0x4000CE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DF060", Offset = "0x15DF060")]
			private Vector3 <IKPosition>k__BackingField;

			[Token(Token = "0x4000CE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Quaternion rotationOffset;

			[Token(Token = "0x4000CE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DF070", Offset = "0x15DF070")]
			private bool <initiated>k__BackingField;

			[Token(Token = "0x4000CE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DF080", Offset = "0x15DF080")]
			private float <heightFromGround>k__BackingField;

			[Token(Token = "0x4000CE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DF090", Offset = "0x15DF090")]
			private Vector3 <velocity>k__BackingField;

			[Token(Token = "0x4000CEA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DF0A0", Offset = "0x15DF0A0")]
			private Transform <transform>k__BackingField;

			[Token(Token = "0x4000CEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DF0B0", Offset = "0x15DF0B0")]
			private float <IKOffset>k__BackingField;

			[Token(Token = "0x4000CEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public bool invertFootCenter;

			[Token(Token = "0x4000CED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DF0C0", Offset = "0x15DF0C0")]
			private RaycastHit <heelHit>k__BackingField;

			[Token(Token = "0x4000CEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DF0D0", Offset = "0x15DF0D0")]
			private RaycastHit <capsuleHit>k__BackingField;

			[Token(Token = "0x4000CEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			private Grounding grounding;

			[Token(Token = "0x4000CF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			private float lastTime;

			[Token(Token = "0x4000CF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			private float deltaTime;

			[Token(Token = "0x4000CF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			private Vector3 lastPosition;

			[Token(Token = "0x4000CF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
			private Quaternion toHitNormal;

			[Token(Token = "0x4000CF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
			private Quaternion r;

			[Token(Token = "0x4000CF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
			private Vector3 up;

			[Token(Token = "0x4000CF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			private bool doOverrideFootPosition;

			[Token(Token = "0x4000CF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
			private Vector3 overrideFootPosition;

			[Token(Token = "0x4000CF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
			private Vector3 transformPosition;

			[Token(Token = "0x1700017A")]
			public bool isGrounded
			{
				[Token(Token = "0x6000CD9")]
				[Address(RVA = "0x2F67DA8", Offset = "0x2F67DA8", VA = "0x2F67DA8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5B54", Offset = "0x15E5B54")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6000CDA")]
				[Address(RVA = "0x2F67DB0", Offset = "0x2F67DB0", VA = "0x2F67DB0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5B64", Offset = "0x15E5B64")]
				private set
				{
				}
			}

			[Token(Token = "0x1700017B")]
			public Vector3 IKPosition
			{
				[Token(Token = "0x6000CDB")]
				[Address(RVA = "0x2F67DBC", Offset = "0x2F67DBC", VA = "0x2F67DBC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5B74", Offset = "0x15E5B74")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000CDC")]
				[Address(RVA = "0x2F67DC8", Offset = "0x2F67DC8", VA = "0x2F67DC8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5B84", Offset = "0x15E5B84")]
				private set
				{
				}
			}

			[Token(Token = "0x1700017C")]
			public bool initiated
			{
				[Token(Token = "0x6000CDD")]
				[Address(RVA = "0x2F67DD4", Offset = "0x2F67DD4", VA = "0x2F67DD4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5B94", Offset = "0x15E5B94")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6000CDE")]
				[Address(RVA = "0x2F67DDC", Offset = "0x2F67DDC", VA = "0x2F67DDC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5BA4", Offset = "0x15E5BA4")]
				private set
				{
				}
			}

			[Token(Token = "0x1700017D")]
			public float heightFromGround
			{
				[Token(Token = "0x6000CDF")]
				[Address(RVA = "0x2F67DE8", Offset = "0x2F67DE8", VA = "0x2F67DE8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5BB4", Offset = "0x15E5BB4")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000CE0")]
				[Address(RVA = "0x2F67DF0", Offset = "0x2F67DF0", VA = "0x2F67DF0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5BC4", Offset = "0x15E5BC4")]
				private set
				{
				}
			}

			[Token(Token = "0x1700017E")]
			public Vector3 velocity
			{
				[Token(Token = "0x6000CE1")]
				[Address(RVA = "0x2F67DF8", Offset = "0x2F67DF8", VA = "0x2F67DF8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5BD4", Offset = "0x15E5BD4")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000CE2")]
				[Address(RVA = "0x2F67E04", Offset = "0x2F67E04", VA = "0x2F67E04")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5BE4", Offset = "0x15E5BE4")]
				private set
				{
				}
			}

			[Token(Token = "0x1700017F")]
			public Transform transform
			{
				[Token(Token = "0x6000CE3")]
				[Address(RVA = "0x2F67E10", Offset = "0x2F67E10", VA = "0x2F67E10")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5BF4", Offset = "0x15E5BF4")]
				get
				{
					return null;
				}
				[Token(Token = "0x6000CE4")]
				[Address(RVA = "0x2F67E18", Offset = "0x2F67E18", VA = "0x2F67E18")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5C04", Offset = "0x15E5C04")]
				private set
				{
				}
			}

			[Token(Token = "0x17000180")]
			public float IKOffset
			{
				[Token(Token = "0x6000CE5")]
				[Address(RVA = "0x2F67E20", Offset = "0x2F67E20", VA = "0x2F67E20")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5C14", Offset = "0x15E5C14")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000CE6")]
				[Address(RVA = "0x2F67E28", Offset = "0x2F67E28", VA = "0x2F67E28")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5C24", Offset = "0x15E5C24")]
				private set
				{
				}
			}

			[Token(Token = "0x17000181")]
			public RaycastHit heelHit
			{
				[Token(Token = "0x6000CE7")]
				[Address(RVA = "0x2F67E30", Offset = "0x2F67E30", VA = "0x2F67E30")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5C34", Offset = "0x15E5C34")]
				get
				{
					return default(RaycastHit);
				}
				[Token(Token = "0x6000CE8")]
				[Address(RVA = "0x2F67E48", Offset = "0x2F67E48", VA = "0x2F67E48")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5C44", Offset = "0x15E5C44")]
				private set
				{
				}
			}

			[Token(Token = "0x17000182")]
			public RaycastHit capsuleHit
			{
				[Token(Token = "0x6000CE9")]
				[Address(RVA = "0x2F67E68", Offset = "0x2F67E68", VA = "0x2F67E68")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5C54", Offset = "0x15E5C54")]
				get
				{
					return default(RaycastHit);
				}
				[Token(Token = "0x6000CEA")]
				[Address(RVA = "0x2F67E80", Offset = "0x2F67E80", VA = "0x2F67E80")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5C64", Offset = "0x15E5C64")]
				private set
				{
				}
			}

			[Token(Token = "0x17000183")]
			public RaycastHit GetHitPoint
			{
				[Token(Token = "0x6000CEB")]
				[Address(RVA = "0x2F67EA0", Offset = "0x2F67EA0", VA = "0x2F67EA0")]
				get
				{
					return default(RaycastHit);
				}
			}

			[Token(Token = "0x17000184")]
			public float stepHeightFromGround
			{
				[Token(Token = "0x6000CF1")]
				[Address(RVA = "0x2F68C5C", Offset = "0x2F68C5C", VA = "0x2F68C5C")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000185")]
			private float rootYOffset
			{
				[Token(Token = "0x6000CFA")]
				[Address(RVA = "0x2F68F34", Offset = "0x2F68F34", VA = "0x2F68F34")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x6000CEC")]
			[Address(RVA = "0x2F67EE8", Offset = "0x2F67EE8", VA = "0x2F67EE8")]
			public void SetFootPosition(Vector3 position)
			{
			}

			[Token(Token = "0x6000CED")]
			[Address(RVA = "0x2F66B94", Offset = "0x2F66B94", VA = "0x2F66B94")]
			public void Initiate(Grounding grounding, Transform transform)
			{
			}

			[Token(Token = "0x6000CEE")]
			[Address(RVA = "0x2F67EFC", Offset = "0x2F67EFC", VA = "0x2F67EFC")]
			public void OnEnable()
			{
			}

			[Token(Token = "0x6000CEF")]
			[Address(RVA = "0x2F678C8", Offset = "0x2F678C8", VA = "0x2F678C8")]
			public void Reset()
			{
			}

			[Token(Token = "0x6000CF0")]
			[Address(RVA = "0x2F66CD8", Offset = "0x2F66CD8", VA = "0x2F66CD8")]
			public void Process()
			{
			}

			[Token(Token = "0x6000CF2")]
			[Address(RVA = "0x2F686D4", Offset = "0x2F686D4", VA = "0x2F686D4")]
			private RaycastHit GetCapsuleHit(Vector3 offsetFromHeel)
			{
				return default(RaycastHit);
			}

			[Token(Token = "0x6000CF3")]
			[Address(RVA = "0x2F67F48", Offset = "0x2F67F48", VA = "0x2F67F48")]
			private RaycastHit GetRaycastHit(Vector3 offsetFromHeel)
			{
				return default(RaycastHit);
			}

			[Token(Token = "0x6000CF4")]
			[Address(RVA = "0x2F68DDC", Offset = "0x2F68DDC", VA = "0x2F68DDC")]
			private Vector3 RotateNormal(Vector3 normal)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000CF5")]
			[Address(RVA = "0x2F68380", Offset = "0x2F68380", VA = "0x2F68380")]
			private void SetFootToPoint(Vector3 normal, Vector3 point)
			{
			}

			[Token(Token = "0x6000CF6")]
			[Address(RVA = "0x2F68488", Offset = "0x2F68488", VA = "0x2F68488")]
			private void SetFootToPlane(Vector3 planeNormal, Vector3 planePoint, Vector3 heelHitPoint)
			{
			}

			[Token(Token = "0x6000CF7")]
			[Address(RVA = "0x2F68ED8", Offset = "0x2F68ED8", VA = "0x2F68ED8")]
			private float GetHeightFromGround(Vector3 hitPoint)
			{
				return default(float);
			}

			[Token(Token = "0x6000CF8")]
			[Address(RVA = "0x2F68CE8", Offset = "0x2F68CE8", VA = "0x2F68CE8")]
			private void RotateFoot()
			{
			}

			[Token(Token = "0x6000CF9")]
			[Address(RVA = "0x2F6905C", Offset = "0x2F6905C", VA = "0x2F6905C")]
			private Quaternion GetRotationOffsetTarget()
			{
				return default(Quaternion);
			}

			[Token(Token = "0x6000CFB")]
			[Address(RVA = "0x2F66AE4", Offset = "0x2F66AE4", VA = "0x2F66AE4")]
			public Leg()
			{
			}
		}

		[Token(Token = "0x20001FD")]
		public class Pelvis
		{
			[Token(Token = "0x4000CF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DF0E0", Offset = "0x15DF0E0")]
			private Vector3 <IKOffset>k__BackingField;

			[Token(Token = "0x4000CFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DF0F0", Offset = "0x15DF0F0")]
			private float <heightOffset>k__BackingField;

			[Token(Token = "0x4000CFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Grounding grounding;

			[Token(Token = "0x4000CFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Vector3 lastRootPosition;

			[Token(Token = "0x4000CFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float damperF;

			[Token(Token = "0x4000CFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private bool initiated;

			[Token(Token = "0x4000CFF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float lastTime;

			[Token(Token = "0x17000186")]
			public Vector3 IKOffset
			{
				[Token(Token = "0x6000CFC")]
				[Address(RVA = "0x2F6914C", Offset = "0x2F6914C", VA = "0x2F6914C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5C74", Offset = "0x15E5C74")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000CFD")]
				[Address(RVA = "0x2F69158", Offset = "0x2F69158", VA = "0x2F69158")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5C84", Offset = "0x15E5C84")]
				private set
				{
				}
			}

			[Token(Token = "0x17000187")]
			public float heightOffset
			{
				[Token(Token = "0x6000CFE")]
				[Address(RVA = "0x2F69164", Offset = "0x2F69164", VA = "0x2F69164")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5C94", Offset = "0x15E5C94")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000CFF")]
				[Address(RVA = "0x2F6916C", Offset = "0x2F6916C", VA = "0x2F6916C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5CA4", Offset = "0x15E5CA4")]
				private set
				{
				}
			}

			[Token(Token = "0x6000D00")]
			[Address(RVA = "0x2F66C90", Offset = "0x2F66C90", VA = "0x2F66C90")]
			public void Initiate(Grounding grounding)
			{
			}

			[Token(Token = "0x6000D01")]
			[Address(RVA = "0x2F67818", Offset = "0x2F67818", VA = "0x2F67818")]
			public void Reset()
			{
			}

			[Token(Token = "0x6000D02")]
			[Address(RVA = "0x2F69174", Offset = "0x2F69174", VA = "0x2F69174")]
			public void OnEnable()
			{
			}

			[Token(Token = "0x6000D03")]
			[Address(RVA = "0x2F675AC", Offset = "0x2F675AC", VA = "0x2F675AC")]
			public void Process(float lowestOffset, float highestOffset, bool isGrounded)
			{
			}

			[Token(Token = "0x6000D04")]
			[Address(RVA = "0x2F66B8C", Offset = "0x2F66B8C", VA = "0x2F66B8C")]
			public Pelvis()
			{
			}
		}

		[Token(Token = "0x4000320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D7324", Offset = "0x15D7324")]
		public LayerMask layers;

		[Token(Token = "0x4000321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D735C", Offset = "0x15D735C")]
		public float maxStep;

		[Token(Token = "0x4000322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D7394", Offset = "0x15D7394")]
		public float heightOffset;

		[Token(Token = "0x4000323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D73CC", Offset = "0x15D73CC")]
		public float footSpeed;

		[Token(Token = "0x4000324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D7404", Offset = "0x15D7404")]
		public float footRadius;

		[Token(Token = "0x4000325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D743C", Offset = "0x15D743C")]
		[HideInInspector]
		public float footCenterOffset;

		[Token(Token = "0x4000326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D7488", Offset = "0x15D7488")]
		public float prediction;

		[Token(Token = "0x4000327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D74C0", Offset = "0x15D74C0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D74C0", Offset = "0x15D74C0")]
		public float footRotationWeight;

		[Token(Token = "0x4000328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D7514", Offset = "0x15D7514")]
		public float footRotationSpeed;

		[Token(Token = "0x4000329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D754C", Offset = "0x15D754C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D754C", Offset = "0x15D754C")]
		public float maxFootRotationAngle;

		[Token(Token = "0x400032A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D75A4", Offset = "0x15D75A4")]
		public bool rotateSolver;

		[Token(Token = "0x400032B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D75DC", Offset = "0x15D75DC")]
		public float pelvisSpeed;

		[Token(Token = "0x400032C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D7614", Offset = "0x15D7614")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D7614", Offset = "0x15D7614")]
		public float pelvisDamper;

		[Token(Token = "0x400032D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D7668", Offset = "0x15D7668")]
		public float lowerPelvisWeight;

		[Token(Token = "0x400032E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D76A0", Offset = "0x15D76A0")]
		public float liftPelvisWeight;

		[Token(Token = "0x400032F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D76D8", Offset = "0x15D76D8")]
		public float rootSphereCastRadius;

		[Token(Token = "0x4000330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D7710", Offset = "0x15D7710")]
		public bool overstepFallsDown;

		[Token(Token = "0x4000331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D7748", Offset = "0x15D7748")]
		public Quality quality;

		[Token(Token = "0x4000332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D7780", Offset = "0x15D7780")]
		private Leg[] <legs>k__BackingField;

		[Token(Token = "0x4000333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D7790", Offset = "0x15D7790")]
		private Pelvis <pelvis>k__BackingField;

		[Token(Token = "0x4000334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D77A0", Offset = "0x15D77A0")]
		private bool <isGrounded>k__BackingField;

		[Token(Token = "0x4000335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D77B0", Offset = "0x15D77B0")]
		private Transform <root>k__BackingField;

		[Token(Token = "0x4000336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D77C0", Offset = "0x15D77C0")]
		private RaycastHit <rootHit>k__BackingField;

		[Token(Token = "0x4000337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool initiated;

		[Token(Token = "0x17000090")]
		public Leg[] legs
		{
			[Token(Token = "0x600037B")]
			[Address(RVA = "0x2F6654C", Offset = "0x2F6654C", VA = "0x2F6654C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E3148", Offset = "0x15E3148")]
			get
			{
				return null;
			}
			[Token(Token = "0x600037C")]
			[Address(RVA = "0x2F66554", Offset = "0x2F66554", VA = "0x2F66554")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E3158", Offset = "0x15E3158")]
			private set
			{
			}
		}

		[Token(Token = "0x17000091")]
		public Pelvis pelvis
		{
			[Token(Token = "0x600037D")]
			[Address(RVA = "0x2F6655C", Offset = "0x2F6655C", VA = "0x2F6655C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E3168", Offset = "0x15E3168")]
			get
			{
				return null;
			}
			[Token(Token = "0x600037E")]
			[Address(RVA = "0x2F66564", Offset = "0x2F66564", VA = "0x2F66564")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E3178", Offset = "0x15E3178")]
			private set
			{
			}
		}

		[Token(Token = "0x17000092")]
		public bool isGrounded
		{
			[Token(Token = "0x600037F")]
			[Address(RVA = "0x2F6656C", Offset = "0x2F6656C", VA = "0x2F6656C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E3188", Offset = "0x15E3188")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000380")]
			[Address(RVA = "0x2F66574", Offset = "0x2F66574", VA = "0x2F66574")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E3198", Offset = "0x15E3198")]
			private set
			{
			}
		}

		[Token(Token = "0x17000093")]
		public Transform root
		{
			[Token(Token = "0x6000381")]
			[Address(RVA = "0x2F66580", Offset = "0x2F66580", VA = "0x2F66580")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E31A8", Offset = "0x15E31A8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000382")]
			[Address(RVA = "0x2F66588", Offset = "0x2F66588", VA = "0x2F66588")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E31B8", Offset = "0x15E31B8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000094")]
		public RaycastHit rootHit
		{
			[Token(Token = "0x6000383")]
			[Address(RVA = "0x2F66590", Offset = "0x2F66590", VA = "0x2F66590")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E31C8", Offset = "0x15E31C8")]
			get
			{
				return default(RaycastHit);
			}
			[Token(Token = "0x6000384")]
			[Address(RVA = "0x2F665A8", Offset = "0x2F665A8", VA = "0x2F665A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E31D8", Offset = "0x15E31D8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000095")]
		public bool rootGrounded
		{
			[Token(Token = "0x6000385")]
			[Address(RVA = "0x2F665C8", Offset = "0x2F665C8", VA = "0x2F665C8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000096")]
		public Vector3 up
		{
			[Token(Token = "0x600038D")]
			[Address(RVA = "0x2F607A4", Offset = "0x2F607A4", VA = "0x2F607A4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000097")]
		private bool useRootRotation
		{
			[Token(Token = "0x6000390")]
			[Address(RVA = "0x2F6797C", Offset = "0x2F6797C", VA = "0x2F6797C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000386")]
		[Address(RVA = "0x2F6661C", Offset = "0x2F6661C", VA = "0x2F6661C")]
		public RaycastHit GetRootHit(float maxDistanceMlp = 10f)
		{
			return default(RaycastHit);
		}

		[Token(Token = "0x6000387")]
		[Address(RVA = "0x2F669FC", Offset = "0x2F669FC", VA = "0x2F669FC")]
		public bool IsValid(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000388")]
		[Address(RVA = "0x2F5FC10", Offset = "0x2F5FC10", VA = "0x2F5FC10")]
		public void Initiate(Transform root, Transform[] feet)
		{
		}

		[Token(Token = "0x6000389")]
		[Address(RVA = "0x2F60468", Offset = "0x2F60468", VA = "0x2F60468")]
		public void Update()
		{
		}

		[Token(Token = "0x600038A")]
		[Address(RVA = "0x2F623A8", Offset = "0x2F623A8", VA = "0x2F623A8")]
		public Vector3 GetLegsPlaneNormal()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600038B")]
		[Address(RVA = "0x2F5F718", Offset = "0x2F5F718", VA = "0x2F5F718")]
		public void Reset()
		{
		}

		[Token(Token = "0x600038C")]
		[Address(RVA = "0x2F66CC0", Offset = "0x2F66CC0", VA = "0x2F66CC0")]
		public void LogWarning(string message)
		{
		}

		[Token(Token = "0x600038E")]
		[Address(RVA = "0x2F67A4C", Offset = "0x2F67A4C", VA = "0x2F67A4C")]
		public float GetVerticalOffset(Vector3 p1, Vector3 p2)
		{
			return default(float);
		}

		[Token(Token = "0x600038F")]
		[Address(RVA = "0x2F67BB4", Offset = "0x2F67BB4", VA = "0x2F67BB4")]
		public Vector3 Flatten(Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000391")]
		[Address(RVA = "0x2F67CB8", Offset = "0x2F67CB8", VA = "0x2F67CB8")]
		public Vector3 GetFootCenterOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000392")]
		[Address(RVA = "0x2F5F354", Offset = "0x2F5F354", VA = "0x2F5F354")]
		public Grounding()
		{
		}
	}
	[Token(Token = "0x2000068")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x15D43A4", Offset = "0x15D43A4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x15D43A4", Offset = "0x15D43A4")]
	public class AimIK : IK
	{
		[Token(Token = "0x4000338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverAim solver;

		[Token(Token = "0x6000393")]
		[Address(RVA = "0x2367E8C", Offset = "0x2367E8C", VA = "0x2367E8C", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E31E8", Offset = "0x15E31E8")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000394")]
		[Address(RVA = "0x2367ED8", Offset = "0x2367ED8", VA = "0x2367ED8", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3220", Offset = "0x15E3220")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000395")]
		[Address(RVA = "0x2367F24", Offset = "0x2367F24", VA = "0x2367F24")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3258", Offset = "0x15E3258")]
		private void OpenSetupTutorial()
		{
		}

		[Token(Token = "0x6000396")]
		[Address(RVA = "0x2367F70", Offset = "0x2367F70", VA = "0x2367F70")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3290", Offset = "0x15E3290")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000397")]
		[Address(RVA = "0x2367FBC", Offset = "0x2367FBC", VA = "0x2367FBC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E32C8", Offset = "0x15E32C8")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000398")]
		[Address(RVA = "0x2368008", Offset = "0x2368008", VA = "0x2368008", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000399")]
		[Address(RVA = "0x2368010", Offset = "0x2368010", VA = "0x2368010")]
		public AimIK()
		{
		}
	}
	[Token(Token = "0x2000069")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x15D4404", Offset = "0x15D4404")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x15D4404", Offset = "0x15D4404")]
	public class ArmIK : IK
	{
		[Token(Token = "0x4000339")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverArm solver;

		[Token(Token = "0x600039A")]
		[Address(RVA = "0x2368990", Offset = "0x2368990", VA = "0x2368990", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3300", Offset = "0x15E3300")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x600039B")]
		[Address(RVA = "0x23689DC", Offset = "0x23689DC", VA = "0x23689DC", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3338", Offset = "0x15E3338")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x600039C")]
		[Address(RVA = "0x2368A28", Offset = "0x2368A28", VA = "0x2368A28")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3370", Offset = "0x15E3370")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x600039D")]
		[Address(RVA = "0x2368A74", Offset = "0x2368A74", VA = "0x2368A74")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E33A8", Offset = "0x15E33A8")]
		private void ASThread()
		{
		}

		[Token(Token = "0x600039E")]
		[Address(RVA = "0x2368AC0", Offset = "0x2368AC0", VA = "0x2368AC0", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x600039F")]
		[Address(RVA = "0x2368AC8", Offset = "0x2368AC8", VA = "0x2368AC8")]
		public ArmIK()
		{
		}
	}
	[Token(Token = "0x200006A")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x15D4464", Offset = "0x15D4464")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x15D4464", Offset = "0x15D4464")]
	public class CCDIK : IK
	{
		[Token(Token = "0x400033A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverCCD solver;

		[Token(Token = "0x60003A0")]
		[Address(RVA = "0x236A254", Offset = "0x236A254", VA = "0x236A254", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E33E0", Offset = "0x15E33E0")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60003A1")]
		[Address(RVA = "0x236A2A0", Offset = "0x236A2A0", VA = "0x236A2A0", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3418", Offset = "0x15E3418")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60003A2")]
		[Address(RVA = "0x236A2EC", Offset = "0x236A2EC", VA = "0x236A2EC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3450", Offset = "0x15E3450")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60003A3")]
		[Address(RVA = "0x236A338", Offset = "0x236A338", VA = "0x236A338")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3488", Offset = "0x15E3488")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60003A4")]
		[Address(RVA = "0x236A384", Offset = "0x236A384", VA = "0x236A384", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60003A5")]
		[Address(RVA = "0x236A38C", Offset = "0x236A38C", VA = "0x236A38C")]
		public CCDIK()
		{
		}
	}
	[Token(Token = "0x200006B")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x15D44C4", Offset = "0x15D44C4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x15D44C4", Offset = "0x15D44C4")]
	public class FABRIK : IK
	{
		[Token(Token = "0x400033B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverFABRIK solver;

		[Token(Token = "0x60003A6")]
		[Address(RVA = "0x236AE54", Offset = "0x236AE54", VA = "0x236AE54", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E34C0", Offset = "0x15E34C0")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60003A7")]
		[Address(RVA = "0x236AEA0", Offset = "0x236AEA0", VA = "0x236AEA0", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E34F8", Offset = "0x15E34F8")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60003A8")]
		[Address(RVA = "0x236AEEC", Offset = "0x236AEEC", VA = "0x236AEEC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3530", Offset = "0x15E3530")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60003A9")]
		[Address(RVA = "0x236AF38", Offset = "0x236AF38", VA = "0x236AF38")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3568", Offset = "0x15E3568")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60003AA")]
		[Address(RVA = "0x236AF84", Offset = "0x236AF84", VA = "0x236AF84", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60003AB")]
		[Address(RVA = "0x236AF8C", Offset = "0x236AF8C", VA = "0x236AF8C")]
		public FABRIK()
		{
		}
	}
	[Token(Token = "0x200006C")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x15D4524", Offset = "0x15D4524")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x15D4524", Offset = "0x15D4524")]
	public class FABRIKRoot : IK
	{
		[Token(Token = "0x400033C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverFABRIKRoot solver;

		[Token(Token = "0x60003AC")]
		[Address(RVA = "0x236B630", Offset = "0x236B630", VA = "0x236B630", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E35A0", Offset = "0x15E35A0")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60003AD")]
		[Address(RVA = "0x236B67C", Offset = "0x236B67C", VA = "0x236B67C", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E35D8", Offset = "0x15E35D8")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60003AE")]
		[Address(RVA = "0x236B6C8", Offset = "0x236B6C8", VA = "0x236B6C8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3610", Offset = "0x15E3610")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60003AF")]
		[Address(RVA = "0x236B714", Offset = "0x236B714", VA = "0x236B714")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3648", Offset = "0x15E3648")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60003B0")]
		[Address(RVA = "0x236B760", Offset = "0x236B760", VA = "0x236B760", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60003B1")]
		[Address(RVA = "0x236B768", Offset = "0x236B768", VA = "0x236B768")]
		public FABRIKRoot()
		{
		}
	}
	[Token(Token = "0x200006D")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x15D4584", Offset = "0x15D4584")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x15D4584", Offset = "0x15D4584")]
	public class FullBodyBipedIK : IK
	{
		[Token(Token = "0x400033D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BipedReferences references;

		[Token(Token = "0x400033E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IKSolverFullBodyBiped solver;

		[Token(Token = "0x60003B2")]
		[Address(RVA = "0x2F5DD00", Offset = "0x2F5DD00", VA = "0x2F5DD00", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3680", Offset = "0x15E3680")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60003B3")]
		[Address(RVA = "0x2F5DD4C", Offset = "0x2F5DD4C", VA = "0x2F5DD4C", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E36B8", Offset = "0x15E36B8")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60003B4")]
		[Address(RVA = "0x2F5DD98", Offset = "0x2F5DD98", VA = "0x2F5DD98")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E36F0", Offset = "0x15E36F0")]
		private void OpenSetupTutorial()
		{
		}

		[Token(Token = "0x60003B5")]
		[Address(RVA = "0x2F5DDE4", Offset = "0x2F5DDE4", VA = "0x2F5DDE4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3728", Offset = "0x15E3728")]
		private void OpenInspectorTutorial()
		{
		}

		[Token(Token = "0x60003B6")]
		[Address(RVA = "0x2F5DE30", Offset = "0x2F5DE30", VA = "0x2F5DE30")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3760", Offset = "0x15E3760")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60003B7")]
		[Address(RVA = "0x2F5DE7C", Offset = "0x2F5DE7C", VA = "0x2F5DE7C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3798", Offset = "0x15E3798")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60003B8")]
		[Address(RVA = "0x2F5DEC8", Offset = "0x2F5DEC8", VA = "0x2F5DEC8")]
		public void SetReferences(BipedReferences references, Transform rootNode)
		{
		}

		[Token(Token = "0x60003B9")]
		[Address(RVA = "0x2F5DF0C", Offset = "0x2F5DF0C", VA = "0x2F5DF0C", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60003BA")]
		[Address(RVA = "0x2F5DF14", Offset = "0x2F5DF14", VA = "0x2F5DF14")]
		public bool ReferencesError(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60003BB")]
		[Address(RVA = "0x2F5E0DC", Offset = "0x2F5E0DC", VA = "0x2F5E0DC")]
		public bool ReferencesWarning(ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60003BC")]
		[Address(RVA = "0x2F5E43C", Offset = "0x2F5E43C", VA = "0x2F5E43C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E37D0", Offset = "0x15E37D0")]
		private void Reinitiate()
		{
		}

		[Token(Token = "0x60003BD")]
		[Address(RVA = "0x2F5E45C", Offset = "0x2F5E45C", VA = "0x2F5E45C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3808", Offset = "0x15E3808")]
		private void AutoDetectReferences()
		{
		}

		[Token(Token = "0x60003BE")]
		[Address(RVA = "0x2F5E550", Offset = "0x2F5E550", VA = "0x2F5E550")]
		public FullBodyBipedIK()
		{
		}
	}
	[Token(Token = "0x200006E")]
	public abstract class IK : SolverManager
	{
		[Token(Token = "0x60003BF")]
		public abstract IKSolver GetIKSolver();

		[Token(Token = "0x60003C0")]
		[Address(RVA = "0x2F6BCC0", Offset = "0x2F6BCC0", VA = "0x2F6BCC0", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x60003C1")]
		[Address(RVA = "0x2F6BD48", Offset = "0x2F6BD48", VA = "0x2F6BD48", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x60003C2")]
		[Address(RVA = "0x2F6BDBC", Offset = "0x2F6BDBC", VA = "0x2F6BDBC", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x60003C3")]
		protected abstract void OpenUserManual();

		[Token(Token = "0x60003C4")]
		protected abstract void OpenScriptReference();

		[Token(Token = "0x60003C5")]
		[Address(RVA = "0x2F5E5F0", Offset = "0x2F5E5F0", VA = "0x2F5E5F0")]
		protected IK()
		{
		}
	}
	[Token(Token = "0x200006F")]
	public class IKExecutionOrder : MonoBehaviour
	{
		[Token(Token = "0x400033F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D77D0", Offset = "0x15D77D0")]
		public IK[] IKComponents;

		[Token(Token = "0x4000340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D7808", Offset = "0x15D7808")]
		public Animator animator;

		[Token(Token = "0x4000341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool fixedFrame;

		[Token(Token = "0x17000098")]
		private bool animatePhysics
		{
			[Token(Token = "0x60003C6")]
			[Address(RVA = "0x2F6E4E4", Offset = "0x2F6E4E4", VA = "0x2F6E4E4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60003C7")]
		[Address(RVA = "0x2F6E580", Offset = "0x2F6E580", VA = "0x2F6E580")]
		private void Start()
		{
		}

		[Token(Token = "0x60003C8")]
		[Address(RVA = "0x2F6E5F0", Offset = "0x2F6E5F0", VA = "0x2F6E5F0")]
		private void Update()
		{
		}

		[Token(Token = "0x60003C9")]
		[Address(RVA = "0x2F6E6AC", Offset = "0x2F6E6AC", VA = "0x2F6E6AC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60003CA")]
		[Address(RVA = "0x2F6E6E8", Offset = "0x2F6E6E8", VA = "0x2F6E6E8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60003CB")]
		[Address(RVA = "0x2F6E624", Offset = "0x2F6E624", VA = "0x2F6E624")]
		private void FixTransforms()
		{
		}

		[Token(Token = "0x60003CC")]
		[Address(RVA = "0x2F6E778", Offset = "0x2F6E778", VA = "0x2F6E778")]
		public IKExecutionOrder()
		{
		}
	}
	[Token(Token = "0x2000070")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x15D45E4", Offset = "0x15D45E4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x15D45E4", Offset = "0x15D45E4")]
	public class LegIK : IK
	{
		[Token(Token = "0x4000342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLeg solver;

		[Token(Token = "0x60003CD")]
		[Address(RVA = "0x28BA218", Offset = "0x28BA218", VA = "0x28BA218", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3840", Offset = "0x15E3840")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60003CE")]
		[Address(RVA = "0x28BA264", Offset = "0x28BA264", VA = "0x28BA264", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3878", Offset = "0x15E3878")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60003CF")]
		[Address(RVA = "0x28BA2B0", Offset = "0x28BA2B0", VA = "0x28BA2B0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E38B0", Offset = "0x15E38B0")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60003D0")]
		[Address(RVA = "0x28BA2FC", Offset = "0x28BA2FC", VA = "0x28BA2FC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E38E8", Offset = "0x15E38E8")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60003D1")]
		[Address(RVA = "0x28BA348", Offset = "0x28BA348", VA = "0x28BA348", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60003D2")]
		[Address(RVA = "0x28BA350", Offset = "0x28BA350", VA = "0x28BA350")]
		public LegIK()
		{
		}
	}
	[Token(Token = "0x2000071")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x15D4644", Offset = "0x15D4644")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x15D4644", Offset = "0x15D4644")]
	public class LimbIK : IK
	{
		[Token(Token = "0x4000343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLimb solver;

		[Token(Token = "0x60003D3")]
		[Address(RVA = "0x28BA3C4", Offset = "0x28BA3C4", VA = "0x28BA3C4", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3920", Offset = "0x15E3920")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60003D4")]
		[Address(RVA = "0x28BA410", Offset = "0x28BA410", VA = "0x28BA410", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3958", Offset = "0x15E3958")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60003D5")]
		[Address(RVA = "0x28BA45C", Offset = "0x28BA45C", VA = "0x28BA45C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3990", Offset = "0x15E3990")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60003D6")]
		[Address(RVA = "0x28BA4A8", Offset = "0x28BA4A8", VA = "0x28BA4A8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E39C8", Offset = "0x15E39C8")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60003D7")]
		[Address(RVA = "0x28BA4F4", Offset = "0x28BA4F4", VA = "0x28BA4F4", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60003D8")]
		[Address(RVA = "0x28BA4FC", Offset = "0x28BA4FC", VA = "0x28BA4FC")]
		public LimbIK()
		{
		}
	}
	[Token(Token = "0x2000072")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x15D46A4", Offset = "0x15D46A4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x15D46A4", Offset = "0x15D46A4")]
	public class LookAtIK : IK
	{
		[Token(Token = "0x4000344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLookAt solver;

		[Token(Token = "0x60003D9")]
		[Address(RVA = "0x28BB3D0", Offset = "0x28BB3D0", VA = "0x28BB3D0", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3A00", Offset = "0x15E3A00")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60003DA")]
		[Address(RVA = "0x28BB41C", Offset = "0x28BB41C", VA = "0x28BB41C", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3A38", Offset = "0x15E3A38")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60003DB")]
		[Address(RVA = "0x28BB468", Offset = "0x28BB468", VA = "0x28BB468")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3A70", Offset = "0x15E3A70")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60003DC")]
		[Address(RVA = "0x28BB4B4", Offset = "0x28BB4B4", VA = "0x28BB4B4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3AA8", Offset = "0x15E3AA8")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60003DD")]
		[Address(RVA = "0x28BB500", Offset = "0x28BB500", VA = "0x28BB500", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60003DE")]
		[Address(RVA = "0x28BB508", Offset = "0x28BB508", VA = "0x28BB508")]
		public LookAtIK()
		{
		}
	}
	[Token(Token = "0x2000073")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x15D4704", Offset = "0x15D4704")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x15D4704", Offset = "0x15D4704")]
	public class TrigonometricIK : IK
	{
		[Token(Token = "0x4000345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverTrigonometric solver;

		[Token(Token = "0x60003DF")]
		[Address(RVA = "0x28C410C", Offset = "0x28C410C", VA = "0x28C410C", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3AE0", Offset = "0x15E3AE0")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60003E0")]
		[Address(RVA = "0x28C4158", Offset = "0x28C4158", VA = "0x28C4158", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3B18", Offset = "0x15E3B18")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60003E1")]
		[Address(RVA = "0x28C41A4", Offset = "0x28C41A4", VA = "0x28C41A4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3B50", Offset = "0x15E3B50")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60003E2")]
		[Address(RVA = "0x28C41F0", Offset = "0x28C41F0", VA = "0x28C41F0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3B88", Offset = "0x15E3B88")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60003E3")]
		[Address(RVA = "0x28C423C", Offset = "0x28C423C", VA = "0x28C423C", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60003E4")]
		[Address(RVA = "0x28C4244", Offset = "0x28C4244", VA = "0x28C4244")]
		public TrigonometricIK()
		{
		}
	}
	[Token(Token = "0x2000074")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x15D4764", Offset = "0x15D4764")]
	public class VRIK : IK
	{
		[Serializable]
		[Token(Token = "0x20001FE")]
		public class References
		{
			[Token(Token = "0x4000D00")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform root;

			[Token(Token = "0x4000D01")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform pelvis;

			[Token(Token = "0x4000D02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform spine;

			[Token(Token = "0x4000D03")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DF100", Offset = "0x15DF100")]
			public Transform chest;

			[Token(Token = "0x4000D04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DF138", Offset = "0x15DF138")]
			public Transform neck;

			[Token(Token = "0x4000D05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Transform head;

			[Token(Token = "0x4000D06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DF170", Offset = "0x15DF170")]
			public Transform leftShoulder;

			[Token(Token = "0x4000D07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Transform leftUpperArm;

			[Token(Token = "0x4000D08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Transform leftForearm;

			[Token(Token = "0x4000D09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public Transform leftHand;

			[Token(Token = "0x4000D0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DF1A8", Offset = "0x15DF1A8")]
			public Transform rightShoulder;

			[Token(Token = "0x4000D0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public Transform rightUpperArm;

			[Token(Token = "0x4000D0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public Transform rightForearm;

			[Token(Token = "0x4000D0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public Transform rightHand;

			[Token(Token = "0x4000D0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DF1E0", Offset = "0x15DF1E0")]
			public Transform leftThigh;

			[Token(Token = "0x4000D0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DF218", Offset = "0x15DF218")]
			public Transform leftCalf;

			[Token(Token = "0x4000D10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DF250", Offset = "0x15DF250")]
			public Transform leftFoot;

			[Token(Token = "0x4000D11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DF288", Offset = "0x15DF288")]
			public Transform leftToes;

			[Token(Token = "0x4000D12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DF2C0", Offset = "0x15DF2C0")]
			public Transform rightThigh;

			[Token(Token = "0x4000D13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DF2F8", Offset = "0x15DF2F8")]
			public Transform rightCalf;

			[Token(Token = "0x4000D14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DF330", Offset = "0x15DF330")]
			public Transform rightFoot;

			[Token(Token = "0x4000D15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DF368", Offset = "0x15DF368")]
			public Transform rightToes;

			[Token(Token = "0x17000188")]
			public bool isFilled
			{
				[Token(Token = "0x6000D06")]
				[Address(RVA = "0x28C58BC", Offset = "0x28C58BC", VA = "0x28C58BC")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000189")]
			public bool isEmpty
			{
				[Token(Token = "0x6000D07")]
				[Address(RVA = "0x28C5440", Offset = "0x28C5440", VA = "0x28C5440")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6000D05")]
			[Address(RVA = "0x28C5F58", Offset = "0x28C5F58", VA = "0x28C5F58")]
			public Transform[] GetTransforms()
			{
				return null;
			}

			[Token(Token = "0x6000D08")]
			[Address(RVA = "0x28C4F1C", Offset = "0x28C4F1C", VA = "0x28C4F1C")]
			public static bool AutoDetectReferences(Transform root, out References references)
			{
				return default(bool);
			}

			[Token(Token = "0x6000D09")]
			[Address(RVA = "0x28C5F50", Offset = "0x28C5F50", VA = "0x28C5F50")]
			public References()
			{
			}
		}

		[Token(Token = "0x4000346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "ContextMenuItemAttribute", RVA = "0x15D7840", Offset = "0x15D7840")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D7840", Offset = "0x15D7840")]
		public References references;

		[Token(Token = "0x4000347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D78BC", Offset = "0x15D78BC")]
		public IKSolverVR solver;

		[Token(Token = "0x60003E5")]
		[Address(RVA = "0x28C4E10", Offset = "0x28C4E10", VA = "0x28C4E10", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3BC0", Offset = "0x15E3BC0")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60003E6")]
		[Address(RVA = "0x28C4E5C", Offset = "0x28C4E5C", VA = "0x28C4E5C", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3BF8", Offset = "0x15E3BF8")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60003E7")]
		[Address(RVA = "0x28C4EA8", Offset = "0x28C4EA8", VA = "0x28C4EA8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3C30", Offset = "0x15E3C30")]
		private void OpenSetupTutorial()
		{
		}

		[Token(Token = "0x60003E8")]
		[Address(RVA = "0x28C4EF4", Offset = "0x28C4EF4", VA = "0x28C4EF4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3C68", Offset = "0x15E3C68")]
		public void AutoDetectReferences()
		{
		}

		[Token(Token = "0x60003E9")]
		[Address(RVA = "0x28C539C", Offset = "0x28C539C", VA = "0x28C539C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3CA0", Offset = "0x15E3CA0")]
		public void GuessHandOrientations()
		{
		}

		[Token(Token = "0x60003EA")]
		[Address(RVA = "0x28C53C4", Offset = "0x28C53C4", VA = "0x28C53C4", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60003EB")]
		[Address(RVA = "0x28C53CC", Offset = "0x28C53CC", VA = "0x28C53CC", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x60003EC")]
		[Address(RVA = "0x28C5D38", Offset = "0x28C5D38", VA = "0x28C5D38", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x60003ED")]
		[Address(RVA = "0x28C5EB0", Offset = "0x28C5EB0", VA = "0x28C5EB0")]
		public VRIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000075")]
	public class FABRIKChain
	{
		[Token(Token = "0x4000348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FABRIK ik;

		[Token(Token = "0x4000349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D78F4", Offset = "0x15D78F4")]
		public float pull;

		[Token(Token = "0x400034A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D790C", Offset = "0x15D790C")]
		public float pin;

		[Token(Token = "0x400034B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int[] children;

		[Token(Token = "0x60003EE")]
		[Address(RVA = "0x236B000", Offset = "0x236B000", VA = "0x236B000")]
		public bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60003EF")]
		[Address(RVA = "0x236B0D4", Offset = "0x236B0D4", VA = "0x236B0D4")]
		public void Initiate()
		{
		}

		[Token(Token = "0x60003F0")]
		[Address(RVA = "0x236B0F4", Offset = "0x236B0F4", VA = "0x236B0F4")]
		public void Stage1(FABRIKChain[] chain)
		{
		}

		[Token(Token = "0x60003F1")]
		[Address(RVA = "0x236B4C4", Offset = "0x236B4C4", VA = "0x236B4C4")]
		public void Stage2(Vector3 rootPosition, FABRIKChain[] chain)
		{
		}

		[Token(Token = "0x60003F2")]
		[Address(RVA = "0x236B1C8", Offset = "0x236B1C8", VA = "0x236B1C8")]
		private Vector3 GetCentroid(FABRIKChain[] chain)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60003F3")]
		[Address(RVA = "0x236B5BC", Offset = "0x236B5BC", VA = "0x236B5BC")]
		public FABRIKChain()
		{
		}
	}
	[Token(Token = "0x2000076")]
	public class FBBIKArmBending : MonoBehaviour
	{
		[Token(Token = "0x400034C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x400034D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 bendDirectionOffsetLeft;

		[Token(Token = "0x400034E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 bendDirectionOffsetRight;

		[Token(Token = "0x400034F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 characterSpaceBendOffsetLeft;

		[Token(Token = "0x4000350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 characterSpaceBendOffsetRight;

		[Token(Token = "0x4000351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion leftHandTargetRotation;

		[Token(Token = "0x4000352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Quaternion rightHandTargetRotation;

		[Token(Token = "0x4000353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool initiated;

		[Token(Token = "0x60003F4")]
		[Address(RVA = "0x236B7DC", Offset = "0x236B7DC", VA = "0x236B7DC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60003F5")]
		[Address(RVA = "0x236BD58", Offset = "0x236BD58", VA = "0x236BD58")]
		private void OnPostFBBIK()
		{
		}

		[Token(Token = "0x60003F6")]
		[Address(RVA = "0x236BF18", Offset = "0x236BF18", VA = "0x236BF18")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60003F7")]
		[Address(RVA = "0x236C034", Offset = "0x236C034", VA = "0x236C034")]
		public FBBIKArmBending()
		{
		}
	}
	[Token(Token = "0x2000077")]
	public class FBBIKHeadEffector : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20001FF")]
		public class BendBone
		{
			[Token(Token = "0x4000D16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DF3A0", Offset = "0x15DF3A0")]
			public Transform transform;

			[Token(Token = "0x4000D17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DF3D8", Offset = "0x15DF3D8")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DF3D8", Offset = "0x15DF3D8")]
			public float weight;

			[Token(Token = "0x4000D18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private Quaternion defaultLocalRotation;

			[Token(Token = "0x6000D0A")]
			[Address(RVA = "0x2F58828", Offset = "0x2F58828", VA = "0x2F58828")]
			public BendBone()
			{
			}

			[Token(Token = "0x6000D0B")]
			[Address(RVA = "0x2F588A8", Offset = "0x2F588A8", VA = "0x2F588A8")]
			public BendBone(Transform transform, float weight)
			{
			}

			[Token(Token = "0x6000D0C")]
			[Address(RVA = "0x2F58958", Offset = "0x2F58958", VA = "0x2F58958")]
			public void StoreDefaultLocalState()
			{
			}

			[Token(Token = "0x6000D0D")]
			[Address(RVA = "0x2F58990", Offset = "0x2F58990", VA = "0x2F58990")]
			public void FixTransforms()
			{
			}
		}

		[Token(Token = "0x4000354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D7924", Offset = "0x15D7924")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x15D795C", Offset = "0x15D795C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D795C", Offset = "0x15D795C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D795C", Offset = "0x15D795C")]
		public float positionWeight;

		[Token(Token = "0x4000356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D79D4", Offset = "0x15D79D4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D79D4", Offset = "0x15D79D4")]
		public float bodyWeight;

		[Token(Token = "0x4000357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D7A28", Offset = "0x15D7A28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D7A28", Offset = "0x15D7A28")]
		public float thighWeight;

		[Token(Token = "0x4000358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D7A7C", Offset = "0x15D7A7C")]
		public bool handsPullBody;

		[Token(Token = "0x4000359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x15D7AB4", Offset = "0x15D7AB4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D7AB4", Offset = "0x15D7AB4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D7AB4", Offset = "0x15D7AB4")]
		public float rotationWeight;

		[Token(Token = "0x400035A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D7B2C", Offset = "0x15D7B2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D7B2C", Offset = "0x15D7B2C")]
		public float bodyClampWeight;

		[Token(Token = "0x400035B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D7B80", Offset = "0x15D7B80")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D7B80", Offset = "0x15D7B80")]
		public float headClampWeight;

		[Token(Token = "0x400035C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D7BD4", Offset = "0x15D7BD4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D7BD4", Offset = "0x15D7BD4")]
		public float bendWeight;

		[Token(Token = "0x400035D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D7C28", Offset = "0x15D7C28")]
		public BendBone[] bendBones;

		[Token(Token = "0x400035E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x15D7C60", Offset = "0x15D7C60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D7C60", Offset = "0x15D7C60")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D7C60", Offset = "0x15D7C60")]
		public float CCDWeight;

		[Token(Token = "0x400035F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D7CD8", Offset = "0x15D7CD8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D7CD8", Offset = "0x15D7CD8")]
		public float roll;

		[Token(Token = "0x4000360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D7D2C", Offset = "0x15D7D2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D7D2C", Offset = "0x15D7D2C")]
		public float damper;

		[Token(Token = "0x4000361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D7D84", Offset = "0x15D7D84")]
		public Transform[] CCDBones;

		[Token(Token = "0x4000362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x15D7DBC", Offset = "0x15D7DBC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D7DBC", Offset = "0x15D7DBC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D7DBC", Offset = "0x15D7DBC")]
		public float postStretchWeight;

		[Token(Token = "0x4000363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D7E34", Offset = "0x15D7E34")]
		public float maxStretch;

		[Token(Token = "0x4000364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D7E6C", Offset = "0x15D7E6C")]
		public float stretchDamper;

		[Token(Token = "0x4000365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D7EA4", Offset = "0x15D7EA4")]
		public bool fixHead;

		[Token(Token = "0x4000366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D7EDC", Offset = "0x15D7EDC")]
		public Transform[] stretchBones;

		[Token(Token = "0x4000367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x15D7F14", Offset = "0x15D7F14")]
		public Vector3 chestDirection;

		[Token(Token = "0x4000368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D7F4C", Offset = "0x15D7F4C")]
		public float chestDirectionWeight;

		[Token(Token = "0x4000369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform[] chestBones;

		[Token(Token = "0x400036A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public IKSolver.UpdateDelegate OnPostHeadEffectorFK;

		[Token(Token = "0x400036B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 offset;

		[Token(Token = "0x400036C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 headToBody;

		[Token(Token = "0x400036D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 shoulderCenterToHead;

		[Token(Token = "0x400036E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private Vector3 headToLeftThigh;

		[Token(Token = "0x400036F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Vector3 headToRightThigh;

		[Token(Token = "0x4000370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Vector3 leftShoulderPos;

		[Token(Token = "0x4000371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Vector3 rightShoulderPos;

		[Token(Token = "0x4000372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float shoulderDist;

		[Token(Token = "0x4000373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float leftShoulderDist;

		[Token(Token = "0x4000374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private float rightShoulderDist;

		[Token(Token = "0x4000375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Quaternion chestRotation;

		[Token(Token = "0x4000376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Quaternion headRotationRelativeToRoot;

		[Token(Token = "0x4000377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Quaternion[] ccdDefaultLocalRotations;

		[Token(Token = "0x4000378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Vector3 headLocalPosition;

		[Token(Token = "0x4000379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private Quaternion headLocalRotation;

		[Token(Token = "0x400037A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Vector3[] stretchLocalPositions;

		[Token(Token = "0x400037B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Quaternion[] stretchLocalRotations;

		[Token(Token = "0x400037C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private Vector3[] chestLocalPositions;

		[Token(Token = "0x400037D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private Quaternion[] chestLocalRotations;

		[Token(Token = "0x400037E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private int bendBonesCount;

		[Token(Token = "0x400037F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private int ccdBonesCount;

		[Token(Token = "0x4000380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private int stretchBonesCount;

		[Token(Token = "0x4000381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private int chestBonesCount;

		[Token(Token = "0x60003F8")]
		[Address(RVA = "0x236C03C", Offset = "0x236C03C", VA = "0x236C03C")]
		private void Start()
		{
		}

		[Token(Token = "0x60003F9")]
		[Address(RVA = "0x236C3C0", Offset = "0x236C3C0", VA = "0x236C3C0")]
		private void OnStoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60003FA")]
		[Address(RVA = "0x236C888", Offset = "0x236C888", VA = "0x236C888")]
		private void OnFixTransforms()
		{
		}

		[Token(Token = "0x60003FB")]
		[Address(RVA = "0x236CC58", Offset = "0x236CC58", VA = "0x236CC58")]
		private void OnPreRead()
		{
		}

		[Token(Token = "0x60003FC")]
		[Address(RVA = "0x236D5D0", Offset = "0x236D5D0", VA = "0x236D5D0")]
		private void SpineBend()
		{
		}

		[Token(Token = "0x60003FD")]
		[Address(RVA = "0x236D91C", Offset = "0x236D91C", VA = "0x236D91C")]
		private void CCDPass()
		{
		}

		[Token(Token = "0x60003FE")]
		[Address(RVA = "0x236DCB8", Offset = "0x236DCB8", VA = "0x236DCB8")]
		private void Iterate(int iteration)
		{
		}

		[Token(Token = "0x60003FF")]
		[Address(RVA = "0x236E724", Offset = "0x236E724", VA = "0x236E724")]
		private void OnPostUpdate()
		{
		}

		[Token(Token = "0x6000400")]
		[Address(RVA = "0x236D2FC", Offset = "0x236D2FC", VA = "0x236D2FC")]
		private void ChestDirection()
		{
		}

		[Token(Token = "0x6000401")]
		[Address(RVA = "0x236E934", Offset = "0x236E934", VA = "0x236E934")]
		private void PostStretching()
		{
		}

		[Token(Token = "0x6000402")]
		[Address(RVA = "0x236E5E0", Offset = "0x236E5E0", VA = "0x236E5E0")]
		private void LerpSolverPosition(IKEffector effector, Vector3 position, float weight, Vector3 offset)
		{
		}

		[Token(Token = "0x6000403")]
		[Address(RVA = "0x236E444", Offset = "0x236E444", VA = "0x236E444")]
		private void Solve(ref Vector3 pos1, ref Vector3 pos2, float nominalDistance)
		{
		}

		[Token(Token = "0x6000404")]
		[Address(RVA = "0x236ECA0", Offset = "0x236ECA0", VA = "0x236ECA0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000405")]
		[Address(RVA = "0x236EF84", Offset = "0x236EF84", VA = "0x236EF84")]
		public FBBIKHeadEffector()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000078")]
	public class FBIKChain
	{
		[Serializable]
		[Token(Token = "0x2000200")]
		public class ChildConstraint
		{
			[Token(Token = "0x4000D19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float pushElasticity;

			[Token(Token = "0x4000D1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float pullElasticity;

			[Token(Token = "0x4000D1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			private Transform bone1;

			[Token(Token = "0x4000D1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			private Transform bone2;

			[Token(Token = "0x4000D1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DF44C", Offset = "0x15DF44C")]
			private float <nominalDistance>k__BackingField;

			[Token(Token = "0x4000D1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DF45C", Offset = "0x15DF45C")]
			private bool <isRigid>k__BackingField;

			[Token(Token = "0x4000D1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float crossFade;

			[Token(Token = "0x4000D20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float inverseCrossFade;

			[Token(Token = "0x4000D21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int chain1Index;

			[Token(Token = "0x4000D22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int chain2Index;

			[Token(Token = "0x1700018A")]
			public float nominalDistance
			{
				[Token(Token = "0x6000D0E")]
				[Address(RVA = "0x2F5C230", Offset = "0x2F5C230", VA = "0x2F5C230")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5CB4", Offset = "0x15E5CB4")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000D0F")]
				[Address(RVA = "0x2F5C238", Offset = "0x2F5C238", VA = "0x2F5C238")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5CC4", Offset = "0x15E5CC4")]
				private set
				{
				}
			}

			[Token(Token = "0x1700018B")]
			public bool isRigid
			{
				[Token(Token = "0x6000D10")]
				[Address(RVA = "0x2F5C240", Offset = "0x2F5C240", VA = "0x2F5C240")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5CD4", Offset = "0x15E5CD4")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6000D11")]
				[Address(RVA = "0x2F5C248", Offset = "0x2F5C248", VA = "0x2F5C248")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5CE4", Offset = "0x15E5CE4")]
				private set
				{
				}
			}

			[Token(Token = "0x6000D12")]
			[Address(RVA = "0x2F5C254", Offset = "0x2F5C254", VA = "0x2F5C254")]
			public ChildConstraint(Transform bone1, Transform bone2, float pushElasticity = 0f, float pullElasticity = 0f)
			{
			}

			[Token(Token = "0x6000D13")]
			[Address(RVA = "0x2F596B4", Offset = "0x2F596B4", VA = "0x2F596B4")]
			public void Initiate(IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x6000D14")]
			[Address(RVA = "0x2F59EF4", Offset = "0x2F59EF4", VA = "0x2F59EF4")]
			public void OnPreSolve(IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x6000D15")]
			[Address(RVA = "0x2F5BF2C", Offset = "0x2F5BF2C", VA = "0x2F5BF2C")]
			public void Solve(IKSolverFullBody solver)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000201")]
		public enum Smoothing
		{
			[Token(Token = "0x4000D24")]
			None,
			[Token(Token = "0x4000D25")]
			Exponential,
			[Token(Token = "0x4000D26")]
			Cubic
		}

		[Token(Token = "0x4000382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D7F64", Offset = "0x15D7F64")]
		public float pin;

		[Token(Token = "0x4000383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D7F7C", Offset = "0x15D7F7C")]
		public float pull;

		[Token(Token = "0x4000384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D7F94", Offset = "0x15D7F94")]
		public float push;

		[Token(Token = "0x4000385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D7FAC", Offset = "0x15D7FAC")]
		public float pushParent;

		[Token(Token = "0x4000386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D7FC4", Offset = "0x15D7FC4")]
		public float reach;

		[Token(Token = "0x4000387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Smoothing reachSmoothing;

		[Token(Token = "0x4000388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Smoothing pushSmoothing;

		[Token(Token = "0x4000389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IKSolver.Node[] nodes;

		[Token(Token = "0x400038A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int[] children;

		[Token(Token = "0x400038B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ChildConstraint[] childConstraints;

		[Token(Token = "0x400038C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public IKConstraintBend bendConstraint;

		[Token(Token = "0x400038D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float rootLength;

		[Token(Token = "0x400038E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool initiated;

		[Token(Token = "0x400038F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float length;

		[Token(Token = "0x4000390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float distance;

		[Token(Token = "0x4000391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private IKSolver.Point p;

		[Token(Token = "0x4000392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float reachForce;

		[Token(Token = "0x4000393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float pullParentSum;

		[Token(Token = "0x4000394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float[] crossFades;

		[Token(Token = "0x4000395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float sqrMag1;

		[Token(Token = "0x4000396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float sqrMag2;

		[Token(Token = "0x4000397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float sqrMagDif;

		[Token(Token = "0x4000398")]
		private const float maxLimbLength = 0.99999f;

		[Token(Token = "0x6000406")]
		[Address(RVA = "0x2F589B8", Offset = "0x2F589B8", VA = "0x2F589B8")]
		public FBIKChain()
		{
		}

		[Token(Token = "0x6000407")]
		[Address(RVA = "0x2F58B34", Offset = "0x2F58B34", VA = "0x2F58B34")]
		public FBIKChain(float pin, float pull, params Transform[] nodeTransforms)
		{
		}

		[Token(Token = "0x6000408")]
		[Address(RVA = "0x2F58C80", Offset = "0x2F58C80", VA = "0x2F58C80")]
		public void SetNodes(params Transform[] boneTransforms)
		{
		}

		[Token(Token = "0x6000409")]
		[Address(RVA = "0x2F58DB4", Offset = "0x2F58DB4", VA = "0x2F58DB4")]
		public int GetNodeIndex(Transform boneTransform)
		{
			return default(int);
		}

		[Token(Token = "0x600040A")]
		[Address(RVA = "0x2F58E90", Offset = "0x2F58E90", VA = "0x2F58E90")]
		public bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600040B")]
		[Address(RVA = "0x2F58FA0", Offset = "0x2F58FA0", VA = "0x2F58FA0")]
		public void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600040C")]
		[Address(RVA = "0x2F59A0C", Offset = "0x2F59A0C", VA = "0x2F59A0C")]
		public void ReadPose(IKSolverFullBody solver, bool fullBody)
		{
		}

		[Token(Token = "0x600040D")]
		[Address(RVA = "0x2F59134", Offset = "0x2F59134", VA = "0x2F59134")]
		private void CalculateBoneLengths(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600040E")]
		[Address(RVA = "0x2F5A0F8", Offset = "0x2F5A0F8", VA = "0x2F5A0F8")]
		public void Reach(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600040F")]
		[Address(RVA = "0x2F5A49C", Offset = "0x2F5A49C", VA = "0x2F5A49C")]
		public Vector3 Push(IKSolverFullBody solver)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000410")]
		[Address(RVA = "0x2F5A880", Offset = "0x2F5A880", VA = "0x2F5A880")]
		public void SolveTrigonometric(IKSolverFullBody solver, bool calculateBendDirection = false)
		{
		}

		[Token(Token = "0x6000411")]
		[Address(RVA = "0x2F5B404", Offset = "0x2F5B404", VA = "0x2F5B404")]
		public void Stage1(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000412")]
		[Address(RVA = "0x2F5B9D4", Offset = "0x2F5B9D4", VA = "0x2F5B9D4")]
		public void Stage2(IKSolverFullBody solver, Vector3 position)
		{
		}

		[Token(Token = "0x6000413")]
		[Address(RVA = "0x2F5BC6C", Offset = "0x2F5BC6C", VA = "0x2F5BC6C")]
		public void SolveConstraintSystems(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000414")]
		[Address(RVA = "0x2F5B8CC", Offset = "0x2F5B8CC", VA = "0x2F5B8CC")]
		private Vector3 SolveFABRIKJoint(Vector3 pos1, Vector3 pos2, float length)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000415")]
		[Address(RVA = "0x2F5B1EC", Offset = "0x2F5B1EC", VA = "0x2F5B1EC")]
		protected Vector3 GetDirToBendPoint(Vector3 direction, Vector3 bendDirection, float directionMagnitude)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000416")]
		[Address(RVA = "0x2F5B854", Offset = "0x2F5B854", VA = "0x2F5B854")]
		private void SolveChildConstraints(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000417")]
		[Address(RVA = "0x2F5BD54", Offset = "0x2F5BD54", VA = "0x2F5BD54")]
		private void SolveLinearConstraint(IKSolver.Node node1, IKSolver.Node node2, float crossFade, float distance)
		{
		}

		[Token(Token = "0x6000418")]
		[Address(RVA = "0x2F5B774", Offset = "0x2F5B774", VA = "0x2F5B774")]
		public void ForwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x6000419")]
		[Address(RVA = "0x2F5BB54", Offset = "0x2F5BB54", VA = "0x2F5BB54")]
		private void BackwardReach(Vector3 position)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000079")]
	public class IKConstraintBend
	{
		[Token(Token = "0x4000399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform bone1;

		[Token(Token = "0x400039A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform bone2;

		[Token(Token = "0x400039B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform bone3;

		[Token(Token = "0x400039C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform bendGoal;

		[Token(Token = "0x400039D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 direction;

		[Token(Token = "0x400039E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Quaternion rotationOffset;

		[Token(Token = "0x400039F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D7FDC", Offset = "0x15D7FDC")]
		public float weight;

		[Token(Token = "0x40003A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector3 defaultLocalDirection;

		[Token(Token = "0x40003A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Vector3 defaultChildDirection;

		[NonSerialized]
		[Token(Token = "0x40003A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float clampF;

		[Token(Token = "0x40003A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int chainIndex1;

		[Token(Token = "0x40003A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int nodeIndex1;

		[Token(Token = "0x40003A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int chainIndex2;

		[Token(Token = "0x40003A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int nodeIndex2;

		[Token(Token = "0x40003A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int chainIndex3;

		[Token(Token = "0x40003A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int nodeIndex3;

		[Token(Token = "0x40003A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D7FF4", Offset = "0x15D7FF4")]
		private bool <initiated>k__BackingField;

		[Token(Token = "0x40003AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x85")]
		private bool limbOrientationsSet;

		[Token(Token = "0x17000099")]
		public bool initiated
		{
			[Token(Token = "0x600041B")]
			[Address(RVA = "0x2F6BFE4", Offset = "0x2F6BFE4", VA = "0x2F6BFE4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E3CD8", Offset = "0x15E3CD8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600041C")]
			[Address(RVA = "0x2F6BFEC", Offset = "0x2F6BFEC", VA = "0x2F6BFEC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E3CE8", Offset = "0x15E3CE8")]
			private set
			{
			}
		}

		[Token(Token = "0x600041A")]
		[Address(RVA = "0x2F6BE1C", Offset = "0x2F6BE1C", VA = "0x2F6BE1C")]
		public bool IsValid(IKSolverFullBody solver, Warning.Logger logger)
		{
			return default(bool);
		}

		[Token(Token = "0x600041D")]
		[Address(RVA = "0x2F58AB0", Offset = "0x2F58AB0", VA = "0x2F58AB0")]
		public IKConstraintBend()
		{
		}

		[Token(Token = "0x600041E")]
		[Address(RVA = "0x2F6BFF8", Offset = "0x2F6BFF8", VA = "0x2F6BFF8")]
		public IKConstraintBend(Transform bone1, Transform bone2, Transform bone3)
		{
		}

		[Token(Token = "0x600041F")]
		[Address(RVA = "0x2F5970C", Offset = "0x2F5970C", VA = "0x2F5970C")]
		public void SetBones(Transform bone1, Transform bone2, Transform bone3)
		{
		}

		[Token(Token = "0x6000420")]
		[Address(RVA = "0x2F5975C", Offset = "0x2F5975C", VA = "0x2F5975C")]
		public void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000421")]
		[Address(RVA = "0x2F6C2EC", Offset = "0x2F6C2EC", VA = "0x2F6C2EC")]
		public void SetLimbOrientation(Vector3 upper, Vector3 lower, Vector3 last)
		{
		}

		[Token(Token = "0x6000422")]
		[Address(RVA = "0x2F6C524", Offset = "0x2F6C524", VA = "0x2F6C524")]
		public void LimitBend(float solverWeight, float positionWeight)
		{
		}

		[Token(Token = "0x6000423")]
		[Address(RVA = "0x2F5ABE8", Offset = "0x2F5ABE8", VA = "0x2F5ABE8")]
		public Vector3 GetDir(IKSolverFullBody solver)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000424")]
		[Address(RVA = "0x2F6C0AC", Offset = "0x2F6C0AC", VA = "0x2F6C0AC")]
		private Vector3 OrthoToLimb(IKSolverFullBody solver, Vector3 tangent)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000425")]
		[Address(RVA = "0x2F6C1CC", Offset = "0x2F6C1CC", VA = "0x2F6C1CC")]
		private Vector3 OrthoToBone1(IKSolverFullBody solver, Vector3 tangent)
		{
			return default(Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x200007A")]
	public class IKEffector
	{
		[Token(Token = "0x40003AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform bone;

		[Token(Token = "0x40003AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x40003AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D8004", Offset = "0x15D8004")]
		public float positionWeight;

		[Token(Token = "0x40003AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D801C", Offset = "0x15D801C")]
		public float rotationWeight;

		[Token(Token = "0x40003AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 position;

		[Token(Token = "0x40003B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Quaternion rotation;

		[Token(Token = "0x40003B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 positionOffset;

		[Token(Token = "0x40003B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D8034", Offset = "0x15D8034")]
		private bool <isEndEffector>k__BackingField;

		[Token(Token = "0x40003B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool effectChildNodes;

		[Token(Token = "0x40003B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D8044", Offset = "0x15D8044")]
		public float maintainRelativePositionWeight;

		[Token(Token = "0x40003B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform[] childBones;

		[Token(Token = "0x40003B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform planeBone1;

		[Token(Token = "0x40003B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform planeBone2;

		[Token(Token = "0x40003B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform planeBone3;

		[Token(Token = "0x40003B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Quaternion planeRotationOffset;

		[Token(Token = "0x40003BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float posW;

		[Token(Token = "0x40003BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float rotW;

		[Token(Token = "0x40003BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3[] localPositions;

		[Token(Token = "0x40003BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool usePlaneNodes;

		[Token(Token = "0x40003BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Quaternion animatedPlaneRotation;

		[Token(Token = "0x40003BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Vector3 animatedPosition;

		[Token(Token = "0x40003C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool firstUpdate;

		[Token(Token = "0x40003C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private int chainIndex;

		[Token(Token = "0x40003C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int nodeIndex;

		[Token(Token = "0x40003C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private int plane1ChainIndex;

		[Token(Token = "0x40003C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private int plane1NodeIndex;

		[Token(Token = "0x40003C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private int plane2ChainIndex;

		[Token(Token = "0x40003C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private int plane2NodeIndex;

		[Token(Token = "0x40003C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private int plane3ChainIndex;

		[Token(Token = "0x40003C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private int plane3NodeIndex;

		[Token(Token = "0x40003C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private int[] childChainIndexes;

		[Token(Token = "0x40003CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private int[] childNodeIndexes;

		[Token(Token = "0x1700009A")]
		public bool isEndEffector
		{
			[Token(Token = "0x6000427")]
			[Address(RVA = "0x2F6CA28", Offset = "0x2F6CA28", VA = "0x2F6CA28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E3CF8", Offset = "0x15E3CF8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000428")]
			[Address(RVA = "0x2F6CA30", Offset = "0x2F6CA30", VA = "0x2F6CA30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E3D08", Offset = "0x15E3D08")]
			private set
			{
			}
		}

		[Token(Token = "0x6000426")]
		[Address(RVA = "0x2F6C9C0", Offset = "0x2F6C9C0", VA = "0x2F6C9C0")]
		public IKSolver.Node GetNode(IKSolverFullBody solver)
		{
			return null;
		}

		[Token(Token = "0x6000429")]
		[Address(RVA = "0x2F6CA3C", Offset = "0x2F6CA3C", VA = "0x2F6CA3C")]
		public void PinToBone(float positionWeight, float rotationWeight)
		{
		}

		[Token(Token = "0x600042A")]
		[Address(RVA = "0x2F6CB10", Offset = "0x2F6CB10", VA = "0x2F6CB10")]
		public IKEffector()
		{
		}

		[Token(Token = "0x600042B")]
		[Address(RVA = "0x2F6CC7C", Offset = "0x2F6CC7C", VA = "0x2F6CC7C")]
		public IKEffector(Transform bone, Transform[] childBones)
		{
		}

		[Token(Token = "0x600042C")]
		[Address(RVA = "0x2F6CE24", Offset = "0x2F6CE24", VA = "0x2F6CE24")]
		public bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600042D")]
		[Address(RVA = "0x2F6D120", Offset = "0x2F6D120", VA = "0x2F6D120")]
		public void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600042E")]
		[Address(RVA = "0x2F6D3F8", Offset = "0x2F6D3F8", VA = "0x2F6D3F8")]
		public void ResetOffset(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600042F")]
		[Address(RVA = "0x2F6D538", Offset = "0x2F6D538", VA = "0x2F6D538")]
		public void SetToTarget()
		{
		}

		[Token(Token = "0x6000430")]
		[Address(RVA = "0x2F6D5E4", Offset = "0x2F6D5E4", VA = "0x2F6D5E4")]
		public void OnPreSolve(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000431")]
		[Address(RVA = "0x2F6DC38", Offset = "0x2F6DC38", VA = "0x2F6DC38")]
		public void OnPostWrite()
		{
		}

		[Token(Token = "0x6000432")]
		[Address(RVA = "0x2F6DCA8", Offset = "0x2F6DCA8", VA = "0x2F6DCA8")]
		private Quaternion GetPlaneRotation(IKSolverFullBody solver)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000433")]
		[Address(RVA = "0x2F6DEC0", Offset = "0x2F6DEC0", VA = "0x2F6DEC0")]
		public void Update(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000434")]
		[Address(RVA = "0x2F6E208", Offset = "0x2F6E208", VA = "0x2F6E208")]
		private Vector3 GetPosition(IKSolverFullBody solver, out Quaternion planeRotationOffset)
		{
			return default(Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x200007B")]
	public class IKMapping
	{
		[Serializable]
		[Token(Token = "0x2000202")]
		public class BoneMap
		{
			[Token(Token = "0x4000D27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x4000D28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int chainIndex;

			[Token(Token = "0x4000D29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int nodeIndex;

			[Token(Token = "0x4000D2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 defaultLocalPosition;

			[Token(Token = "0x4000D2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Quaternion defaultLocalRotation;

			[Token(Token = "0x4000D2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Vector3 localSwingAxis;

			[Token(Token = "0x4000D2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Vector3 localTwistAxis;

			[Token(Token = "0x4000D2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public Vector3 planePosition;

			[Token(Token = "0x4000D2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Vector3 ikPosition;

			[Token(Token = "0x4000D30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			public Quaternion defaultLocalTargetRotation;

			[Token(Token = "0x4000D31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			private Quaternion maintainRotation;

			[Token(Token = "0x4000D32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			public float length;

			[Token(Token = "0x4000D33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public Quaternion animatedRotation;

			[Token(Token = "0x4000D34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			private Transform planeBone1;

			[Token(Token = "0x4000D35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			private Transform planeBone2;

			[Token(Token = "0x4000D36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			private Transform planeBone3;

			[Token(Token = "0x4000D37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			private int plane1ChainIndex;

			[Token(Token = "0x4000D38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			private int plane1NodeIndex;

			[Token(Token = "0x4000D39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			private int plane2ChainIndex;

			[Token(Token = "0x4000D3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
			private int plane2NodeIndex;

			[Token(Token = "0x4000D3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			private int plane3ChainIndex;

			[Token(Token = "0x4000D3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
			private int plane3NodeIndex;

			[Token(Token = "0x1700018C")]
			public Vector3 swingDirection
			{
				[Token(Token = "0x6000D17")]
				[Address(RVA = "0x2F6EA1C", Offset = "0x2F6EA1C", VA = "0x2F6EA1C")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x1700018D")]
			public bool isNodeBone
			{
				[Token(Token = "0x6000D1A")]
				[Address(RVA = "0x2F6EB88", Offset = "0x2F6EB88", VA = "0x2F6EB88")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x1700018E")]
			private Quaternion lastAnimatedTargetRotation
			{
				[Token(Token = "0x6000D2E")]
				[Address(RVA = "0x2F6F198", Offset = "0x2F6F198", VA = "0x2F6F198")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x6000D16")]
			[Address(RVA = "0x2F6E9CC", Offset = "0x2F6E9CC", VA = "0x2F6E9CC")]
			public void Initiate(Transform transform, IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x6000D18")]
			[Address(RVA = "0x2F6EAE8", Offset = "0x2F6EAE8", VA = "0x2F6EAE8")]
			public void StoreDefaultLocalState()
			{
			}

			[Token(Token = "0x6000D19")]
			[Address(RVA = "0x2F6EB38", Offset = "0x2F6EB38", VA = "0x2F6EB38")]
			public void FixTransform(bool position)
			{
			}

			[Token(Token = "0x6000D1B")]
			[Address(RVA = "0x2F6EB98", Offset = "0x2F6EB98", VA = "0x2F6EB98")]
			public void SetLength(BoneMap nextBone)
			{
			}

			[Token(Token = "0x6000D1C")]
			[Address(RVA = "0x2F6EC80", Offset = "0x2F6EC80", VA = "0x2F6EC80")]
			public void SetLocalSwingAxis(BoneMap swingTarget)
			{
			}

			[Token(Token = "0x6000D1D")]
			[Address(RVA = "0x2F6EC88", Offset = "0x2F6EC88", VA = "0x2F6EC88")]
			public void SetLocalSwingAxis(BoneMap bone1, BoneMap bone2)
			{
			}

			[Token(Token = "0x6000D1E")]
			[Address(RVA = "0x2F6EE18", Offset = "0x2F6EE18", VA = "0x2F6EE18")]
			public void SetLocalTwistAxis(Vector3 twistDirection, Vector3 normalDirection)
			{
			}

			[Token(Token = "0x6000D1F")]
			[Address(RVA = "0x2F6EF24", Offset = "0x2F6EF24", VA = "0x2F6EF24")]
			public void SetPlane(IKSolverFullBody solver, Transform planeBone1, Transform planeBone2, Transform planeBone3)
			{
			}

			[Token(Token = "0x6000D20")]
			[Address(RVA = "0x2F6EFE8", Offset = "0x2F6EFE8", VA = "0x2F6EFE8")]
			public void UpdatePlane(bool rotation, bool position)
			{
			}

			[Token(Token = "0x6000D21")]
			[Address(RVA = "0x2F6F3BC", Offset = "0x2F6F3BC", VA = "0x2F6F3BC")]
			public void SetIKPosition()
			{
			}

			[Token(Token = "0x6000D22")]
			[Address(RVA = "0x2F6F3F4", Offset = "0x2F6F3F4", VA = "0x2F6F3F4")]
			public void MaintainRotation()
			{
			}

			[Token(Token = "0x6000D23")]
			[Address(RVA = "0x2F6F42C", Offset = "0x2F6F42C", VA = "0x2F6F42C")]
			public void SetToIKPosition()
			{
			}

			[Token(Token = "0x6000D24")]
			[Address(RVA = "0x2F6F454", Offset = "0x2F6F454", VA = "0x2F6F454")]
			public void FixToNode(IKSolverFullBody solver, float weight, [Optional] IKSolver.Node fixNode)
			{
			}

			[Token(Token = "0x6000D25")]
			[Address(RVA = "0x2F6F580", Offset = "0x2F6F580", VA = "0x2F6F580")]
			public Vector3 GetPlanePosition(IKSolverFullBody solver)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000D26")]
			[Address(RVA = "0x2F6F8C8", Offset = "0x2F6F8C8", VA = "0x2F6F8C8")]
			public void PositionToPlane(IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x6000D27")]
			[Address(RVA = "0x2F6F8F8", Offset = "0x2F6F8F8", VA = "0x2F6F8F8")]
			public void RotateToPlane(IKSolverFullBody solver, float weight)
			{
			}

			[Token(Token = "0x6000D28")]
			[Address(RVA = "0x2F6FA90", Offset = "0x2F6FA90", VA = "0x2F6FA90")]
			public void Swing(Vector3 swingTarget, float weight)
			{
			}

			[Token(Token = "0x6000D29")]
			[Address(RVA = "0x2F6FB00", Offset = "0x2F6FB00", VA = "0x2F6FB00")]
			public void Swing(Vector3 pos1, Vector3 pos2, float weight)
			{
			}

			[Token(Token = "0x6000D2A")]
			[Address(RVA = "0x2F6FD44", Offset = "0x2F6FD44", VA = "0x2F6FD44")]
			public void Twist(Vector3 twistDirection, Vector3 normalDirection, float weight)
			{
			}

			[Token(Token = "0x6000D2B")]
			[Address(RVA = "0x2F6FF6C", Offset = "0x2F6FF6C", VA = "0x2F6FF6C")]
			public void RotateToMaintain(float weight)
			{
			}

			[Token(Token = "0x6000D2C")]
			[Address(RVA = "0x2F70084", Offset = "0x2F70084", VA = "0x2F70084")]
			public void RotateToEffector(IKSolverFullBody solver, float weight)
			{
			}

			[Token(Token = "0x6000D2D")]
			[Address(RVA = "0x2F6F6C4", Offset = "0x2F6F6C4", VA = "0x2F6F6C4")]
			private Quaternion GetTargetRotation(IKSolverFullBody solver)
			{
				return default(Quaternion);
			}

			[Token(Token = "0x6000D2F")]
			[Address(RVA = "0x2F70220", Offset = "0x2F70220", VA = "0x2F70220")]
			public BoneMap()
			{
			}
		}

		[Token(Token = "0x6000435")]
		[Address(RVA = "0x2F6E780", Offset = "0x2F6E780", VA = "0x2F6E780", Slot = "4")]
		public virtual bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000436")]
		[Address(RVA = "0x2F6E788", Offset = "0x2F6E788", VA = "0x2F6E788", Slot = "5")]
		public virtual void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000437")]
		[Address(RVA = "0x2F6E78C", Offset = "0x2F6E78C", VA = "0x2F6E78C")]
		protected bool BoneIsValid(Transform bone, IKSolver solver, ref string message, [Optional] Warning.Logger logger)
		{
			return default(bool);
		}

		[Token(Token = "0x6000438")]
		[Address(RVA = "0x2F6E8BC", Offset = "0x2F6E8BC", VA = "0x2F6E8BC")]
		protected Vector3 SolveFABRIKJoint(Vector3 pos1, Vector3 pos2, float length)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000439")]
		[Address(RVA = "0x2F6E9C4", Offset = "0x2F6E9C4", VA = "0x2F6E9C4")]
		public IKMapping()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200007C")]
	public class IKMappingBone : IKMapping
	{
		[Token(Token = "0x40003CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform bone;

		[Token(Token = "0x40003CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D805C", Offset = "0x15D805C")]
		public float maintainRotationWeight;

		[Token(Token = "0x40003CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private BoneMap boneMap;

		[Token(Token = "0x600043A")]
		[Address(RVA = "0x2F7023C", Offset = "0x2F7023C", VA = "0x2F7023C", Slot = "4")]
		public override bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600043B")]
		[Address(RVA = "0x2F702E8", Offset = "0x2F702E8", VA = "0x2F702E8")]
		public IKMappingBone()
		{
		}

		[Token(Token = "0x600043C")]
		[Address(RVA = "0x2F70378", Offset = "0x2F70378", VA = "0x2F70378")]
		public IKMappingBone(Transform bone)
		{
		}

		[Token(Token = "0x600043D")]
		[Address(RVA = "0x2F70424", Offset = "0x2F70424", VA = "0x2F70424")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x600043E")]
		[Address(RVA = "0x2F7043C", Offset = "0x2F7043C", VA = "0x2F7043C")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x600043F")]
		[Address(RVA = "0x2F70458", Offset = "0x2F70458", VA = "0x2F70458", Slot = "5")]
		public override void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000440")]
		[Address(RVA = "0x2F70504", Offset = "0x2F70504", VA = "0x2F70504")]
		public void ReadPose()
		{
		}

		[Token(Token = "0x6000441")]
		[Address(RVA = "0x2F7051C", Offset = "0x2F7051C", VA = "0x2F7051C")]
		public void WritePose(float solverWeight)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200007D")]
	public class IKMappingLimb : IKMapping
	{
		[Serializable]
		[Token(Token = "0x2000203")]
		public enum BoneMapType
		{
			[Token(Token = "0x4000D3E")]
			Parent,
			[Token(Token = "0x4000D3F")]
			Bone1,
			[Token(Token = "0x4000D40")]
			Bone2,
			[Token(Token = "0x4000D41")]
			Bone3
		}

		[Token(Token = "0x40003CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform parentBone;

		[Token(Token = "0x40003CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform bone1;

		[Token(Token = "0x40003D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform bone2;

		[Token(Token = "0x40003D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform bone3;

		[Token(Token = "0x40003D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D8074", Offset = "0x15D8074")]
		public float maintainRotationWeight;

		[Token(Token = "0x40003D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D808C", Offset = "0x15D808C")]
		public float weight;

		[NonSerialized]
		[Token(Token = "0x40003D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool updatePlaneRotations;

		[Token(Token = "0x40003D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private BoneMap boneMapParent;

		[Token(Token = "0x40003D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private BoneMap boneMap1;

		[Token(Token = "0x40003D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private BoneMap boneMap2;

		[Token(Token = "0x40003D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private BoneMap boneMap3;

		[Token(Token = "0x6000442")]
		[Address(RVA = "0x3142D44", Offset = "0x3142D44", VA = "0x3142D44", Slot = "4")]
		public override bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000443")]
		[Address(RVA = "0x3142DE8", Offset = "0x3142DE8", VA = "0x3142DE8")]
		public BoneMap GetBoneMap(BoneMapType boneMap)
		{
			return null;
		}

		[Token(Token = "0x6000444")]
		[Address(RVA = "0x3142EBC", Offset = "0x3142EBC", VA = "0x3142EBC")]
		public void SetLimbOrientation(Vector3 upper, Vector3 lower)
		{
		}

		[Token(Token = "0x6000445")]
		[Address(RVA = "0x3143210", Offset = "0x3143210", VA = "0x3143210")]
		public IKMappingLimb()
		{
		}

		[Token(Token = "0x6000446")]
		[Address(RVA = "0x3143308", Offset = "0x3143308", VA = "0x3143308")]
		public IKMappingLimb(Transform bone1, Transform bone2, Transform bone3, [Optional] Transform parentBone)
		{
		}

		[Token(Token = "0x6000447")]
		[Address(RVA = "0x3143438", Offset = "0x3143438", VA = "0x3143438")]
		public void SetBones(Transform bone1, Transform bone2, Transform bone3, [Optional] Transform parentBone)
		{
		}

		[Token(Token = "0x6000448")]
		[Address(RVA = "0x314349C", Offset = "0x314349C", VA = "0x314349C")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000449")]
		[Address(RVA = "0x3143554", Offset = "0x3143554", VA = "0x3143554")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x600044A")]
		[Address(RVA = "0x314361C", Offset = "0x314361C", VA = "0x314361C", Slot = "5")]
		public override void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600044B")]
		[Address(RVA = "0x31438AC", Offset = "0x31438AC", VA = "0x31438AC")]
		public void ReadPose()
		{
		}

		[Token(Token = "0x600044C")]
		[Address(RVA = "0x3143970", Offset = "0x3143970", VA = "0x3143970")]
		public void WritePose(IKSolverFullBody solver, bool fullBody)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200007E")]
	public class IKMappingSpine : IKMapping
	{
		[Token(Token = "0x40003D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform[] spineBones;

		[Token(Token = "0x40003DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform leftUpperArmBone;

		[Token(Token = "0x40003DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform rightUpperArmBone;

		[Token(Token = "0x40003DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform leftThighBone;

		[Token(Token = "0x40003DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform rightThighBone;

		[Token(Token = "0x40003DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D80A4", Offset = "0x15D80A4")]
		public int iterations;

		[Token(Token = "0x40003DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D80BC", Offset = "0x15D80BC")]
		public float twistWeight;

		[Token(Token = "0x40003E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int rootNodeIndex;

		[Token(Token = "0x40003E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private BoneMap[] spine;

		[Token(Token = "0x40003E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private BoneMap leftUpperArm;

		[Token(Token = "0x40003E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private BoneMap rightUpperArm;

		[Token(Token = "0x40003E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private BoneMap leftThigh;

		[Token(Token = "0x40003E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private BoneMap rightThigh;

		[Token(Token = "0x40003E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool useFABRIK;

		[Token(Token = "0x600044D")]
		[Address(RVA = "0x3143B4C", Offset = "0x3143B4C", VA = "0x3143B4C", Slot = "4")]
		public override bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600044E")]
		[Address(RVA = "0x3143E5C", Offset = "0x3143E5C", VA = "0x3143E5C")]
		public IKMappingSpine()
		{
		}

		[Token(Token = "0x600044F")]
		[Address(RVA = "0x3143F74", Offset = "0x3143F74", VA = "0x3143F74")]
		public IKMappingSpine(Transform[] spineBones, Transform leftUpperArmBone, Transform rightUpperArmBone, Transform leftThighBone, Transform rightThighBone)
		{
		}

		[Token(Token = "0x6000450")]
		[Address(RVA = "0x31440CC", Offset = "0x31440CC", VA = "0x31440CC")]
		public void SetBones(Transform[] spineBones, Transform leftUpperArmBone, Transform rightUpperArmBone, Transform leftThighBone, Transform rightThighBone)
		{
		}

		[Token(Token = "0x6000451")]
		[Address(RVA = "0x314414C", Offset = "0x314414C", VA = "0x314414C")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000452")]
		[Address(RVA = "0x31441B8", Offset = "0x31441B8", VA = "0x31441B8")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x6000453")]
		[Address(RVA = "0x314423C", Offset = "0x314423C", VA = "0x314423C", Slot = "5")]
		public override void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000454")]
		[Address(RVA = "0x31448DC", Offset = "0x31448DC", VA = "0x31448DC")]
		private bool UseFABRIK()
		{
			return default(bool);
		}

		[Token(Token = "0x6000455")]
		[Address(RVA = "0x3144914", Offset = "0x3144914", VA = "0x3144914")]
		public void ReadPose()
		{
		}

		[Token(Token = "0x6000456")]
		[Address(RVA = "0x3144C08", Offset = "0x3144C08", VA = "0x3144C08")]
		public void WritePose(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000457")]
		[Address(RVA = "0x3144FBC", Offset = "0x3144FBC", VA = "0x3144FBC")]
		public void ForwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x6000458")]
		[Address(RVA = "0x31450B0", Offset = "0x31450B0", VA = "0x31450B0")]
		private void BackwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x6000459")]
		[Address(RVA = "0x3145180", Offset = "0x3145180", VA = "0x3145180")]
		private void MapToSolverPositions(IKSolverFullBody solver)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200007F")]
	public abstract class IKSolver
	{
		[Serializable]
		[Token(Token = "0x2000204")]
		public class Point
		{
			[Token(Token = "0x4000D42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x4000D43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DF46C", Offset = "0x15DF46C")]
			public float weight;

			[Token(Token = "0x4000D44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 solverPosition;

			[Token(Token = "0x4000D45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Quaternion solverRotation;

			[Token(Token = "0x4000D46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Vector3 defaultLocalPosition;

			[Token(Token = "0x4000D47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public Quaternion defaultLocalRotation;

			[Token(Token = "0x6000D30")]
			[Address(RVA = "0x3146EB8", Offset = "0x3146EB8", VA = "0x3146EB8")]
			public void StoreDefaultLocalState()
			{
			}

			[Token(Token = "0x6000D31")]
			[Address(RVA = "0x3146F08", Offset = "0x3146F08", VA = "0x3146F08")]
			public void FixTransform()
			{
			}

			[Token(Token = "0x6000D32")]
			[Address(RVA = "0x3147090", Offset = "0x3147090", VA = "0x3147090")]
			public void UpdateSolverPosition()
			{
			}

			[Token(Token = "0x6000D33")]
			[Address(RVA = "0x31470C8", Offset = "0x31470C8", VA = "0x31470C8")]
			public void UpdateSolverLocalPosition()
			{
			}

			[Token(Token = "0x6000D34")]
			[Address(RVA = "0x3147100", Offset = "0x3147100", VA = "0x3147100")]
			public void UpdateSolverState()
			{
			}

			[Token(Token = "0x6000D35")]
			[Address(RVA = "0x3147150", Offset = "0x3147150", VA = "0x3147150")]
			public void UpdateSolverLocalState()
			{
			}

			[Token(Token = "0x6000D36")]
			[Address(RVA = "0x3146960", Offset = "0x3146960", VA = "0x3146960")]
			public Point()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000205")]
		public class Bone : Point
		{
			[Token(Token = "0x4000D48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public float length;

			[Token(Token = "0x4000D49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float sqrMag;

			[Token(Token = "0x4000D4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public Vector3 axis;

			[Token(Token = "0x4000D4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private RotationLimit _rotationLimit;

			[Token(Token = "0x4000D4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private bool isLimited;

			[Token(Token = "0x1700018F")]
			public RotationLimit rotationLimit
			{
				[Token(Token = "0x6000D37")]
				[Address(RVA = "0x3145F1C", Offset = "0x3145F1C", VA = "0x3145F1C")]
				get
				{
					return null;
				}
				[Token(Token = "0x6000D38")]
				[Address(RVA = "0x3146018", Offset = "0x3146018", VA = "0x3146018")]
				set
				{
				}
			}

			[Token(Token = "0x6000D39")]
			[Address(RVA = "0x31460AC", Offset = "0x31460AC", VA = "0x31460AC")]
			public void Swing(Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x6000D3A")]
			[Address(RVA = "0x314636C", Offset = "0x314636C", VA = "0x314636C")]
			public static void SolverSwing(Bone[] bones, int index, Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x6000D3B")]
			[Address(RVA = "0x314664C", Offset = "0x314664C", VA = "0x314664C")]
			public void Swing2D(Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x6000D3C")]
			[Address(RVA = "0x31468B4", Offset = "0x31468B4", VA = "0x31468B4")]
			public void SetToSolverPosition()
			{
			}

			[Token(Token = "0x6000D3D")]
			[Address(RVA = "0x31468DC", Offset = "0x31468DC", VA = "0x31468DC")]
			public Bone()
			{
			}

			[Token(Token = "0x6000D3E")]
			[Address(RVA = "0x31469E0", Offset = "0x31469E0", VA = "0x31469E0")]
			public Bone(Transform transform)
			{
			}

			[Token(Token = "0x6000D3F")]
			[Address(RVA = "0x3146A80", Offset = "0x3146A80", VA = "0x3146A80")]
			public Bone(Transform transform, float weight)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000206")]
		public class Node : Point
		{
			[Token(Token = "0x4000D4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public float length;

			[Token(Token = "0x4000D4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float effectorPositionWeight;

			[Token(Token = "0x4000D4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public float effectorRotationWeight;

			[Token(Token = "0x4000D50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Vector3 offset;

			[Token(Token = "0x6000D40")]
			[Address(RVA = "0x3146E40", Offset = "0x3146E40", VA = "0x3146E40")]
			public Node()
			{
			}

			[Token(Token = "0x6000D41")]
			[Address(RVA = "0x3146E44", Offset = "0x3146E44", VA = "0x3146E44")]
			public Node(Transform transform)
			{
			}

			[Token(Token = "0x6000D42")]
			[Address(RVA = "0x3146E74", Offset = "0x3146E74", VA = "0x3146E74")]
			public Node(Transform transform, float weight)
			{
			}
		}

		[Token(Token = "0x2000207")]
		public delegate void UpdateDelegate();

		[Token(Token = "0x2000208")]
		public delegate void IterationDelegate(int i);

		[Token(Token = "0x40003E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		public Vector3 IKPosition;

		[Token(Token = "0x40003E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D80E4", Offset = "0x15D80E4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D80E4", Offset = "0x15D80E4")]
		public float IKPositionWeight;

		[Token(Token = "0x40003E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D8138", Offset = "0x15D8138")]
		private bool <initiated>k__BackingField;

		[Token(Token = "0x40003EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UpdateDelegate OnPreInitiate;

		[Token(Token = "0x40003EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UpdateDelegate OnPostInitiate;

		[Token(Token = "0x40003EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UpdateDelegate OnPreUpdate;

		[Token(Token = "0x40003ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UpdateDelegate OnPostUpdate;

		[Token(Token = "0x40003EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected bool firstInitiation;

		[Token(Token = "0x40003EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[HideInInspector]
		protected Transform root;

		[Token(Token = "0x1700009B")]
		public bool initiated
		{
			[Token(Token = "0x6000463")]
			[Address(RVA = "0x314596C", Offset = "0x314596C", VA = "0x314596C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E3D18", Offset = "0x15E3D18")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000464")]
			[Address(RVA = "0x3145974", Offset = "0x3145974", VA = "0x3145974")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E3D28", Offset = "0x15E3D28")]
			private set
			{
			}
		}

		[Token(Token = "0x600045A")]
		[Address(RVA = "0x3145478", Offset = "0x3145478", VA = "0x3145478")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x600045B")]
		public abstract bool IsValid(ref string message);

		[Token(Token = "0x600045C")]
		[Address(RVA = "0x31454F4", Offset = "0x31454F4", VA = "0x31454F4")]
		public void Initiate(Transform root)
		{
		}

		[Token(Token = "0x600045D")]
		[Address(RVA = "0x3145858", Offset = "0x3145858", VA = "0x3145858")]
		public void Update()
		{
		}

		[Token(Token = "0x600045E")]
		[Address(RVA = "0x31458C0", Offset = "0x31458C0", VA = "0x31458C0", Slot = "5")]
		public virtual Vector3 GetIKPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600045F")]
		[Address(RVA = "0x31458CC", Offset = "0x31458CC", VA = "0x31458CC")]
		public void SetIKPosition(Vector3 position)
		{
		}

		[Token(Token = "0x6000460")]
		[Address(RVA = "0x31458D8", Offset = "0x31458D8", VA = "0x31458D8")]
		public float GetIKPositionWeight()
		{
			return default(float);
		}

		[Token(Token = "0x6000461")]
		[Address(RVA = "0x31458E0", Offset = "0x31458E0", VA = "0x31458E0")]
		public void SetIKPositionWeight(float weight)
		{
		}

		[Token(Token = "0x6000462")]
		[Address(RVA = "0x3145964", Offset = "0x3145964", VA = "0x3145964")]
		public Transform GetRoot()
		{
			return null;
		}

		[Token(Token = "0x6000465")]
		public abstract Point[] GetPoints();

		[Token(Token = "0x6000466")]
		public abstract Point GetPoint(Transform transform);

		[Token(Token = "0x6000467")]
		public abstract void FixTransforms();

		[Token(Token = "0x6000468")]
		public abstract void StoreDefaultLocalState();

		[Token(Token = "0x6000469")]
		protected abstract void OnInitiate();

		[Token(Token = "0x600046A")]
		protected abstract void OnUpdate();

		[Token(Token = "0x600046B")]
		[Address(RVA = "0x3145980", Offset = "0x3145980", VA = "0x3145980")]
		protected void LogWarning(string message)
		{
		}

		[Token(Token = "0x600046C")]
		[Address(RVA = "0x3145998", Offset = "0x3145998", VA = "0x3145998")]
		public static Transform ContainsDuplicateBone(Bone[] bones)
		{
			return null;
		}

		[Token(Token = "0x600046D")]
		[Address(RVA = "0x3145AD4", Offset = "0x3145AD4", VA = "0x3145AD4")]
		public static bool HierarchyIsValid(Bone[] bones)
		{
			return default(bool);
		}

		[Token(Token = "0x600046E")]
		[Address(RVA = "0x3145B80", Offset = "0x3145B80", VA = "0x3145B80")]
		protected static float PreSolveBones(ref Bone[] bones)
		{
			return default(float);
		}

		[Token(Token = "0x600046F")]
		[Address(RVA = "0x3145F04", Offset = "0x3145F04", VA = "0x3145F04")]
		protected IKSolver()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000080")]
	public class IKSolverAim : IKSolverHeuristic
	{
		[Token(Token = "0x40003F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform transform;

		[Token(Token = "0x40003F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Vector3 axis;

		[Token(Token = "0x40003F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public Vector3 poleAxis;

		[Token(Token = "0x40003F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Vector3 polePosition;

		[Token(Token = "0x40003F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D8180", Offset = "0x15D8180")]
		public float poleWeight;

		[Token(Token = "0x40003F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Transform poleTarget;

		[Token(Token = "0x40003F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D8198", Offset = "0x15D8198")]
		public float clampWeight;

		[Token(Token = "0x40003F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D81B0", Offset = "0x15D81B0")]
		public int clampSmoothing;

		[Token(Token = "0x40003F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x40003F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float step;

		[Token(Token = "0x40003FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Vector3 clampedIKPosition;

		[Token(Token = "0x40003FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private RotationLimit transformLimit;

		[Token(Token = "0x40003FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Transform lastTransform;

		[Token(Token = "0x1700009C")]
		public Vector3 transformAxis
		{
			[Token(Token = "0x6000471")]
			[Address(RVA = "0x31472EC", Offset = "0x31472EC", VA = "0x31472EC")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700009D")]
		public Vector3 transformPoleAxis
		{
			[Token(Token = "0x6000472")]
			[Address(RVA = "0x31473B8", Offset = "0x31473B8", VA = "0x31473B8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700009E")]
		protected override int minBones
		{
			[Token(Token = "0x6000475")]
			[Address(RVA = "0x3148148", Offset = "0x3148148", VA = "0x3148148", Slot = "12")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700009F")]
		protected override Vector3 localDirection
		{
			[Token(Token = "0x6000479")]
			[Address(RVA = "0x31486EC", Offset = "0x31486EC", VA = "0x31486EC", Slot = "15")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000470")]
		[Address(RVA = "0x31471EC", Offset = "0x31471EC", VA = "0x31471EC")]
		public float GetAngle()
		{
			return default(float);
		}

		[Token(Token = "0x6000473")]
		[Address(RVA = "0x3147484", Offset = "0x3147484", VA = "0x3147484", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000474")]
		[Address(RVA = "0x3147704", Offset = "0x3147704", VA = "0x3147704", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6000476")]
		[Address(RVA = "0x3148094", Offset = "0x3148094", VA = "0x3148094")]
		private void Solve()
		{
		}

		[Token(Token = "0x6000477")]
		[Address(RVA = "0x3147CBC", Offset = "0x3147CBC", VA = "0x3147CBC")]
		private Vector3 GetClampedIKPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000478")]
		[Address(RVA = "0x3148150", Offset = "0x3148150", VA = "0x3148150")]
		private void RotateToTarget(Vector3 targetPosition, Bone bone, float weight)
		{
		}

		[Token(Token = "0x600047A")]
		[Address(RVA = "0x3148760", Offset = "0x3148760", VA = "0x3148760")]
		public IKSolverAim()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000081")]
	public class IKSolverArm : IKSolver
	{
		[Token(Token = "0x40003FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D81C8", Offset = "0x15D81C8")]
		public float IKRotationWeight;

		[Token(Token = "0x40003FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Quaternion IKRotation;

		[Token(Token = "0x40003FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Point chest;

		[Token(Token = "0x4000400")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Point shoulder;

		[Token(Token = "0x4000401")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Point upperArm;

		[Token(Token = "0x4000402")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Point forearm;

		[Token(Token = "0x4000403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Point hand;

		[Token(Token = "0x4000404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool isLeft;

		[Token(Token = "0x4000405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public IKSolverVR.Arm arm;

		[Token(Token = "0x4000406")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3[] positions;

		[Token(Token = "0x4000407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Quaternion[] rotations;

		[Token(Token = "0x600047B")]
		[Address(RVA = "0x314887C", Offset = "0x314887C", VA = "0x314887C", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600047C")]
		[Address(RVA = "0x3148C38", Offset = "0x3148C38", VA = "0x3148C38")]
		public bool SetChain(Transform chest, Transform shoulder, Transform upperArm, Transform forearm, Transform hand, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x600047D")]
		[Address(RVA = "0x3148CEC", Offset = "0x3148CEC", VA = "0x3148CEC", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x600047E")]
		[Address(RVA = "0x3148E84", Offset = "0x3148E84", VA = "0x3148E84", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x600047F")]
		[Address(RVA = "0x314901C", Offset = "0x314901C", VA = "0x314901C", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000480")]
		[Address(RVA = "0x3149068", Offset = "0x3149068", VA = "0x3149068", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6000481")]
		[Address(RVA = "0x31490C8", Offset = "0x31490C8", VA = "0x31490C8", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000482")]
		[Address(RVA = "0x3149438", Offset = "0x3149438", VA = "0x3149438", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6000483")]
		[Address(RVA = "0x3149464", Offset = "0x3149464", VA = "0x3149464")]
		private void Solve()
		{
		}

		[Token(Token = "0x6000484")]
		[Address(RVA = "0x314912C", Offset = "0x314912C", VA = "0x314912C")]
		private void Read()
		{
		}

		[Token(Token = "0x6000485")]
		[Address(RVA = "0x31494D0", Offset = "0x31494D0", VA = "0x31494D0")]
		private void Write()
		{
		}

		[Token(Token = "0x6000486")]
		[Address(RVA = "0x314965C", Offset = "0x314965C", VA = "0x314965C")]
		public IKSolverArm()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000082")]
	public class IKSolverCCD : IKSolverHeuristic
	{
		[Token(Token = "0x4000408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x6000487")]
		[Address(RVA = "0x314980C", Offset = "0x314980C", VA = "0x314980C")]
		public void FadeOutBoneWeights()
		{
		}

		[Token(Token = "0x6000488")]
		[Address(RVA = "0x31498BC", Offset = "0x31498BC", VA = "0x31498BC", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000489")]
		[Address(RVA = "0x3149EB0", Offset = "0x3149EB0", VA = "0x3149EB0", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x600048A")]
		[Address(RVA = "0x314A600", Offset = "0x314A600", VA = "0x314A600")]
		protected void Solve(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x600048B")]
		[Address(RVA = "0x314AD54", Offset = "0x314AD54", VA = "0x314AD54")]
		public IKSolverCCD()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000083")]
	public class IKSolverFABRIK : IKSolverHeuristic
	{
		[Token(Token = "0x4000409")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x400040A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool[] limitedBones;

		[Token(Token = "0x400040B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3[] solverLocalPositions;

		[Token(Token = "0x170000A0")]
		protected override bool boneLengthCanBeZero
		{
			[Token(Token = "0x6000491")]
			[Address(RVA = "0x314BF90", Offset = "0x314BF90", VA = "0x314BF90", Slot = "13")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600048C")]
		[Address(RVA = "0x314AD58", Offset = "0x314AD58", VA = "0x314AD58")]
		public void SolveForward(Vector3 position)
		{
		}

		[Token(Token = "0x600048D")]
		[Address(RVA = "0x314B4A0", Offset = "0x314B4A0", VA = "0x314B4A0")]
		public void SolveBackward(Vector3 position)
		{
		}

		[Token(Token = "0x600048E")]
		[Address(RVA = "0x314B5D8", Offset = "0x314B5D8", VA = "0x314B5D8", Slot = "5")]
		public override Vector3 GetIKPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600048F")]
		[Address(RVA = "0x314B670", Offset = "0x314B670", VA = "0x314B670", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000490")]
		[Address(RVA = "0x314BC30", Offset = "0x314BC30", VA = "0x314BC30", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6000492")]
		[Address(RVA = "0x314BF98", Offset = "0x314BF98", VA = "0x314BF98")]
		private Vector3 SolveJoint(Vector3 pos1, Vector3 pos2, float length)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000493")]
		[Address(RVA = "0x314AE2C", Offset = "0x314AE2C", VA = "0x314AE2C")]
		private void OnPreSolve()
		{
		}

		[Token(Token = "0x6000494")]
		[Address(RVA = "0x314B584", Offset = "0x314B584", VA = "0x314B584")]
		private void OnPostSolve()
		{
		}

		[Token(Token = "0x6000495")]
		[Address(RVA = "0x314BF34", Offset = "0x314BF34", VA = "0x314BF34")]
		private void Solve(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x6000496")]
		[Address(RVA = "0x314B2C8", Offset = "0x314B2C8", VA = "0x314B2C8")]
		private void ForwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x6000497")]
		[Address(RVA = "0x314C7D8", Offset = "0x314C7D8", VA = "0x314C7D8")]
		private void SolverMove(int index, Vector3 offset)
		{
		}

		[Token(Token = "0x6000498")]
		[Address(RVA = "0x314C8E8", Offset = "0x314C8E8", VA = "0x314C8E8")]
		private void SolverRotate(int index, Quaternion rotation, bool recursive)
		{
		}

		[Token(Token = "0x6000499")]
		[Address(RVA = "0x314CA14", Offset = "0x314CA14", VA = "0x314CA14")]
		private void SolverRotateChildren(int index, Quaternion rotation)
		{
		}

		[Token(Token = "0x600049A")]
		[Address(RVA = "0x314CB2C", Offset = "0x314CB2C", VA = "0x314CB2C")]
		private void SolverMoveChildrenAroundPoint(int index, Quaternion rotation)
		{
		}

		[Token(Token = "0x600049B")]
		[Address(RVA = "0x314B998", Offset = "0x314B998", VA = "0x314B998")]
		private Quaternion GetParentSolverRotation(int index)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600049C")]
		[Address(RVA = "0x314BAE4", Offset = "0x314BAE4", VA = "0x314BAE4")]
		private Vector3 GetParentSolverPosition(int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600049D")]
		[Address(RVA = "0x314CD18", Offset = "0x314CD18", VA = "0x314CD18")]
		private Quaternion GetLimitedRotation(int index, Quaternion q, out bool changed)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600049E")]
		[Address(RVA = "0x314C250", Offset = "0x314C250", VA = "0x314C250")]
		private void LimitForward(int rotateBone, int limitBone)
		{
		}

		[Token(Token = "0x600049F")]
		[Address(RVA = "0x314B574", Offset = "0x314B574", VA = "0x314B574")]
		private void BackwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x60004A0")]
		[Address(RVA = "0x314D480", Offset = "0x314D480", VA = "0x314D480")]
		private void BackwardReachUnlimited(Vector3 position)
		{
		}

		[Token(Token = "0x60004A1")]
		[Address(RVA = "0x314CEEC", Offset = "0x314CEEC", VA = "0x314CEEC")]
		private void BackwardReachLimited(Vector3 position)
		{
		}

		[Token(Token = "0x60004A2")]
		[Address(RVA = "0x314C0B0", Offset = "0x314C0B0", VA = "0x314C0B0")]
		private void MapToSolverPositions()
		{
		}

		[Token(Token = "0x60004A3")]
		[Address(RVA = "0x314C18C", Offset = "0x314C18C", VA = "0x314C18C")]
		private void MapToSolverPositionsLimited()
		{
		}

		[Token(Token = "0x60004A4")]
		[Address(RVA = "0x314D54C", Offset = "0x314D54C", VA = "0x314D54C")]
		public IKSolverFABRIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000084")]
	public class IKSolverFABRIKRoot : IKSolver
	{
		[Token(Token = "0x400040C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int iterations;

		[Token(Token = "0x400040D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D81E0", Offset = "0x15D81E0")]
		public float rootPin;

		[Token(Token = "0x400040E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FABRIKChain[] chains;

		[Token(Token = "0x400040F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool zeroWeightApplied;

		[Token(Token = "0x4000410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool[] isRoot;

		[Token(Token = "0x4000411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 rootDefaultPosition;

		[Token(Token = "0x60004A5")]
		[Address(RVA = "0x314D5D8", Offset = "0x314D5D8", VA = "0x314D5D8", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60004A6")]
		[Address(RVA = "0x314DFB0", Offset = "0x314DFB0", VA = "0x314DFB0", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60004A7")]
		[Address(RVA = "0x314E048", Offset = "0x314E048", VA = "0x314E048", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x60004A8")]
		[Address(RVA = "0x314E0E8", Offset = "0x314E0E8", VA = "0x314E0E8", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60004A9")]
		[Address(RVA = "0x314E1F8", Offset = "0x314E1F8", VA = "0x314E1F8")]
		private bool IsRoot(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x60004AA")]
		[Address(RVA = "0x314E294", Offset = "0x314E294", VA = "0x314E294", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60004AB")]
		[Address(RVA = "0x314E7FC", Offset = "0x314E7FC", VA = "0x314E7FC", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x60004AC")]
		[Address(RVA = "0x314EA14", Offset = "0x314EA14", VA = "0x314EA14", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x60004AD")]
		[Address(RVA = "0x314E8AC", Offset = "0x314E8AC", VA = "0x314E8AC")]
		private void AddPointsToArray(ref Point[] array, FABRIKChain chain)
		{
		}

		[Token(Token = "0x60004AE")]
		[Address(RVA = "0x314E4C8", Offset = "0x314E4C8", VA = "0x314E4C8")]
		private Vector3 GetCentroid()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60004AF")]
		[Address(RVA = "0x314EAAC", Offset = "0x314EAAC", VA = "0x314EAAC")]
		public IKSolverFABRIKRoot()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000085")]
	public class IKSolverFullBody : IKSolver
	{
		[Token(Token = "0x4000412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D81F8", Offset = "0x15D81F8")]
		public int iterations;

		[Token(Token = "0x4000413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FBIKChain[] chain;

		[Token(Token = "0x4000414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public IKEffector[] effectors;

		[Token(Token = "0x4000415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public IKMappingSpine spineMapping;

		[Token(Token = "0x4000416")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public IKMappingBone[] boneMappings;

		[Token(Token = "0x4000417")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public IKMappingLimb[] limbMappings;

		[Token(Token = "0x4000418")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool FABRIKPass;

		[Token(Token = "0x4000419")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public UpdateDelegate OnPreRead;

		[Token(Token = "0x400041A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public UpdateDelegate OnPreSolve;

		[Token(Token = "0x400041B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x400041C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public IterationDelegate OnPostIteration;

		[Token(Token = "0x400041D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public UpdateDelegate OnPreBend;

		[Token(Token = "0x400041E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public UpdateDelegate OnPostSolve;

		[Token(Token = "0x400041F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public UpdateDelegate OnStoreDefaultLocalState;

		[Token(Token = "0x4000420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public UpdateDelegate OnFixTransforms;

		[Token(Token = "0x60004B0")]
		[Address(RVA = "0x314EB30", Offset = "0x314EB30", VA = "0x314EB30")]
		public IKEffector GetEffector(Transform t)
		{
			return null;
		}

		[Token(Token = "0x60004B1")]
		[Address(RVA = "0x314EC24", Offset = "0x314EC24", VA = "0x314EC24")]
		public FBIKChain GetChain(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x60004B2")]
		[Address(RVA = "0x314EC80", Offset = "0x314EC80", VA = "0x314EC80")]
		public int GetChainIndex(Transform transform)
		{
			return default(int);
		}

		[Token(Token = "0x60004B3")]
		[Address(RVA = "0x3143AF0", Offset = "0x3143AF0", VA = "0x3143AF0")]
		public Node GetNode(int chainIndex, int nodeIndex)
		{
			return null;
		}

		[Token(Token = "0x60004B4")]
		[Address(RVA = "0x314EDB4", Offset = "0x314EDB4", VA = "0x314EDB4")]
		public void GetChainAndNodeIndexes(Transform transform, out int chainIndex, out int nodeIndex)
		{
		}

		[Token(Token = "0x60004B5")]
		[Address(RVA = "0x314EE34", Offset = "0x314EE34", VA = "0x314EE34", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x60004B6")]
		[Address(RVA = "0x314EFE4", Offset = "0x314EFE4", VA = "0x314EFE4", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x60004B7")]
		[Address(RVA = "0x314F158", Offset = "0x314F158", VA = "0x314F158", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60004B8")]
		[Address(RVA = "0x314F360", Offset = "0x314F360", VA = "0x314F360", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60004B9")]
		[Address(RVA = "0x314F42C", Offset = "0x314F42C", VA = "0x314F42C", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x60004BA")]
		[Address(RVA = "0x314F50C", Offset = "0x314F50C", VA = "0x314F50C", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60004BB")]
		[Address(RVA = "0x314F680", Offset = "0x314F680", VA = "0x314F680", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60004BC")]
		[Address(RVA = "0x314F83C", Offset = "0x314F83C", VA = "0x314F83C", Slot = "12")]
		protected virtual void ReadPose()
		{
		}

		[Token(Token = "0x60004BD")]
		[Address(RVA = "0x314FA80", Offset = "0x314FA80", VA = "0x314FA80", Slot = "13")]
		protected virtual void Solve()
		{
		}

		[Token(Token = "0x60004BE")]
		[Address(RVA = "0x314FD50", Offset = "0x314FD50", VA = "0x314FD50", Slot = "14")]
		protected virtual void ApplyBendConstraints()
		{
		}

		[Token(Token = "0x60004BF")]
		[Address(RVA = "0x314FD94", Offset = "0x314FD94", VA = "0x314FD94", Slot = "15")]
		protected virtual void WritePose()
		{
		}

		[Token(Token = "0x60004C0")]
		[Address(RVA = "0x314FE7C", Offset = "0x314FE7C", VA = "0x314FE7C")]
		public IKSolverFullBody()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000086")]
	public enum FullBodyBipedEffector
	{
		[Token(Token = "0x4000422")]
		Body,
		[Token(Token = "0x4000423")]
		LeftShoulder,
		[Token(Token = "0x4000424")]
		RightShoulder,
		[Token(Token = "0x4000425")]
		LeftThigh,
		[Token(Token = "0x4000426")]
		RightThigh,
		[Token(Token = "0x4000427")]
		LeftHand,
		[Token(Token = "0x4000428")]
		RightHand,
		[Token(Token = "0x4000429")]
		LeftFoot,
		[Token(Token = "0x400042A")]
		RightFoot
	}
	[Serializable]
	[Token(Token = "0x2000087")]
	public enum FullBodyBipedChain
	{
		[Token(Token = "0x400042C")]
		LeftArm,
		[Token(Token = "0x400042D")]
		RightArm,
		[Token(Token = "0x400042E")]
		LeftLeg,
		[Token(Token = "0x400042F")]
		RightLeg
	}
	[Serializable]
	[Token(Token = "0x2000088")]
	public class IKSolverFullBodyBiped : IKSolverFullBody
	{
		[Token(Token = "0x4000430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Transform rootNode;

		[Token(Token = "0x4000431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D8210", Offset = "0x15D8210")]
		public float spineStiffness;

		[Token(Token = "0x4000432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D8228", Offset = "0x15D8228")]
		public float pullBodyVertical;

		[Token(Token = "0x4000433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D8240", Offset = "0x15D8240")]
		public float pullBodyHorizontal;

		[Token(Token = "0x4000434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D8258", Offset = "0x15D8258")]
		private Vector3 <pullBodyOffset>k__BackingField;

		[Token(Token = "0x4000435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Vector3 offset;

		[Token(Token = "0x170000A1")]
		public IKEffector bodyEffector
		{
			[Token(Token = "0x60004C1")]
			[Address(RVA = "0x314FF98", Offset = "0x314FF98", VA = "0x314FF98")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A2")]
		public IKEffector leftShoulderEffector
		{
			[Token(Token = "0x60004C2")]
			[Address(RVA = "0x31500E0", Offset = "0x31500E0", VA = "0x31500E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A3")]
		public IKEffector rightShoulderEffector
		{
			[Token(Token = "0x60004C3")]
			[Address(RVA = "0x31500E8", Offset = "0x31500E8", VA = "0x31500E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A4")]
		public IKEffector leftThighEffector
		{
			[Token(Token = "0x60004C4")]
			[Address(RVA = "0x31500F0", Offset = "0x31500F0", VA = "0x31500F0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A5")]
		public IKEffector rightThighEffector
		{
			[Token(Token = "0x60004C5")]
			[Address(RVA = "0x31500F8", Offset = "0x31500F8", VA = "0x31500F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A6")]
		public IKEffector leftHandEffector
		{
			[Token(Token = "0x60004C6")]
			[Address(RVA = "0x3150100", Offset = "0x3150100", VA = "0x3150100")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A7")]
		public IKEffector rightHandEffector
		{
			[Token(Token = "0x60004C7")]
			[Address(RVA = "0x3150108", Offset = "0x3150108", VA = "0x3150108")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A8")]
		public IKEffector leftFootEffector
		{
			[Token(Token = "0x60004C8")]
			[Address(RVA = "0x3150110", Offset = "0x3150110", VA = "0x3150110")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A9")]
		public IKEffector rightFootEffector
		{
			[Token(Token = "0x60004C9")]
			[Address(RVA = "0x3150118", Offset = "0x3150118", VA = "0x3150118")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AA")]
		public FBIKChain leftArmChain
		{
			[Token(Token = "0x60004CA")]
			[Address(RVA = "0x3150120", Offset = "0x3150120", VA = "0x3150120")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AB")]
		public FBIKChain rightArmChain
		{
			[Token(Token = "0x60004CB")]
			[Address(RVA = "0x3150158", Offset = "0x3150158", VA = "0x3150158")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AC")]
		public FBIKChain leftLegChain
		{
			[Token(Token = "0x60004CC")]
			[Address(RVA = "0x3150190", Offset = "0x3150190", VA = "0x3150190")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AD")]
		public FBIKChain rightLegChain
		{
			[Token(Token = "0x60004CD")]
			[Address(RVA = "0x31501C8", Offset = "0x31501C8", VA = "0x31501C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AE")]
		public IKMappingLimb leftArmMapping
		{
			[Token(Token = "0x60004CE")]
			[Address(RVA = "0x3150200", Offset = "0x3150200", VA = "0x3150200")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AF")]
		public IKMappingLimb rightArmMapping
		{
			[Token(Token = "0x60004CF")]
			[Address(RVA = "0x3150234", Offset = "0x3150234", VA = "0x3150234")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B0")]
		public IKMappingLimb leftLegMapping
		{
			[Token(Token = "0x60004D0")]
			[Address(RVA = "0x315026C", Offset = "0x315026C", VA = "0x315026C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B1")]
		public IKMappingLimb rightLegMapping
		{
			[Token(Token = "0x60004D1")]
			[Address(RVA = "0x31502A4", Offset = "0x31502A4", VA = "0x31502A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B2")]
		public IKMappingBone headMapping
		{
			[Token(Token = "0x60004D2")]
			[Address(RVA = "0x31502DC", Offset = "0x31502DC", VA = "0x31502DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B3")]
		public Vector3 pullBodyOffset
		{
			[Token(Token = "0x60004E2")]
			[Address(RVA = "0x3152538", Offset = "0x3152538", VA = "0x3152538")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E3D38", Offset = "0x15E3D38")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60004E3")]
			[Address(RVA = "0x3152544", Offset = "0x3152544", VA = "0x3152544")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E3D48", Offset = "0x15E3D48")]
			private set
			{
			}
		}

		[Token(Token = "0x60004D3")]
		[Address(RVA = "0x3150310", Offset = "0x3150310", VA = "0x3150310")]
		public void SetChainWeights(FullBodyBipedChain c, float pull, float reach = 0f)
		{
		}

		[Token(Token = "0x60004D4")]
		[Address(RVA = "0x315041C", Offset = "0x315041C", VA = "0x315041C")]
		public void SetEffectorWeights(FullBodyBipedEffector effector, float positionWeight, float rotationWeight)
		{
		}

		[Token(Token = "0x60004D5")]
		[Address(RVA = "0x3150364", Offset = "0x3150364", VA = "0x3150364")]
		public FBIKChain GetChain(FullBodyBipedChain c)
		{
			return null;
		}

		[Token(Token = "0x60004D6")]
		[Address(RVA = "0x31504F8", Offset = "0x31504F8", VA = "0x31504F8")]
		public FBIKChain GetChain(FullBodyBipedEffector effector)
		{
			return null;
		}

		[Token(Token = "0x60004D7")]
		[Address(RVA = "0x314FFA0", Offset = "0x314FFA0", VA = "0x314FFA0")]
		public IKEffector GetEffector(FullBodyBipedEffector effector)
		{
			return null;
		}

		[Token(Token = "0x60004D8")]
		[Address(RVA = "0x31505C8", Offset = "0x31505C8", VA = "0x31505C8")]
		public IKEffector GetEndEffector(FullBodyBipedChain c)
		{
			return null;
		}

		[Token(Token = "0x60004D9")]
		[Address(RVA = "0x3150680", Offset = "0x3150680", VA = "0x3150680")]
		public IKMappingLimb GetLimbMapping(FullBodyBipedChain chain)
		{
			return null;
		}

		[Token(Token = "0x60004DA")]
		[Address(RVA = "0x3150734", Offset = "0x3150734", VA = "0x3150734")]
		public IKMappingLimb GetLimbMapping(FullBodyBipedEffector effector)
		{
			return null;
		}

		[Token(Token = "0x60004DB")]
		[Address(RVA = "0x31507E8", Offset = "0x31507E8", VA = "0x31507E8")]
		public IKMappingSpine GetSpineMapping()
		{
			return null;
		}

		[Token(Token = "0x60004DC")]
		[Address(RVA = "0x31507F0", Offset = "0x31507F0", VA = "0x31507F0")]
		public IKMappingBone GetHeadMapping()
		{
			return null;
		}

		[Token(Token = "0x60004DD")]
		[Address(RVA = "0x3150824", Offset = "0x3150824", VA = "0x3150824")]
		public IKConstraintBend GetBendConstraint(FullBodyBipedChain limb)
		{
			return null;
		}

		[Token(Token = "0x60004DE")]
		[Address(RVA = "0x31508EC", Offset = "0x31508EC", VA = "0x31508EC", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60004DF")]
		[Address(RVA = "0x3150A80", Offset = "0x3150A80", VA = "0x3150A80")]
		public void SetToReferences(BipedReferences references, [Optional] Transform rootNode)
		{
		}

		[Token(Token = "0x60004E0")]
		[Address(RVA = "0x3151E54", Offset = "0x3151E54", VA = "0x3151E54")]
		public static Transform DetectRootNodeBone(BipedReferences references)
		{
			return null;
		}

		[Token(Token = "0x60004E1")]
		[Address(RVA = "0x31522E8", Offset = "0x31522E8", VA = "0x31522E8")]
		public void SetLimbOrientations(BipedLimbOrientations o)
		{
		}

		[Token(Token = "0x60004E4")]
		[Address(RVA = "0x3152348", Offset = "0x3152348", VA = "0x3152348")]
		private void SetLimbOrientation(FullBodyBipedChain chain, BipedLimbOrientations.LimbOrientation limbOrientation)
		{
		}

		[Token(Token = "0x60004E5")]
		[Address(RVA = "0x3152168", Offset = "0x3152168", VA = "0x3152168")]
		private static Transform GetLeftClavicle(BipedReferences references)
		{
			return null;
		}

		[Token(Token = "0x60004E6")]
		[Address(RVA = "0x3152228", Offset = "0x3152228", VA = "0x3152228")]
		private static Transform GetRightClavicle(BipedReferences references)
		{
			return null;
		}

		[Token(Token = "0x60004E7")]
		[Address(RVA = "0x3152550", Offset = "0x3152550", VA = "0x3152550")]
		private static bool Contains(Transform[] array, Transform transform)
		{
			return default(bool);
		}

		[Token(Token = "0x60004E8")]
		[Address(RVA = "0x315262C", Offset = "0x315262C", VA = "0x315262C", Slot = "12")]
		protected override void ReadPose()
		{
		}

		[Token(Token = "0x60004E9")]
		[Address(RVA = "0x3152774", Offset = "0x3152774", VA = "0x3152774")]
		private void PullBody()
		{
		}

		[Token(Token = "0x60004EA")]
		[Address(RVA = "0x3152904", Offset = "0x3152904", VA = "0x3152904")]
		private Vector3 GetBodyOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60004EB")]
		[Address(RVA = "0x3152B04", Offset = "0x3152B04", VA = "0x3152B04")]
		private Vector3 GetHandBodyPull(IKEffector effector, FBIKChain arm, Vector3 offset)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60004EC")]
		[Address(RVA = "0x3152D04", Offset = "0x3152D04", VA = "0x3152D04", Slot = "14")]
		protected override void ApplyBendConstraints()
		{
		}

		[Token(Token = "0x60004ED")]
		[Address(RVA = "0x3153038", Offset = "0x3153038", VA = "0x3153038", Slot = "15")]
		protected override void WritePose()
		{
		}

		[Token(Token = "0x60004EE")]
		[Address(RVA = "0x3153138", Offset = "0x3153138", VA = "0x3153138")]
		public IKSolverFullBodyBiped()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000089")]
	public class IKSolverHeuristic : IKSolver
	{
		[Token(Token = "0x4000436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform target;

		[Token(Token = "0x4000437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float tolerance;

		[Token(Token = "0x4000438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public int maxIterations;

		[Token(Token = "0x4000439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool useRotationLimits;

		[Token(Token = "0x400043A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool XY;

		[Token(Token = "0x400043B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Bone[] bones;

		[Token(Token = "0x400043C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Vector3 lastLocalDirection;

		[Token(Token = "0x400043D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		protected float chainLength;

		[Token(Token = "0x170000B4")]
		protected virtual int minBones
		{
			[Token(Token = "0x60004F6")]
			[Address(RVA = "0x31539C4", Offset = "0x31539C4", VA = "0x31539C4", Slot = "12")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000B5")]
		protected virtual bool boneLengthCanBeZero
		{
			[Token(Token = "0x60004F7")]
			[Address(RVA = "0x31539CC", Offset = "0x31539CC", VA = "0x31539CC", Slot = "13")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B6")]
		protected virtual bool allowCommonParent
		{
			[Token(Token = "0x60004F8")]
			[Address(RVA = "0x31539D4", Offset = "0x31539D4", VA = "0x31539D4", Slot = "14")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B7")]
		protected virtual Vector3 localDirection
		{
			[Token(Token = "0x60004FC")]
			[Address(RVA = "0x31539E4", Offset = "0x31539E4", VA = "0x31539E4", Slot = "15")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000B8")]
		protected float positionOffset
		{
			[Token(Token = "0x60004FD")]
			[Address(RVA = "0x314A53C", Offset = "0x314A53C", VA = "0x314A53C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60004EF")]
		[Address(RVA = "0x3153144", Offset = "0x3153144", VA = "0x3153144")]
		public bool SetChain(Transform[] hierarchy, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F0")]
		[Address(RVA = "0x31532F0", Offset = "0x31532F0", VA = "0x31532F0")]
		public void AddBone(Transform bone)
		{
		}

		[Token(Token = "0x60004F1")]
		[Address(RVA = "0x3153454", Offset = "0x3153454", VA = "0x3153454", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60004F2")]
		[Address(RVA = "0x31534BC", Offset = "0x31534BC", VA = "0x31534BC", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x60004F3")]
		[Address(RVA = "0x3153538", Offset = "0x3153538", VA = "0x3153538", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F4")]
		[Address(RVA = "0x31538C8", Offset = "0x31538C8", VA = "0x31538C8", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x60004F5")]
		[Address(RVA = "0x31538D0", Offset = "0x31538D0", VA = "0x31538D0", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x60004F9")]
		[Address(RVA = "0x31539DC", Offset = "0x31539DC", VA = "0x31539DC", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60004FA")]
		[Address(RVA = "0x31539E0", Offset = "0x31539E0", VA = "0x31539E0", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60004FB")]
		[Address(RVA = "0x314993C", Offset = "0x314993C", VA = "0x314993C")]
		protected void InitiateBones()
		{
		}

		[Token(Token = "0x60004FE")]
		[Address(RVA = "0x314A1A4", Offset = "0x314A1A4", VA = "0x314A1A4")]
		protected Vector3 GetSingularityOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60004FF")]
		[Address(RVA = "0x3153B18", Offset = "0x3153B18", VA = "0x3153B18")]
		private bool SingularityDetected()
		{
			return default(bool);
		}

		[Token(Token = "0x6000500")]
		[Address(RVA = "0x31487F4", Offset = "0x31487F4", VA = "0x31487F4")]
		public IKSolverHeuristic()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200008A")]
	public class IKSolverLeg : IKSolver
	{
		[Token(Token = "0x400043E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D8268", Offset = "0x15D8268")]
		public float IKRotationWeight;

		[Token(Token = "0x400043F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Quaternion IKRotation;

		[Token(Token = "0x4000440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Point pelvis;

		[Token(Token = "0x4000441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Point thigh;

		[Token(Token = "0x4000442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Point calf;

		[Token(Token = "0x4000443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Point foot;

		[Token(Token = "0x4000444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Point toe;

		[Token(Token = "0x4000445")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public IKSolverVR.Leg leg;

		[Token(Token = "0x4000446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Vector3 heelOffset;

		[Token(Token = "0x4000447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3[] positions;

		[Token(Token = "0x4000448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Quaternion[] rotations;

		[Token(Token = "0x6000501")]
		[Address(RVA = "0x3153DCC", Offset = "0x3153DCC", VA = "0x3153DCC", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000502")]
		[Address(RVA = "0x3154188", Offset = "0x3154188", VA = "0x3154188")]
		public bool SetChain(Transform pelvis, Transform thigh, Transform calf, Transform foot, Transform toe, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x6000503")]
		[Address(RVA = "0x315423C", Offset = "0x315423C", VA = "0x315423C", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6000504")]
		[Address(RVA = "0x31543D4", Offset = "0x31543D4", VA = "0x31543D4", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6000505")]
		[Address(RVA = "0x315456C", Offset = "0x315456C", VA = "0x315456C", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000506")]
		[Address(RVA = "0x31545B8", Offset = "0x31545B8", VA = "0x31545B8", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6000507")]
		[Address(RVA = "0x3154618", Offset = "0x3154618", VA = "0x3154618", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000508")]
		[Address(RVA = "0x3154988", Offset = "0x3154988", VA = "0x3154988", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6000509")]
		[Address(RVA = "0x31549B4", Offset = "0x31549B4", VA = "0x31549B4")]
		private void Solve()
		{
		}

		[Token(Token = "0x600050A")]
		[Address(RVA = "0x315467C", Offset = "0x315467C", VA = "0x315467C")]
		private void Read()
		{
		}

		[Token(Token = "0x600050B")]
		[Address(RVA = "0x3154ABC", Offset = "0x3154ABC", VA = "0x3154ABC")]
		private void Write()
		{
		}

		[Token(Token = "0x600050C")]
		[Address(RVA = "0x3154C48", Offset = "0x3154C48", VA = "0x3154C48")]
		public IKSolverLeg()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200008B")]
	public class IKSolverLimb : IKSolverTrigonometric
	{
		[Serializable]
		[Token(Token = "0x2000209")]
		public enum BendModifier
		{
			[Token(Token = "0x4000D52")]
			Animation,
			[Token(Token = "0x4000D53")]
			Target,
			[Token(Token = "0x4000D54")]
			Parent,
			[Token(Token = "0x4000D55")]
			Arm,
			[Token(Token = "0x4000D56")]
			Goal
		}

		[Serializable]
		[Token(Token = "0x200020A")]
		public struct AxisDirection
		{
			[Token(Token = "0x4000D57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 direction;

			[Token(Token = "0x4000D58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 axis;

			[Token(Token = "0x4000D59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float dot;

			[Token(Token = "0x6000D4B")]
			[Address(RVA = "0x31564AC", Offset = "0x31564AC", VA = "0x31564AC")]
			public AxisDirection(Vector3 direction, Vector3 axis)
			{
			}
		}

		[Token(Token = "0x4000449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public AvatarIKGoal goal;

		[Token(Token = "0x400044A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public BendModifier bendModifier;

		[Token(Token = "0x400044B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D8280", Offset = "0x15D8280")]
		public float maintainRotationWeight;

		[Token(Token = "0x400044C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D8298", Offset = "0x15D8298")]
		public float bendModifierWeight;

		[Token(Token = "0x400044D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Transform bendGoal;

		[Token(Token = "0x400044E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool maintainBendFor1Frame;

		[Token(Token = "0x400044F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
		private bool maintainRotationFor1Frame;

		[Token(Token = "0x4000450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Quaternion defaultRootRotation;

		[Token(Token = "0x4000451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Quaternion parentDefaultRotation;

		[Token(Token = "0x4000452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private Quaternion bone3RotationBeforeSolve;

		[Token(Token = "0x4000453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private Quaternion maintainRotation;

		[Token(Token = "0x4000454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private Quaternion bone3DefaultRotation;

		[Token(Token = "0x4000455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private Vector3 _bendNormal;

		[Token(Token = "0x4000456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Vector3 animationNormal;

		[Token(Token = "0x4000457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private AxisDirection[] axisDirectionsLeft;

		[Token(Token = "0x4000458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private AxisDirection[] axisDirectionsRight;

		[Token(Token = "0x170000B9")]
		private AxisDirection[] axisDirections
		{
			[Token(Token = "0x6000514")]
			[Address(RVA = "0x3156490", Offset = "0x3156490", VA = "0x3156490")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600050D")]
		[Address(RVA = "0x3154DF8", Offset = "0x3154DF8", VA = "0x3154DF8")]
		public void MaintainRotation()
		{
		}

		[Token(Token = "0x600050E")]
		[Address(RVA = "0x3154E48", Offset = "0x3154E48", VA = "0x3154E48")]
		public void MaintainBend()
		{
		}

		[Token(Token = "0x600050F")]
		[Address(RVA = "0x3154E94", Offset = "0x3154E94", VA = "0x3154E94", Slot = "12")]
		protected override void OnInitiateVirtual()
		{
		}

		[Token(Token = "0x6000510")]
		[Address(RVA = "0x31554FC", Offset = "0x31554FC", VA = "0x31554FC", Slot = "13")]
		protected override void OnUpdateVirtual()
		{
		}

		[Token(Token = "0x6000511")]
		[Address(RVA = "0x31560DC", Offset = "0x31560DC", VA = "0x31560DC", Slot = "14")]
		protected override void OnPostSolveVirtual()
		{
		}

		[Token(Token = "0x6000512")]
		[Address(RVA = "0x3156224", Offset = "0x3156224", VA = "0x3156224")]
		public IKSolverLimb()
		{
		}

		[Token(Token = "0x6000513")]
		[Address(RVA = "0x31563F0", Offset = "0x31563F0", VA = "0x31563F0")]
		public IKSolverLimb(AvatarIKGoal goal)
		{
		}

		[Token(Token = "0x6000515")]
		[Address(RVA = "0x3155208", Offset = "0x3155208", VA = "0x3155208")]
		private void StoreAxisDirections(ref AxisDirection[] axisDirections)
		{
		}

		[Token(Token = "0x6000516")]
		[Address(RVA = "0x3155628", Offset = "0x3155628", VA = "0x3155628")]
		private Vector3 GetModifiedBendNormal()
		{
			return default(Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x200008C")]
	public class IKSolverLookAt : IKSolver
	{
		[Serializable]
		[Token(Token = "0x200020B")]
		public class LookAtBone : Bone
		{
			[Token(Token = "0x4000D5A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			public Vector3 baseForwardOffsetEuler;

			[Token(Token = "0x17000190")]
			public Vector3 forward
			{
				[Token(Token = "0x6000D50")]
				[Address(RVA = "0x31585F4", Offset = "0x31585F4", VA = "0x31585F4")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x6000D4C")]
			[Address(RVA = "0x3158DA4", Offset = "0x3158DA4", VA = "0x3158DA4")]
			public LookAtBone()
			{
			}

			[Token(Token = "0x6000D4D")]
			[Address(RVA = "0x3157748", Offset = "0x3157748", VA = "0x3157748")]
			public LookAtBone(Transform transform)
			{
			}

			[Token(Token = "0x6000D4E")]
			[Address(RVA = "0x3157ACC", Offset = "0x3157ACC", VA = "0x3157ACC")]
			public void Initiate(Transform root)
			{
			}

			[Token(Token = "0x6000D4F")]
			[Address(RVA = "0x31589F8", Offset = "0x31589F8", VA = "0x31589F8")]
			public void LookAt(Vector3 direction, float weight)
			{
			}
		}

		[Token(Token = "0x4000459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform target;

		[Token(Token = "0x400045A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public LookAtBone[] spine;

		[Token(Token = "0x400045B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public LookAtBone head;

		[Token(Token = "0x400045C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public LookAtBone[] eyes;

		[Token(Token = "0x400045D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D82B0", Offset = "0x15D82B0")]
		public float bodyWeight;

		[Token(Token = "0x400045E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D82C8", Offset = "0x15D82C8")]
		public float headWeight;

		[Token(Token = "0x400045F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D82E0", Offset = "0x15D82E0")]
		public float eyesWeight;

		[Token(Token = "0x4000460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D82F8", Offset = "0x15D82F8")]
		public float clampWeight;

		[Token(Token = "0x4000461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D8310", Offset = "0x15D8310")]
		public float clampWeightHead;

		[Token(Token = "0x4000462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D8328", Offset = "0x15D8328")]
		public float clampWeightEyes;

		[Token(Token = "0x4000463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D8340", Offset = "0x15D8340")]
		public int clampSmoothing;

		[Token(Token = "0x4000464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public AnimationCurve spineWeightCurve;

		[Token(Token = "0x4000465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Vector3 spineTargetOffset;

		[Token(Token = "0x4000466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected Vector3[] spineForwards;

		[Token(Token = "0x4000467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected Vector3[] headForwards;

		[Token(Token = "0x4000468")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected Vector3[] eyeForward;

		[Token(Token = "0x170000BA")]
		protected bool spineIsValid
		{
			[Token(Token = "0x6000525")]
			[Address(RVA = "0x3156E38", Offset = "0x3156E38", VA = "0x3156E38")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000BB")]
		protected bool spineIsEmpty
		{
			[Token(Token = "0x6000526")]
			[Address(RVA = "0x3157010", Offset = "0x3157010", VA = "0x3157010")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000BC")]
		protected bool headIsValid
		{
			[Token(Token = "0x6000528")]
			[Address(RVA = "0x3156F1C", Offset = "0x3156F1C", VA = "0x3156F1C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000BD")]
		protected bool headIsEmpty
		{
			[Token(Token = "0x6000529")]
			[Address(RVA = "0x3157034", Offset = "0x3157034", VA = "0x3157034")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000BE")]
		protected bool eyesIsValid
		{
			[Token(Token = "0x600052B")]
			[Address(RVA = "0x3156F2C", Offset = "0x3156F2C", VA = "0x3156F2C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000BF")]
		protected bool eyesIsEmpty
		{
			[Token(Token = "0x600052C")]
			[Address(RVA = "0x31570B0", Offset = "0x31570B0", VA = "0x31570B0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000517")]
		[Address(RVA = "0x315650C", Offset = "0x315650C", VA = "0x315650C")]
		public void SetLookAtWeight(float weight)
		{
		}

		[Token(Token = "0x6000518")]
		[Address(RVA = "0x3156590", Offset = "0x3156590", VA = "0x3156590")]
		public void SetLookAtWeight(float weight, float bodyWeight)
		{
		}

		[Token(Token = "0x6000519")]
		[Address(RVA = "0x315663C", Offset = "0x315663C", VA = "0x315663C")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight)
		{
		}

		[Token(Token = "0x600051A")]
		[Address(RVA = "0x3156704", Offset = "0x3156704", VA = "0x3156704")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight)
		{
		}

		[Token(Token = "0x600051B")]
		[Address(RVA = "0x31567F0", Offset = "0x31567F0", VA = "0x31567F0")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight)
		{
		}

		[Token(Token = "0x600051C")]
		[Address(RVA = "0x31568FC", Offset = "0x31568FC", VA = "0x31568FC")]
		public void SetLookAtWeight(float weight, float bodyWeight = 0f, float headWeight = 1f, float eyesWeight = 0.5f, float clampWeight = 0.5f, float clampWeightHead = 0.5f, float clampWeightEyes = 0.3f)
		{
		}

		[Token(Token = "0x600051D")]
		[Address(RVA = "0x3156A44", Offset = "0x3156A44", VA = "0x3156A44", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x600051E")]
		[Address(RVA = "0x3156B68", Offset = "0x3156B68", VA = "0x3156B68", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x600051F")]
		[Address(RVA = "0x3156CA0", Offset = "0x3156CA0", VA = "0x3156CA0", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000520")]
		[Address(RVA = "0x31570D4", Offset = "0x31570D4", VA = "0x31570D4", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6000521")]
		[Address(RVA = "0x315733C", Offset = "0x315733C", VA = "0x315733C", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6000522")]
		[Address(RVA = "0x31574DC", Offset = "0x31574DC", VA = "0x31574DC")]
		public bool SetChain(Transform[] spine, Transform head, Transform[] eyes, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x6000523")]
		[Address(RVA = "0x3157778", Offset = "0x3157778", VA = "0x3157778", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000524")]
		[Address(RVA = "0x3157C08", Offset = "0x3157C08", VA = "0x3157C08", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6000527")]
		[Address(RVA = "0x3157D0C", Offset = "0x3157D0C", VA = "0x3157D0C")]
		protected void SolveSpine()
		{
		}

		[Token(Token = "0x600052A")]
		[Address(RVA = "0x3157F38", Offset = "0x3157F38", VA = "0x3157F38")]
		protected void SolveHead()
		{
		}

		[Token(Token = "0x600052D")]
		[Address(RVA = "0x3158194", Offset = "0x3158194", VA = "0x3158194")]
		protected void SolveEyes()
		{
		}

		[Token(Token = "0x600052E")]
		[Address(RVA = "0x31586C0", Offset = "0x31586C0", VA = "0x31586C0")]
		protected Vector3[] GetForwards(ref Vector3[] forwards, Vector3 baseForward, Vector3 targetForward, int bones, float clamp)
		{
			return null;
		}

		[Token(Token = "0x600052F")]
		[Address(RVA = "0x315759C", Offset = "0x315759C", VA = "0x315759C")]
		protected void SetBones(Transform[] array, ref LookAtBone[] bones)
		{
		}

		[Token(Token = "0x6000530")]
		[Address(RVA = "0x3158B60", Offset = "0x3158B60", VA = "0x3158B60")]
		public IKSolverLookAt()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200008D")]
	public class IKSolverTrigonometric : IKSolver
	{
		[Serializable]
		[Token(Token = "0x200020C")]
		public class TrigonometricBone : Bone
		{
			[Token(Token = "0x4000D5B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			private Quaternion targetToLocalSpace;

			[Token(Token = "0x4000D5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			private Vector3 defaultLocalBendNormal;

			[Token(Token = "0x6000D51")]
			[Address(RVA = "0x30CFF80", Offset = "0x30CFF80", VA = "0x30CFF80")]
			public void Initiate(Vector3 childPosition, Vector3 bendNormal)
			{
			}

			[Token(Token = "0x6000D52")]
			[Address(RVA = "0x30D0120", Offset = "0x30D0120", VA = "0x30D0120")]
			public Quaternion GetRotation(Vector3 direction, Vector3 bendNormal)
			{
				return default(Quaternion);
			}

			[Token(Token = "0x6000D53")]
			[Address(RVA = "0x30D01DC", Offset = "0x30D01DC", VA = "0x30D01DC")]
			public Vector3 GetBendNormalFromCurrentRotation()
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000D54")]
			[Address(RVA = "0x30D02A8", Offset = "0x30D02A8", VA = "0x30D02A8")]
			public TrigonometricBone()
			{
			}
		}

		[Token(Token = "0x4000469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform target;

		[Token(Token = "0x400046A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D8358", Offset = "0x15D8358")]
		public float IKRotationWeight;

		[Token(Token = "0x400046B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Quaternion IKRotation;

		[Token(Token = "0x400046C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public Vector3 bendNormal;

		[Token(Token = "0x400046D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public TrigonometricBone bone1;

		[Token(Token = "0x400046E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public TrigonometricBone bone2;

		[Token(Token = "0x400046F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public TrigonometricBone bone3;

		[Token(Token = "0x4000470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected Vector3 weightIKPosition;

		[Token(Token = "0x4000471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		protected bool directHierarchy;

		[Token(Token = "0x6000531")]
		[Address(RVA = "0x3158DA8", Offset = "0x3158DA8", VA = "0x3158DA8")]
		public void SetBendGoalPosition(Vector3 goalPosition, float weight)
		{
		}

		[Token(Token = "0x6000532")]
		[Address(RVA = "0x3158F98", Offset = "0x3158F98", VA = "0x3158F98")]
		public void SetBendPlaneToCurrent()
		{
		}

		[Token(Token = "0x6000533")]
		[Address(RVA = "0x315914C", Offset = "0x315914C", VA = "0x315914C")]
		public void SetIKRotation(Quaternion rotation)
		{
		}

		[Token(Token = "0x6000534")]
		[Address(RVA = "0x3159158", Offset = "0x3159158", VA = "0x3159158")]
		public void SetIKRotationWeight(float weight)
		{
		}

		[Token(Token = "0x6000535")]
		[Address(RVA = "0x31591DC", Offset = "0x31591DC", VA = "0x31591DC")]
		public Quaternion GetIKRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000536")]
		[Address(RVA = "0x31591E8", Offset = "0x31591E8", VA = "0x31591E8")]
		public float GetIKRotationWeight()
		{
			return default(float);
		}

		[Token(Token = "0x6000537")]
		[Address(RVA = "0x31591F0", Offset = "0x31591F0", VA = "0x31591F0", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6000538")]
		[Address(RVA = "0x3159318", Offset = "0x3159318", VA = "0x3159318", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6000539")]
		[Address(RVA = "0x3159438", Offset = "0x3159438", VA = "0x3159438", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x600053A")]
		[Address(RVA = "0x3159478", Offset = "0x3159478", VA = "0x3159478", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x600053B")]
		[Address(RVA = "0x31594CC", Offset = "0x31594CC", VA = "0x31594CC", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600053C")]
		[Address(RVA = "0x31598D8", Offset = "0x31598D8", VA = "0x31598D8")]
		public bool SetChain(Transform bone1, Transform bone2, Transform bone3, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x600053D")]
		[Address(RVA = "0x3159954", Offset = "0x3159954", VA = "0x3159954")]
		public static void Solve(Transform bone1, Transform bone2, Transform bone3, Vector3 targetPosition, Vector3 bendNormal, float weight)
		{
		}

		[Token(Token = "0x600053E")]
		[Address(RVA = "0x3159EFC", Offset = "0x3159EFC", VA = "0x3159EFC")]
		private static Vector3 GetDirectionToBendPoint(Vector3 direction, float directionMag, Vector3 bendDirection, float sqrMag1, float sqrMag2)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600053F")]
		[Address(RVA = "0x315A114", Offset = "0x315A114", VA = "0x315A114", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000540")]
		[Address(RVA = "0x315A2D8", Offset = "0x315A2D8", VA = "0x315A2D8")]
		private bool IsDirectHierarchy()
		{
			return default(bool);
		}

		[Token(Token = "0x6000541")]
		[Address(RVA = "0x315A24C", Offset = "0x315A24C", VA = "0x315A24C")]
		private void InitiateBones()
		{
		}

		[Token(Token = "0x6000542")]
		[Address(RVA = "0x315A3E0", Offset = "0x315A3E0", VA = "0x315A3E0", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6000543")]
		[Address(RVA = "0x315AE14", Offset = "0x315AE14", VA = "0x315AE14", Slot = "12")]
		protected virtual void OnInitiateVirtual()
		{
		}

		[Token(Token = "0x6000544")]
		[Address(RVA = "0x315AE18", Offset = "0x315AE18", VA = "0x315AE18", Slot = "13")]
		protected virtual void OnUpdateVirtual()
		{
		}

		[Token(Token = "0x6000545")]
		[Address(RVA = "0x315AE1C", Offset = "0x315AE1C", VA = "0x315AE1C", Slot = "14")]
		protected virtual void OnPostSolveVirtual()
		{
		}

		[Token(Token = "0x6000546")]
		[Address(RVA = "0x315AB08", Offset = "0x315AB08", VA = "0x315AB08")]
		protected Vector3 GetBendDirection(Vector3 IKPosition, Vector3 bendNormal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000547")]
		[Address(RVA = "0x31562B0", Offset = "0x31562B0", VA = "0x31562B0")]
		public IKSolverTrigonometric()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200008E")]
	public class IKSolverVR : IKSolver
	{
		[Serializable]
		[Token(Token = "0x200020D")]
		public class Arm : BodyPart
		{
			[Serializable]
			[Token(Token = "0x2000289")]
			public enum ShoulderRotationMode
			{
				[Token(Token = "0x4001056")]
				YawPitch,
				[Token(Token = "0x4001057")]
				FromTo
			}

			[Token(Token = "0x4000D5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DF484", Offset = "0x15DF484")]
			public Transform target;

			[Token(Token = "0x4000D5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DF4BC", Offset = "0x15DF4BC")]
			public Transform bendGoal;

			[Token(Token = "0x4000D5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DF4F4", Offset = "0x15DF4F4")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DF4F4", Offset = "0x15DF4F4")]
			public float positionWeight;

			[Token(Token = "0x4000D60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DF548", Offset = "0x15DF548")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DF548", Offset = "0x15DF548")]
			public float rotationWeight;

			[Token(Token = "0x4000D61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DF59C", Offset = "0x15DF59C")]
			public ShoulderRotationMode shoulderRotationMode;

			[Token(Token = "0x4000D62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DF5D4", Offset = "0x15DF5D4")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DF5D4", Offset = "0x15DF5D4")]
			public float shoulderRotationWeight;

			[Token(Token = "0x4000D63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DF628", Offset = "0x15DF628")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DF628", Offset = "0x15DF628")]
			public float shoulderTwistWeight;

			[Token(Token = "0x4000D64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DF67C", Offset = "0x15DF67C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DF67C", Offset = "0x15DF67C")]
			public float bendGoalWeight;

			[Token(Token = "0x4000D65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DF6D0", Offset = "0x15DF6D0")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DF6D0", Offset = "0x15DF6D0")]
			public float swivelOffset;

			[Token(Token = "0x4000D66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DF72C", Offset = "0x15DF72C")]
			public Vector3 wristToPalmAxis;

			[Token(Token = "0x4000D67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DF764", Offset = "0x15DF764")]
			public Vector3 palmToThumbAxis;

			[Token(Token = "0x4000D68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DF79C", Offset = "0x15DF79C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DF79C", Offset = "0x15DF79C")]
			public float armLengthMlp;

			[Token(Token = "0x4000D69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DF7F4", Offset = "0x15DF7F4")]
			public AnimationCurve stretchCurve;

			[NonSerialized]
			[Token(Token = "0x4000D6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[HideInInspector]
			public Vector3 IKPosition;

			[NonSerialized]
			[Token(Token = "0x4000D6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
			[HideInInspector]
			public Quaternion IKRotation;

			[NonSerialized]
			[Token(Token = "0x4000D6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
			[HideInInspector]
			public Vector3 bendDirection;

			[NonSerialized]
			[Token(Token = "0x4000D6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			[HideInInspector]
			public Vector3 handPositionOffset;

			[Token(Token = "0x4000D6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DF86C", Offset = "0x15DF86C")]
			private Vector3 <position>k__BackingField;

			[Token(Token = "0x4000D6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DF87C", Offset = "0x15DF87C")]
			private Quaternion <rotation>k__BackingField;

			[Token(Token = "0x4000D70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
			private bool hasShoulder;

			[Token(Token = "0x4000D71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
			private Vector3 chestForwardAxis;

			[Token(Token = "0x4000D72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			private Vector3 chestUpAxis;

			[Token(Token = "0x4000D73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
			private Quaternion chestRotation;

			[Token(Token = "0x4000D74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
			private Vector3 chestForward;

			[Token(Token = "0x4000D75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
			private Vector3 chestUp;

			[Token(Token = "0x4000D76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
			private Quaternion forearmRelToUpperArm;

			[Token(Token = "0x4000D77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
			private Vector3 upperArmBendAxis;

			[Token(Token = "0x4000D78")]
			private const float yawOffsetAngle = 45f;

			[Token(Token = "0x4000D79")]
			private const float pitchOffsetAngle = -30f;

			[Token(Token = "0x17000191")]
			public Vector3 position
			{
				[Token(Token = "0x6000D55")]
				[Address(RVA = "0x30D95F8", Offset = "0x30D95F8", VA = "0x30D95F8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5CF4", Offset = "0x15E5CF4")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000D56")]
				[Address(RVA = "0x30D9604", Offset = "0x30D9604", VA = "0x30D9604")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5D04", Offset = "0x15E5D04")]
				private set
				{
				}
			}

			[Token(Token = "0x17000192")]
			public Quaternion rotation
			{
				[Token(Token = "0x6000D57")]
				[Address(RVA = "0x30D9610", Offset = "0x30D9610", VA = "0x30D9610")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5D14", Offset = "0x15E5D14")]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x6000D58")]
				[Address(RVA = "0x30D961C", Offset = "0x30D961C", VA = "0x30D961C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5D24", Offset = "0x15E5D24")]
				private set
				{
				}
			}

			[Token(Token = "0x17000193")]
			private VirtualBone shoulder
			{
				[Token(Token = "0x6000D59")]
				[Address(RVA = "0x30D9628", Offset = "0x30D9628", VA = "0x30D9628")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000194")]
			private VirtualBone upperArm
			{
				[Token(Token = "0x6000D5A")]
				[Address(RVA = "0x30D965C", Offset = "0x30D965C", VA = "0x30D965C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000195")]
			private VirtualBone forearm
			{
				[Token(Token = "0x6000D5B")]
				[Address(RVA = "0x30D969C", Offset = "0x30D969C", VA = "0x30D969C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000196")]
			private VirtualBone hand
			{
				[Token(Token = "0x6000D5C")]
				[Address(RVA = "0x30D96E8", Offset = "0x30D96E8", VA = "0x30D96E8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D5D")]
			[Address(RVA = "0x30D9734", Offset = "0x30D9734", VA = "0x30D9734", Slot = "4")]
			protected override void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x6000D5E")]
			[Address(RVA = "0x30DA098", Offset = "0x30DA098", VA = "0x30DA098", Slot = "5")]
			public override void PreSolve()
			{
			}

			[Token(Token = "0x6000D5F")]
			[Address(RVA = "0x30DA28C", Offset = "0x30DA28C", VA = "0x30DA28C", Slot = "7")]
			public override void ApplyOffsets()
			{
			}

			[Token(Token = "0x6000D60")]
			[Address(RVA = "0x30DA338", Offset = "0x30DA338", VA = "0x30DA338")]
			private void Stretching()
			{
			}

			[Token(Token = "0x6000D61")]
			[Address(RVA = "0x30D7360", Offset = "0x30D7360", VA = "0x30D7360")]
			public void Solve(bool isLeft)
			{
			}

			[Token(Token = "0x6000D62")]
			[Address(RVA = "0x30DB760", Offset = "0x30DB760", VA = "0x30DB760", Slot = "8")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x6000D63")]
			[Address(RVA = "0x30DB7D0", Offset = "0x30DB7D0", VA = "0x30DB7D0", Slot = "6")]
			public override void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x6000D64")]
			[Address(RVA = "0x30DA750", Offset = "0x30DA750", VA = "0x30DA750")]
			private float DamperValue(float value, float min, float max, float weight = 1f)
			{
				return default(float);
			}

			[Token(Token = "0x6000D65")]
			[Address(RVA = "0x30DAA5C", Offset = "0x30DAA5C", VA = "0x30DAA5C")]
			private Vector3 GetBendNormal(Vector3 dir)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000D66")]
			[Address(RVA = "0x30DB9F0", Offset = "0x30DB9F0", VA = "0x30DB9F0")]
			private void Visualize(VirtualBone bone1, VirtualBone bone2, VirtualBone bone3, Color color)
			{
			}

			[Token(Token = "0x6000D67")]
			[Address(RVA = "0x30D92BC", Offset = "0x30D92BC", VA = "0x30D92BC")]
			public Arm()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200020E")]
		public abstract class BodyPart
		{
			[Token(Token = "0x4000D7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DF88C", Offset = "0x15DF88C")]
			private float <sqrMag>k__BackingField;

			[Token(Token = "0x4000D7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DF89C", Offset = "0x15DF89C")]
			private float <mag>k__BackingField;

			[Token(Token = "0x4000D7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[HideInInspector]
			public VirtualBone[] bones;

			[Token(Token = "0x4000D7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			protected bool initiated;

			[Token(Token = "0x4000D7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			protected Vector3 rootPosition;

			[Token(Token = "0x4000D7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			protected Quaternion rootRotation;

			[Token(Token = "0x4000D80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			protected int index;

			[Token(Token = "0x4000D81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			protected int LOD;

			[Token(Token = "0x17000197")]
			public float sqrMag
			{
				[Token(Token = "0x6000D6D")]
				[Address(RVA = "0x30DBBBC", Offset = "0x30DBBBC", VA = "0x30DBBBC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5D34", Offset = "0x15E5D34")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000D6E")]
				[Address(RVA = "0x30DBBC4", Offset = "0x30DBBC4", VA = "0x30DBBC4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5D44", Offset = "0x15E5D44")]
				private set
				{
				}
			}

			[Token(Token = "0x17000198")]
			public float mag
			{
				[Token(Token = "0x6000D6F")]
				[Address(RVA = "0x30DBBCC", Offset = "0x30DBBCC", VA = "0x30DBBCC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5D54", Offset = "0x15E5D54")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000D70")]
				[Address(RVA = "0x30DBBD4", Offset = "0x30DBBD4", VA = "0x30DBBD4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5D64", Offset = "0x15E5D64")]
				private set
				{
				}
			}

			[Token(Token = "0x6000D68")]
			protected abstract void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index);

			[Token(Token = "0x6000D69")]
			public abstract void PreSolve();

			[Token(Token = "0x6000D6A")]
			public abstract void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations);

			[Token(Token = "0x6000D6B")]
			public abstract void ApplyOffsets();

			[Token(Token = "0x6000D6C")]
			public abstract void ResetOffsets();

			[Token(Token = "0x6000D71")]
			[Address(RVA = "0x30DBBDC", Offset = "0x30DBBDC", VA = "0x30DBBDC")]
			public void SetLOD(int LOD)
			{
			}

			[Token(Token = "0x6000D72")]
			[Address(RVA = "0x30D4DE0", Offset = "0x30D4DE0", VA = "0x30D4DE0")]
			public void Read(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x6000D73")]
			[Address(RVA = "0x30DBED0", Offset = "0x30DBED0", VA = "0x30DBED0")]
			public void MovePosition(Vector3 position)
			{
			}

			[Token(Token = "0x6000D74")]
			[Address(RVA = "0x30DC03C", Offset = "0x30DC03C", VA = "0x30DC03C")]
			public void MoveRotation(Quaternion rotation)
			{
			}

			[Token(Token = "0x6000D75")]
			[Address(RVA = "0x30DC2CC", Offset = "0x30DC2CC", VA = "0x30DC2CC")]
			public void Translate(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000D76")]
			[Address(RVA = "0x30D6F00", Offset = "0x30D6F00", VA = "0x30D6F00")]
			public void TranslateRoot(Vector3 newRootPos, Quaternion newRootRot)
			{
			}

			[Token(Token = "0x6000D77")]
			[Address(RVA = "0x30DB5C0", Offset = "0x30DB5C0", VA = "0x30DB5C0")]
			public void RotateTo(VirtualBone bone, Quaternion rotation, float weight = 1f)
			{
			}

			[Token(Token = "0x6000D78")]
			[Address(RVA = "0x30DC320", Offset = "0x30DC320", VA = "0x30DC320")]
			public void Visualize(Color color)
			{
			}

			[Token(Token = "0x6000D79")]
			[Address(RVA = "0x30DC464", Offset = "0x30DC464", VA = "0x30DC464")]
			public void Visualize()
			{
			}

			[Token(Token = "0x6000D7A")]
			[Address(RVA = "0x30DBB18", Offset = "0x30DBB18", VA = "0x30DBB18")]
			protected BodyPart()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200020F")]
		public class Footstep
		{
			[Token(Token = "0x4000D82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float stepSpeed;

			[Token(Token = "0x4000D83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector3 characterSpaceOffset;

			[Token(Token = "0x4000D84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 position;

			[Token(Token = "0x4000D85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Quaternion rotation;

			[Token(Token = "0x4000D86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Quaternion stepToRootRot;

			[Token(Token = "0x4000D87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public bool isSupportLeg;

			[Token(Token = "0x4000D88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DF8BC", Offset = "0x15DF8BC")]
			private float <stepProgress>k__BackingField;

			[Token(Token = "0x4000D89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public Vector3 stepFrom;

			[Token(Token = "0x4000D8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Vector3 stepTo;

			[Token(Token = "0x4000D8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			public Quaternion stepFromRot;

			[Token(Token = "0x4000D8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			public Quaternion stepToRot;

			[Token(Token = "0x4000D8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			private Quaternion footRelativeToRoot;

			[Token(Token = "0x4000D8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			private float supportLegW;

			[Token(Token = "0x4000D8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			private float supportLegWV;

			[Token(Token = "0x17000199")]
			public bool isStepping
			{
				[Token(Token = "0x6000D7B")]
				[Address(RVA = "0x30DC48C", Offset = "0x30DC48C", VA = "0x30DC48C")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x1700019A")]
			public float stepProgress
			{
				[Token(Token = "0x6000D7C")]
				[Address(RVA = "0x30DC4A0", Offset = "0x30DC4A0", VA = "0x30DC4A0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5D74", Offset = "0x15E5D74")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000D7D")]
				[Address(RVA = "0x30DC4A8", Offset = "0x30DC4A8", VA = "0x30DC4A8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5D84", Offset = "0x15E5D84")]
				private set
				{
				}
			}

			[Token(Token = "0x6000D7E")]
			[Address(RVA = "0x30DC4B0", Offset = "0x30DC4B0", VA = "0x30DC4B0")]
			public Footstep(Quaternion rootRotation, Vector3 footPosition, Quaternion footRotation, Vector3 characterSpaceOffset)
			{
			}

			[Token(Token = "0x6000D7F")]
			[Address(RVA = "0x30DC640", Offset = "0x30DC640", VA = "0x30DC640")]
			public void Reset(Quaternion rootRotation, Vector3 footPosition, Quaternion footRotation)
			{
			}

			[Token(Token = "0x6000D80")]
			[Address(RVA = "0x30DC688", Offset = "0x30DC688", VA = "0x30DC688")]
			public void StepTo(Vector3 p, Quaternion rootRotation, float stepThreshold)
			{
			}

			[Token(Token = "0x6000D81")]
			[Address(RVA = "0x30DC848", Offset = "0x30DC848", VA = "0x30DC848")]
			public void UpdateStepping(Vector3 p, Quaternion rootRotation, float speed)
			{
			}

			[Token(Token = "0x6000D82")]
			[Address(RVA = "0x30DCA20", Offset = "0x30DCA20", VA = "0x30DCA20")]
			public void UpdateStanding(Quaternion rootRotation, float minAngle, float speed)
			{
			}

			[Token(Token = "0x6000D83")]
			[Address(RVA = "0x30DCC0C", Offset = "0x30DCC0C", VA = "0x30DCC0C")]
			public void Update(InterpolationMode interpolation, UnityEvent onStep)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000210")]
		public class Leg : BodyPart
		{
			[Token(Token = "0x4000D90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DF8CC", Offset = "0x15DF8CC")]
			public Transform target;

			[Token(Token = "0x4000D91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DF904", Offset = "0x15DF904")]
			public Transform bendGoal;

			[Token(Token = "0x4000D92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DF93C", Offset = "0x15DF93C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DF93C", Offset = "0x15DF93C")]
			public float positionWeight;

			[Token(Token = "0x4000D93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DF990", Offset = "0x15DF990")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DF990", Offset = "0x15DF990")]
			public float rotationWeight;

			[Token(Token = "0x4000D94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DF9E4", Offset = "0x15DF9E4")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DF9E4", Offset = "0x15DF9E4")]
			public float bendGoalWeight;

			[Token(Token = "0x4000D95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DFA38", Offset = "0x15DFA38")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DFA38", Offset = "0x15DFA38")]
			public float swivelOffset;

			[Token(Token = "0x4000D96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DFA94", Offset = "0x15DFA94")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DFA94", Offset = "0x15DFA94")]
			public float bendToTargetWeight;

			[Token(Token = "0x4000D97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DFAE8", Offset = "0x15DFAE8")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DFAE8", Offset = "0x15DFAE8")]
			public float legLengthMlp;

			[Token(Token = "0x4000D98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DFB40", Offset = "0x15DFB40")]
			public AnimationCurve stretchCurve;

			[NonSerialized]
			[Token(Token = "0x4000D99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[HideInInspector]
			public Vector3 IKPosition;

			[NonSerialized]
			[Token(Token = "0x4000D9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			[HideInInspector]
			public Quaternion IKRotation;

			[NonSerialized]
			[Token(Token = "0x4000D9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			[HideInInspector]
			public Vector3 footPositionOffset;

			[NonSerialized]
			[Token(Token = "0x4000D9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[HideInInspector]
			public Vector3 heelPositionOffset;

			[NonSerialized]
			[Token(Token = "0x4000D9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			[HideInInspector]
			public Quaternion footRotationOffset;

			[NonSerialized]
			[Token(Token = "0x4000D9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			[HideInInspector]
			public float currentMag;

			[Token(Token = "0x4000D9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			[HideInInspector]
			public bool useAnimatedBendNormal;

			[Token(Token = "0x4000DA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DFBE8", Offset = "0x15DFBE8")]
			private Vector3 <position>k__BackingField;

			[Token(Token = "0x4000DA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DFBF8", Offset = "0x15DFBF8")]
			private Quaternion <rotation>k__BackingField;

			[Token(Token = "0x4000DA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DFC08", Offset = "0x15DFC08")]
			private bool <hasToes>k__BackingField;

			[Token(Token = "0x4000DA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DFC18", Offset = "0x15DFC18")]
			private Vector3 <thighRelativeToPelvis>k__BackingField;

			[Token(Token = "0x4000DA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
			private Vector3 footPosition;

			[Token(Token = "0x4000DA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
			private Quaternion footRotation;

			[Token(Token = "0x4000DA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
			private Vector3 bendNormal;

			[Token(Token = "0x4000DA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
			private Quaternion calfRelToThigh;

			[Token(Token = "0x4000DA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
			private Quaternion thighRelToFoot;

			[Token(Token = "0x4000DA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
			private Vector3 bendNormalRelToPelvis;

			[Token(Token = "0x4000DAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
			private Vector3 bendNormalRelToTarget;

			[Token(Token = "0x1700019B")]
			public Vector3 position
			{
				[Token(Token = "0x6000D84")]
				[Address(RVA = "0x30DCE28", Offset = "0x30DCE28", VA = "0x30DCE28")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5D94", Offset = "0x15E5D94")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000D85")]
				[Address(RVA = "0x30DCE34", Offset = "0x30DCE34", VA = "0x30DCE34")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5DA4", Offset = "0x15E5DA4")]
				private set
				{
				}
			}

			[Token(Token = "0x1700019C")]
			public Quaternion rotation
			{
				[Token(Token = "0x6000D86")]
				[Address(RVA = "0x30DCE40", Offset = "0x30DCE40", VA = "0x30DCE40")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5DB4", Offset = "0x15E5DB4")]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x6000D87")]
				[Address(RVA = "0x30DCE4C", Offset = "0x30DCE4C", VA = "0x30DCE4C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5DC4", Offset = "0x15E5DC4")]
				private set
				{
				}
			}

			[Token(Token = "0x1700019D")]
			public bool hasToes
			{
				[Token(Token = "0x6000D88")]
				[Address(RVA = "0x30DCE58", Offset = "0x30DCE58", VA = "0x30DCE58")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5DD4", Offset = "0x15E5DD4")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6000D89")]
				[Address(RVA = "0x30DCE60", Offset = "0x30DCE60", VA = "0x30DCE60")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5DE4", Offset = "0x15E5DE4")]
				private set
				{
				}
			}

			[Token(Token = "0x1700019E")]
			public VirtualBone thigh
			{
				[Token(Token = "0x6000D8A")]
				[Address(RVA = "0x30DCE6C", Offset = "0x30DCE6C", VA = "0x30DCE6C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700019F")]
			private VirtualBone calf
			{
				[Token(Token = "0x6000D8B")]
				[Address(RVA = "0x30DCEA0", Offset = "0x30DCEA0", VA = "0x30DCEA0")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001A0")]
			private VirtualBone foot
			{
				[Token(Token = "0x6000D8C")]
				[Address(RVA = "0x30DCED8", Offset = "0x30DCED8", VA = "0x30DCED8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001A1")]
			private VirtualBone toes
			{
				[Token(Token = "0x6000D8D")]
				[Address(RVA = "0x30DCF10", Offset = "0x30DCF10", VA = "0x30DCF10")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001A2")]
			public VirtualBone lastBone
			{
				[Token(Token = "0x6000D8E")]
				[Address(RVA = "0x30D6D54", Offset = "0x30D6D54", VA = "0x30D6D54")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001A3")]
			public Vector3 thighRelativeToPelvis
			{
				[Token(Token = "0x6000D8F")]
				[Address(RVA = "0x30DCF48", Offset = "0x30DCF48", VA = "0x30DCF48")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5DF4", Offset = "0x15E5DF4")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000D90")]
				[Address(RVA = "0x30DCF54", Offset = "0x30DCF54", VA = "0x30DCF54")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5E04", Offset = "0x15E5E04")]
				private set
				{
				}
			}

			[Token(Token = "0x6000D91")]
			[Address(RVA = "0x30DCF60", Offset = "0x30DCF60", VA = "0x30DCF60", Slot = "4")]
			protected override void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x6000D92")]
			[Address(RVA = "0x30DD568", Offset = "0x30DD568", VA = "0x30DD568", Slot = "5")]
			public override void PreSolve()
			{
			}

			[Token(Token = "0x6000D93")]
			[Address(RVA = "0x30DDE50", Offset = "0x30DDE50", VA = "0x30DDE50", Slot = "7")]
			public override void ApplyOffsets()
			{
			}

			[Token(Token = "0x6000D94")]
			[Address(RVA = "0x30DDD4C", Offset = "0x30DDD4C", VA = "0x30DDD4C")]
			private void ApplyPositionOffset(Vector3 offset, float weight)
			{
			}

			[Token(Token = "0x6000D95")]
			[Address(RVA = "0x30DDB14", Offset = "0x30DDB14", VA = "0x30DDB14")]
			private void ApplyRotationOffset(Quaternion offset, float weight)
			{
			}

			[Token(Token = "0x6000D96")]
			[Address(RVA = "0x30D70EC", Offset = "0x30D70EC", VA = "0x30D70EC")]
			public void Solve(bool stretch)
			{
			}

			[Token(Token = "0x6000D97")]
			[Address(RVA = "0x30DE934", Offset = "0x30DE934", VA = "0x30DE934")]
			private void FixTwistRotations()
			{
			}

			[Token(Token = "0x6000D98")]
			[Address(RVA = "0x30DE408", Offset = "0x30DE408", VA = "0x30DE408")]
			private void Stretching()
			{
			}

			[Token(Token = "0x6000D99")]
			[Address(RVA = "0x30DED9C", Offset = "0x30DED9C", VA = "0x30DED9C", Slot = "6")]
			public override void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x6000D9A")]
			[Address(RVA = "0x30DEFB8", Offset = "0x30DEFB8", VA = "0x30DEFB8", Slot = "8")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x6000D9B")]
			[Address(RVA = "0x30D93F0", Offset = "0x30D93F0", VA = "0x30D93F0")]
			public Leg()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000211")]
		public class Locomotion
		{
			[Token(Token = "0x4000DAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DFC28", Offset = "0x15DFC28")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DFC28", Offset = "0x15DFC28")]
			public float weight;

			[Token(Token = "0x4000DAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DFC7C", Offset = "0x15DFC7C")]
			public float footDistance;

			[Token(Token = "0x4000DAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DFCB4", Offset = "0x15DFCB4")]
			public float stepThreshold;

			[Token(Token = "0x4000DAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DFCEC", Offset = "0x15DFCEC")]
			public float angleThreshold;

			[Token(Token = "0x4000DAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DFD24", Offset = "0x15DFD24")]
			public float comAngleMlp;

			[Token(Token = "0x4000DB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DFD5C", Offset = "0x15DFD5C")]
			public float maxVelocity;

			[Token(Token = "0x4000DB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DFD94", Offset = "0x15DFD94")]
			public float velocityFactor;

			[Token(Token = "0x4000DB2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DFDCC", Offset = "0x15DFDCC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DFDCC", Offset = "0x15DFDCC")]
			public float maxLegStretch;

			[Token(Token = "0x4000DB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DFE24", Offset = "0x15DFE24")]
			public float rootSpeed;

			[Token(Token = "0x4000DB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DFE5C", Offset = "0x15DFE5C")]
			public float stepSpeed;

			[Token(Token = "0x4000DB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DFE94", Offset = "0x15DFE94")]
			public AnimationCurve stepHeight;

			[Token(Token = "0x4000DB6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DFECC", Offset = "0x15DFECC")]
			public AnimationCurve heelHeight;

			[Token(Token = "0x4000DB7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DFF04", Offset = "0x15DFF04")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DFF04", Offset = "0x15DFF04")]
			public float relaxLegTwistMinAngle;

			[Token(Token = "0x4000DB8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DFF5C", Offset = "0x15DFF5C")]
			public float relaxLegTwistSpeed;

			[Token(Token = "0x4000DB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DFF94", Offset = "0x15DFF94")]
			public InterpolationMode stepInterpolation;

			[Token(Token = "0x4000DBA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DFFCC", Offset = "0x15DFFCC")]
			public Vector3 offset;

			[Token(Token = "0x4000DBB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[HideInInspector]
			public bool blockingEnabled;

			[Token(Token = "0x4000DBC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[HideInInspector]
			public LayerMask blockingLayers;

			[Token(Token = "0x4000DBD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[HideInInspector]
			public float raycastRadius;

			[Token(Token = "0x4000DBE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			[HideInInspector]
			public float raycastHeight;

			[Token(Token = "0x4000DBF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E0044", Offset = "0x15E0044")]
			public UnityEvent onLeftFootstep;

			[Token(Token = "0x4000DC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E007C", Offset = "0x15E007C")]
			public UnityEvent onRightFootstep;

			[Token(Token = "0x4000DC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E00B4", Offset = "0x15E00B4")]
			private Vector3 <centerOfMass>k__BackingField;

			[Token(Token = "0x4000DC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			private Footstep[] footsteps;

			[Token(Token = "0x4000DC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			private Vector3 lastComPosition;

			[Token(Token = "0x4000DC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
			private Vector3 comVelocity;

			[Token(Token = "0x4000DC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			private int leftFootIndex;

			[Token(Token = "0x4000DC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
			private int rightFootIndex;

			[Token(Token = "0x170001A4")]
			public Vector3 centerOfMass
			{
				[Token(Token = "0x6000D9C")]
				[Address(RVA = "0x30DF068", Offset = "0x30DF068", VA = "0x30DF068")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5E14", Offset = "0x15E5E14")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000D9D")]
				[Address(RVA = "0x30DF074", Offset = "0x30DF074", VA = "0x30DF074")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5E24", Offset = "0x15E5E24")]
				private set
				{
				}
			}

			[Token(Token = "0x170001A5")]
			public Vector3 leftFootstepPosition
			{
				[Token(Token = "0x6000DA3")]
				[Address(RVA = "0x30DF4B4", Offset = "0x30DF4B4", VA = "0x30DF4B4")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170001A6")]
			public Vector3 rightFootstepPosition
			{
				[Token(Token = "0x6000DA4")]
				[Address(RVA = "0x30DF4F4", Offset = "0x30DF4F4", VA = "0x30DF4F4")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170001A7")]
			public Quaternion leftFootstepRotation
			{
				[Token(Token = "0x6000DA5")]
				[Address(RVA = "0x30DF538", Offset = "0x30DF538", VA = "0x30DF538")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x170001A8")]
			public Quaternion rightFootstepRotation
			{
				[Token(Token = "0x6000DA6")]
				[Address(RVA = "0x30DF578", Offset = "0x30DF578", VA = "0x30DF578")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x6000D9E")]
			[Address(RVA = "0x30D4EB0", Offset = "0x30D4EB0", VA = "0x30D4EB0")]
			public void Initiate(Vector3[] positions, Quaternion[] rotations, bool hasToes)
			{
			}

			[Token(Token = "0x6000D9F")]
			[Address(RVA = "0x30D25B4", Offset = "0x30D25B4", VA = "0x30D25B4")]
			public void Reset(Vector3[] positions, Quaternion[] rotations)
			{
			}

			[Token(Token = "0x6000DA0")]
			[Address(RVA = "0x30D1978", Offset = "0x30D1978", VA = "0x30D1978")]
			public void AddDeltaRotation(Quaternion delta, Vector3 pivot)
			{
			}

			[Token(Token = "0x6000DA1")]
			[Address(RVA = "0x30D17C8", Offset = "0x30D17C8", VA = "0x30D17C8")]
			public void AddDeltaPosition(Vector3 delta)
			{
			}

			[Token(Token = "0x6000DA2")]
			[Address(RVA = "0x30D57EC", Offset = "0x30D57EC", VA = "0x30D57EC")]
			public void Solve(VirtualBone rootBone, Spine spine, Leg leftLeg, Leg rightLeg, Arm leftArm, Arm rightArm, int supportLegIndex, out Vector3 leftFootPosition, out Vector3 rightFootPosition, out Quaternion leftFootRotation, out Quaternion rightFootRotation, out float leftFootOffset, out float rightFootOffset, out float leftHeelOffset, out float rightHeelOffset)
			{
			}

			[Token(Token = "0x6000DA7")]
			[Address(RVA = "0x30DF0C0", Offset = "0x30DF0C0", VA = "0x30DF0C0")]
			private bool StepBlocked(Vector3 fromPosition, Vector3 toPosition, Vector3 rootPosition)
			{
				return default(bool);
			}

			[Token(Token = "0x6000DA8")]
			[Address(RVA = "0x30DF264", Offset = "0x30DF264", VA = "0x30DF264")]
			private bool CanStep()
			{
				return default(bool);
			}

			[Token(Token = "0x6000DA9")]
			[Address(RVA = "0x30DF2E8", Offset = "0x30DF2E8", VA = "0x30DF2E8")]
			private static bool GetLineSphereCollision(Vector3 lineStart, Vector3 lineEnd, Vector3 sphereCenter, float sphereRadius)
			{
				return default(bool);
			}

			[Token(Token = "0x6000DAA")]
			[Address(RVA = "0x30D94F0", Offset = "0x30D94F0", VA = "0x30D94F0")]
			public Locomotion()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000212")]
		public class Spine : BodyPart
		{
			[Token(Token = "0x4000DC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E00C4", Offset = "0x15E00C4")]
			public Transform headTarget;

			[Token(Token = "0x4000DC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E00FC", Offset = "0x15E00FC")]
			public Transform pelvisTarget;

			[Token(Token = "0x4000DC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E0134", Offset = "0x15E0134")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15E0134", Offset = "0x15E0134")]
			public float positionWeight;

			[Token(Token = "0x4000DCA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E0188", Offset = "0x15E0188")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15E0188", Offset = "0x15E0188")]
			public float rotationWeight;

			[Token(Token = "0x4000DCB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E01DC", Offset = "0x15E01DC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15E01DC", Offset = "0x15E01DC")]
			public float pelvisPositionWeight;

			[Token(Token = "0x4000DCC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E0230", Offset = "0x15E0230")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15E0230", Offset = "0x15E0230")]
			public float pelvisRotationWeight;

			[Token(Token = "0x4000DCD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E0284", Offset = "0x15E0284")]
			public Transform chestGoal;

			[Token(Token = "0x4000DCE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E02BC", Offset = "0x15E02BC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15E02BC", Offset = "0x15E02BC")]
			public float chestGoalWeight;

			[Token(Token = "0x4000DCF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E0310", Offset = "0x15E0310")]
			public float minHeadHeight;

			[Token(Token = "0x4000DD0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E0348", Offset = "0x15E0348")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15E0348", Offset = "0x15E0348")]
			public float bodyPosStiffness;

			[Token(Token = "0x4000DD1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E039C", Offset = "0x15E039C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15E039C", Offset = "0x15E039C")]
			public float bodyRotStiffness;

			[Token(Token = "0x4000DD2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E03F0", Offset = "0x15E03F0")]
			[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x15E03F0", Offset = "0x15E03F0")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15E03F0", Offset = "0x15E03F0")]
			public float neckStiffness;

			[Token(Token = "0x4000DD3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E0468", Offset = "0x15E0468")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15E0468", Offset = "0x15E0468")]
			public float rotateChestByHands;

			[Token(Token = "0x4000DD4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E04BC", Offset = "0x15E04BC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15E04BC", Offset = "0x15E04BC")]
			public float chestClampWeight;

			[Token(Token = "0x4000DD5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E0510", Offset = "0x15E0510")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15E0510", Offset = "0x15E0510")]
			public float headClampWeight;

			[Token(Token = "0x4000DD6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E0564", Offset = "0x15E0564")]
			public float moveBodyBackWhenCrouching;

			[Token(Token = "0x4000DD7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E059C", Offset = "0x15E059C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15E059C", Offset = "0x15E059C")]
			public float maintainPelvisPosition;

			[Token(Token = "0x4000DD8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E05F0", Offset = "0x15E05F0")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15E05F0", Offset = "0x15E05F0")]
			public float maxRootAngle;

			[Token(Token = "0x4000DD9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E0648", Offset = "0x15E0648")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15E0648", Offset = "0x15E0648")]
			public float rootHeadingOffset;

			[NonSerialized]
			[Token(Token = "0x4000DDA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[HideInInspector]
			public Vector3 IKPositionHead;

			[NonSerialized]
			[Token(Token = "0x4000DDB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			[HideInInspector]
			public Quaternion IKRotationHead;

			[NonSerialized]
			[Token(Token = "0x4000DDC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			[HideInInspector]
			public Vector3 IKPositionPelvis;

			[NonSerialized]
			[Token(Token = "0x4000DDD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			[HideInInspector]
			public Quaternion IKRotationPelvis;

			[NonSerialized]
			[Token(Token = "0x4000DDE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			[HideInInspector]
			public Vector3 goalPositionChest;

			[NonSerialized]
			[Token(Token = "0x4000DDF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
			[HideInInspector]
			public Vector3 pelvisPositionOffset;

			[NonSerialized]
			[Token(Token = "0x4000DE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
			[HideInInspector]
			public Vector3 chestPositionOffset;

			[NonSerialized]
			[Token(Token = "0x4000DE1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
			[HideInInspector]
			public Vector3 headPositionOffset;

			[NonSerialized]
			[Token(Token = "0x4000DE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
			[HideInInspector]
			public Quaternion pelvisRotationOffset;

			[NonSerialized]
			[Token(Token = "0x4000DE3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
			[HideInInspector]
			public Quaternion chestRotationOffset;

			[NonSerialized]
			[Token(Token = "0x4000DE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
			[HideInInspector]
			public Quaternion headRotationOffset;

			[NonSerialized]
			[Token(Token = "0x4000DE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
			[HideInInspector]
			public Vector3 faceDirection;

			[NonSerialized]
			[Token(Token = "0x4000DE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
			[HideInInspector]
			public Vector3 locomotionHeadPositionOffset;

			[NonSerialized]
			[Token(Token = "0x4000DE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
			[HideInInspector]
			public Vector3 headPosition;

			[Token(Token = "0x4000DE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E0784", Offset = "0x15E0784")]
			private Quaternion <anchorRotation>k__BackingField;

			[Token(Token = "0x4000DE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E0794", Offset = "0x15E0794")]
			private Quaternion <anchorRelativeToHead>k__BackingField;

			[Token(Token = "0x4000DEA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
			private Quaternion headRotation;

			[Token(Token = "0x4000DEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
			private Quaternion pelvisRotation;

			[Token(Token = "0x4000DEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
			private Quaternion anchorRelativeToPelvis;

			[Token(Token = "0x4000DED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
			private Quaternion pelvisRelativeRotation;

			[Token(Token = "0x4000DEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
			private Quaternion chestRelativeRotation;

			[Token(Token = "0x4000DEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
			private Vector3 headDeltaPosition;

			[Token(Token = "0x4000DF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
			private Quaternion pelvisDeltaRotation;

			[Token(Token = "0x4000DF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
			private Quaternion chestTargetRotation;

			[Token(Token = "0x4000DF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
			private int pelvisIndex;

			[Token(Token = "0x4000DF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
			private int spineIndex;

			[Token(Token = "0x4000DF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
			private int chestIndex;

			[Token(Token = "0x4000DF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
			private int neckIndex;

			[Token(Token = "0x4000DF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
			private int headIndex;

			[Token(Token = "0x4000DF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
			private float length;

			[Token(Token = "0x4000DF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
			private bool hasChest;

			[Token(Token = "0x4000DF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x211")]
			private bool hasNeck;

			[Token(Token = "0x4000DFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x212")]
			private bool hasLegs;

			[Token(Token = "0x4000DFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
			private float headHeight;

			[Token(Token = "0x4000DFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
			private float sizeMlp;

			[Token(Token = "0x4000DFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
			private Vector3 chestForward;

			[Token(Token = "0x170001A9")]
			public VirtualBone pelvis
			{
				[Token(Token = "0x6000DAB")]
				[Address(RVA = "0x30D2828", Offset = "0x30D2828", VA = "0x30D2828")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001AA")]
			public VirtualBone firstSpineBone
			{
				[Token(Token = "0x6000DAC")]
				[Address(RVA = "0x30DF5BC", Offset = "0x30DF5BC", VA = "0x30DF5BC")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001AB")]
			public VirtualBone chest
			{
				[Token(Token = "0x6000DAD")]
				[Address(RVA = "0x30D730C", Offset = "0x30D730C", VA = "0x30D730C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001AC")]
			private VirtualBone neck
			{
				[Token(Token = "0x6000DAE")]
				[Address(RVA = "0x30DF5FC", Offset = "0x30DF5FC", VA = "0x30DF5FC")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001AD")]
			public VirtualBone head
			{
				[Token(Token = "0x6000DAF")]
				[Address(RVA = "0x30DF080", Offset = "0x30DF080", VA = "0x30DF080")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001AE")]
			public Quaternion anchorRotation
			{
				[Token(Token = "0x6000DB0")]
				[Address(RVA = "0x30DF63C", Offset = "0x30DF63C", VA = "0x30DF63C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5E34", Offset = "0x15E5E34")]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x6000DB1")]
				[Address(RVA = "0x30DF650", Offset = "0x30DF650", VA = "0x30DF650")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5E44", Offset = "0x15E5E44")]
				private set
				{
				}
			}

			[Token(Token = "0x170001AF")]
			public Quaternion anchorRelativeToHead
			{
				[Token(Token = "0x6000DB2")]
				[Address(RVA = "0x30DF664", Offset = "0x30DF664", VA = "0x30DF664")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5E54", Offset = "0x15E5E54")]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x6000DB3")]
				[Address(RVA = "0x30DF678", Offset = "0x30DF678", VA = "0x30DF678")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5E64", Offset = "0x15E5E64")]
				private set
				{
				}
			}

			[Token(Token = "0x6000DB4")]
			[Address(RVA = "0x30DF68C", Offset = "0x30DF68C", VA = "0x30DF68C", Slot = "4")]
			protected override void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x6000DB5")]
			[Address(RVA = "0x30E0198", Offset = "0x30E0198", VA = "0x30E0198", Slot = "5")]
			public override void PreSolve()
			{
			}

			[Token(Token = "0x6000DB6")]
			[Address(RVA = "0x30E03A8", Offset = "0x30E03A8", VA = "0x30E03A8", Slot = "7")]
			public override void ApplyOffsets()
			{
			}

			[Token(Token = "0x6000DB7")]
			[Address(RVA = "0x30E0A20", Offset = "0x30E0A20", VA = "0x30E0A20")]
			private void CalculateChestTargetRotation(VirtualBone rootBone, Arm[] arms)
			{
			}

			[Token(Token = "0x6000DB8")]
			[Address(RVA = "0x30D51C8", Offset = "0x30D51C8", VA = "0x30D51C8")]
			public void Solve(VirtualBone rootBone, Leg[] legs, Arm[] arms)
			{
			}

			[Token(Token = "0x6000DB9")]
			[Address(RVA = "0x30E13FC", Offset = "0x30E13FC", VA = "0x30E13FC")]
			private void FABRIKPass(Vector3 animatedPelvisPos, Vector3 rootUp, float weight)
			{
			}

			[Token(Token = "0x6000DBA")]
			[Address(RVA = "0x30E1ABC", Offset = "0x30E1ABC", VA = "0x30E1ABC")]
			private void SolvePelvis()
			{
			}

			[Token(Token = "0x6000DBB")]
			[Address(RVA = "0x30E22A4", Offset = "0x30E22A4", VA = "0x30E22A4", Slot = "6")]
			public override void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x6000DBC")]
			[Address(RVA = "0x30E2480", Offset = "0x30E2480", VA = "0x30E2480", Slot = "8")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x6000DBD")]
			[Address(RVA = "0x30E0C50", Offset = "0x30E0C50", VA = "0x30E0C50")]
			private void AdjustChestByHands(ref Quaternion chestTargetRotation, Arm[] arms)
			{
			}

			[Token(Token = "0x6000DBE")]
			[Address(RVA = "0x30D6D94", Offset = "0x30D6D94", VA = "0x30D6D94")]
			public void InverseTranslateToHead(Leg[] legs, bool limited, bool useCurrentLegMag, Vector3 offset, float w)
			{
			}

			[Token(Token = "0x6000DBF")]
			[Address(RVA = "0x30E0FE0", Offset = "0x30E0FE0", VA = "0x30E0FE0")]
			private void TranslatePelvis(Leg[] legs, Vector3 deltaPosition, Quaternion deltaRotation)
			{
			}

			[Token(Token = "0x6000DC0")]
			[Address(RVA = "0x30E257C", Offset = "0x30E257C", VA = "0x30E257C")]
			private Vector3 LimitPelvisPosition(Leg[] legs, Vector3 pelvisPosition, bool useCurrentLegMag, int it = 2)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000DC1")]
			[Address(RVA = "0x30E1870", Offset = "0x30E1870", VA = "0x30E1870")]
			private void Bend(VirtualBone[] bones, int firstIndex, int lastIndex, Quaternion targetRotation, float clampWeight, bool uniformWeight, float w)
			{
			}

			[Token(Token = "0x6000DC2")]
			[Address(RVA = "0x30E15BC", Offset = "0x30E15BC", VA = "0x30E15BC")]
			private void Bend(VirtualBone[] bones, int firstIndex, int lastIndex, Quaternion targetRotation, Quaternion rotationOffset, float clampWeight, bool uniformWeight, float w)
			{
			}

			[Token(Token = "0x6000DC3")]
			[Address(RVA = "0x30D9108", Offset = "0x30D9108", VA = "0x30D9108")]
			public Spine()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000213")]
		public enum PositionOffset
		{
			[Token(Token = "0x4000DFF")]
			Pelvis,
			[Token(Token = "0x4000E00")]
			Chest,
			[Token(Token = "0x4000E01")]
			Head,
			[Token(Token = "0x4000E02")]
			LeftHand,
			[Token(Token = "0x4000E03")]
			RightHand,
			[Token(Token = "0x4000E04")]
			LeftFoot,
			[Token(Token = "0x4000E05")]
			RightFoot,
			[Token(Token = "0x4000E06")]
			LeftHeel,
			[Token(Token = "0x4000E07")]
			RightHeel
		}

		[Serializable]
		[Token(Token = "0x2000214")]
		public enum RotationOffset
		{
			[Token(Token = "0x4000E09")]
			Pelvis,
			[Token(Token = "0x4000E0A")]
			Chest,
			[Token(Token = "0x4000E0B")]
			Head
		}

		[Serializable]
		[Token(Token = "0x2000215")]
		public class VirtualBone
		{
			[Token(Token = "0x4000E0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 readPosition;

			[Token(Token = "0x4000E0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Quaternion readRotation;

			[Token(Token = "0x4000E0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Vector3 solverPosition;

			[Token(Token = "0x4000E0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Quaternion solverRotation;

			[Token(Token = "0x4000E10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public float length;

			[Token(Token = "0x4000E11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public float sqrMag;

			[Token(Token = "0x4000E12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Vector3 axis;

			[Token(Token = "0x6000DC4")]
			[Address(RVA = "0x30D4D44", Offset = "0x30D4D44", VA = "0x30D4D44")]
			public VirtualBone(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000DC5")]
			[Address(RVA = "0x30D4DC0", Offset = "0x30D4DC0", VA = "0x30D4DC0")]
			public void Read(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000DC6")]
			[Address(RVA = "0x30E28A4", Offset = "0x30E28A4", VA = "0x30E28A4")]
			public static void SwingRotation(VirtualBone[] bones, int index, Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x6000DC7")]
			[Address(RVA = "0x30DBBE4", Offset = "0x30DBBE4", VA = "0x30DBBE4")]
			public static float PreSolve(ref VirtualBone[] bones)
			{
				return default(float);
			}

			[Token(Token = "0x6000DC8")]
			[Address(RVA = "0x30DC0E4", Offset = "0x30DC0E4", VA = "0x30DC0E4")]
			public static void RotateAroundPoint(VirtualBone[] bones, int index, Vector3 point, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000DC9")]
			[Address(RVA = "0x30E2B34", Offset = "0x30E2B34", VA = "0x30E2B34")]
			public static void RotateBy(VirtualBone[] bones, int index, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000DCA")]
			[Address(RVA = "0x30DA828", Offset = "0x30DA828", VA = "0x30DA828")]
			public static void RotateBy(VirtualBone[] bones, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000DCB")]
			[Address(RVA = "0x30E2D6C", Offset = "0x30E2D6C", VA = "0x30E2D6C")]
			public static void RotateTo(VirtualBone[] bones, int index, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000DCC")]
			[Address(RVA = "0x30DB014", Offset = "0x30DB014", VA = "0x30DB014")]
			public static void SolveTrigonometric(VirtualBone[] bones, int first, int second, int third, Vector3 targetPosition, Vector3 bendNormal, float weight)
			{
			}

			[Token(Token = "0x6000DCD")]
			[Address(RVA = "0x30E2E24", Offset = "0x30E2E24", VA = "0x30E2E24")]
			private static Vector3 GetDirectionToBendPoint(Vector3 direction, float directionMag, Vector3 bendDirection, float sqrMag1, float sqrMag2)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000DCE")]
			[Address(RVA = "0x30E1E44", Offset = "0x30E1E44", VA = "0x30E1E44")]
			public static void SolveFABRIK(VirtualBone[] bones, Vector3 startPosition, Vector3 targetPosition, float weight, float minNormalizedTargetDistance, int iterations, float length, Vector3 startOffset)
			{
			}

			[Token(Token = "0x6000DCF")]
			[Address(RVA = "0x30E303C", Offset = "0x30E303C", VA = "0x30E303C")]
			private static Vector3 SolveFABRIKJoint(Vector3 pos1, Vector3 pos2, float length)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000DD0")]
			[Address(RVA = "0x30E3144", Offset = "0x30E3144", VA = "0x30E3144")]
			public static void SolveCCD(VirtualBone[] bones, Vector3 targetPosition, float weight, int iterations)
			{
			}
		}

		[Token(Token = "0x4000472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform[] solverTransforms;

		[Token(Token = "0x4000473")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool hasChest;

		[Token(Token = "0x4000474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool hasNeck;

		[Token(Token = "0x4000475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		private bool hasShoulders;

		[Token(Token = "0x4000476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		private bool hasToes;

		[Token(Token = "0x4000477")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool hasLegs;

		[Token(Token = "0x4000478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3[] readPositions;

		[Token(Token = "0x4000479")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Quaternion[] readRotations;

		[Token(Token = "0x400047A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3[] solvedPositions;

		[Token(Token = "0x400047B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Quaternion[] solvedRotations;

		[Token(Token = "0x400047C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Quaternion[] defaultLocalRotations;

		[Token(Token = "0x400047D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3[] defaultLocalPositions;

		[Token(Token = "0x400047E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 rootV;

		[Token(Token = "0x400047F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 rootVelocity;

		[Token(Token = "0x4000480")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 bodyOffset;

		[Token(Token = "0x4000481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private int supportLegIndex;

		[Token(Token = "0x4000482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int lastLOD;

		[Token(Token = "0x4000483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D8370", Offset = "0x15D8370")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D8370", Offset = "0x15D8370")]
		public int LOD;

		[Token(Token = "0x4000484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D83C4", Offset = "0x15D83C4")]
		public bool plantFeet;

		[Token(Token = "0x4000485")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D83FC", Offset = "0x15D83FC")]
		private VirtualBone <rootBone>k__BackingField;

		[Token(Token = "0x4000486")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D840C", Offset = "0x15D840C")]
		public Spine spine;

		[Token(Token = "0x4000487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D8444", Offset = "0x15D8444")]
		public Arm leftArm;

		[Token(Token = "0x4000488")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D847C", Offset = "0x15D847C")]
		public Arm rightArm;

		[Token(Token = "0x4000489")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D84B4", Offset = "0x15D84B4")]
		public Leg leftLeg;

		[Token(Token = "0x400048A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D84EC", Offset = "0x15D84EC")]
		public Leg rightLeg;

		[Token(Token = "0x400048B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D8524", Offset = "0x15D8524")]
		public Locomotion locomotion;

		[Token(Token = "0x400048C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Leg[] legs;

		[Token(Token = "0x400048D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Arm[] arms;

		[Token(Token = "0x400048E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Vector3 headPosition;

		[Token(Token = "0x400048F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private Vector3 headDeltaPosition;

		[Token(Token = "0x4000490")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Vector3 raycastOriginPelvis;

		[Token(Token = "0x4000491")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private Vector3 lastOffset;

		[Token(Token = "0x4000492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Vector3 debugPos1;

		[Token(Token = "0x4000493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		private Vector3 debugPos2;

		[Token(Token = "0x4000494")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private Vector3 debugPos3;

		[Token(Token = "0x4000495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private Vector3 debugPos4;

		[Token(Token = "0x170000C0")]
		[HideInInspector]
		public VirtualBone rootBone
		{
			[Token(Token = "0x6000561")]
			[Address(RVA = "0x30D8E9C", Offset = "0x30D8E9C", VA = "0x30D8E9C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E3D58", Offset = "0x15E3D58")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000562")]
			[Address(RVA = "0x30D8EA4", Offset = "0x30D8EA4", VA = "0x30D8EA4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E3D68", Offset = "0x15E3D68")]
			private set
			{
			}
		}

		[Token(Token = "0x6000548")]
		[Address(RVA = "0x30D02B0", Offset = "0x30D02B0", VA = "0x30D02B0")]
		public void SetToReferences(VRIK.References references)
		{
		}

		[Token(Token = "0x6000549")]
		[Address(RVA = "0x30D0744", Offset = "0x30D0744", VA = "0x30D0744")]
		public void GuessHandOrientations(VRIK.References references, bool onlyIfZero)
		{
		}

		[Token(Token = "0x600054A")]
		[Address(RVA = "0x30D05CC", Offset = "0x30D05CC", VA = "0x30D05CC")]
		public void DefaultAnimationCurves()
		{
		}

		[Token(Token = "0x600054B")]
		[Address(RVA = "0x30D1130", Offset = "0x30D1130", VA = "0x30D1130")]
		public void AddPositionOffset(PositionOffset positionOffset, Vector3 value)
		{
		}

		[Token(Token = "0x600054C")]
		[Address(RVA = "0x30D140C", Offset = "0x30D140C", VA = "0x30D140C")]
		public void AddRotationOffset(RotationOffset rotationOffset, Vector3 value)
		{
		}

		[Token(Token = "0x600054D")]
		[Address(RVA = "0x30D14B0", Offset = "0x30D14B0", VA = "0x30D14B0")]
		public void AddRotationOffset(RotationOffset rotationOffset, Quaternion value)
		{
		}

		[Token(Token = "0x600054E")]
		[Address(RVA = "0x30D1644", Offset = "0x30D1644", VA = "0x30D1644")]
		public void AddPlatformMotion(Vector3 deltaPosition, Quaternion deltaRotation, Vector3 platformPivot)
		{
		}

		[Token(Token = "0x600054F")]
		[Address(RVA = "0x30D1D50", Offset = "0x30D1D50", VA = "0x30D1D50")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000550")]
		[Address(RVA = "0x30D2868", Offset = "0x30D2868", VA = "0x30D2868", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000551")]
		[Address(RVA = "0x30D29DC", Offset = "0x30D29DC", VA = "0x30D29DC", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6000552")]
		[Address(RVA = "0x30D2BE4", Offset = "0x30D2BE4", VA = "0x30D2BE4", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6000553")]
		[Address(RVA = "0x30D2C58", Offset = "0x30D2C58", VA = "0x30D2C58", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6000554")]
		[Address(RVA = "0x30D2CCC", Offset = "0x30D2CCC", VA = "0x30D2CCC", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000555")]
		[Address(RVA = "0x30D2EEC", Offset = "0x30D2EEC", VA = "0x30D2EEC")]
		private Vector3 GetNormal(Transform[] transforms)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000556")]
		[Address(RVA = "0x30D09E4", Offset = "0x30D09E4", VA = "0x30D09E4")]
		private Vector3 GuessWristToPalmAxis(Transform hand, Transform forearm)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000557")]
		[Address(RVA = "0x30D0BBC", Offset = "0x30D0BBC", VA = "0x30D0BBC")]
		private Vector3 GuessPalmToThumbAxis(Transform hand, Transform forearm)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000558")]
		[Address(RVA = "0x30D100C", Offset = "0x30D100C", VA = "0x30D100C")]
		private static Keyframe[] GetSineKeyframes(float mag)
		{
			return null;
		}

		[Token(Token = "0x6000559")]
		[Address(RVA = "0x30D1EC0", Offset = "0x30D1EC0", VA = "0x30D1EC0")]
		private void UpdateSolverTransforms()
		{
		}

		[Token(Token = "0x600055A")]
		[Address(RVA = "0x30D31CC", Offset = "0x30D31CC", VA = "0x30D31CC", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x600055B")]
		[Address(RVA = "0x30D3214", Offset = "0x30D3214", VA = "0x30D3214", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x600055C")]
		[Address(RVA = "0x30D48CC", Offset = "0x30D48CC", VA = "0x30D48CC")]
		private void WriteTransforms()
		{
		}

		[Token(Token = "0x600055D")]
		[Address(RVA = "0x30D2028", Offset = "0x30D2028", VA = "0x30D2028")]
		private void Read(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs)
		{
		}

		[Token(Token = "0x600055E")]
		[Address(RVA = "0x30D36D4", Offset = "0x30D36D4", VA = "0x30D36D4")]
		private void Solve()
		{
		}

		[Token(Token = "0x600055F")]
		[Address(RVA = "0x30D4CB8", Offset = "0x30D4CB8", VA = "0x30D4CB8")]
		private Vector3 GetPosition(int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000560")]
		[Address(RVA = "0x30D4D00", Offset = "0x30D4D00", VA = "0x30D4D00")]
		private Quaternion GetRotation(int index)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000563")]
		[Address(RVA = "0x30D477C", Offset = "0x30D477C", VA = "0x30D477C")]
		private void Write()
		{
		}

		[Token(Token = "0x6000564")]
		[Address(RVA = "0x30D88B4", Offset = "0x30D88B4", VA = "0x30D88B4")]
		private Vector3 GetPelvisOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000565")]
		[Address(RVA = "0x30D8EAC", Offset = "0x30D8EAC", VA = "0x30D8EAC")]
		public IKSolverVR()
		{
		}
	}
	[Token(Token = "0x200008F")]
	public class TwistRelaxer : MonoBehaviour
	{
		[Token(Token = "0x4000496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IK ik;

		[Token(Token = "0x4000497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D855C", Offset = "0x15D855C")]
		public Transform parent;

		[Token(Token = "0x4000498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D8594", Offset = "0x15D8594")]
		public Transform child;

		[Token(Token = "0x4000499")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D85CC", Offset = "0x15D85CC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D85CC", Offset = "0x15D85CC")]
		public float weight;

		[Token(Token = "0x400049A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D8620", Offset = "0x15D8620")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D8620", Offset = "0x15D8620")]
		public float parentChildCrossfade;

		[Token(Token = "0x400049B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D8674", Offset = "0x15D8674")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D8674", Offset = "0x15D8674")]
		public float twistAngleOffset;

		[Token(Token = "0x400049C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 twistAxis;

		[Token(Token = "0x400049D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 axis;

		[Token(Token = "0x400049E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 axisRelativeToParentDefault;

		[Token(Token = "0x400049F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 axisRelativeToChildDefault;

		[Token(Token = "0x6000566")]
		[Address(RVA = "0x28C42B8", Offset = "0x28C42B8", VA = "0x28C42B8")]
		public void Relax()
		{
		}

		[Token(Token = "0x6000567")]
		[Address(RVA = "0x28C4698", Offset = "0x28C4698", VA = "0x28C4698")]
		private void Start()
		{
		}

		[Token(Token = "0x6000568")]
		[Address(RVA = "0x28C4B44", Offset = "0x28C4B44", VA = "0x28C4B44")]
		private void OnPostUpdate()
		{
		}

		[Token(Token = "0x6000569")]
		[Address(RVA = "0x28C4BCC", Offset = "0x28C4BCC", VA = "0x28C4BCC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600056A")]
		[Address(RVA = "0x28C4C54", Offset = "0x28C4C54", VA = "0x28C4C54")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600056B")]
		[Address(RVA = "0x28C4D7C", Offset = "0x28C4D7C", VA = "0x28C4D7C")]
		public TwistRelaxer()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000090")]
	public class InteractionEffector
	{
		[Token(Token = "0x40004A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D86D0", Offset = "0x15D86D0")]
		private FullBodyBipedEffector <effectorType>k__BackingField;

		[Token(Token = "0x40004A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D86E0", Offset = "0x15D86E0")]
		private bool <isPaused>k__BackingField;

		[Token(Token = "0x40004A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D86F0", Offset = "0x15D86F0")]
		private InteractionObject <interactionObject>k__BackingField;

		[Token(Token = "0x40004A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Poser poser;

		[Token(Token = "0x40004A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private IKEffector effector;

		[Token(Token = "0x40004A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float timer;

		[Token(Token = "0x40004A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float length;

		[Token(Token = "0x40004A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float weight;

		[Token(Token = "0x40004A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float fadeInSpeed;

		[Token(Token = "0x40004A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float defaultPositionWeight;

		[Token(Token = "0x40004AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float defaultRotationWeight;

		[Token(Token = "0x40004AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float defaultPull;

		[Token(Token = "0x40004AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float defaultReach;

		[Token(Token = "0x40004AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float defaultPush;

		[Token(Token = "0x40004AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float defaultPushParent;

		[Token(Token = "0x40004AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float defaultBendGoalWeight;

		[Token(Token = "0x40004B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float resetTimer;

		[Token(Token = "0x40004B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool positionWeightUsed;

		[Token(Token = "0x40004B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool rotationWeightUsed;

		[Token(Token = "0x40004B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		private bool pullUsed;

		[Token(Token = "0x40004B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		private bool reachUsed;

		[Token(Token = "0x40004B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool pushUsed;

		[Token(Token = "0x40004B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		private bool pushParentUsed;

		[Token(Token = "0x40004B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
		private bool bendGoalWeightUsed;

		[Token(Token = "0x40004B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x67")]
		private bool pickedUp;

		[Token(Token = "0x40004B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool defaults;

		[Token(Token = "0x40004BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool pickUpOnPostFBBIK;

		[Token(Token = "0x40004BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 pickUpPosition;

		[Token(Token = "0x40004BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 pausePositionRelative;

		[Token(Token = "0x40004BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Quaternion pickUpRotation;

		[Token(Token = "0x40004BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Quaternion pauseRotationRelative;

		[Token(Token = "0x40004BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private InteractionTarget interactionTarget;

		[Token(Token = "0x40004C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Transform target;

		[Token(Token = "0x40004C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private List<bool> triggered;

		[Token(Token = "0x40004C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private InteractionSystem interactionSystem;

		[Token(Token = "0x40004C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool started;

		[Token(Token = "0x170000C1")]
		public FullBodyBipedEffector effectorType
		{
			[Token(Token = "0x600056C")]
			[Address(RVA = "0x30E396C", Offset = "0x30E396C", VA = "0x30E396C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E3D78", Offset = "0x15E3D78")]
			get
			{
				return default(FullBodyBipedEffector);
			}
			[Token(Token = "0x600056D")]
			[Address(RVA = "0x30E3974", Offset = "0x30E3974", VA = "0x30E3974")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E3D88", Offset = "0x15E3D88")]
			private set
			{
			}
		}

		[Token(Token = "0x170000C2")]
		public bool isPaused
		{
			[Token(Token = "0x600056E")]
			[Address(RVA = "0x30E397C", Offset = "0x30E397C", VA = "0x30E397C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E3D98", Offset = "0x15E3D98")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600056F")]
			[Address(RVA = "0x30E3984", Offset = "0x30E3984", VA = "0x30E3984")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E3DA8", Offset = "0x15E3DA8")]
			private set
			{
			}
		}

		[Token(Token = "0x170000C3")]
		public InteractionObject interactionObject
		{
			[Token(Token = "0x6000570")]
			[Address(RVA = "0x30E3990", Offset = "0x30E3990", VA = "0x30E3990")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E3DB8", Offset = "0x15E3DB8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000571")]
			[Address(RVA = "0x30E3998", Offset = "0x30E3998", VA = "0x30E3998")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E3DC8", Offset = "0x15E3DC8")]
			private set
			{
			}
		}

		[Token(Token = "0x170000C4")]
		public bool inInteraction
		{
			[Token(Token = "0x6000572")]
			[Address(RVA = "0x30E39A0", Offset = "0x30E39A0", VA = "0x30E39A0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000C5")]
		public float progress
		{
			[Token(Token = "0x600057B")]
			[Address(RVA = "0x30E5CCC", Offset = "0x30E5CCC", VA = "0x30E5CCC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000573")]
		[Address(RVA = "0x30E3A10", Offset = "0x30E3A10", VA = "0x30E3A10")]
		public InteractionEffector(FullBodyBipedEffector effectorType)
		{
		}

		[Token(Token = "0x6000574")]
		[Address(RVA = "0x30E3AA0", Offset = "0x30E3AA0", VA = "0x30E3AA0")]
		public void Initiate(InteractionSystem interactionSystem)
		{
		}

		[Token(Token = "0x6000575")]
		[Address(RVA = "0x30E3B70", Offset = "0x30E3B70", VA = "0x30E3B70")]
		private void StoreDefaults()
		{
		}

		[Token(Token = "0x6000576")]
		[Address(RVA = "0x30E3CE8", Offset = "0x30E3CE8", VA = "0x30E3CE8")]
		public bool ResetToDefaults(float speed)
		{
			return default(bool);
		}

		[Token(Token = "0x6000577")]
		[Address(RVA = "0x30E4198", Offset = "0x30E4198", VA = "0x30E4198")]
		public bool Pause()
		{
			return default(bool);
		}

		[Token(Token = "0x6000578")]
		[Address(RVA = "0x30E42CC", Offset = "0x30E42CC", VA = "0x30E42CC")]
		public bool Resume()
		{
			return default(bool);
		}

		[Token(Token = "0x6000579")]
		[Address(RVA = "0x30E4324", Offset = "0x30E4324", VA = "0x30E4324")]
		public bool Start(InteractionObject interactionObject, string tag, float fadeInTime, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x600057A")]
		[Address(RVA = "0x30E49B0", Offset = "0x30E49B0", VA = "0x30E49B0")]
		public void Update(Transform root, float speed)
		{
		}

		[Token(Token = "0x600057C")]
		[Address(RVA = "0x30E54E0", Offset = "0x30E54E0", VA = "0x30E54E0")]
		private void TriggerUntriggeredEvents(bool checkTime, out bool pickUp, out bool pause)
		{
		}

		[Token(Token = "0x600057D")]
		[Address(RVA = "0x30E5710", Offset = "0x30E5710", VA = "0x30E5710")]
		private void PickUp(Transform root)
		{
		}

		[Token(Token = "0x600057E")]
		[Address(RVA = "0x30E5B54", Offset = "0x30E5B54", VA = "0x30E5B54")]
		public bool Stop()
		{
			return default(bool);
		}

		[Token(Token = "0x600057F")]
		[Address(RVA = "0x30E5D98", Offset = "0x30E5D98", VA = "0x30E5D98")]
		public void OnPostFBBIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000091")]
	public class InteractionLookAt
	{
		[Token(Token = "0x40004C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D8700", Offset = "0x15D8700")]
		public LookAtIK ik;

		[Token(Token = "0x40004C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D8738", Offset = "0x15D8738")]
		public float lerpSpeed;

		[Token(Token = "0x40004C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D8770", Offset = "0x15D8770")]
		public float weightSpeed;

		[Token(Token = "0x40004C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public bool isPaused;

		[Token(Token = "0x40004C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform lookAtTarget;

		[Token(Token = "0x40004C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float stopLookTime;

		[Token(Token = "0x40004CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float weight;

		[Token(Token = "0x40004CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool firstFBBIKSolve;

		[Token(Token = "0x6000580")]
		[Address(RVA = "0x30E5FFC", Offset = "0x30E5FFC", VA = "0x30E5FFC")]
		public void Look(Transform target, float time)
		{
		}

		[Token(Token = "0x6000581")]
		[Address(RVA = "0x30E6180", Offset = "0x30E6180", VA = "0x30E6180")]
		public void OnFixTransforms()
		{
		}

		[Token(Token = "0x6000582")]
		[Address(RVA = "0x30E6228", Offset = "0x30E6228", VA = "0x30E6228")]
		public void Update()
		{
		}

		[Token(Token = "0x6000583")]
		[Address(RVA = "0x30E647C", Offset = "0x30E647C", VA = "0x30E647C")]
		public void SolveSpine()
		{
		}

		[Token(Token = "0x6000584")]
		[Address(RVA = "0x30E6574", Offset = "0x30E6574", VA = "0x30E6574")]
		public void SolveHead()
		{
		}

		[Token(Token = "0x6000585")]
		[Address(RVA = "0x30E6640", Offset = "0x30E6640", VA = "0x30E6640")]
		public InteractionLookAt()
		{
		}
	}
	[Token(Token = "0x2000092")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x15D479C", Offset = "0x15D479C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x15D479C", Offset = "0x15D479C")]
	public class InteractionObject : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000216")]
		public class InteractionEvent
		{
			[Token(Token = "0x4000E13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E07A4", Offset = "0x15E07A4")]
			public float time;

			[Token(Token = "0x4000E14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E07DC", Offset = "0x15E07DC")]
			public bool pause;

			[Token(Token = "0x4000E15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E0814", Offset = "0x15E0814")]
			public bool pickUp;

			[Token(Token = "0x4000E16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E084C", Offset = "0x15E084C")]
			public AnimatorEvent[] animations;

			[Token(Token = "0x4000E17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E0884", Offset = "0x15E0884")]
			public Message[] messages;

			[Token(Token = "0x4000E18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E08BC", Offset = "0x15E08BC")]
			public UnityEvent unityEvent;

			[Token(Token = "0x6000DD1")]
			[Address(RVA = "0x28B43EC", Offset = "0x28B43EC", VA = "0x28B43EC")]
			public void Activate(Transform t)
			{
			}

			[Token(Token = "0x6000DD2")]
			[Address(RVA = "0x28B45B0", Offset = "0x28B45B0", VA = "0x28B45B0")]
			public InteractionEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000217")]
		public class Message
		{
			[Token(Token = "0x4000E19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E08F4", Offset = "0x15E08F4")]
			public string function;

			[Token(Token = "0x4000E1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E092C", Offset = "0x15E092C")]
			public GameObject recipient;

			[Token(Token = "0x4000E1B")]
			private const string empty = "";

			[Token(Token = "0x6000DD3")]
			[Address(RVA = "0x28B44C0", Offset = "0x28B44C0", VA = "0x28B44C0")]
			public void Send(Transform t)
			{
			}

			[Token(Token = "0x6000DD4")]
			[Address(RVA = "0x28B45B8", Offset = "0x28B45B8", VA = "0x28B45B8")]
			public Message()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000218")]
		public class AnimatorEvent
		{
			[Token(Token = "0x4000E1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E0964", Offset = "0x15E0964")]
			public Animator animator;

			[Token(Token = "0x4000E1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E099C", Offset = "0x15E099C")]
			public Animation animation;

			[Token(Token = "0x4000E1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E09D4", Offset = "0x15E09D4")]
			public string animationState;

			[Token(Token = "0x4000E1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E0A0C", Offset = "0x15E0A0C")]
			public float crossfadeTime;

			[Token(Token = "0x4000E20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E0A44", Offset = "0x15E0A44")]
			public int layer;

			[Token(Token = "0x4000E21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E0A7C", Offset = "0x15E0A7C")]
			public bool resetNormalizedTime;

			[Token(Token = "0x4000E22")]
			private const string empty = "";

			[Token(Token = "0x6000DD5")]
			[Address(RVA = "0x30E7518", Offset = "0x30E7518", VA = "0x30E7518")]
			public void Activate(bool pickUp)
			{
			}

			[Token(Token = "0x6000DD6")]
			[Address(RVA = "0x30E760C", Offset = "0x30E760C", VA = "0x30E760C")]
			private void Activate(Animator animator)
			{
			}

			[Token(Token = "0x6000DD7")]
			[Address(RVA = "0x30E76C4", Offset = "0x30E76C4", VA = "0x30E76C4")]
			private void Activate(Animation animation)
			{
			}

			[Token(Token = "0x6000DD8")]
			[Address(RVA = "0x30E77A4", Offset = "0x30E77A4", VA = "0x30E77A4")]
			public AnimatorEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000219")]
		public class WeightCurve
		{
			[Serializable]
			[Token(Token = "0x200028A")]
			public enum Type
			{
				[Token(Token = "0x4001059")]
				PositionWeight,
				[Token(Token = "0x400105A")]
				RotationWeight,
				[Token(Token = "0x400105B")]
				PositionOffsetX,
				[Token(Token = "0x400105C")]
				PositionOffsetY,
				[Token(Token = "0x400105D")]
				PositionOffsetZ,
				[Token(Token = "0x400105E")]
				Pull,
				[Token(Token = "0x400105F")]
				Reach,
				[Token(Token = "0x4001060")]
				RotateBoneWeight,
				[Token(Token = "0x4001061")]
				Push,
				[Token(Token = "0x4001062")]
				PushParent,
				[Token(Token = "0x4001063")]
				PoserWeight,
				[Token(Token = "0x4001064")]
				BendGoalWeight
			}

			[Token(Token = "0x4000E23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E0AB4", Offset = "0x15E0AB4")]
			public Type type;

			[Token(Token = "0x4000E24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E0AEC", Offset = "0x15E0AEC")]
			public AnimationCurve curve;

			[Token(Token = "0x6000DD9")]
			[Address(RVA = "0x28B45FC", Offset = "0x28B45FC", VA = "0x28B45FC")]
			public float GetValue(float timer)
			{
				return default(float);
			}

			[Token(Token = "0x6000DDA")]
			[Address(RVA = "0x28B4628", Offset = "0x28B4628", VA = "0x28B4628")]
			public WeightCurve()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200021A")]
		public class Multiplier
		{
			[Token(Token = "0x4000E25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E0B24", Offset = "0x15E0B24")]
			public WeightCurve.Type curve;

			[Token(Token = "0x4000E26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E0B5C", Offset = "0x15E0B5C")]
			public float multiplier;

			[Token(Token = "0x4000E27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E0B94", Offset = "0x15E0B94")]
			public WeightCurve.Type result;

			[Token(Token = "0x6000DDB")]
			[Address(RVA = "0x28B45C0", Offset = "0x28B45C0", VA = "0x28B45C0")]
			public float GetValue(WeightCurve weightCurve, float timer)
			{
				return default(float);
			}

			[Token(Token = "0x6000DDC")]
			[Address(RVA = "0x28B4618", Offset = "0x28B4618", VA = "0x28B4618")]
			public Multiplier()
			{
			}
		}

		[Token(Token = "0x40004CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D87B8", Offset = "0x15D87B8")]
		public Transform otherLookAtTarget;

		[Token(Token = "0x40004CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D87F0", Offset = "0x15D87F0")]
		public Transform otherTargetsRoot;

		[Token(Token = "0x40004CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D8828", Offset = "0x15D8828")]
		public Transform positionOffsetSpace;

		[Token(Token = "0x40004CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public WeightCurve[] weightCurves;

		[Token(Token = "0x40004D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Multiplier[] multipliers;

		[Token(Token = "0x40004D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public InteractionEvent[] events;

		[Token(Token = "0x40004D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D8860", Offset = "0x15D8860")]
		private float <length>k__BackingField;

		[Token(Token = "0x40004D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D8870", Offset = "0x15D8870")]
		private InteractionSystem <lastUsedInteractionSystem>k__BackingField;

		[Token(Token = "0x40004D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private InteractionTarget[] targets;

		[Token(Token = "0x170000C6")]
		public float length
		{
			[Token(Token = "0x600058E")]
			[Address(RVA = "0x30E68B4", Offset = "0x30E68B4", VA = "0x30E68B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E3F98", Offset = "0x15E3F98")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600058F")]
			[Address(RVA = "0x30E68BC", Offset = "0x30E68BC", VA = "0x30E68BC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E3FA8", Offset = "0x15E3FA8")]
			private set
			{
			}
		}

		[Token(Token = "0x170000C7")]
		public InteractionSystem lastUsedInteractionSystem
		{
			[Token(Token = "0x6000590")]
			[Address(RVA = "0x30E68C4", Offset = "0x30E68C4", VA = "0x30E68C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E3FB8", Offset = "0x15E3FB8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000591")]
			[Address(RVA = "0x30E68CC", Offset = "0x30E68CC", VA = "0x30E68CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E3FC8", Offset = "0x15E3FC8")]
			private set
			{
			}
		}

		[Token(Token = "0x170000C8")]
		public Transform lookAtTarget
		{
			[Token(Token = "0x6000593")]
			[Address(RVA = "0x30E6AF0", Offset = "0x30E6AF0", VA = "0x30E6AF0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C9")]
		public Transform targetsRoot
		{
			[Token(Token = "0x600059B")]
			[Address(RVA = "0x30E5D08", Offset = "0x30E5D08", VA = "0x30E5D08")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000586")]
		[Address(RVA = "0x30E6654", Offset = "0x30E6654", VA = "0x30E6654")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3DD8", Offset = "0x15E3DD8")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000587")]
		[Address(RVA = "0x30E66A0", Offset = "0x30E66A0", VA = "0x30E66A0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3E10", Offset = "0x15E3E10")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000588")]
		[Address(RVA = "0x30E66EC", Offset = "0x30E66EC", VA = "0x30E66EC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3E48", Offset = "0x15E3E48")]
		private void OpenTutorial1()
		{
		}

		[Token(Token = "0x6000589")]
		[Address(RVA = "0x30E6738", Offset = "0x30E6738", VA = "0x30E6738")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3E80", Offset = "0x15E3E80")]
		private void OpenTutorial2()
		{
		}

		[Token(Token = "0x600058A")]
		[Address(RVA = "0x30E6784", Offset = "0x30E6784", VA = "0x30E6784")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3EB8", Offset = "0x15E3EB8")]
		private void OpenTutorial3()
		{
		}

		[Token(Token = "0x600058B")]
		[Address(RVA = "0x30E67D0", Offset = "0x30E67D0", VA = "0x30E67D0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3EF0", Offset = "0x15E3EF0")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x600058C")]
		[Address(RVA = "0x30E681C", Offset = "0x30E681C", VA = "0x30E681C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3F28", Offset = "0x15E3F28")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x600058D")]
		[Address(RVA = "0x30E6868", Offset = "0x30E6868", VA = "0x30E6868")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3F60", Offset = "0x15E3F60")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000592")]
		[Address(RVA = "0x30E68D4", Offset = "0x30E68D4", VA = "0x30E68D4")]
		public void Initiate()
		{
		}

		[Token(Token = "0x6000594")]
		[Address(RVA = "0x30E6B80", Offset = "0x30E6B80", VA = "0x30E6B80")]
		public InteractionTarget GetTarget(FullBodyBipedEffector effectorType, InteractionSystem interactionSystem)
		{
			return null;
		}

		[Token(Token = "0x6000595")]
		[Address(RVA = "0x30E48FC", Offset = "0x30E48FC", VA = "0x30E48FC")]
		public bool CurveUsed(WeightCurve.Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000596")]
		[Address(RVA = "0x30E6D04", Offset = "0x30E6D04", VA = "0x30E6D04")]
		public InteractionTarget[] GetTargets()
		{
			return null;
		}

		[Token(Token = "0x6000597")]
		[Address(RVA = "0x30E47B0", Offset = "0x30E47B0", VA = "0x30E47B0")]
		public Transform GetTarget(FullBodyBipedEffector effectorType, string tag)
		{
			return null;
		}

		[Token(Token = "0x6000598")]
		[Address(RVA = "0x30E48F4", Offset = "0x30E48F4", VA = "0x30E48F4")]
		public void OnStartInteraction(InteractionSystem interactionSystem)
		{
		}

		[Token(Token = "0x6000599")]
		[Address(RVA = "0x30E50C0", Offset = "0x30E50C0", VA = "0x30E50C0")]
		public void Apply(IKSolverFullBodyBiped solver, FullBodyBipedEffector effector, InteractionTarget target, float timer, float weight)
		{
		}

		[Token(Token = "0x600059A")]
		[Address(RVA = "0x30E5928", Offset = "0x30E5928", VA = "0x30E5928")]
		public float GetValue(WeightCurve.Type weightCurveType, InteractionTarget target, float timer)
		{
			return default(float);
		}

		[Token(Token = "0x600059C")]
		[Address(RVA = "0x30E7440", Offset = "0x30E7440", VA = "0x30E7440")]
		private void Start()
		{
		}

		[Token(Token = "0x600059D")]
		[Address(RVA = "0x30E6D7C", Offset = "0x30E6D7C", VA = "0x30E6D7C")]
		private void Apply(IKSolverFullBodyBiped solver, FullBodyBipedEffector effector, WeightCurve.Type type, float value, float weight)
		{
		}

		[Token(Token = "0x600059E")]
		[Address(RVA = "0x30E6D0C", Offset = "0x30E6D0C", VA = "0x30E6D0C")]
		private Transform GetTarget(FullBodyBipedEffector effectorType)
		{
			return null;
		}

		[Token(Token = "0x600059F")]
		[Address(RVA = "0x30E73D8", Offset = "0x30E73D8", VA = "0x30E73D8")]
		private int GetWeightCurveIndex(WeightCurve.Type weightCurveType)
		{
			return default(int);
		}

		[Token(Token = "0x60005A0")]
		[Address(RVA = "0x30E7444", Offset = "0x30E7444", VA = "0x30E7444")]
		private int GetMultiplierIndex(WeightCurve.Type weightCurveType)
		{
			return default(int);
		}

		[Token(Token = "0x60005A1")]
		[Address(RVA = "0x30E74AC", Offset = "0x30E74AC", VA = "0x30E74AC")]
		public InteractionObject()
		{
		}
	}
	[Token(Token = "0x2000093")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x15D47FC", Offset = "0x15D47FC")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x15D47FC", Offset = "0x15D47FC")]
	public class InteractionSystem : MonoBehaviour
	{
		[Token(Token = "0x200021B")]
		public delegate void InteractionDelegate(FullBodyBipedEffector effectorType, InteractionObject interactionObject);

		[Token(Token = "0x200021C")]
		public delegate void InteractionEventDelegate(FullBodyBipedEffector effectorType, InteractionObject interactionObject, InteractionObject.InteractionEvent interactionEvent);

		[Token(Token = "0x40004D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D8880", Offset = "0x15D8880")]
		public string targetTag;

		[Token(Token = "0x40004D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D88B8", Offset = "0x15D88B8")]
		public float fadeInTime;

		[Token(Token = "0x40004D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D88F0", Offset = "0x15D88F0")]
		public float speed;

		[Token(Token = "0x40004D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D8928", Offset = "0x15D8928")]
		public float resetToDefaultsSpeed;

		[Token(Token = "0x40004D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x15D8960", Offset = "0x15D8960")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D8960", Offset = "0x15D8960")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x15D8960", Offset = "0x15D8960")]
		public Collider characterCollider;

		[Token(Token = "0x40004DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D89E4", Offset = "0x15D89E4")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x15D89E4", Offset = "0x15D89E4")]
		public Transform FPSCamera;

		[Token(Token = "0x40004DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D8A44", Offset = "0x15D8A44")]
		public LayerMask camRaycastLayers;

		[Token(Token = "0x40004DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D8A7C", Offset = "0x15D8A7C")]
		public float camRaycastDistance;

		[Token(Token = "0x40004DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D8AB4", Offset = "0x15D8AB4")]
		private List<InteractionTrigger> <triggersInRange>k__BackingField;

		[Token(Token = "0x40004DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<InteractionTrigger> inContact;

		[Token(Token = "0x40004DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<int> bestRangeIndexes;

		[Token(Token = "0x40004E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public InteractionDelegate OnInteractionStart;

		[Token(Token = "0x40004E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public InteractionDelegate OnInteractionPause;

		[Token(Token = "0x40004E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public InteractionDelegate OnInteractionPickUp;

		[Token(Token = "0x40004E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public InteractionDelegate OnInteractionResume;

		[Token(Token = "0x40004E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public InteractionDelegate OnInteractionStop;

		[Token(Token = "0x40004E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public InteractionEventDelegate OnInteractionEvent;

		[Token(Token = "0x40004E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public RaycastHit raycastHit;

		[Token(Token = "0x40004E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x15D8AC4", Offset = "0x15D8AC4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D8AC4", Offset = "0x15D8AC4")]
		[SerializeField]
		private FullBodyBipedIK fullBody;

		[Token(Token = "0x40004E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D8B24", Offset = "0x15D8B24")]
		public InteractionLookAt lookAt;

		[Token(Token = "0x40004E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private InteractionEffector[] interactionEffectors;

		[Token(Token = "0x40004EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool initiated;

		[Token(Token = "0x40004EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Collider lastCollider;

		[Token(Token = "0x40004EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Collider c;

		[Token(Token = "0x170000CA")]
		public bool inInteraction
		{
			[Token(Token = "0x60005AA")]
			[Address(RVA = "0x28B4890", Offset = "0x28B4890", VA = "0x28B4890")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000CB")]
		public FullBodyBipedIK ik
		{
			[Token(Token = "0x60005C4")]
			[Address(RVA = "0x28B64EC", Offset = "0x28B64EC", VA = "0x28B64EC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60005C5")]
			[Address(RVA = "0x28B64F4", Offset = "0x28B64F4", VA = "0x28B64F4")]
			set
			{
			}
		}

		[Token(Token = "0x170000CC")]
		public List<InteractionTrigger> triggersInRange
		{
			[Token(Token = "0x60005C6")]
			[Address(RVA = "0x28B64FC", Offset = "0x28B64FC", VA = "0x28B64FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4198", Offset = "0x15E4198")]
			get
			{
				return null;
			}
			[Token(Token = "0x60005C7")]
			[Address(RVA = "0x28B6504", Offset = "0x28B6504", VA = "0x28B6504")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E41A8", Offset = "0x15E41A8")]
			private set
			{
			}
		}

		[Token(Token = "0x60005A2")]
		[Address(RVA = "0x28B4630", Offset = "0x28B4630", VA = "0x28B4630")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E3FD8", Offset = "0x15E3FD8")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x60005A3")]
		[Address(RVA = "0x28B467C", Offset = "0x28B467C", VA = "0x28B467C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E4010", Offset = "0x15E4010")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x60005A4")]
		[Address(RVA = "0x28B46C8", Offset = "0x28B46C8", VA = "0x28B46C8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E4048", Offset = "0x15E4048")]
		private void OpenTutorial1()
		{
		}

		[Token(Token = "0x60005A5")]
		[Address(RVA = "0x28B4714", Offset = "0x28B4714", VA = "0x28B4714")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E4080", Offset = "0x15E4080")]
		private void OpenTutorial2()
		{
		}

		[Token(Token = "0x60005A6")]
		[Address(RVA = "0x28B4760", Offset = "0x28B4760", VA = "0x28B4760")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E40B8", Offset = "0x15E40B8")]
		private void OpenTutorial3()
		{
		}

		[Token(Token = "0x60005A7")]
		[Address(RVA = "0x28B47AC", Offset = "0x28B47AC", VA = "0x28B47AC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E40F0", Offset = "0x15E40F0")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x60005A8")]
		[Address(RVA = "0x28B47F8", Offset = "0x28B47F8", VA = "0x28B47F8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E4128", Offset = "0x15E4128")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60005A9")]
		[Address(RVA = "0x28B4844", Offset = "0x28B4844", VA = "0x28B4844")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E4160", Offset = "0x15E4160")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60005AB")]
		[Address(RVA = "0x28B4A24", Offset = "0x28B4A24", VA = "0x28B4A24")]
		public bool IsInInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x60005AC")]
		[Address(RVA = "0x28B4AF4", Offset = "0x28B4AF4", VA = "0x28B4AF4")]
		public bool IsPaused(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x60005AD")]
		[Address(RVA = "0x28B4BC4", Offset = "0x28B4BC4", VA = "0x28B4BC4")]
		public bool IsPaused()
		{
			return default(bool);
		}

		[Token(Token = "0x60005AE")]
		[Address(RVA = "0x28B4C74", Offset = "0x28B4C74", VA = "0x28B4C74")]
		public bool IsInSync()
		{
			return default(bool);
		}

		[Token(Token = "0x60005AF")]
		[Address(RVA = "0x28B4D70", Offset = "0x28B4D70", VA = "0x28B4D70")]
		public bool StartInteraction(FullBodyBipedEffector effectorType, InteractionObject interactionObject, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x60005B0")]
		[Address(RVA = "0x28B4E90", Offset = "0x28B4E90", VA = "0x28B4E90")]
		public bool PauseInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x60005B1")]
		[Address(RVA = "0x28B4F24", Offset = "0x28B4F24", VA = "0x28B4F24")]
		public bool ResumeInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x60005B2")]
		[Address(RVA = "0x28B4FB8", Offset = "0x28B4FB8", VA = "0x28B4FB8")]
		public bool StopInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x60005B3")]
		[Address(RVA = "0x28B504C", Offset = "0x28B504C", VA = "0x28B504C")]
		public void PauseAll()
		{
		}

		[Token(Token = "0x60005B4")]
		[Address(RVA = "0x28B50C4", Offset = "0x28B50C4", VA = "0x28B50C4")]
		public void ResumeAll()
		{
		}

		[Token(Token = "0x60005B5")]
		[Address(RVA = "0x28B513C", Offset = "0x28B513C", VA = "0x28B513C")]
		public void StopAll()
		{
		}

		[Token(Token = "0x60005B6")]
		[Address(RVA = "0x28B51A8", Offset = "0x28B51A8", VA = "0x28B51A8")]
		public InteractionObject GetInteractionObject(FullBodyBipedEffector effectorType)
		{
			return null;
		}

		[Token(Token = "0x60005B7")]
		[Address(RVA = "0x28B5234", Offset = "0x28B5234", VA = "0x28B5234")]
		public float GetProgress(FullBodyBipedEffector effectorType)
		{
			return default(float);
		}

		[Token(Token = "0x60005B8")]
		[Address(RVA = "0x28B52C8", Offset = "0x28B52C8", VA = "0x28B52C8")]
		public float GetMinActiveProgress()
		{
			return default(float);
		}

		[Token(Token = "0x60005B9")]
		[Address(RVA = "0x28B5394", Offset = "0x28B5394", VA = "0x28B5394")]
		public bool TriggerInteraction(int index, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x60005BA")]
		[Address(RVA = "0x28B5638", Offset = "0x28B5638", VA = "0x28B5638")]
		public bool TriggerInteraction(int index, bool interrupt, out InteractionObject interactionObject)
		{
			return default(bool);
		}

		[Token(Token = "0x60005BB")]
		[Address(RVA = "0x28B5828", Offset = "0x28B5828", VA = "0x28B5828")]
		public bool TriggerInteraction(int index, bool interrupt, out InteractionTarget interactionTarget)
		{
			return default(bool);
		}

		[Token(Token = "0x60005BC")]
		[Address(RVA = "0x28B5AB0", Offset = "0x28B5AB0", VA = "0x28B5AB0")]
		public InteractionTrigger.Range GetClosestInteractionRange()
		{
			return null;
		}

		[Token(Token = "0x60005BD")]
		[Address(RVA = "0x28B5DA4", Offset = "0x28B5DA4", VA = "0x28B5DA4")]
		public InteractionObject GetClosestInteractionObjectInRange()
		{
			return null;
		}

		[Token(Token = "0x60005BE")]
		[Address(RVA = "0x28B5DE8", Offset = "0x28B5DE8", VA = "0x28B5DE8")]
		public InteractionTarget GetClosestInteractionTargetInRange()
		{
			return null;
		}

		[Token(Token = "0x60005BF")]
		[Address(RVA = "0x28B5E64", Offset = "0x28B5E64", VA = "0x28B5E64")]
		public InteractionObject[] GetClosestInteractionObjectsInRange()
		{
			return null;
		}

		[Token(Token = "0x60005C0")]
		[Address(RVA = "0x28B5F9C", Offset = "0x28B5F9C", VA = "0x28B5F9C")]
		public InteractionTarget[] GetClosestInteractionTargetsInRange()
		{
			return null;
		}

		[Token(Token = "0x60005C1")]
		[Address(RVA = "0x28B6118", Offset = "0x28B6118", VA = "0x28B6118")]
		public bool TriggerEffectorsReady(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x60005C2")]
		[Address(RVA = "0x28B63C0", Offset = "0x28B63C0", VA = "0x28B63C0")]
		public InteractionTrigger.Range GetTriggerRange(int index)
		{
			return null;
		}

		[Token(Token = "0x60005C3")]
		[Address(RVA = "0x28B5BB0", Offset = "0x28B5BB0", VA = "0x28B5BB0")]
		public int GetClosestTriggerIndex()
		{
			return default(int);
		}

		[Token(Token = "0x60005C8")]
		[Address(RVA = "0x28B650C", Offset = "0x28B650C", VA = "0x28B650C")]
		public void Start()
		{
		}

		[Token(Token = "0x60005C9")]
		[Address(RVA = "0x28B6CC4", Offset = "0x28B6CC4", VA = "0x28B6CC4")]
		private void InteractionPause(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x60005CA")]
		[Address(RVA = "0x28B6CE4", Offset = "0x28B6CE4", VA = "0x28B6CE4")]
		private void InteractionResume(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x60005CB")]
		[Address(RVA = "0x28B6D00", Offset = "0x28B6D00", VA = "0x28B6D00")]
		private void InteractionStop(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x60005CC")]
		[Address(RVA = "0x28B6D1C", Offset = "0x28B6D1C", VA = "0x28B6D1C")]
		private void LookAtInteraction(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x60005CD")]
		[Address(RVA = "0x28B6D84", Offset = "0x28B6D84", VA = "0x28B6D84")]
		public void OnTriggerEnter(Collider c)
		{
		}

		[Token(Token = "0x60005CE")]
		[Address(RVA = "0x28B6EA0", Offset = "0x28B6EA0", VA = "0x28B6EA0")]
		public void OnTriggerExit(Collider c)
		{
		}

		[Token(Token = "0x60005CF")]
		[Address(RVA = "0x28B6F9C", Offset = "0x28B6F9C", VA = "0x28B6F9C")]
		private bool ContactIsInRange(int index, out int bestRangeIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D0")]
		[Address(RVA = "0x28B72FC", Offset = "0x28B72FC", VA = "0x28B72FC")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60005D1")]
		[Address(RVA = "0x28B7414", Offset = "0x28B7414", VA = "0x28B7414")]
		public void Update()
		{
		}

		[Token(Token = "0x60005D2")]
		[Address(RVA = "0x28B7664", Offset = "0x28B7664", VA = "0x28B7664")]
		private void Raycasting()
		{
		}

		[Token(Token = "0x60005D3")]
		[Address(RVA = "0x28B6A24", Offset = "0x28B6A24", VA = "0x28B6A24")]
		private void UpdateTriggerEventBroadcasting()
		{
		}

		[Token(Token = "0x60005D4")]
		[Address(RVA = "0x28B77A4", Offset = "0x28B77A4", VA = "0x28B77A4")]
		private void UpdateEffectors()
		{
		}

		[Token(Token = "0x60005D5")]
		[Address(RVA = "0x28B78D8", Offset = "0x28B78D8", VA = "0x28B78D8")]
		private void OnPreFBBIK()
		{
		}

		[Token(Token = "0x60005D6")]
		[Address(RVA = "0x28B7974", Offset = "0x28B7974", VA = "0x28B7974")]
		private void OnPostFBBIK()
		{
		}

		[Token(Token = "0x60005D7")]
		[Address(RVA = "0x28B7A54", Offset = "0x28B7A54", VA = "0x28B7A54")]
		private void OnFixTransforms()
		{
		}

		[Token(Token = "0x60005D8")]
		[Address(RVA = "0x28B7A70", Offset = "0x28B7A70", VA = "0x28B7A70")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60005D9")]
		[Address(RVA = "0x28B4940", Offset = "0x28B4940", VA = "0x28B4940")]
		private bool IsValid(bool log)
		{
			return default(bool);
		}

		[Token(Token = "0x60005DA")]
		[Address(RVA = "0x28B5534", Offset = "0x28B5534", VA = "0x28B5534")]
		private bool TriggerIndexIsValid(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x60005DB")]
		[Address(RVA = "0x28B7E34", Offset = "0x28B7E34", VA = "0x28B7E34")]
		public InteractionSystem()
		{
		}
	}
	[Token(Token = "0x2000094")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x15D485C", Offset = "0x15D485C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x15D485C", Offset = "0x15D485C")]
	public class InteractionTarget : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200021D")]
		public class Multiplier
		{
			[Token(Token = "0x4000E28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E0BCC", Offset = "0x15E0BCC")]
			public InteractionObject.WeightCurve.Type curve;

			[Token(Token = "0x4000E29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E0C04", Offset = "0x15E0C04")]
			public float multiplier;

			[Token(Token = "0x6000DE5")]
			[Address(RVA = "0x28B9210", Offset = "0x28B9210", VA = "0x28B9210")]
			public Multiplier()
			{
			}
		}

		[Token(Token = "0x40004ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D8B5C", Offset = "0x15D8B5C")]
		public FullBodyBipedEffector effectorType;

		[Token(Token = "0x40004EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D8B94", Offset = "0x15D8B94")]
		public Multiplier[] multipliers;

		[Token(Token = "0x40004EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D8BCC", Offset = "0x15D8BCC")]
		public float interactionSpeedMlp;

		[Token(Token = "0x40004F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D8C04", Offset = "0x15D8C04")]
		public Transform pivot;

		[Token(Token = "0x40004F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D8C3C", Offset = "0x15D8C3C")]
		public Vector3 twistAxis;

		[Token(Token = "0x40004F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D8C74", Offset = "0x15D8C74")]
		public float twistWeight;

		[Token(Token = "0x40004F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D8CAC", Offset = "0x15D8CAC")]
		public float swingWeight;

		[Token(Token = "0x40004F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D8CE4", Offset = "0x15D8CE4")]
		public bool rotateOnce;

		[Token(Token = "0x40004F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion defaultLocalRotation;

		[Token(Token = "0x40004F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform lastPivot;

		[Token(Token = "0x60005DC")]
		[Address(RVA = "0x28B88EC", Offset = "0x28B88EC", VA = "0x28B88EC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E41B8", Offset = "0x15E41B8")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x60005DD")]
		[Address(RVA = "0x28B8938", Offset = "0x28B8938", VA = "0x28B8938")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E41F0", Offset = "0x15E41F0")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x60005DE")]
		[Address(RVA = "0x28B8984", Offset = "0x28B8984", VA = "0x28B8984")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E4228", Offset = "0x15E4228")]
		private void OpenTutorial1()
		{
		}

		[Token(Token = "0x60005DF")]
		[Address(RVA = "0x28B89D0", Offset = "0x28B89D0", VA = "0x28B89D0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E4260", Offset = "0x15E4260")]
		private void OpenTutorial2()
		{
		}

		[Token(Token = "0x60005E0")]
		[Address(RVA = "0x28B8A1C", Offset = "0x28B8A1C", VA = "0x28B8A1C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E4298", Offset = "0x15E4298")]
		private void OpenTutorial3()
		{
		}

		[Token(Token = "0x60005E1")]
		[Address(RVA = "0x28B8A68", Offset = "0x28B8A68", VA = "0x28B8A68")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E42D0", Offset = "0x15E42D0")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x60005E2")]
		[Address(RVA = "0x28B8AB4", Offset = "0x28B8AB4", VA = "0x28B8AB4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E4308", Offset = "0x15E4308")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60005E3")]
		[Address(RVA = "0x28B8B00", Offset = "0x28B8B00", VA = "0x28B8B00")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E4340", Offset = "0x15E4340")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60005E4")]
		[Address(RVA = "0x28B8B4C", Offset = "0x28B8B4C", VA = "0x28B8B4C")]
		public float GetValue(InteractionObject.WeightCurve.Type curveType)
		{
			return default(float);
		}

		[Token(Token = "0x60005E5")]
		[Address(RVA = "0x28B8BBC", Offset = "0x28B8BBC", VA = "0x28B8BBC")]
		public void ResetRotation()
		{
		}

		[Token(Token = "0x60005E6")]
		[Address(RVA = "0x28B8C58", Offset = "0x28B8C58", VA = "0x28B8C58")]
		public void RotateTo(Vector3 position)
		{
		}

		[Token(Token = "0x60005E7")]
		[Address(RVA = "0x28B9184", Offset = "0x28B9184", VA = "0x28B9184")]
		public InteractionTarget()
		{
		}
	}
	[Token(Token = "0x2000095")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x15D48BC", Offset = "0x15D48BC")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x15D48BC", Offset = "0x15D48BC")]
	public class InteractionTrigger : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200021E")]
		public class CharacterPosition
		{
			[Token(Token = "0x4000E2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E0C3C", Offset = "0x15E0C3C")]
			public bool use;

			[Token(Token = "0x4000E2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E0C74", Offset = "0x15E0C74")]
			public Vector2 offset;

			[Token(Token = "0x4000E2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E0CAC", Offset = "0x15E0CAC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15E0CAC", Offset = "0x15E0CAC")]
			public float angleOffset;

			[Token(Token = "0x4000E2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E0D08", Offset = "0x15E0D08")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15E0D08", Offset = "0x15E0D08")]
			public float maxAngle;

			[Token(Token = "0x4000E2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E0D60", Offset = "0x15E0D60")]
			public float radius;

			[Token(Token = "0x4000E2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E0D98", Offset = "0x15E0D98")]
			public bool orbit;

			[Token(Token = "0x4000E30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E0DD0", Offset = "0x15E0DD0")]
			public bool fixYAxis;

			[Token(Token = "0x170001B0")]
			public Vector3 offset3D
			{
				[Token(Token = "0x6000DE6")]
				[Address(RVA = "0x28B9A3C", Offset = "0x28B9A3C", VA = "0x28B9A3C")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170001B1")]
			public Vector3 direction3D
			{
				[Token(Token = "0x6000DE7")]
				[Address(RVA = "0x28B9A78", Offset = "0x28B9A78", VA = "0x28B9A78")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x6000DE8")]
			[Address(RVA = "0x28B9B70", Offset = "0x28B9B70", VA = "0x28B9B70")]
			public bool IsInRange(Transform character, Transform trigger, out float error)
			{
				return default(bool);
			}

			[Token(Token = "0x6000DE9")]
			[Address(RVA = "0x28BA1EC", Offset = "0x28BA1EC", VA = "0x28BA1EC")]
			public CharacterPosition()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200021F")]
		public class CameraPosition
		{
			[Token(Token = "0x4000E31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E0E08", Offset = "0x15E0E08")]
			public Collider lookAtTarget;

			[Token(Token = "0x4000E32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E0E40", Offset = "0x15E0E40")]
			public Vector3 direction;

			[Token(Token = "0x4000E33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E0E78", Offset = "0x15E0E78")]
			public float maxDistance;

			[Token(Token = "0x4000E34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E0EB0", Offset = "0x15E0EB0")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15E0EB0", Offset = "0x15E0EB0")]
			public float maxAngle;

			[Token(Token = "0x4000E35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E0F08", Offset = "0x15E0F08")]
			public bool fixYAxis;

			[Token(Token = "0x6000DEA")]
			[Address(RVA = "0x28B9528", Offset = "0x28B9528", VA = "0x28B9528")]
			public Quaternion GetRotation()
			{
				return default(Quaternion);
			}

			[Token(Token = "0x6000DEB")]
			[Address(RVA = "0x28B96D0", Offset = "0x28B96D0", VA = "0x28B96D0")]
			public bool IsInRange(Transform raycastFrom, RaycastHit hit, Transform trigger, out float error)
			{
				return default(bool);
			}

			[Token(Token = "0x6000DEC")]
			[Address(RVA = "0x28B99B0", Offset = "0x28B99B0", VA = "0x28B99B0")]
			public CameraPosition()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000220")]
		public class Range
		{
			[Serializable]
			[Token(Token = "0x200028B")]
			public class Interaction
			{
				[Token(Token = "0x4001065")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E22A8", Offset = "0x15E22A8")]
				public InteractionObject interactionObject;

				[Token(Token = "0x4001066")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E22E0", Offset = "0x15E22E0")]
				public FullBodyBipedEffector[] effectors;

				[Token(Token = "0x6000F1B")]
				[Address(RVA = "0x28BA210", Offset = "0x28BA210", VA = "0x28BA210")]
				public Interaction()
				{
				}
			}

			[Token(Token = "0x4000E36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[HideInInspector]
			[SerializeField]
			public string name;

			[Token(Token = "0x4000E37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[HideInInspector]
			[SerializeField]
			public bool show;

			[Token(Token = "0x4000E38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E0FB0", Offset = "0x15E0FB0")]
			public CharacterPosition characterPosition;

			[Token(Token = "0x4000E39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E0FE8", Offset = "0x15E0FE8")]
			public CameraPosition cameraPosition;

			[Token(Token = "0x4000E3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E1020", Offset = "0x15E1020")]
			public Interaction[] interactions;

			[Token(Token = "0x6000DED")]
			[Address(RVA = "0x28B9398", Offset = "0x28B9398", VA = "0x28B9398")]
			public bool IsInRange(Transform character, Transform raycastFrom, RaycastHit raycastHit, Transform trigger, out float maxError)
			{
				return default(bool);
			}

			[Token(Token = "0x6000DEE")]
			[Address(RVA = "0x28BA200", Offset = "0x28BA200", VA = "0x28BA200")]
			public Range()
			{
			}
		}

		[Token(Token = "0x40004F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D8D1C", Offset = "0x15D8D1C")]
		public Range[] ranges;

		[Token(Token = "0x60005E8")]
		[Address(RVA = "0x28B9218", Offset = "0x28B9218", VA = "0x28B9218")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E4378", Offset = "0x15E4378")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x60005E9")]
		[Address(RVA = "0x28B9264", Offset = "0x28B9264", VA = "0x28B9264")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E43B0", Offset = "0x15E43B0")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x60005EA")]
		[Address(RVA = "0x28B92B0", Offset = "0x28B92B0", VA = "0x28B92B0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E43E8", Offset = "0x15E43E8")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x60005EB")]
		[Address(RVA = "0x28B92FC", Offset = "0x28B92FC", VA = "0x28B92FC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E4420", Offset = "0x15E4420")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60005EC")]
		[Address(RVA = "0x28B9348", Offset = "0x28B9348", VA = "0x28B9348")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E4458", Offset = "0x15E4458")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60005ED")]
		[Address(RVA = "0x28B9394", Offset = "0x28B9394", VA = "0x28B9394")]
		private void Start()
		{
		}

		[Token(Token = "0x60005EE")]
		[Address(RVA = "0x28B7140", Offset = "0x28B7140", VA = "0x28B7140")]
		public int GetBestRangeIndex(Transform character, Transform raycastFrom, RaycastHit raycastHit)
		{
			return default(int);
		}

		[Token(Token = "0x60005EF")]
		[Address(RVA = "0x28B94BC", Offset = "0x28B94BC", VA = "0x28B94BC")]
		public InteractionTrigger()
		{
		}
	}
	[Token(Token = "0x2000096")]
	public class GenericPoser : Poser
	{
		[Serializable]
		[Token(Token = "0x2000221")]
		public class Map
		{
			[Token(Token = "0x4000E3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform bone;

			[Token(Token = "0x4000E3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform target;

			[Token(Token = "0x4000E3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Vector3 defaultLocalPosition;

			[Token(Token = "0x4000E3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private Quaternion defaultLocalRotation;

			[Token(Token = "0x6000DEF")]
			[Address(RVA = "0x2F5E8EC", Offset = "0x2F5E8EC", VA = "0x2F5E8EC")]
			public Map(Transform bone, Transform target)
			{
			}

			[Token(Token = "0x6000DF0")]
			[Address(RVA = "0x2F5ED0C", Offset = "0x2F5ED0C", VA = "0x2F5ED0C")]
			public void StoreDefaultState()
			{
			}

			[Token(Token = "0x6000DF1")]
			[Address(RVA = "0x2F5ECC0", Offset = "0x2F5ECC0", VA = "0x2F5ECC0")]
			public void FixTransform()
			{
			}

			[Token(Token = "0x6000DF2")]
			[Address(RVA = "0x2F5EAB8", Offset = "0x2F5EAB8", VA = "0x2F5EAB8")]
			public void Update(float localRotationWeight, float localPositionWeight)
			{
			}
		}

		[Token(Token = "0x40004F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Map[] maps;

		[Token(Token = "0x60005F0")]
		[Address(RVA = "0x2F5E5F8", Offset = "0x2F5E5F8", VA = "0x2F5E5F8", Slot = "7")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E4490", Offset = "0x15E4490")]
		public override void AutoMapping()
		{
		}

		[Token(Token = "0x60005F1")]
		[Address(RVA = "0x2F5E9AC", Offset = "0x2F5E9AC", VA = "0x2F5E9AC", Slot = "8")]
		protected override void InitiatePoser()
		{
		}

		[Token(Token = "0x60005F2")]
		[Address(RVA = "0x2F5E9B0", Offset = "0x2F5E9B0", VA = "0x2F5E9B0", Slot = "9")]
		protected override void UpdatePoser()
		{
		}

		[Token(Token = "0x60005F3")]
		[Address(RVA = "0x2F5EC58", Offset = "0x2F5EC58", VA = "0x2F5EC58", Slot = "10")]
		protected override void FixPoserTransforms()
		{
		}

		[Token(Token = "0x60005F4")]
		[Address(RVA = "0x2F5E944", Offset = "0x2F5E944", VA = "0x2F5E944")]
		private void StoreDefaultState()
		{
		}

		[Token(Token = "0x60005F5")]
		[Address(RVA = "0x2F5E84C", Offset = "0x2F5E84C", VA = "0x2F5E84C")]
		private Transform GetTargetNamed(string tName, Transform[] array)
		{
			return null;
		}

		[Token(Token = "0x60005F6")]
		[Address(RVA = "0x2F5ED5C", Offset = "0x2F5ED5C", VA = "0x2F5ED5C")]
		public GenericPoser()
		{
		}
	}
	[Token(Token = "0x2000097")]
	public class HandPoser : Poser
	{
		[Token(Token = "0x40004F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Transform[] children;

		[Token(Token = "0x40004FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform _poseRoot;

		[Token(Token = "0x40004FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform[] poseChildren;

		[Token(Token = "0x40004FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3[] defaultLocalPositions;

		[Token(Token = "0x40004FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Quaternion[] defaultLocalRotations;

		[Token(Token = "0x60005F7")]
		[Address(RVA = "0x2F691D4", Offset = "0x2F691D4", VA = "0x2F691D4", Slot = "7")]
		public override void AutoMapping()
		{
		}

		[Token(Token = "0x60005F8")]
		[Address(RVA = "0x2F6929C", Offset = "0x2F6929C", VA = "0x2F6929C", Slot = "8")]
		protected override void InitiatePoser()
		{
		}

		[Token(Token = "0x60005F9")]
		[Address(RVA = "0x2F69480", Offset = "0x2F69480", VA = "0x2F69480", Slot = "10")]
		protected override void FixPoserTransforms()
		{
		}

		[Token(Token = "0x60005FA")]
		[Address(RVA = "0x2F6957C", Offset = "0x2F6957C", VA = "0x2F6957C", Slot = "9")]
		protected override void UpdatePoser()
		{
		}

		[Token(Token = "0x60005FB")]
		[Address(RVA = "0x2F69304", Offset = "0x2F69304", VA = "0x2F69304")]
		protected void StoreDefaultState()
		{
		}

		[Token(Token = "0x60005FC")]
		[Address(RVA = "0x2F6992C", Offset = "0x2F6992C", VA = "0x2F6992C")]
		public HandPoser()
		{
		}
	}
	[Token(Token = "0x2000098")]
	public abstract class Poser : SolverManager
	{
		[Token(Token = "0x40004FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform poseRoot;

		[Token(Token = "0x40004FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D8D54", Offset = "0x15D8D54")]
		public float weight;

		[Token(Token = "0x4000500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D8D6C", Offset = "0x15D8D6C")]
		public float localRotationWeight;

		[Token(Token = "0x4000501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D8D84", Offset = "0x15D8D84")]
		public float localPositionWeight;

		[Token(Token = "0x4000502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool initiated;

		[Token(Token = "0x60005FD")]
		public abstract void AutoMapping();

		[Token(Token = "0x60005FE")]
		[Address(RVA = "0x28BCF94", Offset = "0x28BCF94", VA = "0x28BCF94")]
		public void UpdateManual()
		{
		}

		[Token(Token = "0x60005FF")]
		protected abstract void InitiatePoser();

		[Token(Token = "0x6000600")]
		protected abstract void UpdatePoser();

		[Token(Token = "0x6000601")]
		protected abstract void FixPoserTransforms();

		[Token(Token = "0x6000602")]
		[Address(RVA = "0x28BCFA0", Offset = "0x28BCFA0", VA = "0x28BCFA0", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x6000603")]
		[Address(RVA = "0x28BCFF4", Offset = "0x28BCFF4", VA = "0x28BCFF4", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x6000604")]
		[Address(RVA = "0x28BD030", Offset = "0x28BD030", VA = "0x28BD030", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x6000605")]
		[Address(RVA = "0x28BD048", Offset = "0x28BD048", VA = "0x28BD048")]
		protected Poser()
		{
		}
	}
	[Token(Token = "0x2000099")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x15D491C", Offset = "0x15D491C")]
	public class RagdollUtility : MonoBehaviour
	{
		[Token(Token = "0x2000222")]
		public class Rigidbone
		{
			[Token(Token = "0x4000E3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody r;

			[Token(Token = "0x4000E40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform t;

			[Token(Token = "0x4000E41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Collider collider;

			[Token(Token = "0x4000E42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Joint joint;

			[Token(Token = "0x4000E43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Rigidbody c;

			[Token(Token = "0x4000E44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public bool updateAnchor;

			[Token(Token = "0x4000E45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Vector3 deltaPosition;

			[Token(Token = "0x4000E46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Quaternion deltaRotation;

			[Token(Token = "0x4000E47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float deltaTime;

			[Token(Token = "0x4000E48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public Vector3 lastPosition;

			[Token(Token = "0x4000E49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public Quaternion lastRotation;

			[Token(Token = "0x6000DF3")]
			[Address(RVA = "0x28BD678", Offset = "0x28BD678", VA = "0x28BD678")]
			public Rigidbone(Rigidbody r)
			{
			}

			[Token(Token = "0x6000DF4")]
			[Address(RVA = "0x28BE2F0", Offset = "0x28BE2F0", VA = "0x28BE2F0")]
			public void RecordVelocity()
			{
			}

			[Token(Token = "0x6000DF5")]
			[Address(RVA = "0x28BE0D4", Offset = "0x28BE0D4", VA = "0x28BE0D4")]
			public void WakeUp(float velocityWeight, float angularVelocityWeight)
			{
			}
		}

		[Token(Token = "0x2000223")]
		public class Child
		{
			[Token(Token = "0x4000E4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform t;

			[Token(Token = "0x4000E4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3 localPosition;

			[Token(Token = "0x4000E4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public Quaternion localRotation;

			[Token(Token = "0x6000DF6")]
			[Address(RVA = "0x28BD828", Offset = "0x28BD828", VA = "0x28BD828")]
			public Child(Transform transform)
			{
			}

			[Token(Token = "0x6000DF7")]
			[Address(RVA = "0x28BE48C", Offset = "0x28BE48C", VA = "0x28BE48C")]
			public void FixTransform(float weight)
			{
			}

			[Token(Token = "0x6000DF8")]
			[Address(RVA = "0x28BE43C", Offset = "0x28BE43C", VA = "0x28BE43C")]
			public void StoreLocalState()
			{
			}
		}

		[Token(Token = "0x2000224")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D5654", Offset = "0x15D5654")]
		private sealed class <DisableRagdollSmooth>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000E4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000E4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RagdollUtility <>4__this;

			[Token(Token = "0x170001B2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000DFC")]
				[Address(RVA = "0x28BEAEC", Offset = "0x28BEAEC", VA = "0x28BEAEC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001B3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000DFE")]
				[Address(RVA = "0x28BEB54", Offset = "0x28BEB54", VA = "0x28BEB54", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000DF9")]
			[Address(RVA = "0x28BD8A0", Offset = "0x28BD8A0", VA = "0x28BD8A0")]
			[DebuggerHidden]
			public <DisableRagdollSmooth>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x6000DFA")]
			[Address(RVA = "0x28BE884", Offset = "0x28BE884", VA = "0x28BE884", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000DFB")]
			[Address(RVA = "0x28BE888", Offset = "0x28BE888", VA = "0x28BE888", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000DFD")]
			[Address(RVA = "0x28BEAF4", Offset = "0x28BEAF4", VA = "0x28BEAF4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D8D9C", Offset = "0x15D8D9C")]
		public IK ik;

		[Token(Token = "0x4000504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D8DD4", Offset = "0x15D8DD4")]
		public float ragdollToAnimationTime;

		[Token(Token = "0x4000505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D8E0C", Offset = "0x15D8E0C")]
		public bool applyIkOnRagdoll;

		[Token(Token = "0x4000506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D8E44", Offset = "0x15D8E44")]
		public float applyVelocity;

		[Token(Token = "0x4000507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D8E7C", Offset = "0x15D8E7C")]
		public float applyAngularVelocity;

		[Token(Token = "0x4000508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Animator animator;

		[Token(Token = "0x4000509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbone[] rigidbones;

		[Token(Token = "0x400050A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Child[] children;

		[Token(Token = "0x400050B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool enableRagdollFlag;

		[Token(Token = "0x400050C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private AnimatorUpdateMode animatorUpdateMode;

		[Token(Token = "0x400050D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IK[] allIKComponents;

		[Token(Token = "0x400050E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool[] fixTransforms;

		[Token(Token = "0x400050F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float ragdollWeight;

		[Token(Token = "0x4000510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float ragdollWeightV;

		[Token(Token = "0x4000511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool fixedFrame;

		[Token(Token = "0x4000512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool[] disabledIKComponents;

		[Token(Token = "0x170000CD")]
		private bool isRagdoll
		{
			[Token(Token = "0x6000611")]
			[Address(RVA = "0x28BD090", Offset = "0x28BD090", VA = "0x28BD090")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000CE")]
		private bool ikUsed
		{
			[Token(Token = "0x6000613")]
			[Address(RVA = "0x28BDC8C", Offset = "0x28BDC8C", VA = "0x28BDC8C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000606")]
		[Address(RVA = "0x28BD058", Offset = "0x28BD058", VA = "0x28BD058")]
		public void EnableRagdoll()
		{
		}

		[Token(Token = "0x6000607")]
		[Address(RVA = "0x28BD108", Offset = "0x28BD108", VA = "0x28BD108")]
		public void DisableRagdoll()
		{
		}

		[Token(Token = "0x6000608")]
		[Address(RVA = "0x28BD244", Offset = "0x28BD244", VA = "0x28BD244")]
		public void Start()
		{
		}

		[Token(Token = "0x6000609")]
		[Address(RVA = "0x28BD1C8", Offset = "0x28BD1C8", VA = "0x28BD1C8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x15E44C8", Offset = "0x15E44C8")]
		private IEnumerator DisableRagdollSmooth()
		{
			return null;
		}

		[Token(Token = "0x600060A")]
		[Address(RVA = "0x28BD8CC", Offset = "0x28BD8CC", VA = "0x28BD8CC")]
		private void Update()
		{
		}

		[Token(Token = "0x600060B")]
		[Address(RVA = "0x28BDB18", Offset = "0x28BDB18", VA = "0x28BDB18")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600060C")]
		[Address(RVA = "0x28BDBD0", Offset = "0x28BDBD0", VA = "0x28BDBD0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600060D")]
		[Address(RVA = "0x28BDE10", Offset = "0x28BDE10", VA = "0x28BDE10")]
		private void AfterLastIK()
		{
		}

		[Token(Token = "0x600060E")]
		[Address(RVA = "0x28BDC50", Offset = "0x28BDC50", VA = "0x28BDC50")]
		private void AfterAnimation()
		{
		}

		[Token(Token = "0x600060F")]
		[Address(RVA = "0x28BDDCC", Offset = "0x28BDDCC", VA = "0x28BDDCC")]
		private void OnFinalPose()
		{
		}

		[Token(Token = "0x6000610")]
		[Address(RVA = "0x28BDEAC", Offset = "0x28BDEAC", VA = "0x28BDEAC")]
		private void RagdollEnabler()
		{
		}

		[Token(Token = "0x6000612")]
		[Address(RVA = "0x28BDE44", Offset = "0x28BDE44", VA = "0x28BDE44")]
		private void RecordVelocities()
		{
		}

		[Token(Token = "0x6000614")]
		[Address(RVA = "0x28BD160", Offset = "0x28BD160", VA = "0x28BD160")]
		private void StoreLocalState()
		{
		}

		[Token(Token = "0x6000615")]
		[Address(RVA = "0x28BDB58", Offset = "0x28BDB58", VA = "0x28BDB58")]
		private void FixTransforms(float weight)
		{
		}

		[Token(Token = "0x6000616")]
		[Address(RVA = "0x28BE654", Offset = "0x28BE654", VA = "0x28BE654")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000617")]
		[Address(RVA = "0x28BE77C", Offset = "0x28BE77C", VA = "0x28BE77C")]
		public RagdollUtility()
		{
		}
	}
	[Token(Token = "0x200009A")]
	public abstract class RotationLimit : MonoBehaviour
	{
		[Token(Token = "0x4000513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 axis;

		[Token(Token = "0x4000514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[HideInInspector]
		public Quaternion defaultLocalRotation;

		[Token(Token = "0x4000515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D8EC4", Offset = "0x15D8EC4")]
		private bool <defaultLocalRotationOverride>k__BackingField;

		[Token(Token = "0x4000516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		private bool initiated;

		[Token(Token = "0x4000517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
		private bool applicationQuit;

		[Token(Token = "0x4000518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x37")]
		private bool defaultLocalRotationSet;

		[Token(Token = "0x170000CF")]
		public Vector3 secondaryAxis
		{
			[Token(Token = "0x600061D")]
			[Address(RVA = "0x28C0438", Offset = "0x28C0438", VA = "0x28C0438")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000D0")]
		public Vector3 crossAxis
		{
			[Token(Token = "0x600061E")]
			[Address(RVA = "0x28C0474", Offset = "0x28C0474", VA = "0x28C0474")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000D1")]
		public bool defaultLocalRotationOverride
		{
			[Token(Token = "0x600061F")]
			[Address(RVA = "0x28C0544", Offset = "0x28C0544", VA = "0x28C0544")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E452C", Offset = "0x15E452C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000620")]
			[Address(RVA = "0x28C054C", Offset = "0x28C054C", VA = "0x28C054C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E453C", Offset = "0x15E453C")]
			private set
			{
			}
		}

		[Token(Token = "0x6000618")]
		[Address(RVA = "0x28C009C", Offset = "0x28C009C", VA = "0x28C009C")]
		public void SetDefaultLocalRotation()
		{
		}

		[Token(Token = "0x6000619")]
		[Address(RVA = "0x28C00E4", Offset = "0x28C00E4", VA = "0x28C00E4")]
		public void SetDefaultLocalRotation(Quaternion localRotation)
		{
		}

		[Token(Token = "0x600061A")]
		[Address(RVA = "0x28C00FC", Offset = "0x28C00FC", VA = "0x28C00FC")]
		public Quaternion GetLimitedLocalRotation(Quaternion localRotation, out bool changed)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600061B")]
		[Address(RVA = "0x28C0390", Offset = "0x28C0390", VA = "0x28C0390")]
		public bool Apply()
		{
			return default(bool);
		}

		[Token(Token = "0x600061C")]
		[Address(RVA = "0x28C0400", Offset = "0x28C0400", VA = "0x28C0400")]
		public void Disable()
		{
		}

		[Token(Token = "0x6000621")]
		protected abstract Quaternion LimitRotation(Quaternion rotation);

		[Token(Token = "0x6000622")]
		[Address(RVA = "0x28C02A0", Offset = "0x28C02A0", VA = "0x28C02A0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000623")]
		[Address(RVA = "0x28C0558", Offset = "0x28C0558", VA = "0x28C0558")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000624")]
		[Address(RVA = "0x28C055C", Offset = "0x28C055C", VA = "0x28C055C")]
		public void LogWarning(string message)
		{
		}

		[Token(Token = "0x6000625")]
		[Address(RVA = "0x28C0590", Offset = "0x28C0590", VA = "0x28C0590")]
		protected static Quaternion Limit1DOF(Quaternion rotation, Vector3 axis)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000626")]
		[Address(RVA = "0x28C0674", Offset = "0x28C0674", VA = "0x28C0674")]
		protected static Quaternion LimitTwist(Quaternion rotation, Vector3 axis, Vector3 orthoAxis, float twistLimit)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000627")]
		[Address(RVA = "0x28C08F0", Offset = "0x28C08F0", VA = "0x28C08F0")]
		protected static float GetOrthogonalAngle(Vector3 v1, Vector3 v2, Vector3 normal)
		{
			return default(float);
		}

		[Token(Token = "0x6000628")]
		[Address(RVA = "0x28C09AC", Offset = "0x28C09AC", VA = "0x28C09AC")]
		protected RotationLimit()
		{
		}
	}
	[Token(Token = "0x200009B")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x15D4980", Offset = "0x15D4980")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x15D4980", Offset = "0x15D4980")]
	public class RotationLimitAngle : RotationLimit
	{
		[Token(Token = "0x4000519")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D8ED4", Offset = "0x15D8ED4")]
		public float limit;

		[Token(Token = "0x400051A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D8EF0", Offset = "0x15D8EF0")]
		public float twistLimit;

		[Token(Token = "0x6000629")]
		[Address(RVA = "0x28C0A24", Offset = "0x28C0A24", VA = "0x28C0A24")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E454C", Offset = "0x15E454C")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x600062A")]
		[Address(RVA = "0x28C0A70", Offset = "0x28C0A70", VA = "0x28C0A70")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E4584", Offset = "0x15E4584")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x600062B")]
		[Address(RVA = "0x28C0ABC", Offset = "0x28C0ABC", VA = "0x28C0ABC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E45BC", Offset = "0x15E45BC")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x600062C")]
		[Address(RVA = "0x28C0B08", Offset = "0x28C0B08", VA = "0x28C0B08")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E45F4", Offset = "0x15E45F4")]
		private void ASThread()
		{
		}

		[Token(Token = "0x600062D")]
		[Address(RVA = "0x28C0B54", Offset = "0x28C0B54", VA = "0x28C0B54", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600062E")]
		[Address(RVA = "0x28C0C0C", Offset = "0x28C0C0C", VA = "0x28C0C0C")]
		private Quaternion LimitSwing(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600062F")]
		[Address(RVA = "0x28C0E54", Offset = "0x28C0E54", VA = "0x28C0E54")]
		public RotationLimitAngle()
		{
		}
	}
	[Token(Token = "0x200009C")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x15D49E0", Offset = "0x15D49E0")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x15D49E0", Offset = "0x15D49E0")]
	public class RotationLimitHinge : RotationLimit
	{
		[Token(Token = "0x400051B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool useLimits;

		[Token(Token = "0x400051C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float min;

		[Token(Token = "0x400051D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float max;

		[Token(Token = "0x400051E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[HideInInspector]
		public float zeroAxisDisplayOffset;

		[Token(Token = "0x400051F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Quaternion lastRotation;

		[Token(Token = "0x4000520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float lastAngle;

		[Token(Token = "0x6000630")]
		[Address(RVA = "0x28C0E64", Offset = "0x28C0E64", VA = "0x28C0E64")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E462C", Offset = "0x15E462C")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000631")]
		[Address(RVA = "0x28C0EB0", Offset = "0x28C0EB0", VA = "0x28C0EB0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E4664", Offset = "0x15E4664")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000632")]
		[Address(RVA = "0x28C0EFC", Offset = "0x28C0EFC", VA = "0x28C0EFC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E469C", Offset = "0x15E469C")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000633")]
		[Address(RVA = "0x28C0F48", Offset = "0x28C0F48", VA = "0x28C0F48")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E46D4", Offset = "0x15E46D4")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000634")]
		[Address(RVA = "0x28C0F94", Offset = "0x28C0F94", VA = "0x28C0F94", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000635")]
		[Address(RVA = "0x28C0FBC", Offset = "0x28C0FBC", VA = "0x28C0FBC")]
		private Quaternion LimitHinge(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000636")]
		[Address(RVA = "0x28C12BC", Offset = "0x28C12BC", VA = "0x28C12BC")]
		public RotationLimitHinge()
		{
		}
	}
	[Token(Token = "0x200009D")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x15D4A40", Offset = "0x15D4A40")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x15D4A40", Offset = "0x15D4A40")]
	public class RotationLimitPolygonal : RotationLimit
	{
		[Serializable]
		[Token(Token = "0x2000225")]
		public class ReachCone
		{
			[Token(Token = "0x4000E50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3[] tetrahedron;

			[Token(Token = "0x4000E51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float volume;

			[Token(Token = "0x4000E52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 S;

			[Token(Token = "0x4000E53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 B;

			[Token(Token = "0x170001B4")]
			public Vector3 o
			{
				[Token(Token = "0x6000DFF")]
				[Address(RVA = "0x28C3354", Offset = "0x28C3354", VA = "0x28C3354")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170001B5")]
			public Vector3 a
			{
				[Token(Token = "0x6000E00")]
				[Address(RVA = "0x28C338C", Offset = "0x28C338C", VA = "0x28C338C")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170001B6")]
			public Vector3 b
			{
				[Token(Token = "0x6000E01")]
				[Address(RVA = "0x28C33C8", Offset = "0x28C33C8", VA = "0x28C33C8")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170001B7")]
			public Vector3 c
			{
				[Token(Token = "0x6000E02")]
				[Address(RVA = "0x28C3404", Offset = "0x28C3404", VA = "0x28C3404")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170001B8")]
			public bool isValid
			{
				[Token(Token = "0x6000E04")]
				[Address(RVA = "0x28C2498", Offset = "0x28C2498", VA = "0x28C2498")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6000E03")]
			[Address(RVA = "0x28C2AE4", Offset = "0x28C2AE4", VA = "0x28C2AE4")]
			public ReachCone(Vector3 _o, Vector3 _a, Vector3 _b, Vector3 _c)
			{
			}

			[Token(Token = "0x6000E05")]
			[Address(RVA = "0x28C2C58", Offset = "0x28C2C58", VA = "0x28C2C58")]
			public void Calculate()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000226")]
		public class LimitPoint
		{
			[Token(Token = "0x4000E54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 point;

			[Token(Token = "0x4000E55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float tangentWeight;

			[Token(Token = "0x6000E06")]
			[Address(RVA = "0x28C24A8", Offset = "0x28C24A8", VA = "0x28C24A8")]
			public LimitPoint()
			{
			}
		}

		[Token(Token = "0x4000521")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D8F1C", Offset = "0x15D8F1C")]
		public float twistLimit;

		[Token(Token = "0x4000522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D8F38", Offset = "0x15D8F38")]
		public int smoothIterations;

		[Token(Token = "0x4000523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[HideInInspector]
		public LimitPoint[] points;

		[Token(Token = "0x4000524")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[HideInInspector]
		public Vector3[] P;

		[Token(Token = "0x4000525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[HideInInspector]
		public ReachCone[] reachCones;

		[Token(Token = "0x6000637")]
		[Address(RVA = "0x28C1344", Offset = "0x28C1344", VA = "0x28C1344")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E470C", Offset = "0x15E470C")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000638")]
		[Address(RVA = "0x28C1390", Offset = "0x28C1390", VA = "0x28C1390")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E4744", Offset = "0x15E4744")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000639")]
		[Address(RVA = "0x28C13DC", Offset = "0x28C13DC", VA = "0x28C13DC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E477C", Offset = "0x15E477C")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x600063A")]
		[Address(RVA = "0x28C1428", Offset = "0x28C1428", VA = "0x28C1428")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E47B4", Offset = "0x15E47B4")]
		private void ASThread()
		{
		}

		[Token(Token = "0x600063B")]
		[Address(RVA = "0x28C1474", Offset = "0x28C1474", VA = "0x28C1474")]
		public void SetLimitPoints(LimitPoint[] points)
		{
		}

		[Token(Token = "0x600063C")]
		[Address(RVA = "0x28C19B8", Offset = "0x28C19B8", VA = "0x28C19B8", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600063D")]
		[Address(RVA = "0x28C1AB0", Offset = "0x28C1AB0", VA = "0x28C1AB0")]
		private void Start()
		{
		}

		[Token(Token = "0x600063E")]
		[Address(RVA = "0x28C20B8", Offset = "0x28C20B8", VA = "0x28C20B8")]
		public void ResetToDefault()
		{
		}

		[Token(Token = "0x600063F")]
		[Address(RVA = "0x28C1520", Offset = "0x28C1520", VA = "0x28C1520")]
		public void BuildReachCones()
		{
		}

		[Token(Token = "0x6000640")]
		[Address(RVA = "0x28C252C", Offset = "0x28C252C", VA = "0x28C252C")]
		private Vector3[] SmoothPoints()
		{
			return null;
		}

		[Token(Token = "0x6000641")]
		[Address(RVA = "0x28C2E18", Offset = "0x28C2E18", VA = "0x28C2E18")]
		private float GetScalar(int k)
		{
			return default(float);
		}

		[Token(Token = "0x6000642")]
		[Address(RVA = "0x28C2E5C", Offset = "0x28C2E5C", VA = "0x28C2E5C")]
		private Vector3 PointToTangentPlane(Vector3 p, float r)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000643")]
		[Address(RVA = "0x28C2FA4", Offset = "0x28C2FA4", VA = "0x28C2FA4")]
		private Vector3 TangentPointToSphere(Vector3 q, float r)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000644")]
		[Address(RVA = "0x28C1D7C", Offset = "0x28C1D7C", VA = "0x28C1D7C")]
		private Quaternion LimitSwing(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000645")]
		[Address(RVA = "0x28C3134", Offset = "0x28C3134", VA = "0x28C3134")]
		private int GetReachCone(Vector3 L)
		{
			return default(int);
		}

		[Token(Token = "0x6000646")]
		[Address(RVA = "0x28C32E4", Offset = "0x28C32E4", VA = "0x28C32E4")]
		public RotationLimitPolygonal()
		{
		}
	}
	[Token(Token = "0x200009E")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x15D4AA0", Offset = "0x15D4AA0")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x15D4AA0", Offset = "0x15D4AA0")]
	public class RotationLimitSpline : RotationLimit
	{
		[Token(Token = "0x4000526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D8FF8", Offset = "0x15D8FF8")]
		public float twistLimit;

		[Token(Token = "0x4000527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[HideInInspector]
		public AnimationCurve spline;

		[Token(Token = "0x6000647")]
		[Address(RVA = "0x28C3440", Offset = "0x28C3440", VA = "0x28C3440")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E47EC", Offset = "0x15E47EC")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000648")]
		[Address(RVA = "0x28C348C", Offset = "0x28C348C", VA = "0x28C348C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E4824", Offset = "0x15E4824")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000649")]
		[Address(RVA = "0x28C34D8", Offset = "0x28C34D8", VA = "0x28C34D8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E485C", Offset = "0x15E485C")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x600064A")]
		[Address(RVA = "0x28C3524", Offset = "0x28C3524", VA = "0x28C3524")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x15E4894", Offset = "0x15E4894")]
		private void ASThread()
		{
		}

		[Token(Token = "0x600064B")]
		[Address(RVA = "0x28C3570", Offset = "0x28C3570", VA = "0x28C3570")]
		public void SetSpline(Keyframe[] keyframes)
		{
		}

		[Token(Token = "0x600064C")]
		[Address(RVA = "0x28C358C", Offset = "0x28C358C", VA = "0x28C358C", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600064D")]
		[Address(RVA = "0x28C3644", Offset = "0x28C3644", VA = "0x28C3644")]
		public Quaternion LimitSwing(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600064E")]
		[Address(RVA = "0x28C3970", Offset = "0x28C3970", VA = "0x28C3970")]
		public RotationLimitSpline()
		{
		}
	}
	[Token(Token = "0x200009F")]
	public class AimController : MonoBehaviour
	{
		[Token(Token = "0x2000227")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D5664", Offset = "0x15D5664")]
		private sealed class <TurnToTarget>d__33 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000E57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000E58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AimController <>4__this;

			[Token(Token = "0x170001B9")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E0A")]
				[Address(RVA = "0x2367E1C", Offset = "0x2367E1C", VA = "0x2367E1C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001BA")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E0C")]
				[Address(RVA = "0x2367E84", Offset = "0x2367E84", VA = "0x2367E84", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E07")]
			[Address(RVA = "0x2367BEC", Offset = "0x2367BEC", VA = "0x2367BEC")]
			[DebuggerHidden]
			public <TurnToTarget>d__33(int <>1__state)
			{
			}

			[Token(Token = "0x6000E08")]
			[Address(RVA = "0x2367CEC", Offset = "0x2367CEC", VA = "0x2367CEC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E09")]
			[Address(RVA = "0x2367CF0", Offset = "0x2367CF0", VA = "0x2367CF0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E0B")]
			[Address(RVA = "0x2367E24", Offset = "0x2367E24", VA = "0x2367E24", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D904C", Offset = "0x15D904C")]
		public AimIK ik;

		[Token(Token = "0x4000529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D9084", Offset = "0x15D9084")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D9084", Offset = "0x15D9084")]
		public float weight;

		[Token(Token = "0x400052A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x15D90D8", Offset = "0x15D90D8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D90D8", Offset = "0x15D90D8")]
		public Transform target;

		[Token(Token = "0x400052B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D9138", Offset = "0x15D9138")]
		public float targetSwitchSmoothTime;

		[Token(Token = "0x400052C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D9170", Offset = "0x15D9170")]
		public float weightSmoothTime;

		[Token(Token = "0x400052D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x15D91A8", Offset = "0x15D91A8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D91A8", Offset = "0x15D91A8")]
		public bool smoothTurnTowardsTarget;

		[Token(Token = "0x400052E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D9208", Offset = "0x15D9208")]
		public float maxRadiansDelta;

		[Token(Token = "0x400052F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D9240", Offset = "0x15D9240")]
		public float maxMagnitudeDelta;

		[Token(Token = "0x4000530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D9278", Offset = "0x15D9278")]
		public float slerpSpeed;

		[Token(Token = "0x4000531")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D92B0", Offset = "0x15D92B0")]
		public Vector3 pivotOffsetFromRoot;

		[Token(Token = "0x4000532")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D92E8", Offset = "0x15D92E8")]
		public float minDistance;

		[Token(Token = "0x4000533")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D9320", Offset = "0x15D9320")]
		public Vector3 offset;

		[Token(Token = "0x4000534")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x15D9358", Offset = "0x15D9358")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D9358", Offset = "0x15D9358")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D9358", Offset = "0x15D9358")]
		public float maxRootAngle;

		[Token(Token = "0x4000535")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D93D4", Offset = "0x15D93D4")]
		public bool turnToTarget;

		[Token(Token = "0x4000536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D940C", Offset = "0x15D940C")]
		public float turnToTargetTime;

		[Token(Token = "0x4000537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x15D9444", Offset = "0x15D9444")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D9444", Offset = "0x15D9444")]
		public bool useAnimatedAimDirection;

		[Token(Token = "0x4000538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D94A4", Offset = "0x15D94A4")]
		public Vector3 animatedAimDirection;

		[Token(Token = "0x4000539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Transform lastTarget;

		[Token(Token = "0x400053A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float switchWeight;

		[Token(Token = "0x400053B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float switchWeightV;

		[Token(Token = "0x400053C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float weightV;

		[Token(Token = "0x400053D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Vector3 lastPosition;

		[Token(Token = "0x400053E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3 dir;

		[Token(Token = "0x400053F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private bool lastSmoothTowardsTarget;

		[Token(Token = "0x4000540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAD")]
		private bool turningToTarget;

		[Token(Token = "0x4000541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float turnToTargetMlp;

		[Token(Token = "0x4000542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float turnToTargetMlpV;

		[Token(Token = "0x170000D2")]
		private Vector3 pivot
		{
			[Token(Token = "0x6000651")]
			[Address(RVA = "0x2366DD4", Offset = "0x2366DD4", VA = "0x2366DD4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x600064F")]
		[Address(RVA = "0x2366CD4", Offset = "0x2366CD4", VA = "0x2366CD4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000650")]
		[Address(RVA = "0x2366F20", Offset = "0x2366F20", VA = "0x2366F20")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000652")]
		[Address(RVA = "0x2367664", Offset = "0x2367664", VA = "0x2367664")]
		private void ApplyMinDistance()
		{
		}

		[Token(Token = "0x6000653")]
		[Address(RVA = "0x2367800", Offset = "0x2367800", VA = "0x2367800")]
		private void RootRotation()
		{
		}

		[Token(Token = "0x6000654")]
		[Address(RVA = "0x2367B70", Offset = "0x2367B70", VA = "0x2367B70")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x15E48CC", Offset = "0x15E48CC")]
		private IEnumerator TurnToTarget()
		{
			return null;
		}

		[Token(Token = "0x6000655")]
		[Address(RVA = "0x2367C18", Offset = "0x2367C18", VA = "0x2367C18")]
		public AimController()
		{
		}
	}
	[Token(Token = "0x20000A0")]
	public class AimPoser : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000228")]
		public class Pose
		{
			[Token(Token = "0x4000E59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool visualize;

			[Token(Token = "0x4000E5A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string name;

			[Token(Token = "0x4000E5B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 direction;

			[Token(Token = "0x4000E5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float yaw;

			[Token(Token = "0x4000E5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float pitch;

			[Token(Token = "0x4000E5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float angleBuffer;

			[Token(Token = "0x6000E0D")]
			[Address(RVA = "0x2368084", Offset = "0x2368084", VA = "0x2368084")]
			public bool IsInDirection(Vector3 d)
			{
				return default(bool);
			}

			[Token(Token = "0x6000E0E")]
			[Address(RVA = "0x2368390", Offset = "0x2368390", VA = "0x2368390")]
			public void SetAngleBuffer(float value)
			{
			}

			[Token(Token = "0x6000E0F")]
			[Address(RVA = "0x2368398", Offset = "0x2368398", VA = "0x2368398")]
			public Pose()
			{
			}
		}

		[Token(Token = "0x4000543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float angleBuffer;

		[Token(Token = "0x4000544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Pose[] poses;

		[Token(Token = "0x6000656")]
		[Address(RVA = "0x23626DC", Offset = "0x23626DC", VA = "0x23626DC")]
		public Pose GetPose(Vector3 localDirection)
		{
			return null;
		}

		[Token(Token = "0x6000657")]
		[Address(RVA = "0x23627B8", Offset = "0x23627B8", VA = "0x23627B8")]
		public void SetPoseActive(Pose pose)
		{
		}

		[Token(Token = "0x6000658")]
		[Address(RVA = "0x236831C", Offset = "0x236831C", VA = "0x236831C")]
		public AimPoser()
		{
		}
	}
	[Token(Token = "0x20000A1")]
	public class Amplifier : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x2000229")]
		public class Body
		{
			[Serializable]
			[Token(Token = "0x200028C")]
			public class EffectorLink
			{
				[Token(Token = "0x4001067")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E2318", Offset = "0x15E2318")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x4001068")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E2350", Offset = "0x15E2350")]
				public float weight;

				[Token(Token = "0x6000F1C")]
				[Address(RVA = "0x2368988", Offset = "0x2368988", VA = "0x2368988")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4000E5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E1058", Offset = "0x15E1058")]
			public Transform transform;

			[Token(Token = "0x4000E60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E1090", Offset = "0x15E1090")]
			public Transform relativeTo;

			[Token(Token = "0x4000E61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E10C8", Offset = "0x15E10C8")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x4000E62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E1100", Offset = "0x15E1100")]
			public float verticalWeight;

			[Token(Token = "0x4000E63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E1138", Offset = "0x15E1138")]
			public float horizontalWeight;

			[Token(Token = "0x4000E64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E1170", Offset = "0x15E1170")]
			public float speed;

			[Token(Token = "0x4000E65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private Vector3 lastRelativePos;

			[Token(Token = "0x4000E66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Vector3 smoothDelta;

			[Token(Token = "0x4000E67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private bool firstUpdate;

			[Token(Token = "0x6000E10")]
			[Address(RVA = "0x23684F4", Offset = "0x23684F4", VA = "0x23684F4")]
			public void Update(IKSolverFullBodyBiped solver, float w, float deltaTime)
			{
			}

			[Token(Token = "0x6000E11")]
			[Address(RVA = "0x2368960", Offset = "0x2368960", VA = "0x2368960")]
			private static Vector3 Multiply(Vector3 v1, Vector3 v2)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000E12")]
			[Address(RVA = "0x2368970", Offset = "0x2368970", VA = "0x2368970")]
			public Body()
			{
			}
		}

		[Token(Token = "0x4000545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D94DC", Offset = "0x15D94DC")]
		public Body[] bodies;

		[Token(Token = "0x6000659")]
		[Address(RVA = "0x23683B4", Offset = "0x23683B4", VA = "0x23683B4", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x600065A")]
		[Address(RVA = "0x2368958", Offset = "0x2368958", VA = "0x2368958")]
		public Amplifier()
		{
		}
	}
	[Token(Token = "0x20000A2")]
	public class BodyTilt : OffsetModifier
	{
		[Token(Token = "0x4000546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D9514", Offset = "0x15D9514")]
		public float tiltSpeed;

		[Token(Token = "0x4000547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D954C", Offset = "0x15D954C")]
		public float tiltSensitivity;

		[Token(Token = "0x4000548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D9584", Offset = "0x15D9584")]
		public OffsetPose poseLeft;

		[Token(Token = "0x4000549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D95BC", Offset = "0x15D95BC")]
		public OffsetPose poseRight;

		[Token(Token = "0x400054A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float tiltAngle;

		[Token(Token = "0x400054B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 lastForward;

		[Token(Token = "0x600065B")]
		[Address(RVA = "0x2369FC8", Offset = "0x2369FC8", VA = "0x2369FC8", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x600065C")]
		[Address(RVA = "0x236A010", Offset = "0x236A010", VA = "0x236A010", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x600065D")]
		[Address(RVA = "0x236A240", Offset = "0x236A240", VA = "0x236A240")]
		public BodyTilt()
		{
		}
	}
	[Token(Token = "0x20000A3")]
	[ExecuteInEditMode]
	public class EditorIK : MonoBehaviour
	{
		[Token(Token = "0x400054C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IK ik;

		[Token(Token = "0x600065E")]
		[Address(RVA = "0x236ACD4", Offset = "0x236ACD4", VA = "0x236ACD4")]
		private void Start()
		{
		}

		[Token(Token = "0x600065F")]
		[Address(RVA = "0x236AD7C", Offset = "0x236AD7C", VA = "0x236AD7C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000660")]
		[Address(RVA = "0x236AE4C", Offset = "0x236AE4C", VA = "0x236AE4C")]
		public EditorIK()
		{
		}
	}
	[Token(Token = "0x20000A4")]
	public class HitReaction : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x200022A")]
		public abstract class HitPoint
		{
			[Token(Token = "0x4000E68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E11A8", Offset = "0x15E11A8")]
			public string name;

			[Token(Token = "0x4000E69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E11E0", Offset = "0x15E11E0")]
			public Collider collider;

			[Token(Token = "0x4000E6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E1218", Offset = "0x15E1218")]
			[SerializeField]
			private float crossFadeTime;

			[Token(Token = "0x4000E6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E1264", Offset = "0x15E1264")]
			private float <crossFader>k__BackingField;

			[Token(Token = "0x4000E6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E1274", Offset = "0x15E1274")]
			private float <timer>k__BackingField;

			[Token(Token = "0x4000E6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E1284", Offset = "0x15E1284")]
			private Vector3 <force>k__BackingField;

			[Token(Token = "0x4000E6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E1294", Offset = "0x15E1294")]
			private Vector3 <point>k__BackingField;

			[Token(Token = "0x4000E6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private float length;

			[Token(Token = "0x4000E70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float crossFadeSpeed;

			[Token(Token = "0x4000E71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private float lastTime;

			[Token(Token = "0x170001BB")]
			public bool inProgress
			{
				[Token(Token = "0x6000E13")]
				[Address(RVA = "0x2F699F0", Offset = "0x2F699F0", VA = "0x2F699F0")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170001BC")]
			protected float crossFader
			{
				[Token(Token = "0x6000E14")]
				[Address(RVA = "0x2F69F98", Offset = "0x2F69F98", VA = "0x2F69F98")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5F14", Offset = "0x15E5F14")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000E15")]
				[Address(RVA = "0x2F69FA0", Offset = "0x2F69FA0", VA = "0x2F69FA0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5F24", Offset = "0x15E5F24")]
				private set
				{
				}
			}

			[Token(Token = "0x170001BD")]
			protected float timer
			{
				[Token(Token = "0x6000E16")]
				[Address(RVA = "0x2F69FA8", Offset = "0x2F69FA8", VA = "0x2F69FA8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5F34", Offset = "0x15E5F34")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000E17")]
				[Address(RVA = "0x2F69FB0", Offset = "0x2F69FB0", VA = "0x2F69FB0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5F44", Offset = "0x15E5F44")]
				private set
				{
				}
			}

			[Token(Token = "0x170001BE")]
			protected Vector3 force
			{
				[Token(Token = "0x6000E18")]
				[Address(RVA = "0x2F69FB8", Offset = "0x2F69FB8", VA = "0x2F69FB8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5F54", Offset = "0x15E5F54")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000E19")]
				[Address(RVA = "0x2F69FC4", Offset = "0x2F69FC4", VA = "0x2F69FC4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5F64", Offset = "0x15E5F64")]
				private set
				{
				}
			}

			[Token(Token = "0x170001BF")]
			protected Vector3 point
			{
				[Token(Token = "0x6000E1A")]
				[Address(RVA = "0x2F69FD0", Offset = "0x2F69FD0", VA = "0x2F69FD0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5F74", Offset = "0x15E5F74")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000E1B")]
				[Address(RVA = "0x2F69FDC", Offset = "0x2F69FDC", VA = "0x2F69FDC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5F84", Offset = "0x15E5F84")]
				private set
				{
				}
			}

			[Token(Token = "0x6000E1C")]
			[Address(RVA = "0x2F69E64", Offset = "0x2F69E64", VA = "0x2F69E64")]
			public void Hit(Vector3 force, Vector3 point)
			{
			}

			[Token(Token = "0x6000E1D")]
			[Address(RVA = "0x2F69AD8", Offset = "0x2F69AD8", VA = "0x2F69AD8")]
			public void Apply(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x6000E1E")]
			protected abstract float GetLength();

			[Token(Token = "0x6000E1F")]
			protected abstract void CrossFadeStart();

			[Token(Token = "0x6000E20")]
			protected abstract void OnApply(IKSolverFullBodyBiped solver, float weight);

			[Token(Token = "0x6000E21")]
			[Address(RVA = "0x2F69FE8", Offset = "0x2F69FE8", VA = "0x2F69FE8")]
			protected HitPoint()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200022B")]
		public class HitPointEffector : HitPoint
		{
			[Serializable]
			[Token(Token = "0x200028D")]
			public class EffectorLink
			{
				[Token(Token = "0x4001069")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E2388", Offset = "0x15E2388")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x400106A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E23C0", Offset = "0x15E23C0")]
				public float weight;

				[Token(Token = "0x400106B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private Vector3 lastValue;

				[Token(Token = "0x400106C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
				private Vector3 current;

				[Token(Token = "0x6000F1D")]
				[Address(RVA = "0x2F6A964", Offset = "0x2F6A964", VA = "0x2F6A964")]
				public void Apply(IKSolverFullBodyBiped solver, Vector3 offset, float crossFader)
				{
				}

				[Token(Token = "0x6000F1E")]
				[Address(RVA = "0x2F6A758", Offset = "0x2F6A758", VA = "0x2F6A758")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x6000F1F")]
				[Address(RVA = "0x2F6AAA0", Offset = "0x2F6AAA0", VA = "0x2F6AAA0")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4000E72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E12A4", Offset = "0x15E12A4")]
			public AnimationCurve offsetInForceDirection;

			[Token(Token = "0x4000E73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E12DC", Offset = "0x15E12DC")]
			public AnimationCurve offsetInUpDirection;

			[Token(Token = "0x4000E74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E1314", Offset = "0x15E1314")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x6000E22")]
			[Address(RVA = "0x2F6A574", Offset = "0x2F6A574", VA = "0x2F6A574", Slot = "4")]
			protected override float GetLength()
			{
				return default(float);
			}

			[Token(Token = "0x6000E23")]
			[Address(RVA = "0x2F6A6EC", Offset = "0x2F6A6EC", VA = "0x2F6A6EC", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x6000E24")]
			[Address(RVA = "0x2F6A76C", Offset = "0x2F6A76C", VA = "0x2F6A76C", Slot = "6")]
			protected override void OnApply(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x6000E25")]
			[Address(RVA = "0x2F6AA8C", Offset = "0x2F6AA8C", VA = "0x2F6AA8C")]
			public HitPointEffector()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200022C")]
		public class HitPointBone : HitPoint
		{
			[Serializable]
			[Token(Token = "0x200028E")]
			public class BoneLink
			{
				[Token(Token = "0x400106D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E23F8", Offset = "0x15E23F8")]
				public Transform bone;

				[Token(Token = "0x400106E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E2430", Offset = "0x15E2430")]
				[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15E2430", Offset = "0x15E2430")]
				public float weight;

				[Token(Token = "0x400106F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
				private Quaternion lastValue;

				[Token(Token = "0x4001070")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
				private Quaternion current;

				[Token(Token = "0x6000F20")]
				[Address(RVA = "0x2F6A37C", Offset = "0x2F6A37C", VA = "0x2F6A37C")]
				public void Apply(IKSolverFullBodyBiped solver, Quaternion offset, float crossFader)
				{
				}

				[Token(Token = "0x6000F21")]
				[Address(RVA = "0x2F6A104", Offset = "0x2F6A104", VA = "0x2F6A104")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x6000F22")]
				[Address(RVA = "0x2F6A4EC", Offset = "0x2F6A4EC", VA = "0x2F6A4EC")]
				public BoneLink()
				{
				}
			}

			[Token(Token = "0x4000E75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E134C", Offset = "0x15E134C")]
			public AnimationCurve aroundCenterOfMass;

			[Token(Token = "0x4000E76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E1384", Offset = "0x15E1384")]
			public BoneLink[] boneLinks;

			[Token(Token = "0x4000E77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Rigidbody rigidbody;

			[Token(Token = "0x6000E26")]
			[Address(RVA = "0x2F69FFC", Offset = "0x2F69FFC", VA = "0x2F69FFC", Slot = "4")]
			protected override float GetLength()
			{
				return default(float);
			}

			[Token(Token = "0x6000E27")]
			[Address(RVA = "0x2F6A0A0", Offset = "0x2F6A0A0", VA = "0x2F6A0A0", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x6000E28")]
			[Address(RVA = "0x2F6A110", Offset = "0x2F6A110", VA = "0x2F6A110", Slot = "6")]
			protected override void OnApply(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x6000E29")]
			[Address(RVA = "0x2F6A4D8", Offset = "0x2F6A4D8", VA = "0x2F6A4D8")]
			public HitPointBone()
			{
			}
		}

		[Token(Token = "0x400054D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D95F4", Offset = "0x15D95F4")]
		public HitPointEffector[] effectorHitPoints;

		[Token(Token = "0x400054E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D962C", Offset = "0x15D962C")]
		public HitPointBone[] boneHitPoints;

		[Token(Token = "0x170000D3")]
		public bool inProgress
		{
			[Token(Token = "0x6000661")]
			[Address(RVA = "0x2F69934", Offset = "0x2F69934", VA = "0x2F69934")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000662")]
		[Address(RVA = "0x2F69A04", Offset = "0x2F69A04", VA = "0x2F69A04", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000663")]
		[Address(RVA = "0x2F69C24", Offset = "0x2F69C24", VA = "0x2F69C24")]
		public void Hit(Collider collider, Vector3 force, Vector3 point)
		{
		}

		[Token(Token = "0x6000664")]
		[Address(RVA = "0x2F69F90", Offset = "0x2F69F90", VA = "0x2F69F90")]
		public HitReaction()
		{
		}
	}
	[Token(Token = "0x20000A5")]
	public class HitReactionVRIK : OffsetModifierVRIK
	{
		[Serializable]
		[Token(Token = "0x200022D")]
		public abstract class Offset
		{
			[Token(Token = "0x4000E78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E13BC", Offset = "0x15E13BC")]
			public string name;

			[Token(Token = "0x4000E79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E13F4", Offset = "0x15E13F4")]
			public Collider collider;

			[Token(Token = "0x4000E7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E142C", Offset = "0x15E142C")]
			[SerializeField]
			private float crossFadeTime;

			[Token(Token = "0x4000E7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E1478", Offset = "0x15E1478")]
			private float <crossFader>k__BackingField;

			[Token(Token = "0x4000E7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E1488", Offset = "0x15E1488")]
			private float <timer>k__BackingField;

			[Token(Token = "0x4000E7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E1498", Offset = "0x15E1498")]
			private Vector3 <force>k__BackingField;

			[Token(Token = "0x4000E7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E14A8", Offset = "0x15E14A8")]
			private Vector3 <point>k__BackingField;

			[Token(Token = "0x4000E7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private float length;

			[Token(Token = "0x4000E80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float crossFadeSpeed;

			[Token(Token = "0x4000E81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private float lastTime;

			[Token(Token = "0x170001C0")]
			protected float crossFader
			{
				[Token(Token = "0x6000E2A")]
				[Address(RVA = "0x2F6B058", Offset = "0x2F6B058", VA = "0x2F6B058")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5F94", Offset = "0x15E5F94")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000E2B")]
				[Address(RVA = "0x2F6B060", Offset = "0x2F6B060", VA = "0x2F6B060")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5FA4", Offset = "0x15E5FA4")]
				private set
				{
				}
			}

			[Token(Token = "0x170001C1")]
			protected float timer
			{
				[Token(Token = "0x6000E2C")]
				[Address(RVA = "0x2F6B068", Offset = "0x2F6B068", VA = "0x2F6B068")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5FB4", Offset = "0x15E5FB4")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000E2D")]
				[Address(RVA = "0x2F6B070", Offset = "0x2F6B070", VA = "0x2F6B070")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5FC4", Offset = "0x15E5FC4")]
				private set
				{
				}
			}

			[Token(Token = "0x170001C2")]
			protected Vector3 force
			{
				[Token(Token = "0x6000E2E")]
				[Address(RVA = "0x2F6B078", Offset = "0x2F6B078", VA = "0x2F6B078")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5FD4", Offset = "0x15E5FD4")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000E2F")]
				[Address(RVA = "0x2F6B084", Offset = "0x2F6B084", VA = "0x2F6B084")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5FE4", Offset = "0x15E5FE4")]
				private set
				{
				}
			}

			[Token(Token = "0x170001C3")]
			protected Vector3 point
			{
				[Token(Token = "0x6000E30")]
				[Address(RVA = "0x2F6B090", Offset = "0x2F6B090", VA = "0x2F6B090")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5FF4", Offset = "0x15E5FF4")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000E31")]
				[Address(RVA = "0x2F6B09C", Offset = "0x2F6B09C", VA = "0x2F6B09C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E6004", Offset = "0x15E6004")]
				private set
				{
				}
			}

			[Token(Token = "0x6000E32")]
			[Address(RVA = "0x2F6AF10", Offset = "0x2F6AF10", VA = "0x2F6AF10")]
			public void Hit(Vector3 force, AnimationCurve[] curves, Vector3 point)
			{
			}

			[Token(Token = "0x6000E33")]
			[Address(RVA = "0x2F6AB74", Offset = "0x2F6AB74", VA = "0x2F6AB74")]
			public void Apply(VRIK ik, AnimationCurve[] curves, float weight)
			{
			}

			[Token(Token = "0x6000E34")]
			protected abstract float GetLength(AnimationCurve[] curves);

			[Token(Token = "0x6000E35")]
			protected abstract void CrossFadeStart();

			[Token(Token = "0x6000E36")]
			protected abstract void OnApply(VRIK ik, AnimationCurve[] curves, float weight);

			[Token(Token = "0x6000E37")]
			[Address(RVA = "0x2F6B0A8", Offset = "0x2F6B0A8", VA = "0x2F6B0A8")]
			protected Offset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200022E")]
		public class PositionOffset : Offset
		{
			[Serializable]
			[Token(Token = "0x200028F")]
			public class PositionOffsetLink
			{
				[Token(Token = "0x4001071")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E2484", Offset = "0x15E2484")]
				public IKSolverVR.PositionOffset positionOffset;

				[Token(Token = "0x4001072")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E24BC", Offset = "0x15E24BC")]
				public float weight;

				[Token(Token = "0x4001073")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private Vector3 lastValue;

				[Token(Token = "0x4001074")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
				private Vector3 current;

				[Token(Token = "0x6000F23")]
				[Address(RVA = "0x2F6B564", Offset = "0x2F6B564", VA = "0x2F6B564")]
				public void Apply(VRIK ik, Vector3 offset, float crossFader)
				{
				}

				[Token(Token = "0x6000F24")]
				[Address(RVA = "0x2F6B320", Offset = "0x2F6B320", VA = "0x2F6B320")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x6000F25")]
				[Address(RVA = "0x2F6B680", Offset = "0x2F6B680", VA = "0x2F6B680")]
				public PositionOffsetLink()
				{
				}
			}

			[Token(Token = "0x4000E82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E14B8", Offset = "0x15E14B8")]
			public int forceDirCurveIndex;

			[Token(Token = "0x4000E83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E14F0", Offset = "0x15E14F0")]
			public int upDirCurveIndex;

			[Token(Token = "0x4000E84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E1528", Offset = "0x15E1528")]
			public PositionOffsetLink[] offsetLinks;

			[Token(Token = "0x6000E38")]
			[Address(RVA = "0x2F6B0BC", Offset = "0x2F6B0BC", VA = "0x2F6B0BC", Slot = "4")]
			protected override float GetLength(AnimationCurve[] curves)
			{
				return default(float);
			}

			[Token(Token = "0x6000E39")]
			[Address(RVA = "0x2F6B2B4", Offset = "0x2F6B2B4", VA = "0x2F6B2B4", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x6000E3A")]
			[Address(RVA = "0x2F6B334", Offset = "0x2F6B334", VA = "0x2F6B334", Slot = "6")]
			protected override void OnApply(VRIK ik, AnimationCurve[] curves, float weight)
			{
			}

			[Token(Token = "0x6000E3B")]
			[Address(RVA = "0x2F6B664", Offset = "0x2F6B664", VA = "0x2F6B664")]
			public PositionOffset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200022F")]
		public class RotationOffset : Offset
		{
			[Serializable]
			[Token(Token = "0x2000290")]
			public class RotationOffsetLink
			{
				[Token(Token = "0x4001075")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E24F4", Offset = "0x15E24F4")]
				public IKSolverVR.RotationOffset rotationOffset;

				[Token(Token = "0x4001076")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E252C", Offset = "0x15E252C")]
				[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15E252C", Offset = "0x15E252C")]
				public float weight;

				[Token(Token = "0x4001077")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private Quaternion lastValue;

				[Token(Token = "0x4001078")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
				private Quaternion current;

				[Token(Token = "0x6000F26")]
				[Address(RVA = "0x2F6BAFC", Offset = "0x2F6BAFC", VA = "0x2F6BAFC")]
				public void Apply(VRIK ik, Quaternion offset, float crossFader)
				{
				}

				[Token(Token = "0x6000F27")]
				[Address(RVA = "0x2F6B7D0", Offset = "0x2F6B7D0", VA = "0x2F6B7D0")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x6000F28")]
				[Address(RVA = "0x2F6BC38", Offset = "0x2F6BC38", VA = "0x2F6BC38")]
				public RotationOffsetLink()
				{
				}
			}

			[Token(Token = "0x4000E85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E1560", Offset = "0x15E1560")]
			public int curveIndex;

			[Token(Token = "0x4000E86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E1598", Offset = "0x15E1598")]
			public RotationOffsetLink[] offsetLinks;

			[Token(Token = "0x4000E87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Rigidbody rigidbody;

			[Token(Token = "0x6000E3C")]
			[Address(RVA = "0x2F6B688", Offset = "0x2F6B688", VA = "0x2F6B688", Slot = "4")]
			protected override float GetLength(AnimationCurve[] curves)
			{
				return default(float);
			}

			[Token(Token = "0x6000E3D")]
			[Address(RVA = "0x2F6B76C", Offset = "0x2F6B76C", VA = "0x2F6B76C", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x6000E3E")]
			[Address(RVA = "0x2F6B7DC", Offset = "0x2F6B7DC", VA = "0x2F6B7DC", Slot = "6")]
			protected override void OnApply(VRIK ik, AnimationCurve[] curves, float weight)
			{
			}

			[Token(Token = "0x6000E3F")]
			[Address(RVA = "0x2F6BC24", Offset = "0x2F6BC24", VA = "0x2F6BC24")]
			public RotationOffset()
			{
			}
		}

		[Token(Token = "0x400054F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve[] offsetCurves;

		[Token(Token = "0x4000550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D9664", Offset = "0x15D9664")]
		public PositionOffset[] positionOffsets;

		[Token(Token = "0x4000551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D969C", Offset = "0x15D969C")]
		public RotationOffset[] rotationOffsets;

		[Token(Token = "0x6000665")]
		[Address(RVA = "0x2F6AAA8", Offset = "0x2F6AAA8", VA = "0x2F6AAA8", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000666")]
		[Address(RVA = "0x2F6ACC8", Offset = "0x2F6ACC8", VA = "0x2F6ACC8")]
		public void Hit(Collider collider, Vector3 force, Vector3 point)
		{
		}

		[Token(Token = "0x6000667")]
		[Address(RVA = "0x2F6B050", Offset = "0x2F6B050", VA = "0x2F6B050")]
		public HitReactionVRIK()
		{
		}
	}
	[Token(Token = "0x20000A6")]
	public class Inertia : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x2000230")]
		public class Body
		{
			[Serializable]
			[Token(Token = "0x2000291")]
			public class EffectorLink
			{
				[Token(Token = "0x4001079")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E2580", Offset = "0x15E2580")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x400107A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E25B8", Offset = "0x15E25B8")]
				public float weight;

				[Token(Token = "0x6000F29")]
				[Address(RVA = "0x30E3964", Offset = "0x30E3964", VA = "0x30E3964")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4000E88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E15D0", Offset = "0x15E15D0")]
			public Transform transform;

			[Token(Token = "0x4000E89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E1608", Offset = "0x15E1608")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x4000E8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E1640", Offset = "0x15E1640")]
			public float speed;

			[Token(Token = "0x4000E8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E1678", Offset = "0x15E1678")]
			public float acceleration;

			[Token(Token = "0x4000E8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E16B0", Offset = "0x15E16B0")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15E16B0", Offset = "0x15E16B0")]
			public float matchVelocity;

			[Token(Token = "0x4000E8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E1704", Offset = "0x15E1704")]
			public float gravity;

			[Token(Token = "0x4000E8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 delta;

			[Token(Token = "0x4000E8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Vector3 lazyPoint;

			[Token(Token = "0x4000E90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Vector3 direction;

			[Token(Token = "0x4000E91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private Vector3 lastPosition;

			[Token(Token = "0x4000E92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private bool firstUpdate;

			[Token(Token = "0x6000E40")]
			[Address(RVA = "0x30E3430", Offset = "0x30E3430", VA = "0x30E3430")]
			public void Reset()
			{
			}

			[Token(Token = "0x6000E41")]
			[Address(RVA = "0x30E35C8", Offset = "0x30E35C8", VA = "0x30E35C8")]
			public void Update(IKSolverFullBodyBiped solver, float weight, float deltaTime)
			{
			}

			[Token(Token = "0x6000E42")]
			[Address(RVA = "0x30E3948", Offset = "0x30E3948", VA = "0x30E3948")]
			public Body()
			{
			}
		}

		[Token(Token = "0x4000552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D96D4", Offset = "0x15D96D4")]
		public Body[] bodies;

		[Token(Token = "0x4000553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D970C", Offset = "0x15D970C")]
		public OffsetLimits[] limits;

		[Token(Token = "0x6000668")]
		[Address(RVA = "0x30E33B8", Offset = "0x30E33B8", VA = "0x30E33B8")]
		public void ResetBodies()
		{
		}

		[Token(Token = "0x6000669")]
		[Address(RVA = "0x30E350C", Offset = "0x30E350C", VA = "0x30E350C", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x600066A")]
		[Address(RVA = "0x30E3940", Offset = "0x30E3940", VA = "0x30E3940")]
		public Inertia()
		{
		}
	}
	[Token(Token = "0x20000A7")]
	public class LookAtController : MonoBehaviour
	{
		[Token(Token = "0x4000554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LookAtIK ik;

		[Token(Token = "0x4000555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x15D9744", Offset = "0x15D9744")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D9744", Offset = "0x15D9744")]
		public Transform target;

		[Token(Token = "0x4000556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D97A4", Offset = "0x15D97A4")]
		public float weight;

		[Token(Token = "0x4000557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 offset;

		[Token(Token = "0x4000558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D97BC", Offset = "0x15D97BC")]
		public float targetSwitchSmoothTime;

		[Token(Token = "0x4000559")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D97F4", Offset = "0x15D97F4")]
		public float weightSmoothTime;

		[Token(Token = "0x400055A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x15D982C", Offset = "0x15D982C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D982C", Offset = "0x15D982C")]
		public bool smoothTurnTowardsTarget;

		[Token(Token = "0x400055B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D988C", Offset = "0x15D988C")]
		public float maxRadiansDelta;

		[Token(Token = "0x400055C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D98C4", Offset = "0x15D98C4")]
		public float maxMagnitudeDelta;

		[Token(Token = "0x400055D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D98FC", Offset = "0x15D98FC")]
		public float slerpSpeed;

		[Token(Token = "0x400055E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D9934", Offset = "0x15D9934")]
		public Vector3 pivotOffsetFromRoot;

		[Token(Token = "0x400055F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D996C", Offset = "0x15D996C")]
		public float minDistance;

		[Token(Token = "0x4000560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x15D99A4", Offset = "0x15D99A4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D99A4", Offset = "0x15D99A4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15D99A4", Offset = "0x15D99A4")]
		public float maxRootAngle;

		[Token(Token = "0x4000561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform lastTarget;

		[Token(Token = "0x4000562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float switchWeight;

		[Token(Token = "0x4000563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float switchWeightV;

		[Token(Token = "0x4000564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float weightV;

		[Token(Token = "0x4000565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private Vector3 lastPosition;

		[Token(Token = "0x4000566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 dir;

		[Token(Token = "0x4000567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool lastSmoothTowardsTarget;

		[Token(Token = "0x170000D4")]
		private Vector3 pivot
		{
			[Token(Token = "0x600066D")]
			[Address(RVA = "0x28BA658", Offset = "0x28BA658", VA = "0x28BA658")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x600066B")]
		[Address(RVA = "0x28BA570", Offset = "0x28BA570", VA = "0x28BA570")]
		private void Start()
		{
		}

		[Token(Token = "0x600066C")]
		[Address(RVA = "0x28BA7A4", Offset = "0x28BA7A4", VA = "0x28BA7A4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600066E")]
		[Address(RVA = "0x28BAE64", Offset = "0x28BAE64", VA = "0x28BAE64")]
		private void ApplyMinDistance()
		{
		}

		[Token(Token = "0x600066F")]
		[Address(RVA = "0x28BB000", Offset = "0x28BB000", VA = "0x28BB000")]
		private void RootRotation()
		{
		}

		[Token(Token = "0x6000670")]
		[Address(RVA = "0x28BB31C", Offset = "0x28BB31C", VA = "0x28BB31C")]
		public LookAtController()
		{
		}
	}
	[Token(Token = "0x20000A8")]
	public abstract class OffsetModifier : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000231")]
		public class OffsetLimits
		{
			[Token(Token = "0x4000E93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E173C", Offset = "0x15E173C")]
			public FullBodyBipedEffector effector;

			[Token(Token = "0x4000E94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E1774", Offset = "0x15E1774")]
			public float spring;

			[Token(Token = "0x4000E95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E17AC", Offset = "0x15E17AC")]
			public bool x;

			[Token(Token = "0x4000E96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E17E4", Offset = "0x15E17E4")]
			public bool y;

			[Token(Token = "0x4000E97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E181C", Offset = "0x15E181C")]
			public bool z;

			[Token(Token = "0x4000E98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E1854", Offset = "0x15E1854")]
			public float minX;

			[Token(Token = "0x4000E99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E188C", Offset = "0x15E188C")]
			public float maxX;

			[Token(Token = "0x4000E9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E18C4", Offset = "0x15E18C4")]
			public float minY;

			[Token(Token = "0x4000E9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E18FC", Offset = "0x15E18FC")]
			public float maxY;

			[Token(Token = "0x4000E9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E1934", Offset = "0x15E1934")]
			public float minZ;

			[Token(Token = "0x4000E9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E196C", Offset = "0x15E196C")]
			public float maxZ;

			[Token(Token = "0x6000E43")]
			[Address(RVA = "0x28BB844", Offset = "0x28BB844", VA = "0x28BB844")]
			public void Apply(IKEffector e, Quaternion rootRotation)
			{
			}

			[Token(Token = "0x6000E44")]
			[Address(RVA = "0x28BBDA0", Offset = "0x28BBDA0", VA = "0x28BBDA0")]
			private float SpringAxis(float value, float min, float max)
			{
				return default(float);
			}

			[Token(Token = "0x6000E45")]
			[Address(RVA = "0x28BBDD0", Offset = "0x28BBDD0", VA = "0x28BBDD0")]
			private float Spring(float value, float limit, bool negative)
			{
				return default(float);
			}

			[Token(Token = "0x6000E46")]
			[Address(RVA = "0x28BBEA8", Offset = "0x28BBEA8", VA = "0x28BBEA8")]
			public OffsetLimits()
			{
			}
		}

		[Token(Token = "0x2000232")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D5674", Offset = "0x15D5674")]
		private sealed class <Initiate>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000E9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000EA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OffsetModifier <>4__this;

			[Token(Token = "0x170001C4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E4A")]
				[Address(RVA = "0x28BBD30", Offset = "0x28BBD30", VA = "0x28BBD30", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001C5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E4C")]
				[Address(RVA = "0x28BBD98", Offset = "0x28BBD98", VA = "0x28BBD98", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E47")]
			[Address(RVA = "0x28BB650", Offset = "0x28BB650", VA = "0x28BB650")]
			[DebuggerHidden]
			public <Initiate>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6000E48")]
			[Address(RVA = "0x28BBBD0", Offset = "0x28BBBD0", VA = "0x28BBBD0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E49")]
			[Address(RVA = "0x28BBBD4", Offset = "0x28BBBD4", VA = "0x28BBBD4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E4B")]
			[Address(RVA = "0x28BBD38", Offset = "0x28BBD38", VA = "0x28BBD38", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D9A20", Offset = "0x15D9A20")]
		public float weight;

		[Token(Token = "0x4000569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D9A58", Offset = "0x15D9A58")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x400056A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected float lastTime;

		[Token(Token = "0x170000D5")]
		protected float deltaTime
		{
			[Token(Token = "0x6000671")]
			[Address(RVA = "0x28BB57C", Offset = "0x28BB57C", VA = "0x28BB57C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000672")]
		protected abstract void OnModifyOffset();

		[Token(Token = "0x6000673")]
		[Address(RVA = "0x28BB5A8", Offset = "0x28BB5A8", VA = "0x28BB5A8", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000674")]
		[Address(RVA = "0x28BB5D4", Offset = "0x28BB5D4", VA = "0x28BB5D4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x15E4930", Offset = "0x15E4930")]
		private IEnumerator Initiate()
		{
			return null;
		}

		[Token(Token = "0x6000675")]
		[Address(RVA = "0x28BB67C", Offset = "0x28BB67C", VA = "0x28BB67C")]
		private void ModifyOffset()
		{
		}

		[Token(Token = "0x6000676")]
		[Address(RVA = "0x28BB788", Offset = "0x28BB788", VA = "0x28BB788")]
		protected void ApplyLimits(OffsetLimits[] limits)
		{
		}

		[Token(Token = "0x6000677")]
		[Address(RVA = "0x28BBAA4", Offset = "0x28BBAA4", VA = "0x28BBAA4", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6000678")]
		[Address(RVA = "0x28BBBC0", Offset = "0x28BBBC0", VA = "0x28BBBC0")]
		protected OffsetModifier()
		{
		}
	}
	[Token(Token = "0x20000A9")]
	public abstract class OffsetModifierVRIK : MonoBehaviour
	{
		[Token(Token = "0x2000233")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D5684", Offset = "0x15D5684")]
		private sealed class <Initiate>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000EA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000EA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000EA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OffsetModifierVRIK <>4__this;

			[Token(Token = "0x170001C6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E50")]
				[Address(RVA = "0x28BC348", Offset = "0x28BC348", VA = "0x28BC348", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001C7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E52")]
				[Address(RVA = "0x28BC3B0", Offset = "0x28BC3B0", VA = "0x28BC3B0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E4D")]
			[Address(RVA = "0x28BBF84", Offset = "0x28BBF84", VA = "0x28BBF84")]
			[DebuggerHidden]
			public <Initiate>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6000E4E")]
			[Address(RVA = "0x28BC1E8", Offset = "0x28BC1E8", VA = "0x28BC1E8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E4F")]
			[Address(RVA = "0x28BC1EC", Offset = "0x28BC1EC", VA = "0x28BC1EC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E51")]
			[Address(RVA = "0x28BC350", Offset = "0x28BC350", VA = "0x28BC350", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400056B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D9A90", Offset = "0x15D9A90")]
		public float weight;

		[Token(Token = "0x400056C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D9AC8", Offset = "0x15D9AC8")]
		public VRIK ik;

		[Token(Token = "0x400056D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float lastTime;

		[Token(Token = "0x170000D6")]
		protected float deltaTime
		{
			[Token(Token = "0x6000679")]
			[Address(RVA = "0x28BBEB0", Offset = "0x28BBEB0", VA = "0x28BBEB0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600067A")]
		protected abstract void OnModifyOffset();

		[Token(Token = "0x600067B")]
		[Address(RVA = "0x28BBEDC", Offset = "0x28BBEDC", VA = "0x28BBEDC", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x600067C")]
		[Address(RVA = "0x28BBF08", Offset = "0x28BBF08", VA = "0x28BBF08")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x15E4994", Offset = "0x15E4994")]
		private IEnumerator Initiate()
		{
			return null;
		}

		[Token(Token = "0x600067D")]
		[Address(RVA = "0x28BBFB0", Offset = "0x28BBFB0", VA = "0x28BBFB0")]
		private void ModifyOffset()
		{
		}

		[Token(Token = "0x600067E")]
		[Address(RVA = "0x28BC0BC", Offset = "0x28BC0BC", VA = "0x28BC0BC", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x600067F")]
		[Address(RVA = "0x28BC1D8", Offset = "0x28BC1D8", VA = "0x28BC1D8")]
		protected OffsetModifierVRIK()
		{
		}
	}
	[Token(Token = "0x20000AA")]
	public class OffsetPose : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000234")]
		public class EffectorLink
		{
			[Token(Token = "0x4000EA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FullBodyBipedEffector effector;

			[Token(Token = "0x4000EA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector3 offset;

			[Token(Token = "0x4000EA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 pin;

			[Token(Token = "0x4000EA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Vector3 pinWeight;

			[Token(Token = "0x6000E53")]
			[Address(RVA = "0x28BC478", Offset = "0x28BC478", VA = "0x28BC478")]
			public void Apply(IKSolverFullBodyBiped solver, float weight, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000E54")]
			[Address(RVA = "0x28BC8D4", Offset = "0x28BC8D4", VA = "0x28BC8D4")]
			public EffectorLink()
			{
			}
		}

		[Token(Token = "0x400056E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EffectorLink[] effectorLinks;

		[Token(Token = "0x6000680")]
		[Address(RVA = "0x28BC3B8", Offset = "0x28BC3B8", VA = "0x28BC3B8")]
		public void Apply(IKSolverFullBodyBiped solver, float weight)
		{
		}

		[Token(Token = "0x6000681")]
		[Address(RVA = "0x28BC7B0", Offset = "0x28BC7B0", VA = "0x28BC7B0")]
		public void Apply(IKSolverFullBodyBiped solver, float weight, Quaternion rotation)
		{
		}

		[Token(Token = "0x6000682")]
		[Address(RVA = "0x28BC868", Offset = "0x28BC868", VA = "0x28BC868")]
		public OffsetPose()
		{
		}
	}
	[Token(Token = "0x20000AB")]
	public class PenetrationAvoidance : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x2000235")]
		public class Avoider
		{
			[Serializable]
			[Token(Token = "0x2000292")]
			public class EffectorLink
			{
				[Token(Token = "0x400107B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E25F0", Offset = "0x15E25F0")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x400107C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E2628", Offset = "0x15E2628")]
				public float weight;

				[Token(Token = "0x6000F2A")]
				[Address(RVA = "0x28BCF8C", Offset = "0x28BCF8C", VA = "0x28BCF8C")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4000EA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E19A4", Offset = "0x15E19A4")]
			public Transform[] raycastFrom;

			[Token(Token = "0x4000EA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E19DC", Offset = "0x15E19DC")]
			public Transform raycastTo;

			[Token(Token = "0x4000EAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E1A14", Offset = "0x15E1A14")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15E1A14", Offset = "0x15E1A14")]
			public float raycastRadius;

			[Token(Token = "0x4000EAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E1A68", Offset = "0x15E1A68")]
			public EffectorLink[] effectors;

			[Token(Token = "0x4000EAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E1AA0", Offset = "0x15E1AA0")]
			public float smoothTimeIn;

			[Token(Token = "0x4000EAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E1AD8", Offset = "0x15E1AD8")]
			public float smoothTimeOut;

			[Token(Token = "0x4000EAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E1B10", Offset = "0x15E1B10")]
			public LayerMask layers;

			[Token(Token = "0x4000EAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Vector3 offset;

			[Token(Token = "0x4000EB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Vector3 offsetTarget;

			[Token(Token = "0x4000EB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private Vector3 offsetV;

			[Token(Token = "0x6000E55")]
			[Address(RVA = "0x28BC960", Offset = "0x28BC960", VA = "0x28BC960")]
			public void Solve(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x6000E56")]
			[Address(RVA = "0x28BCB6C", Offset = "0x28BCB6C", VA = "0x28BCB6C")]
			private Vector3 GetOffsetTarget(IKSolverFullBodyBiped solver)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000E57")]
			[Address(RVA = "0x28BCD04", Offset = "0x28BCD04", VA = "0x28BCD04")]
			private Vector3 Raycast(Vector3 from, Vector3 to)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000E58")]
			[Address(RVA = "0x28BCF78", Offset = "0x28BCF78", VA = "0x28BCF78")]
			public Avoider()
			{
			}
		}

		[Token(Token = "0x400056F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D9B00", Offset = "0x15D9B00")]
		public Avoider[] avoiders;

		[Token(Token = "0x6000683")]
		[Address(RVA = "0x28BC8DC", Offset = "0x28BC8DC", VA = "0x28BC8DC", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000684")]
		[Address(RVA = "0x28BCB5C", Offset = "0x28BCB5C", VA = "0x28BCB5C")]
		public PenetrationAvoidance()
		{
		}
	}
	[Token(Token = "0x20000AC")]
	public class Recoil : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x2000236")]
		public class RecoilOffset
		{
			[Serializable]
			[Token(Token = "0x2000293")]
			public class EffectorLink
			{
				[Token(Token = "0x400107D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E2660", Offset = "0x15E2660")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x400107E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E2698", Offset = "0x15E2698")]
				public float weight;

				[Token(Token = "0x6000F2B")]
				[Address(RVA = "0x28C0094", Offset = "0x28C0094", VA = "0x28C0094")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4000EB2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E1B48", Offset = "0x15E1B48")]
			public Vector3 offset;

			[Token(Token = "0x4000EB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E1B80", Offset = "0x15E1B80")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15E1B80", Offset = "0x15E1B80")]
			public float additivity;

			[Token(Token = "0x4000EB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E1BD4", Offset = "0x15E1BD4")]
			public float maxAdditiveOffsetMag;

			[Token(Token = "0x4000EB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E1C0C", Offset = "0x15E1C0C")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x4000EB6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 additiveOffset;

			[Token(Token = "0x4000EB7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Vector3 lastOffset;

			[Token(Token = "0x6000E59")]
			[Address(RVA = "0x28BED84", Offset = "0x28BED84", VA = "0x28BED84")]
			public void Start()
			{
			}

			[Token(Token = "0x6000E5A")]
			[Address(RVA = "0x28BF938", Offset = "0x28BF938", VA = "0x28BF938")]
			public void Apply(IKSolverFullBodyBiped solver, Quaternion rotation, float masterWeight, float length, float timeLeft)
			{
			}

			[Token(Token = "0x6000E5B")]
			[Address(RVA = "0x28C0080", Offset = "0x28C0080", VA = "0x28C0080")]
			public RecoilOffset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000237")]
		public enum Handedness
		{
			[Token(Token = "0x4000EB9")]
			Right,
			[Token(Token = "0x4000EBA")]
			Left
		}

		[Token(Token = "0x4000570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D9B38", Offset = "0x15D9B38")]
		public AimIK aimIK;

		[Token(Token = "0x4000571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D9B70", Offset = "0x15D9B70")]
		public bool aimIKSolvedLast;

		[Token(Token = "0x4000572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D9BA8", Offset = "0x15D9BA8")]
		public Handedness handedness;

		[Token(Token = "0x4000573")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D9BE0", Offset = "0x15D9BE0")]
		public bool twoHanded;

		[Token(Token = "0x4000574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D9C18", Offset = "0x15D9C18")]
		public AnimationCurve recoilWeight;

		[Token(Token = "0x4000575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D9C50", Offset = "0x15D9C50")]
		public float magnitudeRandom;

		[Token(Token = "0x4000576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D9C88", Offset = "0x15D9C88")]
		public Vector3 rotationRandom;

		[Token(Token = "0x4000577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D9CC0", Offset = "0x15D9CC0")]
		public Vector3 handRotationOffset;

		[Token(Token = "0x4000578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D9CF8", Offset = "0x15D9CF8")]
		public float blendTime;

		[Token(Token = "0x4000579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x15D9D30", Offset = "0x15D9D30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D9D30", Offset = "0x15D9D30")]
		public RecoilOffset[] offsets;

		[Token(Token = "0x400057A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public Quaternion rotationOffset;

		[Token(Token = "0x400057B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float magnitudeMlp;

		[Token(Token = "0x400057C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float endTime;

		[Token(Token = "0x400057D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Quaternion handRotation;

		[Token(Token = "0x400057E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Quaternion secondaryHandRelativeRotation;

		[Token(Token = "0x400057F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Quaternion randomRotation;

		[Token(Token = "0x4000580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float length;

		[Token(Token = "0x4000581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private bool initiated;

		[Token(Token = "0x4000582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float blendWeight;

		[Token(Token = "0x4000583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private float w;

		[Token(Token = "0x4000584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Quaternion primaryHandRotation;

		[Token(Token = "0x4000585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool handRotationsSet;

		[Token(Token = "0x4000586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private Vector3 aimIKAxis;

		[Token(Token = "0x170000D7")]
		public bool isFinished
		{
			[Token(Token = "0x6000685")]
			[Address(RVA = "0x28BEB5C", Offset = "0x28BEB5C", VA = "0x28BEB5C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000D8")]
		private IKEffector primaryHandEffector
		{
			[Token(Token = "0x600068B")]
			[Address(RVA = "0x28BFBEC", Offset = "0x28BFBEC", VA = "0x28BFBEC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D9")]
		private IKEffector secondaryHandEffector
		{
			[Token(Token = "0x600068C")]
			[Address(RVA = "0x28BFC2C", Offset = "0x28BFC2C", VA = "0x28BFC2C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DA")]
		private Transform primaryHand
		{
			[Token(Token = "0x600068D")]
			[Address(RVA = "0x28BFBAC", Offset = "0x28BFBAC", VA = "0x28BFBAC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DB")]
		private Transform secondaryHand
		{
			[Token(Token = "0x600068E")]
			[Address(RVA = "0x28BFBCC", Offset = "0x28BFBCC", VA = "0x28BFBCC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000686")]
		[Address(RVA = "0x28BEB8C", Offset = "0x28BEB8C", VA = "0x28BEB8C")]
		public void SetHandRotations(Quaternion leftHandRotation, Quaternion rightHandRotation)
		{
		}

		[Token(Token = "0x6000687")]
		[Address(RVA = "0x28BEBB8", Offset = "0x28BEBB8", VA = "0x28BEBB8")]
		public void Fire(float magnitude)
		{
		}

		[Token(Token = "0x6000688")]
		[Address(RVA = "0x28BEE34", Offset = "0x28BEE34", VA = "0x28BEE34", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000689")]
		[Address(RVA = "0x28BFC6C", Offset = "0x28BFC6C", VA = "0x28BFC6C")]
		private void AfterFBBIK()
		{
		}

		[Token(Token = "0x600068A")]
		[Address(RVA = "0x28BFDC4", Offset = "0x28BFDC4", VA = "0x28BFDC4")]
		private void AfterAimIK()
		{
		}

		[Token(Token = "0x600068F")]
		[Address(RVA = "0x28BFE00", Offset = "0x28BFE00", VA = "0x28BFE00", Slot = "6")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6000690")]
		[Address(RVA = "0x28BFFCC", Offset = "0x28BFFCC", VA = "0x28BFFCC")]
		public Recoil()
		{
		}
	}
	[Token(Token = "0x20000AD")]
	public class ShoulderRotator : MonoBehaviour
	{
		[Token(Token = "0x4000587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D9D90", Offset = "0x15D9D90")]
		public float weight;

		[Token(Token = "0x4000588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D9DC8", Offset = "0x15D9DC8")]
		public float offset;

		[Token(Token = "0x4000589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x400058A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool skip;

		[Token(Token = "0x6000691")]
		[Address(RVA = "0x28C397C", Offset = "0x28C397C", VA = "0x28C397C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000692")]
		[Address(RVA = "0x28C3A70", Offset = "0x28C3A70", VA = "0x28C3A70")]
		private void RotateShoulders()
		{
		}

		[Token(Token = "0x6000693")]
		[Address(RVA = "0x28C3B5C", Offset = "0x28C3B5C", VA = "0x28C3B5C")]
		private void RotateShoulder(FullBodyBipedChain chain, float weight, float offset)
		{
		}

		[Token(Token = "0x6000694")]
		[Address(RVA = "0x28C3FA4", Offset = "0x28C3FA4", VA = "0x28C3FA4")]
		private IKMapping.BoneMap GetParentBoneMap(FullBodyBipedChain chain)
		{
			return null;
		}

		[Token(Token = "0x6000695")]
		[Address(RVA = "0x28C3FDC", Offset = "0x28C3FDC", VA = "0x28C3FDC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000696")]
		[Address(RVA = "0x28C40F8", Offset = "0x28C40F8", VA = "0x28C40F8")]
		public ShoulderRotator()
		{
		}
	}
	[Token(Token = "0x20000AE")]
	public static class VRIKCalibrator
	{
		[Serializable]
		[Token(Token = "0x2000238")]
		public class Settings
		{
			[Token(Token = "0x4000EBB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E1C44", Offset = "0x15E1C44")]
			public float scaleMlp;

			[Token(Token = "0x4000EBC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E1C7C", Offset = "0x15E1C7C")]
			public Vector3 headTrackerForward;

			[Token(Token = "0x4000EBD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E1CB4", Offset = "0x15E1CB4")]
			public Vector3 headTrackerUp;

			[Token(Token = "0x4000EBE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E1CEC", Offset = "0x15E1CEC")]
			public Vector3 bodyTrackerForward;

			[Token(Token = "0x4000EBF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E1D24", Offset = "0x15E1D24")]
			public Vector3 bodyTrackerUp;

			[Token(Token = "0x4000EC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E1D5C", Offset = "0x15E1D5C")]
			public Vector3 handTrackerForward;

			[Token(Token = "0x4000EC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E1D94", Offset = "0x15E1D94")]
			public Vector3 handTrackerUp;

			[Token(Token = "0x4000EC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E1DCC", Offset = "0x15E1DCC")]
			public Vector3 footTrackerForward;

			[Token(Token = "0x4000EC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E1E04", Offset = "0x15E1E04")]
			public Vector3 footTrackerUp;

			[Token(Token = "0x4000EC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x15E1E3C", Offset = "0x15E1E3C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E1E3C", Offset = "0x15E1E3C")]
			public Vector3 headOffset;

			[Token(Token = "0x4000EC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E1E8C", Offset = "0x15E1E8C")]
			public Vector3 handOffset;

			[Token(Token = "0x4000EC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E1EC4", Offset = "0x15E1EC4")]
			public float footForwardOffset;

			[Token(Token = "0x4000EC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E1EFC", Offset = "0x15E1EFC")]
			public float footInwardOffset;

			[Token(Token = "0x4000EC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E1F34", Offset = "0x15E1F34")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15E1F34", Offset = "0x15E1F34")]
			public float footHeadingOffset;

			[Token(Token = "0x4000EC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15E1F90", Offset = "0x15E1F90")]
			public float pelvisPositionWeight;

			[Token(Token = "0x4000ECA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15E1FA8", Offset = "0x15E1FA8")]
			public float pelvisRotationWeight;

			[Token(Token = "0x6000E5C")]
			[Address(RVA = "0x28C9394", Offset = "0x28C9394", VA = "0x28C9394")]
			public Settings()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000239")]
		public class CalibrationData
		{
			[Serializable]
			[Token(Token = "0x2000294")]
			public class Target
			{
				[Token(Token = "0x400107F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public bool used;

				[Token(Token = "0x4001080")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				public Vector3 localPosition;

				[Token(Token = "0x4001081")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				public Quaternion localRotation;

				[Token(Token = "0x6000F2C")]
				[Address(RVA = "0x28C83C0", Offset = "0x28C83C0", VA = "0x28C83C0")]
				public Target(Transform t)
				{
				}

				[Token(Token = "0x6000F2D")]
				[Address(RVA = "0x28C8F34", Offset = "0x28C8F34", VA = "0x28C8F34")]
				public void SetTo(Transform t)
				{
				}
			}

			[Token(Token = "0x4000ECB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float scale;

			[Token(Token = "0x4000ECC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Target head;

			[Token(Token = "0x4000ECD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Target leftHand;

			[Token(Token = "0x4000ECE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Target rightHand;

			[Token(Token = "0x4000ECF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Target pelvis;

			[Token(Token = "0x4000ED0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Target leftFoot;

			[Token(Token = "0x4000ED1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Target rightFoot;

			[Token(Token = "0x4000ED2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Target leftLegGoal;

			[Token(Token = "0x4000ED3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Target rightLegGoal;

			[Token(Token = "0x4000ED4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public Vector3 pelvisTargetRight;

			[Token(Token = "0x4000ED5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			public float pelvisPositionWeight;

			[Token(Token = "0x4000ED6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public float pelvisRotationWeight;

			[Token(Token = "0x6000E5D")]
			[Address(RVA = "0x28C7974", Offset = "0x28C7974", VA = "0x28C7974")]
			public CalibrationData()
			{
			}
		}

		[Token(Token = "0x6000697")]
		[Address(RVA = "0x28C64AC", Offset = "0x28C64AC", VA = "0x28C64AC")]
		public static void RecalibrateScale(VRIK ik, Settings settings)
		{
		}

		[Token(Token = "0x6000698")]
		[Address(RVA = "0x28C6614", Offset = "0x28C6614", VA = "0x28C6614")]
		public static CalibrationData Calibrate(VRIK ik, Settings settings, Transform headTracker, [Optional] Transform bodyTracker, [Optional] Transform leftHandTracker, [Optional] Transform rightHandTracker, [Optional] Transform leftFootTracker, [Optional] Transform rightFootTracker)
		{
			return null;
		}

		[Token(Token = "0x6000699")]
		[Address(RVA = "0x28C797C", Offset = "0x28C797C", VA = "0x28C797C")]
		private static void CalibrateLeg(Settings settings, Transform tracker, IKSolverVR.Leg leg, Transform lastBone, Vector3 rootForward, bool isLeft)
		{
		}

		[Token(Token = "0x600069A")]
		[Address(RVA = "0x28C8484", Offset = "0x28C8484", VA = "0x28C8484")]
		public static void Calibrate(VRIK ik, CalibrationData data, Transform headTracker, [Optional] Transform bodyTracker, [Optional] Transform leftHandTracker, [Optional] Transform rightHandTracker, [Optional] Transform leftFootTracker, [Optional] Transform rightFootTracker)
		{
		}

		[Token(Token = "0x600069B")]
		[Address(RVA = "0x28C8F94", Offset = "0x28C8F94", VA = "0x28C8F94")]
		private static void CalibrateLeg(CalibrationData data, Transform tracker, IKSolverVR.Leg leg, Transform lastBone, Vector3 rootForward, bool isLeft)
		{
		}
	}
	[Token(Token = "0x20000AF")]
	public class VRIKLODController : MonoBehaviour
	{
		[Token(Token = "0x400058B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Renderer LODRenderer;

		[Token(Token = "0x400058C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float LODDistance;

		[Token(Token = "0x400058D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool allowCulled;

		[Token(Token = "0x400058E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private VRIK ik;

		[Token(Token = "0x600069C")]
		[Address(RVA = "0x28C948C", Offset = "0x28C948C", VA = "0x28C948C")]
		private void Start()
		{
		}

		[Token(Token = "0x600069D")]
		[Address(RVA = "0x28C94EC", Offset = "0x28C94EC", VA = "0x28C94EC")]
		private void Update()
		{
		}

		[Token(Token = "0x600069E")]
		[Address(RVA = "0x28C9520", Offset = "0x28C9520", VA = "0x28C9520")]
		private int GetLODLevel()
		{
			return default(int);
		}

		[Token(Token = "0x600069F")]
		[Address(RVA = "0x28C96A8", Offset = "0x28C96A8", VA = "0x28C96A8")]
		public VRIKLODController()
		{
		}
	}
	[Token(Token = "0x20000B0")]
	public class VRIKRootController : MonoBehaviour
	{
		[Token(Token = "0x400058F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D9E00", Offset = "0x15D9E00")]
		private Vector3 <pelvisTargetRight>k__BackingField;

		[Token(Token = "0x4000590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform pelvisTarget;

		[Token(Token = "0x4000591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform leftFootTarget;

		[Token(Token = "0x4000592")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform rightFootTarget;

		[Token(Token = "0x4000593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private VRIK ik;

		[Token(Token = "0x170000DC")]
		public Vector3 pelvisTargetRight
		{
			[Token(Token = "0x60006A0")]
			[Address(RVA = "0x28C96C0", Offset = "0x28C96C0", VA = "0x28C96C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E49F8", Offset = "0x15E49F8")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60006A1")]
			[Address(RVA = "0x28C96CC", Offset = "0x28C96CC", VA = "0x28C96CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4A08", Offset = "0x15E4A08")]
			private set
			{
			}
		}

		[Token(Token = "0x60006A2")]
		[Address(RVA = "0x28C96D8", Offset = "0x28C96D8", VA = "0x28C96D8")]
		private void Awake()
		{
		}

		[Token(Token = "0x60006A3")]
		[Address(RVA = "0x28C8164", Offset = "0x28C8164", VA = "0x28C8164")]
		public void Calibrate()
		{
		}

		[Token(Token = "0x60006A4")]
		[Address(RVA = "0x28C91EC", Offset = "0x28C91EC", VA = "0x28C91EC")]
		public void Calibrate(VRIKCalibrator.CalibrationData data)
		{
		}

		[Token(Token = "0x60006A5")]
		[Address(RVA = "0x28C97D4", Offset = "0x28C97D4", VA = "0x28C97D4")]
		private void OnPreUpdate()
		{
		}

		[Token(Token = "0x60006A6")]
		[Address(RVA = "0x28C9C78", Offset = "0x28C9C78", VA = "0x28C9C78")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60006A7")]
		[Address(RVA = "0x28C9D94", Offset = "0x28C9D94", VA = "0x28C9D94")]
		public VRIKRootController()
		{
		}
	}
}
namespace RootMotion.Demos
{
	[Token(Token = "0x20000B1")]
	public class FKOffset : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200023A")]
		public class Offset
		{
			[Token(Token = "0x4000ED7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[HideInInspector]
			[SerializeField]
			public string name;

			[Token(Token = "0x4000ED8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public HumanBodyBones bone;

			[Token(Token = "0x4000ED9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 rotationOffset;

			[Token(Token = "0x4000EDA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Transform t;

			[Token(Token = "0x6000E5E")]
			[Address(RVA = "0x2357728", Offset = "0x2357728", VA = "0x2357728")]
			public void Apply(Animator animator)
			{
			}

			[Token(Token = "0x6000E5F")]
			[Address(RVA = "0x23579D4", Offset = "0x23579D4", VA = "0x23579D4")]
			public Offset()
			{
			}
		}

		[Token(Token = "0x4000594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Offset[] offsets;

		[Token(Token = "0x4000595")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator animator;

		[Token(Token = "0x60006A8")]
		[Address(RVA = "0x2357650", Offset = "0x2357650", VA = "0x2357650")]
		private void Start()
		{
		}

		[Token(Token = "0x60006A9")]
		[Address(RVA = "0x23576B0", Offset = "0x23576B0", VA = "0x23576B0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60006AA")]
		[Address(RVA = "0x23578E4", Offset = "0x23578E4", VA = "0x23578E4")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60006AB")]
		[Address(RVA = "0x23579CC", Offset = "0x23579CC", VA = "0x23579CC")]
		public FKOffset()
		{
		}
	}
	[Token(Token = "0x20000B2")]
	public class AimBoxing : MonoBehaviour
	{
		[Token(Token = "0x4000596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AimIK aimIK;

		[Token(Token = "0x4000597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform pin;

		[Token(Token = "0x60006AC")]
		[Address(RVA = "0x1F2E34C", Offset = "0x1F2E34C", VA = "0x1F2E34C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60006AD")]
		[Address(RVA = "0x1F2E3D0", Offset = "0x1F2E3D0", VA = "0x1F2E3D0")]
		public AimBoxing()
		{
		}
	}
	[Token(Token = "0x20000B3")]
	public class AimSwing : MonoBehaviour
	{
		[Token(Token = "0x4000598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AimIK ik;

		[Token(Token = "0x4000599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D9E10", Offset = "0x15D9E10")]
		public Vector3 animatedSwingDirection;

		[Token(Token = "0x60006AE")]
		[Address(RVA = "0x1F2E3D8", Offset = "0x1F2E3D8", VA = "0x1F2E3D8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60006AF")]
		[Address(RVA = "0x1F2E4E0", Offset = "0x1F2E4E0", VA = "0x1F2E4E0")]
		public AimSwing()
		{
		}
	}
	[Token(Token = "0x20000B4")]
	public class SecondHandOnGun : MonoBehaviour
	{
		[Token(Token = "0x400059A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AimIK aim;

		[Token(Token = "0x400059B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LimbIK leftArmIK;

		[Token(Token = "0x400059C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform leftHand;

		[Token(Token = "0x400059D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform rightHand;

		[Token(Token = "0x400059E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 leftHandPositionOffset;

		[Token(Token = "0x400059F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 leftHandRotationOffset;

		[Token(Token = "0x40005A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 leftHandPosRelToRight;

		[Token(Token = "0x40005A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Quaternion leftHandRotRelToRight;

		[Token(Token = "0x60006B0")]
		[Address(RVA = "0x2361E88", Offset = "0x2361E88", VA = "0x2361E88")]
		private void Start()
		{
		}

		[Token(Token = "0x60006B1")]
		[Address(RVA = "0x2361ECC", Offset = "0x2361ECC", VA = "0x2361ECC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60006B2")]
		[Address(RVA = "0x236212C", Offset = "0x236212C", VA = "0x236212C")]
		public SecondHandOnGun()
		{
		}
	}
	[Token(Token = "0x20000B5")]
	public class SimpleAimingSystem : MonoBehaviour
	{
		[Token(Token = "0x40005A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D9E48", Offset = "0x15D9E48")]
		public AimPoser aimPoser;

		[Token(Token = "0x40005A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D9E80", Offset = "0x15D9E80")]
		public AimIK aim;

		[Token(Token = "0x40005A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D9EB8", Offset = "0x15D9EB8")]
		public LookAtIK lookAt;

		[Token(Token = "0x40005A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D9EF0", Offset = "0x15D9EF0")]
		public Animator animator;

		[Token(Token = "0x40005A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D9F28", Offset = "0x15D9F28")]
		public float crossfadeTime;

		[Token(Token = "0x40005A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15D9F60", Offset = "0x15D9F60")]
		public float minAimDistance;

		[Token(Token = "0x40005A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AimPoser.Pose aimPose;

		[Token(Token = "0x40005A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AimPoser.Pose lastPose;

		[Token(Token = "0x60006B3")]
		[Address(RVA = "0x2362134", Offset = "0x2362134", VA = "0x2362134")]
		private void Start()
		{
		}

		[Token(Token = "0x60006B4")]
		[Address(RVA = "0x2362178", Offset = "0x2362178", VA = "0x2362178")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60006B5")]
		[Address(RVA = "0x23622CC", Offset = "0x23622CC", VA = "0x23622CC")]
		private void Pose()
		{
		}

		[Token(Token = "0x60006B6")]
		[Address(RVA = "0x23624E4", Offset = "0x23624E4", VA = "0x23624E4")]
		private void LimitAimTarget()
		{
		}

		[Token(Token = "0x60006B7")]
		[Address(RVA = "0x2362824", Offset = "0x2362824", VA = "0x2362824")]
		private void DirectCrossFade(string state, float target)
		{
		}

		[Token(Token = "0x60006B8")]
		[Address(RVA = "0x23628FC", Offset = "0x23628FC", VA = "0x23628FC")]
		public SimpleAimingSystem()
		{
		}
	}
	[Token(Token = "0x20000B6")]
	public class TerrainOffset : MonoBehaviour
	{
		[Token(Token = "0x40005AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AimIK aimIK;

		[Token(Token = "0x40005AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 raycastOffset;

		[Token(Token = "0x40005AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LayerMask raycastLayers;

		[Token(Token = "0x40005AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float min;

		[Token(Token = "0x40005AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float max;

		[Token(Token = "0x40005AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float lerpSpeed;

		[Token(Token = "0x40005B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private RaycastHit hit;

		[Token(Token = "0x40005B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 offset;

		[Token(Token = "0x60006B9")]
		[Address(RVA = "0x23636C8", Offset = "0x23636C8", VA = "0x23636C8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60006BA")]
		[Address(RVA = "0x236392C", Offset = "0x236392C", VA = "0x236392C")]
		private Vector3 GetGroundHeightOffset(Vector3 worldPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006BB")]
		[Address(RVA = "0x2363B7C", Offset = "0x2363B7C", VA = "0x2363B7C")]
		public TerrainOffset()
		{
		}
	}
	[Token(Token = "0x20000B7")]
	public class BipedIKvsAnimatorIK : MonoBehaviour
	{
		[Token(Token = "0x40005B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x15D9F98", Offset = "0x15D9F98")]
		public Animator animator;

		[Token(Token = "0x40005B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BipedIK bipedIK;

		[Token(Token = "0x40005B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x15D9FD0", Offset = "0x15D9FD0")]
		public Transform lookAtTargetBiped;

		[Token(Token = "0x40005B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform lookAtTargetAnimator;

		[Token(Token = "0x40005B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DA008", Offset = "0x15DA008")]
		public float lookAtWeight;

		[Token(Token = "0x40005B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DA020", Offset = "0x15DA020")]
		public float lookAtBodyWeight;

		[Token(Token = "0x40005B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DA038", Offset = "0x15DA038")]
		public float lookAtHeadWeight;

		[Token(Token = "0x40005B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DA050", Offset = "0x15DA050")]
		public float lookAtEyesWeight;

		[Token(Token = "0x40005BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DA068", Offset = "0x15DA068")]
		public float lookAtClampWeight;

		[Token(Token = "0x40005BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DA080", Offset = "0x15DA080")]
		public float lookAtClampWeightHead;

		[Token(Token = "0x40005BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DA098", Offset = "0x15DA098")]
		public float lookAtClampWeightEyes;

		[Token(Token = "0x40005BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x15DA0B0", Offset = "0x15DA0B0")]
		public Transform footTargetBiped;

		[Token(Token = "0x40005BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform footTargetAnimator;

		[Token(Token = "0x40005BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DA0E8", Offset = "0x15DA0E8")]
		public float footPositionWeight;

		[Token(Token = "0x40005C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DA100", Offset = "0x15DA100")]
		public float footRotationWeight;

		[Token(Token = "0x40005C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x15DA118", Offset = "0x15DA118")]
		public Transform handTargetBiped;

		[Token(Token = "0x40005C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform handTargetAnimator;

		[Token(Token = "0x40005C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DA150", Offset = "0x15DA150")]
		public float handPositionWeight;

		[Token(Token = "0x40005C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DA168", Offset = "0x15DA168")]
		public float handRotationWeight;

		[Token(Token = "0x60006BC")]
		[Address(RVA = "0x1F300DC", Offset = "0x1F300DC", VA = "0x1F300DC")]
		private void OnAnimatorIK(int layer)
		{
		}

		[Token(Token = "0x60006BD")]
		[Address(RVA = "0x1F30588", Offset = "0x1F30588", VA = "0x1F30588")]
		public BipedIKvsAnimatorIK()
		{
		}
	}
	[Token(Token = "0x20000B8")]
	public class MechSpider : MonoBehaviour
	{
		[Token(Token = "0x40005C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LayerMask raycastLayers;

		[Token(Token = "0x40005C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float scale;

		[Token(Token = "0x40005C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform body;

		[Token(Token = "0x40005C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MechSpiderLeg[] legs;

		[Token(Token = "0x40005C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float legRotationWeight;

		[Token(Token = "0x40005CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float rootPositionSpeed;

		[Token(Token = "0x40005CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float rootRotationSpeed;

		[Token(Token = "0x40005CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float breatheSpeed;

		[Token(Token = "0x40005CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float breatheMagnitude;

		[Token(Token = "0x40005CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float height;

		[Token(Token = "0x40005CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float minHeight;

		[Token(Token = "0x40005D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float raycastHeight;

		[Token(Token = "0x40005D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float raycastDistance;

		[Token(Token = "0x40005D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 lastPosition;

		[Token(Token = "0x40005D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 defaultBodyLocalPosition;

		[Token(Token = "0x40005D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float sine;

		[Token(Token = "0x40005D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RaycastHit rootHit;

		[Token(Token = "0x60006BE")]
		[Address(RVA = "0x235B418", Offset = "0x235B418", VA = "0x235B418")]
		private void Update()
		{
		}

		[Token(Token = "0x60006BF")]
		[Address(RVA = "0x235BE4C", Offset = "0x235BE4C", VA = "0x235BE4C")]
		private Vector3 GetLegCentroid()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006C0")]
		[Address(RVA = "0x235BB34", Offset = "0x235BB34", VA = "0x235BB34")]
		private Vector3 GetLegsPlaneNormal()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006C1")]
		[Address(RVA = "0x235BFF4", Offset = "0x235BFF4", VA = "0x235BFF4")]
		public MechSpider()
		{
		}
	}
	[Token(Token = "0x20000B9")]
	public class MechSpiderController : MonoBehaviour
	{
		[Token(Token = "0x40005D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MechSpider mechSpider;

		[Token(Token = "0x40005D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform cameraTransform;

		[Token(Token = "0x40005D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float speed;

		[Token(Token = "0x40005D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float turnSpeed;

		[Token(Token = "0x170000DD")]
		public Vector3 inputVector
		{
			[Token(Token = "0x60006C2")]
			[Address(RVA = "0x235C020", Offset = "0x235C020", VA = "0x235C020")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x60006C3")]
		[Address(RVA = "0x235C0C0", Offset = "0x235C0C0", VA = "0x235C0C0")]
		private void Update()
		{
		}

		[Token(Token = "0x60006C4")]
		[Address(RVA = "0x235C358", Offset = "0x235C358", VA = "0x235C358")]
		public MechSpiderController()
		{
		}
	}
	[Token(Token = "0x20000BA")]
	public class MechSpiderLeg : MonoBehaviour
	{
		[Token(Token = "0x200023B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D5694", Offset = "0x15D5694")]
		private sealed class <Step>d__33 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000EDB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000EDC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000EDD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MechSpiderLeg <>4__this;

			[Token(Token = "0x4000EDE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 stepStartPosition;

			[Token(Token = "0x4000EDF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Vector3 targetPosition;

			[Token(Token = "0x170001C8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E63")]
				[Address(RVA = "0x235D790", Offset = "0x235D790", VA = "0x235D790", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001C9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E65")]
				[Address(RVA = "0x235D7F8", Offset = "0x235D7F8", VA = "0x235D7F8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E60")]
			[Address(RVA = "0x235D37C", Offset = "0x235D37C", VA = "0x235D37C")]
			[DebuggerHidden]
			public <Step>d__33(int <>1__state)
			{
			}

			[Token(Token = "0x6000E61")]
			[Address(RVA = "0x235D450", Offset = "0x235D450", VA = "0x235D450", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E62")]
			[Address(RVA = "0x235D454", Offset = "0x235D454", VA = "0x235D454", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E64")]
			[Address(RVA = "0x235D798", Offset = "0x235D798", VA = "0x235D798", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40005DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MechSpider mechSpider;

		[Token(Token = "0x40005DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MechSpiderLeg unSync;

		[Token(Token = "0x40005DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 offset;

		[Token(Token = "0x40005DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float minDelay;

		[Token(Token = "0x40005DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float maxOffset;

		[Token(Token = "0x40005DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float stepSpeed;

		[Token(Token = "0x40005E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float footHeight;

		[Token(Token = "0x40005E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float velocityPrediction;

		[Token(Token = "0x40005E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float raycastFocus;

		[Token(Token = "0x40005E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve yOffset;

		[Token(Token = "0x40005E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform foot;

		[Token(Token = "0x40005E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3 footUpAxis;

		[Token(Token = "0x40005E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float footRotationSpeed;

		[Token(Token = "0x40005E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public ParticleSystem sand;

		[Token(Token = "0x40005E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private IK ik;

		[Token(Token = "0x40005E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float stepProgress;

		[Token(Token = "0x40005EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float lastStepTime;

		[Token(Token = "0x40005EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 defaultPosition;

		[Token(Token = "0x40005EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private RaycastHit hit;

		[Token(Token = "0x40005ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Quaternion lastFootLocalRotation;

		[Token(Token = "0x40005EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Vector3 smoothHitNormal;

		[Token(Token = "0x40005EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private Vector3 lastStepPosition;

		[Token(Token = "0x170000DE")]
		public bool isStepping
		{
			[Token(Token = "0x60006C5")]
			[Address(RVA = "0x235C36C", Offset = "0x235C36C", VA = "0x235C36C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000DF")]
		public Vector3 position
		{
			[Token(Token = "0x60006C6")]
			[Address(RVA = "0x235BFC0", Offset = "0x235BFC0", VA = "0x235BFC0")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60006C7")]
			[Address(RVA = "0x235C380", Offset = "0x235C380", VA = "0x235C380")]
			set
			{
			}
		}

		[Token(Token = "0x60006C8")]
		[Address(RVA = "0x235C3D0", Offset = "0x235C3D0", VA = "0x235C3D0")]
		private void Awake()
		{
		}

		[Token(Token = "0x60006C9")]
		[Address(RVA = "0x235C654", Offset = "0x235C654", VA = "0x235C654")]
		private void AfterIK()
		{
		}

		[Token(Token = "0x60006CA")]
		[Address(RVA = "0x235C870", Offset = "0x235C870", VA = "0x235C870")]
		private void Start()
		{
		}

		[Token(Token = "0x60006CB")]
		[Address(RVA = "0x235CB28", Offset = "0x235CB28", VA = "0x235CB28")]
		private Vector3 GetStepTarget(out bool stepFound, float focus, float distance)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006CC")]
		[Address(RVA = "0x235CEE8", Offset = "0x235CEE8", VA = "0x235CEE8")]
		private void UpdatePosition(float distance)
		{
		}

		[Token(Token = "0x60006CD")]
		[Address(RVA = "0x235D144", Offset = "0x235D144", VA = "0x235D144")]
		private void Update()
		{
		}

		[Token(Token = "0x60006CE")]
		[Address(RVA = "0x235CA70", Offset = "0x235CA70", VA = "0x235CA70")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x15E4A18", Offset = "0x15E4A18")]
		private IEnumerator Step(Vector3 stepStartPosition, Vector3 targetPosition)
		{
			return null;
		}

		[Token(Token = "0x60006CF")]
		[Address(RVA = "0x235D3A8", Offset = "0x235D3A8", VA = "0x235D3A8")]
		public MechSpiderLeg()
		{
		}
	}
	[Token(Token = "0x20000BB")]
	public class MechSpiderParticles : MonoBehaviour
	{
		[Token(Token = "0x40005F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MechSpiderController mechSpiderController;

		[Token(Token = "0x40005F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ParticleSystem particles;

		[Token(Token = "0x60006D0")]
		[Address(RVA = "0x235D800", Offset = "0x235D800", VA = "0x235D800")]
		private void Start()
		{
		}

		[Token(Token = "0x60006D1")]
		[Address(RVA = "0x235D8BC", Offset = "0x235D8BC", VA = "0x235D8BC")]
		private void Update()
		{
		}

		[Token(Token = "0x60006D2")]
		[Address(RVA = "0x235DB50", Offset = "0x235DB50", VA = "0x235DB50")]
		public MechSpiderParticles()
		{
		}
	}
	[Token(Token = "0x20000BC")]
	public class AnimationWarping : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x200023C")]
		public struct Warp
		{
			[Token(Token = "0x4000EE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E1FF8", Offset = "0x15E1FF8")]
			public int animationLayer;

			[Token(Token = "0x4000EE1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E2030", Offset = "0x15E2030")]
			public string animationState;

			[Token(Token = "0x4000EE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E2068", Offset = "0x15E2068")]
			public AnimationCurve weightCurve;

			[Token(Token = "0x4000EE3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E20A0", Offset = "0x15E20A0")]
			public Transform warpFrom;

			[Token(Token = "0x4000EE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E20D8", Offset = "0x15E20D8")]
			public Transform warpTo;

			[Token(Token = "0x4000EE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E2110", Offset = "0x15E2110")]
			public FullBodyBipedEffector effector;
		}

		[Serializable]
		[Token(Token = "0x200023D")]
		public enum EffectorMode
		{
			[Token(Token = "0x4000EE7")]
			PositionOffset,
			[Token(Token = "0x4000EE8")]
			Position
		}

		[Token(Token = "0x40005F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DA180", Offset = "0x15DA180")]
		public Animator animator;

		[Token(Token = "0x40005F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DA1B8", Offset = "0x15DA1B8")]
		public EffectorMode effectorMode;

		[Token(Token = "0x40005F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x15DA1F0", Offset = "0x15DA1F0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DA1F0", Offset = "0x15DA1F0")]
		public Warp[] warps;

		[Token(Token = "0x40005F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private EffectorMode lastMode;

		[Token(Token = "0x60006D3")]
		[Address(RVA = "0x1F2E558", Offset = "0x1F2E558", VA = "0x1F2E558", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60006D4")]
		[Address(RVA = "0x1F2E584", Offset = "0x1F2E584", VA = "0x1F2E584")]
		public float GetWarpWeight(int warpIndex)
		{
			return default(float);
		}

		[Token(Token = "0x60006D5")]
		[Address(RVA = "0x1F2E7A4", Offset = "0x1F2E7A4", VA = "0x1F2E7A4", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x60006D6")]
		[Address(RVA = "0x1F2EB58", Offset = "0x1F2EB58", VA = "0x1F2EB58")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60006D7")]
		[Address(RVA = "0x1F2EBF8", Offset = "0x1F2EBF8", VA = "0x1F2EBF8")]
		public AnimationWarping()
		{
		}
	}
	[Token(Token = "0x20000BD")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x15D4B10", Offset = "0x15D4B10")]
	public class AnimatorController3rdPerson : MonoBehaviour
	{
		[Token(Token = "0x40005F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float rotateSpeed;

		[Token(Token = "0x40005F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float blendSpeed;

		[Token(Token = "0x40005F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float maxAngle;

		[Token(Token = "0x40005F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float moveSpeed;

		[Token(Token = "0x40005FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float rootMotionWeight;

		[Token(Token = "0x40005FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Animator animator;

		[Token(Token = "0x40005FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Vector3 moveBlend;

		[Token(Token = "0x40005FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected Vector3 moveInput;

		[Token(Token = "0x40005FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Vector3 velocity;

		[Token(Token = "0x60006D8")]
		[Address(RVA = "0x1F2EC00", Offset = "0x1F2EC00", VA = "0x1F2EC00", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x60006D9")]
		[Address(RVA = "0x1F2EC60", Offset = "0x1F2EC60", VA = "0x1F2EC60")]
		private void OnAnimatorMove()
		{
		}

		[Token(Token = "0x60006DA")]
		[Address(RVA = "0x1F2EE98", Offset = "0x1F2EE98", VA = "0x1F2EE98", Slot = "5")]
		public virtual void Move(Vector3 moveInput, bool isMoving, Vector3 faceDirection, Vector3 aimTarget)
		{
		}

		[Token(Token = "0x60006DB")]
		[Address(RVA = "0x1F2F0FC", Offset = "0x1F2F0FC", VA = "0x1F2F0FC")]
		public AnimatorController3rdPerson()
		{
		}
	}
	[Token(Token = "0x20000BE")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x15D4B74", Offset = "0x15D4B74")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x15D4B74", Offset = "0x15D4B74")]
	public class AnimatorController3rdPersonIK : AnimatorController3rdPerson
	{
		[Token(Token = "0x40005FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DA240", Offset = "0x15DA240")]
		public float headLookWeight;

		[Token(Token = "0x4000600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3 gunHoldOffset;

		[Token(Token = "0x4000601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Vector3 leftHandOffset;

		[Token(Token = "0x4000602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Recoil recoil;

		[Token(Token = "0x4000603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private AimIK aim;

		[Token(Token = "0x4000604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x4000605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 headLookAxis;

		[Token(Token = "0x4000606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Vector3 leftHandPosRelToRightHand;

		[Token(Token = "0x4000607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Quaternion leftHandRotRelToRightHand;

		[Token(Token = "0x4000608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Vector3 aimTarget;

		[Token(Token = "0x4000609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Quaternion rightHandRotation;

		[Token(Token = "0x60006DC")]
		[Address(RVA = "0x1F2F110", Offset = "0x1F2F110", VA = "0x1F2F110", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60006DD")]
		[Address(RVA = "0x1F2F2BC", Offset = "0x1F2F2BC", VA = "0x1F2F2BC", Slot = "5")]
		public override void Move(Vector3 moveInput, bool isMoving, Vector3 faceDirection, Vector3 aimTarget)
		{
		}

		[Token(Token = "0x60006DE")]
		[Address(RVA = "0x1F2F338", Offset = "0x1F2F338", VA = "0x1F2F338")]
		private void Read()
		{
		}

		[Token(Token = "0x60006DF")]
		[Address(RVA = "0x1F2F490", Offset = "0x1F2F490", VA = "0x1F2F490")]
		private void AimIK()
		{
		}

		[Token(Token = "0x60006E0")]
		[Address(RVA = "0x1F2F4D8", Offset = "0x1F2F4D8", VA = "0x1F2F4D8")]
		private void FBBIK()
		{
		}

		[Token(Token = "0x60006E1")]
		[Address(RVA = "0x1F2FAD0", Offset = "0x1F2FAD0", VA = "0x1F2FAD0")]
		private void OnPreRead()
		{
		}

		[Token(Token = "0x60006E2")]
		[Address(RVA = "0x1F2F894", Offset = "0x1F2F894", VA = "0x1F2F894")]
		private void HeadLookAt(Vector3 lookAtTarget)
		{
		}

		[Token(Token = "0x60006E3")]
		[Address(RVA = "0x1F2FE28", Offset = "0x1F2FE28", VA = "0x1F2FE28")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60006E4")]
		[Address(RVA = "0x1F2FF44", Offset = "0x1F2FF44", VA = "0x1F2FF44")]
		public AnimatorController3rdPersonIK()
		{
		}
	}
	[Token(Token = "0x20000BF")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x15D4C00", Offset = "0x15D4C00")]
	public class CharacterAnimationThirdPersonIK : CharacterAnimationThirdPerson
	{
		[Token(Token = "0x400060A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x60006E5")]
		[Address(RVA = "0x1F3153C", Offset = "0x1F3153C", VA = "0x1F3153C", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60006E6")]
		[Address(RVA = "0x1F315A4", Offset = "0x1F315A4", VA = "0x1F315A4", Slot = "7")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x60006E7")]
		[Address(RVA = "0x1F31868", Offset = "0x1F31868", VA = "0x1F31868")]
		private void RotateEffector(IKEffector effector, Quaternion rotation, float mlp)
		{
		}

		[Token(Token = "0x60006E8")]
		[Address(RVA = "0x1F31A20", Offset = "0x1F31A20", VA = "0x1F31A20")]
		public CharacterAnimationThirdPersonIK()
		{
		}
	}
	[Token(Token = "0x20000C0")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x15D4C64", Offset = "0x15D4C64")]
	public class CharacterController3rdPerson : MonoBehaviour
	{
		[Token(Token = "0x400060B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CameraController cam;

		[Token(Token = "0x400060C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AnimatorController3rdPerson animatorController;

		[Token(Token = "0x170000E0")]
		private static Vector3 inputVector
		{
			[Token(Token = "0x60006EB")]
			[Address(RVA = "0x1F3288C", Offset = "0x1F3288C", VA = "0x1F3288C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000E1")]
		private static Vector3 inputVectorRaw
		{
			[Token(Token = "0x60006EC")]
			[Address(RVA = "0x1F3292C", Offset = "0x1F3292C", VA = "0x1F3292C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x60006E9")]
		[Address(RVA = "0x1F325D0", Offset = "0x1F325D0", VA = "0x1F325D0")]
		private void Start()
		{
		}

		[Token(Token = "0x60006EA")]
		[Address(RVA = "0x1F32648", Offset = "0x1F32648", VA = "0x1F32648")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60006ED")]
		[Address(RVA = "0x1F329CC", Offset = "0x1F329CC", VA = "0x1F329CC")]
		public CharacterController3rdPerson()
		{
		}
	}
	[Token(Token = "0x20000C1")]
	public class EffectorOffset : OffsetModifier
	{
		[Token(Token = "0x400060D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DA258", Offset = "0x15DA258")]
		public float handsMaintainRelativePositionWeight;

		[Token(Token = "0x400060E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 bodyOffset;

		[Token(Token = "0x400060F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 leftShoulderOffset;

		[Token(Token = "0x4000610")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 rightShoulderOffset;

		[Token(Token = "0x4000611")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Vector3 leftThighOffset;

		[Token(Token = "0x4000612")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3 rightThighOffset;

		[Token(Token = "0x4000613")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Vector3 leftHandOffset;

		[Token(Token = "0x4000614")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Vector3 rightHandOffset;

		[Token(Token = "0x4000615")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public Vector3 leftFootOffset;

		[Token(Token = "0x4000616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Vector3 rightFootOffset;

		[Token(Token = "0x60006EE")]
		[Address(RVA = "0x2355C7C", Offset = "0x2355C7C", VA = "0x2355C7C", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x60006EF")]
		[Address(RVA = "0x2356260", Offset = "0x2356260", VA = "0x2356260")]
		public EffectorOffset()
		{
		}
	}
	[Token(Token = "0x20000C2")]
	public class ExplosionDemo : MonoBehaviour
	{
		[Token(Token = "0x4000617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SimpleLocomotion character;

		[Token(Token = "0x4000618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float forceMlp;

		[Token(Token = "0x4000619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float upForce;

		[Token(Token = "0x400061A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float weightFalloffSpeed;

		[Token(Token = "0x400061B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve weightFalloff;

		[Token(Token = "0x400061C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve explosionForceByDistance;

		[Token(Token = "0x400061D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AnimationCurve scale;

		[Token(Token = "0x400061E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float weight;

		[Token(Token = "0x400061F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 defaultScale;

		[Token(Token = "0x4000620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody r;

		[Token(Token = "0x4000621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x60006F0")]
		[Address(RVA = "0x2356268", Offset = "0x2356268", VA = "0x2356268")]
		private void Start()
		{
		}

		[Token(Token = "0x60006F1")]
		[Address(RVA = "0x235631C", Offset = "0x235631C", VA = "0x235631C")]
		private void Update()
		{
		}

		[Token(Token = "0x60006F2")]
		[Address(RVA = "0x2356798", Offset = "0x2356798", VA = "0x2356798")]
		private void SetEffectorWeights(float w)
		{
		}

		[Token(Token = "0x60006F3")]
		[Address(RVA = "0x2356844", Offset = "0x2356844", VA = "0x2356844")]
		public ExplosionDemo()
		{
		}
	}
	[Token(Token = "0x20000C3")]
	public class FBBIKSettings : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200023E")]
		public class Limb
		{
			[Token(Token = "0x4000EE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FBIKChain.Smoothing reachSmoothing;

			[Token(Token = "0x4000EEA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float maintainRelativePositionWeight;

			[Token(Token = "0x4000EEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float mappingWeight;

			[Token(Token = "0x6000E66")]
			[Address(RVA = "0x2356A18", Offset = "0x2356A18", VA = "0x2356A18")]
			public void Apply(FullBodyBipedChain chain, IKSolverFullBodyBiped solver)
			{
			}

			[Token(Token = "0x6000E67")]
			[Address(RVA = "0x2356B4C", Offset = "0x2356B4C", VA = "0x2356B4C")]
			public Limb()
			{
			}
		}

		[Token(Token = "0x4000622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool disableAfterStart;

		[Token(Token = "0x4000624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Limb leftArm;

		[Token(Token = "0x4000625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Limb rightArm;

		[Token(Token = "0x4000626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Limb leftLeg;

		[Token(Token = "0x4000627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Limb rightLeg;

		[Token(Token = "0x4000628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float rootPin;

		[Token(Token = "0x4000629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool bodyEffectChildNodes;

		[Token(Token = "0x60006F4")]
		[Address(RVA = "0x23568CC", Offset = "0x23568CC", VA = "0x23568CC")]
		public void UpdateSettings()
		{
		}

		[Token(Token = "0x60006F5")]
		[Address(RVA = "0x2356A9C", Offset = "0x2356A9C", VA = "0x2356A9C")]
		private void Start()
		{
		}

		[Token(Token = "0x60006F6")]
		[Address(RVA = "0x2356B38", Offset = "0x2356B38", VA = "0x2356B38")]
		private void Update()
		{
		}

		[Token(Token = "0x60006F7")]
		[Address(RVA = "0x2356B3C", Offset = "0x2356B3C", VA = "0x2356B3C")]
		public FBBIKSettings()
		{
		}
	}
	[Token(Token = "0x20000C4")]
	public class FBIKBendGoal : MonoBehaviour
	{
		[Token(Token = "0x400062A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x400062B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FullBodyBipedChain chain;

		[Token(Token = "0x400062C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float weight;

		[Token(Token = "0x60006F8")]
		[Address(RVA = "0x2356B5C", Offset = "0x2356B5C", VA = "0x2356B5C")]
		private void Start()
		{
		}

		[Token(Token = "0x60006F9")]
		[Address(RVA = "0x2356BC8", Offset = "0x2356BC8", VA = "0x2356BC8")]
		private void Update()
		{
		}

		[Token(Token = "0x60006FA")]
		[Address(RVA = "0x2356CAC", Offset = "0x2356CAC", VA = "0x2356CAC")]
		public FBIKBendGoal()
		{
		}
	}
	[Token(Token = "0x20000C5")]
	public class FBIKBoxing : MonoBehaviour
	{
		[Token(Token = "0x400062D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DA270", Offset = "0x15DA270")]
		public Transform target;

		[Token(Token = "0x400062E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DA2A8", Offset = "0x15DA2A8")]
		public Transform pin;

		[Token(Token = "0x400062F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DA2E0", Offset = "0x15DA2E0")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DA318", Offset = "0x15DA318")]
		public AimIK aim;

		[Token(Token = "0x4000631")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DA350", Offset = "0x15DA350")]
		public float weight;

		[Token(Token = "0x4000632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DA388", Offset = "0x15DA388")]
		public FullBodyBipedEffector effector;

		[Token(Token = "0x4000633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DA3C0", Offset = "0x15DA3C0")]
		public AnimationCurve aimWeight;

		[Token(Token = "0x4000634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Animator animator;

		[Token(Token = "0x60006FB")]
		[Address(RVA = "0x2356CB4", Offset = "0x2356CB4", VA = "0x2356CB4")]
		private void Start()
		{
		}

		[Token(Token = "0x60006FC")]
		[Address(RVA = "0x2356D14", Offset = "0x2356D14", VA = "0x2356D14")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60006FD")]
		[Address(RVA = "0x2356EB0", Offset = "0x2356EB0", VA = "0x2356EB0")]
		public FBIKBoxing()
		{
		}
	}
	[Token(Token = "0x20000C6")]
	public class FBIKHandsOnProp : MonoBehaviour
	{
		[Token(Token = "0x4000635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool leftHanded;

		[Token(Token = "0x60006FE")]
		[Address(RVA = "0x2356EB8", Offset = "0x2356EB8", VA = "0x2356EB8")]
		private void Awake()
		{
		}

		[Token(Token = "0x60006FF")]
		[Address(RVA = "0x2356F88", Offset = "0x2356F88", VA = "0x2356F88")]
		private void OnPreRead()
		{
		}

		[Token(Token = "0x6000700")]
		[Address(RVA = "0x2357018", Offset = "0x2357018", VA = "0x2357018")]
		private void HandsOnProp(IKEffector mainHand, IKEffector otherHand)
		{
		}

		[Token(Token = "0x6000701")]
		[Address(RVA = "0x235752C", Offset = "0x235752C", VA = "0x235752C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000702")]
		[Address(RVA = "0x2357648", Offset = "0x2357648", VA = "0x2357648")]
		public FBIKHandsOnProp()
		{
		}
	}
	[Token(Token = "0x20000C7")]
	public class FPSAiming : MonoBehaviour
	{
		[Token(Token = "0x4000637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DA3F8", Offset = "0x15DA3F8")]
		public float aimWeight;

		[Token(Token = "0x4000638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DA410", Offset = "0x15DA410")]
		public float sightWeight;

		[Token(Token = "0x4000639")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DA428", Offset = "0x15DA428")]
		public float maxAngle;

		[Token(Token = "0x400063A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 aimOffset;

		[Token(Token = "0x400063B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool animatePhysics;

		[Token(Token = "0x400063C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform gun;

		[Token(Token = "0x400063D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform gunTarget;

		[Token(Token = "0x400063E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x400063F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AimIK gunAim;

		[Token(Token = "0x4000640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public CameraControllerFPS cam;

		[Token(Token = "0x4000641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Recoil recoil;

		[Token(Token = "0x4000642")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DA444", Offset = "0x15DA444")]
		public float cameraRecoilWeight;

		[Token(Token = "0x4000643")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Vector3 gunTargetDefaultLocalPosition;

		[Token(Token = "0x4000644")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Vector3 gunTargetDefaultLocalRotation;

		[Token(Token = "0x4000645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector3 camDefaultLocalPosition;

		[Token(Token = "0x4000646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 camRelativeToGunTarget;

		[Token(Token = "0x4000647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private bool updateFrame;

		[Token(Token = "0x6000703")]
		[Address(RVA = "0x23579DC", Offset = "0x23579DC", VA = "0x23579DC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000704")]
		[Address(RVA = "0x2357B3C", Offset = "0x2357B3C", VA = "0x2357B3C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000705")]
		[Address(RVA = "0x2357B48", Offset = "0x2357B48", VA = "0x2357B48")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000706")]
		[Address(RVA = "0x2357E8C", Offset = "0x2357E8C", VA = "0x2357E8C")]
		private void Aiming()
		{
		}

		[Token(Token = "0x6000707")]
		[Address(RVA = "0x23580F4", Offset = "0x23580F4", VA = "0x23580F4")]
		private void LookDownTheSight()
		{
		}

		[Token(Token = "0x6000708")]
		[Address(RVA = "0x2357C10", Offset = "0x2357C10", VA = "0x2357C10")]
		private void RotateCharacter()
		{
		}

		[Token(Token = "0x6000709")]
		[Address(RVA = "0x2358B14", Offset = "0x2358B14", VA = "0x2358B14")]
		public FPSAiming()
		{
		}
	}
	[Token(Token = "0x20000C8")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x15D4CC8", Offset = "0x15D4CC8")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x15D4CC8", Offset = "0x15D4CC8")]
	public class FPSCharacter : MonoBehaviour
	{
		[Token(Token = "0x4000648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DA45C", Offset = "0x15DA45C")]
		public float walkSpeed;

		[Token(Token = "0x4000649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float sVel;

		[Token(Token = "0x400064A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator animator;

		[Token(Token = "0x400064B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private FPSAiming FPSAiming;

		[Token(Token = "0x600070A")]
		[Address(RVA = "0x2358B34", Offset = "0x2358B34", VA = "0x2358B34")]
		private void Start()
		{
		}

		[Token(Token = "0x600070B")]
		[Address(RVA = "0x2358BB8", Offset = "0x2358BB8", VA = "0x2358BB8")]
		private void Update()
		{
		}

		[Token(Token = "0x600070C")]
		[Address(RVA = "0x2358CDC", Offset = "0x2358CDC", VA = "0x2358CDC")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600070D")]
		[Address(RVA = "0x2358D8C", Offset = "0x2358D8C", VA = "0x2358D8C")]
		public FPSCharacter()
		{
		}
	}
	[Token(Token = "0x20000C9")]
	public class HitReactionTrigger : MonoBehaviour
	{
		[Token(Token = "0x400064C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HitReaction hitReaction;

		[Token(Token = "0x400064D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float hitForce;

		[Token(Token = "0x400064E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string colliderName;

		[Token(Token = "0x600070E")]
		[Address(RVA = "0x2359120", Offset = "0x2359120", VA = "0x2359120")]
		private void Update()
		{
		}

		[Token(Token = "0x600070F")]
		[Address(RVA = "0x23592EC", Offset = "0x23592EC", VA = "0x23592EC")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000710")]
		[Address(RVA = "0x23594B0", Offset = "0x23594B0", VA = "0x23594B0")]
		public HitReactionTrigger()
		{
		}
	}
	[Token(Token = "0x20000CA")]
	public class HoldingHands : MonoBehaviour
	{
		[Token(Token = "0x400064F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK rightHandChar;

		[Token(Token = "0x4000650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FullBodyBipedIK leftHandChar;

		[Token(Token = "0x4000651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform rightHandTarget;

		[Token(Token = "0x4000652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform leftHandTarget;

		[Token(Token = "0x4000653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float crossFade;

		[Token(Token = "0x4000654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float speed;

		[Token(Token = "0x4000655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Quaternion rightHandRotation;

		[Token(Token = "0x4000656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion leftHandRotation;

		[Token(Token = "0x6000711")]
		[Address(RVA = "0x2359860", Offset = "0x2359860", VA = "0x2359860")]
		private void Start()
		{
		}

		[Token(Token = "0x6000712")]
		[Address(RVA = "0x2359A0C", Offset = "0x2359A0C", VA = "0x2359A0C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000713")]
		[Address(RVA = "0x2359DC8", Offset = "0x2359DC8", VA = "0x2359DC8")]
		public HoldingHands()
		{
		}
	}
	[Token(Token = "0x20000CB")]
	public class InteractionC2CDemo : MonoBehaviour
	{
		[Token(Token = "0x4000657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractionSystem character1;

		[Token(Token = "0x4000658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractionSystem character2;

		[Token(Token = "0x4000659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractionObject handShake;

		[Token(Token = "0x6000714")]
		[Address(RVA = "0x2359DD8", Offset = "0x2359DD8", VA = "0x2359DD8")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000715")]
		[Address(RVA = "0x2359F0C", Offset = "0x2359F0C", VA = "0x2359F0C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000716")]
		[Address(RVA = "0x235A05C", Offset = "0x235A05C", VA = "0x235A05C")]
		public InteractionC2CDemo()
		{
		}
	}
	[Token(Token = "0x20000CC")]
	public class InteractionDemo : MonoBehaviour
	{
		[Token(Token = "0x400065A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractionSystem interactionSystem;

		[Token(Token = "0x400065B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool interrupt;

		[Token(Token = "0x400065C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractionObject ball;

		[Token(Token = "0x400065D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public InteractionObject benchMain;

		[Token(Token = "0x400065E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public InteractionObject benchHands;

		[Token(Token = "0x400065F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public InteractionObject button;

		[Token(Token = "0x4000660")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public InteractionObject cigarette;

		[Token(Token = "0x4000661")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public InteractionObject door;

		[Token(Token = "0x4000662")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool isSitting;

		[Token(Token = "0x6000717")]
		[Address(RVA = "0x235A064", Offset = "0x235A064", VA = "0x235A064")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000718")]
		[Address(RVA = "0x235A734", Offset = "0x235A734", VA = "0x235A734")]
		public InteractionDemo()
		{
		}
	}
	[Token(Token = "0x20000CD")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x15D4D54", Offset = "0x15D4D54")]
	public class InteractionSystemTestGUI : MonoBehaviour
	{
		[Token(Token = "0x4000663")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DA474", Offset = "0x15DA474")]
		public InteractionObject interactionObject;

		[Token(Token = "0x4000664")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DA4AC", Offset = "0x15DA4AC")]
		public FullBodyBipedEffector[] effectors;

		[Token(Token = "0x4000665")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private InteractionSystem interactionSystem;

		[Token(Token = "0x6000719")]
		[Address(RVA = "0x235A73C", Offset = "0x235A73C", VA = "0x235A73C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600071A")]
		[Address(RVA = "0x235A79C", Offset = "0x235A79C", VA = "0x235A79C")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600071B")]
		[Address(RVA = "0x235AAA8", Offset = "0x235AAA8", VA = "0x235AAA8")]
		public InteractionSystemTestGUI()
		{
		}
	}
	[Token(Token = "0x20000CE")]
	public class KissingRig : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200023F")]
		public class Partner
		{
			[Token(Token = "0x4000EEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FullBodyBipedIK ik;

			[Token(Token = "0x4000EED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform mouth;

			[Token(Token = "0x4000EEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform mouthTarget;

			[Token(Token = "0x4000EEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Transform touchTargetLeftHand;

			[Token(Token = "0x4000EF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Transform touchTargetRightHand;

			[Token(Token = "0x4000EF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float bodyWeightHorizontal;

			[Token(Token = "0x4000EF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float bodyWeightVertical;

			[Token(Token = "0x4000EF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public float neckRotationWeight;

			[Token(Token = "0x4000EF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public float headTiltAngle;

			[Token(Token = "0x4000EF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Vector3 headTiltAxis;

			[Token(Token = "0x4000EF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private Quaternion neckRotation;

			[Token(Token = "0x170001CA")]
			private Transform neck
			{
				[Token(Token = "0x6000E6A")]
				[Address(RVA = "0x235B3AC", Offset = "0x235B3AC", VA = "0x235B3AC")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E68")]
			[Address(RVA = "0x235AAE4", Offset = "0x235AAE4", VA = "0x235AAE4")]
			public void Initiate()
			{
			}

			[Token(Token = "0x6000E69")]
			[Address(RVA = "0x235AB64", Offset = "0x235AB64", VA = "0x235AB64")]
			public void Update(float weight)
			{
			}

			[Token(Token = "0x6000E6B")]
			[Address(RVA = "0x235B1D0", Offset = "0x235B1D0", VA = "0x235B1D0")]
			private void InverseTransformEffector(FullBodyBipedEffector effector, Transform target, Vector3 targetPosition, float weight)
			{
			}

			[Token(Token = "0x6000E6C")]
			[Address(RVA = "0x235B404", Offset = "0x235B404", VA = "0x235B404")]
			public Partner()
			{
			}
		}

		[Token(Token = "0x4000666")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Partner partner1;

		[Token(Token = "0x4000667")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Partner partner2;

		[Token(Token = "0x4000668")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float weight;

		[Token(Token = "0x4000669")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int iterations;

		[Token(Token = "0x600071C")]
		[Address(RVA = "0x235AAB0", Offset = "0x235AAB0", VA = "0x235AAB0")]
		private void Start()
		{
		}

		[Token(Token = "0x600071D")]
		[Address(RVA = "0x235AB04", Offset = "0x235AB04", VA = "0x235AB04")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600071E")]
		[Address(RVA = "0x235B1C0", Offset = "0x235B1C0", VA = "0x235B1C0")]
		public KissingRig()
		{
		}
	}
	[Token(Token = "0x20000CF")]
	public class MotionAbsorb : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x2000240")]
		public enum Mode
		{
			[Token(Token = "0x4000EF8")]
			Position,
			[Token(Token = "0x4000EF9")]
			PositionOffset
		}

		[Serializable]
		[Token(Token = "0x2000241")]
		public class Absorber
		{
			[Token(Token = "0x4000EFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E2148", Offset = "0x15E2148")]
			public FullBodyBipedEffector effector;

			[Token(Token = "0x4000EFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E2180", Offset = "0x15E2180")]
			public float weight;

			[Token(Token = "0x4000EFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Vector3 position;

			[Token(Token = "0x4000EFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private Quaternion rotation;

			[Token(Token = "0x4000EFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private IKEffector e;

			[Token(Token = "0x6000E6D")]
			[Address(RVA = "0x235DCCC", Offset = "0x235DCCC", VA = "0x235DCCC")]
			public void SetToBone(IKSolverFullBodyBiped solver, Mode mode)
			{
			}

			[Token(Token = "0x6000E6E")]
			[Address(RVA = "0x235DEC0", Offset = "0x235DEC0", VA = "0x235DEC0")]
			public void UpdateEffectorWeights(float w)
			{
			}

			[Token(Token = "0x6000E6F")]
			[Address(RVA = "0x235DEFC", Offset = "0x235DEFC", VA = "0x235DEFC")]
			public void SetPosition(float w)
			{
			}

			[Token(Token = "0x6000E70")]
			[Address(RVA = "0x235E0AC", Offset = "0x235E0AC", VA = "0x235E0AC")]
			public void SetRotation(float w)
			{
			}

			[Token(Token = "0x6000E71")]
			[Address(RVA = "0x235E2F4", Offset = "0x235E2F4", VA = "0x235E2F4")]
			public Absorber()
			{
			}
		}

		[Token(Token = "0x400066A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DA4E4", Offset = "0x15DA4E4")]
		public Mode mode;

		[Token(Token = "0x400066B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DA51C", Offset = "0x15DA51C")]
		public Absorber[] absorbers;

		[Token(Token = "0x400066C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DA554", Offset = "0x15DA554")]
		public AnimationCurve falloff;

		[Token(Token = "0x400066D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DA58C", Offset = "0x15DA58C")]
		public float falloffSpeed;

		[Token(Token = "0x400066E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float timer;

		[Token(Token = "0x400066F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float w;

		[Token(Token = "0x4000670")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Mode initialMode;

		[Token(Token = "0x600071F")]
		[Address(RVA = "0x235DB58", Offset = "0x235DB58", VA = "0x235DB58", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000720")]
		[Address(RVA = "0x235DC40", Offset = "0x235DC40", VA = "0x235DC40")]
		private void OnCollisionEnter(Collision c)
		{
		}

		[Token(Token = "0x6000721")]
		[Address(RVA = "0x235DDB4", Offset = "0x235DDB4", VA = "0x235DDB4", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000722")]
		[Address(RVA = "0x235E024", Offset = "0x235E024", VA = "0x235E024")]
		private void AfterIK()
		{
		}

		[Token(Token = "0x6000723")]
		[Address(RVA = "0x235E1BC", Offset = "0x235E1BC", VA = "0x235E1BC", Slot = "6")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6000724")]
		[Address(RVA = "0x235E2E4", Offset = "0x235E2E4", VA = "0x235E2E4")]
		public MotionAbsorb()
		{
		}
	}
	[Token(Token = "0x20000D0")]
	public class MotionAbsorbCharacter : MonoBehaviour
	{
		[Token(Token = "0x4000671")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Animator animator;

		[Token(Token = "0x4000672")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MotionAbsorb motionAbsorb;

		[Token(Token = "0x4000673")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform cube;

		[Token(Token = "0x4000674")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float cubeRandomPosition;

		[Token(Token = "0x4000675")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve motionAbsorbWeight;

		[Token(Token = "0x4000676")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 cubeDefaultPosition;

		[Token(Token = "0x4000677")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private AnimatorStateInfo info;

		[Token(Token = "0x4000678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody cubeRigidbody;

		[Token(Token = "0x6000725")]
		[Address(RVA = "0x235E374", Offset = "0x235E374", VA = "0x235E374")]
		private void Start()
		{
		}

		[Token(Token = "0x6000726")]
		[Address(RVA = "0x235E3F4", Offset = "0x235E3F4", VA = "0x235E3F4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000727")]
		[Address(RVA = "0x235E4C0", Offset = "0x235E4C0", VA = "0x235E4C0")]
		private void SwingStart()
		{
		}

		[Token(Token = "0x6000728")]
		[Address(RVA = "0x235E620", Offset = "0x235E620", VA = "0x235E620")]
		public MotionAbsorbCharacter()
		{
		}
	}
	[Token(Token = "0x20000D1")]
	public class OffsetEffector : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x2000242")]
		public class EffectorLink
		{
			[Token(Token = "0x4000EFF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FullBodyBipedEffector effectorType;

			[Token(Token = "0x4000F00")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float weightMultiplier;

			[Token(Token = "0x4000F01")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[HideInInspector]
			public Vector3 localPosition;

			[Token(Token = "0x6000E72")]
			[Address(RVA = "0x235F3C0", Offset = "0x235F3C0", VA = "0x235F3C0")]
			public EffectorLink()
			{
			}
		}

		[Token(Token = "0x4000679")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public EffectorLink[] effectorLinks;

		[Token(Token = "0x6000729")]
		[Address(RVA = "0x235F08C", Offset = "0x235F08C", VA = "0x235F08C", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x600072A")]
		[Address(RVA = "0x235F18C", Offset = "0x235F18C", VA = "0x235F18C", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x600072B")]
		[Address(RVA = "0x235F3B8", Offset = "0x235F3B8", VA = "0x235F3B8")]
		public OffsetEffector()
		{
		}
	}
	[Token(Token = "0x20000D2")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x15D4DB8", Offset = "0x15D4DB8")]
	public class PendulumExample : MonoBehaviour
	{
		[Token(Token = "0x400067A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DA5C4", Offset = "0x15DA5C4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DA5C4", Offset = "0x15DA5C4")]
		public float weight;

		[Token(Token = "0x400067B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DA618", Offset = "0x15DA618")]
		public float hangingDistanceMlp;

		[Token(Token = "0x400067C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DA650", Offset = "0x15DA650")]
		[HideInInspector]
		public Vector3 rootTargetPosition;

		[Token(Token = "0x400067D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DA69C", Offset = "0x15DA69C")]
		[HideInInspector]
		public Quaternion rootTargetRotation;

		[Token(Token = "0x400067E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform target;

		[Token(Token = "0x400067F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform leftHandTarget;

		[Token(Token = "0x4000680")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform rightHandTarget;

		[Token(Token = "0x4000681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform leftFootTarget;

		[Token(Token = "0x4000682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform rightFootTarget;

		[Token(Token = "0x4000683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform pelvisTarget;

		[Token(Token = "0x4000684")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform bodyTarget;

		[Token(Token = "0x4000685")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform headTarget;

		[Token(Token = "0x4000686")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Vector3 pelvisDownAxis;

		[Token(Token = "0x4000687")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x4000688")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Quaternion rootRelativeToPelvis;

		[Token(Token = "0x4000689")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3 pelvisToRoot;

		[Token(Token = "0x400068A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float lastWeight;

		[Token(Token = "0x600072C")]
		[Address(RVA = "0x235F3D0", Offset = "0x235F3D0", VA = "0x235F3D0")]
		private void Start()
		{
		}

		[Token(Token = "0x600072D")]
		[Address(RVA = "0x235F720", Offset = "0x235F720", VA = "0x235F720")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600072E")]
		[Address(RVA = "0x235FE70", Offset = "0x235FE70", VA = "0x235FE70")]
		public PendulumExample()
		{
		}
	}
	[Token(Token = "0x20000D3")]
	public abstract class PickUp2Handed : MonoBehaviour
	{
		[Token(Token = "0x400068B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int GUIspace;

		[Token(Token = "0x400068C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractionSystem interactionSystem;

		[Token(Token = "0x400068D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractionObject obj;

		[Token(Token = "0x400068E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform pivot;

		[Token(Token = "0x400068F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform holdPoint;

		[Token(Token = "0x4000690")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float pickUpTime;

		[Token(Token = "0x4000691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float holdWeight;

		[Token(Token = "0x4000692")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float holdWeightVel;

		[Token(Token = "0x4000693")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 pickUpPosition;

		[Token(Token = "0x4000694")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion pickUpRotation;

		[Token(Token = "0x170000E2")]
		private bool holding
		{
			[Token(Token = "0x6000736")]
			[Address(RVA = "0x23601B4", Offset = "0x23601B4", VA = "0x23601B4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600072F")]
		[Address(RVA = "0x235FEF4", Offset = "0x235FEF4", VA = "0x235FEF4")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000730")]
		protected abstract void RotatePivot();

		[Token(Token = "0x6000731")]
		[Address(RVA = "0x23601D4", Offset = "0x23601D4", VA = "0x23601D4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000732")]
		[Address(RVA = "0x236036C", Offset = "0x236036C", VA = "0x236036C")]
		private void OnPause(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6000733")]
		[Address(RVA = "0x23604E8", Offset = "0x23604E8", VA = "0x23604E8")]
		private void OnStart(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6000734")]
		[Address(RVA = "0x23605C8", Offset = "0x23605C8", VA = "0x23605C8")]
		private void OnDrop(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6000735")]
		[Address(RVA = "0x23606F4", Offset = "0x23606F4", VA = "0x23606F4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000737")]
		[Address(RVA = "0x2360904", Offset = "0x2360904", VA = "0x2360904")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000738")]
		[Address(RVA = "0x2360AE8", Offset = "0x2360AE8", VA = "0x2360AE8")]
		protected PickUp2Handed()
		{
		}
	}
	[Token(Token = "0x20000D4")]
	public class PickUpBox : PickUp2Handed
	{
		[Token(Token = "0x6000739")]
		[Address(RVA = "0x2360AFC", Offset = "0x2360AFC", VA = "0x2360AFC", Slot = "4")]
		protected override void RotatePivot()
		{
		}

		[Token(Token = "0x600073A")]
		[Address(RVA = "0x2360CF0", Offset = "0x2360CF0", VA = "0x2360CF0")]
		public PickUpBox()
		{
		}
	}
	[Token(Token = "0x20000D5")]
	public class PickUpSphere : PickUp2Handed
	{
		[Token(Token = "0x600073B")]
		[Address(RVA = "0x2360D04", Offset = "0x2360D04", VA = "0x2360D04", Slot = "4")]
		protected override void RotatePivot()
		{
		}

		[Token(Token = "0x600073C")]
		[Address(RVA = "0x2360EB0", Offset = "0x2360EB0", VA = "0x2360EB0")]
		public PickUpSphere()
		{
		}
	}
	[Token(Token = "0x20000D6")]
	public class RagdollUtilityDemo : MonoBehaviour
	{
		[Token(Token = "0x4000695")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RagdollUtility ragdollUtility;

		[Token(Token = "0x4000696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform root;

		[Token(Token = "0x4000697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Rigidbody pelvis;

		[Token(Token = "0x600073D")]
		[Address(RVA = "0x2361650", Offset = "0x2361650", VA = "0x2361650")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600073E")]
		[Address(RVA = "0x2361728", Offset = "0x2361728", VA = "0x2361728")]
		private void Update()
		{
		}

		[Token(Token = "0x600073F")]
		[Address(RVA = "0x23618D0", Offset = "0x23618D0", VA = "0x23618D0")]
		public RagdollUtilityDemo()
		{
		}
	}
	[Token(Token = "0x20000D7")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x15D4E1C", Offset = "0x15D4E1C")]
	public class RecoilTest : MonoBehaviour
	{
		[Token(Token = "0x4000698")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float magnitude;

		[Token(Token = "0x4000699")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Recoil recoil;

		[Token(Token = "0x6000740")]
		[Address(RVA = "0x23618D8", Offset = "0x23618D8", VA = "0x23618D8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000741")]
		[Address(RVA = "0x2361938", Offset = "0x2361938", VA = "0x2361938")]
		private void Update()
		{
		}

		[Token(Token = "0x6000742")]
		[Address(RVA = "0x2361994", Offset = "0x2361994", VA = "0x2361994")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000743")]
		[Address(RVA = "0x2361A6C", Offset = "0x2361A6C", VA = "0x2361A6C")]
		public RecoilTest()
		{
		}
	}
	[Token(Token = "0x20000D8")]
	public class ResetInteractionObject : MonoBehaviour
	{
		[Token(Token = "0x2000243")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D56A4", Offset = "0x15D56A4")]
		private sealed class <ResetObject>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F03")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float resetTime;

			[Token(Token = "0x4000F05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ResetInteractionObject <>4__this;

			[Token(Token = "0x170001CB")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E76")]
				[Address(RVA = "0x2361E18", Offset = "0x2361E18", VA = "0x2361E18", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001CC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E78")]
				[Address(RVA = "0x2361E80", Offset = "0x2361E80", VA = "0x2361E80", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E73")]
			[Address(RVA = "0x2361C1C", Offset = "0x2361C1C", VA = "0x2361C1C")]
			[DebuggerHidden]
			public <ResetObject>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6000E74")]
			[Address(RVA = "0x2361C58", Offset = "0x2361C58", VA = "0x2361C58", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E75")]
			[Address(RVA = "0x2361C5C", Offset = "0x2361C5C", VA = "0x2361C5C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E77")]
			[Address(RVA = "0x2361E20", Offset = "0x2361E20", VA = "0x2361E20", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400069A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float resetDelay;

		[Token(Token = "0x400069B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Vector3 defaultPosition;

		[Token(Token = "0x400069C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Quaternion defaultRotation;

		[Token(Token = "0x400069D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform defaultParent;

		[Token(Token = "0x400069E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Rigidbody r;

		[Token(Token = "0x6000744")]
		[Address(RVA = "0x2361A7C", Offset = "0x2361A7C", VA = "0x2361A7C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000745")]
		[Address(RVA = "0x2361B48", Offset = "0x2361B48", VA = "0x2361B48")]
		private void OnPickUp(Transform t)
		{
		}

		[Token(Token = "0x6000746")]
		[Address(RVA = "0x2361B90", Offset = "0x2361B90", VA = "0x2361B90")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x15E4A7C", Offset = "0x15E4A7C")]
		private IEnumerator ResetObject(float resetTime)
		{
			return null;
		}

		[Token(Token = "0x6000747")]
		[Address(RVA = "0x2361C48", Offset = "0x2361C48", VA = "0x2361C48")]
		public ResetInteractionObject()
		{
		}
	}
	[Token(Token = "0x20000D9")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x15D4E80", Offset = "0x15D4E80")]
	public class SoccerDemo : MonoBehaviour
	{
		[Token(Token = "0x2000244")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D56B4", Offset = "0x15D56B4")]
		private sealed class <ResetDelayed>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SoccerDemo <>4__this;

			[Token(Token = "0x170001CD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E7C")]
				[Address(RVA = "0x2363658", Offset = "0x2363658", VA = "0x2363658", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001CE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E7E")]
				[Address(RVA = "0x23636C0", Offset = "0x23636C0", VA = "0x23636C0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E79")]
			[Address(RVA = "0x23634E8", Offset = "0x23634E8", VA = "0x23634E8")]
			[DebuggerHidden]
			public <ResetDelayed>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x6000E7A")]
			[Address(RVA = "0x236351C", Offset = "0x236351C", VA = "0x236351C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E7B")]
			[Address(RVA = "0x2363520", Offset = "0x2363520", VA = "0x2363520", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E7D")]
			[Address(RVA = "0x2363660", Offset = "0x2363660", VA = "0x2363660", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400069F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Animator animator;

		[Token(Token = "0x40006A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 defaultPosition;

		[Token(Token = "0x40006A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion defaultRotation;

		[Token(Token = "0x6000748")]
		[Address(RVA = "0x23633B0", Offset = "0x23633B0", VA = "0x23633B0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000749")]
		[Address(RVA = "0x236346C", Offset = "0x236346C", VA = "0x236346C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x15E4AE0", Offset = "0x15E4AE0")]
		private IEnumerator ResetDelayed()
		{
			return null;
		}

		[Token(Token = "0x600074A")]
		[Address(RVA = "0x2363514", Offset = "0x2363514", VA = "0x2363514")]
		public SoccerDemo()
		{
		}
	}
	[Token(Token = "0x20000DA")]
	public class TouchWalls : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000245")]
		public class EffectorLink
		{
			[Token(Token = "0x4000F09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool enabled;

			[Token(Token = "0x4000F0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public FullBodyBipedEffector effectorType;

			[Token(Token = "0x4000F0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public InteractionObject interactionObject;

			[Token(Token = "0x4000F0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform spherecastFrom;

			[Token(Token = "0x4000F0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float spherecastRadius;

			[Token(Token = "0x4000F0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float minDistance;

			[Token(Token = "0x4000F0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public LayerMask touchLayers;

			[Token(Token = "0x4000F10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float lerpSpeed;

			[Token(Token = "0x4000F11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float minSwitchTime;

			[Token(Token = "0x4000F12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float releaseDistance;

			[Token(Token = "0x4000F13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public bool sliding;

			[Token(Token = "0x4000F14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private Vector3 raycastDirectionLocal;

			[Token(Token = "0x4000F15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private float raycastDistance;

			[Token(Token = "0x4000F16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private bool inTouch;

			[Token(Token = "0x4000F17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private RaycastHit hit;

			[Token(Token = "0x4000F18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			private Vector3 targetPosition;

			[Token(Token = "0x4000F19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			private Quaternion targetRotation;

			[Token(Token = "0x4000F1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			private bool initiated;

			[Token(Token = "0x4000F1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
			private float nextSwitchTime;

			[Token(Token = "0x4000F1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			private float speedF;

			[Token(Token = "0x6000E7F")]
			[Address(RVA = "0x2363C68", Offset = "0x2363C68", VA = "0x2363C68")]
			public void Initiate(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x6000E80")]
			[Address(RVA = "0x2364978", Offset = "0x2364978", VA = "0x2364978")]
			private bool FindWalls(Vector3 direction)
			{
				return default(bool);
			}

			[Token(Token = "0x6000E81")]
			[Address(RVA = "0x2363FE4", Offset = "0x2363FE4", VA = "0x2363FE4")]
			public void Update(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x6000E82")]
			[Address(RVA = "0x2364A60", Offset = "0x2364A60", VA = "0x2364A60")]
			private void StopTouch(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x6000E83")]
			[Address(RVA = "0x2364BFC", Offset = "0x2364BFC", VA = "0x2364BFC")]
			private void OnInteractionStart(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
			{
			}

			[Token(Token = "0x6000E84")]
			[Address(RVA = "0x2364C98", Offset = "0x2364C98", VA = "0x2364C98")]
			private void OnInteractionResume(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
			{
			}

			[Token(Token = "0x6000E85")]
			[Address(RVA = "0x2364D30", Offset = "0x2364D30", VA = "0x2364D30")]
			private void OnInteractionStop(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
			{
			}

			[Token(Token = "0x6000E86")]
			[Address(RVA = "0x23647C4", Offset = "0x23647C4", VA = "0x23647C4")]
			public void Destroy(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x6000E87")]
			[Address(RVA = "0x2364DC8", Offset = "0x2364DC8", VA = "0x2364DC8")]
			public EffectorLink()
			{
			}
		}

		[Token(Token = "0x40006A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractionSystem interactionSystem;

		[Token(Token = "0x40006A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EffectorLink[] effectorLinks;

		[Token(Token = "0x600074B")]
		[Address(RVA = "0x2363BF0", Offset = "0x2363BF0", VA = "0x2363BF0")]
		private void Start()
		{
		}

		[Token(Token = "0x600074C")]
		[Address(RVA = "0x2363F78", Offset = "0x2363F78", VA = "0x2363F78")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600074D")]
		[Address(RVA = "0x23646FC", Offset = "0x23646FC", VA = "0x23646FC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600074E")]
		[Address(RVA = "0x2364970", Offset = "0x2364970", VA = "0x2364970")]
		public TouchWalls()
		{
		}
	}
	[Token(Token = "0x20000DB")]
	public class TransferMotion : MonoBehaviour
	{
		[Token(Token = "0x40006A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DA6E8", Offset = "0x15DA6E8")]
		public Transform to;

		[Token(Token = "0x40006A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DA720", Offset = "0x15DA720")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DA720", Offset = "0x15DA720")]
		public float transferMotion;

		[Token(Token = "0x40006A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 lastPosition;

		[Token(Token = "0x600074F")]
		[Address(RVA = "0x2364DFC", Offset = "0x2364DFC", VA = "0x2364DFC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000750")]
		[Address(RVA = "0x2364E38", Offset = "0x2364E38", VA = "0x2364E38")]
		private void Update()
		{
		}

		[Token(Token = "0x6000751")]
		[Address(RVA = "0x2364F90", Offset = "0x2364F90", VA = "0x2364F90")]
		public TransferMotion()
		{
		}
	}
	[Token(Token = "0x20000DC")]
	public class TwoHandedProp : MonoBehaviour
	{
		[Token(Token = "0x40006A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DA774", Offset = "0x15DA774")]
		public Transform leftHandTarget;

		[Token(Token = "0x40006A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x40006A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 targetPosRelativeToRight;

		[Token(Token = "0x40006AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Quaternion targetRotRelativeToRight;

		[Token(Token = "0x6000752")]
		[Address(RVA = "0x2365164", Offset = "0x2365164", VA = "0x2365164")]
		private void Start()
		{
		}

		[Token(Token = "0x6000753")]
		[Address(RVA = "0x2365344", Offset = "0x2365344", VA = "0x2365344")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000754")]
		[Address(RVA = "0x23655E0", Offset = "0x23655E0", VA = "0x23655E0")]
		private void AfterFBBIK()
		{
		}

		[Token(Token = "0x6000755")]
		[Address(RVA = "0x23656AC", Offset = "0x23656AC", VA = "0x23656AC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000756")]
		[Address(RVA = "0x23657C8", Offset = "0x23657C8", VA = "0x23657C8")]
		public TwoHandedProp()
		{
		}
	}
	[Token(Token = "0x20000DD")]
	public class UserControlInteractions : UserControlThirdPerson
	{
		[Token(Token = "0x40006AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public CharacterThirdPerson character;

		[Token(Token = "0x40006AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public InteractionSystem interactionSystem;

		[Token(Token = "0x40006AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool disableInputInInteraction;

		[Token(Token = "0x40006AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float enableInputAtProgress;

		[Token(Token = "0x6000757")]
		[Address(RVA = "0x2365B34", Offset = "0x2365B34", VA = "0x2365B34", Slot = "5")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000758")]
		[Address(RVA = "0x2365FAC", Offset = "0x2365FAC", VA = "0x2365FAC")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000759")]
		[Address(RVA = "0x2366204", Offset = "0x2366204", VA = "0x2366204")]
		public UserControlInteractions()
		{
		}
	}
	[Token(Token = "0x20000DE")]
	public class GrounderDemo : MonoBehaviour
	{
		[Token(Token = "0x40006AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject[] characters;

		[Token(Token = "0x600075A")]
		[Address(RVA = "0x2358D9C", Offset = "0x2358D9C", VA = "0x2358D9C")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600075B")]
		[Address(RVA = "0x2359098", Offset = "0x2359098", VA = "0x2359098")]
		public void Activate(int index)
		{
		}

		[Token(Token = "0x600075C")]
		[Address(RVA = "0x2359118", Offset = "0x2359118", VA = "0x2359118")]
		public GrounderDemo()
		{
		}
	}
	[Token(Token = "0x20000DF")]
	public class PlatformRotator : MonoBehaviour
	{
		[Token(Token = "0x2000246")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D56C4", Offset = "0x15D56C4")]
		private sealed class <SwitchRotation>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlatformRotator <>4__this;

			[Token(Token = "0x170001CF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E8B")]
				[Address(RVA = "0x23615E0", Offset = "0x23615E0", VA = "0x23615E0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001D0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E8D")]
				[Address(RVA = "0x2361648", Offset = "0x2361648", VA = "0x2361648", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E88")]
			[Address(RVA = "0x2361290", Offset = "0x2361290", VA = "0x2361290")]
			[DebuggerHidden]
			public <SwitchRotation>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6000E89")]
			[Address(RVA = "0x236149C", Offset = "0x236149C", VA = "0x236149C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E8A")]
			[Address(RVA = "0x23614A0", Offset = "0x23614A0", VA = "0x23614A0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E8C")]
			[Address(RVA = "0x23615E8", Offset = "0x23615E8", VA = "0x23615E8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40006B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxAngle;

		[Token(Token = "0x40006B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float switchRotationTime;

		[Token(Token = "0x40006B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float random;

		[Token(Token = "0x40006B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float rotationSpeed;

		[Token(Token = "0x40006B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 movePosition;

		[Token(Token = "0x40006B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float moveSpeed;

		[Token(Token = "0x40006B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int characterLayer;

		[Token(Token = "0x40006B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion defaultRotation;

		[Token(Token = "0x40006B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion targetRotation;

		[Token(Token = "0x40006B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 targetPosition;

		[Token(Token = "0x40006BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 velocity;

		[Token(Token = "0x40006BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Rigidbody r;

		[Token(Token = "0x600075D")]
		[Address(RVA = "0x2360EC4", Offset = "0x2360EC4", VA = "0x2360EC4")]
		private void Start()
		{
		}

		[Token(Token = "0x600075E")]
		[Address(RVA = "0x2361068", Offset = "0x2361068", VA = "0x2361068")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600075F")]
		[Address(RVA = "0x2360FEC", Offset = "0x2360FEC", VA = "0x2360FEC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x15E4B44", Offset = "0x15E4B44")]
		private IEnumerator SwitchRotation()
		{
			return null;
		}

		[Token(Token = "0x6000760")]
		[Address(RVA = "0x23612BC", Offset = "0x23612BC", VA = "0x23612BC")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000761")]
		[Address(RVA = "0x23613A0", Offset = "0x23613A0", VA = "0x23613A0")]
		private void OnCollisionExit(Collision collision)
		{
		}

		[Token(Token = "0x6000762")]
		[Address(RVA = "0x2361480", Offset = "0x2361480", VA = "0x2361480")]
		public PlatformRotator()
		{
		}
	}
	[Token(Token = "0x20000E0")]
	public class BendGoal : MonoBehaviour
	{
		[Token(Token = "0x40006BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LimbIK limbIK;

		[Token(Token = "0x40006BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DA7AC", Offset = "0x15DA7AC")]
		public float weight;

		[Token(Token = "0x6000763")]
		[Address(RVA = "0x1F2FFA4", Offset = "0x1F2FFA4", VA = "0x1F2FFA4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000764")]
		[Address(RVA = "0x1F30010", Offset = "0x1F30010", VA = "0x1F30010")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000765")]
		[Address(RVA = "0x1F300CC", Offset = "0x1F300CC", VA = "0x1F300CC")]
		public BendGoal()
		{
		}
	}
	[Token(Token = "0x20000E1")]
	public class Turret : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000247")]
		public class Part
		{
			[Token(Token = "0x4000F20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x4000F21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private RotationLimit rotationLimit;

			[Token(Token = "0x6000E8E")]
			[Address(RVA = "0x236501C", Offset = "0x236501C", VA = "0x236501C")]
			public void AimAt(Transform target)
			{
			}

			[Token(Token = "0x6000E8F")]
			[Address(RVA = "0x236515C", Offset = "0x236515C", VA = "0x236515C")]
			public Part()
			{
			}
		}

		[Token(Token = "0x40006BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x40006BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Part[] parts;

		[Token(Token = "0x6000766")]
		[Address(RVA = "0x2364FA4", Offset = "0x2364FA4", VA = "0x2364FA4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000767")]
		[Address(RVA = "0x2365154", Offset = "0x2365154", VA = "0x2365154")]
		public Turret()
		{
		}
	}
	[Token(Token = "0x20000E2")]
	public class HitReactionVRIKTrigger : MonoBehaviour
	{
		[Token(Token = "0x40006C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HitReactionVRIK hitReaction;

		[Token(Token = "0x40006C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float hitForce;

		[Token(Token = "0x40006C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string colliderName;

		[Token(Token = "0x6000768")]
		[Address(RVA = "0x23594C0", Offset = "0x23594C0", VA = "0x23594C0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000769")]
		[Address(RVA = "0x235968C", Offset = "0x235968C", VA = "0x235968C")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600076A")]
		[Address(RVA = "0x2359850", Offset = "0x2359850", VA = "0x2359850")]
		public HitReactionVRIKTrigger()
		{
		}
	}
	[Token(Token = "0x20000E3")]
	public class VRIKCalibrationController : MonoBehaviour
	{
		[Token(Token = "0x40006C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DA7C4", Offset = "0x15DA7C4")]
		public VRIK ik;

		[Token(Token = "0x40006C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DA7FC", Offset = "0x15DA7FC")]
		public VRIKCalibrator.Settings settings;

		[Token(Token = "0x40006C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DA834", Offset = "0x15DA834")]
		public Transform headTracker;

		[Token(Token = "0x40006C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DA86C", Offset = "0x15DA86C")]
		public Transform bodyTracker;

		[Token(Token = "0x40006C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DA8A4", Offset = "0x15DA8A4")]
		public Transform leftHandTracker;

		[Token(Token = "0x40006C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DA8DC", Offset = "0x15DA8DC")]
		public Transform rightHandTracker;

		[Token(Token = "0x40006C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DA914", Offset = "0x15DA914")]
		public Transform leftFootTracker;

		[Token(Token = "0x40006CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DA94C", Offset = "0x15DA94C")]
		public Transform rightFootTracker;

		[Token(Token = "0x40006CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x15DA984", Offset = "0x15DA984")]
		public VRIKCalibrator.CalibrationData data;

		[Token(Token = "0x600076B")]
		[Address(RVA = "0x2366228", Offset = "0x2366228", VA = "0x2366228")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600076C")]
		[Address(RVA = "0x2366390", Offset = "0x2366390", VA = "0x2366390")]
		public VRIKCalibrationController()
		{
		}
	}
	[Token(Token = "0x20000E4")]
	public class VRIKPlatform : MonoBehaviour
	{
		[Token(Token = "0x40006CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRIK ik;

		[Token(Token = "0x40006CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 lastPosition;

		[Token(Token = "0x40006CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion lastRotation;

		[Token(Token = "0x600076D")]
		[Address(RVA = "0x2366404", Offset = "0x2366404", VA = "0x2366404")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600076E")]
		[Address(RVA = "0x2366460", Offset = "0x2366460", VA = "0x2366460")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600076F")]
		[Address(RVA = "0x2366674", Offset = "0x2366674", VA = "0x2366674")]
		public VRIKPlatform()
		{
		}
	}
	[Token(Token = "0x20000E5")]
	public class VRIKPlatformController : MonoBehaviour
	{
		[Token(Token = "0x40006CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRIK ik;

		[Token(Token = "0x40006D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform trackingSpace;

		[Token(Token = "0x40006D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform platform;

		[Token(Token = "0x40006D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool moveToPlatform;

		[Token(Token = "0x40006D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform lastPlatform;

		[Token(Token = "0x40006D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 lastPosition;

		[Token(Token = "0x40006D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion lastRotation;

		[Token(Token = "0x6000770")]
		[Address(RVA = "0x23666EC", Offset = "0x23666EC", VA = "0x23666EC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000771")]
		[Address(RVA = "0x2366C54", Offset = "0x2366C54", VA = "0x2366C54")]
		public VRIKPlatformController()
		{
		}
	}
	[Token(Token = "0x20000E6")]
	public abstract class CharacterAnimationBase : MonoBehaviour
	{
		[Token(Token = "0x40006D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool smoothFollow;

		[Token(Token = "0x40006D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float smoothFollowSpeed;

		[Token(Token = "0x40006D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected bool animatePhysics;

		[Token(Token = "0x40006D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 lastPosition;

		[Token(Token = "0x40006DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 localPosition;

		[Token(Token = "0x40006DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion localRotation;

		[Token(Token = "0x40006DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion lastRotation;

		[Token(Token = "0x170000E3")]
		public virtual bool animationGrounded
		{
			[Token(Token = "0x6000773")]
			[Address(RVA = "0x1F305CC", Offset = "0x1F305CC", VA = "0x1F305CC", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000772")]
		[Address(RVA = "0x1F305A8", Offset = "0x1F305A8", VA = "0x1F305A8", Slot = "4")]
		public virtual Vector3 GetPivotPoint()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000774")]
		[Address(RVA = "0x1F305D4", Offset = "0x1F305D4", VA = "0x1F305D4")]
		public float GetAngleFromForward(Vector3 worldDirection)
		{
			return default(float);
		}

		[Token(Token = "0x6000775")]
		[Address(RVA = "0x1F30698", Offset = "0x1F30698", VA = "0x1F30698", Slot = "6")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000776")]
		[Address(RVA = "0x1F30810", Offset = "0x1F30810", VA = "0x1F30810", Slot = "7")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x6000777")]
		[Address(RVA = "0x1F30AC4", Offset = "0x1F30AC4", VA = "0x1F30AC4", Slot = "8")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000778")]
		[Address(RVA = "0x1F30820", Offset = "0x1F30820", VA = "0x1F30820")]
		private void SmoothFollow()
		{
		}

		[Token(Token = "0x6000779")]
		[Address(RVA = "0x1F30AD4", Offset = "0x1F30AD4", VA = "0x1F30AD4")]
		protected CharacterAnimationBase()
		{
		}
	}
	[Token(Token = "0x20000E7")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x15D4EE4", Offset = "0x15D4EE4")]
	public class CharacterAnimationSimple : CharacterAnimationBase
	{
		[Token(Token = "0x40006DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public CharacterThirdPerson characterController;

		[Token(Token = "0x40006DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float pivotOffset;

		[Token(Token = "0x40006DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public AnimationCurve moveSpeed;

		[Token(Token = "0x40006E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Animator animator;

		[Token(Token = "0x600077A")]
		[Address(RVA = "0x1F30AEC", Offset = "0x1F30AEC", VA = "0x1F30AEC", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x600077B")]
		[Address(RVA = "0x1F30B54", Offset = "0x1F30B54", VA = "0x1F30B54", Slot = "4")]
		public override Vector3 GetPivotPoint()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600077C")]
		[Address(RVA = "0x1F30C80", Offset = "0x1F30C80", VA = "0x1F30C80")]
		private void Update()
		{
		}

		[Token(Token = "0x600077D")]
		[Address(RVA = "0x1F30DFC", Offset = "0x1F30DFC", VA = "0x1F30DFC")]
		public CharacterAnimationSimple()
		{
		}
	}
	[Token(Token = "0x20000E8")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x15D4F48", Offset = "0x15D4F48")]
	public class CharacterAnimationThirdPerson : CharacterAnimationBase
	{
		[Token(Token = "0x40006E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public CharacterThirdPerson characterController;

		[Token(Token = "0x40006E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private float turnSensitivity;

		[Token(Token = "0x40006E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[SerializeField]
		private float turnSpeed;

		[Token(Token = "0x40006E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private float runCycleLegOffset;

		[Token(Token = "0x40006E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DA9EC", Offset = "0x15DA9EC")]
		[SerializeField]
		private float animSpeedMultiplier;

		[Token(Token = "0x40006E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Animator animator;

		[Token(Token = "0x40006E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 lastForward;

		[Token(Token = "0x40006E8")]
		private const string groundedDirectional = "Grounded Directional";

		[Token(Token = "0x40006E9")]
		private const string groundedStrafe = "Grounded Strafe";

		[Token(Token = "0x40006EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float deltaAngle;

		[Token(Token = "0x170000E4")]
		public override bool animationGrounded
		{
			[Token(Token = "0x6000780")]
			[Address(RVA = "0x1F30EC0", Offset = "0x1F30EC0", VA = "0x1F30EC0", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600077E")]
		[Address(RVA = "0x1F30E14", Offset = "0x1F30E14", VA = "0x1F30E14", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x600077F")]
		[Address(RVA = "0x1F30EA4", Offset = "0x1F30EA4", VA = "0x1F30EA4", Slot = "4")]
		public override Vector3 GetPivotPoint()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000781")]
		[Address(RVA = "0x1F30FB0", Offset = "0x1F30FB0", VA = "0x1F30FB0", Slot = "9")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000782")]
		[Address(RVA = "0x1F31364", Offset = "0x1F31364", VA = "0x1F31364")]
		private void OnAnimatorMove()
		{
		}

		[Token(Token = "0x6000783")]
		[Address(RVA = "0x1F31518", Offset = "0x1F31518", VA = "0x1F31518")]
		public CharacterAnimationThirdPerson()
		{
		}
	}
	[Token(Token = "0x20000E9")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x15D4FAC", Offset = "0x15D4FAC")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x15D4FAC", Offset = "0x15D4FAC")]
	public abstract class CharacterBase : MonoBehaviour
	{
		[Token(Token = "0x40006EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x15DAA30", Offset = "0x15DAA30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DAA30", Offset = "0x15DAA30")]
		public Transform gravityTarget;

		[Token(Token = "0x40006EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DAA90", Offset = "0x15DAA90")]
		public float gravityMultiplier;

		[Token(Token = "0x40006ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float airborneThreshold;

		[Token(Token = "0x40006EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float slopeStartAngle;

		[Token(Token = "0x40006EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float slopeEndAngle;

		[Token(Token = "0x40006F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float spherecastRadius;

		[Token(Token = "0x40006F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public LayerMask groundLayers;

		[Token(Token = "0x40006F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private PhysicMaterial zeroFrictionMaterial;

		[Token(Token = "0x40006F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private PhysicMaterial highFrictionMaterial;

		[Token(Token = "0x40006F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Rigidbody r;

		[Token(Token = "0x40006F5")]
		protected const float half = 0.5f;

		[Token(Token = "0x40006F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected float originalHeight;

		[Token(Token = "0x40006F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		protected Vector3 originalCenter;

		[Token(Token = "0x40006F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected CapsuleCollider capsule;

		[Token(Token = "0x6000784")]
		public abstract void Move(Vector3 deltaPosition, Quaternion deltaRotation);

		[Token(Token = "0x6000785")]
		[Address(RVA = "0x1F31A44", Offset = "0x1F31A44", VA = "0x1F31A44")]
		protected Vector3 GetGravity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000786")]
		[Address(RVA = "0x1F31BC8", Offset = "0x1F31BC8", VA = "0x1F31BC8", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000787")]
		[Address(RVA = "0x1F31D90", Offset = "0x1F31D90", VA = "0x1F31D90", Slot = "6")]
		protected virtual RaycastHit GetSpherecastHit()
		{
			return default(RaycastHit);
		}

		[Token(Token = "0x6000788")]
		[Address(RVA = "0x1F32008", Offset = "0x1F32008", VA = "0x1F32008")]
		public float GetAngleFromForward(Vector3 worldDirection)
		{
			return default(float);
		}

		[Token(Token = "0x6000789")]
		[Address(RVA = "0x1F320CC", Offset = "0x1F320CC", VA = "0x1F320CC")]
		protected void RigidbodyRotateAround(Vector3 point, Vector3 axis, float angle)
		{
		}

		[Token(Token = "0x600078A")]
		[Address(RVA = "0x1F322B4", Offset = "0x1F322B4", VA = "0x1F322B4")]
		protected void ScaleCapsule(float mlp)
		{
		}

		[Token(Token = "0x600078B")]
		[Address(RVA = "0x1F32464", Offset = "0x1F32464", VA = "0x1F32464")]
		protected void HighFriction()
		{
		}

		[Token(Token = "0x600078C")]
		[Address(RVA = "0x1F32488", Offset = "0x1F32488", VA = "0x1F32488")]
		protected void ZeroFriction()
		{
		}

		[Token(Token = "0x600078D")]
		[Address(RVA = "0x1F324AC", Offset = "0x1F324AC", VA = "0x1F324AC")]
		protected float GetSlopeDamper(Vector3 velocity, Vector3 groundNormal)
		{
			return default(float);
		}

		[Token(Token = "0x600078E")]
		[Address(RVA = "0x1F325B0", Offset = "0x1F325B0", VA = "0x1F325B0")]
		protected CharacterBase()
		{
		}
	}
	[Token(Token = "0x20000EA")]
	public class CharacterThirdPerson : CharacterBase
	{
		[Serializable]
		[Token(Token = "0x2000248")]
		public enum MoveMode
		{
			[Token(Token = "0x4000F23")]
			Directional,
			[Token(Token = "0x4000F24")]
			Strafe
		}

		[Token(Token = "0x2000249")]
		public struct AnimState
		{
			[Token(Token = "0x4000F25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 moveDirection;

			[Token(Token = "0x4000F26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public bool jump;

			[Token(Token = "0x4000F27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
			public bool crouch;

			[Token(Token = "0x4000F28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
			public bool onGround;

			[Token(Token = "0x4000F29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF")]
			public bool isStrafing;

			[Token(Token = "0x4000F2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float yVelocity;

			[Token(Token = "0x4000F2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public bool doubleJump;
		}

		[Token(Token = "0x200024A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D56D4", Offset = "0x15D56D4")]
		private sealed class <JumpSmooth>d__74 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CharacterThirdPerson <>4__this;

			[Token(Token = "0x4000F2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 jumpVelocity;

			[Token(Token = "0x4000F30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private int <steps>5__2;

			[Token(Token = "0x4000F31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <stepsToTake>5__3;

			[Token(Token = "0x170001D1")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E93")]
				[Address(RVA = "0x2355C0C", Offset = "0x2355C0C", VA = "0x2355C0C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001D2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E95")]
				[Address(RVA = "0x2355C74", Offset = "0x2355C74", VA = "0x2355C74", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E90")]
			[Address(RVA = "0x2355A94", Offset = "0x2355A94", VA = "0x2355A94")]
			[DebuggerHidden]
			public <JumpSmooth>d__74(int <>1__state)
			{
			}

			[Token(Token = "0x6000E91")]
			[Address(RVA = "0x2355AC0", Offset = "0x2355AC0", VA = "0x2355AC0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E92")]
			[Address(RVA = "0x2355AC4", Offset = "0x2355AC4", VA = "0x2355AC4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E94")]
			[Address(RVA = "0x2355C14", Offset = "0x2355C14", VA = "0x2355C14", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40006F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x15DAAC8", Offset = "0x15DAAC8")]
		public CharacterAnimationBase characterAnimation;

		[Token(Token = "0x40006FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public UserControlThirdPerson userControl;

		[Token(Token = "0x40006FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public CameraController cam;

		[Token(Token = "0x40006FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x15DAB00", Offset = "0x15DAB00")]
		public MoveMode moveMode;

		[Token(Token = "0x40006FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public bool smoothPhysics;

		[Token(Token = "0x40006FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float smoothAccelerationTime;

		[Token(Token = "0x40006FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float linearAccelerationSpeed;

		[Token(Token = "0x4000700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float platformFriction;

		[Token(Token = "0x4000701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float groundStickyEffect;

		[Token(Token = "0x4000702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float maxVerticalVelocityOnGround;

		[Token(Token = "0x4000703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float velocityToGroundTangentWeight;

		[Token(Token = "0x4000704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x15DAB38", Offset = "0x15DAB38")]
		public bool lookInCameraDirection;

		[Token(Token = "0x4000705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float turnSpeed;

		[Token(Token = "0x4000706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float stationaryTurnSpeedMlp;

		[Token(Token = "0x4000707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x15DAB70", Offset = "0x15DAB70")]
		public bool smoothJump;

		[Token(Token = "0x4000708")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float airSpeed;

		[Token(Token = "0x4000709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float airControl;

		[Token(Token = "0x400070A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float jumpPower;

		[Token(Token = "0x400070B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float jumpRepeatDelayTime;

		[Token(Token = "0x400070C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public bool doubleJumpEnabled;

		[Token(Token = "0x400070D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public float doubleJumpPowerMlp;

		[Token(Token = "0x400070E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x15DABA8", Offset = "0x15DABA8")]
		public LayerMask wallRunLayers;

		[Token(Token = "0x400070F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public float wallRunMaxLength;

		[Token(Token = "0x4000710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public float wallRunMinMoveMag;

		[Token(Token = "0x4000711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public float wallRunMinVelocityY;

		[Token(Token = "0x4000712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public float wallRunRotationSpeed;

		[Token(Token = "0x4000713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public float wallRunMaxRotationAngle;

		[Token(Token = "0x4000714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public float wallRunWeightSpeed;

		[Token(Token = "0x4000715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x15DABE0", Offset = "0x15DABE0")]
		public float crouchCapsuleScaleMlp;

		[Token(Token = "0x4000716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DAC18", Offset = "0x15DAC18")]
		private bool <onGround>k__BackingField;

		[Token(Token = "0x4000717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public AnimState animState;

		[Token(Token = "0x4000718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		protected Vector3 moveDirection;

		[Token(Token = "0x4000719")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Animator animator;

		[Token(Token = "0x400071A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Vector3 normal;

		[Token(Token = "0x400071B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private Vector3 platformVelocity;

		[Token(Token = "0x400071C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Vector3 platformAngularVelocity;

		[Token(Token = "0x400071D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private RaycastHit hit;

		[Token(Token = "0x400071E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private float jumpLeg;

		[Token(Token = "0x400071F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private float jumpEndTime;

		[Token(Token = "0x4000720")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private float forwardMlp;

		[Token(Token = "0x4000721")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		private float groundDistance;

		[Token(Token = "0x4000722")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private float lastAirTime;

		[Token(Token = "0x4000723")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		private float stickyForce;

		[Token(Token = "0x4000724")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private Vector3 wallNormal;

		[Token(Token = "0x4000725")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		private Vector3 moveDirectionVelocity;

		[Token(Token = "0x4000726")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private float wallRunWeight;

		[Token(Token = "0x4000727")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		private float lastWallRunWeight;

		[Token(Token = "0x4000728")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private Vector3 fixedDeltaPosition;

		[Token(Token = "0x4000729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		private Quaternion fixedDeltaRotation;

		[Token(Token = "0x400072A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		private bool fixedFrame;

		[Token(Token = "0x400072B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private float wallRunEndTime;

		[Token(Token = "0x400072C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		private Vector3 gravity;

		[Token(Token = "0x400072D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private Vector3 verticalVelocity;

		[Token(Token = "0x400072E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		private float velocityY;

		[Token(Token = "0x400072F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private bool doubleJumped;

		[Token(Token = "0x4000730")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E1")]
		private bool jumpReleased;

		[Token(Token = "0x170000E5")]
		public bool onGround
		{
			[Token(Token = "0x600078F")]
			[Address(RVA = "0x1F329D4", Offset = "0x1F329D4", VA = "0x1F329D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4BA8", Offset = "0x15E4BA8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000790")]
			[Address(RVA = "0x1F329DC", Offset = "0x1F329DC", VA = "0x1F329DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4BB8", Offset = "0x15E4BB8")]
			private set
			{
			}
		}

		[Token(Token = "0x6000791")]
		[Address(RVA = "0x1F329E8", Offset = "0x1F329E8", VA = "0x1F329E8", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000792")]
		[Address(RVA = "0x1F32B94", Offset = "0x1F32B94", VA = "0x1F32B94")]
		private void OnAnimatorMove()
		{
		}

		[Token(Token = "0x6000793")]
		[Address(RVA = "0x1F32C24", Offset = "0x1F32C24", VA = "0x1F32C24", Slot = "4")]
		public override void Move(Vector3 deltaPosition, Quaternion deltaRotation)
		{
		}

		[Token(Token = "0x6000794")]
		[Address(RVA = "0x1F32D60", Offset = "0x1F32D60", VA = "0x1F32D60")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000795")]
		[Address(RVA = "0x1F33C9C", Offset = "0x1F33C9C", VA = "0x1F33C9C", Slot = "7")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000796")]
		[Address(RVA = "0x1F34034", Offset = "0x1F34034", VA = "0x1F34034", Slot = "8")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x6000797")]
		[Address(RVA = "0x1F3336C", Offset = "0x1F3336C", VA = "0x1F3336C")]
		private void MoveFixed(Vector3 deltaPosition)
		{
		}

		[Token(Token = "0x6000798")]
		[Address(RVA = "0x1F34114", Offset = "0x1F34114", VA = "0x1F34114")]
		private void WallRun()
		{
		}

		[Token(Token = "0x6000799")]
		[Address(RVA = "0x1F34704", Offset = "0x1F34704", VA = "0x1F34704")]
		private bool CanWallRun()
		{
			return default(bool);
		}

		[Token(Token = "0x600079A")]
		[Address(RVA = "0x1F33D78", Offset = "0x1F33D78", VA = "0x1F33D78")]
		private Vector3 GetMoveDirection()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600079B")]
		[Address(RVA = "0x1F347A4", Offset = "0x1F347A4", VA = "0x1F347A4", Slot = "9")]
		protected virtual void Rotate()
		{
		}

		[Token(Token = "0x600079C")]
		[Address(RVA = "0x1F34C14", Offset = "0x1F34C14", VA = "0x1F34C14")]
		private Vector3 GetForwardDirection()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600079D")]
		[Address(RVA = "0x1F34DA0", Offset = "0x1F34DA0", VA = "0x1F34DA0", Slot = "10")]
		protected virtual bool Jump()
		{
			return default(bool);
		}

		[Token(Token = "0x600079E")]
		[Address(RVA = "0x1F34FB8", Offset = "0x1F34FB8", VA = "0x1F34FB8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x15E4BC8", Offset = "0x15E4BC8")]
		private IEnumerator JumpSmooth(Vector3 jumpVelocity)
		{
			return null;
		}

		[Token(Token = "0x600079F")]
		[Address(RVA = "0x1F3387C", Offset = "0x1F3387C", VA = "0x1F3387C")]
		private void GroundCheck()
		{
		}

		[Token(Token = "0x60007A0")]
		[Address(RVA = "0x1F35058", Offset = "0x1F35058", VA = "0x1F35058")]
		public CharacterThirdPerson()
		{
		}
	}
	[Token(Token = "0x20000EB")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x15D5038", Offset = "0x15D5038")]
	public class SimpleLocomotion : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200024B")]
		public enum RotationMode
		{
			[Token(Token = "0x4000F33")]
			Smooth,
			[Token(Token = "0x4000F34")]
			Linear
		}

		[Token(Token = "0x4000731")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DAC28", Offset = "0x15DAC28")]
		public CameraController cameraController;

		[Token(Token = "0x4000732")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DAC60", Offset = "0x15DAC60")]
		public float accelerationTime;

		[Token(Token = "0x4000733")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DAC98", Offset = "0x15DAC98")]
		public float turnTime;

		[Token(Token = "0x4000734")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DACD0", Offset = "0x15DACD0")]
		public bool walkByDefault;

		[Token(Token = "0x4000735")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DAD08", Offset = "0x15DAD08")]
		public RotationMode rotationMode;

		[Token(Token = "0x4000736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DAD40", Offset = "0x15DAD40")]
		public float moveSpeed;

		[Token(Token = "0x4000737")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DAD78", Offset = "0x15DAD78")]
		private bool <isGrounded>k__BackingField;

		[Token(Token = "0x4000738")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Animator animator;

		[Token(Token = "0x4000739")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float speed;

		[Token(Token = "0x400073A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float angleVel;

		[Token(Token = "0x400073B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float speedVel;

		[Token(Token = "0x400073C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 linearTargetDirection;

		[Token(Token = "0x400073D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private CharacterController characterController;

		[Token(Token = "0x170000E6")]
		public bool isGrounded
		{
			[Token(Token = "0x60007A1")]
			[Address(RVA = "0x2362910", Offset = "0x2362910", VA = "0x2362910")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4C2C", Offset = "0x15E4C2C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60007A2")]
			[Address(RVA = "0x2362918", Offset = "0x2362918", VA = "0x2362918")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4C3C", Offset = "0x15E4C3C")]
			private set
			{
			}
		}

		[Token(Token = "0x60007A3")]
		[Address(RVA = "0x2362924", Offset = "0x2362924", VA = "0x2362924")]
		private void Start()
		{
		}

		[Token(Token = "0x60007A4")]
		[Address(RVA = "0x23629C0", Offset = "0x23629C0", VA = "0x23629C0")]
		private void Update()
		{
		}

		[Token(Token = "0x60007A5")]
		[Address(RVA = "0x23630BC", Offset = "0x23630BC", VA = "0x23630BC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60007A6")]
		[Address(RVA = "0x2362A14", Offset = "0x2362A14", VA = "0x2362A14")]
		private void Rotate()
		{
		}

		[Token(Token = "0x60007A7")]
		[Address(RVA = "0x2362E14", Offset = "0x2362E14", VA = "0x2362E14")]
		private void Move()
		{
		}

		[Token(Token = "0x60007A8")]
		[Address(RVA = "0x23630F8", Offset = "0x23630F8", VA = "0x23630F8")]
		private Vector3 GetInputVector()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007A9")]
		[Address(RVA = "0x23631F0", Offset = "0x23631F0", VA = "0x23631F0")]
		private Vector3 GetInputVectorRaw()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007AA")]
		[Address(RVA = "0x2363290", Offset = "0x2363290", VA = "0x2363290")]
		public SimpleLocomotion()
		{
		}
	}
	[Token(Token = "0x20000EC")]
	public class UserControlAI : UserControlThirdPerson
	{
		[Token(Token = "0x400073E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform moveTarget;

		[Token(Token = "0x400073F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float stoppingDistance;

		[Token(Token = "0x4000740")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float stoppingThreshold;

		[Token(Token = "0x4000741")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Navigator navigator;

		[Token(Token = "0x60007AB")]
		[Address(RVA = "0x23657D0", Offset = "0x23657D0", VA = "0x23657D0", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60007AC")]
		[Address(RVA = "0x2365850", Offset = "0x2365850", VA = "0x2365850", Slot = "5")]
		protected override void Update()
		{
		}

		[Token(Token = "0x60007AD")]
		[Address(RVA = "0x2365AE4", Offset = "0x2365AE4", VA = "0x2365AE4")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x60007AE")]
		[Address(RVA = "0x2365B08", Offset = "0x2365B08", VA = "0x2365B08")]
		public UserControlAI()
		{
		}
	}
	[Token(Token = "0x20000ED")]
	public class UserControlThirdPerson : MonoBehaviour
	{
		[Token(Token = "0x200024C")]
		public struct State
		{
			[Token(Token = "0x4000F35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 move;

			[Token(Token = "0x4000F36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 lookPos;

			[Token(Token = "0x4000F37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool crouch;

			[Token(Token = "0x4000F38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
			public bool jump;

			[Token(Token = "0x4000F39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int actionIndex;
		}

		[Token(Token = "0x4000742")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool walkByDefault;

		[Token(Token = "0x4000743")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool canCrouch;

		[Token(Token = "0x4000744")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool canJump;

		[Token(Token = "0x4000745")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public State state;

		[Token(Token = "0x4000746")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Transform cam;

		[Token(Token = "0x60007AF")]
		[Address(RVA = "0x2365810", Offset = "0x2365810", VA = "0x2365810", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x60007B0")]
		[Address(RVA = "0x2365C48", Offset = "0x2365C48", VA = "0x2365C48", Slot = "5")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x60007B1")]
		[Address(RVA = "0x2365B24", Offset = "0x2365B24", VA = "0x2365B24")]
		public UserControlThirdPerson()
		{
		}
	}
	[Token(Token = "0x20000EE")]
	public class ApplicationQuit : MonoBehaviour
	{
		[Token(Token = "0x60007B2")]
		[Address(RVA = "0x1F2FF60", Offset = "0x1F2FF60", VA = "0x1F2FF60")]
		private void Update()
		{
		}

		[Token(Token = "0x60007B3")]
		[Address(RVA = "0x1F2FF9C", Offset = "0x1F2FF9C", VA = "0x1F2FF9C")]
		public ApplicationQuit()
		{
		}
	}
	[Token(Token = "0x20000EF")]
	public class SlowMo : MonoBehaviour
	{
		[Token(Token = "0x4000747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public KeyCode[] keyCodes;

		[Token(Token = "0x4000748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool mouse0;

		[Token(Token = "0x4000749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool mouse1;

		[Token(Token = "0x400074A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float slowMoTimeScale;

		[Token(Token = "0x60007B4")]
		[Address(RVA = "0x23632B8", Offset = "0x23632B8", VA = "0x23632B8")]
		private void Update()
		{
		}

		[Token(Token = "0x60007B5")]
		[Address(RVA = "0x23632EC", Offset = "0x23632EC", VA = "0x23632EC")]
		private bool IsSlowMotion()
		{
			return default(bool);
		}

		[Token(Token = "0x60007B6")]
		[Address(RVA = "0x236339C", Offset = "0x236339C", VA = "0x236339C")]
		public SlowMo()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000F0")]
	public class Navigator
	{
		[Token(Token = "0x200024D")]
		public enum State
		{
			[Token(Token = "0x4000F3B")]
			Idle,
			[Token(Token = "0x4000F3C")]
			Seeking,
			[Token(Token = "0x4000F3D")]
			OnPath
		}

		[Token(Token = "0x400074B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DAD88", Offset = "0x15DAD88")]
		public bool activeTargetSeeking;

		[Token(Token = "0x400074C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DADC0", Offset = "0x15DADC0")]
		public float cornerRadius;

		[Token(Token = "0x400074D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DADF8", Offset = "0x15DADF8")]
		public float recalculateOnPathDistance;

		[Token(Token = "0x400074E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DAE30", Offset = "0x15DAE30")]
		public float maxSampleDistance;

		[Token(Token = "0x400074F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DAE68", Offset = "0x15DAE68")]
		public float nextPathInterval;

		[Token(Token = "0x4000750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DAEA0", Offset = "0x15DAEA0")]
		private Vector3 <normalizedDeltaPosition>k__BackingField;

		[Token(Token = "0x4000751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DAEB0", Offset = "0x15DAEB0")]
		private State <state>k__BackingField;

		[Token(Token = "0x4000752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform transform;

		[Token(Token = "0x4000753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int cornerIndex;

		[Token(Token = "0x4000754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3[] corners;

		[Token(Token = "0x4000755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private NavMeshPath path;

		[Token(Token = "0x4000756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 lastTargetPosition;

		[Token(Token = "0x4000757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool initiated;

		[Token(Token = "0x4000758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float nextPathTime;

		[Token(Token = "0x170000E7")]
		public Vector3 normalizedDeltaPosition
		{
			[Token(Token = "0x60007B7")]
			[Address(RVA = "0x235E634", Offset = "0x235E634", VA = "0x235E634")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4C4C", Offset = "0x15E4C4C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60007B8")]
			[Address(RVA = "0x235E640", Offset = "0x235E640", VA = "0x235E640")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4C5C", Offset = "0x15E4C5C")]
			private set
			{
			}
		}

		[Token(Token = "0x170000E8")]
		public State state
		{
			[Token(Token = "0x60007B9")]
			[Address(RVA = "0x235E64C", Offset = "0x235E64C", VA = "0x235E64C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4C6C", Offset = "0x15E4C6C")]
			get
			{
				return default(State);
			}
			[Token(Token = "0x60007BA")]
			[Address(RVA = "0x235E654", Offset = "0x235E654", VA = "0x235E654")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4C7C", Offset = "0x15E4C7C")]
			private set
			{
			}
		}

		[Token(Token = "0x60007BB")]
		[Address(RVA = "0x235E65C", Offset = "0x235E65C", VA = "0x235E65C")]
		public void Initiate(Transform transform)
		{
		}

		[Token(Token = "0x60007BC")]
		[Address(RVA = "0x235E754", Offset = "0x235E754", VA = "0x235E754")]
		public void Update(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x60007BD")]
		[Address(RVA = "0x235ECAC", Offset = "0x235ECAC", VA = "0x235ECAC")]
		private void CalculatePath(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x60007BE")]
		[Address(RVA = "0x235ED1C", Offset = "0x235ED1C", VA = "0x235ED1C")]
		private bool Find(Vector3 targetPosition)
		{
			return default(bool);
		}

		[Token(Token = "0x60007BF")]
		[Address(RVA = "0x235EB74", Offset = "0x235EB74", VA = "0x235EB74")]
		private void Stop()
		{
		}

		[Token(Token = "0x60007C0")]
		[Address(RVA = "0x235EBE8", Offset = "0x235EBE8", VA = "0x235EBE8")]
		private float HorDistance(Vector3 p1, Vector3 p2)
		{
			return default(float);
		}

		[Token(Token = "0x60007C1")]
		[Address(RVA = "0x235EE64", Offset = "0x235EE64", VA = "0x235EE64")]
		public void Visualize()
		{
		}

		[Token(Token = "0x60007C2")]
		[Address(RVA = "0x235F014", Offset = "0x235F014", VA = "0x235F014")]
		public Navigator()
		{
		}
	}
}
namespace RelationsInspector.Backend.AutoBackend
{
	[Token(Token = "0x20000F1")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x15D509C", Offset = "0x15D509C")]
	public class AutoBackendAttribute : Attribute
	{
		[Token(Token = "0x60007C3")]
		[Address(RVA = "0x1F22250", Offset = "0x1F22250", VA = "0x1F22250")]
		public AutoBackendAttribute()
		{
		}
	}
	[Token(Token = "0x20000F2")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x15D50B0", Offset = "0x15D50B0")]
	public class RelatedAttribute : Attribute
	{
		[Token(Token = "0x60007C4")]
		[Address(RVA = "0x1F22258", Offset = "0x1F22258", VA = "0x1F22258")]
		public RelatedAttribute()
		{
		}
	}
	[Token(Token = "0x20000F3")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x15D50C4", Offset = "0x15D50C4")]
	public class RelatingAttribute : Attribute
	{
		[Token(Token = "0x60007C5")]
		[Address(RVA = "0x1F22260", Offset = "0x1F22260", VA = "0x1F22260")]
		public RelatingAttribute()
		{
		}
	}
}
namespace NGTools.Tests
{
	[Token(Token = "0x20000F4")]
	public class ConfigCommand : MonoBehaviour
	{
		[Token(Token = "0x4000759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DAEC0", Offset = "0x15DAEC0")]
		private int <a>k__BackingField;

		[Token(Token = "0x400075A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DAED0", Offset = "0x15DAED0")]
		private int <b>k__BackingField;

		[Token(Token = "0x400075B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DAEE0", Offset = "0x15DAEE0")]
		private int <c>k__BackingField;

		[Token(Token = "0x400075C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DAEF0", Offset = "0x15DAEF0")]
		private KeyCode <d>k__BackingField;

		[Token(Token = "0x400075D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DAF00", Offset = "0x15DAF00")]
		private float <f>k__BackingField;

		[Token(Token = "0x400075E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DAF10", Offset = "0x15DAF10")]
		private float <g>k__BackingField;

		[Token(Token = "0x400075F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DAF20", Offset = "0x15DAF20")]
		private decimal <h>k__BackingField;

		[Token(Token = "0x4000760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DAF30", Offset = "0x15DAF30")]
		private decimal <i>k__BackingField;

		[Token(Token = "0x4000761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DAF40", Offset = "0x15DAF40")]
		private string <j>k__BackingField;

		[Token(Token = "0x4000762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DAF50", Offset = "0x15DAF50")]
		private bool <k>k__BackingField;

		[Token(Token = "0x4000763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DAF60", Offset = "0x15DAF60")]
		private byte <l>k__BackingField;

		[Token(Token = "0x4000764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DAF70", Offset = "0x15DAF70")]
		private sbyte <m>k__BackingField;

		[Token(Token = "0x170000E9")]
		[AttributeAttribute(Name = "CommandAttribute", RVA = "0x15E65CC", Offset = "0x15E65CC")]
		[AttributeAttribute(Name = "MinAttribute", RVA = "0x15E65CC", Offset = "0x15E65CC")]
		public int a
		{
			[Token(Token = "0x60007C6")]
			[Address(RVA = "0x1F20DB0", Offset = "0x1F20DB0", VA = "0x1F20DB0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4C8C", Offset = "0x15E4C8C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60007C7")]
			[Address(RVA = "0x1F20DB8", Offset = "0x1F20DB8", VA = "0x1F20DB8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4C9C", Offset = "0x15E4C9C")]
			set
			{
			}
		}

		[Token(Token = "0x170000EA")]
		[AttributeAttribute(Name = "CommandAttribute", RVA = "0x15E6638", Offset = "0x15E6638")]
		[AttributeAttribute(Name = "SetAttribute", RVA = "0x15E6638", Offset = "0x15E6638")]
		public int b
		{
			[Token(Token = "0x60007C8")]
			[Address(RVA = "0x1F20DC0", Offset = "0x1F20DC0", VA = "0x1F20DC0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4CAC", Offset = "0x15E4CAC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60007C9")]
			[Address(RVA = "0x1F20DC8", Offset = "0x1F20DC8", VA = "0x1F20DC8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4CBC", Offset = "0x15E4CBC")]
			set
			{
			}
		}

		[Token(Token = "0x170000EB")]
		[AttributeAttribute(Name = "CommandAttribute", RVA = "0x15E66E8", Offset = "0x15E66E8")]
		public int c
		{
			[Token(Token = "0x60007CA")]
			[Address(RVA = "0x1F20DD0", Offset = "0x1F20DD0", VA = "0x1F20DD0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4CCC", Offset = "0x15E4CCC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60007CB")]
			[Address(RVA = "0x1F20DD8", Offset = "0x1F20DD8", VA = "0x1F20DD8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4CDC", Offset = "0x15E4CDC")]
			set
			{
			}
		}

		[Token(Token = "0x170000EC")]
		[AttributeAttribute(Name = "CommandAttribute", RVA = "0x15E6734", Offset = "0x15E6734")]
		public KeyCode d
		{
			[Token(Token = "0x60007CC")]
			[Address(RVA = "0x1F20DE0", Offset = "0x1F20DE0", VA = "0x1F20DE0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4CEC", Offset = "0x15E4CEC")]
			get
			{
				return default(KeyCode);
			}
			[Token(Token = "0x60007CD")]
			[Address(RVA = "0x1F20DE8", Offset = "0x1F20DE8", VA = "0x1F20DE8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4CFC", Offset = "0x15E4CFC")]
			set
			{
			}
		}

		[Token(Token = "0x170000ED")]
		[AttributeAttribute(Name = "CommandAttribute", RVA = "0x15E6780", Offset = "0x15E6780")]
		public float f
		{
			[Token(Token = "0x60007CE")]
			[Address(RVA = "0x1F20DF0", Offset = "0x1F20DF0", VA = "0x1F20DF0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4D0C", Offset = "0x15E4D0C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60007CF")]
			[Address(RVA = "0x1F20DF8", Offset = "0x1F20DF8", VA = "0x1F20DF8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4D1C", Offset = "0x15E4D1C")]
			set
			{
			}
		}

		[Token(Token = "0x170000EE")]
		[AttributeAttribute(Name = "CommandAttribute", RVA = "0x15E67CC", Offset = "0x15E67CC")]
		public float g
		{
			[Token(Token = "0x60007D0")]
			[Address(RVA = "0x1F20E00", Offset = "0x1F20E00", VA = "0x1F20E00")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4D2C", Offset = "0x15E4D2C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60007D1")]
			[Address(RVA = "0x1F20E08", Offset = "0x1F20E08", VA = "0x1F20E08")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4D3C", Offset = "0x15E4D3C")]
			set
			{
			}
		}

		[Token(Token = "0x170000EF")]
		[AttributeAttribute(Name = "CommandAttribute", RVA = "0x15E6818", Offset = "0x15E6818")]
		public decimal h
		{
			[Token(Token = "0x60007D2")]
			[Address(RVA = "0x1F20E10", Offset = "0x1F20E10", VA = "0x1F20E10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4D4C", Offset = "0x15E4D4C")]
			get
			{
				return default(decimal);
			}
			[Token(Token = "0x60007D3")]
			[Address(RVA = "0x1F20E1C", Offset = "0x1F20E1C", VA = "0x1F20E1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4D5C", Offset = "0x15E4D5C")]
			set
			{
			}
		}

		[Token(Token = "0x170000F0")]
		[AttributeAttribute(Name = "CommandAttribute", RVA = "0x15E6864", Offset = "0x15E6864")]
		public decimal i
		{
			[Token(Token = "0x60007D4")]
			[Address(RVA = "0x1F20E24", Offset = "0x1F20E24", VA = "0x1F20E24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4D6C", Offset = "0x15E4D6C")]
			get
			{
				return default(decimal);
			}
			[Token(Token = "0x60007D5")]
			[Address(RVA = "0x1F20E30", Offset = "0x1F20E30", VA = "0x1F20E30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4D7C", Offset = "0x15E4D7C")]
			set
			{
			}
		}

		[Token(Token = "0x170000F1")]
		[AttributeAttribute(Name = "CommandAttribute", RVA = "0x15E68B0", Offset = "0x15E68B0")]
		public string j
		{
			[Token(Token = "0x60007D6")]
			[Address(RVA = "0x1F20E38", Offset = "0x1F20E38", VA = "0x1F20E38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4D8C", Offset = "0x15E4D8C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60007D7")]
			[Address(RVA = "0x1F20E40", Offset = "0x1F20E40", VA = "0x1F20E40")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4D9C", Offset = "0x15E4D9C")]
			set
			{
			}
		}

		[Token(Token = "0x170000F2")]
		[AttributeAttribute(Name = "CommandAttribute", RVA = "0x15E68FC", Offset = "0x15E68FC")]
		public bool k
		{
			[Token(Token = "0x60007D8")]
			[Address(RVA = "0x1F20E48", Offset = "0x1F20E48", VA = "0x1F20E48")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4DAC", Offset = "0x15E4DAC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60007D9")]
			[Address(RVA = "0x1F20E50", Offset = "0x1F20E50", VA = "0x1F20E50")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4DBC", Offset = "0x15E4DBC")]
			set
			{
			}
		}

		[Token(Token = "0x170000F3")]
		[AttributeAttribute(Name = "CommandAttribute", RVA = "0x15E6948", Offset = "0x15E6948")]
		public byte l
		{
			[Token(Token = "0x60007DA")]
			[Address(RVA = "0x1F20E5C", Offset = "0x1F20E5C", VA = "0x1F20E5C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4DCC", Offset = "0x15E4DCC")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x60007DB")]
			[Address(RVA = "0x1F20E64", Offset = "0x1F20E64", VA = "0x1F20E64")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4DDC", Offset = "0x15E4DDC")]
			set
			{
			}
		}

		[Token(Token = "0x170000F4")]
		[AttributeAttribute(Name = "CommandAttribute", RVA = "0x15E6994", Offset = "0x15E6994")]
		public sbyte m
		{
			[Token(Token = "0x60007DC")]
			[Address(RVA = "0x1F20E6C", Offset = "0x1F20E6C", VA = "0x1F20E6C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4DEC", Offset = "0x15E4DEC")]
			get
			{
				return default(sbyte);
			}
			[Token(Token = "0x60007DD")]
			[Address(RVA = "0x1F20E74", Offset = "0x1F20E74", VA = "0x1F20E74")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4DFC", Offset = "0x15E4DFC")]
			set
			{
			}
		}

		[Token(Token = "0x60007DE")]
		[Address(RVA = "0x1F20E7C", Offset = "0x1F20E7C", VA = "0x1F20E7C")]
		public ConfigCommand()
		{
		}
	}
	[Token(Token = "0x20000F5")]
	public class LambdaCommand : MonoBehaviour
	{
		[Token(Token = "0x4000765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public NGTools.NGGameConsole.NGGameConsole console;

		[Token(Token = "0x4000766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DAF80", Offset = "0x15DAF80")]
		private int <a>k__BackingField;

		[Token(Token = "0x4000767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DAF90", Offset = "0x15DAF90")]
		private string <b>k__BackingField;

		[Token(Token = "0x4000768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DAFA0", Offset = "0x15DAFA0")]
		private float <c>k__BackingField;

		[Token(Token = "0x4000769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DAFB0", Offset = "0x15DAFB0")]
		private bool <d>k__BackingField;

		[Token(Token = "0x400076A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DAFC0", Offset = "0x15DAFC0")]
		private static decimal <e>k__BackingField;

		[Token(Token = "0x400076B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DAFD0", Offset = "0x15DAFD0")]
		private static int <f>k__BackingField;

		[Token(Token = "0x400076C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DAFE0", Offset = "0x15DAFE0")]
		private static string <g>k__BackingField;

		[Token(Token = "0x170000F5")]
		[AttributeAttribute(Name = "CommandAttribute", RVA = "0x15E69E0", Offset = "0x15E69E0")]
		public int a
		{
			[Token(Token = "0x60007DF")]
			[Address(RVA = "0x1F20E84", Offset = "0x1F20E84", VA = "0x1F20E84")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4E0C", Offset = "0x15E4E0C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60007E0")]
			[Address(RVA = "0x1F20E8C", Offset = "0x1F20E8C", VA = "0x1F20E8C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4E1C", Offset = "0x15E4E1C")]
			set
			{
			}
		}

		[Token(Token = "0x170000F6")]
		[AttributeAttribute(Name = "CommandAttribute", RVA = "0x15E6A2C", Offset = "0x15E6A2C")]
		public string b
		{
			[Token(Token = "0x60007E1")]
			[Address(RVA = "0x1F20E94", Offset = "0x1F20E94", VA = "0x1F20E94")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4E2C", Offset = "0x15E4E2C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60007E2")]
			[Address(RVA = "0x1F20E9C", Offset = "0x1F20E9C", VA = "0x1F20E9C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4E3C", Offset = "0x15E4E3C")]
			set
			{
			}
		}

		[Token(Token = "0x170000F7")]
		[AttributeAttribute(Name = "CommandAttribute", RVA = "0x15E6A78", Offset = "0x15E6A78")]
		public float c
		{
			[Token(Token = "0x60007E3")]
			[Address(RVA = "0x1F20EA4", Offset = "0x1F20EA4", VA = "0x1F20EA4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4E4C", Offset = "0x15E4E4C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60007E4")]
			[Address(RVA = "0x1F20EAC", Offset = "0x1F20EAC", VA = "0x1F20EAC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4E5C", Offset = "0x15E4E5C")]
			set
			{
			}
		}

		[Token(Token = "0x170000F8")]
		[AttributeAttribute(Name = "CommandAttribute", RVA = "0x15E6AC4", Offset = "0x15E6AC4")]
		public bool d
		{
			[Token(Token = "0x60007E5")]
			[Address(RVA = "0x1F20EB4", Offset = "0x1F20EB4", VA = "0x1F20EB4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4E6C", Offset = "0x15E4E6C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60007E6")]
			[Address(RVA = "0x1F20EBC", Offset = "0x1F20EBC", VA = "0x1F20EBC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4E7C", Offset = "0x15E4E7C")]
			set
			{
			}
		}

		[Token(Token = "0x170000F9")]
		[AttributeAttribute(Name = "CommandAttribute", RVA = "0x15E6B10", Offset = "0x15E6B10")]
		public static decimal e
		{
			[Token(Token = "0x60007E7")]
			[Address(RVA = "0x1F20EC8", Offset = "0x1F20EC8", VA = "0x1F20EC8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4E8C", Offset = "0x15E4E8C")]
			get
			{
				return default(decimal);
			}
			[Token(Token = "0x60007E8")]
			[Address(RVA = "0x1F20F18", Offset = "0x1F20F18", VA = "0x1F20F18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4E9C", Offset = "0x15E4E9C")]
			set
			{
			}
		}

		[Token(Token = "0x170000FA")]
		[AttributeAttribute(Name = "CommandAttribute", RVA = "0x15E6B5C", Offset = "0x15E6B5C")]
		public static int f
		{
			[Token(Token = "0x60007E9")]
			[Address(RVA = "0x1F20F78", Offset = "0x1F20F78", VA = "0x1F20F78")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4EAC", Offset = "0x15E4EAC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60007EA")]
			[Address(RVA = "0x1F20FC8", Offset = "0x1F20FC8", VA = "0x1F20FC8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4EBC", Offset = "0x15E4EBC")]
			set
			{
			}
		}

		[Token(Token = "0x170000FB")]
		[AttributeAttribute(Name = "CommandAttribute", RVA = "0x15E6BA8", Offset = "0x15E6BA8")]
		public static string g
		{
			[Token(Token = "0x60007EB")]
			[Address(RVA = "0x1F2101C", Offset = "0x1F2101C", VA = "0x1F2101C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4ECC", Offset = "0x15E4ECC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60007EC")]
			[Address(RVA = "0x1F2106C", Offset = "0x1F2106C", VA = "0x1F2106C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4EDC", Offset = "0x15E4EDC")]
			set
			{
			}
		}

		[Token(Token = "0x60007ED")]
		[Address(RVA = "0x1F210C4", Offset = "0x1F210C4", VA = "0x1F210C4")]
		[AttributeAttribute(Name = "CommandAttribute", RVA = "0x15E4EEC", Offset = "0x15E4EEC")]
		public static string Fn1()
		{
			return null;
		}

		[Token(Token = "0x60007EE")]
		[Address(RVA = "0x1F2110C", Offset = "0x1F2110C", VA = "0x1F2110C")]
		[AttributeAttribute(Name = "CommandAttribute", RVA = "0x15E4F38", Offset = "0x15E4F38")]
		public static string Fn2(int b)
		{
			return null;
		}

		[Token(Token = "0x60007EF")]
		[Address(RVA = "0x1F21194", Offset = "0x1F21194", VA = "0x1F21194")]
		[AttributeAttribute(Name = "CommandAttribute", RVA = "0x15E4F84", Offset = "0x15E4F84")]
		public string consoleVisible(bool visible)
		{
			return null;
		}

		[Token(Token = "0x60007F0")]
		[Address(RVA = "0x1F211D4", Offset = "0x1F211D4", VA = "0x1F211D4")]
		public LambdaCommand()
		{
		}
	}
	[Token(Token = "0x20000F6")]
	public class TestGameConsole : MonoBehaviour
	{
		[Token(Token = "0x400076D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Rect fullScreenRect;

		[Token(Token = "0x400076E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GUIStyle centeredLabel;

		[Token(Token = "0x60007F1")]
		[Address(RVA = "0x1F213FC", Offset = "0x1F213FC", VA = "0x1F213FC", Slot = "4")]
		protected virtual void OnGUI()
		{
		}

		[Token(Token = "0x60007F2")]
		[Address(RVA = "0x1F21588", Offset = "0x1F21588", VA = "0x1F21588")]
		public TestGameConsole()
		{
		}
	}
	[Token(Token = "0x20000F7")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x15D50D8", Offset = "0x15D50D8")]
	public class ComplexClass : MonoBehaviour
	{
		[Token(Token = "0x200024E")]
		[Flags]
		public enum FlagsDummyEnum
		{
			[Token(Token = "0x4000F3F")]
			None = 1,
			[Token(Token = "0x4000F40")]
			Ya = 2,
			[Token(Token = "0x4000F41")]
			Why = 4,
			[Token(Token = "0x4000F42")]
			NotAtAll = 8,
			[Token(Token = "0x4000F43")]
			ABit = 0x16,
			[Token(Token = "0x4000F44")]
			All = 0x1F
		}

		[Token(Token = "0x200024F")]
		public enum DummyEnum
		{
			[Token(Token = "0x4000F46")]
			No,
			[Token(Token = "0x4000F47")]
			Yes,
			[Token(Token = "0x4000F48")]
			WhyNot
		}

		[Serializable]
		[Token(Token = "0x2000250")]
		public class SerializableDummyNestedClass
		{
			[Token(Token = "0x4000F49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SerializableDummyClass[] nestedArray;

			[Token(Token = "0x6000E96")]
			[Address(RVA = "0x1F20DA8", Offset = "0x1F20DA8", VA = "0x1F20DA8")]
			public SerializableDummyNestedClass()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000251")]
		public class SerializableDummyClass
		{
			[Token(Token = "0x4000F4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string classString;

			[Token(Token = "0x6000E97")]
			[Address(RVA = "0x1F20DA0", Offset = "0x1F20DA0", VA = "0x1F20DA0")]
			public SerializableDummyClass()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000252")]
		public struct SerializableDummyStruct
		{
			[Token(Token = "0x4000F4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int structInt;

			[Token(Token = "0x4000F4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public bool structBool;

			[Token(Token = "0x4000F4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string structString;

			[Token(Token = "0x4000F4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public UnityEngine.Object structObject;

			[Token(Token = "0x4000F4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public GameObject structGameObject;

			[Token(Token = "0x4000F50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Component structComponent;

			[Token(Token = "0x4000F51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public UnityEngine.Object[] classArray;
		}

		[Token(Token = "0x2000253")]
		public class DummyClass
		{
			[Token(Token = "0x4000F52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int classInt;

			[Token(Token = "0x4000F53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public bool classBool;

			[Token(Token = "0x4000F54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string classString;

			[Token(Token = "0x4000F55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UnityEngine.Object classObject;

			[Token(Token = "0x4000F56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public GameObject classGameObject;

			[Token(Token = "0x4000F57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Component classComponent;

			[Token(Token = "0x6000E98")]
			[Address(RVA = "0x1F20D98", Offset = "0x1F20D98", VA = "0x1F20D98")]
			public DummyClass()
			{
			}
		}

		[Token(Token = "0x2000254")]
		public struct DummyStruct
		{
			[Token(Token = "0x4000F58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int structInt;

			[Token(Token = "0x4000F59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public bool structBool;

			[Token(Token = "0x4000F5A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string structString;

			[Token(Token = "0x4000F5B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public UnityEngine.Object structObject;

			[Token(Token = "0x4000F5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public GameObject structGameObject;

			[Token(Token = "0x4000F5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Component structComponent;
		}

		[Token(Token = "0x400076F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Rect s_aa1;

		[Token(Token = "0x4000770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static Rect M_ah2;

		[Token(Token = "0x4000771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static Rect t1;

		[Token(Token = "0x4000772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static Vector2 t2;

		[Token(Token = "0x4000773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static Vector3 t3;

		[Token(Token = "0x4000774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public static Vector4 t4;

		[Token(Token = "0x4000775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public static Bounds t5;

		[Token(Token = "0x4000776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public static Color t6;

		[Token(Token = "0x4000777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static AnimationCurve t7;

		[Token(Token = "0x4000778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static string[] a;

		[Token(Token = "0x4000779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private static string[] b;

		[Token(Token = "0x400077A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public static List<string> la;

		[Token(Token = "0x400077B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private static List<string> lb;

		[Token(Token = "0x400077C")]
		public const float constFloat = 5f;

		[Token(Token = "0x400077D")]
		public const string constString = "tototoq";

		[Token(Token = "0x400077E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public static float staticFloat;

		[Token(Token = "0x400077F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public static string staticString;

		[Token(Token = "0x4000780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DAFF0", Offset = "0x15DAFF0")]
		private static float <GetPSetFloatProp>k__BackingField;

		[Token(Token = "0x4000781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DB000", Offset = "0x15DB000")]
		private static string <GetPSetStringProp>k__BackingField;

		[Token(Token = "0x4000782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DB010", Offset = "0x15DB010")]
		private static float <PGetSetFloatProp>k__BackingField;

		[Token(Token = "0x4000783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DB020", Offset = "0x15DB020")]
		private static string <PGetSetStringProp>k__BackingField;

		[Token(Token = "0x4000784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int int322222222;

		[Token(Token = "0x4000785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SerializableDummyNestedClass serializationDummyNestedClass;

		[Token(Token = "0x170000FC")]
		public static string[] A
		{
			[Token(Token = "0x60007F3")]
			[Address(RVA = "0x1F20318", Offset = "0x1F20318", VA = "0x1F20318")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FD")]
		public int Item
		{
			[Token(Token = "0x60007F4")]
			[Address(RVA = "0x1F20380", Offset = "0x1F20380", VA = "0x1F20380")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000FE")]
		public int Item
		{
			[Token(Token = "0x60007F5")]
			[Address(RVA = "0x1F20388", Offset = "0x1F20388", VA = "0x1F20388")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000FF")]
		public static float GetFloatProp
		{
			[Token(Token = "0x60007F6")]
			[Address(RVA = "0x1F20390", Offset = "0x1F20390", VA = "0x1F20390")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000100")]
		public static string GetStringProp
		{
			[Token(Token = "0x60007F7")]
			[Address(RVA = "0x1F20398", Offset = "0x1F20398", VA = "0x1F20398")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000101")]
		public static float SetFloatProp
		{
			[Token(Token = "0x60007F8")]
			[Address(RVA = "0x1F203E0", Offset = "0x1F203E0", VA = "0x1F203E0")]
			set
			{
			}
		}

		[Token(Token = "0x17000102")]
		public static string SetStringProp
		{
			[Token(Token = "0x60007F9")]
			[Address(RVA = "0x1F203E4", Offset = "0x1F203E4", VA = "0x1F203E4")]
			set
			{
			}
		}

		[Token(Token = "0x17000103")]
		public static float GetPSetFloatProp
		{
			[Token(Token = "0x60007FA")]
			[Address(RVA = "0x1F203E8", Offset = "0x1F203E8", VA = "0x1F203E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4FD0", Offset = "0x15E4FD0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60007FB")]
			[Address(RVA = "0x1F20450", Offset = "0x1F20450", VA = "0x1F20450")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4FE0", Offset = "0x15E4FE0")]
			private set
			{
			}
		}

		[Token(Token = "0x17000104")]
		public static string GetPSetStringProp
		{
			[Token(Token = "0x60007FC")]
			[Address(RVA = "0x1F204C4", Offset = "0x1F204C4", VA = "0x1F204C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E4FF0", Offset = "0x15E4FF0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60007FD")]
			[Address(RVA = "0x1F2052C", Offset = "0x1F2052C", VA = "0x1F2052C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5000", Offset = "0x15E5000")]
			private set
			{
			}
		}

		[Token(Token = "0x17000105")]
		public static float PGetSetFloatProp
		{
			[Token(Token = "0x60007FE")]
			[Address(RVA = "0x1F2059C", Offset = "0x1F2059C", VA = "0x1F2059C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5010", Offset = "0x15E5010")]
			private get
			{
				return default(float);
			}
			[Token(Token = "0x60007FF")]
			[Address(RVA = "0x1F20604", Offset = "0x1F20604", VA = "0x1F20604")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5020", Offset = "0x15E5020")]
			set
			{
			}
		}

		[Token(Token = "0x17000106")]
		public static string PGetSetStringProp
		{
			[Token(Token = "0x6000800")]
			[Address(RVA = "0x1F20678", Offset = "0x1F20678", VA = "0x1F20678")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5030", Offset = "0x15E5030")]
			private get
			{
				return null;
			}
			[Token(Token = "0x6000801")]
			[Address(RVA = "0x1F206E0", Offset = "0x1F206E0", VA = "0x1F206E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5040", Offset = "0x15E5040")]
			set
			{
			}
		}

		[Token(Token = "0x6000802")]
		[Address(RVA = "0x1F20750", Offset = "0x1F20750", VA = "0x1F20750")]
		public void FnInt(int a)
		{
		}

		[Token(Token = "0x6000803")]
		[Address(RVA = "0x1F207E4", Offset = "0x1F207E4", VA = "0x1F207E4")]
		public void FnIntString(int a, string b)
		{
		}

		[Token(Token = "0x6000804")]
		[Address(RVA = "0x1F20888", Offset = "0x1F20888", VA = "0x1F20888")]
		public void FnIntStringFloat(int a, string b, float c)
		{
		}

		[Token(Token = "0x6000805")]
		[Address(RVA = "0x1F20960", Offset = "0x1F20960", VA = "0x1F20960")]
		public void FnV3(Vector3 v)
		{
		}

		[Token(Token = "0x6000806")]
		[Address(RVA = "0x1F20A10", Offset = "0x1F20A10", VA = "0x1F20A10")]
		public void FnV3Int(Vector3 v, int a)
		{
		}

		[Token(Token = "0x6000807")]
		[Address(RVA = "0x1F20AE4", Offset = "0x1F20AE4", VA = "0x1F20AE4")]
		public ComplexClass()
		{
		}
	}
	[Token(Token = "0x20000F8")]
	public class SimpleLog : MonoBehaviour, IResolver
	{
		[Serializable]
		[Token(Token = "0x2000255")]
		public class AuxiliaryClass
		{
			[Token(Token = "0x4000F5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int doubleNestedFieldInteger;

			[Token(Token = "0x4000F5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int[] doubleNestedArrayFieldInteger;

			[Token(Token = "0x4000F60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Rect rect;

			[Token(Token = "0x6000E99")]
			[Address(RVA = "0x1F213E4", Offset = "0x1F213E4", VA = "0x1F213E4")]
			public AuxiliaryClass()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000256")]
		public class Coo
		{
			[Token(Token = "0x6000E9A")]
			[Address(RVA = "0x1F213EC", Offset = "0x1F213EC", VA = "0x1F213EC")]
			public Coo()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000257")]
		public class RefClass
		{
			[Token(Token = "0x4000F61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Coo c;

			[Token(Token = "0x6000E9B")]
			[Address(RVA = "0x1F213F4", Offset = "0x1F213F4", VA = "0x1F213F4")]
			public RefClass()
			{
			}
		}

		[Token(Token = "0x4000786")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x15DB030", Offset = "0x15DB030")]
		public UnityEngine.Object A;

		[Token(Token = "0x4000787")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0x15DB06C", Offset = "0x15DB06C")]
		public UnityEngine.Object B;

		[Token(Token = "0x4000788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEngine.Object all2;

		[Token(Token = "0x4000789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SimpleLog ref1;

		[Token(Token = "0x400078A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Component component;

		[Token(Token = "0x400078B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject aGameObject;

		[Token(Token = "0x400078C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Texture texture;

		[Token(Token = "0x400078D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Texture2D texture2D;

		[Token(Token = "0x400078E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Sprite sprite;

		[Token(Token = "0x400078F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public RefClass refClass;

		[Token(Token = "0x6000809")]
		[Address(RVA = "0x1F211DC", Offset = "0x1F211DC", VA = "0x1F211DC")]
		private void Awake()
		{
		}

		[Token(Token = "0x600080A")]
		[Address(RVA = "0x1F211E0", Offset = "0x1F211E0", VA = "0x1F211E0", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x600080B")]
		[Address(RVA = "0x1F211E4", Offset = "0x1F211E4", VA = "0x1F211E4")]
		public void Test()
		{
		}

		[Token(Token = "0x600080C")]
		[Address(RVA = "0x1F21250", Offset = "0x1F21250", VA = "0x1F21250")]
		private float OnHierarchyGUI(Rect r)
		{
			return default(float);
		}

		[Token(Token = "0x600080D")]
		[Address(RVA = "0x1F21324", Offset = "0x1F21324", VA = "0x1F21324", Slot = "4")]
		public void GetResolver(out int identifier, out Func<int, GameObject> resolver)
		{
		}

		[Token(Token = "0x600080E")]
		[Address(RVA = "0x1F213B8", Offset = "0x1F213B8", VA = "0x1F213B8")]
		private static GameObject a(int id)
		{
			return null;
		}

		[Token(Token = "0x600080F")]
		[Address(RVA = "0x1F213DC", Offset = "0x1F213DC", VA = "0x1F213DC")]
		public SimpleLog()
		{
		}
	}
	[Token(Token = "0x20000F9")]
	public class TestRemoteScene : MonoBehaviour
	{
		[Token(Token = "0x4000790")]
		private const float XOffset = 0f;

		[Token(Token = "0x4000791")]
		private const float YOffset = 20f;

		[Token(Token = "0x4000792")]
		private const float Height = 30f;

		[Token(Token = "0x4000793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool display;

		[Token(Token = "0x4000794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GUIStyle labelStyle;

		[Token(Token = "0x4000795")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Rect r;

		[Token(Token = "0x4000796")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector2 scrollPosition;

		[Token(Token = "0x6000810")]
		[Address(RVA = "0x1F21590", Offset = "0x1F21590", VA = "0x1F21590", Slot = "4")]
		protected virtual void OnGUI()
		{
		}

		[Token(Token = "0x6000811")]
		[Address(RVA = "0x1F221F0", Offset = "0x1F221F0", VA = "0x1F221F0")]
		public TestRemoteScene()
		{
		}
	}
}
namespace AudioTrip
{
	[Serializable]
	[Token(Token = "0x20000FA")]
	public struct ATAnimClipValue
	{
		[Token(Token = "0x4000797")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string clipName;

		[Token(Token = "0x4000798")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float beatSpan;

		[Token(Token = "0x4000799")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public WrapMode wrapMode;

		[Token(Token = "0x400079A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ATEffectID idMask;

		[Token(Token = "0x6000812")]
		[Address(RVA = "0x212CF0C", Offset = "0x212CF0C", VA = "0x212CF0C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20000FB")]
	public static class ATAnimClipPayloadEventExtensions
	{
		[Token(Token = "0x6000813")]
		[Address(RVA = "0x212CD94", Offset = "0x212CD94", VA = "0x212CD94")]
		public static bool HasATAnimClipPayload(this KoreographyEvent koreoEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x6000814")]
		[Address(RVA = "0x212CE20", Offset = "0x212CE20", VA = "0x212CE20")]
		public static ATAnimClipValue GetATAnimClipValue(this KoreographyEvent koreoEvent)
		{
			return default(ATAnimClipValue);
		}
	}
	[Serializable]
	[Token(Token = "0x20000FC")]
	public class ATAnimClipPayload : IPayload
	{
		[Token(Token = "0x400079B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DB0A8", Offset = "0x15DB0A8")]
		private ATAnimClipValue mATAnimClipVal;

		[Token(Token = "0x17000107")]
		public ATAnimClipValue ATAnimClipVal
		{
			[Token(Token = "0x6000815")]
			[Address(RVA = "0x212C9E8", Offset = "0x212C9E8", VA = "0x212C9E8")]
			get
			{
				return default(ATAnimClipValue);
			}
			[Token(Token = "0x6000816")]
			[Address(RVA = "0x212C9FC", Offset = "0x212C9FC", VA = "0x212C9FC")]
			set
			{
			}
		}

		[Token(Token = "0x6000817")]
		[Address(RVA = "0x212CA1C", Offset = "0x212CA1C", VA = "0x212CA1C")]
		public static string GetFriendlyName()
		{
			return null;
		}

		[Token(Token = "0x6000818")]
		[Address(RVA = "0x212CA64", Offset = "0x212CA64", VA = "0x212CA64", Slot = "4")]
		public IPayload GetCopy()
		{
			return null;
		}

		[Token(Token = "0x6000819")]
		[Address(RVA = "0x212CB90", Offset = "0x212CB90", VA = "0x212CB90", Slot = "5")]
		public IPayload CopyDifferences(IPayload referece, IPayload delta)
		{
			return null;
		}

		[Token(Token = "0x600081A")]
		[Address(RVA = "0x212CCE0", Offset = "0x212CCE0", VA = "0x212CCE0")]
		public ATAnimClipValue GetMergedDifferences(ATAnimClipValue r, ATAnimClipValue d)
		{
			return default(ATAnimClipValue);
		}

		[Token(Token = "0x600081B")]
		[Address(RVA = "0x212CAFC", Offset = "0x212CAFC", VA = "0x212CAFC")]
		public ATAnimClipPayload()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000FD")]
	public struct ATColorDelta
	{
		[Token(Token = "0x400079C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Color start;

		[Token(Token = "0x400079D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Color end;

		[Token(Token = "0x400079E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float duration;

		[Token(Token = "0x400079F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public ATEffectID idMask;

		[Token(Token = "0x600081C")]
		[Address(RVA = "0x212CFF4", Offset = "0x212CFF4", VA = "0x212CFF4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20000FE")]
	public static class ATColorDeltaPayloadEventExtensions
	{
		[Token(Token = "0x600081D")]
		[Address(RVA = "0x212D400", Offset = "0x212D400", VA = "0x212D400")]
		public static bool HasATColorDeltaPayload(this KoreographyEvent koreoEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x600081E")]
		[Address(RVA = "0x212D48C", Offset = "0x212D48C", VA = "0x212D48C")]
		public static ATColorDelta GetATColorDeltaValue(this KoreographyEvent koreoEvent)
		{
			return default(ATColorDelta);
		}
	}
	[Serializable]
	[Token(Token = "0x20000FF")]
	public class ATColorDeltaPayload : IPayload
	{
		[Token(Token = "0x40007A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DB0F4", Offset = "0x15DB0F4")]
		private ATColorDelta mATColorDeltaVal;

		[Token(Token = "0x17000108")]
		public ATColorDelta ATColorDeltaVal
		{
			[Token(Token = "0x600081F")]
			[Address(RVA = "0x212D068", Offset = "0x212D068", VA = "0x212D068")]
			get
			{
				return default(ATColorDelta);
			}
			[Token(Token = "0x6000820")]
			[Address(RVA = "0x212D07C", Offset = "0x212D07C", VA = "0x212D07C")]
			set
			{
			}
		}

		[Token(Token = "0x6000821")]
		[Address(RVA = "0x212D090", Offset = "0x212D090", VA = "0x212D090")]
		public static string GetFriendlyName()
		{
			return null;
		}

		[Token(Token = "0x6000822")]
		[Address(RVA = "0x212D0D8", Offset = "0x212D0D8", VA = "0x212D0D8")]
		private void UpdateValues(ATColorDelta newVals)
		{
		}

		[Token(Token = "0x6000823")]
		[Address(RVA = "0x212D0EC", Offset = "0x212D0EC", VA = "0x212D0EC", Slot = "4")]
		public IPayload GetCopy()
		{
			return null;
		}

		[Token(Token = "0x6000824")]
		[Address(RVA = "0x212D1E0", Offset = "0x212D1E0", VA = "0x212D1E0", Slot = "5")]
		public IPayload CopyDifferences(IPayload referece, IPayload delta)
		{
			return null;
		}

		[Token(Token = "0x6000825")]
		[Address(RVA = "0x212D334", Offset = "0x212D334", VA = "0x212D334")]
		public ATColorDelta GetMergedDifferences(ATColorDelta r, ATColorDelta d)
		{
			return default(ATColorDelta);
		}

		[Token(Token = "0x6000826")]
		[Address(RVA = "0x212D178", Offset = "0x212D178", VA = "0x212D178")]
		public ATColorDeltaPayload()
		{
		}
	}
	[Token(Token = "0x2000100")]
	public enum ATEffectID : uint
	{
		[Token(Token = "0x40007A2")]
		DontCare = 0u,
		[Token(Token = "0x40007A3")]
		ID_1 = 1u,
		[Token(Token = "0x40007A4")]
		ID_2 = 2u,
		[Token(Token = "0x40007A5")]
		ID_3 = 4u,
		[Token(Token = "0x40007A6")]
		ID_4 = 8u,
		[Token(Token = "0x40007A7")]
		ID_5 = 0x10u,
		[Token(Token = "0x40007A8")]
		ID_6 = 0x20u,
		[Token(Token = "0x40007A9")]
		ID_7 = 0x40u,
		[Token(Token = "0x40007AA")]
		ID_8 = 0x80u,
		[Token(Token = "0x40007AB")]
		ID_9 = 0x100u,
		[Token(Token = "0x40007AC")]
		ID_10 = 0x200u,
		[Token(Token = "0x40007AD")]
		ID_11 = 0x400u,
		[Token(Token = "0x40007AE")]
		ID_12 = 0x800u,
		[Token(Token = "0x40007AF")]
		ID_13 = 0x1000u,
		[Token(Token = "0x40007B0")]
		ID_14 = 0x2000u,
		[Token(Token = "0x40007B1")]
		ID_15 = 0x4000u,
		[Token(Token = "0x40007B2")]
		ID_16 = 0x8000u,
		[Token(Token = "0x40007B3")]
		ID_17 = 0x10000u,
		[Token(Token = "0x40007B4")]
		ID_18 = 0x20000u,
		[Token(Token = "0x40007B5")]
		ID_19 = 0x40000u,
		[Token(Token = "0x40007B6")]
		ID_20 = 0x80000u,
		[Token(Token = "0x40007B7")]
		ID_21 = 0x100000u,
		[Token(Token = "0x40007B8")]
		ID_22 = 0x200000u,
		[Token(Token = "0x40007B9")]
		ID_23 = 0x400000u,
		[Token(Token = "0x40007BA")]
		ID_24 = 0x800000u,
		[Token(Token = "0x40007BB")]
		ID_25 = 0x1000000u,
		[Token(Token = "0x40007BC")]
		ID_26 = 0x2000000u,
		[Token(Token = "0x40007BD")]
		ID_27 = 0x4000000u,
		[Token(Token = "0x40007BE")]
		ID_28 = 0x8000000u,
		[Token(Token = "0x40007BF")]
		ID_29 = 0x10000000u,
		[Token(Token = "0x40007C0")]
		ID_30 = 0x20000000u,
		[Token(Token = "0x40007C1")]
		ID_31 = 0x40000000u,
		[Token(Token = "0x40007C2")]
		ID_32 = 0x80000000u
	}
	[Serializable]
	[Token(Token = "0x2000101")]
	public struct ATColor
	{
		[Token(Token = "0x40007C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ATEffectID idMask;

		[Token(Token = "0x40007C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x15DB140", Offset = "0x15DB140")]
		public Color color;

		[Token(Token = "0x6000827")]
		[Address(RVA = "0x212CF80", Offset = "0x212CF80", VA = "0x212CF80", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000102")]
	public static class ATColorPayloadEventExtensions
	{
		[Token(Token = "0x6000828")]
		[Address(RVA = "0x212D7EC", Offset = "0x212D7EC", VA = "0x212D7EC")]
		public static bool HasATColorPayload(this KoreographyEvent koreoEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x6000829")]
		[Address(RVA = "0x212D878", Offset = "0x212D878", VA = "0x212D878")]
		public static ATColor GetATColorValue(this KoreographyEvent koreoEvent)
		{
			return default(ATColor);
		}
	}
	[Serializable]
	[Token(Token = "0x2000103")]
	public class ATColorPayload : IPayload
	{
		[Token(Token = "0x40007C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DB158", Offset = "0x15DB158")]
		private ATColor mATColorVal;

		[Token(Token = "0x17000109")]
		public ATColor ATColorVal
		{
			[Token(Token = "0x600082A")]
			[Address(RVA = "0x212D578", Offset = "0x212D578", VA = "0x212D578")]
			get
			{
				return default(ATColor);
			}
			[Token(Token = "0x600082B")]
			[Address(RVA = "0x212D58C", Offset = "0x212D58C", VA = "0x212D58C")]
			set
			{
			}
		}

		[Token(Token = "0x600082C")]
		[Address(RVA = "0x212D5A0", Offset = "0x212D5A0", VA = "0x212D5A0")]
		public static string GetFriendlyName()
		{
			return null;
		}

		[Token(Token = "0x600082D")]
		[Address(RVA = "0x212D5E8", Offset = "0x212D5E8", VA = "0x212D5E8", Slot = "4")]
		public IPayload GetCopy()
		{
			return null;
		}

		[Token(Token = "0x600082E")]
		[Address(RVA = "0x212D6AC", Offset = "0x212D6AC", VA = "0x212D6AC", Slot = "5")]
		public IPayload CopyDifferences(IPayload referece, IPayload delta)
		{
			return null;
		}

		[Token(Token = "0x600082F")]
		[Address(RVA = "0x212D674", Offset = "0x212D674", VA = "0x212D674")]
		public ATColorPayload()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000104")]
	public struct ATGradientInfo
	{
		[Token(Token = "0x40007C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float duration;

		[Token(Token = "0x40007C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ATEffectID idMask;
	}
	[Token(Token = "0x2000105")]
	public static class ATGradientPayloadEventExtensions
	{
		[Token(Token = "0x6000830")]
		[Address(RVA = "0x212DB58", Offset = "0x212DB58", VA = "0x212DB58")]
		public static bool HasATGradientPayload(this KoreographyEvent koreoEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x6000831")]
		[Address(RVA = "0x212DBE4", Offset = "0x212DBE4", VA = "0x212DBE4")]
		public static ATGradientInfo GetATGradientInfoValue(this KoreographyEvent koreoEvent)
		{
			return default(ATGradientInfo);
		}
	}
	[Serializable]
	[Token(Token = "0x2000106")]
	public class ATGradientPayload : IPayload
	{
		[Token(Token = "0x40007C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DB1A4", Offset = "0x15DB1A4")]
		private ATGradientInfo mATGradientVal;

		[Token(Token = "0x1700010A")]
		public ATGradientInfo ATGradientVal
		{
			[Token(Token = "0x6000832")]
			[Address(RVA = "0x212D930", Offset = "0x212D930", VA = "0x212D930")]
			get
			{
				return default(ATGradientInfo);
			}
			[Token(Token = "0x6000833")]
			[Address(RVA = "0x212D938", Offset = "0x212D938", VA = "0x212D938")]
			set
			{
			}
		}

		[Token(Token = "0x6000834")]
		[Address(RVA = "0x212D940", Offset = "0x212D940", VA = "0x212D940")]
		public static string GetFriendlyName()
		{
			return null;
		}

		[Token(Token = "0x6000835")]
		[Address(RVA = "0x212D988", Offset = "0x212D988", VA = "0x212D988")]
		private void UpdateValues(ATGradientInfo newVals)
		{
		}

		[Token(Token = "0x6000836")]
		[Address(RVA = "0x212D990", Offset = "0x212D990", VA = "0x212D990", Slot = "4")]
		public IPayload GetCopy()
		{
			return null;
		}

		[Token(Token = "0x6000837")]
		[Address(RVA = "0x212DA08", Offset = "0x212DA08", VA = "0x212DA08", Slot = "5")]
		public IPayload CopyDifferences(IPayload referece, IPayload delta)
		{
			return null;
		}

		[Token(Token = "0x6000838")]
		[Address(RVA = "0x212DB2C", Offset = "0x212DB2C", VA = "0x212DB2C")]
		public ATGradientInfo GetMergedDifferences(ATGradientInfo r, ATGradientInfo d)
		{
			return default(ATGradientInfo);
		}

		[Token(Token = "0x6000839")]
		[Address(RVA = "0x212DA00", Offset = "0x212DA00", VA = "0x212DA00")]
		public ATGradientPayload()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000107")]
	public struct ATID
	{
		[Token(Token = "0x40007C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ATEffectID idMask;

		[Token(Token = "0x600083A")]
		[Address(RVA = "0x212DC74", Offset = "0x212DC74", VA = "0x212DC74", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000108")]
	public static class ATIDPayloadEventExtensions
	{
		[Token(Token = "0x600083B")]
		[Address(RVA = "0x212DE50", Offset = "0x212DE50", VA = "0x212DE50")]
		public static bool HasATIDPayload(this KoreographyEvent koreoEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x600083C")]
		[Address(RVA = "0x212DEDC", Offset = "0x212DEDC", VA = "0x212DEDC")]
		public static ATID GetATIDValue(this KoreographyEvent koreoEvent)
		{
			return default(ATID);
		}
	}
	[Serializable]
	[Token(Token = "0x2000109")]
	public class ATIDPayload : IPayload
	{
		[Token(Token = "0x40007CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DB1F0", Offset = "0x15DB1F0")]
		private ATID mATIDVal;

		[Token(Token = "0x1700010B")]
		public ATID ATIDVal
		{
			[Token(Token = "0x600083D")]
			[Address(RVA = "0x212DCE0", Offset = "0x212DCE0", VA = "0x212DCE0")]
			get
			{
				return default(ATID);
			}
			[Token(Token = "0x600083E")]
			[Address(RVA = "0x212DCE8", Offset = "0x212DCE8", VA = "0x212DCE8")]
			set
			{
			}
		}

		[Token(Token = "0x600083F")]
		[Address(RVA = "0x212DCF0", Offset = "0x212DCF0", VA = "0x212DCF0")]
		public static string GetFriendlyName()
		{
			return null;
		}

		[Token(Token = "0x6000840")]
		[Address(RVA = "0x212DD38", Offset = "0x212DD38", VA = "0x212DD38", Slot = "4")]
		public IPayload GetCopy()
		{
			return null;
		}

		[Token(Token = "0x6000841")]
		[Address(RVA = "0x212DDB8", Offset = "0x212DDB8", VA = "0x212DDB8", Slot = "5")]
		public IPayload CopyDifferences(IPayload reference, IPayload delta)
		{
			return null;
		}

		[Token(Token = "0x6000842")]
		[Address(RVA = "0x212DDAC", Offset = "0x212DDAC", VA = "0x212DDAC")]
		public ATIDPayload()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200010A")]
	public struct ATLightingInfo
	{
		[Token(Token = "0x40007CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string name;

		[Token(Token = "0x40007CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string lightSet;

		[Token(Token = "0x40007CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string cubemap;

		[Token(Token = "0x40007CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float startFogDensity;

		[Token(Token = "0x40007CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float fogDensity;

		[Token(Token = "0x40007D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float fogTransitionBeats;

		[Token(Token = "0x40007D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float startSkyExposure;

		[Token(Token = "0x40007D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float skyExposure;

		[Token(Token = "0x40007D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float expTransitionBeats;

		[Token(Token = "0x6000843")]
		[Address(RVA = "0x212DF78", Offset = "0x212DF78", VA = "0x212DF78", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200010B")]
	public static class ATLightingPayloadEventExtensions
	{
		[Token(Token = "0x6000844")]
		[Address(RVA = "0x212E470", Offset = "0x212E470", VA = "0x212E470")]
		public static bool HasATLightingPayload(this KoreographyEvent koreoEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x6000845")]
		[Address(RVA = "0x212E4FC", Offset = "0x212E4FC", VA = "0x212E4FC")]
		public static ATLightingInfo GetATLightingInfoValue(this KoreographyEvent koreoEvent)
		{
			return default(ATLightingInfo);
		}
	}
	[Serializable]
	[Token(Token = "0x200010C")]
	public class ATLightingPayload : IPayload
	{
		[Token(Token = "0x40007D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DB23C", Offset = "0x15DB23C")]
		private ATLightingInfo mATLightingVal;

		[Token(Token = "0x1700010C")]
		public ATLightingInfo ATLightingVal
		{
			[Token(Token = "0x6000846")]
			[Address(RVA = "0x212DFEC", Offset = "0x212DFEC", VA = "0x212DFEC")]
			get
			{
				return default(ATLightingInfo);
			}
			[Token(Token = "0x6000847")]
			[Address(RVA = "0x212E000", Offset = "0x212E000", VA = "0x212E000")]
			set
			{
			}
		}

		[Token(Token = "0x6000848")]
		[Address(RVA = "0x212E020", Offset = "0x212E020", VA = "0x212E020")]
		public static string GetFriendlyName()
		{
			return null;
		}

		[Token(Token = "0x6000849")]
		[Address(RVA = "0x212E068", Offset = "0x212E068", VA = "0x212E068", Slot = "4")]
		public IPayload GetCopy()
		{
			return null;
		}

		[Token(Token = "0x600084A")]
		[Address(RVA = "0x212E1E0", Offset = "0x212E1E0", VA = "0x212E1E0", Slot = "5")]
		public IPayload CopyDifferences(IPayload referece, IPayload delta)
		{
			return null;
		}

		[Token(Token = "0x600084B")]
		[Address(RVA = "0x212E330", Offset = "0x212E330", VA = "0x212E330")]
		public ATLightingInfo CopyDifferences(ATLightingInfo r, ATLightingInfo d)
		{
			return default(ATLightingInfo);
		}

		[Token(Token = "0x600084C")]
		[Address(RVA = "0x212E100", Offset = "0x212E100", VA = "0x212E100")]
		public ATLightingPayload()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200010D")]
	public struct ATSpawnEvent
	{
		[Token(Token = "0x40007D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string group;

		[Token(Token = "0x40007D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string obj;

		[Token(Token = "0x40007D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ATEffectID idMask;

		[Token(Token = "0x40007D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float zOffset;

		[Token(Token = "0x600084D")]
		[Address(RVA = "0x212E634", Offset = "0x212E634", VA = "0x212E634", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200010E")]
	public static class ATSpawnPayloadEventExtensions
	{
		[Token(Token = "0x600084E")]
		[Address(RVA = "0x212EADC", Offset = "0x212EADC", VA = "0x212EADC")]
		public static bool HasATSpawnPayload(this KoreographyEvent koreoEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x600084F")]
		[Address(RVA = "0x212EB68", Offset = "0x212EB68", VA = "0x212EB68")]
		public static ATSpawnEvent GetATSpawnEventValue(this KoreographyEvent koreoEvent)
		{
			return default(ATSpawnEvent);
		}
	}
	[Serializable]
	[Token(Token = "0x200010F")]
	public class ATSpawnPayload : IPayload
	{
		[Token(Token = "0x40007D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DB288", Offset = "0x15DB288")]
		private ATSpawnEvent mATSpawnVal;

		[Token(Token = "0x1700010D")]
		public ATSpawnEvent ATSpawnVal
		{
			[Token(Token = "0x6000850")]
			[Address(RVA = "0x212E6A8", Offset = "0x212E6A8", VA = "0x212E6A8")]
			get
			{
				return default(ATSpawnEvent);
			}
			[Token(Token = "0x6000851")]
			[Address(RVA = "0x212E6BC", Offset = "0x212E6BC", VA = "0x212E6BC")]
			set
			{
			}
		}

		[Token(Token = "0x6000852")]
		[Address(RVA = "0x212E6DC", Offset = "0x212E6DC", VA = "0x212E6DC")]
		public static string GetFriendlyName()
		{
			return null;
		}

		[Token(Token = "0x6000853")]
		[Address(RVA = "0x212E724", Offset = "0x212E724", VA = "0x212E724")]
		private void UpdateValues(ATSpawnEvent newVals)
		{
		}

		[Token(Token = "0x6000854")]
		[Address(RVA = "0x212E744", Offset = "0x212E744", VA = "0x212E744", Slot = "4")]
		public IPayload GetCopy()
		{
			return null;
		}

		[Token(Token = "0x6000855")]
		[Address(RVA = "0x212E890", Offset = "0x212E890", VA = "0x212E890", Slot = "5")]
		public IPayload CopyDifferences(IPayload referece, IPayload delta)
		{
			return null;
		}

		[Token(Token = "0x6000856")]
		[Address(RVA = "0x212EA14", Offset = "0x212EA14", VA = "0x212EA14")]
		public ATSpawnEvent GetMergedDifferences(ATSpawnEvent r, ATSpawnEvent d)
		{
			return default(ATSpawnEvent);
		}

		[Token(Token = "0x6000857")]
		[Address(RVA = "0x212E7DC", Offset = "0x212E7DC", VA = "0x212E7DC")]
		public ATSpawnPayload()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000110")]
	public struct ATStrNumValue
	{
		[Token(Token = "0x40007DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string str;

		[Token(Token = "0x40007DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float num;

		[Token(Token = "0x40007DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public ATEffectID idMask;

		[Token(Token = "0x6000858")]
		[Address(RVA = "0x212F0AC", Offset = "0x212F0AC", VA = "0x212F0AC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000111")]
	public static class ATStrNumPayloadEventExtensions
	{
		[Token(Token = "0x6000859")]
		[Address(RVA = "0x212EF68", Offset = "0x212EF68", VA = "0x212EF68")]
		public static bool HasATStrNumPayload(this KoreographyEvent koreoEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x600085A")]
		[Address(RVA = "0x212EFF4", Offset = "0x212EFF4", VA = "0x212EFF4")]
		public static ATStrNumValue GetATStrNumValue(this KoreographyEvent koreoEvent)
		{
			return default(ATStrNumValue);
		}
	}
	[Serializable]
	[Token(Token = "0x2000112")]
	public class ATStrNumPayload : IPayload
	{
		[Token(Token = "0x40007DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DB2D4", Offset = "0x15DB2D4")]
		private ATStrNumValue mATStrNumVal;

		[Token(Token = "0x1700010E")]
		public ATStrNumValue ATStrNumVal
		{
			[Token(Token = "0x600085B")]
			[Address(RVA = "0x212EC6C", Offset = "0x212EC6C", VA = "0x212EC6C")]
			get
			{
				return default(ATStrNumValue);
			}
			[Token(Token = "0x600085C")]
			[Address(RVA = "0x212EC78", Offset = "0x212EC78", VA = "0x212EC78")]
			set
			{
			}
		}

		[Token(Token = "0x600085D")]
		[Address(RVA = "0x212EC88", Offset = "0x212EC88", VA = "0x212EC88")]
		public static string GetFriendlyName()
		{
			return null;
		}

		[Token(Token = "0x600085E")]
		[Address(RVA = "0x212ECD0", Offset = "0x212ECD0", VA = "0x212ECD0", Slot = "4")]
		public IPayload GetCopy()
		{
			return null;
		}

		[Token(Token = "0x600085F")]
		[Address(RVA = "0x212EDCC", Offset = "0x212EDCC", VA = "0x212EDCC", Slot = "5")]
		public IPayload CopyDifferences(IPayload referece, IPayload delta)
		{
			return null;
		}

		[Token(Token = "0x6000860")]
		[Address(RVA = "0x212EEDC", Offset = "0x212EEDC", VA = "0x212EEDC")]
		public ATStrNumValue GetMergedDifferences(ATStrNumValue r, ATStrNumValue d)
		{
			return default(ATStrNumValue);
		}

		[Token(Token = "0x6000861")]
		[Address(RVA = "0x212ED48", Offset = "0x212ED48", VA = "0x212ED48")]
		public ATStrNumPayload()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000113")]
	public struct ATVector
	{
		[Token(Token = "0x40007DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ATEffectID idMask;

		[Token(Token = "0x40007DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Vector3 vector;

		[Token(Token = "0x6000862")]
		[Address(RVA = "0x212F118", Offset = "0x212F118", VA = "0x212F118", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000114")]
	public static class ATVectorPayloadEventExtensions
	{
		[Token(Token = "0x6000863")]
		[Address(RVA = "0x212F460", Offset = "0x212F460", VA = "0x212F460")]
		public static bool HasATVectorPayload(this KoreographyEvent koreoEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x6000864")]
		[Address(RVA = "0x212F4EC", Offset = "0x212F4EC", VA = "0x212F4EC")]
		public static ATVector GetATVectorValue(this KoreographyEvent koreoEvent)
		{
			return default(ATVector);
		}
	}
	[Serializable]
	[Token(Token = "0x2000115")]
	public class ATVectorPayload : IPayload
	{
		[Token(Token = "0x40007E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DB320", Offset = "0x15DB320")]
		private ATVector mATVectorVal;

		[Token(Token = "0x1700010F")]
		public ATVector ATVectorVal
		{
			[Token(Token = "0x6000865")]
			[Address(RVA = "0x212F184", Offset = "0x212F184", VA = "0x212F184")]
			get
			{
				return default(ATVector);
			}
			[Token(Token = "0x6000866")]
			[Address(RVA = "0x212F190", Offset = "0x212F190", VA = "0x212F190")]
			set
			{
			}
		}

		[Token(Token = "0x6000867")]
		[Address(RVA = "0x212F198", Offset = "0x212F198", VA = "0x212F198")]
		public static string GetFriendlyName()
		{
			return null;
		}

		[Token(Token = "0x6000868")]
		[Address(RVA = "0x212F1E0", Offset = "0x212F1E0", VA = "0x212F1E0", Slot = "4")]
		public IPayload GetCopy()
		{
			return null;
		}

		[Token(Token = "0x6000869")]
		[Address(RVA = "0x212F2D4", Offset = "0x212F2D4", VA = "0x212F2D4", Slot = "5")]
		public IPayload CopyDifferences(IPayload referece, IPayload delta)
		{
			return null;
		}

		[Token(Token = "0x600086A")]
		[Address(RVA = "0x212F24C", Offset = "0x212F24C", VA = "0x212F24C")]
		public ATVectorPayload()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000116")]
	public struct ATVibeInfo
	{
		[Token(Token = "0x40007E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string[,] CONNECTED_NAMES;

		[Token(Token = "0x40007E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static string[,] DISCONNECTED_NAMES;

		[Token(Token = "0x40007E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string name;

		[Token(Token = "0x40007E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int freneticism;

		[Token(Token = "0x40007E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int physicality;

		[Token(Token = "0x40007E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool connected;

		[Token(Token = "0x40007E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool dark;

		[Token(Token = "0x40007E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector2 directionality;

		[Token(Token = "0x40007E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float startIntensity;

		[Token(Token = "0x40007EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float endIntensity;

		[Token(Token = "0x17000110")]
		public string Description
		{
			[Token(Token = "0x600086C")]
			[Address(RVA = "0x212F62C", Offset = "0x212F62C", VA = "0x212F62C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600086B")]
		[Address(RVA = "0x212F5B8", Offset = "0x212F5B8", VA = "0x212F5B8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600086D")]
		[Address(RVA = "0x212F6AC", Offset = "0x212F6AC", VA = "0x212F6AC")]
		public static string GetDescription(int f, int p, bool c)
		{
			return null;
		}

		[Token(Token = "0x600086E")]
		[Address(RVA = "0x212F790", Offset = "0x212F790", VA = "0x212F790")]
		public int GetIndex()
		{
			return default(int);
		}

		[Token(Token = "0x600086F")]
		[Address(RVA = "0x212F824", Offset = "0x212F824", VA = "0x212F824")]
		public static int CalcIndex(int f, int p, bool c, bool d)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000117")]
	public static class ATVibePayloadEventExtensions
	{
		[Token(Token = "0x6000871")]
		[Address(RVA = "0x21301A0", Offset = "0x21301A0", VA = "0x21301A0")]
		public static bool HasATVibePayload(this KoreographyEvent koreoEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x6000872")]
		[Address(RVA = "0x213022C", Offset = "0x213022C", VA = "0x213022C")]
		public static ATVibeInfo GetATVibeInfoValue(this KoreographyEvent koreoEvent)
		{
			return default(ATVibeInfo);
		}
	}
	[Serializable]
	[Token(Token = "0x2000118")]
	public class ATVibePayload : IPayload
	{
		[Token(Token = "0x40007EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DB36C", Offset = "0x15DB36C")]
		private ATVibeInfo mATVibeVal;

		[Token(Token = "0x17000111")]
		public ATVibeInfo ATVibeVal
		{
			[Token(Token = "0x6000873")]
			[Address(RVA = "0x212FCC0", Offset = "0x212FCC0", VA = "0x212FCC0")]
			get
			{
				return default(ATVibeInfo);
			}
			[Token(Token = "0x6000874")]
			[Address(RVA = "0x212FCD4", Offset = "0x212FCD4", VA = "0x212FCD4")]
			set
			{
			}
		}

		[Token(Token = "0x6000875")]
		[Address(RVA = "0x212FCF4", Offset = "0x212FCF4", VA = "0x212FCF4")]
		public static string GetFriendlyName()
		{
			return null;
		}

		[Token(Token = "0x6000876")]
		[Address(RVA = "0x212FD3C", Offset = "0x212FD3C", VA = "0x212FD3C", Slot = "4")]
		public IPayload GetCopy()
		{
			return null;
		}

		[Token(Token = "0x6000877")]
		[Address(RVA = "0x212FEA0", Offset = "0x212FEA0", VA = "0x212FEA0", Slot = "5")]
		public IPayload CopyDifferences(IPayload referece, IPayload delta)
		{
			return null;
		}

		[Token(Token = "0x6000878")]
		[Address(RVA = "0x212FFF4", Offset = "0x212FFF4", VA = "0x212FFF4")]
		public ATVibeInfo CopyDifferences(ATVibeInfo r, ATVibeInfo d)
		{
			return default(ATVibeInfo);
		}

		[Token(Token = "0x6000879")]
		[Address(RVA = "0x212FDD4", Offset = "0x212FDD4", VA = "0x212FDD4")]
		public ATVibePayload()
		{
		}
	}
}
namespace SonicBloom.MIDI
{
	[Token(Token = "0x2000119")]
	public class MIDIConstants
	{
		[Token(Token = "0x2000258")]
		public enum MIDIFileFormats
		{
			[Token(Token = "0x4000F63")]
			SingleTrack,
			[Token(Token = "0x4000F64")]
			MultipleTrackSync,
			[Token(Token = "0x4000F65")]
			MultipleTrackAsync
		}

		[Token(Token = "0x2000259")]
		public enum MIDIStatus
		{
			[Token(Token = "0x4000F67")]
			NoteOff = 128,
			[Token(Token = "0x4000F68")]
			NoteOn = 144,
			[Token(Token = "0x4000F69")]
			NoteAftertouch = 160,
			[Token(Token = "0x4000F6A")]
			ControllerChange = 176,
			[Token(Token = "0x4000F6B")]
			ProgramChange = 192,
			[Token(Token = "0x4000F6C")]
			ChannelPressure = 208,
			[Token(Token = "0x4000F6D")]
			PitchBend = 224,
			[Token(Token = "0x4000F6E")]
			SysExMessage = 240,
			[Token(Token = "0x4000F6F")]
			TimeCode = 241,
			[Token(Token = "0x4000F70")]
			SongPositionPointer = 242,
			[Token(Token = "0x4000F71")]
			SongSelect = 243,
			[Token(Token = "0x4000F72")]
			TuneRequest = 246,
			[Token(Token = "0x4000F73")]
			EndSysExMessage = 247,
			[Token(Token = "0x4000F74")]
			TimingClock = 248,
			[Token(Token = "0x4000F75")]
			Start = 250,
			[Token(Token = "0x4000F76")]
			Continue = 251,
			[Token(Token = "0x4000F77")]
			Stop = 252,
			[Token(Token = "0x4000F78")]
			ActiveSensing = 254,
			[Token(Token = "0x4000F79")]
			MetaEventOrReset = 255
		}

		[Token(Token = "0x200025A")]
		public enum MIDIMetaEvents
		{
			[Token(Token = "0x4000F7B")]
			SequenceNumber = 0,
			[Token(Token = "0x4000F7C")]
			Text = 1,
			[Token(Token = "0x4000F7D")]
			CopyrightNotice = 2,
			[Token(Token = "0x4000F7E")]
			SequenceOrTrackName = 3,
			[Token(Token = "0x4000F7F")]
			InstrumentName = 4,
			[Token(Token = "0x4000F80")]
			Lyric = 5,
			[Token(Token = "0x4000F81")]
			Marker = 6,
			[Token(Token = "0x4000F82")]
			CuePoint = 7,
			[Token(Token = "0x4000F83")]
			ProgramName = 8,
			[Token(Token = "0x4000F84")]
			DeviceName = 9,
			[Token(Token = "0x4000F85")]
			MIDIChannelPrefix = 32,
			[Token(Token = "0x4000F86")]
			MIDIPort = 33,
			[Token(Token = "0x4000F87")]
			EndOfTrack = 47,
			[Token(Token = "0x4000F88")]
			SetTempo = 81,
			[Token(Token = "0x4000F89")]
			SMPTEOffset = 84,
			[Token(Token = "0x4000F8A")]
			TimeSignature = 88,
			[Token(Token = "0x4000F8B")]
			KeySignature = 89,
			[Token(Token = "0x4000F8C")]
			SequencerSpecific = 127
		}

		[Token(Token = "0x200025B")]
		public enum MIDIControllers
		{
			[Token(Token = "0x4000F8E")]
			BankSelectCoarse = 0,
			[Token(Token = "0x4000F8F")]
			ModulationWheelCoarse = 1,
			[Token(Token = "0x4000F90")]
			BreathControllerCoarse = 2,
			[Token(Token = "0x4000F91")]
			FootControllerCoarse = 4,
			[Token(Token = "0x4000F92")]
			PortamentoTimeCoarse = 5,
			[Token(Token = "0x4000F93")]
			DataEntryCoarse = 6,
			[Token(Token = "0x4000F94")]
			ChannelVolumeCoarse = 7,
			[Token(Token = "0x4000F95")]
			BalanceCoarse = 8,
			[Token(Token = "0x4000F96")]
			PanCoarse = 10,
			[Token(Token = "0x4000F97")]
			ExpressionCoarse = 11,
			[Token(Token = "0x4000F98")]
			EffectControl1Coarse = 12,
			[Token(Token = "0x4000F99")]
			EffectControl2Coarse = 13,
			[Token(Token = "0x4000F9A")]
			GeneralPurposeController1Coarse = 16,
			[Token(Token = "0x4000F9B")]
			GeneralPurposeController2Coarse = 17,
			[Token(Token = "0x4000F9C")]
			GeneralPurposeController3Coarse = 18,
			[Token(Token = "0x4000F9D")]
			GeneralPurposeController4Coarse = 19,
			[Token(Token = "0x4000F9E")]
			BankSelectFine = 32,
			[Token(Token = "0x4000F9F")]
			ModulationWheelFine = 33,
			[Token(Token = "0x4000FA0")]
			BreathControllerFine = 34,
			[Token(Token = "0x4000FA1")]
			FootControllerFine = 36,
			[Token(Token = "0x4000FA2")]
			PortamentoTimeFine = 37,
			[Token(Token = "0x4000FA3")]
			DataEntryFine = 38,
			[Token(Token = "0x4000FA4")]
			ChannelVolumeFine = 39,
			[Token(Token = "0x4000FA5")]
			BalanceFine = 40,
			[Token(Token = "0x4000FA6")]
			PanFine = 42,
			[Token(Token = "0x4000FA7")]
			ExpressionFine = 43,
			[Token(Token = "0x4000FA8")]
			EffectControl1Fine = 44,
			[Token(Token = "0x4000FA9")]
			EffectControl2Fine = 45,
			[Token(Token = "0x4000FAA")]
			HoldPedal1 = 64,
			[Token(Token = "0x4000FAB")]
			PortamentoPedal = 65,
			[Token(Token = "0x4000FAC")]
			SostenutoPedal = 66,
			[Token(Token = "0x4000FAD")]
			SoftPedal = 67,
			[Token(Token = "0x4000FAE")]
			LegatoPedal = 68,
			[Token(Token = "0x4000FAF")]
			HoldPedal2 = 69,
			[Token(Token = "0x4000FB0")]
			SoundController1 = 70,
			[Token(Token = "0x4000FB1")]
			SoundController2 = 71,
			[Token(Token = "0x4000FB2")]
			SoundController3 = 72,
			[Token(Token = "0x4000FB3")]
			SoundController4 = 73,
			[Token(Token = "0x4000FB4")]
			SoundController5 = 74,
			[Token(Token = "0x4000FB5")]
			SoundController6 = 75,
			[Token(Token = "0x4000FB6")]
			SoundController7 = 76,
			[Token(Token = "0x4000FB7")]
			SoundController8 = 77,
			[Token(Token = "0x4000FB8")]
			SoundController9 = 78,
			[Token(Token = "0x4000FB9")]
			Soundcontroller10 = 79,
			[Token(Token = "0x4000FBA")]
			GeneralPurposeController5 = 80,
			[Token(Token = "0x4000FBB")]
			GeneralPurposeController6 = 81,
			[Token(Token = "0x4000FBC")]
			GeneralPurposeController7 = 82,
			[Token(Token = "0x4000FBD")]
			GeneralPurposeController8 = 83,
			[Token(Token = "0x4000FBE")]
			PortamentoControl = 84,
			[Token(Token = "0x4000FBF")]
			HighResolutionVelocityPrefix = 88,
			[Token(Token = "0x4000FC0")]
			Effect1Depth = 91,
			[Token(Token = "0x4000FC1")]
			Effect2Depth = 92,
			[Token(Token = "0x4000FC2")]
			Effect3Depth = 93,
			[Token(Token = "0x4000FC3")]
			Effect4Depth = 94,
			[Token(Token = "0x4000FC4")]
			Effect5Depth = 95,
			[Token(Token = "0x4000FC5")]
			DataButtonIncrement = 96,
			[Token(Token = "0x4000FC6")]
			DataButtonDecrement = 97,
			[Token(Token = "0x4000FC7")]
			NonRegisteredParameterCoarse = 98,
			[Token(Token = "0x4000FC8")]
			NonRegisteredParameterFine = 99,
			[Token(Token = "0x4000FC9")]
			RegisteredParameterCoarse = 100,
			[Token(Token = "0x4000FCA")]
			RegisteredParameterFine = 101,
			[Token(Token = "0x4000FCB")]
			AllSoundOff = 120,
			[Token(Token = "0x4000FCC")]
			AllControllersOff = 121,
			[Token(Token = "0x4000FCD")]
			LocalControl = 122,
			[Token(Token = "0x4000FCE")]
			AllNotesOff = 123,
			[Token(Token = "0x4000FCF")]
			OmniModeOff = 124,
			[Token(Token = "0x4000FD0")]
			OmniModeOn = 125,
			[Token(Token = "0x4000FD1")]
			MonoOperation = 126,
			[Token(Token = "0x4000FD2")]
			PolyOperation = 127
		}

		[Token(Token = "0x40007EC")]
		public const string HEADER_ID = "MThd";

		[Token(Token = "0x40007ED")]
		public const string TRACK_ID = "MTrk";

		[Token(Token = "0x600087A")]
		[Address(RVA = "0x2B2B61C", Offset = "0x2B2B61C", VA = "0x2B2B61C")]
		public MIDIConstants()
		{
		}
	}
	[Token(Token = "0x200011A")]
	public struct MIDITime
	{
		[Token(Token = "0x40007EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int bar;

		[Token(Token = "0x40007EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int beat;

		[Token(Token = "0x40007F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int tick;
	}
	[Token(Token = "0x200011B")]
	public struct SMPTETime
	{
		[Token(Token = "0x40007F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int hours;

		[Token(Token = "0x40007F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int minutes;

		[Token(Token = "0x40007F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int seconds;

		[Token(Token = "0x40007F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int frames;

		[Token(Token = "0x40007F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int ticks;
	}
	[Token(Token = "0x200011C")]
	public struct MIDITimeDivision
	{
		[Token(Token = "0x40007F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool bSMPTE;

		[Token(Token = "0x40007F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float fps;

		[Token(Token = "0x40007F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int subFrames;

		[Token(Token = "0x40007F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int ticks;
	}
	[Token(Token = "0x200011D")]
	public class MIDITempo
	{
		[Token(Token = "0x40007FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static MIDITempo DefaultTempo;

		[Token(Token = "0x40007FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int microPerQuarter;

		[Token(Token = "0x600087B")]
		[Address(RVA = "0x2B2C01C", Offset = "0x2B2C01C", VA = "0x2B2C01C")]
		public float GetBPM()
		{
			return default(float);
		}

		[Token(Token = "0x600087C")]
		[Address(RVA = "0x2B2C034", Offset = "0x2B2C034", VA = "0x2B2C034")]
		public MIDITempo()
		{
		}
	}
	[Token(Token = "0x200011E")]
	public class MIDITimeSignature
	{
		[Token(Token = "0x40007FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static MIDITimeSignature DefaultTimeSignature;

		[Token(Token = "0x40007FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int beatsPerBar;

		[Token(Token = "0x40007FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int noteValue;

		[Token(Token = "0x40007FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int midiClocks;

		[Token(Token = "0x4000800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int num32NotesPerBeat;

		[Token(Token = "0x600087E")]
		[Address(RVA = "0x2B2C0BC", Offset = "0x2B2C0BC", VA = "0x2B2C0BC")]
		public string GetTimeSig()
		{
			return null;
		}

		[Token(Token = "0x600087F")]
		[Address(RVA = "0x2B2C154", Offset = "0x2B2C154", VA = "0x2B2C154")]
		public MIDITimeSignature()
		{
		}
	}
	[Token(Token = "0x200011F")]
	public class MIDIKeySignature
	{
		[Token(Token = "0x4000801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static MIDIKeySignature DefaultKeySignature;

		[Token(Token = "0x4000802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static string[] majorKeys;

		[Token(Token = "0x4000803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static string[] minorKeys;

		[Token(Token = "0x4000804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int key;

		[Token(Token = "0x4000805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool bMinor;

		[Token(Token = "0x6000881")]
		[Address(RVA = "0x2B2B624", Offset = "0x2B2B624", VA = "0x2B2B624")]
		public string GetMusicKey()
		{
			return null;
		}

		[Token(Token = "0x6000882")]
		[Address(RVA = "0x2B2B718", Offset = "0x2B2B718", VA = "0x2B2B718")]
		public MIDIKeySignature()
		{
		}
	}
	[Token(Token = "0x2000120")]
	public struct MIDIEvent
	{
		[Token(Token = "0x4000806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public MIDITime eventTime;

		[Token(Token = "0x4000807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int deltaTime;

		[Token(Token = "0x4000808")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MIDIConstants.MIDIStatus status;

		[Token(Token = "0x4000809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public byte channel;

		[Token(Token = "0x400080A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		public byte dataOne;

		[Token(Token = "0x400080B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
		public byte dataTwo;
	}
	[Token(Token = "0x2000121")]
	public struct MIDITrack
	{
		[Token(Token = "0x400080C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int trackNumber;

		[Token(Token = "0x400080D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int trackEventCount;

		[Token(Token = "0x400080E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public List<MIDIEvent> midiEvents;
	}
	[Token(Token = "0x2000122")]
	public struct MIDIHeader
	{
		[Token(Token = "0x400080F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public MIDIConstants.MIDIFileFormats format;

		[Token(Token = "0x4000810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int numTracks;

		[Token(Token = "0x4000811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public MIDITimeDivision timeDivision;
	}
	[Token(Token = "0x2000123")]
	public class MIDIUtils
	{
		[Token(Token = "0x6000884")]
		[Address(RVA = "0x2B2C1DC", Offset = "0x2B2C1DC", VA = "0x2B2C1DC")]
		public static short EndianSwap16(short input)
		{
			return default(short);
		}

		[Token(Token = "0x6000885")]
		[Address(RVA = "0x2B2C1E8", Offset = "0x2B2C1E8", VA = "0x2B2C1E8")]
		public static int EndianSwap32(int input)
		{
			return default(int);
		}

		[Token(Token = "0x6000886")]
		[Address(RVA = "0x2B2C1F0", Offset = "0x2B2C1F0", VA = "0x2B2C1F0")]
		public static byte LowNibble(byte input)
		{
			return default(byte);
		}

		[Token(Token = "0x6000887")]
		[Address(RVA = "0x2B2C1F8", Offset = "0x2B2C1F8", VA = "0x2B2C1F8")]
		public static byte HighNibble(byte input)
		{
			return default(byte);
		}

		[Token(Token = "0x6000888")]
		[Address(RVA = "0x2B2C200", Offset = "0x2B2C200", VA = "0x2B2C200")]
		public static int ReadVariableLengthQuantity(BinaryReader reader)
		{
			return default(int);
		}

		[Token(Token = "0x6000889")]
		[Address(RVA = "0x2B2C260", Offset = "0x2B2C260", VA = "0x2B2C260")]
		public MIDIUtils()
		{
		}
	}
}
namespace SonicBloom.MIDI.Objects
{
	[Token(Token = "0x2000124")]
	public class SongBuilder : BinaryReader
	{
		[Token(Token = "0x4000812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool bPrintDebug;

		[Token(Token = "0x4000813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private MIDIHeader header;

		[Token(Token = "0x4000814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Song song;

		[Token(Token = "0x600088A")]
		[Address(RVA = "0x2B2E470", Offset = "0x2B2E470", VA = "0x2B2E470")]
		public static Song GetSong(string midiFileLoc)
		{
			return null;
		}

		[Token(Token = "0x600088B")]
		[Address(RVA = "0x2B2E6B0", Offset = "0x2B2E6B0", VA = "0x2B2E6B0")]
		private SongBuilder(Stream dataStream)
		{
		}

		[Token(Token = "0x600088C")]
		[Address(RVA = "0x2B2E6B8", Offset = "0x2B2E6B8", VA = "0x2B2E6B8")]
		private Song ParseSong()
		{
			return null;
		}

		[Token(Token = "0x600088D")]
		[Address(RVA = "0x2B2E7DC", Offset = "0x2B2E7DC", VA = "0x2B2E7DC")]
		private bool ReadHeader()
		{
			return default(bool);
		}

		[Token(Token = "0x600088E")]
		[Address(RVA = "0x2B2EA14", Offset = "0x2B2EA14", VA = "0x2B2EA14")]
		private Track ReadTrack()
		{
			return null;
		}

		[Token(Token = "0x600088F")]
		[Address(RVA = "0x2B31104", Offset = "0x2B31104", VA = "0x2B31104")]
		private string GetASCIIString(int len)
		{
			return null;
		}
	}
	[Token(Token = "0x2000125")]
	public class Note
	{
		[Token(Token = "0x4000815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int startTime;

		[Token(Token = "0x4000816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int key;

		[Token(Token = "0x4000817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int velocity;

		[Token(Token = "0x4000818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int endTime;

		[Token(Token = "0x4000819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Dictionary<int, int> pitch;

		[Token(Token = "0x6000891")]
		[Address(RVA = "0x2B2C5C8", Offset = "0x2B2C5C8", VA = "0x2B2C5C8")]
		public static string GetMusicNote(int key)
		{
			return null;
		}

		[Token(Token = "0x6000892")]
		[Address(RVA = "0x2B2C538", Offset = "0x2B2C538", VA = "0x2B2C538")]
		public Note()
		{
		}
	}
	[Token(Token = "0x2000126")]
	public class Channel
	{
		[Token(Token = "0x200025C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D56F4", Offset = "0x15D56F4")]
		private sealed class <>c__DisplayClass4_0
		{
			[Token(Token = "0x4000FD3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int time;

			[Token(Token = "0x4000FD4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int key;

			[Token(Token = "0x6000E9C")]
			[Address(RVA = "0x2B2C530", Offset = "0x2B2C530", VA = "0x2B2C530")]
			public <>c__DisplayClass4_0()
			{
			}

			[Token(Token = "0x6000E9D")]
			[Address(RVA = "0x2B2CB68", Offset = "0x2B2CB68", VA = "0x2B2CB68")]
			internal bool <BeginNote>b__0(Note x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200025D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D5704", Offset = "0x15D5704")]
		private sealed class <>c__DisplayClass5_0
		{
			[Token(Token = "0x4000FD5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int key;

			[Token(Token = "0x6000E9E")]
			[Address(RVA = "0x2B2C904", Offset = "0x2B2C904", VA = "0x2B2C904")]
			public <>c__DisplayClass5_0()
			{
			}

			[Token(Token = "0x6000E9F")]
			[Address(RVA = "0x2B2CBB0", Offset = "0x2B2CBB0", VA = "0x2B2CBB0")]
			internal bool <EndNote>b__0(Note x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200025E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D5714", Offset = "0x15D5714")]
		private sealed class <>c__DisplayClass6_0
		{
			[Token(Token = "0x4000FD6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int key;

			[Token(Token = "0x6000EA0")]
			[Address(RVA = "0x2B2C9DC", Offset = "0x2B2C9DC", VA = "0x2B2C9DC")]
			public <>c__DisplayClass6_0()
			{
			}

			[Token(Token = "0x6000EA1")]
			[Address(RVA = "0x2B2CBE4", Offset = "0x2B2CBE4", VA = "0x2B2CBE4")]
			internal bool <HasUnendedNoteWithKey>b__0(Note x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x400081A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<Note> notes;

		[Token(Token = "0x400081B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string instrumentName;

		[Token(Token = "0x17000112")]
		public List<Note> Notes
		{
			[Token(Token = "0x6000893")]
			[Address(RVA = "0x2B2C268", Offset = "0x2B2C268", VA = "0x2B2C268")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000894")]
		[Address(RVA = "0x2B2C270", Offset = "0x2B2C270", VA = "0x2B2C270")]
		public void BeginNote(int time, int key, int velocity)
		{
		}

		[Token(Token = "0x6000895")]
		[Address(RVA = "0x2B2C654", Offset = "0x2B2C654", VA = "0x2B2C654")]
		public void EndNote(int time, int key, int velocity)
		{
		}

		[Token(Token = "0x6000896")]
		[Address(RVA = "0x2B2C90C", Offset = "0x2B2C90C", VA = "0x2B2C90C")]
		public bool HasUnendedNoteWithKey(int key)
		{
			return default(bool);
		}

		[Token(Token = "0x6000897")]
		[Address(RVA = "0x2B2C9E4", Offset = "0x2B2C9E4", VA = "0x2B2C9E4")]
		public int NumNotes()
		{
			return default(int);
		}

		[Token(Token = "0x6000898")]
		[Address(RVA = "0x2B2CA34", Offset = "0x2B2CA34", VA = "0x2B2CA34")]
		public int NumUnendedNotes()
		{
			return default(int);
		}

		[Token(Token = "0x6000899")]
		[Address(RVA = "0x2B2CAD4", Offset = "0x2B2CAD4", VA = "0x2B2CAD4")]
		public Channel()
		{
		}
	}
	[Token(Token = "0x2000127")]
	public class Track
	{
		[Token(Token = "0x200025F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D5724", Offset = "0x15D5724")]
		private sealed class <>c__DisplayClass8_0
		{
			[Token(Token = "0x4000FD7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int time;

			[Token(Token = "0x6000EA2")]
			[Address(RVA = "0x2B31644", Offset = "0x2B31644", VA = "0x2B31644")]
			public <>c__DisplayClass8_0()
			{
			}

			[Token(Token = "0x6000EA3")]
			[Address(RVA = "0x2B31C3C", Offset = "0x2B31C3C", VA = "0x2B31C3C")]
			internal bool <AddLyric>b__0(MIDITimedMessage<string> x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x400081C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x400081D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<int, Channel> channels;

		[Token(Token = "0x400081E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<MIDITimedMessage<string>> lyrics;

		[Token(Token = "0x400081F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string instrumentName;

		[Token(Token = "0x4000820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string deviceName;

		[Token(Token = "0x17000113")]
		public Dictionary<int, Channel> Channels
		{
			[Token(Token = "0x600089A")]
			[Address(RVA = "0x2B3163C", Offset = "0x2B3163C", VA = "0x2B3163C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600089B")]
		[Address(RVA = "0x2B310AC", Offset = "0x2B310AC", VA = "0x2B310AC")]
		public bool HasLyrics()
		{
			return default(bool);
		}

		[Token(Token = "0x600089C")]
		[Address(RVA = "0x2B3132C", Offset = "0x2B3132C", VA = "0x2B3132C")]
		public void AddLyric(int time, string lyric)
		{
		}

		[Token(Token = "0x600089D")]
		[Address(RVA = "0x2B3164C", Offset = "0x2B3164C", VA = "0x2B3164C")]
		public List<MIDITimedMessage<string>> GetLyrics()
		{
			return null;
		}

		[Token(Token = "0x600089E")]
		[Address(RVA = "0x2B31654", Offset = "0x2B31654", VA = "0x2B31654")]
		public bool HasChannel(int channelNum)
		{
			return default(bool);
		}

		[Token(Token = "0x600089F")]
		[Address(RVA = "0x2B3125C", Offset = "0x2B3125C", VA = "0x2B3125C")]
		public Channel GetChannel(int channelNum, bool bCreateIfNull = true)
		{
			return null;
		}

		[Token(Token = "0x60008A0")]
		[Address(RVA = "0x2B316BC", Offset = "0x2B316BC", VA = "0x2B316BC")]
		public void PrintInfo()
		{
		}

		[Token(Token = "0x60008A1")]
		[Address(RVA = "0x2B3115C", Offset = "0x2B3115C", VA = "0x2B3115C")]
		public Track()
		{
		}
	}
	[Token(Token = "0x2000128")]
	public class MIDITimedMessage<T>
	{
		[Token(Token = "0x4000821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int time;

		[Token(Token = "0x4000822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double timeInSec;

		[Token(Token = "0x4000823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T msg;

		[Token(Token = "0x60008A2")]
		public MIDITimedMessage()
		{
		}
	}
	[Token(Token = "0x2000129")]
	public class Song
	{
		[Token(Token = "0x2000260")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D5734", Offset = "0x15D5734")]
		private sealed class <>c__DisplayClass21_0
		{
			[Token(Token = "0x4000FD8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int time;

			[Token(Token = "0x6000EA4")]
			[Address(RVA = "0x2B2D744", Offset = "0x2B2D744", VA = "0x2B2D744")]
			public <>c__DisplayClass21_0()
			{
			}

			[Token(Token = "0x6000EA5")]
			[Address(RVA = "0x2B2E32C", Offset = "0x2B2E32C", VA = "0x2B2E32C")]
			internal bool <AddTempo>b__0(MIDITimedMessage<MIDITempo> x)
			{
				return default(bool);
			}

			[Token(Token = "0x6000EA6")]
			[Address(RVA = "0x2B2E350", Offset = "0x2B2E350", VA = "0x2B2E350")]
			internal bool <AddTempo>b__1(MIDITimedMessage<MIDITempo> x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000261")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D5744", Offset = "0x15D5744")]
		private sealed class <>c__DisplayClass22_0
		{
			[Token(Token = "0x4000FD9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int tickTime;

			[Token(Token = "0x6000EA7")]
			[Address(RVA = "0x2B2DB68", Offset = "0x2B2DB68", VA = "0x2B2DB68")]
			public <>c__DisplayClass22_0()
			{
			}

			[Token(Token = "0x6000EA8")]
			[Address(RVA = "0x2B2E374", Offset = "0x2B2E374", VA = "0x2B2E374")]
			internal bool <AddTimeSignature>b__0(MIDITimedMessage<MIDITimeSignature> x)
			{
				return default(bool);
			}

			[Token(Token = "0x6000EA9")]
			[Address(RVA = "0x2B2E398", Offset = "0x2B2E398", VA = "0x2B2E398")]
			internal bool <AddTimeSignature>b__1(MIDITimedMessage<MIDITimeSignature> x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000262")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D5754", Offset = "0x15D5754")]
		private sealed class <>c__DisplayClass23_0
		{
			[Token(Token = "0x4000FDA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int tickTime;

			[Token(Token = "0x6000EAA")]
			[Address(RVA = "0x2B2DF8C", Offset = "0x2B2DF8C", VA = "0x2B2DF8C")]
			public <>c__DisplayClass23_0()
			{
			}

			[Token(Token = "0x6000EAB")]
			[Address(RVA = "0x2B2E3BC", Offset = "0x2B2E3BC", VA = "0x2B2E3BC")]
			internal bool <AddKeySignature>b__0(MIDITimedMessage<MIDIKeySignature> x)
			{
				return default(bool);
			}

			[Token(Token = "0x6000EAC")]
			[Address(RVA = "0x2B2E3E0", Offset = "0x2B2E3E0", VA = "0x2B2E3E0")]
			internal bool <AddKeySignature>b__1(MIDITimedMessage<MIDIKeySignature> x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000263")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D5764", Offset = "0x15D5764")]
		private sealed class <>c__DisplayClass26_0
		{
			[Token(Token = "0x4000FDB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int tickTime;

			[Token(Token = "0x6000EAD")]
			[Address(RVA = "0x2B2E044", Offset = "0x2B2E044", VA = "0x2B2E044")]
			public <>c__DisplayClass26_0()
			{
			}

			[Token(Token = "0x6000EAE")]
			[Address(RVA = "0x2B2E404", Offset = "0x2B2E404", VA = "0x2B2E404")]
			internal bool <GetTempoAtTime>b__0(MIDITimedMessage<MIDITempo> x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000264")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D5774", Offset = "0x15D5774")]
		private sealed class <>c__DisplayClass27_0
		{
			[Token(Token = "0x4000FDC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int tickTime;

			[Token(Token = "0x6000EAF")]
			[Address(RVA = "0x2B2E128", Offset = "0x2B2E128", VA = "0x2B2E128")]
			public <>c__DisplayClass27_0()
			{
			}

			[Token(Token = "0x6000EB0")]
			[Address(RVA = "0x2B2E428", Offset = "0x2B2E428", VA = "0x2B2E428")]
			internal bool <GetTimeSignatureAtTime>b__0(MIDITimedMessage<MIDITimeSignature> x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000265")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D5784", Offset = "0x15D5784")]
		private sealed class <>c__DisplayClass28_0
		{
			[Token(Token = "0x4000FDD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int tickTime;

			[Token(Token = "0x6000EB1")]
			[Address(RVA = "0x2B2E20C", Offset = "0x2B2E20C", VA = "0x2B2E20C")]
			public <>c__DisplayClass28_0()
			{
			}

			[Token(Token = "0x6000EB2")]
			[Address(RVA = "0x2B2E44C", Offset = "0x2B2E44C", VA = "0x2B2E44C")]
			internal bool <GetKeySignatureAtTime>b__0(MIDITimedMessage<MIDIKeySignature> x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private MIDITimeDivision timeDivision;

		[Token(Token = "0x4000825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<MIDITimedMessage<MIDITempo>> tempoMap;

		[Token(Token = "0x4000826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<MIDITimedMessage<MIDITimeSignature>> timeSigMap;

		[Token(Token = "0x4000827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<MIDITimedMessage<MIDIKeySignature>> keySigMap;

		[Token(Token = "0x4000828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<Track> tracks;

		[Token(Token = "0x17000114")]
		public List<MIDITimedMessage<MIDITempo>> TempoMap
		{
			[Token(Token = "0x60008A3")]
			[Address(RVA = "0x2B2CC18", Offset = "0x2B2CC18", VA = "0x2B2CC18")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000115")]
		public List<MIDITimedMessage<MIDITimeSignature>> TimeSignatureMap
		{
			[Token(Token = "0x60008A4")]
			[Address(RVA = "0x2B2CC20", Offset = "0x2B2CC20", VA = "0x2B2CC20")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000116")]
		public List<MIDITimedMessage<MIDIKeySignature>> KeySignatureMap
		{
			[Token(Token = "0x60008A5")]
			[Address(RVA = "0x2B2CC28", Offset = "0x2B2CC28", VA = "0x2B2CC28")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000117")]
		public List<Track> Tracks
		{
			[Token(Token = "0x60008A6")]
			[Address(RVA = "0x2B2CC30", Offset = "0x2B2CC30", VA = "0x2B2CC30")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008A7")]
		[Address(RVA = "0x2B2CC38", Offset = "0x2B2CC38", VA = "0x2B2CC38")]
		private static MIDITimedMessage<MIDITempo> GetDefaultTempo()
		{
			return null;
		}

		[Token(Token = "0x60008A8")]
		[Address(RVA = "0x2B2CCE4", Offset = "0x2B2CCE4", VA = "0x2B2CCE4")]
		private static MIDITimedMessage<MIDITimeSignature> GetDefaultTimeSignature()
		{
			return null;
		}

		[Token(Token = "0x60008A9")]
		[Address(RVA = "0x2B2CD90", Offset = "0x2B2CD90", VA = "0x2B2CD90")]
		private static MIDITimedMessage<MIDIKeySignature> GetDefaultKeySignature()
		{
			return null;
		}

		[Token(Token = "0x60008AA")]
		[Address(RVA = "0x2B2CE3C", Offset = "0x2B2CE3C", VA = "0x2B2CE3C")]
		public void SetTimeDiv(MIDITimeDivision div)
		{
		}

		[Token(Token = "0x60008AB")]
		[Address(RVA = "0x2B2CE44", Offset = "0x2B2CE44", VA = "0x2B2CE44")]
		private double GetTimeInSeconds(int messageTime, MIDITimedMessage<MIDITempo> targetTempo)
		{
			return default(double);
		}

		[Token(Token = "0x60008AC")]
		[Address(RVA = "0x2B2D088", Offset = "0x2B2D088", VA = "0x2B2D088")]
		public double GetTimeInSeconds(int messageTime)
		{
			return default(double);
		}

		[Token(Token = "0x60008AD")]
		[Address(RVA = "0x2B2D194", Offset = "0x2B2D194", VA = "0x2B2D194")]
		public void AddTrack(Track track)
		{
		}

		[Token(Token = "0x60008AE")]
		[Address(RVA = "0x2B2D1FC", Offset = "0x2B2D1FC", VA = "0x2B2D1FC")]
		public int NumTracks()
		{
			return default(int);
		}

		[Token(Token = "0x60008AF")]
		[Address(RVA = "0x2B2D24C", Offset = "0x2B2D24C", VA = "0x2B2D24C")]
		public void AddTempo(int time, MIDITempo tempo)
		{
		}

		[Token(Token = "0x60008B0")]
		[Address(RVA = "0x2B2D74C", Offset = "0x2B2D74C", VA = "0x2B2D74C")]
		public void AddTimeSignature(int tickTime, MIDITimeSignature sig)
		{
		}

		[Token(Token = "0x60008B1")]
		[Address(RVA = "0x2B2DB70", Offset = "0x2B2DB70", VA = "0x2B2DB70")]
		public void AddKeySignature(int tickTime, MIDIKeySignature sig)
		{
		}

		[Token(Token = "0x60008B2")]
		[Address(RVA = "0x2B2DF94", Offset = "0x2B2DF94", VA = "0x2B2DF94")]
		public bool HasTempoMap()
		{
			return default(bool);
		}

		[Token(Token = "0x60008B3")]
		[Address(RVA = "0x2B2DFEC", Offset = "0x2B2DFEC", VA = "0x2B2DFEC")]
		public bool HasTimeSignatureMap()
		{
			return default(bool);
		}

		[Token(Token = "0x60008B4")]
		[Address(RVA = "0x2B2D0B8", Offset = "0x2B2D0B8", VA = "0x2B2D0B8")]
		public MIDITimedMessage<MIDITempo> GetTempoAtTime(int tickTime)
		{
			return null;
		}

		[Token(Token = "0x60008B5")]
		[Address(RVA = "0x2B2E04C", Offset = "0x2B2E04C", VA = "0x2B2E04C")]
		public MIDITimedMessage<MIDITimeSignature> GetTimeSignatureAtTime(int tickTime)
		{
			return null;
		}

		[Token(Token = "0x60008B6")]
		[Address(RVA = "0x2B2E130", Offset = "0x2B2E130", VA = "0x2B2E130")]
		public MIDITimedMessage<MIDIKeySignature> GetKeySignatureAtTime(int tickTime)
		{
			return null;
		}

		[Token(Token = "0x60008B7")]
		[Address(RVA = "0x2B2E214", Offset = "0x2B2E214", VA = "0x2B2E214")]
		public Song()
		{
		}
	}
}
namespace SonicBloom.Koreo
{
	[Token(Token = "0x200012A")]
	public class Koreography : ScriptableObject
	{
		[Serializable]
		[Token(Token = "0x2000266")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D5794", Offset = "0x15D5794")]
		private sealed class <>c
		{
			[Token(Token = "0x4000FDE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000FDF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Predicate<KoreographyTrackBase> <>9__25_0;

			[Token(Token = "0x4000FE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Predicate<TempoSectionDef> <>9__26_0;

			[Token(Token = "0x4000FE1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Func<TempoSectionDef, string> <>9__32_0;

			[Token(Token = "0x4000FE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static Func<KoreographyTrackBase, string> <>9__40_0;

			[Token(Token = "0x6000EB4")]
			[Address(RVA = "0x2FE027C", Offset = "0x2FE027C", VA = "0x2FE027C")]
			public <>c()
			{
			}

			[Token(Token = "0x6000EB5")]
			[Address(RVA = "0x2FE0284", Offset = "0x2FE0284", VA = "0x2FE0284")]
			internal bool <CheckTrackListIntegrity>b__25_0(KoreographyTrackBase track)
			{
				return default(bool);
			}

			[Token(Token = "0x6000EB6")]
			[Address(RVA = "0x2FE02F0", Offset = "0x2FE02F0", VA = "0x2FE02F0")]
			internal bool <CheckTempoSectionListIntegrity>b__26_0(TempoSectionDef section)
			{
				return default(bool);
			}

			[Token(Token = "0x6000EB7")]
			[Address(RVA = "0x2FE02FC", Offset = "0x2FE02FC", VA = "0x2FE02FC")]
			internal string <GetTempoSectionNames>b__32_0(TempoSectionDef section)
			{
				return null;
			}

			[Token(Token = "0x6000EB8")]
			[Address(RVA = "0x2FE0314", Offset = "0x2FE0314", VA = "0x2FE0314")]
			internal string <GetEventIDs>b__40_0(KoreographyTrackBase track)
			{
				return null;
			}
		}

		[Token(Token = "0x4000829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DB3B8", Offset = "0x15DB3B8")]
		private AudioClip mSourceClip;

		[Token(Token = "0x400082A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DB404", Offset = "0x15DB404")]
		private string mAudioFilePath;

		[Token(Token = "0x400082B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DB450", Offset = "0x15DB450")]
		private int mSampleRate;

		[Token(Token = "0x400082C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DB49C", Offset = "0x15DB49C")]
		private bool mIgnoreLatencyOffset;

		[Token(Token = "0x400082D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DB4E8", Offset = "0x15DB4E8")]
		private List<TempoSectionDef> mTempoSections;

		[Token(Token = "0x400082E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DB534", Offset = "0x15DB534")]
		private List<KoreographyTrackBase> mTracks;

		[Token(Token = "0x400082F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string clipName;

		[Token(Token = "0x4000830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int lastUpdateStart;

		[Token(Token = "0x4000831")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int lastUpdateEnd;

		[Token(Token = "0x17000118")]
		public AudioClip SourceClip
		{
			[Token(Token = "0x60008B8")]
			[Address(RVA = "0x2FDE418", Offset = "0x2FDE418", VA = "0x2FDE418")]
			get
			{
				return null;
			}
			[Token(Token = "0x60008B9")]
			[Address(RVA = "0x2FDE420", Offset = "0x2FDE420", VA = "0x2FDE420")]
			set
			{
			}
		}

		[Token(Token = "0x17000119")]
		public string SourceClipPath
		{
			[Token(Token = "0x60008BA")]
			[Address(RVA = "0x2FDE508", Offset = "0x2FDE508", VA = "0x2FDE508")]
			get
			{
				return null;
			}
			[Token(Token = "0x60008BB")]
			[Address(RVA = "0x2FDE510", Offset = "0x2FDE510", VA = "0x2FDE510")]
			set
			{
			}
		}

		[Token(Token = "0x1700011A")]
		public string SourceClipName
		{
			[Token(Token = "0x60008BC")]
			[Address(RVA = "0x2FDAFF0", Offset = "0x2FDAFF0", VA = "0x2FDAFF0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011B")]
		public int SampleRate
		{
			[Token(Token = "0x60008BD")]
			[Address(RVA = "0x2FDCBE4", Offset = "0x2FDCBE4", VA = "0x2FDCBE4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60008BE")]
			[Address(RVA = "0x2FDE5BC", Offset = "0x2FDE5BC", VA = "0x2FDE5BC")]
			set
			{
			}
		}

		[Token(Token = "0x1700011C")]
		public bool IgnoreLatencyOffset
		{
			[Token(Token = "0x60008BF")]
			[Address(RVA = "0x2FDE66C", Offset = "0x2FDE66C", VA = "0x2FDE66C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60008C0")]
			[Address(RVA = "0x2FDE674", Offset = "0x2FDE674", VA = "0x2FDE674")]
			set
			{
			}
		}

		[Token(Token = "0x1700011D")]
		public List<KoreographyTrackBase> Tracks
		{
			[Token(Token = "0x60008C1")]
			[Address(RVA = "0x2FDE680", Offset = "0x2FDE680", VA = "0x2FDE680")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008C2")]
		[Address(RVA = "0x2FDE6F0", Offset = "0x2FDE6F0", VA = "0x2FDE6F0")]
		public bool CheckTrackListIntegrity()
		{
			return default(bool);
		}

		[Token(Token = "0x60008C3")]
		[Address(RVA = "0x2FDE814", Offset = "0x2FDE814", VA = "0x2FDE814")]
		public bool CheckTempoSectionListIntegrity()
		{
			return default(bool);
		}

		[Token(Token = "0x60008C4")]
		[Address(RVA = "0x2FDEA3C", Offset = "0x2FDEA3C", VA = "0x2FDEA3C")]
		public void OverwriteTempoSections(List<TempoSectionDef> newSections)
		{
		}

		[Token(Token = "0x60008C5")]
		[Address(RVA = "0x2FDEB58", Offset = "0x2FDEB58", VA = "0x2FDEB58")]
		public int GetIndexOfTempoSection(TempoSectionDef sectionDef)
		{
			return default(int);
		}

		[Token(Token = "0x60008C6")]
		[Address(RVA = "0x2FDEBC0", Offset = "0x2FDEBC0", VA = "0x2FDEBC0")]
		public TempoSectionDef InsertTempoSectionAtIndex(int idxToInsert)
		{
			return null;
		}

		[Token(Token = "0x60008C7")]
		[Address(RVA = "0x2FDEC94", Offset = "0x2FDEC94", VA = "0x2FDEC94")]
		public bool RemoveTempoSectionAtIndex(int idxToRemove)
		{
			return default(bool);
		}

		[Token(Token = "0x60008C8")]
		[Address(RVA = "0x2FDED54", Offset = "0x2FDED54", VA = "0x2FDED54")]
		public bool RemoveTempoSection(TempoSectionDef sectionDef)
		{
			return default(bool);
		}

		[Token(Token = "0x60008C9")]
		[Address(RVA = "0x2FDED7C", Offset = "0x2FDED7C", VA = "0x2FDED7C")]
		public string[] GetTempoSectionNames()
		{
			return null;
		}

		[Token(Token = "0x60008CA")]
		[Address(RVA = "0x2FDEE84", Offset = "0x2FDEE84", VA = "0x2FDEE84")]
		public TempoSectionDef GetTempoSectionAtIndex(int sectionIdx)
		{
			return null;
		}

		[Token(Token = "0x60008CB")]
		[Address(RVA = "0x2FDEF0C", Offset = "0x2FDEF0C", VA = "0x2FDEF0C")]
		public int GetNumTempoSections()
		{
			return default(int);
		}

		[Token(Token = "0x60008CC")]
		[Address(RVA = "0x2FDE9A8", Offset = "0x2FDE9A8", VA = "0x2FDE9A8")]
		public void EnsureTempoSectionOrder()
		{
		}

		[Token(Token = "0x60008CD")]
		[Address(RVA = "0x2FDEF5C", Offset = "0x2FDEF5C", VA = "0x2FDEF5C")]
		public bool CanAddTrack(KoreographyTrackBase track)
		{
			return default(bool);
		}

		[Token(Token = "0x60008CE")]
		[Address(RVA = "0x2FDEF84", Offset = "0x2FDEF84", VA = "0x2FDEF84")]
		public bool AddTrack(KoreographyTrackBase track)
		{
			return default(bool);
		}

		[Token(Token = "0x60008CF")]
		[Address(RVA = "0x2FDF00C", Offset = "0x2FDF00C", VA = "0x2FDF00C")]
		public void RemoveTrack(KoreographyTrackBase track)
		{
		}

		[Token(Token = "0x60008D0")]
		[Address(RVA = "0x2FDF074", Offset = "0x2FDF074", VA = "0x2FDF074")]
		public void RemoveTrack(string eventID)
		{
		}

		[Token(Token = "0x60008D1")]
		[Address(RVA = "0x2FDF0EC", Offset = "0x2FDF0EC", VA = "0x2FDF0EC")]
		public string[] GetEventIDs()
		{
			return null;
		}

		[Token(Token = "0x60008D2")]
		[Address(RVA = "0x2FDC85C", Offset = "0x2FDC85C", VA = "0x2FDC85C")]
		public KoreographyTrackBase GetTrackByID(string eventID)
		{
			return null;
		}

		[Token(Token = "0x60008D3")]
		[Address(RVA = "0x2FDF28C", Offset = "0x2FDF28C", VA = "0x2FDF28C")]
		public KoreographyTrackBase GetTrackAtIndex(int trackIdx)
		{
			return null;
		}

		[Token(Token = "0x60008D4")]
		[Address(RVA = "0x2FDF314", Offset = "0x2FDF314", VA = "0x2FDF314")]
		public int GetIndexOfTrack(KoreographyTrackBase track)
		{
			return default(int);
		}

		[Token(Token = "0x60008D5")]
		[Address(RVA = "0x2FDF37C", Offset = "0x2FDF37C", VA = "0x2FDF37C")]
		public bool HasTrack(KoreographyTrackBase track)
		{
			return default(bool);
		}

		[Token(Token = "0x60008D6")]
		[Address(RVA = "0x2FDF3E4", Offset = "0x2FDF3E4", VA = "0x2FDF3E4")]
		public int GetNumTracks()
		{
			return default(int);
		}

		[Token(Token = "0x60008D7")]
		[Address(RVA = "0x2FDB730", Offset = "0x2FDB730", VA = "0x2FDB730")]
		public bool DoesTrackWithEventIDExist(string eventID)
		{
			return default(bool);
		}

		[Token(Token = "0x60008D8")]
		[Address(RVA = "0x2FDA854", Offset = "0x2FDA854", VA = "0x2FDA854")]
		public void ResetTimings()
		{
		}

		[Token(Token = "0x60008D9")]
		[Address(RVA = "0x2FDDB44", Offset = "0x2FDDB44", VA = "0x2FDDB44")]
		public float GetBeatTimeDelta(int subdivisions = 1)
		{
			return default(float);
		}

		[Token(Token = "0x60008DA")]
		[Address(RVA = "0x2FDF4FC", Offset = "0x2FDF4FC", VA = "0x2FDF4FC")]
		public int GetLatestSampleTime()
		{
			return default(int);
		}

		[Token(Token = "0x60008DB")]
		[Address(RVA = "0x2FDD024", Offset = "0x2FDD024", VA = "0x2FDD024")]
		public int GetLatestSampleTimeDelta()
		{
			return default(int);
		}

		[Token(Token = "0x60008DC")]
		[Address(RVA = "0x2FDF504", Offset = "0x2FDF504", VA = "0x2FDF504")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x15E5190", Offset = "0x15E5190")]
		public int GetSampleTimeDelta()
		{
			return default(int);
		}

		[Token(Token = "0x60008DD")]
		[Address(RVA = "0x2FDF514", Offset = "0x2FDF514", VA = "0x2FDF514")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x15E51C8", Offset = "0x15E51C8")]
		public double GetBeatTimeFromSampleTimeLite(int sampleTime, int subdivisions = 1)
		{
			return default(double);
		}

		[Token(Token = "0x60008DE")]
		[Address(RVA = "0x2FDD748", Offset = "0x2FDD748", VA = "0x2FDD748")]
		public double GetBeatTimeFromSampleTime(int sampleTime, int subdivisions = 1)
		{
			return default(double);
		}

		[Token(Token = "0x60008DF")]
		[Address(RVA = "0x2FDF518", Offset = "0x2FDF518", VA = "0x2FDF518")]
		public int GetSampleTimeFromBeatTime(double beatTime, int subdivisions = 1)
		{
			return default(int);
		}

		[Token(Token = "0x60008E0")]
		[Address(RVA = "0x2FDF6F0", Offset = "0x2FDF6F0", VA = "0x2FDF6F0")]
		public double GetMeasureTimeFromSampleTime(int sampleTime)
		{
			return default(double);
		}

		[Token(Token = "0x60008E1")]
		[Address(RVA = "0x2FDF87C", Offset = "0x2FDF87C", VA = "0x2FDF87C")]
		public int GetSampleTimeFromMeasureTime(double measureTime)
		{
			return default(int);
		}

		[Token(Token = "0x60008E2")]
		[Address(RVA = "0x2FDFA58", Offset = "0x2FDFA58", VA = "0x2FDFA58")]
		public int GetSampleTimeFromMeasureTime(int measure)
		{
			return default(int);
		}

		[Token(Token = "0x60008E3")]
		[Address(RVA = "0x2FDFA60", Offset = "0x2FDFA60", VA = "0x2FDFA60")]
		public double GetBeatCountInMeasureFromSampleTime(int sampleTime)
		{
			return default(double);
		}

		[Token(Token = "0x60008E4")]
		[Address(RVA = "0x2FDFB50", Offset = "0x2FDFB50", VA = "0x2FDFB50")]
		public double GetSamplesPerBeat(int checkSample, int subdivisions = 1)
		{
			return default(double);
		}

		[Token(Token = "0x60008E5")]
		[Address(RVA = "0x2FDD524", Offset = "0x2FDD524", VA = "0x2FDD524")]
		public double GetBPM(int checkSample)
		{
			return default(double);
		}

		[Token(Token = "0x60008E6")]
		[Address(RVA = "0x2FDFB80", Offset = "0x2FDFB80", VA = "0x2FDFB80")]
		public int GetSampleOfNearestBeat(int checkSample, int subdivisions = 1)
		{
			return default(int);
		}

		[Token(Token = "0x60008E7")]
		[Address(RVA = "0x2FDFABC", Offset = "0x2FDFABC", VA = "0x2FDFABC")]
		public TempoSectionDef GetTempoSectionForSample(int checkSample)
		{
			return null;
		}

		[Token(Token = "0x60008E8")]
		[Address(RVA = "0x2FDF434", Offset = "0x2FDF434", VA = "0x2FDF434")]
		public int GetTempoSectionIndexForSample(int checkSample)
		{
			return default(int);
		}

		[Token(Token = "0x60008E9")]
		[Address(RVA = "0x2FDB2C4", Offset = "0x2FDB2C4", VA = "0x2FDB2C4")]
		public void UpdateTrackTime(int startTime, int endTime, DeltaSlice deltaSlice)
		{
		}

		[Token(Token = "0x60008EA")]
		[Address(RVA = "0x2FDFD98", Offset = "0x2FDFD98", VA = "0x2FDFD98")]
		internal void RegisterForEvents(string eventDef, KoreographyEventCallback callback)
		{
		}

		[Token(Token = "0x60008EB")]
		[Address(RVA = "0x2FDB7D0", Offset = "0x2FDB7D0", VA = "0x2FDB7D0")]
		internal void RegisterForEventsWithTime(string eventDef, KoreographyEventCallbackWithTime callback)
		{
		}

		[Token(Token = "0x60008EC")]
		[Address(RVA = "0x2FDFEAC", Offset = "0x2FDFEAC", VA = "0x2FDFEAC")]
		internal void UnregisterForEvents(string eventDef, KoreographyEventCallback callback)
		{
		}

		[Token(Token = "0x60008ED")]
		[Address(RVA = "0x2FDBA78", Offset = "0x2FDBA78", VA = "0x2FDBA78")]
		internal void UnregisterForEventsWithTime(string eventDef, KoreographyEventCallbackWithTime callback)
		{
		}

		[Token(Token = "0x60008EE")]
		[Address(RVA = "0x2FDFFC0", Offset = "0x2FDFFC0", VA = "0x2FDFFC0")]
		internal void ClearEventRegister()
		{
		}

		[Token(Token = "0x60008EF")]
		[Address(RVA = "0x2FE00A4", Offset = "0x2FE00A4", VA = "0x2FE00A4")]
		public Koreography()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200012B")]
	public class TempoSectionDef
	{
		[Token(Token = "0x4000832")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DB580", Offset = "0x15DB580")]
		private string sectionName;

		[Token(Token = "0x4000833")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DB5CC", Offset = "0x15DB5CC")]
		private int startSample;

		[Token(Token = "0x4000834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DB618", Offset = "0x15DB618")]
		private double samplesPerBeat;

		[Token(Token = "0x4000835")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DB664", Offset = "0x15DB664")]
		private int beatsPerMeasure;

		[Token(Token = "0x4000836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DB6B0", Offset = "0x15DB6B0")]
		private bool bStartNewMeasure;

		[Token(Token = "0x1700011E")]
		public string SectionName
		{
			[Token(Token = "0x60008F0")]
			[Address(RVA = "0x2B2B1BC", Offset = "0x2B2B1BC", VA = "0x2B2B1BC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60008F1")]
			[Address(RVA = "0x2B2B1C4", Offset = "0x2B2B1C4", VA = "0x2B2B1C4")]
			set
			{
			}
		}

		[Token(Token = "0x1700011F")]
		public int StartSample
		{
			[Token(Token = "0x60008F2")]
			[Address(RVA = "0x2B2B1CC", Offset = "0x2B2B1CC", VA = "0x2B2B1CC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60008F3")]
			[Address(RVA = "0x2B2B1D4", Offset = "0x2B2B1D4", VA = "0x2B2B1D4")]
			set
			{
			}
		}

		[Token(Token = "0x17000120")]
		public double SamplesPerBeat
		{
			[Token(Token = "0x60008F4")]
			[Address(RVA = "0x2B2B1E0", Offset = "0x2B2B1E0", VA = "0x2B2B1E0")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60008F5")]
			[Address(RVA = "0x2B2B1E8", Offset = "0x2B2B1E8", VA = "0x2B2B1E8")]
			set
			{
			}
		}

		[Token(Token = "0x17000121")]
		public int BeatsPerMeasure
		{
			[Token(Token = "0x60008F6")]
			[Address(RVA = "0x2B2B1FC", Offset = "0x2B2B1FC", VA = "0x2B2B1FC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60008F7")]
			[Address(RVA = "0x2B2B204", Offset = "0x2B2B204", VA = "0x2B2B204")]
			set
			{
			}
		}

		[Token(Token = "0x17000122")]
		public double SamplesPerMeasure
		{
			[Token(Token = "0x60008F8")]
			[Address(RVA = "0x2B2B214", Offset = "0x2B2B214", VA = "0x2B2B214")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000123")]
		public bool DoesStartNewMeasure
		{
			[Token(Token = "0x60008F9")]
			[Address(RVA = "0x2B2B228", Offset = "0x2B2B228", VA = "0x2B2B228")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60008FA")]
			[Address(RVA = "0x2B2B230", Offset = "0x2B2B230", VA = "0x2B2B230")]
			set
			{
			}
		}

		[Token(Token = "0x60008FB")]
		[Address(RVA = "0x2B2B23C", Offset = "0x2B2B23C", VA = "0x2B2B23C")]
		public static int CompareByStartSample(TempoSectionDef first, TempoSectionDef second)
		{
			return default(int);
		}

		[Token(Token = "0x60008FC")]
		[Address(RVA = "0x2B2B278", Offset = "0x2B2B278", VA = "0x2B2B278")]
		public double GetSamplesPerBeatSection(int subdivisions = 1)
		{
			return default(double);
		}

		[Token(Token = "0x60008FD")]
		[Address(RVA = "0x2B2B288", Offset = "0x2B2B288", VA = "0x2B2B288")]
		public double GetBeatTimeFromSampleTime(int sampleTime, int subdivisions = 1)
		{
			return default(double);
		}

		[Token(Token = "0x60008FE")]
		[Address(RVA = "0x2B2B2B4", Offset = "0x2B2B2B4", VA = "0x2B2B2B4")]
		public double GetMeasureTimeFromSampleTime(int sampleTime)
		{
			return default(double);
		}

		[Token(Token = "0x60008FF")]
		[Address(RVA = "0x2B2B2E4", Offset = "0x2B2B2E4", VA = "0x2B2B2E4")]
		public double GetBPM(int sampleRate)
		{
			return default(double);
		}

		[Token(Token = "0x6000900")]
		[Address(RVA = "0x2B2B300", Offset = "0x2B2B300", VA = "0x2B2B300")]
		public TempoSectionDef()
		{
		}
	}
	[Token(Token = "0x200012C")]
	public interface IPayload
	{
		[Token(Token = "0x6000901")]
		IPayload GetCopy();

		[Token(Token = "0x6000902")]
		IPayload CopyDifferences(IPayload reference, IPayload delta);
	}
	[Serializable]
	[Token(Token = "0x200012D")]
	public class KoreographyEvent
	{
		[Token(Token = "0x4000837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DB6FC", Offset = "0x15DB6FC")]
		private int mStartSample;

		[Token(Token = "0x4000838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DB748", Offset = "0x15DB748")]
		private int mEndSample;

		[Token(Token = "0x4000839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IPayload mPayload;

		[Token(Token = "0x17000124")]
		public int StartSample
		{
			[Token(Token = "0x6000903")]
			[Address(RVA = "0x2FE032C", Offset = "0x2FE032C", VA = "0x2FE032C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000904")]
			[Address(RVA = "0x2FE0334", Offset = "0x2FE0334", VA = "0x2FE0334")]
			set
			{
			}
		}

		[Token(Token = "0x17000125")]
		public int EndSample
		{
			[Token(Token = "0x6000905")]
			[Address(RVA = "0x2FE03C4", Offset = "0x2FE03C4", VA = "0x2FE03C4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000906")]
			[Address(RVA = "0x2FE03CC", Offset = "0x2FE03CC", VA = "0x2FE03CC")]
			set
			{
			}
		}

		[Token(Token = "0x17000126")]
		public IPayload Payload
		{
			[Token(Token = "0x6000907")]
			[Address(RVA = "0x2FE045C", Offset = "0x2FE045C", VA = "0x2FE045C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000908")]
			[Address(RVA = "0x2FE0464", Offset = "0x2FE0464", VA = "0x2FE0464")]
			set
			{
			}
		}

		[Token(Token = "0x6000909")]
		[Address(RVA = "0x2FE046C", Offset = "0x2FE046C", VA = "0x2FE046C")]
		public static int CompareByStartSample(KoreographyEvent first, KoreographyEvent second)
		{
			return default(int);
		}

		[Token(Token = "0x600090A")]
		[Address(RVA = "0x2FE04A8", Offset = "0x2FE04A8", VA = "0x2FE04A8")]
		public static int CompareByStartSample_Stable(KoreographyEvent first, KoreographyEvent second)
		{
			return default(int);
		}

		[Token(Token = "0x600090B")]
		[Address(RVA = "0x2FD8460", Offset = "0x2FD8460", VA = "0x2FD8460")]
		public static object CopyDifferences(object reference, object delta, object target)
		{
			return null;
		}

		[Token(Token = "0x600090C")]
		[Address(RVA = "0x2FE0520", Offset = "0x2FE0520", VA = "0x2FE0520")]
		public bool IsOneOff()
		{
			return default(bool);
		}

		[Token(Token = "0x600090D")]
		[Address(RVA = "0x2FD8FC0", Offset = "0x2FD8FC0", VA = "0x2FD8FC0")]
		public float GetEventDeltaAtSampleTime(int sampleTime)
		{
			return default(float);
		}

		[Token(Token = "0x600090E")]
		[Address(RVA = "0x2FE0530", Offset = "0x2FE0530", VA = "0x2FE0530")]
		public KoreographyEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200012E")]
	public class KoreographyTrack : KoreographyTrackBase
	{
		[Token(Token = "0x400083A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		[SerializeField]
		protected List<AssetPayload> _AssetPayloads;

		[Token(Token = "0x400083B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		[SerializeField]
		protected List<int> _AssetPayloadIdxs;

		[Token(Token = "0x400083C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		[SerializeField]
		protected List<ColorPayload> _ColorPayloads;

		[Token(Token = "0x400083D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		[SerializeField]
		protected List<int> _ColorPayloadIdxs;

		[Token(Token = "0x400083E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HideInInspector]
		[SerializeField]
		protected List<CurvePayload> _CurvePayloads;

		[Token(Token = "0x400083F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		[SerializeField]
		protected List<int> _CurvePayloadIdxs;

		[Token(Token = "0x4000840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HideInInspector]
		[SerializeField]
		protected List<FloatPayload> _FloatPayloads;

		[Token(Token = "0x4000841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[HideInInspector]
		[SerializeField]
		protected List<int> _FloatPayloadIdxs;

		[Token(Token = "0x4000842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[HideInInspector]
		[SerializeField]
		protected List<GradientPayload> _GradientPayloads;

		[Token(Token = "0x4000843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HideInInspector]
		[SerializeField]
		protected List<int> _GradientPayloadIdxs;

		[Token(Token = "0x4000844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[HideInInspector]
		[SerializeField]
		protected List<IntPayload> _IntPayloads;

		[Token(Token = "0x4000845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		[SerializeField]
		protected List<int> _IntPayloadIdxs;

		[Token(Token = "0x4000846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		[SerializeField]
		protected List<SpectrumPayload> _SpectrumPayloads;

		[Token(Token = "0x4000847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		[SerializeField]
		protected List<int> _SpectrumPayloadIdxs;

		[Token(Token = "0x4000848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[HideInInspector]
		[SerializeField]
		protected List<TextPayload> _TextPayloads;

		[Token(Token = "0x4000849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[HideInInspector]
		[SerializeField]
		protected List<int> _TextPayloadIdxs;

		[Token(Token = "0x400084A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[HideInInspector]
		[SerializeField]
		protected List<ATColorPayload> _ATColorPayloads;

		[Token(Token = "0x400084B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[HideInInspector]
		[SerializeField]
		protected List<int> _ATColorPayloadIdxs;

		[Token(Token = "0x400084C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[HideInInspector]
		[SerializeField]
		protected List<ATVectorPayload> _ATVectorPayloads;

		[Token(Token = "0x400084D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[HideInInspector]
		[SerializeField]
		protected List<int> _ATVectorPayloadIdxs;

		[Token(Token = "0x400084E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[HideInInspector]
		[SerializeField]
		protected List<ATIDPayload> _ATIDPayloads;

		[Token(Token = "0x400084F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[HideInInspector]
		[SerializeField]
		protected List<int> _ATIDPayloadIdxs;

		[Token(Token = "0x4000850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[HideInInspector]
		[SerializeField]
		protected List<ATSpawnPayload> _ATSpawnPayloads;

		[Token(Token = "0x4000851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[HideInInspector]
		[SerializeField]
		protected List<int> _ATSpawnPayloadIdxs;

		[Token(Token = "0x4000852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[HideInInspector]
		[SerializeField]
		protected List<ATLightingPayload> _ATLightingPayloads;

		[Token(Token = "0x4000853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[HideInInspector]
		[SerializeField]
		protected List<int> _ATLightingPayloadIdxs;

		[Token(Token = "0x4000854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[HideInInspector]
		[SerializeField]
		protected List<ATStrNumPayload> _ATStrNumPayloads;

		[Token(Token = "0x4000855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[HideInInspector]
		[SerializeField]
		protected List<int> _ATStrNumPayloadIdxs;

		[Token(Token = "0x4000856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[HideInInspector]
		[SerializeField]
		protected List<ATAnimClipPayload> _ATAnimClipPayloads;

		[Token(Token = "0x4000857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[HideInInspector]
		[SerializeField]
		protected List<int> _ATAnimClipPayloadIdxs;

		[Token(Token = "0x4000858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[HideInInspector]
		[SerializeField]
		protected List<ATColorDeltaPayload> _ATColorDeltaPayloads;

		[Token(Token = "0x4000859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[HideInInspector]
		[SerializeField]
		protected List<int> _ATColorDeltaPayloadIdxs;

		[Token(Token = "0x400085A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[HideInInspector]
		[SerializeField]
		protected List<ATVibePayload> _ATVibePayloads;

		[Token(Token = "0x400085B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[HideInInspector]
		[SerializeField]
		protected List<int> _ATVibePayloadIdxs;

		[Token(Token = "0x600090F")]
		[Address(RVA = "0x2FE0658", Offset = "0x2FE0658", VA = "0x2FE0658")]
		public KoreographyTrack()
		{
		}
	}
	[Token(Token = "0x200012F")]
	public delegate void KoreographyEventCallback(KoreographyEvent koreoEvent);
	[Token(Token = "0x2000130")]
	public delegate void KoreographyEventCallbackWithTime(KoreographyEvent koreoEvent, int sampleTime, int sampleDelta, DeltaSlice deltaSlice);
	[Serializable]
	[Token(Token = "0x2000131")]
	public abstract class KoreographyTrackBase : ScriptableObject, ISerializationCallbackReceiver
	{
		[Token(Token = "0x2000267")]
		public struct TrackingCrumbs
		{
			[Token(Token = "0x4000FE3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal int lastCheckedEndSample;

			[Token(Token = "0x4000FE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal int checkHeadIndex;

			[Token(Token = "0x170001D3")]
			public int LastCheckedEndSample
			{
				[Token(Token = "0x6000EB9")]
				[Address(RVA = "0x2FE2A70", Offset = "0x2FE2A70", VA = "0x2FE2A70")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x170001D4")]
			public int CheckHeadIndex
			{
				[Token(Token = "0x6000EBA")]
				[Address(RVA = "0x2FE2A78", Offset = "0x2FE2A78", VA = "0x2FE2A78")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x6000EBB")]
			[Address(RVA = "0x2FE09D0", Offset = "0x2FE09D0", VA = "0x2FE09D0")]
			public void Reset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000268")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D57A4", Offset = "0x15D57A4")]
		private sealed class <>c
		{
			[Token(Token = "0x4000FE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000FE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Predicate<KoreographyEvent> <>9__14_0;

			[Token(Token = "0x6000EBD")]
			[Address(RVA = "0x2FE2A5C", Offset = "0x2FE2A5C", VA = "0x2FE2A5C")]
			public <>c()
			{
			}

			[Token(Token = "0x6000EBE")]
			[Address(RVA = "0x2FE2A64", Offset = "0x2FE2A64", VA = "0x2FE2A64")]
			internal bool <CheckEventListIntegrity>b__14_0(KoreographyEvent e)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x400085C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DBF04", Offset = "0x15DBF04")]
		private string mEventID;

		[Token(Token = "0x400085D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DBF50", Offset = "0x15DBF50")]
		private List<KoreographyEvent> mEventList;

		[Token(Token = "0x4000860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<KoreographyEvent> eventsInRange;

		[Token(Token = "0x4000861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private TrackingCrumbs internalTrackingCrumbs;

		[Token(Token = "0x4000862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		[SerializeField]
		private List<string> _SerializedPayloadTypes;

		[Token(Token = "0x17000127")]
		public string EventID
		{
			[Token(Token = "0x600091C")]
			[Address(RVA = "0x2FE09B4", Offset = "0x2FE09B4", VA = "0x2FE09B4")]
			get
			{
				return null;
			}
			[Token(Token = "0x600091D")]
			[Address(RVA = "0x2FE09BC", Offset = "0x2FE09BC", VA = "0x2FE09BC")]
			set
			{
			}
		}

		[Token(Token = "0x14000003")]
		private event KoreographyEventCallback koreographyEventCallbacks
		{
			[Token(Token = "0x6000918")]
			[Address(RVA = "0x2FE0724", Offset = "0x2FE0724", VA = "0x2FE0724")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5200", Offset = "0x15E5200")]
			add
			{
			}
			[Token(Token = "0x6000919")]
			[Address(RVA = "0x2FE07C8", Offset = "0x2FE07C8", VA = "0x2FE07C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5210", Offset = "0x15E5210")]
			remove
			{
			}
		}

		[Token(Token = "0x14000004")]
		private event KoreographyEventCallbackWithTime koreographyEventCallbacksWithTime
		{
			[Token(Token = "0x600091A")]
			[Address(RVA = "0x2FE086C", Offset = "0x2FE086C", VA = "0x2FE086C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5220", Offset = "0x15E5220")]
			add
			{
			}
			[Token(Token = "0x600091B")]
			[Address(RVA = "0x2FE0910", Offset = "0x2FE0910", VA = "0x2FE0910")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5230", Offset = "0x15E5230")]
			remove
			{
			}
		}

		[Token(Token = "0x600091E")]
		[Address(RVA = "0x2FE09C4", Offset = "0x2FE09C4", VA = "0x2FE09C4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600091F")]
		[Address(RVA = "0x2FE09DC", Offset = "0x2FE09DC", VA = "0x2FE09DC")]
		public bool CheckEventListIntegrity()
		{
			return default(bool);
		}

		[Token(Token = "0x6000920")]
		[Address(RVA = "0x2FE0B00", Offset = "0x2FE0B00", VA = "0x2FE0B00")]
		public int GetIDForEvent(KoreographyEvent e)
		{
			return default(int);
		}

		[Token(Token = "0x6000921")]
		[Address(RVA = "0x2FE0B68", Offset = "0x2FE0B68", VA = "0x2FE0B68")]
		public void EnsureEventOrder()
		{
		}

		[Token(Token = "0x6000922")]
		[Address(RVA = "0x2FE0BFC", Offset = "0x2FE0BFC", VA = "0x2FE0BFC")]
		public KoreographyEvent GetEventAtStartSample(int sample)
		{
			return null;
		}

		[Token(Token = "0x6000923")]
		[Address(RVA = "0x2FE0CD4", Offset = "0x2FE0CD4", VA = "0x2FE0CD4")]
		public bool AddEvent(KoreographyEvent addEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x6000924")]
		[Address(RVA = "0x2FE0D64", Offset = "0x2FE0D64", VA = "0x2FE0D64")]
		public bool RemoveEvent(KoreographyEvent removeEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x6000925")]
		[Address(RVA = "0x2FE0DCC", Offset = "0x2FE0DCC", VA = "0x2FE0DCC")]
		public void RemoveAllEvents()
		{
		}

		[Token(Token = "0x6000926")]
		[Address(RVA = "0x2FE0E24", Offset = "0x2FE0E24", VA = "0x2FE0E24")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x15E5240", Offset = "0x15E5240")]
		public List<KoreographyEvent> GetEventsInRange(int startSample, int endSample)
		{
			return null;
		}

		[Token(Token = "0x6000927")]
		[Address(RVA = "0x2FDC93C", Offset = "0x2FDC93C", VA = "0x2FDC93C")]
		public void GetEventsInRange(int startSample, int endSample, List<KoreographyEvent> listToFill)
		{
		}

		[Token(Token = "0x6000928")]
		[Address(RVA = "0x2FE0EA8", Offset = "0x2FE0EA8", VA = "0x2FE0EA8")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x15E5278", Offset = "0x15E5278")]
		public List<KoreographyEvent> GetEventsInRangeTracked(int startSample, int endSample)
		{
			return null;
		}

		[Token(Token = "0x6000929")]
		[Address(RVA = "0x2FE0F30", Offset = "0x2FE0F30", VA = "0x2FE0F30")]
		public void GetEventsInRangeTracked(int startSample, int endSample, ref TrackingCrumbs crumbs, List<KoreographyEvent> listToFill)
		{
		}

		[Token(Token = "0x600092A")]
		[Address(RVA = "0x2FE1134", Offset = "0x2FE1134", VA = "0x2FE1134")]
		public List<KoreographyEvent> GetAllEvents()
		{
			return null;
		}

		[Token(Token = "0x600092B")]
		[Address(RVA = "0x2FDFC7C", Offset = "0x2FDFC7C", VA = "0x2FDFC7C")]
		public void CheckForEvents(int startTime, int endTime, DeltaSlice deltaSlice)
		{
		}

		[Token(Token = "0x600092C")]
		[Address(RVA = "0x2FDFEA4", Offset = "0x2FDFEA4", VA = "0x2FDFEA4")]
		internal void RegisterForEvents(KoreographyEventCallback callback)
		{
		}

		[Token(Token = "0x600092D")]
		[Address(RVA = "0x2FDFEA8", Offset = "0x2FDFEA8", VA = "0x2FDFEA8")]
		internal void RegisterForEventsWithTime(KoreographyEventCallbackWithTime callback)
		{
		}

		[Token(Token = "0x600092E")]
		[Address(RVA = "0x2FDFFB8", Offset = "0x2FDFFB8", VA = "0x2FDFFB8")]
		internal void UnregisterForEvents(KoreographyEventCallback callback)
		{
		}

		[Token(Token = "0x600092F")]
		[Address(RVA = "0x2FDFFBC", Offset = "0x2FDFFBC", VA = "0x2FDFFBC")]
		internal void UnregisterForEventsWithTime(KoreographyEventCallbackWithTime callback)
		{
		}

		[Token(Token = "0x6000930")]
		[Address(RVA = "0x2FE0070", Offset = "0x2FE0070", VA = "0x2FE0070")]
		internal void ClearEventRegister()
		{
		}

		[Token(Token = "0x6000931")]
		[Address(RVA = "0x2FE11A4", Offset = "0x2FE11A4", VA = "0x2FE11A4", Slot = "4")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x6000932")]
		[Address(RVA = "0x2FE21E0", Offset = "0x2FE21E0", VA = "0x2FE21E0", Slot = "5")]
		public void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x6000933")]
		[Address(RVA = "0x2FE1C0C", Offset = "0x2FE1C0C", VA = "0x2FE1C0C")]
		private static FieldInfo GetFieldInfoOfListWithType(Type sourceType, Type lookupType, string fieldName)
		{
			return null;
		}

		[Token(Token = "0x6000934")]
		[Address(RVA = "0x2FE1820", Offset = "0x2FE1820", VA = "0x2FE1820")]
		private static FieldInfo GetFieldInfoOfListWithTypeString(Type sourceType, string typeStr, string fieldName)
		{
			return null;
		}

		[Token(Token = "0x6000935")]
		[Address(RVA = "0x2FE294C", Offset = "0x2FE294C", VA = "0x2FE294C")]
		private static bool IsGenericList(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000936")]
		[Address(RVA = "0x2FE2928", Offset = "0x2FE2928", VA = "0x2FE2928")]
		private static FieldInfo GetFieldInfoFromName(Type sourceType, string name)
		{
			return null;
		}

		[Token(Token = "0x6000937")]
		[Address(RVA = "0x2FE065C", Offset = "0x2FE065C", VA = "0x2FE065C")]
		protected KoreographyTrackBase()
		{
		}
	}
	[Token(Token = "0x2000132")]
	public static class AssetPayloadEventExtensions
	{
		[Token(Token = "0x6000938")]
		[Address(RVA = "0x2FD8638", Offset = "0x2FD8638", VA = "0x2FD8638")]
		public static bool HasAssetPayload(this KoreographyEvent koreoEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x6000939")]
		[Address(RVA = "0x2FD86C4", Offset = "0x2FD86C4", VA = "0x2FD86C4")]
		public static UnityEngine.Object GetAssetValue(this KoreographyEvent koreoEvent)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000133")]
	public class AssetPayload : IPayload
	{
		[Token(Token = "0x4000863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DBFF4", Offset = "0x15DBFF4")]
		private UnityEngine.Object mAssetVal;

		[Token(Token = "0x17000128")]
		public UnityEngine.Object AssetVal
		{
			[Token(Token = "0x600093A")]
			[Address(RVA = "0x2FD82F4", Offset = "0x2FD82F4", VA = "0x2FD82F4")]
			get
			{
				return null;
			}
			[Token(Token = "0x600093B")]
			[Address(RVA = "0x2FD82FC", Offset = "0x2FD82FC", VA = "0x2FD82FC")]
			set
			{
			}
		}

		[Token(Token = "0x600093C")]
		[Address(RVA = "0x2FD8304", Offset = "0x2FD8304", VA = "0x2FD8304")]
		public static string GetFriendlyName()
		{
			return null;
		}

		[Token(Token = "0x600093D")]
		[Address(RVA = "0x2FD834C", Offset = "0x2FD834C", VA = "0x2FD834C", Slot = "4")]
		public IPayload GetCopy()
		{
			return null;
		}

		[Token(Token = "0x600093E")]
		[Address(RVA = "0x2FD83CC", Offset = "0x2FD83CC", VA = "0x2FD83CC", Slot = "5")]
		public IPayload CopyDifferences(IPayload reference, IPayload delta)
		{
			return null;
		}

		[Token(Token = "0x600093F")]
		[Address(RVA = "0x2FD83C4", Offset = "0x2FD83C4", VA = "0x2FD83C4")]
		public AssetPayload()
		{
		}
	}
	[Token(Token = "0x2000134")]
	public static class ColorPayloadEventExtensions
	{
		[Token(Token = "0x6000940")]
		[Address(RVA = "0x2FD88F4", Offset = "0x2FD88F4", VA = "0x2FD88F4")]
		public static bool HasColorPayload(this KoreographyEvent koreoEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x6000941")]
		[Address(RVA = "0x2FD8980", Offset = "0x2FD8980", VA = "0x2FD8980")]
		public static Color GetColorValue(this KoreographyEvent koreoEvent)
		{
			return default(Color);
		}
	}
	[Serializable]
	[Token(Token = "0x2000135")]
	public class ColorPayload : IPayload
	{
		[Token(Token = "0x4000864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DC040", Offset = "0x15DC040")]
		private Color mColorVal;

		[Token(Token = "0x17000129")]
		public Color ColorVal
		{
			[Token(Token = "0x6000942")]
			[Address(RVA = "0x2FD8760", Offset = "0x2FD8760", VA = "0x2FD8760")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000943")]
			[Address(RVA = "0x2FD876C", Offset = "0x2FD876C", VA = "0x2FD876C")]
			set
			{
			}
		}

		[Token(Token = "0x6000944")]
		[Address(RVA = "0x2FD8778", Offset = "0x2FD8778", VA = "0x2FD8778")]
		public static string GetFriendlyName()
		{
			return null;
		}

		[Token(Token = "0x6000945")]
		[Address(RVA = "0x2FD87C0", Offset = "0x2FD87C0", VA = "0x2FD87C0", Slot = "4")]
		public IPayload GetCopy()
		{
			return null;
		}

		[Token(Token = "0x6000946")]
		[Address(RVA = "0x2FD8860", Offset = "0x2FD8860", VA = "0x2FD8860", Slot = "5")]
		public IPayload CopyDifferences(IPayload reference, IPayload delta)
		{
			return null;
		}

		[Token(Token = "0x6000947")]
		[Address(RVA = "0x2FD882C", Offset = "0x2FD882C", VA = "0x2FD882C")]
		public ColorPayload()
		{
		}
	}
	[Token(Token = "0x2000136")]
	public static class CurvePayloadEventExtensions
	{
		[Token(Token = "0x6000948")]
		[Address(RVA = "0x2FD8DB0", Offset = "0x2FD8DB0", VA = "0x2FD8DB0")]
		public static bool HasCurvePayload(this KoreographyEvent koreoEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x6000949")]
		[Address(RVA = "0x2FD8E3C", Offset = "0x2FD8E3C", VA = "0x2FD8E3C")]
		public static AnimationCurve GetCurveValue(this KoreographyEvent koreoEvent)
		{
			return null;
		}

		[Token(Token = "0x600094A")]
		[Address(RVA = "0x2FD8ED8", Offset = "0x2FD8ED8", VA = "0x2FD8ED8")]
		public static float GetValueOfCurveAtTime(this KoreographyEvent koreoEvent, int sampleTime)
		{
			return default(float);
		}
	}
	[Serializable]
	[Token(Token = "0x2000137")]
	public class CurvePayload : IPayload
	{
		[Token(Token = "0x4000865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DC08C", Offset = "0x15DC08C")]
		private AnimationCurve mCurveData;

		[Token(Token = "0x1700012A")]
		public AnimationCurve CurveData
		{
			[Token(Token = "0x600094B")]
			[Address(RVA = "0x2FD8A1C", Offset = "0x2FD8A1C", VA = "0x2FD8A1C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600094C")]
			[Address(RVA = "0x2FD8A24", Offset = "0x2FD8A24", VA = "0x2FD8A24")]
			set
			{
			}
		}

		[Token(Token = "0x600094D")]
		[Address(RVA = "0x2FD8A2C", Offset = "0x2FD8A2C", VA = "0x2FD8A2C")]
		public CurvePayload()
		{
		}

		[Token(Token = "0x600094E")]
		[Address(RVA = "0x2FD8AEC", Offset = "0x2FD8AEC", VA = "0x2FD8AEC")]
		public static string GetFriendlyName()
		{
			return null;
		}

		[Token(Token = "0x600094F")]
		[Address(RVA = "0x2FD8A60", Offset = "0x2FD8A60", VA = "0x2FD8A60")]
		private AnimationCurve GetNewCurve()
		{
			return null;
		}

		[Token(Token = "0x6000950")]
		[Address(RVA = "0x2FD8B34", Offset = "0x2FD8B34", VA = "0x2FD8B34")]
		public float GetValueAtDelta(float delta)
		{
			return default(float);
		}

		[Token(Token = "0x6000951")]
		[Address(RVA = "0x2FD8C68", Offset = "0x2FD8C68", VA = "0x2FD8C68", Slot = "4")]
		public IPayload GetCopy()
		{
			return null;
		}

		[Token(Token = "0x6000952")]
		[Address(RVA = "0x2FD8D1C", Offset = "0x2FD8D1C", VA = "0x2FD8D1C", Slot = "5")]
		public IPayload CopyDifferences(IPayload reference, IPayload delta)
		{
			return null;
		}
	}
	[Token(Token = "0x2000138")]
	public static class FloatPayloadEventExtensions
	{
		[Token(Token = "0x6000953")]
		[Address(RVA = "0x2FD9E60", Offset = "0x2FD9E60", VA = "0x2FD9E60")]
		public static bool HasFloatPayload(this KoreographyEvent koreoEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x6000954")]
		[Address(RVA = "0x2FD9EEC", Offset = "0x2FD9EEC", VA = "0x2FD9EEC")]
		public static float GetFloatValue(this KoreographyEvent koreoEvent)
		{
			return default(float);
		}
	}
	[Serializable]
	[Token(Token = "0x2000139")]
	public class FloatPayload : IPayload
	{
		[Token(Token = "0x4000866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DC0D8", Offset = "0x15DC0D8")]
		private float mFloatVal;

		[Token(Token = "0x1700012B")]
		public float FloatVal
		{
			[Token(Token = "0x6000955")]
			[Address(RVA = "0x2FD9CFC", Offset = "0x2FD9CFC", VA = "0x2FD9CFC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000956")]
			[Address(RVA = "0x2FD9D04", Offset = "0x2FD9D04", VA = "0x2FD9D04")]
			set
			{
			}
		}

		[Token(Token = "0x6000957")]
		[Address(RVA = "0x2FD9D0C", Offset = "0x2FD9D0C", VA = "0x2FD9D0C")]
		public static string GetFriendlyName()
		{
			return null;
		}

		[Token(Token = "0x6000958")]
		[Address(RVA = "0x2FD9D54", Offset = "0x2FD9D54", VA = "0x2FD9D54", Slot = "4")]
		public IPayload GetCopy()
		{
			return null;
		}

		[Token(Token = "0x6000959")]
		[Address(RVA = "0x2FD9DCC", Offset = "0x2FD9DCC", VA = "0x2FD9DCC", Slot = "5")]
		public IPayload CopyDifferences(IPayload reference, IPayload delta)
		{
			return null;
		}

		[Token(Token = "0x600095A")]
		[Address(RVA = "0x2FD9DC4", Offset = "0x2FD9DC4", VA = "0x2FD9DC4")]
		public FloatPayload()
		{
		}
	}
	[Token(Token = "0x200013A")]
	public static class GradientPayloadEventExtensions
	{
		[Token(Token = "0x600095B")]
		[Address(RVA = "0x2FDA154", Offset = "0x2FDA154", VA = "0x2FDA154")]
		public static bool HasGradientPayload(this KoreographyEvent koreoEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x600095C")]
		[Address(RVA = "0x2FDA1E0", Offset = "0x2FDA1E0", VA = "0x2FDA1E0")]
		public static Gradient GetGradientData(this KoreographyEvent koreoEvent)
		{
			return null;
		}

		[Token(Token = "0x600095D")]
		[Address(RVA = "0x2FDA27C", Offset = "0x2FDA27C", VA = "0x2FDA27C")]
		public static Color GetColorOfGradientAtTime(this KoreographyEvent koreoEvent, int sampleTime)
		{
			return default(Color);
		}
	}
	[Serializable]
	[Token(Token = "0x200013B")]
	public class GradientPayload : IPayload
	{
		[Token(Token = "0x4000867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DC124", Offset = "0x15DC124")]
		private Gradient mGradientData;

		[Token(Token = "0x1700012C")]
		public Gradient GradientData
		{
			[Token(Token = "0x600095E")]
			[Address(RVA = "0x2FD9F80", Offset = "0x2FD9F80", VA = "0x2FD9F80")]
			get
			{
				return null;
			}
			[Token(Token = "0x600095F")]
			[Address(RVA = "0x2FD9F88", Offset = "0x2FD9F88", VA = "0x2FD9F88")]
			set
			{
			}
		}

		[Token(Token = "0x6000960")]
		[Address(RVA = "0x2FD9F90", Offset = "0x2FD9F90", VA = "0x2FD9F90")]
		public static string GetFriendlyName()
		{
			return null;
		}

		[Token(Token = "0x6000961")]
		[Address(RVA = "0x2FD9FD8", Offset = "0x2FD9FD8", VA = "0x2FD9FD8", Slot = "4")]
		public IPayload GetCopy()
		{
			return null;
		}

		[Token(Token = "0x6000962")]
		[Address(RVA = "0x2FDA0C0", Offset = "0x2FDA0C0", VA = "0x2FDA0C0", Slot = "5")]
		public IPayload CopyDifferences(IPayload reference, IPayload delta)
		{
			return null;
		}

		[Token(Token = "0x6000963")]
		[Address(RVA = "0x2FDA04C", Offset = "0x2FDA04C", VA = "0x2FDA04C")]
		public GradientPayload()
		{
		}
	}
	[Token(Token = "0x200013C")]
	public static class IntPayloadEventExtensions
	{
		[Token(Token = "0x6000964")]
		[Address(RVA = "0x2FDA4CC", Offset = "0x2FDA4CC", VA = "0x2FDA4CC")]
		public static bool HasIntPayload(this KoreographyEvent koreoEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x6000965")]
		[Address(RVA = "0x2FDA558", Offset = "0x2FDA558", VA = "0x2FDA558")]
		public static int GetIntValue(this KoreographyEvent koreoEvent)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200013D")]
	public class IntPayload : IPayload
	{
		[Token(Token = "0x4000868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DC170", Offset = "0x15DC170")]
		private int mIntVal;

		[Token(Token = "0x1700012D")]
		public int IntVal
		{
			[Token(Token = "0x6000966")]
			[Address(RVA = "0x2FDA368", Offset = "0x2FDA368", VA = "0x2FDA368")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000967")]
			[Address(RVA = "0x2FDA370", Offset = "0x2FDA370", VA = "0x2FDA370")]
			set
			{
			}
		}

		[Token(Token = "0x6000968")]
		[Address(RVA = "0x2FDA378", Offset = "0x2FDA378", VA = "0x2FDA378")]
		public static string GetFriendlyName()
		{
			return null;
		}

		[Token(Token = "0x6000969")]
		[Address(RVA = "0x2FDA3C0", Offset = "0x2FDA3C0", VA = "0x2FDA3C0", Slot = "4")]
		public IPayload GetCopy()
		{
			return null;
		}

		[Token(Token = "0x600096A")]
		[Address(RVA = "0x2FDA438", Offset = "0x2FDA438", VA = "0x2FDA438", Slot = "5")]
		public IPayload CopyDifferences(IPayload reference, IPayload delta)
		{
			return null;
		}

		[Token(Token = "0x600096B")]
		[Address(RVA = "0x2FDA430", Offset = "0x2FDA430", VA = "0x2FDA430")]
		public IntPayload()
		{
		}
	}
	[Token(Token = "0x200013E")]
	public static class SpectrumPayloadEventExtensions
	{
		[Token(Token = "0x600096C")]
		[Address(RVA = "0x2B2B054", Offset = "0x2B2B054", VA = "0x2B2B054")]
		public static bool HasSpectrumPayload(this KoreographyEvent koreoEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x600096D")]
		[Address(RVA = "0x2B2B0E0", Offset = "0x2B2B0E0", VA = "0x2B2B0E0")]
		public static void GetSpectrumAtTime(this KoreographyEvent koreoEvent, int sampleTime, ref float[] spectrum, int maxBinCount = 0)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200013F")]
	[NoEditorCreate]
	public class SpectrumPayload : IPayload
	{
		[Serializable]
		[Token(Token = "0x2000269")]
		public struct SpectrumInfo
		{
			[Token(Token = "0x4000FE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E21C8", Offset = "0x15E21C8")]
			public float binFrequencyWidth;

			[Token(Token = "0x4000FE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E2200", Offset = "0x15E2200")]
			public float minBinFrequency;

			[Token(Token = "0x4000FE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E2238", Offset = "0x15E2238")]
			public int startSample;

			[Token(Token = "0x4000FEA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15E2270", Offset = "0x15E2270")]
			public int endSample;

			[Token(Token = "0x6000EBF")]
			[Address(RVA = "0x2B2B030", Offset = "0x2B2B030", VA = "0x2B2B030")]
			public float GetFrequencyForBin(int binIndex)
			{
				return default(float);
			}
		}

		[Serializable]
		[Token(Token = "0x200026A")]
		public class Spectrum
		{
			[Token(Token = "0x4000FEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public List<float> data;

			[Token(Token = "0x6000EC0")]
			[Address(RVA = "0x2B2AFB4", Offset = "0x2B2AFB4", VA = "0x2B2AFB4")]
			public Spectrum()
			{
			}
		}

		[Token(Token = "0x4000869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DC1BC", Offset = "0x15DC1BC")]
		private SpectrumInfo mSpectrumInfo;

		[Token(Token = "0x400086A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DC208", Offset = "0x15DC208")]
		private List<Spectrum> mSpectrumData;

		[Token(Token = "0x1700012E")]
		public List<Spectrum> SpectrumData
		{
			[Token(Token = "0x600096E")]
			[Address(RVA = "0x2FE9EA8", Offset = "0x2FE9EA8", VA = "0x2FE9EA8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600096F")]
			[Address(RVA = "0x2FE9EB0", Offset = "0x2FE9EB0", VA = "0x2FE9EB0")]
			set
			{
			}
		}

		[Token(Token = "0x1700012F")]
		public SpectrumInfo SpectrumDataInfo
		{
			[Token(Token = "0x6000970")]
			[Address(RVA = "0x2FE9EB8", Offset = "0x2FE9EB8", VA = "0x2FE9EB8")]
			get
			{
				return default(SpectrumInfo);
			}
			[Token(Token = "0x6000971")]
			[Address(RVA = "0x2FE9EC4", Offset = "0x2FE9EC4", VA = "0x2FE9EC4")]
			set
			{
			}
		}

		[Token(Token = "0x17000130")]
		public int SpectrumEntryCount
		{
			[Token(Token = "0x6000972")]
			[Address(RVA = "0x2FE9ECC", Offset = "0x2FE9ECC", VA = "0x2FE9ECC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000973")]
		[Address(RVA = "0x2FE9F6C", Offset = "0x2FE9F6C", VA = "0x2FE9F6C")]
		public static string GetFriendlyName()
		{
			return null;
		}

		[Token(Token = "0x6000974")]
		[Address(RVA = "0x2FE9FB4", Offset = "0x2FE9FB4", VA = "0x2FE9FB4")]
		public void GetSpectrumAtDelta(ref float[] spectrum, float delta, int maxBinCount = 0)
		{
		}

		[Token(Token = "0x6000975")]
		[Address(RVA = "0x2FEA494", Offset = "0x2FEA494", VA = "0x2FEA494")]
		public void GetSpectrumAtSample(ref float[] spectrum, int sample, int maxBinCount = 0)
		{
		}

		[Token(Token = "0x6000976")]
		[Address(RVA = "0x2FEA534", Offset = "0x2FEA534", VA = "0x2FEA534", Slot = "4")]
		public IPayload GetCopy()
		{
			return null;
		}

		[Token(Token = "0x6000977")]
		[Address(RVA = "0x2FEA720", Offset = "0x2FEA720", VA = "0x2FEA720", Slot = "5")]
		public IPayload CopyDifferences(IPayload reference, IPayload delta)
		{
			return null;
		}

		[Token(Token = "0x6000978")]
		[Address(RVA = "0x2FEA6A4", Offset = "0x2FEA6A4", VA = "0x2FEA6A4")]
		public SpectrumPayload()
		{
		}
	}
	[Token(Token = "0x2000140")]
	public static class TextPayloadEventExtensions
	{
		[Token(Token = "0x6000979")]
		[Address(RVA = "0x2B2B4EC", Offset = "0x2B2B4EC", VA = "0x2B2B4EC")]
		public static bool HasTextPayload(this KoreographyEvent koreoEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x600097A")]
		[Address(RVA = "0x2B2B578", Offset = "0x2B2B578", VA = "0x2B2B578")]
		public static string GetTextValue(this KoreographyEvent koreoEvent)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000141")]
	public class TextPayload : IPayload
	{
		[Token(Token = "0x400086B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DC254", Offset = "0x15DC254")]
		private string mTextVal;

		[Token(Token = "0x17000131")]
		public string TextVal
		{
			[Token(Token = "0x600097B")]
			[Address(RVA = "0x2B2B37C", Offset = "0x2B2B37C", VA = "0x2B2B37C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600097C")]
			[Address(RVA = "0x2B2B384", Offset = "0x2B2B384", VA = "0x2B2B384")]
			set
			{
			}
		}

		[Token(Token = "0x600097D")]
		[Address(RVA = "0x2B2B38C", Offset = "0x2B2B38C", VA = "0x2B2B38C")]
		public static string GetFriendlyName()
		{
			return null;
		}

		[Token(Token = "0x600097E")]
		[Address(RVA = "0x2B2B3D4", Offset = "0x2B2B3D4", VA = "0x2B2B3D4", Slot = "4")]
		public IPayload GetCopy()
		{
			return null;
		}

		[Token(Token = "0x600097F")]
		[Address(RVA = "0x2B2B454", Offset = "0x2B2B454", VA = "0x2B2B454", Slot = "5")]
		public IPayload CopyDifferences(IPayload reference, IPayload delta)
		{
			return null;
		}

		[Token(Token = "0x6000980")]
		[Address(RVA = "0x2B2B44C", Offset = "0x2B2B44C", VA = "0x2B2B44C")]
		public TextPayload()
		{
		}
	}
	[Token(Token = "0x2000142")]
	public interface IKoreographedPlayer
	{
		[Token(Token = "0x6000981")]
		int GetSampleTimeForClip(string clipName);

		[Token(Token = "0x6000982")]
		int GetTotalSampleTimeForClip(string clipName);

		[Token(Token = "0x6000983")]
		bool GetIsPlaying(string clipName);

		[Token(Token = "0x6000984")]
		float GetPitch(string clipName);

		[Token(Token = "0x6000985")]
		string GetCurrentClipName();
	}
	[Token(Token = "0x2000143")]
	public struct DeltaSlice
	{
		[Token(Token = "0x400086C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float deltaOffset;

		[Token(Token = "0x400086D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float deltaLength;
	}
	[Token(Token = "0x2000144")]
	internal struct TimingRecord
	{
		[Token(Token = "0x400086E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double timeLeft;

		[Token(Token = "0x400086F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public double playTime;

		[Token(Token = "0x4000870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int startSample;

		[Token(Token = "0x4000871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int endSample;
	}
	[Token(Token = "0x2000145")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x15D5240", Offset = "0x15D5240")]
	public class Koreographer : MonoBehaviour
	{
		[Token(Token = "0x4000872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Koreographer _instance;

		[Token(Token = "0x4000873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IKoreographedPlayer musicPlaybackController;

		[Token(Token = "0x4000874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DC2A0", Offset = "0x15DC2A0")]
		private List<Koreography> loadedKoreography;

		[Token(Token = "0x4000875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DC2EC", Offset = "0x15DC2EC")]
		private float eventDelayInSeconds;

		[Token(Token = "0x4000876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<KeyValuePair<Koreography, List<TimingRecord>>> delayQueue;

		[Token(Token = "0x4000877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<KeyValuePair<string, EventObj>> eventBoard;

		[Token(Token = "0x4000878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Koreography> koreographyToProcess;

		[Token(Token = "0x4000879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<KoreographyTrackBase> trackProcessingHelper;

		[Token(Token = "0x17000132")]
		public static Koreographer Instance
		{
			[Token(Token = "0x6000986")]
			[Address(RVA = "0x2FDA5F0", Offset = "0x2FDA5F0", VA = "0x2FDA5F0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000133")]
		public float EventDelayInSeconds
		{
			[Token(Token = "0x6000987")]
			[Address(RVA = "0x2FDA658", Offset = "0x2FDA658", VA = "0x2FDA658")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000988")]
			[Address(RVA = "0x2FDA660", Offset = "0x2FDA660", VA = "0x2FDA660")]
			set
			{
			}
		}

		[Token(Token = "0x17000134")]
		public Koreography[] LoadedKoreography
		{
			[Token(Token = "0x6000989")]
			[Address(RVA = "0x2FDA6E0", Offset = "0x2FDA6E0", VA = "0x2FDA6E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600098A")]
		[Address(RVA = "0x2FDA738", Offset = "0x2FDA738", VA = "0x2FDA738")]
		private void Awake()
		{
		}

		[Token(Token = "0x600098B")]
		[Address(RVA = "0x2FDA85C", Offset = "0x2FDA85C", VA = "0x2FDA85C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600098C")]
		[Address(RVA = "0x2FDAA2C", Offset = "0x2FDAA2C", VA = "0x2FDAA2C")]
		private void Update()
		{
		}

		[Token(Token = "0x600098D")]
		[Address(RVA = "0x2FDAD20", Offset = "0x2FDAD20", VA = "0x2FDAD20")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x15E53D0", Offset = "0x15E53D0")]
		public void ProcessChoreography(AudioClip clip, int startTime, int endTime, DeltaSlice deltaSlice)
		{
		}

		[Token(Token = "0x600098E")]
		[Address(RVA = "0x2FDAD88", Offset = "0x2FDAD88", VA = "0x2FDAD88")]
		public void ProcessKoreography(string clipName, int startTime, int endTime, DeltaSlice deltaSlice)
		{
		}

		[Token(Token = "0x600098F")]
		[Address(RVA = "0x2FDB0E0", Offset = "0x2FDB0E0", VA = "0x2FDB0E0")]
		private void AddRecordToDelayQueue(Koreography koreo, int startTime, int endTime, DeltaSlice deltaSlice)
		{
		}

		[Token(Token = "0x6000990")]
		[Address(RVA = "0x2FDAAA0", Offset = "0x2FDAAA0", VA = "0x2FDAAA0")]
		private void ProcessDelayQueue(double timeToProcess)
		{
		}

		[Token(Token = "0x6000991")]
		[Address(RVA = "0x2FDB3F4", Offset = "0x2FDB3F4", VA = "0x2FDB3F4")]
		public bool FlushDelayQueue(Koreography targetKoreography)
		{
			return default(bool);
		}

		[Token(Token = "0x6000992")]
		[Address(RVA = "0x2FDB500", Offset = "0x2FDB500", VA = "0x2FDB500")]
		public void LoadKoreography(Koreography koreo)
		{
		}

		[Token(Token = "0x6000993")]
		[Address(RVA = "0x2FDB8DC", Offset = "0x2FDB8DC", VA = "0x2FDB8DC")]
		public void UnloadKoreography(Koreography koreo)
		{
		}

		[Token(Token = "0x6000994")]
		[Address(RVA = "0x2FDB38C", Offset = "0x2FDB38C", VA = "0x2FDB38C")]
		public bool IsKoreographyLoaded(Koreography koreo)
		{
			return default(bool);
		}

		[Token(Token = "0x6000995")]
		[Address(RVA = "0x2FDBB84", Offset = "0x2FDBB84", VA = "0x2FDBB84")]
		public int GetNumLoadedKoreography()
		{
			return default(int);
		}

		[Token(Token = "0x6000996")]
		[Address(RVA = "0x2FDBBD4", Offset = "0x2FDBBD4", VA = "0x2FDBBD4")]
		public Koreography GetKoreographyAtIndex(int index)
		{
			return null;
		}

		[Token(Token = "0x6000997")]
		[Address(RVA = "0x2FDBC5C", Offset = "0x2FDBC5C", VA = "0x2FDBC5C")]
		public void GetAllLoadedKoreography(List<Koreography> listToFill)
		{
		}

		[Token(Token = "0x6000998")]
		[Address(RVA = "0x2FDBCC4", Offset = "0x2FDBCC4", VA = "0x2FDBCC4")]
		private int FindMappingWithEventID(string eventID)
		{
			return default(int);
		}

		[Token(Token = "0x6000999")]
		[Address(RVA = "0x2FDBD7C", Offset = "0x2FDBD7C", VA = "0x2FDBD7C")]
		public void RegisterForEvents(string eventID, KoreographyEventCallback callback)
		{
		}

		[Token(Token = "0x600099A")]
		[Address(RVA = "0x2FDBFE8", Offset = "0x2FDBFE8", VA = "0x2FDBFE8")]
		public void RegisterForEventsWithTime(string eventID, KoreographyEventCallbackWithTime callback)
		{
		}

		[Token(Token = "0x600099B")]
		[Address(RVA = "0x2FDC154", Offset = "0x2FDC154", VA = "0x2FDC154")]
		public void UnregisterForEvents(string eventID, KoreographyEventCallback callback)
		{
		}

		[Token(Token = "0x600099C")]
		[Address(RVA = "0x2FDC3A0", Offset = "0x2FDC3A0", VA = "0x2FDC3A0")]
		public void UnregisterForEvents(string eventID, KoreographyEventCallbackWithTime callback)
		{
		}

		[Token(Token = "0x600099D")]
		[Address(RVA = "0x2FDC4EC", Offset = "0x2FDC4EC", VA = "0x2FDC4EC")]
		public void UnregisterForAllEvents(object obj)
		{
		}

		[Token(Token = "0x600099E")]
		[Address(RVA = "0x2FDA948", Offset = "0x2FDA948", VA = "0x2FDA948")]
		public void ClearEventRegister()
		{
		}

		[Token(Token = "0x600099F")]
		[Address(RVA = "0x2FDBEE8", Offset = "0x2FDBEE8", VA = "0x2FDBEE8")]
		private void ConnectEventToLoadedKoreography(KeyValuePair<string, EventObj> mapping)
		{
		}

		[Token(Token = "0x60009A0")]
		[Address(RVA = "0x2FDC2A0", Offset = "0x2FDC2A0", VA = "0x2FDC2A0")]
		private void DisconnectEventFromLoadedKoreography(KeyValuePair<string, EventObj> mapping)
		{
		}

		[Token(Token = "0x60009A1")]
		[Address(RVA = "0x2FDC5E8", Offset = "0x2FDC5E8", VA = "0x2FDC5E8")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x15E540C", Offset = "0x15E540C")]
		public List<KoreographyEvent> GetAllEventsInRange(string clipName, string eventID, int startPos, int endPos)
		{
			return null;
		}

		[Token(Token = "0x60009A2")]
		[Address(RVA = "0x2FDC68C", Offset = "0x2FDC68C", VA = "0x2FDC68C")]
		public void GetAllEventsInRange(string clipName, string eventID, int startPos, int endPos, List<KoreographyEvent> listToFill)
		{
		}

		[Token(Token = "0x60009A3")]
		[Address(RVA = "0x2FDCA24", Offset = "0x2FDCA24", VA = "0x2FDCA24")]
		public int GetMusicSampleRate([Optional] string clipName)
		{
			return default(int);
		}

		[Token(Token = "0x60009A4")]
		[Address(RVA = "0x2FDCC88", Offset = "0x2FDCC88", VA = "0x2FDCC88")]
		public int GetMusicSampleLength([Optional] string clipName)
		{
			return default(int);
		}

		[Token(Token = "0x60009A5")]
		[Address(RVA = "0x2FDCE00", Offset = "0x2FDCE00", VA = "0x2FDCE00")]
		public int GetMusicSampleTime([Optional] string clipName)
		{
			return default(int);
		}

		[Token(Token = "0x60009A6")]
		[Address(RVA = "0x2FDCF74", Offset = "0x2FDCF74", VA = "0x2FDCF74")]
		public int GetMusicSampleTimeDelta([Optional] string clipName)
		{
			return default(int);
		}

		[Token(Token = "0x60009A7")]
		[Address(RVA = "0x2FDD034", Offset = "0x2FDD034", VA = "0x2FDD034")]
		public double GetMusicSecondsLength([Optional] string clipName)
		{
			return default(double);
		}

		[Token(Token = "0x60009A8")]
		[Address(RVA = "0x2FDD0F8", Offset = "0x2FDD0F8", VA = "0x2FDD0F8")]
		public double GetMusicSecondsTime([Optional] string clipName)
		{
			return default(double);
		}

		[Token(Token = "0x60009A9")]
		[Address(RVA = "0x2FDD2B0", Offset = "0x2FDD2B0", VA = "0x2FDD2B0")]
		public double GetMusicSecondsTimeDelta([Optional] string clipName)
		{
			return default(double);
		}

		[Token(Token = "0x60009AA")]
		[Address(RVA = "0x2FDD370", Offset = "0x2FDD370", VA = "0x2FDD370")]
		public double GetMusicBPM([Optional] string clipName)
		{
			return default(double);
		}

		[Token(Token = "0x60009AB")]
		[Address(RVA = "0x2FDD554", Offset = "0x2FDD554", VA = "0x2FDD554")]
		public double GetMusicBeatLength([Optional] string clipName, int subdivisions = 1)
		{
			return default(double);
		}

		[Token(Token = "0x60009AC")]
		[Address(RVA = "0x2FDD8D4", Offset = "0x2FDD8D4", VA = "0x2FDD8D4")]
		public double GetMusicBeatTime([Optional] string clipName, int subdivisions = 1)
		{
			return default(double);
		}

		[Token(Token = "0x60009AD")]
		[Address(RVA = "0x2FDDA90", Offset = "0x2FDDA90", VA = "0x2FDDA90")]
		public double GetMusicBeatTimeDelta([Optional] string clipName, int subdivisions = 1)
		{
			return default(double);
		}

		[Token(Token = "0x60009AE")]
		[Address(RVA = "0x2FDDCF0", Offset = "0x2FDDCF0", VA = "0x2FDDCF0")]
		public double GetMusicBeatTimeNormalized([Optional] string clipName, int subdivisions = 1)
		{
			return default(double);
		}

		[Token(Token = "0x60009AF")]
		[Address(RVA = "0x2FDCAD8", Offset = "0x2FDCAD8", VA = "0x2FDCAD8")]
		protected Koreography GetMusicKoreographyWithAudioName(string clipName)
		{
			return null;
		}

		[Token(Token = "0x60009B0")]
		[Address(RVA = "0x2FDDD08", Offset = "0x2FDDD08", VA = "0x2FDDD08")]
		protected Koreography GetLoadedKoreographyWithAudioName(string clipName)
		{
			return null;
		}

		[Token(Token = "0x60009B1")]
		[Address(RVA = "0x2FDDDBC", Offset = "0x2FDDDBC", VA = "0x2FDDDBC")]
		public static int GetSampleRate([Optional] string clipName)
		{
			return default(int);
		}

		[Token(Token = "0x60009B2")]
		[Address(RVA = "0x2FDD63C", Offset = "0x2FDD63C", VA = "0x2FDD63C")]
		public static int GetTotalSampleTime([Optional] string clipName)
		{
			return default(int);
		}

		[Token(Token = "0x60009B3")]
		[Address(RVA = "0x2FDDEC8", Offset = "0x2FDDEC8", VA = "0x2FDDEC8")]
		public static int GetSampleTime([Optional] string clipName)
		{
			return default(int);
		}

		[Token(Token = "0x60009B4")]
		[Address(RVA = "0x2FDDFD4", Offset = "0x2FDDFD4", VA = "0x2FDDFD4")]
		public static float GetBeatTime([Optional] string clipName, int subdivisions = 1)
		{
			return default(float);
		}

		[Token(Token = "0x60009B5")]
		[Address(RVA = "0x2FDE0E4", Offset = "0x2FDE0E4", VA = "0x2FDE0E4")]
		public static float GetBeatTimeDelta([Optional] string clipName, int subdivisions = 1)
		{
			return default(float);
		}

		[Token(Token = "0x60009B6")]
		[Address(RVA = "0x2FDE1F0", Offset = "0x2FDE1F0", VA = "0x2FDE1F0")]
		public static float GetBeatTimeNormalized([Optional] string clipName, int subdivisions = 1)
		{
			return default(float);
		}

		[Token(Token = "0x60009B7")]
		[Address(RVA = "0x2FDE304", Offset = "0x2FDE304", VA = "0x2FDE304")]
		public Koreographer()
		{
		}
	}
	[Token(Token = "0x2000146")]
	internal class EventObj
	{
		[Token(Token = "0x14000005")]
		private event KoreographyEventCallback basicEvent
		{
			[Token(Token = "0x60009B9")]
			[Address(RVA = "0x2FD9008", Offset = "0x2FD9008", VA = "0x2FD9008")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5444", Offset = "0x15E5444")]
			add
			{
			}
			[Token(Token = "0x60009BA")]
			[Address(RVA = "0x2FD90AC", Offset = "0x2FD90AC", VA = "0x2FD90AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5454", Offset = "0x15E5454")]
			remove
			{
			}
		}

		[Token(Token = "0x14000006")]
		private event KoreographyEventCallbackWithTime timedEvent
		{
			[Token(Token = "0x60009BB")]
			[Address(RVA = "0x2FD9150", Offset = "0x2FD9150", VA = "0x2FD9150")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5464", Offset = "0x15E5464")]
			add
			{
			}
			[Token(Token = "0x60009BC")]
			[Address(RVA = "0x2FD91F4", Offset = "0x2FD91F4", VA = "0x2FD91F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5474", Offset = "0x15E5474")]
			remove
			{
			}
		}

		[Token(Token = "0x60009BD")]
		[Address(RVA = "0x2FD9298", Offset = "0x2FD9298", VA = "0x2FD9298")]
		public void Register(KoreographyEventCallback callback)
		{
		}

		[Token(Token = "0x60009BE")]
		[Address(RVA = "0x2FD929C", Offset = "0x2FD929C", VA = "0x2FD929C")]
		public void Register(KoreographyEventCallbackWithTime callback)
		{
		}

		[Token(Token = "0x60009BF")]
		[Address(RVA = "0x2FD92A0", Offset = "0x2FD92A0", VA = "0x2FD92A0")]
		public void Unregister(KoreographyEventCallback callback)
		{
		}

		[Token(Token = "0x60009C0")]
		[Address(RVA = "0x2FD92A4", Offset = "0x2FD92A4", VA = "0x2FD92A4")]
		public void Unregister(KoreographyEventCallbackWithTime callback)
		{
		}

		[Token(Token = "0x60009C1")]
		[Address(RVA = "0x2FD92A8", Offset = "0x2FD92A8", VA = "0x2FD92A8")]
		public void UnregisterByObject(object obj)
		{
		}

		[Token(Token = "0x60009C2")]
		[Address(RVA = "0x2FD9408", Offset = "0x2FD9408", VA = "0x2FD9408")]
		public void ClearRegistrations()
		{
		}

		[Token(Token = "0x60009C3")]
		[Address(RVA = "0x2FD943C", Offset = "0x2FD943C", VA = "0x2FD943C")]
		public bool IsClear()
		{
			return default(bool);
		}

		[Token(Token = "0x60009C4")]
		[Address(RVA = "0x2FD945C", Offset = "0x2FD945C", VA = "0x2FD945C")]
		public void Trigger(KoreographyEvent evt, int sampleTime, int sampleDelta, DeltaSlice deltaSlice)
		{
		}

		[Token(Token = "0x60009C5")]
		[Address(RVA = "0x2FD9CF4", Offset = "0x2FD9CF4", VA = "0x2FD9CF4")]
		public EventObj()
		{
		}
	}
	[Token(Token = "0x2000147")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x15D5278", Offset = "0x15D5278")]
	public class EventIDAttribute : PropertyAttribute
	{
		[Token(Token = "0x60009C6")]
		[Address(RVA = "0x2FD9000", Offset = "0x2FD9000", VA = "0x2FD9000")]
		public EventIDAttribute()
		{
		}
	}
	[Token(Token = "0x2000148")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x15D52B0", Offset = "0x15D52B0")]
	public class NoEditorCreateAttribute : Attribute
	{
		[Token(Token = "0x60009C7")]
		[Address(RVA = "0x2FE2A80", Offset = "0x2FE2A80", VA = "0x2FE2A80")]
		public NoEditorCreateAttribute()
		{
		}
	}
}
namespace SonicBloom.Koreo.Players
{
	[Token(Token = "0x2000149")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x15D52E8", Offset = "0x15D52E8")]
	public class AudioBus : MonoBehaviour
	{
		[Token(Token = "0x200026B")]
		public delegate void AudioEndedHandler(AudioGroup group, int sampleTime, DeltaSlice deltaSlice);

		[Token(Token = "0x200026C")]
		private class AudioToBusAnchor
		{
			[Token(Token = "0x4000FEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public AudioGroup audioGroup;

			[Token(Token = "0x4000FED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public readonly int audioSampleLength;

			[Token(Token = "0x4000FEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public readonly int audioSampleStartTime;

			[Token(Token = "0x4000FEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public uint busSampleStartTime;

			[Token(Token = "0x6000EC5")]
			[Address(RVA = "0x2FE4E04", Offset = "0x2FE4E04", VA = "0x2FE4E04")]
			public AudioToBusAnchor()
			{
			}

			[Token(Token = "0x6000EC6")]
			[Address(RVA = "0x2FE3D94", Offset = "0x2FE3D94", VA = "0x2FE3D94")]
			public AudioToBusAnchor(AudioGroup _group, int _audioSampleStartTime, int _audioSampleLength)
			{
			}

			[Token(Token = "0x6000EC7")]
			[Address(RVA = "0x2FE3170", Offset = "0x2FE3170", VA = "0x2FE3170")]
			public void ClearAnchor()
			{
			}

			[Token(Token = "0x6000EC8")]
			[Address(RVA = "0x2FE30B4", Offset = "0x2FE30B4", VA = "0x2FE30B4")]
			public bool IsValid()
			{
				return default(bool);
			}

			[Token(Token = "0x6000EC9")]
			[Address(RVA = "0x2FE30C4", Offset = "0x2FE30C4", VA = "0x2FE30C4")]
			public bool IsPlayingAtBusTime(uint busSampleTime)
			{
				return default(bool);
			}

			[Token(Token = "0x6000ECA")]
			[Address(RVA = "0x2FE30EC", Offset = "0x2FE30EC", VA = "0x2FE30EC")]
			public int SampleTimeAtBusTime(uint busSampleTime)
			{
				return default(int);
			}
		}

		[Token(Token = "0x400087D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AudioSource sourceCom;

		[Token(Token = "0x400087E")]
		private const int BUS_SAMPLE_LENGTH = 44100;

		[Token(Token = "0x400087F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AudioClip busClip;

		[Token(Token = "0x4000880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int busChannels;

		[Token(Token = "0x4000881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int busFrequency;

		[Token(Token = "0x4000882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float busLengthInSeconds;

		[Token(Token = "0x4000883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int prevSourcePlayTime;

		[Token(Token = "0x4000884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private uint busPlaySampleTime;

		[Token(Token = "0x4000885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private uint busReadSampleTime;

		[Token(Token = "0x4000886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float timePlayStarted;

		[Token(Token = "0x4000887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool bColdStart;

		[Token(Token = "0x4000888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		private bool bPaused;

		[Token(Token = "0x4000889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly AudioToBusAnchor invalidSong;

		[Token(Token = "0x400088A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private AudioToBusAnchor prevSong;

		[Token(Token = "0x400088B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AudioToBusAnchor curSong;

		[Token(Token = "0x400088C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private AudioToBusAnchor nextSong;

		[Token(Token = "0x400088D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private object anchorLock;

		[Token(Token = "0x17000135")]
		public float Pitch
		{
			[Token(Token = "0x60009CA")]
			[Address(RVA = "0x2FE2BD0", Offset = "0x2FE2BD0", VA = "0x2FE2BD0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60009CB")]
			[Address(RVA = "0x2FE2C68", Offset = "0x2FE2C68", VA = "0x2FE2C68")]
			set
			{
			}
		}

		[Token(Token = "0x14000007")]
		public event AudioEndedHandler AudioEnded
		{
			[Token(Token = "0x60009C8")]
			[Address(RVA = "0x2FE2A88", Offset = "0x2FE2A88", VA = "0x2FE2A88")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5484", Offset = "0x15E5484")]
			add
			{
			}
			[Token(Token = "0x60009C9")]
			[Address(RVA = "0x2FE2B2C", Offset = "0x2FE2B2C", VA = "0x2FE2B2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5494", Offset = "0x15E5494")]
			remove
			{
			}
		}

		[Token(Token = "0x60009CC")]
		[Address(RVA = "0x2FE2D40", Offset = "0x2FE2D40", VA = "0x2FE2D40")]
		private void Awake()
		{
		}

		[Token(Token = "0x60009CD")]
		[Address(RVA = "0x2FE2DD0", Offset = "0x2FE2DD0", VA = "0x2FE2DD0")]
		private void Update()
		{
		}

		[Token(Token = "0x60009CE")]
		[Address(RVA = "0x2FE318C", Offset = "0x2FE318C", VA = "0x2FE318C")]
		public void Init(AudioSource com, int numChannels, int frequency)
		{
		}

		[Token(Token = "0x60009CF")]
		[Address(RVA = "0x2FE344C", Offset = "0x2FE344C", VA = "0x2FE344C")]
		private void ReadBusAudioCallback(float[] data)
		{
		}

		[Token(Token = "0x60009D0")]
		[Address(RVA = "0x2FE3B50", Offset = "0x2FE3B50", VA = "0x2FE3B50")]
		private void SetBusPositionCallback(int position)
		{
		}

		[Token(Token = "0x60009D1")]
		[Address(RVA = "0x2FE3BE0", Offset = "0x2FE3BE0", VA = "0x2FE3BE0")]
		private void ScheduleNextSong(AudioGroup group, int startSampleOffset, int sampleLength, uint busStartTime)
		{
		}

		[Token(Token = "0x60009D2")]
		[Address(RVA = "0x2FE3DE4", Offset = "0x2FE3DE4", VA = "0x2FE3DE4")]
		public bool PlayAudio(AudioGroup group, int startSampleOffset = 0, int sampleLength = 0, bool bReplaceIfExists = false)
		{
			return default(bool);
		}

		[Token(Token = "0x60009D3")]
		[Address(RVA = "0x2FE3EFC", Offset = "0x2FE3EFC", VA = "0x2FE3EFC")]
		public bool PlayAudioScheduled(AudioGroup group, int curSongSampleTransLoc = 0, int startSampleOffset = 0, int sampleLength = 0, bool bReplaceIfExists = false)
		{
			return default(bool);
		}

		[Token(Token = "0x60009D4")]
		[Address(RVA = "0x2FE333C", Offset = "0x2FE333C", VA = "0x2FE333C")]
		private void Play()
		{
		}

		[Token(Token = "0x60009D5")]
		[Address(RVA = "0x2FE40D4", Offset = "0x2FE40D4", VA = "0x2FE40D4")]
		public void Continue()
		{
		}

		[Token(Token = "0x60009D6")]
		[Address(RVA = "0x2FE4234", Offset = "0x2FE4234", VA = "0x2FE4234")]
		public void Pause()
		{
		}

		[Token(Token = "0x60009D7")]
		[Address(RVA = "0x2FE42F0", Offset = "0x2FE42F0", VA = "0x2FE42F0")]
		public void Stop(bool bDoCallback = false)
		{
		}

		[Token(Token = "0x60009D8")]
		[Address(RVA = "0x2FE447C", Offset = "0x2FE447C", VA = "0x2FE447C")]
		private int GetSampleTimeOfAnchor(AudioToBusAnchor anchor)
		{
			return default(int);
		}

		[Token(Token = "0x60009D9")]
		[Address(RVA = "0x2FE4528", Offset = "0x2FE4528", VA = "0x2FE4528")]
		public int GetSampleTimeCurrentAudio()
		{
			return default(int);
		}

		[Token(Token = "0x60009DA")]
		[Address(RVA = "0x2FE45E0", Offset = "0x2FE45E0", VA = "0x2FE45E0")]
		public int GetSampleTimeOfAudio(AudioGroup group)
		{
			return default(int);
		}

		[Token(Token = "0x60009DB")]
		[Address(RVA = "0x2FE46E4", Offset = "0x2FE46E4", VA = "0x2FE46E4")]
		public bool IsAudioPlaying(AudioGroup group)
		{
			return default(bool);
		}

		[Token(Token = "0x60009DC")]
		[Address(RVA = "0x2FE47E0", Offset = "0x2FE47E0", VA = "0x2FE47E0")]
		public bool IsPaused()
		{
			return default(bool);
		}

		[Token(Token = "0x60009DD")]
		[Address(RVA = "0x2FE47E8", Offset = "0x2FE47E8", VA = "0x2FE47E8")]
		public bool IsNextSongScheduled()
		{
			return default(bool);
		}

		[Token(Token = "0x60009DE")]
		[Address(RVA = "0x2FE317C", Offset = "0x2FE317C", VA = "0x2FE317C")]
		private void OnAudioEnded(AudioGroup songGroup, int sampleTime, DeltaSlice deltaSlice)
		{
		}

		[Token(Token = "0x60009DF")]
		[Address(RVA = "0x2FE4C68", Offset = "0x2FE4C68", VA = "0x2FE4C68")]
		public AudioBus()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200014A")]
	public class AudioGroup
	{
		[Token(Token = "0x400088E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DC368", Offset = "0x15DC368")]
		private List<AudioLayer> audioLayers;

		[Token(Token = "0x17000136")]
		public int TotalSampleTime
		{
			[Token(Token = "0x60009E0")]
			[Address(RVA = "0x2FE3D24", Offset = "0x2FE3D24", VA = "0x2FE3D24")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000137")]
		public int Channels
		{
			[Token(Token = "0x60009E1")]
			[Address(RVA = "0x2FE4F1C", Offset = "0x2FE4F1C", VA = "0x2FE4F1C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000138")]
		public int Frequency
		{
			[Token(Token = "0x60009E2")]
			[Address(RVA = "0x2FE4F8C", Offset = "0x2FE4F8C", VA = "0x2FE4F8C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000139")]
		public int NumLayers
		{
			[Token(Token = "0x60009E3")]
			[Address(RVA = "0x2FE4FFC", Offset = "0x2FE4FFC", VA = "0x2FE4FFC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60009E4")]
		[Address(RVA = "0x2FE5050", Offset = "0x2FE5050", VA = "0x2FE5050")]
		public void InitLayerData()
		{
		}

		[Token(Token = "0x60009E5")]
		[Address(RVA = "0x2FE5394", Offset = "0x2FE5394", VA = "0x2FE5394")]
		public void ClearLayerData()
		{
		}

		[Token(Token = "0x60009E6")]
		[Address(RVA = "0x2FE543C", Offset = "0x2FE543C", VA = "0x2FE543C")]
		public void RegisterKoreography()
		{
		}

		[Token(Token = "0x60009E7")]
		[Address(RVA = "0x2FE5564", Offset = "0x2FE5564", VA = "0x2FE5564")]
		public void UnregisterKoreography()
		{
		}

		[Token(Token = "0x60009E8")]
		[Address(RVA = "0x2FE568C", Offset = "0x2FE568C", VA = "0x2FE568C")]
		public bool IsKoreographyRegistered()
		{
			return default(bool);
		}

		[Token(Token = "0x60009E9")]
		[Address(RVA = "0x2FE57C4", Offset = "0x2FE57C4", VA = "0x2FE57C4")]
		public bool IsReady()
		{
			return default(bool);
		}

		[Token(Token = "0x60009EA")]
		[Address(RVA = "0x2FE5878", Offset = "0x2FE5878", VA = "0x2FE5878")]
		public bool IsEmpty()
		{
			return default(bool);
		}

		[Token(Token = "0x60009EB")]
		[Address(RVA = "0x2FE58D0", Offset = "0x2FE58D0", VA = "0x2FE58D0")]
		public bool ContainsClip(string clipName)
		{
			return default(bool);
		}

		[Token(Token = "0x60009EC")]
		[Address(RVA = "0x2FE5994", Offset = "0x2FE5994", VA = "0x2FE5994")]
		public AudioClip GetBaseClip()
		{
			return null;
		}

		[Token(Token = "0x60009ED")]
		[Address(RVA = "0x2FE5A04", Offset = "0x2FE5A04", VA = "0x2FE5A04")]
		public string GetBaseClipName()
		{
			return null;
		}

		[Token(Token = "0x60009EE")]
		[Address(RVA = "0x2FE5A80", Offset = "0x2FE5A80", VA = "0x2FE5A80")]
		public AudioClip GetClipAtLayer(int layerIdx)
		{
			return null;
		}

		[Token(Token = "0x60009EF")]
		[Address(RVA = "0x2FE397C", Offset = "0x2FE397C", VA = "0x2FE397C")]
		public void GetAudioData(int sampleTime, float[] data, int dataOffset, int amountToRead)
		{
		}

		[Token(Token = "0x60009F0")]
		[Address(RVA = "0x2FE5C58", Offset = "0x2FE5C58", VA = "0x2FE5C58")]
		public AudioGroup()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200014B")]
	public class AudioLayer
	{
		[Token(Token = "0x400088F")]
		private const int MAX_ARRAY_LENGTH = 4000000;

		[Token(Token = "0x4000890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DC3B4", Offset = "0x15DC3B4")]
		private Koreography koreo;

		[Token(Token = "0x4000891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float[][] audioDatas;

		[Token(Token = "0x4000892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DC400", Offset = "0x15DC400")]
		private AudioClip clip;

		[Token(Token = "0x4000893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string clipName;

		[Token(Token = "0x4000894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int totalSampleTime;

		[Token(Token = "0x4000895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int channelCount;

		[Token(Token = "0x4000896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int frequency;

		[Token(Token = "0x4000897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DC44C", Offset = "0x15DC44C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x15DC44C", Offset = "0x15DC44C")]
		public float volume;

		[Token(Token = "0x1700013A")]
		public AudioClip Clip
		{
			[Token(Token = "0x60009F1")]
			[Address(RVA = "0x2FE5CD4", Offset = "0x2FE5CD4", VA = "0x2FE5CD4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013B")]
		public string ClipName
		{
			[Token(Token = "0x60009F2")]
			[Address(RVA = "0x2FE5CDC", Offset = "0x2FE5CDC", VA = "0x2FE5CDC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013C")]
		public Koreography Koreo
		{
			[Token(Token = "0x60009F3")]
			[Address(RVA = "0x2FE5CE4", Offset = "0x2FE5CE4", VA = "0x2FE5CE4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013D")]
		public int TotalSampleTime
		{
			[Token(Token = "0x60009F4")]
			[Address(RVA = "0x2FE5CEC", Offset = "0x2FE5CEC", VA = "0x2FE5CEC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700013E")]
		public int Channels
		{
			[Token(Token = "0x60009F5")]
			[Address(RVA = "0x2FE5CF4", Offset = "0x2FE5CF4", VA = "0x2FE5CF4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700013F")]
		public int Frequency
		{
			[Token(Token = "0x60009F6")]
			[Address(RVA = "0x2FE5CFC", Offset = "0x2FE5CFC", VA = "0x2FE5CFC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000140")]
		public float Volume
		{
			[Token(Token = "0x60009F7")]
			[Address(RVA = "0x2FE5D04", Offset = "0x2FE5D04", VA = "0x2FE5D04")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60009F8")]
			[Address(RVA = "0x2FE5D0C", Offset = "0x2FE5D0C", VA = "0x2FE5D0C")]
			set
			{
			}
		}

		[Token(Token = "0x17000141")]
		public int TotalDataLength
		{
			[Token(Token = "0x60009F9")]
			[Address(RVA = "0x2FE5C4C", Offset = "0x2FE5C4C", VA = "0x2FE5C4C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60009FA")]
		[Address(RVA = "0x2FE50E4", Offset = "0x2FE50E4", VA = "0x2FE50E4")]
		public void InitData()
		{
		}

		[Token(Token = "0x60009FB")]
		[Address(RVA = "0x2FE5430", Offset = "0x2FE5430", VA = "0x2FE5430")]
		public void ClearData()
		{
		}

		[Token(Token = "0x60009FC")]
		[Address(RVA = "0x2FE5868", Offset = "0x2FE5868", VA = "0x2FE5868")]
		public bool IsReady()
		{
			return default(bool);
		}

		[Token(Token = "0x60009FD")]
		[Address(RVA = "0x2FE5B0C", Offset = "0x2FE5B0C", VA = "0x2FE5B0C")]
		public void ReadLayerAudioData(int sampleTimePos, float[] data, int dataOffset, int amount, bool bAdditive = false)
		{
		}

		[Token(Token = "0x60009FE")]
		[Address(RVA = "0x2FE5D88", Offset = "0x2FE5D88", VA = "0x2FE5D88")]
		public AudioLayer()
		{
		}
	}
	[Token(Token = "0x200014C")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x15D5320", Offset = "0x15D5320")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x15D5320", Offset = "0x15D5320")]
	public class SampleSyncMusicPlayer : MonoBehaviour, IKoreographedPlayer
	{
		[Token(Token = "0x200026D")]
		public delegate void MusicEndedHandler(AudioGroup group);

		[Token(Token = "0x200026E")]
		private struct TransitionInfo
		{
			[Token(Token = "0x4000FF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool bValid;

			[Token(Token = "0x4000FF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AudioGroup group;

			[Token(Token = "0x4000FF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int curMusicTransLoc;

			[Token(Token = "0x4000FF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int startSampleOffset;

			[Token(Token = "0x4000FF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int lengthInSamples;

			[Token(Token = "0x4000FF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public bool bReplaceIfExists;
		}

		[Token(Token = "0x4000899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DC4B0", Offset = "0x15DC4B0")]
		private AudioGroup playbackMusic;

		[Token(Token = "0x400089A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DC4FC", Offset = "0x15DC4FC")]
		private int musicChannels;

		[Token(Token = "0x400089B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DC548", Offset = "0x15DC548")]
		private int musicFrequency;

		[Token(Token = "0x400089C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioBus bus;

		[Token(Token = "0x400089D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DC594", Offset = "0x15DC594")]
		private Koreographer targetKoreographer;

		[Token(Token = "0x400089E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AudioGroup curMusic;

		[Token(Token = "0x400089F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AudioGroup transMusic;

		[Token(Token = "0x40008A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int lastBusTime;

		[Token(Token = "0x40008A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int curMusicTime;

		[Token(Token = "0x40008A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int transMusicTime;

		[Token(Token = "0x40008A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private TransitionInfo transInfo;

		[Token(Token = "0x40008A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private AudioSource audioCom;

		[Token(Token = "0x17000142")]
		public bool IsPlaying
		{
			[Token(Token = "0x6000A01")]
			[Address(RVA = "0x2FE8498", Offset = "0x2FE8498", VA = "0x2FE8498")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x14000008")]
		public event MusicEndedHandler MusicEnded
		{
			[Token(Token = "0x60009FF")]
			[Address(RVA = "0x2FE8350", Offset = "0x2FE8350", VA = "0x2FE8350")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E54A4", Offset = "0x15E54A4")]
			add
			{
			}
			[Token(Token = "0x6000A00")]
			[Address(RVA = "0x2FE83F4", Offset = "0x2FE83F4", VA = "0x2FE83F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E54B4", Offset = "0x15E54B4")]
			remove
			{
			}
		}

		[Token(Token = "0x6000A02")]
		[Address(RVA = "0x2FE84D0", Offset = "0x2FE84D0", VA = "0x2FE84D0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A03")]
		[Address(RVA = "0x2FE864C", Offset = "0x2FE864C", VA = "0x2FE864C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A04")]
		[Address(RVA = "0x2FE87F8", Offset = "0x2FE87F8", VA = "0x2FE87F8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A05")]
		[Address(RVA = "0x2FE8A1C", Offset = "0x2FE8A1C", VA = "0x2FE8A1C")]
		private void PerformChoreographyForTimeSlice(AudioGroup group, int startTime, int endTime, DeltaSlice deltaSlice)
		{
		}

		[Token(Token = "0x6000A06")]
		[Address(RVA = "0x2FE86B0", Offset = "0x2FE86B0", VA = "0x2FE86B0")]
		public void PlayMusic(AudioGroup group, int startSampleOffset = 0, int lengthInSamples = 0, bool bReplaceIfExists = false)
		{
		}

		[Token(Token = "0x6000A07")]
		[Address(RVA = "0x2FE8B00", Offset = "0x2FE8B00", VA = "0x2FE8B00")]
		public void ScheduleNextMusic(AudioGroup group, int curMusicTransLoc = 0, int startSampleOffset = 0, int lengthInSamples = 0, bool bReplaceIfExists = false)
		{
		}

		[Token(Token = "0x6000A08")]
		[Address(RVA = "0x2FE8CD0", Offset = "0x2FE8CD0", VA = "0x2FE8CD0")]
		public void Pause()
		{
		}

		[Token(Token = "0x6000A09")]
		[Address(RVA = "0x2FE8CE8", Offset = "0x2FE8CE8", VA = "0x2FE8CE8")]
		public void Continue()
		{
		}

		[Token(Token = "0x6000A0A")]
		[Address(RVA = "0x2FE8D00", Offset = "0x2FE8D00", VA = "0x2FE8D00")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000A0B")]
		[Address(RVA = "0x2FE8D1C", Offset = "0x2FE8D1C", VA = "0x2FE8D1C")]
		private void OnAudioEnded(AudioGroup group, int sampleTime, DeltaSlice deltaSlice)
		{
		}

		[Token(Token = "0x6000A0C")]
		[Address(RVA = "0x2FE9220", Offset = "0x2FE9220", VA = "0x2FE9220", Slot = "4")]
		public int GetSampleTimeForClip(string clipName)
		{
			return default(int);
		}

		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0x2FE92E0", Offset = "0x2FE92E0", VA = "0x2FE92E0", Slot = "5")]
		public int GetTotalSampleTimeForClip(string clipName)
		{
			return default(int);
		}

		[Token(Token = "0x6000A0E")]
		[Address(RVA = "0x2FE934C", Offset = "0x2FE934C", VA = "0x2FE934C", Slot = "6")]
		public bool GetIsPlaying(string clipName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A0F")]
		[Address(RVA = "0x2FE8988", Offset = "0x2FE8988", VA = "0x2FE8988", Slot = "7")]
		public float GetPitch(string clipName)
		{
			return default(float);
		}

		[Token(Token = "0x6000A10")]
		[Address(RVA = "0x2FE93C4", Offset = "0x2FE93C4", VA = "0x2FE93C4", Slot = "8")]
		public string GetCurrentClipName()
		{
			return null;
		}

		[Token(Token = "0x6000A11")]
		[Address(RVA = "0x2FE9434", Offset = "0x2FE9434", VA = "0x2FE9434")]
		public SampleSyncMusicPlayer()
		{
		}
	}
	[Token(Token = "0x200014D")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x15D53A8", Offset = "0x15D53A8")]
	public class MultiMusicPlayer : MonoBehaviour, IKoreographedPlayer
	{
		[Serializable]
		[Token(Token = "0x200026F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D57B4", Offset = "0x15D57B4")]
		private sealed class <>c
		{
			[Token(Token = "0x4000FF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000FF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Predicate<MusicLayer> <>9__20_0;

			[Token(Token = "0x6000ED0")]
			[Address(RVA = "0x2FE8044", Offset = "0x2FE8044", VA = "0x2FE8044")]
			public <>c()
			{
			}

			[Token(Token = "0x6000ED1")]
			[Address(RVA = "0x2FE804C", Offset = "0x2FE804C", VA = "0x2FE804C")]
			internal bool <InitializeLayers>b__20_0(MusicLayer x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000270")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D57C4", Offset = "0x15D57C4")]
		private sealed class <>c__DisplayClass31_0
		{
			[Token(Token = "0x4000FF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string layerName;

			[Token(Token = "0x6000ED2")]
			[Address(RVA = "0x2FE7CAC", Offset = "0x2FE7CAC", VA = "0x2FE7CAC")]
			public <>c__DisplayClass31_0()
			{
			}

			[Token(Token = "0x6000ED3")]
			[Address(RVA = "0x2FE80D0", Offset = "0x2FE80D0", VA = "0x2FE80D0")]
			internal bool <SetVolumeForLayer>b__0(MusicLayer x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40008A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DC5E0", Offset = "0x15DC5E0")]
		private double syncPlayDelay;

		[Token(Token = "0x40008A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DC62C", Offset = "0x15DC62C")]
		private float pitch;

		[Token(Token = "0x40008A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DC678", Offset = "0x15DC678")]
		private bool loop;

		[Token(Token = "0x40008A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DC6C4", Offset = "0x15DC6C4")]
		private bool autoPlayOnAwake;

		[Token(Token = "0x40008A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DC710", Offset = "0x15DC710")]
		private List<MusicLayer> musicLayers;

		[Token(Token = "0x40008AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DC75C", Offset = "0x15DC75C")]
		private Koreographer targetKoreographer;

		[Token(Token = "0x40008AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool bWaitingToPlay;

		[Token(Token = "0x17000143")]
		public float Pitch
		{
			[Token(Token = "0x6000A12")]
			[Address(RVA = "0x2FE6640", Offset = "0x2FE6640", VA = "0x2FE6640")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A13")]
			[Address(RVA = "0x2FE6648", Offset = "0x2FE6648", VA = "0x2FE6648")]
			set
			{
			}
		}

		[Token(Token = "0x17000144")]
		public bool Loop
		{
			[Token(Token = "0x6000A14")]
			[Address(RVA = "0x2FE66FC", Offset = "0x2FE66FC", VA = "0x2FE66FC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A15")]
			[Address(RVA = "0x2FE6704", Offset = "0x2FE6704", VA = "0x2FE6704")]
			set
			{
			}
		}

		[Token(Token = "0x17000145")]
		public float Volume
		{
			[Token(Token = "0x6000A16")]
			[Address(RVA = "0x2FE67B4", Offset = "0x2FE67B4", VA = "0x2FE67B4")]
			set
			{
			}
		}

		[Token(Token = "0x17000146")]
		public bool IsPlaying
		{
			[Token(Token = "0x6000A17")]
			[Address(RVA = "0x2FE6864", Offset = "0x2FE6864", VA = "0x2FE6864")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000A18")]
		[Address(RVA = "0x2FE68E4", Offset = "0x2FE68E4", VA = "0x2FE68E4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A19")]
		[Address(RVA = "0x2FE7184", Offset = "0x2FE7184", VA = "0x2FE7184")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A1A")]
		[Address(RVA = "0x2FE73C4", Offset = "0x2FE73C4", VA = "0x2FE73C4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000A1B")]
		[Address(RVA = "0x2FE6A2C", Offset = "0x2FE6A2C", VA = "0x2FE6A2C")]
		private void InitializeLayers()
		{
		}

		[Token(Token = "0x6000A1C")]
		[Address(RVA = "0x2FE705C", Offset = "0x2FE705C", VA = "0x2FE705C")]
		private void LoadKoreographyAndStart(int startSampleTime = 0, bool autoPlay = true)
		{
		}

		[Token(Token = "0x6000A1D")]
		[Address(RVA = "0x2FE72F8", Offset = "0x2FE72F8", VA = "0x2FE72F8")]
		private void PlayInternal()
		{
		}

		[Token(Token = "0x6000A1E")]
		[Address(RVA = "0x2FE7244", Offset = "0x2FE7244", VA = "0x2FE7244")]
		private bool IsReadyForPlayback()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A1F")]
		[Address(RVA = "0x2FE777C", Offset = "0x2FE777C", VA = "0x2FE777C")]
		private int GetIndexOfLayerWithClipName(string clipName)
		{
			return default(int);
		}

		[Token(Token = "0x6000A20")]
		[Address(RVA = "0x2FE7888", Offset = "0x2FE7888", VA = "0x2FE7888")]
		public void LoadSong(List<MusicLayer> layers, int startSampleTime = 0, bool autoPlay = true)
		{
		}

		[Token(Token = "0x6000A21")]
		[Address(RVA = "0x2FE7740", Offset = "0x2FE7740", VA = "0x2FE7740")]
		public void Play()
		{
		}

		[Token(Token = "0x6000A22")]
		[Address(RVA = "0x2FE79CC", Offset = "0x2FE79CC", VA = "0x2FE79CC")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000A23")]
		[Address(RVA = "0x2FE7A6C", Offset = "0x2FE7A6C", VA = "0x2FE7A6C")]
		public void Pause()
		{
		}

		[Token(Token = "0x6000A24")]
		[Address(RVA = "0x2FE7644", Offset = "0x2FE7644", VA = "0x2FE7644")]
		public void SeekToSample(int targetSample)
		{
		}

		[Token(Token = "0x6000A25")]
		[Address(RVA = "0x2FE7B0C", Offset = "0x2FE7B0C", VA = "0x2FE7B0C")]
		public void SetVolumeForLayer(int layerNum, float volume)
		{
		}

		[Token(Token = "0x6000A26")]
		[Address(RVA = "0x2FE7BC0", Offset = "0x2FE7BC0", VA = "0x2FE7BC0")]
		public void SetVolumeForLayer(string layerName, float volume)
		{
		}

		[Token(Token = "0x6000A27")]
		[Address(RVA = "0x2FE7CB4", Offset = "0x2FE7CB4", VA = "0x2FE7CB4", Slot = "4")]
		public int GetSampleTimeForClip(string clipName)
		{
			return default(int);
		}

		[Token(Token = "0x6000A28")]
		[Address(RVA = "0x2FE7D60", Offset = "0x2FE7D60", VA = "0x2FE7D60", Slot = "5")]
		public int GetTotalSampleTimeForClip(string clipName)
		{
			return default(int);
		}

		[Token(Token = "0x6000A29")]
		[Address(RVA = "0x2FE7E10", Offset = "0x2FE7E10", VA = "0x2FE7E10", Slot = "6")]
		public bool GetIsPlaying(string clipName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A2A")]
		[Address(RVA = "0x2FE7EE0", Offset = "0x2FE7EE0", VA = "0x2FE7EE0", Slot = "7")]
		public float GetPitch(string clipName)
		{
			return default(float);
		}

		[Token(Token = "0x6000A2B")]
		[Address(RVA = "0x2FE7EE8", Offset = "0x2FE7EE8", VA = "0x2FE7EE8", Slot = "8")]
		public string GetCurrentClipName()
		{
			return null;
		}

		[Token(Token = "0x6000A2C")]
		[Address(RVA = "0x2FE7F50", Offset = "0x2FE7F50", VA = "0x2FE7F50")]
		public MultiMusicPlayer()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200014E")]
	public class MusicLayer
	{
		[Token(Token = "0x40008AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DC7A8", Offset = "0x15DC7A8")]
		private string name;

		[Token(Token = "0x40008AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DC7F4", Offset = "0x15DC7F4")]
		private Koreography koreography;

		[Token(Token = "0x40008AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DC840", Offset = "0x15DC840")]
		private AudioClip audioClip;

		[Token(Token = "0x40008AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DC88C", Offset = "0x15DC88C")]
		private AudioSource audioSource;

		[Token(Token = "0x40008B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AudioVisor audioVisor;

		[Token(Token = "0x40008B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string clipName;

		[Token(Token = "0x17000147")]
		public Koreography KoreoData
		{
			[Token(Token = "0x6000A2D")]
			[Address(RVA = "0x2FE80F4", Offset = "0x2FE80F4", VA = "0x2FE80F4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000148")]
		public AudioClip Clip
		{
			[Token(Token = "0x6000A2E")]
			[Address(RVA = "0x2FE74EC", Offset = "0x2FE74EC", VA = "0x2FE74EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000149")]
		public string ClipName
		{
			[Token(Token = "0x6000A2F")]
			[Address(RVA = "0x2FE782C", Offset = "0x2FE782C", VA = "0x2FE782C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014A")]
		public AudioSource AudioSourceCom
		{
			[Token(Token = "0x6000A30")]
			[Address(RVA = "0x2FE80FC", Offset = "0x2FE80FC", VA = "0x2FE80FC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014B")]
		public AudioVisor Visor
		{
			[Token(Token = "0x6000A31")]
			[Address(RVA = "0x2FE8104", Offset = "0x2FE8104", VA = "0x2FE8104")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014C")]
		public string Name
		{
			[Token(Token = "0x6000A32")]
			[Address(RVA = "0x2FE810C", Offset = "0x2FE810C", VA = "0x2FE810C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A33")]
		[Address(RVA = "0x2FE8114", Offset = "0x2FE8114", VA = "0x2FE8114")]
		private MusicLayer()
		{
		}

		[Token(Token = "0x6000A34")]
		[Address(RVA = "0x2FE817C", Offset = "0x2FE817C", VA = "0x2FE817C")]
		public MusicLayer(Koreography koreo, AudioSource source, string layerName = "")
		{
		}

		[Token(Token = "0x6000A35")]
		[Address(RVA = "0x2FE8270", Offset = "0x2FE8270", VA = "0x2FE8270")]
		public MusicLayer(AudioClip clip, AudioSource source, string layerName = "")
		{
		}

		[Token(Token = "0x6000A36")]
		[Address(RVA = "0x2FE7580", Offset = "0x2FE7580", VA = "0x2FE7580")]
		public void Init([Optional] AudioSource source, [Optional] Koreographer targetKoreographer)
		{
		}
	}
	[Token(Token = "0x200014F")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x15D53E0", Offset = "0x15D53E0")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x15D53E0", Offset = "0x15D53E0")]
	public class SimpleMusicPlayer : MonoBehaviour, IKoreographedPlayer
	{
		[Token(Token = "0x40008B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DC8D8", Offset = "0x15DC8D8")]
		private bool autoPlayOnAwake;

		[Token(Token = "0x40008B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DC924", Offset = "0x15DC924")]
		private Koreography koreography;

		[Token(Token = "0x40008B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DC970", Offset = "0x15DC970")]
		private Koreographer targetKoreographer;

		[Token(Token = "0x40008B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AudioVisor visor;

		[Token(Token = "0x40008B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AudioSource audioCom;

		[Token(Token = "0x1700014D")]
		public bool IsPlaying
		{
			[Token(Token = "0x6000A37")]
			[Address(RVA = "0x2FE9494", Offset = "0x2FE9494", VA = "0x2FE9494")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000A38")]
		[Address(RVA = "0x2FE94B0", Offset = "0x2FE94B0", VA = "0x2FE94B0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A39")]
		[Address(RVA = "0x2FE9790", Offset = "0x2FE9790", VA = "0x2FE9790")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A3A")]
		[Address(RVA = "0x2FE9678", Offset = "0x2FE9678", VA = "0x2FE9678")]
		public void LoadSong(Koreography koreo, int startSampleTime = 0, bool autoPlay = true)
		{
		}

		[Token(Token = "0x6000A3B")]
		[Address(RVA = "0x2FE9800", Offset = "0x2FE9800", VA = "0x2FE9800")]
		public void Play()
		{
		}

		[Token(Token = "0x6000A3C")]
		[Address(RVA = "0x2FE984C", Offset = "0x2FE984C", VA = "0x2FE984C")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000A3D")]
		[Address(RVA = "0x2FE9868", Offset = "0x2FE9868", VA = "0x2FE9868")]
		public void Pause()
		{
		}

		[Token(Token = "0x6000A3E")]
		[Address(RVA = "0x2FE97B0", Offset = "0x2FE97B0", VA = "0x2FE97B0")]
		public void SeekToSample(int targetSample)
		{
		}

		[Token(Token = "0x6000A3F")]
		[Address(RVA = "0x2FE9884", Offset = "0x2FE9884", VA = "0x2FE9884", Slot = "4")]
		public int GetSampleTimeForClip(string clipName)
		{
			return default(int);
		}

		[Token(Token = "0x6000A40")]
		[Address(RVA = "0x2FE9944", Offset = "0x2FE9944", VA = "0x2FE9944", Slot = "5")]
		public int GetTotalSampleTimeForClip(string clipName)
		{
			return default(int);
		}

		[Token(Token = "0x6000A41")]
		[Address(RVA = "0x2FE9A14", Offset = "0x2FE9A14", VA = "0x2FE9A14", Slot = "6")]
		public bool GetIsPlaying(string clipName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A42")]
		[Address(RVA = "0x2FE9AD8", Offset = "0x2FE9AD8", VA = "0x2FE9AD8", Slot = "7")]
		public float GetPitch(string clipName)
		{
			return default(float);
		}

		[Token(Token = "0x6000A43")]
		[Address(RVA = "0x2FE9AF4", Offset = "0x2FE9AF4", VA = "0x2FE9AF4", Slot = "8")]
		public string GetCurrentClipName()
		{
			return null;
		}

		[Token(Token = "0x6000A44")]
		[Address(RVA = "0x2FE9B98", Offset = "0x2FE9B98", VA = "0x2FE9B98")]
		public AudioSource GetAudioSource()
		{
			return null;
		}

		[Token(Token = "0x6000A45")]
		[Address(RVA = "0x2FE9BA0", Offset = "0x2FE9BA0", VA = "0x2FE9BA0")]
		public SimpleMusicPlayer()
		{
		}
	}
	[Token(Token = "0x2000150")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x15D5468", Offset = "0x15D5468")]
	public class AudioSourceVisor : MonoBehaviour
	{
		[Token(Token = "0x40008B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DC9BC", Offset = "0x15DC9BC")]
		private AudioSource targetAudioSource;

		[Token(Token = "0x40008B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DCA08", Offset = "0x15DCA08")]
		private Koreographer targetKoreographer;

		[Token(Token = "0x40008B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AudioVisor visor;

		[Token(Token = "0x1700014E")]
		public double ScheduledPlayTime
		{
			[Token(Token = "0x6000A46")]
			[Address(RVA = "0x2FE5DF8", Offset = "0x2FE5DF8", VA = "0x2FE5DF8")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000A47")]
			[Address(RVA = "0x2FE5E14", Offset = "0x2FE5E14", VA = "0x2FE5E14")]
			set
			{
			}
		}

		[Token(Token = "0x6000A48")]
		[Address(RVA = "0x2FE5E30", Offset = "0x2FE5E30", VA = "0x2FE5E30")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A49")]
		[Address(RVA = "0x2FE618C", Offset = "0x2FE618C", VA = "0x2FE618C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A4A")]
		[Address(RVA = "0x2FE61AC", Offset = "0x2FE61AC", VA = "0x2FE61AC")]
		public void ResyncTimings(int targetSampleTime)
		{
		}

		[Token(Token = "0x6000A4B")]
		[Address(RVA = "0x2FE6264", Offset = "0x2FE6264", VA = "0x2FE6264")]
		public AudioSourceVisor()
		{
		}
	}
	[Token(Token = "0x2000151")]
	public struct AudioClipID
	{
		[Token(Token = "0x40008BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int instanceID;

		[Token(Token = "0x40008BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string name;
	}
	[Token(Token = "0x2000152")]
	public class AudioVisor : VisorBase
	{
		[Token(Token = "0x40008BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected AudioSource audioCom;

		[Token(Token = "0x40008BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected AudioClipID clipID;

		[Token(Token = "0x40008BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected double dspPlayStartTime;

		[Token(Token = "0x1700014F")]
		public double ScheduledPlayTime
		{
			[Token(Token = "0x6000A4C")]
			[Address(RVA = "0x2FE626C", Offset = "0x2FE626C", VA = "0x2FE626C")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000A4D")]
			[Address(RVA = "0x2FE6274", Offset = "0x2FE6274", VA = "0x2FE6274")]
			set
			{
			}
		}

		[Token(Token = "0x6000A4E")]
		[Address(RVA = "0x2FE627C", Offset = "0x2FE627C", VA = "0x2FE627C")]
		private AudioVisor()
		{
		}

		[Token(Token = "0x6000A4F")]
		[Address(RVA = "0x2FE5FCC", Offset = "0x2FE5FCC", VA = "0x2FE5FCC")]
		public AudioVisor(AudioSource sourceCom, [Optional] Koreographer targetKoreographer)
		{
		}

		[Token(Token = "0x6000A50")]
		[Address(RVA = "0x2FE629C", Offset = "0x2FE629C", VA = "0x2FE629C")]
		public void ResyncTimings()
		{
		}

		[Token(Token = "0x6000A51")]
		[Address(RVA = "0x2FE61C4", Offset = "0x2FE61C4", VA = "0x2FE61C4")]
		public void ResyncTimings(int targetSampleTime)
		{
		}

		[Token(Token = "0x6000A52")]
		[Address(RVA = "0x2FE62CC", Offset = "0x2FE62CC", VA = "0x2FE62CC")]
		public int GetCurrentTimeInSamples()
		{
			return default(int);
		}

		[Token(Token = "0x6000A53")]
		[Address(RVA = "0x2FE633C", Offset = "0x2FE633C", VA = "0x2FE633C", Slot = "4")]
		protected override string GetAudioName()
		{
			return null;
		}

		[Token(Token = "0x6000A54")]
		[Address(RVA = "0x2FE63C4", Offset = "0x2FE63C4", VA = "0x2FE63C4", Slot = "5")]
		protected override bool GetIsAudioPlaying()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A55")]
		[Address(RVA = "0x2FE6438", Offset = "0x2FE6438", VA = "0x2FE6438", Slot = "6")]
		protected override bool GetIsAudioLooping()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A56")]
		[Address(RVA = "0x2FE6454", Offset = "0x2FE6454", VA = "0x2FE6454", Slot = "7")]
		protected override bool GetDidAudioLoop()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A57")]
		[Address(RVA = "0x2FE64E0", Offset = "0x2FE64E0", VA = "0x2FE64E0", Slot = "8")]
		protected override int GetAudioSampleTime()
		{
			return default(int);
		}

		[Token(Token = "0x6000A58")]
		[Address(RVA = "0x2FE64FC", Offset = "0x2FE64FC", VA = "0x2FE64FC", Slot = "9")]
		protected override int GetAudioStartSampleExtent()
		{
			return default(int);
		}

		[Token(Token = "0x6000A59")]
		[Address(RVA = "0x2FE6504", Offset = "0x2FE6504", VA = "0x2FE6504", Slot = "10")]
		protected override int GetAudioEndSampleExtent()
		{
			return default(int);
		}

		[Token(Token = "0x6000A5A")]
		[Address(RVA = "0x2FE6538", Offset = "0x2FE6538", VA = "0x2FE6538", Slot = "11")]
		protected override int GetDeltaTimeInSamples()
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000153")]
	public abstract class VisorBase
	{
		[Token(Token = "0x40008BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected Koreographer koreographerCom;

		[Token(Token = "0x40008C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected int sampleTime;

		[Token(Token = "0x40008C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		protected int sourceSampleTime;

		[Token(Token = "0x6000A5B")]
		protected abstract string GetAudioName();

		[Token(Token = "0x6000A5C")]
		protected abstract bool GetIsAudioPlaying();

		[Token(Token = "0x6000A5D")]
		protected abstract bool GetIsAudioLooping();

		[Token(Token = "0x6000A5E")]
		protected abstract bool GetDidAudioLoop();

		[Token(Token = "0x6000A5F")]
		protected abstract int GetAudioSampleTime();

		[Token(Token = "0x6000A60")]
		protected abstract int GetAudioStartSampleExtent();

		[Token(Token = "0x6000A61")]
		protected abstract int GetAudioEndSampleExtent();

		[Token(Token = "0x6000A62")]
		protected abstract int GetDeltaTimeInSamples();

		[Token(Token = "0x6000A63")]
		[Address(RVA = "0x2FE9BB0", Offset = "0x2FE9BB0", VA = "0x2FE9BB0", Slot = "12")]
		public virtual void Update()
		{
		}

		[Token(Token = "0x6000A64")]
		[Address(RVA = "0x2FE9E64", Offset = "0x2FE9E64", VA = "0x2FE9E64")]
		protected int GetTotalPlaybackSamples()
		{
			return default(int);
		}

		[Token(Token = "0x6000A65")]
		[Address(RVA = "0x2FE65C8", Offset = "0x2FE65C8", VA = "0x2FE65C8")]
		protected float GetRawFrameTime()
		{
			return default(float);
		}

		[Token(Token = "0x6000A66")]
		[Address(RVA = "0x2FE628C", Offset = "0x2FE628C", VA = "0x2FE628C")]
		protected VisorBase()
		{
		}
	}
}
namespace DebuggingEssentials
{
	[Token(Token = "0x2000154")]
	[AttributeAttribute(Name = "DefaultExecutionOrder", RVA = "0x15D54A0", Offset = "0x15D54A0")]
	public class HtmlDebug : MonoBehaviour
	{
		[Token(Token = "0x40008C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static HtmlDebug instance;

		[Token(Token = "0x40008C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Stopwatch timeSinceStartup;

		[Token(Token = "0x40008C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static float frameTime;

		[Token(Token = "0x40008C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public static int currentFrame;

		[Token(Token = "0x40008C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static int mainThreadId;

		[Token(Token = "0x40008C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DCA54", Offset = "0x15DCA54")]
		public bool deleteBuildLogs;

		[Token(Token = "0x40008C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int deleteBuildLogsAfterDays;

		[Token(Token = "0x40008C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DCA8C", Offset = "0x15DCA8C")]
		public bool openLogManually;

		[Token(Token = "0x40008CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DCAC4", Offset = "0x15DCAC4")]
		public bool normalLogOnlyFirstLineStackTrace;

		[Token(Token = "0x40008CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int titleFontSize;

		[Token(Token = "0x40008CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int frameFontSize;

		[Token(Token = "0x40008CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int logFontSize;

		[Token(Token = "0x40008CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int stackFontSize;

		[NonSerialized]
		[Token(Token = "0x40008CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string logPathIncludingFilename;

		[NonSerialized]
		[Token(Token = "0x40008D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string logPath;

		[Token(Token = "0x40008D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private FastList<Log> logsThread;

		[Token(Token = "0x40008D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private FastList<Log> logs;

		[Token(Token = "0x40008D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int lastFrame;

		[Token(Token = "0x40008D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private bool isLogEnabled;

		[Token(Token = "0x40008D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
		private bool isEditor;

		[Token(Token = "0x40008D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5E")]
		private bool isDebugBuild;

		[Token(Token = "0x40008D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private StackTraceLogType logStackTraceLogType;

		[Token(Token = "0x40008D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private StackTraceLogType assertStackTraceLogType;

		[Token(Token = "0x40008D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private StackTraceLogType warningStackTraceLogType;

		[Token(Token = "0x40008DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private StackTraceLogType errorStackTraceLogType;

		[Token(Token = "0x40008DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private StackTraceLogType exceptionStackTraceLogType;

		[Token(Token = "0x40008DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private string frameFontSizeString;

		[Token(Token = "0x40008DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string stackFontSizeString;

		[Token(Token = "0x40008DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private string logFontSizeString;

		[Token(Token = "0x40008DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private WaitCallback logCallBack;

		[Token(Token = "0x40008E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private StreamWriter sw;

		[Token(Token = "0x40008E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private bool isLogging;

		[Token(Token = "0x40008E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		private bool updateLogCallFromMainThread;

		[Token(Token = "0x40008E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA2")]
		private bool isQuitting;

		[Token(Token = "0x40008E4")]
		private const int skipFrames = 5;

		[Token(Token = "0x6000A67")]
		[Address(RVA = "0x21374C4", Offset = "0x21374C4", VA = "0x21374C4")]
		public static void ResetStatic()
		{
		}

		[Token(Token = "0x6000A68")]
		[Address(RVA = "0x2137558", Offset = "0x2137558", VA = "0x2137558")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A69")]
		[Address(RVA = "0x2137784", Offset = "0x2137784", VA = "0x2137784")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000A6A")]
		[Address(RVA = "0x2137910", Offset = "0x2137910", VA = "0x2137910")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6000A6B")]
		[Address(RVA = "0x2137884", Offset = "0x2137884", VA = "0x2137884")]
		private void CloseLog(string closeReason)
		{
		}

		[Token(Token = "0x6000A6C")]
		[Address(RVA = "0x2137E28", Offset = "0x2137E28", VA = "0x2137E28")]
		public static int GetThreadId()
		{
			return default(int);
		}

		[Token(Token = "0x6000A6D")]
		[Address(RVA = "0x2137EB8", Offset = "0x2137EB8", VA = "0x2137EB8")]
		private void DeleteBuildLogsAfterXDays(string logPath)
		{
		}

		[Token(Token = "0x6000A6E")]
		[Address(RVA = "0x213770C", Offset = "0x213770C", VA = "0x213770C")]
		public static void OpenLog(string logPathIncludingFileName)
		{
		}

		[Token(Token = "0x6000A6F")]
		[Address(RVA = "0x2138080", Offset = "0x2138080", VA = "0x2138080")]
		private void OpenLogInternal(string logPathIncludingFileName)
		{
		}

		[Token(Token = "0x6000A70")]
		[Address(RVA = "0x2137D44", Offset = "0x2137D44", VA = "0x2137D44")]
		private void CloseLog()
		{
		}

		[Token(Token = "0x6000A71")]
		[Address(RVA = "0x213870C", Offset = "0x213870C", VA = "0x213870C")]
		private bool UseStackTrace(LogType logType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A72")]
		[Address(RVA = "0x2138770", Offset = "0x2138770", VA = "0x2138770")]
		public void UpdateLogs()
		{
		}

		[Token(Token = "0x6000A73")]
		[Address(RVA = "0x2137B3C", Offset = "0x2137B3C", VA = "0x2137B3C")]
		private void WriteLogs(object callback)
		{
		}

		[Token(Token = "0x6000A74")]
		[Address(RVA = "0x2137968", Offset = "0x2137968", VA = "0x2137968")]
		private void UnityDebugLogThread(string logString, string stackTraceString, LogType logType)
		{
		}

		[Token(Token = "0x6000A75")]
		[Address(RVA = "0x21387B0", Offset = "0x21387B0", VA = "0x21387B0")]
		public void UnityDebugLog(string logString, string stackTraceString, LogType logType, bool isMainThread, int threadId = -1, [Optional] StackTrace stackTrace, EntryType2 entryType = EntryType2.Unity, bool closeLi = true)
		{
		}

		[Token(Token = "0x6000A76")]
		[Address(RVA = "0x2139684", Offset = "0x2139684", VA = "0x2139684")]
		public HtmlDebug()
		{
		}
	}
	[Token(Token = "0x2000155")]
	public struct Log
	{
		[Token(Token = "0x40008E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string logString;

		[Token(Token = "0x40008E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string stackTraceString;

		[Token(Token = "0x40008E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LogType logType;

		[Token(Token = "0x40008E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool isMainThread;

		[Token(Token = "0x40008E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int threadId;

		[Token(Token = "0x40008EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public StackTrace stackTrace;
	}
	[Token(Token = "0x2000156")]
	public class Benchmark
	{
		[Token(Token = "0x40008EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static FastCacheList<Benchmark> benchmarks;

		[Token(Token = "0x40008EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Stopwatch stopwatch;

		[Token(Token = "0x40008ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string text;

		[Token(Token = "0x40008EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float minMiliSeconds;

		[Token(Token = "0x6000A78")]
		[Address(RVA = "0x2130364", Offset = "0x2130364", VA = "0x2130364")]
		public static Benchmark Start(string text, float minMiliSeconds = -1f)
		{
			return null;
		}

		[Token(Token = "0x6000A79")]
		[Address(RVA = "0x2130440", Offset = "0x2130440", VA = "0x2130440")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000A7A")]
		[Address(RVA = "0x21306D4", Offset = "0x21306D4", VA = "0x21306D4")]
		public Benchmark()
		{
		}
	}
	[Token(Token = "0x2000157")]
	public class FastListBase
	{
		[Token(Token = "0x40008EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int maxElements;

		[Token(Token = "0x40008F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string maxListName;

		[Token(Token = "0x40008F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static FastListBase maxList;

		[Token(Token = "0x40008F2")]
		protected const int defaultCapacity = 4;

		[Token(Token = "0x40008F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int Count;

		[Token(Token = "0x40008F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		protected int _count;

		[Token(Token = "0x6000A7C")]
		public static void SetCapacity<T>(FastListBase list, ref T[] items, int capacity, int count)
		{
		}

		[Token(Token = "0x6000A7D")]
		[Address(RVA = "0x21348EC", Offset = "0x21348EC", VA = "0x21348EC")]
		public FastListBase()
		{
		}
	}
	[Token(Token = "0x2000158")]
	public class FastListBase<T> : FastListBase
	{
		[Token(Token = "0x40008F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T[] items;

		[Token(Token = "0x6000A7E")]
		protected virtual void DoubleCapacity()
		{
		}

		[Token(Token = "0x6000A7F")]
		public FastListBase()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000159")]
	public class FastList<T> : FastListBase<T>
	{
		[Token(Token = "0x6000A80")]
		public FastList()
		{
		}

		[Token(Token = "0x6000A81")]
		public FastList(bool reserve, int reserved)
		{
		}

		[Token(Token = "0x6000A82")]
		public FastList(int capacity)
		{
		}

		[Token(Token = "0x6000A83")]
		public FastList(FastList<T> list)
		{
		}

		[Token(Token = "0x6000A84")]
		public FastList(T[] items, bool copy = false)
		{
		}

		[Token(Token = "0x6000A85")]
		protected void SetCapacity(int capacity)
		{
		}

		[Token(Token = "0x6000A86")]
		public void SetCount(int count)
		{
		}

		[Token(Token = "0x6000A87")]
		public void EnsureCount(int count)
		{
		}

		[Token(Token = "0x6000A88")]
		public virtual void SetArray(T[] items)
		{
		}

		[Token(Token = "0x6000A89")]
		public int AddUnique(T item)
		{
			return default(int);
		}

		[Token(Token = "0x6000A8A")]
		public bool Contains(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A8B")]
		public int IndexOf(T item)
		{
			return default(int);
		}

		[Token(Token = "0x6000A8C")]
		public T GetIndex(T item)
		{
			return (T)null;
		}

		[Token(Token = "0x6000A8D")]
		public virtual int Add(T item)
		{
			return default(int);
		}

		[Token(Token = "0x6000A8E")]
		public virtual int AddThreadSafe(T item)
		{
			return default(int);
		}

		[Token(Token = "0x6000A8F")]
		public virtual void Add(T item, T item2)
		{
		}

		[Token(Token = "0x6000A90")]
		public virtual void Add(T item, T item2, T item3)
		{
		}

		[Token(Token = "0x6000A91")]
		public virtual void Add(T item, T item2, T item3, T item4)
		{
		}

		[Token(Token = "0x6000A92")]
		public virtual void Add(T item, T item2, T item3, T item4, T item5)
		{
		}

		[Token(Token = "0x6000A93")]
		public virtual void Insert(int index, T item)
		{
		}

		[Token(Token = "0x6000A94")]
		public virtual void AddRange(T[] arrayItems)
		{
		}

		[Token(Token = "0x6000A95")]
		public virtual void AddRange(T[] arrayItems, int startIndex, int length)
		{
		}

		[Token(Token = "0x6000A96")]
		public virtual void AddRange(FastList<T> list)
		{
		}

		[Token(Token = "0x6000A97")]
		public virtual void AddRange(List<T> list)
		{
		}

		[Token(Token = "0x6000A98")]
		public virtual int GrabListThreadSafe(FastList<T> threadList, bool fastClear = false)
		{
			return default(int);
		}

		[Token(Token = "0x6000A99")]
		public virtual void ChangeRange(int startIndex, T[] arrayItems)
		{
		}

		[Token(Token = "0x6000A9A")]
		public virtual bool Remove(T item, bool weakReference = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A9B")]
		public virtual void RemoveAt(int index)
		{
		}

		[Token(Token = "0x6000A9C")]
		public virtual void RemoveLast()
		{
		}

		[Token(Token = "0x6000A9D")]
		public virtual void RemoveRange(int index, int length)
		{
		}

		[Token(Token = "0x6000A9E")]
		public virtual T Dequeue()
		{
			return (T)null;
		}

		[Token(Token = "0x6000A9F")]
		public virtual T Dequeue(int index)
		{
			return (T)null;
		}

		[Token(Token = "0x6000AA0")]
		public virtual void Clear()
		{
		}

		[Token(Token = "0x6000AA1")]
		public virtual void ClearThreadSafe()
		{
		}

		[Token(Token = "0x6000AA2")]
		public virtual void ClearRange(int startIndex)
		{
		}

		[Token(Token = "0x6000AA3")]
		public virtual void FastClear()
		{
		}

		[Token(Token = "0x6000AA4")]
		public virtual void FastClear(int newCount)
		{
		}

		[Token(Token = "0x6000AA5")]
		public virtual T[] ToArray()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x200015A")]
	public class SortedFastList<T> : FastList<T>
	{
		[Token(Token = "0x6000AA6")]
		public SortedFastList()
		{
		}

		[Token(Token = "0x6000AA7")]
		public SortedFastList(int capacity)
		{
		}

		[Token(Token = "0x6000AA8")]
		public new void RemoveAt(int index)
		{
		}

		[Token(Token = "0x6000AA9")]
		public new void RemoveRange(int index, int endIndex)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200015B")]
	public class FastCacheList<T> : FastList<T> where T : new()
	{
		[Token(Token = "0x6000AAA")]
		public FastCacheList(int capacity)
		{
		}

		[Token(Token = "0x6000AAB")]
		public T GetItem()
		{
			return (T)null;
		}
	}
	[Token(Token = "0x200015C")]
	public class FastQueue<T> : FastListBase
	{
		[Token(Token = "0x40008F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected int head;

		[Token(Token = "0x40008F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected int tail;

		[Token(Token = "0x40008F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected T[] items;

		[Token(Token = "0x6000AAC")]
		public FastQueue(int capacity)
		{
		}

		[Token(Token = "0x6000AAD")]
		protected void DoubleCapacity()
		{
		}

		[Token(Token = "0x6000AAE")]
		public int ArrayLength()
		{
			return default(int);
		}

		[Token(Token = "0x6000AAF")]
		public virtual void Clear()
		{
		}

		[Token(Token = "0x6000AB0")]
		public virtual void FastClear()
		{
		}

		[Token(Token = "0x6000AB1")]
		public virtual void Enqueue(T item)
		{
		}

		[Token(Token = "0x6000AB2")]
		public void EnqueueRange(T[] items, int startIndex = 0, int count = -1)
		{
		}

		[Token(Token = "0x6000AB3")]
		public T Peek(int index)
		{
			return (T)null;
		}

		[Token(Token = "0x6000AB4")]
		public virtual T Dequeue()
		{
			return (T)null;
		}

		[Token(Token = "0x6000AB5")]
		public virtual void Dequeue(T item)
		{
		}

		[Token(Token = "0x6000AB6")]
		public void Report()
		{
		}
	}
	[Token(Token = "0x200015D")]
	public class FastIntQueue : FastQueue<int>
	{
		[Token(Token = "0x6000AB7")]
		[Address(RVA = "0x21345F4", Offset = "0x21345F4", VA = "0x21345F4")]
		public FastIntQueue(int capacity)
		{
		}

		[Token(Token = "0x6000AB8")]
		[Address(RVA = "0x2134654", Offset = "0x2134654", VA = "0x2134654")]
		public void EnqueueRange(int startIndex, int endIndex)
		{
		}

		[Token(Token = "0x6000AB9")]
		[Address(RVA = "0x21346A8", Offset = "0x21346A8", VA = "0x21346A8")]
		public void ClearAndEnqueueRange(int startIndex, int endIndex)
		{
		}

		[Token(Token = "0x6000ABA")]
		[Address(RVA = "0x213470C", Offset = "0x213470C", VA = "0x213470C", Slot = "8")]
		public override void Dequeue(int item)
		{
		}
	}
	[Token(Token = "0x200015E")]
	public enum CompareMode
	{
		[Token(Token = "0x40008FA")]
		Key,
		[Token(Token = "0x40008FB")]
		Value
	}
	[Token(Token = "0x200015F")]
	public struct ItemHolder<T, U> : IComparable<ItemHolder<T, U>> where T : IComparable<T> where U : IComparable<U>
	{
		[Token(Token = "0x40008FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static CompareMode compareMode;

		[Token(Token = "0x40008FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T key;

		[Token(Token = "0x40008FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public U value;

		[Token(Token = "0x6000ABB")]
		public ItemHolder(T key, U value)
		{
		}

		[Token(Token = "0x6000ABC")]
		public int CompareTo(ItemHolder<T, U> other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000160")]
	public class FastSortedDictionary<T, U> where T : IComparable<T> where U : IComparable<U>
	{
		[Token(Token = "0x40008FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Dictionary<T, U> lookup;

		[Token(Token = "0x4000900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public FastList<ItemHolder<T, U>> list;

		[Token(Token = "0x6000ABD")]
		public FastSortedDictionary(int capacity)
		{
		}

		[Token(Token = "0x6000ABE")]
		public void Add(T key, U value)
		{
		}

		[Token(Token = "0x6000ABF")]
		public void Sort(CompareMode compareMode)
		{
		}

		[Token(Token = "0x6000AC0")]
		public void Clear()
		{
		}
	}
	[Token(Token = "0x2000161")]
	public class FastSortedHashSet<T> where T : IComparable<T>
	{
		[Token(Token = "0x4000901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HashSet<T> lookup;

		[Token(Token = "0x4000902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public FastList<T> list;

		[Token(Token = "0x6000AC1")]
		public FastSortedHashSet(int capacity)
		{
		}

		[Token(Token = "0x6000AC2")]
		public void Add(T item)
		{
		}

		[Token(Token = "0x6000AC3")]
		public void Sort()
		{
		}

		[Token(Token = "0x6000AC4")]
		public void Clear()
		{
		}
	}
	[Token(Token = "0x2000162")]
	public class FastSortedHashSet<T, U> where U : IComparable<U>
	{
		[Token(Token = "0x4000903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HashSet<T> lookup;

		[Token(Token = "0x4000904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public FastList<U> list;

		[Token(Token = "0x6000AC5")]
		public FastSortedHashSet(int capacity)
		{
		}

		[Token(Token = "0x6000AC6")]
		public void Add(T lookupItem, U listItem)
		{
		}

		[Token(Token = "0x6000AC7")]
		public void Sort()
		{
		}

		[Token(Token = "0x6000AC8")]
		public void Clear()
		{
		}
	}
	[Token(Token = "0x2000163")]
	public class DrawEnum
	{
		[Token(Token = "0x4000905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool draw;

		[Token(Token = "0x4000906")]
		private const float heightPadding = 4f;

		[Token(Token = "0x4000907")]
		private const float addHeight = 2f;

		[Token(Token = "0x4000908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float boxAlpha;

		[Token(Token = "0x4000909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float backgroundAlpha;

		[Token(Token = "0x400090A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Enum enumField;

		[Token(Token = "0x400090B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GameObject go;

		[Token(Token = "0x400090C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private object obj;

		[Token(Token = "0x400090D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private MemberInfo member;

		[Token(Token = "0x400090E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GUISkin skin;

		[Token(Token = "0x400090F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Rect rect;

		[Token(Token = "0x4000910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private string[] names;

		[Token(Token = "0x6000AC9")]
		[Address(RVA = "0x2133720", Offset = "0x2133720", VA = "0x2133720")]
		public static void ResetStatic()
		{
		}

		[Token(Token = "0x6000ACA")]
		[Address(RVA = "0x2133770", Offset = "0x2133770", VA = "0x2133770")]
		public DrawEnum(GUISkin skin)
		{
		}

		[Token(Token = "0x6000ACB")]
		[Address(RVA = "0x21337A4", Offset = "0x21337A4", VA = "0x21337A4")]
		public void DrawButton(object obj, string fieldName)
		{
		}

		[Token(Token = "0x6000ACC")]
		[Address(RVA = "0x213394C", Offset = "0x213394C", VA = "0x213394C")]
		public void InitEnumWindow(object obj, MemberInfo member, Enum enumField, Vector2 pos)
		{
		}

		[Token(Token = "0x6000ACD")]
		[Address(RVA = "0x2133BC8", Offset = "0x2133BC8", VA = "0x2133BC8")]
		public void InitEnumWindow(GameObject go, Vector2 pos)
		{
		}

		[Token(Token = "0x6000ACE")]
		[Address(RVA = "0x2133E1C", Offset = "0x2133E1C", VA = "0x2133E1C")]
		public void Draw(float boxAlpha, float backgroundAlpha)
		{
		}

		[Token(Token = "0x6000ACF")]
		[Address(RVA = "0x2134008", Offset = "0x2134008", VA = "0x2134008")]
		private void DrawWindow(int windowId)
		{
		}
	}
	[Token(Token = "0x2000164")]
	public class EditField
	{
		[Token(Token = "0x4000911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MemberInfo parentMember;

		[Token(Token = "0x4000912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MemberInfo member;

		[Token(Token = "0x4000913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int arrayIndex;

		[Token(Token = "0x6000AD0")]
		[Address(RVA = "0x21344F8", Offset = "0x21344F8", VA = "0x21344F8")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000AD1")]
		[Address(RVA = "0x2134538", Offset = "0x2134538", VA = "0x2134538")]
		public bool IsThisEdit(MemberInfo parentMember, MemberInfo member, int arrayIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AD2")]
		[Address(RVA = "0x213459C", Offset = "0x213459C", VA = "0x213459C")]
		public void Set(MemberInfo parentMember, MemberInfo member, int arrayIndex = -1)
		{
		}

		[Token(Token = "0x6000AD3")]
		[Address(RVA = "0x21345E4", Offset = "0x21345E4", VA = "0x21345E4")]
		public EditField()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000165")]
	public class GUIChangeBool
	{
		[Token(Token = "0x4000914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static FastList<GUIChangeBool> applyList;

		[Token(Token = "0x4000915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private bool value;

		[NonSerialized]
		[Token(Token = "0x4000916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		private bool newValue;

		[NonSerialized]
		[Token(Token = "0x4000917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		private bool hasChanged;

		[Token(Token = "0x17000150")]
		public bool Value
		{
			[Token(Token = "0x6000AD7")]
			[Address(RVA = "0x2134E08", Offset = "0x2134E08", VA = "0x2134E08")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000AD8")]
			[Address(RVA = "0x2134E10", Offset = "0x2134E10", VA = "0x2134E10")]
			set
			{
			}
		}

		[Token(Token = "0x17000151")]
		public bool RealValue
		{
			[Token(Token = "0x6000AD9")]
			[Address(RVA = "0x2134EDC", Offset = "0x2134EDC", VA = "0x2134EDC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000AD4")]
		[Address(RVA = "0x2134D84", Offset = "0x2134D84", VA = "0x2134D84")]
		public GUIChangeBool()
		{
		}

		[Token(Token = "0x6000AD5")]
		[Address(RVA = "0x2132414", Offset = "0x2132414", VA = "0x2132414")]
		public GUIChangeBool(bool value)
		{
		}

		[Token(Token = "0x6000AD6")]
		[Address(RVA = "0x2134D8C", Offset = "0x2134D8C", VA = "0x2134D8C")]
		public static void ResetStatic()
		{
		}

		[Token(Token = "0x6000ADA")]
		[Address(RVA = "0x2134EF4", Offset = "0x2134EF4", VA = "0x2134EF4")]
		public void Update()
		{
		}

		[Token(Token = "0x6000ADB")]
		[Address(RVA = "0x2134F04", Offset = "0x2134F04", VA = "0x2134F04")]
		public static void ApplyUpdates()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000166")]
	public class BaseInputField
	{
		[Token(Token = "0x4000918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string text;

		[Token(Token = "0x6000ADD")]
		[Address(RVA = "0x2130358", Offset = "0x2130358", VA = "0x2130358", Slot = "4")]
		public virtual void TryParse(bool logError = true)
		{
		}

		[Token(Token = "0x6000ADE")]
		[Address(RVA = "0x213035C", Offset = "0x213035C", VA = "0x213035C")]
		public BaseInputField()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000167")]
	public class IntInputField : BaseInputField
	{
		[Token(Token = "0x4000919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int value;

		[Token(Token = "0x6000ADF")]
		[Address(RVA = "0x21397E0", Offset = "0x21397E0", VA = "0x21397E0")]
		public IntInputField(int value)
		{
		}

		[Token(Token = "0x6000AE0")]
		[Address(RVA = "0x2139834", Offset = "0x2139834", VA = "0x2139834", Slot = "4")]
		public override void TryParse(bool logError = true)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000168")]
	public class FloatInputField : BaseInputField
	{
		[Token(Token = "0x400091A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float value;

		[Token(Token = "0x6000AE1")]
		[Address(RVA = "0x21348F4", Offset = "0x21348F4", VA = "0x21348F4")]
		public FloatInputField(float value)
		{
		}

		[Token(Token = "0x6000AE2")]
		[Address(RVA = "0x2134950", Offset = "0x2134950", VA = "0x2134950", Slot = "4")]
		public override void TryParse(bool logError = true)
		{
		}

		[Token(Token = "0x6000AE3")]
		[Address(RVA = "0x2134D10", Offset = "0x2134D10", VA = "0x2134D10")]
		public void SetValueText(float value)
		{
		}

		[Token(Token = "0x6000AE4")]
		[Address(RVA = "0x2134D50", Offset = "0x2134D50", VA = "0x2134D50")]
		public void UpdateText()
		{
		}
	}
	[Token(Token = "0x2000169")]
	public struct ScrollViewCullData
	{
		[Token(Token = "0x400091B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float scrollWindowPosY;

		[Token(Token = "0x400091C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float culledSpaceY;

		[Token(Token = "0x400091D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float windowHeight;

		[Token(Token = "0x400091E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float rectStartScrollY;

		[Token(Token = "0x400091F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float updatedScrollViewY;

		[Token(Token = "0x6000AE5")]
		[Address(RVA = "0x1F1AABC", Offset = "0x1F1AABC", VA = "0x1F1AABC")]
		public void Start(WindowSettings window)
		{
		}

		[Token(Token = "0x6000AE6")]
		[Address(RVA = "0x1F1AB10", Offset = "0x1F1AB10", VA = "0x1F1AB10")]
		public void End()
		{
		}
	}
	[Token(Token = "0x200016A")]
	public class ScrollViewCullDrawOnce
	{
		[Token(Token = "0x4000920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool active;

		[Token(Token = "0x4000921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool recalc;

		[Token(Token = "0x4000922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private FastList<float> elements1;

		[Token(Token = "0x4000923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FastList<float> elements2;

		[Token(Token = "0x4000924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector2 scrollView;

		[Token(Token = "0x4000925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool eventLayout;

		[Token(Token = "0x4000926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool eventRepaint;

		[Token(Token = "0x4000927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool hasCalc;

		[Token(Token = "0x4000928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
		private bool calcHeights;

		[Token(Token = "0x4000929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int startElementCull;

		[Token(Token = "0x400092A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float spaceEnd;

		[Token(Token = "0x400092B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float scrollViewStartHeight;

		[Token(Token = "0x400092C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float scrollViewEndHeight;

		[Token(Token = "0x6000AE7")]
		[Address(RVA = "0x1F1AB28", Offset = "0x1F1AB28", VA = "0x1F1AB28")]
		public void ResetAndRecalc()
		{
		}

		[Token(Token = "0x6000AE8")]
		[Address(RVA = "0x1F1AB38", Offset = "0x1F1AB38", VA = "0x1F1AB38")]
		public void BeginScrollView(float heightOffset = 0f)
		{
		}

		[Token(Token = "0x6000AE9")]
		[Address(RVA = "0x1F1AE0C", Offset = "0x1F1AE0C", VA = "0x1F1AE0C")]
		public void EndScrollView()
		{
		}

		[Token(Token = "0x6000AEA")]
		[Address(RVA = "0x1F1AF2C", Offset = "0x1F1AF2C", VA = "0x1F1AF2C")]
		public bool StartCull()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AEB")]
		[Address(RVA = "0x1F1B000", Offset = "0x1F1B000", VA = "0x1F1B000")]
		public void EndCull()
		{
		}

		[Token(Token = "0x6000AEC")]
		[Address(RVA = "0x1F1B0D0", Offset = "0x1F1B0D0", VA = "0x1F1B0D0")]
		public ScrollViewCullDrawOnce()
		{
		}
	}
	[Token(Token = "0x200016B")]
	public enum DrawResult
	{
		[Token(Token = "0x400092E")]
		DontDraw,
		[Token(Token = "0x400092F")]
		Draw,
		[Token(Token = "0x4000930")]
		DrawHeader,
		[Token(Token = "0x4000931")]
		DrawHeaderAndRemoveLastHeader
	}
	[Token(Token = "0x200016C")]
	public class CullGroup
	{
		[Token(Token = "0x4000932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static FastList<CullList> cullLists;

		[Token(Token = "0x4000933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CullList cullList;

		[Token(Token = "0x4000934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private double startHeight;

		[Token(Token = "0x6000AED")]
		[Address(RVA = "0x2131BA8", Offset = "0x2131BA8", VA = "0x2131BA8")]
		public static void ResetStatic()
		{
		}

		[Token(Token = "0x6000AEE")]
		[Address(RVA = "0x2131C24", Offset = "0x2131C24", VA = "0x2131C24")]
		public CullGroup(int capacity)
		{
		}

		[Token(Token = "0x6000AEF")]
		[Address(RVA = "0x2131D64", Offset = "0x2131D64", VA = "0x2131D64")]
		public void CalcDraw(bool reset, FastList<CullList> _cullLists)
		{
		}
	}
	[Token(Token = "0x200016D")]
	public class CullList
	{
		[Token(Token = "0x4000935")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SortedFastList<CullItem> cullItems;

		[Token(Token = "0x4000936")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int startIndex;

		[Token(Token = "0x4000937")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int endIndex;

		[Token(Token = "0x4000938")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int currentCalcCullItem;

		[Token(Token = "0x4000939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GUIChangeBool show;

		[Token(Token = "0x400093A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float tStamp;

		[Token(Token = "0x400093B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public DrawResult lastDrawResult;

		[Token(Token = "0x400093C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int lastAddedIndex;

		[Token(Token = "0x6000AF1")]
		[Address(RVA = "0x2131CA4", Offset = "0x2131CA4", VA = "0x2131CA4")]
		public CullList(int capacity)
		{
		}

		[Token(Token = "0x6000AF2")]
		[Address(RVA = "0x21320D8", Offset = "0x21320D8", VA = "0x21320D8")]
		public bool Draw(CullList currentCullItems, ref double startHeight)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AF3")]
		[Address(RVA = "0x2132448", Offset = "0x2132448", VA = "0x2132448")]
		public void Cull(Double2 heights)
		{
		}
	}
	[Token(Token = "0x200016E")]
	public class CullItem : IComparable<double>
	{
		[Token(Token = "0x400093D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool isHeader;

		[Token(Token = "0x400093E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int id;

		[Token(Token = "0x400093F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public double startHeight;

		[Token(Token = "0x4000940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public double endHeight;

		[Token(Token = "0x6000AF4")]
		[Address(RVA = "0x213236C", Offset = "0x213236C", VA = "0x213236C")]
		public CullItem(int id)
		{
		}

		[Token(Token = "0x6000AF5")]
		[Address(RVA = "0x2132398", Offset = "0x2132398", VA = "0x2132398")]
		public void Draw(ref double startHeight)
		{
		}

		[Token(Token = "0x6000AF6")]
		[Address(RVA = "0x21323E8", Offset = "0x21323E8", VA = "0x21323E8", Slot = "4")]
		public int CompareTo(double compareValue)
		{
			return default(int);
		}

		[Token(Token = "0x6000AF7")]
		[Address(RVA = "0x2132404", Offset = "0x2132404", VA = "0x2132404", Slot = "5")]
		public virtual DrawResult DoDraw()
		{
			return default(DrawResult);
		}

		[Token(Token = "0x6000AF8")]
		[Address(RVA = "0x213240C", Offset = "0x213240C", VA = "0x213240C", Slot = "6")]
		public virtual float CalcHeight()
		{
			return default(float);
		}
	}
	[Token(Token = "0x200016F")]
	public struct Double2
	{
		[Token(Token = "0x4000941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double x;

		[Token(Token = "0x4000942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public double y;

		[Token(Token = "0x6000AF9")]
		[Address(RVA = "0x2133718", Offset = "0x2133718", VA = "0x2133718")]
		public Double2(double x, double y)
		{
		}
	}
	[Token(Token = "0x2000170")]
	public static class GraphicsHelper
	{
		[Token(Token = "0x6000AFA")]
		[Address(RVA = "0x2135090", Offset = "0x2135090", VA = "0x2135090")]
		public static void Dispose(ref RenderTexture rt)
		{
		}

		[Token(Token = "0x6000AFB")]
		[Address(RVA = "0x213519C", Offset = "0x213519C", VA = "0x213519C")]
		public static void Dispose(ref RenderTexture[] rts)
		{
		}

		[Token(Token = "0x6000AFC")]
		[Address(RVA = "0x2135210", Offset = "0x2135210", VA = "0x2135210")]
		public static void Dispose(ref Texture2D tex)
		{
		}

		[Token(Token = "0x6000AFD")]
		[Address(RVA = "0x2135308", Offset = "0x2135308", VA = "0x2135308")]
		public static void Dispose(ref Texture3D tex)
		{
		}

		[Token(Token = "0x6000AFE")]
		[Address(RVA = "0x2135400", Offset = "0x2135400", VA = "0x2135400")]
		public static void Dispose(ref Texture2D[] textures)
		{
		}

		[Token(Token = "0x6000AFF")]
		[Address(RVA = "0x2135474", Offset = "0x2135474", VA = "0x2135474")]
		public static void DisposeLightmaps()
		{
		}

		[Token(Token = "0x6000B00")]
		[Address(RVA = "0x2135480", Offset = "0x2135480", VA = "0x2135480")]
		public static void Dispose(ref ComputeBuffer computeBuffer)
		{
		}

		[Token(Token = "0x6000B01")]
		[Address(RVA = "0x21354C4", Offset = "0x21354C4", VA = "0x21354C4")]
		public static void Dispose(ref Mesh mesh)
		{
		}
	}
	[Token(Token = "0x2000171")]
	public static class Helper
	{
		[Token(Token = "0x4000943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Color colCommandResultFailed;

		[Token(Token = "0x4000944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static Color colCommandResult;

		[Token(Token = "0x4000945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static Vector2 lastMousePos;

		[Token(Token = "0x4000946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static GUIContent guiContent;

		[Token(Token = "0x4000947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static MethodInfo findObjectFromInstanceIdMethod;

		[Token(Token = "0x6000B02")]
		[Address(RVA = "0x21355BC", Offset = "0x21355BC", VA = "0x21355BC")]
		public static string GetConsoleLogPath()
		{
			return null;
		}

		[Token(Token = "0x6000B03")]
		[Address(RVA = "0x21358EC", Offset = "0x21358EC", VA = "0x21358EC")]
		public static string GetApplicationInfo()
		{
			return null;
		}

		[Token(Token = "0x6000B04")]
		[Address(RVA = "0x2131ACC", Offset = "0x2131ACC", VA = "0x2131ACC")]
		public static GUIContent GetGUIContent(string text, [Optional] Texture image, string tooltip = "")
		{
			return null;
		}

		[Token(Token = "0x6000B05")]
		[Address(RVA = "0x2135B6C", Offset = "0x2135B6C", VA = "0x2135B6C")]
		public static GUIContent GetGUIContent([Optional] Texture image, string tooltip = "")
		{
			return null;
		}

		[Token(Token = "0x6000B06")]
		[Address(RVA = "0x2135C4C", Offset = "0x2135C4C", VA = "0x2135C4C")]
		public static GUIContent GetGUIContent(string text, string tooltip)
		{
			return null;
		}

		[Token(Token = "0x6000B07")]
		[Address(RVA = "0x2135D1C", Offset = "0x2135D1C", VA = "0x2135D1C")]
		public static GUIContent GetGUIContent(Texture image)
		{
			return null;
		}

		[Token(Token = "0x6000B08")]
		[Address(RVA = "0x2135DF4", Offset = "0x2135DF4", VA = "0x2135DF4")]
		public static float FastFrac(float v)
		{
			return default(float);
		}

		[Token(Token = "0x6000B09")]
		[Address(RVA = "0x2135E20", Offset = "0x2135E20", VA = "0x2135E20")]
		public static int Repeat(int v, int count)
		{
			return default(int);
		}

		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0x2135E40", Offset = "0x2135E40", VA = "0x2135E40")]
		public static string ToTimeFormat(float time)
		{
			return null;
		}

		[Token(Token = "0x6000B0B")]
		[Address(RVA = "0x21361B4", Offset = "0x21361B4", VA = "0x21361B4")]
		public static int CalcStringLines(string text)
		{
			return default(int);
		}

		[Token(Token = "0x6000B0C")]
		[Address(RVA = "0x213622C", Offset = "0x213622C", VA = "0x213622C")]
		public static Color AnimateColor(Color col, float speed = 1f)
		{
			return default(Color);
		}

		[Token(Token = "0x6000B0D")]
		[Address(RVA = "0x2136318", Offset = "0x2136318", VA = "0x2136318")]
		public static void DrawWindow(int windowId, WindowSettings window, GUI.WindowFunction func)
		{
		}

		[Token(Token = "0x6000B0E")]
		[Address(RVA = "0x21364B4", Offset = "0x21364B4", VA = "0x21364B4")]
		public static bool Drag(WindowSettings window, WindowSettings inspectorWindow, WindowSettings hierarchyWindow, bool titleDrag, bool onlyRightCorner = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B0F")]
		[Address(RVA = "0x2136A5C", Offset = "0x2136A5C", VA = "0x2136A5C")]
		public static bool DrawShowButton(SO_BaseWindow windowData, GUIContent content, GUIChangeBool show, Color color, float width = -1f, bool onlyActivate = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B10")]
		[Address(RVA = "0x2136DD0", Offset = "0x2136DD0", VA = "0x2136DD0")]
		public static bool DrawButton(GUIContent guiContent, GUIStyle style, params GUILayoutOption[] options)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B11")]
		[Address(RVA = "0x2136DB4", Offset = "0x2136DB4", VA = "0x2136DB4")]
		public static Color GetColor(SO_BaseWindow windowData, Color color)
		{
			return default(Color);
		}

		[Token(Token = "0x6000B12")]
		[Address(RVA = "0x2137034", Offset = "0x2137034", VA = "0x2137034")]
		public static bool IsCulled(ref ScrollViewCullData cull, float height = 25f)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B13")]
		public static int BinarySearch<T, U>(T[] array, int length, U value) where T : IComparable<U>
		{
			return default(int);
		}

		[Token(Token = "0x6000B14")]
		[Address(RVA = "0x21370B0", Offset = "0x21370B0", VA = "0x21370B0")]
		public static bool GetSpecialKeys()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B15")]
		[Address(RVA = "0x2137124", Offset = "0x2137124", VA = "0x2137124")]
		public static bool GetSpecialKeys(Event currentEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B16")]
		[Address(RVA = "0x213717C", Offset = "0x213717C", VA = "0x213717C")]
		public static bool IsPrefab(UnityEngine.Object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B17")]
		[Address(RVA = "0x2137184", Offset = "0x2137184", VA = "0x2137184")]
		public static UnityEngine.Object FindObjectFromInstanceID(int id)
		{
			return null;
		}
	}
	[Token(Token = "0x2000172")]
	public static class Parser
	{
		[Token(Token = "0x6000B19")]
		[Address(RVA = "0x213CF1C", Offset = "0x213CF1C", VA = "0x213CF1C")]
		public static bool TryParse(Type t, FastQueue<string> paramQueue, out object result)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B1A")]
		[Address(RVA = "0x213D3B0", Offset = "0x213D3B0", VA = "0x213D3B0")]
		private static bool ChangeType(Type t, FastQueue<string> paramQueue, out object result)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B1B")]
		[Address(RVA = "0x2134A20", Offset = "0x2134A20", VA = "0x2134A20")]
		public static bool ChangeType(Type t, string value, out object result, bool logError = true)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000173")]
	public enum EntryType2
	{
		[Token(Token = "0x4000949")]
		Unity,
		[Token(Token = "0x400094A")]
		Command,
		[Token(Token = "0x400094B")]
		CommandResult,
		[Token(Token = "0x400094C")]
		CommandFault
	}
	[Token(Token = "0x2000174")]
	public enum EntryType
	{
		[Token(Token = "0x400094E")]
		Console,
		[Token(Token = "0x400094F")]
		Unity,
		[Token(Token = "0x4000950")]
		Frame,
		[Token(Token = "0x4000951")]
		Command,
		[Token(Token = "0x4000952")]
		CommandResult
	}
	[Token(Token = "0x2000175")]
	public enum Flag
	{
		[Token(Token = "0x4000954")]
		Log = 1,
		[Token(Token = "0x4000955")]
		Warning = 2,
		[Token(Token = "0x4000956")]
		Error = 4,
		[Token(Token = "0x4000957")]
		Exception = 8,
		[Token(Token = "0x4000958")]
		Command = 0x10
	}
	[Token(Token = "0x2000176")]
	public class LogEntry : CullItem
	{
		[Token(Token = "0x4000959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string search;

		[Token(Token = "0x400095A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static bool ignoreCasesInSearch;

		[Token(Token = "0x400095B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		public static bool showCommandLogs;

		[Token(Token = "0x400095C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
		public static bool showUnityLogs;

		[Token(Token = "0x400095D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB")]
		public static bool showWarningLogs;

		[Token(Token = "0x400095E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static bool showErrorLogs;

		[Token(Token = "0x400095F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
		public static bool showExceptionLogs;

		[Token(Token = "0x4000960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
		public static bool showStack;

		[Token(Token = "0x4000961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static int currentId;

		[Token(Token = "0x4000962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static LogEntry lastLog;

		[Token(Token = "0x4000963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string logString;

		[Token(Token = "0x4000964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string threadString;

		[Token(Token = "0x4000965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string[] stackLines;

		[Token(Token = "0x4000966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int stackLineCount;

		[Token(Token = "0x4000967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public LogType logType;

		[Token(Token = "0x4000968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public EntryType entryType;

		[Token(Token = "0x4000969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public byte flag;

		[Token(Token = "0x400096A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Color color;

		[Token(Token = "0x400096B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int fontSize;

		[Token(Token = "0x400096C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public FontStyle fontStyle;

		[Token(Token = "0x6000B1C")]
		[Address(RVA = "0x213992C", Offset = "0x213992C", VA = "0x213992C")]
		public static void ResetStatic()
		{
		}

		[Token(Token = "0x6000B1D")]
		[Address(RVA = "0x2139A00", Offset = "0x2139A00", VA = "0x2139A00")]
		public LogEntry(string logString, [Optional] string[] stackLines, LogType logType = LogType.Log, EntryType entryType = EntryType.Unity, [Optional] Color color, int fontSize = 12, FontStyle fontStyle = FontStyle.Normal, int threadId = -1)
		{
		}

		[Token(Token = "0x6000B1E")]
		[Address(RVA = "0x2139C98", Offset = "0x2139C98", VA = "0x2139C98")]
		public LogEntry(string logString, Color color, int fontSize, FontStyle fontStyle, int threadId = -1)
		{
		}

		[Token(Token = "0x6000B1F")]
		[Address(RVA = "0x2139B90", Offset = "0x2139B90", VA = "0x2139B90")]
		private void CheckThread(int threadId)
		{
		}

		[Token(Token = "0x6000B20")]
		[Address(RVA = "0x2139DC0", Offset = "0x2139DC0", VA = "0x2139DC0", Slot = "5")]
		public override DrawResult DoDraw()
		{
			return default(DrawResult);
		}

		[Token(Token = "0x6000B21")]
		[Address(RVA = "0x213A0E8", Offset = "0x213A0E8", VA = "0x213A0E8", Slot = "6")]
		public override float CalcHeight()
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000177")]
	public delegate void SetActiveMethod(bool active);
	[Token(Token = "0x2000178")]
	[AttributeAttribute(Name = "DefaultExecutionOrder", RVA = "0x15D54B8", Offset = "0x15D54B8")]
	[AttributeAttribute(Name = "ConsoleAlias", RVA = "0x15D54B8", Offset = "0x15D54B8")]
	public class RuntimeConsole : MonoBehaviour
	{
		[Token(Token = "0x2000271")]
		public delegate void RemoteCommand(string command);

		[Token(Token = "0x2000272")]
		public class StringDictionarySorted
		{
			[Token(Token = "0x4000FF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Dictionary<string, CommandData> lookup;

			[Token(Token = "0x4000FFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string[] names;

			[Token(Token = "0x6000ED8")]
			[Address(RVA = "0x25320F8", Offset = "0x25320F8", VA = "0x25320F8")]
			public void Sort()
			{
			}

			[Token(Token = "0x6000ED9")]
			[Address(RVA = "0x25321C0", Offset = "0x25321C0", VA = "0x25321C0")]
			public void Clear()
			{
			}

			[Token(Token = "0x6000EDA")]
			[Address(RVA = "0x2532228", Offset = "0x2532228", VA = "0x2532228")]
			public StringDictionarySorted()
			{
			}
		}

		[Token(Token = "0x2000273")]
		public enum MemberType
		{
			[Token(Token = "0x4000FFC")]
			Method,
			[Token(Token = "0x4000FFD")]
			Property,
			[Token(Token = "0x4000FFE")]
			Field,
			[Token(Token = "0x4000FFF")]
			Delegate
		}

		[Token(Token = "0x2000274")]
		public struct CommandData
		{
			[Token(Token = "0x4001000")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static CommandData empty;

			[Token(Token = "0x4001001")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public ConsoleCommand consoleCommand;

			[Token(Token = "0x4001002")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public object obj;

			[Token(Token = "0x4001003")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool isStatic;

			[Token(Token = "0x4001004")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string syntax;

			[Token(Token = "0x4001005")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MemberType memberType;

			[Token(Token = "0x4001006")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MemberInfo member;

			[Token(Token = "0x4001007")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public ParameterInfo[] paramInfos;

			[Token(Token = "0x4001008")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private object[] args;

			[Token(Token = "0x6000EDB")]
			[Address(RVA = "0x252F254", Offset = "0x252F254", VA = "0x252F254")]
			public CommandData(ConsoleCommand consoleCommand, object obj, string syntax, MemberType memberType, MemberInfo member, ParameterInfo[] paramInfos, bool isStatic)
			{
			}

			[Token(Token = "0x6000EDC")]
			[Address(RVA = "0x252F37C", Offset = "0x252F37C", VA = "0x252F37C")]
			public object GetValue()
			{
				return null;
			}

			[Token(Token = "0x6000EDD")]
			[Address(RVA = "0x252F770", Offset = "0x252F770", VA = "0x252F770")]
			public bool IsRegistered()
			{
				return default(bool);
			}

			[Token(Token = "0x6000EDE")]
			[Address(RVA = "0x252F878", Offset = "0x252F878", VA = "0x252F878")]
			public int GetInstanceCount()
			{
				return default(int);
			}

			[Token(Token = "0x6000EDF")]
			[Address(RVA = "0x252F550", Offset = "0x252F550", VA = "0x252F550")]
			public int GetInstanceWhenOnlyOne(out object instance)
			{
				return default(int);
			}

			[Token(Token = "0x6000EE0")]
			[Address(RVA = "0x252F9AC", Offset = "0x252F9AC", VA = "0x252F9AC")]
			public void Execute(FastQueue<string> arguments, string argumentString)
			{
			}

			[Token(Token = "0x6000EE1")]
			[Address(RVA = "0x252F9DC", Offset = "0x252F9DC", VA = "0x252F9DC")]
			private void ExecuteMethodOrDelegate(FastQueue<string> arguments, string argumentString)
			{
			}

			[Token(Token = "0x6000EE2")]
			[Address(RVA = "0x2530CA0", Offset = "0x2530CA0", VA = "0x2530CA0")]
			private void ExecuteDelegateMethod(MemberInfo member, object obj, object[] args, string argumentString)
			{
			}

			[Token(Token = "0x6000EE3")]
			[Address(RVA = "0x2530874", Offset = "0x2530874", VA = "0x2530874")]
			private void ExecuteMethod(MemberInfo member, MethodInfo method, object obj, object[] args, string argumentString)
			{
			}

			[Token(Token = "0x6000EE4")]
			[Address(RVA = "0x2530048", Offset = "0x2530048", VA = "0x2530048")]
			private void ExecuteField(FastQueue<string> arguments, string argumentString)
			{
			}

			[Token(Token = "0x6000EE5")]
			[Address(RVA = "0x2530E50", Offset = "0x2530E50", VA = "0x2530E50")]
			private void LogValue(FieldInfo field, object obj)
			{
			}

			[Token(Token = "0x6000EE6")]
			[Address(RVA = "0x25311A8", Offset = "0x25311A8", VA = "0x25311A8")]
			private void SetField(FieldInfo field, object obj, object arg)
			{
			}

			[Token(Token = "0x6000EE7")]
			[Address(RVA = "0x25303FC", Offset = "0x25303FC", VA = "0x25303FC")]
			private void ExecuteProperty(FastQueue<string> arguments, string argumentString)
			{
			}

			[Token(Token = "0x6000EE8")]
			[Address(RVA = "0x2531528", Offset = "0x2531528", VA = "0x2531528")]
			private void LogValue(PropertyInfo prop, object obj)
			{
			}

			[Token(Token = "0x6000EE9")]
			[Address(RVA = "0x2531884", Offset = "0x2531884", VA = "0x2531884")]
			private void SetProperty(PropertyInfo prop, object obj, object arg)
			{
			}

			[Token(Token = "0x6000EEA")]
			[Address(RVA = "0x2531C48", Offset = "0x2531C48", VA = "0x2531C48")]
			private bool CheckParameterCount(int required, int count)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000275")]
		public enum AccessMode
		{
			[Token(Token = "0x400100A")]
			EnabledOnConsoleCommand,
			[Token(Token = "0x400100B")]
			Enabled,
			[Token(Token = "0x400100C")]
			Disabled
		}

		[Token(Token = "0x2000276")]
		public struct AutoComplete
		{
			[Token(Token = "0x400100D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string command;

			[Token(Token = "0x400100E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public CommandData commandData;

			[Token(Token = "0x6000EEB")]
			[Address(RVA = "0x252F20C", Offset = "0x252F20C", VA = "0x252F20C")]
			public AutoComplete(string command, CommandData commandData)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000277")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D57D4", Offset = "0x15D57D4")]
		private sealed class <>c
		{
			[Token(Token = "0x400100F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4001010")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Predicate<object> <>9__69_0;

			[Token(Token = "0x6000EED")]
			[Address(RVA = "0x252F0D0", Offset = "0x252F0D0", VA = "0x252F0D0")]
			public <>c()
			{
			}

			[Token(Token = "0x6000EEE")]
			[Address(RVA = "0x252F0D8", Offset = "0x252F0D8", VA = "0x252F0D8")]
			internal bool <CheckDestroyedMonoBehaviours>b__69_0(object s)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x400096F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static RuntimeConsole instance;

		[Token(Token = "0x4000970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static AccessLevel accessLevel;

		[Token(Token = "0x4000971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public static bool show;

		[Token(Token = "0x4000972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static Dictionary<Type, HashSet<object>> registeredInstancesLookup;

		[Token(Token = "0x4000973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static StringDictionarySorted commandsTable;

		[Token(Token = "0x4000974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static FastList<AutoComplete> autoCompleteList;

		[Token(Token = "0x4000975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static FastQueue<string> inputCommands;

		[Token(Token = "0x4000976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static FastList<LogEntry> threadLogEntries;

		[Token(Token = "0x4000977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static FastList<LogEntry> logEntries;

		[Token(Token = "0x4000978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private SortedFastList<string> commands;

		[Token(Token = "0x4000979")]
		private const int logSize = 8192;

		[Token(Token = "0x400097A")]
		private const int commandLogs = 0;

		[Token(Token = "0x400097B")]
		private const int frameLogs = 1;

		[Token(Token = "0x400097C")]
		private const int unityLogs = 2;

		[Token(Token = "0x400097D")]
		private const int warningLogs = 3;

		[Token(Token = "0x400097E")]
		private const int errorLogs = 4;

		[Token(Token = "0x400097F")]
		private const int exceptionLogs = 5;

		[Token(Token = "0x4000980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private static bool setFocus;

		[Token(Token = "0x4000981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private static int lastFrame;

		[Token(Token = "0x4000982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private static LogEntry lastFrameEntry;

		[Token(Token = "0x4000983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private WindowSettings consoleWindow;

		[Token(Token = "0x4000984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int commandIndex;

		[Token(Token = "0x4000985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int moveInputCursor;

		[Token(Token = "0x4000986")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int autoCompleteIndex;

		[Token(Token = "0x4000987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string inputCommand;

		[Token(Token = "0x4000988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GUIChangeBool _showStack;

		[Token(Token = "0x4000989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private GUIChangeBool showUnityLogs;

		[Token(Token = "0x400098A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GUIChangeBool showLastLog;

		[Token(Token = "0x400098B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector2 autoCompleteScrollView;

		[Token(Token = "0x400098C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Double2 scrollView;

		[Token(Token = "0x400098D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Double2 scrollViewHeights;

		[Token(Token = "0x400098E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private CullGroup cullGroup;

		[Token(Token = "0x400098F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private FastList<CullList> cullLists;

		[Token(Token = "0x4000990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private static CullList[] logs;

		[Token(Token = "0x4000991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool calcDraw;

		[Token(Token = "0x4000992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		private bool isEnabled;

		[Token(Token = "0x4000993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private int oldAutoCompleteCount;

		[Token(Token = "0x4000994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool updateAutoCompleteScrollView;

		[Token(Token = "0x4000995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		private bool isDebugBuild;

		[Token(Token = "0x4000996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9A")]
		public bool showConsoleOnStart;

		[Token(Token = "0x4000997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9B")]
		[AttributeAttribute(Name = "ConsoleCommand", RVA = "0x15DCB2C", Offset = "0x15DCB2C")]
		public bool showConsoleOnWarning;

		[Token(Token = "0x4000998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[AttributeAttribute(Name = "ConsoleCommand", RVA = "0x15DCB40", Offset = "0x15DCB40")]
		public bool showConsoleOnError;

		[Token(Token = "0x4000999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9D")]
		[AttributeAttribute(Name = "ConsoleCommand", RVA = "0x15DCB54", Offset = "0x15DCB54")]
		public bool showConsoleOnException;

		[Token(Token = "0x400099A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9E")]
		[AttributeAttribute(Name = "ConsoleCommand", RVA = "0x15DCB68", Offset = "0x15DCB68")]
		public bool disableUnityDevelopmentConsole;

		[Token(Token = "0x400099B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public KeyCode showToggleKey;

		[Token(Token = "0x400099C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DCB7C", Offset = "0x15DCB7C")]
		[AttributeAttribute(Name = "ConsoleCommand", RVA = "0x15DCB7C", Offset = "0x15DCB7C")]
		public bool ignoreCasesInCommands;

		[Token(Token = "0x400099D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA5")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DCBCC", Offset = "0x15DCBCC")]
		[AttributeAttribute(Name = "ConsoleCommand", RVA = "0x15DCBCC", Offset = "0x15DCBCC")]
		public bool ignoreCasesInAutoCompleteInput;

		[Token(Token = "0x400099E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public AccessMode adminModeInBuild;

		[Token(Token = "0x400099F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public string adminModeConsoleCommand;

		[Token(Token = "0x40009A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public AccessMode specialModeInBuild;

		[Token(Token = "0x40009A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public string specialModeConsoleCommand;

		[Token(Token = "0x40009A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x15DCC1C", Offset = "0x15DCC1C")]
		public bool testOnlyFreeConsoleCommands;

		[Token(Token = "0x40009A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCA")]
		public char searchCommandPrefix;

		[Token(Token = "0x40009A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[AttributeAttribute(Name = "ConsoleCommand", RVA = "0x15DCC54", Offset = "0x15DCC54")]
		public bool ignoreCasesInSearch;

		[Token(Token = "0x40009A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCE")]
		public char executeOnAllPrefix;

		[Token(Token = "0x40009A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public char executeOnlyOnRemotePrefix;

		[Token(Token = "0x40009A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public int titleFontSize;

		[Token(Token = "0x40009A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public int frameFontSize;

		[Token(Token = "0x40009A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public int logFontSize;

		[Token(Token = "0x40009AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public int stackFontSize;

		[Token(Token = "0x40009AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public SO_ConsoleWindow windowData;

		[Token(Token = "0x40009AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Color selectColor;

		[Token(Token = "0x40009AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Color backgroundColor;

		[Token(Token = "0x40009AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Rect rectAutoComplete;

		[Token(Token = "0x40009AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Rect rectScroll;

		[Token(Token = "0x40009B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private string lastAutoCompleteCommand;

		[Token(Token = "0x40009B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private double scrollViewEndHeight;

		[Token(Token = "0x40009B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private bool drawLogsScrollBar;

		[Token(Token = "0x14000009")]
		public static event RemoteCommand onRemoteCommand
		{
			[Token(Token = "0x6000B27")]
			[Address(RVA = "0x213D698", Offset = "0x213D698", VA = "0x213D698")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E54C4", Offset = "0x15E54C4")]
			add
			{
			}
			[Token(Token = "0x6000B28")]
			[Address(RVA = "0x213D784", Offset = "0x213D784", VA = "0x213D784")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E54D4", Offset = "0x15E54D4")]
			remove
			{
			}
		}

		[Token(Token = "0x1400000A")]
		public static event SetActiveMethod onSetActive
		{
			[Token(Token = "0x6000B29")]
			[Address(RVA = "0x213D870", Offset = "0x213D870", VA = "0x213D870")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E54E4", Offset = "0x15E54E4")]
			add
			{
			}
			[Token(Token = "0x6000B2A")]
			[Address(RVA = "0x213D960", Offset = "0x213D960", VA = "0x213D960")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E54F4", Offset = "0x15E54F4")]
			remove
			{
			}
		}

		[Token(Token = "0x6000B2B")]
		[Address(RVA = "0x213DA50", Offset = "0x213DA50", VA = "0x213DA50")]
		private void ResetStatic()
		{
		}

		[Token(Token = "0x6000B2C")]
		[Address(RVA = "0x213DBA4", Offset = "0x213DBA4", VA = "0x213DBA4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B2D")]
		[Address(RVA = "0x213E8A4", Offset = "0x213E8A4", VA = "0x213E8A4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000B2E")]
		[Address(RVA = "0x213E8B0", Offset = "0x213E8B0", VA = "0x213E8B0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000B2F")]
		[Address(RVA = "0x213E8B8", Offset = "0x213E8B8", VA = "0x213E8B8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000B30")]
		[Address(RVA = "0x213EB58", Offset = "0x213EB58", VA = "0x213EB58")]
		public void ManualUpdate()
		{
		}

		[Token(Token = "0x6000B31")]
		[Address(RVA = "0x213E208", Offset = "0x213E208", VA = "0x213E208")]
		public static void SetActive(bool active)
		{
		}

		[Token(Token = "0x6000B32")]
		[Address(RVA = "0x213F190", Offset = "0x213F190", VA = "0x213F190")]
		public static void Log(string logString, bool showConsole)
		{
		}

		[Token(Token = "0x6000B33")]
		[Address(RVA = "0x213F418", Offset = "0x213F418", VA = "0x213F418")]
		public static void Log(string logString, Color color, bool showConsole)
		{
		}

		[Token(Token = "0x6000B34")]
		[Address(RVA = "0x213F5B4", Offset = "0x213F5B4", VA = "0x213F5B4")]
		public static void Log(string logString, LogType logType = LogType.Log, [Optional] Color color, bool showConsole = false)
		{
		}

		[Token(Token = "0x6000B35")]
		[Address(RVA = "0x2139504", Offset = "0x2139504", VA = "0x2139504")]
		public static void Log(string logString, string[] lines, LogType logType = LogType.Log, [Optional] Color color, int threadId = -1)
		{
		}

		[Token(Token = "0x6000B36")]
		[Address(RVA = "0x213F760", Offset = "0x213F760", VA = "0x213F760")]
		public static void Log(LogEntry logEntry)
		{
		}

		[Token(Token = "0x6000B37")]
		[Address(RVA = "0x213F334", Offset = "0x213F334", VA = "0x213F334")]
		private static void AddLog(LogEntry logEntry)
		{
		}

		[Token(Token = "0x6000B38")]
		[Address(RVA = "0x213EC00", Offset = "0x213EC00", VA = "0x213EC00")]
		private void UpdateLogs()
		{
		}

		[Token(Token = "0x6000B39")]
		[Address(RVA = "0x213F838", Offset = "0x213F838", VA = "0x213F838")]
		private static bool CheckNewFrame()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B3A")]
		[Address(RVA = "0x213367C", Offset = "0x213367C", VA = "0x213367C")]
		public static void SortCommandsTable()
		{
		}

		[Token(Token = "0x6000B3B")]
		[Address(RVA = "0x213E34C", Offset = "0x213E34C", VA = "0x213E34C")]
		public static void Register(object instance)
		{
		}

		[Token(Token = "0x6000B3C")]
		[Address(RVA = "0x213E9AC", Offset = "0x213E9AC", VA = "0x213E9AC")]
		public static void Unregister(object instance)
		{
		}

		[Token(Token = "0x6000B3D")]
		[Address(RVA = "0x2132C5C", Offset = "0x2132C5C", VA = "0x2132C5C")]
		public static void RegisterStaticType(Type objType)
		{
		}

		[Token(Token = "0x6000B3E")]
		[Address(RVA = "0x213FBC8", Offset = "0x213FBC8", VA = "0x213FBC8")]
		private static bool AddMethod(Type objType, ConsoleCommand consoleCommand, MemberInfo member, MethodInfo method, MemberType memberType, string methodName, bool logFailed = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B3F")]
		[Address(RVA = "0x21401B8", Offset = "0x21401B8", VA = "0x21401B8")]
		private static void AddCommand(MemberInfo member, ConsoleCommand consoleCommand, string commandName, CommandData commandData, bool logFailed = true)
		{
		}

		[Token(Token = "0x6000B40")]
		[Address(RVA = "0x213A91C", Offset = "0x213A91C", VA = "0x213A91C")]
		public static bool ValidParams(Type objType, MethodInfo method, ParameterInfo[] paramInfos, bool logFailed = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B41")]
		[Address(RVA = "0x213FD5C", Offset = "0x213FD5C", VA = "0x213FD5C")]
		private static bool ValidParam(Type objType, MemberInfo member, Type type, bool logFailed = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B42")]
		[Address(RVA = "0x21406FC", Offset = "0x21406FC", VA = "0x21406FC")]
		private static void CheckDestroyedMonoBehaviours(HashSet<object> instances)
		{
		}

		[Token(Token = "0x6000B43")]
		[Address(RVA = "0x21407F8", Offset = "0x21407F8", VA = "0x21407F8")]
		private static int IsRemoteCommand(ref string command)
		{
			return default(int);
		}

		[Token(Token = "0x6000B44")]
		[Address(RVA = "0x214094C", Offset = "0x214094C", VA = "0x214094C")]
		public static void ExecuteCommand(string command)
		{
		}

		[Token(Token = "0x6000B45")]
		[Address(RVA = "0x2141230", Offset = "0x2141230", VA = "0x2141230")]
		public static void GetArguments(string argumentString, FastQueue<string> inputCommands)
		{
		}

		[Token(Token = "0x6000B46")]
		[Address(RVA = "0x21414C8", Offset = "0x21414C8", VA = "0x21414C8")]
		private static void CannotFindCommand(string command, string firstCommand)
		{
		}

		[Token(Token = "0x6000B47")]
		[Address(RVA = "0x2141568", Offset = "0x2141568", VA = "0x2141568")]
		private static void LogCommandFailed(string command, string result)
		{
		}

		[Token(Token = "0x6000B48")]
		[Address(RVA = "0x21417A8", Offset = "0x21417A8", VA = "0x21417A8")]
		public static bool FindCommand(string command)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B49")]
		[Address(RVA = "0x214106C", Offset = "0x214106C", VA = "0x214106C")]
		private static void LogResult(string result)
		{
		}

		[Token(Token = "0x6000B4A")]
		[Address(RVA = "0x213D488", Offset = "0x213D488", VA = "0x213D488")]
		public static void LogResultError(string result, bool onlyConsoleAndHtml = true)
		{
		}

		[Token(Token = "0x6000B4B")]
		[Address(RVA = "0x21418BC", Offset = "0x21418BC", VA = "0x21418BC")]
		[AttributeAttribute(Name = "ConsoleCommand", RVA = "0x15E5504", Offset = "0x15E5504")]
		private static void Clear()
		{
		}

		[Token(Token = "0x6000B4C")]
		[Address(RVA = "0x2141A50", Offset = "0x2141A50", VA = "0x2141A50")]
		[AttributeAttribute(Name = "ConsoleCommand", RVA = "0x15E5554", Offset = "0x15E5554")]
		private static void Lines(int count = 20)
		{
		}

		[Token(Token = "0x6000B4D")]
		[Address(RVA = "0x2141AE0", Offset = "0x2141AE0", VA = "0x2141AE0")]
		[AttributeAttribute(Name = "ConsoleCommand", RVA = "0x15E55A4", Offset = "0x15E55A4")]
		private static void Open()
		{
		}

		[Token(Token = "0x6000B4E")]
		[Address(RVA = "0x2141B40", Offset = "0x2141B40", VA = "0x2141B40")]
		[AttributeAttribute(Name = "ConsoleCommand", RVA = "0x15E55F4", Offset = "0x15E55F4")]
		private static void Close()
		{
		}

		[Token(Token = "0x6000B4F")]
		[Address(RVA = "0x2141BA0", Offset = "0x2141BA0", VA = "0x2141BA0")]
		[AttributeAttribute(Name = "ConsoleCommand", RVA = "0x15E5644", Offset = "0x15E5644")]
		private static void UnloadUnusedAssets()
		{
		}

		[Token(Token = "0x6000B50")]
		[Address(RVA = "0x2141BA8", Offset = "0x2141BA8", VA = "0x2141BA8")]
		[AttributeAttribute(Name = "ConsoleCommand", RVA = "0x15E5694", Offset = "0x15E5694")]
		private static void GarbageCollect()
		{
		}

		[Token(Token = "0x6000B51")]
		[Address(RVA = "0x2141C08", Offset = "0x2141C08", VA = "0x2141C08")]
		[AttributeAttribute(Name = "ConsoleCommand", RVA = "0x15E56E4", Offset = "0x15E56E4")]
		private static void SearchMethod(string name)
		{
		}

		[Token(Token = "0x6000B52")]
		[Address(RVA = "0x2141F88", Offset = "0x2141F88", VA = "0x2141F88")]
		private Vector2 GetDockPos()
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000B53")]
		[Address(RVA = "0x213E52C", Offset = "0x213E52C", VA = "0x213E52C")]
		private void CalcDraw(bool reset)
		{
		}

		[Token(Token = "0x6000B54")]
		[Address(RVA = "0x2142084", Offset = "0x2142084", VA = "0x2142084")]
		public void MyOnGUI()
		{
		}

		[Token(Token = "0x6000B55")]
		[Address(RVA = "0x2142774", Offset = "0x2142774", VA = "0x2142774")]
		private void DrawConsole(int windowId)
		{
		}

		[Token(Token = "0x6000B56")]
		[Address(RVA = "0x2142A64", Offset = "0x2142A64", VA = "0x2142A64")]
		private void DrawButtons()
		{
		}

		[Token(Token = "0x6000B57")]
		[Address(RVA = "0x21435B0", Offset = "0x21435B0", VA = "0x21435B0")]
		private void DrawLogs(Event currentEvent, Rect window)
		{
		}

		[Token(Token = "0x6000B58")]
		[Address(RVA = "0x2144DEC", Offset = "0x2144DEC", VA = "0x2144DEC")]
		private bool DrawLogsScrollBar(Event currentEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B59")]
		[Address(RVA = "0x214420C", Offset = "0x214420C", VA = "0x214420C")]
		private void DrawInput(Event currentEvent, Rect window)
		{
		}

		[Token(Token = "0x6000B5A")]
		[Address(RVA = "0x2142378", Offset = "0x2142378", VA = "0x2142378")]
		private void DrawAutoComplete()
		{
		}

		[Token(Token = "0x6000B5B")]
		[Address(RVA = "0x21457F0", Offset = "0x21457F0", VA = "0x21457F0")]
		private void DrawAutoComplete(int windowId)
		{
		}

		[Token(Token = "0x6000B5C")]
		[Address(RVA = "0x214505C", Offset = "0x214505C", VA = "0x214505C")]
		private void AutoCompleteInputCommand()
		{
		}

		[Token(Token = "0x6000B5D")]
		[Address(RVA = "0x2145750", Offset = "0x2145750", VA = "0x2145750")]
		private void ClearAutoCompleteList()
		{
		}

		[Token(Token = "0x6000B5E")]
		[Address(RVA = "0x21452C4", Offset = "0x21452C4", VA = "0x21452C4")]
		private void GetAutoCompleteList(string command)
		{
		}

		[Token(Token = "0x6000B5F")]
		[Address(RVA = "0x214664C", Offset = "0x214664C", VA = "0x214664C")]
		private static bool TryParse(Type t, FastQueue<string> paramQueue, out object result)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B60")]
		[Address(RVA = "0x2146BA8", Offset = "0x2146BA8", VA = "0x2146BA8")]
		private static object ChangeType(Type t, FastQueue<string> paramQueue, ref bool valid)
		{
			return null;
		}

		[Token(Token = "0x6000B61")]
		[Address(RVA = "0x21473C0", Offset = "0x21473C0", VA = "0x21473C0")]
		public RuntimeConsole()
		{
		}
	}
	[Token(Token = "0x2000179")]
	public enum AccessLevel
	{
		[Token(Token = "0x40009B4")]
		Free,
		[Token(Token = "0x40009B5")]
		Admin,
		[Token(Token = "0x40009B6")]
		Special
	}
	[Token(Token = "0x200017A")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x15D550C", Offset = "0x15D550C")]
	public class ConsoleAlias : Attribute
	{
		[Token(Token = "0x40009B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string alias;

		[Token(Token = "0x6000B63")]
		[Address(RVA = "0x21316CC", Offset = "0x21316CC", VA = "0x21316CC")]
		public ConsoleAlias(string alias)
		{
		}
	}
	[Token(Token = "0x200017B")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x15D5520", Offset = "0x15D5520")]
	public class ConsoleCommand : Attribute
	{
		[Token(Token = "0x40009B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string alias;

		[Token(Token = "0x40009B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string command;

		[Token(Token = "0x40009BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string description;

		[Token(Token = "0x40009BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AccessLevel accessLevel;

		[Token(Token = "0x6000B64")]
		[Address(RVA = "0x213178C", Offset = "0x213178C", VA = "0x213178C")]
		public ConsoleCommand(AccessLevel accessLevel = AccessLevel.Admin)
		{
		}

		[Token(Token = "0x6000B65")]
		[Address(RVA = "0x2131840", Offset = "0x2131840", VA = "0x2131840")]
		public ConsoleCommand(string command, string description = "", AccessLevel accessLevel = AccessLevel.Admin)
		{
		}

		[Token(Token = "0x6000B66")]
		[Address(RVA = "0x21319FC", Offset = "0x21319FC", VA = "0x21319FC")]
		public bool HasAccess(AccessLevel accessLevel)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200017C")]
	public class SO_ConsoleWindow : SO_BaseWindow
	{
		[Token(Token = "0x40009BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public WindowSettings consoleWindow;

		[Token(Token = "0x40009BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GUISkin skin;

		[Token(Token = "0x40009BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GUISkin skinAutoComplete;

		[Token(Token = "0x40009BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Texture texDot;

		[Token(Token = "0x40009C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Texture texArrow;

		[Token(Token = "0x40009C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Texture texCornerScale;

		[Token(Token = "0x40009C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Texture texStackOn;

		[Token(Token = "0x40009C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Texture texStackOff;

		[Token(Token = "0x40009C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public CountIcon logIcon;

		[Token(Token = "0x40009C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public CountIcon warningIcon;

		[Token(Token = "0x40009C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public CountIcon errorIcon;

		[Token(Token = "0x40009C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public CountIcon exceptionIcon;

		[Token(Token = "0x6000B67")]
		[Address(RVA = "0x1F1A7FC", Offset = "0x1F1A7FC", VA = "0x1F1A7FC")]
		public SO_ConsoleWindow()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200017D")]
	public class CountIcon
	{
		[Token(Token = "0x40009C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Texture texOn;

		[Token(Token = "0x40009C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Texture texOff;

		[NonSerialized]
		[Token(Token = "0x40009CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int count;

		[Token(Token = "0x6000B68")]
		[Address(RVA = "0x2131A2C", Offset = "0x2131A2C", VA = "0x2131A2C")]
		public GUIContent GetGUIContent()
		{
			return null;
		}

		[Token(Token = "0x6000B69")]
		[Address(RVA = "0x2131BA0", Offset = "0x2131BA0", VA = "0x2131BA0")]
		public CountIcon()
		{
		}
	}
	[Token(Token = "0x200017E")]
	[AttributeAttribute(Name = "ConsoleAlias", RVA = "0x15D5534", Offset = "0x15D5534")]
	public class TestConsole : MonoBehaviour
	{
		[Token(Token = "0x2000278")]
		private enum TestMode
		{
			[Token(Token = "0x4001012")]
			ModeA,
			[Token(Token = "0x4001013")]
			ModeB,
			[Token(Token = "0x4001014")]
			ModeC
		}

		[Token(Token = "0x2000279")]
		private delegate float DoMath(float a, float b);

		[Token(Token = "0x40009CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "ConsoleCommand", RVA = "0x15DCC68", Offset = "0x15DCC68")]
		private float testValue1;

		[Token(Token = "0x40009CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "ConsoleCommand", RVA = "0x15DCCB8", Offset = "0x15DCCB8")]
		private TestMode testMode;

		[Token(Token = "0x40009CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "ConsoleCommand", RVA = "0x15DCD08", Offset = "0x15DCD08")]
		private float testValue3;

		[Token(Token = "0x40009CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "ConsoleCommand", RVA = "0x15DCD58", Offset = "0x15DCD58")]
		private Vector3 position;

		[Token(Token = "0x40009CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15DCDA8", Offset = "0x15DCDA8")]
		private bool <AutoProp1>k__BackingField;

		[Token(Token = "0x40009D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int testProp2;

		[Token(Token = "0x40009D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "ConsoleCommand", RVA = "0x15DCDB8", Offset = "0x15DCDB8")]
		private DoMath doMath;

		[Token(Token = "0x17000152")]
		[AttributeAttribute(Name = "ConsoleCommand", RVA = "0x15E6BF4", Offset = "0x15E6BF4")]
		private bool AutoProp1
		{
			[Token(Token = "0x6000B6C")]
			[Address(RVA = "0x1F1B958", Offset = "0x1F1B958", VA = "0x1F1B958")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5734", Offset = "0x15E5734")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B6D")]
			[Address(RVA = "0x1F1B960", Offset = "0x1F1B960", VA = "0x1F1B960")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5744", Offset = "0x15E5744")]
			set
			{
			}
		}

		[Token(Token = "0x17000153")]
		[AttributeAttribute(Name = "ConsoleCommand", RVA = "0x15E6C44", Offset = "0x15E6C44")]
		public int TestProp2
		{
			[Token(Token = "0x6000B6E")]
			[Address(RVA = "0x1F1B96C", Offset = "0x1F1B96C", VA = "0x1F1B96C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000B6F")]
			[Address(RVA = "0x1F1B974", Offset = "0x1F1B974", VA = "0x1F1B974")]
			set
			{
			}
		}

		[Token(Token = "0x6000B6A")]
		[Address(RVA = "0x1F1B82C", Offset = "0x1F1B82C", VA = "0x1F1B82C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B6B")]
		[Address(RVA = "0x1F1B8F0", Offset = "0x1F1B8F0", VA = "0x1F1B8F0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000B70")]
		[Address(RVA = "0x1F1B97C", Offset = "0x1F1B97C", VA = "0x1F1B97C")]
		[AttributeAttribute(Name = "ConsoleCommand", RVA = "0x15E5754", Offset = "0x15E5754")]
		private void PrintHello()
		{
		}

		[Token(Token = "0x6000B71")]
		[Address(RVA = "0x1F1B9E8", Offset = "0x1F1B9E8", VA = "0x1F1B9E8")]
		[AttributeAttribute(Name = "ConsoleCommand", RVA = "0x15E57A4", Offset = "0x15E57A4")]
		private int PrintNumbers(int count)
		{
			return default(int);
		}

		[Token(Token = "0x6000B72")]
		[Address(RVA = "0x1F1BB08", Offset = "0x1F1BB08", VA = "0x1F1BB08")]
		[AttributeAttribute(Name = "ConsoleCommand", RVA = "0x15E57F4", Offset = "0x15E57F4")]
		private float Multiply(float a, float b)
		{
			return default(float);
		}

		[Token(Token = "0x6000B73")]
		[Address(RVA = "0x1F1BB10", Offset = "0x1F1BB10", VA = "0x1F1BB10")]
		public TestConsole()
		{
		}
	}
	[Token(Token = "0x200017F")]
	public enum AssemblyType
	{
		[Token(Token = "0x40009D3")]
		Unity,
		[Token(Token = "0x40009D4")]
		System,
		[Token(Token = "0x40009D5")]
		Mono,
		[Token(Token = "0x40009D6")]
		Other
	}
	[Token(Token = "0x2000180")]
	public class Parent
	{
		[Token(Token = "0x40009D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public object parent;

		[Token(Token = "0x6000B74")]
		[Address(RVA = "0x21336F0", Offset = "0x21336F0", VA = "0x21336F0")]
		public Parent()
		{
		}
	}
	[Token(Token = "0x2000181")]
	public class CustomAssembly : IComparable<CustomAssembly>
	{
		[Token(Token = "0x40009D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x40009D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Assembly assembly;

		[Token(Token = "0x40009DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AssemblyType type;

		[Token(Token = "0x40009DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public FastSortedDictionary<string, NamespaceTypes> namespaceLookup;

		[Token(Token = "0x40009DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public FastList<CustomType> types;

		[Token(Token = "0x40009DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public FastList<CustomType> allTypes;

		[Token(Token = "0x6000B75")]
		[Address(RVA = "0x21325DC", Offset = "0x21325DC", VA = "0x21325DC")]
		public void Sort()
		{
		}

		[Token(Token = "0x6000B76")]
		[Address(RVA = "0x213265C", Offset = "0x213265C", VA = "0x213265C", Slot = "4")]
		public int CompareTo(CustomAssembly other)
		{
			return default(int);
		}

		[Token(Token = "0x6000B77")]
		[Address(RVA = "0x213267C", Offset = "0x213267C", VA = "0x213267C")]
		public static void InitAssemblies(ref bool hasInitAssemblies, FastList<CustomAssembly> customAssemblies, Dictionary<NamespaceTypes, RuntimeInspector.DrawInfo> namespaceTypesLookup, Dictionary<string, FastList<Type>> typeNameLookup)
		{
		}

		[Token(Token = "0x6000B78")]
		[Address(RVA = "0x2132B7C", Offset = "0x2132B7C", VA = "0x2132B7C")]
		public CustomAssembly()
		{
		}
	}
	[Token(Token = "0x2000182")]
	public class NamespaceTypes : Parent, IComparable<NamespaceTypes>
	{
		[Token(Token = "0x40009DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FastList<CustomType> types;

		[Token(Token = "0x40009DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string name;

		[Token(Token = "0x6000B79")]
		[Address(RVA = "0x21335D0", Offset = "0x21335D0", VA = "0x21335D0")]
		public NamespaceTypes(object parent, string name)
		{
		}

		[Token(Token = "0x6000B7A")]
		[Address(RVA = "0x213B82C", Offset = "0x213B82C", VA = "0x213B82C")]
		public void Sort()
		{
		}

		[Token(Token = "0x6000B7B")]
		[Address(RVA = "0x213B890", Offset = "0x213B890", VA = "0x213B890", Slot = "4")]
		public int CompareTo(NamespaceTypes other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000183")]
	public class CustomType : Parent, IComparable<CustomType>
	{
		[Token(Token = "0x40009E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string name;

		[Token(Token = "0x40009E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Type type;

		[Token(Token = "0x6000B7C")]
		[Address(RVA = "0x2133558", Offset = "0x2133558", VA = "0x2133558")]
		public CustomType(object parent, Type type)
		{
		}

		[Token(Token = "0x6000B7D")]
		[Address(RVA = "0x21336F8", Offset = "0x21336F8", VA = "0x21336F8", Slot = "4")]
		public int CompareTo(CustomType other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000184")]
	public class RuntimeInspector : MonoBehaviour
	{
		[Token(Token = "0x200027A")]
		public enum DrawMode
		{
			[Token(Token = "0x4001016")]
			Object,
			[Token(Token = "0x4001017")]
			Assembly
		}

		[Token(Token = "0x200027B")]
		public delegate void FloatMethod(float newValue);

		[Token(Token = "0x200027C")]
		public enum WindowType
		{
			[Token(Token = "0x4001019")]
			Hierarchy,
			[Token(Token = "0x400101A")]
			Inspector
		}

		[Token(Token = "0x200027D")]
		public struct Bool3
		{
			[Token(Token = "0x400101B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool v1;

			[Token(Token = "0x400101C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
			public bool v2;

			[Token(Token = "0x400101D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
			public bool v3;

			[Token(Token = "0x6000EF7")]
			[Address(RVA = "0x25477B0", Offset = "0x25477B0", VA = "0x25477B0")]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x200027E")]
		public class DrawInfo : CullItem
		{
			[Token(Token = "0x400101E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static DrawInfo empty;

			[Token(Token = "0x400101F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool foldout;

			[Token(Token = "0x4001020")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public int passSearch;

			[Token(Token = "0x6000EF8")]
			[Address(RVA = "0x1F1A410", Offset = "0x1F1A410", VA = "0x1F1A410")]
			public DrawInfo(bool foldout)
			{
			}
		}

		[Token(Token = "0x200027F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D57E4", Offset = "0x15D57E4")]
		private sealed class <SearchMemoryCR>d__79 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001021")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001022")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001023")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RuntimeInspector <>4__this;

			[Token(Token = "0x4001024")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <count>5__2;

			[Token(Token = "0x4001025")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private FastList<ItemHolder<string, MemoryInstanceType>> <list>5__3;

			[Token(Token = "0x4001026")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <i>5__4;

			[Token(Token = "0x4001027")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private MemoryInstanceType <mit>5__5;

			[Token(Token = "0x4001028")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private DrawInfo <mitInfo>5__6;

			[Token(Token = "0x4001029")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private FastList<MemoryObject> <instances>5__7;

			[Token(Token = "0x400102A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private int <j>5__8;

			[Token(Token = "0x170001D5")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000EFD")]
				[Address(RVA = "0x2547068", Offset = "0x2547068", VA = "0x2547068", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001D6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000EFF")]
				[Address(RVA = "0x25470D0", Offset = "0x25470D0", VA = "0x25470D0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000EFA")]
			[Address(RVA = "0x253A6A4", Offset = "0x253A6A4", VA = "0x253A6A4")]
			[DebuggerHidden]
			public <SearchMemoryCR>d__79(int <>1__state)
			{
			}

			[Token(Token = "0x6000EFB")]
			[Address(RVA = "0x2546AF4", Offset = "0x2546AF4", VA = "0x2546AF4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000EFC")]
			[Address(RVA = "0x2546AF8", Offset = "0x2546AF8", VA = "0x2546AF8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000EFE")]
			[Address(RVA = "0x2547070", Offset = "0x2547070", VA = "0x2547070", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000280")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D57F4", Offset = "0x15D57F4")]
		private sealed class <SearchAssembliesCR>d__81 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400102B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400102C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400102D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RuntimeInspector <>4__this;

			[Token(Token = "0x400102E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <count>5__2;

			[Token(Token = "0x400102F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private int <i>5__3;

			[Token(Token = "0x4001030")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private CustomAssembly <customAssembly>5__4;

			[Token(Token = "0x4001031")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <startIndex>5__5;

			[Token(Token = "0x4001032")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private FastList<ItemHolder<string, NamespaceTypes>> <namespaceList>5__6;

			[Token(Token = "0x4001033")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private int <j>5__7;

			[Token(Token = "0x4001034")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private NamespaceTypes <namespaceTypes>5__8;

			[Token(Token = "0x170001D7")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F03")]
				[Address(RVA = "0x2545DF0", Offset = "0x2545DF0", VA = "0x2545DF0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001D8")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F05")]
				[Address(RVA = "0x2545E58", Offset = "0x2545E58", VA = "0x2545E58", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F00")]
			[Address(RVA = "0x253A7F0", Offset = "0x253A7F0", VA = "0x253A7F0")]
			[DebuggerHidden]
			public <SearchAssembliesCR>d__81(int <>1__state)
			{
			}

			[Token(Token = "0x6000F01")]
			[Address(RVA = "0x2545964", Offset = "0x2545964", VA = "0x2545964", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F02")]
			[Address(RVA = "0x2545968", Offset = "0x2545968", VA = "0x2545968", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F04")]
			[Address(RVA = "0x2545DF8", Offset = "0x2545DF8", VA = "0x2545DF8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000281")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D5804", Offset = "0x15D5804")]
		private sealed class <SearchScenesCR>d__86 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001035")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001036")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001037")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RuntimeInspector <>4__this;

			[Token(Token = "0x4001038")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <count>5__2;

			[Token(Token = "0x4001039")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private int <i>5__3;

			[Token(Token = "0x400103A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <j>5__4;

			[Token(Token = "0x400103B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private Transform <t>5__5;

			[Token(Token = "0x400103C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int <k>5__6;

			[Token(Token = "0x170001D9")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F09")]
				[Address(RVA = "0x2547740", Offset = "0x2547740", VA = "0x2547740", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001DA")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F0B")]
				[Address(RVA = "0x25477A8", Offset = "0x25477A8", VA = "0x25477A8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F06")]
			[Address(RVA = "0x253B08C", Offset = "0x253B08C", VA = "0x253B08C")]
			[DebuggerHidden]
			public <SearchScenesCR>d__86(int <>1__state)
			{
			}

			[Token(Token = "0x6000F07")]
			[Address(RVA = "0x25470D8", Offset = "0x25470D8", VA = "0x25470D8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F08")]
			[Address(RVA = "0x25470DC", Offset = "0x25470DC", VA = "0x25470DC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F0A")]
			[Address(RVA = "0x2547748", Offset = "0x2547748", VA = "0x2547748", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000282")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15D5814", Offset = "0x15D5814")]
		private sealed class <SearchInspectorCR>d__149 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400103D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400103E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400103F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RuntimeInspector <>4__this;

			[Token(Token = "0x4001040")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool checkSearchType;

			[Token(Token = "0x4001041")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private int <oldInspectorSearchLevel>5__2;

			[Token(Token = "0x4001042")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <count>5__3;

			[Token(Token = "0x4001043")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private int <i>5__4;

			[Token(Token = "0x4001044")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private SearchMember <searchMember>5__5;

			[Token(Token = "0x4001045")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private int <j>5__6;

			[Token(Token = "0x4001046")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			private object <obj>5__7;

			[Token(Token = "0x4001047")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			private MemberInfo <member>5__8;

			[Token(Token = "0x4001048")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			private int <level>5__9;

			[Token(Token = "0x4001049")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			private MemberType <memberType>5__10;

			[Token(Token = "0x400104A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			private MemberData <memberData>5__11;

			[Token(Token = "0x400104B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			private FieldInfo <field>5__12;

			[Token(Token = "0x400104C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			private PropertyInfo <prop>5__13;

			[Token(Token = "0x400104D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			private Type <type>5__14;

			[Token(Token = "0x400104E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			private string <name>5__15;

			[Token(Token = "0x170001DB")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F0F")]
				[Address(RVA = "0x2546A84", Offset = "0x2546A84", VA = "0x2546A84", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001DC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F11")]
				[Address(RVA = "0x2546AEC", Offset = "0x2546AEC", VA = "0x2546AEC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F0C")]
			[Address(RVA = "0x2542520", Offset = "0x2542520", VA = "0x2542520")]
			[DebuggerHidden]
			public <SearchInspectorCR>d__149(int <>1__state)
			{
			}

			[Token(Token = "0x6000F0D")]
			[Address(RVA = "0x2545E60", Offset = "0x2545E60", VA = "0x2545E60", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F0E")]
			[Address(RVA = "0x2545E64", Offset = "0x2545E64", VA = "0x2545E64", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F10")]
			[Address(RVA = "0x2546A8C", Offset = "0x2546A8C", VA = "0x2546A8C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[NonSerialized]
		[Token(Token = "0x40009E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool needHierarchySearch;

		[Token(Token = "0x40009E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool enableCameraOnStart;

		[Token(Token = "0x40009E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GUIChangeBool pauseGame;

		[Token(Token = "0x40009E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GUIChangeBool useNavigationCamera;

		[Token(Token = "0x40009E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GUIChangeBool drawScenes;

		[Token(Token = "0x40009E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GUIChangeBool drawAssemblies;

		[Token(Token = "0x40009E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GUIChangeBool drawMemory;

		[Token(Token = "0x40009E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private GUIChangeBool drawUnityAssemblies;

		[Token(Token = "0x40009EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GUIChangeBool drawSystemAssemblies;

		[Token(Token = "0x40009EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GUIChangeBool drawMonoAssemblies;

		[Token(Token = "0x40009EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GUIChangeBool drawOtherAssemblies;

		[Token(Token = "0x40009ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GUIChangeBool drawMonoBehaviourMemory;

		[Token(Token = "0x40009EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GUIChangeBool drawScriptableObjectMemory;

		[Token(Token = "0x40009EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GUIChangeBool drawComponentMemory;

		[Token(Token = "0x40009F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private GUIChangeBool drawOtherMemory;

		[Token(Token = "0x40009F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private GUIChangeBool drawCompareFilter;

		[Token(Token = "0x40009F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private GUIChangeBool drawHideFlags;

		[Token(Token = "0x40009F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private GUIChangeBool showHelp;

		[Token(Token = "0x40009F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private GUIChangeBool showSettings;

		[Token(Token = "0x40009F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private GUIChangeBool linkSelect;

		[Token(Token = "0x40009F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private FastList<DrawInfo> selectList;

		[Token(Token = "0x40009F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private GameObject lastScreenRayedGO;

		[Token(Token = "0x40009F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<NamespaceTypes, DrawInfo> namespaceTypesLookup;

		[Token(Token = "0x40009F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static FastList<CustomAssembly> customAssemblies;

		[Token(Token = "0x40009FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static bool hasInitAssemblies;

		[Token(Token = "0x40009FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Dictionary<string, DrawInfo> memoryLookup;

		[Token(Token = "0x40009FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Dictionary<MemoryObject, DrawInfo> memoryObjectLookup;

		[Token(Token = "0x40009FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private SortedFastList<MemorySnapshot> memorySnapshots;

		[Token(Token = "0x40009FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private MemorySnapshot selectedMemorySnapshot;

		[Token(Token = "0x40009FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private MemorySnapshot difSnapshot;

		[Token(Token = "0x4000A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private CompareMode memoryCompareMode;

		[Token(Token = "0x4000A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private bool doMemorySnapshotCompare;

		[Token(Token = "0x4000A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private FastList<Transform> transformList;

		[Token(Token = "0x4000A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private FastList<Transform> searchPassedList;

		[Token(Token = "0x4000A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private FastList<DrawInfo> searchFailedList;

		[Token(Token = "0x4000A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private List<GameObject> searchRootList;

		[Token(Token = "0x4000A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private bool isSearchingScenes;

		[Token(Token = "0x4000A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private FastList<CustomType> searchTypePassedList;

		[Token(Token = "0x4000A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private FastList<CustomType> searchTypeFailedList;

		[Token(Token = "0x4000A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private int totalCount;

		[Token(Token = "0x4000A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private bool isSearchingAssemblies;

		[Token(Token = "0x4000A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private HashSet<DrawInfo> searchMemoryObjectPassedList;

		[Token(Token = "0x4000A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private HashSet<DrawInfo> searchMemoryObjectFailedList;

		[Token(Token = "0x4000A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private bool isSearchingMemory;

		[Token(Token = "0x4000A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		private int searchGameObjectsPerFrame;

		[Token(Token = "0x4000A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Vector2 settingsScrollView;

		[Token(Token = "0x4000A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private float refreshHierarchySearch;

		[Token(Token = "0x4000A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		private bool scrollToSelected;

		[Token(Token = "0x4000A12")]
		private const int prefix = 150;

		[Token(Token = "0x4000A13")]
		public const BindingFlags bindingFlags = BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy;

		[Token(Token = "0x4000A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private Dictionary<Type, TypeData> typeDataLookup;

		[Token(Token = "0x4000A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private Dictionary<MethodInfo, string> methodArgumentsLookup;

		[Token(Token = "0x4000A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private Dictionary<MemberInfo, MemberData> memberDataLookup;

		[Token(Token = "0x4000A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private FastQueue<string> methodArgs;

		[Token(Token = "0x4000A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private ScrollViewCullDrawOnce scrollViewCull;

		[Token(Token = "0x4000A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private GUIChangeBool showFields;

		[Token(Token = "0x4000A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private GUIChangeBool showProperties;

		[Token(Token = "0x4000A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private GUIChangeBool showMethods;

		[Token(Token = "0x4000A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private GUIChangeBool showInherited;

		[Token(Token = "0x4000A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private GUIChangeBool showDeclared;

		[Token(Token = "0x4000A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private GUIChangeBool showStatic;

		[Token(Token = "0x4000A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private GUIChangeBool showInstance;

		[Token(Token = "0x4000A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private GUIChangeBool showPublic;

		[Token(Token = "0x4000A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private GUIChangeBool showPrivate;

		[Token(Token = "0x4000A22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private GUIChangeBool showProtected;

		[Token(Token = "0x4000A23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private FastList<object> searchObjectList;

		[Token(Token = "0x4000A24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private List<Component> searchComponentList;

		[Token(Token = "0x4000A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private FastList<SearchMember> searchMemberList;

		[Token(Token = "0x4000A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private FastList<SearchMember> searchMemberPassedList;

		[Token(Token = "0x4000A27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private FastList<SearchMember> searchMemberFailedList;

		[Token(Token = "0x4000A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private HashSet<object> searchDoubles;

		[Token(Token = "0x4000A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private HashSet<object> skip;

		[Token(Token = "0x4000A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private HashSet<Type> searchTypes;

		[Token(Token = "0x4000A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private bool isSearchingInspector;

		[Token(Token = "0x4000A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x211")]
		private bool needInspectorSearch;

		[Token(Token = "0x4000A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
		private float refreshInspectorSearch;

		[Token(Token = "0x4000A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private int inspectorSearchLevel;

		[Token(Token = "0x4000A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
		private int localTotalSearched;

		[Token(Token = "0x4000A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private int searchInspectorPerFrame;

		[Token(Token = "0x4000A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private EditField editField;

		[Token(Token = "0x4000A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private string editText;

		[Token(Token = "0x4000A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		private int selectAllEditText;

		[Token(Token = "0x4000A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		private GameObject oldSelectedGO;

		[Token(Token = "0x4000A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		private object oldDrawObject;

		[Token(Token = "0x4000A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		private DrawMode drawMode;

		[Token(Token = "0x4000A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x254")]
		private float fieldWidth;

		[Token(Token = "0x4000A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		private Type selectedStaticType;

		[Token(Token = "0x4000A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		private UnityEngine.Object selectedObject;

		[Token(Token = "0x4000A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		private float memberSeparationHeight;

		[Token(Token = "0x4000A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26C")]
		private int totalSearched;

		[Token(Token = "0x4000A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		private int totalFound;

		[Token(Token = "0x4000A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static RuntimeInspector instance;

		[Token(Token = "0x4000A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static GameObject selectionIndicatorGO;

		[Token(Token = "0x4000A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static GameObject selectedGO;

		[Token(Token = "0x4000A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static NavigationCamera navigationCamera;

		[Token(Token = "0x4000A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static bool show;

		[Token(Token = "0x4000A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x274")]
		public bool showOnStart;

		[Token(Token = "0x4000A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		public KeyCode showToggleKey;

		[Token(Token = "0x4000A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x27C")]
		public KeyCode focusCameraKey;

		[Token(Token = "0x4000A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		public KeyCode alignWithViewKey;

		[Token(Token = "0x4000A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x284")]
		public KeyCode moveToViewKey;

		[Token(Token = "0x4000A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		public KeyCode followCameraKey;

		[Token(Token = "0x4000A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28C")]
		public LayerMask selectLayerMask;

		[Token(Token = "0x4000A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		public bool unfoldMultipleScenesOnStart;

		[Token(Token = "0x4000A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		public SO_Window windowData;

		[Token(Token = "0x4000A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		public SO_NavigationCamera navigationCameraData;

		[Token(Token = "0x4000A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		private Dictionary<CustomAssembly, DrawInfo> assemblyLookup;

		[Token(Token = "0x4000A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		private Dictionary<CustomType, DrawInfo> typeLookup;

		[Token(Token = "0x4000A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		private Dictionary<Scene, DrawInfo> sceneLookup;

		[Token(Token = "0x4000A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
		private Dictionary<Transform, DrawInfo> tLookup;

		[Token(Token = "0x4000A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private static Dictionary<string, FastList<Type>> typeNameLookup;

		[Token(Token = "0x4000A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
		private FastList<Dictionary<object, DrawInfo>> memberLookups;

		[Token(Token = "0x4000A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
		private List<GameObject> rootList;

		[Token(Token = "0x4000A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
		private List<Component> components;

		[Token(Token = "0x4000A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
		private Texture texArrowFolded;

		[Token(Token = "0x4000A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
		private Texture texArrowUnfolded;

		[Token(Token = "0x4000A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
		private GUISkin skin;

		[Token(Token = "0x4000A59")]
		private const int memberLookupsCapacity = 128;

		[Token(Token = "0x4000A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
		private Camera mainCam;

		[Token(Token = "0x4000A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
		private Vector3 selectionIndicatorLocalPos;

		[Token(Token = "0x4000A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30C")]
		private Quaternion selectionIndicatorLocalRot;

		[Token(Token = "0x4000A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31C")]
		private Vector2 lastMousePos;

		[Token(Token = "0x4000A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x324")]
		private Vector2 mousePos;

		[Token(Token = "0x4000A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32C")]
		private Color colorInherited;

		[Token(Token = "0x4000A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33C")]
		private Color colorStatic;

		[Token(Token = "0x4000A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34C")]
		private Color colorPublic;

		[Token(Token = "0x4000A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35C")]
		private Color colorProtected;

		[Token(Token = "0x4000A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36C")]
		private Color colorPrivate;

		[Token(Token = "0x4000A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x380")]
		private Event currentEvent;

		[Token(Token = "0x4000A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x388")]
		private float oldTimeScale;

		[Token(Token = "0x4000A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x390")]
		private WindowSettings inspectorWindow;

		[Token(Token = "0x4000A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x398")]
		private WindowSettings hierarchyWindow;

		[Token(Token = "0x4000A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A0")]
		private ScrollViewCullData hierarchyCull;

		[Token(Token = "0x4000A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B8")]
		private GUIStyle wrapButton;

		[Token(Token = "0x4000A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C0")]
		private GUIStyle wrapTextField;

		[Token(Token = "0x4000A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C8")]
		private DrawEnum drawEnum;

		[Token(Token = "0x17000154")]
		private int ActiveMemorySnapshotCount
		{
			[Token(Token = "0x6000B89")]
			[Address(RVA = "0x25350E8", Offset = "0x25350E8", VA = "0x25350E8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1400000B")]
		public static event FloatMethod onTimeScaleChanged
		{
			[Token(Token = "0x6000BB9")]
			[Address(RVA = "0x254254C", Offset = "0x254254C", VA = "0x254254C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E59D4", Offset = "0x15E59D4")]
			add
			{
			}
			[Token(Token = "0x6000BBA")]
			[Address(RVA = "0x254263C", Offset = "0x254263C", VA = "0x254263C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E59E4", Offset = "0x15E59E4")]
			remove
			{
			}
		}

		[Token(Token = "0x1400000C")]
		public static event SetActiveMethod onSetActive
		{
			[Token(Token = "0x6000BBB")]
			[Address(RVA = "0x254272C", Offset = "0x254272C", VA = "0x254272C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E59F4", Offset = "0x15E59F4")]
			add
			{
			}
			[Token(Token = "0x6000BBC")]
			[Address(RVA = "0x254281C", Offset = "0x254281C", VA = "0x254281C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x15E5A04", Offset = "0x15E5A04")]
			remove
			{
			}
		}

		[Token(Token = "0x6000B7E")]
		[Address(RVA = "0x25322A4", Offset = "0x25322A4", VA = "0x25322A4")]
		private void Pause()
		{
		}

		[Token(Token = "0x6000B7F")]
		[Address(RVA = "0x25323A8", Offset = "0x25323A8", VA = "0x25323A8")]
		private void DrawHierarchy(int windowId)
		{
		}

		[Token(Token = "0x6000B80")]
		[Address(RVA = "0x2534AC0", Offset = "0x2534AC0", VA = "0x2534AC0")]
		private void HierarchyDragAndTooltip(int windowId)
		{
		}

		[Token(Token = "0x6000B81")]
		[Address(RVA = "0x25352B4", Offset = "0x25352B4", VA = "0x25352B4")]
		private void DrawHelp()
		{
		}

		[Token(Token = "0x6000B82")]
		[Address(RVA = "0x2535424", Offset = "0x2535424", VA = "0x2535424")]
		private void DrawSettings()
		{
		}

		[Token(Token = "0x6000B83")]
		[Address(RVA = "0x2537738", Offset = "0x2537738", VA = "0x2537738")]
		public static void InitAssemblies()
		{
		}

		[Token(Token = "0x6000B84")]
		[Address(RVA = "0x2536A0C", Offset = "0x2536A0C", VA = "0x2536A0C")]
		private void DrawAssemblies()
		{
		}

		[Token(Token = "0x6000B85")]
		[Address(RVA = "0x2537E14", Offset = "0x2537E14", VA = "0x2537E14")]
		private void DrawAssembly(CustomAssembly assembly, bool hasSearchPass)
		{
		}

		[Token(Token = "0x6000B86")]
		[Address(RVA = "0x2538154", Offset = "0x2538154", VA = "0x2538154")]
		private void DrawAssemblyTypes(FastList<CustomType> customTypes, int indent, bool hasSearchPass)
		{
		}

		[Token(Token = "0x6000B87")]
		[Address(RVA = "0x2535168", Offset = "0x2535168", VA = "0x2535168")]
		private void SelectMemorySnapshot(int snapshotIndex)
		{
		}

		[Token(Token = "0x6000B88")]
		[Address(RVA = "0x253522C", Offset = "0x253522C", VA = "0x253522C")]
		private void SelectFirstSelectedMemorySnapshot()
		{
		}

		[Token(Token = "0x6000B8A")]
		[Address(RVA = "0x2534F7C", Offset = "0x2534F7C", VA = "0x2534F7C")]
		private void DoMemorySnapshotCompare()
		{
		}

		[Token(Token = "0x6000B8B")]
		[Address(RVA = "0x2535030", Offset = "0x2535030", VA = "0x2535030")]
		private void ScanMemory()
		{
		}

		[Token(Token = "0x6000B8C")]
		[Address(RVA = "0x2536D48", Offset = "0x2536D48", VA = "0x2536D48")]
		private void DrawMemory(MemorySnapshot memorySnapshot)
		{
		}

		[Token(Token = "0x6000B8D")]
		[Address(RVA = "0x2538494", Offset = "0x2538494", VA = "0x2538494")]
		private void DrawMemoryInstances(MemorySnapshot memorySnapshot, MemoryInstanceType memoryInstanceType, bool hasSearchPass, Texture icon)
		{
		}

		[Token(Token = "0x6000B8E")]
		[Address(RVA = "0x253688C", Offset = "0x253688C", VA = "0x253688C")]
		private void DrawScenes()
		{
		}

		[Token(Token = "0x6000B8F")]
		[Address(RVA = "0x253931C", Offset = "0x253931C", VA = "0x253931C")]
		private void DrawScene(Scene scene, Scene activeScene, int sceneCount)
		{
		}

		[Token(Token = "0x6000B90")]
		[Address(RVA = "0x2537DC8", Offset = "0x2537DC8", VA = "0x2537DC8")]
		private bool PassedFoldout(DrawInfo info, bool needSearch, bool hasSearchPass, bool showSearchNonFound, bool isChild)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B91")]
		[Address(RVA = "0x25399BC", Offset = "0x25399BC", VA = "0x25399BC")]
		private void DrawSceneGameObjects(List<GameObject> goList, bool hasSearchPass)
		{
		}

		[Token(Token = "0x6000B92")]
		[Address(RVA = "0x2539FA4", Offset = "0x2539FA4", VA = "0x2539FA4")]
		private void DrawGameObjects(Transform t, int indent, bool hasSearchPass)
		{
		}

		[Token(Token = "0x6000B93")]
		[Address(RVA = "0x2539A74", Offset = "0x2539A74", VA = "0x2539A74")]
		private void DrawGameObject(GameObject go, ref int indent, bool hasSearchPass)
		{
		}

		[Token(Token = "0x6000B94")]
		[Address(RVA = "0x25398D0", Offset = "0x25398D0", VA = "0x25398D0")]
		private void FoldScene(Scene scene, List<GameObject> rootList, bool foldout)
		{
		}

		[Token(Token = "0x6000B95")]
		[Address(RVA = "0x25396D4", Offset = "0x25396D4", VA = "0x25396D4")]
		private bool FoldOutScene(Scene scene, List<GameObject> rootList)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B96")]
		[Address(RVA = "0x25397CC", Offset = "0x25397CC", VA = "0x25397CC")]
		private bool FoldInScene(Scene scene, List<GameObject> rootList)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B97")]
		[Address(RVA = "0x253A4F8", Offset = "0x253A4F8", VA = "0x253A4F8")]
		private void FoldGameObject(Transform t, bool foldout)
		{
		}

		[Token(Token = "0x6000B98")]
		[Address(RVA = "0x253A32C", Offset = "0x253A32C", VA = "0x253A32C")]
		private bool FoldOutGameObjects(Transform t)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B99")]
		[Address(RVA = "0x253A408", Offset = "0x253A408", VA = "0x253A408")]
		private bool FoldInGameObjects(Transform t)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B9A")]
		[Address(RVA = "0x253A5D0", Offset = "0x253A5D0", VA = "0x253A5D0")]
		private void SearchMemory()
		{
		}

		[Token(Token = "0x6000B9B")]
		[Address(RVA = "0x253A628", Offset = "0x253A628", VA = "0x253A628")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x15E5844", Offset = "0x15E5844")]
		private IEnumerator SearchMemoryCR()
		{
			return null;
		}

		[Token(Token = "0x6000B9C")]
		[Address(RVA = "0x253A6D0", Offset = "0x253A6D0", VA = "0x253A6D0")]
		private void SearchAssemblies()
		{
		}

		[Token(Token = "0x6000B9D")]
		[Address(RVA = "0x253A774", Offset = "0x253A774", VA = "0x253A774")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x15E58A8", Offset = "0x15E58A8")]
		private IEnumerator SearchAssembliesCR()
		{
			return null;
		}

		[Token(Token = "0x6000B9E")]
		[Address(RVA = "0x253A81C", Offset = "0x253A81C", VA = "0x253A81C")]
		private void SetFound(CustomType customType, bool found)
		{
		}

		[Token(Token = "0x6000B9F")]
		[Address(RVA = "0x253A9C0", Offset = "0x253A9C0", VA = "0x253A9C0")]
		private int SearchThroughTypes(FastList<CustomType> types, int startIndex, ref int count)
		{
			return default(int);
		}

		[Token(Token = "0x6000BA0")]
		[Address(RVA = "0x253AF34", Offset = "0x253AF34", VA = "0x253AF34")]
		private void SearchScenes()
		{
		}

		[Token(Token = "0x6000BA1")]
		[Address(RVA = "0x253AFE8", Offset = "0x253AFE8", VA = "0x253AFE8")]
		private void SetSearchObjectsPerFrame()
		{
		}

		[Token(Token = "0x6000BA2")]
		[Address(RVA = "0x253AF6C", Offset = "0x253AF6C", VA = "0x253AF6C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x15E590C", Offset = "0x15E590C")]
		private IEnumerator SearchScenesCR()
		{
			return null;
		}

		[Token(Token = "0x6000BA3")]
		[Address(RVA = "0x253B0B8", Offset = "0x253B0B8", VA = "0x253B0B8")]
		private void DrawInspector(int windowId)
		{
		}

		[Token(Token = "0x6000BA4")]
		[Address(RVA = "0x253C14C", Offset = "0x253C14C", VA = "0x253C14C")]
		private void InspectorDragAndTooltip(int windowId)
		{
		}

		[Token(Token = "0x6000BA5")]
		[Address(RVA = "0x253C244", Offset = "0x253C244", VA = "0x253C244")]
		private void ClearMemberLookups(int startLevel)
		{
		}

		[Token(Token = "0x6000BA6")]
		[Address(RVA = "0x253C2F8", Offset = "0x253C2F8", VA = "0x253C2F8")]
		private void DrawSelected(object obj, DrawMode drawMode)
		{
		}

		[Token(Token = "0x6000BA7")]
		[Address(RVA = "0x253D4FC", Offset = "0x253D4FC", VA = "0x253D4FC")]
		private void ClearEdit()
		{
		}

		[Token(Token = "0x6000BA8")]
		[Address(RVA = "0x253D518", Offset = "0x253D518", VA = "0x253D518")]
		private bool SubmitEdit()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BA9")]
		[Address(RVA = "0x253C8E4", Offset = "0x253C8E4", VA = "0x253C8E4")]
		private void DrawObject(object obj, [Optional] Texture icon)
		{
		}

		[Token(Token = "0x6000BAA")]
		[Address(RVA = "0x253C470", Offset = "0x253C470", VA = "0x253C470")]
		private void DrawGameObject(GameObject go)
		{
		}

		[Token(Token = "0x6000BAB")]
		[Address(RVA = "0x253D5B8", Offset = "0x253D5B8", VA = "0x253D5B8")]
		private void DrawComponent(Component component, int level)
		{
		}

		[Token(Token = "0x6000BAC")]
		[Address(RVA = "0x253CFB8", Offset = "0x253CFB8", VA = "0x253CFB8")]
		private bool DrawObjectMembers(MemberInfo parentMember, object obj, int level, bool needSearch, bool hasSearchPass, bool isType, float indent)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BAD")]
		[Address(RVA = "0x253DF10", Offset = "0x253DF10", VA = "0x253DF10")]
		private bool DrawMembers(MemberInfo parentMember, object obj, TypeData typeData, SubTypeData subTypeData, MemberInfo[] members, MemberType memberType, int level, bool needSearch, bool hasSearchPass, float indent, out bool didDraw)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BAE")]
		[Address(RVA = "0x253DE4C", Offset = "0x253DE4C", VA = "0x253DE4C")]
		private TypeData GetTypeData(Type objType)
		{
			return null;
		}

		[Token(Token = "0x6000BAF")]
		[Address(RVA = "0x2541038", Offset = "0x2541038", VA = "0x2541038")]
		private MemberData GetMemberData(Type objType, MemberInfo member, MemberType memberType)
		{
			return null;
		}

		[Token(Token = "0x6000BB0")]
		[Address(RVA = "0x253E438", Offset = "0x253E438", VA = "0x253E438")]
		private bool DrawMember(MemberInfo parentMember, object obj, TypeData typeData, SubTypeData subTypeData, MemberInfo member, MemberType memberType, int level, bool needSearch, bool hasSearchPass, ref bool didDraw, bool isLastMember, float indent, [Optional] Array array, int arrayIndex = -1)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BB1")]
		[Address(RVA = "0x25417C0", Offset = "0x25417C0", VA = "0x25417C0")]
		private void DrawArray(MemberInfo parentMember, Array array, int level, bool needSearch, bool hasSearchPass, float indent)
		{
		}

		[Token(Token = "0x6000BB2")]
		[Address(RVA = "0x2541D68", Offset = "0x2541D68", VA = "0x2541D68")]
		private void DrawLabelIndent(string text, float indent)
		{
		}

		[Token(Token = "0x6000BB3")]
		[Address(RVA = "0x2541EF0", Offset = "0x2541EF0", VA = "0x2541EF0")]
		private void SearchInsideGameObject(GameObject go)
		{
		}

		[Token(Token = "0x6000BB4")]
		[Address(RVA = "0x254209C", Offset = "0x254209C", VA = "0x254209C")]
		private void SearchInspector(object obj)
		{
		}

		[Token(Token = "0x6000BB5")]
		[Address(RVA = "0x2542128", Offset = "0x2542128", VA = "0x2542128")]
		private void AddSearchMembers(object obj, Type objType, SearchMember searchMember, MemberInfo[] members, MemberType memberType, int level)
		{
		}

		[Token(Token = "0x6000BB6")]
		[Address(RVA = "0x25422A8", Offset = "0x25422A8", VA = "0x25422A8")]
		private void AddAllSearchMembers(object searchObj, Type objType, SearchMember searchMember, int level)
		{
		}

		[Token(Token = "0x6000BB7")]
		[Address(RVA = "0x2542488", Offset = "0x2542488", VA = "0x2542488")]
		private void SetSearchInspectorPerFrame()
		{
		}

		[Token(Token = "0x6000BB8")]
		[Address(RVA = "0x254200C", Offset = "0x254200C", VA = "0x254200C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x15E5970", Offset = "0x15E5970")]
		private IEnumerator SearchInspectorCR(bool checkSearchType)
		{
			return null;
		}

		[Token(Token = "0x6000BBD")]
		[Address(RVA = "0x254290C", Offset = "0x254290C", VA = "0x254290C")]
		public static void ResetStatic()
		{
		}

		[Token(Token = "0x6000BBE")]
		[Address(RVA = "0x2542A08", Offset = "0x2542A08", VA = "0x2542A08")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000BBF")]
		[Address(RVA = "0x2542DF8", Offset = "0x2542DF8", VA = "0x2542DF8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000BC0")]
		[Address(RVA = "0x2542E0C", Offset = "0x2542E0C", VA = "0x2542E0C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000BC1")]
		[Address(RVA = "0x2542F1C", Offset = "0x2542F1C", VA = "0x2542F1C")]
		[AttributeAttribute(Name = "ConsoleCommand", RVA = "0x15E5A14", Offset = "0x15E5A14")]
		public static void SearchHierarchyType(string type)
		{
		}

		[Token(Token = "0x6000BC2")]
		[Address(RVA = "0x25430E8", Offset = "0x25430E8", VA = "0x25430E8")]
		[AttributeAttribute(Name = "ConsoleCommand", RVA = "0x15E5A64", Offset = "0x15E5A64")]
		public static void SearchHierarchyName(string name)
		{
		}

		[Token(Token = "0x6000BC3")]
		[Address(RVA = "0x2542FA4", Offset = "0x2542FA4", VA = "0x2542FA4")]
		public static void SetSearch(WindowSettings window, string text, SearchMode searchMode, int searchIndex, bool setActive)
		{
		}

		[Token(Token = "0x6000BC4")]
		[Address(RVA = "0x25374FC", Offset = "0x25374FC", VA = "0x25374FC")]
		private void SetSelectionSphereRadius()
		{
		}

		[Token(Token = "0x6000BC5")]
		[Address(RVA = "0x2534D4C", Offset = "0x2534D4C", VA = "0x2534D4C")]
		private void EnableCamControl()
		{
		}

		[Token(Token = "0x6000BC6")]
		[Address(RVA = "0x2534EE8", Offset = "0x2534EE8", VA = "0x2534EE8")]
		private void DisableCamControl()
		{
		}

		[Token(Token = "0x6000BC7")]
		[Address(RVA = "0x2542CA0", Offset = "0x2542CA0", VA = "0x2542CA0")]
		public void SetActive(bool active)
		{
		}

		[Token(Token = "0x6000BC8")]
		[Address(RVA = "0x2543170", Offset = "0x2543170", VA = "0x2543170")]
		public void ManualUpdate()
		{
		}

		[Token(Token = "0x6000BC9")]
		[Address(RVA = "0x2543A8C", Offset = "0x2543A8C", VA = "0x2543A8C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000BCA")]
		[Address(RVA = "0x2543B50", Offset = "0x2543B50", VA = "0x2543B50")]
		public static void UpdateSelectedIndicatorTransform()
		{
		}

		[Token(Token = "0x6000BCB")]
		[Address(RVA = "0x25439E8", Offset = "0x25439E8", VA = "0x25439E8")]
		private bool NeedSearch(List<Search> searchList)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BCC")]
		[Address(RVA = "0x2543D80", Offset = "0x2543D80", VA = "0x2543D80")]
		public void MyOnGUI()
		{
		}

		[Token(Token = "0x6000BCD")]
		[Address(RVA = "0x25441C8", Offset = "0x25441C8", VA = "0x25441C8")]
		public static bool ShouldInspectorWindowShow()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BCE")]
		[Address(RVA = "0x25359E8", Offset = "0x25359E8", VA = "0x25359E8")]
		private bool DrawSearch(WindowSettings window, bool changeText2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BCF")]
		[Address(RVA = "0x253AB50", Offset = "0x253AB50", VA = "0x253AB50")]
		private bool PassSearch(WindowType windowType, Transform t, string name, Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BD0")]
		public DrawInfo GetObjectDrawInfo<T>(Dictionary<T, DrawInfo> lookup, T obj, bool defaultFoldout = false)
		{
			return null;
		}

		[Token(Token = "0x6000BD1")]
		[Address(RVA = "0x2541194", Offset = "0x2541194", VA = "0x2541194")]
		public void DrawDot(Color color, string tooltip, Texture tex, bool minusSpace = false)
		{
		}

		[Token(Token = "0x6000BD2")]
		[Address(RVA = "0x2541348", Offset = "0x2541348", VA = "0x2541348")]
		public Bool3 DrawElement(WindowSettings window, DrawInfo info, int childCount, string name, float width, Texture tex, string tooltip = "")
		{
			return default(Bool3);
		}

		[Token(Token = "0x6000BD3")]
		[Address(RVA = "0x25377E4", Offset = "0x25377E4", VA = "0x25377E4")]
		public Bool3 DrawElement(WindowSettings window, DrawInfo info, int childCount, string text = "", [Optional] Texture image, string tooltip = "", bool isActive = true, int prefix = 0)
		{
			return default(Bool3);
		}

		[Token(Token = "0x6000BD4")]
		[Address(RVA = "0x2538474", Offset = "0x2538474", VA = "0x2538474")]
		private Color GetColor(Color color)
		{
			return default(Color);
		}

		[Token(Token = "0x6000BD5")]
		[Address(RVA = "0x2538410", Offset = "0x2538410", VA = "0x2538410")]
		private Color GetColor(object obj, object selectedObj, bool needSearch, DrawInfo info)
		{
			return default(Color);
		}

		[Token(Token = "0x6000BD6")]
		[Address(RVA = "0x25375D0", Offset = "0x25375D0", VA = "0x25375D0")]
		public void DrawBoldLabel(GUISkin skin, string name, float space = -3f)
		{
		}

		[Token(Token = "0x6000BD7")]
		[Address(RVA = "0x25443EC", Offset = "0x25443EC", VA = "0x25443EC")]
		public void DrawBoldLabel(GUISkin skin, string name)
		{
		}

		[Token(Token = "0x6000BD8")]
		[Address(RVA = "0x2537080", Offset = "0x2537080", VA = "0x2537080")]
		private void DrawPrefixLabel(string prefixName, string name, int prefix)
		{
		}

		[Token(Token = "0x6000BD9")]
		private void DrawInputField<T>(string prefixName, T inputField) where T : BaseInputField
		{
		}

		[Token(Token = "0x6000BDA")]
		[Address(RVA = "0x2537288", Offset = "0x2537288", VA = "0x2537288")]
		private void DrawToggleField(string prefixName, ref bool toggle)
		{
		}

		[Token(Token = "0x6000BDB")]
		[Address(RVA = "0x254450C", Offset = "0x254450C", VA = "0x254450C")]
		private void DrawLastRectOffset(string name, int offset)
		{
		}

		[Token(Token = "0x6000BDC")]
		[Address(RVA = "0x2544608", Offset = "0x2544608", VA = "0x2544608")]
		private Texture2D ReadBackTexture(Texture2D tex)
		{
			return null;
		}

		[Token(Token = "0x6000BDD")]
		[Address(RVA = "0x25447D8", Offset = "0x25447D8", VA = "0x25447D8")]
		private Texture2D CopyAndRemoveAlphaFromTexture(Texture2D texRead, float colorMulti = 1f)
		{
			return null;
		}

		[Token(Token = "0x6000BDE")]
		[Address(RVA = "0x25448AC", Offset = "0x25448AC", VA = "0x25448AC")]
		private void DrawBox(GUIContent guiContent, Color color)
		{
		}

		[Token(Token = "0x6000BDF")]
		[Address(RVA = "0x2534BA8", Offset = "0x2534BA8", VA = "0x2534BA8")]
		private void BeginVerticalBox(float alphaMulti = 1f)
		{
		}

		[Token(Token = "0x6000BE0")]
		[Address(RVA = "0x254374C", Offset = "0x254374C", VA = "0x254374C")]
		private void SelectGameObjectFromScreenRay()
		{
		}

		[Token(Token = "0x6000BE1")]
		[Address(RVA = "0x253A044", Offset = "0x253A044", VA = "0x253A044")]
		private void SelectGameObject(GameObject go, bool unfold = false)
		{
		}

		[Token(Token = "0x6000BE2")]
		[Address(RVA = "0x2544A08", Offset = "0x2544A08", VA = "0x2544A08")]
		private void RevertSelectionFoldout()
		{
		}

		[Token(Token = "0x6000BE3")]
		[Address(RVA = "0x2534800", Offset = "0x2534800", VA = "0x2534800")]
		private void DrawWindowTitle(GUIContent guiContent, WindowSettings window)
		{
		}

		[Token(Token = "0x6000BE4")]
		[Address(RVA = "0x2538AD0", Offset = "0x2538AD0", VA = "0x2538AD0")]
		private void DrawHideFlagsIcons(object obj, HideFlags hideFlags, bool isPrefab, string name)
		{
		}

		[Token(Token = "0x6000BE5")]
		[Address(RVA = "0x2544A80", Offset = "0x2544A80", VA = "0x2544A80")]
		private void DrawIcon(Rect rect, GUIContent guiContent, Color color, bool label = true)
		{
		}

		[Token(Token = "0x6000BE6")]
		[Address(RVA = "0x2544C30", Offset = "0x2544C30", VA = "0x2544C30")]
		public RuntimeInspector()
		{
		}
	}
	[Token(Token = "0x2000185")]
	public enum MemoryType
	{
		[Token(Token = "0x4000A6D")]
		MonoBehaviour,
		[Token(Token = "0x4000A6E")]
		ScriptableObject,
		[Token(Token = "0x4000A6F")]
		Component,
		[Token(Token = "0x4000A70")]
		Other
	}
	[Token(Token = "0x2000186")]
	public enum CompareResult
	{
		[Token(Token = "0x4000A72")]
		New,
		[Token(Token = "0x4000A73")]
		Removed
	}
	[Token(Token = "0x2000187")]
	public class MemoryInstanceType : IComparable<MemoryInstanceType>
	{
		[Token(Token = "0x4000A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FastSortedHashSet<int, MemoryObject> instances;

		[Token(Token = "0x4000A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool isSorted;

		[Token(Token = "0x4000A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Type type;

		[Token(Token = "0x4000A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MemoryType memoryType;

		[Token(Token = "0x6000BE8")]
		[Address(RVA = "0x213AA38", Offset = "0x213AA38", VA = "0x213AA38")]
		public MemoryInstanceType(Type type)
		{
		}

		[Token(Token = "0x6000BE9")]
		[Address(RVA = "0x213ABEC", Offset = "0x213ABEC", VA = "0x213ABEC")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000BEA")]
		[Address(RVA = "0x213AC4C", Offset = "0x213AC4C", VA = "0x213AC4C", Slot = "4")]
		public int CompareTo(MemoryInstanceType other)
		{
			return default(int);
		}

		[Token(Token = "0x6000BEB")]
		[Address(RVA = "0x213ACA4", Offset = "0x213ACA4", VA = "0x213ACA4")]
		public void Sort()
		{
		}
	}
	[Token(Token = "0x2000188")]
	public class MemoryObject : IComparable<MemoryObject>
	{
		[Token(Token = "0x4000A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int instanceId;

		[Token(Token = "0x4000A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public HideFlags hideFlags;

		[Token(Token = "0x4000A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool isPrefab;

		[Token(Token = "0x4000A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string name;

		[Token(Token = "0x4000A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string nameAndTime;

		[Token(Token = "0x4000A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public CompareResult compareResult;

		[Token(Token = "0x6000BEC")]
		[Address(RVA = "0x213AD08", Offset = "0x213AD08", VA = "0x213AD08")]
		public MemoryObject(string name, int instanceId, HideFlags hideFlags, bool isPrefab, CompareResult compareResult = CompareResult.New)
		{
		}

		[Token(Token = "0x6000BED")]
		[Address(RVA = "0x213ADE0", Offset = "0x213ADE0", VA = "0x213ADE0")]
		public MemoryObject(MemoryObject memoryObject, CompareResult compareResult = CompareResult.New)
		{
		}

		[Token(Token = "0x6000BEE")]
		[Address(RVA = "0x213AE54", Offset = "0x213AE54", VA = "0x213AE54", Slot = "4")]
		public int CompareTo(MemoryObject other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000189")]
	public class MemorySnapshot
	{
		[Token(Token = "0x4000A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FastSortedDictionary<string, MemoryInstanceType> memoryTypesLookup;

		[Token(Token = "0x4000A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float tStamp;

		[Token(Token = "0x4000A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GUIChangeBool selected;

		[Token(Token = "0x4000A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public CompareResult compareResult;

		[Token(Token = "0x4000A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool hasCleanedDifCompare;

		[Token(Token = "0x6000BEF")]
		[Address(RVA = "0x213AE74", Offset = "0x213AE74", VA = "0x213AE74")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000BF0")]
		[Address(RVA = "0x213AED4", Offset = "0x213AED4", VA = "0x213AED4")]
		public void ScanMemory(CompareMode compareMode)
		{
		}

		[Token(Token = "0x6000BF1")]
		[Address(RVA = "0x213B104", Offset = "0x213B104", VA = "0x213B104")]
		public void CleanDifSnapshot(CompareMode compareMode)
		{
		}

		[Token(Token = "0x6000BF2")]
		[Address(RVA = "0x213B358", Offset = "0x213B358", VA = "0x213B358")]
		public static void CompareMemorySnapshots(MemorySnapshot oldSnapshot, MemorySnapshot newSnapshot, MemorySnapshot difSnapshot, CompareMode compareMode)
		{
		}

		[Token(Token = "0x6000BF3")]
		[Address(RVA = "0x213B404", Offset = "0x213B404", VA = "0x213B404")]
		public static void CompareMemorySnapshots(MemorySnapshot s, MemorySnapshot d, MemorySnapshot difSnapshot, CompareResult compareResult)
		{
		}

		[Token(Token = "0x6000BF4")]
		[Address(RVA = "0x213B77C", Offset = "0x213B77C", VA = "0x213B77C")]
		public MemorySnapshot()
		{
		}
	}
	[Token(Token = "0x200018A")]
	[AttributeAttribute(Name = "DefaultExecutionOrder", RVA = "0x15D556C", Offset = "0x15D556C")]
	public class NavigationCamera : MonoBehaviour
	{
		[Token(Token = "0x4000A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static float fov;

		[Token(Token = "0x4000A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static bool followTarget;

		[Token(Token = "0x4000A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Camera cam;

		[Token(Token = "0x4000A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SO_NavigationCamera data;

		[Token(Token = "0x4000A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform t;

		[Token(Token = "0x4000A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject go;

		[Token(Token = "0x4000A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 mousePosOld;

		[Token(Token = "0x4000A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 currentSpeed;

		[Token(Token = "0x4000A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 position;

		[Token(Token = "0x4000A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 startPosition;

		[Token(Token = "0x4000A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 navPosition;

		[Token(Token = "0x4000A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 followPosition;

		[Token(Token = "0x4000A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Quaternion rotation;

		[Token(Token = "0x4000A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Quaternion startRotation;

		[Token(Token = "0x4000A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Quaternion navRotation;

		[Token(Token = "0x4000A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Quaternion followRotation;

		[Token(Token = "0x4000A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float tStamp;

		[Token(Token = "0x4000A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private float deltaTime;

		[Token(Token = "0x4000A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float oldFov;

		[Token(Token = "0x4000A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private float scrollWheel;

		[Token(Token = "0x4000A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private GameObject selectionIndicatorGO;

		[Token(Token = "0x4000A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Transform selectionIndicatorT;

		[Token(Token = "0x6000BF5")]
		[Address(RVA = "0x213B8B0", Offset = "0x213B8B0", VA = "0x213B8B0")]
		public static void ResetStatic()
		{
		}

		[Token(Token = "0x6000BF6")]
		[Address(RVA = "0x213B900", Offset = "0x213B900", VA = "0x213B900")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000BF7")]
		[Address(RVA = "0x213BD40", Offset = "0x213BD40", VA = "0x213BD40")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000BF8")]
		[Address(RVA = "0x213BDD8", Offset = "0x213BDD8", VA = "0x213BDD8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000BF9")]
		[Address(RVA = "0x213BAB8", Offset = "0x213BAB8", VA = "0x213BAB8")]
		private Quaternion ResetRotZ(Quaternion rot, bool roundTo180 = true)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000BFA")]
		[Address(RVA = "0x213BF88", Offset = "0x213BF88", VA = "0x213BF88")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000BFB")]
		[Address(RVA = "0x213C980", Offset = "0x213C980", VA = "0x213C980")]
		private void FollowTarget()
		{
		}

		[Token(Token = "0x6000BFC")]
		[Address(RVA = "0x213BC10", Offset = "0x213BC10", VA = "0x213BC10")]
		public void ResetFollowPosRot()
		{
		}

		[Token(Token = "0x6000BFD")]
		[Address(RVA = "0x213CDD4", Offset = "0x213CDD4", VA = "0x213CDD4")]
		public void SetCam()
		{
		}

		[Token(Token = "0x6000BFE")]
		[Address(RVA = "0x213BD44", Offset = "0x213BD44", VA = "0x213BD44")]
		public void RestoreCam()
		{
		}

		[Token(Token = "0x6000BFF")]
		[Address(RVA = "0x213CCEC", Offset = "0x213CCEC", VA = "0x213CCEC")]
		private float GetSpeedMulti()
		{
			return default(float);
		}

		[Token(Token = "0x6000C00")]
		[Address(RVA = "0x213CD5C", Offset = "0x213CD5C", VA = "0x213CD5C")]
		private void Lerp2Way(ref Vector3 v, Vector3 targetV, float upMulti, float downMulti)
		{
		}

		[Token(Token = "0x6000C01")]
		[Address(RVA = "0x213CE20", Offset = "0x213CE20", VA = "0x213CE20")]
		private void Lerp2Way(ref float v, float targetV, float upMulti, float downMulti)
		{
		}

		[Token(Token = "0x6000C02")]
		[Address(RVA = "0x213CF14", Offset = "0x213CF14", VA = "0x213CF14")]
		public NavigationCamera()
		{
		}
	}
	[Token(Token = "0x200018B")]
	public enum MemberType
	{
		[Token(Token = "0x4000A9A")]
		Field,
		[Token(Token = "0x4000A9B")]
		Property,
		[Token(Token = "0x4000A9C")]
		Method,
		[Token(Token = "0x4000A9D")]
		ArrayElement
	}
	[Token(Token = "0x200018C")]
	public enum Scope
	{
		[Token(Token = "0x4000A9F")]
		Public,
		[Token(Token = "0x4000AA0")]
		Protected,
		[Token(Token = "0x4000AA1")]
		Private
	}
	[Token(Token = "0x200018D")]
	public class SubTypeData
	{
		[Token(Token = "0x4000AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Type type;

		[Token(Token = "0x4000AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string typeName;

		[Token(Token = "0x4000AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int index;

		[Token(Token = "0x4000AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public FieldInfo[] fields;

		[Token(Token = "0x4000AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public PropertyInfo[] properties;

		[Token(Token = "0x4000AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public MethodInfo[] methods;

		[Token(Token = "0x6000C03")]
		[Address(RVA = "0x1F1B6E8", Offset = "0x1F1B6E8", VA = "0x1F1B6E8")]
		public SubTypeData(Type type, int index, BindingFlags bindingFlags)
		{
		}
	}
	[Token(Token = "0x200018E")]
	public class TypeData
	{
		[Token(Token = "0x4000AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FastList<SubTypeData> subTypeDatas;

		[Token(Token = "0x4000AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool isString;

		[Token(Token = "0x4000AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool isClass;

		[Token(Token = "0x4000AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool isStruct;

		[Token(Token = "0x4000AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool isArray;

		[Token(Token = "0x4000AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool isInterface;

		[Token(Token = "0x6000C04")]
		[Address(RVA = "0x1F1BE7C", Offset = "0x1F1BE7C", VA = "0x1F1BE7C")]
		public TypeData(Type type, BindingFlags bindingFlags)
		{
		}

		[Token(Token = "0x6000C05")]
		[Address(RVA = "0x1F1BFF8", Offset = "0x1F1BFF8", VA = "0x1F1BFF8")]
		public void GetMembers(Type type, BindingFlags bindingFlags)
		{
		}
	}
	[Token(Token = "0x200018F")]
	public class MemberData
	{
		[Token(Token = "0x4000AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MemberType memberType;

		[Token(Token = "0x4000AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MemberInfo member;

		[Token(Token = "0x4000AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FieldInfo field;

		[Token(Token = "0x4000AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PropertyInfo prop;

		[Token(Token = "0x4000AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public MethodInfo method;

		[Token(Token = "0x4000AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ParameterInfo[] parameters;

		[Token(Token = "0x4000AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool validInvokeParameters;

		[Token(Token = "0x4000AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public bool isStatic;

		[Token(Token = "0x4000AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		public bool isConstant;

		[Token(Token = "0x4000AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x43")]
		public bool isString;

		[Token(Token = "0x4000AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool isClass;

		[Token(Token = "0x4000AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		public bool isStruct;

		[Token(Token = "0x4000ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
		public bool isArray;

		[Token(Token = "0x4000ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
		public bool isInterface;

		[Token(Token = "0x4000ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Type type;

		[Token(Token = "0x4000ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Scope scope;

		[Token(Token = "0x4000ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string name;

		[Token(Token = "0x4000ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string typeName;

		[Token(Token = "0x4000AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public string scopeToolTip;

		[Token(Token = "0x4000AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Color scopeColor;

		[Token(Token = "0x6000C06")]
		[Address(RVA = "0x213A2C0", Offset = "0x213A2C0", VA = "0x213A2C0")]
		public MemberData(Type objType, MemberInfo member, MemberType memberType, Color colorPublic, Color colorProtected, Color colorPrivate)
		{
		}
	}
	[Token(Token = "0x2000190")]
	public class SO_NavigationCamera : ScriptableObject
	{
		[Token(Token = "0x4000AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FloatInputField mouseSensitity;

		[Token(Token = "0x4000AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FloatInputField accelMulti;

		[Token(Token = "0x4000AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public FloatInputField decelMulti;

		[Token(Token = "0x4000AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public FloatInputField speedSlow;

		[Token(Token = "0x4000AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public FloatInputField speedNormal;

		[Token(Token = "0x4000AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public FloatInputField speedFast;

		[Token(Token = "0x4000AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public FloatInputField mouseScrollWheelMulti;

		[Token(Token = "0x4000AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public FloatInputField mouseStrafeMulti;

		[Token(Token = "0x6000C07")]
		[Address(RVA = "0x1F1A800", Offset = "0x1F1A800", VA = "0x1F1A800")]
		public SO_NavigationCamera()
		{
		}
	}
	[Token(Token = "0x2000191")]
	public enum WindowType
	{
		[Token(Token = "0x4000ACB")]
		Hierarchy,
		[Token(Token = "0x4000ACC")]
		Inspector,
		[Token(Token = "0x4000ACD")]
		Console
	}
	[Token(Token = "0x2000192")]
	public class SO_BaseWindow : ScriptableObject
	{
		[Token(Token = "0x4000ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color color;

		[Token(Token = "0x4000ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float backgroundAlpha;

		[Token(Token = "0x4000AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float boxAlpha;

		[Token(Token = "0x6000C08")]
		[Address(RVA = "0x1F1A7C0", Offset = "0x1F1A7C0", VA = "0x1F1A7C0")]
		public SO_BaseWindow()
		{
		}
	}
	[Token(Token = "0x2000193")]
	public class SO_Window : SO_BaseWindow
	{
		[Token(Token = "0x4000AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public WindowSettings hierarchyWindow;

		[Token(Token = "0x4000AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public WindowSettings inspectorWindow;

		[Token(Token = "0x4000AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool showTooltip;

		[Token(Token = "0x4000AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float selectionSphereRadius;

		[Token(Token = "0x4000AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public IntInputField searchAssemblyPerFrame;

		[Token(Token = "0x4000AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public IntInputField searchGameObjectsPerFrame;

		[Token(Token = "0x4000AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public IntInputField searchInspectorPerFrame;

		[Token(Token = "0x4000AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GUIChangeBool showChildCount;

		[Token(Token = "0x4000AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Texture texToggleOn;

		[Token(Token = "0x4000ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Texture texArrowFolded;

		[Token(Token = "0x4000ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Texture texArrowUnfolded;

		[Token(Token = "0x4000ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Texture texDot;

		[Token(Token = "0x4000ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Texture texDot2;

		[Token(Token = "0x4000ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Texture texScene;

		[Token(Token = "0x4000ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Texture texAssembly;

		[Token(Token = "0x4000AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Texture texMemory;

		[Token(Token = "0x4000AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Texture texHierarchy;

		[Token(Token = "0x4000AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Texture texInspector;

		[Token(Token = "0x4000AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Texture texGameObject;

		[Token(Token = "0x4000AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Texture texSearch;

		[Token(Token = "0x4000AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Texture texSettings;

		[Token(Token = "0x4000AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Texture texPause;

		[Token(Token = "0x4000AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Texture texCamera;

		[Token(Token = "0x4000AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Texture texCameraFollow;

		[Token(Token = "0x4000AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Texture texHelp;

		[Token(Token = "0x4000AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Texture texPrefab;

		[Token(Token = "0x4000AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public Texture texSave;

		[Token(Token = "0x4000AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Texture texLoad;

		[Token(Token = "0x4000AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public Texture texEdit;

		[Token(Token = "0x4000AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public Texture texAlphabeticSort;

		[Token(Token = "0x4000AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public Texture texCountSort;

		[Token(Token = "0x4000AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public Texture texVisible;

		[Token(Token = "0x4000AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public Texture texInvisible;

		[Token(Token = "0x4000AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public Texture texDestroyed;

		[Token(Token = "0x4000AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public GUISkin skin;

		[Token(Token = "0x4000AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public GUISkin sourceSkin;

		[Token(Token = "0x4000AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public ComponentIcons componentIcons;

		[Token(Token = "0x6000C09")]
		[Address(RVA = "0x1F1A9AC", Offset = "0x1F1A9AC", VA = "0x1F1A9AC")]
		public SO_Window()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000194")]
	public struct ComponentIcons
	{
		[Token(Token = "0x4000AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Texture gameObjectIcon;

		[Token(Token = "0x4000AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Texture transformIcon;

		[Token(Token = "0x4000AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Texture cameraIcon;

		[Token(Token = "0x4000AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Texture csScriptIcon;

		[Token(Token = "0x4000AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Texture audioListenerIcon;

		[Token(Token = "0x4000AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Texture audioSourceIcon;

		[Token(Token = "0x4000AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Texture rigidbodyIcon;

		[Token(Token = "0x4000AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Texture boxColliderIcon;

		[Token(Token = "0x4000AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Texture capsuleColliderIcon;

		[Token(Token = "0x4000AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Texture meshColliderIcon;

		[Token(Token = "0x4000B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Texture sphereColliderIcon;

		[Token(Token = "0x4000B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Texture terrainColliderIcon;

		[Token(Token = "0x4000B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Texture wheelColliderIcon;

		[Token(Token = "0x4000B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Texture meshFilterIcon;

		[Token(Token = "0x4000B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Texture meshRendererIcon;

		[Token(Token = "0x4000B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Texture pointLightIcon;

		[Token(Token = "0x4000B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Texture directionalLightIcon;

		[Token(Token = "0x4000B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Texture spotLightIcon;

		[Token(Token = "0x4000B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Texture areaLightIcon;

		[Token(Token = "0x4000B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Texture fontIcon;

		[Token(Token = "0x4000B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Texture lightingDataAssetIcon;

		[Token(Token = "0x4000B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Texture lightProbesIcon;

		[Token(Token = "0x4000B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Texture materialIcon;

		[Token(Token = "0x4000B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Texture meshIcon;

		[Token(Token = "0x4000B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Texture renderTextureIcon;

		[Token(Token = "0x4000B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Texture texture2DIcon;

		[Token(Token = "0x4000B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Texture textureImporterIcon;

		[Token(Token = "0x4000B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Texture scriptableObjectIcon;

		[Token(Token = "0x4000B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Texture shaderIcon;

		[Token(Token = "0x4000B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Texture shaderVariantCollectionIcon;

		[Token(Token = "0x4000B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Texture computeShaderIcon;

		[Token(Token = "0x4000B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public Texture editorSettingsIcon;

		[Token(Token = "0x4000B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Texture cubemapIcon;

		[Token(Token = "0x4000B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public Texture animationIcon;

		[Token(Token = "0x4000B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public Texture flareLayerIcon;

		[Token(Token = "0x4000B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public Texture guiLayerIcon;

		[Token(Token = "0x4000B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public Texture lightProbeProxyVolumeIcon;

		[Token(Token = "0x4000B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public Texture lightProbeGroupIcon;

		[Token(Token = "0x6000C0A")]
		[Address(RVA = "0x21307C4", Offset = "0x21307C4", VA = "0x21307C4")]
		public Texture GetIcon(object obj)
		{
			return null;
		}

		[Token(Token = "0x6000C0B")]
		[Address(RVA = "0x2130D34", Offset = "0x2130D34", VA = "0x2130D34")]
		public Texture GetIcon(Type type)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000195")]
	public class WindowSettings
	{
		[Token(Token = "0x4000B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<Search> searchList;

		[Token(Token = "0x4000B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool showSearchNonFound;

		[Token(Token = "0x4000B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool search;

		[Token(Token = "0x4000B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector2 position;

		[Token(Token = "0x4000B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Rect rect;

		[Token(Token = "0x4000B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GUIChangeBool isDocked;

		[Token(Token = "0x4000B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool isMinimized;

		[NonSerialized]
		[Token(Token = "0x4000B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float newScrollViewY;

		[NonSerialized]
		[Token(Token = "0x4000B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector2 scrollView;

		[NonSerialized]
		[Token(Token = "0x4000B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector2 updatedScrollView;

		[NonSerialized]
		[Token(Token = "0x4000B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int drag;

		[NonSerialized]
		[Token(Token = "0x4000B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Rect rectStartScroll;

		[NonSerialized]
		[Token(Token = "0x4000B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float scrollWindowPosY;

		[NonSerialized]
		[Token(Token = "0x4000B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float culledSpaceY;

		[Token(Token = "0x6000C0C")]
		[Address(RVA = "0x1F1D880", Offset = "0x1F1D880", VA = "0x1F1D880")]
		public void Update(float minWidth, float minHeight)
		{
		}

		[Token(Token = "0x6000C0D")]
		[Address(RVA = "0x1F1DA9C", Offset = "0x1F1DA9C", VA = "0x1F1DA9C")]
		public void UpdateScrollView()
		{
		}

		[Token(Token = "0x6000C0E")]
		[Address(RVA = "0x1F1DAC8", Offset = "0x1F1DAC8", VA = "0x1F1DAC8")]
		public void SetScrollViewToEnd(ScrollViewCullData cull)
		{
		}

		[Token(Token = "0x6000C0F")]
		[Address(RVA = "0x1F1DAD4", Offset = "0x1F1DAD4", VA = "0x1F1DAD4")]
		public bool IsScrollViewAtEnd(ScrollViewCullData cull)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C10")]
		[Address(RVA = "0x1F1D8A4", Offset = "0x1F1D8A4", VA = "0x1F1D8A4")]
		public void CheckMinMaxSize(float minWidth, float minHeight)
		{
		}

		[Token(Token = "0x6000C11")]
		[Address(RVA = "0x1F1DA38", Offset = "0x1F1DA38", VA = "0x1F1DA38")]
		public void CalcRectPosition()
		{
		}

		[Token(Token = "0x6000C12")]
		[Address(RVA = "0x1F1D3AC", Offset = "0x1F1D3AC", VA = "0x1F1D3AC")]
		public bool ContainsMousePos(Vector2 mousePos)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C13")]
		[Address(RVA = "0x1F1DAE8", Offset = "0x1F1DAE8", VA = "0x1F1DAE8")]
		public WindowSettings()
		{
		}
	}
	[Token(Token = "0x2000196")]
	public enum SearchMode
	{
		[Token(Token = "0x4000B2B")]
		Name,
		[Token(Token = "0x4000B2C")]
		Type
	}
	[Token(Token = "0x2000197")]
	public enum SearchCondition
	{
		[Token(Token = "0x4000B2E")]
		Or,
		[Token(Token = "0x4000B2F")]
		And
	}
	[Serializable]
	[Token(Token = "0x2000198")]
	public class Search
	{
		[Token(Token = "0x4000B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SearchMode mode;

		[Token(Token = "0x4000B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public SearchCondition condition;

		[Token(Token = "0x4000B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string text;

		[Token(Token = "0x4000B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool useSearch;

		[Token(Token = "0x4000B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool hasSearch;

		[NonSerialized]
		[Token(Token = "0x4000B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public FastList<Type> types;

		[Token(Token = "0x6000C14")]
		[Address(RVA = "0x1F1B180", Offset = "0x1F1B180", VA = "0x1F1B180")]
		public void MakeArrayTypes()
		{
		}

		[Token(Token = "0x6000C15")]
		[Address(RVA = "0x1F1B288", Offset = "0x1F1B288", VA = "0x1F1B288")]
		public Search()
		{
		}
	}
	[Token(Token = "0x2000199")]
	public struct SearchMember
	{
		[Token(Token = "0x4000B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public object parent;

		[Token(Token = "0x4000B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public MemberType memberType;

		[Token(Token = "0x4000B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public object obj;

		[Token(Token = "0x4000B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Type objType;

		[Token(Token = "0x4000B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MemberInfo member;

		[Token(Token = "0x4000B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RuntimeInspector.DrawInfo info;

		[Token(Token = "0x4000B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int level;

		[Token(Token = "0x6000C16")]
		[Address(RVA = "0x1F1B32C", Offset = "0x1F1B32C", VA = "0x1F1B32C")]
		public SearchMember(object parent, object obj, Type objType, MemberInfo member, MemberType memberType, RuntimeInspector.DrawInfo info, int level)
		{
		}
	}
	[Token(Token = "0x200019A")]
	[AttributeAttribute(Name = "DefaultExecutionOrder", RVA = "0x15D5584", Offset = "0x15D5584")]
	public class WindowManager : MonoBehaviour
	{
		[Token(Token = "0x2000283")]
		public class EventHandling
		{
			[Token(Token = "0x400104F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private FastList<EventSystem> eventSystemList;

			[Token(Token = "0x4001050")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool hasEntered;

			[Token(Token = "0x6000F12")]
			[Address(RVA = "0x1F1CFC0", Offset = "0x1F1CFC0", VA = "0x1F1CFC0")]
			public void OnEnter()
			{
			}

			[Token(Token = "0x6000F13")]
			[Address(RVA = "0x1F1D0BC", Offset = "0x1F1D0BC", VA = "0x1F1D0BC")]
			public void OnExit()
			{
			}

			[Token(Token = "0x6000F14")]
			[Address(RVA = "0x1F1D804", Offset = "0x1F1D804", VA = "0x1F1D804")]
			public EventHandling()
			{
			}
		}

		[Token(Token = "0x4000B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static WindowManager instance;

		[Token(Token = "0x4000B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static EventHandling eventHandling;

		[Token(Token = "0x4000B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static Vector2 mousePos;

		[Token(Token = "0x4000B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static string tooltip;

		[Token(Token = "0x4000B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static int lastWindowId;

		[Token(Token = "0x4000B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SO_WindowManager windowData;

		[Token(Token = "0x4000B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RuntimeInspector runtimeInspector;

		[Token(Token = "0x4000B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RuntimeConsole runtimeConsole;

		[Token(Token = "0x4000B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector2 size;

		[Token(Token = "0x6000C17")]
		[Address(RVA = "0x1F1C0F8", Offset = "0x1F1C0F8", VA = "0x1F1C0F8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000C18")]
		[Address(RVA = "0x1F1C524", Offset = "0x1F1C524", VA = "0x1F1C524")]
		private void SetActiveDeactive(GameObject go)
		{
		}

		[Token(Token = "0x6000C19")]
		[Address(RVA = "0x1F1C564", Offset = "0x1F1C564", VA = "0x1F1C564")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000C1A")]
		[Address(RVA = "0x1F1C648", Offset = "0x1F1C648", VA = "0x1F1C648")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C1B")]
		[Address(RVA = "0x1F1C87C", Offset = "0x1F1C87C", VA = "0x1F1C87C")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000C1C")]
		[Address(RVA = "0x1F1CD14", Offset = "0x1F1CD14", VA = "0x1F1CD14")]
		public static bool DoWindowsContainMousePos()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C1D")]
		[Address(RVA = "0x1F1D468", Offset = "0x1F1D468", VA = "0x1F1D468")]
		public static void SetToolTip(int windowId)
		{
		}

		[Token(Token = "0x6000C1E")]
		[Address(RVA = "0x1F1D15C", Offset = "0x1F1D15C", VA = "0x1F1D15C")]
		private void DrawTooltip(Vector2 mousePos)
		{
		}

		[Token(Token = "0x6000C1F")]
		[Address(RVA = "0x1F1D5C4", Offset = "0x1F1D5C4", VA = "0x1F1D5C4")]
		private void DoWindow(int windowId)
		{
		}

		[Token(Token = "0x6000C20")]
		[Address(RVA = "0x1F1D76C", Offset = "0x1F1D76C", VA = "0x1F1D76C")]
		public WindowManager()
		{
		}
	}
}
namespace FFTWSharp
{
	[Token(Token = "0x200019B")]
	[Flags]
	public enum fftw_flags : uint
	{
		[Token(Token = "0x4000B47")]
		Measure = 0u,
		[Token(Token = "0x4000B48")]
		DestroyInput = 1u,
		[Token(Token = "0x4000B49")]
		Unaligned = 2u,
		[Token(Token = "0x4000B4A")]
		ConserveMemory = 4u,
		[Token(Token = "0x4000B4B")]
		Exhaustive = 8u,
		[Token(Token = "0x4000B4C")]
		PreserveInput = 0x10u,
		[Token(Token = "0x4000B4D")]
		Patient = 0x20u,
		[Token(Token = "0x4000B4E")]
		Estimate = 0x40u
	}
	[Token(Token = "0x200019C")]
	public enum fftw_direction
	{
		[Token(Token = "0x4000B50")]
		Forward = -1,
		[Token(Token = "0x4000B51")]
		Backward = 1
	}
	[Token(Token = "0x200019D")]
	public enum fftw_kind : uint
	{
		[Token(Token = "0x4000B53")]
		R2HC,
		[Token(Token = "0x4000B54")]
		HC2R,
		[Token(Token = "0x4000B55")]
		DHT,
		[Token(Token = "0x4000B56")]
		REDFT00,
		[Token(Token = "0x4000B57")]
		REDFT01,
		[Token(Token = "0x4000B58")]
		REDFT10,
		[Token(Token = "0x4000B59")]
		REDFT11,
		[Token(Token = "0x4000B5A")]
		RODFT00,
		[Token(Token = "0x4000B5B")]
		RODFT01,
		[Token(Token = "0x4000B5C")]
		RODFT10,
		[Token(Token = "0x4000B5D")]
		RODFT11
	}
	[Token(Token = "0x200019E")]
	public class fftwf
	{
		[PreserveSig]
		[Token(Token = "0x6000C22")]
		[Address(RVA = "0x1F1ED58", Offset = "0x1F1ED58", VA = "0x1F1ED58")]
		public static extern IntPtr malloc(int length);

		[PreserveSig]
		[Token(Token = "0x6000C23")]
		[Address(RVA = "0x1F1EDDC", Offset = "0x1F1EDDC", VA = "0x1F1EDDC")]
		public static extern void free(IntPtr mem);

		[PreserveSig]
		[Token(Token = "0x6000C24")]
		[Address(RVA = "0x1F1EE60", Offset = "0x1F1EE60", VA = "0x1F1EE60")]
		public static extern void destroy_plan(IntPtr plan);

		[PreserveSig]
		[Token(Token = "0x6000C25")]
		[Address(RVA = "0x1F1EEE4", Offset = "0x1F1EEE4", VA = "0x1F1EEE4")]
		public static extern void cleanup();

		[PreserveSig]
		[Token(Token = "0x6000C26")]
		[Address(RVA = "0x1F1EF58", Offset = "0x1F1EF58", VA = "0x1F1EF58")]
		public static extern void set_timelimit(double seconds);

		[PreserveSig]
		[Token(Token = "0x6000C27")]
		[Address(RVA = "0x1F1EFE0", Offset = "0x1F1EFE0", VA = "0x1F1EFE0")]
		public static extern void execute(IntPtr plan);

		[PreserveSig]
		[Token(Token = "0x6000C28")]
		[Address(RVA = "0x1F1F064", Offset = "0x1F1F064", VA = "0x1F1F064")]
		public static extern IntPtr dft_1d(int n, IntPtr input, IntPtr output, fftw_direction direction, fftw_flags flags);

		[PreserveSig]
		[Token(Token = "0x6000C29")]
		[Address(RVA = "0x1F1F118", Offset = "0x1F1F118", VA = "0x1F1F118")]
		public static extern IntPtr dft_2d(int nx, int ny, IntPtr input, IntPtr output, fftw_direction direction, fftw_flags flags);

		[PreserveSig]
		[Token(Token = "0x6000C2A")]
		[Address(RVA = "0x1F1F1DC", Offset = "0x1F1F1DC", VA = "0x1F1F1DC")]
		public static extern IntPtr dft_3d(int nx, int ny, int nz, IntPtr input, IntPtr output, fftw_direction direction, fftw_flags flags);

		[PreserveSig]
		[Token(Token = "0x6000C2B")]
		[Address(RVA = "0x1F1F2A8", Offset = "0x1F1F2A8", VA = "0x1F1F2A8")]
		public static extern IntPtr dft(int rank, int[] n, IntPtr input, IntPtr output, fftw_direction direction, fftw_flags flags);

		[PreserveSig]
		[Token(Token = "0x6000C2C")]
		[Address(RVA = "0x1F1F374", Offset = "0x1F1F374", VA = "0x1F1F374")]
		public static extern IntPtr dft_r2c_1d(int n, IntPtr input, IntPtr output, fftw_flags flags);

		[PreserveSig]
		[Token(Token = "0x6000C2D")]
		[Address(RVA = "0x1F1F420", Offset = "0x1F1F420", VA = "0x1F1F420")]
		public static extern IntPtr dft_r2c_2d(int nx, int ny, IntPtr input, IntPtr output, fftw_flags flags);

		[PreserveSig]
		[Token(Token = "0x6000C2E")]
		[Address(RVA = "0x1F1F4D4", Offset = "0x1F1F4D4", VA = "0x1F1F4D4")]
		public static extern IntPtr dft_r2c_3d(int nx, int ny, int nz, IntPtr input, IntPtr output, fftw_flags flags);

		[PreserveSig]
		[Token(Token = "0x6000C2F")]
		[Address(RVA = "0x1F1F598", Offset = "0x1F1F598", VA = "0x1F1F598")]
		public static extern IntPtr dft_r2c(int rank, int[] n, IntPtr input, IntPtr output, fftw_flags flags);

		[PreserveSig]
		[Token(Token = "0x6000C30")]
		[Address(RVA = "0x1F1F654", Offset = "0x1F1F654", VA = "0x1F1F654")]
		public static extern IntPtr dft_c2r_1d(int n, IntPtr input, IntPtr output, fftw_flags flags);

		[PreserveSig]
		[Token(Token = "0x6000C31")]
		[Address(RVA = "0x1F1F700", Offset = "0x1F1F700", VA = "0x1F1F700")]
		public static extern IntPtr dft_c2r_2d(int nx, int ny, IntPtr input, IntPtr output, fftw_flags flags);

		[PreserveSig]
		[Token(Token = "0x6000C32")]
		[Address(RVA = "0x1F1F7B4", Offset = "0x1F1F7B4", VA = "0x1F1F7B4")]
		public static extern IntPtr dft_c2r_3d(int nx, int ny, int nz, IntPtr input, IntPtr output, fftw_flags flags);

		[PreserveSig]
		[Token(Token = "0x6000C33")]
		[Address(RVA = "0x1F1F878", Offset = "0x1F1F878", VA = "0x1F1F878")]
		public static extern IntPtr dft_c2r(int rank, int[] n, IntPtr input, IntPtr output, fftw_flags flags);

		[PreserveSig]
		[Token(Token = "0x6000C34")]
		[Address(RVA = "0x1F1F934", Offset = "0x1F1F934", VA = "0x1F1F934")]
		public static extern IntPtr r2r_1d(int n, IntPtr input, IntPtr output, fftw_kind kind, fftw_flags flags);

		[PreserveSig]
		[Token(Token = "0x6000C35")]
		[Address(RVA = "0x1F1F9E8", Offset = "0x1F1F9E8", VA = "0x1F1F9E8")]
		public static extern IntPtr r2r_2d(int nx, int ny, IntPtr input, IntPtr output, fftw_kind kindx, fftw_kind kindy, fftw_flags flags);

		[PreserveSig]
		[Token(Token = "0x6000C36")]
		[Address(RVA = "0x1F1FAB4", Offset = "0x1F1FAB4", VA = "0x1F1FAB4")]
		public static extern IntPtr r2r_3d(int nx, int ny, int nz, IntPtr input, IntPtr output, fftw_kind kindx, fftw_kind kindy, fftw_kind kindz, fftw_flags flags);

		[PreserveSig]
		[Token(Token = "0x6000C37")]
		[Address(RVA = "0x1F1FB98", Offset = "0x1F1FB98", VA = "0x1F1FB98")]
		public static extern IntPtr r2r(int rank, int[] n, IntPtr input, IntPtr output, fftw_kind[] kind, fftw_flags flags);

		[PreserveSig]
		[Token(Token = "0x6000C38")]
		[Address(RVA = "0x1F1FC6C", Offset = "0x1F1FC6C", VA = "0x1F1FC6C")]
		public static extern void flops(IntPtr plan, ref double add, ref double mul, ref double fma);

		[PreserveSig]
		[Token(Token = "0x6000C39")]
		[Address(RVA = "0x1F1FD18", Offset = "0x1F1FD18", VA = "0x1F1FD18")]
		public static extern void print_plan(IntPtr plan);

		[PreserveSig]
		[Token(Token = "0x6000C3A")]
		[Address(RVA = "0x1F1FD9C", Offset = "0x1F1FD9C", VA = "0x1F1FD9C")]
		public static extern void export_wisdom_to_filename(string filename);

		[PreserveSig]
		[Token(Token = "0x6000C3B")]
		[Address(RVA = "0x1F1FE30", Offset = "0x1F1FE30", VA = "0x1F1FE30")]
		public static extern void import_wisdom_from_filename(string filename);

		[PreserveSig]
		[Token(Token = "0x6000C3C")]
		[Address(RVA = "0x1F1FEC4", Offset = "0x1F1FEC4", VA = "0x1F1FEC4")]
		public static extern void fftwf_forget_wisdom();

		[Token(Token = "0x6000C3D")]
		[Address(RVA = "0x1F1FF38", Offset = "0x1F1FF38", VA = "0x1F1FF38")]
		public fftwf()
		{
		}
	}
	[Token(Token = "0x200019F")]
	public class fftw
	{
		[PreserveSig]
		[Token(Token = "0x6000C3E")]
		[Address(RVA = "0x1F1DB70", Offset = "0x1F1DB70", VA = "0x1F1DB70")]
		public static extern IntPtr malloc(int length);

		[PreserveSig]
		[Token(Token = "0x6000C3F")]
		[Address(RVA = "0x1F1DBF4", Offset = "0x1F1DBF4", VA = "0x1F1DBF4")]
		public static extern void free(IntPtr mem);

		[PreserveSig]
		[Token(Token = "0x6000C40")]
		[Address(RVA = "0x1F1DC78", Offset = "0x1F1DC78", VA = "0x1F1DC78")]
		public static extern void destroy_plan(IntPtr plan);

		[PreserveSig]
		[Token(Token = "0x6000C41")]
		[Address(RVA = "0x1F1DCFC", Offset = "0x1F1DCFC", VA = "0x1F1DCFC")]
		public static extern void cleanup();

		[PreserveSig]
		[Token(Token = "0x6000C42")]
		[Address(RVA = "0x1F1DD70", Offset = "0x1F1DD70", VA = "0x1F1DD70")]
		public static extern void set_timelimit(double seconds);

		[PreserveSig]
		[Token(Token = "0x6000C43")]
		[Address(RVA = "0x1F1DDF8", Offset = "0x1F1DDF8", VA = "0x1F1DDF8")]
		public static extern void execute(IntPtr plan);

		[PreserveSig]
		[Token(Token = "0x6000C44")]
		[Address(RVA = "0x1F1DE7C", Offset = "0x1F1DE7C", VA = "0x1F1DE7C")]
		public static extern IntPtr dft_1d(int n, IntPtr input, IntPtr output, fftw_direction direction, fftw_flags flags);

		[PreserveSig]
		[Token(Token = "0x6000C45")]
		[Address(RVA = "0x1F1DF30", Offset = "0x1F1DF30", VA = "0x1F1DF30")]
		public static extern IntPtr dft_2d(int nx, int ny, IntPtr input, IntPtr output, fftw_direction direction, fftw_flags flags);

		[PreserveSig]
		[Token(Token = "0x6000C46")]
		[Address(RVA = "0x1F1DFF4", Offset = "0x1F1DFF4", VA = "0x1F1DFF4")]
		public static extern IntPtr dft_3d(int nx, int ny, int nz, IntPtr input, IntPtr output, fftw_direction direction, fftw_flags flags);

		[PreserveSig]
		[Token(Token = "0x6000C47")]
		[Address(RVA = "0x1F1E0C0", Offset = "0x1F1E0C0", VA = "0x1F1E0C0")]
		public static extern IntPtr dft(int rank, int[] n, IntPtr input, IntPtr output, fftw_direction direction, fftw_flags flags);

		[PreserveSig]
		[Token(Token = "0x6000C48")]
		[Address(RVA = "0x1F1E18C", Offset = "0x1F1E18C", VA = "0x1F1E18C")]
		public static extern IntPtr dft_r2c_1d(int n, IntPtr input, IntPtr output, fftw_flags flags);

		[PreserveSig]
		[Token(Token = "0x6000C49")]
		[Address(RVA = "0x1F1E238", Offset = "0x1F1E238", VA = "0x1F1E238")]
		public static extern IntPtr dft_r2c_2d(int nx, int ny, IntPtr input, IntPtr output, fftw_flags flags);

		[PreserveSig]
		[Token(Token = "0x6000C4A")]
		[Address(RVA = "0x1F1E2EC", Offset = "0x1F1E2EC", VA = "0x1F1E2EC")]
		public static extern IntPtr dft_r2c_3d(int nx, int ny, int nz, IntPtr input, IntPtr output, fftw_flags flags);

		[PreserveSig]
		[Token(Token = "0x6000C4B")]
		[Address(RVA = "0x1F1E3B0", Offset = "0x1F1E3B0", VA = "0x1F1E3B0")]
		public static extern IntPtr dft_r2c(int rank, int[] n, IntPtr input, IntPtr output, fftw_flags flags);

		[PreserveSig]
		[Token(Token = "0x6000C4C")]
		[Address(RVA = "0x1F1E46C", Offset = "0x1F1E46C", VA = "0x1F1E46C")]
		public static extern IntPtr dft_c2r_1d(int n, IntPtr input, IntPtr output, fftw_flags flags);

		[PreserveSig]
		[Token(Token = "0x6000C4D")]
		[Address(RVA = "0x1F1E518", Offset = "0x1F1E518", VA = "0x1F1E518")]
		public static extern IntPtr dft_c2r_2d(int nx, int ny, IntPtr input, IntPtr output, fftw_flags flags);

		[PreserveSig]
		[Token(Token = "0x6000C4E")]
		[Address(RVA = "0x1F1E5CC", Offset = "0x1F1E5CC", VA = "0x1F1E5CC")]
		public static extern IntPtr dft_c2r_3d(int nx, int ny, int nz, IntPtr input, IntPtr output, fftw_flags flags);

		[PreserveSig]
		[Token(Token = "0x6000C4F")]
		[Address(RVA = "0x1F1E690", Offset = "0x1F1E690", VA = "0x1F1E690")]
		public static extern IntPtr dft_c2r(int rank, int[] n, IntPtr input, IntPtr output, fftw_flags flags);

		[PreserveSig]
		[Token(Token = "0x6000C50")]
		[Address(RVA = "0x1F1E74C", Offset = "0x1F1E74C", VA = "0x1F1E74C")]
		public static extern IntPtr r2r_1d(int n, IntPtr input, IntPtr output, fftw_kind kind, fftw_flags flags);

		[PreserveSig]
		[Token(Token = "0x6000C51")]
		[Address(RVA = "0x1F1E800", Offset = "0x1F1E800", VA = "0x1F1E800")]
		public static extern IntPtr r2r_2d(int nx, int ny, IntPtr input, IntPtr output, fftw_kind kindx, fftw_kind kindy, fftw_flags flags);

		[PreserveSig]
		[Token(Token = "0x6000C52")]
		[Address(RVA = "0x1F1E8CC", Offset = "0x1F1E8CC", VA = "0x1F1E8CC")]
		public static extern IntPtr r2r_3d(int nx, int ny, int nz, IntPtr input, IntPtr output, fftw_kind kindx, fftw_kind kindy, fftw_kind kindz, fftw_flags flags);

		[PreserveSig]
		[Token(Token = "0x6000C53")]
		[Address(RVA = "0x1F1E9B0", Offset = "0x1F1E9B0", VA = "0x1F1E9B0")]
		public static extern IntPtr r2r(int rank, int[] n, IntPtr input, IntPtr output, fftw_kind[] kind, fftw_flags flags);

		[PreserveSig]
		[Token(Token = "0x6000C54")]
		[Address(RVA = "0x1F1EA84", Offset = "0x1F1EA84", VA = "0x1F1EA84")]
		public static extern void flops(IntPtr plan, ref double add, ref double mul, ref double fma);

		[PreserveSig]
		[Token(Token = "0x6000C55")]
		[Address(RVA = "0x1F1EB30", Offset = "0x1F1EB30", VA = "0x1F1EB30")]
		public static extern void print_plan(IntPtr plan);

		[PreserveSig]
		[Token(Token = "0x6000C56")]
		[Address(RVA = "0x1F1EBB4", Offset = "0x1F1EBB4", VA = "0x1F1EBB4")]
		public static extern void export_wisdom_to_filename(string filename);

		[PreserveSig]
		[Token(Token = "0x6000C57")]
		[Address(RVA = "0x1F1EC48", Offset = "0x1F1EC48", VA = "0x1F1EC48")]
		public static extern void import_wisdom_from_filename(string filename);

		[PreserveSig]
		[Token(Token = "0x6000C58")]
		[Address(RVA = "0x1F1ECDC", Offset = "0x1F1ECDC", VA = "0x1F1ECDC")]
		public static extern void fftw_forget_wisdom();

		[Token(Token = "0x6000C59")]
		[Address(RVA = "0x1F1ED50", Offset = "0x1F1ED50", VA = "0x1F1ED50")]
		public fftw()
		{
		}
	}
}
