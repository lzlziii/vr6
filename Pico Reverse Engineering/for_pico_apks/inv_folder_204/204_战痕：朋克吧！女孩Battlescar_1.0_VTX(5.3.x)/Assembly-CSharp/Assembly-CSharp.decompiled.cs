using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Net.Sockets;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Xml;
using Colorful;
using DG.Tweening;
using DG.Tweening.Core;
using DG.Tweening.Plugins.Core.PathCore;
using DG.Tweening.Plugins.Options;
using Il2CppDummyDll;
using LSS;
using LitJson;
using MWU.Attributes;
using OVR.OpenVR;
using Oculus.Spatializer.Propagation;
using Pvr_UnitySDKAPI;
using Pvr_UnitySDKAPI.Achievement;
using RogoDigital.Lipsync;
using TMPro;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.Audio;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.Localization;
using UnityEngine.Playables;
using UnityEngine.PostProcessing;
using UnityEngine.Rendering;
using UnityEngine.SceneManagement;
using UnityEngine.Timeline;
using UnityEngine.UI;
using UnityEngine.Video;
using UnityEngine.XR;
using UnitySA.Utility;
using ch.sycoforge.Decal;
using kiupe;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
public class AutoSpriteSwap : MonoBehaviour
{
	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public bool isRandom;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int refreshingFrameRate;

	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Sprite[] tabSprites;

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int frameCounter;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int currentSpriteIndex;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<int> indexesSprites;

	[Token(Token = "0x6000001")]
	[Address(RVA = "0x619E58", Offset = "0x619E58", VA = "0x619E58")]
	private void Start()
	{
	}

	[Token(Token = "0x6000002")]
	[Address(RVA = "0x619F34", Offset = "0x619F34", VA = "0x619F34")]
	private void Update()
	{
	}

	[Token(Token = "0x6000003")]
	[Address(RVA = "0x619F58", Offset = "0x619F58", VA = "0x619F58")]
	private void DisplayNextSprite()
	{
	}

	[Token(Token = "0x6000004")]
	[Address(RVA = "0x61A150", Offset = "0x61A150", VA = "0x61A150")]
	public AutoSpriteSwap()
	{
	}
}
[Token(Token = "0x2000003")]
public class FaunsAnimatorController : MonoBehaviour
{
	[Token(Token = "0x20003D4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EA798", Offset = "0x2EA798")]
	private sealed class <Wait>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private int <>1__state;

		[Token(Token = "0x4001837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private object <>2__current;

		[Token(Token = "0x4001838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FaunsAnimatorController <>4__this;

		[Token(Token = "0x17000363")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600195B")]
			[Address(RVA = "0x4DE004", Offset = "0x4DE004", VA = "0x4DE004", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000364")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600195D")]
			[Address(RVA = "0x4DE094", Offset = "0x4DE094", VA = "0x4DE094", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001958")]
		[Address(RVA = "0x4DDDE4", Offset = "0x4DDDE4", VA = "0x4DDDE4")]
		[DebuggerHidden]
		public <Wait>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x6001959")]
		[Address(RVA = "0x4DDEA8", Offset = "0x4DDEA8", VA = "0x4DDEA8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600195A")]
		[Address(RVA = "0x4DDEAC", Offset = "0x4DDEAC", VA = "0x4DDEAC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600195C")]
		[Address(RVA = "0x4DE00C", Offset = "0x4DE00C", VA = "0x4DE00C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Animator animator;

	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string varBoolName;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Vector2 offsetTimeRange;

	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float offsetTime;

	[Token(Token = "0x6000005")]
	[Address(RVA = "0x4DDCBC", Offset = "0x4DDCBC", VA = "0x4DDCBC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000006")]
	[Address(RVA = "0x4DDD58", Offset = "0x4DDD58", VA = "0x4DDD58")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2F8A4C", Offset = "0x2F8A4C")]
	private IEnumerator Wait()
	{
		return null;
	}

	[Token(Token = "0x6000007")]
	[Address(RVA = "0x4DDE04", Offset = "0x4DDE04", VA = "0x4DDE04")]
	private void Update()
	{
	}

	[Token(Token = "0x6000008")]
	[Address(RVA = "0x4DDE08", Offset = "0x4DDE08", VA = "0x4DDE08")]
	public FaunsAnimatorController()
	{
	}
}
[Token(Token = "0x2000004")]
[ExecuteInEditMode]
public class BlendShapeLinker : MonoBehaviour
{
	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Transform boneParent;

	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string prefixeBLS;

	[Token(Token = "0x400000D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public string suffixeBLS;

	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string prefixeBone;

	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public string suffixeBone;

	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<string> linkedBonesName;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public List<GameObject> linkedBonesObjects;

	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private SkinnedMeshRenderer smr;

	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Mesh mesh;

	[Token(Token = "0x6000009")]
	[Address(RVA = "0x61C838", Offset = "0x61C838", VA = "0x61C838")]
	private void Start()
	{
	}

	[Token(Token = "0x600000A")]
	[Address(RVA = "0x61C8C4", Offset = "0x61C8C4", VA = "0x61C8C4")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600000B")]
	[Address(RVA = "0x61CA74", Offset = "0x61CA74", VA = "0x61CA74")]
	public void UpdateAnim()
	{
	}

	[Token(Token = "0x600000C")]
	[Address(RVA = "0x61CF2C", Offset = "0x61CF2C", VA = "0x61CF2C")]
	public BlendShapeLinker()
	{
	}
}
[Token(Token = "0x2000005")]
public class FacialConstraint : MonoBehaviour
{
	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Transform parentInBodyRig;

	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Transform parentInFacialRig;

	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public string prefixeBodyRig;

	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string suffixeBodyRig;

	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public string prefixeFacialRig;

	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string suffixeFacialRig;

	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[HideInInspector]
	public List<Transform> linkedBonesRigBody;

	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public List<Transform> linkedBonesRigFacial;

	[Token(Token = "0x600000D")]
	[Address(RVA = "0x4DD408", Offset = "0x4DD408", VA = "0x4DD408")]
	public FacialConstraint()
	{
	}
}
[Token(Token = "0x2000006")]
public class LaunchAnimationRandom : MonoBehaviour
{
	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private GameObject go_VinylAnimation;

	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float f_TimeMaxLaunch;

	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float f_TimeMinLaunch;

	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Animator Anim;

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool b_offset;

	[Token(Token = "0x600000E")]
	[Address(RVA = "0x4E8DDC", Offset = "0x4E8DDC", VA = "0x4E8DDC")]
	private void Start()
	{
	}

	[Token(Token = "0x600000F")]
	[Address(RVA = "0x4E8EAC", Offset = "0x4E8EAC", VA = "0x4E8EAC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000010")]
	[Address(RVA = "0x4E8FF0", Offset = "0x4E8FF0", VA = "0x4E8FF0")]
	private void Active()
	{
	}

	[Token(Token = "0x6000011")]
	[Address(RVA = "0x4E906C", Offset = "0x4E906C", VA = "0x4E906C")]
	public LaunchAnimationRandom()
	{
	}
}
[Token(Token = "0x2000007")]
public class LAunchSoundAtEndAnimation : StateMachineBehaviour
{
	[Token(Token = "0x6000012")]
	[Address(RVA = "0x4E45A0", Offset = "0x4E45A0", VA = "0x4E45A0", Slot = "4")]
	public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000013")]
	[Address(RVA = "0x4E45A4", Offset = "0x4E45A4", VA = "0x4E45A4")]
	public LAunchSoundAtEndAnimation()
	{
	}
}
[Token(Token = "0x2000008")]
public class ActiveAssets : MonoBehaviour
{
	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public bool m_ActiveAssets;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
	public bool m_Once;

	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private MeshRenderer[] m_MeshRenderer;

	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private SkinnedMeshRenderer[] m_SkinnedMeshRenderer;

	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private SpriteRenderer[] m_SpriteRenderer;

	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private ParticleSystem[] m_ParticleSystem;

	[Token(Token = "0x6000014")]
	[Address(RVA = "0x616CC0", Offset = "0x616CC0", VA = "0x616CC0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000015")]
	[Address(RVA = "0x616F4C", Offset = "0x616F4C", VA = "0x616F4C")]
	public void Update()
	{
	}

	[Token(Token = "0x6000016")]
	[Address(RVA = "0x6171FC", Offset = "0x6171FC", VA = "0x6171FC")]
	public ActiveAssets()
	{
	}
}
[Token(Token = "0x2000009")]
public class ActiveScene : MonoBehaviour
{
	[Token(Token = "0x6000017")]
	[Address(RVA = "0x61822C", Offset = "0x61822C", VA = "0x61822C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000018")]
	[Address(RVA = "0x618268", Offset = "0x618268", VA = "0x618268")]
	public ActiveScene()
	{
	}
}
[Token(Token = "0x200000A")]
public class AppEntitlementCheck : MonoBehaviour
{
	[Token(Token = "0x6000019")]
	[Address(RVA = "0x618270", Offset = "0x618270", VA = "0x618270")]
	public AppEntitlementCheck()
	{
	}
}
[Token(Token = "0x200000B")]
[ExecuteInEditMode]
public class BakeSkinMeshRenderer : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20003D5")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EA7A8", Offset = "0x2EA7A8")]
	private sealed class <>c
	{
		[Token(Token = "0x4001839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x400183A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static Func<SkinnedMeshRenderer, Material> <>9__1_0;

		[Token(Token = "0x400183B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Func<SkinnedMeshRenderer, string> <>9__1_1;

		[Token(Token = "0x600195F")]
		[Address(RVA = "0x61B4C4", Offset = "0x61B4C4", VA = "0x61B4C4")]
		public <>c()
		{
		}

		[Token(Token = "0x6001960")]
		[Address(RVA = "0x61B4CC", Offset = "0x61B4CC", VA = "0x61B4CC")]
		internal Material <OnEnable>b__1_0(SkinnedMeshRenderer renderer)
		{
			return null;
		}

		[Token(Token = "0x6001961")]
		[Address(RVA = "0x61B4F8", Offset = "0x61B4F8", VA = "0x61B4F8")]
		internal string <OnEnable>b__1_1(SkinnedMeshRenderer mg)
		{
			return null;
		}
	}

	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public bool ActiveBake;

	[Token(Token = "0x600001A")]
	[Address(RVA = "0x61A160", Offset = "0x61A160", VA = "0x61A160")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600001B")]
	[Address(RVA = "0x61B448", Offset = "0x61B448", VA = "0x61B448")]
	public BakeSkinMeshRenderer()
	{
	}
}
[Token(Token = "0x200000C")]
[ExecuteInEditMode]
public class ChangeLightmap : MonoBehaviour
{
	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float m_lerpControl;

	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Texture m_LM0;

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Texture m_LM1;

	[Token(Token = "0x600001C")]
	[Address(RVA = "0x624DCC", Offset = "0x624DCC", VA = "0x624DCC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600001D")]
	[Address(RVA = "0x624E54", Offset = "0x624E54", VA = "0x624E54")]
	private void Awake()
	{
	}

	[Token(Token = "0x600001E")]
	[Address(RVA = "0x624DD0", Offset = "0x624DD0", VA = "0x624DD0")]
	private void loadLightmap()
	{
	}

	[Token(Token = "0x600001F")]
	[Address(RVA = "0x624E58", Offset = "0x624E58", VA = "0x624E58")]
	private void Update()
	{
	}

	[Token(Token = "0x6000020")]
	[Address(RVA = "0x624EC0", Offset = "0x624EC0", VA = "0x624EC0")]
	public ChangeLightmap()
	{
	}
}
[Token(Token = "0x200000D")]
[ExecuteInEditMode]
public class ControlAmbientWithLight : MonoBehaviour
{
	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Light m_Light;

	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float m_multiplyColor;

	[Token(Token = "0x6000021")]
	[Address(RVA = "0x5F5024", Offset = "0x5F5024", VA = "0x5F5024")]
	private void Update()
	{
	}

	[Token(Token = "0x6000022")]
	[Address(RVA = "0x5F5098", Offset = "0x5F5098", VA = "0x5F5098")]
	public ControlAmbientWithLight()
	{
	}
}
[Token(Token = "0x200000E")]
[ExecuteInEditMode]
public class ControlSkyEmission : MonoBehaviour
{
	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public string MatPropertyName;

	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Color32 color;

	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Renderer rd;

	[Token(Token = "0x6000023")]
	[Address(RVA = "0x5F6A6C", Offset = "0x5F6A6C", VA = "0x5F6A6C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000024")]
	[Address(RVA = "0x5F6AD4", Offset = "0x5F6AD4", VA = "0x5F6AD4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000025")]
	[Address(RVA = "0x5F6B58", Offset = "0x5F6B58", VA = "0x5F6B58")]
	public ControlSkyEmission()
	{
	}
}
[Token(Token = "0x200000F")]
public class Credits : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20003D6")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x2EA7B8", Offset = "0x2EA7B8")]
	public struct Translations
	{
		[Token(Token = "0x400183C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string French;

		[Token(Token = "0x400183D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public string German;

		[Token(Token = "0x17000365")]
		public string Item
		{
			[Token(Token = "0x6001962")]
			[Address(RVA = "0x3A07CC", Offset = "0x3A07CC", VA = "0x3A07CC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001963")]
			[Address(RVA = "0x3A07D4", Offset = "0x3A07D4", VA = "0x3A07D4")]
			set
			{
			}
		}
	}

	[Serializable]
	[Token(Token = "0x20003D7")]
	public struct CreditsEntry
	{
		[Token(Token = "0x400183E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string Description;

		[Token(Token = "0x400183F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Translations Translations;

		[Token(Token = "0x4001840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "TextAreaAttribute", RVA = "0x2F6444", Offset = "0x2F6444")]
		public string Names;

		[Token(Token = "0x4001841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Locale Locale;

		[Token(Token = "0x17000366")]
		public string LocalizedDescription
		{
			[Token(Token = "0x6001964")]
			[Address(RVA = "0x3A06DC", Offset = "0x3A06DC", VA = "0x3A06DC")]
			get
			{
				return null;
			}
		}
	}

	[Serializable]
	[Token(Token = "0x20003D8")]
	public struct CreditsSection
	{
		[Token(Token = "0x4001842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string Title;

		[Token(Token = "0x4001843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Translations Translations;

		[Token(Token = "0x4001844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public List<CreditsEntry> Entries;

		[Token(Token = "0x4001845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Locale Locale;

		[Token(Token = "0x17000367")]
		public string LocalizedTitle
		{
			[Token(Token = "0x6001965")]
			[Address(RVA = "0x3A0740", Offset = "0x3A0740", VA = "0x3A0740")]
			get
			{
				return null;
			}
		}
	}

	[Token(Token = "0x20003D9")]
	private enum Place
	{
		[Token(Token = "0x4001847")]
		Left,
		[Token(Token = "0x4001848")]
		All,
		[Token(Token = "0x4001849")]
		Right
	}

	[Token(Token = "0x20003DA")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EA7EC", Offset = "0x2EA7EC")]
	private sealed class <>c__DisplayClass12_0
	{
		[Token(Token = "0x400184A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Credits <>4__this;

		[Token(Token = "0x400184B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public List<Transform> toDelete;

		[Token(Token = "0x6001966")]
		[Address(RVA = "0x5F8354", Offset = "0x5F8354", VA = "0x5F8354")]
		public <>c__DisplayClass12_0()
		{
		}

		[Token(Token = "0x6001967")]
		[Address(RVA = "0x5F9468", Offset = "0x5F9468", VA = "0x5F9468")]
		internal bool <_Regenerate>b__0(Transform tr)
		{
			return default(bool);
		}

		[Token(Token = "0x6001968")]
		[Address(RVA = "0x5F96F8", Offset = "0x5F96F8", VA = "0x5F96F8")]
		internal bool <_Regenerate>b__1(RectTransform t)
		{
			return default(bool);
		}

		[Token(Token = "0x6001969")]
		[Address(RVA = "0x5F97EC", Offset = "0x5F97EC", VA = "0x5F97EC")]
		internal bool <_Regenerate>b__2(RectTransform t)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x20003DB")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EA7FC", Offset = "0x2EA7FC")]
	private sealed class <>c__DisplayClass12_1
	{
		[Token(Token = "0x400184C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CreditsSection section;

		[Token(Token = "0x600196A")]
		[Address(RVA = "0x5F8864", Offset = "0x5F8864", VA = "0x5F8864")]
		public <>c__DisplayClass12_1()
		{
		}
	}

	[Token(Token = "0x20003DC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EA80C", Offset = "0x2EA80C")]
	private sealed class <>c__DisplayClass12_2
	{
		[Token(Token = "0x400184D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public RectTransform go;

		[Token(Token = "0x400184E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int entriesWithoutDescription;

		[Token(Token = "0x400184F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public <>c__DisplayClass12_1 CS$<>8__locals1;

		[Token(Token = "0x600196B")]
		[Address(RVA = "0x5F886C", Offset = "0x5F886C", VA = "0x5F886C")]
		public <>c__DisplayClass12_2()
		{
		}

		[Token(Token = "0x600196C")]
		[Address(RVA = "0x5F98DC", Offset = "0x5F98DC", VA = "0x5F98DC")]
		internal bool <_Regenerate>b__4(Transform tr)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x20003DD")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EA81C", Offset = "0x2EA81C")]
	private sealed class <>c__DisplayClass12_3
	{
		[Token(Token = "0x4001850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Transform tr;

		[Token(Token = "0x600196D")]
		[Address(RVA = "0x5F9C0C", Offset = "0x5F9C0C", VA = "0x5F9C0C")]
		public <>c__DisplayClass12_3()
		{
		}

		[Token(Token = "0x600196E")]
		[Address(RVA = "0x5F9C14", Offset = "0x5F9C14", VA = "0x5F9C14")]
		internal bool <_Regenerate>b__5(CreditsEntry entry)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x20003DE")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EA82C", Offset = "0x2EA82C")]
	private sealed class <>c__DisplayClass12_4
	{
		[Token(Token = "0x4001851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Transform tr;

		[Token(Token = "0x600196F")]
		[Address(RVA = "0x5F96F0", Offset = "0x5F96F0", VA = "0x5F96F0")]
		public <>c__DisplayClass12_4()
		{
		}

		[Token(Token = "0x6001970")]
		[Address(RVA = "0x5F9C74", Offset = "0x5F9C74", VA = "0x5F9C74")]
		internal bool <_Regenerate>b__6(CreditsSection sec)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x20003DF")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EA83C", Offset = "0x2EA83C")]
	private sealed class <>c__DisplayClass12_5
	{
		[Token(Token = "0x4001852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public RectTransform t;

		[Token(Token = "0x6001971")]
		[Address(RVA = "0x5F97E4", Offset = "0x5F97E4", VA = "0x5F97E4")]
		public <>c__DisplayClass12_5()
		{
		}

		[Token(Token = "0x6001972")]
		[Address(RVA = "0x5F9CD4", Offset = "0x5F9CD4", VA = "0x5F9CD4")]
		internal bool <_Regenerate>b__7(Transform td)
		{
			return default(bool);
		}
	}

	[Serializable]
	[Token(Token = "0x20003E0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EA84C", Offset = "0x2EA84C")]
	private sealed class <>c
	{
		[Token(Token = "0x4001853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x4001854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static Func<RectTransform, float> <>9__12_3;

		[Token(Token = "0x4001855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Predicate<CreditsSection> <>9__13_0;

		[Token(Token = "0x4001856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static Predicate<CreditsEntry> <>9__13_1;

		[Token(Token = "0x6001974")]
		[Address(RVA = "0x5F9238", Offset = "0x5F9238", VA = "0x5F9238")]
		public <>c()
		{
		}

		[Token(Token = "0x6001975")]
		[Address(RVA = "0x5F9240", Offset = "0x5F9240", VA = "0x5F9240")]
		internal float <_Regenerate>b__12_3(RectTransform t)
		{
			return default(float);
		}

		[Token(Token = "0x6001976")]
		[Address(RVA = "0x5F92B0", Offset = "0x5F92B0", VA = "0x5F92B0")]
		internal bool <StripCreditsFromOtherLocales>b__13_0(CreditsSection section)
		{
			return default(bool);
		}

		[Token(Token = "0x6001977")]
		[Address(RVA = "0x5F938C", Offset = "0x5F938C", VA = "0x5F938C")]
		internal bool <StripCreditsFromOtherLocales>b__13_1(CreditsEntry entry)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x20003E1")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EA85C", Offset = "0x2EA85C")]
	private sealed class <>c__DisplayClass15_0
	{
		[Token(Token = "0x4001857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string name;

		[Token(Token = "0x6001978")]
		[Address(RVA = "0x5F9148", Offset = "0x5F9148", VA = "0x5F9148")]
		public <>c__DisplayClass15_0()
		{
		}

		[Token(Token = "0x6001979")]
		[Address(RVA = "0x5F9DA4", Offset = "0x5F9DA4", VA = "0x5F9DA4")]
		internal bool <FindOrCreateRect>b__0(RectTransform t)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public bool Regenerate;

	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<CreditsSection> text;

	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public string LocalizedTableName;

	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public KeyDatabase LocalizedKeys;

	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int FontSize;

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Sprite Header;

	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Sprite Footer;

	[Token(Token = "0x6000026")]
	[Address(RVA = "0x5F6DB8", Offset = "0x5F6DB8", VA = "0x5F6DB8")]
	public void Awake()
	{
	}

	[Token(Token = "0x6000027")]
	[Address(RVA = "0x5F7160", Offset = "0x5F7160", VA = "0x5F7160")]
	public void _Regenerate()
	{
	}

	[Token(Token = "0x6000028")]
	[Address(RVA = "0x5F6DD4", Offset = "0x5F6DD4", VA = "0x5F6DD4")]
	private void StripCreditsFromOtherLocales()
	{
	}

	[Token(Token = "0x6000029")]
	[Address(RVA = "0x5F8E70", Offset = "0x5F8E70", VA = "0x5F8E70")]
	private Text FindOrCreateText(Transform parent, string name, string content, float width, float offset, Place place = Place.All)
	{
		return null;
	}

	[Token(Token = "0x600002A")]
	[Address(RVA = "0x5F8874", Offset = "0x5F8874", VA = "0x5F8874")]
	private RectTransform FindOrCreateRect(Transform parent, string name, float width, float offset, Place place = Place.All)
	{
		return null;
	}

	[Token(Token = "0x600002B")]
	[Address(RVA = "0x5F835C", Offset = "0x5F835C", VA = "0x5F835C")]
	private SpriteRenderer FindOrCreateSprite(Transform parent, string name, Sprite image, float width, float offset)
	{
		return null;
	}

	[Token(Token = "0x600002C")]
	[Address(RVA = "0x5F9150", Offset = "0x5F9150", VA = "0x5F9150")]
	public Credits()
	{
	}
}
[Token(Token = "0x2000010")]
public class DisableOnFocusLost : MonoBehaviour
{
	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private bool disabled;

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Image ToDisable;

	[Token(Token = "0x600002D")]
	[Address(RVA = "0x4DA698", Offset = "0x4DA698", VA = "0x4DA698")]
	public void Start()
	{
	}

	[Token(Token = "0x600002E")]
	[Address(RVA = "0x4DA744", Offset = "0x4DA744", VA = "0x4DA744")]
	private void OnApplicationFocus(bool focus)
	{
	}

	[Token(Token = "0x600002F")]
	[Address(RVA = "0x4DA92C", Offset = "0x4DA92C", VA = "0x4DA92C")]
	public DisableOnFocusLost()
	{
	}
}
[Token(Token = "0x2000011")]
[ExecuteAlways]
public class FogColorChangeWithLight : MonoBehaviour
{
	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Light m_Light;

	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float m_FogIntensity;

	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Color32 m_AddColor;

	[Token(Token = "0x6000030")]
	[Address(RVA = "0x4DF610", Offset = "0x4DF610", VA = "0x4DF610")]
	private void Update()
	{
	}

	[Token(Token = "0x6000031")]
	[Address(RVA = "0x4DF6C0", Offset = "0x4DF6C0", VA = "0x4DF6C0")]
	public FogColorChangeWithLight()
	{
	}
}
[Token(Token = "0x2000012")]
[ExecuteInEditMode]
public class GetEmissionColor : MonoBehaviour
{
	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Light lg;

	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float intensityAdd;

	[Token(Token = "0x400003E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private MaterialPropertyBlock _propBlock;

	[Token(Token = "0x400003F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Renderer _renderer;

	[Token(Token = "0x6000032")]
	[Address(RVA = "0x4DF834", Offset = "0x4DF834", VA = "0x4DF834")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000033")]
	[Address(RVA = "0x4DF8C0", Offset = "0x4DF8C0", VA = "0x4DF8C0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000034")]
	[Address(RVA = "0x4DFAA8", Offset = "0x4DFAA8", VA = "0x4DFAA8")]
	public GetEmissionColor()
	{
	}
}
[Token(Token = "0x2000013")]
[ExecuteInEditMode]
public class GetFadeColor : MonoBehaviour
{
	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Image image;

	[Token(Token = "0x4000041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private MeshRenderer meshr;

	[Token(Token = "0x6000035")]
	[Address(RVA = "0x4DFAB0", Offset = "0x4DFAB0", VA = "0x4DFAB0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000036")]
	[Address(RVA = "0x4DFB18", Offset = "0x4DFB18", VA = "0x4DFB18")]
	private void Update()
	{
	}

	[Token(Token = "0x6000037")]
	[Address(RVA = "0x4DFD00", Offset = "0x4DFD00", VA = "0x4DFD00")]
	public GetFadeColor()
	{
	}
}
[Token(Token = "0x2000014")]
[ExecuteAlways]
public class GetLightParameter : MonoBehaviour
{
	[Token(Token = "0x4000042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Light m_light;

	[Token(Token = "0x4000043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float intensityMul;

	[Token(Token = "0x4000044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Light m_ThisLight;

	[Token(Token = "0x6000038")]
	[Address(RVA = "0x4DFD08", Offset = "0x4DFD08", VA = "0x4DFD08")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000039")]
	[Address(RVA = "0x4DFD70", Offset = "0x4DFD70", VA = "0x4DFD70")]
	private void Update()
	{
	}

	[Token(Token = "0x600003A")]
	[Address(RVA = "0x4DFE34", Offset = "0x4DFE34", VA = "0x4DFE34")]
	public GetLightParameter()
	{
	}
}
[Token(Token = "0x2000015")]
[ExecuteAlways]
public class GetTargetToShader : MonoBehaviour
{
	[Token(Token = "0x600003B")]
	[Address(RVA = "0x4E0204", Offset = "0x4E0204", VA = "0x4E0204")]
	private void Update()
	{
	}

	[Token(Token = "0x600003C")]
	[Address(RVA = "0x4E02EC", Offset = "0x4E02EC", VA = "0x4E02EC")]
	public GetTargetToShader()
	{
	}
}
[Token(Token = "0x2000016")]
[ExecuteInEditMode]
public class LightControlAsset : MonoBehaviour
{
	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Light m_Light;

	[Token(Token = "0x4000046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private MeshRenderer m_Mr;

	[Token(Token = "0x600003D")]
	[Address(RVA = "0x4E9D54", Offset = "0x4E9D54", VA = "0x4E9D54")]
	private void Start()
	{
	}

	[Token(Token = "0x600003E")]
	[Address(RVA = "0x4E9DBC", Offset = "0x4E9DBC", VA = "0x4E9DBC")]
	private void Update()
	{
	}

	[Token(Token = "0x600003F")]
	[Address(RVA = "0x4E9EC4", Offset = "0x4E9EC4", VA = "0x4E9EC4")]
	public LightControlAsset()
	{
	}
}
[Token(Token = "0x2000017")]
[ExecuteInEditMode]
public class LightDirectionControl : MonoBehaviour
{
	[Token(Token = "0x4000047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public string ShaderPropertyColorA;

	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Color32 LightColor;

	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Color32 LightColorBack;

	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float LightAttenuation;

	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float LightIntensity;

	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string ShaderPropertyVector;

	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Light m_Light;

	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool IscontrolByLight;

	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool inverse;

	[Token(Token = "0x6000040")]
	[Address(RVA = "0x4EB08C", Offset = "0x4EB08C", VA = "0x4EB08C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000041")]
	[Address(RVA = "0x4EB4E8", Offset = "0x4EB4E8", VA = "0x4EB4E8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000042")]
	[Address(RVA = "0x4EB090", Offset = "0x4EB090", VA = "0x4EB090")]
	private void init()
	{
	}

	[Token(Token = "0x6000043")]
	[Address(RVA = "0x4EB4EC", Offset = "0x4EB4EC", VA = "0x4EB4EC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000044")]
	[Address(RVA = "0x4EB5B0", Offset = "0x4EB5B0", VA = "0x4EB5B0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000045")]
	[Address(RVA = "0x4EB5B4", Offset = "0x4EB5B4", VA = "0x4EB5B4")]
	public LightDirectionControl()
	{
	}
}
[Token(Token = "0x2000018")]
public class LoadingSplash : MonoBehaviour
{
	[Token(Token = "0x4000050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public GameObject[] SplashPanels;

	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float SecondsPerSplash;

	[Token(Token = "0x4000052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Image fade;

	[Token(Token = "0x4000053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool ready;

	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float startTime;

	[Token(Token = "0x4000055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool Skip;

	[Token(Token = "0x17000001")]
	public bool Ready
	{
		[Token(Token = "0x6000046")]
		[Address(RVA = "0x4ED3B0", Offset = "0x4ED3B0", VA = "0x4ED3B0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000047")]
	[Address(RVA = "0x4ED3B8", Offset = "0x4ED3B8", VA = "0x4ED3B8")]
	public void Awake()
	{
	}

	[Token(Token = "0x6000048")]
	[Address(RVA = "0x4ED430", Offset = "0x4ED430", VA = "0x4ED430")]
	public void Start()
	{
	}

	[Token(Token = "0x6000049")]
	[Address(RVA = "0x4ED50C", Offset = "0x4ED50C", VA = "0x4ED50C")]
	public void Update()
	{
	}

	[Token(Token = "0x600004A")]
	[Address(RVA = "0x4ED8A0", Offset = "0x4ED8A0", VA = "0x4ED8A0")]
	public LoadingSplash()
	{
	}
}
[Token(Token = "0x2000019")]
public class Pause : MonoBehaviour
{
	[Token(Token = "0x20003E2")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EA86C", Offset = "0x2EA86C")]
	private sealed class <>c__DisplayClass10_0
	{
		[Token(Token = "0x4001858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public UnityEngine.Object so;

		[Token(Token = "0x4001859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Func<PlayableBinding, bool> <>9__9;

		[Token(Token = "0x600197A")]
		[Address(RVA = "0x8B84C8", Offset = "0x8B84C8", VA = "0x8B84C8")]
		public <>c__DisplayClass10_0()
		{
		}

		[Token(Token = "0x600197B")]
		[Address(RVA = "0x8B8A08", Offset = "0x8B8A08", VA = "0x8B8A08")]
		internal bool <_Pause>b__8(PlayableDirector tl)
		{
			return default(bool);
		}

		[Token(Token = "0x600197C")]
		[Address(RVA = "0x8B8B10", Offset = "0x8B8B10", VA = "0x8B8B10")]
		internal bool <_Pause>b__9(PlayableBinding o)
		{
			return default(bool);
		}
	}

	[Serializable]
	[Token(Token = "0x20003E3")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EA87C", Offset = "0x2EA87C")]
	private sealed class <>c
	{
		[Token(Token = "0x400185A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x400185B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static Func<PlayableDirector, bool> <>9__10_0;

		[Token(Token = "0x400185C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Func<PlayableDirector, IEnumerable<PlayableBinding>> <>9__10_1;

		[Token(Token = "0x400185D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static Func<PlayableBinding, bool> <>9__10_2;

		[Token(Token = "0x400185E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static Func<PlayableBinding, UnityEngine.Object> <>9__10_3;

		[Token(Token = "0x400185F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public static Func<AudioSource, bool> <>9__10_5;

		[Token(Token = "0x4001860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static Action<PlayableDirector> <>9__10_6;

		[Token(Token = "0x4001861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public static Action<AudioSource> <>9__10_7;

		[Token(Token = "0x4001862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static Action<PlayableDirector> <>9__11_0;

		[Token(Token = "0x4001863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public static Action<AudioSource> <>9__11_1;

		[Token(Token = "0x4001864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static Action<Transform> <>9__12_1;

		[Token(Token = "0x600197E")]
		[Address(RVA = "0x8B86AC", Offset = "0x8B86AC", VA = "0x8B86AC")]
		public <>c()
		{
		}

		[Token(Token = "0x600197F")]
		[Address(RVA = "0x8B86B4", Offset = "0x8B86B4", VA = "0x8B86B4")]
		internal bool <_Pause>b__10_0(PlayableDirector tl)
		{
			return default(bool);
		}

		[Token(Token = "0x6001980")]
		[Address(RVA = "0x8B8718", Offset = "0x8B8718", VA = "0x8B8718")]
		internal IEnumerable<PlayableBinding> <_Pause>b__10_1(PlayableDirector tl)
		{
			return null;
		}

		[Token(Token = "0x6001981")]
		[Address(RVA = "0x8B876C", Offset = "0x8B876C", VA = "0x8B876C")]
		internal bool <_Pause>b__10_2(PlayableBinding o)
		{
			return default(bool);
		}

		[Token(Token = "0x6001982")]
		[Address(RVA = "0x8B8834", Offset = "0x8B8834", VA = "0x8B8834")]
		internal UnityEngine.Object <_Pause>b__10_3(PlayableBinding o)
		{
			return null;
		}

		[Token(Token = "0x6001983")]
		[Address(RVA = "0x8B8860", Offset = "0x8B8860", VA = "0x8B8860")]
		internal bool <_Pause>b__10_5(AudioSource aus)
		{
			return default(bool);
		}

		[Token(Token = "0x6001984")]
		[Address(RVA = "0x8B888C", Offset = "0x8B888C", VA = "0x8B888C")]
		internal void <_Pause>b__10_6(PlayableDirector tl)
		{
		}

		[Token(Token = "0x6001985")]
		[Address(RVA = "0x8B88B8", Offset = "0x8B88B8", VA = "0x8B88B8")]
		internal void <_Pause>b__10_7(AudioSource aus)
		{
		}

		[Token(Token = "0x6001986")]
		[Address(RVA = "0x8B88E4", Offset = "0x8B88E4", VA = "0x8B88E4")]
		internal void <_UnPause>b__11_0(PlayableDirector tl)
		{
		}

		[Token(Token = "0x6001987")]
		[Address(RVA = "0x8B898C", Offset = "0x8B898C", VA = "0x8B898C")]
		internal void <_UnPause>b__11_1(AudioSource aus)
		{
		}

		[Token(Token = "0x6001988")]
		[Address(RVA = "0x8B89B8", Offset = "0x8B89B8", VA = "0x8B89B8")]
		internal void <_Restart>b__12_1(Transform tr)
		{
		}
	}

	[Token(Token = "0x4000056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public GameObject PauseMenu;

	[Token(Token = "0x4000057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GameObject DontPauseIfActive;

	[Token(Token = "0x4000058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private bool Paused;

	[Token(Token = "0x4000059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
	private bool Restarting;

	[Token(Token = "0x400005A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<PlayableDirector> Timelines;

	[Token(Token = "0x400005B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private List<AudioSource> AudioSources;

	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Camera MainCamera;

	[Token(Token = "0x600004C")]
	[Address(RVA = "0x8B70D0", Offset = "0x8B70D0", VA = "0x8B70D0")]
	private void OnApplicationPause(bool pause)
	{
	}

	[Token(Token = "0x600004D")]
	[Address(RVA = "0x8B7AD8", Offset = "0x8B7AD8", VA = "0x8B7AD8")]
	private void OnApplicationFocus(bool focus)
	{
	}

	[Token(Token = "0x600004E")]
	[Address(RVA = "0x8B7AE4", Offset = "0x8B7AE4", VA = "0x8B7AE4")]
	public void Update()
	{
	}

	[Token(Token = "0x600004F")]
	[Address(RVA = "0x8B70DC", Offset = "0x8B70DC", VA = "0x8B70DC")]
	public void _Pause()
	{
	}

	[Token(Token = "0x6000050")]
	[Address(RVA = "0x8B7D0C", Offset = "0x8B7D0C", VA = "0x8B7D0C")]
	public void _UnPause()
	{
	}

	[Token(Token = "0x6000051")]
	[Address(RVA = "0x8B8044", Offset = "0x8B8044", VA = "0x8B8044")]
	public void _Restart()
	{
	}

	[Token(Token = "0x6000052")]
	[Address(RVA = "0x8B82B8", Offset = "0x8B82B8", VA = "0x8B82B8")]
	public Pause()
	{
	}

	[Token(Token = "0x6000053")]
	[Address(RVA = "0x8B8378", Offset = "0x8B8378", VA = "0x8B8378")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F8AC4", Offset = "0x2F8AC4")]
	private AudioSource <_Pause>b__10_4(UnityEngine.Object so)
	{
		return null;
	}

	[Token(Token = "0x6000054")]
	[Address(RVA = "0x8B84D0", Offset = "0x8B84D0", VA = "0x8B84D0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F8AD4", Offset = "0x2F8AD4")]
	private bool <_Restart>b__12_0(Transform tr)
	{
		return default(bool);
	}
}
[Token(Token = "0x200001A")]
[ExecuteInEditMode]
public class QualityShadow : MonoBehaviour
{
	[Token(Token = "0x400005D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public int m_PixelLightCount;

	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float m_ShadowDistane;

	[Token(Token = "0x400005F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public ShadowProjection m_shadowProjection;

	[Token(Token = "0x4000060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int m_PixelLightCountSav;

	[Token(Token = "0x4000061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float m_ShadowDistaneSav;

	[Token(Token = "0x4000062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ShadowProjection m_shadowProjectionSav;

	[Token(Token = "0x6000055")]
	[Address(RVA = "0x686604", Offset = "0x686604", VA = "0x686604")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000056")]
	[Address(RVA = "0x686654", Offset = "0x686654", VA = "0x686654")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000057")]
	[Address(RVA = "0x686688", Offset = "0x686688", VA = "0x686688")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000058")]
	[Address(RVA = "0x6866BC", Offset = "0x6866BC", VA = "0x6866BC")]
	public QualityShadow()
	{
	}
}
[Token(Token = "0x200001B")]
public class Quit : MonoBehaviour
{
	[Token(Token = "0x6000059")]
	[Address(RVA = "0x6866D8", Offset = "0x6866D8", VA = "0x6866D8")]
	public void QuitTheGame()
	{
	}

	[Token(Token = "0x600005A")]
	[Address(RVA = "0x6866E0", Offset = "0x6866E0", VA = "0x6866E0")]
	public Quit()
	{
	}
}
[Token(Token = "0x200001C")]
public class RenderQueueOrderAuto : MonoBehaviour
{
	[Token(Token = "0x4000063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private List<Material> m_currentMat;

	[Token(Token = "0x4000064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private List<Material> m_MatFilter;

	[Token(Token = "0x4000065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Renderer[] rs;

	[Token(Token = "0x4000066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<int> m_currentRenderQueue;

	[Token(Token = "0x4000067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private string m_debug;

	[Token(Token = "0x600005B")]
	[Address(RVA = "0x686A20", Offset = "0x686A20", VA = "0x686A20")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600005C")]
	[Address(RVA = "0x68767C", Offset = "0x68767C", VA = "0x68767C")]
	private bool IfExistMat(Material mat)
	{
		return default(bool);
	}

	[Token(Token = "0x600005D")]
	[Address(RVA = "0x687800", Offset = "0x687800", VA = "0x687800")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600005E")]
	[Address(RVA = "0x687988", Offset = "0x687988", VA = "0x687988")]
	public RenderQueueOrderAuto()
	{
	}
}
[Token(Token = "0x200001D")]
[ExecuteInEditMode]
public class ResetTransform : MonoBehaviour
{
	[Token(Token = "0x600005F")]
	[Address(RVA = "0x687A60", Offset = "0x687A60", VA = "0x687A60")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000060")]
	[Address(RVA = "0x687B98", Offset = "0x687B98", VA = "0x687B98")]
	public ResetTransform()
	{
	}
}
[Token(Token = "0x200001E")]
public class ThisIsComment : MonoBehaviour
{
	[Token(Token = "0x4000068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "TextAreaAttribute", RVA = "0x2ECC7C", Offset = "0x2ECC7C")]
	public string Notes;

	[Token(Token = "0x6000061")]
	[Address(RVA = "0x59C2C0", Offset = "0x59C2C0", VA = "0x59C2C0")]
	public ThisIsComment()
	{
	}
}
[Token(Token = "0x200001F")]
[ExecuteInEditMode]
public class VolumetricCone : MonoBehaviour
{
	[Token(Token = "0x4000069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Light light;

	[Token(Token = "0x400006A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public MeshRenderer geometry;

	[Token(Token = "0x400006B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public bool updateShapeInEditor;

	[Token(Token = "0x400006C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
	public bool updateShapeInGame;

	[Token(Token = "0x400006D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
	public bool updateColorInEditor;

	[Token(Token = "0x400006E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17")]
	public bool updateColorInGame;

	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float fresnelPower;

	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float fresnelScale;

	[Token(Token = "0x4000071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float rangeFactor;

	[Token(Token = "0x4000072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float intensityFactor;

	[Token(Token = "0x4000073")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool _updateShape;

	[Token(Token = "0x4000074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool _updateColor;

	[Token(Token = "0x4000075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private MaterialPropertyBlock _propBlock;

	[Token(Token = "0x6000062")]
	[Address(RVA = "0x1789B90", Offset = "0x1789B90", VA = "0x1789B90")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000063")]
	[Address(RVA = "0x1789BA4", Offset = "0x1789BA4", VA = "0x1789BA4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000064")]
	[Address(RVA = "0x1789BB8", Offset = "0x1789BB8", VA = "0x1789BB8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000065")]
	[Address(RVA = "0x178A148", Offset = "0x178A148", VA = "0x178A148")]
	private void InitLightAndGeometry()
	{
	}

	[Token(Token = "0x6000066")]
	[Address(RVA = "0x1789BD4", Offset = "0x1789BD4", VA = "0x1789BD4")]
	private void UpdateShape()
	{
	}

	[Token(Token = "0x6000067")]
	[Address(RVA = "0x1789F00", Offset = "0x1789F00", VA = "0x1789F00")]
	private void UpdateColor()
	{
	}

	[Token(Token = "0x6000068")]
	[Address(RVA = "0x178A308", Offset = "0x178A308", VA = "0x178A308")]
	public VolumetricCone()
	{
	}
}
[Token(Token = "0x2000020")]
public class WarmUpShaders : MonoBehaviour
{
	[Token(Token = "0x4000076")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public ShaderVariantCollection shaderVariantCollection;

	[Token(Token = "0x4000077")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public MonoBehaviour Next;

	[Token(Token = "0x6000069")]
	[Address(RVA = "0x178A328", Offset = "0x178A328", VA = "0x178A328")]
	public void Start()
	{
	}

	[Token(Token = "0x600006A")]
	[Address(RVA = "0x178A354", Offset = "0x178A354", VA = "0x178A354")]
	public void Update()
	{
	}

	[Token(Token = "0x600006B")]
	[Address(RVA = "0x178A45C", Offset = "0x178A45C", VA = "0x178A45C")]
	public WarmUpShaders()
	{
	}
}
[Token(Token = "0x2000021")]
public class AudioMixerManager : MonoBehaviour
{
	[Token(Token = "0x4000078")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public AudioMixer audioMixer;

	[Token(Token = "0x600006C")]
	[Address(RVA = "0x619028", Offset = "0x619028", VA = "0x619028")]
	public void ResetAllChannels()
	{
	}

	[Token(Token = "0x600006D")]
	[Address(RVA = "0x619138", Offset = "0x619138", VA = "0x619138")]
	public void setChannelFloat(string channelName, float soundLevel)
	{
	}

	[Token(Token = "0x600006E")]
	[Address(RVA = "0x619174", Offset = "0x619174", VA = "0x619174")]
	public AudioMixerManager()
	{
	}
}
[Token(Token = "0x2000022")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x2E5AF8", Offset = "0x2E5AF8")]
public class CircularSoundWave : MonoBehaviour
{
	[Token(Token = "0x4000079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public string AudioSourcePath;

	[Token(Token = "0x400007A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public AudioSource source;

	[Token(Token = "0x400007B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float baseRadius;

	[Token(Token = "0x400007C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float amplitudeMultiplier;

	[Token(Token = "0x400007D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public AnimationCurve amplifierCurve;

	[Token(Token = "0x400007E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2ECC8C", Offset = "0x2ECC8C")]
	public int repeat;

	[Token(Token = "0x400007F")]
	public const int SAMPLE_SIZE = 512;

	[Token(Token = "0x4000080")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	[HideInInspector]
	private LineRenderer line;

	[Token(Token = "0x4000081")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float[] values;

	[Token(Token = "0x4000082")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3[] points;

	[Token(Token = "0x600006F")]
	[Address(RVA = "0x629A64", Offset = "0x629A64", VA = "0x629A64")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000070")]
	[Address(RVA = "0x629B34", Offset = "0x629B34", VA = "0x629B34")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000071")]
	[Address(RVA = "0x629B38", Offset = "0x629B38", VA = "0x629B38")]
	public void SetupPoints()
	{
	}

	[Token(Token = "0x6000072")]
	[Address(RVA = "0x62A1D4", Offset = "0x62A1D4", VA = "0x62A1D4")]
	public CircularSoundWave()
	{
	}
}
[Token(Token = "0x2000023")]
public class SpectrumData : MonoBehaviour
{
	[Token(Token = "0x4000083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public string AudioSourcePath;

	[Token(Token = "0x4000084")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public AudioSource audiosource;

	[Token(Token = "0x4000085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public LineRenderer lineRenderer;

	[Token(Token = "0x4000086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float amplitudeMultiplier;

	[Token(Token = "0x4000087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int ARRAY_SIZE;

	[Token(Token = "0x4000088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int limiteMin;

	[Token(Token = "0x4000089")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int limiteMax;

	[Token(Token = "0x6000073")]
	[Address(RVA = "0xA8D750", Offset = "0xA8D750", VA = "0xA8D750")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000074")]
	[Address(RVA = "0xA8D820", Offset = "0xA8D820", VA = "0xA8D820")]
	private void Update()
	{
	}

	[Token(Token = "0x6000075")]
	[Address(RVA = "0xA8DB40", Offset = "0xA8DB40", VA = "0xA8DB40")]
	public SpectrumData()
	{
	}
}
[Token(Token = "0x2000024")]
public class CameraFilter : MonoBehaviour
{
	[Token(Token = "0x400008A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Material MaterialFilter;

	[Token(Token = "0x400008B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Collider otherCollider;

	[Token(Token = "0x400008C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float distMin;

	[Token(Token = "0x400008D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float distMax;

	[Token(Token = "0x400008E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Transform tr;

	[Token(Token = "0x400008F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool isInCube;

	[Token(Token = "0x6000077")]
	[Address(RVA = "0x622EA4", Offset = "0x622EA4", VA = "0x622EA4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000078")]
	[Address(RVA = "0x622EC0", Offset = "0x622EC0", VA = "0x622EC0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000079")]
	[Address(RVA = "0x62314C", Offset = "0x62314C", VA = "0x62314C")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x600007A")]
	[Address(RVA = "0x623314", Offset = "0x623314", VA = "0x623314")]
	public CameraFilter()
	{
	}
}
[Token(Token = "0x2000025")]
public class BattlescarController : MonoBehaviour
{
	[Token(Token = "0x4000090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public ChapterManager chapterManager;

	[Token(Token = "0x4000091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GameObject DebugUIGameObject;

	[Token(Token = "0x4000092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public GameObject DebugSoundGameObject;

	[Token(Token = "0x4000093")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool isPlay;

	[Token(Token = "0x4000094")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	private bool isControlPressed;

	[Token(Token = "0x600007B")]
	[Address(RVA = "0x61B544", Offset = "0x61B544", VA = "0x61B544")]
	private void Update()
	{
	}

	[Token(Token = "0x600007C")]
	[Address(RVA = "0x61C00C", Offset = "0x61C00C", VA = "0x61C00C")]
	public BattlescarController()
	{
	}
}
[Token(Token = "0x2000026")]
public class Chapter : MonoBehaviour
{
	[Token(Token = "0x20003E4")]
	public delegate void OnStepStarted(string stepName);

	[Token(Token = "0x20003E5")]
	public delegate void OnStepFinished();

	[Token(Token = "0x4000095")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public ChapterStaticManager.Episode EpisodeIndex;

	[Token(Token = "0x4000098")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<ChapterStepConfig> stepConfigs;

	[Token(Token = "0x4000099")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ECCF4", Offset = "0x2ECCF4")]
	private bool <isPlaying>k__BackingField;

	[Token(Token = "0x400009A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ECD04", Offset = "0x2ECD04")]
	private bool <isChapterRunning>k__BackingField;

	[Token(Token = "0x400009B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<ChapterStep> running;

	[Token(Token = "0x400009C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int runningCount;

	[Token(Token = "0x400009D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int m_stepIndex;

	[Token(Token = "0x400009E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int m_stepMax;

	[Token(Token = "0x400009F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool m_initialize;

	[Token(Token = "0x40000A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private List<ParticleSystem> particleSystemsCache;

	[Token(Token = "0x40000A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<VideoPlayer> VideoPlayerCache;

	[Token(Token = "0x17000002")]
	public bool isPlaying
	{
		[Token(Token = "0x6000081")]
		[Address(RVA = "0x625230", Offset = "0x625230", VA = "0x625230")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F8B24", Offset = "0x2F8B24")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000082")]
		[Address(RVA = "0x625238", Offset = "0x625238", VA = "0x625238")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F8B34", Offset = "0x2F8B34")]
		private set
		{
		}
	}

	[Token(Token = "0x17000003")]
	public bool isChapterRunning
	{
		[Token(Token = "0x6000083")]
		[Address(RVA = "0x625240", Offset = "0x625240", VA = "0x625240")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F8B44", Offset = "0x2F8B44")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000084")]
		[Address(RVA = "0x625248", Offset = "0x625248", VA = "0x625248")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F8B54", Offset = "0x2F8B54")]
		private set
		{
		}
	}

	[Token(Token = "0x14000001")]
	public static event OnStepStarted OnStepStartedEvent
	{
		[Token(Token = "0x600007D")]
		[Address(RVA = "0x624EC8", Offset = "0x624EC8", VA = "0x624EC8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F8AE4", Offset = "0x2F8AE4")]
		add
		{
		}
		[Token(Token = "0x600007E")]
		[Address(RVA = "0x624FA0", Offset = "0x624FA0", VA = "0x624FA0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F8AF4", Offset = "0x2F8AF4")]
		remove
		{
		}
	}

	[Token(Token = "0x14000002")]
	public static event OnStepFinished OnStepFinishedEvent
	{
		[Token(Token = "0x600007F")]
		[Address(RVA = "0x625078", Offset = "0x625078", VA = "0x625078")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F8B04", Offset = "0x2F8B04")]
		add
		{
		}
		[Token(Token = "0x6000080")]
		[Address(RVA = "0x625154", Offset = "0x625154", VA = "0x625154")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F8B14", Offset = "0x2F8B14")]
		remove
		{
		}
	}

	[Token(Token = "0x6000085")]
	[Address(RVA = "0x625250", Offset = "0x625250", VA = "0x625250")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000086")]
	[Address(RVA = "0x62525C", Offset = "0x62525C", VA = "0x62525C")]
	public string LogStep()
	{
		return null;
	}

	[Token(Token = "0x6000087")]
	[Address(RVA = "0x625434", Offset = "0x625434", VA = "0x625434")]
	public ChapterStepConfig GetCurrentConfig()
	{
		return null;
	}

	[Token(Token = "0x6000088")]
	[Address(RVA = "0x6254B8", Offset = "0x6254B8", VA = "0x6254B8")]
	public string GetStepName()
	{
		return null;
	}

	[Token(Token = "0x6000089")]
	[Address(RVA = "0x6255D4", Offset = "0x6255D4", VA = "0x6255D4")]
	public float GetMaxTime()
	{
		return default(float);
	}

	[Token(Token = "0x600008A")]
	[Address(RVA = "0x6256E0", Offset = "0x6256E0", VA = "0x6256E0")]
	public string GetMaxTimeString()
	{
		return null;
	}

	[Token(Token = "0x600008B")]
	[Address(RVA = "0x62575C", Offset = "0x62575C", VA = "0x62575C")]
	public float GetCurrentTime()
	{
		return default(float);
	}

	[Token(Token = "0x600008C")]
	[Address(RVA = "0x625868", Offset = "0x625868", VA = "0x625868")]
	public string GetCurrentTimeString()
	{
		return null;
	}

	[Token(Token = "0x600008D")]
	[Address(RVA = "0x6258E8", Offset = "0x6258E8", VA = "0x6258E8")]
	public void CalculateSeconds()
	{
	}

	[Token(Token = "0x600008E")]
	[Address(RVA = "0x625BA8", Offset = "0x625BA8", VA = "0x625BA8")]
	public void Init()
	{
	}

	[Token(Token = "0x600008F")]
	[Address(RVA = "0x625D30", Offset = "0x625D30", VA = "0x625D30")]
	public void Clean()
	{
	}

	[Token(Token = "0x6000090")]
	[Address(RVA = "0x625EB0", Offset = "0x625EB0", VA = "0x625EB0")]
	public void PlayTimeLine()
	{
	}

	[Token(Token = "0x6000091")]
	[Address(RVA = "0x62616C", Offset = "0x62616C", VA = "0x62616C")]
	public void PauseTimeLine()
	{
	}

	[Token(Token = "0x6000092")]
	[Address(RVA = "0x62650C", Offset = "0x62650C", VA = "0x62650C")]
	public void Restart()
	{
	}

	[Token(Token = "0x6000093")]
	[Address(RVA = "0x626850", Offset = "0x626850", VA = "0x626850")]
	public void Rewind()
	{
	}

	[Token(Token = "0x6000094")]
	[Address(RVA = "0x626CF8", Offset = "0x626CF8", VA = "0x626CF8")]
	public void FastForward()
	{
	}

	[Token(Token = "0x6000095")]
	[Address(RVA = "0x62707C", Offset = "0x62707C", VA = "0x62707C")]
	public void GoToNextTimeLine()
	{
	}

	[Token(Token = "0x6000096")]
	[Address(RVA = "0x627DC4", Offset = "0x627DC4", VA = "0x627DC4")]
	public void GoToPreviousTimeline()
	{
	}

	[Token(Token = "0x6000097")]
	[Address(RVA = "0x627548", Offset = "0x627548", VA = "0x627548")]
	private void UnloadAllScenes()
	{
	}

	[Token(Token = "0x6000098")]
	[Address(RVA = "0x62819C", Offset = "0x62819C", VA = "0x62819C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000099")]
	[Address(RVA = "0x6281A0", Offset = "0x6281A0", VA = "0x6281A0")]
	public void StartChapter(int indexStep = 0, int endStep = 0)
	{
	}

	[Token(Token = "0x600009A")]
	[Address(RVA = "0x627398", Offset = "0x627398", VA = "0x627398")]
	public void StopCurrentStep()
	{
	}

	[Token(Token = "0x600009B")]
	[Address(RVA = "0x6282B4", Offset = "0x6282B4", VA = "0x6282B4")]
	public void Pause()
	{
	}

	[Token(Token = "0x600009C")]
	[Address(RVA = "0x6282C0", Offset = "0x6282C0", VA = "0x6282C0")]
	public void Resume()
	{
	}

	[Token(Token = "0x600009D")]
	[Address(RVA = "0x6282D8", Offset = "0x6282D8", VA = "0x6282D8")]
	private void OnPauseChapterMessageHandler(OnPauseChapterMessage msg)
	{
	}

	[Token(Token = "0x600009E")]
	[Address(RVA = "0x6282E4", Offset = "0x6282E4", VA = "0x6282E4")]
	private void OnResumeChapterMessageHandler(OnResumeChapterMessage msg)
	{
	}

	[Token(Token = "0x600009F")]
	[Address(RVA = "0x627650", Offset = "0x627650", VA = "0x627650")]
	public void ExecuteNextChapter()
	{
	}

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0x6284EC", Offset = "0x6284EC", VA = "0x6284EC")]
	private void CurrentStep_OnComplete(ChapterStep chapterStep)
	{
	}

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0x628834", Offset = "0x628834", VA = "0x628834")]
	private void Update()
	{
	}

	[Token(Token = "0x60000A2")]
	[Address(RVA = "0x6286B4", Offset = "0x6286B4", VA = "0x6286B4")]
	private void StepFinished()
	{
	}

	[Token(Token = "0x60000A3")]
	[Address(RVA = "0x6283D4", Offset = "0x6283D4", VA = "0x6283D4")]
	private void StepStarted(string stepName)
	{
	}

	[Token(Token = "0x60000A4")]
	[Address(RVA = "0x628F7C", Offset = "0x628F7C", VA = "0x628F7C")]
	public Chapter()
	{
	}
}
[Token(Token = "0x2000027")]
public class ChapterLauncher : MonoBehaviour
{
	[Token(Token = "0x40000A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Chapter chapter;

	[Token(Token = "0x40000A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool launchOnStart;

	[Token(Token = "0x40000A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int stepBegin;

	[Token(Token = "0x40000A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2ECD14", Offset = "0x2ECD14")]
	public int stepEnd;

	[Token(Token = "0x60000A5")]
	[Address(RVA = "0x6290A0", Offset = "0x6290A0", VA = "0x6290A0")]
	private void Start()
	{
	}

	[Token(Token = "0x60000A6")]
	[Address(RVA = "0x6290B0", Offset = "0x6290B0", VA = "0x6290B0")]
	public void Init()
	{
	}

	[Token(Token = "0x60000A7")]
	[Address(RVA = "0x6291D0", Offset = "0x6291D0", VA = "0x6291D0")]
	private void Update()
	{
	}

	[Token(Token = "0x60000A8")]
	[Address(RVA = "0x6291D4", Offset = "0x6291D4", VA = "0x6291D4")]
	public ChapterLauncher()
	{
	}
}
[Serializable]
[Token(Token = "0x2000028")]
public struct TupleChapter
{
	[Token(Token = "0x40000A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ChapterStaticManager.Episode episode;

	[Token(Token = "0x40000A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public ChapterLauncher chapter;
}
[Token(Token = "0x2000029")]
public class ChapterManager : MonoBehaviour
{
	[Token(Token = "0x40000A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x2ECD78", Offset = "0x2ECD78")]
	public ChapterLauncher chapDebug;

	[Token(Token = "0x40000A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x2ECDAC", Offset = "0x2ECDAC")]
	public ChapterLauncher chapBuild;

	[Token(Token = "0x40000AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[HideInInspector]
	public ChapterLauncher currentChapter;

	[Token(Token = "0x40000AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent EventOnPlay;

	[Token(Token = "0x40000AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public UnityEvent EventOnPause;

	[Token(Token = "0x40000AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TupleChapter[] Chapters;

	[Token(Token = "0x40000AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool launchMenu;

	[Token(Token = "0x60000A9")]
	[Address(RVA = "0x6291DC", Offset = "0x6291DC", VA = "0x6291DC")]
	private void Start()
	{
	}

	[Token(Token = "0x60000AA")]
	[Address(RVA = "0x6291E0", Offset = "0x6291E0", VA = "0x6291E0")]
	public void Init()
	{
	}

	[Token(Token = "0x60000AB")]
	[Address(RVA = "0x62932C", Offset = "0x62932C", VA = "0x62932C")]
	public void launchChapter(ChapterLauncher chap)
	{
	}

	[Token(Token = "0x60000AC")]
	[Address(RVA = "0x62940C", Offset = "0x62940C", VA = "0x62940C")]
	public void launchChapterFromBeginning(ChapterLauncher chap)
	{
	}

	[Token(Token = "0x60000AD")]
	[Address(RVA = "0x61B920", Offset = "0x61B920", VA = "0x61B920")]
	public void PlayPause(bool isPlay)
	{
	}

	[Token(Token = "0x60000AE")]
	[Address(RVA = "0x62951C", Offset = "0x62951C", VA = "0x62951C")]
	public void RestartCurrentChapter()
	{
	}

	[Token(Token = "0x60000AF")]
	[Address(RVA = "0x61BF04", Offset = "0x61BF04", VA = "0x61BF04")]
	public void GoToNextStepOfCurrentChapter()
	{
	}

	[Token(Token = "0x60000B0")]
	[Address(RVA = "0x6295DC", Offset = "0x6295DC", VA = "0x6295DC")]
	public void GoToPreviousStepOfCurrentChapter()
	{
	}

	[Token(Token = "0x60000B1")]
	[Address(RVA = "0x6296A8", Offset = "0x6296A8", VA = "0x6296A8")]
	public void Rewind()
	{
	}

	[Token(Token = "0x60000B2")]
	[Address(RVA = "0x61BFD0", Offset = "0x61BFD0", VA = "0x61BFD0")]
	public void FastForward()
	{
	}

	[Token(Token = "0x60000B3")]
	[Address(RVA = "0x6296E4", Offset = "0x6296E4", VA = "0x6296E4")]
	public void RestartProject()
	{
	}

	[Token(Token = "0x60000B4")]
	[Address(RVA = "0x6297A4", Offset = "0x6297A4", VA = "0x6297A4")]
	public void UnloadAllLevels()
	{
	}

	[Token(Token = "0x60000B5")]
	[Address(RVA = "0x6298EC", Offset = "0x6298EC", VA = "0x6298EC")]
	public ChapterManager()
	{
	}
}
[Serializable]
[Token(Token = "0x200002A")]
public class ChapterParams
{
	[Token(Token = "0x40000AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public Chapter chapter;

	[Token(Token = "0x40000B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public KeyCode keyLaunch;

	[Token(Token = "0x40000B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int stepBegin;

	[Token(Token = "0x40000B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int stepEnd;

	[Token(Token = "0x40000B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool waitForKeyLaunch;

	[Token(Token = "0x60000B6")]
	[Address(RVA = "0x6298F4", Offset = "0x6298F4", VA = "0x6298F4")]
	public ChapterParams()
	{
	}
}
[Token(Token = "0x200002B")]
public static class ChapterStaticManager
{
	[Token(Token = "0x20003E6")]
	public enum Episode
	{
		[Token(Token = "0x4001866")]
		INTRO,
		[Token(Token = "0x4001867")]
		EP_01,
		[Token(Token = "0x4001868")]
		EP_02,
		[Token(Token = "0x4001869")]
		EP_03
	}

	[Token(Token = "0x40000B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int step_Ep01;

	[Token(Token = "0x40000B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static int step_Ep02;

	[Token(Token = "0x40000B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static int step_Ep03;

	[Token(Token = "0x40000B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static Episode episodeToLaunch;

	[Token(Token = "0x60000B7")]
	[Address(RVA = "0x62981C", Offset = "0x62981C", VA = "0x62981C")]
	public static void UnloadAllLevels()
	{
	}

	[Token(Token = "0x60000B8")]
	[Address(RVA = "0x61B9DC", Offset = "0x61B9DC", VA = "0x61B9DC")]
	public static void RestartProject(Episode ep = Episode.INTRO)
	{
	}
}
[Serializable]
[Token(Token = "0x200002C")]
public class ChapterStepConfig
{
	[Token(Token = "0x20003E7")]
	public enum types
	{
		[Token(Token = "0x400186B")]
		LOAD_LEVELS,
		[Token(Token = "0x400186C")]
		UNLOAD_LEVELS,
		[Token(Token = "0x400186D")]
		PLAY_TIMELINES,
		[Token(Token = "0x400186E")]
		PAUSE,
		[Token(Token = "0x400186F")]
		RESUME,
		[Token(Token = "0x4001870")]
		WAIT_GAME_EVENT,
		[Token(Token = "0x4001871")]
		LOAD_PREFAB
	}

	[Token(Token = "0x40000B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public bool expand;

	[Token(Token = "0x40000B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public int currentSceneIndex;

	[Token(Token = "0x40000BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public PlayableDirector currentPlayableDirector;

	[Token(Token = "0x40000BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public types nextConfigType;

	[Token(Token = "0x40000BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public types type;

	[Token(Token = "0x40000BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool waitCompleteBeforeContinue;

	[Token(Token = "0x40000BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Scene]
	public List<string> levelIDs;

	[Token(Token = "0x40000BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public List<Transform> prefabs;

	[Token(Token = "0x40000C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string gameEvent;

	[Token(Token = "0x40000C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public PlayableDirector playableDirector;

	[Token(Token = "0x40000C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool timelinePlayAll;

	[Token(Token = "0x40000C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool timelineResume;

	[Token(Token = "0x40000C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	public bool timelinePlayToEnd;

	[Token(Token = "0x40000C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float timelineFrom;

	[Token(Token = "0x40000C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float timelineTo;

	[Token(Token = "0x60000BA")]
	[Address(RVA = "0x62998C", Offset = "0x62998C", VA = "0x62998C")]
	public ChapterStepConfig()
	{
	}
}
[Token(Token = "0x200002D")]
public class OnPauseChapterMessage : Message
{
	[Token(Token = "0x60000BB")]
	[Address(RVA = "0x8B6058", Offset = "0x8B6058", VA = "0x8B6058")]
	public OnPauseChapterMessage()
	{
	}
}
[Token(Token = "0x200002E")]
public class OnResumeChapterMessage : Message
{
	[Token(Token = "0x60000BC")]
	[Address(RVA = "0x8B6060", Offset = "0x8B6060", VA = "0x8B6060")]
	public OnResumeChapterMessage()
	{
	}
}
[Token(Token = "0x200002F")]
public class ChapterStep
{
	[Token(Token = "0x40000C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ECE10", Offset = "0x2ECE10")]
	private ChapterStepConfig <config>k__BackingField;

	[Token(Token = "0x17000004")]
	public ChapterStepConfig config
	{
		[Token(Token = "0x60000BF")]
		[Address(RVA = "0x629900", Offset = "0x629900", VA = "0x629900")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F8B84", Offset = "0x2F8B84")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000C0")]
		[Address(RVA = "0x629908", Offset = "0x629908", VA = "0x629908")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F8B94", Offset = "0x2F8B94")]
		private set
		{
		}
	}

	[Token(Token = "0x14000003")]
	public event Action<ChapterStep> OnComplete
	{
		[Token(Token = "0x60000BD")]
		[Address(RVA = "0x62831C", Offset = "0x62831C", VA = "0x62831C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F8B64", Offset = "0x2F8B64")]
		add
		{
		}
		[Token(Token = "0x60000BE")]
		[Address(RVA = "0x62877C", Offset = "0x62877C", VA = "0x62877C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F8B74", Offset = "0x2F8B74")]
		remove
		{
		}
	}

	[Token(Token = "0x60000C1")]
	[Address(RVA = "0x6282FC", Offset = "0x6282FC", VA = "0x6282FC")]
	public ChapterStep(ChapterStepConfig config)
	{
	}

	[Token(Token = "0x60000C2")]
	[Address(RVA = "0x629910", Offset = "0x629910", VA = "0x629910", Slot = "4")]
	public virtual void Stop()
	{
	}

	[Token(Token = "0x60000C3")]
	[Address(RVA = "0x629914", Offset = "0x629914", VA = "0x629914", Slot = "5")]
	public virtual void Execute()
	{
	}

	[Token(Token = "0x60000C4")]
	[Address(RVA = "0x629988", Offset = "0x629988", VA = "0x629988", Slot = "6")]
	public virtual void Update()
	{
	}

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0x629918", Offset = "0x629918", VA = "0x629918")]
	protected void DispatchComplete()
	{
	}
}
[Token(Token = "0x2000030")]
public class LoadLevelChapterStep : ChapterStep
{
	[Token(Token = "0x40000C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private int loaded;

	[Token(Token = "0x40000CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private int toLoad;

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0x4EC3B4", Offset = "0x4EC3B4", VA = "0x4EC3B4")]
	public LoadLevelChapterStep(ChapterStepConfig config)
	{
	}

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0x4EC3BC", Offset = "0x4EC3BC", VA = "0x4EC3BC", Slot = "5")]
	public override void Execute()
	{
	}

	[Token(Token = "0x60000C8")]
	[Address(RVA = "0x4EC474", Offset = "0x4EC474", VA = "0x4EC474")]
	private void LoadNext()
	{
	}

	[Token(Token = "0x60000C9")]
	[Address(RVA = "0x4EC6C8", Offset = "0x4EC6C8", VA = "0x4EC6C8")]
	private void SceneManager_sceneLoaded(Scene arg0, LoadSceneMode arg1)
	{
	}

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0x4EC778", Offset = "0x4EC778", VA = "0x4EC778")]
	private void OnCurrentLevelLoaded()
	{
	}

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0x4EC8F4", Offset = "0x4EC8F4", VA = "0x4EC8F4")]
	private void LevelManager_Instance_OnLoadLevelFailed(string obj)
	{
	}

	[Token(Token = "0x60000CC")]
	[Address(RVA = "0x4EC8F8", Offset = "0x4EC8F8", VA = "0x4EC8F8")]
	private void LevelManager_Instance_OnLevelLoaded(string obj)
	{
	}

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0x4EC8FC", Offset = "0x4EC8FC", VA = "0x4EC8FC")]
	private void LevelComplete()
	{
	}
}
[Token(Token = "0x2000031")]
public class LoadPrefabChapterStep : ChapterStep
{
	[Token(Token = "0x60000CE")]
	[Address(RVA = "0x4ED06C", Offset = "0x4ED06C", VA = "0x4ED06C")]
	public LoadPrefabChapterStep(ChapterStepConfig config)
	{
	}

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0x4ED074", Offset = "0x4ED074", VA = "0x4ED074", Slot = "5")]
	public override void Execute()
	{
	}
}
[Token(Token = "0x2000032")]
public class PauseChapterStep : ChapterStep
{
	[Token(Token = "0x60000D0")]
	[Address(RVA = "0x8B8BC4", Offset = "0x8B8BC4", VA = "0x8B8BC4")]
	public PauseChapterStep(ChapterStepConfig config)
	{
	}
}
[Token(Token = "0x2000033")]
public class PlayTimelineChapterStep : ChapterStep
{
	[Token(Token = "0x40000CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool playing;

	[Token(Token = "0x40000CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	private bool complete;

	[Token(Token = "0x40000CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private int count;

	[Token(Token = "0x60000D1")]
	[Address(RVA = "0x8BA454", Offset = "0x8BA454", VA = "0x8BA454")]
	public PlayTimelineChapterStep(ChapterStepConfig config)
	{
	}

	[Token(Token = "0x60000D2")]
	[Address(RVA = "0x8BA45C", Offset = "0x8BA45C", VA = "0x8BA45C", Slot = "5")]
	public override void Execute()
	{
	}

	[Token(Token = "0x60000D3")]
	[Address(RVA = "0x8BA778", Offset = "0x8BA778", VA = "0x8BA778", Slot = "6")]
	public override void Update()
	{
	}

	[Token(Token = "0x60000D4")]
	[Address(RVA = "0x8BAA44", Offset = "0x8BAA44", VA = "0x8BAA44", Slot = "4")]
	public override void Stop()
	{
	}

	[Token(Token = "0x60000D5")]
	[Address(RVA = "0x8BAA84", Offset = "0x8BAA84", VA = "0x8BAA84")]
	public void Resume()
	{
	}

	[Token(Token = "0x60000D6")]
	[Address(RVA = "0x8BA7C4", Offset = "0x8BA7C4", VA = "0x8BA7C4")]
	private bool AllComplete()
	{
		return default(bool);
	}
}
[Token(Token = "0x2000034")]
public class UnloadLevelChapterStep : ChapterStep
{
	[Token(Token = "0x60000D7")]
	[Address(RVA = "0x8F3E18", Offset = "0x8F3E18", VA = "0x8F3E18")]
	public UnloadLevelChapterStep(ChapterStepConfig config)
	{
	}

	[Token(Token = "0x60000D8")]
	[Address(RVA = "0x8F3E20", Offset = "0x8F3E20", VA = "0x8F3E20", Slot = "5")]
	public override void Execute()
	{
	}
}
[Token(Token = "0x2000035")]
public class ActiveChildrenOnKey : MonoBehaviour
{
	[Token(Token = "0x40000CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public KeyCode key;

	[Token(Token = "0x40000CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool isActive;

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0x61720C", Offset = "0x61720C", VA = "0x61720C")]
	private void Start()
	{
	}

	[Token(Token = "0x60000DA")]
	[Address(RVA = "0x6175C0", Offset = "0x6175C0", VA = "0x6175C0")]
	private void Update()
	{
	}

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0x6179A8", Offset = "0x6179A8", VA = "0x6179A8")]
	public ActiveChildrenOnKey()
	{
	}
}
[Token(Token = "0x2000036")]
public class AutoRotate : MonoBehaviour
{
	[Token(Token = "0x40000D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Vector3 axe;

	[Token(Token = "0x40000D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float speed;

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0x619D30", Offset = "0x619D30", VA = "0x619D30")]
	private void Start()
	{
	}

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0x619D34", Offset = "0x619D34", VA = "0x619D34")]
	private void Update()
	{
	}

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0x619DAC", Offset = "0x619DAC", VA = "0x619DAC")]
	public AutoRotate()
	{
	}
}
[Token(Token = "0x2000037")]
public class Benchmark : MonoBehaviour
{
	[Token(Token = "0x40000D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public GameObject[] objects;

	[Token(Token = "0x40000D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private List<int> compteurs;

	[Token(Token = "0x60000DF")]
	[Address(RVA = "0x61C01C", Offset = "0x61C01C", VA = "0x61C01C")]
	private void Start()
	{
	}

	[Token(Token = "0x60000E0")]
	[Address(RVA = "0x61C0DC", Offset = "0x61C0DC", VA = "0x61C0DC")]
	private void Update()
	{
	}

	[Token(Token = "0x60000E1")]
	[Address(RVA = "0x61C0E0", Offset = "0x61C0E0", VA = "0x61C0E0")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60000E2")]
	[Address(RVA = "0x61C7AC", Offset = "0x61C7AC", VA = "0x61C7AC")]
	public Benchmark()
	{
	}
}
[Token(Token = "0x2000038")]
public class CameraMouseRotation : MonoBehaviour
{
	[Token(Token = "0x40000D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private GameObject obj;

	[Token(Token = "0x40000D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool b_ActiveScript;

	[Token(Token = "0x40000D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private float f_axisX;

	[Token(Token = "0x40000D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float f_AxisY;

	[Token(Token = "0x60000E3")]
	[Address(RVA = "0x623378", Offset = "0x623378", VA = "0x623378")]
	private void Start()
	{
	}

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0x623384", Offset = "0x623384", VA = "0x623384")]
	private void Update()
	{
	}

	[Token(Token = "0x60000E5")]
	[Address(RVA = "0x6233B0", Offset = "0x6233B0", VA = "0x6233B0")]
	private void RotateCamera()
	{
	}

	[Token(Token = "0x60000E6")]
	[Address(RVA = "0x6234C0", Offset = "0x6234C0", VA = "0x6234C0")]
	public CameraMouseRotation()
	{
	}
}
[Token(Token = "0x2000039")]
public class CameraVR : MonoBehaviour
{
	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float speed;

	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float heightY;

	[Token(Token = "0x60000E7")]
	[Address(RVA = "0x623FBC", Offset = "0x623FBC", VA = "0x623FBC")]
	private void Start()
	{
	}

	[Token(Token = "0x60000E8")]
	[Address(RVA = "0x623FC0", Offset = "0x623FC0", VA = "0x623FC0")]
	public void Recenter()
	{
	}

	[Token(Token = "0x60000E9")]
	[Address(RVA = "0x6240F8", Offset = "0x6240F8", VA = "0x6240F8")]
	private void Update()
	{
	}

	[Token(Token = "0x60000EA")]
	[Address(RVA = "0x624124", Offset = "0x624124", VA = "0x624124")]
	public CameraVR()
	{
	}
}
[Token(Token = "0x200003A")]
public class DebugChapterAssistant : MonoBehaviour
{
	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public TimelineController lastChapter;

	[Token(Token = "0x60000EB")]
	[Address(RVA = "0x6080F0", Offset = "0x6080F0", VA = "0x6080F0")]
	private string getChapterName()
	{
		return null;
	}

	[Token(Token = "0x60000EC")]
	[Address(RVA = "0x6081B8", Offset = "0x6081B8", VA = "0x6081B8")]
	public void ResolveBindings()
	{
	}

	[Token(Token = "0x60000ED")]
	[Address(RVA = "0x6082CC", Offset = "0x6082CC", VA = "0x6082CC")]
	public void RegisterLastChapter(TimelineController tc)
	{
	}

	[Token(Token = "0x60000EE")]
	[Address(RVA = "0x608378", Offset = "0x608378", VA = "0x608378")]
	public DebugChapterAssistant()
	{
	}
}
[Token(Token = "0x200003B")]
public class CleanHelper : MonoBehaviour
{
	[Token(Token = "0x60000EF")]
	[Address(RVA = "0x62A284", Offset = "0x62A284", VA = "0x62A284")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x2F8BA4", Offset = "0x2F8BA4")]
	private void Do()
	{
	}

	[Token(Token = "0x60000F0")]
	[Address(RVA = "0x62A3E4", Offset = "0x62A3E4", VA = "0x62A3E4")]
	private void Start()
	{
	}

	[Token(Token = "0x60000F1")]
	[Address(RVA = "0x62A3E8", Offset = "0x62A3E8", VA = "0x62A3E8")]
	private void Update()
	{
	}

	[Token(Token = "0x60000F2")]
	[Address(RVA = "0x62A3EC", Offset = "0x62A3EC", VA = "0x62A3EC")]
	public CleanHelper()
	{
	}
}
[Token(Token = "0x200003C")]
public class CopyTransformRotation : MonoBehaviour
{
	[Token(Token = "0x40000DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Transform other;

	[Token(Token = "0x40000DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool copyRotX;

	[Token(Token = "0x40000DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	public bool copyRotY;

	[Token(Token = "0x40000DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
	public bool copyRotZ;

	[Token(Token = "0x40000DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float ratioPos;

	[Token(Token = "0x40000E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform _t;

	[Token(Token = "0x40000E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Vector3 initPos;

	[Token(Token = "0x60000F3")]
	[Address(RVA = "0x5F6BCC", Offset = "0x5F6BCC", VA = "0x5F6BCC")]
	private void Start()
	{
	}

	[Token(Token = "0x60000F4")]
	[Address(RVA = "0x5F6C20", Offset = "0x5F6C20", VA = "0x5F6C20")]
	private void Update()
	{
	}

	[Token(Token = "0x60000F5")]
	[Address(RVA = "0x5F6DA8", Offset = "0x5F6DA8", VA = "0x5F6DA8")]
	public CopyTransformRotation()
	{
	}
}
[Token(Token = "0x200003D")]
public class CustomAnimator : MonoBehaviour
{
	[Token(Token = "0x40000E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public string booleanName;

	[Token(Token = "0x40000E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public KeyCode key;

	[Token(Token = "0x40000E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Animator m_Animator;

	[Token(Token = "0x60000F6")]
	[Address(RVA = "0x5FA034", Offset = "0x5FA034", VA = "0x5FA034")]
	private void Start()
	{
	}

	[Token(Token = "0x60000F7")]
	[Address(RVA = "0x5FA0BC", Offset = "0x5FA0BC", VA = "0x5FA0BC")]
	private void Update()
	{
	}

	[Token(Token = "0x60000F8")]
	[Address(RVA = "0x5FA138", Offset = "0x5FA138", VA = "0x5FA138")]
	public CustomAnimator()
	{
	}
}
[Token(Token = "0x200003E")]
public class ActiveDebugMode : MonoBehaviour
{
	[Token(Token = "0x40000E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public GameObject objectToActive;

	[Token(Token = "0x40000E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float timeHold;

	[Token(Token = "0x40000E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private float f1;

	[Token(Token = "0x40000E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float f2;

	[Token(Token = "0x40000E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float timerPull;

	[Token(Token = "0x60000F9")]
	[Address(RVA = "0x6179B0", Offset = "0x6179B0", VA = "0x6179B0")]
	private void Start()
	{
	}

	[Token(Token = "0x60000FA")]
	[Address(RVA = "0x6179B4", Offset = "0x6179B4", VA = "0x6179B4")]
	private void Update()
	{
	}

	[Token(Token = "0x60000FB")]
	[Address(RVA = "0x617ADC", Offset = "0x617ADC", VA = "0x617ADC")]
	public ActiveDebugMode()
	{
	}
}
[Token(Token = "0x200003F")]
public class DebugEpChapter : MonoBehaviour
{
	[Token(Token = "0x40000EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public ChapterManager ChapterManager;

	[Token(Token = "0x40000EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public TextMeshProUGUI textEpisode;

	[Token(Token = "0x40000EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public TextMeshProUGUI textSeq;

	[Token(Token = "0x40000ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private string lastSeqName;

	[Token(Token = "0x60000FC")]
	[Address(RVA = "0x608380", Offset = "0x608380", VA = "0x608380")]
	private void Start()
	{
	}

	[Token(Token = "0x60000FD")]
	[Address(RVA = "0x608384", Offset = "0x608384", VA = "0x608384")]
	private void Update()
	{
	}

	[Token(Token = "0x60000FE")]
	[Address(RVA = "0x6084BC", Offset = "0x6084BC", VA = "0x6084BC")]
	public DebugEpChapter()
	{
	}
}
[Token(Token = "0x2000040")]
public class DebugLeftOculusController : MonoBehaviour
{
	[Token(Token = "0x40000EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public CameraVR camvr;

	[Token(Token = "0x60000FF")]
	[Address(RVA = "0x4D7A38", Offset = "0x4D7A38", VA = "0x4D7A38")]
	private void Start()
	{
	}

	[Token(Token = "0x6000100")]
	[Address(RVA = "0x4D7A3C", Offset = "0x4D7A3C", VA = "0x4D7A3C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000101")]
	[Address(RVA = "0x4D7AEC", Offset = "0x4D7AEC", VA = "0x4D7AEC")]
	public DebugLeftOculusController()
	{
	}
}
[Token(Token = "0x2000041")]
public class DebugModeKeyboard : MonoBehaviour
{
	[Token(Token = "0x40000EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public ChapterManager chapterManager;

	[Token(Token = "0x40000F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GameObject DebugUIGameObject;

	[Token(Token = "0x40000F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private bool isPlay;

	[Token(Token = "0x6000102")]
	[Address(RVA = "0x4D7AF4", Offset = "0x4D7AF4", VA = "0x4D7AF4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000103")]
	[Address(RVA = "0x4D7AF8", Offset = "0x4D7AF8", VA = "0x4D7AF8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000104")]
	[Address(RVA = "0x4D7D20", Offset = "0x4D7D20", VA = "0x4D7D20")]
	public DebugModeKeyboard()
	{
	}
}
[Token(Token = "0x2000042")]
public class OculusController : MonoBehaviour
{
	[Token(Token = "0x40000F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public GameObject canvasToDisplay;

	[Token(Token = "0x40000F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public OVRInput.Controller m_controller;

	[Token(Token = "0x40000F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public GameObject activeObjectEvent;

	[Token(Token = "0x40000F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool triggerIsPulled;

	[Token(Token = "0x40000F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float f;

	[Token(Token = "0x40000F7")]
	private const float triggerSensitivity = 0.95f;

	[Token(Token = "0x6000105")]
	[Address(RVA = "0x8B29A4", Offset = "0x8B29A4", VA = "0x8B29A4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000106")]
	[Address(RVA = "0x8B29D4", Offset = "0x8B29D4", VA = "0x8B29D4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000107")]
	[Address(RVA = "0x8B2BAC", Offset = "0x8B2BAC", VA = "0x8B2BAC")]
	public OculusController()
	{
	}
}
[Token(Token = "0x2000043")]
public class DebugSound : MonoBehaviour
{
	[Token(Token = "0x40000F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public TextMeshProUGUI text01;

	[Token(Token = "0x40000F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public TextMeshProUGUI text02;

	[Token(Token = "0x40000FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public TextMeshProUGUI text03;

	[Token(Token = "0x40000FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI text04;

	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public TextMeshProUGUI text05;

	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshProUGUI text06;

	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public TextMeshProUGUI text07;

	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioMixer audioMixer;

	[Token(Token = "0x4000100")]
	private const float framerateRefreshRate = 0.25f;

	[Token(Token = "0x4000101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float framerateRefreshTimer;

	[Token(Token = "0x6000108")]
	[Address(RVA = "0x4D7D30", Offset = "0x4D7D30", VA = "0x4D7D30")]
	private void Update()
	{
	}

	[Token(Token = "0x6000109")]
	[Address(RVA = "0x4D7E40", Offset = "0x4D7E40", VA = "0x4D7E40")]
	private void LogVolume(string channelName, TextMeshProUGUI t)
	{
	}

	[Token(Token = "0x600010A")]
	[Address(RVA = "0x4D7F34", Offset = "0x4D7F34", VA = "0x4D7F34")]
	public DebugSound()
	{
	}
}
[Token(Token = "0x2000044")]
public class DebugUI : MonoBehaviour
{
	[Token(Token = "0x4000102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public TextMeshProUGUI sceneText;

	[Token(Token = "0x4000103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public TextMeshProUGUI framerateText;

	[Token(Token = "0x4000104")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public TextMeshProUGUI timelineText;

	[Token(Token = "0x4000105")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ChapterManager chapterManager;

	[Token(Token = "0x4000106")]
	private const float framerateRefreshRate = 0.25f;

	[Token(Token = "0x4000107")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float framerateRefreshTimer;

	[Token(Token = "0x600010B")]
	[Address(RVA = "0x4D7F3C", Offset = "0x4D7F3C", VA = "0x4D7F3C")]
	private void Update()
	{
	}

	[Token(Token = "0x600010C")]
	[Address(RVA = "0x4D7FA0", Offset = "0x4D7FA0", VA = "0x4D7FA0")]
	private void UpdateSceneText()
	{
	}

	[Token(Token = "0x600010D")]
	[Address(RVA = "0x4D81A0", Offset = "0x4D81A0", VA = "0x4D81A0")]
	private void UpdateFramerateText()
	{
	}

	[Token(Token = "0x600010E")]
	[Address(RVA = "0x4D8078", Offset = "0x4D8078", VA = "0x4D8078")]
	private void UpdateTimelineText()
	{
	}

	[Token(Token = "0x600010F")]
	[Address(RVA = "0x4D8284", Offset = "0x4D8284", VA = "0x4D8284")]
	public DebugUI()
	{
	}
}
[Token(Token = "0x2000045")]
public class DestroyOnPlay : MonoBehaviour
{
	[Token(Token = "0x6000110")]
	[Address(RVA = "0x4DA5F8", Offset = "0x4DA5F8", VA = "0x4DA5F8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000111")]
	[Address(RVA = "0x4DA68C", Offset = "0x4DA68C", VA = "0x4DA68C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000112")]
	[Address(RVA = "0x4DA690", Offset = "0x4DA690", VA = "0x4DA690")]
	public DestroyOnPlay()
	{
	}
}
[Token(Token = "0x2000046")]
public class offsetMaterial : MonoBehaviour
{
	[Token(Token = "0x4000108")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float scrollSpeedX;

	[Token(Token = "0x4000109")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float scrollSpeedY;

	[Token(Token = "0x400010A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int indexMat;

	[Token(Token = "0x400010B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float timeUpdate;

	[Token(Token = "0x400010C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Renderer rend;

	[Token(Token = "0x400010D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float counter;

	[Token(Token = "0x6000113")]
	[Address(RVA = "0x178E21C", Offset = "0x178E21C", VA = "0x178E21C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000114")]
	[Address(RVA = "0x178E284", Offset = "0x178E284", VA = "0x178E284")]
	private void Update()
	{
	}

	[Token(Token = "0x6000115")]
	[Address(RVA = "0x178E3EC", Offset = "0x178E3EC", VA = "0x178E3EC")]
	public offsetMaterial()
	{
	}
}
[Token(Token = "0x2000047")]
public class randomColorLight : MonoBehaviour
{
	[Token(Token = "0x6000116")]
	[Address(RVA = "0x178E408", Offset = "0x178E408", VA = "0x178E408")]
	private void Start()
	{
	}

	[Token(Token = "0x6000117")]
	[Address(RVA = "0x178E4EC", Offset = "0x178E4EC", VA = "0x178E4EC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000118")]
	[Address(RVA = "0x178E4F0", Offset = "0x178E4F0", VA = "0x178E4F0")]
	public randomColorLight()
	{
	}
}
[Token(Token = "0x2000048")]
public class SceneIndicatorOnScreen : MonoBehaviour
{
	[Token(Token = "0x400010E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Text txt_Indicator;

	[Token(Token = "0x400010F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private List<string> l_s_NamesScenes;

	[Token(Token = "0x6000119")]
	[Address(RVA = "0xA8A690", Offset = "0xA8A690", VA = "0xA8A690")]
	private void Start()
	{
	}

	[Token(Token = "0x600011A")]
	[Address(RVA = "0xA8A7DC", Offset = "0xA8A7DC", VA = "0xA8A7DC")]
	private void Addscene(Scene sc, LoadSceneMode scm)
	{
	}

	[Token(Token = "0x600011B")]
	[Address(RVA = "0xA8AAB4", Offset = "0xA8AAB4", VA = "0xA8AAB4")]
	private void RemoveScene(Scene sc)
	{
	}

	[Token(Token = "0x600011C")]
	[Address(RVA = "0xA8A8F0", Offset = "0xA8A8F0", VA = "0xA8A8F0")]
	private void UpdateSceneIndicator()
	{
	}

	[Token(Token = "0x600011D")]
	[Address(RVA = "0xA8AB54", Offset = "0xA8AB54", VA = "0xA8AB54")]
	public SceneIndicatorOnScreen()
	{
	}
}
[Token(Token = "0x2000049")]
public class ScenesLauncher : MonoBehaviour
{
	[Token(Token = "0x4000110")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private int sceneIndex;

	[Token(Token = "0x600011E")]
	[Address(RVA = "0xA8ACB0", Offset = "0xA8ACB0", VA = "0xA8ACB0")]
	private void Start()
	{
	}

	[Token(Token = "0x600011F")]
	[Address(RVA = "0xA8AD5C", Offset = "0xA8AD5C", VA = "0xA8AD5C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000120")]
	[Address(RVA = "0xA8ADE8", Offset = "0xA8ADE8", VA = "0xA8ADE8")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000121")]
	[Address(RVA = "0xA8B2F8", Offset = "0xA8B2F8", VA = "0xA8B2F8")]
	public ScenesLauncher()
	{
	}
}
[Token(Token = "0x200004A")]
public class SceneUnloadAtStart : MonoBehaviour
{
	[Token(Token = "0x6000122")]
	[Address(RVA = "0xA8ABE0", Offset = "0xA8ABE0", VA = "0xA8ABE0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000123")]
	[Address(RVA = "0xA8ACA8", Offset = "0xA8ACA8", VA = "0xA8ACA8")]
	public SceneUnloadAtStart()
	{
	}
}
[Token(Token = "0x200004B")]
public class ShowMesh : MonoBehaviour
{
	[Token(Token = "0x4000111")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private MeshRenderer MsRend;

	[Token(Token = "0x6000124")]
	[Address(RVA = "0xA8D4DC", Offset = "0xA8D4DC", VA = "0xA8D4DC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000125")]
	[Address(RVA = "0xA8D544", Offset = "0xA8D544", VA = "0xA8D544")]
	private void Update()
	{
	}

	[Token(Token = "0x6000126")]
	[Address(RVA = "0xA8D548", Offset = "0xA8D548", VA = "0xA8D548")]
	private void switchEnableMeshRenderer()
	{
	}

	[Token(Token = "0x6000127")]
	[Address(RVA = "0xA8D638", Offset = "0xA8D638", VA = "0xA8D638")]
	public ShowMesh()
	{
	}
}
[Serializable]
[Token(Token = "0x200004C")]
public class AudioMixerBehaviour : PlayableBehaviour
{
	[Token(Token = "0x4000112")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public string floatPropertyName;

	[Token(Token = "0x4000113")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float floatPropertyValue;

	[Token(Token = "0x4000114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public AnimationCurve curve;

	[Token(Token = "0x4000115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public double start;

	[Token(Token = "0x4000116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public double end;

	[Token(Token = "0x4000117")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public double duration;

	[Token(Token = "0x4000118")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public double progress;

	[Token(Token = "0x6000128")]
	[Address(RVA = "0x618E00", Offset = "0x618E00", VA = "0x618E00", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x6000129")]
	[Address(RVA = "0x618E80", Offset = "0x618E80", VA = "0x618E80")]
	public AudioMixerBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x200004D")]
public class AudioMixerClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x4000119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public AudioMixerBehaviour template;

	[Token(Token = "0x400011A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public double start;

	[Token(Token = "0x400011B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public double end;

	[Token(Token = "0x17000005")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x600012A")]
		[Address(RVA = "0x618EA4", Offset = "0x618EA4", VA = "0x618EA4", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x600012B")]
	[Address(RVA = "0x618EAC", Offset = "0x618EAC", VA = "0x618EAC", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x600012C")]
	[Address(RVA = "0x618F8C", Offset = "0x618F8C", VA = "0x618F8C")]
	public AudioMixerClip()
	{
	}
}
[Token(Token = "0x200004E")]
public class AudioMixerMixerBehaviour : PlayableBehaviour
{
	[Token(Token = "0x400011C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private string m_DefaultPropertyName;

	[Token(Token = "0x400011D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private float m_DefaultFloatPropertyValue;

	[Token(Token = "0x400011E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private float m_deltaValue;

	[Token(Token = "0x400011F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private AudioMixer m_TrackBinding;

	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool m_FirstFrameHappened;

	[Token(Token = "0x4000121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int currentIndex;

	[Token(Token = "0x600012D")]
	[Address(RVA = "0x61917C", Offset = "0x61917C", VA = "0x61917C", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x600012E")]
	[Address(RVA = "0x61953C", Offset = "0x61953C", VA = "0x61953C", Slot = "14")]
	public override void OnGraphStop(Playable playable)
	{
	}

	[Token(Token = "0x600012F")]
	[Address(RVA = "0x619548", Offset = "0x619548", VA = "0x619548")]
	public AudioMixerMixerBehaviour()
	{
	}
}
[Token(Token = "0x200004F")]
[AttributeAttribute(Name = "TrackColorAttribute", RVA = "0x2E5B70", Offset = "0x2E5B70")]
[AttributeAttribute(Name = "TrackClipTypeAttribute", RVA = "0x2E5B70", Offset = "0x2E5B70")]
[AttributeAttribute(Name = "TrackBindingTypeAttribute", RVA = "0x2E5B70", Offset = "0x2E5B70")]
public class AudioMixerTrack : TrackAsset
{
	[Token(Token = "0x6000130")]
	[Address(RVA = "0x619558", Offset = "0x619558", VA = "0x619558", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000131")]
	[Address(RVA = "0x619A48", Offset = "0x619A48", VA = "0x619A48")]
	public AudioMixerTrack()
	{
	}
}
[Serializable]
[Token(Token = "0x2000050")]
public class LightControlBehaviour : PlayableBehaviour
{
	[Token(Token = "0x4000122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public Color color;

	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float intensity;

	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float bounceIntensity;

	[Token(Token = "0x4000125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float range;

	[Token(Token = "0x6000132")]
	[Address(RVA = "0x4E9ECC", Offset = "0x4E9ECC", VA = "0x4E9ECC")]
	public LightControlBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x2000051")]
public class LightControlClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public LightControlBehaviour template;

	[Token(Token = "0x17000006")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x6000133")]
		[Address(RVA = "0x4E9F28", Offset = "0x4E9F28", VA = "0x4E9F28", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x6000134")]
	[Address(RVA = "0x4E9F30", Offset = "0x4E9F30", VA = "0x4E9F30", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000135")]
	[Address(RVA = "0x4EA010", Offset = "0x4EA010", VA = "0x4EA010")]
	public LightControlClip()
	{
	}
}
[Token(Token = "0x2000052")]
public class LightControlMixerBehaviour : PlayableBehaviour
{
	[Token(Token = "0x4000127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private Color m_DefaultColor;

	[Token(Token = "0x4000128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float m_DefaultIntensity;

	[Token(Token = "0x4000129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float m_DefaultBounceIntensity;

	[Token(Token = "0x400012A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float m_DefaultRange;

	[Token(Token = "0x400012B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Light m_TrackBinding;

	[Token(Token = "0x400012C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool m_FirstFrameHappened;

	[Token(Token = "0x6000136")]
	[Address(RVA = "0x4EA088", Offset = "0x4EA088", VA = "0x4EA088", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x6000137")]
	[Address(RVA = "0x4EA5E8", Offset = "0x4EA5E8", VA = "0x4EA5E8", Slot = "16")]
	public override void OnPlayableDestroy(Playable playable)
	{
	}

	[Token(Token = "0x6000138")]
	[Address(RVA = "0x4EA75C", Offset = "0x4EA75C", VA = "0x4EA75C")]
	public LightControlMixerBehaviour()
	{
	}
}
[Token(Token = "0x2000053")]
[AttributeAttribute(Name = "TrackColorAttribute", RVA = "0x2E5C48", Offset = "0x2E5C48")]
[AttributeAttribute(Name = "TrackClipTypeAttribute", RVA = "0x2E5C48", Offset = "0x2E5C48")]
[AttributeAttribute(Name = "TrackBindingTypeAttribute", RVA = "0x2E5C48", Offset = "0x2E5C48")]
public class LightControlTrack : TrackAsset
{
	[Token(Token = "0x6000139")]
	[Address(RVA = "0x4EAF2C", Offset = "0x4EAF2C", VA = "0x4EAF2C", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x600013A")]
	[Address(RVA = "0x4EB000", Offset = "0x4EB000", VA = "0x4EB000", Slot = "28")]
	public override void GatherProperties(PlayableDirector director, IPropertyCollector driver)
	{
	}

	[Token(Token = "0x600013B")]
	[Address(RVA = "0x4EB008", Offset = "0x4EB008", VA = "0x4EB008")]
	public LightControlTrack()
	{
	}
}
[Serializable]
[Token(Token = "0x2000054")]
public class LightControlShadowORDisableBehaviour : PlayableBehaviour
{
	[Token(Token = "0x400012D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public bool enabled;

	[Token(Token = "0x400012E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public LightShadows shadows;

	[Token(Token = "0x600013C")]
	[Address(RVA = "0x4EA764", Offset = "0x4EA764", VA = "0x4EA764")]
	public LightControlShadowORDisableBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x2000055")]
public class LightControlShadowORDisableClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x400012F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public LightControlShadowORDisableBehaviour template;

	[Token(Token = "0x17000007")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x600013D")]
		[Address(RVA = "0x4EA76C", Offset = "0x4EA76C", VA = "0x4EA76C", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x600013E")]
	[Address(RVA = "0x4EA774", Offset = "0x4EA774", VA = "0x4EA774", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x600013F")]
	[Address(RVA = "0x4EA854", Offset = "0x4EA854", VA = "0x4EA854")]
	public LightControlShadowORDisableClip()
	{
	}
}
[Token(Token = "0x2000056")]
public class LightControlShadowORDisableMixerBehaviour : PlayableBehaviour
{
	[Token(Token = "0x4000130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private bool m_DefaultEnabled;

	[Token(Token = "0x4000131")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private LightShadows m_DefaultShadows;

	[Token(Token = "0x4000132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Light m_TrackBinding;

	[Token(Token = "0x4000133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private bool m_FirstFrameHappened;

	[Token(Token = "0x6000140")]
	[Address(RVA = "0x4EA8D0", Offset = "0x4EA8D0", VA = "0x4EA8D0", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x6000141")]
	[Address(RVA = "0x4EACD0", Offset = "0x4EACD0", VA = "0x4EACD0", Slot = "14")]
	public override void OnGraphStop(Playable playable)
	{
	}

	[Token(Token = "0x6000142")]
	[Address(RVA = "0x4EADC4", Offset = "0x4EADC4", VA = "0x4EADC4")]
	public LightControlShadowORDisableMixerBehaviour()
	{
	}
}
[Token(Token = "0x2000057")]
[AttributeAttribute(Name = "TrackColorAttribute", RVA = "0x2E5D20", Offset = "0x2E5D20")]
[AttributeAttribute(Name = "TrackClipTypeAttribute", RVA = "0x2E5D20", Offset = "0x2E5D20")]
[AttributeAttribute(Name = "TrackBindingTypeAttribute", RVA = "0x2E5D20", Offset = "0x2E5D20")]
public class LightControlShadowORDisableTrack : TrackAsset
{
	[Token(Token = "0x6000143")]
	[Address(RVA = "0x4EADCC", Offset = "0x4EADCC", VA = "0x4EADCC", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000144")]
	[Address(RVA = "0x4EAEA0", Offset = "0x4EAEA0", VA = "0x4EAEA0", Slot = "28")]
	public override void GatherProperties(PlayableDirector director, IPropertyCollector driver)
	{
	}

	[Token(Token = "0x6000145")]
	[Address(RVA = "0x4EAEA8", Offset = "0x4EAEA8", VA = "0x4EAEA8")]
	public LightControlShadowORDisableTrack()
	{
	}
}
[Serializable]
[Token(Token = "0x2000058")]
public class NavMeshAgentControlBehaviour : PlayableBehaviour
{
	[Token(Token = "0x4000134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public Transform destination;

	[Token(Token = "0x4000135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public bool destinationSet;

	[Token(Token = "0x6000146")]
	[Address(RVA = "0x4F3494", Offset = "0x4F3494", VA = "0x4F3494", Slot = "15")]
	public override void OnPlayableCreate(Playable playable)
	{
	}

	[Token(Token = "0x6000147")]
	[Address(RVA = "0x4F34A0", Offset = "0x4F34A0", VA = "0x4F34A0")]
	public NavMeshAgentControlBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x2000059")]
public class NavMeshAgentControlClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x4000136")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public ExposedReference<Transform> destination;

	[Token(Token = "0x4000137")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[HideInInspector]
	public NavMeshAgentControlBehaviour template;

	[Token(Token = "0x17000008")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x6000148")]
		[Address(RVA = "0x4F34A8", Offset = "0x4F34A8", VA = "0x4F34A8", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x6000149")]
	[Address(RVA = "0x4F34B0", Offset = "0x4F34B0", VA = "0x4F34B0", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x600014A")]
	[Address(RVA = "0x4F3600", Offset = "0x4F3600", VA = "0x4F3600")]
	public NavMeshAgentControlClip()
	{
	}
}
[Token(Token = "0x200005A")]
public class NavMeshAgentControlMixerBehaviour : PlayableBehaviour
{
	[Token(Token = "0x600014B")]
	[Address(RVA = "0x4F367C", Offset = "0x4F367C", VA = "0x4F367C", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x600014C")]
	[Address(RVA = "0x4F3978", Offset = "0x4F3978", VA = "0x4F3978")]
	public NavMeshAgentControlMixerBehaviour()
	{
	}
}
[Token(Token = "0x200005B")]
[AttributeAttribute(Name = "TrackColorAttribute", RVA = "0x2E5DEC", Offset = "0x2E5DEC")]
[AttributeAttribute(Name = "TrackClipTypeAttribute", RVA = "0x2E5DEC", Offset = "0x2E5DEC")]
[AttributeAttribute(Name = "TrackBindingTypeAttribute", RVA = "0x2E5DEC", Offset = "0x2E5DEC")]
public class NavMeshAgentControlTrack : TrackAsset
{
	[Token(Token = "0x600014D")]
	[Address(RVA = "0x4F3980", Offset = "0x4F3980", VA = "0x4F3980", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x600014E")]
	[Address(RVA = "0x4F3A54", Offset = "0x4F3A54", VA = "0x4F3A54")]
	public NavMeshAgentControlTrack()
	{
	}
}
[Serializable]
[Token(Token = "0x200005C")]
public class ScreenFaderBehaviour : PlayableBehaviour
{
	[Token(Token = "0x4000138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public Color color;

	[Token(Token = "0x4000139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Color colorIn;

	[Token(Token = "0x400013A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Color colorOut;

	[Token(Token = "0x600014F")]
	[Address(RVA = "0xA8B300", Offset = "0xA8B300", VA = "0xA8B300")]
	public ScreenFaderBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x200005D")]
public class ScreenFaderClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x400013B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public ScreenFaderBehaviour template;

	[Token(Token = "0x17000009")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x6000150")]
		[Address(RVA = "0xA8B37C", Offset = "0xA8B37C", VA = "0xA8B37C", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x6000151")]
	[Address(RVA = "0xA8B384", Offset = "0xA8B384", VA = "0xA8B384", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000152")]
	[Address(RVA = "0xA8B464", Offset = "0xA8B464", VA = "0xA8B464")]
	public ScreenFaderClip()
	{
	}
}
[Token(Token = "0x200005E")]
public class ScreenFaderMixerBehaviour : PlayableBehaviour
{
	[Token(Token = "0x400013C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private Color m_DefaultColor;

	[Token(Token = "0x400013D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Image m_TrackBinding;

	[Token(Token = "0x400013E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private bool m_FirstFrameHappened;

	[Token(Token = "0x6000153")]
	[Address(RVA = "0xA8B4DC", Offset = "0xA8B4DC", VA = "0xA8B4DC", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x6000154")]
	[Address(RVA = "0xA8B93C", Offset = "0xA8B93C", VA = "0xA8B93C", Slot = "14")]
	public override void OnGraphStop(Playable playable)
	{
	}

	[Token(Token = "0x6000155")]
	[Address(RVA = "0xA8B9A4", Offset = "0xA8B9A4", VA = "0xA8B9A4")]
	public ScreenFaderMixerBehaviour()
	{
	}
}
[Token(Token = "0x200005F")]
[AttributeAttribute(Name = "TrackColorAttribute", RVA = "0x2E5EC4", Offset = "0x2E5EC4")]
[AttributeAttribute(Name = "TrackClipTypeAttribute", RVA = "0x2E5EC4", Offset = "0x2E5EC4")]
[AttributeAttribute(Name = "TrackBindingTypeAttribute", RVA = "0x2E5EC4", Offset = "0x2E5EC4")]
public class ScreenFaderTrack : TrackAsset
{
	[Token(Token = "0x6000156")]
	[Address(RVA = "0xA8B9AC", Offset = "0xA8B9AC", VA = "0xA8B9AC", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000157")]
	[Address(RVA = "0xA8BA80", Offset = "0xA8BA80", VA = "0xA8BA80", Slot = "28")]
	public override void GatherProperties(PlayableDirector director, IPropertyCollector driver)
	{
	}

	[Token(Token = "0x6000158")]
	[Address(RVA = "0xA8BA88", Offset = "0xA8BA88", VA = "0xA8BA88")]
	public ScreenFaderTrack()
	{
	}
}
[Serializable]
[Token(Token = "0x2000060")]
public class TextSwitcherBehaviour : PlayableBehaviour
{
	[Token(Token = "0x400013F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public Color color;

	[Token(Token = "0x4000140")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int fontSize;

	[Token(Token = "0x4000141")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public string text;

	[Token(Token = "0x6000159")]
	[Address(RVA = "0x59B8B0", Offset = "0x59B8B0", VA = "0x59B8B0")]
	public TextSwitcherBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x2000061")]
public class TextSwitcherClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x4000142")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public TextSwitcherBehaviour template;

	[Token(Token = "0x1700000A")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x600015A")]
		[Address(RVA = "0x59B8FC", Offset = "0x59B8FC", VA = "0x59B8FC", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x600015B")]
	[Address(RVA = "0x59B904", Offset = "0x59B904", VA = "0x59B904", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x600015C")]
	[Address(RVA = "0x59B9E4", Offset = "0x59B9E4", VA = "0x59B9E4")]
	public TextSwitcherClip()
	{
	}
}
[Token(Token = "0x2000062")]
public class TextSwitcherMixerBehaviour : PlayableBehaviour
{
	[Token(Token = "0x4000143")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private Color m_DefaultColor;

	[Token(Token = "0x4000144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int m_DefaultFontSize;

	[Token(Token = "0x4000145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private string m_DefaultText;

	[Token(Token = "0x4000146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Text m_TrackBinding;

	[Token(Token = "0x4000147")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private bool m_FirstFrameHappened;

	[Token(Token = "0x600015D")]
	[Address(RVA = "0x59BA5C", Offset = "0x59BA5C", VA = "0x59BA5C", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x600015E")]
	[Address(RVA = "0x59C00C", Offset = "0x59C00C", VA = "0x59C00C", Slot = "16")]
	public override void OnPlayableDestroy(Playable playable)
	{
	}

	[Token(Token = "0x600015F")]
	[Address(RVA = "0x59C158", Offset = "0x59C158", VA = "0x59C158")]
	public TextSwitcherMixerBehaviour()
	{
	}
}
[Token(Token = "0x2000063")]
[AttributeAttribute(Name = "TrackColorAttribute", RVA = "0x2E5F9C", Offset = "0x2E5F9C")]
[AttributeAttribute(Name = "TrackClipTypeAttribute", RVA = "0x2E5F9C", Offset = "0x2E5F9C")]
[AttributeAttribute(Name = "TrackBindingTypeAttribute", RVA = "0x2E5F9C", Offset = "0x2E5F9C")]
public class TextSwitcherTrack : TrackAsset
{
	[Token(Token = "0x6000160")]
	[Address(RVA = "0x59C160", Offset = "0x59C160", VA = "0x59C160", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000161")]
	[Address(RVA = "0x59C234", Offset = "0x59C234", VA = "0x59C234", Slot = "28")]
	public override void GatherProperties(PlayableDirector director, IPropertyCollector driver)
	{
	}

	[Token(Token = "0x6000162")]
	[Address(RVA = "0x59C23C", Offset = "0x59C23C", VA = "0x59C23C")]
	public TextSwitcherTrack()
	{
	}
}
[Serializable]
[Token(Token = "0x2000064")]
public class TimeDilationBehaviour : PlayableBehaviour
{
	[Token(Token = "0x4000148")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float timeScale;

	[Token(Token = "0x6000163")]
	[Address(RVA = "0x59C32C", Offset = "0x59C32C", VA = "0x59C32C")]
	public TimeDilationBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x2000065")]
public class TimeDilationClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x4000149")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public TimeDilationBehaviour template;

	[Token(Token = "0x1700000B")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x6000164")]
		[Address(RVA = "0x59C33C", Offset = "0x59C33C", VA = "0x59C33C", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x6000165")]
	[Address(RVA = "0x59C344", Offset = "0x59C344", VA = "0x59C344", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000166")]
	[Address(RVA = "0x59C424", Offset = "0x59C424", VA = "0x59C424")]
	public TimeDilationClip()
	{
	}
}
[Token(Token = "0x2000066")]
public class TimeDilationMixerBehaviour : PlayableBehaviour
{
	[Token(Token = "0x400014A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private readonly float defaultTimeScale;

	[Token(Token = "0x6000167")]
	[Address(RVA = "0x59C4AC", Offset = "0x59C4AC", VA = "0x59C4AC", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x6000168")]
	[Address(RVA = "0x59C6D8", Offset = "0x59C6D8", VA = "0x59C6D8", Slot = "18")]
	public override void OnBehaviourPause(Playable playable, FrameData info)
	{
	}

	[Token(Token = "0x6000169")]
	[Address(RVA = "0x59C6E4", Offset = "0x59C6E4", VA = "0x59C6E4", Slot = "14")]
	public override void OnGraphStop(Playable playable)
	{
	}

	[Token(Token = "0x600016A")]
	[Address(RVA = "0x59C6F0", Offset = "0x59C6F0", VA = "0x59C6F0", Slot = "16")]
	public override void OnPlayableDestroy(Playable playable)
	{
	}

	[Token(Token = "0x600016B")]
	[Address(RVA = "0x59C6FC", Offset = "0x59C6FC", VA = "0x59C6FC")]
	public TimeDilationMixerBehaviour()
	{
	}
}
[Token(Token = "0x2000067")]
[AttributeAttribute(Name = "TrackColorAttribute", RVA = "0x2E6074", Offset = "0x2E6074")]
[AttributeAttribute(Name = "TrackClipTypeAttribute", RVA = "0x2E6074", Offset = "0x2E6074")]
public class TimeDilationTrack : TrackAsset
{
	[Token(Token = "0x600016C")]
	[Address(RVA = "0x59C70C", Offset = "0x59C70C", VA = "0x59C70C", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x600016D")]
	[Address(RVA = "0x59C7E0", Offset = "0x59C7E0", VA = "0x59C7E0")]
	public TimeDilationTrack()
	{
	}
}
[Serializable]
[Token(Token = "0x2000068")]
public class TransformTweenBehaviour : PlayableBehaviour
{
	[Token(Token = "0x20003E8")]
	public enum TweenType
	{
		[Token(Token = "0x4001873")]
		Linear,
		[Token(Token = "0x4001874")]
		Deceleration,
		[Token(Token = "0x4001875")]
		Harmonic,
		[Token(Token = "0x4001876")]
		Custom
	}

	[Token(Token = "0x400014B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public Transform startLocation;

	[Token(Token = "0x400014C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Transform endLocation;

	[Token(Token = "0x400014D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool tweenPosition;

	[Token(Token = "0x400014E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	public bool tweenRotation;

	[Token(Token = "0x400014F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public TweenType tweenType;

	[Token(Token = "0x4000150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve customCurve;

	[Token(Token = "0x4000151")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector3 startingPosition;

	[Token(Token = "0x4000152")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Quaternion startingRotation;

	[Token(Token = "0x4000153")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private AnimationCurve m_LinearCurve;

	[Token(Token = "0x4000154")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private AnimationCurve m_DecelerationCurve;

	[Token(Token = "0x4000155")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private AnimationCurve m_HarmonicCurve;

	[Token(Token = "0x4000156")]
	private const float k_RightAngleInRads = (float)Math.PI / 2f;

	[Token(Token = "0x600016E")]
	[Address(RVA = "0x59FA80", Offset = "0x59FA80", VA = "0x59FA80", Slot = "19")]
	public override void PrepareFrame(Playable playable, FrameData info)
	{
	}

	[Token(Token = "0x600016F")]
	[Address(RVA = "0x59FB84", Offset = "0x59FB84", VA = "0x59FB84")]
	public float EvaluateCurrentCurve(float time)
	{
		return default(float);
	}

	[Token(Token = "0x6000170")]
	[Address(RVA = "0x59FC8C", Offset = "0x59FC8C", VA = "0x59FC8C")]
	private bool IsCustomCurveNormalised()
	{
		return default(bool);
	}

	[Token(Token = "0x6000171")]
	[Address(RVA = "0x59FF90", Offset = "0x59FF90", VA = "0x59FF90")]
	public TransformTweenBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x2000069")]
public class TransformTweenClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x4000157")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public TransformTweenBehaviour template;

	[Token(Token = "0x4000158")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ExposedReference<Transform> startLocation;

	[Token(Token = "0x4000159")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ExposedReference<Transform> endLocation;

	[Token(Token = "0x1700000C")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x6000172")]
		[Address(RVA = "0x5A01E4", Offset = "0x5A01E4", VA = "0x5A01E4", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x6000173")]
	[Address(RVA = "0x5A01EC", Offset = "0x5A01EC", VA = "0x5A01EC", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000174")]
	[Address(RVA = "0x5A037C", Offset = "0x5A037C", VA = "0x5A037C")]
	public TransformTweenClip()
	{
	}
}
[Token(Token = "0x200006A")]
public class TransformTweenMixerBehaviour : PlayableBehaviour
{
	[Token(Token = "0x400015A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private bool m_FirstFrameHappened;

	[Token(Token = "0x6000175")]
	[Address(RVA = "0x5A03F4", Offset = "0x5A03F4", VA = "0x5A03F4", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x6000176")]
	[Address(RVA = "0x5A0D64", Offset = "0x5A0D64", VA = "0x5A0D64", Slot = "16")]
	public override void OnPlayableDestroy(Playable playable)
	{
	}

	[Token(Token = "0x6000177")]
	[Address(RVA = "0x5A0D20", Offset = "0x5A0D20", VA = "0x5A0D20")]
	private static Quaternion AddQuaternions(Quaternion first, Quaternion second)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000178")]
	[Address(RVA = "0x5A0CE8", Offset = "0x5A0CE8", VA = "0x5A0CE8")]
	private static Quaternion ScaleQuaternion(Quaternion rotation, float multiplier)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000179")]
	[Address(RVA = "0x5A0D70", Offset = "0x5A0D70", VA = "0x5A0D70")]
	private static float QuaternionMagnitude(Quaternion rotation)
	{
		return default(float);
	}

	[Token(Token = "0x600017A")]
	[Address(RVA = "0x5A0BA4", Offset = "0x5A0BA4", VA = "0x5A0BA4")]
	private static Quaternion NormalizeQuaternion(Quaternion rotation)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x600017B")]
	[Address(RVA = "0x5A0E8C", Offset = "0x5A0E8C", VA = "0x5A0E8C")]
	public TransformTweenMixerBehaviour()
	{
	}
}
[Token(Token = "0x200006B")]
[AttributeAttribute(Name = "TrackColorAttribute", RVA = "0x2E6120", Offset = "0x2E6120")]
[AttributeAttribute(Name = "TrackClipTypeAttribute", RVA = "0x2E6120", Offset = "0x2E6120")]
[AttributeAttribute(Name = "TrackBindingTypeAttribute", RVA = "0x2E6120", Offset = "0x2E6120")]
public class TransformTweenTrack : TrackAsset
{
	[Token(Token = "0x600017C")]
	[Address(RVA = "0x5A0E94", Offset = "0x5A0E94", VA = "0x5A0E94", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x600017D")]
	[Address(RVA = "0x5A0F68", Offset = "0x5A0F68", VA = "0x5A0F68", Slot = "28")]
	public override void GatherProperties(PlayableDirector director, IPropertyCollector driver)
	{
	}

	[Token(Token = "0x600017E")]
	[Address(RVA = "0x5A0F70", Offset = "0x5A0F70", VA = "0x5A0F70")]
	public TransformTweenTrack()
	{
	}
}
[Token(Token = "0x200006C")]
public class Level : MonoBehaviour
{
	[Token(Token = "0x400015B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[Scene]
	public string ID;

	[Token(Token = "0x400015C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Light[] lights;

	[Token(Token = "0x600017F")]
	[Address(RVA = "0x4E9074", Offset = "0x4E9074", VA = "0x4E9074")]
	public void Init()
	{
	}

	[Token(Token = "0x6000180")]
	[Address(RVA = "0x4E90FC", Offset = "0x4E90FC", VA = "0x4E90FC")]
	public void Clean()
	{
	}

	[Token(Token = "0x6000181")]
	[Address(RVA = "0x4E9100", Offset = "0x4E9100", VA = "0x4E9100")]
	public Level()
	{
	}
}
[Token(Token = "0x200006D")]
[ExecuteInEditMode]
public class LevelManager : Singleton<LevelManager>
{
	[Token(Token = "0x20003E9")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EA88C", Offset = "0x2EA88C")]
	private sealed class <LoadNextLevel>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private int <>1__state;

		[Token(Token = "0x4001878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private object <>2__current;

		[Token(Token = "0x4001879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LevelManager <>4__this;

		[Token(Token = "0x17000368")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001994")]
			[Address(RVA = "0x4E9CBC", Offset = "0x4E9CBC", VA = "0x4E9CBC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000369")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001996")]
			[Address(RVA = "0x4E9D4C", Offset = "0x4E9D4C", VA = "0x4E9D4C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001991")]
		[Address(RVA = "0x4E9814", Offset = "0x4E9814", VA = "0x4E9814")]
		[DebuggerHidden]
		public <LoadNextLevel>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x6001992")]
		[Address(RVA = "0x4E99E8", Offset = "0x4E99E8", VA = "0x4E99E8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001993")]
		[Address(RVA = "0x4E99EC", Offset = "0x4E99EC", VA = "0x4E99EC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001995")]
		[Address(RVA = "0x4E9CC4", Offset = "0x4E9CC4", VA = "0x4E9CC4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400015F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private List<string> m_levels;

	[Token(Token = "0x4000160")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<LevelConfiguration> m_levelConfigurations;

	[Token(Token = "0x4000161")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private WaitForEndOfFrame m_waitEOF;

	[Token(Token = "0x4000162")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private AsyncOperation m_operation;

	[Token(Token = "0x4000163")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private LevelConfiguration m_currentLevelConfig;

	[Token(Token = "0x4000164")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool m_isLoading;

	[Token(Token = "0x4000165")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool m_initialized;

	[Token(Token = "0x14000004")]
	public event Action<string> OnLevelLoaded
	{
		[Token(Token = "0x6000182")]
		[Address(RVA = "0x4E9130", Offset = "0x4E9130", VA = "0x4E9130")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F8BD8", Offset = "0x2F8BD8")]
		add
		{
		}
		[Token(Token = "0x6000183")]
		[Address(RVA = "0x4E91E8", Offset = "0x4E91E8", VA = "0x4E91E8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F8BE8", Offset = "0x2F8BE8")]
		remove
		{
		}
	}

	[Token(Token = "0x14000005")]
	public event Action<string> OnLoadLevelFailed
	{
		[Token(Token = "0x6000184")]
		[Address(RVA = "0x4E92A0", Offset = "0x4E92A0", VA = "0x4E92A0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F8BF8", Offset = "0x2F8BF8")]
		add
		{
		}
		[Token(Token = "0x6000185")]
		[Address(RVA = "0x4E9358", Offset = "0x4E9358", VA = "0x4E9358")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F8C08", Offset = "0x2F8C08")]
		remove
		{
		}
	}

	[Token(Token = "0x6000186")]
	[Address(RVA = "0x4E9410", Offset = "0x4E9410", VA = "0x4E9410")]
	public void Init()
	{
	}

	[Token(Token = "0x6000187")]
	[Address(RVA = "0x4E94FC", Offset = "0x4E94FC", VA = "0x4E94FC")]
	public void Clean()
	{
	}

	[Token(Token = "0x6000188")]
	[Address(RVA = "0x4E952C", Offset = "0x4E952C", VA = "0x4E952C")]
	private new void OnDestroy()
	{
	}

	[Token(Token = "0x6000189")]
	[Address(RVA = "0x4E955C", Offset = "0x4E955C", VA = "0x4E955C")]
	public bool IsLevelLoadedOrLoading(string ID)
	{
		return default(bool);
	}

	[Token(Token = "0x600018A")]
	[Address(RVA = "0x4E962C", Offset = "0x4E962C", VA = "0x4E962C")]
	public void LoadLevel(string ID, LoadSceneMode mode = LoadSceneMode.Single)
	{
	}

	[Token(Token = "0x600018B")]
	[Address(RVA = "0x4E9704", Offset = "0x4E9704", VA = "0x4E9704")]
	private void StartLoadingNextLevel()
	{
	}

	[Token(Token = "0x600018C")]
	[Address(RVA = "0x4E9788", Offset = "0x4E9788", VA = "0x4E9788")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2F8C18", Offset = "0x2F8C18")]
	private IEnumerator LoadNextLevel()
	{
		return null;
	}

	[Token(Token = "0x600018D")]
	[Address(RVA = "0x4E9834", Offset = "0x4E9834", VA = "0x4E9834")]
	public void UnloadLevel(string ID)
	{
	}

	[Token(Token = "0x600018E")]
	[Address(RVA = "0x4E9934", Offset = "0x4E9934", VA = "0x4E9934")]
	public LevelManager()
	{
	}
}
[Token(Token = "0x200006E")]
public class LevelConfiguration
{
	[Token(Token = "0x4000166")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public string ID;

	[Token(Token = "0x4000167")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public LoadSceneMode mode;

	[Token(Token = "0x600018F")]
	[Address(RVA = "0x4E9108", Offset = "0x4E9108", VA = "0x4E9108")]
	public LevelConfiguration(string ID, LoadSceneMode mode = LoadSceneMode.Single)
	{
	}
}
[Token(Token = "0x200006F")]
public class LIGHT_Girophare : MonoBehaviour
{
	[Token(Token = "0x4000168")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Color c_StartColor;

	[Token(Token = "0x4000169")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Color c_EndColor;

	[Token(Token = "0x400016A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float f_TimeSwitchLight;

	[Token(Token = "0x400016B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Light l_Light;

	[Token(Token = "0x6000190")]
	[Address(RVA = "0x4E45AC", Offset = "0x4E45AC", VA = "0x4E45AC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000191")]
	[Address(RVA = "0x4E4634", Offset = "0x4E4634", VA = "0x4E4634")]
	private void SwitchLight()
	{
	}

	[Token(Token = "0x6000192")]
	[Address(RVA = "0x4E4754", Offset = "0x4E4754", VA = "0x4E4754")]
	public LIGHT_Girophare()
	{
	}
}
[Token(Token = "0x2000070")]
[ExecuteInEditMode]
public class StroboscopicLight : MonoBehaviour
{
	[Token(Token = "0x400016C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float changeTime;

	[Token(Token = "0x400016D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Light _light;

	[Token(Token = "0x400016E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private LightDirectionControl _lightDirectionControl;

	[Token(Token = "0x400016F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float timer;

	[Token(Token = "0x4000170")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private bool isLightEnabled;

	[Token(Token = "0x6000193")]
	[Address(RVA = "0x59B694", Offset = "0x59B694", VA = "0x59B694")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000194")]
	[Address(RVA = "0x59B718", Offset = "0x59B718", VA = "0x59B718")]
	private void Update()
	{
	}

	[Token(Token = "0x6000195")]
	[Address(RVA = "0x59B8A0", Offset = "0x59B8A0", VA = "0x59B8A0")]
	public StroboscopicLight()
	{
	}
}
[Token(Token = "0x2000071")]
public class WiggleEmissive : MonoBehaviour
{
	[Token(Token = "0x20003EA")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EA89C", Offset = "0x2EA89C")]
	private sealed class <>c__DisplayClass10_0
	{
		[Token(Token = "0x400187A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float newIntensity;

		[Token(Token = "0x400187B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public WiggleEmissive <>4__this;

		[Token(Token = "0x6001997")]
		[Address(RVA = "0x178A83C", Offset = "0x178A83C", VA = "0x178A83C")]
		public <>c__DisplayClass10_0()
		{
		}

		[Token(Token = "0x6001998")]
		[Address(RVA = "0x178A95C", Offset = "0x178A95C", VA = "0x178A95C")]
		internal void <Update>b__1()
		{
		}
	}

	[Token(Token = "0x4000171")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Material mat;

	[Token(Token = "0x4000172")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x2ECE60", Offset = "0x2ECE60")]
	public float intensityFrequence;

	[Token(Token = "0x4000173")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float initialIntensity;

	[Token(Token = "0x4000174")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float oldIntensity;

	[Token(Token = "0x4000175")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float intensityAmplitude;

	[Token(Token = "0x4000176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float timerIntensity;

	[Token(Token = "0x4000177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Color realColor;

	[Token(Token = "0x4000178")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Tweener tweenIntensity;

	[Token(Token = "0x4000179")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Light thatLight;

	[Token(Token = "0x6000196")]
	[Address(RVA = "0x178A510", Offset = "0x178A510", VA = "0x178A510")]
	private void Start()
	{
	}

	[Token(Token = "0x6000197")]
	[Address(RVA = "0x178A5F0", Offset = "0x178A5F0", VA = "0x178A5F0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000198")]
	[Address(RVA = "0x178A844", Offset = "0x178A844", VA = "0x178A844")]
	private void ChangeEmissionIntensity(float x)
	{
	}

	[Token(Token = "0x6000199")]
	[Address(RVA = "0x178A94C", Offset = "0x178A94C", VA = "0x178A94C")]
	public WiggleEmissive()
	{
	}

	[Token(Token = "0x600019A")]
	[Address(RVA = "0x178A954", Offset = "0x178A954", VA = "0x178A954")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F8C90", Offset = "0x2F8C90")]
	private float <Update>b__10_0()
	{
		return default(float);
	}
}
[Token(Token = "0x2000072")]
public class WiggleLight : MonoBehaviour
{
	[Token(Token = "0x400017A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x2ECEA8", Offset = "0x2ECEA8")]
	public bool needToCallInit;

	[Token(Token = "0x400017B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float InitialIntensity;

	[Token(Token = "0x400017C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float InitialRange;

	[Token(Token = "0x400017D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x2ECEE0", Offset = "0x2ECEE0")]
	public bool activeWiggleRange;

	[Token(Token = "0x400017E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float rangeFrequence;

	[Token(Token = "0x400017F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float rangeAmplitude;

	[Token(Token = "0x4000180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float timerRange;

	[Token(Token = "0x4000181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float realRange;

	[Token(Token = "0x4000182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Tweener tweenRange;

	[Token(Token = "0x4000183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x2ECF1C", Offset = "0x2ECF1C")]
	public bool activeWiggleIntensity;

	[Token(Token = "0x4000184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float intensityFrequence;

	[Token(Token = "0x4000185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float intensityAmplitude;

	[Token(Token = "0x4000186")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float timerIntensity;

	[Token(Token = "0x4000187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float realIntensity;

	[Token(Token = "0x4000188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Tweener tweenIntensity;

	[Token(Token = "0x4000189")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Light thatLight;

	[Token(Token = "0x400018A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool isInit;

	[Token(Token = "0x600019B")]
	[Address(RVA = "0x178A984", Offset = "0x178A984", VA = "0x178A984")]
	private void Start()
	{
	}

	[Token(Token = "0x600019C")]
	[Address(RVA = "0x178AAA4", Offset = "0x178AAA4", VA = "0x178AAA4")]
	public void Init(float time)
	{
	}

	[Token(Token = "0x600019D")]
	[Address(RVA = "0x178ACFC", Offset = "0x178ACFC", VA = "0x178ACFC")]
	private void Update()
	{
	}

	[Token(Token = "0x600019E")]
	[Address(RVA = "0x178AFFC", Offset = "0x178AFFC", VA = "0x178AFFC")]
	public WiggleLight()
	{
	}

	[Token(Token = "0x600019F")]
	[Address(RVA = "0x178B004", Offset = "0x178B004", VA = "0x178B004")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F8CA0", Offset = "0x2F8CA0")]
	private float <Init>b__18_0()
	{
		return default(float);
	}

	[Token(Token = "0x60001A0")]
	[Address(RVA = "0x178B030", Offset = "0x178B030", VA = "0x178B030")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F8CB0", Offset = "0x2F8CB0")]
	private void <Init>b__18_1(float x)
	{
	}

	[Token(Token = "0x60001A1")]
	[Address(RVA = "0x178B064", Offset = "0x178B064", VA = "0x178B064")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F8CC0", Offset = "0x2F8CC0")]
	private void <Init>b__18_2()
	{
	}

	[Token(Token = "0x60001A2")]
	[Address(RVA = "0x178B070", Offset = "0x178B070", VA = "0x178B070")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F8CD0", Offset = "0x2F8CD0")]
	private float <Init>b__18_3()
	{
		return default(float);
	}

	[Token(Token = "0x60001A3")]
	[Address(RVA = "0x178B09C", Offset = "0x178B09C", VA = "0x178B09C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F8CE0", Offset = "0x2F8CE0")]
	private void <Init>b__18_4(float x)
	{
	}

	[Token(Token = "0x60001A4")]
	[Address(RVA = "0x178B0D0", Offset = "0x178B0D0", VA = "0x178B0D0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F8CF0", Offset = "0x2F8CF0")]
	private float <Update>b__19_0()
	{
		return default(float);
	}

	[Token(Token = "0x60001A5")]
	[Address(RVA = "0x178B0FC", Offset = "0x178B0FC", VA = "0x178B0FC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F8D00", Offset = "0x2F8D00")]
	private void <Update>b__19_1(float x)
	{
	}

	[Token(Token = "0x60001A6")]
	[Address(RVA = "0x178B130", Offset = "0x178B130", VA = "0x178B130")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F8D10", Offset = "0x2F8D10")]
	private float <Update>b__19_2()
	{
		return default(float);
	}

	[Token(Token = "0x60001A7")]
	[Address(RVA = "0x178B15C", Offset = "0x178B15C", VA = "0x178B15C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F8D20", Offset = "0x2F8D20")]
	private void <Update>b__19_3(float x)
	{
	}
}
[Token(Token = "0x2000073")]
public class DisactiveInFrontOfMask : MonoBehaviour
{
	[Token(Token = "0x400018B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Transform mask;

	[Token(Token = "0x400018C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Transform trCam;

	[Token(Token = "0x400018D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private SkinnedMeshRenderer smr;

	[Token(Token = "0x60001A8")]
	[Address(RVA = "0x4DACFC", Offset = "0x4DACFC", VA = "0x4DACFC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001A9")]
	[Address(RVA = "0x4DAD00", Offset = "0x4DAD00", VA = "0x4DAD00")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60001AA")]
	[Address(RVA = "0x4DAD04", Offset = "0x4DAD04", VA = "0x4DAD04")]
	public DisactiveInFrontOfMask()
	{
	}
}
[Token(Token = "0x2000074")]
public class EmissionMaterialManager : MonoBehaviour
{
	[Token(Token = "0x400018E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public List<GameObject> targetsObjects;

	[Token(Token = "0x400018F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private List<Color> colors;

	[Token(Token = "0x60001AB")]
	[Address(RVA = "0x4DB21C", Offset = "0x4DB21C", VA = "0x4DB21C")]
	private void GetEmissionColor()
	{
	}

	[Token(Token = "0x60001AC")]
	[Address(RVA = "0x4DB5C4", Offset = "0x4DB5C4", VA = "0x4DB5C4")]
	public void ChangeEmissionIntensity(float value)
	{
	}

	[Token(Token = "0x60001AD")]
	[Address(RVA = "0x4DB9A0", Offset = "0x4DB9A0", VA = "0x4DB9A0")]
	public EmissionMaterialManager()
	{
	}
}
[Token(Token = "0x2000075")]
public class IntermittenceEmissive : MonoBehaviour
{
	[Token(Token = "0x4000190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float timeSwitch;

	[Token(Token = "0x4000191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Color colorA;

	[Token(Token = "0x4000192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Color colorB;

	[Token(Token = "0x4000193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool isColorA;

	[Token(Token = "0x4000194")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float timer;

	[Token(Token = "0x4000195")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Material mat;

	[Token(Token = "0x60001AE")]
	[Address(RVA = "0x4E2EBC", Offset = "0x4E2EBC", VA = "0x4E2EBC")]
	private void Start()
	{
	}

	[Token(Token = "0x60001AF")]
	[Address(RVA = "0x4E3038", Offset = "0x4E3038", VA = "0x4E3038")]
	private void Update()
	{
	}

	[Token(Token = "0x60001B0")]
	[Address(RVA = "0x4E2F54", Offset = "0x4E2F54", VA = "0x4E2F54")]
	private void SetNewColor()
	{
	}

	[Token(Token = "0x60001B1")]
	[Address(RVA = "0x4E3098", Offset = "0x4E3098", VA = "0x4E3098")]
	public IntermittenceEmissive()
	{
	}
}
[Token(Token = "0x2000076")]
public class MaterialPropertyBlockModifier : MonoBehaviour
{
	[Token(Token = "0x4000196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public List<PropertyBlock> propertyBlocks;

	[Token(Token = "0x4000197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Renderer _renderer;

	[Token(Token = "0x4000198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public MaterialPropertyBlock _propBlock;

	[Token(Token = "0x4000199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int materialIndex;

	[Token(Token = "0x60001B2")]
	[Address(RVA = "0x4F161C", Offset = "0x4F161C", VA = "0x4F161C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60001B3")]
	[Address(RVA = "0x4F1B5C", Offset = "0x4F1B5C", VA = "0x4F1B5C")]
	public void ClearBlocks()
	{
	}

	[Token(Token = "0x60001B4")]
	[Address(RVA = "0x4F1C1C", Offset = "0x4F1C1C", VA = "0x4F1C1C")]
	public bool CheckForRenderer()
	{
		return default(bool);
	}

	[Token(Token = "0x60001B5")]
	[Address(RVA = "0x4F1620", Offset = "0x4F1620", VA = "0x4F1620")]
	public void ApplyPropertyBlocks()
	{
	}

	[Token(Token = "0x60001B6")]
	[Address(RVA = "0x4F1DF0", Offset = "0x4F1DF0", VA = "0x4F1DF0")]
	public MaterialPropertyBlockModifier()
	{
	}
}
[Serializable]
[Token(Token = "0x2000077")]
public class PropertyBlock
{
	[Token(Token = "0x400019A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public string propertyName;

	[Token(Token = "0x400019B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public int propertyIndex;

	[Token(Token = "0x400019C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public PropertyBlockType propertyType;

	[Token(Token = "0x400019D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Color valueColor;

	[Token(Token = "0x400019E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float valueFloat;

	[Token(Token = "0x400019F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int valueInt;

	[Token(Token = "0x40001A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Texture valueTexture;

	[Token(Token = "0x40001A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector4 valueVector;

	[Token(Token = "0x60001B7")]
	[Address(RVA = "0x8BAA88", Offset = "0x8BAA88", VA = "0x8BAA88")]
	public PropertyBlock()
	{
	}
}
[Serializable]
[Token(Token = "0x2000078")]
public enum PropertyBlockType
{
	[Token(Token = "0x40001A3")]
	Color,
	[Token(Token = "0x40001A4")]
	Vector,
	[Token(Token = "0x40001A5")]
	Float,
	[Token(Token = "0x40001A6")]
	Texture
}
[Token(Token = "0x2000079")]
public class RimMaterialManager : MonoBehaviour
{
	[Token(Token = "0x40001A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public List<Material> targetsMaterial;

	[Token(Token = "0x40001A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<GameObject> targetObj;

	[Token(Token = "0x60001B8")]
	[Address(RVA = "0x6880B0", Offset = "0x6880B0", VA = "0x6880B0")]
	public void ChangeRimDirectionX(float value)
	{
	}

	[Token(Token = "0x60001B9")]
	[Address(RVA = "0x6883B8", Offset = "0x6883B8", VA = "0x6883B8")]
	public void ChangeRimDirectionY(float value)
	{
	}

	[Token(Token = "0x60001BA")]
	[Address(RVA = "0x688424", Offset = "0x688424", VA = "0x688424")]
	public void ChangeRimIntensity(float value)
	{
	}

	[Token(Token = "0x60001BB")]
	[Address(RVA = "0x688490", Offset = "0x688490", VA = "0x688490")]
	public void ChangeRimColor(string colorHex)
	{
	}

	[Token(Token = "0x60001BC")]
	[Address(RVA = "0x688570", Offset = "0x688570", VA = "0x688570")]
	private void ChangeRimColor(Color value)
	{
	}

	[Token(Token = "0x60001BD")]
	[Address(RVA = "0x688678", Offset = "0x688678", VA = "0x688678")]
	private void ChangeProperty(string propertyName, Color value)
	{
	}

	[Token(Token = "0x60001BE")]
	[Address(RVA = "0x68811C", Offset = "0x68811C", VA = "0x68811C")]
	private void ChangeProperty(string propertyName, float value)
	{
	}

	[Token(Token = "0x60001BF")]
	[Address(RVA = "0x6887E4", Offset = "0x6887E4", VA = "0x6887E4")]
	public RimMaterialManager()
	{
	}
}
[Token(Token = "0x200007A")]
public class StencilMaterialManager : MonoBehaviour
{
	[Token(Token = "0x60001C0")]
	[Address(RVA = "0x59B144", Offset = "0x59B144", VA = "0x59B144")]
	public StencilMaterialManager()
	{
	}
}
[Token(Token = "0x200007B")]
public class ItemParticle : MonoBehaviour
{
	[Token(Token = "0x40001A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public bool isSwappable;

	[Token(Token = "0x40001AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GameObject modele_A;

	[Token(Token = "0x40001AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public GameObject modele_B;

	[Token(Token = "0x40001AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	[SerializeField]
	private Vector3 speedTranslation;

	[Token(Token = "0x40001AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[HideInInspector]
	[SerializeField]
	private Vector3 speedRotation;

	[Token(Token = "0x40001AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	[SerializeField]
	private float duration;

	[Token(Token = "0x40001AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[HideInInspector]
	[SerializeField]
	private float counter;

	[Token(Token = "0x60001C1")]
	[Address(RVA = "0x4E30A0", Offset = "0x4E30A0", VA = "0x4E30A0")]
	public void Init(float _duration, Vector3 _speedTranslation, Vector3 _speedRotation, float _counter = 0f, string modeleAName = "", string modeleBName = "", bool isModeleB = false)
	{
	}

	[Token(Token = "0x60001C2")]
	[Address(RVA = "0x4E3414", Offset = "0x4E3414", VA = "0x4E3414")]
	private void Update()
	{
	}

	[Token(Token = "0x60001C3")]
	[Address(RVA = "0x4E3670", Offset = "0x4E3670", VA = "0x4E3670")]
	public void SwapModele(bool isB)
	{
	}

	[Token(Token = "0x60001C4")]
	[Address(RVA = "0x4E36CC", Offset = "0x4E36CC", VA = "0x4E36CC")]
	public ItemParticle()
	{
	}
}
[Token(Token = "0x200007C")]
public class ItemParticlesEmitter : MonoBehaviour
{
	[Token(Token = "0x40001B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float range;

	[Token(Token = "0x40001B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool alwaysShowGizmo;

	[Token(Token = "0x40001B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public GameObject[] sources;

	[Token(Token = "0x40001B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float timeSpawn;

	[Token(Token = "0x40001B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x2ED01C", Offset = "0x2ED01C")]
	public float duration;

	[Token(Token = "0x40001B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 speedTranslation;

	[Token(Token = "0x40001B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Vector3 speedRotation;

	[Token(Token = "0x40001B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x2ED054", Offset = "0x2ED054")]
	public bool willSwap;

	[Token(Token = "0x40001B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public string modeleAName;

	[Token(Token = "0x40001B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string modeleBName;

	[Token(Token = "0x40001BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[HideInInspector]
	public bool willInstantiateModeleB;

	[Token(Token = "0x40001BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<Vector3> recentPositions;

	[Token(Token = "0x40001BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private int indexRecentPositions;

	[Token(Token = "0x40001BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float counter;

	[Token(Token = "0x40001BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool useDistanceSecurity;

	[Token(Token = "0x40001BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float maxDistanceBetweenParticles;

	[Token(Token = "0x40001C0")]
	private const int RECENTPOS_COUNT = 10;

	[Token(Token = "0x40001C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Vector3 Vector3Zero;

	[Token(Token = "0x60001C5")]
	[Address(RVA = "0x4E36D4", Offset = "0x4E36D4", VA = "0x4E36D4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001C6")]
	[Address(RVA = "0x4E36F0", Offset = "0x4E36F0", VA = "0x4E36F0")]
	public void InitRecentPositions()
	{
	}

	[Token(Token = "0x60001C7")]
	[Address(RVA = "0x4E37FC", Offset = "0x4E37FC", VA = "0x4E37FC")]
	private void Update()
	{
	}

	[Token(Token = "0x60001C8")]
	[Address(RVA = "0x4E3854", Offset = "0x4E3854", VA = "0x4E3854")]
	public void SpawnItem(float counter = 0f)
	{
	}

	[Token(Token = "0x60001C9")]
	[Address(RVA = "0x4E3E74", Offset = "0x4E3E74", VA = "0x4E3E74")]
	public void SwapModels(bool isModeleB = true)
	{
	}

	[Token(Token = "0x60001CA")]
	[Address(RVA = "0x4E3B60", Offset = "0x4E3B60", VA = "0x4E3B60")]
	public Vector3 FindRandPos(int iteration = 0)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60001CB")]
	[Address(RVA = "0x4E4258", Offset = "0x4E4258", VA = "0x4E4258")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60001CC")]
	[Address(RVA = "0x4E44B0", Offset = "0x4E44B0", VA = "0x4E44B0")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60001CD")]
	[Address(RVA = "0x4E4268", Offset = "0x4E4268", VA = "0x4E4268")]
	private void DrawGizmoCircleRange()
	{
	}

	[Token(Token = "0x60001CE")]
	[Address(RVA = "0x4E44C0", Offset = "0x4E44C0", VA = "0x4E44C0")]
	public ItemParticlesEmitter()
	{
	}
}
[Token(Token = "0x200007D")]
public class RotateIfFalling : MonoBehaviour
{
	[Token(Token = "0x40001C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Vector3 rotationSpeed;

	[Token(Token = "0x40001C3")]
	private const float tolerance = 0.01f;

	[Token(Token = "0x40001C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float oldPositionY;

	[Token(Token = "0x60001CF")]
	[Address(RVA = "0xF216E8", Offset = "0xF216E8", VA = "0xF216E8")]
	private void Start()
	{
	}

	[Token(Token = "0x60001D0")]
	[Address(RVA = "0xF216EC", Offset = "0xF216EC", VA = "0xF216EC")]
	private void Update()
	{
	}

	[Token(Token = "0x60001D1")]
	[Address(RVA = "0xF2193C", Offset = "0xF2193C", VA = "0xF2193C")]
	public RotateIfFalling()
	{
	}
}
[Token(Token = "0x200007E")]
public class DisabledAtStart : MonoBehaviour
{
	[Token(Token = "0x60001D2")]
	[Address(RVA = "0x4DABE8", Offset = "0x4DABE8", VA = "0x4DABE8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001D3")]
	[Address(RVA = "0x4DAC20", Offset = "0x4DAC20", VA = "0x4DAC20")]
	public DisabledAtStart()
	{
	}
}
[Token(Token = "0x200007F")]
public class DisabledAtStartIfNotActiveScene : MonoBehaviour
{
	[Token(Token = "0x60001D4")]
	[Address(RVA = "0x4DAC28", Offset = "0x4DAC28", VA = "0x4DAC28")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001D5")]
	[Address(RVA = "0x4DACB4", Offset = "0x4DACB4", VA = "0x4DACB4")]
	public DisabledAtStartIfNotActiveScene()
	{
	}
}
[Token(Token = "0x2000080")]
public class DisabledOnBuild : MonoBehaviour
{
	[Token(Token = "0x60001D6")]
	[Address(RVA = "0x4DACBC", Offset = "0x4DACBC", VA = "0x4DACBC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001D7")]
	[Address(RVA = "0x4DACF4", Offset = "0x4DACF4", VA = "0x4DACF4")]
	public DisabledOnBuild()
	{
	}
}
[Serializable]
[Token(Token = "0x2000081")]
public class FaunsBehaviour : PlayableBehaviour
{
	[Token(Token = "0x40001C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public UnityEvent EventAtBeginning;

	[Token(Token = "0x40001C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public UnityEvent EventAtEnd;

	[Token(Token = "0x40001C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool isEventFired;

	[Token(Token = "0x60001D8")]
	[Address(RVA = "0x4DE09C", Offset = "0x4DE09C", VA = "0x4DE09C", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x60001D9")]
	[Address(RVA = "0x4DE244", Offset = "0x4DE244", VA = "0x4DE244")]
	public FaunsBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x2000082")]
public class FaunsClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x40001C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public FaunsBehaviour behaviour;

	[Token(Token = "0x1700000D")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x60001DA")]
		[Address(RVA = "0x4DE24C", Offset = "0x4DE24C", VA = "0x4DE24C", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x60001DB")]
	[Address(RVA = "0x4DE254", Offset = "0x4DE254", VA = "0x4DE254", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x60001DC")]
	[Address(RVA = "0x4DE334", Offset = "0x4DE334", VA = "0x4DE334")]
	public FaunsClip()
	{
	}
}
[Token(Token = "0x2000083")]
[AttributeAttribute(Name = "TrackColorAttribute", RVA = "0x2E6218", Offset = "0x2E6218")]
[AttributeAttribute(Name = "TrackClipTypeAttribute", RVA = "0x2E6218", Offset = "0x2E6218")]
[AttributeAttribute(Name = "TrackBindingTypeAttribute", RVA = "0x2E6218", Offset = "0x2E6218")]
public class FaunsTrack : TrackAsset
{
	[Token(Token = "0x60001DD")]
	[Address(RVA = "0x4DE3B0", Offset = "0x4DE3B0", VA = "0x4DE3B0", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x60001DE")]
	[Address(RVA = "0x4DE7AC", Offset = "0x4DE7AC", VA = "0x4DE7AC")]
	public FaunsTrack()
	{
	}
}
[Token(Token = "0x2000084")]
public class CameraProcessController : MonoBehaviour
{
	[Token(Token = "0x40001C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public PostProcessingProfile defaultProfile;

	[Token(Token = "0x40001CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool SeekPostProcessOnSiblings;

	[Token(Token = "0x60001DF")]
	[Address(RVA = "0x6234C8", Offset = "0x6234C8", VA = "0x6234C8")]
	public void Start()
	{
	}

	[Token(Token = "0x60001E0")]
	[Address(RVA = "0x6234D0", Offset = "0x6234D0", VA = "0x6234D0")]
	public void ChangePostProcessingProfile(PostProcessingProfile newProfile)
	{
	}

	[Token(Token = "0x60001E1")]
	[Address(RVA = "0x623648", Offset = "0x623648", VA = "0x623648")]
	public CameraProcessController()
	{
	}
}
[Serializable]
[Token(Token = "0x2000085")]
public class WayPoint
{
	[Token(Token = "0x40001CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public Vector3 position;

	[Token(Token = "0x40001CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Quaternion rotation;

	[Token(Token = "0x60001E2")]
	[Address(RVA = "0x178A464", Offset = "0x178A464", VA = "0x178A464")]
	public WayPoint(Vector3 pos)
	{
	}
}
[Serializable]
[Token(Token = "0x2000086")]
public class CustomSpline
{
	[Token(Token = "0x40001CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public WayPoint[] wayPoints;

	[Token(Token = "0x40001CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x2ED09C", Offset = "0x2ED09C")]
	public float sizePoint;

	[Token(Token = "0x60001E3")]
	[Address(RVA = "0x5FA1A4", Offset = "0x5FA1A4", VA = "0x5FA1A4")]
	public CustomSpline()
	{
	}
}
[Token(Token = "0x2000087")]
public enum CreationMode
{
	[Token(Token = "0x40001D0")]
	TIME,
	[Token(Token = "0x40001D1")]
	LENGTH
}
[Token(Token = "0x2000088")]
public class CustomSplineDriver : MonoBehaviour
{
	[Token(Token = "0x40001D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public CustomSplineGenerator splineGenerator;

	[Token(Token = "0x40001D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool createPoints;

	[Token(Token = "0x40001D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[HideInInspector]
	public CreationMode creationMode;

	[Token(Token = "0x40001D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public float timeStamp;

	[Token(Token = "0x40001D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[HideInInspector]
	public float lengthStamp;

	[Token(Token = "0x40001D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private CustomSpline spline;

	[Token(Token = "0x40001D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float timer;

	[Token(Token = "0x60001E4")]
	[Address(RVA = "0x5FA1B8", Offset = "0x5FA1B8", VA = "0x5FA1B8")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x60001E5")]
	[Address(RVA = "0x5FA1E4", Offset = "0x5FA1E4", VA = "0x5FA1E4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001E6")]
	[Address(RVA = "0x5FA7E8", Offset = "0x5FA7E8", VA = "0x5FA7E8")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x2F8D30", Offset = "0x2F8D30")]
	private void Update()
	{
	}

	[Token(Token = "0x60001E7")]
	[Address(RVA = "0x5FA2A4", Offset = "0x5FA2A4", VA = "0x5FA2A4")]
	private void AddNewWayPoint()
	{
	}

	[Token(Token = "0x60001E8")]
	[Address(RVA = "0x5FAC74", Offset = "0x5FAC74", VA = "0x5FAC74")]
	private void LogAllWayPoints()
	{
	}

	[Token(Token = "0x60001E9")]
	[Address(RVA = "0x5FB070", Offset = "0x5FB070", VA = "0x5FB070")]
	public CustomSplineDriver()
	{
	}
}
[Token(Token = "0x2000089")]
public class CustomSplineGenerator : MonoBehaviour
{
	[Token(Token = "0x40001D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public CustomSpline spline;

	[Token(Token = "0x40001DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int verticesPerStep;

	[Token(Token = "0x40001DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float meshRadius;

	[Token(Token = "0x40001DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool recalculateNormals;

	[Token(Token = "0x40001DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool resetUVs;

	[Token(Token = "0x40001DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool isGeneratingOnUpdate;

	[Token(Token = "0x40001DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Mesh mesh;

	[Token(Token = "0x40001E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3[] vertices;

	[Token(Token = "0x40001E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int[] triangles;

	[Token(Token = "0x40001E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool debugMode;

	[Token(Token = "0x40001E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int nbSteps;

	[Token(Token = "0x60001EA")]
	[Address(RVA = "0x5FB08C", Offset = "0x5FB08C", VA = "0x5FB08C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60001EB")]
	[Address(RVA = "0x5FB288", Offset = "0x5FB288", VA = "0x5FB288")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x2F8D64", Offset = "0x2F8D64")]
	public void ReGenerate()
	{
	}

	[Token(Token = "0x60001EC")]
	[Address(RVA = "0x5FB2A4", Offset = "0x5FB2A4", VA = "0x5FB2A4")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x2F8D9C", Offset = "0x2F8D9C")]
	public void RemoveAllChildren()
	{
	}

	[Token(Token = "0x60001ED")]
	[Address(RVA = "0x5FB534", Offset = "0x5FB534", VA = "0x5FB534")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60001EE")]
	[Address(RVA = "0x5FB09C", Offset = "0x5FB09C", VA = "0x5FB09C")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x2F8DDC", Offset = "0x2F8DDC")]
	public void Generate()
	{
	}

	[Token(Token = "0x60001EF")]
	[Address(RVA = "0x5FB638", Offset = "0x5FB638", VA = "0x5FB638")]
	private void SetVertices()
	{
	}

	[Token(Token = "0x60001F0")]
	[Address(RVA = "0x5FB978", Offset = "0x5FB978", VA = "0x5FB978")]
	private void SetTriangles()
	{
	}

	[Token(Token = "0x60001F1")]
	[Address(RVA = "0x5FBCC8", Offset = "0x5FBCC8", VA = "0x5FBCC8")]
	private void SetUVs()
	{
	}

	[Token(Token = "0x60001F2")]
	[Address(RVA = "0x5FBE98", Offset = "0x5FBE98", VA = "0x5FBE98")]
	private Vector3 GetPointOnPath(int pos)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60001F3")]
	[Address(RVA = "0x5FBE1C", Offset = "0x5FBE1C", VA = "0x5FBE1C")]
	private Quaternion GetRotationOnPath(int pos)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60001F4")]
	[Address(RVA = "0x5FBF5C", Offset = "0x5FBF5C", VA = "0x5FBF5C")]
	public CustomSplineGenerator()
	{
	}
}
[Token(Token = "0x200008A")]
public class EventOnActive : EventTrigger
{
	[Token(Token = "0x60001F5")]
	[Address(RVA = "0x4DB9A8", Offset = "0x4DB9A8", VA = "0x4DB9A8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60001F6")]
	[Address(RVA = "0x4DBAC4", Offset = "0x4DBAC4", VA = "0x4DBAC4", Slot = "34")]
	public override void OnBeginDrag(PointerEventData data)
	{
	}

	[Token(Token = "0x60001F7")]
	[Address(RVA = "0x4DBAC8", Offset = "0x4DBAC8", VA = "0x4DBAC8", Slot = "37")]
	public override void OnCancel(BaseEventData data)
	{
	}

	[Token(Token = "0x60001F8")]
	[Address(RVA = "0x4DBACC", Offset = "0x4DBACC", VA = "0x4DBACC", Slot = "29")]
	public override void OnDeselect(BaseEventData data)
	{
	}

	[Token(Token = "0x60001F9")]
	[Address(RVA = "0x4DBAD0", Offset = "0x4DBAD0", VA = "0x4DBAD0", Slot = "23")]
	public override void OnDrag(PointerEventData data)
	{
	}

	[Token(Token = "0x60001FA")]
	[Address(RVA = "0x4DBAD4", Offset = "0x4DBAD4", VA = "0x4DBAD4", Slot = "24")]
	public override void OnDrop(PointerEventData data)
	{
	}

	[Token(Token = "0x60001FB")]
	[Address(RVA = "0x4DBAD8", Offset = "0x4DBAD8", VA = "0x4DBAD8", Slot = "35")]
	public override void OnEndDrag(PointerEventData data)
	{
	}

	[Token(Token = "0x60001FC")]
	[Address(RVA = "0x4DBADC", Offset = "0x4DBADC", VA = "0x4DBADC", Slot = "33")]
	public override void OnInitializePotentialDrag(PointerEventData data)
	{
	}

	[Token(Token = "0x60001FD")]
	[Address(RVA = "0x4DBAE0", Offset = "0x4DBAE0", VA = "0x4DBAE0", Slot = "31")]
	public override void OnMove(AxisEventData data)
	{
	}

	[Token(Token = "0x60001FE")]
	[Address(RVA = "0x4DBAE4", Offset = "0x4DBAE4", VA = "0x4DBAE4", Slot = "27")]
	public override void OnPointerClick(PointerEventData data)
	{
	}

	[Token(Token = "0x60001FF")]
	[Address(RVA = "0x4DBAE8", Offset = "0x4DBAE8", VA = "0x4DBAE8", Slot = "25")]
	public override void OnPointerDown(PointerEventData data)
	{
	}

	[Token(Token = "0x6000200")]
	[Address(RVA = "0x4DBAEC", Offset = "0x4DBAEC", VA = "0x4DBAEC", Slot = "21")]
	public override void OnPointerEnter(PointerEventData data)
	{
	}

	[Token(Token = "0x6000201")]
	[Address(RVA = "0x4DBAF0", Offset = "0x4DBAF0", VA = "0x4DBAF0", Slot = "22")]
	public override void OnPointerExit(PointerEventData data)
	{
	}

	[Token(Token = "0x6000202")]
	[Address(RVA = "0x4DBAF4", Offset = "0x4DBAF4", VA = "0x4DBAF4", Slot = "26")]
	public override void OnPointerUp(PointerEventData data)
	{
	}

	[Token(Token = "0x6000203")]
	[Address(RVA = "0x4DBAF8", Offset = "0x4DBAF8", VA = "0x4DBAF8", Slot = "30")]
	public override void OnScroll(PointerEventData data)
	{
	}

	[Token(Token = "0x6000204")]
	[Address(RVA = "0x4DBAFC", Offset = "0x4DBAFC", VA = "0x4DBAFC", Slot = "28")]
	public override void OnSelect(BaseEventData data)
	{
	}

	[Token(Token = "0x6000205")]
	[Address(RVA = "0x4DBB00", Offset = "0x4DBB00", VA = "0x4DBB00", Slot = "36")]
	public override void OnSubmit(BaseEventData data)
	{
	}

	[Token(Token = "0x6000206")]
	[Address(RVA = "0x4DBB04", Offset = "0x4DBB04", VA = "0x4DBB04", Slot = "32")]
	public override void OnUpdateSelected(BaseEventData data)
	{
	}

	[Token(Token = "0x6000207")]
	[Address(RVA = "0x4DBB08", Offset = "0x4DBB08", VA = "0x4DBB08")]
	public EventOnActive()
	{
	}
}
[Token(Token = "0x200008B")]
public class TimelineBinding : MonoBehaviour
{
	[Token(Token = "0x40001E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public string sceneName;

	[Token(Token = "0x40001E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string playableAssetName;

	[Token(Token = "0x40001E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public string streamName;

	[Token(Token = "0x40001E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int streamObjectID;

	[Token(Token = "0x40001E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public UnityEngine.Object value;

	[Token(Token = "0x40001E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEngine.Object streamObject;

	[Token(Token = "0x6000208")]
	[Address(RVA = "0x59C864", Offset = "0x59C864", VA = "0x59C864")]
	public TimelineBinding()
	{
	}
}
[Token(Token = "0x200008C")]
[ExecuteInEditMode]
public class TimelineController : MonoBehaviour
{
	[Token(Token = "0x20003EB")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EA8AC", Offset = "0x2EA8AC")]
	private sealed class <>c__DisplayClass10_0
	{
		[Token(Token = "0x400187C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PlayableAsset pa;

		[Token(Token = "0x400187D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public List<string> activeStreamNames;

		[Token(Token = "0x6001999")]
		[Address(RVA = "0x59DC6C", Offset = "0x59DC6C", VA = "0x59DC6C")]
		public <>c__DisplayClass10_0()
		{
		}

		[Token(Token = "0x600199A")]
		[Address(RVA = "0x59EE90", Offset = "0x59EE90", VA = "0x59EE90")]
		internal bool <SaveBindings>b__0(TimelineBinding item)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x20003EC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EA8BC", Offset = "0x2EA8BC")]
	private sealed class <>c__DisplayClass11_0
	{
		[Token(Token = "0x400187E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PlayableAsset pa;

		[Token(Token = "0x600199B")]
		[Address(RVA = "0x59E54C", Offset = "0x59E54C", VA = "0x59E54C")]
		public <>c__DisplayClass11_0()
		{
		}
	}

	[Token(Token = "0x20003ED")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EA8CC", Offset = "0x2EA8CC")]
	private sealed class <>c__DisplayClass11_1
	{
		[Token(Token = "0x400187F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PlayableBinding pb;

		[Token(Token = "0x4001880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public <>c__DisplayClass11_0 CS$<>8__locals1;

		[Token(Token = "0x600199C")]
		[Address(RVA = "0x59E554", Offset = "0x59E554", VA = "0x59E554")]
		public <>c__DisplayClass11_1()
		{
		}

		[Token(Token = "0x600199D")]
		[Address(RVA = "0x59EF78", Offset = "0x59EF78", VA = "0x59EF78")]
		internal bool <ResolveBindings>b__0(TimelineTrackBinding item)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x20003EE")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EA8DC", Offset = "0x2EA8DC")]
	private sealed class <>c__DisplayClass12_0
	{
		[Token(Token = "0x4001881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PlayableAsset pa;

		[Token(Token = "0x600199E")]
		[Address(RVA = "0x59EC58", Offset = "0x59EC58", VA = "0x59EC58")]
		public <>c__DisplayClass12_0()
		{
		}
	}

	[Token(Token = "0x20003EF")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EA8EC", Offset = "0x2EA8EC")]
	private sealed class <>c__DisplayClass12_1
	{
		[Token(Token = "0x4001882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PlayableBinding pb;

		[Token(Token = "0x4001883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public <>c__DisplayClass12_0 CS$<>8__locals1;

		[Token(Token = "0x600199F")]
		[Address(RVA = "0x59EC60", Offset = "0x59EC60", VA = "0x59EC60")]
		public <>c__DisplayClass12_1()
		{
		}

		[Token(Token = "0x60019A0")]
		[Address(RVA = "0x59F0C0", Offset = "0x59F0C0", VA = "0x59F0C0")]
		internal bool <ConvertOldBindings>b__0(TimelineBinding item)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x40001EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public PlayableDirector pd;

	[Token(Token = "0x40001EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public TimelineData data;

	[Token(Token = "0x1700000E")]
	public List<string> SceneDependencies
	{
		[Token(Token = "0x6000209")]
		[Address(RVA = "0x59C86C", Offset = "0x59C86C", VA = "0x59C86C")]
		get
		{
			return null;
		}
		[Token(Token = "0x600020A")]
		[Address(RVA = "0x59C890", Offset = "0x59C890", VA = "0x59C890")]
		set
		{
		}
	}

	[Token(Token = "0x1700000F")]
	public int Counter
	{
		[Token(Token = "0x600020B")]
		[Address(RVA = "0x59C8B8", Offset = "0x59C8B8", VA = "0x59C8B8")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600020C")]
		[Address(RVA = "0x59C8DC", Offset = "0x59C8DC", VA = "0x59C8DC")]
		set
		{
		}
	}

	[Token(Token = "0x600020D")]
	[Address(RVA = "0x59C904", Offset = "0x59C904", VA = "0x59C904")]
	[AttributeAttribute(Name = "ContextMenu", RVA = "0x2F8E28", Offset = "0x2F8E28")]
	public void ResetTrackNames()
	{
	}

	[Token(Token = "0x600020E")]
	[Address(RVA = "0x59CBC8", Offset = "0x59CBC8", VA = "0x59CBC8")]
	public void UpdateTrackNames()
	{
	}

	[Token(Token = "0x600020F")]
	[Address(RVA = "0x59D064", Offset = "0x59D064", VA = "0x59D064")]
	public void SaveBindings()
	{
	}

	[Token(Token = "0x6000210")]
	[Address(RVA = "0x59E098", Offset = "0x59E098", VA = "0x59E098")]
	public void ResolveBindings()
	{
	}

	[Token(Token = "0x6000211")]
	[Address(RVA = "0x59E75C", Offset = "0x59E75C", VA = "0x59E75C")]
	public void ConvertOldBindings()
	{
	}

	[Token(Token = "0x6000212")]
	[Address(RVA = "0x59EC68", Offset = "0x59EC68", VA = "0x59EC68")]
	public void RemoveAllBindings()
	{
	}

	[Token(Token = "0x6000213")]
	[Address(RVA = "0x59DF04", Offset = "0x59DF04", VA = "0x59DF04")]
	private List<TimelineBinding> GetAllSceneBindings()
	{
		return null;
	}

	[Token(Token = "0x6000214")]
	[Address(RVA = "0x59ED34", Offset = "0x59ED34", VA = "0x59ED34")]
	private List<TimelineBinding> GetSceneBindings(Scene scene)
	{
		return null;
	}

	[Token(Token = "0x6000215")]
	[Address(RVA = "0x59EE88", Offset = "0x59EE88", VA = "0x59EE88")]
	public TimelineController()
	{
	}
}
[Token(Token = "0x200008D")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x2E6300", Offset = "0x2E6300")]
public class TimelineData : ScriptableObject
{
	[Token(Token = "0x40001EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public List<string> sceneDependancies;

	[Token(Token = "0x40001ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int counter;

	[Token(Token = "0x40001EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public List<TimelineTrackBinding> bindings;

	[Token(Token = "0x6000216")]
	[Address(RVA = "0x59F1E0", Offset = "0x59F1E0", VA = "0x59F1E0")]
	public UnityEngine.Object FindObject(int index)
	{
		return null;
	}

	[Token(Token = "0x6000217")]
	[Address(RVA = "0x59DCEC", Offset = "0x59DCEC", VA = "0x59DCEC")]
	public void AddAsComponent(GameObject gameObject, UnityEngine.Object component, PlayableAsset pa, PlayableBinding pb)
	{
	}

	[Token(Token = "0x6000218")]
	[Address(RVA = "0x59DDE4", Offset = "0x59DDE4", VA = "0x59DDE4")]
	public void AddAsObject(GameObject gameObject, PlayableAsset pa, PlayableBinding pb)
	{
	}

	[Token(Token = "0x6000219")]
	[Address(RVA = "0x59DC74", Offset = "0x59DC74", VA = "0x59DC74")]
	public void ClearBindings()
	{
	}

	[Token(Token = "0x600021A")]
	[Address(RVA = "0x59F4E4", Offset = "0x59F4E4", VA = "0x59F4E4")]
	public TimelineData()
	{
	}
}
[Serializable]
[Token(Token = "0x200008E")]
public class TimelineTrackBinding
{
	[Token(Token = "0x40001EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public string streamName;

	[Token(Token = "0x40001F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public string objectName;

	[Token(Token = "0x40001F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string rootName;

	[Token(Token = "0x40001F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public string objectPath;

	[Token(Token = "0x40001F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string type;

	[Token(Token = "0x40001F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public string sceneName;

	[Token(Token = "0x40001F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TrackAsset streamObject;

	[Token(Token = "0x40001F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int streamObjectID;

	[Token(Token = "0x40001F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TimelineAsset playableAsset;

	[Token(Token = "0x600021B")]
	[Address(RVA = "0x59F27C", Offset = "0x59F27C", VA = "0x59F27C")]
	public TimelineTrackBinding(GameObject gameObject, Type type, PlayableAsset pa, PlayableBinding pb)
	{
	}

	[Token(Token = "0x600021C")]
	[Address(RVA = "0x59E55C", Offset = "0x59E55C", VA = "0x59E55C")]
	public UnityEngine.Object FindObject()
	{
		return null;
	}

	[Token(Token = "0x600021D")]
	[Address(RVA = "0x59F848", Offset = "0x59F848", VA = "0x59F848")]
	private GameObject FindGameObjectFromPath()
	{
		return null;
	}
}
[Token(Token = "0x200008F")]
public static class TransformExtension
{
	[Token(Token = "0x600021E")]
	[Address(RVA = "0x59F68C", Offset = "0x59F68C", VA = "0x59F68C")]
	public static string GetPath(this Transform current)
	{
		return null;
	}

	[Token(Token = "0x600021F")]
	[Address(RVA = "0x59F5A4", Offset = "0x59F5A4", VA = "0x59F5A4")]
	public static string GetRoot(this Transform current)
	{
		return null;
	}
}
[Token(Token = "0x2000090")]
public class DontOverrideLighting : MonoBehaviour
{
	[Token(Token = "0x6000220")]
	[Address(RVA = "0x4DAD0C", Offset = "0x4DAD0C", VA = "0x4DAD0C")]
	public DontOverrideLighting()
	{
	}
}
[Token(Token = "0x2000091")]
public class CopyMaterials : MonoBehaviour
{
	[Token(Token = "0x40001F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "TextAreaAttribute", RVA = "0x2ED100", Offset = "0x2ED100")]
	public string matPath;

	[Token(Token = "0x40001F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Transform ObjSrc;

	[Token(Token = "0x6000221")]
	[Address(RVA = "0x5F6B60", Offset = "0x5F6B60", VA = "0x5F6B60")]
	public CopyMaterials()
	{
	}
}
[Token(Token = "0x2000092")]
public class EventOnTrigger : MonoBehaviour
{
	[Token(Token = "0x40001FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public UnityEvent TriggerEnter;

	[Token(Token = "0x40001FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public UnityEvent TriggerExit;

	[Token(Token = "0x6000222")]
	[Address(RVA = "0x4DBB10", Offset = "0x4DBB10", VA = "0x4DBB10")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000223")]
	[Address(RVA = "0x4DBB3C", Offset = "0x4DBB3C", VA = "0x4DBB3C")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000224")]
	[Address(RVA = "0x4DBB68", Offset = "0x4DBB68", VA = "0x4DBB68")]
	public EventOnTrigger()
	{
	}
}
[Token(Token = "0x2000093")]
public class FPSLogger : MonoBehaviour
{
	[Token(Token = "0x6000225")]
	[Address(RVA = "0x4DD3F8", Offset = "0x4DD3F8", VA = "0x4DD3F8")]
	public FPSLogger()
	{
	}
}
[Token(Token = "0x2000094")]
internal class FPSLoggerEnabler : MonoBehaviour
{
	[Token(Token = "0x6000226")]
	[Address(RVA = "0x4DD400", Offset = "0x4DD400", VA = "0x4DD400")]
	public FPSLoggerEnabler()
	{
	}
}
[Token(Token = "0x2000095")]
public class UIVRButton : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20003F0")]
	public class MyEvent : UnityEvent
	{
		[Token(Token = "0x60019A1")]
		[Address(RVA = "0x5A2030", Offset = "0x5A2030", VA = "0x5A2030")]
		public MyEvent()
		{
		}
	}

	[Token(Token = "0x40001FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Image image;

	[Token(Token = "0x40001FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float timeActivate;

	[Token(Token = "0x40001FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public GameObject rayCastPointerObject;

	[Token(Token = "0x40001FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MyEvent OnActivate;

	[Token(Token = "0x4000200")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public KeyCode shortcutKey;

	[Token(Token = "0x4000201")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool isUpdate;

	[Token(Token = "0x4000202")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float updateCounter;

	[Token(Token = "0x4000203")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool hasBeenActivated;

	[Token(Token = "0x4000204")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool otherButtonHasBeenActivated;

	[Token(Token = "0x4000205")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public UIVRButton[] OtherButtons;

	[Token(Token = "0x6000227")]
	[Address(RVA = "0x5A1C74", Offset = "0x5A1C74", VA = "0x5A1C74")]
	public void OnCursorUpdate()
	{
	}

	[Token(Token = "0x6000228")]
	[Address(RVA = "0x5A1C80", Offset = "0x5A1C80", VA = "0x5A1C80")]
	public void OnCursorExit()
	{
	}

	[Token(Token = "0x6000229")]
	[Address(RVA = "0x5A1C8C", Offset = "0x5A1C8C", VA = "0x5A1C8C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600022A")]
	[Address(RVA = "0x5A1CCC", Offset = "0x5A1CCC", VA = "0x5A1CCC")]
	private void Activate()
	{
	}

	[Token(Token = "0x600022B")]
	[Address(RVA = "0x5A1E08", Offset = "0x5A1E08", VA = "0x5A1E08")]
	private void Update()
	{
	}

	[Token(Token = "0x600022C")]
	[Address(RVA = "0x5A2020", Offset = "0x5A2020", VA = "0x5A2020")]
	public UIVRButton()
	{
	}
}
[Token(Token = "0x2000096")]
public class UIVRCam : MonoBehaviour
{
	[Token(Token = "0x4000206")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private int layerMask;

	[Token(Token = "0x4000207")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float tailleRayon;

	[Token(Token = "0x4000208")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public UIVRButton lastButton;

	[Token(Token = "0x600022D")]
	[Address(RVA = "0x5A2038", Offset = "0x5A2038", VA = "0x5A2038")]
	private void Start()
	{
	}

	[Token(Token = "0x600022E")]
	[Address(RVA = "0x5A203C", Offset = "0x5A203C", VA = "0x5A203C")]
	private void Activate()
	{
	}

	[Token(Token = "0x600022F")]
	[Address(RVA = "0x5A217C", Offset = "0x5A217C", VA = "0x5A217C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000230")]
	[Address(RVA = "0x5A25EC", Offset = "0x5A25EC", VA = "0x5A25EC")]
	public UIVRCam()
	{
	}
}
[Token(Token = "0x2000097")]
public class AInitializable : MonoBehaviour
{
	[Token(Token = "0x6000231")]
	[Address(RVA = "0x612618", Offset = "0x612618", VA = "0x612618", Slot = "4")]
	public virtual void Init()
	{
	}

	[Token(Token = "0x6000232")]
	[Address(RVA = "0x61261C", Offset = "0x61261C", VA = "0x61261C")]
	public AInitializable()
	{
	}
}
[Token(Token = "0x2000098")]
public class DecreaseLight : MonoBehaviour
{
	[Token(Token = "0x4000209")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private List<Light> l_light;

	[Token(Token = "0x400020A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float f_Light_Value;

	[Token(Token = "0x6000233")]
	[Address(RVA = "0x4D828C", Offset = "0x4D828C", VA = "0x4D828C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000234")]
	[Address(RVA = "0x4D8290", Offset = "0x4D8290", VA = "0x4D8290")]
	private void GetLight()
	{
	}

	[Token(Token = "0x6000235")]
	[Address(RVA = "0x4D8664", Offset = "0x4D8664", VA = "0x4D8664")]
	public void DecreaseLighting()
	{
	}

	[Token(Token = "0x6000236")]
	[Address(RVA = "0x4D87B8", Offset = "0x4D87B8", VA = "0x4D87B8")]
	public DecreaseLight()
	{
	}
}
[Token(Token = "0x2000099")]
public class LoadMain : MonoBehaviour
{
	[Token(Token = "0x400020B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Text text;

	[Token(Token = "0x400020C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public LoadingSplash splash;

	[Token(Token = "0x400020D")]
	public const int minGPUMemory = 2500;

	[Token(Token = "0x400020E")]
	public const int minProcCount = 4;

	[Token(Token = "0x400020F")]
	public const int minProcFreq = 2500;

	[Token(Token = "0x4000210")]
	public const int minRAM = 7500;

	[Token(Token = "0x4000211")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private bool loading;

	[Token(Token = "0x6000237")]
	[Address(RVA = "0x4ECA88", Offset = "0x4ECA88", VA = "0x4ECA88")]
	private void Start()
	{
	}

	[Token(Token = "0x6000238")]
	[Address(RVA = "0x4ECB48", Offset = "0x4ECB48", VA = "0x4ECB48")]
	private void Update()
	{
	}

	[Token(Token = "0x6000239")]
	[Address(RVA = "0x4ED004", Offset = "0x4ED004", VA = "0x4ED004")]
	private void Load()
	{
	}

	[Token(Token = "0x600023A")]
	[Address(RVA = "0x4ECBF8", Offset = "0x4ECBF8", VA = "0x4ECBF8")]
	private void GetSystemInfo()
	{
	}

	[Token(Token = "0x600023B")]
	[Address(RVA = "0x4ED064", Offset = "0x4ED064", VA = "0x4ED064")]
	public LoadMain()
	{
	}
}
[Token(Token = "0x200009A")]
public class Restart : MonoBehaviour
{
	[Token(Token = "0x4000212")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public GameObject ObjToDisactive;

	[Token(Token = "0x4000213")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GameObject ObjToActive;

	[Token(Token = "0x600023C")]
	[Address(RVA = "0x687C74", Offset = "0x687C74", VA = "0x687C74")]
	private void Update()
	{
	}

	[Token(Token = "0x600023D")]
	[Address(RVA = "0x687F30", Offset = "0x687F30", VA = "0x687F30")]
	public void RestartProject()
	{
	}

	[Token(Token = "0x600023E")]
	[Address(RVA = "0x688044", Offset = "0x688044", VA = "0x688044")]
	public void ReallyRestart()
	{
	}

	[Token(Token = "0x600023F")]
	[Address(RVA = "0x6880A8", Offset = "0x6880A8", VA = "0x6880A8")]
	public Restart()
	{
	}
}
[Token(Token = "0x200009B")]
public class SceneAttribute : PropertyAttribute
{
	[Token(Token = "0x6000240")]
	[Address(RVA = "0xA8A688", Offset = "0xA8A688", VA = "0xA8A688")]
	public SceneAttribute()
	{
	}
}
[Token(Token = "0x200009C")]
public class Singleton<T> : MonoBehaviour where T : MonoBehaviour
{
	[Token(Token = "0x4000214")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static T _instance;

	[Token(Token = "0x4000215")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static object _lock;

	[Token(Token = "0x4000216")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool applicationIsQuitting;

	[Token(Token = "0x17000010")]
	public static T Instance
	{
		[Token(Token = "0x6000241")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000242")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x6000243")]
	public Singleton()
	{
	}
}
[Token(Token = "0x200009D")]
public class VRRenderScale : MonoBehaviour
{
	[Token(Token = "0x4000217")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2ED110", Offset = "0x2ED110")]
	public float renderScale;

	[Token(Token = "0x6000245")]
	[Address(RVA = "0x8F4568", Offset = "0x8F4568", VA = "0x8F4568")]
	private void Start()
	{
	}

	[Token(Token = "0x6000246")]
	[Address(RVA = "0x8F456C", Offset = "0x8F456C", VA = "0x8F456C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000247")]
	[Address(RVA = "0x8F4578", Offset = "0x8F4578", VA = "0x8F4578")]
	public VRRenderScale()
	{
	}
}
[Token(Token = "0x200009E")]
public class StencilWindow : MonoBehaviour
{
	[Token(Token = "0x4000218")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public GameObject[] siblingsToDisactivate;

	[Token(Token = "0x4000219")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GameObject boneToPush;

	[Token(Token = "0x400021A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private float xBone;

	[Token(Token = "0x6000248")]
	[Address(RVA = "0x59B14C", Offset = "0x59B14C", VA = "0x59B14C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000249")]
	[Address(RVA = "0x59B1B0", Offset = "0x59B1B0", VA = "0x59B1B0")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600024A")]
	[Address(RVA = "0x59B478", Offset = "0x59B478", VA = "0x59B478")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600024B")]
	[Address(RVA = "0x59B25C", Offset = "0x59B25C", VA = "0x59B25C")]
	private void ActiveThat()
	{
	}

	[Token(Token = "0x600024C")]
	[Address(RVA = "0x59B47C", Offset = "0x59B47C", VA = "0x59B47C")]
	private void DisactiveThat()
	{
	}

	[Token(Token = "0x600024D")]
	[Address(RVA = "0x59B68C", Offset = "0x59B68C", VA = "0x59B68C")]
	public StencilWindow()
	{
	}
}
[Serializable]
[Token(Token = "0x200009F")]
public class ActiveGreyscaleBehaviour : PlayableBehaviour
{
	[Token(Token = "0x400021B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public bool enabled;

	[Token(Token = "0x600024E")]
	[Address(RVA = "0x617AF0", Offset = "0x617AF0", VA = "0x617AF0")]
	public ActiveGreyscaleBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x20000A0")]
public class ActiveGreyscaleClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x400021C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public ActiveGreyscaleBehaviour template;

	[Token(Token = "0x17000011")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x600024F")]
		[Address(RVA = "0x617AF8", Offset = "0x617AF8", VA = "0x617AF8", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x6000250")]
	[Address(RVA = "0x617B00", Offset = "0x617B00", VA = "0x617B00", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000251")]
	[Address(RVA = "0x617BE0", Offset = "0x617BE0", VA = "0x617BE0")]
	public ActiveGreyscaleClip()
	{
	}
}
[Token(Token = "0x20000A1")]
public class ActiveGreyscaleMixerBehaviour : PlayableBehaviour
{
	[Token(Token = "0x400021D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private bool m_DefaultEnabled;

	[Token(Token = "0x400021E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Grayscale m_TrackBinding;

	[Token(Token = "0x400021F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool m_FirstFrameHappened;

	[Token(Token = "0x6000252")]
	[Address(RVA = "0x617C5C", Offset = "0x617C5C", VA = "0x617C5C", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x6000253")]
	[Address(RVA = "0x617FF8", Offset = "0x617FF8", VA = "0x617FF8", Slot = "14")]
	public override void OnGraphStop(Playable playable)
	{
	}

	[Token(Token = "0x6000254")]
	[Address(RVA = "0x6180C4", Offset = "0x6180C4", VA = "0x6180C4")]
	public ActiveGreyscaleMixerBehaviour()
	{
	}
}
[Token(Token = "0x20000A2")]
[AttributeAttribute(Name = "TrackColorAttribute", RVA = "0x2E6380", Offset = "0x2E6380")]
[AttributeAttribute(Name = "TrackClipTypeAttribute", RVA = "0x2E6380", Offset = "0x2E6380")]
[AttributeAttribute(Name = "TrackBindingTypeAttribute", RVA = "0x2E6380", Offset = "0x2E6380")]
public class ActiveGreyscaleTrack : TrackAsset
{
	[Token(Token = "0x6000255")]
	[Address(RVA = "0x6180CC", Offset = "0x6180CC", VA = "0x6180CC", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000256")]
	[Address(RVA = "0x6181A0", Offset = "0x6181A0", VA = "0x6181A0", Slot = "28")]
	public override void GatherProperties(PlayableDirector director, IPropertyCollector driver)
	{
	}

	[Token(Token = "0x6000257")]
	[Address(RVA = "0x6181A8", Offset = "0x6181A8", VA = "0x6181A8")]
	public ActiveGreyscaleTrack()
	{
	}
}
[Token(Token = "0x20000A3")]
public class AutoFocus : MonoBehaviour
{
	[Token(Token = "0x4000220")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public bool isEnabled;

	[Token(Token = "0x4000221")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Camera _mainCam;

	[Token(Token = "0x4000222")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private GameObject _target;

	[Token(Token = "0x6000258")]
	[Address(RVA = "0x619ACC", Offset = "0x619ACC", VA = "0x619ACC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000259")]
	[Address(RVA = "0x619B34", Offset = "0x619B34", VA = "0x619B34")]
	private void Update()
	{
	}

	[Token(Token = "0x600025A")]
	[Address(RVA = "0x619C64", Offset = "0x619C64", VA = "0x619C64")]
	public void SetTarget(string targetName)
	{
	}

	[Token(Token = "0x600025B")]
	[Address(RVA = "0x619D28", Offset = "0x619D28", VA = "0x619D28")]
	public AutoFocus()
	{
	}
}
[Token(Token = "0x20000A4")]
public class RotateAround : MonoBehaviour
{
	[Token(Token = "0x4000223")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Transform rot_center;

	[Token(Token = "0x600025C")]
	[Address(RVA = "0xF215E8", Offset = "0xF215E8", VA = "0xF215E8")]
	private void Start()
	{
	}

	[Token(Token = "0x600025D")]
	[Address(RVA = "0xF215EC", Offset = "0xF215EC", VA = "0xF215EC")]
	private void Update()
	{
	}

	[Token(Token = "0x600025E")]
	[Address(RVA = "0xF216E0", Offset = "0xF216E0", VA = "0xF216E0")]
	public RotateAround()
	{
	}
}
[Token(Token = "0x20000A5")]
public class Cockroach : MonoBehaviour
{
	[Token(Token = "0x20003F1")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EA8FC", Offset = "0x2EA8FC")]
	private sealed class <walk>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private int <>1__state;

		[Token(Token = "0x4001885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private object <>2__current;

		[Token(Token = "0x4001886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Cockroach <>4__this;

		[Token(Token = "0x1700036A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60019A5")]
			[Address(RVA = "0x62B5CC", Offset = "0x62B5CC", VA = "0x62B5CC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700036B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60019A7")]
			[Address(RVA = "0x62B65C", Offset = "0x62B65C", VA = "0x62B65C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019A2")]
		[Address(RVA = "0x62AC8C", Offset = "0x62AC8C", VA = "0x62AC8C")]
		[DebuggerHidden]
		public <walk>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x60019A3")]
		[Address(RVA = "0x62B434", Offset = "0x62B434", VA = "0x62B434", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60019A4")]
		[Address(RVA = "0x62B438", Offset = "0x62B438", VA = "0x62B438", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60019A6")]
		[Address(RVA = "0x62B5D4", Offset = "0x62B5D4", VA = "0x62B5D4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20003F2")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EA90C", Offset = "0x2EA90C")]
	private sealed class <idle>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private int <>1__state;

		[Token(Token = "0x4001888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private object <>2__current;

		[Token(Token = "0x4001889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Cockroach <>4__this;

		[Token(Token = "0x1700036C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60019AB")]
			[Address(RVA = "0x62B16C", Offset = "0x62B16C", VA = "0x62B16C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700036D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60019AD")]
			[Address(RVA = "0x62B1FC", Offset = "0x62B1FC", VA = "0x62B1FC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019A8")]
		[Address(RVA = "0x62AD38", Offset = "0x62AD38", VA = "0x62AD38")]
		[DebuggerHidden]
		public <idle>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x60019A9")]
		[Address(RVA = "0x62AFD4", Offset = "0x62AFD4", VA = "0x62AFD4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60019AA")]
		[Address(RVA = "0x62AFD8", Offset = "0x62AFD8", VA = "0x62AFD8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60019AC")]
		[Address(RVA = "0x62B174", Offset = "0x62B174", VA = "0x62B174", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20003F3")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EA91C", Offset = "0x2EA91C")]
	private sealed class <idle2>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400188A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private int <>1__state;

		[Token(Token = "0x400188B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private object <>2__current;

		[Token(Token = "0x400188C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Cockroach <>4__this;

		[Token(Token = "0x1700036E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60019B1")]
			[Address(RVA = "0x62AF3C", Offset = "0x62AF3C", VA = "0x62AF3C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700036F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60019B3")]
			[Address(RVA = "0x62AFCC", Offset = "0x62AFCC", VA = "0x62AFCC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019AE")]
		[Address(RVA = "0x62AD58", Offset = "0x62AD58", VA = "0x62AD58")]
		[DebuggerHidden]
		public <idle2>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x60019AF")]
		[Address(RVA = "0x62ADA0", Offset = "0x62ADA0", VA = "0x62ADA0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60019B0")]
		[Address(RVA = "0x62ADA4", Offset = "0x62ADA4", VA = "0x62ADA4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60019B2")]
		[Address(RVA = "0x62AF44", Offset = "0x62AF44", VA = "0x62AF44", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20003F4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EA92C", Offset = "0x2EA92C")]
	private sealed class <walk2>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400188D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private int <>1__state;

		[Token(Token = "0x400188E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private object <>2__current;

		[Token(Token = "0x400188F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Cockroach <>4__this;

		[Token(Token = "0x17000370")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60019B7")]
			[Address(RVA = "0x62B39C", Offset = "0x62B39C", VA = "0x62B39C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000371")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60019B9")]
			[Address(RVA = "0x62B42C", Offset = "0x62B42C", VA = "0x62B42C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019B4")]
		[Address(RVA = "0x62AD78", Offset = "0x62AD78", VA = "0x62AD78")]
		[DebuggerHidden]
		public <walk2>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x60019B5")]
		[Address(RVA = "0x62B204", Offset = "0x62B204", VA = "0x62B204", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60019B6")]
		[Address(RVA = "0x62B208", Offset = "0x62B208", VA = "0x62B208", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60019B8")]
		[Address(RVA = "0x62B3A4", Offset = "0x62B3A4", VA = "0x62B3A4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000224")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Animator cockroach;

	[Token(Token = "0x4000225")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public IEnumerator coroutine;

	[Token(Token = "0x600025F")]
	[Address(RVA = "0x62A3F4", Offset = "0x62A3F4", VA = "0x62A3F4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000260")]
	[Address(RVA = "0x62A45C", Offset = "0x62A45C", VA = "0x62A45C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000261")]
	[Address(RVA = "0x62AC00", Offset = "0x62AC00", VA = "0x62AC00")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2F8E88", Offset = "0x2F8E88")]
	private IEnumerator walk()
	{
		return null;
	}

	[Token(Token = "0x6000262")]
	[Address(RVA = "0x62ACAC", Offset = "0x62ACAC", VA = "0x62ACAC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2F8F00", Offset = "0x2F8F00")]
	private IEnumerator idle()
	{
		return null;
	}

	[Token(Token = "0x6000263")]
	[Address(RVA = "0x62AAE8", Offset = "0x62AAE8", VA = "0x62AAE8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2F8F78", Offset = "0x2F8F78")]
	private IEnumerator idle2()
	{
		return null;
	}

	[Token(Token = "0x6000264")]
	[Address(RVA = "0x62AB74", Offset = "0x62AB74", VA = "0x62AB74")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2F8FF0", Offset = "0x2F8FF0")]
	private IEnumerator walk2()
	{
		return null;
	}

	[Token(Token = "0x6000265")]
	[Address(RVA = "0x62AD98", Offset = "0x62AD98", VA = "0x62AD98")]
	public Cockroach()
	{
	}
}
[Serializable]
[Token(Token = "0x20000A6")]
public class ControlCameraFarClipBehaviour : PlayableBehaviour
{
	[Token(Token = "0x4000226")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float farClipPlane;

	[Token(Token = "0x6000266")]
	[Address(RVA = "0x5F50A8", Offset = "0x5F50A8", VA = "0x5F50A8")]
	public ControlCameraFarClipBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x20000A7")]
public class ControlCameraFarClipClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x4000227")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public ControlCameraFarClipBehaviour template;

	[Token(Token = "0x17000012")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x6000267")]
		[Address(RVA = "0x5F50B0", Offset = "0x5F50B0", VA = "0x5F50B0", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x6000268")]
	[Address(RVA = "0x5F50B8", Offset = "0x5F50B8", VA = "0x5F50B8", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000269")]
	[Address(RVA = "0x5F5198", Offset = "0x5F5198", VA = "0x5F5198")]
	public ControlCameraFarClipClip()
	{
	}
}
[Token(Token = "0x20000A8")]
public class ControlCameraFarClipMixerBehaviour : PlayableBehaviour
{
	[Token(Token = "0x4000228")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private float m_DefaultFarClipPlane;

	[Token(Token = "0x4000229")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private float m_AssignedFarClipPlane;

	[Token(Token = "0x400022A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Camera m_TrackBinding;

	[Token(Token = "0x600026A")]
	[Address(RVA = "0x5F5214", Offset = "0x5F5214", VA = "0x5F5214", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x600026B")]
	[Address(RVA = "0x5F5528", Offset = "0x5F5528", VA = "0x5F5528")]
	public ControlCameraFarClipMixerBehaviour()
	{
	}
}
[Token(Token = "0x20000A9")]
[AttributeAttribute(Name = "TrackColorAttribute", RVA = "0x2E644C", Offset = "0x2E644C")]
[AttributeAttribute(Name = "TrackClipTypeAttribute", RVA = "0x2E644C", Offset = "0x2E644C")]
[AttributeAttribute(Name = "TrackBindingTypeAttribute", RVA = "0x2E644C", Offset = "0x2E644C")]
public class ControlCameraFarClipTrack : TrackAsset
{
	[Token(Token = "0x600026C")]
	[Address(RVA = "0x5F5530", Offset = "0x5F5530", VA = "0x5F5530", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x600026D")]
	[Address(RVA = "0x5F5604", Offset = "0x5F5604", VA = "0x5F5604", Slot = "28")]
	public override void GatherProperties(PlayableDirector director, IPropertyCollector driver)
	{
	}

	[Token(Token = "0x600026E")]
	[Address(RVA = "0x5F560C", Offset = "0x5F560C", VA = "0x5F560C")]
	public ControlCameraFarClipTrack()
	{
	}
}
[Serializable]
[Token(Token = "0x20000AA")]
public class ControlColorEmissionBehaviour : PlayableBehaviour
{
	[Token(Token = "0x400022B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public Color color;

	[Token(Token = "0x600026F")]
	[Address(RVA = "0x5F5690", Offset = "0x5F5690", VA = "0x5F5690")]
	public ControlColorEmissionBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x20000AB")]
public class ControlColorEmissionClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x400022C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public ControlColorEmissionBehaviour template;

	[Token(Token = "0x17000013")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x6000270")]
		[Address(RVA = "0x5F5698", Offset = "0x5F5698", VA = "0x5F5698", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x6000271")]
	[Address(RVA = "0x5F56A0", Offset = "0x5F56A0", VA = "0x5F56A0", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000272")]
	[Address(RVA = "0x5F5780", Offset = "0x5F5780", VA = "0x5F5780")]
	public ControlColorEmissionClip()
	{
	}
}
[Token(Token = "0x20000AC")]
public class ControlColorEmissionMixerBehaviour : PlayableBehaviour
{
	[Token(Token = "0x400022D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private Color m_DefaultColor;

	[Token(Token = "0x400022E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Color m_AssignedColor;

	[Token(Token = "0x400022F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ControlSkyEmission m_TrackBinding;

	[Token(Token = "0x6000273")]
	[Address(RVA = "0x5F57FC", Offset = "0x5F57FC", VA = "0x5F57FC", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x6000274")]
	[Address(RVA = "0x5F5BE4", Offset = "0x5F5BE4", VA = "0x5F5BE4")]
	public ControlColorEmissionMixerBehaviour()
	{
	}
}
[Token(Token = "0x20000AD")]
[AttributeAttribute(Name = "TrackColorAttribute", RVA = "0x2E6518", Offset = "0x2E6518")]
[AttributeAttribute(Name = "TrackClipTypeAttribute", RVA = "0x2E6518", Offset = "0x2E6518")]
[AttributeAttribute(Name = "TrackBindingTypeAttribute", RVA = "0x2E6518", Offset = "0x2E6518")]
public class ControlColorEmissionTrack : TrackAsset
{
	[Token(Token = "0x6000275")]
	[Address(RVA = "0x5F5BEC", Offset = "0x5F5BEC", VA = "0x5F5BEC", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000276")]
	[Address(RVA = "0x5F5CC0", Offset = "0x5F5CC0", VA = "0x5F5CC0", Slot = "28")]
	public override void GatherProperties(PlayableDirector director, IPropertyCollector driver)
	{
	}

	[Token(Token = "0x6000277")]
	[Address(RVA = "0x5F5CC8", Offset = "0x5F5CC8", VA = "0x5F5CC8")]
	public ControlColorEmissionTrack()
	{
	}
}
[Serializable]
[Token(Token = "0x20000AE")]
public class ControlLerpLightMapBehaviour : PlayableBehaviour
{
	[Token(Token = "0x4000230")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public bool enabled;

	[Token(Token = "0x4000231")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float m_lerpControl;

	[Token(Token = "0x6000278")]
	[Address(RVA = "0x5F5D4C", Offset = "0x5F5D4C", VA = "0x5F5D4C")]
	public ControlLerpLightMapBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x20000AF")]
public class ControlLerpLightMapClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x4000232")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public ControlLerpLightMapBehaviour template;

	[Token(Token = "0x17000014")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x6000279")]
		[Address(RVA = "0x5F5D54", Offset = "0x5F5D54", VA = "0x5F5D54", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x600027A")]
	[Address(RVA = "0x5F5D5C", Offset = "0x5F5D5C", VA = "0x5F5D5C", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x600027B")]
	[Address(RVA = "0x5F5E3C", Offset = "0x5F5E3C", VA = "0x5F5E3C")]
	public ControlLerpLightMapClip()
	{
	}
}
[Token(Token = "0x20000B0")]
public class ControlLerpLightMapMixerBehaviour : PlayableBehaviour
{
	[Token(Token = "0x4000233")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private bool m_DefaultEnabled;

	[Token(Token = "0x4000234")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private float m_DefaultM_lerpControl;

	[Token(Token = "0x4000235")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool m_AssignedEnabled;

	[Token(Token = "0x4000236")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private float m_AssignedM_lerpControl;

	[Token(Token = "0x4000237")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ChangeLightmap m_TrackBinding;

	[Token(Token = "0x600027C")]
	[Address(RVA = "0x5F5EB8", Offset = "0x5F5EB8", VA = "0x5F5EB8", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x600027D")]
	[Address(RVA = "0x5F6320", Offset = "0x5F6320", VA = "0x5F6320")]
	public ControlLerpLightMapMixerBehaviour()
	{
	}
}
[Token(Token = "0x20000B1")]
[AttributeAttribute(Name = "TrackColorAttribute", RVA = "0x2E65E4", Offset = "0x2E65E4")]
[AttributeAttribute(Name = "TrackClipTypeAttribute", RVA = "0x2E65E4", Offset = "0x2E65E4")]
[AttributeAttribute(Name = "TrackBindingTypeAttribute", RVA = "0x2E65E4", Offset = "0x2E65E4")]
public class ControlLerpLightMapTrack : TrackAsset
{
	[Token(Token = "0x600027E")]
	[Address(RVA = "0x5F6328", Offset = "0x5F6328", VA = "0x5F6328", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x600027F")]
	[Address(RVA = "0x5F63FC", Offset = "0x5F63FC", VA = "0x5F63FC", Slot = "28")]
	public override void GatherProperties(PlayableDirector director, IPropertyCollector driver)
	{
	}

	[Token(Token = "0x6000280")]
	[Address(RVA = "0x5F6404", Offset = "0x5F6404", VA = "0x5F6404")]
	public ControlLerpLightMapTrack()
	{
	}
}
[Serializable]
[Token(Token = "0x20000B2")]
public class ControlLightmapBehaviour : PlayableBehaviour
{
	[Token(Token = "0x4000238")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float m_lerpControl;

	[Token(Token = "0x6000281")]
	[Address(RVA = "0x5F6488", Offset = "0x5F6488", VA = "0x5F6488")]
	public ControlLightmapBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x20000B3")]
public class ControlLightmapClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x4000239")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public ControlLightmapBehaviour template;

	[Token(Token = "0x17000015")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x6000282")]
		[Address(RVA = "0x5F6490", Offset = "0x5F6490", VA = "0x5F6490", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x6000283")]
	[Address(RVA = "0x5F6498", Offset = "0x5F6498", VA = "0x5F6498", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000284")]
	[Address(RVA = "0x5F6578", Offset = "0x5F6578", VA = "0x5F6578")]
	public ControlLightmapClip()
	{
	}
}
[Token(Token = "0x20000B4")]
public class ControlLightmapMixerBehaviour : PlayableBehaviour
{
	[Token(Token = "0x400023A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private float m_DefaultM_lerpControl;

	[Token(Token = "0x400023B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private float m_AssignedM_lerpControl;

	[Token(Token = "0x400023C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private ChangeLightmap m_TrackBinding;

	[Token(Token = "0x6000285")]
	[Address(RVA = "0x5F65F4", Offset = "0x5F65F4", VA = "0x5F65F4", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x6000286")]
	[Address(RVA = "0x5F6904", Offset = "0x5F6904", VA = "0x5F6904")]
	public ControlLightmapMixerBehaviour()
	{
	}
}
[Token(Token = "0x20000B5")]
[AttributeAttribute(Name = "TrackColorAttribute", RVA = "0x2E66B0", Offset = "0x2E66B0")]
[AttributeAttribute(Name = "TrackClipTypeAttribute", RVA = "0x2E66B0", Offset = "0x2E66B0")]
[AttributeAttribute(Name = "TrackBindingTypeAttribute", RVA = "0x2E66B0", Offset = "0x2E66B0")]
public class ControlLightmapTrack : TrackAsset
{
	[Token(Token = "0x6000287")]
	[Address(RVA = "0x5F690C", Offset = "0x5F690C", VA = "0x5F690C", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000288")]
	[Address(RVA = "0x5F69E0", Offset = "0x5F69E0", VA = "0x5F69E0", Slot = "28")]
	public override void GatherProperties(PlayableDirector director, IPropertyCollector driver)
	{
	}

	[Token(Token = "0x6000289")]
	[Address(RVA = "0x5F69E8", Offset = "0x5F69E8", VA = "0x5F69E8")]
	public ControlLightmapTrack()
	{
	}
}
[Token(Token = "0x20000B6")]
public static class DebugExtension
{
	[Token(Token = "0x600028A")]
	[Address(RVA = "0x608528", Offset = "0x608528", VA = "0x608528")]
	public static void DebugPoint(Vector3 position, Color color, float scale = 1f, float duration = 0f, bool depthTest = true)
	{
	}

	[Token(Token = "0x600028B")]
	[Address(RVA = "0x6088B0", Offset = "0x6088B0", VA = "0x6088B0")]
	public static void DebugPoint(Vector3 position, float scale = 1f, float duration = 0f, bool depthTest = true)
	{
	}

	[Token(Token = "0x600028C")]
	[Address(RVA = "0x608910", Offset = "0x608910", VA = "0x608910")]
	public static void DebugBounds(Bounds bounds, Color color, float duration = 0f, bool depthTest = true)
	{
	}

	[Token(Token = "0x600028D")]
	[Address(RVA = "0x609124", Offset = "0x609124", VA = "0x609124")]
	public static void DebugBounds(Bounds bounds, float duration = 0f, bool depthTest = true)
	{
	}

	[Token(Token = "0x600028E")]
	[Address(RVA = "0x6091A8", Offset = "0x6091A8", VA = "0x6091A8")]
	public static void DebugLocalCube(Transform transform, Vector3 size, Color color, [Optional] Vector3 center, float duration = 0f, bool depthTest = true)
	{
	}

	[Token(Token = "0x600028F")]
	[Address(RVA = "0x609BAC", Offset = "0x609BAC", VA = "0x609BAC")]
	public static void DebugLocalCube(Transform transform, Vector3 size, [Optional] Vector3 center, float duration = 0f, bool depthTest = true)
	{
	}

	[Token(Token = "0x6000290")]
	[Address(RVA = "0x609C2C", Offset = "0x609C2C", VA = "0x609C2C")]
	public static void DebugLocalCube(Matrix4x4 space, Vector3 size, Color color, [Optional] Vector3 center, float duration = 0f, bool depthTest = true)
	{
	}

	[Token(Token = "0x6000291")]
	[Address(RVA = "0x60A598", Offset = "0x60A598", VA = "0x60A598")]
	public static void DebugLocalCube(Matrix4x4 space, Vector3 size, [Optional] Vector3 center, float duration = 0f, bool depthTest = true)
	{
	}

	[Token(Token = "0x6000292")]
	[Address(RVA = "0x60A680", Offset = "0x60A680", VA = "0x60A680")]
	public static void DebugCircle(Vector3 position, Vector3 up, Color color, float radius = 1f, float duration = 0f, bool depthTest = true)
	{
	}

	[Token(Token = "0x6000293")]
	[Address(RVA = "0x60ABB0", Offset = "0x60ABB0", VA = "0x60ABB0")]
	public static void DebugCircle(Vector3 position, Color color, float radius = 1f, float duration = 0f, bool depthTest = true)
	{
	}

	[Token(Token = "0x6000294")]
	[Address(RVA = "0x60ACA4", Offset = "0x60ACA4", VA = "0x60ACA4")]
	public static void DebugCircle(Vector3 position, Vector3 up, float radius = 1f, float duration = 0f, bool depthTest = true)
	{
	}

	[Token(Token = "0x6000295")]
	[Address(RVA = "0x60AD30", Offset = "0x60AD30", VA = "0x60AD30")]
	public static void DebugCircle(Vector3 position, float radius = 1f, float duration = 0f, bool depthTest = true)
	{
	}

	[Token(Token = "0x6000296")]
	[Address(RVA = "0x60AE28", Offset = "0x60AE28", VA = "0x60AE28")]
	public static void DebugWireSphere(Vector3 position, Color color, float radius = 1f, float duration = 0f, bool depthTest = true)
	{
	}

	[Token(Token = "0x6000297")]
	[Address(RVA = "0x60B21C", Offset = "0x60B21C", VA = "0x60B21C")]
	public static void DebugWireSphere(Vector3 position, float radius = 1f, float duration = 0f, bool depthTest = true)
	{
	}

	[Token(Token = "0x6000298")]
	[Address(RVA = "0x60B27C", Offset = "0x60B27C", VA = "0x60B27C")]
	public static void DebugCylinder(Vector3 start, Vector3 end, Color color, float radius = 1f, float duration = 0f, bool depthTest = true)
	{
	}

	[Token(Token = "0x6000299")]
	[Address(RVA = "0x60BB4C", Offset = "0x60BB4C", VA = "0x60BB4C")]
	public static void DebugCylinder(Vector3 start, Vector3 end, float radius = 1f, float duration = 0f, bool depthTest = true)
	{
	}

	[Token(Token = "0x600029A")]
	[Address(RVA = "0x60BBD8", Offset = "0x60BBD8", VA = "0x60BBD8")]
	public static void DebugCone(Vector3 position, Vector3 direction, Color color, float angle = 45f, float duration = 0f, bool depthTest = true)
	{
	}

	[Token(Token = "0x600029B")]
	[Address(RVA = "0x60C420", Offset = "0x60C420", VA = "0x60C420")]
	public static void DebugCone(Vector3 position, Vector3 direction, float angle = 45f, float duration = 0f, bool depthTest = true)
	{
	}

	[Token(Token = "0x600029C")]
	[Address(RVA = "0x60C4AC", Offset = "0x60C4AC", VA = "0x60C4AC")]
	public static void DebugCone(Vector3 position, Color color, float angle = 45f, float duration = 0f, bool depthTest = true)
	{
	}

	[Token(Token = "0x600029D")]
	[Address(RVA = "0x60C5A0", Offset = "0x60C5A0", VA = "0x60C5A0")]
	public static void DebugCone(Vector3 position, float angle = 45f, float duration = 0f, bool depthTest = true)
	{
	}

	[Token(Token = "0x600029E")]
	[Address(RVA = "0x60C698", Offset = "0x60C698", VA = "0x60C698")]
	public static void DebugArrow(Vector3 position, Vector3 direction, Color color, float duration = 0f, bool depthTest = true)
	{
	}

	[Token(Token = "0x600029F")]
	[Address(RVA = "0x60C880", Offset = "0x60C880", VA = "0x60C880")]
	public static void DebugArrow(Vector3 position, Vector3 direction, float duration = 0f, bool depthTest = true)
	{
	}

	[Token(Token = "0x60002A0")]
	[Address(RVA = "0x60C904", Offset = "0x60C904", VA = "0x60C904")]
	public static void DebugCapsule(Vector3 start, Vector3 end, Color color, float radius = 1f, float duration = 0f, bool depthTest = true)
	{
	}

	[Token(Token = "0x60002A1")]
	[Address(RVA = "0x60DB6C", Offset = "0x60DB6C", VA = "0x60DB6C")]
	public static void DebugCapsule(Vector3 start, Vector3 end, float radius = 1f, float duration = 0f, bool depthTest = true)
	{
	}

	[Token(Token = "0x60002A2")]
	[Address(RVA = "0x60DBF8", Offset = "0x60DBF8", VA = "0x60DBF8")]
	public static void DrawPoint(Vector3 position, Color color, float scale = 1f)
	{
	}

	[Token(Token = "0x60002A3")]
	[Address(RVA = "0x60DEC0", Offset = "0x60DEC0", VA = "0x60DEC0")]
	public static void DrawPoint(Vector3 position, float scale = 1f)
	{
	}

	[Token(Token = "0x60002A4")]
	[Address(RVA = "0x60DF10", Offset = "0x60DF10", VA = "0x60DF10")]
	public static void DrawBounds(Bounds bounds, Color color)
	{
	}

	[Token(Token = "0x60002A5")]
	[Address(RVA = "0x60E560", Offset = "0x60E560", VA = "0x60E560")]
	public static void DrawBounds(Bounds bounds)
	{
	}

	[Token(Token = "0x60002A6")]
	[Address(RVA = "0x60E5C8", Offset = "0x60E5C8", VA = "0x60E5C8")]
	public static void DrawLocalCube(Transform transform, Vector3 size, Color color, [Optional] Vector3 center)
	{
	}

	[Token(Token = "0x60002A7")]
	[Address(RVA = "0x60EDF8", Offset = "0x60EDF8", VA = "0x60EDF8")]
	public static void DrawLocalCube(Transform transform, Vector3 size, [Optional] Vector3 center)
	{
	}

	[Token(Token = "0x60002A8")]
	[Address(RVA = "0x60EE6C", Offset = "0x60EE6C", VA = "0x60EE6C")]
	public static void DrawLocalCube(Matrix4x4 space, Vector3 size, Color color, [Optional] Vector3 center)
	{
	}

	[Token(Token = "0x60002A9")]
	[Address(RVA = "0x60F650", Offset = "0x60F650", VA = "0x60F650")]
	public static void DrawLocalCube(Matrix4x4 space, Vector3 size, [Optional] Vector3 center)
	{
	}

	[Token(Token = "0x60002AA")]
	[Address(RVA = "0x60F730", Offset = "0x60F730", VA = "0x60F730")]
	public static void DrawCircle(Vector3 position, Vector3 up, Color color, float radius = 1f)
	{
	}

	[Token(Token = "0x60002AB")]
	[Address(RVA = "0x60FCFC", Offset = "0x60FCFC", VA = "0x60FCFC")]
	public static void DrawCircle(Vector3 position, Color color, float radius = 1f)
	{
	}

	[Token(Token = "0x60002AC")]
	[Address(RVA = "0x60FDE0", Offset = "0x60FDE0", VA = "0x60FDE0")]
	public static void DrawCircle(Vector3 position, Vector3 up, float radius = 1f)
	{
	}

	[Token(Token = "0x60002AD")]
	[Address(RVA = "0x60FE40", Offset = "0x60FE40", VA = "0x60FE40")]
	public static void DrawCircle(Vector3 position, float radius = 1f)
	{
	}

	[Token(Token = "0x60002AE")]
	[Address(RVA = "0x60FF20", Offset = "0x60FF20", VA = "0x60FF20")]
	public static void DrawCylinder(Vector3 start, Vector3 end, Color color, float radius = 1f)
	{
	}

	[Token(Token = "0x60002AF")]
	[Address(RVA = "0x61068C", Offset = "0x61068C", VA = "0x61068C")]
	public static void DrawCylinder(Vector3 start, Vector3 end, float radius = 1f)
	{
	}

	[Token(Token = "0x60002B0")]
	[Address(RVA = "0x610708", Offset = "0x610708", VA = "0x610708")]
	public static void DrawCone(Vector3 position, Vector3 direction, Color color, float angle = 45f)
	{
	}

	[Token(Token = "0x60002B1")]
	[Address(RVA = "0x610EA4", Offset = "0x610EA4", VA = "0x610EA4")]
	public static void DrawCone(Vector3 position, Vector3 direction, float angle = 45f)
	{
	}

	[Token(Token = "0x60002B2")]
	[Address(RVA = "0x610F20", Offset = "0x610F20", VA = "0x610F20")]
	public static void DrawCone(Vector3 position, Color color, float angle = 45f)
	{
	}

	[Token(Token = "0x60002B3")]
	[Address(RVA = "0x611004", Offset = "0x611004", VA = "0x611004")]
	public static void DrawCone(Vector3 position, float angle = 45f)
	{
	}

	[Token(Token = "0x60002B4")]
	[Address(RVA = "0x6110E4", Offset = "0x6110E4", VA = "0x6110E4")]
	public static void DrawArrow(Vector3 position, Vector3 direction, Color color)
	{
	}

	[Token(Token = "0x60002B5")]
	[Address(RVA = "0x611264", Offset = "0x611264", VA = "0x611264")]
	public static void DrawArrow(Vector3 position, Vector3 direction)
	{
	}

	[Token(Token = "0x60002B6")]
	[Address(RVA = "0x6112CC", Offset = "0x6112CC", VA = "0x6112CC")]
	public static void DrawCapsule(Vector3 start, Vector3 end, Color color, float radius = 1f)
	{
	}

	[Token(Token = "0x60002B7")]
	[Address(RVA = "0x6122D8", Offset = "0x6122D8", VA = "0x6122D8")]
	public static void DrawCapsule(Vector3 start, Vector3 end, float radius = 1f)
	{
	}

	[Token(Token = "0x60002B8")]
	[Address(RVA = "0x612354", Offset = "0x612354", VA = "0x612354")]
	public static string MethodsOfObject(object obj, bool includeInfo = false)
	{
		return null;
	}

	[Token(Token = "0x60002B9")]
	[Address(RVA = "0x6124C4", Offset = "0x6124C4", VA = "0x6124C4")]
	public static string MethodsOfType(Type type, bool includeInfo = false)
	{
		return null;
	}
}
[Token(Token = "0x20000B7")]
public class Example : MonoBehaviour
{
	[Token(Token = "0x400023D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public bool debugPoint;

	[Token(Token = "0x400023E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Vector3 debugPoint_Position;

	[Token(Token = "0x400023F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float debugPoint_Scale;

	[Token(Token = "0x4000240")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Color debugPoint_Color;

	[Token(Token = "0x4000241")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool debugBounds;

	[Token(Token = "0x4000242")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Vector3 debugBounds_Position;

	[Token(Token = "0x4000243")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector3 debugBounds_Size;

	[Token(Token = "0x4000244")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public Color debugBounds_Color;

	[Token(Token = "0x4000245")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public bool debugCircle;

	[Token(Token = "0x4000246")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Vector3 debugCircle_Up;

	[Token(Token = "0x4000247")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float debugCircle_Radius;

	[Token(Token = "0x4000248")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Color debugCircle_Color;

	[Token(Token = "0x4000249")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public bool debugWireSphere;

	[Token(Token = "0x400024A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public float debugWireSphere_Radius;

	[Token(Token = "0x400024B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Color debugWireSphere_Color;

	[Token(Token = "0x400024C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public bool debugCylinder;

	[Token(Token = "0x400024D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public Vector3 debugCylinder_End;

	[Token(Token = "0x400024E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public float debugCylinder_Radius;

	[Token(Token = "0x400024F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public Color debugCylinder_Color;

	[Token(Token = "0x4000250")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	public bool debugCone;

	[Token(Token = "0x4000251")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Vector3 debugCone_Direction;

	[Token(Token = "0x4000252")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	public float debugCone_Angle;

	[Token(Token = "0x4000253")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public Color debugCone_Color;

	[Token(Token = "0x4000254")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public bool debugArrow;

	[Token(Token = "0x4000255")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public Vector3 debugArrow_Direction;

	[Token(Token = "0x4000256")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public Color debugArrow_Color;

	[Token(Token = "0x4000257")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public bool debugCapsule;

	[Token(Token = "0x4000258")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	public Vector3 debugCapsule_End;

	[Token(Token = "0x4000259")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public float debugCapsule_Radius;

	[Token(Token = "0x400025A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	public Color debugCapsule_Color;

	[Token(Token = "0x60002BA")]
	[Address(RVA = "0x4DBB70", Offset = "0x4DBB70", VA = "0x4DBB70")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60002BB")]
	[Address(RVA = "0x4DBF18", Offset = "0x4DBF18", VA = "0x4DBF18")]
	private void Update()
	{
	}

	[Token(Token = "0x60002BC")]
	[Address(RVA = "0x4DC298", Offset = "0x4DC298", VA = "0x4DC298")]
	public Example()
	{
	}
}
[Token(Token = "0x20000B8")]
public class DisableTracking : MonoBehaviour
{
	[Token(Token = "0x400025B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Camera cam;

	[Token(Token = "0x400025C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Vector3 startPos;

	[Token(Token = "0x400025D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool DisableTraking;

	[Token(Token = "0x60002BD")]
	[Address(RVA = "0x4DA934", Offset = "0x4DA934", VA = "0x4DA934")]
	private void Start()
	{
	}

	[Token(Token = "0x60002BE")]
	[Address(RVA = "0x4DA9E0", Offset = "0x4DA9E0", VA = "0x4DA9E0")]
	private void Update()
	{
	}

	[Token(Token = "0x60002BF")]
	[Address(RVA = "0x4DABE0", Offset = "0x4DABE0", VA = "0x4DABE0")]
	public DisableTracking()
	{
	}
}
[Token(Token = "0x20000B9")]
public class FastLaunch : MonoBehaviour
{
	[Token(Token = "0x60002C0")]
	[Address(RVA = "0x4DD410", Offset = "0x4DD410", VA = "0x4DD410")]
	private void Start()
	{
	}

	[Token(Token = "0x60002C1")]
	[Address(RVA = "0x4DD414", Offset = "0x4DD414", VA = "0x4DD414")]
	private void Update()
	{
	}

	[Token(Token = "0x60002C2")]
	[Address(RVA = "0x4DD418", Offset = "0x4DD418", VA = "0x4DD418")]
	public void LaunchEp1()
	{
	}

	[Token(Token = "0x60002C3")]
	[Address(RVA = "0x4DD498", Offset = "0x4DD498", VA = "0x4DD498")]
	public void LaunchEp2()
	{
	}

	[Token(Token = "0x60002C4")]
	[Address(RVA = "0x4DD518", Offset = "0x4DD518", VA = "0x4DD518")]
	public void LaunchEp3()
	{
	}

	[Token(Token = "0x60002C5")]
	[Address(RVA = "0x4DD598", Offset = "0x4DD598", VA = "0x4DD598")]
	public FastLaunch()
	{
	}
}
[Token(Token = "0x20000BA")]
public class CameraLookAt : MonoBehaviour
{
	[Token(Token = "0x400025E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Transform target;

	[Token(Token = "0x60002C6")]
	[Address(RVA = "0x62332C", Offset = "0x62332C", VA = "0x62332C")]
	private void Start()
	{
	}

	[Token(Token = "0x60002C7")]
	[Address(RVA = "0x623330", Offset = "0x623330", VA = "0x623330")]
	private void Update()
	{
	}

	[Token(Token = "0x60002C8")]
	[Address(RVA = "0x623370", Offset = "0x623370", VA = "0x623370")]
	public CameraLookAt()
	{
	}
}
[Token(Token = "0x20000BB")]
public class Fly : MonoBehaviour
{
	[Token(Token = "0x20003F5")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EA93C", Offset = "0x2EA93C")]
	private sealed class <flying>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private int <>1__state;

		[Token(Token = "0x4001891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private object <>2__current;

		[Token(Token = "0x4001892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Fly <>4__this;

		[Token(Token = "0x17000372")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60019BD")]
			[Address(RVA = "0x4DF378", Offset = "0x4DF378", VA = "0x4DF378", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000373")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60019BF")]
			[Address(RVA = "0x4DF408", Offset = "0x4DF408", VA = "0x4DF408", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019BA")]
		[Address(RVA = "0x4DF1FC", Offset = "0x4DF1FC", VA = "0x4DF1FC")]
		[DebuggerHidden]
		public <flying>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x60019BB")]
		[Address(RVA = "0x4DF244", Offset = "0x4DF244", VA = "0x4DF244", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60019BC")]
		[Address(RVA = "0x4DF248", Offset = "0x4DF248", VA = "0x4DF248", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60019BE")]
		[Address(RVA = "0x4DF380", Offset = "0x4DF380", VA = "0x4DF380", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20003F6")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EA94C", Offset = "0x2EA94C")]
	private sealed class <idle>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private int <>1__state;

		[Token(Token = "0x4001894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private object <>2__current;

		[Token(Token = "0x4001895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Fly <>4__this;

		[Token(Token = "0x17000374")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60019C3")]
			[Address(RVA = "0x4DF578", Offset = "0x4DF578", VA = "0x4DF578", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000375")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60019C5")]
			[Address(RVA = "0x4DF608", Offset = "0x4DF608", VA = "0x4DF608", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019C0")]
		[Address(RVA = "0x4DF21C", Offset = "0x4DF21C", VA = "0x4DF21C")]
		[DebuggerHidden]
		public <idle>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x60019C1")]
		[Address(RVA = "0x4DF410", Offset = "0x4DF410", VA = "0x4DF410", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60019C2")]
		[Address(RVA = "0x4DF414", Offset = "0x4DF414", VA = "0x4DF414", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60019C4")]
		[Address(RVA = "0x4DF580", Offset = "0x4DF580", VA = "0x4DF580", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400025F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Animator fly;

	[Token(Token = "0x4000260")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IEnumerator coroutine;

	[Token(Token = "0x60002C9")]
	[Address(RVA = "0x4DE830", Offset = "0x4DE830", VA = "0x4DE830")]
	private void Start()
	{
	}

	[Token(Token = "0x60002CA")]
	[Address(RVA = "0x4DE898", Offset = "0x4DE898", VA = "0x4DE898")]
	private void Update()
	{
	}

	[Token(Token = "0x60002CB")]
	[Address(RVA = "0x4DF0E4", Offset = "0x4DF0E4", VA = "0x4DF0E4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2F9068", Offset = "0x2F9068")]
	private IEnumerator flying()
	{
		return null;
	}

	[Token(Token = "0x60002CC")]
	[Address(RVA = "0x4DF170", Offset = "0x4DF170", VA = "0x4DF170")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2F90E0", Offset = "0x2F90E0")]
	private IEnumerator idle()
	{
		return null;
	}

	[Token(Token = "0x60002CD")]
	[Address(RVA = "0x4DF23C", Offset = "0x4DF23C", VA = "0x4DF23C")]
	public Fly()
	{
	}
}
[Token(Token = "0x20000BC")]
public class Demo : MonoBehaviour
{
	[Token(Token = "0x4000261")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public GameObject asset;

	[Token(Token = "0x4000262")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Animator animator;

	[Token(Token = "0x4000263")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Slider rotate;

	[Token(Token = "0x4000264")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Slider zoom;

	[Token(Token = "0x4000265")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Camera cam;

	[Token(Token = "0x60002CE")]
	[Address(RVA = "0x4D8844", Offset = "0x4D8844", VA = "0x4D8844")]
	private void Start()
	{
	}

	[Token(Token = "0x60002CF")]
	[Address(RVA = "0x4D88C0", Offset = "0x4D88C0", VA = "0x4D88C0")]
	private void Update()
	{
	}

	[Token(Token = "0x60002D0")]
	[Address(RVA = "0x4D89D4", Offset = "0x4D89D4", VA = "0x4D89D4")]
	public void Halt()
	{
	}

	[Token(Token = "0x60002D1")]
	[Address(RVA = "0x4D8A88", Offset = "0x4D8A88", VA = "0x4D8A88")]
	public void Walk(string walkNumber)
	{
	}

	[Token(Token = "0x60002D2")]
	[Address(RVA = "0x4D8B28", Offset = "0x4D8B28", VA = "0x4D8B28")]
	public void PlayAnim(string animNumber)
	{
	}

	[Token(Token = "0x60002D3")]
	[Address(RVA = "0x4D8BC4", Offset = "0x4D8BC4", VA = "0x4D8BC4")]
	public Demo()
	{
	}
}
[Token(Token = "0x20000BD")]
public class LightFlickerEffect : MonoBehaviour
{
	[Token(Token = "0x4000266")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2ED128", Offset = "0x2ED128")]
	public Light light;

	[Token(Token = "0x4000267")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2ED15C", Offset = "0x2ED15C")]
	public float minIntensity;

	[Token(Token = "0x4000268")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2ED1A8", Offset = "0x2ED1A8")]
	public float maxIntensity;

	[Token(Token = "0x4000269")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2ED1F4", Offset = "0x2ED1F4")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2ED1F4", Offset = "0x2ED1F4")]
	public int smoothing;

	[Token(Token = "0x400026A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Queue<float> smoothQueue;

	[Token(Token = "0x400026B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float lastSum;

	[Token(Token = "0x60002D4")]
	[Address(RVA = "0x4EB63C", Offset = "0x4EB63C", VA = "0x4EB63C")]
	public void Reset()
	{
	}

	[Token(Token = "0x60002D5")]
	[Address(RVA = "0x4EB6BC", Offset = "0x4EB6BC", VA = "0x4EB6BC")]
	private void Start()
	{
	}

	[Token(Token = "0x60002D6")]
	[Address(RVA = "0x4EB7A8", Offset = "0x4EB7A8", VA = "0x4EB7A8")]
	private void Update()
	{
	}

	[Token(Token = "0x60002D7")]
	[Address(RVA = "0x4EB948", Offset = "0x4EB948", VA = "0x4EB948")]
	public LightFlickerEffect()
	{
	}
}
[Token(Token = "0x20000BE")]
public class GlobalLocales : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20003F7")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EA95C", Offset = "0x2EA95C")]
	private sealed class <>c
	{
		[Token(Token = "0x4001896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x4001897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static Predicate<Locale> <>9__2_0;

		[Token(Token = "0x4001898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Func<bool> <>9__4_0;

		[Token(Token = "0x60019C7")]
		[Address(RVA = "0x4E05D0", Offset = "0x4E05D0", VA = "0x4E05D0")]
		public <>c()
		{
		}

		[Token(Token = "0x60019C8")]
		[Address(RVA = "0x4E05D8", Offset = "0x4E05D8", VA = "0x4E05D8")]
		internal bool <Start>b__2_0(Locale l)
		{
			return default(bool);
		}

		[Token(Token = "0x60019C9")]
		[Address(RVA = "0x4E066C", Offset = "0x4E066C", VA = "0x4E066C")]
		internal bool <SelectLocaleAsync>b__4_0()
		{
			return default(bool);
		}
	}

	[Token(Token = "0x20003F8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EA96C", Offset = "0x2EA96C")]
	private sealed class <SelectLocaleAsync>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private int <>1__state;

		[Token(Token = "0x400189A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private object <>2__current;

		[Token(Token = "0x400189B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Locale locale;

		[Token(Token = "0x400189C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public GlobalLocales <>4__this;

		[Token(Token = "0x17000376")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60019CD")]
			[Address(RVA = "0x4E0964", Offset = "0x4E0964", VA = "0x4E0964", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000377")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60019CF")]
			[Address(RVA = "0x4E09F4", Offset = "0x4E09F4", VA = "0x4E09F4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019CA")]
		[Address(RVA = "0x4E0534", Offset = "0x4E0534", VA = "0x4E0534")]
		[DebuggerHidden]
		public <SelectLocaleAsync>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x60019CB")]
		[Address(RVA = "0x4E06FC", Offset = "0x4E06FC", VA = "0x4E06FC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60019CC")]
		[Address(RVA = "0x4E0700", Offset = "0x4E0700", VA = "0x4E0700", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60019CE")]
		[Address(RVA = "0x4E096C", Offset = "0x4E096C", VA = "0x4E096C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400026C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public List<Locale> Locales;

	[Token(Token = "0x400026D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GameObject enableAfter;

	[Token(Token = "0x60002D8")]
	[Address(RVA = "0x4E02F4", Offset = "0x4E02F4", VA = "0x4E02F4")]
	public void Start()
	{
	}

	[Token(Token = "0x60002D9")]
	[Address(RVA = "0x4E0468", Offset = "0x4E0468", VA = "0x4E0468")]
	public void SelectLocale([Optional] Locale locale)
	{
	}

	[Token(Token = "0x60002DA")]
	[Address(RVA = "0x4E048C", Offset = "0x4E048C", VA = "0x4E048C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2F9158", Offset = "0x2F9158")]
	public IEnumerator SelectLocaleAsync(Locale locale)
	{
		return null;
	}

	[Token(Token = "0x60002DB")]
	[Address(RVA = "0x4E0554", Offset = "0x4E0554", VA = "0x4E0554")]
	public GlobalLocales()
	{
	}
}
[Token(Token = "0x20000BF")]
public class LocalizedPanel : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20003F9")]
	public struct LocaleSprite
	{
		[Token(Token = "0x400189D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Locale locale;

		[Token(Token = "0x400189E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Sprite sprite;

		[Token(Token = "0x400189F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float scaleFactor;
	}

	[Serializable]
	[Token(Token = "0x20003FA")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EA97C", Offset = "0x2EA97C")]
	private sealed class <>c
	{
		[Token(Token = "0x40018A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x40018A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static Func<bool> <>9__12_0;

		[Token(Token = "0x60019D1")]
		[Address(RVA = "0x4EE01C", Offset = "0x4EE01C", VA = "0x4EE01C")]
		public <>c()
		{
		}

		[Token(Token = "0x60019D2")]
		[Address(RVA = "0x4EE024", Offset = "0x4EE024", VA = "0x4EE024")]
		internal bool <SelectSpriteAsync>b__12_0()
		{
			return default(bool);
		}
	}

	[Token(Token = "0x20003FB")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EA98C", Offset = "0x2EA98C")]
	private sealed class <SelectSpriteAsync>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40018A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private int <>1__state;

		[Token(Token = "0x40018A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private object <>2__current;

		[Token(Token = "0x40018A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LocalizedPanel <>4__this;

		[Token(Token = "0x17000378")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60019D6")]
			[Address(RVA = "0x4EE2EC", Offset = "0x4EE2EC", VA = "0x4EE2EC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000379")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60019D8")]
			[Address(RVA = "0x4EE37C", Offset = "0x4EE37C", VA = "0x4EE37C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019D3")]
		[Address(RVA = "0x4EDEF4", Offset = "0x4EDEF4", VA = "0x4EDEF4")]
		[DebuggerHidden]
		public <SelectSpriteAsync>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x60019D4")]
		[Address(RVA = "0x4EE144", Offset = "0x4EE144", VA = "0x4EE144", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60019D5")]
		[Address(RVA = "0x4EE148", Offset = "0x4EE148", VA = "0x4EE148", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60019D7")]
		[Address(RVA = "0x4EE2F4", Offset = "0x4EE2F4", VA = "0x4EE2F4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20003FC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EA99C", Offset = "0x2EA99C")]
	private sealed class <>c__DisplayClass13_0
	{
		[Token(Token = "0x40018A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Locale locale;

		[Token(Token = "0x60019D9")]
		[Address(RVA = "0x4EDF14", Offset = "0x4EDF14", VA = "0x4EDF14")]
		public <>c__DisplayClass13_0()
		{
		}

		[Token(Token = "0x60019DA")]
		[Address(RVA = "0x4EE0B4", Offset = "0x4EE0B4", VA = "0x4EE0B4")]
		internal bool <SelectSprite>b__0(LocaleSprite ls)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x400026E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public List<Locale> Locales;

	[Token(Token = "0x400026F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public SpriteRenderer spriteRenderer;

	[Token(Token = "0x4000270")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Image uiImage;

	[Token(Token = "0x4000271")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<LocaleSprite> sprites;

	[Token(Token = "0x4000272")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private bool spriteselected;

	[Token(Token = "0x17000016")]
	private Sprite sprite
	{
		[Token(Token = "0x60002DC")]
		[Address(RVA = "0x4ED8AC", Offset = "0x4ED8AC", VA = "0x4ED8AC")]
		get
		{
			return null;
		}
		[Token(Token = "0x60002DD")]
		[Address(RVA = "0x4ED9C4", Offset = "0x4ED9C4", VA = "0x4ED9C4")]
		set
		{
		}
	}

	[Token(Token = "0x60002DE")]
	[Address(RVA = "0x4EDAE4", Offset = "0x4EDAE4", VA = "0x4EDAE4")]
	public void Awake()
	{
	}

	[Token(Token = "0x60002DF")]
	[Address(RVA = "0x4EDE10", Offset = "0x4EDE10", VA = "0x4EDE10")]
	public void Start()
	{
	}

	[Token(Token = "0x60002E0")]
	[Address(RVA = "0x4EDED0", Offset = "0x4EDED0", VA = "0x4EDED0")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x60002E1")]
	[Address(RVA = "0x4EDE44", Offset = "0x4EDE44", VA = "0x4EDE44")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2F91D0", Offset = "0x2F91D0")]
	private IEnumerator SelectSpriteAsync()
	{
		return null;
	}

	[Token(Token = "0x60002E2")]
	[Address(RVA = "0x4EDAF0", Offset = "0x4EDAF0", VA = "0x4EDAF0")]
	private void SelectSprite()
	{
	}

	[Token(Token = "0x60002E3")]
	[Address(RVA = "0x4EDF1C", Offset = "0x4EDF1C", VA = "0x4EDF1C")]
	public LocalizedPanel()
	{
	}
}
[Token(Token = "0x20000C0")]
public class LocalizedVoice : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20003FD")]
	public class LocalizedAudioClip
	{
		[Token(Token = "0x40018A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public List<Locale> locales;

		[Token(Token = "0x40018A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public List<AudioClip> clips;

		[Token(Token = "0x60019DB")]
		[Address(RVA = "0x4EF0DC", Offset = "0x4EF0DC", VA = "0x4EF0DC")]
		public LocalizedAudioClip()
		{
		}
	}

	[Token(Token = "0x20003FE")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EA9AC", Offset = "0x2EA9AC")]
	private sealed class <>c__DisplayClass3_0
	{
		[Token(Token = "0x40018A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public TimelineClip tlc;

		[Token(Token = "0x60019DC")]
		[Address(RVA = "0x4EEC68", Offset = "0x4EEC68", VA = "0x4EEC68")]
		public <>c__DisplayClass3_0()
		{
		}

		[Token(Token = "0x60019DD")]
		[Address(RVA = "0x4EEFB8", Offset = "0x4EEFB8", VA = "0x4EEFB8")]
		internal bool <Awake>b__0(LocalizedAudioClip lc)
		{
			return default(bool);
		}
	}

	[Serializable]
	[Token(Token = "0x20003FF")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EA9BC", Offset = "0x2EA9BC")]
	private sealed class <>c
	{
		[Token(Token = "0x40018A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x40018AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static Func<TrackAsset, bool> <>9__8_0;

		[Token(Token = "0x40018AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Func<TrackAsset, IEnumerable<TimelineClip>> <>9__8_1;

		[Token(Token = "0x60019DF")]
		[Address(RVA = "0x4EEE20", Offset = "0x4EEE20", VA = "0x4EEE20")]
		public <>c()
		{
		}

		[Token(Token = "0x60019E0")]
		[Address(RVA = "0x4EEE28", Offset = "0x4EEE28", VA = "0x4EEE28")]
		internal bool <get_TLClips>b__8_0(TrackAsset t)
		{
			return default(bool);
		}

		[Token(Token = "0x60019E1")]
		[Address(RVA = "0x4EEEBC", Offset = "0x4EEEBC", VA = "0x4EEEBC")]
		internal IEnumerable<TimelineClip> <get_TLClips>b__8_1(TrackAsset a)
		{
			return null;
		}
	}

	[Token(Token = "0x4000273")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public List<Locale> Locales;

	[Token(Token = "0x4000274")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<LocalizedAudioClip> LocalizedClips;

	[Token(Token = "0x4000275")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private PlayableDirector _timeline;

	[Token(Token = "0x17000017")]
	public PlayableDirector Timeline
	{
		[Token(Token = "0x60002E5")]
		[Address(RVA = "0x4EEC70", Offset = "0x4EEC70", VA = "0x4EEC70")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000018")]
	private IEnumerable<TimelineClip> TLClips
	{
		[Token(Token = "0x60002E6")]
		[Address(RVA = "0x4EE954", Offset = "0x4EE954", VA = "0x4EE954")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60002E4")]
	[Address(RVA = "0x4EE384", Offset = "0x4EE384", VA = "0x4EE384")]
	public void Awake()
	{
	}

	[Token(Token = "0x60002E7")]
	[Address(RVA = "0x4EED20", Offset = "0x4EED20", VA = "0x4EED20")]
	public LocalizedVoice()
	{
	}
}
[Token(Token = "0x20000C1")]
public class MusicLauncher : MonoBehaviour
{
	[Token(Token = "0x2000400")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EA9CC", Offset = "0x2EA9CC")]
	private sealed class <>c__DisplayClass4_0
	{
		[Token(Token = "0x40018AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AudioClip music;

		[Token(Token = "0x60019E2")]
		[Address(RVA = "0x4F31A0", Offset = "0x4F31A0", VA = "0x4F31A0")]
		public <>c__DisplayClass4_0()
		{
		}

		[Token(Token = "0x60019E3")]
		[Address(RVA = "0x4F33E4", Offset = "0x4F33E4", VA = "0x4F33E4")]
		internal bool <StopMusic>b__0(AudioSource aus)
		{
			return default(bool);
		}
	}

	[Serializable]
	[Token(Token = "0x2000401")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EA9DC", Offset = "0x2EA9DC")]
	private sealed class <>c
	{
		[Token(Token = "0x40018AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x40018AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static Action<AudioSource> <>9__4_1;

		[Token(Token = "0x60019E5")]
		[Address(RVA = "0x4F33B0", Offset = "0x4F33B0", VA = "0x4F33B0")]
		public <>c()
		{
		}

		[Token(Token = "0x60019E6")]
		[Address(RVA = "0x4F33B8", Offset = "0x4F33B8", VA = "0x4F33B8")]
		internal void <StopMusic>b__4_1(AudioSource aus)
		{
		}
	}

	[Token(Token = "0x60002E8")]
	[Address(RVA = "0x4F292C", Offset = "0x4F292C", VA = "0x4F292C")]
	public void launchMusicLeft(AudioClip leftMusic)
	{
	}

	[Token(Token = "0x60002E9")]
	[Address(RVA = "0x4F2AB8", Offset = "0x4F2AB8", VA = "0x4F2AB8")]
	public void launchMusicRight(AudioClip rightMusic)
	{
	}

	[Token(Token = "0x60002EA")]
	[Address(RVA = "0x4F2C44", Offset = "0x4F2C44", VA = "0x4F2C44")]
	public void launchMusic02(AudioClip music)
	{
	}

	[Token(Token = "0x60002EB")]
	[Address(RVA = "0x4F2DD0", Offset = "0x4F2DD0", VA = "0x4F2DD0")]
	public void launchMusic01(AudioClip music)
	{
	}

	[Token(Token = "0x60002EC")]
	[Address(RVA = "0x4F2F5C", Offset = "0x4F2F5C", VA = "0x4F2F5C")]
	public void StopMusic(AudioClip music)
	{
	}

	[Token(Token = "0x60002ED")]
	[Address(RVA = "0x4F31A8", Offset = "0x4F31A8", VA = "0x4F31A8")]
	public void launchMusicLoop(AudioClip music)
	{
	}

	[Token(Token = "0x60002EE")]
	[Address(RVA = "0x4F3334", Offset = "0x4F3334", VA = "0x4F3334")]
	public MusicLauncher()
	{
	}
}
[Token(Token = "0x20000C2")]
public class NextTimeLineLauncher : MonoBehaviour
{
	[Token(Token = "0x60002EF")]
	[Address(RVA = "0x4F3AD8", Offset = "0x4F3AD8", VA = "0x4F3AD8")]
	public void launchNextTimeLine(string name)
	{
	}

	[Token(Token = "0x60002F0")]
	[Address(RVA = "0x4F3C8C", Offset = "0x4F3C8C", VA = "0x4F3C8C")]
	public void loadNextChapterStep(int nbExecuteNextChapter)
	{
	}

	[Token(Token = "0x60002F1")]
	[Address(RVA = "0x4F3E1C", Offset = "0x4F3E1C", VA = "0x4F3E1C")]
	public void loadNextChapterStepEP3(int nbExecuteNextChapter)
	{
	}

	[Token(Token = "0x60002F2")]
	[Address(RVA = "0x4F3FAC", Offset = "0x4F3FAC", VA = "0x4F3FAC")]
	public void loadNextChapterStepEP1(int nbExecuteNextChapter)
	{
	}

	[Token(Token = "0x60002F3")]
	[Address(RVA = "0x4F413C", Offset = "0x4F413C", VA = "0x4F413C")]
	public void ActiveScene(string name)
	{
	}

	[Token(Token = "0x60002F4")]
	[Address(RVA = "0x4F4210", Offset = "0x4F4210", VA = "0x4F4210")]
	public void LoadLightmap(string name)
	{
	}

	[Token(Token = "0x60002F5")]
	[Address(RVA = "0x4F4290", Offset = "0x4F4290", VA = "0x4F4290")]
	public void LaunchDuplicateTimelineAtStep(string toPdName)
	{
	}

	[Token(Token = "0x60002F6")]
	[Address(RVA = "0x4F4550", Offset = "0x4F4550", VA = "0x4F4550")]
	public NextTimeLineLauncher()
	{
	}
}
[Token(Token = "0x20000C3")]
public class InfoBubble : MonoBehaviour
{
	[Token(Token = "0x4000276")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Vector3 WobbleAxis;

	[Token(Token = "0x4000277")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float WobbleFrequency;

	[Token(Token = "0x4000278")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float WobbleAmplitude;

	[Token(Token = "0x4000279")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform TrackTarget;

	[Token(Token = "0x400027A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 startOffsetTarget;

	[Token(Token = "0x60002F7")]
	[Address(RVA = "0x4E0DA4", Offset = "0x4E0DA4", VA = "0x4E0DA4")]
	private void Start()
	{
	}

	[Token(Token = "0x60002F8")]
	[Address(RVA = "0x4E0EA8", Offset = "0x4E0EA8", VA = "0x4E0EA8")]
	private void Update()
	{
	}

	[Token(Token = "0x60002F9")]
	[Address(RVA = "0x4E108C", Offset = "0x4E108C", VA = "0x4E108C")]
	public InfoBubble()
	{
	}
}
[Token(Token = "0x20000C4")]
public class RuntimeDecalCombiner
{
	[Token(Token = "0x60002FA")]
	[Address(RVA = "0xA894B8", Offset = "0xA894B8", VA = "0xA894B8")]
	public static List<GameObject> Combine(IList<EasyDecal> decals)
	{
		return null;
	}

	[Token(Token = "0x60002FB")]
	[Address(RVA = "0xA8992C", Offset = "0xA8992C", VA = "0xA8992C")]
	private static List<GameObject> Combine(Dictionary<DecalTextureAtlas, List<EasyDecal>> mappings)
	{
		return null;
	}

	[Token(Token = "0x60002FC")]
	[Address(RVA = "0xA89ED4", Offset = "0xA89ED4", VA = "0xA89ED4")]
	private static GameObject Combine(IList<EasyDecal> decals, DecalTextureAtlas atlas)
	{
		return null;
	}

	[Token(Token = "0x60002FD")]
	[Address(RVA = "0xA8A678", Offset = "0xA8A678", VA = "0xA8A678")]
	public RuntimeDecalCombiner()
	{
	}
}
[Token(Token = "0x20000C5")]
public class SparksExecutioner : MonoBehaviour
{
	[Token(Token = "0x400027B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float Lifetime;

	[Token(Token = "0x60002FE")]
	[Address(RVA = "0xA8D640", Offset = "0xA8D640", VA = "0xA8D640")]
	private void Start()
	{
	}

	[Token(Token = "0x60002FF")]
	[Address(RVA = "0xA8D6AC", Offset = "0xA8D6AC", VA = "0xA8D6AC")]
	private void Kill()
	{
	}

	[Token(Token = "0x6000300")]
	[Address(RVA = "0xA8D740", Offset = "0xA8D740", VA = "0xA8D740")]
	public SparksExecutioner()
	{
	}
}
[Token(Token = "0x20000C6")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E677C", Offset = "0x2E677C")]
public class MouseLook : MonoBehaviour
{
	[Token(Token = "0x2000402")]
	public enum RotationAxes
	{
		[Token(Token = "0x40018B0")]
		MouseXAndY,
		[Token(Token = "0x40018B1")]
		MouseX,
		[Token(Token = "0x40018B2")]
		MouseY
	}

	[Token(Token = "0x400027C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public RotationAxes axes;

	[Token(Token = "0x400027D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float sensitivityX;

	[Token(Token = "0x400027E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float sensitivityY;

	[Token(Token = "0x400027F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float minimumX;

	[Token(Token = "0x4000280")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float maximumX;

	[Token(Token = "0x4000281")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float minimumY;

	[Token(Token = "0x4000282")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float maximumY;

	[Token(Token = "0x4000283")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float rotationY;

	[Token(Token = "0x6000301")]
	[Address(RVA = "0x4F1E7C", Offset = "0x4F1E7C", VA = "0x4F1E7C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000302")]
	[Address(RVA = "0x4F2164", Offset = "0x4F2164", VA = "0x4F2164")]
	private void Start()
	{
	}

	[Token(Token = "0x6000303")]
	[Address(RVA = "0x4F2248", Offset = "0x4F2248", VA = "0x4F2248")]
	public MouseLook()
	{
	}
}
[Token(Token = "0x20000C7")]
public struct ReflectionSnapshot
{
	[Token(Token = "0x4000284")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public AudioMixerSnapshot mixerSnapshot;

	[Token(Token = "0x4000285")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public float fadeTime;
}
[Token(Token = "0x20000C8")]
public class ONSPReflectionZone : MonoBehaviour
{
	[Token(Token = "0x4000286")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public AudioMixerSnapshot mixerSnapshot;

	[Token(Token = "0x4000287")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float fadeTime;

	[Token(Token = "0x4000288")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Stack<ReflectionSnapshot> snapshotList;

	[Token(Token = "0x4000289")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static ReflectionSnapshot currentSnapshot;

	[Token(Token = "0x6000304")]
	[Address(RVA = "0x829848", Offset = "0x829848", VA = "0x829848")]
	private void Start()
	{
	}

	[Token(Token = "0x6000305")]
	[Address(RVA = "0x82984C", Offset = "0x82984C", VA = "0x82984C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000306")]
	[Address(RVA = "0x829850", Offset = "0x829850", VA = "0x829850")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000307")]
	[Address(RVA = "0x829A18", Offset = "0x829A18", VA = "0x829A18")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000308")]
	[Address(RVA = "0x829898", Offset = "0x829898", VA = "0x829898")]
	private bool CheckForAudioListener(GameObject gameObject)
	{
		return default(bool);
	}

	[Token(Token = "0x6000309")]
	[Address(RVA = "0x82994C", Offset = "0x82994C", VA = "0x82994C")]
	private void PushCurrentMixerShapshot()
	{
	}

	[Token(Token = "0x600030A")]
	[Address(RVA = "0x829A60", Offset = "0x829A60", VA = "0x829A60")]
	private void PopCurrentMixerSnapshot()
	{
	}

	[Token(Token = "0x600030B")]
	[Address(RVA = "0x829B38", Offset = "0x829B38", VA = "0x829B38")]
	private void SetReflectionValues()
	{
	}

	[Token(Token = "0x600030C")]
	[Address(RVA = "0x829D14", Offset = "0x829D14", VA = "0x829D14")]
	private void SetReflectionValues(ref ReflectionSnapshot mss)
	{
	}

	[Token(Token = "0x600030D")]
	[Address(RVA = "0x829EF0", Offset = "0x829EF0", VA = "0x829EF0")]
	public ONSPReflectionZone()
	{
	}
}
[Token(Token = "0x20000C9")]
public class OculusSpatializerUnity : MonoBehaviour
{
	[Token(Token = "0x2000403")]
	public delegate void AudioRaycastCallback(Vector3 origin, Vector3 direction, out Vector3 point, out Vector3 normal, IntPtr data);

	[Token(Token = "0x400028A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public LayerMask layerMask;

	[Token(Token = "0x400028B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool visualizeRoom;

	[Token(Token = "0x400028C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	private bool roomVisualizationInitialized;

	[Token(Token = "0x400028D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int raysPerSecond;

	[Token(Token = "0x400028E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float roomInterpSpeed;

	[Token(Token = "0x400028F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float maxWallDistance;

	[Token(Token = "0x4000290")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int rayCacheSize;

	[Token(Token = "0x4000291")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool dynamicReflectionsEnabled;

	[Token(Token = "0x4000292")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float particleSize;

	[Token(Token = "0x4000293")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float particleOffset;

	[Token(Token = "0x4000294")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject room;

	[Token(Token = "0x4000295")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Renderer[] wallRenderer;

	[Token(Token = "0x4000296")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float[] dims;

	[Token(Token = "0x4000297")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float[] coefs;

	[Token(Token = "0x4000298")]
	private const int HIT_COUNT = 2048;

	[Token(Token = "0x4000299")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3[] points;

	[Token(Token = "0x400029A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3[] normals;

	[Token(Token = "0x400029B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private ParticleSystem sys;

	[Token(Token = "0x400029C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private ParticleSystem.Particle[] particles;

	[Token(Token = "0x400029D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static LayerMask gLayerMask;

	[Token(Token = "0x400029E")]
	private const string strOSP = "AudioPluginOculusSpatializer";

	[Token(Token = "0x600030F")]
	[Address(RVA = "0x8B2E40", Offset = "0x8B2E40", VA = "0x8B2E40")]
	private static Vector3 swapHandedness(Vector3 vec)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000310")]
	[Address(RVA = "0x8B2BB4", Offset = "0x8B2BB4", VA = "0x8B2BB4")]
	[AttributeAttribute(Name = "MonoPInvokeCallbackAttribute", RVA = "0x2F9248", Offset = "0x2F9248")]
	private static void AudioRaycast(Vector3 origin, Vector3 direction, out Vector3 point, out Vector3 normal, IntPtr data)
	{
	}

	[Token(Token = "0x6000311")]
	[Address(RVA = "0x8B2E70", Offset = "0x8B2E70", VA = "0x8B2E70")]
	private void Start()
	{
	}

	[Token(Token = "0x6000312")]
	[Address(RVA = "0x8B3020", Offset = "0x8B3020", VA = "0x8B3020")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000313")]
	[Address(RVA = "0x8B3174", Offset = "0x8B3174", VA = "0x8B3174")]
	private void Update()
	{
	}

	[Token(Token = "0x6000314")]
	[Address(RVA = "0x8B4150", Offset = "0x8B4150", VA = "0x8B4150")]
	private void inititalizeRoomVisualization()
	{
	}

	[PreserveSig]
	[Token(Token = "0x6000315")]
	[Address(RVA = "0x8B2F40", Offset = "0x8B2F40", VA = "0x8B2F40")]
	private static extern int OSP_Unity_AssignRaycastCallback(AudioRaycastCallback callback, IntPtr data);

	[PreserveSig]
	[Token(Token = "0x6000316")]
	[Address(RVA = "0x8B30A0", Offset = "0x8B30A0", VA = "0x8B30A0")]
	private static extern int OSP_Unity_AssignRaycastCallback(IntPtr callback, IntPtr data);

	[PreserveSig]
	[Token(Token = "0x6000317")]
	[Address(RVA = "0x8B3C90", Offset = "0x8B3C90", VA = "0x8B3C90")]
	private static extern int OSP_Unity_SetDynamicRoomRaysPerSecond(int RaysPerSecond);

	[PreserveSig]
	[Token(Token = "0x6000318")]
	[Address(RVA = "0x8B3D78", Offset = "0x8B3D78", VA = "0x8B3D78")]
	private static extern int OSP_Unity_SetDynamicRoomInterpSpeed(float InterpSpeed);

	[PreserveSig]
	[Token(Token = "0x6000319")]
	[Address(RVA = "0x8B3E60", Offset = "0x8B3E60", VA = "0x8B3E60")]
	private static extern int OSP_Unity_SetDynamicRoomMaxWallDistance(float MaxWallDistance);

	[PreserveSig]
	[Token(Token = "0x600031A")]
	[Address(RVA = "0x8B3F48", Offset = "0x8B3F48", VA = "0x8B3F48")]
	private static extern int OSP_Unity_SetDynamicRoomRaysRayCacheSize(int RayCacheSize);

	[PreserveSig]
	[Token(Token = "0x600031B")]
	[Address(RVA = "0x8B4038", Offset = "0x8B4038", VA = "0x8B4038")]
	private static extern int OSP_Unity_UpdateRoomModel(float wetLevel);

	[PreserveSig]
	[Token(Token = "0x600031C")]
	[Address(RVA = "0x8B5818", Offset = "0x8B5818", VA = "0x8B5818")]
	private static extern int OSP_Unity_GetRoomDimensions(float[] roomDimensions, float[] reflectionsCoefs, out Vector3 position);

	[PreserveSig]
	[Token(Token = "0x600031D")]
	[Address(RVA = "0x8B5918", Offset = "0x8B5918", VA = "0x8B5918")]
	private static extern int OSP_Unity_GetRaycastHits(Vector3[] points, Vector3[] normals, int length);

	[Token(Token = "0x600031E")]
	[Address(RVA = "0x8B5A50", Offset = "0x8B5A50", VA = "0x8B5A50")]
	public OculusSpatializerUnity()
	{
	}
}
[Token(Token = "0x20000CA")]
public class ONSPAmbisonicsNative : MonoBehaviour
{
	[Token(Token = "0x2000404")]
	public enum ovrAmbisonicsNativeStatus
	{
		[Token(Token = "0x40018B4")]
		Uninitialized = -1,
		[Token(Token = "0x40018B5")]
		NotEnabled,
		[Token(Token = "0x40018B6")]
		Success,
		[Token(Token = "0x40018B7")]
		StreamError,
		[Token(Token = "0x40018B8")]
		ProcessError,
		[Token(Token = "0x40018B9")]
		MaxStatValue
	}

	[Token(Token = "0x400029F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private AudioSource source;

	[Token(Token = "0x40002A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int numFOAChannels;

	[Token(Token = "0x40002A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static int paramVSpeakerMode;

	[Token(Token = "0x40002A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static int paramAmbiStat;

	[Token(Token = "0x40002A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private ovrAmbisonicsNativeStatus currentStatus;

	[Token(Token = "0x40002A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[SerializeField]
	private bool useVirtualSpeakers;

	[Token(Token = "0x17000019")]
	public bool UseVirtualSpeakers
	{
		[Token(Token = "0x6000320")]
		[Address(RVA = "0x4F4558", Offset = "0x4F4558", VA = "0x4F4558")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000321")]
		[Address(RVA = "0x4F4560", Offset = "0x4F4560", VA = "0x4F4560")]
		set
		{
		}
	}

	[Token(Token = "0x6000322")]
	[Address(RVA = "0x4F4568", Offset = "0x4F4568", VA = "0x4F4568")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000323")]
	[Address(RVA = "0x4F4864", Offset = "0x4F4864", VA = "0x4F4864")]
	private void Update()
	{
	}

	[Token(Token = "0x6000324")]
	[Address(RVA = "0x4F4BC8", Offset = "0x4F4BC8", VA = "0x4F4BC8")]
	public ONSPAmbisonicsNative()
	{
	}
}
[Token(Token = "0x20000CB")]
public class ONSPAudioSource : MonoBehaviour
{
	[Token(Token = "0x2000405")]
	private enum Parameters
	{
		[Token(Token = "0x40018BB")]
		P_GAIN,
		[Token(Token = "0x40018BC")]
		P_USEINVSQR,
		[Token(Token = "0x40018BD")]
		P_NEAR,
		[Token(Token = "0x40018BE")]
		P_FAR,
		[Token(Token = "0x40018BF")]
		P_RADIUS,
		[Token(Token = "0x40018C0")]
		P_DISABLE_RFL,
		[Token(Token = "0x40018C1")]
		P_VSPEAKERMODE,
		[Token(Token = "0x40018C2")]
		P_AMBISTAT,
		[Token(Token = "0x40018C3")]
		P_READONLY_GLOBAL_RFL_ENABLED,
		[Token(Token = "0x40018C4")]
		P_READONLY_NUM_VOICES,
		[Token(Token = "0x40018C5")]
		P_SENDLEVEL,
		[Token(Token = "0x40018C6")]
		P_NUM
	}

	[Token(Token = "0x40002A5")]
	public const string strONSPS = "AudioPluginOculusSpatializer";

	[Token(Token = "0x40002A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[SerializeField]
	private bool enableSpatialization;

	[Token(Token = "0x40002A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	private float gain;

	[Token(Token = "0x40002A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[SerializeField]
	private bool useInvSqr;

	[Token(Token = "0x40002A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float near;

	[Token(Token = "0x40002AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float far;

	[Token(Token = "0x40002AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float volumetricRadius;

	[Token(Token = "0x40002AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float reverbSend;

	[Token(Token = "0x40002AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool enableRfl;

	[Token(Token = "0x40002AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ONSPAudioSource RoomReflectionGizmoAS;

	[Token(Token = "0x1700001A")]
	public bool EnableSpatialization
	{
		[Token(Token = "0x6000328")]
		[Address(RVA = "0x4F4F44", Offset = "0x4F4F44", VA = "0x4F4F44")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000329")]
		[Address(RVA = "0x4F4F4C", Offset = "0x4F4F4C", VA = "0x4F4F4C")]
		set
		{
		}
	}

	[Token(Token = "0x1700001B")]
	public float Gain
	{
		[Token(Token = "0x600032A")]
		[Address(RVA = "0x4F4F54", Offset = "0x4F4F54", VA = "0x4F4F54")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600032B")]
		[Address(RVA = "0x4F4F5C", Offset = "0x4F4F5C", VA = "0x4F4F5C")]
		set
		{
		}
	}

	[Token(Token = "0x1700001C")]
	public bool UseInvSqr
	{
		[Token(Token = "0x600032C")]
		[Address(RVA = "0x4F4FF4", Offset = "0x4F4FF4", VA = "0x4F4FF4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600032D")]
		[Address(RVA = "0x4F4FFC", Offset = "0x4F4FFC", VA = "0x4F4FFC")]
		set
		{
		}
	}

	[Token(Token = "0x1700001D")]
	public float Near
	{
		[Token(Token = "0x600032E")]
		[Address(RVA = "0x4F5004", Offset = "0x4F5004", VA = "0x4F5004")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600032F")]
		[Address(RVA = "0x4F500C", Offset = "0x4F500C", VA = "0x4F500C")]
		set
		{
		}
	}

	[Token(Token = "0x1700001E")]
	public float Far
	{
		[Token(Token = "0x6000330")]
		[Address(RVA = "0x4F50A4", Offset = "0x4F50A4", VA = "0x4F50A4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000331")]
		[Address(RVA = "0x4F50AC", Offset = "0x4F50AC", VA = "0x4F50AC")]
		set
		{
		}
	}

	[Token(Token = "0x1700001F")]
	public float VolumetricRadius
	{
		[Token(Token = "0x6000332")]
		[Address(RVA = "0x4F5144", Offset = "0x4F5144", VA = "0x4F5144")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000333")]
		[Address(RVA = "0x4F514C", Offset = "0x4F514C", VA = "0x4F514C")]
		set
		{
		}
	}

	[Token(Token = "0x17000020")]
	public float ReverbSend
	{
		[Token(Token = "0x6000334")]
		[Address(RVA = "0x4F51E4", Offset = "0x4F51E4", VA = "0x4F51E4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000335")]
		[Address(RVA = "0x4F51EC", Offset = "0x4F51EC", VA = "0x4F51EC")]
		set
		{
		}
	}

	[Token(Token = "0x17000021")]
	public bool EnableRfl
	{
		[Token(Token = "0x6000336")]
		[Address(RVA = "0x4F5288", Offset = "0x4F5288", VA = "0x4F5288")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000337")]
		[Address(RVA = "0x4F5290", Offset = "0x4F5290", VA = "0x4F5290")]
		set
		{
		}
	}

	[Token(Token = "0x6000326")]
	[Address(RVA = "0x4F4C5C", Offset = "0x4F4C5C", VA = "0x4F4C5C")]
	[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0x2F92C0", Offset = "0x2F92C0")]
	private static void OnBeforeSceneLoadRuntimeMethod()
	{
	}

	[PreserveSig]
	[Token(Token = "0x6000327")]
	[Address(RVA = "0x4F4E10", Offset = "0x4F4E10", VA = "0x4F4E10")]
	private static extern void ONSP_GetGlobalRoomReflectionValues(ref bool reflOn, ref bool reverbOn, ref float width, ref float height, ref float length);

	[Token(Token = "0x6000338")]
	[Address(RVA = "0x4F5298", Offset = "0x4F5298", VA = "0x4F5298")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000339")]
	[Address(RVA = "0x4F54A4", Offset = "0x4F54A4", VA = "0x4F54A4")]
	private void Start()
	{
	}

	[Token(Token = "0x600033A")]
	[Address(RVA = "0x4F54A8", Offset = "0x4F54A8", VA = "0x4F54A8")]
	private void Update()
	{
	}

	[Token(Token = "0x600033B")]
	[Address(RVA = "0x4F5314", Offset = "0x4F5314", VA = "0x4F5314")]
	public void SetParameters(ref AudioSource source)
	{
	}

	[Token(Token = "0x600033C")]
	[Address(RVA = "0x4F55B4", Offset = "0x4F55B4", VA = "0x4F55B4")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600033D")]
	[Address(RVA = "0x4F5C14", Offset = "0x4F5C14", VA = "0x4F5C14")]
	private void OnDestroy()
	{
	}

	[PreserveSig]
	[Token(Token = "0x600033E")]
	[Address(RVA = "0x4F4CF8", Offset = "0x4F4CF8", VA = "0x4F4CF8")]
	private static extern int OSP_SetGlobalVoiceLimit(int VoiceLimit);

	[Token(Token = "0x600033F")]
	[Address(RVA = "0x4F5D30", Offset = "0x4F5D30", VA = "0x4F5D30")]
	public ONSPAudioSource()
	{
	}
}
[Token(Token = "0x20000CC")]
public class ONSPProfiler : MonoBehaviour
{
	[Token(Token = "0x40002AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public bool profilerEnabled;

	[Token(Token = "0x40002B0")]
	private const int DEFAULT_PORT = 2121;

	[Token(Token = "0x40002B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int port;

	[Token(Token = "0x40002B2")]
	public const string strONSPS = "AudioPluginOculusSpatializer";

	[Token(Token = "0x6000341")]
	[Address(RVA = "0x4F5D58", Offset = "0x4F5D58", VA = "0x4F5D58")]
	private void Start()
	{
	}

	[Token(Token = "0x6000342")]
	[Address(RVA = "0x4F5D64", Offset = "0x4F5D64", VA = "0x4F5D64")]
	private void Update()
	{
	}

	[PreserveSig]
	[Token(Token = "0x6000343")]
	[Address(RVA = "0x4F5EA0", Offset = "0x4F5EA0", VA = "0x4F5EA0")]
	private static extern int ONSP_SetProfilerEnabled(bool enabled);

	[PreserveSig]
	[Token(Token = "0x6000344")]
	[Address(RVA = "0x4F5D90", Offset = "0x4F5D90", VA = "0x4F5D90")]
	private static extern int ONSP_SetProfilerPort(int port);

	[Token(Token = "0x6000345")]
	[Address(RVA = "0x4F5FB4", Offset = "0x4F5FB4", VA = "0x4F5FB4")]
	public ONSPProfiler()
	{
	}
}
[Token(Token = "0x20000CD")]
public class ONSPPropagationGeometry : MonoBehaviour
{
	[Token(Token = "0x2000406")]
	private struct MeshMaterial
	{
		[Token(Token = "0x40018C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public MeshFilter meshFilter;

		[Token(Token = "0x40018C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ONSPPropagationMaterial[] materials;
	}

	[Token(Token = "0x2000407")]
	private struct TerrainMaterial
	{
		[Token(Token = "0x40018C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Terrain terrain;

		[Token(Token = "0x40018CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ONSPPropagationMaterial[] materials;

		[Token(Token = "0x40018CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Mesh[] treePrototypeMeshes;
	}

	[Token(Token = "0x40002B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string GeometryAssetDirectory;

	[Token(Token = "0x40002B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public string filePathRelative;

	[Token(Token = "0x40002B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool fileEnabled;

	[Token(Token = "0x40002B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	public bool includeChildMeshes;

	[Token(Token = "0x40002B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private IntPtr geometryHandle;

	[Token(Token = "0x40002B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static int OSPSuccess;

	[Token(Token = "0x40002B9")]
	public const string GEOMETRY_FILE_EXTENSION = "ovramesh";

	[Token(Token = "0x40002BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static int terrainDecimation;

	[Token(Token = "0x17000022")]
	public static string GeometryAssetPath
	{
		[Token(Token = "0x6000346")]
		[Address(RVA = "0x4F9938", Offset = "0x4F9938", VA = "0x4F9938")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000023")]
	public string filePath
	{
		[Token(Token = "0x6000347")]
		[Address(RVA = "0x4F99EC", Offset = "0x4F99EC", VA = "0x4F99EC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000348")]
	[Address(RVA = "0x4F9A84", Offset = "0x4F9A84", VA = "0x4F9A84")]
	private static string GetPath(Transform current)
	{
		return null;
	}

	[Token(Token = "0x6000349")]
	[Address(RVA = "0x4F9C54", Offset = "0x4F9C54", VA = "0x4F9C54")]
	private void Awake()
	{
	}

	[Token(Token = "0x600034A")]
	[Address(RVA = "0x4F9C58", Offset = "0x4F9C58", VA = "0x4F9C58")]
	private void CreatePropagationGeometry()
	{
	}

	[Token(Token = "0x600034B")]
	[Address(RVA = "0x4FA384", Offset = "0x4FA384", VA = "0x4FA384")]
	private void Update()
	{
	}

	[Token(Token = "0x600034C")]
	[Address(RVA = "0x4FA8C8", Offset = "0x4FA8C8", VA = "0x4FA8C8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600034D")]
	[Address(RVA = "0x4FAA7C", Offset = "0x4FAA7C", VA = "0x4FAA7C")]
	private static void traverseMeshHierarchy(GameObject obj, ONSPPropagationMaterial[] currentMaterials, bool includeChildren, List<MeshMaterial> meshMaterials, List<TerrainMaterial> terrainMaterials, bool ignoreStatic, ref int ignoredMeshCount)
	{
	}

	[Token(Token = "0x600034E")]
	[Address(RVA = "0x4FB42C", Offset = "0x4FB42C", VA = "0x4FB42C")]
	private int uploadMesh(IntPtr geometryHandle, GameObject meshObject, Matrix4x4 worldToLocal)
	{
		return default(int);
	}

	[Token(Token = "0x600034F")]
	[Address(RVA = "0x4FB4CC", Offset = "0x4FB4CC", VA = "0x4FB4CC")]
	private int uploadMesh(IntPtr geometryHandle, GameObject meshObject, Matrix4x4 worldToLocal, bool ignoreStatic, ref int ignoredMeshCount)
	{
		return default(int);
	}

	[Token(Token = "0x6000350")]
	[Address(RVA = "0x4FD6D4", Offset = "0x4FD6D4", VA = "0x4FD6D4")]
	private static void uploadMeshFilter(List<Vector3> tempVertices, List<int> tempIndices, MeshGroup[] groups, float[] vertices, int[] indices, ref int vertexOffset, ref int indexOffset, ref int groupOffset, Mesh mesh, ONSPPropagationMaterial[] materials, Matrix4x4 matrix)
	{
	}

	[Token(Token = "0x6000351")]
	[Address(RVA = "0x4FD590", Offset = "0x4FD590", VA = "0x4FD590")]
	private static void updateCountsForMesh(ref int totalVertexCount, ref uint totalIndexCount, ref int totalFaceCount, ref int totalMaterialCount, Mesh mesh)
	{
	}

	[Token(Token = "0x6000352")]
	[Address(RVA = "0x4FA0C4", Offset = "0x4FA0C4", VA = "0x4FA0C4")]
	public void UploadGeometry()
	{
	}

	[Token(Token = "0x6000353")]
	[Address(RVA = "0x4F9E90", Offset = "0x4F9E90", VA = "0x4F9E90")]
	public bool ReadFile()
	{
		return default(bool);
	}

	[Token(Token = "0x6000354")]
	[Address(RVA = "0x4FDE30", Offset = "0x4FDE30", VA = "0x4FDE30")]
	public bool WriteToObj()
	{
		return default(bool);
	}

	[Token(Token = "0x6000355")]
	[Address(RVA = "0x4FE458", Offset = "0x4FE458", VA = "0x4FE458")]
	public ONSPPropagationGeometry()
	{
	}
}
[Token(Token = "0x20000CE")]
internal class ONSPPropagation
{
	[Token(Token = "0x2000408")]
	public enum ovrAudioScalarType : uint
	{
		[Token(Token = "0x40018CD")]
		Int8,
		[Token(Token = "0x40018CE")]
		UInt8,
		[Token(Token = "0x40018CF")]
		Int16,
		[Token(Token = "0x40018D0")]
		UInt16,
		[Token(Token = "0x40018D1")]
		Int32,
		[Token(Token = "0x40018D2")]
		UInt32,
		[Token(Token = "0x40018D3")]
		Int64,
		[Token(Token = "0x40018D4")]
		UInt64,
		[Token(Token = "0x40018D5")]
		Float16,
		[Token(Token = "0x40018D6")]
		Float32,
		[Token(Token = "0x40018D7")]
		Float64
	}

	[Token(Token = "0x2000409")]
	public class ClientType
	{
		[Token(Token = "0x40018D8")]
		public const uint OVRA_CLIENT_TYPE_NATIVE = 0u;

		[Token(Token = "0x40018D9")]
		public const uint OVRA_CLIENT_TYPE_WWISE_2016 = 1u;

		[Token(Token = "0x40018DA")]
		public const uint OVRA_CLIENT_TYPE_WWISE_2017_1 = 2u;

		[Token(Token = "0x40018DB")]
		public const uint OVRA_CLIENT_TYPE_WWISE_2017_2 = 3u;

		[Token(Token = "0x40018DC")]
		public const uint OVRA_CLIENT_TYPE_WWISE_2018_1 = 4u;

		[Token(Token = "0x40018DD")]
		public const uint OVRA_CLIENT_TYPE_FMOD = 5u;

		[Token(Token = "0x40018DE")]
		public const uint OVRA_CLIENT_TYPE_UNITY = 6u;

		[Token(Token = "0x40018DF")]
		public const uint OVRA_CLIENT_TYPE_UE4 = 7u;

		[Token(Token = "0x40018E0")]
		public const uint OVRA_CLIENT_TYPE_VST = 8u;

		[Token(Token = "0x40018E1")]
		public const uint OVRA_CLIENT_TYPE_AAX = 9u;

		[Token(Token = "0x40018E2")]
		public const uint OVRA_CLIENT_TYPE_TEST = 10u;

		[Token(Token = "0x40018E3")]
		public const uint OVRA_CLIENT_TYPE_OTHER = 11u;

		[Token(Token = "0x40018E4")]
		public const uint OVRA_CLIENT_TYPE_WWISE_UNKNOWN = 12u;

		[Token(Token = "0x40018E5")]
		public const uint OVRA_CLIENT_TYPE_WWISE_2019_1 = 13u;

		[Token(Token = "0x40018E6")]
		public const uint OVRA_CLIENT_TYPE_WWISE_2019_2 = 14u;

		[Token(Token = "0x60019EB")]
		[Address(RVA = "0x4F65D4", Offset = "0x4F65D4", VA = "0x4F65D4")]
		public ClientType()
		{
		}
	}

	[Token(Token = "0x200040A")]
	public interface PropagationInterface
	{
		[Token(Token = "0x60019EC")]
		int SetPropagationQuality(float quality);

		[Token(Token = "0x60019ED")]
		int SetPropagationThreadAffinity(ulong cpuMask);

		[Token(Token = "0x60019EE")]
		int CreateAudioGeometry(out IntPtr geometry);

		[Token(Token = "0x60019EF")]
		int DestroyAudioGeometry(IntPtr geometry);

		[Token(Token = "0x60019F0")]
		int AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, int vertexCount, int[] indices, int indexCount, MeshGroup[] groups, int groupCount);

		[Token(Token = "0x60019F1")]
		int AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4);

		[Token(Token = "0x60019F2")]
		int AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4);

		[Token(Token = "0x60019F3")]
		int AudioGeometryWriteMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x60019F4")]
		int AudioGeometryReadMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x60019F5")]
		int AudioGeometryWriteMeshFileObj(IntPtr geometry, string filePath);

		[Token(Token = "0x60019F6")]
		int AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value);

		[Token(Token = "0x60019F7")]
		int CreateAudioMaterial(out IntPtr material);

		[Token(Token = "0x60019F8")]
		int DestroyAudioMaterial(IntPtr material);

		[Token(Token = "0x60019F9")]
		int AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value);

		[Token(Token = "0x60019FA")]
		int AudioMaterialReset(IntPtr material, MaterialProperty property);
	}

	[Token(Token = "0x200040B")]
	public class UnityNativeInterface : PropagationInterface
	{
		[Token(Token = "0x40018E7")]
		public const string strOSPS = "AudioPluginOculusSpatializer";

		[Token(Token = "0x40018E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IntPtr context_;

		[Token(Token = "0x1700037A")]
		private IntPtr context
		{
			[Token(Token = "0x60019FB")]
			[Address(RVA = "0x4F76B0", Offset = "0x4F76B0", VA = "0x4F76B0")]
			get
			{
				return default(IntPtr);
			}
		}

		[PreserveSig]
		[Token(Token = "0x60019FC")]
		[Address(RVA = "0x4F7728", Offset = "0x4F7728", VA = "0x4F7728")]
		public static extern int ovrAudio_GetPluginContext(out IntPtr context, uint clientType);

		[PreserveSig]
		[Token(Token = "0x60019FD")]
		[Address(RVA = "0x4F7800", Offset = "0x4F7800", VA = "0x4F7800")]
		private static extern int ovrAudio_SetPropagationQuality(IntPtr context, float quality);

		[Token(Token = "0x60019FE")]
		[Address(RVA = "0x4F78D4", Offset = "0x4F78D4", VA = "0x4F78D4", Slot = "4")]
		public int SetPropagationQuality(float quality)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60019FF")]
		[Address(RVA = "0x4F78F0", Offset = "0x4F78F0", VA = "0x4F78F0")]
		private static extern int ovrAudio_SetPropagationThreadAffinity(IntPtr context, ulong cpuMask);

		[Token(Token = "0x6001A00")]
		[Address(RVA = "0x4F79CC", Offset = "0x4F79CC", VA = "0x4F79CC", Slot = "5")]
		public int SetPropagationThreadAffinity(ulong cpuMask)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001A01")]
		[Address(RVA = "0x4F79F8", Offset = "0x4F79F8", VA = "0x4F79F8")]
		private static extern int ovrAudio_CreateAudioGeometry(IntPtr context, out IntPtr geometry);

		[Token(Token = "0x6001A02")]
		[Address(RVA = "0x4F7ACC", Offset = "0x4F7ACC", VA = "0x4F7ACC", Slot = "6")]
		public int CreateAudioGeometry(out IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001A03")]
		[Address(RVA = "0x4F7AE8", Offset = "0x4F7AE8", VA = "0x4F7AE8")]
		private static extern int ovrAudio_DestroyAudioGeometry(IntPtr geometry);

		[Token(Token = "0x6001A04")]
		[Address(RVA = "0x4F7BB4", Offset = "0x4F7BB4", VA = "0x4F7BB4", Slot = "7")]
		public int DestroyAudioGeometry(IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001A05")]
		[Address(RVA = "0x4F7BC0", Offset = "0x4F7BC0", VA = "0x4F7BC0")]
		private static extern int ovrAudio_AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, UIntPtr verticesBytesOffset, UIntPtr vertexCount, UIntPtr vertexStride, ovrAudioScalarType vertexType, int[] indices, UIntPtr indicesByteOffset, UIntPtr indexCount, ovrAudioScalarType indexType, MeshGroup[] groups, UIntPtr groupCount);

		[Token(Token = "0x6001A06")]
		[Address(RVA = "0x4F7CEC", Offset = "0x4F7CEC", VA = "0x4F7CEC", Slot = "8")]
		public int AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, int vertexCount, int[] indices, int indexCount, MeshGroup[] groups, int groupCount)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001A07")]
		[Address(RVA = "0x4F7DF8", Offset = "0x4F7DF8", VA = "0x4F7DF8")]
		private static extern int ovrAudio_AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4);

		[Token(Token = "0x6001A08")]
		[Address(RVA = "0x4F7ED4", Offset = "0x4F7ED4", VA = "0x4F7ED4", Slot = "9")]
		public int AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001A09")]
		[Address(RVA = "0x4F7EE0", Offset = "0x4F7EE0", VA = "0x4F7EE0")]
		private static extern int ovrAudio_AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4);

		[Token(Token = "0x6001A0A")]
		[Address(RVA = "0x4F8074", Offset = "0x4F8074", VA = "0x4F8074", Slot = "10")]
		public int AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001A0B")]
		[Address(RVA = "0x4F8080", Offset = "0x4F8080", VA = "0x4F8080")]
		private static extern int ovrAudio_AudioGeometryWriteMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x6001A0C")]
		[Address(RVA = "0x4F8178", Offset = "0x4F8178", VA = "0x4F8178", Slot = "11")]
		public int AudioGeometryWriteMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001A0D")]
		[Address(RVA = "0x4F8188", Offset = "0x4F8188", VA = "0x4F8188")]
		private static extern int ovrAudio_AudioGeometryReadMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x6001A0E")]
		[Address(RVA = "0x4F8280", Offset = "0x4F8280", VA = "0x4F8280", Slot = "12")]
		public int AudioGeometryReadMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001A0F")]
		[Address(RVA = "0x4F8290", Offset = "0x4F8290", VA = "0x4F8290")]
		private static extern int ovrAudio_AudioGeometryWriteMeshFileObj(IntPtr geometry, string filePath);

		[Token(Token = "0x6001A10")]
		[Address(RVA = "0x4F8388", Offset = "0x4F8388", VA = "0x4F8388", Slot = "13")]
		public int AudioGeometryWriteMeshFileObj(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001A11")]
		[Address(RVA = "0x4F8398", Offset = "0x4F8398", VA = "0x4F8398")]
		private static extern int ovrAudio_CreateAudioMaterial(IntPtr context, out IntPtr material);

		[Token(Token = "0x6001A12")]
		[Address(RVA = "0x4F846C", Offset = "0x4F846C", VA = "0x4F846C", Slot = "15")]
		public int CreateAudioMaterial(out IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001A13")]
		[Address(RVA = "0x4F8488", Offset = "0x4F8488", VA = "0x4F8488")]
		private static extern int ovrAudio_DestroyAudioMaterial(IntPtr material);

		[Token(Token = "0x6001A14")]
		[Address(RVA = "0x4F8554", Offset = "0x4F8554", VA = "0x4F8554", Slot = "16")]
		public int DestroyAudioMaterial(IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001A15")]
		[Address(RVA = "0x4F8560", Offset = "0x4F8560", VA = "0x4F8560")]
		private static extern int ovrAudio_AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value);

		[Token(Token = "0x6001A16")]
		[Address(RVA = "0x4F8644", Offset = "0x4F8644", VA = "0x4F8644", Slot = "17")]
		public int AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001A17")]
		[Address(RVA = "0x4F8670", Offset = "0x4F8670", VA = "0x4F8670")]
		private static extern int ovrAudio_AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value);

		[Token(Token = "0x6001A18")]
		[Address(RVA = "0x4F8754", Offset = "0x4F8754", VA = "0x4F8754", Slot = "14")]
		public int AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001A19")]
		[Address(RVA = "0x4F8780", Offset = "0x4F8780", VA = "0x4F8780")]
		private static extern int ovrAudio_AudioMaterialReset(IntPtr material, MaterialProperty property);

		[Token(Token = "0x6001A1A")]
		[Address(RVA = "0x4F8854", Offset = "0x4F8854", VA = "0x4F8854", Slot = "18")]
		public int AudioMaterialReset(IntPtr material, MaterialProperty property)
		{
			return default(int);
		}

		[Token(Token = "0x6001A1B")]
		[Address(RVA = "0x4F656C", Offset = "0x4F656C", VA = "0x4F656C")]
		public UnityNativeInterface()
		{
		}
	}

	[Token(Token = "0x200040C")]
	public class WwisePluginInterface : PropagationInterface
	{
		[Token(Token = "0x40018E9")]
		public const string strOSPS = "OculusSpatializerWwise";

		[Token(Token = "0x40018EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IntPtr context_;

		[Token(Token = "0x1700037B")]
		private IntPtr context
		{
			[Token(Token = "0x6001A1C")]
			[Address(RVA = "0x4F8860", Offset = "0x4F8860", VA = "0x4F8860")]
			get
			{
				return default(IntPtr);
			}
		}

		[PreserveSig]
		[Token(Token = "0x6001A1D")]
		[Address(RVA = "0x4F6300", Offset = "0x4F6300", VA = "0x4F6300")]
		public static extern int ovrAudio_GetPluginContext(out IntPtr context, uint clientType);

		[PreserveSig]
		[Token(Token = "0x6001A1E")]
		[Address(RVA = "0x4F88D8", Offset = "0x4F88D8", VA = "0x4F88D8")]
		private static extern int ovrAudio_SetPropagationQuality(IntPtr context, float quality);

		[Token(Token = "0x6001A1F")]
		[Address(RVA = "0x4F89AC", Offset = "0x4F89AC", VA = "0x4F89AC", Slot = "4")]
		public int SetPropagationQuality(float quality)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001A20")]
		[Address(RVA = "0x4F89C8", Offset = "0x4F89C8", VA = "0x4F89C8")]
		private static extern int ovrAudio_SetPropagationThreadAffinity(IntPtr context, ulong cpuMask);

		[Token(Token = "0x6001A21")]
		[Address(RVA = "0x4F8AA4", Offset = "0x4F8AA4", VA = "0x4F8AA4", Slot = "5")]
		public int SetPropagationThreadAffinity(ulong cpuMask)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001A22")]
		[Address(RVA = "0x4F8AD0", Offset = "0x4F8AD0", VA = "0x4F8AD0")]
		private static extern int ovrAudio_CreateAudioGeometry(IntPtr context, out IntPtr geometry);

		[Token(Token = "0x6001A23")]
		[Address(RVA = "0x4F8BA4", Offset = "0x4F8BA4", VA = "0x4F8BA4", Slot = "6")]
		public int CreateAudioGeometry(out IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001A24")]
		[Address(RVA = "0x4F8BC0", Offset = "0x4F8BC0", VA = "0x4F8BC0")]
		private static extern int ovrAudio_DestroyAudioGeometry(IntPtr geometry);

		[Token(Token = "0x6001A25")]
		[Address(RVA = "0x4F8C8C", Offset = "0x4F8C8C", VA = "0x4F8C8C", Slot = "7")]
		public int DestroyAudioGeometry(IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001A26")]
		[Address(RVA = "0x4F8C98", Offset = "0x4F8C98", VA = "0x4F8C98")]
		private static extern int ovrAudio_AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, UIntPtr verticesBytesOffset, UIntPtr vertexCount, UIntPtr vertexStride, ovrAudioScalarType vertexType, int[] indices, UIntPtr indicesByteOffset, UIntPtr indexCount, ovrAudioScalarType indexType, MeshGroup[] groups, UIntPtr groupCount);

		[Token(Token = "0x6001A27")]
		[Address(RVA = "0x4F8DC4", Offset = "0x4F8DC4", VA = "0x4F8DC4", Slot = "8")]
		public int AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, int vertexCount, int[] indices, int indexCount, MeshGroup[] groups, int groupCount)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001A28")]
		[Address(RVA = "0x4F8ED0", Offset = "0x4F8ED0", VA = "0x4F8ED0")]
		private static extern int ovrAudio_AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4);

		[Token(Token = "0x6001A29")]
		[Address(RVA = "0x4F8FAC", Offset = "0x4F8FAC", VA = "0x4F8FAC", Slot = "9")]
		public int AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001A2A")]
		[Address(RVA = "0x4F8FB8", Offset = "0x4F8FB8", VA = "0x4F8FB8")]
		private static extern int ovrAudio_AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4);

		[Token(Token = "0x6001A2B")]
		[Address(RVA = "0x4F914C", Offset = "0x4F914C", VA = "0x4F914C", Slot = "10")]
		public int AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001A2C")]
		[Address(RVA = "0x4F9158", Offset = "0x4F9158", VA = "0x4F9158")]
		private static extern int ovrAudio_AudioGeometryWriteMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x6001A2D")]
		[Address(RVA = "0x4F9250", Offset = "0x4F9250", VA = "0x4F9250", Slot = "11")]
		public int AudioGeometryWriteMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001A2E")]
		[Address(RVA = "0x4F9260", Offset = "0x4F9260", VA = "0x4F9260")]
		private static extern int ovrAudio_AudioGeometryReadMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x6001A2F")]
		[Address(RVA = "0x4F9358", Offset = "0x4F9358", VA = "0x4F9358", Slot = "12")]
		public int AudioGeometryReadMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001A30")]
		[Address(RVA = "0x4F9368", Offset = "0x4F9368", VA = "0x4F9368")]
		private static extern int ovrAudio_AudioGeometryWriteMeshFileObj(IntPtr geometry, string filePath);

		[Token(Token = "0x6001A31")]
		[Address(RVA = "0x4F9460", Offset = "0x4F9460", VA = "0x4F9460", Slot = "13")]
		public int AudioGeometryWriteMeshFileObj(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001A32")]
		[Address(RVA = "0x4F9470", Offset = "0x4F9470", VA = "0x4F9470")]
		private static extern int ovrAudio_CreateAudioMaterial(IntPtr context, out IntPtr material);

		[Token(Token = "0x6001A33")]
		[Address(RVA = "0x4F9544", Offset = "0x4F9544", VA = "0x4F9544", Slot = "15")]
		public int CreateAudioMaterial(out IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001A34")]
		[Address(RVA = "0x4F9560", Offset = "0x4F9560", VA = "0x4F9560")]
		private static extern int ovrAudio_DestroyAudioMaterial(IntPtr material);

		[Token(Token = "0x6001A35")]
		[Address(RVA = "0x4F962C", Offset = "0x4F962C", VA = "0x4F962C", Slot = "16")]
		public int DestroyAudioMaterial(IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001A36")]
		[Address(RVA = "0x4F9638", Offset = "0x4F9638", VA = "0x4F9638")]
		private static extern int ovrAudio_AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value);

		[Token(Token = "0x6001A37")]
		[Address(RVA = "0x4F971C", Offset = "0x4F971C", VA = "0x4F971C", Slot = "17")]
		public int AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001A38")]
		[Address(RVA = "0x4F9748", Offset = "0x4F9748", VA = "0x4F9748")]
		private static extern int ovrAudio_AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value);

		[Token(Token = "0x6001A39")]
		[Address(RVA = "0x4F982C", Offset = "0x4F982C", VA = "0x4F982C", Slot = "14")]
		public int AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001A3A")]
		[Address(RVA = "0x4F9858", Offset = "0x4F9858", VA = "0x4F9858")]
		private static extern int ovrAudio_AudioMaterialReset(IntPtr material, MaterialProperty property);

		[Token(Token = "0x6001A3B")]
		[Address(RVA = "0x4F992C", Offset = "0x4F992C", VA = "0x4F992C", Slot = "18")]
		public int AudioMaterialReset(IntPtr material, MaterialProperty property)
		{
			return default(int);
		}

		[Token(Token = "0x6001A3C")]
		[Address(RVA = "0x4F63D4", Offset = "0x4F63D4", VA = "0x4F63D4")]
		public WwisePluginInterface()
		{
		}
	}

	[Token(Token = "0x200040D")]
	public class FMODPluginInterface : PropagationInterface
	{
		[Token(Token = "0x40018EB")]
		public const string strOSPS = "OculusSpatializerFMOD";

		[Token(Token = "0x40018EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IntPtr context_;

		[Token(Token = "0x1700037C")]
		private IntPtr context
		{
			[Token(Token = "0x6001A3D")]
			[Address(RVA = "0x4F65DC", Offset = "0x4F65DC", VA = "0x4F65DC")]
			get
			{
				return default(IntPtr);
			}
		}

		[PreserveSig]
		[Token(Token = "0x6001A3E")]
		[Address(RVA = "0x4F6438", Offset = "0x4F6438", VA = "0x4F6438")]
		public static extern int ovrAudio_GetPluginContext(out IntPtr context, uint clientType);

		[PreserveSig]
		[Token(Token = "0x6001A3F")]
		[Address(RVA = "0x4F6650", Offset = "0x4F6650", VA = "0x4F6650")]
		private static extern int ovrAudio_SetPropagationQuality(IntPtr context, float quality);

		[Token(Token = "0x6001A40")]
		[Address(RVA = "0x4F6724", Offset = "0x4F6724", VA = "0x4F6724", Slot = "4")]
		public int SetPropagationQuality(float quality)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001A41")]
		[Address(RVA = "0x4F6740", Offset = "0x4F6740", VA = "0x4F6740")]
		private static extern int ovrAudio_SetPropagationThreadAffinity(IntPtr context, ulong cpuMask);

		[Token(Token = "0x6001A42")]
		[Address(RVA = "0x4F681C", Offset = "0x4F681C", VA = "0x4F681C", Slot = "5")]
		public int SetPropagationThreadAffinity(ulong cpuMask)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001A43")]
		[Address(RVA = "0x4F6848", Offset = "0x4F6848", VA = "0x4F6848")]
		private static extern int ovrAudio_CreateAudioGeometry(IntPtr context, out IntPtr geometry);

		[Token(Token = "0x6001A44")]
		[Address(RVA = "0x4F691C", Offset = "0x4F691C", VA = "0x4F691C", Slot = "6")]
		public int CreateAudioGeometry(out IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001A45")]
		[Address(RVA = "0x4F6938", Offset = "0x4F6938", VA = "0x4F6938")]
		private static extern int ovrAudio_DestroyAudioGeometry(IntPtr geometry);

		[Token(Token = "0x6001A46")]
		[Address(RVA = "0x4F6A04", Offset = "0x4F6A04", VA = "0x4F6A04", Slot = "7")]
		public int DestroyAudioGeometry(IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001A47")]
		[Address(RVA = "0x4F6A10", Offset = "0x4F6A10", VA = "0x4F6A10")]
		private static extern int ovrAudio_AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, UIntPtr verticesBytesOffset, UIntPtr vertexCount, UIntPtr vertexStride, ovrAudioScalarType vertexType, int[] indices, UIntPtr indicesByteOffset, UIntPtr indexCount, ovrAudioScalarType indexType, MeshGroup[] groups, UIntPtr groupCount);

		[Token(Token = "0x6001A48")]
		[Address(RVA = "0x4F6B3C", Offset = "0x4F6B3C", VA = "0x4F6B3C", Slot = "8")]
		public int AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, int vertexCount, int[] indices, int indexCount, MeshGroup[] groups, int groupCount)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001A49")]
		[Address(RVA = "0x4F6C48", Offset = "0x4F6C48", VA = "0x4F6C48")]
		private static extern int ovrAudio_AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4);

		[Token(Token = "0x6001A4A")]
		[Address(RVA = "0x4F6D24", Offset = "0x4F6D24", VA = "0x4F6D24", Slot = "9")]
		public int AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001A4B")]
		[Address(RVA = "0x4F6D30", Offset = "0x4F6D30", VA = "0x4F6D30")]
		private static extern int ovrAudio_AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4);

		[Token(Token = "0x6001A4C")]
		[Address(RVA = "0x4F6EC4", Offset = "0x4F6EC4", VA = "0x4F6EC4", Slot = "10")]
		public int AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001A4D")]
		[Address(RVA = "0x4F6ED0", Offset = "0x4F6ED0", VA = "0x4F6ED0")]
		private static extern int ovrAudio_AudioGeometryWriteMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x6001A4E")]
		[Address(RVA = "0x4F6FC8", Offset = "0x4F6FC8", VA = "0x4F6FC8", Slot = "11")]
		public int AudioGeometryWriteMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001A4F")]
		[Address(RVA = "0x4F6FD8", Offset = "0x4F6FD8", VA = "0x4F6FD8")]
		private static extern int ovrAudio_AudioGeometryReadMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x6001A50")]
		[Address(RVA = "0x4F70D0", Offset = "0x4F70D0", VA = "0x4F70D0", Slot = "12")]
		public int AudioGeometryReadMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001A51")]
		[Address(RVA = "0x4F70E0", Offset = "0x4F70E0", VA = "0x4F70E0")]
		private static extern int ovrAudio_AudioGeometryWriteMeshFileObj(IntPtr geometry, string filePath);

		[Token(Token = "0x6001A52")]
		[Address(RVA = "0x4F71D8", Offset = "0x4F71D8", VA = "0x4F71D8", Slot = "13")]
		public int AudioGeometryWriteMeshFileObj(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001A53")]
		[Address(RVA = "0x4F71E8", Offset = "0x4F71E8", VA = "0x4F71E8")]
		private static extern int ovrAudio_CreateAudioMaterial(IntPtr context, out IntPtr material);

		[Token(Token = "0x6001A54")]
		[Address(RVA = "0x4F72BC", Offset = "0x4F72BC", VA = "0x4F72BC", Slot = "15")]
		public int CreateAudioMaterial(out IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001A55")]
		[Address(RVA = "0x4F72D8", Offset = "0x4F72D8", VA = "0x4F72D8")]
		private static extern int ovrAudio_DestroyAudioMaterial(IntPtr material);

		[Token(Token = "0x6001A56")]
		[Address(RVA = "0x4F73A4", Offset = "0x4F73A4", VA = "0x4F73A4", Slot = "16")]
		public int DestroyAudioMaterial(IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001A57")]
		[Address(RVA = "0x4F73B0", Offset = "0x4F73B0", VA = "0x4F73B0")]
		private static extern int ovrAudio_AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value);

		[Token(Token = "0x6001A58")]
		[Address(RVA = "0x4F7494", Offset = "0x4F7494", VA = "0x4F7494", Slot = "17")]
		public int AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001A59")]
		[Address(RVA = "0x4F74C0", Offset = "0x4F74C0", VA = "0x4F74C0")]
		private static extern int ovrAudio_AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value);

		[Token(Token = "0x6001A5A")]
		[Address(RVA = "0x4F75A4", Offset = "0x4F75A4", VA = "0x4F75A4", Slot = "14")]
		public int AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001A5B")]
		[Address(RVA = "0x4F75D0", Offset = "0x4F75D0", VA = "0x4F75D0")]
		private static extern int ovrAudio_AudioMaterialReset(IntPtr material, MaterialProperty property);

		[Token(Token = "0x6001A5C")]
		[Address(RVA = "0x4F76A4", Offset = "0x4F76A4", VA = "0x4F76A4", Slot = "18")]
		public int AudioMaterialReset(IntPtr material, MaterialProperty property)
		{
			return default(int);
		}

		[Token(Token = "0x6001A5D")]
		[Address(RVA = "0x4F650C", Offset = "0x4F650C", VA = "0x4F650C")]
		public FMODPluginInterface()
		{
		}
	}

	[Token(Token = "0x40002BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static PropagationInterface CachedInterface;

	[Token(Token = "0x17000024")]
	public static PropagationInterface Interface
	{
		[Token(Token = "0x6000357")]
		[Address(RVA = "0x4F5FC4", Offset = "0x4F5FC4", VA = "0x4F5FC4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000358")]
	[Address(RVA = "0x4F6054", Offset = "0x4F6054", VA = "0x4F6054")]
	private static PropagationInterface FindInterface()
	{
		return null;
	}

	[Token(Token = "0x6000359")]
	[Address(RVA = "0x4F65CC", Offset = "0x4F65CC", VA = "0x4F65CC")]
	public ONSPPropagation()
	{
	}
}
[Token(Token = "0x20000CF")]
public sealed class ONSPPropagationMaterial : MonoBehaviour
{
	[Token(Token = "0x200040E")]
	public enum Preset
	{
		[Token(Token = "0x40018EE")]
		Custom,
		[Token(Token = "0x40018EF")]
		AcousticTile,
		[Token(Token = "0x40018F0")]
		Brick,
		[Token(Token = "0x40018F1")]
		BrickPainted,
		[Token(Token = "0x40018F2")]
		Carpet,
		[Token(Token = "0x40018F3")]
		CarpetHeavy,
		[Token(Token = "0x40018F4")]
		CarpetHeavyPadded,
		[Token(Token = "0x40018F5")]
		CeramicTile,
		[Token(Token = "0x40018F6")]
		Concrete,
		[Token(Token = "0x40018F7")]
		ConcreteRough,
		[Token(Token = "0x40018F8")]
		ConcreteBlock,
		[Token(Token = "0x40018F9")]
		ConcreteBlockPainted,
		[Token(Token = "0x40018FA")]
		Curtain,
		[Token(Token = "0x40018FB")]
		Foliage,
		[Token(Token = "0x40018FC")]
		Glass,
		[Token(Token = "0x40018FD")]
		GlassHeavy,
		[Token(Token = "0x40018FE")]
		Grass,
		[Token(Token = "0x40018FF")]
		Gravel,
		[Token(Token = "0x4001900")]
		GypsumBoard,
		[Token(Token = "0x4001901")]
		PlasterOnBrick,
		[Token(Token = "0x4001902")]
		PlasterOnConcreteBlock,
		[Token(Token = "0x4001903")]
		Soil,
		[Token(Token = "0x4001904")]
		SoundProof,
		[Token(Token = "0x4001905")]
		Snow,
		[Token(Token = "0x4001906")]
		Steel,
		[Token(Token = "0x4001907")]
		Water,
		[Token(Token = "0x4001908")]
		WoodThin,
		[Token(Token = "0x4001909")]
		WoodThick,
		[Token(Token = "0x400190A")]
		WoodFloor,
		[Token(Token = "0x400190B")]
		WoodOnConcrete
	}

	[Serializable]
	[Token(Token = "0x200040F")]
	public sealed class Point
	{
		[Token(Token = "0x400190C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float frequency;

		[Token(Token = "0x400190D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float data;

		[Token(Token = "0x6001A5E")]
		[Address(RVA = "0x828F0C", Offset = "0x828F0C", VA = "0x828F0C")]
		public Point(float frequency = 0f, float data = 0f)
		{
		}

		[Token(Token = "0x6001A5F")]
		[Address(RVA = "0x829070", Offset = "0x829070", VA = "0x829070")]
		public static implicit operator Point(Vector2 v)
		{
			return null;
		}

		[Token(Token = "0x6001A60")]
		[Address(RVA = "0x8290EC", Offset = "0x8290EC", VA = "0x8290EC")]
		public static implicit operator Vector2(Point point)
		{
			return default(Vector2);
		}
	}

	[Serializable]
	[Token(Token = "0x2000410")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x2EA9EC", Offset = "0x2EA9EC")]
	public sealed class Spectrum
	{
		[Serializable]
		[Token(Token = "0x2000782")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ECC4C", Offset = "0x2ECC4C")]
		private sealed class <>c
		{
			[Token(Token = "0x4002201")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4002202")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public static Func<Point, float> <>9__3_0;

			[Token(Token = "0x4002203")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<Point, float> <>9__3_1;

			[Token(Token = "0x60024AF")]
			[Address(RVA = "0x8296E8", Offset = "0x8296E8", VA = "0x8296E8")]
			public <>c()
			{
			}

			[Token(Token = "0x60024B0")]
			[Address(RVA = "0x8296F0", Offset = "0x8296F0", VA = "0x8296F0")]
			internal float <get_Item>b__3_0(Point p)
			{
				return default(float);
			}

			[Token(Token = "0x60024B1")]
			[Address(RVA = "0x829714", Offset = "0x829714", VA = "0x829714")]
			internal float <get_Item>b__3_1(Point p)
			{
				return default(float);
			}
		}

		[Token(Token = "0x400190E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int selection;

		[Token(Token = "0x400190F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public List<Point> points;

		[Token(Token = "0x1700037D")]
		public float Item
		{
			[Token(Token = "0x6001A61")]
			[Address(RVA = "0x829150", Offset = "0x829150", VA = "0x829150")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001A62")]
		[Address(RVA = "0x828FDC", Offset = "0x828FDC", VA = "0x828FDC")]
		public Spectrum()
		{
		}
	}

	[Token(Token = "0x40002BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public IntPtr materialHandle;

	[Token(Token = "0x40002BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2ED2D8", Offset = "0x2ED2D8")]
	public Spectrum absorption;

	[Token(Token = "0x40002BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2ED310", Offset = "0x2ED310")]
	public Spectrum transmission;

	[Token(Token = "0x40002BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2ED34C", Offset = "0x2ED34C")]
	public Spectrum scattering;

	[Token(Token = "0x40002C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private Preset preset_;

	[Token(Token = "0x17000025")]
	public Preset preset
	{
		[Token(Token = "0x600035A")]
		[Address(RVA = "0x81A348", Offset = "0x81A348", VA = "0x81A348")]
		get
		{
			return default(Preset);
		}
		[Token(Token = "0x600035B")]
		[Address(RVA = "0x81A350", Offset = "0x81A350", VA = "0x81A350")]
		set
		{
		}
	}

	[Token(Token = "0x600035C")]
	[Address(RVA = "0x81A56C", Offset = "0x81A56C", VA = "0x81A56C")]
	private void Start()
	{
	}

	[Token(Token = "0x600035D")]
	[Address(RVA = "0x81A570", Offset = "0x81A570", VA = "0x81A570")]
	public void StartInternal()
	{
	}

	[Token(Token = "0x600035E")]
	[Address(RVA = "0x81AF78", Offset = "0x81AF78", VA = "0x81AF78")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600035F")]
	[Address(RVA = "0x81AF7C", Offset = "0x81AF7C", VA = "0x81AF7C")]
	public void DestroyInternal()
	{
	}

	[Token(Token = "0x6000360")]
	[Address(RVA = "0x81A720", Offset = "0x81A720", VA = "0x81A720")]
	public void UploadMaterial()
	{
	}

	[Token(Token = "0x6000361")]
	[Address(RVA = "0x81A36C", Offset = "0x81A36C", VA = "0x81A36C")]
	public void SetPreset(Preset preset)
	{
	}

	[Token(Token = "0x6000362")]
	[Address(RVA = "0x81B084", Offset = "0x81B084", VA = "0x81B084")]
	private static void AcousticTile(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000363")]
	[Address(RVA = "0x81B8B0", Offset = "0x81B8B0", VA = "0x81B8B0")]
	private static void Brick(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000364")]
	[Address(RVA = "0x81C0EC", Offset = "0x81C0EC", VA = "0x81C0EC")]
	private static void BrickPainted(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000365")]
	[Address(RVA = "0x81C908", Offset = "0x81C908", VA = "0x81C908")]
	private static void Carpet(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000366")]
	[Address(RVA = "0x81D148", Offset = "0x81D148", VA = "0x81D148")]
	private static void CarpetHeavy(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000367")]
	[Address(RVA = "0x81D988", Offset = "0x81D988", VA = "0x81D988")]
	private static void CarpetHeavyPadded(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000368")]
	[Address(RVA = "0x81E1C8", Offset = "0x81E1C8", VA = "0x81E1C8")]
	private static void CeramicTile(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000369")]
	[Address(RVA = "0x81E9F0", Offset = "0x81E9F0", VA = "0x81E9F0")]
	private static void Concrete(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x600036A")]
	[Address(RVA = "0x81F22C", Offset = "0x81F22C", VA = "0x81F22C")]
	private static void ConcreteRough(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x600036B")]
	[Address(RVA = "0x81FA74", Offset = "0x81FA74", VA = "0x81FA74")]
	private static void ConcreteBlock(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x600036C")]
	[Address(RVA = "0x8202BC", Offset = "0x8202BC", VA = "0x8202BC")]
	private static void ConcreteBlockPainted(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x600036D")]
	[Address(RVA = "0x820AFC", Offset = "0x820AFC", VA = "0x820AFC")]
	private static void Curtain(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x600036E")]
	[Address(RVA = "0x82133C", Offset = "0x82133C", VA = "0x82133C")]
	private static void Foliage(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x600036F")]
	[Address(RVA = "0x821B6C", Offset = "0x821B6C", VA = "0x821B6C")]
	private static void Glass(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000370")]
	[Address(RVA = "0x82237C", Offset = "0x82237C", VA = "0x82237C")]
	private static void GlassHeavy(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000371")]
	[Address(RVA = "0x822BA4", Offset = "0x822BA4", VA = "0x822BA4")]
	private static void Grass(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000372")]
	[Address(RVA = "0x8231A0", Offset = "0x8231A0", VA = "0x8231A0")]
	private static void Gravel(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000373")]
	[Address(RVA = "0x82379C", Offset = "0x82379C", VA = "0x82379C")]
	private static void GypsumBoard(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000374")]
	[Address(RVA = "0x823FE4", Offset = "0x823FE4", VA = "0x823FE4")]
	private static void PlasterOnBrick(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000375")]
	[Address(RVA = "0x824828", Offset = "0x824828", VA = "0x824828")]
	private static void PlasterOnConcreteBlock(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000376")]
	[Address(RVA = "0x825064", Offset = "0x825064", VA = "0x825064")]
	private static void Soil(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000377")]
	[Address(RVA = "0x82565C", Offset = "0x82565C", VA = "0x82565C")]
	private static void SoundProof(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000378")]
	[Address(RVA = "0x825874", Offset = "0x825874", VA = "0x825874")]
	private static void Snow(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000379")]
	[Address(RVA = "0x825E60", Offset = "0x825E60", VA = "0x825E60")]
	private static void Steel(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x600037A")]
	[Address(RVA = "0x82666C", Offset = "0x82666C", VA = "0x82666C")]
	private static void Water(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x600037B")]
	[Address(RVA = "0x826E8C", Offset = "0x826E8C", VA = "0x826E8C")]
	private static void WoodThin(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x600037C")]
	[Address(RVA = "0x8276A8", Offset = "0x8276A8", VA = "0x8276A8")]
	private static void WoodThick(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x600037D")]
	[Address(RVA = "0x827EC8", Offset = "0x827EC8", VA = "0x827EC8")]
	private static void WoodFloor(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x600037E")]
	[Address(RVA = "0x8286EC", Offset = "0x8286EC", VA = "0x8286EC")]
	private static void WoodOnConcrete(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x600037F")]
	[Address(RVA = "0x828F34", Offset = "0x828F34", VA = "0x828F34")]
	public ONSPPropagationMaterial()
	{
	}
}
[Token(Token = "0x20000D0")]
public class ONSPPropagationSettings : MonoBehaviour
{
	[Token(Token = "0x40002C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float quality;

	[Token(Token = "0x6000380")]
	[Address(RVA = "0x829738", Offset = "0x829738", VA = "0x829738")]
	private void Update()
	{
	}

	[Token(Token = "0x6000381")]
	[Address(RVA = "0x829834", Offset = "0x829834", VA = "0x829834")]
	public ONSPPropagationSettings()
	{
	}
}
[Token(Token = "0x20000D1")]
public sealed class ONSPSettings : ScriptableObject
{
	[Token(Token = "0x40002C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[SerializeField]
	public int voiceLimit;

	[Token(Token = "0x40002C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ONSPSettings instance;

	[Token(Token = "0x17000026")]
	public static ONSPSettings Instance
	{
		[Token(Token = "0x6000382")]
		[Address(RVA = "0x829F9C", Offset = "0x829F9C", VA = "0x829F9C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000383")]
	[Address(RVA = "0x82A110", Offset = "0x82A110", VA = "0x82A110")]
	public ONSPSettings()
	{
	}
}
[Token(Token = "0x20000D2")]
public class ONSPVersion : MonoBehaviour
{
	[Token(Token = "0x40002C4")]
	public const string strONSPS = "AudioPluginOculusSpatializer";

	[PreserveSig]
	[Token(Token = "0x6000384")]
	[Address(RVA = "0x82A120", Offset = "0x82A120", VA = "0x82A120")]
	private static extern void ONSP_GetVersion(ref int Major, ref int Minor, ref int Patch);

	[Token(Token = "0x6000385")]
	[Address(RVA = "0x82A248", Offset = "0x82A248", VA = "0x82A248")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000386")]
	[Address(RVA = "0x82A368", Offset = "0x82A368", VA = "0x82A368")]
	private void Start()
	{
	}

	[Token(Token = "0x6000387")]
	[Address(RVA = "0x82A36C", Offset = "0x82A36C", VA = "0x82A36C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000388")]
	[Address(RVA = "0x82A370", Offset = "0x82A370", VA = "0x82A370")]
	public ONSPVersion()
	{
	}
}
[Token(Token = "0x20000D3")]
public abstract class OVRComposition
{
	[Token(Token = "0x40002C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public bool cameraInTrackingSpace;

	[Token(Token = "0x40002C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public OVRCameraRig cameraRig;

	[Token(Token = "0x40002C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	protected bool usingLastAttachedNodePose;

	[Token(Token = "0x40002C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	protected OVRPose lastAttachedNodePose;

	[Token(Token = "0x6000389")]
	[Address(RVA = "0x5E1994", Offset = "0x5E1994", VA = "0x5E1994")]
	protected OVRComposition(GameObject parentObject, Camera mainCamera)
	{
	}

	[Token(Token = "0x600038A")]
	public abstract OVRManager.CompositionMethod CompositionMethod();

	[Token(Token = "0x600038B")]
	public abstract void Update(GameObject gameObject, Camera mainCamera);

	[Token(Token = "0x600038C")]
	public abstract void Cleanup();

	[Token(Token = "0x600038D")]
	[Address(RVA = "0x5E1C00", Offset = "0x5E1C00", VA = "0x5E1C00", Slot = "7")]
	public virtual void RecenterPose()
	{
	}

	[Token(Token = "0x600038E")]
	[Address(RVA = "0x5E19C4", Offset = "0x5E19C4", VA = "0x5E19C4")]
	public void RefreshCameraRig(GameObject parentObject, Camera mainCamera)
	{
	}

	[Token(Token = "0x600038F")]
	[Address(RVA = "0x5E1C04", Offset = "0x5E1C04", VA = "0x5E1C04")]
	public OVRPose ComputeCameraWorldSpacePose(OVRPlugin.CameraExtrinsics extrinsics)
	{
		return default(OVRPose);
	}

	[Token(Token = "0x6000390")]
	[Address(RVA = "0x5E1CA4", Offset = "0x5E1CA4", VA = "0x5E1CA4")]
	public OVRPose ComputeCameraTrackingSpacePose(OVRPlugin.CameraExtrinsics extrinsics)
	{
		return default(OVRPose);
	}
}
[Token(Token = "0x20000D4")]
internal class OVRCompositionUtil
{
	[Token(Token = "0x6000391")]
	[Address(RVA = "0x5E240C", Offset = "0x5E240C", VA = "0x5E240C")]
	public static void SafeDestroy(GameObject obj)
	{
	}

	[Token(Token = "0x6000392")]
	[Address(RVA = "0x5E24D0", Offset = "0x5E24D0", VA = "0x5E24D0")]
	public static void SafeDestroy(ref GameObject obj)
	{
	}

	[Token(Token = "0x6000393")]
	[Address(RVA = "0x5E2574", Offset = "0x5E2574", VA = "0x5E2574")]
	public static OVRPlugin.CameraDevice ConvertCameraDevice(OVRManager.CameraDevice cameraDevice)
	{
		return default(OVRPlugin.CameraDevice);
	}

	[Token(Token = "0x6000394")]
	[Address(RVA = "0x5E25A0", Offset = "0x5E25A0", VA = "0x5E25A0")]
	public static OVRBoundary.BoundaryType ToBoundaryType(OVRManager.VirtualGreenScreenType type)
	{
		return default(OVRBoundary.BoundaryType);
	}

	[Token(Token = "0x6000395")]
	[Address(RVA = "0x5E2650", Offset = "0x5E2650", VA = "0x5E2650")]
	public static Vector3 GetWorldPosition(Vector3 trackingSpacePosition)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000396")]
	[Address(RVA = "0x5E2718", Offset = "0x5E2718", VA = "0x5E2718")]
	public static float GetMaximumBoundaryDistance(Camera camera, OVRBoundary.BoundaryType boundaryType)
	{
		return default(float);
	}

	[Token(Token = "0x6000397")]
	[Address(RVA = "0x5E2A44", Offset = "0x5E2A44", VA = "0x5E2A44")]
	public static Mesh BuildBoundaryMesh(OVRBoundary.BoundaryType boundaryType, float topY, float bottomY)
	{
		return null;
	}

	[Token(Token = "0x6000398")]
	[Address(RVA = "0x5E3124", Offset = "0x5E3124", VA = "0x5E3124")]
	public OVRCompositionUtil()
	{
	}
}
[Token(Token = "0x20000D5")]
public class OVRExternalComposition : OVRComposition
{
	[Token(Token = "0x40002C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject previousMainCameraObject;

	[Token(Token = "0x40002CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public GameObject foregroundCameraGameObject;

	[Token(Token = "0x40002CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Camera foregroundCamera;

	[Token(Token = "0x40002CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public GameObject backgroundCameraGameObject;

	[Token(Token = "0x40002CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Camera backgroundCamera;

	[Token(Token = "0x40002CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public bool renderCombinedFrame;

	[Token(Token = "0x40002CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AudioListener audioListener;

	[Token(Token = "0x40002D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public OVRMRAudioFilter audioFilter;

	[Token(Token = "0x40002D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public RenderTexture[] mrcRenderTextureArray;

	[Token(Token = "0x40002D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public int frameIndex;

	[Token(Token = "0x40002D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public int lastMrcEncodeFrameSyncId;

	[Token(Token = "0x40002D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public RenderTexture[] mrcForegroundRenderTextureArray;

	[Token(Token = "0x40002D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public double[] cameraPoseTimeArray;

	[Token(Token = "0x40002D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float[] cachedAudioDataArray;

	[Token(Token = "0x40002D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private readonly object audioDataLock;

	[Token(Token = "0x40002D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private List<float> cachedAudioData;

	[Token(Token = "0x40002D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int cachedChannels;

	[Token(Token = "0x6000399")]
	[Address(RVA = "0x92B5D0", Offset = "0x92B5D0", VA = "0x92B5D0", Slot = "4")]
	public override OVRManager.CompositionMethod CompositionMethod()
	{
		return default(OVRManager.CompositionMethod);
	}

	[Token(Token = "0x600039A")]
	[Address(RVA = "0x92B5D8", Offset = "0x92B5D8", VA = "0x92B5D8")]
	public OVRExternalComposition(GameObject parentObject, Camera mainCamera)
	{
	}

	[Token(Token = "0x600039B")]
	[Address(RVA = "0x92BD00", Offset = "0x92BD00", VA = "0x92BD00")]
	private void RefreshCameraObjects(GameObject parentObject, Camera mainCamera)
	{
	}

	[Token(Token = "0x600039C")]
	[Address(RVA = "0x92CBE8", Offset = "0x92CBE8", VA = "0x92CBE8")]
	private void RefreshAudioFilter()
	{
	}

	[Token(Token = "0x600039D")]
	[Address(RVA = "0x92D6BC", Offset = "0x92D6BC", VA = "0x92D6BC")]
	private int CastMrcFrame(int castTextureIndex)
	{
		return default(int);
	}

	[Token(Token = "0x600039E")]
	[Address(RVA = "0x92DC0C", Offset = "0x92DC0C", VA = "0x92DC0C")]
	private void SetCameraTargetTexture(int drawTextureIndex)
	{
	}

	[Token(Token = "0x600039F")]
	[Address(RVA = "0x92DF08", Offset = "0x92DF08", VA = "0x92DF08", Slot = "5")]
	public override void Update(GameObject gameObject, Camera mainCamera)
	{
	}

	[Token(Token = "0x60003A0")]
	[Address(RVA = "0x92D4DC", Offset = "0x92D4DC", VA = "0x92D4DC")]
	private void CleanupAudioFilter()
	{
	}

	[Token(Token = "0x60003A1")]
	[Address(RVA = "0x92F4AC", Offset = "0x92F4AC", VA = "0x92F4AC", Slot = "6")]
	public override void Cleanup()
	{
	}

	[Token(Token = "0x60003A2")]
	[Address(RVA = "0x92F6F4", Offset = "0x92F6F4", VA = "0x92F6F4")]
	public void CacheAudioData(float[] data, int channels)
	{
	}

	[Token(Token = "0x60003A3")]
	[Address(RVA = "0x92DA10", Offset = "0x92DA10", VA = "0x92DA10")]
	public void GetAndResetAudioData(ref float[] audioData, out int audioFrames, out int channels)
	{
	}
}
[Token(Token = "0x20000D6")]
public class OVRMRAudioFilter : MonoBehaviour
{
	[Token(Token = "0x40002DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private bool running;

	[Token(Token = "0x40002DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public OVRExternalComposition composition;

	[Token(Token = "0x60003A4")]
	[Address(RVA = "0x948C00", Offset = "0x948C00", VA = "0x948C00")]
	private void Start()
	{
	}

	[Token(Token = "0x60003A5")]
	[Address(RVA = "0x948C0C", Offset = "0x948C0C", VA = "0x948C0C")]
	private void OnAudioFilterRead(float[] data, int channels)
	{
	}

	[Token(Token = "0x60003A6")]
	[Address(RVA = "0x948C28", Offset = "0x948C28", VA = "0x948C28")]
	public OVRMRAudioFilter()
	{
	}
}
[Token(Token = "0x20000D7")]
public class OVRSandwichComposition
{
	[Token(Token = "0x60003A7")]
	[Address(RVA = "0x9D1884", Offset = "0x9D1884", VA = "0x9D1884")]
	public OVRSandwichComposition()
	{
	}
}
[Token(Token = "0x20000D8")]
public class OVRBoundary
{
	[Token(Token = "0x2000411")]
	public enum Node
	{
		[Token(Token = "0x4001911")]
		HandLeft = 3,
		[Token(Token = "0x4001912")]
		HandRight = 4,
		[Token(Token = "0x4001913")]
		Head = 9
	}

	[Token(Token = "0x2000412")]
	public enum BoundaryType
	{
		[Token(Token = "0x4001915")]
		OuterBoundary = 1,
		[Token(Token = "0x4001916")]
		PlayArea = 0x100
	}

	[Token(Token = "0x2000413")]
	public struct BoundaryTestResult
	{
		[Token(Token = "0x4001917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool IsTriggering;

		[Token(Token = "0x4001918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float ClosestDistance;

		[Token(Token = "0x4001919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector3 ClosestPoint;

		[Token(Token = "0x400191A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector3 ClosestPointNormal;
	}

	[Token(Token = "0x40002DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int cachedVector3fSize;

	[Token(Token = "0x40002DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static OVRNativeBuffer cachedGeometryNativeBuffer;

	[Token(Token = "0x40002DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static float[] cachedGeometryManagedBuffer;

	[Token(Token = "0x40002DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private List<Vector3> cachedGeometryList;

	[Token(Token = "0x60003A8")]
	[Address(RVA = "0x5DD3E0", Offset = "0x5DD3E0", VA = "0x5DD3E0")]
	public bool GetConfigured()
	{
		return default(bool);
	}

	[Token(Token = "0x60003A9")]
	[Address(RVA = "0x5DD4B4", Offset = "0x5DD4B4", VA = "0x5DD4B4")]
	public BoundaryTestResult TestNode(Node node, BoundaryType boundaryType)
	{
		return default(BoundaryTestResult);
	}

	[Token(Token = "0x60003AA")]
	[Address(RVA = "0x5DD5AC", Offset = "0x5DD5AC", VA = "0x5DD5AC")]
	public BoundaryTestResult TestPoint(Vector3 point, BoundaryType boundaryType)
	{
		return default(BoundaryTestResult);
	}

	[Token(Token = "0x60003AB")]
	[Address(RVA = "0x5DD6BC", Offset = "0x5DD6BC", VA = "0x5DD6BC")]
	public Vector3[] GetGeometry(BoundaryType boundaryType)
	{
		return null;
	}

	[Token(Token = "0x60003AC")]
	[Address(RVA = "0x5DDD68", Offset = "0x5DDD68", VA = "0x5DDD68")]
	public Vector3 GetDimensions(BoundaryType boundaryType)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60003AD")]
	[Address(RVA = "0x5DDED8", Offset = "0x5DDED8", VA = "0x5DDED8")]
	public bool GetVisible()
	{
		return default(bool);
	}

	[Token(Token = "0x60003AE")]
	[Address(RVA = "0x5DDFAC", Offset = "0x5DDFAC", VA = "0x5DDFAC")]
	public void SetVisible(bool value)
	{
	}

	[Token(Token = "0x60003AF")]
	[Address(RVA = "0x5DE08C", Offset = "0x5DE08C", VA = "0x5DE08C")]
	public OVRBoundary()
	{
	}
}
[Token(Token = "0x20000D9")]
[ExecuteInEditMode]
public class OVRCameraRig : MonoBehaviour
{
	[Token(Token = "0x40002E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ED3A4", Offset = "0x2ED3A4")]
	private Transform <trackingSpace>k__BackingField;

	[Token(Token = "0x40002E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ED3B4", Offset = "0x2ED3B4")]
	private Transform <leftEyeAnchor>k__BackingField;

	[Token(Token = "0x40002E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ED3C4", Offset = "0x2ED3C4")]
	private Transform <centerEyeAnchor>k__BackingField;

	[Token(Token = "0x40002E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ED3D4", Offset = "0x2ED3D4")]
	private Transform <rightEyeAnchor>k__BackingField;

	[Token(Token = "0x40002E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ED3E4", Offset = "0x2ED3E4")]
	private Transform <leftHandAnchor>k__BackingField;

	[Token(Token = "0x40002E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ED3F4", Offset = "0x2ED3F4")]
	private Transform <rightHandAnchor>k__BackingField;

	[Token(Token = "0x40002E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ED404", Offset = "0x2ED404")]
	private Transform <leftControllerAnchor>k__BackingField;

	[Token(Token = "0x40002E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ED414", Offset = "0x2ED414")]
	private Transform <rightControllerAnchor>k__BackingField;

	[Token(Token = "0x40002E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ED424", Offset = "0x2ED424")]
	private Transform <trackerAnchor>k__BackingField;

	[Token(Token = "0x40002EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool usePerEyeCameras;

	[Token(Token = "0x40002EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	public bool useFixedUpdateForTracking;

	[Token(Token = "0x40002EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
	public bool disableEyeAnchorCameras;

	[Token(Token = "0x40002ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x37")]
	protected bool _skipUpdate;

	[Token(Token = "0x40002EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected readonly string trackingSpaceName;

	[Token(Token = "0x40002EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	protected readonly string trackerAnchorName;

	[Token(Token = "0x40002F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected readonly string leftEyeAnchorName;

	[Token(Token = "0x40002F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	protected readonly string centerEyeAnchorName;

	[Token(Token = "0x40002F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected readonly string rightEyeAnchorName;

	[Token(Token = "0x40002F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	protected readonly string leftHandAnchorName;

	[Token(Token = "0x40002F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected readonly string rightHandAnchorName;

	[Token(Token = "0x40002F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	protected readonly string leftControllerAnchorName;

	[Token(Token = "0x40002F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected readonly string rightControllerAnchorName;

	[Token(Token = "0x40002F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	protected Camera _centerEyeCamera;

	[Token(Token = "0x40002F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected Camera _leftEyeCamera;

	[Token(Token = "0x40002F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	protected Camera _rightEyeCamera;

	[Token(Token = "0x17000027")]
	public Camera leftEyeCamera
	{
		[Token(Token = "0x60003B1")]
		[Address(RVA = "0x5DE250", Offset = "0x5DE250", VA = "0x5DE250")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000028")]
	public Camera rightEyeCamera
	{
		[Token(Token = "0x60003B2")]
		[Address(RVA = "0x5DE268", Offset = "0x5DE268", VA = "0x5DE268")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000029")]
	public Transform trackingSpace
	{
		[Token(Token = "0x60003B3")]
		[Address(RVA = "0x5DE280", Offset = "0x5DE280", VA = "0x5DE280")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F92D4", Offset = "0x2F92D4")]
		get
		{
			return null;
		}
		[Token(Token = "0x60003B4")]
		[Address(RVA = "0x5DE288", Offset = "0x5DE288", VA = "0x5DE288")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F92E4", Offset = "0x2F92E4")]
		private set
		{
		}
	}

	[Token(Token = "0x1700002A")]
	public Transform leftEyeAnchor
	{
		[Token(Token = "0x60003B5")]
		[Address(RVA = "0x5DE290", Offset = "0x5DE290", VA = "0x5DE290")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F92F4", Offset = "0x2F92F4")]
		get
		{
			return null;
		}
		[Token(Token = "0x60003B6")]
		[Address(RVA = "0x5DE298", Offset = "0x5DE298", VA = "0x5DE298")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9304", Offset = "0x2F9304")]
		private set
		{
		}
	}

	[Token(Token = "0x1700002B")]
	public Transform centerEyeAnchor
	{
		[Token(Token = "0x60003B7")]
		[Address(RVA = "0x5DE2A0", Offset = "0x5DE2A0", VA = "0x5DE2A0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9314", Offset = "0x2F9314")]
		get
		{
			return null;
		}
		[Token(Token = "0x60003B8")]
		[Address(RVA = "0x5DE2A8", Offset = "0x5DE2A8", VA = "0x5DE2A8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9324", Offset = "0x2F9324")]
		private set
		{
		}
	}

	[Token(Token = "0x1700002C")]
	public Transform rightEyeAnchor
	{
		[Token(Token = "0x60003B9")]
		[Address(RVA = "0x5DE2B0", Offset = "0x5DE2B0", VA = "0x5DE2B0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9334", Offset = "0x2F9334")]
		get
		{
			return null;
		}
		[Token(Token = "0x60003BA")]
		[Address(RVA = "0x5DE2B8", Offset = "0x5DE2B8", VA = "0x5DE2B8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9344", Offset = "0x2F9344")]
		private set
		{
		}
	}

	[Token(Token = "0x1700002D")]
	public Transform leftHandAnchor
	{
		[Token(Token = "0x60003BB")]
		[Address(RVA = "0x5DE2C0", Offset = "0x5DE2C0", VA = "0x5DE2C0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9354", Offset = "0x2F9354")]
		get
		{
			return null;
		}
		[Token(Token = "0x60003BC")]
		[Address(RVA = "0x5DE2C8", Offset = "0x5DE2C8", VA = "0x5DE2C8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9364", Offset = "0x2F9364")]
		private set
		{
		}
	}

	[Token(Token = "0x1700002E")]
	public Transform rightHandAnchor
	{
		[Token(Token = "0x60003BD")]
		[Address(RVA = "0x5DE2D0", Offset = "0x5DE2D0", VA = "0x5DE2D0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9374", Offset = "0x2F9374")]
		get
		{
			return null;
		}
		[Token(Token = "0x60003BE")]
		[Address(RVA = "0x5DE2D8", Offset = "0x5DE2D8", VA = "0x5DE2D8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9384", Offset = "0x2F9384")]
		private set
		{
		}
	}

	[Token(Token = "0x1700002F")]
	public Transform leftControllerAnchor
	{
		[Token(Token = "0x60003BF")]
		[Address(RVA = "0x5DE2E0", Offset = "0x5DE2E0", VA = "0x5DE2E0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9394", Offset = "0x2F9394")]
		get
		{
			return null;
		}
		[Token(Token = "0x60003C0")]
		[Address(RVA = "0x5DE2E8", Offset = "0x5DE2E8", VA = "0x5DE2E8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F93A4", Offset = "0x2F93A4")]
		private set
		{
		}
	}

	[Token(Token = "0x17000030")]
	public Transform rightControllerAnchor
	{
		[Token(Token = "0x60003C1")]
		[Address(RVA = "0x5DE2F0", Offset = "0x5DE2F0", VA = "0x5DE2F0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F93B4", Offset = "0x2F93B4")]
		get
		{
			return null;
		}
		[Token(Token = "0x60003C2")]
		[Address(RVA = "0x5DE2F8", Offset = "0x5DE2F8", VA = "0x5DE2F8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F93C4", Offset = "0x2F93C4")]
		private set
		{
		}
	}

	[Token(Token = "0x17000031")]
	public Transform trackerAnchor
	{
		[Token(Token = "0x60003C3")]
		[Address(RVA = "0x5DE300", Offset = "0x5DE300", VA = "0x5DE300")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F93D4", Offset = "0x2F93D4")]
		get
		{
			return null;
		}
		[Token(Token = "0x60003C4")]
		[Address(RVA = "0x5DE308", Offset = "0x5DE308", VA = "0x5DE308")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F93E4", Offset = "0x2F93E4")]
		private set
		{
		}
	}

	[Token(Token = "0x14000006")]
	public event Action<OVRCameraRig> UpdatedAnchors
	{
		[Token(Token = "0x60003C5")]
		[Address(RVA = "0x5DE310", Offset = "0x5DE310", VA = "0x5DE310")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F93F4", Offset = "0x2F93F4")]
		add
		{
		}
		[Token(Token = "0x60003C6")]
		[Address(RVA = "0x5DE3C8", Offset = "0x5DE3C8", VA = "0x5DE3C8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9404", Offset = "0x2F9404")]
		remove
		{
		}
	}

	[Token(Token = "0x60003C7")]
	[Address(RVA = "0x5DE480", Offset = "0x5DE480", VA = "0x5DE480", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x60003C8")]
	[Address(RVA = "0x5DE498", Offset = "0x5DE498", VA = "0x5DE498", Slot = "5")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x60003C9")]
	[Address(RVA = "0x5DE54C", Offset = "0x5DE54C", VA = "0x5DE54C", Slot = "6")]
	protected virtual void FixedUpdate()
	{
	}

	[Token(Token = "0x60003CA")]
	[Address(RVA = "0x5DE570", Offset = "0x5DE570", VA = "0x5DE570", Slot = "7")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x60003CB")]
	[Address(RVA = "0x5DE59C", Offset = "0x5DE59C", VA = "0x5DE59C", Slot = "8")]
	protected virtual void OnDestroy()
	{
	}

	[Token(Token = "0x60003CC")]
	[Address(RVA = "0x5DE634", Offset = "0x5DE634", VA = "0x5DE634", Slot = "9")]
	protected virtual void UpdateAnchors(bool updateEyeAnchors, bool updateHandAnchors)
	{
	}

	[Token(Token = "0x60003CD")]
	[Address(RVA = "0x5DFF40", Offset = "0x5DFF40", VA = "0x5DFF40", Slot = "10")]
	protected virtual void OnBeforeRenderCallback()
	{
	}

	[Token(Token = "0x60003CE")]
	[Address(RVA = "0x5E00AC", Offset = "0x5E00AC", VA = "0x5E00AC", Slot = "11")]
	protected virtual void RaiseUpdatedAnchorsEvent()
	{
	}

	[Token(Token = "0x60003CF")]
	[Address(RVA = "0x5E011C", Offset = "0x5E011C", VA = "0x5E011C", Slot = "12")]
	public virtual void EnsureGameObjectIntegrity()
	{
	}

	[Token(Token = "0x60003D0")]
	[Address(RVA = "0x5E0DDC", Offset = "0x5E0DDC", VA = "0x5E0DDC", Slot = "13")]
	protected virtual Transform ConfigureAnchor(Transform root, string name)
	{
		return null;
	}

	[Token(Token = "0x60003D1")]
	[Address(RVA = "0x5E1134", Offset = "0x5E1134", VA = "0x5E1134", Slot = "14")]
	public virtual Matrix4x4 ComputeTrackReferenceMatrix()
	{
		return default(Matrix4x4);
	}

	[Token(Token = "0x60003D2")]
	[Address(RVA = "0x5E15E4", Offset = "0x5E15E4", VA = "0x5E15E4")]
	public OVRCameraRig()
	{
	}
}
[Token(Token = "0x20000DA")]
public static class OVRExtensions
{
	[Token(Token = "0x60003D3")]
	[Address(RVA = "0x5EDCD4", Offset = "0x5EDCD4", VA = "0x5EDCD4")]
	public static OVRPose ToTrackingSpacePose(this Transform transform, Camera camera)
	{
		return default(OVRPose);
	}

	[Token(Token = "0x60003D4")]
	[Address(RVA = "0x5E20CC", Offset = "0x5E20CC", VA = "0x5E20CC")]
	public static OVRPose ToWorldSpacePose(OVRPose trackingSpacePose)
	{
		return default(OVRPose);
	}

	[Token(Token = "0x60003D5")]
	[Address(RVA = "0x5EDEA8", Offset = "0x5EDEA8", VA = "0x5EDEA8")]
	public static OVRPose ToHeadSpacePose(this Transform transform, Camera camera)
	{
		return default(OVRPose);
	}

	[Token(Token = "0x60003D6")]
	[Address(RVA = "0x5EDF8C", Offset = "0x5EDF8C", VA = "0x5EDF8C")]
	public static OVRPose ToOVRPose(this Transform t, bool isLocal = false)
	{
		return default(OVRPose);
	}

	[Token(Token = "0x60003D7")]
	[Address(RVA = "0x5DFE18", Offset = "0x5DFE18", VA = "0x5DFE18")]
	public static void FromOVRPose(this Transform t, OVRPose pose, bool isLocal = false)
	{
	}

	[Token(Token = "0x60003D8")]
	[Address(RVA = "0x5E2374", Offset = "0x5E2374", VA = "0x5E2374")]
	public static OVRPose ToOVRPose(this OVRPlugin.Posef p)
	{
		return default(OVRPose);
	}

	[Token(Token = "0x60003D9")]
	[Address(RVA = "0x5EE058", Offset = "0x5EE058", VA = "0x5EE058")]
	public static OVRTracker.Frustum ToFrustum(this OVRPlugin.Frustumf f)
	{
		return default(OVRTracker.Frustum);
	}

	[Token(Token = "0x60003DA")]
	[Address(RVA = "0x5EE080", Offset = "0x5EE080", VA = "0x5EE080")]
	public static Color FromColorf(this OVRPlugin.Colorf c)
	{
		return default(Color);
	}

	[Token(Token = "0x60003DB")]
	[Address(RVA = "0x5EE08C", Offset = "0x5EE08C", VA = "0x5EE08C")]
	public static OVRPlugin.Colorf ToColorf(this Color c)
	{
		return default(OVRPlugin.Colorf);
	}

	[Token(Token = "0x60003DC")]
	[Address(RVA = "0x5DDED0", Offset = "0x5DDED0", VA = "0x5DDED0")]
	public static Vector3 FromVector3f(this OVRPlugin.Vector3f v)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60003DD")]
	[Address(RVA = "0x5EE098", Offset = "0x5EE098", VA = "0x5EE098")]
	public static Vector3 FromFlippedXVector3f(this OVRPlugin.Vector3f v)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60003DE")]
	[Address(RVA = "0x5DD5A0", Offset = "0x5DD5A0", VA = "0x5DD5A0")]
	public static Vector3 FromFlippedZVector3f(this OVRPlugin.Vector3f v)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60003DF")]
	[Address(RVA = "0x5EE0A4", Offset = "0x5EE0A4", VA = "0x5EE0A4")]
	public static OVRPlugin.Vector3f ToVector3f(this Vector3 v)
	{
		return default(OVRPlugin.Vector3f);
	}

	[Token(Token = "0x60003E0")]
	[Address(RVA = "0x5EE0AC", Offset = "0x5EE0AC", VA = "0x5EE0AC")]
	public static OVRPlugin.Vector3f ToFlippedXVector3f(this Vector3 v)
	{
		return default(OVRPlugin.Vector3f);
	}

	[Token(Token = "0x60003E1")]
	[Address(RVA = "0x5DD6B0", Offset = "0x5DD6B0", VA = "0x5DD6B0")]
	public static OVRPlugin.Vector3f ToFlippedZVector3f(this Vector3 v)
	{
		return default(OVRPlugin.Vector3f);
	}

	[Token(Token = "0x60003E2")]
	[Address(RVA = "0x5EE0B8", Offset = "0x5EE0B8", VA = "0x5EE0B8")]
	public static Quaternion FromQuatf(this OVRPlugin.Quatf q)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60003E3")]
	[Address(RVA = "0x5EE0C4", Offset = "0x5EE0C4", VA = "0x5EE0C4")]
	public static Quaternion FromFlippedXQuatf(this OVRPlugin.Quatf q)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60003E4")]
	[Address(RVA = "0x5EE0D8", Offset = "0x5EE0D8", VA = "0x5EE0D8")]
	public static Quaternion FromFlippedZQuatf(this OVRPlugin.Quatf q)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60003E5")]
	[Address(RVA = "0x5EE0EC", Offset = "0x5EE0EC", VA = "0x5EE0EC")]
	public static OVRPlugin.Quatf ToQuatf(this Quaternion q)
	{
		return default(OVRPlugin.Quatf);
	}

	[Token(Token = "0x60003E6")]
	[Address(RVA = "0x5EE0F8", Offset = "0x5EE0F8", VA = "0x5EE0F8")]
	public static OVRPlugin.Quatf ToFlippedXQuatf(this Quaternion q)
	{
		return default(OVRPlugin.Quatf);
	}

	[Token(Token = "0x60003E7")]
	[Address(RVA = "0x5EE10C", Offset = "0x5EE10C", VA = "0x5EE10C")]
	public static OVRPlugin.Quatf ToFlippedZQuatf(this Quaternion q)
	{
		return default(OVRPlugin.Quatf);
	}

	[Token(Token = "0x60003E8")]
	[Address(RVA = "0x5EE120", Offset = "0x5EE120", VA = "0x5EE120")]
	public static HmdMatrix34_t ConvertToHMDMatrix34(this Matrix4x4 m)
	{
		return default(HmdMatrix34_t);
	}

	[Token(Token = "0x60003E9")]
	[Address(RVA = "0x5EE30C", Offset = "0x5EE30C", VA = "0x5EE30C")]
	public static Transform FindChildRecursive(this Transform parent, string name)
	{
		return null;
	}
}
[Token(Token = "0x20000DB")]
public enum NodeStatePropertyType
{
	[Token(Token = "0x40002FB")]
	Acceleration,
	[Token(Token = "0x40002FC")]
	AngularAcceleration,
	[Token(Token = "0x40002FD")]
	Velocity,
	[Token(Token = "0x40002FE")]
	AngularVelocity,
	[Token(Token = "0x40002FF")]
	Position,
	[Token(Token = "0x4000300")]
	Orientation
}
[Token(Token = "0x20000DC")]
public static class OVRNodeStateProperties
{
	[Token(Token = "0x4000301")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<XRNodeState> nodeStateList;

	[Token(Token = "0x60003EA")]
	[Address(RVA = "0x7A7780", Offset = "0x7A7780", VA = "0x7A7780")]
	public static bool IsHmdPresent()
	{
		return default(bool);
	}

	[Token(Token = "0x60003EB")]
	[Address(RVA = "0x7A7980", Offset = "0x7A7980", VA = "0x7A7980")]
	public static bool GetNodeStatePropertyVector3(XRNode nodeType, NodeStatePropertyType propertyType, OVRPlugin.Node ovrpNodeType, OVRPlugin.Step stepType, out Vector3 retVec)
	{
		return default(bool);
	}

	[Token(Token = "0x60003EC")]
	[Address(RVA = "0x7A8B7C", Offset = "0x7A8B7C", VA = "0x7A8B7C")]
	public static bool GetNodeStatePropertyQuaternion(XRNode nodeType, NodeStatePropertyType propertyType, OVRPlugin.Node ovrpNodeType, OVRPlugin.Step stepType, out Quaternion retQuat)
	{
		return default(bool);
	}

	[Token(Token = "0x60003ED")]
	[Address(RVA = "0x7A8E80", Offset = "0x7A8E80", VA = "0x7A8E80")]
	private static bool ValidateProperty(XRNode nodeType, ref XRNodeState requestedNodeState)
	{
		return default(bool);
	}

	[Token(Token = "0x60003EE")]
	[Address(RVA = "0x7A816C", Offset = "0x7A816C", VA = "0x7A816C")]
	private static bool GetUnityXRNodeStateVector3(XRNode nodeType, NodeStatePropertyType propertyType, out Vector3 retVec)
	{
		return default(bool);
	}

	[Token(Token = "0x60003EF")]
	[Address(RVA = "0x7A8D54", Offset = "0x7A8D54", VA = "0x7A8D54")]
	private static bool GetUnityXRNodeStateQuaternion(XRNode nodeType, NodeStatePropertyType propertyType, out Quaternion retQuat)
	{
		return default(bool);
	}
}
[Serializable]
[Token(Token = "0x20000DD")]
public struct OVRPose
{
	[Token(Token = "0x4000302")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector3 position;

	[Token(Token = "0x4000303")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Quaternion orientation;

	[Token(Token = "0x17000032")]
	public static OVRPose identity
	{
		[Token(Token = "0x60003F1")]
		[Address(RVA = "0x9CE594", Offset = "0x9CE594", VA = "0x9CE594")]
		get
		{
			return default(OVRPose);
		}
	}

	[Token(Token = "0x60003F2")]
	[Address(RVA = "0x3AE9F4", Offset = "0x3AE9F4", VA = "0x3AE9F4", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x60003F3")]
	[Address(RVA = "0x3AE9FC", Offset = "0x3AE9FC", VA = "0x3AE9FC", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}

	[Token(Token = "0x60003F4")]
	[Address(RVA = "0x9CE760", Offset = "0x9CE760", VA = "0x9CE760")]
	public static bool operator ==(OVRPose x, OVRPose y)
	{
		return default(bool);
	}

	[Token(Token = "0x60003F5")]
	[Address(RVA = "0x9CE8CC", Offset = "0x9CE8CC", VA = "0x9CE8CC")]
	public static bool operator !=(OVRPose x, OVRPose y)
	{
		return default(bool);
	}

	[Token(Token = "0x60003F6")]
	[Address(RVA = "0x9CE930", Offset = "0x9CE930", VA = "0x9CE930")]
	public static OVRPose operator *(OVRPose lhs, OVRPose rhs)
	{
		return default(OVRPose);
	}

	[Token(Token = "0x60003F7")]
	[Address(RVA = "0x3AEA2C", Offset = "0x3AEA2C", VA = "0x3AEA2C")]
	public OVRPose Inverse()
	{
		return default(OVRPose);
	}

	[Token(Token = "0x60003F8")]
	[Address(RVA = "0x3AEA40", Offset = "0x3AEA40", VA = "0x3AEA40")]
	public OVRPose flipZ()
	{
		return default(OVRPose);
	}

	[Token(Token = "0x60003F9")]
	[Address(RVA = "0x3AEA88", Offset = "0x3AEA88", VA = "0x3AEA88")]
	public OVRPlugin.Posef ToPosef_Legacy()
	{
		return default(OVRPlugin.Posef);
	}

	[Token(Token = "0x60003FA")]
	[Address(RVA = "0x3AEA9C", Offset = "0x3AEA9C", VA = "0x3AEA9C")]
	public OVRPlugin.Posef ToPosef()
	{
		return default(OVRPlugin.Posef);
	}
}
[Token(Token = "0x20000DE")]
public class OVRNativeBuffer : IDisposable
{
	[Token(Token = "0x4000304")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private bool disposed;

	[Token(Token = "0x4000305")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private int m_numBytes;

	[Token(Token = "0x4000306")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr m_ptr;

	[Token(Token = "0x60003FB")]
	[Address(RVA = "0x7A4338", Offset = "0x7A4338", VA = "0x7A4338")]
	public OVRNativeBuffer(int numBytes)
	{
	}

	[Token(Token = "0x60003FC")]
	[Address(RVA = "0x7A4454", Offset = "0x7A4454", VA = "0x7A4454", Slot = "1")]
	~OVRNativeBuffer()
	{
	}

	[Token(Token = "0x60003FD")]
	[Address(RVA = "0x7A44FC", Offset = "0x7A44FC", VA = "0x7A44FC")]
	public void Reset(int numBytes)
	{
	}

	[Token(Token = "0x60003FE")]
	[Address(RVA = "0x7A4500", Offset = "0x7A4500", VA = "0x7A4500")]
	public int GetCapacity()
	{
		return default(int);
	}

	[Token(Token = "0x60003FF")]
	[Address(RVA = "0x7A4508", Offset = "0x7A4508", VA = "0x7A4508")]
	public IntPtr GetPointer(int byteOffset = 0)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6000400")]
	[Address(RVA = "0x7A45B0", Offset = "0x7A45B0", VA = "0x7A45B0", Slot = "4")]
	public void Dispose()
	{
	}

	[Token(Token = "0x6000401")]
	[Address(RVA = "0x7A44D0", Offset = "0x7A44D0", VA = "0x7A44D0")]
	private void Dispose(bool disposing)
	{
	}

	[Token(Token = "0x6000402")]
	[Address(RVA = "0x7A43A8", Offset = "0x7A43A8", VA = "0x7A43A8")]
	private void Reallocate(int numBytes)
	{
	}

	[Token(Token = "0x6000403")]
	[Address(RVA = "0x7A4650", Offset = "0x7A4650", VA = "0x7A4650")]
	private void Release()
	{
	}
}
[Token(Token = "0x20000DF")]
public class OVRDebugHeadController : MonoBehaviour
{
	[Token(Token = "0x4000307")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[SerializeField]
	public bool AllowPitchLook;

	[Token(Token = "0x4000308")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
	[SerializeField]
	public bool AllowYawLook;

	[Token(Token = "0x4000309")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
	[SerializeField]
	public bool InvertPitch;

	[Token(Token = "0x400030A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	public float GamePad_PitchDegreesPerSec;

	[Token(Token = "0x400030B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[SerializeField]
	public float GamePad_YawDegreesPerSec;

	[Token(Token = "0x400030C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public bool AllowMovement;

	[Token(Token = "0x400030D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	public float ForwardSpeed;

	[Token(Token = "0x400030E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	public float StrafeSpeed;

	[Token(Token = "0x400030F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	protected OVRCameraRig CameraRig;

	[Token(Token = "0x6000404")]
	[Address(RVA = "0x5E9CC4", Offset = "0x5E9CC4", VA = "0x5E9CC4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000405")]
	[Address(RVA = "0x5E9DF8", Offset = "0x5E9DF8", VA = "0x5E9DF8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000406")]
	[Address(RVA = "0x5E9DFC", Offset = "0x5E9DFC", VA = "0x5E9DFC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000407")]
	[Address(RVA = "0x5EA4D8", Offset = "0x5EA4D8", VA = "0x5EA4D8")]
	public OVRDebugHeadController()
	{
	}
}
[Token(Token = "0x20000E0")]
public class OVRDisplay
{
	[Token(Token = "0x2000414")]
	public struct EyeFov
	{
		[Token(Token = "0x400191B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float UpFov;

		[Token(Token = "0x400191C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float DownFov;

		[Token(Token = "0x400191D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float LeftFov;

		[Token(Token = "0x400191E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float RightFov;
	}

	[Token(Token = "0x2000415")]
	public struct EyeRenderDesc
	{
		[Token(Token = "0x400191F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector2 resolution;

		[Token(Token = "0x4001920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector2 fov;

		[Token(Token = "0x4001921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public EyeFov fullFov;
	}

	[Token(Token = "0x2000416")]
	public struct LatencyData
	{
		[Token(Token = "0x4001922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float render;

		[Token(Token = "0x4001923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float timeWarp;

		[Token(Token = "0x4001924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float postPresent;

		[Token(Token = "0x4001925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float renderError;

		[Token(Token = "0x4001926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float timeWarpError;
	}

	[Token(Token = "0x4000310")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private bool needsConfigureTexture;

	[Token(Token = "0x4000311")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private EyeRenderDesc[] eyeDescs;

	[Token(Token = "0x4000312")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool recenterRequested;

	[Token(Token = "0x4000313")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private int recenterRequestedFrameCount;

	[Token(Token = "0x4000314")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int localTrackingSpaceRecenterCount;

	[Token(Token = "0x17000033")]
	public Vector3 acceleration
	{
		[Token(Token = "0x600040D")]
		[Address(RVA = "0x5EC9B0", Offset = "0x5EC9B0", VA = "0x5EC9B0")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000034")]
	public Vector3 angularAcceleration
	{
		[Token(Token = "0x600040E")]
		[Address(RVA = "0x5ECB4C", Offset = "0x5ECB4C", VA = "0x5ECB4C")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000035")]
	public Vector3 velocity
	{
		[Token(Token = "0x600040F")]
		[Address(RVA = "0x5ECCE8", Offset = "0x5ECCE8", VA = "0x5ECCE8")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000036")]
	public Vector3 angularVelocity
	{
		[Token(Token = "0x6000410")]
		[Address(RVA = "0x5ECE84", Offset = "0x5ECE84", VA = "0x5ECE84")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000037")]
	public LatencyData latency
	{
		[Token(Token = "0x6000412")]
		[Address(RVA = "0x5ED020", Offset = "0x5ED020", VA = "0x5ED020")]
		get
		{
			return default(LatencyData);
		}
	}

	[Token(Token = "0x17000038")]
	public float appFramerate
	{
		[Token(Token = "0x6000413")]
		[Address(RVA = "0x5ED2EC", Offset = "0x5ED2EC", VA = "0x5ED2EC")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000039")]
	public int recommendedMSAALevel
	{
		[Token(Token = "0x6000414")]
		[Address(RVA = "0x5ED3A8", Offset = "0x5ED3A8", VA = "0x5ED3A8")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700003A")]
	public float[] displayFrequenciesAvailable
	{
		[Token(Token = "0x6000415")]
		[Address(RVA = "0x5ED42C", Offset = "0x5ED42C", VA = "0x5ED42C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700003B")]
	public float displayFrequency
	{
		[Token(Token = "0x6000416")]
		[Address(RVA = "0x5ED4A8", Offset = "0x5ED4A8", VA = "0x5ED4A8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000417")]
		[Address(RVA = "0x5ED524", Offset = "0x5ED524", VA = "0x5ED524")]
		set
		{
		}
	}

	[Token(Token = "0x14000007")]
	public event Action RecenteredPose
	{
		[Token(Token = "0x600040A")]
		[Address(RVA = "0x5EC7AC", Offset = "0x5EC7AC", VA = "0x5EC7AC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9574", Offset = "0x2F9574")]
		add
		{
		}
		[Token(Token = "0x600040B")]
		[Address(RVA = "0x5EC864", Offset = "0x5EC864", VA = "0x5EC864")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9584", Offset = "0x2F9584")]
		remove
		{
		}
	}

	[Token(Token = "0x6000408")]
	[Address(RVA = "0x5EC4F0", Offset = "0x5EC4F0", VA = "0x5EC4F0")]
	public OVRDisplay()
	{
	}

	[Token(Token = "0x6000409")]
	[Address(RVA = "0x5EC5A8", Offset = "0x5EC5A8", VA = "0x5EC5A8")]
	public void Update()
	{
	}

	[Token(Token = "0x600040C")]
	[Address(RVA = "0x5EC91C", Offset = "0x5EC91C", VA = "0x5EC91C")]
	public void RecenterPose()
	{
	}

	[Token(Token = "0x6000411")]
	[Address(RVA = "0x5EC478", Offset = "0x5EC478", VA = "0x5EC478")]
	public EyeRenderDesc GetEyeRenderDesc(XRNode eye)
	{
		return default(EyeRenderDesc);
	}

	[Token(Token = "0x6000418")]
	[Address(RVA = "0x5EC584", Offset = "0x5EC584", VA = "0x5EC584")]
	private void UpdateTextures()
	{
	}

	[Token(Token = "0x6000419")]
	[Address(RVA = "0x5ED5A8", Offset = "0x5ED5A8", VA = "0x5ED5A8")]
	private void ConfigureEyeDesc(XRNode eye)
	{
	}
}
[Token(Token = "0x20000E1")]
public static class OVRHaptics
{
	[Token(Token = "0x2000417")]
	public static class Config
	{
		[Token(Token = "0x4001927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F6454", Offset = "0x2F6454")]
		private static int <SampleRateHz>k__BackingField;

		[Token(Token = "0x4001928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F6464", Offset = "0x2F6464")]
		private static int <SampleSizeInBytes>k__BackingField;

		[Token(Token = "0x4001929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F6474", Offset = "0x2F6474")]
		private static int <MinimumSafeSamplesQueued>k__BackingField;

		[Token(Token = "0x400192A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F6484", Offset = "0x2F6484")]
		private static int <MinimumBufferSamplesCount>k__BackingField;

		[Token(Token = "0x400192B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F6494", Offset = "0x2F6494")]
		private static int <OptimalBufferSamplesCount>k__BackingField;

		[Token(Token = "0x400192C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F64A4", Offset = "0x2F64A4")]
		private static int <MaximumBufferSamplesCount>k__BackingField;

		[Token(Token = "0x1700037E")]
		public static int SampleRateHz
		{
			[Token(Token = "0x6001A63")]
			[Address(RVA = "0x93957C", Offset = "0x93957C", VA = "0x93957C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FCF60", Offset = "0x2FCF60")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001A64")]
			[Address(RVA = "0x939608", Offset = "0x939608", VA = "0x939608")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FCF70", Offset = "0x2FCF70")]
			private set
			{
			}
		}

		[Token(Token = "0x1700037F")]
		public static int SampleSizeInBytes
		{
			[Token(Token = "0x6001A65")]
			[Address(RVA = "0x939698", Offset = "0x939698", VA = "0x939698")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FCF80", Offset = "0x2FCF80")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001A66")]
			[Address(RVA = "0x939724", Offset = "0x939724", VA = "0x939724")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FCF90", Offset = "0x2FCF90")]
			private set
			{
			}
		}

		[Token(Token = "0x17000380")]
		public static int MinimumSafeSamplesQueued
		{
			[Token(Token = "0x6001A67")]
			[Address(RVA = "0x9397B4", Offset = "0x9397B4", VA = "0x9397B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FCFA0", Offset = "0x2FCFA0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001A68")]
			[Address(RVA = "0x939840", Offset = "0x939840", VA = "0x939840")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FCFB0", Offset = "0x2FCFB0")]
			private set
			{
			}
		}

		[Token(Token = "0x17000381")]
		public static int MinimumBufferSamplesCount
		{
			[Token(Token = "0x6001A69")]
			[Address(RVA = "0x9398D0", Offset = "0x9398D0", VA = "0x9398D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FCFC0", Offset = "0x2FCFC0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001A6A")]
			[Address(RVA = "0x93995C", Offset = "0x93995C", VA = "0x93995C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FCFD0", Offset = "0x2FCFD0")]
			private set
			{
			}
		}

		[Token(Token = "0x17000382")]
		public static int OptimalBufferSamplesCount
		{
			[Token(Token = "0x6001A6B")]
			[Address(RVA = "0x9399EC", Offset = "0x9399EC", VA = "0x9399EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FCFE0", Offset = "0x2FCFE0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001A6C")]
			[Address(RVA = "0x939A78", Offset = "0x939A78", VA = "0x939A78")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FCFF0", Offset = "0x2FCFF0")]
			private set
			{
			}
		}

		[Token(Token = "0x17000383")]
		public static int MaximumBufferSamplesCount
		{
			[Token(Token = "0x6001A6D")]
			[Address(RVA = "0x939B08", Offset = "0x939B08", VA = "0x939B08")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FD000", Offset = "0x2FD000")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001A6E")]
			[Address(RVA = "0x939B94", Offset = "0x939B94", VA = "0x939B94")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FD010", Offset = "0x2FD010")]
			private set
			{
			}
		}

		[Token(Token = "0x6001A6F")]
		[Address(RVA = "0x939C24", Offset = "0x939C24", VA = "0x939C24")]
		static Config()
		{
		}

		[Token(Token = "0x6001A70")]
		[Address(RVA = "0x937E60", Offset = "0x937E60", VA = "0x937E60")]
		public static void Load()
		{
		}
	}

	[Token(Token = "0x2000418")]
	public class OVRHapticsChannel
	{
		[Token(Token = "0x400192D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private OVRHapticsOutput m_output;

		[Token(Token = "0x6001A71")]
		[Address(RVA = "0x938424", Offset = "0x938424", VA = "0x938424")]
		public OVRHapticsChannel(uint outputIndex)
		{
		}

		[Token(Token = "0x6001A72")]
		[Address(RVA = "0x939C28", Offset = "0x939C28", VA = "0x939C28")]
		public void Preempt(OVRHapticsClip clip)
		{
		}

		[Token(Token = "0x6001A73")]
		[Address(RVA = "0x939D28", Offset = "0x939D28", VA = "0x939D28")]
		public void Queue(OVRHapticsClip clip)
		{
		}

		[Token(Token = "0x6001A74")]
		[Address(RVA = "0x939DFC", Offset = "0x939DFC", VA = "0x939DFC")]
		public void Mix(OVRHapticsClip clip)
		{
		}

		[Token(Token = "0x6001A75")]
		[Address(RVA = "0x93A4F8", Offset = "0x93A4F8", VA = "0x93A4F8")]
		public void Clear()
		{
		}
	}

	[Token(Token = "0x2000419")]
	private class OVRHapticsOutput
	{
		[Token(Token = "0x2000783")]
		private class ClipPlaybackTracker
		{
			[Token(Token = "0x4002204")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F8A2C", Offset = "0x2F8A2C")]
			private int <ReadCount>k__BackingField;

			[Token(Token = "0x4002205")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F8A3C", Offset = "0x2F8A3C")]
			private OVRHapticsClip <Clip>k__BackingField;

			[Token(Token = "0x1700040F")]
			public int ReadCount
			{
				[Token(Token = "0x60024B2")]
				[Address(RVA = "0x93AA88", Offset = "0x93AA88", VA = "0x93AA88")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FDDD0", Offset = "0x2FDDD0")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x60024B3")]
				[Address(RVA = "0x93AA90", Offset = "0x93AA90", VA = "0x93AA90")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FDDE0", Offset = "0x2FDDE0")]
				set
				{
				}
			}

			[Token(Token = "0x17000410")]
			public OVRHapticsClip Clip
			{
				[Token(Token = "0x60024B4")]
				[Address(RVA = "0x93AA98", Offset = "0x93AA98", VA = "0x93AA98")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FDDF0", Offset = "0x2FDDF0")]
				get
				{
					return null;
				}
				[Token(Token = "0x60024B5")]
				[Address(RVA = "0x93AAA0", Offset = "0x93AAA0", VA = "0x93AAA0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FDE00", Offset = "0x2FDE00")]
				set
				{
				}
			}

			[Token(Token = "0x60024B6")]
			[Address(RVA = "0x93A734", Offset = "0x93A734", VA = "0x93A734")]
			public ClipPlaybackTracker(OVRHapticsClip clip)
			{
			}
		}

		[Token(Token = "0x400192E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private bool m_lowLatencyMode;

		[Token(Token = "0x400192F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		private bool m_paddingEnabled;

		[Token(Token = "0x4001930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private int m_prevSamplesQueued;

		[Token(Token = "0x4001931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float m_prevSamplesQueuedTime;

		[Token(Token = "0x4001932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int m_numPredictionHits;

		[Token(Token = "0x4001933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int m_numPredictionMisses;

		[Token(Token = "0x4001934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int m_numUnderruns;

		[Token(Token = "0x4001935")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<ClipPlaybackTracker> m_pendingClips;

		[Token(Token = "0x4001936")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private uint m_controller;

		[Token(Token = "0x4001937")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private OVRNativeBuffer m_nativeBuffer;

		[Token(Token = "0x4001938")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private OVRHapticsClip m_paddingClip;

		[Token(Token = "0x6001A76")]
		[Address(RVA = "0x938214", Offset = "0x938214", VA = "0x938214")]
		public OVRHapticsOutput(uint controller)
		{
		}

		[Token(Token = "0x6001A77")]
		[Address(RVA = "0x938670", Offset = "0x938670", VA = "0x938670")]
		public void Process()
		{
		}

		[Token(Token = "0x6001A78")]
		[Address(RVA = "0x939C58", Offset = "0x939C58", VA = "0x939C58")]
		public void Preempt(OVRHapticsClip clip)
		{
		}

		[Token(Token = "0x6001A79")]
		[Address(RVA = "0x939D58", Offset = "0x939D58", VA = "0x939D58")]
		public void Queue(OVRHapticsClip clip)
		{
		}

		[Token(Token = "0x6001A7A")]
		[Address(RVA = "0x939E2C", Offset = "0x939E2C", VA = "0x939E2C")]
		public void Mix(OVRHapticsClip clip)
		{
		}

		[Token(Token = "0x6001A7B")]
		[Address(RVA = "0x93A520", Offset = "0x93A520", VA = "0x93A520")]
		public void Clear()
		{
		}
	}

	[Token(Token = "0x4000316")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly OVRHapticsChannel[] Channels;

	[Token(Token = "0x4000317")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static readonly OVRHapticsChannel LeftChannel;

	[Token(Token = "0x4000318")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static readonly OVRHapticsChannel RightChannel;

	[Token(Token = "0x4000319")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static readonly OVRHapticsOutput[] m_outputs;

	[Token(Token = "0x600041A")]
	[Address(RVA = "0x937B7C", Offset = "0x937B7C", VA = "0x937B7C")]
	static OVRHaptics()
	{
	}

	[Token(Token = "0x600041B")]
	[Address(RVA = "0x9384FC", Offset = "0x9384FC", VA = "0x9384FC")]
	public static void Process()
	{
	}
}
[Token(Token = "0x20000E2")]
public class OVRHapticsClip
{
	[Token(Token = "0x400031A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ED4D4", Offset = "0x2ED4D4")]
	private int <Count>k__BackingField;

	[Token(Token = "0x400031B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ED4E4", Offset = "0x2ED4E4")]
	private int <Capacity>k__BackingField;

	[Token(Token = "0x400031C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ED4F4", Offset = "0x2ED4F4")]
	private byte[] <Samples>k__BackingField;

	[Token(Token = "0x1700003C")]
	public int Count
	{
		[Token(Token = "0x600041C")]
		[Address(RVA = "0x93AAA8", Offset = "0x93AAA8", VA = "0x93AAA8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9594", Offset = "0x2F9594")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600041D")]
		[Address(RVA = "0x93AAB0", Offset = "0x93AAB0", VA = "0x93AAB0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F95A4", Offset = "0x2F95A4")]
		private set
		{
		}
	}

	[Token(Token = "0x1700003D")]
	public int Capacity
	{
		[Token(Token = "0x600041E")]
		[Address(RVA = "0x93AAB8", Offset = "0x93AAB8", VA = "0x93AAB8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F95B4", Offset = "0x2F95B4")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600041F")]
		[Address(RVA = "0x93AAC0", Offset = "0x93AAC0", VA = "0x93AAC0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F95C4", Offset = "0x2F95C4")]
		private set
		{
		}
	}

	[Token(Token = "0x1700003E")]
	public byte[] Samples
	{
		[Token(Token = "0x6000420")]
		[Address(RVA = "0x93AAC8", Offset = "0x93AAC8", VA = "0x93AAC8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F95D4", Offset = "0x2F95D4")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000421")]
		[Address(RVA = "0x93AAD0", Offset = "0x93AAD0", VA = "0x93AAD0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F95E4", Offset = "0x2F95E4")]
		private set
		{
		}
	}

	[Token(Token = "0x6000422")]
	[Address(RVA = "0x93A598", Offset = "0x93A598", VA = "0x93A598")]
	public OVRHapticsClip()
	{
	}

	[Token(Token = "0x6000423")]
	[Address(RVA = "0x93A754", Offset = "0x93A754", VA = "0x93A754")]
	public OVRHapticsClip(int capacity)
	{
	}

	[Token(Token = "0x6000424")]
	[Address(RVA = "0x93AAD8", Offset = "0x93AAD8", VA = "0x93AAD8")]
	public OVRHapticsClip(byte[] samples, int samplesCount)
	{
	}

	[Token(Token = "0x6000425")]
	[Address(RVA = "0x93AC0C", Offset = "0x93AC0C", VA = "0x93AC0C")]
	public OVRHapticsClip(OVRHapticsClip a, OVRHapticsClip b)
	{
	}

	[Token(Token = "0x6000426")]
	[Address(RVA = "0x93AFC4", Offset = "0x93AFC4", VA = "0x93AFC4")]
	public OVRHapticsClip(AudioClip audioClip, int channel = 0)
	{
	}

	[Token(Token = "0x6000427")]
	[Address(RVA = "0x93A894", Offset = "0x93A894", VA = "0x93A894")]
	public void WriteSample(byte sample)
	{
	}

	[Token(Token = "0x6000428")]
	[Address(RVA = "0x93B538", Offset = "0x93B538", VA = "0x93B538")]
	public void Reset()
	{
	}

	[Token(Token = "0x6000429")]
	[Address(RVA = "0x93B128", Offset = "0x93B128", VA = "0x93B128")]
	private void InitializeFromAudioFloatTrack(float[] sourceData, double sourceFrequency, int sourceChannelCount, int sourceChannel)
	{
	}
}
[Token(Token = "0x20000E3")]
public class OVRHeadsetEmulator : MonoBehaviour
{
	[Token(Token = "0x200041A")]
	public enum OpMode
	{
		[Token(Token = "0x400193A")]
		Off,
		[Token(Token = "0x400193B")]
		EditorOnly,
		[Token(Token = "0x400193C")]
		AlwaysOn
	}

	[Token(Token = "0x400031D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public OpMode opMode;

	[Token(Token = "0x400031E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool resetHmdPoseOnRelease;

	[Token(Token = "0x400031F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	public bool resetHmdPoseByMiddleMouseButton;

	[Token(Token = "0x4000320")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public KeyCode[] activateKeys;

	[Token(Token = "0x4000321")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public KeyCode[] pitchKeys;

	[Token(Token = "0x4000322")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private OVRManager manager;

	[Token(Token = "0x4000323")]
	private const float MOUSE_SCALE_X = -2f;

	[Token(Token = "0x4000324")]
	private const float MOUSE_SCALE_X_PITCH = -2f;

	[Token(Token = "0x4000325")]
	private const float MOUSE_SCALE_Y = 2f;

	[Token(Token = "0x4000326")]
	private const float MOUSE_SCALE_HEIGHT = 1f;

	[Token(Token = "0x4000327")]
	private const float MAX_ROLL = 85f;

	[Token(Token = "0x4000328")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool lastFrameEmulationActivated;

	[Token(Token = "0x4000329")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 recordedHeadPoseRelativeOffsetTranslation;

	[Token(Token = "0x400032A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3 recordedHeadPoseRelativeOffsetRotation;

	[Token(Token = "0x400032B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private bool hasSentEvent;

	[Token(Token = "0x400032C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	private bool emulatorHasInitialized;

	[Token(Token = "0x400032D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private CursorLockMode previousCursorLockMode;

	[Token(Token = "0x600042A")]
	[Address(RVA = "0x93B544", Offset = "0x93B544", VA = "0x93B544")]
	private void Start()
	{
	}

	[Token(Token = "0x600042B")]
	[Address(RVA = "0x93B548", Offset = "0x93B548", VA = "0x93B548")]
	private void Update()
	{
	}

	[Token(Token = "0x600042C")]
	[Address(RVA = "0x93BB38", Offset = "0x93BB38", VA = "0x93BB38")]
	private bool IsEmulationActivated()
	{
		return default(bool);
	}

	[Token(Token = "0x600042D")]
	[Address(RVA = "0x93BEE8", Offset = "0x93BEE8", VA = "0x93BEE8")]
	private bool IsTweakingPitch()
	{
		return default(bool);
	}

	[Token(Token = "0x600042E")]
	[Address(RVA = "0x93BF70", Offset = "0x93BF70", VA = "0x93BF70")]
	public OVRHeadsetEmulator()
	{
	}
}
[Token(Token = "0x20000E4")]
public static class OVRInput
{
	[Token(Token = "0x200041B")]
	[Flags]
	public enum Button
	{
		[Token(Token = "0x400193E")]
		None = 0,
		[Token(Token = "0x400193F")]
		One = 1,
		[Token(Token = "0x4001940")]
		Two = 2,
		[Token(Token = "0x4001941")]
		Three = 4,
		[Token(Token = "0x4001942")]
		Four = 8,
		[Token(Token = "0x4001943")]
		Start = 0x100,
		[Token(Token = "0x4001944")]
		Back = 0x200,
		[Token(Token = "0x4001945")]
		PrimaryShoulder = 0x1000,
		[Token(Token = "0x4001946")]
		PrimaryIndexTrigger = 0x2000,
		[Token(Token = "0x4001947")]
		PrimaryHandTrigger = 0x4000,
		[Token(Token = "0x4001948")]
		PrimaryThumbstick = 0x8000,
		[Token(Token = "0x4001949")]
		PrimaryThumbstickUp = 0x10000,
		[Token(Token = "0x400194A")]
		PrimaryThumbstickDown = 0x20000,
		[Token(Token = "0x400194B")]
		PrimaryThumbstickLeft = 0x40000,
		[Token(Token = "0x400194C")]
		PrimaryThumbstickRight = 0x80000,
		[Token(Token = "0x400194D")]
		PrimaryTouchpad = 0x400,
		[Token(Token = "0x400194E")]
		SecondaryShoulder = 0x100000,
		[Token(Token = "0x400194F")]
		SecondaryIndexTrigger = 0x200000,
		[Token(Token = "0x4001950")]
		SecondaryHandTrigger = 0x400000,
		[Token(Token = "0x4001951")]
		SecondaryThumbstick = 0x800000,
		[Token(Token = "0x4001952")]
		SecondaryThumbstickUp = 0x1000000,
		[Token(Token = "0x4001953")]
		SecondaryThumbstickDown = 0x2000000,
		[Token(Token = "0x4001954")]
		SecondaryThumbstickLeft = 0x4000000,
		[Token(Token = "0x4001955")]
		SecondaryThumbstickRight = 0x8000000,
		[Token(Token = "0x4001956")]
		SecondaryTouchpad = 0x800,
		[Token(Token = "0x4001957")]
		DpadUp = 0x10,
		[Token(Token = "0x4001958")]
		DpadDown = 0x20,
		[Token(Token = "0x4001959")]
		DpadLeft = 0x40,
		[Token(Token = "0x400195A")]
		DpadRight = 0x80,
		[Token(Token = "0x400195B")]
		Up = 0x10000000,
		[Token(Token = "0x400195C")]
		Down = 0x20000000,
		[Token(Token = "0x400195D")]
		Left = 0x40000000,
		[Token(Token = "0x400195E")]
		Right = int.MinValue,
		[Token(Token = "0x400195F")]
		Any = -1
	}

	[Token(Token = "0x200041C")]
	[Flags]
	public enum RawButton
	{
		[Token(Token = "0x4001961")]
		None = 0,
		[Token(Token = "0x4001962")]
		A = 1,
		[Token(Token = "0x4001963")]
		B = 2,
		[Token(Token = "0x4001964")]
		X = 0x100,
		[Token(Token = "0x4001965")]
		Y = 0x200,
		[Token(Token = "0x4001966")]
		Start = 0x100000,
		[Token(Token = "0x4001967")]
		Back = 0x200000,
		[Token(Token = "0x4001968")]
		LShoulder = 0x800,
		[Token(Token = "0x4001969")]
		LIndexTrigger = 0x10000000,
		[Token(Token = "0x400196A")]
		LHandTrigger = 0x20000000,
		[Token(Token = "0x400196B")]
		LThumbstick = 0x400,
		[Token(Token = "0x400196C")]
		LThumbstickUp = 0x10,
		[Token(Token = "0x400196D")]
		LThumbstickDown = 0x20,
		[Token(Token = "0x400196E")]
		LThumbstickLeft = 0x40,
		[Token(Token = "0x400196F")]
		LThumbstickRight = 0x80,
		[Token(Token = "0x4001970")]
		LTouchpad = 0x40000000,
		[Token(Token = "0x4001971")]
		RShoulder = 8,
		[Token(Token = "0x4001972")]
		RIndexTrigger = 0x4000000,
		[Token(Token = "0x4001973")]
		RHandTrigger = 0x8000000,
		[Token(Token = "0x4001974")]
		RThumbstick = 4,
		[Token(Token = "0x4001975")]
		RThumbstickUp = 0x1000,
		[Token(Token = "0x4001976")]
		RThumbstickDown = 0x2000,
		[Token(Token = "0x4001977")]
		RThumbstickLeft = 0x4000,
		[Token(Token = "0x4001978")]
		RThumbstickRight = 0x8000,
		[Token(Token = "0x4001979")]
		RTouchpad = int.MinValue,
		[Token(Token = "0x400197A")]
		DpadUp = 0x10000,
		[Token(Token = "0x400197B")]
		DpadDown = 0x20000,
		[Token(Token = "0x400197C")]
		DpadLeft = 0x40000,
		[Token(Token = "0x400197D")]
		DpadRight = 0x80000,
		[Token(Token = "0x400197E")]
		Any = -1
	}

	[Token(Token = "0x200041D")]
	[Flags]
	public enum Touch
	{
		[Token(Token = "0x4001980")]
		None = 0,
		[Token(Token = "0x4001981")]
		One = 1,
		[Token(Token = "0x4001982")]
		Two = 2,
		[Token(Token = "0x4001983")]
		Three = 4,
		[Token(Token = "0x4001984")]
		Four = 8,
		[Token(Token = "0x4001985")]
		PrimaryIndexTrigger = 0x2000,
		[Token(Token = "0x4001986")]
		PrimaryThumbstick = 0x8000,
		[Token(Token = "0x4001987")]
		PrimaryThumbRest = 0x1000,
		[Token(Token = "0x4001988")]
		PrimaryTouchpad = 0x400,
		[Token(Token = "0x4001989")]
		SecondaryIndexTrigger = 0x200000,
		[Token(Token = "0x400198A")]
		SecondaryThumbstick = 0x800000,
		[Token(Token = "0x400198B")]
		SecondaryThumbRest = 0x100000,
		[Token(Token = "0x400198C")]
		SecondaryTouchpad = 0x800,
		[Token(Token = "0x400198D")]
		Any = -1
	}

	[Token(Token = "0x200041E")]
	[Flags]
	public enum RawTouch
	{
		[Token(Token = "0x400198F")]
		None = 0,
		[Token(Token = "0x4001990")]
		A = 1,
		[Token(Token = "0x4001991")]
		B = 2,
		[Token(Token = "0x4001992")]
		X = 0x100,
		[Token(Token = "0x4001993")]
		Y = 0x200,
		[Token(Token = "0x4001994")]
		LIndexTrigger = 0x1000,
		[Token(Token = "0x4001995")]
		LThumbstick = 0x400,
		[Token(Token = "0x4001996")]
		LThumbRest = 0x800,
		[Token(Token = "0x4001997")]
		LTouchpad = 0x40000000,
		[Token(Token = "0x4001998")]
		RIndexTrigger = 0x10,
		[Token(Token = "0x4001999")]
		RThumbstick = 4,
		[Token(Token = "0x400199A")]
		RThumbRest = 8,
		[Token(Token = "0x400199B")]
		RTouchpad = int.MinValue,
		[Token(Token = "0x400199C")]
		Any = -1
	}

	[Token(Token = "0x200041F")]
	[Flags]
	public enum NearTouch
	{
		[Token(Token = "0x400199E")]
		None = 0,
		[Token(Token = "0x400199F")]
		PrimaryIndexTrigger = 1,
		[Token(Token = "0x40019A0")]
		PrimaryThumbButtons = 2,
		[Token(Token = "0x40019A1")]
		SecondaryIndexTrigger = 4,
		[Token(Token = "0x40019A2")]
		SecondaryThumbButtons = 8,
		[Token(Token = "0x40019A3")]
		Any = -1
	}

	[Token(Token = "0x2000420")]
	[Flags]
	public enum RawNearTouch
	{
		[Token(Token = "0x40019A5")]
		None = 0,
		[Token(Token = "0x40019A6")]
		LIndexTrigger = 1,
		[Token(Token = "0x40019A7")]
		LThumbButtons = 2,
		[Token(Token = "0x40019A8")]
		RIndexTrigger = 4,
		[Token(Token = "0x40019A9")]
		RThumbButtons = 8,
		[Token(Token = "0x40019AA")]
		Any = -1
	}

	[Token(Token = "0x2000421")]
	[Flags]
	public enum Axis1D
	{
		[Token(Token = "0x40019AC")]
		None = 0,
		[Token(Token = "0x40019AD")]
		PrimaryIndexTrigger = 1,
		[Token(Token = "0x40019AE")]
		PrimaryHandTrigger = 4,
		[Token(Token = "0x40019AF")]
		SecondaryIndexTrigger = 2,
		[Token(Token = "0x40019B0")]
		SecondaryHandTrigger = 8,
		[Token(Token = "0x40019B1")]
		Any = -1
	}

	[Token(Token = "0x2000422")]
	[Flags]
	public enum RawAxis1D
	{
		[Token(Token = "0x40019B3")]
		None = 0,
		[Token(Token = "0x40019B4")]
		LIndexTrigger = 1,
		[Token(Token = "0x40019B5")]
		LHandTrigger = 4,
		[Token(Token = "0x40019B6")]
		RIndexTrigger = 2,
		[Token(Token = "0x40019B7")]
		RHandTrigger = 8,
		[Token(Token = "0x40019B8")]
		Any = -1
	}

	[Token(Token = "0x2000423")]
	[Flags]
	public enum Axis2D
	{
		[Token(Token = "0x40019BA")]
		None = 0,
		[Token(Token = "0x40019BB")]
		PrimaryThumbstick = 1,
		[Token(Token = "0x40019BC")]
		PrimaryTouchpad = 4,
		[Token(Token = "0x40019BD")]
		SecondaryThumbstick = 2,
		[Token(Token = "0x40019BE")]
		SecondaryTouchpad = 8,
		[Token(Token = "0x40019BF")]
		Any = -1
	}

	[Token(Token = "0x2000424")]
	[Flags]
	public enum RawAxis2D
	{
		[Token(Token = "0x40019C1")]
		None = 0,
		[Token(Token = "0x40019C2")]
		LThumbstick = 1,
		[Token(Token = "0x40019C3")]
		LTouchpad = 4,
		[Token(Token = "0x40019C4")]
		RThumbstick = 2,
		[Token(Token = "0x40019C5")]
		RTouchpad = 8,
		[Token(Token = "0x40019C6")]
		Any = -1
	}

	[Token(Token = "0x2000425")]
	[Flags]
	public enum OpenVRButton : ulong
	{
		[Token(Token = "0x40019C8")]
		None = 0uL,
		[Token(Token = "0x40019C9")]
		Two = 2uL,
		[Token(Token = "0x40019CA")]
		Thumbstick = 0x100000000uL,
		[Token(Token = "0x40019CB")]
		Grip = 4uL
	}

	[Token(Token = "0x2000426")]
	[Flags]
	public enum Controller
	{
		[Token(Token = "0x40019CD")]
		None = 0,
		[Token(Token = "0x40019CE")]
		LTouch = 1,
		[Token(Token = "0x40019CF")]
		RTouch = 2,
		[Token(Token = "0x40019D0")]
		Touch = 3,
		[Token(Token = "0x40019D1")]
		Remote = 4,
		[Token(Token = "0x40019D2")]
		Gamepad = 0x10,
		[Token(Token = "0x40019D3")]
		Hands = 0x60,
		[Token(Token = "0x40019D4")]
		LHand = 0x20,
		[Token(Token = "0x40019D5")]
		RHand = 0x40,
		[Token(Token = "0x40019D6")]
		Active = int.MinValue,
		[Token(Token = "0x40019D7")]
		All = -1
	}

	[Token(Token = "0x2000427")]
	public enum Handedness
	{
		[Token(Token = "0x40019D9")]
		Unsupported,
		[Token(Token = "0x40019DA")]
		LeftHanded,
		[Token(Token = "0x40019DB")]
		RightHanded
	}

	[Token(Token = "0x2000428")]
	[Flags]
	public enum OpenVRController : ulong
	{
		[Token(Token = "0x40019DD")]
		Unknown = 0uL,
		[Token(Token = "0x40019DE")]
		OculusTouch = 1uL,
		[Token(Token = "0x40019DF")]
		ViveController = 2uL,
		[Token(Token = "0x40019E0")]
		WindowsMRController = 3uL
	}

	[Token(Token = "0x2000429")]
	public struct OpenVRControllerDetails
	{
		[Token(Token = "0x40019E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VRControllerState_t state;

		[Token(Token = "0x40019E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public OpenVRController controllerType;

		[Token(Token = "0x40019E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public uint deviceID;

		[Token(Token = "0x40019E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Vector3 localPosition;

		[Token(Token = "0x40019E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Quaternion localOrientation;
	}

	[Token(Token = "0x200042A")]
	private class HapticInfo
	{
		[Token(Token = "0x40019E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool playingHaptics;

		[Token(Token = "0x40019E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float hapticsDurationPlayed;

		[Token(Token = "0x40019E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float hapticsDuration;

		[Token(Token = "0x40019E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float hapticAmplitude;

		[Token(Token = "0x40019EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public XRNode node;

		[Token(Token = "0x6001A7C")]
		[Address(RVA = "0x9423B4", Offset = "0x9423B4", VA = "0x9423B4")]
		public HapticInfo()
		{
		}
	}

	[Token(Token = "0x200042B")]
	private abstract class OVRControllerBase
	{
		[Token(Token = "0x2000784")]
		public class VirtualButtonMap
		{
			[Token(Token = "0x4002206")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public RawButton None;

			[Token(Token = "0x4002207")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public RawButton One;

			[Token(Token = "0x4002208")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RawButton Two;

			[Token(Token = "0x4002209")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public RawButton Three;

			[Token(Token = "0x400220A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public RawButton Four;

			[Token(Token = "0x400220B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public RawButton Start;

			[Token(Token = "0x400220C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RawButton Back;

			[Token(Token = "0x400220D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public RawButton PrimaryShoulder;

			[Token(Token = "0x400220E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public RawButton PrimaryIndexTrigger;

			[Token(Token = "0x400220F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public RawButton PrimaryHandTrigger;

			[Token(Token = "0x4002210")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public RawButton PrimaryThumbstick;

			[Token(Token = "0x4002211")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public RawButton PrimaryThumbstickUp;

			[Token(Token = "0x4002212")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public RawButton PrimaryThumbstickDown;

			[Token(Token = "0x4002213")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public RawButton PrimaryThumbstickLeft;

			[Token(Token = "0x4002214")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public RawButton PrimaryThumbstickRight;

			[Token(Token = "0x4002215")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public RawButton PrimaryTouchpad;

			[Token(Token = "0x4002216")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public RawButton SecondaryShoulder;

			[Token(Token = "0x4002217")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public RawButton SecondaryIndexTrigger;

			[Token(Token = "0x4002218")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public RawButton SecondaryHandTrigger;

			[Token(Token = "0x4002219")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public RawButton SecondaryThumbstick;

			[Token(Token = "0x400221A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public RawButton SecondaryThumbstickUp;

			[Token(Token = "0x400221B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public RawButton SecondaryThumbstickDown;

			[Token(Token = "0x400221C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public RawButton SecondaryThumbstickLeft;

			[Token(Token = "0x400221D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			public RawButton SecondaryThumbstickRight;

			[Token(Token = "0x400221E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public RawButton SecondaryTouchpad;

			[Token(Token = "0x400221F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			public RawButton DpadUp;

			[Token(Token = "0x4002220")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public RawButton DpadDown;

			[Token(Token = "0x4002221")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			public RawButton DpadLeft;

			[Token(Token = "0x4002222")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public RawButton DpadRight;

			[Token(Token = "0x4002223")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			public RawButton Up;

			[Token(Token = "0x4002224")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			public RawButton Down;

			[Token(Token = "0x4002225")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			public RawButton Left;

			[Token(Token = "0x4002226")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			public RawButton Right;

			[Token(Token = "0x60024B7")]
			[Address(RVA = "0x9439A0", Offset = "0x9439A0", VA = "0x9439A0")]
			public RawButton ToRawMask(Button virtualMask)
			{
				return default(RawButton);
			}

			[Token(Token = "0x60024B8")]
			[Address(RVA = "0x942AA8", Offset = "0x942AA8", VA = "0x942AA8")]
			public VirtualButtonMap()
			{
			}
		}

		[Token(Token = "0x2000785")]
		public class VirtualTouchMap
		{
			[Token(Token = "0x4002227")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public RawTouch None;

			[Token(Token = "0x4002228")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public RawTouch One;

			[Token(Token = "0x4002229")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RawTouch Two;

			[Token(Token = "0x400222A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public RawTouch Three;

			[Token(Token = "0x400222B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public RawTouch Four;

			[Token(Token = "0x400222C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public RawTouch PrimaryIndexTrigger;

			[Token(Token = "0x400222D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RawTouch PrimaryThumbstick;

			[Token(Token = "0x400222E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public RawTouch PrimaryThumbRest;

			[Token(Token = "0x400222F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public RawTouch PrimaryTouchpad;

			[Token(Token = "0x4002230")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public RawTouch SecondaryIndexTrigger;

			[Token(Token = "0x4002231")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public RawTouch SecondaryThumbstick;

			[Token(Token = "0x4002232")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public RawTouch SecondaryThumbRest;

			[Token(Token = "0x4002233")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public RawTouch SecondaryTouchpad;

			[Token(Token = "0x60024B9")]
			[Address(RVA = "0x943B30", Offset = "0x943B30", VA = "0x943B30")]
			public RawTouch ToRawMask(Touch virtualMask)
			{
				return default(RawTouch);
			}

			[Token(Token = "0x60024BA")]
			[Address(RVA = "0x942AB0", Offset = "0x942AB0", VA = "0x942AB0")]
			public VirtualTouchMap()
			{
			}
		}

		[Token(Token = "0x2000786")]
		public class VirtualNearTouchMap
		{
			[Token(Token = "0x4002234")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public RawNearTouch None;

			[Token(Token = "0x4002235")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public RawNearTouch PrimaryIndexTrigger;

			[Token(Token = "0x4002236")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RawNearTouch PrimaryThumbButtons;

			[Token(Token = "0x4002237")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public RawNearTouch SecondaryIndexTrigger;

			[Token(Token = "0x4002238")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public RawNearTouch SecondaryThumbButtons;

			[Token(Token = "0x60024BB")]
			[Address(RVA = "0x943BD0", Offset = "0x943BD0", VA = "0x943BD0")]
			public RawNearTouch ToRawMask(NearTouch virtualMask)
			{
				return default(RawNearTouch);
			}

			[Token(Token = "0x60024BC")]
			[Address(RVA = "0x942AB8", Offset = "0x942AB8", VA = "0x942AB8")]
			public VirtualNearTouchMap()
			{
			}
		}

		[Token(Token = "0x2000787")]
		public class VirtualAxis1DMap
		{
			[Token(Token = "0x4002239")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public RawAxis1D None;

			[Token(Token = "0x400223A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public RawAxis1D PrimaryIndexTrigger;

			[Token(Token = "0x400223B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RawAxis1D PrimaryHandTrigger;

			[Token(Token = "0x400223C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public RawAxis1D SecondaryIndexTrigger;

			[Token(Token = "0x400223D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public RawAxis1D SecondaryHandTrigger;

			[Token(Token = "0x60024BD")]
			[Address(RVA = "0x943C10", Offset = "0x943C10", VA = "0x943C10")]
			public RawAxis1D ToRawMask(Axis1D virtualMask)
			{
				return default(RawAxis1D);
			}

			[Token(Token = "0x60024BE")]
			[Address(RVA = "0x942AC0", Offset = "0x942AC0", VA = "0x942AC0")]
			public VirtualAxis1DMap()
			{
			}
		}

		[Token(Token = "0x2000788")]
		public class VirtualAxis2DMap
		{
			[Token(Token = "0x400223E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public RawAxis2D None;

			[Token(Token = "0x400223F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public RawAxis2D PrimaryThumbstick;

			[Token(Token = "0x4002240")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RawAxis2D PrimaryTouchpad;

			[Token(Token = "0x4002241")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public RawAxis2D SecondaryThumbstick;

			[Token(Token = "0x4002242")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public RawAxis2D SecondaryTouchpad;

			[Token(Token = "0x60024BF")]
			[Address(RVA = "0x943C50", Offset = "0x943C50", VA = "0x943C50")]
			public RawAxis2D ToRawMask(Axis2D virtualMask)
			{
				return default(RawAxis2D);
			}

			[Token(Token = "0x60024C0")]
			[Address(RVA = "0x942AC8", Offset = "0x942AC8", VA = "0x942AC8")]
			public VirtualAxis2DMap()
			{
			}
		}

		[Token(Token = "0x40019EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Controller controllerType;

		[Token(Token = "0x40019EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public VirtualButtonMap buttonMap;

		[Token(Token = "0x40019ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public VirtualTouchMap touchMap;

		[Token(Token = "0x40019EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public VirtualNearTouchMap nearTouchMap;

		[Token(Token = "0x40019EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VirtualAxis1DMap axis1DMap;

		[Token(Token = "0x40019F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public VirtualAxis2DMap axis2DMap;

		[Token(Token = "0x40019F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OVRPlugin.ControllerState4 previousState;

		[Token(Token = "0x40019F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public OVRPlugin.ControllerState4 currentState;

		[Token(Token = "0x40019F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public bool shouldApplyDeadzone;

		[Token(Token = "0x6001A7D")]
		[Address(RVA = "0x942930", Offset = "0x942930", VA = "0x942930")]
		public OVRControllerBase()
		{
		}

		[Token(Token = "0x6001A7E")]
		[Address(RVA = "0x942AD0", Offset = "0x942AD0", VA = "0x942AD0", Slot = "4")]
		public virtual Controller Update()
		{
			return default(Controller);
		}

		[Token(Token = "0x6001A7F")]
		[Address(RVA = "0x942FC0", Offset = "0x942FC0", VA = "0x942FC0")]
		private OVRPlugin.ControllerState4 GetOpenVRControllerState(Controller controllerType)
		{
			return default(OVRPlugin.ControllerState4);
		}

		[Token(Token = "0x6001A80")]
		[Address(RVA = "0x943900", Offset = "0x943900", VA = "0x943900", Slot = "5")]
		public virtual void SetControllerVibration(float frequency, float amplitude)
		{
		}

		[Token(Token = "0x6001A81")]
		[Address(RVA = "0x943998", Offset = "0x943998", VA = "0x943998", Slot = "6")]
		public virtual byte GetBatteryPercentRemaining()
		{
			return default(byte);
		}

		[Token(Token = "0x6001A82")]
		public abstract void ConfigureButtonMap();

		[Token(Token = "0x6001A83")]
		public abstract void ConfigureTouchMap();

		[Token(Token = "0x6001A84")]
		public abstract void ConfigureNearTouchMap();

		[Token(Token = "0x6001A85")]
		public abstract void ConfigureAxis1DMap();

		[Token(Token = "0x6001A86")]
		public abstract void ConfigureAxis2DMap();

		[Token(Token = "0x6001A87")]
		[Address(RVA = "0x93EAB4", Offset = "0x93EAB4", VA = "0x93EAB4")]
		public RawButton ResolveToRawMask(Button virtualMask)
		{
			return default(RawButton);
		}

		[Token(Token = "0x6001A88")]
		[Address(RVA = "0x93F494", Offset = "0x93F494", VA = "0x93F494")]
		public RawTouch ResolveToRawMask(Touch virtualMask)
		{
			return default(RawTouch);
		}

		[Token(Token = "0x6001A89")]
		[Address(RVA = "0x93FF00", Offset = "0x93FF00", VA = "0x93FF00")]
		public RawNearTouch ResolveToRawMask(NearTouch virtualMask)
		{
			return default(RawNearTouch);
		}

		[Token(Token = "0x6001A8A")]
		[Address(RVA = "0x940E1C", Offset = "0x940E1C", VA = "0x940E1C")]
		public RawAxis1D ResolveToRawMask(Axis1D virtualMask)
		{
			return default(RawAxis1D);
		}

		[Token(Token = "0x6001A8B")]
		[Address(RVA = "0x9416B0", Offset = "0x9416B0", VA = "0x9416B0")]
		public RawAxis2D ResolveToRawMask(Axis2D virtualMask)
		{
			return default(RawAxis2D);
		}
	}

	[Token(Token = "0x200042C")]
	private class OVRControllerTouch : OVRControllerBase
	{
		[Token(Token = "0x6001A8C")]
		[Address(RVA = "0x93C5F0", Offset = "0x93C5F0", VA = "0x93C5F0")]
		public OVRControllerTouch()
		{
		}

		[Token(Token = "0x6001A8D")]
		[Address(RVA = "0x9484F8", Offset = "0x9484F8", VA = "0x9484F8", Slot = "7")]
		public override void ConfigureButtonMap()
		{
		}

		[Token(Token = "0x6001A8E")]
		[Address(RVA = "0x948894", Offset = "0x948894", VA = "0x948894", Slot = "8")]
		public override void ConfigureTouchMap()
		{
		}

		[Token(Token = "0x6001A8F")]
		[Address(RVA = "0x948A10", Offset = "0x948A10", VA = "0x948A10", Slot = "9")]
		public override void ConfigureNearTouchMap()
		{
		}

		[Token(Token = "0x6001A90")]
		[Address(RVA = "0x948AAC", Offset = "0x948AAC", VA = "0x948AAC", Slot = "10")]
		public override void ConfigureAxis1DMap()
		{
		}

		[Token(Token = "0x6001A91")]
		[Address(RVA = "0x948B48", Offset = "0x948B48", VA = "0x948B48", Slot = "11")]
		public override void ConfigureAxis2DMap()
		{
		}

		[Token(Token = "0x6001A92")]
		[Address(RVA = "0x948BE4", Offset = "0x948BE4", VA = "0x948BE4", Slot = "6")]
		public override byte GetBatteryPercentRemaining()
		{
			return default(byte);
		}
	}

	[Token(Token = "0x200042D")]
	private class OVRControllerLTouch : OVRControllerBase
	{
		[Token(Token = "0x6001A93")]
		[Address(RVA = "0x93C60C", Offset = "0x93C60C", VA = "0x93C60C")]
		public OVRControllerLTouch()
		{
		}

		[Token(Token = "0x6001A94")]
		[Address(RVA = "0x946A0C", Offset = "0x946A0C", VA = "0x946A0C", Slot = "7")]
		public override void ConfigureButtonMap()
		{
		}

		[Token(Token = "0x6001A95")]
		[Address(RVA = "0x946D94", Offset = "0x946D94", VA = "0x946D94", Slot = "8")]
		public override void ConfigureTouchMap()
		{
		}

		[Token(Token = "0x6001A96")]
		[Address(RVA = "0x946F04", Offset = "0x946F04", VA = "0x946F04", Slot = "9")]
		public override void ConfigureNearTouchMap()
		{
		}

		[Token(Token = "0x6001A97")]
		[Address(RVA = "0x946F9C", Offset = "0x946F9C", VA = "0x946F9C", Slot = "10")]
		public override void ConfigureAxis1DMap()
		{
		}

		[Token(Token = "0x6001A98")]
		[Address(RVA = "0x947034", Offset = "0x947034", VA = "0x947034", Slot = "11")]
		public override void ConfigureAxis2DMap()
		{
		}

		[Token(Token = "0x6001A99")]
		[Address(RVA = "0x9470CC", Offset = "0x9470CC", VA = "0x9470CC", Slot = "6")]
		public override byte GetBatteryPercentRemaining()
		{
			return default(byte);
		}
	}

	[Token(Token = "0x200042E")]
	private class OVRControllerRTouch : OVRControllerBase
	{
		[Token(Token = "0x6001A9A")]
		[Address(RVA = "0x93C628", Offset = "0x93C628", VA = "0x93C628")]
		public OVRControllerRTouch()
		{
		}

		[Token(Token = "0x6001A9B")]
		[Address(RVA = "0x947770", Offset = "0x947770", VA = "0x947770", Slot = "7")]
		public override void ConfigureButtonMap()
		{
		}

		[Token(Token = "0x6001A9C")]
		[Address(RVA = "0x947AF8", Offset = "0x947AF8", VA = "0x947AF8", Slot = "8")]
		public override void ConfigureTouchMap()
		{
		}

		[Token(Token = "0x6001A9D")]
		[Address(RVA = "0x947C68", Offset = "0x947C68", VA = "0x947C68", Slot = "9")]
		public override void ConfigureNearTouchMap()
		{
		}

		[Token(Token = "0x6001A9E")]
		[Address(RVA = "0x947D00", Offset = "0x947D00", VA = "0x947D00", Slot = "10")]
		public override void ConfigureAxis1DMap()
		{
		}

		[Token(Token = "0x6001A9F")]
		[Address(RVA = "0x947D98", Offset = "0x947D98", VA = "0x947D98", Slot = "11")]
		public override void ConfigureAxis2DMap()
		{
		}

		[Token(Token = "0x6001AA0")]
		[Address(RVA = "0x947E30", Offset = "0x947E30", VA = "0x947E30", Slot = "6")]
		public override byte GetBatteryPercentRemaining()
		{
			return default(byte);
		}
	}

	[Token(Token = "0x200042F")]
	private class OVRControllerHands : OVRControllerBase
	{
		[Token(Token = "0x6001AA1")]
		[Address(RVA = "0x93C644", Offset = "0x93C644", VA = "0x93C644")]
		public OVRControllerHands()
		{
		}

		[Token(Token = "0x6001AA2")]
		[Address(RVA = "0x945CC4", Offset = "0x945CC4", VA = "0x945CC4", Slot = "7")]
		public override void ConfigureButtonMap()
		{
		}

		[Token(Token = "0x6001AA3")]
		[Address(RVA = "0x94603C", Offset = "0x94603C", VA = "0x94603C", Slot = "8")]
		public override void ConfigureTouchMap()
		{
		}

		[Token(Token = "0x6001AA4")]
		[Address(RVA = "0x9461A0", Offset = "0x9461A0", VA = "0x9461A0", Slot = "9")]
		public override void ConfigureNearTouchMap()
		{
		}

		[Token(Token = "0x6001AA5")]
		[Address(RVA = "0x946234", Offset = "0x946234", VA = "0x946234", Slot = "10")]
		public override void ConfigureAxis1DMap()
		{
		}

		[Token(Token = "0x6001AA6")]
		[Address(RVA = "0x9462C8", Offset = "0x9462C8", VA = "0x9462C8", Slot = "11")]
		public override void ConfigureAxis2DMap()
		{
		}

		[Token(Token = "0x6001AA7")]
		[Address(RVA = "0x94635C", Offset = "0x94635C", VA = "0x94635C", Slot = "6")]
		public override byte GetBatteryPercentRemaining()
		{
			return default(byte);
		}
	}

	[Token(Token = "0x2000430")]
	private class OVRControllerLHand : OVRControllerBase
	{
		[Token(Token = "0x6001AA8")]
		[Address(RVA = "0x93C660", Offset = "0x93C660", VA = "0x93C660")]
		public OVRControllerLHand()
		{
		}

		[Token(Token = "0x6001AA9")]
		[Address(RVA = "0x946370", Offset = "0x946370", VA = "0x946370", Slot = "7")]
		public override void ConfigureButtonMap()
		{
		}

		[Token(Token = "0x6001AAA")]
		[Address(RVA = "0x9466E4", Offset = "0x9466E4", VA = "0x9466E4", Slot = "8")]
		public override void ConfigureTouchMap()
		{
		}

		[Token(Token = "0x6001AAB")]
		[Address(RVA = "0x946848", Offset = "0x946848", VA = "0x946848", Slot = "9")]
		public override void ConfigureNearTouchMap()
		{
		}

		[Token(Token = "0x6001AAC")]
		[Address(RVA = "0x9468DC", Offset = "0x9468DC", VA = "0x9468DC", Slot = "10")]
		public override void ConfigureAxis1DMap()
		{
		}

		[Token(Token = "0x6001AAD")]
		[Address(RVA = "0x946970", Offset = "0x946970", VA = "0x946970", Slot = "11")]
		public override void ConfigureAxis2DMap()
		{
		}

		[Token(Token = "0x6001AAE")]
		[Address(RVA = "0x946A04", Offset = "0x946A04", VA = "0x946A04", Slot = "6")]
		public override byte GetBatteryPercentRemaining()
		{
			return default(byte);
		}
	}

	[Token(Token = "0x2000431")]
	private class OVRControllerRHand : OVRControllerBase
	{
		[Token(Token = "0x6001AAF")]
		[Address(RVA = "0x93C67C", Offset = "0x93C67C", VA = "0x93C67C")]
		public OVRControllerRHand()
		{
		}

		[Token(Token = "0x6001AB0")]
		[Address(RVA = "0x9470D4", Offset = "0x9470D4", VA = "0x9470D4", Slot = "7")]
		public override void ConfigureButtonMap()
		{
		}

		[Token(Token = "0x6001AB1")]
		[Address(RVA = "0x947448", Offset = "0x947448", VA = "0x947448", Slot = "8")]
		public override void ConfigureTouchMap()
		{
		}

		[Token(Token = "0x6001AB2")]
		[Address(RVA = "0x9475AC", Offset = "0x9475AC", VA = "0x9475AC", Slot = "9")]
		public override void ConfigureNearTouchMap()
		{
		}

		[Token(Token = "0x6001AB3")]
		[Address(RVA = "0x947640", Offset = "0x947640", VA = "0x947640", Slot = "10")]
		public override void ConfigureAxis1DMap()
		{
		}

		[Token(Token = "0x6001AB4")]
		[Address(RVA = "0x9476D4", Offset = "0x9476D4", VA = "0x9476D4", Slot = "11")]
		public override void ConfigureAxis2DMap()
		{
		}

		[Token(Token = "0x6001AB5")]
		[Address(RVA = "0x947768", Offset = "0x947768", VA = "0x947768", Slot = "6")]
		public override byte GetBatteryPercentRemaining()
		{
			return default(byte);
		}
	}

	[Token(Token = "0x2000432")]
	private class OVRControllerRemote : OVRControllerBase
	{
		[Token(Token = "0x6001AB6")]
		[Address(RVA = "0x947E38", Offset = "0x947E38", VA = "0x947E38")]
		public OVRControllerRemote()
		{
		}

		[Token(Token = "0x6001AB7")]
		[Address(RVA = "0x947E54", Offset = "0x947E54", VA = "0x947E54", Slot = "7")]
		public override void ConfigureButtonMap()
		{
		}

		[Token(Token = "0x6001AB8")]
		[Address(RVA = "0x9481D8", Offset = "0x9481D8", VA = "0x9481D8", Slot = "8")]
		public override void ConfigureTouchMap()
		{
		}

		[Token(Token = "0x6001AB9")]
		[Address(RVA = "0x94833C", Offset = "0x94833C", VA = "0x94833C", Slot = "9")]
		public override void ConfigureNearTouchMap()
		{
		}

		[Token(Token = "0x6001ABA")]
		[Address(RVA = "0x9483D0", Offset = "0x9483D0", VA = "0x9483D0", Slot = "10")]
		public override void ConfigureAxis1DMap()
		{
		}

		[Token(Token = "0x6001ABB")]
		[Address(RVA = "0x948464", Offset = "0x948464", VA = "0x948464", Slot = "11")]
		public override void ConfigureAxis2DMap()
		{
		}
	}

	[Token(Token = "0x2000433")]
	private class OVRControllerGamepadPC : OVRControllerBase
	{
		[Token(Token = "0x6001ABC")]
		[Address(RVA = "0x9455CC", Offset = "0x9455CC", VA = "0x9455CC")]
		public OVRControllerGamepadPC()
		{
		}

		[Token(Token = "0x6001ABD")]
		[Address(RVA = "0x9455E8", Offset = "0x9455E8", VA = "0x9455E8", Slot = "7")]
		public override void ConfigureButtonMap()
		{
		}

		[Token(Token = "0x6001ABE")]
		[Address(RVA = "0x945994", Offset = "0x945994", VA = "0x945994", Slot = "8")]
		public override void ConfigureTouchMap()
		{
		}

		[Token(Token = "0x6001ABF")]
		[Address(RVA = "0x945AF8", Offset = "0x945AF8", VA = "0x945AF8", Slot = "9")]
		public override void ConfigureNearTouchMap()
		{
		}

		[Token(Token = "0x6001AC0")]
		[Address(RVA = "0x945B8C", Offset = "0x945B8C", VA = "0x945B8C", Slot = "10")]
		public override void ConfigureAxis1DMap()
		{
		}

		[Token(Token = "0x6001AC1")]
		[Address(RVA = "0x945C28", Offset = "0x945C28", VA = "0x945C28", Slot = "11")]
		public override void ConfigureAxis2DMap()
		{
		}
	}

	[Token(Token = "0x2000434")]
	private class OVRControllerGamepadMac : OVRControllerBase
	{
		[Token(Token = "0x2000789")]
		private enum AxisGPC
		{
			[Token(Token = "0x4002244")]
			None = -1,
			[Token(Token = "0x4002245")]
			LeftXAxis,
			[Token(Token = "0x4002246")]
			LeftYAxis,
			[Token(Token = "0x4002247")]
			RightXAxis,
			[Token(Token = "0x4002248")]
			RightYAxis,
			[Token(Token = "0x4002249")]
			LeftTrigger,
			[Token(Token = "0x400224A")]
			RightTrigger,
			[Token(Token = "0x400224B")]
			DPad_X_Axis,
			[Token(Token = "0x400224C")]
			DPad_Y_Axis,
			[Token(Token = "0x400224D")]
			Max
		}

		[Token(Token = "0x200078A")]
		public enum ButtonGPC
		{
			[Token(Token = "0x400224F")]
			None = -1,
			[Token(Token = "0x4002250")]
			A,
			[Token(Token = "0x4002251")]
			B,
			[Token(Token = "0x4002252")]
			X,
			[Token(Token = "0x4002253")]
			Y,
			[Token(Token = "0x4002254")]
			Up,
			[Token(Token = "0x4002255")]
			Down,
			[Token(Token = "0x4002256")]
			Left,
			[Token(Token = "0x4002257")]
			Right,
			[Token(Token = "0x4002258")]
			Start,
			[Token(Token = "0x4002259")]
			Back,
			[Token(Token = "0x400225A")]
			LStick,
			[Token(Token = "0x400225B")]
			RStick,
			[Token(Token = "0x400225C")]
			LeftShoulder,
			[Token(Token = "0x400225D")]
			RightShoulder,
			[Token(Token = "0x400225E")]
			Max
		}

		[Token(Token = "0x40019F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
		private bool initialized;

		[Token(Token = "0x40019F5")]
		private const string DllName = "OVRGamepad";

		[Token(Token = "0x6001AC2")]
		[Address(RVA = "0x94436C", Offset = "0x94436C", VA = "0x94436C")]
		public OVRControllerGamepadMac()
		{
		}

		[Token(Token = "0x6001AC3")]
		[Address(RVA = "0x944474", Offset = "0x944474", VA = "0x944474", Slot = "1")]
		~OVRControllerGamepadMac()
		{
		}

		[Token(Token = "0x6001AC4")]
		[Address(RVA = "0x9445C8", Offset = "0x9445C8", VA = "0x9445C8", Slot = "4")]
		public override Controller Update()
		{
			return default(Controller);
		}

		[Token(Token = "0x6001AC5")]
		[Address(RVA = "0x944DD0", Offset = "0x944DD0", VA = "0x944DD0", Slot = "7")]
		public override void ConfigureButtonMap()
		{
		}

		[Token(Token = "0x6001AC6")]
		[Address(RVA = "0x94517C", Offset = "0x94517C", VA = "0x94517C", Slot = "8")]
		public override void ConfigureTouchMap()
		{
		}

		[Token(Token = "0x6001AC7")]
		[Address(RVA = "0x9452E0", Offset = "0x9452E0", VA = "0x9452E0", Slot = "9")]
		public override void ConfigureNearTouchMap()
		{
		}

		[Token(Token = "0x6001AC8")]
		[Address(RVA = "0x945374", Offset = "0x945374", VA = "0x945374", Slot = "10")]
		public override void ConfigureAxis1DMap()
		{
		}

		[Token(Token = "0x6001AC9")]
		[Address(RVA = "0x945410", Offset = "0x945410", VA = "0x945410", Slot = "11")]
		public override void ConfigureAxis2DMap()
		{
		}

		[Token(Token = "0x6001ACA")]
		[Address(RVA = "0x9454AC", Offset = "0x9454AC", VA = "0x9454AC", Slot = "5")]
		public override void SetControllerVibration(float frequency, float amplitude)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6001ACB")]
		[Address(RVA = "0x944390", Offset = "0x944390", VA = "0x944390")]
		private static extern bool OVR_GamepadController_Initialize();

		[PreserveSig]
		[Token(Token = "0x6001ACC")]
		[Address(RVA = "0x9444E8", Offset = "0x9444E8", VA = "0x9444E8")]
		private static extern bool OVR_GamepadController_Destroy();

		[PreserveSig]
		[Token(Token = "0x6001ACD")]
		[Address(RVA = "0x944B28", Offset = "0x944B28", VA = "0x944B28")]
		private static extern bool OVR_GamepadController_Update();

		[PreserveSig]
		[Token(Token = "0x6001ACE")]
		[Address(RVA = "0x944CF0", Offset = "0x944CF0", VA = "0x944CF0")]
		private static extern float OVR_GamepadController_GetAxis(int axis);

		[PreserveSig]
		[Token(Token = "0x6001ACF")]
		[Address(RVA = "0x944C08", Offset = "0x944C08", VA = "0x944C08")]
		private static extern bool OVR_GamepadController_GetButton(int button);

		[PreserveSig]
		[Token(Token = "0x6001AD0")]
		[Address(RVA = "0x9454D0", Offset = "0x9454D0", VA = "0x9454D0")]
		private static extern bool OVR_GamepadController_SetVibration(int node, float strength, float frequency);
	}

	[Token(Token = "0x2000435")]
	private class OVRControllerGamepadAndroid : OVRControllerBase
	{
		[Token(Token = "0x6001AD1")]
		[Address(RVA = "0x93C5D4", Offset = "0x93C5D4", VA = "0x93C5D4")]
		public OVRControllerGamepadAndroid()
		{
		}

		[Token(Token = "0x6001AD2")]
		[Address(RVA = "0x943C90", Offset = "0x943C90", VA = "0x943C90", Slot = "7")]
		public override void ConfigureButtonMap()
		{
		}

		[Token(Token = "0x6001AD3")]
		[Address(RVA = "0x94403C", Offset = "0x94403C", VA = "0x94403C", Slot = "8")]
		public override void ConfigureTouchMap()
		{
		}

		[Token(Token = "0x6001AD4")]
		[Address(RVA = "0x9441A0", Offset = "0x9441A0", VA = "0x9441A0", Slot = "9")]
		public override void ConfigureNearTouchMap()
		{
		}

		[Token(Token = "0x6001AD5")]
		[Address(RVA = "0x944234", Offset = "0x944234", VA = "0x944234", Slot = "10")]
		public override void ConfigureAxis1DMap()
		{
		}

		[Token(Token = "0x6001AD6")]
		[Address(RVA = "0x9442D0", Offset = "0x9442D0", VA = "0x9442D0", Slot = "11")]
		public override void ConfigureAxis2DMap()
		{
		}
	}

	[Token(Token = "0x400032E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly float AXIS_AS_BUTTON_THRESHOLD;

	[Token(Token = "0x400032F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly float AXIS_DEADZONE_THRESHOLD;

	[Token(Token = "0x4000330")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static List<OVRControllerBase> controllers;

	[Token(Token = "0x4000331")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static Controller activeControllerType;

	[Token(Token = "0x4000332")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static Controller connectedControllerTypes;

	[Token(Token = "0x4000333")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private static OVRPlugin.Step stepType;

	[Token(Token = "0x4000334")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static int fixedUpdateCount;

	[Token(Token = "0x4000335")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private static bool _pluginSupportsActiveController;

	[Token(Token = "0x4000336")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	private static bool _pluginSupportsActiveControllerCached;

	[Token(Token = "0x4000337")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static Version _pluginSupportsActiveControllerMinVersion;

	[Token(Token = "0x4000338")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private static int NUM_HAPTIC_CHANNELS;

	[Token(Token = "0x4000339")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static HapticInfo[] hapticInfos;

	[Token(Token = "0x400033A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private static float OPENVR_MAX_HAPTIC_AMPLITUDE;

	[Token(Token = "0x400033B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static float HAPTIC_VIBRATION_DURATION_SECONDS;

	[Token(Token = "0x400033C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private static string OPENVR_TOUCH_NAME;

	[Token(Token = "0x400033D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static string OPENVR_VIVE_CONTROLLER_NAME;

	[Token(Token = "0x400033E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private static string OPENVR_WINDOWSMR_CONTROLLER_NAME;

	[Token(Token = "0x400033F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static OpenVRControllerDetails[] openVRControllerDetails;

	[Token(Token = "0x1700003F")]
	private static bool pluginSupportsActiveController
	{
		[Token(Token = "0x600042F")]
		[Address(RVA = "0x93C0C8", Offset = "0x93C0C8", VA = "0x93C0C8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000430")]
	[Address(RVA = "0x93C1D4", Offset = "0x93C1D4", VA = "0x93C1D4")]
	static OVRInput()
	{
	}

	[Token(Token = "0x6000431")]
	[Address(RVA = "0x93C86C", Offset = "0x93C86C", VA = "0x93C86C")]
	public static void Update()
	{
	}

	[Token(Token = "0x6000432")]
	[Address(RVA = "0x93DD74", Offset = "0x93DD74", VA = "0x93DD74")]
	public static void FixedUpdate()
	{
	}

	[Token(Token = "0x6000433")]
	[Address(RVA = "0x93DEF4", Offset = "0x93DEF4", VA = "0x93DEF4")]
	public static bool GetControllerOrientationTracked(Controller controllerType)
	{
		return default(bool);
	}

	[Token(Token = "0x6000434")]
	[Address(RVA = "0x93DFE0", Offset = "0x93DFE0", VA = "0x93DFE0")]
	public static bool GetControllerOrientationValid(Controller controllerType)
	{
		return default(bool);
	}

	[Token(Token = "0x6000435")]
	[Address(RVA = "0x93E0CC", Offset = "0x93E0CC", VA = "0x93E0CC")]
	public static bool GetControllerPositionTracked(Controller controllerType)
	{
		return default(bool);
	}

	[Token(Token = "0x6000436")]
	[Address(RVA = "0x93E1B8", Offset = "0x93E1B8", VA = "0x93E1B8")]
	public static bool GetControllerPositionValid(Controller controllerType)
	{
		return default(bool);
	}

	[Token(Token = "0x6000437")]
	[Address(RVA = "0x933580", Offset = "0x933580", VA = "0x933580")]
	public static Vector3 GetLocalControllerPosition(Controller controllerType)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000438")]
	[Address(RVA = "0x9340B4", Offset = "0x9340B4", VA = "0x9340B4")]
	public static Vector3 GetLocalControllerVelocity(Controller controllerType)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000439")]
	[Address(RVA = "0x93E2A4", Offset = "0x93E2A4", VA = "0x93E2A4")]
	public static Vector3 GetLocalControllerAcceleration(Controller controllerType)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600043A")]
	[Address(RVA = "0x933B1C", Offset = "0x933B1C", VA = "0x933B1C")]
	public static Quaternion GetLocalControllerRotation(Controller controllerType)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x600043B")]
	[Address(RVA = "0x934334", Offset = "0x934334", VA = "0x934334")]
	public static Vector3 GetLocalControllerAngularVelocity(Controller controllerType)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600043C")]
	[Address(RVA = "0x93E524", Offset = "0x93E524", VA = "0x93E524")]
	public static Vector3 GetLocalControllerAngularAcceleration(Controller controllerType)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600043D")]
	[Address(RVA = "0x93E7A4", Offset = "0x93E7A4", VA = "0x93E7A4")]
	public static Handedness GetDominantHand()
	{
		return default(Handedness);
	}

	[Token(Token = "0x600043E")]
	[Address(RVA = "0x937684", Offset = "0x937684", VA = "0x937684")]
	public static bool Get(Button virtualMask, Controller controllerMask = Controller.Active)
	{
		return default(bool);
	}

	[Token(Token = "0x600043F")]
	[Address(RVA = "0x93DC5C", Offset = "0x93DC5C", VA = "0x93DC5C")]
	public static bool Get(RawButton rawMask, Controller controllerMask = Controller.Active)
	{
		return default(bool);
	}

	[Token(Token = "0x6000440")]
	[Address(RVA = "0x93E820", Offset = "0x93E820", VA = "0x93E820")]
	private static bool GetResolvedButton(Button virtualMask, RawButton rawMask, Controller controllerMask)
	{
		return default(bool);
	}

	[Token(Token = "0x6000441")]
	[Address(RVA = "0x93EAE4", Offset = "0x93EAE4", VA = "0x93EAE4")]
	public static bool GetDown(Button virtualMask, Controller controllerMask = Controller.Active)
	{
		return default(bool);
	}

	[Token(Token = "0x6000442")]
	[Address(RVA = "0x93EDCC", Offset = "0x93EDCC", VA = "0x93EDCC")]
	public static bool GetDown(RawButton rawMask, Controller controllerMask = Controller.Active)
	{
		return default(bool);
	}

	[Token(Token = "0x6000443")]
	[Address(RVA = "0x93EB70", Offset = "0x93EB70", VA = "0x93EB70")]
	private static bool GetResolvedButtonDown(Button virtualMask, RawButton rawMask, Controller controllerMask)
	{
		return default(bool);
	}

	[Token(Token = "0x6000444")]
	[Address(RVA = "0x93EE58", Offset = "0x93EE58", VA = "0x93EE58")]
	public static bool GetUp(Button virtualMask, Controller controllerMask = Controller.Active)
	{
		return default(bool);
	}

	[Token(Token = "0x6000445")]
	[Address(RVA = "0x93F140", Offset = "0x93F140", VA = "0x93F140")]
	public static bool GetUp(RawButton rawMask, Controller controllerMask = Controller.Active)
	{
		return default(bool);
	}

	[Token(Token = "0x6000446")]
	[Address(RVA = "0x93EEE4", Offset = "0x93EEE4", VA = "0x93EEE4")]
	private static bool GetResolvedButtonUp(Button virtualMask, RawButton rawMask, Controller controllerMask)
	{
		return default(bool);
	}

	[Token(Token = "0x6000447")]
	[Address(RVA = "0x93F1CC", Offset = "0x93F1CC", VA = "0x93F1CC")]
	public static bool Get(Touch virtualMask, Controller controllerMask = Controller.Active)
	{
		return default(bool);
	}

	[Token(Token = "0x6000448")]
	[Address(RVA = "0x93DCE8", Offset = "0x93DCE8", VA = "0x93DCE8")]
	public static bool Get(RawTouch rawMask, Controller controllerMask = Controller.Active)
	{
		return default(bool);
	}

	[Token(Token = "0x6000449")]
	[Address(RVA = "0x93F258", Offset = "0x93F258", VA = "0x93F258")]
	private static bool GetResolvedTouch(Touch virtualMask, RawTouch rawMask, Controller controllerMask)
	{
		return default(bool);
	}

	[Token(Token = "0x600044A")]
	[Address(RVA = "0x93F4C4", Offset = "0x93F4C4", VA = "0x93F4C4")]
	public static bool GetDown(Touch virtualMask, Controller controllerMask = Controller.Active)
	{
		return default(bool);
	}

	[Token(Token = "0x600044B")]
	[Address(RVA = "0x93F7AC", Offset = "0x93F7AC", VA = "0x93F7AC")]
	public static bool GetDown(RawTouch rawMask, Controller controllerMask = Controller.Active)
	{
		return default(bool);
	}

	[Token(Token = "0x600044C")]
	[Address(RVA = "0x93F550", Offset = "0x93F550", VA = "0x93F550")]
	private static bool GetResolvedTouchDown(Touch virtualMask, RawTouch rawMask, Controller controllerMask)
	{
		return default(bool);
	}

	[Token(Token = "0x600044D")]
	[Address(RVA = "0x93F838", Offset = "0x93F838", VA = "0x93F838")]
	public static bool GetUp(Touch virtualMask, Controller controllerMask = Controller.Active)
	{
		return default(bool);
	}

	[Token(Token = "0x600044E")]
	[Address(RVA = "0x93FB20", Offset = "0x93FB20", VA = "0x93FB20")]
	public static bool GetUp(RawTouch rawMask, Controller controllerMask = Controller.Active)
	{
		return default(bool);
	}

	[Token(Token = "0x600044F")]
	[Address(RVA = "0x93F8C4", Offset = "0x93F8C4", VA = "0x93F8C4")]
	private static bool GetResolvedTouchUp(Touch virtualMask, RawTouch rawMask, Controller controllerMask)
	{
		return default(bool);
	}

	[Token(Token = "0x6000450")]
	[Address(RVA = "0x93FBAC", Offset = "0x93FBAC", VA = "0x93FBAC")]
	public static bool Get(NearTouch virtualMask, Controller controllerMask = Controller.Active)
	{
		return default(bool);
	}

	[Token(Token = "0x6000451")]
	[Address(RVA = "0x93FE74", Offset = "0x93FE74", VA = "0x93FE74")]
	public static bool Get(RawNearTouch rawMask, Controller controllerMask = Controller.Active)
	{
		return default(bool);
	}

	[Token(Token = "0x6000452")]
	[Address(RVA = "0x93FC38", Offset = "0x93FC38", VA = "0x93FC38")]
	private static bool GetResolvedNearTouch(NearTouch virtualMask, RawNearTouch rawMask, Controller controllerMask)
	{
		return default(bool);
	}

	[Token(Token = "0x6000453")]
	[Address(RVA = "0x93FF30", Offset = "0x93FF30", VA = "0x93FF30")]
	public static bool GetDown(NearTouch virtualMask, Controller controllerMask = Controller.Active)
	{
		return default(bool);
	}

	[Token(Token = "0x6000454")]
	[Address(RVA = "0x940218", Offset = "0x940218", VA = "0x940218")]
	public static bool GetDown(RawNearTouch rawMask, Controller controllerMask = Controller.Active)
	{
		return default(bool);
	}

	[Token(Token = "0x6000455")]
	[Address(RVA = "0x93FFBC", Offset = "0x93FFBC", VA = "0x93FFBC")]
	private static bool GetResolvedNearTouchDown(NearTouch virtualMask, RawNearTouch rawMask, Controller controllerMask)
	{
		return default(bool);
	}

	[Token(Token = "0x6000456")]
	[Address(RVA = "0x9402A4", Offset = "0x9402A4", VA = "0x9402A4")]
	public static bool GetUp(NearTouch virtualMask, Controller controllerMask = Controller.Active)
	{
		return default(bool);
	}

	[Token(Token = "0x6000457")]
	[Address(RVA = "0x94058C", Offset = "0x94058C", VA = "0x94058C")]
	public static bool GetUp(RawNearTouch rawMask, Controller controllerMask = Controller.Active)
	{
		return default(bool);
	}

	[Token(Token = "0x6000458")]
	[Address(RVA = "0x940330", Offset = "0x940330", VA = "0x940330")]
	private static bool GetResolvedNearTouchUp(NearTouch virtualMask, RawNearTouch rawMask, Controller controllerMask)
	{
		return default(bool);
	}

	[Token(Token = "0x6000459")]
	[Address(RVA = "0x9322B4", Offset = "0x9322B4", VA = "0x9322B4")]
	public static float Get(Axis1D virtualMask, Controller controllerMask = Controller.Active)
	{
		return default(float);
	}

	[Token(Token = "0x600045A")]
	[Address(RVA = "0x940D90", Offset = "0x940D90", VA = "0x940D90")]
	public static float Get(RawAxis1D rawMask, Controller controllerMask = Controller.Active)
	{
		return default(float);
	}

	[Token(Token = "0x600045B")]
	[Address(RVA = "0x940618", Offset = "0x940618", VA = "0x940618")]
	private static float GetResolvedAxis1D(Axis1D virtualMask, RawAxis1D rawMask, Controller controllerMask)
	{
		return default(float);
	}

	[Token(Token = "0x600045C")]
	[Address(RVA = "0x940F04", Offset = "0x940F04", VA = "0x940F04")]
	public static Vector2 Get(Axis2D virtualMask, Controller controllerMask = Controller.Active)
	{
		return default(Vector2);
	}

	[Token(Token = "0x600045D")]
	[Address(RVA = "0x941614", Offset = "0x941614", VA = "0x941614")]
	public static Vector2 Get(RawAxis2D rawMask, Controller controllerMask = Controller.Active)
	{
		return default(Vector2);
	}

	[Token(Token = "0x600045E")]
	[Address(RVA = "0x940FA0", Offset = "0x940FA0", VA = "0x940FA0")]
	private static Vector2 GetResolvedAxis2D(Axis2D virtualMask, RawAxis2D rawMask, Controller controllerMask)
	{
		return default(Vector2);
	}

	[Token(Token = "0x600045F")]
	[Address(RVA = "0x9418CC", Offset = "0x9418CC", VA = "0x9418CC")]
	public static Controller GetConnectedControllers()
	{
		return default(Controller);
	}

	[Token(Token = "0x6000460")]
	[Address(RVA = "0x941958", Offset = "0x941958", VA = "0x941958")]
	public static bool IsControllerConnected(Controller controller)
	{
		return default(bool);
	}

	[Token(Token = "0x6000461")]
	[Address(RVA = "0x9419F8", Offset = "0x9419F8", VA = "0x9419F8")]
	public static Controller GetActiveController()
	{
		return default(Controller);
	}

	[Token(Token = "0x6000462")]
	[Address(RVA = "0x941A84", Offset = "0x941A84", VA = "0x941A84")]
	private static void StartVibration(float amplitude, float duration, XRNode controllerNode)
	{
	}

	[Token(Token = "0x6000463")]
	[Address(RVA = "0x941DB8", Offset = "0x941DB8", VA = "0x941DB8")]
	public static void SetOpenVRLocalPose(Vector3 leftPos, Vector3 rightPos, Quaternion leftRot, Quaternion rightRot)
	{
	}

	[Token(Token = "0x6000464")]
	[Address(RVA = "0x941FAC", Offset = "0x941FAC", VA = "0x941FAC")]
	public static string GetOpenVRStringProperty(ETrackedDeviceProperty prop, uint deviceId = 0u)
	{
		return null;
	}

	[Token(Token = "0x6000465")]
	[Address(RVA = "0x93D060", Offset = "0x93D060", VA = "0x93D060")]
	private static void UpdateXRControllerNodeIds()
	{
	}

	[Token(Token = "0x6000466")]
	[Address(RVA = "0x93D7C0", Offset = "0x93D7C0", VA = "0x93D7C0")]
	private static void UpdateXRControllerHaptics()
	{
	}

	[Token(Token = "0x6000467")]
	[Address(RVA = "0x93C698", Offset = "0x93C698", VA = "0x93C698")]
	private static void InitHapticInfo()
	{
	}

	[Token(Token = "0x6000468")]
	[Address(RVA = "0x942180", Offset = "0x942180", VA = "0x942180")]
	private static void PlayHapticImpulse(float amplitude, XRNode deviceNode)
	{
	}

	[Token(Token = "0x6000469")]
	[Address(RVA = "0x9423BC", Offset = "0x9423BC", VA = "0x9423BC")]
	private static bool IsValidOpenVRDevice(uint deviceId)
	{
		return default(bool);
	}

	[Token(Token = "0x600046A")]
	[Address(RVA = "0x9423D0", Offset = "0x9423D0", VA = "0x9423D0")]
	public static void SetControllerVibration(float frequency, float amplitude, Controller controllerMask = Controller.Active)
	{
	}

	[Token(Token = "0x600046B")]
	[Address(RVA = "0x942708", Offset = "0x942708", VA = "0x942708")]
	public static byte GetControllerBatteryPercentRemaining(Controller controllerMask = Controller.Active)
	{
		return default(byte);
	}

	[Token(Token = "0x600046C")]
	[Address(RVA = "0x941864", Offset = "0x941864", VA = "0x941864")]
	private static Vector2 CalculateAbsMax(Vector2 a, Vector2 b)
	{
		return default(Vector2);
	}

	[Token(Token = "0x600046D")]
	[Address(RVA = "0x940EC0", Offset = "0x940EC0", VA = "0x940EC0")]
	private static float CalculateAbsMax(float a, float b)
	{
		return default(float);
	}

	[Token(Token = "0x600046E")]
	[Address(RVA = "0x9416E0", Offset = "0x9416E0", VA = "0x9416E0")]
	private static Vector2 CalculateDeadzone(Vector2 a, float deadzone)
	{
		return default(Vector2);
	}

	[Token(Token = "0x600046F")]
	[Address(RVA = "0x940E4C", Offset = "0x940E4C", VA = "0x940E4C")]
	private static float CalculateDeadzone(float a, float deadzone)
	{
		return default(float);
	}

	[Token(Token = "0x6000470")]
	[Address(RVA = "0x93EA5C", Offset = "0x93EA5C", VA = "0x93EA5C")]
	private static bool ShouldResolveController(Controller controllerType, Controller controllerMask)
	{
		return default(bool);
	}
}
[Token(Token = "0x20000E5")]
public class OVRLayerAttribute : PropertyAttribute
{
	[Token(Token = "0x6000471")]
	[Address(RVA = "0x948BF8", Offset = "0x948BF8", VA = "0x948BF8")]
	public OVRLayerAttribute()
	{
	}
}
[Token(Token = "0x20000E6")]
public class OVRManager : MonoBehaviour
{
	[Token(Token = "0x2000436")]
	public enum TrackingOrigin
	{
		[Token(Token = "0x40019F7")]
		EyeLevel,
		[Token(Token = "0x40019F8")]
		FloorLevel,
		[Token(Token = "0x40019F9")]
		Stage
	}

	[Token(Token = "0x2000437")]
	public enum EyeTextureFormat
	{
		[Token(Token = "0x40019FB")]
		Default = 0,
		[Token(Token = "0x40019FC")]
		R16G16B16A16_FP = 2,
		[Token(Token = "0x40019FD")]
		R11G11B10_FP = 3
	}

	[Token(Token = "0x2000438")]
	public enum FixedFoveatedRenderingLevel
	{
		[Token(Token = "0x40019FF")]
		Off,
		[Token(Token = "0x4001A00")]
		Low,
		[Token(Token = "0x4001A01")]
		Medium,
		[Token(Token = "0x4001A02")]
		High,
		[Token(Token = "0x4001A03")]
		HighTop
	}

	[Token(Token = "0x2000439")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x2EAAF0", Offset = "0x2EAAF0")]
	public enum TiledMultiResLevel
	{
		[Token(Token = "0x4001A05")]
		Off,
		[Token(Token = "0x4001A06")]
		LMSLow,
		[Token(Token = "0x4001A07")]
		LMSMedium,
		[Token(Token = "0x4001A08")]
		LMSHigh,
		[Token(Token = "0x4001A09")]
		LMSHighTop
	}

	[Token(Token = "0x200043A")]
	public enum XRDevice
	{
		[Token(Token = "0x4001A0B")]
		Unknown,
		[Token(Token = "0x4001A0C")]
		Oculus,
		[Token(Token = "0x4001A0D")]
		OpenVR
	}

	[Token(Token = "0x200043B")]
	public enum CompositionMethod
	{
		[Token(Token = "0x4001A0F")]
		External,
		[Token(Token = "0x4001A10")]
		Direct
	}

	[Token(Token = "0x200043C")]
	public enum CameraDevice
	{
		[Token(Token = "0x4001A12")]
		WebCamera0,
		[Token(Token = "0x4001A13")]
		WebCamera1,
		[Token(Token = "0x4001A14")]
		ZEDCamera
	}

	[Token(Token = "0x200043D")]
	public enum DepthQuality
	{
		[Token(Token = "0x4001A16")]
		Low,
		[Token(Token = "0x4001A17")]
		Medium,
		[Token(Token = "0x4001A18")]
		High
	}

	[Token(Token = "0x200043E")]
	public enum VirtualGreenScreenType
	{
		[Token(Token = "0x4001A1A")]
		Off,
		[Token(Token = "0x4001A1B")]
		OuterBoundary,
		[Token(Token = "0x4001A1C")]
		PlayArea
	}

	[Token(Token = "0x200043F")]
	public enum MrcActivationMode
	{
		[Token(Token = "0x4001A1E")]
		Automatic,
		[Token(Token = "0x4001A1F")]
		Disabled
	}

	[Serializable]
	[Token(Token = "0x2000440")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EAB24", Offset = "0x2EAB24")]
	private sealed class <>c
	{
		[Token(Token = "0x4001A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x4001A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static Comparison<Camera> <>9__234_0;

		[Token(Token = "0x6001AD8")]
		[Address(RVA = "0x79E54C", Offset = "0x79E54C", VA = "0x79E54C")]
		public <>c()
		{
		}

		[Token(Token = "0x6001AD9")]
		[Address(RVA = "0x79E554", Offset = "0x79E554", VA = "0x79E554")]
		internal int <FindMainCamera>b__234_0(Camera c0, Camera c1)
		{
			return default(int);
		}
	}

	[Token(Token = "0x4000340")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ED504", Offset = "0x2ED504")]
	private static OVRManager <instance>k__BackingField;

	[Token(Token = "0x4000341")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ED514", Offset = "0x2ED514")]
	private static OVRDisplay <display>k__BackingField;

	[Token(Token = "0x4000342")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ED524", Offset = "0x2ED524")]
	private static OVRTracker <tracker>k__BackingField;

	[Token(Token = "0x4000343")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ED534", Offset = "0x2ED534")]
	private static OVRBoundary <boundary>k__BackingField;

	[Token(Token = "0x4000344")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static OVRProfile _profile;

	[Token(Token = "0x4000345")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private IEnumerable<Camera> disabledCameras;

	[Token(Token = "0x4000346")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private float prevTimeScale;

	[Token(Token = "0x4000354")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static bool _isHmdPresentCached;

	[Token(Token = "0x4000355")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	private static bool _isHmdPresent;

	[Token(Token = "0x4000356")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
	private static bool _wasHmdPresent;

	[Token(Token = "0x4000357")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4B")]
	private static bool _hasVrFocusCached;

	[Token(Token = "0x4000358")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private static bool _hasVrFocus;

	[Token(Token = "0x4000359")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	private static bool _hadVrFocus;

	[Token(Token = "0x400035A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
	private static bool _hadInputFocus;

	[Token(Token = "0x400035B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x2ED614", Offset = "0x2ED614")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2ED614", Offset = "0x2ED614")]
	public bool useRecommendedMSAALevel;

	[Token(Token = "0x400035C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
	[SerializeField]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2ED680", Offset = "0x2ED680")]
	private bool _monoscopic;

	[Token(Token = "0x400035D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2ED6C8", Offset = "0x2ED6C8")]
	public bool enableAdaptiveResolution;

	[Token(Token = "0x400035E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17")]
	[HideInInspector]
	public bool enableColorGamut;

	[Token(Token = "0x400035F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public OVRPlugin.ColorSpace colorGamut;

	[Token(Token = "0x4000360")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2ED748", Offset = "0x2ED748")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2ED748", Offset = "0x2ED748")]
	public float minRenderScale;

	[Token(Token = "0x4000361")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2ED798", Offset = "0x2ED798")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2ED798", Offset = "0x2ED798")]
	public float maxRenderScale;

	[Token(Token = "0x4000362")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2ED7E8", Offset = "0x2ED7E8")]
	private Vector3 _headPoseRelativeOffsetRotation;

	[Token(Token = "0x4000363")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2ED858", Offset = "0x2ED858")]
	private Vector3 _headPoseRelativeOffsetTranslation;

	[Token(Token = "0x4000364")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public int profilerTcpPort;

	[Token(Token = "0x4000365")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public bool expandMixedRealityCapturePropertySheet;

	[Token(Token = "0x4000366")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	[HideInInspector]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2ED8DC", Offset = "0x2ED8DC")]
	public bool enableMixedReality;

	[Token(Token = "0x4000367")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[HideInInspector]
	public CompositionMethod compositionMethod;

	[Token(Token = "0x4000368")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[HideInInspector]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2ED934", Offset = "0x2ED934")]
	public LayerMask extraHiddenLayers;

	[Token(Token = "0x4000369")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[HideInInspector]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2ED988", Offset = "0x2ED988")]
	public Color externalCompositionBackdropColorRift;

	[Token(Token = "0x400036A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[HideInInspector]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2ED9F8", Offset = "0x2ED9F8")]
	public Color externalCompositionBackdropColorQuest;

	[Token(Token = "0x400036B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[HideInInspector]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EDA68", Offset = "0x2EDA68")]
	public CameraDevice capturingCameraDevice;

	[Token(Token = "0x400036C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[HideInInspector]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EDAD4", Offset = "0x2EDAD4")]
	public bool flipCameraFrameHorizontally;

	[Token(Token = "0x400036D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	[HideInInspector]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EDB38", Offset = "0x2EDB38")]
	public bool flipCameraFrameVertically;

	[Token(Token = "0x400036E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[HideInInspector]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EDB9C", Offset = "0x2EDB9C")]
	public float handPoseStateLatency;

	[Token(Token = "0x400036F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[HideInInspector]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EDBE4", Offset = "0x2EDBE4")]
	public float sandwichCompositionRenderLatency;

	[Token(Token = "0x4000370")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[HideInInspector]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EDC2C", Offset = "0x2EDC2C")]
	public int sandwichCompositionBufferedFrames;

	[Token(Token = "0x4000371")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[HideInInspector]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EDC74", Offset = "0x2EDC74")]
	public Color chromaKeyColor;

	[Token(Token = "0x4000372")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[HideInInspector]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EDCC8", Offset = "0x2EDCC8")]
	public float chromaKeySimilarity;

	[Token(Token = "0x4000373")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[HideInInspector]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EDD20", Offset = "0x2EDD20")]
	public float chromaKeySmoothRange;

	[Token(Token = "0x4000374")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[HideInInspector]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EDD78", Offset = "0x2EDD78")]
	public float chromaKeySpillRange;

	[Token(Token = "0x4000375")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	[HideInInspector]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EDDD0", Offset = "0x2EDDD0")]
	public bool useDynamicLighting;

	[Token(Token = "0x4000376")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[HideInInspector]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EDE40", Offset = "0x2EDE40")]
	public DepthQuality depthQuality;

	[Token(Token = "0x4000377")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	[HideInInspector]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EDE88", Offset = "0x2EDE88")]
	public float dynamicLightingSmoothFactor;

	[Token(Token = "0x4000378")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[HideInInspector]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EDF00", Offset = "0x2EDF00")]
	public float dynamicLightingDepthVariationClampingValue;

	[Token(Token = "0x4000379")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	[HideInInspector]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EDF48", Offset = "0x2EDF48")]
	public VirtualGreenScreenType virtualGreenScreenType;

	[Token(Token = "0x400037A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[HideInInspector]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EDFA8", Offset = "0x2EDFA8")]
	public float virtualGreenScreenTopY;

	[Token(Token = "0x400037B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	[HideInInspector]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EE008", Offset = "0x2EE008")]
	public float virtualGreenScreenBottomY;

	[Token(Token = "0x400037C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[HideInInspector]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EE06C", Offset = "0x2EE06C")]
	public bool virtualGreenScreenApplyDepthCulling;

	[Token(Token = "0x400037D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	[HideInInspector]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EE0B4", Offset = "0x2EE0B4")]
	public float virtualGreenScreenDepthTolerance;

	[Token(Token = "0x400037E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[HideInInspector]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EE0FC", Offset = "0x2EE0FC")]
	public MrcActivationMode mrcActivationMode;

	[Token(Token = "0x400037F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public static string OCULUS_UNITY_NAME_STR;

	[Token(Token = "0x4000380")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public static string OPENVR_UNITY_NAME_STR;

	[Token(Token = "0x4000381")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public static XRDevice loadedXRDevice;

	[Token(Token = "0x4000382")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private static Vector3 OpenVRTouchRotationOffsetEulerLeft;

	[Token(Token = "0x4000383")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private static Vector3 OpenVRTouchRotationOffsetEulerRight;

	[Token(Token = "0x4000384")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private static Vector3 OpenVRTouchPositionOffsetLeft;

	[Token(Token = "0x4000385")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private static Vector3 OpenVRTouchPositionOffsetRight;

	[Token(Token = "0x4000386")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x2EE144", Offset = "0x2EE144")]
	[SerializeField]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EE144", Offset = "0x2EE144")]
	private TrackingOrigin _trackingOriginType;

	[Token(Token = "0x4000387")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EE1DC", Offset = "0x2EE1DC")]
	public bool usePositionTracking;

	[Token(Token = "0x4000388")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
	[HideInInspector]
	public bool useRotationTracking;

	[Token(Token = "0x4000389")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCA")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EE220", Offset = "0x2EE220")]
	public bool useIPDInPositionTracking;

	[Token(Token = "0x400038A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCB")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EE254", Offset = "0x2EE254")]
	public bool resetTrackerOnLoad;

	[Token(Token = "0x400038B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EE2BC", Offset = "0x2EE2BC")]
	public bool AllowRecenter;

	[Token(Token = "0x400038C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCD")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EE2F0", Offset = "0x2EE2F0")]
	public bool LateControllerUpdate;

	[Token(Token = "0x400038D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCE")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EE324", Offset = "0x2EE324")]
	private bool <isSupportedPlatform>k__BackingField;

	[Token(Token = "0x400038E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private static bool _isUserPresentCached;

	[Token(Token = "0x400038F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8D")]
	private static bool _isUserPresent;

	[Token(Token = "0x4000390")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8E")]
	private static bool _wasUserPresent;

	[Token(Token = "0x4000391")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8F")]
	private static bool prevAudioOutIdIsCached;

	[Token(Token = "0x4000392")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private static bool prevAudioInIdIsCached;

	[Token(Token = "0x4000393")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private static string prevAudioOutId;

	[Token(Token = "0x4000394")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private static string prevAudioInId;

	[Token(Token = "0x4000395")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private static bool wasPositionTracked;

	[Token(Token = "0x4000396")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public static string UnityAlphaOrBetaVersionWarningMessage;

	[Token(Token = "0x4000397")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public static bool OVRManagerinitialized;

	[Token(Token = "0x4000398")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCF")]
	private bool suppressDisableMixedRealityBecauseOfNoMainCameraWarning;

	[Token(Token = "0x4000399")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private bool multipleMainCameraWarningPresented;

	[Token(Token = "0x400039A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	private Camera lastFoundMainCamera;

	[Token(Token = "0x400039B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA5")]
	public static bool staticMixedRealityCaptureInitialized;

	[Token(Token = "0x400039C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA6")]
	public static bool staticPrevEnableMixedRealityCapture;

	[Token(Token = "0x400039D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public static OVRMixedRealityCaptureSettings staticMrcSettings;

	[Token(Token = "0x17000040")]
	public static OVRManager instance
	{
		[Token(Token = "0x6000472")]
		[Address(RVA = "0x948C30", Offset = "0x948C30", VA = "0x948C30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F95F4", Offset = "0x2F95F4")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000473")]
		[Address(RVA = "0x948CBC", Offset = "0x948CBC", VA = "0x948CBC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9604", Offset = "0x2F9604")]
		private set
		{
		}
	}

	[Token(Token = "0x17000041")]
	public static OVRDisplay display
	{
		[Token(Token = "0x6000474")]
		[Address(RVA = "0x948D4C", Offset = "0x948D4C", VA = "0x948D4C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9614", Offset = "0x2F9614")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000475")]
		[Address(RVA = "0x948DD8", Offset = "0x948DD8", VA = "0x948DD8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9624", Offset = "0x2F9624")]
		private set
		{
		}
	}

	[Token(Token = "0x17000042")]
	public static OVRTracker tracker
	{
		[Token(Token = "0x6000476")]
		[Address(RVA = "0x948E68", Offset = "0x948E68", VA = "0x948E68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9634", Offset = "0x2F9634")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000477")]
		[Address(RVA = "0x948EF4", Offset = "0x948EF4", VA = "0x948EF4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9644", Offset = "0x2F9644")]
		private set
		{
		}
	}

	[Token(Token = "0x17000043")]
	public static OVRBoundary boundary
	{
		[Token(Token = "0x6000478")]
		[Address(RVA = "0x948F84", Offset = "0x948F84", VA = "0x948F84")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9654", Offset = "0x2F9654")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000479")]
		[Address(RVA = "0x949010", Offset = "0x949010", VA = "0x949010")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9664", Offset = "0x2F9664")]
		private set
		{
		}
	}

	[Token(Token = "0x17000044")]
	public static OVRProfile profile
	{
		[Token(Token = "0x600047A")]
		[Address(RVA = "0x9490A0", Offset = "0x9490A0", VA = "0x9490A0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000045")]
	public static bool isHmdPresent
	{
		[Token(Token = "0x6000495")]
		[Address(RVA = "0x94B234", Offset = "0x94B234", VA = "0x94B234")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000496")]
		[Address(RVA = "0x94B384", Offset = "0x94B384", VA = "0x94B384")]
		private set
		{
		}
	}

	[Token(Token = "0x17000046")]
	public static string audioOutId
	{
		[Token(Token = "0x6000497")]
		[Address(RVA = "0x94B420", Offset = "0x94B420", VA = "0x94B420")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000047")]
	public static string audioInId
	{
		[Token(Token = "0x6000498")]
		[Address(RVA = "0x94B49C", Offset = "0x94B49C", VA = "0x94B49C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000048")]
	public static bool hasVrFocus
	{
		[Token(Token = "0x6000499")]
		[Address(RVA = "0x94B518", Offset = "0x94B518", VA = "0x94B518")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600049A")]
		[Address(RVA = "0x94B668", Offset = "0x94B668", VA = "0x94B668")]
		private set
		{
		}
	}

	[Token(Token = "0x17000049")]
	public static bool hasInputFocus
	{
		[Token(Token = "0x600049B")]
		[Address(RVA = "0x94B704", Offset = "0x94B704", VA = "0x94B704")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700004A")]
	public bool chromatic
	{
		[Token(Token = "0x600049C")]
		[Address(RVA = "0x94B780", Offset = "0x94B780", VA = "0x94B780")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600049D")]
		[Address(RVA = "0x94B838", Offset = "0x94B838", VA = "0x94B838")]
		set
		{
		}
	}

	[Token(Token = "0x1700004B")]
	public bool monoscopic
	{
		[Token(Token = "0x600049E")]
		[Address(RVA = "0x94B8F4", Offset = "0x94B8F4", VA = "0x94B8F4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600049F")]
		[Address(RVA = "0x94B9B0", Offset = "0x94B9B0", VA = "0x94B9B0")]
		set
		{
		}
	}

	[Token(Token = "0x1700004C")]
	public Vector3 headPoseRelativeOffsetRotation
	{
		[Token(Token = "0x60004A1")]
		[Address(RVA = "0x94BA7C", Offset = "0x94BA7C", VA = "0x94BA7C")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x60004A2")]
		[Address(RVA = "0x93BD70", Offset = "0x93BD70", VA = "0x93BD70")]
		set
		{
		}
	}

	[Token(Token = "0x1700004D")]
	public Vector3 headPoseRelativeOffsetTranslation
	{
		[Token(Token = "0x60004A3")]
		[Address(RVA = "0x94BA90", Offset = "0x94BA90", VA = "0x94BA90")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x60004A4")]
		[Address(RVA = "0x93BBD8", Offset = "0x93BBD8", VA = "0x93BBD8")]
		set
		{
		}
	}

	[Token(Token = "0x1700004E")]
	public int vsyncCount
	{
		[Token(Token = "0x60004A5")]
		[Address(RVA = "0x94BAA4", Offset = "0x94BAA4", VA = "0x94BAA4")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60004A6")]
		[Address(RVA = "0x94BB5C", Offset = "0x94BB5C", VA = "0x94BB5C")]
		set
		{
		}
	}

	[Token(Token = "0x1700004F")]
	public static float batteryLevel
	{
		[Token(Token = "0x60004A7")]
		[Address(RVA = "0x94BC18", Offset = "0x94BC18", VA = "0x94BC18")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000050")]
	public static float batteryTemperature
	{
		[Token(Token = "0x60004A8")]
		[Address(RVA = "0x94BCD0", Offset = "0x94BCD0", VA = "0x94BCD0")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000051")]
	public static int batteryStatus
	{
		[Token(Token = "0x60004A9")]
		[Address(RVA = "0x94BD88", Offset = "0x94BD88", VA = "0x94BD88")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000052")]
	public static float volumeLevel
	{
		[Token(Token = "0x60004AA")]
		[Address(RVA = "0x94BE40", Offset = "0x94BE40", VA = "0x94BE40")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000053")]
	public static int cpuLevel
	{
		[Token(Token = "0x60004AB")]
		[Address(RVA = "0x94BEF8", Offset = "0x94BEF8", VA = "0x94BEF8")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60004AC")]
		[Address(RVA = "0x94BFB0", Offset = "0x94BFB0", VA = "0x94BFB0")]
		set
		{
		}
	}

	[Token(Token = "0x17000054")]
	public static int gpuLevel
	{
		[Token(Token = "0x60004AD")]
		[Address(RVA = "0x94C06C", Offset = "0x94C06C", VA = "0x94C06C")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60004AE")]
		[Address(RVA = "0x94C124", Offset = "0x94C124", VA = "0x94C124")]
		set
		{
		}
	}

	[Token(Token = "0x17000055")]
	public static bool isPowerSavingActive
	{
		[Token(Token = "0x60004AF")]
		[Address(RVA = "0x94C1E0", Offset = "0x94C1E0", VA = "0x94C1E0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000056")]
	public static EyeTextureFormat eyeTextureFormat
	{
		[Token(Token = "0x60004B0")]
		[Address(RVA = "0x94C298", Offset = "0x94C298", VA = "0x94C298")]
		get
		{
			return default(EyeTextureFormat);
		}
		[Token(Token = "0x60004B1")]
		[Address(RVA = "0x94C314", Offset = "0x94C314", VA = "0x94C314")]
		set
		{
		}
	}

	[Token(Token = "0x17000057")]
	public static bool fixedFoveatedRenderingSupported
	{
		[Token(Token = "0x60004B2")]
		[Address(RVA = "0x94C398", Offset = "0x94C398", VA = "0x94C398")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000058")]
	public static FixedFoveatedRenderingLevel fixedFoveatedRenderingLevel
	{
		[Token(Token = "0x60004B3")]
		[Address(RVA = "0x94C414", Offset = "0x94C414", VA = "0x94C414")]
		get
		{
			return default(FixedFoveatedRenderingLevel);
		}
		[Token(Token = "0x60004B4")]
		[Address(RVA = "0x94C510", Offset = "0x94C510", VA = "0x94C510")]
		set
		{
		}
	}

	[Token(Token = "0x17000059")]
	public static bool useDynamicFixedFoveatedRendering
	{
		[Token(Token = "0x60004B5")]
		[Address(RVA = "0x94C614", Offset = "0x94C614", VA = "0x94C614")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60004B6")]
		[Address(RVA = "0x94C710", Offset = "0x94C710", VA = "0x94C710")]
		set
		{
		}
	}

	[Token(Token = "0x1700005A")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x2FDE90", Offset = "0x2FDE90")]
	public static bool tiledMultiResSupported
	{
		[Token(Token = "0x60004B7")]
		[Address(RVA = "0x94C814", Offset = "0x94C814", VA = "0x94C814")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700005B")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x2FDEC8", Offset = "0x2FDEC8")]
	public static TiledMultiResLevel tiledMultiResLevel
	{
		[Token(Token = "0x60004B8")]
		[Address(RVA = "0x94C890", Offset = "0x94C890", VA = "0x94C890")]
		get
		{
			return default(TiledMultiResLevel);
		}
		[Token(Token = "0x60004B9")]
		[Address(RVA = "0x94C98C", Offset = "0x94C98C", VA = "0x94C98C")]
		set
		{
		}
	}

	[Token(Token = "0x1700005C")]
	public static bool gpuUtilSupported
	{
		[Token(Token = "0x60004BA")]
		[Address(RVA = "0x94CA90", Offset = "0x94CA90", VA = "0x94CA90")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700005D")]
	public static float gpuUtilLevel
	{
		[Token(Token = "0x60004BB")]
		[Address(RVA = "0x94CB0C", Offset = "0x94CB0C", VA = "0x94CB0C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700005E")]
	public TrackingOrigin trackingOriginType
	{
		[Token(Token = "0x60004BF")]
		[Address(RVA = "0x92F3F0", Offset = "0x92F3F0", VA = "0x92F3F0")]
		get
		{
			return default(TrackingOrigin);
		}
		[Token(Token = "0x60004C0")]
		[Address(RVA = "0x94D168", Offset = "0x94D168", VA = "0x94D168")]
		set
		{
		}
	}

	[Token(Token = "0x1700005F")]
	public bool isSupportedPlatform
	{
		[Token(Token = "0x60004C1")]
		[Address(RVA = "0x94D230", Offset = "0x94D230", VA = "0x94D230")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9814", Offset = "0x2F9814")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60004C2")]
		[Address(RVA = "0x94D238", Offset = "0x94D238", VA = "0x94D238")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9824", Offset = "0x2F9824")]
		private set
		{
		}
	}

	[Token(Token = "0x17000060")]
	public bool isUserPresent
	{
		[Token(Token = "0x60004C3")]
		[Address(RVA = "0x94D240", Offset = "0x94D240", VA = "0x94D240")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60004C4")]
		[Address(RVA = "0x94D390", Offset = "0x94D390", VA = "0x94D390")]
		private set
		{
		}
	}

	[Token(Token = "0x17000061")]
	public static Version utilitiesVersion
	{
		[Token(Token = "0x60004C5")]
		[Address(RVA = "0x94D42C", Offset = "0x94D42C", VA = "0x94D42C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000062")]
	public static Version pluginVersion
	{
		[Token(Token = "0x60004C6")]
		[Address(RVA = "0x94D4B8", Offset = "0x94D4B8", VA = "0x94D4B8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000063")]
	public static Version sdkVersion
	{
		[Token(Token = "0x60004C7")]
		[Address(RVA = "0x94D534", Offset = "0x94D534", VA = "0x94D534")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x14000008")]
	public static event Action HMDAcquired
	{
		[Token(Token = "0x600047B")]
		[Address(RVA = "0x94921C", Offset = "0x94921C", VA = "0x94921C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9674", Offset = "0x2F9674")]
		add
		{
		}
		[Token(Token = "0x600047C")]
		[Address(RVA = "0x949358", Offset = "0x949358", VA = "0x949358")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9684", Offset = "0x2F9684")]
		remove
		{
		}
	}

	[Token(Token = "0x14000009")]
	public static event Action HMDLost
	{
		[Token(Token = "0x600047D")]
		[Address(RVA = "0x949494", Offset = "0x949494", VA = "0x949494")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9694", Offset = "0x2F9694")]
		add
		{
		}
		[Token(Token = "0x600047E")]
		[Address(RVA = "0x9495D0", Offset = "0x9495D0", VA = "0x9495D0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F96A4", Offset = "0x2F96A4")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000A")]
	public static event Action HMDMounted
	{
		[Token(Token = "0x600047F")]
		[Address(RVA = "0x94970C", Offset = "0x94970C", VA = "0x94970C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F96B4", Offset = "0x2F96B4")]
		add
		{
		}
		[Token(Token = "0x6000480")]
		[Address(RVA = "0x949848", Offset = "0x949848", VA = "0x949848")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F96C4", Offset = "0x2F96C4")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000B")]
	public static event Action HMDUnmounted
	{
		[Token(Token = "0x6000481")]
		[Address(RVA = "0x949984", Offset = "0x949984", VA = "0x949984")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F96D4", Offset = "0x2F96D4")]
		add
		{
		}
		[Token(Token = "0x6000482")]
		[Address(RVA = "0x949AC0", Offset = "0x949AC0", VA = "0x949AC0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F96E4", Offset = "0x2F96E4")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000C")]
	public static event Action VrFocusAcquired
	{
		[Token(Token = "0x6000483")]
		[Address(RVA = "0x949BFC", Offset = "0x949BFC", VA = "0x949BFC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F96F4", Offset = "0x2F96F4")]
		add
		{
		}
		[Token(Token = "0x6000484")]
		[Address(RVA = "0x949D38", Offset = "0x949D38", VA = "0x949D38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9704", Offset = "0x2F9704")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000D")]
	public static event Action VrFocusLost
	{
		[Token(Token = "0x6000485")]
		[Address(RVA = "0x949E74", Offset = "0x949E74", VA = "0x949E74")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9714", Offset = "0x2F9714")]
		add
		{
		}
		[Token(Token = "0x6000486")]
		[Address(RVA = "0x949FB0", Offset = "0x949FB0", VA = "0x949FB0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9724", Offset = "0x2F9724")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000E")]
	public static event Action InputFocusAcquired
	{
		[Token(Token = "0x6000487")]
		[Address(RVA = "0x94A0EC", Offset = "0x94A0EC", VA = "0x94A0EC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9734", Offset = "0x2F9734")]
		add
		{
		}
		[Token(Token = "0x6000488")]
		[Address(RVA = "0x94A228", Offset = "0x94A228", VA = "0x94A228")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9744", Offset = "0x2F9744")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000F")]
	public static event Action InputFocusLost
	{
		[Token(Token = "0x6000489")]
		[Address(RVA = "0x94A364", Offset = "0x94A364", VA = "0x94A364")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9754", Offset = "0x2F9754")]
		add
		{
		}
		[Token(Token = "0x600048A")]
		[Address(RVA = "0x94A4A0", Offset = "0x94A4A0", VA = "0x94A4A0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9764", Offset = "0x2F9764")]
		remove
		{
		}
	}

	[Token(Token = "0x14000010")]
	public static event Action AudioOutChanged
	{
		[Token(Token = "0x600048B")]
		[Address(RVA = "0x94A5DC", Offset = "0x94A5DC", VA = "0x94A5DC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9774", Offset = "0x2F9774")]
		add
		{
		}
		[Token(Token = "0x600048C")]
		[Address(RVA = "0x94A718", Offset = "0x94A718", VA = "0x94A718")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9784", Offset = "0x2F9784")]
		remove
		{
		}
	}

	[Token(Token = "0x14000011")]
	public static event Action AudioInChanged
	{
		[Token(Token = "0x600048D")]
		[Address(RVA = "0x94A854", Offset = "0x94A854", VA = "0x94A854")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9794", Offset = "0x2F9794")]
		add
		{
		}
		[Token(Token = "0x600048E")]
		[Address(RVA = "0x94A990", Offset = "0x94A990", VA = "0x94A990")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F97A4", Offset = "0x2F97A4")]
		remove
		{
		}
	}

	[Token(Token = "0x14000012")]
	public static event Action TrackingAcquired
	{
		[Token(Token = "0x600048F")]
		[Address(RVA = "0x94AACC", Offset = "0x94AACC", VA = "0x94AACC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F97B4", Offset = "0x2F97B4")]
		add
		{
		}
		[Token(Token = "0x6000490")]
		[Address(RVA = "0x94AC08", Offset = "0x94AC08", VA = "0x94AC08")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F97C4", Offset = "0x2F97C4")]
		remove
		{
		}
	}

	[Token(Token = "0x14000013")]
	public static event Action TrackingLost
	{
		[Token(Token = "0x6000491")]
		[Address(RVA = "0x94AD44", Offset = "0x94AD44", VA = "0x94AD44")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F97D4", Offset = "0x2F97D4")]
		add
		{
		}
		[Token(Token = "0x6000492")]
		[Address(RVA = "0x94AE80", Offset = "0x94AE80", VA = "0x94AE80")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F97E4", Offset = "0x2F97E4")]
		remove
		{
		}
	}

	[Token(Token = "0x14000014")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x2FDE80", Offset = "0x2FDE80")]
	public static event Action HSWDismissed
	{
		[Token(Token = "0x6000493")]
		[Address(RVA = "0x94AFBC", Offset = "0x94AFBC", VA = "0x94AFBC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F97F4", Offset = "0x2F97F4")]
		add
		{
		}
		[Token(Token = "0x6000494")]
		[Address(RVA = "0x94B0F8", Offset = "0x94B0F8", VA = "0x94B0F8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9804", Offset = "0x2F9804")]
		remove
		{
		}
	}

	[Token(Token = "0x60004A0")]
	[Address(RVA = "0x94BA74", Offset = "0x94BA74", VA = "0x94BA74")]
	public static bool IsAdaptiveResSupportedByEngine()
	{
		return default(bool);
	}

	[Token(Token = "0x60004BC")]
	[Address(RVA = "0x94CC08", Offset = "0x94CC08", VA = "0x94CC08")]
	public static void SetColorScaleAndOffset(Vector4 colorScale, Vector4 colorOffset, bool applyToAllLayers)
	{
	}

	[Token(Token = "0x60004BD")]
	[Address(RVA = "0x94CCE0", Offset = "0x94CCE0", VA = "0x94CCE0")]
	public static void SetOpenVRLocalPose(Vector3 leftPos, Vector3 rightPos, Quaternion leftRot, Quaternion rightRot)
	{
	}

	[Token(Token = "0x60004BE")]
	[Address(RVA = "0x94CE28", Offset = "0x94CE28", VA = "0x94CE28")]
	public static OVRPose GetOpenVRControllerOffset(XRNode hand)
	{
		return default(OVRPose);
	}

	[Token(Token = "0x60004C8")]
	[Address(RVA = "0x94D5B0", Offset = "0x94D5B0", VA = "0x94D5B0")]
	private static bool MixedRealityEnabledFromCmd()
	{
		return default(bool);
	}

	[Token(Token = "0x60004C9")]
	[Address(RVA = "0x94D690", Offset = "0x94D690", VA = "0x94D690")]
	private static bool UseDirectCompositionFromCmd()
	{
		return default(bool);
	}

	[Token(Token = "0x60004CA")]
	[Address(RVA = "0x94D770", Offset = "0x94D770", VA = "0x94D770")]
	private static bool UseExternalCompositionFromCmd()
	{
		return default(bool);
	}

	[Token(Token = "0x60004CB")]
	[Address(RVA = "0x94D850", Offset = "0x94D850", VA = "0x94D850")]
	private static bool CreateMixedRealityCaptureConfigurationFileFromCmd()
	{
		return default(bool);
	}

	[Token(Token = "0x60004CC")]
	[Address(RVA = "0x94D930", Offset = "0x94D930", VA = "0x94D930")]
	private static bool LoadMixedRealityCaptureConfigurationFileFromCmd()
	{
		return default(bool);
	}

	[Token(Token = "0x60004CD")]
	[Address(RVA = "0x94DA10", Offset = "0x94DA10", VA = "0x94DA10")]
	public static bool IsUnityAlphaOrBetaVersion()
	{
		return default(bool);
	}

	[Token(Token = "0x60004CE")]
	[Address(RVA = "0x94DB00", Offset = "0x94DB00", VA = "0x94DB00")]
	private void InitOVRManager()
	{
	}

	[Token(Token = "0x60004CF")]
	[Address(RVA = "0x94F2D0", Offset = "0x94F2D0", VA = "0x94F2D0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004D0")]
	[Address(RVA = "0x94F2D4", Offset = "0x94F2D4", VA = "0x94F2D4")]
	private void SetCurrentXRDevice()
	{
	}

	[Token(Token = "0x60004D1")]
	[Address(RVA = "0x94EE3C", Offset = "0x94EE3C", VA = "0x94EE3C")]
	private void Initialize()
	{
	}

	[Token(Token = "0x60004D2")]
	[Address(RVA = "0x94F454", Offset = "0x94F454", VA = "0x94F454")]
	private void Update()
	{
	}

	[Token(Token = "0x60004D3")]
	[Address(RVA = "0x95268C", Offset = "0x95268C", VA = "0x95268C")]
	private Camera FindMainCamera()
	{
		return null;
	}

	[Token(Token = "0x60004D4")]
	[Address(RVA = "0x952CEC", Offset = "0x952CEC", VA = "0x952CEC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60004D5")]
	[Address(RVA = "0x952DB8", Offset = "0x952DB8", VA = "0x952DB8")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60004D6")]
	[Address(RVA = "0x952E30", Offset = "0x952E30", VA = "0x952E30")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60004D7")]
	[Address(RVA = "0x952EA8", Offset = "0x952EA8", VA = "0x952EA8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60004D8")]
	[Address(RVA = "0x952F7C", Offset = "0x952F7C", VA = "0x952F7C")]
	private void OnApplicationPause(bool pause)
	{
	}

	[Token(Token = "0x60004D9")]
	[Address(RVA = "0x953040", Offset = "0x953040", VA = "0x953040")]
	private void OnApplicationFocus(bool focus)
	{
	}

	[Token(Token = "0x60004DA")]
	[Address(RVA = "0x953104", Offset = "0x953104", VA = "0x953104")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x60004DB")]
	[Address(RVA = "0x953190", Offset = "0x953190", VA = "0x953190")]
	public void ReturnToLauncher()
	{
	}

	[Token(Token = "0x60004DC")]
	[Address(RVA = "0x953208", Offset = "0x953208", VA = "0x953208")]
	public static void PlatformUIConfirmQuit()
	{
	}

	[Token(Token = "0x60004DD")]
	[Address(RVA = "0x94E63C", Offset = "0x94E63C", VA = "0x94E63C")]
	public static void StaticInitializeMixedRealityCapture(OVRManager instance)
	{
	}

	[Token(Token = "0x60004DE")]
	[Address(RVA = "0x951FE0", Offset = "0x951FE0", VA = "0x951FE0")]
	public static void StaticUpdateMixedRealityCapture(OVRManager instance)
	{
	}

	[Token(Token = "0x60004DF")]
	[Address(RVA = "0x951DD8", Offset = "0x951DD8", VA = "0x951DD8")]
	public static void StaticShutdownMixedRealityCapture(OVRManager instance)
	{
	}

	[Token(Token = "0x60004E0")]
	[Address(RVA = "0x9532C0", Offset = "0x9532C0", VA = "0x9532C0")]
	public OVRManager()
	{
	}
}
[Token(Token = "0x20000E7")]
internal static class OVRMixedReality
{
	[Token(Token = "0x400039E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool useFakeExternalCamera;

	[Token(Token = "0x400039F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static Vector3 fakeCameraFloorLevelPosition;

	[Token(Token = "0x40003A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Vector3 fakeCameraEyeLevelPosition;

	[Token(Token = "0x40003A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public static Quaternion fakeCameraRotation;

	[Token(Token = "0x40003A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public static float fakeCameraFov;

	[Token(Token = "0x40003A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static float fakeCameraAspect;

	[Token(Token = "0x40003A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public static OVRComposition currentComposition;

	[Token(Token = "0x60004E2")]
	[Address(RVA = "0x7A0194", Offset = "0x7A0194", VA = "0x7A0194")]
	public static void Update(GameObject parentObject, Camera mainCamera, OVRManager.CompositionMethod compositionMethod, bool useDynamicLighting, OVRManager.CameraDevice cameraDevice, OVRManager.DepthQuality depthQuality)
	{
	}

	[Token(Token = "0x60004E3")]
	[Address(RVA = "0x7A0CB4", Offset = "0x7A0CB4", VA = "0x7A0CB4")]
	public static void Cleanup()
	{
	}

	[Token(Token = "0x60004E4")]
	[Address(RVA = "0x7A0F74", Offset = "0x7A0F74", VA = "0x7A0F74")]
	public static void RecenterPose()
	{
	}
}
[Token(Token = "0x20000E8")]
public abstract class OVROnCompleteListener : AndroidJavaProxy
{
	[Token(Token = "0x60004E6")]
	[Address(RVA = "0x7A9250", Offset = "0x7A9250", VA = "0x7A9250")]
	public OVROnCompleteListener()
	{
	}

	[Token(Token = "0x60004E7")]
	public abstract void onSuccess();

	[Token(Token = "0x60004E8")]
	public abstract void onFailure();
}
[Token(Token = "0x20000E9")]
[ExecuteInEditMode]
public class OVROverlay : MonoBehaviour
{
	[Token(Token = "0x2000441")]
	public enum OverlayShape
	{
		[Token(Token = "0x4001A23")]
		Quad = 0,
		[Token(Token = "0x4001A24")]
		Cylinder = 1,
		[Token(Token = "0x4001A25")]
		Cubemap = 2,
		[Token(Token = "0x4001A26")]
		OffcenterCubemap = 4,
		[Token(Token = "0x4001A27")]
		Equirect = 5
	}

	[Token(Token = "0x2000442")]
	public enum OverlayType
	{
		[Token(Token = "0x4001A29")]
		None,
		[Token(Token = "0x4001A2A")]
		Underlay,
		[Token(Token = "0x4001A2B")]
		Overlay
	}

	[Token(Token = "0x2000443")]
	public delegate void ExternalSurfaceObjectCreated();

	[Token(Token = "0x2000444")]
	private struct LayerTexture
	{
		[Token(Token = "0x4001A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Texture appTexture;

		[Token(Token = "0x4001A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public IntPtr appTexturePtr;

		[Token(Token = "0x4001A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Texture[] swapChain;

		[Token(Token = "0x4001A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public IntPtr[] swapChainPtr;
	}

	[Token(Token = "0x40003A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EE334", Offset = "0x2EE334")]
	public OverlayType currentOverlayType;

	[Token(Token = "0x40003A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EE378", Offset = "0x2EE378")]
	public bool isDynamic;

	[Token(Token = "0x40003A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EE3AC", Offset = "0x2EE3AC")]
	public bool isProtectedContent;

	[Token(Token = "0x40003A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Rect srcRectLeft;

	[Token(Token = "0x40003A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Rect srcRectRight;

	[Token(Token = "0x40003AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Rect destRectLeft;

	[Token(Token = "0x40003AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public Rect destRectRight;

	[Token(Token = "0x40003AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool invertTextureRects;

	[Token(Token = "0x40003AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private OVRPlugin.TextureRectMatrixf textureRectMatrix;

	[Token(Token = "0x40003AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public bool overrideTextureRectMatrix;

	[Token(Token = "0x40003AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
	public bool overridePerLayerColorScaleAndOffset;

	[Token(Token = "0x40003B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public Vector4 colorScale;

	[Token(Token = "0x40003B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public Vector4 colorOffset;

	[Token(Token = "0x40003B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	public bool useExpensiveSuperSample;

	[Token(Token = "0x40003B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBD")]
	public bool hidden;

	[Token(Token = "0x40003B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBE")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EE3E0", Offset = "0x2EE3E0")]
	public bool isExternalSurface;

	[Token(Token = "0x40003B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EE414", Offset = "0x2EE414")]
	public int externalSurfaceWidth;

	[Token(Token = "0x40003B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EE448", Offset = "0x2EE448")]
	public int externalSurfaceHeight;

	[Token(Token = "0x40003B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EE47C", Offset = "0x2EE47C")]
	public int compositionDepth;

	[Token(Token = "0x40003B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EE4B0", Offset = "0x2EE4B0")]
	public bool noDepthBufferTesting;

	[Token(Token = "0x40003B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public OVRPlugin.EyeTextureFormat layerTextureFormat;

	[Token(Token = "0x40003BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EE4E4", Offset = "0x2EE4E4")]
	public OverlayShape currentOverlayShape;

	[Token(Token = "0x40003BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private OverlayShape prevOverlayShape;

	[Token(Token = "0x40003BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EE528", Offset = "0x2EE528")]
	public Texture[] textures;

	[Token(Token = "0x40003BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EE58C", Offset = "0x2EE58C")]
	public bool isAlphaPremultiplied;

	[Token(Token = "0x40003BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
	[SerializeField]
	private bool _previewInEditor;

	[Token(Token = "0x40003BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	protected IntPtr[] texturePtrs;

	[Token(Token = "0x40003C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public IntPtr externalSurfaceObject;

	[Token(Token = "0x40003C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	public ExternalSurfaceObjectCreated externalSurfaceObjectCreated;

	[Token(Token = "0x40003C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	protected bool isOverridePending;

	[Token(Token = "0x40003C3")]
	internal const int maxInstances = 15;

	[Token(Token = "0x40003C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static OVROverlay[] instances;

	[Token(Token = "0x40003C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static Material tex2DMaterial;

	[Token(Token = "0x40003C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Material cubeMaterial;

	[Token(Token = "0x40003C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	private LayerTexture[] layerTextures;

	[Token(Token = "0x40003C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private OVRPlugin.LayerDesc layerDesc;

	[Token(Token = "0x40003C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	private int stageCount;

	[Token(Token = "0x40003CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private int layerIndex;

	[Token(Token = "0x40003CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	private int layerId;

	[Token(Token = "0x40003CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private GCHandle layerIdHandle;

	[Token(Token = "0x40003CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	private IntPtr layerIdPtr;

	[Token(Token = "0x40003CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private int frameIndex;

	[Token(Token = "0x40003CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
	private int prevFrameIndex;

	[Token(Token = "0x40003D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private Renderer rend;

	[Token(Token = "0x40003D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private ulong OpenVROverlayHandle;

	[Token(Token = "0x40003D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private Vector4 OpenVRUVOffsetAndScale;

	[Token(Token = "0x40003D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private Vector2 OpenVRMouseScale;

	[Token(Token = "0x40003D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private OVRManager.XRDevice constructedOverlayXRDevice;

	[Token(Token = "0x40003D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
	private bool xrDeviceConstructed;

	[Token(Token = "0x17000064")]
	public bool previewInEditor
	{
		[Token(Token = "0x60004E9")]
		[Address(RVA = "0x7A92E4", Offset = "0x7A92E4", VA = "0x7A92E4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60004EA")]
		[Address(RVA = "0x7A92EC", Offset = "0x7A92EC", VA = "0x7A92EC")]
		set
		{
		}
	}

	[Token(Token = "0x17000065")]
	private OVRPlugin.LayerLayout layout
	{
		[Token(Token = "0x60004EC")]
		[Address(RVA = "0x7A93F4", Offset = "0x7A93F4", VA = "0x7A93F4")]
		get
		{
			return default(OVRPlugin.LayerLayout);
		}
	}

	[Token(Token = "0x17000066")]
	private int texturesPerStage
	{
		[Token(Token = "0x60004ED")]
		[Address(RVA = "0x7A9594", Offset = "0x7A9594", VA = "0x7A9594")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000067")]
	public static string OpenVROverlayKey
	{
		[Token(Token = "0x60004FD")]
		[Address(RVA = "0x7AEE74", Offset = "0x7AEE74", VA = "0x7AEE74")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60004EB")]
	[Address(RVA = "0x7A9308", Offset = "0x7A9308", VA = "0x7A9308")]
	public void OverrideOverlayTextureInfo(Texture srcTexture, IntPtr nativePtr, XRNode node)
	{
	}

	[Token(Token = "0x60004EE")]
	[Address(RVA = "0x7A95B4", Offset = "0x7A95B4", VA = "0x7A95B4")]
	private bool CreateLayer(int mipLevels, int sampleCount, OVRPlugin.EyeTextureFormat etFormat, int flags, OVRPlugin.Sizei size, OVRPlugin.OverlayShape shape)
	{
		return default(bool);
	}

	[Token(Token = "0x60004EF")]
	[Address(RVA = "0x7AA2EC", Offset = "0x7AA2EC", VA = "0x7AA2EC")]
	private bool CreateLayerTextures(bool useMipmaps, OVRPlugin.Sizei size, bool isHdr)
	{
		return default(bool);
	}

	[Token(Token = "0x60004F0")]
	[Address(RVA = "0x7AAFD8", Offset = "0x7AAFD8", VA = "0x7AAFD8")]
	private void DestroyLayerTextures()
	{
	}

	[Token(Token = "0x60004F1")]
	[Address(RVA = "0x7AB178", Offset = "0x7AB178", VA = "0x7AB178")]
	private void DestroyLayer()
	{
	}

	[Token(Token = "0x60004F2")]
	[Address(RVA = "0x7ABF58", Offset = "0x7ABF58", VA = "0x7ABF58")]
	public void SetSrcDestRects(Rect srcLeft, Rect srcRight, Rect destLeft, Rect destRight)
	{
	}

	[Token(Token = "0x60004F3")]
	[Address(RVA = "0x7ABFD0", Offset = "0x7ABFD0", VA = "0x7ABFD0")]
	public void UpdateTextureRectMatrix()
	{
	}

	[Token(Token = "0x60004F4")]
	[Address(RVA = "0x7AC488", Offset = "0x7AC488", VA = "0x7AC488")]
	public void SetPerLayerColorScaleAndOffset(Vector4 scale, Vector4 offset)
	{
	}

	[Token(Token = "0x60004F5")]
	[Address(RVA = "0x7AC4BC", Offset = "0x7AC4BC", VA = "0x7AC4BC")]
	private bool LatchLayerTextures()
	{
		return default(bool);
	}

	[Token(Token = "0x60004F6")]
	[Address(RVA = "0x7ACBA4", Offset = "0x7ACBA4", VA = "0x7ACBA4")]
	private OVRPlugin.LayerDesc GetCurrentLayerDesc()
	{
		return default(OVRPlugin.LayerDesc);
	}

	[Token(Token = "0x60004F7")]
	[Address(RVA = "0x7AD318", Offset = "0x7AD318", VA = "0x7AD318")]
	private Rect GetBlitRect(int eyeId)
	{
		return default(Rect);
	}

	[Token(Token = "0x60004F8")]
	[Address(RVA = "0x7AD538", Offset = "0x7AD538", VA = "0x7AD538")]
	private void BlitSubImage(Texture src, RenderTexture dst, Material mat, Rect rect)
	{
	}

	[Token(Token = "0x60004F9")]
	[Address(RVA = "0x7ADB24", Offset = "0x7ADB24", VA = "0x7ADB24")]
	private bool PopulateLayer(int mipLevels, bool isHdr, OVRPlugin.Sizei size, int sampleCount, int stage)
	{
		return default(bool);
	}

	[Token(Token = "0x60004FA")]
	[Address(RVA = "0x7AE564", Offset = "0x7AE564", VA = "0x7AE564")]
	private bool SubmitLayer(bool overlay, bool headLocked, bool noDepthBufferTesting, OVRPose pose, Vector3 scale, int frameIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x60004FB")]
	[Address(RVA = "0x7A9304", Offset = "0x7A9304", VA = "0x7A9304")]
	private void SetupEditorPreview()
	{
	}

	[Token(Token = "0x60004FC")]
	[Address(RVA = "0x7AE9F8", Offset = "0x7AE9F8", VA = "0x7AE9F8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004FE")]
	[Address(RVA = "0x7AEF0C", Offset = "0x7AEF0C", VA = "0x7AEF0C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60004FF")]
	[Address(RVA = "0x7AEFAC", Offset = "0x7AEFAC", VA = "0x7AEFAC")]
	private void InitOVROverlay()
	{
	}

	[Token(Token = "0x6000500")]
	[Address(RVA = "0x7AF1FC", Offset = "0x7AF1FC", VA = "0x7AF1FC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000501")]
	[Address(RVA = "0x7AF410", Offset = "0x7AF410", VA = "0x7AF410")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000502")]
	[Address(RVA = "0x7AF42C", Offset = "0x7AF42C", VA = "0x7AF42C")]
	private bool ComputeSubmit(ref OVRPose pose, ref Vector3 scale, ref bool overlay, ref bool headLocked)
	{
		return default(bool);
	}

	[Token(Token = "0x6000503")]
	[Address(RVA = "0x7AF9F0", Offset = "0x7AF9F0", VA = "0x7AF9F0")]
	private void OpenVROverlayUpdate(Vector3 scale, OVRPose pose)
	{
	}

	[Token(Token = "0x6000504")]
	[Address(RVA = "0x7AFEA4", Offset = "0x7AFEA4", VA = "0x7AFEA4")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000505")]
	[Address(RVA = "0x7B0598", Offset = "0x7B0598", VA = "0x7B0598")]
	public OVROverlay()
	{
	}
}
[Token(Token = "0x20000EA")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x2E67F4", Offset = "0x2E67F4")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x2E67F4", Offset = "0x2E67F4")]
[ExecuteInEditMode]
public class OVROverlayMeshGenerator : MonoBehaviour
{
	[Token(Token = "0x2000445")]
	private enum CubeFace
	{
		[Token(Token = "0x4001A31")]
		Right,
		[Token(Token = "0x4001A32")]
		Left,
		[Token(Token = "0x4001A33")]
		Top,
		[Token(Token = "0x4001A34")]
		Bottom,
		[Token(Token = "0x4001A35")]
		Front,
		[Token(Token = "0x4001A36")]
		Back,
		[Token(Token = "0x4001A37")]
		COUNT
	}

	[Token(Token = "0x40003D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Mesh _Mesh;

	[Token(Token = "0x40003D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private List<Vector3> _Verts;

	[Token(Token = "0x40003D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private List<Vector2> _UV;

	[Token(Token = "0x40003D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<int> _Tris;

	[Token(Token = "0x40003DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private OVROverlay _Overlay;

	[Token(Token = "0x40003DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private MeshFilter _MeshFilter;

	[Token(Token = "0x40003DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private MeshCollider _MeshCollider;

	[Token(Token = "0x40003DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private MeshRenderer _MeshRenderer;

	[Token(Token = "0x40003DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Transform _CameraRoot;

	[Token(Token = "0x40003DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform _Transform;

	[Token(Token = "0x40003E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private OVROverlay.OverlayShape _LastShape;

	[Token(Token = "0x40003E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 _LastPosition;

	[Token(Token = "0x40003E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Quaternion _LastRotation;

	[Token(Token = "0x40003E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private Vector3 _LastScale;

	[Token(Token = "0x40003E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Rect _LastDestRectLeft;

	[Token(Token = "0x40003E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Rect _LastDestRectRight;

	[Token(Token = "0x40003E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Rect _LastSrcRectLeft;

	[Token(Token = "0x40003E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Texture _LastTexture;

	[Token(Token = "0x40003E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private bool _Awake;

	[Token(Token = "0x40003E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly Vector3[] BottomLeft;

	[Token(Token = "0x40003EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly Vector3[] RightVector;

	[Token(Token = "0x40003EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly Vector3[] UpVector;

	[Token(Token = "0x6000507")]
	[Address(RVA = "0x7B08AC", Offset = "0x7B08AC", VA = "0x7B08AC")]
	protected void Awake()
	{
	}

	[Token(Token = "0x6000508")]
	[Address(RVA = "0x7B0A88", Offset = "0x7B0A88", VA = "0x7B0A88")]
	public void SetOverlay(OVROverlay overlay)
	{
	}

	[Token(Token = "0x6000509")]
	[Address(RVA = "0x7B0A90", Offset = "0x7B0A90", VA = "0x7B0A90")]
	private Rect GetBoundingRect(Rect a, Rect b)
	{
		return default(Rect);
	}

	[Token(Token = "0x600050A")]
	[Address(RVA = "0x7B0CB8", Offset = "0x7B0CB8", VA = "0x7B0CB8")]
	protected void OnEnable()
	{
	}

	[Token(Token = "0x600050B")]
	[Address(RVA = "0x7B0CBC", Offset = "0x7B0CBC", VA = "0x7B0CBC")]
	protected void OnDisable()
	{
	}

	[Token(Token = "0x600050C")]
	[Address(RVA = "0x7B0CC0", Offset = "0x7B0CC0", VA = "0x7B0CC0")]
	private void Update()
	{
	}

	[Token(Token = "0x600050D")]
	[Address(RVA = "0x7B1738", Offset = "0x7B1738", VA = "0x7B1738")]
	private void UpdateMesh(OVROverlay.OverlayShape shape, Vector3 position, Quaternion rotation, Vector3 scale, Rect rect)
	{
	}

	[Token(Token = "0x600050E")]
	[Address(RVA = "0x7B1BA0", Offset = "0x7B1BA0", VA = "0x7B1BA0")]
	public static void GenerateMesh(List<Vector3> verts, List<Vector2> uvs, List<int> tris, OVROverlay.OverlayShape shape, Vector3 position, Quaternion rotation, Vector3 scale, Rect rect)
	{
	}

	[Token(Token = "0x600050F")]
	[Address(RVA = "0x7B34FC", Offset = "0x7B34FC", VA = "0x7B34FC")]
	private static Vector2 GetSphereUV(float theta, float phi, float expand_coef)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000510")]
	[Address(RVA = "0x7B3564", Offset = "0x7B3564", VA = "0x7B3564")]
	private static Vector3 GetSphereVert(float theta, float phi)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000511")]
	[Address(RVA = "0x7B1E8C", Offset = "0x7B1E8C", VA = "0x7B1E8C")]
	public static void BuildSphere(List<Vector3> verts, List<Vector2> uv, List<int> triangles, Vector3 position, Quaternion rotation, Vector3 scale, Rect rect, float worldScale = 800f, int latitudes = 128, int longitudes = 128, float expand_coef = 1f)
	{
	}

	[Token(Token = "0x6000512")]
	[Address(RVA = "0x7B3668", Offset = "0x7B3668", VA = "0x7B3668")]
	private static Vector2 GetCubeUV(CubeFace face, Vector2 sideUV, float expand_coef)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000513")]
	[Address(RVA = "0x7B38F4", Offset = "0x7B38F4", VA = "0x7B38F4")]
	private static Vector3 GetCubeVert(CubeFace face, Vector2 sideUV, float expand_coef)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000514")]
	[Address(RVA = "0x7B2510", Offset = "0x7B2510", VA = "0x7B2510")]
	public static void BuildCube(List<Vector3> verts, List<Vector2> uv, List<int> triangles, Vector3 position, Quaternion rotation, Vector3 scale, float worldScale = 800f, int subQuads = 1, float expand_coef = 1.01f)
	{
	}

	[Token(Token = "0x6000515")]
	[Address(RVA = "0x7B29F0", Offset = "0x7B29F0", VA = "0x7B29F0")]
	public static void BuildQuad(List<Vector3> verts, List<Vector2> uv, List<int> triangles, Rect rect)
	{
	}

	[Token(Token = "0x6000516")]
	[Address(RVA = "0x7B2F54", Offset = "0x7B2F54", VA = "0x7B2F54")]
	public static void BuildHemicylinder(List<Vector3> verts, List<Vector2> uv, List<int> triangles, Vector3 scale, Rect rect, int longitudes = 128)
	{
	}

	[Token(Token = "0x6000517")]
	[Address(RVA = "0x7B3B2C", Offset = "0x7B3B2C", VA = "0x7B3B2C")]
	public OVROverlayMeshGenerator()
	{
	}
}
[Token(Token = "0x20000EB")]
public class OVRPlatformMenu : MonoBehaviour
{
	[Token(Token = "0x2000446")]
	public enum eHandler
	{
		[Token(Token = "0x4001A39")]
		ShowConfirmQuit,
		[Token(Token = "0x4001A3A")]
		RetreatOneLevel
	}

	[Token(Token = "0x2000447")]
	private enum eBackButtonAction
	{
		[Token(Token = "0x4001A3C")]
		NONE,
		[Token(Token = "0x4001A3D")]
		SHORT_PRESS
	}

	[Token(Token = "0x40003EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private OVRInput.RawButton inputCode;

	[Token(Token = "0x40003ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public eHandler shortPressHandler;

	[Token(Token = "0x40003EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Func<bool> OnShortPress;

	[Token(Token = "0x40003EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Stack<string> sceneStack;

	[Token(Token = "0x6000519")]
	[Address(RVA = "0x7B4204", Offset = "0x7B4204", VA = "0x7B4204")]
	private eBackButtonAction HandleBackButtonState()
	{
		return default(eBackButtonAction);
	}

	[Token(Token = "0x600051A")]
	[Address(RVA = "0x7B4290", Offset = "0x7B4290", VA = "0x7B4290")]
	private void Awake()
	{
	}

	[Token(Token = "0x600051B")]
	[Address(RVA = "0x7B4424", Offset = "0x7B4424", VA = "0x7B4424")]
	private void ShowConfirmQuitMenu()
	{
	}

	[Token(Token = "0x600051C")]
	[Address(RVA = "0x7B4528", Offset = "0x7B4528", VA = "0x7B4528")]
	private static bool RetreatOneLevel()
	{
		return default(bool);
	}

	[Token(Token = "0x600051D")]
	[Address(RVA = "0x7B4650", Offset = "0x7B4650", VA = "0x7B4650")]
	private void Update()
	{
	}

	[Token(Token = "0x600051E")]
	[Address(RVA = "0x7B46DC", Offset = "0x7B46DC", VA = "0x7B46DC")]
	public OVRPlatformMenu()
	{
	}
}
[Token(Token = "0x20000EC")]
public static class OVRPlugin
{
	[StructLayout(0)]
	[Token(Token = "0x2000448")]
	private class GUID
	{
		[Token(Token = "0x4001A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int a;

		[Token(Token = "0x4001A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public short b;

		[Token(Token = "0x4001A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
		public short c;

		[Token(Token = "0x4001A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte d0;

		[Token(Token = "0x4001A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public byte d1;

		[Token(Token = "0x4001A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public byte d2;

		[Token(Token = "0x4001A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
		public byte d3;

		[Token(Token = "0x4001A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public byte d4;

		[Token(Token = "0x4001A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		public byte d5;

		[Token(Token = "0x4001A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
		public byte d6;

		[Token(Token = "0x4001A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17")]
		public byte d7;

		[Token(Token = "0x6001ADE")]
		[Address(RVA = "0x7BA284", Offset = "0x7BA284", VA = "0x7BA284")]
		public GUID()
		{
		}
	}

	[Token(Token = "0x2000449")]
	public enum Bool
	{
		[Token(Token = "0x4001A4A")]
		False,
		[Token(Token = "0x4001A4B")]
		True
	}

	[Token(Token = "0x200044A")]
	public enum Result
	{
		[Token(Token = "0x4001A4D")]
		Success = 0,
		[Token(Token = "0x4001A4E")]
		Failure = -1000,
		[Token(Token = "0x4001A4F")]
		Failure_InvalidParameter = -1001,
		[Token(Token = "0x4001A50")]
		Failure_NotInitialized = -1002,
		[Token(Token = "0x4001A51")]
		Failure_InvalidOperation = -1003,
		[Token(Token = "0x4001A52")]
		Failure_Unsupported = -1004,
		[Token(Token = "0x4001A53")]
		Failure_NotYetImplemented = -1005,
		[Token(Token = "0x4001A54")]
		Failure_OperationFailed = -1006,
		[Token(Token = "0x4001A55")]
		Failure_InsufficientSize = -1007,
		[Token(Token = "0x4001A56")]
		Failure_DataIsInvalid = -1008,
		[Token(Token = "0x4001A57")]
		Failure_DeprecatedOperation = -1009
	}

	[Token(Token = "0x200044B")]
	public enum CameraStatus
	{
		[Token(Token = "0x4001A59")]
		CameraStatus_None = 0,
		[Token(Token = "0x4001A5A")]
		CameraStatus_Connected = 1,
		[Token(Token = "0x4001A5B")]
		CameraStatus_Calibrating = 2,
		[Token(Token = "0x4001A5C")]
		CameraStatus_CalibrationFailed = 3,
		[Token(Token = "0x4001A5D")]
		CameraStatus_Calibrated = 4,
		[Token(Token = "0x4001A5E")]
		CameraStatus_ThirdPerson = 5,
		[Token(Token = "0x4001A5F")]
		CameraStatus_EnumSize = int.MaxValue
	}

	[Token(Token = "0x200044C")]
	public enum CameraAnchorType
	{
		[Token(Token = "0x4001A61")]
		CameraAnchorType_PreDefined = 0,
		[Token(Token = "0x4001A62")]
		CameraAnchorType_Custom = 1,
		[Token(Token = "0x4001A63")]
		CameraAnchorType_Count = 2,
		[Token(Token = "0x4001A64")]
		CameraAnchorType_EnumSize = int.MaxValue
	}

	[Token(Token = "0x200044D")]
	public enum Eye
	{
		[Token(Token = "0x4001A66")]
		None = -1,
		[Token(Token = "0x4001A67")]
		Left,
		[Token(Token = "0x4001A68")]
		Right,
		[Token(Token = "0x4001A69")]
		Count
	}

	[Token(Token = "0x200044E")]
	public enum Tracker
	{
		[Token(Token = "0x4001A6B")]
		None = -1,
		[Token(Token = "0x4001A6C")]
		Zero,
		[Token(Token = "0x4001A6D")]
		One,
		[Token(Token = "0x4001A6E")]
		Two,
		[Token(Token = "0x4001A6F")]
		Three,
		[Token(Token = "0x4001A70")]
		Count
	}

	[Token(Token = "0x200044F")]
	public enum Node
	{
		[Token(Token = "0x4001A72")]
		None = -1,
		[Token(Token = "0x4001A73")]
		EyeLeft,
		[Token(Token = "0x4001A74")]
		EyeRight,
		[Token(Token = "0x4001A75")]
		EyeCenter,
		[Token(Token = "0x4001A76")]
		HandLeft,
		[Token(Token = "0x4001A77")]
		HandRight,
		[Token(Token = "0x4001A78")]
		TrackerZero,
		[Token(Token = "0x4001A79")]
		TrackerOne,
		[Token(Token = "0x4001A7A")]
		TrackerTwo,
		[Token(Token = "0x4001A7B")]
		TrackerThree,
		[Token(Token = "0x4001A7C")]
		Head,
		[Token(Token = "0x4001A7D")]
		DeviceObjectZero,
		[Token(Token = "0x4001A7E")]
		Count
	}

	[Token(Token = "0x2000450")]
	public enum Controller
	{
		[Token(Token = "0x4001A80")]
		None = 0,
		[Token(Token = "0x4001A81")]
		LTouch = 1,
		[Token(Token = "0x4001A82")]
		RTouch = 2,
		[Token(Token = "0x4001A83")]
		Touch = 3,
		[Token(Token = "0x4001A84")]
		Remote = 4,
		[Token(Token = "0x4001A85")]
		Gamepad = 16,
		[Token(Token = "0x4001A86")]
		LHand = 32,
		[Token(Token = "0x4001A87")]
		RHand = 64,
		[Token(Token = "0x4001A88")]
		Hands = 96,
		[Token(Token = "0x4001A89")]
		Active = int.MinValue,
		[Token(Token = "0x4001A8A")]
		All = -1
	}

	[Token(Token = "0x2000451")]
	public enum Handedness
	{
		[Token(Token = "0x4001A8C")]
		Unsupported,
		[Token(Token = "0x4001A8D")]
		LeftHanded,
		[Token(Token = "0x4001A8E")]
		RightHanded
	}

	[Token(Token = "0x2000452")]
	public enum TrackingOrigin
	{
		[Token(Token = "0x4001A90")]
		EyeLevel,
		[Token(Token = "0x4001A91")]
		FloorLevel,
		[Token(Token = "0x4001A92")]
		Stage,
		[Token(Token = "0x4001A93")]
		Count
	}

	[Token(Token = "0x2000453")]
	public enum RecenterFlags
	{
		[Token(Token = "0x4001A95")]
		Default = 0,
		[Token(Token = "0x4001A96")]
		IgnoreAll = int.MinValue,
		[Token(Token = "0x4001A97")]
		Count = -2147483647
	}

	[Token(Token = "0x2000454")]
	public enum BatteryStatus
	{
		[Token(Token = "0x4001A99")]
		Charging,
		[Token(Token = "0x4001A9A")]
		Discharging,
		[Token(Token = "0x4001A9B")]
		Full,
		[Token(Token = "0x4001A9C")]
		NotCharging,
		[Token(Token = "0x4001A9D")]
		Unknown
	}

	[Token(Token = "0x2000455")]
	public enum EyeTextureFormat
	{
		[Token(Token = "0x4001A9F")]
		Default = 0,
		[Token(Token = "0x4001AA0")]
		R8G8B8A8_sRGB = 0,
		[Token(Token = "0x4001AA1")]
		R8G8B8A8 = 1,
		[Token(Token = "0x4001AA2")]
		R16G16B16A16_FP = 2,
		[Token(Token = "0x4001AA3")]
		R11G11B10_FP = 3,
		[Token(Token = "0x4001AA4")]
		B8G8R8A8_sRGB = 4,
		[Token(Token = "0x4001AA5")]
		B8G8R8A8 = 5,
		[Token(Token = "0x4001AA6")]
		R5G6B5 = 11,
		[Token(Token = "0x4001AA7")]
		EnumSize = int.MaxValue
	}

	[Token(Token = "0x2000456")]
	public enum PlatformUI
	{
		[Token(Token = "0x4001AA9")]
		None = -1,
		[Token(Token = "0x4001AAA")]
		ConfirmQuit = 1,
		[Token(Token = "0x4001AAB")]
		GlobalMenuTutorial = 2
	}

	[Token(Token = "0x2000457")]
	public enum SystemRegion
	{
		[Token(Token = "0x4001AAD")]
		Unspecified,
		[Token(Token = "0x4001AAE")]
		Japan,
		[Token(Token = "0x4001AAF")]
		China
	}

	[Token(Token = "0x2000458")]
	public enum SystemHeadset
	{
		[Token(Token = "0x4001AB1")]
		None = 0,
		[Token(Token = "0x4001AB2")]
		Oculus_Quest = 8,
		[Token(Token = "0x4001AB3")]
		Placeholder_9 = 9,
		[Token(Token = "0x4001AB4")]
		Placeholder_10 = 10,
		[Token(Token = "0x4001AB5")]
		Placeholder_11 = 11,
		[Token(Token = "0x4001AB6")]
		Placeholder_12 = 12,
		[Token(Token = "0x4001AB7")]
		Placeholder_13 = 13,
		[Token(Token = "0x4001AB8")]
		Placeholder_14 = 14,
		[Token(Token = "0x4001AB9")]
		Rift_DK1 = 4096,
		[Token(Token = "0x4001ABA")]
		Rift_DK2 = 4097,
		[Token(Token = "0x4001ABB")]
		Rift_CV1 = 4098,
		[Token(Token = "0x4001ABC")]
		Rift_CB = 4099,
		[Token(Token = "0x4001ABD")]
		Rift_S = 4100,
		[Token(Token = "0x4001ABE")]
		Oculus_Link_Quest = 4101,
		[Token(Token = "0x4001ABF")]
		PC_Placeholder_4102 = 4102,
		[Token(Token = "0x4001AC0")]
		PC_Placeholder_4103 = 4103,
		[Token(Token = "0x4001AC1")]
		PC_Placeholder_4104 = 4104,
		[Token(Token = "0x4001AC2")]
		PC_Placeholder_4105 = 4105,
		[Token(Token = "0x4001AC3")]
		PC_Placeholder_4106 = 4106,
		[Token(Token = "0x4001AC4")]
		PC_Placeholder_4107 = 4107
	}

	[Token(Token = "0x2000459")]
	public enum OverlayShape
	{
		[Token(Token = "0x4001AC6")]
		Quad = 0,
		[Token(Token = "0x4001AC7")]
		Cylinder = 1,
		[Token(Token = "0x4001AC8")]
		Cubemap = 2,
		[Token(Token = "0x4001AC9")]
		OffcenterCubemap = 4,
		[Token(Token = "0x4001ACA")]
		Equirect = 5
	}

	[Token(Token = "0x200045A")]
	public enum Step
	{
		[Token(Token = "0x4001ACC")]
		Render = -1,
		[Token(Token = "0x4001ACD")]
		Physics
	}

	[Token(Token = "0x200045B")]
	public enum CameraDevice
	{
		[Token(Token = "0x4001ACF")]
		None = 0,
		[Token(Token = "0x4001AD0")]
		WebCamera0 = 100,
		[Token(Token = "0x4001AD1")]
		WebCamera1 = 101,
		[Token(Token = "0x4001AD2")]
		ZEDCamera = 300
	}

	[Token(Token = "0x200045C")]
	public enum CameraDeviceDepthSensingMode
	{
		[Token(Token = "0x4001AD4")]
		Standard,
		[Token(Token = "0x4001AD5")]
		Fill
	}

	[Token(Token = "0x200045D")]
	public enum CameraDeviceDepthQuality
	{
		[Token(Token = "0x4001AD7")]
		Low,
		[Token(Token = "0x4001AD8")]
		Medium,
		[Token(Token = "0x4001AD9")]
		High
	}

	[Token(Token = "0x200045E")]
	public enum FixedFoveatedRenderingLevel
	{
		[Token(Token = "0x4001ADB")]
		Off = 0,
		[Token(Token = "0x4001ADC")]
		Low = 1,
		[Token(Token = "0x4001ADD")]
		Medium = 2,
		[Token(Token = "0x4001ADE")]
		High = 3,
		[Token(Token = "0x4001ADF")]
		HighTop = 4,
		[Token(Token = "0x4001AE0")]
		EnumSize = int.MaxValue
	}

	[Token(Token = "0x200045F")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x2EAB34", Offset = "0x2EAB34")]
	public enum TiledMultiResLevel
	{
		[Token(Token = "0x4001AE2")]
		Off = 0,
		[Token(Token = "0x4001AE3")]
		LMSLow = 1,
		[Token(Token = "0x4001AE4")]
		LMSMedium = 2,
		[Token(Token = "0x4001AE5")]
		LMSHigh = 3,
		[Token(Token = "0x4001AE6")]
		LMSHighTop = 4,
		[Token(Token = "0x4001AE7")]
		EnumSize = int.MaxValue
	}

	[Token(Token = "0x2000460")]
	public enum PerfMetrics
	{
		[Token(Token = "0x4001AE9")]
		App_CpuTime_Float = 0,
		[Token(Token = "0x4001AEA")]
		App_GpuTime_Float = 1,
		[Token(Token = "0x4001AEB")]
		Compositor_CpuTime_Float = 3,
		[Token(Token = "0x4001AEC")]
		Compositor_GpuTime_Float = 4,
		[Token(Token = "0x4001AED")]
		Compositor_DroppedFrameCount_Int = 5,
		[Token(Token = "0x4001AEE")]
		System_GpuUtilPercentage_Float = 7,
		[Token(Token = "0x4001AEF")]
		System_CpuUtilAveragePercentage_Float = 8,
		[Token(Token = "0x4001AF0")]
		System_CpuUtilWorstPercentage_Float = 9,
		[Token(Token = "0x4001AF1")]
		Device_CpuClockFrequencyInMHz_Float = 10,
		[Token(Token = "0x4001AF2")]
		Device_GpuClockFrequencyInMHz_Float = 11,
		[Token(Token = "0x4001AF3")]
		Device_CpuClockLevel_Int = 12,
		[Token(Token = "0x4001AF4")]
		Device_GpuClockLevel_Int = 13,
		[Token(Token = "0x4001AF5")]
		Count = 14,
		[Token(Token = "0x4001AF6")]
		EnumSize = int.MaxValue
	}

	[Token(Token = "0x2000461")]
	public struct CameraDeviceIntrinsicsParameters
	{
		[Token(Token = "0x4001AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private float fx;

		[Token(Token = "0x4001AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private float fy;

		[Token(Token = "0x4001AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private float cx;

		[Token(Token = "0x4001AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private float cy;

		[Token(Token = "0x4001AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private double disto0;

		[Token(Token = "0x4001AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private double disto1;

		[Token(Token = "0x4001AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private double disto2;

		[Token(Token = "0x4001AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private double disto3;

		[Token(Token = "0x4001AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private double disto4;

		[Token(Token = "0x4001B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float v_fov;

		[Token(Token = "0x4001B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float h_fov;

		[Token(Token = "0x4001B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float d_fov;

		[Token(Token = "0x4001B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int w;

		[Token(Token = "0x4001B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int h;
	}

	[Token(Token = "0x2000462")]
	private enum OverlayFlag
	{
		[Token(Token = "0x4001B06")]
		None = 0,
		[Token(Token = "0x4001B07")]
		OnTop = 1,
		[Token(Token = "0x4001B08")]
		HeadLocked = 2,
		[Token(Token = "0x4001B09")]
		NoDepth = 4,
		[Token(Token = "0x4001B0A")]
		ExpensiveSuperSample = 8,
		[Token(Token = "0x4001B0B")]
		ShapeFlag_Quad = 0,
		[Token(Token = "0x4001B0C")]
		ShapeFlag_Cylinder = 16,
		[Token(Token = "0x4001B0D")]
		ShapeFlag_Cubemap = 32,
		[Token(Token = "0x4001B0E")]
		ShapeFlag_OffcenterCubemap = 64,
		[Token(Token = "0x4001B0F")]
		ShapeFlagRangeMask = 240,
		[Token(Token = "0x4001B10")]
		Hidden = 512
	}

	[Token(Token = "0x2000463")]
	public struct Vector2f
	{
		[Token(Token = "0x4001B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x4001B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;
	}

	[Token(Token = "0x2000464")]
	public struct Vector3f
	{
		[Token(Token = "0x4001B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x4001B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x4001B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float z;

		[Token(Token = "0x4001B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Vector3f zero;

		[Token(Token = "0x6001ADF")]
		[Address(RVA = "0x3AE9DC", Offset = "0x3AE9DC", VA = "0x3AE9DC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}

	[Token(Token = "0x2000465")]
	public struct Vector4f
	{
		[Token(Token = "0x4001B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x4001B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x4001B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float z;

		[Token(Token = "0x4001B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float w;

		[Token(Token = "0x4001B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Vector4f zero;

		[Token(Token = "0x6001AE1")]
		[Address(RVA = "0x3AE9E4", Offset = "0x3AE9E4", VA = "0x3AE9E4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}

	[Token(Token = "0x2000466")]
	public struct Vector4s
	{
		[Token(Token = "0x4001B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public short x;

		[Token(Token = "0x4001B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public short y;

		[Token(Token = "0x4001B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public short z;

		[Token(Token = "0x4001B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6")]
		public short w;

		[Token(Token = "0x4001B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Vector4s zero;

		[Token(Token = "0x6001AE3")]
		[Address(RVA = "0x3AE9EC", Offset = "0x3AE9EC", VA = "0x3AE9EC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}

	[Token(Token = "0x2000467")]
	public struct Quatf
	{
		[Token(Token = "0x4001B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x4001B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x4001B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float z;

		[Token(Token = "0x4001B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float w;

		[Token(Token = "0x4001B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Quatf identity;

		[Token(Token = "0x6001AE5")]
		[Address(RVA = "0x3AE888", Offset = "0x3AE888", VA = "0x3AE888", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}

	[Token(Token = "0x2000468")]
	public struct Posef
	{
		[Token(Token = "0x4001B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Quatf Orientation;

		[Token(Token = "0x4001B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3f Position;

		[Token(Token = "0x4001B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Posef identity;

		[Token(Token = "0x6001AE7")]
		[Address(RVA = "0x3AE880", Offset = "0x3AE880", VA = "0x3AE880", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}

	[Token(Token = "0x2000469")]
	public struct TextureRectMatrixf
	{
		[Token(Token = "0x4001B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Rect leftRect;

		[Token(Token = "0x4001B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Rect rightRect;

		[Token(Token = "0x4001B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector4 leftScaleBias;

		[Token(Token = "0x4001B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector4 rightScaleBias;

		[Token(Token = "0x4001B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly TextureRectMatrixf zero;

		[Token(Token = "0x6001AE9")]
		[Address(RVA = "0x3AE9D4", Offset = "0x3AE9D4", VA = "0x3AE9D4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}

	[Token(Token = "0x200046A")]
	public struct PoseStatef
	{
		[Token(Token = "0x4001B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Posef Pose;

		[Token(Token = "0x4001B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3f Velocity;

		[Token(Token = "0x4001B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3f Acceleration;

		[Token(Token = "0x4001B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3f AngularVelocity;

		[Token(Token = "0x4001B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3f AngularAcceleration;

		[Token(Token = "0x4001B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public double Time;

		[Token(Token = "0x4001B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly PoseStatef identity;
	}

	[Token(Token = "0x200046B")]
	public struct ControllerState4
	{
		[Token(Token = "0x4001B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint ConnectedControllers;

		[Token(Token = "0x4001B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint Buttons;

		[Token(Token = "0x4001B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint Touches;

		[Token(Token = "0x4001B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint NearTouches;

		[Token(Token = "0x4001B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float LIndexTrigger;

		[Token(Token = "0x4001B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float RIndexTrigger;

		[Token(Token = "0x4001B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float LHandTrigger;

		[Token(Token = "0x4001B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float RHandTrigger;

		[Token(Token = "0x4001B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector2f LThumbstick;

		[Token(Token = "0x4001B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2f RThumbstick;

		[Token(Token = "0x4001B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector2f LTouchpad;

		[Token(Token = "0x4001B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector2f RTouchpad;

		[Token(Token = "0x4001B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public byte LBatteryPercentRemaining;

		[Token(Token = "0x4001B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public byte RBatteryPercentRemaining;

		[Token(Token = "0x4001B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		public byte LRecenterCount;

		[Token(Token = "0x4001B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x43")]
		public byte RRecenterCount;

		[Token(Token = "0x4001B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public byte Reserved_27;

		[Token(Token = "0x4001B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		public byte Reserved_26;

		[Token(Token = "0x4001B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
		public byte Reserved_25;

		[Token(Token = "0x4001B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
		public byte Reserved_24;

		[Token(Token = "0x4001B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public byte Reserved_23;

		[Token(Token = "0x4001B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public byte Reserved_22;

		[Token(Token = "0x4001B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		public byte Reserved_21;

		[Token(Token = "0x4001B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4B")]
		public byte Reserved_20;

		[Token(Token = "0x4001B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public byte Reserved_19;

		[Token(Token = "0x4001B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		public byte Reserved_18;

		[Token(Token = "0x4001B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
		public byte Reserved_17;

		[Token(Token = "0x4001B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F")]
		public byte Reserved_16;

		[Token(Token = "0x4001B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public byte Reserved_15;

		[Token(Token = "0x4001B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public byte Reserved_14;

		[Token(Token = "0x4001B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		public byte Reserved_13;

		[Token(Token = "0x4001B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
		public byte Reserved_12;

		[Token(Token = "0x4001B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public byte Reserved_11;

		[Token(Token = "0x4001B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		public byte Reserved_10;

		[Token(Token = "0x4001B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
		public byte Reserved_09;

		[Token(Token = "0x4001B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x57")]
		public byte Reserved_08;

		[Token(Token = "0x4001B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public byte Reserved_07;

		[Token(Token = "0x4001B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		public byte Reserved_06;

		[Token(Token = "0x4001B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		public byte Reserved_05;

		[Token(Token = "0x4001B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5B")]
		public byte Reserved_04;

		[Token(Token = "0x4001B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public byte Reserved_03;

		[Token(Token = "0x4001B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
		public byte Reserved_02;

		[Token(Token = "0x4001B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5E")]
		public byte Reserved_01;

		[Token(Token = "0x4001B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5F")]
		public byte Reserved_00;

		[Token(Token = "0x6001AEC")]
		[Address(RVA = "0x3A9204", Offset = "0x3A9204", VA = "0x3A9204")]
		public ControllerState4(ControllerState2 cs)
		{
		}
	}

	[Token(Token = "0x200046C")]
	public struct ControllerState2
	{
		[Token(Token = "0x4001B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint ConnectedControllers;

		[Token(Token = "0x4001B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint Buttons;

		[Token(Token = "0x4001B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint Touches;

		[Token(Token = "0x4001B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint NearTouches;

		[Token(Token = "0x4001B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float LIndexTrigger;

		[Token(Token = "0x4001B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float RIndexTrigger;

		[Token(Token = "0x4001B67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float LHandTrigger;

		[Token(Token = "0x4001B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float RHandTrigger;

		[Token(Token = "0x4001B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector2f LThumbstick;

		[Token(Token = "0x4001B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2f RThumbstick;

		[Token(Token = "0x4001B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector2f LTouchpad;

		[Token(Token = "0x4001B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector2f RTouchpad;

		[Token(Token = "0x6001AED")]
		[Address(RVA = "0x3A91AC", Offset = "0x3A91AC", VA = "0x3A91AC")]
		public ControllerState2(ControllerState cs)
		{
		}
	}

	[Token(Token = "0x200046D")]
	public struct ControllerState
	{
		[Token(Token = "0x4001B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint ConnectedControllers;

		[Token(Token = "0x4001B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint Buttons;

		[Token(Token = "0x4001B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint Touches;

		[Token(Token = "0x4001B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint NearTouches;

		[Token(Token = "0x4001B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float LIndexTrigger;

		[Token(Token = "0x4001B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float RIndexTrigger;

		[Token(Token = "0x4001B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float LHandTrigger;

		[Token(Token = "0x4001B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float RHandTrigger;

		[Token(Token = "0x4001B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector2f LThumbstick;

		[Token(Token = "0x4001B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2f RThumbstick;
	}

	[Token(Token = "0x200046E")]
	public struct HapticsBuffer
	{
		[Token(Token = "0x4001B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr Samples;

		[Token(Token = "0x4001B78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int SamplesCount;
	}

	[Token(Token = "0x200046F")]
	public struct HapticsState
	{
		[Token(Token = "0x4001B79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int SamplesAvailable;

		[Token(Token = "0x4001B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int SamplesQueued;
	}

	[Token(Token = "0x2000470")]
	public struct HapticsDesc
	{
		[Token(Token = "0x4001B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int SampleRateHz;

		[Token(Token = "0x4001B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int SampleSizeInBytes;

		[Token(Token = "0x4001B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int MinimumSafeSamplesQueued;

		[Token(Token = "0x4001B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int MinimumBufferSamplesCount;

		[Token(Token = "0x4001B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int OptimalBufferSamplesCount;

		[Token(Token = "0x4001B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int MaximumBufferSamplesCount;
	}

	[Token(Token = "0x2000471")]
	public struct AppPerfFrameStats
	{
		[Token(Token = "0x4001B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int HmdVsyncIndex;

		[Token(Token = "0x4001B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int AppFrameIndex;

		[Token(Token = "0x4001B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int AppDroppedFrameCount;

		[Token(Token = "0x4001B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float AppMotionToPhotonLatency;

		[Token(Token = "0x4001B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float AppQueueAheadTime;

		[Token(Token = "0x4001B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float AppCpuElapsedTime;

		[Token(Token = "0x4001B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float AppGpuElapsedTime;

		[Token(Token = "0x4001B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int CompositorFrameIndex;

		[Token(Token = "0x4001B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int CompositorDroppedFrameCount;

		[Token(Token = "0x4001B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float CompositorLatency;

		[Token(Token = "0x4001B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float CompositorCpuElapsedTime;

		[Token(Token = "0x4001B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float CompositorGpuElapsedTime;

		[Token(Token = "0x4001B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float CompositorCpuStartToGpuEndElapsedTime;

		[Token(Token = "0x4001B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float CompositorGpuEndToVsyncElapsedTime;
	}

	[Token(Token = "0x2000472")]
	public struct AppPerfStats
	{
		[Token(Token = "0x4001B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppPerfFrameStats[] FrameStats;

		[Token(Token = "0x4001B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int FrameStatsCount;

		[Token(Token = "0x4001B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Bool AnyFrameStatsDropped;

		[Token(Token = "0x4001B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float AdaptiveGpuPerformanceScale;
	}

	[Token(Token = "0x2000473")]
	public struct Sizei
	{
		[Token(Token = "0x4001B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int w;

		[Token(Token = "0x4001B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int h;

		[Token(Token = "0x4001B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Sizei zero;
	}

	[Token(Token = "0x2000474")]
	public struct Sizef
	{
		[Token(Token = "0x4001B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float w;

		[Token(Token = "0x4001B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float h;

		[Token(Token = "0x4001B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Sizef zero;
	}

	[Token(Token = "0x2000475")]
	public struct Vector2i
	{
		[Token(Token = "0x4001B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int x;

		[Token(Token = "0x4001B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int y;
	}

	[Token(Token = "0x2000476")]
	public struct Recti
	{
		[Token(Token = "0x4001B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Vector2i Pos;

		[Token(Token = "0x4001B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private Sizei Size;
	}

	[Token(Token = "0x2000477")]
	public struct Rectf
	{
		[Token(Token = "0x4001B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Vector2f Pos;

		[Token(Token = "0x4001B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private Sizef Size;
	}

	[Token(Token = "0x2000478")]
	public struct Frustumf
	{
		[Token(Token = "0x4001B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float zNear;

		[Token(Token = "0x4001BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float zFar;

		[Token(Token = "0x4001BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float fovX;

		[Token(Token = "0x4001BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float fovY;
	}

	[Token(Token = "0x2000479")]
	public struct Frustumf2
	{
		[Token(Token = "0x4001BA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float zNear;

		[Token(Token = "0x4001BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float zFar;

		[Token(Token = "0x4001BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Fovf Fov;
	}

	[Token(Token = "0x200047A")]
	public enum BoundaryType
	{
		[Token(Token = "0x4001BA7")]
		OuterBoundary = 1,
		[Token(Token = "0x4001BA8")]
		PlayArea = 0x100
	}

	[Token(Token = "0x200047B")]
	public struct BoundaryTestResult
	{
		[Token(Token = "0x4001BA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Bool IsTriggering;

		[Token(Token = "0x4001BAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float ClosestDistance;

		[Token(Token = "0x4001BAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector3f ClosestPoint;

		[Token(Token = "0x4001BAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector3f ClosestPointNormal;
	}

	[Token(Token = "0x200047C")]
	public struct BoundaryGeometry
	{
		[Token(Token = "0x4001BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public BoundaryType BoundaryType;

		[Token(Token = "0x4001BAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Vector3f[] Points;

		[Token(Token = "0x4001BAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int PointsCount;
	}

	[Token(Token = "0x200047D")]
	public struct Colorf
	{
		[Token(Token = "0x4001BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float r;

		[Token(Token = "0x4001BB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float g;

		[Token(Token = "0x4001BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float b;

		[Token(Token = "0x4001BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float a;
	}

	[Token(Token = "0x200047E")]
	public struct Fovf
	{
		[Token(Token = "0x4001BB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float UpTan;

		[Token(Token = "0x4001BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float DownTan;

		[Token(Token = "0x4001BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float LeftTan;

		[Token(Token = "0x4001BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float RightTan;
	}

	[Token(Token = "0x200047F")]
	public struct CameraIntrinsics
	{
		[Token(Token = "0x4001BB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Bool IsValid;

		[Token(Token = "0x4001BB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public double LastChangedTimeSeconds;

		[Token(Token = "0x4001BBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Fovf FOVPort;

		[Token(Token = "0x4001BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float VirtualNearPlaneDistanceMeters;

		[Token(Token = "0x4001BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float VirtualFarPlaneDistanceMeters;

		[Token(Token = "0x4001BBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Sizei ImageSensorPixelResolution;
	}

	[Token(Token = "0x2000480")]
	public struct CameraExtrinsics
	{
		[Token(Token = "0x4001BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Bool IsValid;

		[Token(Token = "0x4001BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public double LastChangedTimeSeconds;

		[Token(Token = "0x4001BC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CameraStatus CameraStatusData;

		[Token(Token = "0x4001BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Node AttachedToNode;

		[Token(Token = "0x4001BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Posef RelativePose;
	}

	[Token(Token = "0x2000481")]
	public enum LayerLayout
	{
		[Token(Token = "0x4001BC4")]
		Stereo = 0,
		[Token(Token = "0x4001BC5")]
		Mono = 1,
		[Token(Token = "0x4001BC6")]
		DoubleWide = 2,
		[Token(Token = "0x4001BC7")]
		Array = 3,
		[Token(Token = "0x4001BC8")]
		EnumSize = 15
	}

	[Token(Token = "0x2000482")]
	public enum LayerFlags
	{
		[Token(Token = "0x4001BCA")]
		Static = 1,
		[Token(Token = "0x4001BCB")]
		LoadingScreen = 2,
		[Token(Token = "0x4001BCC")]
		SymmetricFov = 4,
		[Token(Token = "0x4001BCD")]
		TextureOriginAtBottomLeft = 8,
		[Token(Token = "0x4001BCE")]
		ChromaticAberrationCorrection = 0x10,
		[Token(Token = "0x4001BCF")]
		NoAllocation = 0x20,
		[Token(Token = "0x4001BD0")]
		ProtectedContent = 0x40,
		[Token(Token = "0x4001BD1")]
		AndroidSurfaceSwapChain = 0x80
	}

	[Token(Token = "0x2000483")]
	public struct LayerDesc
	{
		[Token(Token = "0x4001BD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public OverlayShape Shape;

		[Token(Token = "0x4001BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public LayerLayout Layout;

		[Token(Token = "0x4001BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Sizei TextureSize;

		[Token(Token = "0x4001BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int MipLevels;

		[Token(Token = "0x4001BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int SampleCount;

		[Token(Token = "0x4001BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EyeTextureFormat Format;

		[Token(Token = "0x4001BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int LayerFlags;

		[Token(Token = "0x4001BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Fovf[] Fov;

		[Token(Token = "0x4001BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Rectf[] VisibleRect;

		[Token(Token = "0x4001BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Sizei MaxViewportSize;

		[Token(Token = "0x4001BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private EyeTextureFormat DepthFormat;

		[Token(Token = "0x6001AF0")]
		[Address(RVA = "0x3A9950", Offset = "0x3A9950", VA = "0x3A9950", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}

	[Token(Token = "0x2000484")]
	public struct LayerSubmit
	{
		[Token(Token = "0x4001BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int LayerId;

		[Token(Token = "0x4001BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private int TextureStage;

		[Token(Token = "0x4001BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private Recti[] ViewportRect;

		[Token(Token = "0x4001BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private Posef Pose;

		[Token(Token = "0x4001BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int LayerSubmitFlags;
	}

	[Token(Token = "0x2000485")]
	public enum TrackingConfidence
	{
		[Token(Token = "0x4001BE3")]
		Low = 0,
		[Token(Token = "0x4001BE4")]
		High = 1065353216
	}

	[Token(Token = "0x2000486")]
	public enum Hand
	{
		[Token(Token = "0x4001BE6")]
		None = -1,
		[Token(Token = "0x4001BE7")]
		HandLeft,
		[Token(Token = "0x4001BE8")]
		HandRight
	}

	[Token(Token = "0x2000487")]
	[Flags]
	public enum HandStatus
	{
		[Token(Token = "0x4001BEA")]
		HandTracked = 1,
		[Token(Token = "0x4001BEB")]
		InputStateValid = 2,
		[Token(Token = "0x4001BEC")]
		SystemGestureInProgress = 0x40,
		[Token(Token = "0x4001BED")]
		DominantHand = 0x80,
		[Token(Token = "0x4001BEE")]
		MenuPressed = 0x100
	}

	[Token(Token = "0x2000488")]
	public enum BoneId
	{
		[Token(Token = "0x4001BF0")]
		Invalid = -1,
		[Token(Token = "0x4001BF1")]
		Hand_Start = 0,
		[Token(Token = "0x4001BF2")]
		Hand_WristRoot = 0,
		[Token(Token = "0x4001BF3")]
		Hand_ForearmStub = 1,
		[Token(Token = "0x4001BF4")]
		Hand_Thumb0 = 2,
		[Token(Token = "0x4001BF5")]
		Hand_Thumb1 = 3,
		[Token(Token = "0x4001BF6")]
		Hand_Thumb2 = 4,
		[Token(Token = "0x4001BF7")]
		Hand_Thumb3 = 5,
		[Token(Token = "0x4001BF8")]
		Hand_Index1 = 6,
		[Token(Token = "0x4001BF9")]
		Hand_Index2 = 7,
		[Token(Token = "0x4001BFA")]
		Hand_Index3 = 8,
		[Token(Token = "0x4001BFB")]
		Hand_Middle1 = 9,
		[Token(Token = "0x4001BFC")]
		Hand_Middle2 = 10,
		[Token(Token = "0x4001BFD")]
		Hand_Middle3 = 11,
		[Token(Token = "0x4001BFE")]
		Hand_Ring1 = 12,
		[Token(Token = "0x4001BFF")]
		Hand_Ring2 = 13,
		[Token(Token = "0x4001C00")]
		Hand_Ring3 = 14,
		[Token(Token = "0x4001C01")]
		Hand_Pinky0 = 15,
		[Token(Token = "0x4001C02")]
		Hand_Pinky1 = 16,
		[Token(Token = "0x4001C03")]
		Hand_Pinky2 = 17,
		[Token(Token = "0x4001C04")]
		Hand_Pinky3 = 18,
		[Token(Token = "0x4001C05")]
		Hand_MaxSkinnable = 19,
		[Token(Token = "0x4001C06")]
		Hand_ThumbTip = 19,
		[Token(Token = "0x4001C07")]
		Hand_IndexTip = 20,
		[Token(Token = "0x4001C08")]
		Hand_MiddleTip = 21,
		[Token(Token = "0x4001C09")]
		Hand_RingTip = 22,
		[Token(Token = "0x4001C0A")]
		Hand_PinkyTip = 23,
		[Token(Token = "0x4001C0B")]
		Hand_End = 24,
		[Token(Token = "0x4001C0C")]
		Max = 24
	}

	[Token(Token = "0x2000489")]
	public enum HandFinger
	{
		[Token(Token = "0x4001C0E")]
		Thumb,
		[Token(Token = "0x4001C0F")]
		Index,
		[Token(Token = "0x4001C10")]
		Middle,
		[Token(Token = "0x4001C11")]
		Ring,
		[Token(Token = "0x4001C12")]
		Pinky,
		[Token(Token = "0x4001C13")]
		Max
	}

	[Token(Token = "0x200048A")]
	[Flags]
	public enum HandFingerPinch
	{
		[Token(Token = "0x4001C15")]
		Thumb = 1,
		[Token(Token = "0x4001C16")]
		Index = 2,
		[Token(Token = "0x4001C17")]
		Middle = 4,
		[Token(Token = "0x4001C18")]
		Ring = 8,
		[Token(Token = "0x4001C19")]
		Pinky = 0x10
	}

	[Token(Token = "0x200048B")]
	public struct HandState
	{
		[Token(Token = "0x4001C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HandStatus Status;

		[Token(Token = "0x4001C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Posef RootPose;

		[Token(Token = "0x4001C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Quatf[] BoneRotations;

		[Token(Token = "0x4001C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public HandFingerPinch Pinches;

		[Token(Token = "0x4001C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float[] PinchStrength;

		[Token(Token = "0x4001C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Posef PointerPose;

		[Token(Token = "0x4001C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float HandScale;

		[Token(Token = "0x4001C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public TrackingConfidence HandConfidence;

		[Token(Token = "0x4001C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public TrackingConfidence[] FingerConfidences;

		[Token(Token = "0x4001C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public double RequestedTimeStamp;

		[Token(Token = "0x4001C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public double SampleTimeStamp;
	}

	[Token(Token = "0x200048C")]
	private struct HandStateInternal
	{
		[Token(Token = "0x4001C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HandStatus Status;

		[Token(Token = "0x4001C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Posef RootPose;

		[Token(Token = "0x4001C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Quatf BoneRotations_0;

		[Token(Token = "0x4001C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Quatf BoneRotations_1;

		[Token(Token = "0x4001C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Quatf BoneRotations_2;

		[Token(Token = "0x4001C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Quatf BoneRotations_3;

		[Token(Token = "0x4001C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Quatf BoneRotations_4;

		[Token(Token = "0x4001C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Quatf BoneRotations_5;

		[Token(Token = "0x4001C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Quatf BoneRotations_6;

		[Token(Token = "0x4001C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Quatf BoneRotations_7;

		[Token(Token = "0x4001C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Quatf BoneRotations_8;

		[Token(Token = "0x4001C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Quatf BoneRotations_9;

		[Token(Token = "0x4001C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Quatf BoneRotations_10;

		[Token(Token = "0x4001C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Quatf BoneRotations_11;

		[Token(Token = "0x4001C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Quatf BoneRotations_12;

		[Token(Token = "0x4001C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Quatf BoneRotations_13;

		[Token(Token = "0x4001C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Quatf BoneRotations_14;

		[Token(Token = "0x4001C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public Quatf BoneRotations_15;

		[Token(Token = "0x4001C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public Quatf BoneRotations_16;

		[Token(Token = "0x4001C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public Quatf BoneRotations_17;

		[Token(Token = "0x4001C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public Quatf BoneRotations_18;

		[Token(Token = "0x4001C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public Quatf BoneRotations_19;

		[Token(Token = "0x4001C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public Quatf BoneRotations_20;

		[Token(Token = "0x4001C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public Quatf BoneRotations_21;

		[Token(Token = "0x4001C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public Quatf BoneRotations_22;

		[Token(Token = "0x4001C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public Quatf BoneRotations_23;

		[Token(Token = "0x4001C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public HandFingerPinch Pinches;

		[Token(Token = "0x4001C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		public float PinchStrength_0;

		[Token(Token = "0x4001C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public float PinchStrength_1;

		[Token(Token = "0x4001C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		public float PinchStrength_2;

		[Token(Token = "0x4001C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public float PinchStrength_3;

		[Token(Token = "0x4001C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		public float PinchStrength_4;

		[Token(Token = "0x4001C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public Posef PointerPose;

		[Token(Token = "0x4001C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		public float HandScale;

		[Token(Token = "0x4001C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public TrackingConfidence HandConfidence;

		[Token(Token = "0x4001C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		public TrackingConfidence FingerConfidences_0;

		[Token(Token = "0x4001C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public TrackingConfidence FingerConfidences_1;

		[Token(Token = "0x4001C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		public TrackingConfidence FingerConfidences_2;

		[Token(Token = "0x4001C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public TrackingConfidence FingerConfidences_3;

		[Token(Token = "0x4001C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
		public TrackingConfidence FingerConfidences_4;

		[Token(Token = "0x4001C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		public double RequestedTimeStamp;

		[Token(Token = "0x4001C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		public double SampleTimeStamp;
	}

	[Token(Token = "0x200048D")]
	public struct BoneCapsule
	{
		[Token(Token = "0x4001C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public short BoneIndex;

		[Token(Token = "0x4001C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Vector3f[] Points;

		[Token(Token = "0x4001C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float Radius;
	}

	[Token(Token = "0x200048E")]
	public struct Bone
	{
		[Token(Token = "0x4001C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public BoneId Id;

		[Token(Token = "0x4001C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public short ParentBoneIndex;

		[Token(Token = "0x4001C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Posef Pose;
	}

	[Token(Token = "0x200048F")]
	public enum SkeletonConstants
	{
		[Token(Token = "0x4001C56")]
		MaxBones = 24,
		[Token(Token = "0x4001C57")]
		MaxBoneCapsules = 19
	}

	[Token(Token = "0x2000490")]
	public enum SkeletonType
	{
		[Token(Token = "0x4001C59")]
		None = -1,
		[Token(Token = "0x4001C5A")]
		HandLeft,
		[Token(Token = "0x4001C5B")]
		HandRight
	}

	[Token(Token = "0x2000491")]
	public struct Skeleton
	{
		[Token(Token = "0x4001C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SkeletonType Type;

		[Token(Token = "0x4001C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint NumBones;

		[Token(Token = "0x4001C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint NumBoneCapsules;

		[Token(Token = "0x4001C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Bone[] Bones;

		[Token(Token = "0x4001C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public BoneCapsule[] BoneCapsules;
	}

	[Token(Token = "0x2000492")]
	public enum MeshConstants
	{
		[Token(Token = "0x4001C62")]
		MaxVertices = 3000,
		[Token(Token = "0x4001C63")]
		MaxIndices = 18000
	}

	[Token(Token = "0x2000493")]
	public enum MeshType
	{
		[Token(Token = "0x4001C65")]
		None = -1,
		[Token(Token = "0x4001C66")]
		HandLeft,
		[Token(Token = "0x4001C67")]
		HandRight
	}

	[StructLayout(0)]
	[Token(Token = "0x2000494")]
	public class Mesh
	{
		[Token(Token = "0x4001C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public MeshType Type;

		[Token(Token = "0x4001C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint NumVertices;

		[Token(Token = "0x4001C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint NumIndices;

		[Token(Token = "0x4001C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector3f[] VertexPositions;

		[Token(Token = "0x4001C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public short[] Indices;

		[Token(Token = "0x4001C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3f[] VertexNormals;

		[Token(Token = "0x4001C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector2f[] VertexUV0;

		[Token(Token = "0x4001C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector4s[] BlendIndices;

		[Token(Token = "0x4001C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector4f[] BlendWeights;

		[Token(Token = "0x6001AF1")]
		[Address(RVA = "0x9BE2B0", Offset = "0x9BE2B0", VA = "0x9BE2B0")]
		public Mesh()
		{
		}
	}

	[Token(Token = "0x2000495")]
	public enum ColorSpace
	{
		[Token(Token = "0x4001C72")]
		Unknown,
		[Token(Token = "0x4001C73")]
		Unmanaged,
		[Token(Token = "0x4001C74")]
		Rec_2020,
		[Token(Token = "0x4001C75")]
		Rec_709,
		[Token(Token = "0x4001C76")]
		Rift_CV1,
		[Token(Token = "0x4001C77")]
		Rift_S,
		[Token(Token = "0x4001C78")]
		Quest,
		[Token(Token = "0x4001C79")]
		P3,
		[Token(Token = "0x4001C7A")]
		Adobe_RGB
	}

	[Token(Token = "0x2000496")]
	public class Media
	{
		[Token(Token = "0x200078B")]
		public enum MrcActivationMode
		{
			[Token(Token = "0x4002260")]
			Automatic = 0,
			[Token(Token = "0x4002261")]
			Disabled = 1,
			[Token(Token = "0x4002262")]
			EnumSize = int.MaxValue
		}

		[Token(Token = "0x200078C")]
		public enum InputVideoBufferType
		{
			[Token(Token = "0x4002264")]
			Memory = 0,
			[Token(Token = "0x4002265")]
			TextureHandle = 1,
			[Token(Token = "0x4002266")]
			EnumSize = int.MaxValue
		}

		[Token(Token = "0x4001C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Texture2D cachedTexture;

		[Token(Token = "0x6001AF2")]
		[Address(RVA = "0x7C3AF8", Offset = "0x7C3AF8", VA = "0x7C3AF8")]
		public static bool Initialize()
		{
			return default(bool);
		}

		[Token(Token = "0x6001AF3")]
		[Address(RVA = "0x7C3C44", Offset = "0x7C3C44", VA = "0x7C3C44")]
		public static bool Shutdown()
		{
			return default(bool);
		}

		[Token(Token = "0x6001AF4")]
		[Address(RVA = "0x7A1CF8", Offset = "0x7A1CF8", VA = "0x7A1CF8")]
		public static bool GetInitialized()
		{
			return default(bool);
		}

		[Token(Token = "0x6001AF5")]
		[Address(RVA = "0x7C3D90", Offset = "0x7C3D90", VA = "0x7C3D90")]
		public static bool Update()
		{
			return default(bool);
		}

		[Token(Token = "0x6001AF6")]
		[Address(RVA = "0x7C3EDC", Offset = "0x7C3EDC", VA = "0x7C3EDC")]
		public static MrcActivationMode GetMrcActivationMode()
		{
			return default(MrcActivationMode);
		}

		[Token(Token = "0x6001AF7")]
		[Address(RVA = "0x7C4040", Offset = "0x7C4040", VA = "0x7C4040")]
		public static bool SetMrcActivationMode(MrcActivationMode mode)
		{
			return default(bool);
		}

		[Token(Token = "0x6001AF8")]
		[Address(RVA = "0x7C4194", Offset = "0x7C4194", VA = "0x7C4194")]
		public static bool IsMrcEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x6001AF9")]
		[Address(RVA = "0x7C4300", Offset = "0x7C4300", VA = "0x7C4300")]
		public static bool IsMrcActivated()
		{
			return default(bool);
		}

		[Token(Token = "0x6001AFA")]
		[Address(RVA = "0x7A0B48", Offset = "0x7A0B48", VA = "0x7A0B48")]
		public static bool UseMrcDebugCamera()
		{
			return default(bool);
		}

		[Token(Token = "0x6001AFB")]
		[Address(RVA = "0x7C446C", Offset = "0x7C446C", VA = "0x7C446C")]
		public static bool SetMrcInputVideoBufferType(InputVideoBufferType videoBufferType)
		{
			return default(bool);
		}

		[Token(Token = "0x6001AFC")]
		[Address(RVA = "0x7C45C4", Offset = "0x7C45C4", VA = "0x7C45C4")]
		public static InputVideoBufferType GetMrcInputVideoBufferType()
		{
			return default(InputVideoBufferType);
		}

		[Token(Token = "0x6001AFD")]
		[Address(RVA = "0x7C4724", Offset = "0x7C4724", VA = "0x7C4724")]
		public static bool SetMrcFrameSize(int frameWidth, int frameHeight)
		{
			return default(bool);
		}

		[Token(Token = "0x6001AFE")]
		[Address(RVA = "0x7C4884", Offset = "0x7C4884", VA = "0x7C4884")]
		public static void GetMrcFrameSize(out int frameWidth, out int frameHeight)
		{
		}

		[Token(Token = "0x6001AFF")]
		[Address(RVA = "0x7C49D8", Offset = "0x7C49D8", VA = "0x7C49D8")]
		public static bool SetMrcAudioSampleRate(int sampleRate)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B00")]
		[Address(RVA = "0x7C4B30", Offset = "0x7C4B30", VA = "0x7C4B30")]
		public static int GetMrcAudioSampleRate()
		{
			return default(int);
		}

		[Token(Token = "0x6001B01")]
		[Address(RVA = "0x7C4C88", Offset = "0x7C4C88", VA = "0x7C4C88")]
		public static bool SetMrcFrameImageFlipped(bool imageFlipped)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B02")]
		[Address(RVA = "0x7C4DE0", Offset = "0x7C4DE0", VA = "0x7C4DE0")]
		public static bool GetMrcFrameImageFlipped()
		{
			return default(bool);
		}

		[Token(Token = "0x6001B03")]
		[Address(RVA = "0x7C4F40", Offset = "0x7C4F40", VA = "0x7C4F40")]
		public static bool EncodeMrcFrame(IntPtr textureHandle, IntPtr fgTextureHandle, float[] audioData, int audioFrames, int audioChannels, double timestamp, double poseTime, ref int outSyncId)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B04")]
		[Address(RVA = "0x7C54B8", Offset = "0x7C54B8", VA = "0x7C54B8")]
		public static bool EncodeMrcFrame(RenderTexture frame, float[] audioData, int audioFrames, int audioChannels, double timestamp, double poseTime, ref int outSyncId)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B05")]
		[Address(RVA = "0x7C5CB8", Offset = "0x7C5CB8", VA = "0x7C5CB8")]
		public static bool SyncMrcFrame(int syncId)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B06")]
		[Address(RVA = "0x7C5E0C", Offset = "0x7C5E0C", VA = "0x7C5E0C")]
		public static bool SetAvailableQueueIndexVulkan(uint queueIndexVk)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B07")]
		[Address(RVA = "0x7C5F60", Offset = "0x7C5F60", VA = "0x7C5F60")]
		public static bool SetMrcHeadsetControllerPose(Posef headsetPose, Posef leftControllerPose, Posef rightControllerPose)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B08")]
		[Address(RVA = "0x7C6178", Offset = "0x7C6178", VA = "0x7C6178")]
		public Media()
		{
		}
	}

	[Token(Token = "0x2000497")]
	private static class OVRP_0_1_0
	{
		[Token(Token = "0x4001C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;

		[PreserveSig]
		[Token(Token = "0x6001B0A")]
		[Address(RVA = "0x9BE2B8", Offset = "0x9BE2B8", VA = "0x9BE2B8")]
		public static extern Sizei ovrp_GetEyeTextureSize(Eye eyeId);
	}

	[Token(Token = "0x2000498")]
	private static class OVRP_0_1_1
	{
		[Token(Token = "0x4001C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;

		[PreserveSig]
		[Token(Token = "0x6001B0C")]
		[Address(RVA = "0x9BE470", Offset = "0x9BE470", VA = "0x9BE470")]
		public static extern Bool ovrp_SetOverlayQuad2(Bool onTop, Bool headLocked, IntPtr texture, IntPtr device, Posef pose, Vector3f scale);
	}

	[Token(Token = "0x2000499")]
	private static class OVRP_0_1_2
	{
		[Token(Token = "0x4001C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;

		[PreserveSig]
		[Token(Token = "0x6001B0E")]
		[Address(RVA = "0x9BE678", Offset = "0x9BE678", VA = "0x9BE678")]
		public static extern Posef ovrp_GetNodePose(Node nodeId);

		[PreserveSig]
		[Token(Token = "0x6001B0F")]
		[Address(RVA = "0x9BE788", Offset = "0x9BE788", VA = "0x9BE788")]
		public static extern Bool ovrp_SetControllerVibration(uint controllerMask, float frequency, float amplitude);
	}

	[Token(Token = "0x200049A")]
	private static class OVRP_0_1_3
	{
		[Token(Token = "0x4001C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;

		[PreserveSig]
		[Token(Token = "0x6001B11")]
		[Address(RVA = "0x9BE910", Offset = "0x9BE910", VA = "0x9BE910")]
		public static extern Posef ovrp_GetNodeVelocity(Node nodeId);

		[PreserveSig]
		[Token(Token = "0x6001B12")]
		[Address(RVA = "0x9BEA28", Offset = "0x9BEA28", VA = "0x9BEA28")]
		public static extern Posef ovrp_GetNodeAcceleration(Node nodeId);
	}

	[Token(Token = "0x200049B")]
	private static class OVRP_0_5_0
	{
		[Token(Token = "0x4001C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;
	}

	[Token(Token = "0x200049C")]
	private static class OVRP_1_0_0
	{
		[Token(Token = "0x4001C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;

		[PreserveSig]
		[Token(Token = "0x6001B15")]
		[Address(RVA = "0x9BEC80", Offset = "0x9BEC80", VA = "0x9BEC80")]
		public static extern TrackingOrigin ovrp_GetTrackingOriginType();

		[PreserveSig]
		[Token(Token = "0x6001B16")]
		[Address(RVA = "0x9BED58", Offset = "0x9BED58", VA = "0x9BED58")]
		public static extern Bool ovrp_SetTrackingOriginType(TrackingOrigin originType);

		[PreserveSig]
		[Token(Token = "0x6001B17")]
		[Address(RVA = "0x9BEE38", Offset = "0x9BEE38", VA = "0x9BEE38")]
		public static extern Posef ovrp_GetTrackingCalibratedOrigin();

		[PreserveSig]
		[Token(Token = "0x6001B18")]
		[Address(RVA = "0x9BEF20", Offset = "0x9BEF20", VA = "0x9BEF20")]
		public static extern Bool ovrp_RecenterTrackingOrigin(uint flags);
	}

	[Token(Token = "0x200049D")]
	private static class OVRP_1_1_0
	{
		[Token(Token = "0x4001C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;

		[PreserveSig]
		[Token(Token = "0x6001B1A")]
		[Address(RVA = "0x9C1928", Offset = "0x9C1928", VA = "0x9C1928")]
		public static extern Bool ovrp_GetInitialized();

		[PreserveSig]
		[Token(Token = "0x6001B1B")]
		[Address(RVA = "0x9C1A28", Offset = "0x9C1A28", VA = "0x9C1A28")]
		private static extern IntPtr _ovrp_GetVersion();

		[Token(Token = "0x6001B1C")]
		[Address(RVA = "0x9C1B1C", Offset = "0x9C1B1C", VA = "0x9C1B1C")]
		public static string ovrp_GetVersion()
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6001B1D")]
		[Address(RVA = "0x9C1BD0", Offset = "0x9C1BD0", VA = "0x9C1BD0")]
		private static extern IntPtr _ovrp_GetNativeSDKVersion();

		[Token(Token = "0x6001B1E")]
		[Address(RVA = "0x9C1CD8", Offset = "0x9C1CD8", VA = "0x9C1CD8")]
		public static string ovrp_GetNativeSDKVersion()
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6001B1F")]
		[Address(RVA = "0x9C1D90", Offset = "0x9C1D90", VA = "0x9C1D90")]
		public static extern IntPtr ovrp_GetAudioOutId();

		[PreserveSig]
		[Token(Token = "0x6001B20")]
		[Address(RVA = "0x9C1E90", Offset = "0x9C1E90", VA = "0x9C1E90")]
		public static extern IntPtr ovrp_GetAudioInId();

		[PreserveSig]
		[Token(Token = "0x6001B21")]
		[Address(RVA = "0x9C1F88", Offset = "0x9C1F88", VA = "0x9C1F88")]
		public static extern float ovrp_GetEyeTextureScale();

		[PreserveSig]
		[Token(Token = "0x6001B22")]
		[Address(RVA = "0x9C2090", Offset = "0x9C2090", VA = "0x9C2090")]
		public static extern Bool ovrp_SetEyeTextureScale(float value);

		[PreserveSig]
		[Token(Token = "0x6001B23")]
		[Address(RVA = "0x9C21A8", Offset = "0x9C21A8", VA = "0x9C21A8")]
		public static extern Bool ovrp_GetTrackingOrientationSupported();

		[PreserveSig]
		[Token(Token = "0x6001B24")]
		[Address(RVA = "0x9C2288", Offset = "0x9C2288", VA = "0x9C2288")]
		public static extern Bool ovrp_GetTrackingOrientationEnabled();

		[PreserveSig]
		[Token(Token = "0x6001B25")]
		[Address(RVA = "0x9C2368", Offset = "0x9C2368", VA = "0x9C2368")]
		public static extern Bool ovrp_SetTrackingOrientationEnabled(Bool value);

		[PreserveSig]
		[Token(Token = "0x6001B26")]
		[Address(RVA = "0x9C2450", Offset = "0x9C2450", VA = "0x9C2450")]
		public static extern Bool ovrp_GetTrackingPositionSupported();

		[PreserveSig]
		[Token(Token = "0x6001B27")]
		[Address(RVA = "0x9C2530", Offset = "0x9C2530", VA = "0x9C2530")]
		public static extern Bool ovrp_GetTrackingPositionEnabled();

		[PreserveSig]
		[Token(Token = "0x6001B28")]
		[Address(RVA = "0x9C2608", Offset = "0x9C2608", VA = "0x9C2608")]
		public static extern Bool ovrp_SetTrackingPositionEnabled(Bool value);

		[PreserveSig]
		[Token(Token = "0x6001B29")]
		[Address(RVA = "0x9C26E8", Offset = "0x9C26E8", VA = "0x9C26E8")]
		public static extern Bool ovrp_GetNodePresent(Node nodeId);

		[PreserveSig]
		[Token(Token = "0x6001B2A")]
		[Address(RVA = "0x9C27F8", Offset = "0x9C27F8", VA = "0x9C27F8")]
		public static extern Bool ovrp_GetNodeOrientationTracked(Node nodeId);

		[PreserveSig]
		[Token(Token = "0x6001B2B")]
		[Address(RVA = "0x9C28D8", Offset = "0x9C28D8", VA = "0x9C28D8")]
		public static extern Bool ovrp_GetNodePositionTracked(Node nodeId);

		[PreserveSig]
		[Token(Token = "0x6001B2C")]
		[Address(RVA = "0x9C29B8", Offset = "0x9C29B8", VA = "0x9C29B8")]
		public static extern Frustumf ovrp_GetNodeFrustum(Node nodeId);

		[PreserveSig]
		[Token(Token = "0x6001B2D")]
		[Address(RVA = "0x9C2AD0", Offset = "0x9C2AD0", VA = "0x9C2AD0")]
		public static extern ControllerState ovrp_GetControllerState(uint controllerMask);

		[PreserveSig]
		[Token(Token = "0x6001B2E")]
		[Address(RVA = "0x9C2BF0", Offset = "0x9C2BF0", VA = "0x9C2BF0")]
		public static extern int ovrp_GetSystemCpuLevel();

		[PreserveSig]
		[Token(Token = "0x6001B2F")]
		[Address(RVA = "0x9C2CF8", Offset = "0x9C2CF8", VA = "0x9C2CF8")]
		public static extern Bool ovrp_SetSystemCpuLevel(int value);

		[PreserveSig]
		[Token(Token = "0x6001B30")]
		[Address(RVA = "0x9C2E10", Offset = "0x9C2E10", VA = "0x9C2E10")]
		public static extern int ovrp_GetSystemGpuLevel();

		[PreserveSig]
		[Token(Token = "0x6001B31")]
		[Address(RVA = "0x9C2F18", Offset = "0x9C2F18", VA = "0x9C2F18")]
		public static extern Bool ovrp_SetSystemGpuLevel(int value);

		[PreserveSig]
		[Token(Token = "0x6001B32")]
		[Address(RVA = "0x9C3030", Offset = "0x9C3030", VA = "0x9C3030")]
		public static extern Bool ovrp_GetSystemPowerSavingMode();

		[PreserveSig]
		[Token(Token = "0x6001B33")]
		[Address(RVA = "0x9C3108", Offset = "0x9C3108", VA = "0x9C3108")]
		public static extern float ovrp_GetSystemDisplayFrequency();

		[PreserveSig]
		[Token(Token = "0x6001B34")]
		[Address(RVA = "0x9C31E0", Offset = "0x9C31E0", VA = "0x9C31E0")]
		public static extern int ovrp_GetSystemVSyncCount();

		[PreserveSig]
		[Token(Token = "0x6001B35")]
		[Address(RVA = "0x9C32E8", Offset = "0x9C32E8", VA = "0x9C32E8")]
		public static extern float ovrp_GetSystemVolume();

		[PreserveSig]
		[Token(Token = "0x6001B36")]
		[Address(RVA = "0x9C33E8", Offset = "0x9C33E8", VA = "0x9C33E8")]
		public static extern BatteryStatus ovrp_GetSystemBatteryStatus();

		[PreserveSig]
		[Token(Token = "0x6001B37")]
		[Address(RVA = "0x9C34C0", Offset = "0x9C34C0", VA = "0x9C34C0")]
		public static extern float ovrp_GetSystemBatteryLevel();

		[PreserveSig]
		[Token(Token = "0x6001B38")]
		[Address(RVA = "0x9C3598", Offset = "0x9C3598", VA = "0x9C3598")]
		public static extern float ovrp_GetSystemBatteryTemperature();

		[PreserveSig]
		[Token(Token = "0x6001B39")]
		[Address(RVA = "0x9C3678", Offset = "0x9C3678", VA = "0x9C3678")]
		private static extern IntPtr _ovrp_GetSystemProductName();

		[Token(Token = "0x6001B3A")]
		[Address(RVA = "0x9C374C", Offset = "0x9C374C", VA = "0x9C374C")]
		public static string ovrp_GetSystemProductName()
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6001B3B")]
		[Address(RVA = "0x9C3800", Offset = "0x9C3800", VA = "0x9C3800")]
		public static extern Bool ovrp_ShowSystemUI(PlatformUI ui);

		[PreserveSig]
		[Token(Token = "0x6001B3C")]
		[Address(RVA = "0x9C3908", Offset = "0x9C3908", VA = "0x9C3908")]
		public static extern Bool ovrp_GetAppMonoscopic();

		[PreserveSig]
		[Token(Token = "0x6001B3D")]
		[Address(RVA = "0x9C3A08", Offset = "0x9C3A08", VA = "0x9C3A08")]
		public static extern Bool ovrp_SetAppMonoscopic(Bool value);

		[PreserveSig]
		[Token(Token = "0x6001B3E")]
		[Address(RVA = "0x9C3B18", Offset = "0x9C3B18", VA = "0x9C3B18")]
		public static extern Bool ovrp_GetAppHasVrFocus();

		[PreserveSig]
		[Token(Token = "0x6001B3F")]
		[Address(RVA = "0x9C3C18", Offset = "0x9C3C18", VA = "0x9C3C18")]
		public static extern Bool ovrp_GetAppShouldQuit();

		[PreserveSig]
		[Token(Token = "0x6001B40")]
		[Address(RVA = "0x9C3D18", Offset = "0x9C3D18", VA = "0x9C3D18")]
		public static extern Bool ovrp_GetAppShouldRecenter();

		[PreserveSig]
		[Token(Token = "0x6001B41")]
		[Address(RVA = "0x9C3E20", Offset = "0x9C3E20", VA = "0x9C3E20")]
		private static extern IntPtr _ovrp_GetAppLatencyTimings();

		[Token(Token = "0x6001B42")]
		[Address(RVA = "0x9C3EF4", Offset = "0x9C3EF4", VA = "0x9C3EF4")]
		public static string ovrp_GetAppLatencyTimings()
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6001B43")]
		[Address(RVA = "0x9C3FA8", Offset = "0x9C3FA8", VA = "0x9C3FA8")]
		public static extern Bool ovrp_GetUserPresent();

		[PreserveSig]
		[Token(Token = "0x6001B44")]
		[Address(RVA = "0x9C40A8", Offset = "0x9C40A8", VA = "0x9C40A8")]
		public static extern float ovrp_GetUserIPD();

		[PreserveSig]
		[Token(Token = "0x6001B45")]
		[Address(RVA = "0x9C41A0", Offset = "0x9C41A0", VA = "0x9C41A0")]
		public static extern Bool ovrp_SetUserIPD(float value);

		[PreserveSig]
		[Token(Token = "0x6001B46")]
		[Address(RVA = "0x9C42A8", Offset = "0x9C42A8", VA = "0x9C42A8")]
		public static extern float ovrp_GetUserEyeDepth();

		[PreserveSig]
		[Token(Token = "0x6001B47")]
		[Address(RVA = "0x9C43A8", Offset = "0x9C43A8", VA = "0x9C43A8")]
		public static extern Bool ovrp_SetUserEyeDepth(float value);

		[PreserveSig]
		[Token(Token = "0x6001B48")]
		[Address(RVA = "0x9C44B8", Offset = "0x9C44B8", VA = "0x9C44B8")]
		public static extern float ovrp_GetUserEyeHeight();

		[PreserveSig]
		[Token(Token = "0x6001B49")]
		[Address(RVA = "0x9C45B8", Offset = "0x9C45B8", VA = "0x9C45B8")]
		public static extern Bool ovrp_SetUserEyeHeight(float value);
	}

	[Token(Token = "0x200049E")]
	private static class OVRP_1_2_0
	{
		[Token(Token = "0x4001C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;

		[PreserveSig]
		[Token(Token = "0x6001B4B")]
		[Address(RVA = "0x9C5A30", Offset = "0x9C5A30", VA = "0x9C5A30")]
		public static extern Bool ovrp_SetSystemVSyncCount(int vsyncCount);

		[PreserveSig]
		[Token(Token = "0x6001B4C")]
		[Address(RVA = "0x9C5B48", Offset = "0x9C5B48", VA = "0x9C5B48")]
		public static extern Bool ovrpi_SetTrackingCalibratedOrigin();
	}

	[Token(Token = "0x200049F")]
	private static class OVRP_1_3_0
	{
		[Token(Token = "0x4001C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;

		[PreserveSig]
		[Token(Token = "0x6001B4E")]
		[Address(RVA = "0x9C8518", Offset = "0x9C8518", VA = "0x9C8518")]
		public static extern Bool ovrp_GetEyeOcclusionMeshEnabled();

		[PreserveSig]
		[Token(Token = "0x6001B4F")]
		[Address(RVA = "0x9C85F0", Offset = "0x9C85F0", VA = "0x9C85F0")]
		public static extern Bool ovrp_SetEyeOcclusionMeshEnabled(Bool value);

		[PreserveSig]
		[Token(Token = "0x6001B50")]
		[Address(RVA = "0x9C86D0", Offset = "0x9C86D0", VA = "0x9C86D0")]
		public static extern Bool ovrp_GetSystemHeadphonesPresent();
	}

	[Token(Token = "0x20004A0")]
	private static class OVRP_1_5_0
	{
		[Token(Token = "0x4001C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;

		[PreserveSig]
		[Token(Token = "0x6001B52")]
		[Address(RVA = "0x9CB1E8", Offset = "0x9CB1E8", VA = "0x9CB1E8")]
		public static extern SystemRegion ovrp_GetSystemRegion();
	}

	[Token(Token = "0x20004A1")]
	private static class OVRP_1_6_0
	{
		[Token(Token = "0x4001C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;

		[PreserveSig]
		[Token(Token = "0x6001B54")]
		[Address(RVA = "0x9CB388", Offset = "0x9CB388", VA = "0x9CB388")]
		public static extern Bool ovrp_GetTrackingIPDEnabled();

		[PreserveSig]
		[Token(Token = "0x6001B55")]
		[Address(RVA = "0x9CB460", Offset = "0x9CB460", VA = "0x9CB460")]
		public static extern Bool ovrp_SetTrackingIPDEnabled(Bool value);

		[PreserveSig]
		[Token(Token = "0x6001B56")]
		[Address(RVA = "0x9CB540", Offset = "0x9CB540", VA = "0x9CB540")]
		public static extern HapticsDesc ovrp_GetControllerHapticsDesc(uint controllerMask);

		[PreserveSig]
		[Token(Token = "0x6001B57")]
		[Address(RVA = "0x9CB628", Offset = "0x9CB628", VA = "0x9CB628")]
		public static extern HapticsState ovrp_GetControllerHapticsState(uint controllerMask);

		[PreserveSig]
		[Token(Token = "0x6001B58")]
		[Address(RVA = "0x9CB710", Offset = "0x9CB710", VA = "0x9CB710")]
		public static extern Bool ovrp_SetControllerHaptics(uint controllerMask, HapticsBuffer hapticsBuffer);

		[PreserveSig]
		[Token(Token = "0x6001B59")]
		[Address(RVA = "0x9CB838", Offset = "0x9CB838", VA = "0x9CB838")]
		public static extern Bool ovrp_SetOverlayQuad3(uint flags, IntPtr textureLeft, IntPtr textureRight, IntPtr device, Posef pose, Vector3f scale, int layerIndex);

		[PreserveSig]
		[Token(Token = "0x6001B5A")]
		[Address(RVA = "0x9CB9B0", Offset = "0x9CB9B0", VA = "0x9CB9B0")]
		public static extern float ovrp_GetEyeRecommendedResolutionScale();

		[PreserveSig]
		[Token(Token = "0x6001B5B")]
		[Address(RVA = "0x9CBA90", Offset = "0x9CBA90", VA = "0x9CBA90")]
		public static extern float ovrp_GetAppCpuStartToGpuEndTime();

		[PreserveSig]
		[Token(Token = "0x6001B5C")]
		[Address(RVA = "0x9CBB68", Offset = "0x9CBB68", VA = "0x9CBB68")]
		public static extern int ovrp_GetSystemRecommendedMSAALevel();
	}

	[Token(Token = "0x20004A2")]
	private static class OVRP_1_7_0
	{
		[Token(Token = "0x4001C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;

		[PreserveSig]
		[Token(Token = "0x6001B5E")]
		[Address(RVA = "0x9CBCE0", Offset = "0x9CBCE0", VA = "0x9CBCE0")]
		public static extern Bool ovrp_GetAppChromaticCorrection();

		[PreserveSig]
		[Token(Token = "0x6001B5F")]
		[Address(RVA = "0x9CBDB8", Offset = "0x9CBDB8", VA = "0x9CBDB8")]
		public static extern Bool ovrp_SetAppChromaticCorrection(Bool value);
	}

	[Token(Token = "0x20004A3")]
	private static class OVRP_1_8_0
	{
		[Token(Token = "0x4001C88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;

		[PreserveSig]
		[Token(Token = "0x6001B61")]
		[Address(RVA = "0x9CBF38", Offset = "0x9CBF38", VA = "0x9CBF38")]
		public static extern Bool ovrp_GetBoundaryConfigured();

		[PreserveSig]
		[Token(Token = "0x6001B62")]
		[Address(RVA = "0x9CC010", Offset = "0x9CC010", VA = "0x9CC010")]
		public static extern BoundaryTestResult ovrp_TestBoundaryNode(Node nodeId, BoundaryType boundaryType);

		[PreserveSig]
		[Token(Token = "0x6001B63")]
		[Address(RVA = "0x9CC130", Offset = "0x9CC130", VA = "0x9CC130")]
		public static extern BoundaryTestResult ovrp_TestBoundaryPoint(Vector3f point, BoundaryType boundaryType);

		[PreserveSig]
		[Token(Token = "0x6001B64")]
		[Address(RVA = "0x9CC268", Offset = "0x9CC268", VA = "0x9CC268")]
		public static extern BoundaryGeometry ovrp_GetBoundaryGeometry(BoundaryType boundaryType);

		[PreserveSig]
		[Token(Token = "0x6001B65")]
		[Address(RVA = "0x9CC3B0", Offset = "0x9CC3B0", VA = "0x9CC3B0")]
		public static extern Vector3f ovrp_GetBoundaryDimensions(BoundaryType boundaryType);

		[PreserveSig]
		[Token(Token = "0x6001B66")]
		[Address(RVA = "0x9CC498", Offset = "0x9CC498", VA = "0x9CC498")]
		public static extern Bool ovrp_GetBoundaryVisible();

		[PreserveSig]
		[Token(Token = "0x6001B67")]
		[Address(RVA = "0x9CC5A0", Offset = "0x9CC5A0", VA = "0x9CC5A0")]
		public static extern Bool ovrp_SetBoundaryVisible(Bool value);

		[PreserveSig]
		[Token(Token = "0x6001B68")]
		[Address(RVA = "0x9CC6B8", Offset = "0x9CC6B8", VA = "0x9CC6B8")]
		public static extern Bool ovrp_Update2(int stateId, int frameIndex, double predictionSeconds);

		[PreserveSig]
		[Token(Token = "0x6001B69")]
		[Address(RVA = "0x9CC7D0", Offset = "0x9CC7D0", VA = "0x9CC7D0")]
		public static extern Posef ovrp_GetNodePose2(int stateId, Node nodeId);

		[PreserveSig]
		[Token(Token = "0x6001B6A")]
		[Address(RVA = "0x9CC8E8", Offset = "0x9CC8E8", VA = "0x9CC8E8")]
		public static extern Posef ovrp_GetNodeVelocity2(int stateId, Node nodeId);

		[PreserveSig]
		[Token(Token = "0x6001B6B")]
		[Address(RVA = "0x9CCA08", Offset = "0x9CCA08", VA = "0x9CCA08")]
		public static extern Posef ovrp_GetNodeAcceleration2(int stateId, Node nodeId);
	}

	[Token(Token = "0x20004A4")]
	private static class OVRP_1_9_0
	{
		[Token(Token = "0x4001C89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;

		[PreserveSig]
		[Token(Token = "0x6001B6D")]
		[Address(RVA = "0x9CCBD0", Offset = "0x9CCBD0", VA = "0x9CCBD0")]
		public static extern SystemHeadset ovrp_GetSystemHeadsetType();

		[PreserveSig]
		[Token(Token = "0x6001B6E")]
		[Address(RVA = "0x9CCCD8", Offset = "0x9CCCD8", VA = "0x9CCCD8")]
		public static extern Controller ovrp_GetActiveController();

		[PreserveSig]
		[Token(Token = "0x6001B6F")]
		[Address(RVA = "0x9CCDE0", Offset = "0x9CCDE0", VA = "0x9CCDE0")]
		public static extern Controller ovrp_GetConnectedControllers();

		[PreserveSig]
		[Token(Token = "0x6001B70")]
		[Address(RVA = "0x9CCEB8", Offset = "0x9CCEB8", VA = "0x9CCEB8")]
		public static extern Bool ovrp_GetBoundaryGeometry2(BoundaryType boundaryType, IntPtr points, ref int pointsCount);

		[PreserveSig]
		[Token(Token = "0x6001B71")]
		[Address(RVA = "0x9CCFE0", Offset = "0x9CCFE0", VA = "0x9CCFE0")]
		public static extern AppPerfStats ovrp_GetAppPerfStats();

		[PreserveSig]
		[Token(Token = "0x6001B72")]
		[Address(RVA = "0x9CD110", Offset = "0x9CD110", VA = "0x9CD110")]
		public static extern Bool ovrp_ResetAppPerfStats();
	}

	[Token(Token = "0x20004A5")]
	private static class OVRP_1_10_0
	{
		[Token(Token = "0x4001C8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;
	}

	[Token(Token = "0x20004A6")]
	private static class OVRP_1_11_0
	{
		[Token(Token = "0x4001C8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;

		[PreserveSig]
		[Token(Token = "0x6001B75")]
		[Address(RVA = "0x9BF138", Offset = "0x9BF138", VA = "0x9BF138")]
		public static extern Bool ovrp_SetDesiredEyeTextureFormat(EyeTextureFormat value);

		[PreserveSig]
		[Token(Token = "0x6001B76")]
		[Address(RVA = "0x9BF218", Offset = "0x9BF218", VA = "0x9BF218")]
		public static extern EyeTextureFormat ovrp_GetDesiredEyeTextureFormat();
	}

	[Token(Token = "0x20004A7")]
	private static class OVRP_1_12_0
	{
		[Token(Token = "0x4001C8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;

		[PreserveSig]
		[Token(Token = "0x6001B78")]
		[Address(RVA = "0x9BF390", Offset = "0x9BF390", VA = "0x9BF390")]
		public static extern float ovrp_GetAppFramerate();

		[PreserveSig]
		[Token(Token = "0x6001B79")]
		[Address(RVA = "0x9BF490", Offset = "0x9BF490", VA = "0x9BF490")]
		public static extern PoseStatef ovrp_GetNodePoseState(Step stepId, Node nodeId);

		[PreserveSig]
		[Token(Token = "0x6001B7A")]
		[Address(RVA = "0x9BF5B0", Offset = "0x9BF5B0", VA = "0x9BF5B0")]
		public static extern ControllerState2 ovrp_GetControllerState2(uint controllerMask);
	}

	[Token(Token = "0x20004A8")]
	private static class OVRP_1_15_0
	{
		[Token(Token = "0x4001C8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;

		[Token(Token = "0x4001C8E")]
		public const int OVRP_EXTERNAL_CAMERA_NAME_SIZE = 32;

		[PreserveSig]
		[Token(Token = "0x6001B7C")]
		[Address(RVA = "0x9BF770", Offset = "0x9BF770", VA = "0x9BF770")]
		public static extern Result ovrp_InitializeMixedReality();

		[PreserveSig]
		[Token(Token = "0x6001B7D")]
		[Address(RVA = "0x9BF848", Offset = "0x9BF848", VA = "0x9BF848")]
		public static extern Result ovrp_ShutdownMixedReality();

		[PreserveSig]
		[Token(Token = "0x6001B7E")]
		[Address(RVA = "0x9BF950", Offset = "0x9BF950", VA = "0x9BF950")]
		public static extern Bool ovrp_GetMixedRealityInitialized();

		[PreserveSig]
		[Token(Token = "0x6001B7F")]
		[Address(RVA = "0x9BFA28", Offset = "0x9BFA28", VA = "0x9BFA28")]
		public static extern Result ovrp_UpdateExternalCamera();

		[PreserveSig]
		[Token(Token = "0x6001B80")]
		[Address(RVA = "0x9BFB30", Offset = "0x9BFB30", VA = "0x9BFB30")]
		public static extern Result ovrp_GetExternalCameraCount(out int cameraCount);

		[PreserveSig]
		[Token(Token = "0x6001B81")]
		[Address(RVA = "0x9BFC10", Offset = "0x9BFC10", VA = "0x9BFC10")]
		public static extern Result ovrp_GetExternalCameraName(int cameraId, char[] cameraName);

		[PreserveSig]
		[Token(Token = "0x6001B82")]
		[Address(RVA = "0x9BFD90", Offset = "0x9BFD90", VA = "0x9BFD90")]
		public static extern Result ovrp_GetExternalCameraIntrinsics(int cameraId, out CameraIntrinsics cameraIntrinsics);

		[PreserveSig]
		[Token(Token = "0x6001B83")]
		[Address(RVA = "0x9BFE80", Offset = "0x9BFE80", VA = "0x9BFE80")]
		public static extern Result ovrp_GetExternalCameraExtrinsics(int cameraId, out CameraExtrinsics cameraExtrinsics);

		[PreserveSig]
		[Token(Token = "0x6001B84")]
		[Address(RVA = "0x9BFF70", Offset = "0x9BFF70", VA = "0x9BFF70")]
		public static extern Result ovrp_CalculateLayerDesc(OverlayShape shape, LayerLayout layout, ref Sizei textureSize, int mipLevels, int sampleCount, EyeTextureFormat format, int layerFlags, ref LayerDesc layerDesc);

		[PreserveSig]
		[Token(Token = "0x6001B85")]
		[Address(RVA = "0x9C0138", Offset = "0x9C0138", VA = "0x9C0138")]
		public static extern Result ovrp_EnqueueSetupLayer(ref LayerDesc desc, IntPtr layerId);

		[PreserveSig]
		[Token(Token = "0x6001B86")]
		[Address(RVA = "0x9C02D0", Offset = "0x9C02D0", VA = "0x9C02D0")]
		public static extern Result ovrp_EnqueueDestroyLayer(IntPtr layerId);

		[PreserveSig]
		[Token(Token = "0x6001B87")]
		[Address(RVA = "0x9C03E8", Offset = "0x9C03E8", VA = "0x9C03E8")]
		public static extern Result ovrp_GetLayerTextureStageCount(int layerId, ref int layerTextureStageCount);

		[PreserveSig]
		[Token(Token = "0x6001B88")]
		[Address(RVA = "0x9C04D0", Offset = "0x9C04D0", VA = "0x9C04D0")]
		public static extern Result ovrp_GetLayerTexturePtr(int layerId, int stage, Eye eyeId, ref IntPtr textureHandle);

		[PreserveSig]
		[Token(Token = "0x6001B89")]
		[Address(RVA = "0x9C0600", Offset = "0x9C0600", VA = "0x9C0600")]
		public static extern Result ovrp_EnqueueSubmitLayer(uint flags, IntPtr textureLeft, IntPtr textureRight, int layerId, int frameIndex, ref Posef pose, ref Vector3f scale, int layerIndex);

		[PreserveSig]
		[Token(Token = "0x6001B8A")]
		[Address(RVA = "0x9C0750", Offset = "0x9C0750", VA = "0x9C0750")]
		public static extern Result ovrp_GetNodeFrustum2(Node nodeId, out Frustumf2 nodeFrustum);

		[PreserveSig]
		[Token(Token = "0x6001B8B")]
		[Address(RVA = "0x9C0868", Offset = "0x9C0868", VA = "0x9C0868")]
		public static extern Bool ovrp_GetEyeTextureArrayEnabled();
	}

	[Token(Token = "0x20004A9")]
	private static class OVRP_1_16_0
	{
		[Token(Token = "0x4001C8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;

		[PreserveSig]
		[Token(Token = "0x6001B8D")]
		[Address(RVA = "0x9C09E0", Offset = "0x9C09E0", VA = "0x9C09E0")]
		public static extern Result ovrp_UpdateCameraDevices();

		[PreserveSig]
		[Token(Token = "0x6001B8E")]
		[Address(RVA = "0x9C0AE8", Offset = "0x9C0AE8", VA = "0x9C0AE8")]
		public static extern Bool ovrp_IsCameraDeviceAvailable(CameraDevice cameraDevice);

		[PreserveSig]
		[Token(Token = "0x6001B8F")]
		[Address(RVA = "0x9C0BC8", Offset = "0x9C0BC8", VA = "0x9C0BC8")]
		public static extern Result ovrp_SetCameraDevicePreferredColorFrameSize(CameraDevice cameraDevice, Sizei preferredColorFrameSize);

		[PreserveSig]
		[Token(Token = "0x6001B90")]
		[Address(RVA = "0x9C0CC8", Offset = "0x9C0CC8", VA = "0x9C0CC8")]
		public static extern Result ovrp_OpenCameraDevice(CameraDevice cameraDevice);

		[PreserveSig]
		[Token(Token = "0x6001B91")]
		[Address(RVA = "0x9C0DD8", Offset = "0x9C0DD8", VA = "0x9C0DD8")]
		public static extern Result ovrp_CloseCameraDevice(CameraDevice cameraDevice);

		[PreserveSig]
		[Token(Token = "0x6001B92")]
		[Address(RVA = "0x9C0EF0", Offset = "0x9C0EF0", VA = "0x9C0EF0")]
		public static extern Bool ovrp_HasCameraDeviceOpened(CameraDevice cameraDevice);

		[PreserveSig]
		[Token(Token = "0x6001B93")]
		[Address(RVA = "0x9C0FD0", Offset = "0x9C0FD0", VA = "0x9C0FD0")]
		public static extern Bool ovrp_IsCameraDeviceColorFrameAvailable(CameraDevice cameraDevice);

		[PreserveSig]
		[Token(Token = "0x6001B94")]
		[Address(RVA = "0x9C10B8", Offset = "0x9C10B8", VA = "0x9C10B8")]
		public static extern Result ovrp_GetCameraDeviceColorFrameSize(CameraDevice cameraDevice, out Sizei colorFrameSize);

		[PreserveSig]
		[Token(Token = "0x6001B95")]
		[Address(RVA = "0x9C11A8", Offset = "0x9C11A8", VA = "0x9C11A8")]
		public static extern Result ovrp_GetCameraDeviceColorFrameBgraPixels(CameraDevice cameraDevice, out IntPtr colorFrameBgraPixels, out int colorFrameRowPitch);

		[PreserveSig]
		[Token(Token = "0x6001B96")]
		[Address(RVA = "0x9C12A8", Offset = "0x9C12A8", VA = "0x9C12A8")]
		public static extern Result ovrp_GetControllerState4(uint controllerMask, ref ControllerState4 controllerState);
	}

	[Token(Token = "0x20004AA")]
	private static class OVRP_1_17_0
	{
		[Token(Token = "0x4001C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;
	}

	[Token(Token = "0x20004AB")]
	private static class OVRP_1_18_0
	{
		[Token(Token = "0x4001C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;

		[PreserveSig]
		[Token(Token = "0x6001B99")]
		[Address(RVA = "0x9C1500", Offset = "0x9C1500", VA = "0x9C1500")]
		public static extern Result ovrp_SetHandNodePoseStateLatency(double latencyInSeconds);

		[PreserveSig]
		[Token(Token = "0x6001B9A")]
		[Address(RVA = "0x9C15F0", Offset = "0x9C15F0", VA = "0x9C15F0")]
		public static extern Result ovrp_GetHandNodePoseStateLatency(out double latencyInSeconds);

		[PreserveSig]
		[Token(Token = "0x6001B9B")]
		[Address(RVA = "0x9C16D8", Offset = "0x9C16D8", VA = "0x9C16D8")]
		public static extern Result ovrp_GetAppHasInputFocus(out Bool appHasInputFocus);
	}

	[Token(Token = "0x20004AC")]
	private static class OVRP_1_19_0
	{
		[Token(Token = "0x4001C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;
	}

	[Token(Token = "0x20004AD")]
	private static class OVRP_1_21_0
	{
		[Token(Token = "0x4001C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;

		[PreserveSig]
		[Token(Token = "0x6001B9E")]
		[Address(RVA = "0x9C4768", Offset = "0x9C4768", VA = "0x9C4768")]
		public static extern Result ovrp_GetTiledMultiResSupported(out Bool foveationSupported);

		[PreserveSig]
		[Token(Token = "0x6001B9F")]
		[Address(RVA = "0x9C4848", Offset = "0x9C4848", VA = "0x9C4848")]
		public static extern Result ovrp_GetTiledMultiResLevel(out FixedFoveatedRenderingLevel level);

		[PreserveSig]
		[Token(Token = "0x6001BA0")]
		[Address(RVA = "0x9C4928", Offset = "0x9C4928", VA = "0x9C4928")]
		public static extern Result ovrp_SetTiledMultiResLevel(FixedFoveatedRenderingLevel level);

		[PreserveSig]
		[Token(Token = "0x6001BA1")]
		[Address(RVA = "0x9C4A08", Offset = "0x9C4A08", VA = "0x9C4A08")]
		public static extern Result ovrp_GetGPUUtilSupported(out Bool gpuUtilSupported);

		[PreserveSig]
		[Token(Token = "0x6001BA2")]
		[Address(RVA = "0x9C4B20", Offset = "0x9C4B20", VA = "0x9C4B20")]
		public static extern Result ovrp_GetGPUUtilLevel(out float gpuUtil);

		[PreserveSig]
		[Token(Token = "0x6001BA3")]
		[Address(RVA = "0x9C4C30", Offset = "0x9C4C30", VA = "0x9C4C30")]
		public static extern Result ovrp_GetSystemDisplayFrequency2(out float systemDisplayFrequency);

		[PreserveSig]
		[Token(Token = "0x6001BA4")]
		[Address(RVA = "0x9C4D10", Offset = "0x9C4D10", VA = "0x9C4D10")]
		public static extern Result ovrp_GetSystemDisplayAvailableFrequencies(IntPtr systemDisplayAvailableFrequencies, ref int numFrequencies);

		[PreserveSig]
		[Token(Token = "0x6001BA5")]
		[Address(RVA = "0x9C4E08", Offset = "0x9C4E08", VA = "0x9C4E08")]
		public static extern Result ovrp_SetSystemDisplayFrequency(float requestedFrequency);

		[PreserveSig]
		[Token(Token = "0x6001BA6")]
		[Address(RVA = "0x9C4EE8", Offset = "0x9C4EE8", VA = "0x9C4EE8")]
		public static extern Result ovrp_GetAppAsymmetricFov(out Bool useAsymmetricFov);
	}

	[Token(Token = "0x20004AE")]
	private static class OVRP_1_28_0
	{
		[Token(Token = "0x4001C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;

		[PreserveSig]
		[Token(Token = "0x6001BA8")]
		[Address(RVA = "0x9C50A0", Offset = "0x9C50A0", VA = "0x9C50A0")]
		public static extern Result ovrp_GetDominantHand(out Handedness dominantHand);

		[PreserveSig]
		[Token(Token = "0x6001BA9")]
		[Address(RVA = "0x9C51B0", Offset = "0x9C51B0", VA = "0x9C51B0")]
		public static extern Result ovrp_SendEvent(string name, string param);

		[PreserveSig]
		[Token(Token = "0x6001BAA")]
		[Address(RVA = "0x9C52F0", Offset = "0x9C52F0", VA = "0x9C52F0")]
		public static extern Result ovrp_EnqueueSetupLayer2(ref LayerDesc desc, int compositionDepth, IntPtr layerId);
	}

	[Token(Token = "0x20004AF")]
	private static class OVRP_1_29_0
	{
		[Token(Token = "0x4001C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;

		[PreserveSig]
		[Token(Token = "0x6001BAC")]
		[Address(RVA = "0x9C5530", Offset = "0x9C5530", VA = "0x9C5530")]
		public static extern Result ovrp_GetLayerAndroidSurfaceObject(int layerId, ref IntPtr surfaceObject);

		[PreserveSig]
		[Token(Token = "0x6001BAD")]
		[Address(RVA = "0x9C5620", Offset = "0x9C5620", VA = "0x9C5620")]
		public static extern Result ovrp_SetHeadPoseModifier(ref Quatf relativeRotation, ref Vector3f relativeTranslation);

		[PreserveSig]
		[Token(Token = "0x6001BAE")]
		[Address(RVA = "0x9C5740", Offset = "0x9C5740", VA = "0x9C5740")]
		public static extern Result ovrp_GetHeadPoseModifier(out Quatf relativeRotation, out Vector3f relativeTranslation);

		[PreserveSig]
		[Token(Token = "0x6001BAF")]
		[Address(RVA = "0x9C5860", Offset = "0x9C5860", VA = "0x9C5860")]
		public static extern Result ovrp_GetNodePoseStateRaw(Step stepId, int frameIndex, Node nodeId, out PoseStatef nodePoseState);
	}

	[Token(Token = "0x20004B0")]
	private static class OVRP_1_30_0
	{
		[Token(Token = "0x4001C96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;

		[PreserveSig]
		[Token(Token = "0x6001BB1")]
		[Address(RVA = "0x9C5CC0", Offset = "0x9C5CC0", VA = "0x9C5CC0")]
		public static extern Result ovrp_GetCurrentTrackingTransformPose(out Posef trackingTransformPose);

		[PreserveSig]
		[Token(Token = "0x6001BB2")]
		[Address(RVA = "0x9C5DA8", Offset = "0x9C5DA8", VA = "0x9C5DA8")]
		public static extern Result ovrp_GetTrackingTransformRawPose(out Posef trackingTransformRawPose);

		[PreserveSig]
		[Token(Token = "0x6001BB3")]
		[Address(RVA = "0x9C5E90", Offset = "0x9C5E90", VA = "0x9C5E90")]
		public static extern Result ovrp_SendEvent2(string name, string param, string source);

		[PreserveSig]
		[Token(Token = "0x6001BB4")]
		[Address(RVA = "0x9C5FF0", Offset = "0x9C5FF0", VA = "0x9C5FF0")]
		public static extern Result ovrp_IsPerfMetricsSupported(PerfMetrics perfMetrics, out Bool isSupported);

		[PreserveSig]
		[Token(Token = "0x6001BB5")]
		[Address(RVA = "0x9C60D8", Offset = "0x9C60D8", VA = "0x9C60D8")]
		public static extern Result ovrp_GetPerfMetricsFloat(PerfMetrics perfMetrics, out float value);

		[PreserveSig]
		[Token(Token = "0x6001BB6")]
		[Address(RVA = "0x9C61F8", Offset = "0x9C61F8", VA = "0x9C61F8")]
		public static extern Result ovrp_GetPerfMetricsInt(PerfMetrics perfMetrics, out int value);
	}

	[Token(Token = "0x20004B1")]
	private static class OVRP_1_31_0
	{
		[Token(Token = "0x4001C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;

		[PreserveSig]
		[Token(Token = "0x6001BB8")]
		[Address(RVA = "0x9C63B0", Offset = "0x9C63B0", VA = "0x9C63B0")]
		public static extern Result ovrp_GetTimeInSeconds(out double value);

		[PreserveSig]
		[Token(Token = "0x6001BB9")]
		[Address(RVA = "0x9C64C0", Offset = "0x9C64C0", VA = "0x9C64C0")]
		public static extern Result ovrp_SetColorScaleAndOffset(Vector4 colorScale, Vector4 colorOffset, Bool applyToAllLayers);
	}

	[Token(Token = "0x20004B2")]
	private static class OVRP_1_32_0
	{
		[Token(Token = "0x4001C98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;

		[PreserveSig]
		[Token(Token = "0x6001BBB")]
		[Address(RVA = "0x9C6678", Offset = "0x9C6678", VA = "0x9C6678")]
		public static extern Result ovrp_AddCustomMetadata(string name, string param);
	}

	[Token(Token = "0x20004B3")]
	private static class OVRP_1_34_0
	{
		[Token(Token = "0x4001C99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;

		[PreserveSig]
		[Token(Token = "0x6001BBD")]
		[Address(RVA = "0x9C6868", Offset = "0x9C6868", VA = "0x9C6868")]
		public static extern Result ovrp_EnqueueSubmitLayer2(uint flags, IntPtr textureLeft, IntPtr textureRight, int layerId, int frameIndex, ref Posef pose, ref Vector3f scale, int layerIndex, Bool overrideTextureRectMatrix, ref TextureRectMatrixf textureRectMatrix, Bool overridePerLayerColorScaleAndOffset, ref Vector4 colorScale, ref Vector4 colorOffset);
	}

	[Token(Token = "0x20004B4")]
	private static class OVRP_1_35_0
	{
		[Token(Token = "0x4001C9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;
	}

	[Token(Token = "0x20004B5")]
	private static class OVRP_1_36_0
	{
		[Token(Token = "0x4001C9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;
	}

	[Token(Token = "0x20004B6")]
	private static class OVRP_1_37_0
	{
		[Token(Token = "0x4001C9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;
	}

	[Token(Token = "0x20004B7")]
	private static class OVRP_1_38_0
	{
		[Token(Token = "0x4001C9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;

		[PreserveSig]
		[Token(Token = "0x6001BC2")]
		[Address(RVA = "0x9C6C40", Offset = "0x9C6C40", VA = "0x9C6C40")]
		public static extern Result ovrp_GetTrackingTransformRelativePose(ref Posef trackingTransformRelativePose, TrackingOrigin trackingOrigin);

		[PreserveSig]
		[Token(Token = "0x6001BC3")]
		[Address(RVA = "0x9C6D30", Offset = "0x9C6D30", VA = "0x9C6D30")]
		public static extern Result ovrp_Media_Initialize();

		[PreserveSig]
		[Token(Token = "0x6001BC4")]
		[Address(RVA = "0x9C6E30", Offset = "0x9C6E30", VA = "0x9C6E30")]
		public static extern Result ovrp_Media_Shutdown();

		[PreserveSig]
		[Token(Token = "0x6001BC5")]
		[Address(RVA = "0x9C6F30", Offset = "0x9C6F30", VA = "0x9C6F30")]
		public static extern Result ovrp_Media_GetInitialized(out Bool initialized);

		[PreserveSig]
		[Token(Token = "0x6001BC6")]
		[Address(RVA = "0x9C7048", Offset = "0x9C7048", VA = "0x9C7048")]
		public static extern Result ovrp_Media_Update();

		[PreserveSig]
		[Token(Token = "0x6001BC7")]
		[Address(RVA = "0x9C7140", Offset = "0x9C7140", VA = "0x9C7140")]
		public static extern Result ovrp_Media_GetMrcActivationMode(out Media.MrcActivationMode activationMode);

		[PreserveSig]
		[Token(Token = "0x6001BC8")]
		[Address(RVA = "0x9C7220", Offset = "0x9C7220", VA = "0x9C7220")]
		public static extern Result ovrp_Media_SetMrcActivationMode(Media.MrcActivationMode activationMode);

		[PreserveSig]
		[Token(Token = "0x6001BC9")]
		[Address(RVA = "0x9C7300", Offset = "0x9C7300", VA = "0x9C7300")]
		public static extern Result ovrp_Media_IsMrcEnabled(out Bool mrcEnabled);

		[PreserveSig]
		[Token(Token = "0x6001BCA")]
		[Address(RVA = "0x9C7418", Offset = "0x9C7418", VA = "0x9C7418")]
		public static extern Result ovrp_Media_IsMrcActivated(out Bool mrcActivated);

		[PreserveSig]
		[Token(Token = "0x6001BCB")]
		[Address(RVA = "0x9C7530", Offset = "0x9C7530", VA = "0x9C7530")]
		public static extern Result ovrp_Media_UseMrcDebugCamera(out Bool useMrcDebugCamera);

		[PreserveSig]
		[Token(Token = "0x6001BCC")]
		[Address(RVA = "0x9C7610", Offset = "0x9C7610", VA = "0x9C7610")]
		public static extern Result ovrp_Media_SetMrcInputVideoBufferType(Media.InputVideoBufferType inputVideoBufferType);

		[PreserveSig]
		[Token(Token = "0x6001BCD")]
		[Address(RVA = "0x9C76F8", Offset = "0x9C76F8", VA = "0x9C76F8")]
		public static extern Result ovrp_Media_GetMrcInputVideoBufferType(ref Media.InputVideoBufferType inputVideoBufferType);

		[PreserveSig]
		[Token(Token = "0x6001BCE")]
		[Address(RVA = "0x9C77E0", Offset = "0x9C77E0", VA = "0x9C77E0")]
		public static extern Result ovrp_Media_SetMrcFrameSize(int frameWidth, int frameHeight);

		[PreserveSig]
		[Token(Token = "0x6001BCF")]
		[Address(RVA = "0x9C78C8", Offset = "0x9C78C8", VA = "0x9C78C8")]
		public static extern Result ovrp_Media_GetMrcFrameSize(ref int frameWidth, ref int frameHeight);

		[PreserveSig]
		[Token(Token = "0x6001BD0")]
		[Address(RVA = "0x9C79B0", Offset = "0x9C79B0", VA = "0x9C79B0")]
		public static extern Result ovrp_Media_SetMrcAudioSampleRate(int sampleRate);

		[PreserveSig]
		[Token(Token = "0x6001BD1")]
		[Address(RVA = "0x9C7A98", Offset = "0x9C7A98", VA = "0x9C7A98")]
		public static extern Result ovrp_Media_GetMrcAudioSampleRate(ref int sampleRate);

		[PreserveSig]
		[Token(Token = "0x6001BD2")]
		[Address(RVA = "0x9C7B80", Offset = "0x9C7B80", VA = "0x9C7B80")]
		public static extern Result ovrp_Media_SetMrcFrameImageFlipped(Bool flipped);

		[PreserveSig]
		[Token(Token = "0x6001BD3")]
		[Address(RVA = "0x9C7C68", Offset = "0x9C7C68", VA = "0x9C7C68")]
		public static extern Result ovrp_Media_GetMrcFrameImageFlipped(ref Bool flipped);

		[PreserveSig]
		[Token(Token = "0x6001BD4")]
		[Address(RVA = "0x9C7D50", Offset = "0x9C7D50", VA = "0x9C7D50")]
		public static extern Result ovrp_Media_EncodeMrcFrame(IntPtr rawBuffer, IntPtr audioDataPtr, int audioDataLen, int audioChannels, double timestamp, ref int outSyncId);

		[PreserveSig]
		[Token(Token = "0x6001BD5")]
		[Address(RVA = "0x9C7E90", Offset = "0x9C7E90", VA = "0x9C7E90")]
		public static extern Result ovrp_Media_EncodeMrcFrameWithDualTextures(IntPtr backgroundTextureHandle, IntPtr foregroundTextureHandle, IntPtr audioData, int audioDataLen, int audioChannels, double timestamp, ref int outSyncId);

		[PreserveSig]
		[Token(Token = "0x6001BD6")]
		[Address(RVA = "0x9C7FB0", Offset = "0x9C7FB0", VA = "0x9C7FB0")]
		public static extern Result ovrp_Media_SyncMrcFrame(int syncId);

		[PreserveSig]
		[Token(Token = "0x6001BD7")]
		[Address(RVA = "0x9C80C8", Offset = "0x9C80C8", VA = "0x9C80C8")]
		public static extern Result ovrp_SetDeveloperMode(Bool active);

		[PreserveSig]
		[Token(Token = "0x6001BD8")]
		[Address(RVA = "0x9C81D8", Offset = "0x9C81D8", VA = "0x9C81D8")]
		public static extern Result ovrp_GetNodeOrientationValid(Node nodeId, ref Bool nodeOrientationValid);

		[PreserveSig]
		[Token(Token = "0x6001BD9")]
		[Address(RVA = "0x9C82C0", Offset = "0x9C82C0", VA = "0x9C82C0")]
		public static extern Result ovrp_GetNodePositionValid(Node nodeId, ref Bool nodePositionValid);
	}

	[Token(Token = "0x20004B8")]
	private static class OVRP_1_39_0
	{
		[Token(Token = "0x4001C9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;
	}

	[Token(Token = "0x20004B9")]
	private static class OVRP_1_40_0
	{
		[Token(Token = "0x4001C9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;
	}

	[Token(Token = "0x20004BA")]
	private static class OVRP_1_41_0
	{
		[Token(Token = "0x4001CA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;
	}

	[Token(Token = "0x20004BB")]
	private static class OVRP_1_42_0
	{
		[Token(Token = "0x4001CA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;

		[PreserveSig]
		[Token(Token = "0x6001BDE")]
		[Address(RVA = "0x9C8980", Offset = "0x9C8980", VA = "0x9C8980")]
		public static extern Result ovrp_GetAdaptiveGpuPerformanceScale2(ref float adaptiveGpuPerformanceScale);
	}

	[Token(Token = "0x20004BC")]
	private static class OVRP_1_43_0
	{
		[Token(Token = "0x4001CA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;
	}

	[Token(Token = "0x20004BD")]
	private static class OVRP_1_44_0
	{
		[Token(Token = "0x4001CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;

		[PreserveSig]
		[Token(Token = "0x6001BE1")]
		[Address(RVA = "0x9C8BA0", Offset = "0x9C8BA0", VA = "0x9C8BA0")]
		public static extern Result ovrp_GetHandTrackingEnabled(ref Bool handTrackingEnabled);

		[PreserveSig]
		[Token(Token = "0x6001BE2")]
		[Address(RVA = "0x9C8C80", Offset = "0x9C8C80", VA = "0x9C8C80")]
		public static extern Result ovrp_GetHandState(Step stepId, Hand hand, out HandStateInternal handState);

		[PreserveSig]
		[Token(Token = "0x6001BE3")]
		[Address(RVA = "0x9C8D98", Offset = "0x9C8D98", VA = "0x9C8D98")]
		public static extern Result ovrp_GetSkeleton(SkeletonType skeletonType, out Skeleton skeleton);

		[PreserveSig]
		[Token(Token = "0x6001BE4")]
		[Address(RVA = "0x9C8F10", Offset = "0x9C8F10", VA = "0x9C8F10")]
		public static extern Result ovrp_GetMesh(MeshType meshType, IntPtr meshPtr);

		[PreserveSig]
		[Token(Token = "0x6001BE5")]
		[Address(RVA = "0x9C9018", Offset = "0x9C9018", VA = "0x9C9018")]
		public static extern Result ovrp_OverrideExternalCameraFov(int cameraId, Bool useOverriddenFov, ref Fovf fov);

		[PreserveSig]
		[Token(Token = "0x6001BE6")]
		[Address(RVA = "0x9C9108", Offset = "0x9C9108", VA = "0x9C9108")]
		public static extern Result ovrp_GetUseOverriddenExternalCameraFov(int cameraId, out Bool useOverriddenFov);

		[PreserveSig]
		[Token(Token = "0x6001BE7")]
		[Address(RVA = "0x9C91F8", Offset = "0x9C91F8", VA = "0x9C91F8")]
		public static extern Result ovrp_OverrideExternalCameraStaticPose(int cameraId, Bool useOverriddenPose, ref Posef poseInStageOrigin);

		[PreserveSig]
		[Token(Token = "0x6001BE8")]
		[Address(RVA = "0x9C92F0", Offset = "0x9C92F0", VA = "0x9C92F0")]
		public static extern Result ovrp_GetUseOverriddenExternalCameraStaticPose(int cameraId, out Bool useOverriddenStaticPose);

		[PreserveSig]
		[Token(Token = "0x6001BE9")]
		[Address(RVA = "0x9C93E8", Offset = "0x9C93E8", VA = "0x9C93E8")]
		public static extern Result ovrp_ResetDefaultExternalCamera();

		[PreserveSig]
		[Token(Token = "0x6001BEA")]
		[Address(RVA = "0x9C94C0", Offset = "0x9C94C0", VA = "0x9C94C0")]
		public static extern Result ovrp_SetDefaultExternalCamera(string cameraName, ref CameraIntrinsics cameraIntrinsics, ref CameraExtrinsics cameraExtrinsics);

		[PreserveSig]
		[Token(Token = "0x6001BEB")]
		[Address(RVA = "0x9C95D8", Offset = "0x9C95D8", VA = "0x9C95D8")]
		public static extern Result ovrp_GetLocalTrackingSpaceRecenterCount(ref int recenterCount);
	}

	[Token(Token = "0x20004BE")]
	private static class OVRP_1_45_0
	{
		[Token(Token = "0x4001CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;

		[PreserveSig]
		[Token(Token = "0x6001BED")]
		[Address(RVA = "0x9C9760", Offset = "0x9C9760", VA = "0x9C9760")]
		public static extern Result ovrp_GetSystemHmd3DofModeEnabled(ref Bool enabled);

		[PreserveSig]
		[Token(Token = "0x6001BEE")]
		[Address(RVA = "0x9C9848", Offset = "0x9C9848", VA = "0x9C9848")]
		public static extern Result ovrp_Media_SetAvailableQueueIndexVulkan(uint queueIndexVk);
	}

	[Token(Token = "0x20004BF")]
	private static class OVRP_1_46_0
	{
		[Token(Token = "0x4001CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;

		[PreserveSig]
		[Token(Token = "0x6001BF0")]
		[Address(RVA = "0x9C99D0", Offset = "0x9C99D0", VA = "0x9C99D0")]
		public static extern Result ovrp_GetTiledMultiResDynamic(out Bool isDynamic);

		[PreserveSig]
		[Token(Token = "0x6001BF1")]
		[Address(RVA = "0x9C9AB0", Offset = "0x9C9AB0", VA = "0x9C9AB0")]
		public static extern Result ovrp_SetTiledMultiResDynamic(Bool isDynamic);
	}

	[Token(Token = "0x20004C0")]
	private static class OVRP_1_47_0
	{
		[Token(Token = "0x4001CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;
	}

	[Token(Token = "0x20004C1")]
	private static class OVRP_1_48_0
	{
		[Token(Token = "0x4001CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;

		[PreserveSig]
		[Token(Token = "0x6001BF4")]
		[Address(RVA = "0x9C9CC8", Offset = "0x9C9CC8", VA = "0x9C9CC8")]
		public static extern Result ovrp_SetExternalCameraProperties(string cameraName, ref CameraIntrinsics cameraIntrinsics, ref CameraExtrinsics cameraExtrinsics);
	}

	[Token(Token = "0x20004C2")]
	private static class OVRP_1_49_0
	{
		[Token(Token = "0x4001CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;

		[Token(Token = "0x4001CA9")]
		public const int OVRP_ANCHOR_NAME_SIZE = 32;

		[PreserveSig]
		[Token(Token = "0x6001BF6")]
		[Address(RVA = "0x9C9E80", Offset = "0x9C9E80", VA = "0x9C9E80")]
		public static extern Result ovrp_SetClientColorDesc(ColorSpace colorSpace);

		[PreserveSig]
		[Token(Token = "0x6001BF7")]
		[Address(RVA = "0x9C9F98", Offset = "0x9C9F98", VA = "0x9C9F98")]
		public static extern Result ovrp_GetHmdColorDesc(ref ColorSpace colorSpace);

		[PreserveSig]
		[Token(Token = "0x6001BF8")]
		[Address(RVA = "0x9CA0A8", Offset = "0x9CA0A8", VA = "0x9CA0A8")]
		public static extern Result ovrp_Media_EncodeMrcFrameWithPoseTime(IntPtr rawBuffer, IntPtr audioDataPtr, int audioDataLen, int audioChannels, double timestamp, double poseTime, ref int outSyncId);

		[PreserveSig]
		[Token(Token = "0x6001BF9")]
		[Address(RVA = "0x9CA1C0", Offset = "0x9CA1C0", VA = "0x9CA1C0")]
		public static extern Result ovrp_Media_EncodeMrcFrameDualTexturesWithPoseTime(IntPtr backgroundTextureHandle, IntPtr foregroundTextureHandle, IntPtr audioData, int audioDataLen, int audioChannels, double timestamp, double poseTime, ref int outSyncId);

		[PreserveSig]
		[Token(Token = "0x6001BFA")]
		[Address(RVA = "0x9CA2F0", Offset = "0x9CA2F0", VA = "0x9CA2F0")]
		public static extern Result ovrp_Media_SetHeadsetControllerPose(Posef headsetPose, Posef leftControllerPose, Posef rightControllerPose);

		[PreserveSig]
		[Token(Token = "0x6001BFB")]
		[Address(RVA = "0x9CA468", Offset = "0x9CA468", VA = "0x9CA468")]
		public static extern Result ovrp_Media_EnumerateCameraAnchorHandles(ref int anchorCount, ref IntPtr CameraAnchorHandle);

		[PreserveSig]
		[Token(Token = "0x6001BFC")]
		[Address(RVA = "0x9CA558", Offset = "0x9CA558", VA = "0x9CA558")]
		public static extern Result ovrp_Media_GetCurrentCameraAnchorHandle(ref IntPtr anchorHandle);

		[PreserveSig]
		[Token(Token = "0x6001BFD")]
		[Address(RVA = "0x9CA640", Offset = "0x9CA640", VA = "0x9CA640")]
		public static extern Result ovrp_Media_GetCameraAnchorName(IntPtr anchorHandle, char[] cameraName);

		[PreserveSig]
		[Token(Token = "0x6001BFE")]
		[Address(RVA = "0x9CA7C0", Offset = "0x9CA7C0", VA = "0x9CA7C0")]
		public static extern Result ovrp_Media_GetCameraAnchorHandle(IntPtr anchorName, ref IntPtr anchorHandle);

		[PreserveSig]
		[Token(Token = "0x6001BFF")]
		[Address(RVA = "0x9CA8B0", Offset = "0x9CA8B0", VA = "0x9CA8B0")]
		public static extern Result ovrp_Media_GetCameraAnchorType(IntPtr anchorHandle, ref CameraAnchorType anchorType);

		[PreserveSig]
		[Token(Token = "0x6001C00")]
		[Address(RVA = "0x9CA998", Offset = "0x9CA998", VA = "0x9CA998")]
		public static extern Result ovrp_Media_CreateCustomCameraAnchor(IntPtr anchorName, ref IntPtr anchorHandle);

		[PreserveSig]
		[Token(Token = "0x6001C01")]
		[Address(RVA = "0x9CAA88", Offset = "0x9CAA88", VA = "0x9CAA88")]
		public static extern Result ovrp_Media_DestroyCustomCameraAnchor(IntPtr anchorHandle);

		[PreserveSig]
		[Token(Token = "0x6001C02")]
		[Address(RVA = "0x9CAB70", Offset = "0x9CAB70", VA = "0x9CAB70")]
		public static extern Result ovrp_Media_GetCustomCameraAnchorPose(IntPtr anchorHandle, ref Posef pose);

		[PreserveSig]
		[Token(Token = "0x6001C03")]
		[Address(RVA = "0x9CAC60", Offset = "0x9CAC60", VA = "0x9CAC60")]
		public static extern Result ovrp_Media_SetCustomCameraAnchorPose(IntPtr anchorHandle, Posef pose);

		[PreserveSig]
		[Token(Token = "0x6001C04")]
		[Address(RVA = "0x9CAD80", Offset = "0x9CAD80", VA = "0x9CAD80")]
		public static extern Result ovrp_Media_GetCameraMinMaxDistance(IntPtr anchorHandle, ref double minDistance, ref double maxDistance);

		[PreserveSig]
		[Token(Token = "0x6001C05")]
		[Address(RVA = "0x9CAE78", Offset = "0x9CAE78", VA = "0x9CAE78")]
		public static extern Result ovrp_Media_SetCameraMinMaxDistance(IntPtr anchorHandle, double minDistance, double maxDistance);
	}

	[Token(Token = "0x20004C3")]
	private static class OVRP_1_50_0
	{
		[Token(Token = "0x4001CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;
	}

	[Token(Token = "0x20004C4")]
	private static class OVRP_1_51_0
	{
		[Token(Token = "0x4001CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;
	}

	[Token(Token = "0x20004C5")]
	private static class OVRP_1_52_0
	{
		[Token(Token = "0x4001CAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Version version;
	}

	[Token(Token = "0x40003F0")]
	public const bool isSupportedPlatform = true;

	[Token(Token = "0x40003F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly Version wrapperVersion;

	[Token(Token = "0x40003F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static Version _version;

	[Token(Token = "0x40003F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Version _nativeSDKVersion;

	[Token(Token = "0x40003F4")]
	private const int OverlayShapeFlagShift = 4;

	[Token(Token = "0x40003F5")]
	public const int AppPerfFrameStatsMaxCount = 5;

	[Token(Token = "0x40003F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static GUID _nativeAudioOutGuid;

	[Token(Token = "0x40003F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static Guid _cachedAudioOutGuid;

	[Token(Token = "0x40003F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static string _cachedAudioOutString;

	[Token(Token = "0x40003F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private static GUID _nativeAudioInGuid;

	[Token(Token = "0x40003FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static Guid _cachedAudioInGuid;

	[Token(Token = "0x40003FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static string _cachedAudioInString;

	[Token(Token = "0x40003FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private static OVRNativeBuffer _nativeSystemDisplayFrequenciesAvailable;

	[Token(Token = "0x40003FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static float[] _cachedSystemDisplayFrequenciesAvailable;

	[Token(Token = "0x40003FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static HandStateInternal cachedHandState;

	[Token(Token = "0x40003FF")]
	private const string pluginName = "OVRPlugin";

	[Token(Token = "0x4000400")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
	private static Version _versionZero;

	[Token(Token = "0x17000068")]
	public static Version version
	{
		[Token(Token = "0x6000520")]
		[Address(RVA = "0x7B7D00", Offset = "0x7B7D00", VA = "0x7B7D00")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000069")]
	public static Version nativeSDKVersion
	{
		[Token(Token = "0x6000521")]
		[Address(RVA = "0x7B853C", Offset = "0x7B853C", VA = "0x7B853C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700006A")]
	public static bool initialized
	{
		[Token(Token = "0x6000522")]
		[Address(RVA = "0x7A06E0", Offset = "0x7A06E0", VA = "0x7A06E0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700006B")]
	public static bool chromatic
	{
		[Token(Token = "0x6000523")]
		[Address(RVA = "0x7B89E0", Offset = "0x7B89E0", VA = "0x7B89E0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000524")]
		[Address(RVA = "0x7B8B64", Offset = "0x7B8B64", VA = "0x7B8B64")]
		set
		{
		}
	}

	[Token(Token = "0x1700006C")]
	public static bool monoscopic
	{
		[Token(Token = "0x6000525")]
		[Address(RVA = "0x7B8D10", Offset = "0x7B8D10", VA = "0x7B8D10")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000526")]
		[Address(RVA = "0x7B8DD4", Offset = "0x7B8DD4", VA = "0x7B8DD4")]
		set
		{
		}
	}

	[Token(Token = "0x1700006D")]
	public static bool rotation
	{
		[Token(Token = "0x6000527")]
		[Address(RVA = "0x7B8EBC", Offset = "0x7B8EBC", VA = "0x7B8EBC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000528")]
		[Address(RVA = "0x7B8F80", Offset = "0x7B8F80", VA = "0x7B8F80")]
		set
		{
		}
	}

	[Token(Token = "0x1700006E")]
	public static bool position
	{
		[Token(Token = "0x6000529")]
		[Address(RVA = "0x7B9068", Offset = "0x7B9068", VA = "0x7B9068")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600052A")]
		[Address(RVA = "0x7B912C", Offset = "0x7B912C", VA = "0x7B912C")]
		set
		{
		}
	}

	[Token(Token = "0x1700006F")]
	public static bool useIPDInPositionTracking
	{
		[Token(Token = "0x600052B")]
		[Address(RVA = "0x7B9214", Offset = "0x7B9214", VA = "0x7B9214")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600052C")]
		[Address(RVA = "0x7B9398", Offset = "0x7B9398", VA = "0x7B9398")]
		set
		{
		}
	}

	[Token(Token = "0x17000070")]
	public static bool positionSupported
	{
		[Token(Token = "0x600052D")]
		[Address(RVA = "0x7B9540", Offset = "0x7B9540", VA = "0x7B9540")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000071")]
	public static bool positionTracked
	{
		[Token(Token = "0x600052E")]
		[Address(RVA = "0x7B9604", Offset = "0x7B9604", VA = "0x7B9604")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000072")]
	public static bool powerSaving
	{
		[Token(Token = "0x600052F")]
		[Address(RVA = "0x7A40E0", Offset = "0x7A40E0", VA = "0x7A40E0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000073")]
	public static bool hmdPresent
	{
		[Token(Token = "0x6000530")]
		[Address(RVA = "0x7A78B8", Offset = "0x7A78B8", VA = "0x7A78B8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000074")]
	public static bool userPresent
	{
		[Token(Token = "0x6000531")]
		[Address(RVA = "0x7B96CC", Offset = "0x7B96CC", VA = "0x7B96CC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000075")]
	public static bool headphonesPresent
	{
		[Token(Token = "0x6000532")]
		[Address(RVA = "0x7B9790", Offset = "0x7B9790", VA = "0x7B9790")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000076")]
	public static int recommendedMSAALevel
	{
		[Token(Token = "0x6000533")]
		[Address(RVA = "0x7B9854", Offset = "0x7B9854", VA = "0x7B9854")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000077")]
	public static SystemRegion systemRegion
	{
		[Token(Token = "0x6000534")]
		[Address(RVA = "0x7B99CC", Offset = "0x7B99CC", VA = "0x7B99CC")]
		get
		{
			return default(SystemRegion);
		}
	}

	[Token(Token = "0x17000078")]
	public static string audioOutId
	{
		[Token(Token = "0x6000535")]
		[Address(RVA = "0x7B9B44", Offset = "0x7B9B44", VA = "0x7B9B44")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000079")]
	public static string audioInId
	{
		[Token(Token = "0x6000536")]
		[Address(RVA = "0x7BA28C", Offset = "0x7BA28C", VA = "0x7BA28C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700007A")]
	public static bool hasVrFocus
	{
		[Token(Token = "0x6000537")]
		[Address(RVA = "0x7BA9CC", Offset = "0x7BA9CC", VA = "0x7BA9CC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700007B")]
	public static bool hasInputFocus
	{
		[Token(Token = "0x6000538")]
		[Address(RVA = "0x7BAA50", Offset = "0x7BAA50", VA = "0x7BAA50")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700007C")]
	public static bool shouldQuit
	{
		[Token(Token = "0x6000539")]
		[Address(RVA = "0x7BABC4", Offset = "0x7BABC4", VA = "0x7BABC4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700007D")]
	public static bool shouldRecenter
	{
		[Token(Token = "0x600053A")]
		[Address(RVA = "0x7BAC48", Offset = "0x7BAC48", VA = "0x7BAC48")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700007E")]
	public static string productName
	{
		[Token(Token = "0x600053B")]
		[Address(RVA = "0x7BACCC", Offset = "0x7BACCC", VA = "0x7BACCC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700007F")]
	public static string latency
	{
		[Token(Token = "0x600053C")]
		[Address(RVA = "0x7BAD48", Offset = "0x7BAD48", VA = "0x7BAD48")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000080")]
	public static float eyeDepth
	{
		[Token(Token = "0x600053D")]
		[Address(RVA = "0x7BAE18", Offset = "0x7BAE18", VA = "0x7BAE18")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600053E")]
		[Address(RVA = "0x7BAED0", Offset = "0x7BAED0", VA = "0x7BAED0")]
		set
		{
		}
	}

	[Token(Token = "0x17000081")]
	public static float eyeHeight
	{
		[Token(Token = "0x600053F")]
		[Address(RVA = "0x7BAF54", Offset = "0x7BAF54", VA = "0x7BAF54")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000540")]
		[Address(RVA = "0x7BAFD0", Offset = "0x7BAFD0", VA = "0x7BAFD0")]
		set
		{
		}
	}

	[Token(Token = "0x17000082")]
	public static float batteryLevel
	{
		[Token(Token = "0x6000541")]
		[Address(RVA = "0x7BB054", Offset = "0x7BB054", VA = "0x7BB054")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000083")]
	public static float batteryTemperature
	{
		[Token(Token = "0x6000542")]
		[Address(RVA = "0x7BB0D0", Offset = "0x7BB0D0", VA = "0x7BB0D0")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000084")]
	public static int cpuLevel
	{
		[Token(Token = "0x6000543")]
		[Address(RVA = "0x7BB14C", Offset = "0x7BB14C", VA = "0x7BB14C")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000544")]
		[Address(RVA = "0x7A3F14", Offset = "0x7A3F14", VA = "0x7A3F14")]
		set
		{
		}
	}

	[Token(Token = "0x17000085")]
	public static int gpuLevel
	{
		[Token(Token = "0x6000545")]
		[Address(RVA = "0x7BB1C8", Offset = "0x7BB1C8", VA = "0x7BB1C8")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000546")]
		[Address(RVA = "0x7A3F98", Offset = "0x7A3F98", VA = "0x7A3F98")]
		set
		{
		}
	}

	[Token(Token = "0x17000086")]
	public static int vsyncCount
	{
		[Token(Token = "0x6000547")]
		[Address(RVA = "0x7BB244", Offset = "0x7BB244", VA = "0x7BB244")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000548")]
		[Address(RVA = "0x7BB2C0", Offset = "0x7BB2C0", VA = "0x7BB2C0")]
		set
		{
		}
	}

	[Token(Token = "0x17000087")]
	public static float systemVolume
	{
		[Token(Token = "0x6000549")]
		[Address(RVA = "0x7BB344", Offset = "0x7BB344", VA = "0x7BB344")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000088")]
	public static float ipd
	{
		[Token(Token = "0x600054A")]
		[Address(RVA = "0x7BB3C0", Offset = "0x7BB3C0", VA = "0x7BB3C0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600054B")]
		[Address(RVA = "0x7BB43C", Offset = "0x7BB43C", VA = "0x7BB43C")]
		set
		{
		}
	}

	[Token(Token = "0x17000089")]
	public static bool occlusionMesh
	{
		[Token(Token = "0x600054C")]
		[Address(RVA = "0x7BB4C0", Offset = "0x7BB4C0", VA = "0x7BB4C0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600054D")]
		[Address(RVA = "0x7BB584", Offset = "0x7BB584", VA = "0x7BB584")]
		set
		{
		}
	}

	[Token(Token = "0x1700008A")]
	public static BatteryStatus batteryStatus
	{
		[Token(Token = "0x600054E")]
		[Address(RVA = "0x7BB66C", Offset = "0x7BB66C", VA = "0x7BB66C")]
		get
		{
			return default(BatteryStatus);
		}
	}

	[Token(Token = "0x1700008B")]
	public static bool fixedFoveatedRenderingSupported
	{
		[Token(Token = "0x6000598")]
		[Address(RVA = "0x7BF034", Offset = "0x7BF034", VA = "0x7BF034")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700008C")]
	public static FixedFoveatedRenderingLevel fixedFoveatedRenderingLevel
	{
		[Token(Token = "0x6000599")]
		[Address(RVA = "0x7BF1A0", Offset = "0x7BF1A0", VA = "0x7BF1A0")]
		get
		{
			return default(FixedFoveatedRenderingLevel);
		}
		[Token(Token = "0x600059A")]
		[Address(RVA = "0x7BF330", Offset = "0x7BF330", VA = "0x7BF330")]
		set
		{
		}
	}

	[Token(Token = "0x1700008D")]
	public static bool useDynamicFixedFoveatedRendering
	{
		[Token(Token = "0x600059B")]
		[Address(RVA = "0x7BF4AC", Offset = "0x7BF4AC", VA = "0x7BF4AC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600059C")]
		[Address(RVA = "0x7BF64C", Offset = "0x7BF64C", VA = "0x7BF64C")]
		set
		{
		}
	}

	[Token(Token = "0x1700008E")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x2FDF00", Offset = "0x2FDF00")]
	public static bool tiledMultiResSupported
	{
		[Token(Token = "0x600059D")]
		[Address(RVA = "0x7BF7C8", Offset = "0x7BF7C8", VA = "0x7BF7C8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700008F")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x2FDF38", Offset = "0x2FDF38")]
	public static TiledMultiResLevel tiledMultiResLevel
	{
		[Token(Token = "0x600059E")]
		[Address(RVA = "0x7BF840", Offset = "0x7BF840", VA = "0x7BF840")]
		get
		{
			return default(TiledMultiResLevel);
		}
		[Token(Token = "0x600059F")]
		[Address(RVA = "0x7BF8B8", Offset = "0x7BF8B8", VA = "0x7BF8B8")]
		set
		{
		}
	}

	[Token(Token = "0x17000090")]
	public static bool gpuUtilSupported
	{
		[Token(Token = "0x60005A0")]
		[Address(RVA = "0x7BF938", Offset = "0x7BF938", VA = "0x7BF938")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000091")]
	public static float gpuUtilLevel
	{
		[Token(Token = "0x60005A1")]
		[Address(RVA = "0x7BFAA4", Offset = "0x7BFAA4", VA = "0x7BFAA4")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000092")]
	public static float[] systemDisplayFrequenciesAvailable
	{
		[Token(Token = "0x60005A2")]
		[Address(RVA = "0x7BFC4C", Offset = "0x7BFC4C", VA = "0x7BFC4C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000093")]
	public static float systemDisplayFrequency
	{
		[Token(Token = "0x60005A3")]
		[Address(RVA = "0x7C00C0", Offset = "0x7C00C0", VA = "0x7C00C0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60005A4")]
		[Address(RVA = "0x7C0324", Offset = "0x7C0324", VA = "0x7C0324")]
		set
		{
		}
	}

	[Token(Token = "0x17000094")]
	public static bool AsymmetricFovEnabled
	{
		[Token(Token = "0x60005A6")]
		[Address(RVA = "0x7C05DC", Offset = "0x7C05DC", VA = "0x7C05DC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000095")]
	public static bool EyeTextureArrayEnabled
	{
		[Token(Token = "0x60005A7")]
		[Address(RVA = "0x7C074C", Offset = "0x7C074C", VA = "0x7C074C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600054F")]
	[Address(RVA = "0x7BB6E8", Offset = "0x7BB6E8", VA = "0x7BB6E8")]
	public static Frustumf GetEyeFrustum(Eye eyeId)
	{
		return default(Frustumf);
	}

	[Token(Token = "0x6000550")]
	[Address(RVA = "0x7BB774", Offset = "0x7BB774", VA = "0x7BB774")]
	public static Sizei GetEyeTextureSize(Eye eyeId)
	{
		return default(Sizei);
	}

	[Token(Token = "0x6000551")]
	[Address(RVA = "0x7BB800", Offset = "0x7BB800", VA = "0x7BB800")]
	public static Posef GetTrackerPose(Tracker trackerId)
	{
		return default(Posef);
	}

	[Token(Token = "0x6000552")]
	[Address(RVA = "0x7BB88C", Offset = "0x7BB88C", VA = "0x7BB88C")]
	public static Frustumf GetTrackerFrustum(Tracker trackerId)
	{
		return default(Frustumf);
	}

	[Token(Token = "0x6000553")]
	[Address(RVA = "0x7BB918", Offset = "0x7BB918", VA = "0x7BB918")]
	public static bool ShowUI(PlatformUI ui)
	{
		return default(bool);
	}

	[Token(Token = "0x6000554")]
	[Address(RVA = "0x7AB49C", Offset = "0x7AB49C", VA = "0x7AB49C")]
	public static bool EnqueueSubmitLayer(bool onTop, bool headLocked, bool noDepthBufferTesting, IntPtr leftTexture, IntPtr rightTexture, int layerId, int frameIndex, Posef pose, Vector3f scale, int layerIndex = 0, OverlayShape shape = OverlayShape.Quad, bool overrideTextureRectMatrix = false, [Optional] TextureRectMatrixf textureRectMatrix, bool overridePerLayerColorScaleAndOffset = false, [Optional] Vector4 colorScale, [Optional] Vector4 colorOffset, bool expensiveSuperSample = false, bool hidden = false)
	{
		return default(bool);
	}

	[Token(Token = "0x6000555")]
	[Address(RVA = "0x7A9C10", Offset = "0x7A9C10", VA = "0x7A9C10")]
	public static LayerDesc CalculateLayerDesc(OverlayShape shape, LayerLayout layout, Sizei textureSize, int mipLevels, int sampleCount, EyeTextureFormat format, int layerFlags)
	{
		return default(LayerDesc);
	}

	[Token(Token = "0x6000556")]
	[Address(RVA = "0x7A9E10", Offset = "0x7A9E10", VA = "0x7A9E10")]
	public static bool EnqueueSetupLayer(LayerDesc desc, int compositionDepth, IntPtr layerID)
	{
		return default(bool);
	}

	[Token(Token = "0x6000557")]
	[Address(RVA = "0x7ABDC8", Offset = "0x7ABDC8", VA = "0x7ABDC8")]
	public static bool EnqueueDestroyLayer(IntPtr layerID)
	{
		return default(bool);
	}

	[Token(Token = "0x6000558")]
	[Address(RVA = "0x7AAE2C", Offset = "0x7AAE2C", VA = "0x7AAE2C")]
	public static IntPtr GetLayerTexture(int layerId, int stage, Eye eyeId)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6000559")]
	[Address(RVA = "0x7AA144", Offset = "0x7AA144", VA = "0x7AA144")]
	public static int GetLayerTextureStageCount(int layerId)
	{
		return default(int);
	}

	[Token(Token = "0x600055A")]
	[Address(RVA = "0x7AAA50", Offset = "0x7AAA50", VA = "0x7AAA50")]
	public static IntPtr GetLayerAndroidSurfaceObject(int layerId)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x600055B")]
	[Address(RVA = "0x7BB9A4", Offset = "0x7BB9A4", VA = "0x7BB9A4")]
	public static bool UpdateNodePhysicsPoses(int frameIndex, double predictionSeconds)
	{
		return default(bool);
	}

	[Token(Token = "0x600055C")]
	[Address(RVA = "0x7A88BC", Offset = "0x7A88BC", VA = "0x7A88BC")]
	public static Posef GetNodePose(Node nodeId, Step stepId)
	{
		return default(Posef);
	}

	[Token(Token = "0x600055D")]
	[Address(RVA = "0x7A848C", Offset = "0x7A848C", VA = "0x7A848C")]
	public static Vector3f GetNodeVelocity(Node nodeId, Step stepId)
	{
		return default(Vector3f);
	}

	[Token(Token = "0x600055E")]
	[Address(RVA = "0x7A8740", Offset = "0x7A8740", VA = "0x7A8740")]
	public static Vector3f GetNodeAngularVelocity(Node nodeId, Step stepId)
	{
		return default(Vector3f);
	}

	[Token(Token = "0x600055F")]
	[Address(RVA = "0x7A7EB8", Offset = "0x7A7EB8", VA = "0x7A7EB8")]
	public static Vector3f GetNodeAcceleration(Node nodeId, Step stepId)
	{
		return default(Vector3f);
	}

	[Token(Token = "0x6000560")]
	[Address(RVA = "0x7A8310", Offset = "0x7A8310", VA = "0x7A8310")]
	public static Vector3f GetNodeAngularAcceleration(Node nodeId, Step stepId)
	{
		return default(Vector3f);
	}

	[Token(Token = "0x6000561")]
	[Address(RVA = "0x7BBB18", Offset = "0x7BBB18", VA = "0x7BBB18")]
	public static bool GetNodePresent(Node nodeId)
	{
		return default(bool);
	}

	[Token(Token = "0x6000562")]
	[Address(RVA = "0x7BBBA4", Offset = "0x7BBBA4", VA = "0x7BBBA4")]
	public static bool GetNodeOrientationTracked(Node nodeId)
	{
		return default(bool);
	}

	[Token(Token = "0x6000563")]
	[Address(RVA = "0x7BBC30", Offset = "0x7BBC30", VA = "0x7BBC30")]
	public static bool GetNodeOrientationValid(Node nodeId)
	{
		return default(bool);
	}

	[Token(Token = "0x6000564")]
	[Address(RVA = "0x7BBDE4", Offset = "0x7BBDE4", VA = "0x7BBDE4")]
	public static bool GetNodePositionTracked(Node nodeId)
	{
		return default(bool);
	}

	[Token(Token = "0x6000565")]
	[Address(RVA = "0x7BBE70", Offset = "0x7BBE70", VA = "0x7BBE70")]
	public static bool GetNodePositionValid(Node nodeId)
	{
		return default(bool);
	}

	[Token(Token = "0x6000566")]
	[Address(RVA = "0x7BC024", Offset = "0x7BC024", VA = "0x7BC024")]
	public static PoseStatef GetNodePoseStateRaw(Node nodeId, Step stepId)
	{
		return default(PoseStatef);
	}

	[Token(Token = "0x6000567")]
	[Address(RVA = "0x7BC328", Offset = "0x7BC328", VA = "0x7BC328")]
	public static Posef GetCurrentTrackingTransformPose()
	{
		return default(Posef);
	}

	[Token(Token = "0x6000568")]
	[Address(RVA = "0x7BC530", Offset = "0x7BC530", VA = "0x7BC530")]
	public static Posef GetTrackingTransformRawPose()
	{
		return default(Posef);
	}

	[Token(Token = "0x6000569")]
	[Address(RVA = "0x7A292C", Offset = "0x7A292C", VA = "0x7A292C")]
	public static Posef GetTrackingTransformRelativePose(TrackingOrigin trackingOrigin)
	{
		return default(Posef);
	}

	[Token(Token = "0x600056A")]
	[Address(RVA = "0x7BC738", Offset = "0x7BC738", VA = "0x7BC738")]
	public static ControllerState GetControllerState(uint controllerMask)
	{
		return default(ControllerState);
	}

	[Token(Token = "0x600056B")]
	[Address(RVA = "0x7BC7C4", Offset = "0x7BC7C4", VA = "0x7BC7C4")]
	public static ControllerState2 GetControllerState2(uint controllerMask)
	{
		return default(ControllerState2);
	}

	[Token(Token = "0x600056C")]
	[Address(RVA = "0x7BCA20", Offset = "0x7BCA20", VA = "0x7BCA20")]
	public static ControllerState4 GetControllerState4(uint controllerMask)
	{
		return default(ControllerState4);
	}

	[Token(Token = "0x600056D")]
	[Address(RVA = "0x7BCCF0", Offset = "0x7BCCF0", VA = "0x7BCCF0")]
	public static bool SetControllerVibration(uint controllerMask, float frequency, float amplitude)
	{
		return default(bool);
	}

	[Token(Token = "0x600056E")]
	[Address(RVA = "0x7BCD8C", Offset = "0x7BCD8C", VA = "0x7BCD8C")]
	public static HapticsDesc GetControllerHapticsDesc(uint controllerMask)
	{
		return default(HapticsDesc);
	}

	[Token(Token = "0x600056F")]
	[Address(RVA = "0x7BCEEC", Offset = "0x7BCEEC", VA = "0x7BCEEC")]
	public static HapticsState GetControllerHapticsState(uint controllerMask)
	{
		return default(HapticsState);
	}

	[Token(Token = "0x6000570")]
	[Address(RVA = "0x7BD044", Offset = "0x7BD044", VA = "0x7BD044")]
	public static bool SetControllerHaptics(uint controllerMask, HapticsBuffer hapticsBuffer)
	{
		return default(bool);
	}

	[Token(Token = "0x6000571")]
	[Address(RVA = "0x7BD1A8", Offset = "0x7BD1A8", VA = "0x7BD1A8")]
	public static float GetEyeRecommendedResolutionScale()
	{
		return default(float);
	}

	[Token(Token = "0x6000572")]
	[Address(RVA = "0x7BD2E4", Offset = "0x7BD2E4", VA = "0x7BD2E4")]
	public static float GetAppCpuStartToGpuEndTime()
	{
		return default(float);
	}

	[Token(Token = "0x6000573")]
	[Address(RVA = "0x7BD420", Offset = "0x7BD420", VA = "0x7BD420")]
	public static bool GetBoundaryConfigured()
	{
		return default(bool);
	}

	[Token(Token = "0x6000574")]
	[Address(RVA = "0x7BD56C", Offset = "0x7BD56C", VA = "0x7BD56C")]
	public static BoundaryTestResult TestBoundaryNode(Node nodeId, BoundaryType boundaryType)
	{
		return default(BoundaryTestResult);
	}

	[Token(Token = "0x6000575")]
	[Address(RVA = "0x7BD6CC", Offset = "0x7BD6CC", VA = "0x7BD6CC")]
	public static BoundaryTestResult TestBoundaryPoint(Vector3f point, BoundaryType boundaryType)
	{
		return default(BoundaryTestResult);
	}

	[Token(Token = "0x6000576")]
	[Address(RVA = "0x7BD84C", Offset = "0x7BD84C", VA = "0x7BD84C")]
	public static BoundaryGeometry GetBoundaryGeometry(BoundaryType boundaryType)
	{
		return default(BoundaryGeometry);
	}

	[Token(Token = "0x6000577")]
	[Address(RVA = "0x7BD9A8", Offset = "0x7BD9A8", VA = "0x7BD9A8")]
	public static bool GetBoundaryGeometry2(BoundaryType boundaryType, IntPtr points, ref int pointsCount)
	{
		return default(bool);
	}

	[Token(Token = "0x6000578")]
	[Address(RVA = "0x7BDB14", Offset = "0x7BDB14", VA = "0x7BDB14")]
	public static AppPerfStats GetAppPerfStats()
	{
		return default(AppPerfStats);
	}

	[Token(Token = "0x6000579")]
	[Address(RVA = "0x7BDC60", Offset = "0x7BDC60", VA = "0x7BDC60")]
	public static bool ResetAppPerfStats()
	{
		return default(bool);
	}

	[Token(Token = "0x600057A")]
	[Address(RVA = "0x7BDDAC", Offset = "0x7BDDAC", VA = "0x7BDDAC")]
	public static float GetAppFramerate()
	{
		return default(float);
	}

	[Token(Token = "0x600057B")]
	[Address(RVA = "0x7BDEE8", Offset = "0x7BDEE8", VA = "0x7BDEE8")]
	public static bool SetHandNodePoseStateLatency(double latencyInSeconds)
	{
		return default(bool);
	}

	[Token(Token = "0x600057C")]
	[Address(RVA = "0x7BE048", Offset = "0x7BE048", VA = "0x7BE048")]
	public static double GetHandNodePoseStateLatency()
	{
		return default(double);
	}

	[Token(Token = "0x600057D")]
	[Address(RVA = "0x7BE1BC", Offset = "0x7BE1BC", VA = "0x7BE1BC")]
	public static EyeTextureFormat GetDesiredEyeTextureFormat()
	{
		return default(EyeTextureFormat);
	}

	[Token(Token = "0x600057E")]
	[Address(RVA = "0x7BE300", Offset = "0x7BE300", VA = "0x7BE300")]
	public static bool SetDesiredEyeTextureFormat(EyeTextureFormat value)
	{
		return default(bool);
	}

	[Token(Token = "0x600057F")]
	[Address(RVA = "0x7A08B0", Offset = "0x7A08B0", VA = "0x7A08B0")]
	public static bool InitializeMixedReality()
	{
		return default(bool);
	}

	[Token(Token = "0x6000580")]
	[Address(RVA = "0x7A0E28", Offset = "0x7A0E28", VA = "0x7A0E28")]
	public static bool ShutdownMixedReality()
	{
		return default(bool);
	}

	[Token(Token = "0x6000581")]
	[Address(RVA = "0x7A0764", Offset = "0x7A0764", VA = "0x7A0764")]
	public static bool IsMixedRealityInitialized()
	{
		return default(bool);
	}

	[Token(Token = "0x6000582")]
	[Address(RVA = "0x7A1FB4", Offset = "0x7A1FB4", VA = "0x7A1FB4")]
	public static int GetExternalCameraCount()
	{
		return default(int);
	}

	[Token(Token = "0x6000583")]
	[Address(RVA = "0x7A09FC", Offset = "0x7A09FC", VA = "0x7A09FC")]
	public static bool UpdateExternalCamera()
	{
		return default(bool);
	}

	[Token(Token = "0x6000584")]
	[Address(RVA = "0x7A2750", Offset = "0x7A2750", VA = "0x7A2750")]
	public static bool GetMixedRealityCameraInfo(int cameraId, out CameraExtrinsics cameraExtrinsics, out CameraIntrinsics cameraIntrinsics)
	{
		return default(bool);
	}

	[Token(Token = "0x6000585")]
	[Address(RVA = "0x7A3760", Offset = "0x7A3760", VA = "0x7A3760")]
	public static bool OverrideExternalCameraFov(int cameraId, bool useOverriddenFov, Fovf fov)
	{
		return default(bool);
	}

	[Token(Token = "0x6000586")]
	[Address(RVA = "0x7A3A70", Offset = "0x7A3A70", VA = "0x7A3A70")]
	public static bool GetUseOverriddenExternalCameraFov(int cameraId)
	{
		return default(bool);
	}

	[Token(Token = "0x6000587")]
	[Address(RVA = "0x7A38E0", Offset = "0x7A38E0", VA = "0x7A38E0")]
	public static bool OverrideExternalCameraStaticPose(int cameraId, bool useOverriddenPose, Posef poseInStageOrigin)
	{
		return default(bool);
	}

	[Token(Token = "0x6000588")]
	[Address(RVA = "0x7A3BEC", Offset = "0x7A3BEC", VA = "0x7A3BEC")]
	public static bool GetUseOverriddenExternalCameraStaticPose(int cameraId)
	{
		return default(bool);
	}

	[Token(Token = "0x6000589")]
	[Address(RVA = "0x7A1E68", Offset = "0x7A1E68", VA = "0x7A1E68")]
	public static bool ResetDefaultExternalCamera()
	{
		return default(bool);
	}

	[Token(Token = "0x600058A")]
	[Address(RVA = "0x7A2B7C", Offset = "0x7A2B7C", VA = "0x7A2B7C")]
	public static bool SetDefaultExternalCamera(string cameraName, ref CameraIntrinsics cameraIntrinsics, ref CameraExtrinsics cameraExtrinsics)
	{
		return default(bool);
	}

	[Token(Token = "0x600058B")]
	[Address(RVA = "0x7BE454", Offset = "0x7BE454", VA = "0x7BE454")]
	public static bool SetExternalCameraProperties(string cameraName, ref CameraIntrinsics cameraIntrinsics, ref CameraExtrinsics cameraExtrinsics)
	{
		return default(bool);
	}

	[Token(Token = "0x600058C")]
	[Address(RVA = "0x7BE5BC", Offset = "0x7BE5BC", VA = "0x7BE5BC")]
	public static Vector3f GetBoundaryDimensions(BoundaryType boundaryType)
	{
		return default(Vector3f);
	}

	[Token(Token = "0x600058D")]
	[Address(RVA = "0x7BE718", Offset = "0x7BE718", VA = "0x7BE718")]
	public static bool GetBoundaryVisible()
	{
		return default(bool);
	}

	[Token(Token = "0x600058E")]
	[Address(RVA = "0x7BE864", Offset = "0x7BE864", VA = "0x7BE864")]
	public static bool SetBoundaryVisible(bool value)
	{
		return default(bool);
	}

	[Token(Token = "0x600058F")]
	[Address(RVA = "0x7BE9E4", Offset = "0x7BE9E4", VA = "0x7BE9E4")]
	public static SystemHeadset GetSystemHeadsetType()
	{
		return default(SystemHeadset);
	}

	[Token(Token = "0x6000590")]
	[Address(RVA = "0x7BEB20", Offset = "0x7BEB20", VA = "0x7BEB20")]
	public static Controller GetActiveController()
	{
		return default(Controller);
	}

	[Token(Token = "0x6000591")]
	[Address(RVA = "0x7BEC5C", Offset = "0x7BEC5C", VA = "0x7BEC5C")]
	public static Controller GetConnectedControllers()
	{
		return default(Controller);
	}

	[Token(Token = "0x6000592")]
	[Address(RVA = "0x7B8D0C", Offset = "0x7B8D0C", VA = "0x7B8D0C")]
	private static Bool ToBool(bool b)
	{
		return default(Bool);
	}

	[Token(Token = "0x6000593")]
	[Address(RVA = "0x7BED98", Offset = "0x7BED98", VA = "0x7BED98")]
	public static TrackingOrigin GetTrackingOriginType()
	{
		return default(TrackingOrigin);
	}

	[Token(Token = "0x6000594")]
	[Address(RVA = "0x7BEE14", Offset = "0x7BEE14", VA = "0x7BEE14")]
	public static bool SetTrackingOriginType(TrackingOrigin originType)
	{
		return default(bool);
	}

	[Token(Token = "0x6000595")]
	[Address(RVA = "0x7BEEA0", Offset = "0x7BEEA0", VA = "0x7BEEA0")]
	public static Posef GetTrackingCalibratedOrigin()
	{
		return default(Posef);
	}

	[Token(Token = "0x6000596")]
	[Address(RVA = "0x7BEF24", Offset = "0x7BEF24", VA = "0x7BEF24")]
	public static bool SetTrackingCalibratedOrigin()
	{
		return default(bool);
	}

	[Token(Token = "0x6000597")]
	[Address(RVA = "0x7BEFA8", Offset = "0x7BEFA8", VA = "0x7BEFA8")]
	public static bool RecenterTrackingOrigin(RecenterFlags flags)
	{
		return default(bool);
	}

	[Token(Token = "0x60005A5")]
	[Address(RVA = "0x7C0464", Offset = "0x7C0464", VA = "0x7C0464")]
	public static bool GetNodeFrustum2(Node nodeId, out Frustumf2 frustum)
	{
		return default(bool);
	}

	[Token(Token = "0x60005A8")]
	[Address(RVA = "0x7C0898", Offset = "0x7C0898", VA = "0x7C0898")]
	public static Handedness GetDominantHand()
	{
		return default(Handedness);
	}

	[Token(Token = "0x60005A9")]
	[Address(RVA = "0x7C09FC", Offset = "0x7C09FC", VA = "0x7C09FC")]
	public static bool SendEvent(string name, string param = "", string source = "")
	{
		return default(bool);
	}

	[Token(Token = "0x60005AA")]
	[Address(RVA = "0x7C0C8C", Offset = "0x7C0C8C", VA = "0x7C0C8C")]
	public static bool SetHeadPoseModifier(ref Quatf relativeRotation, ref Vector3f relativeTranslation)
	{
		return default(bool);
	}

	[Token(Token = "0x60005AB")]
	[Address(RVA = "0x7C0DE8", Offset = "0x7C0DE8", VA = "0x7C0DE8")]
	public static bool GetHeadPoseModifier(out Quatf relativeRotation, out Vector3f relativeTranslation)
	{
		return default(bool);
	}

	[Token(Token = "0x60005AC")]
	[Address(RVA = "0x7C0FE0", Offset = "0x7C0FE0", VA = "0x7C0FE0")]
	public static bool IsPerfMetricsSupported(PerfMetrics perfMetrics)
	{
		return default(bool);
	}

	[Token(Token = "0x60005AD")]
	[Address(RVA = "0x7C1154", Offset = "0x7C1154", VA = "0x7C1154")]
	public static float? GetPerfMetricsFloat(PerfMetrics perfMetrics)
	{
		return null;
	}

	[Token(Token = "0x60005AE")]
	[Address(RVA = "0x7C12F8", Offset = "0x7C12F8", VA = "0x7C12F8")]
	public static int? GetPerfMetricsInt(PerfMetrics perfMetrics)
	{
		return null;
	}

	[Token(Token = "0x60005AF")]
	[Address(RVA = "0x7C149C", Offset = "0x7C149C", VA = "0x7C149C")]
	public static double GetTimeInSeconds()
	{
		return default(double);
	}

	[Token(Token = "0x60005B0")]
	[Address(RVA = "0x7C1604", Offset = "0x7C1604", VA = "0x7C1604")]
	public static bool SetColorScaleAndOffset(Vector4 colorScale, Vector4 colorOffset, bool applyToAllLayers)
	{
		return default(bool);
	}

	[Token(Token = "0x60005B1")]
	[Address(RVA = "0x7C17B0", Offset = "0x7C17B0", VA = "0x7C17B0")]
	public static bool AddCustomMetadata(string name, string param = "")
	{
		return default(bool);
	}

	[Token(Token = "0x60005B2")]
	[Address(RVA = "0x7C190C", Offset = "0x7C190C", VA = "0x7C190C")]
	public static bool SetDeveloperMode(Bool active)
	{
		return default(bool);
	}

	[Token(Token = "0x60005B3")]
	[Address(RVA = "0x7C1A60", Offset = "0x7C1A60", VA = "0x7C1A60")]
	public static float GetAdaptiveGPUPerformanceScale()
	{
		return default(float);
	}

	[Token(Token = "0x60005B4")]
	[Address(RVA = "0x7C1BD0", Offset = "0x7C1BD0", VA = "0x7C1BD0")]
	public static bool GetHandTrackingEnabled()
	{
		return default(bool);
	}

	[Token(Token = "0x60005B5")]
	[Address(RVA = "0x7C1D40", Offset = "0x7C1D40", VA = "0x7C1D40")]
	public static bool GetHandState(Step stepId, Hand hand, ref HandState handState)
	{
		return default(bool);
	}

	[Token(Token = "0x60005B6")]
	[Address(RVA = "0x7C2B48", Offset = "0x7C2B48", VA = "0x7C2B48")]
	public static bool GetSkeleton(SkeletonType skeletonType, out Skeleton skeleton)
	{
		return default(bool);
	}

	[Token(Token = "0x60005B7")]
	[Address(RVA = "0x79F068", Offset = "0x79F068", VA = "0x79F068")]
	public static bool GetMesh(MeshType meshType, out Mesh mesh)
	{
		return default(bool);
	}

	[Token(Token = "0x60005B8")]
	[Address(RVA = "0x7C2CB4", Offset = "0x7C2CB4", VA = "0x7C2CB4")]
	public static int GetLocalTrackingSpaceRecenterCount()
	{
		return default(int);
	}

	[Token(Token = "0x60005B9")]
	[Address(RVA = "0x7C2E1C", Offset = "0x7C2E1C", VA = "0x7C2E1C")]
	public static bool GetSystemHmd3DofModeEnabled()
	{
		return default(bool);
	}

	[Token(Token = "0x60005BA")]
	[Address(RVA = "0x7C2F8C", Offset = "0x7C2F8C", VA = "0x7C2F8C")]
	public static bool SetClientColorDesc(ColorSpace colorSpace)
	{
		return default(bool);
	}

	[Token(Token = "0x60005BB")]
	[Address(RVA = "0x7C30E8", Offset = "0x7C30E8", VA = "0x7C30E8")]
	public static ColorSpace GetHmdColorDesc()
	{
		return default(ColorSpace);
	}
}
[Token(Token = "0x20000ED")]
public class OVRProfile : UnityEngine.Object
{
	[Token(Token = "0x20004C6")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x2EAB8C", Offset = "0x2EAB8C")]
	public enum State
	{
		[Token(Token = "0x4001CAE")]
		NOT_TRIGGERED,
		[Token(Token = "0x4001CAF")]
		LOADING,
		[Token(Token = "0x4001CB0")]
		READY,
		[Token(Token = "0x4001CB1")]
		ERROR
	}

	[Token(Token = "0x17000096")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x2FDF70", Offset = "0x2FDF70")]
	public string id
	{
		[Token(Token = "0x60005BD")]
		[Address(RVA = "0x9CECFC", Offset = "0x9CECFC", VA = "0x9CECFC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000097")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x2FDF80", Offset = "0x2FDF80")]
	public string userName
	{
		[Token(Token = "0x60005BE")]
		[Address(RVA = "0x9CED58", Offset = "0x9CED58", VA = "0x9CED58")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000098")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x2FDF90", Offset = "0x2FDF90")]
	public string locale
	{
		[Token(Token = "0x60005BF")]
		[Address(RVA = "0x9CEDB4", Offset = "0x9CEDB4", VA = "0x9CEDB4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000099")]
	public float ipd
	{
		[Token(Token = "0x60005C0")]
		[Address(RVA = "0x9CEE10", Offset = "0x9CEE10", VA = "0x9CEE10")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700009A")]
	public float eyeHeight
	{
		[Token(Token = "0x60005C1")]
		[Address(RVA = "0x9CEF74", Offset = "0x9CEF74", VA = "0x9CEF74")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700009B")]
	public float eyeDepth
	{
		[Token(Token = "0x60005C2")]
		[Address(RVA = "0x9CEFF0", Offset = "0x9CEFF0", VA = "0x9CEFF0")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700009C")]
	public float neckHeight
	{
		[Token(Token = "0x60005C3")]
		[Address(RVA = "0x9CF06C", Offset = "0x9CF06C", VA = "0x9CF06C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700009D")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x2FDFA0", Offset = "0x2FDFA0")]
	public State state
	{
		[Token(Token = "0x60005C4")]
		[Address(RVA = "0x9CF090", Offset = "0x9CF090", VA = "0x9CF090")]
		get
		{
			return default(State);
		}
	}

	[Token(Token = "0x60005C5")]
	[Address(RVA = "0x9CF098", Offset = "0x9CF098", VA = "0x9CF098")]
	public OVRProfile()
	{
	}
}
[Token(Token = "0x20000EE")]
public class OVRResources : MonoBehaviour
{
	[Token(Token = "0x20004C7")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EAB9C", Offset = "0x2EAB9C")]
	private sealed class <>c__DisplayClass2_0
	{
		[Token(Token = "0x4001CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string path;

		[Token(Token = "0x6001C0A")]
		[Address(RVA = "0x9D1728", Offset = "0x9D1728", VA = "0x9D1728")]
		public <>c__DisplayClass2_0()
		{
		}

		[Token(Token = "0x6001C0B")]
		[Address(RVA = "0x9D1830", Offset = "0x9D1830", VA = "0x9D1830")]
		internal bool <Load>b__0(string s)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x20004C8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EABAC", Offset = "0x2EABAC")]
	private sealed class <>c__DisplayClass3_0<T> where T : UnityEngine.Object
	{
		[Token(Token = "0x4001CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string path;

		[Token(Token = "0x6001C0C")]
		public <>c__DisplayClass3_0()
		{
		}

		[Token(Token = "0x6001C0D")]
		internal bool <Load>b__0(string s)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x4000401")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AssetBundle resourceBundle;

	[Token(Token = "0x4000402")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static List<string> assetNames;

	[Token(Token = "0x60005C6")]
	[Address(RVA = "0x9D14F0", Offset = "0x9D14F0", VA = "0x9D14F0")]
	public static UnityEngine.Object Load(string path)
	{
		return null;
	}

	[Token(Token = "0x60005C7")]
	public static T Load<T>(string path) where T : UnityEngine.Object
	{
		return null;
	}

	[Token(Token = "0x60005C8")]
	[Address(RVA = "0x9D1730", Offset = "0x9D1730", VA = "0x9D1730")]
	public static void SetResourceBundle(AssetBundle bundle)
	{
	}

	[Token(Token = "0x60005C9")]
	[Address(RVA = "0x9D1828", Offset = "0x9D1828", VA = "0x9D1828")]
	public OVRResources()
	{
	}
}
[Token(Token = "0x20000EF")]
public class OVRSceneLoader : MonoBehaviour
{
	[Token(Token = "0x20004C9")]
	private struct SceneInfo
	{
		[Token(Token = "0x4001CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public List<string> scenes;

		[Token(Token = "0x4001CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public long version;

		[Token(Token = "0x6001C0E")]
		[Address(RVA = "0x3AEB9C", Offset = "0x3AEB9C", VA = "0x3AEB9C")]
		public SceneInfo(List<string> sceneList, long currentSceneEpochVersion)
		{
		}
	}

	[Token(Token = "0x20004CA")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EABBC", Offset = "0x2EABBC")]
	private sealed class <DelayCanvasPosUpdate>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private int <>1__state;

		[Token(Token = "0x4001CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private object <>2__current;

		[Token(Token = "0x4001CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public OVRSceneLoader <>4__this;

		[Token(Token = "0x17000384")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001C12")]
			[Address(RVA = "0x9D3454", Offset = "0x9D3454", VA = "0x9D3454", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000385")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001C14")]
			[Address(RVA = "0x9D34E4", Offset = "0x9D34E4", VA = "0x9D34E4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001C0F")]
		[Address(RVA = "0x9D315C", Offset = "0x9D315C", VA = "0x9D315C")]
		[DebuggerHidden]
		public <DelayCanvasPosUpdate>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x6001C10")]
		[Address(RVA = "0x9D3384", Offset = "0x9D3384", VA = "0x9D3384", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001C11")]
		[Address(RVA = "0x9D3388", Offset = "0x9D3388", VA = "0x9D3388", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C13")]
		[Address(RVA = "0x9D345C", Offset = "0x9D345C", VA = "0x9D345C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20004CB")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EABCC", Offset = "0x2EABCC")]
	private sealed class <onCheckSceneCoroutine>d__25 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private int <>1__state;

		[Token(Token = "0x4001CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private object <>2__current;

		[Token(Token = "0x4001CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public OVRSceneLoader <>4__this;

		[Token(Token = "0x17000386")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001C18")]
			[Address(RVA = "0x9D3808", Offset = "0x9D3808", VA = "0x9D3808", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000387")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001C1A")]
			[Address(RVA = "0x9D3898", Offset = "0x9D3898", VA = "0x9D3898", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001C15")]
		[Address(RVA = "0x9D317C", Offset = "0x9D317C", VA = "0x9D317C")]
		[DebuggerHidden]
		public <onCheckSceneCoroutine>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x6001C16")]
		[Address(RVA = "0x9D34EC", Offset = "0x9D34EC", VA = "0x9D34EC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001C17")]
		[Address(RVA = "0x9D34F0", Offset = "0x9D34F0", VA = "0x9D34F0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C19")]
		[Address(RVA = "0x9D3810", Offset = "0x9D3810", VA = "0x9D3810", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000403")]
	public const string externalStoragePath = "/sdcard/Android/data";

	[Token(Token = "0x4000404")]
	public const string sceneLoadDataName = "SceneLoadData.txt";

	[Token(Token = "0x4000405")]
	public const string resourceBundleName = "asset_resources";

	[Token(Token = "0x4000406")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float sceneCheckIntervalSeconds;

	[Token(Token = "0x4000407")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float logCloseTime;

	[Token(Token = "0x4000408")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Canvas mainCanvas;

	[Token(Token = "0x4000409")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text logTextBox;

	[Token(Token = "0x400040A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private AsyncOperation loadSceneOperation;

	[Token(Token = "0x400040B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private string formattedLogText;

	[Token(Token = "0x400040C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float closeLogTimer;

	[Token(Token = "0x400040D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool closeLogDialogue;

	[Token(Token = "0x400040E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool canvasPosUpdated;

	[Token(Token = "0x400040F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private string scenePath;

	[Token(Token = "0x4000410")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private string sceneLoadDataPath;

	[Token(Token = "0x4000411")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private List<AssetBundle> loadedAssetBundles;

	[Token(Token = "0x4000412")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private SceneInfo currentSceneInfo;

	[Token(Token = "0x60005CA")]
	[Address(RVA = "0x9D188C", Offset = "0x9D188C", VA = "0x9D188C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005CB")]
	[Address(RVA = "0x9D1920", Offset = "0x9D1920", VA = "0x9D1920")]
	private void Start()
	{
	}

	[Token(Token = "0x60005CC")]
	[Address(RVA = "0x9D1DEC", Offset = "0x9D1DEC", VA = "0x9D1DEC")]
	private void LoadScene(SceneInfo sceneInfo)
	{
	}

	[Token(Token = "0x60005CD")]
	[Address(RVA = "0x9D2934", Offset = "0x9D2934", VA = "0x9D2934")]
	private void LoadSceneOperation_completed(AsyncOperation obj)
	{
	}

	[Token(Token = "0x60005CE")]
	[Address(RVA = "0x9D2AE4", Offset = "0x9D2AE4", VA = "0x9D2AE4")]
	public void Update()
	{
	}

	[Token(Token = "0x60005CF")]
	[Address(RVA = "0x9D2DF8", Offset = "0x9D2DF8", VA = "0x9D2DF8")]
	private void UpdateCanvasPosition()
	{
	}

	[Token(Token = "0x60005D0")]
	[Address(RVA = "0x9D1B30", Offset = "0x9D1B30", VA = "0x9D1B30")]
	private SceneInfo GetSceneInfo()
	{
		return default(SceneInfo);
	}

	[Token(Token = "0x60005D1")]
	[Address(RVA = "0x9D1AA4", Offset = "0x9D1AA4", VA = "0x9D1AA4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2F9834", Offset = "0x2F9834")]
	private IEnumerator DelayCanvasPosUpdate()
	{
		return null;
	}

	[Token(Token = "0x60005D2")]
	[Address(RVA = "0x9D2A58", Offset = "0x9D2A58", VA = "0x9D2A58")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2F98AC", Offset = "0x2F98AC")]
	private IEnumerator onCheckSceneCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60005D3")]
	[Address(RVA = "0x9D319C", Offset = "0x9D319C", VA = "0x9D319C")]
	private void DestroyAllGameObjects()
	{
	}

	[Token(Token = "0x60005D4")]
	[Address(RVA = "0x9D32CC", Offset = "0x9D32CC", VA = "0x9D32CC")]
	public OVRSceneLoader()
	{
	}
}
[Token(Token = "0x20000F0")]
public class OVRTracker
{
	[Token(Token = "0x20004CC")]
	public struct Frustum
	{
		[Token(Token = "0x4001CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float nearZ;

		[Token(Token = "0x4001CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float farZ;

		[Token(Token = "0x4001CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector2 fov;
	}

	[Token(Token = "0x1700009E")]
	public bool isPresent
	{
		[Token(Token = "0x60005D5")]
		[Address(RVA = "0x8AF75C", Offset = "0x8AF75C", VA = "0x8AF75C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700009F")]
	public bool isPositionTracked
	{
		[Token(Token = "0x60005D6")]
		[Address(RVA = "0x8AF818", Offset = "0x8AF818", VA = "0x8AF818")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000A0")]
	public bool isEnabled
	{
		[Token(Token = "0x60005D7")]
		[Address(RVA = "0x8AF894", Offset = "0x8AF894", VA = "0x8AF894")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60005D8")]
		[Address(RVA = "0x8AF950", Offset = "0x8AF950", VA = "0x8AF950")]
		set
		{
		}
	}

	[Token(Token = "0x170000A1")]
	public int count
	{
		[Token(Token = "0x60005D9")]
		[Address(RVA = "0x8AFA10", Offset = "0x8AFA10", VA = "0x8AFA10")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60005DA")]
	[Address(RVA = "0x8AFBCC", Offset = "0x8AFBCC", VA = "0x8AFBCC")]
	public Frustum GetFrustum(int tracker = 0)
	{
		return default(Frustum);
	}

	[Token(Token = "0x60005DB")]
	[Address(RVA = "0x8AFCC4", Offset = "0x8AFCC4", VA = "0x8AFCC4")]
	public OVRPose GetPose(int tracker = 0)
	{
		return default(OVRPose);
	}

	[Token(Token = "0x60005DC")]
	[Address(RVA = "0x8AFF78", Offset = "0x8AFF78", VA = "0x8AFF78")]
	public bool GetPoseValid(int tracker = 0)
	{
		return default(bool);
	}

	[Token(Token = "0x60005DD")]
	[Address(RVA = "0x8AFA40", Offset = "0x8AFA40", VA = "0x8AFA40")]
	public bool GetPresent(int tracker = 0)
	{
		return default(bool);
	}

	[Token(Token = "0x60005DE")]
	[Address(RVA = "0x8B0104", Offset = "0x8B0104", VA = "0x8B0104")]
	public OVRTracker()
	{
	}
}
[Token(Token = "0x20000F1")]
public class OVRAudioSourceTest : MonoBehaviour
{
	[Token(Token = "0x4000413")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float period;

	[Token(Token = "0x4000414")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private float nextActionTime;

	[Token(Token = "0x60005DF")]
	[Address(RVA = "0x5DCDCC", Offset = "0x5DCDCC", VA = "0x5DCDCC")]
	private void Start()
	{
	}

	[Token(Token = "0x60005E0")]
	[Address(RVA = "0x5DCF30", Offset = "0x5DCF30", VA = "0x5DCF30")]
	private void Update()
	{
	}

	[Token(Token = "0x60005E1")]
	[Address(RVA = "0x5DD168", Offset = "0x5DD168", VA = "0x5DD168")]
	public OVRAudioSourceTest()
	{
	}
}
[Token(Token = "0x20000F2")]
public class OVRAutoDestroyInMRC : MonoBehaviour
{
	[Token(Token = "0x60005E2")]
	[Address(RVA = "0x5DD178", Offset = "0x5DD178", VA = "0x5DD178")]
	private void Start()
	{
	}

	[Token(Token = "0x60005E3")]
	[Address(RVA = "0x5DD314", Offset = "0x5DD314", VA = "0x5DD314")]
	private void Update()
	{
	}

	[Token(Token = "0x60005E4")]
	[Address(RVA = "0x5DD318", Offset = "0x5DD318", VA = "0x5DD318")]
	public OVRAutoDestroyInMRC()
	{
	}
}
[Token(Token = "0x20000F3")]
public class OVRChromaticAberration : MonoBehaviour
{
	[Token(Token = "0x4000415")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public OVRInput.RawButton toggleButton;

	[Token(Token = "0x4000416")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool chromatic;

	[Token(Token = "0x60005E5")]
	[Address(RVA = "0x5E16F0", Offset = "0x5E16F0", VA = "0x5E16F0")]
	private void Start()
	{
	}

	[Token(Token = "0x60005E6")]
	[Address(RVA = "0x5E1810", Offset = "0x5E1810", VA = "0x5E1810")]
	private void Update()
	{
	}

	[Token(Token = "0x60005E7")]
	[Address(RVA = "0x5E1984", Offset = "0x5E1984", VA = "0x5E1984")]
	public OVRChromaticAberration()
	{
	}
}
[Token(Token = "0x20000F4")]
public class OVRControllerHelper : MonoBehaviour
{
	[Token(Token = "0x20004CD")]
	private enum ControllerType
	{
		[Token(Token = "0x4001CC0")]
		QuestAndRiftS = 1,
		[Token(Token = "0x4001CC1")]
		Rift
	}

	[Token(Token = "0x4000417")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public GameObject m_modelOculusTouchQuestAndRiftSLeftController;

	[Token(Token = "0x4000418")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GameObject m_modelOculusTouchQuestAndRiftSRightController;

	[Token(Token = "0x4000419")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public GameObject m_modelOculusTouchRiftLeftController;

	[Token(Token = "0x400041A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject m_modelOculusTouchRiftRightController;

	[Token(Token = "0x400041B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public OVRInput.Controller m_controller;

	[Token(Token = "0x400041C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ControllerType activeControllerType;

	[Token(Token = "0x400041D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private bool m_prevControllerConnected;

	[Token(Token = "0x400041E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	private bool m_prevControllerConnectedCached;

	[Token(Token = "0x60005E8")]
	[Address(RVA = "0x5E312C", Offset = "0x5E312C", VA = "0x5E312C")]
	private void Start()
	{
	}

	[Token(Token = "0x60005E9")]
	[Address(RVA = "0x5E3338", Offset = "0x5E3338", VA = "0x5E3338")]
	private void Update()
	{
	}

	[Token(Token = "0x60005EA")]
	[Address(RVA = "0x5E357C", Offset = "0x5E357C", VA = "0x5E357C")]
	public OVRControllerHelper()
	{
	}
}
[Token(Token = "0x20000F5")]
public class OVRControllerTest : MonoBehaviour
{
	[Token(Token = "0x20004CE")]
	public class BoolMonitor
	{
		[Token(Token = "0x200078D")]
		public delegate bool BoolGenerator();

		[Token(Token = "0x4001CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private string m_name;

		[Token(Token = "0x4001CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private BoolGenerator m_generator;

		[Token(Token = "0x4001CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool m_prevValue;

		[Token(Token = "0x4001CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		private bool m_currentValue;

		[Token(Token = "0x4001CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		private bool m_currentValueRecentlyChanged;

		[Token(Token = "0x4001CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float m_displayTimeout;

		[Token(Token = "0x4001CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float m_displayTimer;

		[Token(Token = "0x6001C1B")]
		[Address(RVA = "0x5E5C20", Offset = "0x5E5C20", VA = "0x5E5C20")]
		public BoolMonitor(string name, BoolGenerator generator, float displayTimeout = 0.5f)
		{
		}

		[Token(Token = "0x6001C1C")]
		[Address(RVA = "0x5E6910", Offset = "0x5E6910", VA = "0x5E6910")]
		public void Update()
		{
		}

		[Token(Token = "0x6001C1D")]
		[Address(RVA = "0x5E69B8", Offset = "0x5E69B8", VA = "0x5E69B8")]
		public void AppendToStringBuilder(ref StringBuilder sb)
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20004CF")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EABDC", Offset = "0x2EABDC")]
	private sealed class <>c
	{
		[Token(Token = "0x4001CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x4001CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static BoolMonitor.BoolGenerator <>9__4_0;

		[Token(Token = "0x4001CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static BoolMonitor.BoolGenerator <>9__4_1;

		[Token(Token = "0x4001CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static BoolMonitor.BoolGenerator <>9__4_2;

		[Token(Token = "0x4001CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static BoolMonitor.BoolGenerator <>9__4_3;

		[Token(Token = "0x4001CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public static BoolMonitor.BoolGenerator <>9__4_4;

		[Token(Token = "0x4001CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static BoolMonitor.BoolGenerator <>9__4_5;

		[Token(Token = "0x4001CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public static BoolMonitor.BoolGenerator <>9__4_6;

		[Token(Token = "0x4001CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static BoolMonitor.BoolGenerator <>9__4_7;

		[Token(Token = "0x4001CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public static BoolMonitor.BoolGenerator <>9__4_8;

		[Token(Token = "0x4001CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static BoolMonitor.BoolGenerator <>9__4_9;

		[Token(Token = "0x4001CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public static BoolMonitor.BoolGenerator <>9__4_10;

		[Token(Token = "0x4001CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static BoolMonitor.BoolGenerator <>9__4_11;

		[Token(Token = "0x4001CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public static BoolMonitor.BoolGenerator <>9__4_12;

		[Token(Token = "0x4001CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static BoolMonitor.BoolGenerator <>9__4_13;

		[Token(Token = "0x4001CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public static BoolMonitor.BoolGenerator <>9__4_14;

		[Token(Token = "0x4001CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static BoolMonitor.BoolGenerator <>9__4_15;

		[Token(Token = "0x4001CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public static BoolMonitor.BoolGenerator <>9__4_16;

		[Token(Token = "0x4001CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static BoolMonitor.BoolGenerator <>9__4_17;

		[Token(Token = "0x4001CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public static BoolMonitor.BoolGenerator <>9__4_18;

		[Token(Token = "0x4001CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static BoolMonitor.BoolGenerator <>9__4_19;

		[Token(Token = "0x4001CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public static BoolMonitor.BoolGenerator <>9__4_20;

		[Token(Token = "0x4001CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static BoolMonitor.BoolGenerator <>9__4_21;

		[Token(Token = "0x4001CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public static BoolMonitor.BoolGenerator <>9__4_22;

		[Token(Token = "0x4001CE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static BoolMonitor.BoolGenerator <>9__4_23;

		[Token(Token = "0x4001CE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public static BoolMonitor.BoolGenerator <>9__4_24;

		[Token(Token = "0x4001CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static BoolMonitor.BoolGenerator <>9__4_25;

		[Token(Token = "0x4001CE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public static BoolMonitor.BoolGenerator <>9__4_26;

		[Token(Token = "0x4001CE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static BoolMonitor.BoolGenerator <>9__4_27;

		[Token(Token = "0x4001CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public static BoolMonitor.BoolGenerator <>9__4_28;

		[Token(Token = "0x4001CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static BoolMonitor.BoolGenerator <>9__4_29;

		[Token(Token = "0x4001CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public static BoolMonitor.BoolGenerator <>9__4_30;

		[Token(Token = "0x6001C1F")]
		[Address(RVA = "0x5E6CA0", Offset = "0x5E6CA0", VA = "0x5E6CA0")]
		public <>c()
		{
		}

		[Token(Token = "0x6001C20")]
		[Address(RVA = "0x5E6CA8", Offset = "0x5E6CA8", VA = "0x5E6CA8")]
		internal bool <Start>b__4_0()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C21")]
		[Address(RVA = "0x5E6D2C", Offset = "0x5E6D2C", VA = "0x5E6D2C")]
		internal bool <Start>b__4_1()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C22")]
		[Address(RVA = "0x5E6DB0", Offset = "0x5E6DB0", VA = "0x5E6DB0")]
		internal bool <Start>b__4_2()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C23")]
		[Address(RVA = "0x5E6E34", Offset = "0x5E6E34", VA = "0x5E6E34")]
		internal bool <Start>b__4_3()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C24")]
		[Address(RVA = "0x5E6EB8", Offset = "0x5E6EB8", VA = "0x5E6EB8")]
		internal bool <Start>b__4_4()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C25")]
		[Address(RVA = "0x5E6F3C", Offset = "0x5E6F3C", VA = "0x5E6F3C")]
		internal bool <Start>b__4_5()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C26")]
		[Address(RVA = "0x5E6FC0", Offset = "0x5E6FC0", VA = "0x5E6FC0")]
		internal bool <Start>b__4_6()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C27")]
		[Address(RVA = "0x5E7044", Offset = "0x5E7044", VA = "0x5E7044")]
		internal bool <Start>b__4_7()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C28")]
		[Address(RVA = "0x5E70C8", Offset = "0x5E70C8", VA = "0x5E70C8")]
		internal bool <Start>b__4_8()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C29")]
		[Address(RVA = "0x5E714C", Offset = "0x5E714C", VA = "0x5E714C")]
		internal bool <Start>b__4_9()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C2A")]
		[Address(RVA = "0x5E71D0", Offset = "0x5E71D0", VA = "0x5E71D0")]
		internal bool <Start>b__4_10()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C2B")]
		[Address(RVA = "0x5E7254", Offset = "0x5E7254", VA = "0x5E7254")]
		internal bool <Start>b__4_11()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C2C")]
		[Address(RVA = "0x5E72D8", Offset = "0x5E72D8", VA = "0x5E72D8")]
		internal bool <Start>b__4_12()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C2D")]
		[Address(RVA = "0x5E735C", Offset = "0x5E735C", VA = "0x5E735C")]
		internal bool <Start>b__4_13()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C2E")]
		[Address(RVA = "0x5E73E0", Offset = "0x5E73E0", VA = "0x5E73E0")]
		internal bool <Start>b__4_14()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C2F")]
		[Address(RVA = "0x5E7464", Offset = "0x5E7464", VA = "0x5E7464")]
		internal bool <Start>b__4_15()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C30")]
		[Address(RVA = "0x5E74E8", Offset = "0x5E74E8", VA = "0x5E74E8")]
		internal bool <Start>b__4_16()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C31")]
		[Address(RVA = "0x5E756C", Offset = "0x5E756C", VA = "0x5E756C")]
		internal bool <Start>b__4_17()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C32")]
		[Address(RVA = "0x5E75F0", Offset = "0x5E75F0", VA = "0x5E75F0")]
		internal bool <Start>b__4_18()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C33")]
		[Address(RVA = "0x5E7674", Offset = "0x5E7674", VA = "0x5E7674")]
		internal bool <Start>b__4_19()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C34")]
		[Address(RVA = "0x5E76F8", Offset = "0x5E76F8", VA = "0x5E76F8")]
		internal bool <Start>b__4_20()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C35")]
		[Address(RVA = "0x5E777C", Offset = "0x5E777C", VA = "0x5E777C")]
		internal bool <Start>b__4_21()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C36")]
		[Address(RVA = "0x5E7800", Offset = "0x5E7800", VA = "0x5E7800")]
		internal bool <Start>b__4_22()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C37")]
		[Address(RVA = "0x5E7884", Offset = "0x5E7884", VA = "0x5E7884")]
		internal bool <Start>b__4_23()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C38")]
		[Address(RVA = "0x5E7908", Offset = "0x5E7908", VA = "0x5E7908")]
		internal bool <Start>b__4_24()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C39")]
		[Address(RVA = "0x5E798C", Offset = "0x5E798C", VA = "0x5E798C")]
		internal bool <Start>b__4_25()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C3A")]
		[Address(RVA = "0x5E7A10", Offset = "0x5E7A10", VA = "0x5E7A10")]
		internal bool <Start>b__4_26()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C3B")]
		[Address(RVA = "0x5E7A94", Offset = "0x5E7A94", VA = "0x5E7A94")]
		internal bool <Start>b__4_27()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C3C")]
		[Address(RVA = "0x5E7B18", Offset = "0x5E7B18", VA = "0x5E7B18")]
		internal bool <Start>b__4_28()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C3D")]
		[Address(RVA = "0x5E7B9C", Offset = "0x5E7B9C", VA = "0x5E7B9C")]
		internal bool <Start>b__4_29()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C3E")]
		[Address(RVA = "0x5E7C20", Offset = "0x5E7C20", VA = "0x5E7C20")]
		internal bool <Start>b__4_30()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C3F")]
		[Address(RVA = "0x5E7CA4", Offset = "0x5E7CA4", VA = "0x5E7CA4")]
		internal bool <.cctor>b__9_0()
		{
			return default(bool);
		}
	}

	[Token(Token = "0x400041F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Text uiText;

	[Token(Token = "0x4000420")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private List<BoolMonitor> monitors;

	[Token(Token = "0x4000421")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private StringBuilder data;

	[Token(Token = "0x4000422")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string prevConnected;

	[Token(Token = "0x4000423")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static BoolMonitor controllers;

	[Token(Token = "0x60005EB")]
	[Address(RVA = "0x5E358C", Offset = "0x5E358C", VA = "0x5E358C")]
	private void Start()
	{
	}

	[Token(Token = "0x60005EC")]
	[Address(RVA = "0x5E5CAC", Offset = "0x5E5CAC", VA = "0x5E5CAC")]
	private void Update()
	{
	}

	[Token(Token = "0x60005ED")]
	[Address(RVA = "0x5E6AE0", Offset = "0x5E6AE0", VA = "0x5E6AE0")]
	public OVRControllerTest()
	{
	}
}
[Token(Token = "0x20000F6")]
public class OVRCubemapCapture : MonoBehaviour
{
	[Token(Token = "0x4000424")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public bool autoTriggerAfterLaunch;

	[Token(Token = "0x4000425")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float autoTriggerDelay;

	[Token(Token = "0x4000426")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private float autoTriggerElapse;

	[Token(Token = "0x4000427")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public KeyCode triggeredByKey;

	[Token(Token = "0x4000428")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public string pathName;

	[Token(Token = "0x4000429")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int cubemapSize;

	[Token(Token = "0x60005EF")]
	[Address(RVA = "0x5E8110", Offset = "0x5E8110", VA = "0x5E8110")]
	private void Update()
	{
	}

	[Token(Token = "0x60005F0")]
	[Address(RVA = "0x5E8210", Offset = "0x5E8210", VA = "0x5E8210")]
	public static void TriggerCubemapCapture(Vector3 capturePos, int cubemapSize = 2048, [Optional] string pathName)
	{
	}

	[Token(Token = "0x60005F1")]
	[Address(RVA = "0x5E8584", Offset = "0x5E8584", VA = "0x5E8584")]
	public static void RenderIntoCubemap(Camera ownerCamera, Cubemap outCubemap)
	{
	}

	[Token(Token = "0x60005F2")]
	[Address(RVA = "0x5E9028", Offset = "0x5E9028", VA = "0x5E9028")]
	public static bool SaveCubemapCapture(Cubemap cubemap, [Optional] string pathName)
	{
		return default(bool);
	}

	[Token(Token = "0x60005F3")]
	[Address(RVA = "0x5E99D4", Offset = "0x5E99D4", VA = "0x5E99D4")]
	public OVRCubemapCapture()
	{
	}
}
[Token(Token = "0x20000F7")]
public abstract class OVRCursor : MonoBehaviour
{
	[Token(Token = "0x60005F4")]
	public abstract void SetCursorRay(Transform ray);

	[Token(Token = "0x60005F5")]
	public abstract void SetCursorStartDest(Vector3 start, Vector3 dest, Vector3 normal);

	[Token(Token = "0x60005F6")]
	[Address(RVA = "0x5E99FC", Offset = "0x5E99FC", VA = "0x5E99FC")]
	protected OVRCursor()
	{
	}
}
[Token(Token = "0x20000F8")]
[AttributeAttribute(Name = "DefaultExecutionOrder", RVA = "0x2E68A8", Offset = "0x2E68A8")]
public class OVRCustomSkeleton : OVRSkeleton
{
	[Token(Token = "0x400042A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private List<Transform> _customBones;

	[Token(Token = "0x170000A2")]
	public List<Transform> CustomBones
	{
		[Token(Token = "0x60005F7")]
		[Address(RVA = "0x5E9A04", Offset = "0x5E9A04", VA = "0x5E9A04")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60005F8")]
	[Address(RVA = "0x5E9A0C", Offset = "0x5E9A0C", VA = "0x5E9A0C", Slot = "4")]
	protected override void InitializeBones(OVRPlugin.Skeleton skeleton)
	{
	}

	[Token(Token = "0x60005F9")]
	[Address(RVA = "0x5E9C18", Offset = "0x5E9C18", VA = "0x5E9C18")]
	public OVRCustomSkeleton()
	{
	}
}
[Token(Token = "0x20000F9")]
public class OVRDebugInfo : MonoBehaviour
{
	[Token(Token = "0x400042B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private GameObject debugUIManager;

	[Token(Token = "0x400042C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private GameObject debugUIObject;

	[Token(Token = "0x400042D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private GameObject riftPresent;

	[Token(Token = "0x400042E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private GameObject fps;

	[Token(Token = "0x400042F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private GameObject ipd;

	[Token(Token = "0x4000430")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject fov;

	[Token(Token = "0x4000431")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private GameObject height;

	[Token(Token = "0x4000432")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject depth;

	[Token(Token = "0x4000433")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private GameObject resolutionEyeTexture;

	[Token(Token = "0x4000434")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject latencies;

	[Token(Token = "0x4000435")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private GameObject texts;

	[Token(Token = "0x4000436")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private string strRiftPresent;

	[Token(Token = "0x4000437")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private string strFPS;

	[Token(Token = "0x4000438")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private string strIPD;

	[Token(Token = "0x4000439")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private string strFOV;

	[Token(Token = "0x400043A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private string strHeight;

	[Token(Token = "0x400043B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private string strDepth;

	[Token(Token = "0x400043C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private string strResolutionEyeTexture;

	[Token(Token = "0x400043D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private string strLatencies;

	[Token(Token = "0x400043E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float updateInterval;

	[Token(Token = "0x400043F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float accum;

	[Token(Token = "0x4000440")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int frames;

	[Token(Token = "0x4000441")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float timeLeft;

	[Token(Token = "0x4000442")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool initUIComponent;

	[Token(Token = "0x4000443")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	private bool isInited;

	[Token(Token = "0x4000444")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float offsetY;

	[Token(Token = "0x4000445")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float riftPresentTimeout;

	[Token(Token = "0x4000446")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private bool showVRVars;

	[Token(Token = "0x60005FA")]
	[Address(RVA = "0x5EA504", Offset = "0x5EA504", VA = "0x5EA504")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005FB")]
	[Address(RVA = "0x5EA820", Offset = "0x5EA820", VA = "0x5EA820")]
	private void Update()
	{
	}

	[Token(Token = "0x60005FC")]
	[Address(RVA = "0x5EB24C", Offset = "0x5EB24C", VA = "0x5EB24C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60005FD")]
	[Address(RVA = "0x5EA8FC", Offset = "0x5EA8FC", VA = "0x5EA8FC")]
	private void InitUIComponents()
	{
	}

	[Token(Token = "0x60005FE")]
	[Address(RVA = "0x5EAE18", Offset = "0x5EAE18", VA = "0x5EAE18")]
	private void UpdateVariable()
	{
	}

	[Token(Token = "0x60005FF")]
	[Address(RVA = "0x5EAE54", Offset = "0x5EAE54", VA = "0x5EAE54")]
	private void UpdateStrings()
	{
	}

	[Token(Token = "0x6000600")]
	[Address(RVA = "0x5EBCD8", Offset = "0x5EBCD8", VA = "0x5EBCD8")]
	private void RiftPresentGUI(GameObject guiMainOBj)
	{
	}

	[Token(Token = "0x6000601")]
	[Address(RVA = "0x5EADDC", Offset = "0x5EADDC", VA = "0x5EADDC")]
	private void UpdateDeviceDetection()
	{
	}

	[Token(Token = "0x6000602")]
	[Address(RVA = "0x5EB258", Offset = "0x5EB258", VA = "0x5EB258")]
	private GameObject VariableObjectManager(GameObject gameObject, string name, float posY, string str, int fontSize)
	{
		return null;
	}

	[Token(Token = "0x6000603")]
	[Address(RVA = "0x5EBF60", Offset = "0x5EBF60", VA = "0x5EBF60")]
	private GameObject ComponentComposition(GameObject GO)
	{
		return null;
	}

	[Token(Token = "0x6000604")]
	[Address(RVA = "0x5EB51C", Offset = "0x5EB51C", VA = "0x5EB51C")]
	private void UpdateIPD()
	{
	}

	[Token(Token = "0x6000605")]
	[Address(RVA = "0x5EB610", Offset = "0x5EB610", VA = "0x5EB610")]
	private void UpdateEyeHeightOffset()
	{
	}

	[Token(Token = "0x6000606")]
	[Address(RVA = "0x5EB6F8", Offset = "0x5EB6F8", VA = "0x5EB6F8")]
	private void UpdateEyeDepthOffset()
	{
	}

	[Token(Token = "0x6000607")]
	[Address(RVA = "0x5EB7E0", Offset = "0x5EB7E0", VA = "0x5EB7E0")]
	private void UpdateFOV()
	{
	}

	[Token(Token = "0x6000608")]
	[Address(RVA = "0x5EB93C", Offset = "0x5EB93C", VA = "0x5EB93C")]
	private void UpdateResolutionEyeTexture()
	{
	}

	[Token(Token = "0x6000609")]
	[Address(RVA = "0x5EBBC8", Offset = "0x5EBBC8", VA = "0x5EBBC8")]
	private void UpdateLatencyValues()
	{
	}

	[Token(Token = "0x600060A")]
	[Address(RVA = "0x5EBBCC", Offset = "0x5EBBCC", VA = "0x5EBBCC")]
	private void UpdateFPS()
	{
	}

	[Token(Token = "0x600060B")]
	[Address(RVA = "0x5EC4D4", Offset = "0x5EC4D4", VA = "0x5EC4D4")]
	public OVRDebugInfo()
	{
	}
}
[Token(Token = "0x20000FA")]
public class OVRGazePointer : OVRCursor
{
	[Token(Token = "0x4000447")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Transform gazeIcon;

	[Token(Token = "0x4000448")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EE5E0", Offset = "0x2EE5E0")]
	public bool hideByDefault;

	[Token(Token = "0x4000449")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EE64C", Offset = "0x2EE64C")]
	public float showTimeoutPeriod;

	[Token(Token = "0x400044A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EE6B4", Offset = "0x2EE6B4")]
	public float hideTimeoutPeriod;

	[Token(Token = "0x400044B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EE6E8", Offset = "0x2EE6E8")]
	public bool dimOnHideRequest;

	[Token(Token = "0x400044C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EE754", Offset = "0x2EE754")]
	public float depthScaleMultiplier;

	[Token(Token = "0x400044D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool matchNormalOnPhysicsColliders;

	[Token(Token = "0x400044E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform rayTransform;

	[Token(Token = "0x400044F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EE79C", Offset = "0x2EE79C")]
	private bool <hidden>k__BackingField;

	[Token(Token = "0x4000450")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EE7AC", Offset = "0x2EE7AC")]
	private float <currentScale>k__BackingField;

	[Token(Token = "0x4000451")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float depth;

	[Token(Token = "0x4000452")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float hideUntilTime;

	[Token(Token = "0x4000453")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int positionSetsThisFrame;

	[Token(Token = "0x4000454")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float lastShowRequestTime;

	[Token(Token = "0x4000455")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float lastHideRequestTime;

	[Token(Token = "0x4000456")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private OVRProgressIndicator progressIndicator;

	[Token(Token = "0x4000457")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static OVRGazePointer _instance;

	[Token(Token = "0x170000A3")]
	public bool hidden
	{
		[Token(Token = "0x600060C")]
		[Address(RVA = "0x92F844", Offset = "0x92F844", VA = "0x92F844")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9924", Offset = "0x2F9924")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600060D")]
		[Address(RVA = "0x92F84C", Offset = "0x92F84C", VA = "0x92F84C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9934", Offset = "0x2F9934")]
		private set
		{
		}
	}

	[Token(Token = "0x170000A4")]
	public float currentScale
	{
		[Token(Token = "0x600060E")]
		[Address(RVA = "0x92F854", Offset = "0x92F854", VA = "0x92F854")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9944", Offset = "0x2F9944")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600060F")]
		[Address(RVA = "0x92F85C", Offset = "0x92F85C", VA = "0x92F85C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9954", Offset = "0x2F9954")]
		private set
		{
		}
	}

	[Token(Token = "0x170000A5")]
	public static OVRGazePointer instance
	{
		[Token(Token = "0x6000610")]
		[Address(RVA = "0x92F864", Offset = "0x92F864", VA = "0x92F864")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000A6")]
	public float visibilityStrength
	{
		[Token(Token = "0x6000611")]
		[Address(RVA = "0x92FAB8", Offset = "0x92FAB8", VA = "0x92FAB8")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000A7")]
	public float SelectionProgress
	{
		[Token(Token = "0x6000612")]
		[Address(RVA = "0x92FC00", Offset = "0x92FC00", VA = "0x92FC00")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000613")]
		[Address(RVA = "0x92FCB8", Offset = "0x92FCB8", VA = "0x92FCB8")]
		set
		{
		}
	}

	[Token(Token = "0x6000614")]
	[Address(RVA = "0x92FD70", Offset = "0x92FD70", VA = "0x92FD70")]
	public void Awake()
	{
	}

	[Token(Token = "0x6000615")]
	[Address(RVA = "0x92FF5C", Offset = "0x92FF5C", VA = "0x92FF5C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000616")]
	[Address(RVA = "0x930A00", Offset = "0x930A00", VA = "0x930A00", Slot = "5")]
	public override void SetCursorStartDest(Vector3 _, Vector3 pos, Vector3 normal)
	{
	}

	[Token(Token = "0x6000617")]
	[Address(RVA = "0x930D24", Offset = "0x930D24", VA = "0x930D24", Slot = "4")]
	public override void SetCursorRay(Transform ray)
	{
	}

	[Token(Token = "0x6000618")]
	[Address(RVA = "0x930D28", Offset = "0x930D28", VA = "0x930D28")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000619")]
	[Address(RVA = "0x930FD4", Offset = "0x930FD4", VA = "0x930FD4")]
	public void RequestHide()
	{
	}

	[Token(Token = "0x600061A")]
	[Address(RVA = "0x930D04", Offset = "0x930D04", VA = "0x930D04")]
	public void RequestShow()
	{
	}

	[Token(Token = "0x600061B")]
	[Address(RVA = "0x9301B8", Offset = "0x9301B8", VA = "0x9301B8")]
	private void Hide()
	{
	}

	[Token(Token = "0x600061C")]
	[Address(RVA = "0x9305DC", Offset = "0x9305DC", VA = "0x9305DC")]
	private void Show()
	{
	}

	[Token(Token = "0x600061D")]
	[Address(RVA = "0x931000", Offset = "0x931000", VA = "0x931000")]
	public OVRGazePointer()
	{
	}
}
[Token(Token = "0x20000FB")]
public class OVRGearVrControllerTest : MonoBehaviour
{
	[Token(Token = "0x600061E")]
	[Address(RVA = "0x931034", Offset = "0x931034", VA = "0x931034")]
	public OVRGearVrControllerTest()
	{
	}
}
[Token(Token = "0x20000FC")]
public class OVRGrabbable : MonoBehaviour
{
	[Token(Token = "0x4000458")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[SerializeField]
	protected bool m_allowOffhandGrab;

	[Token(Token = "0x4000459")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
	[SerializeField]
	protected bool m_snapPosition;

	[Token(Token = "0x400045A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
	[SerializeField]
	protected bool m_snapOrientation;

	[Token(Token = "0x400045B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	protected Transform m_snapOffset;

	[Token(Token = "0x400045C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[SerializeField]
	protected Collider[] m_grabPoints;

	[Token(Token = "0x400045D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool m_grabbedKinematic;

	[Token(Token = "0x400045E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	protected Collider m_grabbedCollider;

	[Token(Token = "0x400045F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected OVRGrabber m_grabbedBy;

	[Token(Token = "0x170000A8")]
	public bool allowOffhandGrab
	{
		[Token(Token = "0x600061F")]
		[Address(RVA = "0x93103C", Offset = "0x93103C", VA = "0x93103C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000A9")]
	public bool isGrabbed
	{
		[Token(Token = "0x6000620")]
		[Address(RVA = "0x931044", Offset = "0x931044", VA = "0x931044")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000AA")]
	public bool snapPosition
	{
		[Token(Token = "0x6000621")]
		[Address(RVA = "0x9310D0", Offset = "0x9310D0", VA = "0x9310D0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000AB")]
	public bool snapOrientation
	{
		[Token(Token = "0x6000622")]
		[Address(RVA = "0x9310D8", Offset = "0x9310D8", VA = "0x9310D8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000AC")]
	public Transform snapOffset
	{
		[Token(Token = "0x6000623")]
		[Address(RVA = "0x9310E0", Offset = "0x9310E0", VA = "0x9310E0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000AD")]
	public OVRGrabber grabbedBy
	{
		[Token(Token = "0x6000624")]
		[Address(RVA = "0x9310E8", Offset = "0x9310E8", VA = "0x9310E8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000AE")]
	public Transform grabbedTransform
	{
		[Token(Token = "0x6000625")]
		[Address(RVA = "0x9310F0", Offset = "0x9310F0", VA = "0x9310F0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000AF")]
	public Rigidbody grabbedRigidbody
	{
		[Token(Token = "0x6000626")]
		[Address(RVA = "0x93111C", Offset = "0x93111C", VA = "0x93111C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000B0")]
	public Collider[] grabPoints
	{
		[Token(Token = "0x6000627")]
		[Address(RVA = "0x931148", Offset = "0x931148", VA = "0x931148")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000628")]
	[Address(RVA = "0x931150", Offset = "0x931150", VA = "0x931150", Slot = "4")]
	public virtual void GrabBegin(OVRGrabber hand, Collider grabPoint)
	{
	}

	[Token(Token = "0x6000629")]
	[Address(RVA = "0x931208", Offset = "0x931208", VA = "0x931208", Slot = "5")]
	public virtual void GrabEnd(Vector3 linearVelocity, Vector3 angularVelocity)
	{
	}

	[Token(Token = "0x600062A")]
	[Address(RVA = "0x931354", Offset = "0x931354", VA = "0x931354")]
	private void Awake()
	{
	}

	[Token(Token = "0x600062B")]
	[Address(RVA = "0x9314F8", Offset = "0x9314F8", VA = "0x9314F8", Slot = "6")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x600062C")]
	[Address(RVA = "0x931580", Offset = "0x931580", VA = "0x931580")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600062D")]
	[Address(RVA = "0x931720", Offset = "0x931720", VA = "0x931720")]
	public OVRGrabbable()
	{
	}
}
[Token(Token = "0x20000FD")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x2E68BC", Offset = "0x2E68BC")]
public class OVRGrabber : MonoBehaviour
{
	[Token(Token = "0x4000460")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float grabBegin;

	[Token(Token = "0x4000461")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float grabEnd;

	[Token(Token = "0x4000462")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[SerializeField]
	protected bool m_parentHeldObject;

	[Token(Token = "0x4000463")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
	[SerializeField]
	protected bool m_moveHandPosition;

	[Token(Token = "0x4000464")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected Transform m_gripTransform;

	[Token(Token = "0x4000465")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	protected Collider[] m_grabVolumes;

	[Token(Token = "0x4000466")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	protected OVRInput.Controller m_controller;

	[Token(Token = "0x4000467")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	protected Transform m_parentTransform;

	[Token(Token = "0x4000468")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	protected GameObject m_player;

	[Token(Token = "0x4000469")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	protected bool m_grabVolumeEnabled;

	[Token(Token = "0x400046A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected Vector3 m_lastPos;

	[Token(Token = "0x400046B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	protected Quaternion m_lastRot;

	[Token(Token = "0x400046C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	protected Quaternion m_anchorOffsetRotation;

	[Token(Token = "0x400046D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	protected Vector3 m_anchorOffsetPosition;

	[Token(Token = "0x400046E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected float m_prevFlex;

	[Token(Token = "0x400046F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	protected OVRGrabbable m_grabbedObj;

	[Token(Token = "0x4000470")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	protected Vector3 m_grabbedObjectPosOff;

	[Token(Token = "0x4000471")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	protected Quaternion m_grabbedObjectRotOff;

	[Token(Token = "0x4000472")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	protected Dictionary<OVRGrabbable, int> m_grabCandidates;

	[Token(Token = "0x4000473")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	protected bool m_operatingWithoutOVRCameraRig;

	[Token(Token = "0x170000B1")]
	public OVRGrabbable grabbedObject
	{
		[Token(Token = "0x600062E")]
		[Address(RVA = "0x931730", Offset = "0x931730", VA = "0x931730")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600062F")]
	[Address(RVA = "0x931634", Offset = "0x931634", VA = "0x931634")]
	public void ForceRelease(OVRGrabbable grabbable)
	{
	}

	[Token(Token = "0x6000630")]
	[Address(RVA = "0x931A70", Offset = "0x931A70", VA = "0x931A70", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6000631")]
	[Address(RVA = "0x931C40", Offset = "0x931C40", VA = "0x931C40", Slot = "5")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x6000632")]
	[Address(RVA = "0x931FAC", Offset = "0x931FAC", VA = "0x931FAC", Slot = "6")]
	public virtual void Update()
	{
	}

	[Token(Token = "0x6000633")]
	[Address(RVA = "0x931FBC", Offset = "0x931FBC", VA = "0x931FBC")]
	private void OnUpdatedAnchors()
	{
	}

	[Token(Token = "0x6000634")]
	[Address(RVA = "0x932394", Offset = "0x932394", VA = "0x932394")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000635")]
	[Address(RVA = "0x932430", Offset = "0x932430", VA = "0x932430")]
	private void OnTriggerEnter(Collider otherCollider)
	{
	}

	[Token(Token = "0x6000636")]
	[Address(RVA = "0x9325A8", Offset = "0x9325A8", VA = "0x9325A8")]
	private void OnTriggerExit(Collider otherCollider)
	{
	}

	[Token(Token = "0x6000637")]
	[Address(RVA = "0x932340", Offset = "0x932340", VA = "0x932340")]
	protected void CheckForGrabOrRelease(float prevFlex)
	{
	}

	[Token(Token = "0x6000638")]
	[Address(RVA = "0x932760", Offset = "0x932760", VA = "0x932760", Slot = "7")]
	protected virtual void GrabBegin()
	{
	}

	[Token(Token = "0x6000639")]
	[Address(RVA = "0x9332CC", Offset = "0x9332CC", VA = "0x9332CC", Slot = "8")]
	protected virtual void MoveGrabbedObject(Vector3 pos, Quaternion rot, bool forceTeleport = false)
	{
	}

	[Token(Token = "0x600063A")]
	[Address(RVA = "0x931738", Offset = "0x931738", VA = "0x931738")]
	protected void GrabEnd()
	{
	}

	[Token(Token = "0x600063B")]
	[Address(RVA = "0x9345B4", Offset = "0x9345B4", VA = "0x9345B4")]
	protected void GrabbableRelease(Vector3 linearVelocity, Vector3 angularVelocity)
	{
	}

	[Token(Token = "0x600063C")]
	[Address(RVA = "0x93468C", Offset = "0x93468C", VA = "0x93468C", Slot = "9")]
	protected virtual void GrabVolumeEnable(bool enabled)
	{
	}

	[Token(Token = "0x600063D")]
	[Address(RVA = "0x9347C0", Offset = "0x9347C0", VA = "0x9347C0", Slot = "10")]
	protected virtual void OffhandGrabbed(OVRGrabbable grabbable)
	{
	}

	[Token(Token = "0x600063E")]
	[Address(RVA = "0x931DAC", Offset = "0x931DAC", VA = "0x931DAC")]
	protected void SetPlayerIgnoreCollision(GameObject grabbable, bool ignore)
	{
	}

	[Token(Token = "0x600063F")]
	[Address(RVA = "0x9348C8", Offset = "0x9348C8", VA = "0x9348C8")]
	public OVRGrabber()
	{
	}

	[Token(Token = "0x6000640")]
	[Address(RVA = "0x934978", Offset = "0x934978", VA = "0x934978")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9964", Offset = "0x2F9964")]
	private void <Awake>b__23_0(OVRCameraRig r)
	{
	}
}
[Token(Token = "0x20000FE")]
public class OVRGridCube : MonoBehaviour
{
	[Token(Token = "0x4000474")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public KeyCode GridKey;

	[Token(Token = "0x4000475")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private GameObject CubeGrid;

	[Token(Token = "0x4000476")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private bool CubeGridOn;

	[Token(Token = "0x4000477")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
	private bool CubeSwitchColorOld;

	[Token(Token = "0x4000478")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
	private bool CubeSwitchColor;

	[Token(Token = "0x4000479")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int gridSizeX;

	[Token(Token = "0x400047A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int gridSizeY;

	[Token(Token = "0x400047B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int gridSizeZ;

	[Token(Token = "0x400047C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float gridScale;

	[Token(Token = "0x400047D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float cubeScale;

	[Token(Token = "0x400047E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private OVRCameraRig CameraController;

	[Token(Token = "0x6000641")]
	[Address(RVA = "0x93497C", Offset = "0x93497C", VA = "0x93497C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000642")]
	[Address(RVA = "0x934CAC", Offset = "0x934CAC", VA = "0x934CAC")]
	public void SetOVRCameraController(ref OVRCameraRig cameraController)
	{
	}

	[Token(Token = "0x6000643")]
	[Address(RVA = "0x934980", Offset = "0x934980", VA = "0x934980")]
	private void UpdateCubeGrid()
	{
	}

	[Token(Token = "0x6000644")]
	[Address(RVA = "0x934CB8", Offset = "0x934CB8", VA = "0x934CB8")]
	private void CreateCubeGrid()
	{
	}

	[Token(Token = "0x6000645")]
	[Address(RVA = "0x935230", Offset = "0x935230", VA = "0x935230")]
	private void CubeGridSwitchColor(bool CubeSwitchColor)
	{
	}

	[Token(Token = "0x6000646")]
	[Address(RVA = "0x935748", Offset = "0x935748", VA = "0x935748")]
	public OVRGridCube()
	{
	}
}
[Token(Token = "0x20000FF")]
[AttributeAttribute(Name = "DefaultExecutionOrder", RVA = "0x2E6934", Offset = "0x2E6934")]
public class OVRHand : MonoBehaviour, OVRSkeleton.IOVRSkeletonDataProvider, OVRSkeletonRenderer.IOVRSkeletonRendererDataProvider, OVRMesh.IOVRMeshDataProvider, OVRMeshRenderer.IOVRMeshRendererDataProvider
{
	[Token(Token = "0x20004D0")]
	public enum Hand
	{
		[Token(Token = "0x4001CEA")]
		None = -1,
		[Token(Token = "0x4001CEB")]
		HandLeft,
		[Token(Token = "0x4001CEC")]
		HandRight
	}

	[Token(Token = "0x20004D1")]
	public enum HandFinger
	{
		[Token(Token = "0x4001CEE")]
		Thumb,
		[Token(Token = "0x4001CEF")]
		Index,
		[Token(Token = "0x4001CF0")]
		Middle,
		[Token(Token = "0x4001CF1")]
		Ring,
		[Token(Token = "0x4001CF2")]
		Pinky,
		[Token(Token = "0x4001CF3")]
		Max
	}

	[Token(Token = "0x20004D2")]
	public enum TrackingConfidence
	{
		[Token(Token = "0x4001CF5")]
		Low = 0,
		[Token(Token = "0x4001CF6")]
		High = 1065353216
	}

	[Token(Token = "0x400047F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[SerializeField]
	private Hand HandType;

	[Token(Token = "0x4000480")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	private Transform _pointerPoseRoot;

	[Token(Token = "0x4000481")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private GameObject _pointerPoseGO;

	[Token(Token = "0x4000482")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPlugin.HandState _handState;

	[Token(Token = "0x4000483")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EE89C", Offset = "0x2EE89C")]
	private bool <IsDataValid>k__BackingField;

	[Token(Token = "0x4000484")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EE8AC", Offset = "0x2EE8AC")]
	private bool <IsDataHighConfidence>k__BackingField;

	[Token(Token = "0x4000485")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x82")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EE8BC", Offset = "0x2EE8BC")]
	private bool <IsTracked>k__BackingField;

	[Token(Token = "0x4000486")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x83")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EE8CC", Offset = "0x2EE8CC")]
	private bool <IsSystemGestureInProgress>k__BackingField;

	[Token(Token = "0x4000487")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EE8DC", Offset = "0x2EE8DC")]
	private bool <IsPointerPoseValid>k__BackingField;

	[Token(Token = "0x4000488")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EE8EC", Offset = "0x2EE8EC")]
	private Transform <PointerPose>k__BackingField;

	[Token(Token = "0x4000489")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EE8FC", Offset = "0x2EE8FC")]
	private float <HandScale>k__BackingField;

	[Token(Token = "0x400048A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EE90C", Offset = "0x2EE90C")]
	private TrackingConfidence <HandConfidence>k__BackingField;

	[Token(Token = "0x400048B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EE91C", Offset = "0x2EE91C")]
	private bool <IsDominantHand>k__BackingField;

	[Token(Token = "0x170000B2")]
	public bool IsDataValid
	{
		[Token(Token = "0x6000647")]
		[Address(RVA = "0x935780", Offset = "0x935780", VA = "0x935780")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9974", Offset = "0x2F9974")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000648")]
		[Address(RVA = "0x935788", Offset = "0x935788", VA = "0x935788")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9984", Offset = "0x2F9984")]
		private set
		{
		}
	}

	[Token(Token = "0x170000B3")]
	public bool IsDataHighConfidence
	{
		[Token(Token = "0x6000649")]
		[Address(RVA = "0x935790", Offset = "0x935790", VA = "0x935790")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9994", Offset = "0x2F9994")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600064A")]
		[Address(RVA = "0x935798", Offset = "0x935798", VA = "0x935798")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F99A4", Offset = "0x2F99A4")]
		private set
		{
		}
	}

	[Token(Token = "0x170000B4")]
	public bool IsTracked
	{
		[Token(Token = "0x600064B")]
		[Address(RVA = "0x9357A0", Offset = "0x9357A0", VA = "0x9357A0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F99B4", Offset = "0x2F99B4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600064C")]
		[Address(RVA = "0x9357A8", Offset = "0x9357A8", VA = "0x9357A8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F99C4", Offset = "0x2F99C4")]
		private set
		{
		}
	}

	[Token(Token = "0x170000B5")]
	public bool IsSystemGestureInProgress
	{
		[Token(Token = "0x600064D")]
		[Address(RVA = "0x9357B0", Offset = "0x9357B0", VA = "0x9357B0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F99D4", Offset = "0x2F99D4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600064E")]
		[Address(RVA = "0x9357B8", Offset = "0x9357B8", VA = "0x9357B8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F99E4", Offset = "0x2F99E4")]
		private set
		{
		}
	}

	[Token(Token = "0x170000B6")]
	public bool IsPointerPoseValid
	{
		[Token(Token = "0x600064F")]
		[Address(RVA = "0x9357C0", Offset = "0x9357C0", VA = "0x9357C0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F99F4", Offset = "0x2F99F4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000650")]
		[Address(RVA = "0x9357C8", Offset = "0x9357C8", VA = "0x9357C8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9A04", Offset = "0x2F9A04")]
		private set
		{
		}
	}

	[Token(Token = "0x170000B7")]
	public Transform PointerPose
	{
		[Token(Token = "0x6000651")]
		[Address(RVA = "0x9357D0", Offset = "0x9357D0", VA = "0x9357D0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9A14", Offset = "0x2F9A14")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000652")]
		[Address(RVA = "0x9357D8", Offset = "0x9357D8", VA = "0x9357D8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9A24", Offset = "0x2F9A24")]
		private set
		{
		}
	}

	[Token(Token = "0x170000B8")]
	public float HandScale
	{
		[Token(Token = "0x6000653")]
		[Address(RVA = "0x9357E0", Offset = "0x9357E0", VA = "0x9357E0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9A34", Offset = "0x2F9A34")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000654")]
		[Address(RVA = "0x9357E8", Offset = "0x9357E8", VA = "0x9357E8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9A44", Offset = "0x2F9A44")]
		private set
		{
		}
	}

	[Token(Token = "0x170000B9")]
	public TrackingConfidence HandConfidence
	{
		[Token(Token = "0x6000655")]
		[Address(RVA = "0x9357F0", Offset = "0x9357F0", VA = "0x9357F0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9A54", Offset = "0x2F9A54")]
		get
		{
			return default(TrackingConfidence);
		}
		[Token(Token = "0x6000656")]
		[Address(RVA = "0x9357F8", Offset = "0x9357F8", VA = "0x9357F8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9A64", Offset = "0x2F9A64")]
		private set
		{
		}
	}

	[Token(Token = "0x170000BA")]
	public bool IsDominantHand
	{
		[Token(Token = "0x6000657")]
		[Address(RVA = "0x935800", Offset = "0x935800", VA = "0x935800")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9A74", Offset = "0x2F9A74")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000658")]
		[Address(RVA = "0x935808", Offset = "0x935808", VA = "0x935808")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9A84", Offset = "0x2F9A84")]
		private set
		{
		}
	}

	[Token(Token = "0x6000659")]
	[Address(RVA = "0x935810", Offset = "0x935810", VA = "0x935810")]
	private void Awake()
	{
	}

	[Token(Token = "0x600065A")]
	[Address(RVA = "0x935B8C", Offset = "0x935B8C", VA = "0x935B8C")]
	private void Update()
	{
	}

	[Token(Token = "0x600065B")]
	[Address(RVA = "0x935B94", Offset = "0x935B94", VA = "0x935B94")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600065C")]
	[Address(RVA = "0x935920", Offset = "0x935920", VA = "0x935920")]
	private void GetHandState(OVRPlugin.Step step)
	{
	}

	[Token(Token = "0x600065D")]
	[Address(RVA = "0x935B9C", Offset = "0x935B9C", VA = "0x935B9C")]
	public bool GetFingerIsPinching(HandFinger finger)
	{
		return default(bool);
	}

	[Token(Token = "0x600065E")]
	[Address(RVA = "0x935BC8", Offset = "0x935BC8", VA = "0x935BC8")]
	public float GetFingerPinchStrength(HandFinger finger)
	{
		return default(float);
	}

	[Token(Token = "0x600065F")]
	[Address(RVA = "0x935C24", Offset = "0x935C24", VA = "0x935C24")]
	public TrackingConfidence GetFingerConfidence(HandFinger finger)
	{
		return default(TrackingConfidence);
	}

	[Token(Token = "0x6000660")]
	[Address(RVA = "0x935C7C", Offset = "0x935C7C", VA = "0x935C7C", Slot = "4")]
	private OVRSkeleton.SkeletonType OVRSkeleton.IOVRSkeletonDataProvider.GetSkeletonType()
	{
		return default(OVRSkeleton.SkeletonType);
	}

	[Token(Token = "0x6000661")]
	[Address(RVA = "0x935C98", Offset = "0x935C98", VA = "0x935C98", Slot = "5")]
	private OVRSkeleton.SkeletonPoseData OVRSkeleton.IOVRSkeletonDataProvider.GetSkeletonPoseData()
	{
		return default(OVRSkeleton.SkeletonPoseData);
	}

	[Token(Token = "0x6000662")]
	[Address(RVA = "0x935D44", Offset = "0x935D44", VA = "0x935D44", Slot = "6")]
	private OVRSkeletonRenderer.SkeletonRendererData OVRSkeletonRenderer.IOVRSkeletonRendererDataProvider.GetSkeletonRendererData()
	{
		return default(OVRSkeletonRenderer.SkeletonRendererData);
	}

	[Token(Token = "0x6000663")]
	[Address(RVA = "0x935DA4", Offset = "0x935DA4", VA = "0x935DA4", Slot = "7")]
	private OVRMesh.MeshType OVRMesh.IOVRMeshDataProvider.GetMeshType()
	{
		return default(OVRMesh.MeshType);
	}

	[Token(Token = "0x6000664")]
	[Address(RVA = "0x935DD4", Offset = "0x935DD4", VA = "0x935DD4", Slot = "8")]
	private OVRMeshRenderer.MeshRendererData OVRMeshRenderer.IOVRMeshRendererDataProvider.GetMeshRendererData()
	{
		return default(OVRMeshRenderer.MeshRendererData);
	}

	[Token(Token = "0x6000665")]
	[Address(RVA = "0x935E30", Offset = "0x935E30", VA = "0x935E30")]
	public OVRHand()
	{
	}
}
[Token(Token = "0x2000100")]
public class OVRHandTest : MonoBehaviour
{
	[Token(Token = "0x20004D3")]
	public class BoolMonitor
	{
		[Token(Token = "0x200078E")]
		public delegate bool BoolGenerator();

		[Token(Token = "0x4001CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private string m_name;

		[Token(Token = "0x4001CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private BoolGenerator m_generator;

		[Token(Token = "0x4001CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool m_prevValue;

		[Token(Token = "0x4001CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		private bool m_currentValue;

		[Token(Token = "0x4001CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		private bool m_currentValueRecentlyChanged;

		[Token(Token = "0x4001CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float m_displayTimeout;

		[Token(Token = "0x4001CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float m_displayTimer;

		[Token(Token = "0x6001C40")]
		[Address(RVA = "0x936124", Offset = "0x936124", VA = "0x936124")]
		public BoolMonitor(string name, BoolGenerator generator, float displayTimeout = 0.5f)
		{
		}

		[Token(Token = "0x6001C41")]
		[Address(RVA = "0x9371E0", Offset = "0x9371E0", VA = "0x9371E0")]
		public void Update()
		{
		}

		[Token(Token = "0x6001C42")]
		[Address(RVA = "0x937288", Offset = "0x937288", VA = "0x937288")]
		public void AppendToStringBuilder(ref StringBuilder sb)
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20004D4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EABEC", Offset = "0x2EABEC")]
	private sealed class <>c
	{
		[Token(Token = "0x4001CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x4001CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static BoolMonitor.BoolGenerator <>9__14_0;

		[Token(Token = "0x6001C44")]
		[Address(RVA = "0x9375FC", Offset = "0x9375FC", VA = "0x9375FC")]
		public <>c()
		{
		}

		[Token(Token = "0x6001C45")]
		[Address(RVA = "0x937604", Offset = "0x937604", VA = "0x937604")]
		internal bool <Start>b__14_0()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C46")]
		[Address(RVA = "0x937710", Offset = "0x937710", VA = "0x937710")]
		internal bool <.cctor>b__19_0()
		{
			return default(bool);
		}
	}

	[Token(Token = "0x400048C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Text uiText;

	[Token(Token = "0x400048D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private List<BoolMonitor> monitors;

	[Token(Token = "0x400048E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private StringBuilder data;

	[Token(Token = "0x400048F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPlugin.HandState hs_LH;

	[Token(Token = "0x4000490")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private OVRPlugin.HandState hs_RH;

	[Token(Token = "0x4000491")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private OVRPlugin.Skeleton skel_LH;

	[Token(Token = "0x4000492")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	private OVRPlugin.Skeleton skel_RH;

	[Token(Token = "0x4000493")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private OVRPlugin.Mesh mesh_LH;

	[Token(Token = "0x4000494")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	private OVRPlugin.Mesh mesh_RH;

	[Token(Token = "0x4000495")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private bool result_skel_LH;

	[Token(Token = "0x4000496")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x119")]
	private bool result_skel_RH;

	[Token(Token = "0x4000497")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11A")]
	private bool result_mesh_LH;

	[Token(Token = "0x4000498")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11B")]
	private bool result_mesh_RH;

	[Token(Token = "0x4000499")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string prevConnected;

	[Token(Token = "0x400049A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static BoolMonitor controllers;

	[Token(Token = "0x6000666")]
	[Address(RVA = "0x935E40", Offset = "0x935E40", VA = "0x935E40")]
	private void Start()
	{
	}

	[Token(Token = "0x6000667")]
	[Address(RVA = "0x9361B0", Offset = "0x9361B0", VA = "0x9361B0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000668")]
	[Address(RVA = "0x9373B0", Offset = "0x9373B0", VA = "0x9373B0")]
	public OVRHandTest()
	{
	}
}
[Token(Token = "0x2000101")]
[AttributeAttribute(Name = "DefaultExecutionOrder", RVA = "0x2E6948", Offset = "0x2E6948")]
public class OVRMesh : MonoBehaviour
{
	[Token(Token = "0x20004D5")]
	public interface IOVRMeshDataProvider
	{
		[Token(Token = "0x6001C47")]
		MeshType GetMeshType();
	}

	[Token(Token = "0x20004D6")]
	public enum MeshType
	{
		[Token(Token = "0x4001D01")]
		None = -1,
		[Token(Token = "0x4001D02")]
		HandLeft,
		[Token(Token = "0x4001D03")]
		HandRight
	}

	[Token(Token = "0x400049B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[SerializeField]
	private IOVRMeshDataProvider _dataProvider;

	[Token(Token = "0x400049C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	private MeshType _meshType;

	[Token(Token = "0x400049D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Mesh _mesh;

	[Token(Token = "0x400049E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EE94C", Offset = "0x2EE94C")]
	private bool <IsInitialized>k__BackingField;

	[Token(Token = "0x170000BB")]
	public bool IsInitialized
	{
		[Token(Token = "0x600066A")]
		[Address(RVA = "0x79E61C", Offset = "0x79E61C", VA = "0x79E61C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9A94", Offset = "0x2F9A94")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600066B")]
		[Address(RVA = "0x79E624", Offset = "0x79E624", VA = "0x79E624")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9AA4", Offset = "0x2F9AA4")]
		private set
		{
		}
	}

	[Token(Token = "0x170000BC")]
	public Mesh Mesh
	{
		[Token(Token = "0x600066C")]
		[Address(RVA = "0x79E62C", Offset = "0x79E62C", VA = "0x79E62C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600066D")]
	[Address(RVA = "0x79E634", Offset = "0x79E634", VA = "0x79E634")]
	private void Awake()
	{
	}

	[Token(Token = "0x600066E")]
	[Address(RVA = "0x79E74C", Offset = "0x79E74C", VA = "0x79E74C")]
	private void Initialize(MeshType meshType)
	{
	}

	[Token(Token = "0x600066F")]
	[Address(RVA = "0x79F2C4", Offset = "0x79F2C4", VA = "0x79F2C4")]
	public OVRMesh()
	{
	}
}
[Token(Token = "0x2000102")]
public class OVRMeshRenderer : MonoBehaviour
{
	[Token(Token = "0x20004D7")]
	public interface IOVRMeshRendererDataProvider
	{
		[Token(Token = "0x6001C48")]
		MeshRendererData GetMeshRendererData();
	}

	[Token(Token = "0x20004D8")]
	public struct MeshRendererData
	{
		[Token(Token = "0x4001D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F64B4", Offset = "0x2F64B4")]
		private bool <IsDataValid>k__BackingField;

		[Token(Token = "0x4001D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F64C4", Offset = "0x2F64C4")]
		private bool <IsDataHighConfidence>k__BackingField;

		[Token(Token = "0x4001D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F64D4", Offset = "0x2F64D4")]
		private bool <ShouldUseSystemGestureMaterial>k__BackingField;

		[Token(Token = "0x17000388")]
		public bool IsDataValid
		{
			[Token(Token = "0x6001C49")]
			[Address(RVA = "0x3A8CBC", Offset = "0x3A8CBC", VA = "0x3A8CBC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FD0C0", Offset = "0x2FD0C0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C4A")]
			[Address(RVA = "0x3A8CC4", Offset = "0x3A8CC4", VA = "0x3A8CC4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FD0D0", Offset = "0x2FD0D0")]
			set
			{
			}
		}

		[Token(Token = "0x17000389")]
		public bool IsDataHighConfidence
		{
			[Token(Token = "0x6001C4B")]
			[Address(RVA = "0x3A8CCC", Offset = "0x3A8CCC", VA = "0x3A8CCC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FD0E0", Offset = "0x2FD0E0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C4C")]
			[Address(RVA = "0x3A8CD4", Offset = "0x3A8CD4", VA = "0x3A8CD4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FD0F0", Offset = "0x2FD0F0")]
			set
			{
			}
		}

		[Token(Token = "0x1700038A")]
		public bool ShouldUseSystemGestureMaterial
		{
			[Token(Token = "0x6001C4D")]
			[Address(RVA = "0x3A8CDC", Offset = "0x3A8CDC", VA = "0x3A8CDC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FD100", Offset = "0x2FD100")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C4E")]
			[Address(RVA = "0x3A8CE4", Offset = "0x3A8CE4", VA = "0x3A8CE4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FD110", Offset = "0x2FD110")]
			set
			{
			}
		}
	}

	[Token(Token = "0x20004D9")]
	public enum ConfidenceBehavior
	{
		[Token(Token = "0x4001D08")]
		None,
		[Token(Token = "0x4001D09")]
		ToggleRenderer
	}

	[Token(Token = "0x20004DA")]
	public enum SystemGestureBehavior
	{
		[Token(Token = "0x4001D0B")]
		None,
		[Token(Token = "0x4001D0C")]
		SwapMaterial
	}

	[Token(Token = "0x400049F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[SerializeField]
	private IOVRMeshRendererDataProvider _dataProvider;

	[Token(Token = "0x40004A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	private OVRMesh _ovrMesh;

	[Token(Token = "0x40004A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[SerializeField]
	private OVRSkeleton _ovrSkeleton;

	[Token(Token = "0x40004A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private ConfidenceBehavior _confidenceBehavior;

	[Token(Token = "0x40004A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private SystemGestureBehavior _systemGestureBehavior;

	[Token(Token = "0x40004A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Material _systemGestureMaterial;

	[Token(Token = "0x40004A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Material _originalMaterial;

	[Token(Token = "0x40004A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private SkinnedMeshRenderer _skinnedMeshRenderer;

	[Token(Token = "0x40004A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EE9BC", Offset = "0x2EE9BC")]
	private bool <IsInitialized>k__BackingField;

	[Token(Token = "0x40004A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EE9CC", Offset = "0x2EE9CC")]
	private bool <IsDataValid>k__BackingField;

	[Token(Token = "0x40004A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EE9DC", Offset = "0x2EE9DC")]
	private bool <IsDataHighConfidence>k__BackingField;

	[Token(Token = "0x40004AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EE9EC", Offset = "0x2EE9EC")]
	private bool <ShouldUseSystemGestureMaterial>k__BackingField;

	[Token(Token = "0x170000BD")]
	public bool IsInitialized
	{
		[Token(Token = "0x6000670")]
		[Address(RVA = "0x79F2D4", Offset = "0x79F2D4", VA = "0x79F2D4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9AB4", Offset = "0x2F9AB4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000671")]
		[Address(RVA = "0x79F2DC", Offset = "0x79F2DC", VA = "0x79F2DC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9AC4", Offset = "0x2F9AC4")]
		private set
		{
		}
	}

	[Token(Token = "0x170000BE")]
	public bool IsDataValid
	{
		[Token(Token = "0x6000672")]
		[Address(RVA = "0x79F2E4", Offset = "0x79F2E4", VA = "0x79F2E4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9AD4", Offset = "0x2F9AD4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000673")]
		[Address(RVA = "0x79F2EC", Offset = "0x79F2EC", VA = "0x79F2EC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9AE4", Offset = "0x2F9AE4")]
		private set
		{
		}
	}

	[Token(Token = "0x170000BF")]
	public bool IsDataHighConfidence
	{
		[Token(Token = "0x6000674")]
		[Address(RVA = "0x79F2F4", Offset = "0x79F2F4", VA = "0x79F2F4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9AF4", Offset = "0x2F9AF4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000675")]
		[Address(RVA = "0x79F2FC", Offset = "0x79F2FC", VA = "0x79F2FC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9B04", Offset = "0x2F9B04")]
		private set
		{
		}
	}

	[Token(Token = "0x170000C0")]
	public bool ShouldUseSystemGestureMaterial
	{
		[Token(Token = "0x6000676")]
		[Address(RVA = "0x79F304", Offset = "0x79F304", VA = "0x79F304")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9B14", Offset = "0x2F9B14")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000677")]
		[Address(RVA = "0x79F30C", Offset = "0x79F30C", VA = "0x79F30C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9B24", Offset = "0x2F9B24")]
		private set
		{
		}
	}

	[Token(Token = "0x6000678")]
	[Address(RVA = "0x79F314", Offset = "0x79F314", VA = "0x79F314")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000679")]
	[Address(RVA = "0x79F450", Offset = "0x79F450", VA = "0x79F450")]
	private void Start()
	{
	}

	[Token(Token = "0x600067A")]
	[Address(RVA = "0x79F500", Offset = "0x79F500", VA = "0x79F500")]
	private void Initialize()
	{
	}

	[Token(Token = "0x600067B")]
	[Address(RVA = "0x79FD8C", Offset = "0x79FD8C", VA = "0x79FD8C")]
	private void Update()
	{
	}

	[Token(Token = "0x600067C")]
	[Address(RVA = "0x7A0150", Offset = "0x7A0150", VA = "0x7A0150")]
	public OVRMeshRenderer()
	{
	}
}
[Token(Token = "0x2000103")]
public class OVRMixedRealityCaptureSettings : ScriptableObject
{
	[Token(Token = "0x40004AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public bool enableMixedReality;

	[Token(Token = "0x40004AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public LayerMask extraHiddenLayers;

	[Token(Token = "0x40004AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public OVRManager.CompositionMethod compositionMethod;

	[Token(Token = "0x40004AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Color externalCompositionBackdropColorRift;

	[Token(Token = "0x40004AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Color externalCompositionBackdropColorQuest;

	[Token(Token = "0x40004B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public OVRManager.CameraDevice capturingCameraDevice;

	[Token(Token = "0x40004B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool flipCameraFrameHorizontally;

	[Token(Token = "0x40004B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	public bool flipCameraFrameVertically;

	[Token(Token = "0x40004B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float handPoseStateLatency;

	[Token(Token = "0x40004B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float sandwichCompositionRenderLatency;

	[Token(Token = "0x40004B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int sandwichCompositionBufferedFrames;

	[Token(Token = "0x40004B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public Color chromaKeyColor;

	[Token(Token = "0x40004B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float chromaKeySimilarity;

	[Token(Token = "0x40004B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float chromaKeySmoothRange;

	[Token(Token = "0x40004B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float chromaKeySpillRange;

	[Token(Token = "0x40004BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool useDynamicLighting;

	[Token(Token = "0x40004BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public OVRManager.DepthQuality depthQuality;

	[Token(Token = "0x40004BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float dynamicLightingSmoothFactor;

	[Token(Token = "0x40004BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float dynamicLightingDepthVariationClampingValue;

	[Token(Token = "0x40004BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public OVRManager.VirtualGreenScreenType virtualGreenScreenType;

	[Token(Token = "0x40004BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public float virtualGreenScreenTopY;

	[Token(Token = "0x40004C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float virtualGreenScreenBottomY;

	[Token(Token = "0x40004C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public bool virtualGreenScreenApplyDepthCulling;

	[Token(Token = "0x40004C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float virtualGreenScreenDepthTolerance;

	[Token(Token = "0x600067D")]
	[Address(RVA = "0x7A12E4", Offset = "0x7A12E4", VA = "0x7A12E4")]
	public void ReadFrom(OVRManager manager)
	{
	}

	[Token(Token = "0x600067E")]
	[Address(RVA = "0x7A15B4", Offset = "0x7A15B4", VA = "0x7A15B4")]
	public void ApplyTo(OVRManager manager)
	{
	}

	[Token(Token = "0x600067F")]
	[Address(RVA = "0x7A187C", Offset = "0x7A187C", VA = "0x7A187C")]
	public OVRMixedRealityCaptureSettings()
	{
	}
}
[Token(Token = "0x2000104")]
public class OVRMixedRealityCaptureTest : MonoBehaviour
{
	[Token(Token = "0x20004DB")]
	private enum CameraMode
	{
		[Token(Token = "0x4001D0E")]
		Normal,
		[Token(Token = "0x4001D0F")]
		OverrideFov,
		[Token(Token = "0x4001D10")]
		ThirdPerson
	}

	[Token(Token = "0x40004C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private bool inited;

	[Token(Token = "0x40004C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private CameraMode currentMode;

	[Token(Token = "0x40004C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Camera defaultExternalCamera;

	[Token(Token = "0x40004C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPlugin.Fovf defaultFov;

	[Token(Token = "0x6000680")]
	[Address(RVA = "0x7A1944", Offset = "0x7A1944", VA = "0x7A1944")]
	private void Start()
	{
	}

	[Token(Token = "0x6000681")]
	[Address(RVA = "0x7A1A18", Offset = "0x7A1A18", VA = "0x7A1A18")]
	private void Initialize()
	{
	}

	[Token(Token = "0x6000682")]
	[Address(RVA = "0x7A211C", Offset = "0x7A211C", VA = "0x7A211C")]
	private void UpdateDefaultExternalCamera()
	{
	}

	[Token(Token = "0x6000683")]
	[Address(RVA = "0x7A2CE4", Offset = "0x7A2CE4", VA = "0x7A2CE4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000684")]
	[Address(RVA = "0x7A3D68", Offset = "0x7A3D68", VA = "0x7A3D68")]
	public OVRMixedRealityCaptureTest()
	{
	}
}
[Token(Token = "0x2000105")]
public class OVRModeParms : MonoBehaviour
{
	[Token(Token = "0x40004C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public OVRInput.RawButton resetButton;

	[Token(Token = "0x6000685")]
	[Address(RVA = "0x7A3D70", Offset = "0x7A3D70", VA = "0x7A3D70")]
	private void Start()
	{
	}

	[Token(Token = "0x6000686")]
	[Address(RVA = "0x7A3E44", Offset = "0x7A3E44", VA = "0x7A3E44")]
	private void Update()
	{
	}

	[Token(Token = "0x6000687")]
	[Address(RVA = "0x7A401C", Offset = "0x7A401C", VA = "0x7A401C")]
	private void TestPowerStateMode()
	{
	}

	[Token(Token = "0x6000688")]
	[Address(RVA = "0x7A41A4", Offset = "0x7A41A4", VA = "0x7A41A4")]
	public OVRModeParms()
	{
	}
}
[Token(Token = "0x2000106")]
public class OVRMonoscopic : MonoBehaviour
{
	[Token(Token = "0x40004C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public OVRInput.RawButton toggleButton;

	[Token(Token = "0x40004C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool monoscopic;

	[Token(Token = "0x6000689")]
	[Address(RVA = "0x7A41B4", Offset = "0x7A41B4", VA = "0x7A41B4")]
	private void Update()
	{
	}

	[Token(Token = "0x600068A")]
	[Address(RVA = "0x7A4328", Offset = "0x7A4328", VA = "0x7A4328")]
	public OVRMonoscopic()
	{
	}
}
[Token(Token = "0x2000107")]
public class OVRNetwork
{
	[Token(Token = "0x20004DC")]
	private struct FrameHeader
	{
		[Token(Token = "0x4001D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint protocolIdentifier;

		[Token(Token = "0x4001D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int payloadType;

		[Token(Token = "0x4001D13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int payloadLength;

		[Token(Token = "0x4001D14")]
		public const int StructSize = 12;

		[Token(Token = "0x6001C4F")]
		[Address(RVA = "0x3A8CEC", Offset = "0x3A8CEC", VA = "0x3A8CEC")]
		public byte[] ToBytes()
		{
			return null;
		}

		[Token(Token = "0x6001C50")]
		[Address(RVA = "0x7A483C", Offset = "0x7A483C", VA = "0x7A483C")]
		public static FrameHeader FromBytes(byte[] arr)
		{
			return default(FrameHeader);
		}
	}

	[Token(Token = "0x20004DD")]
	public class OVRNetworkTcpServer
	{
		[Token(Token = "0x4001D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public TcpListener tcpListener;

		[Token(Token = "0x4001D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private readonly object clientsLock;

		[Token(Token = "0x4001D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly List<TcpClient> clients;

		[Token(Token = "0x6001C51")]
		[Address(RVA = "0x7A5CF4", Offset = "0x7A5CF4", VA = "0x7A5CF4")]
		public void StartListening(int listeningPort)
		{
		}

		[Token(Token = "0x6001C52")]
		[Address(RVA = "0x7A63BC", Offset = "0x7A63BC", VA = "0x7A63BC")]
		public void StopListening()
		{
		}

		[Token(Token = "0x6001C53")]
		[Address(RVA = "0x7A6584", Offset = "0x7A6584", VA = "0x7A6584")]
		private void DoAcceptTcpClientCallback(IAsyncResult ar)
		{
		}

		[Token(Token = "0x6001C54")]
		[Address(RVA = "0x7A6B8C", Offset = "0x7A6B8C", VA = "0x7A6B8C")]
		public bool HasConnectedClient()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C55")]
		[Address(RVA = "0x7A6E1C", Offset = "0x7A6E1C", VA = "0x7A6E1C")]
		public void Broadcast(int payloadType, byte[] payload)
		{
		}

		[Token(Token = "0x6001C56")]
		[Address(RVA = "0x7A7548", Offset = "0x7A7548", VA = "0x7A7548")]
		private void DoWriteDataCallback(IAsyncResult ar)
		{
		}

		[Token(Token = "0x6001C57")]
		[Address(RVA = "0x7A76D0", Offset = "0x7A76D0", VA = "0x7A76D0")]
		public OVRNetworkTcpServer()
		{
		}
	}

	[Token(Token = "0x20004DE")]
	public class OVRNetworkTcpClient
	{
		[Token(Token = "0x200078F")]
		public enum ConnectionState
		{
			[Token(Token = "0x4002268")]
			Disconnected,
			[Token(Token = "0x4002269")]
			Connected,
			[Token(Token = "0x400226A")]
			Connecting
		}

		[Token(Token = "0x4001D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Action connectionStateChangedCallback;

		[Token(Token = "0x4001D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Action<int, byte[], int, int> payloadReceivedCallback;

		[Token(Token = "0x4001D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private TcpClient tcpClient;

		[Token(Token = "0x4001D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private byte[][] receivedBuffers;

		[Token(Token = "0x4001D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int receivedBufferIndex;

		[Token(Token = "0x4001D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int receivedBufferDataSize;

		[Token(Token = "0x4001D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ManualResetEvent readyReceiveDataEvent;

		[Token(Token = "0x1700038B")]
		public ConnectionState connectionState
		{
			[Token(Token = "0x6001C58")]
			[Address(RVA = "0x7A49D0", Offset = "0x7A49D0", VA = "0x7A49D0")]
			get
			{
				return default(ConnectionState);
			}
		}

		[Token(Token = "0x1700038C")]
		public bool Connected
		{
			[Token(Token = "0x6001C59")]
			[Address(RVA = "0x7A4A04", Offset = "0x7A4A04", VA = "0x7A4A04")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001C5A")]
		[Address(RVA = "0x7A4A1C", Offset = "0x7A4A1C", VA = "0x7A4A1C")]
		public void Connect(int listeningPort)
		{
		}

		[Token(Token = "0x6001C5B")]
		[Address(RVA = "0x7A4BB4", Offset = "0x7A4BB4", VA = "0x7A4BB4")]
		private void ConnectCallback(IAsyncResult ar)
		{
		}

		[Token(Token = "0x6001C5C")]
		[Address(RVA = "0x7A4F7C", Offset = "0x7A4F7C", VA = "0x7A4F7C")]
		public void Disconnect()
		{
		}

		[Token(Token = "0x6001C5D")]
		[Address(RVA = "0x7A5268", Offset = "0x7A5268", VA = "0x7A5268")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001C5E")]
		[Address(RVA = "0x7A5530", Offset = "0x7A5530", VA = "0x7A5530")]
		private void OnReadDataCallback(IAsyncResult ar)
		{
		}

		[Token(Token = "0x6001C5F")]
		[Address(RVA = "0x7A5B6C", Offset = "0x7A5B6C", VA = "0x7A5B6C")]
		public OVRNetworkTcpClient()
		{
		}
	}

	[Token(Token = "0x40004CA")]
	public const int MaxBufferLength = 65536;

	[Token(Token = "0x40004CB")]
	public const int MaxPayloadLength = 65524;

	[Token(Token = "0x40004CC")]
	public const uint FrameHeaderMagicIdentifier = 1384359787u;

	[Token(Token = "0x600068B")]
	[Address(RVA = "0x7A46FC", Offset = "0x7A46FC", VA = "0x7A46FC")]
	public OVRNetwork()
	{
	}
}
[Token(Token = "0x2000108")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x2E695C", Offset = "0x2E695C")]
public class OVRPlayerController : MonoBehaviour
{
	[Token(Token = "0x40004CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float Acceleration;

	[Token(Token = "0x40004CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float Damping;

	[Token(Token = "0x40004CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float BackAndSideDampen;

	[Token(Token = "0x40004D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float JumpForce;

	[Token(Token = "0x40004D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float RotationAmount;

	[Token(Token = "0x40004D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float RotationRatchet;

	[Token(Token = "0x40004D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EE9FC", Offset = "0x2EE9FC")]
	public bool SnapRotation;

	[Token(Token = "0x40004D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EEA30", Offset = "0x2EEA30")]
	public int FixedSpeedSteps;

	[Token(Token = "0x40004D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool HmdResetsY;

	[Token(Token = "0x40004D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	public bool HmdRotatesY;

	[Token(Token = "0x40004D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float GravityModifier;

	[Token(Token = "0x40004D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool useProfileData;

	[NonSerialized]
	[Token(Token = "0x40004D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float CameraHeight;

	[NonSerialized]
	[Token(Token = "0x40004DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool Teleported;

	[Token(Token = "0x40004DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public bool EnableLinearMovement;

	[Token(Token = "0x40004DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	public bool EnableRotation;

	[Token(Token = "0x40004E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
	public bool RotationEitherThumbstick;

	[Token(Token = "0x40004E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected CharacterController Controller;

	[Token(Token = "0x40004E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	protected OVRCameraRig CameraRig;

	[Token(Token = "0x40004E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float MoveScale;

	[Token(Token = "0x40004E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Vector3 MoveThrottle;

	[Token(Token = "0x40004E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float FallSpeed;

	[Token(Token = "0x40004E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private OVRPose? InitialPose;

	[Token(Token = "0x40004E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EEA94", Offset = "0x2EEA94")]
	private float <InitialYRotation>k__BackingField;

	[Token(Token = "0x40004E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float MoveScaleMultiplier;

	[Token(Token = "0x40004E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float RotationScaleMultiplier;

	[Token(Token = "0x40004EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private bool SkipMouseRotation;

	[Token(Token = "0x40004EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
	private bool HaltUpdateMovement;

	[Token(Token = "0x40004EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9A")]
	private bool prevHatLeft;

	[Token(Token = "0x40004ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9B")]
	private bool prevHatRight;

	[Token(Token = "0x40004EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private float SimulationRate;

	[Token(Token = "0x40004EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float buttonRotation;

	[Token(Token = "0x40004F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private bool ReadyToSnapTurn;

	[Token(Token = "0x40004F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA5")]
	private bool playerControllerEnabled;

	[Token(Token = "0x170000C1")]
	public float InitialYRotation
	{
		[Token(Token = "0x6000692")]
		[Address(RVA = "0x7B4BCC", Offset = "0x7B4BCC", VA = "0x7B4BCC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9B94", Offset = "0x2F9B94")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000693")]
		[Address(RVA = "0x7B4BD4", Offset = "0x7B4BD4", VA = "0x7B4BD4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9BA4", Offset = "0x2F9BA4")]
		private set
		{
		}
	}

	[Token(Token = "0x14000015")]
	public event Action<Transform> TransformUpdated
	{
		[Token(Token = "0x600068C")]
		[Address(RVA = "0x7B477C", Offset = "0x7B477C", VA = "0x7B477C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9B34", Offset = "0x2F9B34")]
		add
		{
		}
		[Token(Token = "0x600068D")]
		[Address(RVA = "0x7B4834", Offset = "0x7B4834", VA = "0x7B4834")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9B44", Offset = "0x2F9B44")]
		remove
		{
		}
	}

	[Token(Token = "0x14000016")]
	public event Action CameraUpdated
	{
		[Token(Token = "0x600068E")]
		[Address(RVA = "0x7B48EC", Offset = "0x7B48EC", VA = "0x7B48EC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9B54", Offset = "0x2F9B54")]
		add
		{
		}
		[Token(Token = "0x600068F")]
		[Address(RVA = "0x7B49A4", Offset = "0x7B49A4", VA = "0x7B49A4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9B64", Offset = "0x2F9B64")]
		remove
		{
		}
	}

	[Token(Token = "0x14000017")]
	public event Action PreCharacterMove
	{
		[Token(Token = "0x6000690")]
		[Address(RVA = "0x7B4A5C", Offset = "0x7B4A5C", VA = "0x7B4A5C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9B74", Offset = "0x2F9B74")]
		add
		{
		}
		[Token(Token = "0x6000691")]
		[Address(RVA = "0x7B4B14", Offset = "0x7B4B14", VA = "0x7B4B14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9B84", Offset = "0x2F9B84")]
		remove
		{
		}
	}

	[Token(Token = "0x6000694")]
	[Address(RVA = "0x7B4BDC", Offset = "0x7B4BDC", VA = "0x7B4BDC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000695")]
	[Address(RVA = "0x7B4D24", Offset = "0x7B4D24", VA = "0x7B4D24")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000696")]
	[Address(RVA = "0x7B4F8C", Offset = "0x7B4F8C", VA = "0x7B4F8C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000697")]
	[Address(RVA = "0x7B4F90", Offset = "0x7B4F90", VA = "0x7B4F90")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000698")]
	[Address(RVA = "0x7B51A0", Offset = "0x7B51A0", VA = "0x7B51A0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000699")]
	[Address(RVA = "0x7B542C", Offset = "0x7B542C", VA = "0x7B542C", Slot = "4")]
	protected virtual void UpdateController()
	{
	}

	[Token(Token = "0x600069A")]
	[Address(RVA = "0x7B60D8", Offset = "0x7B60D8", VA = "0x7B60D8", Slot = "5")]
	public virtual void UpdateMovement()
	{
	}

	[Token(Token = "0x600069B")]
	[Address(RVA = "0x7B756C", Offset = "0x7B756C", VA = "0x7B756C")]
	public void UpdateTransform(OVRCameraRig rig)
	{
	}

	[Token(Token = "0x600069C")]
	[Address(RVA = "0x7B7810", Offset = "0x7B7810", VA = "0x7B7810")]
	public bool Jump()
	{
		return default(bool);
	}

	[Token(Token = "0x600069D")]
	[Address(RVA = "0x7B7968", Offset = "0x7B7968", VA = "0x7B7968")]
	public void Stop()
	{
	}

	[Token(Token = "0x600069E")]
	[Address(RVA = "0x7B7A3C", Offset = "0x7B7A3C", VA = "0x7B7A3C")]
	public void GetMoveScaleMultiplier(ref float moveScaleMultiplier)
	{
	}

	[Token(Token = "0x600069F")]
	[Address(RVA = "0x7B7A48", Offset = "0x7B7A48", VA = "0x7B7A48")]
	public void SetMoveScaleMultiplier(float moveScaleMultiplier)
	{
	}

	[Token(Token = "0x60006A0")]
	[Address(RVA = "0x7B7A50", Offset = "0x7B7A50", VA = "0x7B7A50")]
	public void GetRotationScaleMultiplier(ref float rotationScaleMultiplier)
	{
	}

	[Token(Token = "0x60006A1")]
	[Address(RVA = "0x7B7A5C", Offset = "0x7B7A5C", VA = "0x7B7A5C")]
	public void SetRotationScaleMultiplier(float rotationScaleMultiplier)
	{
	}

	[Token(Token = "0x60006A2")]
	[Address(RVA = "0x7B7A64", Offset = "0x7B7A64", VA = "0x7B7A64")]
	public void GetSkipMouseRotation(ref bool skipMouseRotation)
	{
	}

	[Token(Token = "0x60006A3")]
	[Address(RVA = "0x7B7A70", Offset = "0x7B7A70", VA = "0x7B7A70")]
	public void SetSkipMouseRotation(bool skipMouseRotation)
	{
	}

	[Token(Token = "0x60006A4")]
	[Address(RVA = "0x7B7A78", Offset = "0x7B7A78", VA = "0x7B7A78")]
	public void GetHaltUpdateMovement(ref bool haltUpdateMovement)
	{
	}

	[Token(Token = "0x60006A5")]
	[Address(RVA = "0x7B7A84", Offset = "0x7B7A84", VA = "0x7B7A84")]
	public void SetHaltUpdateMovement(bool haltUpdateMovement)
	{
	}

	[Token(Token = "0x60006A6")]
	[Address(RVA = "0x7B7A8C", Offset = "0x7B7A8C", VA = "0x7B7A8C")]
	public void ResetOrientation()
	{
	}

	[Token(Token = "0x60006A7")]
	[Address(RVA = "0x7B7BE0", Offset = "0x7B7BE0", VA = "0x7B7BE0")]
	public OVRPlayerController()
	{
	}
}
[Token(Token = "0x2000109")]
public class OVRProgressIndicator : MonoBehaviour
{
	[Token(Token = "0x40004F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public MeshRenderer progressImage;

	[Token(Token = "0x40004F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2EEAA4", Offset = "0x2EEAA4")]
	public float currentProgress;

	[Token(Token = "0x60006A8")]
	[Address(RVA = "0x9CF11C", Offset = "0x9CF11C", VA = "0x9CF11C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006A9")]
	[Address(RVA = "0x9CF14C", Offset = "0x9CF14C", VA = "0x9CF14C")]
	private void Update()
	{
	}

	[Token(Token = "0x60006AA")]
	[Address(RVA = "0x9CF200", Offset = "0x9CF200", VA = "0x9CF200")]
	public OVRProgressIndicator()
	{
	}
}
[Token(Token = "0x200010A")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x2E69D4", Offset = "0x2E69D4")]
public class OVRRaycaster : GraphicRaycaster, IPointerEnterHandler, IEventSystemHandler
{
	[Token(Token = "0x20004DF")]
	private struct RaycastHit
	{
		[Token(Token = "0x4001D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Graphic graphic;

		[Token(Token = "0x4001D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Vector3 worldPos;

		[Token(Token = "0x4001D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool fromMouse;
	}

	[Serializable]
	[Token(Token = "0x20004E0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EABFC", Offset = "0x2EABFC")]
	private sealed class <>c
	{
		[Token(Token = "0x4001D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x4001D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static Comparison<RaycastHit> <>9__16_0;

		[Token(Token = "0x6001C61")]
		[Address(RVA = "0x9D1310", Offset = "0x9D1310", VA = "0x9D1310")]
		public <>c()
		{
		}

		[Token(Token = "0x6001C62")]
		[Address(RVA = "0x9D1318", Offset = "0x9D1318", VA = "0x9D1318")]
		internal int <GraphicRaycast>b__16_0(RaycastHit g1, RaycastHit g2)
		{
			return default(int);
		}
	}

	[Token(Token = "0x40004F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EEABC", Offset = "0x2EEABC")]
	public GameObject pointer;

	[Token(Token = "0x40004F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int sortOrder;

	[NonSerialized]
	[Token(Token = "0x40004F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Canvas m_Canvas;

	[NonSerialized]
	[Token(Token = "0x40004F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<RaycastHit> m_RaycastResults;

	[NonSerialized]
	[Token(Token = "0x40004F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly List<RaycastHit> s_SortedGraphics;

	[Token(Token = "0x170000C2")]
	private Canvas canvas
	{
		[Token(Token = "0x60006AC")]
		[Address(RVA = "0x9CF2CC", Offset = "0x9CF2CC", VA = "0x9CF2CC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000C3")]
	public override Camera eventCamera
	{
		[Token(Token = "0x60006AD")]
		[Address(RVA = "0x9CF380", Offset = "0x9CF380", VA = "0x9CF380", Slot = "18")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000C4")]
	public override int sortOrderPriority
	{
		[Token(Token = "0x60006AE")]
		[Address(RVA = "0x9CF3B0", Offset = "0x9CF3B0", VA = "0x9CF3B0", Slot = "20")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60006AB")]
	[Address(RVA = "0x9CF214", Offset = "0x9CF214", VA = "0x9CF214")]
	protected OVRRaycaster()
	{
	}

	[Token(Token = "0x60006AF")]
	[Address(RVA = "0x9CF3B8", Offset = "0x9CF3B8", VA = "0x9CF3B8", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60006B0")]
	[Address(RVA = "0x9CF584", Offset = "0x9CF584", VA = "0x9CF584")]
	private void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList, Ray ray, bool checkForBlocking)
	{
	}

	[Token(Token = "0x60006B1")]
	[Address(RVA = "0x9D0530", Offset = "0x9D0530", VA = "0x9D0530", Slot = "17")]
	public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList)
	{
	}

	[Token(Token = "0x60006B2")]
	[Address(RVA = "0x9D05A0", Offset = "0x9D05A0", VA = "0x9D05A0")]
	public void RaycastPointer(PointerEventData eventData, List<RaycastResult> resultAppendList)
	{
	}

	[Token(Token = "0x60006B3")]
	[Address(RVA = "0x9CFD38", Offset = "0x9CFD38", VA = "0x9CFD38")]
	private void GraphicRaycast(Canvas canvas, Ray ray, List<RaycastHit> results)
	{
	}

	[Token(Token = "0x60006B4")]
	[Address(RVA = "0x9D0E58", Offset = "0x9D0E58", VA = "0x9D0E58")]
	public Vector2 GetScreenPosition(RaycastResult raycastResult)
	{
		return default(Vector2);
	}

	[Token(Token = "0x60006B5")]
	[Address(RVA = "0x9D084C", Offset = "0x9D084C", VA = "0x9D084C")]
	private static bool RayIntersectsRectTransform(RectTransform rectTransform, Ray ray, out Vector3 worldPos)
	{
		return default(bool);
	}

	[Token(Token = "0x60006B6")]
	[Address(RVA = "0x9D0F44", Offset = "0x9D0F44", VA = "0x9D0F44")]
	public bool IsFocussed()
	{
		return default(bool);
	}

	[Token(Token = "0x60006B7")]
	[Address(RVA = "0x9D10BC", Offset = "0x9D10BC", VA = "0x9D10BC", Slot = "22")]
	public void OnPointerEnter(PointerEventData e)
	{
	}
}
[Token(Token = "0x200010B")]
public class OVRResetOrientation : MonoBehaviour
{
	[Token(Token = "0x40004F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public OVRInput.RawButton resetButton;

	[Token(Token = "0x60006B9")]
	[Address(RVA = "0x9D1388", Offset = "0x9D1388", VA = "0x9D1388")]
	private void Update()
	{
	}

	[Token(Token = "0x60006BA")]
	[Address(RVA = "0x9D14E0", Offset = "0x9D14E0", VA = "0x9D14E0")]
	public OVRResetOrientation()
	{
	}
}
[Token(Token = "0x200010C")]
public class OVRSceneSampleController : MonoBehaviour
{
	[Token(Token = "0x40004FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public KeyCode quitKey;

	[Token(Token = "0x40004FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Texture fadeInTexture;

	[Token(Token = "0x40004FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float speedRotationIncrement;

	[Token(Token = "0x40004FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPlayerController playerController;

	[Token(Token = "0x40004FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private OVRCameraRig cameraController;

	[Token(Token = "0x40004FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string layerName;

	[Token(Token = "0x4000500")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private bool visionMode;

	[Token(Token = "0x4000501")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVRGridCube gridCube;

	[Token(Token = "0x60006BB")]
	[Address(RVA = "0x9D38AC", Offset = "0x9D38AC", VA = "0x9D38AC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006BC")]
	[Address(RVA = "0x9D3ACC", Offset = "0x9D3ACC", VA = "0x9D3ACC")]
	private void Start()
	{
	}

	[Token(Token = "0x60006BD")]
	[Address(RVA = "0x9D3BEC", Offset = "0x9D3BEC", VA = "0x9D3BEC")]
	private void Update()
	{
	}

	[Token(Token = "0x60006BE")]
	[Address(RVA = "0x9D3E00", Offset = "0x9D3E00", VA = "0x9D3E00")]
	private void UpdateVisionMode()
	{
	}

	[Token(Token = "0x60006BF")]
	[Address(RVA = "0x9D3F3C", Offset = "0x9D3F3C", VA = "0x9D3F3C")]
	private void UpdateSpeedAndRotationScaleMultiplier()
	{
	}

	[Token(Token = "0x60006C0")]
	[Address(RVA = "0x9D3CE0", Offset = "0x9D3CE0", VA = "0x9D3CE0")]
	private void UpdateRecenterPose()
	{
	}

	[Token(Token = "0x60006C1")]
	[Address(RVA = "0x9D4088", Offset = "0x9D4088", VA = "0x9D4088")]
	public OVRSceneSampleController()
	{
	}
}
[Token(Token = "0x200010D")]
public class OVRScreenFade : MonoBehaviour
{
	[Token(Token = "0x20004E1")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EAC0C", Offset = "0x2EAC0C")]
	private sealed class <Fade>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private int <>1__state;

		[Token(Token = "0x4001D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private object <>2__current;

		[Token(Token = "0x4001D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public OVRScreenFade <>4__this;

		[Token(Token = "0x4001D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float startAlpha;

		[Token(Token = "0x4001D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float endAlpha;

		[Token(Token = "0x4001D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float <elapsedTime>5__2;

		[Token(Token = "0x1700038D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001C66")]
			[Address(RVA = "0x9D50CC", Offset = "0x9D50CC", VA = "0x9D50CC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700038E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001C68")]
			[Address(RVA = "0x9D515C", Offset = "0x9D515C", VA = "0x9D515C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001C63")]
		[Address(RVA = "0x9D4EC8", Offset = "0x9D4EC8", VA = "0x9D4EC8")]
		[DebuggerHidden]
		public <Fade>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x6001C64")]
		[Address(RVA = "0x9D4F68", Offset = "0x9D4F68", VA = "0x9D4F68", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001C65")]
		[Address(RVA = "0x9D4F6C", Offset = "0x9D4F6C", VA = "0x9D4F6C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C67")]
		[Address(RVA = "0x9D50D4", Offset = "0x9D50D4", VA = "0x9D50D4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000502")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EEB10", Offset = "0x2EEB10")]
	public float fadeTime;

	[Token(Token = "0x4000503")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EEB4C", Offset = "0x2EEB4C")]
	public Color fadeColor;

	[Token(Token = "0x4000504")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool fadeOnStart;

	[Token(Token = "0x4000505")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int renderQueue;

	[Token(Token = "0x4000506")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float uiFadeAlpha;

	[Token(Token = "0x4000507")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private MeshRenderer fadeRenderer;

	[Token(Token = "0x4000508")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private MeshFilter fadeMesh;

	[Token(Token = "0x4000509")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Material fadeMaterial;

	[Token(Token = "0x400050A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool isFading;

	[Token(Token = "0x400050B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EEB98", Offset = "0x2EEB98")]
	private float <currentAlpha>k__BackingField;

	[Token(Token = "0x170000C5")]
	public float currentAlpha
	{
		[Token(Token = "0x60006C2")]
		[Address(RVA = "0x9D4110", Offset = "0x9D4110", VA = "0x9D4110")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9BB4", Offset = "0x2F9BB4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60006C3")]
		[Address(RVA = "0x9D4118", Offset = "0x9D4118", VA = "0x9D4118")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9BC4", Offset = "0x2F9BC4")]
		private set
		{
		}
	}

	[Token(Token = "0x60006C4")]
	[Address(RVA = "0x9D4120", Offset = "0x9D4120", VA = "0x9D4120")]
	private void Start()
	{
	}

	[Token(Token = "0x60006C5")]
	[Address(RVA = "0x9D4A1C", Offset = "0x9D4A1C", VA = "0x9D4A1C")]
	public void FadeOut()
	{
	}

	[Token(Token = "0x60006C6")]
	[Address(RVA = "0x9D4A48", Offset = "0x9D4A48", VA = "0x9D4A48")]
	private void OnLevelFinishedLoading(int level)
	{
	}

	[Token(Token = "0x60006C7")]
	[Address(RVA = "0x9D4A74", Offset = "0x9D4A74", VA = "0x9D4A74")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60006C8")]
	[Address(RVA = "0x9D4A8C", Offset = "0x9D4A8C", VA = "0x9D4A8C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60006C9")]
	[Address(RVA = "0x9D4C64", Offset = "0x9D4C64", VA = "0x9D4C64")]
	public void SetUIFade(float level)
	{
	}

	[Token(Token = "0x60006CA")]
	[Address(RVA = "0x9D4944", Offset = "0x9D4944", VA = "0x9D4944")]
	public void SetFadeLevel(float level)
	{
	}

	[Token(Token = "0x60006CB")]
	[Address(RVA = "0x9D494C", Offset = "0x9D494C", VA = "0x9D494C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2F9BD4", Offset = "0x2F9BD4")]
	private IEnumerator Fade(float startAlpha, float endAlpha)
	{
		return null;
	}

	[Token(Token = "0x60006CC")]
	[Address(RVA = "0x9D4CF8", Offset = "0x9D4CF8", VA = "0x9D4CF8")]
	private void SetMaterialAlpha()
	{
	}

	[Token(Token = "0x60006CD")]
	[Address(RVA = "0x9D4EE8", Offset = "0x9D4EE8", VA = "0x9D4EE8")]
	public OVRScreenFade()
	{
	}
}
[Token(Token = "0x200010E")]
[AttributeAttribute(Name = "DefaultExecutionOrder", RVA = "0x2E6A4C", Offset = "0x2E6A4C")]
public class OVRSkeleton : MonoBehaviour
{
	[Token(Token = "0x20004E2")]
	public interface IOVRSkeletonDataProvider
	{
		[Token(Token = "0x6001C69")]
		SkeletonType GetSkeletonType();

		[Token(Token = "0x6001C6A")]
		SkeletonPoseData GetSkeletonPoseData();
	}

	[Token(Token = "0x20004E3")]
	public struct SkeletonPoseData
	{
		[Token(Token = "0x4001D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F64E4", Offset = "0x2F64E4")]
		private OVRPlugin.Posef <RootPose>k__BackingField;

		[Token(Token = "0x4001D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F64F4", Offset = "0x2F64F4")]
		private float <RootScale>k__BackingField;

		[Token(Token = "0x4001D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F6504", Offset = "0x2F6504")]
		private OVRPlugin.Quatf[] <BoneRotations>k__BackingField;

		[Token(Token = "0x4001D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F6514", Offset = "0x2F6514")]
		private bool <IsDataValid>k__BackingField;

		[Token(Token = "0x4001D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F6524", Offset = "0x2F6524")]
		private bool <IsDataHighConfidence>k__BackingField;

		[Token(Token = "0x1700038F")]
		public OVRPlugin.Posef RootPose
		{
			[Token(Token = "0x6001C6B")]
			[Address(RVA = "0x3AB600", Offset = "0x3AB600", VA = "0x3AB600")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FD170", Offset = "0x2FD170")]
			get
			{
				return default(OVRPlugin.Posef);
			}
			[Token(Token = "0x6001C6C")]
			[Address(RVA = "0x3AB620", Offset = "0x3AB620", VA = "0x3AB620")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FD180", Offset = "0x2FD180")]
			set
			{
			}
		}

		[Token(Token = "0x17000390")]
		public float RootScale
		{
			[Token(Token = "0x6001C6D")]
			[Address(RVA = "0x3AB658", Offset = "0x3AB658", VA = "0x3AB658")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FD190", Offset = "0x2FD190")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C6E")]
			[Address(RVA = "0x3AB660", Offset = "0x3AB660", VA = "0x3AB660")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FD1A0", Offset = "0x2FD1A0")]
			set
			{
			}
		}

		[Token(Token = "0x17000391")]
		public OVRPlugin.Quatf[] BoneRotations
		{
			[Token(Token = "0x6001C6F")]
			[Address(RVA = "0x3AB668", Offset = "0x3AB668", VA = "0x3AB668")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FD1B0", Offset = "0x2FD1B0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001C70")]
			[Address(RVA = "0x3AB670", Offset = "0x3AB670", VA = "0x3AB670")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FD1C0", Offset = "0x2FD1C0")]
			set
			{
			}
		}

		[Token(Token = "0x17000392")]
		public bool IsDataValid
		{
			[Token(Token = "0x6001C71")]
			[Address(RVA = "0x3AB678", Offset = "0x3AB678", VA = "0x3AB678")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FD1D0", Offset = "0x2FD1D0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C72")]
			[Address(RVA = "0x3AB680", Offset = "0x3AB680", VA = "0x3AB680")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FD1E0", Offset = "0x2FD1E0")]
			set
			{
			}
		}

		[Token(Token = "0x17000393")]
		public bool IsDataHighConfidence
		{
			[Token(Token = "0x6001C73")]
			[Address(RVA = "0x3AB688", Offset = "0x3AB688", VA = "0x3AB688")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FD1F0", Offset = "0x2FD1F0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C74")]
			[Address(RVA = "0x3AB690", Offset = "0x3AB690", VA = "0x3AB690")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FD200", Offset = "0x2FD200")]
			set
			{
			}
		}
	}

	[Token(Token = "0x20004E4")]
	public enum SkeletonType
	{
		[Token(Token = "0x4001D30")]
		None = -1,
		[Token(Token = "0x4001D31")]
		HandLeft,
		[Token(Token = "0x4001D32")]
		HandRight
	}

	[Token(Token = "0x20004E5")]
	public enum BoneId
	{
		[Token(Token = "0x4001D34")]
		Invalid = -1,
		[Token(Token = "0x4001D35")]
		Hand_Start = 0,
		[Token(Token = "0x4001D36")]
		Hand_WristRoot = 0,
		[Token(Token = "0x4001D37")]
		Hand_ForearmStub = 1,
		[Token(Token = "0x4001D38")]
		Hand_Thumb0 = 2,
		[Token(Token = "0x4001D39")]
		Hand_Thumb1 = 3,
		[Token(Token = "0x4001D3A")]
		Hand_Thumb2 = 4,
		[Token(Token = "0x4001D3B")]
		Hand_Thumb3 = 5,
		[Token(Token = "0x4001D3C")]
		Hand_Index1 = 6,
		[Token(Token = "0x4001D3D")]
		Hand_Index2 = 7,
		[Token(Token = "0x4001D3E")]
		Hand_Index3 = 8,
		[Token(Token = "0x4001D3F")]
		Hand_Middle1 = 9,
		[Token(Token = "0x4001D40")]
		Hand_Middle2 = 10,
		[Token(Token = "0x4001D41")]
		Hand_Middle3 = 11,
		[Token(Token = "0x4001D42")]
		Hand_Ring1 = 12,
		[Token(Token = "0x4001D43")]
		Hand_Ring2 = 13,
		[Token(Token = "0x4001D44")]
		Hand_Ring3 = 14,
		[Token(Token = "0x4001D45")]
		Hand_Pinky0 = 15,
		[Token(Token = "0x4001D46")]
		Hand_Pinky1 = 16,
		[Token(Token = "0x4001D47")]
		Hand_Pinky2 = 17,
		[Token(Token = "0x4001D48")]
		Hand_Pinky3 = 18,
		[Token(Token = "0x4001D49")]
		Hand_MaxSkinnable = 19,
		[Token(Token = "0x4001D4A")]
		Hand_ThumbTip = 19,
		[Token(Token = "0x4001D4B")]
		Hand_IndexTip = 20,
		[Token(Token = "0x4001D4C")]
		Hand_MiddleTip = 21,
		[Token(Token = "0x4001D4D")]
		Hand_RingTip = 22,
		[Token(Token = "0x4001D4E")]
		Hand_PinkyTip = 23,
		[Token(Token = "0x4001D4F")]
		Hand_End = 24,
		[Token(Token = "0x4001D50")]
		Max = 24
	}

	[Token(Token = "0x400050C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[SerializeField]
	private SkeletonType _skeletonType;

	[Token(Token = "0x400050D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	private IOVRSkeletonDataProvider _dataProvider;

	[Token(Token = "0x400050E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[SerializeField]
	private bool _updateRootPose;

	[Token(Token = "0x400050F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
	[SerializeField]
	private bool _updateRootScale;

	[Token(Token = "0x4000510")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
	[SerializeField]
	private bool _enablePhysicsCapsules;

	[Token(Token = "0x4000511")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private GameObject _bonesGO;

	[Token(Token = "0x4000512")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private GameObject _bindPosesGO;

	[Token(Token = "0x4000513")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject _capsulesGO;

	[Token(Token = "0x4000514")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	protected List<OVRBone> _bones;

	[Token(Token = "0x4000515")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<OVRBone> _bindPoses;

	[Token(Token = "0x4000516")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private List<OVRBoneCapsule> _capsules;

	[Token(Token = "0x4000517")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Quaternion wristFixupRotation;

	[Token(Token = "0x4000518")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EEBF8", Offset = "0x2EEBF8")]
	private bool <IsInitialized>k__BackingField;

	[Token(Token = "0x4000519")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EEC08", Offset = "0x2EEC08")]
	private bool <IsDataValid>k__BackingField;

	[Token(Token = "0x400051A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EEC18", Offset = "0x2EEC18")]
	private bool <IsDataHighConfidence>k__BackingField;

	[Token(Token = "0x400051B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EEC28", Offset = "0x2EEC28")]
	private IList<OVRBone> <Bones>k__BackingField;

	[Token(Token = "0x400051C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EEC38", Offset = "0x2EEC38")]
	private IList<OVRBone> <BindPoses>k__BackingField;

	[Token(Token = "0x400051D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EEC48", Offset = "0x2EEC48")]
	private IList<OVRBoneCapsule> <Capsules>k__BackingField;

	[Token(Token = "0x170000C6")]
	public bool IsInitialized
	{
		[Token(Token = "0x60006CE")]
		[Address(RVA = "0x9DFEFC", Offset = "0x9DFEFC", VA = "0x9DFEFC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9C4C", Offset = "0x2F9C4C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60006CF")]
		[Address(RVA = "0x9DFF04", Offset = "0x9DFF04", VA = "0x9DFF04")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9C5C", Offset = "0x2F9C5C")]
		private set
		{
		}
	}

	[Token(Token = "0x170000C7")]
	public bool IsDataValid
	{
		[Token(Token = "0x60006D0")]
		[Address(RVA = "0x9DFF0C", Offset = "0x9DFF0C", VA = "0x9DFF0C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9C6C", Offset = "0x2F9C6C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60006D1")]
		[Address(RVA = "0x9DFF14", Offset = "0x9DFF14", VA = "0x9DFF14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9C7C", Offset = "0x2F9C7C")]
		private set
		{
		}
	}

	[Token(Token = "0x170000C8")]
	public bool IsDataHighConfidence
	{
		[Token(Token = "0x60006D2")]
		[Address(RVA = "0x9DFF1C", Offset = "0x9DFF1C", VA = "0x9DFF1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9C8C", Offset = "0x2F9C8C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60006D3")]
		[Address(RVA = "0x9DFF24", Offset = "0x9DFF24", VA = "0x9DFF24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9C9C", Offset = "0x2F9C9C")]
		private set
		{
		}
	}

	[Token(Token = "0x170000C9")]
	public IList<OVRBone> Bones
	{
		[Token(Token = "0x60006D4")]
		[Address(RVA = "0x9DFF2C", Offset = "0x9DFF2C", VA = "0x9DFF2C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9CAC", Offset = "0x2F9CAC")]
		get
		{
			return null;
		}
		[Token(Token = "0x60006D5")]
		[Address(RVA = "0x9DFF34", Offset = "0x9DFF34", VA = "0x9DFF34")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9CBC", Offset = "0x2F9CBC")]
		protected set
		{
		}
	}

	[Token(Token = "0x170000CA")]
	public IList<OVRBone> BindPoses
	{
		[Token(Token = "0x60006D6")]
		[Address(RVA = "0x9DFF3C", Offset = "0x9DFF3C", VA = "0x9DFF3C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9CCC", Offset = "0x2F9CCC")]
		get
		{
			return null;
		}
		[Token(Token = "0x60006D7")]
		[Address(RVA = "0x9DFF44", Offset = "0x9DFF44", VA = "0x9DFF44")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9CDC", Offset = "0x2F9CDC")]
		private set
		{
		}
	}

	[Token(Token = "0x170000CB")]
	public IList<OVRBoneCapsule> Capsules
	{
		[Token(Token = "0x60006D8")]
		[Address(RVA = "0x9DFF4C", Offset = "0x9DFF4C", VA = "0x9DFF4C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9CEC", Offset = "0x2F9CEC")]
		get
		{
			return null;
		}
		[Token(Token = "0x60006D9")]
		[Address(RVA = "0x9DFF54", Offset = "0x9DFF54", VA = "0x9DFF54")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9CFC", Offset = "0x2F9CFC")]
		private set
		{
		}
	}

	[Token(Token = "0x60006DA")]
	[Address(RVA = "0x9DFF5C", Offset = "0x9DFF5C", VA = "0x9DFF5C")]
	public SkeletonType GetSkeletonType()
	{
		return default(SkeletonType);
	}

	[Token(Token = "0x60006DB")]
	[Address(RVA = "0x9DFF64", Offset = "0x9DFF64", VA = "0x9DFF64")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006DC")]
	[Address(RVA = "0x9E00F8", Offset = "0x9E00F8", VA = "0x9E00F8")]
	private void Start()
	{
	}

	[Token(Token = "0x60006DD")]
	[Address(RVA = "0x9E0108", Offset = "0x9E0108", VA = "0x9E0108")]
	private void Initialize()
	{
	}

	[Token(Token = "0x60006DE")]
	[Address(RVA = "0x9E16B0", Offset = "0x9E16B0", VA = "0x9E16B0", Slot = "4")]
	protected virtual void InitializeBones(OVRPlugin.Skeleton skeleton)
	{
	}

	[Token(Token = "0x60006DF")]
	[Address(RVA = "0x9E021C", Offset = "0x9E021C", VA = "0x9E021C")]
	private void InitializeBindPose(OVRPlugin.Skeleton skeleton)
	{
	}

	[Token(Token = "0x60006E0")]
	[Address(RVA = "0x9E09C8", Offset = "0x9E09C8", VA = "0x9E09C8")]
	private void InitializeCapsules(OVRPlugin.Skeleton skeleton)
	{
	}

	[Token(Token = "0x60006E1")]
	[Address(RVA = "0x9E1E30", Offset = "0x9E1E30", VA = "0x9E1E30")]
	private void Update()
	{
	}

	[Token(Token = "0x60006E2")]
	[Address(RVA = "0x9E2370", Offset = "0x9E2370", VA = "0x9E2370")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60006E3")]
	[Address(RVA = "0x9E2750", Offset = "0x9E2750", VA = "0x9E2750")]
	public BoneId GetCurrentStartBoneId()
	{
		return default(BoneId);
	}

	[Token(Token = "0x60006E4")]
	[Address(RVA = "0x9E2764", Offset = "0x9E2764", VA = "0x9E2764")]
	public BoneId GetCurrentEndBoneId()
	{
		return default(BoneId);
	}

	[Token(Token = "0x60006E5")]
	[Address(RVA = "0x9E2778", Offset = "0x9E2778", VA = "0x9E2778")]
	private BoneId GetCurrentMaxSkinnableBoneId()
	{
		return default(BoneId);
	}

	[Token(Token = "0x60006E6")]
	[Address(RVA = "0x9E278C", Offset = "0x9E278C", VA = "0x9E278C")]
	public int GetCurrentNumBones()
	{
		return default(int);
	}

	[Token(Token = "0x60006E7")]
	[Address(RVA = "0x9E27A0", Offset = "0x9E27A0", VA = "0x9E27A0")]
	public int GetCurrentNumSkinnableBones()
	{
		return default(int);
	}

	[Token(Token = "0x60006E8")]
	[Address(RVA = "0x9E27B4", Offset = "0x9E27B4", VA = "0x9E27B4")]
	public OVRSkeleton()
	{
	}
}
[Token(Token = "0x200010F")]
public class OVRBone
{
	[Token(Token = "0x400051E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EEC58", Offset = "0x2EEC58")]
	private OVRSkeleton.BoneId <Id>k__BackingField;

	[Token(Token = "0x400051F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EEC68", Offset = "0x2EEC68")]
	private short <ParentBoneIndex>k__BackingField;

	[Token(Token = "0x4000520")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EEC78", Offset = "0x2EEC78")]
	private Transform <Transform>k__BackingField;

	[Token(Token = "0x170000CC")]
	public OVRSkeleton.BoneId Id
	{
		[Token(Token = "0x60006E9")]
		[Address(RVA = "0x5DD320", Offset = "0x5DD320", VA = "0x5DD320")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9D0C", Offset = "0x2F9D0C")]
		get
		{
			return default(OVRSkeleton.BoneId);
		}
		[Token(Token = "0x60006EA")]
		[Address(RVA = "0x5DD328", Offset = "0x5DD328", VA = "0x5DD328")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9D1C", Offset = "0x2F9D1C")]
		private set
		{
		}
	}

	[Token(Token = "0x170000CD")]
	public short ParentBoneIndex
	{
		[Token(Token = "0x60006EB")]
		[Address(RVA = "0x5DD330", Offset = "0x5DD330", VA = "0x5DD330")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9D2C", Offset = "0x2F9D2C")]
		get
		{
			return default(short);
		}
		[Token(Token = "0x60006EC")]
		[Address(RVA = "0x5DD338", Offset = "0x5DD338", VA = "0x5DD338")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9D3C", Offset = "0x2F9D3C")]
		private set
		{
		}
	}

	[Token(Token = "0x170000CE")]
	public Transform Transform
	{
		[Token(Token = "0x60006ED")]
		[Address(RVA = "0x5DD340", Offset = "0x5DD340", VA = "0x5DD340")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9D4C", Offset = "0x2F9D4C")]
		get
		{
			return null;
		}
		[Token(Token = "0x60006EE")]
		[Address(RVA = "0x5DD348", Offset = "0x5DD348", VA = "0x5DD348")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9D5C", Offset = "0x2F9D5C")]
		private set
		{
		}
	}

	[Token(Token = "0x60006EF")]
	[Address(RVA = "0x5DD350", Offset = "0x5DD350", VA = "0x5DD350")]
	public OVRBone(OVRSkeleton.BoneId id, short parentBoneIndex, Transform trans)
	{
	}
}
[Token(Token = "0x2000110")]
public class OVRBoneCapsule
{
	[Token(Token = "0x4000521")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EEC88", Offset = "0x2EEC88")]
	private short <BoneIndex>k__BackingField;

	[Token(Token = "0x4000522")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EEC98", Offset = "0x2EEC98")]
	private Rigidbody <CapsuleRigidbody>k__BackingField;

	[Token(Token = "0x4000523")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EECA8", Offset = "0x2EECA8")]
	private CapsuleCollider <CapsuleCollider>k__BackingField;

	[Token(Token = "0x170000CF")]
	public short BoneIndex
	{
		[Token(Token = "0x60006F0")]
		[Address(RVA = "0x5DD380", Offset = "0x5DD380", VA = "0x5DD380")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9D6C", Offset = "0x2F9D6C")]
		get
		{
			return default(short);
		}
		[Token(Token = "0x60006F1")]
		[Address(RVA = "0x5DD388", Offset = "0x5DD388", VA = "0x5DD388")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9D7C", Offset = "0x2F9D7C")]
		private set
		{
		}
	}

	[Token(Token = "0x170000D0")]
	public Rigidbody CapsuleRigidbody
	{
		[Token(Token = "0x60006F2")]
		[Address(RVA = "0x5DD390", Offset = "0x5DD390", VA = "0x5DD390")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9D8C", Offset = "0x2F9D8C")]
		get
		{
			return null;
		}
		[Token(Token = "0x60006F3")]
		[Address(RVA = "0x5DD398", Offset = "0x5DD398", VA = "0x5DD398")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9D9C", Offset = "0x2F9D9C")]
		private set
		{
		}
	}

	[Token(Token = "0x170000D1")]
	public CapsuleCollider CapsuleCollider
	{
		[Token(Token = "0x60006F4")]
		[Address(RVA = "0x5DD3A0", Offset = "0x5DD3A0", VA = "0x5DD3A0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9DAC", Offset = "0x2F9DAC")]
		get
		{
			return null;
		}
		[Token(Token = "0x60006F5")]
		[Address(RVA = "0x5DD3A8", Offset = "0x5DD3A8", VA = "0x5DD3A8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9DBC", Offset = "0x2F9DBC")]
		private set
		{
		}
	}

	[Token(Token = "0x60006F6")]
	[Address(RVA = "0x5DD3B0", Offset = "0x5DD3B0", VA = "0x5DD3B0")]
	public OVRBoneCapsule(short boneIndex, Rigidbody capsuleRigidBody, CapsuleCollider capsuleCollider)
	{
	}
}
[Token(Token = "0x2000111")]
[AttributeAttribute(Name = "DefaultExecutionOrder", RVA = "0x2E6A60", Offset = "0x2E6A60")]
public class OVRSkeletonRenderer : MonoBehaviour
{
	[Token(Token = "0x20004E6")]
	public interface IOVRSkeletonRendererDataProvider
	{
		[Token(Token = "0x6001C75")]
		SkeletonRendererData GetSkeletonRendererData();
	}

	[Token(Token = "0x20004E7")]
	public struct SkeletonRendererData
	{
		[Token(Token = "0x4001D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F6534", Offset = "0x2F6534")]
		private float <RootScale>k__BackingField;

		[Token(Token = "0x4001D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F6544", Offset = "0x2F6544")]
		private bool <IsDataValid>k__BackingField;

		[Token(Token = "0x4001D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F6554", Offset = "0x2F6554")]
		private bool <IsDataHighConfidence>k__BackingField;

		[Token(Token = "0x4001D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F6564", Offset = "0x2F6564")]
		private bool <ShouldUseSystemGestureMaterial>k__BackingField;

		[Token(Token = "0x17000394")]
		public float RootScale
		{
			[Token(Token = "0x6001C76")]
			[Address(RVA = "0x3AB6FC", Offset = "0x3AB6FC", VA = "0x3AB6FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FD210", Offset = "0x2FD210")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C77")]
			[Address(RVA = "0x3AB704", Offset = "0x3AB704", VA = "0x3AB704")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FD220", Offset = "0x2FD220")]
			set
			{
			}
		}

		[Token(Token = "0x17000395")]
		public bool IsDataValid
		{
			[Token(Token = "0x6001C78")]
			[Address(RVA = "0x3AB70C", Offset = "0x3AB70C", VA = "0x3AB70C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FD230", Offset = "0x2FD230")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C79")]
			[Address(RVA = "0x3AB714", Offset = "0x3AB714", VA = "0x3AB714")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FD240", Offset = "0x2FD240")]
			set
			{
			}
		}

		[Token(Token = "0x17000396")]
		public bool IsDataHighConfidence
		{
			[Token(Token = "0x6001C7A")]
			[Address(RVA = "0x3AB71C", Offset = "0x3AB71C", VA = "0x3AB71C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FD250", Offset = "0x2FD250")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C7B")]
			[Address(RVA = "0x3AB724", Offset = "0x3AB724", VA = "0x3AB724")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FD260", Offset = "0x2FD260")]
			set
			{
			}
		}

		[Token(Token = "0x17000397")]
		public bool ShouldUseSystemGestureMaterial
		{
			[Token(Token = "0x6001C7C")]
			[Address(RVA = "0x3AB72C", Offset = "0x3AB72C", VA = "0x3AB72C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FD270", Offset = "0x2FD270")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C7D")]
			[Address(RVA = "0x3AB734", Offset = "0x3AB734", VA = "0x3AB734")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FD280", Offset = "0x2FD280")]
			set
			{
			}
		}
	}

	[Token(Token = "0x20004E8")]
	public enum ConfidenceBehavior
	{
		[Token(Token = "0x4001D56")]
		None,
		[Token(Token = "0x4001D57")]
		ToggleRenderer
	}

	[Token(Token = "0x20004E9")]
	public enum SystemGestureBehavior
	{
		[Token(Token = "0x4001D59")]
		None,
		[Token(Token = "0x4001D5A")]
		SwapMaterial
	}

	[Token(Token = "0x20004EA")]
	private class BoneVisualization
	{
		[Token(Token = "0x4001D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private GameObject BoneGO;

		[Token(Token = "0x4001D5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private Transform BoneBegin;

		[Token(Token = "0x4001D5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Transform BoneEnd;

		[Token(Token = "0x4001D5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private LineRenderer Line;

		[Token(Token = "0x4001D5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Material RenderMaterial;

		[Token(Token = "0x4001D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Material SystemGestureMaterial;

		[Token(Token = "0x6001C7E")]
		[Address(RVA = "0x8ACA50", Offset = "0x8ACA50", VA = "0x8ACA50")]
		public BoneVisualization(GameObject rootGO, Material renderMat, Material systemGestureMat, float scale, Transform begin, Transform end)
		{
		}

		[Token(Token = "0x6001C7F")]
		[Address(RVA = "0x8AD258", Offset = "0x8AD258", VA = "0x8AD258")]
		public void Update(float scale, bool shouldRender, bool shouldUseSystemGestureMaterial, ConfidenceBehavior confidenceBehavior, SystemGestureBehavior systemGestureBehavior)
		{
		}
	}

	[Token(Token = "0x20004EB")]
	private class CapsuleVisualization
	{
		[Token(Token = "0x4001D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private GameObject CapsuleGO;

		[Token(Token = "0x4001D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private OVRBoneCapsule BoneCapsule;

		[Token(Token = "0x4001D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Vector3 capsuleScale;

		[Token(Token = "0x4001D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private MeshRenderer Renderer;

		[Token(Token = "0x4001D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material RenderMaterial;

		[Token(Token = "0x4001D66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Material SystemGestureMaterial;

		[Token(Token = "0x6001C80")]
		[Address(RVA = "0x8ACD34", Offset = "0x8ACD34", VA = "0x8ACD34")]
		public CapsuleVisualization(GameObject rootGO, Material renderMat, Material systemGestureMat, float scale, OVRBoneCapsule boneCapsule)
		{
		}

		[Token(Token = "0x6001C81")]
		[Address(RVA = "0x8AD520", Offset = "0x8AD520", VA = "0x8AD520")]
		public void Update(float scale, bool shouldRender, bool shouldUseSystemGestureMaterial, ConfidenceBehavior confidenceBehavior, SystemGestureBehavior systemGestureBehavior)
		{
		}
	}

	[Token(Token = "0x4000524")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[SerializeField]
	private IOVRSkeletonRendererDataProvider _dataProvider;

	[Token(Token = "0x4000525")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	private ConfidenceBehavior _confidenceBehavior;

	[Token(Token = "0x4000526")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[SerializeField]
	private SystemGestureBehavior _systemGestureBehavior;

	[Token(Token = "0x4000527")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool _renderPhysicsCapsules;

	[Token(Token = "0x4000528")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private Material _skeletonMaterial;

	[Token(Token = "0x4000529")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Material _skeletonDefaultMaterial;

	[Token(Token = "0x400052A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private Material _capsuleMaterial;

	[Token(Token = "0x400052B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Material _capsuleDefaultMaterial;

	[Token(Token = "0x400052C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private Material _systemGestureMaterial;

	[Token(Token = "0x400052D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Material _systemGestureDefaultMaterial;

	[Token(Token = "0x400052E")]
	private const float LINE_RENDERER_WIDTH = 0.005f;

	[Token(Token = "0x400052F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private List<BoneVisualization> _boneVisualizations;

	[Token(Token = "0x4000530")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<CapsuleVisualization> _capsuleVisualizations;

	[Token(Token = "0x4000531")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private OVRSkeleton _ovrSkeleton;

	[Token(Token = "0x4000532")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GameObject _skeletonGO;

	[Token(Token = "0x4000533")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float _scale;

	[Token(Token = "0x4000534")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly Quaternion _capsuleRotationOffset;

	[Token(Token = "0x4000535")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EED28", Offset = "0x2EED28")]
	private bool <IsInitialized>k__BackingField;

	[Token(Token = "0x4000536")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EED38", Offset = "0x2EED38")]
	private bool <IsDataValid>k__BackingField;

	[Token(Token = "0x4000537")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EED48", Offset = "0x2EED48")]
	private bool <IsDataHighConfidence>k__BackingField;

	[Token(Token = "0x4000538")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4B")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EED58", Offset = "0x2EED58")]
	private bool <ShouldUseSystemGestureMaterial>k__BackingField;

	[Token(Token = "0x170000D2")]
	public bool IsInitialized
	{
		[Token(Token = "0x60006F7")]
		[Address(RVA = "0x8ABFEC", Offset = "0x8ABFEC", VA = "0x8ABFEC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9DCC", Offset = "0x2F9DCC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60006F8")]
		[Address(RVA = "0x8ABFF4", Offset = "0x8ABFF4", VA = "0x8ABFF4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9DDC", Offset = "0x2F9DDC")]
		private set
		{
		}
	}

	[Token(Token = "0x170000D3")]
	public bool IsDataValid
	{
		[Token(Token = "0x60006F9")]
		[Address(RVA = "0x8ABFFC", Offset = "0x8ABFFC", VA = "0x8ABFFC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9DEC", Offset = "0x2F9DEC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60006FA")]
		[Address(RVA = "0x8AC004", Offset = "0x8AC004", VA = "0x8AC004")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9DFC", Offset = "0x2F9DFC")]
		private set
		{
		}
	}

	[Token(Token = "0x170000D4")]
	public bool IsDataHighConfidence
	{
		[Token(Token = "0x60006FB")]
		[Address(RVA = "0x8AC00C", Offset = "0x8AC00C", VA = "0x8AC00C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9E0C", Offset = "0x2F9E0C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60006FC")]
		[Address(RVA = "0x8AC014", Offset = "0x8AC014", VA = "0x8AC014")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9E1C", Offset = "0x2F9E1C")]
		private set
		{
		}
	}

	[Token(Token = "0x170000D5")]
	public bool ShouldUseSystemGestureMaterial
	{
		[Token(Token = "0x60006FD")]
		[Address(RVA = "0x8AC01C", Offset = "0x8AC01C", VA = "0x8AC01C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9E2C", Offset = "0x2F9E2C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60006FE")]
		[Address(RVA = "0x8AC024", Offset = "0x8AC024", VA = "0x8AC024")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9E3C", Offset = "0x2F9E3C")]
		private set
		{
		}
	}

	[Token(Token = "0x60006FF")]
	[Address(RVA = "0x8AC02C", Offset = "0x8AC02C", VA = "0x8AC02C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000700")]
	[Address(RVA = "0x8AC104", Offset = "0x8AC104", VA = "0x8AC104")]
	private void Start()
	{
	}

	[Token(Token = "0x6000701")]
	[Address(RVA = "0x8AC1B4", Offset = "0x8AC1B4", VA = "0x8AC1B4")]
	private void Initialize()
	{
	}

	[Token(Token = "0x6000702")]
	[Address(RVA = "0x8ACFD0", Offset = "0x8ACFD0", VA = "0x8ACFD0")]
	public void Update()
	{
	}

	[Token(Token = "0x6000703")]
	[Address(RVA = "0x8AD9D8", Offset = "0x8AD9D8", VA = "0x8AD9D8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000704")]
	[Address(RVA = "0x8ADBBC", Offset = "0x8ADBBC", VA = "0x8ADBBC")]
	public OVRSkeletonRenderer()
	{
	}
}
[Token(Token = "0x2000112")]
public class OVRSystemPerfMetrics
{
	[Token(Token = "0x20004EC")]
	public class PerfMetrics
	{
		[Token(Token = "0x4001D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int frameCount;

		[Token(Token = "0x4001D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float frameTime;

		[Token(Token = "0x4001D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float deltaFrameTime;

		[Token(Token = "0x4001D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool appCpuTime_IsValid;

		[Token(Token = "0x4001D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float appCpuTime;

		[Token(Token = "0x4001D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool appGpuTime_IsValid;

		[Token(Token = "0x4001D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float appGpuTime;

		[Token(Token = "0x4001D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool compositorCpuTime_IsValid;

		[Token(Token = "0x4001D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float compositorCpuTime;

		[Token(Token = "0x4001D70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool compositorGpuTime_IsValid;

		[Token(Token = "0x4001D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float compositorGpuTime;

		[Token(Token = "0x4001D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool compositorDroppedFrameCount_IsValid;

		[Token(Token = "0x4001D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int compositorDroppedFrameCount;

		[Token(Token = "0x4001D74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool systemGpuUtilPercentage_IsValid;

		[Token(Token = "0x4001D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float systemGpuUtilPercentage;

		[Token(Token = "0x4001D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool systemCpuUtilAveragePercentage_IsValid;

		[Token(Token = "0x4001D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float systemCpuUtilAveragePercentage;

		[Token(Token = "0x4001D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool systemCpuUtilWorstPercentage_IsValid;

		[Token(Token = "0x4001D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float systemCpuUtilWorstPercentage;

		[Token(Token = "0x4001D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool deviceCpuClockFrequencyInMHz_IsValid;

		[Token(Token = "0x4001D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float deviceCpuClockFrequencyInMHz;

		[Token(Token = "0x4001D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public bool deviceGpuClockFrequencyInMHz_IsValid;

		[Token(Token = "0x4001D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float deviceGpuClockFrequencyInMHz;

		[Token(Token = "0x4001D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public bool deviceCpuClockLevel_IsValid;

		[Token(Token = "0x4001D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int deviceCpuClockLevel;

		[Token(Token = "0x4001D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public bool deviceGpuClockLevel_IsValid;

		[Token(Token = "0x4001D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public int deviceGpuClockLevel;

		[Token(Token = "0x6001C82")]
		[Address(RVA = "0x8AE32C", Offset = "0x8AE32C", VA = "0x8AE32C")]
		public string ToJSON()
		{
			return null;
		}

		[Token(Token = "0x6001C83")]
		[Address(RVA = "0x8AEA64", Offset = "0x8AEA64", VA = "0x8AEA64")]
		public bool LoadFromJSON(string json)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C84")]
		[Address(RVA = "0x8AE9D4", Offset = "0x8AE9D4", VA = "0x8AE9D4")]
		public PerfMetrics()
		{
		}
	}

	[Token(Token = "0x20004ED")]
	public class OVRSystemPerfMetricsTcpServer : MonoBehaviour
	{
		[Token(Token = "0x4001D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static OVRSystemPerfMetricsTcpServer singleton;

		[Token(Token = "0x4001D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private OVRNetwork.OVRNetworkTcpServer tcpServer;

		[Token(Token = "0x4001D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int listeningPort;

		[Token(Token = "0x6001C85")]
		[Address(RVA = "0x8ADCD8", Offset = "0x8ADCD8", VA = "0x8ADCD8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001C86")]
		[Address(RVA = "0x8ADE7C", Offset = "0x8ADE7C", VA = "0x8ADE7C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001C87")]
		[Address(RVA = "0x8ADF74", Offset = "0x8ADF74", VA = "0x8ADF74")]
		private void Update()
		{
		}

		[Token(Token = "0x6001C88")]
		[Address(RVA = "0x8AE030", Offset = "0x8AE030", VA = "0x8AE030")]
		private PerfMetrics GatherPerfMetrics()
		{
			return null;
		}

		[Token(Token = "0x6001C89")]
		[Address(RVA = "0x8AE9DC", Offset = "0x8AE9DC", VA = "0x8AE9DC")]
		public OVRSystemPerfMetricsTcpServer()
		{
		}
	}

	[Token(Token = "0x4000539")]
	public const int TcpListeningPort = 32419;

	[Token(Token = "0x400053A")]
	public const int PayloadTypeMetrics = 100;

	[Token(Token = "0x400053B")]
	public const int MaxBufferLength = 65536;

	[Token(Token = "0x400053C")]
	public const int MaxMessageLength = 65532;

	[Token(Token = "0x6000706")]
	[Address(RVA = "0x8ADCD0", Offset = "0x8ADCD0", VA = "0x8ADCD0")]
	public OVRSystemPerfMetrics()
	{
	}
}
[Token(Token = "0x2000113")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x2E6A74", Offset = "0x2E6A74")]
[ExecuteInEditMode]
public class OVRVignette : MonoBehaviour
{
	[Token(Token = "0x20004EE")]
	public enum MeshComplexityLevel
	{
		[Token(Token = "0x4001D86")]
		VerySimple,
		[Token(Token = "0x4001D87")]
		Simple,
		[Token(Token = "0x4001D88")]
		Normal,
		[Token(Token = "0x4001D89")]
		Detailed,
		[Token(Token = "0x4001D8A")]
		VeryDetailed
	}

	[Token(Token = "0x20004EF")]
	public enum FalloffType
	{
		[Token(Token = "0x4001D8C")]
		Linear,
		[Token(Token = "0x4001D8D")]
		Quadratic
	}

	[Token(Token = "0x400053D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly string QUADRATIC_FALLOFF;

	[Token(Token = "0x400053E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[SerializeField]
	[HideInInspector]
	private Shader VignetteShader;

	[Token(Token = "0x400053F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EED98", Offset = "0x2EED98")]
	private MeshComplexityLevel MeshComplexity;

	[Token(Token = "0x4000540")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[SerializeField]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EEDE0", Offset = "0x2EEDE0")]
	private FalloffType Falloff;

	[Token(Token = "0x4000541")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EEE40", Offset = "0x2EEE40")]
	public float VignetteFieldOfView;

	[Token(Token = "0x4000542")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EEE90", Offset = "0x2EEE90")]
	public float VignetteAspectRatio;

	[Token(Token = "0x4000543")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EEEC4", Offset = "0x2EEEC4")]
	public float VignetteFalloffDegrees;

	[Token(Token = "0x4000544")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x2EEF28", Offset = "0x2EEF28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EEF28", Offset = "0x2EEF28")]
	public Color VignetteColor;

	[Token(Token = "0x4000545")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Camera _Camera;

	[Token(Token = "0x4000546")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private MeshFilter _OpaqueMeshFilter;

	[Token(Token = "0x4000547")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private MeshFilter _TransparentMeshFilter;

	[Token(Token = "0x4000548")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private MeshRenderer _OpaqueMeshRenderer;

	[Token(Token = "0x4000549")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private MeshRenderer _TransparentMeshRenderer;

	[Token(Token = "0x400054A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Mesh _OpaqueMesh;

	[Token(Token = "0x400054B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Mesh _TransparentMesh;

	[Token(Token = "0x400054C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Material _OpaqueMaterial;

	[Token(Token = "0x400054D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private Material _TransparentMaterial;

	[Token(Token = "0x400054E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int _ShaderScaleAndOffset0Property;

	[Token(Token = "0x400054F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private int _ShaderScaleAndOffset1Property;

	[Token(Token = "0x4000550")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector4[] _TransparentScaleAndOffset0;

	[Token(Token = "0x4000551")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private Vector4[] _TransparentScaleAndOffset1;

	[Token(Token = "0x4000552")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector4[] _OpaqueScaleAndOffset0;

	[Token(Token = "0x4000553")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Vector4[] _OpaqueScaleAndOffset1;

	[Token(Token = "0x4000554")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool _OpaqueVignetteVisible;

	[Token(Token = "0x4000555")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	private bool _TransparentVignetteVisible;

	[Token(Token = "0x6000707")]
	[Address(RVA = "0x8B010C", Offset = "0x8B010C", VA = "0x8B010C")]
	private int GetTriangleCount()
	{
		return default(int);
	}

	[Token(Token = "0x6000708")]
	[Address(RVA = "0x8B012C", Offset = "0x8B012C", VA = "0x8B012C")]
	private void BuildMeshes()
	{
	}

	[Token(Token = "0x6000709")]
	[Address(RVA = "0x8B0C9C", Offset = "0x8B0C9C", VA = "0x8B0C9C")]
	private void BuildMaterials()
	{
	}

	[Token(Token = "0x600070A")]
	[Address(RVA = "0x8B1250", Offset = "0x8B1250", VA = "0x8B1250")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600070B")]
	[Address(RVA = "0x8B12EC", Offset = "0x8B12EC", VA = "0x8B12EC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600070C")]
	[Address(RVA = "0x8B13E8", Offset = "0x8B13E8", VA = "0x8B13E8")]
	private void Awake()
	{
	}

	[Token(Token = "0x600070D")]
	[Address(RVA = "0x8B18B8", Offset = "0x8B18B8", VA = "0x8B18B8")]
	private void GetTanFovAndOffsetForStereoEye(Camera.StereoscopicEye eye, out float tanFovX, out float tanFovY, out float offsetX, out float offsetY)
	{
	}

	[Token(Token = "0x600070E")]
	[Address(RVA = "0x8B1D70", Offset = "0x8B1D70", VA = "0x8B1D70")]
	private void GetTanFovAndOffsetForMonoEye(out float tanFovX, out float tanFovY, out float offsetX, out float offsetY)
	{
	}

	[Token(Token = "0x600070F")]
	[Address(RVA = "0x8B1E84", Offset = "0x8B1E84", VA = "0x8B1E84")]
	private bool VisibilityTest(float scaleX, float scaleY, float offsetX, float offsetY)
	{
		return default(bool);
	}

	[Token(Token = "0x6000710")]
	[Address(RVA = "0x8B1F94", Offset = "0x8B1F94", VA = "0x8B1F94")]
	private void Update()
	{
	}

	[Token(Token = "0x6000711")]
	[Address(RVA = "0x8B25E8", Offset = "0x8B25E8", VA = "0x8B25E8")]
	private void EnableRenderers()
	{
	}

	[Token(Token = "0x6000712")]
	[Address(RVA = "0x8B1390", Offset = "0x8B1390", VA = "0x8B1390")]
	private void DisableRenderers()
	{
	}

	[Token(Token = "0x6000713")]
	[Address(RVA = "0x8B2658", Offset = "0x8B2658", VA = "0x8B2658")]
	private void OnPreCull()
	{
	}

	[Token(Token = "0x6000714")]
	[Address(RVA = "0x8B265C", Offset = "0x8B265C", VA = "0x8B265C")]
	private void OnPostRender()
	{
	}

	[Token(Token = "0x6000715")]
	[Address(RVA = "0x8B2660", Offset = "0x8B2660", VA = "0x8B2660")]
	private void OnBeginCameraRendering(ScriptableRenderContext context, Camera camera)
	{
	}

	[Token(Token = "0x6000716")]
	[Address(RVA = "0x8B270C", Offset = "0x8B270C", VA = "0x8B270C")]
	public OVRVignette()
	{
	}
}
[Token(Token = "0x2000114")]
public class OVRWaitCursor : MonoBehaviour
{
	[Token(Token = "0x4000556")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Vector3 rotateSpeeds;

	[Token(Token = "0x6000718")]
	[Address(RVA = "0x8B284C", Offset = "0x8B284C", VA = "0x8B284C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000719")]
	[Address(RVA = "0x8B2944", Offset = "0x8B2944", VA = "0x8B2944")]
	public OVRWaitCursor()
	{
	}
}
[Token(Token = "0x2000115")]
public class CameraRig : EMUI
{
	[Token(Token = "0x4000557")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Quaternion defaultRot;

	[Token(Token = "0x4000558")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Vector3 defaultPos;

	[Token(Token = "0x4000559")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject cam;

	[Token(Token = "0x400055A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float zoomSens;

	[Token(Token = "0x400055B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float rotSens;

	[Token(Token = "0x400055C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 pos_old;

	[Token(Token = "0x400055D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GameObject pos_new;

	[Token(Token = "0x400055E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private bool m_UILockInstigator;

	[Token(Token = "0x600071A")]
	[Address(RVA = "0x623650", Offset = "0x623650", VA = "0x623650")]
	private void Start()
	{
	}

	[Token(Token = "0x600071B")]
	[Address(RVA = "0x6239C0", Offset = "0x6239C0", VA = "0x6239C0")]
	private void Update()
	{
	}

	[Token(Token = "0x600071C")]
	[Address(RVA = "0x623DF0", Offset = "0x623DF0", VA = "0x623DF0")]
	public void ResetTransform()
	{
	}

	[Token(Token = "0x600071D")]
	[Address(RVA = "0x623EAC", Offset = "0x623EAC", VA = "0x623EAC")]
	public CameraRig()
	{
	}
}
[Token(Token = "0x2000116")]
public class ColorPicker : EMUI
{
	[Token(Token = "0x400055F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Texture2D m_ColorField;

	[Token(Token = "0x4000560")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private RectTransform m_RectTransform;

	[Token(Token = "0x4000561")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Rect m_Rect;

	[Token(Token = "0x4000562")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Canvas m_Canvas;

	[Token(Token = "0x4000563")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Slider m_IntensitySlider;

	[Token(Token = "0x4000564")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool m_UILockInstigator;

	[Token(Token = "0x4000565")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private LightRig m_LightRig;

	[Token(Token = "0x4000566")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private Image m_KnobImage;

	[Token(Token = "0x4000567")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private RectTransform m_KnobTransform;

	[Token(Token = "0x600071E")]
	[Address(RVA = "0x62B664", Offset = "0x62B664", VA = "0x62B664")]
	private void Start()
	{
	}

	[Token(Token = "0x600071F")]
	[Address(RVA = "0x62BB54", Offset = "0x62BB54", VA = "0x62BB54")]
	private void Update()
	{
	}

	[Token(Token = "0x6000720")]
	[Address(RVA = "0x62C1B8", Offset = "0x62C1B8", VA = "0x62C1B8")]
	public Color GetCurrentColor()
	{
		return default(Color);
	}

	[Token(Token = "0x6000721")]
	[Address(RVA = "0x62B7E4", Offset = "0x62B7E4", VA = "0x62B7E4")]
	public void SetCurrentColor()
	{
	}

	[Token(Token = "0x6000722")]
	[Address(RVA = "0x62C288", Offset = "0x62C288", VA = "0x62C288")]
	public float GetCurrentIntensity()
	{
		return default(float);
	}

	[Token(Token = "0x6000723")]
	[Address(RVA = "0x62B9A8", Offset = "0x62B9A8", VA = "0x62B9A8")]
	public void SetCurrentIntensity()
	{
	}

	[Token(Token = "0x6000724")]
	[Address(RVA = "0x62C344", Offset = "0x62C344", VA = "0x62C344")]
	private bool CheckGUI()
	{
		return default(bool);
	}

	[Token(Token = "0x6000725")]
	[Address(RVA = "0x62C52C", Offset = "0x62C52C", VA = "0x62C52C")]
	public ColorPicker()
	{
	}
}
[Token(Token = "0x2000117")]
public class EMUI : MonoBehaviour
{
	[Token(Token = "0x4000568")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool UIClicked;

	[Token(Token = "0x4000569")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
	public static bool UIHelpOverlay;

	[Token(Token = "0x6000726")]
	[Address(RVA = "0x4DAD14", Offset = "0x4DAD14", VA = "0x4DAD14")]
	private List<RaycastResult> UIRaycast()
	{
		return null;
	}

	[Token(Token = "0x6000727")]
	[Address(RVA = "0x4DAE90", Offset = "0x4DAE90", VA = "0x4DAE90")]
	public bool CheckGUI(int mouseButtonIndex, ref bool UILockInstigator)
	{
		return default(bool);
	}

	[Token(Token = "0x6000728")]
	[Address(RVA = "0x4DB124", Offset = "0x4DB124", VA = "0x4DB124")]
	public EMUI()
	{
	}
}
[Token(Token = "0x2000118")]
public class EMUI_Animations : MonoBehaviour
{
	[Token(Token = "0x600072A")]
	[Address(RVA = "0x4DB130", Offset = "0x4DB130", VA = "0x4DB130")]
	public void ToggleFadeIn()
	{
	}

	[Token(Token = "0x600072B")]
	[Address(RVA = "0x4DB214", Offset = "0x4DB214", VA = "0x4DB214")]
	public EMUI_Animations()
	{
	}
}
[Token(Token = "0x2000119")]
public class ExamplesController : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20004F0")]
	public class Example
	{
		[Token(Token = "0x4001D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string Name;

		[Token(Token = "0x4001D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[Multiline]
		public string Description;

		[Token(Token = "0x4001D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject Prefab;

		[Token(Token = "0x6001C8B")]
		[Address(RVA = "0x4DD3F0", Offset = "0x4DD3F0", VA = "0x4DD3F0")]
		public Example()
		{
		}
	}

	[Token(Token = "0x400056A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Example[] m_Examples;

	[Token(Token = "0x400056B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GameObject m_Canvas;

	[Token(Token = "0x400056C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Slider m_ExamplesSlider;

	[Token(Token = "0x400056D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Text m_Decription;

	[Token(Token = "0x400056E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Text m_DecriptionTitle;

	[Token(Token = "0x400056F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject m_CurrentPrefab;

	[Token(Token = "0x4000570")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int m_CurrentExample;

	[Token(Token = "0x600072C")]
	[Address(RVA = "0x4DC604", Offset = "0x4DC604", VA = "0x4DC604")]
	private void Start()
	{
	}

	[Token(Token = "0x600072D")]
	[Address(RVA = "0x4DCBD4", Offset = "0x4DCBD4", VA = "0x4DCBD4")]
	public void NextExample()
	{
	}

	[Token(Token = "0x600072E")]
	[Address(RVA = "0x4DCFA8", Offset = "0x4DCFA8", VA = "0x4DCFA8")]
	public void PreviousExample()
	{
	}

	[Token(Token = "0x600072F")]
	[Address(RVA = "0x4DCF44", Offset = "0x4DCF44", VA = "0x4DCF44")]
	private void ClampExampleCount()
	{
	}

	[Token(Token = "0x6000730")]
	[Address(RVA = "0x4DD318", Offset = "0x4DD318", VA = "0x4DD318")]
	public void activateExampleFromSlider()
	{
	}

	[Token(Token = "0x6000731")]
	[Address(RVA = "0x4DC77C", Offset = "0x4DC77C", VA = "0x4DC77C")]
	public void activateExample(int index)
	{
	}

	[Token(Token = "0x6000732")]
	[Address(RVA = "0x4DD3E8", Offset = "0x4DD3E8", VA = "0x4DD3E8")]
	public ExamplesController()
	{
	}
}
[Token(Token = "0x200011A")]
public class GetName : MonoBehaviour
{
	[Token(Token = "0x4000571")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public int m_Index;

	[Token(Token = "0x6000733")]
	[Address(RVA = "0x4DFE3C", Offset = "0x4DFE3C", VA = "0x4DFE3C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000734")]
	[Address(RVA = "0x4DFFE8", Offset = "0x4DFFE8", VA = "0x4DFFE8")]
	public GetName()
	{
	}
}
[Token(Token = "0x200011B")]
public class LightRig : EMUI
{
	[Token(Token = "0x20004F1")]
	public enum LightsType
	{
		[Token(Token = "0x4001D92")]
		Directional,
		[Token(Token = "0x4001D93")]
		Point,
		[Token(Token = "0x4001D94")]
		Spot
	}

	[Token(Token = "0x4000572")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float rotSens;

	[Token(Token = "0x4000573")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float offsetSens;

	[Token(Token = "0x4000574")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public GameObject DirectionalLight;

	[Token(Token = "0x4000575")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject PointLights;

	[Token(Token = "0x4000576")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public GameObject SpotLights;

	[Token(Token = "0x4000577")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ColorPicker m_ColorPicker;

	[Token(Token = "0x4000578")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[HideInInspector]
	public Light[] m_Lights;

	[Token(Token = "0x4000579")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private LightsType curLightType;

	[Token(Token = "0x400057A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private GameObject curLightObject;

	[Token(Token = "0x400057B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool m_UILockInstigator;

	[Token(Token = "0x400057C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool m_AnimateLight;

	[Token(Token = "0x6000735")]
	[Address(RVA = "0x4EB960", Offset = "0x4EB960", VA = "0x4EB960")]
	private void Start()
	{
	}

	[Token(Token = "0x6000736")]
	[Address(RVA = "0x4EB970", Offset = "0x4EB970", VA = "0x4EB970")]
	public void SetPointLights()
	{
	}

	[Token(Token = "0x6000737")]
	[Address(RVA = "0x4EBC4C", Offset = "0x4EBC4C", VA = "0x4EBC4C")]
	public void SetSpotLights()
	{
	}

	[Token(Token = "0x6000738")]
	[Address(RVA = "0x4EB968", Offset = "0x4EB968", VA = "0x4EB968")]
	public void SetDirectionalLight()
	{
	}

	[Token(Token = "0x6000739")]
	[Address(RVA = "0x4EBC54", Offset = "0x4EBC54", VA = "0x4EBC54")]
	public void ToggleLightAnimation()
	{
	}

	[Token(Token = "0x600073A")]
	[Address(RVA = "0x4EB978", Offset = "0x4EB978", VA = "0x4EB978")]
	private void ChangeLights(LightsType lightTypes)
	{
	}

	[Token(Token = "0x600073B")]
	[Address(RVA = "0x4EBC64", Offset = "0x4EBC64", VA = "0x4EBC64")]
	private void Update()
	{
	}

	[Token(Token = "0x600073C")]
	[Address(RVA = "0x4EC318", Offset = "0x4EC318", VA = "0x4EC318")]
	public LightRig()
	{
	}
}
[Token(Token = "0x200011C")]
public class PicoDeviceQuality : MonoBehaviour
{
	[Token(Token = "0x600073D")]
	[Address(RVA = "0x8B92C0", Offset = "0x8B92C0", VA = "0x8B92C0")]
	private void Start()
	{
	}

	[Token(Token = "0x600073E")]
	[Address(RVA = "0x8B94B8", Offset = "0x8B94B8", VA = "0x8B94B8")]
	public PicoDeviceQuality()
	{
	}
}
[Token(Token = "0x200011D")]
public class AchievementSample : MonoBehaviour
{
	[Token(Token = "0x400057D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Text dataOutput;

	[Token(Token = "0x400057E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public InputField getDefinitionsByNameInputField;

	[Token(Token = "0x400057F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public InputField getProgressByNameInputField;

	[Token(Token = "0x4000580")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public InputField unLockInputField;

	[Token(Token = "0x4000581")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public InputField addCountInputField;

	[Token(Token = "0x4000582")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public InputField addFieldsInputField;

	[Token(Token = "0x600073F")]
	[Address(RVA = "0x612624", Offset = "0x612624", VA = "0x612624")]
	private void Start()
	{
	}

	[Token(Token = "0x6000740")]
	[Address(RVA = "0x6126A0", Offset = "0x6126A0", VA = "0x6126A0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000741")]
	[Address(RVA = "0x61271C", Offset = "0x61271C", VA = "0x61271C")]
	private void OnApplicationPause(bool pause)
	{
	}

	[Token(Token = "0x6000742")]
	[Address(RVA = "0x612940", Offset = "0x612940", VA = "0x612940")]
	private void Update()
	{
	}

	[Token(Token = "0x6000743")]
	[Address(RVA = "0x61294C", Offset = "0x61294C", VA = "0x61294C")]
	public void AsyncInitialize()
	{
	}

	[Token(Token = "0x6000744")]
	[Address(RVA = "0x6129F0", Offset = "0x6129F0", VA = "0x6129F0")]
	public void GetDefinitionsByName()
	{
	}

	[Token(Token = "0x6000745")]
	[Address(RVA = "0x612C60", Offset = "0x612C60", VA = "0x612C60")]
	public void GetProgressByName()
	{
	}

	[Token(Token = "0x6000746")]
	[Address(RVA = "0x612ED0", Offset = "0x612ED0", VA = "0x612ED0")]
	public void GetAllDefinitions()
	{
	}

	[Token(Token = "0x6000747")]
	[Address(RVA = "0x61303C", Offset = "0x61303C", VA = "0x61303C")]
	public void GetAllProgress()
	{
	}

	[Token(Token = "0x6000748")]
	[Address(RVA = "0x6131A8", Offset = "0x6131A8", VA = "0x6131A8")]
	public void UnLock()
	{
	}

	[Token(Token = "0x6000749")]
	[Address(RVA = "0x6133A8", Offset = "0x6133A8", VA = "0x6133A8")]
	public void AddCount()
	{
	}

	[Token(Token = "0x600074A")]
	[Address(RVA = "0x6137D4", Offset = "0x6137D4", VA = "0x6137D4")]
	public void AddFields()
	{
	}

	[Token(Token = "0x600074B")]
	[Address(RVA = "0x612878", Offset = "0x612878", VA = "0x612878")]
	private void achievementInit()
	{
	}

	[Token(Token = "0x600074C")]
	[Address(RVA = "0x612F74", Offset = "0x612F74", VA = "0x612F74")]
	private void getAchievementAllDefinition()
	{
	}

	[Token(Token = "0x600074D")]
	[Address(RVA = "0x6130E0", Offset = "0x6130E0", VA = "0x6130E0")]
	private void getAchievementAllProgress()
	{
	}

	[Token(Token = "0x600074E")]
	[Address(RVA = "0x6139A8", Offset = "0x6139A8", VA = "0x6139A8")]
	private void addFieldsAchievement(string achievementName, string fields)
	{
	}

	[Token(Token = "0x600074F")]
	[Address(RVA = "0x6136B4", Offset = "0x6136B4", VA = "0x6136B4")]
	private void addCountAchievement(string achievementName, string count)
	{
	}

	[Token(Token = "0x6000750")]
	[Address(RVA = "0x6132D8", Offset = "0x6132D8", VA = "0x6132D8")]
	private void unlockAchievement(string achievementName)
	{
	}

	[Token(Token = "0x6000751")]
	[Address(RVA = "0x612E00", Offset = "0x612E00", VA = "0x612E00")]
	private void getAchievementProgress(string[] achievementNames)
	{
	}

	[Token(Token = "0x6000752")]
	[Address(RVA = "0x612B90", Offset = "0x612B90", VA = "0x612B90")]
	private void getAchievementDefinition(string[] achievementNames)
	{
	}

	[Token(Token = "0x6000753")]
	[Address(RVA = "0x612794", Offset = "0x612794", VA = "0x612794")]
	private void printOutputLine(string newLine)
	{
	}

	[Token(Token = "0x6000754")]
	[Address(RVA = "0x613A80", Offset = "0x613A80", VA = "0x613A80")]
	private void achievementAllDefinitionCallback(Pvr_Message<Pvr_AchievementDefinitionList> msg)
	{
	}

	[Token(Token = "0x6000755")]
	[Address(RVA = "0x6145AC", Offset = "0x6145AC", VA = "0x6145AC")]
	private void achievementAllProgressCallback(Pvr_Message<Pvr_AchievementProgressList> msg)
	{
	}

	[Token(Token = "0x6000756")]
	[Address(RVA = "0x614E4C", Offset = "0x614E4C", VA = "0x614E4C")]
	private void achievementFieldsCallback(Pvr_Message msg)
	{
	}

	[Token(Token = "0x6000757")]
	[Address(RVA = "0x6151FC", Offset = "0x6151FC", VA = "0x6151FC")]
	private void achievementCountCallback(Pvr_Message msg)
	{
	}

	[Token(Token = "0x6000758")]
	[Address(RVA = "0x6155AC", Offset = "0x6155AC", VA = "0x6155AC")]
	private void achievementUnlockCallback(Pvr_Message msg)
	{
	}

	[Token(Token = "0x6000759")]
	[Address(RVA = "0x61595C", Offset = "0x61595C", VA = "0x61595C")]
	private void achievementProgressCallback(Pvr_Message<Pvr_AchievementProgressList> msg)
	{
	}

	[Token(Token = "0x600075A")]
	[Address(RVA = "0x61607C", Offset = "0x61607C", VA = "0x61607C")]
	private void achievementDefinitionCallback(Pvr_Message<Pvr_AchievementDefinitionList> msg)
	{
	}

	[Token(Token = "0x600075B")]
	[Address(RVA = "0x616838", Offset = "0x616838", VA = "0x616838")]
	private void initAchievementCallback(Pvr_Message msg)
	{
	}

	[Token(Token = "0x600075C")]
	[Address(RVA = "0x616BE8", Offset = "0x616BE8", VA = "0x616BE8")]
	private void LoginCallback(string LoginInfo)
	{
	}

	[Token(Token = "0x600075D")]
	[Address(RVA = "0x616CB8", Offset = "0x616CB8", VA = "0x616CB8")]
	public AchievementSample()
	{
	}
}
[Token(Token = "0x200011E")]
public class Pvr_Controller : MonoBehaviour
{
	[Token(Token = "0x20004F2")]
	public enum UserHandNess
	{
		[Token(Token = "0x4001D96")]
		Right,
		[Token(Token = "0x4001D97")]
		Left
	}

	[Token(Token = "0x20004F3")]
	public enum GazeType
	{
		[Token(Token = "0x4001D99")]
		Never,
		[Token(Token = "0x4001D9A")]
		DuringMotion,
		[Token(Token = "0x4001D9B")]
		Always
	}

	[Token(Token = "0x20004F4")]
	public enum ControllerAxis
	{
		[Token(Token = "0x4001D9D")]
		Controller,
		[Token(Token = "0x4001D9E")]
		Wrist,
		[Token(Token = "0x4001D9F")]
		Elbow,
		[Token(Token = "0x4001DA0")]
		Shoulder
	}

	[Token(Token = "0x4000583")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public GameObject controller0;

	[Token(Token = "0x4000584")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GameObject controller1;

	[Token(Token = "0x4000585")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static UserHandNess handness;

	[Token(Token = "0x4000586")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public ControllerAxis Axis;

	[Token(Token = "0x4000587")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GazeType Gazetype;

	[Token(Token = "0x4000588")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2EEFE0", Offset = "0x2EEFE0")]
	public float ElbowHeight;

	[Token(Token = "0x4000589")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2EEFFC", Offset = "0x2EEFFC")]
	public float ElbowDepth;

	[Token(Token = "0x400058A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2EF018", Offset = "0x2EF018")]
	public float PointerTiltAngle;

	[Token(Token = "0x400058B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float mouseX;

	[Token(Token = "0x400058C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float mouseY;

	[Token(Token = "0x400058D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float mouseZ;

	[Token(Token = "0x400058E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3[] inputDirection;

	[Token(Token = "0x400058F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EF034", Offset = "0x2EF034")]
	private static Vector3 <pointerPosition>k__BackingField;

	[Token(Token = "0x4000590")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EF044", Offset = "0x2EF044")]
	private static Quaternion <pointerRotation>k__BackingField;

	[Token(Token = "0x4000591")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EF054", Offset = "0x2EF054")]
	private static Vector3 <elbowPosition>k__BackingField;

	[Token(Token = "0x4000592")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EF064", Offset = "0x2EF064")]
	private static Quaternion <elbowRotation>k__BackingField;

	[Token(Token = "0x4000593")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EF074", Offset = "0x2EF074")]
	private static Vector3 <wristPosition>k__BackingField;

	[Token(Token = "0x4000594")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EF084", Offset = "0x2EF084")]
	private static Quaternion <wristRotation>k__BackingField;

	[Token(Token = "0x4000595")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EF094", Offset = "0x2EF094")]
	private static Vector3 <shoulderPosition>k__BackingField;

	[Token(Token = "0x4000596")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EF0A4", Offset = "0x2EF0A4")]
	private static Quaternion <shoulderRotation>k__BackingField;

	[Token(Token = "0x4000597")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EF0B4", Offset = "0x2EF0B4")]
	private static Vector3 <originOffsetL>k__BackingField;

	[Token(Token = "0x4000598")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EF0C4", Offset = "0x2EF0C4")]
	private static Vector3 <originOffsetR>k__BackingField;

	[Token(Token = "0x170000D6")]
	public static Vector3 pointerPosition
	{
		[Token(Token = "0x6000771")]
		[Address(RVA = "0x8BDB08", Offset = "0x8BDB08", VA = "0x8BDB08")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9E4C", Offset = "0x2F9E4C")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x6000772")]
		[Address(RVA = "0x8BDB78", Offset = "0x8BDB78", VA = "0x8BDB78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9E5C", Offset = "0x2F9E5C")]
		set
		{
		}
	}

	[Token(Token = "0x170000D7")]
	public static Quaternion pointerRotation
	{
		[Token(Token = "0x6000773")]
		[Address(RVA = "0x8BDBEC", Offset = "0x8BDBEC", VA = "0x8BDBEC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9E6C", Offset = "0x2F9E6C")]
		get
		{
			return default(Quaternion);
		}
		[Token(Token = "0x6000774")]
		[Address(RVA = "0x8BDC58", Offset = "0x8BDC58", VA = "0x8BDC58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9E7C", Offset = "0x2F9E7C")]
		set
		{
		}
	}

	[Token(Token = "0x170000D8")]
	public static Vector3 elbowPosition
	{
		[Token(Token = "0x6000775")]
		[Address(RVA = "0x8BDCD4", Offset = "0x8BDCD4", VA = "0x8BDCD4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9E8C", Offset = "0x2F9E8C")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x6000776")]
		[Address(RVA = "0x8BDD44", Offset = "0x8BDD44", VA = "0x8BDD44")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9E9C", Offset = "0x2F9E9C")]
		set
		{
		}
	}

	[Token(Token = "0x170000D9")]
	public static Quaternion elbowRotation
	{
		[Token(Token = "0x6000777")]
		[Address(RVA = "0x8BDDB8", Offset = "0x8BDDB8", VA = "0x8BDDB8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9EAC", Offset = "0x2F9EAC")]
		get
		{
			return default(Quaternion);
		}
		[Token(Token = "0x6000778")]
		[Address(RVA = "0x8BDE24", Offset = "0x8BDE24", VA = "0x8BDE24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9EBC", Offset = "0x2F9EBC")]
		set
		{
		}
	}

	[Token(Token = "0x170000DA")]
	public static Vector3 wristPosition
	{
		[Token(Token = "0x6000779")]
		[Address(RVA = "0x8BDEA0", Offset = "0x8BDEA0", VA = "0x8BDEA0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9ECC", Offset = "0x2F9ECC")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x600077A")]
		[Address(RVA = "0x8BDF10", Offset = "0x8BDF10", VA = "0x8BDF10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9EDC", Offset = "0x2F9EDC")]
		set
		{
		}
	}

	[Token(Token = "0x170000DB")]
	public static Quaternion wristRotation
	{
		[Token(Token = "0x600077B")]
		[Address(RVA = "0x8BDF84", Offset = "0x8BDF84", VA = "0x8BDF84")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9EEC", Offset = "0x2F9EEC")]
		get
		{
			return default(Quaternion);
		}
		[Token(Token = "0x600077C")]
		[Address(RVA = "0x8BDFF0", Offset = "0x8BDFF0", VA = "0x8BDFF0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9EFC", Offset = "0x2F9EFC")]
		set
		{
		}
	}

	[Token(Token = "0x170000DC")]
	public static Vector3 shoulderPosition
	{
		[Token(Token = "0x600077D")]
		[Address(RVA = "0x8BE06C", Offset = "0x8BE06C", VA = "0x8BE06C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9F0C", Offset = "0x2F9F0C")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x600077E")]
		[Address(RVA = "0x8BE0DC", Offset = "0x8BE0DC", VA = "0x8BE0DC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9F1C", Offset = "0x2F9F1C")]
		set
		{
		}
	}

	[Token(Token = "0x170000DD")]
	public static Quaternion shoulderRotation
	{
		[Token(Token = "0x600077F")]
		[Address(RVA = "0x8BE150", Offset = "0x8BE150", VA = "0x8BE150")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9F2C", Offset = "0x2F9F2C")]
		get
		{
			return default(Quaternion);
		}
		[Token(Token = "0x6000780")]
		[Address(RVA = "0x8BE1BC", Offset = "0x8BE1BC", VA = "0x8BE1BC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9F3C", Offset = "0x2F9F3C")]
		set
		{
		}
	}

	[Token(Token = "0x170000DE")]
	public static Vector3 originOffsetL
	{
		[Token(Token = "0x6000781")]
		[Address(RVA = "0x8BE238", Offset = "0x8BE238", VA = "0x8BE238")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9F4C", Offset = "0x2F9F4C")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x6000782")]
		[Address(RVA = "0x8BE2A8", Offset = "0x8BE2A8", VA = "0x8BE2A8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9F5C", Offset = "0x2F9F5C")]
		set
		{
		}
	}

	[Token(Token = "0x170000DF")]
	public static Vector3 originOffsetR
	{
		[Token(Token = "0x6000783")]
		[Address(RVA = "0x8BE31C", Offset = "0x8BE31C", VA = "0x8BE31C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9F6C", Offset = "0x2F9F6C")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x6000784")]
		[Address(RVA = "0x8BE38C", Offset = "0x8BE38C", VA = "0x8BE38C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F9F7C", Offset = "0x2F9F7C")]
		set
		{
		}
	}

	[Token(Token = "0x600075E")]
	[Address(RVA = "0x8BAB34", Offset = "0x8BAB34", VA = "0x8BAB34")]
	private void Awake()
	{
	}

	[Token(Token = "0x600075F")]
	[Address(RVA = "0x8BACBC", Offset = "0x8BACBC", VA = "0x8BACBC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000760")]
	[Address(RVA = "0x8BAD3C", Offset = "0x8BAD3C", VA = "0x8BAD3C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000761")]
	[Address(RVA = "0x8BAEC4", Offset = "0x8BAEC4", VA = "0x8BAEC4")]
	private void MainControllerChanged(string index)
	{
	}

	[Token(Token = "0x6000762")]
	[Address(RVA = "0x8BAFA4", Offset = "0x8BAFA4", VA = "0x8BAFA4")]
	private void HandnessChanged(string index)
	{
	}

	[Token(Token = "0x6000763")]
	[Address(RVA = "0x8BAFA8", Offset = "0x8BAFA8", VA = "0x8BAFA8")]
	private void ServiceStartSuccess()
	{
	}

	[Token(Token = "0x6000764")]
	[Address(RVA = "0x8BAEC8", Offset = "0x8BAEC8", VA = "0x8BAEC8")]
	private void RefreshHandness()
	{
	}

	[Token(Token = "0x6000765")]
	[Address(RVA = "0x8BB020", Offset = "0x8BB020", VA = "0x8BB020")]
	private void OnApplicationPause(bool pause)
	{
	}

	[Token(Token = "0x6000766")]
	[Address(RVA = "0x8BB248", Offset = "0x8BB248", VA = "0x8BB248")]
	private void ShowController()
	{
	}

	[Token(Token = "0x6000767")]
	[Address(RVA = "0x8BB42C", Offset = "0x8BB42C", VA = "0x8BB42C")]
	private void CheckControllerState(string data)
	{
	}

	[Token(Token = "0x6000768")]
	[Address(RVA = "0x8BB528", Offset = "0x8BB528", VA = "0x8BB528")]
	private void Update()
	{
	}

	[Token(Token = "0x6000769")]
	[Address(RVA = "0x8BAFAC", Offset = "0x8BAFAC", VA = "0x8BAFAC")]
	public static void ChangeHandNess()
	{
	}

	[Token(Token = "0x600076A")]
	[Address(RVA = "0x8BBA48", Offset = "0x8BBA48", VA = "0x8BBA48")]
	private void DoUpdateControler0()
	{
	}

	[Token(Token = "0x600076B")]
	[Address(RVA = "0x8BBAE8", Offset = "0x8BBAE8", VA = "0x8BBAE8")]
	private void DoUpdateControler1()
	{
	}

	[Token(Token = "0x600076C")]
	[Address(RVA = "0x8BBB90", Offset = "0x8BBB90", VA = "0x8BBB90")]
	private void UpdateControlloerRay(bool update0 = true, bool update1 = true)
	{
	}

	[Token(Token = "0x600076D")]
	[Address(RVA = "0x8BD8F0", Offset = "0x8BD8F0", VA = "0x8BD8F0")]
	private Quaternion UpdateSimulatedFrameParams()
	{
		return default(Quaternion);
	}

	[Token(Token = "0x600076E")]
	[Address(RVA = "0x8BBD74", Offset = "0x8BBD74", VA = "0x8BBD74")]
	private void SetArmParaToSo(int hand, int gazeType, float elbowHeight, float elbowDepth, float pointerTiltAngle)
	{
	}

	[Token(Token = "0x600076F")]
	[Address(RVA = "0x8BBDB0", Offset = "0x8BBDB0", VA = "0x8BBDB0")]
	private void CalcArmModelfromSo(int hand)
	{
	}

	[Token(Token = "0x6000770")]
	[Address(RVA = "0x8BC578", Offset = "0x8BC578", VA = "0x8BC578")]
	public void UpdateControllerDataSO(int hand)
	{
	}

	[Token(Token = "0x6000785")]
	[Address(RVA = "0x8BE400", Offset = "0x8BE400", VA = "0x8BE400")]
	public Pvr_Controller()
	{
	}
}
[Token(Token = "0x200011F")]
public class Pvr_ControllerDemo : MonoBehaviour
{
	[Token(Token = "0x4000599")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public GameObject HeadSetController;

	[Token(Token = "0x400059A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GameObject controller0;

	[Token(Token = "0x400059B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public GameObject controller1;

	[Token(Token = "0x400059C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject cube;

	[Token(Token = "0x400059D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Ray ray;

	[Token(Token = "0x400059E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private GameObject currentController;

	[Token(Token = "0x400059F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform lastHit;

	[Token(Token = "0x40005A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Transform currentHit;

	[Token(Token = "0x40005A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Material normat;

	[Token(Token = "0x40005A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private Material gazemat;

	[Token(Token = "0x40005A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Material clickmat;

	[Token(Token = "0x40005A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool noClick;

	[Token(Token = "0x40005A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GameObject referenceObj;

	[Token(Token = "0x40005A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float rayDefaultLength;

	[Token(Token = "0x40005A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool isHasController;

	[Token(Token = "0x40005A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	private bool headcontrolmode;

	[Token(Token = "0x40005A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private RaycastHit hit;

	[Token(Token = "0x40005AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private GameObject rayLine;

	[Token(Token = "0x40005AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private GameObject dot;

	[Token(Token = "0x40005AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Transform dragObj;

	[Token(Token = "0x40005AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float disX;

	[Token(Token = "0x40005AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private float disY;

	[Token(Token = "0x40005AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private float disZ;

	[Token(Token = "0x6000786")]
	[Address(RVA = "0x8BE480", Offset = "0x8BE480", VA = "0x8BE480")]
	private void Start()
	{
	}

	[Token(Token = "0x6000787")]
	[Address(RVA = "0x8BE688", Offset = "0x8BE688", VA = "0x8BE688")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000788")]
	[Address(RVA = "0x8BE7D8", Offset = "0x8BE7D8", VA = "0x8BE7D8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000789")]
	[Address(RVA = "0x8C11E4", Offset = "0x8C11E4", VA = "0x8C11E4")]
	private void ServiceStartSuccess()
	{
	}

	[Token(Token = "0x600078A")]
	[Address(RVA = "0x8C1288", Offset = "0x8C1288", VA = "0x8C1288")]
	private void ControllerStateListener(string data)
	{
	}

	[Token(Token = "0x600078B")]
	[Address(RVA = "0x8C132C", Offset = "0x8C132C", VA = "0x8C132C")]
	private void CheckControllerStateForGoblin(string state)
	{
	}

	[Token(Token = "0x600078C")]
	[Address(RVA = "0x8C13E4", Offset = "0x8C13E4", VA = "0x8C13E4")]
	public void SwitchControlMode()
	{
	}

	[Token(Token = "0x600078D")]
	[Address(RVA = "0x8C13E8", Offset = "0x8C13E8", VA = "0x8C13E8")]
	public Pvr_ControllerDemo()
	{
	}
}
[Token(Token = "0x2000120")]
public class Pvr_ControllerEventsExamples : MonoBehaviour
{
	[Token(Token = "0x600078E")]
	[Address(RVA = "0x8C13FC", Offset = "0x8C13FC", VA = "0x8C13FC")]
	private void Start()
	{
	}

	[Token(Token = "0x600078F")]
	[Address(RVA = "0x8C16EC", Offset = "0x8C16EC", VA = "0x8C16EC")]
	private void UIPointerElementEnter(object sender, UIPointerEventArgs e)
	{
	}

	[Token(Token = "0x6000790")]
	[Address(RVA = "0x8C17C0", Offset = "0x8C17C0", VA = "0x8C17C0")]
	private void UIPointerElementExit(object sender, UIPointerEventArgs e)
	{
	}

	[Token(Token = "0x6000791")]
	[Address(RVA = "0x8C1894", Offset = "0x8C1894", VA = "0x8C1894")]
	private void UIPointerElementClick(object sender, UIPointerEventArgs e)
	{
	}

	[Token(Token = "0x6000792")]
	[Address(RVA = "0x8C1968", Offset = "0x8C1968", VA = "0x8C1968")]
	private void UIPointerElementDragStart(object sender, UIPointerEventArgs e)
	{
	}

	[Token(Token = "0x6000793")]
	[Address(RVA = "0x8C1A3C", Offset = "0x8C1A3C", VA = "0x8C1A3C")]
	private void UIPointerElementDragEnd(object sender, UIPointerEventArgs e)
	{
	}

	[Token(Token = "0x6000794")]
	[Address(RVA = "0x8C1B10", Offset = "0x8C1B10", VA = "0x8C1B10")]
	public Pvr_ControllerEventsExamples()
	{
	}
}
[Token(Token = "0x2000121")]
public class Pvr_ControllerInit : MonoBehaviour
{
	[Token(Token = "0x20004F5")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EAC1C", Offset = "0x2EAC1C")]
	private sealed class <RefreshController>d__31 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private int <>1__state;

		[Token(Token = "0x4001DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private object <>2__current;

		[Token(Token = "0x4001DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int id;

		[Token(Token = "0x4001DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Pvr_ControllerInit <>4__this;

		[Token(Token = "0x17000398")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001C8F")]
			[Address(RVA = "0x8C44C8", Offset = "0x8C44C8", VA = "0x8C44C8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000399")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001C91")]
			[Address(RVA = "0x8C4558", Offset = "0x8C4558", VA = "0x8C4558", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001C8C")]
		[Address(RVA = "0x8C2DAC", Offset = "0x8C2DAC", VA = "0x8C2DAC")]
		[DebuggerHidden]
		public <RefreshController>d__31(int <>1__state)
		{
		}

		[Token(Token = "0x6001C8D")]
		[Address(RVA = "0x8C3EEC", Offset = "0x8C3EEC", VA = "0x8C3EEC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001C8E")]
		[Address(RVA = "0x8C3EF0", Offset = "0x8C3EF0", VA = "0x8C3EF0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C90")]
		[Address(RVA = "0x8C44D0", Offset = "0x8C44D0", VA = "0x8C44D0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40005B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private ControllerVariety Variety;

	[Token(Token = "0x40005B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool isCustomModel;

	[Token(Token = "0x40005B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[SerializeField]
	private GameObject goblin;

	[Token(Token = "0x40005B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject g2;

	[Token(Token = "0x40005B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private GameObject neo2L;

	[Token(Token = "0x40005B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject neo2R;

	[Token(Token = "0x40005B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private GameObject neo3L;

	[Token(Token = "0x40005B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject neo3R;

	[Token(Token = "0x40005B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private Material standardMat;

	[Token(Token = "0x40005B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Material unlitMat;

	[Token(Token = "0x40005BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int controllerType;

	[Token(Token = "0x40005BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public bool loadModelSuccess;

	[Token(Token = "0x40005BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int systemOrUnity;

	[Token(Token = "0x40005BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private JsonData curControllerData;

	[Token(Token = "0x40005BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private string modelName;

	[Token(Token = "0x40005BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private string texFormat;

	[Token(Token = "0x40005C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private string prePath;

	[Token(Token = "0x40005C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private string modelFilePath;

	[Token(Token = "0x40005C2")]
	private const string goblinTexbasePath = "Controller/controller1/controller1";

	[Token(Token = "0x40005C3")]
	private const string g2TexbasePath = "Controller/controller3/controller3";

	[Token(Token = "0x40005C4")]
	private const string neo2TexbasePath = "Controller/controller4/controller4";

	[Token(Token = "0x40005C5")]
	private const string neo3TexbasePath = "Controller/controller5/controller5";

	[Token(Token = "0x6000795")]
	[Address(RVA = "0x8C1B18", Offset = "0x8C1B18", VA = "0x8C1B18")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000796")]
	[Address(RVA = "0x8C1D1C", Offset = "0x8C1D1C", VA = "0x8C1D1C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000797")]
	[Address(RVA = "0x8C1E60", Offset = "0x8C1E60", VA = "0x8C1E60")]
	private void OnApplicationPause(bool pause)
	{
	}

	[Token(Token = "0x6000798")]
	[Address(RVA = "0x8C2220", Offset = "0x8C2220", VA = "0x8C2220")]
	private void ServiceStartSuccess()
	{
	}

	[Token(Token = "0x6000799")]
	[Address(RVA = "0x8C2510", Offset = "0x8C2510", VA = "0x8C2510")]
	private void LoadResFromJson()
	{
	}

	[Token(Token = "0x600079A")]
	[Address(RVA = "0x8C2794", Offset = "0x8C2794", VA = "0x8C2794")]
	private void CheckControllerStateForGoblin(string state)
	{
	}

	[Token(Token = "0x600079B")]
	[Address(RVA = "0x8C2C24", Offset = "0x8C2C24", VA = "0x8C2C24")]
	private void CheckControllerStateOfAbility(string data)
	{
	}

	[Token(Token = "0x600079C")]
	[Address(RVA = "0x8C1E6C", Offset = "0x8C1E6C", VA = "0x8C1E6C")]
	private void DestroyLocalController()
	{
	}

	[Token(Token = "0x600079D")]
	[Address(RVA = "0x8C287C", Offset = "0x8C287C", VA = "0x8C287C")]
	private void DestroySysController()
	{
	}

	[Token(Token = "0x600079E")]
	[Address(RVA = "0x8C26EC", Offset = "0x8C26EC", VA = "0x8C26EC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2F9F8C", Offset = "0x2F9F8C")]
	private IEnumerator RefreshController(int id)
	{
		return null;
	}

	[Token(Token = "0x600079F")]
	[Address(RVA = "0x8C2DCC", Offset = "0x8C2DCC", VA = "0x8C2DCC")]
	private void LoadControllerFromPrefab()
	{
	}

	[Token(Token = "0x60007A0")]
	[Address(RVA = "0x8C35B0", Offset = "0x8C35B0", VA = "0x8C35B0")]
	private void LoadControllerFromSystem(int id)
	{
	}

	[Token(Token = "0x60007A1")]
	[Address(RVA = "0x8C3164", Offset = "0x8C3164", VA = "0x8C3164")]
	private void LoadTexture(Pvr_ControllerVisual visual, string controllerName, bool fromRes)
	{
	}

	[Token(Token = "0x60007A2")]
	[Address(RVA = "0x8C3B9C", Offset = "0x8C3B9C", VA = "0x8C3B9C")]
	private Texture2D LoadOneTexture(string filepath, bool fromRes)
	{
		return null;
	}

	[Token(Token = "0x60007A3")]
	[Address(RVA = "0x8C3CD4", Offset = "0x8C3CD4", VA = "0x8C3CD4")]
	private byte[] ReadPNG(string path)
	{
		return null;
	}

	[Token(Token = "0x60007A4")]
	[Address(RVA = "0x8C3E5C", Offset = "0x8C3E5C", VA = "0x8C3E5C")]
	public Pvr_ControllerInit()
	{
	}
}
[Token(Token = "0x2000122")]
public class Pvr_ControllerLink
{
	[Token(Token = "0x40005C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public AndroidJavaClass javaHummingbirdClass;

	[Token(Token = "0x40005C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public AndroidJavaClass javaPico2ReceiverClass;

	[Token(Token = "0x40005C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public AndroidJavaClass javaserviceClass;

	[Token(Token = "0x40005C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public AndroidJavaClass javavractivityclass;

	[Token(Token = "0x40005CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AndroidJavaClass javaCVClass;

	[Token(Token = "0x40005CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public AndroidJavaObject activity;

	[Token(Token = "0x40005CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string gameobjname;

	[Token(Token = "0x40005CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool picoDevice;

	[Token(Token = "0x40005CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string hummingBirdMac;

	[Token(Token = "0x40005CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int hummingBirdRSSI;

	[Token(Token = "0x40005D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool goblinserviceStarted;

	[Token(Token = "0x40005D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool neoserviceStarted;

	[Token(Token = "0x40005D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	public bool controller0Connected;

	[Token(Token = "0x40005D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
	public bool controller1Connected;

	[Token(Token = "0x40005D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int mainHandID;

	[Token(Token = "0x40005D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Pvr_Controller.UserHandNess handness;

	[Token(Token = "0x40005D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public int controllerType;

	[Token(Token = "0x40005D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ControllerHand Controller0;

	[Token(Token = "0x40005D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public ControllerHand Controller1;

	[Token(Token = "0x40005D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int platFormType;

	[Token(Token = "0x40005DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public int trackingmode;

	[Token(Token = "0x40005DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public int systemProp;

	[Token(Token = "0x40005DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public int enablehand6dofbyhead;

	[Token(Token = "0x40005DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool switchHomeKey;

	[Token(Token = "0x40005DE")]
	private const float SWITCH_METER = 1000f;

	[Token(Token = "0x40005DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private int iPhoneHMDModeEnabled;

	[Token(Token = "0x40005E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float[] hbPoseData;

	[Token(Token = "0x40005E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float[] sensorData;

	[Token(Token = "0x40005E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int[] keyData;

	[Token(Token = "0x40005E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private int[] neo3TouchValue;

	[Token(Token = "0x40005E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float[] fixedState;

	[Token(Token = "0x40005E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float[] neoposeData;

	[Token(Token = "0x40005E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private int[] goblinKeyArray;

	[Token(Token = "0x40005E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private int[] neoKeyArray;

	[Token(Token = "0x40005E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private int[] neotriggerV;

	[Token(Token = "0x40005E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float[] velocity;

	[Token(Token = "0x40005EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float[] angularVelocity;

	[Token(Token = "0x40005EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private float[] angularAcce;

	[Token(Token = "0x40005EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float[] acceData;

	[Token(Token = "0x40005ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float[] predictData;

	[Token(Token = "0x60007A5")]
	[Address(RVA = "0x8C4560", Offset = "0x8C4560", VA = "0x8C4560")]
	public Pvr_ControllerLink(string name)
	{
	}

	[Token(Token = "0x60007A6")]
	[Address(RVA = "0x8C4A40", Offset = "0x8C4A40", VA = "0x8C4A40")]
	private void StartHummingBirdService()
	{
	}

	[Token(Token = "0x60007A7")]
	[Address(RVA = "0x8C568C", Offset = "0x8C568C", VA = "0x8C568C")]
	public bool IsServiceExisted()
	{
		return default(bool);
	}

	[Token(Token = "0x60007A8")]
	[Address(RVA = "0x8C5394", Offset = "0x8C5394", VA = "0x8C5394")]
	public void SetGameObjectToJar(string name)
	{
	}

	[Token(Token = "0x60007A9")]
	[Address(RVA = "0x8C54DC", Offset = "0x8C54DC", VA = "0x8C54DC")]
	public void BindService()
	{
	}

	[Token(Token = "0x60007AA")]
	[Address(RVA = "0x8C5880", Offset = "0x8C5880", VA = "0x8C5880")]
	public void UnBindService()
	{
	}

	[Token(Token = "0x60007AB")]
	[Address(RVA = "0x8C5A30", Offset = "0x8C5A30", VA = "0x8C5A30")]
	public void StopReceiver()
	{
	}

	[Token(Token = "0x60007AC")]
	[Address(RVA = "0x8C5B64", Offset = "0x8C5B64", VA = "0x8C5B64")]
	public void StartReceiver()
	{
	}

	[Token(Token = "0x60007AD")]
	[Address(RVA = "0x8C5CEC", Offset = "0x8C5CEC", VA = "0x8C5CEC")]
	public int getHandness()
	{
		return default(int);
	}

	[Token(Token = "0x60007AE")]
	[Address(RVA = "0x8C5F4C", Offset = "0x8C5F4C", VA = "0x8C5F4C")]
	public void setHandness(int hand)
	{
	}

	[Token(Token = "0x60007AF")]
	[Address(RVA = "0x8C60E0", Offset = "0x8C60E0", VA = "0x8C60E0")]
	public void StartScan()
	{
	}

	[Token(Token = "0x60007B0")]
	[Address(RVA = "0x8C6238", Offset = "0x8C6238", VA = "0x8C6238")]
	public void StopScan()
	{
	}

	[Token(Token = "0x60007B1")]
	[Address(RVA = "0x8C51E4", Offset = "0x8C51E4", VA = "0x8C51E4")]
	public int GetSysproc()
	{
		return default(int);
	}

	[Token(Token = "0x60007B2")]
	[Address(RVA = "0x8C639C", Offset = "0x8C639C", VA = "0x8C639C")]
	public void ResetController(int num)
	{
	}

	[Token(Token = "0x60007B3")]
	[Address(RVA = "0x8C6608", Offset = "0x8C6608", VA = "0x8C6608")]
	public void ConnectBLE()
	{
	}

	[Token(Token = "0x60007B4")]
	[Address(RVA = "0x8C6774", Offset = "0x8C6774", VA = "0x8C6774")]
	public void DisConnectBLE()
	{
	}

	[Token(Token = "0x60007B5")]
	[Address(RVA = "0x8C68CC", Offset = "0x8C68CC", VA = "0x8C68CC")]
	public bool StartUpgrade()
	{
		return default(bool);
	}

	[Token(Token = "0x60007B6")]
	[Address(RVA = "0x8C6A50", Offset = "0x8C6A50", VA = "0x8C6A50")]
	public void setBinPath(string path, bool isasset)
	{
	}

	[Token(Token = "0x60007B7")]
	[Address(RVA = "0x8C6C28", Offset = "0x8C6C28", VA = "0x8C6C28")]
	public string GetBLEImageType()
	{
		return null;
	}

	[Token(Token = "0x60007B8")]
	[Address(RVA = "0x8C6DD4", Offset = "0x8C6DD4", VA = "0x8C6DD4")]
	public long GetBLEVersion()
	{
		return default(long);
	}

	[Token(Token = "0x60007B9")]
	[Address(RVA = "0x8C6F88", Offset = "0x8C6F88", VA = "0x8C6F88")]
	public string GetFileImageType()
	{
		return null;
	}

	[Token(Token = "0x60007BA")]
	[Address(RVA = "0x8C7134", Offset = "0x8C7134", VA = "0x8C7134")]
	public long GetFileVersion()
	{
		return default(long);
	}

	[Token(Token = "0x60007BB")]
	[Address(RVA = "0x8C72E8", Offset = "0x8C72E8", VA = "0x8C72E8")]
	public int GetControllerConnectionState(int num)
	{
		return default(int);
	}

	[Token(Token = "0x60007BC")]
	[Address(RVA = "0x8C778C", Offset = "0x8C778C", VA = "0x8C778C")]
	public void RebackToLauncher()
	{
	}

	[Token(Token = "0x60007BD")]
	[Address(RVA = "0x8C79C4", Offset = "0x8C79C4", VA = "0x8C79C4")]
	public void TurnUpVolume()
	{
	}

	[Token(Token = "0x60007BE")]
	[Address(RVA = "0x8C7BB4", Offset = "0x8C7BB4", VA = "0x8C7BB4")]
	public void TurnDownVolume()
	{
	}

	[Token(Token = "0x60007BF")]
	[Address(RVA = "0x8C7DA4", Offset = "0x8C7DA4", VA = "0x8C7DA4")]
	public float[] GetHBControllerPoseData()
	{
		return null;
	}

	[Token(Token = "0x60007C0")]
	[Address(RVA = "0x8C83D8", Offset = "0x8C83D8", VA = "0x8C83D8")]
	public float[] GetControllerSensorData()
	{
		return null;
	}

	[Token(Token = "0x60007C1")]
	[Address(RVA = "0x8C8604", Offset = "0x8C8604", VA = "0x8C8604")]
	public int[] GetControllerKeyData()
	{
		return null;
	}

	[Token(Token = "0x60007C2")]
	[Address(RVA = "0x8C873C", Offset = "0x8C873C", VA = "0x8C873C")]
	public int[] GetNeo3TouchData(int hand)
	{
		return null;
	}

	[Token(Token = "0x60007C3")]
	[Address(RVA = "0x8C94E8", Offset = "0x8C94E8", VA = "0x8C94E8")]
	public int GetNeo3GripValue(int hand)
	{
		return default(int);
	}

	[Token(Token = "0x60007C4")]
	[Address(RVA = "0x8C96E0", Offset = "0x8C96E0", VA = "0x8C96E0")]
	public float[] GetControllerFixedSensorState(int hand)
	{
		return null;
	}

	[Token(Token = "0x60007C5")]
	[Address(RVA = "0x8CA12C", Offset = "0x8CA12C", VA = "0x8CA12C")]
	public float[] GetCvControllerPoseData(int hand)
	{
		return null;
	}

	[Token(Token = "0x60007C6")]
	[Address(RVA = "0x8CABDC", Offset = "0x8CABDC", VA = "0x8CABDC")]
	public int[] GetHBControllerKeyData()
	{
		return null;
	}

	[Token(Token = "0x60007C7")]
	[Address(RVA = "0x8CD02C", Offset = "0x8CD02C", VA = "0x8CD02C")]
	public int GetHBKeyValue()
	{
		return default(int);
	}

	[Token(Token = "0x60007C8")]
	[Address(RVA = "0x8CD228", Offset = "0x8CD228", VA = "0x8CD228")]
	public int[] GetCvControllerKeyData(int hand)
	{
		return null;
	}

	[Token(Token = "0x60007C9")]
	[Address(RVA = "0x8D05D4", Offset = "0x8D05D4", VA = "0x8D05D4")]
	public int GetCVTriggerValue(int hand)
	{
		return default(int);
	}

	[Token(Token = "0x60007CA")]
	[Address(RVA = "0x8D0828", Offset = "0x8D0828", VA = "0x8D0828")]
	public void AutoConnectHbController(int scanTimeMs)
	{
	}

	[Token(Token = "0x60007CB")]
	[Address(RVA = "0x8D0A04", Offset = "0x8D0A04", VA = "0x8D0A04")]
	public void StartControllerThread(int headSensorState, int handSensorState)
	{
	}

	[Token(Token = "0x60007CC")]
	[Address(RVA = "0x8D0C38", Offset = "0x8D0C38", VA = "0x8D0C38")]
	public void StopControllerThread(int headSensorState, int handSensorState)
	{
	}

	[Token(Token = "0x60007CD")]
	[Address(RVA = "0x8D0E6C", Offset = "0x8D0E6C", VA = "0x8D0E6C")]
	public void SetUnityVersionToJar(string version)
	{
	}

	[Token(Token = "0x60007CE")]
	[Address(RVA = "0x8D0FC4", Offset = "0x8D0FC4", VA = "0x8D0FC4")]
	public Vector3 GetVelocity(int num)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60007CF")]
	[Address(RVA = "0x8D15EC", Offset = "0x8D15EC", VA = "0x8D15EC")]
	public Vector3 GetAngularVelocity(int num)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60007D0")]
	[Address(RVA = "0x8D1EA8", Offset = "0x8D1EA8", VA = "0x8D1EA8")]
	public Vector3 GetAngularAcceleration(int num)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60007D1")]
	[Address(RVA = "0x8D25A0", Offset = "0x8D25A0", VA = "0x8D25A0")]
	public Vector3 GetAcceleration(int num)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60007D2")]
	[Address(RVA = "0x8D2CD4", Offset = "0x8D2CD4", VA = "0x8D2CD4")]
	public string GetConnectedDeviceMac()
	{
		return null;
	}

	[Token(Token = "0x60007D3")]
	[Address(RVA = "0x8D2E7C", Offset = "0x8D2E7C", VA = "0x8D2E7C")]
	public void VibrateNeo2Controller(float strength, int time, int hand)
	{
	}

	[Token(Token = "0x60007D4")]
	[Address(RVA = "0x8D32C0", Offset = "0x8D32C0", VA = "0x8D32C0")]
	public void VibrateController(float strength, int time, int hand)
	{
	}

	[Token(Token = "0x60007D5")]
	[Address(RVA = "0x8D3704", Offset = "0x8D3704", VA = "0x8D3704")]
	public int GetMainControllerIndex()
	{
		return default(int);
	}

	[Token(Token = "0x60007D6")]
	[Address(RVA = "0x8D38C0", Offset = "0x8D38C0", VA = "0x8D38C0")]
	public void SetMainController(int index)
	{
	}

	[Token(Token = "0x60007D7")]
	[Address(RVA = "0x8D3A54", Offset = "0x8D3A54", VA = "0x8D3A54")]
	public void ResetHeadSensorForController()
	{
	}

	[Token(Token = "0x60007D8")]
	[Address(RVA = "0x8D3BB4", Offset = "0x8D3BB4", VA = "0x8D3BB4")]
	public void GetDeviceVersion(int deviceType)
	{
	}

	[Token(Token = "0x60007D9")]
	[Address(RVA = "0x8D3D48", Offset = "0x8D3D48", VA = "0x8D3D48")]
	public void GetControllerSnCode(int controllerSerialNum)
	{
	}

	[Token(Token = "0x60007DA")]
	[Address(RVA = "0x8D3EDC", Offset = "0x8D3EDC", VA = "0x8D3EDC")]
	public void SetControllerUnbind(int controllerSerialNum)
	{
	}

	[Token(Token = "0x60007DB")]
	[Address(RVA = "0x8D4070", Offset = "0x8D4070", VA = "0x8D4070")]
	public void SetStationRestart()
	{
	}

	[Token(Token = "0x60007DC")]
	[Address(RVA = "0x8D41D0", Offset = "0x8D41D0", VA = "0x8D41D0")]
	public void StartStationOtaUpdate()
	{
	}

	[Token(Token = "0x60007DD")]
	[Address(RVA = "0x8D4330", Offset = "0x8D4330", VA = "0x8D4330")]
	public void StartControllerOtaUpdate(int mode, int controllerSerialNum)
	{
	}

	[Token(Token = "0x60007DE")]
	[Address(RVA = "0x8D4550", Offset = "0x8D4550", VA = "0x8D4550")]
	public void EnterPairMode(int controllerSerialNum)
	{
	}

	[Token(Token = "0x60007DF")]
	[Address(RVA = "0x8D46E4", Offset = "0x8D46E4", VA = "0x8D46E4")]
	public void SetControllerShutdown(int controllerSerialNum)
	{
	}

	[Token(Token = "0x60007E0")]
	[Address(RVA = "0x8D4878", Offset = "0x8D4878", VA = "0x8D4878")]
	public int GetStationPairState()
	{
		return default(int);
	}

	[Token(Token = "0x60007E1")]
	[Address(RVA = "0x8D4A34", Offset = "0x8D4A34", VA = "0x8D4A34")]
	public int GetStationOtaUpdateProgress()
	{
		return default(int);
	}

	[Token(Token = "0x60007E2")]
	[Address(RVA = "0x8D4BF0", Offset = "0x8D4BF0", VA = "0x8D4BF0")]
	public int GetControllerOtaUpdateProgress()
	{
		return default(int);
	}

	[Token(Token = "0x60007E3")]
	[Address(RVA = "0x8D4DAC", Offset = "0x8D4DAC", VA = "0x8D4DAC")]
	public void GetControllerVersionAndSN(int controllerSerialNum)
	{
	}

	[Token(Token = "0x60007E4")]
	[Address(RVA = "0x8D4F40", Offset = "0x8D4F40", VA = "0x8D4F40")]
	public void GetControllerUniqueID()
	{
	}

	[Token(Token = "0x60007E5")]
	[Address(RVA = "0x8D50A0", Offset = "0x8D50A0", VA = "0x8D50A0")]
	public void InterruptStationPairMode()
	{
	}

	[Token(Token = "0x60007E6")]
	[Address(RVA = "0x8D5200", Offset = "0x8D5200", VA = "0x8D5200")]
	public int GetControllerAbility(int controllerSerialNum)
	{
		return default(int);
	}

	[Token(Token = "0x60007E7")]
	[Address(RVA = "0x8D53B8", Offset = "0x8D53B8", VA = "0x8D53B8")]
	public void SwitchHomeKey(bool state)
	{
	}

	[Token(Token = "0x60007E8")]
	[Address(RVA = "0x8D5478", Offset = "0x8D5478", VA = "0x8D5478")]
	public void SetBootReconnect()
	{
	}

	[Token(Token = "0x60007E9")]
	[Address(RVA = "0x8D55CC", Offset = "0x8D55CC", VA = "0x8D55CC")]
	public int GetTemperature()
	{
		return default(int);
	}

	[Token(Token = "0x60007EA")]
	[Address(RVA = "0x8D577C", Offset = "0x8D577C", VA = "0x8D577C")]
	public int GetDeviceType()
	{
		return default(int);
	}

	[Token(Token = "0x60007EB")]
	[Address(RVA = "0x8D592C", Offset = "0x8D592C", VA = "0x8D592C")]
	public int GetControllerType()
	{
		return default(int);
	}

	[Token(Token = "0x60007EC")]
	[Address(RVA = "0x8D5A68", Offset = "0x8D5A68", VA = "0x8D5A68")]
	public string GetHummingBird2SN()
	{
		return null;
	}

	[Token(Token = "0x60007ED")]
	[Address(RVA = "0x8D5C04", Offset = "0x8D5C04", VA = "0x8D5C04")]
	public string GetControllerVersion()
	{
		return null;
	}

	[Token(Token = "0x60007EE")]
	[Address(RVA = "0x8D5DA0", Offset = "0x8D5DA0", VA = "0x8D5DA0")]
	public bool IsEnbleTrigger()
	{
		return default(bool);
	}

	[Token(Token = "0x60007EF")]
	[Address(RVA = "0x8D5F40", Offset = "0x8D5F40", VA = "0x8D5F40")]
	public void StartCV2PairingMode(int devicetype)
	{
	}

	[Token(Token = "0x60007F0")]
	[Address(RVA = "0x8D60D4", Offset = "0x8D60D4", VA = "0x8D60D4")]
	public void StopCV2PairingMode(int devicetype)
	{
	}

	[Token(Token = "0x60007F1")]
	[Address(RVA = "0x8D6268", Offset = "0x8D6268", VA = "0x8D6268")]
	public int GetControllerBindingState(int id)
	{
		return default(int);
	}

	[Token(Token = "0x60007F2")]
	[Address(RVA = "0x8D6414", Offset = "0x8D6414", VA = "0x8D6414")]
	public void setIsEnbleHomeKey(bool state)
	{
	}

	[Token(Token = "0x60007F3")]
	[Address(RVA = "0x8D659C", Offset = "0x8D659C", VA = "0x8D659C")]
	public int getControllerSensorStatus(int id)
	{
		return default(int);
	}

	[Token(Token = "0x60007F4")]
	[Address(RVA = "0x8D6748", Offset = "0x8D6748", VA = "0x8D6748")]
	public float[] GetControllerPredictSensorData(int controllerID, float predictTime)
	{
		return null;
	}
}
[Token(Token = "0x2000123")]
public class Pvr_ControllerManager : MonoBehaviour
{
	[Token(Token = "0x20004F6")]
	public delegate void PvrServiceStartSuccess();

	[Token(Token = "0x20004F7")]
	public delegate void PvrControllerStateChanged(string data);

	[Token(Token = "0x20004F8")]
	public delegate void ChangeMainControllerCallBack(string index);

	[Token(Token = "0x20004F9")]
	public delegate void ChangeHandNessCallBack(string index);

	[Token(Token = "0x20004FA")]
	public delegate void SetHbServiceBindState();

	[Token(Token = "0x20004FB")]
	public delegate void ControllerThreadStartedCallback();

	[Token(Token = "0x20004FC")]
	public delegate void SetControllerServiceBindState();

	[Token(Token = "0x20004FD")]
	public delegate void ControllerStatusChange(string isconnect);

	[Token(Token = "0x20004FE")]
	public delegate void SetControllerAbility(string data);

	[Token(Token = "0x20004FF")]
	public delegate void SetControllerStateChanged(string data);

	[Token(Token = "0x2000500")]
	public delegate void SetHbControllerMac(string mac);

	[Token(Token = "0x2000501")]
	public delegate void ControllerDeviceVersionCallback(string data);

	[Token(Token = "0x2000502")]
	public delegate void ControllerSnCodeCallback(string data);

	[Token(Token = "0x2000503")]
	public delegate void ControllerUnbindCallback(string status);

	[Token(Token = "0x2000504")]
	public delegate void ControllerStationStatusCallback(string status);

	[Token(Token = "0x2000505")]
	public delegate void ControllerStationBusyCallback(string status);

	[Token(Token = "0x2000506")]
	public delegate void ControllerOtaStartCodeCallback(string data);

	[Token(Token = "0x2000507")]
	public delegate void ControllerDeviceVersionAndSNCallback(string data);

	[Token(Token = "0x2000508")]
	public delegate void ControllerUniqueIDCallback(string data);

	[Token(Token = "0x2000509")]
	public delegate void ControllerCombinedKeyUnbindCallback(string data);

	[Token(Token = "0x40005EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Pvr_ControllerManager instance;

	[Token(Token = "0x40005EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static Pvr_ControllerLink controllerlink;

	[Token(Token = "0x40005F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private float cTime;

	[Token(Token = "0x40005F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool stopConnect;

	[Token(Token = "0x40005F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Text toast;

	[Token(Token = "0x40005F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool controllerServicestate;

	[Token(Token = "0x40005F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float disConnectTime;

	[Token(Token = "0x40005F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool LengthAdaptiveRay;

	[Token(Token = "0x40005F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float[] sensorData;

	[Token(Token = "0x40005F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int[] keyData;

	[Token(Token = "0x40005F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float[] g2SensorData;

	[Token(Token = "0x40005F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int[] g2KeyData;

	[Token(Token = "0x40005FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int keyOffset;

	[Token(Token = "0x40005FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int rotControllerMode;

	[Token(Token = "0x170000E0")]
	public static Pvr_ControllerManager Instance
	{
		[Token(Token = "0x60007F5")]
		[Address(RVA = "0x9994F8", Offset = "0x9994F8", VA = "0x9994F8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x14000018")]
	public static event PvrServiceStartSuccess PvrServiceStartSuccessEvent
	{
		[Token(Token = "0x60007F6")]
		[Address(RVA = "0x999844", Offset = "0x999844", VA = "0x999844")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA004", Offset = "0x2FA004")]
		add
		{
		}
		[Token(Token = "0x60007F7")]
		[Address(RVA = "0x999980", Offset = "0x999980", VA = "0x999980")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA014", Offset = "0x2FA014")]
		remove
		{
		}
	}

	[Token(Token = "0x14000019")]
	public static event PvrControllerStateChanged PvrControllerStateChangedEvent
	{
		[Token(Token = "0x60007F8")]
		[Address(RVA = "0x999ABC", Offset = "0x999ABC", VA = "0x999ABC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA024", Offset = "0x2FA024")]
		add
		{
		}
		[Token(Token = "0x60007F9")]
		[Address(RVA = "0x999BF8", Offset = "0x999BF8", VA = "0x999BF8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA034", Offset = "0x2FA034")]
		remove
		{
		}
	}

	[Token(Token = "0x1400001A")]
	public static event ChangeMainControllerCallBack ChangeMainControllerCallBackEvent
	{
		[Token(Token = "0x60007FA")]
		[Address(RVA = "0x999D34", Offset = "0x999D34", VA = "0x999D34")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA044", Offset = "0x2FA044")]
		add
		{
		}
		[Token(Token = "0x60007FB")]
		[Address(RVA = "0x999E70", Offset = "0x999E70", VA = "0x999E70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA054", Offset = "0x2FA054")]
		remove
		{
		}
	}

	[Token(Token = "0x1400001B")]
	public static event ChangeHandNessCallBack ChangeHandNessCallBackEvent
	{
		[Token(Token = "0x60007FC")]
		[Address(RVA = "0x999FAC", Offset = "0x999FAC", VA = "0x999FAC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA064", Offset = "0x2FA064")]
		add
		{
		}
		[Token(Token = "0x60007FD")]
		[Address(RVA = "0x99A0E8", Offset = "0x99A0E8", VA = "0x99A0E8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA074", Offset = "0x2FA074")]
		remove
		{
		}
	}

	[Token(Token = "0x1400001C")]
	public static event SetHbServiceBindState SetHbServiceBindStateEvent
	{
		[Token(Token = "0x60007FE")]
		[Address(RVA = "0x99A224", Offset = "0x99A224", VA = "0x99A224")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA084", Offset = "0x2FA084")]
		add
		{
		}
		[Token(Token = "0x60007FF")]
		[Address(RVA = "0x99A360", Offset = "0x99A360", VA = "0x99A360")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA094", Offset = "0x2FA094")]
		remove
		{
		}
	}

	[Token(Token = "0x1400001D")]
	public static event ControllerThreadStartedCallback ControllerThreadStartedCallbackEvent
	{
		[Token(Token = "0x6000800")]
		[Address(RVA = "0x99A49C", Offset = "0x99A49C", VA = "0x99A49C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA0A4", Offset = "0x2FA0A4")]
		add
		{
		}
		[Token(Token = "0x6000801")]
		[Address(RVA = "0x99A5D8", Offset = "0x99A5D8", VA = "0x99A5D8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA0B4", Offset = "0x2FA0B4")]
		remove
		{
		}
	}

	[Token(Token = "0x1400001E")]
	public static event SetControllerServiceBindState SetControllerServiceBindStateEvent
	{
		[Token(Token = "0x6000802")]
		[Address(RVA = "0x99A714", Offset = "0x99A714", VA = "0x99A714")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA0C4", Offset = "0x2FA0C4")]
		add
		{
		}
		[Token(Token = "0x6000803")]
		[Address(RVA = "0x99A850", Offset = "0x99A850", VA = "0x99A850")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA0D4", Offset = "0x2FA0D4")]
		remove
		{
		}
	}

	[Token(Token = "0x1400001F")]
	public static event ControllerStatusChange ControllerStatusChangeEvent
	{
		[Token(Token = "0x6000804")]
		[Address(RVA = "0x99A98C", Offset = "0x99A98C", VA = "0x99A98C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA0E4", Offset = "0x2FA0E4")]
		add
		{
		}
		[Token(Token = "0x6000805")]
		[Address(RVA = "0x99AAC8", Offset = "0x99AAC8", VA = "0x99AAC8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA0F4", Offset = "0x2FA0F4")]
		remove
		{
		}
	}

	[Token(Token = "0x14000020")]
	public static event SetControllerAbility SetControllerAbilityEvent
	{
		[Token(Token = "0x6000806")]
		[Address(RVA = "0x99AC04", Offset = "0x99AC04", VA = "0x99AC04")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA104", Offset = "0x2FA104")]
		add
		{
		}
		[Token(Token = "0x6000807")]
		[Address(RVA = "0x99AD40", Offset = "0x99AD40", VA = "0x99AD40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA114", Offset = "0x2FA114")]
		remove
		{
		}
	}

	[Token(Token = "0x14000021")]
	public static event SetControllerStateChanged SetControllerStateChangedEvent
	{
		[Token(Token = "0x6000808")]
		[Address(RVA = "0x99AE7C", Offset = "0x99AE7C", VA = "0x99AE7C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA124", Offset = "0x2FA124")]
		add
		{
		}
		[Token(Token = "0x6000809")]
		[Address(RVA = "0x99AFB8", Offset = "0x99AFB8", VA = "0x99AFB8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA134", Offset = "0x2FA134")]
		remove
		{
		}
	}

	[Token(Token = "0x14000022")]
	public static event SetHbControllerMac SetHbControllerMacEvent
	{
		[Token(Token = "0x600080A")]
		[Address(RVA = "0x99B0F4", Offset = "0x99B0F4", VA = "0x99B0F4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA144", Offset = "0x2FA144")]
		add
		{
		}
		[Token(Token = "0x600080B")]
		[Address(RVA = "0x99B230", Offset = "0x99B230", VA = "0x99B230")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA154", Offset = "0x2FA154")]
		remove
		{
		}
	}

	[Token(Token = "0x14000023")]
	public static event ControllerDeviceVersionCallback ControllerDeviceVersionCallbackEvent
	{
		[Token(Token = "0x600080C")]
		[Address(RVA = "0x99B36C", Offset = "0x99B36C", VA = "0x99B36C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA164", Offset = "0x2FA164")]
		add
		{
		}
		[Token(Token = "0x600080D")]
		[Address(RVA = "0x99B4A8", Offset = "0x99B4A8", VA = "0x99B4A8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA174", Offset = "0x2FA174")]
		remove
		{
		}
	}

	[Token(Token = "0x14000024")]
	public static event ControllerSnCodeCallback ControllerSnCodeCallbackEvent
	{
		[Token(Token = "0x600080E")]
		[Address(RVA = "0x99B5E4", Offset = "0x99B5E4", VA = "0x99B5E4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA184", Offset = "0x2FA184")]
		add
		{
		}
		[Token(Token = "0x600080F")]
		[Address(RVA = "0x99B720", Offset = "0x99B720", VA = "0x99B720")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA194", Offset = "0x2FA194")]
		remove
		{
		}
	}

	[Token(Token = "0x14000025")]
	public static event ControllerUnbindCallback ControllerUnbindCallbackEvent
	{
		[Token(Token = "0x6000810")]
		[Address(RVA = "0x99B85C", Offset = "0x99B85C", VA = "0x99B85C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA1A4", Offset = "0x2FA1A4")]
		add
		{
		}
		[Token(Token = "0x6000811")]
		[Address(RVA = "0x99B998", Offset = "0x99B998", VA = "0x99B998")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA1B4", Offset = "0x2FA1B4")]
		remove
		{
		}
	}

	[Token(Token = "0x14000026")]
	public static event ControllerStationStatusCallback ControllerStationStatusCallbackEvent
	{
		[Token(Token = "0x6000812")]
		[Address(RVA = "0x99BAD4", Offset = "0x99BAD4", VA = "0x99BAD4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA1C4", Offset = "0x2FA1C4")]
		add
		{
		}
		[Token(Token = "0x6000813")]
		[Address(RVA = "0x99BC10", Offset = "0x99BC10", VA = "0x99BC10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA1D4", Offset = "0x2FA1D4")]
		remove
		{
		}
	}

	[Token(Token = "0x14000027")]
	public static event ControllerStationBusyCallback ControllerStationBusyCallbackEvent
	{
		[Token(Token = "0x6000814")]
		[Address(RVA = "0x99BD4C", Offset = "0x99BD4C", VA = "0x99BD4C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA1E4", Offset = "0x2FA1E4")]
		add
		{
		}
		[Token(Token = "0x6000815")]
		[Address(RVA = "0x99BE88", Offset = "0x99BE88", VA = "0x99BE88")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA1F4", Offset = "0x2FA1F4")]
		remove
		{
		}
	}

	[Token(Token = "0x14000028")]
	public static event ControllerOtaStartCodeCallback ControllerOtaStartCodeCallbackEvent
	{
		[Token(Token = "0x6000816")]
		[Address(RVA = "0x99BFC4", Offset = "0x99BFC4", VA = "0x99BFC4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA204", Offset = "0x2FA204")]
		add
		{
		}
		[Token(Token = "0x6000817")]
		[Address(RVA = "0x99C100", Offset = "0x99C100", VA = "0x99C100")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA214", Offset = "0x2FA214")]
		remove
		{
		}
	}

	[Token(Token = "0x14000029")]
	public static event ControllerDeviceVersionAndSNCallback ControllerDeviceVersionAndSNCallbackEvent
	{
		[Token(Token = "0x6000818")]
		[Address(RVA = "0x99C23C", Offset = "0x99C23C", VA = "0x99C23C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA224", Offset = "0x2FA224")]
		add
		{
		}
		[Token(Token = "0x6000819")]
		[Address(RVA = "0x99C378", Offset = "0x99C378", VA = "0x99C378")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA234", Offset = "0x2FA234")]
		remove
		{
		}
	}

	[Token(Token = "0x1400002A")]
	public static event ControllerUniqueIDCallback ControllerUniqueIDCallbackEvent
	{
		[Token(Token = "0x600081A")]
		[Address(RVA = "0x99C4B4", Offset = "0x99C4B4", VA = "0x99C4B4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA244", Offset = "0x2FA244")]
		add
		{
		}
		[Token(Token = "0x600081B")]
		[Address(RVA = "0x99C5F0", Offset = "0x99C5F0", VA = "0x99C5F0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA254", Offset = "0x2FA254")]
		remove
		{
		}
	}

	[Token(Token = "0x1400002B")]
	public static event ControllerCombinedKeyUnbindCallback ControllerCombinedKeyUnbindCallbackEvent
	{
		[Token(Token = "0x600081C")]
		[Address(RVA = "0x99C72C", Offset = "0x99C72C", VA = "0x99C72C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA264", Offset = "0x2FA264")]
		add
		{
		}
		[Token(Token = "0x600081D")]
		[Address(RVA = "0x99C868", Offset = "0x99C868", VA = "0x99C868")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA274", Offset = "0x2FA274")]
		remove
		{
		}
	}

	[Token(Token = "0x600081E")]
	[Address(RVA = "0x99C9A4", Offset = "0x99C9A4", VA = "0x99C9A4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600081F")]
	[Address(RVA = "0x99CDE4", Offset = "0x99CDE4", VA = "0x99CDE4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000820")]
	[Address(RVA = "0x99CEC4", Offset = "0x99CEC4", VA = "0x99CEC4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000821")]
	[Address(RVA = "0x9A07EC", Offset = "0x9A07EC", VA = "0x9A07EC")]
	private void OnApplicationPause(bool pause)
	{
	}

	[Token(Token = "0x6000822")]
	[Address(RVA = "0x9A11C8", Offset = "0x9A11C8", VA = "0x9A11C8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000823")]
	[Address(RVA = "0x9A12E0", Offset = "0x9A12E0", VA = "0x9A12E0")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x6000824")]
	[Address(RVA = "0x9A14D4", Offset = "0x9A14D4", VA = "0x9A14D4")]
	public Vector3 GetAngularVelocity(int num)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000825")]
	[Address(RVA = "0x9A1604", Offset = "0x9A1604", VA = "0x9A1604")]
	public Vector3 GetAcceleration(int num)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000826")]
	[Address(RVA = "0x99CCFC", Offset = "0x99CCFC", VA = "0x99CCFC")]
	public void BindService()
	{
	}

	[Token(Token = "0x6000827")]
	[Address(RVA = "0x9A1734", Offset = "0x9A1734", VA = "0x9A1734")]
	public void StartScan()
	{
	}

	[Token(Token = "0x6000828")]
	[Address(RVA = "0x9A181C", Offset = "0x9A181C", VA = "0x9A181C")]
	public void StopScan()
	{
	}

	[Token(Token = "0x6000829")]
	[Address(RVA = "0x9A1904", Offset = "0x9A1904", VA = "0x9A1904")]
	public void ResetController(int num)
	{
	}

	[Token(Token = "0x600082A")]
	[Address(RVA = "0x9A0ED4", Offset = "0x9A0ED4", VA = "0x9A0ED4")]
	public static int GetControllerConnectionState(int num)
	{
		return default(int);
	}

	[Token(Token = "0x600082B")]
	[Address(RVA = "0x9A19F4", Offset = "0x9A19F4", VA = "0x9A19F4")]
	public void ConnectBLE()
	{
	}

	[Token(Token = "0x600082C")]
	[Address(RVA = "0x9A1ADC", Offset = "0x9A1ADC", VA = "0x9A1ADC")]
	public void DisConnectBLE()
	{
	}

	[Token(Token = "0x600082D")]
	[Address(RVA = "0x9A1BC4", Offset = "0x9A1BC4", VA = "0x9A1BC4")]
	public void SetBinPath(string path, bool isAsset)
	{
	}

	[Token(Token = "0x600082E")]
	[Address(RVA = "0x9A1CBC", Offset = "0x9A1CBC", VA = "0x9A1CBC")]
	public void StartUpgrade()
	{
	}

	[Token(Token = "0x600082F")]
	[Address(RVA = "0x9A1DA4", Offset = "0x9A1DA4", VA = "0x9A1DA4")]
	public static string GetBLEImageType()
	{
		return null;
	}

	[Token(Token = "0x6000830")]
	[Address(RVA = "0x9A1E4C", Offset = "0x9A1E4C", VA = "0x9A1E4C")]
	public static long GetBLEVersion()
	{
		return default(long);
	}

	[Token(Token = "0x6000831")]
	[Address(RVA = "0x9A1EF4", Offset = "0x9A1EF4", VA = "0x9A1EF4")]
	public static string GetFileImageType()
	{
		return null;
	}

	[Token(Token = "0x6000832")]
	[Address(RVA = "0x9A1F9C", Offset = "0x9A1F9C", VA = "0x9A1F9C")]
	public static long GetFileVersion()
	{
		return default(long);
	}

	[Token(Token = "0x6000833")]
	[Address(RVA = "0x9A2044", Offset = "0x9A2044", VA = "0x9A2044")]
	public static void AutoConnectHbController(int scans)
	{
	}

	[Token(Token = "0x6000834")]
	[Address(RVA = "0x9A2134", Offset = "0x9A2134", VA = "0x9A2134")]
	public static string GetConnectedDeviceMac()
	{
		return null;
	}

	[Token(Token = "0x6000835")]
	[Address(RVA = "0x9A2234", Offset = "0x9A2234", VA = "0x9A2234")]
	public void setHbControllerMac(string mac)
	{
	}

	[Token(Token = "0x6000836")]
	[Address(RVA = "0x9A2880", Offset = "0x9A2880", VA = "0x9A2880")]
	public int GetControllerRSSI()
	{
		return default(int);
	}

	[Token(Token = "0x6000837")]
	[Address(RVA = "0x9A2920", Offset = "0x9A2920", VA = "0x9A2920")]
	public void setHbServiceBindState(string state)
	{
	}

	[Token(Token = "0x6000838")]
	[Address(RVA = "0x9A2F6C", Offset = "0x9A2F6C", VA = "0x9A2F6C")]
	public void setControllerServiceBindState(string state)
	{
	}

	[Token(Token = "0x6000839")]
	[Address(RVA = "0x9A3570", Offset = "0x9A3570", VA = "0x9A3570")]
	public void setHbControllerConnectState(string isconnect)
	{
	}

	[Token(Token = "0x600083A")]
	[Address(RVA = "0x9A4190", Offset = "0x9A4190", VA = "0x9A4190")]
	public void setControllerStateChanged(string state)
	{
	}

	[Token(Token = "0x600083B")]
	[Address(RVA = "0x9A4EE0", Offset = "0x9A4EE0", VA = "0x9A4EE0")]
	public void setControllerAbility(string data)
	{
	}

	[Token(Token = "0x600083C")]
	[Address(RVA = "0x9A5424", Offset = "0x9A5424", VA = "0x9A5424")]
	public void controllerThreadStartedCallback()
	{
	}

	[Token(Token = "0x600083D")]
	[Address(RVA = "0x9A5D58", Offset = "0x9A5D58", VA = "0x9A5D58")]
	public void controllerDeviceVersionCallback(string data)
	{
	}

	[Token(Token = "0x600083E")]
	[Address(RVA = "0x9A629C", Offset = "0x9A629C", VA = "0x9A629C")]
	public void controllerSnCodeCallback(string data)
	{
	}

	[Token(Token = "0x600083F")]
	[Address(RVA = "0x9A67E0", Offset = "0x9A67E0", VA = "0x9A67E0")]
	public void controllerUnbindCallback(string status)
	{
	}

	[Token(Token = "0x6000840")]
	[Address(RVA = "0x9A6D24", Offset = "0x9A6D24", VA = "0x9A6D24")]
	public void controllerStationStatusCallback(string status)
	{
	}

	[Token(Token = "0x6000841")]
	[Address(RVA = "0x9A7268", Offset = "0x9A7268", VA = "0x9A7268")]
	public void controllerStationBusyCallback(string status)
	{
	}

	[Token(Token = "0x6000842")]
	[Address(RVA = "0x9A77AC", Offset = "0x9A77AC", VA = "0x9A77AC")]
	public void controllerOTAStartCodeCallback(string data)
	{
	}

	[Token(Token = "0x6000843")]
	[Address(RVA = "0x9A7CF0", Offset = "0x9A7CF0", VA = "0x9A7CF0")]
	public void controllerDeviceVersionAndSNCallback(string data)
	{
	}

	[Token(Token = "0x6000844")]
	[Address(RVA = "0x9A8234", Offset = "0x9A8234", VA = "0x9A8234")]
	public void controllerUniqueIDCallback(string data)
	{
	}

	[Token(Token = "0x6000845")]
	[Address(RVA = "0x9A8778", Offset = "0x9A8778", VA = "0x9A8778")]
	public void controllerCombinedKeyUnbindCallback(string controllerSerialNum)
	{
	}

	[Token(Token = "0x6000846")]
	[Address(RVA = "0x9A8C64", Offset = "0x9A8C64", VA = "0x9A8C64")]
	public void setupdateFailed()
	{
	}

	[Token(Token = "0x6000847")]
	[Address(RVA = "0x9A8C68", Offset = "0x9A8C68", VA = "0x9A8C68")]
	public void setupdateSuccess()
	{
	}

	[Token(Token = "0x6000848")]
	[Address(RVA = "0x9A8C6C", Offset = "0x9A8C6C", VA = "0x9A8C6C")]
	public void setupdateProgress(string progress)
	{
	}

	[Token(Token = "0x6000849")]
	[Address(RVA = "0x9A8C70", Offset = "0x9A8C70", VA = "0x9A8C70")]
	public void setHbAutoConnectState(string state)
	{
	}

	[Token(Token = "0x600084A")]
	[Address(RVA = "0x9A90F8", Offset = "0x9A90F8", VA = "0x9A90F8")]
	public void callbackControllerServiceState(string state)
	{
	}

	[Token(Token = "0x600084B")]
	[Address(RVA = "0x9A9280", Offset = "0x9A9280", VA = "0x9A9280")]
	public void changeMainControllerCallback(string index)
	{
	}

	[Token(Token = "0x600084C")]
	[Address(RVA = "0x9A982C", Offset = "0x9A982C", VA = "0x9A982C")]
	public void changeHandnessCallback(string index)
	{
	}

	[Token(Token = "0x600084D")]
	[Address(RVA = "0x9A8DF4", Offset = "0x9A8DF4", VA = "0x9A8DF4")]
	private void ShowToast(int type)
	{
	}

	[Token(Token = "0x600084E")]
	[Address(RVA = "0x9A9DD8", Offset = "0x9A9DD8", VA = "0x9A9DD8")]
	private void HideToast()
	{
	}

	[Token(Token = "0x600084F")]
	[Address(RVA = "0x9A9EA4", Offset = "0x9A9EA4", VA = "0x9A9EA4")]
	private void CheckControllerService()
	{
	}

	[Token(Token = "0x6000850")]
	[Address(RVA = "0x9A55F4", Offset = "0x9A55F4", VA = "0x9A55F4")]
	private void GetCVControllerState()
	{
	}

	[Token(Token = "0x6000851")]
	[Address(RVA = "0x99FCCC", Offset = "0x99FCCC", VA = "0x99FCCC")]
	private void SetSystemKey()
	{
	}

	[Token(Token = "0x6000852")]
	[Address(RVA = "0x99F668", Offset = "0x99F668", VA = "0x99F668")]
	private void TransformData(ControllerHand hand, int handId, int[] data)
	{
	}

	[Token(Token = "0x6000853")]
	[Address(RVA = "0x9A9EB8", Offset = "0x9A9EB8", VA = "0x9A9EB8")]
	private void TransSingleKey(PvrControllerKey key, int beginIndex, int[] data)
	{
	}

	[Token(Token = "0x6000854")]
	[Address(RVA = "0x9AA060", Offset = "0x9AA060", VA = "0x9AA060")]
	private void TransformTouchData(ControllerHand hand, int handId, int[] data)
	{
	}

	[Token(Token = "0x6000855")]
	[Address(RVA = "0x9AA1A0", Offset = "0x9AA1A0", VA = "0x9AA1A0")]
	private void TransSingleTouchValue(PvrControllerKey key, int beginIndex, int[] data)
	{
	}

	[Token(Token = "0x6000856")]
	[Address(RVA = "0x9AA2E0", Offset = "0x9AA2E0", VA = "0x9AA2E0")]
	public Pvr_ControllerManager()
	{
	}
}
[Token(Token = "0x2000124")]
public class Pvr_ControllerModuleInit : MonoBehaviour
{
	[Token(Token = "0x200050A")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EAC2C", Offset = "0x2EAC2C")]
	private sealed class <ShowOrHideRay>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private int <>1__state;

		[Token(Token = "0x4001DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private object <>2__current;

		[Token(Token = "0x4001DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Pvr_ControllerModuleInit <>4__this;

		[Token(Token = "0x4001DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int id;

		[Token(Token = "0x1700039A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001CE5")]
			[Address(RVA = "0x9AB5D8", Offset = "0x9AB5D8", VA = "0x9AB5D8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700039B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001CE7")]
			[Address(RVA = "0x9AB668", Offset = "0x9AB668", VA = "0x9AB668", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001CE2")]
		[Address(RVA = "0x9AAFC4", Offset = "0x9AAFC4", VA = "0x9AAFC4")]
		[DebuggerHidden]
		public <ShowOrHideRay>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x6001CE3")]
		[Address(RVA = "0x9AB4D4", Offset = "0x9AB4D4", VA = "0x9AB4D4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001CE4")]
		[Address(RVA = "0x9AB4D8", Offset = "0x9AB4D8", VA = "0x9AB4D8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001CE6")]
		[Address(RVA = "0x9AB5E0", Offset = "0x9AB5E0", VA = "0x9AB5E0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000610")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public ControllerVariety Variety;

	[Token(Token = "0x4000611")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool IsCustomModel;

	[Token(Token = "0x4000612")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[SerializeField]
	private GameObject dot;

	[Token(Token = "0x4000613")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject rayLine;

	[Token(Token = "0x4000614")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private GameObject controller;

	[Token(Token = "0x4000615")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool moduleState;

	[Token(Token = "0x6000858")]
	[Address(RVA = "0x9AA994", Offset = "0x9AA994", VA = "0x9AA994")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000859")]
	[Address(RVA = "0x9AABE8", Offset = "0x9AABE8", VA = "0x9AABE8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600085A")]
	[Address(RVA = "0x9AAD10", Offset = "0x9AAD10", VA = "0x9AAD10")]
	private void ServiceStartSuccess()
	{
	}

	[Token(Token = "0x600085B")]
	[Address(RVA = "0x9AAD74", Offset = "0x9AAD74", VA = "0x9AAD74")]
	private void ControllerStateChanged(string data)
	{
	}

	[Token(Token = "0x600085C")]
	[Address(RVA = "0x9AAF18", Offset = "0x9AAF18", VA = "0x9AAF18")]
	private void MainControllerIDChanged(string data)
	{
	}

	[Token(Token = "0x600085D")]
	[Address(RVA = "0x9AAD14", Offset = "0x9AAD14", VA = "0x9AAD14")]
	private void RefreshRay()
	{
	}

	[Token(Token = "0x600085E")]
	[Address(RVA = "0x9AAF1C", Offset = "0x9AAF1C", VA = "0x9AAF1C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2FA284", Offset = "0x2FA284")]
	private IEnumerator ShowOrHideRay(int id)
	{
		return null;
	}

	[Token(Token = "0x600085F")]
	[Address(RVA = "0x9AAFE4", Offset = "0x9AAFE4", VA = "0x9AAFE4")]
	public void ForceHideOrShow(bool state)
	{
	}

	[Token(Token = "0x6000860")]
	[Address(RVA = "0x9AB150", Offset = "0x9AB150", VA = "0x9AB150")]
	public void UpdateRay()
	{
	}

	[Token(Token = "0x6000861")]
	[Address(RVA = "0x9AB4C4", Offset = "0x9AB4C4", VA = "0x9AB4C4")]
	public Pvr_ControllerModuleInit()
	{
	}
}
[Token(Token = "0x2000125")]
public class Pvr_ControllerPower : MonoBehaviour
{
	[Token(Token = "0x4000616")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[SerializeField]
	private Sprite power1;

	[Token(Token = "0x4000617")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	private Sprite power2;

	[Token(Token = "0x4000618")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[SerializeField]
	private Sprite power3;

	[Token(Token = "0x4000619")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Sprite power4;

	[Token(Token = "0x400061A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private Sprite power5;

	[Token(Token = "0x400061B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public ControllerVariety variety;

	[Token(Token = "0x400061C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[HideInInspector]
	public ControllerDevice currentDevice;

	[Token(Token = "0x400061D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Image powerImage;

	[Token(Token = "0x400061E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int powerValue;

	[Token(Token = "0x400061F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float power;

	[Token(Token = "0x6000862")]
	[Address(RVA = "0x9AB670", Offset = "0x9AB670", VA = "0x9AB670")]
	private void Start()
	{
	}

	[Token(Token = "0x6000863")]
	[Address(RVA = "0x9AB7A8", Offset = "0x9AB7A8", VA = "0x9AB7A8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000864")]
	[Address(RVA = "0x9AB7E0", Offset = "0x9AB7E0", VA = "0x9AB7E0")]
	private void RefreshPower(int hand)
	{
	}

	[Token(Token = "0x6000865")]
	[Address(RVA = "0x9AB930", Offset = "0x9AB930", VA = "0x9AB930")]
	public Pvr_ControllerPower()
	{
	}
}
[Token(Token = "0x2000126")]
public class Pvr_ControllerVisual : MonoBehaviour
{
	[Token(Token = "0x4000620")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public ControllerDevice currentDevice;

	[Token(Token = "0x4000621")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Texture2D m_idle;

	[Token(Token = "0x4000622")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Texture2D m_app;

	[Token(Token = "0x4000623")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture2D m_home;

	[Token(Token = "0x4000624")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Texture2D m_touchpad;

	[Token(Token = "0x4000625")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Texture2D m_volUp;

	[Token(Token = "0x4000626")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Texture2D m_volDn;

	[Token(Token = "0x4000627")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Texture2D m_trigger;

	[Token(Token = "0x4000628")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Texture2D m_a;

	[Token(Token = "0x4000629")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Texture2D m_b;

	[Token(Token = "0x400062A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Texture2D m_x;

	[Token(Token = "0x400062B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Texture2D m_y;

	[Token(Token = "0x400062C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Texture2D m_grip;

	[Token(Token = "0x400062D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Renderer controllerRenderMat;

	[Token(Token = "0x400062E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[HideInInspector]
	public ControllerVariety variety;

	[Token(Token = "0x6000866")]
	[Address(RVA = "0x9AB938", Offset = "0x9AB938", VA = "0x9AB938")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000867")]
	[Address(RVA = "0x9AB9A0", Offset = "0x9AB9A0", VA = "0x9AB9A0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000868")]
	[Address(RVA = "0x9ABA40", Offset = "0x9ABA40", VA = "0x9ABA40")]
	private void Update()
	{
	}

	[Token(Token = "0x6000869")]
	[Address(RVA = "0x9ABA78", Offset = "0x9ABA78", VA = "0x9ABA78")]
	private void ChangeKeyEffects(int hand)
	{
	}

	[Token(Token = "0x600086A")]
	[Address(RVA = "0x9AC008", Offset = "0x9AC008", VA = "0x9AC008")]
	public Pvr_ControllerVisual()
	{
	}
}
[Token(Token = "0x2000127")]
public class Pvr_ToolTips : MonoBehaviour
{
	[Token(Token = "0x200050B")]
	public enum TipBtn
	{
		[Token(Token = "0x4001DAA")]
		app,
		[Token(Token = "0x4001DAB")]
		touchpad,
		[Token(Token = "0x4001DAC")]
		home,
		[Token(Token = "0x4001DAD")]
		volup,
		[Token(Token = "0x4001DAE")]
		voldown,
		[Token(Token = "0x4001DAF")]
		trigger,
		[Token(Token = "0x4001DB0")]
		grip
	}

	[Token(Token = "0x400062F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private ControllerDevice currentDevice;

	[Token(Token = "0x4000630")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private float tipsAlpha;

	[Token(Token = "0x4000631")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Pvr_ToolTips tooltips;

	[Token(Token = "0x600086B")]
	[Address(RVA = "0x9B4170", Offset = "0x9B4170", VA = "0x9B4170")]
	public void ChangeTipsText(TipBtn tip, string key)
	{
	}

	[Token(Token = "0x600086C")]
	[Address(RVA = "0x9B44D0", Offset = "0x9B44D0", VA = "0x9B44D0")]
	private void Awake()
	{
	}

	[Token(Token = "0x600086D")]
	[Address(RVA = "0x9B456C", Offset = "0x9B456C", VA = "0x9B456C")]
	private void Update()
	{
	}

	[Token(Token = "0x600086E")]
	[Address(RVA = "0x9B4B84", Offset = "0x9B4B84", VA = "0x9B4B84")]
	private void LoadTextFromJson()
	{
	}

	[Token(Token = "0x600086F")]
	[Address(RVA = "0x9B5204", Offset = "0x9B5204", VA = "0x9B5204")]
	public static void RefreshTips()
	{
	}

	[Token(Token = "0x6000870")]
	[Address(RVA = "0x9B52D8", Offset = "0x9B52D8", VA = "0x9B52D8")]
	public Pvr_ToolTips()
	{
	}
}
[Token(Token = "0x2000128")]
public class Pvr_TouchPadScroll : MonoBehaviour
{
	[Token(Token = "0x4000632")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private ScrollRect scrollRect;

	[Token(Token = "0x4000633")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool isHoving;

	[Token(Token = "0x4000634")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private int mainHand;

	[Token(Token = "0x4000635")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private SwipeDirection direction;

	[Token(Token = "0x4000636")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Vector2 currPos;

	[Token(Token = "0x4000637")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector2 tarPos;

	[Token(Token = "0x4000638")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float lerpSpeed;

	[Token(Token = "0x4000639")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform tranViewport;

	[Token(Token = "0x400063A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float ignoreDis;

	[Token(Token = "0x400063B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector2 lastTouchDownPos;

	[Token(Token = "0x400063C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector2 lastTouchUpPos;

	[Token(Token = "0x400063D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool isTouching;

	[Token(Token = "0x400063E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	private bool isClosed;

	[Token(Token = "0x400063F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Vector2 vecOrigin;

	[Token(Token = "0x4000640")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private Vector2 vecOriginNeo2;

	[Token(Token = "0x6000871")]
	[Address(RVA = "0x9B52E0", Offset = "0x9B52E0", VA = "0x9B52E0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000872")]
	[Address(RVA = "0x9B53A8", Offset = "0x9B53A8", VA = "0x9B53A8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000873")]
	[Address(RVA = "0x9B59E4", Offset = "0x9B59E4", VA = "0x9B59E4")]
	private bool IsControllerConnect()
	{
		return default(bool);
	}

	[Token(Token = "0x6000874")]
	[Address(RVA = "0x9B5580", Offset = "0x9B5580", VA = "0x9B5580")]
	private void UpdateTargetPos()
	{
	}

	[Token(Token = "0x6000875")]
	[Address(RVA = "0x9B5C68", Offset = "0x9B5C68", VA = "0x9B5C68")]
	private void ComputeTouchPos()
	{
	}

	[Token(Token = "0x6000876")]
	[Address(RVA = "0x9B6170", Offset = "0x9B6170", VA = "0x9B6170")]
	private void ComputeRockerPos()
	{
	}

	[Token(Token = "0x6000877")]
	[Address(RVA = "0x9B66B0", Offset = "0x9B66B0", VA = "0x9B66B0")]
	private bool VerifyNeo2TouchValid(Vector2 nowTouchPos)
	{
		return default(bool);
	}

	[Token(Token = "0x6000878")]
	[Address(RVA = "0x9B5728", Offset = "0x9B5728", VA = "0x9B5728")]
	private void UpdatePos()
	{
	}

	[Token(Token = "0x6000879")]
	[Address(RVA = "0x9B5B20", Offset = "0x9B5B20", VA = "0x9B5B20")]
	private void ResetParameter()
	{
	}

	[Token(Token = "0x600087A")]
	[Address(RVA = "0x9B53CC", Offset = "0x9B53CC", VA = "0x9B53CC")]
	private void Process()
	{
	}

	[Token(Token = "0x600087B")]
	[Address(RVA = "0x9B6708", Offset = "0x9B6708", VA = "0x9B6708")]
	private bool IsHovering(Pvr_UIPointer pointer)
	{
		return default(bool);
	}

	[Token(Token = "0x600087C")]
	[Address(RVA = "0x9B69A8", Offset = "0x9B69A8", VA = "0x9B69A8")]
	private bool FindTree(Transform tran)
	{
		return default(bool);
	}

	[Token(Token = "0x600087D")]
	[Address(RVA = "0x9B6AC0", Offset = "0x9B6AC0", VA = "0x9B6AC0")]
	public Pvr_TouchPadScroll()
	{
	}
}
[Token(Token = "0x2000129")]
public class Pvr_TouchVisual : MonoBehaviour
{
	[Token(Token = "0x4000641")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[HideInInspector]
	public ControllerDevice currentDevice;

	[Token(Token = "0x4000642")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[HideInInspector]
	public ControllerVariety variety;

	[Token(Token = "0x4000643")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private MeshRenderer touchRenderer;

	[Token(Token = "0x600087E")]
	[Address(RVA = "0x9B6BB4", Offset = "0x9B6BB4", VA = "0x9B6BB4")]
	private void Start()
	{
	}

	[Token(Token = "0x600087F")]
	[Address(RVA = "0x9B6CA4", Offset = "0x9B6CA4", VA = "0x9B6CA4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000880")]
	[Address(RVA = "0x9B6CDC", Offset = "0x9B6CDC", VA = "0x9B6CDC")]
	private void ChangeEffects(int hand)
	{
	}

	[Token(Token = "0x6000881")]
	[Address(RVA = "0x9B6E14", Offset = "0x9B6E14", VA = "0x9B6E14")]
	public Pvr_TouchVisual()
	{
	}
}
[Token(Token = "0x200012A")]
public class DemoController : MonoBehaviour
{
	[Token(Token = "0x200050C")]
	public delegate void showLoadingEventHandler();

	[Token(Token = "0x200050D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EAC3C", Offset = "0x2EAC3C")]
	private sealed class <>c__DisplayClass12_0
	{
		[Token(Token = "0x4001DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public GameObject btnObj;

		[Token(Token = "0x4001DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public DemoController <>4__this;

		[Token(Token = "0x6001CEC")]
		[Address(RVA = "0x4D9608", Offset = "0x4D9608", VA = "0x4D9608")]
		public <>c__DisplayClass12_0()
		{
		}

		[Token(Token = "0x6001CED")]
		[Address(RVA = "0x4DA34C", Offset = "0x4DA34C", VA = "0x4DA34C")]
		internal void <InitDelegate>b__0()
		{
		}
	}

	[Token(Token = "0x4000644")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Callback callback;

	[Token(Token = "0x4000645")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private GameObject msg;

	[Token(Token = "0x4000646")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Pvr_UnitySDKManager picoVrManager;

	[Token(Token = "0x4000647")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private string currentOrderID;

	[Token(Token = "0x4000648")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public GameObject loading;

	[Token(Token = "0x4000649")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject BG;

	[Token(Token = "0x400064A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public GameObject InputPanel;

	[Token(Token = "0x400064B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static showLoadingEventHandler showLoading;

	[Token(Token = "0x6000882")]
	[Address(RVA = "0x4D8BCC", Offset = "0x4D8BCC", VA = "0x4D8BCC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000883")]
	[Address(RVA = "0x4D8DE8", Offset = "0x4D8DE8", VA = "0x4D8DE8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000884")]
	[Address(RVA = "0x4D9434", Offset = "0x4D9434", VA = "0x4D9434")]
	private void Update()
	{
	}

	[Token(Token = "0x6000885")]
	[Address(RVA = "0x4D8EE8", Offset = "0x4D8EE8", VA = "0x4D8EE8")]
	private void InitDelegate()
	{
	}

	[Token(Token = "0x6000886")]
	[Address(RVA = "0x4D9610", Offset = "0x4D9610", VA = "0x4D9610")]
	private void OnClick(GameObject btnObj)
	{
	}

	[Token(Token = "0x6000887")]
	[Address(RVA = "0x4D9B38", Offset = "0x4D9B38", VA = "0x4D9B38")]
	public string getRamdomTestOrderID()
	{
		return null;
	}

	[Token(Token = "0x6000888")]
	[Address(RVA = "0x4D9A64", Offset = "0x4D9A64", VA = "0x4D9A64")]
	private void StartLoading()
	{
	}

	[Token(Token = "0x6000889")]
	[Address(RVA = "0x4D9BF8", Offset = "0x4D9BF8", VA = "0x4D9BF8")]
	public void StopLoading()
	{
	}

	[Token(Token = "0x600088A")]
	[Address(RVA = "0x4D9D5C", Offset = "0x4D9D5C", VA = "0x4D9D5C")]
	public void DoPayByCode()
	{
	}

	[Token(Token = "0x600088B")]
	[Address(RVA = "0x4DA200", Offset = "0x4DA200", VA = "0x4DA200")]
	private bool VerifyLocalToken()
	{
		return default(bool);
	}

	[Token(Token = "0x600088C")]
	[Address(RVA = "0x4DA344", Offset = "0x4DA344", VA = "0x4DA344")]
	public DemoController()
	{
	}
}
[Token(Token = "0x200012B")]
public class LoadingRatation : MonoBehaviour
{
	[Token(Token = "0x600088D")]
	[Address(RVA = "0x4ED310", Offset = "0x4ED310", VA = "0x4ED310")]
	private void Start()
	{
	}

	[Token(Token = "0x600088E")]
	[Address(RVA = "0x4ED314", Offset = "0x4ED314", VA = "0x4ED314")]
	private void Update()
	{
	}

	[Token(Token = "0x600088F")]
	[Address(RVA = "0x4ED3A8", Offset = "0x4ED3A8", VA = "0x4ED3A8")]
	public LoadingRatation()
	{
	}
}
[Token(Token = "0x200012C")]
public class InputManager : MonoBehaviour
{
	[Token(Token = "0x200050E")]
	public delegate void doEnterEventHandler();

	[Token(Token = "0x200050F")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EAC4C", Offset = "0x2EAC4C")]
	private sealed class <>c__DisplayClass8_0
	{
		[Token(Token = "0x4001DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public GameObject btnObj;

		[Token(Token = "0x4001DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public InputManager <>4__this;

		[Token(Token = "0x6001CF2")]
		[Address(RVA = "0x4E1E20", Offset = "0x4E1E20", VA = "0x4E1E20")]
		public <>c__DisplayClass8_0()
		{
		}

		[Token(Token = "0x6001CF3")]
		[Address(RVA = "0x4E2E54", Offset = "0x4E2E54", VA = "0x4E2E54")]
		internal void <InitKeyBoard>b__0()
		{
		}
	}

	[Token(Token = "0x400064C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static doEnterEventHandler doEnter;

	[Token(Token = "0x400064D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private StringBuilder sb;

	[Token(Token = "0x400064E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private ArrayList btnsName;

	[Token(Token = "0x400064F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private GameObject enter;

	[Token(Token = "0x6000890")]
	[Address(RVA = "0x4E1138", Offset = "0x4E1138", VA = "0x4E1138")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000891")]
	[Address(RVA = "0x4E1E18", Offset = "0x4E1E18", VA = "0x4E1E18")]
	private void Start()
	{
	}

	[Token(Token = "0x6000892")]
	[Address(RVA = "0x4E1E1C", Offset = "0x4E1E1C", VA = "0x4E1E1C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000893")]
	[Address(RVA = "0x4E113C", Offset = "0x4E113C", VA = "0x4E113C")]
	private void InitKeyBoard()
	{
	}

	[Token(Token = "0x6000894")]
	[Address(RVA = "0x4E1E28", Offset = "0x4E1E28", VA = "0x4E1E28")]
	private void OnClick(GameObject btnObj)
	{
	}

	[Token(Token = "0x6000895")]
	[Address(RVA = "0x4E2C54", Offset = "0x4E2C54", VA = "0x4E2C54")]
	private void EnterChar(string s)
	{
	}

	[Token(Token = "0x6000896")]
	[Address(RVA = "0x4E21D0", Offset = "0x4E21D0", VA = "0x4E21D0")]
	private void DoCapslock(bool IsUpper)
	{
	}

	[Token(Token = "0x6000897")]
	[Address(RVA = "0x4E295C", Offset = "0x4E295C", VA = "0x4E295C")]
	private void ClearBuffer()
	{
	}

	[Token(Token = "0x6000898")]
	[Address(RVA = "0x4E2DB4", Offset = "0x4E2DB4", VA = "0x4E2DB4")]
	public InputManager()
	{
	}
}
[Token(Token = "0x200012D")]
public class Callback : MonoBehaviour
{
	[Token(Token = "0x4000650")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string IS_SUCCESS;

	[Token(Token = "0x4000651")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static string MSG;

	[Token(Token = "0x4000652")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static string CODE;

	[Token(Token = "0x6000899")]
	[Address(RVA = "0x622318", Offset = "0x622318", VA = "0x622318")]
	public void LoginCallback(string LoginInfo)
	{
	}

	[Token(Token = "0x600089A")]
	[Address(RVA = "0x62279C", Offset = "0x62279C", VA = "0x62279C")]
	public void QueryOrPayCallback(string queryOrPayInfo)
	{
	}

	[Token(Token = "0x600089B")]
	[Address(RVA = "0x622AEC", Offset = "0x622AEC", VA = "0x622AEC")]
	public void UserInfoCallback(string userInfo)
	{
	}

	[Token(Token = "0x600089C")]
	[Address(RVA = "0x622674", Offset = "0x622674", VA = "0x622674")]
	public void SetMassage(string massage)
	{
	}

	[Token(Token = "0x600089D")]
	[Address(RVA = "0x622BF4", Offset = "0x622BF4", VA = "0x622BF4")]
	public GameObject GetCurrentGameObject()
	{
		return null;
	}

	[Token(Token = "0x600089E")]
	[Address(RVA = "0x622C54", Offset = "0x622C54", VA = "0x622C54")]
	public void ActivityForResultCallback(string activity)
	{
	}

	[Token(Token = "0x600089F")]
	[Address(RVA = "0x622DF4", Offset = "0x622DF4", VA = "0x622DF4")]
	public Callback()
	{
	}
}
[Token(Token = "0x200012E")]
public class CommonDic
{
	[Token(Token = "0x4000653")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static CommonDic dic;

	[Token(Token = "0x4000654")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static Dictionary<string, string> mydic;

	[Token(Token = "0x4000655")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private string _app_ID;

	[Token(Token = "0x4000656")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private string _app_Key;

	[Token(Token = "0x4000657")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private string _user_token;

	[Token(Token = "0x4000658")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private string _access_token;

	[Token(Token = "0x4000659")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private string _open_id;

	[Token(Token = "0x400065A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private string _refresh_token;

	[Token(Token = "0x400065B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private string _expires_in;

	[Token(Token = "0x400065C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private string _user_info;

	[Token(Token = "0x400065D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string _subject;

	[Token(Token = "0x400065E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private string _body;

	[Token(Token = "0x400065F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private string _order_id;

	[Token(Token = "0x4000660")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private string _total;

	[Token(Token = "0x4000661")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private string _goods_tag;

	[Token(Token = "0x4000662")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private string _notify_url;

	[Token(Token = "0x4000663")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private string _trade_type;

	[Token(Token = "0x4000664")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private string _pay_code;

	[Token(Token = "0x4000665")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private string _order_info;

	[Token(Token = "0x4000666")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private string _code;

	[Token(Token = "0x4000667")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private string _msg;

	[Token(Token = "0x4000668")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private string _merchant_ID;

	[Token(Token = "0x4000669")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private string _payKey;

	[Token(Token = "0x400066A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private string _isSuucess;

	[Token(Token = "0x400066B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private string _loginMsg;

	[Token(Token = "0x170000E1")]
	public string subject
	{
		[Token(Token = "0x60008A5")]
		[Address(RVA = "0x5F4EB4", Offset = "0x5F4EB4", VA = "0x5F4EB4")]
		get
		{
			return null;
		}
		[Token(Token = "0x60008A6")]
		[Address(RVA = "0x5F4EBC", Offset = "0x5F4EBC", VA = "0x5F4EBC")]
		set
		{
		}
	}

	[Token(Token = "0x170000E2")]
	public string body
	{
		[Token(Token = "0x60008A7")]
		[Address(RVA = "0x5F4EC4", Offset = "0x5F4EC4", VA = "0x5F4EC4")]
		get
		{
			return null;
		}
		[Token(Token = "0x60008A8")]
		[Address(RVA = "0x5F4ECC", Offset = "0x5F4ECC", VA = "0x5F4ECC")]
		set
		{
		}
	}

	[Token(Token = "0x170000E3")]
	public string order_id
	{
		[Token(Token = "0x60008A9")]
		[Address(RVA = "0x5F4ED4", Offset = "0x5F4ED4", VA = "0x5F4ED4")]
		get
		{
			return null;
		}
		[Token(Token = "0x60008AA")]
		[Address(RVA = "0x5F4EDC", Offset = "0x5F4EDC", VA = "0x5F4EDC")]
		set
		{
		}
	}

	[Token(Token = "0x170000E4")]
	public string total
	{
		[Token(Token = "0x60008AB")]
		[Address(RVA = "0x5F4EE4", Offset = "0x5F4EE4", VA = "0x5F4EE4")]
		get
		{
			return null;
		}
		[Token(Token = "0x60008AC")]
		[Address(RVA = "0x5F4EEC", Offset = "0x5F4EEC", VA = "0x5F4EEC")]
		set
		{
		}
	}

	[Token(Token = "0x170000E5")]
	public string goods_tag
	{
		[Token(Token = "0x60008AD")]
		[Address(RVA = "0x5F4EF4", Offset = "0x5F4EF4", VA = "0x5F4EF4")]
		get
		{
			return null;
		}
		[Token(Token = "0x60008AE")]
		[Address(RVA = "0x5F4EFC", Offset = "0x5F4EFC", VA = "0x5F4EFC")]
		set
		{
		}
	}

	[Token(Token = "0x170000E6")]
	public string notify_url
	{
		[Token(Token = "0x60008AF")]
		[Address(RVA = "0x5F4F04", Offset = "0x5F4F04", VA = "0x5F4F04")]
		get
		{
			return null;
		}
		[Token(Token = "0x60008B0")]
		[Address(RVA = "0x5F4F0C", Offset = "0x5F4F0C", VA = "0x5F4F0C")]
		set
		{
		}
	}

	[Token(Token = "0x170000E7")]
	public string pay_code
	{
		[Token(Token = "0x60008B1")]
		[Address(RVA = "0x5F4F14", Offset = "0x5F4F14", VA = "0x5F4F14")]
		get
		{
			return null;
		}
		[Token(Token = "0x60008B2")]
		[Address(RVA = "0x5F4F1C", Offset = "0x5F4F1C", VA = "0x5F4F1C")]
		set
		{
		}
	}

	[Token(Token = "0x170000E8")]
	public string trade_type
	{
		[Token(Token = "0x60008B3")]
		[Address(RVA = "0x5F4F24", Offset = "0x5F4F24", VA = "0x5F4F24")]
		get
		{
			return null;
		}
		[Token(Token = "0x60008B4")]
		[Address(RVA = "0x5F4F2C", Offset = "0x5F4F2C", VA = "0x5F4F2C")]
		set
		{
		}
	}

	[Token(Token = "0x170000E9")]
	public string user_token
	{
		[Token(Token = "0x60008B5")]
		[Address(RVA = "0x5F4F34", Offset = "0x5F4F34", VA = "0x5F4F34")]
		get
		{
			return null;
		}
		[Token(Token = "0x60008B6")]
		[Address(RVA = "0x5F4F3C", Offset = "0x5F4F3C", VA = "0x5F4F3C")]
		set
		{
		}
	}

	[Token(Token = "0x170000EA")]
	public string access_token
	{
		[Token(Token = "0x60008B7")]
		[Address(RVA = "0x5F4F44", Offset = "0x5F4F44", VA = "0x5F4F44")]
		get
		{
			return null;
		}
		[Token(Token = "0x60008B8")]
		[Address(RVA = "0x5F4F4C", Offset = "0x5F4F4C", VA = "0x5F4F4C")]
		set
		{
		}
	}

	[Token(Token = "0x170000EB")]
	public string open_id
	{
		[Token(Token = "0x60008B9")]
		[Address(RVA = "0x5F4F54", Offset = "0x5F4F54", VA = "0x5F4F54")]
		get
		{
			return null;
		}
		[Token(Token = "0x60008BA")]
		[Address(RVA = "0x5F4F5C", Offset = "0x5F4F5C", VA = "0x5F4F5C")]
		set
		{
		}
	}

	[Token(Token = "0x170000EC")]
	public string refresh_token
	{
		[Token(Token = "0x60008BB")]
		[Address(RVA = "0x5F4F64", Offset = "0x5F4F64", VA = "0x5F4F64")]
		get
		{
			return null;
		}
		[Token(Token = "0x60008BC")]
		[Address(RVA = "0x5F4F6C", Offset = "0x5F4F6C", VA = "0x5F4F6C")]
		set
		{
		}
	}

	[Token(Token = "0x170000ED")]
	public string expires_in
	{
		[Token(Token = "0x60008BD")]
		[Address(RVA = "0x5F4F74", Offset = "0x5F4F74", VA = "0x5F4F74")]
		get
		{
			return null;
		}
		[Token(Token = "0x60008BE")]
		[Address(RVA = "0x5F4F7C", Offset = "0x5F4F7C", VA = "0x5F4F7C")]
		set
		{
		}
	}

	[Token(Token = "0x170000EE")]
	public string isSuccess
	{
		[Token(Token = "0x60008BF")]
		[Address(RVA = "0x5F4F84", Offset = "0x5F4F84", VA = "0x5F4F84")]
		get
		{
			return null;
		}
		[Token(Token = "0x60008C0")]
		[Address(RVA = "0x5F4F8C", Offset = "0x5F4F8C", VA = "0x5F4F8C")]
		set
		{
		}
	}

	[Token(Token = "0x170000EF")]
	public string loginMsg
	{
		[Token(Token = "0x60008C1")]
		[Address(RVA = "0x5F4F94", Offset = "0x5F4F94", VA = "0x5F4F94")]
		get
		{
			return null;
		}
		[Token(Token = "0x60008C2")]
		[Address(RVA = "0x5F4F9C", Offset = "0x5F4F9C", VA = "0x5F4F9C")]
		set
		{
		}
	}

	[Token(Token = "0x170000F0")]
	public string user_info
	{
		[Token(Token = "0x60008C3")]
		[Address(RVA = "0x5F4FA4", Offset = "0x5F4FA4", VA = "0x5F4FA4")]
		get
		{
			return null;
		}
		[Token(Token = "0x60008C4")]
		[Address(RVA = "0x5F4FAC", Offset = "0x5F4FAC", VA = "0x5F4FAC")]
		set
		{
		}
	}

	[Token(Token = "0x170000F1")]
	public string order_info
	{
		[Token(Token = "0x60008C5")]
		[Address(RVA = "0x5F4FB4", Offset = "0x5F4FB4", VA = "0x5F4FB4")]
		get
		{
			return null;
		}
		[Token(Token = "0x60008C6")]
		[Address(RVA = "0x5F4FBC", Offset = "0x5F4FBC", VA = "0x5F4FBC")]
		set
		{
		}
	}

	[Token(Token = "0x170000F2")]
	public string code
	{
		[Token(Token = "0x60008C7")]
		[Address(RVA = "0x5F4FC4", Offset = "0x5F4FC4", VA = "0x5F4FC4")]
		get
		{
			return null;
		}
		[Token(Token = "0x60008C8")]
		[Address(RVA = "0x5F4FCC", Offset = "0x5F4FCC", VA = "0x5F4FCC")]
		set
		{
		}
	}

	[Token(Token = "0x170000F3")]
	public string msg
	{
		[Token(Token = "0x60008C9")]
		[Address(RVA = "0x5F4FD4", Offset = "0x5F4FD4", VA = "0x5F4FD4")]
		get
		{
			return null;
		}
		[Token(Token = "0x60008CA")]
		[Address(RVA = "0x5F4FDC", Offset = "0x5F4FDC", VA = "0x5F4FDC")]
		set
		{
		}
	}

	[Token(Token = "0x170000F4")]
	public string app_ID
	{
		[Token(Token = "0x60008CB")]
		[Address(RVA = "0x5F4FE4", Offset = "0x5F4FE4", VA = "0x5F4FE4")]
		get
		{
			return null;
		}
		[Token(Token = "0x60008CC")]
		[Address(RVA = "0x5F4FEC", Offset = "0x5F4FEC", VA = "0x5F4FEC")]
		set
		{
		}
	}

	[Token(Token = "0x170000F5")]
	public string app_Key
	{
		[Token(Token = "0x60008CD")]
		[Address(RVA = "0x5F4FF4", Offset = "0x5F4FF4", VA = "0x5F4FF4")]
		get
		{
			return null;
		}
		[Token(Token = "0x60008CE")]
		[Address(RVA = "0x5F4FFC", Offset = "0x5F4FFC", VA = "0x5F4FFC")]
		set
		{
		}
	}

	[Token(Token = "0x170000F6")]
	public string merchant_ID
	{
		[Token(Token = "0x60008CF")]
		[Address(RVA = "0x5F5004", Offset = "0x5F5004", VA = "0x5F5004")]
		get
		{
			return null;
		}
		[Token(Token = "0x60008D0")]
		[Address(RVA = "0x5F500C", Offset = "0x5F500C", VA = "0x5F500C")]
		set
		{
		}
	}

	[Token(Token = "0x170000F7")]
	public string paykey
	{
		[Token(Token = "0x60008D1")]
		[Address(RVA = "0x5F5014", Offset = "0x5F5014", VA = "0x5F5014")]
		get
		{
			return null;
		}
		[Token(Token = "0x60008D2")]
		[Address(RVA = "0x5F501C", Offset = "0x5F501C", VA = "0x5F501C")]
		set
		{
		}
	}

	[Token(Token = "0x60008A1")]
	[Address(RVA = "0x5F3EBC", Offset = "0x5F3EBC", VA = "0x5F3EBC")]
	public static CommonDic getInstance()
	{
		return null;
	}

	[Token(Token = "0x60008A2")]
	[Address(RVA = "0x5F4BD4", Offset = "0x5F4BD4", VA = "0x5F4BD4")]
	public Dictionary<string, string> getDic()
	{
		return null;
	}

	[Token(Token = "0x60008A3")]
	[Address(RVA = "0x5F4C38", Offset = "0x5F4C38", VA = "0x5F4C38")]
	public void setParameters(string name, string value)
	{
	}

	[Token(Token = "0x60008A4")]
	[Address(RVA = "0x5F4E2C", Offset = "0x5F4E2C", VA = "0x5F4E2C")]
	public string PayOrderString()
	{
		return null;
	}

	[Token(Token = "0x60008D3")]
	[Address(RVA = "0x5F4040", Offset = "0x5F4040", VA = "0x5F4040")]
	public static void InitDicData(Dictionary<string, string> mydic)
	{
	}

	[Token(Token = "0x60008D4")]
	[Address(RVA = "0x5F3FBC", Offset = "0x5F3FBC", VA = "0x5F3FBC")]
	public CommonDic()
	{
	}
}
[Token(Token = "0x200012F")]
public class LoginSDK
{
	[Token(Token = "0x60008D5")]
	[Address(RVA = "0x4D9ABC", Offset = "0x4D9ABC", VA = "0x4D9ABC")]
	public static void Login()
	{
	}

	[Token(Token = "0x60008D6")]
	[Address(RVA = "0x4D9B7C", Offset = "0x4D9B7C", VA = "0x4D9B7C")]
	public static void GetUserAPI()
	{
	}

	[Token(Token = "0x60008D7")]
	[Address(RVA = "0x4EF19C", Offset = "0x4EF19C", VA = "0x4EF19C")]
	public LoginSDK()
	{
	}
}
[Token(Token = "0x2000130")]
public class PicoPaymentSDK
{
	[Token(Token = "0x400066C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AndroidJavaObject _jo;

	[Token(Token = "0x170000F8")]
	public static AndroidJavaObject jo
	{
		[Token(Token = "0x60008D8")]
		[Address(RVA = "0x8B94C0", Offset = "0x8B94C0", VA = "0x8B94C0")]
		get
		{
			return null;
		}
		[Token(Token = "0x60008D9")]
		[Address(RVA = "0x8B954C", Offset = "0x8B954C", VA = "0x8B954C")]
		set
		{
		}
	}

	[Token(Token = "0x60008DA")]
	[Address(RVA = "0x8B95DC", Offset = "0x8B95DC", VA = "0x8B95DC")]
	public static void Login()
	{
	}

	[Token(Token = "0x60008DB")]
	[Address(RVA = "0x8B993C", Offset = "0x8B993C", VA = "0x8B993C")]
	public static void Pay(string payOrderJson)
	{
	}

	[Token(Token = "0x60008DC")]
	[Address(RVA = "0x8B9C74", Offset = "0x8B9C74", VA = "0x8B9C74")]
	public static void QueryOrder(string orderId)
	{
	}

	[Token(Token = "0x60008DD")]
	[Address(RVA = "0x8B9FAC", Offset = "0x8B9FAC", VA = "0x8B9FAC")]
	public static void GetUserAPI()
	{
	}

	[Token(Token = "0x60008DE")]
	[Address(RVA = "0x8BA30C", Offset = "0x8BA30C", VA = "0x8BA30C")]
	public PicoPaymentSDK()
	{
	}
}
[Token(Token = "0x2000131")]
public class Pvr_ToBService : MonoBehaviour
{
	[Token(Token = "0x400066D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Text deviceInfoText;

	[Token(Token = "0x60008E0")]
	[Address(RVA = "0x9B3AA4", Offset = "0x9B3AA4", VA = "0x9B3AA4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008E1")]
	[Address(RVA = "0x9B3AD4", Offset = "0x9B3AD4", VA = "0x9B3AD4")]
	private void Start()
	{
	}

	[Token(Token = "0x60008E2")]
	[Address(RVA = "0x9B3AE4", Offset = "0x9B3AE4", VA = "0x9B3AE4")]
	private void OnDestory()
	{
	}

	[Token(Token = "0x60008E3")]
	[Address(RVA = "0x9B3AA8", Offset = "0x9B3AA8", VA = "0x9B3AA8")]
	private void InitToBService()
	{
	}

	[Token(Token = "0x60008E4")]
	[Address(RVA = "0x9B3ADC", Offset = "0x9B3ADC", VA = "0x9B3ADC")]
	private void BindToBService()
	{
	}

	[Token(Token = "0x60008E5")]
	[Address(RVA = "0x9B3AEC", Offset = "0x9B3AEC", VA = "0x9B3AEC")]
	private void UnBindToBService()
	{
	}

	[Token(Token = "0x60008E6")]
	[Address(RVA = "0x9B3AF4", Offset = "0x9B3AF4", VA = "0x9B3AF4")]
	private void BoolCallback(string value)
	{
	}

	[Token(Token = "0x60008E7")]
	[Address(RVA = "0x9B3BD0", Offset = "0x9B3BD0", VA = "0x9B3BD0")]
	private void IntCallback(string value)
	{
	}

	[Token(Token = "0x60008E8")]
	[Address(RVA = "0x9B3C80", Offset = "0x9B3C80", VA = "0x9B3C80")]
	private void LongCallback(string value)
	{
	}

	[Token(Token = "0x60008E9")]
	[Address(RVA = "0x9B3D44", Offset = "0x9B3D44", VA = "0x9B3D44")]
	private void StringCallback(string value)
	{
	}

	[Token(Token = "0x60008EA")]
	[Address(RVA = "0x9B3DE4", Offset = "0x9B3DE4", VA = "0x9B3DE4")]
	public void StateGetDeviceInfo()
	{
	}

	[Token(Token = "0x60008EB")]
	[Address(RVA = "0x9B3E88", Offset = "0x9B3E88", VA = "0x9B3E88")]
	public void ControlSetDeviceAction()
	{
	}

	[Token(Token = "0x60008EC")]
	[Address(RVA = "0x9B3F28", Offset = "0x9B3F28", VA = "0x9B3F28")]
	private void ControlSetDeviceActionCallBack(int value)
	{
	}

	[Token(Token = "0x60008ED")]
	[Address(RVA = "0x9B3FF0", Offset = "0x9B3FF0", VA = "0x9B3FF0")]
	public void AppManager()
	{
	}

	[Token(Token = "0x60008EE")]
	[Address(RVA = "0x9B40A0", Offset = "0x9B40A0", VA = "0x9B40A0")]
	private void AppManagerCallBack(int value)
	{
	}

	[Token(Token = "0x60008EF")]
	[Address(RVA = "0x9B4168", Offset = "0x9B4168", VA = "0x9B4168")]
	public Pvr_ToBService()
	{
	}
}
[Token(Token = "0x2000132")]
public class PLOG : MonoBehaviour
{
	[Token(Token = "0x400066E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int logLevel;

	[Token(Token = "0x60008F0")]
	[Address(RVA = "0x8B6628", Offset = "0x8B6628", VA = "0x8B6628")]
	public static void getConfigTraceLevel()
	{
	}

	[Token(Token = "0x60008F1")]
	[Address(RVA = "0x8B66BC", Offset = "0x8B66BC", VA = "0x8B66BC")]
	public static void D(string msg)
	{
	}

	[Token(Token = "0x60008F2")]
	[Address(RVA = "0x8B678C", Offset = "0x8B678C", VA = "0x8B678C")]
	public static void I(string msg)
	{
	}

	[Token(Token = "0x60008F3")]
	[Address(RVA = "0x8B685C", Offset = "0x8B685C", VA = "0x8B685C")]
	public static void W(string msg)
	{
	}

	[Token(Token = "0x60008F4")]
	[Address(RVA = "0x8B692C", Offset = "0x8B692C", VA = "0x8B692C")]
	public static void E(string msg)
	{
	}

	[Token(Token = "0x60008F5")]
	[Address(RVA = "0x8B69B0", Offset = "0x8B69B0", VA = "0x8B69B0")]
	public PLOG()
	{
	}
}
[Token(Token = "0x2000133")]
public class PicoDevice : MonoBehaviour
{
	[Token(Token = "0x2000510")]
	public enum DeviceType
	{
		[Token(Token = "0x4001DB6")]
		HMD,
		[Token(Token = "0x4001DB7")]
		LeftController,
		[Token(Token = "0x4001DB8")]
		RightController
	}

	[Token(Token = "0x400066F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public DeviceType deviceType;

	[Token(Token = "0x4000670")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Vector3 devicePos;

	[Token(Token = "0x4000671")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Quaternion deviceRot;

	[Token(Token = "0x60008F7")]
	[Address(RVA = "0x8B8BCC", Offset = "0x8B8BCC", VA = "0x8B8BCC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008F8")]
	[Address(RVA = "0x8B8F7C", Offset = "0x8B8F7C", VA = "0x8B8F7C")]
	private void Update()
	{
	}

	[Token(Token = "0x60008F9")]
	[Address(RVA = "0x8B92B8", Offset = "0x8B92B8", VA = "0x8B92B8")]
	public PicoDevice()
	{
	}
}
[Token(Token = "0x2000134")]
public class CPicoSDKSettingAsset : ScriptableObject
{
	[Token(Token = "0x4000672")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public bool IgnoreSDKSetting;

	[Token(Token = "0x4000673")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
	public bool DontshowBuildWaring;

	[Token(Token = "0x4000674")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
	public bool AppIDChecked;

	[Token(Token = "0x60008FA")]
	[Address(RVA = "0x621C00", Offset = "0x621C00", VA = "0x621C00")]
	public CPicoSDKSettingAsset()
	{
	}
}
[Serializable]
[Token(Token = "0x2000135")]
public class Pvr_UnitySDKProjectSetting : ScriptableObject
{
	[Token(Token = "0x4000675")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public RenderTextureAntiAliasing rtAntiAlising;

	[Token(Token = "0x4000676")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public RenderTextureDepth rtBitDepth;

	[Token(Token = "0x4000677")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public RenderTextureFormat rtFormat;

	[Token(Token = "0x4000678")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool usedefaultRenderTexture;

	[Token(Token = "0x4000679")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector2 customRTSize;

	[Token(Token = "0x400067A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool usedefaultfps;

	[Token(Token = "0x400067B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int customfps;

	[Token(Token = "0x400067C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool usesinglepass;

	[Token(Token = "0x400067D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	public bool usecontentprotect;

	[Token(Token = "0x60008FB")]
	[Address(RVA = "0x670E74", Offset = "0x670E74", VA = "0x670E74")]
	public static Pvr_UnitySDKProjectSetting GetProjectConfig()
	{
		return null;
	}

	[Token(Token = "0x60008FC")]
	[Address(RVA = "0x67B540", Offset = "0x67B540", VA = "0x67B540")]
	public Pvr_UnitySDKProjectSetting()
	{
	}
}
[Token(Token = "0x2000136")]
public sealed class Pvr_UnitySDKPlatformSetting : ScriptableObject
{
	[Token(Token = "0x2000511")]
	public enum simulationType
	{
		[Token(Token = "0x4001DBA")]
		Null,
		[Token(Token = "0x4001DBB")]
		Invalid,
		[Token(Token = "0x4001DBC")]
		Valid
	}

	[Token(Token = "0x400067E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[SerializeField]
	private bool entitlementchecksimulation;

	[Token(Token = "0x400067F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
	[SerializeField]
	private bool startTimeEntitlementCheck;

	[Token(Token = "0x4000680")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	public string appID;

	[Token(Token = "0x4000681")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public List<string> deviceSN;

	[Token(Token = "0x4000682")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Pvr_UnitySDKPlatformSetting instance;

	[Token(Token = "0x170000F9")]
	public static bool Entitlementchecksimulation
	{
		[Token(Token = "0x60008FD")]
		[Address(RVA = "0x67A2E4", Offset = "0x67A2E4", VA = "0x67A2E4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60008FE")]
		[Address(RVA = "0x67A30C", Offset = "0x67A30C", VA = "0x67A30C")]
		set
		{
		}
	}

	[Token(Token = "0x170000FA")]
	public static bool StartTimeEntitlementCheck
	{
		[Token(Token = "0x60008FF")]
		[Address(RVA = "0x679E18", Offset = "0x679E18", VA = "0x679E18")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000900")]
		[Address(RVA = "0x67A364", Offset = "0x67A364", VA = "0x67A364")]
		set
		{
		}
	}

	[Token(Token = "0x170000FB")]
	public static Pvr_UnitySDKPlatformSetting Instance
	{
		[Token(Token = "0x6000901")]
		[Address(RVA = "0x679E40", Offset = "0x679E40", VA = "0x679E40")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000902")]
		[Address(RVA = "0x67A3BC", Offset = "0x67A3BC", VA = "0x67A3BC")]
		set
		{
		}
	}

	[Token(Token = "0x6000903")]
	[Address(RVA = "0x67A420", Offset = "0x67A420", VA = "0x67A420")]
	public Pvr_UnitySDKPlatformSetting()
	{
	}
}
[Token(Token = "0x2000137")]
public class Pvr_UnitySDKManager : MonoBehaviour
{
	[Token(Token = "0x2000512")]
	public delegate void EntitlementCheckResult(int ReturnValue);

	[Token(Token = "0x2000513")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EAC5C", Offset = "0x2EAC5C")]
	private sealed class <ToastManager>d__100 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private int <>1__state;

		[Token(Token = "0x4001DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private object <>2__current;

		[Token(Token = "0x4001DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float time;

		[Token(Token = "0x4001DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int type;

		[Token(Token = "0x4001DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Pvr_UnitySDKManager <>4__this;

		[Token(Token = "0x4001DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool state;

		[Token(Token = "0x1700039C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001CFB")]
			[Address(RVA = "0x67A190", Offset = "0x67A190", VA = "0x67A190", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700039D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001CFD")]
			[Address(RVA = "0x67A220", Offset = "0x67A220", VA = "0x67A220", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001CF8")]
		[Address(RVA = "0x672FAC", Offset = "0x672FAC", VA = "0x672FAC")]
		[DebuggerHidden]
		public <ToastManager>d__100(int <>1__state)
		{
		}

		[Token(Token = "0x6001CF9")]
		[Address(RVA = "0x679FD0", Offset = "0x679FD0", VA = "0x679FD0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001CFA")]
		[Address(RVA = "0x679FD4", Offset = "0x679FD4", VA = "0x679FD4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001CFC")]
		[Address(RVA = "0x67A198", Offset = "0x67A198", VA = "0x67A198", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000514")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EAC6C", Offset = "0x2EAC6C")]
	private sealed class <>c__DisplayClass105_0
	{
		[Token(Token = "0x4001DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Pvr_UnitySDKManager <>4__this;

		[Token(Token = "0x4001DC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Transform trans;

		[Token(Token = "0x6001CFE")]
		[Address(RVA = "0x674C2C", Offset = "0x674C2C", VA = "0x674C2C")]
		public <>c__DisplayClass105_0()
		{
		}

		[Token(Token = "0x6001CFF")]
		[Address(RVA = "0x6789F8", Offset = "0x6789F8", VA = "0x6789F8")]
		internal void <SetProperty>b__0()
		{
		}
	}

	[Token(Token = "0x2000515")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EAC7C", Offset = "0x2EAC7C")]
	private sealed class <G3TipsManager>d__109 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001DC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private int <>1__state;

		[Token(Token = "0x4001DC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private object <>2__current;

		[Token(Token = "0x4001DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float time;

		[Token(Token = "0x4001DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public GameObject tip;

		[Token(Token = "0x1700039E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001D03")]
			[Address(RVA = "0x678B54", Offset = "0x678B54", VA = "0x678B54", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700039F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001D05")]
			[Address(RVA = "0x678BE4", Offset = "0x678BE4", VA = "0x678BE4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001D00")]
		[Address(RVA = "0x6750DC", Offset = "0x6750DC", VA = "0x6750DC")]
		[DebuggerHidden]
		public <G3TipsManager>d__109(int <>1__state)
		{
		}

		[Token(Token = "0x6001D01")]
		[Address(RVA = "0x678A78", Offset = "0x678A78", VA = "0x678A78", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001D02")]
		[Address(RVA = "0x678A7C", Offset = "0x678A7C", VA = "0x678A7C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001D04")]
		[Address(RVA = "0x678B5C", Offset = "0x678B5C", VA = "0x678B5C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000516")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EAC8C", Offset = "0x2EAC8C")]
	private sealed class <Start>d__122 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private int <>1__state;

		[Token(Token = "0x4001DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private object <>2__current;

		[Token(Token = "0x4001DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Pvr_UnitySDKManager <>4__this;

		[Token(Token = "0x170003A0")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001D09")]
			[Address(RVA = "0x679F38", Offset = "0x679F38", VA = "0x679F38", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003A1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001D0B")]
			[Address(RVA = "0x679FC8", Offset = "0x679FC8", VA = "0x679FC8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001D06")]
		[Address(RVA = "0x677948", Offset = "0x677948", VA = "0x677948")]
		[DebuggerHidden]
		public <Start>d__122(int <>1__state)
		{
		}

		[Token(Token = "0x6001D07")]
		[Address(RVA = "0x679AF4", Offset = "0x679AF4", VA = "0x679AF4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001D08")]
		[Address(RVA = "0x679AF8", Offset = "0x679AF8", VA = "0x679AF8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001D0A")]
		[Address(RVA = "0x679F40", Offset = "0x679F40", VA = "0x679F40", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000517")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EAC9C", Offset = "0x2EAC9C")]
	private sealed class <InitRenderThreadRoutine>d__123 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private int <>1__state;

		[Token(Token = "0x4001DCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private object <>2__current;

		[Token(Token = "0x4001DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <i>5__2;

		[Token(Token = "0x170003A2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001D0F")]
			[Address(RVA = "0x678FD8", Offset = "0x678FD8", VA = "0x678FD8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003A3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001D11")]
			[Address(RVA = "0x679068", Offset = "0x679068", VA = "0x679068", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001D0C")]
		[Address(RVA = "0x6779DC", Offset = "0x6779DC", VA = "0x6779DC")]
		[DebuggerHidden]
		public <InitRenderThreadRoutine>d__123(int <>1__state)
		{
		}

		[Token(Token = "0x6001D0D")]
		[Address(RVA = "0x678BEC", Offset = "0x678BEC", VA = "0x678BEC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001D0E")]
		[Address(RVA = "0x678BF0", Offset = "0x678BF0", VA = "0x678BF0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001D10")]
		[Address(RVA = "0x678FE0", Offset = "0x678FE0", VA = "0x678FE0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000518")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EACAC", Offset = "0x2EACAC")]
	private sealed class <OnResume>d__136 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private int <>1__state;

		[Token(Token = "0x4001DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private object <>2__current;

		[Token(Token = "0x4001DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Pvr_UnitySDKManager <>4__this;

		[Token(Token = "0x4001DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int <ability6dof>5__2;

		[Token(Token = "0x4001DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int <waitNum>5__3;

		[Token(Token = "0x4001DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int <resetNum>5__4;

		[Token(Token = "0x4001DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int <i>5__5;

		[Token(Token = "0x170003A4")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001D15")]
			[Address(RVA = "0x679A5C", Offset = "0x679A5C", VA = "0x679A5C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003A5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001D17")]
			[Address(RVA = "0x679AEC", Offset = "0x679AEC", VA = "0x679AEC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001D12")]
		[Address(RVA = "0x6788E0", Offset = "0x6788E0", VA = "0x6788E0")]
		[DebuggerHidden]
		public <OnResume>d__136(int <>1__state)
		{
		}

		[Token(Token = "0x6001D13")]
		[Address(RVA = "0x679070", Offset = "0x679070", VA = "0x679070", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001D14")]
		[Address(RVA = "0x679074", Offset = "0x679074", VA = "0x679074", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001D16")]
		[Address(RVA = "0x679A64", Offset = "0x679A64", VA = "0x679A64", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000683")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static PlatForm platform;

	[Token(Token = "0x4000684")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static Pvr_UnitySDKManager sdk;

	[Token(Token = "0x4000685")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[HideInInspector]
	public float EyesAspect;

	[Token(Token = "0x4000686")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[HideInInspector]
	public int posStatus;

	[Token(Token = "0x4000687")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[HideInInspector]
	public bool ismirroring;

	[Token(Token = "0x4000688")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public Vector3 resetBasePos;

	[Token(Token = "0x4000689")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[HideInInspector]
	public int trackingmode;

	[Token(Token = "0x400068A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public int systemprop;

	[Token(Token = "0x400068B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[HideInInspector]
	public bool systemFPS;

	[Token(Token = "0x400068C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public float[] headData;

	[Token(Token = "0x400068D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private bool rotfoldout;

	[Token(Token = "0x400068E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	[SerializeField]
	private bool hmdOnlyrot;

	[Token(Token = "0x400068F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
	[SerializeField]
	private bool controllerOnlyrot;

	[Token(Token = "0x4000690")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private TrackingOrigin trackingOrigin;

	[Token(Token = "0x4000691")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool ResetTrackerOnLoad;

	[Token(Token = "0x4000692")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public Vector3 leftEyeOffset;

	[Token(Token = "0x4000693")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[HideInInspector]
	public Vector3 rightEyeOffset;

	[Token(Token = "0x4000694")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[HideInInspector]
	public Rect leftEyeRect;

	[Token(Token = "0x4000695")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[HideInInspector]
	public Rect rightEyeRect;

	[Token(Token = "0x4000696")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[HideInInspector]
	public Matrix4x4 leftEyeView;

	[Token(Token = "0x4000697")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[HideInInspector]
	public Matrix4x4 rightEyeView;

	[Token(Token = "0x4000698")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[HideInInspector]
	public Pvr_UnitySDKEditor pvr_UnitySDKEditor;

	[Token(Token = "0x4000699")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	[SerializeField]
	private bool vrModeEnabled;

	[Token(Token = "0x400069A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[HideInInspector]
	public Material Eyematerial;

	[Token(Token = "0x400069B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	[HideInInspector]
	public Material Middlematerial;

	[Token(Token = "0x400069C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EF534", Offset = "0x2EF534")]
	private bool <picovrTriggered>k__BackingField;

	[Token(Token = "0x400069D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x109")]
	[HideInInspector]
	public bool newPicovrTriggered;

	[Token(Token = "0x400069E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10A")]
	[SerializeField]
	private bool showFPS;

	[Token(Token = "0x400069F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	[HideInInspector]
	public Vector3 neckOffset;

	[Token(Token = "0x40006A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[SerializeField]
	private bool pVRNeck;

	[Token(Token = "0x40006A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x119")]
	[HideInInspector]
	public bool UseCustomNeckPara;

	[Token(Token = "0x40006A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11A")]
	[HideInInspector]
	public bool onResume;

	[Token(Token = "0x40006A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11B")]
	[HideInInspector]
	public bool isEnterVRMode;

	[Token(Token = "0x40006A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	public bool isHasController;

	[Token(Token = "0x40006A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public Pvr_UnitySDKConfigProfile pvr_UnitySDKConfig;

	[Token(Token = "0x40006A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	private GameObject calltoast;

	[Token(Token = "0x40006A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private GameObject msgtoast;

	[Token(Token = "0x40006A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	private GameObject lowhmdBatterytoast;

	[Token(Token = "0x40006A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private GameObject lowphoneBatterytoast;

	[Token(Token = "0x40006AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	private GameObject LowPhoneHealthtoast;

	[Token(Token = "0x40006AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private GameObject LowcontrollerBatterytoast;

	[Token(Token = "0x40006AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	private bool lowControllerpowerstate;

	[Token(Token = "0x40006AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private float controllerpowershowtime;

	[Token(Token = "0x40006AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
	private bool UseToast;

	[Token(Token = "0x40006AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private int iPhoneHMDModeEnabled;

	[Token(Token = "0x40006B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
	private GameObject G3LiteTips;

	[Token(Token = "0x40006B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	[SerializeField]
	private bool monoscopic;

	[Token(Token = "0x40006B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x151")]
	private bool mIsAndroid7;

	[Token(Token = "0x40006B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Func<bool> eventEnterVRMode;

	[Token(Token = "0x40006B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x152")]
	[HideInInspector]
	public bool ShowVideoSeethrough;

	[Token(Token = "0x40006B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x153")]
	[HideInInspector]
	public bool useRecommendedAntiAliasingLevel;

	[Token(Token = "0x40006B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
	public int SystemDebugFFRLevel;

	[Token(Token = "0x40006B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public int SystemFFRLevel;

	[Token(Token = "0x40006B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
	public int AppCheckResult;

	[Token(Token = "0x40006BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public SystemDisplayFrequency displayFrequency;

	[Token(Token = "0x40006BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
	public Action<float> DisplayRefreshRateChanged;

	[Token(Token = "0x40006BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public Action longPressHomeKeyAction;

	[Token(Token = "0x170000FC")]
	public static Pvr_UnitySDKManager SDK
	{
		[Token(Token = "0x6000904")]
		[Address(RVA = "0x66429C", Offset = "0x66429C", VA = "0x66429C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000FD")]
	public bool Rotfoldout
	{
		[Token(Token = "0x6000905")]
		[Address(RVA = "0x670D70", Offset = "0x670D70", VA = "0x670D70")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000906")]
		[Address(RVA = "0x670D78", Offset = "0x670D78", VA = "0x670D78")]
		set
		{
		}
	}

	[Token(Token = "0x170000FE")]
	public bool HmdOnlyrot
	{
		[Token(Token = "0x6000907")]
		[Address(RVA = "0x670D90", Offset = "0x670D90", VA = "0x670D90")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000908")]
		[Address(RVA = "0x670D98", Offset = "0x670D98", VA = "0x670D98")]
		set
		{
		}
	}

	[Token(Token = "0x170000FF")]
	public bool ControllerOnlyrot
	{
		[Token(Token = "0x6000909")]
		[Address(RVA = "0x670DB0", Offset = "0x670DB0", VA = "0x670DB0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600090A")]
		[Address(RVA = "0x670DB8", Offset = "0x670DB8", VA = "0x670DB8")]
		set
		{
		}
	}

	[Token(Token = "0x17000100")]
	public TrackingOrigin TrackingOrigin
	{
		[Token(Token = "0x600090B")]
		[Address(RVA = "0x670DD0", Offset = "0x670DD0", VA = "0x670DD0")]
		get
		{
			return default(TrackingOrigin);
		}
		[Token(Token = "0x600090C")]
		[Address(RVA = "0x670DD8", Offset = "0x670DD8", VA = "0x670DD8")]
		set
		{
		}
	}

	[Token(Token = "0x17000101")]
	[HideInInspector]
	public bool VRModeEnabled
	{
		[Token(Token = "0x6000910")]
		[Address(RVA = "0x670EF8", Offset = "0x670EF8", VA = "0x670EF8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000911")]
		[Address(RVA = "0x665C50", Offset = "0x665C50", VA = "0x665C50")]
		set
		{
		}
	}

	[Token(Token = "0x17000102")]
	[HideInInspector]
	public bool picovrTriggered
	{
		[Token(Token = "0x6000912")]
		[Address(RVA = "0x670F00", Offset = "0x670F00", VA = "0x670F00")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA2FC", Offset = "0x2FA2FC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000913")]
		[Address(RVA = "0x670F08", Offset = "0x670F08", VA = "0x670F08")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA30C", Offset = "0x2FA30C")]
		set
		{
		}
	}

	[Token(Token = "0x17000103")]
	public bool ShowFPS
	{
		[Token(Token = "0x6000914")]
		[Address(RVA = "0x670F10", Offset = "0x670F10", VA = "0x670F10")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000915")]
		[Address(RVA = "0x670F18", Offset = "0x670F18", VA = "0x670F18")]
		set
		{
		}
	}

	[Token(Token = "0x17000104")]
	public bool PVRNeck
	{
		[Token(Token = "0x6000916")]
		[Address(RVA = "0x670F30", Offset = "0x670F30", VA = "0x670F30")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000917")]
		[Address(RVA = "0x670F38", Offset = "0x670F38", VA = "0x670F38")]
		set
		{
		}
	}

	[Token(Token = "0x17000105")]
	[HideInInspector]
	public bool Monoscopic
	{
		[Token(Token = "0x6000918")]
		[Address(RVA = "0x670F50", Offset = "0x670F50", VA = "0x670F50")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000919")]
		[Address(RVA = "0x670F58", Offset = "0x670F58", VA = "0x670F58")]
		set
		{
		}
	}

	[Token(Token = "0x1400002C")]
	public static event EntitlementCheckResult EntitlementCheckResultEvent
	{
		[Token(Token = "0x600091A")]
		[Address(RVA = "0x670F7C", Offset = "0x670F7C", VA = "0x670F7C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA31C", Offset = "0x2FA31C")]
		add
		{
		}
		[Token(Token = "0x600091B")]
		[Address(RVA = "0x6710B8", Offset = "0x6710B8", VA = "0x6710B8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA32C", Offset = "0x2FA32C")]
		remove
		{
		}
	}

	[Token(Token = "0x600090D")]
	[Address(RVA = "0x670E04", Offset = "0x670E04", VA = "0x670E04")]
	public void ChangeDefaultCustomRtSize(int w, int h)
	{
	}

	[Token(Token = "0x600090E")]
	[Address(RVA = "0x667744", Offset = "0x667744", VA = "0x667744")]
	public Vector3 EyeOffset(Eye eye)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600090F")]
	[Address(RVA = "0x670EE0", Offset = "0x670EE0", VA = "0x670EE0")]
	public Rect EyeRect(Eye eye)
	{
		return default(Rect);
	}

	[Token(Token = "0x600091C")]
	[Address(RVA = "0x6711F4", Offset = "0x6711F4", VA = "0x6711F4")]
	private bool SDKManagerInit()
	{
		return default(bool);
	}

	[Token(Token = "0x600091D")]
	[Address(RVA = "0x671390", Offset = "0x671390", VA = "0x671390")]
	private bool SDKManagerInitCoreAbility()
	{
		return default(bool);
	}

	[Token(Token = "0x600091E")]
	[Address(RVA = "0x671524", Offset = "0x671524", VA = "0x671524")]
	public void smsReceivedCallback(string msg)
	{
	}

	[Token(Token = "0x600091F")]
	[Address(RVA = "0x67256C", Offset = "0x67256C", VA = "0x67256C")]
	public void phoneStateCallback(string state)
	{
	}

	[Token(Token = "0x6000920")]
	[Address(RVA = "0x672AC4", Offset = "0x672AC4", VA = "0x672AC4")]
	public void phoneBatteryStateCallback(string state)
	{
	}

	[Token(Token = "0x6000921")]
	[Address(RVA = "0x672E38", Offset = "0x672E38", VA = "0x672E38")]
	public void hmdLowBatteryCallback(string level)
	{
	}

	[Token(Token = "0x6000922")]
	[Address(RVA = "0x671A7C", Offset = "0x671A7C", VA = "0x671A7C")]
	private string TransformNumber(string number)
	{
		return null;
	}

	[Token(Token = "0x6000923")]
	[Address(RVA = "0x672FA8", Offset = "0x672FA8", VA = "0x672FA8")]
	public void onHmdOrientationReseted()
	{
	}

	[Token(Token = "0x6000924")]
	[Address(RVA = "0x672488", Offset = "0x672488", VA = "0x672488")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2FA33C", Offset = "0x2FA33C")]
	private IEnumerator ToastManager(int type, bool state, float time)
	{
		return null;
	}

	[Token(Token = "0x6000925")]
	[Address(RVA = "0x672FCC", Offset = "0x672FCC", VA = "0x672FCC")]
	private void CheckControllerStateForG2(string state)
	{
	}

	[Token(Token = "0x6000926")]
	[Address(RVA = "0x6731AC", Offset = "0x6731AC", VA = "0x6731AC")]
	public void notificationCallback(string data)
	{
	}

	[Token(Token = "0x6000927")]
	[Address(RVA = "0x6748E0", Offset = "0x6748E0", VA = "0x6748E0")]
	private Sprite LoadSprite(Vector2 size, string filepath)
	{
		return null;
	}

	[Token(Token = "0x6000928")]
	[Address(RVA = "0x674A5C", Offset = "0x674A5C", VA = "0x674A5C")]
	private byte[] ReadTex(string path)
	{
		return null;
	}

	[Token(Token = "0x6000929")]
	[Address(RVA = "0x6736DC", Offset = "0x6736DC", VA = "0x6736DC")]
	private void SetProperty(int type, JsonData data, string value)
	{
	}

	[Token(Token = "0x600092A")]
	[Address(RVA = "0x673E28", Offset = "0x673E28", VA = "0x673E28")]
	private void SetBaseProperty(Transform trans, JsonData data, string value)
	{
	}

	[Token(Token = "0x600092B")]
	[Address(RVA = "0x674460", Offset = "0x674460", VA = "0x674460")]
	private void SetImageProperty(Transform image, JsonData data, string value)
	{
	}

	[Token(Token = "0x600092C")]
	[Address(RVA = "0x674C34", Offset = "0x674C34", VA = "0x674C34")]
	private void SetTextProperty(Transform text, JsonData data, string value)
	{
	}

	[Token(Token = "0x600092D")]
	[Address(RVA = "0x67482C", Offset = "0x67482C", VA = "0x67482C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2FA3B4", Offset = "0x2FA3B4")]
	private IEnumerator G3TipsManager(GameObject tip, float time)
	{
		return null;
	}

	[Token(Token = "0x600092E")]
	[Address(RVA = "0x675048", Offset = "0x675048", VA = "0x675048")]
	private float JsonToFloat(JsonData data)
	{
		return default(float);
	}

	[Token(Token = "0x600092F")]
	[Address(RVA = "0x6750FC", Offset = "0x6750FC", VA = "0x6750FC")]
	private bool SDKManagerInitFPS()
	{
		return default(bool);
	}

	[Token(Token = "0x6000930")]
	[Address(RVA = "0x6712F8", Offset = "0x6712F8", VA = "0x6712F8")]
	private bool SDKManagerInitConfigProfile()
	{
		return default(bool);
	}

	[Token(Token = "0x6000931")]
	[Address(RVA = "0x67532C", Offset = "0x67532C", VA = "0x67532C")]
	private bool SDKManagerInitEditor()
	{
		return default(bool);
	}

	[Token(Token = "0x6000932")]
	[Address(RVA = "0x675434", Offset = "0x675434", VA = "0x675434")]
	private bool SDKManagerInitPara()
	{
		return default(bool);
	}

	[Token(Token = "0x6000933")]
	[Address(RVA = "0x67543C", Offset = "0x67543C", VA = "0x67543C")]
	public void SDKManagerLongHomeKey()
	{
	}

	[Token(Token = "0x6000934")]
	[Address(RVA = "0x6755A8", Offset = "0x6755A8", VA = "0x6755A8")]
	private void setLongHomeKey()
	{
	}

	[Token(Token = "0x6000935")]
	[Address(RVA = "0x675ACC", Offset = "0x675ACC", VA = "0x675ACC")]
	public void verifyAPPCallback(string code)
	{
	}

	[Token(Token = "0x6000936")]
	[Address(RVA = "0x675EC4", Offset = "0x675EC4", VA = "0x675EC4")]
	public void IpdRefreshCallBack(string ipd)
	{
	}

	[Token(Token = "0x6000937")]
	[Address(RVA = "0x67604C", Offset = "0x67604C", VA = "0x67604C")]
	public void DisplayRefreshRateCallBack(string rate)
	{
	}

	[Token(Token = "0x6000938")]
	[Address(RVA = "0x676154", Offset = "0x676154", VA = "0x676154")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000939")]
	[Address(RVA = "0x6778BC", Offset = "0x6778BC", VA = "0x6778BC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2FA42C", Offset = "0x2FA42C")]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x600093A")]
	[Address(RVA = "0x677968", Offset = "0x677968", VA = "0x677968")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2FA4A4", Offset = "0x2FA4A4")]
	private IEnumerator InitRenderThreadRoutine()
	{
		return null;
	}

	[Token(Token = "0x600093B")]
	[Address(RVA = "0x6779FC", Offset = "0x6779FC", VA = "0x6779FC")]
	private void Update()
	{
	}

	[Token(Token = "0x600093C")]
	[Address(RVA = "0x677DC0", Offset = "0x677DC0", VA = "0x677DC0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600093D")]
	[Address(RVA = "0x677F94", Offset = "0x677F94", VA = "0x677F94")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600093E")]
	[Address(RVA = "0x678148", Offset = "0x678148", VA = "0x678148")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600093F")]
	[Address(RVA = "0x678150", Offset = "0x678150", VA = "0x678150")]
	private void OnPause()
	{
	}

	[Token(Token = "0x6000940")]
	[Address(RVA = "0x678450", Offset = "0x678450", VA = "0x678450")]
	private void OnApplicationPause(bool pause)
	{
	}

	[Token(Token = "0x6000941")]
	[Address(RVA = "0x678798", Offset = "0x678798", VA = "0x678798")]
	public void EnterVRMode()
	{
	}

	[Token(Token = "0x6000942")]
	[Address(RVA = "0x678230", Offset = "0x678230", VA = "0x678230")]
	public void LeaveVRMode()
	{
	}

	[Token(Token = "0x6000943")]
	[Address(RVA = "0x6788D8", Offset = "0x6788D8", VA = "0x6788D8")]
	public void SixDofForceQuit()
	{
	}

	[Token(Token = "0x6000944")]
	[Address(RVA = "0x676ED8", Offset = "0x676ED8", VA = "0x676ED8")]
	private void InitUI()
	{
	}

	[Token(Token = "0x6000945")]
	[Address(RVA = "0x677208", Offset = "0x677208", VA = "0x677208")]
	private void RefreshTextByLanguage()
	{
	}

	[Token(Token = "0x6000946")]
	[Address(RVA = "0x676950", Offset = "0x676950", VA = "0x676950")]
	private void LoadIsMirroringValue()
	{
	}

	[Token(Token = "0x6000947")]
	[Address(RVA = "0x67870C", Offset = "0x67870C", VA = "0x67870C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2FA51C", Offset = "0x2FA51C")]
	private IEnumerator OnResume()
	{
		return null;
	}

	[Token(Token = "0x6000948")]
	[Address(RVA = "0x678900", Offset = "0x678900", VA = "0x678900")]
	public Pvr_UnitySDKManager()
	{
	}
}
[Token(Token = "0x2000138")]
public class QuitGame : MonoBehaviour
{
	[Token(Token = "0x600094A")]
	[Address(RVA = "0x6866E8", Offset = "0x6866E8", VA = "0x6866E8")]
	private void Start()
	{
	}

	[Token(Token = "0x600094B")]
	[Address(RVA = "0x6866EC", Offset = "0x6866EC", VA = "0x6866EC")]
	private void Update()
	{
	}

	[Token(Token = "0x600094C")]
	[Address(RVA = "0x686714", Offset = "0x686714", VA = "0x686714")]
	public QuitGame()
	{
	}
}
[Token(Token = "0x2000139")]
public class Pvr_UnityEyeMask : MonoBehaviour
{
	[Token(Token = "0x2000519")]
	private class EyeMaskData
	{
		[Token(Token = "0x4001DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Eye eyeSide;

		[Token(Token = "0x4001DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Camera camera;

		[Token(Token = "0x4001DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CommandBuffer cmdBuf;

		[Token(Token = "0x6001D18")]
		[Address(RVA = "0x1036D70", Offset = "0x1036D70", VA = "0x1036D70")]
		public EyeMaskData()
		{
		}
	}

	[Token(Token = "0x40006BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Shader eyeMaskShader;

	[Token(Token = "0x40006BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Material eyeMaskMaterial;

	[Token(Token = "0x40006BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Mesh eyeMaskMeshLeft;

	[Token(Token = "0x40006C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Mesh eyeMaskMeshRight;

	[Token(Token = "0x40006C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Mesh eyeMaskMeshBoth;

	[Token(Token = "0x40006C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float zDir;

	[Token(Token = "0x40006C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Color eyeMaskColor;

	[Token(Token = "0x40006C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private List<EyeMaskData> cameraDataList;

	[Token(Token = "0x600094D")]
	[Address(RVA = "0x9BBDDC", Offset = "0x9BBDDC", VA = "0x9BBDDC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600094E")]
	[Address(RVA = "0x9BBEB8", Offset = "0x9BBEB8", VA = "0x9BBEB8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600094F")]
	[Address(RVA = "0x9BD04C", Offset = "0x9BD04C", VA = "0x9BD04C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000950")]
	[Address(RVA = "0x9BC6A4", Offset = "0x9BC6A4", VA = "0x9BC6A4")]
	private void CreateCommandBuffer()
	{
	}

	[Token(Token = "0x6000951")]
	[Address(RVA = "0x9BDF98", Offset = "0x9BDF98", VA = "0x9BDF98")]
	private void OnCustomPreRender(Camera cam)
	{
	}

	[Token(Token = "0x6000952")]
	[Address(RVA = "0x9BD4B0", Offset = "0x9BD4B0", VA = "0x9BD4B0")]
	private Mesh GetStencilMesh(Eye eyeSide)
	{
		return null;
	}

	[Token(Token = "0x6000953")]
	[Address(RVA = "0x9BD964", Offset = "0x9BD964", VA = "0x9BD964")]
	private Mesh GetStencilMeshBoth(Mesh leftMesh, Mesh rightMesh)
	{
		return null;
	}

	[Token(Token = "0x6000954")]
	[Address(RVA = "0x9BD368", Offset = "0x9BD368", VA = "0x9BD368")]
	private bool VerifyCommadBuffer()
	{
		return default(bool);
	}

	[Token(Token = "0x6000955")]
	[Address(RVA = "0x9BC1B4", Offset = "0x9BC1B4", VA = "0x9BC1B4")]
	private void PrepareCameras()
	{
	}

	[Token(Token = "0x6000956")]
	[Address(RVA = "0x9BE190", Offset = "0x9BE190", VA = "0x9BE190")]
	private void AddCameraCommandBuffer(EyeMaskData data)
	{
	}

	[Token(Token = "0x6000957")]
	[Address(RVA = "0x9BD27C", Offset = "0x9BD27C", VA = "0x9BD27C")]
	private void RemoveCameraCommandBuffer(EyeMaskData data)
	{
	}

	[Token(Token = "0x6000958")]
	[Address(RVA = "0x9BD2DC", Offset = "0x9BD2DC", VA = "0x9BD2DC")]
	private void CleanEyeMask()
	{
	}

	[Token(Token = "0x6000959")]
	[Address(RVA = "0x9BE1F0", Offset = "0x9BE1F0", VA = "0x9BE1F0")]
	public Pvr_UnityEyeMask()
	{
	}
}
[Token(Token = "0x200013A")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x2E6AFC", Offset = "0x2E6AFC")]
public class Pvr_UnitySDKEye : MonoBehaviour
{
	[Token(Token = "0x40006C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static List<Pvr_UnitySDKEye> Instances;

	[Token(Token = "0x40006C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Eye eyeSide;

	[Token(Token = "0x40006C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EF5F4", Offset = "0x2EF5F4")]
	private Camera <eyecamera>k__BackingField;

	[Token(Token = "0x40006C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private int eyeCameraOriginCullingMask;

	[Token(Token = "0x40006C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private CameraClearFlags eyeCameraOriginClearFlag;

	[Token(Token = "0x40006CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Color eyeCameraOriginBackgroundColor;

	[Token(Token = "0x40006CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int lastBoundaryState;

	[Token(Token = "0x40006CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Matrix4x4 realProj;

	[Token(Token = "0x40006CD")]
	private const int bufferSize = 3;

	[Token(Token = "0x40006CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int IDIndex;

	[Token(Token = "0x40006CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private RenderEventType eventType;

	[Token(Token = "0x40006D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private int previousId;

	[Token(Token = "0x40006D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static bool setLevel;

	[Token(Token = "0x40006D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private Material mat_Vignette;

	[Token(Token = "0x17000106")]
	public Camera eyecamera
	{
		[Token(Token = "0x600095A")]
		[Address(RVA = "0x665D18", Offset = "0x665D18", VA = "0x665D18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA594", Offset = "0x2FA594")]
		get
		{
			return null;
		}
		[Token(Token = "0x600095B")]
		[Address(RVA = "0x665D20", Offset = "0x665D20", VA = "0x665D20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA5A4", Offset = "0x2FA5A4")]
		private set
		{
		}
	}

	[Token(Token = "0x600095C")]
	[Address(RVA = "0x665D28", Offset = "0x665D28", VA = "0x665D28")]
	private void Awake()
	{
	}

	[Token(Token = "0x600095D")]
	[Address(RVA = "0x665E00", Offset = "0x665E00", VA = "0x665E00")]
	private void Start()
	{
	}

	[Token(Token = "0x600095E")]
	[Address(RVA = "0x6665D0", Offset = "0x6665D0", VA = "0x6665D0")]
	private void Update()
	{
	}

	[Token(Token = "0x600095F")]
	[Address(RVA = "0x666928", Offset = "0x666928", VA = "0x666928")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000960")]
	[Address(RVA = "0x666A4C", Offset = "0x666A4C", VA = "0x666A4C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000961")]
	[Address(RVA = "0x666B70", Offset = "0x666B70", VA = "0x666B70")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000962")]
	[Address(RVA = "0x666C2C", Offset = "0x666C2C", VA = "0x666C2C")]
	public void MyPreRender(Camera camera)
	{
	}

	[Token(Token = "0x6000963")]
	[Address(RVA = "0x666EC4", Offset = "0x666EC4", VA = "0x666EC4")]
	public void MyPreRender(ScriptableRenderContext context, Camera camera)
	{
	}

	[Token(Token = "0x6000964")]
	[Address(RVA = "0x666F90", Offset = "0x666F90", VA = "0x666F90")]
	public void MyPostRender(ScriptableRenderContext context, Camera camera)
	{
	}

	[Token(Token = "0x6000965")]
	[Address(RVA = "0x666CF8", Offset = "0x666CF8", VA = "0x666CF8")]
	private void OnPreRender()
	{
	}

	[Token(Token = "0x6000966")]
	[Address(RVA = "0x66705C", Offset = "0x66705C", VA = "0x66705C")]
	private void OnPostRender()
	{
	}

	[Token(Token = "0x6000967")]
	[Address(RVA = "0x667518", Offset = "0x667518", VA = "0x667518")]
	public void EyeRender()
	{
	}

	[Token(Token = "0x6000968")]
	[Address(RVA = "0x665F30", Offset = "0x665F30", VA = "0x665F30")]
	private void Setup(Eye eyeSide)
	{
	}

	[Token(Token = "0x6000969")]
	[Address(RVA = "0x6661FC", Offset = "0x6661FC", VA = "0x6661FC")]
	private void SetupUpdate()
	{
	}

	[Token(Token = "0x600096A")]
	[Address(RVA = "0x66776C", Offset = "0x66776C", VA = "0x66776C")]
	public void RefreshCameraPosition(float ipd)
	{
	}

	[Token(Token = "0x600096B")]
	[Address(RVA = "0x667990", Offset = "0x667990", VA = "0x667990")]
	private void DrawVignetteLine()
	{
	}

	[Token(Token = "0x600096C")]
	[Address(RVA = "0x667AEC", Offset = "0x667AEC", VA = "0x667AEC")]
	private void vignette()
	{
	}

	[Token(Token = "0x600096D")]
	[Address(RVA = "0x6672C8", Offset = "0x6672C8", VA = "0x6672C8")]
	private void SetFFRParameter()
	{
	}

	[Token(Token = "0x600096E")]
	[Address(RVA = "0x667EDC", Offset = "0x667EDC", VA = "0x667EDC")]
	public Pvr_UnitySDKEye()
	{
	}
}
[Token(Token = "0x200013B")]
public class Pvr_UnitySDKEyeManager : MonoBehaviour
{
	[Token(Token = "0x200051A")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EACBC", Offset = "0x2EACBC")]
	private sealed class <EndOfFrame>d__42 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private int <>1__state;

		[Token(Token = "0x4001DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private object <>2__current;

		[Token(Token = "0x4001DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Pvr_UnitySDKEyeManager <>4__this;

		[Token(Token = "0x170003A6")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001D1C")]
			[Address(RVA = "0x66E57C", Offset = "0x66E57C", VA = "0x66E57C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003A7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001D1E")]
			[Address(RVA = "0x66E60C", Offset = "0x66E60C", VA = "0x66E60C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001D19")]
		[Address(RVA = "0x66ACB4", Offset = "0x66ACB4", VA = "0x66ACB4")]
		[DebuggerHidden]
		public <EndOfFrame>d__42(int <>1__state)
		{
		}

		[Token(Token = "0x6001D1A")]
		[Address(RVA = "0x66BE80", Offset = "0x66BE80", VA = "0x66BE80", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001D1B")]
		[Address(RVA = "0x66BE84", Offset = "0x66BE84", VA = "0x66BE84", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001D1D")]
		[Address(RVA = "0x66E584", Offset = "0x66E584", VA = "0x66E584", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200051B")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EACCC", Offset = "0x2EACCC")]
	private sealed class <ScreenFade>d__65 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private int <>1__state;

		[Token(Token = "0x4001DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private object <>2__current;

		[Token(Token = "0x4001DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Pvr_UnitySDKEyeManager <>4__this;

		[Token(Token = "0x4001DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float startAlpha;

		[Token(Token = "0x4001DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float endAlpha;

		[Token(Token = "0x4001DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float <elapsedTime>5__2;

		[Token(Token = "0x170003A8")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001D22")]
			[Address(RVA = "0x66E778", Offset = "0x66E778", VA = "0x66E778", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003A9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001D24")]
			[Address(RVA = "0x66E808", Offset = "0x66E808", VA = "0x66E808", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001D1F")]
		[Address(RVA = "0x66BDCC", Offset = "0x66BDCC", VA = "0x66BDCC")]
		[DebuggerHidden]
		public <ScreenFade>d__65(int <>1__state)
		{
		}

		[Token(Token = "0x6001D20")]
		[Address(RVA = "0x66E614", Offset = "0x66E614", VA = "0x66E614", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001D21")]
		[Address(RVA = "0x66E618", Offset = "0x66E618", VA = "0x66E618", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001D23")]
		[Address(RVA = "0x66E780", Offset = "0x66E780", VA = "0x66E780", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40006D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Pvr_UnitySDKEyeManager instance;

	[Token(Token = "0x40006D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Pvr_UnitySDKEye[] eyes;

	[Token(Token = "0x40006D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[HideInInspector]
	public Camera LeftEyeCamera;

	[Token(Token = "0x40006D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[HideInInspector]
	public Camera RightEyeCamera;

	[Token(Token = "0x40006D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public Camera MonoEyeCamera;

	[Token(Token = "0x40006D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[HideInInspector]
	public Camera BothEyeCamera;

	[Token(Token = "0x40006D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int MonoEyeTextureID;

	[Token(Token = "0x40006DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private readonly int WaitSplashScreenFrames;

	[Token(Token = "0x40006DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int frameNum;

	[Token(Token = "0x40006DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	[HideInInspector]
	private bool foveatedRendering;

	[Token(Token = "0x40006DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[HideInInspector]
	private EFoveationLevel foveationLevel;

	[Token(Token = "0x40006DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int eyeTextureId;

	[Token(Token = "0x40006DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private RenderEventType eventType;

	[Token(Token = "0x40006E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Pvr_UnitySDKEyeOverlay compositeLayer;

	[Token(Token = "0x40006E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int overlayLayerDepth;

	[Token(Token = "0x40006E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int underlayLayerDepth;

	[Token(Token = "0x40006E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool isHeadLocked;

	[Token(Token = "0x40006E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private int layerFlags;

	[Token(Token = "0x40006E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[HideInInspector]
	public bool EyeTracking;

	[Token(Token = "0x40006E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[HideInInspector]
	public Vector3 eyePoint;

	[Token(Token = "0x40006E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private EyeTrackingData eyePoseData;

	[Token(Token = "0x40006E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	[HideInInspector]
	public static bool supportEyeTracking;

	[Token(Token = "0x40006E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EF6D4", Offset = "0x2EF6D4")]
	public bool screenFade;

	[Token(Token = "0x40006EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EF738", Offset = "0x2EF738")]
	public float fadeTime;

	[Token(Token = "0x40006EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EF788", Offset = "0x2EF788")]
	public Color fadeColor;

	[Token(Token = "0x40006EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public int renderQueue;

	[Token(Token = "0x40006ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	private MeshRenderer fadeMeshRenderer;

	[Token(Token = "0x40006EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private MeshFilter fadeMeshFilter;

	[Token(Token = "0x40006EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	private Material fadeMaterial;

	[Token(Token = "0x40006F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private float elapsedTime;

	[Token(Token = "0x40006F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	private bool isFading;

	[Token(Token = "0x40006F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private float currentAlpha;

	[Token(Token = "0x40006F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	private float nowFadeAlpha;

	[Token(Token = "0x17000107")]
	public static Pvr_UnitySDKEyeManager Instance
	{
		[Token(Token = "0x6000970")]
		[Address(RVA = "0x667D84", Offset = "0x667D84", VA = "0x667D84")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000108")]
	public Pvr_UnitySDKEye[] Eyes
	{
		[Token(Token = "0x6000971")]
		[Address(RVA = "0x668054", Offset = "0x668054", VA = "0x668054")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000109")]
	[HideInInspector]
	public bool FoveatedRendering
	{
		[Token(Token = "0x6000972")]
		[Address(RVA = "0x66811C", Offset = "0x66811C", VA = "0x66811C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000973")]
		[Address(RVA = "0x668124", Offset = "0x668124", VA = "0x668124")]
		set
		{
		}
	}

	[Token(Token = "0x1700010A")]
	[HideInInspector]
	public EFoveationLevel FoveationLevel
	{
		[Token(Token = "0x6000974")]
		[Address(RVA = "0x668184", Offset = "0x668184", VA = "0x668184")]
		get
		{
			return default(EFoveationLevel);
		}
		[Token(Token = "0x6000975")]
		[Address(RVA = "0x66818C", Offset = "0x66818C", VA = "0x66818C")]
		set
		{
		}
	}

	[Token(Token = "0x6000976")]
	[Address(RVA = "0x66819C", Offset = "0x66819C", VA = "0x66819C")]
	private void SetCameraEnableEditor()
	{
	}

	[Token(Token = "0x6000977")]
	[Address(RVA = "0x668524", Offset = "0x668524", VA = "0x668524")]
	private void SetCamerasEnableByStereoRendering()
	{
	}

	[Token(Token = "0x6000978")]
	[Address(RVA = "0x668640", Offset = "0x668640", VA = "0x668640")]
	private void SetupMonoCamera()
	{
	}

	[Token(Token = "0x6000979")]
	[Address(RVA = "0x6687CC", Offset = "0x6687CC", VA = "0x6687CC")]
	private void SetupUpdate()
	{
	}

	[Token(Token = "0x600097A")]
	[Address(RVA = "0x668918", Offset = "0x668918", VA = "0x668918")]
	private void MonoEyeRender()
	{
	}

	[Token(Token = "0x600097B")]
	[Address(RVA = "0x668B44", Offset = "0x668B44", VA = "0x668B44")]
	private void Awake()
	{
	}

	[Token(Token = "0x600097C")]
	[Address(RVA = "0x669788", Offset = "0x669788", VA = "0x669788")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600097D")]
	[Address(RVA = "0x66A228", Offset = "0x66A228", VA = "0x66A228")]
	private void Start()
	{
	}

	[Token(Token = "0x600097E")]
	[Address(RVA = "0x66A244", Offset = "0x66A244", VA = "0x66A244")]
	private void Update()
	{
	}

	[Token(Token = "0x600097F")]
	[Address(RVA = "0x66A614", Offset = "0x66A614", VA = "0x66A614")]
	private void OnPause()
	{
	}

	[Token(Token = "0x6000980")]
	[Address(RVA = "0x66A730", Offset = "0x66A730", VA = "0x66A730")]
	public void MyPostRender(ScriptableRenderContext context, Camera camera)
	{
	}

	[Token(Token = "0x6000981")]
	[Address(RVA = "0x66A954", Offset = "0x66A954", VA = "0x66A954")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000982")]
	[Address(RVA = "0x66AA4C", Offset = "0x66AA4C", VA = "0x66AA4C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000983")]
	[Address(RVA = "0x66A7F8", Offset = "0x66A7F8", VA = "0x66A7F8")]
	private void OnPostRender()
	{
	}

	[Token(Token = "0x6000984")]
	[Address(RVA = "0x66AC28", Offset = "0x66AC28", VA = "0x66AC28")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2FA5B4", Offset = "0x2FA5B4")]
	private IEnumerator EndOfFrame()
	{
		return null;
	}

	[Token(Token = "0x6000985")]
	[Address(RVA = "0x66ACD4", Offset = "0x66ACD4", VA = "0x66ACD4")]
	private void CreateExternalSurface(Pvr_UnitySDKEyeOverlay overlayInstance, int layerDepth)
	{
	}

	[Token(Token = "0x6000986")]
	[Address(RVA = "0x66B19C", Offset = "0x66B19C", VA = "0x66B19C")]
	public bool SetEyeTrackingMode()
	{
		return default(bool);
	}

	[Token(Token = "0x6000987")]
	[Address(RVA = "0x66B5C4", Offset = "0x66B5C4", VA = "0x66B5C4")]
	public Vector3 GetEyeTrackingPos()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000988")]
	[Address(RVA = "0x66B888", Offset = "0x66B888", VA = "0x66B888")]
	private EyeDeviceInfo GetDeviceInfo()
	{
		return default(EyeDeviceInfo);
	}

	[Token(Token = "0x6000989")]
	[Address(RVA = "0x669034", Offset = "0x669034", VA = "0x669034")]
	private void CreateFadeMesh()
	{
	}

	[Token(Token = "0x600098A")]
	[Address(RVA = "0x66AA50", Offset = "0x66AA50", VA = "0x66AA50")]
	private void DestoryFadeMesh()
	{
	}

	[Token(Token = "0x600098B")]
	[Address(RVA = "0x669780", Offset = "0x669780", VA = "0x669780")]
	public void SetCurrentAlpha(float alpha)
	{
	}

	[Token(Token = "0x600098C")]
	[Address(RVA = "0x66A158", Offset = "0x66A158", VA = "0x66A158")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2FA62C", Offset = "0x2FA62C")]
	private IEnumerator ScreenFade(float startAlpha, float endAlpha)
	{
		return null;
	}

	[Token(Token = "0x600098D")]
	[Address(RVA = "0x66BBFC", Offset = "0x66BBFC", VA = "0x66BBFC")]
	private void SetMaterialAlpha()
	{
	}

	[Token(Token = "0x600098E")]
	[Address(RVA = "0x66A150", Offset = "0x66A150", VA = "0x66A150")]
	public bool GfxDeviceAdvanceFrameGLES()
	{
		return default(bool);
	}

	[Token(Token = "0x600098F")]
	[Address(RVA = "0x66BDEC", Offset = "0x66BDEC", VA = "0x66BDEC")]
	public Pvr_UnitySDKEyeManager()
	{
	}
}
[Token(Token = "0x200013C")]
public class Pvr_UnitySDKEyeOverlay : MonoBehaviour, IComparable<Pvr_UnitySDKEyeOverlay>
{
	[Token(Token = "0x200051C")]
	public delegate void ExternalAndroidSurfaceObjectCreated();

	[Token(Token = "0x200051D")]
	public enum OverlayShape
	{
		[Token(Token = "0x4001DE3")]
		Quad,
		[Token(Token = "0x4001DE4")]
		Cylinder,
		[Token(Token = "0x4001DE5")]
		Equirect
	}

	[Token(Token = "0x200051E")]
	public enum OverlayType
	{
		[Token(Token = "0x4001DE7")]
		Overlay,
		[Token(Token = "0x4001DE8")]
		Underlay
	}

	[Token(Token = "0x200051F")]
	public enum OverlayTexFilterMode
	{
		[Token(Token = "0x4001DEA")]
		NotCare,
		[Token(Token = "0x4001DEB")]
		Nearest,
		[Token(Token = "0x4001DEC")]
		Linear,
		[Token(Token = "0x4001DED")]
		Nearest_Mipmap_Nearest,
		[Token(Token = "0x4001DEE")]
		Linear_Mipmap_Nearest,
		[Token(Token = "0x4001DEF")]
		Nearest_Mipmap_Linear,
		[Token(Token = "0x4001DF0")]
		Linear_Mipmap_Linear
	}

	[Token(Token = "0x40006F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static List<Pvr_UnitySDKEyeOverlay> Instances;

	[Token(Token = "0x40006F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public int layerIndex;

	[Token(Token = "0x40006F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public OverlayType overlayType;

	[Token(Token = "0x40006F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public OverlayShape overlayShape;

	[Token(Token = "0x40006F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform layerTransform;

	[Token(Token = "0x40006F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Texture[] layerTextures;

	[Token(Token = "0x40006FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int[] layerTextureIds;

	[Token(Token = "0x40006FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Matrix4x4[] MVMatrixs;

	[Token(Token = "0x40006FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector3[] ModelScales;

	[Token(Token = "0x40006FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Quaternion[] ModelRotations;

	[Token(Token = "0x40006FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3[] ModelTranslations;

	[Token(Token = "0x40006FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Quaternion[] CameraRotations;

	[Token(Token = "0x4000700")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Vector3[] CameraTranslations;

	[Token(Token = "0x4000701")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Camera[] layerEyeCamera;

	[Token(Token = "0x4000702")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool overrideColorScaleAndOffset;

	[Token(Token = "0x4000703")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public Vector4 colorScale;

	[Token(Token = "0x4000704")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public Vector4 colorOffset;

	[Token(Token = "0x4000705")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private Vector4 overlayLayerColorScaleDefault;

	[Token(Token = "0x4000706")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private Vector4 overlayLayerColorOffsetDefault;

	[Token(Token = "0x4000707")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public bool isExternalAndroidSurface;

	[Token(Token = "0x4000708")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public IntPtr externalAndroidSurfaceObject;

	[Token(Token = "0x4000709")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public ExternalAndroidSurfaceObjectCreated externalAndroidSurfaceObjectCreated;

	[Token(Token = "0x6000991")]
	[Address(RVA = "0x66E810", Offset = "0x66E810", VA = "0x66E810", Slot = "4")]
	public int CompareTo(Pvr_UnitySDKEyeOverlay other)
	{
		return default(int);
	}

	[Token(Token = "0x6000992")]
	[Address(RVA = "0x66E844", Offset = "0x66E844", VA = "0x66E844")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000993")]
	[Address(RVA = "0x66EF88", Offset = "0x66EF88", VA = "0x66EF88")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000994")]
	[Address(RVA = "0x66FAD8", Offset = "0x66FAD8", VA = "0x66FAD8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000995")]
	[Address(RVA = "0x669DAC", Offset = "0x669DAC", VA = "0x669DAC")]
	public void RefreshCamera()
	{
	}

	[Token(Token = "0x6000996")]
	[Address(RVA = "0x66ED58", Offset = "0x66ED58", VA = "0x66ED58")]
	private void InitializeBuffer()
	{
	}

	[Token(Token = "0x6000997")]
	[Address(RVA = "0x66EF8C", Offset = "0x66EF8C", VA = "0x66EF8C")]
	private void UpdateCoords()
	{
	}

	[Token(Token = "0x6000998")]
	[Address(RVA = "0x6700DC", Offset = "0x6700DC", VA = "0x6700DC")]
	public void SetTexture(Texture texture)
	{
	}

	[Token(Token = "0x6000999")]
	[Address(RVA = "0x67018C", Offset = "0x67018C", VA = "0x67018C")]
	public void SetLayerColorScaleAndOffset(Vector4 scale, Vector4 offset)
	{
	}

	[Token(Token = "0x600099A")]
	[Address(RVA = "0x66E544", Offset = "0x66E544", VA = "0x66E544")]
	public Vector4 GetLayerColorScale()
	{
		return default(Vector4);
	}

	[Token(Token = "0x600099B")]
	[Address(RVA = "0x66E560", Offset = "0x66E560", VA = "0x66E560")]
	public Vector4 GetLayerColorOffset()
	{
		return default(Vector4);
	}

	[Token(Token = "0x600099C")]
	[Address(RVA = "0x6701C0", Offset = "0x6701C0", VA = "0x6701C0")]
	public Pvr_UnitySDKEyeOverlay()
	{
	}
}
[Token(Token = "0x200013D")]
public class Pvr_UnitySDKRender
{
	[Token(Token = "0x400070A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Pvr_UnitySDKRender instance;

	[Token(Token = "0x400070B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public AndroidJavaObject activity;

	[Token(Token = "0x400070C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static AndroidJavaClass javaVrActivityClass;

	[Token(Token = "0x400070D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static AndroidJavaClass javaSysActivityClass;

	[Token(Token = "0x400070E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static AndroidJavaClass javaserviceClass;

	[Token(Token = "0x400070F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static AndroidJavaClass javaVrActivityLongReceiver;

	[Token(Token = "0x4000710")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public static AndroidJavaClass javaVrActivityClientClass;

	[Token(Token = "0x4000711")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private bool canConnecttoActivity;

	[Token(Token = "0x4000712")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
	private bool isInitrenderThread;

	[Token(Token = "0x4000713")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private string model;

	[Token(Token = "0x4000714")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Vector2 prefinger1;

	[Token(Token = "0x4000715")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Vector2 prefinger2;

	[Token(Token = "0x4000716")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int eyeTextureCount;

	[Token(Token = "0x4000717")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public RenderTexture[] eyeTextures;

	[Token(Token = "0x4000718")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int[] eyeTextureIds;

	[Token(Token = "0x4000719")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int currEyeTextureIdx;

	[Token(Token = "0x400071A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int nextEyeTextureIdx;

	[Token(Token = "0x400071B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int lastEyeTextureIdx;

	[Token(Token = "0x400071C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool isSwitchSDK;

	[Token(Token = "0x400071D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int RenderviewNumber;

	[Token(Token = "0x400071E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public bool isFirstStartup;

	[Token(Token = "0x400071F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	public bool isShellMode;

	[Token(Token = "0x4000720")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private StereoRenderingPathPico stereoRenderPath;

	[Token(Token = "0x4000721")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EF7D8", Offset = "0x2EF7D8")]
	private SDKStereoRendering <StereoRendering>k__BackingField;

	[Token(Token = "0x4000722")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float rtScaleFactor;

	[Token(Token = "0x4000723")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float eyeVFov;

	[Token(Token = "0x4000724")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float eyeHFov;

	[Token(Token = "0x1700010B")]
	public static Pvr_UnitySDKRender Instance
	{
		[Token(Token = "0x600099E")]
		[Address(RVA = "0x664DF8", Offset = "0x664DF8", VA = "0x664DF8")]
		get
		{
			return null;
		}
		[Token(Token = "0x600099F")]
		[Address(RVA = "0x67B694", Offset = "0x67B694", VA = "0x67B694")]
		set
		{
		}
	}

	[Token(Token = "0x1700010C")]
	public StereoRenderingPathPico StereoRenderPath
	{
		[Token(Token = "0x60009A1")]
		[Address(RVA = "0x67C378", Offset = "0x67C378", VA = "0x67C378")]
		get
		{
			return default(StereoRenderingPathPico);
		}
	}

	[Token(Token = "0x1700010D")]
	public SDKStereoRendering StereoRendering
	{
		[Token(Token = "0x60009A2")]
		[Address(RVA = "0x67C380", Offset = "0x67C380", VA = "0x67C380")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA6A4", Offset = "0x2FA6A4")]
		get
		{
			return null;
		}
		[Token(Token = "0x60009A3")]
		[Address(RVA = "0x67C388", Offset = "0x67C388", VA = "0x67C388")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA6B4", Offset = "0x2FA6B4")]
		private set
		{
		}
	}

	[Token(Token = "0x1700010E")]
	public float RtScaleFactor
	{
		[Token(Token = "0x60009A4")]
		[Address(RVA = "0x67C390", Offset = "0x67C390", VA = "0x67C390")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60009A5")]
		[Address(RVA = "0x67C398", Offset = "0x67C398", VA = "0x67C398")]
		set
		{
		}
	}

	[Token(Token = "0x1700010F")]
	public float EyeVFoV
	{
		[Token(Token = "0x60009A6")]
		[Address(RVA = "0x67C578", Offset = "0x67C578", VA = "0x67C578")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60009A7")]
		[Address(RVA = "0x665A14", Offset = "0x665A14", VA = "0x665A14")]
		set
		{
		}
	}

	[Token(Token = "0x17000110")]
	public float EyeHFoV
	{
		[Token(Token = "0x60009A8")]
		[Address(RVA = "0x67C580", Offset = "0x67C580", VA = "0x67C580")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60009A9")]
		[Address(RVA = "0x67C588", Offset = "0x67C588", VA = "0x67C588")]
		set
		{
		}
	}

	[Token(Token = "0x60009A0")]
	[Address(RVA = "0x67B548", Offset = "0x67B548", VA = "0x67B548")]
	public Pvr_UnitySDKRender()
	{
	}

	[Token(Token = "0x60009AA")]
	[Address(RVA = "0x67B724", Offset = "0x67B724", VA = "0x67B724")]
	public void ConnectToAndriod()
	{
	}

	[Token(Token = "0x60009AB")]
	[Address(RVA = "0x67C2D8", Offset = "0x67C2D8", VA = "0x67C2D8")]
	public void Init()
	{
	}

	[Token(Token = "0x60009AC")]
	[Address(RVA = "0x67CB3C", Offset = "0x67CB3C", VA = "0x67CB3C")]
	private bool InitRenderAbility()
	{
		return default(bool);
	}

	[Token(Token = "0x60009AD")]
	[Address(RVA = "0x67CC98", Offset = "0x67CC98", VA = "0x67CC98")]
	private bool UpdateRenderParaFrame()
	{
		return default(bool);
	}

	[Token(Token = "0x60009AE")]
	[Address(RVA = "0x67CD74", Offset = "0x67CD74", VA = "0x67CD74")]
	private bool CreateEyeBuffer()
	{
		return default(bool);
	}

	[Token(Token = "0x60009AF")]
	[Address(RVA = "0x67DA30", Offset = "0x67DA30", VA = "0x67DA30")]
	private void InitSinglePass()
	{
	}

	[Token(Token = "0x60009B0")]
	[Address(RVA = "0x67D220", Offset = "0x67D220", VA = "0x67D220")]
	public float GetEyeVFOV()
	{
		return default(float);
	}

	[Token(Token = "0x60009B1")]
	[Address(RVA = "0x67D3CC", Offset = "0x67D3CC", VA = "0x67D3CC")]
	public float GetEyeHFOV()
	{
		return default(float);
	}

	[Token(Token = "0x60009B2")]
	[Address(RVA = "0x67DCC4", Offset = "0x67DCC4", VA = "0x67DCC4")]
	private void ConfigureEyeBuffer(int eyeTextureIndex, Vector2 resolution)
	{
	}

	[Token(Token = "0x60009B3")]
	[Address(RVA = "0x67C3C4", Offset = "0x67C3C4", VA = "0x67C3C4")]
	public bool ReCreateEyeBuffer()
	{
		return default(bool);
	}

	[Token(Token = "0x60009B4")]
	[Address(RVA = "0x679DFC", Offset = "0x679DFC", VA = "0x679DFC")]
	public void ReInit()
	{
	}

	[Token(Token = "0x60009B5")]
	[Address(RVA = "0x678E38", Offset = "0x678E38", VA = "0x678E38")]
	public void IssueRenderThread()
	{
	}

	[Token(Token = "0x60009B6")]
	[Address(RVA = "0x67E4B0", Offset = "0x67E4B0", VA = "0x67E4B0")]
	private void AutoAdpatForPico1s()
	{
	}

	[Token(Token = "0x60009B7")]
	[Address(RVA = "0x67D578", Offset = "0x67D578", VA = "0x67D578")]
	public Vector2 GetEyeBufferResolution()
	{
		return default(Vector2);
	}

	[Token(Token = "0x60009B8")]
	[Address(RVA = "0x67E814", Offset = "0x67E814", VA = "0x67E814")]
	public bool GetUsePredictedMatrix()
	{
		return default(bool);
	}

	[Token(Token = "0x60009B9")]
	[Address(RVA = "0x67C5A0", Offset = "0x67C5A0", VA = "0x67C5A0")]
	public bool GetIsShellMode()
	{
		return default(bool);
	}
}
[Token(Token = "0x200013E")]
public class Pvr_UnitySDKSinglePass : SDKStereoRendering
{
	[Token(Token = "0x4000725")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Camera bothCamera;

	[Token(Token = "0x4000726")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private Matrix4x4[] unity_StereoMatrixP;

	[Token(Token = "0x4000727")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Matrix4x4[] unity_StereoMatrixInvP;

	[Token(Token = "0x4000728")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static Matrix4x4[] unity_StereoWorldToCamera;

	[Token(Token = "0x4000729")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Matrix4x4[] unity_StereoCameraToWorld;

	[Token(Token = "0x400072A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Matrix4x4[] unity_StereoMatrixVP;

	[Token(Token = "0x400072B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3[] eyesOffset;

	[Token(Token = "0x400072C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Matrix4x4[] eyesOffsetMatrix;

	[Token(Token = "0x400072D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private CommandBuffer commandBufferBeforeForwardOpaque;

	[Token(Token = "0x400072E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private CommandBuffer commandBufferBeforeSkybox;

	[Token(Token = "0x400072F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private CommandBuffer commandBufferAfterSkybox;

	[Token(Token = "0x60009BB")]
	[Address(RVA = "0x68253C", Offset = "0x68253C", VA = "0x68253C", Slot = "4")]
	public override void InitEye(Camera eye)
	{
	}

	[Token(Token = "0x60009BC")]
	[Address(RVA = "0x6832E0", Offset = "0x6832E0", VA = "0x6832E0", Slot = "5")]
	public override void OnSDKRenderInited()
	{
	}

	[Token(Token = "0x60009BD")]
	[Address(RVA = "0x683478", Offset = "0x683478", VA = "0x683478", Slot = "6")]
	public override void OnSDKPreRender()
	{
	}

	[Token(Token = "0x60009BE")]
	[Address(RVA = "0x684694", Offset = "0x684694", VA = "0x684694", Slot = "7")]
	public override void OnSDKPostRender()
	{
	}

	[Token(Token = "0x60009BF")]
	[Address(RVA = "0x6832E4", Offset = "0x6832E4", VA = "0x6832E4")]
	public void OnSDKRenderInited_SinglePass()
	{
	}

	[Token(Token = "0x60009C0")]
	[Address(RVA = "0x68476C", Offset = "0x68476C", VA = "0x68476C")]
	private void SetAntiAliasing()
	{
	}

	[Token(Token = "0x60009C1")]
	[Address(RVA = "0x682A18", Offset = "0x682A18", VA = "0x682A18")]
	public void SetEyesPosition()
	{
	}

	[Token(Token = "0x60009C2")]
	[Address(RVA = "0x682FF0", Offset = "0x682FF0", VA = "0x682FF0")]
	public void SetEyeProjection()
	{
	}

	[Token(Token = "0x60009C3")]
	[Address(RVA = "0x6848A0", Offset = "0x6848A0", VA = "0x6848A0")]
	private static Matrix4x4 GetProjection(float near, float far)
	{
		return default(Matrix4x4);
	}

	[Token(Token = "0x60009C4")]
	[Address(RVA = "0x684CE8", Offset = "0x684CE8", VA = "0x684CE8")]
	public static Matrix4x4 MakeProjection(float n, float f)
	{
		return default(Matrix4x4);
	}

	[Token(Token = "0x60009C5")]
	[Address(RVA = "0x684990", Offset = "0x684990", VA = "0x684990")]
	public void SetStereoProjectionMatrix(Matrix4x4 left, Matrix4x4 right)
	{
	}

	[Token(Token = "0x60009C6")]
	[Address(RVA = "0x68469C", Offset = "0x68469C", VA = "0x68469C")]
	private void SwitchKeywordAndDeviceView(bool enable)
	{
	}

	[Token(Token = "0x60009C7")]
	[Address(RVA = "0x66FB94", Offset = "0x66FB94", VA = "0x66FB94")]
	public static Matrix4x4[] GetStereoWorldToCameraMat()
	{
		return null;
	}

	[Token(Token = "0x60009C8")]
	[Address(RVA = "0x68347C", Offset = "0x68347C", VA = "0x68347C")]
	public void SinglePassPreRender()
	{
	}

	[Token(Token = "0x60009C9")]
	[Address(RVA = "0x68501C", Offset = "0x68501C", VA = "0x68501C")]
	private void SetCommandBuffers()
	{
	}

	[Token(Token = "0x60009CA")]
	[Address(RVA = "0x684F34", Offset = "0x684F34", VA = "0x684F34")]
	private void SetRenderTextureWithDepth()
	{
	}

	[Token(Token = "0x60009CB")]
	[Address(RVA = "0x67E3F0", Offset = "0x67E3F0", VA = "0x67E3F0")]
	public Pvr_UnitySDKSinglePass()
	{
	}
}
[Token(Token = "0x200013F")]
public abstract class SDKStereoRendering
{
	[Token(Token = "0x60009CD")]
	public abstract void InitEye(Camera eye);

	[Token(Token = "0x60009CE")]
	public abstract void OnSDKRenderInited();

	[Token(Token = "0x60009CF")]
	public abstract void OnSDKPreRender();

	[Token(Token = "0x60009D0")]
	public abstract void OnSDKPostRender();

	[Token(Token = "0x60009D1")]
	[Address(RVA = "0xA8A680", Offset = "0xA8A680", VA = "0xA8A680")]
	protected SDKStereoRendering()
	{
	}
}
[Token(Token = "0x2000140")]
public class HighlightAtGaze : MonoBehaviour
{
	[Token(Token = "0x4000730")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Color HighlightColor;

	[Token(Token = "0x4000731")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float AnimationTime;

	[Token(Token = "0x4000732")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Renderer myRenderer;

	[Token(Token = "0x4000733")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Color originalColor;

	[Token(Token = "0x4000734")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Color targetColor;

	[Token(Token = "0x4000735")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private EyeTrackingGazeRay gazeRay;

	[Token(Token = "0x60009D2")]
	[Address(RVA = "0x4E09FC", Offset = "0x4E09FC", VA = "0x4E09FC")]
	private void Start()
	{
	}

	[Token(Token = "0x60009D3")]
	[Address(RVA = "0x4E0AC4", Offset = "0x4E0AC4", VA = "0x4E0AC4")]
	private void Update()
	{
	}

	[Token(Token = "0x60009D4")]
	[Address(RVA = "0x4E0D54", Offset = "0x4E0D54", VA = "0x4E0D54")]
	public HighlightAtGaze()
	{
	}
}
[Token(Token = "0x2000141")]
public class RayVisualizer : MonoBehaviour
{
	[Token(Token = "0x4000736")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private LineRenderer _line;

	[Token(Token = "0x4000737")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private EyeTrackingGazeRay gazeRay;

	[Token(Token = "0x60009D5")]
	[Address(RVA = "0x68671C", Offset = "0x68671C", VA = "0x68671C")]
	private void Start()
	{
	}

	[Token(Token = "0x60009D6")]
	[Address(RVA = "0x6867F4", Offset = "0x6867F4", VA = "0x6867F4")]
	private void Update()
	{
	}

	[Token(Token = "0x60009D7")]
	[Address(RVA = "0x686A18", Offset = "0x686A18", VA = "0x686A18")]
	public RayVisualizer()
	{
	}
}
[Token(Token = "0x2000142")]
public class GetSeeThroughImage : MonoBehaviour
{
	[Token(Token = "0x4000738")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public RawImage viewImage_left;

	[Token(Token = "0x4000739")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public RawImage viewImage_right;

	[Token(Token = "0x400073A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private int width;

	[Token(Token = "0x400073B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int height;

	[Token(Token = "0x400073C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private RenderTexture cameraTex_left;

	[Token(Token = "0x400073D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private RenderTexture cameraTex_right;

	[Token(Token = "0x400073E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private bool cameraPreview;

	[Token(Token = "0x60009D8")]
	[Address(RVA = "0x4DFFF0", Offset = "0x4DFFF0", VA = "0x4DFFF0")]
	private void Start()
	{
	}

	[Token(Token = "0x60009D9")]
	[Address(RVA = "0x4E0168", Offset = "0x4E0168", VA = "0x4E0168")]
	private void Update()
	{
	}

	[Token(Token = "0x60009DA")]
	[Address(RVA = "0x4E01E0", Offset = "0x4E01E0", VA = "0x4E01E0")]
	private void OnDestory()
	{
	}

	[Token(Token = "0x60009DB")]
	[Address(RVA = "0x4DFFF4", Offset = "0x4DFFF4", VA = "0x4DFFF4")]
	private void CreateTexture()
	{
	}

	[Token(Token = "0x60009DC")]
	[Address(RVA = "0x4E0194", Offset = "0x4E0194", VA = "0x4E0194")]
	private void DrawTexture()
	{
	}

	[Token(Token = "0x60009DD")]
	[Address(RVA = "0x4E01FC", Offset = "0x4E01FC", VA = "0x4E01FC")]
	public GetSeeThroughImage()
	{
	}
}
[Token(Token = "0x2000143")]
public class OverlayExternalSurfaceDemo : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000520")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EACDC", Offset = "0x2EACDC")]
	private sealed class <>c
	{
		[Token(Token = "0x4001DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x4001DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static Pvr_UnitySDKEyeOverlay.ExternalAndroidSurfaceObjectCreated <>9__7_0;

		[Token(Token = "0x6001D2A")]
		[Address(RVA = "0x8B6594", Offset = "0x8B6594", VA = "0x8B6594")]
		public <>c()
		{
		}

		[Token(Token = "0x6001D2B")]
		[Address(RVA = "0x8B659C", Offset = "0x8B659C", VA = "0x8B659C")]
		internal void <StartPlay>b__7_0()
		{
		}
	}

	[Token(Token = "0x400073F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public string movieName;

	[Token(Token = "0x4000740")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Pvr_UnitySDKEyeOverlay.OverlayType overlayType;

	[Token(Token = "0x4000741")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Pvr_UnitySDKEyeOverlay.OverlayShape overlayShape;

	[Token(Token = "0x4000742")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Pvr_UnitySDKEyeOverlay overlay;

	[Token(Token = "0x4000743")]
	private const string TAG = "[ExternalSurface]>>>>>>";

	[Token(Token = "0x60009DE")]
	[Address(RVA = "0x8B6068", Offset = "0x8B6068", VA = "0x8B6068")]
	private void Awake()
	{
	}

	[Token(Token = "0x60009DF")]
	[Address(RVA = "0x8B61F4", Offset = "0x8B61F4", VA = "0x8B61F4")]
	private void Start()
	{
	}

	[Token(Token = "0x60009E0")]
	[Address(RVA = "0x8B6284", Offset = "0x8B6284", VA = "0x8B6284")]
	private void StartPlay(string moviePath, string licenceUrl)
	{
	}

	[Token(Token = "0x60009E1")]
	[Address(RVA = "0x8B6518", Offset = "0x8B6518", VA = "0x8B6518")]
	public OverlayExternalSurfaceDemo()
	{
	}
}
[Token(Token = "0x2000144")]
public class MoveCylinder : MonoBehaviour
{
	[Token(Token = "0x4000744")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Vector3 startingPosition;

	[Token(Token = "0x4000745")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Quaternion startingRotation;

	[Token(Token = "0x60009E2")]
	[Address(RVA = "0x4F2288", Offset = "0x4F2288", VA = "0x4F2288")]
	private void Start()
	{
	}

	[Token(Token = "0x60009E3")]
	[Address(RVA = "0x4F2320", Offset = "0x4F2320", VA = "0x4F2320")]
	public void Reset()
	{
	}

	[Token(Token = "0x60009E4")]
	[Address(RVA = "0x4F23C4", Offset = "0x4F23C4", VA = "0x4F23C4")]
	public MoveCylinder()
	{
	}
}
[Token(Token = "0x2000145")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x2E6B74", Offset = "0x2E6B74")]
public class MoveSphere : MonoBehaviour
{
	[Token(Token = "0x4000746")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Vector3 startingPosition;

	[Token(Token = "0x60009E5")]
	[Address(RVA = "0x4F23CC", Offset = "0x4F23CC", VA = "0x4F23CC")]
	private void Start()
	{
	}

	[Token(Token = "0x60009E6")]
	[Address(RVA = "0x4F2614", Offset = "0x4F2614", VA = "0x4F2614")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60009E7")]
	[Address(RVA = "0x4F2524", Offset = "0x4F2524", VA = "0x4F2524")]
	public void SetGazedAt(bool gazedAt)
	{
	}

	[Token(Token = "0x60009E8")]
	[Address(RVA = "0x4F2618", Offset = "0x4F2618", VA = "0x4F2618")]
	public void Reset()
	{
	}

	[Token(Token = "0x60009E9")]
	[Address(RVA = "0x4F27CC", Offset = "0x4F27CC", VA = "0x4F27CC")]
	public void TeleportRandomly()
	{
	}

	[Token(Token = "0x60009EA")]
	[Address(RVA = "0x4F2924", Offset = "0x4F2924", VA = "0x4F2924")]
	public MoveSphere()
	{
	}
}
[Token(Token = "0x2000146")]
public class Resetbutton : MonoBehaviour
{
	[Token(Token = "0x60009EB")]
	[Address(RVA = "0x687BA0", Offset = "0x687BA0", VA = "0x687BA0")]
	public void DemoResetTracking()
	{
	}

	[Token(Token = "0x60009EC")]
	[Address(RVA = "0x687C6C", Offset = "0x687C6C", VA = "0x687C6C")]
	public Resetbutton()
	{
	}
}
[Token(Token = "0x2000147")]
public class UserEntitlementCheck : MonoBehaviour
{
	[Token(Token = "0x60009ED")]
	[Address(RVA = "0x8F3F84", Offset = "0x8F3F84", VA = "0x8F3F84")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60009EE")]
	[Address(RVA = "0x8F4040", Offset = "0x8F4040", VA = "0x8F4040")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60009EF")]
	[Address(RVA = "0x8F40FC", Offset = "0x8F40FC", VA = "0x8F40FC")]
	private void HandelEntitlementCheckResult(int resultCode)
	{
	}

	[Token(Token = "0x60009F0")]
	[Address(RVA = "0x8F4560", Offset = "0x8F4560", VA = "0x8F4560")]
	public UserEntitlementCheck()
	{
	}
}
[Token(Token = "0x2000148")]
public class Pvr_SQPLoader : MonoBehaviour
{
	[Token(Token = "0x2000521")]
	private struct SceneInfo
	{
		[Token(Token = "0x4001DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public List<string> scenes;

		[Token(Token = "0x4001DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public long version;

		[Token(Token = "0x6001D2C")]
		[Address(RVA = "0x3AE0D0", Offset = "0x3AE0D0", VA = "0x3AE0D0")]
		public SceneInfo(List<string> sceneList, long currentSceneEpochVersion)
		{
		}
	}

	[Token(Token = "0x2000522")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EACEC", Offset = "0x2EACEC")]
	private sealed class <onCheckNewSceneCoroutine>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private int <>1__state;

		[Token(Token = "0x4001DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private object <>2__current;

		[Token(Token = "0x4001DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Pvr_SQPLoader <>4__this;

		[Token(Token = "0x170003AA")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001D30")]
			[Address(RVA = "0x9B3A00", Offset = "0x9B3A00", VA = "0x9B3A00", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003AB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001D32")]
			[Address(RVA = "0x9B3A90", Offset = "0x9B3A90", VA = "0x9B3A90", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001D2D")]
		[Address(RVA = "0x9B3548", Offset = "0x9B3548", VA = "0x9B3548")]
		[DebuggerHidden]
		public <onCheckNewSceneCoroutine>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x6001D2E")]
		[Address(RVA = "0x9B360C", Offset = "0x9B360C", VA = "0x9B360C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001D2F")]
		[Address(RVA = "0x9B3610", Offset = "0x9B3610", VA = "0x9B3610", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001D31")]
		[Address(RVA = "0x9B3A08", Offset = "0x9B3A08", VA = "0x9B3A08", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000747")]
	public const string RESOURCE_BUNDLE_NAME = "asset_resources";

	[Token(Token = "0x4000748")]
	public const string EXTERNAL_STORAGE_PATH = "/sdcard/Android/data";

	[Token(Token = "0x4000749")]
	public const string SCENE_LOAD_DATA_NAME = "SceneLoadData.txt";

	[Token(Token = "0x400074A")]
	private const string SQP_INDEX_NAME = "PvrSQPIndex";

	[Token(Token = "0x400074B")]
	private const string CACHE_SCENES_PATH = "cache/scenes";

	[Token(Token = "0x400074C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private AsyncOperation loadSceneOperation;

	[Token(Token = "0x400074D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private string scenePath;

	[Token(Token = "0x400074E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private string sceneLoadDataPath;

	[Token(Token = "0x400074F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<AssetBundle> loadedAssetBundles;

	[Token(Token = "0x4000750")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private SceneInfo currentSceneInfo;

	[Token(Token = "0x60009F1")]
	[Address(RVA = "0x9B2B08", Offset = "0x9B2B08", VA = "0x9B2B08")]
	private void Awake()
	{
	}

	[Token(Token = "0x60009F2")]
	[Address(RVA = "0x9B2B9C", Offset = "0x9B2B9C", VA = "0x9B2B9C")]
	private void Start()
	{
	}

	[Token(Token = "0x60009F3")]
	[Address(RVA = "0x9B3494", Offset = "0x9B3494", VA = "0x9B3494")]
	public void Update()
	{
	}

	[Token(Token = "0x60009F4")]
	[Address(RVA = "0x9B2D00", Offset = "0x9B2D00", VA = "0x9B2D00")]
	private SceneInfo GetSceneInfo()
	{
		return default(SceneInfo);
	}

	[Token(Token = "0x60009F5")]
	[Address(RVA = "0x9B2F48", Offset = "0x9B2F48", VA = "0x9B2F48")]
	private void LoadScene(SceneInfo sceneInfo)
	{
	}

	[Token(Token = "0x60009F6")]
	[Address(RVA = "0x9B3498", Offset = "0x9B3498", VA = "0x9B3498")]
	private void LoadSceneOperation_completed(AsyncOperation obj)
	{
	}

	[Token(Token = "0x60009F7")]
	[Address(RVA = "0x9B34BC", Offset = "0x9B34BC", VA = "0x9B34BC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2FA6C4", Offset = "0x2FA6C4")]
	private IEnumerator onCheckNewSceneCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60009F8")]
	[Address(RVA = "0x9B3568", Offset = "0x9B3568", VA = "0x9B3568")]
	public Pvr_SQPLoader()
	{
	}
}
[Token(Token = "0x2000149")]
public class Pvr_UnitySDKHeadTrack : MonoBehaviour
{
	[Token(Token = "0x4000751")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EF7E8", Offset = "0x2EF7E8")]
	public bool trackRotation;

	[Token(Token = "0x4000752")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EF81C", Offset = "0x2EF81C")]
	public bool trackPosition;

	[Token(Token = "0x4000753")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Transform target;

	[Token(Token = "0x4000754")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private bool updated;

	[Token(Token = "0x4000755")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
	private bool dataClock;

	[Token(Token = "0x17000111")]
	public Ray Gaze
	{
		[Token(Token = "0x60009F9")]
		[Address(RVA = "0x67065C", Offset = "0x67065C", VA = "0x67065C")]
		get
		{
			return default(Ray);
		}
	}

	[Token(Token = "0x60009FA")]
	[Address(RVA = "0x670D54", Offset = "0x670D54", VA = "0x670D54")]
	private void Update()
	{
	}

	[Token(Token = "0x60009FB")]
	[Address(RVA = "0x670720", Offset = "0x670720", VA = "0x670720")]
	private void UpdateHead()
	{
	}

	[Token(Token = "0x60009FC")]
	[Address(RVA = "0x670D60", Offset = "0x670D60", VA = "0x670D60")]
	public Pvr_UnitySDKHeadTrack()
	{
	}
}
[Token(Token = "0x200014A")]
public class Pvr_UnitySDKPose
{
	[Token(Token = "0x4000756")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected static readonly Matrix4x4 flipZ;

	[Token(Token = "0x4000757")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EF850", Offset = "0x2EF850")]
	private Vector3 <Position>k__BackingField;

	[Token(Token = "0x4000758")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EF860", Offset = "0x2EF860")]
	private Quaternion <Orientation>k__BackingField;

	[Token(Token = "0x4000759")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EF870", Offset = "0x2EF870")]
	private Matrix4x4 <Matrix>k__BackingField;

	[Token(Token = "0x17000112")]
	public Matrix4x4 RightHandedMatrix
	{
		[Token(Token = "0x60009FD")]
		[Address(RVA = "0x67A9D4", Offset = "0x67A9D4", VA = "0x67A9D4")]
		get
		{
			return default(Matrix4x4);
		}
	}

	[Token(Token = "0x17000113")]
	public Vector3 Position
	{
		[Token(Token = "0x60009FE")]
		[Address(RVA = "0x67ADD0", Offset = "0x67ADD0", VA = "0x67ADD0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA73C", Offset = "0x2FA73C")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x60009FF")]
		[Address(RVA = "0x67ADE4", Offset = "0x67ADE4", VA = "0x67ADE4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA74C", Offset = "0x2FA74C")]
		protected set
		{
		}
	}

	[Token(Token = "0x17000114")]
	public Quaternion Orientation
	{
		[Token(Token = "0x6000A00")]
		[Address(RVA = "0x67ADF0", Offset = "0x67ADF0", VA = "0x67ADF0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA75C", Offset = "0x2FA75C")]
		get
		{
			return default(Quaternion);
		}
		[Token(Token = "0x6000A01")]
		[Address(RVA = "0x67AE00", Offset = "0x67AE00", VA = "0x67AE00")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA76C", Offset = "0x2FA76C")]
		protected set
		{
		}
	}

	[Token(Token = "0x17000115")]
	public Matrix4x4 Matrix
	{
		[Token(Token = "0x6000A02")]
		[Address(RVA = "0x67AE10", Offset = "0x67AE10", VA = "0x67AE10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA77C", Offset = "0x2FA77C")]
		get
		{
			return default(Matrix4x4);
		}
		[Token(Token = "0x6000A03")]
		[Address(RVA = "0x67AE38", Offset = "0x67AE38", VA = "0x67AE38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA78C", Offset = "0x2FA78C")]
		protected set
		{
		}
	}

	[Token(Token = "0x6000A04")]
	[Address(RVA = "0x665BAC", Offset = "0x665BAC", VA = "0x665BAC")]
	public Pvr_UnitySDKPose(Matrix4x4 matrix)
	{
	}

	[Token(Token = "0x6000A05")]
	[Address(RVA = "0x67B134", Offset = "0x67B134", VA = "0x67B134")]
	public Pvr_UnitySDKPose(Vector3 position, Quaternion orientation)
	{
	}

	[Token(Token = "0x6000A06")]
	[Address(RVA = "0x67B188", Offset = "0x67B188", VA = "0x67B188")]
	public void Set(Vector3 position, Quaternion orientation)
	{
	}

	[Token(Token = "0x6000A07")]
	[Address(RVA = "0x67AEB0", Offset = "0x67AEB0", VA = "0x67AEB0")]
	protected void Set(Matrix4x4 matrix)
	{
	}

	[Token(Token = "0x6000A08")]
	[Address(RVA = "0x67B300", Offset = "0x67B300", VA = "0x67B300")]
	private Quaternion NormalizeQuaternion(ref Quaternion q)
	{
		return default(Quaternion);
	}
}
[Token(Token = "0x200014B")]
public class Pvr_UnitySDKSensor
{
	[Token(Token = "0x2000523")]
	public delegate void Enter3DofModel();

	[Token(Token = "0x2000524")]
	public delegate void Exit3DofModel();

	[Token(Token = "0x400075A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Pvr_UnitySDKSensor instance;

	[Token(Token = "0x400075B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private bool SensorStart;

	[Token(Token = "0x400075C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
	private bool SensorInit;

	[Token(Token = "0x400075D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Quaternion UnityQuaternion;

	[Token(Token = "0x400075E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Vector3 UnityPosition;

	[Token(Token = "0x400075F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Sensorindex sensorIndex;

	[Token(Token = "0x4000760")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool dofClock;

	[Token(Token = "0x4000761")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static Action EyeFovChanged;

	[Token(Token = "0x4000762")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Pvr_UnitySDKPose HeadPose;

	[Token(Token = "0x4000765")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float vfov;

	[Token(Token = "0x4000766")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float hfov;

	[Token(Token = "0x4000767")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float w;

	[Token(Token = "0x4000768")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float x;

	[Token(Token = "0x4000769")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float y;

	[Token(Token = "0x400076A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float z;

	[Token(Token = "0x400076B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float px;

	[Token(Token = "0x400076C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float py;

	[Token(Token = "0x400076D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float pz;

	[Token(Token = "0x17000116")]
	public static Pvr_UnitySDKSensor Instance
	{
		[Token(Token = "0x6000A0A")]
		[Address(RVA = "0x664F20", Offset = "0x664F20", VA = "0x664F20")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000A0B")]
		[Address(RVA = "0x67E928", Offset = "0x67E928", VA = "0x67E928")]
		set
		{
		}
	}

	[Token(Token = "0x1400002D")]
	public static event Enter3DofModel Enter3DofModelEvent
	{
		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0x67EB00", Offset = "0x67EB00", VA = "0x67EB00")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA79C", Offset = "0x2FA79C")]
		add
		{
		}
		[Token(Token = "0x6000A0E")]
		[Address(RVA = "0x67EC3C", Offset = "0x67EC3C", VA = "0x67EC3C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA7AC", Offset = "0x2FA7AC")]
		remove
		{
		}
	}

	[Token(Token = "0x1400002E")]
	public static event Exit3DofModel Exit3DofModelEvent
	{
		[Token(Token = "0x6000A0F")]
		[Address(RVA = "0x67ED78", Offset = "0x67ED78", VA = "0x67ED78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA7BC", Offset = "0x2FA7BC")]
		add
		{
		}
		[Token(Token = "0x6000A10")]
		[Address(RVA = "0x67EEB4", Offset = "0x67EEB4", VA = "0x67EEB4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA7CC", Offset = "0x2FA7CC")]
		remove
		{
		}
	}

	[Token(Token = "0x6000A0C")]
	[Address(RVA = "0x67E820", Offset = "0x67E820", VA = "0x67E820")]
	public Pvr_UnitySDKSensor()
	{
	}

	[Token(Token = "0x6000A11")]
	[Address(RVA = "0x67E9B8", Offset = "0x67E9B8", VA = "0x67E9B8")]
	public void Init()
	{
	}

	[Token(Token = "0x6000A12")]
	[Address(RVA = "0x677D5C", Offset = "0x677D5C", VA = "0x677D5C")]
	public void SensorUpdate()
	{
	}

	[Token(Token = "0x6000A13")]
	[Address(RVA = "0x67F2F8", Offset = "0x67F2F8", VA = "0x67F2F8")]
	public bool InitUnitySDKSensor()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A14")]
	[Address(RVA = "0x67EFF0", Offset = "0x67EFF0", VA = "0x67EFF0")]
	public bool InitUnitySDK6DofSensor()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A15")]
	[Address(RVA = "0x6798D0", Offset = "0x6798D0", VA = "0x6798D0")]
	public bool StartUnitySDKSensor()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A16")]
	[Address(RVA = "0x6782C4", Offset = "0x6782C4", VA = "0x6782C4")]
	public bool StopUnitySDKSensor()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A17")]
	[Address(RVA = "0x6758F4", Offset = "0x6758F4", VA = "0x6758F4")]
	public bool ResetUnitySDKSensor()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A18")]
	[Address(RVA = "0x66E2F4", Offset = "0x66E2F4", VA = "0x66E2F4")]
	public bool OptionalResetUnitySDKSensor(int resetRot, int resetPos)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A19")]
	[Address(RVA = "0x67F484", Offset = "0x67F484", VA = "0x67F484")]
	public bool GetUnitySDKSensorState()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A1A")]
	[Address(RVA = "0x6811A8", Offset = "0x6811A8", VA = "0x6811A8")]
	public bool GetUnitySDKPSensorState()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A1B")]
	[Address(RVA = "0x680EF0", Offset = "0x680EF0", VA = "0x680EF0")]
	private void RefreshHeadData(float x, float y, float z, float w, float px, float py, float pz)
	{
	}
}
[Token(Token = "0x200014C")]
public class CLoadingAsset : ScriptableObject
{
	[Token(Token = "0x400076E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public int SplashScreenType;

	[Token(Token = "0x400076F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<Texture2D> splashImage;

	[Token(Token = "0x4000770")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Texture2D Inside_background;

	[Token(Token = "0x4000771")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool UseSplashText;

	[Token(Token = "0x4000772")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public string DefaultText;

	[Token(Token = "0x4000773")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string ChineseText;

	[Token(Token = "0x4000774")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public string EnglishText;

	[Token(Token = "0x4000775")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string JapaneseText;

	[Token(Token = "0x4000776")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public string KoreanText;

	[Token(Token = "0x4000777")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string FontSize;

	[Token(Token = "0x4000778")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Color FontColor;

	[Token(Token = "0x4000779")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public string TextHeight;

	[Token(Token = "0x400077A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool UseCarousel;

	[Token(Token = "0x400077B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public int SplashTextAlignment;

	[Token(Token = "0x6000A1D")]
	[Address(RVA = "0x621B74", Offset = "0x621B74", VA = "0x621B74")]
	public CLoadingAsset()
	{
	}
}
[Serializable]
[Token(Token = "0x200014D")]
public class Pvr_UnitySDKConfigProfile
{
	[Token(Token = "0x2000525")]
	public struct Lenses
	{
		[Token(Token = "0x4001DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float separation;

		[Token(Token = "0x4001DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float offset;

		[Token(Token = "0x4001DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float distance;

		[Token(Token = "0x4001DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int alignment;

		[Token(Token = "0x4001DFC")]
		public const int AlignTop = -1;

		[Token(Token = "0x4001DFD")]
		public const int AlignCenter = 0;

		[Token(Token = "0x4001DFE")]
		public const int AlignBottom = 1;
	}

	[Token(Token = "0x2000526")]
	public struct MaxFOV
	{
		[Token(Token = "0x4001DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float upper;

		[Token(Token = "0x4001E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float lower;

		[Token(Token = "0x4001E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float inner;

		[Token(Token = "0x4001E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float outer;
	}

	[Token(Token = "0x2000527")]
	public struct Distortion
	{
		[Token(Token = "0x4001E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float k1;

		[Token(Token = "0x4001E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float k2;

		[Token(Token = "0x4001E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float k3;

		[Token(Token = "0x4001E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float k4;

		[Token(Token = "0x4001E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float k5;

		[Token(Token = "0x4001E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float k6;

		[Token(Token = "0x6001D3B")]
		[Address(RVA = "0x3A17C8", Offset = "0x3A17C8", VA = "0x3A17C8")]
		public float distort(float r)
		{
			return default(float);
		}

		[Token(Token = "0x6001D3C")]
		[Address(RVA = "0x3A17D0", Offset = "0x3A17D0", VA = "0x3A17D0")]
		public float distort(float r, float dist)
		{
			return default(float);
		}

		[Token(Token = "0x6001D3D")]
		[Address(RVA = "0x3A17D8", Offset = "0x3A17D8", VA = "0x3A17D8")]
		public float diatortInv(float radious)
		{
			return default(float);
		}
	}

	[Token(Token = "0x2000528")]
	public struct Device
	{
		[Token(Token = "0x4001E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Lenses devLenses;

		[Token(Token = "0x4001E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MaxFOV devMaxFov;

		[Token(Token = "0x4001E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Distortion devDistortion;

		[Token(Token = "0x4001E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Distortion devDistortionInv;
	}

	[Token(Token = "0x400077C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly Device SimulateDevice;

	[Token(Token = "0x400077D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public Device device;

	[Token(Token = "0x400077E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public static readonly Pvr_UnitySDKConfigProfile Default;

	[Token(Token = "0x6000A1E")]
	[Address(RVA = "0x6631D0", Offset = "0x6631D0", VA = "0x6631D0")]
	public Pvr_UnitySDKConfigProfile Clone()
	{
		return null;
	}

	[Token(Token = "0x6000A1F")]
	[Address(RVA = "0x663280", Offset = "0x663280", VA = "0x663280")]
	public static Pvr_UnitySDKConfigProfile GetPicoProfile()
	{
		return null;
	}

	[Token(Token = "0x6000A20")]
	[Address(RVA = "0x663358", Offset = "0x663358", VA = "0x663358")]
	public float[] GetLeftEyeVisibleTanAngles(float width, float height)
	{
		return null;
	}

	[Token(Token = "0x6000A21")]
	[Address(RVA = "0x6637B0", Offset = "0x6637B0", VA = "0x6637B0")]
	public float[] GetLeftEyeNoLensTanAngles(float width, float height)
	{
		return null;
	}

	[Token(Token = "0x6000A22")]
	[Address(RVA = "0x663AA0", Offset = "0x663AA0", VA = "0x663AA0")]
	public Rect GetLeftEyeVisibleScreenRect(float[] undistortedFrustum, float width, float height)
	{
		return default(Rect);
	}

	[Token(Token = "0x6000A23")]
	[Address(RVA = "0x663278", Offset = "0x663278", VA = "0x663278")]
	public Pvr_UnitySDKConfigProfile()
	{
	}
}
[Token(Token = "0x200014E")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x2E6BEC", Offset = "0x2E6BEC")]
public class Pvr_UnitySDKFPS : MonoBehaviour
{
	[Token(Token = "0x400077F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Text fpsText;

	[Token(Token = "0x4000780")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private float updateInterval;

	[Token(Token = "0x4000781")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private float accum;

	[Token(Token = "0x4000782")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int frames;

	[Token(Token = "0x4000783")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float timeLeft;

	[Token(Token = "0x4000784")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private string strFps;

	[Token(Token = "0x6000A25")]
	[Address(RVA = "0x67047C", Offset = "0x67047C", VA = "0x67047C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A26")]
	[Address(RVA = "0x670518", Offset = "0x670518", VA = "0x670518")]
	private void ShowFps()
	{
	}

	[Token(Token = "0x6000A27")]
	[Address(RVA = "0x67064C", Offset = "0x67064C", VA = "0x67064C")]
	public Pvr_UnitySDKFPS()
	{
	}
}
[Token(Token = "0x200014F")]
public class Pvr_GazeFuse : MonoBehaviour
{
	[Token(Token = "0x4000785")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public GameObject gazeGameObject;

	[Token(Token = "0x4000786")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Image image;

	[Token(Token = "0x6000A28")]
	[Address(RVA = "0x9AC018", Offset = "0x9AC018", VA = "0x9AC018")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A29")]
	[Address(RVA = "0x9AC080", Offset = "0x9AC080", VA = "0x9AC080")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A2A")]
	[Address(RVA = "0x9AC204", Offset = "0x9AC204", VA = "0x9AC204")]
	private void FuseAmountChanged(float fuseAmount)
	{
	}

	[Token(Token = "0x6000A2B")]
	[Address(RVA = "0x9AC2C0", Offset = "0x9AC2C0", VA = "0x9AC2C0")]
	public Pvr_GazeFuse()
	{
	}
}
[Token(Token = "0x2000150")]
public class Pvr_GazeInputModule : PointerInputModule
{
	[Token(Token = "0x2000529")]
	public enum Mode
	{
		[Token(Token = "0x4001E0E")]
		Click,
		[Token(Token = "0x4001E0F")]
		Gaze
	}

	[Token(Token = "0x4000787")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Mode mode;

	[Token(Token = "0x4000788")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x2EF8A0", Offset = "0x2EF8A0")]
	public string ClickInputName;

	[Token(Token = "0x4000789")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x2EF8DC", Offset = "0x2EF8DC")]
	public float GazeTimeInSeconds;

	[Token(Token = "0x400078A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EF918", Offset = "0x2EF918")]
	private static float <gazeFraction>k__BackingField;

	[Token(Token = "0x400078B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EF928", Offset = "0x2EF928")]
	private static GameObject <gazeGameObject>k__BackingField;

	[Token(Token = "0x400078C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public RaycastResult CurrentRaycast;

	[Token(Token = "0x400078D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private PointerEventData pointerEventData;

	[Token(Token = "0x400078E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private GameObject currentLookAtHandler;

	[Token(Token = "0x400078F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float currentLookAtHandlerClickTime;

	[Token(Token = "0x17000117")]
	public static float gazeFraction
	{
		[Token(Token = "0x6000A2C")]
		[Address(RVA = "0x9AC2C8", Offset = "0x9AC2C8", VA = "0x9AC2C8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA7DC", Offset = "0x2FA7DC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000A2D")]
		[Address(RVA = "0x9AC32C", Offset = "0x9AC32C", VA = "0x9AC32C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA7EC", Offset = "0x2FA7EC")]
		private set
		{
		}
	}

	[Token(Token = "0x17000118")]
	public static GameObject gazeGameObject
	{
		[Token(Token = "0x6000A2E")]
		[Address(RVA = "0x9AC398", Offset = "0x9AC398", VA = "0x9AC398")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA7FC", Offset = "0x2FA7FC")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000A2F")]
		[Address(RVA = "0x9AC3FC", Offset = "0x9AC3FC", VA = "0x9AC3FC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA80C", Offset = "0x2FA80C")]
		private set
		{
		}
	}

	[Token(Token = "0x6000A30")]
	[Address(RVA = "0x9AC460", Offset = "0x9AC460", VA = "0x9AC460", Slot = "17")]
	public override void Process()
	{
	}

	[Token(Token = "0x6000A31")]
	[Address(RVA = "0x9AC47C", Offset = "0x9AC47C", VA = "0x9AC47C")]
	private void HandleLook()
	{
	}

	[Token(Token = "0x6000A32")]
	[Address(RVA = "0x9AC798", Offset = "0x9AC798", VA = "0x9AC798")]
	private void HandleSelection()
	{
	}

	[Token(Token = "0x6000A33")]
	[Address(RVA = "0x9ACE4C", Offset = "0x9ACE4C", VA = "0x9ACE4C")]
	public Pvr_GazeInputModule()
	{
	}
}
[Token(Token = "0x2000151")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x2E6C64", Offset = "0x2E6C64")]
public class Pvr_GazeInputModuleCrosshair : MonoBehaviour
{
	[Token(Token = "0x4000790")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool DisplayCrosshair;

	[Token(Token = "0x4000791")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EF938", Offset = "0x2EF938")]
	public Transform Crosshair;

	[Token(Token = "0x4000792")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Pvr_GazeInputModule gazeInputModule;

	[Token(Token = "0x4000793")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Vector3 CrosshairOriginalScale;

	[Token(Token = "0x4000794")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float CrosshairOriginalDistance;

	[Token(Token = "0x6000A34")]
	[Address(RVA = "0x9ACEC0", Offset = "0x9ACEC0", VA = "0x9ACEC0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A35")]
	[Address(RVA = "0x9ACF28", Offset = "0x9ACF28", VA = "0x9ACF28")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A36")]
	[Address(RVA = "0x9ACFE4", Offset = "0x9ACFE4", VA = "0x9ACFE4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A37")]
	[Address(RVA = "0x9AD154", Offset = "0x9AD154", VA = "0x9AD154")]
	private void SetCrossHairAtDistance(float dist)
	{
	}

	[Token(Token = "0x6000A38")]
	[Address(RVA = "0x9AD2AC", Offset = "0x9AD2AC", VA = "0x9AD2AC")]
	public Pvr_GazeInputModuleCrosshair()
	{
	}
}
[Token(Token = "0x2000152")]
public enum RenderEventType
{
	[Token(Token = "0x4000796")]
	InitRenderThread = 1024,
	[Token(Token = "0x4000797")]
	Pause,
	[Token(Token = "0x4000798")]
	Resume,
	[Token(Token = "0x4000799")]
	LeftEyeEndFrame,
	[Token(Token = "0x400079A")]
	RightEyeEndFrame,
	[Token(Token = "0x400079B")]
	TimeWarp,
	[Token(Token = "0x400079C")]
	ResetVrModeParms,
	[Token(Token = "0x400079D")]
	ShutdownRenderThread,
	[Token(Token = "0x400079E")]
	BeginEye,
	[Token(Token = "0x400079F")]
	EndEye,
	[Token(Token = "0x40007A0")]
	BoundaryRenderLeft,
	[Token(Token = "0x40007A1")]
	BoundaryRenderRight,
	[Token(Token = "0x40007A2")]
	BothEyeEndFrame,
	[Token(Token = "0x40007A3")]
	CameraFrameLeft,
	[Token(Token = "0x40007A4")]
	CameraFrameRight,
	[Token(Token = "0x40007A5")]
	StartCameraFrame,
	[Token(Token = "0x40007A6")]
	StopCameraFrame
}
[Token(Token = "0x2000153")]
public static class Pvr_UnitySDKPluginEvent
{
	[Token(Token = "0x200052A")]
	private delegate void RenderEventDelegate(int eventId);

	[Token(Token = "0x40007A7")]
	private const uint IS_DATA_FLAG = 2147483648u;

	[Token(Token = "0x40007A8")]
	private const uint DATA_POS_MASK = 1073741824u;

	[Token(Token = "0x40007A9")]
	private const int DATA_POS_SHIFT = 30;

	[Token(Token = "0x40007AA")]
	private const uint EVENT_TYPE_MASK = 1056899072u;

	[Token(Token = "0x40007AB")]
	private const int EVENT_TYPE_SHIFT = 17;

	[Token(Token = "0x40007AC")]
	private const uint PAYLOAD_MASK = 65535u;

	[Token(Token = "0x40007AD")]
	private const int PAYLOAD_SHIFT = 16;

	[Token(Token = "0x40007AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static RenderEventDelegate SetSinglePassBeforeForwardOpaqueHandle;

	[Token(Token = "0x40007AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static IntPtr SetSinglePassBeforeForwardOpaquePtr;

	[Token(Token = "0x6000A3A")]
	[Address(RVA = "0x6674F4", Offset = "0x6674F4", VA = "0x6674F4")]
	public static void Issue(RenderEventType eventType)
	{
	}

	[Token(Token = "0x6000A3B")]
	[Address(RVA = "0x67A4B4", Offset = "0x67A4B4", VA = "0x67A4B4")]
	private static int EncodeType(int eventType)
	{
		return default(int);
	}

	[Token(Token = "0x6000A3C")]
	[Address(RVA = "0x67A4BC", Offset = "0x67A4BC", VA = "0x67A4BC")]
	private static int EncodeData(int eventId, int eventData, int pos)
	{
		return default(int);
	}

	[Token(Token = "0x6000A3D")]
	[Address(RVA = "0x67A4E8", Offset = "0x67A4E8", VA = "0x67A4E8")]
	private static int DecodeData(int eventData)
	{
		return default(int);
	}

	[Token(Token = "0x6000A3E")]
	[Address(RVA = "0x67A4AC", Offset = "0x67A4AC", VA = "0x67A4AC")]
	[AttributeAttribute(Name = "MonoPInvokeCallbackAttribute", RVA = "0x2FA81C", Offset = "0x2FA81C")]
	private static void SetSinglePassBeforeForwardOpaque(int eventId)
	{
	}

	[Token(Token = "0x6000A3F")]
	[Address(RVA = "0x67A4FC", Offset = "0x67A4FC", VA = "0x67A4FC")]
	public static void SetSinglePassBeforeForwardOpaque(CommandBuffer cmd)
	{
	}
}
[Token(Token = "0x2000154")]
public class Pvr_UnitySDKSightInputModule : BaseInputModule
{
	[Token(Token = "0x40007B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EF994", Offset = "0x2EF994")]
	public GameObject cursor;

	[Token(Token = "0x40007B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int trigger;

	[Token(Token = "0x40007B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[HideInInspector]
	public float clickTime;

	[Token(Token = "0x40007B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public Vector2 hotspot;

	[Token(Token = "0x40007B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private PointerEventData pointerData;

	[Token(Token = "0x6000A41")]
	[Address(RVA = "0x6813D0", Offset = "0x6813D0", VA = "0x6813D0", Slot = "21")]
	public override bool ShouldActivateModule()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A42")]
	[Address(RVA = "0x681488", Offset = "0x681488", VA = "0x681488", Slot = "22")]
	public override void DeactivateModule()
	{
	}

	[Token(Token = "0x6000A43")]
	[Address(RVA = "0x6818C8", Offset = "0x6818C8", VA = "0x6818C8", Slot = "20")]
	public override bool IsPointerOverGameObject(int pointerId)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A44")]
	[Address(RVA = "0x681968", Offset = "0x681968", VA = "0x681968", Slot = "17")]
	public override void Process()
	{
	}

	[Token(Token = "0x6000A45")]
	[Address(RVA = "0x68199C", Offset = "0x68199C", VA = "0x68199C")]
	private void CastRayFromGaze()
	{
	}

	[Token(Token = "0x6000A46")]
	[Address(RVA = "0x681B90", Offset = "0x681B90", VA = "0x681B90")]
	private void UpdateCurrentObject()
	{
	}

	[Token(Token = "0x6000A47")]
	[Address(RVA = "0x681DD0", Offset = "0x681DD0", VA = "0x681DD0")]
	private void PlaceCursor()
	{
	}

	[Token(Token = "0x6000A48")]
	[Address(RVA = "0x6815BC", Offset = "0x6815BC", VA = "0x6815BC")]
	private void HandlePendingClick()
	{
	}

	[Token(Token = "0x6000A49")]
	[Address(RVA = "0x6820C4", Offset = "0x6820C4", VA = "0x6820C4")]
	private void HandleTrigger()
	{
	}

	[Token(Token = "0x6000A4A")]
	[Address(RVA = "0x6824E0", Offset = "0x6824E0", VA = "0x6824E0")]
	public Pvr_UnitySDKSightInputModule()
	{
	}
}
[Token(Token = "0x2000155")]
public class Pvr_ObjImporter
{
	[Token(Token = "0x40007B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Pvr_ObjImporter _instance;

	[Token(Token = "0x40007B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private List<int> triangles;

	[Token(Token = "0x40007B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private List<Vector3> vertices;

	[Token(Token = "0x40007B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private List<Vector2> uv;

	[Token(Token = "0x40007B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private List<Vector3> normals;

	[Token(Token = "0x40007BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<PvrVector3Int> faceData;

	[Token(Token = "0x40007BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private List<int> intArray;

	[Token(Token = "0x40007BC")]
	private const int MIN_POW_10 = -16;

	[Token(Token = "0x40007BD")]
	private const int MAX_POW_10 = 16;

	[Token(Token = "0x40007BE")]
	private const int NUM_POWS_10 = 33;

	[Token(Token = "0x40007BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly float[] pow10;

	[Token(Token = "0x17000119")]
	public static Pvr_ObjImporter Instance
	{
		[Token(Token = "0x6000A4B")]
		[Address(RVA = "0x9B1054", Offset = "0x9B1054", VA = "0x9B1054")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000A4C")]
	[Address(RVA = "0x9B1148", Offset = "0x9B1148", VA = "0x9B1148")]
	public Mesh ImportFile(string filePath)
	{
		return null;
	}

	[Token(Token = "0x6000A4D")]
	[Address(RVA = "0x9B17B8", Offset = "0x9B17B8", VA = "0x9B17B8")]
	private void LoadMeshData(string fileName)
	{
	}

	[Token(Token = "0x6000A4E")]
	[Address(RVA = "0x9B21E0", Offset = "0x9B21E0", VA = "0x9B21E0")]
	private float GetFloat(StringBuilder sb, ref int start, ref StringBuilder sbFloat)
	{
		return default(float);
	}

	[Token(Token = "0x6000A4F")]
	[Address(RVA = "0x9B23E0", Offset = "0x9B23E0", VA = "0x9B23E0")]
	private int GetInt(StringBuilder sb, ref int start, ref StringBuilder sbInt)
	{
		return default(int);
	}

	[Token(Token = "0x6000A50")]
	[Address(RVA = "0x9B2968", Offset = "0x9B2968", VA = "0x9B2968")]
	private static float[] GenerateLookupTable()
	{
		return null;
	}

	[Token(Token = "0x6000A51")]
	[Address(RVA = "0x9B2588", Offset = "0x9B2588", VA = "0x9B2588")]
	private float ParseFloat(StringBuilder value)
	{
		return default(float);
	}

	[Token(Token = "0x6000A52")]
	[Address(RVA = "0x9B28F4", Offset = "0x9B28F4", VA = "0x9B28F4")]
	private int IntParseFast(StringBuilder value)
	{
		return default(int);
	}

	[Token(Token = "0x6000A53")]
	[Address(RVA = "0x9B1140", Offset = "0x9B1140", VA = "0x9B1140")]
	public Pvr_ObjImporter()
	{
	}
}
[Token(Token = "0x2000156")]
public sealed class PvrVector3Int
{
	[Token(Token = "0x40007C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EF9E8", Offset = "0x2EF9E8")]
	private int <x>k__BackingField;

	[Token(Token = "0x40007C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EF9F8", Offset = "0x2EF9F8")]
	private int <y>k__BackingField;

	[Token(Token = "0x40007C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EFA08", Offset = "0x2EFA08")]
	private int <z>k__BackingField;

	[Token(Token = "0x1700011A")]
	public int x
	{
		[Token(Token = "0x6000A55")]
		[Address(RVA = "0x8BAACC", Offset = "0x8BAACC", VA = "0x8BAACC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA894", Offset = "0x2FA894")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000A56")]
		[Address(RVA = "0x8BAAD4", Offset = "0x8BAAD4", VA = "0x8BAAD4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA8A4", Offset = "0x2FA8A4")]
		set
		{
		}
	}

	[Token(Token = "0x1700011B")]
	public int y
	{
		[Token(Token = "0x6000A57")]
		[Address(RVA = "0x8BAADC", Offset = "0x8BAADC", VA = "0x8BAADC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA8B4", Offset = "0x2FA8B4")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000A58")]
		[Address(RVA = "0x8BAAE4", Offset = "0x8BAAE4", VA = "0x8BAAE4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA8C4", Offset = "0x2FA8C4")]
		set
		{
		}
	}

	[Token(Token = "0x1700011C")]
	public int z
	{
		[Token(Token = "0x6000A59")]
		[Address(RVA = "0x8BAAEC", Offset = "0x8BAAEC", VA = "0x8BAAEC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA8D4", Offset = "0x2FA8D4")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000A5A")]
		[Address(RVA = "0x8BAAF4", Offset = "0x8BAAF4", VA = "0x8BAAF4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA8E4", Offset = "0x2FA8E4")]
		set
		{
		}
	}

	[Token(Token = "0x6000A5B")]
	[Address(RVA = "0x8BAAFC", Offset = "0x8BAAFC", VA = "0x8BAAFC")]
	public PvrVector3Int()
	{
	}

	[Token(Token = "0x6000A5C")]
	[Address(RVA = "0x8BAB04", Offset = "0x8BAB04", VA = "0x8BAB04")]
	public PvrVector3Int(int x, int y, int z)
	{
	}
}
[Token(Token = "0x2000157")]
public class Pvr_EnumFlags : PropertyAttribute
{
	[Token(Token = "0x6000A5D")]
	[Address(RVA = "0x9AC010", Offset = "0x9AC010", VA = "0x9AC010")]
	public Pvr_EnumFlags()
	{
	}
}
[Token(Token = "0x2000158")]
public enum ConfirmBtn
{
	[Token(Token = "0x40007C4")]
	App = 1,
	[Token(Token = "0x40007C5")]
	TouchPad = 2,
	[Token(Token = "0x40007C6")]
	Trigger = 4
}
[Token(Token = "0x2000159")]
public class Pvr_InputModule : PointerInputModule
{
	[Token(Token = "0x40007C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static List<Pvr_UIPointer> pointers;

	[Token(Token = "0x40007C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Pvr_EnumFlags]
	public ConfirmBtn confirmBtn;

	[Token(Token = "0x40007C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<RaycastResult> rayCasts;

	[Token(Token = "0x40007CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private RaycastResult rayCastResult;

	[Token(Token = "0x6000A5E")]
	[Address(RVA = "0x9AD31C", Offset = "0x9AD31C", VA = "0x9AD31C", Slot = "30")]
	public virtual void Initialise()
	{
	}

	[Token(Token = "0x6000A5F")]
	[Address(RVA = "0x9AD3D0", Offset = "0x9AD3D0", VA = "0x9AD3D0")]
	public static void AddPoint(Pvr_UIPointer point)
	{
	}

	[Token(Token = "0x6000A60")]
	[Address(RVA = "0x9AD504", Offset = "0x9AD504", VA = "0x9AD504")]
	public static void RemovePoint(Pvr_UIPointer point)
	{
	}

	[Token(Token = "0x6000A61")]
	[Address(RVA = "0x9AD638", Offset = "0x9AD638", VA = "0x9AD638", Slot = "17")]
	public override void Process()
	{
	}

	[Token(Token = "0x6000A62")]
	[Address(RVA = "0x9ADB3C", Offset = "0x9ADB3C", VA = "0x9ADB3C", Slot = "31")]
	protected virtual List<RaycastResult> CheckRaycasts(Pvr_UIPointer pointer)
	{
		return null;
	}

	[Token(Token = "0x6000A63")]
	[Address(RVA = "0x9ADCB8", Offset = "0x9ADCB8", VA = "0x9ADCB8", Slot = "32")]
	protected virtual bool CheckTransformTree(Transform target, Transform source)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A64")]
	[Address(RVA = "0x9ADDD8", Offset = "0x9ADDD8", VA = "0x9ADDD8", Slot = "33")]
	protected virtual bool NoValidCollision(Pvr_UIPointer pointer, List<RaycastResult> results)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A65")]
	[Address(RVA = "0x9ADEDC", Offset = "0x9ADEDC", VA = "0x9ADEDC", Slot = "34")]
	protected virtual bool IsHovering(Pvr_UIPointer pointer)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A66")]
	[Address(RVA = "0x9AE16C", Offset = "0x9AE16C", VA = "0x9AE16C", Slot = "35")]
	protected virtual bool ValidElement(GameObject obj)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A67")]
	[Address(RVA = "0x9AE244", Offset = "0x9AE244", VA = "0x9AE244", Slot = "36")]
	protected virtual void CheckPointerHoverClick(Pvr_UIPointer pointer, List<RaycastResult> results)
	{
	}

	[Token(Token = "0x6000A68")]
	[Address(RVA = "0x9AE2E4", Offset = "0x9AE2E4", VA = "0x9AE2E4", Slot = "37")]
	protected virtual void Hover(Pvr_UIPointer pointer, List<RaycastResult> results)
	{
	}

	[Token(Token = "0x6000A69")]
	[Address(RVA = "0x9AF850", Offset = "0x9AF850", VA = "0x9AF850", Slot = "38")]
	protected virtual void Click(Pvr_UIPointer pointer, List<RaycastResult> results)
	{
	}

	[Token(Token = "0x6000A6A")]
	[Address(RVA = "0x9AF8DC", Offset = "0x9AF8DC", VA = "0x9AF8DC", Slot = "39")]
	protected virtual void ClickOnUp(Pvr_UIPointer pointer, List<RaycastResult> results)
	{
	}

	[Token(Token = "0x6000A6B")]
	[Address(RVA = "0x9AF98C", Offset = "0x9AF98C", VA = "0x9AF98C", Slot = "40")]
	protected virtual void ClickOnDown(Pvr_UIPointer pointer, List<RaycastResult> results, bool forceClick = false)
	{
	}

	[Token(Token = "0x6000A6C")]
	[Address(RVA = "0x9AFA54", Offset = "0x9AFA54", VA = "0x9AFA54", Slot = "41")]
	protected virtual bool IsEligibleClick(Pvr_UIPointer pointer, List<RaycastResult> results)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A6D")]
	[Address(RVA = "0x9AFE44", Offset = "0x9AFE44", VA = "0x9AFE44", Slot = "42")]
	protected virtual bool AttemptClick(Pvr_UIPointer pointer)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A6E")]
	[Address(RVA = "0x9B0438", Offset = "0x9B0438", VA = "0x9B0438", Slot = "43")]
	protected virtual void Drag(Pvr_UIPointer pointer, List<RaycastResult> results)
	{
	}

	[Token(Token = "0x6000A6F")]
	[Address(RVA = "0x9B0F30", Offset = "0x9B0F30", VA = "0x9B0F30")]
	public Pvr_InputModule()
	{
	}
}
[Token(Token = "0x200015A")]
public class Pvr_UICanvas : MonoBehaviour
{
	[Token(Token = "0x200052B")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EACFC", Offset = "0x2EACFC")]
	private sealed class <CreateDraggablePanel>d__10 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private int <>1__state;

		[Token(Token = "0x4001E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private object <>2__current;

		[Token(Token = "0x4001E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Canvas canvas;

		[Token(Token = "0x4001E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector2 canvasSize;

		[Token(Token = "0x170003AC")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001D45")]
			[Address(RVA = "0x9B7F00", Offset = "0x9B7F00", VA = "0x9B7F00", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003AD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001D47")]
			[Address(RVA = "0x9B7F90", Offset = "0x9B7F90", VA = "0x9B7F90", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001D42")]
		[Address(RVA = "0x9B74D8", Offset = "0x9B74D8", VA = "0x9B74D8")]
		[DebuggerHidden]
		public <CreateDraggablePanel>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x6001D43")]
		[Address(RVA = "0x9B7938", Offset = "0x9B7938", VA = "0x9B7938", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001D44")]
		[Address(RVA = "0x9B793C", Offset = "0x9B793C", VA = "0x9B793C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001D46")]
		[Address(RVA = "0x9B7F08", Offset = "0x9B7F08", VA = "0x9B7F08", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40007CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public bool clickOnPointerCollision;

	[Token(Token = "0x40007CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float autoActivateWithinDistance;

	[Token(Token = "0x40007CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	protected BoxCollider canvasBoxCollider;

	[Token(Token = "0x40007CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected Rigidbody canvasRigidBody;

	[Token(Token = "0x40007CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	protected Coroutine draggablePanelCreation;

	[Token(Token = "0x40007D0")]
	protected const string CANVAS_DRAGGABLE_PANEL = "UICANVAS_DRAGGABLE_PANEL";

	[Token(Token = "0x6000A71")]
	[Address(RVA = "0x9B6E1C", Offset = "0x9B6E1C", VA = "0x9B6E1C", Slot = "4")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000A72")]
	[Address(RVA = "0x9B6E2C", Offset = "0x9B6E2C", VA = "0x9B6E2C", Slot = "5")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x6000A73")]
	[Address(RVA = "0x9B6E3C", Offset = "0x9B6E3C", VA = "0x9B6E3C", Slot = "6")]
	protected virtual void OnDestroy()
	{
	}

	[Token(Token = "0x6000A74")]
	[Address(RVA = "0x9B6E4C", Offset = "0x9B6E4C", VA = "0x9B6E4C", Slot = "7")]
	protected virtual void SetupCanvas()
	{
	}

	[Token(Token = "0x6000A75")]
	[Address(RVA = "0x9B7428", Offset = "0x9B7428", VA = "0x9B7428", Slot = "8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2FA8F4", Offset = "0x2FA8F4")]
	protected virtual IEnumerator CreateDraggablePanel(Canvas canvas, Vector2 canvasSize)
	{
		return null;
	}

	[Token(Token = "0x6000A76")]
	[Address(RVA = "0x9B74F8", Offset = "0x9B74F8", VA = "0x9B74F8", Slot = "9")]
	protected virtual void RemoveCanvas()
	{
	}

	[Token(Token = "0x6000A77")]
	[Address(RVA = "0x9B7930", Offset = "0x9B7930", VA = "0x9B7930")]
	public Pvr_UICanvas()
	{
	}
}
[Token(Token = "0x200015B")]
public struct UIDraggableItemEventArgs
{
	[Token(Token = "0x40007D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public GameObject target;
}
[Token(Token = "0x200015C")]
public delegate void UIDraggableItemEventHandler(object sender, UIDraggableItemEventArgs e);
[Token(Token = "0x200015D")]
public class Pvr_UIDraggableItem : MonoBehaviour, IBeginDragHandler, IEventSystemHandler, IDragHandler, IEndDragHandler
{
	[Token(Token = "0x40007D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public bool restrictToDropZone;

	[Token(Token = "0x40007D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
	public bool restrictToOriginalCanvas;

	[Token(Token = "0x40007D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float moveOffset;

	[Token(Token = "0x40007D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[HideInInspector]
	public GameObject validDropZone;

	[Token(Token = "0x40007D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected RectTransform dragTransform;

	[Token(Token = "0x40007D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	protected Vector3 startPosition;

	[Token(Token = "0x40007DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected Quaternion startRotation;

	[Token(Token = "0x40007DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected GameObject startDropZone;

	[Token(Token = "0x40007DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	protected Transform startParent;

	[Token(Token = "0x40007DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected Canvas startCanvas;

	[Token(Token = "0x40007DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	protected CanvasGroup canvasGroup;

	[Token(Token = "0x40007DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected Pvr_InputModule currentInputmodule;

	[Token(Token = "0x1400002F")]
	public event UIDraggableItemEventHandler DraggableItemDropped
	{
		[Token(Token = "0x6000A7C")]
		[Address(RVA = "0x9B7F98", Offset = "0x9B7F98", VA = "0x9B7F98")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA96C", Offset = "0x2FA96C")]
		add
		{
		}
		[Token(Token = "0x6000A7D")]
		[Address(RVA = "0x9B8050", Offset = "0x9B8050", VA = "0x9B8050")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA97C", Offset = "0x2FA97C")]
		remove
		{
		}
	}

	[Token(Token = "0x14000030")]
	public event UIDraggableItemEventHandler DraggableItemReset
	{
		[Token(Token = "0x6000A7E")]
		[Address(RVA = "0x9B8108", Offset = "0x9B8108", VA = "0x9B8108")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA98C", Offset = "0x2FA98C")]
		add
		{
		}
		[Token(Token = "0x6000A7F")]
		[Address(RVA = "0x9B81C0", Offset = "0x9B81C0", VA = "0x9B81C0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA99C", Offset = "0x2FA99C")]
		remove
		{
		}
	}

	[Token(Token = "0x6000A80")]
	[Address(RVA = "0x9B8278", Offset = "0x9B8278", VA = "0x9B8278", Slot = "7")]
	public virtual void OnDraggableItemDropped(UIDraggableItemEventArgs e)
	{
	}

	[Token(Token = "0x6000A81")]
	[Address(RVA = "0x9B8294", Offset = "0x9B8294", VA = "0x9B8294", Slot = "8")]
	public virtual void OnDraggableItemReset(UIDraggableItemEventArgs e)
	{
	}

	[Token(Token = "0x6000A82")]
	[Address(RVA = "0x9B82B0", Offset = "0x9B82B0", VA = "0x9B82B0", Slot = "4")]
	public void OnBeginDrag(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000A83")]
	[Address(RVA = "0x9B8694", Offset = "0x9B8694", VA = "0x9B8694", Slot = "5")]
	public void OnDrag(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000A84")]
	[Address(RVA = "0x9B86A4", Offset = "0x9B86A4", VA = "0x9B86A4", Slot = "6")]
	public void OnEndDrag(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000A85")]
	[Address(RVA = "0x9B8D50", Offset = "0x9B8D50", VA = "0x9B8D50", Slot = "9")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000A86")]
	[Address(RVA = "0x9B8E78", Offset = "0x9B8E78", VA = "0x9B8E78", Slot = "10")]
	protected virtual Pvr_UIPointer GetPointer()
	{
		return null;
	}

	[Token(Token = "0x6000A87")]
	[Address(RVA = "0x9B9074", Offset = "0x9B9074", VA = "0x9B9074", Slot = "11")]
	protected virtual void SetDragPosition(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000A88")]
	[Address(RVA = "0x9B941C", Offset = "0x9B941C", VA = "0x9B941C", Slot = "12")]
	protected virtual void ResetElement()
	{
	}

	[Token(Token = "0x6000A89")]
	[Address(RVA = "0x9B9548", Offset = "0x9B9548", VA = "0x9B9548", Slot = "13")]
	protected virtual UIDraggableItemEventArgs SetEventPayload(GameObject target)
	{
		return default(UIDraggableItemEventArgs);
	}

	[Token(Token = "0x6000A8A")]
	[Address(RVA = "0x9B9550", Offset = "0x9B9550", VA = "0x9B9550")]
	public Pvr_UIDraggableItem()
	{
	}
}
[Token(Token = "0x200015E")]
public class Pvr_UIDropZone : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler
{
	[Token(Token = "0x40007E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	protected Pvr_UIDraggableItem droppableItem;

	[Token(Token = "0x6000A8B")]
	[Address(RVA = "0x9B9564", Offset = "0x9B9564", VA = "0x9B9564", Slot = "4")]
	public void OnPointerEnter(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000A8C")]
	[Address(RVA = "0x9B96A8", Offset = "0x9B96A8", VA = "0x9B96A8", Slot = "5")]
	public void OnPointerExit(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000A8D")]
	[Address(RVA = "0x9B975C", Offset = "0x9B975C", VA = "0x9B975C")]
	public Pvr_UIDropZone()
	{
	}
}
[Token(Token = "0x200015F")]
public class Pvr_UIGraphicRaycaster : GraphicRaycaster
{
	[Serializable]
	[Token(Token = "0x200052C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EAD0C", Offset = "0x2EAD0C")]
	private sealed class <>c
	{
		[Token(Token = "0x4001E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x4001E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static Comparison<RaycastResult> <>9__7_0;

		[Token(Token = "0x6001D49")]
		[Address(RVA = "0x9BAB3C", Offset = "0x9BAB3C", VA = "0x9BAB3C")]
		public <>c()
		{
		}

		[Token(Token = "0x6001D4A")]
		[Address(RVA = "0x9BAB44", Offset = "0x9BAB44", VA = "0x9BAB44")]
		internal int <Raycast>b__7_0(RaycastResult g1, RaycastResult g2)
		{
			return default(int);
		}
	}

	[Token(Token = "0x40007E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	protected Canvas currentCanvas;

	[Token(Token = "0x40007E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected Vector2 lastKnownPosition;

	[Token(Token = "0x40007E3")]
	protected const float UI_CONTROL_OFFSET = 1E-05f;

	[NonSerialized]
	[Token(Token = "0x40007E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<RaycastResult> s_RaycastResults;

	[Token(Token = "0x1700011D")]
	protected virtual Canvas canvas
	{
		[Token(Token = "0x6000A92")]
		[Address(RVA = "0x9BA8E0", Offset = "0x9BA8E0", VA = "0x9BA8E0", Slot = "25")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000A8E")]
	[Address(RVA = "0x9B9764", Offset = "0x9B9764", VA = "0x9B9764", Slot = "17")]
	public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList)
	{
	}

	[Token(Token = "0x6000A8F")]
	[Address(RVA = "0x9B99A4", Offset = "0x9B99A4", VA = "0x9B99A4", Slot = "22")]
	protected virtual void SetNearestRaycast(ref PointerEventData eventData, ref List<RaycastResult> resultAppendList, ref List<RaycastResult> raycastResults)
	{
	}

	[Token(Token = "0x6000A90")]
	[Address(RVA = "0x9B9DE4", Offset = "0x9B9DE4", VA = "0x9B9DE4", Slot = "23")]
	protected virtual float GetHitDistance(Ray ray)
	{
		return default(float);
	}

	[Token(Token = "0x6000A91")]
	[Address(RVA = "0x9BA19C", Offset = "0x9BA19C", VA = "0x9BA19C", Slot = "24")]
	protected virtual void Raycast(Canvas canvas, Camera eventCamera, Ray ray, ref List<RaycastResult> results)
	{
	}

	[Token(Token = "0x6000A93")]
	[Address(RVA = "0x9BA9B4", Offset = "0x9BA9B4", VA = "0x9BA9B4")]
	public Pvr_UIGraphicRaycaster()
	{
	}
}
[Token(Token = "0x2000160")]
public struct UIPointerEventArgs
{
	[Token(Token = "0x40007E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public bool isActive;

	[Token(Token = "0x40007E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public GameObject currentTarget;

	[Token(Token = "0x40007E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public GameObject previousTarget;

	[Token(Token = "0x40007E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public RaycastResult raycastResult;
}
[Token(Token = "0x2000161")]
public delegate void UIPointerEventHandler(object sender, UIPointerEventArgs e);
[Token(Token = "0x2000162")]
public class Pvr_UIPointer : MonoBehaviour
{
	[Token(Token = "0x200052D")]
	public enum ClickMethods
	{
		[Token(Token = "0x4001E17")]
		ClickOnButtonUp,
		[Token(Token = "0x4001E18")]
		ClickOnButtonDown
	}

	[Token(Token = "0x40007E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public ClickMethods clickMethod;

	[Token(Token = "0x40007EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[HideInInspector]
	public bool collisionClick;

	[Token(Token = "0x40007EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	[HideInInspector]
	public bool pressToDrag;

	[Token(Token = "0x40007EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[HideInInspector]
	public GameObject autoActivatingCanvas;

	[Token(Token = "0x40007ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public PointerEventData pointerEventData;

	[Token(Token = "0x40007EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[HideInInspector]
	public GameObject hoveringElement;

	[Token(Token = "0x40007EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public float hoverDurationTimer;

	[Token(Token = "0x40007F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[HideInInspector]
	public bool canClickOnHover;

	[Token(Token = "0x40007F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform pointerOriginTransform;

	[Token(Token = "0x40007F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	protected bool pointerClicked;

	[Token(Token = "0x40007F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	protected bool beamEnabledState;

	[Token(Token = "0x40007F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
	protected bool lastPointerPressState;

	[Token(Token = "0x40007F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F")]
	protected bool lastPointerClickState;

	[Token(Token = "0x40007F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected GameObject currentTarget;

	[Token(Token = "0x40007F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	protected EventSystem cachedEventSystem;

	[Token(Token = "0x40007F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected Pvr_InputModule cachedVRInputModule;

	[Token(Token = "0x40007F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	protected Transform originalPointerOriginTransform;

	[Token(Token = "0x40007FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool TouchBtnValue;

	[Token(Token = "0x4000800")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
	public static bool AppBtnValue;

	[Token(Token = "0x4000801")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
	public static bool TriggerBtnValue;

	[Token(Token = "0x14000031")]
	public event UIPointerEventHandler UIPointerElementEnter
	{
		[Token(Token = "0x6000A99")]
		[Address(RVA = "0x9BABD4", Offset = "0x9BABD4", VA = "0x9BABD4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA9AC", Offset = "0x2FA9AC")]
		add
		{
		}
		[Token(Token = "0x6000A9A")]
		[Address(RVA = "0x9BAC8C", Offset = "0x9BAC8C", VA = "0x9BAC8C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA9BC", Offset = "0x2FA9BC")]
		remove
		{
		}
	}

	[Token(Token = "0x14000032")]
	public event UIPointerEventHandler UIPointerElementExit
	{
		[Token(Token = "0x6000A9B")]
		[Address(RVA = "0x9BAD44", Offset = "0x9BAD44", VA = "0x9BAD44")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA9CC", Offset = "0x2FA9CC")]
		add
		{
		}
		[Token(Token = "0x6000A9C")]
		[Address(RVA = "0x9BADFC", Offset = "0x9BADFC", VA = "0x9BADFC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA9DC", Offset = "0x2FA9DC")]
		remove
		{
		}
	}

	[Token(Token = "0x14000033")]
	public event UIPointerEventHandler UIPointerElementClick
	{
		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0x9BAEB4", Offset = "0x9BAEB4", VA = "0x9BAEB4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA9EC", Offset = "0x2FA9EC")]
		add
		{
		}
		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0x9BAF6C", Offset = "0x9BAF6C", VA = "0x9BAF6C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FA9FC", Offset = "0x2FA9FC")]
		remove
		{
		}
	}

	[Token(Token = "0x14000034")]
	public event UIPointerEventHandler UIPointerElementDragStart
	{
		[Token(Token = "0x6000A9F")]
		[Address(RVA = "0x9BB024", Offset = "0x9BB024", VA = "0x9BB024")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAA0C", Offset = "0x2FAA0C")]
		add
		{
		}
		[Token(Token = "0x6000AA0")]
		[Address(RVA = "0x9BB0DC", Offset = "0x9BB0DC", VA = "0x9BB0DC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAA1C", Offset = "0x2FAA1C")]
		remove
		{
		}
	}

	[Token(Token = "0x14000035")]
	public event UIPointerEventHandler UIPointerElementDragEnd
	{
		[Token(Token = "0x6000AA1")]
		[Address(RVA = "0x9BB194", Offset = "0x9BB194", VA = "0x9BB194")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAA2C", Offset = "0x2FAA2C")]
		add
		{
		}
		[Token(Token = "0x6000AA2")]
		[Address(RVA = "0x9BB24C", Offset = "0x9BB24C", VA = "0x9BB24C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAA3C", Offset = "0x2FAA3C")]
		remove
		{
		}
	}

	[Token(Token = "0x6000AA3")]
	[Address(RVA = "0x9BB304", Offset = "0x9BB304", VA = "0x9BB304", Slot = "4")]
	public virtual bool PointerActive()
	{
		return default(bool);
	}

	[Token(Token = "0x6000AA4")]
	[Address(RVA = "0x9BB30C", Offset = "0x9BB30C", VA = "0x9BB30C", Slot = "5")]
	public virtual bool IsSelectionButtonPressed()
	{
		return default(bool);
	}

	[Token(Token = "0x6000AA5")]
	[Address(RVA = "0x9BB448", Offset = "0x9BB448", VA = "0x9BB448", Slot = "6")]
	public virtual Vector3 GetOriginPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000AA6")]
	[Address(RVA = "0x9BB514", Offset = "0x9BB514", VA = "0x9BB514", Slot = "7")]
	public virtual Vector3 GetOriginForward()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000AA7")]
	[Address(RVA = "0x9BB5E0", Offset = "0x9BB5E0", VA = "0x9BB5E0", Slot = "8")]
	public virtual bool ValidClick(bool checkLastClick, bool lastClickState = false)
	{
		return default(bool);
	}

	[Token(Token = "0x6000AA8")]
	[Address(RVA = "0x9BB600", Offset = "0x9BB600", VA = "0x9BB600", Slot = "9")]
	protected virtual void ResetHoverTimer()
	{
	}

	[Token(Token = "0x6000AA9")]
	[Address(RVA = "0x9BB610", Offset = "0x9BB610", VA = "0x9BB610", Slot = "10")]
	public virtual void OnUIPointerElementEnter(UIPointerEventArgs e)
	{
	}

	[Token(Token = "0x6000AAA")]
	[Address(RVA = "0x9BB738", Offset = "0x9BB738", VA = "0x9BB738", Slot = "11")]
	public virtual void OnUIPointerElementExit(UIPointerEventArgs e)
	{
	}

	[Token(Token = "0x6000AAB")]
	[Address(RVA = "0x9BB840", Offset = "0x9BB840", VA = "0x9BB840", Slot = "12")]
	public virtual void OnUIPointerElementClick(UIPointerEventArgs e)
	{
	}

	[Token(Token = "0x6000AAC")]
	[Address(RVA = "0x9BB948", Offset = "0x9BB948", VA = "0x9BB948", Slot = "13")]
	public virtual void OnUIPointerElementDragStart(UIPointerEventArgs e)
	{
	}

	[Token(Token = "0x6000AAD")]
	[Address(RVA = "0x9BB9B4", Offset = "0x9BB9B4", VA = "0x9BB9B4", Slot = "14")]
	public virtual void OnUIPointerElementDragEnd(UIPointerEventArgs e)
	{
	}

	[Token(Token = "0x6000AAE")]
	[Address(RVA = "0x9BBA20", Offset = "0x9BBA20", VA = "0x9BBA20", Slot = "15")]
	public virtual UIPointerEventArgs SetUIPointerEvent(RaycastResult currentRaycastResult, GameObject currentTarget, [Optional] GameObject lastTarget)
	{
		return default(UIPointerEventArgs);
	}

	[Token(Token = "0x6000AAF")]
	[Address(RVA = "0x9BBAD8", Offset = "0x9BBAD8", VA = "0x9BBAD8", Slot = "16")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6000AB0")]
	[Address(RVA = "0x9BBAE4", Offset = "0x9BBAE4", VA = "0x9BBAE4", Slot = "17")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000AB1")]
	[Address(RVA = "0x9BBB18", Offset = "0x9BBB18", VA = "0x9BBB18", Slot = "18")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x6000AB2")]
	[Address(RVA = "0x9BBB98", Offset = "0x9BBB98", VA = "0x9BBB98", Slot = "19")]
	protected virtual void ConfigureEventSystem()
	{
	}

	[Token(Token = "0x6000AB3")]
	[Address(RVA = "0x9BBDD0", Offset = "0x9BBDD0", VA = "0x9BBDD0")]
	public Pvr_UIPointer()
	{
	}
}
[Token(Token = "0x2000163")]
[ExecuteInEditMode]
public class Pvr_UnitySDKEditor : MonoBehaviour
{
	[Token(Token = "0x4000802")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private bool vrModeEnabled;

	[Token(Token = "0x4000803")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private float mouseX;

	[Token(Token = "0x4000804")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private float mouseY;

	[Token(Token = "0x4000805")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float mouseZ;

	[Token(Token = "0x4000806")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float neckModelScale;

	[Token(Token = "0x4000807")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool autoUntiltHead;

	[Token(Token = "0x4000808")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly Vector3 neckOffset;

	[Token(Token = "0x4000809")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[HideInInspector]
	public Matrix4x4 headView;

	[Token(Token = "0x400080A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[HideInInspector]
	public Matrix4x4 leftEyeUndistortedProj;

	[Token(Token = "0x400080B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	[HideInInspector]
	public Matrix4x4 rightEyeUndistortedProj;

	[Token(Token = "0x400080C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	[HideInInspector]
	public Matrix4x4 leftEyeProj;

	[Token(Token = "0x400080D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	[HideInInspector]
	public Matrix4x4 rightEyeProj;

	[Token(Token = "0x400080E")]
	private const float TOUCH_TIME_LIMIT = 0.2f;

	[Token(Token = "0x400080F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
	private float touchStartTime;

	[Token(Token = "0x6000AB5")]
	[Address(RVA = "0x663D4C", Offset = "0x663D4C", VA = "0x663D4C")]
	public Matrix4x4 UndistortedProjection(Eye eye)
	{
		return default(Matrix4x4);
	}

	[Token(Token = "0x6000AB6")]
	[Address(RVA = "0x663D94", Offset = "0x663D94", VA = "0x663D94")]
	public Matrix4x4 Projection(Eye eye)
	{
		return default(Matrix4x4);
	}

	[Token(Token = "0x6000AB7")]
	[Address(RVA = "0x663DDC", Offset = "0x663DDC", VA = "0x663DDC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000AB8")]
	[Address(RVA = "0x664078", Offset = "0x664078", VA = "0x664078")]
	private void Update()
	{
	}

	[Token(Token = "0x6000AB9")]
	[Address(RVA = "0x663DF0", Offset = "0x663DF0", VA = "0x663DF0")]
	public void InitEyePara()
	{
	}

	[Token(Token = "0x6000ABA")]
	[Address(RVA = "0x663FAC", Offset = "0x663FAC", VA = "0x663FAC")]
	private void InitEditorSensorPara()
	{
	}

	[Token(Token = "0x6000ABB")]
	[Address(RVA = "0x66514C", Offset = "0x66514C", VA = "0x66514C")]
	public static Matrix4x4 MakeProjection(float l, float t, float r, float b, float n, float f)
	{
		return default(Matrix4x4);
	}

	[Token(Token = "0x6000ABC")]
	[Address(RVA = "0x665354", Offset = "0x665354", VA = "0x665354")]
	public bool UpdateStatesensor()
	{
		return default(bool);
	}

	[Token(Token = "0x6000ABD")]
	[Address(RVA = "0x66443C", Offset = "0x66443C", VA = "0x66443C")]
	public void ComputeEyesFromProfile()
	{
	}

	[Token(Token = "0x6000ABE")]
	[Address(RVA = "0x66593C", Offset = "0x66593C", VA = "0x66593C")]
	public bool ResetUnitySDKSensor()
	{
		return default(bool);
	}

	[Token(Token = "0x6000ABF")]
	[Address(RVA = "0x664150", Offset = "0x664150", VA = "0x664150")]
	private void SimulateInput()
	{
	}

	[Token(Token = "0x6000AC0")]
	[Address(RVA = "0x665048", Offset = "0x665048", VA = "0x665048")]
	private void FovAdjust()
	{
	}

	[Token(Token = "0x6000AC1")]
	[Address(RVA = "0x665A2C", Offset = "0x665A2C", VA = "0x665A2C")]
	private Rect RectAdjust(Rect eyeRect)
	{
		return default(Rect);
	}

	[Token(Token = "0x6000AC2")]
	[Address(RVA = "0x665368", Offset = "0x665368", VA = "0x665368")]
	private void UpdateSimulatedSensor()
	{
	}

	[Token(Token = "0x6000AC3")]
	[Address(RVA = "0x664C5C", Offset = "0x664C5C", VA = "0x664C5C")]
	private void InitForEye(ref Material mat, ref Material mat1)
	{
	}

	[Token(Token = "0x6000AC4")]
	[Address(RVA = "0x665954", Offset = "0x665954", VA = "0x665954")]
	private void EnableVEmodel()
	{
	}

	[Token(Token = "0x6000AC5")]
	[Address(RVA = "0x665C68", Offset = "0x665C68", VA = "0x665C68")]
	public Pvr_UnitySDKEditor()
	{
	}
}
[Token(Token = "0x2000164")]
public class Pvr_VolumePowerBrightness : MonoBehaviour
{
	[Token(Token = "0x4000810")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private bool VolEnable;

	[Token(Token = "0x4000811")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
	private bool BattEnable;

	[Token(Token = "0x4000812")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Text showResult;

	[Token(Token = "0x4000813")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Text setVolumnum;

	[Token(Token = "0x4000814")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text setBrightnum;

	[Token(Token = "0x4000815")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public string MusicPath;

	[Token(Token = "0x6000AC7")]
	[Address(RVA = "0x685D90", Offset = "0x685D90", VA = "0x685D90")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000AC8")]
	[Address(RVA = "0x685E3C", Offset = "0x685E3C", VA = "0x685E3C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000AC9")]
	[Address(RVA = "0x685E84", Offset = "0x685E84", VA = "0x685E84")]
	public void GetMaxVolumeNumber()
	{
	}

	[Token(Token = "0x6000ACA")]
	[Address(RVA = "0x685F3C", Offset = "0x685F3C", VA = "0x685F3C")]
	public void GetCurrentVolumeNumber()
	{
	}

	[Token(Token = "0x6000ACB")]
	[Address(RVA = "0x685FF4", Offset = "0x685FF4", VA = "0x685FF4")]
	public void VolumeUp()
	{
	}

	[Token(Token = "0x6000ACC")]
	[Address(RVA = "0x686090", Offset = "0x686090", VA = "0x686090")]
	public void VolumeDown()
	{
	}

	[Token(Token = "0x6000ACD")]
	[Address(RVA = "0x68612C", Offset = "0x68612C", VA = "0x68612C")]
	public void SetVolumeNum()
	{
	}

	[Token(Token = "0x6000ACE")]
	[Address(RVA = "0x686288", Offset = "0x686288", VA = "0x686288")]
	public void SetBrightness()
	{
	}

	[Token(Token = "0x6000ACF")]
	[Address(RVA = "0x6863E4", Offset = "0x6863E4", VA = "0x6863E4")]
	public void GetCurrentBrightness()
	{
	}

	[Token(Token = "0x6000AD0")]
	[Address(RVA = "0x68649C", Offset = "0x68649C", VA = "0x68649C")]
	public bool setAudio(string s)
	{
		return default(bool);
	}

	[Token(Token = "0x6000AD1")]
	[Address(RVA = "0x68654C", Offset = "0x68654C", VA = "0x68654C")]
	public bool setBattery(string s)
	{
		return default(bool);
	}

	[Token(Token = "0x6000AD2")]
	[Address(RVA = "0x685DF4", Offset = "0x685DF4", VA = "0x685DF4")]
	private bool InitBatteryVolClass()
	{
		return default(bool);
	}

	[Token(Token = "0x6000AD3")]
	[Address(RVA = "0x685DFC", Offset = "0x685DFC", VA = "0x685DFC")]
	private bool StartBatteryReceiver(string startreceivre)
	{
		return default(bool);
	}

	[Token(Token = "0x6000AD4")]
	[Address(RVA = "0x685E7C", Offset = "0x685E7C", VA = "0x685E7C")]
	private bool StopBatteryReceiver()
	{
		return default(bool);
	}

	[Token(Token = "0x6000AD5")]
	[Address(RVA = "0x685E1C", Offset = "0x685E1C", VA = "0x685E1C")]
	private bool StartAudioReceiver(string startreceivre)
	{
		return default(bool);
	}

	[Token(Token = "0x6000AD6")]
	[Address(RVA = "0x685E74", Offset = "0x685E74", VA = "0x685E74")]
	private bool StopAudioReceiver()
	{
		return default(bool);
	}

	[Token(Token = "0x6000AD7")]
	[Address(RVA = "0x6865FC", Offset = "0x6865FC", VA = "0x6865FC")]
	public Pvr_VolumePowerBrightness()
	{
	}
}
[Serializable]
[Token(Token = "0x2000165")]
public class PL_ActiveAssetsBehaviour : PlayableBehaviour
{
	[Token(Token = "0x4000816")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public bool m_Once;

	[Token(Token = "0x4000817")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
	public bool m_ActiveAssets;

	[Token(Token = "0x6000AD8")]
	[Address(RVA = "0x8B69BC", Offset = "0x8B69BC", VA = "0x8B69BC")]
	public PL_ActiveAssetsBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x2000166")]
public class PL_ActiveAssetsClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x4000818")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public PL_ActiveAssetsBehaviour template;

	[Token(Token = "0x1700011E")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x6000AD9")]
		[Address(RVA = "0x8B69C4", Offset = "0x8B69C4", VA = "0x8B69C4", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x6000ADA")]
	[Address(RVA = "0x8B69CC", Offset = "0x8B69CC", VA = "0x8B69CC", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000ADB")]
	[Address(RVA = "0x8B6AAC", Offset = "0x8B6AAC", VA = "0x8B6AAC")]
	public PL_ActiveAssetsClip()
	{
	}
}
[Token(Token = "0x2000167")]
public class PL_ActiveAssetsMixerBehaviour : PlayableBehaviour
{
	[Token(Token = "0x4000819")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private bool m_DefaultM_Once;

	[Token(Token = "0x400081A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
	private bool m_DefaultM_ActiveAssets;

	[Token(Token = "0x400081B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
	private bool m_AssignedM_Once;

	[Token(Token = "0x400081C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB")]
	private bool m_AssignedM_ActiveAssets;

	[Token(Token = "0x400081D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private ActiveAssets m_TrackBinding;

	[Token(Token = "0x6000ADC")]
	[Address(RVA = "0x8B6B28", Offset = "0x8B6B28", VA = "0x8B6B28", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x6000ADD")]
	[Address(RVA = "0x8B6F68", Offset = "0x8B6F68", VA = "0x8B6F68")]
	public PL_ActiveAssetsMixerBehaviour()
	{
	}
}
[Token(Token = "0x2000168")]
[AttributeAttribute(Name = "TrackColorAttribute", RVA = "0x2E6CEC", Offset = "0x2E6CEC")]
[AttributeAttribute(Name = "TrackClipTypeAttribute", RVA = "0x2E6CEC", Offset = "0x2E6CEC")]
[AttributeAttribute(Name = "TrackBindingTypeAttribute", RVA = "0x2E6CEC", Offset = "0x2E6CEC")]
public class PL_ActiveAssetsTrack : TrackAsset
{
	[Token(Token = "0x6000ADE")]
	[Address(RVA = "0x8B6F70", Offset = "0x8B6F70", VA = "0x8B6F70", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000ADF")]
	[Address(RVA = "0x8B7044", Offset = "0x8B7044", VA = "0x8B7044", Slot = "28")]
	public override void GatherProperties(PlayableDirector director, IPropertyCollector driver)
	{
	}

	[Token(Token = "0x6000AE0")]
	[Address(RVA = "0x8B704C", Offset = "0x8B704C", VA = "0x8B704C")]
	public PL_ActiveAssetsTrack()
	{
	}
}
[Token(Token = "0x2000169")]
public class ExampleWheelController : MonoBehaviour
{
	[Token(Token = "0x200052E")]
	private static class Uniforms
	{
		[Token(Token = "0x4001E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly int _MotionAmount;
	}

	[Token(Token = "0x400081E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float acceleration;

	[Token(Token = "0x400081F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Renderer motionVectorRenderer;

	[Token(Token = "0x4000820")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Rigidbody m_Rigidbody;

	[Token(Token = "0x6000AE1")]
	[Address(RVA = "0x4DC2A0", Offset = "0x4DC2A0", VA = "0x4DC2A0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000AE2")]
	[Address(RVA = "0x4DC330", Offset = "0x4DC330", VA = "0x4DC330")]
	private void Update()
	{
	}

	[Token(Token = "0x6000AE3")]
	[Address(RVA = "0x4DC584", Offset = "0x4DC584", VA = "0x4DC584")]
	public ExampleWheelController()
	{
	}
}
[Token(Token = "0x200016A")]
public class BonesOnlyBlendSystem : BlendSystem
{
	[Token(Token = "0x6000AE4")]
	[Address(RVA = "0x61D6BC", Offset = "0x61D6BC", VA = "0x61D6BC", Slot = "6")]
	public override void OnVariableChanged()
	{
	}

	[Token(Token = "0x6000AE5")]
	[Address(RVA = "0x61D6C8", Offset = "0x61D6C8", VA = "0x61D6C8")]
	public BonesOnlyBlendSystem()
	{
	}
}
[Serializable]
[Token(Token = "0x200016B")]
public class GestureInstance
{
	[Token(Token = "0x4000821")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[SerializeField]
	public string gesture;

	[Token(Token = "0x4000822")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[SerializeField]
	public AnimationClip clip;

	[Token(Token = "0x4000823")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	public string triggerName;

	[Token(Token = "0x6000AE6")]
	[Address(RVA = "0x4DF71C", Offset = "0x4DF71C", VA = "0x4DF71C")]
	public GestureInstance(string gesture, AnimationClip clip, string triggerName)
	{
	}

	[Token(Token = "0x6000AE7")]
	[Address(RVA = "0x4DF74C", Offset = "0x4DF74C", VA = "0x4DF74C")]
	public bool IsValid(Animator animator)
	{
		return default(bool);
	}
}
[Token(Token = "0x200016C")]
[ExecuteInEditMode]
public class SendLightVectorPositionToShader : MonoBehaviour
{
	[Token(Token = "0x4000824")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Color LightColor;

	[Token(Token = "0x4000825")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float LightIntensity;

	[Token(Token = "0x6000AE8")]
	[Address(RVA = "0xA8BB0C", Offset = "0xA8BB0C", VA = "0xA8BB0C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000AE9")]
	[Address(RVA = "0xA8BC30", Offset = "0xA8BC30", VA = "0xA8BC30")]
	public SendLightVectorPositionToShader()
	{
	}
}
[Token(Token = "0x200016D")]
[ExecuteInEditMode]
[ImageEffectAllowedInSceneView]
public class BloomEffect : MonoBehaviour
{
	[Token(Token = "0x4000826")]
	private const int BoxDownPrefilterPass = 0;

	[Token(Token = "0x4000827")]
	private const int BoxDownPass = 1;

	[Token(Token = "0x4000828")]
	private const int BoxUpPass = 2;

	[Token(Token = "0x4000829")]
	private const int ApplyBloomPass = 3;

	[Token(Token = "0x400082A")]
	private const int DebugBloomPass = 4;

	[Token(Token = "0x400082B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Shader bloomShader;

	[Token(Token = "0x400082C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2EFB98", Offset = "0x2EFB98")]
	public float intensity;

	[Token(Token = "0x400082D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2EFBB4", Offset = "0x2EFBB4")]
	public int iterations;

	[Token(Token = "0x400082E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2EFBD0", Offset = "0x2EFBD0")]
	public float threshold;

	[Token(Token = "0x400082F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2EFBEC", Offset = "0x2EFBEC")]
	public float softThreshold;

	[Token(Token = "0x4000830")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2EFC04", Offset = "0x2EFC04")]
	public int reduceSizeFactor;

	[Token(Token = "0x4000831")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool debug;

	[Token(Token = "0x4000832")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RenderTexture[] textures;

	[NonSerialized]
	[Token(Token = "0x4000833")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Material bloom;

	[Token(Token = "0x6000AEA")]
	[Address(RVA = "0x61CF9C", Offset = "0x61CF9C", VA = "0x61CF9C")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x6000AEB")]
	[Address(RVA = "0x61D624", Offset = "0x61D624", VA = "0x61D624")]
	public BloomEffect()
	{
	}
}
[Token(Token = "0x200016E")]
public class ChangeLightingOnEnable : MonoBehaviour
{
	[Token(Token = "0x4000834")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[SerializeField]
	private string loadFloader;

	[Token(Token = "0x6000AEC")]
	[Address(RVA = "0x624D10", Offset = "0x624D10", VA = "0x624D10")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000AED")]
	[Address(RVA = "0x624DC4", Offset = "0x624DC4", VA = "0x624DC4")]
	public ChangeLightingOnEnable()
	{
	}
}
[Token(Token = "0x200016F")]
public class LoadScenarioLightmap : MonoBehaviour
{
	[Token(Token = "0x4000835")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public string ScenarioName;

	[Token(Token = "0x4000836")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool IsActivated;

	[Token(Token = "0x4000837")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private LSS_FrontEnd LFE;

	[Token(Token = "0x4000838")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool IsLoad;

	[Token(Token = "0x6000AEE")]
	[Address(RVA = "0x4ED22C", Offset = "0x4ED22C", VA = "0x4ED22C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000AEF")]
	[Address(RVA = "0x4ED294", Offset = "0x4ED294", VA = "0x4ED294")]
	public void Update()
	{
	}

	[Token(Token = "0x6000AF0")]
	[Address(RVA = "0x4ED308", Offset = "0x4ED308", VA = "0x4ED308")]
	public LoadScenarioLightmap()
	{
	}
}
[Serializable]
[Token(Token = "0x2000170")]
public class CTR_LoadScenario_LMBehaviour : PlayableBehaviour
{
	[Token(Token = "0x4000839")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public bool IsActivated;

	[Token(Token = "0x400083A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public string ScenarioName;

	[Token(Token = "0x6000AF1")]
	[Address(RVA = "0x621C08", Offset = "0x621C08", VA = "0x621C08")]
	public CTR_LoadScenario_LMBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x2000171")]
public class CTR_LoadScenario_LMClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x400083B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public CTR_LoadScenario_LMBehaviour template;

	[Token(Token = "0x1700011F")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x6000AF2")]
		[Address(RVA = "0x621C10", Offset = "0x621C10", VA = "0x621C10", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x6000AF3")]
	[Address(RVA = "0x621C18", Offset = "0x621C18", VA = "0x621C18", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000AF4")]
	[Address(RVA = "0x621CF8", Offset = "0x621CF8", VA = "0x621CF8")]
	public CTR_LoadScenario_LMClip()
	{
	}
}
[Token(Token = "0x2000172")]
public class CTR_LoadScenario_LMMixerBehaviour : PlayableBehaviour
{
	[Token(Token = "0x400083C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private bool m_DefaultIsActivated;

	[Token(Token = "0x400083D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private string m_DefaultScenarioName;

	[Token(Token = "0x400083E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool m_AssignedIsActivated;

	[Token(Token = "0x400083F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private string m_AssignedScenarioName;

	[Token(Token = "0x4000840")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private LoadScenarioLightmap m_TrackBinding;

	[Token(Token = "0x6000AF5")]
	[Address(RVA = "0x621D74", Offset = "0x621D74", VA = "0x621D74", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x6000AF6")]
	[Address(RVA = "0x6221B0", Offset = "0x6221B0", VA = "0x6221B0")]
	public CTR_LoadScenario_LMMixerBehaviour()
	{
	}
}
[Token(Token = "0x2000173")]
[AttributeAttribute(Name = "TrackColorAttribute", RVA = "0x2E6DF8", Offset = "0x2E6DF8")]
[AttributeAttribute(Name = "TrackClipTypeAttribute", RVA = "0x2E6DF8", Offset = "0x2E6DF8")]
[AttributeAttribute(Name = "TrackBindingTypeAttribute", RVA = "0x2E6DF8", Offset = "0x2E6DF8")]
public class CTR_LoadScenario_LMTrack : TrackAsset
{
	[Token(Token = "0x6000AF7")]
	[Address(RVA = "0x6221B8", Offset = "0x6221B8", VA = "0x6221B8", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000AF8")]
	[Address(RVA = "0x62228C", Offset = "0x62228C", VA = "0x62228C", Slot = "28")]
	public override void GatherProperties(PlayableDirector director, IPropertyCollector driver)
	{
	}

	[Token(Token = "0x6000AF9")]
	[Address(RVA = "0x622294", Offset = "0x622294", VA = "0x622294")]
	public CTR_LoadScenario_LMTrack()
	{
	}
}
[Token(Token = "0x2000174")]
[ExecuteInEditMode]
public class UniqueId : MonoBehaviour
{
	[Token(Token = "0x4000841")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Dictionary<string, UniqueId> allGuids;

	[Token(Token = "0x4000842")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public string uniqueId;

	[Token(Token = "0x6000AFA")]
	[Address(RVA = "0x5A2600", Offset = "0x5A2600", VA = "0x5A2600")]
	public UniqueId()
	{
	}
}
[Token(Token = "0x2000175")]
public class CarComponents : MonoBehaviour
{
	[Token(Token = "0x200052F")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EAD1C", Offset = "0x2EAD1C")]
	private sealed class <WaitLights>d__22 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private int <>1__state;

		[Token(Token = "0x4001E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private object <>2__current;

		[Token(Token = "0x4001E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float waitTime;

		[Token(Token = "0x4001E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public CarComponents <>4__this;

		[Token(Token = "0x170003AE")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001D4F")]
			[Address(RVA = "0x624C78", Offset = "0x624C78", VA = "0x624C78", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003AF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001D51")]
			[Address(RVA = "0x624D08", Offset = "0x624D08", VA = "0x624D08", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001D4C")]
		[Address(RVA = "0x6249F0", Offset = "0x6249F0", VA = "0x6249F0")]
		[DebuggerHidden]
		public <WaitLights>d__22(int <>1__state)
		{
		}

		[Token(Token = "0x6001D4D")]
		[Address(RVA = "0x624B68", Offset = "0x624B68", VA = "0x624B68", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001D4E")]
		[Address(RVA = "0x624B6C", Offset = "0x624B6C", VA = "0x624B6C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001D50")]
		[Address(RVA = "0x624C80", Offset = "0x624C80", VA = "0x624C80", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000843")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public bool blink;

	[Token(Token = "0x4000844")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x2EFC30", Offset = "0x2EFC30")]
	public bool frontLightsOn;

	[Token(Token = "0x4000845")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
	public bool brakeEffectsOn;

	[Token(Token = "0x4000846")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Transform SpeedNeedle;

	[Token(Token = "0x4000847")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Vector2 SpeedNeedleRotateRange;

	[Token(Token = "0x4000848")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Vector3 SpeedEulers;

	[Token(Token = "0x4000849")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform RpmNeedle;

	[Token(Token = "0x400084A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Vector2 RpmNeedleRotateRange;

	[Token(Token = "0x400084B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 RpmdEulers;

	[Token(Token = "0x400084C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float _NeedleSmoothing;

	[Token(Token = "0x400084D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public Transform steeringWheel;

	[Token(Token = "0x400084E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject brakeEffects;

	[Token(Token = "0x400084F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public GameObject frontLightEffects;

	[Token(Token = "0x4000850")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject reverseEffect;

	[Token(Token = "0x4000851")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float rotateNeedles;

	[Token(Token = "0x4000852")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Text txtSpeed;

	[Token(Token = "0x4000853")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public Text txtRPM;

	[Token(Token = "0x4000854")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private IEnumerator coroutine;

	[Token(Token = "0x6000AFC")]
	[Address(RVA = "0x624144", Offset = "0x624144", VA = "0x624144")]
	private void Start()
	{
	}

	[Token(Token = "0x6000AFD")]
	[Address(RVA = "0x624364", Offset = "0x624364", VA = "0x624364")]
	private void Update()
	{
	}

	[Token(Token = "0x6000AFE")]
	[Address(RVA = "0x624930", Offset = "0x624930", VA = "0x624930")]
	public void TurnOnFrontLights()
	{
	}

	[Token(Token = "0x6000AFF")]
	[Address(RVA = "0x6249B4", Offset = "0x6249B4", VA = "0x6249B4")]
	public void TurnOnBackLights()
	{
	}

	[Token(Token = "0x6000B00")]
	[Address(RVA = "0x6242B0", Offset = "0x6242B0", VA = "0x6242B0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2FAA4C", Offset = "0x2FAA4C")]
	private IEnumerator WaitLights(float waitTime)
	{
		return null;
	}

	[Token(Token = "0x6000B01")]
	[Address(RVA = "0x624A10", Offset = "0x624A10", VA = "0x624A10")]
	public CarComponents()
	{
	}
}
namespace LSS
{
	[Token(Token = "0x2000176")]
	public class LSS_FrontEnd : LSS_FrontEndBase
	{
		[Token(Token = "0x2000530")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EAD2C", Offset = "0x2EAD2C")]
		private sealed class <ApplySceneInfo>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001E1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int <>1__state;

			[Token(Token = "0x4001E1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private object <>2__current;

			[Token(Token = "0x4001E20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public LSS_Models.ModelsInterface[] infos;

			[Token(Token = "0x4001E21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public LSS_FrontEnd <>4__this;

			[Token(Token = "0x170003B0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001D55")]
				[Address(RVA = "0x4E6908", Offset = "0x4E6908", VA = "0x4E6908", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003B1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001D57")]
				[Address(RVA = "0x4E6998", Offset = "0x4E6998", VA = "0x4E6998", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001D52")]
			[Address(RVA = "0x4E5334", Offset = "0x4E5334", VA = "0x4E5334")]
			[DebuggerHidden]
			public <ApplySceneInfo>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6001D53")]
			[Address(RVA = "0x4E5A7C", Offset = "0x4E5A7C", VA = "0x4E5A7C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001D54")]
			[Address(RVA = "0x4E5A80", Offset = "0x4E5A80", VA = "0x4E5A80", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001D56")]
			[Address(RVA = "0x4E6910", Offset = "0x4E6910", VA = "0x4E6910", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000531")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EAD3C", Offset = "0x2EAD3C")]
		private sealed class <ApplyMaterialsInfo>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001E22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int <>1__state;

			[Token(Token = "0x4001E23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private object <>2__current;

			[Token(Token = "0x4001E24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string[] infos;

			[Token(Token = "0x4001E25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public LSS_FrontEnd <>4__this;

			[Token(Token = "0x170003B2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001D5B")]
				[Address(RVA = "0x4E59E4", Offset = "0x4E59E4", VA = "0x4E59E4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003B3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001D5D")]
				[Address(RVA = "0x4E5A74", Offset = "0x4E5A74", VA = "0x4E5A74", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001D58")]
			[Address(RVA = "0x4E5354", Offset = "0x4E5354", VA = "0x4E5354")]
			[DebuggerHidden]
			public <ApplyMaterialsInfo>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x6001D59")]
			[Address(RVA = "0x4E5418", Offset = "0x4E5418", VA = "0x4E5418", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001D5A")]
			[Address(RVA = "0x4E541C", Offset = "0x4E541C", VA = "0x4E541C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001D5C")]
			[Address(RVA = "0x4E59EC", Offset = "0x4E59EC", VA = "0x4E59EC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000532")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EAD4C", Offset = "0x2EAD4C")]
		private sealed class <LoadLightProbes>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001E26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int <>1__state;

			[Token(Token = "0x4001E27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private object <>2__current;

			[Token(Token = "0x4001E28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public LSS_Models.SphericalHarmonicsModel[] lightProbes;

			[Token(Token = "0x170003B4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001D61")]
				[Address(RVA = "0x4E6CEC", Offset = "0x4E6CEC", VA = "0x4E6CEC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003B5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001D63")]
				[Address(RVA = "0x4E6D7C", Offset = "0x4E6D7C", VA = "0x4E6D7C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001D5E")]
			[Address(RVA = "0x4E5374", Offset = "0x4E5374", VA = "0x4E5374")]
			[DebuggerHidden]
			public <LoadLightProbes>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x6001D5F")]
			[Address(RVA = "0x4E69A0", Offset = "0x4E69A0", VA = "0x4E69A0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001D60")]
			[Address(RVA = "0x4E69A4", Offset = "0x4E69A4", VA = "0x4E69A4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001D62")]
			[Address(RVA = "0x4E6CF4", Offset = "0x4E6CF4", VA = "0x4E6CF4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static LSS_FrontEnd instance;

		[Token(Token = "0x4000856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private LSS_Models.LightingScenarioModel lightingScenariosData;

		[Token(Token = "0x4000857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EFC64", Offset = "0x2EFC64")]
		private bool loadOnAwake;

		[Token(Token = "0x6000B02")]
		[Address(RVA = "0x4E475C", Offset = "0x4E475C", VA = "0x4E475C")]
		public void Awake()
		{
		}

		[Token(Token = "0x6000B03")]
		[Address(RVA = "0x4E482C", Offset = "0x4E482C", VA = "0x4E482C")]
		private void OnSceneLoaded(Scene scene, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x6000B04")]
		[Address(RVA = "0x4E4E70", Offset = "0x4E4E70", VA = "0x4E4E70")]
		public void ActiveLightedScene(string sceneName)
		{
		}

		[Token(Token = "0x6000B05")]
		[Address(RVA = "0x4E4F38", Offset = "0x4E4F38", VA = "0x4E4F38")]
		public void Load(string folder)
		{
		}

		[Token(Token = "0x6000B06")]
		[Address(RVA = "0x4E4830", Offset = "0x4E4830", VA = "0x4E4830")]
		public void Load()
		{
		}

		[Token(Token = "0x6000B07")]
		[Address(RVA = "0x4E5158", Offset = "0x4E5158", VA = "0x4E5158")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2FAAC4", Offset = "0x2FAAC4")]
		public IEnumerator ApplySceneInfo(LSS_Models.ModelsInterface[] infos)
		{
			return null;
		}

		[Token(Token = "0x6000B08")]
		[Address(RVA = "0x4E5200", Offset = "0x4E5200", VA = "0x4E5200")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2FAB3C", Offset = "0x2FAB3C")]
		private IEnumerator ApplyMaterialsInfo(string[] infos)
		{
			return null;
		}

		[Token(Token = "0x6000B09")]
		[Address(RVA = "0x4E52A8", Offset = "0x4E52A8", VA = "0x4E52A8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2FABB4", Offset = "0x2FABB4")]
		private IEnumerator LoadLightProbes(LSS_Models.SphericalHarmonicsModel[] lightProbes)
		{
			return null;
		}

		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0x4E5394", Offset = "0x4E5394", VA = "0x4E5394")]
		public LSS_FrontEnd()
		{
		}
	}
	[Token(Token = "0x2000177")]
	[ExecuteInEditMode]
	[DisallowMultipleComponent]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x2E6ED4", Offset = "0x2E6ED4")]
	public class LSS_FrontEndBase : MonoBehaviour
	{
		[Token(Token = "0x4000858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private string m_jsonFileName;

		[Token(Token = "0x4000859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EFCAC", Offset = "0x2EFCAC")]
		private string m_resourceStorageFolder;

		[Token(Token = "0x400085A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private string m_resourceTemporaryFolder;

		[Token(Token = "0x400085B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EFCF4", Offset = "0x2EFCF4")]
		private bool m_isVerbose;

		[Token(Token = "0x17000120")]
		public string jsonFileName
		{
			[Token(Token = "0x6000B0B")]
			[Address(RVA = "0x4E6D84", Offset = "0x4E6D84", VA = "0x4E6D84")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000121")]
		public string resourceFolder
		{
			[Token(Token = "0x6000B0C")]
			[Address(RVA = "0x4E6D8C", Offset = "0x4E6D8C", VA = "0x4E6D8C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B0D")]
			[Address(RVA = "0x4E6D94", Offset = "0x4E6D94", VA = "0x4E6D94")]
			set
			{
			}
		}

		[Token(Token = "0x17000122")]
		public bool isVerbose
		{
			[Token(Token = "0x6000B0E")]
			[Address(RVA = "0x4E6D9C", Offset = "0x4E6D9C", VA = "0x4E6D9C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000B0F")]
		[Address(RVA = "0x4E6DA4", Offset = "0x4E6DA4", VA = "0x4E6DA4")]
		public string GetUniqueID(GameObject go)
		{
			return null;
		}

		[Token(Token = "0x6000B10")]
		[Address(RVA = "0x4E5098", Offset = "0x4E5098", VA = "0x4E5098")]
		public void RegisterAllUIDs()
		{
		}

		[Token(Token = "0x6000B11")]
		[Address(RVA = "0x4E590C", Offset = "0x4E590C", VA = "0x4E590C")]
		public string GetJsonResourcePath(string f)
		{
			return null;
		}

		[Token(Token = "0x6000B12")]
		[Address(RVA = "0x4E4FFC", Offset = "0x4E4FFC", VA = "0x4E4FFC")]
		public LSS_Models.LightingScenarioModel LoadJsonFile()
		{
			return null;
		}

		[Token(Token = "0x6000B13")]
		[Address(RVA = "0x4E5398", Offset = "0x4E5398", VA = "0x4E5398")]
		public LSS_FrontEndBase()
		{
		}
	}
	[Token(Token = "0x2000178")]
	public class LSS_Models : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000533")]
		public class SphericalHarmonicsModel
		{
			[Token(Token = "0x4001E29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float[] coefficients;

			[Token(Token = "0x6001D64")]
			[Address(RVA = "0x4E7BFC", Offset = "0x4E7BFC", VA = "0x4E7BFC")]
			public SphericalHarmonicsModel()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000534")]
		public class GameObjectModel : BaseModel, ModelsInterface
		{
			[Token(Token = "0x4001E2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public bool enabled;

			[Token(Token = "0x6001D65")]
			[Address(RVA = "0x4E72EC", Offset = "0x4E72EC", VA = "0x4E72EC", Slot = "6")]
			public object GetComponentObject()
			{
				return null;
			}

			[Token(Token = "0x6001D66")]
			[Address(RVA = "0x4E73CC", Offset = "0x4E73CC", VA = "0x4E73CC", Slot = "7")]
			public void CustomFunction()
			{
			}

			[Token(Token = "0x6001D67")]
			[Address(RVA = "0x4E7550", Offset = "0x4E7550", VA = "0x4E7550")]
			public GameObjectModel()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000535")]
		public class RendererModel : BaseModel, ModelsInterface
		{
			[Token(Token = "0x4001E2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public int lightmapIndex;

			[Token(Token = "0x4001E2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector4 lightmapOffsetScale;

			[Token(Token = "0x6001D68")]
			[Address(RVA = "0x4E791C", Offset = "0x4E791C", VA = "0x4E791C", Slot = "6")]
			public object GetComponentObject()
			{
				return null;
			}

			[Token(Token = "0x6001D69")]
			[Address(RVA = "0x4E7A28", Offset = "0x4E7A28", VA = "0x4E7A28", Slot = "7")]
			public void CustomFunction()
			{
			}

			[Token(Token = "0x6001D6A")]
			[Address(RVA = "0x4E7BF4", Offset = "0x4E7BF4", VA = "0x4E7BF4")]
			public RendererModel()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000536")]
		public class TerrainModel : BaseModel, ModelsInterface
		{
			[Token(Token = "0x4001E2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public int lightmapIndex;

			[Token(Token = "0x4001E2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector4 lightmapScaleOffset;

			[Token(Token = "0x6001D6B")]
			[Address(RVA = "0x4E7C70", Offset = "0x4E7C70", VA = "0x4E7C70", Slot = "6")]
			public object GetComponentObject()
			{
				return null;
			}

			[Token(Token = "0x6001D6C")]
			[Address(RVA = "0x4E7D7C", Offset = "0x4E7D7C", VA = "0x4E7D7C", Slot = "7")]
			public void CustomFunction()
			{
			}

			[Token(Token = "0x6001D6D")]
			[Address(RVA = "0x4E7EF0", Offset = "0x4E7EF0", VA = "0x4E7EF0")]
			public TerrainModel()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000537")]
		public class LightModel : BaseModel, ModelsInterface
		{
			[Token(Token = "0x4001E2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public bool enabled;

			[Token(Token = "0x4001E30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float intensity;

			[Token(Token = "0x4001E31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float range;

			[Token(Token = "0x4001E32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float shadowStrength;

			[Token(Token = "0x4001E33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public LightShadows shadows;

			[Token(Token = "0x4001E34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector4 color;

			[Token(Token = "0x6001D6E")]
			[Address(RVA = "0x4E7558", Offset = "0x4E7558", VA = "0x4E7558", Slot = "6")]
			public object GetComponentObject()
			{
				return null;
			}

			[Token(Token = "0x6001D6F")]
			[Address(RVA = "0x4E7664", Offset = "0x4E7664", VA = "0x4E7664", Slot = "7")]
			public void CustomFunction()
			{
			}

			[Token(Token = "0x6001D70")]
			[Address(RVA = "0x4E790C", Offset = "0x4E790C", VA = "0x4E790C")]
			public LightModel()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000538")]
		public class FlareModel : BaseModel, ModelsInterface
		{
			[Token(Token = "0x4001E35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public bool enabled;

			[Token(Token = "0x4001E36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector4 color;

			[Token(Token = "0x4001E37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float brightness;

			[Token(Token = "0x4001E38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float fadeSpeed;

			[Token(Token = "0x6001D71")]
			[Address(RVA = "0x4E6F94", Offset = "0x4E6F94", VA = "0x4E6F94", Slot = "6")]
			public object GetComponentObject()
			{
				return null;
			}

			[Token(Token = "0x6001D72")]
			[Address(RVA = "0x4E70A0", Offset = "0x4E70A0", VA = "0x4E70A0", Slot = "7")]
			public void CustomFunction()
			{
			}

			[Token(Token = "0x6001D73")]
			[Address(RVA = "0x4E72E4", Offset = "0x4E72E4", VA = "0x4E72E4")]
			public FlareModel()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000539")]
		public class LightingScenarioModel
		{
			[Token(Token = "0x4001E39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string uid;

			[Token(Token = "0x4001E3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public LightmapsMode lightmapsMode;

			[Token(Token = "0x4001E3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string[] lightmaps;

			[Token(Token = "0x4001E3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public string[] lightmapsDir;

			[Token(Token = "0x4001E3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string[] lightmapsShadow;

			[Token(Token = "0x4001E3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public string[] materials;

			[Token(Token = "0x4001E3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SphericalHarmonicsModel[] lightProbes;

			[Token(Token = "0x4001E40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public GameObjectModel[] gameObjectInfos;

			[Token(Token = "0x4001E41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public RendererModel[] rendererInfos;

			[Token(Token = "0x4001E42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public TerrainModel[] terrainInfos;

			[Token(Token = "0x4001E43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public FlareModel[] flareInfos;

			[Token(Token = "0x4001E44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public LightModel[] lightInfos;

			[Token(Token = "0x6001D74")]
			[Address(RVA = "0x4E7914", Offset = "0x4E7914", VA = "0x4E7914")]
			public LightingScenarioModel()
			{
			}
		}

		[Token(Token = "0x200053A")]
		public interface ModelsInterface
		{
			[Token(Token = "0x6001D75")]
			string GetUniqueID();

			[Token(Token = "0x6001D76")]
			object GetComponentObject();

			[Token(Token = "0x6001D77")]
			void CustomFunction();
		}

		[Serializable]
		[Token(Token = "0x200053B")]
		public class BaseModel
		{
			[Token(Token = "0x4001E45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string uniqueId;

			[Token(Token = "0x6001D78")]
			[Address(RVA = "0x4E6F84", Offset = "0x4E6F84", VA = "0x4E6F84", Slot = "4")]
			public string GetUniqueID()
			{
				return null;
			}

			[Token(Token = "0x6001D79")]
			[Address(RVA = "0x4E6F8C", Offset = "0x4E6F8C", VA = "0x4E6F8C")]
			public BaseModel()
			{
			}
		}

		[Token(Token = "0x6000B14")]
		[Address(RVA = "0x4E6F7C", Offset = "0x4E6F7C", VA = "0x4E6F7C")]
		public LSS_Models()
		{
		}
	}
	[Token(Token = "0x2000179")]
	public class LSS_ModelsBase : MonoBehaviour
	{
		[Token(Token = "0x6000B15")]
		[Address(RVA = "0x4E7EF8", Offset = "0x4E7EF8", VA = "0x4E7EF8")]
		public LSS_ModelsBase()
		{
		}
	}
	[Token(Token = "0x200017A")]
	[ExecuteInEditMode]
	public class LSS_UID : MonoBehaviour
	{
		[Token(Token = "0x200053C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EAD5C", Offset = "0x2EAD5C")]
		private sealed class <WaitOnDestroy>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001E46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int <>1__state;

			[Token(Token = "0x4001E47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private object <>2__current;

			[Token(Token = "0x4001E48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public LSS_UID <>4__this;

			[Token(Token = "0x170003B6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001D7D")]
				[Address(RVA = "0x4E88A0", Offset = "0x4E88A0", VA = "0x4E88A0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003B7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001D7F")]
				[Address(RVA = "0x4E8930", Offset = "0x4E8930", VA = "0x4E8930", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001D7A")]
			[Address(RVA = "0x4E841C", Offset = "0x4E841C", VA = "0x4E841C")]
			[DebuggerHidden]
			public <WaitOnDestroy>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x6001D7B")]
			[Address(RVA = "0x4E87B8", Offset = "0x4E87B8", VA = "0x4E87B8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001D7C")]
			[Address(RVA = "0x4E87BC", Offset = "0x4E87BC", VA = "0x4E87BC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001D7E")]
			[Address(RVA = "0x4E88A8", Offset = "0x4E88A8", VA = "0x4E88A8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400085C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private bool allowRecreate;

		[Token(Token = "0x400085D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Dictionary<string, LSS_UID> allGuids;

		[Token(Token = "0x400085E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		public string m_uniqueId;

		[Token(Token = "0x400085F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static GameObject managerInstance;

		[Token(Token = "0x4000860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private List<string> m_searchTags;

		[Token(Token = "0x17000123")]
		public string uniqueId
		{
			[Token(Token = "0x6000B16")]
			[Address(RVA = "0x4E6E34", Offset = "0x4E6E34", VA = "0x4E6E34")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000124")]
		public List<string> searchTags
		{
			[Token(Token = "0x6000B17")]
			[Address(RVA = "0x4E7F00", Offset = "0x4E7F00", VA = "0x4E7F00")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B18")]
		[Address(RVA = "0x4E7F08", Offset = "0x4E7F08", VA = "0x4E7F08")]
		public void OnSearchTagChange()
		{
		}

		[Token(Token = "0x6000B19")]
		[Address(RVA = "0x4E836C", Offset = "0x4E836C", VA = "0x4E836C")]
		public void DestroyLightingScenarioComponent()
		{
		}

		[Token(Token = "0x6000B1A")]
		[Address(RVA = "0x4E8390", Offset = "0x4E8390", VA = "0x4E8390")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2FAC2C", Offset = "0x2FAC2C")]
		private IEnumerator WaitOnDestroy()
		{
			return null;
		}

		[Token(Token = "0x6000B1B")]
		[Address(RVA = "0x4E843C", Offset = "0x4E843C", VA = "0x4E843C")]
		private bool ObjectHasScenariosComponents()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B1C")]
		[Address(RVA = "0x4E8500", Offset = "0x4E8500", VA = "0x4E8500")]
		public void Awake()
		{
		}

		[Token(Token = "0x6000B1D")]
		[Address(RVA = "0x4E851C", Offset = "0x4E851C", VA = "0x4E851C")]
		public void SetManagerInstanceID()
		{
		}

		[Token(Token = "0x6000B1E")]
		[Address(RVA = "0x4E8644", Offset = "0x4E8644", VA = "0x4E8644")]
		public void OnLevelWasLoaded()
		{
		}

		[Token(Token = "0x6000B1F")]
		[Address(RVA = "0x4E6E38", Offset = "0x4E6E38", VA = "0x4E6E38")]
		public string GenerateUniqueID()
		{
			return null;
		}

		[Token(Token = "0x6000B20")]
		[Address(RVA = "0x4E8660", Offset = "0x4E8660", VA = "0x4E8660", Slot = "4")]
		public virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6000B21")]
		[Address(RVA = "0x4E8720", Offset = "0x4E8720", VA = "0x4E8720")]
		public LSS_UID()
		{
		}
	}
}
namespace LSS_Components
{
	[Token(Token = "0x200017B")]
	[ExecuteInEditMode]
	public class LSS_ComponentBase : MonoBehaviour
	{
		[Token(Token = "0x6000B23")]
		[Address(RVA = "0x4E8938", Offset = "0x4E8938", VA = "0x4E8938", Slot = "4")]
		public virtual void Awake()
		{
		}

		[Token(Token = "0x6000B24")]
		[Address(RVA = "0x4E8948", Offset = "0x4E8948", VA = "0x4E8948")]
		public LSS_FrontEnd GetScenariosManager()
		{
			return null;
		}

		[Token(Token = "0x6000B25")]
		[Address(RVA = "0x4E8A8C", Offset = "0x4E8A8C", VA = "0x4E8A8C")]
		public void DestroyLightingScenarioComponent()
		{
		}

		[Token(Token = "0x6000B26")]
		[Address(RVA = "0x4E8B10", Offset = "0x4E8B10", VA = "0x4E8B10", Slot = "5")]
		public virtual object GetComponentInfo()
		{
			return null;
		}

		[Token(Token = "0x6000B27")]
		[Address(RVA = "0x4E8BC4", Offset = "0x4E8BC4", VA = "0x4E8BC4", Slot = "6")]
		public virtual int UpdateComponentInfos(LSS_Models.LightingScenarioModel lightingScenariosModels, bool insert = false)
		{
			return default(int);
		}

		[Token(Token = "0x6000B28")]
		[Address(RVA = "0x4E8C78", Offset = "0x4E8C78", VA = "0x4E8C78")]
		public LSS_ComponentBase()
		{
		}
	}
	[Token(Token = "0x200017C")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x2E6F8C", Offset = "0x2E6F8C")]
	public class LSS_GameObject : LSS_ComponentBase
	{
		[Token(Token = "0x17000125")]
		private GameObject component
		{
			[Token(Token = "0x6000B29")]
			[Address(RVA = "0x4E8C80", Offset = "0x4E8C80", VA = "0x4E8C80")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B2A")]
		[Address(RVA = "0x4E74F8", Offset = "0x4E74F8", VA = "0x4E74F8")]
		public void SetComponentInfo(LSS_Models.GameObjectModel info)
		{
		}

		[Token(Token = "0x6000B2B")]
		[Address(RVA = "0x4E8C88", Offset = "0x4E8C88", VA = "0x4E8C88")]
		public LSS_GameObject()
		{
		}
	}
	[Token(Token = "0x200017D")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x2E7004", Offset = "0x2E7004")]
	public class LSS_LensFlare : LSS_ComponentBase
	{
		[Token(Token = "0x17000126")]
		private LensFlare component
		{
			[Token(Token = "0x6000B2C")]
			[Address(RVA = "0x4E8C90", Offset = "0x4E8C90", VA = "0x4E8C90")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B2D")]
		[Address(RVA = "0x4E71CC", Offset = "0x4E71CC", VA = "0x4E71CC")]
		public void SetComponentInfo(LSS_Models.FlareModel info)
		{
		}

		[Token(Token = "0x6000B2E")]
		[Address(RVA = "0x4E8CF4", Offset = "0x4E8CF4", VA = "0x4E8CF4")]
		public LSS_LensFlare()
		{
		}
	}
	[Token(Token = "0x200017E")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x2E707C", Offset = "0x2E707C")]
	public class LSS_Light : LSS_ComponentBase
	{
		[Token(Token = "0x17000127")]
		private Light component
		{
			[Token(Token = "0x6000B2F")]
			[Address(RVA = "0x4E8CFC", Offset = "0x4E8CFC", VA = "0x4E8CFC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B30")]
		[Address(RVA = "0x4E7790", Offset = "0x4E7790", VA = "0x4E7790")]
		public void SetComponentInfo(LSS_Models.LightModel info)
		{
		}

		[Token(Token = "0x6000B31")]
		[Address(RVA = "0x4E8D60", Offset = "0x4E8D60", VA = "0x4E8D60")]
		public LSS_Light()
		{
		}
	}
	[Token(Token = "0x200017F")]
	[DisallowMultipleComponent]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x2E70F4", Offset = "0x2E70F4")]
	public class LSS_Material : MonoBehaviour
	{
		[Token(Token = "0x4000861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		public Material[] materials;

		[Token(Token = "0x6000B32")]
		[Address(RVA = "0x4E8D68", Offset = "0x4E8D68", VA = "0x4E8D68")]
		public LSS_Material()
		{
		}
	}
}
namespace Colorful
{
	[Token(Token = "0x2000180")]
	public sealed class MinAttribute : PropertyAttribute
	{
		[Token(Token = "0x4000862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly float Min;

		[Token(Token = "0x6000B33")]
		[Address(RVA = "0x5F00FC", Offset = "0x5F00FC", VA = "0x5F00FC")]
		public MinAttribute(float min)
		{
		}
	}
	[Token(Token = "0x2000181")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x2E717C", Offset = "0x2E717C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E717C", Offset = "0x2E717C")]
	public class BaseEffect : MonoBehaviour
	{
		[Token(Token = "0x4000863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Shader Shader;

		[Token(Token = "0x4000864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected Material m_Material;

		[Token(Token = "0x17000128")]
		public Shader ShaderSafe
		{
			[Token(Token = "0x6000B34")]
			[Address(RVA = "0x62C964", Offset = "0x62C964", VA = "0x62C964")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000129")]
		public Material Material
		{
			[Token(Token = "0x6000B35")]
			[Address(RVA = "0x62C7C4", Offset = "0x62C7C4", VA = "0x62C7C4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B36")]
		[Address(RVA = "0x62CA1C", Offset = "0x62CA1C", VA = "0x62CA1C", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000B37")]
		[Address(RVA = "0x62CB5C", Offset = "0x62CB5C", VA = "0x62CB5C", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000B38")]
		[Address(RVA = "0x62CC30", Offset = "0x62CC30", VA = "0x62CC30")]
		public void Apply(Texture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000B39")]
		[Address(RVA = "0x62CDA0", Offset = "0x62CDA0", VA = "0x62CDA0", Slot = "6")]
		protected virtual void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000B3A")]
		[Address(RVA = "0x62CDA4", Offset = "0x62CDA4", VA = "0x62CDA4", Slot = "7")]
		protected virtual string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000B3B")]
		[Address(RVA = "0x62C95C", Offset = "0x62C95C", VA = "0x62C95C")]
		public BaseEffect()
		{
		}
	}
	[Token(Token = "0x2000182")]
	public static class CLib
	{
		[Token(Token = "0x4000865")]
		public const float PI_2 = (float)Math.PI / 2f;

		[Token(Token = "0x4000866")]
		public const float PI2 = (float)Math.PI * 2f;

		[Token(Token = "0x6000B3C")]
		[Address(RVA = "0x62E218", Offset = "0x62E218", VA = "0x62E218")]
		public static float Frac(float f)
		{
			return default(float);
		}

		[Token(Token = "0x6000B3D")]
		[Address(RVA = "0x62E2B0", Offset = "0x62E2B0", VA = "0x62E2B0")]
		public static bool IsLinearColorSpace()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000183")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E721C", Offset = "0x2E721C")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E721C", Offset = "0x2E721C")]
	public class AnalogTV : BaseEffect
	{
		[Token(Token = "0x4000867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EFD6C", Offset = "0x2EFD6C")]
		public bool AutomaticPhase;

		[Token(Token = "0x4000868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EFDC0", Offset = "0x2EFDC0")]
		public float Phase;

		[Token(Token = "0x4000869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EFE20", Offset = "0x2EFE20")]
		public bool ConvertToGrayscale;

		[Token(Token = "0x400086A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2EFE54", Offset = "0x2EFE54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EFE54", Offset = "0x2EFE54")]
		public float NoiseIntensity;

		[Token(Token = "0x400086B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2EFED4", Offset = "0x2EFED4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EFED4", Offset = "0x2EFED4")]
		public float ScanlinesIntensity;

		[Token(Token = "0x400086C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2EFF5C", Offset = "0x2EFF5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EFF5C", Offset = "0x2EFF5C")]
		public int ScanlinesCount;

		[Token(Token = "0x400086D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2EFFCC", Offset = "0x2EFFCC")]
		public float ScanlinesOffset;

		[Token(Token = "0x400086E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F0000", Offset = "0x2F0000")]
		public bool VerticalScanlines;

		[Token(Token = "0x400086F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F0048", Offset = "0x2F0048")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F0048", Offset = "0x2F0048")]
		public float Distortion;

		[Token(Token = "0x4000870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F0098", Offset = "0x2F0098")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F0098", Offset = "0x2F0098")]
		public float CubicDistortion;

		[Token(Token = "0x4000871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F00E8", Offset = "0x2F00E8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F00E8", Offset = "0x2F00E8")]
		public float Scale;

		[Token(Token = "0x6000B3E")]
		[Address(RVA = "0x62C5B0", Offset = "0x62C5B0", VA = "0x62C5B0", Slot = "8")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000B3F")]
		[Address(RVA = "0x62C60C", Offset = "0x62C60C", VA = "0x62C60C", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000B40")]
		[Address(RVA = "0x62C8B8", Offset = "0x62C8B8", VA = "0x62C8B8", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000B41")]
		[Address(RVA = "0x62C914", Offset = "0x62C914", VA = "0x62C914")]
		public AnalogTV()
		{
		}
	}
	[Token(Token = "0x2000184")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E72AC", Offset = "0x2E72AC")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E72AC", Offset = "0x2E72AC")]
	public class BilateralGaussianBlur : BaseEffect
	{
		[Token(Token = "0x4000872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F013C", Offset = "0x2F013C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F013C", Offset = "0x2F013C")]
		public int Passes;

		[Token(Token = "0x4000873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F0190", Offset = "0x2F0190")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F0190", Offset = "0x2F0190")]
		public float Threshold;

		[Token(Token = "0x4000874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F0208", Offset = "0x2F0208")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F0208", Offset = "0x2F0208")]
		public float Amount;

		[Token(Token = "0x6000B42")]
		[Address(RVA = "0x62CE00", Offset = "0x62CE00", VA = "0x62CE00", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000B43")]
		[Address(RVA = "0x62CEBC", Offset = "0x62CEBC", VA = "0x62CEBC", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000B44")]
		[Address(RVA = "0x62D18C", Offset = "0x62D18C", VA = "0x62D18C", Slot = "8")]
		protected virtual void OnePassBlur(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000B45")]
		[Address(RVA = "0x62D47C", Offset = "0x62D47C", VA = "0x62D47C", Slot = "9")]
		protected virtual void MultiPassBlur(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000B46")]
		[Address(RVA = "0x62DA94", Offset = "0x62DA94", VA = "0x62DA94", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000B47")]
		[Address(RVA = "0x62DAF0", Offset = "0x62DAF0", VA = "0x62DAF0")]
		public BilateralGaussianBlur()
		{
		}
	}
	[Token(Token = "0x2000185")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E7348", Offset = "0x2E7348")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E7348", Offset = "0x2E7348")]
	public class BleachBypass : BaseEffect
	{
		[Token(Token = "0x4000875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F0258", Offset = "0x2F0258")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F0258", Offset = "0x2F0258")]
		public float Amount;

		[Token(Token = "0x6000B48")]
		[Address(RVA = "0x62DB14", Offset = "0x62DB14", VA = "0x62DB14", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000B49")]
		[Address(RVA = "0x62DC50", Offset = "0x62DC50", VA = "0x62DC50", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000B4A")]
		[Address(RVA = "0x62DCAC", Offset = "0x62DCAC", VA = "0x62DCAC")]
		public BleachBypass()
		{
		}
	}
	[Token(Token = "0x2000186")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E73DC", Offset = "0x2E73DC")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E73DC", Offset = "0x2E73DC")]
	public class Blend : BaseEffect
	{
		[Token(Token = "0x200053D")]
		public enum BlendingMode
		{
			[Token(Token = "0x4001E4A")]
			Darken = 0,
			[Token(Token = "0x4001E4B")]
			Multiply = 1,
			[Token(Token = "0x4001E4C")]
			ColorBurn = 2,
			[Token(Token = "0x4001E4D")]
			LinearBurn = 3,
			[Token(Token = "0x4001E4E")]
			DarkerColor = 4,
			[Token(Token = "0x4001E4F")]
			Lighten = 6,
			[Token(Token = "0x4001E50")]
			Screen = 7,
			[Token(Token = "0x4001E51")]
			ColorDodge = 8,
			[Token(Token = "0x4001E52")]
			LinearDodge = 9,
			[Token(Token = "0x4001E53")]
			LighterColor = 10,
			[Token(Token = "0x4001E54")]
			Overlay = 12,
			[Token(Token = "0x4001E55")]
			SoftLight = 13,
			[Token(Token = "0x4001E56")]
			HardLight = 14,
			[Token(Token = "0x4001E57")]
			VividLight = 15,
			[Token(Token = "0x4001E58")]
			LinearLight = 16,
			[Token(Token = "0x4001E59")]
			PinLight = 17,
			[Token(Token = "0x4001E5A")]
			HardMix = 18,
			[Token(Token = "0x4001E5B")]
			Difference = 20,
			[Token(Token = "0x4001E5C")]
			Exclusion = 21,
			[Token(Token = "0x4001E5D")]
			Subtract = 22,
			[Token(Token = "0x4001E5E")]
			Divide = 23
		}

		[Token(Token = "0x4000876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F02A8", Offset = "0x2F02A8")]
		public Texture Texture;

		[Token(Token = "0x4000877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F030C", Offset = "0x2F030C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F030C", Offset = "0x2F030C")]
		public float Amount;

		[Token(Token = "0x4000878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F035C", Offset = "0x2F035C")]
		public BlendingMode Mode;

		[Token(Token = "0x6000B4B")]
		[Address(RVA = "0x62DCBC", Offset = "0x62DCBC", VA = "0x62DCBC", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000B4C")]
		[Address(RVA = "0x62DE98", Offset = "0x62DE98", VA = "0x62DE98", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000B4D")]
		[Address(RVA = "0x62DEF4", Offset = "0x62DEF4", VA = "0x62DEF4")]
		public Blend()
		{
		}
	}
	[Token(Token = "0x2000187")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E7464", Offset = "0x2E7464")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E7464", Offset = "0x2E7464")]
	public class BrightnessContrastGamma : BaseEffect
	{
		[Token(Token = "0x4000879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F0398", Offset = "0x2F0398")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F0398", Offset = "0x2F0398")]
		public float Brightness;

		[Token(Token = "0x400087A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F03F0", Offset = "0x2F03F0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F03F0", Offset = "0x2F03F0")]
		public float Contrast;

		[Token(Token = "0x400087B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 ContrastCoeff;

		[Token(Token = "0x400087C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F0448", Offset = "0x2F0448")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F0448", Offset = "0x2F0448")]
		public float Gamma;

		[Token(Token = "0x6000B4E")]
		[Address(RVA = "0x62DF04", Offset = "0x62DF04", VA = "0x62DF04", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000B4F")]
		[Address(RVA = "0x62E15C", Offset = "0x62E15C", VA = "0x62E15C", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000B50")]
		[Address(RVA = "0x62E1B8", Offset = "0x62E1B8", VA = "0x62E1B8")]
		public BrightnessContrastGamma()
		{
		}
	}
	[Token(Token = "0x2000188")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E7508", Offset = "0x2E7508")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E7508", Offset = "0x2E7508")]
	public class ChannelClamper : BaseEffect
	{
		[Token(Token = "0x400087D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector2 Red;

		[Token(Token = "0x400087E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector2 Green;

		[Token(Token = "0x400087F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector2 Blue;

		[Token(Token = "0x6000B51")]
		[Address(RVA = "0x62E2CC", Offset = "0x62E2CC", VA = "0x62E2CC", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000B52")]
		[Address(RVA = "0x62E4C4", Offset = "0x62E4C4", VA = "0x62E4C4", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000B53")]
		[Address(RVA = "0x62E520", Offset = "0x62E520", VA = "0x62E520")]
		public ChannelClamper()
		{
		}
	}
	[Token(Token = "0x2000189")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E75A0", Offset = "0x2E75A0")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E75A0", Offset = "0x2E75A0")]
	public class ChannelMixer : BaseEffect
	{
		[Token(Token = "0x4000880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector3 Red;

		[Token(Token = "0x4000881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 Green;

		[Token(Token = "0x4000882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 Blue;

		[Token(Token = "0x4000883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 Constant;

		[Token(Token = "0x6000B54")]
		[Address(RVA = "0x62E5C8", Offset = "0x62E5C8", VA = "0x62E5C8", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000B55")]
		[Address(RVA = "0x62E898", Offset = "0x62E898", VA = "0x62E898", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000B56")]
		[Address(RVA = "0x62E8F4", Offset = "0x62E8F4", VA = "0x62E8F4")]
		public ChannelMixer()
		{
		}
	}
	[Token(Token = "0x200018A")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E7634", Offset = "0x2E7634")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E7634", Offset = "0x2E7634")]
	public class ChannelSwapper : BaseEffect
	{
		[Token(Token = "0x200053E")]
		public enum Channel
		{
			[Token(Token = "0x4001E60")]
			Red,
			[Token(Token = "0x4001E61")]
			Green,
			[Token(Token = "0x4001E62")]
			Blue
		}

		[Token(Token = "0x4000884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F04B0", Offset = "0x2F04B0")]
		public Channel RedSource;

		[Token(Token = "0x4000885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F0510", Offset = "0x2F0510")]
		public Channel GreenSource;

		[Token(Token = "0x4000886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F0570", Offset = "0x2F0570")]
		public Channel BlueSource;

		[Token(Token = "0x4000887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Vector4[] m_Channels;

		[Token(Token = "0x6000B57")]
		[Address(RVA = "0x62E9F4", Offset = "0x62E9F4", VA = "0x62E9F4", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000B58")]
		[Address(RVA = "0x62EC9C", Offset = "0x62EC9C", VA = "0x62EC9C", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000B59")]
		[Address(RVA = "0x62ECF8", Offset = "0x62ECF8", VA = "0x62ECF8")]
		public ChannelSwapper()
		{
		}
	}
	[Token(Token = "0x200018B")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E76CC", Offset = "0x2E76CC")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E76CC", Offset = "0x2E76CC")]
	public class ChromaticAberration : BaseEffect
	{
		[Token(Token = "0x4000888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F05D0", Offset = "0x2F05D0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F05D0", Offset = "0x2F05D0")]
		public float RedRefraction;

		[Token(Token = "0x4000889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F064C", Offset = "0x2F064C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F064C", Offset = "0x2F064C")]
		public float GreenRefraction;

		[Token(Token = "0x400088A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F06C8", Offset = "0x2F06C8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F06C8", Offset = "0x2F06C8")]
		public float BlueRefraction;

		[Token(Token = "0x400088B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F0744", Offset = "0x2F0744")]
		public bool PreserveAlpha;

		[Token(Token = "0x6000B5B")]
		[Address(RVA = "0x62EEA4", Offset = "0x62EEA4", VA = "0x62EEA4", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000B5C")]
		[Address(RVA = "0x62F004", Offset = "0x62F004", VA = "0x62F004", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000B5D")]
		[Address(RVA = "0x62F060", Offset = "0x62F060", VA = "0x62F060")]
		public ChromaticAberration()
		{
		}
	}
	[Token(Token = "0x200018C")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E7764", Offset = "0x2E7764")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E7764", Offset = "0x2E7764")]
	public class ComicBook : BaseEffect
	{
		[Token(Token = "0x400088C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F0778", Offset = "0x2F0778")]
		public float StripAngle;

		[Token(Token = "0x400088D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "MinAttribute", RVA = "0x2F07C4", Offset = "0x2F07C4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F07C4", Offset = "0x2F07C4")]
		public float StripDensity;

		[Token(Token = "0x400088E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F0824", Offset = "0x2F0824")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F0824", Offset = "0x2F0824")]
		public float StripThickness;

		[Token(Token = "0x400088F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector2 StripLimits;

		[Token(Token = "0x4000890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x2F0890", Offset = "0x2F0890")]
		public Color StripInnerColor;

		[Token(Token = "0x4000891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x2F08A4", Offset = "0x2F08A4")]
		public Color StripOuterColor;

		[Token(Token = "0x4000892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x2F08B8", Offset = "0x2F08B8")]
		public Color FillColor;

		[Token(Token = "0x4000893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x2F08CC", Offset = "0x2F08CC")]
		public Color BackgroundColor;

		[Token(Token = "0x4000894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F08E0", Offset = "0x2F08E0")]
		public bool EdgeDetection;

		[Token(Token = "0x4000895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "MinAttribute", RVA = "0x2F092C", Offset = "0x2F092C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F092C", Offset = "0x2F092C")]
		public float EdgeThreshold;

		[Token(Token = "0x4000896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x2F097C", Offset = "0x2F097C")]
		public Color EdgeColor;

		[Token(Token = "0x4000897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F0990", Offset = "0x2F0990")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F0990", Offset = "0x2F0990")]
		public float Amount;

		[Token(Token = "0x6000B5E")]
		[Address(RVA = "0x62F088", Offset = "0x62F088", VA = "0x62F088", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000B5F")]
		[Address(RVA = "0x62F4F8", Offset = "0x62F4F8", VA = "0x62F4F8", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000B60")]
		[Address(RVA = "0x62F554", Offset = "0x62F554", VA = "0x62F554")]
		public ComicBook()
		{
		}
	}
	[Token(Token = "0x200018D")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E77F4", Offset = "0x2E77F4")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E77F4", Offset = "0x2E77F4")]
	public class ContrastGain : BaseEffect
	{
		[Token(Token = "0x4000898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F09E0", Offset = "0x2F09E0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F09E0", Offset = "0x2F09E0")]
		public float Gain;

		[Token(Token = "0x6000B61")]
		[Address(RVA = "0x62F6B8", Offset = "0x62F6B8", VA = "0x62F6B8", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000B62")]
		[Address(RVA = "0x62F7A0", Offset = "0x62F7A0", VA = "0x62F7A0", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000B63")]
		[Address(RVA = "0x62F7FC", Offset = "0x62F7FC", VA = "0x62F7FC")]
		public ContrastGain()
		{
		}
	}
	[Token(Token = "0x200018E")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E7888", Offset = "0x2E7888")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E7888", Offset = "0x2E7888")]
	public class ContrastVignette : BaseEffect
	{
		[Token(Token = "0x4000899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F0A34", Offset = "0x2F0A34")]
		public Vector2 Center;

		[Token(Token = "0x400089A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F0A68", Offset = "0x2F0A68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F0A68", Offset = "0x2F0A68")]
		public float Sharpness;

		[Token(Token = "0x400089B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F0AC0", Offset = "0x2F0AC0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F0AC0", Offset = "0x2F0AC0")]
		public float Darkness;

		[Token(Token = "0x400089C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F0B14", Offset = "0x2F0B14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F0B14", Offset = "0x2F0B14")]
		public float Contrast;

		[Token(Token = "0x400089D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 ContrastCoeff;

		[Token(Token = "0x400089E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F0B68", Offset = "0x2F0B68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F0B68", Offset = "0x2F0B68")]
		public float EdgeBlending;

		[Token(Token = "0x6000B64")]
		[Address(RVA = "0x62F80C", Offset = "0x62F80C", VA = "0x62F80C", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000B65")]
		[Address(RVA = "0x62FA50", Offset = "0x62FA50", VA = "0x62FA50", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000B66")]
		[Address(RVA = "0x62FAAC", Offset = "0x62FAAC", VA = "0x62FAAC")]
		public ContrastVignette()
		{
		}
	}
	[Token(Token = "0x200018F")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E7920", Offset = "0x2E7920")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E7920", Offset = "0x2E7920")]
	public class Convolution3x3 : BaseEffect
	{
		[Token(Token = "0x400089F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector3 KernelTop;

		[Token(Token = "0x40008A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 KernelMiddle;

		[Token(Token = "0x40008A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 KernelBottom;

		[Token(Token = "0x40008A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F0BBC", Offset = "0x2F0BBC")]
		public float Divisor;

		[Token(Token = "0x40008A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F0C08", Offset = "0x2F0C08")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F0C08", Offset = "0x2F0C08")]
		public float Amount;

		[Token(Token = "0x6000B67")]
		[Address(RVA = "0x62FB4C", Offset = "0x62FB4C", VA = "0x62FB4C", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000B68")]
		[Address(RVA = "0x62FF60", Offset = "0x62FF60", VA = "0x62FF60", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000B69")]
		[Address(RVA = "0x62FFBC", Offset = "0x62FFBC", VA = "0x62FFBC")]
		public Convolution3x3()
		{
		}
	}
	[Token(Token = "0x2000190")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E79BC", Offset = "0x2E79BC")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E79BC", Offset = "0x2E79BC")]
	public class CrossStitch : BaseEffect
	{
		[Token(Token = "0x40008A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F0C58", Offset = "0x2F0C58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F0C58", Offset = "0x2F0C58")]
		public int Size;

		[Token(Token = "0x40008A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F0CC8", Offset = "0x2F0CC8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F0CC8", Offset = "0x2F0CC8")]
		public float Brightness;

		[Token(Token = "0x40008A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F0D1C", Offset = "0x2F0D1C")]
		public bool Invert;

		[Token(Token = "0x40008A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F0D6C", Offset = "0x2F0D6C")]
		public bool Pixelize;

		[Token(Token = "0x6000B6A")]
		[Address(RVA = "0x6300A0", Offset = "0x6300A0", VA = "0x6300A0", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000B6B")]
		[Address(RVA = "0x6302F8", Offset = "0x6302F8", VA = "0x6302F8", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000B6C")]
		[Address(RVA = "0x630354", Offset = "0x630354", VA = "0x630354")]
		public CrossStitch()
		{
		}
	}
	[Token(Token = "0x2000191")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E7A50", Offset = "0x2E7A50")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E7A50", Offset = "0x2E7A50")]
	public class DirectionalBlur : BaseEffect
	{
		[Token(Token = "0x200053F")]
		public enum QualityPreset
		{
			[Token(Token = "0x4001E64")]
			Low = 2,
			[Token(Token = "0x4001E65")]
			Medium = 4,
			[Token(Token = "0x4001E66")]
			High = 6,
			[Token(Token = "0x4001E67")]
			Custom = 7
		}

		[Token(Token = "0x40008A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F0DC4", Offset = "0x2F0DC4")]
		public QualityPreset Quality;

		[Token(Token = "0x40008A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F0DF8", Offset = "0x2F0DF8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F0DF8", Offset = "0x2F0DF8")]
		public int Samples;

		[Token(Token = "0x40008AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F0E4C", Offset = "0x2F0E4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F0E4C", Offset = "0x2F0E4C")]
		public float Strength;

		[Token(Token = "0x40008AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F0EB4", Offset = "0x2F0EB4")]
		public float Angle;

		[Token(Token = "0x6000B6D")]
		[Address(RVA = "0x630374", Offset = "0x630374", VA = "0x630374", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000B6E")]
		[Address(RVA = "0x630558", Offset = "0x630558", VA = "0x630558", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000B6F")]
		[Address(RVA = "0x6305B4", Offset = "0x6305B4", VA = "0x6305B4")]
		public DirectionalBlur()
		{
		}
	}
	[Token(Token = "0x2000192")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E7AE4", Offset = "0x2E7AE4")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E7AE4", Offset = "0x2E7AE4")]
	public class Dithering : BaseEffect
	{
		[Token(Token = "0x40008AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F0EFC", Offset = "0x2F0EFC")]
		public bool ShowOriginal;

		[Token(Token = "0x40008AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F0F5C", Offset = "0x2F0F5C")]
		public bool ConvertToGrayscale;

		[Token(Token = "0x40008AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F0F90", Offset = "0x2F0F90")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F0F90", Offset = "0x2F0F90")]
		public float RedLuminance;

		[Token(Token = "0x40008AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F0FE0", Offset = "0x2F0FE0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F0FE0", Offset = "0x2F0FE0")]
		public float GreenLuminance;

		[Token(Token = "0x40008B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F1030", Offset = "0x2F1030")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F1030", Offset = "0x2F1030")]
		public float BlueLuminance;

		[Token(Token = "0x40008B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F1080", Offset = "0x2F1080")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F1080", Offset = "0x2F1080")]
		public float Amount;

		[Token(Token = "0x40008B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Texture2D m_DitherPattern;

		[Token(Token = "0x6000B70")]
		[Address(RVA = "0x6305D4", Offset = "0x6305D4", VA = "0x6305D4", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000B71")]
		[Address(RVA = "0x63081C", Offset = "0x63081C", VA = "0x63081C", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000B72")]
		[Address(RVA = "0x630878", Offset = "0x630878", VA = "0x630878")]
		public Dithering()
		{
		}
	}
	[Token(Token = "0x2000193")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E7B74", Offset = "0x2E7B74")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E7B74", Offset = "0x2E7B74")]
	public class DoubleVision : BaseEffect
	{
		[Token(Token = "0x40008B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F10D0", Offset = "0x2F10D0")]
		public Vector2 Displace;

		[Token(Token = "0x40008B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F1110", Offset = "0x2F1110")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F1110", Offset = "0x2F1110")]
		public float Amount;

		[Token(Token = "0x6000B73")]
		[Address(RVA = "0x6308A0", Offset = "0x6308A0", VA = "0x6308A0", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000B74")]
		[Address(RVA = "0x630B64", Offset = "0x630B64", VA = "0x630B64", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000B75")]
		[Address(RVA = "0x630BC0", Offset = "0x630BC0", VA = "0x630BC0")]
		public DoubleVision()
		{
		}
	}
	[Token(Token = "0x2000194")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E7C08", Offset = "0x2E7C08")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E7C08", Offset = "0x2E7C08")]
	public class DynamicLookup : BaseEffect
	{
		[Token(Token = "0x40008B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x2F1160", Offset = "0x2F1160")]
		public Color White;

		[Token(Token = "0x40008B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x2F1174", Offset = "0x2F1174")]
		public Color Black;

		[Token(Token = "0x40008B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x2F1188", Offset = "0x2F1188")]
		public Color Red;

		[Token(Token = "0x40008B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x2F119C", Offset = "0x2F119C")]
		public Color Green;

		[Token(Token = "0x40008B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x2F11B0", Offset = "0x2F11B0")]
		public Color Blue;

		[Token(Token = "0x40008BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x2F11C4", Offset = "0x2F11C4")]
		public Color Yellow;

		[Token(Token = "0x40008BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x2F11D8", Offset = "0x2F11D8")]
		public Color Magenta;

		[Token(Token = "0x40008BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x2F11EC", Offset = "0x2F11EC")]
		public Color Cyan;

		[Token(Token = "0x40008BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F1200", Offset = "0x2F1200")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F1200", Offset = "0x2F1200")]
		public float Amount;

		[Token(Token = "0x6000B76")]
		[Address(RVA = "0x630C18", Offset = "0x630C18", VA = "0x630C18", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000B77")]
		[Address(RVA = "0x630FB8", Offset = "0x630FB8", VA = "0x630FB8", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000B78")]
		[Address(RVA = "0x631014", Offset = "0x631014", VA = "0x631014")]
		public DynamicLookup()
		{
		}
	}
	[Token(Token = "0x2000195")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E7C9C", Offset = "0x2E7C9C")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E7C9C", Offset = "0x2E7C9C")]
	public class FastVignette : BaseEffect
	{
		[Token(Token = "0x2000540")]
		public enum ColorMode
		{
			[Token(Token = "0x4001E69")]
			Classic,
			[Token(Token = "0x4001E6A")]
			Desaturate,
			[Token(Token = "0x4001E6B")]
			Colored
		}

		[Token(Token = "0x40008BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F1250", Offset = "0x2F1250")]
		public ColorMode Mode;

		[Token(Token = "0x40008BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x2F128C", Offset = "0x2F128C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F128C", Offset = "0x2F128C")]
		public Color Color;

		[Token(Token = "0x40008C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F12F8", Offset = "0x2F12F8")]
		public Vector2 Center;

		[Token(Token = "0x40008C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F132C", Offset = "0x2F132C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F132C", Offset = "0x2F132C")]
		public float Sharpness;

		[Token(Token = "0x40008C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F1384", Offset = "0x2F1384")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F1384", Offset = "0x2F1384")]
		public float Darkness;

		[Token(Token = "0x6000B79")]
		[Address(RVA = "0x6311B4", Offset = "0x6311B4", VA = "0x6311B4", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000B7A")]
		[Address(RVA = "0x631344", Offset = "0x631344", VA = "0x631344", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000B7B")]
		[Address(RVA = "0x6313A0", Offset = "0x6313A0", VA = "0x6313A0")]
		public FastVignette()
		{
		}
	}
	[Token(Token = "0x2000196")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E7D30", Offset = "0x2E7D30")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E7D30", Offset = "0x2E7D30")]
	public class Frost : BaseEffect
	{
		[Token(Token = "0x40008C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F13D8", Offset = "0x2F13D8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F13D8", Offset = "0x2F13D8")]
		public float Scale;

		[Token(Token = "0x40008C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F1438", Offset = "0x2F1438")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F1438", Offset = "0x2F1438")]
		public float Sharpness;

		[Token(Token = "0x40008C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F1490", Offset = "0x2F1490")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F1490", Offset = "0x2F1490")]
		public float Darkness;

		[Token(Token = "0x40008C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F14E4", Offset = "0x2F14E4")]
		public bool EnableVignette;

		[Token(Token = "0x6000B7C")]
		[Address(RVA = "0x631428", Offset = "0x631428", VA = "0x631428", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000B7D")]
		[Address(RVA = "0x631620", Offset = "0x631620", VA = "0x631620", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000B7E")]
		[Address(RVA = "0x63167C", Offset = "0x63167C", VA = "0x63167C")]
		public Frost()
		{
		}
	}
	[Token(Token = "0x2000197")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E7DBC", Offset = "0x2E7DBC")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E7DBC", Offset = "0x2E7DBC")]
	public class GaussianBlur : BaseEffect
	{
		[Token(Token = "0x40008C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F1518", Offset = "0x2F1518")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F1518", Offset = "0x2F1518")]
		public int Passes;

		[Token(Token = "0x40008C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F1588", Offset = "0x2F1588")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F1588", Offset = "0x2F1588")]
		public float Downscaling;

		[Token(Token = "0x40008C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F1614", Offset = "0x2F1614")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F1614", Offset = "0x2F1614")]
		public float Amount;

		[Token(Token = "0x40008CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F1664", Offset = "0x2F1664")]
		public float Threshold;

		[Token(Token = "0x40008CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F1680", Offset = "0x2F1680")]
		public float SoftThreshold;

		[Token(Token = "0x6000B7F")]
		[Address(RVA = "0x6316B0", Offset = "0x6316B0", VA = "0x6316B0", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000B80")]
		[Address(RVA = "0x631934", Offset = "0x631934", VA = "0x631934", Slot = "8")]
		protected virtual void OnePassBlur(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000B81")]
		[Address(RVA = "0x631CC8", Offset = "0x631CC8", VA = "0x631CC8", Slot = "9")]
		protected virtual void MultiPassBlur(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000B82")]
		[Address(RVA = "0x6322C8", Offset = "0x6322C8", VA = "0x6322C8", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000B83")]
		[Address(RVA = "0x632328", Offset = "0x632328", VA = "0x632328")]
		public GaussianBlur()
		{
		}
	}
	[Token(Token = "0x2000198")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E7E4C", Offset = "0x2E7E4C")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E7E4C", Offset = "0x2E7E4C")]
	public class Glitch : BaseEffect
	{
		[Token(Token = "0x2000541")]
		public enum GlitchingMode
		{
			[Token(Token = "0x4001E6D")]
			Interferences,
			[Token(Token = "0x4001E6E")]
			Tearing,
			[Token(Token = "0x4001E6F")]
			Complete
		}

		[Serializable]
		[Token(Token = "0x2000542")]
		public class InterferenceSettings
		{
			[Token(Token = "0x4001E70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float Speed;

			[Token(Token = "0x4001E71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public float Density;

			[Token(Token = "0x4001E72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float MaxDisplacement;

			[Token(Token = "0x6001D80")]
			[Address(RVA = "0x632B28", Offset = "0x632B28", VA = "0x632B28")]
			public InterferenceSettings()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000543")]
		public class TearingSettings
		{
			[Token(Token = "0x4001E73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float Speed;

			[Token(Token = "0x4001E74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F6584", Offset = "0x2F6584")]
			public float Intensity;

			[Token(Token = "0x4001E75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F659C", Offset = "0x2F659C")]
			public float MaxDisplacement;

			[Token(Token = "0x4001E76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public bool AllowFlipping;

			[Token(Token = "0x4001E77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
			public bool YuvColorBleeding;

			[Token(Token = "0x4001E78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F65B4", Offset = "0x2F65B4")]
			public float YuvOffset;

			[Token(Token = "0x6001D81")]
			[Address(RVA = "0x632B4C", Offset = "0x632B4C", VA = "0x632B4C")]
			public TearingSettings()
			{
			}
		}

		[Token(Token = "0x40008CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F1698", Offset = "0x2F1698")]
		public bool RandomActivation;

		[Token(Token = "0x40008CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector2 RandomEvery;

		[Token(Token = "0x40008CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector2 RandomDuration;

		[Token(Token = "0x40008CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F16FC", Offset = "0x2F16FC")]
		public GlitchingMode Mode;

		[Token(Token = "0x40008D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public InterferenceSettings SettingsInterferences;

		[Token(Token = "0x40008D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TearingSettings SettingsTearing;

		[Token(Token = "0x40008D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		protected bool m_Activated;

		[Token(Token = "0x40008D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected float m_EveryTimer;

		[Token(Token = "0x40008D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected float m_EveryTimerEnd;

		[Token(Token = "0x40008D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected float m_DurationTimer;

		[Token(Token = "0x40008D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected float m_DurationTimerEnd;

		[Token(Token = "0x1700012A")]
		public bool IsActive
		{
			[Token(Token = "0x6000B84")]
			[Address(RVA = "0x632358", Offset = "0x632358", VA = "0x632358")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000B85")]
		[Address(RVA = "0x632360", Offset = "0x632360", VA = "0x632360", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000B86")]
		[Address(RVA = "0x632388", Offset = "0x632388", VA = "0x632388", Slot = "8")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000B87")]
		[Address(RVA = "0x632450", Offset = "0x632450", VA = "0x632450", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000B88")]
		[Address(RVA = "0x632620", Offset = "0x632620", VA = "0x632620", Slot = "9")]
		protected virtual void DoInterferences(RenderTexture source, RenderTexture destination, InterferenceSettings settings)
		{
		}

		[Token(Token = "0x6000B89")]
		[Address(RVA = "0x6327CC", Offset = "0x6327CC", VA = "0x6327CC", Slot = "10")]
		protected virtual void DoTearing(RenderTexture source, RenderTexture destination, TearingSettings settings)
		{
		}

		[Token(Token = "0x6000B8A")]
		[Address(RVA = "0x632978", Offset = "0x632978", VA = "0x632978", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000B8B")]
		[Address(RVA = "0x6329D4", Offset = "0x6329D4", VA = "0x6329D4")]
		public Glitch()
		{
		}
	}
	[Token(Token = "0x2000199")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E7ED8", Offset = "0x2E7ED8")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E7ED8", Offset = "0x2E7ED8")]
	public class GradientRamp : BaseEffect
	{
		[Token(Token = "0x40008D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F1738", Offset = "0x2F1738")]
		public Texture RampTexture;

		[Token(Token = "0x40008D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F1794", Offset = "0x2F1794")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F1794", Offset = "0x2F1794")]
		public float Amount;

		[Token(Token = "0x6000B8C")]
		[Address(RVA = "0x632B80", Offset = "0x632B80", VA = "0x632B80", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000B8D")]
		[Address(RVA = "0x632D44", Offset = "0x632D44", VA = "0x632D44", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000B8E")]
		[Address(RVA = "0x632DA0", Offset = "0x632DA0", VA = "0x632DA0")]
		public GradientRamp()
		{
		}
	}
	[Token(Token = "0x200019A")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E7F6C", Offset = "0x2E7F6C")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E7F6C", Offset = "0x2E7F6C")]
	public class GradientRampDynamic : BaseEffect
	{
		[Token(Token = "0x40008D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F17E4", Offset = "0x2F17E4")]
		public Gradient Ramp;

		[Token(Token = "0x40008DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F1840", Offset = "0x2F1840")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F1840", Offset = "0x2F1840")]
		public float Amount;

		[Token(Token = "0x40008DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		protected Texture2D m_RampTexture;

		[Token(Token = "0x6000B8F")]
		[Address(RVA = "0x632DB0", Offset = "0x632DB0", VA = "0x632DB0", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000B90")]
		[Address(RVA = "0x633020", Offset = "0x633020", VA = "0x633020", Slot = "8")]
		protected virtual void Reset()
		{
		}

		[Token(Token = "0x6000B91")]
		[Address(RVA = "0x632DD8", Offset = "0x632DD8", VA = "0x632DD8")]
		public void UpdateGradientCache()
		{
		}

		[Token(Token = "0x6000B92")]
		[Address(RVA = "0x6332C0", Offset = "0x6332C0", VA = "0x6332C0", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000B93")]
		[Address(RVA = "0x633444", Offset = "0x633444", VA = "0x633444", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000B94")]
		[Address(RVA = "0x6334A0", Offset = "0x6334A0", VA = "0x6334A0")]
		public GradientRampDynamic()
		{
		}
	}
	[Token(Token = "0x200019B")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E800C", Offset = "0x2E800C")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E800C", Offset = "0x2E800C")]
	public class GrainyBlur : BaseEffect
	{
		[Token(Token = "0x2000544")]
		public enum NatifResolution
		{
			[Token(Token = "0x4001E7A")]
			FourK,
			[Token(Token = "0x4001E7B")]
			TwoK,
			[Token(Token = "0x4001E7C")]
			OneK
		}

		[Token(Token = "0x40008DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "MinAttribute", RVA = "0x2F1890", Offset = "0x2F1890")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F1890", Offset = "0x2F1890")]
		public float Radius;

		[Token(Token = "0x40008DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F18E4", Offset = "0x2F18E4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F18E4", Offset = "0x2F18E4")]
		public int Samples;

		[Token(Token = "0x40008DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool DebugDOF;

		[Token(Token = "0x40008DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool UseTarget;

		[Token(Token = "0x40008E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject Target;

		[Token(Token = "0x40008E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "MinAttribute", RVA = "0x2F1934", Offset = "0x2F1934")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F1934", Offset = "0x2F1934")]
		public float FocusDistance;

		[Token(Token = "0x40008E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "MinAttribute", RVA = "0x2F197C", Offset = "0x2F197C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F197C", Offset = "0x2F197C")]
		public float FocusRange;

		[Token(Token = "0x40008E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "MinAttribute", RVA = "0x2F19C4", Offset = "0x2F19C4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F19C4", Offset = "0x2F19C4")]
		public float FocusOffset;

		[Token(Token = "0x40008E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public NatifResolution m_natifResolution;

		[Token(Token = "0x6000B95")]
		[Address(RVA = "0x6334B0", Offset = "0x6334B0", VA = "0x6334B0")]
		private new void Start()
		{
		}

		[Token(Token = "0x6000B96")]
		[Address(RVA = "0x633538", Offset = "0x633538", VA = "0x633538", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000B97")]
		[Address(RVA = "0x633A74", Offset = "0x633A74", VA = "0x633A74", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000B98")]
		[Address(RVA = "0x633AD0", Offset = "0x633AD0", VA = "0x633AD0")]
		public GrainyBlur()
		{
		}
	}
	[Token(Token = "0x200019C")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E809C", Offset = "0x2E809C")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E809C", Offset = "0x2E809C")]
	public class Grayscale : BaseEffect
	{
		[Token(Token = "0x40008E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F1A0C", Offset = "0x2F1A0C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F1A0C", Offset = "0x2F1A0C")]
		public float RedLuminance;

		[Token(Token = "0x40008E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F1A5C", Offset = "0x2F1A5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F1A5C", Offset = "0x2F1A5C")]
		public float GreenLuminance;

		[Token(Token = "0x40008E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F1AAC", Offset = "0x2F1AAC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F1AAC", Offset = "0x2F1AAC")]
		public float BlueLuminance;

		[Token(Token = "0x40008E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F1AFC", Offset = "0x2F1AFC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F1AFC", Offset = "0x2F1AFC")]
		public float Amount;

		[Token(Token = "0x40008E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F1B4C", Offset = "0x2F1B4C")]
		public bool Animate;

		[Token(Token = "0x40008EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F1B80", Offset = "0x2F1B80")]
		public float Seed;

		[Token(Token = "0x40008EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F1BB4", Offset = "0x2F1BB4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F1BB4", Offset = "0x2F1BB4")]
		public float Strength;

		[Token(Token = "0x40008EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F1C04", Offset = "0x2F1C04")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F1C04", Offset = "0x2F1C04")]
		public float LumContribution;

		[Token(Token = "0x6000B99")]
		[Address(RVA = "0x633AF4", Offset = "0x633AF4", VA = "0x633AF4", Slot = "8")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000B9A")]
		[Address(RVA = "0x633B50", Offset = "0x633B50", VA = "0x633B50", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000B9B")]
		[Address(RVA = "0x633D68", Offset = "0x633D68", VA = "0x633D68", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000B9C")]
		[Address(RVA = "0x633DC8", Offset = "0x633DC8", VA = "0x633DC8")]
		public Grayscale()
		{
		}
	}
	[Token(Token = "0x200019D")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E812C", Offset = "0x2E812C")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E812C", Offset = "0x2E812C")]
	public class Halftone : BaseEffect
	{
		[Token(Token = "0x40008ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "MinAttribute", RVA = "0x2F1C54", Offset = "0x2F1C54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F1C54", Offset = "0x2F1C54")]
		public float Scale;

		[Token(Token = "0x40008EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "MinAttribute", RVA = "0x2F1CB4", Offset = "0x2F1CB4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F1CB4", Offset = "0x2F1CB4")]
		public float DotSize;

		[Token(Token = "0x40008EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F1D10", Offset = "0x2F1D10")]
		public float Angle;

		[Token(Token = "0x40008F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F1D78", Offset = "0x2F1D78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F1D78", Offset = "0x2F1D78")]
		public float Smoothness;

		[Token(Token = "0x40008F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F1DD4", Offset = "0x2F1DD4")]
		public Vector2 Center;

		[Token(Token = "0x40008F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F1E28", Offset = "0x2F1E28")]
		public bool Desaturate;

		[Token(Token = "0x6000B9D")]
		[Address(RVA = "0x633E10", Offset = "0x633E10", VA = "0x633E10", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000B9E")]
		[Address(RVA = "0x6342AC", Offset = "0x6342AC", VA = "0x6342AC")]
		private Vector4 CMYKRot(float angle)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6000B9F")]
		[Address(RVA = "0x63436C", Offset = "0x63436C", VA = "0x63436C", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000BA0")]
		[Address(RVA = "0x6343C8", Offset = "0x6343C8", VA = "0x6343C8")]
		public Halftone()
		{
		}
	}
	[Token(Token = "0x200019E")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E81BC", Offset = "0x2E81BC")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E81BC", Offset = "0x2E81BC")]
	public class Histogram : MonoBehaviour
	{
		[Token(Token = "0x6000BA1")]
		[Address(RVA = "0x634438", Offset = "0x634438", VA = "0x634438")]
		public Histogram()
		{
		}
	}
	[Token(Token = "0x200019F")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E8244", Offset = "0x2E8244")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E8244", Offset = "0x2E8244")]
	public class HueFocus : BaseEffect
	{
		[Token(Token = "0x40008F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F1E74", Offset = "0x2F1E74")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F1E74", Offset = "0x2F1E74")]
		public float Hue;

		[Token(Token = "0x40008F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F1ECC", Offset = "0x2F1ECC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F1ECC", Offset = "0x2F1ECC")]
		public float Range;

		[Token(Token = "0x40008F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F1F30", Offset = "0x2F1F30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F1F30", Offset = "0x2F1F30")]
		public float Boost;

		[Token(Token = "0x40008F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F1FA0", Offset = "0x2F1FA0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F1FA0", Offset = "0x2F1FA0")]
		public float Amount;

		[Token(Token = "0x6000BA2")]
		[Address(RVA = "0x634440", Offset = "0x634440", VA = "0x634440", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000BA3")]
		[Address(RVA = "0x63465C", Offset = "0x63465C", VA = "0x63465C", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000BA4")]
		[Address(RVA = "0x6346B8", Offset = "0x6346B8", VA = "0x6346B8")]
		public HueFocus()
		{
		}
	}
	[Token(Token = "0x20001A0")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E82D4", Offset = "0x2E82D4")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E82D4", Offset = "0x2E82D4")]
	public class HueSaturationValue : BaseEffect
	{
		[Token(Token = "0x40008F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F1FFC", Offset = "0x2F1FFC")]
		public float MasterHue;

		[Token(Token = "0x40008F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F201C", Offset = "0x2F201C")]
		public float MasterSaturation;

		[Token(Token = "0x40008F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F203C", Offset = "0x2F203C")]
		public float MasterValue;

		[Token(Token = "0x40008FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F205C", Offset = "0x2F205C")]
		public float RedsHue;

		[Token(Token = "0x40008FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F207C", Offset = "0x2F207C")]
		public float RedsSaturation;

		[Token(Token = "0x40008FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F209C", Offset = "0x2F209C")]
		public float RedsValue;

		[Token(Token = "0x40008FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F20BC", Offset = "0x2F20BC")]
		public float YellowsHue;

		[Token(Token = "0x40008FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F20DC", Offset = "0x2F20DC")]
		public float YellowsSaturation;

		[Token(Token = "0x40008FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F20FC", Offset = "0x2F20FC")]
		public float YellowsValue;

		[Token(Token = "0x4000900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F211C", Offset = "0x2F211C")]
		public float GreensHue;

		[Token(Token = "0x4000901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F213C", Offset = "0x2F213C")]
		public float GreensSaturation;

		[Token(Token = "0x4000902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F215C", Offset = "0x2F215C")]
		public float GreensValue;

		[Token(Token = "0x4000903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F217C", Offset = "0x2F217C")]
		public float CyansHue;

		[Token(Token = "0x4000904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F219C", Offset = "0x2F219C")]
		public float CyansSaturation;

		[Token(Token = "0x4000905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F21BC", Offset = "0x2F21BC")]
		public float CyansValue;

		[Token(Token = "0x4000906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F21DC", Offset = "0x2F21DC")]
		public float BluesHue;

		[Token(Token = "0x4000907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F21FC", Offset = "0x2F21FC")]
		public float BluesSaturation;

		[Token(Token = "0x4000908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F221C", Offset = "0x2F221C")]
		public float BluesValue;

		[Token(Token = "0x4000909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F223C", Offset = "0x2F223C")]
		public float MagentasHue;

		[Token(Token = "0x400090A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F225C", Offset = "0x2F225C")]
		public float MagentasSaturation;

		[Token(Token = "0x400090B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F227C", Offset = "0x2F227C")]
		public float MagentasValue;

		[Token(Token = "0x400090C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool AdvancedMode;

		[Token(Token = "0x6000BA5")]
		[Address(RVA = "0x6346DC", Offset = "0x6346DC", VA = "0x6346DC", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000BA6")]
		[Address(RVA = "0x634CC0", Offset = "0x634CC0", VA = "0x634CC0", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000BA7")]
		[Address(RVA = "0x634D1C", Offset = "0x634D1C", VA = "0x634D1C")]
		public HueSaturationValue()
		{
		}
	}
	[Token(Token = "0x20001A1")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E8370", Offset = "0x2E8370")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E8370", Offset = "0x2E8370")]
	public class Kuwahara : BaseEffect
	{
		[Token(Token = "0x400090D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F229C", Offset = "0x2F229C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F229C", Offset = "0x2F229C")]
		public int Radius;

		[Token(Token = "0x400090E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool DebugDOF;

		[Token(Token = "0x400090F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool UseTarget;

		[Token(Token = "0x4000910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public GameObject Target;

		[Token(Token = "0x4000911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "MinAttribute", RVA = "0x2F22F0", Offset = "0x2F22F0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F22F0", Offset = "0x2F22F0")]
		public float FocusDistance;

		[Token(Token = "0x4000912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "MinAttribute", RVA = "0x2F2338", Offset = "0x2F2338")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F2338", Offset = "0x2F2338")]
		public float FocusRange;

		[Token(Token = "0x6000BA8")]
		[Address(RVA = "0x634D24", Offset = "0x634D24", VA = "0x634D24", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000BA9")]
		[Address(RVA = "0x635184", Offset = "0x635184", VA = "0x635184", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000BAA")]
		[Address(RVA = "0x6351E0", Offset = "0x6351E0", VA = "0x6351E0")]
		public Kuwahara()
		{
		}
	}
	[Token(Token = "0x20001A2")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E8400", Offset = "0x2E8400")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E8400", Offset = "0x2E8400")]
	public class Led : BaseEffect
	{
		[Token(Token = "0x2000545")]
		public enum SizeMode
		{
			[Token(Token = "0x4001E7E")]
			ResolutionIndependent,
			[Token(Token = "0x4001E7F")]
			PixelPerfect
		}

		[Token(Token = "0x4000913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F2380", Offset = "0x2F2380")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F2380", Offset = "0x2F2380")]
		public float Scale;

		[Token(Token = "0x4000914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F2404", Offset = "0x2F2404")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F2404", Offset = "0x2F2404")]
		public float Brightness;

		[Token(Token = "0x4000915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F2468", Offset = "0x2F2468")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F2468", Offset = "0x2F2468")]
		public float Shape;

		[Token(Token = "0x4000916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F24D8", Offset = "0x2F24D8")]
		public bool AutomaticRatio;

		[Token(Token = "0x4000917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F250C", Offset = "0x2F250C")]
		public float Ratio;

		[Token(Token = "0x4000918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F2540", Offset = "0x2F2540")]
		public SizeMode Mode;

		[Token(Token = "0x6000BAB")]
		[Address(RVA = "0x6351FC", Offset = "0x6351FC", VA = "0x6351FC", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000BAC")]
		[Address(RVA = "0x6353E0", Offset = "0x6353E0", VA = "0x6353E0", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000BAD")]
		[Address(RVA = "0x63543C", Offset = "0x63543C", VA = "0x63543C")]
		public Led()
		{
		}
	}
	[Token(Token = "0x20001A3")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E8488", Offset = "0x2E8488")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E8488", Offset = "0x2E8488")]
	public class LensDistortionBlur : BaseEffect
	{
		[Token(Token = "0x2000546")]
		public enum QualityPreset
		{
			[Token(Token = "0x4001E81")]
			Low = 4,
			[Token(Token = "0x4001E82")]
			Medium = 8,
			[Token(Token = "0x4001E83")]
			High = 12,
			[Token(Token = "0x4001E84")]
			Custom = 13
		}

		[Token(Token = "0x4000919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F2574", Offset = "0x2F2574")]
		public QualityPreset Quality;

		[Token(Token = "0x400091A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F25A8", Offset = "0x2F25A8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F25A8", Offset = "0x2F25A8")]
		public int Samples;

		[Token(Token = "0x400091B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F25F8", Offset = "0x2F25F8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F25F8", Offset = "0x2F25F8")]
		public float Distortion;

		[Token(Token = "0x400091C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F2648", Offset = "0x2F2648")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F2648", Offset = "0x2F2648")]
		public float CubicDistortion;

		[Token(Token = "0x400091D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F2698", Offset = "0x2F2698")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F2698", Offset = "0x2F2698")]
		public float Scale;

		[Token(Token = "0x6000BAE")]
		[Address(RVA = "0x63546C", Offset = "0x63546C", VA = "0x63546C", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000BAF")]
		[Address(RVA = "0x6355AC", Offset = "0x6355AC", VA = "0x6355AC", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000BB0")]
		[Address(RVA = "0x635608", Offset = "0x635608", VA = "0x635608")]
		public LensDistortionBlur()
		{
		}
	}
	[Token(Token = "0x20001A4")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E8520", Offset = "0x2E8520")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E8520", Offset = "0x2E8520")]
	public class Letterbox : BaseEffect
	{
		[Token(Token = "0x400091E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "MinAttribute", RVA = "0x2F26EC", Offset = "0x2F26EC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F26EC", Offset = "0x2F26EC")]
		public float Aspect;

		[Token(Token = "0x400091F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F275C", Offset = "0x2F275C")]
		public Color FillColor;

		[Token(Token = "0x6000BB1")]
		[Address(RVA = "0x635650", Offset = "0x635650", VA = "0x635650", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000BB2")]
		[Address(RVA = "0x6358F8", Offset = "0x6358F8", VA = "0x6358F8", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000BB3")]
		[Address(RVA = "0x635954", Offset = "0x635954", VA = "0x635954")]
		public Letterbox()
		{
		}
	}
	[Token(Token = "0x20001A5")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E85B0", Offset = "0x2E85B0")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E85B0", Offset = "0x2E85B0")]
	public class Levels : BaseEffect
	{
		[Token(Token = "0x2000547")]
		public enum ColorMode
		{
			[Token(Token = "0x4001E86")]
			Monochrome,
			[Token(Token = "0x4001E87")]
			RGB
		}

		[Token(Token = "0x4000920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public ColorMode Mode;

		[Token(Token = "0x4000921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 InputL;

		[Token(Token = "0x4000922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 InputR;

		[Token(Token = "0x4000923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 InputG;

		[Token(Token = "0x4000924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 InputB;

		[Token(Token = "0x4000925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector2 OutputL;

		[Token(Token = "0x4000926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector2 OutputR;

		[Token(Token = "0x4000927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector2 OutputG;

		[Token(Token = "0x4000928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector2 OutputB;

		[Token(Token = "0x6000BB4")]
		[Address(RVA = "0x6359A4", Offset = "0x6359A4", VA = "0x6359A4", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000BB5")]
		[Address(RVA = "0x635F0C", Offset = "0x635F0C", VA = "0x635F0C", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000BB6")]
		[Address(RVA = "0x635F68", Offset = "0x635F68", VA = "0x635F68")]
		public Levels()
		{
		}
	}
	[Token(Token = "0x20001A6")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E863C", Offset = "0x2E863C")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E863C", Offset = "0x2E863C")]
	public class LoFiPalette : LookupFilter3D
	{
		[Token(Token = "0x2000548")]
		public enum Preset
		{
			[Token(Token = "0x4001E89")]
			None = 0,
			[Token(Token = "0x4001E8A")]
			AmstradCPC = 2,
			[Token(Token = "0x4001E8B")]
			CGA = 3,
			[Token(Token = "0x4001E8C")]
			Commodore64 = 4,
			[Token(Token = "0x4001E8D")]
			CommodorePlus = 5,
			[Token(Token = "0x4001E8E")]
			EGA = 6,
			[Token(Token = "0x4001E8F")]
			GameBoy = 7,
			[Token(Token = "0x4001E90")]
			MacOS16 = 8,
			[Token(Token = "0x4001E91")]
			MacOS256 = 9,
			[Token(Token = "0x4001E92")]
			MasterSystem = 10,
			[Token(Token = "0x4001E93")]
			RiscOS16 = 11,
			[Token(Token = "0x4001E94")]
			Teletex = 12,
			[Token(Token = "0x4001E95")]
			Windows16 = 13,
			[Token(Token = "0x4001E96")]
			Windows256 = 14,
			[Token(Token = "0x4001E97")]
			ZXSpectrum = 15,
			[Token(Token = "0x4001E98")]
			Andrae = 17,
			[Token(Token = "0x4001E99")]
			Anodomani = 18,
			[Token(Token = "0x4001E9A")]
			Crayolo = 19,
			[Token(Token = "0x4001E9B")]
			DB16 = 20,
			[Token(Token = "0x4001E9C")]
			DB32 = 21,
			[Token(Token = "0x4001E9D")]
			DJinn = 22,
			[Token(Token = "0x4001E9E")]
			DrazileA = 23,
			[Token(Token = "0x4001E9F")]
			DrazileB = 24,
			[Token(Token = "0x4001EA0")]
			DrazileC = 25,
			[Token(Token = "0x4001EA1")]
			Eggy = 26,
			[Token(Token = "0x4001EA2")]
			FinlalA = 27,
			[Token(Token = "0x4001EA3")]
			FinlalB = 28,
			[Token(Token = "0x4001EA4")]
			Hapiel = 29,
			[Token(Token = "0x4001EA5")]
			PavanzA = 30,
			[Token(Token = "0x4001EA6")]
			PavanzB = 31,
			[Token(Token = "0x4001EA7")]
			Peyton = 32,
			[Token(Token = "0x4001EA8")]
			SpeedyCube = 33
		}

		[Token(Token = "0x4000929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Preset Palette;

		[Token(Token = "0x400092A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F27B8", Offset = "0x2F27B8")]
		public bool Pixelize;

		[Token(Token = "0x400092B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F27FC", Offset = "0x2F27FC")]
		public float PixelSize;

		[Token(Token = "0x400092C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Preset m_CurrentPreset;

		[Token(Token = "0x6000BB7")]
		[Address(RVA = "0x636118", Offset = "0x636118", VA = "0x636118", Slot = "7")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000BB8")]
		[Address(RVA = "0x63630C", Offset = "0x63630C", VA = "0x63630C", Slot = "8")]
		protected override void RenderLut2D(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000BB9")]
		[Address(RVA = "0x636658", Offset = "0x636658", VA = "0x636658", Slot = "9")]
		protected override void RenderLut3D(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000BBA")]
		[Address(RVA = "0x6368F8", Offset = "0x6368F8", VA = "0x6368F8")]
		public LoFiPalette()
		{
		}
	}
	[Token(Token = "0x20001A7")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E86D0", Offset = "0x2E86D0")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E86D0", Offset = "0x2E86D0")]
	public class LookupFilter : BaseEffect
	{
		[Token(Token = "0x400092D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F2848", Offset = "0x2F2848")]
		public Texture LookupTexture;

		[Token(Token = "0x400092E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F287C", Offset = "0x2F287C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F287C", Offset = "0x2F287C")]
		public float Amount;

		[Token(Token = "0x6000BBB")]
		[Address(RVA = "0x5EE700", Offset = "0x5EE700", VA = "0x5EE700", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000BBC")]
		[Address(RVA = "0x5EE8F0", Offset = "0x5EE8F0", VA = "0x5EE8F0", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000BBD")]
		[Address(RVA = "0x5EE94C", Offset = "0x5EE94C", VA = "0x5EE94C")]
		public LookupFilter()
		{
		}
	}
	[Token(Token = "0x20001A8")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E8770", Offset = "0x2E8770")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x2E8770", Offset = "0x2E8770")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E8770", Offset = "0x2E8770")]
	public class LookupFilter3D : MonoBehaviour
	{
		[Token(Token = "0x400092F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F28CC", Offset = "0x2F28CC")]
		public Texture2D LookupTexture;

		[Token(Token = "0x4000930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F2900", Offset = "0x2F2900")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F2900", Offset = "0x2F2900")]
		public float Amount;

		[Token(Token = "0x4000931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F2950", Offset = "0x2F2950")]
		public bool ForceCompatibility;

		[Token(Token = "0x4000932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Texture3D m_Lut3D;

		[Token(Token = "0x4000933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		protected string m_BaseTextureName;

		[Token(Token = "0x4000934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected bool m_Use2DLut;

		[Token(Token = "0x4000935")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Shader Shader2D;

		[Token(Token = "0x4000936")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Shader Shader3D;

		[Token(Token = "0x4000937")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		protected Material m_Material2D;

		[Token(Token = "0x4000938")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Material m_Material3D;

		[Token(Token = "0x1700012B")]
		public Shader Shader2DSafe
		{
			[Token(Token = "0x6000BBE")]
			[Address(RVA = "0x5EE95C", Offset = "0x5EE95C", VA = "0x5EE95C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012C")]
		public Shader Shader3DSafe
		{
			[Token(Token = "0x6000BBF")]
			[Address(RVA = "0x5EEA10", Offset = "0x5EEA10", VA = "0x5EEA10")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012D")]
		public Material Material
		{
			[Token(Token = "0x6000BC0")]
			[Address(RVA = "0x5EEAC4", Offset = "0x5EEAC4", VA = "0x5EEAC4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BC1")]
		[Address(RVA = "0x5EEC30", Offset = "0x5EEC30", VA = "0x5EEC30", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000BC2")]
		[Address(RVA = "0x5EEDF0", Offset = "0x5EEDF0", VA = "0x5EEDF0", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000BC3")]
		[Address(RVA = "0x5EEFD0", Offset = "0x5EEFD0", VA = "0x5EEFD0", Slot = "6")]
		protected virtual void Reset()
		{
		}

		[Token(Token = "0x6000BC4")]
		[Address(RVA = "0x5EF030", Offset = "0x5EF030", VA = "0x5EF030")]
		protected void SetIdentityLut()
		{
		}

		[Token(Token = "0x6000BC5")]
		[Address(RVA = "0x5EF304", Offset = "0x5EF304", VA = "0x5EF304")]
		public bool ValidDimensions(Texture2D tex2D)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BC6")]
		[Address(RVA = "0x5EF454", Offset = "0x5EF454", VA = "0x5EF454")]
		protected void ConvertBaseTexture()
		{
		}

		[Token(Token = "0x6000BC7")]
		[Address(RVA = "0x5EF8A0", Offset = "0x5EF8A0", VA = "0x5EF8A0")]
		public void Apply(Texture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000BC8")]
		[Address(RVA = "0x5EFA10", Offset = "0x5EFA10", VA = "0x5EFA10", Slot = "7")]
		protected virtual void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000BC9")]
		[Address(RVA = "0x5EFB3C", Offset = "0x5EFB3C", VA = "0x5EFB3C", Slot = "8")]
		protected virtual void RenderLut2D(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000BCA")]
		[Address(RVA = "0x5EFE60", Offset = "0x5EFE60", VA = "0x5EFE60", Slot = "9")]
		protected virtual void RenderLut3D(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000BCB")]
		[Address(RVA = "0x5F00EC", Offset = "0x5F00EC", VA = "0x5F00EC")]
		public LookupFilter3D()
		{
		}
	}
	[Token(Token = "0x20001A9")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E8870", Offset = "0x2E8870")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E8870", Offset = "0x2E8870")]
	public class Negative : BaseEffect
	{
		[Token(Token = "0x4000939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F2984", Offset = "0x2F2984")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F2984", Offset = "0x2F2984")]
		public float Amount;

		[Token(Token = "0x6000BCC")]
		[Address(RVA = "0x5F011C", Offset = "0x5F011C", VA = "0x5F011C", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000BCD")]
		[Address(RVA = "0x5F0280", Offset = "0x5F0280", VA = "0x5F0280", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000BCE")]
		[Address(RVA = "0x5F02DC", Offset = "0x5F02DC", VA = "0x5F02DC")]
		public Negative()
		{
		}
	}
	[Token(Token = "0x20001AA")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E8900", Offset = "0x2E8900")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E8900", Offset = "0x2E8900")]
	public class Noise : BaseEffect
	{
		[Token(Token = "0x2000549")]
		public enum ColorMode
		{
			[Token(Token = "0x4001EAA")]
			Monochrome,
			[Token(Token = "0x4001EAB")]
			RGB
		}

		[Token(Token = "0x400093A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F29D4", Offset = "0x2F29D4")]
		public ColorMode Mode;

		[Token(Token = "0x400093B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F2A20", Offset = "0x2F2A20")]
		public bool Animate;

		[Token(Token = "0x400093C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F2A54", Offset = "0x2F2A54")]
		public float Seed;

		[Token(Token = "0x400093D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F2A88", Offset = "0x2F2A88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F2A88", Offset = "0x2F2A88")]
		public float Strength;

		[Token(Token = "0x400093E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F2AD8", Offset = "0x2F2AD8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F2AD8", Offset = "0x2F2AD8")]
		public float LumContribution;

		[Token(Token = "0x6000BCF")]
		[Address(RVA = "0x5F02EC", Offset = "0x5F02EC", VA = "0x5F02EC", Slot = "8")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000BD0")]
		[Address(RVA = "0x5F0348", Offset = "0x5F0348", VA = "0x5F0348", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000BD1")]
		[Address(RVA = "0x5F04D8", Offset = "0x5F04D8", VA = "0x5F04D8", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000BD2")]
		[Address(RVA = "0x5F0534", Offset = "0x5F0534", VA = "0x5F0534")]
		public Noise()
		{
		}
	}
	[Token(Token = "0x20001AB")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E8988", Offset = "0x2E8988")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E8988", Offset = "0x2E8988")]
	public class PhotoFilter : BaseEffect
	{
		[Token(Token = "0x400093F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x2F2B28", Offset = "0x2F2B28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F2B28", Offset = "0x2F2B28")]
		public Color Color;

		[Token(Token = "0x4000940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F2B80", Offset = "0x2F2B80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F2B80", Offset = "0x2F2B80")]
		public float Density;

		[Token(Token = "0x6000BD3")]
		[Address(RVA = "0x5F0558", Offset = "0x5F0558", VA = "0x5F0558", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000BD4")]
		[Address(RVA = "0x5F0718", Offset = "0x5F0718", VA = "0x5F0718", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000BD5")]
		[Address(RVA = "0x5F0774", Offset = "0x5F0774", VA = "0x5F0774")]
		public PhotoFilter()
		{
		}
	}
	[Token(Token = "0x20001AC")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E8A1C", Offset = "0x2E8A1C")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E8A1C", Offset = "0x2E8A1C")]
	public class Pixelate : BaseEffect
	{
		[Token(Token = "0x200054A")]
		public enum SizeMode
		{
			[Token(Token = "0x4001EAD")]
			ResolutionIndependent,
			[Token(Token = "0x4001EAE")]
			PixelPerfect
		}

		[Token(Token = "0x4000941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F2BD0", Offset = "0x2F2BD0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F2BD0", Offset = "0x2F2BD0")]
		public float Scale;

		[Token(Token = "0x4000942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F2C54", Offset = "0x2F2C54")]
		public bool AutomaticRatio;

		[Token(Token = "0x4000943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F2C88", Offset = "0x2F2C88")]
		public float Ratio;

		[Token(Token = "0x4000944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F2CBC", Offset = "0x2F2CBC")]
		public SizeMode Mode;

		[Token(Token = "0x6000BD6")]
		[Address(RVA = "0x5F0A1C", Offset = "0x5F0A1C", VA = "0x5F0A1C", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000BD7")]
		[Address(RVA = "0x5F0C40", Offset = "0x5F0C40", VA = "0x5F0C40", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000BD8")]
		[Address(RVA = "0x5F0C9C", Offset = "0x5F0C9C", VA = "0x5F0C9C")]
		public Pixelate()
		{
		}
	}
	[Token(Token = "0x20001AD")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E8AA8", Offset = "0x2E8AA8")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E8AA8", Offset = "0x2E8AA8")]
	public class PixelMatrix : BaseEffect
	{
		[Token(Token = "0x4000945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "MinAttribute", RVA = "0x2F2CF0", Offset = "0x2F2CF0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F2CF0", Offset = "0x2F2CF0")]
		public int Size;

		[Token(Token = "0x4000946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F2D64", Offset = "0x2F2D64")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F2D64", Offset = "0x2F2D64")]
		public float Brightness;

		[Token(Token = "0x4000947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F2DCC", Offset = "0x2F2DCC")]
		public bool BlackBorder;

		[Token(Token = "0x6000BD9")]
		[Address(RVA = "0x5F07E8", Offset = "0x5F07E8", VA = "0x5F07E8", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000BDA")]
		[Address(RVA = "0x5F099C", Offset = "0x5F099C", VA = "0x5F099C", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000BDB")]
		[Address(RVA = "0x5F09F8", Offset = "0x5F09F8", VA = "0x5F09F8")]
		public PixelMatrix()
		{
		}
	}
	[Token(Token = "0x20001AE")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E8B38", Offset = "0x2E8B38")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E8B38", Offset = "0x2E8B38")]
	public class Posterize : BaseEffect
	{
		[Token(Token = "0x4000948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F2E24", Offset = "0x2F2E24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F2E24", Offset = "0x2F2E24")]
		public int Levels;

		[Token(Token = "0x4000949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F2EB0", Offset = "0x2F2EB0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F2EB0", Offset = "0x2F2EB0")]
		public float Amount;

		[Token(Token = "0x400094A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F2F00", Offset = "0x2F2F00")]
		public bool LuminosityOnly;

		[Token(Token = "0x6000BDC")]
		[Address(RVA = "0x5F0CC0", Offset = "0x5F0CC0", VA = "0x5F0CC0", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000BDD")]
		[Address(RVA = "0x5F0E7C", Offset = "0x5F0E7C", VA = "0x5F0E7C", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000BDE")]
		[Address(RVA = "0x5F0ED8", Offset = "0x5F0ED8", VA = "0x5F0ED8")]
		public Posterize()
		{
		}
	}
	[Token(Token = "0x20001AF")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E8BC8", Offset = "0x2E8BC8")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E8BC8", Offset = "0x2E8BC8")]
	public class RadialBlur : BaseEffect
	{
		[Token(Token = "0x200054B")]
		public enum QualityPreset
		{
			[Token(Token = "0x4001EB0")]
			Low = 4,
			[Token(Token = "0x4001EB1")]
			Medium = 8,
			[Token(Token = "0x4001EB2")]
			High = 12,
			[Token(Token = "0x4001EB3")]
			Custom = 13
		}

		[Token(Token = "0x400094B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F2F34", Offset = "0x2F2F34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F2F34", Offset = "0x2F2F34")]
		public float Strength;

		[Token(Token = "0x400094C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F2F8C", Offset = "0x2F2F8C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F2F8C", Offset = "0x2F2F8C")]
		public int Samples;

		[Token(Token = "0x400094D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F2FDC", Offset = "0x2F2FDC")]
		public Vector2 Center;

		[Token(Token = "0x400094E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F3018", Offset = "0x2F3018")]
		public QualityPreset Quality;

		[Token(Token = "0x400094F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F304C", Offset = "0x2F304C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F304C", Offset = "0x2F304C")]
		public float Sharpness;

		[Token(Token = "0x4000950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F30A4", Offset = "0x2F30A4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F30A4", Offset = "0x2F30A4")]
		public float Darkness;

		[Token(Token = "0x4000951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F30F8", Offset = "0x2F30F8")]
		public bool EnableVignette;

		[Token(Token = "0x6000BDF")]
		[Address(RVA = "0x5F1174", Offset = "0x5F1174", VA = "0x5F1174", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000BE0")]
		[Address(RVA = "0x5F13C0", Offset = "0x5F13C0", VA = "0x5F13C0", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000BE1")]
		[Address(RVA = "0x5F141C", Offset = "0x5F141C", VA = "0x5F141C")]
		public RadialBlur()
		{
		}
	}
	[Token(Token = "0x20001B0")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E8C58", Offset = "0x2E8C58")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E8C58", Offset = "0x2E8C58")]
	public class RGBSplit : BaseEffect
	{
		[Token(Token = "0x4000952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F312C", Offset = "0x2F312C")]
		public float Amount;

		[Token(Token = "0x4000953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F3170", Offset = "0x2F3170")]
		public float Angle;

		[Token(Token = "0x6000BE2")]
		[Address(RVA = "0x5F0EF0", Offset = "0x5F0EF0", VA = "0x5F0EF0", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000BE3")]
		[Address(RVA = "0x5F1110", Offset = "0x5F1110", VA = "0x5F1110", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000BE4")]
		[Address(RVA = "0x5F116C", Offset = "0x5F116C", VA = "0x5F116C")]
		public RGBSplit()
		{
		}
	}
	[Token(Token = "0x20001B1")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E8CE8", Offset = "0x2E8CE8")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E8CE8", Offset = "0x2E8CE8")]
	public class SCurveContrast : BaseEffect
	{
		[Token(Token = "0x4000954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float RedSteepness;

		[Token(Token = "0x4000955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float RedGamma;

		[Token(Token = "0x4000956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float GreenSteepness;

		[Token(Token = "0x4000957")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float GreenGamma;

		[Token(Token = "0x4000958")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float BlueSteepness;

		[Token(Token = "0x4000959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float BlueGamma;

		[Token(Token = "0x6000BE5")]
		[Address(RVA = "0x5F14A0", Offset = "0x5F14A0", VA = "0x5F14A0", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000BE6")]
		[Address(RVA = "0x5F16F8", Offset = "0x5F16F8", VA = "0x5F16F8", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000BE7")]
		[Address(RVA = "0x5F1754", Offset = "0x5F1754", VA = "0x5F1754")]
		public SCurveContrast()
		{
		}
	}
	[Token(Token = "0x20001B2")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E8D80", Offset = "0x2E8D80")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E8D80", Offset = "0x2E8D80")]
	public class ShadowsMidtonesHighlights : BaseEffect
	{
		[Token(Token = "0x200054C")]
		public enum ColorMode
		{
			[Token(Token = "0x4001EB5")]
			LiftGammaGain,
			[Token(Token = "0x4001EB6")]
			OffsetGammaSlope
		}

		[Token(Token = "0x400095A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F31B8", Offset = "0x2F31B8")]
		public ColorMode Mode;

		[Token(Token = "0x400095B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F31EC", Offset = "0x2F31EC")]
		public Color Shadows;

		[Token(Token = "0x400095C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F3220", Offset = "0x2F3220")]
		public Color Midtones;

		[Token(Token = "0x400095D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F3254", Offset = "0x2F3254")]
		public Color Highlights;

		[Token(Token = "0x400095E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F3288", Offset = "0x2F3288")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F3288", Offset = "0x2F3288")]
		public float Amount;

		[Token(Token = "0x6000BE8")]
		[Address(RVA = "0x5F1774", Offset = "0x5F1774", VA = "0x5F1774", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000BE9")]
		[Address(RVA = "0x5F1B34", Offset = "0x5F1B34", VA = "0x5F1B34", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000BEA")]
		[Address(RVA = "0x5F1B90", Offset = "0x5F1B90", VA = "0x5F1B90")]
		public ShadowsMidtonesHighlights()
		{
		}
	}
	[Token(Token = "0x20001B3")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E8E24", Offset = "0x2E8E24")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E8E24", Offset = "0x2E8E24")]
	public class Sharpen : BaseEffect
	{
		[Token(Token = "0x200054D")]
		public enum Algorithm
		{
			[Token(Token = "0x4001EB8")]
			TypeA,
			[Token(Token = "0x4001EB9")]
			TypeB
		}

		[Token(Token = "0x400095F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F32D8", Offset = "0x2F32D8")]
		public Algorithm Mode;

		[Token(Token = "0x4000960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F3324", Offset = "0x2F3324")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F3324", Offset = "0x2F3324")]
		public float Strength;

		[Token(Token = "0x4000961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F3388", Offset = "0x2F3388")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F3388", Offset = "0x2F3388")]
		public float Clamp;

		[Token(Token = "0x6000BEB")]
		[Address(RVA = "0x5F1C58", Offset = "0x5F1C58", VA = "0x5F1C58", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000BEC")]
		[Address(RVA = "0x5F1E7C", Offset = "0x5F1E7C", VA = "0x5F1E7C", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000BED")]
		[Address(RVA = "0x5F1ED8", Offset = "0x5F1ED8", VA = "0x5F1ED8")]
		public Sharpen()
		{
		}
	}
	[Token(Token = "0x20001B4")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E8EB0", Offset = "0x2E8EB0")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E8EB0", Offset = "0x2E8EB0")]
	public class SmartSaturation : BaseEffect
	{
		[Token(Token = "0x4000962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F3408", Offset = "0x2F3408")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F3408", Offset = "0x2F3408")]
		public float Boost;

		[Token(Token = "0x4000963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationCurve Curve;

		[Token(Token = "0x4000964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Texture2D _CurveTexture;

		[Token(Token = "0x1700012E")]
		protected Texture2D m_CurveTexture
		{
			[Token(Token = "0x6000BEE")]
			[Address(RVA = "0x5F1F00", Offset = "0x5F1F00", VA = "0x5F1F00")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BEF")]
		[Address(RVA = "0x5F1FAC", Offset = "0x5F1FAC", VA = "0x5F1FAC", Slot = "8")]
		protected virtual void Reset()
		{
		}

		[Token(Token = "0x6000BF0")]
		[Address(RVA = "0x5F2144", Offset = "0x5F2144", VA = "0x5F2144", Slot = "9")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000BF1")]
		[Address(RVA = "0x5F2160", Offset = "0x5F2160", VA = "0x5F2160", Slot = "5")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6000BF2")]
		[Address(RVA = "0x5F223C", Offset = "0x5F223C", VA = "0x5F223C", Slot = "10")]
		public virtual void UpdateCurve()
		{
		}

		[Token(Token = "0x6000BF3")]
		[Address(RVA = "0x5F256C", Offset = "0x5F256C", VA = "0x5F256C", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000BF4")]
		[Address(RVA = "0x5F26A8", Offset = "0x5F26A8", VA = "0x5F26A8", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000BF5")]
		[Address(RVA = "0x5F2704", Offset = "0x5F2704", VA = "0x5F2704")]
		public SmartSaturation()
		{
		}
	}
	[Token(Token = "0x20001B5")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E8F48", Offset = "0x2E8F48")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E8F48", Offset = "0x2E8F48")]
	public class Strokes : BaseEffect
	{
		[Token(Token = "0x200054E")]
		public enum ColorMode
		{
			[Token(Token = "0x4001EBB")]
			BlackAndWhite,
			[Token(Token = "0x4001EBC")]
			WhiteAndBlack,
			[Token(Token = "0x4001EBD")]
			ColorAndWhite,
			[Token(Token = "0x4001EBE")]
			ColorAndBlack,
			[Token(Token = "0x4001EBF")]
			WhiteAndColor,
			[Token(Token = "0x4001EC0")]
			BlackAndColor
		}

		[Token(Token = "0x4000965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public ColorMode Mode;

		[Token(Token = "0x4000966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F347C", Offset = "0x2F347C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F347C", Offset = "0x2F347C")]
		public float Amplitude;

		[Token(Token = "0x4000967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F34F4", Offset = "0x2F34F4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F34F4", Offset = "0x2F34F4")]
		public float Frequency;

		[Token(Token = "0x4000968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F3574", Offset = "0x2F3574")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F3574", Offset = "0x2F3574")]
		public float Scaling;

		[Token(Token = "0x4000969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F35D4", Offset = "0x2F35D4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F35D4", Offset = "0x2F35D4")]
		public float MaxThickness;

		[Token(Token = "0x400096A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F363C", Offset = "0x2F363C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F363C", Offset = "0x2F363C")]
		public float Threshold;

		[Token(Token = "0x400096B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F36C4", Offset = "0x2F36C4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F36C4", Offset = "0x2F36C4")]
		public float Harshness;

		[Token(Token = "0x400096C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F3728", Offset = "0x2F3728")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F3728", Offset = "0x2F3728")]
		public float RedLuminance;

		[Token(Token = "0x400096D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F379C", Offset = "0x2F379C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F379C", Offset = "0x2F379C")]
		public float GreenLuminance;

		[Token(Token = "0x400096E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F3814", Offset = "0x2F3814")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F3814", Offset = "0x2F3814")]
		public float BlueLuminance;

		[Token(Token = "0x6000BF6")]
		[Address(RVA = "0x5F2714", Offset = "0x5F2714", VA = "0x5F2714", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000BF7")]
		[Address(RVA = "0x5F29B4", Offset = "0x5F29B4", VA = "0x5F29B4", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000BF8")]
		[Address(RVA = "0x5F2A10", Offset = "0x5F2A10", VA = "0x5F2A10")]
		public Strokes()
		{
		}
	}
	[Token(Token = "0x20001B6")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E8FD8", Offset = "0x2E8FD8")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E8FD8", Offset = "0x2E8FD8")]
	public class Technicolor : BaseEffect
	{
		[Token(Token = "0x400096F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F388C", Offset = "0x2F388C")]
		public float Exposure;

		[Token(Token = "0x4000970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 Balance;

		[Token(Token = "0x4000971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F38A4", Offset = "0x2F38A4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F38A4", Offset = "0x2F38A4")]
		public float Amount;

		[Token(Token = "0x6000BF9")]
		[Address(RVA = "0x5F2C90", Offset = "0x5F2C90", VA = "0x5F2C90", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000BFA")]
		[Address(RVA = "0x5F2F20", Offset = "0x5F2F20", VA = "0x5F2F20", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000BFB")]
		[Address(RVA = "0x5F2F7C", Offset = "0x5F2F7C", VA = "0x5F2F7C")]
		public Technicolor()
		{
		}
	}
	[Token(Token = "0x20001B7")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E906C", Offset = "0x2E906C")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E906C", Offset = "0x2E906C")]
	public class Threshold : BaseEffect
	{
		[Token(Token = "0x4000972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F38F4", Offset = "0x2F38F4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F38F4", Offset = "0x2F38F4")]
		public float Value;

		[Token(Token = "0x4000973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F3958", Offset = "0x2F3958")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F3958", Offset = "0x2F3958")]
		public float NoiseRange;

		[Token(Token = "0x4000974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F39BC", Offset = "0x2F39BC")]
		public bool UseNoise;

		[Token(Token = "0x6000BFC")]
		[Address(RVA = "0x5F2FE8", Offset = "0x5F2FE8", VA = "0x5F2FE8", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000BFD")]
		[Address(RVA = "0x5F3140", Offset = "0x5F3140", VA = "0x5F3140", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000BFE")]
		[Address(RVA = "0x5F319C", Offset = "0x5F319C", VA = "0x5F319C")]
		public Threshold()
		{
		}
	}
	[Token(Token = "0x20001B8")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E90FC", Offset = "0x2E90FC")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E90FC", Offset = "0x2E90FC")]
	public class TVVignette : BaseEffect
	{
		[Token(Token = "0x4000975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "MinAttribute", RVA = "0x2F3A18", Offset = "0x2F3A18")]
		public float Size;

		[Token(Token = "0x4000976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F3A2C", Offset = "0x2F3A2C")]
		public float Offset;

		[Token(Token = "0x6000BFF")]
		[Address(RVA = "0x5F2A68", Offset = "0x5F2A68", VA = "0x5F2A68", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000C00")]
		[Address(RVA = "0x5F2C14", Offset = "0x5F2C14", VA = "0x5F2C14", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000C01")]
		[Address(RVA = "0x5F2C70", Offset = "0x5F2C70", VA = "0x5F2C70")]
		public TVVignette()
		{
		}
	}
	[Token(Token = "0x20001B9")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E918C", Offset = "0x2E918C")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E918C", Offset = "0x2E918C")]
	public class Vibrance : BaseEffect
	{
		[Token(Token = "0x4000977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F3A44", Offset = "0x2F3A44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F3A44", Offset = "0x2F3A44")]
		public float Amount;

		[Token(Token = "0x4000978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F3A9C", Offset = "0x2F3A9C")]
		public float RedChannel;

		[Token(Token = "0x4000979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F3ABC", Offset = "0x2F3ABC")]
		public float GreenChannel;

		[Token(Token = "0x400097A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F3ADC", Offset = "0x2F3ADC")]
		public float BlueChannel;

		[Token(Token = "0x400097B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool AdvancedMode;

		[Token(Token = "0x6000C02")]
		[Address(RVA = "0x5F31B8", Offset = "0x5F31B8", VA = "0x5F31B8", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000C03")]
		[Address(RVA = "0x5F3450", Offset = "0x5F3450", VA = "0x5F3450", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000C04")]
		[Address(RVA = "0x5F34AC", Offset = "0x5F34AC", VA = "0x5F34AC")]
		public Vibrance()
		{
		}
	}
	[Token(Token = "0x20001BA")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E921C", Offset = "0x2E921C")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E921C", Offset = "0x2E921C")]
	public class Vintage : LookupFilter
	{
		[Token(Token = "0x200054F")]
		public enum InstragramFilter
		{
			[Token(Token = "0x4001EC2")]
			None,
			[Token(Token = "0x4001EC3")]
			F1977,
			[Token(Token = "0x4001EC4")]
			Aden,
			[Token(Token = "0x4001EC5")]
			Amaro,
			[Token(Token = "0x4001EC6")]
			Brannan,
			[Token(Token = "0x4001EC7")]
			Crema,
			[Token(Token = "0x4001EC8")]
			Earlybird,
			[Token(Token = "0x4001EC9")]
			Hefe,
			[Token(Token = "0x4001ECA")]
			Hudson,
			[Token(Token = "0x4001ECB")]
			Inkwell,
			[Token(Token = "0x4001ECC")]
			Juno,
			[Token(Token = "0x4001ECD")]
			Kelvin,
			[Token(Token = "0x4001ECE")]
			Lark,
			[Token(Token = "0x4001ECF")]
			LoFi,
			[Token(Token = "0x4001ED0")]
			Ludwig,
			[Token(Token = "0x4001ED1")]
			Mayfair,
			[Token(Token = "0x4001ED2")]
			Nashville,
			[Token(Token = "0x4001ED3")]
			Perpetua,
			[Token(Token = "0x4001ED4")]
			Reyes,
			[Token(Token = "0x4001ED5")]
			Rise,
			[Token(Token = "0x4001ED6")]
			Sierra,
			[Token(Token = "0x4001ED7")]
			Slumber,
			[Token(Token = "0x4001ED8")]
			Sutro,
			[Token(Token = "0x4001ED9")]
			Toaster,
			[Token(Token = "0x4001EDA")]
			Valencia,
			[Token(Token = "0x4001EDB")]
			Walden,
			[Token(Token = "0x4001EDC")]
			Willow,
			[Token(Token = "0x4001EDD")]
			XProII
		}

		[Token(Token = "0x400097C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public InstragramFilter Filter;

		[Token(Token = "0x400097D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected InstragramFilter m_CurrentFilter;

		[Token(Token = "0x6000C05")]
		[Address(RVA = "0x5F34C4", Offset = "0x5F34C4", VA = "0x5F34C4", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000C06")]
		[Address(RVA = "0x5F35E8", Offset = "0x5F35E8", VA = "0x5F35E8")]
		public Vintage()
		{
		}
	}
	[Token(Token = "0x20001BB")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E92B8", Offset = "0x2E92B8")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E92B8", Offset = "0x2E92B8")]
	public class VintageFast : LookupFilter3D
	{
		[Token(Token = "0x400097E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vintage.InstragramFilter Filter;

		[Token(Token = "0x400097F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Vintage.InstragramFilter m_CurrentFilter;

		[Token(Token = "0x6000C07")]
		[Address(RVA = "0x5F35F8", Offset = "0x5F35F8", VA = "0x5F35F8", Slot = "7")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000C08")]
		[Address(RVA = "0x5F371C", Offset = "0x5F371C", VA = "0x5F371C")]
		public VintageFast()
		{
		}
	}
	[Token(Token = "0x20001BC")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E9348", Offset = "0x2E9348")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E9348", Offset = "0x2E9348")]
	public class WaveDistortion : BaseEffect
	{
		[Token(Token = "0x4000980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F3AFC", Offset = "0x2F3AFC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F3AFC", Offset = "0x2F3AFC")]
		public float Amplitude;

		[Token(Token = "0x4000981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F3B54", Offset = "0x2F3B54")]
		public float Waves;

		[Token(Token = "0x4000982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F3B94", Offset = "0x2F3B94")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F3B94", Offset = "0x2F3B94")]
		public float ColorGlitch;

		[Token(Token = "0x4000983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F3BFC", Offset = "0x2F3BFC")]
		public float Phase;

		[Token(Token = "0x6000C09")]
		[Address(RVA = "0x5F372C", Offset = "0x5F372C", VA = "0x5F372C", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000C0A")]
		[Address(RVA = "0x5F38B4", Offset = "0x5F38B4", VA = "0x5F38B4", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000C0B")]
		[Address(RVA = "0x5F3910", Offset = "0x5F3910", VA = "0x5F3910")]
		public WaveDistortion()
		{
		}
	}
	[Token(Token = "0x20001BD")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E93DC", Offset = "0x2E93DC")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E93DC", Offset = "0x2E93DC")]
	public class WhiteBalance : BaseEffect
	{
		[Token(Token = "0x2000550")]
		public enum BalanceMode
		{
			[Token(Token = "0x4001EDF")]
			Simple,
			[Token(Token = "0x4001EE0")]
			Complex
		}

		[Token(Token = "0x4000984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x2F3C30", Offset = "0x2F3C30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F3C30", Offset = "0x2F3C30")]
		public Color White;

		[Token(Token = "0x4000985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F3C9C", Offset = "0x2F3C9C")]
		public BalanceMode Mode;

		[Token(Token = "0x6000C0C")]
		[Address(RVA = "0x5F3938", Offset = "0x5F3938", VA = "0x5F3938", Slot = "8")]
		protected virtual void Reset()
		{
		}

		[Token(Token = "0x6000C0D")]
		[Address(RVA = "0x5F39D0", Offset = "0x5F39D0", VA = "0x5F39D0", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000C0E")]
		[Address(RVA = "0x5F3ADC", Offset = "0x5F3ADC", VA = "0x5F3ADC", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000C0F")]
		[Address(RVA = "0x5F3B38", Offset = "0x5F3B38", VA = "0x5F3B38")]
		public WhiteBalance()
		{
		}
	}
	[Token(Token = "0x20001BE")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E9470", Offset = "0x2E9470")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E9470", Offset = "0x2E9470")]
	public class Wiggle : BaseEffect
	{
		[Token(Token = "0x2000551")]
		public enum Algorithm
		{
			[Token(Token = "0x4001EE2")]
			Simple,
			[Token(Token = "0x4001EE3")]
			Complex
		}

		[Token(Token = "0x4000986")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F3CD8", Offset = "0x2F3CD8")]
		public Algorithm Mode;

		[Token(Token = "0x4000987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Timer;

		[Token(Token = "0x4000988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F3D40", Offset = "0x2F3D40")]
		public float Speed;

		[Token(Token = "0x4000989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F3D84", Offset = "0x2F3D84")]
		public float Frequency;

		[Token(Token = "0x400098A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F3DDC", Offset = "0x2F3DDC")]
		public float Amplitude;

		[Token(Token = "0x400098B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F3E34", Offset = "0x2F3E34")]
		public bool AutomaticTimer;

		[Token(Token = "0x6000C10")]
		[Address(RVA = "0x5F3B9C", Offset = "0x5F3B9C", VA = "0x5F3B9C", Slot = "8")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000C11")]
		[Address(RVA = "0x5F3C00", Offset = "0x5F3C00", VA = "0x5F3C00", Slot = "6")]
		protected override void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000C12")]
		[Address(RVA = "0x5F3E2C", Offset = "0x5F3E2C", VA = "0x5F3E2C", Slot = "7")]
		protected override string GetShaderName()
		{
			return null;
		}

		[Token(Token = "0x6000C13")]
		[Address(RVA = "0x5F3E88", Offset = "0x5F3E88", VA = "0x5F3E88")]
		public Wiggle()
		{
		}
	}
}
namespace MWU.Timeline
{
	[Token(Token = "0x20001BF")]
	[ExecuteInEditMode]
	[DisallowMultipleComponent]
	public class TimelineId : MonoBehaviour
	{
		[Token(Token = "0x400098C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Dictionary<string, GameObject> IdMap;

		[Token(Token = "0x400098D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F3E90", Offset = "0x2F3E90")]
		private static long <LastUpdate>k__BackingField;

		[Token(Token = "0x400098E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		[ShowAsReadOnly]
		public string Id;

		[Token(Token = "0x1700012F")]
		public static long LastUpdate
		{
			[Token(Token = "0x6000C14")]
			[Address(RVA = "0x4EF1AC", Offset = "0x4EF1AC", VA = "0x4EF1AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FACA4", Offset = "0x2FACA4")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x6000C15")]
			[Address(RVA = "0x4EF238", Offset = "0x4EF238", VA = "0x4EF238")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FACB4", Offset = "0x2FACB4")]
			private set
			{
			}
		}

		[Token(Token = "0x6000C16")]
		[Address(RVA = "0x4EF2CC", Offset = "0x4EF2CC", VA = "0x4EF2CC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000C17")]
		[Address(RVA = "0x4EF4A4", Offset = "0x4EF4A4", VA = "0x4EF4A4")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6000C18")]
		[Address(RVA = "0x4EF2D0", Offset = "0x4EF2D0", VA = "0x4EF2D0")]
		private void Register()
		{
		}

		[Token(Token = "0x6000C19")]
		[Address(RVA = "0x4EF4A8", Offset = "0x4EF4A8", VA = "0x4EF4A8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000C1A")]
		[Address(RVA = "0x4EF668", Offset = "0x4EF668", VA = "0x4EF668")]
		public TimelineId()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001C0")]
	public struct DynamicBinding
	{
		[Token(Token = "0x400098F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public TrackAsset track;

		[Token(Token = "0x4000990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public string id;

		[NonSerialized]
		[Token(Token = "0x4000991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Type type;
	}
	[Token(Token = "0x20001C1")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x2E952C", Offset = "0x2E952C")]
	[ExecuteInEditMode]
	public class TimelineMultiSceneSupport : MonoBehaviour
	{
		[Token(Token = "0x2000552")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EAD6C", Offset = "0x2EAD6C")]
		private sealed class <>c__DisplayClass7_0
		{
			[Token(Token = "0x4001EE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public TrackAsset asset;

			[Token(Token = "0x6001D82")]
			[Address(RVA = "0x4F1220", Offset = "0x4F1220", VA = "0x4F1220")]
			public <>c__DisplayClass7_0()
			{
			}

			[Token(Token = "0x6001D83")]
			[Address(RVA = "0x4F158C", Offset = "0x4F158C", VA = "0x4F158C")]
			internal bool <UpdateBindingList>b__1(DynamicBinding x)
			{
				return default(bool);
			}
		}

		[Serializable]
		[Token(Token = "0x2000553")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EAD7C", Offset = "0x2EAD7C")]
		private sealed class <>c
		{
			[Token(Token = "0x4001EE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4001EE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public static Predicate<DynamicBinding> <>9__7_0;

			[Token(Token = "0x6001D85")]
			[Address(RVA = "0x4F14FC", Offset = "0x4F14FC", VA = "0x4F14FC")]
			public <>c()
			{
			}

			[Token(Token = "0x6001D86")]
			[Address(RVA = "0x4F1504", Offset = "0x4F1504", VA = "0x4F1504")]
			internal bool <UpdateBindingList>b__7_0(DynamicBinding t)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[ShowAsReadOnly]
		public List<DynamicBinding> bindings;

		[Token(Token = "0x4000993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private long lastUpdate;

		[Token(Token = "0x6000C1C")]
		[Address(RVA = "0x4EF7B8", Offset = "0x4EF7B8", VA = "0x4EF7B8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000C1D")]
		[Address(RVA = "0x4F0AD4", Offset = "0x4F0AD4", VA = "0x4F0AD4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000C1E")]
		[Address(RVA = "0x4F1200", Offset = "0x4F1200", VA = "0x4F1200")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6000C1F")]
		[Address(RVA = "0x4F121C", Offset = "0x4F121C", VA = "0x4F121C")]
		private void OnSceneLoaded(Scene scene, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x6000C20")]
		[Address(RVA = "0x4F0B78", Offset = "0x4F0B78", VA = "0x4F0B78")]
		private void RemoveDynamicBindings()
		{
		}

		[Token(Token = "0x6000C21")]
		[Address(RVA = "0x4EF864", Offset = "0x4EF864", VA = "0x4EF864")]
		private void UpdateBindingList()
		{
		}

		[Token(Token = "0x6000C22")]
		[Address(RVA = "0x4F1228", Offset = "0x4F1228", VA = "0x4F1228")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C23")]
		[Address(RVA = "0x4F0528", Offset = "0x4F0528", VA = "0x4F0528")]
		private void UpdateBindings()
		{
		}

		[Token(Token = "0x6000C24")]
		[Address(RVA = "0x4F13F0", Offset = "0x4F13F0", VA = "0x4F13F0")]
		public TimelineMultiSceneSupport()
		{
		}
	}
}
namespace MWU.Attributes
{
	[Token(Token = "0x20001C2")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x2E95B4", Offset = "0x2E95B4")]
	public class ShowAsReadOnlyAttribute : PropertyAttribute
	{
		[Token(Token = "0x6000C25")]
		[Address(RVA = "0x4EF1A4", Offset = "0x4EF1A4", VA = "0x4EF1A4")]
		public ShowAsReadOnlyAttribute()
		{
		}
	}
}
namespace SharpJson
{
	[Token(Token = "0x20001C3")]
	internal class Lexer
	{
		[Token(Token = "0x2000554")]
		public enum Token
		{
			[Token(Token = "0x4001EE8")]
			None,
			[Token(Token = "0x4001EE9")]
			Null,
			[Token(Token = "0x4001EEA")]
			True,
			[Token(Token = "0x4001EEB")]
			False,
			[Token(Token = "0x4001EEC")]
			Colon,
			[Token(Token = "0x4001EED")]
			Comma,
			[Token(Token = "0x4001EEE")]
			String,
			[Token(Token = "0x4001EEF")]
			Number,
			[Token(Token = "0x4001EF0")]
			CurlyOpen,
			[Token(Token = "0x4001EF1")]
			CurlyClose,
			[Token(Token = "0x4001EF2")]
			SquaredOpen,
			[Token(Token = "0x4001EF3")]
			SquaredClose
		}

		[Token(Token = "0x4000994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F3EE0", Offset = "0x2F3EE0")]
		private int <lineNumber>k__BackingField;

		[Token(Token = "0x4000995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F3EF0", Offset = "0x2F3EF0")]
		private bool <parseNumbersAsFloat>k__BackingField;

		[Token(Token = "0x4000996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private char[] json;

		[Token(Token = "0x4000997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int index;

		[Token(Token = "0x4000998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool success;

		[Token(Token = "0x4000999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private char[] stringBuffer;

		[Token(Token = "0x17000130")]
		public bool hasError
		{
			[Token(Token = "0x6000C26")]
			[Address(RVA = "0xA8CDFC", Offset = "0xA8CDFC", VA = "0xA8CDFC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000131")]
		public int lineNumber
		{
			[Token(Token = "0x6000C27")]
			[Address(RVA = "0xA8CE10", Offset = "0xA8CE10", VA = "0xA8CE10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FACC4", Offset = "0x2FACC4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C28")]
			[Address(RVA = "0xA8CE18", Offset = "0xA8CE18", VA = "0xA8CE18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FACD4", Offset = "0x2FACD4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000132")]
		public bool parseNumbersAsFloat
		{
			[Token(Token = "0x6000C29")]
			[Address(RVA = "0xA8CE20", Offset = "0xA8CE20", VA = "0xA8CE20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FACE4", Offset = "0x2FACE4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C2A")]
			[Address(RVA = "0xA8CE28", Offset = "0xA8CE28", VA = "0xA8CE28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FACF4", Offset = "0x2FACF4")]
			set
			{
			}
		}

		[Token(Token = "0x6000C2B")]
		[Address(RVA = "0xA8BD20", Offset = "0xA8BD20", VA = "0xA8BD20")]
		public Lexer(string text)
		{
		}

		[Token(Token = "0x6000C2C")]
		[Address(RVA = "0xA8CE30", Offset = "0xA8CE30", VA = "0xA8CE30")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000C2D")]
		[Address(RVA = "0xA8C458", Offset = "0xA8C458", VA = "0xA8C458")]
		public string ParseString()
		{
			return null;
		}

		[Token(Token = "0x6000C2E")]
		[Address(RVA = "0xA8CF90", Offset = "0xA8CF90", VA = "0xA8CF90")]
		private string GetNumberString()
		{
			return null;
		}

		[Token(Token = "0x6000C2F")]
		[Address(RVA = "0xA8CC30", Offset = "0xA8CC30", VA = "0xA8CC30")]
		public float ParseFloatNumber()
		{
			return default(float);
		}

		[Token(Token = "0x6000C30")]
		[Address(RVA = "0xA8CCFC", Offset = "0xA8CCFC", VA = "0xA8CCFC")]
		public double ParseDoubleNumber()
		{
			return default(double);
		}

		[Token(Token = "0x6000C31")]
		[Address(RVA = "0xA8CFDC", Offset = "0xA8CFDC", VA = "0xA8CFDC")]
		private int GetLastIndexOfNumber(int index)
		{
			return default(int);
		}

		[Token(Token = "0x6000C32")]
		[Address(RVA = "0xA8CE48", Offset = "0xA8CE48", VA = "0xA8CE48")]
		private void SkipWhiteSpaces()
		{
		}

		[Token(Token = "0x6000C33")]
		[Address(RVA = "0xA8C378", Offset = "0xA8C378", VA = "0xA8C378")]
		public Token LookAhead()
		{
			return default(Token);
		}

		[Token(Token = "0x6000C34")]
		[Address(RVA = "0xA8C358", Offset = "0xA8C358", VA = "0xA8C358")]
		public Token NextToken()
		{
			return default(Token);
		}

		[Token(Token = "0x6000C35")]
		[Address(RVA = "0xA8D098", Offset = "0xA8D098", VA = "0xA8D098")]
		private static Token NextToken(char[] json, ref int index)
		{
			return default(Token);
		}
	}
	[Token(Token = "0x20001C4")]
	public class JsonDecoder
	{
		[Token(Token = "0x400099A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F3F00", Offset = "0x2F3F00")]
		private string <errorMessage>k__BackingField;

		[Token(Token = "0x400099B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F3F10", Offset = "0x2F3F10")]
		private bool <parseNumbersAsFloat>k__BackingField;

		[Token(Token = "0x400099C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Lexer lexer;

		[Token(Token = "0x17000133")]
		public string errorMessage
		{
			[Token(Token = "0x6000C36")]
			[Address(RVA = "0xA8BC40", Offset = "0xA8BC40", VA = "0xA8BC40")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAD04", Offset = "0x2FAD04")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C37")]
			[Address(RVA = "0xA8BC48", Offset = "0xA8BC48", VA = "0xA8BC48")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAD14", Offset = "0x2FAD14")]
			private set
			{
			}
		}

		[Token(Token = "0x17000134")]
		public bool parseNumbersAsFloat
		{
			[Token(Token = "0x6000C38")]
			[Address(RVA = "0xA8BC50", Offset = "0xA8BC50", VA = "0xA8BC50")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAD24", Offset = "0x2FAD24")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C39")]
			[Address(RVA = "0xA8BC58", Offset = "0xA8BC58", VA = "0xA8BC58")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAD34", Offset = "0x2FAD34")]
			set
			{
			}
		}

		[Token(Token = "0x6000C3A")]
		[Address(RVA = "0xA8BC60", Offset = "0xA8BC60", VA = "0xA8BC60")]
		public JsonDecoder()
		{
		}

		[Token(Token = "0x6000C3B")]
		[Address(RVA = "0xA8BC84", Offset = "0xA8BC84", VA = "0xA8BC84")]
		public object Decode(string text)
		{
			return null;
		}

		[Token(Token = "0x6000C3C")]
		[Address(RVA = "0xA8C064", Offset = "0xA8C064", VA = "0xA8C064")]
		public static object DecodeText(string text)
		{
			return null;
		}

		[Token(Token = "0x6000C3D")]
		[Address(RVA = "0xA8C0F8", Offset = "0xA8C0F8", VA = "0xA8C0F8")]
		private IDictionary<string, object> ParseObject()
		{
			return null;
		}

		[Token(Token = "0x6000C3E")]
		[Address(RVA = "0xA8CA78", Offset = "0xA8CA78", VA = "0xA8CA78")]
		private IList<object> ParseArray()
		{
			return null;
		}

		[Token(Token = "0x6000C3F")]
		[Address(RVA = "0xA8BDD4", Offset = "0xA8BDD4", VA = "0xA8BDD4")]
		private object ParseValue()
		{
			return null;
		}

		[Token(Token = "0x6000C40")]
		[Address(RVA = "0xA8C3A8", Offset = "0xA8C3A8", VA = "0xA8C3A8")]
		private void TriggerError(string message)
		{
		}

		[Token(Token = "0x6000C41")]
		private T EvalLexer<T>(T value)
		{
			return (T)null;
		}
	}
}
namespace Spine
{
	[Token(Token = "0x20001C5")]
	public class Animation
	{
		[Token(Token = "0x400099D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal ExposedList<Timeline> timelines;

		[Token(Token = "0x400099E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal float duration;

		[Token(Token = "0x400099F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal string name;

		[Token(Token = "0x17000135")]
		public string Name
		{
			[Token(Token = "0x6000C42")]
			[Address(RVA = "0xA8DC68", Offset = "0xA8DC68", VA = "0xA8DC68")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000136")]
		public ExposedList<Timeline> Timelines
		{
			[Token(Token = "0x6000C43")]
			[Address(RVA = "0xA8DC70", Offset = "0xA8DC70", VA = "0xA8DC70")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C44")]
			[Address(RVA = "0xA8DC78", Offset = "0xA8DC78", VA = "0xA8DC78")]
			set
			{
			}
		}

		[Token(Token = "0x17000137")]
		public float Duration
		{
			[Token(Token = "0x6000C45")]
			[Address(RVA = "0xA8DC80", Offset = "0xA8DC80", VA = "0xA8DC80")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C46")]
			[Address(RVA = "0xA8DC88", Offset = "0xA8DC88", VA = "0xA8DC88")]
			set
			{
			}
		}

		[Token(Token = "0x6000C47")]
		[Address(RVA = "0xA8DC90", Offset = "0xA8DC90", VA = "0xA8DC90")]
		public Animation(string name, ExposedList<Timeline> timelines, float duration)
		{
		}

		[Token(Token = "0x6000C48")]
		[Address(RVA = "0xA8DDCC", Offset = "0xA8DDCC", VA = "0xA8DDCC")]
		public void Apply(Skeleton skeleton, float lastTime, float time, bool loop, ExposedList<Event> events, float alpha, MixPose pose, MixDirection direction)
		{
		}

		[Token(Token = "0x6000C49")]
		[Address(RVA = "0xA8E038", Offset = "0xA8E038", VA = "0xA8E038")]
		internal static int BinarySearch(float[] values, float target, int step)
		{
			return default(int);
		}

		[Token(Token = "0x6000C4A")]
		[Address(RVA = "0xA8E10C", Offset = "0xA8E10C", VA = "0xA8E10C")]
		internal static int BinarySearch(float[] values, float target)
		{
			return default(int);
		}

		[Token(Token = "0x6000C4B")]
		[Address(RVA = "0xA8E1A8", Offset = "0xA8E1A8", VA = "0xA8E1A8")]
		internal static int LinearSearch(float[] values, float target, int step)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001C6")]
	public interface Timeline
	{
		[Token(Token = "0x17000138")]
		int PropertyId
		{
			[Token(Token = "0x6000C4D")]
			get;
		}

		[Token(Token = "0x6000C4C")]
		void Apply(Skeleton skeleton, float lastTime, float time, ExposedList<Event> events, float alpha, MixPose pose, MixDirection direction);
	}
	[Token(Token = "0x20001C7")]
	public enum MixPose
	{
		[Token(Token = "0x40009A1")]
		Setup,
		[Token(Token = "0x40009A2")]
		Current,
		[Token(Token = "0x40009A3")]
		CurrentLayered
	}
	[Token(Token = "0x20001C8")]
	public enum MixDirection
	{
		[Token(Token = "0x40009A5")]
		In,
		[Token(Token = "0x40009A6")]
		Out
	}
	[Token(Token = "0x20001C9")]
	internal enum TimelineType
	{
		[Token(Token = "0x40009A8")]
		Rotate,
		[Token(Token = "0x40009A9")]
		Translate,
		[Token(Token = "0x40009AA")]
		Scale,
		[Token(Token = "0x40009AB")]
		Shear,
		[Token(Token = "0x40009AC")]
		Attachment,
		[Token(Token = "0x40009AD")]
		Color,
		[Token(Token = "0x40009AE")]
		Deform,
		[Token(Token = "0x40009AF")]
		Event,
		[Token(Token = "0x40009B0")]
		DrawOrder,
		[Token(Token = "0x40009B1")]
		IkConstraint,
		[Token(Token = "0x40009B2")]
		TransformConstraint,
		[Token(Token = "0x40009B3")]
		PathConstraintPosition,
		[Token(Token = "0x40009B4")]
		PathConstraintSpacing,
		[Token(Token = "0x40009B5")]
		PathConstraintMix,
		[Token(Token = "0x40009B6")]
		TwoColor
	}
	[Token(Token = "0x20001CA")]
	public abstract class CurveTimeline : Timeline
	{
		[Token(Token = "0x40009B7")]
		protected const float LINEAR = 0f;

		[Token(Token = "0x40009B8")]
		protected const float STEPPED = 1f;

		[Token(Token = "0x40009B9")]
		protected const float BEZIER = 2f;

		[Token(Token = "0x40009BA")]
		protected const int BEZIER_SIZE = 19;

		[Token(Token = "0x40009BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private float[] curves;

		[Token(Token = "0x17000139")]
		public int FrameCount
		{
			[Token(Token = "0x6000C4E")]
			[Address(RVA = "0xA98D08", Offset = "0xA98D08", VA = "0xA98D08")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700013A")]
		public abstract int PropertyId
		{
			[Token(Token = "0x6000C51")]
			get;
		}

		[Token(Token = "0x6000C4F")]
		[Address(RVA = "0xA983F8", Offset = "0xA983F8", VA = "0xA983F8")]
		public CurveTimeline(int frameCount)
		{
		}

		[Token(Token = "0x6000C50")]
		public abstract void Apply(Skeleton skeleton, float lastTime, float time, ExposedList<Event> firedEvents, float alpha, MixPose pose, MixDirection direction);

		[Token(Token = "0x6000C52")]
		[Address(RVA = "0xA98D44", Offset = "0xA98D44", VA = "0xA98D44")]
		public void SetLinear(int frameIndex)
		{
		}

		[Token(Token = "0x6000C53")]
		[Address(RVA = "0xA98D98", Offset = "0xA98D98", VA = "0xA98D98")]
		public void SetStepped(int frameIndex)
		{
		}

		[Token(Token = "0x6000C54")]
		[Address(RVA = "0xA98DEC", Offset = "0xA98DEC", VA = "0xA98DEC")]
		public void SetCurve(int frameIndex, float cx1, float cy1, float cx2, float cy2)
		{
		}

		[Token(Token = "0x6000C55")]
		[Address(RVA = "0xA91164", Offset = "0xA91164", VA = "0xA91164")]
		public float GetCurvePercent(int frameIndex, float percent)
		{
			return default(float);
		}

		[Token(Token = "0x6000C56")]
		[Address(RVA = "0xA98FB0", Offset = "0xA98FB0", VA = "0xA98FB0")]
		public float GetCurveType(int frameIndex)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20001CB")]
	public class RotateTimeline : CurveTimeline
	{
		[Token(Token = "0x40009BC")]
		public const int ENTRIES = 2;

		[Token(Token = "0x40009BD")]
		internal const int PREV_TIME = -2;

		[Token(Token = "0x40009BE")]
		internal const int PREV_ROTATION = -1;

		[Token(Token = "0x40009BF")]
		internal const int ROTATION = 1;

		[Token(Token = "0x40009C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal int boneIndex;

		[Token(Token = "0x40009C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal float[] frames;

		[Token(Token = "0x1700013B")]
		public int BoneIndex
		{
			[Token(Token = "0x6000C57")]
			[Address(RVA = "0xAA1724", Offset = "0xAA1724", VA = "0xAA1724")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C58")]
			[Address(RVA = "0xAA172C", Offset = "0xAA172C", VA = "0xAA172C")]
			set
			{
			}
		}

		[Token(Token = "0x1700013C")]
		public float[] Frames
		{
			[Token(Token = "0x6000C59")]
			[Address(RVA = "0xAA1734", Offset = "0xAA1734", VA = "0xAA1734")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C5A")]
			[Address(RVA = "0xAA173C", Offset = "0xAA173C", VA = "0xAA173C")]
			set
			{
			}
		}

		[Token(Token = "0x1700013D")]
		public override int PropertyId
		{
			[Token(Token = "0x6000C5B")]
			[Address(RVA = "0xAA1744", Offset = "0xAA1744", VA = "0xAA1744", Slot = "7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000C5C")]
		[Address(RVA = "0xAA174C", Offset = "0xAA174C", VA = "0xAA174C")]
		public RotateTimeline(int frameCount)
		{
		}

		[Token(Token = "0x6000C5D")]
		[Address(RVA = "0xAA17C4", Offset = "0xAA17C4", VA = "0xAA17C4")]
		public void SetFrame(int frameIndex, float time, float degrees)
		{
		}

		[Token(Token = "0x6000C5E")]
		[Address(RVA = "0xAA1868", Offset = "0xAA1868", VA = "0xAA1868", Slot = "6")]
		public override void Apply(Skeleton skeleton, float lastTime, float time, ExposedList<Event> firedEvents, float alpha, MixPose pose, MixDirection direction)
		{
		}
	}
	[Token(Token = "0x20001CC")]
	public class TranslateTimeline : CurveTimeline
	{
		[Token(Token = "0x40009C2")]
		public const int ENTRIES = 3;

		[Token(Token = "0x40009C3")]
		protected const int PREV_TIME = -3;

		[Token(Token = "0x40009C4")]
		protected const int PREV_X = -2;

		[Token(Token = "0x40009C5")]
		protected const int PREV_Y = -1;

		[Token(Token = "0x40009C6")]
		protected const int X = 1;

		[Token(Token = "0x40009C7")]
		protected const int Y = 2;

		[Token(Token = "0x40009C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal int boneIndex;

		[Token(Token = "0x40009C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal float[] frames;

		[Token(Token = "0x1700013E")]
		public int BoneIndex
		{
			[Token(Token = "0x6000C5F")]
			[Address(RVA = "0xF60360", Offset = "0xF60360", VA = "0xF60360")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C60")]
			[Address(RVA = "0xF60368", Offset = "0xF60368", VA = "0xF60368")]
			set
			{
			}
		}

		[Token(Token = "0x1700013F")]
		public float[] Frames
		{
			[Token(Token = "0x6000C61")]
			[Address(RVA = "0xF60370", Offset = "0xF60370", VA = "0xF60370")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C62")]
			[Address(RVA = "0xF60378", Offset = "0xF60378", VA = "0xF60378")]
			set
			{
			}
		}

		[Token(Token = "0x17000140")]
		public override int PropertyId
		{
			[Token(Token = "0x6000C63")]
			[Address(RVA = "0xF60380", Offset = "0xF60380", VA = "0xF60380", Slot = "7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000C64")]
		[Address(RVA = "0xF465A4", Offset = "0xF465A4", VA = "0xF465A4")]
		public TranslateTimeline(int frameCount)
		{
		}

		[Token(Token = "0x6000C65")]
		[Address(RVA = "0xF46620", Offset = "0xF46620", VA = "0xF46620")]
		public void SetFrame(int frameIndex, float time, float x, float y)
		{
		}

		[Token(Token = "0x6000C66")]
		[Address(RVA = "0xF6038C", Offset = "0xF6038C", VA = "0xF6038C", Slot = "6")]
		public override void Apply(Skeleton skeleton, float lastTime, float time, ExposedList<Event> firedEvents, float alpha, MixPose pose, MixDirection direction)
		{
		}
	}
	[Token(Token = "0x20001CD")]
	public class ScaleTimeline : TranslateTimeline
	{
		[Token(Token = "0x17000141")]
		public override int PropertyId
		{
			[Token(Token = "0x6000C67")]
			[Address(RVA = "0xAA1C94", Offset = "0xAA1C94", VA = "0xAA1C94", Slot = "7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000C68")]
		[Address(RVA = "0xAA1CA0", Offset = "0xAA1CA0", VA = "0xAA1CA0")]
		public ScaleTimeline(int frameCount)
		{
		}

		[Token(Token = "0x6000C69")]
		[Address(RVA = "0xAA1CA8", Offset = "0xAA1CA8", VA = "0xAA1CA8", Slot = "6")]
		public override void Apply(Skeleton skeleton, float lastTime, float time, ExposedList<Event> firedEvents, float alpha, MixPose pose, MixDirection direction)
		{
		}
	}
	[Token(Token = "0x20001CE")]
	public class ShearTimeline : TranslateTimeline
	{
		[Token(Token = "0x17000142")]
		public override int PropertyId
		{
			[Token(Token = "0x6000C6A")]
			[Address(RVA = "0xAA2210", Offset = "0xAA2210", VA = "0xAA2210", Slot = "7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000C6B")]
		[Address(RVA = "0xAA221C", Offset = "0xAA221C", VA = "0xAA221C")]
		public ShearTimeline(int frameCount)
		{
		}

		[Token(Token = "0x6000C6C")]
		[Address(RVA = "0xAA2224", Offset = "0xAA2224", VA = "0xAA2224", Slot = "6")]
		public override void Apply(Skeleton skeleton, float lastTime, float time, ExposedList<Event> firedEvents, float alpha, MixPose pose, MixDirection direction)
		{
		}
	}
	[Token(Token = "0x20001CF")]
	public class ColorTimeline : CurveTimeline
	{
		[Token(Token = "0x40009CA")]
		public const int ENTRIES = 5;

		[Token(Token = "0x40009CB")]
		protected const int PREV_TIME = -5;

		[Token(Token = "0x40009CC")]
		protected const int PREV_R = -4;

		[Token(Token = "0x40009CD")]
		protected const int PREV_G = -3;

		[Token(Token = "0x40009CE")]
		protected const int PREV_B = -2;

		[Token(Token = "0x40009CF")]
		protected const int PREV_A = -1;

		[Token(Token = "0x40009D0")]
		protected const int R = 1;

		[Token(Token = "0x40009D1")]
		protected const int G = 2;

		[Token(Token = "0x40009D2")]
		protected const int B = 3;

		[Token(Token = "0x40009D3")]
		protected const int A = 4;

		[Token(Token = "0x40009D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal int slotIndex;

		[Token(Token = "0x40009D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal float[] frames;

		[Token(Token = "0x17000143")]
		public int SlotIndex
		{
			[Token(Token = "0x6000C6D")]
			[Address(RVA = "0xA98354", Offset = "0xA98354", VA = "0xA98354")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C6E")]
			[Address(RVA = "0xA9835C", Offset = "0xA9835C", VA = "0xA9835C")]
			set
			{
			}
		}

		[Token(Token = "0x17000144")]
		public float[] Frames
		{
			[Token(Token = "0x6000C6F")]
			[Address(RVA = "0xA98364", Offset = "0xA98364", VA = "0xA98364")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C70")]
			[Address(RVA = "0xA9836C", Offset = "0xA9836C", VA = "0xA9836C")]
			set
			{
			}
		}

		[Token(Token = "0x17000145")]
		public override int PropertyId
		{
			[Token(Token = "0x6000C71")]
			[Address(RVA = "0xA98374", Offset = "0xA98374", VA = "0xA98374", Slot = "7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000C72")]
		[Address(RVA = "0xA98380", Offset = "0xA98380", VA = "0xA98380")]
		public ColorTimeline(int frameCount)
		{
		}

		[Token(Token = "0x6000C73")]
		[Address(RVA = "0xA98520", Offset = "0xA98520", VA = "0xA98520")]
		public void SetFrame(int frameIndex, float time, float r, float g, float b, float a)
		{
		}

		[Token(Token = "0x6000C74")]
		[Address(RVA = "0xA98680", Offset = "0xA98680", VA = "0xA98680", Slot = "6")]
		public override void Apply(Skeleton skeleton, float lastTime, float time, ExposedList<Event> firedEvents, float alpha, MixPose pose, MixDirection direction)
		{
		}
	}
	[Token(Token = "0x20001D0")]
	public class TwoColorTimeline : CurveTimeline
	{
		[Token(Token = "0x40009D6")]
		public const int ENTRIES = 8;

		[Token(Token = "0x40009D7")]
		protected const int PREV_TIME = -8;

		[Token(Token = "0x40009D8")]
		protected const int PREV_R = -7;

		[Token(Token = "0x40009D9")]
		protected const int PREV_G = -6;

		[Token(Token = "0x40009DA")]
		protected const int PREV_B = -5;

		[Token(Token = "0x40009DB")]
		protected const int PREV_A = -4;

		[Token(Token = "0x40009DC")]
		protected const int PREV_R2 = -3;

		[Token(Token = "0x40009DD")]
		protected const int PREV_G2 = -2;

		[Token(Token = "0x40009DE")]
		protected const int PREV_B2 = -1;

		[Token(Token = "0x40009DF")]
		protected const int R = 1;

		[Token(Token = "0x40009E0")]
		protected const int G = 2;

		[Token(Token = "0x40009E1")]
		protected const int B = 3;

		[Token(Token = "0x40009E2")]
		protected const int A = 4;

		[Token(Token = "0x40009E3")]
		protected const int R2 = 5;

		[Token(Token = "0x40009E4")]
		protected const int G2 = 6;

		[Token(Token = "0x40009E5")]
		protected const int B2 = 7;

		[Token(Token = "0x40009E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal float[] frames;

		[Token(Token = "0x40009E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int slotIndex;

		[Token(Token = "0x17000146")]
		public float[] Frames
		{
			[Token(Token = "0x6000C75")]
			[Address(RVA = "0xF60AD0", Offset = "0xF60AD0", VA = "0xF60AD0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000147")]
		public int SlotIndex
		{
			[Token(Token = "0x6000C76")]
			[Address(RVA = "0xF60AD8", Offset = "0xF60AD8", VA = "0xF60AD8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C77")]
			[Address(RVA = "0xF60AE0", Offset = "0xF60AE0", VA = "0xF60AE0")]
			set
			{
			}
		}

		[Token(Token = "0x17000148")]
		public override int PropertyId
		{
			[Token(Token = "0x6000C78")]
			[Address(RVA = "0xF60B90", Offset = "0xF60B90", VA = "0xF60B90", Slot = "7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000C79")]
		[Address(RVA = "0xF46308", Offset = "0xF46308", VA = "0xF46308")]
		public TwoColorTimeline(int frameCount)
		{
		}

		[Token(Token = "0x6000C7A")]
		[Address(RVA = "0xF46384", Offset = "0xF46384", VA = "0xF46384")]
		public void SetFrame(int frameIndex, float time, float r, float g, float b, float a, float r2, float g2, float b2)
		{
		}

		[Token(Token = "0x6000C7B")]
		[Address(RVA = "0xF60B9C", Offset = "0xF60B9C", VA = "0xF60B9C", Slot = "6")]
		public override void Apply(Skeleton skeleton, float lastTime, float time, ExposedList<Event> firedEvents, float alpha, MixPose pose, MixDirection direction)
		{
		}
	}
	[Token(Token = "0x20001D1")]
	public class AttachmentTimeline : Timeline
	{
		[Token(Token = "0x40009E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal int slotIndex;

		[Token(Token = "0x40009E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal float[] frames;

		[Token(Token = "0x40009EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string[] attachmentNames;

		[Token(Token = "0x17000149")]
		public int SlotIndex
		{
			[Token(Token = "0x6000C7C")]
			[Address(RVA = "0xA95E14", Offset = "0xA95E14", VA = "0xA95E14")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C7D")]
			[Address(RVA = "0xA95E1C", Offset = "0xA95E1C", VA = "0xA95E1C")]
			set
			{
			}
		}

		[Token(Token = "0x1700014A")]
		public float[] Frames
		{
			[Token(Token = "0x6000C7E")]
			[Address(RVA = "0xA95E24", Offset = "0xA95E24", VA = "0xA95E24")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C7F")]
			[Address(RVA = "0xA95E2C", Offset = "0xA95E2C", VA = "0xA95E2C")]
			set
			{
			}
		}

		[Token(Token = "0x1700014B")]
		public string[] AttachmentNames
		{
			[Token(Token = "0x6000C80")]
			[Address(RVA = "0xA95E34", Offset = "0xA95E34", VA = "0xA95E34")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C81")]
			[Address(RVA = "0xA95E3C", Offset = "0xA95E3C", VA = "0xA95E3C")]
			set
			{
			}
		}

		[Token(Token = "0x1700014C")]
		public int FrameCount
		{
			[Token(Token = "0x6000C82")]
			[Address(RVA = "0xA95E44", Offset = "0xA95E44", VA = "0xA95E44")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700014D")]
		public int PropertyId
		{
			[Token(Token = "0x6000C83")]
			[Address(RVA = "0xA95E68", Offset = "0xA95E68", VA = "0xA95E68", Slot = "5")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000C84")]
		[Address(RVA = "0xA95E74", Offset = "0xA95E74", VA = "0xA95E74")]
		public AttachmentTimeline(int frameCount)
		{
		}

		[Token(Token = "0x6000C85")]
		[Address(RVA = "0xA95F08", Offset = "0xA95F08", VA = "0xA95F08")]
		public void SetFrame(int frameIndex, float time, string attachmentName)
		{
		}

		[Token(Token = "0x6000C86")]
		[Address(RVA = "0xA95FD0", Offset = "0xA95FD0", VA = "0xA95FD0", Slot = "4")]
		public void Apply(Skeleton skeleton, float lastTime, float time, ExposedList<Event> firedEvents, float alpha, MixPose pose, MixDirection direction)
		{
		}
	}
	[Token(Token = "0x20001D2")]
	public class DeformTimeline : CurveTimeline
	{
		[Token(Token = "0x40009EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal int slotIndex;

		[Token(Token = "0x40009EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal float[] frames;

		[Token(Token = "0x40009ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal float[][] frameVertices;

		[Token(Token = "0x40009EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal VertexAttachment attachment;

		[Token(Token = "0x1700014E")]
		public int SlotIndex
		{
			[Token(Token = "0x6000C87")]
			[Address(RVA = "0xA99000", Offset = "0xA99000", VA = "0xA99000")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C88")]
			[Address(RVA = "0xA99008", Offset = "0xA99008", VA = "0xA99008")]
			set
			{
			}
		}

		[Token(Token = "0x1700014F")]
		public float[] Frames
		{
			[Token(Token = "0x6000C89")]
			[Address(RVA = "0xA99010", Offset = "0xA99010", VA = "0xA99010")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C8A")]
			[Address(RVA = "0xA99018", Offset = "0xA99018", VA = "0xA99018")]
			set
			{
			}
		}

		[Token(Token = "0x17000150")]
		public float[][] Vertices
		{
			[Token(Token = "0x6000C8B")]
			[Address(RVA = "0xA99020", Offset = "0xA99020", VA = "0xA99020")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C8C")]
			[Address(RVA = "0xA99028", Offset = "0xA99028", VA = "0xA99028")]
			set
			{
			}
		}

		[Token(Token = "0x17000151")]
		public VertexAttachment Attachment
		{
			[Token(Token = "0x6000C8D")]
			[Address(RVA = "0xA99030", Offset = "0xA99030", VA = "0xA99030")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C8E")]
			[Address(RVA = "0xA99038", Offset = "0xA99038", VA = "0xA99038")]
			set
			{
			}
		}

		[Token(Token = "0x17000152")]
		public override int PropertyId
		{
			[Token(Token = "0x6000C8F")]
			[Address(RVA = "0xA99040", Offset = "0xA99040", VA = "0xA99040", Slot = "7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000C90")]
		[Address(RVA = "0xA99074", Offset = "0xA99074", VA = "0xA99074")]
		public DeformTimeline(int frameCount)
		{
		}

		[Token(Token = "0x6000C91")]
		[Address(RVA = "0xA99108", Offset = "0xA99108", VA = "0xA99108")]
		public void SetFrame(int frameIndex, float time, float[] vertices)
		{
		}

		[Token(Token = "0x6000C92")]
		[Address(RVA = "0xA991D0", Offset = "0xA991D0", VA = "0xA991D0", Slot = "6")]
		public override void Apply(Skeleton skeleton, float lastTime, float time, ExposedList<Event> firedEvents, float alpha, MixPose pose, MixDirection direction)
		{
		}
	}
	[Token(Token = "0x20001D3")]
	public class EventTimeline : Timeline
	{
		[Token(Token = "0x40009EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal float[] frames;

		[Token(Token = "0x40009F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private Event[] events;

		[Token(Token = "0x17000153")]
		public float[] Frames
		{
			[Token(Token = "0x6000C93")]
			[Address(RVA = "0xA9A780", Offset = "0xA9A780", VA = "0xA9A780")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C94")]
			[Address(RVA = "0xA9A788", Offset = "0xA9A788", VA = "0xA9A788")]
			set
			{
			}
		}

		[Token(Token = "0x17000154")]
		public Event[] Events
		{
			[Token(Token = "0x6000C95")]
			[Address(RVA = "0xA9A790", Offset = "0xA9A790", VA = "0xA9A790")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C96")]
			[Address(RVA = "0xA9A798", Offset = "0xA9A798", VA = "0xA9A798")]
			set
			{
			}
		}

		[Token(Token = "0x17000155")]
		public int FrameCount
		{
			[Token(Token = "0x6000C97")]
			[Address(RVA = "0xA9A7A0", Offset = "0xA9A7A0", VA = "0xA9A7A0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000156")]
		public int PropertyId
		{
			[Token(Token = "0x6000C98")]
			[Address(RVA = "0xA9A7C4", Offset = "0xA9A7C4", VA = "0xA9A7C4", Slot = "5")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000C99")]
		[Address(RVA = "0xA9A7CC", Offset = "0xA9A7CC", VA = "0xA9A7CC")]
		public EventTimeline(int frameCount)
		{
		}

		[Token(Token = "0x6000C9A")]
		[Address(RVA = "0xA9A860", Offset = "0xA9A860", VA = "0xA9A860")]
		public void SetFrame(int frameIndex, Event e)
		{
		}

		[Token(Token = "0x6000C9B")]
		[Address(RVA = "0xA9A924", Offset = "0xA9A924", VA = "0xA9A924", Slot = "4")]
		public void Apply(Skeleton skeleton, float lastTime, float time, ExposedList<Event> firedEvents, float alpha, MixPose pose, MixDirection direction)
		{
		}
	}
	[Token(Token = "0x20001D4")]
	public class DrawOrderTimeline : Timeline
	{
		[Token(Token = "0x40009F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal float[] frames;

		[Token(Token = "0x40009F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private int[][] drawOrders;

		[Token(Token = "0x17000157")]
		public float[] Frames
		{
			[Token(Token = "0x6000C9C")]
			[Address(RVA = "0xA99E10", Offset = "0xA99E10", VA = "0xA99E10")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C9D")]
			[Address(RVA = "0xA99E18", Offset = "0xA99E18", VA = "0xA99E18")]
			set
			{
			}
		}

		[Token(Token = "0x17000158")]
		public int[][] DrawOrders
		{
			[Token(Token = "0x6000C9E")]
			[Address(RVA = "0xA99E20", Offset = "0xA99E20", VA = "0xA99E20")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C9F")]
			[Address(RVA = "0xA99E28", Offset = "0xA99E28", VA = "0xA99E28")]
			set
			{
			}
		}

		[Token(Token = "0x17000159")]
		public int FrameCount
		{
			[Token(Token = "0x6000CA0")]
			[Address(RVA = "0xA99E30", Offset = "0xA99E30", VA = "0xA99E30")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700015A")]
		public int PropertyId
		{
			[Token(Token = "0x6000CA1")]
			[Address(RVA = "0xA99E54", Offset = "0xA99E54", VA = "0xA99E54", Slot = "5")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000CA2")]
		[Address(RVA = "0xA99E5C", Offset = "0xA99E5C", VA = "0xA99E5C")]
		public DrawOrderTimeline(int frameCount)
		{
		}

		[Token(Token = "0x6000CA3")]
		[Address(RVA = "0xA99EF0", Offset = "0xA99EF0", VA = "0xA99EF0")]
		public void SetFrame(int frameIndex, float time, int[] drawOrder)
		{
		}

		[Token(Token = "0x6000CA4")]
		[Address(RVA = "0xA99FB8", Offset = "0xA99FB8", VA = "0xA99FB8", Slot = "4")]
		public void Apply(Skeleton skeleton, float lastTime, float time, ExposedList<Event> firedEvents, float alpha, MixPose pose, MixDirection direction)
		{
		}
	}
	[Token(Token = "0x20001D5")]
	public class IkConstraintTimeline : CurveTimeline
	{
		[Token(Token = "0x40009F3")]
		public const int ENTRIES = 3;

		[Token(Token = "0x40009F4")]
		private const int PREV_TIME = -3;

		[Token(Token = "0x40009F5")]
		private const int PREV_MIX = -2;

		[Token(Token = "0x40009F6")]
		private const int PREV_BEND_DIRECTION = -1;

		[Token(Token = "0x40009F7")]
		private const int MIX = 1;

		[Token(Token = "0x40009F8")]
		private const int BEND_DIRECTION = 2;

		[Token(Token = "0x40009F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal int ikConstraintIndex;

		[Token(Token = "0x40009FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal float[] frames;

		[Token(Token = "0x1700015B")]
		public int IkConstraintIndex
		{
			[Token(Token = "0x6000CA5")]
			[Address(RVA = "0xA9C118", Offset = "0xA9C118", VA = "0xA9C118")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000CA6")]
			[Address(RVA = "0xA9C120", Offset = "0xA9C120", VA = "0xA9C120")]
			set
			{
			}
		}

		[Token(Token = "0x1700015C")]
		public float[] Frames
		{
			[Token(Token = "0x6000CA7")]
			[Address(RVA = "0xA9C128", Offset = "0xA9C128", VA = "0xA9C128")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CA8")]
			[Address(RVA = "0xA9C130", Offset = "0xA9C130", VA = "0xA9C130")]
			set
			{
			}
		}

		[Token(Token = "0x1700015D")]
		public override int PropertyId
		{
			[Token(Token = "0x6000CA9")]
			[Address(RVA = "0xA9C138", Offset = "0xA9C138", VA = "0xA9C138", Slot = "7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000CAA")]
		[Address(RVA = "0xA9C144", Offset = "0xA9C144", VA = "0xA9C144")]
		public IkConstraintTimeline(int frameCount)
		{
		}

		[Token(Token = "0x6000CAB")]
		[Address(RVA = "0xA9C1BC", Offset = "0xA9C1BC", VA = "0xA9C1BC")]
		public void SetFrame(int frameIndex, float time, float mix, int bendDirection)
		{
		}

		[Token(Token = "0x6000CAC")]
		[Address(RVA = "0xA9C2A4", Offset = "0xA9C2A4", VA = "0xA9C2A4", Slot = "6")]
		public override void Apply(Skeleton skeleton, float lastTime, float time, ExposedList<Event> firedEvents, float alpha, MixPose pose, MixDirection direction)
		{
		}
	}
	[Token(Token = "0x20001D6")]
	public class TransformConstraintTimeline : CurveTimeline
	{
		[Token(Token = "0x40009FB")]
		public const int ENTRIES = 5;

		[Token(Token = "0x40009FC")]
		private const int PREV_TIME = -5;

		[Token(Token = "0x40009FD")]
		private const int PREV_ROTATE = -4;

		[Token(Token = "0x40009FE")]
		private const int PREV_TRANSLATE = -3;

		[Token(Token = "0x40009FF")]
		private const int PREV_SCALE = -2;

		[Token(Token = "0x4000A00")]
		private const int PREV_SHEAR = -1;

		[Token(Token = "0x4000A01")]
		private const int ROTATE = 1;

		[Token(Token = "0x4000A02")]
		private const int TRANSLATE = 2;

		[Token(Token = "0x4000A03")]
		private const int SCALE = 3;

		[Token(Token = "0x4000A04")]
		private const int SHEAR = 4;

		[Token(Token = "0x4000A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal int transformConstraintIndex;

		[Token(Token = "0x4000A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal float[] frames;

		[Token(Token = "0x1700015E")]
		public int TransformConstraintIndex
		{
			[Token(Token = "0x6000CAD")]
			[Address(RVA = "0xF5FBE8", Offset = "0xF5FBE8", VA = "0xF5FBE8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000CAE")]
			[Address(RVA = "0xF5FBF0", Offset = "0xF5FBF0", VA = "0xF5FBF0")]
			set
			{
			}
		}

		[Token(Token = "0x1700015F")]
		public float[] Frames
		{
			[Token(Token = "0x6000CAF")]
			[Address(RVA = "0xF5FBF8", Offset = "0xF5FBF8", VA = "0xF5FBF8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CB0")]
			[Address(RVA = "0xF5FC00", Offset = "0xF5FC00", VA = "0xF5FC00")]
			set
			{
			}
		}

		[Token(Token = "0x17000160")]
		public override int PropertyId
		{
			[Token(Token = "0x6000CB1")]
			[Address(RVA = "0xF5FC08", Offset = "0xF5FC08", VA = "0xF5FC08", Slot = "7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000CB2")]
		[Address(RVA = "0xF46700", Offset = "0xF46700", VA = "0xF46700")]
		public TransformConstraintTimeline(int frameCount)
		{
		}

		[Token(Token = "0x6000CB3")]
		[Address(RVA = "0xF4677C", Offset = "0xF4677C", VA = "0xF4677C")]
		public void SetFrame(int frameIndex, float time, float rotateMix, float translateMix, float scaleMix, float shearMix)
		{
		}

		[Token(Token = "0x6000CB4")]
		[Address(RVA = "0xF5FC14", Offset = "0xF5FC14", VA = "0xF5FC14", Slot = "6")]
		public override void Apply(Skeleton skeleton, float lastTime, float time, ExposedList<Event> firedEvents, float alpha, MixPose pose, MixDirection direction)
		{
		}
	}
	[Token(Token = "0x20001D7")]
	public class PathConstraintPositionTimeline : CurveTimeline
	{
		[Token(Token = "0x4000A07")]
		public const int ENTRIES = 2;

		[Token(Token = "0x4000A08")]
		protected const int PREV_TIME = -2;

		[Token(Token = "0x4000A09")]
		protected const int PREV_VALUE = -1;

		[Token(Token = "0x4000A0A")]
		protected const int VALUE = 1;

		[Token(Token = "0x4000A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal int pathConstraintIndex;

		[Token(Token = "0x4000A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal float[] frames;

		[Token(Token = "0x17000161")]
		public override int PropertyId
		{
			[Token(Token = "0x6000CB5")]
			[Address(RVA = "0xAA05A4", Offset = "0xAA05A4", VA = "0xAA05A4", Slot = "7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000162")]
		public int PathConstraintIndex
		{
			[Token(Token = "0x6000CB7")]
			[Address(RVA = "0xAA0628", Offset = "0xAA0628", VA = "0xAA0628")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000CB8")]
			[Address(RVA = "0xAA0630", Offset = "0xAA0630", VA = "0xAA0630")]
			set
			{
			}
		}

		[Token(Token = "0x17000163")]
		public float[] Frames
		{
			[Token(Token = "0x6000CB9")]
			[Address(RVA = "0xAA0638", Offset = "0xAA0638", VA = "0xAA0638")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CBA")]
			[Address(RVA = "0xAA0640", Offset = "0xAA0640", VA = "0xAA0640")]
			set
			{
			}
		}

		[Token(Token = "0x6000CB6")]
		[Address(RVA = "0xAA05B0", Offset = "0xAA05B0", VA = "0xAA05B0")]
		public PathConstraintPositionTimeline(int frameCount)
		{
		}

		[Token(Token = "0x6000CBB")]
		[Address(RVA = "0xAA0648", Offset = "0xAA0648", VA = "0xAA0648")]
		public void SetFrame(int frameIndex, float time, float value)
		{
		}

		[Token(Token = "0x6000CBC")]
		[Address(RVA = "0xAA06E8", Offset = "0xAA06E8", VA = "0xAA06E8", Slot = "6")]
		public override void Apply(Skeleton skeleton, float lastTime, float time, ExposedList<Event> firedEvents, float alpha, MixPose pose, MixDirection direction)
		{
		}
	}
	[Token(Token = "0x20001D8")]
	public class PathConstraintSpacingTimeline : PathConstraintPositionTimeline
	{
		[Token(Token = "0x17000164")]
		public override int PropertyId
		{
			[Token(Token = "0x6000CBD")]
			[Address(RVA = "0xAA0A30", Offset = "0xAA0A30", VA = "0xAA0A30", Slot = "7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000CBE")]
		[Address(RVA = "0xAA0A3C", Offset = "0xAA0A3C", VA = "0xAA0A3C")]
		public PathConstraintSpacingTimeline(int frameCount)
		{
		}

		[Token(Token = "0x6000CBF")]
		[Address(RVA = "0xAA0A40", Offset = "0xAA0A40", VA = "0xAA0A40", Slot = "6")]
		public override void Apply(Skeleton skeleton, float lastTime, float time, ExposedList<Event> firedEvents, float alpha, MixPose pose, MixDirection direction)
		{
		}
	}
	[Token(Token = "0x20001D9")]
	public class PathConstraintMixTimeline : CurveTimeline
	{
		[Token(Token = "0x4000A0D")]
		public const int ENTRIES = 3;

		[Token(Token = "0x4000A0E")]
		private const int PREV_TIME = -3;

		[Token(Token = "0x4000A0F")]
		private const int PREV_ROTATE = -2;

		[Token(Token = "0x4000A10")]
		private const int PREV_TRANSLATE = -1;

		[Token(Token = "0x4000A11")]
		private const int ROTATE = 1;

		[Token(Token = "0x4000A12")]
		private const int TRANSLATE = 2;

		[Token(Token = "0x4000A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal int pathConstraintIndex;

		[Token(Token = "0x4000A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal float[] frames;

		[Token(Token = "0x17000165")]
		public int PathConstraintIndex
		{
			[Token(Token = "0x6000CC0")]
			[Address(RVA = "0xA9FF5C", Offset = "0xA9FF5C", VA = "0xA9FF5C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000CC1")]
			[Address(RVA = "0xA9FF64", Offset = "0xA9FF64", VA = "0xA9FF64")]
			set
			{
			}
		}

		[Token(Token = "0x17000166")]
		public float[] Frames
		{
			[Token(Token = "0x6000CC2")]
			[Address(RVA = "0xA9FF6C", Offset = "0xA9FF6C", VA = "0xA9FF6C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CC3")]
			[Address(RVA = "0xA9FF74", Offset = "0xA9FF74", VA = "0xA9FF74")]
			set
			{
			}
		}

		[Token(Token = "0x17000167")]
		public override int PropertyId
		{
			[Token(Token = "0x6000CC4")]
			[Address(RVA = "0xA9FF7C", Offset = "0xA9FF7C", VA = "0xA9FF7C", Slot = "7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000CC5")]
		[Address(RVA = "0xA9FF88", Offset = "0xA9FF88", VA = "0xA9FF88")]
		public PathConstraintMixTimeline(int frameCount)
		{
		}

		[Token(Token = "0x6000CC6")]
		[Address(RVA = "0xAA0000", Offset = "0xAA0000", VA = "0xAA0000")]
		public void SetFrame(int frameIndex, float time, float rotateMix, float translateMix)
		{
		}

		[Token(Token = "0x6000CC7")]
		[Address(RVA = "0xAA00E0", Offset = "0xAA00E0", VA = "0xAA00E0", Slot = "6")]
		public override void Apply(Skeleton skeleton, float lastTime, float time, ExposedList<Event> firedEvents, float alpha, MixPose pose, MixDirection direction)
		{
		}
	}
	[Token(Token = "0x20001DA")]
	public class AnimationState
	{
		[Token(Token = "0x2000555")]
		public delegate void TrackEntryDelegate(TrackEntry trackEntry);

		[Token(Token = "0x2000556")]
		public delegate void TrackEntryEventDelegate(TrackEntry trackEntry, Event e);

		[Token(Token = "0x4000A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Animation EmptyAnimation;

		[Token(Token = "0x4000A16")]
		internal const int Subsequent = 0;

		[Token(Token = "0x4000A17")]
		internal const int First = 1;

		[Token(Token = "0x4000A18")]
		internal const int Dip = 2;

		[Token(Token = "0x4000A19")]
		internal const int DipMix = 3;

		[Token(Token = "0x4000A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private AnimationStateData data;

		[Token(Token = "0x4000A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private Pool<TrackEntry> trackEntryPool;

		[Token(Token = "0x4000A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ExposedList<TrackEntry> tracks;

		[Token(Token = "0x4000A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private readonly ExposedList<Event> events;

		[Token(Token = "0x4000A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly EventQueue queue;

		[Token(Token = "0x4000A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private readonly HashSet<int> propertyIDs;

		[Token(Token = "0x4000A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ExposedList<TrackEntry> mixingTo;

		[Token(Token = "0x4000A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool animationsChanged;

		[Token(Token = "0x4000A22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float timeScale;

		[Token(Token = "0x17000168")]
		public AnimationStateData Data
		{
			[Token(Token = "0x6000CC8")]
			[Address(RVA = "0xA8E24C", Offset = "0xA8E24C", VA = "0xA8E24C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000169")]
		public ExposedList<TrackEntry> Tracks
		{
			[Token(Token = "0x6000CC9")]
			[Address(RVA = "0xA8E254", Offset = "0xA8E254", VA = "0xA8E254")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016A")]
		public float TimeScale
		{
			[Token(Token = "0x6000CCA")]
			[Address(RVA = "0xA8E25C", Offset = "0xA8E25C", VA = "0xA8E25C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000CCB")]
			[Address(RVA = "0xA8E264", Offset = "0xA8E264", VA = "0xA8E264")]
			set
			{
			}
		}

		[Token(Token = "0x14000036")]
		public event TrackEntryDelegate Start
		{
			[Token(Token = "0x6000CCC")]
			[Address(RVA = "0xA8E26C", Offset = "0xA8E26C", VA = "0xA8E26C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAD44", Offset = "0x2FAD44")]
			add
			{
			}
			[Token(Token = "0x6000CCD")]
			[Address(RVA = "0xA8E324", Offset = "0xA8E324", VA = "0xA8E324")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAD54", Offset = "0x2FAD54")]
			remove
			{
			}
		}

		[Token(Token = "0x14000037")]
		public event TrackEntryDelegate Interrupt
		{
			[Token(Token = "0x6000CCE")]
			[Address(RVA = "0xA8E3DC", Offset = "0xA8E3DC", VA = "0xA8E3DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAD64", Offset = "0x2FAD64")]
			add
			{
			}
			[Token(Token = "0x6000CCF")]
			[Address(RVA = "0xA8E494", Offset = "0xA8E494", VA = "0xA8E494")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAD74", Offset = "0x2FAD74")]
			remove
			{
			}
		}

		[Token(Token = "0x14000038")]
		public event TrackEntryDelegate End
		{
			[Token(Token = "0x6000CD0")]
			[Address(RVA = "0xA8E54C", Offset = "0xA8E54C", VA = "0xA8E54C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAD84", Offset = "0x2FAD84")]
			add
			{
			}
			[Token(Token = "0x6000CD1")]
			[Address(RVA = "0xA8E604", Offset = "0xA8E604", VA = "0xA8E604")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAD94", Offset = "0x2FAD94")]
			remove
			{
			}
		}

		[Token(Token = "0x14000039")]
		public event TrackEntryDelegate Dispose
		{
			[Token(Token = "0x6000CD2")]
			[Address(RVA = "0xA8E6BC", Offset = "0xA8E6BC", VA = "0xA8E6BC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FADA4", Offset = "0x2FADA4")]
			add
			{
			}
			[Token(Token = "0x6000CD3")]
			[Address(RVA = "0xA8E774", Offset = "0xA8E774", VA = "0xA8E774")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FADB4", Offset = "0x2FADB4")]
			remove
			{
			}
		}

		[Token(Token = "0x1400003A")]
		public event TrackEntryDelegate Complete
		{
			[Token(Token = "0x6000CD4")]
			[Address(RVA = "0xA8E82C", Offset = "0xA8E82C", VA = "0xA8E82C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FADC4", Offset = "0x2FADC4")]
			add
			{
			}
			[Token(Token = "0x6000CD5")]
			[Address(RVA = "0xA8E8E4", Offset = "0xA8E8E4", VA = "0xA8E8E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FADD4", Offset = "0x2FADD4")]
			remove
			{
			}
		}

		[Token(Token = "0x1400003B")]
		public event TrackEntryEventDelegate Event
		{
			[Token(Token = "0x6000CD6")]
			[Address(RVA = "0xA8E99C", Offset = "0xA8E99C", VA = "0xA8E99C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FADE4", Offset = "0x2FADE4")]
			add
			{
			}
			[Token(Token = "0x6000CD7")]
			[Address(RVA = "0xA8EA54", Offset = "0xA8EA54", VA = "0xA8EA54")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FADF4", Offset = "0x2FADF4")]
			remove
			{
			}
		}

		[Token(Token = "0x6000CD8")]
		[Address(RVA = "0xA8EB0C", Offset = "0xA8EB0C", VA = "0xA8EB0C")]
		public AnimationState(AnimationStateData data)
		{
		}

		[Token(Token = "0x6000CD9")]
		[Address(RVA = "0xA8EDF0", Offset = "0xA8EDF0", VA = "0xA8EDF0")]
		public void Update(float delta)
		{
		}

		[Token(Token = "0x6000CDA")]
		[Address(RVA = "0xA8F3D0", Offset = "0xA8F3D0", VA = "0xA8F3D0")]
		private bool UpdateMixingFrom(TrackEntry to, float delta)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CDB")]
		[Address(RVA = "0xA8F7B4", Offset = "0xA8F7B4", VA = "0xA8F7B4")]
		public bool Apply(Skeleton skeleton)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CDC")]
		[Address(RVA = "0xA8FFF8", Offset = "0xA8FFF8", VA = "0xA8FFF8")]
		private float ApplyMixingFrom(TrackEntry to, Skeleton skeleton, MixPose currentPose)
		{
			return default(float);
		}

		[Token(Token = "0x6000CDD")]
		[Address(RVA = "0xA906F8", Offset = "0xA906F8", VA = "0xA906F8")]
		private static void ApplyRotateTimeline(RotateTimeline rotateTimeline, Skeleton skeleton, float time, float alpha, MixPose pose, float[] timelinesRotation, int i, bool firstFrame)
		{
		}

		[Token(Token = "0x6000CDE")]
		[Address(RVA = "0xA90EC8", Offset = "0xA90EC8", VA = "0xA90EC8")]
		private void QueueEvents(TrackEntry entry, float animationTime)
		{
		}

		[Token(Token = "0x6000CDF")]
		[Address(RVA = "0xA914E0", Offset = "0xA914E0", VA = "0xA914E0")]
		public void ClearTracks()
		{
		}

		[Token(Token = "0x6000CE0")]
		[Address(RVA = "0xA91608", Offset = "0xA91608", VA = "0xA91608")]
		public void ClearTrack(int trackIndex)
		{
		}

		[Token(Token = "0x6000CE1")]
		[Address(RVA = "0xA8F0A4", Offset = "0xA8F0A4", VA = "0xA8F0A4")]
		private void SetCurrent(int index, TrackEntry current, bool interrupt)
		{
		}

		[Token(Token = "0x6000CE2")]
		[Address(RVA = "0xA919D4", Offset = "0xA919D4", VA = "0xA919D4")]
		public TrackEntry SetAnimation(int trackIndex, string animationName, bool loop)
		{
			return null;
		}

		[Token(Token = "0x6000CE3")]
		[Address(RVA = "0xA91B04", Offset = "0xA91B04", VA = "0xA91B04")]
		public TrackEntry SetAnimation(int trackIndex, Animation animation, bool loop)
		{
			return null;
		}

		[Token(Token = "0x6000CE4")]
		[Address(RVA = "0xA91F1C", Offset = "0xA91F1C", VA = "0xA91F1C")]
		public TrackEntry AddAnimation(int trackIndex, string animationName, bool loop, float delay)
		{
			return null;
		}

		[Token(Token = "0x6000CE5")]
		[Address(RVA = "0xA92054", Offset = "0xA92054", VA = "0xA92054")]
		public TrackEntry AddAnimation(int trackIndex, Animation animation, bool loop, float delay)
		{
			return null;
		}

		[Token(Token = "0x6000CE6")]
		[Address(RVA = "0xA923E0", Offset = "0xA923E0", VA = "0xA923E0")]
		public TrackEntry SetEmptyAnimation(int trackIndex, float mixDuration)
		{
			return null;
		}

		[Token(Token = "0x6000CE7")]
		[Address(RVA = "0xA924D0", Offset = "0xA924D0", VA = "0xA924D0")]
		public TrackEntry AddEmptyAnimation(int trackIndex, float mixDuration, float delay)
		{
			return null;
		}

		[Token(Token = "0x6000CE8")]
		[Address(RVA = "0xA925D4", Offset = "0xA925D4", VA = "0xA925D4")]
		public void SetEmptyAnimations(float mixDuration)
		{
		}

		[Token(Token = "0x6000CE9")]
		[Address(RVA = "0xA91778", Offset = "0xA91778", VA = "0xA91778")]
		private TrackEntry ExpandToIndex(int index)
		{
			return null;
		}

		[Token(Token = "0x6000CEA")]
		[Address(RVA = "0xA91D40", Offset = "0xA91D40", VA = "0xA91D40")]
		private TrackEntry NewTrackEntry(int trackIndex, Animation animation, bool loop, TrackEntry last)
		{
			return null;
		}

		[Token(Token = "0x6000CEB")]
		[Address(RVA = "0xA8F360", Offset = "0xA8F360", VA = "0xA8F360")]
		private void DisposeNext(TrackEntry entry)
		{
		}

		[Token(Token = "0x6000CEC")]
		[Address(RVA = "0xA8FEC8", Offset = "0xA8FEC8", VA = "0xA8FEC8")]
		private void AnimationsChanged()
		{
		}

		[Token(Token = "0x6000CED")]
		[Address(RVA = "0xA92780", Offset = "0xA92780", VA = "0xA92780")]
		public TrackEntry GetCurrent(int trackIndex)
		{
			return null;
		}

		[Token(Token = "0x6000CEE")]
		[Address(RVA = "0xA92804", Offset = "0xA92804", VA = "0xA92804", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000CEF")]
		[Address(RVA = "0xA929D8", Offset = "0xA929D8", VA = "0xA929D8")]
		internal void OnStart(TrackEntry entry)
		{
		}

		[Token(Token = "0x6000CF0")]
		[Address(RVA = "0xA92DE8", Offset = "0xA92DE8", VA = "0xA92DE8")]
		internal void OnInterrupt(TrackEntry entry)
		{
		}

		[Token(Token = "0x6000CF1")]
		[Address(RVA = "0xA92DF8", Offset = "0xA92DF8", VA = "0xA92DF8")]
		internal void OnEnd(TrackEntry entry)
		{
		}

		[Token(Token = "0x6000CF2")]
		[Address(RVA = "0xA92E08", Offset = "0xA92E08", VA = "0xA92E08")]
		internal void OnDispose(TrackEntry entry)
		{
		}

		[Token(Token = "0x6000CF3")]
		[Address(RVA = "0xA92E18", Offset = "0xA92E18", VA = "0xA92E18")]
		internal void OnComplete(TrackEntry entry)
		{
		}

		[Token(Token = "0x6000CF4")]
		[Address(RVA = "0xA92E28", Offset = "0xA92E28", VA = "0xA92E28")]
		internal void OnEvent(TrackEntry entry, Event e)
		{
		}

		[Token(Token = "0x6000CF6")]
		[Address(RVA = "0xA93320", Offset = "0xA93320", VA = "0xA93320")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAE04", Offset = "0x2FAE04")]
		private void <.ctor>b__41_0()
		{
		}
	}
	[Token(Token = "0x20001DB")]
	public class TrackEntry : Pool<TrackEntry>.IPoolable
	{
		[Token(Token = "0x4000A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal Animation animation;

		[Token(Token = "0x4000A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal TrackEntry next;

		[Token(Token = "0x4000A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal TrackEntry mixingFrom;

		[Token(Token = "0x4000A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal int trackIndex;

		[Token(Token = "0x4000A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal bool loop;

		[Token(Token = "0x4000A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal float eventThreshold;

		[Token(Token = "0x4000A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal float attachmentThreshold;

		[Token(Token = "0x4000A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal float drawOrderThreshold;

		[Token(Token = "0x4000A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal float animationStart;

		[Token(Token = "0x4000A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal float animationEnd;

		[Token(Token = "0x4000A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal float animationLast;

		[Token(Token = "0x4000A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal float nextAnimationLast;

		[Token(Token = "0x4000A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal float delay;

		[Token(Token = "0x4000A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		internal float trackTime;

		[Token(Token = "0x4000A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal float trackLast;

		[Token(Token = "0x4000A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		internal float nextTrackLast;

		[Token(Token = "0x4000A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal float trackEnd;

		[Token(Token = "0x4000A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		internal float timeScale;

		[Token(Token = "0x4000A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal float alpha;

		[Token(Token = "0x4000A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		internal float mixTime;

		[Token(Token = "0x4000A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal float mixDuration;

		[Token(Token = "0x4000A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		internal float interruptAlpha;

		[Token(Token = "0x4000A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal float totalAlpha;

		[Token(Token = "0x4000A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		internal readonly ExposedList<int> timelineData;

		[Token(Token = "0x4000A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal readonly ExposedList<TrackEntry> timelineDipMix;

		[Token(Token = "0x4000A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		internal readonly ExposedList<float> timelinesRotation;

		[Token(Token = "0x1700016B")]
		public int TrackIndex
		{
			[Token(Token = "0x6000CFA")]
			[Address(RVA = "0xF5D084", Offset = "0xF5D084", VA = "0xF5D084")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700016C")]
		public Animation Animation
		{
			[Token(Token = "0x6000CFB")]
			[Address(RVA = "0xF5D08C", Offset = "0xF5D08C", VA = "0xF5D08C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016D")]
		public bool Loop
		{
			[Token(Token = "0x6000CFC")]
			[Address(RVA = "0xF5D094", Offset = "0xF5D094", VA = "0xF5D094")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CFD")]
			[Address(RVA = "0xF5D09C", Offset = "0xF5D09C", VA = "0xF5D09C")]
			set
			{
			}
		}

		[Token(Token = "0x1700016E")]
		public float Delay
		{
			[Token(Token = "0x6000CFE")]
			[Address(RVA = "0xF5D0A4", Offset = "0xF5D0A4", VA = "0xF5D0A4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000CFF")]
			[Address(RVA = "0xF5D0AC", Offset = "0xF5D0AC", VA = "0xF5D0AC")]
			set
			{
			}
		}

		[Token(Token = "0x1700016F")]
		public float TrackTime
		{
			[Token(Token = "0x6000D00")]
			[Address(RVA = "0xF5D0B4", Offset = "0xF5D0B4", VA = "0xF5D0B4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D01")]
			[Address(RVA = "0xF5D0BC", Offset = "0xF5D0BC", VA = "0xF5D0BC")]
			set
			{
			}
		}

		[Token(Token = "0x17000170")]
		public float TrackEnd
		{
			[Token(Token = "0x6000D02")]
			[Address(RVA = "0xF5D0C4", Offset = "0xF5D0C4", VA = "0xF5D0C4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D03")]
			[Address(RVA = "0xF5D0CC", Offset = "0xF5D0CC", VA = "0xF5D0CC")]
			set
			{
			}
		}

		[Token(Token = "0x17000171")]
		public float AnimationStart
		{
			[Token(Token = "0x6000D04")]
			[Address(RVA = "0xF5D0D4", Offset = "0xF5D0D4", VA = "0xF5D0D4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D05")]
			[Address(RVA = "0xF5D0DC", Offset = "0xF5D0DC", VA = "0xF5D0DC")]
			set
			{
			}
		}

		[Token(Token = "0x17000172")]
		public float AnimationEnd
		{
			[Token(Token = "0x6000D06")]
			[Address(RVA = "0xF5D0E4", Offset = "0xF5D0E4", VA = "0xF5D0E4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D07")]
			[Address(RVA = "0xF5D0EC", Offset = "0xF5D0EC", VA = "0xF5D0EC")]
			set
			{
			}
		}

		[Token(Token = "0x17000173")]
		public float AnimationLast
		{
			[Token(Token = "0x6000D08")]
			[Address(RVA = "0xF5D0F4", Offset = "0xF5D0F4", VA = "0xF5D0F4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D09")]
			[Address(RVA = "0xF5D0FC", Offset = "0xF5D0FC", VA = "0xF5D0FC")]
			set
			{
			}
		}

		[Token(Token = "0x17000174")]
		public float AnimationTime
		{
			[Token(Token = "0x6000D0A")]
			[Address(RVA = "0xF5D108", Offset = "0xF5D108", VA = "0xF5D108")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000175")]
		public float TimeScale
		{
			[Token(Token = "0x6000D0B")]
			[Address(RVA = "0xF5D1EC", Offset = "0xF5D1EC", VA = "0xF5D1EC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D0C")]
			[Address(RVA = "0xF5D1F4", Offset = "0xF5D1F4", VA = "0xF5D1F4")]
			set
			{
			}
		}

		[Token(Token = "0x17000176")]
		public float Alpha
		{
			[Token(Token = "0x6000D0D")]
			[Address(RVA = "0xF5D1FC", Offset = "0xF5D1FC", VA = "0xF5D1FC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D0E")]
			[Address(RVA = "0xF5D204", Offset = "0xF5D204", VA = "0xF5D204")]
			set
			{
			}
		}

		[Token(Token = "0x17000177")]
		public float EventThreshold
		{
			[Token(Token = "0x6000D0F")]
			[Address(RVA = "0xF5D20C", Offset = "0xF5D20C", VA = "0xF5D20C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D10")]
			[Address(RVA = "0xF5D214", Offset = "0xF5D214", VA = "0xF5D214")]
			set
			{
			}
		}

		[Token(Token = "0x17000178")]
		public float AttachmentThreshold
		{
			[Token(Token = "0x6000D11")]
			[Address(RVA = "0xF5D21C", Offset = "0xF5D21C", VA = "0xF5D21C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D12")]
			[Address(RVA = "0xF5D224", Offset = "0xF5D224", VA = "0xF5D224")]
			set
			{
			}
		}

		[Token(Token = "0x17000179")]
		public float DrawOrderThreshold
		{
			[Token(Token = "0x6000D13")]
			[Address(RVA = "0xF5D22C", Offset = "0xF5D22C", VA = "0xF5D22C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D14")]
			[Address(RVA = "0xF5D234", Offset = "0xF5D234", VA = "0xF5D234")]
			set
			{
			}
		}

		[Token(Token = "0x1700017A")]
		public TrackEntry Next
		{
			[Token(Token = "0x6000D15")]
			[Address(RVA = "0xF5D23C", Offset = "0xF5D23C", VA = "0xF5D23C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700017B")]
		public bool IsComplete
		{
			[Token(Token = "0x6000D16")]
			[Address(RVA = "0xF5D244", Offset = "0xF5D244", VA = "0xF5D244")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700017C")]
		public float MixTime
		{
			[Token(Token = "0x6000D17")]
			[Address(RVA = "0xF5D268", Offset = "0xF5D268", VA = "0xF5D268")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D18")]
			[Address(RVA = "0xF5D270", Offset = "0xF5D270", VA = "0xF5D270")]
			set
			{
			}
		}

		[Token(Token = "0x1700017D")]
		public float MixDuration
		{
			[Token(Token = "0x6000D19")]
			[Address(RVA = "0xF5D278", Offset = "0xF5D278", VA = "0xF5D278")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D1A")]
			[Address(RVA = "0xF5D280", Offset = "0xF5D280", VA = "0xF5D280")]
			set
			{
			}
		}

		[Token(Token = "0x1700017E")]
		public TrackEntry MixingFrom
		{
			[Token(Token = "0x6000D1B")]
			[Address(RVA = "0xF5D288", Offset = "0xF5D288", VA = "0xF5D288")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1400003C")]
		public event AnimationState.TrackEntryDelegate Start
		{
			[Token(Token = "0x6000D1C")]
			[Address(RVA = "0xF5D290", Offset = "0xF5D290", VA = "0xF5D290")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAE14", Offset = "0x2FAE14")]
			add
			{
			}
			[Token(Token = "0x6000D1D")]
			[Address(RVA = "0xF5D348", Offset = "0xF5D348", VA = "0xF5D348")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAE24", Offset = "0x2FAE24")]
			remove
			{
			}
		}

		[Token(Token = "0x1400003D")]
		public event AnimationState.TrackEntryDelegate Interrupt
		{
			[Token(Token = "0x6000D1E")]
			[Address(RVA = "0xF5D400", Offset = "0xF5D400", VA = "0xF5D400")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAE34", Offset = "0x2FAE34")]
			add
			{
			}
			[Token(Token = "0x6000D1F")]
			[Address(RVA = "0xF5D4B8", Offset = "0xF5D4B8", VA = "0xF5D4B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAE44", Offset = "0x2FAE44")]
			remove
			{
			}
		}

		[Token(Token = "0x1400003E")]
		public event AnimationState.TrackEntryDelegate End
		{
			[Token(Token = "0x6000D20")]
			[Address(RVA = "0xF5D570", Offset = "0xF5D570", VA = "0xF5D570")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAE54", Offset = "0x2FAE54")]
			add
			{
			}
			[Token(Token = "0x6000D21")]
			[Address(RVA = "0xF5D628", Offset = "0xF5D628", VA = "0xF5D628")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAE64", Offset = "0x2FAE64")]
			remove
			{
			}
		}

		[Token(Token = "0x1400003F")]
		public event AnimationState.TrackEntryDelegate Dispose
		{
			[Token(Token = "0x6000D22")]
			[Address(RVA = "0xF5D6E0", Offset = "0xF5D6E0", VA = "0xF5D6E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAE74", Offset = "0x2FAE74")]
			add
			{
			}
			[Token(Token = "0x6000D23")]
			[Address(RVA = "0xF5D798", Offset = "0xF5D798", VA = "0xF5D798")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAE84", Offset = "0x2FAE84")]
			remove
			{
			}
		}

		[Token(Token = "0x14000040")]
		public event AnimationState.TrackEntryDelegate Complete
		{
			[Token(Token = "0x6000D24")]
			[Address(RVA = "0xF5D850", Offset = "0xF5D850", VA = "0xF5D850")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAE94", Offset = "0x2FAE94")]
			add
			{
			}
			[Token(Token = "0x6000D25")]
			[Address(RVA = "0xF5D908", Offset = "0xF5D908", VA = "0xF5D908")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAEA4", Offset = "0x2FAEA4")]
			remove
			{
			}
		}

		[Token(Token = "0x14000041")]
		public event AnimationState.TrackEntryEventDelegate Event
		{
			[Token(Token = "0x6000D26")]
			[Address(RVA = "0xF5D9C0", Offset = "0xF5D9C0", VA = "0xF5D9C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAEB4", Offset = "0x2FAEB4")]
			add
			{
			}
			[Token(Token = "0x6000D27")]
			[Address(RVA = "0xF5DA78", Offset = "0xF5DA78", VA = "0xF5DA78")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAEC4", Offset = "0x2FAEC4")]
			remove
			{
			}
		}

		[Token(Token = "0x6000CF7")]
		[Address(RVA = "0xF5C86C", Offset = "0xF5C86C", VA = "0xF5C86C", Slot = "4")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000CF8")]
		[Address(RVA = "0xF5C970", Offset = "0xF5C970", VA = "0xF5C970")]
		internal TrackEntry SetTimelineData(TrackEntry to, ExposedList<TrackEntry> mixingToArray, HashSet<int> propertyIDs)
		{
			return null;
		}

		[Token(Token = "0x6000CF9")]
		[Address(RVA = "0xF5CEEC", Offset = "0xF5CEEC", VA = "0xF5CEEC")]
		private bool HasTimeline(int id)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D28")]
		[Address(RVA = "0xF5DB30", Offset = "0xF5DB30", VA = "0xF5DB30")]
		internal void OnStart()
		{
		}

		[Token(Token = "0x6000D29")]
		[Address(RVA = "0xF5DB48", Offset = "0xF5DB48", VA = "0xF5DB48")]
		internal void OnInterrupt()
		{
		}

		[Token(Token = "0x6000D2A")]
		[Address(RVA = "0xF5DB60", Offset = "0xF5DB60", VA = "0xF5DB60")]
		internal void OnEnd()
		{
		}

		[Token(Token = "0x6000D2B")]
		[Address(RVA = "0xF5DB78", Offset = "0xF5DB78", VA = "0xF5DB78")]
		internal void OnDispose()
		{
		}

		[Token(Token = "0x6000D2C")]
		[Address(RVA = "0xF5DB90", Offset = "0xF5DB90", VA = "0xF5DB90")]
		internal void OnComplete()
		{
		}

		[Token(Token = "0x6000D2D")]
		[Address(RVA = "0xF5DBA8", Offset = "0xF5DBA8", VA = "0xF5DBA8")]
		internal void OnEvent(Event e)
		{
		}

		[Token(Token = "0x6000D2E")]
		[Address(RVA = "0xF5DBC4", Offset = "0xF5DBC4", VA = "0xF5DBC4")]
		public void ResetRotationDirections()
		{
		}

		[Token(Token = "0x6000D2F")]
		[Address(RVA = "0xF5DC40", Offset = "0xF5DC40", VA = "0xF5DC40", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000D30")]
		[Address(RVA = "0xF5DCA8", Offset = "0xF5DCA8", VA = "0xF5DCA8")]
		public TrackEntry()
		{
		}
	}
	[Token(Token = "0x20001DC")]
	internal class EventQueue
	{
		[Token(Token = "0x2000557")]
		private struct EventQueueEntry
		{
			[Token(Token = "0x4001EF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public EventType type;

			[Token(Token = "0x4001EF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public TrackEntry entry;

			[Token(Token = "0x4001EF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Event e;

			[Token(Token = "0x6001D8F")]
			[Address(RVA = "0x3B0DDC", Offset = "0x3B0DDC", VA = "0x3B0DDC")]
			public EventQueueEntry(EventType eventType, TrackEntry trackEntry, [Optional] Event e)
			{
			}
		}

		[Token(Token = "0x2000558")]
		private enum EventType
		{
			[Token(Token = "0x4001EF8")]
			Start,
			[Token(Token = "0x4001EF9")]
			Interrupt,
			[Token(Token = "0x4001EFA")]
			End,
			[Token(Token = "0x4001EFB")]
			Dispose,
			[Token(Token = "0x4001EFC")]
			Complete,
			[Token(Token = "0x4001EFD")]
			Event
		}

		[Token(Token = "0x4000A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private readonly List<EventQueueEntry> eventQueueEntries;

		[Token(Token = "0x4000A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal bool drainDisabled;

		[Token(Token = "0x4000A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly AnimationState state;

		[Token(Token = "0x4000A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private readonly Pool<TrackEntry> trackEntryPool;

		[Token(Token = "0x14000042")]
		internal event Action AnimationsChanged
		{
			[Token(Token = "0x6000D31")]
			[Address(RVA = "0xA9A590", Offset = "0xA9A590", VA = "0xA9A590")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAED4", Offset = "0x2FAED4")]
			add
			{
			}
			[Token(Token = "0x6000D32")]
			[Address(RVA = "0xA9A648", Offset = "0xA9A648", VA = "0xA9A648")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAEE4", Offset = "0x2FAEE4")]
			remove
			{
			}
		}

		[Token(Token = "0x6000D33")]
		[Address(RVA = "0xA8ED44", Offset = "0xA8ED44", VA = "0xA8ED44")]
		internal EventQueue(AnimationState state, Action HandleAnimationsChanged, Pool<TrackEntry> trackEntryPool)
		{
		}

		[Token(Token = "0x6000D34")]
		[Address(RVA = "0xA91924", Offset = "0xA91924", VA = "0xA91924")]
		internal void Start(TrackEntry entry)
		{
		}

		[Token(Token = "0x6000D35")]
		[Address(RVA = "0xA91890", Offset = "0xA91890", VA = "0xA91890")]
		internal void Interrupt(TrackEntry entry)
		{
		}

		[Token(Token = "0x6000D36")]
		[Address(RVA = "0xA8F2B0", Offset = "0xA8F2B0", VA = "0xA8F2B0")]
		internal void End(TrackEntry entry)
		{
		}

		[Token(Token = "0x6000D37")]
		[Address(RVA = "0xA926EC", Offset = "0xA926EC", VA = "0xA926EC")]
		internal void Dispose(TrackEntry entry)
		{
		}

		[Token(Token = "0x6000D38")]
		[Address(RVA = "0xA9144C", Offset = "0xA9144C", VA = "0xA9144C")]
		internal void Complete(TrackEntry entry)
		{
		}

		[Token(Token = "0x6000D39")]
		[Address(RVA = "0xA913B4", Offset = "0xA913B4", VA = "0xA913B4")]
		internal void Event(TrackEntry entry, Event e)
		{
		}

		[Token(Token = "0x6000D3A")]
		[Address(RVA = "0xA8F4E8", Offset = "0xA8F4E8", VA = "0xA8F4E8")]
		internal void Drain()
		{
		}

		[Token(Token = "0x6000D3B")]
		[Address(RVA = "0xA9A708", Offset = "0xA9A708", VA = "0xA9A708")]
		internal void Clear()
		{
		}
	}
	[Token(Token = "0x20001DD")]
	public class Pool<T> where T : class, new()
	{
		[Token(Token = "0x2000559")]
		public interface IPoolable
		{
			[Token(Token = "0x6001D90")]
			void Reset();
		}

		[Token(Token = "0x4000A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly int max;

		[Token(Token = "0x4000A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Stack<T> freeObjects;

		[Token(Token = "0x4000A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F3FF0", Offset = "0x2F3FF0")]
		private int <Peak>k__BackingField;

		[Token(Token = "0x1700017F")]
		public int Count
		{
			[Token(Token = "0x6000D3C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000180")]
		public int Peak
		{
			[Token(Token = "0x6000D3D")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAEF4", Offset = "0x2FAEF4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D3E")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAF04", Offset = "0x2FAF04")]
			private set
			{
			}
		}

		[Token(Token = "0x6000D3F")]
		public Pool(int initialCapacity = 16, int max = int.MaxValue)
		{
		}

		[Token(Token = "0x6000D40")]
		public T Obtain()
		{
			return null;
		}

		[Token(Token = "0x6000D41")]
		public void Free(T obj)
		{
		}

		[Token(Token = "0x6000D42")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000D43")]
		protected void Reset(T obj)
		{
		}
	}
	[Token(Token = "0x20001DE")]
	public class AnimationStateData
	{
		[Token(Token = "0x200055A")]
		private struct AnimationPair
		{
			[Token(Token = "0x4001EFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public readonly Animation a1;

			[Token(Token = "0x4001EFF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public readonly Animation a2;

			[Token(Token = "0x6001D91")]
			[Address(RVA = "0x3B0D6C", Offset = "0x3B0D6C", VA = "0x3B0D6C")]
			public AnimationPair(Animation a1, Animation a2)
			{
			}

			[Token(Token = "0x6001D92")]
			[Address(RVA = "0x3B0D78", Offset = "0x3B0D78", VA = "0x3B0D78", Slot = "3")]
			public override string ToString()
			{
				return null;
			}
		}

		[Token(Token = "0x200055B")]
		private class AnimationPairComparer : IEqualityComparer<AnimationPair>
		{
			[Token(Token = "0x4001F00")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly AnimationPairComparer Instance;

			[Token(Token = "0x6001D93")]
			[Address(RVA = "0xA938E8", Offset = "0xA938E8", VA = "0xA938E8", Slot = "4")]
			private bool System.Collections.Generic.IEqualityComparer<Spine.AnimationStateData.AnimationPair>.Equals(AnimationPair x, AnimationPair y)
			{
				return default(bool);
			}

			[Token(Token = "0x6001D94")]
			[Address(RVA = "0xA93904", Offset = "0xA93904", VA = "0xA93904", Slot = "5")]
			private int System.Collections.Generic.IEqualityComparer<Spine.AnimationStateData.AnimationPair>.GetHashCode(AnimationPair obj)
			{
				return default(int);
			}

			[Token(Token = "0x6001D95")]
			[Address(RVA = "0xA9396C", Offset = "0xA9396C", VA = "0xA9396C")]
			public AnimationPairComparer()
			{
			}
		}

		[Token(Token = "0x4000A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal SkeletonData skeletonData;

		[Token(Token = "0x4000A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private readonly Dictionary<AnimationPair, float> animationToMixTime;

		[Token(Token = "0x4000A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal float defaultMix;

		[Token(Token = "0x17000181")]
		public SkeletonData SkeletonData
		{
			[Token(Token = "0x6000D44")]
			[Address(RVA = "0xA933D0", Offset = "0xA933D0", VA = "0xA933D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000182")]
		public float DefaultMix
		{
			[Token(Token = "0x6000D45")]
			[Address(RVA = "0xA933D8", Offset = "0xA933D8", VA = "0xA933D8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D46")]
			[Address(RVA = "0xA933E0", Offset = "0xA933E0", VA = "0xA933E0")]
			set
			{
			}
		}

		[Token(Token = "0x6000D47")]
		[Address(RVA = "0xA933E8", Offset = "0xA933E8", VA = "0xA933E8")]
		public AnimationStateData(SkeletonData skeletonData)
		{
		}

		[Token(Token = "0x6000D48")]
		[Address(RVA = "0xA93520", Offset = "0xA93520", VA = "0xA93520")]
		public void SetMix(string fromName, string toName, float duration)
		{
		}

		[Token(Token = "0x6000D49")]
		[Address(RVA = "0xA936AC", Offset = "0xA936AC", VA = "0xA936AC")]
		public void SetMix(Animation from, Animation to, float duration)
		{
		}

		[Token(Token = "0x6000D4A")]
		[Address(RVA = "0xA92264", Offset = "0xA92264", VA = "0xA92264")]
		public float GetMix(Animation from, Animation to)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20001DF")]
	public class Atlas : IEnumerable<AtlasRegion>, IEnumerable
	{
		[Token(Token = "0x4000A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private readonly List<AtlasPage> pages;

		[Token(Token = "0x4000A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private List<AtlasRegion> regions;

		[Token(Token = "0x4000A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private TextureLoader textureLoader;

		[Token(Token = "0x6000D4B")]
		[Address(RVA = "0xA939E8", Offset = "0xA939E8", VA = "0xA939E8", Slot = "4")]
		public IEnumerator<AtlasRegion> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000D4C")]
		[Address(RVA = "0xA93A90", Offset = "0xA93A90", VA = "0xA93A90", Slot = "5")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000D4D")]
		[Address(RVA = "0xA93B38", Offset = "0xA93B38", VA = "0xA93B38")]
		public Atlas(TextReader reader, string dir, TextureLoader textureLoader)
		{
		}

		[Token(Token = "0x6000D4E")]
		[Address(RVA = "0xA94948", Offset = "0xA94948", VA = "0xA94948")]
		public Atlas(List<AtlasPage> pages, List<AtlasRegion> regions)
		{
		}

		[Token(Token = "0x6000D4F")]
		[Address(RVA = "0xA93C20", Offset = "0xA93C20", VA = "0xA93C20")]
		private void Load(TextReader reader, string imagesDir, TextureLoader textureLoader)
		{
		}

		[Token(Token = "0x6000D50")]
		[Address(RVA = "0xA94CD4", Offset = "0xA94CD4", VA = "0xA94CD4")]
		private static string ReadValue(TextReader reader)
		{
			return null;
		}

		[Token(Token = "0x6000D51")]
		[Address(RVA = "0xA94A28", Offset = "0xA94A28", VA = "0xA94A28")]
		private static int ReadTuple(TextReader reader, string[] tuple)
		{
			return default(int);
		}

		[Token(Token = "0x6000D52")]
		[Address(RVA = "0xA94E24", Offset = "0xA94E24", VA = "0xA94E24")]
		public void FlipV()
		{
		}

		[Token(Token = "0x6000D53")]
		[Address(RVA = "0xA94F40", Offset = "0xA94F40", VA = "0xA94F40")]
		public AtlasRegion FindRegion(string name)
		{
			return null;
		}

		[Token(Token = "0x6000D54")]
		[Address(RVA = "0xA9505C", Offset = "0xA9505C", VA = "0xA9505C")]
		public void Dispose()
		{
		}
	}
	[Token(Token = "0x20001E0")]
	public enum Format
	{
		[Token(Token = "0x4000A58")]
		Alpha,
		[Token(Token = "0x4000A59")]
		Intensity,
		[Token(Token = "0x4000A5A")]
		LuminanceAlpha,
		[Token(Token = "0x4000A5B")]
		RGB565,
		[Token(Token = "0x4000A5C")]
		RGBA4444,
		[Token(Token = "0x4000A5D")]
		RGB888,
		[Token(Token = "0x4000A5E")]
		RGBA8888
	}
	[Token(Token = "0x20001E1")]
	public enum TextureFilter
	{
		[Token(Token = "0x4000A60")]
		Nearest,
		[Token(Token = "0x4000A61")]
		Linear,
		[Token(Token = "0x4000A62")]
		MipMap,
		[Token(Token = "0x4000A63")]
		MipMapNearestNearest,
		[Token(Token = "0x4000A64")]
		MipMapLinearNearest,
		[Token(Token = "0x4000A65")]
		MipMapNearestLinear,
		[Token(Token = "0x4000A66")]
		MipMapLinearLinear
	}
	[Token(Token = "0x20001E2")]
	public enum TextureWrap
	{
		[Token(Token = "0x4000A68")]
		MirroredRepeat,
		[Token(Token = "0x4000A69")]
		ClampToEdge,
		[Token(Token = "0x4000A6A")]
		Repeat
	}
	[Token(Token = "0x20001E3")]
	public class AtlasPage
	{
		[Token(Token = "0x4000A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string name;

		[Token(Token = "0x4000A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Format format;

		[Token(Token = "0x4000A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public TextureFilter minFilter;

		[Token(Token = "0x4000A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public TextureFilter magFilter;

		[Token(Token = "0x4000A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextureWrap uWrap;

		[Token(Token = "0x4000A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TextureWrap vWrap;

		[Token(Token = "0x4000A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public object rendererObject;

		[Token(Token = "0x4000A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int width;

		[Token(Token = "0x4000A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int height;

		[Token(Token = "0x6000D55")]
		[Address(RVA = "0xA94A20", Offset = "0xA94A20", VA = "0xA94A20")]
		public AtlasPage()
		{
		}
	}
	[Token(Token = "0x20001E4")]
	public class AtlasRegion
	{
		[Token(Token = "0x4000A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AtlasPage page;

		[Token(Token = "0x4000A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string name;

		[Token(Token = "0x4000A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int x;

		[Token(Token = "0x4000A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int y;

		[Token(Token = "0x4000A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int width;

		[Token(Token = "0x4000A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int height;

		[Token(Token = "0x4000A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float u;

		[Token(Token = "0x4000A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float v;

		[Token(Token = "0x4000A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float u2;

		[Token(Token = "0x4000A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float v2;

		[Token(Token = "0x4000A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float offsetX;

		[Token(Token = "0x4000A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float offsetY;

		[Token(Token = "0x4000A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int originalWidth;

		[Token(Token = "0x4000A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int originalHeight;

		[Token(Token = "0x4000A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int index;

		[Token(Token = "0x4000A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool rotate;

		[Token(Token = "0x4000A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int[] splits;

		[Token(Token = "0x4000A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public int[] pads;

		[Token(Token = "0x6000D56")]
		[Address(RVA = "0xA94E1C", Offset = "0xA94E1C", VA = "0xA94E1C")]
		public AtlasRegion()
		{
		}
	}
	[Token(Token = "0x20001E5")]
	public interface TextureLoader
	{
		[Token(Token = "0x6000D57")]
		void Load(AtlasPage page, string path);

		[Token(Token = "0x6000D58")]
		void Unload(object texture);
	}
	[Token(Token = "0x20001E6")]
	public class AtlasAttachmentLoader : AttachmentLoader
	{
		[Token(Token = "0x4000A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private Atlas[] atlasArray;

		[Token(Token = "0x6000D59")]
		[Address(RVA = "0xA951D4", Offset = "0xA951D4", VA = "0xA951D4")]
		public AtlasAttachmentLoader(params Atlas[] atlasArray)
		{
		}

		[Token(Token = "0x6000D5A")]
		[Address(RVA = "0xA95290", Offset = "0xA95290", VA = "0xA95290", Slot = "4")]
		public RegionAttachment NewRegionAttachment(Skin skin, string name, string path)
		{
			return null;
		}

		[Token(Token = "0x6000D5B")]
		[Address(RVA = "0xA957B8", Offset = "0xA957B8", VA = "0xA957B8", Slot = "5")]
		public MeshAttachment NewMeshAttachment(Skin skin, string name, string path)
		{
			return null;
		}

		[Token(Token = "0x6000D5C")]
		[Address(RVA = "0xA959C8", Offset = "0xA959C8", VA = "0xA959C8", Slot = "6")]
		public BoundingBoxAttachment NewBoundingBoxAttachment(Skin skin, string name)
		{
			return null;
		}

		[Token(Token = "0x6000D5D")]
		[Address(RVA = "0xA95AC4", Offset = "0xA95AC4", VA = "0xA95AC4", Slot = "7")]
		public PathAttachment NewPathAttachment(Skin skin, string name)
		{
			return null;
		}

		[Token(Token = "0x6000D5E")]
		[Address(RVA = "0xA95BC0", Offset = "0xA95BC0", VA = "0xA95BC0", Slot = "8")]
		public PointAttachment NewPointAttachment(Skin skin, string name)
		{
			return null;
		}

		[Token(Token = "0x6000D5F")]
		[Address(RVA = "0xA95C34", Offset = "0xA95C34", VA = "0xA95C34", Slot = "9")]
		public ClippingAttachment NewClippingAttachment(Skin skin, string name)
		{
			return null;
		}

		[Token(Token = "0x6000D60")]
		[Address(RVA = "0xA95408", Offset = "0xA95408", VA = "0xA95408")]
		public AtlasRegion FindRegion(string name)
		{
			return null;
		}
	}
	[Token(Token = "0x20001E7")]
	public abstract class Attachment
	{
		[Token(Token = "0x4000A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F4000", Offset = "0x2F4000")]
		private string <Name>k__BackingField;

		[Token(Token = "0x17000183")]
		public string Name
		{
			[Token(Token = "0x6000D61")]
			[Address(RVA = "0xA95D30", Offset = "0xA95D30", VA = "0xA95D30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAF14", Offset = "0x2FAF14")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D62")]
			[Address(RVA = "0xA95D38", Offset = "0xA95D38", VA = "0xA95D38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAF24", Offset = "0x2FAF24")]
			private set
			{
			}
		}

		[Token(Token = "0x6000D63")]
		[Address(RVA = "0xA95D40", Offset = "0xA95D40", VA = "0xA95D40")]
		public Attachment(string name)
		{
		}

		[Token(Token = "0x6000D64")]
		[Address(RVA = "0xA95E0C", Offset = "0xA95E0C", VA = "0xA95E0C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20001E8")]
	public interface AttachmentLoader
	{
		[Token(Token = "0x6000D65")]
		RegionAttachment NewRegionAttachment(Skin skin, string name, string path);

		[Token(Token = "0x6000D66")]
		MeshAttachment NewMeshAttachment(Skin skin, string name, string path);

		[Token(Token = "0x6000D67")]
		BoundingBoxAttachment NewBoundingBoxAttachment(Skin skin, string name);

		[Token(Token = "0x6000D68")]
		PathAttachment NewPathAttachment(Skin skin, string name);

		[Token(Token = "0x6000D69")]
		PointAttachment NewPointAttachment(Skin skin, string name);

		[Token(Token = "0x6000D6A")]
		ClippingAttachment NewClippingAttachment(Skin skin, string name);
	}
	[Token(Token = "0x20001E9")]
	public enum AttachmentType
	{
		[Token(Token = "0x4000A89")]
		Region,
		[Token(Token = "0x4000A8A")]
		Boundingbox,
		[Token(Token = "0x4000A8B")]
		Mesh,
		[Token(Token = "0x4000A8C")]
		Linkedmesh,
		[Token(Token = "0x4000A8D")]
		Path,
		[Token(Token = "0x4000A8E")]
		Point,
		[Token(Token = "0x4000A8F")]
		Clipping
	}
	[Token(Token = "0x20001EA")]
	public class BoundingBoxAttachment : VertexAttachment
	{
		[Token(Token = "0x6000D6B")]
		[Address(RVA = "0xA95A38", Offset = "0xA95A38", VA = "0xA95A38")]
		public BoundingBoxAttachment(string name)
		{
		}
	}
	[Token(Token = "0x20001EB")]
	public class ClippingAttachment : VertexAttachment
	{
		[Token(Token = "0x4000A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal SlotData endSlot;

		[Token(Token = "0x17000184")]
		public SlotData EndSlot
		{
			[Token(Token = "0x6000D6C")]
			[Address(RVA = "0xA98344", Offset = "0xA98344", VA = "0xA98344")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D6D")]
			[Address(RVA = "0xA9834C", Offset = "0xA9834C", VA = "0xA9834C")]
			set
			{
			}
		}

		[Token(Token = "0x6000D6E")]
		[Address(RVA = "0xA95CA4", Offset = "0xA95CA4", VA = "0xA95CA4")]
		public ClippingAttachment(string name)
		{
		}
	}
	[Token(Token = "0x20001EC")]
	public class MeshAttachment : VertexAttachment
	{
		[Token(Token = "0x4000A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal float regionOffsetX;

		[Token(Token = "0x4000A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal float regionOffsetY;

		[Token(Token = "0x4000A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal float regionWidth;

		[Token(Token = "0x4000A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal float regionHeight;

		[Token(Token = "0x4000A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal float regionOriginalWidth;

		[Token(Token = "0x4000A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal float regionOriginalHeight;

		[Token(Token = "0x4000A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private MeshAttachment parentMesh;

		[Token(Token = "0x4000A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal float[] uvs;

		[Token(Token = "0x4000A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		internal float[] regionUVs;

		[Token(Token = "0x4000A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal int[] triangles;

		[Token(Token = "0x4000A9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		internal float r;

		[Token(Token = "0x4000A9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal float g;

		[Token(Token = "0x4000A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		internal float b;

		[Token(Token = "0x4000A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal float a;

		[Token(Token = "0x4000A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		internal int hulllength;

		[Token(Token = "0x4000AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal bool inheritDeform;

		[Token(Token = "0x4000AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F4010", Offset = "0x2F4010")]
		private string <Path>k__BackingField;

		[Token(Token = "0x4000AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public object RendererObject;

		[Token(Token = "0x4000AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F4020", Offset = "0x2F4020")]
		private float <RegionU>k__BackingField;

		[Token(Token = "0x4000AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F4030", Offset = "0x2F4030")]
		private float <RegionV>k__BackingField;

		[Token(Token = "0x4000AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F4040", Offset = "0x2F4040")]
		private float <RegionU2>k__BackingField;

		[Token(Token = "0x4000AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F4050", Offset = "0x2F4050")]
		private float <RegionV2>k__BackingField;

		[Token(Token = "0x4000AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F4060", Offset = "0x2F4060")]
		private bool <RegionRotate>k__BackingField;

		[Token(Token = "0x4000AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F4070", Offset = "0x2F4070")]
		private int[] <Edges>k__BackingField;

		[Token(Token = "0x4000AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F4080", Offset = "0x2F4080")]
		private float <Width>k__BackingField;

		[Token(Token = "0x4000AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F4090", Offset = "0x2F4090")]
		private float <Height>k__BackingField;

		[Token(Token = "0x17000185")]
		public int HullLength
		{
			[Token(Token = "0x6000D6F")]
			[Address(RVA = "0xA9CA9C", Offset = "0xA9CA9C", VA = "0xA9CA9C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D70")]
			[Address(RVA = "0xA9CAA4", Offset = "0xA9CAA4", VA = "0xA9CAA4")]
			set
			{
			}
		}

		[Token(Token = "0x17000186")]
		public float[] RegionUVs
		{
			[Token(Token = "0x6000D71")]
			[Address(RVA = "0xA9CAAC", Offset = "0xA9CAAC", VA = "0xA9CAAC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D72")]
			[Address(RVA = "0xA9CAB4", Offset = "0xA9CAB4", VA = "0xA9CAB4")]
			set
			{
			}
		}

		[Token(Token = "0x17000187")]
		public float[] UVs
		{
			[Token(Token = "0x6000D73")]
			[Address(RVA = "0xA9CABC", Offset = "0xA9CABC", VA = "0xA9CABC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D74")]
			[Address(RVA = "0xA9CAC4", Offset = "0xA9CAC4", VA = "0xA9CAC4")]
			set
			{
			}
		}

		[Token(Token = "0x17000188")]
		public int[] Triangles
		{
			[Token(Token = "0x6000D75")]
			[Address(RVA = "0xA9CACC", Offset = "0xA9CACC", VA = "0xA9CACC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D76")]
			[Address(RVA = "0xA9CAD4", Offset = "0xA9CAD4", VA = "0xA9CAD4")]
			set
			{
			}
		}

		[Token(Token = "0x17000189")]
		public float R
		{
			[Token(Token = "0x6000D77")]
			[Address(RVA = "0xA9CADC", Offset = "0xA9CADC", VA = "0xA9CADC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D78")]
			[Address(RVA = "0xA9CAE4", Offset = "0xA9CAE4", VA = "0xA9CAE4")]
			set
			{
			}
		}

		[Token(Token = "0x1700018A")]
		public float G
		{
			[Token(Token = "0x6000D79")]
			[Address(RVA = "0xA9CAEC", Offset = "0xA9CAEC", VA = "0xA9CAEC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D7A")]
			[Address(RVA = "0xA9CAF4", Offset = "0xA9CAF4", VA = "0xA9CAF4")]
			set
			{
			}
		}

		[Token(Token = "0x1700018B")]
		public float B
		{
			[Token(Token = "0x6000D7B")]
			[Address(RVA = "0xA9CAFC", Offset = "0xA9CAFC", VA = "0xA9CAFC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D7C")]
			[Address(RVA = "0xA9CB04", Offset = "0xA9CB04", VA = "0xA9CB04")]
			set
			{
			}
		}

		[Token(Token = "0x1700018C")]
		public float A
		{
			[Token(Token = "0x6000D7D")]
			[Address(RVA = "0xA9CB0C", Offset = "0xA9CB0C", VA = "0xA9CB0C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D7E")]
			[Address(RVA = "0xA9CB14", Offset = "0xA9CB14", VA = "0xA9CB14")]
			set
			{
			}
		}

		[Token(Token = "0x1700018D")]
		public string Path
		{
			[Token(Token = "0x6000D7F")]
			[Address(RVA = "0xA9CB1C", Offset = "0xA9CB1C", VA = "0xA9CB1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAF34", Offset = "0x2FAF34")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D80")]
			[Address(RVA = "0xA9CB24", Offset = "0xA9CB24", VA = "0xA9CB24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAF44", Offset = "0x2FAF44")]
			set
			{
			}
		}

		[Token(Token = "0x1700018E")]
		public float RegionU
		{
			[Token(Token = "0x6000D81")]
			[Address(RVA = "0xA9CB2C", Offset = "0xA9CB2C", VA = "0xA9CB2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAF54", Offset = "0x2FAF54")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D82")]
			[Address(RVA = "0xA9CB34", Offset = "0xA9CB34", VA = "0xA9CB34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAF64", Offset = "0x2FAF64")]
			set
			{
			}
		}

		[Token(Token = "0x1700018F")]
		public float RegionV
		{
			[Token(Token = "0x6000D83")]
			[Address(RVA = "0xA9CB3C", Offset = "0xA9CB3C", VA = "0xA9CB3C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAF74", Offset = "0x2FAF74")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D84")]
			[Address(RVA = "0xA9CB44", Offset = "0xA9CB44", VA = "0xA9CB44")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAF84", Offset = "0x2FAF84")]
			set
			{
			}
		}

		[Token(Token = "0x17000190")]
		public float RegionU2
		{
			[Token(Token = "0x6000D85")]
			[Address(RVA = "0xA9CB4C", Offset = "0xA9CB4C", VA = "0xA9CB4C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAF94", Offset = "0x2FAF94")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D86")]
			[Address(RVA = "0xA9CB54", Offset = "0xA9CB54", VA = "0xA9CB54")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAFA4", Offset = "0x2FAFA4")]
			set
			{
			}
		}

		[Token(Token = "0x17000191")]
		public float RegionV2
		{
			[Token(Token = "0x6000D87")]
			[Address(RVA = "0xA9CB5C", Offset = "0xA9CB5C", VA = "0xA9CB5C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAFB4", Offset = "0x2FAFB4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D88")]
			[Address(RVA = "0xA9CB64", Offset = "0xA9CB64", VA = "0xA9CB64")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAFC4", Offset = "0x2FAFC4")]
			set
			{
			}
		}

		[Token(Token = "0x17000192")]
		public bool RegionRotate
		{
			[Token(Token = "0x6000D89")]
			[Address(RVA = "0xA9CB6C", Offset = "0xA9CB6C", VA = "0xA9CB6C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAFD4", Offset = "0x2FAFD4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D8A")]
			[Address(RVA = "0xA9CB74", Offset = "0xA9CB74", VA = "0xA9CB74")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAFE4", Offset = "0x2FAFE4")]
			set
			{
			}
		}

		[Token(Token = "0x17000193")]
		public float RegionOffsetX
		{
			[Token(Token = "0x6000D8B")]
			[Address(RVA = "0xA9CB7C", Offset = "0xA9CB7C", VA = "0xA9CB7C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D8C")]
			[Address(RVA = "0xA9CB84", Offset = "0xA9CB84", VA = "0xA9CB84")]
			set
			{
			}
		}

		[Token(Token = "0x17000194")]
		public float RegionOffsetY
		{
			[Token(Token = "0x6000D8D")]
			[Address(RVA = "0xA9CB8C", Offset = "0xA9CB8C", VA = "0xA9CB8C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D8E")]
			[Address(RVA = "0xA9CB94", Offset = "0xA9CB94", VA = "0xA9CB94")]
			set
			{
			}
		}

		[Token(Token = "0x17000195")]
		public float RegionWidth
		{
			[Token(Token = "0x6000D8F")]
			[Address(RVA = "0xA9CB9C", Offset = "0xA9CB9C", VA = "0xA9CB9C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D90")]
			[Address(RVA = "0xA9CBA4", Offset = "0xA9CBA4", VA = "0xA9CBA4")]
			set
			{
			}
		}

		[Token(Token = "0x17000196")]
		public float RegionHeight
		{
			[Token(Token = "0x6000D91")]
			[Address(RVA = "0xA9CBAC", Offset = "0xA9CBAC", VA = "0xA9CBAC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D92")]
			[Address(RVA = "0xA9CBB4", Offset = "0xA9CBB4", VA = "0xA9CBB4")]
			set
			{
			}
		}

		[Token(Token = "0x17000197")]
		public float RegionOriginalWidth
		{
			[Token(Token = "0x6000D93")]
			[Address(RVA = "0xA9CBBC", Offset = "0xA9CBBC", VA = "0xA9CBBC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D94")]
			[Address(RVA = "0xA9CBC4", Offset = "0xA9CBC4", VA = "0xA9CBC4")]
			set
			{
			}
		}

		[Token(Token = "0x17000198")]
		public float RegionOriginalHeight
		{
			[Token(Token = "0x6000D95")]
			[Address(RVA = "0xA9CBCC", Offset = "0xA9CBCC", VA = "0xA9CBCC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D96")]
			[Address(RVA = "0xA9CBD4", Offset = "0xA9CBD4", VA = "0xA9CBD4")]
			set
			{
			}
		}

		[Token(Token = "0x17000199")]
		public bool InheritDeform
		{
			[Token(Token = "0x6000D97")]
			[Address(RVA = "0xA9CBDC", Offset = "0xA9CBDC", VA = "0xA9CBDC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D98")]
			[Address(RVA = "0xA9CBE4", Offset = "0xA9CBE4", VA = "0xA9CBE4")]
			set
			{
			}
		}

		[Token(Token = "0x1700019A")]
		public MeshAttachment ParentMesh
		{
			[Token(Token = "0x6000D99")]
			[Address(RVA = "0xA9CBEC", Offset = "0xA9CBEC", VA = "0xA9CBEC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D9A")]
			[Address(RVA = "0xA9CBF4", Offset = "0xA9CBF4", VA = "0xA9CBF4")]
			set
			{
			}
		}

		[Token(Token = "0x1700019B")]
		public int[] Edges
		{
			[Token(Token = "0x6000D9B")]
			[Address(RVA = "0xA9CC4C", Offset = "0xA9CC4C", VA = "0xA9CC4C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FAFF4", Offset = "0x2FAFF4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D9C")]
			[Address(RVA = "0xA9CC54", Offset = "0xA9CC54", VA = "0xA9CC54")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB004", Offset = "0x2FB004")]
			set
			{
			}
		}

		[Token(Token = "0x1700019C")]
		public float Width
		{
			[Token(Token = "0x6000D9D")]
			[Address(RVA = "0xA9CC5C", Offset = "0xA9CC5C", VA = "0xA9CC5C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB014", Offset = "0x2FB014")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D9E")]
			[Address(RVA = "0xA9CC64", Offset = "0xA9CC64", VA = "0xA9CC64")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB024", Offset = "0x2FB024")]
			set
			{
			}
		}

		[Token(Token = "0x1700019D")]
		public float Height
		{
			[Token(Token = "0x6000D9F")]
			[Address(RVA = "0xA9CC6C", Offset = "0xA9CC6C", VA = "0xA9CC6C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB034", Offset = "0x2FB034")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DA0")]
			[Address(RVA = "0xA9CC74", Offset = "0xA9CC74", VA = "0xA9CC74")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB044", Offset = "0x2FB044")]
			set
			{
			}
		}

		[Token(Token = "0x6000DA1")]
		[Address(RVA = "0xA95930", Offset = "0xA95930", VA = "0xA95930")]
		public MeshAttachment(string name)
		{
		}

		[Token(Token = "0x6000DA2")]
		[Address(RVA = "0xA9CC7C", Offset = "0xA9CC7C", VA = "0xA9CC7C")]
		public void UpdateUVs()
		{
		}

		[Token(Token = "0x6000DA3")]
		[Address(RVA = "0xA9CEF8", Offset = "0xA9CEF8", VA = "0xA9CEF8", Slot = "4")]
		public override bool ApplyDeform(VertexAttachment sourceAttachment)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001ED")]
	public class PathAttachment : VertexAttachment
	{
		[Token(Token = "0x4000AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal float[] lengths;

		[Token(Token = "0x4000AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal bool closed;

		[Token(Token = "0x4000AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		internal bool constantSpeed;

		[Token(Token = "0x1700019E")]
		public float[] Lengths
		{
			[Token(Token = "0x6000DA4")]
			[Address(RVA = "0xA9CF28", Offset = "0xA9CF28", VA = "0xA9CF28")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DA5")]
			[Address(RVA = "0xA9CF30", Offset = "0xA9CF30", VA = "0xA9CF30")]
			set
			{
			}
		}

		[Token(Token = "0x1700019F")]
		public bool Closed
		{
			[Token(Token = "0x6000DA6")]
			[Address(RVA = "0xA9CF38", Offset = "0xA9CF38", VA = "0xA9CF38")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DA7")]
			[Address(RVA = "0xA9CF40", Offset = "0xA9CF40", VA = "0xA9CF40")]
			set
			{
			}
		}

		[Token(Token = "0x170001A0")]
		public bool ConstantSpeed
		{
			[Token(Token = "0x6000DA8")]
			[Address(RVA = "0xA9CF48", Offset = "0xA9CF48", VA = "0xA9CF48")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DA9")]
			[Address(RVA = "0xA9CF50", Offset = "0xA9CF50", VA = "0xA9CF50")]
			set
			{
			}
		}

		[Token(Token = "0x6000DAA")]
		[Address(RVA = "0xA95B34", Offset = "0xA95B34", VA = "0xA95B34")]
		public PathAttachment(string name)
		{
		}
	}
	[Token(Token = "0x20001EE")]
	public class PointAttachment : Attachment
	{
		[Token(Token = "0x4000AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal float x;

		[Token(Token = "0x4000AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal float y;

		[Token(Token = "0x4000AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal float rotation;

		[Token(Token = "0x170001A1")]
		public float X
		{
			[Token(Token = "0x6000DAB")]
			[Address(RVA = "0xAA0D88", Offset = "0xAA0D88", VA = "0xAA0D88")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DAC")]
			[Address(RVA = "0xAA0D90", Offset = "0xAA0D90", VA = "0xAA0D90")]
			set
			{
			}
		}

		[Token(Token = "0x170001A2")]
		public float Y
		{
			[Token(Token = "0x6000DAD")]
			[Address(RVA = "0xAA0D98", Offset = "0xAA0D98", VA = "0xAA0D98")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DAE")]
			[Address(RVA = "0xAA0DA0", Offset = "0xAA0DA0", VA = "0xAA0DA0")]
			set
			{
			}
		}

		[Token(Token = "0x170001A3")]
		public float Rotation
		{
			[Token(Token = "0x6000DAF")]
			[Address(RVA = "0xAA0DA8", Offset = "0xAA0DA8", VA = "0xAA0DA8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DB0")]
			[Address(RVA = "0xAA0DB0", Offset = "0xAA0DB0", VA = "0xAA0DB0")]
			set
			{
			}
		}

		[Token(Token = "0x6000DB1")]
		[Address(RVA = "0xA95C30", Offset = "0xA95C30", VA = "0xA95C30")]
		public PointAttachment(string name)
		{
		}

		[Token(Token = "0x6000DB2")]
		[Address(RVA = "0xAA0DB8", Offset = "0xAA0DB8", VA = "0xAA0DB8")]
		public void ComputeWorldPosition(Bone bone, out float ox, out float oy)
		{
		}

		[Token(Token = "0x6000DB3")]
		[Address(RVA = "0xAA0E30", Offset = "0xAA0E30", VA = "0xAA0E30")]
		public float ComputeWorldRotation(Bone bone)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20001EF")]
	public class RegionAttachment : Attachment
	{
		[Token(Token = "0x4000AB1")]
		public const int BLX = 0;

		[Token(Token = "0x4000AB2")]
		public const int BLY = 1;

		[Token(Token = "0x4000AB3")]
		public const int ULX = 2;

		[Token(Token = "0x4000AB4")]
		public const int ULY = 3;

		[Token(Token = "0x4000AB5")]
		public const int URX = 4;

		[Token(Token = "0x4000AB6")]
		public const int URY = 5;

		[Token(Token = "0x4000AB7")]
		public const int BRX = 6;

		[Token(Token = "0x4000AB8")]
		public const int BRY = 7;

		[Token(Token = "0x4000AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal float x;

		[Token(Token = "0x4000ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal float y;

		[Token(Token = "0x4000ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal float rotation;

		[Token(Token = "0x4000ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal float scaleX;

		[Token(Token = "0x4000ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal float scaleY;

		[Token(Token = "0x4000ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal float width;

		[Token(Token = "0x4000ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal float height;

		[Token(Token = "0x4000AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal float regionOffsetX;

		[Token(Token = "0x4000AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal float regionOffsetY;

		[Token(Token = "0x4000AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal float regionWidth;

		[Token(Token = "0x4000AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal float regionHeight;

		[Token(Token = "0x4000AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal float regionOriginalWidth;

		[Token(Token = "0x4000AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		internal float regionOriginalHeight;

		[Token(Token = "0x4000AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal float[] offset;

		[Token(Token = "0x4000AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		internal float[] uvs;

		[Token(Token = "0x4000AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal float r;

		[Token(Token = "0x4000AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		internal float g;

		[Token(Token = "0x4000ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal float b;

		[Token(Token = "0x4000ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		internal float a;

		[Token(Token = "0x4000ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F40A0", Offset = "0x2F40A0")]
		private string <Path>k__BackingField;

		[Token(Token = "0x4000ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public object RendererObject;

		[Token(Token = "0x170001A4")]
		public float X
		{
			[Token(Token = "0x6000DB4")]
			[Address(RVA = "0xAA0FFC", Offset = "0xAA0FFC", VA = "0xAA0FFC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DB5")]
			[Address(RVA = "0xAA1004", Offset = "0xAA1004", VA = "0xAA1004")]
			set
			{
			}
		}

		[Token(Token = "0x170001A5")]
		public float Y
		{
			[Token(Token = "0x6000DB6")]
			[Address(RVA = "0xAA100C", Offset = "0xAA100C", VA = "0xAA100C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DB7")]
			[Address(RVA = "0xAA1014", Offset = "0xAA1014", VA = "0xAA1014")]
			set
			{
			}
		}

		[Token(Token = "0x170001A6")]
		public float Rotation
		{
			[Token(Token = "0x6000DB8")]
			[Address(RVA = "0xAA101C", Offset = "0xAA101C", VA = "0xAA101C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DB9")]
			[Address(RVA = "0xAA1024", Offset = "0xAA1024", VA = "0xAA1024")]
			set
			{
			}
		}

		[Token(Token = "0x170001A7")]
		public float ScaleX
		{
			[Token(Token = "0x6000DBA")]
			[Address(RVA = "0xAA102C", Offset = "0xAA102C", VA = "0xAA102C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DBB")]
			[Address(RVA = "0xAA1034", Offset = "0xAA1034", VA = "0xAA1034")]
			set
			{
			}
		}

		[Token(Token = "0x170001A8")]
		public float ScaleY
		{
			[Token(Token = "0x6000DBC")]
			[Address(RVA = "0xAA103C", Offset = "0xAA103C", VA = "0xAA103C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DBD")]
			[Address(RVA = "0xAA1044", Offset = "0xAA1044", VA = "0xAA1044")]
			set
			{
			}
		}

		[Token(Token = "0x170001A9")]
		public float Width
		{
			[Token(Token = "0x6000DBE")]
			[Address(RVA = "0xAA104C", Offset = "0xAA104C", VA = "0xAA104C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DBF")]
			[Address(RVA = "0xAA1054", Offset = "0xAA1054", VA = "0xAA1054")]
			set
			{
			}
		}

		[Token(Token = "0x170001AA")]
		public float Height
		{
			[Token(Token = "0x6000DC0")]
			[Address(RVA = "0xAA105C", Offset = "0xAA105C", VA = "0xAA105C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DC1")]
			[Address(RVA = "0xAA1064", Offset = "0xAA1064", VA = "0xAA1064")]
			set
			{
			}
		}

		[Token(Token = "0x170001AB")]
		public float R
		{
			[Token(Token = "0x6000DC2")]
			[Address(RVA = "0xAA106C", Offset = "0xAA106C", VA = "0xAA106C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DC3")]
			[Address(RVA = "0xAA1074", Offset = "0xAA1074", VA = "0xAA1074")]
			set
			{
			}
		}

		[Token(Token = "0x170001AC")]
		public float G
		{
			[Token(Token = "0x6000DC4")]
			[Address(RVA = "0xAA107C", Offset = "0xAA107C", VA = "0xAA107C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DC5")]
			[Address(RVA = "0xAA1084", Offset = "0xAA1084", VA = "0xAA1084")]
			set
			{
			}
		}

		[Token(Token = "0x170001AD")]
		public float B
		{
			[Token(Token = "0x6000DC6")]
			[Address(RVA = "0xAA108C", Offset = "0xAA108C", VA = "0xAA108C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DC7")]
			[Address(RVA = "0xAA1094", Offset = "0xAA1094", VA = "0xAA1094")]
			set
			{
			}
		}

		[Token(Token = "0x170001AE")]
		public float A
		{
			[Token(Token = "0x6000DC8")]
			[Address(RVA = "0xAA109C", Offset = "0xAA109C", VA = "0xAA109C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DC9")]
			[Address(RVA = "0xAA10A4", Offset = "0xAA10A4", VA = "0xAA10A4")]
			set
			{
			}
		}

		[Token(Token = "0x170001AF")]
		public string Path
		{
			[Token(Token = "0x6000DCA")]
			[Address(RVA = "0xAA10AC", Offset = "0xAA10AC", VA = "0xAA10AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB054", Offset = "0x2FB054")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DCB")]
			[Address(RVA = "0xAA10B4", Offset = "0xAA10B4", VA = "0xAA10B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB064", Offset = "0x2FB064")]
			set
			{
			}
		}

		[Token(Token = "0x170001B0")]
		public float RegionOffsetX
		{
			[Token(Token = "0x6000DCC")]
			[Address(RVA = "0xAA10BC", Offset = "0xAA10BC", VA = "0xAA10BC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DCD")]
			[Address(RVA = "0xAA10C4", Offset = "0xAA10C4", VA = "0xAA10C4")]
			set
			{
			}
		}

		[Token(Token = "0x170001B1")]
		public float RegionOffsetY
		{
			[Token(Token = "0x6000DCE")]
			[Address(RVA = "0xAA10CC", Offset = "0xAA10CC", VA = "0xAA10CC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DCF")]
			[Address(RVA = "0xAA10D4", Offset = "0xAA10D4", VA = "0xAA10D4")]
			set
			{
			}
		}

		[Token(Token = "0x170001B2")]
		public float RegionWidth
		{
			[Token(Token = "0x6000DD0")]
			[Address(RVA = "0xAA10DC", Offset = "0xAA10DC", VA = "0xAA10DC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DD1")]
			[Address(RVA = "0xAA10E4", Offset = "0xAA10E4", VA = "0xAA10E4")]
			set
			{
			}
		}

		[Token(Token = "0x170001B3")]
		public float RegionHeight
		{
			[Token(Token = "0x6000DD2")]
			[Address(RVA = "0xAA10EC", Offset = "0xAA10EC", VA = "0xAA10EC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DD3")]
			[Address(RVA = "0xAA10F4", Offset = "0xAA10F4", VA = "0xAA10F4")]
			set
			{
			}
		}

		[Token(Token = "0x170001B4")]
		public float RegionOriginalWidth
		{
			[Token(Token = "0x6000DD4")]
			[Address(RVA = "0xAA10FC", Offset = "0xAA10FC", VA = "0xAA10FC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DD5")]
			[Address(RVA = "0xAA1104", Offset = "0xAA1104", VA = "0xAA1104")]
			set
			{
			}
		}

		[Token(Token = "0x170001B5")]
		public float RegionOriginalHeight
		{
			[Token(Token = "0x6000DD6")]
			[Address(RVA = "0xAA110C", Offset = "0xAA110C", VA = "0xAA110C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DD7")]
			[Address(RVA = "0xAA1114", Offset = "0xAA1114", VA = "0xAA1114")]
			set
			{
			}
		}

		[Token(Token = "0x170001B6")]
		public float[] Offset
		{
			[Token(Token = "0x6000DD8")]
			[Address(RVA = "0xAA111C", Offset = "0xAA111C", VA = "0xAA111C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B7")]
		public float[] UVs
		{
			[Token(Token = "0x6000DD9")]
			[Address(RVA = "0xAA1124", Offset = "0xAA1124", VA = "0xAA1124")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DDA")]
		[Address(RVA = "0xA954A8", Offset = "0xA954A8", VA = "0xA954A8")]
		public RegionAttachment(string name)
		{
		}

		[Token(Token = "0x6000DDB")]
		[Address(RVA = "0xAA112C", Offset = "0xAA112C", VA = "0xAA112C")]
		public void UpdateOffset()
		{
		}

		[Token(Token = "0x6000DDC")]
		[Address(RVA = "0xA95548", Offset = "0xA95548", VA = "0xA95548")]
		public void SetUVs(float u, float v, float u2, float v2, bool rotate)
		{
		}

		[Token(Token = "0x6000DDD")]
		[Address(RVA = "0xAA13A4", Offset = "0xAA13A4", VA = "0xAA13A4")]
		public void ComputeWorldVertices(Bone bone, float[] worldVertices, int offset, int stride = 2)
		{
		}
	}
	[Token(Token = "0x20001F0")]
	public class VertexAttachment : Attachment
	{
		[Token(Token = "0x4000ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int nextID;

		[Token(Token = "0x4000ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly object nextIdLock;

		[Token(Token = "0x4000AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal readonly int id;

		[Token(Token = "0x4000AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int[] bones;

		[Token(Token = "0x4000AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal float[] vertices;

		[Token(Token = "0x4000AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int worldVerticesLength;

		[Token(Token = "0x170001B8")]
		public int Id
		{
			[Token(Token = "0x6000DDE")]
			[Address(RVA = "0x59A4EC", Offset = "0x59A4EC", VA = "0x59A4EC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001B9")]
		public int[] Bones
		{
			[Token(Token = "0x6000DDF")]
			[Address(RVA = "0x59A4F4", Offset = "0x59A4F4", VA = "0x59A4F4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DE0")]
			[Address(RVA = "0x59A4FC", Offset = "0x59A4FC", VA = "0x59A4FC")]
			set
			{
			}
		}

		[Token(Token = "0x170001BA")]
		public float[] Vertices
		{
			[Token(Token = "0x6000DE1")]
			[Address(RVA = "0x59A504", Offset = "0x59A504", VA = "0x59A504")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DE2")]
			[Address(RVA = "0x59A50C", Offset = "0x59A50C", VA = "0x59A50C")]
			set
			{
			}
		}

		[Token(Token = "0x170001BB")]
		public int WorldVerticesLength
		{
			[Token(Token = "0x6000DE3")]
			[Address(RVA = "0x59A514", Offset = "0x59A514", VA = "0x59A514")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000DE4")]
			[Address(RVA = "0x59A51C", Offset = "0x59A51C", VA = "0x59A51C")]
			set
			{
			}
		}

		[Token(Token = "0x6000DE5")]
		[Address(RVA = "0x59A524", Offset = "0x59A524", VA = "0x59A524")]
		public VertexAttachment(string name)
		{
		}

		[Token(Token = "0x6000DE6")]
		[Address(RVA = "0x591498", Offset = "0x591498", VA = "0x591498")]
		public void ComputeWorldVertices(Slot slot, float[] worldVertices)
		{
		}

		[Token(Token = "0x6000DE7")]
		[Address(RVA = "0x59A6AC", Offset = "0x59A6AC", VA = "0x59A6AC")]
		public void ComputeWorldVertices(Slot slot, int start, int count, float[] worldVertices, int offset, int stride = 2)
		{
		}

		[Token(Token = "0x6000DE8")]
		[Address(RVA = "0x59B0A0", Offset = "0x59B0A0", VA = "0x59B0A0", Slot = "4")]
		public virtual bool ApplyDeform(VertexAttachment sourceAttachment)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001F1")]
	public enum BlendMode
	{
		[Token(Token = "0x4000AD5")]
		Normal,
		[Token(Token = "0x4000AD6")]
		Additive,
		[Token(Token = "0x4000AD7")]
		Multiply,
		[Token(Token = "0x4000AD8")]
		Screen
	}
	[Token(Token = "0x20001F2")]
	public class Bone : IUpdatable
	{
		[Token(Token = "0x4000AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool yDown;

		[Token(Token = "0x4000ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal BoneData data;

		[Token(Token = "0x4000ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal Skeleton skeleton;

		[Token(Token = "0x4000ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal Bone parent;

		[Token(Token = "0x4000ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal ExposedList<Bone> children;

		[Token(Token = "0x4000ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal float x;

		[Token(Token = "0x4000ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal float y;

		[Token(Token = "0x4000AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal float rotation;

		[Token(Token = "0x4000AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal float scaleX;

		[Token(Token = "0x4000AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal float scaleY;

		[Token(Token = "0x4000AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal float shearX;

		[Token(Token = "0x4000AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal float shearY;

		[Token(Token = "0x4000AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal float ax;

		[Token(Token = "0x4000AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal float ay;

		[Token(Token = "0x4000AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		internal float arotation;

		[Token(Token = "0x4000AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal float ascaleX;

		[Token(Token = "0x4000AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		internal float ascaleY;

		[Token(Token = "0x4000AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal float ashearX;

		[Token(Token = "0x4000AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		internal float ashearY;

		[Token(Token = "0x4000AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal bool appliedValid;

		[Token(Token = "0x4000AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		internal float a;

		[Token(Token = "0x4000AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal float b;

		[Token(Token = "0x4000AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		internal float worldX;

		[Token(Token = "0x4000AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal float c;

		[Token(Token = "0x4000AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		internal float d;

		[Token(Token = "0x4000AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal float worldY;

		[Token(Token = "0x4000AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		internal bool sorted;

		[Token(Token = "0x170001BC")]
		public BoneData Data
		{
			[Token(Token = "0x6000DEA")]
			[Address(RVA = "0xA96328", Offset = "0xA96328", VA = "0xA96328")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001BD")]
		public Skeleton Skeleton
		{
			[Token(Token = "0x6000DEB")]
			[Address(RVA = "0xA96330", Offset = "0xA96330", VA = "0xA96330")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001BE")]
		public Bone Parent
		{
			[Token(Token = "0x6000DEC")]
			[Address(RVA = "0xA96338", Offset = "0xA96338", VA = "0xA96338")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001BF")]
		public ExposedList<Bone> Children
		{
			[Token(Token = "0x6000DED")]
			[Address(RVA = "0xA96340", Offset = "0xA96340", VA = "0xA96340")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C0")]
		public float X
		{
			[Token(Token = "0x6000DEE")]
			[Address(RVA = "0xA96348", Offset = "0xA96348", VA = "0xA96348")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DEF")]
			[Address(RVA = "0xA96350", Offset = "0xA96350", VA = "0xA96350")]
			set
			{
			}
		}

		[Token(Token = "0x170001C1")]
		public float Y
		{
			[Token(Token = "0x6000DF0")]
			[Address(RVA = "0xA96358", Offset = "0xA96358", VA = "0xA96358")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DF1")]
			[Address(RVA = "0xA96360", Offset = "0xA96360", VA = "0xA96360")]
			set
			{
			}
		}

		[Token(Token = "0x170001C2")]
		public float Rotation
		{
			[Token(Token = "0x6000DF2")]
			[Address(RVA = "0xA96368", Offset = "0xA96368", VA = "0xA96368")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DF3")]
			[Address(RVA = "0xA96370", Offset = "0xA96370", VA = "0xA96370")]
			set
			{
			}
		}

		[Token(Token = "0x170001C3")]
		public float ScaleX
		{
			[Token(Token = "0x6000DF4")]
			[Address(RVA = "0xA96378", Offset = "0xA96378", VA = "0xA96378")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DF5")]
			[Address(RVA = "0xA96380", Offset = "0xA96380", VA = "0xA96380")]
			set
			{
			}
		}

		[Token(Token = "0x170001C4")]
		public float ScaleY
		{
			[Token(Token = "0x6000DF6")]
			[Address(RVA = "0xA96388", Offset = "0xA96388", VA = "0xA96388")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DF7")]
			[Address(RVA = "0xA96390", Offset = "0xA96390", VA = "0xA96390")]
			set
			{
			}
		}

		[Token(Token = "0x170001C5")]
		public float ShearX
		{
			[Token(Token = "0x6000DF8")]
			[Address(RVA = "0xA96398", Offset = "0xA96398", VA = "0xA96398")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DF9")]
			[Address(RVA = "0xA963A0", Offset = "0xA963A0", VA = "0xA963A0")]
			set
			{
			}
		}

		[Token(Token = "0x170001C6")]
		public float ShearY
		{
			[Token(Token = "0x6000DFA")]
			[Address(RVA = "0xA963A8", Offset = "0xA963A8", VA = "0xA963A8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DFB")]
			[Address(RVA = "0xA963B0", Offset = "0xA963B0", VA = "0xA963B0")]
			set
			{
			}
		}

		[Token(Token = "0x170001C7")]
		public float AppliedRotation
		{
			[Token(Token = "0x6000DFC")]
			[Address(RVA = "0xA963B8", Offset = "0xA963B8", VA = "0xA963B8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DFD")]
			[Address(RVA = "0xA963C0", Offset = "0xA963C0", VA = "0xA963C0")]
			set
			{
			}
		}

		[Token(Token = "0x170001C8")]
		public float AX
		{
			[Token(Token = "0x6000DFE")]
			[Address(RVA = "0xA963C8", Offset = "0xA963C8", VA = "0xA963C8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DFF")]
			[Address(RVA = "0xA963D0", Offset = "0xA963D0", VA = "0xA963D0")]
			set
			{
			}
		}

		[Token(Token = "0x170001C9")]
		public float AY
		{
			[Token(Token = "0x6000E00")]
			[Address(RVA = "0xA963D8", Offset = "0xA963D8", VA = "0xA963D8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E01")]
			[Address(RVA = "0xA963E0", Offset = "0xA963E0", VA = "0xA963E0")]
			set
			{
			}
		}

		[Token(Token = "0x170001CA")]
		public float AScaleX
		{
			[Token(Token = "0x6000E02")]
			[Address(RVA = "0xA963E8", Offset = "0xA963E8", VA = "0xA963E8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E03")]
			[Address(RVA = "0xA963F0", Offset = "0xA963F0", VA = "0xA963F0")]
			set
			{
			}
		}

		[Token(Token = "0x170001CB")]
		public float AScaleY
		{
			[Token(Token = "0x6000E04")]
			[Address(RVA = "0xA963F8", Offset = "0xA963F8", VA = "0xA963F8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E05")]
			[Address(RVA = "0xA96400", Offset = "0xA96400", VA = "0xA96400")]
			set
			{
			}
		}

		[Token(Token = "0x170001CC")]
		public float AShearX
		{
			[Token(Token = "0x6000E06")]
			[Address(RVA = "0xA96408", Offset = "0xA96408", VA = "0xA96408")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E07")]
			[Address(RVA = "0xA96410", Offset = "0xA96410", VA = "0xA96410")]
			set
			{
			}
		}

		[Token(Token = "0x170001CD")]
		public float AShearY
		{
			[Token(Token = "0x6000E08")]
			[Address(RVA = "0xA96418", Offset = "0xA96418", VA = "0xA96418")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E09")]
			[Address(RVA = "0xA96420", Offset = "0xA96420", VA = "0xA96420")]
			set
			{
			}
		}

		[Token(Token = "0x170001CE")]
		public float A
		{
			[Token(Token = "0x6000E0A")]
			[Address(RVA = "0xA96428", Offset = "0xA96428", VA = "0xA96428")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001CF")]
		public float B
		{
			[Token(Token = "0x6000E0B")]
			[Address(RVA = "0xA96430", Offset = "0xA96430", VA = "0xA96430")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001D0")]
		public float C
		{
			[Token(Token = "0x6000E0C")]
			[Address(RVA = "0xA96438", Offset = "0xA96438", VA = "0xA96438")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001D1")]
		public float D
		{
			[Token(Token = "0x6000E0D")]
			[Address(RVA = "0xA96440", Offset = "0xA96440", VA = "0xA96440")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001D2")]
		public float WorldX
		{
			[Token(Token = "0x6000E0E")]
			[Address(RVA = "0xA96448", Offset = "0xA96448", VA = "0xA96448")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001D3")]
		public float WorldY
		{
			[Token(Token = "0x6000E0F")]
			[Address(RVA = "0xA96450", Offset = "0xA96450", VA = "0xA96450")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001D4")]
		public float WorldRotationX
		{
			[Token(Token = "0x6000E10")]
			[Address(RVA = "0xA96458", Offset = "0xA96458", VA = "0xA96458")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001D5")]
		public float WorldRotationY
		{
			[Token(Token = "0x6000E11")]
			[Address(RVA = "0xA96660", Offset = "0xA96660", VA = "0xA96660")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001D6")]
		public float WorldScaleX
		{
			[Token(Token = "0x6000E12")]
			[Address(RVA = "0xA96708", Offset = "0xA96708", VA = "0xA96708")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001D7")]
		public float WorldScaleY
		{
			[Token(Token = "0x6000E13")]
			[Address(RVA = "0xA967BC", Offset = "0xA967BC", VA = "0xA967BC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001D8")]
		public float WorldToLocalRotationX
		{
			[Token(Token = "0x6000E1C")]
			[Address(RVA = "0xA97CAC", Offset = "0xA97CAC", VA = "0xA97CAC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001D9")]
		public float WorldToLocalRotationY
		{
			[Token(Token = "0x6000E1D")]
			[Address(RVA = "0xA97D90", Offset = "0xA97D90", VA = "0xA97D90")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000E14")]
		[Address(RVA = "0xA96870", Offset = "0xA96870", VA = "0xA96870")]
		public Bone(BoneData data, Skeleton skeleton, Bone parent)
		{
		}

		[Token(Token = "0x6000E15")]
		[Address(RVA = "0xA96AC0", Offset = "0xA96AC0", VA = "0xA96AC0", Slot = "4")]
		public void Update()
		{
		}

		[Token(Token = "0x6000E16")]
		[Address(RVA = "0xA973D0", Offset = "0xA973D0", VA = "0xA973D0")]
		public void UpdateWorldTransform()
		{
		}

		[Token(Token = "0x6000E17")]
		[Address(RVA = "0xA96B00", Offset = "0xA96B00", VA = "0xA96B00")]
		public void UpdateWorldTransform(float x, float y, float rotation, float scaleX, float scaleY, float shearX, float shearY)
		{
		}

		[Token(Token = "0x6000E18")]
		[Address(RVA = "0xA969E8", Offset = "0xA969E8", VA = "0xA969E8")]
		public void SetToSetupPose()
		{
		}

		[Token(Token = "0x6000E19")]
		[Address(RVA = "0xA977C8", Offset = "0xA977C8", VA = "0xA977C8")]
		internal void UpdateAppliedTransform()
		{
		}

		[Token(Token = "0x6000E1A")]
		[Address(RVA = "0xA97BE8", Offset = "0xA97BE8", VA = "0xA97BE8")]
		public void WorldToLocal(float worldX, float worldY, out float localX, out float localY)
		{
		}

		[Token(Token = "0x6000E1B")]
		[Address(RVA = "0xA97C5C", Offset = "0xA97C5C", VA = "0xA97C5C")]
		public void LocalToWorld(float localX, float localY, out float worldX, out float worldY)
		{
		}

		[Token(Token = "0x6000E1E")]
		[Address(RVA = "0xA97E74", Offset = "0xA97E74", VA = "0xA97E74")]
		public float WorldToLocalRotation(float worldRotation)
		{
			return default(float);
		}

		[Token(Token = "0x6000E1F")]
		[Address(RVA = "0xA97F54", Offset = "0xA97F54", VA = "0xA97F54")]
		public float LocalToWorldRotation(float localRotation)
		{
			return default(float);
		}

		[Token(Token = "0x6000E20")]
		[Address(RVA = "0xA98038", Offset = "0xA98038", VA = "0xA98038")]
		public void RotateWorld(float degrees)
		{
		}

		[Token(Token = "0x6000E21")]
		[Address(RVA = "0xA9812C", Offset = "0xA9812C", VA = "0xA9812C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20001F3")]
	public class BoneData
	{
		[Token(Token = "0x4000AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal int index;

		[Token(Token = "0x4000AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal string name;

		[Token(Token = "0x4000AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal BoneData parent;

		[Token(Token = "0x4000AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal float length;

		[Token(Token = "0x4000AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal float x;

		[Token(Token = "0x4000AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal float y;

		[Token(Token = "0x4000AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal float rotation;

		[Token(Token = "0x4000AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal float scaleX;

		[Token(Token = "0x4000AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal float scaleY;

		[Token(Token = "0x4000AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal float shearX;

		[Token(Token = "0x4000AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal float shearY;

		[Token(Token = "0x4000AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal TransformMode transformMode;

		[Token(Token = "0x170001DA")]
		public int Index
		{
			[Token(Token = "0x6000E22")]
			[Address(RVA = "0xA98150", Offset = "0xA98150", VA = "0xA98150")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001DB")]
		public string Name
		{
			[Token(Token = "0x6000E23")]
			[Address(RVA = "0xA98158", Offset = "0xA98158", VA = "0xA98158")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001DC")]
		public BoneData Parent
		{
			[Token(Token = "0x6000E24")]
			[Address(RVA = "0xA98160", Offset = "0xA98160", VA = "0xA98160")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001DD")]
		public float Length
		{
			[Token(Token = "0x6000E25")]
			[Address(RVA = "0xA98168", Offset = "0xA98168", VA = "0xA98168")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E26")]
			[Address(RVA = "0xA98170", Offset = "0xA98170", VA = "0xA98170")]
			set
			{
			}
		}

		[Token(Token = "0x170001DE")]
		public float X
		{
			[Token(Token = "0x6000E27")]
			[Address(RVA = "0xA98178", Offset = "0xA98178", VA = "0xA98178")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E28")]
			[Address(RVA = "0xA98180", Offset = "0xA98180", VA = "0xA98180")]
			set
			{
			}
		}

		[Token(Token = "0x170001DF")]
		public float Y
		{
			[Token(Token = "0x6000E29")]
			[Address(RVA = "0xA98188", Offset = "0xA98188", VA = "0xA98188")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E2A")]
			[Address(RVA = "0xA98190", Offset = "0xA98190", VA = "0xA98190")]
			set
			{
			}
		}

		[Token(Token = "0x170001E0")]
		public float Rotation
		{
			[Token(Token = "0x6000E2B")]
			[Address(RVA = "0xA98198", Offset = "0xA98198", VA = "0xA98198")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E2C")]
			[Address(RVA = "0xA981A0", Offset = "0xA981A0", VA = "0xA981A0")]
			set
			{
			}
		}

		[Token(Token = "0x170001E1")]
		public float ScaleX
		{
			[Token(Token = "0x6000E2D")]
			[Address(RVA = "0xA981A8", Offset = "0xA981A8", VA = "0xA981A8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E2E")]
			[Address(RVA = "0xA981B0", Offset = "0xA981B0", VA = "0xA981B0")]
			set
			{
			}
		}

		[Token(Token = "0x170001E2")]
		public float ScaleY
		{
			[Token(Token = "0x6000E2F")]
			[Address(RVA = "0xA981B8", Offset = "0xA981B8", VA = "0xA981B8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E30")]
			[Address(RVA = "0xA981C0", Offset = "0xA981C0", VA = "0xA981C0")]
			set
			{
			}
		}

		[Token(Token = "0x170001E3")]
		public float ShearX
		{
			[Token(Token = "0x6000E31")]
			[Address(RVA = "0xA981C8", Offset = "0xA981C8", VA = "0xA981C8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E32")]
			[Address(RVA = "0xA981D0", Offset = "0xA981D0", VA = "0xA981D0")]
			set
			{
			}
		}

		[Token(Token = "0x170001E4")]
		public float ShearY
		{
			[Token(Token = "0x6000E33")]
			[Address(RVA = "0xA981D8", Offset = "0xA981D8", VA = "0xA981D8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E34")]
			[Address(RVA = "0xA981E0", Offset = "0xA981E0", VA = "0xA981E0")]
			set
			{
			}
		}

		[Token(Token = "0x170001E5")]
		public TransformMode TransformMode
		{
			[Token(Token = "0x6000E35")]
			[Address(RVA = "0xA981E8", Offset = "0xA981E8", VA = "0xA981E8")]
			get
			{
				return default(TransformMode);
			}
			[Token(Token = "0x6000E36")]
			[Address(RVA = "0xA981F0", Offset = "0xA981F0", VA = "0xA981F0")]
			set
			{
			}
		}

		[Token(Token = "0x6000E37")]
		[Address(RVA = "0xA981F8", Offset = "0xA981F8", VA = "0xA981F8")]
		public BoneData(int index, string name, BoneData parent)
		{
		}

		[Token(Token = "0x6000E38")]
		[Address(RVA = "0xA9833C", Offset = "0xA9833C", VA = "0xA9833C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20001F4")]
	[Flags]
	public enum TransformMode
	{
		[Token(Token = "0x4000B01")]
		Normal = 0,
		[Token(Token = "0x4000B02")]
		OnlyTranslation = 7,
		[Token(Token = "0x4000B03")]
		NoRotationOrReflection = 1,
		[Token(Token = "0x4000B04")]
		NoScale = 2,
		[Token(Token = "0x4000B05")]
		NoScaleOrReflection = 6
	}
	[Token(Token = "0x20001F5")]
	public class Event
	{
		[Token(Token = "0x4000B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal readonly EventData data;

		[Token(Token = "0x4000B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal readonly float time;

		[Token(Token = "0x4000B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int intValue;

		[Token(Token = "0x4000B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal float floatValue;

		[Token(Token = "0x4000B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal string stringValue;

		[Token(Token = "0x170001E6")]
		public EventData Data
		{
			[Token(Token = "0x6000E39")]
			[Address(RVA = "0xA9A348", Offset = "0xA9A348", VA = "0xA9A348")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E7")]
		public float Time
		{
			[Token(Token = "0x6000E3A")]
			[Address(RVA = "0xA9A350", Offset = "0xA9A350", VA = "0xA9A350")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001E8")]
		public int Int
		{
			[Token(Token = "0x6000E3B")]
			[Address(RVA = "0xA9A358", Offset = "0xA9A358", VA = "0xA9A358")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000E3C")]
			[Address(RVA = "0xA9A360", Offset = "0xA9A360", VA = "0xA9A360")]
			set
			{
			}
		}

		[Token(Token = "0x170001E9")]
		public float Float
		{
			[Token(Token = "0x6000E3D")]
			[Address(RVA = "0xA9A368", Offset = "0xA9A368", VA = "0xA9A368")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E3E")]
			[Address(RVA = "0xA9A370", Offset = "0xA9A370", VA = "0xA9A370")]
			set
			{
			}
		}

		[Token(Token = "0x170001EA")]
		public string String
		{
			[Token(Token = "0x6000E3F")]
			[Address(RVA = "0xA9A378", Offset = "0xA9A378", VA = "0xA9A378")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E40")]
			[Address(RVA = "0xA9A380", Offset = "0xA9A380", VA = "0xA9A380")]
			set
			{
			}
		}

		[Token(Token = "0x6000E41")]
		[Address(RVA = "0xA9A388", Offset = "0xA9A388", VA = "0xA9A388")]
		public Event(float time, EventData data)
		{
		}

		[Token(Token = "0x6000E42")]
		[Address(RVA = "0xA9A460", Offset = "0xA9A460", VA = "0xA9A460", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20001F6")]
	public class EventData
	{
		[Token(Token = "0x4000B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal string name;

		[Token(Token = "0x4000B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F40B0", Offset = "0x2F40B0")]
		private int <Int>k__BackingField;

		[Token(Token = "0x4000B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F40C0", Offset = "0x2F40C0")]
		private float <Float>k__BackingField;

		[Token(Token = "0x4000B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F40D0", Offset = "0x2F40D0")]
		private string <String>k__BackingField;

		[Token(Token = "0x170001EB")]
		public string Name
		{
			[Token(Token = "0x6000E43")]
			[Address(RVA = "0xA9A484", Offset = "0xA9A484", VA = "0xA9A484")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001EC")]
		public int Int
		{
			[Token(Token = "0x6000E44")]
			[Address(RVA = "0xA9A48C", Offset = "0xA9A48C", VA = "0xA9A48C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB074", Offset = "0x2FB074")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000E45")]
			[Address(RVA = "0xA9A494", Offset = "0xA9A494", VA = "0xA9A494")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB084", Offset = "0x2FB084")]
			set
			{
			}
		}

		[Token(Token = "0x170001ED")]
		public float Float
		{
			[Token(Token = "0x6000E46")]
			[Address(RVA = "0xA9A49C", Offset = "0xA9A49C", VA = "0xA9A49C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB094", Offset = "0x2FB094")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E47")]
			[Address(RVA = "0xA9A4A4", Offset = "0xA9A4A4", VA = "0xA9A4A4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB0A4", Offset = "0x2FB0A4")]
			set
			{
			}
		}

		[Token(Token = "0x170001EE")]
		public string String
		{
			[Token(Token = "0x6000E48")]
			[Address(RVA = "0xA9A4AC", Offset = "0xA9A4AC", VA = "0xA9A4AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB0B4", Offset = "0x2FB0B4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E49")]
			[Address(RVA = "0xA9A4B4", Offset = "0xA9A4B4", VA = "0xA9A4B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB0C4", Offset = "0x2FB0C4")]
			set
			{
			}
		}

		[Token(Token = "0x6000E4A")]
		[Address(RVA = "0xA9A4BC", Offset = "0xA9A4BC", VA = "0xA9A4BC")]
		public EventData(string name)
		{
		}

		[Token(Token = "0x6000E4B")]
		[Address(RVA = "0xA9A588", Offset = "0xA9A588", VA = "0xA9A588", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20001F7")]
	[AttributeAttribute(Name = "DebuggerDisplayAttribute", RVA = "0x2E95D8", Offset = "0x2E95D8")]
	public class ExposedList<T> : IEnumerable<T>, IEnumerable
	{
		[Serializable]
		[Token(Token = "0x200055C")]
		public struct Enumerator : IEnumerator<T>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F01")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private ExposedList<T> l;

			[Token(Token = "0x4001F02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int next;

			[Token(Token = "0x4001F03")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int ver;

			[Token(Token = "0x4001F04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T current;

			[Token(Token = "0x170003B8")]
			public T Current
			{
				[Token(Token = "0x6001D9B")]
				get
				{
					return (T)null;
				}
			}

			[Token(Token = "0x170003B9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001D9D")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001D97")]
			internal Enumerator(ExposedList<T> l)
			{
			}

			[Token(Token = "0x6001D98")]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001D99")]
			private void VerifyState()
			{
			}

			[Token(Token = "0x6001D9A")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001D9C")]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T[] Items;

		[Token(Token = "0x4000B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int Count;

		[Token(Token = "0x4000B11")]
		private const int DefaultCapacity = 4;

		[Token(Token = "0x4000B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly T[] EmptyArray;

		[Token(Token = "0x4000B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int version;

		[Token(Token = "0x170001EF")]
		public int Capacity
		{
			[Token(Token = "0x6000E8D")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000E8E")]
			set
			{
			}
		}

		[Token(Token = "0x6000E4C")]
		public ExposedList()
		{
		}

		[Token(Token = "0x6000E4D")]
		public ExposedList(IEnumerable<T> collection)
		{
		}

		[Token(Token = "0x6000E4E")]
		public ExposedList(int capacity)
		{
		}

		[Token(Token = "0x6000E4F")]
		internal ExposedList(T[] data, int size)
		{
		}

		[Token(Token = "0x6000E50")]
		public void Add(T item)
		{
		}

		[Token(Token = "0x6000E51")]
		public void GrowIfNeeded(int newCount)
		{
		}

		[Token(Token = "0x6000E52")]
		public ExposedList<T> Resize(int newSize)
		{
			return null;
		}

		[Token(Token = "0x6000E53")]
		public void EnsureCapacity(int min)
		{
		}

		[Token(Token = "0x6000E54")]
		private void CheckRange(int index, int count)
		{
		}

		[Token(Token = "0x6000E55")]
		private void AddCollection(ICollection<T> collection)
		{
		}

		[Token(Token = "0x6000E56")]
		private void AddEnumerable(IEnumerable<T> enumerable)
		{
		}

		[Token(Token = "0x6000E57")]
		public void AddRange(IEnumerable<T> collection)
		{
		}

		[Token(Token = "0x6000E58")]
		public int BinarySearch(T item)
		{
			return default(int);
		}

		[Token(Token = "0x6000E59")]
		public int BinarySearch(T item, IComparer<T> comparer)
		{
			return default(int);
		}

		[Token(Token = "0x6000E5A")]
		public int BinarySearch(int index, int count, T item, IComparer<T> comparer)
		{
			return default(int);
		}

		[Token(Token = "0x6000E5B")]
		public void Clear(bool clearArray = true)
		{
		}

		[Token(Token = "0x6000E5C")]
		public bool Contains(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E5D")]
		public ExposedList<TOutput> ConvertAll<TOutput>(Converter<T, TOutput> converter)
		{
			return null;
		}

		[Token(Token = "0x6000E5E")]
		public void CopyTo(T[] array)
		{
		}

		[Token(Token = "0x6000E5F")]
		public void CopyTo(T[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6000E60")]
		public void CopyTo(int index, T[] array, int arrayIndex, int count)
		{
		}

		[Token(Token = "0x6000E61")]
		public bool Exists(Predicate<T> match)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E62")]
		public T Find(Predicate<T> match)
		{
			return (T)null;
		}

		[Token(Token = "0x6000E63")]
		private static void CheckMatch(Predicate<T> match)
		{
		}

		[Token(Token = "0x6000E64")]
		public ExposedList<T> FindAll(Predicate<T> match)
		{
			return null;
		}

		[Token(Token = "0x6000E65")]
		private ExposedList<T> FindAllList(Predicate<T> match)
		{
			return null;
		}

		[Token(Token = "0x6000E66")]
		public int FindIndex(Predicate<T> match)
		{
			return default(int);
		}

		[Token(Token = "0x6000E67")]
		public int FindIndex(int startIndex, Predicate<T> match)
		{
			return default(int);
		}

		[Token(Token = "0x6000E68")]
		public int FindIndex(int startIndex, int count, Predicate<T> match)
		{
			return default(int);
		}

		[Token(Token = "0x6000E69")]
		private int GetIndex(int startIndex, int count, Predicate<T> match)
		{
			return default(int);
		}

		[Token(Token = "0x6000E6A")]
		public T FindLast(Predicate<T> match)
		{
			return (T)null;
		}

		[Token(Token = "0x6000E6B")]
		public int FindLastIndex(Predicate<T> match)
		{
			return default(int);
		}

		[Token(Token = "0x6000E6C")]
		public int FindLastIndex(int startIndex, Predicate<T> match)
		{
			return default(int);
		}

		[Token(Token = "0x6000E6D")]
		public int FindLastIndex(int startIndex, int count, Predicate<T> match)
		{
			return default(int);
		}

		[Token(Token = "0x6000E6E")]
		private int GetLastIndex(int startIndex, int count, Predicate<T> match)
		{
			return default(int);
		}

		[Token(Token = "0x6000E6F")]
		public void ForEach(Action<T> action)
		{
		}

		[Token(Token = "0x6000E70")]
		public Enumerator GetEnumerator()
		{
			return default(Enumerator);
		}

		[Token(Token = "0x6000E71")]
		public ExposedList<T> GetRange(int index, int count)
		{
			return null;
		}

		[Token(Token = "0x6000E72")]
		public int IndexOf(T item)
		{
			return default(int);
		}

		[Token(Token = "0x6000E73")]
		public int IndexOf(T item, int index)
		{
			return default(int);
		}

		[Token(Token = "0x6000E74")]
		public int IndexOf(T item, int index, int count)
		{
			return default(int);
		}

		[Token(Token = "0x6000E75")]
		private void Shift(int start, int delta)
		{
		}

		[Token(Token = "0x6000E76")]
		private void CheckIndex(int index)
		{
		}

		[Token(Token = "0x6000E77")]
		public void Insert(int index, T item)
		{
		}

		[Token(Token = "0x6000E78")]
		private void CheckCollection(IEnumerable<T> collection)
		{
		}

		[Token(Token = "0x6000E79")]
		public void InsertRange(int index, IEnumerable<T> collection)
		{
		}

		[Token(Token = "0x6000E7A")]
		private void InsertCollection(int index, ICollection<T> collection)
		{
		}

		[Token(Token = "0x6000E7B")]
		private void InsertEnumeration(int index, IEnumerable<T> enumerable)
		{
		}

		[Token(Token = "0x6000E7C")]
		public int LastIndexOf(T item)
		{
			return default(int);
		}

		[Token(Token = "0x6000E7D")]
		public int LastIndexOf(T item, int index)
		{
			return default(int);
		}

		[Token(Token = "0x6000E7E")]
		public int LastIndexOf(T item, int index, int count)
		{
			return default(int);
		}

		[Token(Token = "0x6000E7F")]
		public bool Remove(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E80")]
		public int RemoveAll(Predicate<T> match)
		{
			return default(int);
		}

		[Token(Token = "0x6000E81")]
		public void RemoveAt(int index)
		{
		}

		[Token(Token = "0x6000E82")]
		public T Pop()
		{
			return (T)null;
		}

		[Token(Token = "0x6000E83")]
		public void RemoveRange(int index, int count)
		{
		}

		[Token(Token = "0x6000E84")]
		public void Reverse()
		{
		}

		[Token(Token = "0x6000E85")]
		public void Reverse(int index, int count)
		{
		}

		[Token(Token = "0x6000E86")]
		public void Sort()
		{
		}

		[Token(Token = "0x6000E87")]
		public void Sort(IComparer<T> comparer)
		{
		}

		[Token(Token = "0x6000E88")]
		public void Sort(Comparison<T> comparison)
		{
		}

		[Token(Token = "0x6000E89")]
		public void Sort(int index, int count, IComparer<T> comparer)
		{
		}

		[Token(Token = "0x6000E8A")]
		public T[] ToArray()
		{
			return null;
		}

		[Token(Token = "0x6000E8B")]
		public void TrimExcess()
		{
		}

		[Token(Token = "0x6000E8C")]
		public bool TrueForAll(Predicate<T> match)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E8F")]
		private IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000E90")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}
	[Token(Token = "0x20001F8")]
	public interface IConstraint : IUpdatable
	{
		[Token(Token = "0x170001F0")]
		int Order
		{
			[Token(Token = "0x6000E92")]
			get;
		}
	}
	[Token(Token = "0x20001F9")]
	public class IkConstraint : IConstraint, IUpdatable
	{
		[Token(Token = "0x4000B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal IkConstraintData data;

		[Token(Token = "0x4000B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal ExposedList<Bone> bones;

		[Token(Token = "0x4000B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal Bone target;

		[Token(Token = "0x4000B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal float mix;

		[Token(Token = "0x4000B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int bendDirection;

		[Token(Token = "0x170001F1")]
		public IkConstraintData Data
		{
			[Token(Token = "0x6000E93")]
			[Address(RVA = "0xA9ABB4", Offset = "0xA9ABB4", VA = "0xA9ABB4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F2")]
		public int Order
		{
			[Token(Token = "0x6000E94")]
			[Address(RVA = "0xA9ABBC", Offset = "0xA9ABBC", VA = "0xA9ABBC", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001F3")]
		public ExposedList<Bone> Bones
		{
			[Token(Token = "0x6000E95")]
			[Address(RVA = "0xA9ABE0", Offset = "0xA9ABE0", VA = "0xA9ABE0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F4")]
		public Bone Target
		{
			[Token(Token = "0x6000E96")]
			[Address(RVA = "0xA9ABE8", Offset = "0xA9ABE8", VA = "0xA9ABE8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E97")]
			[Address(RVA = "0xA9ABF0", Offset = "0xA9ABF0", VA = "0xA9ABF0")]
			set
			{
			}
		}

		[Token(Token = "0x170001F5")]
		public int BendDirection
		{
			[Token(Token = "0x6000E98")]
			[Address(RVA = "0xA9ABF8", Offset = "0xA9ABF8", VA = "0xA9ABF8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000E99")]
			[Address(RVA = "0xA9AC00", Offset = "0xA9AC00", VA = "0xA9AC00")]
			set
			{
			}
		}

		[Token(Token = "0x170001F6")]
		public float Mix
		{
			[Token(Token = "0x6000E9A")]
			[Address(RVA = "0xA9AC08", Offset = "0xA9AC08", VA = "0xA9AC08")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E9B")]
			[Address(RVA = "0xA9AC10", Offset = "0xA9AC10", VA = "0xA9AC10")]
			set
			{
			}
		}

		[Token(Token = "0x6000E9C")]
		[Address(RVA = "0xA9AC18", Offset = "0xA9AC18", VA = "0xA9AC18")]
		public IkConstraint(IkConstraintData data, Skeleton skeleton)
		{
		}

		[Token(Token = "0x6000E9D")]
		[Address(RVA = "0xA9B0C8", Offset = "0xA9B0C8", VA = "0xA9B0C8")]
		public void Apply()
		{
		}

		[Token(Token = "0x6000E9E")]
		[Address(RVA = "0xA9B0CC", Offset = "0xA9B0CC", VA = "0xA9B0CC", Slot = "5")]
		public void Update()
		{
		}

		[Token(Token = "0x6000E9F")]
		[Address(RVA = "0xA9BF8C", Offset = "0xA9BF8C", VA = "0xA9BF8C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000EA0")]
		[Address(RVA = "0xA9B240", Offset = "0xA9B240", VA = "0xA9B240")]
		public static void Apply(Bone bone, float targetX, float targetY, float alpha)
		{
		}

		[Token(Token = "0x6000EA1")]
		[Address(RVA = "0xA9B4F0", Offset = "0xA9B4F0", VA = "0xA9B4F0")]
		public static void Apply(Bone parent, Bone child, float targetX, float targetY, int bendDir, float alpha)
		{
		}
	}
	[Token(Token = "0x20001FA")]
	public class IkConstraintData
	{
		[Token(Token = "0x4000B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal string name;

		[Token(Token = "0x4000B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal int order;

		[Token(Token = "0x4000B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal List<BoneData> bones;

		[Token(Token = "0x4000B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal BoneData target;

		[Token(Token = "0x4000B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int bendDirection;

		[Token(Token = "0x4000B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal float mix;

		[Token(Token = "0x170001F7")]
		public string Name
		{
			[Token(Token = "0x6000EA2")]
			[Address(RVA = "0xA9BFB0", Offset = "0xA9BFB0", VA = "0xA9BFB0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F8")]
		public int Order
		{
			[Token(Token = "0x6000EA3")]
			[Address(RVA = "0xA9BFB8", Offset = "0xA9BFB8", VA = "0xA9BFB8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000EA4")]
			[Address(RVA = "0xA9BFC0", Offset = "0xA9BFC0", VA = "0xA9BFC0")]
			set
			{
			}
		}

		[Token(Token = "0x170001F9")]
		public List<BoneData> Bones
		{
			[Token(Token = "0x6000EA5")]
			[Address(RVA = "0xA9BFC8", Offset = "0xA9BFC8", VA = "0xA9BFC8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001FA")]
		public BoneData Target
		{
			[Token(Token = "0x6000EA6")]
			[Address(RVA = "0xA9BFD0", Offset = "0xA9BFD0", VA = "0xA9BFD0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EA7")]
			[Address(RVA = "0xA9BFD8", Offset = "0xA9BFD8", VA = "0xA9BFD8")]
			set
			{
			}
		}

		[Token(Token = "0x170001FB")]
		public int BendDirection
		{
			[Token(Token = "0x6000EA8")]
			[Address(RVA = "0xA9BFE0", Offset = "0xA9BFE0", VA = "0xA9BFE0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000EA9")]
			[Address(RVA = "0xA9BFE8", Offset = "0xA9BFE8", VA = "0xA9BFE8")]
			set
			{
			}
		}

		[Token(Token = "0x170001FC")]
		public float Mix
		{
			[Token(Token = "0x6000EAA")]
			[Address(RVA = "0xA9BFF0", Offset = "0xA9BFF0", VA = "0xA9BFF0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000EAB")]
			[Address(RVA = "0xA9BFF8", Offset = "0xA9BFF8", VA = "0xA9BFF8")]
			set
			{
			}
		}

		[Token(Token = "0x6000EAC")]
		[Address(RVA = "0xA9C000", Offset = "0xA9C000", VA = "0xA9C000")]
		public IkConstraintData(string name)
		{
		}

		[Token(Token = "0x6000EAD")]
		[Address(RVA = "0xA9C110", Offset = "0xA9C110", VA = "0xA9C110", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20001FB")]
	public interface IUpdatable
	{
		[Token(Token = "0x6000EAE")]
		void Update();
	}
	[Token(Token = "0x20001FC")]
	public static class Json
	{
		[Token(Token = "0x6000EAF")]
		[Address(RVA = "0xA9C7C4", Offset = "0xA9C7C4", VA = "0xA9C7C4")]
		public static object Deserialize(TextReader text)
		{
			return null;
		}
	}
	[Token(Token = "0x20001FD")]
	public static class MathUtils
	{
		[Token(Token = "0x4000B1F")]
		public const float PI = (float)Math.PI;

		[Token(Token = "0x4000B20")]
		public const float PI2 = (float)Math.PI * 2f;

		[Token(Token = "0x4000B21")]
		public const float RadDeg = 180f / (float)Math.PI;

		[Token(Token = "0x4000B22")]
		public const float DegRad = (float)Math.PI / 180f;

		[Token(Token = "0x4000B23")]
		private const int SIN_BITS = 14;

		[Token(Token = "0x4000B24")]
		private const int SIN_MASK = 16383;

		[Token(Token = "0x4000B25")]
		private const int SIN_COUNT = 16384;

		[Token(Token = "0x4000B26")]
		private const float RadFull = (float)Math.PI * 2f;

		[Token(Token = "0x4000B27")]
		private const float DegFull = 360f;

		[Token(Token = "0x4000B28")]
		private const float RadToIndex = 8192f / (float)Math.PI;

		[Token(Token = "0x4000B29")]
		private const float DegToIndex = 45.511112f;

		[Token(Token = "0x4000B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float[] sin;

		[Token(Token = "0x6000EB0")]
		[Address(RVA = "0xA9C884", Offset = "0xA9C884", VA = "0xA9C884")]
		static MathUtils()
		{
		}

		[Token(Token = "0x6000EB1")]
		[Address(RVA = "0xA976E0", Offset = "0xA976E0", VA = "0xA976E0")]
		public static float Sin(float radians)
		{
			return default(float);
		}

		[Token(Token = "0x6000EB2")]
		[Address(RVA = "0xA975EC", Offset = "0xA975EC", VA = "0xA975EC")]
		public static float Cos(float radians)
		{
			return default(float);
		}

		[Token(Token = "0x6000EB3")]
		[Address(RVA = "0xA97504", Offset = "0xA97504", VA = "0xA97504")]
		public static float SinDeg(float degrees)
		{
			return default(float);
		}

		[Token(Token = "0x6000EB4")]
		[Address(RVA = "0xA97410", Offset = "0xA97410", VA = "0xA97410")]
		public static float CosDeg(float degrees)
		{
			return default(float);
		}

		[Token(Token = "0x6000EB5")]
		[Address(RVA = "0xA96500", Offset = "0xA96500", VA = "0xA96500")]
		public static float Atan2(float y, float x)
		{
			return default(float);
		}

		[Token(Token = "0x6000EB6")]
		[Address(RVA = "0xA98F80", Offset = "0xA98F80", VA = "0xA98F80")]
		public static float Clamp(float value, float min, float max)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20001FE")]
	public class PathConstraint : IConstraint, IUpdatable
	{
		[Token(Token = "0x4000B2B")]
		private const int NONE = -1;

		[Token(Token = "0x4000B2C")]
		private const int BEFORE = -2;

		[Token(Token = "0x4000B2D")]
		private const int AFTER = -3;

		[Token(Token = "0x4000B2E")]
		private const float Epsilon = 1E-05f;

		[Token(Token = "0x4000B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal PathConstraintData data;

		[Token(Token = "0x4000B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal ExposedList<Bone> bones;

		[Token(Token = "0x4000B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal Slot target;

		[Token(Token = "0x4000B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal float position;

		[Token(Token = "0x4000B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal float spacing;

		[Token(Token = "0x4000B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal float rotateMix;

		[Token(Token = "0x4000B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal float translateMix;

		[Token(Token = "0x4000B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal ExposedList<float> spaces;

		[Token(Token = "0x4000B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal ExposedList<float> positions;

		[Token(Token = "0x4000B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal ExposedList<float> world;

		[Token(Token = "0x4000B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal ExposedList<float> curves;

		[Token(Token = "0x4000B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal ExposedList<float> lengths;

		[Token(Token = "0x4000B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal float[] segments;

		[Token(Token = "0x170001FD")]
		public int Order
		{
			[Token(Token = "0x6000EB7")]
			[Address(RVA = "0xA9CF58", Offset = "0xA9CF58", VA = "0xA9CF58", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001FE")]
		public float Position
		{
			[Token(Token = "0x6000EB8")]
			[Address(RVA = "0xA9CF7C", Offset = "0xA9CF7C", VA = "0xA9CF7C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000EB9")]
			[Address(RVA = "0xA9CF84", Offset = "0xA9CF84", VA = "0xA9CF84")]
			set
			{
			}
		}

		[Token(Token = "0x170001FF")]
		public float Spacing
		{
			[Token(Token = "0x6000EBA")]
			[Address(RVA = "0xA9CF8C", Offset = "0xA9CF8C", VA = "0xA9CF8C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000EBB")]
			[Address(RVA = "0xA9CF94", Offset = "0xA9CF94", VA = "0xA9CF94")]
			set
			{
			}
		}

		[Token(Token = "0x17000200")]
		public float RotateMix
		{
			[Token(Token = "0x6000EBC")]
			[Address(RVA = "0xA9CF9C", Offset = "0xA9CF9C", VA = "0xA9CF9C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000EBD")]
			[Address(RVA = "0xA9CFA4", Offset = "0xA9CFA4", VA = "0xA9CFA4")]
			set
			{
			}
		}

		[Token(Token = "0x17000201")]
		public float TranslateMix
		{
			[Token(Token = "0x6000EBE")]
			[Address(RVA = "0xA9CFAC", Offset = "0xA9CFAC", VA = "0xA9CFAC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000EBF")]
			[Address(RVA = "0xA9CFB4", Offset = "0xA9CFB4", VA = "0xA9CFB4")]
			set
			{
			}
		}

		[Token(Token = "0x17000202")]
		public ExposedList<Bone> Bones
		{
			[Token(Token = "0x6000EC0")]
			[Address(RVA = "0xA9CFBC", Offset = "0xA9CFBC", VA = "0xA9CFBC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000203")]
		public Slot Target
		{
			[Token(Token = "0x6000EC1")]
			[Address(RVA = "0xA9CFC4", Offset = "0xA9CFC4", VA = "0xA9CFC4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EC2")]
			[Address(RVA = "0xA9CFCC", Offset = "0xA9CFCC", VA = "0xA9CFCC")]
			set
			{
			}
		}

		[Token(Token = "0x17000204")]
		public PathConstraintData Data
		{
			[Token(Token = "0x6000EC3")]
			[Address(RVA = "0xA9CFD4", Offset = "0xA9CFD4", VA = "0xA9CFD4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EC4")]
		[Address(RVA = "0xA9CFDC", Offset = "0xA9CFDC", VA = "0xA9CFDC")]
		public PathConstraint(PathConstraintData data, Skeleton skeleton)
		{
		}

		[Token(Token = "0x6000EC5")]
		[Address(RVA = "0xA9D510", Offset = "0xA9D510", VA = "0xA9D510")]
		public void Apply()
		{
		}

		[Token(Token = "0x6000EC6")]
		[Address(RVA = "0xA9D514", Offset = "0xA9D514", VA = "0xA9D514", Slot = "5")]
		public void Update()
		{
		}

		[Token(Token = "0x6000EC7")]
		[Address(RVA = "0xA9E1EC", Offset = "0xA9E1EC", VA = "0xA9E1EC")]
		private float[] ComputeWorldPositions(PathAttachment path, int spacesCount, bool tangents, bool percentPosition, bool percentSpacing)
		{
			return null;
		}

		[Token(Token = "0x6000EC8")]
		[Address(RVA = "0xA9F76C", Offset = "0xA9F76C", VA = "0xA9F76C")]
		private static void AddBeforePosition(float p, float[] temp, int i, float[] output, int o)
		{
		}

		[Token(Token = "0x6000EC9")]
		[Address(RVA = "0xA9F970", Offset = "0xA9F970", VA = "0xA9F970")]
		private static void AddAfterPosition(float p, float[] temp, int i, float[] output, int o)
		{
		}

		[Token(Token = "0x6000ECA")]
		[Address(RVA = "0xA9FB74", Offset = "0xA9FB74", VA = "0xA9FB74")]
		private static void AddCurvePosition(float p, float x1, float y1, float cx1, float cy1, float cx2, float cy2, float x2, float y2, float[] output, int o, bool tangents)
		{
		}
	}
	[Token(Token = "0x20001FF")]
	public class PathConstraintData
	{
		[Token(Token = "0x4000B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal string name;

		[Token(Token = "0x4000B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal int order;

		[Token(Token = "0x4000B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal ExposedList<BoneData> bones;

		[Token(Token = "0x4000B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal SlotData target;

		[Token(Token = "0x4000B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal PositionMode positionMode;

		[Token(Token = "0x4000B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal SpacingMode spacingMode;

		[Token(Token = "0x4000B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal RotateMode rotateMode;

		[Token(Token = "0x4000B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal float offsetRotation;

		[Token(Token = "0x4000B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal float position;

		[Token(Token = "0x4000B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal float spacing;

		[Token(Token = "0x4000B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal float rotateMix;

		[Token(Token = "0x4000B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal float translateMix;

		[Token(Token = "0x17000205")]
		public string Name
		{
			[Token(Token = "0x6000ECB")]
			[Address(RVA = "0xA9FDA4", Offset = "0xA9FDA4", VA = "0xA9FDA4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000206")]
		public int Order
		{
			[Token(Token = "0x6000ECC")]
			[Address(RVA = "0xA9FDAC", Offset = "0xA9FDAC", VA = "0xA9FDAC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000ECD")]
			[Address(RVA = "0xA9FDB4", Offset = "0xA9FDB4", VA = "0xA9FDB4")]
			set
			{
			}
		}

		[Token(Token = "0x17000207")]
		public ExposedList<BoneData> Bones
		{
			[Token(Token = "0x6000ECE")]
			[Address(RVA = "0xA9FDBC", Offset = "0xA9FDBC", VA = "0xA9FDBC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000208")]
		public SlotData Target
		{
			[Token(Token = "0x6000ECF")]
			[Address(RVA = "0xA9FDC4", Offset = "0xA9FDC4", VA = "0xA9FDC4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000ED0")]
			[Address(RVA = "0xA9FDCC", Offset = "0xA9FDCC", VA = "0xA9FDCC")]
			set
			{
			}
		}

		[Token(Token = "0x17000209")]
		public PositionMode PositionMode
		{
			[Token(Token = "0x6000ED1")]
			[Address(RVA = "0xA9FDD4", Offset = "0xA9FDD4", VA = "0xA9FDD4")]
			get
			{
				return default(PositionMode);
			}
			[Token(Token = "0x6000ED2")]
			[Address(RVA = "0xA9FDDC", Offset = "0xA9FDDC", VA = "0xA9FDDC")]
			set
			{
			}
		}

		[Token(Token = "0x1700020A")]
		public SpacingMode SpacingMode
		{
			[Token(Token = "0x6000ED3")]
			[Address(RVA = "0xA9FDE4", Offset = "0xA9FDE4", VA = "0xA9FDE4")]
			get
			{
				return default(SpacingMode);
			}
			[Token(Token = "0x6000ED4")]
			[Address(RVA = "0xA9FDEC", Offset = "0xA9FDEC", VA = "0xA9FDEC")]
			set
			{
			}
		}

		[Token(Token = "0x1700020B")]
		public RotateMode RotateMode
		{
			[Token(Token = "0x6000ED5")]
			[Address(RVA = "0xA9FDF4", Offset = "0xA9FDF4", VA = "0xA9FDF4")]
			get
			{
				return default(RotateMode);
			}
			[Token(Token = "0x6000ED6")]
			[Address(RVA = "0xA9FDFC", Offset = "0xA9FDFC", VA = "0xA9FDFC")]
			set
			{
			}
		}

		[Token(Token = "0x1700020C")]
		public float OffsetRotation
		{
			[Token(Token = "0x6000ED7")]
			[Address(RVA = "0xA9FE04", Offset = "0xA9FE04", VA = "0xA9FE04")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000ED8")]
			[Address(RVA = "0xA9FE0C", Offset = "0xA9FE0C", VA = "0xA9FE0C")]
			set
			{
			}
		}

		[Token(Token = "0x1700020D")]
		public float Position
		{
			[Token(Token = "0x6000ED9")]
			[Address(RVA = "0xA9FE14", Offset = "0xA9FE14", VA = "0xA9FE14")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000EDA")]
			[Address(RVA = "0xA9FE1C", Offset = "0xA9FE1C", VA = "0xA9FE1C")]
			set
			{
			}
		}

		[Token(Token = "0x1700020E")]
		public float Spacing
		{
			[Token(Token = "0x6000EDB")]
			[Address(RVA = "0xA9FE24", Offset = "0xA9FE24", VA = "0xA9FE24")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000EDC")]
			[Address(RVA = "0xA9FE2C", Offset = "0xA9FE2C", VA = "0xA9FE2C")]
			set
			{
			}
		}

		[Token(Token = "0x1700020F")]
		public float RotateMix
		{
			[Token(Token = "0x6000EDD")]
			[Address(RVA = "0xA9FE34", Offset = "0xA9FE34", VA = "0xA9FE34")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000EDE")]
			[Address(RVA = "0xA9FE3C", Offset = "0xA9FE3C", VA = "0xA9FE3C")]
			set
			{
			}
		}

		[Token(Token = "0x17000210")]
		public float TranslateMix
		{
			[Token(Token = "0x6000EDF")]
			[Address(RVA = "0xA9FE44", Offset = "0xA9FE44", VA = "0xA9FE44")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000EE0")]
			[Address(RVA = "0xA9FE4C", Offset = "0xA9FE4C", VA = "0xA9FE4C")]
			set
			{
			}
		}

		[Token(Token = "0x6000EE1")]
		[Address(RVA = "0xA9FE54", Offset = "0xA9FE54", VA = "0xA9FE54")]
		public PathConstraintData(string name)
		{
		}

		[Token(Token = "0x6000EE2")]
		[Address(RVA = "0xA9FF54", Offset = "0xA9FF54", VA = "0xA9FF54", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000200")]
	public enum PositionMode
	{
		[Token(Token = "0x4000B49")]
		Fixed,
		[Token(Token = "0x4000B4A")]
		Percent
	}
	[Token(Token = "0x2000201")]
	public enum SpacingMode
	{
		[Token(Token = "0x4000B4C")]
		Length,
		[Token(Token = "0x4000B4D")]
		Fixed,
		[Token(Token = "0x4000B4E")]
		Percent
	}
	[Token(Token = "0x2000202")]
	public enum RotateMode
	{
		[Token(Token = "0x4000B50")]
		Tangent,
		[Token(Token = "0x4000B51")]
		Chain,
		[Token(Token = "0x4000B52")]
		ChainScale
	}
	[Token(Token = "0x2000203")]
	public class Skeleton
	{
		[Token(Token = "0x4000B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal SkeletonData data;

		[Token(Token = "0x4000B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal ExposedList<Bone> bones;

		[Token(Token = "0x4000B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal ExposedList<Slot> slots;

		[Token(Token = "0x4000B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal ExposedList<Slot> drawOrder;

		[Token(Token = "0x4000B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal ExposedList<IkConstraint> ikConstraints;

		[Token(Token = "0x4000B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal ExposedList<TransformConstraint> transformConstraints;

		[Token(Token = "0x4000B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal ExposedList<PathConstraint> pathConstraints;

		[Token(Token = "0x4000B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal ExposedList<IUpdatable> updateCache;

		[Token(Token = "0x4000B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal ExposedList<Bone> updateCacheReset;

		[Token(Token = "0x4000B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal Skin skin;

		[Token(Token = "0x4000B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal float r;

		[Token(Token = "0x4000B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal float g;

		[Token(Token = "0x4000B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal float b;

		[Token(Token = "0x4000B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		internal float a;

		[Token(Token = "0x4000B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal float time;

		[Token(Token = "0x4000B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		internal bool flipX;

		[Token(Token = "0x4000B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		internal bool flipY;

		[Token(Token = "0x4000B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal float x;

		[Token(Token = "0x4000B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		internal float y;

		[Token(Token = "0x17000211")]
		public SkeletonData Data
		{
			[Token(Token = "0x6000EE3")]
			[Address(RVA = "0xAA26B8", Offset = "0xAA26B8", VA = "0xAA26B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000212")]
		public ExposedList<Bone> Bones
		{
			[Token(Token = "0x6000EE4")]
			[Address(RVA = "0xAA26C0", Offset = "0xAA26C0", VA = "0xAA26C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000213")]
		public ExposedList<IUpdatable> UpdateCacheList
		{
			[Token(Token = "0x6000EE5")]
			[Address(RVA = "0xAA26C8", Offset = "0xAA26C8", VA = "0xAA26C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000214")]
		public ExposedList<Slot> Slots
		{
			[Token(Token = "0x6000EE6")]
			[Address(RVA = "0xAA26D0", Offset = "0xAA26D0", VA = "0xAA26D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000215")]
		public ExposedList<Slot> DrawOrder
		{
			[Token(Token = "0x6000EE7")]
			[Address(RVA = "0xAA26D8", Offset = "0xAA26D8", VA = "0xAA26D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000216")]
		public ExposedList<IkConstraint> IkConstraints
		{
			[Token(Token = "0x6000EE8")]
			[Address(RVA = "0xAA26E0", Offset = "0xAA26E0", VA = "0xAA26E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000217")]
		public ExposedList<PathConstraint> PathConstraints
		{
			[Token(Token = "0x6000EE9")]
			[Address(RVA = "0xAA26E8", Offset = "0xAA26E8", VA = "0xAA26E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000218")]
		public ExposedList<TransformConstraint> TransformConstraints
		{
			[Token(Token = "0x6000EEA")]
			[Address(RVA = "0xAA26F0", Offset = "0xAA26F0", VA = "0xAA26F0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000219")]
		public Skin Skin
		{
			[Token(Token = "0x6000EEB")]
			[Address(RVA = "0xAA26F8", Offset = "0xAA26F8", VA = "0xAA26F8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EEC")]
			[Address(RVA = "0xAA2700", Offset = "0xAA2700", VA = "0xAA2700")]
			set
			{
			}
		}

		[Token(Token = "0x1700021A")]
		public float R
		{
			[Token(Token = "0x6000EED")]
			[Address(RVA = "0xAA2708", Offset = "0xAA2708", VA = "0xAA2708")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000EEE")]
			[Address(RVA = "0xAA2710", Offset = "0xAA2710", VA = "0xAA2710")]
			set
			{
			}
		}

		[Token(Token = "0x1700021B")]
		public float G
		{
			[Token(Token = "0x6000EEF")]
			[Address(RVA = "0xAA2718", Offset = "0xAA2718", VA = "0xAA2718")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000EF0")]
			[Address(RVA = "0xAA2720", Offset = "0xAA2720", VA = "0xAA2720")]
			set
			{
			}
		}

		[Token(Token = "0x1700021C")]
		public float B
		{
			[Token(Token = "0x6000EF1")]
			[Address(RVA = "0xAA2728", Offset = "0xAA2728", VA = "0xAA2728")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000EF2")]
			[Address(RVA = "0xAA2730", Offset = "0xAA2730", VA = "0xAA2730")]
			set
			{
			}
		}

		[Token(Token = "0x1700021D")]
		public float A
		{
			[Token(Token = "0x6000EF3")]
			[Address(RVA = "0xAA2738", Offset = "0xAA2738", VA = "0xAA2738")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000EF4")]
			[Address(RVA = "0xAA2740", Offset = "0xAA2740", VA = "0xAA2740")]
			set
			{
			}
		}

		[Token(Token = "0x1700021E")]
		public float Time
		{
			[Token(Token = "0x6000EF5")]
			[Address(RVA = "0xAA2748", Offset = "0xAA2748", VA = "0xAA2748")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000EF6")]
			[Address(RVA = "0xAA2750", Offset = "0xAA2750", VA = "0xAA2750")]
			set
			{
			}
		}

		[Token(Token = "0x1700021F")]
		public float X
		{
			[Token(Token = "0x6000EF7")]
			[Address(RVA = "0xAA2758", Offset = "0xAA2758", VA = "0xAA2758")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000EF8")]
			[Address(RVA = "0xAA2760", Offset = "0xAA2760", VA = "0xAA2760")]
			set
			{
			}
		}

		[Token(Token = "0x17000220")]
		public float Y
		{
			[Token(Token = "0x6000EF9")]
			[Address(RVA = "0xAA2768", Offset = "0xAA2768", VA = "0xAA2768")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000EFA")]
			[Address(RVA = "0xAA2770", Offset = "0xAA2770", VA = "0xAA2770")]
			set
			{
			}
		}

		[Token(Token = "0x17000221")]
		public bool FlipX
		{
			[Token(Token = "0x6000EFB")]
			[Address(RVA = "0xAA2778", Offset = "0xAA2778", VA = "0xAA2778")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000EFC")]
			[Address(RVA = "0xAA2780", Offset = "0xAA2780", VA = "0xAA2780")]
			set
			{
			}
		}

		[Token(Token = "0x17000222")]
		public bool FlipY
		{
			[Token(Token = "0x6000EFD")]
			[Address(RVA = "0xAA2788", Offset = "0xAA2788", VA = "0xAA2788")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000EFE")]
			[Address(RVA = "0xAA2790", Offset = "0xAA2790", VA = "0xAA2790")]
			set
			{
			}
		}

		[Token(Token = "0x17000223")]
		public Bone RootBone
		{
			[Token(Token = "0x6000EFF")]
			[Address(RVA = "0xAA2798", Offset = "0xAA2798", VA = "0xAA2798")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F00")]
		[Address(RVA = "0xAA2818", Offset = "0xAA2818", VA = "0xAA2818")]
		public Skeleton(SkeletonData data)
		{
		}

		[Token(Token = "0x6000F01")]
		[Address(RVA = "0xAA3470", Offset = "0xAA3470", VA = "0xAA3470")]
		public void UpdateCache()
		{
		}

		[Token(Token = "0x6000F02")]
		[Address(RVA = "0xAA3BA8", Offset = "0xAA3BA8", VA = "0xAA3BA8")]
		private void SortIkConstraint(IkConstraint constraint)
		{
		}

		[Token(Token = "0x6000F03")]
		[Address(RVA = "0xAA40F4", Offset = "0xAA40F4", VA = "0xAA40F4")]
		private void SortPathConstraint(PathConstraint constraint)
		{
		}

		[Token(Token = "0x6000F04")]
		[Address(RVA = "0xAA3DF0", Offset = "0xAA3DF0", VA = "0xAA3DF0")]
		private void SortTransformConstraint(TransformConstraint constraint)
		{
		}

		[Token(Token = "0x6000F05")]
		[Address(RVA = "0xAA461C", Offset = "0xAA461C", VA = "0xAA461C")]
		private void SortPathConstraintAttachment(Skin skin, int slotIndex, Bone slotBone)
		{
		}

		[Token(Token = "0x6000F06")]
		[Address(RVA = "0xAA477C", Offset = "0xAA477C", VA = "0xAA477C")]
		private void SortPathConstraintAttachment(Attachment attachment, Bone slotBone)
		{
		}

		[Token(Token = "0x6000F07")]
		[Address(RVA = "0xAA44B8", Offset = "0xAA44B8", VA = "0xAA44B8")]
		private void SortBone(Bone bone)
		{
		}

		[Token(Token = "0x6000F08")]
		[Address(RVA = "0xAA456C", Offset = "0xAA456C", VA = "0xAA456C")]
		private static void SortReset(ExposedList<Bone> bones)
		{
		}

		[Token(Token = "0x6000F09")]
		[Address(RVA = "0xAA38A4", Offset = "0xAA38A4", VA = "0xAA38A4")]
		public void UpdateWorldTransform()
		{
		}

		[Token(Token = "0x6000F0A")]
		[Address(RVA = "0xAA4930", Offset = "0xAA4930", VA = "0xAA4930")]
		public void SetToSetupPose()
		{
		}

		[Token(Token = "0x6000F0B")]
		[Address(RVA = "0xAA494C", Offset = "0xAA494C", VA = "0xAA494C")]
		public void SetBonesToSetupPose()
		{
		}

		[Token(Token = "0x6000F0C")]
		[Address(RVA = "0xAA4CD0", Offset = "0xAA4CD0", VA = "0xAA4CD0")]
		public void SetSlotsToSetupPose()
		{
		}

		[Token(Token = "0x6000F0D")]
		[Address(RVA = "0xA9AF40", Offset = "0xA9AF40", VA = "0xA9AF40")]
		public Bone FindBone(string boneName)
		{
			return null;
		}

		[Token(Token = "0x6000F0E")]
		[Address(RVA = "0xAA4E78", Offset = "0xAA4E78", VA = "0xAA4E78")]
		public int FindBoneIndex(string boneName)
		{
			return default(int);
		}

		[Token(Token = "0x6000F0F")]
		[Address(RVA = "0xA9D388", Offset = "0xA9D388", VA = "0xA9D388")]
		public Slot FindSlot(string slotName)
		{
			return null;
		}

		[Token(Token = "0x6000F10")]
		[Address(RVA = "0xAA5008", Offset = "0xAA5008", VA = "0xAA5008")]
		public int FindSlotIndex(string slotName)
		{
			return default(int);
		}

		[Token(Token = "0x6000F11")]
		[Address(RVA = "0xAA51AC", Offset = "0xAA51AC", VA = "0xAA51AC")]
		public void SetSkin(string skinName)
		{
		}

		[Token(Token = "0x6000F12")]
		[Address(RVA = "0xAA52B0", Offset = "0xAA52B0", VA = "0xAA52B0")]
		public void SetSkin(Skin newSkin)
		{
		}

		[Token(Token = "0x6000F13")]
		[Address(RVA = "0xAA53B8", Offset = "0xAA53B8", VA = "0xAA53B8")]
		public Attachment GetAttachment(string slotName, string attachmentName)
		{
			return null;
		}

		[Token(Token = "0x6000F14")]
		[Address(RVA = "0xA961DC", Offset = "0xA961DC", VA = "0xA961DC")]
		public Attachment GetAttachment(int slotIndex, string attachmentName)
		{
			return null;
		}

		[Token(Token = "0x6000F15")]
		[Address(RVA = "0xAA5404", Offset = "0xAA5404", VA = "0xAA5404")]
		public void SetAttachment(string slotName, string attachmentName)
		{
		}

		[Token(Token = "0x6000F16")]
		[Address(RVA = "0xAA5678", Offset = "0xAA5678", VA = "0xAA5678")]
		public IkConstraint FindIkConstraint(string constraintName)
		{
			return null;
		}

		[Token(Token = "0x6000F17")]
		[Address(RVA = "0xAA57E4", Offset = "0xAA57E4", VA = "0xAA57E4")]
		public TransformConstraint FindTransformConstraint(string constraintName)
		{
			return null;
		}

		[Token(Token = "0x6000F18")]
		[Address(RVA = "0xAA5950", Offset = "0xAA5950", VA = "0xAA5950")]
		public PathConstraint FindPathConstraint(string constraintName)
		{
			return null;
		}

		[Token(Token = "0x6000F19")]
		[Address(RVA = "0xAA5AD0", Offset = "0xAA5AD0", VA = "0xAA5AD0")]
		public void Update(float delta)
		{
		}

		[Token(Token = "0x6000F1A")]
		[Address(RVA = "0xAA5AE4", Offset = "0xAA5AE4", VA = "0xAA5AE4")]
		public void GetBounds(out float x, out float y, out float width, out float height, ref float[] vertexBuffer)
		{
		}
	}
	[Token(Token = "0x2000204")]
	public class SkeletonBinary
	{
		[Token(Token = "0x200055D")]
		internal class Vertices
		{
			[Token(Token = "0x4001F05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int[] bones;

			[Token(Token = "0x4001F06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public float[] vertices;

			[Token(Token = "0x6001D9E")]
			[Address(RVA = "0xF46200", Offset = "0xF46200", VA = "0xF46200")]
			public Vertices()
			{
			}
		}

		[Token(Token = "0x4000B66")]
		public const int BONE_ROTATE = 0;

		[Token(Token = "0x4000B67")]
		public const int BONE_TRANSLATE = 1;

		[Token(Token = "0x4000B68")]
		public const int BONE_SCALE = 2;

		[Token(Token = "0x4000B69")]
		public const int BONE_SHEAR = 3;

		[Token(Token = "0x4000B6A")]
		public const int SLOT_ATTACHMENT = 0;

		[Token(Token = "0x4000B6B")]
		public const int SLOT_COLOR = 1;

		[Token(Token = "0x4000B6C")]
		public const int SLOT_TWO_COLOR = 2;

		[Token(Token = "0x4000B6D")]
		public const int PATH_POSITION = 0;

		[Token(Token = "0x4000B6E")]
		public const int PATH_SPACING = 1;

		[Token(Token = "0x4000B6F")]
		public const int PATH_MIX = 2;

		[Token(Token = "0x4000B70")]
		public const int CURVE_LINEAR = 0;

		[Token(Token = "0x4000B71")]
		public const int CURVE_STEPPED = 1;

		[Token(Token = "0x4000B72")]
		public const int CURVE_BEZIER = 2;

		[Token(Token = "0x4000B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F40E0", Offset = "0x2F40E0")]
		private float <Scale>k__BackingField;

		[Token(Token = "0x4000B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private AttachmentLoader attachmentLoader;

		[Token(Token = "0x4000B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private byte[] buffer;

		[Token(Token = "0x4000B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private List<SkeletonJson.LinkedMesh> linkedMeshes;

		[Token(Token = "0x4000B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly TransformMode[] TransformModeValues;

		[Token(Token = "0x17000224")]
		public float Scale
		{
			[Token(Token = "0x6000F1B")]
			[Address(RVA = "0xF3ECC0", Offset = "0xF3ECC0", VA = "0xF3ECC0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB0D4", Offset = "0x2FB0D4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F1C")]
			[Address(RVA = "0xF3ECC8", Offset = "0xF3ECC8", VA = "0xF3ECC8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB0E4", Offset = "0x2FB0E4")]
			set
			{
			}
		}

		[Token(Token = "0x6000F1D")]
		[Address(RVA = "0xF3ECD0", Offset = "0xF3ECD0", VA = "0xF3ECD0")]
		public SkeletonBinary(params Atlas[] atlasArray)
		{
		}

		[Token(Token = "0x6000F1E")]
		[Address(RVA = "0xF3ED50", Offset = "0xF3ED50", VA = "0xF3ED50")]
		public SkeletonBinary(AttachmentLoader attachmentLoader)
		{
		}

		[Token(Token = "0x6000F1F")]
		[Address(RVA = "0xF3EE64", Offset = "0xF3EE64", VA = "0xF3EE64")]
		public SkeletonData ReadSkeletonData(string path)
		{
			return null;
		}

		[Token(Token = "0x6000F20")]
		[Address(RVA = "0xF40CE0", Offset = "0xF40CE0", VA = "0xF40CE0")]
		public static string GetVersionString(Stream input)
		{
			return null;
		}

		[Token(Token = "0x6000F21")]
		[Address(RVA = "0xF3F034", Offset = "0xF3F034", VA = "0xF3F034")]
		public SkeletonData ReadSkeletonData(Stream input)
		{
			return null;
		}

		[Token(Token = "0x6000F22")]
		[Address(RVA = "0xF41BE4", Offset = "0xF41BE4", VA = "0xF41BE4")]
		private Skin ReadSkin(Stream input, SkeletonData skeletonData, string skinName, bool nonessential)
		{
			return null;
		}

		[Token(Token = "0x6000F23")]
		[Address(RVA = "0xF44A74", Offset = "0xF44A74", VA = "0xF44A74")]
		private Attachment ReadAttachment(Stream input, SkeletonData skeletonData, Skin skin, int slotIndex, string attachmentName, bool nonessential)
		{
			return null;
		}

		[Token(Token = "0x6000F24")]
		[Address(RVA = "0xF45B1C", Offset = "0xF45B1C", VA = "0xF45B1C")]
		private Vertices ReadVertices(Stream input, int vertexCount)
		{
			return null;
		}

		[Token(Token = "0x6000F25")]
		[Address(RVA = "0xF45F1C", Offset = "0xF45F1C", VA = "0xF45F1C")]
		private float[] ReadFloatArray(Stream input, int n, float scale)
		{
			return null;
		}

		[Token(Token = "0x6000F26")]
		[Address(RVA = "0xF46078", Offset = "0xF46078", VA = "0xF46078")]
		private int[] ReadShortArray(Stream input)
		{
			return null;
		}

		[Token(Token = "0x6000F27")]
		[Address(RVA = "0xF42048", Offset = "0xF42048", VA = "0xF42048")]
		private void ReadAnimation(string name, Stream input, SkeletonData skeletonData)
		{
		}

		[Token(Token = "0x6000F28")]
		[Address(RVA = "0xF46208", Offset = "0xF46208", VA = "0xF46208")]
		private void ReadCurve(Stream input, int frameIndex, CurveTimeline timeline)
		{
		}

		[Token(Token = "0x6000F29")]
		[Address(RVA = "0xF41A28", Offset = "0xF41A28", VA = "0xF41A28")]
		private static sbyte ReadSByte(Stream input)
		{
			return default(sbyte);
		}

		[Token(Token = "0x6000F2A")]
		[Address(RVA = "0xF41790", Offset = "0xF41790", VA = "0xF41790")]
		private static bool ReadBoolean(Stream input)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F2B")]
		[Address(RVA = "0xF415C0", Offset = "0xF415C0", VA = "0xF415C0")]
		private float ReadFloat(Stream input)
		{
			return default(float);
		}

		[Token(Token = "0x6000F2C")]
		[Address(RVA = "0xF417CC", Offset = "0xF417CC", VA = "0xF417CC")]
		private static int ReadInt(Stream input)
		{
			return default(int);
		}

		[Token(Token = "0x6000F2D")]
		[Address(RVA = "0xF4106C", Offset = "0xF4106C", VA = "0xF4106C")]
		private static int ReadVarint(Stream input, bool optimizePositive)
		{
			return default(int);
		}

		[Token(Token = "0x6000F2E")]
		[Address(RVA = "0xF41444", Offset = "0xF41444", VA = "0xF41444")]
		private string ReadString(Stream input)
		{
			return null;
		}

		[Token(Token = "0x6000F2F")]
		[Address(RVA = "0xF41154", Offset = "0xF41154", VA = "0xF41154")]
		private static void ReadFully(Stream input, byte[] buffer, int offset, int length)
		{
		}
	}
	[Token(Token = "0x2000205")]
	public class SkeletonBounds
	{
		[Token(Token = "0x4000B78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private ExposedList<Polygon> polygonPool;

		[Token(Token = "0x4000B79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private float minX;

		[Token(Token = "0x4000B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float minY;

		[Token(Token = "0x4000B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float maxX;

		[Token(Token = "0x4000B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float maxY;

		[Token(Token = "0x4000B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F40F0", Offset = "0x2F40F0")]
		private ExposedList<BoundingBoxAttachment> <BoundingBoxes>k__BackingField;

		[Token(Token = "0x4000B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F4100", Offset = "0x2F4100")]
		private ExposedList<Polygon> <Polygons>k__BackingField;

		[Token(Token = "0x17000225")]
		public ExposedList<BoundingBoxAttachment> BoundingBoxes
		{
			[Token(Token = "0x6000F31")]
			[Address(RVA = "0xF46974", Offset = "0xF46974", VA = "0xF46974")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB0F4", Offset = "0x2FB0F4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F32")]
			[Address(RVA = "0xF4697C", Offset = "0xF4697C", VA = "0xF4697C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB104", Offset = "0x2FB104")]
			private set
			{
			}
		}

		[Token(Token = "0x17000226")]
		public ExposedList<Polygon> Polygons
		{
			[Token(Token = "0x6000F33")]
			[Address(RVA = "0xF46984", Offset = "0xF46984", VA = "0xF46984")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB114", Offset = "0x2FB114")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F34")]
			[Address(RVA = "0xF4698C", Offset = "0xF4698C", VA = "0xF4698C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB124", Offset = "0x2FB124")]
			private set
			{
			}
		}

		[Token(Token = "0x17000227")]
		public float MinX
		{
			[Token(Token = "0x6000F35")]
			[Address(RVA = "0xF46994", Offset = "0xF46994", VA = "0xF46994")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F36")]
			[Address(RVA = "0xF4699C", Offset = "0xF4699C", VA = "0xF4699C")]
			set
			{
			}
		}

		[Token(Token = "0x17000228")]
		public float MinY
		{
			[Token(Token = "0x6000F37")]
			[Address(RVA = "0xF469A4", Offset = "0xF469A4", VA = "0xF469A4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F38")]
			[Address(RVA = "0xF469AC", Offset = "0xF469AC", VA = "0xF469AC")]
			set
			{
			}
		}

		[Token(Token = "0x17000229")]
		public float MaxX
		{
			[Token(Token = "0x6000F39")]
			[Address(RVA = "0xF469B4", Offset = "0xF469B4", VA = "0xF469B4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F3A")]
			[Address(RVA = "0xF469BC", Offset = "0xF469BC", VA = "0xF469BC")]
			set
			{
			}
		}

		[Token(Token = "0x1700022A")]
		public float MaxY
		{
			[Token(Token = "0x6000F3B")]
			[Address(RVA = "0xF469C4", Offset = "0xF469C4", VA = "0xF469C4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F3C")]
			[Address(RVA = "0xF469CC", Offset = "0xF469CC", VA = "0xF469CC")]
			set
			{
			}
		}

		[Token(Token = "0x1700022B")]
		public float Width
		{
			[Token(Token = "0x6000F3D")]
			[Address(RVA = "0xF469D4", Offset = "0xF469D4", VA = "0xF469D4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700022C")]
		public float Height
		{
			[Token(Token = "0x6000F3E")]
			[Address(RVA = "0xF469E8", Offset = "0xF469E8", VA = "0xF469E8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000F3F")]
		[Address(RVA = "0xF469FC", Offset = "0xF469FC", VA = "0xF469FC")]
		public SkeletonBounds()
		{
		}

		[Token(Token = "0x6000F40")]
		[Address(RVA = "0xF46AD8", Offset = "0xF46AD8", VA = "0xF46AD8")]
		public void Update(Skeleton skeleton, bool updateAabb)
		{
		}

		[Token(Token = "0x6000F41")]
		[Address(RVA = "0xF46F38", Offset = "0xF46F38", VA = "0xF46F38")]
		private void AabbCompute()
		{
		}

		[Token(Token = "0x6000F42")]
		[Address(RVA = "0xF471B0", Offset = "0xF471B0", VA = "0xF471B0")]
		public bool AabbContainsPoint(float x, float y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F43")]
		[Address(RVA = "0xF47208", Offset = "0xF47208", VA = "0xF47208")]
		public bool AabbIntersectsSegment(float x1, float y1, float x2, float y2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F44")]
		[Address(RVA = "0xF4732C", Offset = "0xF4732C", VA = "0xF4732C")]
		public bool AabbIntersectsSkeleton(SkeletonBounds bounds)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F45")]
		[Address(RVA = "0xF473B0", Offset = "0xF473B0", VA = "0xF473B0")]
		public bool ContainsPoint(Polygon polygon, float x, float y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F46")]
		[Address(RVA = "0xF4753C", Offset = "0xF4753C", VA = "0xF4753C")]
		public BoundingBoxAttachment ContainsPoint(float x, float y)
		{
			return null;
		}

		[Token(Token = "0x6000F47")]
		[Address(RVA = "0xF47638", Offset = "0xF47638", VA = "0xF47638")]
		public BoundingBoxAttachment IntersectsSegment(float x1, float y1, float x2, float y2)
		{
			return null;
		}

		[Token(Token = "0x6000F48")]
		[Address(RVA = "0xF47758", Offset = "0xF47758", VA = "0xF47758")]
		public bool IntersectsSegment(Polygon polygon, float x1, float y1, float x2, float y2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F49")]
		[Address(RVA = "0xF4799C", Offset = "0xF4799C", VA = "0xF4799C")]
		public Polygon GetPolygon(BoundingBoxAttachment attachment)
		{
			return null;
		}
	}
	[Token(Token = "0x2000206")]
	public class Polygon
	{
		[Token(Token = "0x4000B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F4110", Offset = "0x2F4110")]
		private float[] <Vertices>k__BackingField;

		[Token(Token = "0x4000B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F4120", Offset = "0x2F4120")]
		private int <Count>k__BackingField;

		[Token(Token = "0x1700022D")]
		public float[] Vertices
		{
			[Token(Token = "0x6000F4A")]
			[Address(RVA = "0xAA0F68", Offset = "0xAA0F68", VA = "0xAA0F68")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB134", Offset = "0x2FB134")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F4B")]
			[Address(RVA = "0xAA0F70", Offset = "0xAA0F70", VA = "0xAA0F70")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB144", Offset = "0x2FB144")]
			set
			{
			}
		}

		[Token(Token = "0x1700022E")]
		public int Count
		{
			[Token(Token = "0x6000F4C")]
			[Address(RVA = "0xAA0F78", Offset = "0xAA0F78", VA = "0xAA0F78")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB154", Offset = "0x2FB154")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000F4D")]
			[Address(RVA = "0xAA0F80", Offset = "0xAA0F80", VA = "0xAA0F80")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB164", Offset = "0x2FB164")]
			set
			{
			}
		}

		[Token(Token = "0x6000F4E")]
		[Address(RVA = "0xAA0F88", Offset = "0xAA0F88", VA = "0xAA0F88")]
		public Polygon()
		{
		}
	}
	[Token(Token = "0x2000207")]
	public class SkeletonClipping
	{
		[Token(Token = "0x4000B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal readonly Triangulator triangulator;

		[Token(Token = "0x4000B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal readonly ExposedList<float> clippingPolygon;

		[Token(Token = "0x4000B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal readonly ExposedList<float> clipOutput;

		[Token(Token = "0x4000B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal readonly ExposedList<float> clippedVertices;

		[Token(Token = "0x4000B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal readonly ExposedList<int> clippedTriangles;

		[Token(Token = "0x4000B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal readonly ExposedList<float> clippedUVs;

		[Token(Token = "0x4000B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal readonly ExposedList<float> scratch;

		[Token(Token = "0x4000B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal ClippingAttachment clipAttachment;

		[Token(Token = "0x4000B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal ExposedList<ExposedList<float>> clippingPolygons;

		[Token(Token = "0x1700022F")]
		public ExposedList<float> ClippedVertices
		{
			[Token(Token = "0x6000F4F")]
			[Address(RVA = "0xF47A7C", Offset = "0xF47A7C", VA = "0xF47A7C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000230")]
		public ExposedList<int> ClippedTriangles
		{
			[Token(Token = "0x6000F50")]
			[Address(RVA = "0xF47A84", Offset = "0xF47A84", VA = "0xF47A84")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000231")]
		public ExposedList<float> ClippedUVs
		{
			[Token(Token = "0x6000F51")]
			[Address(RVA = "0xF47A8C", Offset = "0xF47A8C", VA = "0xF47A8C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000232")]
		public bool IsClipping
		{
			[Token(Token = "0x6000F52")]
			[Address(RVA = "0xF47A94", Offset = "0xF47A94", VA = "0xF47A94")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000F53")]
		[Address(RVA = "0xF47AA4", Offset = "0xF47AA4", VA = "0xF47AA4")]
		public int ClipStart(Slot slot, ClippingAttachment clip)
		{
			return default(int);
		}

		[Token(Token = "0x6000F54")]
		[Address(RVA = "0xF49FB8", Offset = "0xF49FB8", VA = "0xF49FB8")]
		public void ClipEnd(Slot slot)
		{
		}

		[Token(Token = "0x6000F55")]
		[Address(RVA = "0xF4A004", Offset = "0xF4A004", VA = "0xF4A004")]
		public void ClipEnd()
		{
		}

		[Token(Token = "0x6000F56")]
		[Address(RVA = "0xF4A0F8", Offset = "0xF4A0F8", VA = "0xF4A0F8")]
		public void ClipTriangles(float[] vertices, int verticesLength, int[] triangles, int trianglesLength, float[] uvs)
		{
		}

		[Token(Token = "0x6000F57")]
		[Address(RVA = "0xF4ADC4", Offset = "0xF4ADC4", VA = "0xF4ADC4")]
		internal bool Clip(float x1, float y1, float x2, float y2, float x3, float y3, ExposedList<float> clippingArea, ExposedList<float> output)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F58")]
		[Address(RVA = "0xF47DB4", Offset = "0xF47DB4", VA = "0xF47DB4")]
		private static void MakeClockwise(ExposedList<float> polygon)
		{
		}

		[Token(Token = "0x6000F59")]
		[Address(RVA = "0xF4B7A4", Offset = "0xF4B7A4", VA = "0xF4B7A4")]
		public SkeletonClipping()
		{
		}
	}
	[Token(Token = "0x2000208")]
	public class SkeletonData
	{
		[Token(Token = "0x4000B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal string name;

		[Token(Token = "0x4000B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal ExposedList<BoneData> bones;

		[Token(Token = "0x4000B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal ExposedList<SlotData> slots;

		[Token(Token = "0x4000B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal ExposedList<Skin> skins;

		[Token(Token = "0x4000B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal Skin defaultSkin;

		[Token(Token = "0x4000B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal ExposedList<EventData> events;

		[Token(Token = "0x4000B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal ExposedList<Animation> animations;

		[Token(Token = "0x4000B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal ExposedList<IkConstraintData> ikConstraints;

		[Token(Token = "0x4000B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal ExposedList<TransformConstraintData> transformConstraints;

		[Token(Token = "0x4000B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal ExposedList<PathConstraintData> pathConstraints;

		[Token(Token = "0x4000B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal float width;

		[Token(Token = "0x4000B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal float height;

		[Token(Token = "0x4000B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal string version;

		[Token(Token = "0x4000B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		internal string hash;

		[Token(Token = "0x4000B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal float fps;

		[Token(Token = "0x4000B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		internal string imagesPath;

		[Token(Token = "0x17000233")]
		public string Name
		{
			[Token(Token = "0x6000F5A")]
			[Address(RVA = "0xF4BABC", Offset = "0xF4BABC", VA = "0xF4BABC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F5B")]
			[Address(RVA = "0xF4BAC4", Offset = "0xF4BAC4", VA = "0xF4BAC4")]
			set
			{
			}
		}

		[Token(Token = "0x17000234")]
		public ExposedList<BoneData> Bones
		{
			[Token(Token = "0x6000F5C")]
			[Address(RVA = "0xF4BACC", Offset = "0xF4BACC", VA = "0xF4BACC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000235")]
		public ExposedList<SlotData> Slots
		{
			[Token(Token = "0x6000F5D")]
			[Address(RVA = "0xF4BAD4", Offset = "0xF4BAD4", VA = "0xF4BAD4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000236")]
		public ExposedList<Skin> Skins
		{
			[Token(Token = "0x6000F5E")]
			[Address(RVA = "0xF4BADC", Offset = "0xF4BADC", VA = "0xF4BADC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F5F")]
			[Address(RVA = "0xF4BAE4", Offset = "0xF4BAE4", VA = "0xF4BAE4")]
			set
			{
			}
		}

		[Token(Token = "0x17000237")]
		public Skin DefaultSkin
		{
			[Token(Token = "0x6000F60")]
			[Address(RVA = "0xF4BAEC", Offset = "0xF4BAEC", VA = "0xF4BAEC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F61")]
			[Address(RVA = "0xF4BAF4", Offset = "0xF4BAF4", VA = "0xF4BAF4")]
			set
			{
			}
		}

		[Token(Token = "0x17000238")]
		public ExposedList<EventData> Events
		{
			[Token(Token = "0x6000F62")]
			[Address(RVA = "0xF4BAFC", Offset = "0xF4BAFC", VA = "0xF4BAFC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F63")]
			[Address(RVA = "0xF4BB04", Offset = "0xF4BB04", VA = "0xF4BB04")]
			set
			{
			}
		}

		[Token(Token = "0x17000239")]
		public ExposedList<Animation> Animations
		{
			[Token(Token = "0x6000F64")]
			[Address(RVA = "0xF4BB0C", Offset = "0xF4BB0C", VA = "0xF4BB0C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F65")]
			[Address(RVA = "0xF4BB14", Offset = "0xF4BB14", VA = "0xF4BB14")]
			set
			{
			}
		}

		[Token(Token = "0x1700023A")]
		public ExposedList<IkConstraintData> IkConstraints
		{
			[Token(Token = "0x6000F66")]
			[Address(RVA = "0xF4BB1C", Offset = "0xF4BB1C", VA = "0xF4BB1C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F67")]
			[Address(RVA = "0xF4BB24", Offset = "0xF4BB24", VA = "0xF4BB24")]
			set
			{
			}
		}

		[Token(Token = "0x1700023B")]
		public ExposedList<TransformConstraintData> TransformConstraints
		{
			[Token(Token = "0x6000F68")]
			[Address(RVA = "0xF4BB2C", Offset = "0xF4BB2C", VA = "0xF4BB2C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F69")]
			[Address(RVA = "0xF4BB34", Offset = "0xF4BB34", VA = "0xF4BB34")]
			set
			{
			}
		}

		[Token(Token = "0x1700023C")]
		public ExposedList<PathConstraintData> PathConstraints
		{
			[Token(Token = "0x6000F6A")]
			[Address(RVA = "0xF4BB3C", Offset = "0xF4BB3C", VA = "0xF4BB3C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F6B")]
			[Address(RVA = "0xF4BB44", Offset = "0xF4BB44", VA = "0xF4BB44")]
			set
			{
			}
		}

		[Token(Token = "0x1700023D")]
		public float Width
		{
			[Token(Token = "0x6000F6C")]
			[Address(RVA = "0xF4BB4C", Offset = "0xF4BB4C", VA = "0xF4BB4C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F6D")]
			[Address(RVA = "0xF4BB54", Offset = "0xF4BB54", VA = "0xF4BB54")]
			set
			{
			}
		}

		[Token(Token = "0x1700023E")]
		public float Height
		{
			[Token(Token = "0x6000F6E")]
			[Address(RVA = "0xF4BB5C", Offset = "0xF4BB5C", VA = "0xF4BB5C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F6F")]
			[Address(RVA = "0xF4BB64", Offset = "0xF4BB64", VA = "0xF4BB64")]
			set
			{
			}
		}

		[Token(Token = "0x1700023F")]
		public string Version
		{
			[Token(Token = "0x6000F70")]
			[Address(RVA = "0xF4BB6C", Offset = "0xF4BB6C", VA = "0xF4BB6C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F71")]
			[Address(RVA = "0xF4BB74", Offset = "0xF4BB74", VA = "0xF4BB74")]
			set
			{
			}
		}

		[Token(Token = "0x17000240")]
		public string Hash
		{
			[Token(Token = "0x6000F72")]
			[Address(RVA = "0xF4BB7C", Offset = "0xF4BB7C", VA = "0xF4BB7C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F73")]
			[Address(RVA = "0xF4BB84", Offset = "0xF4BB84", VA = "0xF4BB84")]
			set
			{
			}
		}

		[Token(Token = "0x17000241")]
		public string ImagesPath
		{
			[Token(Token = "0x6000F74")]
			[Address(RVA = "0xF4BB8C", Offset = "0xF4BB8C", VA = "0xF4BB8C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F75")]
			[Address(RVA = "0xF4BB94", Offset = "0xF4BB94", VA = "0xF4BB94")]
			set
			{
			}
		}

		[Token(Token = "0x17000242")]
		public float Fps
		{
			[Token(Token = "0x6000F76")]
			[Address(RVA = "0xF4BB9C", Offset = "0xF4BB9C", VA = "0xF4BB9C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F77")]
			[Address(RVA = "0xF4BBA4", Offset = "0xF4BBA4", VA = "0xF4BBA4")]
			set
			{
			}
		}

		[Token(Token = "0x6000F78")]
		[Address(RVA = "0xF4BBAC", Offset = "0xF4BBAC", VA = "0xF4BBAC")]
		public BoneData FindBone(string boneName)
		{
			return null;
		}

		[Token(Token = "0x6000F79")]
		[Address(RVA = "0xF4BD18", Offset = "0xF4BD18", VA = "0xF4BD18")]
		public int FindBoneIndex(string boneName)
		{
			return default(int);
		}

		[Token(Token = "0x6000F7A")]
		[Address(RVA = "0xF4BE94", Offset = "0xF4BE94", VA = "0xF4BE94")]
		public SlotData FindSlot(string slotName)
		{
			return null;
		}

		[Token(Token = "0x6000F7B")]
		[Address(RVA = "0xF4BFEC", Offset = "0xF4BFEC", VA = "0xF4BFEC")]
		public int FindSlotIndex(string slotName)
		{
			return default(int);
		}

		[Token(Token = "0x6000F7C")]
		[Address(RVA = "0xF41DA0", Offset = "0xF41DA0", VA = "0xF41DA0")]
		public Skin FindSkin(string skinName)
		{
			return null;
		}

		[Token(Token = "0x6000F7D")]
		[Address(RVA = "0xF4C14C", Offset = "0xF4C14C", VA = "0xF4C14C")]
		public EventData FindEvent(string eventDataName)
		{
			return null;
		}

		[Token(Token = "0x6000F7E")]
		[Address(RVA = "0xF4C320", Offset = "0xF4C320", VA = "0xF4C320")]
		public Animation FindAnimation(string animationName)
		{
			return null;
		}

		[Token(Token = "0x6000F7F")]
		[Address(RVA = "0xF4C478", Offset = "0xF4C478", VA = "0xF4C478")]
		public IkConstraintData FindIkConstraint(string constraintName)
		{
			return null;
		}

		[Token(Token = "0x6000F80")]
		[Address(RVA = "0xF4C5D0", Offset = "0xF4C5D0", VA = "0xF4C5D0")]
		public TransformConstraintData FindTransformConstraint(string constraintName)
		{
			return null;
		}

		[Token(Token = "0x6000F81")]
		[Address(RVA = "0xF4C728", Offset = "0xF4C728", VA = "0xF4C728")]
		public PathConstraintData FindPathConstraint(string constraintName)
		{
			return null;
		}

		[Token(Token = "0x6000F82")]
		[Address(RVA = "0xF4C894", Offset = "0xF4C894", VA = "0xF4C894")]
		public int FindPathConstraintIndex(string pathConstraintName)
		{
			return default(int);
		}

		[Token(Token = "0x6000F83")]
		[Address(RVA = "0xF4CA08", Offset = "0xF4CA08", VA = "0xF4CA08", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000F84")]
		[Address(RVA = "0xF4124C", Offset = "0xF4124C", VA = "0xF4124C")]
		public SkeletonData()
		{
		}
	}
	[Token(Token = "0x2000209")]
	public class SkeletonJson
	{
		[Token(Token = "0x200055E")]
		internal class LinkedMesh
		{
			[Token(Token = "0x4001F07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal string parent;

			[Token(Token = "0x4001F08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal string skin;

			[Token(Token = "0x4001F09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal int slotIndex;

			[Token(Token = "0x4001F0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal MeshAttachment mesh;

			[Token(Token = "0x6001D9F")]
			[Address(RVA = "0xF461C8", Offset = "0xF461C8", VA = "0xF461C8")]
			public LinkedMesh(MeshAttachment mesh, string skin, int slotIndex, string parent)
			{
			}
		}

		[Token(Token = "0x4000B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F4130", Offset = "0x2F4130")]
		private float <Scale>k__BackingField;

		[Token(Token = "0x4000B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private AttachmentLoader attachmentLoader;

		[Token(Token = "0x4000B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<LinkedMesh> linkedMeshes;

		[Token(Token = "0x17000243")]
		public float Scale
		{
			[Token(Token = "0x6000F85")]
			[Address(RVA = "0xF4DD9C", Offset = "0xF4DD9C", VA = "0xF4DD9C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB174", Offset = "0x2FB174")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F86")]
			[Address(RVA = "0xF4DDA4", Offset = "0xF4DDA4", VA = "0xF4DDA4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB184", Offset = "0x2FB184")]
			set
			{
			}
		}

		[Token(Token = "0x6000F87")]
		[Address(RVA = "0xF4DDAC", Offset = "0xF4DDAC", VA = "0xF4DDAC")]
		public SkeletonJson(params Atlas[] atlasArray)
		{
		}

		[Token(Token = "0x6000F88")]
		[Address(RVA = "0xF4DE2C", Offset = "0xF4DE2C", VA = "0xF4DE2C")]
		public SkeletonJson(AttachmentLoader attachmentLoader)
		{
		}

		[Token(Token = "0x6000F89")]
		[Address(RVA = "0xF4DF34", Offset = "0xF4DF34", VA = "0xF4DF34")]
		public SkeletonData ReadSkeletonData(string path)
		{
			return null;
		}

		[Token(Token = "0x6000F8A")]
		[Address(RVA = "0xF4E128", Offset = "0xF4E128", VA = "0xF4E128")]
		public SkeletonData ReadSkeletonData(TextReader reader)
		{
			return null;
		}

		[Token(Token = "0x6000F8B")]
		[Address(RVA = "0xF533E8", Offset = "0xF533E8", VA = "0xF533E8")]
		private Attachment ReadAttachment(Dictionary<string, object> map, Skin skin, int slotIndex, string name, SkeletonData skeletonData)
		{
			return null;
		}

		[Token(Token = "0x6000F8C")]
		[Address(RVA = "0xF5B354", Offset = "0xF5B354", VA = "0xF5B354")]
		private void ReadVertices(Dictionary<string, object> map, VertexAttachment attachment, int verticesLength)
		{
		}

		[Token(Token = "0x6000F8D")]
		[Address(RVA = "0xF54230", Offset = "0xF54230", VA = "0xF54230")]
		private void ReadAnimation(Dictionary<string, object> map, string name, SkeletonData skeletonData)
		{
		}

		[Token(Token = "0x6000F8E")]
		[Address(RVA = "0xF5BC7C", Offset = "0xF5BC7C", VA = "0xF5BC7C")]
		private static void ReadCurve(Dictionary<string, object> valueMap, CurveTimeline timeline, int frameIndex)
		{
		}

		[Token(Token = "0x6000F8F")]
		[Address(RVA = "0xF5B7AC", Offset = "0xF5B7AC", VA = "0xF5B7AC")]
		private static float[] GetFloatArray(Dictionary<string, object> map, string name, float scale)
		{
			return null;
		}

		[Token(Token = "0x6000F90")]
		[Address(RVA = "0xF5BA8C", Offset = "0xF5BA8C", VA = "0xF5BA8C")]
		private static int[] GetIntArray(Dictionary<string, object> map, string name)
		{
			return null;
		}

		[Token(Token = "0x6000F91")]
		[Address(RVA = "0xF52D80", Offset = "0xF52D80", VA = "0xF52D80")]
		private static float GetFloat(Dictionary<string, object> map, string name, float defaultValue)
		{
			return default(float);
		}

		[Token(Token = "0x6000F92")]
		[Address(RVA = "0xF531C0", Offset = "0xF531C0", VA = "0xF531C0")]
		private static int GetInt(Dictionary<string, object> map, string name, int defaultValue)
		{
			return default(int);
		}

		[Token(Token = "0x6000F93")]
		[Address(RVA = "0xF532D4", Offset = "0xF532D4", VA = "0xF532D4")]
		private static bool GetBoolean(Dictionary<string, object> map, string name, bool defaultValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F94")]
		[Address(RVA = "0xF52E94", Offset = "0xF52E94", VA = "0xF52E94")]
		private static string GetString(Dictionary<string, object> map, string name, string defaultValue)
		{
			return null;
		}

		[Token(Token = "0x6000F95")]
		[Address(RVA = "0xF52F80", Offset = "0xF52F80", VA = "0xF52F80")]
		private static float ToColor(string hexString, int colorIndex, int expectedLength = 8)
		{
			return default(float);
		}
	}
	[Token(Token = "0x200020A")]
	public class Skin
	{
		[Token(Token = "0x200055F")]
		public struct AttachmentKeyTuple
		{
			[Token(Token = "0x4001F0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public readonly int slotIndex;

			[Token(Token = "0x4001F0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public readonly string name;

			[Token(Token = "0x4001F0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal readonly int nameHashCode;

			[Token(Token = "0x6001DA0")]
			[Address(RVA = "0x3BC5BC", Offset = "0x3BC5BC", VA = "0x3BC5BC")]
			public AttachmentKeyTuple(int slotIndex, string name)
			{
			}
		}

		[Token(Token = "0x2000560")]
		private class AttachmentKeyTupleComparer : IEqualityComparer<AttachmentKeyTuple>
		{
			[Token(Token = "0x4001F0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly AttachmentKeyTupleComparer Instance;

			[Token(Token = "0x6001DA1")]
			[Address(RVA = "0xF5C264", Offset = "0xF5C264", VA = "0xF5C264", Slot = "4")]
			private bool System.Collections.Generic.IEqualityComparer<Spine.Skin.AttachmentKeyTuple>.Equals(AttachmentKeyTuple o1, AttachmentKeyTuple o2)
			{
				return default(bool);
			}

			[Token(Token = "0x6001DA2")]
			[Address(RVA = "0xF5C290", Offset = "0xF5C290", VA = "0xF5C290", Slot = "5")]
			private int System.Collections.Generic.IEqualityComparer<Spine.Skin.AttachmentKeyTuple>.GetHashCode(AttachmentKeyTuple o)
			{
				return default(int);
			}

			[Token(Token = "0x6001DA3")]
			[Address(RVA = "0xF5C298", Offset = "0xF5C298", VA = "0xF5C298")]
			public AttachmentKeyTupleComparer()
			{
			}
		}

		[Token(Token = "0x4000B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal string name;

		[Token(Token = "0x4000B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private Dictionary<AttachmentKeyTuple, Attachment> attachments;

		[Token(Token = "0x17000244")]
		public string Name
		{
			[Token(Token = "0x6000F96")]
			[Address(RVA = "0xF5BFF4", Offset = "0xF5BFF4", VA = "0xF5BFF4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000245")]
		public Dictionary<AttachmentKeyTuple, Attachment> Attachments
		{
			[Token(Token = "0x6000F97")]
			[Address(RVA = "0xF5BFFC", Offset = "0xF5BFFC", VA = "0xF5BFFC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F98")]
		[Address(RVA = "0xF4492C", Offset = "0xF4492C", VA = "0xF4492C")]
		public Skin(string name)
		{
		}

		[Token(Token = "0x6000F99")]
		[Address(RVA = "0xF459E4", Offset = "0xF459E4", VA = "0xF459E4")]
		public void AddAttachment(int slotIndex, string name, Attachment attachment)
		{
		}

		[Token(Token = "0x6000F9A")]
		[Address(RVA = "0xF41F74", Offset = "0xF41F74", VA = "0xF41F74")]
		public Attachment GetAttachment(int slotIndex, string name)
		{
			return null;
		}

		[Token(Token = "0x6000F9B")]
		[Address(RVA = "0xF4D97C", Offset = "0xF4D97C", VA = "0xF4D97C")]
		public void FindNamesForSlot(int slotIndex, List<string> names)
		{
		}

		[Token(Token = "0x6000F9C")]
		[Address(RVA = "0xF4DBD4", Offset = "0xF4DBD4", VA = "0xF4DBD4")]
		public void FindAttachmentsForSlot(int slotIndex, List<Attachment> attachments)
		{
		}

		[Token(Token = "0x6000F9D")]
		[Address(RVA = "0xF5C044", Offset = "0xF5C044", VA = "0xF5C044", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000F9E")]
		[Address(RVA = "0xF5C04C", Offset = "0xF5C04C", VA = "0xF5C04C")]
		internal void AttachAll(Skeleton skeleton, Skin oldSkin)
		{
		}
	}
	[Token(Token = "0x200020B")]
	public class Slot
	{
		[Token(Token = "0x4000B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal SlotData data;

		[Token(Token = "0x4000BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal Bone bone;

		[Token(Token = "0x4000BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal float r;

		[Token(Token = "0x4000BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal float g;

		[Token(Token = "0x4000BA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal float b;

		[Token(Token = "0x4000BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal float a;

		[Token(Token = "0x4000BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal float r2;

		[Token(Token = "0x4000BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal float g2;

		[Token(Token = "0x4000BA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal float b2;

		[Token(Token = "0x4000BA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal bool hasSecondColor;

		[Token(Token = "0x4000BA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal Attachment attachment;

		[Token(Token = "0x4000BAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal float attachmentTime;

		[Token(Token = "0x4000BAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal ExposedList<float> attachmentVertices;

		[Token(Token = "0x17000246")]
		public SlotData Data
		{
			[Token(Token = "0x6000F9F")]
			[Address(RVA = "0xF5C314", Offset = "0xF5C314", VA = "0xF5C314")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000247")]
		public Bone Bone
		{
			[Token(Token = "0x6000FA0")]
			[Address(RVA = "0xF5C31C", Offset = "0xF5C31C", VA = "0xF5C31C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000248")]
		public Skeleton Skeleton
		{
			[Token(Token = "0x6000FA1")]
			[Address(RVA = "0xF5C324", Offset = "0xF5C324", VA = "0xF5C324")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000249")]
		public float R
		{
			[Token(Token = "0x6000FA2")]
			[Address(RVA = "0xF5C348", Offset = "0xF5C348", VA = "0xF5C348")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FA3")]
			[Address(RVA = "0xF5C350", Offset = "0xF5C350", VA = "0xF5C350")]
			set
			{
			}
		}

		[Token(Token = "0x1700024A")]
		public float G
		{
			[Token(Token = "0x6000FA4")]
			[Address(RVA = "0xF5C358", Offset = "0xF5C358", VA = "0xF5C358")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FA5")]
			[Address(RVA = "0xF5C360", Offset = "0xF5C360", VA = "0xF5C360")]
			set
			{
			}
		}

		[Token(Token = "0x1700024B")]
		public float B
		{
			[Token(Token = "0x6000FA6")]
			[Address(RVA = "0xF5C368", Offset = "0xF5C368", VA = "0xF5C368")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FA7")]
			[Address(RVA = "0xF5C370", Offset = "0xF5C370", VA = "0xF5C370")]
			set
			{
			}
		}

		[Token(Token = "0x1700024C")]
		public float A
		{
			[Token(Token = "0x6000FA8")]
			[Address(RVA = "0xF5C378", Offset = "0xF5C378", VA = "0xF5C378")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FA9")]
			[Address(RVA = "0xF5C380", Offset = "0xF5C380", VA = "0xF5C380")]
			set
			{
			}
		}

		[Token(Token = "0x1700024D")]
		public float R2
		{
			[Token(Token = "0x6000FAA")]
			[Address(RVA = "0xF5C388", Offset = "0xF5C388", VA = "0xF5C388")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FAB")]
			[Address(RVA = "0xF5C390", Offset = "0xF5C390", VA = "0xF5C390")]
			set
			{
			}
		}

		[Token(Token = "0x1700024E")]
		public float G2
		{
			[Token(Token = "0x6000FAC")]
			[Address(RVA = "0xF5C398", Offset = "0xF5C398", VA = "0xF5C398")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FAD")]
			[Address(RVA = "0xF5C3A0", Offset = "0xF5C3A0", VA = "0xF5C3A0")]
			set
			{
			}
		}

		[Token(Token = "0x1700024F")]
		public float B2
		{
			[Token(Token = "0x6000FAE")]
			[Address(RVA = "0xF5C3A8", Offset = "0xF5C3A8", VA = "0xF5C3A8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FAF")]
			[Address(RVA = "0xF5C3B0", Offset = "0xF5C3B0", VA = "0xF5C3B0")]
			set
			{
			}
		}

		[Token(Token = "0x17000250")]
		public bool HasSecondColor
		{
			[Token(Token = "0x6000FB0")]
			[Address(RVA = "0xF5C3B8", Offset = "0xF5C3B8", VA = "0xF5C3B8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FB1")]
			[Address(RVA = "0xF5C3DC", Offset = "0xF5C3DC", VA = "0xF5C3DC")]
			set
			{
			}
		}

		[Token(Token = "0x17000251")]
		public Attachment Attachment
		{
			[Token(Token = "0x6000FB2")]
			[Address(RVA = "0xF5C404", Offset = "0xF5C404", VA = "0xF5C404")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FB3")]
			[Address(RVA = "0xF4D714", Offset = "0xF4D714", VA = "0xF4D714")]
			set
			{
			}
		}

		[Token(Token = "0x17000252")]
		public float AttachmentTime
		{
			[Token(Token = "0x6000FB4")]
			[Address(RVA = "0xF5C40C", Offset = "0xF5C40C", VA = "0xF5C40C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FB5")]
			[Address(RVA = "0xF5C454", Offset = "0xF5C454", VA = "0xF5C454")]
			set
			{
			}
		}

		[Token(Token = "0x17000253")]
		public ExposedList<float> AttachmentVertices
		{
			[Token(Token = "0x6000FB6")]
			[Address(RVA = "0xF5C4A8", Offset = "0xF5C4A8", VA = "0xF5C4A8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FB7")]
			[Address(RVA = "0xF5C4B0", Offset = "0xF5C4B0", VA = "0xF5C4B0")]
			set
			{
			}
		}

		[Token(Token = "0x6000FB8")]
		[Address(RVA = "0xF5C4B8", Offset = "0xF5C4B8", VA = "0xF5C4B8")]
		public Slot(SlotData data, Bone bone)
		{
		}

		[Token(Token = "0x6000FB9")]
		[Address(RVA = "0xF5C628", Offset = "0xF5C628", VA = "0xF5C628")]
		public void SetToSetupPose()
		{
		}

		[Token(Token = "0x6000FBA")]
		[Address(RVA = "0xF5C788", Offset = "0xF5C788", VA = "0xF5C788", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200020C")]
	public class SlotData
	{
		[Token(Token = "0x4000BAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal int index;

		[Token(Token = "0x4000BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal string name;

		[Token(Token = "0x4000BAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal BoneData boneData;

		[Token(Token = "0x4000BAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal float r;

		[Token(Token = "0x4000BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal float g;

		[Token(Token = "0x4000BB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal float b;

		[Token(Token = "0x4000BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal float a;

		[Token(Token = "0x4000BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal float r2;

		[Token(Token = "0x4000BB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal float g2;

		[Token(Token = "0x4000BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal float b2;

		[Token(Token = "0x4000BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal bool hasSecondColor;

		[Token(Token = "0x4000BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal string attachmentName;

		[Token(Token = "0x4000BB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal BlendMode blendMode;

		[Token(Token = "0x17000254")]
		public int Index
		{
			[Token(Token = "0x6000FBB")]
			[Address(RVA = "0xF5C7AC", Offset = "0xF5C7AC", VA = "0xF5C7AC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000255")]
		public string Name
		{
			[Token(Token = "0x6000FBC")]
			[Address(RVA = "0xF5C7B4", Offset = "0xF5C7B4", VA = "0xF5C7B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000256")]
		public BoneData BoneData
		{
			[Token(Token = "0x6000FBD")]
			[Address(RVA = "0xF5C7BC", Offset = "0xF5C7BC", VA = "0xF5C7BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000257")]
		public float R
		{
			[Token(Token = "0x6000FBE")]
			[Address(RVA = "0xF5C7C4", Offset = "0xF5C7C4", VA = "0xF5C7C4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FBF")]
			[Address(RVA = "0xF5C7CC", Offset = "0xF5C7CC", VA = "0xF5C7CC")]
			set
			{
			}
		}

		[Token(Token = "0x17000258")]
		public float G
		{
			[Token(Token = "0x6000FC0")]
			[Address(RVA = "0xF5C7D4", Offset = "0xF5C7D4", VA = "0xF5C7D4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FC1")]
			[Address(RVA = "0xF5C7DC", Offset = "0xF5C7DC", VA = "0xF5C7DC")]
			set
			{
			}
		}

		[Token(Token = "0x17000259")]
		public float B
		{
			[Token(Token = "0x6000FC2")]
			[Address(RVA = "0xF5C7E4", Offset = "0xF5C7E4", VA = "0xF5C7E4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FC3")]
			[Address(RVA = "0xF5C7EC", Offset = "0xF5C7EC", VA = "0xF5C7EC")]
			set
			{
			}
		}

		[Token(Token = "0x1700025A")]
		public float A
		{
			[Token(Token = "0x6000FC4")]
			[Address(RVA = "0xF5C7F4", Offset = "0xF5C7F4", VA = "0xF5C7F4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FC5")]
			[Address(RVA = "0xF5C7FC", Offset = "0xF5C7FC", VA = "0xF5C7FC")]
			set
			{
			}
		}

		[Token(Token = "0x1700025B")]
		public float R2
		{
			[Token(Token = "0x6000FC6")]
			[Address(RVA = "0xF5C804", Offset = "0xF5C804", VA = "0xF5C804")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FC7")]
			[Address(RVA = "0xF5C80C", Offset = "0xF5C80C", VA = "0xF5C80C")]
			set
			{
			}
		}

		[Token(Token = "0x1700025C")]
		public float G2
		{
			[Token(Token = "0x6000FC8")]
			[Address(RVA = "0xF5C814", Offset = "0xF5C814", VA = "0xF5C814")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FC9")]
			[Address(RVA = "0xF5C81C", Offset = "0xF5C81C", VA = "0xF5C81C")]
			set
			{
			}
		}

		[Token(Token = "0x1700025D")]
		public float B2
		{
			[Token(Token = "0x6000FCA")]
			[Address(RVA = "0xF5C824", Offset = "0xF5C824", VA = "0xF5C824")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FCB")]
			[Address(RVA = "0xF5C82C", Offset = "0xF5C82C", VA = "0xF5C82C")]
			set
			{
			}
		}

		[Token(Token = "0x1700025E")]
		public bool HasSecondColor
		{
			[Token(Token = "0x6000FCC")]
			[Address(RVA = "0xF5C834", Offset = "0xF5C834", VA = "0xF5C834")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FCD")]
			[Address(RVA = "0xF5C83C", Offset = "0xF5C83C", VA = "0xF5C83C")]
			set
			{
			}
		}

		[Token(Token = "0x1700025F")]
		public string AttachmentName
		{
			[Token(Token = "0x6000FCE")]
			[Address(RVA = "0xF5C844", Offset = "0xF5C844", VA = "0xF5C844")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FCF")]
			[Address(RVA = "0xF5C84C", Offset = "0xF5C84C", VA = "0xF5C84C")]
			set
			{
			}
		}

		[Token(Token = "0x17000260")]
		public BlendMode BlendMode
		{
			[Token(Token = "0x6000FD0")]
			[Address(RVA = "0xF5C854", Offset = "0xF5C854", VA = "0xF5C854")]
			get
			{
				return default(BlendMode);
			}
			[Token(Token = "0x6000FD1")]
			[Address(RVA = "0xF5C85C", Offset = "0xF5C85C", VA = "0xF5C85C")]
			set
			{
			}
		}

		[Token(Token = "0x6000FD2")]
		[Address(RVA = "0xF41888", Offset = "0xF41888", VA = "0xF41888")]
		public SlotData(int index, string name, BoneData boneData)
		{
		}

		[Token(Token = "0x6000FD3")]
		[Address(RVA = "0xF5C864", Offset = "0xF5C864", VA = "0xF5C864", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200020D")]
	public class TransformConstraint : IConstraint, IUpdatable
	{
		[Token(Token = "0x4000BB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal TransformConstraintData data;

		[Token(Token = "0x4000BBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal ExposedList<Bone> bones;

		[Token(Token = "0x4000BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal Bone target;

		[Token(Token = "0x4000BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal float rotateMix;

		[Token(Token = "0x4000BBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal float translateMix;

		[Token(Token = "0x4000BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal float scaleMix;

		[Token(Token = "0x4000BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal float shearMix;

		[Token(Token = "0x17000261")]
		public TransformConstraintData Data
		{
			[Token(Token = "0x6000FD4")]
			[Address(RVA = "0xF5DDA4", Offset = "0xF5DDA4", VA = "0xF5DDA4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000262")]
		public int Order
		{
			[Token(Token = "0x6000FD5")]
			[Address(RVA = "0xF5DDAC", Offset = "0xF5DDAC", VA = "0xF5DDAC", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000263")]
		public ExposedList<Bone> Bones
		{
			[Token(Token = "0x6000FD6")]
			[Address(RVA = "0xF5DDD0", Offset = "0xF5DDD0", VA = "0xF5DDD0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000264")]
		public Bone Target
		{
			[Token(Token = "0x6000FD7")]
			[Address(RVA = "0xF5DDD8", Offset = "0xF5DDD8", VA = "0xF5DDD8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FD8")]
			[Address(RVA = "0xF5DDE0", Offset = "0xF5DDE0", VA = "0xF5DDE0")]
			set
			{
			}
		}

		[Token(Token = "0x17000265")]
		public float RotateMix
		{
			[Token(Token = "0x6000FD9")]
			[Address(RVA = "0xF5DDE8", Offset = "0xF5DDE8", VA = "0xF5DDE8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FDA")]
			[Address(RVA = "0xF5DDF0", Offset = "0xF5DDF0", VA = "0xF5DDF0")]
			set
			{
			}
		}

		[Token(Token = "0x17000266")]
		public float TranslateMix
		{
			[Token(Token = "0x6000FDB")]
			[Address(RVA = "0xF5DDF8", Offset = "0xF5DDF8", VA = "0xF5DDF8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FDC")]
			[Address(RVA = "0xF5DE00", Offset = "0xF5DE00", VA = "0xF5DE00")]
			set
			{
			}
		}

		[Token(Token = "0x17000267")]
		public float ScaleMix
		{
			[Token(Token = "0x6000FDD")]
			[Address(RVA = "0xF5DE08", Offset = "0xF5DE08", VA = "0xF5DE08")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FDE")]
			[Address(RVA = "0xF5DE10", Offset = "0xF5DE10", VA = "0xF5DE10")]
			set
			{
			}
		}

		[Token(Token = "0x17000268")]
		public float ShearMix
		{
			[Token(Token = "0x6000FDF")]
			[Address(RVA = "0xF5DE18", Offset = "0xF5DE18", VA = "0xF5DE18")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FE0")]
			[Address(RVA = "0xF5DE20", Offset = "0xF5DE20", VA = "0xF5DE20")]
			set
			{
			}
		}

		[Token(Token = "0x6000FE1")]
		[Address(RVA = "0xF5DE28", Offset = "0xF5DE28", VA = "0xF5DE28")]
		public TransformConstraint(TransformConstraintData data, Skeleton skeleton)
		{
		}

		[Token(Token = "0x6000FE2")]
		[Address(RVA = "0xF5E118", Offset = "0xF5E118", VA = "0xF5E118")]
		public void Apply()
		{
		}

		[Token(Token = "0x6000FE3")]
		[Address(RVA = "0xF5E11C", Offset = "0xF5E11C", VA = "0xF5E11C", Slot = "5")]
		public void Update()
		{
		}

		[Token(Token = "0x6000FE4")]
		[Address(RVA = "0xF5F0A0", Offset = "0xF5F0A0", VA = "0xF5F0A0")]
		private void ApplyAbsoluteWorld()
		{
		}

		[Token(Token = "0x6000FE5")]
		[Address(RVA = "0xF5E888", Offset = "0xF5E888", VA = "0xF5E888")]
		private void ApplyRelativeWorld()
		{
		}

		[Token(Token = "0x6000FE6")]
		[Address(RVA = "0xF5E4E8", Offset = "0xF5E4E8", VA = "0xF5E4E8")]
		private void ApplyAbsoluteLocal()
		{
		}

		[Token(Token = "0x6000FE7")]
		[Address(RVA = "0xF5E1C0", Offset = "0xF5E1C0", VA = "0xF5E1C0")]
		private void ApplyRelativeLocal()
		{
		}

		[Token(Token = "0x6000FE8")]
		[Address(RVA = "0xF5FACC", Offset = "0xF5FACC", VA = "0xF5FACC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200020E")]
	public class TransformConstraintData
	{
		[Token(Token = "0x4000BC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal string name;

		[Token(Token = "0x4000BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal int order;

		[Token(Token = "0x4000BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal ExposedList<BoneData> bones;

		[Token(Token = "0x4000BC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal BoneData target;

		[Token(Token = "0x4000BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal float rotateMix;

		[Token(Token = "0x4000BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal float translateMix;

		[Token(Token = "0x4000BC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal float scaleMix;

		[Token(Token = "0x4000BC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal float shearMix;

		[Token(Token = "0x4000BC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal float offsetRotation;

		[Token(Token = "0x4000BC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal float offsetX;

		[Token(Token = "0x4000BCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal float offsetY;

		[Token(Token = "0x4000BCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal float offsetScaleX;

		[Token(Token = "0x4000BCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal float offsetScaleY;

		[Token(Token = "0x4000BCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		internal float offsetShearY;

		[Token(Token = "0x4000BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal bool relative;

		[Token(Token = "0x4000BCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		internal bool local;

		[Token(Token = "0x17000269")]
		public string Name
		{
			[Token(Token = "0x6000FE9")]
			[Address(RVA = "0xF5FAF0", Offset = "0xF5FAF0", VA = "0xF5FAF0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700026A")]
		public int Order
		{
			[Token(Token = "0x6000FEA")]
			[Address(RVA = "0xF5FAF8", Offset = "0xF5FAF8", VA = "0xF5FAF8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000FEB")]
			[Address(RVA = "0xF5FB00", Offset = "0xF5FB00", VA = "0xF5FB00")]
			set
			{
			}
		}

		[Token(Token = "0x1700026B")]
		public ExposedList<BoneData> Bones
		{
			[Token(Token = "0x6000FEC")]
			[Address(RVA = "0xF5FB08", Offset = "0xF5FB08", VA = "0xF5FB08")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700026C")]
		public BoneData Target
		{
			[Token(Token = "0x6000FED")]
			[Address(RVA = "0xF5FB10", Offset = "0xF5FB10", VA = "0xF5FB10")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FEE")]
			[Address(RVA = "0xF5FB18", Offset = "0xF5FB18", VA = "0xF5FB18")]
			set
			{
			}
		}

		[Token(Token = "0x1700026D")]
		public float RotateMix
		{
			[Token(Token = "0x6000FEF")]
			[Address(RVA = "0xF5FB20", Offset = "0xF5FB20", VA = "0xF5FB20")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FF0")]
			[Address(RVA = "0xF5FB28", Offset = "0xF5FB28", VA = "0xF5FB28")]
			set
			{
			}
		}

		[Token(Token = "0x1700026E")]
		public float TranslateMix
		{
			[Token(Token = "0x6000FF1")]
			[Address(RVA = "0xF5FB30", Offset = "0xF5FB30", VA = "0xF5FB30")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FF2")]
			[Address(RVA = "0xF5FB38", Offset = "0xF5FB38", VA = "0xF5FB38")]
			set
			{
			}
		}

		[Token(Token = "0x1700026F")]
		public float ScaleMix
		{
			[Token(Token = "0x6000FF3")]
			[Address(RVA = "0xF5FB40", Offset = "0xF5FB40", VA = "0xF5FB40")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FF4")]
			[Address(RVA = "0xF5FB48", Offset = "0xF5FB48", VA = "0xF5FB48")]
			set
			{
			}
		}

		[Token(Token = "0x17000270")]
		public float ShearMix
		{
			[Token(Token = "0x6000FF5")]
			[Address(RVA = "0xF5FB50", Offset = "0xF5FB50", VA = "0xF5FB50")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FF6")]
			[Address(RVA = "0xF5FB58", Offset = "0xF5FB58", VA = "0xF5FB58")]
			set
			{
			}
		}

		[Token(Token = "0x17000271")]
		public float OffsetRotation
		{
			[Token(Token = "0x6000FF7")]
			[Address(RVA = "0xF5FB60", Offset = "0xF5FB60", VA = "0xF5FB60")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FF8")]
			[Address(RVA = "0xF5FB68", Offset = "0xF5FB68", VA = "0xF5FB68")]
			set
			{
			}
		}

		[Token(Token = "0x17000272")]
		public float OffsetX
		{
			[Token(Token = "0x6000FF9")]
			[Address(RVA = "0xF5FB70", Offset = "0xF5FB70", VA = "0xF5FB70")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FFA")]
			[Address(RVA = "0xF5FB78", Offset = "0xF5FB78", VA = "0xF5FB78")]
			set
			{
			}
		}

		[Token(Token = "0x17000273")]
		public float OffsetY
		{
			[Token(Token = "0x6000FFB")]
			[Address(RVA = "0xF5FB80", Offset = "0xF5FB80", VA = "0xF5FB80")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FFC")]
			[Address(RVA = "0xF5FB88", Offset = "0xF5FB88", VA = "0xF5FB88")]
			set
			{
			}
		}

		[Token(Token = "0x17000274")]
		public float OffsetScaleX
		{
			[Token(Token = "0x6000FFD")]
			[Address(RVA = "0xF5FB90", Offset = "0xF5FB90", VA = "0xF5FB90")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FFE")]
			[Address(RVA = "0xF5FB98", Offset = "0xF5FB98", VA = "0xF5FB98")]
			set
			{
			}
		}

		[Token(Token = "0x17000275")]
		public float OffsetScaleY
		{
			[Token(Token = "0x6000FFF")]
			[Address(RVA = "0xF5FBA0", Offset = "0xF5FBA0", VA = "0xF5FBA0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001000")]
			[Address(RVA = "0xF5FBA8", Offset = "0xF5FBA8", VA = "0xF5FBA8")]
			set
			{
			}
		}

		[Token(Token = "0x17000276")]
		public float OffsetShearY
		{
			[Token(Token = "0x6001001")]
			[Address(RVA = "0xF5FBB0", Offset = "0xF5FBB0", VA = "0xF5FBB0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001002")]
			[Address(RVA = "0xF5FBB8", Offset = "0xF5FBB8", VA = "0xF5FBB8")]
			set
			{
			}
		}

		[Token(Token = "0x17000277")]
		public bool Relative
		{
			[Token(Token = "0x6001003")]
			[Address(RVA = "0xF5FBC0", Offset = "0xF5FBC0", VA = "0xF5FBC0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001004")]
			[Address(RVA = "0xF5FBC8", Offset = "0xF5FBC8", VA = "0xF5FBC8")]
			set
			{
			}
		}

		[Token(Token = "0x17000278")]
		public bool Local
		{
			[Token(Token = "0x6001005")]
			[Address(RVA = "0xF5FBD0", Offset = "0xF5FBD0", VA = "0xF5FBD0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001006")]
			[Address(RVA = "0xF5FBD8", Offset = "0xF5FBD8", VA = "0xF5FBD8")]
			set
			{
			}
		}

		[Token(Token = "0x6001007")]
		[Address(RVA = "0xF41AE4", Offset = "0xF41AE4", VA = "0xF41AE4")]
		public TransformConstraintData(string name)
		{
		}

		[Token(Token = "0x6001008")]
		[Address(RVA = "0xF5FBE0", Offset = "0xF5FBE0", VA = "0xF5FBE0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200020F")]
	internal class Triangulator
	{
		[Token(Token = "0x4000BD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private readonly ExposedList<ExposedList<float>> convexPolygons;

		[Token(Token = "0x4000BD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private readonly ExposedList<ExposedList<int>> convexPolygonsIndices;

		[Token(Token = "0x4000BD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ExposedList<int> indicesArray;

		[Token(Token = "0x4000BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private readonly ExposedList<bool> isConcaveArray;

		[Token(Token = "0x4000BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly ExposedList<int> triangles;

		[Token(Token = "0x4000BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private readonly Pool<ExposedList<float>> polygonPool;

		[Token(Token = "0x4000BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly Pool<ExposedList<int>> polygonIndicesPool;

		[Token(Token = "0x6001009")]
		[Address(RVA = "0xF48120", Offset = "0xF48120", VA = "0xF48120")]
		public ExposedList<int> Triangulate(ExposedList<float> verticesArray)
		{
			return null;
		}

		[Token(Token = "0x600100A")]
		[Address(RVA = "0xF48B48", Offset = "0xF48B48", VA = "0xF48B48")]
		public ExposedList<ExposedList<float>> Decompose(ExposedList<float> verticesArray, ExposedList<int> triangles)
		{
			return null;
		}

		[Token(Token = "0x600100B")]
		[Address(RVA = "0xF60828", Offset = "0xF60828", VA = "0xF60828")]
		private static bool IsConcave(int index, int vertexCount, float[] vertices, int[] indices)
		{
			return default(bool);
		}

		[Token(Token = "0x600100C")]
		[Address(RVA = "0xF60A34", Offset = "0xF60A34", VA = "0xF60A34")]
		private static bool PositiveArea(float p1x, float p1y, float p2x, float p2y, float p3x, float p3y)
		{
			return default(bool);
		}

		[Token(Token = "0x600100D")]
		[Address(RVA = "0xF60A80", Offset = "0xF60A80", VA = "0xF60A80")]
		private static int Winding(float p1x, float p1y, float p2x, float p2y, float p3x, float p3y)
		{
			return default(int);
		}

		[Token(Token = "0x600100E")]
		[Address(RVA = "0xF4B904", Offset = "0xF4B904", VA = "0xF4B904")]
		public Triangulator()
		{
		}
	}
	[Token(Token = "0x2000210")]
	public static class SkeletonExtensions
	{
		[Token(Token = "0x600100F")]
		[Address(RVA = "0xF4CA20", Offset = "0xF4CA20", VA = "0xF4CA20")]
		public static bool IsWeighted(this VertexAttachment va)
		{
			return default(bool);
		}

		[Token(Token = "0x6001010")]
		[Address(RVA = "0xF4CA60", Offset = "0xF4CA60", VA = "0xF4CA60")]
		public static bool IsRenderable(this Attachment a)
		{
			return default(bool);
		}

		[Token(Token = "0x6001011")]
		[Address(RVA = "0xF4CB2C", Offset = "0xF4CB2C", VA = "0xF4CB2C")]
		public static bool InheritsRotation(this TransformMode mode)
		{
			return default(bool);
		}

		[Token(Token = "0x6001012")]
		[Address(RVA = "0xF4CB40", Offset = "0xF4CB40", VA = "0xF4CB40")]
		public static bool InheritsScale(this TransformMode mode)
		{
			return default(bool);
		}

		[Token(Token = "0x6001013")]
		[Address(RVA = "0xF4CB54", Offset = "0xF4CB54", VA = "0xF4CB54")]
		internal static void SetPropertyToSetupPose(this Skeleton skeleton, int propertyID)
		{
		}

		[Token(Token = "0x6001014")]
		[Address(RVA = "0xF4D528", Offset = "0xF4D528", VA = "0xF4D528")]
		public static void SetDrawOrderToSetupPose(this Skeleton skeleton)
		{
		}

		[Token(Token = "0x6001015")]
		[Address(RVA = "0xF4D3F8", Offset = "0xF4D3F8", VA = "0xF4D3F8")]
		public static void SetColorToSetupPose(this Slot slot)
		{
		}

		[Token(Token = "0x6001016")]
		[Address(RVA = "0xF4D668", Offset = "0xF4D668", VA = "0xF4D668")]
		public static void SetAttachmentToSetupPose(this Slot slot)
		{
		}

		[Token(Token = "0x6001017")]
		[Address(RVA = "0xF4D31C", Offset = "0xF4D31C", VA = "0xF4D31C")]
		public static void SetSlotAttachmentToSetupPose(this Skeleton skeleton, int slotIndex)
		{
		}

		[Token(Token = "0x6001018")]
		[Address(RVA = "0xF4D7D4", Offset = "0xF4D7D4", VA = "0xF4D7D4")]
		public static void PoseWithAnimation(this Skeleton skeleton, string animationName, float time, bool loop = false)
		{
		}

		[Token(Token = "0x6001019")]
		[Address(RVA = "0xF4D85C", Offset = "0xF4D85C", VA = "0xF4D85C")]
		public static void PoseSkeleton(this Animation animation, Skeleton skeleton, float time, bool loop = false)
		{
		}

		[Token(Token = "0x600101A")]
		[Address(RVA = "0xF4D8C0", Offset = "0xF4D8C0", VA = "0xF4D8C0")]
		public static void SetKeyedItemsToSetupPose(this Animation animation, Skeleton skeleton)
		{
		}

		[Token(Token = "0x600101B")]
		[Address(RVA = "0xF4D920", Offset = "0xF4D920", VA = "0xF4D920")]
		public static void FindNamesForSlot(this Skin skin, string slotName, SkeletonData skeletonData, List<string> results)
		{
		}

		[Token(Token = "0x600101C")]
		[Address(RVA = "0xF4DB78", Offset = "0xF4DB78", VA = "0xF4DB78")]
		public static void FindAttachmentsForSlot(this Skin skin, string slotName, SkeletonData skeletonData, List<Attachment> results)
		{
		}
	}
}
namespace Spine.Unity
{
	[Token(Token = "0x2000211")]
	public class AtlasAsset : ScriptableObject
	{
		[Token(Token = "0x4000BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public TextAsset atlasFile;

		[Token(Token = "0x4000BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Material[] materials;

		[Token(Token = "0x4000BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		protected Atlas atlas;

		[Token(Token = "0x17000279")]
		public bool IsLoaded
		{
			[Token(Token = "0x600101D")]
			[Address(RVA = "0x88CE38", Offset = "0x88CE38", VA = "0x88CE38")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600101E")]
		[Address(RVA = "0x88CE48", Offset = "0x88CE48", VA = "0x88CE48")]
		public static AtlasAsset CreateRuntimeInstance(TextAsset atlasText, Material[] materials, bool initialize)
		{
			return null;
		}

		[Token(Token = "0x600101F")]
		[Address(RVA = "0x88CF14", Offset = "0x88CF14", VA = "0x88CF14")]
		public static AtlasAsset CreateRuntimeInstance(TextAsset atlasText, Texture2D[] textures, Material materialPropertySource, bool initialize)
		{
			return null;
		}

		[Token(Token = "0x6001020")]
		[Address(RVA = "0x88D47C", Offset = "0x88D47C", VA = "0x88D47C")]
		public static AtlasAsset CreateRuntimeInstance(TextAsset atlasText, Texture2D[] textures, Shader shader, bool initialize)
		{
			return null;
		}

		[Token(Token = "0x6001021")]
		[Address(RVA = "0x88CF04", Offset = "0x88CF04", VA = "0x88CF04")]
		private void Reset()
		{
		}

		[Token(Token = "0x6001022")]
		[Address(RVA = "0x88D574", Offset = "0x88D574", VA = "0x88D574", Slot = "4")]
		public virtual void Clear()
		{
		}

		[Token(Token = "0x6001023")]
		[Address(RVA = "0x88D580", Offset = "0x88D580", VA = "0x88D580", Slot = "5")]
		public virtual Atlas GetAtlas()
		{
			return null;
		}

		[Token(Token = "0x6001024")]
		[Address(RVA = "0x88DB98", Offset = "0x88DB98", VA = "0x88DB98")]
		public Mesh GenerateMesh(string name, Mesh mesh, out Material material, float scale = 0.01f)
		{
			return null;
		}

		[Token(Token = "0x6001025")]
		[Address(RVA = "0x88E514", Offset = "0x88E514", VA = "0x88E514")]
		public AtlasAsset()
		{
		}
	}
	[Token(Token = "0x2000212")]
	public class MaterialsTextureLoader : TextureLoader
	{
		[Token(Token = "0x4000BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private AtlasAsset atlasAsset;

		[Token(Token = "0x6001026")]
		[Address(RVA = "0x88DB78", Offset = "0x88DB78", VA = "0x88DB78")]
		public MaterialsTextureLoader(AtlasAsset atlasAsset)
		{
		}

		[Token(Token = "0x6001027")]
		[Address(RVA = "0x890F18", Offset = "0x890F18", VA = "0x890F18", Slot = "4")]
		public void Load(AtlasPage page, string path)
		{
		}

		[Token(Token = "0x6001028")]
		[Address(RVA = "0x8912E8", Offset = "0x8912E8", VA = "0x8912E8", Slot = "5")]
		public void Unload(object texture)
		{
		}
	}
	[Token(Token = "0x2000213")]
	public class SkeletonDataAsset : ScriptableObject
	{
		[Token(Token = "0x4000BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public AtlasAsset[] atlasAssets;

		[Token(Token = "0x4000BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float scale;

		[Token(Token = "0x4000BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public TextAsset skeletonJSON;

		[Token(Token = "0x4000BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "SpineAnimation", RVA = "0x2F4140", Offset = "0x2F4140")]
		public string[] fromAnimation;

		[Token(Token = "0x4000BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "SpineAnimation", RVA = "0x2F419C", Offset = "0x2F419C")]
		public string[] toAnimation;

		[Token(Token = "0x4000BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float[] duration;

		[Token(Token = "0x4000BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float defaultMix;

		[Token(Token = "0x4000BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RuntimeAnimatorController controller;

		[Token(Token = "0x4000BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private SkeletonData skeletonData;

		[Token(Token = "0x4000BE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AnimationStateData stateData;

		[Token(Token = "0x1700027A")]
		public bool IsLoaded
		{
			[Token(Token = "0x6001029")]
			[Address(RVA = "0x58F564", Offset = "0x58F564", VA = "0x58F564")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600102A")]
		[Address(RVA = "0x58F574", Offset = "0x58F574", VA = "0x58F574")]
		private void Reset()
		{
		}

		[Token(Token = "0x600102B")]
		[Address(RVA = "0x58F594", Offset = "0x58F594", VA = "0x58F594")]
		public static SkeletonDataAsset CreateRuntimeInstance(TextAsset skeletonDataFile, AtlasAsset atlasAsset, bool initialize, float scale = 0.01f)
		{
			return null;
		}

		[Token(Token = "0x600102C")]
		[Address(RVA = "0x58F684", Offset = "0x58F684", VA = "0x58F684")]
		public static SkeletonDataAsset CreateRuntimeInstance(TextAsset skeletonDataFile, AtlasAsset[] atlasAssets, bool initialize, float scale = 0.01f)
		{
			return null;
		}

		[Token(Token = "0x600102D")]
		[Address(RVA = "0x58F584", Offset = "0x58F584", VA = "0x58F584")]
		public void Clear()
		{
		}

		[Token(Token = "0x600102E")]
		[Address(RVA = "0x58EA50", Offset = "0x58EA50", VA = "0x58EA50")]
		public SkeletonData GetSkeletonData(bool quiet)
		{
			return null;
		}

		[Token(Token = "0x600102F")]
		[Address(RVA = "0x58FB00", Offset = "0x58FB00", VA = "0x58FB00")]
		internal void InitializeWithData(SkeletonData sd)
		{
		}

		[Token(Token = "0x6001030")]
		[Address(RVA = "0x58F780", Offset = "0x58F780", VA = "0x58F780")]
		internal Atlas[] GetAtlasArray()
		{
			return null;
		}

		[Token(Token = "0x6001031")]
		[Address(RVA = "0x58F940", Offset = "0x58F940", VA = "0x58F940")]
		internal static SkeletonData ReadSkeletonData(byte[] bytes, AttachmentLoader attachmentLoader, float scale)
		{
			return null;
		}

		[Token(Token = "0x6001032")]
		[Address(RVA = "0x58FA20", Offset = "0x58FA20", VA = "0x58FA20")]
		internal static SkeletonData ReadSkeletonData(string text, AttachmentLoader attachmentLoader, float scale)
		{
			return null;
		}

		[Token(Token = "0x6001033")]
		[Address(RVA = "0x58FB84", Offset = "0x58FB84", VA = "0x58FB84")]
		public void FillStateData()
		{
		}

		[Token(Token = "0x6001034")]
		[Address(RVA = "0x58C3E0", Offset = "0x58C3E0", VA = "0x58C3E0")]
		public AnimationStateData GetAnimationStateData()
		{
			return null;
		}

		[Token(Token = "0x6001035")]
		[Address(RVA = "0x58FD80", Offset = "0x58FD80", VA = "0x58FD80")]
		public SkeletonDataAsset()
		{
		}
	}
	[Token(Token = "0x2000214")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E9624", Offset = "0x2E9624")]
	public class BoneFollower : MonoBehaviour
	{
		[Token(Token = "0x4000BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public SkeletonRenderer skeletonRenderer;

		[Token(Token = "0x4000BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "SpineBone", RVA = "0x2F41F8", Offset = "0x2F41F8")]
		[SerializeField]
		public string boneName;

		[Token(Token = "0x4000BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool followZPosition;

		[Token(Token = "0x4000BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		public bool followBoneRotation;

		[Token(Token = "0x4000BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F426C", Offset = "0x2F426C")]
		public bool followSkeletonFlip;

		[Token(Token = "0x4000BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F42A0", Offset = "0x2F42A0")]
		public bool followLocalScale;

		[Token(Token = "0x4000BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x2F42D4", Offset = "0x2F42D4")]
		public bool initializeOnAwake;

		[NonSerialized]
		[Token(Token = "0x4000BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool valid;

		[NonSerialized]
		[Token(Token = "0x4000BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Bone bone;

		[Token(Token = "0x4000BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform skeletonTransform;

		[Token(Token = "0x4000BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool skeletonTransformIsParent;

		[Token(Token = "0x1700027B")]
		public SkeletonRenderer SkeletonRenderer
		{
			[Token(Token = "0x6001036")]
			[Address(RVA = "0x88E51C", Offset = "0x88E51C", VA = "0x88E51C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001037")]
			[Address(RVA = "0x88E524", Offset = "0x88E524", VA = "0x88E524")]
			set
			{
			}
		}

		[Token(Token = "0x6001038")]
		[Address(RVA = "0x88E768", Offset = "0x88E768", VA = "0x88E768")]
		public bool SetBone(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6001039")]
		[Address(RVA = "0x88E86C", Offset = "0x88E86C", VA = "0x88E86C")]
		public void Awake()
		{
		}

		[Token(Token = "0x600103A")]
		[Address(RVA = "0x88E87C", Offset = "0x88E87C", VA = "0x88E87C")]
		public void HandleRebuildRenderer(SkeletonRenderer skeletonRenderer)
		{
		}

		[Token(Token = "0x600103B")]
		[Address(RVA = "0x88E52C", Offset = "0x88E52C", VA = "0x88E52C")]
		public void Initialize()
		{
		}

		[Token(Token = "0x600103C")]
		[Address(RVA = "0x88E880", Offset = "0x88E880", VA = "0x88E880")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600103D")]
		[Address(RVA = "0x88E970", Offset = "0x88E970", VA = "0x88E970")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x600103E")]
		[Address(RVA = "0x88EFA4", Offset = "0x88EFA4", VA = "0x88EFA4")]
		public BoneFollower()
		{
		}
	}
	[Token(Token = "0x2000215")]
	public delegate void UpdateBonesDelegate(ISkeletonAnimation animated);
	[Token(Token = "0x2000216")]
	public interface ISkeletonAnimation
	{
		[Token(Token = "0x1700027C")]
		Skeleton Skeleton
		{
			[Token(Token = "0x600104A")]
			get;
		}

		[Token(Token = "0x14000043")]
		event UpdateBonesDelegate UpdateLocal;

		[Token(Token = "0x14000044")]
		event UpdateBonesDelegate UpdateWorld;

		[Token(Token = "0x14000045")]
		event UpdateBonesDelegate UpdateComplete;

		[Token(Token = "0x6001049")]
		void LateUpdate();
	}
	[Token(Token = "0x2000217")]
	public interface ISkeletonComponent
	{
		[Token(Token = "0x1700027D")]
		SkeletonDataAsset SkeletonDataAsset
		{
			[Token(Token = "0x600104B")]
			get;
		}

		[Token(Token = "0x1700027E")]
		Skeleton Skeleton
		{
			[Token(Token = "0x600104C")]
			get;
		}
	}
	[Token(Token = "0x2000218")]
	public interface IAnimationStateComponent
	{
		[Token(Token = "0x1700027F")]
		AnimationState AnimationState
		{
			[Token(Token = "0x600104D")]
			get;
		}
	}
	[Token(Token = "0x2000219")]
	public class DoubleBuffered<T> where T : new()
	{
		[Token(Token = "0x4000BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly T a;

		[Token(Token = "0x4000BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly T b;

		[Token(Token = "0x4000BF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool usingA;

		[Token(Token = "0x600104E")]
		public T GetCurrent()
		{
			return (T)null;
		}

		[Token(Token = "0x600104F")]
		public T GetNext()
		{
			return (T)null;
		}

		[Token(Token = "0x6001050")]
		public DoubleBuffered()
		{
		}
	}
	[Token(Token = "0x200021A")]
	public static class SpineMesh
	{
		[Token(Token = "0x4000BF3")]
		internal const HideFlags MeshHideflags = HideFlags.DontSaveInEditor | HideFlags.DontSaveInBuild;

		[Token(Token = "0x6001051")]
		[Address(RVA = "0x5991F8", Offset = "0x5991F8", VA = "0x5991F8")]
		public static Mesh NewMesh()
		{
			return null;
		}
	}
	[Token(Token = "0x200021B")]
	public struct SubmeshInstruction
	{
		[Token(Token = "0x4000BF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Skeleton skeleton;

		[Token(Token = "0x4000BF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int startSlot;

		[Token(Token = "0x4000BF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int endSlot;

		[Token(Token = "0x4000BF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Material material;

		[Token(Token = "0x4000BF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool forceSeparate;

		[Token(Token = "0x4000BF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int preActiveClippingSlotSource;

		[Token(Token = "0x4000BFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int rawTriangleCount;

		[Token(Token = "0x4000BFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int rawVertexCount;

		[Token(Token = "0x4000BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int rawFirstVertexIndex;

		[Token(Token = "0x4000BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool hasClipping;

		[Token(Token = "0x17000280")]
		public int SlotCount
		{
			[Token(Token = "0x6001052")]
			[Address(RVA = "0x39F8D8", Offset = "0x39F8D8", VA = "0x39F8D8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001053")]
		[Address(RVA = "0x39F8E8", Offset = "0x39F8E8", VA = "0x39F8E8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200021C")]
	public delegate void MeshGeneratorDelegate(MeshGeneratorBuffers buffers);
	[Token(Token = "0x200021D")]
	public struct MeshGeneratorBuffers
	{
		[Token(Token = "0x4000BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int vertexCount;

		[Token(Token = "0x4000BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Vector3[] vertexBuffer;

		[Token(Token = "0x4000C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector2[] uvBuffer;

		[Token(Token = "0x4000C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Color32[] colorBuffer;

		[Token(Token = "0x4000C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MeshGenerator meshGenerator;
	}
	[Serializable]
	[Token(Token = "0x200021E")]
	public class MeshGenerator
	{
		[Serializable]
		[Token(Token = "0x2000561")]
		public struct Settings
		{
			[Token(Token = "0x4001F0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool useClipping;

			[Token(Token = "0x4001F10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x2F65CC", Offset = "0x2F65CC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F65CC", Offset = "0x2F65CC")]
			public float zSpacing;

			[Token(Token = "0x4001F11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x2F6608", Offset = "0x2F6608")]
			[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x2F6608", Offset = "0x2F6608")]
			public bool pmaVertexColors;

			[Token(Token = "0x4001F12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
			public bool tintBlack;

			[Token(Token = "0x4001F13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
			public bool calculateTangents;

			[Token(Token = "0x4001F14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB")]
			public bool addNormals;

			[Token(Token = "0x4001F15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public bool immutableTriangles;

			[Token(Token = "0x170003BA")]
			public static Settings Default
			{
				[Token(Token = "0x6001DA5")]
				[Address(RVA = "0x897348", Offset = "0x897348", VA = "0x897348")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x4000C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Settings settings;

		[Token(Token = "0x4000C04")]
		private const float BoundsMinDefault = float.PositiveInfinity;

		[Token(Token = "0x4000C05")]
		private const float BoundsMaxDefault = float.NegativeInfinity;

		[NonSerialized]
		[Token(Token = "0x4000C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly ExposedList<Vector3> vertexBuffer;

		[NonSerialized]
		[Token(Token = "0x4000C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private readonly ExposedList<Vector2> uvBuffer;

		[NonSerialized]
		[Token(Token = "0x4000C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ExposedList<Color32> colorBuffer;

		[NonSerialized]
		[Token(Token = "0x4000C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private readonly ExposedList<ExposedList<int>> submeshes;

		[NonSerialized]
		[Token(Token = "0x4000C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector2 meshBoundsMin;

		[NonSerialized]
		[Token(Token = "0x4000C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector2 meshBoundsMax;

		[NonSerialized]
		[Token(Token = "0x4000C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float meshBoundsThickness;

		[NonSerialized]
		[Token(Token = "0x4000C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int submeshIndex;

		[NonSerialized]
		[Token(Token = "0x4000C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private SkeletonClipping clipper;

		[NonSerialized]
		[Token(Token = "0x4000C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float[] tempVerts;

		[NonSerialized]
		[Token(Token = "0x4000C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int[] regionTriangles;

		[NonSerialized]
		[Token(Token = "0x4000C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3[] normals;

		[NonSerialized]
		[Token(Token = "0x4000C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector4[] tangents;

		[NonSerialized]
		[Token(Token = "0x4000C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector2[] tempTanBuffer;

		[NonSerialized]
		[Token(Token = "0x4000C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ExposedList<Vector2> uv2;

		[NonSerialized]
		[Token(Token = "0x4000C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private ExposedList<Vector2> uv3;

		[Token(Token = "0x17000281")]
		public int VertexCount
		{
			[Token(Token = "0x6001058")]
			[Address(RVA = "0x8912EC", Offset = "0x8912EC", VA = "0x8912EC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000282")]
		public MeshGeneratorBuffers Buffers
		{
			[Token(Token = "0x6001059")]
			[Address(RVA = "0x891310", Offset = "0x891310", VA = "0x891310")]
			get
			{
				return default(MeshGeneratorBuffers);
			}
		}

		[Token(Token = "0x600105A")]
		[Address(RVA = "0x8913A0", Offset = "0x8913A0", VA = "0x8913A0")]
		public static void GenerateSingleSubmeshInstruction(SkeletonRendererInstruction instructionOutput, Skeleton skeleton, Material material)
		{
		}

		[Token(Token = "0x600105B")]
		[Address(RVA = "0x89180C", Offset = "0x89180C", VA = "0x89180C")]
		public static void GenerateSkeletonRendererInstruction(SkeletonRendererInstruction instructionOutput, Skeleton skeleton, Dictionary<Slot, Material> customSlotMaterials, List<Slot> separatorSlots, bool generateMeshOverride, bool immutableTriangles = false)
		{
		}

		[Token(Token = "0x600105C")]
		[Address(RVA = "0x892364", Offset = "0x892364", VA = "0x892364")]
		public static void TryReplaceMaterials(ExposedList<SubmeshInstruction> workingSubmeshInstructions, Dictionary<Material, Material> customMaterialOverride)
		{
		}

		[Token(Token = "0x600105D")]
		[Address(RVA = "0x892490", Offset = "0x892490", VA = "0x892490")]
		public void Begin()
		{
		}

		[Token(Token = "0x600105E")]
		[Address(RVA = "0x89264C", Offset = "0x89264C", VA = "0x89264C")]
		public void AddSubmesh(SubmeshInstruction instruction, bool updateTriangles = true)
		{
		}

		[Token(Token = "0x600105F")]
		[Address(RVA = "0x893C54", Offset = "0x893C54", VA = "0x893C54")]
		public void BuildMesh(SkeletonRendererInstruction instruction, bool updateTriangles)
		{
		}

		[Token(Token = "0x6001060")]
		[Address(RVA = "0x893D3C", Offset = "0x893D3C", VA = "0x893D3C")]
		public void BuildMeshWithArrays(SkeletonRendererInstruction instruction, bool updateTriangles)
		{
		}

		[Token(Token = "0x6001061")]
		[Address(RVA = "0x895E08", Offset = "0x895E08", VA = "0x895E08")]
		public void ScaleVertexData(float scale)
		{
		}

		[Token(Token = "0x6001062")]
		[Address(RVA = "0x89396C", Offset = "0x89396C", VA = "0x89396C")]
		private void AddAttachmentTintBlack(float r2, float g2, float b2, int vertexCount)
		{
		}

		[Token(Token = "0x6001063")]
		[Address(RVA = "0x89600C", Offset = "0x89600C", VA = "0x89600C")]
		public void FillVertexData(Mesh mesh)
		{
		}

		[Token(Token = "0x6001064")]
		[Address(RVA = "0x896DE8", Offset = "0x896DE8", VA = "0x896DE8")]
		public void FillTriangles(Mesh mesh)
		{
		}

		[Token(Token = "0x6001065")]
		[Address(RVA = "0x896EE8", Offset = "0x896EE8", VA = "0x896EE8")]
		public void FillTrianglesSingle(Mesh mesh)
		{
		}

		[Token(Token = "0x6001066")]
		[Address(RVA = "0x896F88", Offset = "0x896F88", VA = "0x896F88")]
		public void TrimExcess()
		{
		}

		[Token(Token = "0x6001067")]
		[Address(RVA = "0x89674C", Offset = "0x89674C", VA = "0x89674C")]
		internal static void SolveTangents2DEnsureSize(ref Vector4[] tangentBuffer, ref Vector2[] tempTanBuffer, int vertexCount)
		{
		}

		[Token(Token = "0x6001068")]
		[Address(RVA = "0x896808", Offset = "0x896808", VA = "0x896808")]
		internal static void SolveTangents2DTriangles(Vector2[] tempTanBuffer, int[] triangles, int triangleCount, Vector3[] vertices, Vector2[] uvs, int vertexCount)
		{
		}

		[Token(Token = "0x6001069")]
		[Address(RVA = "0x896BD0", Offset = "0x896BD0", VA = "0x896BD0")]
		internal static void SolveTangents2DBuffer(Vector4[] tangents, Vector2[] tempTanBuffer, int vertexCount)
		{
		}

		[Token(Token = "0x600106A")]
		[Address(RVA = "0x897100", Offset = "0x897100", VA = "0x897100")]
		public MeshGenerator()
		{
		}
	}
	[Token(Token = "0x200021F")]
	public class MeshRendererBuffers : IDisposable
	{
		[Token(Token = "0x2000562")]
		public class SmartMesh : IDisposable
		{
			[Token(Token = "0x4001F16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Mesh mesh;

			[Token(Token = "0x4001F17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public SkeletonRendererInstruction instructionUsed;

			[Token(Token = "0x6001DA6")]
			[Address(RVA = "0x897CD0", Offset = "0x897CD0", VA = "0x897CD0", Slot = "4")]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001DA7")]
			[Address(RVA = "0x897E50", Offset = "0x897E50", VA = "0x897E50")]
			public SmartMesh()
			{
			}
		}

		[Token(Token = "0x4000C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private DoubleBuffered<SmartMesh> doubleBufferedMesh;

		[Token(Token = "0x4000C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal readonly ExposedList<Material> submeshMaterials;

		[Token(Token = "0x4000C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal Material[] sharedMaterials;

		[Token(Token = "0x600106B")]
		[Address(RVA = "0x8976D4", Offset = "0x8976D4", VA = "0x8976D4")]
		public void Initialize()
		{
		}

		[Token(Token = "0x600106C")]
		[Address(RVA = "0x897754", Offset = "0x897754", VA = "0x897754")]
		public Material[] GetUpdatedShaderdMaterialsArray()
		{
			return null;
		}

		[Token(Token = "0x600106D")]
		[Address(RVA = "0x897840", Offset = "0x897840", VA = "0x897840")]
		public bool MaterialsChangedInLastUpdate()
		{
			return default(bool);
		}

		[Token(Token = "0x600106E")]
		[Address(RVA = "0x897930", Offset = "0x897930", VA = "0x897930")]
		public void UpdateSharedMaterials(ExposedList<SubmeshInstruction> instructions)
		{
		}

		[Token(Token = "0x600106F")]
		[Address(RVA = "0x897AE8", Offset = "0x897AE8", VA = "0x897AE8")]
		public SmartMesh GetNextMesh()
		{
			return null;
		}

		[Token(Token = "0x6001070")]
		[Address(RVA = "0x897B60", Offset = "0x897B60", VA = "0x897B60")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001071")]
		[Address(RVA = "0x897BF8", Offset = "0x897BF8", VA = "0x897BF8", Slot = "4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6001072")]
		[Address(RVA = "0x897DA8", Offset = "0x897DA8", VA = "0x897DA8")]
		public MeshRendererBuffers()
		{
		}
	}
	[Token(Token = "0x2000220")]
	public class SkeletonRendererInstruction
	{
		[Token(Token = "0x4000C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool immutableTriangles;

		[Token(Token = "0x4000C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly ExposedList<SubmeshInstruction> submeshInstructions;

		[Token(Token = "0x4000C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool hasActiveClipping;

		[Token(Token = "0x4000C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int rawVertexCount;

		[Token(Token = "0x4000C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly ExposedList<Attachment> attachments;

		[Token(Token = "0x6001073")]
		[Address(RVA = "0x593914", Offset = "0x593914", VA = "0x593914")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001074")]
		[Address(RVA = "0x5948D4", Offset = "0x5948D4", VA = "0x5948D4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6001075")]
		[Address(RVA = "0x594950", Offset = "0x594950", VA = "0x594950")]
		public void SetWithSubset(ExposedList<SubmeshInstruction> instructions, int startSubmesh, int endSubmesh)
		{
		}

		[Token(Token = "0x6001076")]
		[Address(RVA = "0x592EA4", Offset = "0x592EA4", VA = "0x592EA4")]
		public void Set(SkeletonRendererInstruction other)
		{
		}

		[Token(Token = "0x6001077")]
		[Address(RVA = "0x592BC0", Offset = "0x592BC0", VA = "0x592BC0")]
		public static bool GeometryNotEqual(SkeletonRendererInstruction a, SkeletonRendererInstruction b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001078")]
		[Address(RVA = "0x593210", Offset = "0x593210", VA = "0x593210")]
		public SkeletonRendererInstruction()
		{
		}
	}
	[Token(Token = "0x2000221")]
	[ExecuteInEditMode]
	public class BoundingBoxFollower : MonoBehaviour
	{
		[Token(Token = "0x4000C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static bool DebugMessages;

		[Token(Token = "0x4000C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public SkeletonRenderer skeletonRenderer;

		[Token(Token = "0x4000C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "SpineSlot", RVA = "0x2F4310", Offset = "0x2F4310")]
		public string slotName;

		[Token(Token = "0x4000C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool isTrigger;

		[Token(Token = "0x4000C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		public bool clearStateOnDisable;

		[Token(Token = "0x4000C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Slot slot;

		[Token(Token = "0x4000C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private BoundingBoxAttachment currentAttachment;

		[Token(Token = "0x4000C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string currentAttachmentName;

		[Token(Token = "0x4000C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private PolygonCollider2D currentCollider;

		[Token(Token = "0x4000C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly Dictionary<BoundingBoxAttachment, PolygonCollider2D> colliderTable;

		[Token(Token = "0x4000C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public readonly Dictionary<BoundingBoxAttachment, string> nameTable;

		[Token(Token = "0x17000283")]
		public Slot Slot
		{
			[Token(Token = "0x6001079")]
			[Address(RVA = "0x88F988", Offset = "0x88F988", VA = "0x88F988")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000284")]
		public BoundingBoxAttachment CurrentAttachment
		{
			[Token(Token = "0x600107A")]
			[Address(RVA = "0x88F990", Offset = "0x88F990", VA = "0x88F990")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000285")]
		public string CurrentAttachmentName
		{
			[Token(Token = "0x600107B")]
			[Address(RVA = "0x88F998", Offset = "0x88F998", VA = "0x88F998")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000286")]
		public PolygonCollider2D CurrentCollider
		{
			[Token(Token = "0x600107C")]
			[Address(RVA = "0x88F9A0", Offset = "0x88F9A0", VA = "0x88F9A0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000287")]
		public bool IsTrigger
		{
			[Token(Token = "0x600107D")]
			[Address(RVA = "0x88F9A8", Offset = "0x88F9A8", VA = "0x88F9A8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600107E")]
		[Address(RVA = "0x88F9B0", Offset = "0x88F9B0", VA = "0x88F9B0")]
		private void Start()
		{
		}

		[Token(Token = "0x600107F")]
		[Address(RVA = "0x88FF64", Offset = "0x88FF64", VA = "0x88FF64")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001080")]
		[Address(RVA = "0x8900BC", Offset = "0x8900BC", VA = "0x8900BC")]
		private void HandleRebuild(SkeletonRenderer sr)
		{
		}

		[Token(Token = "0x6001081")]
		[Address(RVA = "0x88F9B8", Offset = "0x88F9B8", VA = "0x88F9B8")]
		public void Initialize(bool overwrite = false)
		{
		}

		[Token(Token = "0x6001082")]
		[Address(RVA = "0x890414", Offset = "0x890414", VA = "0x890414")]
		private void AddSkin(Skin skin, int slotIndex)
		{
		}

		[Token(Token = "0x6001083")]
		[Address(RVA = "0x890874", Offset = "0x890874", VA = "0x890874")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001084")]
		[Address(RVA = "0x890884", Offset = "0x890884", VA = "0x890884")]
		public void ClearState()
		{
		}

		[Token(Token = "0x6001085")]
		[Address(RVA = "0x8900C4", Offset = "0x8900C4", VA = "0x8900C4")]
		private void DisposeColliders()
		{
		}

		[Token(Token = "0x6001086")]
		[Address(RVA = "0x8909FC", Offset = "0x8909FC", VA = "0x8909FC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001087")]
		[Address(RVA = "0x890A1C", Offset = "0x890A1C", VA = "0x890A1C")]
		private void MatchAttachment(Attachment attachment)
		{
		}

		[Token(Token = "0x6001088")]
		[Address(RVA = "0x890DE8", Offset = "0x890DE8", VA = "0x890DE8")]
		public BoundingBoxFollower()
		{
		}
	}
	[Token(Token = "0x2000222")]
	[ExecuteInEditMode]
	[DisallowMultipleComponent]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E9688", Offset = "0x2E9688")]
	public class BoneFollowerGraphic : MonoBehaviour
	{
		[Token(Token = "0x4000C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public SkeletonGraphic skeletonGraphic;

		[Token(Token = "0x4000C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool initializeOnAwake;

		[Token(Token = "0x4000C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "SpineBone", RVA = "0x2F4378", Offset = "0x2F4378")]
		[SerializeField]
		public string boneName;

		[Token(Token = "0x4000C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool followBoneRotation;

		[Token(Token = "0x4000C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F43F4", Offset = "0x2F43F4")]
		public bool followSkeletonFlip;

		[Token(Token = "0x4000C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F4428", Offset = "0x2F4428")]
		public bool followLocalScale;

		[Token(Token = "0x4000C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool followZPosition;

		[NonSerialized]
		[Token(Token = "0x4000C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Bone bone;

		[Token(Token = "0x4000C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform skeletonTransform;

		[Token(Token = "0x4000C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool skeletonTransformIsParent;

		[NonSerialized]
		[Token(Token = "0x4000C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool valid;

		[Token(Token = "0x17000288")]
		public SkeletonGraphic SkeletonGraphic
		{
			[Token(Token = "0x600108A")]
			[Address(RVA = "0x88EFC0", Offset = "0x88EFC0", VA = "0x88EFC0")]
			get
			{
				return null;
			}
			[Token(Token = "0x600108B")]
			[Address(RVA = "0x88EFC8", Offset = "0x88EFC8", VA = "0x88EFC8")]
			set
			{
			}
		}

		[Token(Token = "0x600108C")]
		[Address(RVA = "0x88F15C", Offset = "0x88F15C", VA = "0x88F15C")]
		public bool SetBone(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x600108D")]
		[Address(RVA = "0x88F260", Offset = "0x88F260", VA = "0x88F260")]
		public void Awake()
		{
		}

		[Token(Token = "0x600108E")]
		[Address(RVA = "0x88EFD0", Offset = "0x88EFD0", VA = "0x88EFD0")]
		public void Initialize()
		{
		}

		[Token(Token = "0x600108F")]
		[Address(RVA = "0x88F270", Offset = "0x88F270", VA = "0x88F270")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x6001090")]
		[Address(RVA = "0x88F96C", Offset = "0x88F96C", VA = "0x88F96C")]
		public BoneFollowerGraphic()
		{
		}
	}
	[Token(Token = "0x2000223")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x2E96F8", Offset = "0x2E96F8")]
	[DisallowMultipleComponent]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E96F8", Offset = "0x2E96F8")]
	public class SkeletonGraphic : MaskableGraphic, ISkeletonComponent, IAnimationStateComponent, ISkeletonAnimation
	{
		[Token(Token = "0x4000C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public SkeletonDataAsset skeletonDataAsset;

		[Token(Token = "0x4000C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "SpineSkin", RVA = "0x2F445C", Offset = "0x2F445C")]
		public string initialSkinName;

		[Token(Token = "0x4000C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public bool initialFlipX;

		[Token(Token = "0x4000C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
		public bool initialFlipY;

		[Token(Token = "0x4000C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "SpineAnimation", RVA = "0x2F44BC", Offset = "0x2F44BC")]
		public string startingAnimation;

		[Token(Token = "0x4000C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public bool startingLoop;

		[Token(Token = "0x4000C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float timeScale;

		[Token(Token = "0x4000C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public bool freeze;

		[Token(Token = "0x4000C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x85")]
		public bool unscaledTime;

		[Token(Token = "0x4000C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Texture overrideTexture;

		[Token(Token = "0x4000C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		protected Skeleton skeleton;

		[Token(Token = "0x4000C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected AnimationState state;

		[Token(Token = "0x4000C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[SerializeField]
		protected MeshGenerator meshGenerator;

		[Token(Token = "0x4000C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private DoubleBuffered<MeshRendererBuffers.SmartMesh> meshBuffers;

		[Token(Token = "0x4000C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private SkeletonRendererInstruction currentInstructions;

		[Token(Token = "0x17000289")]
		public SkeletonDataAsset SkeletonDataAsset
		{
			[Token(Token = "0x6001091")]
			[Address(RVA = "0x591758", Offset = "0x591758", VA = "0x591758", Slot = "63")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700028A")]
		public Texture OverrideTexture
		{
			[Token(Token = "0x6001094")]
			[Address(RVA = "0x591CFC", Offset = "0x591CFC", VA = "0x591CFC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001095")]
			[Address(RVA = "0x591D04", Offset = "0x591D04", VA = "0x591D04")]
			set
			{
			}
		}

		[Token(Token = "0x1700028B")]
		public override Texture mainTexture
		{
			[Token(Token = "0x6001096")]
			[Address(RVA = "0x591D5C", Offset = "0x591D5C", VA = "0x591D5C", Slot = "35")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700028C")]
		public Skeleton Skeleton
		{
			[Token(Token = "0x600109C")]
			[Address(RVA = "0x592508", Offset = "0x592508", VA = "0x592508", Slot = "73")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700028D")]
		public SkeletonData SkeletonData
		{
			[Token(Token = "0x600109D")]
			[Address(RVA = "0x592510", Offset = "0x592510", VA = "0x592510")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700028E")]
		public bool IsValid
		{
			[Token(Token = "0x600109E")]
			[Address(RVA = "0x591F3C", Offset = "0x591F3C", VA = "0x591F3C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700028F")]
		public AnimationState AnimationState
		{
			[Token(Token = "0x600109F")]
			[Address(RVA = "0x592524", Offset = "0x592524", VA = "0x592524", Slot = "65")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000290")]
		public MeshGenerator MeshGenerator
		{
			[Token(Token = "0x60010A0")]
			[Address(RVA = "0x59252C", Offset = "0x59252C", VA = "0x59252C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000046")]
		public event UpdateBonesDelegate UpdateLocal
		{
			[Token(Token = "0x60010A2")]
			[Address(RVA = "0x5925C4", Offset = "0x5925C4", VA = "0x5925C4", Slot = "66")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB2D4", Offset = "0x2FB2D4")]
			add
			{
			}
			[Token(Token = "0x60010A3")]
			[Address(RVA = "0x59267C", Offset = "0x59267C", VA = "0x59267C", Slot = "67")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB2E4", Offset = "0x2FB2E4")]
			remove
			{
			}
		}

		[Token(Token = "0x14000047")]
		public event UpdateBonesDelegate UpdateWorld
		{
			[Token(Token = "0x60010A4")]
			[Address(RVA = "0x592734", Offset = "0x592734", VA = "0x592734", Slot = "68")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB2F4", Offset = "0x2FB2F4")]
			add
			{
			}
			[Token(Token = "0x60010A5")]
			[Address(RVA = "0x5927EC", Offset = "0x5927EC", VA = "0x5927EC", Slot = "69")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB304", Offset = "0x2FB304")]
			remove
			{
			}
		}

		[Token(Token = "0x14000048")]
		public event UpdateBonesDelegate UpdateComplete
		{
			[Token(Token = "0x60010A6")]
			[Address(RVA = "0x5928A4", Offset = "0x5928A4", VA = "0x5928A4", Slot = "70")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB314", Offset = "0x2FB314")]
			add
			{
			}
			[Token(Token = "0x60010A7")]
			[Address(RVA = "0x59295C", Offset = "0x59295C", VA = "0x59295C", Slot = "71")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB324", Offset = "0x2FB324")]
			remove
			{
			}
		}

		[Token(Token = "0x14000049")]
		public event MeshGeneratorDelegate OnPostProcessVertices
		{
			[Token(Token = "0x60010A8")]
			[Address(RVA = "0x592A14", Offset = "0x592A14", VA = "0x592A14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB334", Offset = "0x2FB334")]
			add
			{
			}
			[Token(Token = "0x60010A9")]
			[Address(RVA = "0x592ACC", Offset = "0x592ACC", VA = "0x592ACC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB344", Offset = "0x2FB344")]
			remove
			{
			}
		}

		[Token(Token = "0x6001092")]
		[Address(RVA = "0x591760", Offset = "0x591760", VA = "0x591760")]
		public static SkeletonGraphic NewSkeletonGraphicGameObject(SkeletonDataAsset skeletonDataAsset, Transform parent)
		{
			return null;
		}

		[Token(Token = "0x6001093")]
		[Address(RVA = "0x591880", Offset = "0x591880", VA = "0x591880")]
		public static SkeletonGraphic AddSkeletonGraphicComponent(GameObject gameObject, SkeletonDataAsset skeletonDataAsset)
		{
			return null;
		}

		[Token(Token = "0x6001097")]
		[Address(RVA = "0x591EF4", Offset = "0x591EF4", VA = "0x591EF4", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001098")]
		[Address(RVA = "0x591F4C", Offset = "0x591F4C", VA = "0x591F4C", Slot = "37")]
		public override void Rebuild(CanvasUpdate update)
		{
		}

		[Token(Token = "0x6001099")]
		[Address(RVA = "0x5923A4", Offset = "0x5923A4", VA = "0x5923A4", Slot = "74")]
		public virtual void Update()
		{
		}

		[Token(Token = "0x600109A")]
		[Address(RVA = "0x5923F8", Offset = "0x5923F8", VA = "0x5923F8", Slot = "75")]
		public virtual void Update(float deltaTime)
		{
		}

		[Token(Token = "0x600109B")]
		[Address(RVA = "0x5924F8", Offset = "0x5924F8", VA = "0x5924F8", Slot = "72")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x60010A1")]
		[Address(RVA = "0x592534", Offset = "0x592534", VA = "0x592534")]
		public Mesh GetLastMesh()
		{
			return null;
		}

		[Token(Token = "0x60010AA")]
		[Address(RVA = "0x592B84", Offset = "0x592B84", VA = "0x592B84")]
		public void Clear()
		{
		}

		[Token(Token = "0x60010AB")]
		[Address(RVA = "0x591978", Offset = "0x591978", VA = "0x591978")]
		public void Initialize(bool overwrite)
		{
		}

		[Token(Token = "0x60010AC")]
		[Address(RVA = "0x591FAC", Offset = "0x591FAC", VA = "0x591FAC")]
		public void UpdateMesh()
		{
		}

		[Token(Token = "0x60010AD")]
		[Address(RVA = "0x593158", Offset = "0x593158", VA = "0x593158")]
		public SkeletonGraphic()
		{
		}
	}
	[Token(Token = "0x2000224")]
	public class WaitForSpineAnimationComplete : IEnumerator
	{
		[Token(Token = "0x4000C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private bool m_WasFired;

		[Token(Token = "0x17000291")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60010B4")]
			[Address(RVA = "0x599904", Offset = "0x599904", VA = "0x599904", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010AE")]
		[Address(RVA = "0x5996E0", Offset = "0x5996E0", VA = "0x5996E0")]
		public WaitForSpineAnimationComplete(TrackEntry trackEntry)
		{
		}

		[Token(Token = "0x60010AF")]
		[Address(RVA = "0x5997F8", Offset = "0x5997F8", VA = "0x5997F8")]
		private void HandleComplete(TrackEntry trackEntry)
		{
		}

		[Token(Token = "0x60010B0")]
		[Address(RVA = "0x599708", Offset = "0x599708", VA = "0x599708")]
		private void SafeSubscribe(TrackEntry trackEntry)
		{
		}

		[Token(Token = "0x60010B1")]
		[Address(RVA = "0x599804", Offset = "0x599804", VA = "0x599804")]
		public WaitForSpineAnimationComplete NowWaitFor(TrackEntry trackEntry)
		{
			return null;
		}

		[Token(Token = "0x60010B2")]
		[Address(RVA = "0x59981C", Offset = "0x59981C", VA = "0x59981C", Slot = "4")]
		private bool System.Collections.IEnumerator.MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60010B3")]
		[Address(RVA = "0x5998F8", Offset = "0x5998F8", VA = "0x5998F8", Slot = "6")]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}
	[Token(Token = "0x2000225")]
	public class WaitForSpineEvent : IEnumerator
	{
		[Token(Token = "0x4000C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private EventData m_TargetEvent;

		[Token(Token = "0x4000C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private string m_EventName;

		[Token(Token = "0x4000C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private AnimationState m_AnimationState;

		[Token(Token = "0x4000C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private bool m_WasFired;

		[Token(Token = "0x4000C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		private bool m_unsubscribeAfterFiring;

		[Token(Token = "0x17000292")]
		public bool WillUnsubscribeAfterFiring
		{
			[Token(Token = "0x60010BD")]
			[Address(RVA = "0x599EC8", Offset = "0x599EC8", VA = "0x599EC8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60010BE")]
			[Address(RVA = "0x599ED0", Offset = "0x599ED0", VA = "0x599ED0")]
			set
			{
			}
		}

		[Token(Token = "0x17000293")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60010C4")]
			[Address(RVA = "0x59A2B8", Offset = "0x59A2B8", VA = "0x59A2B8", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010B5")]
		[Address(RVA = "0x59990C", Offset = "0x59990C", VA = "0x59990C")]
		private void Subscribe(AnimationState state, EventData eventDataReference, bool unsubscribe)
		{
		}

		[Token(Token = "0x60010B6")]
		[Address(RVA = "0x599A54", Offset = "0x599A54", VA = "0x599A54")]
		private void SubscribeByName(AnimationState state, string eventName, bool unsubscribe)
		{
		}

		[Token(Token = "0x60010B7")]
		[Address(RVA = "0x599BA8", Offset = "0x599BA8", VA = "0x599BA8")]
		public WaitForSpineEvent(AnimationState state, EventData eventDataReference, bool unsubscribeAfterFiring = true)
		{
		}

		[Token(Token = "0x60010B8")]
		[Address(RVA = "0x599BE8", Offset = "0x599BE8", VA = "0x599BE8")]
		public WaitForSpineEvent(SkeletonAnimation skeletonAnimation, EventData eventDataReference, bool unsubscribeAfterFiring = true)
		{
		}

		[Token(Token = "0x60010B9")]
		[Address(RVA = "0x599C38", Offset = "0x599C38", VA = "0x599C38")]
		public WaitForSpineEvent(AnimationState state, string eventName, bool unsubscribeAfterFiring = true)
		{
		}

		[Token(Token = "0x60010BA")]
		[Address(RVA = "0x599C78", Offset = "0x599C78", VA = "0x599C78")]
		public WaitForSpineEvent(SkeletonAnimation skeletonAnimation, string eventName, bool unsubscribeAfterFiring = true)
		{
		}

		[Token(Token = "0x60010BB")]
		[Address(RVA = "0x599CC8", Offset = "0x599CC8", VA = "0x599CC8")]
		private void HandleAnimationStateEventByName(TrackEntry trackEntry, Event e)
		{
		}

		[Token(Token = "0x60010BC")]
		[Address(RVA = "0x599DCC", Offset = "0x599DCC", VA = "0x599DCC")]
		private void HandleAnimationStateEvent(TrackEntry trackEntry, Event e)
		{
		}

		[Token(Token = "0x60010BF")]
		[Address(RVA = "0x599ED8", Offset = "0x599ED8", VA = "0x599ED8")]
		public WaitForSpineEvent NowWaitFor(AnimationState state, EventData eventDataReference, bool unsubscribeAfterFiring = true)
		{
			return null;
		}

		[Token(Token = "0x60010C0")]
		[Address(RVA = "0x59A0D4", Offset = "0x59A0D4", VA = "0x59A0D4")]
		public WaitForSpineEvent NowWaitFor(AnimationState state, string eventName, bool unsubscribeAfterFiring = true)
		{
			return null;
		}

		[Token(Token = "0x60010C1")]
		[Address(RVA = "0x599FD4", Offset = "0x599FD4", VA = "0x599FD4")]
		private void Clear(AnimationState state)
		{
		}

		[Token(Token = "0x60010C2")]
		[Address(RVA = "0x59A1D0", Offset = "0x59A1D0", VA = "0x59A1D0", Slot = "4")]
		private bool System.Collections.IEnumerator.MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60010C3")]
		[Address(RVA = "0x59A2AC", Offset = "0x59A2AC", VA = "0x59A2AC", Slot = "6")]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}
	[Token(Token = "0x2000226")]
	public class WaitForSpineTrackEntryEnd : IEnumerator
	{
		[Token(Token = "0x4000C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private bool m_WasFired;

		[Token(Token = "0x17000294")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60010CB")]
			[Address(RVA = "0x59A4E4", Offset = "0x59A4E4", VA = "0x59A4E4", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010C5")]
		[Address(RVA = "0x59A2C0", Offset = "0x59A2C0", VA = "0x59A2C0")]
		public WaitForSpineTrackEntryEnd(TrackEntry trackEntry)
		{
		}

		[Token(Token = "0x60010C6")]
		[Address(RVA = "0x59A3D8", Offset = "0x59A3D8", VA = "0x59A3D8")]
		private void HandleEnd(TrackEntry trackEntry)
		{
		}

		[Token(Token = "0x60010C7")]
		[Address(RVA = "0x59A2E8", Offset = "0x59A2E8", VA = "0x59A2E8")]
		private void SafeSubscribe(TrackEntry trackEntry)
		{
		}

		[Token(Token = "0x60010C8")]
		[Address(RVA = "0x59A3E4", Offset = "0x59A3E4", VA = "0x59A3E4")]
		public WaitForSpineTrackEntryEnd NowWaitFor(TrackEntry trackEntry)
		{
			return null;
		}

		[Token(Token = "0x60010C9")]
		[Address(RVA = "0x59A3FC", Offset = "0x59A3FC", VA = "0x59A3FC", Slot = "4")]
		private bool System.Collections.IEnumerator.MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60010CA")]
		[Address(RVA = "0x59A4D8", Offset = "0x59A4D8", VA = "0x59A4D8", Slot = "6")]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}
	[Token(Token = "0x2000227")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E97F4", Offset = "0x2E97F4")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E97F4", Offset = "0x2E97F4")]
	public class SkeletonAnimation : SkeletonRenderer, ISkeletonAnimation, IAnimationStateComponent
	{
		[Token(Token = "0x4000C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public AnimationState state;

		[Token(Token = "0x4000C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		[AttributeAttribute(Name = "SpineAnimation", RVA = "0x2F459C", Offset = "0x2F459C")]
		private string _animationName;

		[Token(Token = "0x4000C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public bool loop;

		[Token(Token = "0x4000C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float timeScale;

		[Token(Token = "0x17000295")]
		public AnimationState AnimationState
		{
			[Token(Token = "0x60010CC")]
			[Address(RVA = "0x58B5E4", Offset = "0x58B5E4", VA = "0x58B5E4", Slot = "18")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000296")]
		public string AnimationName
		{
			[Token(Token = "0x60010D9")]
			[Address(RVA = "0x58BA54", Offset = "0x58BA54", VA = "0x58BA54")]
			get
			{
				return null;
			}
			[Token(Token = "0x60010DA")]
			[Address(RVA = "0x58BB44", Offset = "0x58BB44", VA = "0x58BB44")]
			set
			{
			}
		}

		[Token(Token = "0x1400004A")]
		protected event UpdateBonesDelegate _UpdateLocal
		{
			[Token(Token = "0x60010CD")]
			[Address(RVA = "0x58B5EC", Offset = "0x58B5EC", VA = "0x58B5EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB354", Offset = "0x2FB354")]
			add
			{
			}
			[Token(Token = "0x60010CE")]
			[Address(RVA = "0x58B6A4", Offset = "0x58B6A4", VA = "0x58B6A4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB364", Offset = "0x2FB364")]
			remove
			{
			}
		}

		[Token(Token = "0x1400004B")]
		protected event UpdateBonesDelegate _UpdateWorld
		{
			[Token(Token = "0x60010CF")]
			[Address(RVA = "0x58B75C", Offset = "0x58B75C", VA = "0x58B75C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB374", Offset = "0x2FB374")]
			add
			{
			}
			[Token(Token = "0x60010D0")]
			[Address(RVA = "0x58B814", Offset = "0x58B814", VA = "0x58B814")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB384", Offset = "0x2FB384")]
			remove
			{
			}
		}

		[Token(Token = "0x1400004C")]
		protected event UpdateBonesDelegate _UpdateComplete
		{
			[Token(Token = "0x60010D1")]
			[Address(RVA = "0x58B8CC", Offset = "0x58B8CC", VA = "0x58B8CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB394", Offset = "0x2FB394")]
			add
			{
			}
			[Token(Token = "0x60010D2")]
			[Address(RVA = "0x58B984", Offset = "0x58B984", VA = "0x58B984")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB3A4", Offset = "0x2FB3A4")]
			remove
			{
			}
		}

		[Token(Token = "0x1400004D")]
		public event UpdateBonesDelegate UpdateLocal
		{
			[Token(Token = "0x60010D3")]
			[Address(RVA = "0x58BA3C", Offset = "0x58BA3C", VA = "0x58BA3C", Slot = "10")]
			add
			{
			}
			[Token(Token = "0x60010D4")]
			[Address(RVA = "0x58BA40", Offset = "0x58BA40", VA = "0x58BA40", Slot = "11")]
			remove
			{
			}
		}

		[Token(Token = "0x1400004E")]
		public event UpdateBonesDelegate UpdateWorld
		{
			[Token(Token = "0x60010D5")]
			[Address(RVA = "0x58BA44", Offset = "0x58BA44", VA = "0x58BA44", Slot = "12")]
			add
			{
			}
			[Token(Token = "0x60010D6")]
			[Address(RVA = "0x58BA48", Offset = "0x58BA48", VA = "0x58BA48", Slot = "13")]
			remove
			{
			}
		}

		[Token(Token = "0x1400004F")]
		public event UpdateBonesDelegate UpdateComplete
		{
			[Token(Token = "0x60010D7")]
			[Address(RVA = "0x58BA4C", Offset = "0x58BA4C", VA = "0x58BA4C", Slot = "14")]
			add
			{
			}
			[Token(Token = "0x60010D8")]
			[Address(RVA = "0x58BA50", Offset = "0x58BA50", VA = "0x58BA50", Slot = "15")]
			remove
			{
			}
		}

		[Token(Token = "0x60010DB")]
		[Address(RVA = "0x58BC88", Offset = "0x58BC88", VA = "0x58BC88")]
		public static SkeletonAnimation AddToGameObject(GameObject gameObject, SkeletonDataAsset skeletonDataAsset)
		{
			return null;
		}

		[Token(Token = "0x60010DC")]
		[Address(RVA = "0x58BCF4", Offset = "0x58BCF4", VA = "0x58BCF4")]
		public static SkeletonAnimation NewSkeletonAnimationGameObject(SkeletonDataAsset skeletonDataAsset)
		{
			return null;
		}

		[Token(Token = "0x60010DD")]
		[Address(RVA = "0x58BD58", Offset = "0x58BD58", VA = "0x58BD58", Slot = "7")]
		public override void ClearState()
		{
		}

		[Token(Token = "0x60010DE")]
		[Address(RVA = "0x58BDE4", Offset = "0x58BDE4", VA = "0x58BDE4", Slot = "8")]
		public override void Initialize(bool overwrite)
		{
		}

		[Token(Token = "0x60010DF")]
		[Address(RVA = "0x58C530", Offset = "0x58C530", VA = "0x58C530")]
		private void Update()
		{
		}

		[Token(Token = "0x60010E0")]
		[Address(RVA = "0x58C40C", Offset = "0x58C40C", VA = "0x58C40C")]
		public void Update(float deltaTime)
		{
		}

		[Token(Token = "0x60010E1")]
		[Address(RVA = "0x58C954", Offset = "0x58C954", VA = "0x58C954")]
		public SkeletonAnimation()
		{
		}
	}
	[Token(Token = "0x2000228")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x2E9874", Offset = "0x2E9874")]
	public class SkeletonAnimator : SkeletonRenderer, ISkeletonAnimation
	{
		[Serializable]
		[Token(Token = "0x2000563")]
		public class MecanimTranslator
		{
			[Token(Token = "0x2000790")]
			public enum MixMode
			{
				[Token(Token = "0x400226C")]
				AlwaysMix,
				[Token(Token = "0x400226D")]
				MixNext,
				[Token(Token = "0x400226E")]
				SpineStyle
			}

			[Token(Token = "0x2000791")]
			private class AnimationClipEqualityComparer : IEqualityComparer<AnimationClip>
			{
				[Token(Token = "0x400226F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				internal static readonly IEqualityComparer<AnimationClip> Instance;

				[Token(Token = "0x60024C9")]
				[Address(RVA = "0x58F3C8", Offset = "0x58F3C8", VA = "0x58F3C8", Slot = "4")]
				public bool Equals(AnimationClip x, AnimationClip y)
				{
					return default(bool);
				}

				[Token(Token = "0x60024CA")]
				[Address(RVA = "0x58F428", Offset = "0x58F428", VA = "0x58F428", Slot = "5")]
				public int GetHashCode(AnimationClip o)
				{
					return default(int);
				}

				[Token(Token = "0x60024CB")]
				[Address(RVA = "0x58F454", Offset = "0x58F454", VA = "0x58F454")]
				public AnimationClipEqualityComparer()
				{
				}
			}

			[Token(Token = "0x2000792")]
			private class IntEqualityComparer : IEqualityComparer<int>
			{
				[Token(Token = "0x4002270")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				internal static readonly IEqualityComparer<int> Instance;

				[Token(Token = "0x60024CD")]
				[Address(RVA = "0x58F4D0", Offset = "0x58F4D0", VA = "0x58F4D0", Slot = "4")]
				public bool Equals(int x, int y)
				{
					return default(bool);
				}

				[Token(Token = "0x60024CE")]
				[Address(RVA = "0x58F4E0", Offset = "0x58F4E0", VA = "0x58F4E0", Slot = "5")]
				public int GetHashCode(int o)
				{
					return default(int);
				}

				[Token(Token = "0x60024CF")]
				[Address(RVA = "0x58F4E8", Offset = "0x58F4E8", VA = "0x58F4E8")]
				public IntEqualityComparer()
				{
				}
			}

			[Token(Token = "0x4001F18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public bool autoReset;

			[Token(Token = "0x4001F19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public MixMode[] layerMixModes;

			[Token(Token = "0x4001F1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Dictionary<int, Animation> animationTable;

			[Token(Token = "0x4001F1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private readonly Dictionary<AnimationClip, int> clipNameHashCodeTable;

			[Token(Token = "0x4001F1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly List<Animation> previousAnimations;

			[Token(Token = "0x4001F1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private readonly List<AnimatorClipInfo> clipInfoCache;

			[Token(Token = "0x4001F1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private readonly List<AnimatorClipInfo> nextClipInfoCache;

			[Token(Token = "0x4001F1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private Animator animator;

			[Token(Token = "0x170003BB")]
			public Animator Animator
			{
				[Token(Token = "0x6001DA8")]
				[Address(RVA = "0x58EA48", Offset = "0x58EA48", VA = "0x58EA48")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001DA9")]
			[Address(RVA = "0x58D234", Offset = "0x58D234", VA = "0x58D234")]
			public void Initialize(Animator animator, SkeletonDataAsset skeletonDataAsset)
			{
			}

			[Token(Token = "0x6001DAA")]
			[Address(RVA = "0x58D524", Offset = "0x58D524", VA = "0x58D524")]
			public void Apply(Skeleton skeleton)
			{
			}

			[Token(Token = "0x6001DAB")]
			[Address(RVA = "0x58F340", Offset = "0x58F340", VA = "0x58F340")]
			private static float AnimationTime(float normalizedTime, float clipLength, bool loop, bool reversed)
			{
				return default(float);
			}

			[Token(Token = "0x6001DAC")]
			[Address(RVA = "0x58F394", Offset = "0x58F394", VA = "0x58F394")]
			private static float AnimationTime(float normalizedTime, float clipLength, bool reversed)
			{
				return default(float);
			}

			[Token(Token = "0x6001DAD")]
			[Address(RVA = "0x58F038", Offset = "0x58F038", VA = "0x58F038")]
			private void GetAnimatorClipInfos(int layer, out int clipInfoCount, out int nextClipInfoCount, out IList<AnimatorClipInfo> clipInfo, out IList<AnimatorClipInfo> nextClipInfo)
			{
			}

			[Token(Token = "0x6001DAE")]
			[Address(RVA = "0x58F220", Offset = "0x58F220", VA = "0x58F220")]
			private int NameHashCode(AnimationClip clip)
			{
				return default(int);
			}

			[Token(Token = "0x6001DAF")]
			[Address(RVA = "0x58D040", Offset = "0x58D040", VA = "0x58D040")]
			public MecanimTranslator()
			{
			}
		}

		[Token(Token = "0x4000C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		protected MecanimTranslator translator;

		[Token(Token = "0x17000297")]
		public MecanimTranslator Translator
		{
			[Token(Token = "0x60010E2")]
			[Address(RVA = "0x58CAE8", Offset = "0x58CAE8", VA = "0x58CAE8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000050")]
		protected event UpdateBonesDelegate _UpdateLocal
		{
			[Token(Token = "0x60010E3")]
			[Address(RVA = "0x58CAF0", Offset = "0x58CAF0", VA = "0x58CAF0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB3B4", Offset = "0x2FB3B4")]
			add
			{
			}
			[Token(Token = "0x60010E4")]
			[Address(RVA = "0x58CBA8", Offset = "0x58CBA8", VA = "0x58CBA8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB3C4", Offset = "0x2FB3C4")]
			remove
			{
			}
		}

		[Token(Token = "0x14000051")]
		protected event UpdateBonesDelegate _UpdateWorld
		{
			[Token(Token = "0x60010E5")]
			[Address(RVA = "0x58CC60", Offset = "0x58CC60", VA = "0x58CC60")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB3D4", Offset = "0x2FB3D4")]
			add
			{
			}
			[Token(Token = "0x60010E6")]
			[Address(RVA = "0x58CD18", Offset = "0x58CD18", VA = "0x58CD18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB3E4", Offset = "0x2FB3E4")]
			remove
			{
			}
		}

		[Token(Token = "0x14000052")]
		protected event UpdateBonesDelegate _UpdateComplete
		{
			[Token(Token = "0x60010E7")]
			[Address(RVA = "0x58CDD0", Offset = "0x58CDD0", VA = "0x58CDD0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB3F4", Offset = "0x2FB3F4")]
			add
			{
			}
			[Token(Token = "0x60010E8")]
			[Address(RVA = "0x58CE88", Offset = "0x58CE88", VA = "0x58CE88")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB404", Offset = "0x2FB404")]
			remove
			{
			}
		}

		[Token(Token = "0x14000053")]
		public event UpdateBonesDelegate UpdateLocal
		{
			[Token(Token = "0x60010E9")]
			[Address(RVA = "0x58CF40", Offset = "0x58CF40", VA = "0x58CF40", Slot = "10")]
			add
			{
			}
			[Token(Token = "0x60010EA")]
			[Address(RVA = "0x58CF44", Offset = "0x58CF44", VA = "0x58CF44", Slot = "11")]
			remove
			{
			}
		}

		[Token(Token = "0x14000054")]
		public event UpdateBonesDelegate UpdateWorld
		{
			[Token(Token = "0x60010EB")]
			[Address(RVA = "0x58CF48", Offset = "0x58CF48", VA = "0x58CF48", Slot = "12")]
			add
			{
			}
			[Token(Token = "0x60010EC")]
			[Address(RVA = "0x58CF4C", Offset = "0x58CF4C", VA = "0x58CF4C", Slot = "13")]
			remove
			{
			}
		}

		[Token(Token = "0x14000055")]
		public event UpdateBonesDelegate UpdateComplete
		{
			[Token(Token = "0x60010ED")]
			[Address(RVA = "0x58CF50", Offset = "0x58CF50", VA = "0x58CF50", Slot = "14")]
			add
			{
			}
			[Token(Token = "0x60010EE")]
			[Address(RVA = "0x58CF54", Offset = "0x58CF54", VA = "0x58CF54", Slot = "15")]
			remove
			{
			}
		}

		[Token(Token = "0x60010EF")]
		[Address(RVA = "0x58CF58", Offset = "0x58CF58", VA = "0x58CF58", Slot = "8")]
		public override void Initialize(bool overwrite)
		{
		}

		[Token(Token = "0x60010F0")]
		[Address(RVA = "0x58D468", Offset = "0x58D468", VA = "0x58D468")]
		public void Update()
		{
		}

		[Token(Token = "0x60010F1")]
		[Address(RVA = "0x58EA44", Offset = "0x58EA44", VA = "0x58EA44")]
		public SkeletonAnimator()
		{
		}
	}
	[Token(Token = "0x2000229")]
	public static class SkeletonExtensions
	{
		[Token(Token = "0x4000C59")]
		private const float ByteToFloat = 0.003921569f;

		[Token(Token = "0x60010F2")]
		[Address(RVA = "0x58FE48", Offset = "0x58FE48", VA = "0x58FE48")]
		public static Color GetColor(this Skeleton s)
		{
			return default(Color);
		}

		[Token(Token = "0x60010F3")]
		[Address(RVA = "0x58FEE8", Offset = "0x58FEE8", VA = "0x58FEE8")]
		public static Color GetColor(this RegionAttachment a)
		{
			return default(Color);
		}

		[Token(Token = "0x60010F4")]
		[Address(RVA = "0x58FF88", Offset = "0x58FF88", VA = "0x58FF88")]
		public static Color GetColor(this MeshAttachment a)
		{
			return default(Color);
		}

		[Token(Token = "0x60010F5")]
		[Address(RVA = "0x590028", Offset = "0x590028", VA = "0x590028")]
		public static void SetColor(this Skeleton skeleton, Color color)
		{
		}

		[Token(Token = "0x60010F6")]
		[Address(RVA = "0x59009C", Offset = "0x59009C", VA = "0x59009C")]
		public static void SetColor(this Skeleton skeleton, Color32 color)
		{
		}

		[Token(Token = "0x60010F7")]
		[Address(RVA = "0x590188", Offset = "0x590188", VA = "0x590188")]
		public static void SetColor(this Slot slot, Color color)
		{
		}

		[Token(Token = "0x60010F8")]
		[Address(RVA = "0x5901FC", Offset = "0x5901FC", VA = "0x5901FC")]
		public static void SetColor(this Slot slot, Color32 color)
		{
		}

		[Token(Token = "0x60010F9")]
		[Address(RVA = "0x5902E8", Offset = "0x5902E8", VA = "0x5902E8")]
		public static void SetColor(this RegionAttachment attachment, Color color)
		{
		}

		[Token(Token = "0x60010FA")]
		[Address(RVA = "0x59035C", Offset = "0x59035C", VA = "0x59035C")]
		public static void SetColor(this RegionAttachment attachment, Color32 color)
		{
		}

		[Token(Token = "0x60010FB")]
		[Address(RVA = "0x590448", Offset = "0x590448", VA = "0x590448")]
		public static void SetColor(this MeshAttachment attachment, Color color)
		{
		}

		[Token(Token = "0x60010FC")]
		[Address(RVA = "0x5904BC", Offset = "0x5904BC", VA = "0x5904BC")]
		public static void SetColor(this MeshAttachment attachment, Color32 color)
		{
		}

		[Token(Token = "0x60010FD")]
		[Address(RVA = "0x5905A8", Offset = "0x5905A8", VA = "0x5905A8")]
		public static void SetPosition(this Bone bone, Vector2 position)
		{
		}

		[Token(Token = "0x60010FE")]
		[Address(RVA = "0x5905EC", Offset = "0x5905EC", VA = "0x5905EC")]
		public static void SetPosition(this Bone bone, Vector3 position)
		{
		}

		[Token(Token = "0x60010FF")]
		[Address(RVA = "0x590630", Offset = "0x590630", VA = "0x590630")]
		public static Vector2 GetLocalPosition(this Bone bone)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001100")]
		[Address(RVA = "0x590694", Offset = "0x590694", VA = "0x590694")]
		public static Vector2 GetSkeletonSpacePosition(this Bone bone)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001101")]
		[Address(RVA = "0x5906F8", Offset = "0x5906F8", VA = "0x5906F8")]
		public static Vector2 GetSkeletonSpacePosition(this Bone bone, Vector2 boneLocal)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001102")]
		[Address(RVA = "0x590768", Offset = "0x590768", VA = "0x590768")]
		public static Vector3 GetWorldPosition(this Bone bone, Transform spineGameObjectTransform)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001103")]
		[Address(RVA = "0x590808", Offset = "0x590808", VA = "0x590808")]
		public static Vector3 GetWorldPosition(this Bone bone, Transform spineGameObjectTransform, float positionScale)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001104")]
		[Address(RVA = "0x5908B8", Offset = "0x5908B8", VA = "0x5908B8")]
		public static Quaternion GetQuaternion(this Bone bone)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001105")]
		[Address(RVA = "0x5909C4", Offset = "0x5909C4", VA = "0x5909C4")]
		public static Quaternion GetLocalQuaternion(this Bone bone)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001106")]
		[Address(RVA = "0x590AB4", Offset = "0x590AB4", VA = "0x590AB4")]
		public static Vector3 GetWorldPosition(this PointAttachment attachment, Slot slot, Transform spineGameObjectTransform)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001107")]
		[Address(RVA = "0x590B64", Offset = "0x590B64", VA = "0x590B64")]
		public static Vector3 GetWorldPosition(this PointAttachment attachment, Bone bone, Transform spineGameObjectTransform)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001108")]
		[Address(RVA = "0x590C04", Offset = "0x590C04", VA = "0x590C04")]
		public static Matrix4x4 GetMatrix4x4(this Bone bone)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6001109")]
		[Address(RVA = "0x590D04", Offset = "0x590D04", VA = "0x590D04")]
		public static void GetWorldToLocalMatrix(this Bone bone, out float ia, out float ib, out float ic, out float id)
		{
		}

		[Token(Token = "0x600110A")]
		[Address(RVA = "0x590DB4", Offset = "0x590DB4", VA = "0x590DB4")]
		public static Vector2 WorldToLocal(this Bone bone, Vector2 worldPosition)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600110B")]
		[Address(RVA = "0x590E24", Offset = "0x590E24", VA = "0x590E24")]
		public static Vector2 SetPositionSkeletonSpace(this Bone bone, Vector2 skeletonSpacePosition)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600110C")]
		[Address(RVA = "0x590EAC", Offset = "0x590EAC", VA = "0x590EAC")]
		public static Material GetMaterial(this Attachment a)
		{
			return null;
		}

		[Token(Token = "0x600110D")]
		[Address(RVA = "0x591084", Offset = "0x591084", VA = "0x591084")]
		public static Vector2[] GetLocalVertices(this VertexAttachment va, Slot slot, Vector2[] buffer)
		{
			return null;
		}

		[Token(Token = "0x600110E")]
		[Address(RVA = "0x5914C8", Offset = "0x5914C8", VA = "0x5914C8")]
		public static Vector2[] GetWorldVertices(this VertexAttachment a, Slot slot, Vector2[] buffer)
		{
			return null;
		}
	}
	[Token(Token = "0x200022A")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x2E98FC", Offset = "0x2E98FC")]
	[DisallowMultipleComponent]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E98FC", Offset = "0x2E98FC")]
	public class SkeletonRenderer : MonoBehaviour, ISkeletonComponent
	{
		[Token(Token = "0x2000564")]
		public delegate void SkeletonRendererDelegate(SkeletonRenderer skeletonRenderer);

		[Token(Token = "0x2000565")]
		public delegate void InstructionDelegate(SkeletonRendererInstruction instruction);

		[Token(Token = "0x4000C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public SkeletonDataAsset skeletonDataAsset;

		[Token(Token = "0x4000C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string initialSkinName;

		[Token(Token = "0x4000C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool initialFlipX;

		[Token(Token = "0x4000C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool initialFlipY;

		[Token(Token = "0x4000C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x2F466C", Offset = "0x2F466C")]
		[AttributeAttribute(Name = "SpineSlot", RVA = "0x2F466C", Offset = "0x2F466C")]
		public string[] separatorSlotNames;

		[NonSerialized]
		[Token(Token = "0x4000C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public readonly List<Slot> separatorSlots;

		[Token(Token = "0x4000C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F4704", Offset = "0x2F4704")]
		public float zSpacing;

		[Token(Token = "0x4000C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool useClipping;

		[Token(Token = "0x4000C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public bool immutableTriangles;

		[Token(Token = "0x4000C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
		public bool pmaVertexColors;

		[Token(Token = "0x4000C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F")]
		public bool clearStateOnDisable;

		[Token(Token = "0x4000C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool tintBlack;

		[Token(Token = "0x4000C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool singleSubmesh;

		[Token(Token = "0x4000C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x2F4720", Offset = "0x2F4720")]
		public bool addNormals;

		[Token(Token = "0x4000C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
		public bool calculateTangents;

		[Token(Token = "0x4000C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool logErrors;

		[Token(Token = "0x4000C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		public bool disableRenderingOnOverride;

		[NonSerialized]
		[Token(Token = "0x4000C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private readonly Dictionary<Material, Material> customMaterialOverride;

		[NonSerialized]
		[Token(Token = "0x4000C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly Dictionary<Slot, Material> customSlotMaterials;

		[Token(Token = "0x4000C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private MeshRenderer meshRenderer;

		[Token(Token = "0x4000C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private MeshFilter meshFilter;

		[NonSerialized]
		[Token(Token = "0x4000C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool valid;

		[NonSerialized]
		[Token(Token = "0x4000C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Skeleton skeleton;

		[NonSerialized]
		[Token(Token = "0x4000C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private readonly SkeletonRendererInstruction currentInstructions;

		[Token(Token = "0x4000C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly MeshGenerator meshGenerator;

		[NonSerialized]
		[Token(Token = "0x4000C76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private readonly MeshRendererBuffers rendererBuffers;

		[Token(Token = "0x17000298")]
		public SkeletonDataAsset SkeletonDataAsset
		{
			[Token(Token = "0x6001113")]
			[Address(RVA = "0x5935B8", Offset = "0x5935B8", VA = "0x5935B8", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000299")]
		public Dictionary<Material, Material> CustomMaterialOverride
		{
			[Token(Token = "0x6001118")]
			[Address(RVA = "0x593804", Offset = "0x593804", VA = "0x593804")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700029A")]
		public Dictionary<Slot, Material> CustomSlotMaterials
		{
			[Token(Token = "0x6001119")]
			[Address(RVA = "0x59380C", Offset = "0x59380C", VA = "0x59380C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700029B")]
		public Skeleton Skeleton
		{
			[Token(Token = "0x600111A")]
			[Address(RVA = "0x58B5B0", Offset = "0x58B5B0", VA = "0x58B5B0", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000056")]
		public event SkeletonRendererDelegate OnRebuild
		{
			[Token(Token = "0x600110F")]
			[Address(RVA = "0x5932D8", Offset = "0x5932D8", VA = "0x5932D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB5E4", Offset = "0x2FB5E4")]
			add
			{
			}
			[Token(Token = "0x6001110")]
			[Address(RVA = "0x593390", Offset = "0x593390", VA = "0x593390")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB5F4", Offset = "0x2FB5F4")]
			remove
			{
			}
		}

		[Token(Token = "0x14000057")]
		public event MeshGeneratorDelegate OnPostProcessVertices
		{
			[Token(Token = "0x6001111")]
			[Address(RVA = "0x593448", Offset = "0x593448", VA = "0x593448")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB604", Offset = "0x2FB604")]
			add
			{
			}
			[Token(Token = "0x6001112")]
			[Address(RVA = "0x593500", Offset = "0x593500", VA = "0x593500")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB614", Offset = "0x2FB614")]
			remove
			{
			}
		}

		[Token(Token = "0x14000058")]
		private event InstructionDelegate generateMeshOverride
		{
			[Token(Token = "0x6001114")]
			[Address(RVA = "0x5935C0", Offset = "0x5935C0", VA = "0x5935C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB624", Offset = "0x2FB624")]
			add
			{
			}
			[Token(Token = "0x6001115")]
			[Address(RVA = "0x593678", Offset = "0x593678", VA = "0x593678")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB634", Offset = "0x2FB634")]
			remove
			{
			}
		}

		[Token(Token = "0x14000059")]
		public event InstructionDelegate GenerateMeshOverride
		{
			[Token(Token = "0x6001116")]
			[Address(RVA = "0x593730", Offset = "0x593730", VA = "0x593730")]
			add
			{
			}
			[Token(Token = "0x6001117")]
			[Address(RVA = "0x593798", Offset = "0x593798", VA = "0x593798")]
			remove
			{
			}
		}

		[Token(Token = "0x600111B")]
		public static T NewSpineGameObject<T>(SkeletonDataAsset skeletonDataAsset) where T : SkeletonRenderer
		{
			return null;
		}

		[Token(Token = "0x600111C")]
		public static T AddSpineComponent<T>(GameObject gameObject, SkeletonDataAsset skeletonDataAsset) where T : SkeletonRenderer
		{
			return null;
		}

		[Token(Token = "0x600111D")]
		[Address(RVA = "0x593814", Offset = "0x593814", VA = "0x593814")]
		public void SetMeshSettings(MeshGenerator.Settings settings)
		{
		}

		[Token(Token = "0x600111E")]
		[Address(RVA = "0x5938A0", Offset = "0x5938A0", VA = "0x5938A0", Slot = "6")]
		public virtual void Awake()
		{
		}

		[Token(Token = "0x600111F")]
		[Address(RVA = "0x5938B4", Offset = "0x5938B4", VA = "0x5938B4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001120")]
		[Address(RVA = "0x5938DC", Offset = "0x5938DC", VA = "0x5938DC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001121")]
		[Address(RVA = "0x58BD80", Offset = "0x58BD80", VA = "0x58BD80", Slot = "7")]
		public virtual void ClearState()
		{
		}

		[Token(Token = "0x6001122")]
		[Address(RVA = "0x58BF24", Offset = "0x58BF24", VA = "0x58BF24", Slot = "8")]
		public virtual void Initialize(bool overwrite)
		{
		}

		[Token(Token = "0x6001123")]
		[Address(RVA = "0x593DD0", Offset = "0x593DD0", VA = "0x593DD0", Slot = "9")]
		public virtual void LateUpdate()
		{
		}

		[Token(Token = "0x6001124")]
		[Address(RVA = "0x58C960", Offset = "0x58C960", VA = "0x58C960")]
		public SkeletonRenderer()
		{
		}
	}
	[Token(Token = "0x200022B")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x2E9A10", Offset = "0x2E9A10")]
	[ExecuteInEditMode]
	public class SkeletonUtility : MonoBehaviour
	{
		[Token(Token = "0x2000566")]
		public delegate void SkeletonUtilityDelegate();

		[Token(Token = "0x4000C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform boneRoot;

		[Token(Token = "0x4000C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[HideInInspector]
		public SkeletonRenderer skeletonRenderer;

		[Token(Token = "0x4000C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public ISkeletonAnimation skeletonAnimation;

		[NonSerialized]
		[Token(Token = "0x4000C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public List<SkeletonUtilityBone> utilityBones;

		[NonSerialized]
		[Token(Token = "0x4000C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<SkeletonUtilityConstraint> utilityConstraints;

		[Token(Token = "0x4000C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		protected bool hasTransformBones;

		[Token(Token = "0x4000C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		protected bool hasUtilityConstraints;

		[Token(Token = "0x4000C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		protected bool needToReprocessBones;

		[Token(Token = "0x1400005A")]
		public event SkeletonUtilityDelegate OnReset
		{
			[Token(Token = "0x600112A")]
			[Address(RVA = "0x595914", Offset = "0x595914", VA = "0x595914")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB644", Offset = "0x2FB644")]
			add
			{
			}
			[Token(Token = "0x600112B")]
			[Address(RVA = "0x5959CC", Offset = "0x5959CC", VA = "0x5959CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB654", Offset = "0x2FB654")]
			remove
			{
			}
		}

		[Token(Token = "0x6001125")]
		[Address(RVA = "0x594DD0", Offset = "0x594DD0", VA = "0x594DD0")]
		public static PolygonCollider2D AddBoundingBoxGameObject(Skeleton skeleton, string skinName, string slotName, string attachmentName, Transform parent, bool isTrigger = true)
		{
			return null;
		}

		[Token(Token = "0x6001126")]
		[Address(RVA = "0x5951C4", Offset = "0x5951C4", VA = "0x5951C4")]
		public static PolygonCollider2D AddBoundingBoxGameObject(string name, BoundingBoxAttachment box, Slot slot, Transform parent, bool isTrigger = true)
		{
			return null;
		}

		[Token(Token = "0x6001127")]
		[Address(RVA = "0x5953EC", Offset = "0x5953EC", VA = "0x5953EC")]
		public static PolygonCollider2D AddBoundingBoxAsComponent(BoundingBoxAttachment box, Slot slot, GameObject gameObject, bool isTrigger = true, bool isKinematic = true, float gravityScale = 0f)
		{
			return null;
		}

		[Token(Token = "0x6001128")]
		[Address(RVA = "0x595610", Offset = "0x595610", VA = "0x595610")]
		public static void SetColliderPointsLocal(PolygonCollider2D collider, Slot slot, BoundingBoxAttachment box)
		{
		}

		[Token(Token = "0x6001129")]
		[Address(RVA = "0x5956FC", Offset = "0x5956FC", VA = "0x5956FC")]
		public static Bounds GetBoundingBoxBounds(BoundingBoxAttachment boundingBox, float depth = 0f)
		{
			return default(Bounds);
		}

		[Token(Token = "0x600112C")]
		[Address(RVA = "0x595A84", Offset = "0x595A84", VA = "0x595A84")]
		private void Update()
		{
		}

		[Token(Token = "0x600112D")]
		[Address(RVA = "0x595BCC", Offset = "0x595BCC", VA = "0x595BCC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600112E")]
		[Address(RVA = "0x596644", Offset = "0x596644", VA = "0x596644")]
		private void Start()
		{
		}

		[Token(Token = "0x600112F")]
		[Address(RVA = "0x596648", Offset = "0x596648", VA = "0x596648")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001130")]
		[Address(RVA = "0x596940", Offset = "0x596940", VA = "0x596940")]
		private void HandleRendererReset(SkeletonRenderer r)
		{
		}

		[Token(Token = "0x6001131")]
		[Address(RVA = "0x596BA8", Offset = "0x596BA8", VA = "0x596BA8")]
		public void RegisterBone(SkeletonUtilityBone bone)
		{
		}

		[Token(Token = "0x6001132")]
		[Address(RVA = "0x596C68", Offset = "0x596C68", VA = "0x596C68")]
		public void UnregisterBone(SkeletonUtilityBone bone)
		{
		}

		[Token(Token = "0x6001133")]
		[Address(RVA = "0x596CE8", Offset = "0x596CE8", VA = "0x596CE8")]
		public void RegisterConstraint(SkeletonUtilityConstraint constraint)
		{
		}

		[Token(Token = "0x6001134")]
		[Address(RVA = "0x596DA8", Offset = "0x596DA8", VA = "0x596DA8")]
		public void UnregisterConstraint(SkeletonUtilityConstraint constraint)
		{
		}

		[Token(Token = "0x6001135")]
		[Address(RVA = "0x595F1C", Offset = "0x595F1C", VA = "0x595F1C")]
		public void CollectBones()
		{
		}

		[Token(Token = "0x6001136")]
		[Address(RVA = "0x596E28", Offset = "0x596E28", VA = "0x596E28")]
		private void UpdateLocal(ISkeletonAnimation anim)
		{
		}

		[Token(Token = "0x6001137")]
		[Address(RVA = "0x596FF8", Offset = "0x596FF8", VA = "0x596FF8")]
		private void UpdateWorld(ISkeletonAnimation anim)
		{
		}

		[Token(Token = "0x6001138")]
		[Address(RVA = "0x5970D4", Offset = "0x5970D4", VA = "0x5970D4")]
		private void UpdateComplete(ISkeletonAnimation anim)
		{
		}

		[Token(Token = "0x6001139")]
		[Address(RVA = "0x596EF8", Offset = "0x596EF8", VA = "0x596EF8")]
		private void UpdateAllBones()
		{
		}

		[Token(Token = "0x600113A")]
		[Address(RVA = "0x597C4C", Offset = "0x597C4C", VA = "0x597C4C")]
		public Transform GetBoneRoot()
		{
			return null;
		}

		[Token(Token = "0x600113B")]
		[Address(RVA = "0x597E78", Offset = "0x597E78", VA = "0x597E78")]
		public GameObject SpawnRoot(SkeletonUtilityBone.Mode mode, bool pos, bool rot, bool sca)
		{
			return null;
		}

		[Token(Token = "0x600113C")]
		[Address(RVA = "0x598310", Offset = "0x598310", VA = "0x598310")]
		public GameObject SpawnHierarchy(SkeletonUtilityBone.Mode mode, bool pos, bool rot, bool sca)
		{
			return null;
		}

		[Token(Token = "0x600113D")]
		[Address(RVA = "0x59839C", Offset = "0x59839C", VA = "0x59839C")]
		public GameObject SpawnBoneRecursively(Bone bone, Transform parent, SkeletonUtilityBone.Mode mode, bool pos, bool rot, bool sca)
		{
			return null;
		}

		[Token(Token = "0x600113E")]
		[Address(RVA = "0x597F04", Offset = "0x597F04", VA = "0x597F04")]
		public GameObject SpawnBone(Bone bone, Transform parent, SkeletonUtilityBone.Mode mode, bool pos, bool rot, bool sca)
		{
			return null;
		}

		[Token(Token = "0x600113F")]
		[Address(RVA = "0x5986C8", Offset = "0x5986C8", VA = "0x5986C8")]
		public SkeletonUtility()
		{
		}
	}
	[Token(Token = "0x200022C")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E9A98", Offset = "0x2E9A98")]
	public class SkeletonUtilityBone : MonoBehaviour
	{
		[Token(Token = "0x2000567")]
		public enum Mode
		{
			[Token(Token = "0x4001F21")]
			Follow,
			[Token(Token = "0x4001F22")]
			Override
		}

		[Token(Token = "0x4000C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string boneName;

		[Token(Token = "0x4000C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform parentReference;

		[Token(Token = "0x4000C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Mode mode;

		[Token(Token = "0x4000C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool position;

		[Token(Token = "0x4000C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool rotation;

		[Token(Token = "0x4000C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool scale;

		[Token(Token = "0x4000C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool zPosition;

		[Token(Token = "0x4000C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F47A0", Offset = "0x2F47A0")]
		public float overrideAlpha;

		[NonSerialized]
		[Token(Token = "0x4000C88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SkeletonUtility skeletonUtility;

		[NonSerialized]
		[Token(Token = "0x4000C89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Bone bone;

		[NonSerialized]
		[Token(Token = "0x4000C8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool transformLerpComplete;

		[NonSerialized]
		[Token(Token = "0x4000C8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool valid;

		[Token(Token = "0x4000C8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Transform cachedTransform;

		[Token(Token = "0x4000C8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform skeletonTransform;

		[Token(Token = "0x4000C8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool incompatibleTransformMode;

		[Token(Token = "0x1700029C")]
		public bool IncompatibleTransformMode
		{
			[Token(Token = "0x6001140")]
			[Address(RVA = "0x5987D4", Offset = "0x5987D4", VA = "0x5987D4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001141")]
		[Address(RVA = "0x5984A0", Offset = "0x5984A0", VA = "0x5984A0")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001142")]
		[Address(RVA = "0x5987DC", Offset = "0x5987DC", VA = "0x5987DC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001143")]
		[Address(RVA = "0x598924", Offset = "0x598924", VA = "0x598924")]
		private void HandleOnReset()
		{
		}

		[Token(Token = "0x6001144")]
		[Address(RVA = "0x598928", Offset = "0x598928", VA = "0x598928")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001145")]
		[Address(RVA = "0x5970D8", Offset = "0x5970D8", VA = "0x5970D8")]
		public void DoUpdate()
		{
		}

		[Token(Token = "0x6001146")]
		[Address(RVA = "0x598A34", Offset = "0x598A34", VA = "0x598A34")]
		public static bool BoneTransformModeIncompatible(Bone bone)
		{
			return default(bool);
		}

		[Token(Token = "0x6001147")]
		[Address(RVA = "0x598A78", Offset = "0x598A78", VA = "0x598A78")]
		public void AddBoundingBox(string skinName, string slotName, string attachmentName)
		{
		}

		[Token(Token = "0x6001148")]
		[Address(RVA = "0x598ADC", Offset = "0x598ADC", VA = "0x598ADC")]
		public SkeletonUtilityBone()
		{
		}
	}
	[Token(Token = "0x200022D")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x2E9AF4", Offset = "0x2E9AF4")]
	[ExecuteInEditMode]
	public abstract class SkeletonUtilityConstraint : MonoBehaviour
	{
		[Token(Token = "0x4000C8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		protected SkeletonUtilityBone utilBone;

		[Token(Token = "0x4000C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected SkeletonUtility skeletonUtility;

		[Token(Token = "0x6001149")]
		[Address(RVA = "0x598AF4", Offset = "0x598AF4", VA = "0x598AF4", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x600114A")]
		[Address(RVA = "0x598BB8", Offset = "0x598BB8", VA = "0x598BB8", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x600114B")]
		public abstract void DoUpdate();

		[Token(Token = "0x600114C")]
		[Address(RVA = "0x598BE8", Offset = "0x598BE8", VA = "0x598BE8")]
		protected SkeletonUtilityConstraint()
		{
		}
	}
	[Token(Token = "0x200022E")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x2E9B7C", Offset = "0x2E9B7C")]
	public abstract class SpineAttributeBase : PropertyAttribute
	{
		[Token(Token = "0x4000C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string dataField;

		[Token(Token = "0x4000C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string startsWith;

		[Token(Token = "0x4000C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool includeNone;

		[Token(Token = "0x4000C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool fallbackToTextField;

		[Token(Token = "0x600114D")]
		[Address(RVA = "0x598C24", Offset = "0x598C24", VA = "0x598C24")]
		protected SpineAttributeBase()
		{
		}
	}
	[Token(Token = "0x200022F")]
	public class SpineSlot : SpineAttributeBase
	{
		[Token(Token = "0x4000C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public bool containsBoundingBoxes;

		[Token(Token = "0x600114E")]
		[Address(RVA = "0x599358", Offset = "0x599358", VA = "0x599358")]
		public SpineSlot(string startsWith = "", string dataField = "", bool containsBoundingBoxes = false, bool includeNone = true, bool fallbackToTextField = false)
		{
		}
	}
	[Token(Token = "0x2000230")]
	public class SpineEvent : SpineAttributeBase
	{
		[Token(Token = "0x600114F")]
		[Address(RVA = "0x599190", Offset = "0x599190", VA = "0x599190")]
		public SpineEvent(string startsWith = "", string dataField = "", bool includeNone = true, bool fallbackToTextField = false)
		{
		}
	}
	[Token(Token = "0x2000231")]
	public class SpineIkConstraint : SpineAttributeBase
	{
		[Token(Token = "0x6001150")]
		[Address(RVA = "0x5991C4", Offset = "0x5991C4", VA = "0x5991C4")]
		public SpineIkConstraint(string startsWith = "", string dataField = "", bool includeNone = true, bool fallbackToTextField = false)
		{
		}
	}
	[Token(Token = "0x2000232")]
	public class SpinePathConstraint : SpineAttributeBase
	{
		[Token(Token = "0x6001151")]
		[Address(RVA = "0x5992F0", Offset = "0x5992F0", VA = "0x5992F0")]
		public SpinePathConstraint(string startsWith = "", string dataField = "", bool includeNone = true, bool fallbackToTextField = false)
		{
		}
	}
	[Token(Token = "0x2000233")]
	public class SpineTransformConstraint : SpineAttributeBase
	{
		[Token(Token = "0x6001152")]
		[Address(RVA = "0x599394", Offset = "0x599394", VA = "0x599394")]
		public SpineTransformConstraint(string startsWith = "", string dataField = "", bool includeNone = true, bool fallbackToTextField = false)
		{
		}
	}
	[Token(Token = "0x2000234")]
	public class SpineSkin : SpineAttributeBase
	{
		[Token(Token = "0x6001153")]
		[Address(RVA = "0x599324", Offset = "0x599324", VA = "0x599324")]
		public SpineSkin(string startsWith = "", string dataField = "", bool includeNone = true, bool fallbackToTextField = false)
		{
		}
	}
	[Token(Token = "0x2000235")]
	public class SpineAnimation : SpineAttributeBase
	{
		[Token(Token = "0x6001154")]
		[Address(RVA = "0x598BF0", Offset = "0x598BF0", VA = "0x598BF0")]
		public SpineAnimation(string startsWith = "", string dataField = "", bool includeNone = true, bool fallbackToTextField = false)
		{
		}
	}
	[Token(Token = "0x2000236")]
	public class SpineAttachment : SpineAttributeBase
	{
		[Token(Token = "0x2000568")]
		public struct Hierarchy
		{
			[Token(Token = "0x4001F23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string skin;

			[Token(Token = "0x4001F24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public string slot;

			[Token(Token = "0x4001F25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string name;

			[Token(Token = "0x6001DBC")]
			[Address(RVA = "0x39F874", Offset = "0x39F874", VA = "0x39F874")]
			public Hierarchy(string fullPath)
			{
			}
		}

		[Token(Token = "0x4000C96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public bool returnAttachmentPath;

		[Token(Token = "0x4000C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
		public bool currentSkinOnly;

		[Token(Token = "0x4000C98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool placeholdersOnly;

		[Token(Token = "0x4000C99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string skinField;

		[Token(Token = "0x4000C9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public string slotField;

		[Token(Token = "0x6001155")]
		[Address(RVA = "0x598CBC", Offset = "0x598CBC", VA = "0x598CBC")]
		public SpineAttachment(bool currentSkinOnly = true, bool returnAttachmentPath = false, bool placeholdersOnly = false, string slotField = "", string dataField = "", string skinField = "", bool includeNone = true, bool fallbackToTextField = false)
		{
		}

		[Token(Token = "0x6001156")]
		[Address(RVA = "0x598D6C", Offset = "0x598D6C", VA = "0x598D6C")]
		public static Hierarchy GetHierarchy(string fullPath)
		{
			return default(Hierarchy);
		}

		[Token(Token = "0x6001157")]
		[Address(RVA = "0x598FAC", Offset = "0x598FAC", VA = "0x598FAC")]
		public static Attachment GetAttachment(string attachmentPath, SkeletonData skeletonData)
		{
			return null;
		}

		[Token(Token = "0x6001158")]
		[Address(RVA = "0x599088", Offset = "0x599088", VA = "0x599088")]
		public static Attachment GetAttachment(string attachmentPath, SkeletonDataAsset skeletonDataAsset)
		{
			return null;
		}
	}
	[Token(Token = "0x2000237")]
	public class SpineBone : SpineAttributeBase
	{
		[Token(Token = "0x6001159")]
		[Address(RVA = "0x5990C4", Offset = "0x5990C4", VA = "0x5990C4")]
		public SpineBone(string startsWith = "", string dataField = "", bool includeNone = true, bool fallbackToTextField = false)
		{
		}

		[Token(Token = "0x600115A")]
		[Address(RVA = "0x5990F8", Offset = "0x5990F8", VA = "0x5990F8")]
		public static Bone GetBone(string boneName, SkeletonRenderer renderer)
		{
			return null;
		}

		[Token(Token = "0x600115B")]
		[Address(RVA = "0x59913C", Offset = "0x59913C", VA = "0x59913C")]
		public static BoneData GetBoneData(string boneName, SkeletonDataAsset skeletonDataAsset)
		{
			return null;
		}
	}
	[Token(Token = "0x2000238")]
	public class SpineAtlasRegion : PropertyAttribute
	{
		[Token(Token = "0x4000C9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string atlasAssetField;

		[Token(Token = "0x600115C")]
		[Address(RVA = "0x598C9C", Offset = "0x598C9C", VA = "0x598C9C")]
		public SpineAtlasRegion(string atlasAssetField = "")
		{
		}
	}
}
namespace Spine.Unity.Modules
{
	[Token(Token = "0x2000239")]
	[ExecuteInEditMode]
	public class SkeletonRendererCustomMaterials : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000569")]
		public struct SlotMaterialOverride : IEquatable<SlotMaterialOverride>
		{
			[Token(Token = "0x4001F26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool overrideDisabled;

			[Token(Token = "0x4001F27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "SpineSlot", RVA = "0x2F6654", Offset = "0x2F6654")]
			public string slotName;

			[Token(Token = "0x4001F28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Material material;

			[Token(Token = "0x6001DBD")]
			[Address(RVA = "0x3AB3F0", Offset = "0x3AB3F0", VA = "0x3AB3F0", Slot = "4")]
			public bool Equals(SlotMaterialOverride other)
			{
				return default(bool);
			}
		}

		[Serializable]
		[Token(Token = "0x200056A")]
		public struct AtlasMaterialOverride : IEquatable<AtlasMaterialOverride>
		{
			[Token(Token = "0x4001F29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool overrideDisabled;

			[Token(Token = "0x4001F2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public Material originalMaterial;

			[Token(Token = "0x4001F2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Material replacementMaterial;

			[Token(Token = "0x6001DBE")]
			[Address(RVA = "0x3AB378", Offset = "0x3AB378", VA = "0x3AB378", Slot = "4")]
			public bool Equals(AtlasMaterialOverride other)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000C9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public SkeletonRenderer skeletonRenderer;

		[Token(Token = "0x4000C9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		protected List<SlotMaterialOverride> customSlotMaterials;

		[Token(Token = "0x4000C9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		protected List<AtlasMaterialOverride> customMaterialOverrides;

		[Token(Token = "0x600115D")]
		[Address(RVA = "0x8A9ED8", Offset = "0x8A9ED8", VA = "0x8A9ED8")]
		private void SetCustomSlotMaterials()
		{
		}

		[Token(Token = "0x600115E")]
		[Address(RVA = "0x8AA0D0", Offset = "0x8AA0D0", VA = "0x8AA0D0")]
		private void RemoveCustomSlotMaterials()
		{
		}

		[Token(Token = "0x600115F")]
		[Address(RVA = "0x8AA364", Offset = "0x8AA364", VA = "0x8AA364")]
		private void SetCustomMaterialOverrides()
		{
		}

		[Token(Token = "0x6001160")]
		[Address(RVA = "0x8AA50C", Offset = "0x8AA50C", VA = "0x8AA50C")]
		private void RemoveCustomMaterialOverrides()
		{
		}

		[Token(Token = "0x6001161")]
		[Address(RVA = "0x8AA750", Offset = "0x8AA750", VA = "0x8AA750")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001162")]
		[Address(RVA = "0x8AA8D4", Offset = "0x8AA8D4", VA = "0x8AA8D4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001163")]
		[Address(RVA = "0x8AA9C0", Offset = "0x8AA9C0", VA = "0x8AA9C0")]
		public SkeletonRendererCustomMaterials()
		{
		}
	}
	[Token(Token = "0x200023A")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x2E9BB8", Offset = "0x2E9BB8")]
	public class SkeletonGhost : MonoBehaviour
	{
		[Token(Token = "0x4000C9F")]
		private const HideFlags GhostHideFlags = HideFlags.HideInHierarchy;

		[Token(Token = "0x4000CA0")]
		private const string GhostingShaderName = "Spine/Special/SkeletonGhost";

		[Token(Token = "0x4000CA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool ghostingEnabled;

		[Token(Token = "0x4000CA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float spawnRate;

		[Token(Token = "0x4000CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Color32 color;

		[Token(Token = "0x4000CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F47D8", Offset = "0x2F47D8")]
		public bool additive;

		[Token(Token = "0x4000CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int maximumGhosts;

		[Token(Token = "0x4000CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float fadeSpeed;

		[Token(Token = "0x4000CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Shader ghostShader;

		[Token(Token = "0x4000CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F483C", Offset = "0x2F483C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F483C", Offset = "0x2F483C")]
		public float textureFade;

		[Token(Token = "0x4000CA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x2F48AC", Offset = "0x2F48AC")]
		public bool sortWithDistanceOnly;

		[Token(Token = "0x4000CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float zOffset;

		[Token(Token = "0x4000CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float nextSpawnTime;

		[Token(Token = "0x4000CAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SkeletonGhostRenderer[] pool;

		[Token(Token = "0x4000CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int poolIndex;

		[Token(Token = "0x4000CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private SkeletonRenderer skeletonRenderer;

		[Token(Token = "0x4000CAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private MeshRenderer meshRenderer;

		[Token(Token = "0x4000CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private MeshFilter meshFilter;

		[Token(Token = "0x4000CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private readonly Dictionary<Material, Material> materialTable;

		[Token(Token = "0x6001164")]
		[Address(RVA = "0x89F698", Offset = "0x89F698", VA = "0x89F698")]
		private void Start()
		{
		}

		[Token(Token = "0x6001165")]
		[Address(RVA = "0x89FB30", Offset = "0x89FB30", VA = "0x89FB30")]
		private void OnEvent(TrackEntry trackEntry, Event e)
		{
		}

		[Token(Token = "0x6001166")]
		[Address(RVA = "0x89FDEC", Offset = "0x89FDEC", VA = "0x89FDEC")]
		private void Ghosting(float val)
		{
		}

		[Token(Token = "0x6001167")]
		[Address(RVA = "0x89FE08", Offset = "0x89FE08", VA = "0x89FE08")]
		private void Update()
		{
		}

		[Token(Token = "0x6001168")]
		[Address(RVA = "0x8A06F4", Offset = "0x8A06F4", VA = "0x8A06F4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001169")]
		[Address(RVA = "0x89FC24", Offset = "0x89FC24", VA = "0x89FC24")]
		private static Color32 HexToColor(string hex)
		{
			return default(Color32);
		}

		[Token(Token = "0x600116A")]
		[Address(RVA = "0x8A0B1C", Offset = "0x8A0B1C", VA = "0x8A0B1C")]
		public SkeletonGhost()
		{
		}
	}
	[Token(Token = "0x200023B")]
	public class SkeletonGhostRenderer : MonoBehaviour
	{
		[Token(Token = "0x200056B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EAD8C", Offset = "0x2EAD8C")]
		private sealed class <Fade>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int <>1__state;

			[Token(Token = "0x4001F2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private object <>2__current;

			[Token(Token = "0x4001F2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SkeletonGhostRenderer <>4__this;

			[Token(Token = "0x4001F2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private int <t>5__2;

			[Token(Token = "0x170003BC")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001DC2")]
				[Address(RVA = "0x8A112C", Offset = "0x8A112C", VA = "0x8A112C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003BD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001DC4")]
				[Address(RVA = "0x8A11BC", Offset = "0x8A11BC", VA = "0x8A11BC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001DBF")]
			[Address(RVA = "0x8A0DEC", Offset = "0x8A0DEC", VA = "0x8A0DEC")]
			[DebuggerHidden]
			public <Fade>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6001DC0")]
			[Address(RVA = "0x8A0E88", Offset = "0x8A0E88", VA = "0x8A0E88", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001DC1")]
			[Address(RVA = "0x8A0E8C", Offset = "0x8A0E8C", VA = "0x8A0E8C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001DC3")]
			[Address(RVA = "0x8A1134", Offset = "0x8A1134", VA = "0x8A1134", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200056C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EAD9C", Offset = "0x2EAD9C")]
		private sealed class <FadeAdditive>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int <>1__state;

			[Token(Token = "0x4001F31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private object <>2__current;

			[Token(Token = "0x4001F32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SkeletonGhostRenderer <>4__this;

			[Token(Token = "0x4001F33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private Color32 <black>5__2;

			[Token(Token = "0x4001F34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private int <t>5__3;

			[Token(Token = "0x170003BE")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001DC8")]
				[Address(RVA = "0x8A1490", Offset = "0x8A1490", VA = "0x8A1490", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003BF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001DCA")]
				[Address(RVA = "0x8A1520", Offset = "0x8A1520", VA = "0x8A1520", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001DC5")]
			[Address(RVA = "0x8A0E0C", Offset = "0x8A0E0C", VA = "0x8A0E0C")]
			[DebuggerHidden]
			public <FadeAdditive>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6001DC6")]
			[Address(RVA = "0x8A11C4", Offset = "0x8A11C4", VA = "0x8A11C4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001DC7")]
			[Address(RVA = "0x8A11C8", Offset = "0x8A11C8", VA = "0x8A11C8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001DC9")]
			[Address(RVA = "0x8A1498", Offset = "0x8A1498", VA = "0x8A1498", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float fadeSpeed;

		[Token(Token = "0x4000CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Color32[] colors;

		[Token(Token = "0x4000CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Color32 black;

		[Token(Token = "0x4000CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private MeshFilter meshFilter;

		[Token(Token = "0x4000CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private MeshRenderer meshRenderer;

		[Token(Token = "0x600116B")]
		[Address(RVA = "0x8A0C10", Offset = "0x8A0C10", VA = "0x8A0C10")]
		private void Awake()
		{
		}

		[Token(Token = "0x600116C")]
		[Address(RVA = "0x8A0464", Offset = "0x8A0464", VA = "0x8A0464")]
		public void Initialize(Mesh mesh, Material[] materials, Color32 color, bool additive, float speed, int sortingLayerID, int sortingOrder)
		{
		}

		[Token(Token = "0x600116D")]
		[Address(RVA = "0x8A0D60", Offset = "0x8A0D60", VA = "0x8A0D60")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2FB664", Offset = "0x2FB664")]
		private IEnumerator Fade()
		{
			return null;
		}

		[Token(Token = "0x600116E")]
		[Address(RVA = "0x8A0CD4", Offset = "0x8A0CD4", VA = "0x8A0CD4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2FB6DC", Offset = "0x2FB6DC")]
		private IEnumerator FadeAdditive()
		{
			return null;
		}

		[Token(Token = "0x600116F")]
		[Address(RVA = "0x8A097C", Offset = "0x8A097C", VA = "0x8A097C")]
		public void Cleanup()
		{
		}

		[Token(Token = "0x6001170")]
		[Address(RVA = "0x8A0E2C", Offset = "0x8A0E2C", VA = "0x8A0E2C")]
		public SkeletonGhostRenderer()
		{
		}
	}
	[Token(Token = "0x200023C")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x2E9C30", Offset = "0x2E9C30")]
	public class SkeletonRagdoll : MonoBehaviour
	{
		[Token(Token = "0x200056D")]
		public class LayerFieldAttribute : PropertyAttribute
		{
			[Token(Token = "0x6001DCB")]
			[Address(RVA = "0x8A55F4", Offset = "0x8A55F4", VA = "0x8A55F4")]
			public LayerFieldAttribute()
			{
			}
		}

		[Token(Token = "0x200056E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EADAC", Offset = "0x2EADAC")]
		private sealed class <Start>d__33 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int <>1__state;

			[Token(Token = "0x4001F36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private object <>2__current;

			[Token(Token = "0x4001F37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SkeletonRagdoll <>4__this;

			[Token(Token = "0x170003C0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001DCF")]
				[Address(RVA = "0x8A555C", Offset = "0x8A555C", VA = "0x8A555C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003C1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001DD1")]
				[Address(RVA = "0x8A55EC", Offset = "0x8A55EC", VA = "0x8A55EC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001DCC")]
			[Address(RVA = "0x8A1E40", Offset = "0x8A1E40", VA = "0x8A1E40")]
			[DebuggerHidden]
			public <Start>d__33(int <>1__state)
			{
			}

			[Token(Token = "0x6001DCD")]
			[Address(RVA = "0x8A5214", Offset = "0x8A5214", VA = "0x8A5214", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001DCE")]
			[Address(RVA = "0x8A5218", Offset = "0x8A5218", VA = "0x8A5218", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001DD0")]
			[Address(RVA = "0x8A5564", Offset = "0x8A5564", VA = "0x8A5564", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200056F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EADBC", Offset = "0x2EADBC")]
		private sealed class <SmoothMixCoroutine>d__40 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int <>1__state;

			[Token(Token = "0x4001F39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private object <>2__current;

			[Token(Token = "0x4001F3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SkeletonRagdoll <>4__this;

			[Token(Token = "0x4001F3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float target;

			[Token(Token = "0x4001F3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float duration;

			[Token(Token = "0x4001F3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private float <startTime>5__2;

			[Token(Token = "0x4001F3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private float <startMix>5__3;

			[Token(Token = "0x170003C2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001DD5")]
				[Address(RVA = "0x8A517C", Offset = "0x8A517C", VA = "0x8A517C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003C3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001DD7")]
				[Address(RVA = "0x8A520C", Offset = "0x8A520C", VA = "0x8A520C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001DD2")]
			[Address(RVA = "0x8A3A60", Offset = "0x8A3A60", VA = "0x8A3A60")]
			[DebuggerHidden]
			public <SmoothMixCoroutine>d__40(int <>1__state)
			{
			}

			[Token(Token = "0x6001DD3")]
			[Address(RVA = "0x8A5010", Offset = "0x8A5010", VA = "0x8A5010", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001DD4")]
			[Address(RVA = "0x8A5014", Offset = "0x8A5014", VA = "0x8A5014", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001DD6")]
			[Address(RVA = "0x8A5184", Offset = "0x8A5184", VA = "0x8A5184", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Transform parentSpaceHelper;

		[Token(Token = "0x4000CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x2F48E0", Offset = "0x2F48E0")]
		[AttributeAttribute(Name = "SpineBone", RVA = "0x2F48E0", Offset = "0x2F48E0")]
		public string startingBoneName;

		[Token(Token = "0x4000CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "SpineBone", RVA = "0x2F4968", Offset = "0x2F4968")]
		public List<string> stopBoneNames;

		[Token(Token = "0x4000CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x2F49C4", Offset = "0x2F49C4")]
		public bool applyOnStart;

		[Token(Token = "0x4000CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F49F8", Offset = "0x2F49F8")]
		public bool disableIK;

		[Token(Token = "0x4000CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
		public bool disableOtherConstraints;

		[Token(Token = "0x4000CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x2F4A2C", Offset = "0x2F4A2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F4A2C", Offset = "0x2F4A2C")]
		public bool pinStartBone;

		[Token(Token = "0x4000CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F4A7C", Offset = "0x2F4A7C")]
		public bool enableJointCollision;

		[Token(Token = "0x4000CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool useGravity;

		[Token(Token = "0x4000CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F4AB0", Offset = "0x2F4AB0")]
		public float thickness;

		[Token(Token = "0x4000CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F4AE4", Offset = "0x2F4AE4")]
		public float rotationLimit;

		[Token(Token = "0x4000CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float rootMass;

		[Token(Token = "0x4000CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F4B18", Offset = "0x2F4B18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F4B18", Offset = "0x2F4B18")]
		public float massFalloffFactor;

		[Token(Token = "0x4000CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F4B6C", Offset = "0x2F4B6C")]
		public int colliderLayer;

		[Token(Token = "0x4000CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F4BA0", Offset = "0x2F4BA0")]
		public float mix;

		[Token(Token = "0x4000CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private ISkeletonAnimation targetSkeletonComponent;

		[Token(Token = "0x4000CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Skeleton skeleton;

		[Token(Token = "0x4000CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Dictionary<Bone, Transform> boneTable;

		[Token(Token = "0x4000CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform ragdollRoot;

		[Token(Token = "0x4000CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F4BB8", Offset = "0x2F4BB8")]
		private Rigidbody <RootRigidbody>k__BackingField;

		[Token(Token = "0x4000CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F4BC8", Offset = "0x2F4BC8")]
		private Bone <StartingBone>k__BackingField;

		[Token(Token = "0x4000CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 rootOffset;

		[Token(Token = "0x4000CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool isActive;

		[Token(Token = "0x1700029D")]
		public Rigidbody RootRigidbody
		{
			[Token(Token = "0x6001171")]
			[Address(RVA = "0x8A1D78", Offset = "0x8A1D78", VA = "0x8A1D78")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB754", Offset = "0x2FB754")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001172")]
			[Address(RVA = "0x8A1D80", Offset = "0x8A1D80", VA = "0x8A1D80")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB764", Offset = "0x2FB764")]
			private set
			{
			}
		}

		[Token(Token = "0x1700029E")]
		public Bone StartingBone
		{
			[Token(Token = "0x6001173")]
			[Address(RVA = "0x8A1D88", Offset = "0x8A1D88", VA = "0x8A1D88")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB774", Offset = "0x2FB774")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001174")]
			[Address(RVA = "0x8A1D90", Offset = "0x8A1D90", VA = "0x8A1D90")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB784", Offset = "0x2FB784")]
			private set
			{
			}
		}

		[Token(Token = "0x1700029F")]
		public Vector3 RootOffset
		{
			[Token(Token = "0x6001175")]
			[Address(RVA = "0x8A1D98", Offset = "0x8A1D98", VA = "0x8A1D98")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170002A0")]
		public bool IsActive
		{
			[Token(Token = "0x6001176")]
			[Address(RVA = "0x8A1DAC", Offset = "0x8A1DAC", VA = "0x8A1DAC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002A1")]
		public Rigidbody[] RigidbodyArray
		{
			[Token(Token = "0x6001178")]
			[Address(RVA = "0x8A1E60", Offset = "0x8A1E60", VA = "0x8A1E60")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002A2")]
		public Vector3 EstimatedSkeletonPosition
		{
			[Token(Token = "0x6001179")]
			[Address(RVA = "0x8A20C8", Offset = "0x8A20C8", VA = "0x8A20C8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6001177")]
		[Address(RVA = "0x8A1DB4", Offset = "0x8A1DB4", VA = "0x8A1DB4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2FB794", Offset = "0x2FB794")]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x600117A")]
		[Address(RVA = "0x8A219C", Offset = "0x8A219C", VA = "0x8A219C")]
		public void Apply()
		{
		}

		[Token(Token = "0x600117B")]
		[Address(RVA = "0x8A396C", Offset = "0x8A396C", VA = "0x8A396C")]
		public Coroutine SmoothMix(float target, float duration)
		{
			return null;
		}

		[Token(Token = "0x600117C")]
		[Address(RVA = "0x8A3990", Offset = "0x8A3990", VA = "0x8A3990")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2FB80C", Offset = "0x2FB80C")]
		private IEnumerator SmoothMixCoroutine(float target, float duration)
		{
			return null;
		}

		[Token(Token = "0x600117D")]
		[Address(RVA = "0x8A3A80", Offset = "0x8A3A80", VA = "0x8A3A80")]
		public void SetSkeletonPosition(Vector3 worldPosition)
		{
		}

		[Token(Token = "0x600117E")]
		[Address(RVA = "0x8A4438", Offset = "0x8A4438", VA = "0x8A4438")]
		public void Remove()
		{
		}

		[Token(Token = "0x600117F")]
		[Address(RVA = "0x8A4748", Offset = "0x8A4748", VA = "0x8A4748")]
		public Rigidbody GetRigidbody(string boneName)
		{
			return null;
		}

		[Token(Token = "0x6001180")]
		[Address(RVA = "0x8A33B0", Offset = "0x8A33B0", VA = "0x8A33B0")]
		private void RecursivelyCreateBoneProxies(Bone b)
		{
		}

		[Token(Token = "0x6001181")]
		[Address(RVA = "0x8A3DC4", Offset = "0x8A3DC4", VA = "0x8A3DC4")]
		private void UpdateSpineSkeleton(ISkeletonAnimation skeletonRenderer)
		{
		}

		[Token(Token = "0x6001182")]
		[Address(RVA = "0x8A4868", Offset = "0x8A4868", VA = "0x8A4868")]
		private List<Collider> AttachBoundingBoxRagdollColliders(Bone b)
		{
			return null;
		}

		[Token(Token = "0x6001183")]
		[Address(RVA = "0x8A3914", Offset = "0x8A3914", VA = "0x8A3914")]
		private static float GetPropagatedRotation(Bone b)
		{
			return default(float);
		}

		[Token(Token = "0x6001184")]
		[Address(RVA = "0x8A4F08", Offset = "0x8A4F08", VA = "0x8A4F08")]
		public SkeletonRagdoll()
		{
		}
	}
	[Token(Token = "0x200023D")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x2E9CA8", Offset = "0x2E9CA8")]
	public class SkeletonRagdoll2D : MonoBehaviour
	{
		[Token(Token = "0x2000570")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EADCC", Offset = "0x2EADCC")]
		private sealed class <Start>d__32 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int <>1__state;

			[Token(Token = "0x4001F40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private object <>2__current;

			[Token(Token = "0x4001F41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SkeletonRagdoll2D <>4__this;

			[Token(Token = "0x170003C4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001DDB")]
				[Address(RVA = "0x8A8DD0", Offset = "0x8A8DD0", VA = "0x8A8DD0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003C5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001DDD")]
				[Address(RVA = "0x8A8E60", Offset = "0x8A8E60", VA = "0x8A8E60", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001DD8")]
			[Address(RVA = "0x8A5748", Offset = "0x8A5748", VA = "0x8A5748")]
			[DebuggerHidden]
			public <Start>d__32(int <>1__state)
			{
			}

			[Token(Token = "0x6001DD9")]
			[Address(RVA = "0x8A8AB4", Offset = "0x8A8AB4", VA = "0x8A8AB4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001DDA")]
			[Address(RVA = "0x8A8AB8", Offset = "0x8A8AB8", VA = "0x8A8AB8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001DDC")]
			[Address(RVA = "0x8A8DD8", Offset = "0x8A8DD8", VA = "0x8A8DD8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000571")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EADDC", Offset = "0x2EADDC")]
		private sealed class <SmoothMixCoroutine>d__39 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int <>1__state;

			[Token(Token = "0x4001F43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private object <>2__current;

			[Token(Token = "0x4001F44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SkeletonRagdoll2D <>4__this;

			[Token(Token = "0x4001F45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float target;

			[Token(Token = "0x4001F46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float duration;

			[Token(Token = "0x4001F47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private float <startTime>5__2;

			[Token(Token = "0x4001F48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private float <startMix>5__3;

			[Token(Token = "0x170003C6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001DE1")]
				[Address(RVA = "0x8A8A1C", Offset = "0x8A8A1C", VA = "0x8A8A1C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003C7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001DE3")]
				[Address(RVA = "0x8A8AAC", Offset = "0x8A8AAC", VA = "0x8A8AAC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001DDE")]
			[Address(RVA = "0x8A7400", Offset = "0x8A7400", VA = "0x8A7400")]
			[DebuggerHidden]
			public <SmoothMixCoroutine>d__39(int <>1__state)
			{
			}

			[Token(Token = "0x6001DDF")]
			[Address(RVA = "0x8A88B0", Offset = "0x8A88B0", VA = "0x8A88B0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001DE0")]
			[Address(RVA = "0x8A88B4", Offset = "0x8A88B4", VA = "0x8A88B4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001DE2")]
			[Address(RVA = "0x8A8A24", Offset = "0x8A8A24", VA = "0x8A8A24", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Transform parentSpaceHelper;

		[Token(Token = "0x4000CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x2F4BD8", Offset = "0x2F4BD8")]
		[AttributeAttribute(Name = "SpineBone", RVA = "0x2F4BD8", Offset = "0x2F4BD8")]
		public string startingBoneName;

		[Token(Token = "0x4000CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "SpineBone", RVA = "0x2F4C60", Offset = "0x2F4C60")]
		public List<string> stopBoneNames;

		[Token(Token = "0x4000CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x2F4CBC", Offset = "0x2F4CBC")]
		public bool applyOnStart;

		[Token(Token = "0x4000CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F4CF0", Offset = "0x2F4CF0")]
		public bool disableIK;

		[Token(Token = "0x4000CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
		public bool disableOtherConstraints;

		[Token(Token = "0x4000CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x2F4D24", Offset = "0x2F4D24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F4D24", Offset = "0x2F4D24")]
		public bool pinStartBone;

		[Token(Token = "0x4000CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float gravityScale;

		[Token(Token = "0x4000CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F4D6C", Offset = "0x2F4D6C")]
		public float thickness;

		[Token(Token = "0x4000CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F4DA0", Offset = "0x2F4DA0")]
		public float rotationLimit;

		[Token(Token = "0x4000CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float rootMass;

		[Token(Token = "0x4000CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F4DD4", Offset = "0x2F4DD4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F4DD4", Offset = "0x2F4DD4")]
		public float massFalloffFactor;

		[Token(Token = "0x4000CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F4E28", Offset = "0x2F4E28")]
		[SkeletonRagdoll.LayerField]
		public int colliderLayer;

		[Token(Token = "0x4000CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F4E70", Offset = "0x2F4E70")]
		public float mix;

		[Token(Token = "0x4000CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private ISkeletonAnimation targetSkeletonComponent;

		[Token(Token = "0x4000CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Skeleton skeleton;

		[Token(Token = "0x4000CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Dictionary<Bone, Transform> boneTable;

		[Token(Token = "0x4000CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform ragdollRoot;

		[Token(Token = "0x4000CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F4E88", Offset = "0x2F4E88")]
		private Rigidbody2D <RootRigidbody>k__BackingField;

		[Token(Token = "0x4000CE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F4E98", Offset = "0x2F4E98")]
		private Bone <StartingBone>k__BackingField;

		[Token(Token = "0x4000CE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector2 rootOffset;

		[Token(Token = "0x4000CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool isActive;

		[Token(Token = "0x170002A3")]
		public Rigidbody2D RootRigidbody
		{
			[Token(Token = "0x6001185")]
			[Address(RVA = "0x8A55FC", Offset = "0x8A55FC", VA = "0x8A55FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB884", Offset = "0x2FB884")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001186")]
			[Address(RVA = "0x8A5604", Offset = "0x8A5604", VA = "0x8A5604")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB894", Offset = "0x2FB894")]
			private set
			{
			}
		}

		[Token(Token = "0x170002A4")]
		public Bone StartingBone
		{
			[Token(Token = "0x6001187")]
			[Address(RVA = "0x8A560C", Offset = "0x8A560C", VA = "0x8A560C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB8A4", Offset = "0x2FB8A4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001188")]
			[Address(RVA = "0x8A5614", Offset = "0x8A5614", VA = "0x8A5614")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB8B4", Offset = "0x2FB8B4")]
			private set
			{
			}
		}

		[Token(Token = "0x170002A5")]
		public Vector3 RootOffset
		{
			[Token(Token = "0x6001189")]
			[Address(RVA = "0x8A561C", Offset = "0x8A561C", VA = "0x8A561C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170002A6")]
		public bool IsActive
		{
			[Token(Token = "0x600118A")]
			[Address(RVA = "0x8A56B4", Offset = "0x8A56B4", VA = "0x8A56B4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002A7")]
		public Rigidbody2D[] RigidbodyArray
		{
			[Token(Token = "0x600118C")]
			[Address(RVA = "0x8A5768", Offset = "0x8A5768", VA = "0x8A5768")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002A8")]
		public Vector3 EstimatedSkeletonPosition
		{
			[Token(Token = "0x600118D")]
			[Address(RVA = "0x8A59D0", Offset = "0x8A59D0", VA = "0x8A59D0")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x600118B")]
		[Address(RVA = "0x8A56BC", Offset = "0x8A56BC", VA = "0x8A56BC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2FB8C4", Offset = "0x2FB8C4")]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x600118E")]
		[Address(RVA = "0x8A5AB0", Offset = "0x8A5AB0", VA = "0x8A5AB0")]
		public void Apply()
		{
		}

		[Token(Token = "0x600118F")]
		[Address(RVA = "0x8A730C", Offset = "0x8A730C", VA = "0x8A730C")]
		public Coroutine SmoothMix(float target, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001190")]
		[Address(RVA = "0x8A7330", Offset = "0x8A7330", VA = "0x8A7330")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2FB93C", Offset = "0x2FB93C")]
		private IEnumerator SmoothMixCoroutine(float target, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001191")]
		[Address(RVA = "0x8A7420", Offset = "0x8A7420", VA = "0x8A7420")]
		public void SetSkeletonPosition(Vector3 worldPosition)
		{
		}

		[Token(Token = "0x6001192")]
		[Address(RVA = "0x8A7DD8", Offset = "0x8A7DD8", VA = "0x8A7DD8")]
		public void Remove()
		{
		}

		[Token(Token = "0x6001193")]
		[Address(RVA = "0x8A80E8", Offset = "0x8A80E8", VA = "0x8A80E8")]
		public Rigidbody2D GetRigidbody(string boneName)
		{
			return null;
		}

		[Token(Token = "0x6001194")]
		[Address(RVA = "0x8A6CE4", Offset = "0x8A6CE4", VA = "0x8A6CE4")]
		private void RecursivelyCreateBoneProxies(Bone b)
		{
		}

		[Token(Token = "0x6001195")]
		[Address(RVA = "0x8A7764", Offset = "0x8A7764", VA = "0x8A7764")]
		private void UpdateSpineSkeleton(ISkeletonAnimation animatedSkeleton)
		{
		}

		[Token(Token = "0x6001196")]
		[Address(RVA = "0x8A8208", Offset = "0x8A8208", VA = "0x8A8208")]
		private static List<Collider2D> AttachBoundingBoxRagdollColliders(Bone b, GameObject go, Skeleton skeleton, float gravityScale)
		{
			return null;
		}

		[Token(Token = "0x6001197")]
		[Address(RVA = "0x8A72B4", Offset = "0x8A72B4", VA = "0x8A72B4")]
		private static float GetPropagatedRotation(Bone b)
		{
			return default(float);
		}

		[Token(Token = "0x6001198")]
		[Address(RVA = "0x8A8748", Offset = "0x8A8748", VA = "0x8A8748")]
		private static Vector3 FlipScale(bool flipX, bool flipY)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001199")]
		[Address(RVA = "0x8A87A0", Offset = "0x8A87A0", VA = "0x8A87A0")]
		public SkeletonRagdoll2D()
		{
		}
	}
	[Token(Token = "0x200023E")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x2E9D20", Offset = "0x2E9D20")]
	public class SkeletonPartsRenderer : MonoBehaviour
	{
		[Token(Token = "0x4000CE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private MeshGenerator meshGenerator;

		[Token(Token = "0x4000CE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private MeshRenderer meshRenderer;

		[Token(Token = "0x4000CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private MeshFilter meshFilter;

		[Token(Token = "0x4000CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private MeshRendererBuffers buffers;

		[Token(Token = "0x4000CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private SkeletonRendererInstruction currentInstructions;

		[Token(Token = "0x170002A9")]
		public MeshGenerator MeshGenerator
		{
			[Token(Token = "0x600119A")]
			[Address(RVA = "0x8A1528", Offset = "0x8A1528", VA = "0x8A1528")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002AA")]
		public MeshRenderer MeshRenderer
		{
			[Token(Token = "0x600119B")]
			[Address(RVA = "0x8A1658", Offset = "0x8A1658", VA = "0x8A1658")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002AB")]
		public MeshFilter MeshFilter
		{
			[Token(Token = "0x600119C")]
			[Address(RVA = "0x8A1670", Offset = "0x8A1670", VA = "0x8A1670")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600119D")]
		[Address(RVA = "0x8A1540", Offset = "0x8A1540", VA = "0x8A1540")]
		private void LazyIntialize()
		{
		}

		[Token(Token = "0x600119E")]
		[Address(RVA = "0x8A1688", Offset = "0x8A1688", VA = "0x8A1688")]
		public void ClearMesh()
		{
		}

		[Token(Token = "0x600119F")]
		[Address(RVA = "0x8A16C0", Offset = "0x8A16C0", VA = "0x8A16C0")]
		public void RenderParts(ExposedList<SubmeshInstruction> instructions, int startSubmesh, int endSubmesh)
		{
		}

		[Token(Token = "0x60011A0")]
		[Address(RVA = "0x8A1AA8", Offset = "0x8A1AA8", VA = "0x8A1AA8")]
		public void SetPropertyBlock(MaterialPropertyBlock block)
		{
		}

		[Token(Token = "0x60011A1")]
		[Address(RVA = "0x8A1AE4", Offset = "0x8A1AE4", VA = "0x8A1AE4")]
		public static SkeletonPartsRenderer NewPartsRendererGameObject(Transform parent, string name)
		{
			return null;
		}

		[Token(Token = "0x60011A2")]
		[Address(RVA = "0x8A1CFC", Offset = "0x8A1CFC", VA = "0x8A1CFC")]
		public SkeletonPartsRenderer()
		{
		}
	}
	[Token(Token = "0x200023F")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2E9DB4", Offset = "0x2E9DB4")]
	public class SkeletonRenderSeparator : MonoBehaviour
	{
		[Token(Token = "0x4000CE9")]
		public const int DefaultSortingOrderIncrement = 5;

		[Token(Token = "0x4000CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		protected SkeletonRenderer skeletonRenderer;

		[Token(Token = "0x4000CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private MeshRenderer mainMeshRenderer;

		[Token(Token = "0x4000CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool copyPropertyBlock;

		[Token(Token = "0x4000CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F4EB8", Offset = "0x2F4EB8")]
		public bool copyMeshRendererFlags;

		[Token(Token = "0x4000CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<SkeletonPartsRenderer> partsRenderers;

		[Token(Token = "0x4000CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private MaterialPropertyBlock copiedBlock;

		[Token(Token = "0x170002AC")]
		public SkeletonRenderer SkeletonRenderer
		{
			[Token(Token = "0x60011A3")]
			[Address(RVA = "0x8A8E68", Offset = "0x8A8E68", VA = "0x8A8E68")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011A4")]
			[Address(RVA = "0x8A8E70", Offset = "0x8A8E70", VA = "0x8A8E70")]
			set
			{
			}
		}

		[Token(Token = "0x60011A5")]
		[Address(RVA = "0x8A8F78", Offset = "0x8A8F78", VA = "0x8A8F78")]
		public static SkeletonRenderSeparator AddToSkeletonRenderer(SkeletonRenderer skeletonRenderer, int sortingLayerID = 0, int extraPartsRenderers = 0, int sortingOrderIncrement = 5, int baseSortingOrder = 0, bool addMinimumPartsRenderers = true)
		{
			return null;
		}

		[Token(Token = "0x60011A6")]
		[Address(RVA = "0x8A922C", Offset = "0x8A922C", VA = "0x8A922C")]
		public void AddPartsRenderer(int sortingOrderIncrement = 5)
		{
		}

		[Token(Token = "0x60011A7")]
		[Address(RVA = "0x8A9468", Offset = "0x8A9468", VA = "0x8A9468")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60011A8")]
		[Address(RVA = "0x8A98B0", Offset = "0x8A98B0", VA = "0x8A98B0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60011A9")]
		[Address(RVA = "0x8A9A94", Offset = "0x8A9A94", VA = "0x8A9A94")]
		private void HandleRender(SkeletonRendererInstruction instruction)
		{
		}

		[Token(Token = "0x60011AA")]
		[Address(RVA = "0x8A9E44", Offset = "0x8A9E44", VA = "0x8A9E44")]
		public SkeletonRenderSeparator()
		{
		}
	}
	[Token(Token = "0x2000240")]
	public class SkeletonUtilityEyeConstraint : SkeletonUtilityConstraint
	{
		[Token(Token = "0x4000CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Transform[] eyes;

		[Token(Token = "0x4000CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float radius;

		[Token(Token = "0x4000CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Transform target;

		[Token(Token = "0x4000CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 targetPosition;

		[Token(Token = "0x4000CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float speed;

		[Token(Token = "0x4000CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3[] origins;

		[Token(Token = "0x4000CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 centerPoint;

		[Token(Token = "0x60011AB")]
		[Address(RVA = "0x8AAC60", Offset = "0x8AAC60", VA = "0x8AAC60", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x60011AC")]
		[Address(RVA = "0x8AAF20", Offset = "0x8AAF20", VA = "0x8AAF20", Slot = "5")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x60011AD")]
		[Address(RVA = "0x8AAF4C", Offset = "0x8AAF4C", VA = "0x8AAF4C", Slot = "6")]
		public override void DoUpdate()
		{
		}

		[Token(Token = "0x60011AE")]
		[Address(RVA = "0x8AB374", Offset = "0x8AB374", VA = "0x8AB374")]
		public SkeletonUtilityEyeConstraint()
		{
		}
	}
	[Token(Token = "0x2000241")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x2E9DFC", Offset = "0x2E9DFC")]
	[ExecuteInEditMode]
	public class SkeletonUtilityGroundConstraint : SkeletonUtilityConstraint
	{
		[Token(Token = "0x4000CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F4F18", Offset = "0x2F4F18")]
		public LayerMask groundMask;

		[Token(Token = "0x4000CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F4F74", Offset = "0x2F4F74")]
		public bool use2D;

		[Token(Token = "0x4000CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F4FA8", Offset = "0x2F4FA8")]
		public bool useRadius;

		[Token(Token = "0x4000CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F500C", Offset = "0x2F500C")]
		public float castRadius;

		[Token(Token = "0x4000CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F5044", Offset = "0x2F5044")]
		public float castDistance;

		[Token(Token = "0x4000CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F50A8", Offset = "0x2F50A8")]
		public float castOffset;

		[Token(Token = "0x4000CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F50E8", Offset = "0x2F50E8")]
		public float groundOffset;

		[Token(Token = "0x4000CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F5128", Offset = "0x2F5128")]
		public float adjustSpeed;

		[Token(Token = "0x4000CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 rayOrigin;

		[Token(Token = "0x4000D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 rayDir;

		[Token(Token = "0x4000D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float hitY;

		[Token(Token = "0x4000D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float lastHitY;

		[Token(Token = "0x60011AF")]
		[Address(RVA = "0x8AB390", Offset = "0x8AB390", VA = "0x8AB390", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x60011B0")]
		[Address(RVA = "0x8AB3E8", Offset = "0x8AB3E8", VA = "0x8AB3E8", Slot = "6")]
		public override void DoUpdate()
		{
		}

		[Token(Token = "0x60011B1")]
		[Address(RVA = "0x8ABBB8", Offset = "0x8ABBB8", VA = "0x8ABBB8")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x60011B2")]
		[Address(RVA = "0x8ABEEC", Offset = "0x8ABEEC", VA = "0x8ABEEC")]
		public SkeletonUtilityGroundConstraint()
		{
		}
	}
	[Token(Token = "0x2000242")]
	public class SkeletonUtilityKinematicShadow : MonoBehaviour
	{
		[Token(Token = "0x2000572")]
		private struct TransformPair
		{
			[Token(Token = "0x4001F49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Transform dest;

			[Token(Token = "0x4001F4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public Transform src;
		}

		[Token(Token = "0x4000D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F515C", Offset = "0x2F515C")]
		public bool detachedShadow;

		[Token(Token = "0x4000D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform parent;

		[Token(Token = "0x4000D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool hideShadow;

		[Token(Token = "0x4000D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GameObject shadowRoot;

		[Token(Token = "0x4000D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private readonly List<TransformPair> shadowTable;

		[Token(Token = "0x60011B3")]
		[Address(RVA = "0x589CA4", Offset = "0x589CA4", VA = "0x589CA4")]
		private void Start()
		{
		}

		[Token(Token = "0x60011B4")]
		[Address(RVA = "0x58A440", Offset = "0x58A440", VA = "0x58A440")]
		private static void DestroyComponents(Component[] components)
		{
		}

		[Token(Token = "0x60011B5")]
		[Address(RVA = "0x58A51C", Offset = "0x58A51C", VA = "0x58A51C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60011B6")]
		[Address(RVA = "0x58A750", Offset = "0x58A750", VA = "0x58A750")]
		public SkeletonUtilityKinematicShadow()
		{
		}
	}
	[Token(Token = "0x2000243")]
	[DisallowMultipleComponent]
	public class SlotBlendModes : MonoBehaviour
	{
		[Token(Token = "0x2000573")]
		public struct MaterialTexturePair
		{
			[Token(Token = "0x4001F4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Texture2D texture2D;

			[Token(Token = "0x4001F4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public Material material;
		}

		[Token(Token = "0x4000D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<MaterialTexturePair, Material> materialTable;

		[Token(Token = "0x4000D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Material multiplyMaterialSource;

		[Token(Token = "0x4000D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Material screenMaterialSource;

		[Token(Token = "0x4000D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Texture2D texture;

		[Token(Token = "0x4000D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F5190", Offset = "0x2F5190")]
		private bool <Applied>k__BackingField;

		[Token(Token = "0x170002AD")]
		internal static Dictionary<MaterialTexturePair, Material> MaterialTable
		{
			[Token(Token = "0x60011B7")]
			[Address(RVA = "0x58A7E4", Offset = "0x58A7E4", VA = "0x58A7E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002AE")]
		public bool Applied
		{
			[Token(Token = "0x60011B9")]
			[Address(RVA = "0x58AAF8", Offset = "0x58AAF8", VA = "0x58AAF8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB9B4", Offset = "0x2FB9B4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60011BA")]
			[Address(RVA = "0x58AB00", Offset = "0x58AB00", VA = "0x58AB00")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FB9C4", Offset = "0x2FB9C4")]
			private set
			{
			}
		}

		[Token(Token = "0x60011B8")]
		[Address(RVA = "0x58A8A0", Offset = "0x58A8A0", VA = "0x58A8A0")]
		internal static Material GetMaterialFor(Material materialSource, Texture2D texture)
		{
			return null;
		}

		[Token(Token = "0x60011BB")]
		[Address(RVA = "0x58AB08", Offset = "0x58AB08", VA = "0x58AB08")]
		private void Start()
		{
		}

		[Token(Token = "0x60011BC")]
		[Address(RVA = "0x58AF00", Offset = "0x58AF00", VA = "0x58AF00")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60011BD")]
		[Address(RVA = "0x58AB18", Offset = "0x58AB18", VA = "0x58AB18")]
		public void Apply()
		{
		}

		[Token(Token = "0x60011BE")]
		[Address(RVA = "0x58AF10", Offset = "0x58AF10", VA = "0x58AF10")]
		public void Remove()
		{
		}

		[Token(Token = "0x60011BF")]
		[Address(RVA = "0x58B308", Offset = "0x58B308", VA = "0x58B308")]
		public void GetTexture()
		{
		}

		[Token(Token = "0x60011C0")]
		[Address(RVA = "0x58B5DC", Offset = "0x58B5DC", VA = "0x58B5DC")]
		public SlotBlendModes()
		{
		}
	}
}
namespace Spine.Unity.Modules.AttachmentTools
{
	[Token(Token = "0x2000244")]
	public static class AttachmentRegionExtensions
	{
		[Token(Token = "0x60011C1")]
		[Address(RVA = "0x89DAC4", Offset = "0x89DAC4", VA = "0x89DAC4")]
		public static AtlasRegion GetRegion(this Attachment attachment)
		{
			return null;
		}

		[Token(Token = "0x60011C2")]
		[Address(RVA = "0x89DBD8", Offset = "0x89DBD8", VA = "0x89DBD8")]
		public static AtlasRegion GetRegion(this RegionAttachment regionAttachment)
		{
			return null;
		}

		[Token(Token = "0x60011C3")]
		[Address(RVA = "0x89DC80", Offset = "0x89DC80", VA = "0x89DC80")]
		public static AtlasRegion GetRegion(this MeshAttachment meshAttachment)
		{
			return null;
		}

		[Token(Token = "0x60011C4")]
		[Address(RVA = "0x89AF88", Offset = "0x89AF88", VA = "0x89AF88")]
		public static void SetRegion(this Attachment attachment, AtlasRegion region, bool updateOffset = true)
		{
		}

		[Token(Token = "0x60011C5")]
		[Address(RVA = "0x89D978", Offset = "0x89D978", VA = "0x89D978")]
		public static void SetRegion(this RegionAttachment attachment, AtlasRegion region, bool updateOffset = true)
		{
		}

		[Token(Token = "0x60011C6")]
		[Address(RVA = "0x89D35C", Offset = "0x89D35C", VA = "0x89D35C")]
		public static void SetRegion(this MeshAttachment attachment, AtlasRegion region, bool updateUVs = true)
		{
		}

		[Token(Token = "0x60011C7")]
		[Address(RVA = "0x89DD28", Offset = "0x89DD28", VA = "0x89DD28")]
		public static RegionAttachment ToRegionAttachment(this Sprite sprite, Material material, float rotation = 0f)
		{
			return null;
		}

		[Token(Token = "0x60011C8")]
		[Address(RVA = "0x89DDC0", Offset = "0x89DDC0", VA = "0x89DDC0")]
		public static RegionAttachment ToRegionAttachment(this Sprite sprite, AtlasPage page, float rotation = 0f)
		{
			return null;
		}

		[Token(Token = "0x60011C9")]
		[Address(RVA = "0x89E1EC", Offset = "0x89E1EC", VA = "0x89E1EC")]
		public static RegionAttachment ToRegionAttachmentPMAClone(this Sprite sprite, Shader shader, TextureFormat textureFormat = TextureFormat.RGBA32, bool mipmaps = false, [Optional] Material materialPropertySource, float rotation = 0f)
		{
			return null;
		}

		[Token(Token = "0x60011CA")]
		[Address(RVA = "0x89E430", Offset = "0x89E430", VA = "0x89E430")]
		public static RegionAttachment ToRegionAttachmentPMAClone(this Sprite sprite, Material materialPropertySource, TextureFormat textureFormat = TextureFormat.RGBA32, bool mipmaps = false, float rotation = 0f)
		{
			return null;
		}

		[Token(Token = "0x60011CB")]
		[Address(RVA = "0x89DFB0", Offset = "0x89DFB0", VA = "0x89DFB0")]
		public static RegionAttachment ToRegionAttachment(this AtlasRegion region, string attachmentName, float scale = 0.01f, float rotation = 0f)
		{
			return null;
		}

		[Token(Token = "0x60011CC")]
		[Address(RVA = "0x89E498", Offset = "0x89E498", VA = "0x89E498")]
		public static void SetScale(this RegionAttachment regionAttachment, Vector2 scale)
		{
		}

		[Token(Token = "0x60011CD")]
		[Address(RVA = "0x89E4DC", Offset = "0x89E4DC", VA = "0x89E4DC")]
		public static void SetScale(this RegionAttachment regionAttachment, float x, float y)
		{
		}

		[Token(Token = "0x60011CE")]
		[Address(RVA = "0x89E528", Offset = "0x89E528", VA = "0x89E528")]
		public static void SetPositionOffset(this RegionAttachment regionAttachment, Vector2 offset)
		{
		}

		[Token(Token = "0x60011CF")]
		[Address(RVA = "0x89E56C", Offset = "0x89E56C", VA = "0x89E56C")]
		public static void SetPositionOffset(this RegionAttachment regionAttachment, float x, float y)
		{
		}

		[Token(Token = "0x60011D0")]
		[Address(RVA = "0x89E5B8", Offset = "0x89E5B8", VA = "0x89E5B8")]
		public static void SetRotation(this RegionAttachment regionAttachment, float rotation)
		{
		}
	}
	[Token(Token = "0x2000245")]
	public static class AtlasUtilities
	{
		[Token(Token = "0x4000D0D")]
		internal const TextureFormat SpineTextureFormat = TextureFormat.RGBA32;

		[Token(Token = "0x4000D0E")]
		internal const float DefaultMipmapBias = -0.5f;

		[Token(Token = "0x4000D0F")]
		internal const bool UseMipMaps = false;

		[Token(Token = "0x4000D10")]
		internal const float DefaultScale = 0.01f;

		[Token(Token = "0x4000D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<AtlasRegion, Texture2D> CachedRegionTextures;

		[Token(Token = "0x4000D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static List<Texture2D> CachedRegionTexturesList;

		[Token(Token = "0x60011D1")]
		[Address(RVA = "0x897ED8", Offset = "0x897ED8", VA = "0x897ED8")]
		public static AtlasRegion ToAtlasRegion(this Texture2D t, Material materialPropertySource, float scale = 0.01f)
		{
			return null;
		}

		[Token(Token = "0x60011D2")]
		[Address(RVA = "0x897F98", Offset = "0x897F98", VA = "0x897F98")]
		public static AtlasRegion ToAtlasRegion(this Texture2D t, Shader shader, float scale = 0.01f, [Optional] Material materialPropertySource)
		{
			return null;
		}

		[Token(Token = "0x60011D3")]
		[Address(RVA = "0x898490", Offset = "0x898490", VA = "0x898490")]
		public static AtlasRegion ToAtlasRegionPMAClone(this Texture2D t, Material materialPropertySource, TextureFormat textureFormat = TextureFormat.RGBA32, bool mipmaps = false)
		{
			return null;
		}

		[Token(Token = "0x60011D4")]
		[Address(RVA = "0x898554", Offset = "0x898554", VA = "0x898554")]
		public static AtlasRegion ToAtlasRegionPMAClone(this Texture2D t, Shader shader, TextureFormat textureFormat = TextureFormat.RGBA32, bool mipmaps = false, [Optional] Material materialPropertySource)
		{
			return null;
		}

		[Token(Token = "0x60011D5")]
		[Address(RVA = "0x89830C", Offset = "0x89830C", VA = "0x89830C")]
		public static AtlasPage ToSpineAtlasPage(this Material m)
		{
			return null;
		}

		[Token(Token = "0x60011D6")]
		[Address(RVA = "0x898B08", Offset = "0x898B08", VA = "0x898B08")]
		public static AtlasRegion ToAtlasRegion(this Sprite s, AtlasPage page)
		{
			return null;
		}

		[Token(Token = "0x60011D7")]
		[Address(RVA = "0x899160", Offset = "0x899160", VA = "0x899160")]
		public static AtlasRegion ToAtlasRegion(this Sprite s, Material material)
		{
			return null;
		}

		[Token(Token = "0x60011D8")]
		[Address(RVA = "0x899210", Offset = "0x899210", VA = "0x899210")]
		public static AtlasRegion ToAtlasRegionPMAClone(this Sprite s, Shader shader, TextureFormat textureFormat = TextureFormat.RGBA32, bool mipmaps = false, [Optional] Material materialPropertySource)
		{
			return null;
		}

		[Token(Token = "0x60011D9")]
		[Address(RVA = "0x8996C4", Offset = "0x8996C4", VA = "0x8996C4")]
		public static AtlasRegion ToAtlasRegionPMAClone(this Sprite s, Material materialPropertySource, TextureFormat textureFormat = TextureFormat.RGBA32, bool mipmaps = false)
		{
			return null;
		}

		[Token(Token = "0x60011DA")]
		[Address(RVA = "0x898C20", Offset = "0x898C20", VA = "0x898C20")]
		internal static AtlasRegion ToAtlasRegion(this Sprite s, bool isolatedTexture = false)
		{
			return null;
		}

		[Token(Token = "0x60011DB")]
		[Address(RVA = "0x89997C", Offset = "0x89997C", VA = "0x89997C")]
		public static void GetRepackedAttachments(List<Attachment> sourceAttachments, List<Attachment> outputAttachments, Material materialPropertySource, out Material outputMaterial, out Texture2D outputTexture, int maxAtlasSize = 1024, int padding = 2, TextureFormat textureFormat = TextureFormat.RGBA32, bool mipmaps = false, string newAssetName = "Repacked Attachments", bool clearCache = false)
		{
		}

		[Token(Token = "0x60011DC")]
		[Address(RVA = "0x89B2C0", Offset = "0x89B2C0", VA = "0x89B2C0")]
		public static Skin GetRepackedSkin(this Skin o, string newName, Material materialPropertySource, out Material outputMaterial, out Texture2D outputTexture, int maxAtlasSize = 1024, int padding = 2, TextureFormat textureFormat = TextureFormat.RGBA32, bool mipmaps = false)
		{
			return null;
		}

		[Token(Token = "0x60011DD")]
		[Address(RVA = "0x89B3B4", Offset = "0x89B3B4", VA = "0x89B3B4")]
		public static Skin GetRepackedSkin(this Skin o, string newName, Shader shader, out Material outputMaterial, out Texture2D outputTexture, int maxAtlasSize = 1024, int padding = 2, TextureFormat textureFormat = TextureFormat.RGBA32, bool mipmaps = false, [Optional] Material materialPropertySource, bool clearCache = false)
		{
			return null;
		}

		[Token(Token = "0x60011DE")]
		[Address(RVA = "0x89BF1C", Offset = "0x89BF1C", VA = "0x89BF1C")]
		public static Sprite ToSprite(this AtlasRegion ar, float pixelsPerUnit = 100f)
		{
			return null;
		}

		[Token(Token = "0x60011DF")]
		[Address(RVA = "0x89B078", Offset = "0x89B078", VA = "0x89B078")]
		public static void ClearCache()
		{
		}

		[Token(Token = "0x60011E0")]
		[Address(RVA = "0x89A850", Offset = "0x89A850", VA = "0x89A850")]
		public static Texture2D ToTexture(this AtlasRegion ar, bool applyImmediately = true, TextureFormat textureFormat = TextureFormat.RGBA32, bool mipmaps = false)
		{
			return null;
		}

		[Token(Token = "0x60011E1")]
		[Address(RVA = "0x8994C4", Offset = "0x8994C4", VA = "0x8994C4")]
		private static Texture2D ToTexture(this Sprite s, bool applyImmediately = true, TextureFormat textureFormat = TextureFormat.RGBA32, bool mipmaps = false)
		{
			return null;
		}

		[Token(Token = "0x60011E2")]
		[Address(RVA = "0x898800", Offset = "0x898800", VA = "0x898800")]
		private static Texture2D GetClone(this Texture2D t, bool applyImmediately = true, TextureFormat textureFormat = TextureFormat.RGBA32, bool mipmaps = false)
		{
			return null;
		}

		[Token(Token = "0x60011E3")]
		[Address(RVA = "0x89A670", Offset = "0x89A670", VA = "0x89A670")]
		private static bool IsRenderable(Attachment a)
		{
			return default(bool);
		}

		[Token(Token = "0x60011E4")]
		[Address(RVA = "0x899788", Offset = "0x899788", VA = "0x899788")]
		private static Rect SpineUnityFlipRect(this Rect rect, int textureHeight)
		{
			return default(Rect);
		}

		[Token(Token = "0x60011E5")]
		[Address(RVA = "0x89C154", Offset = "0x89C154", VA = "0x89C154")]
		private static Rect GetUnityRect(this AtlasRegion region)
		{
			return default(Rect);
		}

		[Token(Token = "0x60011E6")]
		[Address(RVA = "0x89C228", Offset = "0x89C228", VA = "0x89C228")]
		private static Rect GetUnityRect(this AtlasRegion region, int textureHeight)
		{
			return default(Rect);
		}

		[Token(Token = "0x60011E7")]
		[Address(RVA = "0x89C2D8", Offset = "0x89C2D8", VA = "0x89C2D8")]
		private static Rect GetSpineAtlasRect(this AtlasRegion region, bool includeRotate = true)
		{
			return default(Rect);
		}

		[Token(Token = "0x60011E8")]
		[Address(RVA = "0x89C3E4", Offset = "0x89C3E4", VA = "0x89C3E4")]
		private static Rect UVRectToTextureRect(Rect uvRect, int texWidth, int texHeight)
		{
			return default(Rect);
		}

		[Token(Token = "0x60011E9")]
		[Address(RVA = "0x8997FC", Offset = "0x8997FC", VA = "0x8997FC")]
		private static Rect TextureRectToUVRect(Rect textureRect, int texWidth, int texHeight)
		{
			return default(Rect);
		}

		[Token(Token = "0x60011EA")]
		[Address(RVA = "0x89ABD8", Offset = "0x89ABD8", VA = "0x89ABD8")]
		private static AtlasRegion UVRectToAtlasRegion(Rect uvRect, string name, AtlasPage page, float offsetX, float offsetY, bool rotate)
		{
			return null;
		}

		[Token(Token = "0x60011EB")]
		[Address(RVA = "0x89A73C", Offset = "0x89A73C", VA = "0x89A73C")]
		private static AtlasRegion GetAtlasRegion(this Attachment a)
		{
			return null;
		}

		[Token(Token = "0x60011EC")]
		[Address(RVA = "0x89C00C", Offset = "0x89C00C", VA = "0x89C00C")]
		private static Texture2D GetMainTexture(this AtlasRegion region)
		{
			return null;
		}

		[Token(Token = "0x60011ED")]
		[Address(RVA = "0x8989D0", Offset = "0x8989D0", VA = "0x8989D0")]
		private static void ApplyPMA(this Texture2D texture, bool applyImmediately = true)
		{
		}

		[Token(Token = "0x60011EE")]
		[Address(RVA = "0x898470", Offset = "0x898470", VA = "0x898470")]
		private static float InverseLerp(float a, float b, float value)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000246")]
	public static class SkinUtilities
	{
		[Token(Token = "0x60011F0")]
		[Address(RVA = "0x89E5E8", Offset = "0x89E5E8", VA = "0x89E5E8")]
		public static Skin UnshareSkin(this Skeleton skeleton, bool includeDefaultSkin, bool unshareAttachments, [Optional] AnimationState state)
		{
			return null;
		}

		[Token(Token = "0x60011F1")]
		[Address(RVA = "0x89E6CC", Offset = "0x89E6CC", VA = "0x89E6CC")]
		public static Skin GetClonedSkin(this Skeleton skeleton, string newSkinName, bool includeDefaultSkin = false, bool cloneAttachments = false, bool cloneMeshesAsLinked = true)
		{
			return null;
		}

		[Token(Token = "0x60011F2")]
		[Address(RVA = "0x89EE34", Offset = "0x89EE34", VA = "0x89EE34")]
		public static Skin GetClone(this Skin original)
		{
			return null;
		}

		[Token(Token = "0x60011F3")]
		[Address(RVA = "0x89F018", Offset = "0x89F018", VA = "0x89F018")]
		public static void SetAttachment(this Skin skin, string slotName, string keyName, Attachment attachment, Skeleton skeleton)
		{
		}

		[Token(Token = "0x60011F4")]
		[Address(RVA = "0x89F1BC", Offset = "0x89F1BC", VA = "0x89F1BC")]
		public static Attachment GetAttachment(this Skin skin, string slotName, string keyName, Skeleton skeleton)
		{
			return null;
		}

		[Token(Token = "0x60011F5")]
		[Address(RVA = "0x89F34C", Offset = "0x89F34C", VA = "0x89F34C")]
		public static void SetAttachment(this Skin skin, int slotIndex, string keyName, Attachment attachment)
		{
		}

		[Token(Token = "0x60011F6")]
		[Address(RVA = "0x89F39C", Offset = "0x89F39C", VA = "0x89F39C")]
		public static bool RemoveAttachment(this Skin skin, string slotName, string keyName, Skeleton skeleton)
		{
			return default(bool);
		}

		[Token(Token = "0x60011F7")]
		[Address(RVA = "0x89F514", Offset = "0x89F514", VA = "0x89F514")]
		public static bool RemoveAttachment(this Skin skin, int slotIndex, string keyName)
		{
			return default(bool);
		}

		[Token(Token = "0x60011F8")]
		[Address(RVA = "0x89F5DC", Offset = "0x89F5DC", VA = "0x89F5DC")]
		public static void Clear(this Skin skin)
		{
		}

		[Token(Token = "0x60011F9")]
		[Address(RVA = "0x89F664", Offset = "0x89F664", VA = "0x89F664")]
		public static void Append(this Skin destination, Skin source)
		{
		}

		[Token(Token = "0x60011FA")]
		[Address(RVA = "0x89E7C0", Offset = "0x89E7C0", VA = "0x89E7C0")]
		public static void CopyTo(this Skin source, Skin destination, bool overwrite, bool cloneAttachments, bool cloneMeshesAsLinked = true)
		{
		}
	}
	[Token(Token = "0x2000247")]
	public static class AttachmentCloneExtensions
	{
		[Token(Token = "0x60011FB")]
		[Address(RVA = "0x89A498", Offset = "0x89A498", VA = "0x89A498")]
		public static Attachment GetClone(this Attachment o, bool cloneMeshesAsLinked)
		{
			return null;
		}

		[Token(Token = "0x60011FC")]
		[Address(RVA = "0x89C588", Offset = "0x89C588", VA = "0x89C588")]
		public static RegionAttachment GetClone(this RegionAttachment o)
		{
			return null;
		}

		[Token(Token = "0x60011FD")]
		[Address(RVA = "0x89D004", Offset = "0x89D004", VA = "0x89D004")]
		public static ClippingAttachment GetClone(this ClippingAttachment o)
		{
			return null;
		}

		[Token(Token = "0x60011FE")]
		[Address(RVA = "0x89CF10", Offset = "0x89CF10", VA = "0x89CF10")]
		public static PointAttachment GetClone(this PointAttachment o)
		{
			return null;
		}

		[Token(Token = "0x60011FF")]
		[Address(RVA = "0x89CD50", Offset = "0x89CD50", VA = "0x89CD50")]
		public static BoundingBoxAttachment GetClone(this BoundingBoxAttachment o)
		{
			return null;
		}

		[Token(Token = "0x6001200")]
		[Address(RVA = "0x89CC74", Offset = "0x89CC74", VA = "0x89CC74")]
		public static MeshAttachment GetLinkedClone(this MeshAttachment o, bool inheritDeform = true)
		{
			return null;
		}

		[Token(Token = "0x6001201")]
		[Address(RVA = "0x89C8C8", Offset = "0x89C8C8", VA = "0x89C8C8")]
		public static MeshAttachment GetClone(this MeshAttachment o)
		{
			return null;
		}

		[Token(Token = "0x6001202")]
		[Address(RVA = "0x89CDE4", Offset = "0x89CDE4", VA = "0x89CDE4")]
		public static PathAttachment GetClone(this PathAttachment o)
		{
			return null;
		}

		[Token(Token = "0x6001203")]
		[Address(RVA = "0x89D0C0", Offset = "0x89D0C0", VA = "0x89D0C0")]
		private static void CloneVertexAttachment(VertexAttachment src, VertexAttachment dest)
		{
		}

		[Token(Token = "0x6001204")]
		[Address(RVA = "0x89D190", Offset = "0x89D190", VA = "0x89D190")]
		public static MeshAttachment GetLinkedMesh(this MeshAttachment o, string newLinkedMeshName, AtlasRegion region, bool inheritDeform = true)
		{
			return null;
		}

		[Token(Token = "0x6001205")]
		[Address(RVA = "0x89D4A0", Offset = "0x89D4A0", VA = "0x89D4A0")]
		public static MeshAttachment GetLinkedMesh(this MeshAttachment o, Sprite sprite, Shader shader, bool inheritDeform = true, [Optional] Material materialPropertySource)
		{
			return null;
		}

		[Token(Token = "0x6001206")]
		[Address(RVA = "0x89D638", Offset = "0x89D638", VA = "0x89D638")]
		public static MeshAttachment GetLinkedMesh(this MeshAttachment o, Sprite sprite, Material materialPropertySource, bool inheritDeform = true)
		{
			return null;
		}

		[Token(Token = "0x6001207")]
		[Address(RVA = "0x89D690", Offset = "0x89D690", VA = "0x89D690")]
		public static Attachment GetRemappedClone(this Attachment o, Sprite sprite, Material sourceMaterial, bool premultiplyAlpha = true, bool cloneMeshAsLinked = true, bool useOriginalRegionSize = false)
		{
			return null;
		}

		[Token(Token = "0x6001208")]
		[Address(RVA = "0x89D7B0", Offset = "0x89D7B0", VA = "0x89D7B0")]
		public static Attachment GetRemappedClone(this Attachment o, AtlasRegion atlasRegion, bool cloneMeshAsLinked = true, bool useOriginalRegionSize = false, float scale = 0.01f)
		{
			return null;
		}
	}
}
namespace RogoDigital
{
	[Token(Token = "0x2000248")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2E9ED4", Offset = "0x2E9ED4")]
	public class EyeController : BlendSystemUser
	{
		[Token(Token = "0x2000574")]
		public enum ControlMode
		{
			[Token(Token = "0x4001F4E")]
			Classic,
			[Token(Token = "0x4001F4F")]
			PoseBased
		}

		[Token(Token = "0x2000575")]
		public enum Axis
		{
			[Token(Token = "0x4001F51")]
			X_Positive,
			[Token(Token = "0x4001F52")]
			X_Negative,
			[Token(Token = "0x4001F53")]
			Y_Positive,
			[Token(Token = "0x4001F54")]
			Y_Negative,
			[Token(Token = "0x4001F55")]
			Z_Positive,
			[Token(Token = "0x4001F56")]
			Z_Negative
		}

		[Token(Token = "0x2000576")]
		public class BoneShapeInfo
		{
			[Token(Token = "0x4001F57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private Transform bone;

			[Token(Token = "0x4001F58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private Vector3 m_storedPosition;

			[Token(Token = "0x4001F59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Quaternion m_storedRotation;

			[Token(Token = "0x4001F5A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 targetPosition;

			[Token(Token = "0x4001F5B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Quaternion targetRotation;

			[Token(Token = "0x170003C8")]
			public Vector3 storedPosition
			{
				[Token(Token = "0x6001DE4")]
				[Address(RVA = "0xF00058", Offset = "0xF00058", VA = "0xF00058")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001DE5")]
				[Address(RVA = "0xF0006C", Offset = "0xF0006C", VA = "0xF0006C")]
				set
				{
				}
			}

			[Token(Token = "0x170003C9")]
			public Quaternion storedRotation
			{
				[Token(Token = "0x6001DE6")]
				[Address(RVA = "0xF000C8", Offset = "0xF000C8", VA = "0xF000C8")]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x6001DE7")]
				[Address(RVA = "0xF000D8", Offset = "0xF000D8", VA = "0xF000D8")]
				set
				{
				}
			}

			[Token(Token = "0x6001DE8")]
			[Address(RVA = "0xF00140", Offset = "0xF00140", VA = "0xF00140")]
			public BoneShapeInfo(BoneShape boneShape)
			{
			}
		}

		[Token(Token = "0x2000577")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EADEC", Offset = "0x2EADEC")]
		private sealed class <CloseEyes>d__58 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int <>1__state;

			[Token(Token = "0x4001F5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private object <>2__current;

			[Token(Token = "0x4001F5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public EyeController <>4__this;

			[Token(Token = "0x4001F5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private bool <end>5__2;

			[Token(Token = "0x170003CA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001DEC")]
				[Address(RVA = "0xEFF110", Offset = "0xEFF110", VA = "0xEFF110", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003CB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001DEE")]
				[Address(RVA = "0xEFF1A0", Offset = "0xEFF1A0", VA = "0xEFF1A0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001DE9")]
			[Address(RVA = "0xEFE2F8", Offset = "0xEFE2F8", VA = "0xEFE2F8")]
			[DebuggerHidden]
			public <CloseEyes>d__58(int <>1__state)
			{
			}

			[Token(Token = "0x6001DEA")]
			[Address(RVA = "0xEFE318", Offset = "0xEFE318", VA = "0xEFE318", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001DEB")]
			[Address(RVA = "0xEFE31C", Offset = "0xEFE31C", VA = "0xEFE31C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001DED")]
			[Address(RVA = "0xEFF118", Offset = "0xEFF118", VA = "0xEFF118", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000578")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EADFC", Offset = "0x2EADFC")]
		private sealed class <OpenEyes>d__59 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int <>1__state;

			[Token(Token = "0x4001F61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private object <>2__current;

			[Token(Token = "0x4001F62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public EyeController <>4__this;

			[Token(Token = "0x4001F63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private bool <end>5__2;

			[Token(Token = "0x170003CC")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001DF2")]
				[Address(RVA = "0xEFFFC0", Offset = "0xEFFFC0", VA = "0xEFFFC0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003CD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001DF4")]
				[Address(RVA = "0xF00050", Offset = "0xF00050", VA = "0xF00050", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001DEF")]
			[Address(RVA = "0xEFF1A8", Offset = "0xEFF1A8", VA = "0xEFF1A8")]
			[DebuggerHidden]
			public <OpenEyes>d__59(int <>1__state)
			{
			}

			[Token(Token = "0x6001DF0")]
			[Address(RVA = "0xEFF1C8", Offset = "0xEFF1C8", VA = "0xEFF1C8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001DF1")]
			[Address(RVA = "0xEFF1CC", Offset = "0xEFF1CC", VA = "0xEFF1CC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001DF3")]
			[Address(RVA = "0xEFFFC8", Offset = "0xEFFFC8", VA = "0xEFFFC8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool blinkingEnabled;

		[Token(Token = "0x4000D14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public ControlMode blinkingControlMode;

		[Token(Token = "0x4000D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Shape blinkingShape;

		[Token(Token = "0x4000D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x2F51A0", Offset = "0x2F51A0")]
		public int leftEyeBlinkBlendable;

		[Token(Token = "0x4000D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x2F51E4", Offset = "0x2F51E4")]
		public int rightEyeBlinkBlendable;

		[Token(Token = "0x4000D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float minimumBlinkGap;

		[Token(Token = "0x4000D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float maximumBlinkGap;

		[Token(Token = "0x4000D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x2F5228", Offset = "0x2F5228")]
		public float blinkDuration;

		[Token(Token = "0x4000D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool randomLookingEnabled;

		[Token(Token = "0x4000D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public ControlMode lookingControlMode;

		[Token(Token = "0x4000D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shape lookingUpShape;

		[Token(Token = "0x4000D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Shape lookingDownShape;

		[Token(Token = "0x4000D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Shape lookingLeftShape;

		[Token(Token = "0x4000D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Shape lookingRightShape;

		[Token(Token = "0x4000D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x2F5260", Offset = "0x2F5260")]
		private Transform _leftEyeLookAtBone;

		[Token(Token = "0x4000D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x2F52B4", Offset = "0x2F52B4")]
		private Transform _rightEyeLookAtBone;

		[Token(Token = "0x4000D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector2 eyeRotationRangeX;

		[Token(Token = "0x4000D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector2 eyeRotationRangeY;

		[Token(Token = "0x4000D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3 eyeLookOffset;

		[Token(Token = "0x4000D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Axis eyeForwardAxis;

		[Token(Token = "0x4000D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float eyeTurnSpeed;

		[Token(Token = "0x4000D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float minimumChangeDirectionGap;

		[Token(Token = "0x4000D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float maximumChangeDirectionGap;

		[Token(Token = "0x4000D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public bool targetEnabled;

		[Token(Token = "0x4000D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
		public bool autoTarget;

		[Token(Token = "0x4000D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public string autoTargetTag;

		[Token(Token = "0x4000D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float autoTargetDistance;

		[Token(Token = "0x4000D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform viewTarget;

		[Token(Token = "0x4000D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float targetWeight;

		[Token(Token = "0x4000D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool boneUpdateAnimation;

		[Token(Token = "0x4000D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float blinkTimer;

		[Token(Token = "0x4000D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool blinking;

		[Token(Token = "0x4000D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		private bool _keepEyesClosed;

		[Token(Token = "0x4000D34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9A")]
		private bool _asyncBlending;

		[Token(Token = "0x4000D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Transform leftEyeDummy;

		[Token(Token = "0x4000D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Transform rightEyeDummy;

		[Token(Token = "0x4000D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Quaternion leftRotation;

		[Token(Token = "0x4000D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private Quaternion rightRotation;

		[Token(Token = "0x4000D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Vector3[] axisOffsets;

		[Token(Token = "0x4000D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float lookTimer;

		[Token(Token = "0x4000D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private Quaternion randomAngle;

		[Token(Token = "0x4000D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private Vector2 randomBlend;

		[Token(Token = "0x4000D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private Transform target;

		[Token(Token = "0x4000D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Quaternion leftTargetAngle;

		[Token(Token = "0x4000D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Quaternion rightTargetAngle;

		[Token(Token = "0x4000D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Transform[] markedTargets;

		[Token(Token = "0x4000D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private Dictionary<Transform, BoneShapeInfo> boneShapes;

		[Token(Token = "0x170002AF")]
		public bool keepEyesClosed
		{
			[Token(Token = "0x6001209")]
			[Address(RVA = "0x6887EC", Offset = "0x6887EC", VA = "0x6887EC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600120A")]
			[Address(RVA = "0x6887F4", Offset = "0x6887F4", VA = "0x6887F4")]
			set
			{
			}
		}

		[Token(Token = "0x170002B0")]
		public Transform LeftEyeLookAtBone
		{
			[Token(Token = "0x600120B")]
			[Address(RVA = "0x688968", Offset = "0x688968", VA = "0x688968")]
			get
			{
				return null;
			}
			[Token(Token = "0x600120C")]
			[Address(RVA = "0x688970", Offset = "0x688970", VA = "0x688970")]
			set
			{
			}
		}

		[Token(Token = "0x170002B1")]
		public Transform RightEyeLookAtBone
		{
			[Token(Token = "0x600120D")]
			[Address(RVA = "0x6890E0", Offset = "0x6890E0", VA = "0x6890E0")]
			get
			{
				return null;
			}
			[Token(Token = "0x600120E")]
			[Address(RVA = "0x6890E8", Offset = "0x6890E8", VA = "0x6890E8")]
			set
			{
			}
		}

		[Token(Token = "0x600120F")]
		[Address(RVA = "0x6891A0", Offset = "0x6891A0", VA = "0x6891A0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001210")]
		[Address(RVA = "0x689FCC", Offset = "0x689FCC", VA = "0x689FCC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001211")]
		[Address(RVA = "0x688858", Offset = "0x688858", VA = "0x688858")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2FBDC4", Offset = "0x2FBDC4")]
		private IEnumerator CloseEyes()
		{
			return null;
		}

		[Token(Token = "0x6001212")]
		[Address(RVA = "0x6888E0", Offset = "0x6888E0", VA = "0x6888E0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2FBE3C", Offset = "0x2FBE3C")]
		private IEnumerator OpenEyes()
		{
			return null;
		}

		[Token(Token = "0x6001213")]
		[Address(RVA = "0x688A28", Offset = "0x688A28", VA = "0x688A28")]
		private void FixDummyHierarchy()
		{
		}

		[Token(Token = "0x6001214")]
		[Address(RVA = "0x689E6C", Offset = "0x689E6C", VA = "0x689E6C")]
		public void FindTargets()
		{
		}

		[Token(Token = "0x6001215")]
		[Address(RVA = "0x6920F4", Offset = "0x6920F4", VA = "0x6920F4")]
		public static Vector3 Vector3LerpAngle(Vector3 a, Vector3 b, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001216")]
		[Address(RVA = "0x692218", Offset = "0x692218", VA = "0x692218")]
		public void SetLookAtAmount(float amount)
		{
		}

		[Token(Token = "0x6001217")]
		[Address(RVA = "0x692220", Offset = "0x692220", VA = "0x692220")]
		public EyeController()
		{
		}
	}
}
namespace RogoDigital.Lipsync
{
	[Token(Token = "0x2000249")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x2E9F1C", Offset = "0x2E9F1C")]
	public class AdvancedBlendshapeBlendSystem : BlendSystem
	{
		[Token(Token = "0x4000D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private BlendshapeManager manager;

		[Token(Token = "0x6001218")]
		[Address(RVA = "0xF00258", Offset = "0xF00258", VA = "0xF00258", Slot = "4")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x6001219")]
		[Address(RVA = "0xF004FC", Offset = "0xF004FC", VA = "0xF004FC", Slot = "9")]
		public override string[] GetBlendables()
		{
			return null;
		}

		[Token(Token = "0x600121A")]
		[Address(RVA = "0xF00A44", Offset = "0xF00A44", VA = "0xF00A44", Slot = "5")]
		public override void SetBlendableValue(int blendable, float value)
		{
		}

		[Token(Token = "0x600121B")]
		[Address(RVA = "0xF00D6C", Offset = "0xF00D6C", VA = "0xF00D6C")]
		public AdvancedBlendshapeBlendSystem()
		{
		}
	}
	[Token(Token = "0x200024A")]
	public class BlendshapeBlendSystem : BlendSystem
	{
		[Token(Token = "0x4000D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public SkinnedMeshRenderer characterMesh;

		[Token(Token = "0x4000D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SkinnedMeshRenderer[] optionalOtherMeshes;

		[Token(Token = "0x4000D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool wireframeVisible;

		[Token(Token = "0x600121C")]
		[Address(RVA = "0xF01C18", Offset = "0xF01C18", VA = "0xF01C18", Slot = "4")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x600121D")]
		[Address(RVA = "0xF01CEC", Offset = "0xF01CEC", VA = "0xF01CEC", Slot = "5")]
		public override void SetBlendableValue(int blendable, float value)
		{
		}

		[Token(Token = "0x600121E")]
		[Address(RVA = "0xF01E88", Offset = "0xF01E88", VA = "0xF01E88", Slot = "9")]
		public override string[] GetBlendables()
		{
			return null;
		}

		[Token(Token = "0x600121F")]
		[Address(RVA = "0xF02104", Offset = "0xF02104", VA = "0xF02104", Slot = "6")]
		public override void OnVariableChanged()
		{
		}

		[Token(Token = "0x6001220")]
		[Address(RVA = "0xF02194", Offset = "0xF02194", VA = "0xF02194")]
		[AttributeAttribute(Name = "BlendSystemButton", RVA = "0x2FBEB4", Offset = "0x2FBEB4")]
		public void ToggleWireframe()
		{
		}

		[Token(Token = "0x6001221")]
		[Address(RVA = "0xF02230", Offset = "0xF02230", VA = "0xF02230")]
		public BlendshapeBlendSystem()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200024B")]
	public class BlendshapeManager : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000579")]
		public struct AdvancedBlendShape
		{
			[Token(Token = "0x4001F64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string name;

			[Token(Token = "0x4001F65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public BlendShapeMapping[] mappings;
		}

		[Serializable]
		[Token(Token = "0x200057A")]
		public struct BlendShapeMapping
		{
			[Token(Token = "0x4001F66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public SkinnedMeshRenderer skinnedMeshRenderer;

			[Token(Token = "0x4001F67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int blendShapeIndex;
		}

		[Token(Token = "0x4000D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x2F5318", Offset = "0x2F5318")]
		public AdvancedBlendShape[] blendShapes;

		[Token(Token = "0x4000D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		public AdvancedBlendshapeBlendSystem blendSystem;

		[Token(Token = "0x6001222")]
		[Address(RVA = "0xF0223C", Offset = "0xF0223C", VA = "0xF0223C")]
		public BlendshapeManager()
		{
		}
	}
	[Token(Token = "0x200024C")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x2E9F94", Offset = "0x2E9F94")]
	public class SpriteBlendSystem : BlendSystem
	{
		[Token(Token = "0x4000D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private SpriteManager manager;

		[Token(Token = "0x6001223")]
		[Address(RVA = "0xF1F584", Offset = "0xF1F584", VA = "0xF1F584", Slot = "4")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x6001224")]
		[Address(RVA = "0xF1F7DC", Offset = "0xF1F7DC", VA = "0xF1F7DC", Slot = "5")]
		public override void SetBlendableValue(int blendable, float value)
		{
		}

		[Token(Token = "0x6001225")]
		[Address(RVA = "0xF1FBDC", Offset = "0xF1FBDC", VA = "0xF1FBDC", Slot = "9")]
		public override string[] GetBlendables()
		{
			return null;
		}

		[Token(Token = "0x6001226")]
		[Address(RVA = "0xF20258", Offset = "0xF20258", VA = "0xF20258", Slot = "6")]
		public override void OnVariableChanged()
		{
		}

		[Token(Token = "0x6001227")]
		[Address(RVA = "0xF20264", Offset = "0xF20264", VA = "0xF20264")]
		[AttributeAttribute(Name = "BlendSystemButton", RVA = "0x2FBEF4", Offset = "0x2FBEF4")]
		public void ShowHelp()
		{
		}

		[Token(Token = "0x6001228")]
		[Address(RVA = "0xF202C4", Offset = "0xF202C4", VA = "0xF202C4")]
		public SpriteBlendSystem()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200024D")]
	public class SpriteManager : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200057B")]
		public class SpriteGroup
		{
			[Token(Token = "0x4001F68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[SerializeField]
			public string groupName;

			[Token(Token = "0x4001F69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[SerializeField]
			public SpriteRenderer spriteRenderer;

			[Token(Token = "0x4001F6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			public Sprite defaultSprite;

			[Token(Token = "0x6001DF5")]
			[Address(RVA = "0xF20388", Offset = "0xF20388", VA = "0xF20388")]
			public SpriteGroup(string groupName)
			{
			}
		}

		[Token(Token = "0x4000D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		public List<Sprite> availableSprites;

		[Token(Token = "0x4000D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public List<SpriteGroup> groups;

		[Token(Token = "0x4000D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public SpriteBlendSystem blendSystem;

		[Token(Token = "0x6001229")]
		[Address(RVA = "0xF202C8", Offset = "0xF202C8", VA = "0xF202C8")]
		public SpriteManager()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200024E")]
	public class Blendable
	{
		[Token(Token = "0x4000D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int number;

		[Token(Token = "0x4000D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float currentWeight;

		[Token(Token = "0x600122A")]
		[Address(RVA = "0xF01668", Offset = "0xF01668", VA = "0xF01668")]
		public Blendable(int number, float currentWeight)
		{
		}
	}
	[Token(Token = "0x200024F")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x2EA00C", Offset = "0x2EA00C")]
	public class BlendshapePreset : ScriptableObject
	{
		[Token(Token = "0x4000D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		public List<PhonemeShape> phonemeShapes;

		[Token(Token = "0x4000D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public List<EmotionShape> emotionShapes;

		[Token(Token = "0x600122B")]
		[Address(RVA = "0xF022B0", Offset = "0xF022B0", VA = "0xF022B0")]
		public BlendshapePreset()
		{
		}
	}
	[Token(Token = "0x2000250")]
	[ExecuteInEditMode]
	public class BlendSystem : MonoBehaviour
	{
		[Token(Token = "0x200057C")]
		public delegate void BlendSystemGenericDelegate();

		[NonSerialized]
		[Token(Token = "0x4000D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string blendableDisplayName;

		[NonSerialized]
		[Token(Token = "0x4000D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string blendableDisplayNamePlural;

		[NonSerialized]
		[Token(Token = "0x4000D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public string noBlendablesMessage;

		[NonSerialized]
		[Token(Token = "0x4000D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string notReadyMessage;

		[NonSerialized]
		[Token(Token = "0x4000D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float blendRangeLow;

		[NonSerialized]
		[Token(Token = "0x4000D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float blendRangeHigh;

		[NonSerialized]
		[Token(Token = "0x4000D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool allowResyncing;

		[Token(Token = "0x4000D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool isReady;

		[Token(Token = "0x4000D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BlendSystemUser[] users;

		[Token(Token = "0x4000D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public BlendSystemGenericDelegate onBlendablesChanged;

		[Token(Token = "0x4000D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[HideInInspector]
		private List<Blendable> _blendables;

		[Token(Token = "0x170002B2")]
		public int blendableCount
		{
			[Token(Token = "0x600122C")]
			[Address(RVA = "0xF008A8", Offset = "0xF008A8", VA = "0xF008A8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600122D")]
		[Address(RVA = "0xF004B8", Offset = "0xF004B8", VA = "0xF004B8", Slot = "4")]
		public virtual void OnEnable()
		{
		}

		[Token(Token = "0x600122E")]
		[Address(RVA = "0xF00E40", Offset = "0xF00E40", VA = "0xF00E40")]
		public void Register(BlendSystemUser user)
		{
		}

		[Token(Token = "0x600122F")]
		[Address(RVA = "0xF012CC", Offset = "0xF012CC", VA = "0xF012CC")]
		public void Unregister(BlendSystemUser user)
		{
		}

		[Token(Token = "0x6001230")]
		[Address(RVA = "0xF01570", Offset = "0xF01570", VA = "0xF01570", Slot = "5")]
		public virtual void SetBlendableValue(int blendable, float value)
		{
		}

		[Token(Token = "0x6001231")]
		[Address(RVA = "0xF01574", Offset = "0xF01574", VA = "0xF01574")]
		public float GetBlendableValue(int blendable)
		{
			return default(float);
		}

		[Token(Token = "0x6001232")]
		[Address(RVA = "0xF0164C", Offset = "0xF0164C", VA = "0xF0164C", Slot = "6")]
		public virtual void OnVariableChanged()
		{
		}

		[Token(Token = "0x6001233")]
		[Address(RVA = "0xF01650", Offset = "0xF01650", VA = "0xF01650", Slot = "7")]
		public virtual void OnBlendSystemAdded()
		{
		}

		[Token(Token = "0x6001234")]
		[Address(RVA = "0xF01654", Offset = "0xF01654", VA = "0xF01654", Slot = "8")]
		public virtual void OnBlendSystemRemoved()
		{
		}

		[Token(Token = "0x6001235")]
		[Address(RVA = "0xF01658", Offset = "0xF01658", VA = "0xF01658", Slot = "9")]
		public virtual string[] GetBlendables()
		{
			return null;
		}

		[Token(Token = "0x6001236")]
		[Address(RVA = "0xF01660", Offset = "0xF01660", VA = "0xF01660", Slot = "10")]
		public virtual void OnBlendableAddedToPose(int blendable)
		{
		}

		[Token(Token = "0x6001237")]
		[Address(RVA = "0xF01664", Offset = "0xF01664", VA = "0xF01664", Slot = "11")]
		public virtual void OnBlendableRemovedFromPose(int blendable)
		{
		}

		[Token(Token = "0x6001238")]
		[Address(RVA = "0xF0094C", Offset = "0xF0094C", VA = "0xF0094C")]
		public void AddBlendable(int blendable, float currentValue)
		{
		}

		[Token(Token = "0x6001239")]
		[Address(RVA = "0xF01690", Offset = "0xF01690", VA = "0xF01690")]
		public void ClearBlendables()
		{
		}

		[Token(Token = "0x600123A")]
		[Address(RVA = "0xF00C6C", Offset = "0xF00C6C", VA = "0xF00C6C")]
		public void SetInternalValue(int blendable, float value)
		{
		}

		[Token(Token = "0x600123B")]
		[Address(RVA = "0xF00D70", Offset = "0xF00D70", VA = "0xF00D70")]
		public BlendSystem()
		{
		}
	}
	[Token(Token = "0x2000251")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x2EA050", Offset = "0x2EA050")]
	public class BlendSystemButton : Attribute
	{
		[Token(Token = "0x200057D")]
		public struct Reference
		{
			[Token(Token = "0x4001F6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string displayName;

			[Token(Token = "0x4001F6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public MethodInfo method;

			[Token(Token = "0x6001DFA")]
			[Address(RVA = "0x3BBA28", Offset = "0x3BBA28", VA = "0x3BBA28")]
			public Reference(string displayName, MethodInfo method)
			{
			}
		}

		[Token(Token = "0x4000D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string displayName;

		[Token(Token = "0x600123C")]
		[Address(RVA = "0xF019A0", Offset = "0xF019A0", VA = "0xF019A0")]
		public BlendSystemButton(string displayName)
		{
		}
	}
	[Token(Token = "0x2000252")]
	public class BlendSystemUser : MonoBehaviour
	{
		[Token(Token = "0x4000D5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public BlendSystem blendSystem;

		[Token(Token = "0x600123D")]
		[Address(RVA = "0xF019C8", Offset = "0xF019C8", VA = "0xF019C8")]
		protected void OnDestroy()
		{
		}

		[Token(Token = "0x600123E")]
		[Address(RVA = "0xF019F8", Offset = "0xF019F8", VA = "0xF019F8")]
		protected void CleanUpBlendSystems()
		{
		}

		[Token(Token = "0x600123F")]
		[Address(RVA = "0xF01C10", Offset = "0xF01C10", VA = "0xF01C10")]
		public BlendSystemUser()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000253")]
	public class BoneShape
	{
		[Token(Token = "0x4000D5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[SerializeField]
		public Transform bone;

		[Token(Token = "0x4000D5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		public Vector3 endPosition;

		[Token(Token = "0x4000D5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public Vector3 endRotation;

		[Token(Token = "0x4000D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		public Vector3 endScale;

		[Token(Token = "0x4000D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		public bool lockPosition;

		[Token(Token = "0x4000D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		[SerializeField]
		public bool lockRotation;

		[Token(Token = "0x4000D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 neutralPosition;

		[Token(Token = "0x4000D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 neutralRotation;

		[Token(Token = "0x4000D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Vector3 neutralScale;

		[Token(Token = "0x6001240")]
		[Address(RVA = "0xF022B8", Offset = "0xF022B8", VA = "0xF022B8")]
		public void SetNeutral()
		{
		}

		[Token(Token = "0x6001241")]
		[Address(RVA = "0xF023EC", Offset = "0xF023EC", VA = "0xF023EC")]
		public BoneShape(Transform bone, Vector3 endPosition, Vector3 endRotation, Vector3 endScale)
		{
		}

		[Token(Token = "0x6001242")]
		[Address(RVA = "0xF024F8", Offset = "0xF024F8", VA = "0xF024F8")]
		public BoneShape(Transform bone, Vector3 endPosition, Vector3 endRotation)
		{
		}

		[Token(Token = "0x6001243")]
		[Address(RVA = "0xF0261C", Offset = "0xF0261C", VA = "0xF0261C")]
		public BoneShape()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000254")]
	public class EmotionMarker
	{
		[Token(Token = "0x4000D66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[SerializeField]
		public string emotion;

		[Token(Token = "0x4000D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		public bool isMixer;

		[Token(Token = "0x4000D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public EmotionMixer mixer;

		[Token(Token = "0x4000D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		public float startTime;

		[Token(Token = "0x4000D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public float endTime;

		[Token(Token = "0x4000D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		public float blendInTime;

		[Token(Token = "0x4000D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		public float blendOutTime;

		[Token(Token = "0x4000D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		public bool blendToMarker;

		[Token(Token = "0x4000D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		[SerializeField]
		public bool blendFromMarker;

		[Token(Token = "0x4000D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		[SerializeField]
		public bool customBlendIn;

		[Token(Token = "0x4000D70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
		[SerializeField]
		public bool customBlendOut;

		[Token(Token = "0x4000D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		public float intensity;

		[Token(Token = "0x4000D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		public bool continuousVariation;

		[Token(Token = "0x4000D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		public float variationFrequency;

		[Token(Token = "0x4000D74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		public float intensityVariation;

		[Token(Token = "0x4000D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		public float blendableVariation;

		[Token(Token = "0x4000D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		public float bonePositionVariation;

		[Token(Token = "0x4000D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		public float boneRotationVariation;

		[Token(Token = "0x4000D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool invalid;

		[Token(Token = "0x6001244")]
		[Address(RVA = "0xF026E0", Offset = "0xF026E0", VA = "0xF026E0")]
		public EmotionMarker(string emotion, float startTime, float endTime, float blendInTime, float blendOutTime, bool blendToMarker, bool blendFromMarker, bool customBlendIn, bool customBlendOut)
		{
		}

		[Token(Token = "0x6001245")]
		[Address(RVA = "0xF02770", Offset = "0xF02770", VA = "0xF02770")]
		public EmotionMarker(EmotionMixer mixer, float startTime, float endTime, float blendInTime, float blendOutTime, bool blendToMarker, bool blendFromMarker, bool customBlendIn, bool customBlendOut)
		{
		}

		[Token(Token = "0x6001246")]
		[Address(RVA = "0xF02810", Offset = "0xF02810", VA = "0xF02810")]
		public EmotionMarker(string emotion, float startTime, float endTime, float blendInTime, float blendOutTime, bool blendToMarker, bool blendFromMarker, bool customBlendIn, bool customBlendOut, float intensity)
		{
		}

		[Token(Token = "0x6001247")]
		[Address(RVA = "0xF028B0", Offset = "0xF028B0", VA = "0xF028B0")]
		public EmotionMarker CreateCopy()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000255")]
	public class EmotionMixer
	{
		[Serializable]
		[Token(Token = "0x200057E")]
		public struct EmotionComponent
		{
			[Token(Token = "0x4001F6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string emotion;

			[Token(Token = "0x4001F6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float weight;

			[Token(Token = "0x6001DFB")]
			[Address(RVA = "0x3BBB5C", Offset = "0x3BBB5C", VA = "0x3BBB5C")]
			public EmotionComponent(string emotion, float weight)
			{
			}
		}

		[Token(Token = "0x200057F")]
		public enum MixingMode
		{
			[Token(Token = "0x4001F70")]
			Normal,
			[Token(Token = "0x4001F71")]
			Additive
		}

		[Token(Token = "0x4000D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[SerializeField]
		public List<EmotionComponent> emotions;

		[Token(Token = "0x4000D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		public MixingMode mixingMode;

		[Token(Token = "0x4000D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Color displayColor;

		[Token(Token = "0x6001248")]
		[Address(RVA = "0xF02A58", Offset = "0xF02A58", VA = "0xF02A58")]
		public EmotionMixer()
		{
		}

		[Token(Token = "0x6001249")]
		[Address(RVA = "0xF02B24", Offset = "0xF02B24", VA = "0xF02B24")]
		public EmotionShape GetShape(LipSync character)
		{
			return null;
		}

		[Token(Token = "0x600124A")]
		[Address(RVA = "0xF03AB0", Offset = "0xF03AB0", VA = "0xF03AB0")]
		public void SetWeight(int index, float weight)
		{
		}

		[Token(Token = "0x600124B")]
		[Address(RVA = "0xF03ACC", Offset = "0xF03ACC", VA = "0xF03ACC")]
		public void SetWeight(int index, float weight, bool bypassMinChecks)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000256")]
	public class EmotionShape : Shape
	{
		[Token(Token = "0x4000D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		public string emotion;

		[Token(Token = "0x600124C")]
		[Address(RVA = "0xF03798", Offset = "0xF03798", VA = "0xF03798")]
		public EmotionShape(string eEmotion)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000257")]
	public class GestureMarker
	{
		[Token(Token = "0x4000D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[SerializeField]
		public string gesture;

		[Token(Token = "0x4000D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		public float time;

		[Token(Token = "0x600124D")]
		[Address(RVA = "0xF129F0", Offset = "0xF129F0", VA = "0xF129F0")]
		public GestureMarker(string gesture, float time)
		{
		}

		[Token(Token = "0x600124E")]
		[Address(RVA = "0xF12A18", Offset = "0xF12A18", VA = "0xF12A18")]
		public GestureMarker CreateCopy()
		{
			return null;
		}
	}
	[Token(Token = "0x2000258")]
	public class LipSyncData : ScriptableObject
	{
		[Token(Token = "0x4000D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		public AudioClip clip;

		[Token(Token = "0x4000D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public PhonemeMarker[] phonemeData;

		[Token(Token = "0x4000D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		public EmotionMarker[] emotionData;

		[Token(Token = "0x4000D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public GestureMarker[] gestureData;

		[Token(Token = "0x4000D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		public float version;

		[Token(Token = "0x4000D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		public float length;

		[Token(Token = "0x4000D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		public string transcript;

		[Token(Token = "0x600124F")]
		[Address(RVA = "0xF1C45C", Offset = "0xF1C45C", VA = "0xF1C45C")]
		public LipSyncData()
		{
		}

		[Token(Token = "0x6001250")]
		[Address(RVA = "0xF1C464", Offset = "0xF1C464", VA = "0xF1C464")]
		public LipSyncData(AudioClip clip, PhonemeMarker[] pData, EmotionMarker[] eData, GestureMarker[] gData)
		{
		}

		[Token(Token = "0x6001251")]
		[Address(RVA = "0xF1C4BC", Offset = "0xF1C4BC", VA = "0xF1C4BC")]
		public LipSyncData(AudioClip clip, PhonemeMarker[] pData, EmotionMarker[] eData, GestureMarker[] gData, float length)
		{
		}
	}
	[Token(Token = "0x2000259")]
	public static class LipSyncExtensions
	{
		[Token(Token = "0x6001252")]
		[Address(RVA = "0xF1C4FC", Offset = "0xF1C4FC", VA = "0xF1C4FC")]
		public static Transform FindDeepChild(this Transform aParent, string aName)
		{
			return null;
		}

		[Token(Token = "0x6001253")]
		[Address(RVA = "0xF1C910", Offset = "0xF1C910", VA = "0xF1C910")]
		public static Vector3 InverseTransformEulerAngle(this Transform transform, Vector3 eulerAngle)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001254")]
		[Address(RVA = "0xF1CA70", Offset = "0xF1CA70", VA = "0xF1CA70")]
		public static Vector3 TransformEulerAngle(this Transform transform, Vector3 eulerAngle)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001255")]
		[Address(RVA = "0xF1C9F4", Offset = "0xF1C9F4", VA = "0xF1C9F4")]
		public static Vector3 ToPositiveEuler(this Vector3 eulerAngle)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001256")]
		[Address(RVA = "0xF1AD44", Offset = "0xF1AD44", VA = "0xF1AD44")]
		public static Vector3 ToNegativeEuler(this Vector3 eulerAngle)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001257")]
		[Address(RVA = "0xF1CB54", Offset = "0xF1CB54", VA = "0xF1CB54")]
		private static Vector3 ClampRange(Vector3 eulerAngle)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001258")]
		[Address(RVA = "0xF1CBF0", Offset = "0xF1CBF0", VA = "0xF1CBF0")]
		public static EmotionMarker PreviousMarker(this List<EmotionMarker> list, EmotionMarker current)
		{
			return null;
		}

		[Token(Token = "0x6001259")]
		[Address(RVA = "0xF1CCB0", Offset = "0xF1CCB0", VA = "0xF1CCB0")]
		public static EmotionMarker NextMarker(this List<EmotionMarker> list, EmotionMarker current)
		{
			return null;
		}
	}
	[Token(Token = "0x200025A")]
	public class LipSyncPreset : ScriptableObject
	{
		[Serializable]
		[Token(Token = "0x2000580")]
		public struct PhonemeShapeInfo
		{
			[Token(Token = "0x4001F72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[SerializeField]
			public string phonemeName;

			[Token(Token = "0x4001F73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[SerializeField]
			[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x2F66F8", Offset = "0x2F66F8")]
			public Phoneme phoneme;

			[Token(Token = "0x4001F74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[SerializeField]
			public BlendableInfo[] blendables;

			[Token(Token = "0x4001F75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[SerializeField]
			public BoneInfo[] bones;
		}

		[Serializable]
		[Token(Token = "0x2000581")]
		public struct EmotionShapeInfo
		{
			[Token(Token = "0x4001F76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[SerializeField]
			public string emotion;

			[Token(Token = "0x4001F77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[SerializeField]
			public BlendableInfo[] blendables;

			[Token(Token = "0x4001F78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[SerializeField]
			public BoneInfo[] bones;
		}

		[Serializable]
		[Token(Token = "0x2000582")]
		public struct BlendableInfo
		{
			[Token(Token = "0x4001F79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[SerializeField]
			public int blendableNumber;

			[Token(Token = "0x4001F7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[SerializeField]
			public string blendableName;

			[Token(Token = "0x4001F7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[SerializeField]
			public float weight;
		}

		[Serializable]
		[Token(Token = "0x2000583")]
		public struct BoneInfo
		{
			[Token(Token = "0x4001F7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[SerializeField]
			public string path;

			[Token(Token = "0x4001F7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[SerializeField]
			public string name;

			[Token(Token = "0x4001F7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[SerializeField]
			public Vector3 localPosition;

			[Token(Token = "0x4001F7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[SerializeField]
			public Vector3 localRotation;

			[Token(Token = "0x4001F80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			public bool lockPosition;

			[Token(Token = "0x4001F81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
			[SerializeField]
			public bool lockRotation;
		}

		[Token(Token = "0x4000D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		public PhonemeShapeInfo[] phonemeShapes;

		[Token(Token = "0x4000D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public EmotionShapeInfo[] emotionShapes;

		[Token(Token = "0x600125A")]
		[Address(RVA = "0xF1CD6C", Offset = "0xF1CD6C", VA = "0xF1CD6C")]
		public int FindBlendable(BlendableInfo blendable, BlendSystem blendSystem)
		{
			return default(int);
		}

		[Token(Token = "0x600125B")]
		[Address(RVA = "0xF1D5A8", Offset = "0xF1D5A8", VA = "0xF1D5A8")]
		public Transform FindBone(BoneInfo bone, Transform searchRoot)
		{
			return null;
		}

		[Token(Token = "0x600125C")]
		[Address(RVA = "0xF1D68C", Offset = "0xF1D68C", VA = "0xF1D68C")]
		public void CreateFromShapes(PhonemeShape[] phonemes, EmotionShape[] emotions, BlendSystem blendSystem)
		{
		}

		[Token(Token = "0x600125D")]
		[Address(RVA = "0xF1EE40", Offset = "0xF1EE40", VA = "0xF1EE40")]
		public LipSyncPreset()
		{
		}
	}
	[Token(Token = "0x200025B")]
	public class LipSyncProject : ScriptableObject
	{
		[Token(Token = "0x4000D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		public string[] emotions;

		[Token(Token = "0x4000D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public Color[] emotionColors;

		[Token(Token = "0x4000D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		public List<string> gestures;

		[Token(Token = "0x4000D8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public PhonemeSet phonemeSet;

		[Token(Token = "0x600125E")]
		[Address(RVA = "0xF1EE48", Offset = "0xF1EE48", VA = "0xF1EE48")]
		public LipSyncProject()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200025C")]
	public class PhonemeMarker
	{
		[Token(Token = "0x4000D8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[SerializeField]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x2F5658", Offset = "0x2F5658")]
		public Phoneme phoneme;

		[Token(Token = "0x4000D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		public int phonemeNumber;

		[Token(Token = "0x4000D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public float time;

		[Token(Token = "0x4000D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		public float intensity;

		[Token(Token = "0x4000D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public bool sustain;

		[Token(Token = "0x4000D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[SerializeField]
		public bool useRandomness;

		[Token(Token = "0x4000D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		public float intensityRandomness;

		[Token(Token = "0x4000D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		public float blendableRandomness;

		[Token(Token = "0x4000D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		public float bonePositionRandomness;

		[Token(Token = "0x4000D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		public float boneRotationRandomness;

		[Token(Token = "0x600125F")]
		[Address(RVA = "0xF1BFE8", Offset = "0xF1BFE8", VA = "0xF1BFE8")]
		public PhonemeMarker(int phonemeNumber, float time, float intensity, bool sustain)
		{
		}

		[Token(Token = "0x6001260")]
		[Address(RVA = "0xF1EED8", Offset = "0xF1EED8", VA = "0xF1EED8")]
		public PhonemeMarker(int phonemeNumber, float time)
		{
		}

		[Token(Token = "0x6001261")]
		[Address(RVA = "0xF1EF30", Offset = "0xF1EF30", VA = "0xF1EF30")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x2FBF9C", Offset = "0x2FBF9C")]
		public PhonemeMarker(Phoneme phoneme, float time, float intensity, bool sustain)
		{
		}

		[Token(Token = "0x6001262")]
		[Address(RVA = "0xF1EF98", Offset = "0xF1EF98", VA = "0xF1EF98")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x2FBFD0", Offset = "0x2FBFD0")]
		public PhonemeMarker(Phoneme phoneme, float time)
		{
		}

		[Token(Token = "0x6001263")]
		[Address(RVA = "0xF1EFF0", Offset = "0xF1EFF0", VA = "0xF1EFF0")]
		public PhonemeMarker CreateCopy()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x200025D")]
	[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x2EA08C", Offset = "0x2EA08C")]
	public class PhonemeSet : ScriptableObject
	{
		[Serializable]
		[Token(Token = "0x2000584")]
		[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x2EAE0C", Offset = "0x2EAE0C")]
		public class PhonemeCollection
		{
			[Token(Token = "0x4001F82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public List<string> phonemeNames;

			[Token(Token = "0x170003CE")]
			public int Length
			{
				[Token(Token = "0x6001DFC")]
				[Address(RVA = "0xF1F25C", Offset = "0xF1F25C", VA = "0xF1F25C")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x170003CF")]
			public Phoneme Item
			{
				[Token(Token = "0x6001DFD")]
				[Address(RVA = "0xF1F2C0", Offset = "0xF1F2C0", VA = "0xF1F2C0")]
				get
				{
					return default(Phoneme);
				}
			}

			[Token(Token = "0x6001DFE")]
			[Address(RVA = "0xF1F198", Offset = "0xF1F198", VA = "0xF1F198")]
			public PhonemeCollection()
			{
			}
		}

		[Token(Token = "0x2000585")]
		public struct Phoneme
		{
			[Token(Token = "0x4001F83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F6840", Offset = "0x2F6840")]
			private string <name>k__BackingField;

			[Token(Token = "0x4001F84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F6850", Offset = "0x2F6850")]
			private int <number>k__BackingField;

			[Token(Token = "0x4001F85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F6860", Offset = "0x2F6860")]
			private int <flag>k__BackingField;

			[Token(Token = "0x170003D0")]
			public string name
			{
				[Token(Token = "0x6001DFF")]
				[Address(RVA = "0x3BC498", Offset = "0x3BC498", VA = "0x3BC498")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FDA10", Offset = "0x2FDA10")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001E00")]
				[Address(RVA = "0x3BC4A0", Offset = "0x3BC4A0", VA = "0x3BC4A0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FDA20", Offset = "0x2FDA20")]
				private set
				{
				}
			}

			[Token(Token = "0x170003D1")]
			public int number
			{
				[Token(Token = "0x6001E01")]
				[Address(RVA = "0x3BC4A8", Offset = "0x3BC4A8", VA = "0x3BC4A8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FDA30", Offset = "0x2FDA30")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6001E02")]
				[Address(RVA = "0x3BC4B0", Offset = "0x3BC4B0", VA = "0x3BC4B0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FDA40", Offset = "0x2FDA40")]
				private set
				{
				}
			}

			[Token(Token = "0x170003D2")]
			public int flag
			{
				[Token(Token = "0x6001E03")]
				[Address(RVA = "0x3BC4B8", Offset = "0x3BC4B8", VA = "0x3BC4B8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FDA50", Offset = "0x2FDA50")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6001E04")]
				[Address(RVA = "0x3BC4C0", Offset = "0x3BC4C0", VA = "0x3BC4C0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FDA60", Offset = "0x2FDA60")]
				private set
				{
				}
			}

			[Token(Token = "0x6001E05")]
			[Address(RVA = "0x3BC4C8", Offset = "0x3BC4C8", VA = "0x3BC4C8")]
			public Phoneme(string name, int number, int flag)
			{
			}
		}

		[Token(Token = "0x4000D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		public string scriptingName;

		[Token(Token = "0x4000D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public PhonemeCollection phonemes;

		[Token(Token = "0x4000D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		public Texture2D[] guideImages;

		[Token(Token = "0x6001264")]
		[Address(RVA = "0xF1F120", Offset = "0xF1F120", VA = "0xF1F120")]
		public PhonemeSet()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200025E")]
	public class PhonemeShape : Shape
	{
		[Token(Token = "0x4000D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		public string phonemeName;

		[Token(Token = "0x4000D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x2F5794", Offset = "0x2F5794")]
		public Phoneme phoneme;

		[Token(Token = "0x6001265")]
		[Address(RVA = "0xF1F394", Offset = "0xF1F394", VA = "0xF1F394")]
		public PhonemeShape(string phonemeName)
		{
		}

		[Token(Token = "0x6001266")]
		[Address(RVA = "0xF1F48C", Offset = "0xF1F48C", VA = "0xF1F48C")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x2FC004", Offset = "0x2FC004")]
		public PhonemeShape(Phoneme ePhoneme)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200025F")]
	public class Shape
	{
		[Token(Token = "0x4000D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[SerializeField]
		public List<int> blendShapes;

		[Token(Token = "0x4000D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		public List<string> blendableNames;

		[Token(Token = "0x4000D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public List<float> weights;

		[Token(Token = "0x4000D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		public List<BoneShape> bones;

		[Token(Token = "0x4000D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public bool verified;

		[Token(Token = "0x6001267")]
		[Address(RVA = "0xF03890", Offset = "0xF03890", VA = "0xF03890")]
		public bool HasBone(Transform bone)
		{
			return default(bool);
		}

		[Token(Token = "0x6001268")]
		[Address(RVA = "0xF039A0", Offset = "0xF039A0", VA = "0xF039A0")]
		public int IndexOfBone(Transform bone)
		{
			return default(int);
		}

		[Token(Token = "0x6001269")]
		[Address(RVA = "0xF03FB8", Offset = "0xF03FB8", VA = "0xF03FB8")]
		public Shape()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000260")]
	public class TransformAnimationCurve
	{
		[Token(Token = "0x2000586")]
		public struct TransformKeyframe
		{
			[Token(Token = "0x4001F86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float time;

			[Token(Token = "0x4001F87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public Quaternion rotation;

			[Token(Token = "0x4001F88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector3 position;

			[Token(Token = "0x4001F89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 scale;

			[Token(Token = "0x4001F8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float inTangent;

			[Token(Token = "0x4001F8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float outTangent;

			[Token(Token = "0x6001E06")]
			[Address(RVA = "0x3BC4D4", Offset = "0x3BC4D4", VA = "0x3BC4D4")]
			public TransformKeyframe(float time, Vector3 position, Quaternion rotation, Vector3 scale, float inTangent, float outTangent)
			{
			}
		}

		[Token(Token = "0x4000DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private AnimationCurve _posX;

		[Token(Token = "0x4000DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private AnimationCurve _posY;

		[Token(Token = "0x4000DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private AnimationCurve _posZ;

		[Token(Token = "0x4000DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private AnimationCurve _rotX;

		[Token(Token = "0x4000DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private AnimationCurve _rotY;

		[Token(Token = "0x4000DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private AnimationCurve _rotZ;

		[Token(Token = "0x4000DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AnimationCurve _rotW;

		[Token(Token = "0x4000DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private AnimationCurve _scaleX;

		[Token(Token = "0x4000DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AnimationCurve _scaleY;

		[Token(Token = "0x4000DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private AnimationCurve _scaleZ;

		[Token(Token = "0x170002B3")]
		public TransformKeyframe[] keys
		{
			[Token(Token = "0x600126A")]
			[Address(RVA = "0xF1ADC8", Offset = "0xF1ADC8", VA = "0xF1ADC8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B4")]
		public int length
		{
			[Token(Token = "0x600126B")]
			[Address(RVA = "0xF17E58", Offset = "0xF17E58", VA = "0xF17E58")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002B5")]
		public WrapMode postWrapMode
		{
			[Token(Token = "0x600126C")]
			[Address(RVA = "0xF20410", Offset = "0xF20410", VA = "0xF20410")]
			get
			{
				return default(WrapMode);
			}
			[Token(Token = "0x600126D")]
			[Address(RVA = "0xF1ABC8", Offset = "0xF1ABC8", VA = "0xF1ABC8")]
			set
			{
			}
		}

		[Token(Token = "0x170002B6")]
		public WrapMode preWrapMode
		{
			[Token(Token = "0x600126E")]
			[Address(RVA = "0xF2043C", Offset = "0xF2043C", VA = "0xF2043C")]
			get
			{
				return default(WrapMode);
			}
			[Token(Token = "0x600126F")]
			[Address(RVA = "0xF20468", Offset = "0xF20468", VA = "0xF20468")]
			set
			{
			}
		}

		[Token(Token = "0x6001270")]
		[Address(RVA = "0xF1A498", Offset = "0xF1A498", VA = "0xF1A498")]
		public int AddKey(float time, Vector3 position, Quaternion rotation, Vector3 scale, float inTangent, float outTangent)
		{
			return default(int);
		}

		[Token(Token = "0x6001271")]
		[Address(RVA = "0xF17A0C", Offset = "0xF17A0C", VA = "0xF17A0C")]
		public int AddKey(float time, Vector3 position, Quaternion rotation, float inTangent, float outTangent)
		{
			return default(int);
		}

		[Token(Token = "0x6001272")]
		[Address(RVA = "0xF2060C", Offset = "0xF2060C", VA = "0xF2060C")]
		public int AddKey(float time, Quaternion rotation, float inTangent, float outTangent)
		{
			return default(int);
		}

		[Token(Token = "0x6001273")]
		[Address(RVA = "0xF208D0", Offset = "0xF208D0", VA = "0xF208D0")]
		public int AddKey(float time, Vector3 position, float inTangent, float outTangent)
		{
			return default(int);
		}

		[Token(Token = "0x6001274")]
		[Address(RVA = "0xF20A60", Offset = "0xF20A60", VA = "0xF20A60")]
		public int AddKey(float time, Vector3 position, Quaternion rotation, Vector3 scale)
		{
			return default(int);
		}

		[Token(Token = "0x6001275")]
		[Address(RVA = "0xF20D08", Offset = "0xF20D08", VA = "0xF20D08")]
		public int AddKey(float time, Vector3 position, Quaternion rotation)
		{
			return default(int);
		}

		[Token(Token = "0x6001276")]
		[Address(RVA = "0xF20F2C", Offset = "0xF20F2C", VA = "0xF20F2C")]
		public int AddKey(float time, Quaternion rotation)
		{
			return default(int);
		}

		[Token(Token = "0x6001277")]
		[Address(RVA = "0xF210C0", Offset = "0xF210C0", VA = "0xF210C0")]
		public int AddKey(float time, Vector3 position)
		{
			return default(int);
		}

		[Token(Token = "0x6001278")]
		[Address(RVA = "0xF21160", Offset = "0xF21160", VA = "0xF21160")]
		public int AddKey(TransformKeyframe keyframe)
		{
			return default(int);
		}

		[Token(Token = "0x6001279")]
		[Address(RVA = "0xF14DEC", Offset = "0xF14DEC", VA = "0xF14DEC")]
		public Vector3 EvaluateScale(float time)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600127A")]
		[Address(RVA = "0xF14C50", Offset = "0xF14C50", VA = "0xF14C50")]
		public Vector3 EvaluatePosition(float time)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600127B")]
		[Address(RVA = "0xF14D0C", Offset = "0xF14D0C", VA = "0xF14D0C")]
		public Quaternion EvaluateRotation(float time)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600127C")]
		[Address(RVA = "0xF178B8", Offset = "0xF178B8", VA = "0xF178B8")]
		public TransformAnimationCurve()
		{
		}

		[Token(Token = "0x600127D")]
		[Address(RVA = "0xF205E4", Offset = "0xF205E4", VA = "0xF205E4")]
		private Vector3 CentreAngles(Vector3 euler)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600127E")]
		[Address(RVA = "0xF1B570", Offset = "0xF1B570", VA = "0xF1B570")]
		public void FixQuaternionContinuity()
		{
		}
	}
	[Token(Token = "0x2000261")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2EA0EC", Offset = "0x2EA0EC")]
	[DisallowMultipleComponent]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x2EA0EC", Offset = "0x2EA0EC")]
	public class LipSync : BlendSystemUser
	{
		[Token(Token = "0x2000587")]
		public delegate void ResetDelegate();

		[Token(Token = "0x2000588")]
		public enum AnimationTimingMode
		{
			[Token(Token = "0x4001F8D")]
			AudioPlayback,
			[Token(Token = "0x4001F8E")]
			CustomTimer,
			[Token(Token = "0x4001F8F")]
			FixedFrameRate
		}

		[Token(Token = "0x2000589")]
		public enum CurveGenerationMode
		{
			[Token(Token = "0x4001F91")]
			Tight,
			[Token(Token = "0x4001F92")]
			Loose
		}

		[Token(Token = "0x200058A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EAE40", Offset = "0x2EAE40")]
		private sealed class <StopAudioSource>d__91 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int <>1__state;

			[Token(Token = "0x4001F94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private object <>2__current;

			[Token(Token = "0x4001F95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float delay;

			[Token(Token = "0x4001F96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public LipSync <>4__this;

			[Token(Token = "0x170003D3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001E0E")]
				[Address(RVA = "0xF1C378", Offset = "0xF1C378", VA = "0xF1C378", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003D4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001E10")]
				[Address(RVA = "0xF1C408", Offset = "0xF1C408", VA = "0xF1C408", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001E0B")]
			[Address(RVA = "0xF1C050", Offset = "0xF1C050", VA = "0xF1C050")]
			[DebuggerHidden]
			public <StopAudioSource>d__91(int <>1__state)
			{
			}

			[Token(Token = "0x6001E0C")]
			[Address(RVA = "0xF1C26C", Offset = "0xF1C26C", VA = "0xF1C26C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001E0D")]
			[Address(RVA = "0xF1C270", Offset = "0xF1C270", VA = "0xF1C270", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001E0F")]
			[Address(RVA = "0xF1C380", Offset = "0xF1C380", VA = "0xF1C380", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AudioSource audioSource;

		[Token(Token = "0x4000DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool useBones;

		[Token(Token = "0x4000DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		public bool boneUpdateAnimation;

		[Token(Token = "0x4000DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public List<PhonemeShape> phonemes;

		[Token(Token = "0x4000DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		public List<EmotionShape> emotions;

		[Token(Token = "0x4000DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool playOnAwake;

		[Token(Token = "0x4000DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool loop;

		[Token(Token = "0x4000DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public LipSyncData defaultClip;

		[Token(Token = "0x4000DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float defaultDelay;

		[Token(Token = "0x4000DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool scaleAudioSpeed;

		[Token(Token = "0x4000DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private AnimationTimingMode m_animationTimingMode;

		[Token(Token = "0x4000DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int frameRate;

		[Token(Token = "0x4000DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float restTime;

		[Token(Token = "0x4000DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float restHoldTime;

		[Token(Token = "0x4000DB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public CurveGenerationMode phonemeCurveGenerationMode;

		[Token(Token = "0x4000DB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public CurveGenerationMode emotionCurveGenerationMode;

		[Token(Token = "0x4000DBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool keepEmotionWhenFinished;

		[Token(Token = "0x4000DBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F5870", Offset = "0x2F5870")]
		private bool <IsPlaying>k__BackingField;

		[Token(Token = "0x4000DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F5880", Offset = "0x2F5880")]
		private bool <IsPaused>k__BackingField;

		[Token(Token = "0x4000DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F5890", Offset = "0x2F5890")]
		private bool <IsStopping>k__BackingField;

		[Token(Token = "0x4000DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Animator gesturesAnimator;

		[Token(Token = "0x4000DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int gesturesLayer;

		[Token(Token = "0x4000DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public List<GestureInstance> gestures;

		[Token(Token = "0x4000DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEvent onFinishedPlaying;

		[Token(Token = "0x4000DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private AudioClip audioClip;

		[Token(Token = "0x4000DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool ready;

		[Token(Token = "0x4000DC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Dictionary<string, EmotionShape> emotionCache;

		[Token(Token = "0x4000DC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int currentFileID;

		[Token(Token = "0x4000DC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private LipSyncData lastClip;

		[Token(Token = "0x4000DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float emotionBlendTime;

		[Token(Token = "0x4000DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float emotionTimer;

		[Token(Token = "0x4000DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool changingEmotion;

		[Token(Token = "0x4000DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int customEmotion;

		[Token(Token = "0x4000DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float customTimer;

		[Token(Token = "0x4000DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private bool isDelaying;

		[Token(Token = "0x4000DCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x85")]
		private bool isPreviewingAudio;

		[Token(Token = "0x4000DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<PhonemeMarker> phonemeMarkers;

		[Token(Token = "0x4000DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private List<EmotionMarker> emotionMarkers;

		[Token(Token = "0x4000DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private List<GestureMarker> gestureMarkers;

		[Token(Token = "0x4000DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float fileLength;

		[Token(Token = "0x4000DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int nextGesture;

		[Token(Token = "0x4000DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private List<int> indexBlendables;

		[Token(Token = "0x4000DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public List<AnimationCurve> animCurves;

		[Token(Token = "0x4000DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private List<Transform> bones;

		[Token(Token = "0x4000DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private List<TransformAnimationCurve> boneCurves;

		[Token(Token = "0x4000DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private List<Vector3> boneNeutralPositions;

		[Token(Token = "0x4000DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private List<Vector3> boneNeutralScales;

		[Token(Token = "0x4000DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private List<Quaternion> boneNeutralRotations;

		[Token(Token = "0x4000DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public ResetDelegate reset;

		[Token(Token = "0x4000DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float lastUsedVersion;

		[Token(Token = "0x170002B7")]
		public AnimationTimingMode animationTimingMode
		{
			[Token(Token = "0x600127F")]
			[Address(RVA = "0xF12A98", Offset = "0xF12A98", VA = "0xF12A98")]
			get
			{
				return default(AnimationTimingMode);
			}
			[Token(Token = "0x6001280")]
			[Address(RVA = "0xF12AA0", Offset = "0xF12AA0", VA = "0xF12AA0")]
			set
			{
			}
		}

		[Token(Token = "0x170002B8")]
		public bool IsPlaying
		{
			[Token(Token = "0x6001281")]
			[Address(RVA = "0xF12AA8", Offset = "0xF12AA8", VA = "0xF12AA8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FC058", Offset = "0x2FC058")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001282")]
			[Address(RVA = "0xF12AB0", Offset = "0xF12AB0", VA = "0xF12AB0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FC068", Offset = "0x2FC068")]
			private set
			{
			}
		}

		[Token(Token = "0x170002B9")]
		public bool IsPaused
		{
			[Token(Token = "0x6001283")]
			[Address(RVA = "0xF12AB8", Offset = "0xF12AB8", VA = "0xF12AB8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FC078", Offset = "0x2FC078")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001284")]
			[Address(RVA = "0xF12AC0", Offset = "0xF12AC0", VA = "0xF12AC0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FC088", Offset = "0x2FC088")]
			private set
			{
			}
		}

		[Token(Token = "0x170002BA")]
		public bool IsStopping
		{
			[Token(Token = "0x6001285")]
			[Address(RVA = "0xF12AC8", Offset = "0xF12AC8", VA = "0xF12AC8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FC098", Offset = "0x2FC098")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001286")]
			[Address(RVA = "0xF12AD0", Offset = "0xF12AD0", VA = "0xF12AD0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FC0A8", Offset = "0x2FC0A8")]
			private set
			{
			}
		}

		[Token(Token = "0x170002BB")]
		public float CurrentTime
		{
			[Token(Token = "0x6001287")]
			[Address(RVA = "0xF12AD8", Offset = "0xF12AD8", VA = "0xF12AD8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001288")]
		[Address(RVA = "0xF12B34", Offset = "0xF12B34", VA = "0xF12B34")]
		private void Reset()
		{
		}

		[Token(Token = "0x6001289")]
		[Address(RVA = "0xF12D9C", Offset = "0xF12D9C", VA = "0xF12D9C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600128A")]
		[Address(RVA = "0xF13DB4", Offset = "0xF13DB4", VA = "0xF13DB4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600128B")]
		[Address(RVA = "0xF15658", Offset = "0xF15658", VA = "0xF15658")]
		public void SetEmotion(string emotion, float blendTime)
		{
		}

		[Token(Token = "0x600128C")]
		[Address(RVA = "0xF17E84", Offset = "0xF17E84", VA = "0xF17E84")]
		public void ResetEmotion(float blendTime)
		{
		}

		[Token(Token = "0x600128D")]
		[Address(RVA = "0xF13A68", Offset = "0xF13A68", VA = "0xF13A68")]
		public void Play(LipSyncData dataFile, float delay)
		{
		}

		[Token(Token = "0x600128E")]
		[Address(RVA = "0xF15650", Offset = "0xF15650", VA = "0xF15650")]
		public void Play(LipSyncData dataFile)
		{
		}

		[Token(Token = "0x600128F")]
		[Address(RVA = "0xF189EC", Offset = "0xF189EC", VA = "0xF189EC")]
		public void Play(TextAsset xmlFile, AudioClip clip, float delay)
		{
		}

		[Token(Token = "0x6001290")]
		[Address(RVA = "0xF19EE8", Offset = "0xF19EE8", VA = "0xF19EE8")]
		public void Play(TextAsset xmlFile, AudioClip clip)
		{
		}

		[Token(Token = "0x6001291")]
		[Address(RVA = "0xF19F04", Offset = "0xF19F04", VA = "0xF19F04")]
		public void PlayFromTime(LipSyncData dataFile, float delay, float time)
		{
		}

		[Token(Token = "0x6001292")]
		[Address(RVA = "0xF1A160", Offset = "0xF1A160", VA = "0xF1A160")]
		public void PlayFromTime(LipSyncData dataFile, float time)
		{
		}

		[Token(Token = "0x6001293")]
		[Address(RVA = "0xF1A180", Offset = "0xF1A180", VA = "0xF1A180")]
		public void PlayFromTime(TextAsset xmlFile, AudioClip clip, float delay, float time)
		{
		}

		[Token(Token = "0x6001294")]
		[Address(RVA = "0xF1A3AC", Offset = "0xF1A3AC", VA = "0xF1A3AC")]
		public void PlayFromTime(TextAsset xmlFile, AudioClip clip, float time)
		{
		}

		[Token(Token = "0x6001295")]
		[Address(RVA = "0xF1A3CC", Offset = "0xF1A3CC", VA = "0xF1A3CC")]
		public void Pause()
		{
		}

		[Token(Token = "0x6001296")]
		[Address(RVA = "0xF1A434", Offset = "0xF1A434", VA = "0xF1A434")]
		public void Resume()
		{
		}

		[Token(Token = "0x6001297")]
		[Address(RVA = "0xF14EA8", Offset = "0xF14EA8", VA = "0xF14EA8")]
		public void Stop(bool stopAudio)
		{
		}

		[Token(Token = "0x6001298")]
		[Address(RVA = "0xF122D4", Offset = "0xF122D4", VA = "0xF122D4")]
		public void PreviewAtTime(float time)
		{
		}

		[Token(Token = "0x6001299")]
		[Address(RVA = "0xF12700", Offset = "0xF12700", VA = "0xF12700")]
		public void PreviewAudioAtTime(float time, float length)
		{
		}

		[Token(Token = "0x600129A")]
		[Address(RVA = "0xF1AAF0", Offset = "0xF1AAF0", VA = "0xF1AAF0")]
		public void TempLoad(List<PhonemeMarker> pData, List<EmotionMarker> eData, AudioClip clip, float duration)
		{
		}

		[Token(Token = "0x600129B")]
		[Address(RVA = "0xF04890", Offset = "0xF04890", VA = "0xF04890")]
		public void TempLoad(PhonemeMarker[] pData, EmotionMarker[] eData, AudioClip clip, float duration)
		{
		}

		[Token(Token = "0x600129C")]
		[Address(RVA = "0xF04C74", Offset = "0xF04C74", VA = "0xF04C74")]
		public void ProcessData()
		{
		}

		[Token(Token = "0x600129D")]
		[Address(RVA = "0xF1BB30", Offset = "0xF1BB30", VA = "0xF1BB30")]
		public void ClearDataCache()
		{
		}

		[Token(Token = "0x600129E")]
		[Address(RVA = "0xF1BB3C", Offset = "0xF1BB3C", VA = "0xF1BB3C")]
		private void FixEmotionBlends(ref List<EmotionMarker> data)
		{
		}

		[Token(Token = "0x600129F")]
		[Address(RVA = "0xF1BC80", Offset = "0xF1BC80", VA = "0xF1BC80")]
		private void FixEmotionBlends(ref EmotionMarker[] data)
		{
		}

		[Token(Token = "0x60012A0")]
		[Address(RVA = "0xF18BA0", Offset = "0xF18BA0", VA = "0xF18BA0")]
		private void LoadXML(TextAsset xmlFile, AudioClip linkedClip)
		{
		}

		[Token(Token = "0x60012A1")]
		[Address(RVA = "0xF17EF0", Offset = "0xF17EF0", VA = "0xF17EF0")]
		private bool LoadData(LipSyncData dataFile)
		{
			return default(bool);
		}

		[Token(Token = "0x60012A2")]
		[Address(RVA = "0xF1AA3C", Offset = "0xF1AA3C", VA = "0xF1AA3C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2FC0B8", Offset = "0x2FC0B8")]
		private IEnumerator StopAudioSource(float delay)
		{
			return null;
		}

		[Token(Token = "0x60012A3")]
		[Address(RVA = "0xF14B40", Offset = "0xF14B40", VA = "0xF14B40")]
		private GestureInstance GetGesture(string name)
		{
			return null;
		}

		[Token(Token = "0x60012A4")]
		[Address(RVA = "0xF1C070", Offset = "0xF1C070", VA = "0xF1C070")]
		public LipSync()
		{
		}

		[Token(Token = "0x60012A5")]
		[Address(RVA = "0xF1C16C", Offset = "0xF1C16C", VA = "0xF1C16C")]
		public static int SortTime(PhonemeMarker a, PhonemeMarker b)
		{
			return default(int);
		}

		[Token(Token = "0x60012A6")]
		[Address(RVA = "0xF1C1C8", Offset = "0xF1C1C8", VA = "0xF1C1C8")]
		public static int SortTime(GestureMarker a, GestureMarker b)
		{
			return default(int);
		}

		[Token(Token = "0x60012A7")]
		[Address(RVA = "0xF1C224", Offset = "0xF1C224", VA = "0xF1C224")]
		private static int EmotionSort(EmotionMarker a, EmotionMarker b)
		{
			return default(int);
		}

		[Token(Token = "0x60012A8")]
		[Address(RVA = "0xF1BF18", Offset = "0xF1BF18", VA = "0xF1BF18")]
		public static string ReadXML(XmlDocument xml, string parentElement, string elementName)
		{
			return null;
		}
	}
	[Token(Token = "0x2000262")]
	public enum Phoneme
	{
		[Token(Token = "0x4000DDD")]
		AI,
		[Token(Token = "0x4000DDE")]
		E,
		[Token(Token = "0x4000DDF")]
		U,
		[Token(Token = "0x4000DE0")]
		O,
		[Token(Token = "0x4000DE1")]
		CDGKNRSThYZ,
		[Token(Token = "0x4000DE2")]
		FV,
		[Token(Token = "0x4000DE3")]
		L,
		[Token(Token = "0x4000DE4")]
		MBP,
		[Token(Token = "0x4000DE5")]
		WQ,
		[Token(Token = "0x4000DE6")]
		Rest
	}
}
namespace RogoDigital.Lipsync.Extensions.Timeline
{
	[Serializable]
	[Token(Token = "0x2000263")]
	public class LipSyncBehaviour : PlayableBehaviour
	{
		[Token(Token = "0x4000DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public LipSyncData clip;

		[Token(Token = "0x60012A9")]
		[Address(RVA = "0xF040E8", Offset = "0xF040E8", VA = "0xF040E8", Slot = "13")]
		public override void OnGraphStart(Playable playable)
		{
		}

		[Token(Token = "0x60012AA")]
		[Address(RVA = "0xF040EC", Offset = "0xF040EC", VA = "0xF040EC")]
		public LipSyncBehaviour()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000264")]
	public class LipSyncClip : PlayableAsset, ITimelineClipAsset
	{
		[Token(Token = "0x4000DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[HideInInspector]
		public LipSyncBehaviour template;

		[Token(Token = "0x4000DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LipSyncData clip;

		[Token(Token = "0x170002BC")]
		public ClipCaps clipCaps
		{
			[Token(Token = "0x60012AB")]
			[Address(RVA = "0xF040F4", Offset = "0xF040F4", VA = "0xF040F4", Slot = "9")]
			get
			{
				return default(ClipCaps);
			}
		}

		[Token(Token = "0x170002BD")]
		public override double duration
		{
			[Token(Token = "0x60012AC")]
			[Address(RVA = "0xF040FC", Offset = "0xF040FC", VA = "0xF040FC", Slot = "7")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x60012AD")]
		[Address(RVA = "0xF041BC", Offset = "0xF041BC", VA = "0xF041BC", Slot = "6")]
		public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
		{
			return default(Playable);
		}

		[Token(Token = "0x60012AE")]
		[Address(RVA = "0xF042DC", Offset = "0xF042DC", VA = "0xF042DC")]
		public LipSyncClip()
		{
		}
	}
	[Token(Token = "0x2000265")]
	public class LipSyncMixerBehaviour : PlayableBehaviour
	{
		[Token(Token = "0x4000DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private LipSyncData currentClip;

		[Token(Token = "0x60012AF")]
		[Address(RVA = "0xF04358", Offset = "0xF04358", VA = "0xF04358", Slot = "20")]
		public override void ProcessFrame(Playable playable, FrameData info, object playerData)
		{
		}

		[Token(Token = "0x60012B0")]
		[Address(RVA = "0xF12888", Offset = "0xF12888", VA = "0xF12888")]
		public LipSyncMixerBehaviour()
		{
		}
	}
	[Token(Token = "0x2000266")]
	[AttributeAttribute(Name = "TrackColorAttribute", RVA = "0x2EA170", Offset = "0x2EA170")]
	[AttributeAttribute(Name = "TrackClipTypeAttribute", RVA = "0x2EA170", Offset = "0x2EA170")]
	[AttributeAttribute(Name = "TrackBindingTypeAttribute", RVA = "0x2EA170", Offset = "0x2EA170")]
	public class LipSyncTrack : TrackAsset
	{
		[Token(Token = "0x60012B1")]
		[Address(RVA = "0xF12890", Offset = "0xF12890", VA = "0xF12890", Slot = "24")]
		public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
		{
			return default(Playable);
		}

		[Token(Token = "0x60012B2")]
		[Address(RVA = "0xF12964", Offset = "0xF12964", VA = "0xF12964", Slot = "28")]
		public override void GatherProperties(PlayableDirector director, IPropertyCollector driver)
		{
		}

		[Token(Token = "0x60012B3")]
		[Address(RVA = "0xF1296C", Offset = "0xF1296C", VA = "0xF1296C")]
		public LipSyncTrack()
		{
		}
	}
}
namespace BoundarySystem_Ext
{
	[Token(Token = "0x2000267")]
	internal static class Pvr_BoundaryAPI
	{
		[Token(Token = "0x4000DEB")]
		private const string LibFileName = "Pvr_UnitySDK";

		[PreserveSig]
		[Token(Token = "0x60012B4")]
		[Address(RVA = "0x61D6D0", Offset = "0x61D6D0", VA = "0x61D6D0")]
		public static extern void Pvr_StartSDKBoundary();

		[PreserveSig]
		[Token(Token = "0x60012B5")]
		[Address(RVA = "0x61D7D0", Offset = "0x61D7D0", VA = "0x61D7D0")]
		public static extern void Pvr_ShutdownSDKBoundary();

		[PreserveSig]
		[Token(Token = "0x60012B6")]
		[Address(RVA = "0x61D8D8", Offset = "0x61D8D8", VA = "0x61D8D8")]
		private static extern int Pvr_GetMainSensorStateExt(ref float x, ref float y, ref float z, ref float w, ref float px, ref float py, ref float pz, ref float vfov, ref float hfov, ref int viewNumber);

		[PreserveSig]
		[Token(Token = "0x60012B7")]
		[Address(RVA = "0x61DA38", Offset = "0x61DA38", VA = "0x61DA38")]
		private static extern IntPtr Pvr_GetCameraData_Ext();

		[PreserveSig]
		[Token(Token = "0x60012B8")]
		[Address(RVA = "0x61DB38", Offset = "0x61DB38", VA = "0x61DB38")]
		public static extern void Pvr_ResetVrModebyForce();

		[PreserveSig]
		[Token(Token = "0x60012B9")]
		[Address(RVA = "0x61DC40", Offset = "0x61DC40", VA = "0x61DC40")]
		private static extern bool Pvr_ResumeBoundaryForSTS();

		[PreserveSig]
		[Token(Token = "0x60012BA")]
		[Address(RVA = "0x61DD50", Offset = "0x61DD50", VA = "0x61DD50")]
		private static extern void Pvr_PauseBoundaryForSTS();

		[Token(Token = "0x60012BB")]
		[Address(RVA = "0x61DE54", Offset = "0x61DE54", VA = "0x61DE54")]
		public static int UPvr_GetMainSensorStateExt(ref float x, ref float y, ref float z, ref float w, ref float px, ref float py, ref float pz, ref float vfov, ref float hfov, ref int viewNumber)
		{
			return default(int);
		}

		[Token(Token = "0x60012BC")]
		[Address(RVA = "0x61DE98", Offset = "0x61DE98", VA = "0x61DE98")]
		public static IntPtr UPvr_GetCameraData_Ext()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60012BD")]
		[Address(RVA = "0x61DEE4", Offset = "0x61DEE4", VA = "0x61DEE4")]
		public static bool UPvr_ResumeBoundaryForSTS()
		{
			return default(bool);
		}

		[Token(Token = "0x60012BE")]
		[Address(RVA = "0x61DEE8", Offset = "0x61DEE8", VA = "0x61DEE8")]
		public static void UPvr_PauseBoundaryForSTS()
		{
		}

		[Token(Token = "0x60012BF")]
		public static IntPtr StructToIntPtr<T>(T info)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60012C0")]
		public static T IntPtrToStruct<T>(IntPtr info)
		{
			return (T)null;
		}
	}
	[Token(Token = "0x2000268")]
	internal static class Pvr_SafeAreaAlgoAPI
	{
		[Token(Token = "0x200058B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EAE50", Offset = "0x2EAE50")]
		public delegate void SafeAreaCallback(IntPtr lineCollectionPtr, IntPtr safeAreaRectPtr);

		[Token(Token = "0x200058C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EAE64", Offset = "0x2EAE64")]
		public delegate void SafeAreaCallbackShrink(IntPtr lineCollectionPtr, IntPtr safeAreaDetailRectPtr);

		[Token(Token = "0x200058D")]
		public struct GSAPoint3i
		{
			[Token(Token = "0x4001F97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int x;

			[Token(Token = "0x4001F98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int y;

			[Token(Token = "0x4001F99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int z;
		}

		[Token(Token = "0x200058E")]
		public struct GSALine
		{
			[Token(Token = "0x4001F9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IntPtr pointArray;

			[Token(Token = "0x4001F9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int pointCount;
		}

		[Token(Token = "0x200058F")]
		public struct GSALineCollection
		{
			[Token(Token = "0x4001F9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IntPtr lineArray;

			[Token(Token = "0x4001F9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int lineCount;
		}

		[Token(Token = "0x2000590")]
		public struct GSALegalData
		{
			[Token(Token = "0x4001F9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int overMaxRange;

			[Token(Token = "0x4001F9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int includeBigGrap;

			[Token(Token = "0x4001FA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int bigGapNum;

			[Token(Token = "0x4001FA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public int centerOut;

			[Token(Token = "0x4001FA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int removeNarrow;

			[Token(Token = "0x4001FA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int overMaxRange_more;

			[Token(Token = "0x4001FA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int validShrinkArea;
		}

		[Token(Token = "0x2000591")]
		public struct GSARect
		{
			[Token(Token = "0x4001FA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public GSAPoint3i leftup;

			[Token(Token = "0x4001FA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public GSAPoint3i leftdown;

			[Token(Token = "0x4001FA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public GSAPoint3i rightup;

			[Token(Token = "0x4001FA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public GSAPoint3i rightdown;

			[Token(Token = "0x4001FA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public GSAPoint3i center;

			[Token(Token = "0x4001FAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public uint width;

			[Token(Token = "0x4001FAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public uint height;

			[Token(Token = "0x4001FAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public int isLegal;

			[Token(Token = "0x4001FAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public GSALegalData legalData;
		}

		[Token(Token = "0x4000DEC")]
		private const string LibFileName = "SafetyArea";

		[PreserveSig]
		[Token(Token = "0x60012C1")]
		[Address(RVA = "0x61E2F0", Offset = "0x61E2F0", VA = "0x61E2F0")]
		private static extern int GSAInit(int width, int height);

		[PreserveSig]
		[Token(Token = "0x60012C2")]
		[Address(RVA = "0x61E3F0", Offset = "0x61E3F0", VA = "0x61E3F0")]
		private static extern int GSAShutDown();

		[PreserveSig]
		[Token(Token = "0x60012C3")]
		[Address(RVA = "0x61E4E0", Offset = "0x61E4E0", VA = "0x61E4E0")]
		private static extern int GSASetCallback(SafeAreaCallback cb);

		[PreserveSig]
		[Token(Token = "0x60012C4")]
		[Address(RVA = "0x61E5F0", Offset = "0x61E5F0", VA = "0x61E5F0")]
		private static extern int GSASetCallbackShrink(SafeAreaCallbackShrink cb);

		[PreserveSig]
		[Token(Token = "0x60012C5")]
		[Address(RVA = "0x61E710", Offset = "0x61E710", VA = "0x61E710")]
		private static extern int GSAUpDateData(IntPtr lineCollectionPtr);

		[PreserveSig]
		[Token(Token = "0x60012C6")]
		[Address(RVA = "0x61E810", Offset = "0x61E810", VA = "0x61E810")]
		private static extern int GSASetConfigFilePath(IntPtr configPath);

		[PreserveSig]
		[Token(Token = "0x60012C7")]
		[Address(RVA = "0x61E920", Offset = "0x61E920", VA = "0x61E920")]
		private static extern bool GSAGetClosedAreaUpdateFlag();

		[PreserveSig]
		[Token(Token = "0x60012C8")]
		[Address(RVA = "0x61EA00", Offset = "0x61EA00", VA = "0x61EA00")]
		private static extern int GSALoadSafetyArea(IntPtr lineCollectionPtr);

		[PreserveSig]
		[Token(Token = "0x60012C9")]
		[Address(RVA = "0x61EB08", Offset = "0x61EB08", VA = "0x61EB08")]
		private static extern double GSABoundaryDetector(ref GSAPoint3i pointPtr);

		[PreserveSig]
		[Token(Token = "0x60012CA")]
		[Address(RVA = "0x61EC18", Offset = "0x61EC18", VA = "0x61EC18")]
		private static extern int GSALoadSafetyArea2(IntPtr lineCollectionPtr, bool isPlayArea);

		[PreserveSig]
		[Token(Token = "0x60012CB")]
		[Address(RVA = "0x61ED30", Offset = "0x61ED30", VA = "0x61ED30")]
		private static extern double GSABoundaryDetector2(ref GSAPoint3i point, bool isPlayArea, ref GSAPoint3i closestPoint, ref GSAPoint3i normalDir);

		[Token(Token = "0x60012CC")]
		[Address(RVA = "0x61EE58", Offset = "0x61EE58", VA = "0x61EE58")]
		public static int Pvr_GSAInit(int width, int height)
		{
			return default(int);
		}

		[Token(Token = "0x60012CD")]
		[Address(RVA = "0x61EE5C", Offset = "0x61EE5C", VA = "0x61EE5C")]
		public static int Pvr_GSASetCallback(SafeAreaCallback cb)
		{
			return default(int);
		}

		[Token(Token = "0x60012CE")]
		[Address(RVA = "0x61EE60", Offset = "0x61EE60", VA = "0x61EE60")]
		public static int Pvr_GSASetCallbackShrink(SafeAreaCallbackShrink cb)
		{
			return default(int);
		}

		[Token(Token = "0x60012CF")]
		[Address(RVA = "0x61EE64", Offset = "0x61EE64", VA = "0x61EE64")]
		public static int Pvr_GSAUpDateData(IntPtr lineCollectionPtr)
		{
			return default(int);
		}

		[Token(Token = "0x60012D0")]
		[Address(RVA = "0x61EE68", Offset = "0x61EE68", VA = "0x61EE68")]
		public static bool Pvr_GSAGetClosedAreaUpdateFlag()
		{
			return default(bool);
		}

		[Token(Token = "0x60012D1")]
		[Address(RVA = "0x61EE6C", Offset = "0x61EE6C", VA = "0x61EE6C")]
		public static int Pvr_GSASetConfigFilePath(string configPath)
		{
			return default(int);
		}

		[Token(Token = "0x60012D2")]
		[Address(RVA = "0x61EF0C", Offset = "0x61EF0C", VA = "0x61EF0C")]
		public static int Pvr_GSALoadSafetyArea(IntPtr lineCollectionPtr)
		{
			return default(int);
		}

		[Token(Token = "0x60012D3")]
		[Address(RVA = "0x61EF10", Offset = "0x61EF10", VA = "0x61EF10")]
		public static double Pvr_GSABoundaryDetector(ref GSAPoint3i point)
		{
			return default(double);
		}

		[Token(Token = "0x60012D4")]
		[Address(RVA = "0x61EF14", Offset = "0x61EF14", VA = "0x61EF14")]
		public static int Pvr_GSAShutDown()
		{
			return default(int);
		}

		[Token(Token = "0x60012D5")]
		[Address(RVA = "0x61EF18", Offset = "0x61EF18", VA = "0x61EF18")]
		public static int Pvr_GSALoadSafetyArea2(IntPtr lineCollectionPtr, bool isPlayArea)
		{
			return default(int);
		}

		[Token(Token = "0x60012D6")]
		[Address(RVA = "0x61EF1C", Offset = "0x61EF1C", VA = "0x61EF1C")]
		public static double Pvr_GSABoundaryDetector2(ref GSAPoint3i point, bool isPlayArea, ref GSAPoint3i closestPoint, ref GSAPoint3i normalDir)
		{
			return default(double);
		}
	}
	[Token(Token = "0x2000269")]
	public class Pvr_BoundarySystem
	{
		[Token(Token = "0x4000DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Pvr_BoundarySystem instance;

		[Token(Token = "0x4000DEE")]
		public const int CameraImageWidth = 1280;

		[Token(Token = "0x4000DEF")]
		public const int CameraImageHeight = 400;

		[Token(Token = "0x4000DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr CameraFramePtr;

		[Token(Token = "0x170002BE")]
		public static Pvr_BoundarySystem Instance
		{
			[Token(Token = "0x60012D7")]
			[Address(RVA = "0x61DEEC", Offset = "0x61DEEC", VA = "0x61DEEC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60012D8")]
		[Address(RVA = "0x61DFE8", Offset = "0x61DFE8", VA = "0x61DFE8")]
		public void OpenBoundary()
		{
		}

		[Token(Token = "0x60012D9")]
		[Address(RVA = "0x61DFEC", Offset = "0x61DFEC", VA = "0x61DFEC")]
		public void CloseBoundary()
		{
		}

		[Token(Token = "0x60012DA")]
		[Address(RVA = "0x61DFF0", Offset = "0x61DFF0", VA = "0x61DFF0")]
		public void Reset6Dof()
		{
		}

		[Token(Token = "0x60012DB")]
		[Address(RVA = "0x61DFF4", Offset = "0x61DFF4", VA = "0x61DFF4")]
		public float[] GetControllerFixedPoseData(int hand)
		{
			return null;
		}

		[Token(Token = "0x60012DC")]
		[Address(RVA = "0x61DF88", Offset = "0x61DF88", VA = "0x61DF88")]
		public Pvr_BoundarySystem()
		{
		}
	}
	[Token(Token = "0x200026A")]
	public class Pvr_SafeAreaAlgoModule
	{
		[Token(Token = "0x2000592")]
		public struct ExtraInfo
		{
			[Token(Token = "0x4001FAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool overMaxRange;

			[Token(Token = "0x4001FAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
			public bool includeBigGap;

			[Token(Token = "0x4001FB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int bigGapNum;

			[Token(Token = "0x4001FB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public bool centerOut;

			[Token(Token = "0x4001FB2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
			public bool removeNarrow;

			[Token(Token = "0x4001FB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
			public bool overMaxRange_more;

			[Token(Token = "0x4001FB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public int validShrinkArea;
		}

		[Token(Token = "0x2000593")]
		public struct BoundaryPlayerArea
		{
			[Token(Token = "0x4001FB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 lowerleft;

			[Token(Token = "0x4001FB6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 upperleft;

			[Token(Token = "0x4001FB7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3 upperRight;

			[Token(Token = "0x4001FB8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public Vector3 lowerRight;

			[Token(Token = "0x4001FB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Vector3 center;

			[Token(Token = "0x4001FBA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public uint width;

			[Token(Token = "0x4001FBB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public uint height;

			[Token(Token = "0x4001FBC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public bool isLegal;

			[Token(Token = "0x4001FBD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public ExtraInfo extraInfo;
		}

		[Token(Token = "0x2000594")]
		public delegate void BoundarySystemCallback(BoundaryPlayerArea playAreaInfo, List<Vector3> boundaryPoints, List<List<Vector3>> unusedLines);

		[Token(Token = "0x2000595")]
		public delegate void BoundarySystemCallbackShrink(List<Vector3> rectPoints, List<Vector3> boundaryPoints, List<List<Vector3>> unusedLines);

		[Token(Token = "0x4000DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Pvr_SafeAreaAlgoModule instance;

		[Token(Token = "0x4000DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private BoundarySystemCallback boundarySystemCallback;

		[Token(Token = "0x4000DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private BoundarySystemCallbackShrink boundarySystemCallbackShrink;

		[Token(Token = "0x170002BF")]
		public static Pvr_SafeAreaAlgoModule Instance
		{
			[Token(Token = "0x60012DD")]
			[Address(RVA = "0x6208D8", Offset = "0x6208D8", VA = "0x6208D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60012DE")]
		[Address(RVA = "0x620980", Offset = "0x620980", VA = "0x620980")]
		public void RegisterCallBack(BoundarySystemCallback callback)
		{
		}

		[Token(Token = "0x60012DF")]
		[Address(RVA = "0x620988", Offset = "0x620988", VA = "0x620988")]
		public void RegisterCallBackShrink(BoundarySystemCallbackShrink callback)
		{
		}

		[Token(Token = "0x60012E0")]
		[Address(RVA = "0x620990", Offset = "0x620990", VA = "0x620990")]
		public bool Start()
		{
			return default(bool);
		}

		[Token(Token = "0x60012E1")]
		[Address(RVA = "0x620AFC", Offset = "0x620AFC", VA = "0x620AFC")]
		public bool CommitNewLineData(bool isFistLine, Vector3[] points)
		{
			return default(bool);
		}

		[Token(Token = "0x60012E2")]
		[Address(RVA = "0x620F7C", Offset = "0x620F7C", VA = "0x620F7C")]
		public bool Shutdown()
		{
			return default(bool);
		}

		[Token(Token = "0x60012E3")]
		[Address(RVA = "0x621028", Offset = "0x621028", VA = "0x621028")]
		public double QueryDistanceOfPoint(Vector3 point)
		{
			return default(double);
		}

		[Token(Token = "0x60012E4")]
		[Address(RVA = "0x621098", Offset = "0x621098", VA = "0x621098")]
		public double QueryDistanceOfPoint(Vector3 point, bool isPlayArea, ref Vector3 closestPoint, ref Vector3 normalDir)
		{
			return default(double);
		}

		[Token(Token = "0x60012E5")]
		[Address(RVA = "0x61F5CC", Offset = "0x61F5CC", VA = "0x61F5CC")]
		[AttributeAttribute(Name = "MonoPInvokeCallbackAttribute", RVA = "0x2FC130", Offset = "0x2FC130")]
		private static void _SafeAreaCallback(IntPtr lineCollectionPtr, IntPtr safeAreaRectPtr)
		{
		}

		[Token(Token = "0x60012E6")]
		[Address(RVA = "0x61FEEC", Offset = "0x61FEEC", VA = "0x61FEEC")]
		[AttributeAttribute(Name = "MonoPInvokeCallbackAttribute", RVA = "0x2FC1A8", Offset = "0x2FC1A8")]
		private static void _SafeAreaCallbackShrink(IntPtr lineCollectionPtr, IntPtr safeAreaDetailRectPtr)
		{
		}

		[Token(Token = "0x60012E7")]
		[Address(RVA = "0x620978", Offset = "0x620978", VA = "0x620978")]
		public Pvr_SafeAreaAlgoModule()
		{
		}
	}
}
namespace Pvr_UnitySDKAPI
{
	[Token(Token = "0x200026B")]
	public class PvrControllerKey
	{
		[Token(Token = "0x4000DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool State;

		[Token(Token = "0x4000DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		public bool PressedDown;

		[Token(Token = "0x4000DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
		public bool PressedUp;

		[Token(Token = "0x4000DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB")]
		public bool LongPressed;

		[Token(Token = "0x4000DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool Click;

		[Token(Token = "0x4000DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
		public bool Touch;

		[Token(Token = "0x4000DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
		public bool TouchDown;

		[Token(Token = "0x4000DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF")]
		public bool TouchUp;

		[Token(Token = "0x60012E8")]
		[Address(RVA = "0x104AD0C", Offset = "0x104AD0C", VA = "0x104AD0C")]
		public PvrControllerKey()
		{
		}
	}
	[Token(Token = "0x200026C")]
	public class ControllerHand
	{
		[Token(Token = "0x4000DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PvrControllerKey App;

		[Token(Token = "0x4000DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public PvrControllerKey Touch;

		[Token(Token = "0x4000DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PvrControllerKey Home;

		[Token(Token = "0x4000DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public PvrControllerKey VolumeDown;

		[Token(Token = "0x4000E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PvrControllerKey VolumeUp;

		[Token(Token = "0x4000E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public PvrControllerKey Trigger;

		[Token(Token = "0x4000E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PvrControllerKey X;

		[Token(Token = "0x4000E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public PvrControllerKey Y;

		[Token(Token = "0x4000E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PvrControllerKey A;

		[Token(Token = "0x4000E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public PvrControllerKey B;

		[Token(Token = "0x4000E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public PvrControllerKey Left;

		[Token(Token = "0x4000E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public PvrControllerKey Right;

		[Token(Token = "0x4000E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public PvrControllerKey Thumbrest;

		[Token(Token = "0x4000E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector2 TouchPadPosition;

		[Token(Token = "0x4000E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int TriggerNum;

		[Token(Token = "0x4000E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int GripValue;

		[Token(Token = "0x4000E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Quaternion Rotation;

		[Token(Token = "0x4000E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Vector3 Position;

		[Token(Token = "0x4000E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int Battery;

		[Token(Token = "0x4000E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public ControllerState ConnectState;

		[Token(Token = "0x4000E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public SwipeDirection SwipeDirection;

		[Token(Token = "0x4000E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public TouchPadClick TouchPadClick;

		[Token(Token = "0x4000E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool isShowBoundary;

		[Token(Token = "0x60012E9")]
		[Address(RVA = "0x104AAD4", Offset = "0x104AAD4", VA = "0x104AAD4")]
		public ControllerHand()
		{
		}
	}
	[Token(Token = "0x200026D")]
	public enum ControllerState
	{
		[Token(Token = "0x4000E14")]
		Error = -1,
		[Token(Token = "0x4000E15")]
		DisConnected,
		[Token(Token = "0x4000E16")]
		Connected
	}
	[Token(Token = "0x200026E")]
	public enum Pvr_KeyCode
	{
		[Token(Token = "0x4000E18")]
		None = 0,
		[Token(Token = "0x4000E19")]
		APP = 1,
		[Token(Token = "0x4000E1A")]
		TOUCHPAD = 2,
		[Token(Token = "0x4000E1B")]
		HOME = 4,
		[Token(Token = "0x4000E1C")]
		VOLUMEUP = 8,
		[Token(Token = "0x4000E1D")]
		VOLUMEDOWN = 16,
		[Token(Token = "0x4000E1E")]
		TRIGGER = 32,
		[Token(Token = "0x4000E1F")]
		A = 64,
		[Token(Token = "0x4000E20")]
		B = 128,
		[Token(Token = "0x4000E21")]
		X = 256,
		[Token(Token = "0x4000E22")]
		Y = 512,
		[Token(Token = "0x4000E23")]
		Left = 1024,
		[Token(Token = "0x4000E24")]
		Right = 2048,
		[Token(Token = "0x4000E25")]
		Thumbrest = 4096,
		[Token(Token = "0x4000E26")]
		Any = -1
	}
	[Token(Token = "0x200026F")]
	public enum SwipeDirection
	{
		[Token(Token = "0x4000E28")]
		No,
		[Token(Token = "0x4000E29")]
		SwipeUp,
		[Token(Token = "0x4000E2A")]
		SwipeDown,
		[Token(Token = "0x4000E2B")]
		SwipeLeft,
		[Token(Token = "0x4000E2C")]
		SwipeRight
	}
	[Token(Token = "0x2000270")]
	public enum TouchPadClick
	{
		[Token(Token = "0x4000E2E")]
		No,
		[Token(Token = "0x4000E2F")]
		ClickUp,
		[Token(Token = "0x4000E30")]
		ClickDown,
		[Token(Token = "0x4000E31")]
		ClickLeft,
		[Token(Token = "0x4000E32")]
		ClickRight
	}
	[Token(Token = "0x2000271")]
	public struct Controller
	{
		[Token(Token = "0x4000E33")]
		private const float JOYSTICK_THRESHOLD = 0.4f;

		[Token(Token = "0x4000E34")]
		public const string LibFileName = "Pvr_UnitySDK";

		[Token(Token = "0x60012EA")]
		[Address(RVA = "0x10415D0", Offset = "0x10415D0", VA = "0x10415D0")]
		public static Vector2 UPvr_GetTouchPadPosition(int hand)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60012EB")]
		[Address(RVA = "0x1041728", Offset = "0x1041728", VA = "0x1041728")]
		public static float UPvr_GetAxis1D(int hand, Pvr_KeyCode key)
		{
			return default(float);
		}

		[Token(Token = "0x60012EC")]
		[Address(RVA = "0x1041958", Offset = "0x1041958", VA = "0x1041958")]
		public static Vector2 UPvr_GetAxis2D(int hand)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60012ED")]
		[Address(RVA = "0x1041E38", Offset = "0x1041E38", VA = "0x1041E38")]
		public static bool UPvr_GetJoystickUp(int hand)
		{
			return default(bool);
		}

		[Token(Token = "0x60012EE")]
		[Address(RVA = "0x1042244", Offset = "0x1042244", VA = "0x1042244")]
		public static bool UPvr_GetJoystickDown(int hand)
		{
			return default(bool);
		}

		[Token(Token = "0x60012EF")]
		[Address(RVA = "0x1042658", Offset = "0x1042658", VA = "0x1042658")]
		public static bool UPvr_GetJoystickLeft(int hand)
		{
			return default(bool);
		}

		[Token(Token = "0x60012F0")]
		[Address(RVA = "0x1042A6C", Offset = "0x1042A6C", VA = "0x1042A6C")]
		public static bool UPvr_GetJoystickRight(int hand)
		{
			return default(bool);
		}

		[Token(Token = "0x60012F1")]
		[Address(RVA = "0x1042E78", Offset = "0x1042E78", VA = "0x1042E78")]
		public static ControllerState UPvr_GetControllerState(int hand)
		{
			return default(ControllerState);
		}

		[Token(Token = "0x60012F2")]
		[Address(RVA = "0x1042FD8", Offset = "0x1042FD8", VA = "0x1042FD8")]
		public static Quaternion UPvr_GetControllerQUA(int hand)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60012F3")]
		[Address(RVA = "0x1043144", Offset = "0x1043144", VA = "0x1043144")]
		public static Vector3 UPvr_GetControllerPOS(int hand)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60012F4")]
		[Address(RVA = "0x10432B0", Offset = "0x10432B0", VA = "0x10432B0")]
		public static Quaternion UPvr_GetControllerPredictRotation(int hand, float predictTime)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60012F5")]
		[Address(RVA = "0x1043438", Offset = "0x1043438", VA = "0x1043438")]
		public static Vector3 UPvr_GetControllerPredictPosition(int hand, float predictTime)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60012F6")]
		[Address(RVA = "0x10435B8", Offset = "0x10435B8", VA = "0x10435B8")]
		public static int UPvr_GetControllerTriggerValue(int hand)
		{
			return default(int);
		}

		[Token(Token = "0x60012F7")]
		[Address(RVA = "0x10436E4", Offset = "0x10436E4", VA = "0x10436E4")]
		public static int UPvr_GetControllerPower(int hand)
		{
			return default(int);
		}

		[Token(Token = "0x60012F8")]
		[Address(RVA = "0x1043810", Offset = "0x1043810", VA = "0x1043810")]
		public static int UPvr_GetControllerPowerByPercent(int hand)
		{
			return default(int);
		}

		[Token(Token = "0x60012F9")]
		[Address(RVA = "0x1043944", Offset = "0x1043944", VA = "0x1043944")]
		public static SwipeDirection UPvr_GetSwipeDirection(int hand)
		{
			return default(SwipeDirection);
		}

		[Token(Token = "0x60012FA")]
		[Address(RVA = "0x1043A70", Offset = "0x1043A70", VA = "0x1043A70")]
		public static TouchPadClick UPvr_GetTouchPadClick(int hand)
		{
			return default(TouchPadClick);
		}

		[Token(Token = "0x60012FB")]
		[Address(RVA = "0x1043B9C", Offset = "0x1043B9C", VA = "0x1043B9C")]
		public static bool UPvr_GetKey(int hand, Pvr_KeyCode key)
		{
			return default(bool);
		}

		[Token(Token = "0x60012FC")]
		[Address(RVA = "0x104464C", Offset = "0x104464C", VA = "0x104464C")]
		public static bool UPvr_GetKeyDown(int hand, Pvr_KeyCode key)
		{
			return default(bool);
		}

		[Token(Token = "0x60012FD")]
		[Address(RVA = "0x10450FC", Offset = "0x10450FC", VA = "0x10450FC")]
		public static bool UPvr_GetKeyUp(int hand, Pvr_KeyCode key)
		{
			return default(bool);
		}

		[Token(Token = "0x60012FE")]
		[Address(RVA = "0x1045BAC", Offset = "0x1045BAC", VA = "0x1045BAC")]
		public static bool UPvr_GetTouch(int hand, Pvr_KeyCode key)
		{
			return default(bool);
		}

		[Token(Token = "0x60012FF")]
		[Address(RVA = "0x10461CC", Offset = "0x10461CC", VA = "0x10461CC")]
		public static bool UPvr_GetTouchDown(int hand, Pvr_KeyCode key)
		{
			return default(bool);
		}

		[Token(Token = "0x6001300")]
		[Address(RVA = "0x10467EC", Offset = "0x10467EC", VA = "0x10467EC")]
		public static bool UPvr_GetTouchUp(int hand, Pvr_KeyCode key)
		{
			return default(bool);
		}

		[Token(Token = "0x6001301")]
		[Address(RVA = "0x1046E0C", Offset = "0x1046E0C", VA = "0x1046E0C")]
		public static bool UPvr_GetKeyClick(int hand, Pvr_KeyCode key)
		{
			return default(bool);
		}

		[Token(Token = "0x6001302")]
		[Address(RVA = "0x10478BC", Offset = "0x10478BC", VA = "0x10478BC")]
		public static bool UPvr_GetKeyLongPressed(int hand, Pvr_KeyCode key)
		{
			return default(bool);
		}

		[Token(Token = "0x6001303")]
		[Address(RVA = "0x104836C", Offset = "0x104836C", VA = "0x104836C")]
		public static bool UPvr_IsTouching(int hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6001304")]
		[Address(RVA = "0x1048658", Offset = "0x1048658", VA = "0x1048658")]
		public static void UPvr_SetHandNess(Pvr_Controller.UserHandNess hand)
		{
		}

		[Token(Token = "0x6001305")]
		[Address(RVA = "0x1048770", Offset = "0x1048770", VA = "0x1048770")]
		public static Pvr_Controller.UserHandNess UPvr_GetHandNess()
		{
			return default(Pvr_Controller.UserHandNess);
		}

		[Token(Token = "0x6001306")]
		[Address(RVA = "0x1048810", Offset = "0x1048810", VA = "0x1048810")]
		public static int UPvr_GetPreferenceDevice()
		{
			return default(int);
		}

		[Token(Token = "0x6001307")]
		[Address(RVA = "0x1048928", Offset = "0x1048928", VA = "0x1048928")]
		public static bool UPvr_IsEnbleTrigger()
		{
			return default(bool);
		}

		[Token(Token = "0x6001308")]
		[Address(RVA = "0x10489D0", Offset = "0x10489D0", VA = "0x10489D0")]
		public static int UPvr_GetDeviceType()
		{
			return default(int);
		}

		[Token(Token = "0x6001309")]
		[Address(RVA = "0x1048A70", Offset = "0x1048A70", VA = "0x1048A70")]
		public static int UPvr_GetMainHandNess()
		{
			return default(int);
		}

		[Token(Token = "0x600130A")]
		[Address(RVA = "0x1048B10", Offset = "0x1048B10", VA = "0x1048B10")]
		public static void UPvr_SetMainHandNess(int hand)
		{
		}

		[Token(Token = "0x600130B")]
		[Address(RVA = "0x1048BC0", Offset = "0x1048BC0", VA = "0x1048BC0")]
		public static int UPvr_GetControllerAbility(int hand)
		{
			return default(int);
		}

		[Token(Token = "0x600130C")]
		[Address(RVA = "0x1048C70", Offset = "0x1048C70", VA = "0x1048C70")]
		public static void UPvr_VibrateNeo2Controller(float strength, int time, int hand)
		{
		}

		[Token(Token = "0x600130D")]
		[Address(RVA = "0x1048D3C", Offset = "0x1048D3C", VA = "0x1048D3C")]
		public static void UPvr_VibrateController(float strength, int time, int hand)
		{
		}

		[Token(Token = "0x600130E")]
		[Address(RVA = "0x1048E08", Offset = "0x1048E08", VA = "0x1048E08")]
		public static int UPvr_GetControllerBindingState(int hand)
		{
			return default(int);
		}

		[Token(Token = "0x600130F")]
		[Address(RVA = "0x1048EB8", Offset = "0x1048EB8", VA = "0x1048EB8")]
		public static Vector3 UPvr_GetVelocity(int hand)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001310")]
		[Address(RVA = "0x1048F70", Offset = "0x1048F70", VA = "0x1048F70")]
		public static Vector3 UPvr_GetAngularVelocity(int hand)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001311")]
		[Address(RVA = "0x1049028", Offset = "0x1049028", VA = "0x1049028")]
		public static Vector3 UPvr_GetAcceleration(int hand)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001312")]
		[Address(RVA = "0x10490E0", Offset = "0x10490E0", VA = "0x10490E0")]
		public static Vector3 UPvr_GetAngularAcceleration(int hand)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001313")]
		[Address(RVA = "0x1049198", Offset = "0x1049198", VA = "0x1049198")]
		public static void UPvr_ScanController()
		{
		}

		[Token(Token = "0x6001314")]
		[Address(RVA = "0x1049240", Offset = "0x1049240", VA = "0x1049240")]
		public static void UPvr_StopScanController()
		{
		}

		[Token(Token = "0x6001315")]
		[Address(RVA = "0x10492E8", Offset = "0x10492E8", VA = "0x10492E8")]
		public static void UPvr_ConnectController(string mac)
		{
		}

		[Token(Token = "0x6001316")]
		[Address(RVA = "0x1049410", Offset = "0x1049410", VA = "0x1049410")]
		public static void UPvr_DisConnectController()
		{
		}

		[Token(Token = "0x6001317")]
		[Address(RVA = "0x10494B8", Offset = "0x10494B8", VA = "0x10494B8")]
		public static void UPvr_ResetController(int hand)
		{
		}

		[Token(Token = "0x6001318")]
		[Address(RVA = "0x1049568", Offset = "0x1049568", VA = "0x1049568")]
		public static string UPvr_GetControllerVersion()
		{
			return null;
		}

		[Token(Token = "0x6001319")]
		[Address(RVA = "0x1049610", Offset = "0x1049610", VA = "0x1049610")]
		public static void UPvr_GetDeviceVersion(int deviceType)
		{
		}

		[Token(Token = "0x600131A")]
		[Address(RVA = "0x10496C0", Offset = "0x10496C0", VA = "0x10496C0")]
		public static void UPvr_GetControllerSnCode(int controllerSerialNum)
		{
		}

		[Token(Token = "0x600131B")]
		[Address(RVA = "0x1049770", Offset = "0x1049770", VA = "0x1049770")]
		public static void UPvr_SetControllerUnbind(int controllerSerialNum)
		{
		}

		[Token(Token = "0x600131C")]
		[Address(RVA = "0x1049820", Offset = "0x1049820", VA = "0x1049820")]
		public static void UPvr_SetStationRestart()
		{
		}

		[Token(Token = "0x600131D")]
		[Address(RVA = "0x10498C8", Offset = "0x10498C8", VA = "0x10498C8")]
		public static void UPvr_StartStationOtaUpdate()
		{
		}

		[Token(Token = "0x600131E")]
		[Address(RVA = "0x1049970", Offset = "0x1049970", VA = "0x1049970")]
		public static void UPvr_StartControllerOtaUpdate(int mode, int controllerSerialNum)
		{
		}

		[Token(Token = "0x600131F")]
		[Address(RVA = "0x1049A28", Offset = "0x1049A28", VA = "0x1049A28")]
		public static void UPvr_EnterPairMode(int controllerSerialNum)
		{
		}

		[Token(Token = "0x6001320")]
		[Address(RVA = "0x1049AD8", Offset = "0x1049AD8", VA = "0x1049AD8")]
		public static void UPvr_SetControllerShutdown(int controllerSerialNum)
		{
		}

		[Token(Token = "0x6001321")]
		[Address(RVA = "0x1049B88", Offset = "0x1049B88", VA = "0x1049B88")]
		public static int UPvr_GetStationPairState()
		{
			return default(int);
		}

		[Token(Token = "0x6001322")]
		[Address(RVA = "0x1049C30", Offset = "0x1049C30", VA = "0x1049C30")]
		public static int UPvr_GetStationOtaUpdateProgress()
		{
			return default(int);
		}

		[Token(Token = "0x6001323")]
		[Address(RVA = "0x1049CD8", Offset = "0x1049CD8", VA = "0x1049CD8")]
		public static int UPvr_GetControllerOtaUpdateProgress()
		{
			return default(int);
		}

		[Token(Token = "0x6001324")]
		[Address(RVA = "0x1049D80", Offset = "0x1049D80", VA = "0x1049D80")]
		public static void UPvr_GetControllerVersionAndSN(int controllerSerialNum)
		{
		}

		[Token(Token = "0x6001325")]
		[Address(RVA = "0x1049E30", Offset = "0x1049E30", VA = "0x1049E30")]
		public static void UPvr_GetControllerUniqueID()
		{
		}

		[Token(Token = "0x6001326")]
		[Address(RVA = "0x3BEF08", Offset = "0x3BEF08", VA = "0x3BEF08")]
		public void UPvr_InterruptStationPairMode()
		{
		}

		[Token(Token = "0x6001327")]
		[Address(RVA = "0x3BEF0C", Offset = "0x3BEF0C", VA = "0x3BEF0C")]
		public void UPvr_StartCV2PairingMode(int deviceType)
		{
		}

		[Token(Token = "0x6001328")]
		[Address(RVA = "0x3BEF10", Offset = "0x3BEF10", VA = "0x3BEF10")]
		public void UPvr_StopCV2PairingMode(int deviceType)
		{
		}

		[Token(Token = "0x6001329")]
		[Address(RVA = "0x104A0E0", Offset = "0x104A0E0", VA = "0x104A0E0")]
		public static void UPvr_SetArmModelParameters(int hand, int gazeType, float elbowHeight, float elbowDepth, float pointerTiltAngle)
		{
		}

		[Token(Token = "0x600132A")]
		[Address(RVA = "0x104A238", Offset = "0x104A238", VA = "0x104A238")]
		public static void UPvr_CalcArmModelParameters(float[] headOrientation, float[] controllerOrientation, float[] controllerPrimary)
		{
		}

		[Token(Token = "0x600132B")]
		[Address(RVA = "0x104A344", Offset = "0x104A344", VA = "0x104A344")]
		public static void UPvr_GetPointerPose(float[] rotation, float[] position)
		{
		}

		[Token(Token = "0x600132C")]
		[Address(RVA = "0x104A46C", Offset = "0x104A46C", VA = "0x104A46C")]
		public static void UPvr_GetElbowPose(float[] rotation, float[] position)
		{
		}

		[Token(Token = "0x600132D")]
		[Address(RVA = "0x104A590", Offset = "0x104A590", VA = "0x104A590")]
		public static void UPvr_GetWristPose(float[] rotation, float[] position)
		{
		}

		[Token(Token = "0x600132E")]
		[Address(RVA = "0x104A6B8", Offset = "0x104A6B8", VA = "0x104A6B8")]
		public static void UPvr_GetShoulderPose(float[] rotation, float[] position)
		{
		}

		[Token(Token = "0x600132F")]
		[Address(RVA = "0x104A7E4", Offset = "0x104A7E4", VA = "0x104A7E4")]
		public static void UPvr_IsEnbleHomeKey(bool state)
		{
		}

		[Token(Token = "0x6001330")]
		[Address(RVA = "0x104A894", Offset = "0x104A894", VA = "0x104A894")]
		public static void UPvr_SwitchHomeKey(bool state)
		{
		}

		[Token(Token = "0x6001331")]
		[Address(RVA = "0x104A944", Offset = "0x104A944", VA = "0x104A944")]
		public static int UPvr_GetControllerSensorStatus(int id)
		{
			return default(int);
		}

		[Token(Token = "0x6001332")]
		[Address(RVA = "0x104A9F4", Offset = "0x104A9F4", VA = "0x104A9F4")]
		public static void UPvr_SetControllerOriginOffset(int hand, Vector3 offset)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6001333")]
		[Address(RVA = "0x104A240", Offset = "0x104A240", VA = "0x104A240")]
		private static extern void Pvr_CalcArmModelParameters(float[] headOrientation, float[] controllerOrientation, float[] gyro);

		[PreserveSig]
		[Token(Token = "0x6001334")]
		[Address(RVA = "0x104A348", Offset = "0x104A348", VA = "0x104A348")]
		private static extern void Pvr_GetPointerPose(float[] rotation, float[] position);

		[PreserveSig]
		[Token(Token = "0x6001335")]
		[Address(RVA = "0x104A470", Offset = "0x104A470", VA = "0x104A470")]
		private static extern void Pvr_GetElbowPose(float[] rotation, float[] position);

		[PreserveSig]
		[Token(Token = "0x6001336")]
		[Address(RVA = "0x104A598", Offset = "0x104A598", VA = "0x104A598")]
		private static extern void Pvr_GetWristPose(float[] rotation, float[] position);

		[PreserveSig]
		[Token(Token = "0x6001337")]
		[Address(RVA = "0x104A6C0", Offset = "0x104A6C0", VA = "0x104A6C0")]
		private static extern void Pvr_GetShoulderPose(float[] rotation, float[] position);

		[PreserveSig]
		[Token(Token = "0x6001338")]
		[Address(RVA = "0x104A100", Offset = "0x104A100", VA = "0x104A100")]
		private static extern void Pvr_SetArmModelParameters(int hand, int gazeType, float elbowHeight, float elbowDepth, float pointerTiltAngle);
	}
	[Token(Token = "0x2000272")]
	public enum ControllerVariety
	{
		[Token(Token = "0x4000E36")]
		Controller0,
		[Token(Token = "0x4000E37")]
		Controller1
	}
	[Token(Token = "0x2000273")]
	public enum ControllerDevice
	{
		[Token(Token = "0x4000E39")]
		Goblin,
		[Token(Token = "0x4000E3A")]
		Neo,
		[Token(Token = "0x4000E3B")]
		G2,
		[Token(Token = "0x4000E3C")]
		Neo2,
		[Token(Token = "0x4000E3D")]
		Neo3,
		[Token(Token = "0x4000E3E")]
		NewController
	}
	[Token(Token = "0x2000274")]
	public enum PBS_SystemInfoEnum
	{
		[Token(Token = "0x4000E40")]
		ELECTRIC_QUANTITY,
		[Token(Token = "0x4000E41")]
		PUI_VERSION,
		[Token(Token = "0x4000E42")]
		EQUIPMENT_MODEL,
		[Token(Token = "0x4000E43")]
		EQUIPMENT_SN,
		[Token(Token = "0x4000E44")]
		CUSTOMER_SN,
		[Token(Token = "0x4000E45")]
		INTERNAL_STORAGE_SPACE_OF_THE_DEVICE,
		[Token(Token = "0x4000E46")]
		DEVICE_BLUETOOTH_STATUS,
		[Token(Token = "0x4000E47")]
		BLUETOOTH_NAME_CONNECTED,
		[Token(Token = "0x4000E48")]
		BLUETOOTH_MAC_ADDRESS,
		[Token(Token = "0x4000E49")]
		DEVICE_WIFI_STATUS,
		[Token(Token = "0x4000E4A")]
		WIFI_NAME_CONNECTED,
		[Token(Token = "0x4000E4B")]
		WLAN_MAC_ADDRESS,
		[Token(Token = "0x4000E4C")]
		DEVICE_IP
	}
	[Token(Token = "0x2000275")]
	public enum PBS_DeviceControlEnum
	{
		[Token(Token = "0x4000E4E")]
		DEVICE_CONTROL_REBOOT,
		[Token(Token = "0x4000E4F")]
		DEVICE_CONTROL_SHUTDOWN
	}
	[Token(Token = "0x2000276")]
	public enum PBS_PackageControlEnum
	{
		[Token(Token = "0x4000E51")]
		PACKAGE_SILENCE_INSTALL,
		[Token(Token = "0x4000E52")]
		PACKAGE_SILENCE_UNINSTALL
	}
	[Token(Token = "0x2000277")]
	public enum PBS_SwitchEnum
	{
		[Token(Token = "0x4000E54")]
		S_ON,
		[Token(Token = "0x4000E55")]
		S_OFF
	}
	[Token(Token = "0x2000278")]
	public enum PBS_HomeEventEnum
	{
		[Token(Token = "0x4000E57")]
		SINGLE_CLICK,
		[Token(Token = "0x4000E58")]
		DOUBLE_CLICK,
		[Token(Token = "0x4000E59")]
		LONG_PRESS
	}
	[Token(Token = "0x2000279")]
	public enum PBS_HomeFunctionEnum
	{
		[Token(Token = "0x4000E5B")]
		VALUE_HOME_GO_TO_SETTING,
		[Token(Token = "0x4000E5C")]
		VALUE_HOME_BACK,
		[Token(Token = "0x4000E5D")]
		VALUE_HOME_RECENTER,
		[Token(Token = "0x4000E5E")]
		VALUE_HOME_OPEN_APP,
		[Token(Token = "0x4000E5F")]
		VALUE_HOME_DISABLE,
		[Token(Token = "0x4000E60")]
		VALUE_HOME_GO_TO_HOME,
		[Token(Token = "0x4000E61")]
		VALUE_HOME_SEND_BROADCAST,
		[Token(Token = "0x4000E62")]
		VALUE_HOME_CLEAN_MEMORY
	}
	[Token(Token = "0x200027A")]
	public enum PBS_ScreenOffDelayTimeEnum
	{
		[Token(Token = "0x4000E64")]
		THREE = 3,
		[Token(Token = "0x4000E65")]
		TEN = 10,
		[Token(Token = "0x4000E66")]
		THIRTY = 30,
		[Token(Token = "0x4000E67")]
		SIXTY = 60,
		[Token(Token = "0x4000E68")]
		THREE_HUNDRED = 300,
		[Token(Token = "0x4000E69")]
		SIX_HUNDRED = 600,
		[Token(Token = "0x4000E6A")]
		NEVER = -1
	}
	[Token(Token = "0x200027B")]
	public enum PBS_SleepDelayTimeEnum
	{
		[Token(Token = "0x4000E6C")]
		FIFTEEN = 15,
		[Token(Token = "0x4000E6D")]
		THIRTY = 30,
		[Token(Token = "0x4000E6E")]
		SIXTY = 60,
		[Token(Token = "0x4000E6F")]
		THREE_HUNDRED = 300,
		[Token(Token = "0x4000E70")]
		SIX_HUNDRED = 600,
		[Token(Token = "0x4000E71")]
		ONE_THOUSAND_AND_EIGHT_HUNDRED = 1800,
		[Token(Token = "0x4000E72")]
		NEVER = -1
	}
	[Token(Token = "0x200027C")]
	public enum PBS_SystemFunctionSwitchEnum
	{
		[Token(Token = "0x4000E74")]
		SFS_USB,
		[Token(Token = "0x4000E75")]
		SFS_AUTOSLEEP,
		[Token(Token = "0x4000E76")]
		SFS_SCREENON_CHARGING,
		[Token(Token = "0x4000E77")]
		SFS_OTG_CHARGING,
		[Token(Token = "0x4000E78")]
		SFS_RETURN_MENU_IN_2DMODE,
		[Token(Token = "0x4000E79")]
		SFS_COMBINATION_KEY,
		[Token(Token = "0x4000E7A")]
		SFS_CALIBRATION_WITH_POWER_ON,
		[Token(Token = "0x4000E7B")]
		SFS_SYSTEM_UPDATE,
		[Token(Token = "0x4000E7C")]
		SFS_CAST_SERVICE,
		[Token(Token = "0x4000E7D")]
		SFS_EYE_PROTECTION,
		[Token(Token = "0x4000E7E")]
		SFS_SECURITY_ZONE_PERMANENTLY,
		[Token(Token = "0x4000E7F")]
		SFS_GLOBAL_CALIBRATION,
		[Token(Token = "0x4000E80")]
		SFS_Auto_Calibration,
		[Token(Token = "0x4000E81")]
		SFS_USB_BOOT,
		[Token(Token = "0x4000E82")]
		SFS_VOLUME_UI,
		[Token(Token = "0x4000E83")]
		SFS_CONTROLLER_UI,
		[Token(Token = "0x4000E84")]
		SFS_NAVGATION_SWITCH
	}
	[Token(Token = "0x200027D")]
	public enum PBS_USBConfigModeEnum
	{
		[Token(Token = "0x4000E86")]
		MTP,
		[Token(Token = "0x4000E87")]
		CHARGE
	}
	[Token(Token = "0x200027E")]
	public struct ToBService
	{
		[Token(Token = "0x4000E88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Action<bool> BoolCallback;

		[Token(Token = "0x4000E89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static Action<int> IntCallback;

		[Token(Token = "0x4000E8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Action<long> LongCallback;

		[Token(Token = "0x4000E8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static Action<string> StringCallback;

		[Token(Token = "0x4000E8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static AndroidJavaClass unityPlayer;

		[Token(Token = "0x4000E8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static AndroidJavaObject currentActivity;

		[Token(Token = "0x4000E8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static AndroidJavaObject tobHelper;

		[Token(Token = "0x4000E8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private static AndroidJavaClass tobHelperClass;

		[Token(Token = "0x6001339")]
		[Address(RVA = "0x10587B4", Offset = "0x10587B4", VA = "0x10587B4")]
		public static void UPvr_InitToBService()
		{
		}

		[Token(Token = "0x600133A")]
		[Address(RVA = "0x10589E4", Offset = "0x10589E4", VA = "0x10589E4")]
		public static void UPvr_SetUnityObjectName(string obj)
		{
		}

		[Token(Token = "0x600133B")]
		[Address(RVA = "0x1058AE0", Offset = "0x1058AE0", VA = "0x1058AE0")]
		public static void UPvr_BindToBService()
		{
		}

		[Token(Token = "0x600133C")]
		[Address(RVA = "0x1058BE4", Offset = "0x1058BE4", VA = "0x1058BE4")]
		public static void UPvr_UnBindToBService()
		{
		}

		[Token(Token = "0x600133D")]
		[Address(RVA = "0x1058CE8", Offset = "0x1058CE8", VA = "0x1058CE8")]
		private static AndroidJavaObject GetEnumType(Enum enumType)
		{
			return null;
		}

		[Token(Token = "0x600133E")]
		[Address(RVA = "0x1058E50", Offset = "0x1058E50", VA = "0x1058E50")]
		public static string UPvr_StateGetDeviceInfo(PBS_SystemInfoEnum type)
		{
			return null;
		}

		[Token(Token = "0x600133F")]
		[Address(RVA = "0x105901C", Offset = "0x105901C", VA = "0x105901C")]
		public static void UPvr_ControlSetDeviceAction(PBS_DeviceControlEnum deviceControl, Action<int> callback)
		{
		}

		[Token(Token = "0x6001340")]
		[Address(RVA = "0x1059154", Offset = "0x1059154", VA = "0x1059154")]
		public static void UPvr_ControlAPPManger(PBS_PackageControlEnum packageControl, string path, Action<int> callback)
		{
		}

		[Token(Token = "0x6001341")]
		[Address(RVA = "0x1059354", Offset = "0x1059354", VA = "0x1059354")]
		public static void UPvr_ControlSetAutoConnectWIFI(string ssid, string pwd, Action<bool> callback)
		{
		}

		[Token(Token = "0x6001342")]
		[Address(RVA = "0x1059540", Offset = "0x1059540", VA = "0x1059540")]
		public static void UPvr_ControlClearAutoConnectWIFI(Action<bool> callback)
		{
		}

		[Token(Token = "0x6001343")]
		[Address(RVA = "0x10595D8", Offset = "0x10595D8", VA = "0x10595D8")]
		public static void UPvr_PropertySetHomeKey(PBS_HomeEventEnum eventEnum, PBS_HomeFunctionEnum function, Action<bool> callback)
		{
		}

		[Token(Token = "0x6001344")]
		[Address(RVA = "0x1059798", Offset = "0x1059798", VA = "0x1059798")]
		public static void UPvr_PropertySetHomeKeyAll(PBS_HomeEventEnum eventEnum, PBS_HomeFunctionEnum function, int timesetup, string pkg, string className, Action<bool> callback)
		{
		}

		[Token(Token = "0x6001345")]
		[Address(RVA = "0x1059A74", Offset = "0x1059A74", VA = "0x1059A74")]
		public static void UPvr_PropertyDisablePowerKey(bool isSingleTap, bool enable, Action<int> callback)
		{
		}

		[Token(Token = "0x6001346")]
		[Address(RVA = "0x1059C1C", Offset = "0x1059C1C", VA = "0x1059C1C")]
		public static void UPvr_PropertySetScreenOffDelay(PBS_ScreenOffDelayTimeEnum timeEnum, Action<int> callback)
		{
		}

		[Token(Token = "0x6001347")]
		[Address(RVA = "0x1059D54", Offset = "0x1059D54", VA = "0x1059D54")]
		public static void UPvr_PropertySetSleepDelay(PBS_SleepDelayTimeEnum timeEnum)
		{
		}

		[Token(Token = "0x6001348")]
		[Address(RVA = "0x1059E7C", Offset = "0x1059E7C", VA = "0x1059E7C")]
		public static void UPvr_SwitchSystemFunction(PBS_SystemFunctionSwitchEnum systemFunction, PBS_SwitchEnum switchEnum)
		{
		}

		[Token(Token = "0x6001349")]
		[Address(RVA = "0x105A090", Offset = "0x105A090", VA = "0x105A090")]
		public static void UPvr_SwitchSetUsbConfigurationOption(PBS_USBConfigModeEnum uSBConfigModeEnum)
		{
		}

		[Token(Token = "0x600134A")]
		[Address(RVA = "0x105A22C", Offset = "0x105A22C", VA = "0x105A22C")]
		public static void UPvr_ScreenOn()
		{
		}

		[Token(Token = "0x600134B")]
		[Address(RVA = "0x105A34C", Offset = "0x105A34C", VA = "0x105A34C")]
		public static void UPvr_ScreenOff()
		{
		}

		[Token(Token = "0x600134C")]
		[Address(RVA = "0x105A46C", Offset = "0x105A46C", VA = "0x105A46C")]
		public static void UPvr_AcquireWakeLock()
		{
		}

		[Token(Token = "0x600134D")]
		[Address(RVA = "0x105A58C", Offset = "0x105A58C", VA = "0x105A58C")]
		public static void UPvr_ReleaseWakeLock()
		{
		}

		[Token(Token = "0x600134E")]
		[Address(RVA = "0x105A6AC", Offset = "0x105A6AC", VA = "0x105A6AC")]
		public static void UPvr_EnableEnterKey()
		{
		}

		[Token(Token = "0x600134F")]
		[Address(RVA = "0x105A7CC", Offset = "0x105A7CC", VA = "0x105A7CC")]
		public static void UPvr_DisableEnterKey()
		{
		}

		[Token(Token = "0x6001350")]
		[Address(RVA = "0x105A8EC", Offset = "0x105A8EC", VA = "0x105A8EC")]
		public static void UPvr_EnableVolumeKey()
		{
		}

		[Token(Token = "0x6001351")]
		[Address(RVA = "0x105AA0C", Offset = "0x105AA0C", VA = "0x105AA0C")]
		public static void UPvr_DisableVolumeKey()
		{
		}

		[Token(Token = "0x6001352")]
		[Address(RVA = "0x105AB2C", Offset = "0x105AB2C", VA = "0x105AB2C")]
		public static void UPvr_EnableBackKey()
		{
		}

		[Token(Token = "0x6001353")]
		[Address(RVA = "0x105AC4C", Offset = "0x105AC4C", VA = "0x105AC4C")]
		public static void UPvr_DisableBackKey()
		{
		}

		[Token(Token = "0x6001354")]
		[Address(RVA = "0x105AD6C", Offset = "0x105AD6C", VA = "0x105AD6C")]
		public static void UPvr_WriteConfigFileToDataLocal(string path, string content, Action<bool> callback)
		{
		}

		[Token(Token = "0x6001355")]
		[Address(RVA = "0x105AEDC", Offset = "0x105AEDC", VA = "0x105AEDC")]
		public static void UPvr_ResetAllKeyToDefault(Action<bool> callback)
		{
		}

		[Token(Token = "0x6001356")]
		[Address(RVA = "0x105AF74", Offset = "0x105AF74", VA = "0x105AF74")]
		public static void UPvr_SetAPPAsHome(PBS_SwitchEnum switchEnum, string packageName)
		{
		}

		[Token(Token = "0x6001357")]
		[Address(RVA = "0x105B0F0", Offset = "0x105B0F0", VA = "0x105B0F0")]
		public static void UPvr_KillAppsByPidOrPackageName(int[] pids, string[] packageNames)
		{
		}

		[Token(Token = "0x6001358")]
		[Address(RVA = "0x105B2BC", Offset = "0x105B2BC", VA = "0x105B2BC")]
		public static void UPvr_FreezeScreen(bool freeze)
		{
		}

		[Token(Token = "0x6001359")]
		[Address(RVA = "0x105B3E0", Offset = "0x105B3E0", VA = "0x105B3E0")]
		public static void UPvr_OpenMiracast()
		{
		}

		[Token(Token = "0x600135A")]
		[Address(RVA = "0x105B500", Offset = "0x105B500", VA = "0x105B500")]
		public static bool UPvr_IsMiracastOn()
		{
			return default(bool);
		}

		[Token(Token = "0x600135B")]
		[Address(RVA = "0x105B64C", Offset = "0x105B64C", VA = "0x105B64C")]
		public static void UPvr_CloseMiracast()
		{
		}

		[Token(Token = "0x600135C")]
		[Address(RVA = "0x105B76C", Offset = "0x105B76C", VA = "0x105B76C")]
		public static void UPvr_StartScan()
		{
		}

		[Token(Token = "0x600135D")]
		[Address(RVA = "0x105B88C", Offset = "0x105B88C", VA = "0x105B88C")]
		public static void UPvr_StopScan()
		{
		}

		[Token(Token = "0x600135E")]
		[Address(RVA = "0x105B9AC", Offset = "0x105B9AC", VA = "0x105B9AC")]
		public static void UPvr_ConnectWifiDisplay(string modelJson)
		{
		}

		[Token(Token = "0x600135F")]
		[Address(RVA = "0x105BAA8", Offset = "0x105BAA8", VA = "0x105BAA8")]
		public static void UPvr_DisConnectWifiDisplay()
		{
		}

		[Token(Token = "0x6001360")]
		[Address(RVA = "0x105BBC8", Offset = "0x105BBC8", VA = "0x105BBC8")]
		public static void UPvr_ForgetWifiDisplay(string address)
		{
		}

		[Token(Token = "0x6001361")]
		[Address(RVA = "0x105BCC4", Offset = "0x105BCC4", VA = "0x105BCC4")]
		public static void UPvr_RenameWifiDisplay(string address, string newName)
		{
		}

		[Token(Token = "0x6001362")]
		[Address(RVA = "0x105BE14", Offset = "0x105BE14", VA = "0x105BE14")]
		public static void UPvr_SetWDModelsCallback()
		{
		}

		[Token(Token = "0x6001363")]
		[Address(RVA = "0x105BE8C", Offset = "0x105BE8C", VA = "0x105BE8C")]
		public static void UPvr_SetWDJsonCallback()
		{
		}

		[Token(Token = "0x6001364")]
		[Address(RVA = "0x105BF04", Offset = "0x105BF04", VA = "0x105BF04")]
		public static void UPvr_UpdateWifiDisplays(Action<string> callback)
		{
		}

		[Token(Token = "0x6001365")]
		[Address(RVA = "0x105C034", Offset = "0x105C034", VA = "0x105C034")]
		public static string UPvr_GetConnectedWD()
		{
			return null;
		}
	}
	[Token(Token = "0x200027F")]
	public enum GlobalIntConfigs
	{
		[Token(Token = "0x4000E91")]
		EYE_TEXTURE_RESOLUTION0,
		[Token(Token = "0x4000E92")]
		EYE_TEXTURE_RESOLUTION1,
		[Token(Token = "0x4000E93")]
		SEENSOR_COUNT,
		[Token(Token = "0x4000E94")]
		ABILITY6DOF,
		[Token(Token = "0x4000E95")]
		PLATFORM_TYPE,
		[Token(Token = "0x4000E96")]
		TRACKING_MODE,
		[Token(Token = "0x4000E97")]
		LOG_LEVEL,
		[Token(Token = "0x4000E98")]
		ENBLE_HAND6DOF_BY_HEAD,
		[Token(Token = "0x4000E99")]
		ENBLE_6DOF_GLOBAL_TRACKING,
		[Token(Token = "0x4000E9A")]
		TARGET_FRAME_RATE,
		[Token(Token = "0x4000E9B")]
		iShowFPS,
		[Token(Token = "0x4000E9C")]
		SensorMode,
		[Token(Token = "0x4000E9D")]
		LOGICFLOW,
		[Token(Token = "0x4000E9E")]
		EYE_TEXTURE_RES_HIGH,
		[Token(Token = "0x4000E9F")]
		EYE_TEXTURE_RES_NORMAL,
		[Token(Token = "0x4000EA0")]
		iCtrlModelLoadingPri,
		[Token(Token = "0x4000EA1")]
		iPhoneHMDModeEnabled,
		[Token(Token = "0x4000EA2")]
		isEnableBoundary,
		[Token(Token = "0x4000EA3")]
		Enable_Activity_Rotation,
		[Token(Token = "0x4000EA4")]
		GetDisplay_Orientation,
		[Token(Token = "0x4000EA5")]
		GetWaitFrameNum,
		[Token(Token = "0x4000EA6")]
		GetResetFrameNum,
		[Token(Token = "0x4000EA7")]
		EnableFFRBYSYS,
		[Token(Token = "0x4000EA8")]
		RotControllerMode,
		[Token(Token = "0x4000EA9")]
		RenderFPS,
		[Token(Token = "0x4000EAA")]
		AntiAliasingLevelRecommended
	}
	[Token(Token = "0x2000280")]
	public enum GlobalFloatConfigs
	{
		[Token(Token = "0x4000EAC")]
		IPD,
		[Token(Token = "0x4000EAD")]
		VFOV,
		[Token(Token = "0x4000EAE")]
		HFOV,
		[Token(Token = "0x4000EAF")]
		NECK_MODEL_X,
		[Token(Token = "0x4000EB0")]
		NECK_MODEL_Y,
		[Token(Token = "0x4000EB1")]
		NECK_MODEL_Z,
		[Token(Token = "0x4000EB2")]
		DISPLAY_REFRESH_RATE
	}
	[Token(Token = "0x2000281")]
	public enum RenderTextureAntiAliasing
	{
		[Token(Token = "0x4000EB4")]
		X_1 = 1,
		[Token(Token = "0x4000EB5")]
		X_2 = 2,
		[Token(Token = "0x4000EB6")]
		X_4 = 4,
		[Token(Token = "0x4000EB7")]
		X_8 = 8
	}
	[Token(Token = "0x2000282")]
	public enum PlatForm
	{
		[Token(Token = "0x4000EB9")]
		Android = 1,
		[Token(Token = "0x4000EBA")]
		IOS,
		[Token(Token = "0x4000EBB")]
		Win,
		[Token(Token = "0x4000EBC")]
		Notsupport
	}
	[Token(Token = "0x2000283")]
	public enum RenderTextureDepth
	{
		[Token(Token = "0x4000EBE")]
		BD_0 = 0,
		[Token(Token = "0x4000EBF")]
		BD_16 = 16,
		[Token(Token = "0x4000EC0")]
		BD_24 = 24
	}
	[Token(Token = "0x2000284")]
	public enum RenderTextureLevel
	{
		[Token(Token = "0x4000EC2")]
		Normal,
		[Token(Token = "0x4000EC3")]
		High
	}
	[Token(Token = "0x2000285")]
	public enum Sensorindex
	{
		[Token(Token = "0x4000EC5")]
		Default,
		[Token(Token = "0x4000EC6")]
		FirstSensor,
		[Token(Token = "0x4000EC7")]
		SecondSensor
	}
	[Token(Token = "0x2000286")]
	public enum Eye
	{
		[Token(Token = "0x4000EC9")]
		LeftEye,
		[Token(Token = "0x4000ECA")]
		RightEye,
		[Token(Token = "0x4000ECB")]
		BothEye
	}
	[Token(Token = "0x2000287")]
	public enum ResUtilsType
	{
		[Token(Token = "0x4000ECD")]
		TYPE_TEXTSIZE,
		[Token(Token = "0x4000ECE")]
		TYPE_COLOR,
		[Token(Token = "0x4000ECF")]
		TYPE_TEXT,
		[Token(Token = "0x4000ED0")]
		TYPE_FONT,
		[Token(Token = "0x4000ED1")]
		TYPE_VALUE,
		[Token(Token = "0x4000ED2")]
		TYPE_DRAWABLE,
		[Token(Token = "0x4000ED3")]
		TYPE_OBJECT,
		[Token(Token = "0x4000ED4")]
		TYPR_OBJECTARRAY
	}
	[Token(Token = "0x2000288")]
	public enum TrackingOrigin
	{
		[Token(Token = "0x4000ED6")]
		EyeLevel,
		[Token(Token = "0x4000ED7")]
		FloorLevel,
		[Token(Token = "0x4000ED8")]
		StageLevel
	}
	[Token(Token = "0x2000289")]
	public enum EFoveationLevel
	{
		[Token(Token = "0x4000EDA")]
		Low,
		[Token(Token = "0x4000EDB")]
		Med,
		[Token(Token = "0x4000EDC")]
		High,
		[Token(Token = "0x4000EDD")]
		Top_High
	}
	[Token(Token = "0x200028A")]
	public enum StereoRenderingPathPico
	{
		[Token(Token = "0x4000EDF")]
		MultiPass,
		[Token(Token = "0x4000EE0")]
		SinglePass
	}
	[Token(Token = "0x200028B")]
	public enum ExtraLatencyMode
	{
		[Token(Token = "0x4000EE2")]
		ExtraLatencyModeOff,
		[Token(Token = "0x4000EE3")]
		ExtraLatencyModeOn,
		[Token(Token = "0x4000EE4")]
		ExtraLatencyModeDynamic
	}
	[Token(Token = "0x200028C")]
	public enum pvrEyePoseStatus
	{
		[Token(Token = "0x4000EE6")]
		kGazePointValid = 1,
		[Token(Token = "0x4000EE7")]
		kGazeVectorValid = 2,
		[Token(Token = "0x4000EE8")]
		kEyeOpennessValid = 4,
		[Token(Token = "0x4000EE9")]
		kEyePupilDilationValid = 8,
		[Token(Token = "0x4000EEA")]
		kEyePositionGuideValid = 0x10
	}
	[Token(Token = "0x200028D")]
	public enum TrackingMode
	{
		[Token(Token = "0x4000EEC")]
		PVR_TRACKING_MODE_ROTATION = 1,
		[Token(Token = "0x4000EED")]
		PVR_TRACKING_MODE_POSITION = 2,
		[Token(Token = "0x4000EEE")]
		PVR_TRACKING_MODE_EYE = 4
	}
	[Token(Token = "0x200028E")]
	public enum SystemDisplayFrequency
	{
		[Token(Token = "0x4000EF0")]
		Default,
		[Token(Token = "0x4000EF1")]
		RefreshRate72,
		[Token(Token = "0x4000EF2")]
		RefreshRate90
	}
	[Token(Token = "0x200028F")]
	public struct EyeTrackingData
	{
		[Token(Token = "0x4000EF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int leftEyePoseStatus;

		[Token(Token = "0x4000EF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int rightEyePoseStatus;

		[Token(Token = "0x4000EF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int combinedEyePoseStatus;

		[Token(Token = "0x4000EF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 leftEyeGazePoint;

		[Token(Token = "0x4000EF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 rightEyeGazePoint;

		[Token(Token = "0x4000EF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 combinedEyeGazePoint;

		[Token(Token = "0x4000EF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 leftEyeGazeVector;

		[Token(Token = "0x4000EFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 rightEyeGazeVector;

		[Token(Token = "0x4000EFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 combinedEyeGazeVector;

		[Token(Token = "0x4000EFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float leftEyeOpenness;

		[Token(Token = "0x4000EFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float rightEyeOpenness;

		[Token(Token = "0x4000EFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float leftEyePupilDilation;

		[Token(Token = "0x4000EFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float rightEyePupilDilation;

		[Token(Token = "0x4000F00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Vector3 leftEyePositionGuide;

		[Token(Token = "0x4000F01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Vector3 rightEyePositionGuide;

		[Token(Token = "0x4000F02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public Vector3 foveatedGazeDirection;

		[Token(Token = "0x4000F03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public int foveatedGazeTrackingState;

		[Token(Token = "0x4000F04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public byte[] reserved;
	}
	[Token(Token = "0x2000290")]
	public struct EyeTrackingGazeRay
	{
		[Token(Token = "0x4000F05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 Direction;

		[Token(Token = "0x4000F06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool IsValid;

		[Token(Token = "0x4000F07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 Origin;
	}
	[Token(Token = "0x2000291")]
	public struct EyeDeviceInfo
	{
		[Token(Token = "0x4000F08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ViewFrustum targetFrustumLeft;

		[Token(Token = "0x4000F09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ViewFrustum targetFrustumRight;
	}
	[Token(Token = "0x2000292")]
	public struct ViewFrustum
	{
		[Token(Token = "0x4000F0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float left;

		[Token(Token = "0x4000F0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float right;

		[Token(Token = "0x4000F0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float top;

		[Token(Token = "0x4000F0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float bottom;

		[Token(Token = "0x4000F0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float near;

		[Token(Token = "0x4000F0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float far;
	}
	[Token(Token = "0x2000293")]
	public struct EyeSetting
	{
		[Token(Token = "0x4000F10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Transform eyelocalPosition;

		[Token(Token = "0x4000F11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Rect eyeRect;

		[Token(Token = "0x4000F12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float eyeFov;

		[Token(Token = "0x4000F13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float eyeAspect;

		[Token(Token = "0x4000F14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Matrix4x4 eyeProjectionMatrix;

		[Token(Token = "0x4000F15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Shader eyeShader;
	}
	[Token(Token = "0x2000294")]
	public struct Sensor
	{
		[Token(Token = "0x4000F16")]
		public const string LibFileName = "Pvr_UnitySDK";

		[PreserveSig]
		[Token(Token = "0x6001366")]
		[Address(RVA = "0x104F138", Offset = "0x104F138", VA = "0x104F138")]
		private static extern int Pvr_Enable6DofModule(bool enable);

		[PreserveSig]
		[Token(Token = "0x6001367")]
		[Address(RVA = "0x104F248", Offset = "0x104F248", VA = "0x104F248")]
		private static extern int Pvr_OptionalResetSensor(int index, int resetRot, int resetPos);

		[PreserveSig]
		[Token(Token = "0x6001368")]
		[Address(RVA = "0x104F370", Offset = "0x104F370", VA = "0x104F370")]
		private static extern int Pvr_Init(int index);

		[PreserveSig]
		[Token(Token = "0x6001369")]
		[Address(RVA = "0x104F468", Offset = "0x104F468", VA = "0x104F468")]
		private static extern int Pvr_StartSensor(int index);

		[PreserveSig]
		[Token(Token = "0x600136A")]
		[Address(RVA = "0x104F570", Offset = "0x104F570", VA = "0x104F570")]
		private static extern int Pvr_StopSensor(int index);

		[PreserveSig]
		[Token(Token = "0x600136B")]
		[Address(RVA = "0x104F678", Offset = "0x104F678", VA = "0x104F678")]
		private static extern int Pvr_ResetSensor(int index);

		[PreserveSig]
		[Token(Token = "0x600136C")]
		[Address(RVA = "0x104F780", Offset = "0x104F780", VA = "0x104F780")]
		private static extern int Pvr_ResetSensorAll(int index);

		[PreserveSig]
		[Token(Token = "0x600136D")]
		[Address(RVA = "0x104F890", Offset = "0x104F890", VA = "0x104F890")]
		private static extern int Pvr_GetSensorState(int index, ref float x, ref float y, ref float z, ref float w, ref float px, ref float py, ref float pz);

		[PreserveSig]
		[Token(Token = "0x600136E")]
		[Address(RVA = "0x104F9D8", Offset = "0x104F9D8", VA = "0x104F9D8")]
		private static extern int Pvr_GetMainSensorState(ref float x, ref float y, ref float z, ref float w, ref float px, ref float py, ref float pz, ref float vfov, ref float hfov, ref int viewNumber);

		[PreserveSig]
		[Token(Token = "0x600136F")]
		[Address(RVA = "0x104FB38", Offset = "0x104FB38", VA = "0x104FB38")]
		private static extern int Pvr_GetPsensorState();

		[PreserveSig]
		[Token(Token = "0x6001370")]
		[Address(RVA = "0x104FC38", Offset = "0x104FC38", VA = "0x104FC38")]
		private static extern int Pvr_GetHmdPSensorStatus();

		[PreserveSig]
		[Token(Token = "0x6001371")]
		[Address(RVA = "0x104FD40", Offset = "0x104FD40", VA = "0x104FD40")]
		private static extern int Pvr_GetSensorGyroscope(int index, ref float x, ref float y, ref float z);

		[PreserveSig]
		[Token(Token = "0x6001372")]
		[Address(RVA = "0x104FE70", Offset = "0x104FE70", VA = "0x104FE70")]
		private static extern int Pvr_GetSensorMagnet(int index, ref float x, ref float y, ref float z);

		[PreserveSig]
		[Token(Token = "0x6001373")]
		[Address(RVA = "0x104FF98", Offset = "0x104FF98", VA = "0x104FF98")]
		private static extern int Pvr_Get6DofSensorQualityStatus();

		[PreserveSig]
		[Token(Token = "0x6001374")]
		[Address(RVA = "0x1050070", Offset = "0x1050070", VA = "0x1050070")]
		private static extern bool Pvr_Get6DofSafePanelFlag();

		[PreserveSig]
		[Token(Token = "0x6001375")]
		[Address(RVA = "0x1050180", Offset = "0x1050180", VA = "0x1050180")]
		private static extern void Pvr_SetReinPosition(float x, float y, float z, float w, float px, float py, float pz, int hand, bool valid, int key);

		[PreserveSig]
		[Token(Token = "0x6001376")]
		[Address(RVA = "0x10502D8", Offset = "0x10502D8", VA = "0x10502D8")]
		private static extern bool Pvr_SetTrackingOriginType(TrackingOrigin trackingOriginType);

		[PreserveSig]
		[Token(Token = "0x6001377")]
		[Address(RVA = "0x10503F8", Offset = "0x10503F8", VA = "0x10503F8")]
		private static extern bool Pvr_GetAcceleration(ref float x, ref float y, ref float z);

		[PreserveSig]
		[Token(Token = "0x6001378")]
		[Address(RVA = "0x1050520", Offset = "0x1050520", VA = "0x1050520")]
		private static extern bool Pvr_GetAngularVelocity(ref float x, ref float y, ref float z);

		[PreserveSig]
		[Token(Token = "0x6001379")]
		[Address(RVA = "0x1050650", Offset = "0x1050650", VA = "0x1050650")]
		private static extern bool Pvr_GetVelocity(ref float x, ref float y, ref float z);

		[PreserveSig]
		[Token(Token = "0x600137A")]
		[Address(RVA = "0x1050770", Offset = "0x1050770", VA = "0x1050770")]
		private static extern bool Pvr_GetAngularAcceleration(ref float x, ref float y, ref float z);

		[Token(Token = "0x600137B")]
		[Address(RVA = "0x1050864", Offset = "0x1050864", VA = "0x1050864")]
		public static bool UPvr_Pvr_Get6DofSafePanelFlag()
		{
			return default(bool);
		}

		[Token(Token = "0x600137C")]
		[Address(RVA = "0x1050868", Offset = "0x1050868", VA = "0x1050868")]
		public static int UPvr_Init(int index)
		{
			return default(int);
		}

		[Token(Token = "0x600137D")]
		[Address(RVA = "0x105086C", Offset = "0x105086C", VA = "0x105086C")]
		public static void UPvr_InitPsensor()
		{
		}

		[Token(Token = "0x600137E")]
		[Address(RVA = "0x1050AC8", Offset = "0x1050AC8", VA = "0x1050AC8")]
		public static int UPvr_GetPsensorState()
		{
			return default(int);
		}

		[Token(Token = "0x600137F")]
		[Address(RVA = "0x1050DA4", Offset = "0x1050DA4", VA = "0x1050DA4")]
		public static int UPvr_GetPSensorStatus()
		{
			return default(int);
		}

		[Token(Token = "0x6001380")]
		[Address(RVA = "0x1050DA8", Offset = "0x1050DA8", VA = "0x1050DA8")]
		public static void UPvr_UnregisterPsensor()
		{
		}

		[Token(Token = "0x6001381")]
		[Address(RVA = "0x1051004", Offset = "0x1051004", VA = "0x1051004")]
		public static int UPvr_StartSensor(int index)
		{
			return default(int);
		}

		[Token(Token = "0x6001382")]
		[Address(RVA = "0x1051008", Offset = "0x1051008", VA = "0x1051008")]
		public static int UPvr_StopSensor(int index)
		{
			return default(int);
		}

		[Token(Token = "0x6001383")]
		[Address(RVA = "0x105100C", Offset = "0x105100C", VA = "0x105100C")]
		public static int UPvr_ResetSensor(int index)
		{
			return default(int);
		}

		[Token(Token = "0x6001384")]
		[Address(RVA = "0x10510B8", Offset = "0x10510B8", VA = "0x10510B8")]
		public static int UPvr_OptionalResetSensor(int index, int resetRot, int resetPos)
		{
			return default(int);
		}

		[Token(Token = "0x6001385")]
		[Address(RVA = "0x10510BC", Offset = "0x10510BC", VA = "0x10510BC")]
		public static int UPvr_GetSensorState(int index, ref float x, ref float y, ref float z, ref float w, ref float px, ref float py, ref float pz)
		{
			return default(int);
		}

		[Token(Token = "0x6001386")]
		[Address(RVA = "0x10510F4", Offset = "0x10510F4", VA = "0x10510F4")]
		public static int UPvr_GetMainSensorState(ref float x, ref float y, ref float z, ref float w, ref float px, ref float py, ref float pz, ref float vfov, ref float hfov, ref int viewNumber)
		{
			return default(int);
		}

		[Token(Token = "0x6001387")]
		[Address(RVA = "0x1051138", Offset = "0x1051138", VA = "0x1051138")]
		public static int UPvr_GetSensorGyroscope(int index, ref float x, ref float y, ref float z)
		{
			return default(int);
		}

		[Token(Token = "0x6001388")]
		[Address(RVA = "0x1051150", Offset = "0x1051150", VA = "0x1051150")]
		public static int UPvr_GetSensorMagnet(int index, ref float x, ref float y, ref float z)
		{
			return default(int);
		}

		[Token(Token = "0x6001389")]
		[Address(RVA = "0x1051168", Offset = "0x1051168", VA = "0x1051168")]
		public static int UPvr_Get6DofSensorQualityStatus()
		{
			return default(int);
		}

		[Token(Token = "0x600138A")]
		[Address(RVA = "0x105116C", Offset = "0x105116C", VA = "0x105116C")]
		public static int UPvr_Enable6DofModule(bool enable)
		{
			return default(int);
		}

		[Token(Token = "0x600138B")]
		[Address(RVA = "0x1050870", Offset = "0x1050870", VA = "0x1050870")]
		public static void Pvr_InitPsensor()
		{
		}

		[Token(Token = "0x600138C")]
		[Address(RVA = "0x1051468", Offset = "0x1051468", VA = "0x1051468")]
		public static bool Pvr_IsHead6dofReset()
		{
			return default(bool);
		}

		[Token(Token = "0x600138D")]
		[Address(RVA = "0x1050B20", Offset = "0x1050B20", VA = "0x1050B20")]
		public static int Pvr_GetAndroidPsensorState()
		{
			return default(int);
		}

		[Token(Token = "0x600138E")]
		[Address(RVA = "0x1050DAC", Offset = "0x1050DAC", VA = "0x1050DAC")]
		public static void Pvr_UnregisterPsensor()
		{
		}

		[Token(Token = "0x600138F")]
		[Address(RVA = "0x105171C", Offset = "0x105171C", VA = "0x105171C")]
		public static int UPvr_ResetSensorAll(int index)
		{
			return default(int);
		}

		[Token(Token = "0x6001390")]
		[Address(RVA = "0x1051720", Offset = "0x1051720", VA = "0x1051720")]
		public static void UPvr_SetReinPosition(float x, float y, float z, float w, float px, float py, float pz, int hand, bool valid, int key)
		{
		}

		[Token(Token = "0x6001391")]
		[Address(RVA = "0x1051D78", Offset = "0x1051D78", VA = "0x1051D78")]
		public static bool UPvr_SetTrackingOriginType(TrackingOrigin trackingOriginType)
		{
			return default(bool);
		}

		[Token(Token = "0x6001392")]
		[Address(RVA = "0x1051D7C", Offset = "0x1051D7C", VA = "0x1051D7C")]
		public static Vector3 UPvr_GetAcceleration()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001393")]
		[Address(RVA = "0x1051DD8", Offset = "0x1051DD8", VA = "0x1051DD8")]
		public static Vector3 UPvr_AngularVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001394")]
		[Address(RVA = "0x1051E3C", Offset = "0x1051E3C", VA = "0x1051E3C")]
		public static Vector3 UPvr_GetVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001395")]
		[Address(RVA = "0x1051E98", Offset = "0x1051E98", VA = "0x1051E98")]
		public static Vector3 UPvr_GetAngularAcceleration()
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x2000295")]
	public struct Render
	{
		[Token(Token = "0x4000F17")]
		public const string LibFileName = "Pvr_UnitySDK";

		[Token(Token = "0x170002C0")]
		public static float[] SystemDisplayFrequenciesAvailable
		{
			[Token(Token = "0x6001396")]
			[Address(RVA = "0x104C180", Offset = "0x104C180", VA = "0x104C180")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002C1")]
		public static float systemDisplayFrequency
		{
			[Token(Token = "0x6001397")]
			[Address(RVA = "0x104C1F4", Offset = "0x104C1F4", VA = "0x104C1F4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001398")]
			[Address(RVA = "0x104C244", Offset = "0x104C244", VA = "0x104C244")]
			set
			{
			}
		}

		[PreserveSig]
		[Token(Token = "0x6001399")]
		[Address(RVA = "0x104C250", Offset = "0x104C250", VA = "0x104C250")]
		private static extern void Pvr_ChangeScreenParameters(string model, int width, int height, double xppi, double yppi, double densityDpi);

		[PreserveSig]
		[Token(Token = "0x600139A")]
		[Address(RVA = "0x104C378", Offset = "0x104C378", VA = "0x104C378")]
		private static extern int Pvr_SetRatio(float midH, float midV);

		[PreserveSig]
		[Token(Token = "0x600139B")]
		[Address(RVA = "0x104C480", Offset = "0x104C480", VA = "0x104C480")]
		private static extern int Pvr_SetPupillaryPoint(bool enable);

		[PreserveSig]
		[Token(Token = "0x600139C")]
		[Address(RVA = "0x104C590", Offset = "0x104C590", VA = "0x104C590")]
		private static extern IntPtr Pvr_GetSupportHMDTypes();

		[PreserveSig]
		[Token(Token = "0x600139D")]
		[Address(RVA = "0x104C698", Offset = "0x104C698", VA = "0x104C698")]
		private static extern void Pvr_SetCurrentHMDType(string type);

		[PreserveSig]
		[Token(Token = "0x600139E")]
		[Address(RVA = "0x104C7C8", Offset = "0x104C7C8", VA = "0x104C7C8")]
		private static extern int Pvr_GetIntConfig(int configsenum, ref int res);

		[PreserveSig]
		[Token(Token = "0x600139F")]
		[Address(RVA = "0x104C8D8", Offset = "0x104C8D8", VA = "0x104C8D8")]
		private static extern int Pvr_GetFloatConfig(int configsenum, ref float res);

		[PreserveSig]
		[Token(Token = "0x60013A0")]
		[Address(RVA = "0x104C9F0", Offset = "0x104C9F0", VA = "0x104C9F0")]
		private static extern void Pvr_SetupLayerData(int layerIndex, int sideMask, int textureId, int textureType, int layerFlags, float[] colorScaleAndOffset);

		[PreserveSig]
		[Token(Token = "0x60013A1")]
		[Address(RVA = "0x104CB30", Offset = "0x104CB30", VA = "0x104CB30")]
		private static extern void Pvr_SetupLayerCoords(int layerIndex, int sideMask, float[] lowerLeft, float[] lowerRight, float[] upperLeft, float[] upperRight);

		[PreserveSig]
		[Token(Token = "0x60013A2")]
		[Address(RVA = "0x104CC88", Offset = "0x104CC88", VA = "0x104CC88")]
		private static extern void Pvr_SetOverlayModelViewMatrix(int overlayType, int overlayShape, int texId, int eyeSide, int layerIndex, bool isHeadLocked, int layerFlags, float[] mvMatrix, float[] modelS, float[] modelR, float[] modelT, float[] cameraR, float[] cameraT, float[] colorScaleAndOffset);

		[PreserveSig]
		[Token(Token = "0x60013A3")]
		[Address(RVA = "0x104CE08", Offset = "0x104CE08", VA = "0x104CE08")]
		private static extern bool Pvr_EnableFoveation(bool enable);

		[PreserveSig]
		[Token(Token = "0x60013A4")]
		[Address(RVA = "0x104CF20", Offset = "0x104CF20", VA = "0x104CF20")]
		private static extern void Pvr_SetFoveationParameters(int textureId, int previousId, float focalPointX, float focalPointY, float foveationGainX, float foveationGainY, float foveationArea, float foveationMinimum);

		[PreserveSig]
		[Token(Token = "0x60013A5")]
		[Address(RVA = "0x104D038", Offset = "0x104D038", VA = "0x104D038")]
		private static extern void Pvr_SetFoveationResource(int textureId, int previousId, float focalPointX, float focalPointY);

		[PreserveSig]
		[Token(Token = "0x60013A6")]
		[Address(RVA = "0x104D168", Offset = "0x104D168", VA = "0x104D168")]
		private static extern void Pvr_SetFoveationParameters2(float foveationGainX, float foveationGainY, float foveationArea, float foveationMinimum);

		[PreserveSig]
		[Token(Token = "0x60013A7")]
		[Address(RVA = "0x104D260", Offset = "0x104D260", VA = "0x104D260")]
		private static extern void Pvr_SetFoveationLevel(EFoveationLevel level);

		[PreserveSig]
		[Token(Token = "0x60013A8")]
		[Address(RVA = "0x104D370", Offset = "0x104D370", VA = "0x104D370")]
		private static extern EFoveationLevel Pvr_GetFoveationLevel();

		[PreserveSig]
		[Token(Token = "0x60013A9")]
		[Address(RVA = "0x104D470", Offset = "0x104D470", VA = "0x104D470")]
		private static extern bool Pvr_GetIntSysProc(string property, ref int res);

		[PreserveSig]
		[Token(Token = "0x60013AA")]
		[Address(RVA = "0x104D5B0", Offset = "0x104D5B0", VA = "0x104D5B0")]
		private static extern void Pvr_SetColorspaceType(int colorspaceType);

		[PreserveSig]
		[Token(Token = "0x60013AB")]
		[Address(RVA = "0x104D6C0", Offset = "0x104D6C0", VA = "0x104D6C0")]
		private static extern void Pvr_SetCastingColorspaceType(int colorspaceType);

		[PreserveSig]
		[Token(Token = "0x60013AC")]
		[Address(RVA = "0x104D7A0", Offset = "0x104D7A0", VA = "0x104D7A0")]
		private static extern IntPtr Pvr_CreateLayerAndroidSurface(int layerType, int layerIndex);

		[PreserveSig]
		[Token(Token = "0x60013AD")]
		[Address(RVA = "0x104D888", Offset = "0x104D888", VA = "0x104D888")]
		private static extern IntPtr Pvr_GetLayerAndroidSurface(int layerType, int layerIndex);

		[PreserveSig]
		[Token(Token = "0x60013AE")]
		[Address(RVA = "0x104D970", Offset = "0x104D970", VA = "0x104D970")]
		private static extern void Pvr_SetMonoMode(bool openMono);

		[PreserveSig]
		[Token(Token = "0x60013AF")]
		[Address(RVA = "0x104DA78", Offset = "0x104DA78", VA = "0x104DA78")]
		private static extern void Pvr_GetStencilMesh(int eye, ref int vertexCount, ref int triangleCount, ref IntPtr vertexData, ref IntPtr indexData);

		[PreserveSig]
		[Token(Token = "0x60013B0")]
		[Address(RVA = "0x104DBA8", Offset = "0x104DBA8", VA = "0x104DBA8")]
		private static extern int Pvr_GetRefreshRate(ref float rate);

		[PreserveSig]
		[Token(Token = "0x60013B1")]
		[Address(RVA = "0x104DCB8", Offset = "0x104DCB8", VA = "0x104DCB8")]
		private static extern int Pvr_SetRefreshRate(float rate);

		[PreserveSig]
		[Token(Token = "0x60013B2")]
		[Address(RVA = "0x104DDC8", Offset = "0x104DDC8", VA = "0x104DDC8")]
		private static extern bool Pvr_GetRawCameraFrame(byte[] buffer, ref uint width, ref uint height, ref uint count);

		[PreserveSig]
		[Token(Token = "0x60013B3")]
		[Address(RVA = "0x104DF00", Offset = "0x104DF00", VA = "0x104DF00")]
		private static extern int Pvr_GetDisplayFrequenciesAvailable(float[] rate, int length);

		[PreserveSig]
		[Token(Token = "0x60013B4")]
		[Address(RVA = "0x104DFF8", Offset = "0x104DFF8", VA = "0x104DFF8")]
		private static extern int Pvr_SetDisplayFrequency(float rate);

		[Token(Token = "0x60013B5")]
		[Address(RVA = "0x104C184", Offset = "0x104C184", VA = "0x104C184")]
		public static float[] UPvr_GetDisplayFrequenciesAvailable()
		{
			return null;
		}

		[Token(Token = "0x60013B6")]
		[Address(RVA = "0x104E10C", Offset = "0x104E10C", VA = "0x104E10C")]
		public static void UPvr_SetDisplayFrequency(float rate)
		{
		}

		[Token(Token = "0x60013B7")]
		[Address(RVA = "0x104E110", Offset = "0x104E110", VA = "0x104E110")]
		public static void UPvr_GetRawCameraData(byte[] buffer, ref uint width, ref uint height, ref uint count)
		{
		}

		[Token(Token = "0x60013B8")]
		[Address(RVA = "0x104E128", Offset = "0x104E128", VA = "0x104E128")]
		public static void UPvr_ChangeScreenParameters(string model, int width, int height, double xppi, double yppi, double densityDpi)
		{
		}

		[Token(Token = "0x60013B9")]
		[Address(RVA = "0x104E14C", Offset = "0x104E14C", VA = "0x104E14C")]
		public static int UPvr_SetRatio(float midH, float midV)
		{
			return default(int);
		}

		[Token(Token = "0x60013BA")]
		[Address(RVA = "0x104E150", Offset = "0x104E150", VA = "0x104E150")]
		public static void UPvr_EnableFoveation(bool enable)
		{
		}

		[Token(Token = "0x60013BB")]
		[Address(RVA = "0x104E254", Offset = "0x104E254", VA = "0x104E254")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x2FC220", Offset = "0x2FC220")]
		public static void UPvr_SetFoveationParameters(int textureId, int previousId, float focalPointX, float focalPointY, float foveationGainX, float foveationGainY, float foveationArea, float foveationMinimum)
		{
		}

		[Token(Token = "0x60013BC")]
		[Address(RVA = "0x104E28C", Offset = "0x104E28C", VA = "0x104E28C")]
		public static void UPvr_SetFoveationResource(int textureId, int previousId, float focalPointX, float focalPointY)
		{
		}

		[Token(Token = "0x60013BD")]
		[Address(RVA = "0x104E2A4", Offset = "0x104E2A4", VA = "0x104E2A4")]
		public static void SetFoveatedRenderingLevel(EFoveationLevel level)
		{
		}

		[Token(Token = "0x60013BE")]
		[Address(RVA = "0x104E438", Offset = "0x104E438", VA = "0x104E438")]
		public static EFoveationLevel GetFoveatedRenderingLevel()
		{
			return default(EFoveationLevel);
		}

		[Token(Token = "0x60013BF")]
		[Address(RVA = "0x104E43C", Offset = "0x104E43C", VA = "0x104E43C")]
		public static void SetFoveatedRenderingParameters(Vector2 ffrGainValue, float ffrAreaValue, float ffrMinimumValue)
		{
		}

		[Token(Token = "0x60013C0")]
		[Address(RVA = "0x104E5F0", Offset = "0x104E5F0", VA = "0x104E5F0")]
		public static bool UPvr_GetIntSysProc(string property, ref int res)
		{
			return default(bool);
		}

		[Token(Token = "0x60013C1")]
		[Address(RVA = "0x104E5F4", Offset = "0x104E5F4", VA = "0x104E5F4")]
		public static int UPvr_GetIntConfig(int configsenum, ref int res)
		{
			return default(int);
		}

		[Token(Token = "0x60013C2")]
		[Address(RVA = "0x104E5F8", Offset = "0x104E5F8", VA = "0x104E5F8")]
		public static int UPvr_GetFloatConfig(int configsenum, ref float res)
		{
			return default(int);
		}

		[Token(Token = "0x60013C3")]
		[Address(RVA = "0x104E5FC", Offset = "0x104E5FC", VA = "0x104E5FC")]
		public static string UPvr_GetSupportHMDTypes()
		{
			return null;
		}

		[Token(Token = "0x60013C4")]
		[Address(RVA = "0x104E69C", Offset = "0x104E69C", VA = "0x104E69C")]
		public static void UPvr_SetCurrentHMDType(string type)
		{
		}

		[Token(Token = "0x60013C5")]
		[Address(RVA = "0x104E6A0", Offset = "0x104E6A0", VA = "0x104E6A0")]
		public static void UPvr_SetupLayerData(int layerIndex, int sideMask, int textureId, int textureType, int layerFlags, Vector4 colorScale, Vector4 colorOffset)
		{
		}

		[Token(Token = "0x60013C6")]
		[Address(RVA = "0x104E86C", Offset = "0x104E86C", VA = "0x104E86C")]
		public static void UPvr_SetupLayerCoords(int layerIndex, int sideMask, float[] lowerLeft, float[] lowerRight, float[] upperLeft, float[] upperRight)
		{
		}

		[Token(Token = "0x60013C7")]
		[Address(RVA = "0x104E890", Offset = "0x104E890", VA = "0x104E890")]
		public static void UPvr_SetOverlayModelViewMatrix(int overlayType, int overlayShape, int texId, int eyeSide, int layerIndex, bool isHeadLocked, int layerFlags, Matrix4x4 mvMatrix, Vector3 modelS, Quaternion modelR, Vector3 modelT, Quaternion cameraR, Vector3 cameraT, Vector4 colorScale, Vector4 colorOffset)
		{
		}

		[Token(Token = "0x60013C8")]
		[Address(RVA = "0x104F048", Offset = "0x104F048", VA = "0x104F048")]
		public static void UPvr_SetColorspaceType(int colorspaceType)
		{
		}

		[Token(Token = "0x60013C9")]
		[Address(RVA = "0x104F04C", Offset = "0x104F04C", VA = "0x104F04C")]
		public static void UPvr_SetCastingColorspaceType(int colorspaceType)
		{
		}

		[Token(Token = "0x60013CA")]
		[Address(RVA = "0x104F050", Offset = "0x104F050", VA = "0x104F050")]
		public static IntPtr UPvr_CreateLayerAndroidSurface(int layerType, int layerIndex)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60013CB")]
		[Address(RVA = "0x104F054", Offset = "0x104F054", VA = "0x104F054")]
		public static IntPtr UPvr_GetLayerAndroidSurface(int layerType, int layerIndex)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60013CC")]
		[Address(RVA = "0x104F058", Offset = "0x104F058", VA = "0x104F058")]
		public static void UPvr_SetMonoMode(bool openMono)
		{
		}

		[Token(Token = "0x60013CD")]
		[Address(RVA = "0x104F118", Offset = "0x104F118", VA = "0x104F118")]
		public static void UPvr_GetStencilMesh(int eye, ref int vertexCount, ref int triangleCount, ref IntPtr vertexDataPtr, ref IntPtr indexDataPtr)
		{
		}

		[Token(Token = "0x60013CE")]
		[Address(RVA = "0x104C21C", Offset = "0x104C21C", VA = "0x104C21C")]
		public static float UPvr_GetSystemDisplayFrequency()
		{
			return default(float);
		}

		[Token(Token = "0x60013CF")]
		[Address(RVA = "0x104C248", Offset = "0x104C248", VA = "0x104C248")]
		public static void UPvr_SetSystemDisplayFrequency(float rate)
		{
		}
	}
	[Token(Token = "0x2000296")]
	public struct System
	{
		[Token(Token = "0x4000F18")]
		public const string LibFileName = "Pvr_UnitySDK";

		[Token(Token = "0x4000F19")]
		public const string UnitySDKVersion = "2.8.12.1";

		[PreserveSig]
		[Token(Token = "0x60013D0")]
		[Address(RVA = "0x1051F00", Offset = "0x1051F00", VA = "0x1051F00")]
		public static extern void Pvr_SetInitActivity(IntPtr activity, IntPtr vrActivityClass);

		[PreserveSig]
		[Token(Token = "0x60013D1")]
		[Address(RVA = "0x1051FD8", Offset = "0x1051FD8", VA = "0x1051FD8")]
		private static extern IntPtr Pvr_GetSDKVersion();

		[PreserveSig]
		[Token(Token = "0x60013D2")]
		[Address(RVA = "0x10520D0", Offset = "0x10520D0", VA = "0x10520D0")]
		public static extern int Pvr_GetHmdHardwareVersion();

		[PreserveSig]
		[Token(Token = "0x60013D3")]
		[Address(RVA = "0x10521D8", Offset = "0x10521D8", VA = "0x10521D8")]
		public static extern IntPtr Pvr_GetHmdFirmwareVersion();

		[PreserveSig]
		[Token(Token = "0x60013D4")]
		[Address(RVA = "0x10522E0", Offset = "0x10522E0", VA = "0x10522E0")]
		public static extern IntPtr Pvr_GetHmdSerialNumber();

		[PreserveSig]
		[Token(Token = "0x60013D5")]
		[Address(RVA = "0x10523E8", Offset = "0x10523E8", VA = "0x10523E8")]
		public static extern int PVR_GetHmdBatteryStatus();

		[PreserveSig]
		[Token(Token = "0x60013D6")]
		[Address(RVA = "0x10524F0", Offset = "0x10524F0", VA = "0x10524F0")]
		public static extern float PVR_GetHmdBatteryTemperature();

		[PreserveSig]
		[Token(Token = "0x60013D7")]
		[Address(RVA = "0x10525C8", Offset = "0x10525C8", VA = "0x10525C8")]
		public static extern int PVR_SetHmdAudioStatus(bool enable);

		[PreserveSig]
		[Token(Token = "0x60013D8")]
		[Address(RVA = "0x10526D8", Offset = "0x10526D8", VA = "0x10526D8")]
		public static extern bool Pvr_GetEyeTrackingData(ref int leftEyePoseStatus, ref int rightEyePoseStatus, ref int combinedEyePoseStatus, ref float leftEyeGazePointX, ref float leftEyeGazePointY, ref float leftEyeGazePointZ, ref float rightEyeGazePointX, ref float rightEyeGazePointY, ref float rightEyeGazePointZ, ref float combinedEyeGazePointX, ref float combinedEyeGazePointY, ref float combinedEyeGazePointZ, ref float leftEyeGazeVectorX, ref float leftEyeGazeVectorY, ref float leftEyeGazeVectorZ, ref float rightEyeGazeVectorX, ref float rightEyeGazeVectorY, ref float rightEyeGazeVectorZ, ref float combinedEyeGazeVectorX, ref float combinedEyeGazeVectorY, ref float combinedEyeGazeVectorZ, ref float leftEyeOpenness, ref float rightEyeOpenness, ref float leftEyePupilDilation, ref float rightEyePupilDilation, ref float leftEyePositionGuideX, ref float leftEyePositionGuideY, ref float leftEyePositionGuideZ, ref float rightEyePositionGuideX, ref float rightEyePositionGuideY, ref float rightEyePositionGuideZ, ref float foveatedGazeDirectionX, ref float foveatedGazeDirectionY, ref float foveatedGazeDirectionZ, ref int foveatedGazeTrackingState);

		[PreserveSig]
		[Token(Token = "0x60013D9")]
		[Address(RVA = "0x10528E8", Offset = "0x10528E8", VA = "0x10528E8")]
		public static extern bool Pvr_SetTrackingMode(int trackingMode);

		[PreserveSig]
		[Token(Token = "0x60013DA")]
		[Address(RVA = "0x1052A00", Offset = "0x1052A00", VA = "0x1052A00")]
		public static extern int Pvr_GetTrackingMode();

		[PreserveSig]
		[Token(Token = "0x60013DB")]
		[Address(RVA = "0x1052B00", Offset = "0x1052B00", VA = "0x1052B00")]
		public static extern IntPtr GetRenderEventFunc();

		[PreserveSig]
		[Token(Token = "0x60013DC")]
		[Address(RVA = "0x1052C00", Offset = "0x1052C00", VA = "0x1052C00")]
		public static extern void UnityEventData(long data);

		[PreserveSig]
		[Token(Token = "0x60013DD")]
		[Address(RVA = "0x1052D10", Offset = "0x1052D10", VA = "0x1052D10")]
		public static extern bool Pvr_EnableSinglePass(bool enable);

		[PreserveSig]
		[Token(Token = "0x60013DE")]
		[Address(RVA = "0x1052E28", Offset = "0x1052E28", VA = "0x1052E28")]
		public static extern void Pvr_SetAntiAliasing(int antiAliasing);

		[PreserveSig]
		[Token(Token = "0x60013DF")]
		[Address(RVA = "0x1052F38", Offset = "0x1052F38", VA = "0x1052F38")]
		public static extern void Pvr_SinglePassBeforeForwardOpaque();

		[PreserveSig]
		[Token(Token = "0x60013E0")]
		[Address(RVA = "0x1053018", Offset = "0x1053018", VA = "0x1053018")]
		public static extern void Pvr_SetCurrentRenderTexture(uint textureId);

		[PreserveSig]
		[Token(Token = "0x60013E1")]
		[Address(RVA = "0x10530F8", Offset = "0x10530F8", VA = "0x10530F8")]
		public static extern bool Pvr_SetSinglePassDepthBufferWidthHeight(int width, int height);

		[PreserveSig]
		[Token(Token = "0x60013E2")]
		[Address(RVA = "0x10531F0", Offset = "0x10531F0", VA = "0x10531F0")]
		public static extern int PVR_setPerformanceLevels(int cpuLevel, int gpuLevel);

		[PreserveSig]
		[Token(Token = "0x60013E3")]
		[Address(RVA = "0x1053310", Offset = "0x1053310", VA = "0x1053310")]
		public static extern bool Pvr_SetIPD(float distance);

		[PreserveSig]
		[Token(Token = "0x60013E4")]
		[Address(RVA = "0x1053418", Offset = "0x1053418", VA = "0x1053418")]
		public static extern float Pvr_GetIPD();

		[PreserveSig]
		[Token(Token = "0x60013E5")]
		[Address(RVA = "0x1053508", Offset = "0x1053508", VA = "0x1053508")]
		public static extern bool Pvr_SetTrackingIPDEnabled(bool enable);

		[PreserveSig]
		[Token(Token = "0x60013E6")]
		[Address(RVA = "0x1053628", Offset = "0x1053628", VA = "0x1053628")]
		public static extern bool Pvr_GetTrackingIPDEnabled();

		[PreserveSig]
		[Token(Token = "0x60013E7")]
		[Address(RVA = "0x1053738", Offset = "0x1053738", VA = "0x1053738")]
		public static extern bool Pvr_GetEyeTrackingAutoIPD(ref float autoIPD);

		[PreserveSig]
		[Token(Token = "0x60013E8")]
		[Address(RVA = "0x104C080", Offset = "0x104C080", VA = "0x104C080")]
		public static extern int PVR_GetHmdAudioStatus();

		[PreserveSig]
		[Token(Token = "0x60013E9")]
		[Address(RVA = "0x1053858", Offset = "0x1053858", VA = "0x1053858")]
		private static extern float Pvr_GetPredictedDisplayTime();

		[PreserveSig]
		[Token(Token = "0x60013EA")]
		[Address(RVA = "0x1053930", Offset = "0x1053930", VA = "0x1053930")]
		public static extern bool Pvr_SetExtraLatencyMode(int mode);

		[Token(Token = "0x60013EB")]
		public static bool UPvr_CallStaticMethod<T>(ref T result, AndroidJavaClass jclass, string name, params object[] args)
		{
			return default(bool);
		}

		[Token(Token = "0x60013EC")]
		[Address(RVA = "0x1051170", Offset = "0x1051170", VA = "0x1051170")]
		public static bool UPvr_CallStaticMethod(AndroidJavaObject jobj, string name, params object[] args)
		{
			return default(bool);
		}

		[Token(Token = "0x60013ED")]
		public static bool UPvr_CallMethod<T>(ref T result, AndroidJavaObject jobj, string name, params object[] args)
		{
			return default(bool);
		}

		[Token(Token = "0x60013EE")]
		[Address(RVA = "0x1053A4C", Offset = "0x1053A4C", VA = "0x1053A4C")]
		public static bool UPvr_CallMethod(AndroidJavaObject jobj, string name, params object[] args)
		{
			return default(bool);
		}

		[Token(Token = "0x60013EF")]
		[Address(RVA = "0x1053D44", Offset = "0x1053D44", VA = "0x1053D44")]
		public static string UPvr_GetSDKVersion()
		{
			return null;
		}

		[Token(Token = "0x60013F0")]
		[Address(RVA = "0x1053DF4", Offset = "0x1053DF4", VA = "0x1053DF4")]
		public static string UPvr_GetUnitySDKVersion()
		{
			return null;
		}

		[Token(Token = "0x60013F1")]
		[Address(RVA = "0x1053E50", Offset = "0x1053E50", VA = "0x1053E50")]
		public static string UPvr_GetDeviceMode()
		{
			return null;
		}

		[Token(Token = "0x60013F2")]
		[Address(RVA = "0x1053E58", Offset = "0x1053E58", VA = "0x1053E58")]
		public static string UPvr_GetDeviceModel()
		{
			return null;
		}

		[Token(Token = "0x60013F3")]
		[Address(RVA = "0x104AFC8", Offset = "0x104AFC8", VA = "0x104AFC8")]
		public static string UPvr_GetDeviceSN()
		{
			return null;
		}

		[Token(Token = "0x60013F4")]
		[Address(RVA = "0x104B4E0", Offset = "0x104B4E0", VA = "0x104B4E0")]
		public static AndroidJavaObject UPvr_GetCurrentActivity()
		{
			return null;
		}

		[Token(Token = "0x60013F5")]
		[Address(RVA = "0x1053E60", Offset = "0x1053E60", VA = "0x1053E60")]
		public static bool UPvr_SetMonoPresentation()
		{
			return default(bool);
		}

		[Token(Token = "0x60013F6")]
		[Address(RVA = "0x1053F70", Offset = "0x1053F70", VA = "0x1053F70")]
		public static bool UPvr_IsPresentationExisted()
		{
			return default(bool);
		}

		[Token(Token = "0x60013F7")]
		[Address(RVA = "0x10540B0", Offset = "0x10540B0", VA = "0x10540B0")]
		public static bool UPvr_GetMainActivityPauseStatus()
		{
			return default(bool);
		}

		[Token(Token = "0x60013F8")]
		[Address(RVA = "0x10541F0", Offset = "0x10541F0", VA = "0x10541F0")]
		public static void UPvr_Sleep()
		{
		}

		[Token(Token = "0x60013F9")]
		[Address(RVA = "0x105433C", Offset = "0x105433C", VA = "0x105433C")]
		public static bool UPvr_StartHomeKeyReceiver(string startreceivre)
		{
			return default(bool);
		}

		[Token(Token = "0x60013FA")]
		[Address(RVA = "0x1054678", Offset = "0x1054678", VA = "0x1054678")]
		public static bool UPvr_StopHomeKeyReceiver()
		{
			return default(bool);
		}

		[Token(Token = "0x60013FB")]
		[Address(RVA = "0x1054964", Offset = "0x1054964", VA = "0x1054964")]
		public static void UPvr_StartVRModel()
		{
		}

		[Token(Token = "0x60013FC")]
		[Address(RVA = "0x1054AB0", Offset = "0x1054AB0", VA = "0x1054AB0")]
		public static void UPvr_RemovePlatformLogo()
		{
		}

		[Token(Token = "0x60013FD")]
		[Address(RVA = "0x1054BFC", Offset = "0x1054BFC", VA = "0x1054BFC")]
		public static void UPvr_ShowPlatformLogo()
		{
		}

		[Token(Token = "0x60013FE")]
		[Address(RVA = "0x1054D48", Offset = "0x1054D48", VA = "0x1054D48")]
		public static bool UPvr_IsPicoActivity()
		{
			return default(bool);
		}

		[Token(Token = "0x60013FF")]
		[Address(RVA = "0x1054EA4", Offset = "0x1054EA4", VA = "0x1054EA4")]
		public static void UPvr_StopVRModel()
		{
		}

		[Token(Token = "0x6001400")]
		[Address(RVA = "0x1054FF0", Offset = "0x1054FF0", VA = "0x1054FF0")]
		public static string UPvr_GetCountryCode()
		{
			return null;
		}

		[Token(Token = "0x6001401")]
		[Address(RVA = "0x1055154", Offset = "0x1055154", VA = "0x1055154")]
		public static bool UPvr_SetIPD(float distance)
		{
			return default(bool);
		}

		[Token(Token = "0x6001402")]
		[Address(RVA = "0x10552E4", Offset = "0x10552E4", VA = "0x10552E4")]
		public static float UPvr_GetIPD()
		{
			return default(float);
		}

		[Token(Token = "0x6001403")]
		[Address(RVA = "0x10553B4", Offset = "0x10553B4", VA = "0x10553B4")]
		public static bool UPvr_SetTrackingIPDEnabled(bool enable)
		{
			return default(bool);
		}

		[Token(Token = "0x6001404")]
		[Address(RVA = "0x10553B8", Offset = "0x10553B8", VA = "0x10553B8")]
		public static bool UPvr_GetTrackingIPDEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x6001405")]
		[Address(RVA = "0x10553BC", Offset = "0x10553BC", VA = "0x10553BC")]
		public static bool UPvr_GetEyeTrackingAutoIPD(ref float autoipd)
		{
			return default(bool);
		}

		[Token(Token = "0x6001406")]
		[Address(RVA = "0x1041060", Offset = "0x1041060", VA = "0x1041060")]
		public static void UPvr_UnityEventData(long data)
		{
		}

		[Token(Token = "0x6001407")]
		[Address(RVA = "0x10553C0", Offset = "0x10553C0", VA = "0x10553C0")]
		public static long UPvr_GetEyeBufferData(int id)
		{
			return default(long);
		}

		[Token(Token = "0x6001408")]
		[Address(RVA = "0x1055460", Offset = "0x1055460", VA = "0x1055460")]
		public static bool UPvr_checkDevice(string packagename)
		{
			return default(bool);
		}

		[Token(Token = "0x6001409")]
		[Address(RVA = "0x105560C", Offset = "0x105560C", VA = "0x105560C")]
		public static int UPvr_GetHmdHardwareVersion()
		{
			return default(int);
		}

		[Token(Token = "0x600140A")]
		[Address(RVA = "0x1055610", Offset = "0x1055610", VA = "0x1055610")]
		public static string UPvr_GetHmdFirmwareVersion()
		{
			return null;
		}

		[Token(Token = "0x600140B")]
		[Address(RVA = "0x10556C0", Offset = "0x10556C0", VA = "0x10556C0")]
		public static string UPvr_GetHmdSerialNumber()
		{
			return null;
		}

		[Token(Token = "0x600140C")]
		[Address(RVA = "0x1055770", Offset = "0x1055770", VA = "0x1055770")]
		public static int UPvr_GetHmdBatteryStatus()
		{
			return default(int);
		}

		[Token(Token = "0x600140D")]
		[Address(RVA = "0x1055774", Offset = "0x1055774", VA = "0x1055774")]
		public static float UPvr_GetHmdBatteryTemperature()
		{
			return default(float);
		}

		[Token(Token = "0x600140E")]
		[Address(RVA = "0x1055778", Offset = "0x1055778", VA = "0x1055778")]
		public static int UPvr_SetHmdAudioStatus(bool enable)
		{
			return default(int);
		}

		[Token(Token = "0x600140F")]
		[Address(RVA = "0x105577C", Offset = "0x105577C", VA = "0x105577C")]
		public static int UPvr_GetTrackingMode()
		{
			return default(int);
		}

		[Token(Token = "0x6001410")]
		[Address(RVA = "0x1055780", Offset = "0x1055780", VA = "0x1055780")]
		public static bool UPvr_setTrackingMode(int trackingMode)
		{
			return default(bool);
		}

		[Token(Token = "0x6001411")]
		[Address(RVA = "0x1055784", Offset = "0x1055784", VA = "0x1055784")]
		public static bool UPvr_getEyeTrackingData(ref EyeTrackingData trackingData)
		{
			return default(bool);
		}

		[Token(Token = "0x6001412")]
		[Address(RVA = "0x1055A48", Offset = "0x1055A48", VA = "0x1055A48")]
		public static bool UPvr_getEyeTrackingGazeRay(ref EyeTrackingGazeRay gazeRay)
		{
			return default(bool);
		}

		[Token(Token = "0x6001413")]
		[Address(RVA = "0x1055D58", Offset = "0x1055D58", VA = "0x1055D58")]
		public static bool UPvr_getEyeTrackingGazeRayWorld(ref EyeTrackingGazeRay gazeRay)
		{
			return default(bool);
		}

		[Token(Token = "0x6001414")]
		[Address(RVA = "0x1056118", Offset = "0x1056118", VA = "0x1056118")]
		public static Vector3 UPvr_getEyeTrackingPos()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001415")]
		[Address(RVA = "0x1056320", Offset = "0x1056320", VA = "0x1056320")]
		public static int UPvr_GetPhoneScreenBrightness()
		{
			return default(int);
		}

		[Token(Token = "0x6001416")]
		[Address(RVA = "0x1056478", Offset = "0x1056478", VA = "0x1056478")]
		public static void UPvr_SetPhoneScreenBrightness(int level)
		{
		}

		[Token(Token = "0x6001417")]
		[Address(RVA = "0x1056620", Offset = "0x1056620", VA = "0x1056620")]
		public static bool UPvr_IsPicoDefaultActivity()
		{
			return default(bool);
		}

		[Token(Token = "0x6001418")]
		[Address(RVA = "0x1056A64", Offset = "0x1056A64", VA = "0x1056A64")]
		public static bool UPvr_EnableSinglePass(bool enable)
		{
			return default(bool);
		}

		[Token(Token = "0x6001419")]
		[Address(RVA = "0x1056A68", Offset = "0x1056A68", VA = "0x1056A68")]
		public static void UPvr_SetAntiAliasing(int antiAliasing)
		{
		}

		[Token(Token = "0x600141A")]
		[Address(RVA = "0x1056A6C", Offset = "0x1056A6C", VA = "0x1056A6C")]
		public static void UPvr_SinglePassBeforeForwardOpaque()
		{
		}

		[Token(Token = "0x600141B")]
		[Address(RVA = "0x1056A70", Offset = "0x1056A70", VA = "0x1056A70")]
		public static void UPvr_SetCurrentRenderTexture(uint textureId)
		{
		}

		[Token(Token = "0x600141C")]
		[Address(RVA = "0x1056A74", Offset = "0x1056A74", VA = "0x1056A74")]
		public static bool UPvr_SetSinglePassDepthBufferWidthHeight(int width, int height)
		{
			return default(bool);
		}

		[Token(Token = "0x600141D")]
		[Address(RVA = "0x1056A78", Offset = "0x1056A78", VA = "0x1056A78")]
		public static int UPVR_setPerformanceLevels(int cpuLevel, int gpuLevel)
		{
			return default(int);
		}

		[Token(Token = "0x600141E")]
		[Address(RVA = "0x1056A7C", Offset = "0x1056A7C", VA = "0x1056A7C")]
		public static int UPvr_GetColorRes(string name)
		{
			return default(int);
		}

		[Token(Token = "0x600141F")]
		[Address(RVA = "0x1056CDC", Offset = "0x1056CDC", VA = "0x1056CDC")]
		public static int UPvr_GetConfigInt(string name)
		{
			return default(int);
		}

		[Token(Token = "0x6001420")]
		[Address(RVA = "0x1056F3C", Offset = "0x1056F3C", VA = "0x1056F3C")]
		public static string UPvr_GetConfigString(string name)
		{
			return null;
		}

		[Token(Token = "0x6001421")]
		[Address(RVA = "0x10571A8", Offset = "0x10571A8", VA = "0x10571A8")]
		public static string UPvr_GetDrawableLocation(string name)
		{
			return null;
		}

		[Token(Token = "0x6001422")]
		[Address(RVA = "0x1057414", Offset = "0x1057414", VA = "0x1057414")]
		public static int UPvr_GetTextSize(string name)
		{
			return default(int);
		}

		[Token(Token = "0x6001423")]
		[Address(RVA = "0x1057674", Offset = "0x1057674", VA = "0x1057674")]
		public static string UPvr_GetLangString(string name)
		{
			return null;
		}

		[Token(Token = "0x6001424")]
		[Address(RVA = "0x10578E0", Offset = "0x10578E0", VA = "0x10578E0")]
		public static string UPvr_GetStringValue(string id, int type)
		{
			return null;
		}

		[Token(Token = "0x6001425")]
		[Address(RVA = "0x1057BC8", Offset = "0x1057BC8", VA = "0x1057BC8")]
		public static int UPvr_GetIntValue(string id, int type)
		{
			return default(int);
		}

		[Token(Token = "0x6001426")]
		[Address(RVA = "0x1057EA4", Offset = "0x1057EA4", VA = "0x1057EA4")]
		public static float UPvr_GetFloatValue(string id)
		{
			return default(float);
		}

		[Token(Token = "0x6001427")]
		[Address(RVA = "0x1058108", Offset = "0x1058108", VA = "0x1058108")]
		public static string UPvr_GetObjectOrArray(string id, int type)
		{
			return null;
		}

		[Token(Token = "0x6001428")]
		[Address(RVA = "0x10583F0", Offset = "0x10583F0", VA = "0x10583F0")]
		public static int UPvr_GetCharSpace(string id)
		{
			return default(int);
		}

		[Token(Token = "0x6001429")]
		[Address(RVA = "0x1058650", Offset = "0x1058650", VA = "0x1058650")]
		public static bool UPvr_SetExtraLatencyMode(ExtraLatencyMode mode)
		{
			return default(bool);
		}

		[Token(Token = "0x600142A")]
		[Address(RVA = "0x1058654", Offset = "0x1058654", VA = "0x1058654")]
		public static float UPvr_GetPredictedDisplayTime()
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000297")]
	public struct BoundarySystem
	{
		[Token(Token = "0x2000596")]
		public enum BoundaryType
		{
			[Token(Token = "0x4001FBF")]
			OuterBoundary,
			[Token(Token = "0x4001FC0")]
			PlayArea
		}

		[Token(Token = "0x2000597")]
		public struct BoundaryTestResult
		{
			[Token(Token = "0x4001FC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool IsTriggering;

			[Token(Token = "0x4001FC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float ClosestDistance;

			[Token(Token = "0x4001FC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Vector3 ClosestPoint;

			[Token(Token = "0x4001FC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector3 ClosestPointNormal;
		}

		[Token(Token = "0x2000598")]
		public enum BoundaryTrackingNode
		{
			[Token(Token = "0x4001FC6")]
			HandLeft,
			[Token(Token = "0x4001FC7")]
			HandRight,
			[Token(Token = "0x4001FC8")]
			Head
		}

		[Token(Token = "0x2000599")]
		public enum BoundaryTrackingState
		{
			[Token(Token = "0x4001FCA")]
			LostNoReason = 3,
			[Token(Token = "0x4001FCB")]
			LostCamera,
			[Token(Token = "0x4001FCC")]
			LostHighLight,
			[Token(Token = "0x4001FCD")]
			LostLowLight,
			[Token(Token = "0x4001FCE")]
			LostLowFeatureCount,
			[Token(Token = "0x4001FCF")]
			LostReLocation,
			[Token(Token = "0x4001FD0")]
			LostInitialization,
			[Token(Token = "0x4001FD1")]
			LostNoCamera,
			[Token(Token = "0x4001FD2")]
			LostNoIMU,
			[Token(Token = "0x4001FD3")]
			LostIMUJitter,
			[Token(Token = "0x4001FD4")]
			LostUnknown
		}

		[Token(Token = "0x4000F1A")]
		public const string LibFileName = "Pvr_UnitySDK";

		[PreserveSig]
		[Token(Token = "0x600142B")]
		[Address(RVA = "0x103EF48", Offset = "0x103EF48", VA = "0x103EF48")]
		private static extern float Pvr_GetFloorHeight();

		[PreserveSig]
		[Token(Token = "0x600142C")]
		[Address(RVA = "0x103F048", Offset = "0x103F048", VA = "0x103F048")]
		private static extern int Pvr_GetSeeThroughState();

		[PreserveSig]
		[Token(Token = "0x600142D")]
		[Address(RVA = "0x103F150", Offset = "0x103F150", VA = "0x103F150")]
		private static extern void Pvr_BoundarySetSTBackground(bool value);

		[PreserveSig]
		[Token(Token = "0x600142E")]
		[Address(RVA = "0x103F230", Offset = "0x103F230", VA = "0x103F230")]
		private static extern int Pvr_GetTrackingState();

		[PreserveSig]
		[Token(Token = "0x600142F")]
		[Address(RVA = "0x103F330", Offset = "0x103F330", VA = "0x103F330")]
		private static extern bool Pvr_GetFrameRateLimit();

		[PreserveSig]
		[Token(Token = "0x6001430")]
		[Address(RVA = "0x103F438", Offset = "0x103F438", VA = "0x103F438")]
		private static extern bool Pvr_IsBoundaryEnable();

		[PreserveSig]
		[Token(Token = "0x6001431")]
		[Address(RVA = "0x103F540", Offset = "0x103F540", VA = "0x103F540")]
		private static extern bool Pvr_BoundaryGetConfigured();

		[PreserveSig]
		[Token(Token = "0x6001432")]
		[Address(RVA = "0x103F650", Offset = "0x103F650", VA = "0x103F650")]
		private static extern bool Pvr_BoundaryTestNode(int node, bool isPlayArea, ref bool isTriggering, ref float closestDistance, ref float px, ref float py, ref float pz, ref float nx, ref float ny, ref float nz);

		[PreserveSig]
		[Token(Token = "0x6001433")]
		[Address(RVA = "0x103F7C0", Offset = "0x103F7C0", VA = "0x103F7C0")]
		private static extern bool Pvr_BoundaryTestPoint(float x, float y, float z, bool isPlayArea, ref bool isTriggering, ref float closestDistance, ref float px, ref float py, ref float pz, ref float nx, ref float ny, ref float nz);

		[PreserveSig]
		[Token(Token = "0x6001434")]
		[Address(RVA = "0x103F938", Offset = "0x103F938", VA = "0x103F938")]
		private static extern int Pvr_BoundaryGetGeometry(out IntPtr handle, bool isPlayArea);

		[PreserveSig]
		[Token(Token = "0x6001435")]
		[Address(RVA = "0x103FA58", Offset = "0x103FA58", VA = "0x103FA58")]
		private static extern int Pvr_BoundaryGetDimensions(ref float x, ref float y, ref float z, bool isPlayArea);

		[PreserveSig]
		[Token(Token = "0x6001436")]
		[Address(RVA = "0x103FB88", Offset = "0x103FB88", VA = "0x103FB88")]
		private static extern bool Pvr_BoundaryGetEnabled();

		[PreserveSig]
		[Token(Token = "0x6001437")]
		[Address(RVA = "0x103FC98", Offset = "0x103FC98", VA = "0x103FC98")]
		private static extern void Pvr_BoundarySetVisible(bool value);

		[PreserveSig]
		[Token(Token = "0x6001438")]
		[Address(RVA = "0x103FDB0", Offset = "0x103FDB0", VA = "0x103FDB0")]
		private static extern bool Pvr_BoundaryGetVisible();

		[PreserveSig]
		[Token(Token = "0x6001439")]
		[Address(RVA = "0x103FEC0", Offset = "0x103FEC0", VA = "0x103FEC0")]
		private static extern bool Pvr_EnableLWRP(bool enable);

		[PreserveSig]
		[Token(Token = "0x600143A")]
		[Address(RVA = "0x103FFD0", Offset = "0x103FFD0", VA = "0x103FFD0")]
		private static extern bool Pvr_SetViewportSize(int w, int h);

		[PreserveSig]
		[Token(Token = "0x600143B")]
		[Address(RVA = "0x10400F0", Offset = "0x10400F0", VA = "0x10400F0")]
		private static extern void Pvr_BoundarySetSeeThroughVisible(bool value);

		[PreserveSig]
		[Token(Token = "0x600143C")]
		[Address(RVA = "0x10401D8", Offset = "0x10401D8", VA = "0x10401D8")]
		private static extern void PVR_SetCameraImageRect(int width, int height);

		[PreserveSig]
		[Token(Token = "0x600143D")]
		[Address(RVA = "0x10402F8", Offset = "0x10402F8", VA = "0x10402F8")]
		private static extern void Pvr_SetGuardianSystemDisable(bool value);

		[PreserveSig]
		[Token(Token = "0x600143E")]
		[Address(RVA = "0x10403D8", Offset = "0x10403D8", VA = "0x10403D8")]
		private static extern int Pvr_GetDialogState();

		[Token(Token = "0x600143F")]
		[Address(RVA = "0x10404D4", Offset = "0x10404D4", VA = "0x10404D4")]
		public static float UPvr_GetFloorHeight()
		{
			return default(float);
		}

		[Token(Token = "0x6001440")]
		[Address(RVA = "0x10404D8", Offset = "0x10404D8", VA = "0x10404D8")]
		public static int UPvr_GetSeeThroughState()
		{
			return default(int);
		}

		[Token(Token = "0x6001441")]
		[Address(RVA = "0x10404DC", Offset = "0x10404DC", VA = "0x10404DC")]
		public static void UPvr_EnableSeeThroughManual(bool enable)
		{
		}

		[Token(Token = "0x6001442")]
		[Address(RVA = "0x10404E0", Offset = "0x10404E0", VA = "0x10404E0")]
		public static BoundaryTrackingState UPvr_GetTrackingState()
		{
			return default(BoundaryTrackingState);
		}

		[Token(Token = "0x6001443")]
		[Address(RVA = "0x10404E4", Offset = "0x10404E4", VA = "0x10404E4")]
		public static bool UPvr_GetFrameRateLimit()
		{
			return default(bool);
		}

		[Token(Token = "0x6001444")]
		[Address(RVA = "0x10404E8", Offset = "0x10404E8", VA = "0x10404E8")]
		public static bool UPvr_IsBoundaryEnable()
		{
			return default(bool);
		}

		[Token(Token = "0x6001445")]
		[Address(RVA = "0x10404EC", Offset = "0x10404EC", VA = "0x10404EC")]
		public static bool UPvr_BoundaryGetConfigured()
		{
			return default(bool);
		}

		[Token(Token = "0x6001446")]
		[Address(RVA = "0x10404F0", Offset = "0x10404F0", VA = "0x10404F0")]
		public static BoundaryTestResult UPvr_BoundaryTestNode(BoundaryTrackingNode node, BoundaryType boundaryType)
		{
			return default(BoundaryTestResult);
		}

		[Token(Token = "0x6001447")]
		[Address(RVA = "0x1040674", Offset = "0x1040674", VA = "0x1040674")]
		public static BoundaryTestResult UPvr_BoundaryTestPoint(Vector3 point, BoundaryType boundaryType)
		{
			return default(BoundaryTestResult);
		}

		[Token(Token = "0x6001448")]
		[Address(RVA = "0x1040800", Offset = "0x1040800", VA = "0x1040800")]
		public static Vector3[] UPvr_BoundaryGetGeometry(BoundaryType boundaryType)
		{
			return null;
		}

		[Token(Token = "0x6001449")]
		[Address(RVA = "0x1040A8C", Offset = "0x1040A8C", VA = "0x1040A8C")]
		public static Vector3 UPvr_BoundaryGetDimensions(BoundaryType boundaryType)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600144A")]
		[Address(RVA = "0x1040AF4", Offset = "0x1040AF4", VA = "0x1040AF4")]
		public static bool UPvr_BoundaryGetEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x600144B")]
		[Address(RVA = "0x1040AF8", Offset = "0x1040AF8", VA = "0x1040AF8")]
		public static void UPvr_BoundarySetVisible(bool value)
		{
		}

		[Token(Token = "0x600144C")]
		[Address(RVA = "0x1040AFC", Offset = "0x1040AFC", VA = "0x1040AFC")]
		public static bool UPvr_BoundaryGetVisible()
		{
			return default(bool);
		}

		[Token(Token = "0x600144D")]
		[Address(RVA = "0x1040B00", Offset = "0x1040B00", VA = "0x1040B00")]
		public static bool UPvr_EnableLWRP(bool enable)
		{
			return default(bool);
		}

		[Token(Token = "0x600144E")]
		[Address(RVA = "0x1040B04", Offset = "0x1040B04", VA = "0x1040B04")]
		public static bool UPvr_SetViewportSize(int width, int height)
		{
			return default(bool);
		}

		[Token(Token = "0x600144F")]
		[Address(RVA = "0x1040B08", Offset = "0x1040B08", VA = "0x1040B08")]
		public static void UPvr_StartCameraFrame()
		{
		}

		[Token(Token = "0x6001450")]
		[Address(RVA = "0x1040C8C", Offset = "0x1040C8C", VA = "0x1040C8C")]
		public static void UPvr_StopCameraFrame()
		{
		}

		[Token(Token = "0x6001451")]
		[Address(RVA = "0x1040E10", Offset = "0x1040E10", VA = "0x1040E10")]
		public static void UPvr_BoundaryGetSeeThroughData(int cameraIndex, RenderTexture renderTexture)
		{
		}

		[Token(Token = "0x6001452")]
		[Address(RVA = "0x1041064", Offset = "0x1041064", VA = "0x1041064")]
		public static void UPvr_BoundarySetCameraImageRect(int width, int height)
		{
		}

		[Token(Token = "0x6001453")]
		[Address(RVA = "0x10411C4", Offset = "0x10411C4", VA = "0x10411C4")]
		public static void UPvr_BoundarySetSeeThroughVisible(bool value)
		{
		}

		[Token(Token = "0x6001454")]
		[Address(RVA = "0x104131C", Offset = "0x104131C", VA = "0x104131C")]
		public static void UPvr_SetGuardianSystemDisable(bool value)
		{
		}

		[Token(Token = "0x6001455")]
		[Address(RVA = "0x1041474", Offset = "0x1041474", VA = "0x1041474")]
		public static int UPvr_GetDialogState()
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000298")]
	public struct PlatformSettings
	{
		[Token(Token = "0x6001456")]
		[Address(RVA = "0x104AD30", Offset = "0x104AD30", VA = "0x104AD30")]
		public static Pvr_UnitySDKPlatformSetting.simulationType UPvr_IsCurrentDeviceValid()
		{
			return default(Pvr_UnitySDKPlatformSetting.simulationType);
		}

		[Token(Token = "0x6001457")]
		[Address(RVA = "0x104B14C", Offset = "0x104B14C", VA = "0x104B14C")]
		public static bool UPvr_AppEntitlementCheck(string appid)
		{
			return default(bool);
		}

		[Token(Token = "0x6001458")]
		[Address(RVA = "0x104B594", Offset = "0x104B594", VA = "0x104B594")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x2FC254", Offset = "0x2FC254")]
		public static bool UPvr_KeyEntitlementCheck(string publicKey)
		{
			return default(bool);
		}

		[Token(Token = "0x6001459")]
		[Address(RVA = "0x104B928", Offset = "0x104B928", VA = "0x104B928")]
		public static int UPvr_AppEntitlementCheckExtra(string appid)
		{
			return default(int);
		}

		[Token(Token = "0x600145A")]
		[Address(RVA = "0x104BCD0", Offset = "0x104BCD0", VA = "0x104BCD0")]
		public static int UPvr_KeyEntitlementCheckExtra(string publicKey)
		{
			return default(int);
		}

		[Token(Token = "0x600145B")]
		[Address(RVA = "0x104C078", Offset = "0x104C078", VA = "0x104C078")]
		public static int UPvr_GetHmdAudioStatus()
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000299")]
	public enum DeviceCommand
	{
		[Token(Token = "0x4000F1C")]
		SET_PICO_NEO_HMD_BRIGHTNESS = 12,
		[Token(Token = "0x4000F1D")]
		SET_PICO_NEO_HMD_SLEEPDELAY
	}
	[Token(Token = "0x200029A")]
	public enum BrightnessLevel
	{
		[Token(Token = "0x4000F1F")]
		VR_BRIGHTNESS_LEVEL_MIN = 1,
		[Token(Token = "0x4000F20")]
		VR_BRIGHTNESS_LEVEL_MAX = 100,
		[Token(Token = "0x4000F21")]
		VR_BRIGHTNESS_LEVEL_DOWN = 1000,
		[Token(Token = "0x4000F22")]
		VR_BRIGHTNESS_LEVEL_UP = 1001,
		[Token(Token = "0x4000F23")]
		VR_BRIGHTNESS_LEVEL_SCREEN_OFF = -100
	}
	[Token(Token = "0x200029B")]
	public struct VolumePowerBrightness
	{
		[Token(Token = "0x4000F24")]
		public const string LibFileName = "Pvr_UnitySDK";

		[Token(Token = "0x4000F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AndroidJavaObject activity;

		[Token(Token = "0x4000F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static AndroidJavaClass javaSysActivityClass;

		[Token(Token = "0x4000F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static AndroidJavaClass batteryjavaVrActivityClass;

		[Token(Token = "0x4000F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static AndroidJavaClass volumejavaVrActivityClass;

		[PreserveSig]
		[Token(Token = "0x600145C")]
		[Address(RVA = "0x105C190", Offset = "0x105C190", VA = "0x105C190")]
		public static extern void Pvr_SetInitActivity(IntPtr activity, IntPtr vrActivityClass);

		[PreserveSig]
		[Token(Token = "0x600145D")]
		[Address(RVA = "0x105C268", Offset = "0x105C268", VA = "0x105C268")]
		private static extern bool Pvr_IsHmdExist();

		[PreserveSig]
		[Token(Token = "0x600145E")]
		[Address(RVA = "0x105C368", Offset = "0x105C368", VA = "0x105C368")]
		private static extern int Pvr_GetHmdScreenBrightness();

		[PreserveSig]
		[Token(Token = "0x600145F")]
		[Address(RVA = "0x105C440", Offset = "0x105C440", VA = "0x105C440")]
		private static extern bool Pvr_SetHmdScreenBrightness(int brightness);

		[Token(Token = "0x6001460")]
		[Address(RVA = "0x105C524", Offset = "0x105C524", VA = "0x105C524")]
		public static bool UPvr_IsHmdExist()
		{
			return default(bool);
		}

		[Token(Token = "0x6001461")]
		[Address(RVA = "0x105C528", Offset = "0x105C528", VA = "0x105C528")]
		public static int UPvr_GetHmdScreenBrightness()
		{
			return default(int);
		}

		[Token(Token = "0x6001462")]
		[Address(RVA = "0x105C52C", Offset = "0x105C52C", VA = "0x105C52C")]
		public static bool UPvr_SetHmdScreenBrightness(int brightness)
		{
			return default(bool);
		}

		[Token(Token = "0x6001463")]
		[Address(RVA = "0x105C530", Offset = "0x105C530", VA = "0x105C530")]
		public static bool UPvr_SetCommonBrightness(int brightness)
		{
			return default(bool);
		}

		[Token(Token = "0x6001464")]
		[Address(RVA = "0x105C844", Offset = "0x105C844", VA = "0x105C844")]
		public static int UPvr_GetCommonBrightness()
		{
			return default(int);
		}

		[Token(Token = "0x6001465")]
		[Address(RVA = "0x105CAE8", Offset = "0x105CAE8", VA = "0x105CAE8")]
		public static int[] UPvr_GetScreenBrightnessLevel()
		{
			return null;
		}

		[Token(Token = "0x6001466")]
		[Address(RVA = "0x105CD54", Offset = "0x105CD54", VA = "0x105CD54")]
		public static void UPvr_SetScreenBrightnessLevel(int vrBrightness, int level)
		{
		}

		[Token(Token = "0x6001467")]
		[Address(RVA = "0x105D004", Offset = "0x105D004", VA = "0x105D004")]
		public static bool UPvr_SetDevicePropForUser(DeviceCommand deviceid, string number)
		{
			return default(bool);
		}

		[Token(Token = "0x6001468")]
		[Address(RVA = "0x105D1D0", Offset = "0x105D1D0", VA = "0x105D1D0")]
		public static string UPvr_GetDevicePropForUser(DeviceCommand deviceid)
		{
			return null;
		}

		[Token(Token = "0x6001469")]
		[Address(RVA = "0x105D354", Offset = "0x105D354", VA = "0x105D354")]
		public static bool UPvr_InitBatteryClass()
		{
			return default(bool);
		}

		[Token(Token = "0x600146A")]
		[Address(RVA = "0x105D604", Offset = "0x105D604", VA = "0x105D604")]
		public static bool UPvr_InitBatteryVolClass()
		{
			return default(bool);
		}

		[Token(Token = "0x600146B")]
		[Address(RVA = "0x105D9C0", Offset = "0x105D9C0", VA = "0x105D9C0")]
		public static bool UPvr_StartBatteryReceiver(string startreceivre)
		{
			return default(bool);
		}

		[Token(Token = "0x600146C")]
		[Address(RVA = "0x105DC78", Offset = "0x105DC78", VA = "0x105DC78")]
		public static bool UPvr_StopBatteryReceiver()
		{
			return default(bool);
		}

		[Token(Token = "0x600146D")]
		[Address(RVA = "0x105C560", Offset = "0x105C560", VA = "0x105C560")]
		public static bool UPvr_SetBrightness(int brightness)
		{
			return default(bool);
		}

		[Token(Token = "0x600146E")]
		[Address(RVA = "0x105C868", Offset = "0x105C868", VA = "0x105C868")]
		public static int UPvr_GetCurrentBrightness()
		{
			return default(int);
		}

		[Token(Token = "0x600146F")]
		[Address(RVA = "0x105CAEC", Offset = "0x105CAEC", VA = "0x105CAEC")]
		public static int[] Pvr_GetScreenBrightnessLevel()
		{
			return null;
		}

		[Token(Token = "0x6001470")]
		[Address(RVA = "0x105CD58", Offset = "0x105CD58", VA = "0x105CD58")]
		public static void Pvr_SetScreenBrightnessLevel(int vrBrightness, int level)
		{
		}

		[Token(Token = "0x6001471")]
		[Address(RVA = "0x105DED8", Offset = "0x105DED8", VA = "0x105DED8")]
		public static bool UPvr_StartAudioReceiver(string startreceivre)
		{
			return default(bool);
		}

		[Token(Token = "0x6001472")]
		[Address(RVA = "0x105E190", Offset = "0x105E190", VA = "0x105E190")]
		public static bool UPvr_StopAudioReceiver()
		{
			return default(bool);
		}

		[Token(Token = "0x6001473")]
		[Address(RVA = "0x105E3F0", Offset = "0x105E3F0", VA = "0x105E3F0")]
		public static int UPvr_GetMaxVolumeNumber()
		{
			return default(int);
		}

		[Token(Token = "0x6001474")]
		[Address(RVA = "0x105E644", Offset = "0x105E644", VA = "0x105E644")]
		public static int UPvr_GetCurrentVolumeNumber()
		{
			return default(int);
		}

		[Token(Token = "0x6001475")]
		[Address(RVA = "0x105E898", Offset = "0x105E898", VA = "0x105E898")]
		public static bool UPvr_VolumeUp()
		{
			return default(bool);
		}

		[Token(Token = "0x6001476")]
		[Address(RVA = "0x105EACC", Offset = "0x105EACC", VA = "0x105EACC")]
		public static bool UPvr_VolumeDown()
		{
			return default(bool);
		}

		[Token(Token = "0x6001477")]
		[Address(RVA = "0x105ED00", Offset = "0x105ED00", VA = "0x105ED00")]
		public static bool UPvr_SetVolumeNum(int volume)
		{
			return default(bool);
		}

		[Token(Token = "0x6001478")]
		[Address(RVA = "0x105EF3C", Offset = "0x105EF3C", VA = "0x105EF3C")]
		public static bool UPvr_SetAudio(string s)
		{
			return default(bool);
		}

		[Token(Token = "0x6001479")]
		[Address(RVA = "0x105EF44", Offset = "0x105EF44", VA = "0x105EF44")]
		public static bool UPvr_SetBattery(string s)
		{
			return default(bool);
		}

		[Token(Token = "0x600147A")]
		[Address(RVA = "0x105D1D4", Offset = "0x105D1D4", VA = "0x105D1D4")]
		private static string getDevicePropForUser(DeviceCommand deviceid)
		{
			return null;
		}

		[Token(Token = "0x600147B")]
		[Address(RVA = "0x105D008", Offset = "0x105D008", VA = "0x105D008")]
		private static bool setDevicePropForUser(DeviceCommand deviceid, string number)
		{
			return default(bool);
		}
	}
}
namespace Pvr_UnitySDKAPI.Achievement
{
	[Token(Token = "0x200029C")]
	public sealed class AchievementCore
	{
		[Token(Token = "0x4000F29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool IsPlatformInitialized;

		[Token(Token = "0x4000F2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public static bool LogMessages;

		[Token(Token = "0x600147C")]
		[Address(RVA = "0x1036D78", Offset = "0x1036D78", VA = "0x1036D78")]
		public static bool IsInitialized()
		{
			return default(bool);
		}

		[Token(Token = "0x600147D")]
		[Address(RVA = "0x1036E04", Offset = "0x1036E04", VA = "0x1036E04")]
		public static void Initialize()
		{
		}

		[Token(Token = "0x600147E")]
		[Address(RVA = "0x1036E08", Offset = "0x1036E08", VA = "0x1036E08")]
		public static void RegisterNetwork()
		{
		}

		[Token(Token = "0x600147F")]
		[Address(RVA = "0x1037028", Offset = "0x1037028", VA = "0x1037028")]
		public static void UnRegisterNetwork()
		{
		}

		[Token(Token = "0x6001480")]
		[Address(RVA = "0x1037204", Offset = "0x1037204", VA = "0x1037204")]
		public AchievementCore()
		{
		}
	}
	[Token(Token = "0x200029D")]
	public static class Achievements
	{
		[Token(Token = "0x6001482")]
		[Address(RVA = "0x1037284", Offset = "0x1037284", VA = "0x1037284")]
		public static Pvr_Request<Pvr_AchievementUpdate> Init()
		{
			return null;
		}

		[Token(Token = "0x6001483")]
		[Address(RVA = "0x1037B08", Offset = "0x1037B08", VA = "0x1037B08")]
		public static Pvr_Request<Pvr_AchievementUpdate> AddCount(string name, long count)
		{
			return null;
		}

		[Token(Token = "0x6001484")]
		[Address(RVA = "0x1037ED4", Offset = "0x1037ED4", VA = "0x1037ED4")]
		public static Pvr_Request<Pvr_AchievementUpdate> AddFields(string name, string fields)
		{
			return null;
		}

		[Token(Token = "0x6001485")]
		[Address(RVA = "0x1038268", Offset = "0x1038268", VA = "0x1038268")]
		public static Pvr_Request<Pvr_AchievementDefinitionList> GetAllDefinitions()
		{
			return null;
		}

		[Token(Token = "0x6001486")]
		[Address(RVA = "0x1038604", Offset = "0x1038604", VA = "0x1038604")]
		public static Pvr_Request<Pvr_AchievementProgressList> GetAllProgress()
		{
			return null;
		}

		[Token(Token = "0x6001487")]
		[Address(RVA = "0x10388E0", Offset = "0x10388E0", VA = "0x10388E0")]
		public static Pvr_Request<Pvr_AchievementDefinitionList> GetDefinitionsByName(string[] names)
		{
			return null;
		}

		[Token(Token = "0x6001488")]
		[Address(RVA = "0x1038C70", Offset = "0x1038C70", VA = "0x1038C70")]
		public static Pvr_Request<Pvr_AchievementProgressList> GetProgressByName(string[] names)
		{
			return null;
		}

		[Token(Token = "0x6001489")]
		[Address(RVA = "0x1038FA8", Offset = "0x1038FA8", VA = "0x1038FA8")]
		public static Pvr_Request<Pvr_AchievementUpdate> Unlock(string name)
		{
			return null;
		}

		[Token(Token = "0x600148A")]
		[Address(RVA = "0x10392E0", Offset = "0x10392E0", VA = "0x10392E0")]
		public static Pvr_Request<Pvr_AchievementDefinitionList> GetNextAchievementDefinitionListPage(Pvr_AchievementDefinitionList list)
		{
			return null;
		}

		[Token(Token = "0x600148B")]
		[Address(RVA = "0x1039840", Offset = "0x1039840", VA = "0x1039840")]
		public static Pvr_Request<Pvr_AchievementProgressList> GetNextAchievementProgressListPage(Pvr_AchievementProgressList list)
		{
			return null;
		}
	}
	[Token(Token = "0x200029E")]
	public enum AchievementType
	{
		[Token(Token = "0x4000F2C")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x2F58B0", Offset = "0x2F58B0")]
		Unknown,
		[Token(Token = "0x4000F2D")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x2F58E4", Offset = "0x2F58E4")]
		Simple,
		[Token(Token = "0x4000F2E")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x2F5918", Offset = "0x2F5918")]
		Bitfield,
		[Token(Token = "0x4000F2F")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x2F5950", Offset = "0x2F5950")]
		Count
	}
	[Token(Token = "0x200029F")]
	public class Pvr_AchievementAPI
	{
		[Token(Token = "0x4000F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static AndroidJavaClass achievementAPI;

		[Token(Token = "0x4000F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static AndroidJavaClass definitionArrayHandle;

		[Token(Token = "0x4000F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static AndroidJavaClass definitionHandle;

		[Token(Token = "0x4000F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static AndroidJavaClass progressArrayHandle;

		[Token(Token = "0x4000F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static AndroidJavaClass progressHandle;

		[Token(Token = "0x4000F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static AndroidJavaClass updateHandle;

		[Token(Token = "0x4000F36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static AndroidJavaObject errorHandle;

		[Token(Token = "0x4000F37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private static AndroidJavaObject unityInterface;

		[Token(Token = "0x4000F38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static string openId;

		[Token(Token = "0x4000F39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private static string accessToken;

		[Token(Token = "0x4000F3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static string appId;

		[Token(Token = "0x600148C")]
		[Address(RVA = "0x1037404", Offset = "0x1037404", VA = "0x1037404")]
		internal static long Init()
		{
			return default(long);
		}

		[Token(Token = "0x600148D")]
		[Address(RVA = "0x1036E80", Offset = "0x1036E80", VA = "0x1036E80")]
		internal static void RegisterNetwork()
		{
		}

		[Token(Token = "0x600148E")]
		[Address(RVA = "0x10370A0", Offset = "0x10370A0", VA = "0x10370A0")]
		internal static void UnRegisterNetwork()
		{
		}

		[Token(Token = "0x600148F")]
		[Address(RVA = "0x103A4D0", Offset = "0x103A4D0", VA = "0x103A4D0")]
		internal static AndroidJavaObject PopMessage()
		{
			return null;
		}

		[Token(Token = "0x6001490")]
		[Address(RVA = "0x103A640", Offset = "0x103A640", VA = "0x103A640")]
		internal static string pvr_Error_GetMessage(AndroidJavaObject popMessage)
		{
			return null;
		}

		[Token(Token = "0x6001491")]
		[Address(RVA = "0x103A788", Offset = "0x103A788", VA = "0x103A788")]
		internal static int pvr_Error_GetHttpCode(AndroidJavaObject popMessage)
		{
			return default(int);
		}

		[Token(Token = "0x6001492")]
		[Address(RVA = "0x103A8D0", Offset = "0x103A8D0", VA = "0x103A8D0")]
		internal static int pvr_Error_GetCode(AndroidJavaObject popMessage)
		{
			return default(int);
		}

		[Token(Token = "0x6001493")]
		[Address(RVA = "0x1037CA0", Offset = "0x1037CA0", VA = "0x1037CA0")]
		internal static long pvr_Achievements_AddCount(string name, long count)
		{
			return default(long);
		}

		[Token(Token = "0x6001494")]
		[Address(RVA = "0x1038064", Offset = "0x1038064", VA = "0x1038064")]
		internal static long pvr_Achievements_AddFields(string name, string fields)
		{
			return default(long);
		}

		[Token(Token = "0x6001495")]
		[Address(RVA = "0x10383E8", Offset = "0x10383E8", VA = "0x10383E8")]
		internal static long pvr_Achievements_GetAllDefinitions()
		{
			return default(long);
		}

		[Token(Token = "0x6001496")]
		[Address(RVA = "0x1038784", Offset = "0x1038784", VA = "0x1038784")]
		internal static long pvr_Achievements_GetAllProgress()
		{
			return default(long);
		}

		[Token(Token = "0x6001497")]
		[Address(RVA = "0x1038A68", Offset = "0x1038A68", VA = "0x1038A68")]
		internal static long pvr_Achievements_GetDefinitionsByName(string[] names, int v)
		{
			return default(long);
		}

		[Token(Token = "0x6001498")]
		[Address(RVA = "0x1038DF8", Offset = "0x1038DF8", VA = "0x1038DF8")]
		internal static long pvr_Achievements_GetProgressByName(string[] names, int v)
		{
			return default(long);
		}

		[Token(Token = "0x6001499")]
		[Address(RVA = "0x1039130", Offset = "0x1039130", VA = "0x1039130")]
		internal static long pvr_Achievements_Unlock(string name)
		{
			return default(long);
		}

		[Token(Token = "0x600149A")]
		[Address(RVA = "0x1039500", Offset = "0x1039500", VA = "0x1039500")]
		internal static long pvr_HTTP_GetWithMessageType(string nextUrl, Pvr_Message.MessageType messageType)
		{
			return default(long);
		}

		[Token(Token = "0x600149B")]
		[Address(RVA = "0x103AA18", Offset = "0x103AA18", VA = "0x103AA18")]
		internal static long pvr_Message_GetType(AndroidJavaObject popMessage)
		{
			return default(long);
		}

		[Token(Token = "0x600149C")]
		[Address(RVA = "0x103AC30", Offset = "0x103AC30", VA = "0x103AC30")]
		internal static bool pvr_Message_IsError(AndroidJavaObject popMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x600149D")]
		[Address(RVA = "0x103AD60", Offset = "0x103AD60", VA = "0x103AD60")]
		internal static long pvr_Message_GetRequestID(AndroidJavaObject popMessage)
		{
			return default(long);
		}

		[Token(Token = "0x600149E")]
		[Address(RVA = "0x103A3A0", Offset = "0x103A3A0", VA = "0x103A3A0")]
		internal static string pvr_Message_GetString(AndroidJavaObject popMessage)
		{
			return null;
		}

		[Token(Token = "0x600149F")]
		[Address(RVA = "0x103AE90", Offset = "0x103AE90", VA = "0x103AE90")]
		internal static bool pvr_AchievementUpdate_GetJustUnlocked(AndroidJavaObject popMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60014A0")]
		[Address(RVA = "0x103AFD8", Offset = "0x103AFD8", VA = "0x103AFD8")]
		internal static string pvr_AchievementUpdate_GetName(AndroidJavaObject popMessage)
		{
			return null;
		}

		[Token(Token = "0x60014A1")]
		[Address(RVA = "0x103B120", Offset = "0x103B120", VA = "0x103B120")]
		internal static int pvr_AchievementProgressArray_GetSize(AndroidJavaObject msg)
		{
			return default(int);
		}

		[Token(Token = "0x60014A2")]
		[Address(RVA = "0x103B268", Offset = "0x103B268", VA = "0x103B268")]
		internal static AndroidJavaObject pvr_AchievementProgressArray_GetElement(AndroidJavaObject msg, int index)
		{
			return null;
		}

		[Token(Token = "0x60014A3")]
		[Address(RVA = "0x103B42C", Offset = "0x103B42C", VA = "0x103B42C")]
		internal static string pvr_AchievementProgressArray_GetNextUrl(AndroidJavaObject msg)
		{
			return null;
		}

		[Token(Token = "0x60014A4")]
		[Address(RVA = "0x103B574", Offset = "0x103B574", VA = "0x103B574")]
		internal static string pvr_AchievementProgress_GetBitfield(AndroidJavaObject msg)
		{
			return null;
		}

		[Token(Token = "0x60014A5")]
		[Address(RVA = "0x103B6BC", Offset = "0x103B6BC", VA = "0x103B6BC")]
		internal static long pvr_AchievementProgress_GetCount(AndroidJavaObject msg)
		{
			return default(long);
		}

		[Token(Token = "0x60014A6")]
		[Address(RVA = "0x103B804", Offset = "0x103B804", VA = "0x103B804")]
		internal static bool pvr_AchievementProgress_GetIsUnlocked(AndroidJavaObject msg)
		{
			return default(bool);
		}

		[Token(Token = "0x60014A7")]
		[Address(RVA = "0x103B94C", Offset = "0x103B94C", VA = "0x103B94C")]
		internal static string pvr_AchievementProgress_GetName(AndroidJavaObject msg)
		{
			return null;
		}

		[Token(Token = "0x60014A8")]
		[Address(RVA = "0x103BA94", Offset = "0x103BA94", VA = "0x103BA94")]
		internal static DateTime pvr_AchievementProgress_GetUnlockTime(AndroidJavaObject msg)
		{
			return default(DateTime);
		}

		[Token(Token = "0x60014A9")]
		[Address(RVA = "0x103BC2C", Offset = "0x103BC2C", VA = "0x103BC2C")]
		internal static DateTime DateTimeFromNative(long seconds_since_the_one_true_epoch)
		{
			return default(DateTime);
		}

		[Token(Token = "0x60014AA")]
		[Address(RVA = "0x103BCC8", Offset = "0x103BCC8", VA = "0x103BCC8")]
		internal static int pvr_AchievementDefinitionArray_GetSize(AndroidJavaObject msg)
		{
			return default(int);
		}

		[Token(Token = "0x60014AB")]
		[Address(RVA = "0x103BE10", Offset = "0x103BE10", VA = "0x103BE10")]
		internal static AndroidJavaObject pvr_AchievementDefinitionArray_GetElement(AndroidJavaObject msg, int index)
		{
			return null;
		}

		[Token(Token = "0x60014AC")]
		[Address(RVA = "0x103BFD4", Offset = "0x103BFD4", VA = "0x103BFD4")]
		internal static string pvr_AchievementDefinitionArray_GetNextUrl(AndroidJavaObject msg)
		{
			return null;
		}

		[Token(Token = "0x60014AD")]
		[Address(RVA = "0x103C11C", Offset = "0x103C11C", VA = "0x103C11C")]
		internal static AchievementType pvr_AchievementDefinition_GetType(AndroidJavaObject msg)
		{
			return default(AchievementType);
		}

		[Token(Token = "0x60014AE")]
		[Address(RVA = "0x103C34C", Offset = "0x103C34C", VA = "0x103C34C")]
		internal static string pvr_AchievementDefinition_GetName(AndroidJavaObject msg)
		{
			return null;
		}

		[Token(Token = "0x60014AF")]
		[Address(RVA = "0x103C494", Offset = "0x103C494", VA = "0x103C494")]
		internal static int pvr_AchievementDefinition_GetBitfieldLength(AndroidJavaObject msg)
		{
			return default(int);
		}

		[Token(Token = "0x60014B0")]
		[Address(RVA = "0x103C5DC", Offset = "0x103C5DC", VA = "0x103C5DC")]
		internal static long pvr_AchievementDefinition_GetTarget(AndroidJavaObject msg)
		{
			return default(long);
		}

		[Token(Token = "0x60014B1")]
		[Address(RVA = "0x103C724", Offset = "0x103C724", VA = "0x103C724")]
		internal static string pvr_AchievementDefinition_GetTitle(AndroidJavaObject msg)
		{
			return null;
		}

		[Token(Token = "0x60014B2")]
		[Address(RVA = "0x103C86C", Offset = "0x103C86C", VA = "0x103C86C")]
		internal static string pvr_AchievementDefinition_GetUnlockedDescription(AndroidJavaObject msg)
		{
			return null;
		}

		[Token(Token = "0x60014B3")]
		[Address(RVA = "0x103C9B4", Offset = "0x103C9B4", VA = "0x103C9B4")]
		internal static string pvr_AchievementDefinition_GetLockedIcon(AndroidJavaObject msg)
		{
			return null;
		}

		[Token(Token = "0x60014B4")]
		[Address(RVA = "0x103CAFC", Offset = "0x103CAFC", VA = "0x103CAFC")]
		internal static bool pvr_AchievementDefinition_GetIsSecrect(AndroidJavaObject msg)
		{
			return default(bool);
		}

		[Token(Token = "0x60014B5")]
		[Address(RVA = "0x103CC44", Offset = "0x103CC44", VA = "0x103CC44")]
		internal static string pvr_AchievementDefinition_GetUnlockedIcon(AndroidJavaObject msg)
		{
			return null;
		}

		[Token(Token = "0x60014B6")]
		[Address(RVA = "0x103CD8C", Offset = "0x103CD8C", VA = "0x103CD8C")]
		internal static string pvr_AchievementDefinition_GetDescription(AndroidJavaObject msg)
		{
			return null;
		}

		[Token(Token = "0x60014B7")]
		[Address(RVA = "0x103CED4", Offset = "0x103CED4", VA = "0x103CED4")]
		public Pvr_AchievementAPI()
		{
		}
	}
	[Token(Token = "0x20002A0")]
	public class Pvr_AchievementDefinition
	{
		[Token(Token = "0x4000F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly AchievementType Type;

		[Token(Token = "0x4000F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly string Name;

		[Token(Token = "0x4000F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly int BitfieldLength;

		[Token(Token = "0x4000F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly long Target;

		[Token(Token = "0x4000F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly string Title;

		[Token(Token = "0x4000F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public readonly string Description;

		[Token(Token = "0x4000F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly string UnlockedDescription;

		[Token(Token = "0x4000F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public readonly string UnlockedIcon;

		[Token(Token = "0x4000F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly string LockedIcon;

		[Token(Token = "0x4000F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public readonly bool IsSecrect;

		[Token(Token = "0x60014B9")]
		[Address(RVA = "0x103D29C", Offset = "0x103D29C", VA = "0x103D29C")]
		public Pvr_AchievementDefinition(AndroidJavaObject msg)
		{
		}
	}
	[Token(Token = "0x20002A1")]
	public class Pvr_AchievementDefinitionList : Pvr_DeserializableList<Pvr_AchievementDefinition>
	{
		[Token(Token = "0x60014BA")]
		[Address(RVA = "0x1039BBC", Offset = "0x1039BBC", VA = "0x1039BBC")]
		public Pvr_AchievementDefinitionList(AndroidJavaObject msg)
		{
		}
	}
	[Token(Token = "0x20002A2")]
	public class Pvr_AchievementProgress
	{
		[Token(Token = "0x4000F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string Bitfield;

		[Token(Token = "0x4000F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly long Count;

		[Token(Token = "0x4000F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly bool IsUnlocked;

		[Token(Token = "0x4000F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public readonly string Name;

		[Token(Token = "0x4000F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly DateTime UnlockTime;

		[Token(Token = "0x60014BB")]
		[Address(RVA = "0x103D39C", Offset = "0x103D39C", VA = "0x103D39C")]
		public Pvr_AchievementProgress(AndroidJavaObject msg)
		{
		}
	}
	[Token(Token = "0x20002A3")]
	public class Pvr_AchievementProgressList : Pvr_DeserializableList<Pvr_AchievementProgress>
	{
		[Token(Token = "0x60014BC")]
		[Address(RVA = "0x1039EC0", Offset = "0x1039EC0", VA = "0x1039EC0")]
		public Pvr_AchievementProgressList(AndroidJavaObject msg)
		{
		}
	}
	[Token(Token = "0x20002A4")]
	public class Pvr_AchievementUpdate
	{
		[Token(Token = "0x4000F4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly bool JustUnlocked;

		[Token(Token = "0x4000F4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly string Name;

		[Token(Token = "0x60014BD")]
		[Address(RVA = "0x103A1C4", Offset = "0x103A1C4", VA = "0x103A1C4")]
		public Pvr_AchievementUpdate(AndroidJavaObject msg)
		{
		}
	}
	[Token(Token = "0x20002A5")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x2EA240", Offset = "0x2EA240")]
	public class Pvr_DeserializableList<T> : IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable
	{
		[Token(Token = "0x4000F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected List<T> data;

		[Token(Token = "0x4000F4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected string nextUrl;

		[Token(Token = "0x4000F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected string previousUrl;

		[Token(Token = "0x170002C2")]
		public int Count
		{
			[Token(Token = "0x60014BE")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002C3")]
		private bool System.Collections.Generic.ICollection<T>.IsReadOnly
		{
			[Token(Token = "0x60014BF")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002C4")]
		public T Item
		{
			[Token(Token = "0x60014C1")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x60014C2")]
			set
			{
			}
		}

		[Token(Token = "0x170002C5")]
		public bool HasNextPage
		{
			[Token(Token = "0x60014CD")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002C6")]
		public bool HasPreviousPage
		{
			[Token(Token = "0x60014CE")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002C7")]
		public string NextUrl
		{
			[Token(Token = "0x60014CF")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002C8")]
		public string PreviousUrl
		{
			[Token(Token = "0x60014D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60014C0")]
		public int IndexOf(T obj)
		{
			return default(int);
		}

		[Token(Token = "0x60014C3")]
		public void Add(T item)
		{
		}

		[Token(Token = "0x60014C4")]
		public void Clear()
		{
		}

		[Token(Token = "0x60014C5")]
		public bool Contains(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x60014C6")]
		public void CopyTo(T[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x60014C7")]
		public IEnumerator<T> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x60014C8")]
		public void Insert(int index, T item)
		{
		}

		[Token(Token = "0x60014C9")]
		public bool Remove(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x60014CA")]
		public void RemoveAt(int index)
		{
		}

		[Token(Token = "0x60014CB")]
		private IEnumerator GetEnumerator1()
		{
			return null;
		}

		[Token(Token = "0x60014CC")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x60014D1")]
		public Pvr_DeserializableList()
		{
		}
	}
	[Token(Token = "0x20002A6")]
	public static class Pvr_Callback
	{
		[Token(Token = "0x200059A")]
		private class RequestCallback
		{
			[Token(Token = "0x4001FD5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private Pvr_Message.Callback messageCallback;

			[Token(Token = "0x6001E21")]
			[Address(RVA = "0x103DCD0", Offset = "0x103DCD0", VA = "0x103DCD0")]
			public RequestCallback()
			{
			}

			[Token(Token = "0x6001E22")]
			[Address(RVA = "0x103DCD8", Offset = "0x103DCD8", VA = "0x103DCD8")]
			public RequestCallback(Pvr_Message.Callback callback)
			{
			}

			[Token(Token = "0x6001E23")]
			[Address(RVA = "0x103DCF8", Offset = "0x103DCF8", VA = "0x103DCF8", Slot = "4")]
			public virtual void HandleMessage(Pvr_Message msg)
			{
			}
		}

		[Token(Token = "0x200059B")]
		private sealed class RequestCallback<T> : RequestCallback
		{
			[Token(Token = "0x4001FD6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Pvr_Message<T>.Callback callback;

			[Token(Token = "0x6001E24")]
			public RequestCallback(Pvr_Message<T>.Callback callback)
			{
			}

			[Token(Token = "0x6001E25")]
			public override void HandleMessage(Pvr_Message msg)
			{
			}
		}

		[Token(Token = "0x4000F4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<long, Request> requestIDsToRequests;

		[Token(Token = "0x4000F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static Dictionary<Pvr_Message.MessageType, RequestCallback> notificationCallbacks;

		[Token(Token = "0x60014D2")]
		[Address(RVA = "0x103D470", Offset = "0x103D470", VA = "0x103D470")]
		internal static void AddRequest(Request request)
		{
		}

		[Token(Token = "0x60014D3")]
		[Address(RVA = "0x103D690", Offset = "0x103D690", VA = "0x103D690")]
		internal static void RunCallbacks()
		{
		}

		[Token(Token = "0x60014D4")]
		[Address(RVA = "0x103DA5C", Offset = "0x103DA5C", VA = "0x103DA5C")]
		internal static void RunLimitedCallbacks(uint limit)
		{
		}

		[Token(Token = "0x60014D5")]
		[Address(RVA = "0x103DB10", Offset = "0x103DB10", VA = "0x103DB10")]
		internal static void OnApplicationQuit()
		{
		}

		[Token(Token = "0x60014D6")]
		[Address(RVA = "0x103D7A8", Offset = "0x103D7A8", VA = "0x103D7A8")]
		internal static void HandleMessage(Pvr_Message msg)
		{
		}
	}
	[Token(Token = "0x20002A7")]
	public class Pvr_CallbackRunner : MonoBehaviour
	{
		[Token(Token = "0x4000F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool IsPersistantBetweenSceneLoads;

		[Token(Token = "0x60014D8")]
		[Address(RVA = "0x103E108", Offset = "0x103E108", VA = "0x103E108")]
		private void Awake()
		{
		}

		[Token(Token = "0x60014D9")]
		[Address(RVA = "0x103E240", Offset = "0x103E240", VA = "0x103E240")]
		private void Update()
		{
		}

		[Token(Token = "0x60014DA")]
		[Address(RVA = "0x103E2F4", Offset = "0x103E2F4", VA = "0x103E2F4")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x60014DB")]
		[Address(RVA = "0x103E36C", Offset = "0x103E36C", VA = "0x103E36C")]
		public Pvr_CallbackRunner()
		{
		}
	}
	[Token(Token = "0x20002A8")]
	public abstract class Pvr_Message<T> : Pvr_Message
	{
		[Token(Token = "0x200059C")]
		public new delegate void Callback(Pvr_Message<T> message);

		[Token(Token = "0x4000F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T data;

		[Token(Token = "0x170002C9")]
		public T Data
		{
			[Token(Token = "0x60014DD")]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x60014DC")]
		public Pvr_Message(AndroidJavaObject msg)
		{
		}

		[Token(Token = "0x60014DE")]
		protected abstract T GetDataFromMessage(AndroidJavaObject msg);
	}
	[Token(Token = "0x20002A9")]
	public class Pvr_Message
	{
		[Token(Token = "0x200059D")]
		public delegate void Callback(Pvr_Message message);

		[Token(Token = "0x200059E")]
		public enum MessageType : uint
		{
			[Token(Token = "0x4001FD8")]
			Unknown = 0u,
			[Token(Token = "0x4001FD9")]
			Achievements_AddCount = 65495601u,
			[Token(Token = "0x4001FDA")]
			Achievements_AddFields = 346693929u,
			[Token(Token = "0x4001FDB")]
			Achievements_GetAllDefinitions = 64177549u,
			[Token(Token = "0x4001FDC")]
			Achievements_GetAllProgress = 1335877149u,
			[Token(Token = "0x4001FDD")]
			Achievements_GetDefinitionsByName = 1653670332u,
			[Token(Token = "0x4001FDE")]
			Achievements_GetNextAchievementDefinitionArrayPage = 712888917u,
			[Token(Token = "0x4001FDF")]
			Achievements_GetNextAchievementProgressArrayPage = 792913703u,
			[Token(Token = "0x4001FE0")]
			Achievements_GetProgressByName = 354837425u,
			[Token(Token = "0x4001FE1")]
			Achievements_Unlock = 1497156573u,
			[Token(Token = "0x4001FE2")]
			Achievements_WriteAchievementProgress = 121027549u,
			[Token(Token = "0x4001FE3")]
			Achievements_VerifyAccessToken = 53284924u
		}

		[Token(Token = "0x200059F")]
		internal delegate Pvr_Message ExtraMessageTypesHandler(AndroidJavaObject messageHandle, MessageType message_type);

		[Token(Token = "0x4000F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private MessageType type;

		[Token(Token = "0x4000F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private long requestID;

		[Token(Token = "0x4000F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Error error;

		[Token(Token = "0x4000F56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F5984", Offset = "0x2F5984")]
		private static ExtraMessageTypesHandler <HandleExtraMessageTypes>k__BackingField;

		[Token(Token = "0x170002CA")]
		public MessageType Type
		{
			[Token(Token = "0x60014E0")]
			[Address(RVA = "0x103E5D0", Offset = "0x103E5D0", VA = "0x103E5D0")]
			get
			{
				return default(MessageType);
			}
		}

		[Token(Token = "0x170002CB")]
		public bool IsError
		{
			[Token(Token = "0x60014E1")]
			[Address(RVA = "0x103E5D8", Offset = "0x103E5D8", VA = "0x103E5D8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002CC")]
		public long RequestID
		{
			[Token(Token = "0x60014E2")]
			[Address(RVA = "0x103E5E8", Offset = "0x103E5E8", VA = "0x103E5E8")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x170002CD")]
		internal static ExtraMessageTypesHandler HandleExtraMessageTypes
		{
			[Token(Token = "0x60014EB")]
			[Address(RVA = "0x103E82C", Offset = "0x103E82C", VA = "0x103E82C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FC298", Offset = "0x2FC298")]
			private get
			{
				return null;
			}
			[Token(Token = "0x60014EA")]
			[Address(RVA = "0x103E7C8", Offset = "0x103E7C8", VA = "0x103E7C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FC288", Offset = "0x2FC288")]
			set
			{
			}
		}

		[Token(Token = "0x60014DF")]
		[Address(RVA = "0x103E37C", Offset = "0x103E37C", VA = "0x103E37C")]
		public Pvr_Message(AndroidJavaObject msg)
		{
		}

		[Token(Token = "0x60014E3")]
		[Address(RVA = "0x103E5F0", Offset = "0x103E5F0", VA = "0x103E5F0", Slot = "4")]
		public virtual Error GetError()
		{
			return null;
		}

		[Token(Token = "0x60014E4")]
		[Address(RVA = "0x103E5F8", Offset = "0x103E5F8", VA = "0x103E5F8", Slot = "5")]
		public virtual Pvr_AchievementDefinitionList GetAchievementDefinitions()
		{
			return null;
		}

		[Token(Token = "0x60014E5")]
		[Address(RVA = "0x103E600", Offset = "0x103E600", VA = "0x103E600", Slot = "6")]
		public virtual Pvr_AchievementProgressList GetAchievementProgressList()
		{
			return null;
		}

		[Token(Token = "0x60014E6")]
		[Address(RVA = "0x103E608", Offset = "0x103E608", VA = "0x103E608", Slot = "7")]
		public virtual Pvr_AchievementUpdate GetAchievementUpdate()
		{
			return null;
		}

		[Token(Token = "0x60014E7")]
		[Address(RVA = "0x103E610", Offset = "0x103E610", VA = "0x103E610", Slot = "8")]
		public virtual string GetString()
		{
			return null;
		}

		[Token(Token = "0x60014E8")]
		[Address(RVA = "0x103E618", Offset = "0x103E618", VA = "0x103E618")]
		internal static Pvr_Message ParseMessageHandle(AndroidJavaObject messageHandle)
		{
			return null;
		}

		[Token(Token = "0x60014E9")]
		[Address(RVA = "0x103D72C", Offset = "0x103D72C", VA = "0x103D72C")]
		public static Pvr_Message PopMessage()
		{
			return null;
		}
	}
	[Token(Token = "0x20002AA")]
	public class MessageWithAchievementDefinitions : Pvr_Message<Pvr_AchievementDefinitionList>
	{
		[Token(Token = "0x60014EC")]
		[Address(RVA = "0x1039A90", Offset = "0x1039A90", VA = "0x1039A90")]
		public MessageWithAchievementDefinitions(AndroidJavaObject msg)
		{
		}

		[Token(Token = "0x60014ED")]
		[Address(RVA = "0x1039AFC", Offset = "0x1039AFC", VA = "0x1039AFC", Slot = "5")]
		public override Pvr_AchievementDefinitionList GetAchievementDefinitions()
		{
			return null;
		}

		[Token(Token = "0x60014EE")]
		[Address(RVA = "0x1039B4C", Offset = "0x1039B4C", VA = "0x1039B4C", Slot = "9")]
		protected override Pvr_AchievementDefinitionList GetDataFromMessage(AndroidJavaObject msg)
		{
			return null;
		}
	}
	[Token(Token = "0x20002AB")]
	public class MessageWithAchievementProgressList : Pvr_Message<Pvr_AchievementProgressList>
	{
		[Token(Token = "0x60014EF")]
		[Address(RVA = "0x1039D94", Offset = "0x1039D94", VA = "0x1039D94")]
		public MessageWithAchievementProgressList(AndroidJavaObject msg)
		{
		}

		[Token(Token = "0x60014F0")]
		[Address(RVA = "0x1039E00", Offset = "0x1039E00", VA = "0x1039E00", Slot = "6")]
		public override Pvr_AchievementProgressList GetAchievementProgressList()
		{
			return null;
		}

		[Token(Token = "0x60014F1")]
		[Address(RVA = "0x1039E50", Offset = "0x1039E50", VA = "0x1039E50", Slot = "9")]
		protected override Pvr_AchievementProgressList GetDataFromMessage(AndroidJavaObject msg)
		{
			return null;
		}
	}
	[Token(Token = "0x20002AC")]
	public class MessageWithAchievementUpdate : Pvr_Message<Pvr_AchievementUpdate>
	{
		[Token(Token = "0x60014F2")]
		[Address(RVA = "0x103A098", Offset = "0x103A098", VA = "0x103A098")]
		public MessageWithAchievementUpdate(AndroidJavaObject msg)
		{
		}

		[Token(Token = "0x60014F3")]
		[Address(RVA = "0x103A104", Offset = "0x103A104", VA = "0x103A104", Slot = "7")]
		public override Pvr_AchievementUpdate GetAchievementUpdate()
		{
			return null;
		}

		[Token(Token = "0x60014F4")]
		[Address(RVA = "0x103A154", Offset = "0x103A154", VA = "0x103A154", Slot = "9")]
		protected override Pvr_AchievementUpdate GetDataFromMessage(AndroidJavaObject msg)
		{
			return null;
		}
	}
	[Token(Token = "0x20002AD")]
	public class MessageWithString : Pvr_Message<string>
	{
		[Token(Token = "0x60014F5")]
		[Address(RVA = "0x103A264", Offset = "0x103A264", VA = "0x103A264")]
		public MessageWithString(AndroidJavaObject msg)
		{
		}

		[Token(Token = "0x60014F6")]
		[Address(RVA = "0x103A2D0", Offset = "0x103A2D0", VA = "0x103A2D0", Slot = "8")]
		public override string GetString()
		{
			return null;
		}

		[Token(Token = "0x60014F7")]
		[Address(RVA = "0x103A320", Offset = "0x103A320", VA = "0x103A320", Slot = "9")]
		protected override string GetDataFromMessage(AndroidJavaObject msg)
		{
			return null;
		}
	}
	[Token(Token = "0x20002AE")]
	public class Error
	{
		[Token(Token = "0x4000F57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly int Code;

		[Token(Token = "0x4000F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly int HttpCode;

		[Token(Token = "0x4000F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string Message;

		[Token(Token = "0x60014F8")]
		[Address(RVA = "0x1039A60", Offset = "0x1039A60", VA = "0x1039A60")]
		public Error(int code, string message, int httpCode)
		{
		}
	}
	[Token(Token = "0x20002AF")]
	public sealed class Pvr_Request<T> : Request
	{
		[Token(Token = "0x4000F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Pvr_Message<T>.Callback callback_;

		[Token(Token = "0x60014F9")]
		public Pvr_Request(long requestID)
		{
		}

		[Token(Token = "0x60014FA")]
		public Pvr_Request<T> OnComplete(Pvr_Message<T>.Callback callback)
		{
			return null;
		}

		[Token(Token = "0x60014FB")]
		public override void HandleMessage(Pvr_Message msg)
		{
		}
	}
	[Token(Token = "0x20002B0")]
	public class Request
	{
		[Token(Token = "0x4000F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private Pvr_Message.Callback callback_;

		[Token(Token = "0x4000F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F5994", Offset = "0x2F5994")]
		private long <RequestID>k__BackingField;

		[Token(Token = "0x170002CE")]
		public long RequestID
		{
			[Token(Token = "0x60014FD")]
			[Address(RVA = "0x103EDE4", Offset = "0x103EDE4", VA = "0x103EDE4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FC2A8", Offset = "0x2FC2A8")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x60014FE")]
			[Address(RVA = "0x103EDEC", Offset = "0x103EDEC", VA = "0x103EDEC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FC2B8", Offset = "0x2FC2B8")]
			set
			{
			}
		}

		[Token(Token = "0x60014FC")]
		[Address(RVA = "0x103EDBC", Offset = "0x103EDBC", VA = "0x103EDBC")]
		public Request(long requestID)
		{
		}

		[Token(Token = "0x60014FF")]
		[Address(RVA = "0x103EDFC", Offset = "0x103EDFC", VA = "0x103EDFC")]
		public Request OnComplete(Pvr_Message.Callback callback)
		{
			return null;
		}

		[Token(Token = "0x6001500")]
		[Address(RVA = "0x103EE88", Offset = "0x103EE88", VA = "0x103EE88", Slot = "4")]
		public virtual void HandleMessage(Pvr_Message msg)
		{
		}

		[Token(Token = "0x6001501")]
		[Address(RVA = "0x103E248", Offset = "0x103E248", VA = "0x103E248")]
		public static void RunCallbacks(uint limit = 0u)
		{
		}
	}
}
namespace OVRSimpleJSON
{
	[Token(Token = "0x20002B1")]
	public enum JSONNodeType
	{
		[Token(Token = "0x4000F5E")]
		Array = 1,
		[Token(Token = "0x4000F5F")]
		Object = 2,
		[Token(Token = "0x4000F60")]
		String = 3,
		[Token(Token = "0x4000F61")]
		Number = 4,
		[Token(Token = "0x4000F62")]
		NullValue = 5,
		[Token(Token = "0x4000F63")]
		Boolean = 6,
		[Token(Token = "0x4000F64")]
		None = 7,
		[Token(Token = "0x4000F65")]
		Custom = 255
	}
	[Token(Token = "0x20002B2")]
	public enum JSONTextMode
	{
		[Token(Token = "0x4000F67")]
		Compact,
		[Token(Token = "0x4000F68")]
		Indent
	}
	[Token(Token = "0x20002B3")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x2EA274", Offset = "0x2EA274")]
	public abstract class JSONNode
	{
		[Token(Token = "0x20005A0")]
		public struct Enumerator
		{
			[Token(Token = "0x2000793")]
			private enum Type
			{
				[Token(Token = "0x4002272")]
				None,
				[Token(Token = "0x4002273")]
				Array,
				[Token(Token = "0x4002274")]
				Object
			}

			[Token(Token = "0x4001FE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Type type;

			[Token(Token = "0x4001FE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			private Dictionary<string, JSONNode>.Enumerator m_Object;

			[Token(Token = "0x4001FE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private List<JSONNode>.Enumerator m_Array;

			[Token(Token = "0x170003D5")]
			public bool IsValid
			{
				[Token(Token = "0x6001E32")]
				[Address(RVA = "0x3AEC04", Offset = "0x3AEC04", VA = "0x3AEC04")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170003D6")]
			public KeyValuePair<string, JSONNode> Current
			{
				[Token(Token = "0x6001E35")]
				[Address(RVA = "0x3AEC90", Offset = "0x3AEC90", VA = "0x3AEC90")]
				get
				{
					return default(KeyValuePair<string, JSONNode>);
				}
			}

			[Token(Token = "0x6001E33")]
			[Address(RVA = "0x3AEC14", Offset = "0x3AEC14", VA = "0x3AEC14")]
			public Enumerator(List<JSONNode>.Enumerator aArrayEnum)
			{
			}

			[Token(Token = "0x6001E34")]
			[Address(RVA = "0x3AEC54", Offset = "0x3AEC54", VA = "0x3AEC54")]
			public Enumerator(Dictionary<string, JSONNode>.Enumerator aDictEnum)
			{
			}

			[Token(Token = "0x6001E36")]
			[Address(RVA = "0x3AECA4", Offset = "0x3AECA4", VA = "0x3AECA4")]
			public bool MoveNext()
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20005A1")]
		public struct ValueEnumerator
		{
			[Token(Token = "0x4001FE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Enumerator m_Enumerator;

			[Token(Token = "0x170003D7")]
			public JSONNode Current
			{
				[Token(Token = "0x6001E3A")]
				[Address(RVA = "0x3AEF3C", Offset = "0x3AEF3C", VA = "0x3AEF3C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001E37")]
			[Address(RVA = "0x3AEE68", Offset = "0x3AEE68", VA = "0x3AEE68")]
			public ValueEnumerator(List<JSONNode>.Enumerator aArrayEnum)
			{
			}

			[Token(Token = "0x6001E38")]
			[Address(RVA = "0x3AEEA8", Offset = "0x3AEEA8", VA = "0x3AEEA8")]
			public ValueEnumerator(Dictionary<string, JSONNode>.Enumerator aDictEnum)
			{
			}

			[Token(Token = "0x6001E39")]
			[Address(RVA = "0x3AEEE4", Offset = "0x3AEEE4", VA = "0x3AEEE4")]
			public ValueEnumerator(Enumerator aEnumerator)
			{
			}

			[Token(Token = "0x6001E3B")]
			[Address(RVA = "0x3AEF44", Offset = "0x3AEF44", VA = "0x3AEF44")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001E3C")]
			[Address(RVA = "0x3AEF4C", Offset = "0x3AEF4C", VA = "0x3AEF4C")]
			public ValueEnumerator GetEnumerator()
			{
				return default(ValueEnumerator);
			}
		}

		[Token(Token = "0x20005A2")]
		public struct KeyEnumerator
		{
			[Token(Token = "0x4001FE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Enumerator m_Enumerator;

			[Token(Token = "0x170003D8")]
			public string Current
			{
				[Token(Token = "0x6001E40")]
				[Address(RVA = "0x3AEDDC", Offset = "0x3AEDDC", VA = "0x3AEDDC")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001E3D")]
			[Address(RVA = "0x3AED08", Offset = "0x3AED08", VA = "0x3AED08")]
			public KeyEnumerator(List<JSONNode>.Enumerator aArrayEnum)
			{
			}

			[Token(Token = "0x6001E3E")]
			[Address(RVA = "0x3AED48", Offset = "0x3AED48", VA = "0x3AED48")]
			public KeyEnumerator(Dictionary<string, JSONNode>.Enumerator aDictEnum)
			{
			}

			[Token(Token = "0x6001E3F")]
			[Address(RVA = "0x3AED84", Offset = "0x3AED84", VA = "0x3AED84")]
			public KeyEnumerator(Enumerator aEnumerator)
			{
			}

			[Token(Token = "0x6001E41")]
			[Address(RVA = "0x3AEDE4", Offset = "0x3AEDE4", VA = "0x3AEDE4")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001E42")]
			[Address(RVA = "0x3AEDEC", Offset = "0x3AEDEC", VA = "0x3AEDEC")]
			public KeyEnumerator GetEnumerator()
			{
				return default(KeyEnumerator);
			}
		}

		[Token(Token = "0x20005A3")]
		public class LinqEnumerator : IEnumerator<KeyValuePair<string, JSONNode>>, IEnumerator, IDisposable, IEnumerable<KeyValuePair<string, JSONNode>>, IEnumerable
		{
			[Token(Token = "0x4001FE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private JSONNode m_Node;

			[Token(Token = "0x4001FEA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private Enumerator m_Enumerator;

			[Token(Token = "0x170003D9")]
			public KeyValuePair<string, JSONNode> Current
			{
				[Token(Token = "0x6001E44")]
				[Address(RVA = "0x9DDBA4", Offset = "0x9DDBA4", VA = "0x9DDBA4", Slot = "4")]
				get
				{
					return default(KeyValuePair<string, JSONNode>);
				}
			}

			[Token(Token = "0x170003DA")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001E45")]
				[Address(RVA = "0x9DDBB8", Offset = "0x9DDBB8", VA = "0x9DDBB8", Slot = "7")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001E43")]
			[Address(RVA = "0x9D85EC", Offset = "0x9D85EC", VA = "0x9D85EC")]
			internal LinqEnumerator(JSONNode aNode)
			{
			}

			[Token(Token = "0x6001E46")]
			[Address(RVA = "0x9DDC3C", Offset = "0x9DDC3C", VA = "0x9DDC3C", Slot = "6")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001E47")]
			[Address(RVA = "0x9DDC44", Offset = "0x9DDC44", VA = "0x9DDC44", Slot = "5")]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001E48")]
			[Address(RVA = "0x9DDC64", Offset = "0x9DDC64", VA = "0x9DDC64", Slot = "9")]
			public IEnumerator<KeyValuePair<string, JSONNode>> GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001E49")]
			[Address(RVA = "0x9DDCD8", Offset = "0x9DDCD8", VA = "0x9DDCD8", Slot = "8")]
			public void Reset()
			{
			}

			[Token(Token = "0x6001E4A")]
			[Address(RVA = "0x9DDDC8", Offset = "0x9DDDC8", VA = "0x9DDDC8", Slot = "10")]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x20005A4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EAE78", Offset = "0x2EAE78")]
		private sealed class <get_Children>d__40 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001FEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int <>1__state;

			[Token(Token = "0x4001FEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private JSONNode <>2__current;

			[Token(Token = "0x4001FED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>l__initialThreadId;

			[Token(Token = "0x170003DB")]
			private JSONNode System.Collections.Generic.IEnumerator<OVRSimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x6001E4E")]
				[Address(RVA = "0x9DCEE4", Offset = "0x9DCEE4", VA = "0x9DCEE4", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003DC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001E50")]
				[Address(RVA = "0x9DCF74", Offset = "0x9DCF74", VA = "0x9DCF74", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001E4B")]
			[Address(RVA = "0x9D8300", Offset = "0x9D8300", VA = "0x9D8300")]
			[DebuggerHidden]
			public <get_Children>d__40(int <>1__state)
			{
			}

			[Token(Token = "0x6001E4C")]
			[Address(RVA = "0x9DCEC8", Offset = "0x9DCEC8", VA = "0x9DCEC8", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001E4D")]
			[Address(RVA = "0x9DCECC", Offset = "0x9DCECC", VA = "0x9DCECC", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001E4F")]
			[Address(RVA = "0x9DCEEC", Offset = "0x9DCEEC", VA = "0x9DCEEC", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6001E51")]
			[Address(RVA = "0x9DCF7C", Offset = "0x9DCF7C", VA = "0x9DCF7C", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<OVRSimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001E52")]
			[Address(RVA = "0x9DD02C", Offset = "0x9DD02C", VA = "0x9DD02C", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x20005A5")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EAE88", Offset = "0x2EAE88")]
		private sealed class <get_DeepChildren>d__42 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001FEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int <>1__state;

			[Token(Token = "0x4001FEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private JSONNode <>2__current;

			[Token(Token = "0x4001FF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4001FF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public JSONNode <>4__this;

			[Token(Token = "0x4001FF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private IEnumerator<JSONNode> <>7__wrap1;

			[Token(Token = "0x4001FF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private IEnumerator<JSONNode> <>7__wrap2;

			[Token(Token = "0x170003DD")]
			private JSONNode System.Collections.Generic.IEnumerator<OVRSimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x6001E58")]
				[Address(RVA = "0x9DD728", Offset = "0x9DD728", VA = "0x9DD728", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003DE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001E5A")]
				[Address(RVA = "0x9DD7B8", Offset = "0x9DD7B8", VA = "0x9DD7B8", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001E53")]
			[Address(RVA = "0x9D83C4", Offset = "0x9D83C4", VA = "0x9D83C4")]
			[DebuggerHidden]
			public <get_DeepChildren>d__42(int <>1__state)
			{
			}

			[Token(Token = "0x6001E54")]
			[Address(RVA = "0x9DD030", Offset = "0x9DD030", VA = "0x9DD030", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001E55")]
			[Address(RVA = "0x9DD244", Offset = "0x9DD244", VA = "0x9DD244", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001E56")]
			[Address(RVA = "0x9DD16C", Offset = "0x9DD16C", VA = "0x9DD16C")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6001E57")]
			[Address(RVA = "0x9DD094", Offset = "0x9DD094", VA = "0x9DD094")]
			private void <>m__Finally2()
			{
			}

			[Token(Token = "0x6001E59")]
			[Address(RVA = "0x9DD730", Offset = "0x9DD730", VA = "0x9DD730", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6001E5B")]
			[Address(RVA = "0x9DD7C0", Offset = "0x9DD7C0", VA = "0x9DD7C0", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<OVRSimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001E5C")]
			[Address(RVA = "0x9DD88C", Offset = "0x9DD88C", VA = "0x9DD88C", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x4000F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool forceASCII;

		[Token(Token = "0x4000F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public static bool longAsString;

		[Token(Token = "0x4000F6B")]
		[ThreadStatic]
		private static StringBuilder m_EscapeBuilder;

		[Token(Token = "0x4000F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static JSONContainerType VectorContainerType;

		[Token(Token = "0x4000F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static JSONContainerType QuaternionContainerType;

		[Token(Token = "0x4000F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static JSONContainerType RectContainerType;

		[Token(Token = "0x170002CF")]
		public abstract JSONNodeType Tag
		{
			[Token(Token = "0x6001502")]
			get;
		}

		[Token(Token = "0x170002D0")]
		public virtual JSONNode Item
		{
			[Token(Token = "0x6001503")]
			[Address(RVA = "0x9D8130", Offset = "0x9D8130", VA = "0x9D8130", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001504")]
			[Address(RVA = "0x9D8138", Offset = "0x9D8138", VA = "0x9D8138", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x170002D1")]
		public virtual JSONNode Item
		{
			[Token(Token = "0x6001505")]
			[Address(RVA = "0x9D813C", Offset = "0x9D813C", VA = "0x9D813C", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001506")]
			[Address(RVA = "0x9D8144", Offset = "0x9D8144", VA = "0x9D8144", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x170002D2")]
		public virtual string Value
		{
			[Token(Token = "0x6001507")]
			[Address(RVA = "0x9D8148", Offset = "0x9D8148", VA = "0x9D8148", Slot = "9")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001508")]
			[Address(RVA = "0x9D81A4", Offset = "0x9D81A4", VA = "0x9D81A4", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x170002D3")]
		public virtual int Count
		{
			[Token(Token = "0x6001509")]
			[Address(RVA = "0x9D81A8", Offset = "0x9D81A8", VA = "0x9D81A8", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002D4")]
		public virtual bool IsNumber
		{
			[Token(Token = "0x600150A")]
			[Address(RVA = "0x9D81B0", Offset = "0x9D81B0", VA = "0x9D81B0", Slot = "12")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002D5")]
		public virtual bool IsString
		{
			[Token(Token = "0x600150B")]
			[Address(RVA = "0x9D81B8", Offset = "0x9D81B8", VA = "0x9D81B8", Slot = "13")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002D6")]
		public virtual bool IsBoolean
		{
			[Token(Token = "0x600150C")]
			[Address(RVA = "0x9D81C0", Offset = "0x9D81C0", VA = "0x9D81C0", Slot = "14")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002D7")]
		public virtual bool IsNull
		{
			[Token(Token = "0x600150D")]
			[Address(RVA = "0x9D81C8", Offset = "0x9D81C8", VA = "0x9D81C8", Slot = "15")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002D8")]
		public virtual bool IsArray
		{
			[Token(Token = "0x600150E")]
			[Address(RVA = "0x9D81D0", Offset = "0x9D81D0", VA = "0x9D81D0", Slot = "16")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002D9")]
		public virtual bool IsObject
		{
			[Token(Token = "0x600150F")]
			[Address(RVA = "0x9D81D8", Offset = "0x9D81D8", VA = "0x9D81D8", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002DA")]
		public virtual bool Inline
		{
			[Token(Token = "0x6001510")]
			[Address(RVA = "0x9D81E0", Offset = "0x9D81E0", VA = "0x9D81E0", Slot = "18")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001511")]
			[Address(RVA = "0x9D81E8", Offset = "0x9D81E8", VA = "0x9D81E8", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x170002DB")]
		public virtual IEnumerable<JSONNode> Children
		{
			[Token(Token = "0x6001517")]
			[Address(RVA = "0x9D8280", Offset = "0x9D8280", VA = "0x9D8280", Slot = "25")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2FC2C8", Offset = "0x2FC2C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002DC")]
		public IEnumerable<JSONNode> DeepChildren
		{
			[Token(Token = "0x6001518")]
			[Address(RVA = "0x9D832C", Offset = "0x9D832C", VA = "0x9D832C")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2FC340", Offset = "0x2FC340")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002DD")]
		public IEnumerable<KeyValuePair<string, JSONNode>> Linq
		{
			[Token(Token = "0x600151D")]
			[Address(RVA = "0x9D857C", Offset = "0x9D857C", VA = "0x9D857C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002DE")]
		public KeyEnumerator Keys
		{
			[Token(Token = "0x600151E")]
			[Address(RVA = "0x9D86EC", Offset = "0x9D86EC", VA = "0x9D86EC")]
			get
			{
				return default(KeyEnumerator);
			}
		}

		[Token(Token = "0x170002DF")]
		public ValueEnumerator Values
		{
			[Token(Token = "0x600151F")]
			[Address(RVA = "0x9D8740", Offset = "0x9D8740", VA = "0x9D8740")]
			get
			{
				return default(ValueEnumerator);
			}
		}

		[Token(Token = "0x170002E0")]
		public virtual double AsDouble
		{
			[Token(Token = "0x6001520")]
			[Address(RVA = "0x9D8794", Offset = "0x9D8794", VA = "0x9D8794", Slot = "29")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001521")]
			[Address(RVA = "0x9D88A0", Offset = "0x9D88A0", VA = "0x9D88A0", Slot = "30")]
			set
			{
			}
		}

		[Token(Token = "0x170002E1")]
		public virtual int AsInt
		{
			[Token(Token = "0x6001522")]
			[Address(RVA = "0x9D8958", Offset = "0x9D8958", VA = "0x9D8958", Slot = "31")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001523")]
			[Address(RVA = "0x9D8980", Offset = "0x9D8980", VA = "0x9D8980", Slot = "32")]
			set
			{
			}
		}

		[Token(Token = "0x170002E2")]
		public virtual float AsFloat
		{
			[Token(Token = "0x6001524")]
			[Address(RVA = "0x9D89B4", Offset = "0x9D89B4", VA = "0x9D89B4", Slot = "33")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001525")]
			[Address(RVA = "0x9D89DC", Offset = "0x9D89DC", VA = "0x9D89DC", Slot = "34")]
			set
			{
			}
		}

		[Token(Token = "0x170002E3")]
		public virtual bool AsBool
		{
			[Token(Token = "0x6001526")]
			[Address(RVA = "0x9D8A10", Offset = "0x9D8A10", VA = "0x9D8A10", Slot = "35")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001527")]
			[Address(RVA = "0x9D8AF8", Offset = "0x9D8AF8", VA = "0x9D8AF8", Slot = "36")]
			set
			{
			}
		}

		[Token(Token = "0x170002E4")]
		public virtual long AsLong
		{
			[Token(Token = "0x6001528")]
			[Address(RVA = "0x9D8B90", Offset = "0x9D8B90", VA = "0x9D8B90", Slot = "37")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x6001529")]
			[Address(RVA = "0x9D8BE4", Offset = "0x9D8BE4", VA = "0x9D8BE4", Slot = "38")]
			set
			{
			}
		}

		[Token(Token = "0x170002E5")]
		public virtual JSONArray AsArray
		{
			[Token(Token = "0x600152A")]
			[Address(RVA = "0x9D8C24", Offset = "0x9D8C24", VA = "0x9D8C24", Slot = "39")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E6")]
		public virtual JSONObject AsObject
		{
			[Token(Token = "0x600152B")]
			[Address(RVA = "0x9D8CB8", Offset = "0x9D8CB8", VA = "0x9D8CB8", Slot = "40")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E7")]
		internal static StringBuilder EscapeBuilder
		{
			[Token(Token = "0x600153D")]
			[Address(RVA = "0x9D9608", Offset = "0x9D9608", VA = "0x9D9608")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001512")]
		[Address(RVA = "0x9D81EC", Offset = "0x9D81EC", VA = "0x9D81EC", Slot = "20")]
		public virtual void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x6001513")]
		[Address(RVA = "0x9D81F0", Offset = "0x9D81F0", VA = "0x9D81F0", Slot = "21")]
		public virtual void Add(JSONNode aItem)
		{
		}

		[Token(Token = "0x6001514")]
		[Address(RVA = "0x9D8268", Offset = "0x9D8268", VA = "0x9D8268", Slot = "22")]
		public virtual JSONNode Remove(string aKey)
		{
			return null;
		}

		[Token(Token = "0x6001515")]
		[Address(RVA = "0x9D8270", Offset = "0x9D8270", VA = "0x9D8270", Slot = "23")]
		public virtual JSONNode Remove(int aIndex)
		{
			return null;
		}

		[Token(Token = "0x6001516")]
		[Address(RVA = "0x9D8278", Offset = "0x9D8278", VA = "0x9D8278", Slot = "24")]
		public virtual JSONNode Remove(JSONNode aNode)
		{
			return null;
		}

		[Token(Token = "0x6001519")]
		[Address(RVA = "0x9D83F0", Offset = "0x9D83F0", VA = "0x9D83F0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600151A")]
		[Address(RVA = "0x9D84B4", Offset = "0x9D84B4", VA = "0x9D84B4", Slot = "26")]
		public virtual string ToString(int aIndent)
		{
			return null;
		}

		[Token(Token = "0x600151B")]
		internal abstract void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode);

		[Token(Token = "0x600151C")]
		public abstract Enumerator GetEnumerator();

		[Token(Token = "0x600152C")]
		[Address(RVA = "0x9D8D4C", Offset = "0x9D8D4C", VA = "0x9D8D4C")]
		public static implicit operator JSONNode(string s)
		{
			return null;
		}

		[Token(Token = "0x600152D")]
		[Address(RVA = "0x9D8DBC", Offset = "0x9D8DBC", VA = "0x9D8DBC")]
		public static implicit operator string(JSONNode d)
		{
			return null;
		}

		[Token(Token = "0x600152E")]
		[Address(RVA = "0x9D8E70", Offset = "0x9D8E70", VA = "0x9D8E70")]
		public static implicit operator JSONNode(double n)
		{
			return null;
		}

		[Token(Token = "0x600152F")]
		[Address(RVA = "0x9D8EF0", Offset = "0x9D8EF0", VA = "0x9D8EF0")]
		public static implicit operator double(JSONNode d)
		{
			return default(double);
		}

		[Token(Token = "0x6001530")]
		[Address(RVA = "0x9D8FAC", Offset = "0x9D8FAC", VA = "0x9D8FAC")]
		public static implicit operator JSONNode(float n)
		{
			return null;
		}

		[Token(Token = "0x6001531")]
		[Address(RVA = "0x9D9030", Offset = "0x9D9030", VA = "0x9D9030")]
		public static implicit operator float(JSONNode d)
		{
			return default(float);
		}

		[Token(Token = "0x6001532")]
		[Address(RVA = "0x9D90E4", Offset = "0x9D90E4", VA = "0x9D90E4")]
		public static implicit operator JSONNode(int n)
		{
			return null;
		}

		[Token(Token = "0x6001533")]
		[Address(RVA = "0x9D9164", Offset = "0x9D9164", VA = "0x9D9164")]
		public static implicit operator int(JSONNode d)
		{
			return default(int);
		}

		[Token(Token = "0x6001534")]
		[Address(RVA = "0x9D9218", Offset = "0x9D9218", VA = "0x9D9218")]
		public static implicit operator JSONNode(long n)
		{
			return null;
		}

		[Token(Token = "0x6001535")]
		[Address(RVA = "0x9D9330", Offset = "0x9D9330", VA = "0x9D9330")]
		public static implicit operator long(JSONNode d)
		{
			return default(long);
		}

		[Token(Token = "0x6001536")]
		[Address(RVA = "0x9D93EC", Offset = "0x9D93EC", VA = "0x9D93EC")]
		public static implicit operator JSONNode(bool b)
		{
			return null;
		}

		[Token(Token = "0x6001537")]
		[Address(RVA = "0x9D945C", Offset = "0x9D945C", VA = "0x9D945C")]
		public static implicit operator bool(JSONNode d)
		{
			return default(bool);
		}

		[Token(Token = "0x6001538")]
		[Address(RVA = "0x9D9510", Offset = "0x9D9510", VA = "0x9D9510")]
		public static implicit operator JSONNode(KeyValuePair<string, JSONNode> aKeyValue)
		{
			return null;
		}

		[Token(Token = "0x6001539")]
		[Address(RVA = "0x9D6094", Offset = "0x9D6094", VA = "0x9D6094")]
		public static bool operator ==(JSONNode a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x600153A")]
		[Address(RVA = "0x9D9560", Offset = "0x9D9560", VA = "0x9D9560")]
		public static bool operator !=(JSONNode a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x600153B")]
		[Address(RVA = "0x9D95EC", Offset = "0x9D95EC", VA = "0x9D95EC", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600153C")]
		[Address(RVA = "0x9D9600", Offset = "0x9D9600", VA = "0x9D9600", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600153E")]
		[Address(RVA = "0x9D9744", Offset = "0x9D9744", VA = "0x9D9744")]
		internal static string Escape(string aText)
		{
			return null;
		}

		[Token(Token = "0x600153F")]
		[Address(RVA = "0x9D9BD4", Offset = "0x9D9BD4", VA = "0x9D9BD4")]
		private static JSONNode ParseElement(string token, bool quoted)
		{
			return null;
		}

		[Token(Token = "0x6001540")]
		[Address(RVA = "0x9D51E4", Offset = "0x9D51E4", VA = "0x9D51E4")]
		public static JSONNode Parse(string aJSON)
		{
			return null;
		}

		[Token(Token = "0x6001541")]
		[Address(RVA = "0x9D9E68", Offset = "0x9D9E68", VA = "0x9D9E68")]
		private static JSONNode GetContainer(JSONContainerType aType)
		{
			return null;
		}

		[Token(Token = "0x6001542")]
		[Address(RVA = "0x9D9EFC", Offset = "0x9D9EFC", VA = "0x9D9EFC")]
		public static implicit operator JSONNode(Vector2 aVec)
		{
			return null;
		}

		[Token(Token = "0x6001543")]
		[Address(RVA = "0x9DA14C", Offset = "0x9DA14C", VA = "0x9DA14C")]
		public static implicit operator JSONNode(Vector3 aVec)
		{
			return null;
		}

		[Token(Token = "0x6001544")]
		[Address(RVA = "0x9DA44C", Offset = "0x9DA44C", VA = "0x9DA44C")]
		public static implicit operator JSONNode(Vector4 aVec)
		{
			return null;
		}

		[Token(Token = "0x6001545")]
		[Address(RVA = "0x9DA804", Offset = "0x9DA804", VA = "0x9DA804")]
		public static implicit operator JSONNode(Quaternion aRot)
		{
			return null;
		}

		[Token(Token = "0x6001546")]
		[Address(RVA = "0x9DABBC", Offset = "0x9DABBC", VA = "0x9DABBC")]
		public static implicit operator JSONNode(Rect aRect)
		{
			return null;
		}

		[Token(Token = "0x6001547")]
		[Address(RVA = "0x9DAFEC", Offset = "0x9DAFEC", VA = "0x9DAFEC")]
		public static implicit operator JSONNode(RectOffset aRect)
		{
			return null;
		}

		[Token(Token = "0x6001548")]
		[Address(RVA = "0x9DB458", Offset = "0x9DB458", VA = "0x9DB458")]
		public static implicit operator Vector2(JSONNode aNode)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001549")]
		[Address(RVA = "0x9DB52C", Offset = "0x9DB52C", VA = "0x9DB52C")]
		public static implicit operator Vector3(JSONNode aNode)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600154A")]
		[Address(RVA = "0x9DB608", Offset = "0x9DB608", VA = "0x9DB608")]
		public static implicit operator Vector4(JSONNode aNode)
		{
			return default(Vector4);
		}

		[Token(Token = "0x600154B")]
		[Address(RVA = "0x9DB6E8", Offset = "0x9DB6E8", VA = "0x9DB6E8")]
		public static implicit operator Quaternion(JSONNode aNode)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600154C")]
		[Address(RVA = "0x9DB7C8", Offset = "0x9DB7C8", VA = "0x9DB7C8")]
		public static implicit operator Rect(JSONNode aNode)
		{
			return default(Rect);
		}

		[Token(Token = "0x600154D")]
		[Address(RVA = "0x9DB840", Offset = "0x9DB840", VA = "0x9DB840")]
		public static implicit operator RectOffset(JSONNode aNode)
		{
			return null;
		}

		[Token(Token = "0x600154E")]
		[Address(RVA = "0x9DB8E0", Offset = "0x9DB8E0", VA = "0x9DB8E0")]
		public Vector2 ReadVector2(Vector2 aDefault)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600154F")]
		[Address(RVA = "0x9DBA90", Offset = "0x9DBA90", VA = "0x9DBA90")]
		public Vector2 ReadVector2(string aXName, string aYName)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001550")]
		[Address(RVA = "0x9DB488", Offset = "0x9DB488", VA = "0x9DB488")]
		public Vector2 ReadVector2()
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001551")]
		[Address(RVA = "0x9D9FE4", Offset = "0x9D9FE4", VA = "0x9D9FE4")]
		public JSONNode WriteVector2(Vector2 aVec, string aXName = "x", string aYName = "y")
		{
			return null;
		}

		[Token(Token = "0x6001552")]
		[Address(RVA = "0x9DBBE4", Offset = "0x9DBBE4", VA = "0x9DBBE4")]
		public Vector3 ReadVector3(Vector3 aDefault)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001553")]
		[Address(RVA = "0x9DBE44", Offset = "0x9DBE44", VA = "0x9DBE44")]
		public Vector3 ReadVector3(string aXName, string aYName, string aZName)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001554")]
		[Address(RVA = "0x9DB55C", Offset = "0x9DB55C", VA = "0x9DB55C")]
		public Vector3 ReadVector3()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001555")]
		[Address(RVA = "0x9DA24C", Offset = "0x9DA24C", VA = "0x9DA24C")]
		public JSONNode WriteVector3(Vector3 aVec, string aXName = "x", string aYName = "y", string aZName = "z")
		{
			return null;
		}

		[Token(Token = "0x6001556")]
		[Address(RVA = "0x9DBFF4", Offset = "0x9DBFF4", VA = "0x9DBFF4")]
		public Vector4 ReadVector4(Vector4 aDefault)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001557")]
		[Address(RVA = "0x9DB638", Offset = "0x9DB638", VA = "0x9DB638")]
		public Vector4 ReadVector4()
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001558")]
		[Address(RVA = "0x9DA520", Offset = "0x9DA520", VA = "0x9DA520")]
		public JSONNode WriteVector4(Vector4 aVec)
		{
			return null;
		}

		[Token(Token = "0x6001559")]
		[Address(RVA = "0x9DC2EC", Offset = "0x9DC2EC", VA = "0x9DC2EC")]
		public Quaternion ReadQuaternion(Quaternion aDefault)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600155A")]
		[Address(RVA = "0x9DB718", Offset = "0x9DB718", VA = "0x9DB718")]
		public Quaternion ReadQuaternion()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600155B")]
		[Address(RVA = "0x9DA8D8", Offset = "0x9DA8D8", VA = "0x9DA8D8")]
		public JSONNode WriteQuaternion(Quaternion aRot)
		{
			return null;
		}

		[Token(Token = "0x600155C")]
		[Address(RVA = "0x9DC5E4", Offset = "0x9DC5E4", VA = "0x9DC5E4")]
		public Rect ReadRect(Rect aDefault)
		{
			return default(Rect);
		}

		[Token(Token = "0x600155D")]
		[Address(RVA = "0x9DB814", Offset = "0x9DB814", VA = "0x9DB814")]
		public Rect ReadRect()
		{
			return default(Rect);
		}

		[Token(Token = "0x600155E")]
		[Address(RVA = "0x9DAC90", Offset = "0x9DAC90", VA = "0x9DAC90")]
		public JSONNode WriteRect(Rect aRect)
		{
			return null;
		}

		[Token(Token = "0x600155F")]
		[Address(RVA = "0x9DC8DC", Offset = "0x9DC8DC", VA = "0x9DC8DC")]
		public RectOffset ReadRectOffset(RectOffset aDefault)
		{
			return null;
		}

		[Token(Token = "0x6001560")]
		[Address(RVA = "0x9DB868", Offset = "0x9DB868", VA = "0x9DB868")]
		public RectOffset ReadRectOffset()
		{
			return null;
		}

		[Token(Token = "0x6001561")]
		[Address(RVA = "0x9DB0A0", Offset = "0x9DB0A0", VA = "0x9DB0A0")]
		public JSONNode WriteRectOffset(RectOffset aRect)
		{
			return null;
		}

		[Token(Token = "0x6001562")]
		[Address(RVA = "0x9DCC38", Offset = "0x9DCC38", VA = "0x9DCC38")]
		public Matrix4x4 ReadMatrix()
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6001563")]
		[Address(RVA = "0x9DCDAC", Offset = "0x9DCDAC", VA = "0x9DCDAC")]
		public JSONNode WriteMatrix(Matrix4x4 aMatrix)
		{
			return null;
		}

		[Token(Token = "0x6001564")]
		[Address(RVA = "0x9D6AE4", Offset = "0x9D6AE4", VA = "0x9D6AE4")]
		protected JSONNode()
		{
		}
	}
	[Token(Token = "0x20002B4")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x2EA2A8", Offset = "0x2EA2A8")]
	public class JSONArray : JSONNode
	{
		[Token(Token = "0x20005A6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EAE98", Offset = "0x2EAE98")]
		private sealed class <get_Children>d__22 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001FF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int <>1__state;

			[Token(Token = "0x4001FF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private JSONNode <>2__current;

			[Token(Token = "0x4001FF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4001FF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public JSONArray <>4__this;

			[Token(Token = "0x4001FF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private List<JSONNode>.Enumerator <>7__wrap1;

			[Token(Token = "0x170003DF")]
			private JSONNode System.Collections.Generic.IEnumerator<OVRSimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x6001E61")]
				[Address(RVA = "0x9D6CFC", Offset = "0x9D6CFC", VA = "0x9D6CFC", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003E0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001E63")]
				[Address(RVA = "0x9D6D8C", Offset = "0x9D6D8C", VA = "0x9D6D8C", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001E5D")]
			[Address(RVA = "0x9D67D4", Offset = "0x9D67D4", VA = "0x9D67D4")]
			[DebuggerHidden]
			public <get_Children>d__22(int <>1__state)
			{
			}

			[Token(Token = "0x6001E5E")]
			[Address(RVA = "0x9D6AEC", Offset = "0x9D6AEC", VA = "0x9D6AEC", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001E5F")]
			[Address(RVA = "0x9D6B70", Offset = "0x9D6B70", VA = "0x9D6B70", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001E60")]
			[Address(RVA = "0x9D6B04", Offset = "0x9D6B04", VA = "0x9D6B04")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6001E62")]
			[Address(RVA = "0x9D6D04", Offset = "0x9D6D04", VA = "0x9D6D04", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6001E64")]
			[Address(RVA = "0x9D6D94", Offset = "0x9D6D94", VA = "0x9D6D94", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<OVRSimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001E65")]
			[Address(RVA = "0x9D6E60", Offset = "0x9D6E60", VA = "0x9D6E60", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x4000F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private List<JSONNode> m_List;

		[Token(Token = "0x4000F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private bool inline;

		[Token(Token = "0x170002E8")]
		public override bool Inline
		{
			[Token(Token = "0x6001566")]
			[Address(RVA = "0x9D5CB8", Offset = "0x9D5CB8", VA = "0x9D5CB8", Slot = "18")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001567")]
			[Address(RVA = "0x9D5CC0", Offset = "0x9D5CC0", VA = "0x9D5CC0", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x170002E9")]
		public override JSONNodeType Tag
		{
			[Token(Token = "0x6001568")]
			[Address(RVA = "0x9D5CC8", Offset = "0x9D5CC8", VA = "0x9D5CC8", Slot = "4")]
			get
			{
				return default(JSONNodeType);
			}
		}

		[Token(Token = "0x170002EA")]
		public override bool IsArray
		{
			[Token(Token = "0x6001569")]
			[Address(RVA = "0x9D5CD0", Offset = "0x9D5CD0", VA = "0x9D5CD0", Slot = "16")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002EB")]
		public override JSONNode Item
		{
			[Token(Token = "0x600156B")]
			[Address(RVA = "0x9D5DD4", Offset = "0x9D5DD4", VA = "0x9D5DD4", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x600156C")]
			[Address(RVA = "0x9D5F3C", Offset = "0x9D5F3C", VA = "0x9D5F3C", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x170002EC")]
		public override JSONNode Item
		{
			[Token(Token = "0x600156D")]
			[Address(RVA = "0x9D6318", Offset = "0x9D6318", VA = "0x9D6318", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x600156E")]
			[Address(RVA = "0x9D6388", Offset = "0x9D6388", VA = "0x9D6388", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x170002ED")]
		public override int Count
		{
			[Token(Token = "0x600156F")]
			[Address(RVA = "0x9D647C", Offset = "0x9D647C", VA = "0x9D647C", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002EE")]
		public override IEnumerable<JSONNode> Children
		{
			[Token(Token = "0x6001573")]
			[Address(RVA = "0x9D673C", Offset = "0x9D673C", VA = "0x9D673C", Slot = "25")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2FC3B8", Offset = "0x2FC3B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600156A")]
		[Address(RVA = "0x9D5CD8", Offset = "0x9D5CD8", VA = "0x9D5CD8", Slot = "28")]
		public override Enumerator GetEnumerator()
		{
			return default(Enumerator);
		}

		[Token(Token = "0x6001570")]
		[Address(RVA = "0x9D64E0", Offset = "0x9D64E0", VA = "0x9D64E0", Slot = "20")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x6001571")]
		[Address(RVA = "0x9D65D4", Offset = "0x9D65D4", VA = "0x9D65D4", Slot = "23")]
		public override JSONNode Remove(int aIndex)
		{
			return null;
		}

		[Token(Token = "0x6001572")]
		[Address(RVA = "0x9D66B8", Offset = "0x9D66B8", VA = "0x9D66B8", Slot = "24")]
		public override JSONNode Remove(JSONNode aNode)
		{
			return null;
		}

		[Token(Token = "0x6001574")]
		[Address(RVA = "0x9D6800", Offset = "0x9D6800", VA = "0x9D6800", Slot = "27")]
		internal override void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode)
		{
		}

		[Token(Token = "0x6001575")]
		[Address(RVA = "0x9D6A2C", Offset = "0x9D6A2C", VA = "0x9D6A2C")]
		public JSONArray()
		{
		}
	}
	[Token(Token = "0x20002B5")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x2EA2DC", Offset = "0x2EA2DC")]
	public class JSONObject : JSONNode
	{
		[Token(Token = "0x20005A7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EAEA8", Offset = "0x2EAEA8")]
		private sealed class <>c__DisplayClass21_0
		{
			[Token(Token = "0x4001FF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public JSONNode aNode;

			[Token(Token = "0x6001E66")]
			[Address(RVA = "0x9DF388", Offset = "0x9DF388", VA = "0x9DF388")]
			public <>c__DisplayClass21_0()
			{
			}

			[Token(Token = "0x6001E67")]
			[Address(RVA = "0x9DF850", Offset = "0x9DF850", VA = "0x9DF850")]
			internal bool <Remove>b__0(KeyValuePair<string, JSONNode> k)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20005A8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EAEB8", Offset = "0x2EAEB8")]
		private sealed class <get_Children>d__23 : IEnumerable<JSONNode>, IEnumerable, IEnumerator<JSONNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001FFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int <>1__state;

			[Token(Token = "0x4001FFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private JSONNode <>2__current;

			[Token(Token = "0x4001FFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4001FFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public JSONObject <>4__this;

			[Token(Token = "0x4001FFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Dictionary<string, JSONNode>.Enumerator <>7__wrap1;

			[Token(Token = "0x170003E1")]
			private JSONNode System.Collections.Generic.IEnumerator<OVRSimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x6001E6C")]
				[Address(RVA = "0x9DFAFC", Offset = "0x9DFAFC", VA = "0x9DFAFC", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003E2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001E6E")]
				[Address(RVA = "0x9DFB8C", Offset = "0x9DFB8C", VA = "0x9DFB8C", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001E68")]
			[Address(RVA = "0x9DF428", Offset = "0x9DF428", VA = "0x9DF428")]
			[DebuggerHidden]
			public <get_Children>d__23(int <>1__state)
			{
			}

			[Token(Token = "0x6001E69")]
			[Address(RVA = "0x9DF8DC", Offset = "0x9DF8DC", VA = "0x9DF8DC", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001E6A")]
			[Address(RVA = "0x9DF960", Offset = "0x9DF960", VA = "0x9DF960", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001E6B")]
			[Address(RVA = "0x9DF8F4", Offset = "0x9DF8F4", VA = "0x9DF8F4")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6001E6D")]
			[Address(RVA = "0x9DFB04", Offset = "0x9DFB04", VA = "0x9DFB04", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6001E6F")]
			[Address(RVA = "0x9DFB94", Offset = "0x9DFB94", VA = "0x9DFB94", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<OVRSimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001E70")]
			[Address(RVA = "0x9DFC60", Offset = "0x9DFC60", VA = "0x9DFC60", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x4000F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private Dictionary<string, JSONNode> m_Dict;

		[Token(Token = "0x4000F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private bool inline;

		[Token(Token = "0x170002EF")]
		public override bool Inline
		{
			[Token(Token = "0x6001576")]
			[Address(RVA = "0x9DE80C", Offset = "0x9DE80C", VA = "0x9DE80C", Slot = "18")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001577")]
			[Address(RVA = "0x9DE814", Offset = "0x9DE814", VA = "0x9DE814", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x170002F0")]
		public override JSONNodeType Tag
		{
			[Token(Token = "0x6001578")]
			[Address(RVA = "0x9DE81C", Offset = "0x9DE81C", VA = "0x9DE81C", Slot = "4")]
			get
			{
				return default(JSONNodeType);
			}
		}

		[Token(Token = "0x170002F1")]
		public override bool IsObject
		{
			[Token(Token = "0x6001579")]
			[Address(RVA = "0x9DE824", Offset = "0x9DE824", VA = "0x9DE824", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002F2")]
		public override JSONNode Item
		{
			[Token(Token = "0x600157B")]
			[Address(RVA = "0x9DE8E8", Offset = "0x9DE8E8", VA = "0x9DE8E8", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x600157C")]
			[Address(RVA = "0x9DE9CC", Offset = "0x9DE9CC", VA = "0x9DE9CC", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x170002F3")]
		public override JSONNode Item
		{
			[Token(Token = "0x600157D")]
			[Address(RVA = "0x9DEB28", Offset = "0x9DEB28", VA = "0x9DEB28", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x600157E")]
			[Address(RVA = "0x9DEBE8", Offset = "0x9DEBE8", VA = "0x9DEBE8", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x170002F4")]
		public override int Count
		{
			[Token(Token = "0x600157F")]
			[Address(RVA = "0x9DED50", Offset = "0x9DED50", VA = "0x9DED50", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002F5")]
		public override IEnumerable<JSONNode> Children
		{
			[Token(Token = "0x6001584")]
			[Address(RVA = "0x9DF390", Offset = "0x9DF390", VA = "0x9DF390", Slot = "25")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2FC430", Offset = "0x2FC430")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600157A")]
		[Address(RVA = "0x9DE82C", Offset = "0x9DE82C", VA = "0x9DE82C", Slot = "28")]
		public override Enumerator GetEnumerator()
		{
			return default(Enumerator);
		}

		[Token(Token = "0x6001580")]
		[Address(RVA = "0x9DEDC8", Offset = "0x9DEDC8", VA = "0x9DEDC8", Slot = "20")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x6001581")]
		[Address(RVA = "0x9DEFC8", Offset = "0x9DEFC8", VA = "0x9DEFC8", Slot = "22")]
		public override JSONNode Remove(string aKey)
		{
			return null;
		}

		[Token(Token = "0x6001582")]
		[Address(RVA = "0x9DF0BC", Offset = "0x9DF0BC", VA = "0x9DF0BC", Slot = "23")]
		public override JSONNode Remove(int aIndex)
		{
			return null;
		}

		[Token(Token = "0x6001583")]
		[Address(RVA = "0x9DF1AC", Offset = "0x9DF1AC", VA = "0x9DF1AC", Slot = "24")]
		public override JSONNode Remove(JSONNode aNode)
		{
			return null;
		}

		[Token(Token = "0x6001585")]
		[Address(RVA = "0x9DF454", Offset = "0x9DF454", VA = "0x9DF454", Slot = "27")]
		internal override void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode)
		{
		}

		[Token(Token = "0x6001586")]
		[Address(RVA = "0x9D74BC", Offset = "0x9D74BC", VA = "0x9D74BC")]
		public JSONObject()
		{
		}
	}
	[Token(Token = "0x20002B6")]
	public class JSONString : JSONNode
	{
		[Token(Token = "0x4000F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private string m_Data;

		[Token(Token = "0x170002F6")]
		public override JSONNodeType Tag
		{
			[Token(Token = "0x6001587")]
			[Address(RVA = "0x9DFC64", Offset = "0x9DFC64", VA = "0x9DFC64", Slot = "4")]
			get
			{
				return default(JSONNodeType);
			}
		}

		[Token(Token = "0x170002F7")]
		public override bool IsString
		{
			[Token(Token = "0x6001588")]
			[Address(RVA = "0x9DFC6C", Offset = "0x9DFC6C", VA = "0x9DFC6C", Slot = "13")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002F8")]
		public override string Value
		{
			[Token(Token = "0x600158A")]
			[Address(RVA = "0x9DFC8C", Offset = "0x9DFC8C", VA = "0x9DFC8C", Slot = "9")]
			get
			{
				return null;
			}
			[Token(Token = "0x600158B")]
			[Address(RVA = "0x9DFC94", Offset = "0x9DFC94", VA = "0x9DFC94", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x6001589")]
		[Address(RVA = "0x9DFC74", Offset = "0x9DFC74", VA = "0x9DFC74", Slot = "28")]
		public override Enumerator GetEnumerator()
		{
			return default(Enumerator);
		}

		[Token(Token = "0x600158C")]
		[Address(RVA = "0x9D7CB8", Offset = "0x9D7CB8", VA = "0x9D7CB8")]
		public JSONString(string aData)
		{
		}

		[Token(Token = "0x600158D")]
		[Address(RVA = "0x9DFC9C", Offset = "0x9DFC9C", VA = "0x9DFC9C", Slot = "27")]
		internal override void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode)
		{
		}

		[Token(Token = "0x600158E")]
		[Address(RVA = "0x9DFD90", Offset = "0x9DFD90", VA = "0x9DFD90", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600158F")]
		[Address(RVA = "0x9DFEC8", Offset = "0x9DFEC8", VA = "0x9DFEC8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002B7")]
	public class JSONNumber : JSONNode
	{
		[Token(Token = "0x4000F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private double m_Data;

		[Token(Token = "0x170002F9")]
		public override JSONNodeType Tag
		{
			[Token(Token = "0x6001590")]
			[Address(RVA = "0x9DE23C", Offset = "0x9DE23C", VA = "0x9DE23C", Slot = "4")]
			get
			{
				return default(JSONNodeType);
			}
		}

		[Token(Token = "0x170002FA")]
		public override bool IsNumber
		{
			[Token(Token = "0x6001591")]
			[Address(RVA = "0x9DE244", Offset = "0x9DE244", VA = "0x9DE244", Slot = "12")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002FB")]
		public override string Value
		{
			[Token(Token = "0x6001593")]
			[Address(RVA = "0x9DE264", Offset = "0x9DE264", VA = "0x9DE264", Slot = "9")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001594")]
			[Address(RVA = "0x9DE2F8", Offset = "0x9DE2F8", VA = "0x9DE2F8", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x170002FC")]
		public override double AsDouble
		{
			[Token(Token = "0x6001595")]
			[Address(RVA = "0x9DE3E8", Offset = "0x9DE3E8", VA = "0x9DE3E8", Slot = "29")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001596")]
			[Address(RVA = "0x9DE3F4", Offset = "0x9DE3F4", VA = "0x9DE3F4", Slot = "30")]
			set
			{
			}
		}

		[Token(Token = "0x170002FD")]
		public override long AsLong
		{
			[Token(Token = "0x6001597")]
			[Address(RVA = "0x9DE404", Offset = "0x9DE404", VA = "0x9DE404", Slot = "37")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x6001598")]
			[Address(RVA = "0x9DE41C", Offset = "0x9DE41C", VA = "0x9DE41C", Slot = "38")]
			set
			{
			}
		}

		[Token(Token = "0x6001592")]
		[Address(RVA = "0x9DE24C", Offset = "0x9DE24C", VA = "0x9DE24C", Slot = "28")]
		public override Enumerator GetEnumerator()
		{
			return default(Enumerator);
		}

		[Token(Token = "0x6001599")]
		[Address(RVA = "0x9D77E0", Offset = "0x9D77E0", VA = "0x9D77E0")]
		public JSONNumber(double aData)
		{
		}

		[Token(Token = "0x600159A")]
		[Address(RVA = "0x9DE43C", Offset = "0x9DE43C", VA = "0x9DE43C")]
		public JSONNumber(string aData)
		{
		}

		[Token(Token = "0x600159B")]
		[Address(RVA = "0x9DE4DC", Offset = "0x9DE4DC", VA = "0x9DE4DC", Slot = "27")]
		internal override void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode)
		{
		}

		[Token(Token = "0x600159C")]
		[Address(RVA = "0x9DE520", Offset = "0x9DE520", VA = "0x9DE520")]
		private static bool IsNumeric(object value)
		{
			return default(bool);
		}

		[Token(Token = "0x600159D")]
		[Address(RVA = "0x9DE67C", Offset = "0x9DE67C", VA = "0x9DE67C", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600159E")]
		[Address(RVA = "0x9DE800", Offset = "0x9DE800", VA = "0x9DE800", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002B8")]
	public class JSONBool : JSONNode
	{
		[Token(Token = "0x4000F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private bool m_Data;

		[Token(Token = "0x170002FE")]
		public override JSONNodeType Tag
		{
			[Token(Token = "0x600159F")]
			[Address(RVA = "0x9D6E64", Offset = "0x9D6E64", VA = "0x9D6E64", Slot = "4")]
			get
			{
				return default(JSONNodeType);
			}
		}

		[Token(Token = "0x170002FF")]
		public override bool IsBoolean
		{
			[Token(Token = "0x60015A0")]
			[Address(RVA = "0x9D6E6C", Offset = "0x9D6E6C", VA = "0x9D6E6C", Slot = "14")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000300")]
		public override string Value
		{
			[Token(Token = "0x60015A2")]
			[Address(RVA = "0x9D6E8C", Offset = "0x9D6E8C", VA = "0x9D6E8C", Slot = "9")]
			get
			{
				return null;
			}
			[Token(Token = "0x60015A3")]
			[Address(RVA = "0x9D6E98", Offset = "0x9D6E98", VA = "0x9D6E98", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x17000301")]
		public override bool AsBool
		{
			[Token(Token = "0x60015A4")]
			[Address(RVA = "0x9D6F40", Offset = "0x9D6F40", VA = "0x9D6F40", Slot = "35")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60015A5")]
			[Address(RVA = "0x9D6F48", Offset = "0x9D6F48", VA = "0x9D6F48", Slot = "36")]
			set
			{
			}
		}

		[Token(Token = "0x60015A1")]
		[Address(RVA = "0x9D6E74", Offset = "0x9D6E74", VA = "0x9D6E74", Slot = "28")]
		public override Enumerator GetEnumerator()
		{
			return default(Enumerator);
		}

		[Token(Token = "0x60015A6")]
		[Address(RVA = "0x9D6F50", Offset = "0x9D6F50", VA = "0x9D6F50")]
		public JSONBool(bool aData)
		{
		}

		[Token(Token = "0x60015A7")]
		[Address(RVA = "0x9D6FDC", Offset = "0x9D6FDC", VA = "0x9D6FDC")]
		public JSONBool(string aData)
		{
		}

		[Token(Token = "0x60015A8")]
		[Address(RVA = "0x9D707C", Offset = "0x9D707C", VA = "0x9D707C", Slot = "27")]
		internal override void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode)
		{
		}

		[Token(Token = "0x60015A9")]
		[Address(RVA = "0x9D7110", Offset = "0x9D7110", VA = "0x9D7110", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60015AA")]
		[Address(RVA = "0x9D71A4", Offset = "0x9D71A4", VA = "0x9D71A4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002B9")]
	public class JSONNull : JSONNode
	{
		[Token(Token = "0x4000F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static JSONNull m_StaticInstance;

		[Token(Token = "0x4000F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static bool reuseSameInstance;

		[Token(Token = "0x17000302")]
		public override JSONNodeType Tag
		{
			[Token(Token = "0x60015AD")]
			[Address(RVA = "0x9DE000", Offset = "0x9DE000", VA = "0x9DE000", Slot = "4")]
			get
			{
				return default(JSONNodeType);
			}
		}

		[Token(Token = "0x17000303")]
		public override bool IsNull
		{
			[Token(Token = "0x60015AE")]
			[Address(RVA = "0x9DE008", Offset = "0x9DE008", VA = "0x9DE008", Slot = "15")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000304")]
		public override string Value
		{
			[Token(Token = "0x60015B0")]
			[Address(RVA = "0x9DE028", Offset = "0x9DE028", VA = "0x9DE028", Slot = "9")]
			get
			{
				return null;
			}
			[Token(Token = "0x60015B1")]
			[Address(RVA = "0x9DE084", Offset = "0x9DE084", VA = "0x9DE084", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x17000305")]
		public override bool AsBool
		{
			[Token(Token = "0x60015B2")]
			[Address(RVA = "0x9DE088", Offset = "0x9DE088", VA = "0x9DE088", Slot = "35")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60015B3")]
			[Address(RVA = "0x9DE090", Offset = "0x9DE090", VA = "0x9DE090", Slot = "36")]
			set
			{
			}
		}

		[Token(Token = "0x60015AB")]
		[Address(RVA = "0x9D623C", Offset = "0x9D623C", VA = "0x9D623C")]
		public static JSONNull CreateOrGet()
		{
			return null;
		}

		[Token(Token = "0x60015AC")]
		[Address(RVA = "0x9DDF7C", Offset = "0x9DDF7C", VA = "0x9DDF7C")]
		private JSONNull()
		{
		}

		[Token(Token = "0x60015AF")]
		[Address(RVA = "0x9DE010", Offset = "0x9DE010", VA = "0x9DE010", Slot = "28")]
		public override Enumerator GetEnumerator()
		{
			return default(Enumerator);
		}

		[Token(Token = "0x60015B4")]
		[Address(RVA = "0x9DE094", Offset = "0x9DE094", VA = "0x9DE094", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60015B5")]
		[Address(RVA = "0x9DE13C", Offset = "0x9DE13C", VA = "0x9DE13C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60015B6")]
		[Address(RVA = "0x9DE144", Offset = "0x9DE144", VA = "0x9DE144", Slot = "27")]
		internal override void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode)
		{
		}
	}
	[Token(Token = "0x20002BA")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0x2EA310", Offset = "0x2EA310")]
	internal class JSONLazyCreator : JSONNode
	{
		[Token(Token = "0x4000F78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private JSONNode m_Node;

		[Token(Token = "0x4000F79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private string m_Key;

		[Token(Token = "0x17000306")]
		public override JSONNodeType Tag
		{
			[Token(Token = "0x60015B8")]
			[Address(RVA = "0x9D71B0", Offset = "0x9D71B0", VA = "0x9D71B0", Slot = "4")]
			get
			{
				return default(JSONNodeType);
			}
		}

		[Token(Token = "0x17000307")]
		public override JSONNode Item
		{
			[Token(Token = "0x60015BD")]
			[Address(RVA = "0x9D7264", Offset = "0x9D7264", VA = "0x9D7264", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x60015BE")]
			[Address(RVA = "0x9D72D4", Offset = "0x9D72D4", VA = "0x9D72D4", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x17000308")]
		public override JSONNode Item
		{
			[Token(Token = "0x60015BF")]
			[Address(RVA = "0x9D7388", Offset = "0x9D7388", VA = "0x9D7388", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x60015C0")]
			[Address(RVA = "0x9D7400", Offset = "0x9D7400", VA = "0x9D7400", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x17000309")]
		public override int AsInt
		{
			[Token(Token = "0x60015C7")]
			[Address(RVA = "0x9D7748", Offset = "0x9D7748", VA = "0x9D7748", Slot = "31")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60015C8")]
			[Address(RVA = "0x9D787C", Offset = "0x9D787C", VA = "0x9D787C", Slot = "32")]
			set
			{
			}
		}

		[Token(Token = "0x1700030A")]
		public override float AsFloat
		{
			[Token(Token = "0x60015C9")]
			[Address(RVA = "0x9D7918", Offset = "0x9D7918", VA = "0x9D7918", Slot = "33")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60015CA")]
			[Address(RVA = "0x9D79B0", Offset = "0x9D79B0", VA = "0x9D79B0", Slot = "34")]
			set
			{
			}
		}

		[Token(Token = "0x1700030B")]
		public override double AsDouble
		{
			[Token(Token = "0x60015CB")]
			[Address(RVA = "0x9D7A50", Offset = "0x9D7A50", VA = "0x9D7A50", Slot = "29")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60015CC")]
			[Address(RVA = "0x9D7AF4", Offset = "0x9D7AF4", VA = "0x9D7AF4", Slot = "30")]
			set
			{
			}
		}

		[Token(Token = "0x1700030C")]
		public override long AsLong
		{
			[Token(Token = "0x60015CD")]
			[Address(RVA = "0x9D7B90", Offset = "0x9D7B90", VA = "0x9D7B90", Slot = "37")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x60015CE")]
			[Address(RVA = "0x9D7D44", Offset = "0x9D7D44", VA = "0x9D7D44", Slot = "38")]
			set
			{
			}
		}

		[Token(Token = "0x1700030D")]
		public override bool AsBool
		{
			[Token(Token = "0x60015CF")]
			[Address(RVA = "0x9D7E98", Offset = "0x9D7E98", VA = "0x9D7E98", Slot = "35")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60015D0")]
			[Address(RVA = "0x9D7F24", Offset = "0x9D7F24", VA = "0x9D7F24", Slot = "36")]
			set
			{
			}
		}

		[Token(Token = "0x1700030E")]
		public override JSONArray AsArray
		{
			[Token(Token = "0x60015D1")]
			[Address(RVA = "0x9D7FB0", Offset = "0x9D7FB0", VA = "0x9D7FB0", Slot = "39")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700030F")]
		public override JSONObject AsObject
		{
			[Token(Token = "0x60015D2")]
			[Address(RVA = "0x9D8034", Offset = "0x9D8034", VA = "0x9D8034", Slot = "40")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60015B9")]
		[Address(RVA = "0x9D71B8", Offset = "0x9D71B8", VA = "0x9D71B8", Slot = "28")]
		public override Enumerator GetEnumerator()
		{
			return default(Enumerator);
		}

		[Token(Token = "0x60015BA")]
		[Address(RVA = "0x9D5EA8", Offset = "0x9D5EA8", VA = "0x9D5EA8")]
		public JSONLazyCreator(JSONNode aNode)
		{
		}

		[Token(Token = "0x60015BB")]
		[Address(RVA = "0x9D71D0", Offset = "0x9D71D0", VA = "0x9D71D0")]
		public JSONLazyCreator(JSONNode aNode, string aKey)
		{
		}

		[Token(Token = "0x60015BC")]
		private T Set<T>(T aVal) where T : JSONNode
		{
			return null;
		}

		[Token(Token = "0x60015C1")]
		[Address(RVA = "0x9D7574", Offset = "0x9D7574", VA = "0x9D7574", Slot = "21")]
		public override void Add(JSONNode aItem)
		{
		}

		[Token(Token = "0x60015C2")]
		[Address(RVA = "0x9D7628", Offset = "0x9D7628", VA = "0x9D7628", Slot = "20")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x60015C3")]
		[Address(RVA = "0x9D76E4", Offset = "0x9D76E4", VA = "0x9D76E4")]
		public static bool operator ==(JSONLazyCreator a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x60015C4")]
		[Address(RVA = "0x9D7704", Offset = "0x9D7704", VA = "0x9D7704")]
		public static bool operator !=(JSONLazyCreator a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x60015C5")]
		[Address(RVA = "0x9D7720", Offset = "0x9D7720", VA = "0x9D7720", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60015C6")]
		[Address(RVA = "0x9D7740", Offset = "0x9D7740", VA = "0x9D7740", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60015D3")]
		[Address(RVA = "0x9D80B8", Offset = "0x9D80B8", VA = "0x9D80B8", Slot = "27")]
		internal override void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode)
		{
		}
	}
	[Token(Token = "0x20002BB")]
	public static class JSON
	{
		[Token(Token = "0x60015D4")]
		[Address(RVA = "0x9D5164", Offset = "0x9D5164", VA = "0x9D5164")]
		public static JSONNode Parse(string aJSON)
		{
			return null;
		}
	}
	[Token(Token = "0x20002BC")]
	public enum JSONContainerType
	{
		[Token(Token = "0x4000F7B")]
		Array,
		[Token(Token = "0x4000F7C")]
		Object
	}
}
namespace OVR.OpenVR
{
	[Token(Token = "0x20002BD")]
	public struct IVRSystem
	{
		[Token(Token = "0x20005A9")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EAEC8", Offset = "0x2EAEC8")]
		internal delegate void _GetRecommendedRenderTargetSize(ref uint pnWidth, ref uint pnHeight);

		[Token(Token = "0x20005AA")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EAEDC", Offset = "0x2EAEDC")]
		internal delegate HmdMatrix44_t _GetProjectionMatrix(EVREye eEye, float fNearZ, float fFarZ);

		[Token(Token = "0x20005AB")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EAEF0", Offset = "0x2EAEF0")]
		internal delegate void _GetProjectionRaw(EVREye eEye, ref float pfLeft, ref float pfRight, ref float pfTop, ref float pfBottom);

		[Token(Token = "0x20005AC")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EAF04", Offset = "0x2EAF04")]
		internal delegate bool _ComputeDistortion(EVREye eEye, float fU, float fV, ref DistortionCoordinates_t pDistortionCoordinates);

		[Token(Token = "0x20005AD")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EAF18", Offset = "0x2EAF18")]
		internal delegate HmdMatrix34_t _GetEyeToHeadTransform(EVREye eEye);

		[Token(Token = "0x20005AE")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EAF2C", Offset = "0x2EAF2C")]
		internal delegate bool _GetTimeSinceLastVsync(ref float pfSecondsSinceLastVsync, ref ulong pulFrameCounter);

		[Token(Token = "0x20005AF")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EAF40", Offset = "0x2EAF40")]
		internal delegate int _GetD3D9AdapterIndex();

		[Token(Token = "0x20005B0")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EAF54", Offset = "0x2EAF54")]
		internal delegate void _GetDXGIOutputInfo(ref int pnAdapterIndex);

		[Token(Token = "0x20005B1")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EAF68", Offset = "0x2EAF68")]
		internal delegate void _GetOutputDevice(ref ulong pnDevice, ETextureType textureType, IntPtr pInstance);

		[Token(Token = "0x20005B2")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EAF7C", Offset = "0x2EAF7C")]
		internal delegate bool _IsDisplayOnDesktop();

		[Token(Token = "0x20005B3")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EAF90", Offset = "0x2EAF90")]
		internal delegate bool _SetDisplayVisibility(bool bIsVisibleOnDesktop);

		[Token(Token = "0x20005B4")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EAFA4", Offset = "0x2EAFA4")]
		internal delegate void _GetDeviceToAbsoluteTrackingPose(ETrackingUniverseOrigin eOrigin, float fPredictedSecondsToPhotonsFromNow, [In][Out] TrackedDevicePose_t[] pTrackedDevicePoseArray, uint unTrackedDevicePoseArrayCount);

		[Token(Token = "0x20005B5")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EAFB8", Offset = "0x2EAFB8")]
		internal delegate void _ResetSeatedZeroPose();

		[Token(Token = "0x20005B6")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EAFCC", Offset = "0x2EAFCC")]
		internal delegate HmdMatrix34_t _GetSeatedZeroPoseToStandingAbsoluteTrackingPose();

		[Token(Token = "0x20005B7")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EAFE0", Offset = "0x2EAFE0")]
		internal delegate HmdMatrix34_t _GetRawZeroPoseToStandingAbsoluteTrackingPose();

		[Token(Token = "0x20005B8")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EAFF4", Offset = "0x2EAFF4")]
		internal delegate uint _GetSortedTrackedDeviceIndicesOfClass(ETrackedDeviceClass eTrackedDeviceClass, [In][Out] uint[] punTrackedDeviceIndexArray, uint unTrackedDeviceIndexArrayCount, uint unRelativeToTrackedDeviceIndex);

		[Token(Token = "0x20005B9")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB008", Offset = "0x2EB008")]
		internal delegate EDeviceActivityLevel _GetTrackedDeviceActivityLevel(uint unDeviceId);

		[Token(Token = "0x20005BA")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB01C", Offset = "0x2EB01C")]
		internal delegate void _ApplyTransform(ref TrackedDevicePose_t pOutputPose, ref TrackedDevicePose_t pTrackedDevicePose, ref HmdMatrix34_t pTransform);

		[Token(Token = "0x20005BB")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB030", Offset = "0x2EB030")]
		internal delegate uint _GetTrackedDeviceIndexForControllerRole(ETrackedControllerRole unDeviceType);

		[Token(Token = "0x20005BC")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB044", Offset = "0x2EB044")]
		internal delegate ETrackedControllerRole _GetControllerRoleForTrackedDeviceIndex(uint unDeviceIndex);

		[Token(Token = "0x20005BD")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB058", Offset = "0x2EB058")]
		internal delegate ETrackedDeviceClass _GetTrackedDeviceClass(uint unDeviceIndex);

		[Token(Token = "0x20005BE")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB06C", Offset = "0x2EB06C")]
		internal delegate bool _IsTrackedDeviceConnected(uint unDeviceIndex);

		[Token(Token = "0x20005BF")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB080", Offset = "0x2EB080")]
		internal delegate bool _GetBoolTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError);

		[Token(Token = "0x20005C0")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB094", Offset = "0x2EB094")]
		internal delegate float _GetFloatTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError);

		[Token(Token = "0x20005C1")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB0A8", Offset = "0x2EB0A8")]
		internal delegate int _GetInt32TrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError);

		[Token(Token = "0x20005C2")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB0BC", Offset = "0x2EB0BC")]
		internal delegate ulong _GetUint64TrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError);

		[Token(Token = "0x20005C3")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB0D0", Offset = "0x2EB0D0")]
		internal delegate HmdMatrix34_t _GetMatrix34TrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError);

		[Token(Token = "0x20005C4")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB0E4", Offset = "0x2EB0E4")]
		internal delegate uint _GetArrayTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, uint propType, IntPtr pBuffer, uint unBufferSize, ref ETrackedPropertyError pError);

		[Token(Token = "0x20005C5")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB0F8", Offset = "0x2EB0F8")]
		internal delegate uint _GetStringTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, StringBuilder pchValue, uint unBufferSize, ref ETrackedPropertyError pError);

		[Token(Token = "0x20005C6")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB10C", Offset = "0x2EB10C")]
		internal delegate IntPtr _GetPropErrorNameFromEnum(ETrackedPropertyError error);

		[Token(Token = "0x20005C7")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB120", Offset = "0x2EB120")]
		internal delegate bool _PollNextEvent(ref VREvent_t pEvent, uint uncbVREvent);

		[Token(Token = "0x20005C8")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB134", Offset = "0x2EB134")]
		internal delegate bool _PollNextEventWithPose(ETrackingUniverseOrigin eOrigin, ref VREvent_t pEvent, uint uncbVREvent, ref TrackedDevicePose_t pTrackedDevicePose);

		[Token(Token = "0x20005C9")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB148", Offset = "0x2EB148")]
		internal delegate IntPtr _GetEventTypeNameFromEnum(EVREventType eType);

		[Token(Token = "0x20005CA")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB15C", Offset = "0x2EB15C")]
		internal delegate HiddenAreaMesh_t _GetHiddenAreaMesh(EVREye eEye, EHiddenAreaMeshType type);

		[Token(Token = "0x20005CB")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB170", Offset = "0x2EB170")]
		internal delegate bool _GetControllerState(uint unControllerDeviceIndex, ref VRControllerState_t pControllerState, uint unControllerStateSize);

		[Token(Token = "0x20005CC")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB184", Offset = "0x2EB184")]
		internal delegate bool _GetControllerStateWithPose(ETrackingUniverseOrigin eOrigin, uint unControllerDeviceIndex, ref VRControllerState_t pControllerState, uint unControllerStateSize, ref TrackedDevicePose_t pTrackedDevicePose);

		[Token(Token = "0x20005CD")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB198", Offset = "0x2EB198")]
		internal delegate void _TriggerHapticPulse(uint unControllerDeviceIndex, uint unAxisId, ushort usDurationMicroSec);

		[Token(Token = "0x20005CE")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB1AC", Offset = "0x2EB1AC")]
		internal delegate IntPtr _GetButtonIdNameFromEnum(EVRButtonId eButtonId);

		[Token(Token = "0x20005CF")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB1C0", Offset = "0x2EB1C0")]
		internal delegate IntPtr _GetControllerAxisTypeNameFromEnum(EVRControllerAxisType eAxisType);

		[Token(Token = "0x20005D0")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB1D4", Offset = "0x2EB1D4")]
		internal delegate bool _IsInputAvailable();

		[Token(Token = "0x20005D1")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB1E8", Offset = "0x2EB1E8")]
		internal delegate bool _IsSteamVRDrawingControllers();

		[Token(Token = "0x20005D2")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB1FC", Offset = "0x2EB1FC")]
		internal delegate bool _ShouldApplicationPause();

		[Token(Token = "0x20005D3")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB210", Offset = "0x2EB210")]
		internal delegate bool _ShouldApplicationReduceRenderingWork();

		[Token(Token = "0x20005D4")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB224", Offset = "0x2EB224")]
		internal delegate uint _DriverDebugRequest(uint unDeviceIndex, string pchRequest, StringBuilder pchResponseBuffer, uint unResponseBufferSize);

		[Token(Token = "0x20005D5")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB238", Offset = "0x2EB238")]
		internal delegate EVRFirmwareError _PerformFirmwareUpdate(uint unDeviceIndex);

		[Token(Token = "0x20005D6")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB24C", Offset = "0x2EB24C")]
		internal delegate void _AcknowledgeQuit_Exiting();

		[Token(Token = "0x20005D7")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB260", Offset = "0x2EB260")]
		internal delegate void _AcknowledgeQuit_UserPrompt();

		[Token(Token = "0x4000F7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _GetRecommendedRenderTargetSize GetRecommendedRenderTargetSize;

		[Token(Token = "0x4000F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		internal _GetProjectionMatrix GetProjectionMatrix;

		[Token(Token = "0x4000F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _GetProjectionRaw GetProjectionRaw;

		[Token(Token = "0x4000F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal _ComputeDistortion ComputeDistortion;

		[Token(Token = "0x4000F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _GetEyeToHeadTransform GetEyeToHeadTransform;

		[Token(Token = "0x4000F82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal _GetTimeSinceLastVsync GetTimeSinceLastVsync;

		[Token(Token = "0x4000F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _GetD3D9AdapterIndex GetD3D9AdapterIndex;

		[Token(Token = "0x4000F84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal _GetDXGIOutputInfo GetDXGIOutputInfo;

		[Token(Token = "0x4000F85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _GetOutputDevice GetOutputDevice;

		[Token(Token = "0x4000F86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal _IsDisplayOnDesktop IsDisplayOnDesktop;

		[Token(Token = "0x4000F87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _SetDisplayVisibility SetDisplayVisibility;

		[Token(Token = "0x4000F88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal _GetDeviceToAbsoluteTrackingPose GetDeviceToAbsoluteTrackingPose;

		[Token(Token = "0x4000F89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _ResetSeatedZeroPose ResetSeatedZeroPose;

		[Token(Token = "0x4000F8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal _GetSeatedZeroPoseToStandingAbsoluteTrackingPose GetSeatedZeroPoseToStandingAbsoluteTrackingPose;

		[Token(Token = "0x4000F8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _GetRawZeroPoseToStandingAbsoluteTrackingPose GetRawZeroPoseToStandingAbsoluteTrackingPose;

		[Token(Token = "0x4000F8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		internal _GetSortedTrackedDeviceIndicesOfClass GetSortedTrackedDeviceIndicesOfClass;

		[Token(Token = "0x4000F8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _GetTrackedDeviceActivityLevel GetTrackedDeviceActivityLevel;

		[Token(Token = "0x4000F8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		internal _ApplyTransform ApplyTransform;

		[Token(Token = "0x4000F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _GetTrackedDeviceIndexForControllerRole GetTrackedDeviceIndexForControllerRole;

		[Token(Token = "0x4000F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		internal _GetControllerRoleForTrackedDeviceIndex GetControllerRoleForTrackedDeviceIndex;

		[Token(Token = "0x4000F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _GetTrackedDeviceClass GetTrackedDeviceClass;

		[Token(Token = "0x4000F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		internal _IsTrackedDeviceConnected IsTrackedDeviceConnected;

		[Token(Token = "0x4000F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _GetBoolTrackedDeviceProperty GetBoolTrackedDeviceProperty;

		[Token(Token = "0x4000F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		internal _GetFloatTrackedDeviceProperty GetFloatTrackedDeviceProperty;

		[Token(Token = "0x4000F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal _GetInt32TrackedDeviceProperty GetInt32TrackedDeviceProperty;

		[Token(Token = "0x4000F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		internal _GetUint64TrackedDeviceProperty GetUint64TrackedDeviceProperty;

		[Token(Token = "0x4000F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal _GetMatrix34TrackedDeviceProperty GetMatrix34TrackedDeviceProperty;

		[Token(Token = "0x4000F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		internal _GetArrayTrackedDeviceProperty GetArrayTrackedDeviceProperty;

		[Token(Token = "0x4000F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal _GetStringTrackedDeviceProperty GetStringTrackedDeviceProperty;

		[Token(Token = "0x4000F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		internal _GetPropErrorNameFromEnum GetPropErrorNameFromEnum;

		[Token(Token = "0x4000F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal _PollNextEvent PollNextEvent;

		[Token(Token = "0x4000F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		internal _PollNextEventWithPose PollNextEventWithPose;

		[Token(Token = "0x4000F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal _GetEventTypeNameFromEnum GetEventTypeNameFromEnum;

		[Token(Token = "0x4000F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		internal _GetHiddenAreaMesh GetHiddenAreaMesh;

		[Token(Token = "0x4000F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal _GetControllerState GetControllerState;

		[Token(Token = "0x4000FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		internal _GetControllerStateWithPose GetControllerStateWithPose;

		[Token(Token = "0x4000FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal _TriggerHapticPulse TriggerHapticPulse;

		[Token(Token = "0x4000FA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		internal _GetButtonIdNameFromEnum GetButtonIdNameFromEnum;

		[Token(Token = "0x4000FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal _GetControllerAxisTypeNameFromEnum GetControllerAxisTypeNameFromEnum;

		[Token(Token = "0x4000FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		internal _IsInputAvailable IsInputAvailable;

		[Token(Token = "0x4000FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		internal _IsSteamVRDrawingControllers IsSteamVRDrawingControllers;

		[Token(Token = "0x4000FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		internal _ShouldApplicationPause ShouldApplicationPause;

		[Token(Token = "0x4000FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		internal _ShouldApplicationReduceRenderingWork ShouldApplicationReduceRenderingWork;

		[Token(Token = "0x4000FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		internal _DriverDebugRequest DriverDebugRequest;

		[Token(Token = "0x4000FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		internal _PerformFirmwareUpdate PerformFirmwareUpdate;

		[Token(Token = "0x4000FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		internal _AcknowledgeQuit_Exiting AcknowledgeQuit_Exiting;

		[Token(Token = "0x4000FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		internal _AcknowledgeQuit_UserPrompt AcknowledgeQuit_UserPrompt;
	}
	[Token(Token = "0x20002BE")]
	public struct IVRExtendedDisplay
	{
		[Token(Token = "0x20005D8")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB274", Offset = "0x2EB274")]
		internal delegate void _GetWindowBounds(ref int pnX, ref int pnY, ref uint pnWidth, ref uint pnHeight);

		[Token(Token = "0x20005D9")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB288", Offset = "0x2EB288")]
		internal delegate void _GetEyeOutputViewport(EVREye eEye, ref uint pnX, ref uint pnY, ref uint pnWidth, ref uint pnHeight);

		[Token(Token = "0x20005DA")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB29C", Offset = "0x2EB29C")]
		internal delegate void _GetDXGIOutputInfo(ref int pnAdapterIndex, ref int pnAdapterOutputIndex);

		[Token(Token = "0x4000FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _GetWindowBounds GetWindowBounds;

		[Token(Token = "0x4000FAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		internal _GetEyeOutputViewport GetEyeOutputViewport;

		[Token(Token = "0x4000FAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _GetDXGIOutputInfo GetDXGIOutputInfo;
	}
	[Token(Token = "0x20002BF")]
	public struct IVRTrackedCamera
	{
		[Token(Token = "0x20005DB")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB2B0", Offset = "0x2EB2B0")]
		internal delegate IntPtr _GetCameraErrorNameFromEnum(EVRTrackedCameraError eCameraError);

		[Token(Token = "0x20005DC")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB2C4", Offset = "0x2EB2C4")]
		internal delegate EVRTrackedCameraError _HasCamera(uint nDeviceIndex, ref bool pHasCamera);

		[Token(Token = "0x20005DD")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB2D8", Offset = "0x2EB2D8")]
		internal delegate EVRTrackedCameraError _GetCameraFrameSize(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, ref uint pnWidth, ref uint pnHeight, ref uint pnFrameBufferSize);

		[Token(Token = "0x20005DE")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB2EC", Offset = "0x2EB2EC")]
		internal delegate EVRTrackedCameraError _GetCameraIntrinsics(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, ref HmdVector2_t pFocalLength, ref HmdVector2_t pCenter);

		[Token(Token = "0x20005DF")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB300", Offset = "0x2EB300")]
		internal delegate EVRTrackedCameraError _GetCameraProjection(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, float flZNear, float flZFar, ref HmdMatrix44_t pProjection);

		[Token(Token = "0x20005E0")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB314", Offset = "0x2EB314")]
		internal delegate EVRTrackedCameraError _AcquireVideoStreamingService(uint nDeviceIndex, ref ulong pHandle);

		[Token(Token = "0x20005E1")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB328", Offset = "0x2EB328")]
		internal delegate EVRTrackedCameraError _ReleaseVideoStreamingService(ulong hTrackedCamera);

		[Token(Token = "0x20005E2")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB33C", Offset = "0x2EB33C")]
		internal delegate EVRTrackedCameraError _GetVideoStreamFrameBuffer(ulong hTrackedCamera, EVRTrackedCameraFrameType eFrameType, IntPtr pFrameBuffer, uint nFrameBufferSize, ref CameraVideoStreamFrameHeader_t pFrameHeader, uint nFrameHeaderSize);

		[Token(Token = "0x20005E3")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB350", Offset = "0x2EB350")]
		internal delegate EVRTrackedCameraError _GetVideoStreamTextureSize(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, ref VRTextureBounds_t pTextureBounds, ref uint pnWidth, ref uint pnHeight);

		[Token(Token = "0x20005E4")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB364", Offset = "0x2EB364")]
		internal delegate EVRTrackedCameraError _GetVideoStreamTextureD3D11(ulong hTrackedCamera, EVRTrackedCameraFrameType eFrameType, IntPtr pD3D11DeviceOrResource, ref IntPtr ppD3D11ShaderResourceView, ref CameraVideoStreamFrameHeader_t pFrameHeader, uint nFrameHeaderSize);

		[Token(Token = "0x20005E5")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB378", Offset = "0x2EB378")]
		internal delegate EVRTrackedCameraError _GetVideoStreamTextureGL(ulong hTrackedCamera, EVRTrackedCameraFrameType eFrameType, ref uint pglTextureId, ref CameraVideoStreamFrameHeader_t pFrameHeader, uint nFrameHeaderSize);

		[Token(Token = "0x20005E6")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB38C", Offset = "0x2EB38C")]
		internal delegate EVRTrackedCameraError _ReleaseVideoStreamTextureGL(ulong hTrackedCamera, uint glTextureId);

		[Token(Token = "0x4000FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _GetCameraErrorNameFromEnum GetCameraErrorNameFromEnum;

		[Token(Token = "0x4000FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		internal _HasCamera HasCamera;

		[Token(Token = "0x4000FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _GetCameraFrameSize GetCameraFrameSize;

		[Token(Token = "0x4000FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal _GetCameraIntrinsics GetCameraIntrinsics;

		[Token(Token = "0x4000FB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _GetCameraProjection GetCameraProjection;

		[Token(Token = "0x4000FB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal _AcquireVideoStreamingService AcquireVideoStreamingService;

		[Token(Token = "0x4000FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _ReleaseVideoStreamingService ReleaseVideoStreamingService;

		[Token(Token = "0x4000FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal _GetVideoStreamFrameBuffer GetVideoStreamFrameBuffer;

		[Token(Token = "0x4000FB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _GetVideoStreamTextureSize GetVideoStreamTextureSize;

		[Token(Token = "0x4000FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal _GetVideoStreamTextureD3D11 GetVideoStreamTextureD3D11;

		[Token(Token = "0x4000FB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _GetVideoStreamTextureGL GetVideoStreamTextureGL;

		[Token(Token = "0x4000FBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal _ReleaseVideoStreamTextureGL ReleaseVideoStreamTextureGL;
	}
	[Token(Token = "0x20002C0")]
	public struct IVRApplications
	{
		[Token(Token = "0x20005E7")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB3A0", Offset = "0x2EB3A0")]
		internal delegate EVRApplicationError _AddApplicationManifest(string pchApplicationManifestFullPath, bool bTemporary);

		[Token(Token = "0x20005E8")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB3B4", Offset = "0x2EB3B4")]
		internal delegate EVRApplicationError _RemoveApplicationManifest(string pchApplicationManifestFullPath);

		[Token(Token = "0x20005E9")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB3C8", Offset = "0x2EB3C8")]
		internal delegate bool _IsApplicationInstalled(string pchAppKey);

		[Token(Token = "0x20005EA")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB3DC", Offset = "0x2EB3DC")]
		internal delegate uint _GetApplicationCount();

		[Token(Token = "0x20005EB")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB3F0", Offset = "0x2EB3F0")]
		internal delegate EVRApplicationError _GetApplicationKeyByIndex(uint unApplicationIndex, StringBuilder pchAppKeyBuffer, uint unAppKeyBufferLen);

		[Token(Token = "0x20005EC")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB404", Offset = "0x2EB404")]
		internal delegate EVRApplicationError _GetApplicationKeyByProcessId(uint unProcessId, StringBuilder pchAppKeyBuffer, uint unAppKeyBufferLen);

		[Token(Token = "0x20005ED")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB418", Offset = "0x2EB418")]
		internal delegate EVRApplicationError _LaunchApplication(string pchAppKey);

		[Token(Token = "0x20005EE")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB42C", Offset = "0x2EB42C")]
		internal delegate EVRApplicationError _LaunchTemplateApplication(string pchTemplateAppKey, string pchNewAppKey, [In][Out] AppOverrideKeys_t[] pKeys, uint unKeys);

		[Token(Token = "0x20005EF")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB440", Offset = "0x2EB440")]
		internal delegate EVRApplicationError _LaunchApplicationFromMimeType(string pchMimeType, string pchArgs);

		[Token(Token = "0x20005F0")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB454", Offset = "0x2EB454")]
		internal delegate EVRApplicationError _LaunchDashboardOverlay(string pchAppKey);

		[Token(Token = "0x20005F1")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB468", Offset = "0x2EB468")]
		internal delegate bool _CancelApplicationLaunch(string pchAppKey);

		[Token(Token = "0x20005F2")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB47C", Offset = "0x2EB47C")]
		internal delegate EVRApplicationError _IdentifyApplication(uint unProcessId, string pchAppKey);

		[Token(Token = "0x20005F3")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB490", Offset = "0x2EB490")]
		internal delegate uint _GetApplicationProcessId(string pchAppKey);

		[Token(Token = "0x20005F4")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB4A4", Offset = "0x2EB4A4")]
		internal delegate IntPtr _GetApplicationsErrorNameFromEnum(EVRApplicationError error);

		[Token(Token = "0x20005F5")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB4B8", Offset = "0x2EB4B8")]
		internal delegate uint _GetApplicationPropertyString(string pchAppKey, EVRApplicationProperty eProperty, StringBuilder pchPropertyValueBuffer, uint unPropertyValueBufferLen, ref EVRApplicationError peError);

		[Token(Token = "0x20005F6")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB4CC", Offset = "0x2EB4CC")]
		internal delegate bool _GetApplicationPropertyBool(string pchAppKey, EVRApplicationProperty eProperty, ref EVRApplicationError peError);

		[Token(Token = "0x20005F7")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB4E0", Offset = "0x2EB4E0")]
		internal delegate ulong _GetApplicationPropertyUint64(string pchAppKey, EVRApplicationProperty eProperty, ref EVRApplicationError peError);

		[Token(Token = "0x20005F8")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB4F4", Offset = "0x2EB4F4")]
		internal delegate EVRApplicationError _SetApplicationAutoLaunch(string pchAppKey, bool bAutoLaunch);

		[Token(Token = "0x20005F9")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB508", Offset = "0x2EB508")]
		internal delegate bool _GetApplicationAutoLaunch(string pchAppKey);

		[Token(Token = "0x20005FA")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB51C", Offset = "0x2EB51C")]
		internal delegate EVRApplicationError _SetDefaultApplicationForMimeType(string pchAppKey, string pchMimeType);

		[Token(Token = "0x20005FB")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB530", Offset = "0x2EB530")]
		internal delegate bool _GetDefaultApplicationForMimeType(string pchMimeType, StringBuilder pchAppKeyBuffer, uint unAppKeyBufferLen);

		[Token(Token = "0x20005FC")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB544", Offset = "0x2EB544")]
		internal delegate bool _GetApplicationSupportedMimeTypes(string pchAppKey, StringBuilder pchMimeTypesBuffer, uint unMimeTypesBuffer);

		[Token(Token = "0x20005FD")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB558", Offset = "0x2EB558")]
		internal delegate uint _GetApplicationsThatSupportMimeType(string pchMimeType, StringBuilder pchAppKeysThatSupportBuffer, uint unAppKeysThatSupportBuffer);

		[Token(Token = "0x20005FE")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB56C", Offset = "0x2EB56C")]
		internal delegate uint _GetApplicationLaunchArguments(uint unHandle, StringBuilder pchArgs, uint unArgs);

		[Token(Token = "0x20005FF")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB580", Offset = "0x2EB580")]
		internal delegate EVRApplicationError _GetStartingApplication(StringBuilder pchAppKeyBuffer, uint unAppKeyBufferLen);

		[Token(Token = "0x2000600")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB594", Offset = "0x2EB594")]
		internal delegate EVRApplicationTransitionState _GetTransitionState();

		[Token(Token = "0x2000601")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB5A8", Offset = "0x2EB5A8")]
		internal delegate EVRApplicationError _PerformApplicationPrelaunchCheck(string pchAppKey);

		[Token(Token = "0x2000602")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB5BC", Offset = "0x2EB5BC")]
		internal delegate IntPtr _GetApplicationsTransitionStateNameFromEnum(EVRApplicationTransitionState state);

		[Token(Token = "0x2000603")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB5D0", Offset = "0x2EB5D0")]
		internal delegate bool _IsQuitUserPromptRequested();

		[Token(Token = "0x2000604")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB5E4", Offset = "0x2EB5E4")]
		internal delegate EVRApplicationError _LaunchInternalProcess(string pchBinaryPath, string pchArguments, string pchWorkingDirectory);

		[Token(Token = "0x2000605")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB5F8", Offset = "0x2EB5F8")]
		internal delegate uint _GetCurrentSceneProcessId();

		[Token(Token = "0x4000FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _AddApplicationManifest AddApplicationManifest;

		[Token(Token = "0x4000FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		internal _RemoveApplicationManifest RemoveApplicationManifest;

		[Token(Token = "0x4000FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _IsApplicationInstalled IsApplicationInstalled;

		[Token(Token = "0x4000FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal _GetApplicationCount GetApplicationCount;

		[Token(Token = "0x4000FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _GetApplicationKeyByIndex GetApplicationKeyByIndex;

		[Token(Token = "0x4000FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal _GetApplicationKeyByProcessId GetApplicationKeyByProcessId;

		[Token(Token = "0x4000FC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _LaunchApplication LaunchApplication;

		[Token(Token = "0x4000FC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal _LaunchTemplateApplication LaunchTemplateApplication;

		[Token(Token = "0x4000FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _LaunchApplicationFromMimeType LaunchApplicationFromMimeType;

		[Token(Token = "0x4000FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal _LaunchDashboardOverlay LaunchDashboardOverlay;

		[Token(Token = "0x4000FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _CancelApplicationLaunch CancelApplicationLaunch;

		[Token(Token = "0x4000FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal _IdentifyApplication IdentifyApplication;

		[Token(Token = "0x4000FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _GetApplicationProcessId GetApplicationProcessId;

		[Token(Token = "0x4000FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal _GetApplicationsErrorNameFromEnum GetApplicationsErrorNameFromEnum;

		[Token(Token = "0x4000FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _GetApplicationPropertyString GetApplicationPropertyString;

		[Token(Token = "0x4000FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		internal _GetApplicationPropertyBool GetApplicationPropertyBool;

		[Token(Token = "0x4000FCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _GetApplicationPropertyUint64 GetApplicationPropertyUint64;

		[Token(Token = "0x4000FCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		internal _SetApplicationAutoLaunch SetApplicationAutoLaunch;

		[Token(Token = "0x4000FCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _GetApplicationAutoLaunch GetApplicationAutoLaunch;

		[Token(Token = "0x4000FCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		internal _SetDefaultApplicationForMimeType SetDefaultApplicationForMimeType;

		[Token(Token = "0x4000FCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _GetDefaultApplicationForMimeType GetDefaultApplicationForMimeType;

		[Token(Token = "0x4000FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		internal _GetApplicationSupportedMimeTypes GetApplicationSupportedMimeTypes;

		[Token(Token = "0x4000FD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _GetApplicationsThatSupportMimeType GetApplicationsThatSupportMimeType;

		[Token(Token = "0x4000FD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		internal _GetApplicationLaunchArguments GetApplicationLaunchArguments;

		[Token(Token = "0x4000FD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal _GetStartingApplication GetStartingApplication;

		[Token(Token = "0x4000FD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		internal _GetTransitionState GetTransitionState;

		[Token(Token = "0x4000FD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal _PerformApplicationPrelaunchCheck PerformApplicationPrelaunchCheck;

		[Token(Token = "0x4000FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		internal _GetApplicationsTransitionStateNameFromEnum GetApplicationsTransitionStateNameFromEnum;

		[Token(Token = "0x4000FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal _IsQuitUserPromptRequested IsQuitUserPromptRequested;

		[Token(Token = "0x4000FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		internal _LaunchInternalProcess LaunchInternalProcess;

		[Token(Token = "0x4000FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal _GetCurrentSceneProcessId GetCurrentSceneProcessId;
	}
	[Token(Token = "0x20002C1")]
	public struct IVRChaperone
	{
		[Token(Token = "0x2000606")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB60C", Offset = "0x2EB60C")]
		internal delegate ChaperoneCalibrationState _GetCalibrationState();

		[Token(Token = "0x2000607")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB620", Offset = "0x2EB620")]
		internal delegate bool _GetPlayAreaSize(ref float pSizeX, ref float pSizeZ);

		[Token(Token = "0x2000608")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB634", Offset = "0x2EB634")]
		internal delegate bool _GetPlayAreaRect(ref HmdQuad_t rect);

		[Token(Token = "0x2000609")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB648", Offset = "0x2EB648")]
		internal delegate void _ReloadInfo();

		[Token(Token = "0x200060A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB65C", Offset = "0x2EB65C")]
		internal delegate void _SetSceneColor(HmdColor_t color);

		[Token(Token = "0x200060B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB670", Offset = "0x2EB670")]
		internal delegate void _GetBoundsColor(ref HmdColor_t pOutputColorArray, int nNumOutputColors, float flCollisionBoundsFadeDistance, ref HmdColor_t pOutputCameraColor);

		[Token(Token = "0x200060C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB684", Offset = "0x2EB684")]
		internal delegate bool _AreBoundsVisible();

		[Token(Token = "0x200060D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB698", Offset = "0x2EB698")]
		internal delegate void _ForceBoundsVisible(bool bForce);

		[Token(Token = "0x4000FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _GetCalibrationState GetCalibrationState;

		[Token(Token = "0x4000FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		internal _GetPlayAreaSize GetPlayAreaSize;

		[Token(Token = "0x4000FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _GetPlayAreaRect GetPlayAreaRect;

		[Token(Token = "0x4000FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal _ReloadInfo ReloadInfo;

		[Token(Token = "0x4000FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _SetSceneColor SetSceneColor;

		[Token(Token = "0x4000FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal _GetBoundsColor GetBoundsColor;

		[Token(Token = "0x4000FE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _AreBoundsVisible AreBoundsVisible;

		[Token(Token = "0x4000FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal _ForceBoundsVisible ForceBoundsVisible;
	}
	[Token(Token = "0x20002C2")]
	public struct IVRChaperoneSetup
	{
		[Token(Token = "0x200060E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB6AC", Offset = "0x2EB6AC")]
		internal delegate bool _CommitWorkingCopy(EChaperoneConfigFile configFile);

		[Token(Token = "0x200060F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB6C0", Offset = "0x2EB6C0")]
		internal delegate void _RevertWorkingCopy();

		[Token(Token = "0x2000610")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB6D4", Offset = "0x2EB6D4")]
		internal delegate bool _GetWorkingPlayAreaSize(ref float pSizeX, ref float pSizeZ);

		[Token(Token = "0x2000611")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB6E8", Offset = "0x2EB6E8")]
		internal delegate bool _GetWorkingPlayAreaRect(ref HmdQuad_t rect);

		[Token(Token = "0x2000612")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB6FC", Offset = "0x2EB6FC")]
		internal delegate bool _GetWorkingCollisionBoundsInfo([In][Out] HmdQuad_t[] pQuadsBuffer, ref uint punQuadsCount);

		[Token(Token = "0x2000613")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB710", Offset = "0x2EB710")]
		internal delegate bool _GetLiveCollisionBoundsInfo([In][Out] HmdQuad_t[] pQuadsBuffer, ref uint punQuadsCount);

		[Token(Token = "0x2000614")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB724", Offset = "0x2EB724")]
		internal delegate bool _GetWorkingSeatedZeroPoseToRawTrackingPose(ref HmdMatrix34_t pmatSeatedZeroPoseToRawTrackingPose);

		[Token(Token = "0x2000615")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB738", Offset = "0x2EB738")]
		internal delegate bool _GetWorkingStandingZeroPoseToRawTrackingPose(ref HmdMatrix34_t pmatStandingZeroPoseToRawTrackingPose);

		[Token(Token = "0x2000616")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB74C", Offset = "0x2EB74C")]
		internal delegate void _SetWorkingPlayAreaSize(float sizeX, float sizeZ);

		[Token(Token = "0x2000617")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB760", Offset = "0x2EB760")]
		internal delegate void _SetWorkingCollisionBoundsInfo([In][Out] HmdQuad_t[] pQuadsBuffer, uint unQuadsCount);

		[Token(Token = "0x2000618")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB774", Offset = "0x2EB774")]
		internal delegate void _SetWorkingSeatedZeroPoseToRawTrackingPose(ref HmdMatrix34_t pMatSeatedZeroPoseToRawTrackingPose);

		[Token(Token = "0x2000619")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB788", Offset = "0x2EB788")]
		internal delegate void _SetWorkingStandingZeroPoseToRawTrackingPose(ref HmdMatrix34_t pMatStandingZeroPoseToRawTrackingPose);

		[Token(Token = "0x200061A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB79C", Offset = "0x2EB79C")]
		internal delegate void _ReloadFromDisk(EChaperoneConfigFile configFile);

		[Token(Token = "0x200061B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB7B0", Offset = "0x2EB7B0")]
		internal delegate bool _GetLiveSeatedZeroPoseToRawTrackingPose(ref HmdMatrix34_t pmatSeatedZeroPoseToRawTrackingPose);

		[Token(Token = "0x200061C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB7C4", Offset = "0x2EB7C4")]
		internal delegate void _SetWorkingCollisionBoundsTagsInfo([In][Out] byte[] pTagsBuffer, uint unTagCount);

		[Token(Token = "0x200061D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB7D8", Offset = "0x2EB7D8")]
		internal delegate bool _GetLiveCollisionBoundsTagsInfo([In][Out] byte[] pTagsBuffer, ref uint punTagCount);

		[Token(Token = "0x200061E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB7EC", Offset = "0x2EB7EC")]
		internal delegate bool _SetWorkingPhysicalBoundsInfo([In][Out] HmdQuad_t[] pQuadsBuffer, uint unQuadsCount);

		[Token(Token = "0x200061F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB800", Offset = "0x2EB800")]
		internal delegate bool _GetLivePhysicalBoundsInfo([In][Out] HmdQuad_t[] pQuadsBuffer, ref uint punQuadsCount);

		[Token(Token = "0x2000620")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB814", Offset = "0x2EB814")]
		internal delegate bool _ExportLiveToBuffer(StringBuilder pBuffer, ref uint pnBufferLength);

		[Token(Token = "0x2000621")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB828", Offset = "0x2EB828")]
		internal delegate bool _ImportFromBufferToWorking(string pBuffer, uint nImportFlags);

		[Token(Token = "0x4000FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _CommitWorkingCopy CommitWorkingCopy;

		[Token(Token = "0x4000FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		internal _RevertWorkingCopy RevertWorkingCopy;

		[Token(Token = "0x4000FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _GetWorkingPlayAreaSize GetWorkingPlayAreaSize;

		[Token(Token = "0x4000FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal _GetWorkingPlayAreaRect GetWorkingPlayAreaRect;

		[Token(Token = "0x4000FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _GetWorkingCollisionBoundsInfo GetWorkingCollisionBoundsInfo;

		[Token(Token = "0x4000FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal _GetLiveCollisionBoundsInfo GetLiveCollisionBoundsInfo;

		[Token(Token = "0x4000FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _GetWorkingSeatedZeroPoseToRawTrackingPose GetWorkingSeatedZeroPoseToRawTrackingPose;

		[Token(Token = "0x4000FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal _GetWorkingStandingZeroPoseToRawTrackingPose GetWorkingStandingZeroPoseToRawTrackingPose;

		[Token(Token = "0x4000FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _SetWorkingPlayAreaSize SetWorkingPlayAreaSize;

		[Token(Token = "0x4000FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal _SetWorkingCollisionBoundsInfo SetWorkingCollisionBoundsInfo;

		[Token(Token = "0x4000FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _SetWorkingSeatedZeroPoseToRawTrackingPose SetWorkingSeatedZeroPoseToRawTrackingPose;

		[Token(Token = "0x4000FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal _SetWorkingStandingZeroPoseToRawTrackingPose SetWorkingStandingZeroPoseToRawTrackingPose;

		[Token(Token = "0x4000FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _ReloadFromDisk ReloadFromDisk;

		[Token(Token = "0x4000FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal _GetLiveSeatedZeroPoseToRawTrackingPose GetLiveSeatedZeroPoseToRawTrackingPose;

		[Token(Token = "0x4000FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _SetWorkingCollisionBoundsTagsInfo SetWorkingCollisionBoundsTagsInfo;

		[Token(Token = "0x4000FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		internal _GetLiveCollisionBoundsTagsInfo GetLiveCollisionBoundsTagsInfo;

		[Token(Token = "0x4000FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _SetWorkingPhysicalBoundsInfo SetWorkingPhysicalBoundsInfo;

		[Token(Token = "0x4000FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		internal _GetLivePhysicalBoundsInfo GetLivePhysicalBoundsInfo;

		[Token(Token = "0x4000FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _ExportLiveToBuffer ExportLiveToBuffer;

		[Token(Token = "0x4000FF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		internal _ImportFromBufferToWorking ImportFromBufferToWorking;
	}
	[Token(Token = "0x20002C3")]
	public struct IVRCompositor
	{
		[Token(Token = "0x2000622")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB83C", Offset = "0x2EB83C")]
		internal delegate void _SetTrackingSpace(ETrackingUniverseOrigin eOrigin);

		[Token(Token = "0x2000623")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB850", Offset = "0x2EB850")]
		internal delegate ETrackingUniverseOrigin _GetTrackingSpace();

		[Token(Token = "0x2000624")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB864", Offset = "0x2EB864")]
		internal delegate EVRCompositorError _WaitGetPoses([In][Out] TrackedDevicePose_t[] pRenderPoseArray, uint unRenderPoseArrayCount, [In][Out] TrackedDevicePose_t[] pGamePoseArray, uint unGamePoseArrayCount);

		[Token(Token = "0x2000625")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB878", Offset = "0x2EB878")]
		internal delegate EVRCompositorError _GetLastPoses([In][Out] TrackedDevicePose_t[] pRenderPoseArray, uint unRenderPoseArrayCount, [In][Out] TrackedDevicePose_t[] pGamePoseArray, uint unGamePoseArrayCount);

		[Token(Token = "0x2000626")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB88C", Offset = "0x2EB88C")]
		internal delegate EVRCompositorError _GetLastPoseForTrackedDeviceIndex(uint unDeviceIndex, ref TrackedDevicePose_t pOutputPose, ref TrackedDevicePose_t pOutputGamePose);

		[Token(Token = "0x2000627")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB8A0", Offset = "0x2EB8A0")]
		internal delegate EVRCompositorError _Submit(EVREye eEye, ref Texture_t pTexture, ref VRTextureBounds_t pBounds, EVRSubmitFlags nSubmitFlags);

		[Token(Token = "0x2000628")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB8B4", Offset = "0x2EB8B4")]
		internal delegate void _ClearLastSubmittedFrame();

		[Token(Token = "0x2000629")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB8C8", Offset = "0x2EB8C8")]
		internal delegate void _PostPresentHandoff();

		[Token(Token = "0x200062A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB8DC", Offset = "0x2EB8DC")]
		internal delegate bool _GetFrameTiming(ref Compositor_FrameTiming pTiming, uint unFramesAgo);

		[Token(Token = "0x200062B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB8F0", Offset = "0x2EB8F0")]
		internal delegate uint _GetFrameTimings(ref Compositor_FrameTiming pTiming, uint nFrames);

		[Token(Token = "0x200062C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB904", Offset = "0x2EB904")]
		internal delegate float _GetFrameTimeRemaining();

		[Token(Token = "0x200062D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB918", Offset = "0x2EB918")]
		internal delegate void _GetCumulativeStats(ref Compositor_CumulativeStats pStats, uint nStatsSizeInBytes);

		[Token(Token = "0x200062E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB92C", Offset = "0x2EB92C")]
		internal delegate void _FadeToColor(float fSeconds, float fRed, float fGreen, float fBlue, float fAlpha, bool bBackground);

		[Token(Token = "0x200062F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB940", Offset = "0x2EB940")]
		internal delegate HmdColor_t _GetCurrentFadeColor(bool bBackground);

		[Token(Token = "0x2000630")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB954", Offset = "0x2EB954")]
		internal delegate void _FadeGrid(float fSeconds, bool bFadeIn);

		[Token(Token = "0x2000631")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB968", Offset = "0x2EB968")]
		internal delegate float _GetCurrentGridAlpha();

		[Token(Token = "0x2000632")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB97C", Offset = "0x2EB97C")]
		internal delegate EVRCompositorError _SetSkyboxOverride([In][Out] Texture_t[] pTextures, uint unTextureCount);

		[Token(Token = "0x2000633")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB990", Offset = "0x2EB990")]
		internal delegate void _ClearSkyboxOverride();

		[Token(Token = "0x2000634")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB9A4", Offset = "0x2EB9A4")]
		internal delegate void _CompositorBringToFront();

		[Token(Token = "0x2000635")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB9B8", Offset = "0x2EB9B8")]
		internal delegate void _CompositorGoToBack();

		[Token(Token = "0x2000636")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB9CC", Offset = "0x2EB9CC")]
		internal delegate void _CompositorQuit();

		[Token(Token = "0x2000637")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB9E0", Offset = "0x2EB9E0")]
		internal delegate bool _IsFullscreen();

		[Token(Token = "0x2000638")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EB9F4", Offset = "0x2EB9F4")]
		internal delegate uint _GetCurrentSceneFocusProcess();

		[Token(Token = "0x2000639")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBA08", Offset = "0x2EBA08")]
		internal delegate uint _GetLastFrameRenderer();

		[Token(Token = "0x200063A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBA1C", Offset = "0x2EBA1C")]
		internal delegate bool _CanRenderScene();

		[Token(Token = "0x200063B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBA30", Offset = "0x2EBA30")]
		internal delegate void _ShowMirrorWindow();

		[Token(Token = "0x200063C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBA44", Offset = "0x2EBA44")]
		internal delegate void _HideMirrorWindow();

		[Token(Token = "0x200063D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBA58", Offset = "0x2EBA58")]
		internal delegate bool _IsMirrorWindowVisible();

		[Token(Token = "0x200063E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBA6C", Offset = "0x2EBA6C")]
		internal delegate void _CompositorDumpImages();

		[Token(Token = "0x200063F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBA80", Offset = "0x2EBA80")]
		internal delegate bool _ShouldAppRenderWithLowResources();

		[Token(Token = "0x2000640")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBA94", Offset = "0x2EBA94")]
		internal delegate void _ForceInterleavedReprojectionOn(bool bOverride);

		[Token(Token = "0x2000641")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBAA8", Offset = "0x2EBAA8")]
		internal delegate void _ForceReconnectProcess();

		[Token(Token = "0x2000642")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBABC", Offset = "0x2EBABC")]
		internal delegate void _SuspendRendering(bool bSuspend);

		[Token(Token = "0x2000643")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBAD0", Offset = "0x2EBAD0")]
		internal delegate EVRCompositorError _GetMirrorTextureD3D11(EVREye eEye, IntPtr pD3D11DeviceOrResource, ref IntPtr ppD3D11ShaderResourceView);

		[Token(Token = "0x2000644")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBAE4", Offset = "0x2EBAE4")]
		internal delegate void _ReleaseMirrorTextureD3D11(IntPtr pD3D11ShaderResourceView);

		[Token(Token = "0x2000645")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBAF8", Offset = "0x2EBAF8")]
		internal delegate EVRCompositorError _GetMirrorTextureGL(EVREye eEye, ref uint pglTextureId, IntPtr pglSharedTextureHandle);

		[Token(Token = "0x2000646")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBB0C", Offset = "0x2EBB0C")]
		internal delegate bool _ReleaseSharedGLTexture(uint glTextureId, IntPtr glSharedTextureHandle);

		[Token(Token = "0x2000647")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBB20", Offset = "0x2EBB20")]
		internal delegate void _LockGLSharedTextureForAccess(IntPtr glSharedTextureHandle);

		[Token(Token = "0x2000648")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBB34", Offset = "0x2EBB34")]
		internal delegate void _UnlockGLSharedTextureForAccess(IntPtr glSharedTextureHandle);

		[Token(Token = "0x2000649")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBB48", Offset = "0x2EBB48")]
		internal delegate uint _GetVulkanInstanceExtensionsRequired(StringBuilder pchValue, uint unBufferSize);

		[Token(Token = "0x200064A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBB5C", Offset = "0x2EBB5C")]
		internal delegate uint _GetVulkanDeviceExtensionsRequired(IntPtr pPhysicalDevice, StringBuilder pchValue, uint unBufferSize);

		[Token(Token = "0x200064B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBB70", Offset = "0x2EBB70")]
		internal delegate void _SetExplicitTimingMode(EVRCompositorTimingMode eTimingMode);

		[Token(Token = "0x200064C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBB84", Offset = "0x2EBB84")]
		internal delegate EVRCompositorError _SubmitExplicitTimingData();

		[Token(Token = "0x4000FF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _SetTrackingSpace SetTrackingSpace;

		[Token(Token = "0x4000FF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		internal _GetTrackingSpace GetTrackingSpace;

		[Token(Token = "0x4000FF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _WaitGetPoses WaitGetPoses;

		[Token(Token = "0x4000FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal _GetLastPoses GetLastPoses;

		[Token(Token = "0x4000FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _GetLastPoseForTrackedDeviceIndex GetLastPoseForTrackedDeviceIndex;

		[Token(Token = "0x4000FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal _Submit Submit;

		[Token(Token = "0x4000FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _ClearLastSubmittedFrame ClearLastSubmittedFrame;

		[Token(Token = "0x4000FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal _PostPresentHandoff PostPresentHandoff;

		[Token(Token = "0x4000FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _GetFrameTiming GetFrameTiming;

		[Token(Token = "0x4000FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal _GetFrameTimings GetFrameTimings;

		[Token(Token = "0x4001000")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _GetFrameTimeRemaining GetFrameTimeRemaining;

		[Token(Token = "0x4001001")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal _GetCumulativeStats GetCumulativeStats;

		[Token(Token = "0x4001002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _FadeToColor FadeToColor;

		[Token(Token = "0x4001003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal _GetCurrentFadeColor GetCurrentFadeColor;

		[Token(Token = "0x4001004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _FadeGrid FadeGrid;

		[Token(Token = "0x4001005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		internal _GetCurrentGridAlpha GetCurrentGridAlpha;

		[Token(Token = "0x4001006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _SetSkyboxOverride SetSkyboxOverride;

		[Token(Token = "0x4001007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		internal _ClearSkyboxOverride ClearSkyboxOverride;

		[Token(Token = "0x4001008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _CompositorBringToFront CompositorBringToFront;

		[Token(Token = "0x4001009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		internal _CompositorGoToBack CompositorGoToBack;

		[Token(Token = "0x400100A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _CompositorQuit CompositorQuit;

		[Token(Token = "0x400100B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		internal _IsFullscreen IsFullscreen;

		[Token(Token = "0x400100C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _GetCurrentSceneFocusProcess GetCurrentSceneFocusProcess;

		[Token(Token = "0x400100D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		internal _GetLastFrameRenderer GetLastFrameRenderer;

		[Token(Token = "0x400100E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal _CanRenderScene CanRenderScene;

		[Token(Token = "0x400100F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		internal _ShowMirrorWindow ShowMirrorWindow;

		[Token(Token = "0x4001010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal _HideMirrorWindow HideMirrorWindow;

		[Token(Token = "0x4001011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		internal _IsMirrorWindowVisible IsMirrorWindowVisible;

		[Token(Token = "0x4001012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal _CompositorDumpImages CompositorDumpImages;

		[Token(Token = "0x4001013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		internal _ShouldAppRenderWithLowResources ShouldAppRenderWithLowResources;

		[Token(Token = "0x4001014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal _ForceInterleavedReprojectionOn ForceInterleavedReprojectionOn;

		[Token(Token = "0x4001015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		internal _ForceReconnectProcess ForceReconnectProcess;

		[Token(Token = "0x4001016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal _SuspendRendering SuspendRendering;

		[Token(Token = "0x4001017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		internal _GetMirrorTextureD3D11 GetMirrorTextureD3D11;

		[Token(Token = "0x4001018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal _ReleaseMirrorTextureD3D11 ReleaseMirrorTextureD3D11;

		[Token(Token = "0x4001019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		internal _GetMirrorTextureGL GetMirrorTextureGL;

		[Token(Token = "0x400101A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal _ReleaseSharedGLTexture ReleaseSharedGLTexture;

		[Token(Token = "0x400101B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		internal _LockGLSharedTextureForAccess LockGLSharedTextureForAccess;

		[Token(Token = "0x400101C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal _UnlockGLSharedTextureForAccess UnlockGLSharedTextureForAccess;

		[Token(Token = "0x400101D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		internal _GetVulkanInstanceExtensionsRequired GetVulkanInstanceExtensionsRequired;

		[Token(Token = "0x400101E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		internal _GetVulkanDeviceExtensionsRequired GetVulkanDeviceExtensionsRequired;

		[Token(Token = "0x400101F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		internal _SetExplicitTimingMode SetExplicitTimingMode;

		[Token(Token = "0x4001020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		internal _SubmitExplicitTimingData SubmitExplicitTimingData;
	}
	[Token(Token = "0x20002C4")]
	public struct IVROverlay
	{
		[Token(Token = "0x200064D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBB98", Offset = "0x2EBB98")]
		internal delegate EVROverlayError _FindOverlay(string pchOverlayKey, ref ulong pOverlayHandle);

		[Token(Token = "0x200064E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBBAC", Offset = "0x2EBBAC")]
		internal delegate EVROverlayError _CreateOverlay(string pchOverlayKey, string pchOverlayName, ref ulong pOverlayHandle);

		[Token(Token = "0x200064F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBBC0", Offset = "0x2EBBC0")]
		internal delegate EVROverlayError _DestroyOverlay(ulong ulOverlayHandle);

		[Token(Token = "0x2000650")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBBD4", Offset = "0x2EBBD4")]
		internal delegate EVROverlayError _SetHighQualityOverlay(ulong ulOverlayHandle);

		[Token(Token = "0x2000651")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBBE8", Offset = "0x2EBBE8")]
		internal delegate ulong _GetHighQualityOverlay();

		[Token(Token = "0x2000652")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBBFC", Offset = "0x2EBBFC")]
		internal delegate uint _GetOverlayKey(ulong ulOverlayHandle, StringBuilder pchValue, uint unBufferSize, ref EVROverlayError pError);

		[Token(Token = "0x2000653")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBC10", Offset = "0x2EBC10")]
		internal delegate uint _GetOverlayName(ulong ulOverlayHandle, StringBuilder pchValue, uint unBufferSize, ref EVROverlayError pError);

		[Token(Token = "0x2000654")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBC24", Offset = "0x2EBC24")]
		internal delegate EVROverlayError _SetOverlayName(ulong ulOverlayHandle, string pchName);

		[Token(Token = "0x2000655")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBC38", Offset = "0x2EBC38")]
		internal delegate EVROverlayError _GetOverlayImageData(ulong ulOverlayHandle, IntPtr pvBuffer, uint unBufferSize, ref uint punWidth, ref uint punHeight);

		[Token(Token = "0x2000656")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBC4C", Offset = "0x2EBC4C")]
		internal delegate IntPtr _GetOverlayErrorNameFromEnum(EVROverlayError error);

		[Token(Token = "0x2000657")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBC60", Offset = "0x2EBC60")]
		internal delegate EVROverlayError _SetOverlayRenderingPid(ulong ulOverlayHandle, uint unPID);

		[Token(Token = "0x2000658")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBC74", Offset = "0x2EBC74")]
		internal delegate uint _GetOverlayRenderingPid(ulong ulOverlayHandle);

		[Token(Token = "0x2000659")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBC88", Offset = "0x2EBC88")]
		internal delegate EVROverlayError _SetOverlayFlag(ulong ulOverlayHandle, VROverlayFlags eOverlayFlag, bool bEnabled);

		[Token(Token = "0x200065A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBC9C", Offset = "0x2EBC9C")]
		internal delegate EVROverlayError _GetOverlayFlag(ulong ulOverlayHandle, VROverlayFlags eOverlayFlag, ref bool pbEnabled);

		[Token(Token = "0x200065B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBCB0", Offset = "0x2EBCB0")]
		internal delegate EVROverlayError _SetOverlayColor(ulong ulOverlayHandle, float fRed, float fGreen, float fBlue);

		[Token(Token = "0x200065C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBCC4", Offset = "0x2EBCC4")]
		internal delegate EVROverlayError _GetOverlayColor(ulong ulOverlayHandle, ref float pfRed, ref float pfGreen, ref float pfBlue);

		[Token(Token = "0x200065D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBCD8", Offset = "0x2EBCD8")]
		internal delegate EVROverlayError _SetOverlayAlpha(ulong ulOverlayHandle, float fAlpha);

		[Token(Token = "0x200065E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBCEC", Offset = "0x2EBCEC")]
		internal delegate EVROverlayError _GetOverlayAlpha(ulong ulOverlayHandle, ref float pfAlpha);

		[Token(Token = "0x200065F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBD00", Offset = "0x2EBD00")]
		internal delegate EVROverlayError _SetOverlayTexelAspect(ulong ulOverlayHandle, float fTexelAspect);

		[Token(Token = "0x2000660")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBD14", Offset = "0x2EBD14")]
		internal delegate EVROverlayError _GetOverlayTexelAspect(ulong ulOverlayHandle, ref float pfTexelAspect);

		[Token(Token = "0x2000661")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBD28", Offset = "0x2EBD28")]
		internal delegate EVROverlayError _SetOverlaySortOrder(ulong ulOverlayHandle, uint unSortOrder);

		[Token(Token = "0x2000662")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBD3C", Offset = "0x2EBD3C")]
		internal delegate EVROverlayError _GetOverlaySortOrder(ulong ulOverlayHandle, ref uint punSortOrder);

		[Token(Token = "0x2000663")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBD50", Offset = "0x2EBD50")]
		internal delegate EVROverlayError _SetOverlayWidthInMeters(ulong ulOverlayHandle, float fWidthInMeters);

		[Token(Token = "0x2000664")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBD64", Offset = "0x2EBD64")]
		internal delegate EVROverlayError _GetOverlayWidthInMeters(ulong ulOverlayHandle, ref float pfWidthInMeters);

		[Token(Token = "0x2000665")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBD78", Offset = "0x2EBD78")]
		internal delegate EVROverlayError _SetOverlayAutoCurveDistanceRangeInMeters(ulong ulOverlayHandle, float fMinDistanceInMeters, float fMaxDistanceInMeters);

		[Token(Token = "0x2000666")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBD8C", Offset = "0x2EBD8C")]
		internal delegate EVROverlayError _GetOverlayAutoCurveDistanceRangeInMeters(ulong ulOverlayHandle, ref float pfMinDistanceInMeters, ref float pfMaxDistanceInMeters);

		[Token(Token = "0x2000667")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBDA0", Offset = "0x2EBDA0")]
		internal delegate EVROverlayError _SetOverlayTextureColorSpace(ulong ulOverlayHandle, EColorSpace eTextureColorSpace);

		[Token(Token = "0x2000668")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBDB4", Offset = "0x2EBDB4")]
		internal delegate EVROverlayError _GetOverlayTextureColorSpace(ulong ulOverlayHandle, ref EColorSpace peTextureColorSpace);

		[Token(Token = "0x2000669")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBDC8", Offset = "0x2EBDC8")]
		internal delegate EVROverlayError _SetOverlayTextureBounds(ulong ulOverlayHandle, ref VRTextureBounds_t pOverlayTextureBounds);

		[Token(Token = "0x200066A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBDDC", Offset = "0x2EBDDC")]
		internal delegate EVROverlayError _GetOverlayTextureBounds(ulong ulOverlayHandle, ref VRTextureBounds_t pOverlayTextureBounds);

		[Token(Token = "0x200066B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBDF0", Offset = "0x2EBDF0")]
		internal delegate uint _GetOverlayRenderModel(ulong ulOverlayHandle, StringBuilder pchValue, uint unBufferSize, ref HmdColor_t pColor, ref EVROverlayError pError);

		[Token(Token = "0x200066C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBE04", Offset = "0x2EBE04")]
		internal delegate EVROverlayError _SetOverlayRenderModel(ulong ulOverlayHandle, string pchRenderModel, ref HmdColor_t pColor);

		[Token(Token = "0x200066D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBE18", Offset = "0x2EBE18")]
		internal delegate EVROverlayError _GetOverlayTransformType(ulong ulOverlayHandle, ref VROverlayTransformType peTransformType);

		[Token(Token = "0x200066E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBE2C", Offset = "0x2EBE2C")]
		internal delegate EVROverlayError _SetOverlayTransformAbsolute(ulong ulOverlayHandle, ETrackingUniverseOrigin eTrackingOrigin, ref HmdMatrix34_t pmatTrackingOriginToOverlayTransform);

		[Token(Token = "0x200066F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBE40", Offset = "0x2EBE40")]
		internal delegate EVROverlayError _GetOverlayTransformAbsolute(ulong ulOverlayHandle, ref ETrackingUniverseOrigin peTrackingOrigin, ref HmdMatrix34_t pmatTrackingOriginToOverlayTransform);

		[Token(Token = "0x2000670")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBE54", Offset = "0x2EBE54")]
		internal delegate EVROverlayError _SetOverlayTransformTrackedDeviceRelative(ulong ulOverlayHandle, uint unTrackedDevice, ref HmdMatrix34_t pmatTrackedDeviceToOverlayTransform);

		[Token(Token = "0x2000671")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBE68", Offset = "0x2EBE68")]
		internal delegate EVROverlayError _GetOverlayTransformTrackedDeviceRelative(ulong ulOverlayHandle, ref uint punTrackedDevice, ref HmdMatrix34_t pmatTrackedDeviceToOverlayTransform);

		[Token(Token = "0x2000672")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBE7C", Offset = "0x2EBE7C")]
		internal delegate EVROverlayError _SetOverlayTransformTrackedDeviceComponent(ulong ulOverlayHandle, uint unDeviceIndex, string pchComponentName);

		[Token(Token = "0x2000673")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBE90", Offset = "0x2EBE90")]
		internal delegate EVROverlayError _GetOverlayTransformTrackedDeviceComponent(ulong ulOverlayHandle, ref uint punDeviceIndex, StringBuilder pchComponentName, uint unComponentNameSize);

		[Token(Token = "0x2000674")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBEA4", Offset = "0x2EBEA4")]
		internal delegate EVROverlayError _GetOverlayTransformOverlayRelative(ulong ulOverlayHandle, ref ulong ulOverlayHandleParent, ref HmdMatrix34_t pmatParentOverlayToOverlayTransform);

		[Token(Token = "0x2000675")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBEB8", Offset = "0x2EBEB8")]
		internal delegate EVROverlayError _SetOverlayTransformOverlayRelative(ulong ulOverlayHandle, ulong ulOverlayHandleParent, ref HmdMatrix34_t pmatParentOverlayToOverlayTransform);

		[Token(Token = "0x2000676")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBECC", Offset = "0x2EBECC")]
		internal delegate EVROverlayError _ShowOverlay(ulong ulOverlayHandle);

		[Token(Token = "0x2000677")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBEE0", Offset = "0x2EBEE0")]
		internal delegate EVROverlayError _HideOverlay(ulong ulOverlayHandle);

		[Token(Token = "0x2000678")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBEF4", Offset = "0x2EBEF4")]
		internal delegate bool _IsOverlayVisible(ulong ulOverlayHandle);

		[Token(Token = "0x2000679")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBF08", Offset = "0x2EBF08")]
		internal delegate EVROverlayError _GetTransformForOverlayCoordinates(ulong ulOverlayHandle, ETrackingUniverseOrigin eTrackingOrigin, HmdVector2_t coordinatesInOverlay, ref HmdMatrix34_t pmatTransform);

		[Token(Token = "0x200067A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBF1C", Offset = "0x2EBF1C")]
		internal delegate bool _PollNextOverlayEvent(ulong ulOverlayHandle, ref VREvent_t pEvent, uint uncbVREvent);

		[Token(Token = "0x200067B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBF30", Offset = "0x2EBF30")]
		internal delegate EVROverlayError _GetOverlayInputMethod(ulong ulOverlayHandle, ref VROverlayInputMethod peInputMethod);

		[Token(Token = "0x200067C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBF44", Offset = "0x2EBF44")]
		internal delegate EVROverlayError _SetOverlayInputMethod(ulong ulOverlayHandle, VROverlayInputMethod eInputMethod);

		[Token(Token = "0x200067D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBF58", Offset = "0x2EBF58")]
		internal delegate EVROverlayError _GetOverlayMouseScale(ulong ulOverlayHandle, ref HmdVector2_t pvecMouseScale);

		[Token(Token = "0x200067E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBF6C", Offset = "0x2EBF6C")]
		internal delegate EVROverlayError _SetOverlayMouseScale(ulong ulOverlayHandle, ref HmdVector2_t pvecMouseScale);

		[Token(Token = "0x200067F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBF80", Offset = "0x2EBF80")]
		internal delegate bool _ComputeOverlayIntersection(ulong ulOverlayHandle, ref VROverlayIntersectionParams_t pParams, ref VROverlayIntersectionResults_t pResults);

		[Token(Token = "0x2000680")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBF94", Offset = "0x2EBF94")]
		internal delegate bool _IsHoverTargetOverlay(ulong ulOverlayHandle);

		[Token(Token = "0x2000681")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBFA8", Offset = "0x2EBFA8")]
		internal delegate ulong _GetGamepadFocusOverlay();

		[Token(Token = "0x2000682")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBFBC", Offset = "0x2EBFBC")]
		internal delegate EVROverlayError _SetGamepadFocusOverlay(ulong ulNewFocusOverlay);

		[Token(Token = "0x2000683")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBFD0", Offset = "0x2EBFD0")]
		internal delegate EVROverlayError _SetOverlayNeighbor(EOverlayDirection eDirection, ulong ulFrom, ulong ulTo);

		[Token(Token = "0x2000684")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBFE4", Offset = "0x2EBFE4")]
		internal delegate EVROverlayError _MoveGamepadFocusToNeighbor(EOverlayDirection eDirection, ulong ulFrom);

		[Token(Token = "0x2000685")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EBFF8", Offset = "0x2EBFF8")]
		internal delegate EVROverlayError _SetOverlayDualAnalogTransform(ulong ulOverlay, EDualAnalogWhich eWhich, IntPtr vCenter, float fRadius);

		[Token(Token = "0x2000686")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC00C", Offset = "0x2EC00C")]
		internal delegate EVROverlayError _GetOverlayDualAnalogTransform(ulong ulOverlay, EDualAnalogWhich eWhich, ref HmdVector2_t pvCenter, ref float pfRadius);

		[Token(Token = "0x2000687")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC020", Offset = "0x2EC020")]
		internal delegate EVROverlayError _SetOverlayTexture(ulong ulOverlayHandle, ref Texture_t pTexture);

		[Token(Token = "0x2000688")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC034", Offset = "0x2EC034")]
		internal delegate EVROverlayError _ClearOverlayTexture(ulong ulOverlayHandle);

		[Token(Token = "0x2000689")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC048", Offset = "0x2EC048")]
		internal delegate EVROverlayError _SetOverlayRaw(ulong ulOverlayHandle, IntPtr pvBuffer, uint unWidth, uint unHeight, uint unDepth);

		[Token(Token = "0x200068A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC05C", Offset = "0x2EC05C")]
		internal delegate EVROverlayError _SetOverlayFromFile(ulong ulOverlayHandle, string pchFilePath);

		[Token(Token = "0x200068B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC070", Offset = "0x2EC070")]
		internal delegate EVROverlayError _GetOverlayTexture(ulong ulOverlayHandle, ref IntPtr pNativeTextureHandle, IntPtr pNativeTextureRef, ref uint pWidth, ref uint pHeight, ref uint pNativeFormat, ref ETextureType pAPIType, ref EColorSpace pColorSpace, ref VRTextureBounds_t pTextureBounds);

		[Token(Token = "0x200068C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC084", Offset = "0x2EC084")]
		internal delegate EVROverlayError _ReleaseNativeOverlayHandle(ulong ulOverlayHandle, IntPtr pNativeTextureHandle);

		[Token(Token = "0x200068D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC098", Offset = "0x2EC098")]
		internal delegate EVROverlayError _GetOverlayTextureSize(ulong ulOverlayHandle, ref uint pWidth, ref uint pHeight);

		[Token(Token = "0x200068E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC0AC", Offset = "0x2EC0AC")]
		internal delegate EVROverlayError _CreateDashboardOverlay(string pchOverlayKey, string pchOverlayFriendlyName, ref ulong pMainHandle, ref ulong pThumbnailHandle);

		[Token(Token = "0x200068F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC0C0", Offset = "0x2EC0C0")]
		internal delegate bool _IsDashboardVisible();

		[Token(Token = "0x2000690")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC0D4", Offset = "0x2EC0D4")]
		internal delegate bool _IsActiveDashboardOverlay(ulong ulOverlayHandle);

		[Token(Token = "0x2000691")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC0E8", Offset = "0x2EC0E8")]
		internal delegate EVROverlayError _SetDashboardOverlaySceneProcess(ulong ulOverlayHandle, uint unProcessId);

		[Token(Token = "0x2000692")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC0FC", Offset = "0x2EC0FC")]
		internal delegate EVROverlayError _GetDashboardOverlaySceneProcess(ulong ulOverlayHandle, ref uint punProcessId);

		[Token(Token = "0x2000693")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC110", Offset = "0x2EC110")]
		internal delegate void _ShowDashboard(string pchOverlayToShow);

		[Token(Token = "0x2000694")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC124", Offset = "0x2EC124")]
		internal delegate uint _GetPrimaryDashboardDevice();

		[Token(Token = "0x2000695")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC138", Offset = "0x2EC138")]
		internal delegate EVROverlayError _ShowKeyboard(int eInputMode, int eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText, bool bUseMinimalMode, ulong uUserValue);

		[Token(Token = "0x2000696")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC14C", Offset = "0x2EC14C")]
		internal delegate EVROverlayError _ShowKeyboardForOverlay(ulong ulOverlayHandle, int eInputMode, int eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText, bool bUseMinimalMode, ulong uUserValue);

		[Token(Token = "0x2000697")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC160", Offset = "0x2EC160")]
		internal delegate uint _GetKeyboardText(StringBuilder pchText, uint cchText);

		[Token(Token = "0x2000698")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC174", Offset = "0x2EC174")]
		internal delegate void _HideKeyboard();

		[Token(Token = "0x2000699")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC188", Offset = "0x2EC188")]
		internal delegate void _SetKeyboardTransformAbsolute(ETrackingUniverseOrigin eTrackingOrigin, ref HmdMatrix34_t pmatTrackingOriginToKeyboardTransform);

		[Token(Token = "0x200069A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC19C", Offset = "0x2EC19C")]
		internal delegate void _SetKeyboardPositionForOverlay(ulong ulOverlayHandle, HmdRect2_t avoidRect);

		[Token(Token = "0x200069B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC1B0", Offset = "0x2EC1B0")]
		internal delegate EVROverlayError _SetOverlayIntersectionMask(ulong ulOverlayHandle, ref VROverlayIntersectionMaskPrimitive_t pMaskPrimitives, uint unNumMaskPrimitives, uint unPrimitiveSize);

		[Token(Token = "0x200069C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC1C4", Offset = "0x2EC1C4")]
		internal delegate EVROverlayError _GetOverlayFlags(ulong ulOverlayHandle, ref uint pFlags);

		[Token(Token = "0x200069D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC1D8", Offset = "0x2EC1D8")]
		internal delegate VRMessageOverlayResponse _ShowMessageOverlay(string pchText, string pchCaption, string pchButton0Text, string pchButton1Text, string pchButton2Text, string pchButton3Text);

		[Token(Token = "0x200069E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC1EC", Offset = "0x2EC1EC")]
		internal delegate void _CloseMessageOverlay();

		[Token(Token = "0x4001021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _FindOverlay FindOverlay;

		[Token(Token = "0x4001022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		internal _CreateOverlay CreateOverlay;

		[Token(Token = "0x4001023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _DestroyOverlay DestroyOverlay;

		[Token(Token = "0x4001024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal _SetHighQualityOverlay SetHighQualityOverlay;

		[Token(Token = "0x4001025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _GetHighQualityOverlay GetHighQualityOverlay;

		[Token(Token = "0x4001026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal _GetOverlayKey GetOverlayKey;

		[Token(Token = "0x4001027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _GetOverlayName GetOverlayName;

		[Token(Token = "0x4001028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal _SetOverlayName SetOverlayName;

		[Token(Token = "0x4001029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _GetOverlayImageData GetOverlayImageData;

		[Token(Token = "0x400102A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal _GetOverlayErrorNameFromEnum GetOverlayErrorNameFromEnum;

		[Token(Token = "0x400102B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _SetOverlayRenderingPid SetOverlayRenderingPid;

		[Token(Token = "0x400102C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal _GetOverlayRenderingPid GetOverlayRenderingPid;

		[Token(Token = "0x400102D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _SetOverlayFlag SetOverlayFlag;

		[Token(Token = "0x400102E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal _GetOverlayFlag GetOverlayFlag;

		[Token(Token = "0x400102F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _SetOverlayColor SetOverlayColor;

		[Token(Token = "0x4001030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		internal _GetOverlayColor GetOverlayColor;

		[Token(Token = "0x4001031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _SetOverlayAlpha SetOverlayAlpha;

		[Token(Token = "0x4001032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		internal _GetOverlayAlpha GetOverlayAlpha;

		[Token(Token = "0x4001033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _SetOverlayTexelAspect SetOverlayTexelAspect;

		[Token(Token = "0x4001034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		internal _GetOverlayTexelAspect GetOverlayTexelAspect;

		[Token(Token = "0x4001035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _SetOverlaySortOrder SetOverlaySortOrder;

		[Token(Token = "0x4001036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		internal _GetOverlaySortOrder GetOverlaySortOrder;

		[Token(Token = "0x4001037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _SetOverlayWidthInMeters SetOverlayWidthInMeters;

		[Token(Token = "0x4001038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		internal _GetOverlayWidthInMeters GetOverlayWidthInMeters;

		[Token(Token = "0x4001039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal _SetOverlayAutoCurveDistanceRangeInMeters SetOverlayAutoCurveDistanceRangeInMeters;

		[Token(Token = "0x400103A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		internal _GetOverlayAutoCurveDistanceRangeInMeters GetOverlayAutoCurveDistanceRangeInMeters;

		[Token(Token = "0x400103B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal _SetOverlayTextureColorSpace SetOverlayTextureColorSpace;

		[Token(Token = "0x400103C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		internal _GetOverlayTextureColorSpace GetOverlayTextureColorSpace;

		[Token(Token = "0x400103D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal _SetOverlayTextureBounds SetOverlayTextureBounds;

		[Token(Token = "0x400103E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		internal _GetOverlayTextureBounds GetOverlayTextureBounds;

		[Token(Token = "0x400103F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal _GetOverlayRenderModel GetOverlayRenderModel;

		[Token(Token = "0x4001040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		internal _SetOverlayRenderModel SetOverlayRenderModel;

		[Token(Token = "0x4001041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal _GetOverlayTransformType GetOverlayTransformType;

		[Token(Token = "0x4001042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		internal _SetOverlayTransformAbsolute SetOverlayTransformAbsolute;

		[Token(Token = "0x4001043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal _GetOverlayTransformAbsolute GetOverlayTransformAbsolute;

		[Token(Token = "0x4001044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		internal _SetOverlayTransformTrackedDeviceRelative SetOverlayTransformTrackedDeviceRelative;

		[Token(Token = "0x4001045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal _GetOverlayTransformTrackedDeviceRelative GetOverlayTransformTrackedDeviceRelative;

		[Token(Token = "0x4001046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		internal _SetOverlayTransformTrackedDeviceComponent SetOverlayTransformTrackedDeviceComponent;

		[Token(Token = "0x4001047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal _GetOverlayTransformTrackedDeviceComponent GetOverlayTransformTrackedDeviceComponent;

		[Token(Token = "0x4001048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		internal _GetOverlayTransformOverlayRelative GetOverlayTransformOverlayRelative;

		[Token(Token = "0x4001049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		internal _SetOverlayTransformOverlayRelative SetOverlayTransformOverlayRelative;

		[Token(Token = "0x400104A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		internal _ShowOverlay ShowOverlay;

		[Token(Token = "0x400104B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		internal _HideOverlay HideOverlay;

		[Token(Token = "0x400104C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		internal _IsOverlayVisible IsOverlayVisible;

		[Token(Token = "0x400104D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		internal _GetTransformForOverlayCoordinates GetTransformForOverlayCoordinates;

		[Token(Token = "0x400104E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		internal _PollNextOverlayEvent PollNextOverlayEvent;

		[Token(Token = "0x400104F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		internal _GetOverlayInputMethod GetOverlayInputMethod;

		[Token(Token = "0x4001050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		internal _SetOverlayInputMethod SetOverlayInputMethod;

		[Token(Token = "0x4001051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		internal _GetOverlayMouseScale GetOverlayMouseScale;

		[Token(Token = "0x4001052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		internal _SetOverlayMouseScale SetOverlayMouseScale;

		[Token(Token = "0x4001053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		internal _ComputeOverlayIntersection ComputeOverlayIntersection;

		[Token(Token = "0x4001054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		internal _IsHoverTargetOverlay IsHoverTargetOverlay;

		[Token(Token = "0x4001055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		internal _GetGamepadFocusOverlay GetGamepadFocusOverlay;

		[Token(Token = "0x4001056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		internal _SetGamepadFocusOverlay SetGamepadFocusOverlay;

		[Token(Token = "0x4001057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		internal _SetOverlayNeighbor SetOverlayNeighbor;

		[Token(Token = "0x4001058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		internal _MoveGamepadFocusToNeighbor MoveGamepadFocusToNeighbor;

		[Token(Token = "0x4001059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		internal _SetOverlayDualAnalogTransform SetOverlayDualAnalogTransform;

		[Token(Token = "0x400105A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		internal _GetOverlayDualAnalogTransform GetOverlayDualAnalogTransform;

		[Token(Token = "0x400105B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		internal _SetOverlayTexture SetOverlayTexture;

		[Token(Token = "0x400105C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		internal _ClearOverlayTexture ClearOverlayTexture;

		[Token(Token = "0x400105D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		internal _SetOverlayRaw SetOverlayRaw;

		[Token(Token = "0x400105E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		internal _SetOverlayFromFile SetOverlayFromFile;

		[Token(Token = "0x400105F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		internal _GetOverlayTexture GetOverlayTexture;

		[Token(Token = "0x4001060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		internal _ReleaseNativeOverlayHandle ReleaseNativeOverlayHandle;

		[Token(Token = "0x4001061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		internal _GetOverlayTextureSize GetOverlayTextureSize;

		[Token(Token = "0x4001062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		internal _CreateDashboardOverlay CreateDashboardOverlay;

		[Token(Token = "0x4001063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		internal _IsDashboardVisible IsDashboardVisible;

		[Token(Token = "0x4001064")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		internal _IsActiveDashboardOverlay IsActiveDashboardOverlay;

		[Token(Token = "0x4001065")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		internal _SetDashboardOverlaySceneProcess SetDashboardOverlaySceneProcess;

		[Token(Token = "0x4001066")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		internal _GetDashboardOverlaySceneProcess GetDashboardOverlaySceneProcess;

		[Token(Token = "0x4001067")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		internal _ShowDashboard ShowDashboard;

		[Token(Token = "0x4001068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		internal _GetPrimaryDashboardDevice GetPrimaryDashboardDevice;

		[Token(Token = "0x4001069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		internal _ShowKeyboard ShowKeyboard;

		[Token(Token = "0x400106A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		internal _ShowKeyboardForOverlay ShowKeyboardForOverlay;

		[Token(Token = "0x400106B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		internal _GetKeyboardText GetKeyboardText;

		[Token(Token = "0x400106C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		internal _HideKeyboard HideKeyboard;

		[Token(Token = "0x400106D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		internal _SetKeyboardTransformAbsolute SetKeyboardTransformAbsolute;

		[Token(Token = "0x400106E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		internal _SetKeyboardPositionForOverlay SetKeyboardPositionForOverlay;

		[Token(Token = "0x400106F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		internal _SetOverlayIntersectionMask SetOverlayIntersectionMask;

		[Token(Token = "0x4001070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		internal _GetOverlayFlags GetOverlayFlags;

		[Token(Token = "0x4001071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		internal _ShowMessageOverlay ShowMessageOverlay;

		[Token(Token = "0x4001072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		internal _CloseMessageOverlay CloseMessageOverlay;
	}
	[Token(Token = "0x20002C5")]
	public struct IVRRenderModels
	{
		[Token(Token = "0x200069F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC200", Offset = "0x2EC200")]
		internal delegate EVRRenderModelError _LoadRenderModel_Async(string pchRenderModelName, ref IntPtr ppRenderModel);

		[Token(Token = "0x20006A0")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC214", Offset = "0x2EC214")]
		internal delegate void _FreeRenderModel(IntPtr pRenderModel);

		[Token(Token = "0x20006A1")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC228", Offset = "0x2EC228")]
		internal delegate EVRRenderModelError _LoadTexture_Async(int textureId, ref IntPtr ppTexture);

		[Token(Token = "0x20006A2")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC23C", Offset = "0x2EC23C")]
		internal delegate void _FreeTexture(IntPtr pTexture);

		[Token(Token = "0x20006A3")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC250", Offset = "0x2EC250")]
		internal delegate EVRRenderModelError _LoadTextureD3D11_Async(int textureId, IntPtr pD3D11Device, ref IntPtr ppD3D11Texture2D);

		[Token(Token = "0x20006A4")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC264", Offset = "0x2EC264")]
		internal delegate EVRRenderModelError _LoadIntoTextureD3D11_Async(int textureId, IntPtr pDstTexture);

		[Token(Token = "0x20006A5")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC278", Offset = "0x2EC278")]
		internal delegate void _FreeTextureD3D11(IntPtr pD3D11Texture2D);

		[Token(Token = "0x20006A6")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC28C", Offset = "0x2EC28C")]
		internal delegate uint _GetRenderModelName(uint unRenderModelIndex, StringBuilder pchRenderModelName, uint unRenderModelNameLen);

		[Token(Token = "0x20006A7")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC2A0", Offset = "0x2EC2A0")]
		internal delegate uint _GetRenderModelCount();

		[Token(Token = "0x20006A8")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC2B4", Offset = "0x2EC2B4")]
		internal delegate uint _GetComponentCount(string pchRenderModelName);

		[Token(Token = "0x20006A9")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC2C8", Offset = "0x2EC2C8")]
		internal delegate uint _GetComponentName(string pchRenderModelName, uint unComponentIndex, StringBuilder pchComponentName, uint unComponentNameLen);

		[Token(Token = "0x20006AA")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC2DC", Offset = "0x2EC2DC")]
		internal delegate ulong _GetComponentButtonMask(string pchRenderModelName, string pchComponentName);

		[Token(Token = "0x20006AB")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC2F0", Offset = "0x2EC2F0")]
		internal delegate uint _GetComponentRenderModelName(string pchRenderModelName, string pchComponentName, StringBuilder pchComponentRenderModelName, uint unComponentRenderModelNameLen);

		[Token(Token = "0x20006AC")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC304", Offset = "0x2EC304")]
		internal delegate bool _GetComponentStateForDevicePath(string pchRenderModelName, string pchComponentName, ulong devicePath, ref RenderModel_ControllerMode_State_t pState, ref RenderModel_ComponentState_t pComponentState);

		[Token(Token = "0x20006AD")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC318", Offset = "0x2EC318")]
		internal delegate bool _GetComponentState(string pchRenderModelName, string pchComponentName, ref VRControllerState_t pControllerState, ref RenderModel_ControllerMode_State_t pState, ref RenderModel_ComponentState_t pComponentState);

		[Token(Token = "0x20006AE")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC32C", Offset = "0x2EC32C")]
		internal delegate bool _RenderModelHasComponent(string pchRenderModelName, string pchComponentName);

		[Token(Token = "0x20006AF")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC340", Offset = "0x2EC340")]
		internal delegate uint _GetRenderModelThumbnailURL(string pchRenderModelName, StringBuilder pchThumbnailURL, uint unThumbnailURLLen, ref EVRRenderModelError peError);

		[Token(Token = "0x20006B0")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC354", Offset = "0x2EC354")]
		internal delegate uint _GetRenderModelOriginalPath(string pchRenderModelName, StringBuilder pchOriginalPath, uint unOriginalPathLen, ref EVRRenderModelError peError);

		[Token(Token = "0x20006B1")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC368", Offset = "0x2EC368")]
		internal delegate IntPtr _GetRenderModelErrorNameFromEnum(EVRRenderModelError error);

		[Token(Token = "0x4001073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _LoadRenderModel_Async LoadRenderModel_Async;

		[Token(Token = "0x4001074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		internal _FreeRenderModel FreeRenderModel;

		[Token(Token = "0x4001075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _LoadTexture_Async LoadTexture_Async;

		[Token(Token = "0x4001076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal _FreeTexture FreeTexture;

		[Token(Token = "0x4001077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _LoadTextureD3D11_Async LoadTextureD3D11_Async;

		[Token(Token = "0x4001078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal _LoadIntoTextureD3D11_Async LoadIntoTextureD3D11_Async;

		[Token(Token = "0x4001079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _FreeTextureD3D11 FreeTextureD3D11;

		[Token(Token = "0x400107A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal _GetRenderModelName GetRenderModelName;

		[Token(Token = "0x400107B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _GetRenderModelCount GetRenderModelCount;

		[Token(Token = "0x400107C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal _GetComponentCount GetComponentCount;

		[Token(Token = "0x400107D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _GetComponentName GetComponentName;

		[Token(Token = "0x400107E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal _GetComponentButtonMask GetComponentButtonMask;

		[Token(Token = "0x400107F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _GetComponentRenderModelName GetComponentRenderModelName;

		[Token(Token = "0x4001080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal _GetComponentStateForDevicePath GetComponentStateForDevicePath;

		[Token(Token = "0x4001081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _GetComponentState GetComponentState;

		[Token(Token = "0x4001082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		internal _RenderModelHasComponent RenderModelHasComponent;

		[Token(Token = "0x4001083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _GetRenderModelThumbnailURL GetRenderModelThumbnailURL;

		[Token(Token = "0x4001084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		internal _GetRenderModelOriginalPath GetRenderModelOriginalPath;

		[Token(Token = "0x4001085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _GetRenderModelErrorNameFromEnum GetRenderModelErrorNameFromEnum;
	}
	[Token(Token = "0x20002C6")]
	public struct IVRNotifications
	{
		[Token(Token = "0x20006B2")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC37C", Offset = "0x2EC37C")]
		internal delegate EVRNotificationError _CreateNotification(ulong ulOverlayHandle, ulong ulUserValue, EVRNotificationType type, string pchText, EVRNotificationStyle style, ref NotificationBitmap_t pImage, ref uint pNotificationId);

		[Token(Token = "0x20006B3")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC390", Offset = "0x2EC390")]
		internal delegate EVRNotificationError _RemoveNotification(uint notificationId);

		[Token(Token = "0x4001086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _CreateNotification CreateNotification;

		[Token(Token = "0x4001087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		internal _RemoveNotification RemoveNotification;
	}
	[Token(Token = "0x20002C7")]
	public struct IVRSettings
	{
		[Token(Token = "0x20006B4")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC3A4", Offset = "0x2EC3A4")]
		internal delegate IntPtr _GetSettingsErrorNameFromEnum(EVRSettingsError eError);

		[Token(Token = "0x20006B5")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC3B8", Offset = "0x2EC3B8")]
		internal delegate bool _Sync(bool bForce, ref EVRSettingsError peError);

		[Token(Token = "0x20006B6")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC3CC", Offset = "0x2EC3CC")]
		internal delegate void _SetBool(string pchSection, string pchSettingsKey, bool bValue, ref EVRSettingsError peError);

		[Token(Token = "0x20006B7")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC3E0", Offset = "0x2EC3E0")]
		internal delegate void _SetInt32(string pchSection, string pchSettingsKey, int nValue, ref EVRSettingsError peError);

		[Token(Token = "0x20006B8")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC3F4", Offset = "0x2EC3F4")]
		internal delegate void _SetFloat(string pchSection, string pchSettingsKey, float flValue, ref EVRSettingsError peError);

		[Token(Token = "0x20006B9")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC408", Offset = "0x2EC408")]
		internal delegate void _SetString(string pchSection, string pchSettingsKey, string pchValue, ref EVRSettingsError peError);

		[Token(Token = "0x20006BA")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC41C", Offset = "0x2EC41C")]
		internal delegate bool _GetBool(string pchSection, string pchSettingsKey, ref EVRSettingsError peError);

		[Token(Token = "0x20006BB")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC430", Offset = "0x2EC430")]
		internal delegate int _GetInt32(string pchSection, string pchSettingsKey, ref EVRSettingsError peError);

		[Token(Token = "0x20006BC")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC444", Offset = "0x2EC444")]
		internal delegate float _GetFloat(string pchSection, string pchSettingsKey, ref EVRSettingsError peError);

		[Token(Token = "0x20006BD")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC458", Offset = "0x2EC458")]
		internal delegate void _GetString(string pchSection, string pchSettingsKey, StringBuilder pchValue, uint unValueLen, ref EVRSettingsError peError);

		[Token(Token = "0x20006BE")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC46C", Offset = "0x2EC46C")]
		internal delegate void _RemoveSection(string pchSection, ref EVRSettingsError peError);

		[Token(Token = "0x20006BF")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC480", Offset = "0x2EC480")]
		internal delegate void _RemoveKeyInSection(string pchSection, string pchSettingsKey, ref EVRSettingsError peError);

		[Token(Token = "0x4001088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _GetSettingsErrorNameFromEnum GetSettingsErrorNameFromEnum;

		[Token(Token = "0x4001089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		internal _Sync Sync;

		[Token(Token = "0x400108A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _SetBool SetBool;

		[Token(Token = "0x400108B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal _SetInt32 SetInt32;

		[Token(Token = "0x400108C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _SetFloat SetFloat;

		[Token(Token = "0x400108D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal _SetString SetString;

		[Token(Token = "0x400108E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _GetBool GetBool;

		[Token(Token = "0x400108F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal _GetInt32 GetInt32;

		[Token(Token = "0x4001090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _GetFloat GetFloat;

		[Token(Token = "0x4001091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal _GetString GetString;

		[Token(Token = "0x4001092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _RemoveSection RemoveSection;

		[Token(Token = "0x4001093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal _RemoveKeyInSection RemoveKeyInSection;
	}
	[Token(Token = "0x20002C8")]
	public struct IVRScreenshots
	{
		[Token(Token = "0x20006C0")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC494", Offset = "0x2EC494")]
		internal delegate EVRScreenshotError _RequestScreenshot(ref uint pOutScreenshotHandle, EVRScreenshotType type, string pchPreviewFilename, string pchVRFilename);

		[Token(Token = "0x20006C1")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC4A8", Offset = "0x2EC4A8")]
		internal delegate EVRScreenshotError _HookScreenshot([In][Out] EVRScreenshotType[] pSupportedTypes, int numTypes);

		[Token(Token = "0x20006C2")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC4BC", Offset = "0x2EC4BC")]
		internal delegate EVRScreenshotType _GetScreenshotPropertyType(uint screenshotHandle, ref EVRScreenshotError pError);

		[Token(Token = "0x20006C3")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC4D0", Offset = "0x2EC4D0")]
		internal delegate uint _GetScreenshotPropertyFilename(uint screenshotHandle, EVRScreenshotPropertyFilenames filenameType, StringBuilder pchFilename, uint cchFilename, ref EVRScreenshotError pError);

		[Token(Token = "0x20006C4")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC4E4", Offset = "0x2EC4E4")]
		internal delegate EVRScreenshotError _UpdateScreenshotProgress(uint screenshotHandle, float flProgress);

		[Token(Token = "0x20006C5")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC4F8", Offset = "0x2EC4F8")]
		internal delegate EVRScreenshotError _TakeStereoScreenshot(ref uint pOutScreenshotHandle, string pchPreviewFilename, string pchVRFilename);

		[Token(Token = "0x20006C6")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC50C", Offset = "0x2EC50C")]
		internal delegate EVRScreenshotError _SubmitScreenshot(uint screenshotHandle, EVRScreenshotType type, string pchSourcePreviewFilename, string pchSourceVRFilename);

		[Token(Token = "0x4001094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _RequestScreenshot RequestScreenshot;

		[Token(Token = "0x4001095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		internal _HookScreenshot HookScreenshot;

		[Token(Token = "0x4001096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _GetScreenshotPropertyType GetScreenshotPropertyType;

		[Token(Token = "0x4001097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal _GetScreenshotPropertyFilename GetScreenshotPropertyFilename;

		[Token(Token = "0x4001098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _UpdateScreenshotProgress UpdateScreenshotProgress;

		[Token(Token = "0x4001099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal _TakeStereoScreenshot TakeStereoScreenshot;

		[Token(Token = "0x400109A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _SubmitScreenshot SubmitScreenshot;
	}
	[Token(Token = "0x20002C9")]
	public struct IVRResources
	{
		[Token(Token = "0x20006C7")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC520", Offset = "0x2EC520")]
		internal delegate uint _LoadSharedResource(string pchResourceName, string pchBuffer, uint unBufferLen);

		[Token(Token = "0x20006C8")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC534", Offset = "0x2EC534")]
		internal delegate uint _GetResourceFullPath(string pchResourceName, string pchResourceTypeDirectory, StringBuilder pchPathBuffer, uint unBufferLen);

		[Token(Token = "0x400109B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _LoadSharedResource LoadSharedResource;

		[Token(Token = "0x400109C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		internal _GetResourceFullPath GetResourceFullPath;
	}
	[Token(Token = "0x20002CA")]
	public struct IVRDriverManager
	{
		[Token(Token = "0x20006C9")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC548", Offset = "0x2EC548")]
		internal delegate uint _GetDriverCount();

		[Token(Token = "0x20006CA")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC55C", Offset = "0x2EC55C")]
		internal delegate uint _GetDriverName(uint nDriver, StringBuilder pchValue, uint unBufferSize);

		[Token(Token = "0x20006CB")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC570", Offset = "0x2EC570")]
		internal delegate ulong _GetDriverHandle(string pchDriverName);

		[Token(Token = "0x400109D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _GetDriverCount GetDriverCount;

		[Token(Token = "0x400109E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		internal _GetDriverName GetDriverName;

		[Token(Token = "0x400109F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _GetDriverHandle GetDriverHandle;
	}
	[Token(Token = "0x20002CB")]
	public struct IVRInput
	{
		[Token(Token = "0x20006CC")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC584", Offset = "0x2EC584")]
		internal delegate EVRInputError _SetActionManifestPath(string pchActionManifestPath);

		[Token(Token = "0x20006CD")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC598", Offset = "0x2EC598")]
		internal delegate EVRInputError _GetActionSetHandle(string pchActionSetName, ref ulong pHandle);

		[Token(Token = "0x20006CE")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC5AC", Offset = "0x2EC5AC")]
		internal delegate EVRInputError _GetActionHandle(string pchActionName, ref ulong pHandle);

		[Token(Token = "0x20006CF")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC5C0", Offset = "0x2EC5C0")]
		internal delegate EVRInputError _GetInputSourceHandle(string pchInputSourcePath, ref ulong pHandle);

		[Token(Token = "0x20006D0")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC5D4", Offset = "0x2EC5D4")]
		internal delegate EVRInputError _UpdateActionState([In][Out] VRActiveActionSet_t[] pSets, uint unSizeOfVRSelectedActionSet_t, uint unSetCount);

		[Token(Token = "0x20006D1")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC5E8", Offset = "0x2EC5E8")]
		internal delegate EVRInputError _GetDigitalActionData(ulong action, ref InputDigitalActionData_t pActionData, uint unActionDataSize, ulong ulRestrictToDevice);

		[Token(Token = "0x20006D2")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC5FC", Offset = "0x2EC5FC")]
		internal delegate EVRInputError _GetAnalogActionData(ulong action, ref InputAnalogActionData_t pActionData, uint unActionDataSize, ulong ulRestrictToDevice);

		[Token(Token = "0x20006D3")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC610", Offset = "0x2EC610")]
		internal delegate EVRInputError _GetPoseActionData(ulong action, ETrackingUniverseOrigin eOrigin, float fPredictedSecondsFromNow, ref InputPoseActionData_t pActionData, uint unActionDataSize, ulong ulRestrictToDevice);

		[Token(Token = "0x20006D4")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC624", Offset = "0x2EC624")]
		internal delegate EVRInputError _GetSkeletalActionData(ulong action, ref InputSkeletalActionData_t pActionData, uint unActionDataSize, ulong ulRestrictToDevice);

		[Token(Token = "0x20006D5")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC638", Offset = "0x2EC638")]
		internal delegate EVRInputError _GetSkeletalBoneData(ulong action, EVRSkeletalTransformSpace eTransformSpace, EVRSkeletalMotionRange eMotionRange, [In][Out] VRBoneTransform_t[] pTransformArray, uint unTransformArrayCount, ulong ulRestrictToDevice);

		[Token(Token = "0x20006D6")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC64C", Offset = "0x2EC64C")]
		internal delegate EVRInputError _GetSkeletalBoneDataCompressed(ulong action, EVRSkeletalTransformSpace eTransformSpace, EVRSkeletalMotionRange eMotionRange, IntPtr pvCompressedData, uint unCompressedSize, ref uint punRequiredCompressedSize, ulong ulRestrictToDevice);

		[Token(Token = "0x20006D7")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC660", Offset = "0x2EC660")]
		internal delegate EVRInputError _DecompressSkeletalBoneData(IntPtr pvCompressedBuffer, uint unCompressedBufferSize, ref EVRSkeletalTransformSpace peTransformSpace, [In][Out] VRBoneTransform_t[] pTransformArray, uint unTransformArrayCount);

		[Token(Token = "0x20006D8")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC674", Offset = "0x2EC674")]
		internal delegate EVRInputError _TriggerHapticVibrationAction(ulong action, float fStartSecondsFromNow, float fDurationSeconds, float fFrequency, float fAmplitude, ulong ulRestrictToDevice);

		[Token(Token = "0x20006D9")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC688", Offset = "0x2EC688")]
		internal delegate EVRInputError _GetActionOrigins(ulong actionSetHandle, ulong digitalActionHandle, [In][Out] ulong[] originsOut, uint originOutCount);

		[Token(Token = "0x20006DA")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC69C", Offset = "0x2EC69C")]
		internal delegate EVRInputError _GetOriginLocalizedName(ulong origin, StringBuilder pchNameArray, uint unNameArraySize);

		[Token(Token = "0x20006DB")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC6B0", Offset = "0x2EC6B0")]
		internal delegate EVRInputError _GetOriginTrackedDeviceInfo(ulong origin, ref InputOriginInfo_t pOriginInfo, uint unOriginInfoSize);

		[Token(Token = "0x20006DC")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC6C4", Offset = "0x2EC6C4")]
		internal delegate EVRInputError _ShowActionOrigins(ulong actionSetHandle, ulong ulActionHandle);

		[Token(Token = "0x20006DD")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC6D8", Offset = "0x2EC6D8")]
		internal delegate EVRInputError _ShowBindingsForActionSet([In][Out] VRActiveActionSet_t[] pSets, uint unSizeOfVRSelectedActionSet_t, uint unSetCount, ulong originToHighlight);

		[Token(Token = "0x40010A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _SetActionManifestPath SetActionManifestPath;

		[Token(Token = "0x40010A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		internal _GetActionSetHandle GetActionSetHandle;

		[Token(Token = "0x40010A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _GetActionHandle GetActionHandle;

		[Token(Token = "0x40010A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal _GetInputSourceHandle GetInputSourceHandle;

		[Token(Token = "0x40010A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _UpdateActionState UpdateActionState;

		[Token(Token = "0x40010A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal _GetDigitalActionData GetDigitalActionData;

		[Token(Token = "0x40010A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _GetAnalogActionData GetAnalogActionData;

		[Token(Token = "0x40010A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal _GetPoseActionData GetPoseActionData;

		[Token(Token = "0x40010A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _GetSkeletalActionData GetSkeletalActionData;

		[Token(Token = "0x40010A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal _GetSkeletalBoneData GetSkeletalBoneData;

		[Token(Token = "0x40010AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _GetSkeletalBoneDataCompressed GetSkeletalBoneDataCompressed;

		[Token(Token = "0x40010AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal _DecompressSkeletalBoneData DecompressSkeletalBoneData;

		[Token(Token = "0x40010AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _TriggerHapticVibrationAction TriggerHapticVibrationAction;

		[Token(Token = "0x40010AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal _GetActionOrigins GetActionOrigins;

		[Token(Token = "0x40010AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _GetOriginLocalizedName GetOriginLocalizedName;

		[Token(Token = "0x40010AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		internal _GetOriginTrackedDeviceInfo GetOriginTrackedDeviceInfo;

		[Token(Token = "0x40010B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _ShowActionOrigins ShowActionOrigins;

		[Token(Token = "0x40010B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		internal _ShowBindingsForActionSet ShowBindingsForActionSet;
	}
	[Token(Token = "0x20002CC")]
	public struct IVRIOBuffer
	{
		[Token(Token = "0x20006DE")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC6EC", Offset = "0x2EC6EC")]
		internal delegate EIOBufferError _Open(string pchPath, EIOBufferMode mode, uint unElementSize, uint unElements, ref ulong pulBuffer);

		[Token(Token = "0x20006DF")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC700", Offset = "0x2EC700")]
		internal delegate EIOBufferError _Close(ulong ulBuffer);

		[Token(Token = "0x20006E0")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC714", Offset = "0x2EC714")]
		internal delegate EIOBufferError _Read(ulong ulBuffer, IntPtr pDst, uint unBytes, ref uint punRead);

		[Token(Token = "0x20006E1")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC728", Offset = "0x2EC728")]
		internal delegate EIOBufferError _Write(ulong ulBuffer, IntPtr pSrc, uint unBytes);

		[Token(Token = "0x20006E2")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC73C", Offset = "0x2EC73C")]
		internal delegate ulong _PropertyContainer(ulong ulBuffer);

		[Token(Token = "0x40010B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _Open Open;

		[Token(Token = "0x40010B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		internal _Close Close;

		[Token(Token = "0x40010B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _Read Read;

		[Token(Token = "0x40010B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal _Write Write;

		[Token(Token = "0x40010B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _PropertyContainer PropertyContainer;
	}
	[Token(Token = "0x20002CD")]
	public struct IVRSpatialAnchors
	{
		[Token(Token = "0x20006E3")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC750", Offset = "0x2EC750")]
		internal delegate EVRSpatialAnchorError _CreateSpatialAnchorFromDescriptor(string pchDescriptor, ref uint pHandleOut);

		[Token(Token = "0x20006E4")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC764", Offset = "0x2EC764")]
		internal delegate EVRSpatialAnchorError _CreateSpatialAnchorFromPose(uint unDeviceIndex, ETrackingUniverseOrigin eOrigin, ref SpatialAnchorPose_t pPose, ref uint pHandleOut);

		[Token(Token = "0x20006E5")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC778", Offset = "0x2EC778")]
		internal delegate EVRSpatialAnchorError _GetSpatialAnchorPose(uint unHandle, ETrackingUniverseOrigin eOrigin, ref SpatialAnchorPose_t pPoseOut);

		[Token(Token = "0x20006E6")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC78C", Offset = "0x2EC78C")]
		internal delegate EVRSpatialAnchorError _GetSpatialAnchorDescriptor(uint unHandle, StringBuilder pchDescriptorOut, ref uint punDescriptorBufferLenInOut);

		[Token(Token = "0x40010B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _CreateSpatialAnchorFromDescriptor CreateSpatialAnchorFromDescriptor;

		[Token(Token = "0x40010B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		internal _CreateSpatialAnchorFromPose CreateSpatialAnchorFromPose;

		[Token(Token = "0x40010B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _GetSpatialAnchorPose GetSpatialAnchorPose;

		[Token(Token = "0x40010BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal _GetSpatialAnchorDescriptor GetSpatialAnchorDescriptor;
	}
	[Token(Token = "0x20002CE")]
	public class CVRSystem
	{
		[Token(Token = "0x20006E7")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC7A0", Offset = "0x2EC7A0")]
		internal delegate bool _PollNextEventPacked(ref VREvent_t_Packed pEvent, uint uncbVREvent);

		[StructLayout(2)]
		[Token(Token = "0x20006E8")]
		private struct PollNextEventUnion
		{
			[Token(Token = "0x4001FFF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IVRSystem._PollNextEvent pPollNextEvent;

			[Token(Token = "0x4002000")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public _PollNextEventPacked pPollNextEventPacked;
		}

		[Token(Token = "0x20006E9")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC7B4", Offset = "0x2EC7B4")]
		internal delegate bool _GetControllerStatePacked(uint unControllerDeviceIndex, ref VRControllerState_t_Packed pControllerState, uint unControllerStateSize);

		[StructLayout(2)]
		[Token(Token = "0x20006EA")]
		private struct GetControllerStateUnion
		{
			[Token(Token = "0x4002001")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IVRSystem._GetControllerState pGetControllerState;

			[Token(Token = "0x4002002")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public _GetControllerStatePacked pGetControllerStatePacked;
		}

		[Token(Token = "0x20006EB")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC7C8", Offset = "0x2EC7C8")]
		internal delegate bool _GetControllerStateWithPosePacked(ETrackingUniverseOrigin eOrigin, uint unControllerDeviceIndex, ref VRControllerState_t_Packed pControllerState, uint unControllerStateSize, ref TrackedDevicePose_t pTrackedDevicePose);

		[StructLayout(2)]
		[Token(Token = "0x20006EC")]
		private struct GetControllerStateWithPoseUnion
		{
			[Token(Token = "0x4002003")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IVRSystem._GetControllerStateWithPose pGetControllerStateWithPose;

			[Token(Token = "0x4002004")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public _GetControllerStateWithPosePacked pGetControllerStateWithPosePacked;
		}

		[Token(Token = "0x40010BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IVRSystem FnTable;

		[Token(Token = "0x60015D5")]
		[Address(RVA = "0x835340", Offset = "0x835340", VA = "0x835340")]
		internal CVRSystem(IntPtr pInterface)
		{
		}

		[Token(Token = "0x60015D6")]
		[Address(RVA = "0x835488", Offset = "0x835488", VA = "0x835488")]
		public void GetRecommendedRenderTargetSize(ref uint pnWidth, ref uint pnHeight)
		{
		}

		[Token(Token = "0x60015D7")]
		[Address(RVA = "0x8354D0", Offset = "0x8354D0", VA = "0x8354D0")]
		public HmdMatrix44_t GetProjectionMatrix(EVREye eEye, float fNearZ, float fFarZ)
		{
			return default(HmdMatrix44_t);
		}

		[Token(Token = "0x60015D8")]
		[Address(RVA = "0x835530", Offset = "0x835530", VA = "0x835530")]
		public void GetProjectionRaw(EVREye eEye, ref float pfLeft, ref float pfRight, ref float pfTop, ref float pfBottom)
		{
		}

		[Token(Token = "0x60015D9")]
		[Address(RVA = "0x8355A0", Offset = "0x8355A0", VA = "0x8355A0")]
		public bool ComputeDistortion(EVREye eEye, float fU, float fV, ref DistortionCoordinates_t pDistortionCoordinates)
		{
			return default(bool);
		}

		[Token(Token = "0x60015DA")]
		[Address(RVA = "0x8355F8", Offset = "0x8355F8", VA = "0x8355F8")]
		public HmdMatrix34_t GetEyeToHeadTransform(EVREye eEye)
		{
			return default(HmdMatrix34_t);
		}

		[Token(Token = "0x60015DB")]
		[Address(RVA = "0x835634", Offset = "0x835634", VA = "0x835634")]
		public bool GetTimeSinceLastVsync(ref float pfSecondsSinceLastVsync, ref ulong pulFrameCounter)
		{
			return default(bool);
		}

		[Token(Token = "0x60015DC")]
		[Address(RVA = "0x835680", Offset = "0x835680", VA = "0x835680")]
		public int GetD3D9AdapterIndex()
		{
			return default(int);
		}

		[Token(Token = "0x60015DD")]
		[Address(RVA = "0x8356AC", Offset = "0x8356AC", VA = "0x8356AC")]
		public void GetDXGIOutputInfo(ref int pnAdapterIndex)
		{
		}

		[Token(Token = "0x60015DE")]
		[Address(RVA = "0x8356E8", Offset = "0x8356E8", VA = "0x8356E8")]
		public void GetOutputDevice(ref ulong pnDevice, ETextureType textureType, IntPtr pInstance)
		{
		}

		[Token(Token = "0x60015DF")]
		[Address(RVA = "0x835740", Offset = "0x835740", VA = "0x835740")]
		public bool IsDisplayOnDesktop()
		{
			return default(bool);
		}

		[Token(Token = "0x60015E0")]
		[Address(RVA = "0x83576C", Offset = "0x83576C", VA = "0x83576C")]
		public bool SetDisplayVisibility(bool bIsVisibleOnDesktop)
		{
			return default(bool);
		}

		[Token(Token = "0x60015E1")]
		[Address(RVA = "0x8357A0", Offset = "0x8357A0", VA = "0x8357A0")]
		public void GetDeviceToAbsoluteTrackingPose(ETrackingUniverseOrigin eOrigin, float fPredictedSecondsToPhotonsFromNow, TrackedDevicePose_t[] pTrackedDevicePoseArray)
		{
		}

		[Token(Token = "0x60015E2")]
		[Address(RVA = "0x835804", Offset = "0x835804", VA = "0x835804")]
		public void ResetSeatedZeroPose()
		{
		}

		[Token(Token = "0x60015E3")]
		[Address(RVA = "0x835830", Offset = "0x835830", VA = "0x835830")]
		public HmdMatrix34_t GetSeatedZeroPoseToStandingAbsoluteTrackingPose()
		{
			return default(HmdMatrix34_t);
		}

		[Token(Token = "0x60015E4")]
		[Address(RVA = "0x835864", Offset = "0x835864", VA = "0x835864")]
		public HmdMatrix34_t GetRawZeroPoseToStandingAbsoluteTrackingPose()
		{
			return default(HmdMatrix34_t);
		}

		[Token(Token = "0x60015E5")]
		[Address(RVA = "0x835898", Offset = "0x835898", VA = "0x835898")]
		public uint GetSortedTrackedDeviceIndicesOfClass(ETrackedDeviceClass eTrackedDeviceClass, uint[] punTrackedDeviceIndexArray, uint unRelativeToTrackedDeviceIndex)
		{
			return default(uint);
		}

		[Token(Token = "0x60015E6")]
		[Address(RVA = "0x8358FC", Offset = "0x8358FC", VA = "0x8358FC")]
		public EDeviceActivityLevel GetTrackedDeviceActivityLevel(uint unDeviceId)
		{
			return default(EDeviceActivityLevel);
		}

		[Token(Token = "0x60015E7")]
		[Address(RVA = "0x835930", Offset = "0x835930", VA = "0x835930")]
		public void ApplyTransform(ref TrackedDevicePose_t pOutputPose, ref TrackedDevicePose_t pTrackedDevicePose, ref HmdMatrix34_t pTransform)
		{
		}

		[Token(Token = "0x60015E8")]
		[Address(RVA = "0x835980", Offset = "0x835980", VA = "0x835980")]
		public uint GetTrackedDeviceIndexForControllerRole(ETrackedControllerRole unDeviceType)
		{
			return default(uint);
		}

		[Token(Token = "0x60015E9")]
		[Address(RVA = "0x8359B4", Offset = "0x8359B4", VA = "0x8359B4")]
		public ETrackedControllerRole GetControllerRoleForTrackedDeviceIndex(uint unDeviceIndex)
		{
			return default(ETrackedControllerRole);
		}

		[Token(Token = "0x60015EA")]
		[Address(RVA = "0x8359E8", Offset = "0x8359E8", VA = "0x8359E8")]
		public ETrackedDeviceClass GetTrackedDeviceClass(uint unDeviceIndex)
		{
			return default(ETrackedDeviceClass);
		}

		[Token(Token = "0x60015EB")]
		[Address(RVA = "0x835A1C", Offset = "0x835A1C", VA = "0x835A1C")]
		public bool IsTrackedDeviceConnected(uint unDeviceIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x60015EC")]
		[Address(RVA = "0x835A50", Offset = "0x835A50", VA = "0x835A50")]
		public bool GetBoolTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError)
		{
			return default(bool);
		}

		[Token(Token = "0x60015ED")]
		[Address(RVA = "0x835AA0", Offset = "0x835AA0", VA = "0x835AA0")]
		public float GetFloatTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError)
		{
			return default(float);
		}

		[Token(Token = "0x60015EE")]
		[Address(RVA = "0x835AF0", Offset = "0x835AF0", VA = "0x835AF0")]
		public int GetInt32TrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError)
		{
			return default(int);
		}

		[Token(Token = "0x60015EF")]
		[Address(RVA = "0x835B40", Offset = "0x835B40", VA = "0x835B40")]
		public ulong GetUint64TrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError)
		{
			return default(ulong);
		}

		[Token(Token = "0x60015F0")]
		[Address(RVA = "0x835B90", Offset = "0x835B90", VA = "0x835B90")]
		public HmdMatrix34_t GetMatrix34TrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError)
		{
			return default(HmdMatrix34_t);
		}

		[Token(Token = "0x60015F1")]
		[Address(RVA = "0x835BE8", Offset = "0x835BE8", VA = "0x835BE8")]
		public uint GetArrayTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, uint propType, IntPtr pBuffer, uint unBufferSize, ref ETrackedPropertyError pError)
		{
			return default(uint);
		}

		[Token(Token = "0x60015F2")]
		[Address(RVA = "0x835C50", Offset = "0x835C50", VA = "0x835C50")]
		public uint GetStringTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, StringBuilder pchValue, uint unBufferSize, ref ETrackedPropertyError pError)
		{
			return default(uint);
		}

		[Token(Token = "0x60015F3")]
		[Address(RVA = "0x835CB0", Offset = "0x835CB0", VA = "0x835CB0")]
		public string GetPropErrorNameFromEnum(ETrackedPropertyError error)
		{
			return null;
		}

		[Token(Token = "0x60015F4")]
		[Address(RVA = "0x835D60", Offset = "0x835D60", VA = "0x835D60")]
		public bool PollNextEvent(ref VREvent_t pEvent, uint uncbVREvent)
		{
			return default(bool);
		}

		[Token(Token = "0x60015F5")]
		[Address(RVA = "0x8361B4", Offset = "0x8361B4", VA = "0x8361B4")]
		public bool PollNextEventWithPose(ETrackingUniverseOrigin eOrigin, ref VREvent_t pEvent, uint uncbVREvent, ref TrackedDevicePose_t pTrackedDevicePose)
		{
			return default(bool);
		}

		[Token(Token = "0x60015F6")]
		[Address(RVA = "0x83620C", Offset = "0x83620C", VA = "0x83620C")]
		public string GetEventTypeNameFromEnum(EVREventType eType)
		{
			return null;
		}

		[Token(Token = "0x60015F7")]
		[Address(RVA = "0x8362BC", Offset = "0x8362BC", VA = "0x8362BC")]
		public HiddenAreaMesh_t GetHiddenAreaMesh(EVREye eEye, EHiddenAreaMeshType type)
		{
			return default(HiddenAreaMesh_t);
		}

		[Token(Token = "0x60015F8")]
		[Address(RVA = "0x83630C", Offset = "0x83630C", VA = "0x83630C")]
		public bool GetControllerState(uint unControllerDeviceIndex, ref VRControllerState_t pControllerState, uint unControllerStateSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60015F9")]
		[Address(RVA = "0x8367F0", Offset = "0x8367F0", VA = "0x8367F0")]
		public bool GetControllerStateWithPose(ETrackingUniverseOrigin eOrigin, uint unControllerDeviceIndex, ref VRControllerState_t pControllerState, uint unControllerStateSize, ref TrackedDevicePose_t pTrackedDevicePose)
		{
			return default(bool);
		}

		[Token(Token = "0x60015FA")]
		[Address(RVA = "0x836D0C", Offset = "0x836D0C", VA = "0x836D0C")]
		public void TriggerHapticPulse(uint unControllerDeviceIndex, uint unAxisId, ushort usDurationMicroSec)
		{
		}

		[Token(Token = "0x60015FB")]
		[Address(RVA = "0x836D5C", Offset = "0x836D5C", VA = "0x836D5C")]
		public string GetButtonIdNameFromEnum(EVRButtonId eButtonId)
		{
			return null;
		}

		[Token(Token = "0x60015FC")]
		[Address(RVA = "0x836E0C", Offset = "0x836E0C", VA = "0x836E0C")]
		public string GetControllerAxisTypeNameFromEnum(EVRControllerAxisType eAxisType)
		{
			return null;
		}

		[Token(Token = "0x60015FD")]
		[Address(RVA = "0x836EBC", Offset = "0x836EBC", VA = "0x836EBC")]
		public bool IsInputAvailable()
		{
			return default(bool);
		}

		[Token(Token = "0x60015FE")]
		[Address(RVA = "0x836EE8", Offset = "0x836EE8", VA = "0x836EE8")]
		public bool IsSteamVRDrawingControllers()
		{
			return default(bool);
		}

		[Token(Token = "0x60015FF")]
		[Address(RVA = "0x836F14", Offset = "0x836F14", VA = "0x836F14")]
		public bool ShouldApplicationPause()
		{
			return default(bool);
		}

		[Token(Token = "0x6001600")]
		[Address(RVA = "0x836F40", Offset = "0x836F40", VA = "0x836F40")]
		public bool ShouldApplicationReduceRenderingWork()
		{
			return default(bool);
		}

		[Token(Token = "0x6001601")]
		[Address(RVA = "0x836F6C", Offset = "0x836F6C", VA = "0x836F6C")]
		public uint DriverDebugRequest(uint unDeviceIndex, string pchRequest, StringBuilder pchResponseBuffer, uint unResponseBufferSize)
		{
			return default(uint);
		}

		[Token(Token = "0x6001602")]
		[Address(RVA = "0x836FC4", Offset = "0x836FC4", VA = "0x836FC4")]
		public EVRFirmwareError PerformFirmwareUpdate(uint unDeviceIndex)
		{
			return default(EVRFirmwareError);
		}

		[Token(Token = "0x6001603")]
		[Address(RVA = "0x836FF8", Offset = "0x836FF8", VA = "0x836FF8")]
		public void AcknowledgeQuit_Exiting()
		{
		}

		[Token(Token = "0x6001604")]
		[Address(RVA = "0x837024", Offset = "0x837024", VA = "0x837024")]
		public void AcknowledgeQuit_UserPrompt()
		{
		}
	}
	[Token(Token = "0x20002CF")]
	public class CVRExtendedDisplay
	{
		[Token(Token = "0x40010BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IVRExtendedDisplay FnTable;

		[Token(Token = "0x6001605")]
		[Address(RVA = "0x830650", Offset = "0x830650", VA = "0x830650")]
		internal CVRExtendedDisplay(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6001606")]
		[Address(RVA = "0x830798", Offset = "0x830798", VA = "0x830798")]
		public void GetWindowBounds(ref int pnX, ref int pnY, ref uint pnWidth, ref uint pnHeight)
		{
		}

		[Token(Token = "0x6001607")]
		[Address(RVA = "0x830800", Offset = "0x830800", VA = "0x830800")]
		public void GetEyeOutputViewport(EVREye eEye, ref uint pnX, ref uint pnY, ref uint pnWidth, ref uint pnHeight)
		{
		}

		[Token(Token = "0x6001608")]
		[Address(RVA = "0x830870", Offset = "0x830870", VA = "0x830870")]
		public void GetDXGIOutputInfo(ref int pnAdapterIndex, ref int pnAdapterOutputIndex)
		{
		}
	}
	[Token(Token = "0x20002D0")]
	public class CVRTrackedCamera
	{
		[Token(Token = "0x40010BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IVRTrackedCamera FnTable;

		[Token(Token = "0x6001609")]
		[Address(RVA = "0x8373FC", Offset = "0x8373FC", VA = "0x8373FC")]
		internal CVRTrackedCamera(IntPtr pInterface)
		{
		}

		[Token(Token = "0x600160A")]
		[Address(RVA = "0x837558", Offset = "0x837558", VA = "0x837558")]
		public string GetCameraErrorNameFromEnum(EVRTrackedCameraError eCameraError)
		{
			return null;
		}

		[Token(Token = "0x600160B")]
		[Address(RVA = "0x837608", Offset = "0x837608", VA = "0x837608")]
		public EVRTrackedCameraError HasCamera(uint nDeviceIndex, ref bool pHasCamera)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x600160C")]
		[Address(RVA = "0x83764C", Offset = "0x83764C", VA = "0x83764C")]
		public EVRTrackedCameraError GetCameraFrameSize(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, ref uint pnWidth, ref uint pnHeight, ref uint pnFrameBufferSize)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x600160D")]
		[Address(RVA = "0x8376B4", Offset = "0x8376B4", VA = "0x8376B4")]
		public EVRTrackedCameraError GetCameraIntrinsics(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, ref HmdVector2_t pFocalLength, ref HmdVector2_t pCenter)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x600160E")]
		[Address(RVA = "0x83770C", Offset = "0x83770C", VA = "0x83770C")]
		public EVRTrackedCameraError GetCameraProjection(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, float flZNear, float flZFar, ref HmdMatrix44_t pProjection)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x600160F")]
		[Address(RVA = "0x837774", Offset = "0x837774", VA = "0x837774")]
		public EVRTrackedCameraError AcquireVideoStreamingService(uint nDeviceIndex, ref ulong pHandle)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x6001610")]
		[Address(RVA = "0x8377BC", Offset = "0x8377BC", VA = "0x8377BC")]
		public EVRTrackedCameraError ReleaseVideoStreamingService(ulong hTrackedCamera)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x6001611")]
		[Address(RVA = "0x837804", Offset = "0x837804", VA = "0x837804")]
		public EVRTrackedCameraError GetVideoStreamFrameBuffer(ulong hTrackedCamera, EVRTrackedCameraFrameType eFrameType, IntPtr pFrameBuffer, uint nFrameBufferSize, ref CameraVideoStreamFrameHeader_t pFrameHeader, uint nFrameHeaderSize)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x6001612")]
		[Address(RVA = "0x837874", Offset = "0x837874", VA = "0x837874")]
		public EVRTrackedCameraError GetVideoStreamTextureSize(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, ref VRTextureBounds_t pTextureBounds, ref uint pnWidth, ref uint pnHeight)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x6001613")]
		[Address(RVA = "0x8378D8", Offset = "0x8378D8", VA = "0x8378D8")]
		public EVRTrackedCameraError GetVideoStreamTextureD3D11(ulong hTrackedCamera, EVRTrackedCameraFrameType eFrameType, IntPtr pD3D11DeviceOrResource, ref IntPtr ppD3D11ShaderResourceView, ref CameraVideoStreamFrameHeader_t pFrameHeader, uint nFrameHeaderSize)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x6001614")]
		[Address(RVA = "0x837948", Offset = "0x837948", VA = "0x837948")]
		public EVRTrackedCameraError GetVideoStreamTextureGL(ulong hTrackedCamera, EVRTrackedCameraFrameType eFrameType, ref uint pglTextureId, ref CameraVideoStreamFrameHeader_t pFrameHeader, uint nFrameHeaderSize)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x6001615")]
		[Address(RVA = "0x8379B4", Offset = "0x8379B4", VA = "0x8379B4")]
		public EVRTrackedCameraError ReleaseVideoStreamTextureGL(ulong hTrackedCamera, uint glTextureId)
		{
			return default(EVRTrackedCameraError);
		}
	}
	[Token(Token = "0x20002D1")]
	public class CVRApplications
	{
		[Token(Token = "0x40010BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IVRApplications FnTable;

		[Token(Token = "0x6001616")]
		[Address(RVA = "0x82A378", Offset = "0x82A378", VA = "0x82A378")]
		internal CVRApplications(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6001617")]
		[Address(RVA = "0x82A4C0", Offset = "0x82A4C0", VA = "0x82A4C0")]
		public EVRApplicationError AddApplicationManifest(string pchApplicationManifestFullPath, bool bTemporary)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x6001618")]
		[Address(RVA = "0x82A918", Offset = "0x82A918", VA = "0x82A918")]
		public EVRApplicationError RemoveApplicationManifest(string pchApplicationManifestFullPath)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x6001619")]
		[Address(RVA = "0x82A94C", Offset = "0x82A94C", VA = "0x82A94C")]
		public bool IsApplicationInstalled(string pchAppKey)
		{
			return default(bool);
		}

		[Token(Token = "0x600161A")]
		[Address(RVA = "0x82A980", Offset = "0x82A980", VA = "0x82A980")]
		public uint GetApplicationCount()
		{
			return default(uint);
		}

		[Token(Token = "0x600161B")]
		[Address(RVA = "0x82ABF4", Offset = "0x82ABF4", VA = "0x82ABF4")]
		public EVRApplicationError GetApplicationKeyByIndex(uint unApplicationIndex, StringBuilder pchAppKeyBuffer, uint unAppKeyBufferLen)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x600161C")]
		[Address(RVA = "0x82AEB4", Offset = "0x82AEB4", VA = "0x82AEB4")]
		public EVRApplicationError GetApplicationKeyByProcessId(uint unProcessId, StringBuilder pchAppKeyBuffer, uint unAppKeyBufferLen)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x600161D")]
		[Address(RVA = "0x82B174", Offset = "0x82B174", VA = "0x82B174")]
		public EVRApplicationError LaunchApplication(string pchAppKey)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x600161E")]
		[Address(RVA = "0x82B1A8", Offset = "0x82B1A8", VA = "0x82B1A8")]
		public EVRApplicationError LaunchTemplateApplication(string pchTemplateAppKey, string pchNewAppKey, AppOverrideKeys_t[] pKeys)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x600161F")]
		[Address(RVA = "0x82B20C", Offset = "0x82B20C", VA = "0x82B20C")]
		public EVRApplicationError LaunchApplicationFromMimeType(string pchMimeType, string pchArgs)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x6001620")]
		[Address(RVA = "0x82B248", Offset = "0x82B248", VA = "0x82B248")]
		public EVRApplicationError LaunchDashboardOverlay(string pchAppKey)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x6001621")]
		[Address(RVA = "0x82B27C", Offset = "0x82B27C", VA = "0x82B27C")]
		public bool CancelApplicationLaunch(string pchAppKey)
		{
			return default(bool);
		}

		[Token(Token = "0x6001622")]
		[Address(RVA = "0x82B6B4", Offset = "0x82B6B4", VA = "0x82B6B4")]
		public EVRApplicationError IdentifyApplication(uint unProcessId, string pchAppKey)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x6001623")]
		[Address(RVA = "0x82B6F0", Offset = "0x82B6F0", VA = "0x82B6F0")]
		public uint GetApplicationProcessId(string pchAppKey)
		{
			return default(uint);
		}

		[Token(Token = "0x6001624")]
		[Address(RVA = "0x82BB28", Offset = "0x82BB28", VA = "0x82BB28")]
		public string GetApplicationsErrorNameFromEnum(EVRApplicationError error)
		{
			return null;
		}

		[Token(Token = "0x6001625")]
		[Address(RVA = "0x82BE44", Offset = "0x82BE44", VA = "0x82BE44")]
		public uint GetApplicationPropertyString(string pchAppKey, EVRApplicationProperty eProperty, StringBuilder pchPropertyValueBuffer, uint unPropertyValueBufferLen, ref EVRApplicationError peError)
		{
			return default(uint);
		}

		[Token(Token = "0x6001626")]
		[Address(RVA = "0x82C310", Offset = "0x82C310", VA = "0x82C310")]
		public bool GetApplicationPropertyBool(string pchAppKey, EVRApplicationProperty eProperty, ref EVRApplicationError peError)
		{
			return default(bool);
		}

		[Token(Token = "0x6001627")]
		[Address(RVA = "0x82C78C", Offset = "0x82C78C", VA = "0x82C78C")]
		public ulong GetApplicationPropertyUint64(string pchAppKey, EVRApplicationProperty eProperty, ref EVRApplicationError peError)
		{
			return default(ulong);
		}

		[Token(Token = "0x6001628")]
		[Address(RVA = "0x82CC0C", Offset = "0x82CC0C", VA = "0x82CC0C")]
		public EVRApplicationError SetApplicationAutoLaunch(string pchAppKey, bool bAutoLaunch)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x6001629")]
		[Address(RVA = "0x82CC48", Offset = "0x82CC48", VA = "0x82CC48")]
		public bool GetApplicationAutoLaunch(string pchAppKey)
		{
			return default(bool);
		}

		[Token(Token = "0x600162A")]
		[Address(RVA = "0x82D080", Offset = "0x82D080", VA = "0x82D080")]
		public EVRApplicationError SetDefaultApplicationForMimeType(string pchAppKey, string pchMimeType)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x600162B")]
		[Address(RVA = "0x82D0BC", Offset = "0x82D0BC", VA = "0x82D0BC")]
		public bool GetDefaultApplicationForMimeType(string pchMimeType, StringBuilder pchAppKeyBuffer, uint unAppKeyBufferLen)
		{
			return default(bool);
		}

		[Token(Token = "0x600162C")]
		[Address(RVA = "0x82D538", Offset = "0x82D538", VA = "0x82D538")]
		public bool GetApplicationSupportedMimeTypes(string pchAppKey, StringBuilder pchMimeTypesBuffer, uint unMimeTypesBuffer)
		{
			return default(bool);
		}

		[Token(Token = "0x600162D")]
		[Address(RVA = "0x82D9B4", Offset = "0x82D9B4", VA = "0x82D9B4")]
		public uint GetApplicationsThatSupportMimeType(string pchMimeType, StringBuilder pchAppKeysThatSupportBuffer, uint unAppKeysThatSupportBuffer)
		{
			return default(uint);
		}

		[Token(Token = "0x600162E")]
		[Address(RVA = "0x82DE30", Offset = "0x82DE30", VA = "0x82DE30")]
		public uint GetApplicationLaunchArguments(uint unHandle, StringBuilder pchArgs, uint unArgs)
		{
			return default(uint);
		}

		[Token(Token = "0x600162F")]
		[Address(RVA = "0x82E0F0", Offset = "0x82E0F0", VA = "0x82E0F0")]
		public EVRApplicationError GetStartingApplication(StringBuilder pchAppKeyBuffer, uint unAppKeyBufferLen)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x6001630")]
		[Address(RVA = "0x82E548", Offset = "0x82E548", VA = "0x82E548")]
		public EVRApplicationTransitionState GetTransitionState()
		{
			return default(EVRApplicationTransitionState);
		}

		[Token(Token = "0x6001631")]
		[Address(RVA = "0x82E7BC", Offset = "0x82E7BC", VA = "0x82E7BC")]
		public EVRApplicationError PerformApplicationPrelaunchCheck(string pchAppKey)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x6001632")]
		[Address(RVA = "0x82E7F0", Offset = "0x82E7F0", VA = "0x82E7F0")]
		public string GetApplicationsTransitionStateNameFromEnum(EVRApplicationTransitionState state)
		{
			return null;
		}

		[Token(Token = "0x6001633")]
		[Address(RVA = "0x82EB0C", Offset = "0x82EB0C", VA = "0x82EB0C")]
		public bool IsQuitUserPromptRequested()
		{
			return default(bool);
		}

		[Token(Token = "0x6001634")]
		[Address(RVA = "0x82EB38", Offset = "0x82EB38", VA = "0x82EB38")]
		public EVRApplicationError LaunchInternalProcess(string pchBinaryPath, string pchArguments, string pchWorkingDirectory)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x6001635")]
		[Address(RVA = "0x82EB88", Offset = "0x82EB88", VA = "0x82EB88")]
		public uint GetCurrentSceneProcessId()
		{
			return default(uint);
		}
	}
	[Token(Token = "0x20002D2")]
	public class CVRChaperone
	{
		[Token(Token = "0x40010BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IVRChaperone FnTable;

		[Token(Token = "0x6001636")]
		[Address(RVA = "0x82EDFC", Offset = "0x82EDFC", VA = "0x82EDFC")]
		internal CVRChaperone(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6001637")]
		[Address(RVA = "0x82EF48", Offset = "0x82EF48", VA = "0x82EF48")]
		public ChaperoneCalibrationState GetCalibrationState()
		{
			return default(ChaperoneCalibrationState);
		}

		[Token(Token = "0x6001638")]
		[Address(RVA = "0x82EF74", Offset = "0x82EF74", VA = "0x82EF74")]
		public bool GetPlayAreaSize(ref float pSizeX, ref float pSizeZ)
		{
			return default(bool);
		}

		[Token(Token = "0x6001639")]
		[Address(RVA = "0x82EFBC", Offset = "0x82EFBC", VA = "0x82EFBC")]
		public bool GetPlayAreaRect(ref HmdQuad_t rect)
		{
			return default(bool);
		}

		[Token(Token = "0x600163A")]
		[Address(RVA = "0x82EFF0", Offset = "0x82EFF0", VA = "0x82EFF0")]
		public void ReloadInfo()
		{
		}

		[Token(Token = "0x600163B")]
		[Address(RVA = "0x82F01C", Offset = "0x82F01C", VA = "0x82F01C")]
		public void SetSceneColor(HmdColor_t color)
		{
		}

		[Token(Token = "0x600163C")]
		[Address(RVA = "0x82F074", Offset = "0x82F074", VA = "0x82F074")]
		public void GetBoundsColor(ref HmdColor_t pOutputColorArray, int nNumOutputColors, float flCollisionBoundsFadeDistance, ref HmdColor_t pOutputCameraColor)
		{
		}

		[Token(Token = "0x600163D")]
		[Address(RVA = "0x82F0CC", Offset = "0x82F0CC", VA = "0x82F0CC")]
		public bool AreBoundsVisible()
		{
			return default(bool);
		}

		[Token(Token = "0x600163E")]
		[Address(RVA = "0x82F0F8", Offset = "0x82F0F8", VA = "0x82F0F8")]
		public void ForceBoundsVisible(bool bForce)
		{
		}
	}
	[Token(Token = "0x20002D3")]
	public class CVRChaperoneSetup
	{
		[Token(Token = "0x40010C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IVRChaperoneSetup FnTable;

		[Token(Token = "0x600163F")]
		[Address(RVA = "0x82F12C", Offset = "0x82F12C", VA = "0x82F12C")]
		internal CVRChaperoneSetup(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6001640")]
		[Address(RVA = "0x82F274", Offset = "0x82F274", VA = "0x82F274")]
		public bool CommitWorkingCopy(EChaperoneConfigFile configFile)
		{
			return default(bool);
		}

		[Token(Token = "0x6001641")]
		[Address(RVA = "0x82F2A8", Offset = "0x82F2A8", VA = "0x82F2A8")]
		public void RevertWorkingCopy()
		{
		}

		[Token(Token = "0x6001642")]
		[Address(RVA = "0x82F2D4", Offset = "0x82F2D4", VA = "0x82F2D4")]
		public bool GetWorkingPlayAreaSize(ref float pSizeX, ref float pSizeZ)
		{
			return default(bool);
		}

		[Token(Token = "0x6001643")]
		[Address(RVA = "0x82F31C", Offset = "0x82F31C", VA = "0x82F31C")]
		public bool GetWorkingPlayAreaRect(ref HmdQuad_t rect)
		{
			return default(bool);
		}

		[Token(Token = "0x6001644")]
		[Address(RVA = "0x82F350", Offset = "0x82F350", VA = "0x82F350")]
		public bool GetWorkingCollisionBoundsInfo(out HmdQuad_t[] pQuadsBuffer)
		{
			return default(bool);
		}

		[Token(Token = "0x6001645")]
		[Address(RVA = "0x82F420", Offset = "0x82F420", VA = "0x82F420")]
		public bool GetLiveCollisionBoundsInfo(out HmdQuad_t[] pQuadsBuffer)
		{
			return default(bool);
		}

		[Token(Token = "0x6001646")]
		[Address(RVA = "0x82F4F0", Offset = "0x82F4F0", VA = "0x82F4F0")]
		public bool GetWorkingSeatedZeroPoseToRawTrackingPose(ref HmdMatrix34_t pmatSeatedZeroPoseToRawTrackingPose)
		{
			return default(bool);
		}

		[Token(Token = "0x6001647")]
		[Address(RVA = "0x82F524", Offset = "0x82F524", VA = "0x82F524")]
		public bool GetWorkingStandingZeroPoseToRawTrackingPose(ref HmdMatrix34_t pmatStandingZeroPoseToRawTrackingPose)
		{
			return default(bool);
		}

		[Token(Token = "0x6001648")]
		[Address(RVA = "0x82F558", Offset = "0x82F558", VA = "0x82F558")]
		public void SetWorkingPlayAreaSize(float sizeX, float sizeZ)
		{
		}

		[Token(Token = "0x6001649")]
		[Address(RVA = "0x82F594", Offset = "0x82F594", VA = "0x82F594")]
		public void SetWorkingCollisionBoundsInfo(HmdQuad_t[] pQuadsBuffer)
		{
		}

		[Token(Token = "0x600164A")]
		[Address(RVA = "0x82F5DC", Offset = "0x82F5DC", VA = "0x82F5DC")]
		public void SetWorkingSeatedZeroPoseToRawTrackingPose(ref HmdMatrix34_t pMatSeatedZeroPoseToRawTrackingPose)
		{
		}

		[Token(Token = "0x600164B")]
		[Address(RVA = "0x82F610", Offset = "0x82F610", VA = "0x82F610")]
		public void SetWorkingStandingZeroPoseToRawTrackingPose(ref HmdMatrix34_t pMatStandingZeroPoseToRawTrackingPose)
		{
		}

		[Token(Token = "0x600164C")]
		[Address(RVA = "0x82F644", Offset = "0x82F644", VA = "0x82F644")]
		public void ReloadFromDisk(EChaperoneConfigFile configFile)
		{
		}

		[Token(Token = "0x600164D")]
		[Address(RVA = "0x82F678", Offset = "0x82F678", VA = "0x82F678")]
		public bool GetLiveSeatedZeroPoseToRawTrackingPose(ref HmdMatrix34_t pmatSeatedZeroPoseToRawTrackingPose)
		{
			return default(bool);
		}

		[Token(Token = "0x600164E")]
		[Address(RVA = "0x82F6AC", Offset = "0x82F6AC", VA = "0x82F6AC")]
		public void SetWorkingCollisionBoundsTagsInfo(byte[] pTagsBuffer)
		{
		}

		[Token(Token = "0x600164F")]
		[Address(RVA = "0x82F6F4", Offset = "0x82F6F4", VA = "0x82F6F4")]
		public bool GetLiveCollisionBoundsTagsInfo(out byte[] pTagsBuffer)
		{
			return default(bool);
		}

		[Token(Token = "0x6001650")]
		[Address(RVA = "0x82F7C4", Offset = "0x82F7C4", VA = "0x82F7C4")]
		public bool SetWorkingPhysicalBoundsInfo(HmdQuad_t[] pQuadsBuffer)
		{
			return default(bool);
		}

		[Token(Token = "0x6001651")]
		[Address(RVA = "0x82F80C", Offset = "0x82F80C", VA = "0x82F80C")]
		public bool GetLivePhysicalBoundsInfo(out HmdQuad_t[] pQuadsBuffer)
		{
			return default(bool);
		}

		[Token(Token = "0x6001652")]
		[Address(RVA = "0x82F8DC", Offset = "0x82F8DC", VA = "0x82F8DC")]
		public bool ExportLiveToBuffer(StringBuilder pBuffer, ref uint pnBufferLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6001653")]
		[Address(RVA = "0x82F920", Offset = "0x82F920", VA = "0x82F920")]
		public bool ImportFromBufferToWorking(string pBuffer, uint nImportFlags)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20002D4")]
	public class CVRCompositor
	{
		[Token(Token = "0x40010C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IVRCompositor FnTable;

		[Token(Token = "0x6001654")]
		[Address(RVA = "0x82F95C", Offset = "0x82F95C", VA = "0x82F95C")]
		internal CVRCompositor(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6001655")]
		[Address(RVA = "0x82FAA4", Offset = "0x82FAA4", VA = "0x82FAA4")]
		public void SetTrackingSpace(ETrackingUniverseOrigin eOrigin)
		{
		}

		[Token(Token = "0x6001656")]
		[Address(RVA = "0x82FAD8", Offset = "0x82FAD8", VA = "0x82FAD8")]
		public ETrackingUniverseOrigin GetTrackingSpace()
		{
			return default(ETrackingUniverseOrigin);
		}

		[Token(Token = "0x6001657")]
		[Address(RVA = "0x82FB04", Offset = "0x82FB04", VA = "0x82FB04")]
		public EVRCompositorError WaitGetPoses(TrackedDevicePose_t[] pRenderPoseArray, TrackedDevicePose_t[] pGamePoseArray)
		{
			return default(EVRCompositorError);
		}

		[Token(Token = "0x6001658")]
		[Address(RVA = "0x82FB74", Offset = "0x82FB74", VA = "0x82FB74")]
		public EVRCompositorError GetLastPoses(TrackedDevicePose_t[] pRenderPoseArray, TrackedDevicePose_t[] pGamePoseArray)
		{
			return default(EVRCompositorError);
		}

		[Token(Token = "0x6001659")]
		[Address(RVA = "0x82FBE4", Offset = "0x82FBE4", VA = "0x82FBE4")]
		public EVRCompositorError GetLastPoseForTrackedDeviceIndex(uint unDeviceIndex, ref TrackedDevicePose_t pOutputPose, ref TrackedDevicePose_t pOutputGamePose)
		{
			return default(EVRCompositorError);
		}

		[Token(Token = "0x600165A")]
		[Address(RVA = "0x82FC34", Offset = "0x82FC34", VA = "0x82FC34")]
		public EVRCompositorError Submit(EVREye eEye, ref Texture_t pTexture, ref VRTextureBounds_t pBounds, EVRSubmitFlags nSubmitFlags)
		{
			return default(EVRCompositorError);
		}

		[Token(Token = "0x600165B")]
		[Address(RVA = "0x82FC8C", Offset = "0x82FC8C", VA = "0x82FC8C")]
		public void ClearLastSubmittedFrame()
		{
		}

		[Token(Token = "0x600165C")]
		[Address(RVA = "0x82FCB8", Offset = "0x82FCB8", VA = "0x82FCB8")]
		public void PostPresentHandoff()
		{
		}

		[Token(Token = "0x600165D")]
		[Address(RVA = "0x82FCE4", Offset = "0x82FCE4", VA = "0x82FCE4")]
		public bool GetFrameTiming(ref Compositor_FrameTiming pTiming, uint unFramesAgo)
		{
			return default(bool);
		}

		[Token(Token = "0x600165E")]
		[Address(RVA = "0x82FD20", Offset = "0x82FD20", VA = "0x82FD20")]
		public uint GetFrameTimings(ref Compositor_FrameTiming pTiming, uint nFrames)
		{
			return default(uint);
		}

		[Token(Token = "0x600165F")]
		[Address(RVA = "0x82FD5C", Offset = "0x82FD5C", VA = "0x82FD5C")]
		public float GetFrameTimeRemaining()
		{
			return default(float);
		}

		[Token(Token = "0x6001660")]
		[Address(RVA = "0x82FD88", Offset = "0x82FD88", VA = "0x82FD88")]
		public void GetCumulativeStats(ref Compositor_CumulativeStats pStats, uint nStatsSizeInBytes)
		{
		}

		[Token(Token = "0x6001661")]
		[Address(RVA = "0x82FDC4", Offset = "0x82FDC4", VA = "0x82FDC4")]
		public void FadeToColor(float fSeconds, float fRed, float fGreen, float fBlue, float fAlpha, bool bBackground)
		{
		}

		[Token(Token = "0x6001662")]
		[Address(RVA = "0x82FE34", Offset = "0x82FE34", VA = "0x82FE34")]
		public HmdColor_t GetCurrentFadeColor(bool bBackground)
		{
			return default(HmdColor_t);
		}

		[Token(Token = "0x6001663")]
		[Address(RVA = "0x82FE70", Offset = "0x82FE70", VA = "0x82FE70")]
		public void FadeGrid(float fSeconds, bool bFadeIn)
		{
		}

		[Token(Token = "0x6001664")]
		[Address(RVA = "0x82FEAC", Offset = "0x82FEAC", VA = "0x82FEAC")]
		public float GetCurrentGridAlpha()
		{
			return default(float);
		}

		[Token(Token = "0x6001665")]
		[Address(RVA = "0x82FED8", Offset = "0x82FED8", VA = "0x82FED8")]
		public EVRCompositorError SetSkyboxOverride(Texture_t[] pTextures)
		{
			return default(EVRCompositorError);
		}

		[Token(Token = "0x6001666")]
		[Address(RVA = "0x82FF20", Offset = "0x82FF20", VA = "0x82FF20")]
		public void ClearSkyboxOverride()
		{
		}

		[Token(Token = "0x6001667")]
		[Address(RVA = "0x82FF4C", Offset = "0x82FF4C", VA = "0x82FF4C")]
		public void CompositorBringToFront()
		{
		}

		[Token(Token = "0x6001668")]
		[Address(RVA = "0x82FF78", Offset = "0x82FF78", VA = "0x82FF78")]
		public void CompositorGoToBack()
		{
		}

		[Token(Token = "0x6001669")]
		[Address(RVA = "0x82FFA4", Offset = "0x82FFA4", VA = "0x82FFA4")]
		public void CompositorQuit()
		{
		}

		[Token(Token = "0x600166A")]
		[Address(RVA = "0x82FFD0", Offset = "0x82FFD0", VA = "0x82FFD0")]
		public bool IsFullscreen()
		{
			return default(bool);
		}

		[Token(Token = "0x600166B")]
		[Address(RVA = "0x82FFFC", Offset = "0x82FFFC", VA = "0x82FFFC")]
		public uint GetCurrentSceneFocusProcess()
		{
			return default(uint);
		}

		[Token(Token = "0x600166C")]
		[Address(RVA = "0x830028", Offset = "0x830028", VA = "0x830028")]
		public uint GetLastFrameRenderer()
		{
			return default(uint);
		}

		[Token(Token = "0x600166D")]
		[Address(RVA = "0x830054", Offset = "0x830054", VA = "0x830054")]
		public bool CanRenderScene()
		{
			return default(bool);
		}

		[Token(Token = "0x600166E")]
		[Address(RVA = "0x830080", Offset = "0x830080", VA = "0x830080")]
		public void ShowMirrorWindow()
		{
		}

		[Token(Token = "0x600166F")]
		[Address(RVA = "0x8300AC", Offset = "0x8300AC", VA = "0x8300AC")]
		public void HideMirrorWindow()
		{
		}

		[Token(Token = "0x6001670")]
		[Address(RVA = "0x8300D8", Offset = "0x8300D8", VA = "0x8300D8")]
		public bool IsMirrorWindowVisible()
		{
			return default(bool);
		}

		[Token(Token = "0x6001671")]
		[Address(RVA = "0x830104", Offset = "0x830104", VA = "0x830104")]
		public void CompositorDumpImages()
		{
		}

		[Token(Token = "0x6001672")]
		[Address(RVA = "0x830130", Offset = "0x830130", VA = "0x830130")]
		public bool ShouldAppRenderWithLowResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6001673")]
		[Address(RVA = "0x83015C", Offset = "0x83015C", VA = "0x83015C")]
		public void ForceInterleavedReprojectionOn(bool bOverride)
		{
		}

		[Token(Token = "0x6001674")]
		[Address(RVA = "0x830190", Offset = "0x830190", VA = "0x830190")]
		public void ForceReconnectProcess()
		{
		}

		[Token(Token = "0x6001675")]
		[Address(RVA = "0x8301BC", Offset = "0x8301BC", VA = "0x8301BC")]
		public void SuspendRendering(bool bSuspend)
		{
		}

		[Token(Token = "0x6001676")]
		[Address(RVA = "0x8301F0", Offset = "0x8301F0", VA = "0x8301F0")]
		public EVRCompositorError GetMirrorTextureD3D11(EVREye eEye, IntPtr pD3D11DeviceOrResource, ref IntPtr ppD3D11ShaderResourceView)
		{
			return default(EVRCompositorError);
		}

		[Token(Token = "0x6001677")]
		[Address(RVA = "0x830240", Offset = "0x830240", VA = "0x830240")]
		public void ReleaseMirrorTextureD3D11(IntPtr pD3D11ShaderResourceView)
		{
		}

		[Token(Token = "0x6001678")]
		[Address(RVA = "0x830274", Offset = "0x830274", VA = "0x830274")]
		public EVRCompositorError GetMirrorTextureGL(EVREye eEye, ref uint pglTextureId, IntPtr pglSharedTextureHandle)
		{
			return default(EVRCompositorError);
		}

		[Token(Token = "0x6001679")]
		[Address(RVA = "0x8302C8", Offset = "0x8302C8", VA = "0x8302C8")]
		public bool ReleaseSharedGLTexture(uint glTextureId, IntPtr glSharedTextureHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x600167A")]
		[Address(RVA = "0x830304", Offset = "0x830304", VA = "0x830304")]
		public void LockGLSharedTextureForAccess(IntPtr glSharedTextureHandle)
		{
		}

		[Token(Token = "0x600167B")]
		[Address(RVA = "0x830338", Offset = "0x830338", VA = "0x830338")]
		public void UnlockGLSharedTextureForAccess(IntPtr glSharedTextureHandle)
		{
		}

		[Token(Token = "0x600167C")]
		[Address(RVA = "0x83036C", Offset = "0x83036C", VA = "0x83036C")]
		public uint GetVulkanInstanceExtensionsRequired(StringBuilder pchValue, uint unBufferSize)
		{
			return default(uint);
		}

		[Token(Token = "0x600167D")]
		[Address(RVA = "0x8303A8", Offset = "0x8303A8", VA = "0x8303A8")]
		public uint GetVulkanDeviceExtensionsRequired(IntPtr pPhysicalDevice, StringBuilder pchValue, uint unBufferSize)
		{
			return default(uint);
		}

		[Token(Token = "0x600167E")]
		[Address(RVA = "0x8303F8", Offset = "0x8303F8", VA = "0x8303F8")]
		public void SetExplicitTimingMode(EVRCompositorTimingMode eTimingMode)
		{
		}

		[Token(Token = "0x600167F")]
		[Address(RVA = "0x83042C", Offset = "0x83042C", VA = "0x83042C")]
		public EVRCompositorError SubmitExplicitTimingData()
		{
			return default(EVRCompositorError);
		}
	}
	[Token(Token = "0x20002D5")]
	public class CVROverlay
	{
		[Token(Token = "0x20006ED")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC7DC", Offset = "0x2EC7DC")]
		internal delegate bool _PollNextOverlayEventPacked(ulong ulOverlayHandle, ref VREvent_t_Packed pEvent, uint uncbVREvent);

		[StructLayout(2)]
		[Token(Token = "0x20006EE")]
		private struct PollNextOverlayEventUnion
		{
			[Token(Token = "0x4002005")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IVROverlay._PollNextOverlayEvent pPollNextOverlayEvent;

			[Token(Token = "0x4002006")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public _PollNextOverlayEventPacked pPollNextOverlayEventPacked;
		}

		[Token(Token = "0x40010C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IVROverlay FnTable;

		[Token(Token = "0x6001680")]
		[Address(RVA = "0x8315FC", Offset = "0x8315FC", VA = "0x8315FC")]
		internal CVROverlay(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6001681")]
		[Address(RVA = "0x831744", Offset = "0x831744", VA = "0x831744")]
		public EVROverlayError FindOverlay(string pchOverlayKey, ref ulong pOverlayHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001682")]
		[Address(RVA = "0x83178C", Offset = "0x83178C", VA = "0x83178C")]
		public EVROverlayError CreateOverlay(string pchOverlayKey, string pchOverlayName, ref ulong pOverlayHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001683")]
		[Address(RVA = "0x8317E4", Offset = "0x8317E4", VA = "0x8317E4")]
		public EVROverlayError DestroyOverlay(ulong ulOverlayHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001684")]
		[Address(RVA = "0x83182C", Offset = "0x83182C", VA = "0x83182C")]
		public EVROverlayError SetHighQualityOverlay(ulong ulOverlayHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001685")]
		[Address(RVA = "0x831874", Offset = "0x831874", VA = "0x831874")]
		public ulong GetHighQualityOverlay()
		{
			return default(ulong);
		}

		[Token(Token = "0x6001686")]
		[Address(RVA = "0x8318A0", Offset = "0x8318A0", VA = "0x8318A0")]
		public uint GetOverlayKey(ulong ulOverlayHandle, StringBuilder pchValue, uint unBufferSize, ref EVROverlayError pError)
		{
			return default(uint);
		}

		[Token(Token = "0x6001687")]
		[Address(RVA = "0x8318FC", Offset = "0x8318FC", VA = "0x8318FC")]
		public uint GetOverlayName(ulong ulOverlayHandle, StringBuilder pchValue, uint unBufferSize, ref EVROverlayError pError)
		{
			return default(uint);
		}

		[Token(Token = "0x6001688")]
		[Address(RVA = "0x831958", Offset = "0x831958", VA = "0x831958")]
		public EVROverlayError SetOverlayName(ulong ulOverlayHandle, string pchName)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001689")]
		[Address(RVA = "0x8319A8", Offset = "0x8319A8", VA = "0x8319A8")]
		public EVROverlayError GetOverlayImageData(ulong ulOverlayHandle, IntPtr pvBuffer, uint unBufferSize, ref uint punWidth, ref uint punHeight)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600168A")]
		[Address(RVA = "0x831A10", Offset = "0x831A10", VA = "0x831A10")]
		public string GetOverlayErrorNameFromEnum(EVROverlayError error)
		{
			return null;
		}

		[Token(Token = "0x600168B")]
		[Address(RVA = "0x831AC0", Offset = "0x831AC0", VA = "0x831AC0")]
		public EVROverlayError SetOverlayRenderingPid(ulong ulOverlayHandle, uint unPID)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600168C")]
		[Address(RVA = "0x831B10", Offset = "0x831B10", VA = "0x831B10")]
		public uint GetOverlayRenderingPid(ulong ulOverlayHandle)
		{
			return default(uint);
		}

		[Token(Token = "0x600168D")]
		[Address(RVA = "0x831B58", Offset = "0x831B58", VA = "0x831B58")]
		public EVROverlayError SetOverlayFlag(ulong ulOverlayHandle, VROverlayFlags eOverlayFlag, bool bEnabled)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600168E")]
		[Address(RVA = "0x831BAC", Offset = "0x831BAC", VA = "0x831BAC")]
		public EVROverlayError GetOverlayFlag(ulong ulOverlayHandle, VROverlayFlags eOverlayFlag, ref bool pbEnabled)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600168F")]
		[Address(RVA = "0x831C08", Offset = "0x831C08", VA = "0x831C08")]
		public EVROverlayError SetOverlayColor(ulong ulOverlayHandle, float fRed, float fGreen, float fBlue)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001690")]
		[Address(RVA = "0x831C70", Offset = "0x831C70", VA = "0x831C70")]
		public EVROverlayError GetOverlayColor(ulong ulOverlayHandle, ref float pfRed, ref float pfGreen, ref float pfBlue)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001691")]
		[Address(RVA = "0x831CD8", Offset = "0x831CD8", VA = "0x831CD8")]
		public EVROverlayError SetOverlayAlpha(ulong ulOverlayHandle, float fAlpha)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001692")]
		[Address(RVA = "0x831D30", Offset = "0x831D30", VA = "0x831D30")]
		public EVROverlayError GetOverlayAlpha(ulong ulOverlayHandle, ref float pfAlpha)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001693")]
		[Address(RVA = "0x831D80", Offset = "0x831D80", VA = "0x831D80")]
		public EVROverlayError SetOverlayTexelAspect(ulong ulOverlayHandle, float fTexelAspect)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001694")]
		[Address(RVA = "0x831DD8", Offset = "0x831DD8", VA = "0x831DD8")]
		public EVROverlayError GetOverlayTexelAspect(ulong ulOverlayHandle, ref float pfTexelAspect)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001695")]
		[Address(RVA = "0x831E28", Offset = "0x831E28", VA = "0x831E28")]
		public EVROverlayError SetOverlaySortOrder(ulong ulOverlayHandle, uint unSortOrder)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001696")]
		[Address(RVA = "0x831E78", Offset = "0x831E78", VA = "0x831E78")]
		public EVROverlayError GetOverlaySortOrder(ulong ulOverlayHandle, ref uint punSortOrder)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001697")]
		[Address(RVA = "0x831EC8", Offset = "0x831EC8", VA = "0x831EC8")]
		public EVROverlayError SetOverlayWidthInMeters(ulong ulOverlayHandle, float fWidthInMeters)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001698")]
		[Address(RVA = "0x831F20", Offset = "0x831F20", VA = "0x831F20")]
		public EVROverlayError GetOverlayWidthInMeters(ulong ulOverlayHandle, ref float pfWidthInMeters)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x6001699")]
		[Address(RVA = "0x831F70", Offset = "0x831F70", VA = "0x831F70")]
		public EVROverlayError SetOverlayAutoCurveDistanceRangeInMeters(ulong ulOverlayHandle, float fMinDistanceInMeters, float fMaxDistanceInMeters)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600169A")]
		[Address(RVA = "0x831FD0", Offset = "0x831FD0", VA = "0x831FD0")]
		public EVROverlayError GetOverlayAutoCurveDistanceRangeInMeters(ulong ulOverlayHandle, ref float pfMinDistanceInMeters, ref float pfMaxDistanceInMeters)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600169B")]
		[Address(RVA = "0x832030", Offset = "0x832030", VA = "0x832030")]
		public EVROverlayError SetOverlayTextureColorSpace(ulong ulOverlayHandle, EColorSpace eTextureColorSpace)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600169C")]
		[Address(RVA = "0x832080", Offset = "0x832080", VA = "0x832080")]
		public EVROverlayError GetOverlayTextureColorSpace(ulong ulOverlayHandle, ref EColorSpace peTextureColorSpace)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600169D")]
		[Address(RVA = "0x8320D0", Offset = "0x8320D0", VA = "0x8320D0")]
		public EVROverlayError SetOverlayTextureBounds(ulong ulOverlayHandle, ref VRTextureBounds_t pOverlayTextureBounds)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600169E")]
		[Address(RVA = "0x832120", Offset = "0x832120", VA = "0x832120")]
		public EVROverlayError GetOverlayTextureBounds(ulong ulOverlayHandle, ref VRTextureBounds_t pOverlayTextureBounds)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x600169F")]
		[Address(RVA = "0x832170", Offset = "0x832170", VA = "0x832170")]
		public uint GetOverlayRenderModel(ulong ulOverlayHandle, StringBuilder pchValue, uint unBufferSize, ref HmdColor_t pColor, ref EVROverlayError pError)
		{
			return default(uint);
		}

		[Token(Token = "0x60016A0")]
		[Address(RVA = "0x8321D4", Offset = "0x8321D4", VA = "0x8321D4")]
		public EVROverlayError SetOverlayRenderModel(ulong ulOverlayHandle, string pchRenderModel, ref HmdColor_t pColor)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60016A1")]
		[Address(RVA = "0x832228", Offset = "0x832228", VA = "0x832228")]
		public EVROverlayError GetOverlayTransformType(ulong ulOverlayHandle, ref VROverlayTransformType peTransformType)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60016A2")]
		[Address(RVA = "0x832278", Offset = "0x832278", VA = "0x832278")]
		public EVROverlayError SetOverlayTransformAbsolute(ulong ulOverlayHandle, ETrackingUniverseOrigin eTrackingOrigin, ref HmdMatrix34_t pmatTrackingOriginToOverlayTransform)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60016A3")]
		[Address(RVA = "0x8322CC", Offset = "0x8322CC", VA = "0x8322CC")]
		public EVROverlayError GetOverlayTransformAbsolute(ulong ulOverlayHandle, ref ETrackingUniverseOrigin peTrackingOrigin, ref HmdMatrix34_t pmatTrackingOriginToOverlayTransform)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60016A4")]
		[Address(RVA = "0x832320", Offset = "0x832320", VA = "0x832320")]
		public EVROverlayError SetOverlayTransformTrackedDeviceRelative(ulong ulOverlayHandle, uint unTrackedDevice, ref HmdMatrix34_t pmatTrackedDeviceToOverlayTransform)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60016A5")]
		[Address(RVA = "0x832374", Offset = "0x832374", VA = "0x832374")]
		public EVROverlayError GetOverlayTransformTrackedDeviceRelative(ulong ulOverlayHandle, ref uint punTrackedDevice, ref HmdMatrix34_t pmatTrackedDeviceToOverlayTransform)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60016A6")]
		[Address(RVA = "0x8323C8", Offset = "0x8323C8", VA = "0x8323C8")]
		public EVROverlayError SetOverlayTransformTrackedDeviceComponent(ulong ulOverlayHandle, uint unDeviceIndex, string pchComponentName)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60016A7")]
		[Address(RVA = "0x83241C", Offset = "0x83241C", VA = "0x83241C")]
		public EVROverlayError GetOverlayTransformTrackedDeviceComponent(ulong ulOverlayHandle, ref uint punDeviceIndex, StringBuilder pchComponentName, uint unComponentNameSize)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60016A8")]
		[Address(RVA = "0x83247C", Offset = "0x83247C", VA = "0x83247C")]
		public EVROverlayError GetOverlayTransformOverlayRelative(ulong ulOverlayHandle, ref ulong ulOverlayHandleParent, ref HmdMatrix34_t pmatParentOverlayToOverlayTransform)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60016A9")]
		[Address(RVA = "0x8324D8", Offset = "0x8324D8", VA = "0x8324D8")]
		public EVROverlayError SetOverlayTransformOverlayRelative(ulong ulOverlayHandle, ulong ulOverlayHandleParent, ref HmdMatrix34_t pmatParentOverlayToOverlayTransform)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60016AA")]
		[Address(RVA = "0x83252C", Offset = "0x83252C", VA = "0x83252C")]
		public EVROverlayError ShowOverlay(ulong ulOverlayHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60016AB")]
		[Address(RVA = "0x832574", Offset = "0x832574", VA = "0x832574")]
		public EVROverlayError HideOverlay(ulong ulOverlayHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60016AC")]
		[Address(RVA = "0x8325BC", Offset = "0x8325BC", VA = "0x8325BC")]
		public bool IsOverlayVisible(ulong ulOverlayHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x60016AD")]
		[Address(RVA = "0x832604", Offset = "0x832604", VA = "0x832604")]
		public EVROverlayError GetTransformForOverlayCoordinates(ulong ulOverlayHandle, ETrackingUniverseOrigin eTrackingOrigin, HmdVector2_t coordinatesInOverlay, ref HmdMatrix34_t pmatTransform)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60016AE")]
		[Address(RVA = "0x832668", Offset = "0x832668", VA = "0x832668")]
		public bool PollNextOverlayEvent(ulong ulOverlayHandle, ref VREvent_t pEvent, uint uncbVREvent)
		{
			return default(bool);
		}

		[Token(Token = "0x60016AF")]
		[Address(RVA = "0x832B0C", Offset = "0x832B0C", VA = "0x832B0C")]
		public EVROverlayError GetOverlayInputMethod(ulong ulOverlayHandle, ref VROverlayInputMethod peInputMethod)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60016B0")]
		[Address(RVA = "0x832B5C", Offset = "0x832B5C", VA = "0x832B5C")]
		public EVROverlayError SetOverlayInputMethod(ulong ulOverlayHandle, VROverlayInputMethod eInputMethod)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60016B1")]
		[Address(RVA = "0x832BAC", Offset = "0x832BAC", VA = "0x832BAC")]
		public EVROverlayError GetOverlayMouseScale(ulong ulOverlayHandle, ref HmdVector2_t pvecMouseScale)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60016B2")]
		[Address(RVA = "0x832BFC", Offset = "0x832BFC", VA = "0x832BFC")]
		public EVROverlayError SetOverlayMouseScale(ulong ulOverlayHandle, ref HmdVector2_t pvecMouseScale)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60016B3")]
		[Address(RVA = "0x832C4C", Offset = "0x832C4C", VA = "0x832C4C")]
		public bool ComputeOverlayIntersection(ulong ulOverlayHandle, ref VROverlayIntersectionParams_t pParams, ref VROverlayIntersectionResults_t pResults)
		{
			return default(bool);
		}

		[Token(Token = "0x60016B4")]
		[Address(RVA = "0x832CA0", Offset = "0x832CA0", VA = "0x832CA0")]
		public bool IsHoverTargetOverlay(ulong ulOverlayHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x60016B5")]
		[Address(RVA = "0x832CE8", Offset = "0x832CE8", VA = "0x832CE8")]
		public ulong GetGamepadFocusOverlay()
		{
			return default(ulong);
		}

		[Token(Token = "0x60016B6")]
		[Address(RVA = "0x832D14", Offset = "0x832D14", VA = "0x832D14")]
		public EVROverlayError SetGamepadFocusOverlay(ulong ulNewFocusOverlay)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60016B7")]
		[Address(RVA = "0x832D5C", Offset = "0x832D5C", VA = "0x832D5C")]
		public EVROverlayError SetOverlayNeighbor(EOverlayDirection eDirection, ulong ulFrom, ulong ulTo)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60016B8")]
		[Address(RVA = "0x832DBC", Offset = "0x832DBC", VA = "0x832DBC")]
		public EVROverlayError MoveGamepadFocusToNeighbor(EOverlayDirection eDirection, ulong ulFrom)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60016B9")]
		[Address(RVA = "0x832E0C", Offset = "0x832E0C", VA = "0x832E0C")]
		public EVROverlayError SetOverlayDualAnalogTransform(ulong ulOverlay, EDualAnalogWhich eWhich, IntPtr vCenter, float fRadius)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60016BA")]
		[Address(RVA = "0x832E70", Offset = "0x832E70", VA = "0x832E70")]
		public EVROverlayError GetOverlayDualAnalogTransform(ulong ulOverlay, EDualAnalogWhich eWhich, ref HmdVector2_t pvCenter, ref float pfRadius)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60016BB")]
		[Address(RVA = "0x832ED0", Offset = "0x832ED0", VA = "0x832ED0")]
		public EVROverlayError SetOverlayTexture(ulong ulOverlayHandle, ref Texture_t pTexture)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60016BC")]
		[Address(RVA = "0x832F20", Offset = "0x832F20", VA = "0x832F20")]
		public EVROverlayError ClearOverlayTexture(ulong ulOverlayHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60016BD")]
		[Address(RVA = "0x832F68", Offset = "0x832F68", VA = "0x832F68")]
		public EVROverlayError SetOverlayRaw(ulong ulOverlayHandle, IntPtr pvBuffer, uint unWidth, uint unHeight, uint unDepth)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60016BE")]
		[Address(RVA = "0x832FCC", Offset = "0x832FCC", VA = "0x832FCC")]
		public EVROverlayError SetOverlayFromFile(ulong ulOverlayHandle, string pchFilePath)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60016BF")]
		[Address(RVA = "0x83301C", Offset = "0x83301C", VA = "0x83301C")]
		public EVROverlayError GetOverlayTexture(ulong ulOverlayHandle, ref IntPtr pNativeTextureHandle, IntPtr pNativeTextureRef, ref uint pWidth, ref uint pHeight, ref uint pNativeFormat, ref ETextureType pAPIType, ref EColorSpace pColorSpace, ref VRTextureBounds_t pTextureBounds)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60016C0")]
		[Address(RVA = "0x8330BC", Offset = "0x8330BC", VA = "0x8330BC")]
		public EVROverlayError ReleaseNativeOverlayHandle(ulong ulOverlayHandle, IntPtr pNativeTextureHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60016C1")]
		[Address(RVA = "0x83310C", Offset = "0x83310C", VA = "0x83310C")]
		public EVROverlayError GetOverlayTextureSize(ulong ulOverlayHandle, ref uint pWidth, ref uint pHeight)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60016C2")]
		[Address(RVA = "0x83316C", Offset = "0x83316C", VA = "0x83316C")]
		public EVROverlayError CreateDashboardOverlay(string pchOverlayKey, string pchOverlayFriendlyName, ref ulong pMainHandle, ref ulong pThumbnailHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60016C3")]
		[Address(RVA = "0x8331D0", Offset = "0x8331D0", VA = "0x8331D0")]
		public bool IsDashboardVisible()
		{
			return default(bool);
		}

		[Token(Token = "0x60016C4")]
		[Address(RVA = "0x8331FC", Offset = "0x8331FC", VA = "0x8331FC")]
		public bool IsActiveDashboardOverlay(ulong ulOverlayHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x60016C5")]
		[Address(RVA = "0x833244", Offset = "0x833244", VA = "0x833244")]
		public EVROverlayError SetDashboardOverlaySceneProcess(ulong ulOverlayHandle, uint unProcessId)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60016C6")]
		[Address(RVA = "0x833294", Offset = "0x833294", VA = "0x833294")]
		public EVROverlayError GetDashboardOverlaySceneProcess(ulong ulOverlayHandle, ref uint punProcessId)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60016C7")]
		[Address(RVA = "0x8332E4", Offset = "0x8332E4", VA = "0x8332E4")]
		public void ShowDashboard(string pchOverlayToShow)
		{
		}

		[Token(Token = "0x60016C8")]
		[Address(RVA = "0x833318", Offset = "0x833318", VA = "0x833318")]
		public uint GetPrimaryDashboardDevice()
		{
			return default(uint);
		}

		[Token(Token = "0x60016C9")]
		[Address(RVA = "0x833344", Offset = "0x833344", VA = "0x833344")]
		public EVROverlayError ShowKeyboard(int eInputMode, int eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText, bool bUseMinimalMode, ulong uUserValue)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60016CA")]
		[Address(RVA = "0x8333C4", Offset = "0x8333C4", VA = "0x8333C4")]
		public EVROverlayError ShowKeyboardForOverlay(ulong ulOverlayHandle, int eInputMode, int eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText, bool bUseMinimalMode, ulong uUserValue)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60016CB")]
		[Address(RVA = "0x833464", Offset = "0x833464", VA = "0x833464")]
		public uint GetKeyboardText(StringBuilder pchText, uint cchText)
		{
			return default(uint);
		}

		[Token(Token = "0x60016CC")]
		[Address(RVA = "0x8334A0", Offset = "0x8334A0", VA = "0x8334A0")]
		public void HideKeyboard()
		{
		}

		[Token(Token = "0x60016CD")]
		[Address(RVA = "0x8334CC", Offset = "0x8334CC", VA = "0x8334CC")]
		public void SetKeyboardTransformAbsolute(ETrackingUniverseOrigin eTrackingOrigin, ref HmdMatrix34_t pmatTrackingOriginToKeyboardTransform)
		{
		}

		[Token(Token = "0x60016CE")]
		[Address(RVA = "0x833508", Offset = "0x833508", VA = "0x833508")]
		public void SetKeyboardPositionForOverlay(ulong ulOverlayHandle, HmdRect2_t avoidRect)
		{
		}

		[Token(Token = "0x60016CF")]
		[Address(RVA = "0x83356C", Offset = "0x83356C", VA = "0x83356C")]
		public EVROverlayError SetOverlayIntersectionMask(ulong ulOverlayHandle, ref VROverlayIntersectionMaskPrimitive_t pMaskPrimitives, uint unNumMaskPrimitives, uint unPrimitiveSize)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60016D0")]
		[Address(RVA = "0x8335C8", Offset = "0x8335C8", VA = "0x8335C8")]
		public EVROverlayError GetOverlayFlags(ulong ulOverlayHandle, ref uint pFlags)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60016D1")]
		[Address(RVA = "0x833618", Offset = "0x833618", VA = "0x833618")]
		public VRMessageOverlayResponse ShowMessageOverlay(string pchText, string pchCaption, string pchButton0Text, string pchButton1Text, string pchButton2Text, string pchButton3Text)
		{
			return default(VRMessageOverlayResponse);
		}

		[Token(Token = "0x60016D2")]
		[Address(RVA = "0x833680", Offset = "0x833680", VA = "0x833680")]
		public void CloseMessageOverlay()
		{
		}
	}
	[Token(Token = "0x20002D6")]
	public class CVRRenderModels
	{
		[Token(Token = "0x20006EF")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x2EC7F0", Offset = "0x2EC7F0")]
		internal delegate bool _GetComponentStatePacked(string pchRenderModelName, string pchComponentName, ref VRControllerState_t_Packed pControllerState, ref RenderModel_ControllerMode_State_t pState, ref RenderModel_ComponentState_t pComponentState);

		[StructLayout(2)]
		[Token(Token = "0x20006F0")]
		private struct GetComponentStateUnion
		{
			[Token(Token = "0x4002007")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IVRRenderModels._GetComponentState pGetComponentState;

			[Token(Token = "0x4002008")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public _GetComponentStatePacked pGetComponentStatePacked;
		}

		[Token(Token = "0x40010C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IVRRenderModels FnTable;

		[Token(Token = "0x60016D3")]
		[Address(RVA = "0x8337E4", Offset = "0x8337E4", VA = "0x8337E4")]
		internal CVRRenderModels(IntPtr pInterface)
		{
		}

		[Token(Token = "0x60016D4")]
		[Address(RVA = "0x83392C", Offset = "0x83392C", VA = "0x83392C")]
		public EVRRenderModelError LoadRenderModel_Async(string pchRenderModelName, ref IntPtr ppRenderModel)
		{
			return default(EVRRenderModelError);
		}

		[Token(Token = "0x60016D5")]
		[Address(RVA = "0x833968", Offset = "0x833968", VA = "0x833968")]
		public void FreeRenderModel(IntPtr pRenderModel)
		{
		}

		[Token(Token = "0x60016D6")]
		[Address(RVA = "0x83399C", Offset = "0x83399C", VA = "0x83399C")]
		public EVRRenderModelError LoadTexture_Async(int textureId, ref IntPtr ppTexture)
		{
			return default(EVRRenderModelError);
		}

		[Token(Token = "0x60016D7")]
		[Address(RVA = "0x8339D8", Offset = "0x8339D8", VA = "0x8339D8")]
		public void FreeTexture(IntPtr pTexture)
		{
		}

		[Token(Token = "0x60016D8")]
		[Address(RVA = "0x833A0C", Offset = "0x833A0C", VA = "0x833A0C")]
		public EVRRenderModelError LoadTextureD3D11_Async(int textureId, IntPtr pD3D11Device, ref IntPtr ppD3D11Texture2D)
		{
			return default(EVRRenderModelError);
		}

		[Token(Token = "0x60016D9")]
		[Address(RVA = "0x833A5C", Offset = "0x833A5C", VA = "0x833A5C")]
		public EVRRenderModelError LoadIntoTextureD3D11_Async(int textureId, IntPtr pDstTexture)
		{
			return default(EVRRenderModelError);
		}

		[Token(Token = "0x60016DA")]
		[Address(RVA = "0x833A98", Offset = "0x833A98", VA = "0x833A98")]
		public void FreeTextureD3D11(IntPtr pD3D11Texture2D)
		{
		}

		[Token(Token = "0x60016DB")]
		[Address(RVA = "0x833ACC", Offset = "0x833ACC", VA = "0x833ACC")]
		public uint GetRenderModelName(uint unRenderModelIndex, StringBuilder pchRenderModelName, uint unRenderModelNameLen)
		{
			return default(uint);
		}

		[Token(Token = "0x60016DC")]
		[Address(RVA = "0x833B1C", Offset = "0x833B1C", VA = "0x833B1C")]
		public uint GetRenderModelCount()
		{
			return default(uint);
		}

		[Token(Token = "0x60016DD")]
		[Address(RVA = "0x833B48", Offset = "0x833B48", VA = "0x833B48")]
		public uint GetComponentCount(string pchRenderModelName)
		{
			return default(uint);
		}

		[Token(Token = "0x60016DE")]
		[Address(RVA = "0x833B7C", Offset = "0x833B7C", VA = "0x833B7C")]
		public uint GetComponentName(string pchRenderModelName, uint unComponentIndex, StringBuilder pchComponentName, uint unComponentNameLen)
		{
			return default(uint);
		}

		[Token(Token = "0x60016DF")]
		[Address(RVA = "0x833BD4", Offset = "0x833BD4", VA = "0x833BD4")]
		public ulong GetComponentButtonMask(string pchRenderModelName, string pchComponentName)
		{
			return default(ulong);
		}

		[Token(Token = "0x60016E0")]
		[Address(RVA = "0x833C10", Offset = "0x833C10", VA = "0x833C10")]
		public uint GetComponentRenderModelName(string pchRenderModelName, string pchComponentName, StringBuilder pchComponentRenderModelName, uint unComponentRenderModelNameLen)
		{
			return default(uint);
		}

		[Token(Token = "0x60016E1")]
		[Address(RVA = "0x833C68", Offset = "0x833C68", VA = "0x833C68")]
		public bool GetComponentStateForDevicePath(string pchRenderModelName, string pchComponentName, ulong devicePath, ref RenderModel_ControllerMode_State_t pState, ref RenderModel_ComponentState_t pComponentState)
		{
			return default(bool);
		}

		[Token(Token = "0x60016E2")]
		[Address(RVA = "0x833CC4", Offset = "0x833CC4", VA = "0x833CC4")]
		public bool GetComponentState(string pchRenderModelName, string pchComponentName, ref VRControllerState_t pControllerState, ref RenderModel_ControllerMode_State_t pState, ref RenderModel_ComponentState_t pComponentState)
		{
			return default(bool);
		}

		[Token(Token = "0x60016E3")]
		[Address(RVA = "0x8342F0", Offset = "0x8342F0", VA = "0x8342F0")]
		public bool RenderModelHasComponent(string pchRenderModelName, string pchComponentName)
		{
			return default(bool);
		}

		[Token(Token = "0x60016E4")]
		[Address(RVA = "0x83432C", Offset = "0x83432C", VA = "0x83432C")]
		public uint GetRenderModelThumbnailURL(string pchRenderModelName, StringBuilder pchThumbnailURL, uint unThumbnailURLLen, ref EVRRenderModelError peError)
		{
			return default(uint);
		}

		[Token(Token = "0x60016E5")]
		[Address(RVA = "0x834384", Offset = "0x834384", VA = "0x834384")]
		public uint GetRenderModelOriginalPath(string pchRenderModelName, StringBuilder pchOriginalPath, uint unOriginalPathLen, ref EVRRenderModelError peError)
		{
			return default(uint);
		}

		[Token(Token = "0x60016E6")]
		[Address(RVA = "0x8343DC", Offset = "0x8343DC", VA = "0x8343DC")]
		public string GetRenderModelErrorNameFromEnum(EVRRenderModelError error)
		{
			return null;
		}
	}
	[Token(Token = "0x20002D7")]
	public class CVRNotifications
	{
		[Token(Token = "0x40010C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IVRNotifications FnTable;

		[Token(Token = "0x60016E7")]
		[Address(RVA = "0x8313F8", Offset = "0x8313F8", VA = "0x8313F8")]
		internal CVRNotifications(IntPtr pInterface)
		{
		}

		[Token(Token = "0x60016E8")]
		[Address(RVA = "0x83153C", Offset = "0x83153C", VA = "0x83153C")]
		public EVRNotificationError CreateNotification(ulong ulOverlayHandle, ulong ulUserValue, EVRNotificationType type, string pchText, EVRNotificationStyle style, ref NotificationBitmap_t pImage, ref uint pNotificationId)
		{
			return default(EVRNotificationError);
		}

		[Token(Token = "0x60016E9")]
		[Address(RVA = "0x8315C8", Offset = "0x8315C8", VA = "0x8315C8")]
		public EVRNotificationError RemoveNotification(uint notificationId)
		{
			return default(EVRNotificationError);
		}
	}
	[Token(Token = "0x20002D8")]
	public class CVRSettings
	{
		[Token(Token = "0x40010C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IVRSettings FnTable;

		[Token(Token = "0x60016EA")]
		[Address(RVA = "0x834B3C", Offset = "0x834B3C", VA = "0x834B3C")]
		internal CVRSettings(IntPtr pInterface)
		{
		}

		[Token(Token = "0x60016EB")]
		[Address(RVA = "0x834C98", Offset = "0x834C98", VA = "0x834C98")]
		public string GetSettingsErrorNameFromEnum(EVRSettingsError eError)
		{
			return null;
		}

		[Token(Token = "0x60016EC")]
		[Address(RVA = "0x834D48", Offset = "0x834D48", VA = "0x834D48")]
		public bool Sync(bool bForce, ref EVRSettingsError peError)
		{
			return default(bool);
		}

		[Token(Token = "0x60016ED")]
		[Address(RVA = "0x834D84", Offset = "0x834D84", VA = "0x834D84")]
		public void SetBool(string pchSection, string pchSettingsKey, bool bValue, ref EVRSettingsError peError)
		{
		}

		[Token(Token = "0x60016EE")]
		[Address(RVA = "0x834DDC", Offset = "0x834DDC", VA = "0x834DDC")]
		public void SetInt32(string pchSection, string pchSettingsKey, int nValue, ref EVRSettingsError peError)
		{
		}

		[Token(Token = "0x60016EF")]
		[Address(RVA = "0x834E34", Offset = "0x834E34", VA = "0x834E34")]
		public void SetFloat(string pchSection, string pchSettingsKey, float flValue, ref EVRSettingsError peError)
		{
		}

		[Token(Token = "0x60016F0")]
		[Address(RVA = "0x834E8C", Offset = "0x834E8C", VA = "0x834E8C")]
		public void SetString(string pchSection, string pchSettingsKey, string pchValue, ref EVRSettingsError peError)
		{
		}

		[Token(Token = "0x60016F1")]
		[Address(RVA = "0x834EE4", Offset = "0x834EE4", VA = "0x834EE4")]
		public bool GetBool(string pchSection, string pchSettingsKey, ref EVRSettingsError peError)
		{
			return default(bool);
		}

		[Token(Token = "0x60016F2")]
		[Address(RVA = "0x834F34", Offset = "0x834F34", VA = "0x834F34")]
		public int GetInt32(string pchSection, string pchSettingsKey, ref EVRSettingsError peError)
		{
			return default(int);
		}

		[Token(Token = "0x60016F3")]
		[Address(RVA = "0x834F84", Offset = "0x834F84", VA = "0x834F84")]
		public float GetFloat(string pchSection, string pchSettingsKey, ref EVRSettingsError peError)
		{
			return default(float);
		}

		[Token(Token = "0x60016F4")]
		[Address(RVA = "0x834FD4", Offset = "0x834FD4", VA = "0x834FD4")]
		public void GetString(string pchSection, string pchSettingsKey, StringBuilder pchValue, uint unValueLen, ref EVRSettingsError peError)
		{
		}

		[Token(Token = "0x60016F5")]
		[Address(RVA = "0x835034", Offset = "0x835034", VA = "0x835034")]
		public void RemoveSection(string pchSection, ref EVRSettingsError peError)
		{
		}

		[Token(Token = "0x60016F6")]
		[Address(RVA = "0x835070", Offset = "0x835070", VA = "0x835070")]
		public void RemoveKeyInSection(string pchSection, string pchSettingsKey, ref EVRSettingsError peError)
		{
		}
	}
	[Token(Token = "0x20002D9")]
	public class CVRScreenshots
	{
		[Token(Token = "0x40010C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IVRScreenshots FnTable;

		[Token(Token = "0x60016F7")]
		[Address(RVA = "0x8347BC", Offset = "0x8347BC", VA = "0x8347BC")]
		internal CVRScreenshots(IntPtr pInterface)
		{
		}

		[Token(Token = "0x60016F8")]
		[Address(RVA = "0x834918", Offset = "0x834918", VA = "0x834918")]
		public EVRScreenshotError RequestScreenshot(ref uint pOutScreenshotHandle, EVRScreenshotType type, string pchPreviewFilename, string pchVRFilename)
		{
			return default(EVRScreenshotError);
		}

		[Token(Token = "0x60016F9")]
		[Address(RVA = "0x834970", Offset = "0x834970", VA = "0x834970")]
		public EVRScreenshotError HookScreenshot(EVRScreenshotType[] pSupportedTypes)
		{
			return default(EVRScreenshotError);
		}

		[Token(Token = "0x60016FA")]
		[Address(RVA = "0x8349B8", Offset = "0x8349B8", VA = "0x8349B8")]
		public EVRScreenshotType GetScreenshotPropertyType(uint screenshotHandle, ref EVRScreenshotError pError)
		{
			return default(EVRScreenshotType);
		}

		[Token(Token = "0x60016FB")]
		[Address(RVA = "0x8349F4", Offset = "0x8349F4", VA = "0x8349F4")]
		public uint GetScreenshotPropertyFilename(uint screenshotHandle, EVRScreenshotPropertyFilenames filenameType, StringBuilder pchFilename, uint cchFilename, ref EVRScreenshotError pError)
		{
			return default(uint);
		}

		[Token(Token = "0x60016FC")]
		[Address(RVA = "0x834A54", Offset = "0x834A54", VA = "0x834A54")]
		public EVRScreenshotError UpdateScreenshotProgress(uint screenshotHandle, float flProgress)
		{
			return default(EVRScreenshotError);
		}

		[Token(Token = "0x60016FD")]
		[Address(RVA = "0x834A90", Offset = "0x834A90", VA = "0x834A90")]
		public EVRScreenshotError TakeStereoScreenshot(ref uint pOutScreenshotHandle, string pchPreviewFilename, string pchVRFilename)
		{
			return default(EVRScreenshotError);
		}

		[Token(Token = "0x60016FE")]
		[Address(RVA = "0x834AE4", Offset = "0x834AE4", VA = "0x834AE4")]
		public EVRScreenshotError SubmitScreenshot(uint screenshotHandle, EVRScreenshotType type, string pchSourcePreviewFilename, string pchSourceVRFilename)
		{
			return default(EVRScreenshotError);
		}
	}
	[Token(Token = "0x20002DA")]
	public class CVRResources
	{
		[Token(Token = "0x40010C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IVRResources FnTable;

		[Token(Token = "0x60016FF")]
		[Address(RVA = "0x8345D0", Offset = "0x8345D0", VA = "0x8345D0")]
		internal CVRResources(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6001700")]
		[Address(RVA = "0x834714", Offset = "0x834714", VA = "0x834714")]
		public uint LoadSharedResource(string pchResourceName, string pchBuffer, uint unBufferLen)
		{
			return default(uint);
		}

		[Token(Token = "0x6001701")]
		[Address(RVA = "0x834764", Offset = "0x834764", VA = "0x834764")]
		public uint GetResourceFullPath(string pchResourceName, string pchResourceTypeDirectory, StringBuilder pchPathBuffer, uint unBufferLen)
		{
			return default(uint);
		}
	}
	[Token(Token = "0x20002DB")]
	public class CVRDriverManager
	{
		[Token(Token = "0x40010C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IVRDriverManager FnTable;

		[Token(Token = "0x6001702")]
		[Address(RVA = "0x830458", Offset = "0x830458", VA = "0x830458")]
		internal CVRDriverManager(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6001703")]
		[Address(RVA = "0x8305A0", Offset = "0x8305A0", VA = "0x8305A0")]
		public uint GetDriverCount()
		{
			return default(uint);
		}

		[Token(Token = "0x6001704")]
		[Address(RVA = "0x8305CC", Offset = "0x8305CC", VA = "0x8305CC")]
		public uint GetDriverName(uint nDriver, StringBuilder pchValue, uint unBufferSize)
		{
			return default(uint);
		}

		[Token(Token = "0x6001705")]
		[Address(RVA = "0x83061C", Offset = "0x83061C", VA = "0x83061C")]
		public ulong GetDriverHandle(string pchDriverName)
		{
			return default(ulong);
		}
	}
	[Token(Token = "0x20002DC")]
	public class CVRInput
	{
		[Token(Token = "0x40010C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IVRInput FnTable;

		[Token(Token = "0x6001706")]
		[Address(RVA = "0x830BA8", Offset = "0x830BA8", VA = "0x830BA8")]
		internal CVRInput(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6001707")]
		[Address(RVA = "0x830CF0", Offset = "0x830CF0", VA = "0x830CF0")]
		public EVRInputError SetActionManifestPath(string pchActionManifestPath)
		{
			return default(EVRInputError);
		}

		[Token(Token = "0x6001708")]
		[Address(RVA = "0x830D24", Offset = "0x830D24", VA = "0x830D24")]
		public EVRInputError GetActionSetHandle(string pchActionSetName, ref ulong pHandle)
		{
			return default(EVRInputError);
		}

		[Token(Token = "0x6001709")]
		[Address(RVA = "0x830D6C", Offset = "0x830D6C", VA = "0x830D6C")]
		public EVRInputError GetActionHandle(string pchActionName, ref ulong pHandle)
		{
			return default(EVRInputError);
		}

		[Token(Token = "0x600170A")]
		[Address(RVA = "0x830DB4", Offset = "0x830DB4", VA = "0x830DB4")]
		public EVRInputError GetInputSourceHandle(string pchInputSourcePath, ref ulong pHandle)
		{
			return default(EVRInputError);
		}

		[Token(Token = "0x600170B")]
		[Address(RVA = "0x830DFC", Offset = "0x830DFC", VA = "0x830DFC")]
		public EVRInputError UpdateActionState(VRActiveActionSet_t[] pSets, uint unSizeOfVRSelectedActionSet_t)
		{
			return default(EVRInputError);
		}

		[Token(Token = "0x600170C")]
		[Address(RVA = "0x830E58", Offset = "0x830E58", VA = "0x830E58")]
		public EVRInputError GetDigitalActionData(ulong action, ref InputDigitalActionData_t pActionData, uint unActionDataSize, ulong ulRestrictToDevice)
		{
			return default(EVRInputError);
		}

		[Token(Token = "0x600170D")]
		[Address(RVA = "0x830EBC", Offset = "0x830EBC", VA = "0x830EBC")]
		public EVRInputError GetAnalogActionData(ulong action, ref InputAnalogActionData_t pActionData, uint unActionDataSize, ulong ulRestrictToDevice)
		{
			return default(EVRInputError);
		}

		[Token(Token = "0x600170E")]
		[Address(RVA = "0x830F20", Offset = "0x830F20", VA = "0x830F20")]
		public EVRInputError GetPoseActionData(ulong action, ETrackingUniverseOrigin eOrigin, float fPredictedSecondsFromNow, ref InputPoseActionData_t pActionData, uint unActionDataSize, ulong ulRestrictToDevice)
		{
			return default(EVRInputError);
		}

		[Token(Token = "0x600170F")]
		[Address(RVA = "0x830FAC", Offset = "0x830FAC", VA = "0x830FAC")]
		public EVRInputError GetSkeletalActionData(ulong action, ref InputSkeletalActionData_t pActionData, uint unActionDataSize, ulong ulRestrictToDevice)
		{
			return default(EVRInputError);
		}

		[Token(Token = "0x6001710")]
		[Address(RVA = "0x831010", Offset = "0x831010", VA = "0x831010")]
		public EVRInputError GetSkeletalBoneData(ulong action, EVRSkeletalTransformSpace eTransformSpace, EVRSkeletalMotionRange eMotionRange, VRBoneTransform_t[] pTransformArray, ulong ulRestrictToDevice)
		{
			return default(EVRInputError);
		}

		[Token(Token = "0x6001711")]
		[Address(RVA = "0x831098", Offset = "0x831098", VA = "0x831098")]
		public EVRInputError GetSkeletalBoneDataCompressed(ulong action, EVRSkeletalTransformSpace eTransformSpace, EVRSkeletalMotionRange eMotionRange, IntPtr pvCompressedData, uint unCompressedSize, ref uint punRequiredCompressedSize, ulong ulRestrictToDevice)
		{
			return default(EVRInputError);
		}

		[Token(Token = "0x6001712")]
		[Address(RVA = "0x831130", Offset = "0x831130", VA = "0x831130")]
		public EVRInputError DecompressSkeletalBoneData(IntPtr pvCompressedBuffer, uint unCompressedBufferSize, ref EVRSkeletalTransformSpace peTransformSpace, VRBoneTransform_t[] pTransformArray)
		{
			return default(EVRInputError);
		}

		[Token(Token = "0x6001713")]
		[Address(RVA = "0x83119C", Offset = "0x83119C", VA = "0x83119C")]
		public EVRInputError TriggerHapticVibrationAction(ulong action, float fStartSecondsFromNow, float fDurationSeconds, float fFrequency, float fAmplitude, ulong ulRestrictToDevice)
		{
			return default(EVRInputError);
		}

		[Token(Token = "0x6001714")]
		[Address(RVA = "0x83121C", Offset = "0x83121C", VA = "0x83121C")]
		public EVRInputError GetActionOrigins(ulong actionSetHandle, ulong digitalActionHandle, ulong[] originsOut)
		{
			return default(EVRInputError);
		}

		[Token(Token = "0x6001715")]
		[Address(RVA = "0x831294", Offset = "0x831294", VA = "0x831294")]
		public EVRInputError GetOriginLocalizedName(ulong origin, StringBuilder pchNameArray, uint unNameArraySize)
		{
			return default(EVRInputError);
		}

		[Token(Token = "0x6001716")]
		[Address(RVA = "0x8312E8", Offset = "0x8312E8", VA = "0x8312E8")]
		public EVRInputError GetOriginTrackedDeviceInfo(ulong origin, ref InputOriginInfo_t pOriginInfo, uint unOriginInfoSize)
		{
			return default(EVRInputError);
		}

		[Token(Token = "0x6001717")]
		[Address(RVA = "0x83133C", Offset = "0x83133C", VA = "0x83133C")]
		public EVRInputError ShowActionOrigins(ulong actionSetHandle, ulong ulActionHandle)
		{
			return default(EVRInputError);
		}

		[Token(Token = "0x6001718")]
		[Address(RVA = "0x831390", Offset = "0x831390", VA = "0x831390")]
		public EVRInputError ShowBindingsForActionSet(VRActiveActionSet_t[] pSets, uint unSizeOfVRSelectedActionSet_t, ulong originToHighlight)
		{
			return default(EVRInputError);
		}
	}
	[Token(Token = "0x20002DD")]
	public class CVRIOBuffer
	{
		[Token(Token = "0x40010CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IVRIOBuffer FnTable;

		[Token(Token = "0x6001719")]
		[Address(RVA = "0x8308B8", Offset = "0x8308B8", VA = "0x8308B8")]
		internal CVRIOBuffer(IntPtr pInterface)
		{
		}

		[Token(Token = "0x600171A")]
		[Address(RVA = "0x830A00", Offset = "0x830A00", VA = "0x830A00")]
		public EIOBufferError Open(string pchPath, EIOBufferMode mode, uint unElementSize, uint unElements, ref ulong pulBuffer)
		{
			return default(EIOBufferError);
		}

		[Token(Token = "0x600171B")]
		[Address(RVA = "0x830A64", Offset = "0x830A64", VA = "0x830A64")]
		public EIOBufferError Close(ulong ulBuffer)
		{
			return default(EIOBufferError);
		}

		[Token(Token = "0x600171C")]
		[Address(RVA = "0x830AAC", Offset = "0x830AAC", VA = "0x830AAC")]
		public EIOBufferError Read(ulong ulBuffer, IntPtr pDst, uint unBytes, ref uint punRead)
		{
			return default(EIOBufferError);
		}

		[Token(Token = "0x600171D")]
		[Address(RVA = "0x830B0C", Offset = "0x830B0C", VA = "0x830B0C")]
		public EIOBufferError Write(ulong ulBuffer, IntPtr pSrc, uint unBytes)
		{
			return default(EIOBufferError);
		}

		[Token(Token = "0x600171E")]
		[Address(RVA = "0x830B60", Offset = "0x830B60", VA = "0x830B60")]
		public ulong PropertyContainer(ulong ulBuffer)
		{
			return default(ulong);
		}
	}
	[Token(Token = "0x20002DE")]
	public class CVRSpatialAnchors
	{
		[Token(Token = "0x40010CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IVRSpatialAnchors FnTable;

		[Token(Token = "0x600171F")]
		[Address(RVA = "0x8350C0", Offset = "0x8350C0", VA = "0x8350C0")]
		internal CVRSpatialAnchors(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6001720")]
		[Address(RVA = "0x835200", Offset = "0x835200", VA = "0x835200")]
		public EVRSpatialAnchorError CreateSpatialAnchorFromDescriptor(string pchDescriptor, ref uint pHandleOut)
		{
			return default(EVRSpatialAnchorError);
		}

		[Token(Token = "0x6001721")]
		[Address(RVA = "0x835244", Offset = "0x835244", VA = "0x835244")]
		public EVRSpatialAnchorError CreateSpatialAnchorFromPose(uint unDeviceIndex, ETrackingUniverseOrigin eOrigin, ref SpatialAnchorPose_t pPose, ref uint pHandleOut)
		{
			return default(EVRSpatialAnchorError);
		}

		[Token(Token = "0x6001722")]
		[Address(RVA = "0x83529C", Offset = "0x83529C", VA = "0x83529C")]
		public EVRSpatialAnchorError GetSpatialAnchorPose(uint unHandle, ETrackingUniverseOrigin eOrigin, ref SpatialAnchorPose_t pPoseOut)
		{
			return default(EVRSpatialAnchorError);
		}

		[Token(Token = "0x6001723")]
		[Address(RVA = "0x8352EC", Offset = "0x8352EC", VA = "0x8352EC")]
		public EVRSpatialAnchorError GetSpatialAnchorDescriptor(uint unHandle, StringBuilder pchDescriptorOut, ref uint punDescriptorBufferLenInOut)
		{
			return default(EVRSpatialAnchorError);
		}
	}
	[Token(Token = "0x20002DF")]
	public class OpenVRInterop
	{
		[PreserveSig]
		[Token(Token = "0x6001724")]
		[Address(RVA = "0x5DA3E0", Offset = "0x5DA3E0", VA = "0x5DA3E0")]
		internal static extern uint InitInternal(ref EVRInitError peError, EVRApplicationType eApplicationType);

		[PreserveSig]
		[Token(Token = "0x6001725")]
		[Address(RVA = "0x5DA4F0", Offset = "0x5DA4F0", VA = "0x5DA4F0")]
		internal static extern uint InitInternal2(ref EVRInitError peError, EVRApplicationType eApplicationType, [In] string pStartupInfo);

		[PreserveSig]
		[Token(Token = "0x6001726")]
		[Address(RVA = "0x5DA630", Offset = "0x5DA630", VA = "0x5DA630")]
		internal static extern void ShutdownInternal();

		[PreserveSig]
		[Token(Token = "0x6001727")]
		[Address(RVA = "0x5DA730", Offset = "0x5DA730", VA = "0x5DA730")]
		internal static extern bool IsHmdPresent();

		[PreserveSig]
		[Token(Token = "0x6001728")]
		[Address(RVA = "0x5DA830", Offset = "0x5DA830", VA = "0x5DA830")]
		internal static extern bool IsRuntimeInstalled();

		[PreserveSig]
		[Token(Token = "0x6001729")]
		[Address(RVA = "0x5DA9C8", Offset = "0x5DA9C8", VA = "0x5DA9C8")]
		internal static extern IntPtr GetStringForHmdError(EVRInitError error);

		[PreserveSig]
		[Token(Token = "0x600172A")]
		[Address(RVA = "0x5DAAE0", Offset = "0x5DAAE0", VA = "0x5DAAE0")]
		internal static extern IntPtr GetGenericInterface([In] string pchInterfaceVersion, ref EVRInitError peError);

		[PreserveSig]
		[Token(Token = "0x600172B")]
		[Address(RVA = "0x5DAC20", Offset = "0x5DAC20", VA = "0x5DAC20")]
		internal static extern bool IsInterfaceVersionValid([In] string pchInterfaceVersion);

		[PreserveSig]
		[Token(Token = "0x600172C")]
		[Address(RVA = "0x5DAD68", Offset = "0x5DAD68", VA = "0x5DAD68")]
		internal static extern uint GetInitToken();

		[Token(Token = "0x600172D")]
		[Address(RVA = "0x5DC9CC", Offset = "0x5DC9CC", VA = "0x5DC9CC")]
		public OpenVRInterop()
		{
		}
	}
	[Token(Token = "0x20002E0")]
	public enum EVREye
	{
		[Token(Token = "0x40010CD")]
		Eye_Left,
		[Token(Token = "0x40010CE")]
		Eye_Right
	}
	[Token(Token = "0x20002E1")]
	public enum ETextureType
	{
		[Token(Token = "0x40010D0")]
		Invalid = -1,
		[Token(Token = "0x40010D1")]
		DirectX,
		[Token(Token = "0x40010D2")]
		OpenGL,
		[Token(Token = "0x40010D3")]
		Vulkan,
		[Token(Token = "0x40010D4")]
		IOSurface,
		[Token(Token = "0x40010D5")]
		DirectX12,
		[Token(Token = "0x40010D6")]
		DXGISharedHandle,
		[Token(Token = "0x40010D7")]
		Metal
	}
	[Token(Token = "0x20002E2")]
	public enum EColorSpace
	{
		[Token(Token = "0x40010D9")]
		Auto,
		[Token(Token = "0x40010DA")]
		Gamma,
		[Token(Token = "0x40010DB")]
		Linear
	}
	[Token(Token = "0x20002E3")]
	public enum ETrackingResult
	{
		[Token(Token = "0x40010DD")]
		Uninitialized = 1,
		[Token(Token = "0x40010DE")]
		Calibrating_InProgress = 100,
		[Token(Token = "0x40010DF")]
		Calibrating_OutOfRange = 101,
		[Token(Token = "0x40010E0")]
		Running_OK = 200,
		[Token(Token = "0x40010E1")]
		Running_OutOfRange = 201
	}
	[Token(Token = "0x20002E4")]
	public enum ETrackedDeviceClass
	{
		[Token(Token = "0x40010E3")]
		Invalid,
		[Token(Token = "0x40010E4")]
		HMD,
		[Token(Token = "0x40010E5")]
		Controller,
		[Token(Token = "0x40010E6")]
		GenericTracker,
		[Token(Token = "0x40010E7")]
		TrackingReference,
		[Token(Token = "0x40010E8")]
		DisplayRedirect,
		[Token(Token = "0x40010E9")]
		Max
	}
	[Token(Token = "0x20002E5")]
	public enum ETrackedControllerRole
	{
		[Token(Token = "0x40010EB")]
		Invalid,
		[Token(Token = "0x40010EC")]
		LeftHand,
		[Token(Token = "0x40010ED")]
		RightHand,
		[Token(Token = "0x40010EE")]
		OptOut,
		[Token(Token = "0x40010EF")]
		Max
	}
	[Token(Token = "0x20002E6")]
	public enum ETrackingUniverseOrigin
	{
		[Token(Token = "0x40010F1")]
		TrackingUniverseSeated,
		[Token(Token = "0x40010F2")]
		TrackingUniverseStanding,
		[Token(Token = "0x40010F3")]
		TrackingUniverseRawAndUncalibrated
	}
	[Token(Token = "0x20002E7")]
	public enum ETrackedDeviceProperty
	{
		[Token(Token = "0x40010F5")]
		Prop_Invalid = 0,
		[Token(Token = "0x40010F6")]
		Prop_TrackingSystemName_String = 1000,
		[Token(Token = "0x40010F7")]
		Prop_ModelNumber_String = 1001,
		[Token(Token = "0x40010F8")]
		Prop_SerialNumber_String = 1002,
		[Token(Token = "0x40010F9")]
		Prop_RenderModelName_String = 1003,
		[Token(Token = "0x40010FA")]
		Prop_WillDriftInYaw_Bool = 1004,
		[Token(Token = "0x40010FB")]
		Prop_ManufacturerName_String = 1005,
		[Token(Token = "0x40010FC")]
		Prop_TrackingFirmwareVersion_String = 1006,
		[Token(Token = "0x40010FD")]
		Prop_HardwareRevision_String = 1007,
		[Token(Token = "0x40010FE")]
		Prop_AllWirelessDongleDescriptions_String = 1008,
		[Token(Token = "0x40010FF")]
		Prop_ConnectedWirelessDongle_String = 1009,
		[Token(Token = "0x4001100")]
		Prop_DeviceIsWireless_Bool = 1010,
		[Token(Token = "0x4001101")]
		Prop_DeviceIsCharging_Bool = 1011,
		[Token(Token = "0x4001102")]
		Prop_DeviceBatteryPercentage_Float = 1012,
		[Token(Token = "0x4001103")]
		Prop_StatusDisplayTransform_Matrix34 = 1013,
		[Token(Token = "0x4001104")]
		Prop_Firmware_UpdateAvailable_Bool = 1014,
		[Token(Token = "0x4001105")]
		Prop_Firmware_ManualUpdate_Bool = 1015,
		[Token(Token = "0x4001106")]
		Prop_Firmware_ManualUpdateURL_String = 1016,
		[Token(Token = "0x4001107")]
		Prop_HardwareRevision_Uint64 = 1017,
		[Token(Token = "0x4001108")]
		Prop_FirmwareVersion_Uint64 = 1018,
		[Token(Token = "0x4001109")]
		Prop_FPGAVersion_Uint64 = 1019,
		[Token(Token = "0x400110A")]
		Prop_VRCVersion_Uint64 = 1020,
		[Token(Token = "0x400110B")]
		Prop_RadioVersion_Uint64 = 1021,
		[Token(Token = "0x400110C")]
		Prop_DongleVersion_Uint64 = 1022,
		[Token(Token = "0x400110D")]
		Prop_BlockServerShutdown_Bool = 1023,
		[Token(Token = "0x400110E")]
		Prop_CanUnifyCoordinateSystemWithHmd_Bool = 1024,
		[Token(Token = "0x400110F")]
		Prop_ContainsProximitySensor_Bool = 1025,
		[Token(Token = "0x4001110")]
		Prop_DeviceProvidesBatteryStatus_Bool = 1026,
		[Token(Token = "0x4001111")]
		Prop_DeviceCanPowerOff_Bool = 1027,
		[Token(Token = "0x4001112")]
		Prop_Firmware_ProgrammingTarget_String = 1028,
		[Token(Token = "0x4001113")]
		Prop_DeviceClass_Int32 = 1029,
		[Token(Token = "0x4001114")]
		Prop_HasCamera_Bool = 1030,
		[Token(Token = "0x4001115")]
		Prop_DriverVersion_String = 1031,
		[Token(Token = "0x4001116")]
		Prop_Firmware_ForceUpdateRequired_Bool = 1032,
		[Token(Token = "0x4001117")]
		Prop_ViveSystemButtonFixRequired_Bool = 1033,
		[Token(Token = "0x4001118")]
		Prop_ParentDriver_Uint64 = 1034,
		[Token(Token = "0x4001119")]
		Prop_ResourceRoot_String = 1035,
		[Token(Token = "0x400111A")]
		Prop_RegisteredDeviceType_String = 1036,
		[Token(Token = "0x400111B")]
		Prop_InputProfilePath_String = 1037,
		[Token(Token = "0x400111C")]
		Prop_NeverTracked_Bool = 1038,
		[Token(Token = "0x400111D")]
		Prop_NumCameras_Int32 = 1039,
		[Token(Token = "0x400111E")]
		Prop_CameraFrameLayout_Int32 = 1040,
		[Token(Token = "0x400111F")]
		Prop_ReportsTimeSinceVSync_Bool = 2000,
		[Token(Token = "0x4001120")]
		Prop_SecondsFromVsyncToPhotons_Float = 2001,
		[Token(Token = "0x4001121")]
		Prop_DisplayFrequency_Float = 2002,
		[Token(Token = "0x4001122")]
		Prop_UserIpdMeters_Float = 2003,
		[Token(Token = "0x4001123")]
		Prop_CurrentUniverseId_Uint64 = 2004,
		[Token(Token = "0x4001124")]
		Prop_PreviousUniverseId_Uint64 = 2005,
		[Token(Token = "0x4001125")]
		Prop_DisplayFirmwareVersion_Uint64 = 2006,
		[Token(Token = "0x4001126")]
		Prop_IsOnDesktop_Bool = 2007,
		[Token(Token = "0x4001127")]
		Prop_DisplayMCType_Int32 = 2008,
		[Token(Token = "0x4001128")]
		Prop_DisplayMCOffset_Float = 2009,
		[Token(Token = "0x4001129")]
		Prop_DisplayMCScale_Float = 2010,
		[Token(Token = "0x400112A")]
		Prop_EdidVendorID_Int32 = 2011,
		[Token(Token = "0x400112B")]
		Prop_DisplayMCImageLeft_String = 2012,
		[Token(Token = "0x400112C")]
		Prop_DisplayMCImageRight_String = 2013,
		[Token(Token = "0x400112D")]
		Prop_DisplayGCBlackClamp_Float = 2014,
		[Token(Token = "0x400112E")]
		Prop_EdidProductID_Int32 = 2015,
		[Token(Token = "0x400112F")]
		Prop_CameraToHeadTransform_Matrix34 = 2016,
		[Token(Token = "0x4001130")]
		Prop_DisplayGCType_Int32 = 2017,
		[Token(Token = "0x4001131")]
		Prop_DisplayGCOffset_Float = 2018,
		[Token(Token = "0x4001132")]
		Prop_DisplayGCScale_Float = 2019,
		[Token(Token = "0x4001133")]
		Prop_DisplayGCPrescale_Float = 2020,
		[Token(Token = "0x4001134")]
		Prop_DisplayGCImage_String = 2021,
		[Token(Token = "0x4001135")]
		Prop_LensCenterLeftU_Float = 2022,
		[Token(Token = "0x4001136")]
		Prop_LensCenterLeftV_Float = 2023,
		[Token(Token = "0x4001137")]
		Prop_LensCenterRightU_Float = 2024,
		[Token(Token = "0x4001138")]
		Prop_LensCenterRightV_Float = 2025,
		[Token(Token = "0x4001139")]
		Prop_UserHeadToEyeDepthMeters_Float = 2026,
		[Token(Token = "0x400113A")]
		Prop_CameraFirmwareVersion_Uint64 = 2027,
		[Token(Token = "0x400113B")]
		Prop_CameraFirmwareDescription_String = 2028,
		[Token(Token = "0x400113C")]
		Prop_DisplayFPGAVersion_Uint64 = 2029,
		[Token(Token = "0x400113D")]
		Prop_DisplayBootloaderVersion_Uint64 = 2030,
		[Token(Token = "0x400113E")]
		Prop_DisplayHardwareVersion_Uint64 = 2031,
		[Token(Token = "0x400113F")]
		Prop_AudioFirmwareVersion_Uint64 = 2032,
		[Token(Token = "0x4001140")]
		Prop_CameraCompatibilityMode_Int32 = 2033,
		[Token(Token = "0x4001141")]
		Prop_ScreenshotHorizontalFieldOfViewDegrees_Float = 2034,
		[Token(Token = "0x4001142")]
		Prop_ScreenshotVerticalFieldOfViewDegrees_Float = 2035,
		[Token(Token = "0x4001143")]
		Prop_DisplaySuppressed_Bool = 2036,
		[Token(Token = "0x4001144")]
		Prop_DisplayAllowNightMode_Bool = 2037,
		[Token(Token = "0x4001145")]
		Prop_DisplayMCImageWidth_Int32 = 2038,
		[Token(Token = "0x4001146")]
		Prop_DisplayMCImageHeight_Int32 = 2039,
		[Token(Token = "0x4001147")]
		Prop_DisplayMCImageNumChannels_Int32 = 2040,
		[Token(Token = "0x4001148")]
		Prop_DisplayMCImageData_Binary = 2041,
		[Token(Token = "0x4001149")]
		Prop_SecondsFromPhotonsToVblank_Float = 2042,
		[Token(Token = "0x400114A")]
		Prop_DriverDirectModeSendsVsyncEvents_Bool = 2043,
		[Token(Token = "0x400114B")]
		Prop_DisplayDebugMode_Bool = 2044,
		[Token(Token = "0x400114C")]
		Prop_GraphicsAdapterLuid_Uint64 = 2045,
		[Token(Token = "0x400114D")]
		Prop_DriverProvidedChaperonePath_String = 2048,
		[Token(Token = "0x400114E")]
		Prop_ExpectedTrackingReferenceCount_Int32 = 2049,
		[Token(Token = "0x400114F")]
		Prop_ExpectedControllerCount_Int32 = 2050,
		[Token(Token = "0x4001150")]
		Prop_NamedIconPathControllerLeftDeviceOff_String = 2051,
		[Token(Token = "0x4001151")]
		Prop_NamedIconPathControllerRightDeviceOff_String = 2052,
		[Token(Token = "0x4001152")]
		Prop_NamedIconPathTrackingReferenceDeviceOff_String = 2053,
		[Token(Token = "0x4001153")]
		Prop_DoNotApplyPrediction_Bool = 2054,
		[Token(Token = "0x4001154")]
		Prop_CameraToHeadTransforms_Matrix34_Array = 2055,
		[Token(Token = "0x4001155")]
		Prop_DistortionMeshResolution_Int32 = 2056,
		[Token(Token = "0x4001156")]
		Prop_DriverIsDrawingControllers_Bool = 2057,
		[Token(Token = "0x4001157")]
		Prop_DriverRequestsApplicationPause_Bool = 2058,
		[Token(Token = "0x4001158")]
		Prop_DriverRequestsReducedRendering_Bool = 2059,
		[Token(Token = "0x4001159")]
		Prop_MinimumIpdStepMeters_Float = 2060,
		[Token(Token = "0x400115A")]
		Prop_AudioBridgeFirmwareVersion_Uint64 = 2061,
		[Token(Token = "0x400115B")]
		Prop_ImageBridgeFirmwareVersion_Uint64 = 2062,
		[Token(Token = "0x400115C")]
		Prop_ImuToHeadTransform_Matrix34 = 2063,
		[Token(Token = "0x400115D")]
		Prop_ImuFactoryGyroBias_Vector3 = 2064,
		[Token(Token = "0x400115E")]
		Prop_ImuFactoryGyroScale_Vector3 = 2065,
		[Token(Token = "0x400115F")]
		Prop_ImuFactoryAccelerometerBias_Vector3 = 2066,
		[Token(Token = "0x4001160")]
		Prop_ImuFactoryAccelerometerScale_Vector3 = 2067,
		[Token(Token = "0x4001161")]
		Prop_ConfigurationIncludesLighthouse20Features_Bool = 2069,
		[Token(Token = "0x4001162")]
		Prop_DriverRequestedMuraCorrectionMode_Int32 = 2200,
		[Token(Token = "0x4001163")]
		Prop_DriverRequestedMuraFeather_InnerLeft_Int32 = 2201,
		[Token(Token = "0x4001164")]
		Prop_DriverRequestedMuraFeather_InnerRight_Int32 = 2202,
		[Token(Token = "0x4001165")]
		Prop_DriverRequestedMuraFeather_InnerTop_Int32 = 2203,
		[Token(Token = "0x4001166")]
		Prop_DriverRequestedMuraFeather_InnerBottom_Int32 = 2204,
		[Token(Token = "0x4001167")]
		Prop_DriverRequestedMuraFeather_OuterLeft_Int32 = 2205,
		[Token(Token = "0x4001168")]
		Prop_DriverRequestedMuraFeather_OuterRight_Int32 = 2206,
		[Token(Token = "0x4001169")]
		Prop_DriverRequestedMuraFeather_OuterTop_Int32 = 2207,
		[Token(Token = "0x400116A")]
		Prop_DriverRequestedMuraFeather_OuterBottom_Int32 = 2208,
		[Token(Token = "0x400116B")]
		Prop_AttachedDeviceId_String = 3000,
		[Token(Token = "0x400116C")]
		Prop_SupportedButtons_Uint64 = 3001,
		[Token(Token = "0x400116D")]
		Prop_Axis0Type_Int32 = 3002,
		[Token(Token = "0x400116E")]
		Prop_Axis1Type_Int32 = 3003,
		[Token(Token = "0x400116F")]
		Prop_Axis2Type_Int32 = 3004,
		[Token(Token = "0x4001170")]
		Prop_Axis3Type_Int32 = 3005,
		[Token(Token = "0x4001171")]
		Prop_Axis4Type_Int32 = 3006,
		[Token(Token = "0x4001172")]
		Prop_ControllerRoleHint_Int32 = 3007,
		[Token(Token = "0x4001173")]
		Prop_FieldOfViewLeftDegrees_Float = 4000,
		[Token(Token = "0x4001174")]
		Prop_FieldOfViewRightDegrees_Float = 4001,
		[Token(Token = "0x4001175")]
		Prop_FieldOfViewTopDegrees_Float = 4002,
		[Token(Token = "0x4001176")]
		Prop_FieldOfViewBottomDegrees_Float = 4003,
		[Token(Token = "0x4001177")]
		Prop_TrackingRangeMinimumMeters_Float = 4004,
		[Token(Token = "0x4001178")]
		Prop_TrackingRangeMaximumMeters_Float = 4005,
		[Token(Token = "0x4001179")]
		Prop_ModeLabel_String = 4006,
		[Token(Token = "0x400117A")]
		Prop_IconPathName_String = 5000,
		[Token(Token = "0x400117B")]
		Prop_NamedIconPathDeviceOff_String = 5001,
		[Token(Token = "0x400117C")]
		Prop_NamedIconPathDeviceSearching_String = 5002,
		[Token(Token = "0x400117D")]
		Prop_NamedIconPathDeviceSearchingAlert_String = 5003,
		[Token(Token = "0x400117E")]
		Prop_NamedIconPathDeviceReady_String = 5004,
		[Token(Token = "0x400117F")]
		Prop_NamedIconPathDeviceReadyAlert_String = 5005,
		[Token(Token = "0x4001180")]
		Prop_NamedIconPathDeviceNotReady_String = 5006,
		[Token(Token = "0x4001181")]
		Prop_NamedIconPathDeviceStandby_String = 5007,
		[Token(Token = "0x4001182")]
		Prop_NamedIconPathDeviceAlertLow_String = 5008,
		[Token(Token = "0x4001183")]
		Prop_DisplayHiddenArea_Binary_Start = 5100,
		[Token(Token = "0x4001184")]
		Prop_DisplayHiddenArea_Binary_End = 5150,
		[Token(Token = "0x4001185")]
		Prop_ParentContainer = 5151,
		[Token(Token = "0x4001186")]
		Prop_UserConfigPath_String = 6000,
		[Token(Token = "0x4001187")]
		Prop_InstallPath_String = 6001,
		[Token(Token = "0x4001188")]
		Prop_HasDisplayComponent_Bool = 6002,
		[Token(Token = "0x4001189")]
		Prop_HasControllerComponent_Bool = 6003,
		[Token(Token = "0x400118A")]
		Prop_HasCameraComponent_Bool = 6004,
		[Token(Token = "0x400118B")]
		Prop_HasDriverDirectModeComponent_Bool = 6005,
		[Token(Token = "0x400118C")]
		Prop_HasVirtualDisplayComponent_Bool = 6006,
		[Token(Token = "0x400118D")]
		Prop_HasSpatialAnchorsSupport_Bool = 6007,
		[Token(Token = "0x400118E")]
		Prop_ControllerType_String = 7000,
		[Token(Token = "0x400118F")]
		Prop_LegacyInputProfile_String = 7001,
		[Token(Token = "0x4001190")]
		Prop_VendorSpecific_Reserved_Start = 10000,
		[Token(Token = "0x4001191")]
		Prop_VendorSpecific_Reserved_End = 10999,
		[Token(Token = "0x4001192")]
		Prop_TrackedDeviceProperty_Max = 1000000
	}
	[Token(Token = "0x20002E8")]
	public enum ETrackedPropertyError
	{
		[Token(Token = "0x4001194")]
		TrackedProp_Success,
		[Token(Token = "0x4001195")]
		TrackedProp_WrongDataType,
		[Token(Token = "0x4001196")]
		TrackedProp_WrongDeviceClass,
		[Token(Token = "0x4001197")]
		TrackedProp_BufferTooSmall,
		[Token(Token = "0x4001198")]
		TrackedProp_UnknownProperty,
		[Token(Token = "0x4001199")]
		TrackedProp_InvalidDevice,
		[Token(Token = "0x400119A")]
		TrackedProp_CouldNotContactServer,
		[Token(Token = "0x400119B")]
		TrackedProp_ValueNotProvidedByDevice,
		[Token(Token = "0x400119C")]
		TrackedProp_StringExceedsMaximumLength,
		[Token(Token = "0x400119D")]
		TrackedProp_NotYetAvailable,
		[Token(Token = "0x400119E")]
		TrackedProp_PermissionDenied,
		[Token(Token = "0x400119F")]
		TrackedProp_InvalidOperation,
		[Token(Token = "0x40011A0")]
		TrackedProp_CannotWriteToWildcards
	}
	[Token(Token = "0x20002E9")]
	public enum EVRSubmitFlags
	{
		[Token(Token = "0x40011A2")]
		Submit_Default = 0,
		[Token(Token = "0x40011A3")]
		Submit_LensDistortionAlreadyApplied = 1,
		[Token(Token = "0x40011A4")]
		Submit_GlRenderBuffer = 2,
		[Token(Token = "0x40011A5")]
		Submit_Reserved = 4,
		[Token(Token = "0x40011A6")]
		Submit_TextureWithPose = 8,
		[Token(Token = "0x40011A7")]
		Submit_TextureWithDepth = 0x10
	}
	[Token(Token = "0x20002EA")]
	public enum EVRState
	{
		[Token(Token = "0x40011A9")]
		Undefined = -1,
		[Token(Token = "0x40011AA")]
		Off,
		[Token(Token = "0x40011AB")]
		Searching,
		[Token(Token = "0x40011AC")]
		Searching_Alert,
		[Token(Token = "0x40011AD")]
		Ready,
		[Token(Token = "0x40011AE")]
		Ready_Alert,
		[Token(Token = "0x40011AF")]
		NotReady,
		[Token(Token = "0x40011B0")]
		Standby,
		[Token(Token = "0x40011B1")]
		Ready_Alert_Low
	}
	[Token(Token = "0x20002EB")]
	public enum EVREventType
	{
		[Token(Token = "0x40011B3")]
		VREvent_None = 0,
		[Token(Token = "0x40011B4")]
		VREvent_TrackedDeviceActivated = 100,
		[Token(Token = "0x40011B5")]
		VREvent_TrackedDeviceDeactivated = 101,
		[Token(Token = "0x40011B6")]
		VREvent_TrackedDeviceUpdated = 102,
		[Token(Token = "0x40011B7")]
		VREvent_TrackedDeviceUserInteractionStarted = 103,
		[Token(Token = "0x40011B8")]
		VREvent_TrackedDeviceUserInteractionEnded = 104,
		[Token(Token = "0x40011B9")]
		VREvent_IpdChanged = 105,
		[Token(Token = "0x40011BA")]
		VREvent_EnterStandbyMode = 106,
		[Token(Token = "0x40011BB")]
		VREvent_LeaveStandbyMode = 107,
		[Token(Token = "0x40011BC")]
		VREvent_TrackedDeviceRoleChanged = 108,
		[Token(Token = "0x40011BD")]
		VREvent_WatchdogWakeUpRequested = 109,
		[Token(Token = "0x40011BE")]
		VREvent_LensDistortionChanged = 110,
		[Token(Token = "0x40011BF")]
		VREvent_PropertyChanged = 111,
		[Token(Token = "0x40011C0")]
		VREvent_WirelessDisconnect = 112,
		[Token(Token = "0x40011C1")]
		VREvent_WirelessReconnect = 113,
		[Token(Token = "0x40011C2")]
		VREvent_ButtonPress = 200,
		[Token(Token = "0x40011C3")]
		VREvent_ButtonUnpress = 201,
		[Token(Token = "0x40011C4")]
		VREvent_ButtonTouch = 202,
		[Token(Token = "0x40011C5")]
		VREvent_ButtonUntouch = 203,
		[Token(Token = "0x40011C6")]
		VREvent_DualAnalog_Press = 250,
		[Token(Token = "0x40011C7")]
		VREvent_DualAnalog_Unpress = 251,
		[Token(Token = "0x40011C8")]
		VREvent_DualAnalog_Touch = 252,
		[Token(Token = "0x40011C9")]
		VREvent_DualAnalog_Untouch = 253,
		[Token(Token = "0x40011CA")]
		VREvent_DualAnalog_Move = 254,
		[Token(Token = "0x40011CB")]
		VREvent_DualAnalog_ModeSwitch1 = 255,
		[Token(Token = "0x40011CC")]
		VREvent_DualAnalog_ModeSwitch2 = 256,
		[Token(Token = "0x40011CD")]
		VREvent_DualAnalog_Cancel = 257,
		[Token(Token = "0x40011CE")]
		VREvent_MouseMove = 300,
		[Token(Token = "0x40011CF")]
		VREvent_MouseButtonDown = 301,
		[Token(Token = "0x40011D0")]
		VREvent_MouseButtonUp = 302,
		[Token(Token = "0x40011D1")]
		VREvent_FocusEnter = 303,
		[Token(Token = "0x40011D2")]
		VREvent_FocusLeave = 304,
		[Token(Token = "0x40011D3")]
		VREvent_Scroll = 305,
		[Token(Token = "0x40011D4")]
		VREvent_TouchPadMove = 306,
		[Token(Token = "0x40011D5")]
		VREvent_OverlayFocusChanged = 307,
		[Token(Token = "0x40011D6")]
		VREvent_InputFocusCaptured = 400,
		[Token(Token = "0x40011D7")]
		VREvent_InputFocusReleased = 401,
		[Token(Token = "0x40011D8")]
		VREvent_SceneFocusLost = 402,
		[Token(Token = "0x40011D9")]
		VREvent_SceneFocusGained = 403,
		[Token(Token = "0x40011DA")]
		VREvent_SceneApplicationChanged = 404,
		[Token(Token = "0x40011DB")]
		VREvent_SceneFocusChanged = 405,
		[Token(Token = "0x40011DC")]
		VREvent_InputFocusChanged = 406,
		[Token(Token = "0x40011DD")]
		VREvent_SceneApplicationSecondaryRenderingStarted = 407,
		[Token(Token = "0x40011DE")]
		VREvent_SceneApplicationUsingWrongGraphicsAdapter = 408,
		[Token(Token = "0x40011DF")]
		VREvent_ActionBindingReloaded = 409,
		[Token(Token = "0x40011E0")]
		VREvent_HideRenderModels = 410,
		[Token(Token = "0x40011E1")]
		VREvent_ShowRenderModels = 411,
		[Token(Token = "0x40011E2")]
		VREvent_ConsoleOpened = 420,
		[Token(Token = "0x40011E3")]
		VREvent_ConsoleClosed = 421,
		[Token(Token = "0x40011E4")]
		VREvent_OverlayShown = 500,
		[Token(Token = "0x40011E5")]
		VREvent_OverlayHidden = 501,
		[Token(Token = "0x40011E6")]
		VREvent_DashboardActivated = 502,
		[Token(Token = "0x40011E7")]
		VREvent_DashboardDeactivated = 503,
		[Token(Token = "0x40011E8")]
		VREvent_DashboardThumbSelected = 504,
		[Token(Token = "0x40011E9")]
		VREvent_DashboardRequested = 505,
		[Token(Token = "0x40011EA")]
		VREvent_ResetDashboard = 506,
		[Token(Token = "0x40011EB")]
		VREvent_RenderToast = 507,
		[Token(Token = "0x40011EC")]
		VREvent_ImageLoaded = 508,
		[Token(Token = "0x40011ED")]
		VREvent_ShowKeyboard = 509,
		[Token(Token = "0x40011EE")]
		VREvent_HideKeyboard = 510,
		[Token(Token = "0x40011EF")]
		VREvent_OverlayGamepadFocusGained = 511,
		[Token(Token = "0x40011F0")]
		VREvent_OverlayGamepadFocusLost = 512,
		[Token(Token = "0x40011F1")]
		VREvent_OverlaySharedTextureChanged = 513,
		[Token(Token = "0x40011F2")]
		VREvent_ScreenshotTriggered = 516,
		[Token(Token = "0x40011F3")]
		VREvent_ImageFailed = 517,
		[Token(Token = "0x40011F4")]
		VREvent_DashboardOverlayCreated = 518,
		[Token(Token = "0x40011F5")]
		VREvent_SwitchGamepadFocus = 519,
		[Token(Token = "0x40011F6")]
		VREvent_RequestScreenshot = 520,
		[Token(Token = "0x40011F7")]
		VREvent_ScreenshotTaken = 521,
		[Token(Token = "0x40011F8")]
		VREvent_ScreenshotFailed = 522,
		[Token(Token = "0x40011F9")]
		VREvent_SubmitScreenshotToDashboard = 523,
		[Token(Token = "0x40011FA")]
		VREvent_ScreenshotProgressToDashboard = 524,
		[Token(Token = "0x40011FB")]
		VREvent_PrimaryDashboardDeviceChanged = 525,
		[Token(Token = "0x40011FC")]
		VREvent_RoomViewShown = 526,
		[Token(Token = "0x40011FD")]
		VREvent_RoomViewHidden = 527,
		[Token(Token = "0x40011FE")]
		VREvent_Notification_Shown = 600,
		[Token(Token = "0x40011FF")]
		VREvent_Notification_Hidden = 601,
		[Token(Token = "0x4001200")]
		VREvent_Notification_BeginInteraction = 602,
		[Token(Token = "0x4001201")]
		VREvent_Notification_Destroyed = 603,
		[Token(Token = "0x4001202")]
		VREvent_Quit = 700,
		[Token(Token = "0x4001203")]
		VREvent_ProcessQuit = 701,
		[Token(Token = "0x4001204")]
		VREvent_QuitAborted_UserPrompt = 702,
		[Token(Token = "0x4001205")]
		VREvent_QuitAcknowledged = 703,
		[Token(Token = "0x4001206")]
		VREvent_DriverRequestedQuit = 704,
		[Token(Token = "0x4001207")]
		VREvent_ChaperoneDataHasChanged = 800,
		[Token(Token = "0x4001208")]
		VREvent_ChaperoneUniverseHasChanged = 801,
		[Token(Token = "0x4001209")]
		VREvent_ChaperoneTempDataHasChanged = 802,
		[Token(Token = "0x400120A")]
		VREvent_ChaperoneSettingsHaveChanged = 803,
		[Token(Token = "0x400120B")]
		VREvent_SeatedZeroPoseReset = 804,
		[Token(Token = "0x400120C")]
		VREvent_AudioSettingsHaveChanged = 820,
		[Token(Token = "0x400120D")]
		VREvent_BackgroundSettingHasChanged = 850,
		[Token(Token = "0x400120E")]
		VREvent_CameraSettingsHaveChanged = 851,
		[Token(Token = "0x400120F")]
		VREvent_ReprojectionSettingHasChanged = 852,
		[Token(Token = "0x4001210")]
		VREvent_ModelSkinSettingsHaveChanged = 853,
		[Token(Token = "0x4001211")]
		VREvent_EnvironmentSettingsHaveChanged = 854,
		[Token(Token = "0x4001212")]
		VREvent_PowerSettingsHaveChanged = 855,
		[Token(Token = "0x4001213")]
		VREvent_EnableHomeAppSettingsHaveChanged = 856,
		[Token(Token = "0x4001214")]
		VREvent_SteamVRSectionSettingChanged = 857,
		[Token(Token = "0x4001215")]
		VREvent_LighthouseSectionSettingChanged = 858,
		[Token(Token = "0x4001216")]
		VREvent_NullSectionSettingChanged = 859,
		[Token(Token = "0x4001217")]
		VREvent_UserInterfaceSectionSettingChanged = 860,
		[Token(Token = "0x4001218")]
		VREvent_NotificationsSectionSettingChanged = 861,
		[Token(Token = "0x4001219")]
		VREvent_KeyboardSectionSettingChanged = 862,
		[Token(Token = "0x400121A")]
		VREvent_PerfSectionSettingChanged = 863,
		[Token(Token = "0x400121B")]
		VREvent_DashboardSectionSettingChanged = 864,
		[Token(Token = "0x400121C")]
		VREvent_WebInterfaceSectionSettingChanged = 865,
		[Token(Token = "0x400121D")]
		VREvent_TrackersSectionSettingChanged = 866,
		[Token(Token = "0x400121E")]
		VREvent_StatusUpdate = 900,
		[Token(Token = "0x400121F")]
		VREvent_WebInterface_InstallDriverCompleted = 950,
		[Token(Token = "0x4001220")]
		VREvent_MCImageUpdated = 1000,
		[Token(Token = "0x4001221")]
		VREvent_FirmwareUpdateStarted = 1100,
		[Token(Token = "0x4001222")]
		VREvent_FirmwareUpdateFinished = 1101,
		[Token(Token = "0x4001223")]
		VREvent_KeyboardClosed = 1200,
		[Token(Token = "0x4001224")]
		VREvent_KeyboardCharInput = 1201,
		[Token(Token = "0x4001225")]
		VREvent_KeyboardDone = 1202,
		[Token(Token = "0x4001226")]
		VREvent_ApplicationTransitionStarted = 1300,
		[Token(Token = "0x4001227")]
		VREvent_ApplicationTransitionAborted = 1301,
		[Token(Token = "0x4001228")]
		VREvent_ApplicationTransitionNewAppStarted = 1302,
		[Token(Token = "0x4001229")]
		VREvent_ApplicationListUpdated = 1303,
		[Token(Token = "0x400122A")]
		VREvent_ApplicationMimeTypeLoad = 1304,
		[Token(Token = "0x400122B")]
		VREvent_ApplicationTransitionNewAppLaunchComplete = 1305,
		[Token(Token = "0x400122C")]
		VREvent_ProcessConnected = 1306,
		[Token(Token = "0x400122D")]
		VREvent_ProcessDisconnected = 1307,
		[Token(Token = "0x400122E")]
		VREvent_Compositor_MirrorWindowShown = 1400,
		[Token(Token = "0x400122F")]
		VREvent_Compositor_MirrorWindowHidden = 1401,
		[Token(Token = "0x4001230")]
		VREvent_Compositor_ChaperoneBoundsShown = 1410,
		[Token(Token = "0x4001231")]
		VREvent_Compositor_ChaperoneBoundsHidden = 1411,
		[Token(Token = "0x4001232")]
		VREvent_TrackedCamera_StartVideoStream = 1500,
		[Token(Token = "0x4001233")]
		VREvent_TrackedCamera_StopVideoStream = 1501,
		[Token(Token = "0x4001234")]
		VREvent_TrackedCamera_PauseVideoStream = 1502,
		[Token(Token = "0x4001235")]
		VREvent_TrackedCamera_ResumeVideoStream = 1503,
		[Token(Token = "0x4001236")]
		VREvent_TrackedCamera_EditingSurface = 1550,
		[Token(Token = "0x4001237")]
		VREvent_PerformanceTest_EnableCapture = 1600,
		[Token(Token = "0x4001238")]
		VREvent_PerformanceTest_DisableCapture = 1601,
		[Token(Token = "0x4001239")]
		VREvent_PerformanceTest_FidelityLevel = 1602,
		[Token(Token = "0x400123A")]
		VREvent_MessageOverlay_Closed = 1650,
		[Token(Token = "0x400123B")]
		VREvent_MessageOverlayCloseRequested = 1651,
		[Token(Token = "0x400123C")]
		VREvent_Input_HapticVibration = 1700,
		[Token(Token = "0x400123D")]
		VREvent_Input_BindingLoadFailed = 1701,
		[Token(Token = "0x400123E")]
		VREvent_Input_BindingLoadSuccessful = 1702,
		[Token(Token = "0x400123F")]
		VREvent_Input_ActionManifestReloaded = 1703,
		[Token(Token = "0x4001240")]
		VREvent_Input_ActionManifestLoadFailed = 1704,
		[Token(Token = "0x4001241")]
		VREvent_SpatialAnchors_PoseUpdated = 1800,
		[Token(Token = "0x4001242")]
		VREvent_SpatialAnchors_DescriptorUpdated = 1801,
		[Token(Token = "0x4001243")]
		VREvent_SpatialAnchors_RequestPoseUpdate = 1802,
		[Token(Token = "0x4001244")]
		VREvent_SpatialAnchors_RequestDescriptorUpdate = 1803,
		[Token(Token = "0x4001245")]
		VREvent_VendorSpecific_Reserved_Start = 10000,
		[Token(Token = "0x4001246")]
		VREvent_VendorSpecific_Reserved_End = 19999
	}
	[Token(Token = "0x20002EC")]
	public enum EDeviceActivityLevel
	{
		[Token(Token = "0x4001248")]
		k_EDeviceActivityLevel_Unknown = -1,
		[Token(Token = "0x4001249")]
		k_EDeviceActivityLevel_Idle,
		[Token(Token = "0x400124A")]
		k_EDeviceActivityLevel_UserInteraction,
		[Token(Token = "0x400124B")]
		k_EDeviceActivityLevel_UserInteraction_Timeout,
		[Token(Token = "0x400124C")]
		k_EDeviceActivityLevel_Standby
	}
	[Token(Token = "0x20002ED")]
	public enum EVRButtonId
	{
		[Token(Token = "0x400124E")]
		k_EButton_System = 0,
		[Token(Token = "0x400124F")]
		k_EButton_ApplicationMenu = 1,
		[Token(Token = "0x4001250")]
		k_EButton_Grip = 2,
		[Token(Token = "0x4001251")]
		k_EButton_DPad_Left = 3,
		[Token(Token = "0x4001252")]
		k_EButton_DPad_Up = 4,
		[Token(Token = "0x4001253")]
		k_EButton_DPad_Right = 5,
		[Token(Token = "0x4001254")]
		k_EButton_DPad_Down = 6,
		[Token(Token = "0x4001255")]
		k_EButton_A = 7,
		[Token(Token = "0x4001256")]
		k_EButton_ProximitySensor = 31,
		[Token(Token = "0x4001257")]
		k_EButton_Axis0 = 32,
		[Token(Token = "0x4001258")]
		k_EButton_Axis1 = 33,
		[Token(Token = "0x4001259")]
		k_EButton_Axis2 = 34,
		[Token(Token = "0x400125A")]
		k_EButton_Axis3 = 35,
		[Token(Token = "0x400125B")]
		k_EButton_Axis4 = 36,
		[Token(Token = "0x400125C")]
		k_EButton_SteamVR_Touchpad = 32,
		[Token(Token = "0x400125D")]
		k_EButton_SteamVR_Trigger = 33,
		[Token(Token = "0x400125E")]
		k_EButton_Dashboard_Back = 2,
		[Token(Token = "0x400125F")]
		k_EButton_Knuckles_A = 2,
		[Token(Token = "0x4001260")]
		k_EButton_Knuckles_B = 1,
		[Token(Token = "0x4001261")]
		k_EButton_Knuckles_JoyStick = 35,
		[Token(Token = "0x4001262")]
		k_EButton_Max = 64
	}
	[Token(Token = "0x20002EE")]
	public enum EVRMouseButton
	{
		[Token(Token = "0x4001264")]
		Left = 1,
		[Token(Token = "0x4001265")]
		Right = 2,
		[Token(Token = "0x4001266")]
		Middle = 4
	}
	[Token(Token = "0x20002EF")]
	public enum EDualAnalogWhich
	{
		[Token(Token = "0x4001268")]
		k_EDualAnalog_Left,
		[Token(Token = "0x4001269")]
		k_EDualAnalog_Right
	}
	[Token(Token = "0x20002F0")]
	public enum EVRInputError
	{
		[Token(Token = "0x400126B")]
		None,
		[Token(Token = "0x400126C")]
		NameNotFound,
		[Token(Token = "0x400126D")]
		WrongType,
		[Token(Token = "0x400126E")]
		InvalidHandle,
		[Token(Token = "0x400126F")]
		InvalidParam,
		[Token(Token = "0x4001270")]
		NoSteam,
		[Token(Token = "0x4001271")]
		MaxCapacityReached,
		[Token(Token = "0x4001272")]
		IPCError,
		[Token(Token = "0x4001273")]
		NoActiveActionSet,
		[Token(Token = "0x4001274")]
		InvalidDevice,
		[Token(Token = "0x4001275")]
		InvalidSkeleton,
		[Token(Token = "0x4001276")]
		InvalidBoneCount,
		[Token(Token = "0x4001277")]
		InvalidCompressedData,
		[Token(Token = "0x4001278")]
		NoData,
		[Token(Token = "0x4001279")]
		BufferTooSmall,
		[Token(Token = "0x400127A")]
		MismatchedActionManifest,
		[Token(Token = "0x400127B")]
		MissingSkeletonData
	}
	[Token(Token = "0x20002F1")]
	public enum EVRSpatialAnchorError
	{
		[Token(Token = "0x400127D")]
		Success,
		[Token(Token = "0x400127E")]
		Internal,
		[Token(Token = "0x400127F")]
		UnknownHandle,
		[Token(Token = "0x4001280")]
		ArrayTooSmall,
		[Token(Token = "0x4001281")]
		InvalidDescriptorChar,
		[Token(Token = "0x4001282")]
		NotYetAvailable,
		[Token(Token = "0x4001283")]
		NotAvailableInThisUniverse,
		[Token(Token = "0x4001284")]
		PermanentlyUnavailable,
		[Token(Token = "0x4001285")]
		WrongDriver,
		[Token(Token = "0x4001286")]
		DescriptorTooLong,
		[Token(Token = "0x4001287")]
		Unknown,
		[Token(Token = "0x4001288")]
		NoRoomCalibration,
		[Token(Token = "0x4001289")]
		InvalidArgument,
		[Token(Token = "0x400128A")]
		UnknownDriver
	}
	[Token(Token = "0x20002F2")]
	public enum EHiddenAreaMeshType
	{
		[Token(Token = "0x400128C")]
		k_eHiddenAreaMesh_Standard,
		[Token(Token = "0x400128D")]
		k_eHiddenAreaMesh_Inverse,
		[Token(Token = "0x400128E")]
		k_eHiddenAreaMesh_LineLoop,
		[Token(Token = "0x400128F")]
		k_eHiddenAreaMesh_Max
	}
	[Token(Token = "0x20002F3")]
	public enum EVRControllerAxisType
	{
		[Token(Token = "0x4001291")]
		k_eControllerAxis_None,
		[Token(Token = "0x4001292")]
		k_eControllerAxis_TrackPad,
		[Token(Token = "0x4001293")]
		k_eControllerAxis_Joystick,
		[Token(Token = "0x4001294")]
		k_eControllerAxis_Trigger
	}
	[Token(Token = "0x20002F4")]
	public enum EVRControllerEventOutputType
	{
		[Token(Token = "0x4001296")]
		ControllerEventOutput_OSEvents,
		[Token(Token = "0x4001297")]
		ControllerEventOutput_VREvents
	}
	[Token(Token = "0x20002F5")]
	public enum ECollisionBoundsStyle
	{
		[Token(Token = "0x4001299")]
		COLLISION_BOUNDS_STYLE_BEGINNER,
		[Token(Token = "0x400129A")]
		COLLISION_BOUNDS_STYLE_INTERMEDIATE,
		[Token(Token = "0x400129B")]
		COLLISION_BOUNDS_STYLE_SQUARES,
		[Token(Token = "0x400129C")]
		COLLISION_BOUNDS_STYLE_ADVANCED,
		[Token(Token = "0x400129D")]
		COLLISION_BOUNDS_STYLE_NONE,
		[Token(Token = "0x400129E")]
		COLLISION_BOUNDS_STYLE_COUNT
	}
	[Token(Token = "0x20002F6")]
	public enum EVROverlayError
	{
		[Token(Token = "0x40012A0")]
		None = 0,
		[Token(Token = "0x40012A1")]
		UnknownOverlay = 10,
		[Token(Token = "0x40012A2")]
		InvalidHandle = 11,
		[Token(Token = "0x40012A3")]
		PermissionDenied = 12,
		[Token(Token = "0x40012A4")]
		OverlayLimitExceeded = 13,
		[Token(Token = "0x40012A5")]
		WrongVisibilityType = 14,
		[Token(Token = "0x40012A6")]
		KeyTooLong = 15,
		[Token(Token = "0x40012A7")]
		NameTooLong = 16,
		[Token(Token = "0x40012A8")]
		KeyInUse = 17,
		[Token(Token = "0x40012A9")]
		WrongTransformType = 18,
		[Token(Token = "0x40012AA")]
		InvalidTrackedDevice = 19,
		[Token(Token = "0x40012AB")]
		InvalidParameter = 20,
		[Token(Token = "0x40012AC")]
		ThumbnailCantBeDestroyed = 21,
		[Token(Token = "0x40012AD")]
		ArrayTooSmall = 22,
		[Token(Token = "0x40012AE")]
		RequestFailed = 23,
		[Token(Token = "0x40012AF")]
		InvalidTexture = 24,
		[Token(Token = "0x40012B0")]
		UnableToLoadFile = 25,
		[Token(Token = "0x40012B1")]
		KeyboardAlreadyInUse = 26,
		[Token(Token = "0x40012B2")]
		NoNeighbor = 27,
		[Token(Token = "0x40012B3")]
		TooManyMaskPrimitives = 29,
		[Token(Token = "0x40012B4")]
		BadMaskPrimitive = 30,
		[Token(Token = "0x40012B5")]
		TextureAlreadyLocked = 31,
		[Token(Token = "0x40012B6")]
		TextureLockCapacityReached = 32,
		[Token(Token = "0x40012B7")]
		TextureNotLocked = 33
	}
	[Token(Token = "0x20002F7")]
	public enum EVRApplicationType
	{
		[Token(Token = "0x40012B9")]
		VRApplication_Other,
		[Token(Token = "0x40012BA")]
		VRApplication_Scene,
		[Token(Token = "0x40012BB")]
		VRApplication_Overlay,
		[Token(Token = "0x40012BC")]
		VRApplication_Background,
		[Token(Token = "0x40012BD")]
		VRApplication_Utility,
		[Token(Token = "0x40012BE")]
		VRApplication_VRMonitor,
		[Token(Token = "0x40012BF")]
		VRApplication_SteamWatchdog,
		[Token(Token = "0x40012C0")]
		VRApplication_Bootstrapper,
		[Token(Token = "0x40012C1")]
		VRApplication_Max
	}
	[Token(Token = "0x20002F8")]
	public enum EVRFirmwareError
	{
		[Token(Token = "0x40012C3")]
		None,
		[Token(Token = "0x40012C4")]
		Success,
		[Token(Token = "0x40012C5")]
		Fail
	}
	[Token(Token = "0x20002F9")]
	public enum EVRNotificationError
	{
		[Token(Token = "0x40012C7")]
		OK = 0,
		[Token(Token = "0x40012C8")]
		InvalidNotificationId = 100,
		[Token(Token = "0x40012C9")]
		NotificationQueueFull = 101,
		[Token(Token = "0x40012CA")]
		InvalidOverlayHandle = 102,
		[Token(Token = "0x40012CB")]
		SystemWithUserValueAlreadyExists = 103
	}
	[Token(Token = "0x20002FA")]
	public enum EVRSkeletalMotionRange
	{
		[Token(Token = "0x40012CD")]
		WithController,
		[Token(Token = "0x40012CE")]
		WithoutController
	}
	[Token(Token = "0x20002FB")]
	public enum EVRInitError
	{
		[Token(Token = "0x40012D0")]
		None = 0,
		[Token(Token = "0x40012D1")]
		Unknown = 1,
		[Token(Token = "0x40012D2")]
		Init_InstallationNotFound = 100,
		[Token(Token = "0x40012D3")]
		Init_InstallationCorrupt = 101,
		[Token(Token = "0x40012D4")]
		Init_VRClientDLLNotFound = 102,
		[Token(Token = "0x40012D5")]
		Init_FileNotFound = 103,
		[Token(Token = "0x40012D6")]
		Init_FactoryNotFound = 104,
		[Token(Token = "0x40012D7")]
		Init_InterfaceNotFound = 105,
		[Token(Token = "0x40012D8")]
		Init_InvalidInterface = 106,
		[Token(Token = "0x40012D9")]
		Init_UserConfigDirectoryInvalid = 107,
		[Token(Token = "0x40012DA")]
		Init_HmdNotFound = 108,
		[Token(Token = "0x40012DB")]
		Init_NotInitialized = 109,
		[Token(Token = "0x40012DC")]
		Init_PathRegistryNotFound = 110,
		[Token(Token = "0x40012DD")]
		Init_NoConfigPath = 111,
		[Token(Token = "0x40012DE")]
		Init_NoLogPath = 112,
		[Token(Token = "0x40012DF")]
		Init_PathRegistryNotWritable = 113,
		[Token(Token = "0x40012E0")]
		Init_AppInfoInitFailed = 114,
		[Token(Token = "0x40012E1")]
		Init_Retry = 115,
		[Token(Token = "0x40012E2")]
		Init_InitCanceledByUser = 116,
		[Token(Token = "0x40012E3")]
		Init_AnotherAppLaunching = 117,
		[Token(Token = "0x40012E4")]
		Init_SettingsInitFailed = 118,
		[Token(Token = "0x40012E5")]
		Init_ShuttingDown = 119,
		[Token(Token = "0x40012E6")]
		Init_TooManyObjects = 120,
		[Token(Token = "0x40012E7")]
		Init_NoServerForBackgroundApp = 121,
		[Token(Token = "0x40012E8")]
		Init_NotSupportedWithCompositor = 122,
		[Token(Token = "0x40012E9")]
		Init_NotAvailableToUtilityApps = 123,
		[Token(Token = "0x40012EA")]
		Init_Internal = 124,
		[Token(Token = "0x40012EB")]
		Init_HmdDriverIdIsNone = 125,
		[Token(Token = "0x40012EC")]
		Init_HmdNotFoundPresenceFailed = 126,
		[Token(Token = "0x40012ED")]
		Init_VRMonitorNotFound = 127,
		[Token(Token = "0x40012EE")]
		Init_VRMonitorStartupFailed = 128,
		[Token(Token = "0x40012EF")]
		Init_LowPowerWatchdogNotSupported = 129,
		[Token(Token = "0x40012F0")]
		Init_InvalidApplicationType = 130,
		[Token(Token = "0x40012F1")]
		Init_NotAvailableToWatchdogApps = 131,
		[Token(Token = "0x40012F2")]
		Init_WatchdogDisabledInSettings = 132,
		[Token(Token = "0x40012F3")]
		Init_VRDashboardNotFound = 133,
		[Token(Token = "0x40012F4")]
		Init_VRDashboardStartupFailed = 134,
		[Token(Token = "0x40012F5")]
		Init_VRHomeNotFound = 135,
		[Token(Token = "0x40012F6")]
		Init_VRHomeStartupFailed = 136,
		[Token(Token = "0x40012F7")]
		Init_RebootingBusy = 137,
		[Token(Token = "0x40012F8")]
		Init_FirmwareUpdateBusy = 138,
		[Token(Token = "0x40012F9")]
		Init_FirmwareRecoveryBusy = 139,
		[Token(Token = "0x40012FA")]
		Init_USBServiceBusy = 140,
		[Token(Token = "0x40012FB")]
		Init_VRWebHelperStartupFailed = 141,
		[Token(Token = "0x40012FC")]
		Init_TrackerManagerInitFailed = 142,
		[Token(Token = "0x40012FD")]
		Driver_Failed = 200,
		[Token(Token = "0x40012FE")]
		Driver_Unknown = 201,
		[Token(Token = "0x40012FF")]
		Driver_HmdUnknown = 202,
		[Token(Token = "0x4001300")]
		Driver_NotLoaded = 203,
		[Token(Token = "0x4001301")]
		Driver_RuntimeOutOfDate = 204,
		[Token(Token = "0x4001302")]
		Driver_HmdInUse = 205,
		[Token(Token = "0x4001303")]
		Driver_NotCalibrated = 206,
		[Token(Token = "0x4001304")]
		Driver_CalibrationInvalid = 207,
		[Token(Token = "0x4001305")]
		Driver_HmdDisplayNotFound = 208,
		[Token(Token = "0x4001306")]
		Driver_TrackedDeviceInterfaceUnknown = 209,
		[Token(Token = "0x4001307")]
		Driver_HmdDriverIdOutOfBounds = 211,
		[Token(Token = "0x4001308")]
		Driver_HmdDisplayMirrored = 212,
		[Token(Token = "0x4001309")]
		IPC_ServerInitFailed = 300,
		[Token(Token = "0x400130A")]
		IPC_ConnectFailed = 301,
		[Token(Token = "0x400130B")]
		IPC_SharedStateInitFailed = 302,
		[Token(Token = "0x400130C")]
		IPC_CompositorInitFailed = 303,
		[Token(Token = "0x400130D")]
		IPC_MutexInitFailed = 304,
		[Token(Token = "0x400130E")]
		IPC_Failed = 305,
		[Token(Token = "0x400130F")]
		IPC_CompositorConnectFailed = 306,
		[Token(Token = "0x4001310")]
		IPC_CompositorInvalidConnectResponse = 307,
		[Token(Token = "0x4001311")]
		IPC_ConnectFailedAfterMultipleAttempts = 308,
		[Token(Token = "0x4001312")]
		Compositor_Failed = 400,
		[Token(Token = "0x4001313")]
		Compositor_D3D11HardwareRequired = 401,
		[Token(Token = "0x4001314")]
		Compositor_FirmwareRequiresUpdate = 402,
		[Token(Token = "0x4001315")]
		Compositor_OverlayInitFailed = 403,
		[Token(Token = "0x4001316")]
		Compositor_ScreenshotsInitFailed = 404,
		[Token(Token = "0x4001317")]
		Compositor_UnableToCreateDevice = 405,
		[Token(Token = "0x4001318")]
		VendorSpecific_UnableToConnectToOculusRuntime = 1000,
		[Token(Token = "0x4001319")]
		VendorSpecific_WindowsNotInDevMode = 1001,
		[Token(Token = "0x400131A")]
		VendorSpecific_HmdFound_CantOpenDevice = 1101,
		[Token(Token = "0x400131B")]
		VendorSpecific_HmdFound_UnableToRequestConfigStart = 1102,
		[Token(Token = "0x400131C")]
		VendorSpecific_HmdFound_NoStoredConfig = 1103,
		[Token(Token = "0x400131D")]
		VendorSpecific_HmdFound_ConfigTooBig = 1104,
		[Token(Token = "0x400131E")]
		VendorSpecific_HmdFound_ConfigTooSmall = 1105,
		[Token(Token = "0x400131F")]
		VendorSpecific_HmdFound_UnableToInitZLib = 1106,
		[Token(Token = "0x4001320")]
		VendorSpecific_HmdFound_CantReadFirmwareVersion = 1107,
		[Token(Token = "0x4001321")]
		VendorSpecific_HmdFound_UnableToSendUserDataStart = 1108,
		[Token(Token = "0x4001322")]
		VendorSpecific_HmdFound_UnableToGetUserDataStart = 1109,
		[Token(Token = "0x4001323")]
		VendorSpecific_HmdFound_UnableToGetUserDataNext = 1110,
		[Token(Token = "0x4001324")]
		VendorSpecific_HmdFound_UserDataAddressRange = 1111,
		[Token(Token = "0x4001325")]
		VendorSpecific_HmdFound_UserDataError = 1112,
		[Token(Token = "0x4001326")]
		VendorSpecific_HmdFound_ConfigFailedSanityCheck = 1113,
		[Token(Token = "0x4001327")]
		Steam_SteamInstallationNotFound = 2000
	}
	[Token(Token = "0x20002FC")]
	public enum EVRScreenshotType
	{
		[Token(Token = "0x4001329")]
		None,
		[Token(Token = "0x400132A")]
		Mono,
		[Token(Token = "0x400132B")]
		Stereo,
		[Token(Token = "0x400132C")]
		Cubemap,
		[Token(Token = "0x400132D")]
		MonoPanorama,
		[Token(Token = "0x400132E")]
		StereoPanorama
	}
	[Token(Token = "0x20002FD")]
	public enum EVRScreenshotPropertyFilenames
	{
		[Token(Token = "0x4001330")]
		Preview,
		[Token(Token = "0x4001331")]
		VR
	}
	[Token(Token = "0x20002FE")]
	public enum EVRTrackedCameraError
	{
		[Token(Token = "0x4001333")]
		None = 0,
		[Token(Token = "0x4001334")]
		OperationFailed = 100,
		[Token(Token = "0x4001335")]
		InvalidHandle = 101,
		[Token(Token = "0x4001336")]
		InvalidFrameHeaderVersion = 102,
		[Token(Token = "0x4001337")]
		OutOfHandles = 103,
		[Token(Token = "0x4001338")]
		IPCFailure = 104,
		[Token(Token = "0x4001339")]
		NotSupportedForThisDevice = 105,
		[Token(Token = "0x400133A")]
		SharedMemoryFailure = 106,
		[Token(Token = "0x400133B")]
		FrameBufferingFailure = 107,
		[Token(Token = "0x400133C")]
		StreamSetupFailure = 108,
		[Token(Token = "0x400133D")]
		InvalidGLTextureId = 109,
		[Token(Token = "0x400133E")]
		InvalidSharedTextureHandle = 110,
		[Token(Token = "0x400133F")]
		FailedToGetGLTextureId = 111,
		[Token(Token = "0x4001340")]
		SharedTextureFailure = 112,
		[Token(Token = "0x4001341")]
		NoFrameAvailable = 113,
		[Token(Token = "0x4001342")]
		InvalidArgument = 114,
		[Token(Token = "0x4001343")]
		InvalidFrameBufferSize = 115
	}
	[Token(Token = "0x20002FF")]
	public enum EVRTrackedCameraFrameLayout
	{
		[Token(Token = "0x4001345")]
		Mono = 1,
		[Token(Token = "0x4001346")]
		Stereo = 2,
		[Token(Token = "0x4001347")]
		VerticalLayout = 0x10,
		[Token(Token = "0x4001348")]
		HorizontalLayout = 0x20
	}
	[Token(Token = "0x2000300")]
	public enum EVRTrackedCameraFrameType
	{
		[Token(Token = "0x400134A")]
		Distorted,
		[Token(Token = "0x400134B")]
		Undistorted,
		[Token(Token = "0x400134C")]
		MaximumUndistorted,
		[Token(Token = "0x400134D")]
		MAX_CAMERA_FRAME_TYPES
	}
	[Token(Token = "0x2000301")]
	public enum EVSync
	{
		[Token(Token = "0x400134F")]
		None,
		[Token(Token = "0x4001350")]
		WaitRender,
		[Token(Token = "0x4001351")]
		NoWaitRender
	}
	[Token(Token = "0x2000302")]
	public enum EVRMuraCorrectionMode
	{
		[Token(Token = "0x4001353")]
		Default,
		[Token(Token = "0x4001354")]
		NoCorrection
	}
	[Token(Token = "0x2000303")]
	public enum Imu_OffScaleFlags
	{
		[Token(Token = "0x4001356")]
		OffScale_AccelX = 1,
		[Token(Token = "0x4001357")]
		OffScale_AccelY = 2,
		[Token(Token = "0x4001358")]
		OffScale_AccelZ = 4,
		[Token(Token = "0x4001359")]
		OffScale_GyroX = 8,
		[Token(Token = "0x400135A")]
		OffScale_GyroY = 0x10,
		[Token(Token = "0x400135B")]
		OffScale_GyroZ = 0x20
	}
	[Token(Token = "0x2000304")]
	public enum EVRApplicationError
	{
		[Token(Token = "0x400135D")]
		None = 0,
		[Token(Token = "0x400135E")]
		AppKeyAlreadyExists = 100,
		[Token(Token = "0x400135F")]
		NoManifest = 101,
		[Token(Token = "0x4001360")]
		NoApplication = 102,
		[Token(Token = "0x4001361")]
		InvalidIndex = 103,
		[Token(Token = "0x4001362")]
		UnknownApplication = 104,
		[Token(Token = "0x4001363")]
		IPCFailed = 105,
		[Token(Token = "0x4001364")]
		ApplicationAlreadyRunning = 106,
		[Token(Token = "0x4001365")]
		InvalidManifest = 107,
		[Token(Token = "0x4001366")]
		InvalidApplication = 108,
		[Token(Token = "0x4001367")]
		LaunchFailed = 109,
		[Token(Token = "0x4001368")]
		ApplicationAlreadyStarting = 110,
		[Token(Token = "0x4001369")]
		LaunchInProgress = 111,
		[Token(Token = "0x400136A")]
		OldApplicationQuitting = 112,
		[Token(Token = "0x400136B")]
		TransitionAborted = 113,
		[Token(Token = "0x400136C")]
		IsTemplate = 114,
		[Token(Token = "0x400136D")]
		SteamVRIsExiting = 115,
		[Token(Token = "0x400136E")]
		BufferTooSmall = 200,
		[Token(Token = "0x400136F")]
		PropertyNotSet = 201,
		[Token(Token = "0x4001370")]
		UnknownProperty = 202,
		[Token(Token = "0x4001371")]
		InvalidParameter = 203
	}
	[Token(Token = "0x2000305")]
	public enum EVRApplicationProperty
	{
		[Token(Token = "0x4001373")]
		Name_String = 0,
		[Token(Token = "0x4001374")]
		LaunchType_String = 11,
		[Token(Token = "0x4001375")]
		WorkingDirectory_String = 12,
		[Token(Token = "0x4001376")]
		BinaryPath_String = 13,
		[Token(Token = "0x4001377")]
		Arguments_String = 14,
		[Token(Token = "0x4001378")]
		URL_String = 15,
		[Token(Token = "0x4001379")]
		Description_String = 50,
		[Token(Token = "0x400137A")]
		NewsURL_String = 51,
		[Token(Token = "0x400137B")]
		ImagePath_String = 52,
		[Token(Token = "0x400137C")]
		Source_String = 53,
		[Token(Token = "0x400137D")]
		ActionManifestURL_String = 54,
		[Token(Token = "0x400137E")]
		IsDashboardOverlay_Bool = 60,
		[Token(Token = "0x400137F")]
		IsTemplate_Bool = 61,
		[Token(Token = "0x4001380")]
		IsInstanced_Bool = 62,
		[Token(Token = "0x4001381")]
		IsInternal_Bool = 63,
		[Token(Token = "0x4001382")]
		WantsCompositorPauseInStandby_Bool = 64,
		[Token(Token = "0x4001383")]
		LastLaunchTime_Uint64 = 70
	}
	[Token(Token = "0x2000306")]
	public enum EVRApplicationTransitionState
	{
		[Token(Token = "0x4001385")]
		VRApplicationTransition_None = 0,
		[Token(Token = "0x4001386")]
		VRApplicationTransition_OldAppQuitSent = 10,
		[Token(Token = "0x4001387")]
		VRApplicationTransition_WaitingForExternalLaunch = 11,
		[Token(Token = "0x4001388")]
		VRApplicationTransition_NewAppLaunched = 20
	}
	[Token(Token = "0x2000307")]
	public enum ChaperoneCalibrationState
	{
		[Token(Token = "0x400138A")]
		OK = 1,
		[Token(Token = "0x400138B")]
		Warning = 100,
		[Token(Token = "0x400138C")]
		Warning_BaseStationMayHaveMoved = 101,
		[Token(Token = "0x400138D")]
		Warning_BaseStationRemoved = 102,
		[Token(Token = "0x400138E")]
		Warning_SeatedBoundsInvalid = 103,
		[Token(Token = "0x400138F")]
		Error = 200,
		[Token(Token = "0x4001390")]
		Error_BaseStationUninitialized = 201,
		[Token(Token = "0x4001391")]
		Error_BaseStationConflict = 202,
		[Token(Token = "0x4001392")]
		Error_PlayAreaInvalid = 203,
		[Token(Token = "0x4001393")]
		Error_CollisionBoundsInvalid = 204
	}
	[Token(Token = "0x2000308")]
	public enum EChaperoneConfigFile
	{
		[Token(Token = "0x4001395")]
		Live = 1,
		[Token(Token = "0x4001396")]
		Temp
	}
	[Token(Token = "0x2000309")]
	public enum EChaperoneImportFlags
	{
		[Token(Token = "0x4001398")]
		EChaperoneImport_BoundsOnly = 1
	}
	[Token(Token = "0x200030A")]
	public enum EVRCompositorError
	{
		[Token(Token = "0x400139A")]
		None = 0,
		[Token(Token = "0x400139B")]
		RequestFailed = 1,
		[Token(Token = "0x400139C")]
		IncompatibleVersion = 100,
		[Token(Token = "0x400139D")]
		DoNotHaveFocus = 101,
		[Token(Token = "0x400139E")]
		InvalidTexture = 102,
		[Token(Token = "0x400139F")]
		IsNotSceneApplication = 103,
		[Token(Token = "0x40013A0")]
		TextureIsOnWrongDevice = 104,
		[Token(Token = "0x40013A1")]
		TextureUsesUnsupportedFormat = 105,
		[Token(Token = "0x40013A2")]
		SharedTexturesNotSupported = 106,
		[Token(Token = "0x40013A3")]
		IndexOutOfRange = 107,
		[Token(Token = "0x40013A4")]
		AlreadySubmitted = 108,
		[Token(Token = "0x40013A5")]
		InvalidBounds = 109
	}
	[Token(Token = "0x200030B")]
	public enum EVRCompositorTimingMode
	{
		[Token(Token = "0x40013A7")]
		Implicit,
		[Token(Token = "0x40013A8")]
		Explicit_RuntimePerformsPostPresentHandoff,
		[Token(Token = "0x40013A9")]
		Explicit_ApplicationPerformsPostPresentHandoff
	}
	[Token(Token = "0x200030C")]
	public enum VROverlayInputMethod
	{
		[Token(Token = "0x40013AB")]
		None,
		[Token(Token = "0x40013AC")]
		Mouse,
		[Token(Token = "0x40013AD")]
		DualAnalog
	}
	[Token(Token = "0x200030D")]
	public enum VROverlayTransformType
	{
		[Token(Token = "0x40013AF")]
		VROverlayTransform_Absolute,
		[Token(Token = "0x40013B0")]
		VROverlayTransform_TrackedDeviceRelative,
		[Token(Token = "0x40013B1")]
		VROverlayTransform_SystemOverlay,
		[Token(Token = "0x40013B2")]
		VROverlayTransform_TrackedComponent
	}
	[Token(Token = "0x200030E")]
	public enum VROverlayFlags
	{
		[Token(Token = "0x40013B4")]
		None,
		[Token(Token = "0x40013B5")]
		Curved,
		[Token(Token = "0x40013B6")]
		RGSS4X,
		[Token(Token = "0x40013B7")]
		NoDashboardTab,
		[Token(Token = "0x40013B8")]
		AcceptsGamepadEvents,
		[Token(Token = "0x40013B9")]
		ShowGamepadFocus,
		[Token(Token = "0x40013BA")]
		SendVRScrollEvents,
		[Token(Token = "0x40013BB")]
		SendVRTouchpadEvents,
		[Token(Token = "0x40013BC")]
		ShowTouchPadScrollWheel,
		[Token(Token = "0x40013BD")]
		TransferOwnershipToInternalProcess,
		[Token(Token = "0x40013BE")]
		SideBySide_Parallel,
		[Token(Token = "0x40013BF")]
		SideBySide_Crossed,
		[Token(Token = "0x40013C0")]
		Panorama,
		[Token(Token = "0x40013C1")]
		StereoPanorama,
		[Token(Token = "0x40013C2")]
		SortWithNonSceneOverlays,
		[Token(Token = "0x40013C3")]
		VisibleInDashboard
	}
	[Token(Token = "0x200030F")]
	public enum VRMessageOverlayResponse
	{
		[Token(Token = "0x40013C5")]
		ButtonPress_0,
		[Token(Token = "0x40013C6")]
		ButtonPress_1,
		[Token(Token = "0x40013C7")]
		ButtonPress_2,
		[Token(Token = "0x40013C8")]
		ButtonPress_3,
		[Token(Token = "0x40013C9")]
		CouldntFindSystemOverlay,
		[Token(Token = "0x40013CA")]
		CouldntFindOrCreateClientOverlay,
		[Token(Token = "0x40013CB")]
		ApplicationQuit
	}
	[Token(Token = "0x2000310")]
	public enum EGamepadTextInputMode
	{
		[Token(Token = "0x40013CD")]
		k_EGamepadTextInputModeNormal,
		[Token(Token = "0x40013CE")]
		k_EGamepadTextInputModePassword,
		[Token(Token = "0x40013CF")]
		k_EGamepadTextInputModeSubmit
	}
	[Token(Token = "0x2000311")]
	public enum EGamepadTextInputLineMode
	{
		[Token(Token = "0x40013D1")]
		k_EGamepadTextInputLineModeSingleLine,
		[Token(Token = "0x40013D2")]
		k_EGamepadTextInputLineModeMultipleLines
	}
	[Token(Token = "0x2000312")]
	public enum EOverlayDirection
	{
		[Token(Token = "0x40013D4")]
		Up,
		[Token(Token = "0x40013D5")]
		Down,
		[Token(Token = "0x40013D6")]
		Left,
		[Token(Token = "0x40013D7")]
		Right,
		[Token(Token = "0x40013D8")]
		Count
	}
	[Token(Token = "0x2000313")]
	public enum EVROverlayIntersectionMaskPrimitiveType
	{
		[Token(Token = "0x40013DA")]
		OverlayIntersectionPrimitiveType_Rectangle,
		[Token(Token = "0x40013DB")]
		OverlayIntersectionPrimitiveType_Circle
	}
	[Token(Token = "0x2000314")]
	public enum EVRRenderModelError
	{
		[Token(Token = "0x40013DD")]
		None = 0,
		[Token(Token = "0x40013DE")]
		Loading = 100,
		[Token(Token = "0x40013DF")]
		NotSupported = 200,
		[Token(Token = "0x40013E0")]
		InvalidArg = 300,
		[Token(Token = "0x40013E1")]
		InvalidModel = 301,
		[Token(Token = "0x40013E2")]
		NoShapes = 302,
		[Token(Token = "0x40013E3")]
		MultipleShapes = 303,
		[Token(Token = "0x40013E4")]
		TooManyVertices = 304,
		[Token(Token = "0x40013E5")]
		MultipleTextures = 305,
		[Token(Token = "0x40013E6")]
		BufferTooSmall = 306,
		[Token(Token = "0x40013E7")]
		NotEnoughNormals = 307,
		[Token(Token = "0x40013E8")]
		NotEnoughTexCoords = 308,
		[Token(Token = "0x40013E9")]
		InvalidTexture = 400
	}
	[Token(Token = "0x2000315")]
	public enum EVRComponentProperty
	{
		[Token(Token = "0x40013EB")]
		IsStatic = 1,
		[Token(Token = "0x40013EC")]
		IsVisible = 2,
		[Token(Token = "0x40013ED")]
		IsTouched = 4,
		[Token(Token = "0x40013EE")]
		IsPressed = 8,
		[Token(Token = "0x40013EF")]
		IsScrolled = 0x10
	}
	[Token(Token = "0x2000316")]
	public enum EVRNotificationType
	{
		[Token(Token = "0x40013F1")]
		Transient,
		[Token(Token = "0x40013F2")]
		Persistent,
		[Token(Token = "0x40013F3")]
		Transient_SystemWithUserValue
	}
	[Token(Token = "0x2000317")]
	public enum EVRNotificationStyle
	{
		[Token(Token = "0x40013F5")]
		None = 0,
		[Token(Token = "0x40013F6")]
		Application = 100,
		[Token(Token = "0x40013F7")]
		Contact_Disabled = 200,
		[Token(Token = "0x40013F8")]
		Contact_Enabled = 201,
		[Token(Token = "0x40013F9")]
		Contact_Active = 202
	}
	[Token(Token = "0x2000318")]
	public enum EVRSettingsError
	{
		[Token(Token = "0x40013FB")]
		None,
		[Token(Token = "0x40013FC")]
		IPCFailed,
		[Token(Token = "0x40013FD")]
		WriteFailed,
		[Token(Token = "0x40013FE")]
		ReadFailed,
		[Token(Token = "0x40013FF")]
		JsonParseFailed,
		[Token(Token = "0x4001400")]
		UnsetSettingHasNoDefault
	}
	[Token(Token = "0x2000319")]
	public enum EVRScreenshotError
	{
		[Token(Token = "0x4001402")]
		None = 0,
		[Token(Token = "0x4001403")]
		RequestFailed = 1,
		[Token(Token = "0x4001404")]
		IncompatibleVersion = 100,
		[Token(Token = "0x4001405")]
		NotFound = 101,
		[Token(Token = "0x4001406")]
		BufferTooSmall = 102,
		[Token(Token = "0x4001407")]
		ScreenshotAlreadyInProgress = 108
	}
	[Token(Token = "0x200031A")]
	public enum EVRSkeletalTransformSpace
	{
		[Token(Token = "0x4001409")]
		Model,
		[Token(Token = "0x400140A")]
		Parent,
		[Token(Token = "0x400140B")]
		Additive
	}
	[Token(Token = "0x200031B")]
	public enum EVRInputFilterCancelType
	{
		[Token(Token = "0x400140D")]
		VRInputFilterCancel_Timers,
		[Token(Token = "0x400140E")]
		VRInputFilterCancel_Momentum
	}
	[Token(Token = "0x200031C")]
	public enum EIOBufferError
	{
		[Token(Token = "0x4001410")]
		IOBuffer_Success = 0,
		[Token(Token = "0x4001411")]
		IOBuffer_OperationFailed = 100,
		[Token(Token = "0x4001412")]
		IOBuffer_InvalidHandle = 101,
		[Token(Token = "0x4001413")]
		IOBuffer_InvalidArgument = 102,
		[Token(Token = "0x4001414")]
		IOBuffer_PathExists = 103,
		[Token(Token = "0x4001415")]
		IOBuffer_PathDoesNotExist = 104,
		[Token(Token = "0x4001416")]
		IOBuffer_Permission = 105
	}
	[Token(Token = "0x200031D")]
	public enum EIOBufferMode
	{
		[Token(Token = "0x4001418")]
		Read = 1,
		[Token(Token = "0x4001419")]
		Write = 2,
		[Token(Token = "0x400141A")]
		Create = 0x200
	}
	[StructLayout(2)]
	[Token(Token = "0x200031E")]
	public struct VREvent_Data_t
	{
		[Token(Token = "0x400141B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Reserved_t reserved;

		[Token(Token = "0x400141C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Controller_t controller;

		[Token(Token = "0x400141D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Mouse_t mouse;

		[Token(Token = "0x400141E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Scroll_t scroll;

		[Token(Token = "0x400141F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Process_t process;

		[Token(Token = "0x4001420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Notification_t notification;

		[Token(Token = "0x4001421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Overlay_t overlay;

		[Token(Token = "0x4001422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Status_t status;

		[Token(Token = "0x4001423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Ipd_t ipd;

		[Token(Token = "0x4001424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Chaperone_t chaperone;

		[Token(Token = "0x4001425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_PerformanceTest_t performanceTest;

		[Token(Token = "0x4001426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_TouchPadMove_t touchPadMove;

		[Token(Token = "0x4001427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_SeatedZeroPoseReset_t seatedZeroPoseReset;

		[Token(Token = "0x4001428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Screenshot_t screenshot;

		[Token(Token = "0x4001429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_ScreenshotProgress_t screenshotProgress;

		[Token(Token = "0x400142A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_ApplicationLaunch_t applicationLaunch;

		[Token(Token = "0x400142B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_EditingCameraSurface_t cameraSurface;

		[Token(Token = "0x400142C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_MessageOverlay_t messageOverlay;

		[Token(Token = "0x400142D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Property_t property;

		[Token(Token = "0x400142E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_DualAnalog_t dualAnalog;

		[Token(Token = "0x400142F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_HapticVibration_t hapticVibration;

		[Token(Token = "0x4001430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_WebConsole_t webConsole;

		[Token(Token = "0x4001431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_InputBindingLoad_t inputBinding;

		[Token(Token = "0x4001432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_SpatialAnchor_t spatialAnchor;

		[Token(Token = "0x4001433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Keyboard_t keyboard;
	}
	[StructLayout(2)]
	[Token(Token = "0x200031F")]
	public struct VROverlayIntersectionMaskPrimitive_Data_t
	{
		[Token(Token = "0x4001434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntersectionMaskRectangle_t m_Rectangle;

		[Token(Token = "0x4001435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntersectionMaskCircle_t m_Circle;
	}
	[Token(Token = "0x2000320")]
	public struct HmdMatrix34_t
	{
		[Token(Token = "0x4001436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m0;

		[Token(Token = "0x4001437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float m1;

		[Token(Token = "0x4001438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float m2;

		[Token(Token = "0x4001439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float m3;

		[Token(Token = "0x400143A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float m4;

		[Token(Token = "0x400143B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float m5;

		[Token(Token = "0x400143C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float m6;

		[Token(Token = "0x400143D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float m7;

		[Token(Token = "0x400143E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float m8;

		[Token(Token = "0x400143F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float m9;

		[Token(Token = "0x4001440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float m10;

		[Token(Token = "0x4001441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float m11;
	}
	[Token(Token = "0x2000321")]
	public struct HmdMatrix33_t
	{
		[Token(Token = "0x4001442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m0;

		[Token(Token = "0x4001443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float m1;

		[Token(Token = "0x4001444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float m2;

		[Token(Token = "0x4001445")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float m3;

		[Token(Token = "0x4001446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float m4;

		[Token(Token = "0x4001447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float m5;

		[Token(Token = "0x4001448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float m6;

		[Token(Token = "0x4001449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float m7;

		[Token(Token = "0x400144A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float m8;
	}
	[Token(Token = "0x2000322")]
	public struct HmdMatrix44_t
	{
		[Token(Token = "0x400144B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m0;

		[Token(Token = "0x400144C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float m1;

		[Token(Token = "0x400144D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float m2;

		[Token(Token = "0x400144E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float m3;

		[Token(Token = "0x400144F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float m4;

		[Token(Token = "0x4001450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float m5;

		[Token(Token = "0x4001451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float m6;

		[Token(Token = "0x4001452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float m7;

		[Token(Token = "0x4001453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float m8;

		[Token(Token = "0x4001454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float m9;

		[Token(Token = "0x4001455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float m10;

		[Token(Token = "0x4001456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float m11;

		[Token(Token = "0x4001457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float m12;

		[Token(Token = "0x4001458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float m13;

		[Token(Token = "0x4001459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float m14;

		[Token(Token = "0x400145A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float m15;
	}
	[Token(Token = "0x2000323")]
	public struct HmdVector3_t
	{
		[Token(Token = "0x400145B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float v0;

		[Token(Token = "0x400145C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float v1;

		[Token(Token = "0x400145D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float v2;
	}
	[Token(Token = "0x2000324")]
	public struct HmdVector4_t
	{
		[Token(Token = "0x400145E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float v0;

		[Token(Token = "0x400145F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float v1;

		[Token(Token = "0x4001460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float v2;

		[Token(Token = "0x4001461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float v3;
	}
	[Token(Token = "0x2000325")]
	public struct HmdVector3d_t
	{
		[Token(Token = "0x4001462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double v0;

		[Token(Token = "0x4001463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public double v1;

		[Token(Token = "0x4001464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public double v2;
	}
	[Token(Token = "0x2000326")]
	public struct HmdVector2_t
	{
		[Token(Token = "0x4001465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float v0;

		[Token(Token = "0x4001466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float v1;
	}
	[Token(Token = "0x2000327")]
	public struct HmdQuaternion_t
	{
		[Token(Token = "0x4001467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double w;

		[Token(Token = "0x4001468")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public double x;

		[Token(Token = "0x4001469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public double y;

		[Token(Token = "0x400146A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public double z;
	}
	[Token(Token = "0x2000328")]
	public struct HmdQuaternionf_t
	{
		[Token(Token = "0x400146B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float w;

		[Token(Token = "0x400146C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float x;

		[Token(Token = "0x400146D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float y;

		[Token(Token = "0x400146E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float z;
	}
	[Token(Token = "0x2000329")]
	public struct HmdColor_t
	{
		[Token(Token = "0x400146F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float r;

		[Token(Token = "0x4001470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float g;

		[Token(Token = "0x4001471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float b;

		[Token(Token = "0x4001472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float a;
	}
	[Token(Token = "0x200032A")]
	public struct HmdQuad_t
	{
		[Token(Token = "0x4001473")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdVector3_t vCorners0;

		[Token(Token = "0x4001474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public HmdVector3_t vCorners1;

		[Token(Token = "0x4001475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HmdVector3_t vCorners2;

		[Token(Token = "0x4001476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public HmdVector3_t vCorners3;
	}
	[Token(Token = "0x200032B")]
	public struct HmdRect2_t
	{
		[Token(Token = "0x4001477")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdVector2_t vTopLeft;

		[Token(Token = "0x4001478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public HmdVector2_t vBottomRight;
	}
	[Token(Token = "0x200032C")]
	public struct DistortionCoordinates_t
	{
		[Token(Token = "0x4001479")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float rfRed0;

		[Token(Token = "0x400147A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float rfRed1;

		[Token(Token = "0x400147B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float rfGreen0;

		[Token(Token = "0x400147C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float rfGreen1;

		[Token(Token = "0x400147D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float rfBlue0;

		[Token(Token = "0x400147E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float rfBlue1;
	}
	[Token(Token = "0x200032D")]
	public struct Texture_t
	{
		[Token(Token = "0x400147F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Token(Token = "0x4001480")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ETextureType eType;

		[Token(Token = "0x4001481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EColorSpace eColorSpace;
	}
	[Token(Token = "0x200032E")]
	public struct TrackedDevicePose_t
	{
		[Token(Token = "0x4001482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdMatrix34_t mDeviceToAbsoluteTracking;

		[Token(Token = "0x4001483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HmdVector3_t vVelocity;

		[Token(Token = "0x4001484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public HmdVector3_t vAngularVelocity;

		[Token(Token = "0x4001485")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ETrackingResult eTrackingResult;

		[Token(Token = "0x4001486")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool bPoseIsValid;

		[Token(Token = "0x4001487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		public bool bDeviceIsConnected;
	}
	[Token(Token = "0x200032F")]
	public struct VRTextureBounds_t
	{
		[Token(Token = "0x4001488")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float uMin;

		[Token(Token = "0x4001489")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float vMin;

		[Token(Token = "0x400148A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float uMax;

		[Token(Token = "0x400148B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float vMax;
	}
	[Token(Token = "0x2000330")]
	public struct VRTextureWithPose_t
	{
		[Token(Token = "0x400148C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdMatrix34_t mDeviceToAbsoluteTracking;
	}
	[Token(Token = "0x2000331")]
	public struct VRTextureDepthInfo_t
	{
		[Token(Token = "0x400148D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Token(Token = "0x400148E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public HmdMatrix44_t mProjection;

		[Token(Token = "0x400148F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public HmdVector2_t vRange;
	}
	[Token(Token = "0x2000332")]
	public struct VRTextureWithDepth_t
	{
		[Token(Token = "0x4001490")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VRTextureDepthInfo_t depth;
	}
	[Token(Token = "0x2000333")]
	public struct VRTextureWithPoseAndDepth_t
	{
		[Token(Token = "0x4001491")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VRTextureDepthInfo_t depth;
	}
	[Token(Token = "0x2000334")]
	public struct VRVulkanTextureData_t
	{
		[Token(Token = "0x4001492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nImage;

		[Token(Token = "0x4001493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr m_pDevice;

		[Token(Token = "0x4001494")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public IntPtr m_pPhysicalDevice;

		[Token(Token = "0x4001495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntPtr m_pInstance;

		[Token(Token = "0x4001496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public IntPtr m_pQueue;

		[Token(Token = "0x4001497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint m_nQueueFamilyIndex;

		[Token(Token = "0x4001498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint m_nWidth;

		[Token(Token = "0x4001499")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public uint m_nHeight;

		[Token(Token = "0x400149A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public uint m_nFormat;

		[Token(Token = "0x400149B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public uint m_nSampleCount;
	}
	[Token(Token = "0x2000335")]
	public struct D3D12TextureData_t
	{
		[Token(Token = "0x400149C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr m_pResource;

		[Token(Token = "0x400149D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public IntPtr m_pCommandQueue;

		[Token(Token = "0x400149E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_nNodeMask;
	}
	[Token(Token = "0x2000336")]
	public struct VREvent_Controller_t
	{
		[Token(Token = "0x400149F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint button;
	}
	[Token(Token = "0x2000337")]
	public struct VREvent_Mouse_t
	{
		[Token(Token = "0x40014A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x40014A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x40014A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint button;
	}
	[Token(Token = "0x2000338")]
	public struct VREvent_Scroll_t
	{
		[Token(Token = "0x40014A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float xdelta;

		[Token(Token = "0x40014A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float ydelta;

		[Token(Token = "0x40014A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint repeatCount;
	}
	[Token(Token = "0x2000339")]
	public struct VREvent_TouchPadMove_t
	{
		[Token(Token = "0x40014A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool bFingerDown;

		[Token(Token = "0x40014A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float flSecondsFingerDown;

		[Token(Token = "0x40014A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float fValueXFirst;

		[Token(Token = "0x40014A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float fValueYFirst;

		[Token(Token = "0x40014AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float fValueXRaw;

		[Token(Token = "0x40014AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float fValueYRaw;
	}
	[Token(Token = "0x200033A")]
	public struct VREvent_Notification_t
	{
		[Token(Token = "0x40014AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong ulUserValue;

		[Token(Token = "0x40014AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint notificationId;
	}
	[Token(Token = "0x200033B")]
	public struct VREvent_Process_t
	{
		[Token(Token = "0x40014AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint pid;

		[Token(Token = "0x40014AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint oldPid;

		[Token(Token = "0x40014B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool bForced;
	}
	[Token(Token = "0x200033C")]
	public struct VREvent_Overlay_t
	{
		[Token(Token = "0x40014B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong overlayHandle;

		[Token(Token = "0x40014B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong devicePath;
	}
	[Token(Token = "0x200033D")]
	public struct VREvent_Status_t
	{
		[Token(Token = "0x40014B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint statusState;
	}
	[Token(Token = "0x200033E")]
	public struct VREvent_Keyboard_t
	{
		[Token(Token = "0x40014B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte cNewInput0;

		[Token(Token = "0x40014B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public byte cNewInput1;

		[Token(Token = "0x40014B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public byte cNewInput2;

		[Token(Token = "0x40014B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
		public byte cNewInput3;

		[Token(Token = "0x40014B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public byte cNewInput4;

		[Token(Token = "0x40014B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
		public byte cNewInput5;

		[Token(Token = "0x40014BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6")]
		public byte cNewInput6;

		[Token(Token = "0x40014BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7")]
		public byte cNewInput7;

		[Token(Token = "0x40014BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong uUserValue;

		[Token(Token = "0x17000310")]
		public string cNewInput
		{
			[Token(Token = "0x600172E")]
			[Address(RVA = "0x3A0540", Offset = "0x3A0540", VA = "0x3A0540")]
			get
			{
				return null;
			}
		}
	}
	[Token(Token = "0x200033F")]
	public struct VREvent_Ipd_t
	{
		[Token(Token = "0x40014BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float ipdMeters;
	}
	[Token(Token = "0x2000340")]
	public struct VREvent_Chaperone_t
	{
		[Token(Token = "0x40014BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nPreviousUniverse;

		[Token(Token = "0x40014BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_nCurrentUniverse;
	}
	[Token(Token = "0x2000341")]
	public struct VREvent_Reserved_t
	{
		[Token(Token = "0x40014C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong reserved0;

		[Token(Token = "0x40014C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong reserved1;

		[Token(Token = "0x40014C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ulong reserved2;

		[Token(Token = "0x40014C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ulong reserved3;
	}
	[Token(Token = "0x2000342")]
	public struct VREvent_PerformanceTest_t
	{
		[Token(Token = "0x40014C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nFidelityLevel;
	}
	[Token(Token = "0x2000343")]
	public struct VREvent_SeatedZeroPoseReset_t
	{
		[Token(Token = "0x40014C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool bResetBySystemMenu;
	}
	[Token(Token = "0x2000344")]
	public struct VREvent_Screenshot_t
	{
		[Token(Token = "0x40014C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint handle;

		[Token(Token = "0x40014C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint type;
	}
	[Token(Token = "0x2000345")]
	public struct VREvent_ScreenshotProgress_t
	{
		[Token(Token = "0x40014C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float progress;
	}
	[Token(Token = "0x2000346")]
	public struct VREvent_ApplicationLaunch_t
	{
		[Token(Token = "0x40014C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint pid;

		[Token(Token = "0x40014CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint unArgsHandle;
	}
	[Token(Token = "0x2000347")]
	public struct VREvent_EditingCameraSurface_t
	{
		[Token(Token = "0x40014CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong overlayHandle;

		[Token(Token = "0x40014CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint nVisualMode;
	}
	[Token(Token = "0x2000348")]
	public struct VREvent_MessageOverlay_t
	{
		[Token(Token = "0x40014CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint unVRMessageOverlayResponse;
	}
	[Token(Token = "0x2000349")]
	public struct VREvent_Property_t
	{
		[Token(Token = "0x40014CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong container;

		[Token(Token = "0x40014CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ETrackedDeviceProperty prop;
	}
	[Token(Token = "0x200034A")]
	public struct VREvent_DualAnalog_t
	{
		[Token(Token = "0x40014D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x40014D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x40014D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float transformedX;

		[Token(Token = "0x40014D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float transformedY;

		[Token(Token = "0x40014D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public EDualAnalogWhich which;
	}
	[Token(Token = "0x200034B")]
	public struct VREvent_HapticVibration_t
	{
		[Token(Token = "0x40014D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong containerHandle;

		[Token(Token = "0x40014D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong componentHandle;

		[Token(Token = "0x40014D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float fDurationSeconds;

		[Token(Token = "0x40014D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float fFrequency;

		[Token(Token = "0x40014D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float fAmplitude;
	}
	[Token(Token = "0x200034C")]
	public struct VREvent_WebConsole_t
	{
		[Token(Token = "0x40014DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong webConsoleHandle;
	}
	[Token(Token = "0x200034D")]
	public struct VREvent_InputBindingLoad_t
	{
		[Token(Token = "0x40014DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong ulAppContainer;

		[Token(Token = "0x40014DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong pathMessage;

		[Token(Token = "0x40014DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ulong pathUrl;

		[Token(Token = "0x40014DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ulong pathControllerType;
	}
	[Token(Token = "0x200034E")]
	public struct VREvent_InputActionManifestLoad_t
	{
		[Token(Token = "0x40014DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong pathAppKey;

		[Token(Token = "0x40014E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong pathMessage;

		[Token(Token = "0x40014E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ulong pathMessageParam;

		[Token(Token = "0x40014E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ulong pathManifestPath;
	}
	[Token(Token = "0x200034F")]
	public struct VREvent_SpatialAnchor_t
	{
		[Token(Token = "0x40014E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint unHandle;
	}
	[Token(Token = "0x2000350")]
	public struct VREvent_t
	{
		[Token(Token = "0x40014E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint eventType;

		[Token(Token = "0x40014E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint trackedDeviceIndex;

		[Token(Token = "0x40014E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float eventAgeSeconds;

		[Token(Token = "0x40014E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public VREvent_Data_t data;
	}
	[Token(Token = "0x2000351")]
	public struct VREvent_t_Packed
	{
		[Token(Token = "0x40014E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint eventType;

		[Token(Token = "0x40014E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint trackedDeviceIndex;

		[Token(Token = "0x40014EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float eventAgeSeconds;

		[Token(Token = "0x40014EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public VREvent_Data_t data;

		[Token(Token = "0x600172F")]
		[Address(RVA = "0x3A0548", Offset = "0x3A0548", VA = "0x3A0548")]
		public VREvent_t_Packed(VREvent_t unpacked)
		{
		}

		[Token(Token = "0x6001730")]
		[Address(RVA = "0x3A05A0", Offset = "0x3A05A0", VA = "0x3A05A0")]
		public void Unpack(ref VREvent_t unpacked)
		{
		}
	}
	[Token(Token = "0x2000352")]
	public struct HiddenAreaMesh_t
	{
		[Token(Token = "0x40014EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr pVertexData;

		[Token(Token = "0x40014ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint unTriangleCount;
	}
	[Token(Token = "0x2000353")]
	public struct VRControllerAxis_t
	{
		[Token(Token = "0x40014EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x40014EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;
	}
	[Token(Token = "0x2000354")]
	public struct VRControllerState_t
	{
		[Token(Token = "0x40014F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint unPacketNum;

		[Token(Token = "0x40014F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong ulButtonPressed;

		[Token(Token = "0x40014F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ulong ulButtonTouched;

		[Token(Token = "0x40014F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRControllerAxis_t rAxis0;

		[Token(Token = "0x40014F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VRControllerAxis_t rAxis1;

		[Token(Token = "0x40014F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public VRControllerAxis_t rAxis2;

		[Token(Token = "0x40014F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public VRControllerAxis_t rAxis3;

		[Token(Token = "0x40014F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public VRControllerAxis_t rAxis4;
	}
	[Token(Token = "0x2000355")]
	public struct VRControllerState_t_Packed
	{
		[Token(Token = "0x40014F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint unPacketNum;

		[Token(Token = "0x40014F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ulong ulButtonPressed;

		[Token(Token = "0x40014FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public ulong ulButtonTouched;

		[Token(Token = "0x40014FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public VRControllerAxis_t rAxis0;

		[Token(Token = "0x40014FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public VRControllerAxis_t rAxis1;

		[Token(Token = "0x40014FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public VRControllerAxis_t rAxis2;

		[Token(Token = "0x40014FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public VRControllerAxis_t rAxis3;

		[Token(Token = "0x40014FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public VRControllerAxis_t rAxis4;

		[Token(Token = "0x6001731")]
		[Address(RVA = "0x3A04BC", Offset = "0x3A04BC", VA = "0x3A04BC")]
		public VRControllerState_t_Packed(VRControllerState_t unpacked)
		{
		}

		[Token(Token = "0x6001732")]
		[Address(RVA = "0x3A0538", Offset = "0x3A0538", VA = "0x3A0538")]
		public void Unpack(ref VRControllerState_t unpacked)
		{
		}
	}
	[Token(Token = "0x2000356")]
	public struct Compositor_OverlaySettings
	{
		[Token(Token = "0x4001500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint size;

		[Token(Token = "0x4001501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public bool curved;

		[Token(Token = "0x4001502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
		public bool antialias;

		[Token(Token = "0x4001503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float scale;

		[Token(Token = "0x4001504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float distance;

		[Token(Token = "0x4001505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float alpha;

		[Token(Token = "0x4001506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float uOffset;

		[Token(Token = "0x4001507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float vOffset;

		[Token(Token = "0x4001508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float uScale;

		[Token(Token = "0x4001509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float vScale;

		[Token(Token = "0x400150A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float gridDivs;

		[Token(Token = "0x400150B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float gridWidth;

		[Token(Token = "0x400150C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float gridScale;

		[Token(Token = "0x400150D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HmdMatrix44_t transform;
	}
	[Token(Token = "0x2000357")]
	public struct VRBoneTransform_t
	{
		[Token(Token = "0x400150E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdVector4_t position;

		[Token(Token = "0x400150F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public HmdQuaternionf_t orientation;
	}
	[Token(Token = "0x2000358")]
	public struct CameraVideoStreamFrameHeader_t
	{
		[Token(Token = "0x4001510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EVRTrackedCameraFrameType eFrameType;

		[Token(Token = "0x4001511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint nWidth;

		[Token(Token = "0x4001512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint nHeight;

		[Token(Token = "0x4001513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint nBytesPerPixel;

		[Token(Token = "0x4001514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint nFrameSequence;

		[Token(Token = "0x4001515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public TrackedDevicePose_t standingTrackedDevicePose;
	}
	[Token(Token = "0x2000359")]
	public struct DriverDirectMode_FrameTiming
	{
		[Token(Token = "0x4001516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nSize;

		[Token(Token = "0x4001517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_nNumFramePresents;

		[Token(Token = "0x4001518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_nNumMisPresented;

		[Token(Token = "0x4001519")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_nNumDroppedFrames;

		[Token(Token = "0x400151A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_nReprojectionFlags;
	}
	[Token(Token = "0x200035A")]
	public struct ImuSample_t
	{
		[Token(Token = "0x400151B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double fSampleTime;

		[Token(Token = "0x400151C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public HmdVector3d_t vAccel;

		[Token(Token = "0x400151D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HmdVector3d_t vGyro;

		[Token(Token = "0x400151E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public uint unOffScaleFlags;
	}
	[Token(Token = "0x200035B")]
	public struct AppOverrideKeys_t
	{
		[Token(Token = "0x400151F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr pchKey;

		[Token(Token = "0x4001520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public IntPtr pchValue;
	}
	[Token(Token = "0x200035C")]
	public struct Compositor_FrameTiming
	{
		[Token(Token = "0x4001521")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nSize;

		[Token(Token = "0x4001522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_nFrameIndex;

		[Token(Token = "0x4001523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_nNumFramePresents;

		[Token(Token = "0x4001524")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_nNumMisPresented;

		[Token(Token = "0x4001525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_nNumDroppedFrames;

		[Token(Token = "0x4001526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint m_nReprojectionFlags;

		[Token(Token = "0x4001527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public double m_flSystemTimeInSeconds;

		[Token(Token = "0x4001528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float m_flPreSubmitGpuMs;

		[Token(Token = "0x4001529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float m_flPostSubmitGpuMs;

		[Token(Token = "0x400152A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float m_flTotalRenderGpuMs;

		[Token(Token = "0x400152B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float m_flCompositorRenderGpuMs;

		[Token(Token = "0x400152C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float m_flCompositorRenderCpuMs;

		[Token(Token = "0x400152D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float m_flCompositorIdleCpuMs;

		[Token(Token = "0x400152E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float m_flClientFrameIntervalMs;

		[Token(Token = "0x400152F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float m_flPresentCallCpuMs;

		[Token(Token = "0x4001530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float m_flWaitForPresentCpuMs;

		[Token(Token = "0x4001531")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float m_flSubmitFrameMs;

		[Token(Token = "0x4001532")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float m_flWaitGetPosesCalledMs;

		[Token(Token = "0x4001533")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float m_flNewPosesReadyMs;

		[Token(Token = "0x4001534")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float m_flNewFrameReadyMs;

		[Token(Token = "0x4001535")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float m_flCompositorUpdateStartMs;

		[Token(Token = "0x4001536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float m_flCompositorUpdateEndMs;

		[Token(Token = "0x4001537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float m_flCompositorRenderStartMs;

		[Token(Token = "0x4001538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public TrackedDevicePose_t m_HmdPose;
	}
	[Token(Token = "0x200035D")]
	public struct Compositor_CumulativeStats
	{
		[Token(Token = "0x4001539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nPid;

		[Token(Token = "0x400153A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_nNumFramePresents;

		[Token(Token = "0x400153B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_nNumDroppedFrames;

		[Token(Token = "0x400153C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_nNumReprojectedFrames;

		[Token(Token = "0x400153D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_nNumFramePresentsOnStartup;

		[Token(Token = "0x400153E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint m_nNumDroppedFramesOnStartup;

		[Token(Token = "0x400153F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint m_nNumReprojectedFramesOnStartup;

		[Token(Token = "0x4001540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint m_nNumLoading;

		[Token(Token = "0x4001541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public uint m_nNumFramePresentsLoading;

		[Token(Token = "0x4001542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public uint m_nNumDroppedFramesLoading;

		[Token(Token = "0x4001543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public uint m_nNumReprojectedFramesLoading;

		[Token(Token = "0x4001544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public uint m_nNumTimedOut;

		[Token(Token = "0x4001545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public uint m_nNumFramePresentsTimedOut;

		[Token(Token = "0x4001546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public uint m_nNumDroppedFramesTimedOut;

		[Token(Token = "0x4001547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public uint m_nNumReprojectedFramesTimedOut;
	}
	[Token(Token = "0x200035E")]
	public struct VROverlayIntersectionParams_t
	{
		[Token(Token = "0x4001548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdVector3_t vSource;

		[Token(Token = "0x4001549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public HmdVector3_t vDirection;

		[Token(Token = "0x400154A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ETrackingUniverseOrigin eOrigin;
	}
	[Token(Token = "0x200035F")]
	public struct VROverlayIntersectionResults_t
	{
		[Token(Token = "0x400154B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdVector3_t vPoint;

		[Token(Token = "0x400154C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public HmdVector3_t vNormal;

		[Token(Token = "0x400154D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HmdVector2_t vUVs;

		[Token(Token = "0x400154E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float fDistance;
	}
	[Token(Token = "0x2000360")]
	public struct IntersectionMaskRectangle_t
	{
		[Token(Token = "0x400154F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m_flTopLeftX;

		[Token(Token = "0x4001550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float m_flTopLeftY;

		[Token(Token = "0x4001551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float m_flWidth;

		[Token(Token = "0x4001552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float m_flHeight;
	}
	[Token(Token = "0x2000361")]
	public struct IntersectionMaskCircle_t
	{
		[Token(Token = "0x4001553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m_flCenterX;

		[Token(Token = "0x4001554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float m_flCenterY;

		[Token(Token = "0x4001555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float m_flRadius;
	}
	[Token(Token = "0x2000362")]
	public struct VROverlayIntersectionMaskPrimitive_t
	{
		[Token(Token = "0x4001556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EVROverlayIntersectionMaskPrimitiveType m_nPrimitiveType;

		[Token(Token = "0x4001557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public VROverlayIntersectionMaskPrimitive_Data_t m_Primitive;
	}
	[Token(Token = "0x2000363")]
	public struct RenderModel_ComponentState_t
	{
		[Token(Token = "0x4001558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdMatrix34_t mTrackingToComponentRenderModel;

		[Token(Token = "0x4001559")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HmdMatrix34_t mTrackingToComponentLocal;

		[Token(Token = "0x400155A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public uint uProperties;
	}
	[Token(Token = "0x2000364")]
	public struct RenderModel_Vertex_t
	{
		[Token(Token = "0x400155B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdVector3_t vPosition;

		[Token(Token = "0x400155C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public HmdVector3_t vNormal;

		[Token(Token = "0x400155D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float rfTextureCoord0;

		[Token(Token = "0x400155E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float rfTextureCoord1;
	}
	[Token(Token = "0x2000365")]
	public struct RenderModel_TextureMap_t
	{
		[Token(Token = "0x400155F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ushort unWidth;

		[Token(Token = "0x4001560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public ushort unHeight;

		[Token(Token = "0x4001561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public IntPtr rubTextureMapData;
	}
	[Token(Token = "0x2000366")]
	public struct RenderModel_TextureMap_t_Packed
	{
		[Token(Token = "0x4001562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ushort unWidth;

		[Token(Token = "0x4001563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public ushort unHeight;

		[Token(Token = "0x4001564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public IntPtr rubTextureMapData;

		[Token(Token = "0x6001733")]
		[Address(RVA = "0x3A0438", Offset = "0x3A0438", VA = "0x3A0438")]
		public RenderModel_TextureMap_t_Packed(RenderModel_TextureMap_t unpacked)
		{
		}

		[Token(Token = "0x6001734")]
		[Address(RVA = "0x3A044C", Offset = "0x3A044C", VA = "0x3A044C")]
		public void Unpack(ref RenderModel_TextureMap_t unpacked)
		{
		}
	}
	[Token(Token = "0x2000367")]
	public struct RenderModel_t
	{
		[Token(Token = "0x4001565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr rVertexData;

		[Token(Token = "0x4001566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint unVertexCount;

		[Token(Token = "0x4001567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr rIndexData;

		[Token(Token = "0x4001568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint unTriangleCount;

		[Token(Token = "0x4001569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int diffuseTextureId;
	}
	[Token(Token = "0x2000368")]
	public struct RenderModel_t_Packed
	{
		[Token(Token = "0x400156A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr rVertexData;

		[Token(Token = "0x400156B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint unVertexCount;

		[Token(Token = "0x400156C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr rIndexData;

		[Token(Token = "0x400156D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint unTriangleCount;

		[Token(Token = "0x400156E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int diffuseTextureId;

		[Token(Token = "0x6001735")]
		[Address(RVA = "0x3A0468", Offset = "0x3A0468", VA = "0x3A0468")]
		public RenderModel_t_Packed(RenderModel_t unpacked)
		{
		}

		[Token(Token = "0x6001736")]
		[Address(RVA = "0x3A0490", Offset = "0x3A0490", VA = "0x3A0490")]
		public void Unpack(ref RenderModel_t unpacked)
		{
		}
	}
	[Token(Token = "0x2000369")]
	public struct RenderModel_ControllerMode_State_t
	{
		[Token(Token = "0x400156F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool bScrollWheelVisible;
	}
	[Token(Token = "0x200036A")]
	public struct NotificationBitmap_t
	{
		[Token(Token = "0x4001570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr m_pImageData;

		[Token(Token = "0x4001571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nWidth;

		[Token(Token = "0x4001572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nHeight;

		[Token(Token = "0x4001573")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_nBytesPerPixel;
	}
	[Token(Token = "0x200036B")]
	public struct CVRSettingHelper
	{
		[Token(Token = "0x4001574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr m_pSettings;
	}
	[Token(Token = "0x200036C")]
	public struct InputAnalogActionData_t
	{
		[Token(Token = "0x4001575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool bActive;

		[Token(Token = "0x4001576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong activeOrigin;

		[Token(Token = "0x4001577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float x;

		[Token(Token = "0x4001578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float y;

		[Token(Token = "0x4001579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float z;

		[Token(Token = "0x400157A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float deltaX;

		[Token(Token = "0x400157B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float deltaY;

		[Token(Token = "0x400157C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float deltaZ;

		[Token(Token = "0x400157D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fUpdateTime;
	}
	[Token(Token = "0x200036D")]
	public struct InputDigitalActionData_t
	{
		[Token(Token = "0x400157E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool bActive;

		[Token(Token = "0x400157F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong activeOrigin;

		[Token(Token = "0x4001580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool bState;

		[Token(Token = "0x4001581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool bChanged;

		[Token(Token = "0x4001582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float fUpdateTime;
	}
	[Token(Token = "0x200036E")]
	public struct InputPoseActionData_t
	{
		[Token(Token = "0x4001583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool bActive;

		[Token(Token = "0x4001584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong activeOrigin;

		[Token(Token = "0x4001585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public TrackedDevicePose_t pose;
	}
	[Token(Token = "0x200036F")]
	public struct InputSkeletalActionData_t
	{
		[Token(Token = "0x4001586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool bActive;

		[Token(Token = "0x4001587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong activeOrigin;

		[Token(Token = "0x4001588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint boneCount;
	}
	[Token(Token = "0x2000370")]
	public struct InputOriginInfo_t
	{
		[Token(Token = "0x4001589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong devicePath;

		[Token(Token = "0x400158A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint trackedDeviceIndex;

		[Token(Token = "0x400158B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public byte rchRenderModelComponentName0;

		[Token(Token = "0x400158C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
		public byte rchRenderModelComponentName1;

		[Token(Token = "0x400158D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
		public byte rchRenderModelComponentName2;

		[Token(Token = "0x400158E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF")]
		public byte rchRenderModelComponentName3;

		[Token(Token = "0x400158F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte rchRenderModelComponentName4;

		[Token(Token = "0x4001590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public byte rchRenderModelComponentName5;

		[Token(Token = "0x4001591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public byte rchRenderModelComponentName6;

		[Token(Token = "0x4001592")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
		public byte rchRenderModelComponentName7;

		[Token(Token = "0x4001593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public byte rchRenderModelComponentName8;

		[Token(Token = "0x4001594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		public byte rchRenderModelComponentName9;

		[Token(Token = "0x4001595")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
		public byte rchRenderModelComponentName10;

		[Token(Token = "0x4001596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17")]
		public byte rchRenderModelComponentName11;

		[Token(Token = "0x4001597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public byte rchRenderModelComponentName12;

		[Token(Token = "0x4001598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public byte rchRenderModelComponentName13;

		[Token(Token = "0x4001599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public byte rchRenderModelComponentName14;

		[Token(Token = "0x400159A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public byte rchRenderModelComponentName15;

		[Token(Token = "0x400159B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public byte rchRenderModelComponentName16;

		[Token(Token = "0x400159C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public byte rchRenderModelComponentName17;

		[Token(Token = "0x400159D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		public byte rchRenderModelComponentName18;

		[Token(Token = "0x400159E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
		public byte rchRenderModelComponentName19;

		[Token(Token = "0x400159F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public byte rchRenderModelComponentName20;

		[Token(Token = "0x40015A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public byte rchRenderModelComponentName21;

		[Token(Token = "0x40015A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public byte rchRenderModelComponentName22;

		[Token(Token = "0x40015A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
		public byte rchRenderModelComponentName23;

		[Token(Token = "0x40015A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public byte rchRenderModelComponentName24;

		[Token(Token = "0x40015A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public byte rchRenderModelComponentName25;

		[Token(Token = "0x40015A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		public byte rchRenderModelComponentName26;

		[Token(Token = "0x40015A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
		public byte rchRenderModelComponentName27;

		[Token(Token = "0x40015A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public byte rchRenderModelComponentName28;

		[Token(Token = "0x40015A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public byte rchRenderModelComponentName29;

		[Token(Token = "0x40015A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public byte rchRenderModelComponentName30;

		[Token(Token = "0x40015AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
		public byte rchRenderModelComponentName31;

		[Token(Token = "0x40015AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public byte rchRenderModelComponentName32;

		[Token(Token = "0x40015AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public byte rchRenderModelComponentName33;

		[Token(Token = "0x40015AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
		public byte rchRenderModelComponentName34;

		[Token(Token = "0x40015AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F")]
		public byte rchRenderModelComponentName35;

		[Token(Token = "0x40015AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public byte rchRenderModelComponentName36;

		[Token(Token = "0x40015B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public byte rchRenderModelComponentName37;

		[Token(Token = "0x40015B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public byte rchRenderModelComponentName38;

		[Token(Token = "0x40015B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
		public byte rchRenderModelComponentName39;

		[Token(Token = "0x40015B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public byte rchRenderModelComponentName40;

		[Token(Token = "0x40015B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		public byte rchRenderModelComponentName41;

		[Token(Token = "0x40015B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
		public byte rchRenderModelComponentName42;

		[Token(Token = "0x40015B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x37")]
		public byte rchRenderModelComponentName43;

		[Token(Token = "0x40015B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public byte rchRenderModelComponentName44;

		[Token(Token = "0x40015B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public byte rchRenderModelComponentName45;

		[Token(Token = "0x40015B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		public byte rchRenderModelComponentName46;

		[Token(Token = "0x40015BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B")]
		public byte rchRenderModelComponentName47;

		[Token(Token = "0x40015BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public byte rchRenderModelComponentName48;

		[Token(Token = "0x40015BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		public byte rchRenderModelComponentName49;

		[Token(Token = "0x40015BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
		public byte rchRenderModelComponentName50;

		[Token(Token = "0x40015BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F")]
		public byte rchRenderModelComponentName51;

		[Token(Token = "0x40015BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public byte rchRenderModelComponentName52;

		[Token(Token = "0x40015C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public byte rchRenderModelComponentName53;

		[Token(Token = "0x40015C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		public byte rchRenderModelComponentName54;

		[Token(Token = "0x40015C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x43")]
		public byte rchRenderModelComponentName55;

		[Token(Token = "0x40015C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public byte rchRenderModelComponentName56;

		[Token(Token = "0x40015C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		public byte rchRenderModelComponentName57;

		[Token(Token = "0x40015C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
		public byte rchRenderModelComponentName58;

		[Token(Token = "0x40015C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
		public byte rchRenderModelComponentName59;

		[Token(Token = "0x40015C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public byte rchRenderModelComponentName60;

		[Token(Token = "0x40015C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public byte rchRenderModelComponentName61;

		[Token(Token = "0x40015C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		public byte rchRenderModelComponentName62;

		[Token(Token = "0x40015CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4B")]
		public byte rchRenderModelComponentName63;

		[Token(Token = "0x40015CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public byte rchRenderModelComponentName64;

		[Token(Token = "0x40015CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		public byte rchRenderModelComponentName65;

		[Token(Token = "0x40015CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
		public byte rchRenderModelComponentName66;

		[Token(Token = "0x40015CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F")]
		public byte rchRenderModelComponentName67;

		[Token(Token = "0x40015CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public byte rchRenderModelComponentName68;

		[Token(Token = "0x40015D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public byte rchRenderModelComponentName69;

		[Token(Token = "0x40015D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		public byte rchRenderModelComponentName70;

		[Token(Token = "0x40015D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
		public byte rchRenderModelComponentName71;

		[Token(Token = "0x40015D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public byte rchRenderModelComponentName72;

		[Token(Token = "0x40015D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		public byte rchRenderModelComponentName73;

		[Token(Token = "0x40015D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
		public byte rchRenderModelComponentName74;

		[Token(Token = "0x40015D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x57")]
		public byte rchRenderModelComponentName75;

		[Token(Token = "0x40015D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public byte rchRenderModelComponentName76;

		[Token(Token = "0x40015D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		public byte rchRenderModelComponentName77;

		[Token(Token = "0x40015D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		public byte rchRenderModelComponentName78;

		[Token(Token = "0x40015DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5B")]
		public byte rchRenderModelComponentName79;

		[Token(Token = "0x40015DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public byte rchRenderModelComponentName80;

		[Token(Token = "0x40015DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
		public byte rchRenderModelComponentName81;

		[Token(Token = "0x40015DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5E")]
		public byte rchRenderModelComponentName82;

		[Token(Token = "0x40015DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5F")]
		public byte rchRenderModelComponentName83;

		[Token(Token = "0x40015DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public byte rchRenderModelComponentName84;

		[Token(Token = "0x40015E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		public byte rchRenderModelComponentName85;

		[Token(Token = "0x40015E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		public byte rchRenderModelComponentName86;

		[Token(Token = "0x40015E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		public byte rchRenderModelComponentName87;

		[Token(Token = "0x40015E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public byte rchRenderModelComponentName88;

		[Token(Token = "0x40015E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		public byte rchRenderModelComponentName89;

		[Token(Token = "0x40015E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
		public byte rchRenderModelComponentName90;

		[Token(Token = "0x40015E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x67")]
		public byte rchRenderModelComponentName91;

		[Token(Token = "0x40015E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public byte rchRenderModelComponentName92;

		[Token(Token = "0x40015E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public byte rchRenderModelComponentName93;

		[Token(Token = "0x40015E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		public byte rchRenderModelComponentName94;

		[Token(Token = "0x40015EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
		public byte rchRenderModelComponentName95;

		[Token(Token = "0x40015EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public byte rchRenderModelComponentName96;

		[Token(Token = "0x40015EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
		public byte rchRenderModelComponentName97;

		[Token(Token = "0x40015ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6E")]
		public byte rchRenderModelComponentName98;

		[Token(Token = "0x40015EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6F")]
		public byte rchRenderModelComponentName99;

		[Token(Token = "0x40015EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public byte rchRenderModelComponentName100;

		[Token(Token = "0x40015F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		public byte rchRenderModelComponentName101;

		[Token(Token = "0x40015F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
		public byte rchRenderModelComponentName102;

		[Token(Token = "0x40015F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x73")]
		public byte rchRenderModelComponentName103;

		[Token(Token = "0x40015F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public byte rchRenderModelComponentName104;

		[Token(Token = "0x40015F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
		public byte rchRenderModelComponentName105;

		[Token(Token = "0x40015F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x76")]
		public byte rchRenderModelComponentName106;

		[Token(Token = "0x40015F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x77")]
		public byte rchRenderModelComponentName107;

		[Token(Token = "0x40015F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public byte rchRenderModelComponentName108;

		[Token(Token = "0x40015F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		public byte rchRenderModelComponentName109;

		[Token(Token = "0x40015F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7A")]
		public byte rchRenderModelComponentName110;

		[Token(Token = "0x40015FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7B")]
		public byte rchRenderModelComponentName111;

		[Token(Token = "0x40015FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public byte rchRenderModelComponentName112;

		[Token(Token = "0x40015FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
		public byte rchRenderModelComponentName113;

		[Token(Token = "0x40015FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7E")]
		public byte rchRenderModelComponentName114;

		[Token(Token = "0x40015FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7F")]
		public byte rchRenderModelComponentName115;

		[Token(Token = "0x40015FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public byte rchRenderModelComponentName116;

		[Token(Token = "0x4001600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		public byte rchRenderModelComponentName117;

		[Token(Token = "0x4001601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x82")]
		public byte rchRenderModelComponentName118;

		[Token(Token = "0x4001602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x83")]
		public byte rchRenderModelComponentName119;

		[Token(Token = "0x4001603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public byte rchRenderModelComponentName120;

		[Token(Token = "0x4001604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x85")]
		public byte rchRenderModelComponentName121;

		[Token(Token = "0x4001605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x86")]
		public byte rchRenderModelComponentName122;

		[Token(Token = "0x4001606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x87")]
		public byte rchRenderModelComponentName123;

		[Token(Token = "0x4001607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public byte rchRenderModelComponentName124;

		[Token(Token = "0x4001608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		public byte rchRenderModelComponentName125;

		[Token(Token = "0x4001609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8A")]
		public byte rchRenderModelComponentName126;

		[Token(Token = "0x400160A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8B")]
		public byte rchRenderModelComponentName127;

		[Token(Token = "0x17000311")]
		public string rchRenderModelComponentName
		{
			[Token(Token = "0x6001737")]
			[Address(RVA = "0x3A0430", Offset = "0x3A0430", VA = "0x3A0430")]
			get
			{
				return null;
			}
		}
	}
	[Token(Token = "0x2000371")]
	public struct VRActiveActionSet_t
	{
		[Token(Token = "0x400160B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong ulActionSet;

		[Token(Token = "0x400160C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong ulRestrictedToDevice;

		[Token(Token = "0x400160D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ulong ulSecondaryActionSet;

		[Token(Token = "0x400160E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint unPadding;

		[Token(Token = "0x400160F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int nPriority;
	}
	[Token(Token = "0x2000372")]
	public struct SpatialAnchorPose_t
	{
		[Token(Token = "0x4001610")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdMatrix34_t mAnchorToAbsoluteTracking;
	}
	[Token(Token = "0x2000373")]
	public struct COpenVRContext
	{
		[Token(Token = "0x4001611")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr m_pVRSystem;

		[Token(Token = "0x4001612")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public IntPtr m_pVRChaperone;

		[Token(Token = "0x4001613")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr m_pVRChaperoneSetup;

		[Token(Token = "0x4001614")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public IntPtr m_pVRCompositor;

		[Token(Token = "0x4001615")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntPtr m_pVROverlay;

		[Token(Token = "0x4001616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public IntPtr m_pVRResources;

		[Token(Token = "0x4001617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IntPtr m_pVRRenderModels;

		[Token(Token = "0x4001618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public IntPtr m_pVRExtendedDisplay;

		[Token(Token = "0x4001619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IntPtr m_pVRSettings;

		[Token(Token = "0x400161A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public IntPtr m_pVRApplications;

		[Token(Token = "0x400161B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IntPtr m_pVRTrackedCamera;

		[Token(Token = "0x400161C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public IntPtr m_pVRScreenshots;

		[Token(Token = "0x400161D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IntPtr m_pVRDriverManager;

		[Token(Token = "0x400161E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public IntPtr m_pVRInput;

		[Token(Token = "0x400161F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IntPtr m_pVRIOBuffer;

		[Token(Token = "0x4001620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public IntPtr m_pVRSpatialAnchors;
	}
	[Token(Token = "0x2000374")]
	public class OpenVR
	{
		[Token(Token = "0x20006F1")]
		private class COpenVRContext
		{
			[Token(Token = "0x4002009")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private CVRSystem m_pVRSystem;

			[Token(Token = "0x400200A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private CVRChaperone m_pVRChaperone;

			[Token(Token = "0x400200B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private CVRChaperoneSetup m_pVRChaperoneSetup;

			[Token(Token = "0x400200C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private CVRCompositor m_pVRCompositor;

			[Token(Token = "0x400200D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private CVROverlay m_pVROverlay;

			[Token(Token = "0x400200E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private CVRRenderModels m_pVRRenderModels;

			[Token(Token = "0x400200F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private CVRExtendedDisplay m_pVRExtendedDisplay;

			[Token(Token = "0x4002010")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private CVRSettings m_pVRSettings;

			[Token(Token = "0x4002011")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private CVRApplications m_pVRApplications;

			[Token(Token = "0x4002012")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private CVRScreenshots m_pVRScreenshots;

			[Token(Token = "0x4002013")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private CVRTrackedCamera m_pVRTrackedCamera;

			[Token(Token = "0x4002014")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private CVRInput m_pVRInput;

			[Token(Token = "0x4002015")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private CVRSpatialAnchors m_pVRSpatialAnchors;

			[Token(Token = "0x600237D")]
			[Address(RVA = "0x5DB0C4", Offset = "0x5DB0C4", VA = "0x5DB0C4")]
			public COpenVRContext()
			{
			}

			[Token(Token = "0x600237E")]
			[Address(RVA = "0x5DC74C", Offset = "0x5DC74C", VA = "0x5DC74C")]
			public void Clear()
			{
			}

			[Token(Token = "0x600237F")]
			[Address(RVA = "0x5DC7F8", Offset = "0x5DC7F8", VA = "0x5DC7F8")]
			private void CheckClear()
			{
			}

			[Token(Token = "0x6002380")]
			[Address(RVA = "0x5DB194", Offset = "0x5DB194", VA = "0x5DB194")]
			public CVRSystem VRSystem()
			{
				return null;
			}

			[Token(Token = "0x6002381")]
			[Address(RVA = "0x5DB308", Offset = "0x5DB308", VA = "0x5DB308")]
			public CVRChaperone VRChaperone()
			{
				return null;
			}

			[Token(Token = "0x6002382")]
			[Address(RVA = "0x5DB47C", Offset = "0x5DB47C", VA = "0x5DB47C")]
			public CVRChaperoneSetup VRChaperoneSetup()
			{
				return null;
			}

			[Token(Token = "0x6002383")]
			[Address(RVA = "0x5DB5F0", Offset = "0x5DB5F0", VA = "0x5DB5F0")]
			public CVRCompositor VRCompositor()
			{
				return null;
			}

			[Token(Token = "0x6002384")]
			[Address(RVA = "0x5DB764", Offset = "0x5DB764", VA = "0x5DB764")]
			public CVROverlay VROverlay()
			{
				return null;
			}

			[Token(Token = "0x6002385")]
			[Address(RVA = "0x5DB8D8", Offset = "0x5DB8D8", VA = "0x5DB8D8")]
			public CVRRenderModels VRRenderModels()
			{
				return null;
			}

			[Token(Token = "0x6002386")]
			[Address(RVA = "0x5DBA4C", Offset = "0x5DBA4C", VA = "0x5DBA4C")]
			public CVRExtendedDisplay VRExtendedDisplay()
			{
				return null;
			}

			[Token(Token = "0x6002387")]
			[Address(RVA = "0x5DBBC0", Offset = "0x5DBBC0", VA = "0x5DBBC0")]
			public CVRSettings VRSettings()
			{
				return null;
			}

			[Token(Token = "0x6002388")]
			[Address(RVA = "0x5DBD34", Offset = "0x5DBD34", VA = "0x5DBD34")]
			public CVRApplications VRApplications()
			{
				return null;
			}

			[Token(Token = "0x6002389")]
			[Address(RVA = "0x5DBEA8", Offset = "0x5DBEA8", VA = "0x5DBEA8")]
			public CVRScreenshots VRScreenshots()
			{
				return null;
			}

			[Token(Token = "0x600238A")]
			[Address(RVA = "0x5DC01C", Offset = "0x5DC01C", VA = "0x5DC01C")]
			public CVRTrackedCamera VRTrackedCamera()
			{
				return null;
			}

			[Token(Token = "0x600238B")]
			[Address(RVA = "0x5DC190", Offset = "0x5DC190", VA = "0x5DC190")]
			public CVRInput VRInput()
			{
				return null;
			}

			[Token(Token = "0x600238C")]
			[Address(RVA = "0x5DC304", Offset = "0x5DC304", VA = "0x5DC304")]
			public CVRSpatialAnchors VRSpatialAnchors()
			{
				return null;
			}
		}

		[Token(Token = "0x4001621")]
		public const uint k_nDriverNone = uint.MaxValue;

		[Token(Token = "0x4001622")]
		public const uint k_unMaxDriverDebugResponseSize = 32768u;

		[Token(Token = "0x4001623")]
		public const uint k_unTrackedDeviceIndex_Hmd = 0u;

		[Token(Token = "0x4001624")]
		public const uint k_unMaxTrackedDeviceCount = 64u;

		[Token(Token = "0x4001625")]
		public const uint k_unTrackedDeviceIndexOther = 4294967294u;

		[Token(Token = "0x4001626")]
		public const uint k_unTrackedDeviceIndexInvalid = uint.MaxValue;

		[Token(Token = "0x4001627")]
		public const ulong k_ulInvalidPropertyContainer = 0uL;

		[Token(Token = "0x4001628")]
		public const uint k_unInvalidPropertyTag = 0u;

		[Token(Token = "0x4001629")]
		public const ulong k_ulInvalidDriverHandle = 0uL;

		[Token(Token = "0x400162A")]
		public const uint k_unFloatPropertyTag = 1u;

		[Token(Token = "0x400162B")]
		public const uint k_unInt32PropertyTag = 2u;

		[Token(Token = "0x400162C")]
		public const uint k_unUint64PropertyTag = 3u;

		[Token(Token = "0x400162D")]
		public const uint k_unBoolPropertyTag = 4u;

		[Token(Token = "0x400162E")]
		public const uint k_unStringPropertyTag = 5u;

		[Token(Token = "0x400162F")]
		public const uint k_unHmdMatrix34PropertyTag = 20u;

		[Token(Token = "0x4001630")]
		public const uint k_unHmdMatrix44PropertyTag = 21u;

		[Token(Token = "0x4001631")]
		public const uint k_unHmdVector3PropertyTag = 22u;

		[Token(Token = "0x4001632")]
		public const uint k_unHmdVector4PropertyTag = 23u;

		[Token(Token = "0x4001633")]
		public const uint k_unHiddenAreaPropertyTag = 30u;

		[Token(Token = "0x4001634")]
		public const uint k_unPathHandleInfoTag = 31u;

		[Token(Token = "0x4001635")]
		public const uint k_unActionPropertyTag = 32u;

		[Token(Token = "0x4001636")]
		public const uint k_unInputValuePropertyTag = 33u;

		[Token(Token = "0x4001637")]
		public const uint k_unWildcardPropertyTag = 34u;

		[Token(Token = "0x4001638")]
		public const uint k_unHapticVibrationPropertyTag = 35u;

		[Token(Token = "0x4001639")]
		public const uint k_unSkeletonPropertyTag = 36u;

		[Token(Token = "0x400163A")]
		public const uint k_unSpatialAnchorPosePropertyTag = 40u;

		[Token(Token = "0x400163B")]
		public const uint k_unOpenVRInternalReserved_Start = 1000u;

		[Token(Token = "0x400163C")]
		public const uint k_unOpenVRInternalReserved_End = 10000u;

		[Token(Token = "0x400163D")]
		public const uint k_unMaxPropertyStringSize = 32768u;

		[Token(Token = "0x400163E")]
		public const ulong k_ulInvalidActionHandle = 0uL;

		[Token(Token = "0x400163F")]
		public const ulong k_ulInvalidActionSetHandle = 0uL;

		[Token(Token = "0x4001640")]
		public const ulong k_ulInvalidInputValueHandle = 0uL;

		[Token(Token = "0x4001641")]
		public const uint k_unControllerStateAxisCount = 5u;

		[Token(Token = "0x4001642")]
		public const ulong k_ulOverlayHandleInvalid = 0uL;

		[Token(Token = "0x4001643")]
		public const uint k_unScreenshotHandleInvalid = 0u;

		[Token(Token = "0x4001644")]
		public const string IVRSystem_Version = "IVRSystem_019";

		[Token(Token = "0x4001645")]
		public const string IVRExtendedDisplay_Version = "IVRExtendedDisplay_001";

		[Token(Token = "0x4001646")]
		public const string IVRTrackedCamera_Version = "IVRTrackedCamera_003";

		[Token(Token = "0x4001647")]
		public const uint k_unMaxApplicationKeyLength = 128u;

		[Token(Token = "0x4001648")]
		public const string k_pch_MimeType_HomeApp = "vr/home";

		[Token(Token = "0x4001649")]
		public const string k_pch_MimeType_GameTheater = "vr/game_theater";

		[Token(Token = "0x400164A")]
		public const string IVRApplications_Version = "IVRApplications_006";

		[Token(Token = "0x400164B")]
		public const string IVRChaperone_Version = "IVRChaperone_003";

		[Token(Token = "0x400164C")]
		public const string IVRChaperoneSetup_Version = "IVRChaperoneSetup_005";

		[Token(Token = "0x400164D")]
		public const string IVRCompositor_Version = "IVRCompositor_022";

		[Token(Token = "0x400164E")]
		public const uint k_unVROverlayMaxKeyLength = 128u;

		[Token(Token = "0x400164F")]
		public const uint k_unVROverlayMaxNameLength = 128u;

		[Token(Token = "0x4001650")]
		public const uint k_unMaxOverlayCount = 64u;

		[Token(Token = "0x4001651")]
		public const uint k_unMaxOverlayIntersectionMaskPrimitivesCount = 32u;

		[Token(Token = "0x4001652")]
		public const string IVROverlay_Version = "IVROverlay_018";

		[Token(Token = "0x4001653")]
		public const string k_pch_Controller_Component_GDC2015 = "gdc2015";

		[Token(Token = "0x4001654")]
		public const string k_pch_Controller_Component_Base = "base";

		[Token(Token = "0x4001655")]
		public const string k_pch_Controller_Component_Tip = "tip";

		[Token(Token = "0x4001656")]
		public const string k_pch_Controller_Component_HandGrip = "handgrip";

		[Token(Token = "0x4001657")]
		public const string k_pch_Controller_Component_Status = "status";

		[Token(Token = "0x4001658")]
		public const string IVRRenderModels_Version = "IVRRenderModels_006";

		[Token(Token = "0x4001659")]
		public const uint k_unNotificationTextMaxSize = 256u;

		[Token(Token = "0x400165A")]
		public const string IVRNotifications_Version = "IVRNotifications_002";

		[Token(Token = "0x400165B")]
		public const uint k_unMaxSettingsKeyLength = 128u;

		[Token(Token = "0x400165C")]
		public const string IVRSettings_Version = "IVRSettings_002";

		[Token(Token = "0x400165D")]
		public const string k_pch_SteamVR_Section = "steamvr";

		[Token(Token = "0x400165E")]
		public const string k_pch_SteamVR_RequireHmd_String = "requireHmd";

		[Token(Token = "0x400165F")]
		public const string k_pch_SteamVR_ForcedDriverKey_String = "forcedDriver";

		[Token(Token = "0x4001660")]
		public const string k_pch_SteamVR_ForcedHmdKey_String = "forcedHmd";

		[Token(Token = "0x4001661")]
		public const string k_pch_SteamVR_DisplayDebug_Bool = "displayDebug";

		[Token(Token = "0x4001662")]
		public const string k_pch_SteamVR_DebugProcessPipe_String = "debugProcessPipe";

		[Token(Token = "0x4001663")]
		public const string k_pch_SteamVR_DisplayDebugX_Int32 = "displayDebugX";

		[Token(Token = "0x4001664")]
		public const string k_pch_SteamVR_DisplayDebugY_Int32 = "displayDebugY";

		[Token(Token = "0x4001665")]
		public const string k_pch_SteamVR_SendSystemButtonToAllApps_Bool = "sendSystemButtonToAllApps";

		[Token(Token = "0x4001666")]
		public const string k_pch_SteamVR_LogLevel_Int32 = "loglevel";

		[Token(Token = "0x4001667")]
		public const string k_pch_SteamVR_IPD_Float = "ipd";

		[Token(Token = "0x4001668")]
		public const string k_pch_SteamVR_Background_String = "background";

		[Token(Token = "0x4001669")]
		public const string k_pch_SteamVR_BackgroundUseDomeProjection_Bool = "backgroundUseDomeProjection";

		[Token(Token = "0x400166A")]
		public const string k_pch_SteamVR_BackgroundCameraHeight_Float = "backgroundCameraHeight";

		[Token(Token = "0x400166B")]
		public const string k_pch_SteamVR_BackgroundDomeRadius_Float = "backgroundDomeRadius";

		[Token(Token = "0x400166C")]
		public const string k_pch_SteamVR_GridColor_String = "gridColor";

		[Token(Token = "0x400166D")]
		public const string k_pch_SteamVR_PlayAreaColor_String = "playAreaColor";

		[Token(Token = "0x400166E")]
		public const string k_pch_SteamVR_ShowStage_Bool = "showStage";

		[Token(Token = "0x400166F")]
		public const string k_pch_SteamVR_ActivateMultipleDrivers_Bool = "activateMultipleDrivers";

		[Token(Token = "0x4001670")]
		public const string k_pch_SteamVR_DirectMode_Bool = "directMode";

		[Token(Token = "0x4001671")]
		public const string k_pch_SteamVR_DirectModeEdidVid_Int32 = "directModeEdidVid";

		[Token(Token = "0x4001672")]
		public const string k_pch_SteamVR_DirectModeEdidPid_Int32 = "directModeEdidPid";

		[Token(Token = "0x4001673")]
		public const string k_pch_SteamVR_UsingSpeakers_Bool = "usingSpeakers";

		[Token(Token = "0x4001674")]
		public const string k_pch_SteamVR_SpeakersForwardYawOffsetDegrees_Float = "speakersForwardYawOffsetDegrees";

		[Token(Token = "0x4001675")]
		public const string k_pch_SteamVR_BaseStationPowerManagement_Bool = "basestationPowerManagement";

		[Token(Token = "0x4001676")]
		public const string k_pch_SteamVR_NeverKillProcesses_Bool = "neverKillProcesses";

		[Token(Token = "0x4001677")]
		public const string k_pch_SteamVR_SupersampleScale_Float = "supersampleScale";

		[Token(Token = "0x4001678")]
		public const string k_pch_SteamVR_AllowAsyncReprojection_Bool = "allowAsyncReprojection";

		[Token(Token = "0x4001679")]
		public const string k_pch_SteamVR_AllowReprojection_Bool = "allowInterleavedReprojection";

		[Token(Token = "0x400167A")]
		public const string k_pch_SteamVR_ForceReprojection_Bool = "forceReprojection";

		[Token(Token = "0x400167B")]
		public const string k_pch_SteamVR_ForceFadeOnBadTracking_Bool = "forceFadeOnBadTracking";

		[Token(Token = "0x400167C")]
		public const string k_pch_SteamVR_DefaultMirrorView_Int32 = "defaultMirrorView";

		[Token(Token = "0x400167D")]
		public const string k_pch_SteamVR_ShowMirrorView_Bool = "showMirrorView";

		[Token(Token = "0x400167E")]
		public const string k_pch_SteamVR_MirrorViewGeometry_String = "mirrorViewGeometry";

		[Token(Token = "0x400167F")]
		public const string k_pch_SteamVR_StartMonitorFromAppLaunch = "startMonitorFromAppLaunch";

		[Token(Token = "0x4001680")]
		public const string k_pch_SteamVR_StartCompositorFromAppLaunch_Bool = "startCompositorFromAppLaunch";

		[Token(Token = "0x4001681")]
		public const string k_pch_SteamVR_StartDashboardFromAppLaunch_Bool = "startDashboardFromAppLaunch";

		[Token(Token = "0x4001682")]
		public const string k_pch_SteamVR_StartOverlayAppsFromDashboard_Bool = "startOverlayAppsFromDashboard";

		[Token(Token = "0x4001683")]
		public const string k_pch_SteamVR_EnableHomeApp = "enableHomeApp";

		[Token(Token = "0x4001684")]
		public const string k_pch_SteamVR_CycleBackgroundImageTimeSec_Int32 = "CycleBackgroundImageTimeSec";

		[Token(Token = "0x4001685")]
		public const string k_pch_SteamVR_RetailDemo_Bool = "retailDemo";

		[Token(Token = "0x4001686")]
		public const string k_pch_SteamVR_IpdOffset_Float = "ipdOffset";

		[Token(Token = "0x4001687")]
		public const string k_pch_SteamVR_AllowSupersampleFiltering_Bool = "allowSupersampleFiltering";

		[Token(Token = "0x4001688")]
		public const string k_pch_SteamVR_SupersampleManualOverride_Bool = "supersampleManualOverride";

		[Token(Token = "0x4001689")]
		public const string k_pch_SteamVR_EnableLinuxVulkanAsync_Bool = "enableLinuxVulkanAsync";

		[Token(Token = "0x400168A")]
		public const string k_pch_SteamVR_AllowDisplayLockedMode_Bool = "allowDisplayLockedMode";

		[Token(Token = "0x400168B")]
		public const string k_pch_SteamVR_HaveStartedTutorialForNativeChaperoneDriver_Bool = "haveStartedTutorialForNativeChaperoneDriver";

		[Token(Token = "0x400168C")]
		public const string k_pch_SteamVR_ForceWindows32bitVRMonitor = "forceWindows32BitVRMonitor";

		[Token(Token = "0x400168D")]
		public const string k_pch_SteamVR_DebugInput = "debugInput";

		[Token(Token = "0x400168E")]
		public const string k_pch_SteamVR_LegacyInputRebinding = "legacyInputRebinding";

		[Token(Token = "0x400168F")]
		public const string k_pch_SteamVR_DebugInputBinding = "debugInputBinding";

		[Token(Token = "0x4001690")]
		public const string k_pch_SteamVR_InputBindingUIBlock = "inputBindingUI";

		[Token(Token = "0x4001691")]
		public const string k_pch_SteamVR_RenderCameraMode = "renderCameraMode";

		[Token(Token = "0x4001692")]
		public const string k_pch_Lighthouse_Section = "driver_lighthouse";

		[Token(Token = "0x4001693")]
		public const string k_pch_Lighthouse_DisableIMU_Bool = "disableimu";

		[Token(Token = "0x4001694")]
		public const string k_pch_Lighthouse_DisableIMUExceptHMD_Bool = "disableimuexcepthmd";

		[Token(Token = "0x4001695")]
		public const string k_pch_Lighthouse_UseDisambiguation_String = "usedisambiguation";

		[Token(Token = "0x4001696")]
		public const string k_pch_Lighthouse_DisambiguationDebug_Int32 = "disambiguationdebug";

		[Token(Token = "0x4001697")]
		public const string k_pch_Lighthouse_PrimaryBasestation_Int32 = "primarybasestation";

		[Token(Token = "0x4001698")]
		public const string k_pch_Lighthouse_DBHistory_Bool = "dbhistory";

		[Token(Token = "0x4001699")]
		public const string k_pch_Lighthouse_EnableBluetooth_Bool = "enableBluetooth";

		[Token(Token = "0x400169A")]
		public const string k_pch_Lighthouse_PowerManagedBaseStations_String = "PowerManagedBaseStations";

		[Token(Token = "0x400169B")]
		public const string k_pch_Null_Section = "driver_null";

		[Token(Token = "0x400169C")]
		public const string k_pch_Null_SerialNumber_String = "serialNumber";

		[Token(Token = "0x400169D")]
		public const string k_pch_Null_ModelNumber_String = "modelNumber";

		[Token(Token = "0x400169E")]
		public const string k_pch_Null_WindowX_Int32 = "windowX";

		[Token(Token = "0x400169F")]
		public const string k_pch_Null_WindowY_Int32 = "windowY";

		[Token(Token = "0x40016A0")]
		public const string k_pch_Null_WindowWidth_Int32 = "windowWidth";

		[Token(Token = "0x40016A1")]
		public const string k_pch_Null_WindowHeight_Int32 = "windowHeight";

		[Token(Token = "0x40016A2")]
		public const string k_pch_Null_RenderWidth_Int32 = "renderWidth";

		[Token(Token = "0x40016A3")]
		public const string k_pch_Null_RenderHeight_Int32 = "renderHeight";

		[Token(Token = "0x40016A4")]
		public const string k_pch_Null_SecondsFromVsyncToPhotons_Float = "secondsFromVsyncToPhotons";

		[Token(Token = "0x40016A5")]
		public const string k_pch_Null_DisplayFrequency_Float = "displayFrequency";

		[Token(Token = "0x40016A6")]
		public const string k_pch_UserInterface_Section = "userinterface";

		[Token(Token = "0x40016A7")]
		public const string k_pch_UserInterface_StatusAlwaysOnTop_Bool = "StatusAlwaysOnTop";

		[Token(Token = "0x40016A8")]
		public const string k_pch_UserInterface_MinimizeToTray_Bool = "MinimizeToTray";

		[Token(Token = "0x40016A9")]
		public const string k_pch_UserInterface_Screenshots_Bool = "screenshots";

		[Token(Token = "0x40016AA")]
		public const string k_pch_UserInterface_ScreenshotType_Int = "screenshotType";

		[Token(Token = "0x40016AB")]
		public const string k_pch_Notifications_Section = "notifications";

		[Token(Token = "0x40016AC")]
		public const string k_pch_Notifications_DoNotDisturb_Bool = "DoNotDisturb";

		[Token(Token = "0x40016AD")]
		public const string k_pch_Keyboard_Section = "keyboard";

		[Token(Token = "0x40016AE")]
		public const string k_pch_Keyboard_TutorialCompletions = "TutorialCompletions";

		[Token(Token = "0x40016AF")]
		public const string k_pch_Keyboard_ScaleX = "ScaleX";

		[Token(Token = "0x40016B0")]
		public const string k_pch_Keyboard_ScaleY = "ScaleY";

		[Token(Token = "0x40016B1")]
		public const string k_pch_Keyboard_OffsetLeftX = "OffsetLeftX";

		[Token(Token = "0x40016B2")]
		public const string k_pch_Keyboard_OffsetRightX = "OffsetRightX";

		[Token(Token = "0x40016B3")]
		public const string k_pch_Keyboard_OffsetY = "OffsetY";

		[Token(Token = "0x40016B4")]
		public const string k_pch_Keyboard_Smoothing = "Smoothing";

		[Token(Token = "0x40016B5")]
		public const string k_pch_Perf_Section = "perfcheck";

		[Token(Token = "0x40016B6")]
		public const string k_pch_Perf_HeuristicActive_Bool = "heuristicActive";

		[Token(Token = "0x40016B7")]
		public const string k_pch_Perf_NotifyInHMD_Bool = "warnInHMD";

		[Token(Token = "0x40016B8")]
		public const string k_pch_Perf_NotifyOnlyOnce_Bool = "warnOnlyOnce";

		[Token(Token = "0x40016B9")]
		public const string k_pch_Perf_AllowTimingStore_Bool = "allowTimingStore";

		[Token(Token = "0x40016BA")]
		public const string k_pch_Perf_SaveTimingsOnExit_Bool = "saveTimingsOnExit";

		[Token(Token = "0x40016BB")]
		public const string k_pch_Perf_TestData_Float = "perfTestData";

		[Token(Token = "0x40016BC")]
		public const string k_pch_Perf_LinuxGPUProfiling_Bool = "linuxGPUProfiling";

		[Token(Token = "0x40016BD")]
		public const string k_pch_CollisionBounds_Section = "collisionBounds";

		[Token(Token = "0x40016BE")]
		public const string k_pch_CollisionBounds_Style_Int32 = "CollisionBoundsStyle";

		[Token(Token = "0x40016BF")]
		public const string k_pch_CollisionBounds_GroundPerimeterOn_Bool = "CollisionBoundsGroundPerimeterOn";

		[Token(Token = "0x40016C0")]
		public const string k_pch_CollisionBounds_CenterMarkerOn_Bool = "CollisionBoundsCenterMarkerOn";

		[Token(Token = "0x40016C1")]
		public const string k_pch_CollisionBounds_PlaySpaceOn_Bool = "CollisionBoundsPlaySpaceOn";

		[Token(Token = "0x40016C2")]
		public const string k_pch_CollisionBounds_FadeDistance_Float = "CollisionBoundsFadeDistance";

		[Token(Token = "0x40016C3")]
		public const string k_pch_CollisionBounds_ColorGammaR_Int32 = "CollisionBoundsColorGammaR";

		[Token(Token = "0x40016C4")]
		public const string k_pch_CollisionBounds_ColorGammaG_Int32 = "CollisionBoundsColorGammaG";

		[Token(Token = "0x40016C5")]
		public const string k_pch_CollisionBounds_ColorGammaB_Int32 = "CollisionBoundsColorGammaB";

		[Token(Token = "0x40016C6")]
		public const string k_pch_CollisionBounds_ColorGammaA_Int32 = "CollisionBoundsColorGammaA";

		[Token(Token = "0x40016C7")]
		public const string k_pch_Camera_Section = "camera";

		[Token(Token = "0x40016C8")]
		public const string k_pch_Camera_EnableCamera_Bool = "enableCamera";

		[Token(Token = "0x40016C9")]
		public const string k_pch_Camera_EnableCameraInDashboard_Bool = "enableCameraInDashboard";

		[Token(Token = "0x40016CA")]
		public const string k_pch_Camera_EnableCameraForCollisionBounds_Bool = "enableCameraForCollisionBounds";

		[Token(Token = "0x40016CB")]
		public const string k_pch_Camera_EnableCameraForRoomView_Bool = "enableCameraForRoomView";

		[Token(Token = "0x40016CC")]
		public const string k_pch_Camera_BoundsColorGammaR_Int32 = "cameraBoundsColorGammaR";

		[Token(Token = "0x40016CD")]
		public const string k_pch_Camera_BoundsColorGammaG_Int32 = "cameraBoundsColorGammaG";

		[Token(Token = "0x40016CE")]
		public const string k_pch_Camera_BoundsColorGammaB_Int32 = "cameraBoundsColorGammaB";

		[Token(Token = "0x40016CF")]
		public const string k_pch_Camera_BoundsColorGammaA_Int32 = "cameraBoundsColorGammaA";

		[Token(Token = "0x40016D0")]
		public const string k_pch_Camera_BoundsStrength_Int32 = "cameraBoundsStrength";

		[Token(Token = "0x40016D1")]
		public const string k_pch_Camera_RoomViewMode_Int32 = "cameraRoomViewMode";

		[Token(Token = "0x40016D2")]
		public const string k_pch_audio_Section = "audio";

		[Token(Token = "0x40016D3")]
		public const string k_pch_audio_OnPlaybackDevice_String = "onPlaybackDevice";

		[Token(Token = "0x40016D4")]
		public const string k_pch_audio_OnRecordDevice_String = "onRecordDevice";

		[Token(Token = "0x40016D5")]
		public const string k_pch_audio_OnPlaybackMirrorDevice_String = "onPlaybackMirrorDevice";

		[Token(Token = "0x40016D6")]
		public const string k_pch_audio_OffPlaybackDevice_String = "offPlaybackDevice";

		[Token(Token = "0x40016D7")]
		public const string k_pch_audio_OffRecordDevice_String = "offRecordDevice";

		[Token(Token = "0x40016D8")]
		public const string k_pch_audio_VIVEHDMIGain = "viveHDMIGain";

		[Token(Token = "0x40016D9")]
		public const string k_pch_Power_Section = "power";

		[Token(Token = "0x40016DA")]
		public const string k_pch_Power_PowerOffOnExit_Bool = "powerOffOnExit";

		[Token(Token = "0x40016DB")]
		public const string k_pch_Power_TurnOffScreensTimeout_Float = "turnOffScreensTimeout";

		[Token(Token = "0x40016DC")]
		public const string k_pch_Power_TurnOffControllersTimeout_Float = "turnOffControllersTimeout";

		[Token(Token = "0x40016DD")]
		public const string k_pch_Power_ReturnToWatchdogTimeout_Float = "returnToWatchdogTimeout";

		[Token(Token = "0x40016DE")]
		public const string k_pch_Power_AutoLaunchSteamVROnButtonPress = "autoLaunchSteamVROnButtonPress";

		[Token(Token = "0x40016DF")]
		public const string k_pch_Power_PauseCompositorOnStandby_Bool = "pauseCompositorOnStandby";

		[Token(Token = "0x40016E0")]
		public const string k_pch_Dashboard_Section = "dashboard";

		[Token(Token = "0x40016E1")]
		public const string k_pch_Dashboard_EnableDashboard_Bool = "enableDashboard";

		[Token(Token = "0x40016E2")]
		public const string k_pch_Dashboard_ArcadeMode_Bool = "arcadeMode";

		[Token(Token = "0x40016E3")]
		public const string k_pch_Dashboard_EnableWebUI = "webUI";

		[Token(Token = "0x40016E4")]
		public const string k_pch_Dashboard_EnableWebUIDevTools = "webUIDevTools";

		[Token(Token = "0x40016E5")]
		public const string k_pch_Dashboard_EnableWebUIDashboardReplacement = "webUIDashboard";

		[Token(Token = "0x40016E6")]
		public const string k_pch_modelskin_Section = "modelskins";

		[Token(Token = "0x40016E7")]
		public const string k_pch_Driver_Enable_Bool = "enable";

		[Token(Token = "0x40016E8")]
		public const string k_pch_WebInterface_Section = "WebInterface";

		[Token(Token = "0x40016E9")]
		public const string k_pch_WebInterface_WebEnable_Bool = "WebEnable";

		[Token(Token = "0x40016EA")]
		public const string k_pch_WebInterface_WebPort_String = "WebPort";

		[Token(Token = "0x40016EB")]
		public const string k_pch_TrackingOverride_Section = "TrackingOverrides";

		[Token(Token = "0x40016EC")]
		public const string k_pch_App_BindingAutosaveURLSuffix_String = "AutosaveURL";

		[Token(Token = "0x40016ED")]
		public const string k_pch_App_BindingCurrentURLSuffix_String = "CurrentURL";

		[Token(Token = "0x40016EE")]
		public const string k_pch_App_NeedToUpdateAutosaveSuffix_Bool = "NeedToUpdateAutosave";

		[Token(Token = "0x40016EF")]
		public const string k_pch_App_ActionManifestURL_String = "ActionManifestURL";

		[Token(Token = "0x40016F0")]
		public const string k_pch_Trackers_Section = "trackers";

		[Token(Token = "0x40016F1")]
		public const string IVRScreenshots_Version = "IVRScreenshots_001";

		[Token(Token = "0x40016F2")]
		public const string IVRResources_Version = "IVRResources_001";

		[Token(Token = "0x40016F3")]
		public const string IVRDriverManager_Version = "IVRDriverManager_001";

		[Token(Token = "0x40016F4")]
		public const uint k_unMaxActionNameLength = 64u;

		[Token(Token = "0x40016F5")]
		public const uint k_unMaxActionSetNameLength = 64u;

		[Token(Token = "0x40016F6")]
		public const uint k_unMaxActionOriginCount = 16u;

		[Token(Token = "0x40016F7")]
		public const string IVRInput_Version = "IVRInput_004";

		[Token(Token = "0x40016F8")]
		public const ulong k_ulInvalidIOBufferHandle = 0uL;

		[Token(Token = "0x40016F9")]
		public const string IVRIOBuffer_Version = "IVRIOBuffer_001";

		[Token(Token = "0x40016FA")]
		public const uint k_ulInvalidSpatialAnchorHandle = 0u;

		[Token(Token = "0x40016FB")]
		public const string IVRSpatialAnchors_Version = "IVRSpatialAnchors_001";

		[Token(Token = "0x40016FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F59B4", Offset = "0x2F59B4")]
		private static uint <VRToken>k__BackingField;

		[Token(Token = "0x40016FD")]
		private const string FnTable_Prefix = "FnTable:";

		[Token(Token = "0x40016FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static COpenVRContext _OpenVRInternal_ModuleContext;

		[Token(Token = "0x17000312")]
		private static uint VRToken
		{
			[Token(Token = "0x6001741")]
			[Address(RVA = "0x5DAE58", Offset = "0x5DAE58", VA = "0x5DAE58")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FC4A8", Offset = "0x2FC4A8")]
			get
			{
				return default(uint);
			}
			[Token(Token = "0x6001742")]
			[Address(RVA = "0x5DAEE4", Offset = "0x5DAEE4", VA = "0x5DAEE4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FC4B8", Offset = "0x2FC4B8")]
			set
			{
			}
		}

		[Token(Token = "0x17000313")]
		private static COpenVRContext OpenVRInternal_ModuleContext
		{
			[Token(Token = "0x6001743")]
			[Address(RVA = "0x5DAF74", Offset = "0x5DAF74", VA = "0x5DAF74")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000314")]
		public static CVRSystem System
		{
			[Token(Token = "0x6001744")]
			[Address(RVA = "0x5DB100", Offset = "0x5DB100", VA = "0x5DB100")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000315")]
		public static CVRChaperone Chaperone
		{
			[Token(Token = "0x6001745")]
			[Address(RVA = "0x5DB274", Offset = "0x5DB274", VA = "0x5DB274")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000316")]
		public static CVRChaperoneSetup ChaperoneSetup
		{
			[Token(Token = "0x6001746")]
			[Address(RVA = "0x5DB3E8", Offset = "0x5DB3E8", VA = "0x5DB3E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000317")]
		public static CVRCompositor Compositor
		{
			[Token(Token = "0x6001747")]
			[Address(RVA = "0x5DB55C", Offset = "0x5DB55C", VA = "0x5DB55C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000318")]
		public static CVROverlay Overlay
		{
			[Token(Token = "0x6001748")]
			[Address(RVA = "0x5DB6D0", Offset = "0x5DB6D0", VA = "0x5DB6D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000319")]
		public static CVRRenderModels RenderModels
		{
			[Token(Token = "0x6001749")]
			[Address(RVA = "0x5DB844", Offset = "0x5DB844", VA = "0x5DB844")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700031A")]
		public static CVRExtendedDisplay ExtendedDisplay
		{
			[Token(Token = "0x600174A")]
			[Address(RVA = "0x5DB9B8", Offset = "0x5DB9B8", VA = "0x5DB9B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700031B")]
		public static CVRSettings Settings
		{
			[Token(Token = "0x600174B")]
			[Address(RVA = "0x5DBB2C", Offset = "0x5DBB2C", VA = "0x5DBB2C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700031C")]
		public static CVRApplications Applications
		{
			[Token(Token = "0x600174C")]
			[Address(RVA = "0x5DBCA0", Offset = "0x5DBCA0", VA = "0x5DBCA0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700031D")]
		public static CVRScreenshots Screenshots
		{
			[Token(Token = "0x600174D")]
			[Address(RVA = "0x5DBE14", Offset = "0x5DBE14", VA = "0x5DBE14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700031E")]
		public static CVRTrackedCamera TrackedCamera
		{
			[Token(Token = "0x600174E")]
			[Address(RVA = "0x5DBF88", Offset = "0x5DBF88", VA = "0x5DBF88")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700031F")]
		public static CVRInput Input
		{
			[Token(Token = "0x600174F")]
			[Address(RVA = "0x5DC0FC", Offset = "0x5DC0FC", VA = "0x5DC0FC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000320")]
		public static CVRSpatialAnchors SpatialAnchors
		{
			[Token(Token = "0x6001750")]
			[Address(RVA = "0x5DC270", Offset = "0x5DC270", VA = "0x5DC270")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001738")]
		[Address(RVA = "0x5DA3D8", Offset = "0x5DA3D8", VA = "0x5DA3D8")]
		public static uint InitInternal(ref EVRInitError peError, EVRApplicationType eApplicationType)
		{
			return default(uint);
		}

		[Token(Token = "0x6001739")]
		[Address(RVA = "0x5DA4E8", Offset = "0x5DA4E8", VA = "0x5DA4E8")]
		public static uint InitInternal2(ref EVRInitError peError, EVRApplicationType eApplicationType, string pchStartupInfo)
		{
			return default(uint);
		}

		[Token(Token = "0x600173A")]
		[Address(RVA = "0x5DA628", Offset = "0x5DA628", VA = "0x5DA628")]
		public static void ShutdownInternal()
		{
		}

		[Token(Token = "0x600173B")]
		[Address(RVA = "0x5DA728", Offset = "0x5DA728", VA = "0x5DA728")]
		public static bool IsHmdPresent()
		{
			return default(bool);
		}

		[Token(Token = "0x600173C")]
		[Address(RVA = "0x5DA828", Offset = "0x5DA828", VA = "0x5DA828")]
		public static bool IsRuntimeInstalled()
		{
			return default(bool);
		}

		[Token(Token = "0x600173D")]
		[Address(RVA = "0x5DA938", Offset = "0x5DA938", VA = "0x5DA938")]
		public static string GetStringForHmdError(EVRInitError error)
		{
			return null;
		}

		[Token(Token = "0x600173E")]
		[Address(RVA = "0x5DAAD8", Offset = "0x5DAAD8", VA = "0x5DAAD8")]
		public static IntPtr GetGenericInterface(string pchInterfaceVersion, ref EVRInitError peError)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600173F")]
		[Address(RVA = "0x5DAC1C", Offset = "0x5DAC1C", VA = "0x5DAC1C")]
		public static bool IsInterfaceVersionValid(string pchInterfaceVersion)
		{
			return default(bool);
		}

		[Token(Token = "0x6001740")]
		[Address(RVA = "0x5DAD64", Offset = "0x5DAD64", VA = "0x5DAD64")]
		public static uint GetInitToken()
		{
			return default(uint);
		}

		[Token(Token = "0x6001751")]
		[Address(RVA = "0x5DC3E4", Offset = "0x5DC3E4", VA = "0x5DC3E4")]
		public static CVRSystem Init(ref EVRInitError peError, EVRApplicationType eApplicationType = EVRApplicationType.VRApplication_Scene, string pchStartupInfo = "")
		{
			return null;
		}

		[Token(Token = "0x6001752")]
		[Address(RVA = "0x5DC774", Offset = "0x5DC774", VA = "0x5DC774")]
		public static void Shutdown()
		{
		}

		[Token(Token = "0x6001753")]
		[Address(RVA = "0x5DC7EC", Offset = "0x5DC7EC", VA = "0x5DC7EC")]
		public OpenVR()
		{
		}
	}
}
namespace Oculus.Spatializer.Propagation
{
	[Token(Token = "0x2000375")]
	public enum FaceType : uint
	{
		[Token(Token = "0x4001700")]
		TRIANGLES,
		[Token(Token = "0x4001701")]
		QUADS
	}
	[Token(Token = "0x2000376")]
	public enum MaterialProperty : uint
	{
		[Token(Token = "0x4001703")]
		ABSORPTION,
		[Token(Token = "0x4001704")]
		TRANSMISSION,
		[Token(Token = "0x4001705")]
		SCATTERING
	}
	[Token(Token = "0x2000377")]
	public struct MeshGroup
	{
		[Token(Token = "0x4001706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public UIntPtr indexOffset;

		[Token(Token = "0x4001707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public UIntPtr faceCount;

		[Token(Token = "0x4001708")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public FaceType faceType;

		[Token(Token = "0x4001709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public IntPtr material;
	}
}
namespace UnitySA.Characters.FirstPerson
{
	[Token(Token = "0x2000378")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x2EA344", Offset = "0x2EA344")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x2EA344", Offset = "0x2EA344")]
	public class FPCtrl : MonoBehaviour
	{
		[Token(Token = "0x400170A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private bool m_IsWalking;

		[Token(Token = "0x400170B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private float m_WalkSpeed;

		[Token(Token = "0x400170C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private float m_RunSpeed;

		[Token(Token = "0x400170D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F59F4", Offset = "0x2F59F4")]
		private float m_RunstepLenghten;

		[Token(Token = "0x400170E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float m_JumpSpeed;

		[Token(Token = "0x400170F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float m_StickToGroundForce;

		[Token(Token = "0x4001710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float m_GravityMultiplier;

		[Token(Token = "0x4001711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private MLook m_MouseLook;

		[Token(Token = "0x4001712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private bool m_UseFovKick;

		[Token(Token = "0x4001713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private FOVZoom m_FovKick;

		[Token(Token = "0x4001714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private bool m_UseHeadBob;

		[Token(Token = "0x4001715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private CurveCtrlBob m_HeadBob;

		[Token(Token = "0x4001716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private LerpCtrlBob m_JumpBob;

		[Token(Token = "0x4001717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private float m_StepInterval;

		[Token(Token = "0x4001718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Camera m_Camera;

		[Token(Token = "0x4001719")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool m_Jump;

		[Token(Token = "0x400171A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float m_YRotation;

		[Token(Token = "0x400171B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector2 m_Input;

		[Token(Token = "0x400171C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 m_MoveDir;

		[Token(Token = "0x400171D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private CharacterController m_CharacterController;

		[Token(Token = "0x400171E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private CollisionFlags m_CollisionFlags;

		[Token(Token = "0x400171F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool m_PreviouslyGrounded;

		[Token(Token = "0x4001720")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector3 m_OriginalCameraPosition;

		[Token(Token = "0x4001721")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float m_StepCycle;

		[Token(Token = "0x4001722")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float m_NextStep;

		[Token(Token = "0x4001723")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private bool m_Jumping;

		[Token(Token = "0x6001755")]
		[Address(RVA = "0x8F13C4", Offset = "0x8F13C4", VA = "0x8F13C4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001756")]
		[Address(RVA = "0x8F1710", Offset = "0x8F1710", VA = "0x8F1710")]
		private void Update()
		{
		}

		[Token(Token = "0x6001757")]
		[Address(RVA = "0x8F194C", Offset = "0x8F194C", VA = "0x8F194C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001758")]
		[Address(RVA = "0x8F2010", Offset = "0x8F2010", VA = "0x8F2010")]
		private void ProgressStepCycle(float speed)
		{
		}

		[Token(Token = "0x6001759")]
		[Address(RVA = "0x8F2148", Offset = "0x8F2148", VA = "0x8F2148")]
		private void UpdateCameraPosition(float speed)
		{
		}

		[Token(Token = "0x600175A")]
		[Address(RVA = "0x8F1E2C", Offset = "0x8F1E2C", VA = "0x8F1E2C")]
		private void GetInput(out float speed)
		{
		}

		[Token(Token = "0x600175B")]
		[Address(RVA = "0x8F185C", Offset = "0x8F185C", VA = "0x8F185C")]
		private void RotateView()
		{
		}

		[Token(Token = "0x600175C")]
		[Address(RVA = "0x8F2A88", Offset = "0x8F2A88", VA = "0x8F2A88")]
		private void OnControllerColliderHit(ControllerColliderHit hit)
		{
		}

		[Token(Token = "0x600175D")]
		[Address(RVA = "0x8F2C64", Offset = "0x8F2C64", VA = "0x8F2C64")]
		public FPCtrl()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000379")]
	public class MLook
	{
		[Token(Token = "0x4001724")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float XSensitivity;

		[Token(Token = "0x4001725")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float YSensitivity;

		[Token(Token = "0x4001726")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool clampVerticalRotation;

		[Token(Token = "0x4001727")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float MinimumX;

		[Token(Token = "0x4001728")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float MaximumX;

		[Token(Token = "0x4001729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool smooth;

		[Token(Token = "0x400172A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float smoothTime;

		[Token(Token = "0x400172B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool lockCursor;

		[Token(Token = "0x400172C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Quaternion m_CharacterTargetRot;

		[Token(Token = "0x400172D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Quaternion m_CameraTargetRot;

		[Token(Token = "0x400172E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool m_cursorIsLocked;

		[Token(Token = "0x600175E")]
		[Address(RVA = "0x8F168C", Offset = "0x8F168C", VA = "0x8F168C")]
		public void Init(Transform character, Transform camera)
		{
		}

		[Token(Token = "0x600175F")]
		[Address(RVA = "0x8F26B8", Offset = "0x8F26B8", VA = "0x8F26B8")]
		public void LookRotation(Transform character, Transform camera)
		{
		}

		[Token(Token = "0x6001760")]
		[Address(RVA = "0x8F3194", Offset = "0x8F3194", VA = "0x8F3194")]
		public void SetCursorLock(bool value)
		{
		}

		[Token(Token = "0x6001761")]
		[Address(RVA = "0x8F2448", Offset = "0x8F2448", VA = "0x8F2448")]
		public void UpdateCursorLock()
		{
		}

		[Token(Token = "0x6001762")]
		[Address(RVA = "0x8F31C4", Offset = "0x8F31C4", VA = "0x8F31C4")]
		private void InternalLockUpdate()
		{
		}

		[Token(Token = "0x6001763")]
		[Address(RVA = "0x8F308C", Offset = "0x8F308C", VA = "0x8F308C")]
		private Quaternion ClampRotationAroundXAxis(Quaternion q)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001764")]
		[Address(RVA = "0x8F3244", Offset = "0x8F3244", VA = "0x8F3244")]
		public MLook()
		{
		}
	}
}
namespace UnitySA.Utility
{
	[Serializable]
	[Token(Token = "0x200037A")]
	public class CurveCtrlBob
	{
		[Token(Token = "0x400172F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float HorizontalBobRange;

		[Token(Token = "0x4001730")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float VerticalBobRange;

		[Token(Token = "0x4001731")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AnimationCurve Bobcurve;

		[Token(Token = "0x4001732")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float VerticaltoHorizontalRatio;

		[Token(Token = "0x4001733")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float m_CyclePositionX;

		[Token(Token = "0x4001734")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float m_CyclePositionY;

		[Token(Token = "0x4001735")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float m_BobBaseInterval;

		[Token(Token = "0x4001736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 m_OriginalCameraPosition;

		[Token(Token = "0x4001737")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float m_Time;

		[Token(Token = "0x6001765")]
		[Address(RVA = "0x8F158C", Offset = "0x8F158C", VA = "0x8F158C")]
		public void Setup(Camera camera, float bobBaseInterval)
		{
		}

		[Token(Token = "0x6001766")]
		[Address(RVA = "0x8F2458", Offset = "0x8F2458", VA = "0x8F2458")]
		public Vector3 DoHeadBob(float speed)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001767")]
		[Address(RVA = "0x8F2DAC", Offset = "0x8F2DAC", VA = "0x8F2DAC")]
		public CurveCtrlBob()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200037B")]
	public class FOVZoom
	{
		[Token(Token = "0x20006F2")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EC804", Offset = "0x2EC804")]
		private sealed class <FOVKickUp>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002016")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int <>1__state;

			[Token(Token = "0x4002017")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private object <>2__current;

			[Token(Token = "0x4002018")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FOVZoom <>4__this;

			[Token(Token = "0x4002019")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <t>5__2;

			[Token(Token = "0x170003E3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002390")]
				[Address(RVA = "0x8F38AC", Offset = "0x8F38AC", VA = "0x8F38AC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003E4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002392")]
				[Address(RVA = "0x8F393C", Offset = "0x8F393C", VA = "0x8F393C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600238D")]
			[Address(RVA = "0x8F33CC", Offset = "0x8F33CC", VA = "0x8F33CC")]
			[DebuggerHidden]
			public <FOVKickUp>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x600238E")]
			[Address(RVA = "0x8F36D0", Offset = "0x8F36D0", VA = "0x8F36D0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600238F")]
			[Address(RVA = "0x8F36D4", Offset = "0x8F36D4", VA = "0x8F36D4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002391")]
			[Address(RVA = "0x8F38B4", Offset = "0x8F38B4", VA = "0x8F38B4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20006F3")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EC814", Offset = "0x2EC814")]
		private sealed class <FOVKickDown>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400201A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int <>1__state;

			[Token(Token = "0x400201B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private object <>2__current;

			[Token(Token = "0x400201C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FOVZoom <>4__this;

			[Token(Token = "0x400201D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <t>5__2;

			[Token(Token = "0x170003E5")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002396")]
				[Address(RVA = "0x8F3638", Offset = "0x8F3638", VA = "0x8F3638", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003E6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002398")]
				[Address(RVA = "0x8F36C8", Offset = "0x8F36C8", VA = "0x8F36C8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002393")]
			[Address(RVA = "0x8F33EC", Offset = "0x8F33EC", VA = "0x8F33EC")]
			[DebuggerHidden]
			public <FOVKickDown>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x6002394")]
			[Address(RVA = "0x8F340C", Offset = "0x8F340C", VA = "0x8F340C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002395")]
			[Address(RVA = "0x8F3410", Offset = "0x8F3410", VA = "0x8F3410", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002397")]
			[Address(RVA = "0x8F3640", Offset = "0x8F3640", VA = "0x8F3640", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001738")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Camera Camera;

		[Token(Token = "0x4001739")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[HideInInspector]
		public float originalFov;

		[Token(Token = "0x400173A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float FOVIncrease;

		[Token(Token = "0x400173B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float TimeToIncrease;

		[Token(Token = "0x400173C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float TimeToDecrease;

		[Token(Token = "0x400173D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public AnimationCurve IncreaseCurve;

		[Token(Token = "0x6001768")]
		[Address(RVA = "0x8F1550", Offset = "0x8F1550", VA = "0x8F1550")]
		public void Setup(Camera camera)
		{
		}

		[Token(Token = "0x6001769")]
		[Address(RVA = "0x8F328C", Offset = "0x8F328C", VA = "0x8F328C")]
		private void CheckStatus(Camera camera)
		{
		}

		[Token(Token = "0x600176A")]
		[Address(RVA = "0x8F33C4", Offset = "0x8F33C4", VA = "0x8F33C4")]
		public void ChangeCamera(Camera camera)
		{
		}

		[Token(Token = "0x600176B")]
		[Address(RVA = "0x8F262C", Offset = "0x8F262C", VA = "0x8F262C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2FC4C8", Offset = "0x2FC4C8")]
		public IEnumerator FOVKickUp()
		{
			return null;
		}

		[Token(Token = "0x600176C")]
		[Address(RVA = "0x8F25A0", Offset = "0x8F25A0", VA = "0x8F25A0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2FC540", Offset = "0x2FC540")]
		public IEnumerator FOVKickDown()
		{
			return null;
		}

		[Token(Token = "0x600176D")]
		[Address(RVA = "0x8F2D8C", Offset = "0x8F2D8C", VA = "0x8F2D8C")]
		public FOVZoom()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200037C")]
	public class LerpCtrlBob
	{
		[Token(Token = "0x20006F4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EC824", Offset = "0x2EC824")]
		private sealed class <DoBobCycle>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400201E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int <>1__state;

			[Token(Token = "0x400201F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private object <>2__current;

			[Token(Token = "0x4002020")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public LerpCtrlBob <>4__this;

			[Token(Token = "0x4002021")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <t>5__2;

			[Token(Token = "0x170003E7")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600239C")]
				[Address(RVA = "0x8F3BE4", Offset = "0x8F3BE4", VA = "0x8F3BE4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003E8")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600239E")]
				[Address(RVA = "0x8F3C74", Offset = "0x8F3C74", VA = "0x8F3C74", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002399")]
			[Address(RVA = "0x8F394C", Offset = "0x8F394C", VA = "0x8F394C")]
			[DebuggerHidden]
			public <DoBobCycle>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x600239A")]
			[Address(RVA = "0x8F396C", Offset = "0x8F396C", VA = "0x8F396C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600239B")]
			[Address(RVA = "0x8F3970", Offset = "0x8F3970", VA = "0x8F3970", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600239D")]
			[Address(RVA = "0x8F3BEC", Offset = "0x8F3BEC", VA = "0x8F3BEC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400173E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float BobDuration;

		[Token(Token = "0x400173F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float BobAmount;

		[Token(Token = "0x4001740")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float m_Offset;

		[Token(Token = "0x600176E")]
		[Address(RVA = "0x8F3944", Offset = "0x8F3944", VA = "0x8F3944")]
		public float Offset()
		{
			return default(float);
		}

		[Token(Token = "0x600176F")]
		[Address(RVA = "0x8F18C0", Offset = "0x8F18C0", VA = "0x8F18C0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x2FC5B8", Offset = "0x2FC5B8")]
		public IEnumerator DoBobCycle()
		{
			return null;
		}

		[Token(Token = "0x6001770")]
		[Address(RVA = "0x8F3084", Offset = "0x8F3084", VA = "0x8F3084")]
		public LerpCtrlBob()
		{
		}
	}
}
namespace ch.sycoforge.Decal.Demo
{
	[Token(Token = "0x200037D")]
	public class AdvancedBulletHoles : MonoBehaviour
	{
		[Token(Token = "0x4001741")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public EasyDecal DecalPrefab;

		[Token(Token = "0x4001742")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject ImpactParticles;

		[Token(Token = "0x4001743")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float CastRadius;

		[Token(Token = "0x6001771")]
		[Address(RVA = "0x178B190", Offset = "0x178B190", VA = "0x178B190")]
		private void Start()
		{
		}

		[Token(Token = "0x6001772")]
		[Address(RVA = "0x178B2B0", Offset = "0x178B2B0", VA = "0x178B2B0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001773")]
		[Address(RVA = "0x178B920", Offset = "0x178B920", VA = "0x178B920")]
		public AdvancedBulletHoles()
		{
		}
	}
	[Token(Token = "0x200037E")]
	public class BasicBulletHoles : MonoBehaviour
	{
		[Token(Token = "0x4001744")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public EasyDecal DecalPrefab;

		[Token(Token = "0x4001745")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool t;

		[Token(Token = "0x6001774")]
		[Address(RVA = "0x178B930", Offset = "0x178B930", VA = "0x178B930")]
		public void Start()
		{
		}

		[Token(Token = "0x6001775")]
		[Address(RVA = "0x178BA08", Offset = "0x178BA08", VA = "0x178BA08")]
		public void Update()
		{
		}

		[Token(Token = "0x6001776")]
		[Address(RVA = "0x178BCD0", Offset = "0x178BCD0", VA = "0x178BCD0")]
		public BasicBulletHoles()
		{
		}
	}
	[Token(Token = "0x200037F")]
	public static class BezierUtil
	{
		[Token(Token = "0x6001777")]
		[Address(RVA = "0x178BCD8", Offset = "0x178BCD8", VA = "0x178BCD8")]
		public static List<Vector3> InterpolatePath(List<Vector3> path, int segments, float radius, float angleThreshold)
		{
			return null;
		}

		[Token(Token = "0x6001778")]
		[Address(RVA = "0x178C3D8", Offset = "0x178C3D8", VA = "0x178C3D8")]
		public static Vector3[] GetBezierApproximation(Vector3[] controlPoints, int outputSegmentCount)
		{
			return null;
		}

		[Token(Token = "0x6001779")]
		[Address(RVA = "0x178C500", Offset = "0x178C500", VA = "0x178C500")]
		public static Vector3 GetBezierPoint(float t, Vector3[] controlPoints, int index, int count)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x2000380")]
	public static class LineUtil
	{
		[Token(Token = "0x600177A")]
		[Address(RVA = "0x178C738", Offset = "0x178C738", VA = "0x178C738")]
		public static void DrawPath(float thickness, Material material, List<Vector3> path)
		{
		}

		[Token(Token = "0x600177B")]
		[Address(RVA = "0x178C908", Offset = "0x178C908", VA = "0x178C908")]
		private static void DrawLine(float thickness, Vector3 start, Vector3 end)
		{
		}
	}
	[Token(Token = "0x2000381")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x2EA3E8", Offset = "0x2EA3E8")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x2EA3E8", Offset = "0x2EA3E8")]
	public class PathAgent : MonoBehaviour
	{
		[Token(Token = "0x4001746")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float PathThickness;

		[Token(Token = "0x4001747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F5ADC", Offset = "0x2F5ADC")]
		public float NormalPathOffset;

		[Token(Token = "0x4001748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F5B24", Offset = "0x2F5B24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F5B24", Offset = "0x2F5B24")]
		public float Radius;

		[Token(Token = "0x4001749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F5B90", Offset = "0x2F5B90")]
		public float AngleThreshold;

		[Token(Token = "0x400174A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool DrawGizmos;

		[Token(Token = "0x400174B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EasyDecal TargetAimDecal;

		[Token(Token = "0x400174C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public GameObject TargetPointDecalPrefab;

		[Token(Token = "0x400174D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Vector3> path;

		[Token(Token = "0x400174E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private NavMeshAgent agent;

		[Token(Token = "0x400174F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private LineRenderer lineRenderer;

		[Token(Token = "0x4001750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 decalOffset;

		[Token(Token = "0x4001751")]
		private const int MAXDISTANCE = 50;

		[Token(Token = "0x600177C")]
		[Address(RVA = "0x178CC40", Offset = "0x178CC40", VA = "0x178CC40")]
		private void Start()
		{
		}

		[Token(Token = "0x600177D")]
		[Address(RVA = "0x178CD08", Offset = "0x178CD08", VA = "0x178CD08")]
		private void Update()
		{
		}

		[Token(Token = "0x600177E")]
		[Address(RVA = "0x178D4C4", Offset = "0x178D4C4", VA = "0x178D4C4")]
		private void SetTarget(Ray mouseRay)
		{
		}

		[Token(Token = "0x600177F")]
		[Address(RVA = "0x178CDAC", Offset = "0x178CDAC", VA = "0x178CDAC")]
		private void CreatePath(Ray mouseRay)
		{
		}

		[Token(Token = "0x6001780")]
		[Address(RVA = "0x178D6FC", Offset = "0x178D6FC", VA = "0x178D6FC")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6001781")]
		[Address(RVA = "0x178D88C", Offset = "0x178D88C", VA = "0x178D88C")]
		public PathAgent()
		{
		}
	}
	[Token(Token = "0x2000382")]
	public class ProxyRegister : MonoBehaviour
	{
		[Token(Token = "0x4001752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public StaticProxyCollection ProxyCollection;

		[Token(Token = "0x6001782")]
		[Address(RVA = "0x178D9A0", Offset = "0x178D9A0", VA = "0x178D9A0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001783")]
		[Address(RVA = "0x178DA98", Offset = "0x178DA98", VA = "0x178DA98")]
		public ProxyRegister()
		{
		}
	}
	[Token(Token = "0x2000383")]
	public class Sinoid : MonoBehaviour
	{
		[Token(Token = "0x4001753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float AngularVelocity;

		[Token(Token = "0x4001754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float SineFreq;

		[Token(Token = "0x4001755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float Amplitude;

		[Token(Token = "0x4001756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float accuTime;

		[Token(Token = "0x4001757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Vector3 startPos;

		[Token(Token = "0x6001784")]
		[Address(RVA = "0x178DAA0", Offset = "0x178DAA0", VA = "0x178DAA0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001785")]
		[Address(RVA = "0x178DAF0", Offset = "0x178DAF0", VA = "0x178DAF0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001786")]
		[Address(RVA = "0x178DD3C", Offset = "0x178DD3C", VA = "0x178DD3C")]
		public Sinoid()
		{
		}
	}
}
namespace UnityStandardAssets.Utility
{
	[Token(Token = "0x2000384")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x2EA48C", Offset = "0x2EA48C")]
	public class FPSCounter : MonoBehaviour
	{
		[Token(Token = "0x4001758")]
		private const float fpsMeasurePeriod = 0.5f;

		[Token(Token = "0x4001759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private int m_FpsAccumulator;

		[Token(Token = "0x400175A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float m_FpsNextPeriod;

		[Token(Token = "0x400175B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int m_CurrentFps;

		[Token(Token = "0x400175C")]
		private const string display = "{0} FPS";

		[Token(Token = "0x400175D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Text m_Text;

		[Token(Token = "0x6001787")]
		[Address(RVA = "0x8F3C7C", Offset = "0x8F3C7C", VA = "0x8F3C7C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001788")]
		[Address(RVA = "0x8F3CFC", Offset = "0x8F3CFC", VA = "0x8F3CFC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001789")]
		[Address(RVA = "0x8F3E10", Offset = "0x8F3E10", VA = "0x8F3E10")]
		public FPSCounter()
		{
		}
	}
}
namespace DG.Tweening
{
	[Token(Token = "0x2000385")]
	public static class DOTweenModuleAudio
	{
		[Token(Token = "0x20006F5")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EC834", Offset = "0x2EC834")]
		private sealed class <>c__DisplayClass0_0
		{
			[Token(Token = "0x4002022")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AudioSource target;

			[Token(Token = "0x600239F")]
			[Address(RVA = "0x5FC468", Offset = "0x5FC468", VA = "0x5FC468")]
			public <>c__DisplayClass0_0()
			{
			}

			[Token(Token = "0x60023A0")]
			[Address(RVA = "0x5FCDF0", Offset = "0x5FCDF0", VA = "0x5FCDF0")]
			internal float <DOFade>b__0()
			{
				return default(float);
			}

			[Token(Token = "0x60023A1")]
			[Address(RVA = "0x5FCE1C", Offset = "0x5FCE1C", VA = "0x5FCE1C")]
			internal void <DOFade>b__1(float x)
			{
			}
		}

		[Token(Token = "0x20006F6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EC844", Offset = "0x2EC844")]
		private sealed class <>c__DisplayClass1_0
		{
			[Token(Token = "0x4002023")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AudioSource target;

			[Token(Token = "0x60023A2")]
			[Address(RVA = "0x5FC5E8", Offset = "0x5FC5E8", VA = "0x5FC5E8")]
			public <>c__DisplayClass1_0()
			{
			}

			[Token(Token = "0x60023A3")]
			[Address(RVA = "0x5FCE50", Offset = "0x5FCE50", VA = "0x5FCE50")]
			internal float <DOPitch>b__0()
			{
				return default(float);
			}

			[Token(Token = "0x60023A4")]
			[Address(RVA = "0x5FCE7C", Offset = "0x5FCE7C", VA = "0x5FCE7C")]
			internal void <DOPitch>b__1(float x)
			{
			}
		}

		[Token(Token = "0x20006F7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EC854", Offset = "0x2EC854")]
		private sealed class <>c__DisplayClass2_0
		{
			[Token(Token = "0x4002024")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AudioMixer target;

			[Token(Token = "0x4002025")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public string floatName;

			[Token(Token = "0x60023A5")]
			[Address(RVA = "0x5FC788", Offset = "0x5FC788", VA = "0x5FC788")]
			public <>c__DisplayClass2_0()
			{
			}

			[Token(Token = "0x60023A6")]
			[Address(RVA = "0x5FCEB0", Offset = "0x5FCEB0", VA = "0x5FCEB0")]
			internal float <DOSetFloat>b__0()
			{
				return default(float);
			}

			[Token(Token = "0x60023A7")]
			[Address(RVA = "0x5FCEFC", Offset = "0x5FCEFC", VA = "0x5FCEFC")]
			internal void <DOSetFloat>b__1(float x)
			{
			}
		}

		[Token(Token = "0x600178A")]
		[Address(RVA = "0x5FC2BC", Offset = "0x5FC2BC", VA = "0x5FC2BC")]
		public static Tweener DOFade(this AudioSource target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x600178B")]
		[Address(RVA = "0x5FC470", Offset = "0x5FC470", VA = "0x5FC470")]
		public static Tweener DOPitch(this AudioSource target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x600178C")]
		[Address(RVA = "0x5FC5F0", Offset = "0x5FC5F0", VA = "0x5FC5F0")]
		public static Tweener DOSetFloat(this AudioMixer target, string floatName, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x600178D")]
		[Address(RVA = "0x5FC790", Offset = "0x5FC790", VA = "0x5FC790")]
		public static int DOComplete(this AudioMixer target, bool withCallbacks = false)
		{
			return default(int);
		}

		[Token(Token = "0x600178E")]
		[Address(RVA = "0x5FC81C", Offset = "0x5FC81C", VA = "0x5FC81C")]
		public static int DOKill(this AudioMixer target, bool complete = false)
		{
			return default(int);
		}

		[Token(Token = "0x600178F")]
		[Address(RVA = "0x5FC8A8", Offset = "0x5FC8A8", VA = "0x5FC8A8")]
		public static int DOFlip(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6001790")]
		[Address(RVA = "0x5FC92C", Offset = "0x5FC92C", VA = "0x5FC92C")]
		public static int DOGoto(this AudioMixer target, float to, bool andPlay = false)
		{
			return default(int);
		}

		[Token(Token = "0x6001791")]
		[Address(RVA = "0x5FC9C0", Offset = "0x5FC9C0", VA = "0x5FC9C0")]
		public static int DOPause(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6001792")]
		[Address(RVA = "0x5FCA44", Offset = "0x5FCA44", VA = "0x5FCA44")]
		public static int DOPlay(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6001793")]
		[Address(RVA = "0x5FCAC8", Offset = "0x5FCAC8", VA = "0x5FCAC8")]
		public static int DOPlayBackwards(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6001794")]
		[Address(RVA = "0x5FCB4C", Offset = "0x5FCB4C", VA = "0x5FCB4C")]
		public static int DOPlayForward(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6001795")]
		[Address(RVA = "0x5FCBD0", Offset = "0x5FCBD0", VA = "0x5FCBD0")]
		public static int DORestart(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6001796")]
		[Address(RVA = "0x5FCC60", Offset = "0x5FCC60", VA = "0x5FCC60")]
		public static int DORewind(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6001797")]
		[Address(RVA = "0x5FCCE8", Offset = "0x5FCCE8", VA = "0x5FCCE8")]
		public static int DOSmoothRewind(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6001798")]
		[Address(RVA = "0x5FCD6C", Offset = "0x5FCD6C", VA = "0x5FCD6C")]
		public static int DOTogglePause(this AudioMixer target)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000386")]
	public static class DOTweenModulePhysics
	{
		[Token(Token = "0x20006F8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EC864", Offset = "0x2EC864")]
		private sealed class <>c__DisplayClass0_0
		{
			[Token(Token = "0x4002026")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Rigidbody target;

			[Token(Token = "0x60023A8")]
			[Address(RVA = "0x5FD0F8", Offset = "0x5FD0F8", VA = "0x5FD0F8")]
			public <>c__DisplayClass0_0()
			{
			}

			[Token(Token = "0x60023A9")]
			[Address(RVA = "0x5FEA78", Offset = "0x5FEA78", VA = "0x5FEA78")]
			internal Vector3 <DOMove>b__0()
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x20006F9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EC874", Offset = "0x2EC874")]
		private sealed class <>c__DisplayClass1_0
		{
			[Token(Token = "0x4002027")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Rigidbody target;

			[Token(Token = "0x60023AA")]
			[Address(RVA = "0x5FD2DC", Offset = "0x5FD2DC", VA = "0x5FD2DC")]
			public <>c__DisplayClass1_0()
			{
			}

			[Token(Token = "0x60023AB")]
			[Address(RVA = "0x5FEC38", Offset = "0x5FEC38", VA = "0x5FEC38")]
			internal Vector3 <DOMoveX>b__0()
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x20006FA")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EC884", Offset = "0x2EC884")]
		private sealed class <>c__DisplayClass2_0
		{
			[Token(Token = "0x4002028")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Rigidbody target;

			[Token(Token = "0x60023AC")]
			[Address(RVA = "0x5FD4C0", Offset = "0x5FD4C0", VA = "0x5FD4C0")]
			public <>c__DisplayClass2_0()
			{
			}

			[Token(Token = "0x60023AD")]
			[Address(RVA = "0x5FEC6C", Offset = "0x5FEC6C", VA = "0x5FEC6C")]
			internal Vector3 <DOMoveY>b__0()
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x20006FB")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EC894", Offset = "0x2EC894")]
		private sealed class <>c__DisplayClass3_0
		{
			[Token(Token = "0x4002029")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Rigidbody target;

			[Token(Token = "0x60023AE")]
			[Address(RVA = "0x5FD6A4", Offset = "0x5FD6A4", VA = "0x5FD6A4")]
			public <>c__DisplayClass3_0()
			{
			}

			[Token(Token = "0x60023AF")]
			[Address(RVA = "0x5FECA0", Offset = "0x5FECA0", VA = "0x5FECA0")]
			internal Vector3 <DOMoveZ>b__0()
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x20006FC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EC8A4", Offset = "0x2EC8A4")]
		private sealed class <>c__DisplayClass4_0
		{
			[Token(Token = "0x400202A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Rigidbody target;

			[Token(Token = "0x60023B0")]
			[Address(RVA = "0x5FD87C", Offset = "0x5FD87C", VA = "0x5FD87C")]
			public <>c__DisplayClass4_0()
			{
			}

			[Token(Token = "0x60023B1")]
			[Address(RVA = "0x5FECD4", Offset = "0x5FECD4", VA = "0x5FECD4")]
			internal Quaternion <DORotate>b__0()
			{
				return default(Quaternion);
			}
		}

		[Token(Token = "0x20006FD")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EC8B4", Offset = "0x2EC8B4")]
		private sealed class <>c__DisplayClass5_0
		{
			[Token(Token = "0x400202B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Rigidbody target;

			[Token(Token = "0x60023B2")]
			[Address(RVA = "0x5FDB10", Offset = "0x5FDB10", VA = "0x5FDB10")]
			public <>c__DisplayClass5_0()
			{
			}

			[Token(Token = "0x60023B3")]
			[Address(RVA = "0x5FED08", Offset = "0x5FED08", VA = "0x5FED08")]
			internal Quaternion <DOLookAt>b__0()
			{
				return default(Quaternion);
			}
		}

		[Token(Token = "0x20006FE")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EC8C4", Offset = "0x2EC8C4")]
		private sealed class <>c__DisplayClass6_0
		{
			[Token(Token = "0x400202C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Rigidbody target;

			[Token(Token = "0x400202D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public float startPosY;

			[Token(Token = "0x400202E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool offsetYSet;

			[Token(Token = "0x400202F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float offsetY;

			[Token(Token = "0x4002030")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Sequence s;

			[Token(Token = "0x4002031")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 endValue;

			[Token(Token = "0x4002032")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Tween yTween;

			[Token(Token = "0x60023B4")]
			[Address(RVA = "0x5FE0A8", Offset = "0x5FE0A8", VA = "0x5FE0A8")]
			public <>c__DisplayClass6_0()
			{
			}

			[Token(Token = "0x60023B5")]
			[Address(RVA = "0x5FED3C", Offset = "0x5FED3C", VA = "0x5FED3C")]
			internal Vector3 <DOJump>b__0()
			{
				return default(Vector3);
			}

			[Token(Token = "0x60023B6")]
			[Address(RVA = "0x5FED70", Offset = "0x5FED70", VA = "0x5FED70")]
			internal void <DOJump>b__1()
			{
			}

			[Token(Token = "0x60023B7")]
			[Address(RVA = "0x5FEDB4", Offset = "0x5FEDB4", VA = "0x5FEDB4")]
			internal Vector3 <DOJump>b__2()
			{
				return default(Vector3);
			}

			[Token(Token = "0x60023B8")]
			[Address(RVA = "0x5FEDE8", Offset = "0x5FEDE8", VA = "0x5FEDE8")]
			internal Vector3 <DOJump>b__3()
			{
				return default(Vector3);
			}

			[Token(Token = "0x60023B9")]
			[Address(RVA = "0x5FEE1C", Offset = "0x5FEE1C", VA = "0x5FEE1C")]
			internal void <DOJump>b__4()
			{
			}
		}

		[Token(Token = "0x20006FF")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EC8D4", Offset = "0x2EC8D4")]
		private sealed class <>c__DisplayClass7_0
		{
			[Token(Token = "0x4002033")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Rigidbody target;

			[Token(Token = "0x60023BA")]
			[Address(RVA = "0x5FE330", Offset = "0x5FE330", VA = "0x5FE330")]
			public <>c__DisplayClass7_0()
			{
			}

			[Token(Token = "0x60023BB")]
			[Address(RVA = "0x5FEF14", Offset = "0x5FEF14", VA = "0x5FEF14")]
			internal Vector3 <DOPath>b__0()
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x2000700")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EC8E4", Offset = "0x2EC8E4")]
		private sealed class <>c__DisplayClass8_0
		{
			[Token(Token = "0x4002034")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Transform trans;

			[Token(Token = "0x4002035")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Rigidbody target;

			[Token(Token = "0x60023BC")]
			[Address(RVA = "0x5FE614", Offset = "0x5FE614", VA = "0x5FE614")]
			public <>c__DisplayClass8_0()
			{
			}

			[Token(Token = "0x60023BD")]
			[Address(RVA = "0x5FEF48", Offset = "0x5FEF48", VA = "0x5FEF48")]
			internal Vector3 <DOLocalPath>b__0()
			{
				return default(Vector3);
			}

			[Token(Token = "0x60023BE")]
			[Address(RVA = "0x5FEF7C", Offset = "0x5FEF7C", VA = "0x5FEF7C")]
			internal void <DOLocalPath>b__1(Vector3 x)
			{
			}
		}

		[Token(Token = "0x2000701")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EC8F4", Offset = "0x2EC8F4")]
		private sealed class <>c__DisplayClass9_0
		{
			[Token(Token = "0x4002036")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Rigidbody target;

			[Token(Token = "0x60023BF")]
			[Address(RVA = "0x5FE818", Offset = "0x5FE818", VA = "0x5FE818")]
			public <>c__DisplayClass9_0()
			{
			}

			[Token(Token = "0x60023C0")]
			[Address(RVA = "0x5FF0D4", Offset = "0x5FF0D4", VA = "0x5FF0D4")]
			internal Vector3 <DOPath>b__0()
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x2000702")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EC904", Offset = "0x2EC904")]
		private sealed class <>c__DisplayClass10_0
		{
			[Token(Token = "0x4002037")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Transform trans;

			[Token(Token = "0x4002038")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Rigidbody target;

			[Token(Token = "0x60023C1")]
			[Address(RVA = "0x5FEA70", Offset = "0x5FEA70", VA = "0x5FEA70")]
			public <>c__DisplayClass10_0()
			{
			}

			[Token(Token = "0x60023C2")]
			[Address(RVA = "0x5FEAAC", Offset = "0x5FEAAC", VA = "0x5FEAAC")]
			internal Vector3 <DOLocalPath>b__0()
			{
				return default(Vector3);
			}

			[Token(Token = "0x60023C3")]
			[Address(RVA = "0x5FEAE0", Offset = "0x5FEAE0", VA = "0x5FEAE0")]
			internal void <DOLocalPath>b__1(Vector3 x)
			{
			}
		}

		[Token(Token = "0x6001799")]
		[Address(RVA = "0x5FCF38", Offset = "0x5FCF38", VA = "0x5FCF38")]
		public static Tweener DOMove(this Rigidbody target, Vector3 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600179A")]
		[Address(RVA = "0x5FD100", Offset = "0x5FD100", VA = "0x5FD100")]
		public static Tweener DOMoveX(this Rigidbody target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600179B")]
		[Address(RVA = "0x5FD2E4", Offset = "0x5FD2E4", VA = "0x5FD2E4")]
		public static Tweener DOMoveY(this Rigidbody target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600179C")]
		[Address(RVA = "0x5FD4C8", Offset = "0x5FD4C8", VA = "0x5FD4C8")]
		public static Tweener DOMoveZ(this Rigidbody target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600179D")]
		[Address(RVA = "0x5FD6AC", Offset = "0x5FD6AC", VA = "0x5FD6AC")]
		public static Tweener DORotate(this Rigidbody target, Vector3 endValue, float duration, RotateMode mode = RotateMode.Fast)
		{
			return null;
		}

		[Token(Token = "0x600179E")]
		[Address(RVA = "0x5FD884", Offset = "0x5FD884", VA = "0x5FD884")]
		public static Tweener DOLookAt(this Rigidbody target, Vector3 towards, float duration, AxisConstraint axisConstraint = AxisConstraint.None, [Optional] Vector3? up)
		{
			return null;
		}

		[Token(Token = "0x600179F")]
		[Address(RVA = "0x5FDB18", Offset = "0x5FDB18", VA = "0x5FDB18")]
		public static Sequence DOJump(this Rigidbody target, Vector3 endValue, float jumpPower, int numJumps, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60017A0")]
		[Address(RVA = "0x5FE0B0", Offset = "0x5FE0B0", VA = "0x5FE0B0")]
		public static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> DOPath(this Rigidbody target, Vector3[] path, float duration, PathType pathType = PathType.Linear, PathMode pathMode = PathMode.Full3D, int resolution = 10, [Optional] Color? gizmoColor)
		{
			return null;
		}

		[Token(Token = "0x60017A1")]
		[Address(RVA = "0x5FE338", Offset = "0x5FE338", VA = "0x5FE338")]
		public static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> DOLocalPath(this Rigidbody target, Vector3[] path, float duration, PathType pathType = PathType.Linear, PathMode pathMode = PathMode.Full3D, int resolution = 10, [Optional] Color? gizmoColor)
		{
			return null;
		}

		[Token(Token = "0x60017A2")]
		[Address(RVA = "0x5FE61C", Offset = "0x5FE61C", VA = "0x5FE61C")]
		internal static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> DOPath(this Rigidbody target, DG.Tweening.Plugins.Core.PathCore.Path path, float duration, PathMode pathMode = PathMode.Full3D)
		{
			return null;
		}

		[Token(Token = "0x60017A3")]
		[Address(RVA = "0x5FE820", Offset = "0x5FE820", VA = "0x5FE820")]
		internal static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> DOLocalPath(this Rigidbody target, DG.Tweening.Plugins.Core.PathCore.Path path, float duration, PathMode pathMode = PathMode.Full3D)
		{
			return null;
		}
	}
	[Token(Token = "0x2000387")]
	public static class DOTweenModulePhysics2D
	{
		[Token(Token = "0x2000703")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EC914", Offset = "0x2EC914")]
		private sealed class <>c__DisplayClass0_0
		{
			[Token(Token = "0x4002039")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Rigidbody2D target;

			[Token(Token = "0x60023C4")]
			[Address(RVA = "0x5FF2C0", Offset = "0x5FF2C0", VA = "0x5FF2C0")]
			public <>c__DisplayClass0_0()
			{
			}

			[Token(Token = "0x60023C5")]
			[Address(RVA = "0x5FFC90", Offset = "0x5FFC90", VA = "0x5FFC90")]
			internal Vector2 <DOMove>b__0()
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x2000704")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EC924", Offset = "0x2EC924")]
		private sealed class <>c__DisplayClass1_0
		{
			[Token(Token = "0x400203A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Rigidbody2D target;

			[Token(Token = "0x60023C6")]
			[Address(RVA = "0x5FF494", Offset = "0x5FF494", VA = "0x5FF494")]
			public <>c__DisplayClass1_0()
			{
			}

			[Token(Token = "0x60023C7")]
			[Address(RVA = "0x5FFCC4", Offset = "0x5FFCC4", VA = "0x5FFCC4")]
			internal Vector2 <DOMoveX>b__0()
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x2000705")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EC934", Offset = "0x2EC934")]
		private sealed class <>c__DisplayClass2_0
		{
			[Token(Token = "0x400203B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Rigidbody2D target;

			[Token(Token = "0x60023C8")]
			[Address(RVA = "0x5FF668", Offset = "0x5FF668", VA = "0x5FF668")]
			public <>c__DisplayClass2_0()
			{
			}

			[Token(Token = "0x60023C9")]
			[Address(RVA = "0x5FFCF8", Offset = "0x5FFCF8", VA = "0x5FFCF8")]
			internal Vector2 <DOMoveY>b__0()
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x2000706")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EC944", Offset = "0x2EC944")]
		private sealed class <>c__DisplayClass3_0
		{
			[Token(Token = "0x400203C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Rigidbody2D target;

			[Token(Token = "0x60023CA")]
			[Address(RVA = "0x5FF7FC", Offset = "0x5FF7FC", VA = "0x5FF7FC")]
			public <>c__DisplayClass3_0()
			{
			}

			[Token(Token = "0x60023CB")]
			[Address(RVA = "0x5FFD2C", Offset = "0x5FFD2C", VA = "0x5FFD2C")]
			internal float <DORotate>b__0()
			{
				return default(float);
			}
		}

		[Token(Token = "0x2000707")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EC954", Offset = "0x2EC954")]
		private sealed class <>c__DisplayClass4_0
		{
			[Token(Token = "0x400203D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Rigidbody2D target;

			[Token(Token = "0x400203E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public float startPosY;

			[Token(Token = "0x400203F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool offsetYSet;

			[Token(Token = "0x4002040")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float offsetY;

			[Token(Token = "0x4002041")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Sequence s;

			[Token(Token = "0x4002042")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector2 endValue;

			[Token(Token = "0x4002043")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public Tween yTween;

			[Token(Token = "0x60023CC")]
			[Address(RVA = "0x5FFC88", Offset = "0x5FFC88", VA = "0x5FFC88")]
			public <>c__DisplayClass4_0()
			{
			}

			[Token(Token = "0x60023CD")]
			[Address(RVA = "0x5FFD58", Offset = "0x5FFD58", VA = "0x5FFD58")]
			internal Vector2 <DOJump>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x60023CE")]
			[Address(RVA = "0x5FFD8C", Offset = "0x5FFD8C", VA = "0x5FFD8C")]
			internal void <DOJump>b__1(Vector2 x)
			{
			}

			[Token(Token = "0x60023CF")]
			[Address(RVA = "0x5FFDC8", Offset = "0x5FFDC8", VA = "0x5FFDC8")]
			internal void <DOJump>b__2()
			{
			}

			[Token(Token = "0x60023D0")]
			[Address(RVA = "0x5FFE0C", Offset = "0x5FFE0C", VA = "0x5FFE0C")]
			internal Vector2 <DOJump>b__3()
			{
				return default(Vector2);
			}

			[Token(Token = "0x60023D1")]
			[Address(RVA = "0x5FFE40", Offset = "0x5FFE40", VA = "0x5FFE40")]
			internal void <DOJump>b__4(Vector2 x)
			{
			}

			[Token(Token = "0x60023D2")]
			[Address(RVA = "0x5FFE7C", Offset = "0x5FFE7C", VA = "0x5FFE7C")]
			internal void <DOJump>b__5()
			{
			}
		}

		[Token(Token = "0x60017A4")]
		[Address(RVA = "0x5FF108", Offset = "0x5FF108", VA = "0x5FF108")]
		public static Tweener DOMove(this Rigidbody2D target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60017A5")]
		[Address(RVA = "0x5FF2C8", Offset = "0x5FF2C8", VA = "0x5FF2C8")]
		public static Tweener DOMoveX(this Rigidbody2D target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60017A6")]
		[Address(RVA = "0x5FF49C", Offset = "0x5FF49C", VA = "0x5FF49C")]
		public static Tweener DOMoveY(this Rigidbody2D target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60017A7")]
		[Address(RVA = "0x5FF670", Offset = "0x5FF670", VA = "0x5FF670")]
		public static Tweener DORotate(this Rigidbody2D target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x60017A8")]
		[Address(RVA = "0x5FF804", Offset = "0x5FF804", VA = "0x5FF804")]
		public static Sequence DOJump(this Rigidbody2D target, Vector2 endValue, float jumpPower, int numJumps, float duration, bool snapping = false)
		{
			return null;
		}
	}
	[Token(Token = "0x2000388")]
	public static class DOTweenModuleSprite
	{
		[Token(Token = "0x2000708")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EC964", Offset = "0x2EC964")]
		private sealed class <>c__DisplayClass0_0
		{
			[Token(Token = "0x4002044")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public SpriteRenderer target;

			[Token(Token = "0x60023D3")]
			[Address(RVA = "0x60019C", Offset = "0x60019C", VA = "0x60019C")]
			public <>c__DisplayClass0_0()
			{
			}

			[Token(Token = "0x60023D4")]
			[Address(RVA = "0x6007E4", Offset = "0x6007E4", VA = "0x6007E4")]
			internal Color <DOColor>b__0()
			{
				return default(Color);
			}

			[Token(Token = "0x60023D5")]
			[Address(RVA = "0x600818", Offset = "0x600818", VA = "0x600818")]
			internal void <DOColor>b__1(Color x)
			{
			}
		}

		[Token(Token = "0x2000709")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EC974", Offset = "0x2EC974")]
		private sealed class <>c__DisplayClass1_0
		{
			[Token(Token = "0x4002045")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public SpriteRenderer target;

			[Token(Token = "0x60023D6")]
			[Address(RVA = "0x60031C", Offset = "0x60031C", VA = "0x60031C")]
			public <>c__DisplayClass1_0()
			{
			}

			[Token(Token = "0x60023D7")]
			[Address(RVA = "0x600870", Offset = "0x600870", VA = "0x600870")]
			internal Color <DOFade>b__0()
			{
				return default(Color);
			}

			[Token(Token = "0x60023D8")]
			[Address(RVA = "0x6008A4", Offset = "0x6008A4", VA = "0x6008A4")]
			internal void <DOFade>b__1(Color x)
			{
			}
		}

		[Token(Token = "0x200070A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EC984", Offset = "0x2EC984")]
		private sealed class <>c__DisplayClass3_0
		{
			[Token(Token = "0x4002046")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Color to;

			[Token(Token = "0x4002047")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public SpriteRenderer target;

			[Token(Token = "0x60023D9")]
			[Address(RVA = "0x6007DC", Offset = "0x6007DC", VA = "0x6007DC")]
			public <>c__DisplayClass3_0()
			{
			}

			[Token(Token = "0x60023DA")]
			[Address(RVA = "0x6008FC", Offset = "0x6008FC", VA = "0x6008FC")]
			internal Color <DOBlendableColor>b__0()
			{
				return default(Color);
			}

			[Token(Token = "0x60023DB")]
			[Address(RVA = "0x60090C", Offset = "0x60090C", VA = "0x60090C")]
			internal void <DOBlendableColor>b__1(Color x)
			{
			}
		}

		[Token(Token = "0x60017A9")]
		[Address(RVA = "0x5FFFFC", Offset = "0x5FFFFC", VA = "0x5FFFFC")]
		public static Tweener DOColor(this SpriteRenderer target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x60017AA")]
		[Address(RVA = "0x6001A4", Offset = "0x6001A4", VA = "0x6001A4")]
		public static Tweener DOFade(this SpriteRenderer target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x60017AB")]
		[Address(RVA = "0x600324", Offset = "0x600324", VA = "0x600324")]
		public static Sequence DOGradientColor(this SpriteRenderer target, Gradient gradient, float duration)
		{
			return null;
		}

		[Token(Token = "0x60017AC")]
		[Address(RVA = "0x600564", Offset = "0x600564", VA = "0x600564")]
		public static Tweener DOBlendableColor(this SpriteRenderer target, Color endValue, float duration)
		{
			return null;
		}
	}
	[Token(Token = "0x2000389")]
	public static class DOTweenModuleUI
	{
		[Token(Token = "0x200070B")]
		public static class Utils
		{
			[Token(Token = "0x60023DC")]
			[Address(RVA = "0x606E70", Offset = "0x606E70", VA = "0x606E70")]
			public static Vector2 SwitchToRectTransform(RectTransform from, RectTransform to)
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x200070C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EC994", Offset = "0x2EC994")]
		private sealed class <>c__DisplayClass0_0
		{
			[Token(Token = "0x4002048")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public CanvasGroup target;

			[Token(Token = "0x60023DD")]
			[Address(RVA = "0x600B84", Offset = "0x600B84", VA = "0x600B84")]
			public <>c__DisplayClass0_0()
			{
			}

			[Token(Token = "0x60023DE")]
			[Address(RVA = "0x60532C", Offset = "0x60532C", VA = "0x60532C")]
			internal float <DOFade>b__0()
			{
				return default(float);
			}

			[Token(Token = "0x60023DF")]
			[Address(RVA = "0x605358", Offset = "0x605358", VA = "0x605358")]
			internal void <DOFade>b__1(float x)
			{
			}
		}

		[Token(Token = "0x200070D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EC9A4", Offset = "0x2EC9A4")]
		private sealed class <>c__DisplayClass1_0
		{
			[Token(Token = "0x4002049")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Graphic target;

			[Token(Token = "0x60023E0")]
			[Address(RVA = "0x600D2C", Offset = "0x600D2C", VA = "0x600D2C")]
			public <>c__DisplayClass1_0()
			{
			}

			[Token(Token = "0x60023E1")]
			[Address(RVA = "0x605868", Offset = "0x605868", VA = "0x605868")]
			internal Color <DOColor>b__0()
			{
				return default(Color);
			}

			[Token(Token = "0x60023E2")]
			[Address(RVA = "0x6058A4", Offset = "0x6058A4", VA = "0x6058A4")]
			internal void <DOColor>b__1(Color x)
			{
			}
		}

		[Token(Token = "0x200070E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EC9B4", Offset = "0x2EC9B4")]
		private sealed class <>c__DisplayClass2_0
		{
			[Token(Token = "0x400204A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Graphic target;

			[Token(Token = "0x60023E3")]
			[Address(RVA = "0x600EAC", Offset = "0x600EAC", VA = "0x600EAC")]
			public <>c__DisplayClass2_0()
			{
			}

			[Token(Token = "0x60023E4")]
			[Address(RVA = "0x60624C", Offset = "0x60624C", VA = "0x60624C")]
			internal Color <DOFade>b__0()
			{
				return default(Color);
			}

			[Token(Token = "0x60023E5")]
			[Address(RVA = "0x606288", Offset = "0x606288", VA = "0x606288")]
			internal void <DOFade>b__1(Color x)
			{
			}
		}

		[Token(Token = "0x200070F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EC9C4", Offset = "0x2EC9C4")]
		private sealed class <>c__DisplayClass3_0
		{
			[Token(Token = "0x400204B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Image target;

			[Token(Token = "0x60023E6")]
			[Address(RVA = "0x601054", Offset = "0x601054", VA = "0x601054")]
			public <>c__DisplayClass3_0()
			{
			}

			[Token(Token = "0x60023E7")]
			[Address(RVA = "0x6069F8", Offset = "0x6069F8", VA = "0x6069F8")]
			internal Color <DOColor>b__0()
			{
				return default(Color);
			}

			[Token(Token = "0x60023E8")]
			[Address(RVA = "0x606A34", Offset = "0x606A34", VA = "0x606A34")]
			internal void <DOColor>b__1(Color x)
			{
			}
		}

		[Token(Token = "0x2000710")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EC9D4", Offset = "0x2EC9D4")]
		private sealed class <>c__DisplayClass4_0
		{
			[Token(Token = "0x400204C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Image target;

			[Token(Token = "0x60023E9")]
			[Address(RVA = "0x6011D4", Offset = "0x6011D4", VA = "0x6011D4")]
			public <>c__DisplayClass4_0()
			{
			}

			[Token(Token = "0x60023EA")]
			[Address(RVA = "0x606A94", Offset = "0x606A94", VA = "0x606A94")]
			internal Color <DOFade>b__0()
			{
				return default(Color);
			}

			[Token(Token = "0x60023EB")]
			[Address(RVA = "0x606AD0", Offset = "0x606AD0", VA = "0x606AD0")]
			internal void <DOFade>b__1(Color x)
			{
			}
		}

		[Token(Token = "0x2000711")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EC9E4", Offset = "0x2EC9E4")]
		private sealed class <>c__DisplayClass5_0
		{
			[Token(Token = "0x400204D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Image target;

			[Token(Token = "0x60023EC")]
			[Address(RVA = "0x601384", Offset = "0x601384", VA = "0x601384")]
			public <>c__DisplayClass5_0()
			{
			}

			[Token(Token = "0x60023ED")]
			[Address(RVA = "0x606B30", Offset = "0x606B30", VA = "0x606B30")]
			internal float <DOFillAmount>b__0()
			{
				return default(float);
			}

			[Token(Token = "0x60023EE")]
			[Address(RVA = "0x606B54", Offset = "0x606B54", VA = "0x606B54")]
			internal void <DOFillAmount>b__1(float x)
			{
			}
		}

		[Token(Token = "0x2000712")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2EC9F4", Offset = "0x2EC9F4")]
		private sealed class <>c__DisplayClass7_0
		{
			[Token(Token = "0x400204E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public LayoutElement target;

			[Token(Token = "0x60023EF")]
			[Address(RVA = "0x601790", Offset = "0x601790", VA = "0x601790")]
			public <>c__DisplayClass7_0()
			{
			}

			[Token(Token = "0x60023F0")]
			[Address(RVA = "0x606B88", Offset = "0x606B88", VA = "0x606B88")]
			internal Vector2 <DOFlexibleSize>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x60023F1")]
			[Address(RVA = "0x606C10", Offset = "0x606C10", VA = "0x606C10")]
			internal void <DOFlexibleSize>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x2000713")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ECA04", Offset = "0x2ECA04")]
		private sealed class <>c__DisplayClass8_0
		{
			[Token(Token = "0x400204F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public LayoutElement target;

			[Token(Token = "0x60023F2")]
			[Address(RVA = "0x601934", Offset = "0x601934", VA = "0x601934")]
			public <>c__DisplayClass8_0()
			{
			}

			[Token(Token = "0x60023F3")]
			[Address(RVA = "0x606C80", Offset = "0x606C80", VA = "0x606C80")]
			internal Vector2 <DOMinSize>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x60023F4")]
			[Address(RVA = "0x606D08", Offset = "0x606D08", VA = "0x606D08")]
			internal void <DOMinSize>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x2000714")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ECA14", Offset = "0x2ECA14")]
		private sealed class <>c__DisplayClass9_0
		{
			[Token(Token = "0x4002050")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public LayoutElement target;

			[Token(Token = "0x60023F5")]
			[Address(RVA = "0x601AD8", Offset = "0x601AD8", VA = "0x601AD8")]
			public <>c__DisplayClass9_0()
			{
			}

			[Token(Token = "0x60023F6")]
			[Address(RVA = "0x606D78", Offset = "0x606D78", VA = "0x606D78")]
			internal Vector2 <DOPreferredSize>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x60023F7")]
			[Address(RVA = "0x606E00", Offset = "0x606E00", VA = "0x606E00")]
			internal void <DOPreferredSize>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x2000715")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ECA24", Offset = "0x2ECA24")]
		private sealed class <>c__DisplayClass10_0
		{
			[Token(Token = "0x4002051")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Outline target;

			[Token(Token = "0x60023F8")]
			[Address(RVA = "0x601C80", Offset = "0x601C80", VA = "0x601C80")]
			public <>c__DisplayClass10_0()
			{
			}

			[Token(Token = "0x60023F9")]
			[Address(RVA = "0x60538C", Offset = "0x60538C", VA = "0x60538C")]
			internal Color <DOColor>b__0()
			{
				return default(Color);
			}

			[Token(Token = "0x60023FA")]
			[Address(RVA = "0x6053BC", Offset = "0x6053BC", VA = "0x6053BC")]
			internal void <DOColor>b__1(Color x)
			{
			}
		}

		[Token(Token = "0x2000716")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ECA34", Offset = "0x2ECA34")]
		private sealed class <>c__DisplayClass11_0
		{
			[Token(Token = "0x4002052")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Outline target;

			[Token(Token = "0x60023FB")]
			[Address(RVA = "0x601E00", Offset = "0x601E00", VA = "0x601E00")]
			public <>c__DisplayClass11_0()
			{
			}

			[Token(Token = "0x60023FC")]
			[Address(RVA = "0x605414", Offset = "0x605414", VA = "0x605414")]
			internal Color <DOFade>b__0()
			{
				return default(Color);
			}

			[Token(Token = "0x60023FD")]
			[Address(RVA = "0x605444", Offset = "0x605444", VA = "0x605444")]
			internal void <DOFade>b__1(Color x)
			{
			}
		}

		[Token(Token = "0x2000717")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ECA44", Offset = "0x2ECA44")]
		private sealed class <>c__DisplayClass12_0
		{
			[Token(Token = "0x4002053")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Outline target;

			[Token(Token = "0x60023FE")]
			[Address(RVA = "0x601F94", Offset = "0x601F94", VA = "0x601F94")]
			public <>c__DisplayClass12_0()
			{
			}

			[Token(Token = "0x60023FF")]
			[Address(RVA = "0x60549C", Offset = "0x60549C", VA = "0x60549C")]
			internal Vector2 <DOScale>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x6002400")]
			[Address(RVA = "0x6054CC", Offset = "0x6054CC", VA = "0x6054CC")]
			internal void <DOScale>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x2000718")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ECA54", Offset = "0x2ECA54")]
		private sealed class <>c__DisplayClass13_0
		{
			[Token(Token = "0x4002054")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public RectTransform target;

			[Token(Token = "0x6002401")]
			[Address(RVA = "0x602138", Offset = "0x602138", VA = "0x602138")]
			public <>c__DisplayClass13_0()
			{
			}

			[Token(Token = "0x6002402")]
			[Address(RVA = "0x605508", Offset = "0x605508", VA = "0x605508")]
			internal Vector2 <DOAnchorPos>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x6002403")]
			[Address(RVA = "0x60553C", Offset = "0x60553C", VA = "0x60553C")]
			internal void <DOAnchorPos>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x2000719")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ECA64", Offset = "0x2ECA64")]
		private sealed class <>c__DisplayClass14_0
		{
			[Token(Token = "0x4002055")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public RectTransform target;

			[Token(Token = "0x6002404")]
			[Address(RVA = "0x6022FC", Offset = "0x6022FC", VA = "0x6022FC")]
			public <>c__DisplayClass14_0()
			{
			}

			[Token(Token = "0x6002405")]
			[Address(RVA = "0x605578", Offset = "0x605578", VA = "0x605578")]
			internal Vector2 <DOAnchorPosX>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x6002406")]
			[Address(RVA = "0x6055AC", Offset = "0x6055AC", VA = "0x6055AC")]
			internal void <DOAnchorPosX>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x200071A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ECA74", Offset = "0x2ECA74")]
		private sealed class <>c__DisplayClass15_0
		{
			[Token(Token = "0x4002056")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public RectTransform target;

			[Token(Token = "0x6002407")]
			[Address(RVA = "0x6024C0", Offset = "0x6024C0", VA = "0x6024C0")]
			public <>c__DisplayClass15_0()
			{
			}

			[Token(Token = "0x6002408")]
			[Address(RVA = "0x6055E8", Offset = "0x6055E8", VA = "0x6055E8")]
			internal Vector2 <DOAnchorPosY>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x6002409")]
			[Address(RVA = "0x60561C", Offset = "0x60561C", VA = "0x60561C")]
			internal void <DOAnchorPosY>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x200071B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ECA84", Offset = "0x2ECA84")]
		private sealed class <>c__DisplayClass16_0
		{
			[Token(Token = "0x4002057")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public RectTransform target;

			[Token(Token = "0x600240A")]
			[Address(RVA = "0x602670", Offset = "0x602670", VA = "0x602670")]
			public <>c__DisplayClass16_0()
			{
			}

			[Token(Token = "0x600240B")]
			[Address(RVA = "0x605658", Offset = "0x605658", VA = "0x605658")]
			internal Vector3 <DOAnchorPos3D>b__0()
			{
				return default(Vector3);
			}

			[Token(Token = "0x600240C")]
			[Address(RVA = "0x60568C", Offset = "0x60568C", VA = "0x60568C")]
			internal void <DOAnchorPos3D>b__1(Vector3 x)
			{
			}
		}

		[Token(Token = "0x200071C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ECA94", Offset = "0x2ECA94")]
		private sealed class <>c__DisplayClass17_0
		{
			[Token(Token = "0x4002058")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public RectTransform target;

			[Token(Token = "0x600240D")]
			[Address(RVA = "0x602844", Offset = "0x602844", VA = "0x602844")]
			public <>c__DisplayClass17_0()
			{
			}

			[Token(Token = "0x600240E")]
			[Address(RVA = "0x6056DC", Offset = "0x6056DC", VA = "0x6056DC")]
			internal Vector3 <DOAnchorPos3DX>b__0()
			{
				return default(Vector3);
			}

			[Token(Token = "0x600240F")]
			[Address(RVA = "0x605710", Offset = "0x605710", VA = "0x605710")]
			internal void <DOAnchorPos3DX>b__1(Vector3 x)
			{
			}
		}

		[Token(Token = "0x200071D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ECAA4", Offset = "0x2ECAA4")]
		private sealed class <>c__DisplayClass18_0
		{
			[Token(Token = "0x4002059")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public RectTransform target;

			[Token(Token = "0x6002410")]
			[Address(RVA = "0x602A18", Offset = "0x602A18", VA = "0x602A18")]
			public <>c__DisplayClass18_0()
			{
			}

			[Token(Token = "0x6002411")]
			[Address(RVA = "0x605760", Offset = "0x605760", VA = "0x605760")]
			internal Vector3 <DOAnchorPos3DY>b__0()
			{
				return default(Vector3);
			}

			[Token(Token = "0x6002412")]
			[Address(RVA = "0x605794", Offset = "0x605794", VA = "0x605794")]
			internal void <DOAnchorPos3DY>b__1(Vector3 x)
			{
			}
		}

		[Token(Token = "0x200071E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ECAB4", Offset = "0x2ECAB4")]
		private sealed class <>c__DisplayClass19_0
		{
			[Token(Token = "0x400205A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public RectTransform target;

			[Token(Token = "0x6002413")]
			[Address(RVA = "0x602BEC", Offset = "0x602BEC", VA = "0x602BEC")]
			public <>c__DisplayClass19_0()
			{
			}

			[Token(Token = "0x6002414")]
			[Address(RVA = "0x6057E4", Offset = "0x6057E4", VA = "0x6057E4")]
			internal Vector3 <DOAnchorPos3DZ>b__0()
			{
				return default(Vector3);
			}

			[Token(Token = "0x6002415")]
			[Address(RVA = "0x605818", Offset = "0x605818", VA = "0x605818")]
			internal void <DOAnchorPos3DZ>b__1(Vector3 x)
			{
			}
		}

		[Token(Token = "0x200071F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ECAC4", Offset = "0x2ECAC4")]
		private sealed class <>c__DisplayClass20_0
		{
			[Token(Token = "0x400205B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public RectTransform target;

			[Token(Token = "0x6002416")]
			[Address(RVA = "0x602D90", Offset = "0x602D90", VA = "0x602D90")]
			public <>c__DisplayClass20_0()
			{
			}

			[Token(Token = "0x6002417")]
			[Address(RVA = "0x605904", Offset = "0x605904", VA = "0x605904")]
			internal Vector2 <DOAnchorMax>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x6002418")]
			[Address(RVA = "0x605938", Offset = "0x605938", VA = "0x605938")]
			internal void <DOAnchorMax>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x2000720")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ECAD4", Offset = "0x2ECAD4")]
		private sealed class <>c__DisplayClass21_0
		{
			[Token(Token = "0x400205C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public RectTransform target;

			[Token(Token = "0x6002419")]
			[Address(RVA = "0x602F34", Offset = "0x602F34", VA = "0x602F34")]
			public <>c__DisplayClass21_0()
			{
			}

			[Token(Token = "0x600241A")]
			[Address(RVA = "0x605974", Offset = "0x605974", VA = "0x605974")]
			internal Vector2 <DOAnchorMin>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x600241B")]
			[Address(RVA = "0x6059A8", Offset = "0x6059A8", VA = "0x6059A8")]
			internal void <DOAnchorMin>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x2000721")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ECAE4", Offset = "0x2ECAE4")]
		private sealed class <>c__DisplayClass22_0
		{
			[Token(Token = "0x400205D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public RectTransform target;

			[Token(Token = "0x600241C")]
			[Address(RVA = "0x6030C8", Offset = "0x6030C8", VA = "0x6030C8")]
			public <>c__DisplayClass22_0()
			{
			}

			[Token(Token = "0x600241D")]
			[Address(RVA = "0x6059E4", Offset = "0x6059E4", VA = "0x6059E4")]
			internal Vector2 <DOPivot>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x600241E")]
			[Address(RVA = "0x605A18", Offset = "0x605A18", VA = "0x605A18")]
			internal void <DOPivot>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x2000722")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ECAF4", Offset = "0x2ECAF4")]
		private sealed class <>c__DisplayClass23_0
		{
			[Token(Token = "0x400205E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public RectTransform target;

			[Token(Token = "0x600241F")]
			[Address(RVA = "0x603288", Offset = "0x603288", VA = "0x603288")]
			public <>c__DisplayClass23_0()
			{
			}

			[Token(Token = "0x6002420")]
			[Address(RVA = "0x605A54", Offset = "0x605A54", VA = "0x605A54")]
			internal Vector2 <DOPivotX>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x6002421")]
			[Address(RVA = "0x605A88", Offset = "0x605A88", VA = "0x605A88")]
			internal void <DOPivotX>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x2000723")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ECB04", Offset = "0x2ECB04")]
		private sealed class <>c__DisplayClass24_0
		{
			[Token(Token = "0x400205F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public RectTransform target;

			[Token(Token = "0x6002422")]
			[Address(RVA = "0x603448", Offset = "0x603448", VA = "0x603448")]
			public <>c__DisplayClass24_0()
			{
			}

			[Token(Token = "0x6002423")]
			[Address(RVA = "0x605AC4", Offset = "0x605AC4", VA = "0x605AC4")]
			internal Vector2 <DOPivotY>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x6002424")]
			[Address(RVA = "0x605AF8", Offset = "0x605AF8", VA = "0x605AF8")]
			internal void <DOPivotY>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x2000724")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ECB14", Offset = "0x2ECB14")]
		private sealed class <>c__DisplayClass25_0
		{
			[Token(Token = "0x4002060")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public RectTransform target;

			[Token(Token = "0x6002425")]
			[Address(RVA = "0x6035EC", Offset = "0x6035EC", VA = "0x6035EC")]
			public <>c__DisplayClass25_0()
			{
			}

			[Token(Token = "0x6002426")]
			[Address(RVA = "0x605B34", Offset = "0x605B34", VA = "0x605B34")]
			internal Vector2 <DOSizeDelta>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x6002427")]
			[Address(RVA = "0x605B68", Offset = "0x605B68", VA = "0x605B68")]
			internal void <DOSizeDelta>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x2000725")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ECB24", Offset = "0x2ECB24")]
		private sealed class <>c__DisplayClass26_0
		{
			[Token(Token = "0x4002061")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public RectTransform target;

			[Token(Token = "0x6002428")]
			[Address(RVA = "0x6037EC", Offset = "0x6037EC", VA = "0x6037EC")]
			public <>c__DisplayClass26_0()
			{
			}

			[Token(Token = "0x6002429")]
			[Address(RVA = "0x605BA4", Offset = "0x605BA4", VA = "0x605BA4")]
			internal Vector3 <DOPunchAnchorPos>b__0()
			{
				return default(Vector3);
			}

			[Token(Token = "0x600242A")]
			[Address(RVA = "0x605C5C", Offset = "0x605C5C", VA = "0x605C5C")]
			internal void <DOPunchAnchorPos>b__1(Vector3 x)
			{
			}
		}

		[Token(Token = "0x2000726")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ECB34", Offset = "0x2ECB34")]
		private sealed class <>c__DisplayClass27_0
		{
			[Token(Token = "0x4002062")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public RectTransform target;

			[Token(Token = "0x600242B")]
			[Address(RVA = "0x6039C8", Offset = "0x6039C8", VA = "0x6039C8")]
			public <>c__DisplayClass27_0()
			{
			}

			[Token(Token = "0x600242C")]
			[Address(RVA = "0x605D2C", Offset = "0x605D2C", VA = "0x605D2C")]
			internal Vector3 <DOShakeAnchorPos>b__0()
			{
				return default(Vector3);
			}

			[Token(Token = "0x600242D")]
			[Address(RVA = "0x605DE4", Offset = "0x605DE4", VA = "0x605DE4")]
			internal void <DOShakeAnchorPos>b__1(Vector3 x)
			{
			}
		}

		[Token(Token = "0x2000727")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ECB44", Offset = "0x2ECB44")]
		private sealed class <>c__DisplayClass28_0
		{
			[Token(Token = "0x4002063")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public RectTransform target;

			[Token(Token = "0x600242E")]
			[Address(RVA = "0x603BE0", Offset = "0x603BE0", VA = "0x603BE0")]
			public <>c__DisplayClass28_0()
			{
			}

			[Token(Token = "0x600242F")]
			[Address(RVA = "0x605EB4", Offset = "0x605EB4", VA = "0x605EB4")]
			internal Vector3 <DOShakeAnchorPos>b__0()
			{
				return default(Vector3);
			}

			[Token(Token = "0x6002430")]
			[Address(RVA = "0x605F6C", Offset = "0x605F6C", VA = "0x605F6C")]
			internal void <DOShakeAnchorPos>b__1(Vector3 x)
			{
			}
		}

		[Token(Token = "0x2000728")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ECB54", Offset = "0x2ECB54")]
		private sealed class <>c__DisplayClass29_0
		{
			[Token(Token = "0x4002064")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public RectTransform target;

			[Token(Token = "0x4002065")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public float startPosY;

			[Token(Token = "0x4002066")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool offsetYSet;

			[Token(Token = "0x4002067")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float offsetY;

			[Token(Token = "0x4002068")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Sequence s;

			[Token(Token = "0x4002069")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector2 endValue;

			[Token(Token = "0x6002431")]
			[Address(RVA = "0x60406C", Offset = "0x60406C", VA = "0x60406C")]
			public <>c__DisplayClass29_0()
			{
			}

			[Token(Token = "0x6002432")]
			[Address(RVA = "0x60603C", Offset = "0x60603C", VA = "0x60603C")]
			internal Vector2 <DOJumpAnchorPos>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x6002433")]
			[Address(RVA = "0x606070", Offset = "0x606070", VA = "0x606070")]
			internal void <DOJumpAnchorPos>b__1(Vector2 x)
			{
			}

			[Token(Token = "0x6002434")]
			[Address(RVA = "0x6060AC", Offset = "0x6060AC", VA = "0x6060AC")]
			internal void <DOJumpAnchorPos>b__2()
			{
			}

			[Token(Token = "0x6002435")]
			[Address(RVA = "0x6060F0", Offset = "0x6060F0", VA = "0x6060F0")]
			internal Vector2 <DOJumpAnchorPos>b__3()
			{
				return default(Vector2);
			}

			[Token(Token = "0x6002436")]
			[Address(RVA = "0x606124", Offset = "0x606124", VA = "0x606124")]
			internal void <DOJumpAnchorPos>b__4(Vector2 x)
			{
			}

			[Token(Token = "0x6002437")]
			[Address(RVA = "0x606160", Offset = "0x606160", VA = "0x606160")]
			internal void <DOJumpAnchorPos>b__5()
			{
			}
		}

		[Token(Token = "0x2000729")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ECB64", Offset = "0x2ECB64")]
		private sealed class <>c__DisplayClass30_0
		{
			[Token(Token = "0x400206A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public ScrollRect target;

			[Token(Token = "0x6002438")]
			[Address(RVA = "0x604210", Offset = "0x604210", VA = "0x604210")]
			public <>c__DisplayClass30_0()
			{
			}

			[Token(Token = "0x6002439")]
			[Address(RVA = "0x6062E8", Offset = "0x6062E8", VA = "0x6062E8")]
			internal Vector2 <DONormalizedPos>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x600243A")]
			[Address(RVA = "0x606360", Offset = "0x606360", VA = "0x606360")]
			internal void <DONormalizedPos>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x200072A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ECB74", Offset = "0x2ECB74")]
		private sealed class <>c__DisplayClass31_0
		{
			[Token(Token = "0x400206B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public ScrollRect target;

			[Token(Token = "0x600243B")]
			[Address(RVA = "0x6043A0", Offset = "0x6043A0", VA = "0x6043A0")]
			public <>c__DisplayClass31_0()
			{
			}

			[Token(Token = "0x600243C")]
			[Address(RVA = "0x6063C0", Offset = "0x6063C0", VA = "0x6063C0")]
			internal float <DOHorizontalNormalizedPos>b__0()
			{
				return default(float);
			}

			[Token(Token = "0x600243D")]
			[Address(RVA = "0x6063EC", Offset = "0x6063EC", VA = "0x6063EC")]
			internal void <DOHorizontalNormalizedPos>b__1(float x)
			{
			}
		}

		[Token(Token = "0x200072B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ECB84", Offset = "0x2ECB84")]
		private sealed class <>c__DisplayClass32_0
		{
			[Token(Token = "0x400206C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public ScrollRect target;

			[Token(Token = "0x600243E")]
			[Address(RVA = "0x604530", Offset = "0x604530", VA = "0x604530")]
			public <>c__DisplayClass32_0()
			{
			}

			[Token(Token = "0x600243F")]
			[Address(RVA = "0x606420", Offset = "0x606420", VA = "0x606420")]
			internal float <DOVerticalNormalizedPos>b__0()
			{
				return default(float);
			}

			[Token(Token = "0x6002440")]
			[Address(RVA = "0x60644C", Offset = "0x60644C", VA = "0x60644C")]
			internal void <DOVerticalNormalizedPos>b__1(float x)
			{
			}
		}

		[Token(Token = "0x200072C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ECB94", Offset = "0x2ECB94")]
		private sealed class <>c__DisplayClass33_0
		{
			[Token(Token = "0x400206D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Slider target;

			[Token(Token = "0x6002441")]
			[Address(RVA = "0x6046C0", Offset = "0x6046C0", VA = "0x6046C0")]
			public <>c__DisplayClass33_0()
			{
			}

			[Token(Token = "0x6002442")]
			[Address(RVA = "0x606480", Offset = "0x606480", VA = "0x606480")]
			internal float <DOValue>b__0()
			{
				return default(float);
			}

			[Token(Token = "0x6002443")]
			[Address(RVA = "0x6064B4", Offset = "0x6064B4", VA = "0x6064B4")]
			internal void <DOValue>b__1(float x)
			{
			}
		}

		[Token(Token = "0x200072D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ECBA4", Offset = "0x2ECBA4")]
		private sealed class <>c__DisplayClass34_0
		{
			[Token(Token = "0x400206E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Text target;

			[Token(Token = "0x6002444")]
			[Address(RVA = "0x604868", Offset = "0x604868", VA = "0x604868")]
			public <>c__DisplayClass34_0()
			{
			}

			[Token(Token = "0x6002445")]
			[Address(RVA = "0x6064F0", Offset = "0x6064F0", VA = "0x6064F0")]
			internal Color <DOColor>b__0()
			{
				return default(Color);
			}

			[Token(Token = "0x6002446")]
			[Address(RVA = "0x60652C", Offset = "0x60652C", VA = "0x60652C")]
			internal void <DOColor>b__1(Color x)
			{
			}
		}

		[Token(Token = "0x200072E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ECBB4", Offset = "0x2ECBB4")]
		private sealed class <>c__DisplayClass35_0
		{
			[Token(Token = "0x400206F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Text target;

			[Token(Token = "0x6002447")]
			[Address(RVA = "0x6049E8", Offset = "0x6049E8", VA = "0x6049E8")]
			public <>c__DisplayClass35_0()
			{
			}

			[Token(Token = "0x6002448")]
			[Address(RVA = "0x60658C", Offset = "0x60658C", VA = "0x60658C")]
			internal Color <DOFade>b__0()
			{
				return default(Color);
			}

			[Token(Token = "0x6002449")]
			[Address(RVA = "0x6065C8", Offset = "0x6065C8", VA = "0x6065C8")]
			internal void <DOFade>b__1(Color x)
			{
			}
		}

		[Token(Token = "0x200072F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ECBC4", Offset = "0x2ECBC4")]
		private sealed class <>c__DisplayClass36_0
		{
			[Token(Token = "0x4002070")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Text target;

			[Token(Token = "0x600244A")]
			[Address(RVA = "0x604B8C", Offset = "0x604B8C", VA = "0x604B8C")]
			public <>c__DisplayClass36_0()
			{
			}

			[Token(Token = "0x600244B")]
			[Address(RVA = "0x606628", Offset = "0x606628", VA = "0x606628")]
			internal string <DOText>b__0()
			{
				return null;
			}

			[Token(Token = "0x600244C")]
			[Address(RVA = "0x60665C", Offset = "0x60665C", VA = "0x60665C")]
			internal void <DOText>b__1(string x)
			{
			}
		}

		[Token(Token = "0x2000730")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ECBD4", Offset = "0x2ECBD4")]
		private sealed class <>c__DisplayClass37_0
		{
			[Token(Token = "0x4002071")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Color to;

			[Token(Token = "0x4002072")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Graphic target;

			[Token(Token = "0x600244D")]
			[Address(RVA = "0x604E14", Offset = "0x604E14", VA = "0x604E14")]
			public <>c__DisplayClass37_0()
			{
			}

			[Token(Token = "0x600244E")]
			[Address(RVA = "0x606698", Offset = "0x606698", VA = "0x606698")]
			internal Color <DOBlendableColor>b__0()
			{
				return default(Color);
			}

			[Token(Token = "0x600244F")]
			[Address(RVA = "0x6066A8", Offset = "0x6066A8", VA = "0x6066A8")]
			internal void <DOBlendableColor>b__1(Color x)
			{
			}
		}

		[Token(Token = "0x2000731")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ECBE4", Offset = "0x2ECBE4")]
		private sealed class <>c__DisplayClass38_0
		{
			[Token(Token = "0x4002073")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Color to;

			[Token(Token = "0x4002074")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Image target;

			[Token(Token = "0x6002450")]
			[Address(RVA = "0x60509C", Offset = "0x60509C", VA = "0x60509C")]
			public <>c__DisplayClass38_0()
			{
			}

			[Token(Token = "0x6002451")]
			[Address(RVA = "0x6067B8", Offset = "0x6067B8", VA = "0x6067B8")]
			internal Color <DOBlendableColor>b__0()
			{
				return default(Color);
			}

			[Token(Token = "0x6002452")]
			[Address(RVA = "0x6067C8", Offset = "0x6067C8", VA = "0x6067C8")]
			internal void <DOBlendableColor>b__1(Color x)
			{
			}
		}

		[Token(Token = "0x2000732")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ECBF4", Offset = "0x2ECBF4")]
		private sealed class <>c__DisplayClass39_0
		{
			[Token(Token = "0x4002075")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Color to;

			[Token(Token = "0x4002076")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Text target;

			[Token(Token = "0x6002453")]
			[Address(RVA = "0x605324", Offset = "0x605324", VA = "0x605324")]
			public <>c__DisplayClass39_0()
			{
			}

			[Token(Token = "0x6002454")]
			[Address(RVA = "0x6068D8", Offset = "0x6068D8", VA = "0x6068D8")]
			internal Color <DOBlendableColor>b__0()
			{
				return default(Color);
			}

			[Token(Token = "0x6002455")]
			[Address(RVA = "0x6068E8", Offset = "0x6068E8", VA = "0x6068E8")]
			internal void <DOBlendableColor>b__1(Color x)
			{
			}
		}

		[Token(Token = "0x60017AD")]
		[Address(RVA = "0x600A0C", Offset = "0x600A0C", VA = "0x600A0C")]
		public static Tweener DOFade(this CanvasGroup target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x60017AE")]
		[Address(RVA = "0x600B8C", Offset = "0x600B8C", VA = "0x600B8C")]
		public static Tweener DOColor(this Graphic target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x60017AF")]
		[Address(RVA = "0x600D34", Offset = "0x600D34", VA = "0x600D34")]
		public static Tweener DOFade(this Graphic target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x60017B0")]
		[Address(RVA = "0x600EB4", Offset = "0x600EB4", VA = "0x600EB4")]
		public static Tweener DOColor(this Image target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x60017B1")]
		[Address(RVA = "0x60105C", Offset = "0x60105C", VA = "0x60105C")]
		public static Tweener DOFade(this Image target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x60017B2")]
		[Address(RVA = "0x6011DC", Offset = "0x6011DC", VA = "0x6011DC")]
		public static Tweener DOFillAmount(this Image target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x60017B3")]
		[Address(RVA = "0x60138C", Offset = "0x60138C", VA = "0x60138C")]
		public static Sequence DOGradientColor(this Image target, Gradient gradient, float duration)
		{
			return null;
		}

		[Token(Token = "0x60017B4")]
		[Address(RVA = "0x6015F4", Offset = "0x6015F4", VA = "0x6015F4")]
		public static Tweener DOFlexibleSize(this LayoutElement target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60017B5")]
		[Address(RVA = "0x601798", Offset = "0x601798", VA = "0x601798")]
		public static Tweener DOMinSize(this LayoutElement target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60017B6")]
		[Address(RVA = "0x60193C", Offset = "0x60193C", VA = "0x60193C")]
		public static Tweener DOPreferredSize(this LayoutElement target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60017B7")]
		[Address(RVA = "0x601AE0", Offset = "0x601AE0", VA = "0x601AE0")]
		public static Tweener DOColor(this Outline target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x60017B8")]
		[Address(RVA = "0x601C88", Offset = "0x601C88", VA = "0x601C88")]
		public static Tweener DOFade(this Outline target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x60017B9")]
		[Address(RVA = "0x601E08", Offset = "0x601E08", VA = "0x601E08")]
		public static Tweener DOScale(this Outline target, Vector2 endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x60017BA")]
		[Address(RVA = "0x601F9C", Offset = "0x601F9C", VA = "0x601F9C")]
		public static Tweener DOAnchorPos(this RectTransform target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60017BB")]
		[Address(RVA = "0x602140", Offset = "0x602140", VA = "0x602140")]
		public static Tweener DOAnchorPosX(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60017BC")]
		[Address(RVA = "0x602304", Offset = "0x602304", VA = "0x602304")]
		public static Tweener DOAnchorPosY(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60017BD")]
		[Address(RVA = "0x6024C8", Offset = "0x6024C8", VA = "0x6024C8")]
		public static Tweener DOAnchorPos3D(this RectTransform target, Vector3 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60017BE")]
		[Address(RVA = "0x602678", Offset = "0x602678", VA = "0x602678")]
		public static Tweener DOAnchorPos3DX(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60017BF")]
		[Address(RVA = "0x60284C", Offset = "0x60284C", VA = "0x60284C")]
		public static Tweener DOAnchorPos3DY(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60017C0")]
		[Address(RVA = "0x602A20", Offset = "0x602A20", VA = "0x602A20")]
		public static Tweener DOAnchorPos3DZ(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60017C1")]
		[Address(RVA = "0x602BF4", Offset = "0x602BF4", VA = "0x602BF4")]
		public static Tweener DOAnchorMax(this RectTransform target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60017C2")]
		[Address(RVA = "0x602D98", Offset = "0x602D98", VA = "0x602D98")]
		public static Tweener DOAnchorMin(this RectTransform target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60017C3")]
		[Address(RVA = "0x602F3C", Offset = "0x602F3C", VA = "0x602F3C")]
		public static Tweener DOPivot(this RectTransform target, Vector2 endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x60017C4")]
		[Address(RVA = "0x6030D0", Offset = "0x6030D0", VA = "0x6030D0")]
		public static Tweener DOPivotX(this RectTransform target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x60017C5")]
		[Address(RVA = "0x603290", Offset = "0x603290", VA = "0x603290")]
		public static Tweener DOPivotY(this RectTransform target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x60017C6")]
		[Address(RVA = "0x603450", Offset = "0x603450", VA = "0x603450")]
		public static Tweener DOSizeDelta(this RectTransform target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60017C7")]
		[Address(RVA = "0x6035F4", Offset = "0x6035F4", VA = "0x6035F4")]
		public static Tweener DOPunchAnchorPos(this RectTransform target, Vector2 punch, float duration, int vibrato = 10, float elasticity = 1f, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60017C8")]
		[Address(RVA = "0x6037F4", Offset = "0x6037F4", VA = "0x6037F4")]
		public static Tweener DOShakeAnchorPos(this RectTransform target, float duration, float strength = 100f, int vibrato = 10, float randomness = 90f, bool snapping = false, bool fadeOut = true)
		{
			return null;
		}

		[Token(Token = "0x60017C9")]
		[Address(RVA = "0x6039D0", Offset = "0x6039D0", VA = "0x6039D0")]
		public static Tweener DOShakeAnchorPos(this RectTransform target, float duration, Vector2 strength, int vibrato = 10, float randomness = 90f, bool snapping = false, bool fadeOut = true)
		{
			return null;
		}

		[Token(Token = "0x60017CA")]
		[Address(RVA = "0x603BE8", Offset = "0x603BE8", VA = "0x603BE8")]
		public static Sequence DOJumpAnchorPos(this RectTransform target, Vector2 endValue, float jumpPower, int numJumps, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60017CB")]
		[Address(RVA = "0x604074", Offset = "0x604074", VA = "0x604074")]
		public static Tweener DONormalizedPos(this ScrollRect target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60017CC")]
		[Address(RVA = "0x604218", Offset = "0x604218", VA = "0x604218")]
		public static Tweener DOHorizontalNormalizedPos(this ScrollRect target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60017CD")]
		[Address(RVA = "0x6043A8", Offset = "0x6043A8", VA = "0x6043A8")]
		public static Tweener DOVerticalNormalizedPos(this ScrollRect target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60017CE")]
		[Address(RVA = "0x604538", Offset = "0x604538", VA = "0x604538")]
		public static Tweener DOValue(this Slider target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x60017CF")]
		[Address(RVA = "0x6046C8", Offset = "0x6046C8", VA = "0x6046C8")]
		public static Tweener DOColor(this Text target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x60017D0")]
		[Address(RVA = "0x604870", Offset = "0x604870", VA = "0x604870")]
		public static Tweener DOFade(this Text target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x60017D1")]
		[Address(RVA = "0x6049F0", Offset = "0x6049F0", VA = "0x6049F0")]
		public static Tweener DOText(this Text target, string endValue, float duration, bool richTextEnabled = true, ScrambleMode scrambleMode = ScrambleMode.None, [Optional] string scrambleChars)
		{
			return null;
		}

		[Token(Token = "0x60017D2")]
		[Address(RVA = "0x604B94", Offset = "0x604B94", VA = "0x604B94")]
		public static Tweener DOBlendableColor(this Graphic target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x60017D3")]
		[Address(RVA = "0x604E1C", Offset = "0x604E1C", VA = "0x604E1C")]
		public static Tweener DOBlendableColor(this Image target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x60017D4")]
		[Address(RVA = "0x6050A4", Offset = "0x6050A4", VA = "0x6050A4")]
		public static Tweener DOBlendableColor(this Text target, Color endValue, float duration)
		{
			return null;
		}
	}
	[Token(Token = "0x200038A")]
	public static class DOTweenModuleUnityVersion
	{
		[Token(Token = "0x60017D5")]
		[Address(RVA = "0x60727C", Offset = "0x60727C", VA = "0x60727C")]
		public static Sequence DOGradientColor(this Material target, Gradient gradient, float duration)
		{
			return null;
		}

		[Token(Token = "0x60017D6")]
		[Address(RVA = "0x6074C4", Offset = "0x6074C4", VA = "0x6074C4")]
		public static Sequence DOGradientColor(this Material target, Gradient gradient, string property, float duration)
		{
			return null;
		}

		[Token(Token = "0x60017D7")]
		[Address(RVA = "0x60771C", Offset = "0x60771C", VA = "0x60771C")]
		public static CustomYieldInstruction WaitForCompletion(this Tween t, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x60017D8")]
		[Address(RVA = "0x6077E0", Offset = "0x6077E0", VA = "0x6077E0")]
		public static CustomYieldInstruction WaitForRewind(this Tween t, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x60017D9")]
		[Address(RVA = "0x6078A4", Offset = "0x6078A4", VA = "0x6078A4")]
		public static CustomYieldInstruction WaitForKill(this Tween t, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x60017DA")]
		[Address(RVA = "0x607968", Offset = "0x607968", VA = "0x607968")]
		public static CustomYieldInstruction WaitForElapsedLoops(this Tween t, int elapsedLoops, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x60017DB")]
		[Address(RVA = "0x607A34", Offset = "0x607A34", VA = "0x607A34")]
		public static CustomYieldInstruction WaitForPosition(this Tween t, float position, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x60017DC")]
		[Address(RVA = "0x607B0C", Offset = "0x607B0C", VA = "0x607B0C")]
		public static CustomYieldInstruction WaitForStart(this Tween t, bool returnCustomYieldInstruction)
		{
			return null;
		}
	}
	[Token(Token = "0x200038B")]
	public static class DOTweenCYInstruction
	{
		[Token(Token = "0x2000733")]
		public class WaitForCompletion : CustomYieldInstruction
		{
			[Token(Token = "0x4002077")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private readonly Tween t;

			[Token(Token = "0x170003E9")]
			public override bool keepWaiting
			{
				[Token(Token = "0x6002456")]
				[Address(RVA = "0x5FBF88", Offset = "0x5FBF88", VA = "0x5FBF88", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6002457")]
			[Address(RVA = "0x5FBFD0", Offset = "0x5FBFD0", VA = "0x5FBFD0")]
			public WaitForCompletion(Tween tween)
			{
			}
		}

		[Token(Token = "0x2000734")]
		public class WaitForRewind : CustomYieldInstruction
		{
			[Token(Token = "0x4002078")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private readonly Tween t;

			[Token(Token = "0x170003EA")]
			public override bool keepWaiting
			{
				[Token(Token = "0x6002458")]
				[Address(RVA = "0x5FC16C", Offset = "0x5FC16C", VA = "0x5FC16C", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6002459")]
			[Address(RVA = "0x5FC220", Offset = "0x5FC220", VA = "0x5FC220")]
			public WaitForRewind(Tween tween)
			{
			}
		}

		[Token(Token = "0x2000735")]
		public class WaitForKill : CustomYieldInstruction
		{
			[Token(Token = "0x4002079")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private readonly Tween t;

			[Token(Token = "0x170003EB")]
			public override bool keepWaiting
			{
				[Token(Token = "0x600245A")]
				[Address(RVA = "0x5FC070", Offset = "0x5FC070", VA = "0x5FC070", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x600245B")]
			[Address(RVA = "0x5FC094", Offset = "0x5FC094", VA = "0x5FC094")]
			public WaitForKill(Tween tween)
			{
			}
		}

		[Token(Token = "0x2000736")]
		public class WaitForElapsedLoops : CustomYieldInstruction
		{
			[Token(Token = "0x400207A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private readonly Tween t;

			[Token(Token = "0x400207B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private readonly int elapsedLoops;

			[Token(Token = "0x170003EC")]
			public override bool keepWaiting
			{
				[Token(Token = "0x600245C")]
				[Address(RVA = "0x5FBFF0", Offset = "0x5FBFF0", VA = "0x5FBFF0", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x600245D")]
			[Address(RVA = "0x5FC048", Offset = "0x5FC048", VA = "0x5FC048")]
			public WaitForElapsedLoops(Tween tween, int elapsedLoops)
			{
			}
		}

		[Token(Token = "0x2000737")]
		public class WaitForPosition : CustomYieldInstruction
		{
			[Token(Token = "0x400207C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private readonly Tween t;

			[Token(Token = "0x400207D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private readonly float position;

			[Token(Token = "0x170003ED")]
			public override bool keepWaiting
			{
				[Token(Token = "0x600245E")]
				[Address(RVA = "0x5FC0B4", Offset = "0x5FC0B4", VA = "0x5FC0B4", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x600245F")]
			[Address(RVA = "0x5FC144", Offset = "0x5FC144", VA = "0x5FC144")]
			public WaitForPosition(Tween tween, float position)
			{
			}
		}

		[Token(Token = "0x2000738")]
		public class WaitForStart : CustomYieldInstruction
		{
			[Token(Token = "0x400207E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private readonly Tween t;

			[Token(Token = "0x170003EE")]
			public override bool keepWaiting
			{
				[Token(Token = "0x6002460")]
				[Address(RVA = "0x5FC240", Offset = "0x5FC240", VA = "0x5FC240", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6002461")]
			[Address(RVA = "0x5FC29C", Offset = "0x5FC29C", VA = "0x5FC29C")]
			public WaitForStart(Tween tween)
			{
			}
		}
	}
	[Token(Token = "0x200038C")]
	public static class DOTweenModuleUtils
	{
		[Token(Token = "0x2000739")]
		public static class Physics
		{
			[Token(Token = "0x6002462")]
			[Address(RVA = "0x607C90", Offset = "0x607C90", VA = "0x607C90")]
			public static void SetOrientationOnPath(PathOptions options, Tween t, Quaternion newRot, Transform trans)
			{
			}

			[Token(Token = "0x6002463")]
			[Address(RVA = "0x607E28", Offset = "0x607E28", VA = "0x607E28")]
			public static bool HasRigidbody2D(Component target)
			{
				return default(bool);
			}

			[Token(Token = "0x6002464")]
			[Address(RVA = "0x607EDC", Offset = "0x607EDC", VA = "0x607EDC")]
			public static bool HasRigidbody(Component target)
			{
				return default(bool);
			}

			[Token(Token = "0x6002465")]
			[Address(RVA = "0x607F90", Offset = "0x607F90", VA = "0x607F90")]
			public static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> CreateDOTweenPathTween(MonoBehaviour target, bool tweenRigidbody, bool isLocal, DG.Tweening.Plugins.Core.PathCore.Path path, float duration, PathMode pathMode)
			{
				return null;
			}
		}

		[Token(Token = "0x400175E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool _initialized;

		[Token(Token = "0x60017DD")]
		[Address(RVA = "0x607BD0", Offset = "0x607BD0", VA = "0x607BD0")]
		public static void Init()
		{
		}
	}
}
namespace Assets.OVR.Scripts
{
	[Token(Token = "0x200038D")]
	public class Record
	{
		[Token(Token = "0x400175F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string category;

		[Token(Token = "0x4001760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string message;

		[Token(Token = "0x60017DE")]
		[Address(RVA = "0x6187D4", Offset = "0x6187D4", VA = "0x6187D4")]
		public Record(string cat, string msg)
		{
		}
	}
	[Token(Token = "0x200038E")]
	public class RangedRecord : Record
	{
		[Token(Token = "0x4001761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float value;

		[Token(Token = "0x4001762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float min;

		[Token(Token = "0x4001763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float max;

		[Token(Token = "0x60017DF")]
		[Address(RVA = "0x6187FC", Offset = "0x6187FC", VA = "0x6187FC")]
		public RangedRecord(string cat, string msg, float val, float minVal, float maxVal)
		{
		}
	}
	[Token(Token = "0x200038F")]
	public delegate void FixMethodDelegate(UnityEngine.Object obj, bool isLastInSet, int selectedIndex);
	[Token(Token = "0x2000390")]
	public class FixRecord : Record
	{
		[Token(Token = "0x4001764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FixMethodDelegate fixMethod;

		[Token(Token = "0x4001765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public UnityEngine.Object targetObject;

		[Token(Token = "0x4001766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string[] buttonNames;

		[Token(Token = "0x4001767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool editModeRequired;

		[Token(Token = "0x4001768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool complete;

		[Token(Token = "0x60017E4")]
		[Address(RVA = "0x618788", Offset = "0x618788", VA = "0x618788")]
		public FixRecord(string cat, string msg, FixMethodDelegate fix, UnityEngine.Object target, bool editRequired, string[] buttons)
		{
		}
	}
}
namespace Assets.SimplifyProfilerRecord.Scripts
{
	[Token(Token = "0x2000391")]
	public class Record
	{
		[Token(Token = "0x4001769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string category;

		[Token(Token = "0x400176A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string message;

		[Token(Token = "0x60017E5")]
		[Address(RVA = "0x618D98", Offset = "0x618D98", VA = "0x618D98")]
		public Record(string cat, string msg)
		{
		}
	}
	[Token(Token = "0x2000392")]
	public class RangedRecord : Record
	{
		[Token(Token = "0x400176B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float value;

		[Token(Token = "0x400176C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float min;

		[Token(Token = "0x400176D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float max;

		[Token(Token = "0x60017E6")]
		[Address(RVA = "0x618DC0", Offset = "0x618DC0", VA = "0x618DC0")]
		public RangedRecord(string cat, string msg, float val, float minVal, float maxVal)
		{
		}
	}
	[Token(Token = "0x2000393")]
	public delegate void FixMethodDelegate(UnityEngine.Object obj, bool isLastInSet, int selectedIndex);
	[Token(Token = "0x2000394")]
	public class FixRecord : Record
	{
		[Token(Token = "0x400176E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FixMethodDelegate fixMethod;

		[Token(Token = "0x400176F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public UnityEngine.Object targetObject;

		[Token(Token = "0x4001770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string[] buttonNames;

		[Token(Token = "0x4001771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool editModeRequired;

		[Token(Token = "0x4001772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool complete;

		[Token(Token = "0x60017EB")]
		[Address(RVA = "0x618D4C", Offset = "0x618D4C", VA = "0x618D4C")]
		public FixRecord(string cat, string msg, FixMethodDelegate fix, UnityEngine.Object target, bool editRequired, string[] buttons)
		{
		}
	}
}
namespace kiupe
{
	[Token(Token = "0x2000395")]
	public class MessageBus
	{
		[Token(Token = "0x4001773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static IDictionary<Type, IAbstractDispatcher> subscribers;

		[Token(Token = "0x60017EC")]
		public static void Subscribe<T>(Action<T> callback) where T : Message
		{
		}

		[Token(Token = "0x60017ED")]
		public static void Send<T>(T param) where T : Message
		{
		}

		[Token(Token = "0x60017EE")]
		public static void UnSubscribe<T>(Action<T> callback) where T : Message
		{
		}

		[Token(Token = "0x60017EF")]
		[Address(RVA = "0x178DD68", Offset = "0x178DD68", VA = "0x178DD68")]
		public static void UnSubscribeAll()
		{
		}

		[Token(Token = "0x60017F0")]
		[Address(RVA = "0x178E184", Offset = "0x178E184", VA = "0x178E184")]
		public MessageBus()
		{
		}
	}
	[Token(Token = "0x2000396")]
	public abstract class Message
	{
		[Token(Token = "0x60017F2")]
		[Address(RVA = "0x178DD60", Offset = "0x178DD60", VA = "0x178DD60")]
		protected Message()
		{
		}
	}
	[Token(Token = "0x2000397")]
	public class GenericMessage<T> : Message
	{
		[Token(Token = "0x4001774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T value;

		[Token(Token = "0x60017F3")]
		public GenericMessage(T value)
		{
		}
	}
	[Token(Token = "0x2000398")]
	public interface IAbstractDispatcher
	{
		[Token(Token = "0x60017F4")]
		void RemoveAllListeners();
	}
	[Token(Token = "0x2000399")]
	public interface IMessageDispatcher<T> : IAbstractDispatcher
	{
		[Token(Token = "0x60017F5")]
		void Dispatch(T param);

		[Token(Token = "0x60017F6")]
		void AddListener(Action<T> callback);

		[Token(Token = "0x60017F7")]
		void RemoveListener(Action<T> callback);

		[Token(Token = "0x60017F8")]
		new void RemoveAllListeners();
	}
	[Token(Token = "0x200039A")]
	public class MessageDispatcher<T> : IMessageDispatcher<T>, IAbstractDispatcher
	{
		[Token(Token = "0x4001775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string type;

		[Token(Token = "0x4001776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Action<T> listeners;

		[Token(Token = "0x4001777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public List<Action<T>> listenerReferences;

		[Token(Token = "0x60017F9")]
		public void Dispatch(T param)
		{
		}

		[Token(Token = "0x60017FA")]
		public void AddListener(Action<T> callback)
		{
		}

		[Token(Token = "0x60017FB")]
		public void RemoveListener(Action<T> callback)
		{
		}

		[Token(Token = "0x60017FC")]
		public void RemoveAllListeners()
		{
		}

		[Token(Token = "0x60017FD")]
		public MessageDispatcher()
		{
		}
	}
}
namespace UnityEngine.PostProcessing
{
	[Token(Token = "0x200039B")]
	public sealed class GetSetAttribute : PropertyAttribute
	{
		[Token(Token = "0x4001778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string name;

		[Token(Token = "0x4001779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool dirty;

		[Token(Token = "0x60017FE")]
		[Address(RVA = "0x8E2BF8", Offset = "0x8E2BF8", VA = "0x8E2BF8")]
		public GetSetAttribute(string name)
		{
		}
	}
	[Token(Token = "0x200039C")]
	public sealed class MinAttribute : PropertyAttribute
	{
		[Token(Token = "0x400177A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly float min;

		[Token(Token = "0x60017FF")]
		[Address(RVA = "0x8E4080", Offset = "0x8E4080", VA = "0x8E4080")]
		public MinAttribute(float min)
		{
		}
	}
	[Token(Token = "0x200039D")]
	public sealed class TrackballAttribute : PropertyAttribute
	{
		[Token(Token = "0x400177B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string method;

		[Token(Token = "0x6001800")]
		[Address(RVA = "0x8EEDC4", Offset = "0x8EEDC4", VA = "0x8EEDC4")]
		public TrackballAttribute(string method)
		{
		}
	}
	[Token(Token = "0x200039E")]
	public sealed class TrackballGroupAttribute : PropertyAttribute
	{
		[Token(Token = "0x6001801")]
		[Address(RVA = "0x8EEDE4", Offset = "0x8EEDE4", VA = "0x8EEDE4")]
		public TrackballGroupAttribute()
		{
		}
	}
	[Token(Token = "0x200039F")]
	public sealed class AmbientOcclusionComponent : PostProcessingComponentCommandBuffer<AmbientOcclusionModel>
	{
		[Token(Token = "0x200073A")]
		private static class Uniforms
		{
			[Token(Token = "0x400207F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _Intensity;

			[Token(Token = "0x4002080")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _Radius;

			[Token(Token = "0x4002081")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly int _FogParams;

			[Token(Token = "0x4002082")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static readonly int _Downsample;

			[Token(Token = "0x4002083")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static readonly int _SampleCount;

			[Token(Token = "0x4002084")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal static readonly int _OcclusionTexture1;

			[Token(Token = "0x4002085")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal static readonly int _OcclusionTexture2;

			[Token(Token = "0x4002086")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal static readonly int _OcclusionTexture;

			[Token(Token = "0x4002087")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal static readonly int _MainTex;

			[Token(Token = "0x4002088")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal static readonly int _TempRT;
		}

		[Token(Token = "0x200073B")]
		private enum OcclusionSource
		{
			[Token(Token = "0x400208A")]
			DepthTexture,
			[Token(Token = "0x400208B")]
			DepthNormalsTexture,
			[Token(Token = "0x400208C")]
			GBuffer
		}

		[Token(Token = "0x400177C")]
		private const string k_BlitShaderString = "Hidden/Post FX/Blit";

		[Token(Token = "0x400177D")]
		private const string k_ShaderString = "Hidden/Post FX/Ambient Occlusion";

		[Token(Token = "0x400177E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly RenderTargetIdentifier[] m_MRT;

		[Token(Token = "0x17000321")]
		private OcclusionSource occlusionSource
		{
			[Token(Token = "0x6001802")]
			[Address(RVA = "0x5A7EC4", Offset = "0x5A7EC4", VA = "0x5A7EC4")]
			get
			{
				return default(OcclusionSource);
			}
		}

		[Token(Token = "0x17000322")]
		private bool ambientOnlySupported
		{
			[Token(Token = "0x6001803")]
			[Address(RVA = "0x5A7FD8", Offset = "0x5A7FD8", VA = "0x5A7FD8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000323")]
		public override bool active
		{
			[Token(Token = "0x6001804")]
			[Address(RVA = "0x5A80C4", Offset = "0x5A80C4", VA = "0x5A80C4", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001805")]
		[Address(RVA = "0x5A8180", Offset = "0x5A8180", VA = "0x5A8180", Slot = "4")]
		public override DepthTextureMode GetCameraFlags()
		{
			return default(DepthTextureMode);
		}

		[Token(Token = "0x6001806")]
		[Address(RVA = "0x5A81B4", Offset = "0x5A81B4", VA = "0x5A81B4", Slot = "11")]
		public override string GetName()
		{
			return null;
		}

		[Token(Token = "0x6001807")]
		[Address(RVA = "0x5A8210", Offset = "0x5A8210", VA = "0x5A8210", Slot = "10")]
		public override CameraEvent GetCameraEvent()
		{
			return default(CameraEvent);
		}

		[Token(Token = "0x6001808")]
		[Address(RVA = "0x5A828C", Offset = "0x5A828C", VA = "0x5A828C", Slot = "12")]
		public override void PopulateCommandBuffer(CommandBuffer cb)
		{
		}

		[Token(Token = "0x6001809")]
		[Address(RVA = "0x5A92CC", Offset = "0x5A92CC", VA = "0x5A92CC")]
		public AmbientOcclusionComponent()
		{
		}
	}
	[Token(Token = "0x20003A0")]
	public sealed class BloomComponent : PostProcessingComponentRenderTexture<BloomModel>
	{
		[Token(Token = "0x200073C")]
		private static class Uniforms
		{
			[Token(Token = "0x400208D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _AutoExposure;

			[Token(Token = "0x400208E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _Threshold;

			[Token(Token = "0x400208F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly int _Curve;

			[Token(Token = "0x4002090")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static readonly int _PrefilterOffs;

			[Token(Token = "0x4002091")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static readonly int _SampleScale;

			[Token(Token = "0x4002092")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal static readonly int _BaseTex;

			[Token(Token = "0x4002093")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal static readonly int _BloomTex;

			[Token(Token = "0x4002094")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal static readonly int _Bloom_Settings;

			[Token(Token = "0x4002095")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal static readonly int _Bloom_DirtTex;

			[Token(Token = "0x4002096")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal static readonly int _Bloom_DirtIntensity;
		}

		[Token(Token = "0x400177F")]
		private const int k_MaxPyramidBlurLevel = 16;

		[Token(Token = "0x4001780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly RenderTexture[] m_BlurBuffer1;

		[Token(Token = "0x4001781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private readonly RenderTexture[] m_BlurBuffer2;

		[Token(Token = "0x17000324")]
		public override bool active
		{
			[Token(Token = "0x600180A")]
			[Address(RVA = "0x8D70B8", Offset = "0x8D70B8", VA = "0x8D70B8", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600180B")]
		[Address(RVA = "0x8D7174", Offset = "0x8D7174", VA = "0x8D7174")]
		public void Prepare(RenderTexture source, Material uberMaterial, Texture autoExposure)
		{
		}

		[Token(Token = "0x600180C")]
		[Address(RVA = "0x8D8818", Offset = "0x8D8818", VA = "0x8D8818")]
		public BloomComponent()
		{
		}
	}
	[Token(Token = "0x20003A1")]
	public sealed class BuiltinDebugViewsComponent : PostProcessingComponentCommandBuffer<BuiltinDebugViewsModel>
	{
		[Token(Token = "0x200073D")]
		private static class Uniforms
		{
			[Token(Token = "0x4002097")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _DepthScale;

			[Token(Token = "0x4002098")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _TempRT;

			[Token(Token = "0x4002099")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly int _Opacity;

			[Token(Token = "0x400209A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static readonly int _MainTex;

			[Token(Token = "0x400209B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static readonly int _TempRT2;

			[Token(Token = "0x400209C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal static readonly int _Amplitude;

			[Token(Token = "0x400209D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal static readonly int _Scale;
		}

		[Token(Token = "0x200073E")]
		private enum Pass
		{
			[Token(Token = "0x400209F")]
			Depth,
			[Token(Token = "0x40020A0")]
			Normals,
			[Token(Token = "0x40020A1")]
			MovecOpacity,
			[Token(Token = "0x40020A2")]
			MovecImaging,
			[Token(Token = "0x40020A3")]
			MovecArrows
		}

		[Token(Token = "0x200073F")]
		private class ArrowArray
		{
			[Token(Token = "0x40020A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F6870", Offset = "0x2F6870")]
			private Mesh <mesh>k__BackingField;

			[Token(Token = "0x40020A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F6880", Offset = "0x2F6880")]
			private int <columnCount>k__BackingField;

			[Token(Token = "0x40020A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F6890", Offset = "0x2F6890")]
			private int <rowCount>k__BackingField;

			[Token(Token = "0x170003EF")]
			public Mesh mesh
			{
				[Token(Token = "0x6002469")]
				[Address(RVA = "0x8DA4D4", Offset = "0x8DA4D4", VA = "0x8DA4D4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FDD70", Offset = "0x2FDD70")]
				get
				{
					return null;
				}
				[Token(Token = "0x600246A")]
				[Address(RVA = "0x8DA4DC", Offset = "0x8DA4DC", VA = "0x8DA4DC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FDD80", Offset = "0x2FDD80")]
				private set
				{
				}
			}

			[Token(Token = "0x170003F0")]
			public int columnCount
			{
				[Token(Token = "0x600246B")]
				[Address(RVA = "0x8DA4E4", Offset = "0x8DA4E4", VA = "0x8DA4E4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FDD90", Offset = "0x2FDD90")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x600246C")]
				[Address(RVA = "0x8DA4EC", Offset = "0x8DA4EC", VA = "0x8DA4EC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FDDA0", Offset = "0x2FDDA0")]
				private set
				{
				}
			}

			[Token(Token = "0x170003F1")]
			public int rowCount
			{
				[Token(Token = "0x600246D")]
				[Address(RVA = "0x8DA4F4", Offset = "0x8DA4F4", VA = "0x8DA4F4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FDDB0", Offset = "0x2FDDB0")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x600246E")]
				[Address(RVA = "0x8DA4FC", Offset = "0x8DA4FC", VA = "0x8DA4FC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FDDC0", Offset = "0x2FDDC0")]
				private set
				{
				}
			}

			[Token(Token = "0x600246F")]
			[Address(RVA = "0x8D9E0C", Offset = "0x8D9E0C", VA = "0x8D9E0C")]
			public void BuildMesh(int columns, int rows)
			{
			}

			[Token(Token = "0x6002470")]
			[Address(RVA = "0x8D9DEC", Offset = "0x8D9DEC", VA = "0x8D9DEC")]
			public void Release()
			{
			}

			[Token(Token = "0x6002471")]
			[Address(RVA = "0x8D9DE4", Offset = "0x8D9DE4", VA = "0x8D9DE4")]
			public ArrowArray()
			{
			}
		}

		[Token(Token = "0x4001782")]
		private const string k_ShaderString = "Hidden/Post FX/Builtin Debug Views";

		[Token(Token = "0x4001783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ArrowArray m_Arrows;

		[Token(Token = "0x17000325")]
		public override bool active
		{
			[Token(Token = "0x600180D")]
			[Address(RVA = "0x8D8C48", Offset = "0x8D8C48", VA = "0x8D8C48", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600180E")]
		[Address(RVA = "0x8D8D14", Offset = "0x8D8D14", VA = "0x8D8D14", Slot = "4")]
		public override DepthTextureMode GetCameraFlags()
		{
			return default(DepthTextureMode);
		}

		[Token(Token = "0x600180F")]
		[Address(RVA = "0x8D8D98", Offset = "0x8D8D98", VA = "0x8D8D98", Slot = "10")]
		public override CameraEvent GetCameraEvent()
		{
			return default(CameraEvent);
		}

		[Token(Token = "0x6001810")]
		[Address(RVA = "0x8D8E08", Offset = "0x8D8E08", VA = "0x8D8E08", Slot = "11")]
		public override string GetName()
		{
			return null;
		}

		[Token(Token = "0x6001811")]
		[Address(RVA = "0x8D8E64", Offset = "0x8D8E64", VA = "0x8D8E64", Slot = "12")]
		public override void PopulateCommandBuffer(CommandBuffer cb)
		{
		}

		[Token(Token = "0x6001812")]
		[Address(RVA = "0x8D901C", Offset = "0x8D901C", VA = "0x8D901C")]
		private void DepthPass(CommandBuffer cb)
		{
		}

		[Token(Token = "0x6001813")]
		[Address(RVA = "0x8D91A0", Offset = "0x8D91A0", VA = "0x8D91A0")]
		private void DepthNormalsPass(CommandBuffer cb)
		{
		}

		[Token(Token = "0x6001814")]
		[Address(RVA = "0x8D9294", Offset = "0x8D9294", VA = "0x8D9294")]
		private void MotionVectorsPass(CommandBuffer cb)
		{
		}

		[Token(Token = "0x6001815")]
		[Address(RVA = "0x8D9CA4", Offset = "0x8D9CA4", VA = "0x8D9CA4")]
		private void PrepareArrows()
		{
		}

		[Token(Token = "0x6001816")]
		[Address(RVA = "0x8DA43C", Offset = "0x8DA43C", VA = "0x8DA43C", Slot = "7")]
		public override void OnDisable()
		{
		}

		[Token(Token = "0x6001817")]
		[Address(RVA = "0x8DA470", Offset = "0x8DA470", VA = "0x8DA470")]
		public BuiltinDebugViewsComponent()
		{
		}
	}
	[Token(Token = "0x20003A2")]
	public sealed class ChromaticAberrationComponent : PostProcessingComponentRenderTexture<ChromaticAberrationModel>
	{
		[Token(Token = "0x2000740")]
		private static class Uniforms
		{
			[Token(Token = "0x40020A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _ChromaticAberration_Amount;

			[Token(Token = "0x40020A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _ChromaticAberration_Spectrum;
		}

		[Token(Token = "0x4001784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Texture2D m_SpectrumLut;

		[Token(Token = "0x17000326")]
		public override bool active
		{
			[Token(Token = "0x6001818")]
			[Address(RVA = "0x8DA8A8", Offset = "0x8DA8A8", VA = "0x8DA8A8", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001819")]
		[Address(RVA = "0x8DA964", Offset = "0x8DA964", VA = "0x8DA964", Slot = "7")]
		public override void OnDisable()
		{
		}

		[Token(Token = "0x600181A")]
		[Address(RVA = "0x8DA984", Offset = "0x8DA984", VA = "0x8DA984", Slot = "10")]
		public override void Prepare(Material uberMaterial)
		{
		}

		[Token(Token = "0x600181B")]
		[Address(RVA = "0x8DADE8", Offset = "0x8DADE8", VA = "0x8DADE8")]
		public ChromaticAberrationComponent()
		{
		}
	}
	[Token(Token = "0x20003A3")]
	public sealed class ColorGradingComponent : PostProcessingComponentRenderTexture<ColorGradingModel>
	{
		[Token(Token = "0x2000741")]
		private static class Uniforms
		{
			[Token(Token = "0x40020A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _LutParams;

			[Token(Token = "0x40020AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _NeutralTonemapperParams1;

			[Token(Token = "0x40020AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly int _NeutralTonemapperParams2;

			[Token(Token = "0x40020AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static readonly int _HueShift;

			[Token(Token = "0x40020AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static readonly int _Saturation;

			[Token(Token = "0x40020AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal static readonly int _Contrast;

			[Token(Token = "0x40020AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal static readonly int _Balance;

			[Token(Token = "0x40020B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal static readonly int _Lift;

			[Token(Token = "0x40020B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal static readonly int _InvGamma;

			[Token(Token = "0x40020B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal static readonly int _Gain;

			[Token(Token = "0x40020B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal static readonly int _Slope;

			[Token(Token = "0x40020B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal static readonly int _Power;

			[Token(Token = "0x40020B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal static readonly int _Offset;

			[Token(Token = "0x40020B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			internal static readonly int _ChannelMixerRed;

			[Token(Token = "0x40020B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal static readonly int _ChannelMixerGreen;

			[Token(Token = "0x40020B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			internal static readonly int _ChannelMixerBlue;

			[Token(Token = "0x40020B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal static readonly int _Curves;

			[Token(Token = "0x40020BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			internal static readonly int _LogLut;

			[Token(Token = "0x40020BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal static readonly int _LogLut_Params;

			[Token(Token = "0x40020BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			internal static readonly int _ExposureEV;
		}

		[Token(Token = "0x4001785")]
		private const int k_InternalLogLutSize = 32;

		[Token(Token = "0x4001786")]
		private const int k_CurvePrecision = 128;

		[Token(Token = "0x4001787")]
		private const float k_CurveStep = 1f / 128f;

		[Token(Token = "0x4001788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Texture2D m_GradingCurves;

		[Token(Token = "0x4001789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Color[] m_pixels;

		[Token(Token = "0x17000327")]
		public override bool active
		{
			[Token(Token = "0x600181C")]
			[Address(RVA = "0x8DAF54", Offset = "0x8DAF54", VA = "0x8DAF54", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600181D")]
		[Address(RVA = "0x8DAFEC", Offset = "0x8DAFEC", VA = "0x8DAFEC")]
		private float StandardIlluminantY(float x)
		{
			return default(float);
		}

		[Token(Token = "0x600181E")]
		[Address(RVA = "0x8DB020", Offset = "0x8DB020", VA = "0x8DB020")]
		private Vector3 CIExyToLMS(float x, float y)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600181F")]
		[Address(RVA = "0x8DB0EC", Offset = "0x8DB0EC", VA = "0x8DB0EC")]
		private Vector3 CalculateColorBalance(float temperature, float tint)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001820")]
		[Address(RVA = "0x8DB214", Offset = "0x8DB214", VA = "0x8DB214")]
		private static Color NormalizeColor(Color c)
		{
			return default(Color);
		}

		[Token(Token = "0x6001821")]
		[Address(RVA = "0x8DB324", Offset = "0x8DB324", VA = "0x8DB324")]
		private static Vector3 ClampVector(Vector3 v, float min, float max)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001822")]
		[Address(RVA = "0x8DB43C", Offset = "0x8DB43C", VA = "0x8DB43C")]
		public static Vector3 GetLiftValue(Color lift)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001823")]
		[Address(RVA = "0x8DB4FC", Offset = "0x8DB4FC", VA = "0x8DB4FC")]
		public static Vector3 GetGammaValue(Color gamma)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001824")]
		[Address(RVA = "0x8DB6E0", Offset = "0x8DB6E0", VA = "0x8DB6E0")]
		public static Vector3 GetGainValue(Color gain)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001825")]
		[Address(RVA = "0x8DB860", Offset = "0x8DB860", VA = "0x8DB860")]
		public static void CalculateLiftGammaGain(Color lift, Color gamma, Color gain, out Vector3 outLift, out Vector3 outGamma, out Vector3 outGain)
		{
		}

		[Token(Token = "0x6001826")]
		[Address(RVA = "0x8DB8F4", Offset = "0x8DB8F4", VA = "0x8DB8F4")]
		public static Vector3 GetSlopeValue(Color slope)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001827")]
		[Address(RVA = "0x8DB9C4", Offset = "0x8DB9C4", VA = "0x8DB9C4")]
		public static Vector3 GetPowerValue(Color power)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001828")]
		[Address(RVA = "0x8DBB78", Offset = "0x8DBB78", VA = "0x8DBB78")]
		public static Vector3 GetOffsetValue(Color offset)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001829")]
		[Address(RVA = "0x8DBC44", Offset = "0x8DBC44", VA = "0x8DBC44")]
		public static void CalculateSlopePowerOffset(Color slope, Color power, Color offset, out Vector3 outSlope, out Vector3 outPower, out Vector3 outOffset)
		{
		}

		[Token(Token = "0x600182A")]
		[Address(RVA = "0x8DBCD8", Offset = "0x8DBCD8", VA = "0x8DBCD8")]
		private TextureFormat GetCurveFormat()
		{
			return default(TextureFormat);
		}

		[Token(Token = "0x600182B")]
		[Address(RVA = "0x8DBD00", Offset = "0x8DBD00", VA = "0x8DBD00")]
		private Texture2D GetCurveTexture()
		{
			return null;
		}

		[Token(Token = "0x600182C")]
		[Address(RVA = "0x8DC558", Offset = "0x8DC558", VA = "0x8DC558")]
		private bool IsLogLutValid(RenderTexture lut)
		{
			return default(bool);
		}

		[Token(Token = "0x600182D")]
		[Address(RVA = "0x8DC648", Offset = "0x8DC648", VA = "0x8DC648")]
		private RenderTextureFormat GetLutFormat()
		{
			return default(RenderTextureFormat);
		}

		[Token(Token = "0x600182E")]
		[Address(RVA = "0x8DC668", Offset = "0x8DC668", VA = "0x8DC668")]
		private void GenerateLut()
		{
		}

		[Token(Token = "0x600182F")]
		[Address(RVA = "0x8DD3C0", Offset = "0x8DD3C0", VA = "0x8DD3C0", Slot = "10")]
		public override void Prepare(Material uberMaterial)
		{
		}

		[Token(Token = "0x6001830")]
		[Address(RVA = "0x8DD774", Offset = "0x8DD774", VA = "0x8DD774")]
		public void OnGUI()
		{
		}

		[Token(Token = "0x6001831")]
		[Address(RVA = "0x8DD948", Offset = "0x8DD948", VA = "0x8DD948", Slot = "7")]
		public override void OnDisable()
		{
		}

		[Token(Token = "0x6001832")]
		[Address(RVA = "0x8DD9D8", Offset = "0x8DD9D8", VA = "0x8DD9D8")]
		public ColorGradingComponent()
		{
		}
	}
	[Token(Token = "0x20003A4")]
	public sealed class DepthOfFieldComponent : PostProcessingComponentRenderTexture<DepthOfFieldModel>
	{
		[Token(Token = "0x2000742")]
		private static class Uniforms
		{
			[Token(Token = "0x40020BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _DepthOfFieldTex;

			[Token(Token = "0x40020BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _DepthOfFieldCoCTex;

			[Token(Token = "0x40020BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly int _Distance;

			[Token(Token = "0x40020C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static readonly int _LensCoeff;

			[Token(Token = "0x40020C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static readonly int _MaxCoC;

			[Token(Token = "0x40020C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal static readonly int _RcpMaxCoC;

			[Token(Token = "0x40020C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal static readonly int _RcpAspect;

			[Token(Token = "0x40020C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal static readonly int _MainTex;

			[Token(Token = "0x40020C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal static readonly int _CoCTex;

			[Token(Token = "0x40020C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal static readonly int _TaaParams;

			[Token(Token = "0x40020C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal static readonly int _DepthOfFieldParams;
		}

		[Token(Token = "0x400178A")]
		private const string k_ShaderString = "Hidden/Post FX/Depth Of Field";

		[Token(Token = "0x400178B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private RenderTexture m_CoCHistory;

		[Token(Token = "0x400178C")]
		private const float k_FilmHeight = 0.024f;

		[Token(Token = "0x17000328")]
		public override bool active
		{
			[Token(Token = "0x6001833")]
			[Address(RVA = "0x8DEBD8", Offset = "0x8DEBD8", VA = "0x8DEBD8", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001834")]
		[Address(RVA = "0x8DEC70", Offset = "0x8DEC70", VA = "0x8DEC70", Slot = "4")]
		public override DepthTextureMode GetCameraFlags()
		{
			return default(DepthTextureMode);
		}

		[Token(Token = "0x6001835")]
		[Address(RVA = "0x8DEC78", Offset = "0x8DEC78", VA = "0x8DEC78")]
		private float CalculateFocalLength()
		{
			return default(float);
		}

		[Token(Token = "0x6001836")]
		[Address(RVA = "0x8DED94", Offset = "0x8DED94", VA = "0x8DED94")]
		private float CalculateMaxCoCRadius(int screenHeight)
		{
			return default(float);
		}

		[Token(Token = "0x6001837")]
		[Address(RVA = "0x8DEE64", Offset = "0x8DEE64", VA = "0x8DEE64")]
		private bool CheckHistory(int width, int height)
		{
			return default(bool);
		}

		[Token(Token = "0x6001838")]
		[Address(RVA = "0x8DEF98", Offset = "0x8DEF98", VA = "0x8DEF98")]
		private RenderTextureFormat SelectFormat(RenderTextureFormat primary, RenderTextureFormat secondary)
		{
			return default(RenderTextureFormat);
		}

		[Token(Token = "0x6001839")]
		[Address(RVA = "0x8DEFDC", Offset = "0x8DEFDC", VA = "0x8DEFDC")]
		public void Prepare(RenderTexture source, Material uberMaterial, bool antialiasCoC, Vector2 taaJitter, float taaBlending)
		{
		}

		[Token(Token = "0x600183A")]
		[Address(RVA = "0x8DFC38", Offset = "0x8DFC38", VA = "0x8DFC38", Slot = "7")]
		public override void OnDisable()
		{
		}

		[Token(Token = "0x600183B")]
		[Address(RVA = "0x8DFCE0", Offset = "0x8DFCE0", VA = "0x8DFCE0")]
		public DepthOfFieldComponent()
		{
		}
	}
	[Token(Token = "0x20003A5")]
	public sealed class DitheringComponent : PostProcessingComponentRenderTexture<DitheringModel>
	{
		[Token(Token = "0x2000743")]
		private static class Uniforms
		{
			[Token(Token = "0x40020C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _DitheringTex;

			[Token(Token = "0x40020C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _DitheringCoords;
		}

		[Token(Token = "0x400178D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Texture2D[] noiseTextures;

		[Token(Token = "0x400178E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int textureIndex;

		[Token(Token = "0x400178F")]
		private const int k_TextureCount = 64;

		[Token(Token = "0x17000329")]
		public override bool active
		{
			[Token(Token = "0x600183C")]
			[Address(RVA = "0x8E0008", Offset = "0x8E0008", VA = "0x8E0008", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600183D")]
		[Address(RVA = "0x8E00A0", Offset = "0x8E00A0", VA = "0x8E00A0", Slot = "7")]
		public override void OnDisable()
		{
		}

		[Token(Token = "0x600183E")]
		[Address(RVA = "0x8E00AC", Offset = "0x8E00AC", VA = "0x8E00AC")]
		private void LoadNoiseTextures()
		{
		}

		[Token(Token = "0x600183F")]
		[Address(RVA = "0x8E01EC", Offset = "0x8E01EC", VA = "0x8E01EC", Slot = "10")]
		public override void Prepare(Material uberMaterial)
		{
		}

		[Token(Token = "0x6001840")]
		[Address(RVA = "0x8E0488", Offset = "0x8E0488", VA = "0x8E0488")]
		public DitheringComponent()
		{
		}
	}
	[Token(Token = "0x20003A6")]
	public sealed class EyeAdaptationComponent : PostProcessingComponentRenderTexture<EyeAdaptationModel>
	{
		[Token(Token = "0x2000744")]
		private static class Uniforms
		{
			[Token(Token = "0x40020CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _Params;

			[Token(Token = "0x40020CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _Speed;

			[Token(Token = "0x40020CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly int _ScaleOffsetRes;

			[Token(Token = "0x40020CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static readonly int _ExposureCompensation;

			[Token(Token = "0x40020CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static readonly int _AutoExposure;

			[Token(Token = "0x40020CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal static readonly int _DebugWidth;
		}

		[Token(Token = "0x4001790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ComputeShader m_EyeCompute;

		[Token(Token = "0x4001791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private ComputeBuffer m_HistogramBuffer;

		[Token(Token = "0x4001792")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly RenderTexture[] m_AutoExposurePool;

		[Token(Token = "0x4001793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int m_AutoExposurePingPing;

		[Token(Token = "0x4001794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RenderTexture m_CurrentAutoExposure;

		[Token(Token = "0x4001795")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private RenderTexture m_DebugHistogram;

		[Token(Token = "0x4001796")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static uint[] s_EmptyHistogramBuffer;

		[Token(Token = "0x4001797")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool m_FirstFrame;

		[Token(Token = "0x4001798")]
		private const int k_HistogramBins = 64;

		[Token(Token = "0x4001799")]
		private const int k_HistogramThreadX = 16;

		[Token(Token = "0x400179A")]
		private const int k_HistogramThreadY = 16;

		[Token(Token = "0x1700032A")]
		public override bool active
		{
			[Token(Token = "0x6001841")]
			[Address(RVA = "0x8E05BC", Offset = "0x8E05BC", VA = "0x8E05BC", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001842")]
		[Address(RVA = "0x8E0664", Offset = "0x8E0664", VA = "0x8E0664")]
		public void ResetHistory()
		{
		}

		[Token(Token = "0x6001843")]
		[Address(RVA = "0x8E0670", Offset = "0x8E0670", VA = "0x8E0670", Slot = "6")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x6001844")]
		[Address(RVA = "0x8E067C", Offset = "0x8E067C", VA = "0x8E067C", Slot = "7")]
		public override void OnDisable()
		{
		}

		[Token(Token = "0x6001845")]
		[Address(RVA = "0x8E07A4", Offset = "0x8E07A4", VA = "0x8E07A4")]
		private Vector4 GetHistogramScaleOffsetRes()
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001846")]
		[Address(RVA = "0x8E0900", Offset = "0x8E0900", VA = "0x8E0900")]
		public Texture Prepare(RenderTexture source, Material uberMaterial)
		{
			return null;
		}

		[Token(Token = "0x6001847")]
		[Address(RVA = "0x8E1834", Offset = "0x8E1834", VA = "0x8E1834")]
		public void OnGUI()
		{
		}

		[Token(Token = "0x6001848")]
		[Address(RVA = "0x8E1A38", Offset = "0x8E1A38", VA = "0x8E1A38")]
		public EyeAdaptationComponent()
		{
		}
	}
	[Token(Token = "0x20003A7")]
	public sealed class FogComponent : PostProcessingComponentCommandBuffer<FogModel>
	{
		[Token(Token = "0x2000745")]
		private static class Uniforms
		{
			[Token(Token = "0x40020D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _FogColor;

			[Token(Token = "0x40020D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _Density;

			[Token(Token = "0x40020D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly int _Start;

			[Token(Token = "0x40020D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static readonly int _End;

			[Token(Token = "0x40020D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static readonly int _TempRT;
		}

		[Token(Token = "0x400179B")]
		private const string k_ShaderString = "Hidden/Post FX/Fog";

		[Token(Token = "0x1700032B")]
		public override bool active
		{
			[Token(Token = "0x6001849")]
			[Address(RVA = "0x8E1D70", Offset = "0x8E1D70", VA = "0x8E1D70", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600184A")]
		[Address(RVA = "0x8E1E40", Offset = "0x8E1E40", VA = "0x8E1E40", Slot = "11")]
		public override string GetName()
		{
			return null;
		}

		[Token(Token = "0x600184B")]
		[Address(RVA = "0x8E1E9C", Offset = "0x8E1E9C", VA = "0x8E1E9C", Slot = "4")]
		public override DepthTextureMode GetCameraFlags()
		{
			return default(DepthTextureMode);
		}

		[Token(Token = "0x600184C")]
		[Address(RVA = "0x8E1EA4", Offset = "0x8E1EA4", VA = "0x8E1EA4", Slot = "10")]
		public override CameraEvent GetCameraEvent()
		{
			return default(CameraEvent);
		}

		[Token(Token = "0x600184D")]
		[Address(RVA = "0x8E1EAC", Offset = "0x8E1EAC", VA = "0x8E1EAC", Slot = "12")]
		public override void PopulateCommandBuffer(CommandBuffer cb)
		{
		}

		[Token(Token = "0x600184E")]
		[Address(RVA = "0x8E2544", Offset = "0x8E2544", VA = "0x8E2544")]
		public FogComponent()
		{
		}
	}
	[Token(Token = "0x20003A8")]
	public sealed class FxaaComponent : PostProcessingComponentRenderTexture<AntialiasingModel>
	{
		[Token(Token = "0x2000746")]
		private static class Uniforms
		{
			[Token(Token = "0x40020D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _QualitySettings;

			[Token(Token = "0x40020D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _ConsoleSettings;
		}

		[Token(Token = "0x1700032C")]
		public override bool active
		{
			[Token(Token = "0x600184F")]
			[Address(RVA = "0x8E26E4", Offset = "0x8E26E4", VA = "0x8E26E4", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001850")]
		[Address(RVA = "0x8E279C", Offset = "0x8E279C", VA = "0x8E279C")]
		public void Render(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6001851")]
		[Address(RVA = "0x8E2AF8", Offset = "0x8E2AF8", VA = "0x8E2AF8")]
		public FxaaComponent()
		{
		}
	}
	[Token(Token = "0x20003A9")]
	public sealed class GrainComponent : PostProcessingComponentRenderTexture<GrainModel>
	{
		[Token(Token = "0x2000747")]
		private static class Uniforms
		{
			[Token(Token = "0x40020D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _Grain_Params1;

			[Token(Token = "0x40020D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _Grain_Params2;

			[Token(Token = "0x40020D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly int _GrainTex;

			[Token(Token = "0x40020DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static readonly int _Phase;
		}

		[Token(Token = "0x400179C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private RenderTexture m_GrainLookupRT;

		[Token(Token = "0x1700032D")]
		public override bool active
		{
			[Token(Token = "0x6001852")]
			[Address(RVA = "0x8E2C18", Offset = "0x8E2C18", VA = "0x8E2C18", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001853")]
		[Address(RVA = "0x8E2CEC", Offset = "0x8E2CEC", VA = "0x8E2CEC", Slot = "7")]
		public override void OnDisable()
		{
		}

		[Token(Token = "0x6001854")]
		[Address(RVA = "0x8E2D0C", Offset = "0x8E2D0C", VA = "0x8E2D0C", Slot = "10")]
		public override void Prepare(Material uberMaterial)
		{
		}

		[Token(Token = "0x6001855")]
		[Address(RVA = "0x8E32E0", Offset = "0x8E32E0", VA = "0x8E32E0")]
		public GrainComponent()
		{
		}
	}
	[Token(Token = "0x20003AA")]
	public sealed class MotionBlurComponent : PostProcessingComponentCommandBuffer<MotionBlurModel>
	{
		[Token(Token = "0x2000748")]
		private static class Uniforms
		{
			[Token(Token = "0x40020DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _VelocityScale;

			[Token(Token = "0x40020DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _MaxBlurRadius;

			[Token(Token = "0x40020DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly int _RcpMaxBlurRadius;

			[Token(Token = "0x40020DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static readonly int _VelocityTex;

			[Token(Token = "0x40020DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static readonly int _MainTex;

			[Token(Token = "0x40020E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal static readonly int _Tile2RT;

			[Token(Token = "0x40020E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal static readonly int _Tile4RT;

			[Token(Token = "0x40020E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal static readonly int _Tile8RT;

			[Token(Token = "0x40020E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal static readonly int _TileMaxOffs;

			[Token(Token = "0x40020E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal static readonly int _TileMaxLoop;

			[Token(Token = "0x40020E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal static readonly int _TileVRT;

			[Token(Token = "0x40020E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal static readonly int _NeighborMaxTex;

			[Token(Token = "0x40020E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal static readonly int _LoopCount;

			[Token(Token = "0x40020E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			internal static readonly int _TempRT;

			[Token(Token = "0x40020E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal static readonly int _History1LumaTex;

			[Token(Token = "0x40020EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			internal static readonly int _History2LumaTex;

			[Token(Token = "0x40020EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal static readonly int _History3LumaTex;

			[Token(Token = "0x40020EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			internal static readonly int _History4LumaTex;

			[Token(Token = "0x40020ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal static readonly int _History1ChromaTex;

			[Token(Token = "0x40020EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			internal static readonly int _History2ChromaTex;

			[Token(Token = "0x40020EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			internal static readonly int _History3ChromaTex;

			[Token(Token = "0x40020F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			internal static readonly int _History4ChromaTex;

			[Token(Token = "0x40020F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			internal static readonly int _History1Weight;

			[Token(Token = "0x40020F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			internal static readonly int _History2Weight;

			[Token(Token = "0x40020F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			internal static readonly int _History3Weight;

			[Token(Token = "0x40020F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			internal static readonly int _History4Weight;
		}

		[Token(Token = "0x2000749")]
		private enum Pass
		{
			[Token(Token = "0x40020F6")]
			VelocitySetup,
			[Token(Token = "0x40020F7")]
			TileMax1,
			[Token(Token = "0x40020F8")]
			TileMax2,
			[Token(Token = "0x40020F9")]
			TileMaxV,
			[Token(Token = "0x40020FA")]
			NeighborMax,
			[Token(Token = "0x40020FB")]
			Reconstruction,
			[Token(Token = "0x40020FC")]
			FrameCompression,
			[Token(Token = "0x40020FD")]
			FrameBlendingChroma,
			[Token(Token = "0x40020FE")]
			FrameBlendingRaw
		}

		[Token(Token = "0x200074A")]
		public class ReconstructionFilter
		{
			[Token(Token = "0x40020FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private RenderTextureFormat m_VectorRTFormat;

			[Token(Token = "0x4002100")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private RenderTextureFormat m_PackedRTFormat;

			[Token(Token = "0x600247B")]
			[Address(RVA = "0x8E411C", Offset = "0x8E411C", VA = "0x8E411C")]
			public ReconstructionFilter()
			{
			}

			[Token(Token = "0x600247C")]
			[Address(RVA = "0x8E71D8", Offset = "0x8E71D8", VA = "0x8E71D8")]
			private void CheckTextureFormatSupport()
			{
			}

			[Token(Token = "0x600247D")]
			[Address(RVA = "0x8E438C", Offset = "0x8E438C", VA = "0x8E438C")]
			public bool IsSupported()
			{
				return default(bool);
			}

			[Token(Token = "0x600247E")]
			[Address(RVA = "0x8E4E84", Offset = "0x8E4E84", VA = "0x8E4E84")]
			public void ProcessImage(PostProcessingContext context, CommandBuffer cb, ref MotionBlurModel.Settings settings, RenderTargetIdentifier source, RenderTargetIdentifier destination, Material material)
			{
			}
		}

		[Token(Token = "0x200074B")]
		public class FrameBlendingFilter
		{
			[Token(Token = "0x2000794")]
			private struct Frame
			{
				[Token(Token = "0x4002275")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public RenderTexture lumaTexture;

				[Token(Token = "0x4002276")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
				public RenderTexture chromaTexture;

				[Token(Token = "0x4002277")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
				private float m_Time;

				[Token(Token = "0x4002278")]
				[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
				private RenderTargetIdentifier[] m_MRT;

				[Token(Token = "0x60024D1")]
				[Address(RVA = "0x3ABD2C", Offset = "0x3ABD2C", VA = "0x3ABD2C")]
				public float CalculateWeight(float strength, float currentTime)
				{
					return default(float);
				}

				[Token(Token = "0x60024D2")]
				[Address(RVA = "0x3ABD34", Offset = "0x3ABD34", VA = "0x3ABD34")]
				public void Release()
				{
				}

				[Token(Token = "0x60024D3")]
				[Address(RVA = "0x3ABD3C", Offset = "0x3ABD3C", VA = "0x3ABD3C")]
				public void MakeRecord(CommandBuffer cb, RenderTargetIdentifier source, int width, int height, Material material)
				{
				}

				[Token(Token = "0x60024D4")]
				[Address(RVA = "0x3ABD8C", Offset = "0x3ABD8C", VA = "0x3ABD8C")]
				public void MakeRecordRaw(CommandBuffer cb, RenderTargetIdentifier source, int width, int height, RenderTextureFormat format)
				{
				}
			}

			[Token(Token = "0x4002101")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private bool m_UseCompression;

			[Token(Token = "0x4002102")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private RenderTextureFormat m_RawTextureFormat;

			[Token(Token = "0x4002103")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private Frame[] m_FrameList;

			[Token(Token = "0x4002104")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private int m_LastFrameCount;

			[Token(Token = "0x600247F")]
			[Address(RVA = "0x8E41DC", Offset = "0x8E41DC", VA = "0x8E41DC")]
			public FrameBlendingFilter()
			{
			}

			[Token(Token = "0x6002480")]
			[Address(RVA = "0x8E4414", Offset = "0x8E4414", VA = "0x8E4414")]
			public void Dispose()
			{
			}

			[Token(Token = "0x6002481")]
			[Address(RVA = "0x8E6588", Offset = "0x8E6588", VA = "0x8E6588")]
			public void PushFrame(CommandBuffer cb, RenderTargetIdentifier source, int width, int height, Material material)
			{
			}

			[Token(Token = "0x6002482")]
			[Address(RVA = "0x8E5F18", Offset = "0x8E5F18", VA = "0x8E5F18")]
			public void BlendFrames(CommandBuffer cb, float strength, RenderTargetIdentifier source, RenderTargetIdentifier destination, Material material)
			{
			}

			[Token(Token = "0x6002483")]
			[Address(RVA = "0x8E67C8", Offset = "0x8E67C8", VA = "0x8E67C8")]
			private static bool CheckSupportCompression()
			{
				return default(bool);
			}

			[Token(Token = "0x6002484")]
			[Address(RVA = "0x8E6804", Offset = "0x8E6804", VA = "0x8E6804")]
			private static RenderTextureFormat GetPreferredRenderTextureFormat()
			{
				return default(RenderTextureFormat);
			}

			[Token(Token = "0x6002485")]
			[Address(RVA = "0x8E701C", Offset = "0x8E701C", VA = "0x8E701C")]
			private Frame GetFrameRelative(int offset)
			{
				return default(Frame);
			}
		}

		[Token(Token = "0x400179D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ReconstructionFilter m_ReconstructionFilter;

		[Token(Token = "0x400179E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private FrameBlendingFilter m_FrameBlendingFilter;

		[Token(Token = "0x400179F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool m_FirstFrame;

		[Token(Token = "0x1700032E")]
		public ReconstructionFilter reconstructionFilter
		{
			[Token(Token = "0x6001856")]
			[Address(RVA = "0x8E40A0", Offset = "0x8E40A0", VA = "0x8E40A0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700032F")]
		public FrameBlendingFilter frameBlendingFilter
		{
			[Token(Token = "0x6001857")]
			[Address(RVA = "0x8E4160", Offset = "0x8E4160", VA = "0x8E4160")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000330")]
		public override bool active
		{
			[Token(Token = "0x6001858")]
			[Address(RVA = "0x8E4260", Offset = "0x8E4260", VA = "0x8E4260", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001859")]
		[Address(RVA = "0x8E4394", Offset = "0x8E4394", VA = "0x8E4394", Slot = "11")]
		public override string GetName()
		{
			return null;
		}

		[Token(Token = "0x600185A")]
		[Address(RVA = "0x8E43F0", Offset = "0x8E43F0", VA = "0x8E43F0")]
		public void ResetHistory()
		{
		}

		[Token(Token = "0x600185B")]
		[Address(RVA = "0x8E448C", Offset = "0x8E448C", VA = "0x8E448C", Slot = "4")]
		public override DepthTextureMode GetCameraFlags()
		{
			return default(DepthTextureMode);
		}

		[Token(Token = "0x600185C")]
		[Address(RVA = "0x8E4494", Offset = "0x8E4494", VA = "0x8E4494", Slot = "10")]
		public override CameraEvent GetCameraEvent()
		{
			return default(CameraEvent);
		}

		[Token(Token = "0x600185D")]
		[Address(RVA = "0x8E449C", Offset = "0x8E449C", VA = "0x8E449C", Slot = "6")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x600185E")]
		[Address(RVA = "0x8E44A8", Offset = "0x8E44A8", VA = "0x8E44A8", Slot = "12")]
		public override void PopulateCommandBuffer(CommandBuffer cb)
		{
		}

		[Token(Token = "0x600185F")]
		[Address(RVA = "0x8E674C", Offset = "0x8E674C", VA = "0x8E674C", Slot = "7")]
		public override void OnDisable()
		{
		}

		[Token(Token = "0x6001860")]
		[Address(RVA = "0x8E675C", Offset = "0x8E675C", VA = "0x8E675C")]
		public MotionBlurComponent()
		{
		}
	}
	[Token(Token = "0x20003AB")]
	public sealed class ScreenSpaceReflectionComponent : PostProcessingComponentCommandBuffer<ScreenSpaceReflectionModel>
	{
		[Token(Token = "0x200074C")]
		private static class Uniforms
		{
			[Token(Token = "0x4002105")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _RayStepSize;

			[Token(Token = "0x4002106")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _AdditiveReflection;

			[Token(Token = "0x4002107")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly int _BilateralUpsampling;

			[Token(Token = "0x4002108")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static readonly int _TreatBackfaceHitAsMiss;

			[Token(Token = "0x4002109")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static readonly int _AllowBackwardsRays;

			[Token(Token = "0x400210A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal static readonly int _TraceBehindObjects;

			[Token(Token = "0x400210B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal static readonly int _MaxSteps;

			[Token(Token = "0x400210C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal static readonly int _FullResolutionFiltering;

			[Token(Token = "0x400210D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal static readonly int _HalfResolution;

			[Token(Token = "0x400210E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal static readonly int _HighlightSuppression;

			[Token(Token = "0x400210F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal static readonly int _PixelsPerMeterAtOneMeter;

			[Token(Token = "0x4002110")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal static readonly int _ScreenEdgeFading;

			[Token(Token = "0x4002111")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal static readonly int _ReflectionBlur;

			[Token(Token = "0x4002112")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			internal static readonly int _MaxRayTraceDistance;

			[Token(Token = "0x4002113")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal static readonly int _FadeDistance;

			[Token(Token = "0x4002114")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			internal static readonly int _LayerThickness;

			[Token(Token = "0x4002115")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal static readonly int _SSRMultiplier;

			[Token(Token = "0x4002116")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			internal static readonly int _FresnelFade;

			[Token(Token = "0x4002117")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal static readonly int _FresnelFadePower;

			[Token(Token = "0x4002118")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			internal static readonly int _ReflectionBufferSize;

			[Token(Token = "0x4002119")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			internal static readonly int _ScreenSize;

			[Token(Token = "0x400211A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			internal static readonly int _InvScreenSize;

			[Token(Token = "0x400211B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			internal static readonly int _ProjInfo;

			[Token(Token = "0x400211C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			internal static readonly int _CameraClipInfo;

			[Token(Token = "0x400211D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			internal static readonly int _ProjectToPixelMatrix;

			[Token(Token = "0x400211E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			internal static readonly int _WorldToCameraMatrix;

			[Token(Token = "0x400211F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			internal static readonly int _CameraToWorldMatrix;

			[Token(Token = "0x4002120")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			internal static readonly int _Axis;

			[Token(Token = "0x4002121")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			internal static readonly int _CurrentMipLevel;

			[Token(Token = "0x4002122")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			internal static readonly int _NormalAndRoughnessTexture;

			[Token(Token = "0x4002123")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			internal static readonly int _HitPointTexture;

			[Token(Token = "0x4002124")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			internal static readonly int _BlurTexture;

			[Token(Token = "0x4002125")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			internal static readonly int _FilteredReflections;

			[Token(Token = "0x4002126")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			internal static readonly int _FinalReflectionTexture;

			[Token(Token = "0x4002127")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			internal static readonly int _TempTexture;
		}

		[Token(Token = "0x200074D")]
		private enum PassIndex
		{
			[Token(Token = "0x4002129")]
			RayTraceStep,
			[Token(Token = "0x400212A")]
			CompositeFinal,
			[Token(Token = "0x400212B")]
			Blur,
			[Token(Token = "0x400212C")]
			CompositeSSR,
			[Token(Token = "0x400212D")]
			MinMipGeneration,
			[Token(Token = "0x400212E")]
			HitPointToReflections,
			[Token(Token = "0x400212F")]
			BilateralKeyPack,
			[Token(Token = "0x4002130")]
			BlitDepthAsCSZ,
			[Token(Token = "0x4002131")]
			PoissonBlur
		}

		[Token(Token = "0x40017A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool k_HighlightSuppression;

		[Token(Token = "0x40017A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		private bool k_TraceBehindObjects;

		[Token(Token = "0x40017A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		private bool k_TreatBackfaceHitAsMiss;

		[Token(Token = "0x40017A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
		private bool k_BilateralUpsample;

		[Token(Token = "0x40017A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private readonly int[] m_ReflectionTextures;

		[Token(Token = "0x17000331")]
		public override bool active
		{
			[Token(Token = "0x6001862")]
			[Address(RVA = "0x8EB4F8", Offset = "0x8EB4F8", VA = "0x8EB4F8", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001861")]
		[Address(RVA = "0x8EB4F0", Offset = "0x8EB4F0", VA = "0x8EB4F0", Slot = "4")]
		public override DepthTextureMode GetCameraFlags()
		{
			return default(DepthTextureMode);
		}

		[Token(Token = "0x6001863")]
		[Address(RVA = "0x8EB5B4", Offset = "0x8EB5B4", VA = "0x8EB5B4", Slot = "6")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x6001864")]
		[Address(RVA = "0x8EB790", Offset = "0x8EB790", VA = "0x8EB790", Slot = "11")]
		public override string GetName()
		{
			return null;
		}

		[Token(Token = "0x6001865")]
		[Address(RVA = "0x8EB7EC", Offset = "0x8EB7EC", VA = "0x8EB7EC", Slot = "10")]
		public override CameraEvent GetCameraEvent()
		{
			return default(CameraEvent);
		}

		[Token(Token = "0x6001866")]
		[Address(RVA = "0x8EB7F4", Offset = "0x8EB7F4", VA = "0x8EB7F4", Slot = "12")]
		public override void PopulateCommandBuffer(CommandBuffer cb)
		{
		}

		[Token(Token = "0x6001867")]
		[Address(RVA = "0x8E7D40", Offset = "0x8E7D40", VA = "0x8E7D40")]
		public ScreenSpaceReflectionComponent()
		{
		}
	}
	[Token(Token = "0x20003AC")]
	public sealed class TaaComponent : PostProcessingComponentRenderTexture<AntialiasingModel>
	{
		[Token(Token = "0x200074E")]
		private static class Uniforms
		{
			[Token(Token = "0x4002132")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static int _Jitter;

			[Token(Token = "0x4002133")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static int _SharpenParameters;

			[Token(Token = "0x4002134")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static int _FinalBlendParameters;

			[Token(Token = "0x4002135")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static int _HistoryTex;

			[Token(Token = "0x4002136")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static int _MainTex;
		}

		[Token(Token = "0x40017A5")]
		private const string k_ShaderString = "Hidden/Post FX/Temporal Anti-aliasing";

		[Token(Token = "0x40017A6")]
		private const int k_SampleCount = 8;

		[Token(Token = "0x40017A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly RenderBuffer[] m_MRT;

		[Token(Token = "0x40017A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int m_SampleIndex;

		[Token(Token = "0x40017A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool m_ResetHistory;

		[Token(Token = "0x40017AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private RenderTexture m_HistoryTexture;

		[Token(Token = "0x40017AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F5BFC", Offset = "0x2F5BFC")]
		private Vector2 <jitterVector>k__BackingField;

		[Token(Token = "0x17000332")]
		public override bool active
		{
			[Token(Token = "0x6001868")]
			[Address(RVA = "0x8EDFF8", Offset = "0x8EDFF8", VA = "0x8EDFF8", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000333")]
		public Vector2 jitterVector
		{
			[Token(Token = "0x600186A")]
			[Address(RVA = "0x8EE0E0", Offset = "0x8EE0E0", VA = "0x8EE0E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FCB60", Offset = "0x2FCB60")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x600186B")]
			[Address(RVA = "0x8EE0F4", Offset = "0x8EE0F4", VA = "0x8EE0F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FCB70", Offset = "0x2FCB70")]
			private set
			{
			}
		}

		[Token(Token = "0x6001869")]
		[Address(RVA = "0x8EE0D8", Offset = "0x8EE0D8", VA = "0x8EE0D8", Slot = "4")]
		public override DepthTextureMode GetCameraFlags()
		{
			return default(DepthTextureMode);
		}

		[Token(Token = "0x600186C")]
		[Address(RVA = "0x8EAE28", Offset = "0x8EAE28", VA = "0x8EAE28")]
		public void ResetHistory()
		{
		}

		[Token(Token = "0x600186D")]
		[Address(RVA = "0x8E8D50", Offset = "0x8E8D50", VA = "0x8E8D50")]
		public void SetProjectionMatrix(Func<Vector2, Matrix4x4> jitteredFunc)
		{
		}

		[Token(Token = "0x600186E")]
		[Address(RVA = "0x8E9EE4", Offset = "0x8E9EE4", VA = "0x8E9EE4")]
		public void Render(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600186F")]
		[Address(RVA = "0x8EEBA0", Offset = "0x8EEBA0", VA = "0x8EEBA0")]
		private float GetHaltonValue(int index, int radix)
		{
			return default(float);
		}

		[Token(Token = "0x6001870")]
		[Address(RVA = "0x8EE100", Offset = "0x8EE100", VA = "0x8EE100")]
		private Vector2 GenerateRandomOffset()
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001871")]
		[Address(RVA = "0x8EE220", Offset = "0x8EE220", VA = "0x8EE220")]
		private Matrix4x4 GetPerspectiveProjectionMatrix(Vector2 offset)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6001872")]
		[Address(RVA = "0x8EE96C", Offset = "0x8EE96C", VA = "0x8EE96C")]
		private Matrix4x4 GetOrthographicProjectionMatrix(Vector2 offset)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6001873")]
		[Address(RVA = "0x8EEC08", Offset = "0x8EEC08", VA = "0x8EEC08", Slot = "7")]
		public override void OnDisable()
		{
		}

		[Token(Token = "0x6001874")]
		[Address(RVA = "0x8E7DCC", Offset = "0x8E7DCC", VA = "0x8E7DCC")]
		public TaaComponent()
		{
		}
	}
	[Token(Token = "0x20003AD")]
	public sealed class UserLutComponent : PostProcessingComponentRenderTexture<UserLutModel>
	{
		[Token(Token = "0x200074F")]
		private static class Uniforms
		{
			[Token(Token = "0x4002137")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _UserLut;

			[Token(Token = "0x4002138")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _UserLut_Params;
		}

		[Token(Token = "0x17000334")]
		public override bool active
		{
			[Token(Token = "0x6001875")]
			[Address(RVA = "0x8EEDEC", Offset = "0x8EEDEC", VA = "0x8EEDEC", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001876")]
		[Address(RVA = "0x8EEFC0", Offset = "0x8EEFC0", VA = "0x8EEFC0", Slot = "10")]
		public override void Prepare(Material uberMaterial)
		{
		}

		[Token(Token = "0x6001877")]
		[Address(RVA = "0x8EA988", Offset = "0x8EA988", VA = "0x8EA988")]
		public void OnGUI()
		{
		}

		[Token(Token = "0x6001878")]
		[Address(RVA = "0x8E7E54", Offset = "0x8E7E54", VA = "0x8E7E54")]
		public UserLutComponent()
		{
		}
	}
	[Token(Token = "0x20003AE")]
	public sealed class VignetteComponent : PostProcessingComponentRenderTexture<VignetteModel>
	{
		[Token(Token = "0x2000750")]
		private static class Uniforms
		{
			[Token(Token = "0x4002139")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _Vignette_Color;

			[Token(Token = "0x400213A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _Vignette_Center;

			[Token(Token = "0x400213B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly int _Vignette_Settings;

			[Token(Token = "0x400213C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static readonly int _Vignette_Mask;

			[Token(Token = "0x400213D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static readonly int _Vignette_Opacity;
		}

		[Token(Token = "0x17000335")]
		public override bool active
		{
			[Token(Token = "0x6001879")]
			[Address(RVA = "0x8EF2BC", Offset = "0x8EF2BC", VA = "0x8EF2BC", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600187A")]
		[Address(RVA = "0x8EF354", Offset = "0x8EF354", VA = "0x8EF354", Slot = "10")]
		public override void Prepare(Material uberMaterial)
		{
		}

		[Token(Token = "0x600187B")]
		[Address(RVA = "0x8E7EB8", Offset = "0x8E7EB8", VA = "0x8E7EB8")]
		public VignetteComponent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003AF")]
	public class AmbientOcclusionModel : PostProcessingModel
	{
		[Token(Token = "0x2000751")]
		public enum SampleCount
		{
			[Token(Token = "0x400213F")]
			Lowest = 3,
			[Token(Token = "0x4002140")]
			Low = 6,
			[Token(Token = "0x4002141")]
			Medium = 10,
			[Token(Token = "0x4002142")]
			High = 16
		}

		[Serializable]
		[Token(Token = "0x2000752")]
		public struct Settings
		{
			[Token(Token = "0x4002143")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F68A0", Offset = "0x2F68A0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F68A0", Offset = "0x2F68A0")]
			public float intensity;

			[Token(Token = "0x4002144")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "MinAttribute", RVA = "0x2F6918", Offset = "0x2F6918")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F6918", Offset = "0x2F6918")]
			public float radius;

			[Token(Token = "0x4002145")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F6968", Offset = "0x2F6968")]
			public SampleCount sampleCount;

			[Token(Token = "0x4002146")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F69D4", Offset = "0x2F69D4")]
			public bool downsampling;

			[Token(Token = "0x4002147")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F6A08", Offset = "0x2F6A08")]
			public bool forceForwardCompatibility;

			[Token(Token = "0x4002148")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F6A3C", Offset = "0x2F6A3C")]
			public bool ambientOnly;

			[Token(Token = "0x4002149")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F6A70", Offset = "0x2F6A70")]
			public bool highPrecision;

			[Token(Token = "0x170003F2")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x600248A")]
				[Address(RVA = "0x8D6BF0", Offset = "0x8D6BF0", VA = "0x8D6BF0")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x40017AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x17000336")]
		public Settings settings
		{
			[Token(Token = "0x600187C")]
			[Address(RVA = "0x8D6BA4", Offset = "0x8D6BA4", VA = "0x8D6BA4")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x600187D")]
			[Address(RVA = "0x8D6BB4", Offset = "0x8D6BB4", VA = "0x8D6BB4")]
			set
			{
			}
		}

		[Token(Token = "0x600187E")]
		[Address(RVA = "0x8D6BC8", Offset = "0x8D6BC8", VA = "0x8D6BC8", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600187F")]
		[Address(RVA = "0x8D6C18", Offset = "0x8D6C18", VA = "0x8D6C18")]
		public AmbientOcclusionModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003B0")]
	public class AntialiasingModel : PostProcessingModel
	{
		[Token(Token = "0x2000753")]
		public enum Method
		{
			[Token(Token = "0x400214B")]
			Fxaa,
			[Token(Token = "0x400214C")]
			Taa
		}

		[Token(Token = "0x2000754")]
		public enum FxaaPreset
		{
			[Token(Token = "0x400214E")]
			ExtremePerformance,
			[Token(Token = "0x400214F")]
			Performance,
			[Token(Token = "0x4002150")]
			Default,
			[Token(Token = "0x4002151")]
			Quality,
			[Token(Token = "0x4002152")]
			ExtremeQuality
		}

		[Serializable]
		[Token(Token = "0x2000755")]
		public struct FxaaQualitySettings
		{
			[Token(Token = "0x4002153")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F6AA4", Offset = "0x2F6AA4")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F6AA4", Offset = "0x2F6AA4")]
			public float subpixelAliasingRemovalAmount;

			[Token(Token = "0x4002154")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F6AF4", Offset = "0x2F6AF4")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F6AF4", Offset = "0x2F6AF4")]
			public float edgeDetectionThreshold;

			[Token(Token = "0x4002155")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F6B4C", Offset = "0x2F6B4C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F6B4C", Offset = "0x2F6B4C")]
			public float minimumRequiredLuminance;

			[Token(Token = "0x4002156")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static FxaaQualitySettings[] presets;
		}

		[Serializable]
		[Token(Token = "0x2000756")]
		public struct FxaaConsoleSettings
		{
			[Token(Token = "0x4002157")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F6BA0", Offset = "0x2F6BA0")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F6BA0", Offset = "0x2F6BA0")]
			public float subpixelSpreadAmount;

			[Token(Token = "0x4002158")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F6BF4", Offset = "0x2F6BF4")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F6BF4", Offset = "0x2F6BF4")]
			public float edgeSharpnessAmount;

			[Token(Token = "0x4002159")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F6C44", Offset = "0x2F6C44")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F6C44", Offset = "0x2F6C44")]
			public float edgeDetectionThreshold;

			[Token(Token = "0x400215A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F6C94", Offset = "0x2F6C94")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F6C94", Offset = "0x2F6C94")]
			public float minimumRequiredLuminance;

			[Token(Token = "0x400215B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static FxaaConsoleSettings[] presets;
		}

		[Serializable]
		[Token(Token = "0x2000757")]
		public struct FxaaSettings
		{
			[Token(Token = "0x400215C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public FxaaPreset preset;

			[Token(Token = "0x170003F3")]
			public static FxaaSettings defaultSettings
			{
				[Token(Token = "0x600248D")]
				[Address(RVA = "0x8D7090", Offset = "0x8D7090", VA = "0x8D7090")]
				get
				{
					return default(FxaaSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x2000758")]
		public struct TaaSettings
		{
			[Token(Token = "0x400215D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F6CEC", Offset = "0x2F6CEC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F6CEC", Offset = "0x2F6CEC")]
			public float jitterSpread;

			[Token(Token = "0x400215E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F6D40", Offset = "0x2F6D40")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F6D40", Offset = "0x2F6D40")]
			public float sharpen;

			[Token(Token = "0x400215F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F6DCC", Offset = "0x2F6DCC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F6DCC", Offset = "0x2F6DCC")]
			public float stationaryBlending;

			[Token(Token = "0x4002160")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F6E20", Offset = "0x2F6E20")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F6E20", Offset = "0x2F6E20")]
			public float motionBlending;

			[Token(Token = "0x170003F4")]
			public static TaaSettings defaultSettings
			{
				[Token(Token = "0x600248E")]
				[Address(RVA = "0x8D7098", Offset = "0x8D7098", VA = "0x8D7098")]
				get
				{
					return default(TaaSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x2000759")]
		public struct Settings
		{
			[Token(Token = "0x4002161")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Method method;

			[Token(Token = "0x4002162")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public FxaaSettings fxaaSettings;

			[Token(Token = "0x4002163")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public TaaSettings taaSettings;

			[Token(Token = "0x170003F5")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x600248F")]
				[Address(RVA = "0x8D6CC8", Offset = "0x8D6CC8", VA = "0x8D6CC8")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x40017AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x17000337")]
		public Settings settings
		{
			[Token(Token = "0x6001880")]
			[Address(RVA = "0x8D6C48", Offset = "0x8D6C48", VA = "0x8D6C48")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x6001881")]
			[Address(RVA = "0x8D6C60", Offset = "0x8D6C60", VA = "0x8D6C60")]
			set
			{
			}
		}

		[Token(Token = "0x6001882")]
		[Address(RVA = "0x8D6C88", Offset = "0x8D6C88", VA = "0x8D6C88", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001883")]
		[Address(RVA = "0x8D6D00", Offset = "0x8D6D00", VA = "0x8D6D00")]
		public AntialiasingModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003B1")]
	public class BloomModel : PostProcessingModel
	{
		[Serializable]
		[Token(Token = "0x200075A")]
		public struct BloomSettings
		{
			[Token(Token = "0x4002164")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "MinAttribute", RVA = "0x2F6E74", Offset = "0x2F6E74")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F6E74", Offset = "0x2F6E74")]
			public float intensity;

			[Token(Token = "0x4002165")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "MinAttribute", RVA = "0x2F6ED8", Offset = "0x2F6ED8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F6ED8", Offset = "0x2F6ED8")]
			public float threshold;

			[Token(Token = "0x4002166")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F6F50", Offset = "0x2F6F50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F6F50", Offset = "0x2F6F50")]
			public float softKnee;

			[Token(Token = "0x4002167")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F6FA0", Offset = "0x2F6FA0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F6FA0", Offset = "0x2F6FA0")]
			public float radius;

			[Token(Token = "0x4002168")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F6FF4", Offset = "0x2F6FF4")]
			public bool antiFlicker;

			[Token(Token = "0x170003F6")]
			public float thresholdLinear
			{
				[Token(Token = "0x6002491")]
				[Address(RVA = "0x3AB95C", Offset = "0x3AB95C", VA = "0x3AB95C")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6002490")]
				[Address(RVA = "0x3AB954", Offset = "0x3AB954", VA = "0x3AB954")]
				set
				{
				}
			}

			[Token(Token = "0x170003F7")]
			public static BloomSettings defaultSettings
			{
				[Token(Token = "0x6002492")]
				[Address(RVA = "0x8D8C00", Offset = "0x8D8C00", VA = "0x8D8C00")]
				get
				{
					return default(BloomSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x200075B")]
		public struct LensDirtSettings
		{
			[Token(Token = "0x4002169")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F7054", Offset = "0x2F7054")]
			public Texture texture;

			[Token(Token = "0x400216A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "MinAttribute", RVA = "0x2F70B8", Offset = "0x2F70B8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F70B8", Offset = "0x2F70B8")]
			public float intensity;

			[Token(Token = "0x170003F8")]
			public static LensDirtSettings defaultSettings
			{
				[Token(Token = "0x6002493")]
				[Address(RVA = "0x8D8C30", Offset = "0x8D8C30", VA = "0x8D8C30")]
				get
				{
					return default(LensDirtSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x200075C")]
		public struct Settings
		{
			[Token(Token = "0x400216B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public BloomSettings bloom;

			[Token(Token = "0x400216C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public LensDirtSettings lensDirt;

			[Token(Token = "0x170003F9")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6002494")]
				[Address(RVA = "0x8D8AF8", Offset = "0x8D8AF8", VA = "0x8D8AF8")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x40017AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x17000338")]
		public Settings settings
		{
			[Token(Token = "0x6001884")]
			[Address(RVA = "0x8D8A64", Offset = "0x8D8A64", VA = "0x8D8A64")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x6001885")]
			[Address(RVA = "0x8D8A84", Offset = "0x8D8A84", VA = "0x8D8A84")]
			set
			{
			}
		}

		[Token(Token = "0x6001886")]
		[Address(RVA = "0x8D8AB8", Offset = "0x8D8AB8", VA = "0x8D8AB8", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001887")]
		[Address(RVA = "0x8D8B30", Offset = "0x8D8B30", VA = "0x8D8B30")]
		public BloomModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003B2")]
	public class BuiltinDebugViewsModel : PostProcessingModel
	{
		[Serializable]
		[Token(Token = "0x200075D")]
		public struct DepthSettings
		{
			[Token(Token = "0x400216D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F7118", Offset = "0x2F7118")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F7118", Offset = "0x2F7118")]
			public float scale;

			[Token(Token = "0x170003FA")]
			public static DepthSettings defaultSettings
			{
				[Token(Token = "0x6002495")]
				[Address(RVA = "0x8DA868", Offset = "0x8DA868", VA = "0x8DA868")]
				get
				{
					return default(DepthSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x200075E")]
		public struct MotionVectorsSettings
		{
			[Token(Token = "0x400216E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F71A0", Offset = "0x2F71A0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F71A0", Offset = "0x2F71A0")]
			public float sourceOpacity;

			[Token(Token = "0x400216F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F7208", Offset = "0x2F7208")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F7208", Offset = "0x2F7208")]
			public float motionImageOpacity;

			[Token(Token = "0x4002170")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "MinAttribute", RVA = "0x2F7280", Offset = "0x2F7280")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F7280", Offset = "0x2F7280")]
			public float motionImageAmplitude;

			[Token(Token = "0x4002171")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F72CC", Offset = "0x2F72CC")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F72CC", Offset = "0x2F72CC")]
			public float motionVectorsOpacity;

			[Token(Token = "0x4002172")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F733C", Offset = "0x2F733C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F733C", Offset = "0x2F733C")]
			public int motionVectorsResolution;

			[Token(Token = "0x4002173")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "MinAttribute", RVA = "0x2F73A8", Offset = "0x2F73A8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F73A8", Offset = "0x2F73A8")]
			public float motionVectorsAmplitude;

			[Token(Token = "0x170003FB")]
			public static MotionVectorsSettings defaultSettings
			{
				[Token(Token = "0x6002496")]
				[Address(RVA = "0x8DA870", Offset = "0x8DA870", VA = "0x8DA870")]
				get
				{
					return default(MotionVectorsSettings);
				}
			}
		}

		[Token(Token = "0x200075F")]
		public enum Mode
		{
			[Token(Token = "0x4002175")]
			None,
			[Token(Token = "0x4002176")]
			Depth,
			[Token(Token = "0x4002177")]
			Normals,
			[Token(Token = "0x4002178")]
			MotionVectors,
			[Token(Token = "0x4002179")]
			AmbientOcclusion,
			[Token(Token = "0x400217A")]
			EyeAdaptation,
			[Token(Token = "0x400217B")]
			FocusPlane,
			[Token(Token = "0x400217C")]
			PreGradingLog,
			[Token(Token = "0x400217D")]
			LogLut,
			[Token(Token = "0x400217E")]
			UserLut
		}

		[Serializable]
		[Token(Token = "0x2000760")]
		public struct Settings
		{
			[Token(Token = "0x400217F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Mode mode;

			[Token(Token = "0x4002180")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public DepthSettings depth;

			[Token(Token = "0x4002181")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public MotionVectorsSettings motionVectors;

			[Token(Token = "0x170003FC")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6002497")]
				[Address(RVA = "0x8DA7E0", Offset = "0x8DA7E0", VA = "0x8DA7E0")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x40017AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x17000339")]
		public Settings settings
		{
			[Token(Token = "0x6001888")]
			[Address(RVA = "0x8DA71C", Offset = "0x8DA71C", VA = "0x8DA71C")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x6001889")]
			[Address(RVA = "0x8DA738", Offset = "0x8DA738", VA = "0x8DA738")]
			set
			{
			}
		}

		[Token(Token = "0x1700033A")]
		public bool willInterrupt
		{
			[Token(Token = "0x600188A")]
			[Address(RVA = "0x8DA770", Offset = "0x8DA770", VA = "0x8DA770")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600188B")]
		[Address(RVA = "0x8DA798", Offset = "0x8DA798", VA = "0x8DA798", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600188C")]
		[Address(RVA = "0x8D8D00", Offset = "0x8D8D00", VA = "0x8D8D00")]
		public bool IsModeActive(Mode mode)
		{
			return default(bool);
		}

		[Token(Token = "0x600188D")]
		[Address(RVA = "0x8DA820", Offset = "0x8DA820", VA = "0x8DA820")]
		public BuiltinDebugViewsModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003B3")]
	public class ChromaticAberrationModel : PostProcessingModel
	{
		[Serializable]
		[Token(Token = "0x2000761")]
		public struct Settings
		{
			[Token(Token = "0x4002182")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F7408", Offset = "0x2F7408")]
			public Texture2D spectralTexture;

			[Token(Token = "0x4002183")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F745C", Offset = "0x2F745C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F745C", Offset = "0x2F745C")]
			public float intensity;

			[Token(Token = "0x170003FD")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6002498")]
				[Address(RVA = "0x8DAF20", Offset = "0x8DAF20", VA = "0x8DAF20")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x40017B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x1700033B")]
		public Settings settings
		{
			[Token(Token = "0x600188E")]
			[Address(RVA = "0x8DAEE8", Offset = "0x8DAEE8", VA = "0x8DAEE8")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x600188F")]
			[Address(RVA = "0x8DAEFC", Offset = "0x8DAEFC", VA = "0x8DAEFC")]
			set
			{
			}
		}

		[Token(Token = "0x6001890")]
		[Address(RVA = "0x8DAF08", Offset = "0x8DAF08", VA = "0x8DAF08", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001891")]
		[Address(RVA = "0x8DAF38", Offset = "0x8DAF38", VA = "0x8DAF38")]
		public ChromaticAberrationModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003B4")]
	public class ColorGradingModel : PostProcessingModel
	{
		[Token(Token = "0x2000762")]
		public enum Tonemapper
		{
			[Token(Token = "0x4002185")]
			None,
			[Token(Token = "0x4002186")]
			ACES,
			[Token(Token = "0x4002187")]
			Neutral
		}

		[Serializable]
		[Token(Token = "0x2000763")]
		public struct TonemappingSettings
		{
			[Token(Token = "0x4002188")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F74C8", Offset = "0x2F74C8")]
			public Tonemapper tonemapper;

			[Token(Token = "0x4002189")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F74FC", Offset = "0x2F74FC")]
			public float neutralBlackIn;

			[Token(Token = "0x400218A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F751C", Offset = "0x2F751C")]
			public float neutralWhiteIn;

			[Token(Token = "0x400218B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F7538", Offset = "0x2F7538")]
			public float neutralBlackOut;

			[Token(Token = "0x400218C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F7558", Offset = "0x2F7558")]
			public float neutralWhiteOut;

			[Token(Token = "0x400218D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F7574", Offset = "0x2F7574")]
			public float neutralWhiteLevel;

			[Token(Token = "0x400218E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F7594", Offset = "0x2F7594")]
			public float neutralWhiteClip;

			[Token(Token = "0x170003FE")]
			public static TonemappingSettings defaultSettings
			{
				[Token(Token = "0x6002499")]
				[Address(RVA = "0x8DEB90", Offset = "0x8DEB90", VA = "0x8DEB90")]
				get
				{
					return default(TonemappingSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x2000764")]
		public struct BasicSettings
		{
			[Token(Token = "0x400218F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F75B0", Offset = "0x2F75B0")]
			public float postExposure;

			[Token(Token = "0x4002190")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F75E4", Offset = "0x2F75E4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F75E4", Offset = "0x2F75E4")]
			public float temperature;

			[Token(Token = "0x4002191")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F766C", Offset = "0x2F766C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F766C", Offset = "0x2F766C")]
			public float tint;

			[Token(Token = "0x4002192")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F76C4", Offset = "0x2F76C4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F76C4", Offset = "0x2F76C4")]
			public float hueShift;

			[Token(Token = "0x4002193")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F7734", Offset = "0x2F7734")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F7734", Offset = "0x2F7734")]
			public float saturation;

			[Token(Token = "0x4002194")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F77A0", Offset = "0x2F77A0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F77A0", Offset = "0x2F77A0")]
			public float contrast;

			[Token(Token = "0x170003FF")]
			public static BasicSettings defaultSettings
			{
				[Token(Token = "0x600249A")]
				[Address(RVA = "0x8DE024", Offset = "0x8DE024", VA = "0x8DE024")]
				get
				{
					return default(BasicSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x2000765")]
		public struct ChannelMixerSettings
		{
			[Token(Token = "0x4002195")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 red;

			[Token(Token = "0x4002196")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 green;

			[Token(Token = "0x4002197")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3 blue;

			[Token(Token = "0x4002198")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[HideInInspector]
			public int currentEditingChannel;

			[Token(Token = "0x17000400")]
			public static ChannelMixerSettings defaultSettings
			{
				[Token(Token = "0x600249B")]
				[Address(RVA = "0x8DE03C", Offset = "0x8DE03C", VA = "0x8DE03C")]
				get
				{
					return default(ChannelMixerSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x2000766")]
		public struct LogWheelsSettings
		{
			[Token(Token = "0x4002199")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TrackballAttribute", RVA = "0x2F7800", Offset = "0x2F7800")]
			public Color slope;

			[Token(Token = "0x400219A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TrackballAttribute", RVA = "0x2F783C", Offset = "0x2F783C")]
			public Color power;

			[Token(Token = "0x400219B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TrackballAttribute", RVA = "0x2F7878", Offset = "0x2F7878")]
			public Color offset;

			[Token(Token = "0x17000401")]
			public static LogWheelsSettings defaultSettings
			{
				[Token(Token = "0x600249C")]
				[Address(RVA = "0x8DE19C", Offset = "0x8DE19C", VA = "0x8DE19C")]
				get
				{
					return default(LogWheelsSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x2000767")]
		public struct LinearWheelsSettings
		{
			[Token(Token = "0x400219C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TrackballAttribute", RVA = "0x2F78B4", Offset = "0x2F78B4")]
			public Color lift;

			[Token(Token = "0x400219D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TrackballAttribute", RVA = "0x2F78F0", Offset = "0x2F78F0")]
			public Color gamma;

			[Token(Token = "0x400219E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TrackballAttribute", RVA = "0x2F792C", Offset = "0x2F792C")]
			public Color gain;

			[Token(Token = "0x17000402")]
			public static LinearWheelsSettings defaultSettings
			{
				[Token(Token = "0x600249D")]
				[Address(RVA = "0x8DE20C", Offset = "0x8DE20C", VA = "0x8DE20C")]
				get
				{
					return default(LinearWheelsSettings);
				}
			}
		}

		[Token(Token = "0x2000768")]
		public enum ColorWheelMode
		{
			[Token(Token = "0x40021A0")]
			Linear,
			[Token(Token = "0x40021A1")]
			Log
		}

		[Serializable]
		[Token(Token = "0x2000769")]
		public struct ColorWheelsSettings
		{
			[Token(Token = "0x40021A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public ColorWheelMode mode;

			[Token(Token = "0x40021A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[TrackballGroup]
			public LogWheelsSettings log;

			[Token(Token = "0x40021A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[TrackballGroup]
			public LinearWheelsSettings linear;

			[Token(Token = "0x17000403")]
			public static ColorWheelsSettings defaultSettings
			{
				[Token(Token = "0x600249E")]
				[Address(RVA = "0x8DE0FC", Offset = "0x8DE0FC", VA = "0x8DE0FC")]
				get
				{
					return default(ColorWheelsSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x200076A")]
		public struct CurvesSettings
		{
			[Token(Token = "0x40021A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public ColorGradingCurve master;

			[Token(Token = "0x40021A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public ColorGradingCurve red;

			[Token(Token = "0x40021A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public ColorGradingCurve green;

			[Token(Token = "0x40021A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public ColorGradingCurve blue;

			[Token(Token = "0x40021A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ColorGradingCurve hueVShue;

			[Token(Token = "0x40021AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public ColorGradingCurve hueVSsat;

			[Token(Token = "0x40021AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public ColorGradingCurve satVSsat;

			[Token(Token = "0x40021AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public ColorGradingCurve lumVSsat;

			[Token(Token = "0x40021AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[HideInInspector]
			public int e_CurrentEditingCurve;

			[Token(Token = "0x40021AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[HideInInspector]
			public bool e_CurveY;

			[Token(Token = "0x40021AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
			[HideInInspector]
			public bool e_CurveR;

			[Token(Token = "0x40021B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
			[HideInInspector]
			public bool e_CurveG;

			[Token(Token = "0x40021B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
			[HideInInspector]
			public bool e_CurveB;

			[Token(Token = "0x17000404")]
			public static CurvesSettings defaultSettings
			{
				[Token(Token = "0x600249F")]
				[Address(RVA = "0x8DE27C", Offset = "0x8DE27C", VA = "0x8DE27C")]
				get
				{
					return default(CurvesSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x200076B")]
		public struct Settings
		{
			[Token(Token = "0x40021B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public TonemappingSettings tonemapping;

			[Token(Token = "0x40021B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public BasicSettings basic;

			[Token(Token = "0x40021B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public ChannelMixerSettings channelMixer;

			[Token(Token = "0x40021B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public ColorWheelsSettings colorWheels;

			[Token(Token = "0x40021B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			public CurvesSettings curves;

			[Token(Token = "0x17000405")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x60024A0")]
				[Address(RVA = "0x8DDEA8", Offset = "0x8DDEA8", VA = "0x8DDEA8")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x40017B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x40017B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F5C6C", Offset = "0x2F5C6C")]
		private bool <isDirty>k__BackingField;

		[Token(Token = "0x40017B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F5C7C", Offset = "0x2F5C7C")]
		private RenderTexture <bakedLut>k__BackingField;

		[Token(Token = "0x1700033C")]
		public Settings settings
		{
			[Token(Token = "0x6001892")]
			[Address(RVA = "0x8DDDD8", Offset = "0x8DDDD8", VA = "0x8DDDD8")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x6001893")]
			[Address(RVA = "0x8DDDF0", Offset = "0x8DDDF0", VA = "0x8DDDF0")]
			set
			{
			}
		}

		[Token(Token = "0x1700033D")]
		public bool isDirty
		{
			[Token(Token = "0x6001894")]
			[Address(RVA = "0x8DDE40", Offset = "0x8DDE40", VA = "0x8DDE40")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FCB80", Offset = "0x2FCB80")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001895")]
			[Address(RVA = "0x8DDE48", Offset = "0x8DDE48", VA = "0x8DDE48")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FCB90", Offset = "0x2FCB90")]
			internal set
			{
			}
		}

		[Token(Token = "0x1700033E")]
		public RenderTexture bakedLut
		{
			[Token(Token = "0x6001896")]
			[Address(RVA = "0x8DDE50", Offset = "0x8DDE50", VA = "0x8DDE50")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FCBA0", Offset = "0x2FCBA0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001897")]
			[Address(RVA = "0x8DDE58", Offset = "0x8DDE58", VA = "0x8DDE58")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FCBB0", Offset = "0x2FCBB0")]
			internal set
			{
			}
		}

		[Token(Token = "0x6001898")]
		[Address(RVA = "0x8DDE60", Offset = "0x8DDE60", VA = "0x8DDE60", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001899")]
		[Address(RVA = "0x8DDFD8", Offset = "0x8DDFD8", VA = "0x8DDFD8", Slot = "5")]
		public override void OnValidate()
		{
		}

		[Token(Token = "0x600189A")]
		[Address(RVA = "0x8DDFE4", Offset = "0x8DDFE4", VA = "0x8DDFE4")]
		public ColorGradingModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003B5")]
	public class DepthOfFieldModel : PostProcessingModel
	{
		[Token(Token = "0x200076C")]
		public enum KernelSize
		{
			[Token(Token = "0x40021B8")]
			Small,
			[Token(Token = "0x40021B9")]
			Medium,
			[Token(Token = "0x40021BA")]
			Large,
			[Token(Token = "0x40021BB")]
			VeryLarge
		}

		[Serializable]
		[Token(Token = "0x200076D")]
		public struct Settings
		{
			[Token(Token = "0x40021BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "MinAttribute", RVA = "0x2F79D8", Offset = "0x2F79D8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F79D8", Offset = "0x2F79D8")]
			public float focusDistance;

			[Token(Token = "0x40021BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F7A40", Offset = "0x2F7A40")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F7A40", Offset = "0x2F7A40")]
			public float aperture;

			[Token(Token = "0x40021BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F7A94", Offset = "0x2F7A94")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F7A94", Offset = "0x2F7A94")]
			public float focalLength;

			[Token(Token = "0x40021BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F7AE8", Offset = "0x2F7AE8")]
			public bool useCameraFov;

			[Token(Token = "0x40021C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F7B1C", Offset = "0x2F7B1C")]
			public KernelSize kernelSize;

			[Token(Token = "0x17000406")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x60024A1")]
				[Address(RVA = "0x8DFF98", Offset = "0x8DFF98", VA = "0x8DFF98")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x40017B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x1700033F")]
		public Settings settings
		{
			[Token(Token = "0x600189B")]
			[Address(RVA = "0x8DFF24", Offset = "0x8DFF24", VA = "0x8DFF24")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x600189C")]
			[Address(RVA = "0x8DFF3C", Offset = "0x8DFF3C", VA = "0x8DFF3C")]
			set
			{
			}
		}

		[Token(Token = "0x600189D")]
		[Address(RVA = "0x8DFF68", Offset = "0x8DFF68", VA = "0x8DFF68", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600189E")]
		[Address(RVA = "0x8DFFD8", Offset = "0x8DFFD8", VA = "0x8DFFD8")]
		public DepthOfFieldModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003B6")]
	public class DitheringModel : PostProcessingModel
	{
		[Serializable]
		[Token(Token = "0x200076E")]
		public struct Settings
		{
			[Token(Token = "0x17000407")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x60024A2")]
				[Address(RVA = "0x8E05A4", Offset = "0x8E05A4", VA = "0x8E05A4")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x40017B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x17000340")]
		public Settings settings
		{
			[Token(Token = "0x600189F")]
			[Address(RVA = "0x8E0588", Offset = "0x8E0588", VA = "0x8E0588")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x60018A0")]
			[Address(RVA = "0x8E0590", Offset = "0x8E0590", VA = "0x8E0590")]
			set
			{
			}
		}

		[Token(Token = "0x60018A1")]
		[Address(RVA = "0x8E0598", Offset = "0x8E0598", VA = "0x8E0598", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60018A2")]
		[Address(RVA = "0x8E05AC", Offset = "0x8E05AC", VA = "0x8E05AC")]
		public DitheringModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003B7")]
	public class EyeAdaptationModel : PostProcessingModel
	{
		[Token(Token = "0x200076F")]
		public enum EyeAdaptationType
		{
			[Token(Token = "0x40021C2")]
			Progressive,
			[Token(Token = "0x40021C3")]
			Fixed
		}

		[Serializable]
		[Token(Token = "0x2000770")]
		public struct Settings
		{
			[Token(Token = "0x40021C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F7B50", Offset = "0x2F7B50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F7B50", Offset = "0x2F7B50")]
			public float lowPercent;

			[Token(Token = "0x40021C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F7BA4", Offset = "0x2F7BA4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F7BA4", Offset = "0x2F7BA4")]
			public float highPercent;

			[Token(Token = "0x40021C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F7BF8", Offset = "0x2F7BF8")]
			public float minLuminance;

			[Token(Token = "0x40021C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F7C2C", Offset = "0x2F7C2C")]
			public float maxLuminance;

			[Token(Token = "0x40021C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "MinAttribute", RVA = "0x2F7C60", Offset = "0x2F7C60")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F7C60", Offset = "0x2F7C60")]
			public float keyValue;

			[Token(Token = "0x40021C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F7CAC", Offset = "0x2F7CAC")]
			public bool dynamicKeyValue;

			[Token(Token = "0x40021CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F7CE0", Offset = "0x2F7CE0")]
			public EyeAdaptationType adaptationType;

			[Token(Token = "0x40021CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "MinAttribute", RVA = "0x2F7D14", Offset = "0x2F7D14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F7D14", Offset = "0x2F7D14")]
			public float speedUp;

			[Token(Token = "0x40021CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "MinAttribute", RVA = "0x2F7D90", Offset = "0x2F7D90")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F7D90", Offset = "0x2F7D90")]
			public float speedDown;

			[Token(Token = "0x40021CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F7E0C", Offset = "0x2F7E0C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F7E0C", Offset = "0x2F7E0C")]
			public int logMin;

			[Token(Token = "0x40021CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F7E64", Offset = "0x2F7E64")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F7E64", Offset = "0x2F7E64")]
			public int logMax;

			[Token(Token = "0x17000408")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x60024A3")]
				[Address(RVA = "0x8E1CB0", Offset = "0x8E1CB0", VA = "0x8E1CB0")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x40017B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x17000341")]
		public Settings settings
		{
			[Token(Token = "0x60018A3")]
			[Address(RVA = "0x8E1BEC", Offset = "0x8E1BEC", VA = "0x8E1BEC")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x60018A4")]
			[Address(RVA = "0x8E1C0C", Offset = "0x8E1C0C", VA = "0x8E1C0C")]
			set
			{
			}
		}

		[Token(Token = "0x60018A5")]
		[Address(RVA = "0x8E1C58", Offset = "0x8E1C58", VA = "0x8E1C58", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60018A6")]
		[Address(RVA = "0x8E1D10", Offset = "0x8E1D10", VA = "0x8E1D10")]
		public EyeAdaptationModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003B8")]
	public class FogModel : PostProcessingModel
	{
		[Serializable]
		[Token(Token = "0x2000771")]
		public struct Settings
		{
			[Token(Token = "0x40021CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F7EB8", Offset = "0x2F7EB8")]
			public bool excludeSkybox;

			[Token(Token = "0x17000409")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x60024A4")]
				[Address(RVA = "0x8E26CC", Offset = "0x8E26CC", VA = "0x8E26CC")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x40017B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x17000342")]
		public Settings settings
		{
			[Token(Token = "0x60018A7")]
			[Address(RVA = "0x8E26B0", Offset = "0x8E26B0", VA = "0x8E26B0")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x60018A8")]
			[Address(RVA = "0x8E26B8", Offset = "0x8E26B8", VA = "0x8E26B8")]
			set
			{
			}
		}

		[Token(Token = "0x60018A9")]
		[Address(RVA = "0x8E26C0", Offset = "0x8E26C0", VA = "0x8E26C0", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60018AA")]
		[Address(RVA = "0x8E26D4", Offset = "0x8E26D4", VA = "0x8E26D4")]
		public FogModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003B9")]
	public class GrainModel : PostProcessingModel
	{
		[Serializable]
		[Token(Token = "0x2000772")]
		public struct Settings
		{
			[Token(Token = "0x40021D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F7F08", Offset = "0x2F7F08")]
			public bool colored;

			[Token(Token = "0x40021D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F7F58", Offset = "0x2F7F58")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F7F58", Offset = "0x2F7F58")]
			public float intensity;

			[Token(Token = "0x40021D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F7FD4", Offset = "0x2F7FD4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F7FD4", Offset = "0x2F7FD4")]
			public float size;

			[Token(Token = "0x40021D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F803C", Offset = "0x2F803C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F803C", Offset = "0x2F803C")]
			public float luminanceContribution;

			[Token(Token = "0x1700040A")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x60024A5")]
				[Address(RVA = "0x8E3470", Offset = "0x8E3470", VA = "0x8E3470")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x40017B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x17000343")]
		public Settings settings
		{
			[Token(Token = "0x60018AB")]
			[Address(RVA = "0x8E3428", Offset = "0x8E3428", VA = "0x8E3428")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x60018AC")]
			[Address(RVA = "0x8E3438", Offset = "0x8E3438", VA = "0x8E3438")]
			set
			{
			}
		}

		[Token(Token = "0x60018AD")]
		[Address(RVA = "0x8E3448", Offset = "0x8E3448", VA = "0x8E3448", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60018AE")]
		[Address(RVA = "0x8E34A0", Offset = "0x8E34A0", VA = "0x8E34A0")]
		public GrainModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003BA")]
	public class MotionBlurModel : PostProcessingModel
	{
		[Serializable]
		[Token(Token = "0x2000773")]
		public struct Settings
		{
			[Token(Token = "0x40021D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F808C", Offset = "0x2F808C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F808C", Offset = "0x2F808C")]
			public float shutterAngle;

			[Token(Token = "0x40021D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F80E0", Offset = "0x2F80E0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F80E0", Offset = "0x2F80E0")]
			public int sampleCount;

			[Token(Token = "0x40021D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F8134", Offset = "0x2F8134")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F8134", Offset = "0x2F8134")]
			public float frameBlending;

			[Token(Token = "0x1700040B")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x60024A6")]
				[Address(RVA = "0x8E763C", Offset = "0x8E763C", VA = "0x8E763C")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x40017B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x17000344")]
		public Settings settings
		{
			[Token(Token = "0x60018AF")]
			[Address(RVA = "0x8E75FC", Offset = "0x8E75FC", VA = "0x8E75FC")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x60018B0")]
			[Address(RVA = "0x8E7610", Offset = "0x8E7610", VA = "0x8E7610")]
			set
			{
			}
		}

		[Token(Token = "0x60018B1")]
		[Address(RVA = "0x8E761C", Offset = "0x8E761C", VA = "0x8E761C", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60018B2")]
		[Address(RVA = "0x8E7658", Offset = "0x8E7658", VA = "0x8E7658")]
		public MotionBlurModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003BB")]
	public class ScreenSpaceReflectionModel : PostProcessingModel
	{
		[Token(Token = "0x2000774")]
		public enum SSRResolution
		{
			[Token(Token = "0x40021D8")]
			High = 0,
			[Token(Token = "0x40021D9")]
			Low = 2
		}

		[Token(Token = "0x2000775")]
		public enum SSRReflectionBlendType
		{
			[Token(Token = "0x40021DB")]
			PhysicallyBased,
			[Token(Token = "0x40021DC")]
			Additive
		}

		[Serializable]
		[Token(Token = "0x2000776")]
		public struct IntensitySettings
		{
			[Token(Token = "0x40021DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F8184", Offset = "0x2F8184")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F8184", Offset = "0x2F8184")]
			public float reflectionMultiplier;

			[Token(Token = "0x40021DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F81D4", Offset = "0x2F81D4")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F81D4", Offset = "0x2F81D4")]
			public float fadeDistance;

			[Token(Token = "0x40021DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F8258", Offset = "0x2F8258")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F8258", Offset = "0x2F8258")]
			public float fresnelFade;

			[Token(Token = "0x40021E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F82A8", Offset = "0x2F82A8")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F82A8", Offset = "0x2F82A8")]
			public float fresnelFadePower;
		}

		[Serializable]
		[Token(Token = "0x2000777")]
		public struct ReflectionSettings
		{
			[Token(Token = "0x40021E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F8300", Offset = "0x2F8300")]
			public SSRReflectionBlendType blendType;

			[Token(Token = "0x40021E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F8360", Offset = "0x2F8360")]
			public SSRResolution reflectionQuality;

			[Token(Token = "0x40021E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F83C4", Offset = "0x2F83C4")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F83C4", Offset = "0x2F83C4")]
			public float maxDistance;

			[Token(Token = "0x40021E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F8440", Offset = "0x2F8440")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F8440", Offset = "0x2F8440")]
			public int iterationCount;

			[Token(Token = "0x40021E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F84A8", Offset = "0x2F84A8")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F84A8", Offset = "0x2F84A8")]
			public int stepSize;

			[Token(Token = "0x40021E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F84FC", Offset = "0x2F84FC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F84FC", Offset = "0x2F84FC")]
			public float widthModifier;

			[Token(Token = "0x40021E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F8554", Offset = "0x2F8554")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F8554", Offset = "0x2F8554")]
			public float reflectionBlur;

			[Token(Token = "0x40021E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F85BC", Offset = "0x2F85BC")]
			public bool reflectBackfaces;
		}

		[Serializable]
		[Token(Token = "0x2000778")]
		public struct ScreenEdgeMask
		{
			[Token(Token = "0x40021E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F85F0", Offset = "0x2F85F0")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F85F0", Offset = "0x2F85F0")]
			public float intensity;
		}

		[Serializable]
		[Token(Token = "0x2000779")]
		public struct Settings
		{
			[Token(Token = "0x40021EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public ReflectionSettings reflection;

			[Token(Token = "0x40021EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public IntensitySettings intensity;

			[Token(Token = "0x40021EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public ScreenEdgeMask screenEdgeMask;

			[Token(Token = "0x1700040C")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x60024A7")]
				[Address(RVA = "0x8EDF90", Offset = "0x8EDF90", VA = "0x8EDF90")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x40017BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x17000345")]
		public Settings settings
		{
			[Token(Token = "0x60018B3")]
			[Address(RVA = "0x8EDE9C", Offset = "0x8EDE9C", VA = "0x8EDE9C")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x60018B4")]
			[Address(RVA = "0x8EDEC4", Offset = "0x8EDEC4", VA = "0x8EDEC4")]
			set
			{
			}
		}

		[Token(Token = "0x60018B5")]
		[Address(RVA = "0x8EDF20", Offset = "0x8EDF20", VA = "0x8EDF20", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60018B6")]
		[Address(RVA = "0x8EB400", Offset = "0x8EB400", VA = "0x8EB400")]
		public ScreenSpaceReflectionModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003BC")]
	public class UserLutModel : PostProcessingModel
	{
		[Serializable]
		[Token(Token = "0x200077A")]
		public struct Settings
		{
			[Token(Token = "0x40021ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F8640", Offset = "0x2F8640")]
			public Texture2D lut;

			[Token(Token = "0x40021EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F86A0", Offset = "0x2F86A0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F86A0", Offset = "0x2F86A0")]
			public float contribution;

			[Token(Token = "0x1700040D")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x60024A8")]
				[Address(RVA = "0x8EF2A8", Offset = "0x8EF2A8", VA = "0x8EF2A8")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x40017BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x17000346")]
		public Settings settings
		{
			[Token(Token = "0x60018B7")]
			[Address(RVA = "0x8EF274", Offset = "0x8EF274", VA = "0x8EF274")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x60018B8")]
			[Address(RVA = "0x8EF288", Offset = "0x8EF288", VA = "0x8EF288")]
			set
			{
			}
		}

		[Token(Token = "0x60018B9")]
		[Address(RVA = "0x8EF294", Offset = "0x8EF294", VA = "0x8EF294", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60018BA")]
		[Address(RVA = "0x8EB478", Offset = "0x8EB478", VA = "0x8EB478")]
		public UserLutModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003BD")]
	public class VignetteModel : PostProcessingModel
	{
		[Token(Token = "0x200077B")]
		public enum Mode
		{
			[Token(Token = "0x40021F0")]
			Classic,
			[Token(Token = "0x40021F1")]
			Masked
		}

		[Serializable]
		[Token(Token = "0x200077C")]
		public struct Settings
		{
			[Token(Token = "0x40021F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F86F0", Offset = "0x2F86F0")]
			public Mode mode;

			[Token(Token = "0x40021F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x2F8724", Offset = "0x2F8724")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F8724", Offset = "0x2F8724")]
			public Color color;

			[Token(Token = "0x40021F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F87A0", Offset = "0x2F87A0")]
			public Vector2 center;

			[Token(Token = "0x40021F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F880C", Offset = "0x2F880C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F880C", Offset = "0x2F880C")]
			public float intensity;

			[Token(Token = "0x40021F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F885C", Offset = "0x2F885C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F885C", Offset = "0x2F885C")]
			public float smoothness;

			[Token(Token = "0x40021F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F88CC", Offset = "0x2F88CC")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F88CC", Offset = "0x2F88CC")]
			public float roundness;

			[Token(Token = "0x40021F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F8944", Offset = "0x2F8944")]
			public Texture mask;

			[Token(Token = "0x40021F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x2F89A0", Offset = "0x2F89A0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F89A0", Offset = "0x2F89A0")]
			public float opacity;

			[Token(Token = "0x40021FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F89F8", Offset = "0x2F89F8")]
			public bool rounded;

			[Token(Token = "0x1700040E")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x60024A9")]
				[Address(RVA = "0x8EF964", Offset = "0x8EF964", VA = "0x8EF964")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x40017BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x17000347")]
		public Settings settings
		{
			[Token(Token = "0x60018BB")]
			[Address(RVA = "0x8EF888", Offset = "0x8EF888", VA = "0x8EF888")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x60018BC")]
			[Address(RVA = "0x8EF8B0", Offset = "0x8EF8B0", VA = "0x8EF8B0")]
			set
			{
			}
		}

		[Token(Token = "0x60018BD")]
		[Address(RVA = "0x8EF910", Offset = "0x8EF910", VA = "0x8EF910", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60018BE")]
		[Address(RVA = "0x8EB490", Offset = "0x8EB490", VA = "0x8EB490")]
		public VignetteModel()
		{
		}
	}
	[Token(Token = "0x20003BE")]
	[ImageEffectAllowedInSceneView]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x2EA564", Offset = "0x2EA564")]
	[DisallowMultipleComponent]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x2EA564", Offset = "0x2EA564")]
	public class PostProcessingBehaviour : MonoBehaviour
	{
		[Token(Token = "0x40017BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public PostProcessingProfile profile;

		[Token(Token = "0x40017BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Func<Vector2, Matrix4x4> jitteredMatrixFunc;

		[Token(Token = "0x40017BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Dictionary<Type, KeyValuePair<CameraEvent, CommandBuffer>> m_CommandBuffers;

		[Token(Token = "0x40017C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<PostProcessingComponentBase> m_Components;

		[Token(Token = "0x40017C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Dictionary<PostProcessingComponentBase, bool> m_ComponentStates;

		[Token(Token = "0x40017C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private MaterialFactory m_MaterialFactory;

		[Token(Token = "0x40017C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private RenderTextureFactory m_RenderTextureFactory;

		[Token(Token = "0x40017C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private PostProcessingContext m_Context;

		[Token(Token = "0x40017C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Camera m_Camera;

		[Token(Token = "0x40017C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private PostProcessingProfile m_PreviousProfile;

		[Token(Token = "0x40017C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool m_RenderingInSceneView;

		[Token(Token = "0x40017C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private BuiltinDebugViewsComponent m_DebugViews;

		[Token(Token = "0x40017C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private AmbientOcclusionComponent m_AmbientOcclusion;

		[Token(Token = "0x40017CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ScreenSpaceReflectionComponent m_ScreenSpaceReflection;

		[Token(Token = "0x40017CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private FogComponent m_FogComponent;

		[Token(Token = "0x40017CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private MotionBlurComponent m_MotionBlur;

		[Token(Token = "0x40017CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private TaaComponent m_Taa;

		[Token(Token = "0x40017CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private EyeAdaptationComponent m_EyeAdaptation;

		[Token(Token = "0x40017CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private DepthOfFieldComponent m_DepthOfField;

		[Token(Token = "0x40017D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private BloomComponent m_Bloom;

		[Token(Token = "0x40017D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private ChromaticAberrationComponent m_ChromaticAberration;

		[Token(Token = "0x40017D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ColorGradingComponent m_ColorGrading;

		[Token(Token = "0x40017D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private UserLutComponent m_UserLut;

		[Token(Token = "0x40017D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GrainComponent m_Grain;

		[Token(Token = "0x40017D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private VignetteComponent m_Vignette;

		[Token(Token = "0x40017D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private DitheringComponent m_Dithering;

		[Token(Token = "0x40017D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private FxaaComponent m_Fxaa;

		[Token(Token = "0x40017D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private List<PostProcessingComponentBase> m_ComponentsToEnable;

		[Token(Token = "0x40017D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private List<PostProcessingComponentBase> m_ComponentsToDisable;

		[Token(Token = "0x60018BF")]
		[Address(RVA = "0x8E767C", Offset = "0x8E767C", VA = "0x8E767C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60018C0")]
		[Address(RVA = "0x8E7F1C", Offset = "0x8E7F1C", VA = "0x8E7F1C")]
		private void OnPreCull()
		{
		}

		[Token(Token = "0x60018C1")]
		[Address(RVA = "0x8E930C", Offset = "0x8E930C", VA = "0x8E930C")]
		private void OnPreRender()
		{
		}

		[Token(Token = "0x60018C2")]
		[Address(RVA = "0x8E943C", Offset = "0x8E943C", VA = "0x8E943C")]
		private void OnPostRender()
		{
		}

		[Token(Token = "0x60018C3")]
		[Address(RVA = "0x8E95CC", Offset = "0x8E95CC", VA = "0x8E95CC")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60018C4")]
		[Address(RVA = "0x8EA6F0", Offset = "0x8EA6F0", VA = "0x8EA6F0")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60018C5")]
		[Address(RVA = "0x8EAB28", Offset = "0x8EAB28", VA = "0x8EAB28")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60018C6")]
		[Address(RVA = "0x8EADB8", Offset = "0x8EADB8", VA = "0x8EADB8")]
		public void ResetTemporalEffects()
		{
		}

		[Token(Token = "0x60018C7")]
		[Address(RVA = "0x8E8954", Offset = "0x8E8954", VA = "0x8E8954")]
		private void CheckObservers()
		{
		}

		[Token(Token = "0x60018C8")]
		[Address(RVA = "0x8E87E0", Offset = "0x8E87E0", VA = "0x8E87E0")]
		private void DisableComponents()
		{
		}

		[Token(Token = "0x60018C9")]
		private CommandBuffer AddCommandBuffer<T>(CameraEvent evt, string name) where T : PostProcessingModel
		{
			return null;
		}

		[Token(Token = "0x60018CA")]
		private void RemoveCommandBuffer<T>() where T : PostProcessingModel
		{
		}

		[Token(Token = "0x60018CB")]
		private CommandBuffer GetCommandBuffer<T>(CameraEvent evt, string name) where T : PostProcessingModel
		{
			return null;
		}

		[Token(Token = "0x60018CC")]
		private void TryExecuteCommandBuffer<T>(PostProcessingComponentCommandBuffer<T> component) where T : PostProcessingModel
		{
		}

		[Token(Token = "0x60018CD")]
		private bool TryPrepareUberImageEffect<T>(PostProcessingComponentRenderTexture<T> component, Material material) where T : PostProcessingModel
		{
			return default(bool);
		}

		[Token(Token = "0x60018CE")]
		private T AddComponent<T>(T component) where T : PostProcessingComponentBase
		{
			return null;
		}

		[Token(Token = "0x60018CF")]
		[Address(RVA = "0x8EAE34", Offset = "0x8EAE34", VA = "0x8EAE34")]
		public PostProcessingBehaviour()
		{
		}
	}
	[Token(Token = "0x20003BF")]
	public abstract class PostProcessingComponentBase
	{
		[Token(Token = "0x40017DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PostProcessingContext context;

		[Token(Token = "0x17000348")]
		public abstract bool active
		{
			[Token(Token = "0x60018D1")]
			get;
		}

		[Token(Token = "0x60018D0")]
		[Address(RVA = "0x8EAED8", Offset = "0x8EAED8", VA = "0x8EAED8", Slot = "4")]
		public virtual DepthTextureMode GetCameraFlags()
		{
			return default(DepthTextureMode);
		}

		[Token(Token = "0x60018D2")]
		[Address(RVA = "0x8EAEE0", Offset = "0x8EAEE0", VA = "0x8EAEE0", Slot = "6")]
		public virtual void OnEnable()
		{
		}

		[Token(Token = "0x60018D3")]
		[Address(RVA = "0x8EAEE4", Offset = "0x8EAEE4", VA = "0x8EAEE4", Slot = "7")]
		public virtual void OnDisable()
		{
		}

		[Token(Token = "0x60018D4")]
		public abstract PostProcessingModel GetModel();

		[Token(Token = "0x60018D5")]
		[Address(RVA = "0x8EAEE8", Offset = "0x8EAEE8", VA = "0x8EAEE8")]
		protected PostProcessingComponentBase()
		{
		}
	}
	[Token(Token = "0x20003C0")]
	public abstract class PostProcessingComponent<T> : PostProcessingComponentBase where T : PostProcessingModel
	{
		[Token(Token = "0x40017DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F5D1C", Offset = "0x2F5D1C")]
		private T <model>k__BackingField;

		[Token(Token = "0x17000349")]
		public T model
		{
			[Token(Token = "0x60018D6")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FCBC0", Offset = "0x2FCBC0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60018D7")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FCBD0", Offset = "0x2FCBD0")]
			internal set
			{
			}
		}

		[Token(Token = "0x60018D8")]
		public virtual void Init(PostProcessingContext pcontext, T pmodel)
		{
		}

		[Token(Token = "0x60018D9")]
		public override PostProcessingModel GetModel()
		{
			return null;
		}

		[Token(Token = "0x60018DA")]
		protected PostProcessingComponent()
		{
		}
	}
	[Token(Token = "0x20003C1")]
	public abstract class PostProcessingComponentCommandBuffer<T> : PostProcessingComponent<T> where T : PostProcessingModel
	{
		[Token(Token = "0x60018DB")]
		public abstract CameraEvent GetCameraEvent();

		[Token(Token = "0x60018DC")]
		public abstract string GetName();

		[Token(Token = "0x60018DD")]
		public abstract void PopulateCommandBuffer(CommandBuffer cb);

		[Token(Token = "0x60018DE")]
		protected PostProcessingComponentCommandBuffer()
		{
		}
	}
	[Token(Token = "0x20003C2")]
	public abstract class PostProcessingComponentRenderTexture<T> : PostProcessingComponent<T> where T : PostProcessingModel
	{
		[Token(Token = "0x60018DF")]
		public virtual void Prepare(Material material)
		{
		}

		[Token(Token = "0x60018E0")]
		protected PostProcessingComponentRenderTexture()
		{
		}
	}
	[Token(Token = "0x20003C3")]
	public class PostProcessingContext
	{
		[Token(Token = "0x40017DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PostProcessingProfile profile;

		[Token(Token = "0x40017DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Camera camera;

		[Token(Token = "0x40017DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MaterialFactory materialFactory;

		[Token(Token = "0x40017DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public RenderTextureFactory renderTextureFactory;

		[Token(Token = "0x40017E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2F5D2C", Offset = "0x2F5D2C")]
		private bool <interrupted>k__BackingField;

		[Token(Token = "0x1700034A")]
		public bool interrupted
		{
			[Token(Token = "0x60018E1")]
			[Address(RVA = "0x8EAEF0", Offset = "0x8EAEF0", VA = "0x8EAEF0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FCBE0", Offset = "0x2FCBE0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60018E2")]
			[Address(RVA = "0x8EAEF8", Offset = "0x8EAEF8", VA = "0x8EAEF8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2FCBF0", Offset = "0x2FCBF0")]
			private set
			{
			}
		}

		[Token(Token = "0x1700034B")]
		public bool isGBufferAvailable
		{
			[Token(Token = "0x60018E5")]
			[Address(RVA = "0x8D8FE0", Offset = "0x8D8FE0", VA = "0x8D8FE0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700034C")]
		public bool isHdr
		{
			[Token(Token = "0x60018E6")]
			[Address(RVA = "0x8E2518", Offset = "0x8E2518", VA = "0x8E2518")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700034D")]
		public int width
		{
			[Token(Token = "0x60018E7")]
			[Address(RVA = "0x8D8488", Offset = "0x8D8488", VA = "0x8D8488")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700034E")]
		public int height
		{
			[Token(Token = "0x60018E8")]
			[Address(RVA = "0x8D84B4", Offset = "0x8D84B4", VA = "0x8D84B4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700034F")]
		public Rect viewport
		{
			[Token(Token = "0x60018E9")]
			[Address(RVA = "0x8DD914", Offset = "0x8DD914", VA = "0x8DD914")]
			get
			{
				return default(Rect);
			}
		}

		[Token(Token = "0x60018E3")]
		[Address(RVA = "0x8D9C98", Offset = "0x8D9C98", VA = "0x8D9C98")]
		public void Interrupt()
		{
		}

		[Token(Token = "0x60018E4")]
		[Address(RVA = "0x8E87C8", Offset = "0x8E87C8", VA = "0x8E87C8")]
		public PostProcessingContext Reset()
		{
			return null;
		}

		[Token(Token = "0x60018EA")]
		[Address(RVA = "0x8E7D38", Offset = "0x8E7D38", VA = "0x8E7D38")]
		public PostProcessingContext()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003C4")]
	public abstract class PostProcessingModel
	{
		[Token(Token = "0x40017E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[SerializeField]
		[AttributeAttribute(Name = "GetSetAttribute", RVA = "0x2F5D3C", Offset = "0x2F5D3C")]
		private bool m_Enabled;

		[Token(Token = "0x17000350")]
		public bool enabled
		{
			[Token(Token = "0x60018EB")]
			[Address(RVA = "0x8EAF00", Offset = "0x8EAF00", VA = "0x8EAF00")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60018EC")]
			[Address(RVA = "0x8EAF08", Offset = "0x8EAF08", VA = "0x8EAF08")]
			set
			{
			}
		}

		[Token(Token = "0x60018ED")]
		public abstract void Reset();

		[Token(Token = "0x60018EE")]
		[Address(RVA = "0x8EAF24", Offset = "0x8EAF24", VA = "0x8EAF24", Slot = "5")]
		public virtual void OnValidate()
		{
		}

		[Token(Token = "0x60018EF")]
		[Address(RVA = "0x8D6C40", Offset = "0x8D6C40", VA = "0x8D6C40")]
		protected PostProcessingModel()
		{
		}
	}
	[Token(Token = "0x20003C5")]
	public class PostProcessingProfile : ScriptableObject
	{
		[Token(Token = "0x40017E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public BuiltinDebugViewsModel debugViews;

		[Token(Token = "0x40017E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FogModel fog;

		[Token(Token = "0x40017E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public AntialiasingModel antialiasing;

		[Token(Token = "0x40017E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AmbientOcclusionModel ambientOcclusion;

		[Token(Token = "0x40017E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public ScreenSpaceReflectionModel screenSpaceReflection;

		[Token(Token = "0x40017E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DepthOfFieldModel depthOfField;

		[Token(Token = "0x40017E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public MotionBlurModel motionBlur;

		[Token(Token = "0x40017E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EyeAdaptationModel eyeAdaptation;

		[Token(Token = "0x40017EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public BloomModel bloom;

		[Token(Token = "0x40017EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ColorGradingModel colorGrading;

		[Token(Token = "0x40017EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public UserLutModel userLut;

		[Token(Token = "0x40017ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ChromaticAberrationModel chromaticAberration;

		[Token(Token = "0x40017EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public GrainModel grain;

		[Token(Token = "0x40017EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public VignetteModel vignette;

		[Token(Token = "0x40017F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public DitheringModel dithering;

		[Token(Token = "0x60018F0")]
		[Address(RVA = "0x8EAF28", Offset = "0x8EAF28", VA = "0x8EAF28")]
		public PostProcessingProfile()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003C6")]
	public sealed class ColorGradingCurve
	{
		[Token(Token = "0x40017F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AnimationCurve curve;

		[Token(Token = "0x40017F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private bool m_Loop;

		[Token(Token = "0x40017F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private float m_ZeroValue;

		[Token(Token = "0x40017F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private float m_Range;

		[Token(Token = "0x40017F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private AnimationCurve m_InternalLoopingCurve;

		[Token(Token = "0x60018F1")]
		[Address(RVA = "0x8DDD7C", Offset = "0x8DDD7C", VA = "0x8DDD7C")]
		public ColorGradingCurve(AnimationCurve curve, float zeroValue, bool loop, Vector2 bounds)
		{
		}

		[Token(Token = "0x60018F2")]
		[Address(RVA = "0x8DC200", Offset = "0x8DC200", VA = "0x8DC200")]
		public void Cache()
		{
		}

		[Token(Token = "0x60018F3")]
		[Address(RVA = "0x8DC4B4", Offset = "0x8DC4B4", VA = "0x8DC4B4")]
		public float Evaluate(float t)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20003C7")]
	public static class GraphicsUtils
	{
		[Token(Token = "0x40017F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Texture2D s_WhiteTexture;

		[Token(Token = "0x40017F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static Mesh s_Quad;

		[Token(Token = "0x17000351")]
		public static bool isLinearColorSpace
		{
			[Token(Token = "0x60018F4")]
			[Address(RVA = "0x8E24FC", Offset = "0x8E24FC", VA = "0x8E24FC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000352")]
		public static bool supportsDX11
		{
			[Token(Token = "0x60018F5")]
			[Address(RVA = "0x8E34C8", Offset = "0x8E34C8", VA = "0x8E34C8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000353")]
		public static Texture2D whiteTexture
		{
			[Token(Token = "0x60018F6")]
			[Address(RVA = "0x8E34F0", Offset = "0x8E34F0", VA = "0x8E34F0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000354")]
		public static Mesh quad
		{
			[Token(Token = "0x60018F7")]
			[Address(RVA = "0x8E36A8", Offset = "0x8E36A8", VA = "0x8E36A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018F8")]
		[Address(RVA = "0x8E3B98", Offset = "0x8E3B98", VA = "0x8E3B98")]
		public static void Blit(Material material, int pass)
		{
		}

		[Token(Token = "0x60018F9")]
		[Address(RVA = "0x8E3C90", Offset = "0x8E3C90", VA = "0x8E3C90")]
		public static void ClearAndBlit(Texture source, RenderTexture destination, Material material, int pass, bool clearColor = true, bool clearDepth = false)
		{
		}

		[Token(Token = "0x60018FA")]
		[Address(RVA = "0x8DA504", Offset = "0x8DA504", VA = "0x8DA504")]
		public static void Destroy(Object obj)
		{
		}

		[Token(Token = "0x60018FB")]
		[Address(RVA = "0x8E3E78", Offset = "0x8E3E78", VA = "0x8E3E78")]
		public static void Dispose()
		{
		}
	}
	[Token(Token = "0x20003C8")]
	public sealed class MaterialFactory : IDisposable
	{
		[Token(Token = "0x40017F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private Dictionary<string, Material> m_Materials;

		[Token(Token = "0x60018FC")]
		[Address(RVA = "0x8E3EDC", Offset = "0x8E3EDC", VA = "0x8E3EDC")]
		public MaterialFactory()
		{
		}

		[Token(Token = "0x60018FD")]
		[Address(RVA = "0x8D81F0", Offset = "0x8D81F0", VA = "0x8D81F0")]
		public Material Get(string shaderName)
		{
			return null;
		}

		[Token(Token = "0x60018FE")]
		[Address(RVA = "0x8E3F68", Offset = "0x8E3F68", VA = "0x8E3F68", Slot = "4")]
		public void Dispose()
		{
		}
	}
	[Token(Token = "0x20003C9")]
	public sealed class RenderTextureFactory : IDisposable
	{
		[Token(Token = "0x40017F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private HashSet<RenderTexture> m_TemporaryRTs;

		[Token(Token = "0x60018FF")]
		[Address(RVA = "0x8E7CAC", Offset = "0x8E7CAC", VA = "0x8E7CAC")]
		public RenderTextureFactory()
		{
		}

		[Token(Token = "0x6001900")]
		[Address(RVA = "0x8E9D1C", Offset = "0x8E9D1C", VA = "0x8E9D1C")]
		public RenderTexture Get(RenderTexture baseRenderTexture)
		{
			return null;
		}

		[Token(Token = "0x6001901")]
		[Address(RVA = "0x8D8570", Offset = "0x8D8570", VA = "0x8D8570")]
		public RenderTexture Get(int width, int height, int depthBuffer = 0, RenderTextureFormat format = RenderTextureFormat.ARGBHalf, RenderTextureReadWrite rw = RenderTextureReadWrite.Default, FilterMode filterMode = FilterMode.Bilinear, TextureWrapMode wrapMode = TextureWrapMode.Clamp, string name = "FactoryTempTexture")
		{
			return null;
		}

		[Token(Token = "0x6001902")]
		[Address(RVA = "0x8D86A8", Offset = "0x8D86A8", VA = "0x8D86A8")]
		public void Release(RenderTexture rt)
		{
		}

		[Token(Token = "0x6001903")]
		[Address(RVA = "0x8EA5E0", Offset = "0x8EA5E0", VA = "0x8EA5E0")]
		public void ReleaseAll()
		{
		}

		[Token(Token = "0x6001904")]
		[Address(RVA = "0x8EADB4", Offset = "0x8EADB4", VA = "0x8EADB4", Slot = "4")]
		public void Dispose()
		{
		}
	}
}
namespace UnityEngine.EventSystems
{
	[Token(Token = "0x20003CA")]
	public class OVRInputModule : PointerInputModule
	{
		[Token(Token = "0x200077D")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x2ECC04", Offset = "0x2ECC04")]
		public enum InputMode
		{
			[Token(Token = "0x40021FC")]
			Mouse,
			[Token(Token = "0x40021FD")]
			Buttons
		}

		[Token(Token = "0x40017FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F5DB4", Offset = "0x2F5DB4")]
		public Transform rayTransform;

		[Token(Token = "0x40017FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public OVRCursor m_Cursor;

		[Token(Token = "0x40017FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F5DE8", Offset = "0x2F5DE8")]
		public OVRInput.Button joyPadClickButton;

		[Token(Token = "0x40017FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F5E38", Offset = "0x2F5E38")]
		public KeyCode gazeClickKey;

		[Token(Token = "0x40017FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x2F5E8C", Offset = "0x2F5E8C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F5E8C", Offset = "0x2F5E8C")]
		public bool performSphereCastForGazepointer;

		[Token(Token = "0x40017FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x2F5EEC", Offset = "0x2F5EEC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F5EEC", Offset = "0x2F5EEC")]
		public bool useRightStickScroll;

		[Token(Token = "0x4001800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F5F88", Offset = "0x2F5F88")]
		public float rightStickDeadZone;

		[Token(Token = "0x4001801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x2F5FF0", Offset = "0x2F5FF0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F5FF0", Offset = "0x2F5FF0")]
		public bool useSwipeScroll;

		[Token(Token = "0x4001802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F6084", Offset = "0x2F6084")]
		public float swipeDragThreshold;

		[Token(Token = "0x4001803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F60E8", Offset = "0x2F60E8")]
		public float swipeDragScale;

		[Token(Token = "0x4001804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F6140", Offset = "0x2F6140")]
		public bool InvertSwipeXAxis;

		[NonSerialized]
		[Token(Token = "0x4001805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public OVRRaycaster activeGraphicRaycaster;

		[Token(Token = "0x4001806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x2F6188", Offset = "0x2F6188")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x2F6188", Offset = "0x2F6188")]
		public float angleDragThreshold;

		[Token(Token = "0x4001807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[SerializeField]
		private float m_SpherecastRadius;

		[Token(Token = "0x4001808")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float m_NextAction;

		[Token(Token = "0x4001809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Vector2 m_LastMousePosition;

		[Token(Token = "0x400180A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector2 m_MousePosition;

		[Token(Token = "0x400180B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x2F622C", Offset = "0x2F622C")]
		[SerializeField]
		private string m_HorizontalAxis;

		[Token(Token = "0x400180C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private string m_VerticalAxis;

		[Token(Token = "0x400180D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[SerializeField]
		private string m_SubmitButton;

		[Token(Token = "0x400180E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private string m_CancelButton;

		[Token(Token = "0x400180F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[SerializeField]
		private float m_InputActionsPerSecond;

		[Token(Token = "0x4001810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private bool m_AllowActivationOnMobileDevice;

		[Token(Token = "0x4001811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		protected Dictionary<int, OVRPointerEventData> m_VRRayPointerData;

		[Token(Token = "0x4001812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private readonly MouseState m_MouseState;

		[Token(Token = "0x17000355")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x2FE000", Offset = "0x2FE000")]
		public InputMode inputMode
		{
			[Token(Token = "0x6001906")]
			[Address(RVA = "0x5A27E0", Offset = "0x5A27E0", VA = "0x5A27E0")]
			get
			{
				return default(InputMode);
			}
		}

		[Token(Token = "0x17000356")]
		public bool allowActivationOnMobileDevice
		{
			[Token(Token = "0x6001907")]
			[Address(RVA = "0x5A27E8", Offset = "0x5A27E8", VA = "0x5A27E8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001908")]
			[Address(RVA = "0x5A27F0", Offset = "0x5A27F0", VA = "0x5A27F0")]
			set
			{
			}
		}

		[Token(Token = "0x17000357")]
		public float inputActionsPerSecond
		{
			[Token(Token = "0x6001909")]
			[Address(RVA = "0x5A27F8", Offset = "0x5A27F8", VA = "0x5A27F8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600190A")]
			[Address(RVA = "0x5A2800", Offset = "0x5A2800", VA = "0x5A2800")]
			set
			{
			}
		}

		[Token(Token = "0x17000358")]
		public string horizontalAxis
		{
			[Token(Token = "0x600190B")]
			[Address(RVA = "0x5A2808", Offset = "0x5A2808", VA = "0x5A2808")]
			get
			{
				return null;
			}
			[Token(Token = "0x600190C")]
			[Address(RVA = "0x5A2810", Offset = "0x5A2810", VA = "0x5A2810")]
			set
			{
			}
		}

		[Token(Token = "0x17000359")]
		public string verticalAxis
		{
			[Token(Token = "0x600190D")]
			[Address(RVA = "0x5A2818", Offset = "0x5A2818", VA = "0x5A2818")]
			get
			{
				return null;
			}
			[Token(Token = "0x600190E")]
			[Address(RVA = "0x5A2820", Offset = "0x5A2820", VA = "0x5A2820")]
			set
			{
			}
		}

		[Token(Token = "0x1700035A")]
		public string submitButton
		{
			[Token(Token = "0x600190F")]
			[Address(RVA = "0x5A2828", Offset = "0x5A2828", VA = "0x5A2828")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001910")]
			[Address(RVA = "0x5A2830", Offset = "0x5A2830", VA = "0x5A2830")]
			set
			{
			}
		}

		[Token(Token = "0x1700035B")]
		public string cancelButton
		{
			[Token(Token = "0x6001911")]
			[Address(RVA = "0x5A2838", Offset = "0x5A2838", VA = "0x5A2838")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001912")]
			[Address(RVA = "0x5A2840", Offset = "0x5A2840", VA = "0x5A2840")]
			set
			{
			}
		}

		[Token(Token = "0x6001905")]
		[Address(RVA = "0x5A2698", Offset = "0x5A2698", VA = "0x5A2698")]
		protected OVRInputModule()
		{
		}

		[Token(Token = "0x6001913")]
		[Address(RVA = "0x5A2848", Offset = "0x5A2848", VA = "0x5A2848", Slot = "24")]
		public override void UpdateModule()
		{
		}

		[Token(Token = "0x6001914")]
		[Address(RVA = "0x5A2908", Offset = "0x5A2908", VA = "0x5A2908", Slot = "25")]
		public override bool IsModuleSupported()
		{
			return default(bool);
		}

		[Token(Token = "0x6001915")]
		[Address(RVA = "0x5A2920", Offset = "0x5A2920", VA = "0x5A2920", Slot = "21")]
		public override bool ShouldActivateModule()
		{
			return default(bool);
		}

		[Token(Token = "0x6001916")]
		[Address(RVA = "0x5A2AD0", Offset = "0x5A2AD0", VA = "0x5A2AD0", Slot = "23")]
		public override void ActivateModule()
		{
		}

		[Token(Token = "0x6001917")]
		[Address(RVA = "0x5A2C74", Offset = "0x5A2C74", VA = "0x5A2C74", Slot = "22")]
		public override void DeactivateModule()
		{
		}

		[Token(Token = "0x6001918")]
		[Address(RVA = "0x5A2F70", Offset = "0x5A2F70", VA = "0x5A2F70")]
		private bool SendSubmitEventToSelectedObject()
		{
			return default(bool);
		}

		[Token(Token = "0x6001919")]
		[Address(RVA = "0x5A323C", Offset = "0x5A323C", VA = "0x5A323C")]
		private bool AllowMoveEventProcessing(float time)
		{
			return default(bool);
		}

		[Token(Token = "0x600191A")]
		[Address(RVA = "0x5A328C", Offset = "0x5A328C", VA = "0x5A328C")]
		private Vector2 GetRawMoveVector()
		{
			return default(Vector2);
		}

		[Token(Token = "0x600191B")]
		[Address(RVA = "0x5A33B0", Offset = "0x5A33B0", VA = "0x5A33B0")]
		private bool SendMoveEventToSelectedObject()
		{
			return default(bool);
		}

		[Token(Token = "0x600191C")]
		[Address(RVA = "0x5A3640", Offset = "0x5A3640", VA = "0x5A3640")]
		private bool SendUpdateEventToSelectedObject()
		{
			return default(bool);
		}

		[Token(Token = "0x600191D")]
		[Address(RVA = "0x5A3804", Offset = "0x5A3804", VA = "0x5A3804")]
		private void ProcessMousePress(MouseButtonEventData data)
		{
		}

		[Token(Token = "0x600191E")]
		[Address(RVA = "0x5A4354", Offset = "0x5A4354", VA = "0x5A4354")]
		private void ProcessMouseEvent(MouseState mouseData)
		{
		}

		[Token(Token = "0x600191F")]
		[Address(RVA = "0x5A47A8", Offset = "0x5A47A8", VA = "0x5A47A8", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x6001920")]
		[Address(RVA = "0x5A4758", Offset = "0x5A4758", VA = "0x5A4758")]
		private static bool UseMouse(bool pressed, bool released, PointerEventData pointerData)
		{
			return default(bool);
		}

		[Token(Token = "0x6001921")]
		[Address(RVA = "0x5A485C", Offset = "0x5A485C", VA = "0x5A485C")]
		protected void CopyFromTo(OVRPointerEventData from, OVRPointerEventData to)
		{
		}

		[Token(Token = "0x6001922")]
		[Address(RVA = "0x5A4980", Offset = "0x5A4980", VA = "0x5A4980")]
		protected new void CopyFromTo(PointerEventData from, PointerEventData to)
		{
		}

		[Token(Token = "0x6001923")]
		[Address(RVA = "0x5A4A74", Offset = "0x5A4A74", VA = "0x5A4A74")]
		protected bool GetPointerData(int id, out OVRPointerEventData data, bool create)
		{
			return default(bool);
		}

		[Token(Token = "0x6001924")]
		[Address(RVA = "0x5A2C94", Offset = "0x5A2C94", VA = "0x5A2C94")]
		protected new void ClearSelection()
		{
		}

		[Token(Token = "0x6001925")]
		[Address(RVA = "0x5A4B94", Offset = "0x5A4B94", VA = "0x5A4B94")]
		private static Vector3 GetRectTransformNormal(RectTransform rectTransform)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001926")]
		[Address(RVA = "0x5A4DB4", Offset = "0x5A4DB4", VA = "0x5A4DB4", Slot = "30")]
		protected virtual MouseState GetGazePointerData()
		{
			return null;
		}

		[Token(Token = "0x6001927")]
		[Address(RVA = "0x5A5E38", Offset = "0x5A5E38", VA = "0x5A5E38")]
		protected MouseState GetCanvasPointerData()
		{
			return null;
		}

		[Token(Token = "0x6001928")]
		[Address(RVA = "0x5A6454", Offset = "0x5A6454", VA = "0x5A6454")]
		private bool ShouldStartDrag(PointerEventData pointerEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x6001929")]
		[Address(RVA = "0x5A4820", Offset = "0x5A4820", VA = "0x5A4820")]
		private static bool IsPointerMoving(PointerEventData pointerEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x600192A")]
		[Address(RVA = "0x5A692C", Offset = "0x5A692C", VA = "0x5A692C")]
		protected Vector2 SwipeAdjustedPosition(Vector2 originalPosition, PointerEventData pointerEvent)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600192B")]
		[Address(RVA = "0x5A6AA8", Offset = "0x5A6AA8", VA = "0x5A6AA8", Slot = "29")]
		protected override void ProcessDrag(PointerEventData pointerEvent)
		{
		}

		[Token(Token = "0x600192C")]
		[Address(RVA = "0x5A6F20", Offset = "0x5A6F20", VA = "0x5A6F20", Slot = "31")]
		protected virtual PointerEventData.FramePressState GetGazeButtonState()
		{
			return default(PointerEventData.FramePressState);
		}

		[Token(Token = "0x600192D")]
		[Address(RVA = "0x5A5778", Offset = "0x5A5778", VA = "0x5A5778")]
		protected Vector2 GetExtraScrollDelta()
		{
			return default(Vector2);
		}
	}
	[Token(Token = "0x20003CB")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x2EA654", Offset = "0x2EA654")]
	public class OVRPhysicsRaycaster : BaseRaycaster
	{
		[Serializable]
		[Token(Token = "0x200077E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x2ECC3C", Offset = "0x2ECC3C")]
		private sealed class <>c
		{
			[Token(Token = "0x40021FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40021FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public static Comparison<RaycastHit> <>9__15_0;

			[Token(Token = "0x4002200")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Comparison<RaycastHit> <>9__16_0;

			[Token(Token = "0x60024AB")]
			[Address(RVA = "0x5A7904", Offset = "0x5A7904", VA = "0x5A7904")]
			public <>c()
			{
			}

			[Token(Token = "0x60024AC")]
			[Address(RVA = "0x5A790C", Offset = "0x5A790C", VA = "0x5A790C")]
			internal int <Raycast>b__15_0(RaycastHit r1, RaycastHit r2)
			{
				return default(int);
			}

			[Token(Token = "0x60024AD")]
			[Address(RVA = "0x5A79EC", Offset = "0x5A79EC", VA = "0x5A79EC")]
			internal int <Spherecast>b__16_0(RaycastHit r1, RaycastHit r2)
			{
				return default(int);
			}
		}

		[Token(Token = "0x4001813")]
		protected const int kNoEventMaskSet = -1;

		[Token(Token = "0x4001814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		protected LayerMask m_EventMask;

		[Token(Token = "0x4001815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int sortOrder;

		[Token(Token = "0x1700035C")]
		public override Camera eventCamera
		{
			[Token(Token = "0x600192F")]
			[Address(RVA = "0x5A7098", Offset = "0x5A7098", VA = "0x5A7098", Slot = "18")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700035D")]
		public virtual int depth
		{
			[Token(Token = "0x6001930")]
			[Address(RVA = "0x5A711C", Offset = "0x5A711C", VA = "0x5A711C", Slot = "22")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700035E")]
		public override int sortOrderPriority
		{
			[Token(Token = "0x6001931")]
			[Address(RVA = "0x5A720C", Offset = "0x5A720C", VA = "0x5A720C", Slot = "20")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700035F")]
		public int finalEventMask
		{
			[Token(Token = "0x6001932")]
			[Address(RVA = "0x5A7214", Offset = "0x5A7214", VA = "0x5A7214")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000360")]
		public LayerMask eventMask
		{
			[Token(Token = "0x6001933")]
			[Address(RVA = "0x5A730C", Offset = "0x5A730C", VA = "0x5A730C")]
			get
			{
				return default(LayerMask);
			}
			[Token(Token = "0x6001934")]
			[Address(RVA = "0x5A7314", Offset = "0x5A7314", VA = "0x5A7314")]
			set
			{
			}
		}

		[Token(Token = "0x600192E")]
		[Address(RVA = "0x5A706C", Offset = "0x5A706C", VA = "0x5A706C")]
		protected OVRPhysicsRaycaster()
		{
		}

		[Token(Token = "0x6001935")]
		[Address(RVA = "0x5A731C", Offset = "0x5A731C", VA = "0x5A731C", Slot = "17")]
		public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList)
		{
		}

		[Token(Token = "0x6001936")]
		[Address(RVA = "0x5A58C0", Offset = "0x5A58C0", VA = "0x5A58C0")]
		public void Spherecast(PointerEventData eventData, List<RaycastResult> resultAppendList, float radius)
		{
		}

		[Token(Token = "0x6001937")]
		[Address(RVA = "0x5A5D4C", Offset = "0x5A5D4C", VA = "0x5A5D4C")]
		public Vector2 GetScreenPos(Vector3 worldPosition)
		{
			return default(Vector2);
		}
	}
	[Token(Token = "0x20003CC")]
	public class OVRPointerEventData : PointerEventData
	{
		[Token(Token = "0x4001816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public Ray worldSpaceRay;

		[Token(Token = "0x4001817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public Vector2 swipeStart;

		[Token(Token = "0x6001938")]
		[Address(RVA = "0x5A4B8C", Offset = "0x5A4B8C", VA = "0x5A4B8C")]
		public OVRPointerEventData(EventSystem eventSystem)
		{
		}

		[Token(Token = "0x6001939")]
		[Address(RVA = "0x5A7ACC", Offset = "0x5A7ACC", VA = "0x5A7ACC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20003CD")]
	public static class PointerEventDataExtension
	{
		[Token(Token = "0x600193A")]
		[Address(RVA = "0x5A41F0", Offset = "0x5A41F0", VA = "0x5A41F0")]
		public static bool IsVRPointer(this PointerEventData pointerEventData)
		{
			return default(bool);
		}

		[Token(Token = "0x600193B")]
		[Address(RVA = "0x5A7794", Offset = "0x5A7794", VA = "0x5A7794")]
		public static Ray GetRay(this PointerEventData pointerEventData)
		{
			return default(Ray);
		}

		[Token(Token = "0x600193C")]
		[Address(RVA = "0x5A685C", Offset = "0x5A685C", VA = "0x5A685C")]
		public static Vector2 GetSwipeStart(this PointerEventData pointerEventData)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600193D")]
		[Address(RVA = "0x5A4284", Offset = "0x5A4284", VA = "0x5A4284")]
		public static void SetSwipeStart(this PointerEventData pointerEventData, Vector2 start)
		{
		}
	}
}
namespace UnityEngine.Timeline
{
	[Token(Token = "0x20003CE")]
	public class VideoPlayableBehaviour : PlayableBehaviour
	{
		[Token(Token = "0x4001818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public VideoPlayer videoPlayer;

		[Token(Token = "0x4001819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public VideoClip videoClip;

		[Token(Token = "0x400181A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool mute;

		[Token(Token = "0x400181B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool loop;

		[Token(Token = "0x400181C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public double preloadTime;

		[Token(Token = "0x400181D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public double clipInTime;

		[Token(Token = "0x400181E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool playedOnce;

		[Token(Token = "0x400181F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool preparing;

		[Token(Token = "0x600193E")]
		[Address(RVA = "0x8EFA20", Offset = "0x8EFA20", VA = "0x8EFA20")]
		public void PrepareVideo()
		{
		}

		[Token(Token = "0x600193F")]
		[Address(RVA = "0x8EFF78", Offset = "0x8EFF78", VA = "0x8EFF78")]
		private void LoopPointReached(VideoPlayer vp)
		{
		}

		[Token(Token = "0x6001940")]
		[Address(RVA = "0x8EFF88", Offset = "0x8EFF88", VA = "0x8EFF88", Slot = "19")]
		public override void PrepareFrame(Playable playable, FrameData info)
		{
		}

		[Token(Token = "0x6001941")]
		[Address(RVA = "0x8F0358", Offset = "0x8F0358", VA = "0x8F0358", Slot = "17")]
		public override void OnBehaviourPlay(Playable playable, FrameData info)
		{
		}

		[Token(Token = "0x6001942")]
		[Address(RVA = "0x8F04F0", Offset = "0x8F04F0", VA = "0x8F04F0", Slot = "18")]
		public override void OnBehaviourPause(Playable playable, FrameData info)
		{
		}

		[Token(Token = "0x6001943")]
		[Address(RVA = "0x8F0664", Offset = "0x8F0664", VA = "0x8F0664", Slot = "20")]
		public override void ProcessFrame(Playable playable, FrameData info, object playerData)
		{
		}

		[Token(Token = "0x6001944")]
		[Address(RVA = "0x8F099C", Offset = "0x8F099C", VA = "0x8F099C", Slot = "13")]
		public override void OnGraphStart(Playable playable)
		{
		}

		[Token(Token = "0x6001945")]
		[Address(RVA = "0x8F09A8", Offset = "0x8F09A8", VA = "0x8F09A8", Slot = "14")]
		public override void OnGraphStop(Playable playable)
		{
		}

		[Token(Token = "0x6001946")]
		[Address(RVA = "0x8F09D0", Offset = "0x8F09D0", VA = "0x8F09D0", Slot = "16")]
		public override void OnPlayableDestroy(Playable playable)
		{
		}

		[Token(Token = "0x6001947")]
		[Address(RVA = "0x8F0418", Offset = "0x8F0418", VA = "0x8F0418")]
		public void PlayVideo()
		{
		}

		[Token(Token = "0x6001948")]
		[Address(RVA = "0x8F05A8", Offset = "0x8F05A8", VA = "0x8F05A8")]
		public void PauseVideo()
		{
		}

		[Token(Token = "0x6001949")]
		[Address(RVA = "0x8EFEB4", Offset = "0x8EFEB4", VA = "0x8EFEB4")]
		public void StopVideo()
		{
		}

		[Token(Token = "0x600194A")]
		[Address(RVA = "0x8F0160", Offset = "0x8F0160", VA = "0x8F0160")]
		private void SyncVideoToPlayable(Playable playable)
		{
		}

		[Token(Token = "0x600194B")]
		[Address(RVA = "0x8F09D4", Offset = "0x8F09D4", VA = "0x8F09D4")]
		public VideoPlayableBehaviour()
		{
		}
	}
	[Token(Token = "0x20003CF")]
	public sealed class VideoSchedulerPlayableBehaviour : PlayableBehaviour
	{
		[Token(Token = "0x4001820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IEnumerable<TimelineClip> m_Clips;

		[Token(Token = "0x4001821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private PlayableDirector m_Director;

		[Token(Token = "0x17000361")]
		internal PlayableDirector director
		{
			[Token(Token = "0x600194C")]
			[Address(RVA = "0x8F09FC", Offset = "0x8F09FC", VA = "0x8F09FC")]
			get
			{
				return null;
			}
			[Token(Token = "0x600194D")]
			[Address(RVA = "0x8F0A04", Offset = "0x8F0A04", VA = "0x8F0A04")]
			set
			{
			}
		}

		[Token(Token = "0x17000362")]
		internal IEnumerable<TimelineClip> clips
		{
			[Token(Token = "0x600194E")]
			[Address(RVA = "0x8F0A0C", Offset = "0x8F0A0C", VA = "0x8F0A0C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600194F")]
			[Address(RVA = "0x8F0A14", Offset = "0x8F0A14", VA = "0x8F0A14")]
			set
			{
			}
		}

		[Token(Token = "0x6001950")]
		[Address(RVA = "0x8F0A1C", Offset = "0x8F0A1C", VA = "0x8F0A1C", Slot = "20")]
		public override void ProcessFrame(Playable playable, FrameData info, object playerData)
		{
		}

		[Token(Token = "0x6001951")]
		[Address(RVA = "0x8F0FB0", Offset = "0x8F0FB0", VA = "0x8F0FB0")]
		public VideoSchedulerPlayableBehaviour()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003D0")]
	public class VideoScriptPlayableAsset : PlayableAsset
	{
		[Token(Token = "0x4001822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public ExposedReference<VideoPlayer> videoPlayer;

		[Token(Token = "0x4001823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		[NotKeyable]
		public VideoClip videoClip;

		[Token(Token = "0x4001824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[NotKeyable]
		public bool mute;

		[Token(Token = "0x4001825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[SerializeField]
		[NotKeyable]
		public bool loop;

		[Token(Token = "0x4001826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[NotKeyable]
		public double preloadTime;

		[Token(Token = "0x4001827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[NotKeyable]
		public double clipInTime;

		[Token(Token = "0x6001952")]
		[Address(RVA = "0x8F0FB8", Offset = "0x8F0FB8", VA = "0x8F0FB8", Slot = "6")]
		public override Playable CreatePlayable(PlayableGraph graph, GameObject go)
		{
			return default(Playable);
		}

		[Token(Token = "0x6001953")]
		[Address(RVA = "0x8F1194", Offset = "0x8F1194", VA = "0x8F1194")]
		public VideoScriptPlayableAsset()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003D1")]
	[AttributeAttribute(Name = "TrackClipTypeAttribute", RVA = "0x2EA6DC", Offset = "0x2EA6DC")]
	[AttributeAttribute(Name = "TrackColorAttribute", RVA = "0x2EA6DC", Offset = "0x2EA6DC")]
	public class VideoScriptPlayableTrack : TrackAsset
	{
		[Token(Token = "0x6001954")]
		[Address(RVA = "0x8F11BC", Offset = "0x8F11BC", VA = "0x8F11BC", Slot = "24")]
		public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
		{
			return default(Playable);
		}

		[Token(Token = "0x6001955")]
		[Address(RVA = "0x8F1340", Offset = "0x8F1340", VA = "0x8F1340")]
		public VideoScriptPlayableTrack()
		{
		}
	}
}
namespace Fauns.VRLaserPointer
{
	[Token(Token = "0x20003D2")]
	public class VRLaserPointer : MonoBehaviour
	{
		[Token(Token = "0x4001828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x2F63D4", Offset = "0x2F63D4")]
		public OVRInput.Button button;

		[Token(Token = "0x4001829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LayerMask hitLayers;

		[Token(Token = "0x400182A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float maxDistance;

		[Token(Token = "0x400182B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform laserStart;

		[Token(Token = "0x400182C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x2F640C", Offset = "0x2F640C")]
		public LineRenderer line;

		[Token(Token = "0x400182D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform dot;

		[Token(Token = "0x400182E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private RaycastHit hit;

		[Token(Token = "0x6001956")]
		[Address(RVA = "0x4DD5A0", Offset = "0x4DD5A0", VA = "0x4DD5A0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001957")]
		[Address(RVA = "0x4DDC84", Offset = "0x4DDC84", VA = "0x4DDC84")]
		public VRLaserPointer()
		{
		}
	}
}
