using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using DarkTonic.MasterAudio;
using FluffyUnderware.Curvy.Controllers;
using FluffyUnderware.Curvy.Generator;
using FluffyUnderware.Curvy.Generator.Modules;
using FluffyUnderware.Curvy.ThirdParty.LibTessDotNet;
using FluffyUnderware.DevTools;
using Il2CppDummyDll;
using JetBrains.Annotations;
using UnityEngine;
using UnityEngine.Audio;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.Rendering;
using UnityEngine.SceneManagement;
using UnityEngine.UI;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC5E60", Offset = "0xFC5E60")]
internal sealed class <>f__AnonymousType0<<A>j__TPar, <B>j__TPar, <C>j__TPar, <D>j__TPar>
{
	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xFC8A5C", Offset = "0xFC8A5C")]
	private readonly <A>j__TPar <A>i__Field;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xFC8A70", Offset = "0xFC8A70")]
	private readonly <B>j__TPar <B>i__Field;

	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xFC8A84", Offset = "0xFC8A84")]
	private readonly <C>j__TPar <C>i__Field;

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xFC8A98", Offset = "0xFC8A98")]
	private readonly <D>j__TPar <D>i__Field;

	[Token(Token = "0x17000001")]
	public <A>j__TPar A
	{
		[Token(Token = "0x6000001")]
		get
		{
			return (<A>j__TPar)null;
		}
	}

	[Token(Token = "0x17000002")]
	public <B>j__TPar B
	{
		[Token(Token = "0x6000002")]
		get
		{
			return (<B>j__TPar)null;
		}
	}

	[Token(Token = "0x17000003")]
	public <C>j__TPar C
	{
		[Token(Token = "0x6000003")]
		get
		{
			return (<C>j__TPar)null;
		}
	}

	[Token(Token = "0x17000004")]
	public <D>j__TPar D
	{
		[Token(Token = "0x6000004")]
		get
		{
			return (<D>j__TPar)null;
		}
	}

	[Token(Token = "0x6000005")]
	[DebuggerHidden]
	public <>f__AnonymousType0(<A>j__TPar A, <B>j__TPar B, <C>j__TPar C, <D>j__TPar D)
	{
	}

	[Token(Token = "0x6000006")]
	[DebuggerHidden]
	public override bool Equals(object value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000007")]
	[DebuggerHidden]
	public override int GetHashCode()
	{
		return default(int);
	}

	[Token(Token = "0x6000008")]
	[DebuggerHidden]
	public override string ToString()
	{
		return null;
	}
}
[Token(Token = "0x2000003")]
[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC5E70", Offset = "0xFC5E70")]
internal sealed class <>f__AnonymousType1<<A>j__TPar, <B>j__TPar, <C>j__TPar, <D>j__TPar, <E>j__TPar>
{
	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xFC8AAC", Offset = "0xFC8AAC")]
	private readonly <A>j__TPar <A>i__Field;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xFC8AC0", Offset = "0xFC8AC0")]
	private readonly <B>j__TPar <B>i__Field;

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xFC8AD4", Offset = "0xFC8AD4")]
	private readonly <C>j__TPar <C>i__Field;

	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xFC8AE8", Offset = "0xFC8AE8")]
	private readonly <D>j__TPar <D>i__Field;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xFC8AFC", Offset = "0xFC8AFC")]
	private readonly <E>j__TPar <E>i__Field;

	[Token(Token = "0x17000005")]
	public <A>j__TPar A
	{
		[Token(Token = "0x6000009")]
		get
		{
			return (<A>j__TPar)null;
		}
	}

	[Token(Token = "0x17000006")]
	public <B>j__TPar B
	{
		[Token(Token = "0x600000A")]
		get
		{
			return (<B>j__TPar)null;
		}
	}

	[Token(Token = "0x17000007")]
	public <C>j__TPar C
	{
		[Token(Token = "0x600000B")]
		get
		{
			return (<C>j__TPar)null;
		}
	}

	[Token(Token = "0x17000008")]
	public <D>j__TPar D
	{
		[Token(Token = "0x600000C")]
		get
		{
			return (<D>j__TPar)null;
		}
	}

	[Token(Token = "0x17000009")]
	public <E>j__TPar E
	{
		[Token(Token = "0x600000D")]
		get
		{
			return (<E>j__TPar)null;
		}
	}

	[Token(Token = "0x600000E")]
	[DebuggerHidden]
	public <>f__AnonymousType1(<A>j__TPar A, <B>j__TPar B, <C>j__TPar C, <D>j__TPar D, <E>j__TPar E)
	{
	}

	[Token(Token = "0x600000F")]
	[DebuggerHidden]
	public override bool Equals(object value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000010")]
	[DebuggerHidden]
	public override int GetHashCode()
	{
		return default(int);
	}

	[Token(Token = "0x6000011")]
	[DebuggerHidden]
	public override string ToString()
	{
		return null;
	}
}
[Token(Token = "0x2000004")]
public class AnimationHelper : MonoBehaviour
{
	[Token(Token = "0x6000012")]
	[Address(RVA = "0x18035CC", Offset = "0x18035CC", VA = "0x18035CC")]
	public void Play(Animation animation)
	{
	}

	[Token(Token = "0x6000013")]
	[Address(RVA = "0x18035E8", Offset = "0x18035E8", VA = "0x18035E8")]
	public void RewindThenPlay(Animation animation)
	{
	}

	[Token(Token = "0x6000014")]
	[Address(RVA = "0x1803620", Offset = "0x1803620", VA = "0x1803620")]
	public AnimationHelper()
	{
	}
}
[Token(Token = "0x2000005")]
public class MixingAnimator : MonoBehaviour
{
	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ModifierVariableMixShapes VariableMixShapes;

	[Token(Token = "0x6000015")]
	[Address(RVA = "0x1F14A30", Offset = "0x1F14A30", VA = "0x1F14A30")]
	private void Update()
	{
	}

	[Token(Token = "0x6000016")]
	[Address(RVA = "0x1F14B20", Offset = "0x1F14B20", VA = "0x1F14B20")]
	public MixingAnimator()
	{
	}
}
[Token(Token = "0x2000006")]
public class SinusoidalMover : MonoBehaviour
{
	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float MovementAmplitude;

	[Token(Token = "0x6000017")]
	[Address(RVA = "0x2982064", Offset = "0x2982064", VA = "0x2982064")]
	private void Update()
	{
	}

	[Token(Token = "0x6000018")]
	[Address(RVA = "0x2982178", Offset = "0x2982178", VA = "0x2982178")]
	public SinusoidalMover()
	{
	}
}
[Token(Token = "0x2000007")]
public class ToggleBehaviourByTrigger : MonoBehaviour
{
	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Behaviour UIElement;

	[Token(Token = "0x6000019")]
	[Address(RVA = "0x2982188", Offset = "0x2982188", VA = "0x2982188")]
	private void OnTriggerEnter()
	{
	}

	[Token(Token = "0x600001A")]
	[Address(RVA = "0x2982230", Offset = "0x2982230", VA = "0x2982230")]
	public ToggleBehaviourByTrigger()
	{
	}
}
[Token(Token = "0x2000008")]
[AttributeAttribute(Name = "AudioScriptOrder", RVA = "0xFC5E80", Offset = "0xFC5E80")]
public class ListenerFollower : MonoBehaviour
{
	[Token(Token = "0x400000D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform _transToFollow;

	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject _goToFollow;

	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform _trans;

	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject _go;

	[Token(Token = "0x1700000A")]
	public GameObject GameObj
	{
		[Token(Token = "0x600001F")]
		[Address(RVA = "0x1F14984", Offset = "0x1F14984", VA = "0x1F14984")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700000B")]
	public Transform Trans
	{
		[Token(Token = "0x6000020")]
		[Address(RVA = "0x1F148E0", Offset = "0x1F148E0", VA = "0x1F148E0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600001B")]
	[Address(RVA = "0x1F14670", Offset = "0x1F14670", VA = "0x1F14670")]
	private void Awake()
	{
	}

	[Token(Token = "0x600001C")]
	[Address(RVA = "0x1F14674", Offset = "0x1F14674", VA = "0x1F14674")]
	public void StartFollowing(Transform transToFollow, float trigRadius)
	{
	}

	[Token(Token = "0x600001D")]
	[Address(RVA = "0x1F146BC", Offset = "0x1F146BC", VA = "0x1F146BC")]
	public void ManualUpdate()
	{
	}

	[Token(Token = "0x600001E")]
	[Address(RVA = "0x1F14784", Offset = "0x1F14784", VA = "0x1F14784")]
	private void BatchOcclusionRaycasts()
	{
	}

	[Token(Token = "0x6000021")]
	[Address(RVA = "0x1F14A28", Offset = "0x1F14A28", VA = "0x1F14A28")]
	public ListenerFollower()
	{
	}
}
[Token(Token = "0x2000009")]
public static class OculusAudioHelper
{
	[Token(Token = "0x6000022")]
	[Address(RVA = "0x1F14B28", Offset = "0x1F14B28", VA = "0x1F14B28")]
	public static bool DarkTonicOculusAudioPackageInstalled()
	{
		return default(bool);
	}

	[Token(Token = "0x6000023")]
	[Address(RVA = "0x1F14B30", Offset = "0x1F14B30", VA = "0x1F14B30")]
	public static void AddOculusAudioSourceToVariation(SoundGroupVariation variation)
	{
	}

	[Token(Token = "0x6000024")]
	[Address(RVA = "0x1F14B34", Offset = "0x1F14B34", VA = "0x1F14B34")]
	public static void AddOculusAudioSourceToAllVariations()
	{
	}

	[Token(Token = "0x6000025")]
	[Address(RVA = "0x1F14B38", Offset = "0x1F14B38", VA = "0x1F14B38")]
	public static void RemoveOculusAudioSourceFromAllVariations()
	{
	}

	[Token(Token = "0x6000026")]
	[Address(RVA = "0x1F14B3C", Offset = "0x1F14B3C", VA = "0x1F14B3C")]
	public static void CopyOculusAudioSource(DynamicGroupVariation sourceVariation, DynamicGroupVariation destVariation)
	{
	}

	[Token(Token = "0x6000027")]
	[Address(RVA = "0x1F14B40", Offset = "0x1F14B40", VA = "0x1F14B40")]
	public static void CopyOculusAudioSource(DynamicGroupVariation sourceVariation, SoundGroupVariation destVariation)
	{
	}

	[Token(Token = "0x6000028")]
	[Address(RVA = "0x1F14B44", Offset = "0x1F14B44", VA = "0x1F14B44")]
	public static void CopyOculusAudioSource(SoundGroupVariation sourceVariation, DynamicGroupVariation destVariation)
	{
	}
}
[Token(Token = "0x200000A")]
public static class ResonanceAudioHelper
{
	[Token(Token = "0x1700000C")]
	public static bool ResonanceAudioOptionExists
	{
		[Token(Token = "0x6000029")]
		[Address(RVA = "0x298203C", Offset = "0x298203C", VA = "0x298203C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600002A")]
	[Address(RVA = "0x2982044", Offset = "0x2982044", VA = "0x2982044")]
	public static bool DarkTonicResonanceAudioPackageInstalled()
	{
		return default(bool);
	}

	[Token(Token = "0x600002B")]
	[Address(RVA = "0x298204C", Offset = "0x298204C", VA = "0x298204C")]
	public static void AddResonanceAudioSourceToVariation(SoundGroupVariation variation)
	{
	}

	[Token(Token = "0x600002C")]
	[Address(RVA = "0x2982050", Offset = "0x2982050", VA = "0x2982050")]
	public static void AddResonanceAudioSourceToAllVariations()
	{
	}

	[Token(Token = "0x600002D")]
	[Address(RVA = "0x2982054", Offset = "0x2982054", VA = "0x2982054")]
	public static void RemoveResonanceAudioSourceFromAllVariations()
	{
	}

	[Token(Token = "0x600002E")]
	[Address(RVA = "0x2982058", Offset = "0x2982058", VA = "0x2982058")]
	public static void CopyResonanceAudioSource(DynamicGroupVariation sourceVariation, DynamicGroupVariation destVariation)
	{
	}

	[Token(Token = "0x600002F")]
	[Address(RVA = "0x298205C", Offset = "0x298205C", VA = "0x298205C")]
	public static void CopyResonanceAudioSource(DynamicGroupVariation sourceVariation, SoundGroupVariation destVariation)
	{
	}

	[Token(Token = "0x6000030")]
	[Address(RVA = "0x2982060", Offset = "0x2982060", VA = "0x2982060")]
	public static void CopyResonanceAudioSource(SoundGroupVariation sourceVariation, DynamicGroupVariation destVariation)
	{
	}
}
[Token(Token = "0x200000B")]
public class TransformFollower : MonoBehaviour
{
	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFC8B10", Offset = "0xFC8B10")]
	public Transform RuntimeFollowingTransform;

	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject _goToFollow;

	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform _trans;

	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject _go;

	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private string _soundType;

	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private string _variationName;

	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool _willFollowSource;

	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	private bool _isInsideTrigger;

	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
	private bool _hasPlayedSound;

	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float _playVolume;

	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool _positionAtClosestColliderPoint;

	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private MasterAudio.AmbientSoundExitMode _exitMode;

	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float _exitFadeTime;

	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private MasterAudio.AmbientSoundReEnterMode _reEnterMode;

	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float _reEnterFadeTime;

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private Vector3 _lastListenerPos;

	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private PlaySoundResult playingVariation;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private PlaySoundResult fadingVariation;

	[Token(Token = "0x1700000D")]
	public GameObject GameObj
	{
		[Token(Token = "0x6000039")]
		[Address(RVA = "0x29828BC", Offset = "0x29828BC", VA = "0x29828BC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700000E")]
	public Transform Trans
	{
		[Token(Token = "0x600003A")]
		[Address(RVA = "0x2982EB8", Offset = "0x2982EB8", VA = "0x2982EB8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000031")]
	[Address(RVA = "0x2982238", Offset = "0x2982238", VA = "0x2982238")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000032")]
	[Address(RVA = "0x29822D4", Offset = "0x29822D4", VA = "0x29822D4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000033")]
	[Address(RVA = "0x29824B4", Offset = "0x29824B4", VA = "0x29824B4")]
	public void StartFollowing(Transform transToFollow, string soundType, string variationName, float volume, float trigRadius, bool willFollowSource, bool positionAtClosestColliderPoint, bool useTopCollider, bool useChildColliders, MasterAudio.AmbientSoundExitMode exitMode, float exitFadeTime, MasterAudio.AmbientSoundReEnterMode reEnterMode, float reEnterFadeTime)
	{
	}

	[Token(Token = "0x6000034")]
	[Address(RVA = "0x2982834", Offset = "0x2982834", VA = "0x2982834")]
	private void StopFollowing()
	{
	}

	[Token(Token = "0x6000035")]
	[Address(RVA = "0x2982960", Offset = "0x2982960", VA = "0x2982960")]
	private void PlaySound()
	{
	}

	[Token(Token = "0x6000036")]
	[Address(RVA = "0x2982DC4", Offset = "0x2982DC4", VA = "0x2982DC4")]
	public void ManualUpdate()
	{
	}

	[Token(Token = "0x6000037")]
	[Address(RVA = "0x2982720", Offset = "0x2982720", VA = "0x2982720")]
	public bool RecalcClosestColliderPosition(bool forceRecalc = false)
	{
		return default(bool);
	}

	[Token(Token = "0x6000038")]
	[Address(RVA = "0x2982344", Offset = "0x2982344", VA = "0x2982344")]
	private void PerformTriggerExit()
	{
	}

	[Token(Token = "0x600003B")]
	[Address(RVA = "0x2982F5C", Offset = "0x2982F5C", VA = "0x2982F5C")]
	public TransformFollower()
	{
	}
}
namespace RelationsInspector.Backend.AutoBackend
{
	[Token(Token = "0x200000C")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xFC5E94", Offset = "0xFC5E94")]
	public class AutoBackendAttribute : Attribute
	{
		[Token(Token = "0x600003C")]
		[Address(RVA = "0x2982024", Offset = "0x2982024", VA = "0x2982024")]
		public AutoBackendAttribute()
		{
		}
	}
	[Token(Token = "0x200000D")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xFC5EA8", Offset = "0xFC5EA8")]
	public class RelatedAttribute : Attribute
	{
		[Token(Token = "0x600003D")]
		[Address(RVA = "0x298202C", Offset = "0x298202C", VA = "0x298202C")]
		public RelatedAttribute()
		{
		}
	}
	[Token(Token = "0x200000E")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xFC5EBC", Offset = "0xFC5EBC")]
	public class RelatingAttribute : Attribute
	{
		[Token(Token = "0x600003E")]
		[Address(RVA = "0x2982034", Offset = "0x2982034", VA = "0x2982034")]
		public RelatingAttribute()
		{
		}
	}
}
namespace QuickEngine
{
	[Serializable]
	[Token(Token = "0x200000F")]
	public class QColor
	{
		[Token(Token = "0x4000023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Color color;

		[Token(Token = "0x4000024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Color colorDark;

		[Token(Token = "0x4000025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Color colorLight;

		[Token(Token = "0x1700000F")]
		public Color Color
		{
			[Token(Token = "0x600003F")]
			[Address(RVA = "0x297E210", Offset = "0x297E210", VA = "0x297E210")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000010")]
		public Color ColorDark
		{
			[Token(Token = "0x6000040")]
			[Address(RVA = "0x297E21C", Offset = "0x297E21C", VA = "0x297E21C")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000011")]
		public Color ColorLight
		{
			[Token(Token = "0x6000041")]
			[Address(RVA = "0x297E228", Offset = "0x297E228", VA = "0x297E228")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000012")]
		public float ColorBrightness
		{
			[Token(Token = "0x6000047")]
			[Address(RVA = "0x297E4D0", Offset = "0x297E4D0", VA = "0x297E4D0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000013")]
		public float ColorDarkBrightness
		{
			[Token(Token = "0x6000048")]
			[Address(RVA = "0x297E4E0", Offset = "0x297E4E0", VA = "0x297E4E0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000014")]
		public float ColorLightBrightness
		{
			[Token(Token = "0x6000049")]
			[Address(RVA = "0x297E4F0", Offset = "0x297E4F0", VA = "0x297E4F0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000015")]
		public Color ColorOpaque
		{
			[Token(Token = "0x600004A")]
			[Address(RVA = "0x297E500", Offset = "0x297E500", VA = "0x297E500")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000016")]
		public Color ColorDarkOpaque
		{
			[Token(Token = "0x600004B")]
			[Address(RVA = "0x297E510", Offset = "0x297E510", VA = "0x297E510")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000017")]
		public Color ColorLightOpaque
		{
			[Token(Token = "0x600004C")]
			[Address(RVA = "0x297E520", Offset = "0x297E520", VA = "0x297E520")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000018")]
		public Color ColorInvert
		{
			[Token(Token = "0x600004D")]
			[Address(RVA = "0x297E530", Offset = "0x297E530", VA = "0x297E530")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000019")]
		public Color ColorDarkInvert
		{
			[Token(Token = "0x600004E")]
			[Address(RVA = "0x297E540", Offset = "0x297E540", VA = "0x297E540")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x1700001A")]
		public Color ColorLightInvert
		{
			[Token(Token = "0x600004F")]
			[Address(RVA = "0x297E550", Offset = "0x297E550", VA = "0x297E550")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x6000042")]
		[Address(RVA = "0x297E234", Offset = "0x297E234", VA = "0x297E234")]
		public QColor(Color color)
		{
		}

		[Token(Token = "0x6000043")]
		[Address(RVA = "0x297E300", Offset = "0x297E300", VA = "0x297E300")]
		public QColor(Color color, float alpha)
		{
		}

		[Token(Token = "0x6000044")]
		[Address(RVA = "0x297E37C", Offset = "0x297E37C", VA = "0x297E37C")]
		public QColor(float r, float g, float b, bool from256 = true)
		{
		}

		[Token(Token = "0x6000045")]
		[Address(RVA = "0x297E424", Offset = "0x297E424", VA = "0x297E424")]
		public QColor(float r, float g, float b, float a, bool from256 = true)
		{
		}

		[Token(Token = "0x6000046")]
		[Address(RVA = "0x297E28C", Offset = "0x297E28C", VA = "0x297E28C")]
		public void SetColor(Color color)
		{
		}

		[Token(Token = "0x6000050")]
		[Address(RVA = "0x297E560", Offset = "0x297E560", VA = "0x297E560")]
		public Color ColorWithBrightness(float brightness)
		{
			return default(Color);
		}

		[Token(Token = "0x6000051")]
		[Address(RVA = "0x297E57C", Offset = "0x297E57C", VA = "0x297E57C")]
		public Color ColorDarkWithBrightness(float brightness)
		{
			return default(Color);
		}

		[Token(Token = "0x6000052")]
		[Address(RVA = "0x297E598", Offset = "0x297E598", VA = "0x297E598")]
		public Color ColorLightWithBrightness(float brightness)
		{
			return default(Color);
		}

		[Token(Token = "0x6000053")]
		[Address(RVA = "0x297E5B4", Offset = "0x297E5B4", VA = "0x297E5B4")]
		public Color ColorWithAlpha(float alpha)
		{
			return default(Color);
		}

		[Token(Token = "0x6000054")]
		[Address(RVA = "0x297E5D0", Offset = "0x297E5D0", VA = "0x297E5D0")]
		public Color ColorDarkWithAlpha(float alpha)
		{
			return default(Color);
		}

		[Token(Token = "0x6000055")]
		[Address(RVA = "0x297E5EC", Offset = "0x297E5EC", VA = "0x297E5EC")]
		public Color ColorLightWithAlpha(float alpha)
		{
			return default(Color);
		}
	}
	[Token(Token = "0x2000010")]
	public class QColors
	{
		[Token(Token = "0x4000026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static QColor UnityLight;

		[Token(Token = "0x4000027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static QColor UnityMild;

		[Token(Token = "0x4000028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static QColor UnityDark;

		[Token(Token = "0x4000029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static QColor WhiteLight;

		[Token(Token = "0x400002A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static QColor WhiteDark;

		[Token(Token = "0x6000056")]
		[Address(RVA = "0x297E608", Offset = "0x297E608", VA = "0x297E608")]
		public QColors()
		{
		}
	}
	[Token(Token = "0x2000011")]
	public class QResources
	{
		[Token(Token = "0x400002B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Font fontAwesome;

		[Token(Token = "0x1700001B")]
		public static Font FontAwesome
		{
			[Token(Token = "0x6000058")]
			[Address(RVA = "0x297E778", Offset = "0x297E778", VA = "0x297E778")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000059")]
		[Address(RVA = "0x297E854", Offset = "0x297E854", VA = "0x297E854")]
		public QResources()
		{
		}
	}
}
namespace QuickEngine.Utils
{
	[Token(Token = "0x2000012")]
	public class FontAwesomeReferences : ScriptableObject
	{
		[Token(Token = "0x400002C")]
		public const string RESOURCES_PATH = "Quick/Fonts/FontAwesome/";

		[Token(Token = "0x400002D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static FontAwesomeReferences _instance;

		[Token(Token = "0x400002E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Font FontAwesomeBrands;

		[Token(Token = "0x400002F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xFC8B48", Offset = "0xFC8B48")]
		public Font FontAwesomeSolid;

		[Token(Token = "0x4000030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Font FontAwesomeRegular;

		[Token(Token = "0x4000031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xFC8B80", Offset = "0xFC8B80")]
		public Font FontAwesomeSolidPro;

		[Token(Token = "0x4000032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Font FontAwesomeRegularPro;

		[Token(Token = "0x4000033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Font FontAwesomeLightPro;

		[Token(Token = "0x1700001C")]
		public static string RELATIVE_PATH
		{
			[Token(Token = "0x600005A")]
			[Address(RVA = "0x297E85C", Offset = "0x297E85C", VA = "0x297E85C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001D")]
		public static FontAwesomeReferences Instance
		{
			[Token(Token = "0x600005B")]
			[Address(RVA = "0x297E8D0", Offset = "0x297E8D0", VA = "0x297E8D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600005C")]
		[Address(RVA = "0x297E9C0", Offset = "0x297E9C0", VA = "0x297E9C0")]
		public FontAwesomeReferences()
		{
		}
	}
	[Token(Token = "0x2000013")]
	public static class QAssets
	{
		[Token(Token = "0x600005D")]
		public static UnityEngine.Object GetScriptableObjectFromResources<T>(string path)
		{
			return null;
		}

		[Token(Token = "0x600005E")]
		[Address(RVA = "0x297E9C8", Offset = "0x297E9C8", VA = "0x297E9C8")]
		public static UnityEngine.Object[] GetScriptableObjectsFromResources(string path)
		{
			return null;
		}

		[Token(Token = "0x600005F")]
		public static T[] GetScriptableObjectArray<T>(UnityEngine.Object[] objects) where T : ScriptableObject
		{
			return null;
		}
	}
	[Token(Token = "0x2000014")]
	public static class QEmailValidator
	{
		[Token(Token = "0x4000034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool isInvalid;

		[Token(Token = "0x6000060")]
		[Address(RVA = "0x297E9D0", Offset = "0x297E9D0", VA = "0x297E9D0")]
		public static bool IsValidEmail(string emailString)
		{
			return default(bool);
		}

		[Token(Token = "0x6000061")]
		[Address(RVA = "0x297EB00", Offset = "0x297EB00", VA = "0x297EB00")]
		private static string DomainMapper(Match match)
		{
			return null;
		}
	}
	[Token(Token = "0x2000015")]
	public static class QEncryption
	{
		[Token(Token = "0x4000035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static byte[] auxVector;

		[Token(Token = "0x4000036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static string auxString;

		[Token(Token = "0x6000062")]
		[Address(RVA = "0x297EC78", Offset = "0x297EC78", VA = "0x297EC78")]
		public static byte[] EncryptString(string toEncrypt, byte[] aesKey, byte[] aesIV)
		{
			return null;
		}

		[Token(Token = "0x6000063")]
		[Address(RVA = "0x297F244", Offset = "0x297F244", VA = "0x297F244")]
		public static string DecryptBytes(byte[] toDecrypt, byte[] aesKey, byte[] aesIV)
		{
			return null;
		}

		[Token(Token = "0x6000064")]
		[Address(RVA = "0x297F79C", Offset = "0x297F79C", VA = "0x297F79C")]
		public static void GenerateAesKeyAndIV(out byte[] aesKey, out byte[] aesIV)
		{
		}
	}
	[Token(Token = "0x2000016")]
	public static class QIPValidator
	{
		[Token(Token = "0x6000065")]
		[Address(RVA = "0x297F900", Offset = "0x297F900", VA = "0x297F900")]
		public static bool IsValidIPAddress(string str)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000017")]
	public static class QReflection
	{
		[Serializable]
		[Token(Token = "0x20001A1")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC8674", Offset = "0xFC8674")]
		private sealed class <>c
		{
			[Token(Token = "0x40008DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40008DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<Assembly, bool> <>9__18_0;

			[Token(Token = "0x40008DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<Type, string> <>9__21_0;

			[Token(Token = "0x6000F0C")]
			[Address(RVA = "0x2981E74", Offset = "0x2981E74", VA = "0x2981E74")]
			public <>c()
			{
			}

			[Token(Token = "0x6000F0D")]
			[Address(RVA = "0x2981E7C", Offset = "0x2981E7C", VA = "0x2981E7C")]
			internal bool <GetTypeByQualifiedName>b__18_0(Assembly assembly)
			{
				return default(bool);
			}

			[Token(Token = "0x6000F0E")]
			[Address(RVA = "0x2981F68", Offset = "0x2981F68", VA = "0x2981F68")]
			internal string <GetNameSpaces>b__21_0(Type t)
			{
				return null;
			}
		}

		[Token(Token = "0x20001A2")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC8684", Offset = "0xFC8684")]
		private sealed class <>c__DisplayClass20_0
		{
			[Token(Token = "0x40008DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string name;

			[Token(Token = "0x40008DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string @namespace;

			[Token(Token = "0x6000F0F")]
			[Address(RVA = "0x29815E8", Offset = "0x29815E8", VA = "0x29815E8")]
			public <>c__DisplayClass20_0()
			{
			}

			[Token(Token = "0x6000F10")]
			[Address(RVA = "0x2981F8C", Offset = "0x2981F8C", VA = "0x2981F8C")]
			internal bool <GetType>b__0(Type type)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC8BB8", Offset = "0xFC8BB8")]
		private static List<string> <AssemblyNames>k__BackingField;

		[Token(Token = "0x4000038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC8BC8", Offset = "0xFC8BC8")]
		private static Dictionary<string, Type> <TypeCache>k__BackingField;

		[Token(Token = "0x4000039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC8BD8", Offset = "0xFC8BD8")]
		private static Dictionary<Assembly, List<string>> <NameSpaceCache>k__BackingField;

		[Token(Token = "0x400003A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC8BE8", Offset = "0xFC8BE8")]
		private static Assembly[] <Assemblies>k__BackingField;

		[Token(Token = "0x1700001E")]
		public static List<string> AssemblyNames
		{
			[Token(Token = "0x6000066")]
			[Address(RVA = "0x297F974", Offset = "0x297F974", VA = "0x297F974")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD4C2C", Offset = "0xFD4C2C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000067")]
			[Address(RVA = "0x297F9DC", Offset = "0x297F9DC", VA = "0x297F9DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD4C3C", Offset = "0xFD4C3C")]
			private set
			{
			}
		}

		[Token(Token = "0x1700001F")]
		public static Dictionary<string, Type> TypeCache
		{
			[Token(Token = "0x6000068")]
			[Address(RVA = "0x297FA4C", Offset = "0x297FA4C", VA = "0x297FA4C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD4C4C", Offset = "0xFD4C4C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000069")]
			[Address(RVA = "0x297FAB4", Offset = "0x297FAB4", VA = "0x297FAB4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD4C5C", Offset = "0xFD4C5C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000020")]
		public static Dictionary<Assembly, List<string>> NameSpaceCache
		{
			[Token(Token = "0x600006A")]
			[Address(RVA = "0x297FB24", Offset = "0x297FB24", VA = "0x297FB24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD4C6C", Offset = "0xFD4C6C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600006B")]
			[Address(RVA = "0x297FB8C", Offset = "0x297FB8C", VA = "0x297FB8C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD4C7C", Offset = "0xFD4C7C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000021")]
		public static Assembly[] Assemblies
		{
			[Token(Token = "0x600006C")]
			[Address(RVA = "0x297FBFC", Offset = "0x297FBFC", VA = "0x297FBFC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD4C8C", Offset = "0xFD4C8C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600006D")]
			[Address(RVA = "0x297FC64", Offset = "0x297FC64", VA = "0x297FC64")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD4C9C", Offset = "0xFD4C9C")]
			private set
			{
			}
		}

		[Token(Token = "0x600006E")]
		[Address(RVA = "0x297FCD4", Offset = "0x297FCD4", VA = "0x297FCD4")]
		static QReflection()
		{
		}

		[Token(Token = "0x600006F")]
		[Address(RVA = "0x297FEF4", Offset = "0x297FEF4", VA = "0x297FEF4")]
		public static void PrintManifestResources()
		{
		}

		[Token(Token = "0x6000070")]
		[Address(RVA = "0x297FFDC", Offset = "0x297FFDC", VA = "0x297FFDC")]
		public static Type GetTypeByQualifiedName(string name)
		{
			return null;
		}

		[Token(Token = "0x6000071")]
		[Address(RVA = "0x2980D34", Offset = "0x2980D34", VA = "0x2980D34")]
		public static string GetQualifiedName(string name, string @namespace = "")
		{
			return null;
		}

		[Token(Token = "0x6000072")]
		[Address(RVA = "0x2981144", Offset = "0x2981144", VA = "0x2981144")]
		public static Type GetType(string name, string @namespace = "")
		{
			return null;
		}

		[Token(Token = "0x6000073")]
		[Address(RVA = "0x29815F0", Offset = "0x29815F0", VA = "0x29815F0")]
		public static List<string> GetNameSpaces(Assembly assembly)
		{
			return null;
		}

		[Token(Token = "0x6000074")]
		[Address(RVA = "0x297FED0", Offset = "0x297FED0", VA = "0x297FED0")]
		public static Assembly[] GetAllAssemblies()
		{
			return null;
		}

		[Token(Token = "0x6000075")]
		[Address(RVA = "0x29818C8", Offset = "0x29818C8", VA = "0x29818C8")]
		public static object GetSingletonInstance(Type type, string singletonName, bool singletonIsProperty, BindingFlags flags = BindingFlags.Static | BindingFlags.Public)
		{
			return null;
		}

		[Token(Token = "0x6000076")]
		[Address(RVA = "0x2981A1C", Offset = "0x2981A1C", VA = "0x2981A1C")]
		public static object GetSingletonProperty(Type type, string singletonName, string propertyName, bool singletonIsProperty = true, BindingFlags singletonFlags = BindingFlags.Static | BindingFlags.Public)
		{
			return null;
		}

		[Token(Token = "0x6000077")]
		[Address(RVA = "0x2981B18", Offset = "0x2981B18", VA = "0x2981B18")]
		public static object GetSingletonField(Type type, string singletonName, string fieldName, bool singletonIsProperty = true, BindingFlags singletonFlags = BindingFlags.Static | BindingFlags.Public)
		{
			return null;
		}

		[Token(Token = "0x6000078")]
		[Address(RVA = "0x2981C10", Offset = "0x2981C10", VA = "0x2981C10")]
		public static bool SetSingletonProperty(Type type, string singletonName, string propertyName, object value, bool singletonIsProperty = true, BindingFlags singletonFlags = BindingFlags.Static | BindingFlags.Public)
		{
			return default(bool);
		}

		[Token(Token = "0x6000079")]
		[Address(RVA = "0x2981D14", Offset = "0x2981D14", VA = "0x2981D14")]
		public static bool SetSingletonField(Type type, string singletonName, string fieldName, object value, bool singletonIsProperty = true, BindingFlags singletonFlags = BindingFlags.Static | BindingFlags.Public)
		{
			return default(bool);
		}
	}
}
namespace QuickEngine.IO
{
	[Token(Token = "0x2000018")]
	public static class File
	{
		[Token(Token = "0x400003B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<string> listOfStrings;

		[Token(Token = "0x400003C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static FileInfo[] fileInfoArray;

		[Token(Token = "0x400003D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static DirectoryInfo[] directoryInfoArray;

		[Token(Token = "0x600007A")]
		[Address(RVA = "0x297D7BC", Offset = "0x297D7BC", VA = "0x297D7BC")]
		public static bool Exists(string path)
		{
			return default(bool);
		}

		[Token(Token = "0x600007B")]
		[Address(RVA = "0x297D7C4", Offset = "0x297D7C4", VA = "0x297D7C4")]
		public static void CreateDirectory(string path)
		{
		}

		[Token(Token = "0x600007C")]
		[Address(RVA = "0x297D840", Offset = "0x297D840", VA = "0x297D840")]
		public static string GetAbsoluteDirectoryPath(string directoryName, bool debug = false)
		{
			return null;
		}

		[Token(Token = "0x600007D")]
		[Address(RVA = "0x297DB04", Offset = "0x297DB04", VA = "0x297DB04")]
		public static string GetRelativeDirectoryPath(string directoryName)
		{
			return null;
		}

		[Token(Token = "0x600007E")]
		public static void WriteFile<T>(string filePath, T obj, Action<FileStream, T> serializeMethod)
		{
		}

		[Token(Token = "0x600007F")]
		[Address(RVA = "0x297DB7C", Offset = "0x297DB7C", VA = "0x297DB7C")]
		public static void Delete(string path)
		{
		}

		[Token(Token = "0x6000080")]
		[Address(RVA = "0x297DB84", Offset = "0x297DB84", VA = "0x297DB84")]
		public static void Move(string sourceFileName, string destFileName)
		{
		}

		[Token(Token = "0x6000081")]
		[Address(RVA = "0x297DB8C", Offset = "0x297DB8C", VA = "0x297DB8C")]
		public static void Rename(string sourceFileName, string destFileName)
		{
		}

		[Token(Token = "0x6000082")]
		[Address(RVA = "0x297DB94", Offset = "0x297DB94", VA = "0x297DB94")]
		public static FileInfo[] GetFiles(string directoryPath)
		{
			return null;
		}

		[Token(Token = "0x6000083")]
		[Address(RVA = "0x297DC14", Offset = "0x297DC14", VA = "0x297DC14")]
		public static FileInfo[] GetFiles(string directoryPath, string fileExtension)
		{
			return null;
		}

		[Token(Token = "0x6000084")]
		[Address(RVA = "0x297DCB0", Offset = "0x297DCB0", VA = "0x297DCB0")]
		public static string[] GetFilesNames(string directoryPath)
		{
			return null;
		}

		[Token(Token = "0x6000085")]
		[Address(RVA = "0x297DE74", Offset = "0x297DE74", VA = "0x297DE74")]
		public static string[] GetFilesNames(string directoryPath, string fileExtension)
		{
			return null;
		}

		[Token(Token = "0x6000086")]
		[Address(RVA = "0x297E040", Offset = "0x297E040", VA = "0x297E040")]
		public static DirectoryInfo[] GetDirectories(string directoryPath)
		{
			return null;
		}

		[Token(Token = "0x6000087")]
		[Address(RVA = "0x297E0B0", Offset = "0x297E0B0", VA = "0x297E0B0")]
		public static string[] GetDirectoriesNames(string directoryPath)
		{
			return null;
		}
	}
}
namespace QuickEngine.Extensions
{
	[Token(Token = "0x2000019")]
	public static class ArrayAndListExtensions
	{
		[Token(Token = "0x6000088")]
		public static bool IsNullOrEmpty<T>(this T[] array)
		{
			return default(bool);
		}

		[Token(Token = "0x6000089")]
		public static bool IsNullOrEmpty<T>(this List<T> list)
		{
			return default(bool);
		}

		[Token(Token = "0x600008A")]
		public static bool IsNullOrEmpty<TKey, TValue>(this Dictionary<TKey, TValue> dict)
		{
			return default(bool);
		}

		[Token(Token = "0x600008B")]
		public static T GetRandomElement<T>(this T[] array)
		{
			return (T)null;
		}

		[Token(Token = "0x600008C")]
		public static T GetRandomElement<T>(this List<T> list)
		{
			return (T)null;
		}

		[Token(Token = "0x600008D")]
		public static void ShuffleArray<T>(this T[] array)
		{
		}

		[Token(Token = "0x600008E")]
		public static void ShuffleList<T>(this List<T> list)
		{
		}

		[Token(Token = "0x600008F")]
		public static string ToString<T>(this T[] array, string separator)
		{
			return null;
		}

		[Token(Token = "0x6000090")]
		public static string ToString<T>(this List<T> list, string separator)
		{
			return null;
		}

		[Token(Token = "0x6000091")]
		public static string ToString<T>(this T[] array, char separator)
		{
			return null;
		}

		[Token(Token = "0x6000092")]
		public static string ToString<T>(this List<T> list, char separator)
		{
			return null;
		}
	}
	[Token(Token = "0x200001A")]
	public static class AudioExtensions
	{
		[Token(Token = "0x20001A3")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC8694", Offset = "0xFC8694")]
		private sealed class <PlayOneShotDelayed>d__0 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40008E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40008E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40008E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float aDelay;

			[Token(Token = "0x40008E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public AudioSource anAudioSource;

			[Token(Token = "0x40008E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public AudioClip anAudioClip;

			[Token(Token = "0x1700032B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F14")]
				[Address(RVA = "0x1F15084", Offset = "0x1F15084", VA = "0x1F15084", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700032C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F16")]
				[Address(RVA = "0x1F150EC", Offset = "0x1F150EC", VA = "0x1F150EC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F11")]
			[Address(RVA = "0x1F14E1C", Offset = "0x1F14E1C", VA = "0x1F14E1C")]
			[DebuggerHidden]
			public <PlayOneShotDelayed>d__0(int <>1__state)
			{
			}

			[Token(Token = "0x6000F12")]
			[Address(RVA = "0x1F14FE0", Offset = "0x1F14FE0", VA = "0x1F14FE0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F13")]
			[Address(RVA = "0x1F14FE4", Offset = "0x1F14FE4", VA = "0x1F14FE4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F15")]
			[Address(RVA = "0x1F1508C", Offset = "0x1F1508C", VA = "0x1F1508C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6000093")]
		[Address(RVA = "0x1F14D74", Offset = "0x1F14D74", VA = "0x1F14D74")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xFD4D5C", Offset = "0xFD4D5C")]
		public static IEnumerator PlayOneShotDelayed(this AudioSource anAudioSource, AudioClip anAudioClip, float aDelay)
		{
			return null;
		}

		[Token(Token = "0x6000094")]
		[Address(RVA = "0x1F14E48", Offset = "0x1F14E48", VA = "0x1F14E48")]
		public static AudioType PlatformAudioType()
		{
			return default(AudioType);
		}

		[Token(Token = "0x6000095")]
		[Address(RVA = "0x1F14E50", Offset = "0x1F14E50", VA = "0x1F14E50")]
		public static string PlatformAudioExtension()
		{
			return null;
		}

		[Token(Token = "0x6000096")]
		[Address(RVA = "0x1F14E98", Offset = "0x1F14E98", VA = "0x1F14E98")]
		public static string PlatformFileProtocol()
		{
			return null;
		}

		[Token(Token = "0x6000097")]
		[Address(RVA = "0x1F14EE0", Offset = "0x1F14EE0", VA = "0x1F14EE0")]
		public static float ToDecibel(this float linear)
		{
			return default(float);
		}

		[Token(Token = "0x6000098")]
		[Address(RVA = "0x1F14F6C", Offset = "0x1F14F6C", VA = "0x1F14F6C")]
		public static float ToLinear(this float dB)
		{
			return default(float);
		}
	}
	[Token(Token = "0x200001B")]
	public static class BoolExtensions
	{
		[Token(Token = "0x6000099")]
		[Address(RVA = "0x1F150F4", Offset = "0x1F150F4", VA = "0x1F150F4")]
		public static bool IsTrue(this bool @bool)
		{
			return default(bool);
		}

		[Token(Token = "0x600009A")]
		[Address(RVA = "0x1F150FC", Offset = "0x1F150FC", VA = "0x1F150FC")]
		public static bool IsFalse(this bool @bool)
		{
			return default(bool);
		}

		[Token(Token = "0x600009B")]
		[Address(RVA = "0x1F15108", Offset = "0x1F15108", VA = "0x1F15108")]
		public static bool Toggle(this bool @bool)
		{
			return default(bool);
		}

		[Token(Token = "0x600009C")]
		[Address(RVA = "0x1F15114", Offset = "0x1F15114", VA = "0x1F15114")]
		public static int ToInt(this bool @bool)
		{
			return default(int);
		}

		[Token(Token = "0x600009D")]
		[Address(RVA = "0x1F1511C", Offset = "0x1F1511C", VA = "0x1F1511C")]
		public static string ToLowerString(this bool @bool)
		{
			return null;
		}

		[Token(Token = "0x600009E")]
		[Address(RVA = "0x1F15158", Offset = "0x1F15158", VA = "0x1F15158")]
		public static string ToString(this bool @bool, string trueString, string falseString)
		{
			return null;
		}

		[Token(Token = "0x600009F")]
		public static T ToType<T>(this bool @bool, T trueValue, T falseValue)
		{
			return (T)null;
		}
	}
	[Token(Token = "0x200001C")]
	public static class CameraExtensions
	{
		[Token(Token = "0x60000A0")]
		[Address(RVA = "0x1F151C0", Offset = "0x1F151C0", VA = "0x1F151C0")]
		public static Vector2 Pixel2Units2D(this Camera c)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60000A1")]
		[Address(RVA = "0x1F15430", Offset = "0x1F15430", VA = "0x1F15430")]
		public static Vector2 Unit2Pixels2D(this Camera c)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60000A2")]
		[Address(RVA = "0x1F15694", Offset = "0x1F15694", VA = "0x1F15694")]
		public static Vector2 ToWorldSize(this Camera camera, Bounds bounds)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60000A3")]
		[Address(RVA = "0x1F1574C", Offset = "0x1F1574C", VA = "0x1F1574C")]
		public static Vector2 ToScreenSize(this Camera camera, Bounds bounds)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60000A4")]
		[Address(RVA = "0x1F15840", Offset = "0x1F15840", VA = "0x1F15840")]
		public static Rect ToScreenRect(this Camera camera, Renderer renderer)
		{
			return default(Rect);
		}

		[Token(Token = "0x60000A5")]
		[Address(RVA = "0x1F159AC", Offset = "0x1F159AC", VA = "0x1F159AC")]
		public static Rect ToWorldRect(this Camera camera, Renderer renderer)
		{
			return default(Rect);
		}

		[Token(Token = "0x60000A6")]
		[Address(RVA = "0x1F15AD8", Offset = "0x1F15AD8", VA = "0x1F15AD8")]
		public static Vector3 EdgePosition(this Camera camera, TextAnchor point, float distance)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x200001D")]
	public static class ColorExtensions
	{
		[Token(Token = "0x400003E")]
		private const float LightOffset = 0.0625f;

		[Token(Token = "0x400003F")]
		private const float DarkerFactor = 0.9f;

		[Token(Token = "0x60000A7")]
		[Address(RVA = "0x1F15C5C", Offset = "0x1F15C5C", VA = "0x1F15C5C")]
		public static Color ColorFrom256(this Color color, float r, float g, float b, float a = 256f)
		{
			return default(Color);
		}

		[Token(Token = "0x60000A8")]
		[Address(RVA = "0x1F15CA4", Offset = "0x1F15CA4", VA = "0x1F15CA4")]
		public static Color ColorFrom256(float r, float g, float b, float a = 256f)
		{
			return default(Color);
		}

		[Token(Token = "0x60000A9")]
		[Address(RVA = "0x1F15CEC", Offset = "0x1F15CEC", VA = "0x1F15CEC")]
		public static Color Lighter(this Color color)
		{
			return default(Color);
		}

		[Token(Token = "0x60000AA")]
		[Address(RVA = "0x1F15D30", Offset = "0x1F15D30", VA = "0x1F15D30")]
		public static Color Darker(this Color color)
		{
			return default(Color);
		}

		[Token(Token = "0x60000AB")]
		[Address(RVA = "0x1F15D74", Offset = "0x1F15D74", VA = "0x1F15D74")]
		public static float Brightness(this Color color)
		{
			return default(float);
		}

		[Token(Token = "0x60000AC")]
		[Address(RVA = "0x1F15D88", Offset = "0x1F15D88", VA = "0x1F15D88")]
		public static Color WithBrightness(this Color color, float brightness)
		{
			return default(Color);
		}

		[Token(Token = "0x60000AD")]
		[Address(RVA = "0x1F15E28", Offset = "0x1F15E28", VA = "0x1F15E28")]
		public static bool IsApproximatelyBlack(this Color color)
		{
			return default(bool);
		}

		[Token(Token = "0x60000AE")]
		[Address(RVA = "0x1F15EBC", Offset = "0x1F15EBC", VA = "0x1F15EBC")]
		public static bool IsApproximatelyWhite(this Color color)
		{
			return default(bool);
		}

		[Token(Token = "0x60000AF")]
		[Address(RVA = "0x1F15F58", Offset = "0x1F15F58", VA = "0x1F15F58")]
		public static Color Opaque(this Color color)
		{
			return default(Color);
		}

		[Token(Token = "0x60000B0")]
		[Address(RVA = "0x1F15F88", Offset = "0x1F15F88", VA = "0x1F15F88")]
		public static Color Invert(this Color color)
		{
			return default(Color);
		}

		[Token(Token = "0x60000B1")]
		[Address(RVA = "0x1F15FC8", Offset = "0x1F15FC8", VA = "0x1F15FC8")]
		public static Color WithAlpha(this Color color, float alpha)
		{
			return default(Color);
		}
	}
	[Token(Token = "0x200001E")]
	public static class DateTimeExtensions
	{
		[Token(Token = "0x60000B2")]
		[Address(RVA = "0x1F15FFC", Offset = "0x1F15FFC", VA = "0x1F15FFC")]
		public static bool IsBetween(this DateTime date, DateTime from, DateTime to)
		{
			return default(bool);
		}

		[Token(Token = "0x60000B3")]
		[Address(RVA = "0x1F160B8", Offset = "0x1F160B8", VA = "0x1F160B8")]
		public static DateTime Midnight(this DateTime date)
		{
			return default(DateTime);
		}

		[Token(Token = "0x60000B4")]
		[Address(RVA = "0x1F16128", Offset = "0x1F16128", VA = "0x1F16128")]
		public static DateTime FirstOfMonth(this DateTime date)
		{
			return default(DateTime);
		}

		[Token(Token = "0x60000B5")]
		[Address(RVA = "0x1F16184", Offset = "0x1F16184", VA = "0x1F16184")]
		public static DateTime EndOfMonth(this DateTime date)
		{
			return default(DateTime);
		}

		[Token(Token = "0x60000B6")]
		[Address(RVA = "0x1F1620C", Offset = "0x1F1620C", VA = "0x1F1620C")]
		public static DateTime Yesterday(this DateTime date)
		{
			return default(DateTime);
		}

		[Token(Token = "0x60000B7")]
		[Address(RVA = "0x1F16238", Offset = "0x1F16238", VA = "0x1F16238")]
		public static DateTime YesterdayMidnight(this DateTime date)
		{
			return default(DateTime);
		}

		[Token(Token = "0x60000B8")]
		[Address(RVA = "0x1F16268", Offset = "0x1F16268", VA = "0x1F16268")]
		public static DateTime Tomorrow(this DateTime date)
		{
			return default(DateTime);
		}

		[Token(Token = "0x60000B9")]
		[Address(RVA = "0x1F16294", Offset = "0x1F16294", VA = "0x1F16294")]
		public static DateTime TomorrowMidnight(this DateTime date)
		{
			return default(DateTime);
		}

		[Token(Token = "0x60000BA")]
		[Address(RVA = "0x1F162C4", Offset = "0x1F162C4", VA = "0x1F162C4")]
		public static bool IsSameDay(this DateTime date, DateTime compareDate)
		{
			return default(bool);
		}

		[Token(Token = "0x60000BB")]
		[Address(RVA = "0x1F16304", Offset = "0x1F16304", VA = "0x1F16304")]
		public static bool IsLaterDate(this DateTime date, DateTime compareDate)
		{
			return default(bool);
		}

		[Token(Token = "0x60000BC")]
		[Address(RVA = "0x1F1637C", Offset = "0x1F1637C", VA = "0x1F1637C")]
		public static bool IsOlderDate(this DateTime date, DateTime compareDate)
		{
			return default(bool);
		}

		[Token(Token = "0x60000BD")]
		[Address(RVA = "0x1F163F4", Offset = "0x1F163F4", VA = "0x1F163F4")]
		public static bool IsToday(this DateTime date)
		{
			return default(bool);
		}

		[Token(Token = "0x60000BE")]
		[Address(RVA = "0x1F164A0", Offset = "0x1F164A0", VA = "0x1F164A0")]
		public static bool IsTomorrow(this DateTime date)
		{
			return default(bool);
		}

		[Token(Token = "0x60000BF")]
		[Address(RVA = "0x1F16560", Offset = "0x1F16560", VA = "0x1F16560")]
		public static bool IsYesterday(this DateTime date)
		{
			return default(bool);
		}

		[Token(Token = "0x60000C0")]
		[Address(RVA = "0x1F16620", Offset = "0x1F16620", VA = "0x1F16620")]
		public static string ToDdMmYySlash(this DateTime date)
		{
			return null;
		}

		[Token(Token = "0x60000C1")]
		[Address(RVA = "0x1F16678", Offset = "0x1F16678", VA = "0x1F16678")]
		public static string ToDdMmYyDot(this DateTime date)
		{
			return null;
		}

		[Token(Token = "0x60000C2")]
		[Address(RVA = "0x1F166D0", Offset = "0x1F166D0", VA = "0x1F166D0")]
		public static string ToDdMmYyHyphen(this DateTime date)
		{
			return null;
		}

		[Token(Token = "0x60000C3")]
		[Address(RVA = "0x1F16728", Offset = "0x1F16728", VA = "0x1F16728")]
		public static string ToDdMmYyWithSep(this DateTime date, string separator)
		{
			return null;
		}

		[Token(Token = "0x60000C4")]
		[Address(RVA = "0x1F1679C", Offset = "0x1F1679C", VA = "0x1F1679C")]
		public static string ToDdMmYyyySlash(this DateTime date)
		{
			return null;
		}

		[Token(Token = "0x60000C5")]
		[Address(RVA = "0x1F167F4", Offset = "0x1F167F4", VA = "0x1F167F4")]
		public static string ToDdMmYyyyDot(this DateTime date)
		{
			return null;
		}

		[Token(Token = "0x60000C6")]
		[Address(RVA = "0x1F1684C", Offset = "0x1F1684C", VA = "0x1F1684C")]
		public static string ToDdMmYyyyHyphen(this DateTime date)
		{
			return null;
		}

		[Token(Token = "0x60000C7")]
		[Address(RVA = "0x1F168A4", Offset = "0x1F168A4", VA = "0x1F168A4")]
		public static string ToDdMmYyyyWithSep(this DateTime date, string separator)
		{
			return null;
		}
	}
	[Token(Token = "0x200001F")]
	public static class DictionaryExtenstions
	{
		[Token(Token = "0x60000C8")]
		public static bool AddIfKeyNotPresent<TKey, TValue>(this Dictionary<TKey, TValue> dict, TKey key, TValue value)
		{
			return default(bool);
		}

		[Token(Token = "0x60000C9")]
		public static void AddOrUpdate<TKey, TValue>(this Dictionary<TKey, TValue> dict, TKey key, TValue value)
		{
		}

		[Token(Token = "0x60000CA")]
		public static bool TryAddKey<TKey, TValue>(this Dictionary<TKey, TValue> dict, TKey key, TValue value)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000020")]
	public static class FloatExtensions
	{
		[Token(Token = "0x60000CB")]
		[Address(RVA = "0x1F16918", Offset = "0x1F16918", VA = "0x1F16918")]
		public static float Round(this float f, int decimals = 1)
		{
			return default(float);
		}

		[Token(Token = "0x60000CC")]
		[Address(RVA = "0x1F16998", Offset = "0x1F16998", VA = "0x1F16998")]
		public static float Round(this float f)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000021")]
	public static class IListExtensions
	{
		[Token(Token = "0x60000CD")]
		public static bool IsNullOrEmpty<T>(this IList<T> items)
		{
			return default(bool);
		}

		[Token(Token = "0x60000CE")]
		public static bool NotNullOrEmpty<T>(this IList<T> items)
		{
			return default(bool);
		}

		[Token(Token = "0x60000CF")]
		public static void Shuffle<T>(this IList<T> list)
		{
		}
	}
	[Token(Token = "0x2000022")]
	public static class RectTransformExtensions
	{
		[Token(Token = "0x60000D0")]
		[Address(RVA = "0x1F16A7C", Offset = "0x1F16A7C", VA = "0x1F16A7C")]
		public static void SetDefaultScale(this RectTransform trans)
		{
		}

		[Token(Token = "0x60000D1")]
		[Address(RVA = "0x1F16ADC", Offset = "0x1F16ADC", VA = "0x1F16ADC")]
		public static void SetPivotAndAnchors(this RectTransform trans, Vector2 aVec)
		{
		}

		[Token(Token = "0x60000D2")]
		[Address(RVA = "0x1F16B3C", Offset = "0x1F16B3C", VA = "0x1F16B3C")]
		public static void SetAnchors(this RectTransform trans, Vector2 aVec)
		{
		}

		[Token(Token = "0x60000D3")]
		[Address(RVA = "0x1F16B88", Offset = "0x1F16B88", VA = "0x1F16B88")]
		public static Vector2 GetSize(this RectTransform trans)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60000D4")]
		[Address(RVA = "0x1F16BC8", Offset = "0x1F16BC8", VA = "0x1F16BC8")]
		public static float GetWidth(this RectTransform trans)
		{
			return default(float);
		}

		[Token(Token = "0x60000D5")]
		[Address(RVA = "0x1F16C08", Offset = "0x1F16C08", VA = "0x1F16C08")]
		public static float GetHeight(this RectTransform trans)
		{
			return default(float);
		}

		[Token(Token = "0x60000D6")]
		[Address(RVA = "0x1F16C48", Offset = "0x1F16C48", VA = "0x1F16C48")]
		public static void SetPositionOfPivot(this RectTransform trans, Vector2 newPos)
		{
		}

		[Token(Token = "0x60000D7")]
		[Address(RVA = "0x1F16CBC", Offset = "0x1F16CBC", VA = "0x1F16CBC")]
		public static void SetLeftBottomPosition(this RectTransform trans, Vector2 newPos)
		{
		}

		[Token(Token = "0x60000D8")]
		[Address(RVA = "0x1F16DB4", Offset = "0x1F16DB4", VA = "0x1F16DB4")]
		public static void SetLeftTopPosition(this RectTransform trans, Vector2 newPos)
		{
		}

		[Token(Token = "0x60000D9")]
		[Address(RVA = "0x1F16EB4", Offset = "0x1F16EB4", VA = "0x1F16EB4")]
		public static void SetRightBottomPosition(this RectTransform trans, Vector2 newPos)
		{
		}

		[Token(Token = "0x60000DA")]
		[Address(RVA = "0x1F16FB4", Offset = "0x1F16FB4", VA = "0x1F16FB4")]
		public static void SetRightTopPosition(this RectTransform trans, Vector2 newPos)
		{
		}

		[Token(Token = "0x60000DB")]
		[Address(RVA = "0x1F170B8", Offset = "0x1F170B8", VA = "0x1F170B8")]
		public static void SetSize(this RectTransform trans, Vector2 newSize)
		{
		}

		[Token(Token = "0x60000DC")]
		[Address(RVA = "0x1F17270", Offset = "0x1F17270", VA = "0x1F17270")]
		public static void SetWidth(this RectTransform trans, float newSize)
		{
		}

		[Token(Token = "0x60000DD")]
		[Address(RVA = "0x1F172E8", Offset = "0x1F172E8", VA = "0x1F172E8")]
		public static void SetHeight(this RectTransform trans, float newSize)
		{
		}
	}
	[Token(Token = "0x2000023")]
	public static class StringExtensions
	{
		[Token(Token = "0x60000DE")]
		[Address(RVA = "0x1F17360", Offset = "0x1F17360", VA = "0x1F17360")]
		public static string RemoveWhitespaces(this string str)
		{
			return null;
		}

		[Token(Token = "0x60000DF")]
		[Address(RVA = "0x1F173C8", Offset = "0x1F173C8", VA = "0x1F173C8")]
		public static string RemoveAllTypesOfWhitespaces(this string str)
		{
			return null;
		}

		[Token(Token = "0x60000E0")]
		[Address(RVA = "0x1F17448", Offset = "0x1F17448", VA = "0x1F17448")]
		public static bool IsNumeric(this string str)
		{
			return default(bool);
		}

		[Token(Token = "0x60000E1")]
		[Address(RVA = "0x1F174F4", Offset = "0x1F174F4", VA = "0x1F174F4")]
		public static bool ContainsNumeric(this string str)
		{
			return default(bool);
		}

		[Token(Token = "0x60000E2")]
		[Address(RVA = "0x1F14C28", Offset = "0x1F14C28", VA = "0x1F14C28")]
		public static bool IsNullOrEmpty(this string str)
		{
			return default(bool);
		}

		[Token(Token = "0x60000E3")]
		[Address(RVA = "0x1F17590", Offset = "0x1F17590", VA = "0x1F17590")]
		public static string ToTitleCase(this string str)
		{
			return null;
		}

		[Token(Token = "0x60000E4")]
		[Address(RVA = "0x1F175FC", Offset = "0x1F175FC", VA = "0x1F175FC")]
		public static string UnPascalCase(this string text)
		{
			return null;
		}

		[Token(Token = "0x60000E5")]
		[Address(RVA = "0x1F17894", Offset = "0x1F17894", VA = "0x1F17894")]
		public static string RemoveDiacritics(this string stIn)
		{
			return null;
		}

		[Token(Token = "0x60000E6")]
		[Address(RVA = "0x1F179D8", Offset = "0x1F179D8", VA = "0x1F179D8")]
		public static char GetAccent(this string stIn)
		{
			return default(char);
		}

		[Token(Token = "0x60000E7")]
		[Address(RVA = "0x1F17B54", Offset = "0x1F17B54", VA = "0x1F17B54")]
		public static bool IsDiacriticsed(this string stIn)
		{
			return default(bool);
		}

		[Token(Token = "0x60000E8")]
		[Address(RVA = "0x1F17C34", Offset = "0x1F17C34", VA = "0x1F17C34")]
		public static string FixNewLine(this string s)
		{
			return null;
		}

		[Token(Token = "0x60000E9")]
		[Address(RVA = "0x1F17CDC", Offset = "0x1F17CDC", VA = "0x1F17CDC")]
		public static string StripTagsRegex(this string source)
		{
			return null;
		}

		[Token(Token = "0x60000EA")]
		[Address(RVA = "0x1F17D68", Offset = "0x1F17D68", VA = "0x1F17D68")]
		public static string StripTagsCharArray(this string source)
		{
			return null;
		}

		[Token(Token = "0x60000EB")]
		[Address(RVA = "0x1F17E78", Offset = "0x1F17E78", VA = "0x1F17E78")]
		public static string[] Split(this string s, string separator, StringSplitOptions splitOptions = StringSplitOptions.None)
		{
			return null;
		}

		[Token(Token = "0x60000EC")]
		[Address(RVA = "0x1F17F44", Offset = "0x1F17F44", VA = "0x1F17F44")]
		public static int OccurenceCount(this string str, string val)
		{
			return default(int);
		}

		[Token(Token = "0x60000ED")]
		[Address(RVA = "0x1F17FA8", Offset = "0x1F17FA8", VA = "0x1F17FA8")]
		public static int NthIndexOf(this string target, string value, int n)
		{
			return default(int);
		}

		[Token(Token = "0x60000EE")]
		[Address(RVA = "0x1F18044", Offset = "0x1F18044", VA = "0x1F18044")]
		public static bool Contains(this string source, string toCheck, StringComparison comp = StringComparison.Ordinal)
		{
			return default(bool);
		}

		[Token(Token = "0x60000EF")]
		[Address(RVA = "0x1F1806C", Offset = "0x1F1806C", VA = "0x1F1806C")]
		public static bool EndsWith(this string a, string b)
		{
			return default(bool);
		}

		[Token(Token = "0x60000F0")]
		[Address(RVA = "0x1F18138", Offset = "0x1F18138", VA = "0x1F18138")]
		public static bool StartsWith(this string a, string b)
		{
			return default(bool);
		}

		[Token(Token = "0x60000F1")]
		[Address(RVA = "0x1F18200", Offset = "0x1F18200", VA = "0x1F18200")]
		public static bool RegexMatch(this string a, string b)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000024")]
	public static class TransformExtensions
	{
		[Token(Token = "0x60000F2")]
		[Address(RVA = "0x1F1828C", Offset = "0x1F1828C", VA = "0x1F1828C")]
		public static void SetX(this Transform transform, float x)
		{
		}

		[Token(Token = "0x60000F3")]
		[Address(RVA = "0x1F1830C", Offset = "0x1F1830C", VA = "0x1F1830C")]
		public static void SetY(this Transform transform, float y)
		{
		}

		[Token(Token = "0x60000F4")]
		[Address(RVA = "0x1F1838C", Offset = "0x1F1838C", VA = "0x1F1838C")]
		public static void SetZ(this Transform transform, float z)
		{
		}

		[Token(Token = "0x60000F5")]
		[Address(RVA = "0x1F1840C", Offset = "0x1F1840C", VA = "0x1F1840C")]
		public static void SetXY(this Transform transform, float x, float y)
		{
		}

		[Token(Token = "0x60000F6")]
		[Address(RVA = "0x1F18480", Offset = "0x1F18480", VA = "0x1F18480")]
		public static void SetXZ(this Transform transform, float x, float z)
		{
		}

		[Token(Token = "0x60000F7")]
		[Address(RVA = "0x1F184F4", Offset = "0x1F184F4", VA = "0x1F184F4")]
		public static void SetYZ(this Transform transform, float y, float z)
		{
		}

		[Token(Token = "0x60000F8")]
		[Address(RVA = "0x1F18568", Offset = "0x1F18568", VA = "0x1F18568")]
		public static void SetXYZ(this Transform transform, float x, float y, float z)
		{
		}

		[Token(Token = "0x60000F9")]
		[Address(RVA = "0x1F185BC", Offset = "0x1F185BC", VA = "0x1F185BC")]
		public static void TranslateX(this Transform transform, float x)
		{
		}

		[Token(Token = "0x60000FA")]
		[Address(RVA = "0x1F186B4", Offset = "0x1F186B4", VA = "0x1F186B4")]
		public static void TranslateY(this Transform transform, float y)
		{
		}

		[Token(Token = "0x60000FB")]
		[Address(RVA = "0x1F187AC", Offset = "0x1F187AC", VA = "0x1F187AC")]
		public static void TranslateZ(this Transform transform, float z)
		{
		}

		[Token(Token = "0x60000FC")]
		[Address(RVA = "0x1F188A4", Offset = "0x1F188A4", VA = "0x1F188A4")]
		public static void TranslateXYZ(this Transform transform, float x, float y, float z)
		{
		}

		[Token(Token = "0x60000FD")]
		[Address(RVA = "0x1F189A4", Offset = "0x1F189A4", VA = "0x1F189A4")]
		public static void SetLocalX(this Transform transform, float x)
		{
		}

		[Token(Token = "0x60000FE")]
		[Address(RVA = "0x1F18A24", Offset = "0x1F18A24", VA = "0x1F18A24")]
		public static void SetLocalY(this Transform transform, float y)
		{
		}

		[Token(Token = "0x60000FF")]
		[Address(RVA = "0x1F18AA4", Offset = "0x1F18AA4", VA = "0x1F18AA4")]
		public static void SetLocalZ(this Transform transform, float z)
		{
		}

		[Token(Token = "0x6000100")]
		[Address(RVA = "0x1F18B24", Offset = "0x1F18B24", VA = "0x1F18B24")]
		public static void SetLocalXY(this Transform transform, float x, float y)
		{
		}

		[Token(Token = "0x6000101")]
		[Address(RVA = "0x1F18B98", Offset = "0x1F18B98", VA = "0x1F18B98")]
		public static void SetLocalXZ(this Transform transform, float x, float z)
		{
		}

		[Token(Token = "0x6000102")]
		[Address(RVA = "0x1F18C10", Offset = "0x1F18C10", VA = "0x1F18C10")]
		public static void SetLocalYZ(this Transform transform, float y, float z)
		{
		}

		[Token(Token = "0x6000103")]
		[Address(RVA = "0x1F18C84", Offset = "0x1F18C84", VA = "0x1F18C84")]
		public static void SetLocalXYZ(this Transform transform, float x, float y, float z)
		{
		}

		[Token(Token = "0x6000104")]
		[Address(RVA = "0x1F18CD8", Offset = "0x1F18CD8", VA = "0x1F18CD8")]
		public static void ResetPosition(this Transform transform)
		{
		}

		[Token(Token = "0x6000105")]
		[Address(RVA = "0x1F18D50", Offset = "0x1F18D50", VA = "0x1F18D50")]
		public static void ResetLocalPosition(this Transform transform)
		{
		}

		[Token(Token = "0x6000106")]
		[Address(RVA = "0x1F18DC8", Offset = "0x1F18DC8", VA = "0x1F18DC8")]
		public static void RotateAroundX(this Transform transform, float angle)
		{
		}

		[Token(Token = "0x6000107")]
		[Address(RVA = "0x1F18E24", Offset = "0x1F18E24", VA = "0x1F18E24")]
		public static void RotateAroundY(this Transform transform, float angle)
		{
		}

		[Token(Token = "0x6000108")]
		[Address(RVA = "0x1F18E84", Offset = "0x1F18E84", VA = "0x1F18E84")]
		public static void RotateAroundZ(this Transform transform, float angle)
		{
		}

		[Token(Token = "0x6000109")]
		[Address(RVA = "0x1F18EE4", Offset = "0x1F18EE4", VA = "0x1F18EE4")]
		public static void SetRotationX(this Transform transform, float angle)
		{
		}

		[Token(Token = "0x600010A")]
		[Address(RVA = "0x1F18F40", Offset = "0x1F18F40", VA = "0x1F18F40")]
		public static void SetRotationY(this Transform transform, float angle)
		{
		}

		[Token(Token = "0x600010B")]
		[Address(RVA = "0x1F18FA0", Offset = "0x1F18FA0", VA = "0x1F18FA0")]
		public static void SetRotationZ(this Transform transform, float angle)
		{
		}

		[Token(Token = "0x600010C")]
		[Address(RVA = "0x1F19000", Offset = "0x1F19000", VA = "0x1F19000")]
		public static void SetLocalRotationX(this Transform transform, float angle)
		{
		}

		[Token(Token = "0x600010D")]
		[Address(RVA = "0x1F190B8", Offset = "0x1F190B8", VA = "0x1F190B8")]
		public static void SetLocalRotationY(this Transform transform, float angle)
		{
		}

		[Token(Token = "0x600010E")]
		[Address(RVA = "0x1F19170", Offset = "0x1F19170", VA = "0x1F19170")]
		public static void SetLocalRotationZ(this Transform transform, float angle)
		{
		}

		[Token(Token = "0x600010F")]
		[Address(RVA = "0x1F19228", Offset = "0x1F19228", VA = "0x1F19228")]
		public static void ResetRotation(this Transform transform)
		{
		}

		[Token(Token = "0x6000110")]
		[Address(RVA = "0x1F192A0", Offset = "0x1F192A0", VA = "0x1F192A0")]
		public static void ResetLocalRotation(this Transform transform)
		{
		}

		[Token(Token = "0x6000111")]
		[Address(RVA = "0x1F19318", Offset = "0x1F19318", VA = "0x1F19318")]
		public static void SetScaleX(this Transform transform, float x)
		{
		}

		[Token(Token = "0x6000112")]
		[Address(RVA = "0x1F19398", Offset = "0x1F19398", VA = "0x1F19398")]
		public static void SetScaleY(this Transform transform, float y)
		{
		}

		[Token(Token = "0x6000113")]
		[Address(RVA = "0x1F19418", Offset = "0x1F19418", VA = "0x1F19418")]
		public static void SetScaleZ(this Transform transform, float z)
		{
		}

		[Token(Token = "0x6000114")]
		[Address(RVA = "0x1F19498", Offset = "0x1F19498", VA = "0x1F19498")]
		public static void SetScaleXY(this Transform transform, float x, float y)
		{
		}

		[Token(Token = "0x6000115")]
		[Address(RVA = "0x1F1950C", Offset = "0x1F1950C", VA = "0x1F1950C")]
		public static void SetScaleXZ(this Transform transform, float x, float z)
		{
		}

		[Token(Token = "0x6000116")]
		[Address(RVA = "0x1F19580", Offset = "0x1F19580", VA = "0x1F19580")]
		public static void SetScaleYZ(this Transform transform, float y, float z)
		{
		}

		[Token(Token = "0x6000117")]
		[Address(RVA = "0x1F195F4", Offset = "0x1F195F4", VA = "0x1F195F4")]
		public static void SetScaleXYZ(this Transform transform, float x, float y, float z)
		{
		}

		[Token(Token = "0x6000118")]
		[Address(RVA = "0x1F19648", Offset = "0x1F19648", VA = "0x1F19648")]
		public static void ScaleByX(this Transform transform, float x)
		{
		}

		[Token(Token = "0x6000119")]
		[Address(RVA = "0x1F196E0", Offset = "0x1F196E0", VA = "0x1F196E0")]
		public static void ScaleByY(this Transform transform, float y)
		{
		}

		[Token(Token = "0x600011A")]
		[Address(RVA = "0x1F19778", Offset = "0x1F19778", VA = "0x1F19778")]
		public static void ScaleByZ(this Transform transform, float z)
		{
		}

		[Token(Token = "0x600011B")]
		[Address(RVA = "0x1F19814", Offset = "0x1F19814", VA = "0x1F19814")]
		public static void ScaleByXY(this Transform transform, float x, float y)
		{
		}

		[Token(Token = "0x600011C")]
		[Address(RVA = "0x1F198B0", Offset = "0x1F198B0", VA = "0x1F198B0")]
		public static void ScaleByXZ(this Transform transform, float x, float z)
		{
		}

		[Token(Token = "0x600011D")]
		[Address(RVA = "0x1F19950", Offset = "0x1F19950", VA = "0x1F19950")]
		public static void ScaleByYZ(this Transform transform, float y, float z)
		{
		}

		[Token(Token = "0x600011E")]
		[Address(RVA = "0x1F199F0", Offset = "0x1F199F0", VA = "0x1F199F0")]
		public static void ScaleByXY(this Transform transform, float r)
		{
		}

		[Token(Token = "0x600011F")]
		[Address(RVA = "0x1F199F8", Offset = "0x1F199F8", VA = "0x1F199F8")]
		public static void ScaleByXZ(this Transform transform, float r)
		{
		}

		[Token(Token = "0x6000120")]
		[Address(RVA = "0x1F19A00", Offset = "0x1F19A00", VA = "0x1F19A00")]
		public static void ScaleByYZ(this Transform transform, float r)
		{
		}

		[Token(Token = "0x6000121")]
		[Address(RVA = "0x1F19A08", Offset = "0x1F19A08", VA = "0x1F19A08")]
		public static void ScaleByXYZ(this Transform transform, float x, float y, float z)
		{
		}

		[Token(Token = "0x6000122")]
		[Address(RVA = "0x1F19A5C", Offset = "0x1F19A5C", VA = "0x1F19A5C")]
		public static void ScaleByXYZ(this Transform transform, float r)
		{
		}

		[Token(Token = "0x6000123")]
		[Address(RVA = "0x1F19A68", Offset = "0x1F19A68", VA = "0x1F19A68")]
		public static void ResetScale(this Transform transform)
		{
		}

		[Token(Token = "0x6000124")]
		[Address(RVA = "0x1F19AE0", Offset = "0x1F19AE0", VA = "0x1F19AE0")]
		public static void FlipX(this Transform transform)
		{
		}

		[Token(Token = "0x6000125")]
		[Address(RVA = "0x1F19B14", Offset = "0x1F19B14", VA = "0x1F19B14")]
		public static void FlipY(this Transform transform)
		{
		}

		[Token(Token = "0x6000126")]
		[Address(RVA = "0x1F19B48", Offset = "0x1F19B48", VA = "0x1F19B48")]
		public static void FlipZ(this Transform transform)
		{
		}

		[Token(Token = "0x6000127")]
		[Address(RVA = "0x1F19B7C", Offset = "0x1F19B7C", VA = "0x1F19B7C")]
		public static void FlipXY(this Transform transform)
		{
		}

		[Token(Token = "0x6000128")]
		[Address(RVA = "0x1F19BCC", Offset = "0x1F19BCC", VA = "0x1F19BCC")]
		public static void FlipXZ(this Transform transform)
		{
		}

		[Token(Token = "0x6000129")]
		[Address(RVA = "0x1F19C1C", Offset = "0x1F19C1C", VA = "0x1F19C1C")]
		public static void FlipYZ(this Transform transform)
		{
		}

		[Token(Token = "0x600012A")]
		[Address(RVA = "0x1F19C6C", Offset = "0x1F19C6C", VA = "0x1F19C6C")]
		public static void FlipXYZ(this Transform transform)
		{
		}

		[Token(Token = "0x600012B")]
		[Address(RVA = "0x1F19CD0", Offset = "0x1F19CD0", VA = "0x1F19CD0")]
		public static void FlipPostive(this Transform transform)
		{
		}

		[Token(Token = "0x600012C")]
		[Address(RVA = "0x1F19DAC", Offset = "0x1F19DAC", VA = "0x1F19DAC")]
		public static void Reset(this Transform transform)
		{
		}

		[Token(Token = "0x600012D")]
		[Address(RVA = "0x1F19DD8", Offset = "0x1F19DD8", VA = "0x1F19DD8")]
		public static void ResetLocal(this Transform transform)
		{
		}
	}
	[Token(Token = "0x2000025")]
	public static class VectorExtensions
	{
		[Token(Token = "0x600012E")]
		[Address(RVA = "0x297C4C4", Offset = "0x297C4C4", VA = "0x297C4C4")]
		public static Vector2 SetX(this Vector2 v2, float x)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600012F")]
		[Address(RVA = "0x297C4F4", Offset = "0x297C4F4", VA = "0x297C4F4")]
		public static Vector2 SetY(this Vector2 v2, float y)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000130")]
		[Address(RVA = "0x297C524", Offset = "0x297C524", VA = "0x297C524")]
		public static Vector2 AddXY(this Vector2 v2, float x, float y)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000131")]
		[Address(RVA = "0x297C558", Offset = "0x297C558", VA = "0x297C558")]
		public static Vector2 Proj(this Vector2 v2, Vector2 @base)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000132")]
		[Address(RVA = "0x297C610", Offset = "0x297C610", VA = "0x297C610")]
		public static Vector2 Rej(this Vector2 v2, Vector2 @base)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000133")]
		[Address(RVA = "0x297C6BC", Offset = "0x297C6BC", VA = "0x297C6BC")]
		public static Vector2 Round(this Vector2 v2, int decimals = 1)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000134")]
		[Address(RVA = "0x297C778", Offset = "0x297C778", VA = "0x297C778")]
		public static string ToString(this Vector2 v2, int decimals = 0)
		{
			return null;
		}

		[Token(Token = "0x6000135")]
		[Address(RVA = "0x297C9BC", Offset = "0x297C9BC", VA = "0x297C9BC")]
		public static string ToString(this Vector2 v2)
		{
			return null;
		}

		[Token(Token = "0x6000136")]
		[Address(RVA = "0x297CBB4", Offset = "0x297CBB4", VA = "0x297CBB4")]
		public static Vector3 SetX(this Vector3 v3, float x)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000137")]
		[Address(RVA = "0x297CBEC", Offset = "0x297CBEC", VA = "0x297CBEC")]
		public static Vector3 SetY(this Vector3 v3, float y)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000138")]
		[Address(RVA = "0x297CC24", Offset = "0x297CC24", VA = "0x297CC24")]
		public static Vector3 SetZ(this Vector3 v3, float z)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000139")]
		[Address(RVA = "0x297CC5C", Offset = "0x297CC5C", VA = "0x297CC5C")]
		public static Vector3 AddXYZ(this Vector3 v3, float x, float y, float z)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600013A")]
		[Address(RVA = "0x297CC9C", Offset = "0x297CC9C", VA = "0x297CC9C")]
		public static Vector3 Proj(this Vector3 v3, Vector3 @base)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600013B")]
		[Address(RVA = "0x297CD7C", Offset = "0x297CD7C", VA = "0x297CD7C")]
		public static Vector3 Rej(this Vector3 v3, Vector3 @base)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600013C")]
		[Address(RVA = "0x297CE4C", Offset = "0x297CE4C", VA = "0x297CE4C")]
		public static Vector3 Round(this Vector3 v3, int decimals = 1)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600013D")]
		[Address(RVA = "0x297CF34", Offset = "0x297CF34", VA = "0x297CF34")]
		public static string ToString(this Vector3 v3, int decimals = 0)
		{
			return null;
		}

		[Token(Token = "0x600013E")]
		[Address(RVA = "0x297D220", Offset = "0x297D220", VA = "0x297D220")]
		public static string ToStringXY(this Vector3 v3)
		{
			return null;
		}

		[Token(Token = "0x600013F")]
		[Address(RVA = "0x297D418", Offset = "0x297D418", VA = "0x297D418")]
		public static Vector2 TopLeft(this Rect rect)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000140")]
		[Address(RVA = "0x297D478", Offset = "0x297D478", VA = "0x297D478")]
		public static Rect ScaleSizeBy(this Rect rect, float scale)
		{
			return default(Rect);
		}

		[Token(Token = "0x6000141")]
		[Address(RVA = "0x297D4F0", Offset = "0x297D4F0", VA = "0x297D4F0")]
		public static Rect ScaleSizeBy(this Rect rect, float scale, Vector2 pivotPoint)
		{
			return default(Rect);
		}

		[Token(Token = "0x6000142")]
		[Address(RVA = "0x297D614", Offset = "0x297D614", VA = "0x297D614")]
		public static Rect ScaleSizeBy(this Rect rect, Vector2 scale)
		{
			return default(Rect);
		}

		[Token(Token = "0x6000143")]
		[Address(RVA = "0x297D694", Offset = "0x297D694", VA = "0x297D694")]
		public static Rect ScaleSizeBy(this Rect rect, Vector2 scale, Vector2 pivotPoint)
		{
			return default(Rect);
		}
	}
}
namespace QuickEngine.Core
{
	[Token(Token = "0x2000026")]
	public class Q
	{
		[Token(Token = "0x4000040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string _PATH;

		[Token(Token = "0x17000022")]
		public static string PATH
		{
			[Token(Token = "0x6000144")]
			[Address(RVA = "0x1F14B48", Offset = "0x1F14B48", VA = "0x1F14B48")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000023")]
		public static string QUICK_EDITOR_PATH
		{
			[Token(Token = "0x6000145")]
			[Address(RVA = "0x1F14C30", Offset = "0x1F14C30", VA = "0x1F14C30")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000024")]
		public static string QUICK_ENGINE_PATH
		{
			[Token(Token = "0x6000146")]
			[Address(RVA = "0x1F14CA0", Offset = "0x1F14CA0", VA = "0x1F14CA0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000147")]
		public static T GetResource<T>(string resourcesPath, string fileName) where T : ScriptableObject
		{
			return null;
		}

		[Token(Token = "0x6000148")]
		[Address(RVA = "0x1F14D10", Offset = "0x1F14D10", VA = "0x1F14D10")]
		public Q()
		{
		}
	}
}
namespace QuickEngine.Common
{
	[Token(Token = "0x2000027")]
	public class Singleton<T> : MonoBehaviour where T : MonoBehaviour
	{
		[Token(Token = "0x4000041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool debugThis;

		[Token(Token = "0x4000042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static T _instance;

		[Token(Token = "0x4000043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static object _lock;

		[Token(Token = "0x4000044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool applicationIsQuitting;

		[Token(Token = "0x17000025")]
		public static T Instance
		{
			[Token(Token = "0x600014A")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600014B")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x600014C")]
		public Singleton()
		{
		}
	}
}
namespace DarkTonic.MasterAudio
{
	[Token(Token = "0x2000028")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xFC5FA0", Offset = "0xFC5FA0")]
	[AttributeAttribute(Name = "AudioScriptOrder", RVA = "0xFC5FA0", Offset = "0xFC5FA0")]
	public class AmbientSound : MonoBehaviour
	{
		[Token(Token = "0x4000045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SoundGroup]
		public string AmbientSoundGroup;

		[Token(Token = "0x4000046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EventSounds.VariationType variationType;

		[Token(Token = "0x4000047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string variationName;

		[Token(Token = "0x4000048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float playVolume;

		[Token(Token = "0x4000049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public MasterAudio.AmbientSoundExitMode exitMode;

		[Token(Token = "0x400004A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float exitFadeTime;

		[Token(Token = "0x400004B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public MasterAudio.AmbientSoundReEnterMode reEnterMode;

		[Token(Token = "0x400004C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float reEnterFadeTime;

		[Token(Token = "0x400004D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFC8C08", Offset = "0xFC8C08")]
		public bool FollowCaller;

		[Token(Token = "0x400004E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFC8C40", Offset = "0xFC8C40")]
		public bool UseClosestColliderPosition;

		[Token(Token = "0x400004F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
		public bool UseTopCollider;

		[Token(Token = "0x4000050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
		public bool IncludeChildColliders;

		[Token(Token = "0x4000051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFC8C78", Offset = "0xFC8C78")]
		public Transform RuntimeFollower;

		[Token(Token = "0x4000052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform _trans;

		[Token(Token = "0x4000053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float colliderMaxDistance;

		[Token(Token = "0x4000054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public long lastTimeMaxDistanceCalced;

		[Token(Token = "0x17000026")]
		public bool IsValidSoundGroup
		{
			[Token(Token = "0x6000157")]
			[Address(RVA = "0x1803A0C", Offset = "0x1803A0C", VA = "0x1803A0C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000027")]
		public Transform Trans
		{
			[Token(Token = "0x6000158")]
			[Address(RVA = "0x1804178", Offset = "0x1804178", VA = "0x1804178")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600014E")]
		[Address(RVA = "0x1803628", Offset = "0x1803628", VA = "0x1803628")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600014F")]
		[Address(RVA = "0x18038C0", Offset = "0x18038C0", VA = "0x18038C0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000150")]
		[Address(RVA = "0x1803DD4", Offset = "0x1803DD4", VA = "0x1803DD4")]
		private void StopTrackers()
		{
		}

		[Token(Token = "0x6000151")]
		[Address(RVA = "0x18045DC", Offset = "0x18045DC", VA = "0x18045DC")]
		public void CalculateRadius()
		{
		}

		[Token(Token = "0x6000152")]
		[Address(RVA = "0x18046C8", Offset = "0x18046C8", VA = "0x18046C8")]
		public AudioSource GetNamedOrFirstAudioSource()
		{
			return null;
		}

		[Token(Token = "0x6000153")]
		[Address(RVA = "0x1804A88", Offset = "0x1804A88", VA = "0x1804A88")]
		public List<AudioSource> GetAllVariationAudioSources()
		{
			return null;
		}

		[Token(Token = "0x6000154")]
		[Address(RVA = "0x1804C78", Offset = "0x1804C78", VA = "0x1804C78")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000155")]
		[Address(RVA = "0x1804ED4", Offset = "0x1804ED4", VA = "0x1804ED4")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000156")]
		[Address(RVA = "0x1805130", Offset = "0x1805130", VA = "0x1805130")]
		public void StartTrackers()
		{
		}

		[Token(Token = "0x6000159")]
		[Address(RVA = "0x180553C", Offset = "0x180553C", VA = "0x180553C")]
		public AmbientSound()
		{
		}
	}
	[Token(Token = "0x2000029")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xFC5FF0", Offset = "0xFC5FF0")]
	public class ButtonClicker : MonoBehaviour
	{
		[Token(Token = "0x4000055")]
		public const float SmallSizeMultiplier = 0.9f;

		[Token(Token = "0x4000056")]
		public const float LargeSizeMultiplier = 1.1f;

		[Token(Token = "0x4000057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool resizeOnClick;

		[Token(Token = "0x4000058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool resizeClickAllSiblings;

		[Token(Token = "0x4000059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool resizeOnHover;

		[Token(Token = "0x400005A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool resizeHoverAllSiblings;

		[Token(Token = "0x400005B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string mouseDownSound;

		[Token(Token = "0x400005C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string mouseUpSound;

		[Token(Token = "0x400005D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string mouseClickSound;

		[Token(Token = "0x400005E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string mouseOverSound;

		[Token(Token = "0x400005F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string mouseOutSound;

		[Token(Token = "0x4000060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 _originalSize;

		[Token(Token = "0x4000061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 _smallerSize;

		[Token(Token = "0x4000062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 _largerSize;

		[Token(Token = "0x4000063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform _trans;

		[Token(Token = "0x4000064")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly Dictionary<Transform, Vector3> _siblingClickScaleByTransform;

		[Token(Token = "0x4000065")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly Dictionary<Transform, Vector3> _siblingHoverScaleByTransform;

		[Token(Token = "0x600015A")]
		[Address(RVA = "0x180C424", Offset = "0x180C424", VA = "0x180C424")]
		private void Awake()
		{
		}

		[Token(Token = "0x600015B")]
		[Address(RVA = "0x180C6E8", Offset = "0x180C6E8", VA = "0x180C6E8")]
		private void OnPress(bool isDown)
		{
		}

		[Token(Token = "0x600015C")]
		[Address(RVA = "0x180CB0C", Offset = "0x180CB0C", VA = "0x180CB0C")]
		private void OnClick()
		{
		}

		[Token(Token = "0x600015D")]
		[Address(RVA = "0x180CBA8", Offset = "0x180CBA8", VA = "0x180CBA8")]
		private void OnHover(bool isOver)
		{
		}

		[Token(Token = "0x600015E")]
		[Address(RVA = "0x180CDF4", Offset = "0x180CDF4", VA = "0x180CDF4")]
		public ButtonClicker()
		{
		}
	}
	[Token(Token = "0x200002A")]
	[AttributeAttribute(Name = "AudioScriptOrder", RVA = "0xFC6028", Offset = "0xFC6028")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xFC6028", Offset = "0xFC6028")]
	public class EventSounds : MonoBehaviour, ICustomEventReceiver
	{
		[Token(Token = "0x20001A4")]
		public enum UnityUIVersion
		{
			[Token(Token = "0x40008E6")]
			Legacy,
			[Token(Token = "0x40008E7")]
			uGUI
		}

		[Token(Token = "0x20001A5")]
		public enum EventType
		{
			[Token(Token = "0x40008E9")]
			OnStart,
			[Token(Token = "0x40008EA")]
			OnVisible,
			[Token(Token = "0x40008EB")]
			OnInvisible,
			[Token(Token = "0x40008EC")]
			OnCollision,
			[Token(Token = "0x40008ED")]
			OnTriggerEnter,
			[Token(Token = "0x40008EE")]
			OnTriggerExit,
			[Token(Token = "0x40008EF")]
			OnMouseEnter,
			[Token(Token = "0x40008F0")]
			OnMouseClick,
			[Token(Token = "0x40008F1")]
			OnSpawned,
			[Token(Token = "0x40008F2")]
			OnDespawned,
			[Token(Token = "0x40008F3")]
			OnEnable,
			[Token(Token = "0x40008F4")]
			OnDisable,
			[Token(Token = "0x40008F5")]
			OnCollision2D,
			[Token(Token = "0x40008F6")]
			OnTriggerEnter2D,
			[Token(Token = "0x40008F7")]
			OnTriggerExit2D,
			[Token(Token = "0x40008F8")]
			OnParticleCollision,
			[Token(Token = "0x40008F9")]
			UserDefinedEvent,
			[Token(Token = "0x40008FA")]
			OnCollisionExit,
			[Token(Token = "0x40008FB")]
			OnCollisionExit2D,
			[Token(Token = "0x40008FC")]
			OnMouseUp,
			[Token(Token = "0x40008FD")]
			OnMouseExit,
			[Token(Token = "0x40008FE")]
			OnMouseDrag,
			[Token(Token = "0x40008FF")]
			NGUIOnClick,
			[Token(Token = "0x4000900")]
			NGUIMouseDown,
			[Token(Token = "0x4000901")]
			NGUIMouseUp,
			[Token(Token = "0x4000902")]
			NGUIMouseEnter,
			[Token(Token = "0x4000903")]
			NGUIMouseExit,
			[Token(Token = "0x4000904")]
			MechanimStateChanged,
			[Token(Token = "0x4000905")]
			UnitySliderChanged,
			[Token(Token = "0x4000906")]
			UnityButtonClicked,
			[Token(Token = "0x4000907")]
			UnityPointerDown,
			[Token(Token = "0x4000908")]
			UnityPointerUp,
			[Token(Token = "0x4000909")]
			UnityPointerEnter,
			[Token(Token = "0x400090A")]
			UnityPointerExit,
			[Token(Token = "0x400090B")]
			UnityDrag,
			[Token(Token = "0x400090C")]
			UnityDrop,
			[Token(Token = "0x400090D")]
			UnityScroll,
			[Token(Token = "0x400090E")]
			UnityUpdateSelected,
			[Token(Token = "0x400090F")]
			UnitySelect,
			[Token(Token = "0x4000910")]
			UnityDeselect,
			[Token(Token = "0x4000911")]
			UnityMove,
			[Token(Token = "0x4000912")]
			UnityInitializePotentialDrag,
			[Token(Token = "0x4000913")]
			UnityBeginDrag,
			[Token(Token = "0x4000914")]
			UnityEndDrag,
			[Token(Token = "0x4000915")]
			UnitySubmit,
			[Token(Token = "0x4000916")]
			UnityCancel,
			[Token(Token = "0x4000917")]
			UnityToggle,
			[Token(Token = "0x4000918")]
			OnTriggerStay,
			[Token(Token = "0x4000919")]
			OnTriggerStay2D
		}

		[Token(Token = "0x20001A6")]
		public enum GlidePitchType
		{
			[Token(Token = "0x400091B")]
			None,
			[Token(Token = "0x400091C")]
			RaisePitch,
			[Token(Token = "0x400091D")]
			LowerPitch
		}

		[Token(Token = "0x20001A7")]
		public enum VariationType
		{
			[Token(Token = "0x400091F")]
			PlaySpecific,
			[Token(Token = "0x4000920")]
			PlayRandom
		}

		[Token(Token = "0x20001A8")]
		public enum PreviousSoundStopMode
		{
			[Token(Token = "0x4000922")]
			None,
			[Token(Token = "0x4000923")]
			Stop,
			[Token(Token = "0x4000924")]
			FadeOut
		}

		[Token(Token = "0x20001A9")]
		public enum RetriggerLimMode
		{
			[Token(Token = "0x4000926")]
			None,
			[Token(Token = "0x4000927")]
			FrameBased,
			[Token(Token = "0x4000928")]
			TimeBased
		}

		[Token(Token = "0x20001AA")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC86A4", Offset = "0xFC86A4")]
		private sealed class <CoUpdate>d__123 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000929")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400092A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400092B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public EventSounds <>4__this;

			[Token(Token = "0x1700032D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F1A")]
				[Address(RVA = "0x181F874", Offset = "0x181F874", VA = "0x181F874", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700032E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F1C")]
				[Address(RVA = "0x181F8DC", Offset = "0x181F8DC", VA = "0x181F8DC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F17")]
			[Address(RVA = "0x1812600", Offset = "0x1812600", VA = "0x1812600")]
			[DebuggerHidden]
			public <CoUpdate>d__123(int <>1__state)
			{
			}

			[Token(Token = "0x6000F18")]
			[Address(RVA = "0x181F6EC", Offset = "0x181F6EC", VA = "0x181F6EC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F19")]
			[Address(RVA = "0x181F6F0", Offset = "0x181F6F0", VA = "0x181F6F0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F1B")]
			[Address(RVA = "0x181F87C", Offset = "0x181F87C", VA = "0x181F87C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001AB")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC86B4", Offset = "0xFC86B4")]
		private sealed class <>c__DisplayClass165_0
		{
			[Token(Token = "0x400092C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string stateName;

			[Token(Token = "0x6000F1D")]
			[Address(RVA = "0x181400C", Offset = "0x181400C", VA = "0x181400C")]
			public <>c__DisplayClass165_0()
			{
			}

			[Token(Token = "0x6000F1E")]
			[Address(RVA = "0x181F6C8", Offset = "0x181F6C8", VA = "0x181F6C8")]
			internal bool <GetMechanimAudioEventGroup>b__0(AudioEventGroup grp)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000066")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MasterAudio.SoundSpawnLocationMode soundSpawnMode;

		[Token(Token = "0x4000067")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool disableSounds;

		[Token(Token = "0x4000068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool showPoolManager;

		[Token(Token = "0x4000069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		public bool showNGUI;

		[Token(Token = "0x400006A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioEvent eventToGizmo;

		[Token(Token = "0x400006B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityUIVersion unityUIMode;

		[Token(Token = "0x400006C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool logMissingEvents;

		[Token(Token = "0x400006D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static List<string> LayerTagFilterEvents;

		[Token(Token = "0x400006E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static List<MasterAudio.PlaylistCommand> PlaylistCommandsWithAll;

		[Token(Token = "0x400006F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioEventGroup startSound;

		[Token(Token = "0x4000070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AudioEventGroup visibleSound;

		[Token(Token = "0x4000071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AudioEventGroup invisibleSound;

		[Token(Token = "0x4000072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AudioEventGroup collisionSound;

		[Token(Token = "0x4000073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AudioEventGroup collisionExitSound;

		[Token(Token = "0x4000074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AudioEventGroup triggerSound;

		[Token(Token = "0x4000075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public AudioEventGroup triggerExitSound;

		[Token(Token = "0x4000076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AudioEventGroup triggerStaySound;

		[Token(Token = "0x4000077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public AudioEventGroup mouseEnterSound;

		[Token(Token = "0x4000078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public AudioEventGroup mouseExitSound;

		[Token(Token = "0x4000079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public AudioEventGroup mouseClickSound;

		[Token(Token = "0x400007A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public AudioEventGroup mouseUpSound;

		[Token(Token = "0x400007B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public AudioEventGroup mouseDragSound;

		[Token(Token = "0x400007C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public AudioEventGroup spawnedSound;

		[Token(Token = "0x400007D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public AudioEventGroup despawnedSound;

		[Token(Token = "0x400007E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public AudioEventGroup enableSound;

		[Token(Token = "0x400007F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public AudioEventGroup disableSound;

		[Token(Token = "0x4000080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public AudioEventGroup collision2dSound;

		[Token(Token = "0x4000081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public AudioEventGroup collisionExit2dSound;

		[Token(Token = "0x4000082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public AudioEventGroup triggerEnter2dSound;

		[Token(Token = "0x4000083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public AudioEventGroup triggerStay2dSound;

		[Token(Token = "0x4000084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public AudioEventGroup triggerExit2dSound;

		[Token(Token = "0x4000085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public AudioEventGroup particleCollisionSound;

		[Token(Token = "0x4000086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public AudioEventGroup nguiOnClickSound;

		[Token(Token = "0x4000087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public AudioEventGroup nguiMouseDownSound;

		[Token(Token = "0x4000088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public AudioEventGroup nguiMouseUpSound;

		[Token(Token = "0x4000089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public AudioEventGroup nguiMouseEnterSound;

		[Token(Token = "0x400008A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public AudioEventGroup nguiMouseExitSound;

		[Token(Token = "0x400008B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public AudioEventGroup unitySliderChangedSound;

		[Token(Token = "0x400008C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public AudioEventGroup unityButtonClickedSound;

		[Token(Token = "0x400008D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public AudioEventGroup unityPointerDownSound;

		[Token(Token = "0x400008E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public AudioEventGroup unityDragSound;

		[Token(Token = "0x400008F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public AudioEventGroup unityPointerUpSound;

		[Token(Token = "0x4000090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public AudioEventGroup unityPointerEnterSound;

		[Token(Token = "0x4000091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public AudioEventGroup unityPointerExitSound;

		[Token(Token = "0x4000092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public AudioEventGroup unityDropSound;

		[Token(Token = "0x4000093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public AudioEventGroup unityScrollSound;

		[Token(Token = "0x4000094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public AudioEventGroup unityUpdateSelectedSound;

		[Token(Token = "0x4000095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public AudioEventGroup unitySelectSound;

		[Token(Token = "0x4000096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public AudioEventGroup unityDeselectSound;

		[Token(Token = "0x4000097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public AudioEventGroup unityMoveSound;

		[Token(Token = "0x4000098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public AudioEventGroup unityInitializePotentialDragSound;

		[Token(Token = "0x4000099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public AudioEventGroup unityBeginDragSound;

		[Token(Token = "0x400009A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public AudioEventGroup unityEndDragSound;

		[Token(Token = "0x400009B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public AudioEventGroup unitySubmitSound;

		[Token(Token = "0x400009C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public AudioEventGroup unityCancelSound;

		[Token(Token = "0x400009D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public AudioEventGroup unityToggleSound;

		[Token(Token = "0x400009E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public List<AudioEventGroup> userDefinedSounds;

		[Token(Token = "0x400009F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public List<AudioEventGroup> mechanimStateChangedSounds;

		[Token(Token = "0x40000A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public bool useStartSound;

		[Token(Token = "0x40000A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B9")]
		public bool useVisibleSound;

		[Token(Token = "0x40000A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BA")]
		public bool useInvisibleSound;

		[Token(Token = "0x40000A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BB")]
		public bool useCollisionSound;

		[Token(Token = "0x40000A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		public bool useCollisionExitSound;

		[Token(Token = "0x40000A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BD")]
		public bool useTriggerEnterSound;

		[Token(Token = "0x40000A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BE")]
		public bool useTriggerExitSound;

		[Token(Token = "0x40000A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BF")]
		public bool useTriggerStaySound;

		[Token(Token = "0x40000A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		public bool useMouseEnterSound;

		[Token(Token = "0x40000A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C1")]
		public bool useMouseExitSound;

		[Token(Token = "0x40000AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C2")]
		public bool useMouseClickSound;

		[Token(Token = "0x40000AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C3")]
		public bool useMouseUpSound;

		[Token(Token = "0x40000AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		public bool useMouseDragSound;

		[Token(Token = "0x40000AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C5")]
		public bool useSpawnedSound;

		[Token(Token = "0x40000AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C6")]
		public bool useDespawnedSound;

		[Token(Token = "0x40000AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C7")]
		public bool useEnableSound;

		[Token(Token = "0x40000B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public bool useDisableSound;

		[Token(Token = "0x40000B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C9")]
		public bool useCollision2dSound;

		[Token(Token = "0x40000B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CA")]
		public bool useCollisionExit2dSound;

		[Token(Token = "0x40000B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CB")]
		public bool useTriggerEnter2dSound;

		[Token(Token = "0x40000B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		public bool useTriggerStay2dSound;

		[Token(Token = "0x40000B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CD")]
		public bool useTriggerExit2dSound;

		[Token(Token = "0x40000B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CE")]
		public bool useParticleCollisionSound;

		[Token(Token = "0x40000B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CF")]
		public bool useNguiOnClickSound;

		[Token(Token = "0x40000B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public bool useNguiMouseDownSound;

		[Token(Token = "0x40000B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D1")]
		public bool useNguiMouseUpSound;

		[Token(Token = "0x40000BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D2")]
		public bool useNguiMouseEnterSound;

		[Token(Token = "0x40000BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D3")]
		public bool useNguiMouseExitSound;

		[Token(Token = "0x40000BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		public bool useUnitySliderChangedSound;

		[Token(Token = "0x40000BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D5")]
		public bool useUnityButtonClickedSound;

		[Token(Token = "0x40000BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D6")]
		public bool useUnityPointerDownSound;

		[Token(Token = "0x40000BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D7")]
		public bool useUnityDragSound;

		[Token(Token = "0x40000C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public bool useUnityPointerUpSound;

		[Token(Token = "0x40000C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D9")]
		public bool useUnityPointerEnterSound;

		[Token(Token = "0x40000C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DA")]
		public bool useUnityPointerExitSound;

		[Token(Token = "0x40000C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DB")]
		public bool useUnityDropSound;

		[Token(Token = "0x40000C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		public bool useUnityScrollSound;

		[Token(Token = "0x40000C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DD")]
		public bool useUnityUpdateSelectedSound;

		[Token(Token = "0x40000C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DE")]
		public bool useUnitySelectSound;

		[Token(Token = "0x40000C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DF")]
		public bool useUnityDeselectSound;

		[Token(Token = "0x40000C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public bool useUnityMoveSound;

		[Token(Token = "0x40000C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E1")]
		public bool useUnityInitializePotentialDragSound;

		[Token(Token = "0x40000CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E2")]
		public bool useUnityBeginDragSound;

		[Token(Token = "0x40000CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E3")]
		public bool useUnityEndDragSound;

		[Token(Token = "0x40000CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		public bool useUnitySubmitSound;

		[Token(Token = "0x40000CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E5")]
		public bool useUnityCancelSound;

		[Token(Token = "0x40000CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E6")]
		public bool useUnityToggleSound;

		[Token(Token = "0x40000CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private Slider _slider;

		[Token(Token = "0x40000D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private Toggle _toggle;

		[Token(Token = "0x40000D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private Button _button;

		[Token(Token = "0x40000D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private bool _isVisible;

		[Token(Token = "0x40000D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x201")]
		private bool _needsCoroutine;

		[Token(Token = "0x40000D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		private float? _triggerEnterTime;

		[Token(Token = "0x40000D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
		private float? _triggerEnter2dTime;

		[Token(Token = "0x40000D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private Transform _trans;

		[Token(Token = "0x40000D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private readonly List<AudioEventGroup> _validMechanimStateChangedSounds;

		[Token(Token = "0x40000D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private Animator _anim;

		[Token(Token = "0x17000028")]
		private bool IsSetToUGUI
		{
			[Token(Token = "0x600017F")]
			[Address(RVA = "0x1812284", Offset = "0x1812284", VA = "0x1812284")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000029")]
		private bool IsSetToLegacyUI
		{
			[Token(Token = "0x6000180")]
			[Address(RVA = "0x18139BC", Offset = "0x18139BC", VA = "0x18139BC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600015F")]
		[Address(RVA = "0x181217C", Offset = "0x181217C", VA = "0x181217C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000160")]
		[Address(RVA = "0x1812450", Offset = "0x1812450", VA = "0x1812450", Slot = "10")]
		protected virtual void SpawnedOrAwake()
		{
		}

		[Token(Token = "0x6000161")]
		[Address(RVA = "0x1812584", Offset = "0x1812584", VA = "0x1812584")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xFD5890", Offset = "0xFD5890")]
		private IEnumerator CoUpdate()
		{
			return null;
		}

		[Token(Token = "0x6000162")]
		[Address(RVA = "0x181262C", Offset = "0x181262C", VA = "0x181262C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000163")]
		[Address(RVA = "0x1812CA0", Offset = "0x1812CA0", VA = "0x1812CA0")]
		private void OnBecameVisible()
		{
		}

		[Token(Token = "0x6000164")]
		[Address(RVA = "0x1812CC8", Offset = "0x1812CC8", VA = "0x1812CC8")]
		private void OnBecameInvisible()
		{
		}

		[Token(Token = "0x6000165")]
		[Address(RVA = "0x1812CE4", Offset = "0x1812CE4", VA = "0x1812CE4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000166")]
		[Address(RVA = "0x1812F2C", Offset = "0x1812F2C", VA = "0x1812F2C")]
		private void RestorePersistentSliders()
		{
		}

		[Token(Token = "0x6000167")]
		[Address(RVA = "0x1813278", Offset = "0x1813278", VA = "0x1813278")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000168")]
		[Address(RVA = "0x181363C", Offset = "0x181363C", VA = "0x181363C")]
		private void OnParticleCollision(GameObject other)
		{
		}

		[Token(Token = "0x6000169")]
		[Address(RVA = "0x1813750", Offset = "0x1813750", VA = "0x1813750")]
		public void OnPointerEnter(PointerEventData data)
		{
		}

		[Token(Token = "0x600016A")]
		[Address(RVA = "0x1813770", Offset = "0x1813770", VA = "0x1813770")]
		public void OnPointerExit(PointerEventData data)
		{
		}

		[Token(Token = "0x600016B")]
		[Address(RVA = "0x1813790", Offset = "0x1813790", VA = "0x1813790")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x600016C")]
		[Address(RVA = "0x18137B0", Offset = "0x18137B0", VA = "0x18137B0")]
		public void OnPointerUp(PointerEventData data)
		{
		}

		[Token(Token = "0x600016D")]
		[Address(RVA = "0x18137D0", Offset = "0x18137D0", VA = "0x18137D0")]
		private void OnDrag(Vector2 delta)
		{
		}

		[Token(Token = "0x600016E")]
		[Address(RVA = "0x18137D4", Offset = "0x18137D4", VA = "0x18137D4")]
		public void OnDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x600016F")]
		[Address(RVA = "0x18137F4", Offset = "0x18137F4", VA = "0x18137F4")]
		private void OnDrop(GameObject go)
		{
		}

		[Token(Token = "0x6000170")]
		[Address(RVA = "0x18137F8", Offset = "0x18137F8", VA = "0x18137F8")]
		public void OnDrop(PointerEventData data)
		{
		}

		[Token(Token = "0x6000171")]
		[Address(RVA = "0x1813818", Offset = "0x1813818", VA = "0x1813818")]
		public void OnScroll(PointerEventData data)
		{
		}

		[Token(Token = "0x6000172")]
		[Address(RVA = "0x1813838", Offset = "0x1813838", VA = "0x1813838")]
		public void OnUpdateSelected(BaseEventData data)
		{
		}

		[Token(Token = "0x6000173")]
		[Address(RVA = "0x1813858", Offset = "0x1813858", VA = "0x1813858")]
		private void OnSelect(bool isSelected)
		{
		}

		[Token(Token = "0x6000174")]
		[Address(RVA = "0x181385C", Offset = "0x181385C", VA = "0x181385C")]
		public void OnSelect(BaseEventData data)
		{
		}

		[Token(Token = "0x6000175")]
		[Address(RVA = "0x181387C", Offset = "0x181387C", VA = "0x181387C")]
		public void OnDeselect(BaseEventData data)
		{
		}

		[Token(Token = "0x6000176")]
		[Address(RVA = "0x181389C", Offset = "0x181389C", VA = "0x181389C")]
		public void OnMove(AxisEventData data)
		{
		}

		[Token(Token = "0x6000177")]
		[Address(RVA = "0x18138BC", Offset = "0x18138BC", VA = "0x18138BC")]
		public void OnInitializePotentialDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6000178")]
		[Address(RVA = "0x18138DC", Offset = "0x18138DC", VA = "0x18138DC")]
		public void OnBeginDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6000179")]
		[Address(RVA = "0x18138FC", Offset = "0x18138FC", VA = "0x18138FC")]
		public void OnEndDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x600017A")]
		[Address(RVA = "0x181391C", Offset = "0x181391C", VA = "0x181391C")]
		public void OnSubmit(BaseEventData data)
		{
		}

		[Token(Token = "0x600017B")]
		[Address(RVA = "0x181393C", Offset = "0x181393C", VA = "0x181393C")]
		public void OnCancel(BaseEventData data)
		{
		}

		[Token(Token = "0x600017C")]
		[Address(RVA = "0x181395C", Offset = "0x181395C", VA = "0x181395C")]
		private void SliderChanged(float newValue)
		{
		}

		[Token(Token = "0x600017D")]
		[Address(RVA = "0x181398C", Offset = "0x181398C", VA = "0x181398C")]
		private void ToggleChanged(bool newValue)
		{
		}

		[Token(Token = "0x600017E")]
		[Address(RVA = "0x18139A4", Offset = "0x18139A4", VA = "0x18139A4")]
		private void ButtonClicked()
		{
		}

		[Token(Token = "0x6000181")]
		[Address(RVA = "0x18139CC", Offset = "0x18139CC", VA = "0x18139CC")]
		private void OnPress(bool isDown)
		{
		}

		[Token(Token = "0x6000182")]
		[Address(RVA = "0x1813A04", Offset = "0x1813A04", VA = "0x1813A04")]
		private void OnClick()
		{
		}

		[Token(Token = "0x6000183")]
		[Address(RVA = "0x1813A24", Offset = "0x1813A24", VA = "0x1813A24")]
		private void OnHover(bool isOver)
		{
		}

		[Token(Token = "0x6000184")]
		[Address(RVA = "0x1813A5C", Offset = "0x1813A5C", VA = "0x1813A5C")]
		private void OnSpawned()
		{
		}

		[Token(Token = "0x6000185")]
		[Address(RVA = "0x1813AAC", Offset = "0x1813AAC", VA = "0x1813AAC")]
		private void OnDespawned()
		{
		}

		[Token(Token = "0x6000186")]
		[Address(RVA = "0x1813ACC", Offset = "0x1813ACC", VA = "0x1813ACC")]
		public void CalculateRadius(AudioEvent anEvent)
		{
		}

		[Token(Token = "0x6000187")]
		[Address(RVA = "0x1813B78", Offset = "0x1813B78", VA = "0x1813B78")]
		public AudioSource GetNamedOrFirstAudioSource(AudioEvent anEvent)
		{
			return null;
		}

		[Token(Token = "0x6000188")]
		[Address(RVA = "0x1813D48", Offset = "0x1813D48", VA = "0x1813D48")]
		public List<AudioSource> GetAllVariationAudioSources(AudioEvent anEvent)
		{
			return null;
		}

		[Token(Token = "0x6000189")]
		[Address(RVA = "0x1813F3C", Offset = "0x1813F3C", VA = "0x1813F3C")]
		public AudioEventGroup GetMechanimAudioEventGroup(string stateName)
		{
			return null;
		}

		[Token(Token = "0x600018A")]
		[Address(RVA = "0x1812A74", Offset = "0x1812A74", VA = "0x1812A74")]
		public bool PlaySounds(AudioEventGroup eventGrp, EventType eType)
		{
			return default(bool);
		}

		[Token(Token = "0x600018B")]
		[Address(RVA = "0x1816424", Offset = "0x1816424", VA = "0x1816424")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x600018C")]
		[Address(RVA = "0x1816604", Offset = "0x1816604", VA = "0x1816604")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x600018D")]
		[Address(RVA = "0x1814014", Offset = "0x1814014", VA = "0x1814014")]
		private static bool CheckForRetriggerLimit(AudioEventGroup grp)
		{
			return default(bool);
		}

		[Token(Token = "0x600018E")]
		[Address(RVA = "0x1814180", Offset = "0x1814180", VA = "0x1814180")]
		private void PerformSingleAction(AudioEventGroup grp, AudioEvent aEvent, EventType eType)
		{
		}

		[Token(Token = "0x600018F")]
		[Address(RVA = "0x181E318", Offset = "0x181E318", VA = "0x181E318")]
		private void LogIfCustomEventMissing(AudioEventGroup eventGroup)
		{
		}

		[Token(Token = "0x6000190")]
		[Address(RVA = "0x181266C", Offset = "0x181266C", VA = "0x181266C", Slot = "4")]
		public void CheckForIllegalCustomEvents()
		{
		}

		[Token(Token = "0x6000191")]
		[Address(RVA = "0x181E744", Offset = "0x181E744", VA = "0x181E744", Slot = "5")]
		public void ReceiveEvent(string customEventName, Vector3 originPoint)
		{
		}

		[Token(Token = "0x6000192")]
		[Address(RVA = "0x181E818", Offset = "0x181E818", VA = "0x181E818", Slot = "6")]
		public bool SubscribesToEvent(string customEventName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000193")]
		[Address(RVA = "0x18131E8", Offset = "0x18131E8", VA = "0x18131E8", Slot = "7")]
		public void RegisterReceiver()
		{
		}

		[Token(Token = "0x6000194")]
		[Address(RVA = "0x18135B4", Offset = "0x18135B4", VA = "0x18135B4", Slot = "8")]
		public void UnregisterReceiver()
		{
		}

		[Token(Token = "0x6000195")]
		[Address(RVA = "0x181F13C", Offset = "0x181F13C", VA = "0x181F13C", Slot = "9")]
		public IList<AudioEventGroup> GetAllEvents()
		{
			return null;
		}

		[Token(Token = "0x6000196")]
		[Address(RVA = "0x1812294", Offset = "0x1812294", VA = "0x1812294")]
		private void AddUGUIComponents()
		{
		}

		[Token(Token = "0x6000197")]
		private void AddUGUIHandler<T>(bool useSound) where T : EventSoundsUGUIHandler
		{
		}

		[Token(Token = "0x6000198")]
		[Address(RVA = "0x181F194", Offset = "0x181F194", VA = "0x181F194")]
		public EventSounds()
		{
		}
	}
	[Token(Token = "0x200002B")]
	public class EventSoundsUGUIHandler : MonoBehaviour
	{
		[Token(Token = "0x40000D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC8CB0", Offset = "0xFC8CB0")]
		private EventSounds <eventSounds>k__BackingField;

		[Token(Token = "0x1700002A")]
		public EventSounds eventSounds
		{
			[Token(Token = "0x600019A")]
			[Address(RVA = "0x182033C", Offset = "0x182033C", VA = "0x182033C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD58F4", Offset = "0xFD58F4")]
			get
			{
				return null;
			}
			[Token(Token = "0x600019B")]
			[Address(RVA = "0x1820344", Offset = "0x1820344", VA = "0x1820344")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD5904", Offset = "0xFD5904")]
			set
			{
			}
		}

		[Token(Token = "0x600019C")]
		[Address(RVA = "0x181F994", Offset = "0x181F994", VA = "0x181F994")]
		public EventSoundsUGUIHandler()
		{
		}
	}
	[Token(Token = "0x200002C")]
	public class EventSoundsPointerEnterHandler : EventSoundsUGUIHandler, IPointerEnterHandler, IEventSystemHandler
	{
		[Token(Token = "0x600019D")]
		[Address(RVA = "0x181FF1C", Offset = "0x181FF1C", VA = "0x181FF1C", Slot = "4")]
		public void OnPointerEnter(PointerEventData data)
		{
		}

		[Token(Token = "0x600019E")]
		[Address(RVA = "0x181FFC4", Offset = "0x181FFC4", VA = "0x181FFC4")]
		public EventSoundsPointerEnterHandler()
		{
		}
	}
	[Token(Token = "0x200002D")]
	public class EventSoundsPointerExitHandler : EventSoundsUGUIHandler, IPointerExitHandler, IEventSystemHandler
	{
		[Token(Token = "0x600019F")]
		[Address(RVA = "0x181FFCC", Offset = "0x181FFCC", VA = "0x181FFCC", Slot = "4")]
		public void OnPointerExit(PointerEventData data)
		{
		}

		[Token(Token = "0x60001A0")]
		[Address(RVA = "0x1820074", Offset = "0x1820074", VA = "0x1820074")]
		public EventSoundsPointerExitHandler()
		{
		}
	}
	[Token(Token = "0x200002E")]
	public class EventSoundsPointerDownHandler : EventSoundsUGUIHandler, IPointerDownHandler, IEventSystemHandler
	{
		[Token(Token = "0x60001A1")]
		[Address(RVA = "0x181FE6C", Offset = "0x181FE6C", VA = "0x181FE6C", Slot = "4")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x60001A2")]
		[Address(RVA = "0x181FF14", Offset = "0x181FF14", VA = "0x181FF14")]
		public EventSoundsPointerDownHandler()
		{
		}
	}
	[Token(Token = "0x200002F")]
	public class EventSoundsPointerUpHandler : EventSoundsUGUIHandler, IPointerUpHandler, IEventSystemHandler
	{
		[Token(Token = "0x60001A3")]
		[Address(RVA = "0x182007C", Offset = "0x182007C", VA = "0x182007C", Slot = "4")]
		public void OnPointerUp(PointerEventData data)
		{
		}

		[Token(Token = "0x60001A4")]
		[Address(RVA = "0x1820124", Offset = "0x1820124", VA = "0x1820124")]
		public EventSoundsPointerUpHandler()
		{
		}
	}
	[Token(Token = "0x2000030")]
	public class EventSoundsDragHandler : EventSoundsUGUIHandler, IDragHandler, IEventSystemHandler
	{
		[Token(Token = "0x60001A5")]
		[Address(RVA = "0x181FAFC", Offset = "0x181FAFC", VA = "0x181FAFC", Slot = "4")]
		public void OnDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x60001A6")]
		[Address(RVA = "0x181FBA4", Offset = "0x181FBA4", VA = "0x181FBA4")]
		public EventSoundsDragHandler()
		{
		}
	}
	[Token(Token = "0x2000031")]
	public class EventSoundsDropHandler : EventSoundsUGUIHandler, IDropHandler, IEventSystemHandler
	{
		[Token(Token = "0x60001A7")]
		[Address(RVA = "0x181FBAC", Offset = "0x181FBAC", VA = "0x181FBAC", Slot = "4")]
		public void OnDrop(PointerEventData data)
		{
		}

		[Token(Token = "0x60001A8")]
		[Address(RVA = "0x181FC54", Offset = "0x181FC54", VA = "0x181FC54")]
		public EventSoundsDropHandler()
		{
		}
	}
	[Token(Token = "0x2000032")]
	public class EventSoundsScrollHandler : EventSoundsUGUIHandler, IScrollHandler, IEventSystemHandler
	{
		[Token(Token = "0x60001A9")]
		[Address(RVA = "0x182012C", Offset = "0x182012C", VA = "0x182012C", Slot = "4")]
		public void OnScroll(PointerEventData data)
		{
		}

		[Token(Token = "0x60001AA")]
		[Address(RVA = "0x18201D4", Offset = "0x18201D4", VA = "0x18201D4")]
		public EventSoundsScrollHandler()
		{
		}
	}
	[Token(Token = "0x2000033")]
	public class EventSoundsUpdateSelectedHandler : EventSoundsUGUIHandler, IUpdateSelectedHandler, IEventSystemHandler
	{
		[Token(Token = "0x60001AB")]
		[Address(RVA = "0x182034C", Offset = "0x182034C", VA = "0x182034C", Slot = "4")]
		public void OnUpdateSelected(BaseEventData data)
		{
		}

		[Token(Token = "0x60001AC")]
		[Address(RVA = "0x18203F4", Offset = "0x18203F4", VA = "0x18203F4")]
		public EventSoundsUpdateSelectedHandler()
		{
		}
	}
	[Token(Token = "0x2000034")]
	public class EventSoundsSelectHandler : EventSoundsUGUIHandler, ISelectHandler, IEventSystemHandler
	{
		[Token(Token = "0x60001AD")]
		[Address(RVA = "0x18201DC", Offset = "0x18201DC", VA = "0x18201DC", Slot = "4")]
		public void OnSelect(BaseEventData data)
		{
		}

		[Token(Token = "0x60001AE")]
		[Address(RVA = "0x1820284", Offset = "0x1820284", VA = "0x1820284")]
		public EventSoundsSelectHandler()
		{
		}
	}
	[Token(Token = "0x2000035")]
	public class EventSoundsDeselectHandler : EventSoundsUGUIHandler, IDeselectHandler, IEventSystemHandler
	{
		[Token(Token = "0x60001AF")]
		[Address(RVA = "0x181FA4C", Offset = "0x181FA4C", VA = "0x181FA4C", Slot = "4")]
		public void OnDeselect(BaseEventData data)
		{
		}

		[Token(Token = "0x60001B0")]
		[Address(RVA = "0x181FAF4", Offset = "0x181FAF4", VA = "0x181FAF4")]
		public EventSoundsDeselectHandler()
		{
		}
	}
	[Token(Token = "0x2000036")]
	public class EventSoundsMoveHandler : EventSoundsUGUIHandler, IMoveHandler, IEventSystemHandler
	{
		[Token(Token = "0x60001B1")]
		[Address(RVA = "0x181FDBC", Offset = "0x181FDBC", VA = "0x181FDBC", Slot = "4")]
		public void OnMove(AxisEventData data)
		{
		}

		[Token(Token = "0x60001B2")]
		[Address(RVA = "0x181FE64", Offset = "0x181FE64", VA = "0x181FE64")]
		public EventSoundsMoveHandler()
		{
		}
	}
	[Token(Token = "0x2000037")]
	public class EventSoundsInitializePotentialDragHandler : EventSoundsUGUIHandler, IInitializePotentialDragHandler, IEventSystemHandler
	{
		[Token(Token = "0x60001B3")]
		[Address(RVA = "0x181FD0C", Offset = "0x181FD0C", VA = "0x181FD0C", Slot = "4")]
		public void OnInitializePotentialDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x60001B4")]
		[Address(RVA = "0x181FDB4", Offset = "0x181FDB4", VA = "0x181FDB4")]
		public EventSoundsInitializePotentialDragHandler()
		{
		}
	}
	[Token(Token = "0x2000038")]
	public class EventSoundsBeginDragHandler : EventSoundsUGUIHandler, IBeginDragHandler, IEventSystemHandler
	{
		[Token(Token = "0x60001B5")]
		[Address(RVA = "0x181F8E4", Offset = "0x181F8E4", VA = "0x181F8E4", Slot = "4")]
		public void OnBeginDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x60001B6")]
		[Address(RVA = "0x181F98C", Offset = "0x181F98C", VA = "0x181F98C")]
		public EventSoundsBeginDragHandler()
		{
		}
	}
	[Token(Token = "0x2000039")]
	public class EventSoundsEndDragHandler : EventSoundsUGUIHandler, IEndDragHandler, IEventSystemHandler
	{
		[Token(Token = "0x60001B7")]
		[Address(RVA = "0x181FC5C", Offset = "0x181FC5C", VA = "0x181FC5C", Slot = "4")]
		public void OnEndDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x60001B8")]
		[Address(RVA = "0x181FD04", Offset = "0x181FD04", VA = "0x181FD04")]
		public EventSoundsEndDragHandler()
		{
		}
	}
	[Token(Token = "0x200003A")]
	public class EventSoundsSubmitHandler : EventSoundsUGUIHandler, ISubmitHandler, IEventSystemHandler
	{
		[Token(Token = "0x60001B9")]
		[Address(RVA = "0x182028C", Offset = "0x182028C", VA = "0x182028C", Slot = "4")]
		public void OnSubmit(BaseEventData data)
		{
		}

		[Token(Token = "0x60001BA")]
		[Address(RVA = "0x1820334", Offset = "0x1820334", VA = "0x1820334")]
		public EventSoundsSubmitHandler()
		{
		}
	}
	[Token(Token = "0x200003B")]
	public class EventSoundsCancelHandler : EventSoundsUGUIHandler, ICancelHandler, IEventSystemHandler
	{
		[Token(Token = "0x60001BB")]
		[Address(RVA = "0x181F99C", Offset = "0x181F99C", VA = "0x181F99C", Slot = "4")]
		public void OnCancel(BaseEventData data)
		{
		}

		[Token(Token = "0x60001BC")]
		[Address(RVA = "0x181FA44", Offset = "0x181FA44", VA = "0x181FA44")]
		public EventSoundsCancelHandler()
		{
		}
	}
	[Token(Token = "0x200003C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xFC6078", Offset = "0xFC6078")]
	public class FootstepSounds : MonoBehaviour
	{
		[Token(Token = "0x20001AC")]
		public enum FootstepTriggerMode
		{
			[Token(Token = "0x400092E")]
			None,
			[Token(Token = "0x400092F")]
			OnCollision,
			[Token(Token = "0x4000930")]
			OnTriggerEnter,
			[Token(Token = "0x4000931")]
			OnCollision2D,
			[Token(Token = "0x4000932")]
			OnTriggerEnter2D
		}

		[Token(Token = "0x40000DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MasterAudio.SoundSpawnLocationMode soundSpawnMode;

		[Token(Token = "0x40000DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public FootstepTriggerMode footstepEvent;

		[Token(Token = "0x40000DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<FootstepGroup> footstepGroups;

		[Token(Token = "0x40000DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EventSounds.RetriggerLimMode retriggerLimitMode;

		[Token(Token = "0x40000DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int limitPerXFrm;

		[Token(Token = "0x40000DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float limitPerXSec;

		[Token(Token = "0x40000E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int triggeredLastFrame;

		[Token(Token = "0x40000E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float triggeredLastTime;

		[Token(Token = "0x40000E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform _trans;

		[Token(Token = "0x1700002B")]
		private Transform Trans
		{
			[Token(Token = "0x60001BF")]
			[Address(RVA = "0x1823D70", Offset = "0x1823D70", VA = "0x1823D70")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001BD")]
		[Address(RVA = "0x18239EC", Offset = "0x18239EC", VA = "0x18239EC")]
		private bool CheckForRetriggerLimit()
		{
			return default(bool);
		}

		[Token(Token = "0x60001BE")]
		[Address(RVA = "0x1823A7C", Offset = "0x1823A7C", VA = "0x1823A7C")]
		private void PlaySoundsIfMatch(GameObject go)
		{
		}

		[Token(Token = "0x60001C0")]
		[Address(RVA = "0x1823E14", Offset = "0x1823E14", VA = "0x1823E14")]
		public FootstepSounds()
		{
		}
	}
	[Token(Token = "0x200003D")]
	public class MechanimStateCustomEvents : StateMachineBehaviour
	{
		[Token(Token = "0x40000E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFC8CC0", Offset = "0xFC8CC0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xFC8CC0", Offset = "0xFC8CC0")]
		public bool RetriggerWhenStateLoops;

		[Token(Token = "0x40000E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFC8D20", Offset = "0xFC8D20")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xFC8D20", Offset = "0xFC8D20")]
		public bool fireEnterEvent;

		[Token(Token = "0x40000E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[MasterCustomEvent]
		public string enterCustomEvent;

		[Token(Token = "0x40000E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFC8D90", Offset = "0xFC8D90")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xFC8D90", Offset = "0xFC8D90")]
		public bool fireExitEvent;

		[Token(Token = "0x40000E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[MasterCustomEvent]
		public string exitCustomEvent;

		[Token(Token = "0x40000E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFC8E00", Offset = "0xFC8E00")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xFC8E00", Offset = "0xFC8E00")]
		public bool fireAnimTimeEvent;

		[Token(Token = "0x40000E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFC8E60", Offset = "0xFC8E60")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xFC8E60", Offset = "0xFC8E60")]
		public float whenToFireEvent;

		[Token(Token = "0x40000EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[MasterCustomEvent]
		public string timedCustomEvent;

		[Token(Token = "0x40000EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFC8EC4", Offset = "0xFC8EC4")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xFC8EC4", Offset = "0xFC8EC4")]
		public bool fireMultiAnimTimeEvent;

		[Token(Token = "0x40000EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xFC8F24", Offset = "0xFC8F24")]
		public int numOfMultiEventsToFire;

		[Token(Token = "0x40000ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFC8F3C", Offset = "0xFC8F3C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xFC8F3C", Offset = "0xFC8F3C")]
		public float whenToFireMultiEvent1;

		[Token(Token = "0x40000EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFC8F90", Offset = "0xFC8F90")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xFC8F90", Offset = "0xFC8F90")]
		public float whenToFireMultiEvent2;

		[Token(Token = "0x40000EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFC8FE4", Offset = "0xFC8FE4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xFC8FE4", Offset = "0xFC8FE4")]
		public float whenToFireMultiEvent3;

		[Token(Token = "0x40000F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFC9038", Offset = "0xFC9038")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xFC9038", Offset = "0xFC9038")]
		public float whenToFireMultiEvent4;

		[Token(Token = "0x40000F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[MasterCustomEvent]
		public string MultiTimedEvent;

		[Token(Token = "0x40000F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool _playMultiEvent1;

		[Token(Token = "0x40000F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool _playMultiEvent2;

		[Token(Token = "0x40000F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		private bool _playMultiEvent3;

		[Token(Token = "0x40000F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
		private bool _playMultiEvent4;

		[Token(Token = "0x40000F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool _fireTimedEvent;

		[Token(Token = "0x40000F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform _actorTrans;

		[Token(Token = "0x40000F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int _lastRepetition;

		[Token(Token = "0x60001C1")]
		[Address(RVA = "0x1DADBA0", Offset = "0x1DADBA0", VA = "0x1DADBA0", Slot = "4")]
		public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x60001C2")]
		[Address(RVA = "0x1DADD34", Offset = "0x1DADD34", VA = "0x1DADD34", Slot = "5")]
		public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x60001C3")]
		[Address(RVA = "0x1DAE048", Offset = "0x1DAE048", VA = "0x1DAE048", Slot = "6")]
		public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x60001C4")]
		[Address(RVA = "0x1DADC88", Offset = "0x1DADC88", VA = "0x1DADC88")]
		private Transform ActorTrans(Animator anim)
		{
			return null;
		}

		[Token(Token = "0x60001C5")]
		[Address(RVA = "0x1DAE120", Offset = "0x1DAE120", VA = "0x1DAE120")]
		public MechanimStateCustomEvents()
		{
		}
	}
	[Token(Token = "0x200003E")]
	public class MechanimStateSounds : StateMachineBehaviour
	{
		[Token(Token = "0x40000F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xFC909C", Offset = "0xFC909C")]
		public bool SoundFollowsObject;

		[Token(Token = "0x40000FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFC90D4", Offset = "0xFC90D4")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xFC90D4", Offset = "0xFC90D4")]
		public bool RetriggerWhenStateLoops;

		[Token(Token = "0x40000FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFC9134", Offset = "0xFC9134")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xFC9134", Offset = "0xFC9134")]
		public bool playEnterSound;

		[Token(Token = "0x40000FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool stopEnterSoundOnExit;

		[Token(Token = "0x40000FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SoundGroup]
		public string enterSoundGroup;

		[Token(Token = "0x40000FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFC91A4", Offset = "0xFC91A4")]
		public string enterVariationName;

		[Token(Token = "0x40000FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool wasEnterSoundPlayed;

		[Token(Token = "0x4000100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFC91DC", Offset = "0xFC91DC")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xFC91DC", Offset = "0xFC91DC")]
		public bool playExitSound;

		[Token(Token = "0x4000101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SoundGroup]
		public string exitSoundGroup;

		[Token(Token = "0x4000102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFC924C", Offset = "0xFC924C")]
		public string exitVariationName;

		[Token(Token = "0x4000103")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFC9284", Offset = "0xFC9284")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xFC9284", Offset = "0xFC9284")]
		public bool playAnimTimeSound;

		[Token(Token = "0x4000104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool stopAnimTimeSoundOnExit;

		[Token(Token = "0x4000105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFC92E4", Offset = "0xFC92E4")]
		public bool useStopTime;

		[Token(Token = "0x4000106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFC931C", Offset = "0xFC931C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xFC931C", Offset = "0xFC931C")]
		public float whenToStartSound;

		[Token(Token = "0x4000107")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFC9370", Offset = "0xFC9370")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xFC9370", Offset = "0xFC9370")]
		public float whenToStopSound;

		[Token(Token = "0x4000108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SoundGroup]
		public string TimedSoundGroup;

		[Token(Token = "0x4000109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFC93D4", Offset = "0xFC93D4")]
		public string timedVariationName;

		[Token(Token = "0x400010A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool playSoundStart;

		[Token(Token = "0x400010B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool playSoundStop;

		[Token(Token = "0x400010C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFC940C", Offset = "0xFC940C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xFC940C", Offset = "0xFC940C")]
		public bool playMultiAnimTimeSounds;

		[Token(Token = "0x400010D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
		public bool StopMultiAnimTimeSoundsOnExit;

		[Token(Token = "0x400010E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xFC946C", Offset = "0xFC946C")]
		public int numOfMultiSoundsToPlay;

		[Token(Token = "0x400010F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFC9484", Offset = "0xFC9484")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xFC9484", Offset = "0xFC9484")]
		public float whenToStartMultiSound1;

		[Token(Token = "0x4000110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFC94D8", Offset = "0xFC94D8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xFC94D8", Offset = "0xFC94D8")]
		public float whenToStartMultiSound2;

		[Token(Token = "0x4000111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFC952C", Offset = "0xFC952C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xFC952C", Offset = "0xFC952C")]
		public float whenToStartMultiSound3;

		[Token(Token = "0x4000112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFC9580", Offset = "0xFC9580")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xFC9580", Offset = "0xFC9580")]
		public float whenToStartMultiSound4;

		[Token(Token = "0x4000113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SoundGroup]
		public string MultiSoundsTimedGroup;

		[Token(Token = "0x4000114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFC95E4", Offset = "0xFC95E4")]
		public string multiTimedVariationName;

		[Token(Token = "0x4000115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool playMultiSound1;

		[Token(Token = "0x4000116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		private bool playMultiSound2;

		[Token(Token = "0x4000117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x92")]
		private bool playMultiSound3;

		[Token(Token = "0x4000118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x93")]
		private bool playMultiSound4;

		[Token(Token = "0x4000119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Transform _actorTrans;

		[Token(Token = "0x400011A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private int _lastRepetition;

		[Token(Token = "0x60001C6")]
		[Address(RVA = "0x1DAE1C8", Offset = "0x1DAE1C8", VA = "0x1DAE1C8", Slot = "4")]
		public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x60001C7")]
		[Address(RVA = "0x1DAE458", Offset = "0x1DAE458", VA = "0x1DAE458", Slot = "5")]
		public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x60001C8")]
		[Address(RVA = "0x1DAEBE4", Offset = "0x1DAEBE4", VA = "0x1DAEBE4", Slot = "6")]
		public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x60001C9")]
		[Address(RVA = "0x1DAE354", Offset = "0x1DAE354", VA = "0x1DAE354")]
		private Transform ActorTrans(Animator anim)
		{
			return null;
		}

		[Token(Token = "0x60001CA")]
		[Address(RVA = "0x1DAE400", Offset = "0x1DAE400", VA = "0x1DAE400")]
		private static string GetVariationName(string varName)
		{
			return null;
		}

		[Token(Token = "0x60001CB")]
		[Address(RVA = "0x1DAEE30", Offset = "0x1DAEE30", VA = "0x1DAEE30")]
		public MechanimStateSounds()
		{
		}
	}
	[Token(Token = "0x200003F")]
	[SerializeField]
	public class PlaySoundResult
	{
		[Token(Token = "0x400011B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC961C", Offset = "0xFC961C")]
		private bool <SoundPlayed>k__BackingField;

		[Token(Token = "0x400011C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC962C", Offset = "0xFC962C")]
		private bool <SoundScheduled>k__BackingField;

		[Token(Token = "0x400011D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC963C", Offset = "0xFC963C")]
		private SoundGroupVariation <ActingVariation>k__BackingField;

		[Token(Token = "0x1700002C")]
		public bool SoundPlayed
		{
			[Token(Token = "0x60001CD")]
			[Address(RVA = "0x1DB089C", Offset = "0x1DB089C", VA = "0x1DB089C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD5914", Offset = "0xFD5914")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60001CE")]
			[Address(RVA = "0x1DB08A4", Offset = "0x1DB08A4", VA = "0x1DB08A4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD5924", Offset = "0xFD5924")]
			set
			{
			}
		}

		[Token(Token = "0x1700002D")]
		public bool SoundScheduled
		{
			[Token(Token = "0x60001CF")]
			[Address(RVA = "0x1DB08B0", Offset = "0x1DB08B0", VA = "0x1DB08B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD5934", Offset = "0xFD5934")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60001D0")]
			[Address(RVA = "0x1DB08B8", Offset = "0x1DB08B8", VA = "0x1DB08B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD5944", Offset = "0xFD5944")]
			set
			{
			}
		}

		[Token(Token = "0x1700002E")]
		public SoundGroupVariation ActingVariation
		{
			[Token(Token = "0x60001D1")]
			[Address(RVA = "0x1DB08C4", Offset = "0x1DB08C4", VA = "0x1DB08C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD5954", Offset = "0xFD5954")]
			get
			{
				return null;
			}
			[Token(Token = "0x60001D2")]
			[Address(RVA = "0x1DB08CC", Offset = "0x1DB08CC", VA = "0x1DB08CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD5964", Offset = "0xFD5964")]
			set
			{
			}
		}

		[Token(Token = "0x60001CC")]
		[Address(RVA = "0x1DB0868", Offset = "0x1DB0868", VA = "0x1DB0868")]
		public PlaySoundResult()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000040")]
	public class AmbientSoundToTriggerInfo
	{
		[Token(Token = "0x400011E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int frameToTrigger;

		[Token(Token = "0x400011F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AmbientSound ambient;

		[Token(Token = "0x60001D3")]
		[Address(RVA = "0x18055DC", Offset = "0x18055DC", VA = "0x18055DC")]
		public AmbientSoundToTriggerInfo()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000041")]
	public class AudioEvent
	{
		[Token(Token = "0x20001AD")]
		public enum TargetVolumeMode
		{
			[Token(Token = "0x4000934")]
			UseSliderValue,
			[Token(Token = "0x4000935")]
			UseSpecificValue
		}

		[Serializable]
		[Token(Token = "0x20001AE")]
		public class MA_SnapshotInfo
		{
			[Token(Token = "0x4000936")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public AudioMixerSnapshot snapshot;

			[Token(Token = "0x4000937")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float weight;

			[Token(Token = "0x6000F1F")]
			[Address(RVA = "0x180680C", Offset = "0x180680C", VA = "0x180680C")]
			public MA_SnapshotInfo(AudioMixerSnapshot snap, float wt)
			{
			}
		}

		[Token(Token = "0x4000120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string actionName;

		[Token(Token = "0x4000121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool isExpanded;

		[Token(Token = "0x4000122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string soundType;

		[Token(Token = "0x4000123")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool allPlaylistControllersForGroupCmd;

		[Token(Token = "0x4000124")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool allSoundTypesForGroupCmd;

		[Token(Token = "0x4000125")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool allSoundTypesForBusCmd;

		[Token(Token = "0x4000126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float volume;

		[Token(Token = "0x4000127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool useFixedPitch;

		[Token(Token = "0x4000128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float pitch;

		[Token(Token = "0x4000129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public EventSounds.GlidePitchType glidePitchType;

		[Token(Token = "0x400012A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float targetGlidePitch;

		[Token(Token = "0x400012B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float pitchGlideTime;

		[Token(Token = "0x400012C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float delaySound;

		[Token(Token = "0x400012D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public MasterAudio.EventSoundFunctionType currentSoundFunctionType;

		[Token(Token = "0x400012E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public MasterAudio.PlaylistCommand currentPlaylistCommand;

		[Token(Token = "0x400012F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public MasterAudio.SoundGroupCommand currentSoundGroupCommand;

		[Token(Token = "0x4000130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public MasterAudio.BusCommand currentBusCommand;

		[Token(Token = "0x4000131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public MasterAudio.CustomEventCommand currentCustomEventCommand;

		[Token(Token = "0x4000132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public MasterAudio.GlobalCommand currentGlobalCommand;

		[Token(Token = "0x4000133")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public MasterAudio.UnityMixerCommand currentMixerCommand;

		[Token(Token = "0x4000134")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AudioMixerSnapshot snapshotToTransitionTo;

		[Token(Token = "0x4000135")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float snapshotTransitionTime;

		[Token(Token = "0x4000136")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public List<MA_SnapshotInfo> snapshotsToBlend;

		[Token(Token = "0x4000137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public MasterAudio.PersistentSettingsCommand currentPersistentSettingsCommand;

		[Token(Token = "0x4000138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public string busName;

		[Token(Token = "0x4000139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public string playlistName;

		[Token(Token = "0x400013A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public string playlistControllerName;

		[Token(Token = "0x400013B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public bool startPlaylist;

		[Token(Token = "0x400013C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float fadeVolume;

		[Token(Token = "0x400013D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float fadeTime;

		[Token(Token = "0x400013E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public float minAge;

		[Token(Token = "0x400013F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool stopAfterFade;

		[Token(Token = "0x4000140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		public bool restoreVolumeAfterFade;

		[Token(Token = "0x4000141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public TargetVolumeMode targetVolMode;

		[Token(Token = "0x4000142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public string clipName;

		[Token(Token = "0x4000143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public EventSounds.VariationType variationType;

		[Token(Token = "0x4000144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public string variationName;

		[Token(Token = "0x4000145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public float colliderMaxDistance;

		[Token(Token = "0x4000146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public bool showSphereGizmo;

		[Token(Token = "0x4000147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public string theCustomEventName;

		[Token(Token = "0x1700002F")]
		public bool IsFadeCommand
		{
			[Token(Token = "0x60001D4")]
			[Address(RVA = "0x18065D0", Offset = "0x18065D0", VA = "0x18065D0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60001D5")]
		[Address(RVA = "0x1806638", Offset = "0x1806638", VA = "0x1806638")]
		public AudioEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000042")]
	public class AudioEventGroup
	{
		[Token(Token = "0x4000148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool isExpanded;

		[Token(Token = "0x4000149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool allPlayersShouldHear;

		[Token(Token = "0x400014A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public bool useLayerFilter;

		[Token(Token = "0x400014B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
		public bool useTagFilter;

		[Token(Token = "0x400014C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<int> matchingLayers;

		[Token(Token = "0x400014D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<string> matchingTags;

		[Token(Token = "0x400014E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool customSoundActive;

		[Token(Token = "0x400014F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool isCustomEvent;

		[Token(Token = "0x4000150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string customEventName;

		[Token(Token = "0x4000151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool mechanimEventActive;

		[Token(Token = "0x4000152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool isMechanimStateCheckEvent;

		[Token(Token = "0x4000153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string mechanimStateName;

		[Token(Token = "0x4000154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool mechEventPlayedForState;

		[Token(Token = "0x4000155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<AudioEvent> SoundEvents;

		[Token(Token = "0x4000156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public EventSounds.PreviousSoundStopMode mouseDragStopMode;

		[Token(Token = "0x4000157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float mouseDragFadeOutTime;

		[Token(Token = "0x4000158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public EventSounds.RetriggerLimMode retriggerLimitMode;

		[Token(Token = "0x4000159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public int limitPerXFrm;

		[Token(Token = "0x400015A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float limitPerXSec;

		[Token(Token = "0x400015B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public int triggeredLastFrame;

		[Token(Token = "0x400015C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float triggeredLastTime;

		[Token(Token = "0x400015D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float triggerStayForTime;

		[Token(Token = "0x400015E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool doesTriggerStayRepeat;

		[Token(Token = "0x400015F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float sliderValue;

		[Token(Token = "0x60001D6")]
		[Address(RVA = "0x1806854", Offset = "0x1806854", VA = "0x1806854")]
		public AudioEventGroup()
		{
		}
	}
	[Token(Token = "0x2000043")]
	public class AudioScriptOrder : Attribute
	{
		[Token(Token = "0x4000160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int Order;

		[Token(Token = "0x60001D7")]
		[Address(RVA = "0x1809594", Offset = "0x1809594", VA = "0x1809594")]
		public AudioScriptOrder(int order)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000044")]
	public class BusFadeInfo
	{
		[Token(Token = "0x4000161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string NameOfBus;

		[Token(Token = "0x4000162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GroupBus ActingBus;

		[Token(Token = "0x4000163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float StartVolume;

		[Token(Token = "0x4000164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float TargetVolume;

		[Token(Token = "0x4000165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float StartTime;

		[Token(Token = "0x4000166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float CompletionTime;

		[Token(Token = "0x4000167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool IsActive;

		[Token(Token = "0x4000168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool WillStopGroupAfterFade;

		[Token(Token = "0x4000169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool WillResetVolumeAfterFade;

		[Token(Token = "0x400016A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Action completionAction;

		[Token(Token = "0x60001D8")]
		[Address(RVA = "0x180C404", Offset = "0x180C404", VA = "0x180C404")]
		public BusFadeInfo()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000045")]
	public class BusPitchGlideInfo
	{
		[Token(Token = "0x400016B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string NameOfBus;

		[Token(Token = "0x400016C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float CompletionTime;

		[Token(Token = "0x400016D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool IsActive;

		[Token(Token = "0x400016E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<SoundGroupVariation> GlidingVariations;

		[Token(Token = "0x400016F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action completionAction;

		[Token(Token = "0x60001D9")]
		[Address(RVA = "0x180C414", Offset = "0x180C414", VA = "0x180C414")]
		public BusPitchGlideInfo()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000046")]
	public class CustomEvent
	{
		[Token(Token = "0x4000170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string EventName;

		[Token(Token = "0x4000171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string ProspectiveName;

		[Token(Token = "0x4000172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool IsEditing;

		[Token(Token = "0x4000173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool eventExpanded;

		[Token(Token = "0x4000174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public MasterAudio.CustomEventReceiveMode eventReceiveMode;

		[Token(Token = "0x4000175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float distanceThreshold;

		[Token(Token = "0x4000176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public MasterAudio.EventReceiveFilter eventRcvFilterMode;

		[Token(Token = "0x4000177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int filterModeQty;

		[Token(Token = "0x4000178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool isTemporary;

		[Token(Token = "0x4000179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int frameLastFired;

		[Token(Token = "0x400017A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string categoryName;

		[Token(Token = "0x60001DA")]
		[Address(RVA = "0x180D10C", Offset = "0x180D10C", VA = "0x180D10C")]
		public CustomEvent(string eventName)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000047")]
	public class CustomEventCategory
	{
		[Token(Token = "0x400017B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string CatName;

		[Token(Token = "0x400017C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool IsExpanded;

		[Token(Token = "0x400017D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool IsEditing;

		[Token(Token = "0x400017E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool IsTemporary;

		[Token(Token = "0x400017F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string ProspectiveName;

		[Token(Token = "0x60001DB")]
		[Address(RVA = "0x180D1B4", Offset = "0x180D1B4", VA = "0x180D1B4")]
		public CustomEventCategory()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000048")]
	public class CustomEventToFireInfo
	{
		[Token(Token = "0x4000180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string eventName;

		[Token(Token = "0x4000181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform eventOrigin;

		[Token(Token = "0x60001DC")]
		[Address(RVA = "0x180D22C", Offset = "0x180D22C", VA = "0x180D22C")]
		public CustomEventToFireInfo()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000049")]
	public class DuckGroupInfo
	{
		[Token(Token = "0x4000182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string soundType;

		[Token(Token = "0x4000183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float riseVolStart;

		[Token(Token = "0x4000184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float unduckTime;

		[Token(Token = "0x4000185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float duckedVolumeCut;

		[Token(Token = "0x4000186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool isTemporary;

		[Token(Token = "0x60001DD")]
		[Address(RVA = "0x180D70C", Offset = "0x180D70C", VA = "0x180D70C")]
		public DuckGroupInfo()
		{
		}
	}
	[Token(Token = "0x200004A")]
	public class DynamicGroupVariation : MonoBehaviour
	{
		[Token(Token = "0x4000187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xFC964C", Offset = "0xFC964C")]
		public int probabilityToPlay;

		[Token(Token = "0x4000188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool useLocalization;

		[Token(Token = "0x4000189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool useRandomPitch;

		[Token(Token = "0x400018A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SoundGroupVariation.RandomPitchMode randomPitchMode;

		[Token(Token = "0x400018B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float randomPitchMin;

		[Token(Token = "0x400018C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float randomPitchMax;

		[Token(Token = "0x400018D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool useRandomVolume;

		[Token(Token = "0x400018E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SoundGroupVariation.RandomVolumeMode randomVolumeMode;

		[Token(Token = "0x400018F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float randomVolumeMin;

		[Token(Token = "0x4000190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float randomVolumeMax;

		[Token(Token = "0x4000191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int weight;

		[Token(Token = "0x4000192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public MasterAudio.AudioLocation audLocation;

		[Token(Token = "0x4000193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string resourceFileName;

		[Token(Token = "0x4000194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool isExpanded;

		[Token(Token = "0x4000195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool isChecked;

		[Token(Token = "0x4000196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		public bool useFades;

		[Token(Token = "0x4000197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float fadeInTime;

		[Token(Token = "0x4000198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float fadeOutTime;

		[Token(Token = "0x4000199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public bool useCustomLooping;

		[Token(Token = "0x400019A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int minCustomLoops;

		[Token(Token = "0x400019B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public int maxCustomLoops;

		[Token(Token = "0x400019C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool useIntroSilence;

		[Token(Token = "0x400019D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float introSilenceMin;

		[Token(Token = "0x400019E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float introSilenceMax;

		[Token(Token = "0x400019F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public bool useRandomStartTime;

		[Token(Token = "0x40001A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float randomStartMinPercent;

		[Token(Token = "0x40001A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float randomStartMaxPercent;

		[Token(Token = "0x40001A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float randomEndPercent;

		[Token(Token = "0x40001A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private AudioDistortionFilter _distFilter;

		[Token(Token = "0x40001A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private AudioEchoFilter _echoFilter;

		[Token(Token = "0x40001A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private AudioHighPassFilter _hpFilter;

		[Token(Token = "0x40001A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private AudioLowPassFilter _lpFilter;

		[Token(Token = "0x40001A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private AudioReverbFilter _reverbFilter;

		[Token(Token = "0x40001A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private AudioChorusFilter _chorusFilter;

		[Token(Token = "0x40001A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private DynamicSoundGroup _parentGroupScript;

		[Token(Token = "0x40001AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Transform _trans;

		[Token(Token = "0x40001AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private AudioSource _aud;

		[Token(Token = "0x17000030")]
		public AudioDistortionFilter DistortionFilter
		{
			[Token(Token = "0x60001DE")]
			[Address(RVA = "0x180D780", Offset = "0x180D780", VA = "0x180D780")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000031")]
		public AudioReverbFilter ReverbFilter
		{
			[Token(Token = "0x60001DF")]
			[Address(RVA = "0x180D82C", Offset = "0x180D82C", VA = "0x180D82C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000032")]
		public AudioChorusFilter ChorusFilter
		{
			[Token(Token = "0x60001E0")]
			[Address(RVA = "0x180D8D8", Offset = "0x180D8D8", VA = "0x180D8D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000033")]
		public AudioEchoFilter EchoFilter
		{
			[Token(Token = "0x60001E1")]
			[Address(RVA = "0x180D984", Offset = "0x180D984", VA = "0x180D984")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000034")]
		public AudioLowPassFilter LowPassFilter
		{
			[Token(Token = "0x60001E2")]
			[Address(RVA = "0x180DA30", Offset = "0x180DA30", VA = "0x180DA30")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000035")]
		public AudioHighPassFilter HighPassFilter
		{
			[Token(Token = "0x60001E3")]
			[Address(RVA = "0x180DADC", Offset = "0x180DADC", VA = "0x180DADC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000036")]
		public DynamicSoundGroup ParentGroup
		{
			[Token(Token = "0x60001E4")]
			[Address(RVA = "0x180DB88", Offset = "0x180DB88", VA = "0x180DB88")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000037")]
		public Transform Trans
		{
			[Token(Token = "0x60001E5")]
			[Address(RVA = "0x180DCE4", Offset = "0x180DCE4", VA = "0x180DCE4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000038")]
		public bool HasActiveFXFilter
		{
			[Token(Token = "0x60001E6")]
			[Address(RVA = "0x180DD88", Offset = "0x180DD88", VA = "0x180DD88")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000039")]
		public AudioSource VarAudio
		{
			[Token(Token = "0x60001E7")]
			[Address(RVA = "0x180DFE0", Offset = "0x180DFE0", VA = "0x180DFE0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001E8")]
		[Address(RVA = "0x180E08C", Offset = "0x180E08C", VA = "0x180E08C")]
		public DynamicGroupVariation()
		{
		}
	}
	[Token(Token = "0x200004B")]
	public class DynamicSoundGroup : MonoBehaviour
	{
		[Token(Token = "0x40001AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject variationTemplate;

		[Token(Token = "0x40001AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool alwaysHighestPriority;

		[Token(Token = "0x40001AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float groupMasterVolume;

		[Token(Token = "0x40001AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int retriggerPercentage;

		[Token(Token = "0x40001B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public MasterAudioGroup.VariationSequence curVariationSequence;

		[Token(Token = "0x40001B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool useNoRepeatRefill;

		[Token(Token = "0x40001B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool useInactivePeriodPoolRefill;

		[Token(Token = "0x40001B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float inactivePeriodSeconds;

		[Token(Token = "0x40001B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public MasterAudioGroup.VariationMode curVariationMode;

		[Token(Token = "0x40001B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public MasterAudio.AudioLocation bulkVariationMode;

		[Token(Token = "0x40001B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float chainLoopDelayMin;

		[Token(Token = "0x40001B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float chainLoopDelayMax;

		[Token(Token = "0x40001B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public MasterAudioGroup.ChainedLoopLoopMode chainLoopMode;

		[Token(Token = "0x40001B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public int chainLoopNumLoops;

		[Token(Token = "0x40001BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool useDialogFadeOut;

		[Token(Token = "0x40001BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float dialogFadeOutTime;

		[Token(Token = "0x40001BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string comments;

		[Token(Token = "0x40001BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool logSound;

		[Token(Token = "0x40001BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		public bool soundPlayedEventActive;

		[Token(Token = "0x40001BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public string soundPlayedCustomEvent;

		[Token(Token = "0x40001C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public int busIndex;

		[Token(Token = "0x40001C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public MasterAudio.ItemSpatialBlendType spatialBlendType;

		[Token(Token = "0x40001C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float spatialBlend;

		[Token(Token = "0x40001C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public string busName;

		[Token(Token = "0x40001C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool isExistingBus;

		[Token(Token = "0x40001C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		public bool isCopiedFromDGSC;

		[Token(Token = "0x40001C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public MasterAudioGroup.LimitMode limitMode;

		[Token(Token = "0x40001C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public int limitPerXFrames;

		[Token(Token = "0x40001C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float minimumTimeBetween;

		[Token(Token = "0x40001C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool limitPolyphony;

		[Token(Token = "0x40001CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public int voiceLimitCount;

		[Token(Token = "0x40001CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public MasterAudioGroup.TargetDespawnedBehavior targetDespawnedBehavior;

		[Token(Token = "0x40001CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float despawnFadeTime;

		[Token(Token = "0x40001CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public bool isUsingOcclusion;

		[Token(Token = "0x40001CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA9")]
		public bool willOcclusionOverrideRaycastOffset;

		[Token(Token = "0x40001CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public float occlusionRayCastOffset;

		[Token(Token = "0x40001D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool willOcclusionOverrideFrequencies;

		[Token(Token = "0x40001D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float occlusionMaxCutoffFreq;

		[Token(Token = "0x40001D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float occlusionMinCutoffFreq;

		[Token(Token = "0x40001D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public bool copySettingsExpanded;

		[Token(Token = "0x40001D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBD")]
		public bool expandLinkedGroups;

		[Token(Token = "0x40001D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public List<string> childSoundGroups;

		[Token(Token = "0x40001D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public List<string> endLinkedGroups;

		[Token(Token = "0x40001D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public MasterAudio.LinkedGroupSelectionType linkedStartGroupSelectionType;

		[Token(Token = "0x40001D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public MasterAudio.LinkedGroupSelectionType linkedStopGroupSelectionType;

		[Token(Token = "0x40001D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public List<DynamicGroupVariation> groupVariations;

		[Token(Token = "0x60001E9")]
		[Address(RVA = "0x180E0C4", Offset = "0x180E0C4", VA = "0x180E0C4")]
		public DynamicSoundGroup()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200004C")]
	public class FootstepGroup
	{
		[Token(Token = "0x40001DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool isExpanded;

		[Token(Token = "0x40001DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool useLayerFilter;

		[Token(Token = "0x40001DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public bool useTagFilter;

		[Token(Token = "0x40001DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<int> matchingLayers;

		[Token(Token = "0x40001DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<string> matchingTags;

		[Token(Token = "0x40001DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string soundType;

		[Token(Token = "0x40001E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public EventSounds.VariationType variationType;

		[Token(Token = "0x40001E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string variationName;

		[Token(Token = "0x40001E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float volume;

		[Token(Token = "0x40001E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool useFixedPitch;

		[Token(Token = "0x40001E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float pitch;

		[Token(Token = "0x40001E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float delaySound;

		[Token(Token = "0x60001EA")]
		[Address(RVA = "0x18238A4", Offset = "0x18238A4", VA = "0x18238A4")]
		public FootstepGroup()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200004D")]
	public class GroupBus
	{
		[Token(Token = "0x40001E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string busName;

		[Token(Token = "0x40001E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float volume;

		[Token(Token = "0x40001E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool isSoloed;

		[Token(Token = "0x40001E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool isMuted;

		[Token(Token = "0x40001EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int voiceLimit;

		[Token(Token = "0x40001EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool stopOldest;

		[Token(Token = "0x40001EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool isExisting;

		[Token(Token = "0x40001ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		public bool isTemporary;

		[Token(Token = "0x40001EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
		public bool isUsingOcclusion;

		[Token(Token = "0x40001EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color busColor;

		[Token(Token = "0x40001F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AudioMixerGroup mixerChannel;

		[Token(Token = "0x40001F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool forceTo2D;

		[Token(Token = "0x40001F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly List<int> _activeAudioSourcesIds;

		[Token(Token = "0x40001F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float _originalVolume;

		[Token(Token = "0x1700003A")]
		public int ActiveVoices
		{
			[Token(Token = "0x60001ED")]
			[Address(RVA = "0x1823FA8", Offset = "0x1823FA8", VA = "0x1823FA8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700003B")]
		public bool BusVoiceLimitReached
		{
			[Token(Token = "0x60001EE")]
			[Address(RVA = "0x1823FF8", Offset = "0x1823FF8", VA = "0x1823FF8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700003C")]
		public float OriginalVolume
		{
			[Token(Token = "0x60001EF")]
			[Address(RVA = "0x1824064", Offset = "0x1824064", VA = "0x1824064")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60001F0")]
			[Address(RVA = "0x182406C", Offset = "0x182406C", VA = "0x182406C")]
			set
			{
			}
		}

		[Token(Token = "0x60001EB")]
		[Address(RVA = "0x1823EA8", Offset = "0x1823EA8", VA = "0x1823EA8")]
		public void AddActiveAudioSourceId(int id)
		{
		}

		[Token(Token = "0x60001EC")]
		[Address(RVA = "0x1823F40", Offset = "0x1823F40", VA = "0x1823F40")]
		public void RemoveActiveAudioSourceId(int id)
		{
		}

		[Token(Token = "0x60001F1")]
		[Address(RVA = "0x1824074", Offset = "0x1824074", VA = "0x1824074")]
		public GroupBus()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200004E")]
	public class GroupFadeInfo
	{
		[Token(Token = "0x40001F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MasterAudioGroup ActingGroup;

		[Token(Token = "0x40001F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string NameOfGroup;

		[Token(Token = "0x40001F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float StartVolume;

		[Token(Token = "0x40001F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float TargetVolume;

		[Token(Token = "0x40001F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float StartTime;

		[Token(Token = "0x40001F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float CompletionTime;

		[Token(Token = "0x40001FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool IsActive;

		[Token(Token = "0x40001FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool WillStopGroupAfterFade;

		[Token(Token = "0x40001FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool WillResetVolumeAfterFade;

		[Token(Token = "0x40001FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Action completionAction;

		[Token(Token = "0x60001F2")]
		[Address(RVA = "0x1824120", Offset = "0x1824120", VA = "0x1824120")]
		public GroupFadeInfo()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200004F")]
	public class GroupPitchGlideInfo
	{
		[Token(Token = "0x40001FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MasterAudioGroup ActingGroup;

		[Token(Token = "0x40001FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string NameOfGroup;

		[Token(Token = "0x4000200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float CompletionTime;

		[Token(Token = "0x4000201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool IsActive;

		[Token(Token = "0x4000202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<SoundGroupVariation> GlidingVariations;

		[Token(Token = "0x4000203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Action completionAction;

		[Token(Token = "0x60001F3")]
		[Address(RVA = "0x1824130", Offset = "0x1824130", VA = "0x1824130")]
		public GroupPitchGlideInfo()
		{
		}
	}
	[Token(Token = "0x2000050")]
	public interface ICustomEventReceiver
	{
		[Token(Token = "0x60001F4")]
		void CheckForIllegalCustomEvents();

		[Token(Token = "0x60001F5")]
		void ReceiveEvent(string customEventName, Vector3 originPoint);

		[Token(Token = "0x60001F6")]
		bool SubscribesToEvent(string customEventName);

		[Token(Token = "0x60001F7")]
		void RegisterReceiver();

		[Token(Token = "0x60001F8")]
		void UnregisterReceiver();

		[Token(Token = "0x60001F9")]
		IList<AudioEventGroup> GetAllEvents();
	}
	[Token(Token = "0x2000051")]
	public class MasterAudioGroup : MonoBehaviour
	{
		[Token(Token = "0x20001AF")]
		public enum TargetDespawnedBehavior
		{
			[Token(Token = "0x4000939")]
			None,
			[Token(Token = "0x400093A")]
			Stop,
			[Token(Token = "0x400093B")]
			FadeOut
		}

		[Token(Token = "0x20001B0")]
		public enum VariationSequence
		{
			[Token(Token = "0x400093D")]
			Randomized,
			[Token(Token = "0x400093E")]
			TopToBottom
		}

		[Token(Token = "0x20001B1")]
		public enum VariationMode
		{
			[Token(Token = "0x4000940")]
			Normal,
			[Token(Token = "0x4000941")]
			LoopedChain,
			[Token(Token = "0x4000942")]
			Dialog
		}

		[Token(Token = "0x20001B2")]
		public enum ChainedLoopLoopMode
		{
			[Token(Token = "0x4000944")]
			Endless,
			[Token(Token = "0x4000945")]
			NumberOfLoops
		}

		[Token(Token = "0x20001B3")]
		public enum LimitMode
		{
			[Token(Token = "0x4000947")]
			None,
			[Token(Token = "0x4000948")]
			FrameBased,
			[Token(Token = "0x4000949")]
			TimeBased
		}

		[Token(Token = "0x4000204")]
		public const float UseCurveSpatialBlend = -99f;

		[Token(Token = "0x4000205")]
		public const string NoBus = "[NO BUS]";

		[Token(Token = "0x4000206")]
		public const int MinNoRepeatVariations = 3;

		[Token(Token = "0x4000207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int busIndex;

		[Token(Token = "0x4000208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public MasterAudio.ItemSpatialBlendType spatialBlendType;

		[Token(Token = "0x4000209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float spatialBlend;

		[Token(Token = "0x400020A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool isSelected;

		[Token(Token = "0x400020B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool isExpanded;

		[Token(Token = "0x400020C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float groupMasterVolume;

		[Token(Token = "0x400020D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int retriggerPercentage;

		[Token(Token = "0x400020E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public VariationMode curVariationMode;

		[Token(Token = "0x400020F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool alwaysHighestPriority;

		[Token(Token = "0x4000210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float chainLoopDelayMin;

		[Token(Token = "0x4000211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float chainLoopDelayMax;

		[Token(Token = "0x4000212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ChainedLoopLoopMode chainLoopMode;

		[Token(Token = "0x4000213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int chainLoopNumLoops;

		[Token(Token = "0x4000214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool useDialogFadeOut;

		[Token(Token = "0x4000215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float dialogFadeOutTime;

		[Token(Token = "0x4000216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public VariationSequence curVariationSequence;

		[Token(Token = "0x4000217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool useNoRepeatRefill;

		[Token(Token = "0x4000218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		public bool useInactivePeriodPoolRefill;

		[Token(Token = "0x4000219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float inactivePeriodSeconds;

		[Token(Token = "0x400021A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<SoundGroupVariation> groupVariations;

		[Token(Token = "0x400021B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public MasterAudio.AudioLocation bulkVariationMode;

		[Token(Token = "0x400021C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string comments;

		[Token(Token = "0x400021D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool logSound;

		[Token(Token = "0x400021E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		public bool copySettingsExpanded;

		[Token(Token = "0x400021F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7A")]
		public bool expandLinkedGroups;

		[Token(Token = "0x4000220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public List<string> childSoundGroups;

		[Token(Token = "0x4000221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public List<string> endLinkedGroups;

		[Token(Token = "0x4000222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public MasterAudio.LinkedGroupSelectionType linkedStartGroupSelectionType;

		[Token(Token = "0x4000223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public MasterAudio.LinkedGroupSelectionType linkedStopGroupSelectionType;

		[Token(Token = "0x4000224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public LimitMode limitMode;

		[Token(Token = "0x4000225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public int limitPerXFrames;

		[Token(Token = "0x4000226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public float minimumTimeBetween;

		[Token(Token = "0x4000227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public bool useClipAgePriority;

		[Token(Token = "0x4000228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA5")]
		public bool limitPolyphony;

		[Token(Token = "0x4000229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public int voiceLimitCount;

		[Token(Token = "0x400022A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public TargetDespawnedBehavior targetDespawnedBehavior;

		[Token(Token = "0x400022B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float despawnFadeTime;

		[Token(Token = "0x400022C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public bool isUsingOcclusion;

		[Token(Token = "0x400022D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB5")]
		public bool willOcclusionOverrideRaycastOffset;

		[Token(Token = "0x400022E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float occlusionRayCastOffset;

		[Token(Token = "0x400022F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public bool willOcclusionOverrideFrequencies;

		[Token(Token = "0x4000230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public float occlusionMaxCutoffFreq;

		[Token(Token = "0x4000231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public float occlusionMinCutoffFreq;

		[Token(Token = "0x4000232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public bool isSoloed;

		[Token(Token = "0x4000233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
		public bool isMuted;

		[Token(Token = "0x4000234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCA")]
		public bool soundPlayedEventActive;

		[Token(Token = "0x4000235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public string soundPlayedCustomEvent;

		[Token(Token = "0x4000236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public bool willCleanUpDelegatesAfterStop;

		[Token(Token = "0x4000238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public int frames;

		[Token(Token = "0x4000239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private List<int> _activeAudioSourcesIds;

		[Token(Token = "0x400023A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private string _objectName;

		[Token(Token = "0x400023B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Transform _trans;

		[Token(Token = "0x400023C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private float _originalVolume;

		[Token(Token = "0x400023D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC9674", Offset = "0xFC9674")]
		private int <ChainLoopCount>k__BackingField;

		[Token(Token = "0x1700003D")]
		public float SpatialBlendForGroup
		{
			[Token(Token = "0x60001FF")]
			[Address(RVA = "0x1DAD6DC", Offset = "0x1DAD6DC", VA = "0x1DAD6DC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700003E")]
		public int ActiveVoices
		{
			[Token(Token = "0x6000200")]
			[Address(RVA = "0x1DAD7CC", Offset = "0x1DAD7CC", VA = "0x1DAD7CC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700003F")]
		public int TotalVoices
		{
			[Token(Token = "0x6000201")]
			[Address(RVA = "0x1DAD820", Offset = "0x1DAD820", VA = "0x1DAD820")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000040")]
		public bool WillCleanUpDelegatesAfterStop
		{
			[Token(Token = "0x6000202")]
			[Address(RVA = "0x1DAD844", Offset = "0x1DAD844", VA = "0x1DAD844")]
			set
			{
			}
		}

		[Token(Token = "0x17000041")]
		public GroupBus BusForGroup
		{
			[Token(Token = "0x6000203")]
			[Address(RVA = "0x1DAD570", Offset = "0x1DAD570", VA = "0x1DAD570")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000042")]
		public float OriginalVolume
		{
			[Token(Token = "0x6000204")]
			[Address(RVA = "0x1DAD850", Offset = "0x1DAD850", VA = "0x1DAD850")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000205")]
			[Address(RVA = "0x1DAD858", Offset = "0x1DAD858", VA = "0x1DAD858")]
			set
			{
			}
		}

		[Token(Token = "0x17000043")]
		public bool LoggingEnabledForGroup
		{
			[Token(Token = "0x6000206")]
			[Address(RVA = "0x1DAD860", Offset = "0x1DAD860", VA = "0x1DAD860")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000044")]
		public int ChainLoopCount
		{
			[Token(Token = "0x600020A")]
			[Address(RVA = "0x1DAD930", Offset = "0x1DAD930", VA = "0x1DAD930")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD5994", Offset = "0xFD5994")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600020B")]
			[Address(RVA = "0x1DAD938", Offset = "0x1DAD938", VA = "0x1DAD938")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD59A4", Offset = "0xFD59A4")]
			set
			{
			}
		}

		[Token(Token = "0x17000045")]
		public string GameObjectName
		{
			[Token(Token = "0x600020C")]
			[Address(RVA = "0x1DAD940", Offset = "0x1DAD940", VA = "0x1DAD940")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000046")]
		public bool UsesNoRepeat
		{
			[Token(Token = "0x600020D")]
			[Address(RVA = "0x1DAD990", Offset = "0x1DAD990", VA = "0x1DAD990")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000047")]
		private Transform Trans
		{
			[Token(Token = "0x600020E")]
			[Address(RVA = "0x1DAD414", Offset = "0x1DAD414", VA = "0x1DAD414")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000048")]
		private List<int> ActiveAudioSourceIds
		{
			[Token(Token = "0x600020F")]
			[Address(RVA = "0x1DAD364", Offset = "0x1DAD364", VA = "0x1DAD364")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000001")]
		public event Action LastVariationFinishedPlay
		{
			[Token(Token = "0x60001FA")]
			[Address(RVA = "0x1DAD108", Offset = "0x1DAD108", VA = "0x1DAD108")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD5974", Offset = "0xFD5974")]
			add
			{
			}
			[Token(Token = "0x60001FB")]
			[Address(RVA = "0x1DAD1AC", Offset = "0x1DAD1AC", VA = "0x1DAD1AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD5984", Offset = "0xFD5984")]
			remove
			{
			}
		}

		[Token(Token = "0x60001FC")]
		[Address(RVA = "0x1DAD250", Offset = "0x1DAD250", VA = "0x1DAD250")]
		private void Start()
		{
		}

		[Token(Token = "0x60001FD")]
		[Address(RVA = "0x1DAD4B8", Offset = "0x1DAD4B8", VA = "0x1DAD4B8")]
		public void AddActiveAudioSourceId(int varInstanceId)
		{
		}

		[Token(Token = "0x60001FE")]
		[Address(RVA = "0x1DAD648", Offset = "0x1DAD648", VA = "0x1DAD648")]
		public void RemoveActiveAudioSourceId(int varInstanceId)
		{
		}

		[Token(Token = "0x6000207")]
		[Address(RVA = "0x1DAD8DC", Offset = "0x1DAD8DC", VA = "0x1DAD8DC")]
		public void FireLastVariationFinishedPlay()
		{
		}

		[Token(Token = "0x6000208")]
		[Address(RVA = "0x1DAD8F0", Offset = "0x1DAD8F0", VA = "0x1DAD8F0")]
		public void SubscribeToLastVariationFinishedPlay(Action finishedCallback)
		{
		}

		[Token(Token = "0x6000209")]
		[Address(RVA = "0x1DAD924", Offset = "0x1DAD924", VA = "0x1DAD924")]
		public void UnsubscribeFromLastVariationFinishedPlay()
		{
		}

		[Token(Token = "0x6000210")]
		[Address(RVA = "0x1DADA04", Offset = "0x1DADA04", VA = "0x1DADA04")]
		public MasterAudioGroup()
		{
		}
	}
	[Token(Token = "0x2000052")]
	public class MasterCustomEventAttribute : PropertyAttribute
	{
		[Token(Token = "0x6000211")]
		[Address(RVA = "0x1DADB98", Offset = "0x1DADB98", VA = "0x1DADB98")]
		public MasterCustomEventAttribute()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000053")]
	public class MusicSetting
	{
		[Token(Token = "0x20001B4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC86C4", Offset = "0xFC86C4")]
		private sealed class <>c__DisplayClass32_0
		{
			[Token(Token = "0x400094A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SongMetadataStringValue valToClone;

			[Token(Token = "0x6000F20")]
			[Address(RVA = "0x1DAF724", Offset = "0x1DAF724", VA = "0x1DAF724")]
			public <>c__DisplayClass32_0()
			{
			}

			[Token(Token = "0x6000F21")]
			[Address(RVA = "0x1DAF854", Offset = "0x1DAF854", VA = "0x1DAF854")]
			internal bool <Clone>b__0(SongMetadataProperty p)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20001B5")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC86D4", Offset = "0xFC86D4")]
		private sealed class <>c__DisplayClass32_1
		{
			[Token(Token = "0x400094B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SongMetadataFloatValue valToClone;

			[Token(Token = "0x6000F22")]
			[Address(RVA = "0x1DAF770", Offset = "0x1DAF770", VA = "0x1DAF770")]
			public <>c__DisplayClass32_1()
			{
			}

			[Token(Token = "0x6000F23")]
			[Address(RVA = "0x1DAF880", Offset = "0x1DAF880", VA = "0x1DAF880")]
			internal bool <Clone>b__1(SongMetadataProperty p)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20001B6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC86E4", Offset = "0xFC86E4")]
		private sealed class <>c__DisplayClass32_2
		{
			[Token(Token = "0x400094C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SongMetadataBoolValue valToClone;

			[Token(Token = "0x6000F24")]
			[Address(RVA = "0x1DAF7BC", Offset = "0x1DAF7BC", VA = "0x1DAF7BC")]
			public <>c__DisplayClass32_2()
			{
			}

			[Token(Token = "0x6000F25")]
			[Address(RVA = "0x1DAF8AC", Offset = "0x1DAF8AC", VA = "0x1DAF8AC")]
			internal bool <Clone>b__2(SongMetadataProperty p)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20001B7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC86F4", Offset = "0xFC86F4")]
		private sealed class <>c__DisplayClass32_3
		{
			[Token(Token = "0x400094D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SongMetadataIntValue valToClone;

			[Token(Token = "0x6000F26")]
			[Address(RVA = "0x1DAF808", Offset = "0x1DAF808", VA = "0x1DAF808")]
			public <>c__DisplayClass32_3()
			{
			}

			[Token(Token = "0x6000F27")]
			[Address(RVA = "0x1DAF8D8", Offset = "0x1DAF8D8", VA = "0x1DAF8D8")]
			internal bool <Clone>b__3(SongMetadataProperty p)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x400023E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string alias;

		[Token(Token = "0x400023F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MasterAudio.AudioLocation audLocation;

		[Token(Token = "0x4000240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioClip clip;

		[Token(Token = "0x4000241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string songName;

		[Token(Token = "0x4000242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string resourceFileName;

		[Token(Token = "0x4000243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float volume;

		[Token(Token = "0x4000244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float pitch;

		[Token(Token = "0x4000245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool isExpanded;

		[Token(Token = "0x4000246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public bool isLoop;

		[Token(Token = "0x4000247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		public bool isChecked;

		[Token(Token = "0x4000248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<SongMetadataStringValue> metadataStringValues;

		[Token(Token = "0x4000249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<SongMetadataBoolValue> metadataBoolValues;

		[Token(Token = "0x400024A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<SongMetadataIntValue> metadataIntValues;

		[Token(Token = "0x400024B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<SongMetadataFloatValue> metadataFloatValues;

		[Token(Token = "0x400024C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool metadataExpanded;

		[Token(Token = "0x400024D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public MasterAudio.CustomSongStartTimeMode songStartTimeMode;

		[Token(Token = "0x400024E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float customStartTime;

		[Token(Token = "0x400024F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float customStartTimeMax;

		[Token(Token = "0x4000250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public int lastKnownTimePoint;

		[Token(Token = "0x4000251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public bool wasLastKnownTimePointSet;

		[Token(Token = "0x4000252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public int songIndex;

		[Token(Token = "0x4000253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public bool songStartedEventExpanded;

		[Token(Token = "0x4000254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public string songStartedCustomEvent;

		[Token(Token = "0x4000255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool songChangedEventExpanded;

		[Token(Token = "0x4000256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public string songChangedCustomEvent;

		[Token(Token = "0x17000049")]
		public bool HasMetadataProperties
		{
			[Token(Token = "0x6000213")]
			[Address(RVA = "0x1DAF098", Offset = "0x1DAF098", VA = "0x1DAF098")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700004A")]
		public int MetadataPropertyCount
		{
			[Token(Token = "0x6000214")]
			[Address(RVA = "0x1DAF0B4", Offset = "0x1DAF0B4", VA = "0x1DAF0B4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700004B")]
		public float SongStartTime
		{
			[Token(Token = "0x6000215")]
			[Address(RVA = "0x1DAF134", Offset = "0x1DAF134", VA = "0x1DAF134")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000212")]
		[Address(RVA = "0x1DAEED8", Offset = "0x1DAEED8", VA = "0x1DAEED8")]
		public MusicSetting()
		{
		}

		[Token(Token = "0x6000216")]
		[Address(RVA = "0x1DAF160", Offset = "0x1DAF160", VA = "0x1DAF160")]
		public static MusicSetting Clone(MusicSetting mus, MasterAudio.Playlist aList)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000054")]
	public class OcclusionFreqChangeInfo
	{
		[Token(Token = "0x4000257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SoundGroupVariation ActingVariation;

		[Token(Token = "0x4000258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float StartFrequency;

		[Token(Token = "0x4000259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float TargetFrequency;

		[Token(Token = "0x400025A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float StartTime;

		[Token(Token = "0x400025B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float CompletionTime;

		[Token(Token = "0x400025C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool IsActive;

		[Token(Token = "0x6000217")]
		[Address(RVA = "0x1DAF904", Offset = "0x1DAF904", VA = "0x1DAF904")]
		public OcclusionFreqChangeInfo()
		{
		}
	}
	[Token(Token = "0x2000055")]
	public class PlaylistAttribute : PropertyAttribute
	{
		[Token(Token = "0x6000218")]
		[Address(RVA = "0x1DB08D4", Offset = "0x1DB08D4", VA = "0x1DB08D4")]
		public PlaylistAttribute()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000056")]
	public class SongMetadataBoolValue
	{
		[Token(Token = "0x400025D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string PropertyName;

		[Token(Token = "0x400025E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool Value;

		[Token(Token = "0x6000219")]
		[Address(RVA = "0x1DAF7C4", Offset = "0x1DAF7C4", VA = "0x1DAF7C4")]
		public SongMetadataBoolValue(SongMetadataProperty prop)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000057")]
	public class SongMetadataFloatValue
	{
		[Token(Token = "0x400025F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string PropertyName;

		[Token(Token = "0x4000260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Value;

		[Token(Token = "0x600021A")]
		[Address(RVA = "0x1DAF778", Offset = "0x1DAF778", VA = "0x1DAF778")]
		public SongMetadataFloatValue(SongMetadataProperty prop)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000058")]
	public class SongMetadataIntValue
	{
		[Token(Token = "0x4000261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string PropertyName;

		[Token(Token = "0x4000262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int Value;

		[Token(Token = "0x600021B")]
		[Address(RVA = "0x1DAF810", Offset = "0x1DAF810", VA = "0x1DAF810")]
		public SongMetadataIntValue(SongMetadataProperty prop)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000059")]
	public class SongMetadataProperty
	{
		[Token(Token = "0x20001B8")]
		public enum MetadataPropertyType
		{
			[Token(Token = "0x400094F")]
			Boolean,
			[Token(Token = "0x4000950")]
			String,
			[Token(Token = "0x4000951")]
			Integer,
			[Token(Token = "0x4000952")]
			Float
		}

		[Token(Token = "0x4000263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MetadataPropertyType PropertyType;

		[Token(Token = "0x4000264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string PropertyName;

		[Token(Token = "0x4000265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string ProspectiveName;

		[Token(Token = "0x4000266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool IsEditing;

		[Token(Token = "0x4000267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool PropertyExpanded;

		[Token(Token = "0x4000268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool AllSongsMustContain;

		[Token(Token = "0x4000269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
		public bool CanSongHaveMultiple;

		[Token(Token = "0x600021C")]
		[Address(RVA = "0x1DB8764", Offset = "0x1DB8764", VA = "0x1DB8764")]
		public SongMetadataProperty(string propertyName, MetadataPropertyType propertyType, bool allSongsMustContain, bool canSongHaveMultiple)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200005A")]
	public class SongMetadataStringValue
	{
		[Token(Token = "0x400026A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string PropertyName;

		[Token(Token = "0x400026B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Value;

		[Token(Token = "0x600021D")]
		[Address(RVA = "0x1DAF72C", Offset = "0x1DAF72C", VA = "0x1DAF72C")]
		public SongMetadataStringValue(SongMetadataProperty prop)
		{
		}
	}
	[Token(Token = "0x200005B")]
	public class SoundGroupAttribute : PropertyAttribute
	{
		[Token(Token = "0x600021E")]
		[Address(RVA = "0x1DB87E4", Offset = "0x1DB87E4", VA = "0x1DB87E4")]
		public SoundGroupAttribute()
		{
		}
	}
	[Token(Token = "0x200005C")]
	[AttributeAttribute(Name = "AudioScriptOrder", RVA = "0xFC60C0", Offset = "0xFC60C0")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xFC60C0", Offset = "0xFC60C0")]
	public class SoundGroupVariation : MonoBehaviour
	{
		[Token(Token = "0x20001B9")]
		public delegate void SoundFinishedEventHandler();

		[Token(Token = "0x20001BA")]
		public delegate void SoundLoopedEventHandler(int loopNumberStarted);

		[Token(Token = "0x20001BB")]
		public class PlaySoundParams
		{
			[Token(Token = "0x4000953")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string SoundType;

			[Token(Token = "0x4000954")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float VolumePercentage;

			[Token(Token = "0x4000955")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float? Pitch;

			[Token(Token = "0x4000956")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public double? TimeToSchedulePlay;

			[Token(Token = "0x4000957")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Transform SourceTrans;

			[Token(Token = "0x4000958")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public bool AttachToSource;

			[Token(Token = "0x4000959")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public float DelaySoundTime;

			[Token(Token = "0x400095A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public bool IsChainLoop;

			[Token(Token = "0x400095B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
			public bool IsSingleSubscribedPlay;

			[Token(Token = "0x400095C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public float GroupCalcVolume;

			[Token(Token = "0x400095D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public bool IsPlaying;

			[Token(Token = "0x6000F30")]
			[Address(RVA = "0x1DBDA48", Offset = "0x1DBDA48", VA = "0x1DBDA48")]
			public PlaySoundParams(string soundType, float volPercent, float groupCalcVolume, float? pitch, Transform sourceTrans, bool attach, float delaySoundTime, double? timeToSchedulePlay, bool isChainLoop, bool isSingleSubscribedPlay)
			{
			}
		}

		[Token(Token = "0x20001BC")]
		public enum PitchMode
		{
			[Token(Token = "0x400095F")]
			None,
			[Token(Token = "0x4000960")]
			Gliding
		}

		[Token(Token = "0x20001BD")]
		public enum FadeMode
		{
			[Token(Token = "0x4000962")]
			None,
			[Token(Token = "0x4000963")]
			FadeInOut,
			[Token(Token = "0x4000964")]
			FadeOutEarly,
			[Token(Token = "0x4000965")]
			GradualFade
		}

		[Token(Token = "0x20001BE")]
		public enum RandomPitchMode
		{
			[Token(Token = "0x4000967")]
			AddToClipPitch,
			[Token(Token = "0x4000968")]
			IgnoreClipPitch
		}

		[Token(Token = "0x20001BF")]
		public enum RandomVolumeMode
		{
			[Token(Token = "0x400096A")]
			AddToClipVolume,
			[Token(Token = "0x400096B")]
			IgnoreClipVolume
		}

		[Token(Token = "0x20001C0")]
		public enum DetectEndMode
		{
			[Token(Token = "0x400096D")]
			None,
			[Token(Token = "0x400096E")]
			DetectEnd
		}

		[Token(Token = "0x20001C1")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC8704", Offset = "0xFC8704")]
		private sealed class <WaitForLoadToUnloadClipAndDeactivate>d__106 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400096F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000970")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000971")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SoundGroupVariation <>4__this;

			[Token(Token = "0x1700032F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F34")]
				[Address(RVA = "0x1DBDBF4", Offset = "0x1DBDBF4", VA = "0x1DBDBF4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000330")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F36")]
				[Address(RVA = "0x1DBDC5C", Offset = "0x1DBDC5C", VA = "0x1DBDC5C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F31")]
			[Address(RVA = "0x1DBC3B4", Offset = "0x1DBC3B4", VA = "0x1DBC3B4")]
			[DebuggerHidden]
			public <WaitForLoadToUnloadClipAndDeactivate>d__106(int <>1__state)
			{
			}

			[Token(Token = "0x6000F32")]
			[Address(RVA = "0x1DBDB18", Offset = "0x1DBDB18", VA = "0x1DBDB18", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F33")]
			[Address(RVA = "0x1DBDB1C", Offset = "0x1DBDB1C", VA = "0x1DBDB1C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F35")]
			[Address(RVA = "0x1DBDBFC", Offset = "0x1DBDBFC", VA = "0x1DBDBFC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400026C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int weight;

		[Token(Token = "0x400026D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xFC9684", Offset = "0xFC9684")]
		public int probabilityToPlay;

		[Token(Token = "0x400026E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool useLocalization;

		[Token(Token = "0x400026F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool useRandomPitch;

		[Token(Token = "0x4000270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public RandomPitchMode randomPitchMode;

		[Token(Token = "0x4000271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float randomPitchMin;

		[Token(Token = "0x4000272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float randomPitchMax;

		[Token(Token = "0x4000273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool useRandomVolume;

		[Token(Token = "0x4000274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public RandomVolumeMode randomVolumeMode;

		[Token(Token = "0x4000275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float randomVolumeMin;

		[Token(Token = "0x4000276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float randomVolumeMax;

		[Token(Token = "0x4000277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public MasterAudio.AudioLocation audLocation;

		[Token(Token = "0x4000278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string resourceFileName;

		[Token(Token = "0x4000279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float original_pitch;

		[Token(Token = "0x400027A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float original_volume;

		[Token(Token = "0x400027B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool isExpanded;

		[Token(Token = "0x400027C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		public bool isChecked;

		[Token(Token = "0x400027D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		public bool useFades;

		[Token(Token = "0x400027E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float fadeInTime;

		[Token(Token = "0x400027F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float fadeOutTime;

		[Token(Token = "0x4000280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public bool useCustomLooping;

		[Token(Token = "0x4000281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int minCustomLoops;

		[Token(Token = "0x4000282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public int maxCustomLoops;

		[Token(Token = "0x4000283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool useRandomStartTime;

		[Token(Token = "0x4000284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float randomStartMinPercent;

		[Token(Token = "0x4000285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float randomStartMaxPercent;

		[Token(Token = "0x4000286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float randomEndPercent;

		[Token(Token = "0x4000287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool useIntroSilence;

		[Token(Token = "0x4000288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float introSilenceMin;

		[Token(Token = "0x4000289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float introSilenceMax;

		[Token(Token = "0x400028A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float fadeMaxVolume;

		[Token(Token = "0x400028B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public FadeMode curFadeMode;

		[Token(Token = "0x400028C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public PitchMode curPitchMode;

		[Token(Token = "0x400028D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public DetectEndMode curDetectEndMode;

		[Token(Token = "0x400028E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public int frames;

		[Token(Token = "0x400028F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private AudioSource _audioSource;

		[Token(Token = "0x4000290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private readonly PlaySoundParams _playSndParam;

		[Token(Token = "0x4000291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private AudioDistortionFilter _distFilter;

		[Token(Token = "0x4000292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private AudioEchoFilter _echoFilter;

		[Token(Token = "0x4000293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private AudioHighPassFilter _hpFilter;

		[Token(Token = "0x4000294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private AudioLowPassFilter _lpFilter;

		[Token(Token = "0x4000295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private AudioReverbFilter _reverbFilter;

		[Token(Token = "0x4000296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private AudioChorusFilter _chorusFilter;

		[Token(Token = "0x4000297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private float _maxVol;

		[Token(Token = "0x4000298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private int _instanceId;

		[Token(Token = "0x4000299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private bool? _audioLoops;

		[Token(Token = "0x400029A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private int _maxLoops;

		[Token(Token = "0x400029B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private SoundGroupVariationUpdater _varUpdater;

		[Token(Token = "0x400029C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private int _previousSoundFinishedFrame;

		[Token(Token = "0x400029D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private string _soundGroupName;

		[Token(Token = "0x400029E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private MasterAudio.VariationLoadStatus _loadStatus;

		[Token(Token = "0x400029F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private bool _isStopRequested;

		[Token(Token = "0x40002A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10D")]
		private bool _isPaused;

		[Token(Token = "0x40002A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10E")]
		private bool _isWarmingPlay;

		[Token(Token = "0x40002A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Transform _trans;

		[Token(Token = "0x40002A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private GameObject _go;

		[Token(Token = "0x40002A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Transform _objectToFollow;

		[Token(Token = "0x40002A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private Transform _objectToTriggerFrom;

		[Token(Token = "0x40002A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private MasterAudioGroup _parentGroupScript;

		[Token(Token = "0x40002A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private bool _attachToSource;

		[Token(Token = "0x40002AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private string _resFileName;

		[Token(Token = "0x40002AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private bool _hasStartedEndLinkedGroups;

		[Token(Token = "0x40002AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private Coroutine _loadResourceFileCoroutine;

		[Token(Token = "0x40002AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private Coroutine _loadAddressableCoroutine;

		[Token(Token = "0x40002AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private bool _isUnloadAddressableCoroutineRunning;

		[Token(Token = "0x40002AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC96BC", Offset = "0xFC96BC")]
		private float <LastTimePlayed>k__BackingField;

		[Token(Token = "0x1700004C")]
		public AudioDistortionFilter DistortionFilter
		{
			[Token(Token = "0x6000244")]
			[Address(RVA = "0x1DBCD68", Offset = "0x1DBCD68", VA = "0x1DBCD68")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004D")]
		public AudioReverbFilter ReverbFilter
		{
			[Token(Token = "0x6000245")]
			[Address(RVA = "0x1DBCE14", Offset = "0x1DBCE14", VA = "0x1DBCE14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004E")]
		public AudioChorusFilter ChorusFilter
		{
			[Token(Token = "0x6000246")]
			[Address(RVA = "0x1DBCEC0", Offset = "0x1DBCEC0", VA = "0x1DBCEC0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004F")]
		public AudioEchoFilter EchoFilter
		{
			[Token(Token = "0x6000247")]
			[Address(RVA = "0x1DBCF6C", Offset = "0x1DBCF6C", VA = "0x1DBCF6C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000050")]
		public AudioLowPassFilter LowPassFilter
		{
			[Token(Token = "0x6000248")]
			[Address(RVA = "0x1DBD018", Offset = "0x1DBD018", VA = "0x1DBD018")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000249")]
			[Address(RVA = "0x1DBD020", Offset = "0x1DBD020", VA = "0x1DBD020")]
			set
			{
			}
		}

		[Token(Token = "0x17000051")]
		public AudioHighPassFilter HighPassFilter
		{
			[Token(Token = "0x600024A")]
			[Address(RVA = "0x1DBD028", Offset = "0x1DBD028", VA = "0x1DBD028")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000052")]
		public Transform ObjectToFollow
		{
			[Token(Token = "0x600024B")]
			[Address(RVA = "0x1DBD0D4", Offset = "0x1DBD0D4", VA = "0x1DBD0D4")]
			get
			{
				return null;
			}
			[Token(Token = "0x600024C")]
			[Address(RVA = "0x1DBD0DC", Offset = "0x1DBD0DC", VA = "0x1DBD0DC")]
			set
			{
			}
		}

		[Token(Token = "0x17000053")]
		public Transform ObjectToTriggerFrom
		{
			[Token(Token = "0x600024D")]
			[Address(RVA = "0x1DBD230", Offset = "0x1DBD230", VA = "0x1DBD230")]
			get
			{
				return null;
			}
			[Token(Token = "0x600024E")]
			[Address(RVA = "0x1DBD238", Offset = "0x1DBD238", VA = "0x1DBD238")]
			set
			{
			}
		}

		[Token(Token = "0x17000054")]
		public bool HasActiveFXFilter
		{
			[Token(Token = "0x6000250")]
			[Address(RVA = "0x1DBD268", Offset = "0x1DBD268", VA = "0x1DBD268")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000055")]
		public MasterAudioGroup ParentGroup
		{
			[Token(Token = "0x6000251")]
			[Address(RVA = "0x1DB919C", Offset = "0x1DB919C", VA = "0x1DB919C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000056")]
		public float OriginalPitch
		{
			[Token(Token = "0x6000252")]
			[Address(RVA = "0x1DBA4D8", Offset = "0x1DBA4D8", VA = "0x1DBA4D8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000057")]
		public float OriginalVolume
		{
			[Token(Token = "0x6000253")]
			[Address(RVA = "0x1DBD4B0", Offset = "0x1DBD4B0", VA = "0x1DBD4B0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000058")]
		public string SoundGroupName
		{
			[Token(Token = "0x6000254")]
			[Address(RVA = "0x1DBD4F0", Offset = "0x1DBD4F0", VA = "0x1DBD4F0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000059")]
		public bool IsAvailableToPlay
		{
			[Token(Token = "0x6000255")]
			[Address(RVA = "0x1DBD540", Offset = "0x1DBD540", VA = "0x1DBD540")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700005A")]
		public float LastTimePlayed
		{
			[Token(Token = "0x6000256")]
			[Address(RVA = "0x1DBD5E8", Offset = "0x1DBD5E8", VA = "0x1DBD5E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD5A58", Offset = "0xFD5A58")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000257")]
			[Address(RVA = "0x1DBD5F0", Offset = "0x1DBD5F0", VA = "0x1DBD5F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD5A68", Offset = "0xFD5A68")]
			set
			{
			}
		}

		[Token(Token = "0x1700005B")]
		public bool ClipIsLoaded
		{
			[Token(Token = "0x6000258")]
			[Address(RVA = "0x1DBD5F8", Offset = "0x1DBD5F8", VA = "0x1DBD5F8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700005C")]
		public bool IsPlaying
		{
			[Token(Token = "0x6000259")]
			[Address(RVA = "0x1DBB404", Offset = "0x1DBB404", VA = "0x1DBB404")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700005D")]
		public MasterAudio.VariationLoadStatus LoadStatus
		{
			[Token(Token = "0x600025A")]
			[Address(RVA = "0x1DBD608", Offset = "0x1DBD608", VA = "0x1DBD608")]
			get
			{
				return default(MasterAudio.VariationLoadStatus);
			}
			[Token(Token = "0x600025B")]
			[Address(RVA = "0x1DBA338", Offset = "0x1DBA338", VA = "0x1DBA338")]
			set
			{
			}
		}

		[Token(Token = "0x1700005E")]
		public int InstanceId
		{
			[Token(Token = "0x600025C")]
			[Address(RVA = "0x1DBAC24", Offset = "0x1DBAC24", VA = "0x1DBAC24")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700005F")]
		public bool IsStopRequested
		{
			[Token(Token = "0x600025D")]
			[Address(RVA = "0x1DBD610", Offset = "0x1DBD610", VA = "0x1DBD610")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000060")]
		public Transform Trans
		{
			[Token(Token = "0x600025E")]
			[Address(RVA = "0x1DBBF7C", Offset = "0x1DBBF7C", VA = "0x1DBBF7C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000061")]
		public GameObject GameObj
		{
			[Token(Token = "0x600025F")]
			[Address(RVA = "0x1DB8F60", Offset = "0x1DB8F60", VA = "0x1DB8F60")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000062")]
		public AudioSource VarAudio
		{
			[Token(Token = "0x6000260")]
			[Address(RVA = "0x1DB8EB4", Offset = "0x1DB8EB4", VA = "0x1DB8EB4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000063")]
		public bool AudioLoops
		{
			[Token(Token = "0x6000261")]
			[Address(RVA = "0x1DBAB7C", Offset = "0x1DBAB7C", VA = "0x1DBAB7C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000064")]
		public string ResFileName
		{
			[Token(Token = "0x6000262")]
			[Address(RVA = "0x1DBA840", Offset = "0x1DBA840", VA = "0x1DBA840")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000065")]
		public SoundGroupVariationUpdater VariationUpdater
		{
			[Token(Token = "0x6000263")]
			[Address(RVA = "0x1DB97EC", Offset = "0x1DB97EC", VA = "0x1DB97EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000066")]
		public PlaySoundParams PlaySoundParm
		{
			[Token(Token = "0x6000264")]
			[Address(RVA = "0x1DBD618", Offset = "0x1DBD618", VA = "0x1DBD618")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000067")]
		public float SetGroupVolume
		{
			[Token(Token = "0x6000265")]
			[Address(RVA = "0x1DBD620", Offset = "0x1DBD620", VA = "0x1DBD620")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000266")]
			[Address(RVA = "0x1DBD63C", Offset = "0x1DBD63C", VA = "0x1DBD63C")]
			set
			{
			}
		}

		[Token(Token = "0x17000068")]
		public int MaxLoops
		{
			[Token(Token = "0x6000267")]
			[Address(RVA = "0x1DBD658", Offset = "0x1DBD658", VA = "0x1DBD658")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000069")]
		private bool Is2D
		{
			[Token(Token = "0x6000268")]
			[Address(RVA = "0x1DBD660", Offset = "0x1DBD660", VA = "0x1DBD660")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700006A")]
		public bool UsesOcclusion
		{
			[Token(Token = "0x6000269")]
			[Address(RVA = "0x1DB99B4", Offset = "0x1DB99B4", VA = "0x1DB99B4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700006B")]
		public bool IsPaused
		{
			[Token(Token = "0x600026A")]
			[Address(RVA = "0x1DBD68C", Offset = "0x1DBD68C", VA = "0x1DBD68C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x14000002")]
		public event SoundFinishedEventHandler SoundFinished
		{
			[Token(Token = "0x600021F")]
			[Address(RVA = "0x1DAC6D4", Offset = "0x1DAC6D4", VA = "0x1DAC6D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD59B4", Offset = "0xFD59B4")]
			add
			{
			}
			[Token(Token = "0x6000220")]
			[Address(RVA = "0x1DB8AFC", Offset = "0x1DB8AFC", VA = "0x1DB8AFC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD59C4", Offset = "0xFD59C4")]
			remove
			{
			}
		}

		[Token(Token = "0x14000003")]
		public event SoundLoopedEventHandler SoundLooped
		{
			[Token(Token = "0x6000221")]
			[Address(RVA = "0x1DB8BA4", Offset = "0x1DB8BA4", VA = "0x1DB8BA4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD59D4", Offset = "0xFD59D4")]
			add
			{
			}
			[Token(Token = "0x6000222")]
			[Address(RVA = "0x1DB8C4C", Offset = "0x1DB8C4C", VA = "0x1DB8C4C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD59E4", Offset = "0xFD59E4")]
			remove
			{
			}
		}

		[Token(Token = "0x6000223")]
		[Address(RVA = "0x1DB8CF4", Offset = "0x1DB8CF4", VA = "0x1DB8CF4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000224")]
		[Address(RVA = "0x1DB9004", Offset = "0x1DB9004", VA = "0x1DB9004")]
		private void Start()
		{
		}

		[Token(Token = "0x6000225")]
		[Address(RVA = "0x1DB9348", Offset = "0x1DB9348", VA = "0x1DB9348")]
		public void SetMixerGroup()
		{
		}

		[Token(Token = "0x6000226")]
		[Address(RVA = "0x1DB939C", Offset = "0x1DB939C", VA = "0x1DB939C")]
		public void SetSpatialBlend()
		{
		}

		[Token(Token = "0x6000227")]
		[Address(RVA = "0x1DB954C", Offset = "0x1DB954C", VA = "0x1DB954C")]
		private void SetOcclusion()
		{
		}

		[Token(Token = "0x6000228")]
		[Address(RVA = "0x1DB949C", Offset = "0x1DB949C", VA = "0x1DB949C")]
		private void SetPriority()
		{
		}

		[Token(Token = "0x6000229")]
		[Address(RVA = "0x1DB9B4C", Offset = "0x1DB9B4C", VA = "0x1DB9B4C")]
		public void DisableUpdater()
		{
		}

		[Token(Token = "0x600022A")]
		[Address(RVA = "0x1DB9BF4", Offset = "0x1DB9BF4", VA = "0x1DB9BF4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600022B")]
		[Address(RVA = "0x1DB9CC8", Offset = "0x1DB9CC8", VA = "0x1DB9CC8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600022C")]
		[Address(RVA = "0x1DB9BF8", Offset = "0x1DB9BF8", VA = "0x1DB9BF8")]
		private void StopSoundEarly()
		{
		}

		[Token(Token = "0x600022D")]
		[Address(RVA = "0x1DBA02C", Offset = "0x1DBA02C", VA = "0x1DBA02C")]
		public void Play(float? pitch, float maxVolume, string gameObjectName, float volPercent, float targetVol, float? targetPitch, Transform sourceTrans, bool attach, float delayTime, double? timeToSchedulePlay, bool isChaining, bool isSingleSubscribedPlay)
		{
		}

		[Token(Token = "0x600022E")]
		[Address(RVA = "0x1DBA3A4", Offset = "0x1DBA3A4", VA = "0x1DBA3A4")]
		public void SetPlaySoundParams(string gameObjectName, float volPercent, float targetVol, float? targetPitch, Transform sourceTrans, bool attach, float delayTime, double? timeToSchedulePlay, bool isChaining, bool isSingleSubscribedPlay)
		{
		}

		[Token(Token = "0x600022F")]
		[Address(RVA = "0x1DBA34C", Offset = "0x1DBA34C", VA = "0x1DBA34C")]
		private void MaybeCleanupFinishedDelegate()
		{
		}

		[Token(Token = "0x6000230")]
		[Address(RVA = "0x1DBA924", Offset = "0x1DBA924", VA = "0x1DBA924")]
		private void ResourceFailedToLoad()
		{
		}

		[Token(Token = "0x6000231")]
		[Address(RVA = "0x1DBA518", Offset = "0x1DBA518", VA = "0x1DBA518")]
		private void FinishSetupToPlay()
		{
		}

		[Token(Token = "0x6000232")]
		[Address(RVA = "0x1DBAD3C", Offset = "0x1DBAD3C", VA = "0x1DBAD3C")]
		public void JumpToTime(float timeToJumpTo)
		{
		}

		[Token(Token = "0x6000233")]
		[Address(RVA = "0x1DBAD88", Offset = "0x1DBAD88", VA = "0x1DBAD88")]
		public void GlideByPitch(float pitchAddition, float glideTime, [Optional] Action completionCallback)
		{
		}

		[Token(Token = "0x6000234")]
		[Address(RVA = "0x1DBB060", Offset = "0x1DBB060", VA = "0x1DBB060")]
		public void AdjustVolume(float volumePercentage)
		{
		}

		[Token(Token = "0x6000235")]
		[Address(RVA = "0x1DBB1CC", Offset = "0x1DBB1CC", VA = "0x1DBB1CC")]
		public void Pause()
		{
		}

		[Token(Token = "0x6000236")]
		[Address(RVA = "0x1DBB31C", Offset = "0x1DBB31C", VA = "0x1DBB31C")]
		public void Unpause()
		{
		}

		[Token(Token = "0x6000237")]
		[Address(RVA = "0x1DBB4FC", Offset = "0x1DBB4FC", VA = "0x1DBB4FC")]
		public void DoNextChain(float volumePercentage, float? pitch, Transform transActor, bool attach)
		{
		}

		[Token(Token = "0x6000238")]
		[Address(RVA = "0x1DBB8F8", Offset = "0x1DBB8F8", VA = "0x1DBB8F8")]
		public void PlayEndLinkedGroups([Optional] double? timeToPlayClip)
		{
		}

		[Token(Token = "0x6000239")]
		[Address(RVA = "0x1DBA944", Offset = "0x1DBA944", VA = "0x1DBA944")]
		private void EnableUpdater(bool waitForSoundFinish = true)
		{
		}

		[Token(Token = "0x600023A")]
		[Address(RVA = "0x1DBBE8C", Offset = "0x1DBBE8C", VA = "0x1DBBE8C")]
		private void MaybeUnloadClip()
		{
		}

		[Token(Token = "0x600023B")]
		[Address(RVA = "0x1DBBB78", Offset = "0x1DBBB78", VA = "0x1DBBB78")]
		private void PlayEndLinkedGroup(string sType, [Optional] double? timeToPlayClip)
		{
		}

		[Token(Token = "0x600023C")]
		[Address(RVA = "0x1DB9CCC", Offset = "0x1DB9CCC", VA = "0x1DB9CCC")]
		public void Stop(bool stopEndDetection = false, bool skipLinked = false)
		{
		}

		[Token(Token = "0x600023D")]
		[Address(RVA = "0x1DBC2F4", Offset = "0x1DBC2F4", VA = "0x1DBC2F4")]
		private void StopEndCleanup()
		{
		}

		[Token(Token = "0x600023E")]
		[Address(RVA = "0x1DBC338", Offset = "0x1DBC338", VA = "0x1DBC338")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xFD59F4", Offset = "0xFD59F4")]
		private IEnumerator WaitForLoadToUnloadClipAndDeactivate()
		{
			return null;
		}

		[Token(Token = "0x600023F")]
		[Address(RVA = "0x1DBC3E0", Offset = "0x1DBC3E0", VA = "0x1DBC3E0")]
		public void FadeToVolume(float newVolume, float fadeTime)
		{
		}

		[Token(Token = "0x6000240")]
		[Address(RVA = "0x1DBC7B0", Offset = "0x1DBC7B0", VA = "0x1DBC7B0")]
		public void FadeOutNow()
		{
		}

		[Token(Token = "0x6000241")]
		[Address(RVA = "0x1DBCA68", Offset = "0x1DBCA68", VA = "0x1DBCA68")]
		public void FadeOutNow(float fadeTime)
		{
		}

		[Token(Token = "0x6000242")]
		[Address(RVA = "0x1DBCBA4", Offset = "0x1DBCBA4", VA = "0x1DBCBA4")]
		public bool WasTriggeredFromTransform(Transform trans)
		{
			return default(bool);
		}

		[Token(Token = "0x6000243")]
		[Address(RVA = "0x1DBCC64", Offset = "0x1DBCC64", VA = "0x1DBCC64")]
		public bool WasTriggeredFromAnyOfTransformMap(HashSet<Transform> transMap)
		{
			return default(bool);
		}

		[Token(Token = "0x600024F")]
		[Address(RVA = "0x1DBD10C", Offset = "0x1DBD10C", VA = "0x1DBD10C")]
		public void UpdateTransformTracker(Transform sourceTrans)
		{
		}

		[Token(Token = "0x600026B")]
		[Address(RVA = "0x1DBD694", Offset = "0x1DBD694", VA = "0x1DBD694")]
		public void SoundLoopStarted(int numberOfLoops)
		{
		}

		[Token(Token = "0x600026C")]
		[Address(RVA = "0x1DBA8EC", Offset = "0x1DBA8EC", VA = "0x1DBA8EC")]
		public void ClearSubscribers()
		{
		}

		[Token(Token = "0x600026D")]
		[Address(RVA = "0x1DBD904", Offset = "0x1DBD904", VA = "0x1DBD904")]
		public SoundGroupVariation()
		{
		}
	}
	[Token(Token = "0x200005D")]
	[AttributeAttribute(Name = "AudioScriptOrder", RVA = "0xFC6138", Offset = "0xFC6138")]
	public class SoundGroupVariationUpdater : MonoBehaviour
	{
		[Token(Token = "0x20001C2")]
		private enum WaitForSoundFinishMode
		{
			[Token(Token = "0x4000973")]
			None,
			[Token(Token = "0x4000974")]
			Play,
			[Token(Token = "0x4000975")]
			WaitForEnd,
			[Token(Token = "0x4000976")]
			StopOrRepeat
		}

		[Token(Token = "0x40002B0")]
		private const float TimeEarlyToScheduleNextClip = 0.1f;

		[Token(Token = "0x40002B1")]
		private const float FakeNegativeFloatValue = -10f;

		[Token(Token = "0x40002B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Transform _objectToFollow;

		[Token(Token = "0x40002B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GameObject _objectToFollowGo;

		[Token(Token = "0x40002B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool _isFollowing;

		[Token(Token = "0x40002B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SoundGroupVariation _variation;

		[Token(Token = "0x40002B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float _priorityLastUpdated;

		[Token(Token = "0x40002B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool _useClipAgePriority;

		[Token(Token = "0x40002B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private WaitForSoundFinishMode _waitMode;

		[Token(Token = "0x40002B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AudioSource _varAudio;

		[Token(Token = "0x40002BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private MasterAudioGroup _parentGrp;

		[Token(Token = "0x40002BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform _trans;

		[Token(Token = "0x40002BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int _frameNum;

		[Token(Token = "0x40002BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool _inited;

		[Token(Token = "0x40002BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float _fadeOutStartTime;

		[Token(Token = "0x40002BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool _fadeInOutWillFadeOut;

		[Token(Token = "0x40002C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
		private bool _hasFadeInOutSetMaxVolume;

		[Token(Token = "0x40002C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float _fadeInOutInFactor;

		[Token(Token = "0x40002C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float _fadeInOutOutFactor;

		[Token(Token = "0x40002C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int _fadeOutEarlyTotalFrames;

		[Token(Token = "0x40002C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float _fadeOutEarlyFrameVolChange;

		[Token(Token = "0x40002C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int _fadeOutEarlyFrameNumber;

		[Token(Token = "0x40002C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float _fadeOutEarlyOrigVol;

		[Token(Token = "0x40002C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float _fadeToTargetFrameVolChange;

		[Token(Token = "0x40002C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private int _fadeToTargetFrameNumber;

		[Token(Token = "0x40002C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float _fadeToTargetOrigVol;

		[Token(Token = "0x40002CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private int _fadeToTargetTotalFrames;

		[Token(Token = "0x40002CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float _fadeToTargetVolume;

		[Token(Token = "0x40002CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private bool _fadeOutStarted;

		[Token(Token = "0x40002CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float _lastFrameClipTime;

		[Token(Token = "0x40002CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool _isPlayingBackward;

		[Token(Token = "0x40002CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private int _pitchGlideToTargetTotalFrames;

		[Token(Token = "0x40002D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float _pitchGlideToTargetFramePitchChange;

		[Token(Token = "0x40002D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private int _pitchGlideToTargetFrameNumber;

		[Token(Token = "0x40002D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float _glideToTargetPitch;

		[Token(Token = "0x40002D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float _glideToTargetOrigPitch;

		[Token(Token = "0x40002D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Action _glideToPitchCompletionCallback;

		[Token(Token = "0x40002D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool _hasStartedNextInChain;

		[Token(Token = "0x40002D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
		private bool _isWaitingForQueuedOcclusionRay;

		[Token(Token = "0x40002D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private int _framesPlayed;

		[Token(Token = "0x40002D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float? _clipStartPosition;

		[Token(Token = "0x40002D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private float? _clipEndPosition;

		[Token(Token = "0x40002DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private double? _clipSchedEndTime;

		[Token(Token = "0x40002DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private bool _hasScheduledNextClip;

		[Token(Token = "0x40002DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF1")]
		private bool _hasScheduledEndLinkedGroups;

		[Token(Token = "0x40002DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private int _lastFrameClipPosition;

		[Token(Token = "0x40002DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private int _timesLooped;

		[Token(Token = "0x40002DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private bool _isPaused;

		[Token(Token = "0x40002E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private double _pauseTime;

		[Token(Token = "0x40002E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int _maCachedFromFrame;

		[Token(Token = "0x40002E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static MasterAudio _maThisFrame;

		[Token(Token = "0x40002E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Transform _listenerThisFrame;

		[Token(Token = "0x1700006C")]
		public float ClipStartPosition
		{
			[Token(Token = "0x600028B")]
			[Address(RVA = "0x1DBEEE4", Offset = "0x1DBEEE4", VA = "0x1DBEEE4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700006D")]
		public float ClipEndPosition
		{
			[Token(Token = "0x600028C")]
			[Address(RVA = "0x1DBDEA0", Offset = "0x1DBDEA0", VA = "0x1DBDEA0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700006E")]
		public int FramesPlayed
		{
			[Token(Token = "0x600028D")]
			[Address(RVA = "0x1DBFB60", Offset = "0x1DBFB60", VA = "0x1DBFB60")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700006F")]
		public MasterAudio MAThisFrame
		{
			[Token(Token = "0x600028E")]
			[Address(RVA = "0x1DBFB68", Offset = "0x1DBFB68", VA = "0x1DBFB68")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000070")]
		public float MaxOcclusionFreq
		{
			[Token(Token = "0x600028F")]
			[Address(RVA = "0x1DBFBD0", Offset = "0x1DBFBD0", VA = "0x1DBFBD0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000071")]
		public float MinOcclusionFreq
		{
			[Token(Token = "0x6000290")]
			[Address(RVA = "0x1DBFC88", Offset = "0x1DBFC88", VA = "0x1DBFC88")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000072")]
		private Transform Trans
		{
			[Token(Token = "0x6000291")]
			[Address(RVA = "0x1DBE500", Offset = "0x1DBE500", VA = "0x1DBE500")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000073")]
		private AudioSource VarAudio
		{
			[Token(Token = "0x6000292")]
			[Address(RVA = "0x1DBDDF4", Offset = "0x1DBDDF4", VA = "0x1DBDDF4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000074")]
		private MasterAudioGroup ParentGroup
		{
			[Token(Token = "0x6000293")]
			[Address(RVA = "0x1DBE5AC", Offset = "0x1DBE5AC", VA = "0x1DBE5AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000075")]
		private SoundGroupVariation GrpVariation
		{
			[Token(Token = "0x6000294")]
			[Address(RVA = "0x1DBDD48", Offset = "0x1DBDD48", VA = "0x1DBDD48")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000076")]
		private float RayCastOriginOffset
		{
			[Token(Token = "0x6000295")]
			[Address(RVA = "0x1DBEE2C", Offset = "0x1DBEE2C", VA = "0x1DBEE2C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000077")]
		private bool IsOcclusionMeasuringPaused
		{
			[Token(Token = "0x6000296")]
			[Address(RVA = "0x1DBE854", Offset = "0x1DBE854", VA = "0x1DBE854")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000078")]
		private bool HasEndLinkedGroups
		{
			[Token(Token = "0x6000297")]
			[Address(RVA = "0x1DBFAF4", Offset = "0x1DBFAF4", VA = "0x1DBFAF4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600026E")]
		[Address(RVA = "0x1DBAFB0", Offset = "0x1DBAFB0", VA = "0x1DBAFB0")]
		public void GlidePitch(float targetPitch, float glideTime, [Optional] Action completionCallback)
		{
		}

		[Token(Token = "0x600026F")]
		[Address(RVA = "0x1DBC63C", Offset = "0x1DBC63C", VA = "0x1DBC63C")]
		public void FadeOverTimeToVolume(float targetVolume, float fadeTime)
		{
		}

		[Token(Token = "0x6000270")]
		[Address(RVA = "0x1DBC8E4", Offset = "0x1DBC8E4", VA = "0x1DBC8E4")]
		public void FadeOutEarly(float fadeTime)
		{
		}

		[Token(Token = "0x6000271")]
		[Address(RVA = "0x1DBBDD0", Offset = "0x1DBBDD0", VA = "0x1DBBDD0")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6000272")]
		[Address(RVA = "0x1DBAA50", Offset = "0x1DBAA50", VA = "0x1DBAA50")]
		public void FadeInOut()
		{
		}

		[Token(Token = "0x6000273")]
		[Address(RVA = "0x1DBAC58", Offset = "0x1DBAC58", VA = "0x1DBAC58")]
		public void FollowObject(bool follow, Transform objToFollow, bool clipAgePriority)
		{
		}

		[Token(Token = "0x6000274")]
		[Address(RVA = "0x1DBBE08", Offset = "0x1DBBE08", VA = "0x1DBBE08")]
		public void WaitForSoundFinish()
		{
		}

		[Token(Token = "0x6000275")]
		[Address(RVA = "0x1DBC094", Offset = "0x1DBC094", VA = "0x1DBC094")]
		public void StopPitchGliding()
		{
		}

		[Token(Token = "0x6000276")]
		[Address(RVA = "0x1DBC064", Offset = "0x1DBC064", VA = "0x1DBC064")]
		public void StopFading()
		{
		}

		[Token(Token = "0x6000277")]
		[Address(RVA = "0x1DBB8C4", Offset = "0x1DBB8C4", VA = "0x1DBB8C4")]
		public void StopWaitingForFinish()
		{
		}

		[Token(Token = "0x6000278")]
		[Address(RVA = "0x1DBC020", Offset = "0x1DBC020", VA = "0x1DBC020")]
		public void StopFollowing()
		{
		}

		[Token(Token = "0x6000279")]
		[Address(RVA = "0x1DBE484", Offset = "0x1DBE484", VA = "0x1DBE484")]
		private void DisableIfFinished()
		{
		}

		[Token(Token = "0x600027A")]
		[Address(RVA = "0x1DBDFD0", Offset = "0x1DBDFD0", VA = "0x1DBDFD0")]
		private void UpdateAudioLocationAndPriority(bool rePrioritize)
		{
		}

		[Token(Token = "0x600027B")]
		[Address(RVA = "0x1DBE658", Offset = "0x1DBE658", VA = "0x1DBE658")]
		private void ResetToNonOcclusionSetting()
		{
		}

		[Token(Token = "0x600027C")]
		[Address(RVA = "0x1DBE704", Offset = "0x1DBE704", VA = "0x1DBE704")]
		private void UpdateOcclusion()
		{
		}

		[Token(Token = "0x600027D")]
		[Address(RVA = "0x1DBE8E4", Offset = "0x1DBE8E4", VA = "0x1DBE8E4")]
		private void DoneWithOcclusion()
		{
		}

		[Token(Token = "0x600027E")]
		[Address(RVA = "0x1DBE960", Offset = "0x1DBE960", VA = "0x1DBE960")]
		public bool RayCastForOcclusion()
		{
			return default(bool);
		}

		[Token(Token = "0x600027F")]
		[Address(RVA = "0x1DBE14C", Offset = "0x1DBE14C", VA = "0x1DBE14C")]
		private void PlaySoundAndWait()
		{
		}

		[Token(Token = "0x6000280")]
		[Address(RVA = "0x1DBF020", Offset = "0x1DBF020", VA = "0x1DBF020")]
		private void DuckIfNotSilent()
		{
		}

		[Token(Token = "0x6000281")]
		[Address(RVA = "0x1DBF190", Offset = "0x1DBF190", VA = "0x1DBF190")]
		private void StopOrChain()
		{
		}

		[Token(Token = "0x6000282")]
		[Address(RVA = "0x1DBB2EC", Offset = "0x1DBB2EC", VA = "0x1DBB2EC")]
		public void Pause()
		{
		}

		[Token(Token = "0x6000283")]
		[Address(RVA = "0x1DBB420", Offset = "0x1DBB420", VA = "0x1DBB420")]
		public void Unpause()
		{
		}

		[Token(Token = "0x6000284")]
		[Address(RVA = "0x1DBB5AC", Offset = "0x1DBB5AC", VA = "0x1DBB5AC")]
		public void MaybeChain()
		{
		}

		[Token(Token = "0x6000285")]
		[Address(RVA = "0x1DBF22C", Offset = "0x1DBF22C", VA = "0x1DBF22C")]
		private void UpdatePitch()
		{
		}

		[Token(Token = "0x6000286")]
		[Address(RVA = "0x1DBF2F0", Offset = "0x1DBF2F0", VA = "0x1DBF2F0")]
		private void PerformFading()
		{
		}

		[Token(Token = "0x6000287")]
		[Address(RVA = "0x1DBF5B0", Offset = "0x1DBF5B0", VA = "0x1DBF5B0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000288")]
		[Address(RVA = "0x1DBF63C", Offset = "0x1DBF63C", VA = "0x1DBF63C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000289")]
		[Address(RVA = "0x1DB9898", Offset = "0x1DB9898", VA = "0x1DB9898")]
		public void UpdateCachedObjects()
		{
		}

		[Token(Token = "0x600028A")]
		[Address(RVA = "0x1DBF72C", Offset = "0x1DBF72C", VA = "0x1DBF72C")]
		public void ManualUpdate()
		{
		}

		[Token(Token = "0x6000298")]
		[Address(RVA = "0x1DBFD40", Offset = "0x1DBFD40", VA = "0x1DBFD40")]
		public SoundGroupVariationUpdater()
		{
		}
	}
	[Token(Token = "0x200005E")]
	public static class AudioLoaderOptimizer
	{
		[Token(Token = "0x40002E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Dictionary<string, List<GameObject>> PlayingGameObjectsByClipName;

		[Token(Token = "0x600029A")]
		[Address(RVA = "0x18069DC", Offset = "0x18069DC", VA = "0x18069DC")]
		public static void AddNonPreloadedPlayingClip(AudioClip clip, GameObject maHolderGameObject)
		{
		}

		[Token(Token = "0x600029B")]
		[Address(RVA = "0x1806BD0", Offset = "0x1806BD0", VA = "0x1806BD0")]
		public static void RemoveNonPreloadedPlayingClip(AudioClip clip, GameObject maHolderGameObject)
		{
		}

		[Token(Token = "0x600029C")]
		[Address(RVA = "0x1806D5C", Offset = "0x1806D5C", VA = "0x1806D5C")]
		public static bool IsAnyOfNonPreloadedClipPlaying(AudioClip clip)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200005F")]
	public static class AudioPrioritizer
	{
		[Token(Token = "0x40002E5")]
		private const int MaxPriority = 0;

		[Token(Token = "0x40002E6")]
		private const int HighestPriority = 16;

		[Token(Token = "0x40002E7")]
		private const int LowestPriority = 128;

		[Token(Token = "0x600029E")]
		[Address(RVA = "0x1806F1C", Offset = "0x1806F1C", VA = "0x1806F1C")]
		public static void Set2DSoundPriority(AudioSource audio)
		{
		}

		[Token(Token = "0x600029F")]
		[Address(RVA = "0x1806F38", Offset = "0x1806F38", VA = "0x1806F38")]
		public static void SetSoundGroupInitialPriority(AudioSource audio)
		{
		}

		[Token(Token = "0x60002A0")]
		[Address(RVA = "0x1806F54", Offset = "0x1806F54", VA = "0x1806F54")]
		public static void SetPreviewPriority(AudioSource audio)
		{
		}

		[Token(Token = "0x60002A1")]
		[Address(RVA = "0x1806F70", Offset = "0x1806F70", VA = "0x1806F70")]
		public static void Set3DPriority(SoundGroupVariation variation, bool useClipAgePriority)
		{
		}
	}
	[Token(Token = "0x2000060")]
	public static class AudioResourceOptimizer
	{
		[Token(Token = "0x20001C3")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC8714", Offset = "0xFC8714")]
		private sealed class <PopulateResourceSongToPlaylistControllerAsync>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000977")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000978")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000979")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string songResourceName;

			[Token(Token = "0x400097A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string playlistName;

			[Token(Token = "0x400097B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public PlaylistController controller;

			[Token(Token = "0x400097C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public MusicSetting songSetting;

			[Token(Token = "0x400097D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public PlaylistController.AudioPlayType playType;

			[Token(Token = "0x400097E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private ResourceRequest <asyncRes>5__2;

			[Token(Token = "0x17000331")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F3A")]
				[Address(RVA = "0x1808F14", Offset = "0x1808F14", VA = "0x1808F14", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000332")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F3C")]
				[Address(RVA = "0x1808F7C", Offset = "0x1808F7C", VA = "0x1808F7C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F37")]
			[Address(RVA = "0x1807FC0", Offset = "0x1807FC0", VA = "0x1807FC0")]
			[DebuggerHidden]
			public <PopulateResourceSongToPlaylistControllerAsync>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x6000F38")]
			[Address(RVA = "0x180893C", Offset = "0x180893C", VA = "0x180893C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F39")]
			[Address(RVA = "0x1808940", Offset = "0x1808940", VA = "0x1808940", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F3B")]
			[Address(RVA = "0x1808F1C", Offset = "0x1808F1C", VA = "0x1808F1C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001C4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC8724", Offset = "0xFC8724")]
		private sealed class <PopulateSourcesWithResourceClipAsync>d__12 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400097F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000980")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000981")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string clipName;

			[Token(Token = "0x4000982")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Action successAction;

			[Token(Token = "0x4000983")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Action failureAction;

			[Token(Token = "0x4000984")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public SoundGroupVariation variation;

			[Token(Token = "0x4000985")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private ResourceRequest <asyncRes>5__2;

			[Token(Token = "0x17000333")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F40")]
				[Address(RVA = "0x1809524", Offset = "0x1809524", VA = "0x1809524", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000334")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F42")]
				[Address(RVA = "0x180958C", Offset = "0x180958C", VA = "0x180958C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F3D")]
			[Address(RVA = "0x18080B4", Offset = "0x18080B4", VA = "0x18080B4")]
			[DebuggerHidden]
			public <PopulateSourcesWithResourceClipAsync>d__12(int <>1__state)
			{
			}

			[Token(Token = "0x6000F3E")]
			[Address(RVA = "0x1808F84", Offset = "0x1808F84", VA = "0x1808F84", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F3F")]
			[Address(RVA = "0x1808F88", Offset = "0x1808F88", VA = "0x1808F88", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F41")]
			[Address(RVA = "0x180952C", Offset = "0x180952C", VA = "0x180952C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40002E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Dictionary<string, List<AudioSource>> AudioResourceTargetsByName;

		[Token(Token = "0x40002E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly Dictionary<string, AudioClip> AudioClipsByName;

		[Token(Token = "0x40002EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly Dictionary<string, List<AudioClip>> PlaylistClipsByPlaylistName;

		[Token(Token = "0x40002EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static string _supportedLanguageFolder;

		[Token(Token = "0x60002A2")]
		[Address(RVA = "0x18073EC", Offset = "0x18073EC", VA = "0x18073EC")]
		public static void ClearAudioClips()
		{
		}

		[Token(Token = "0x60002A3")]
		[Address(RVA = "0x1807488", Offset = "0x1807488", VA = "0x1807488")]
		public static string GetLocalizedDynamicSoundGroupFileName(SystemLanguage localLanguage, bool useLocalization, string resourceFileName)
		{
			return null;
		}

		[Token(Token = "0x60002A4")]
		[Address(RVA = "0x18075D8", Offset = "0x18075D8", VA = "0x18075D8")]
		public static string GetLocalizedFileName(bool useLocalization, string resourceFileName)
		{
			return null;
		}

		[Token(Token = "0x60002A5")]
		[Address(RVA = "0x1807930", Offset = "0x1807930", VA = "0x1807930")]
		public static void AddTargetForClip(string clipName, AudioSource source)
		{
		}

		[Token(Token = "0x60002A6")]
		[Address(RVA = "0x1807674", Offset = "0x1807674", VA = "0x1807674")]
		private static string SupportedLanguageFolder()
		{
			return null;
		}

		[Token(Token = "0x60002A7")]
		[Address(RVA = "0x1807D10", Offset = "0x1807D10", VA = "0x1807D10")]
		public static void ClearSupportLanguageFolder()
		{
		}

		[Token(Token = "0x60002A8")]
		[Address(RVA = "0x1807D90", Offset = "0x1807D90", VA = "0x1807D90")]
		private static void FinishRecordingPlaylistClip(string controllerName, AudioClip resAudioClip)
		{
		}

		[Token(Token = "0x60002A9")]
		[Address(RVA = "0x1807EF0", Offset = "0x1807EF0", VA = "0x1807EF0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xFD5A78", Offset = "0xFD5A78")]
		public static IEnumerator PopulateResourceSongToPlaylistControllerAsync(MusicSetting songSetting, string songResourceName, string playlistName, PlaylistController controller, PlaylistController.AudioPlayType playType)
		{
			return null;
		}

		[Token(Token = "0x60002AA")]
		[Address(RVA = "0x1807FEC", Offset = "0x1807FEC", VA = "0x1807FEC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xFD5ADC", Offset = "0xFD5ADC")]
		public static IEnumerator PopulateSourcesWithResourceClipAsync(string clipName, SoundGroupVariation variation, Action successAction, Action failureAction)
		{
			return null;
		}

		[Token(Token = "0x60002AB")]
		[Address(RVA = "0x18080E0", Offset = "0x18080E0", VA = "0x18080E0")]
		public static void UnloadPlaylistSongIfUnused(string controllerName, AudioClip clipToRemove)
		{
		}

		[Token(Token = "0x60002AC")]
		[Address(RVA = "0x180824C", Offset = "0x180824C", VA = "0x180824C")]
		public static void DeleteAudioSourceFromList(string clipName, AudioSource source)
		{
		}

		[Token(Token = "0x60002AD")]
		[Address(RVA = "0x1808494", Offset = "0x1808494", VA = "0x1808494")]
		public static void UnloadClipIfUnused(string clipName)
		{
		}
	}
	[Token(Token = "0x2000061")]
	[AttributeAttribute(Name = "AudioScriptOrder", RVA = "0xFC614C", Offset = "0xFC614C")]
	public class MasterAudio : MonoBehaviour
	{
		[Token(Token = "0x20001C5")]
		public enum AmbientSoundExitMode
		{
			[Token(Token = "0x4000987")]
			StopSound,
			[Token(Token = "0x4000988")]
			FadeSound
		}

		[Token(Token = "0x20001C6")]
		public enum AmbientSoundReEnterMode
		{
			[Token(Token = "0x400098A")]
			StopExistingSound,
			[Token(Token = "0x400098B")]
			FadeInSameSound
		}

		[Token(Token = "0x20001C7")]
		public enum VariationFollowerType
		{
			[Token(Token = "0x400098D")]
			LateUpdate,
			[Token(Token = "0x400098E")]
			FixedUpdate
		}

		[Token(Token = "0x20001C8")]
		public enum LinkedGroupSelectionType
		{
			[Token(Token = "0x4000990")]
			All,
			[Token(Token = "0x4000991")]
			OneAtRandom
		}

		[Token(Token = "0x20001C9")]
		public enum OcclusionSelectionType
		{
			[Token(Token = "0x4000993")]
			AllGroups,
			[Token(Token = "0x4000994")]
			TurnOnPerBusOrGroup
		}

		[Token(Token = "0x20001CA")]
		public enum RaycastMode
		{
			[Token(Token = "0x4000996")]
			Physics3D,
			[Token(Token = "0x4000997")]
			Physics2D
		}

		[Token(Token = "0x20001CB")]
		public enum AllMusicSpatialBlendType
		{
			[Token(Token = "0x4000999")]
			ForceAllTo2D,
			[Token(Token = "0x400099A")]
			ForceAllTo3D,
			[Token(Token = "0x400099B")]
			ForceAllToCustom,
			[Token(Token = "0x400099C")]
			AllowDifferentPerController
		}

		[Token(Token = "0x20001CC")]
		public enum AllMixerSpatialBlendType
		{
			[Token(Token = "0x400099E")]
			ForceAllTo2D,
			[Token(Token = "0x400099F")]
			ForceAllTo3D,
			[Token(Token = "0x40009A0")]
			ForceAllToCustom,
			[Token(Token = "0x40009A1")]
			AllowDifferentPerGroup
		}

		[Token(Token = "0x20001CD")]
		public enum ItemSpatialBlendType
		{
			[Token(Token = "0x40009A3")]
			ForceTo2D,
			[Token(Token = "0x40009A4")]
			ForceTo3D,
			[Token(Token = "0x40009A5")]
			ForceToCustom,
			[Token(Token = "0x40009A6")]
			UseCurveFromAudioSource
		}

		[Token(Token = "0x20001CE")]
		public enum MixerWidthMode
		{
			[Token(Token = "0x40009A8")]
			Narrow,
			[Token(Token = "0x40009A9")]
			Normal,
			[Token(Token = "0x40009AA")]
			Wide
		}

		[Token(Token = "0x20001CF")]
		public enum CustomEventReceiveMode
		{
			[Token(Token = "0x40009AC")]
			Always,
			[Token(Token = "0x40009AD")]
			WhenDistanceLessThan,
			[Token(Token = "0x40009AE")]
			WhenDistanceMoreThan,
			[Token(Token = "0x40009AF")]
			Never,
			[Token(Token = "0x40009B0")]
			OnSameGameObject,
			[Token(Token = "0x40009B1")]
			OnChildGameObject,
			[Token(Token = "0x40009B2")]
			OnParentGameObject,
			[Token(Token = "0x40009B3")]
			OnSameOrChildGameObject,
			[Token(Token = "0x40009B4")]
			OnSameOrParentGameObject
		}

		[Token(Token = "0x20001D0")]
		public enum EventReceiveFilter
		{
			[Token(Token = "0x40009B6")]
			All,
			[Token(Token = "0x40009B7")]
			Closest,
			[Token(Token = "0x40009B8")]
			Random
		}

		[Token(Token = "0x20001D1")]
		public enum VariationLoadStatus
		{
			[Token(Token = "0x40009BA")]
			None,
			[Token(Token = "0x40009BB")]
			Loading,
			[Token(Token = "0x40009BC")]
			Loaded,
			[Token(Token = "0x40009BD")]
			LoadFailed
		}

		[Token(Token = "0x20001D2")]
		public enum AudioLocation
		{
			[Token(Token = "0x40009BF")]
			Clip,
			[Token(Token = "0x40009C0")]
			ResourceFile
		}

		[Token(Token = "0x20001D3")]
		public enum CustomSongStartTimeMode
		{
			[Token(Token = "0x40009C2")]
			Beginning,
			[Token(Token = "0x40009C3")]
			SpecificTime,
			[Token(Token = "0x40009C4")]
			RandomTime
		}

		[Token(Token = "0x20001D4")]
		public enum BusCommand
		{
			[Token(Token = "0x40009C6")]
			None,
			[Token(Token = "0x40009C7")]
			FadeToVolume,
			[Token(Token = "0x40009C8")]
			Mute,
			[Token(Token = "0x40009C9")]
			Pause,
			[Token(Token = "0x40009CA")]
			Solo,
			[Token(Token = "0x40009CB")]
			Unmute,
			[Token(Token = "0x40009CC")]
			Unpause,
			[Token(Token = "0x40009CD")]
			Unsolo,
			[Token(Token = "0x40009CE")]
			Stop,
			[Token(Token = "0x40009CF")]
			ChangePitch,
			[Token(Token = "0x40009D0")]
			ToggleMute,
			[Token(Token = "0x40009D1")]
			StopBusOfTransform,
			[Token(Token = "0x40009D2")]
			PauseBusOfTransform,
			[Token(Token = "0x40009D3")]
			UnpauseBusOfTransform,
			[Token(Token = "0x40009D4")]
			GlideByPitch,
			[Token(Token = "0x40009D5")]
			StopOldBusVoices,
			[Token(Token = "0x40009D6")]
			FadeOutOldBusVoices
		}

		[Token(Token = "0x20001D5")]
		public enum DragGroupMode
		{
			[Token(Token = "0x40009D8")]
			OneGroupPerClip,
			[Token(Token = "0x40009D9")]
			OneGroupWithVariations
		}

		[Token(Token = "0x20001D6")]
		public enum EventSoundFunctionType
		{
			[Token(Token = "0x40009DB")]
			PlaySound,
			[Token(Token = "0x40009DC")]
			GroupControl,
			[Token(Token = "0x40009DD")]
			BusControl,
			[Token(Token = "0x40009DE")]
			PlaylistControl,
			[Token(Token = "0x40009DF")]
			CustomEventControl,
			[Token(Token = "0x40009E0")]
			GlobalControl,
			[Token(Token = "0x40009E1")]
			UnityMixerControl,
			[Token(Token = "0x40009E2")]
			PersistentSettingsControl
		}

		[Token(Token = "0x20001D7")]
		public enum LanguageMode
		{
			[Token(Token = "0x40009E4")]
			UseDeviceSetting,
			[Token(Token = "0x40009E5")]
			SpecificLanguage,
			[Token(Token = "0x40009E6")]
			DynamicallySet
		}

		[Token(Token = "0x20001D8")]
		public enum UnityMixerCommand
		{
			[Token(Token = "0x40009E8")]
			None,
			[Token(Token = "0x40009E9")]
			TransitionToSnapshot,
			[Token(Token = "0x40009EA")]
			TransitionToSnapshotBlend
		}

		[Token(Token = "0x20001D9")]
		public enum PlaylistCommand
		{
			[Token(Token = "0x40009EC")]
			None,
			[Token(Token = "0x40009ED")]
			ChangePlaylist,
			[Token(Token = "0x40009EE")]
			FadeToVolume,
			[Token(Token = "0x40009EF")]
			PlaySong,
			[Token(Token = "0x40009F0")]
			PlayRandomSong,
			[Token(Token = "0x40009F1")]
			PlayNextSong,
			[Token(Token = "0x40009F2")]
			Pause,
			[Token(Token = "0x40009F3")]
			Resume,
			[Token(Token = "0x40009F4")]
			Stop,
			[Token(Token = "0x40009F5")]
			Mute,
			[Token(Token = "0x40009F6")]
			Unmute,
			[Token(Token = "0x40009F7")]
			ToggleMute,
			[Token(Token = "0x40009F8")]
			Restart,
			[Token(Token = "0x40009F9")]
			Start,
			[Token(Token = "0x40009FA")]
			StopLoopingCurrentSong,
			[Token(Token = "0x40009FB")]
			StopPlaylistAfterCurrentSong,
			[Token(Token = "0x40009FC")]
			AddSongToQueue
		}

		[Token(Token = "0x20001DA")]
		public enum CustomEventCommand
		{
			[Token(Token = "0x40009FE")]
			None,
			[Token(Token = "0x40009FF")]
			FireEvent
		}

		[Token(Token = "0x20001DB")]
		public enum GlobalCommand
		{
			[Token(Token = "0x4000A01")]
			None,
			[Token(Token = "0x4000A02")]
			PauseMixer,
			[Token(Token = "0x4000A03")]
			UnpauseMixer,
			[Token(Token = "0x4000A04")]
			StopMixer,
			[Token(Token = "0x4000A05")]
			StopEverything,
			[Token(Token = "0x4000A06")]
			PauseEverything,
			[Token(Token = "0x4000A07")]
			UnpauseEverything,
			[Token(Token = "0x4000A08")]
			MuteEverything,
			[Token(Token = "0x4000A09")]
			UnmuteEverything,
			[Token(Token = "0x4000A0A")]
			SetMasterMixerVolume,
			[Token(Token = "0x4000A0B")]
			SetMasterPlaylistVolume
		}

		[Token(Token = "0x20001DC")]
		public enum SoundGroupCommand
		{
			[Token(Token = "0x4000A0D")]
			None,
			[Token(Token = "0x4000A0E")]
			FadeToVolume,
			[Token(Token = "0x4000A0F")]
			FadeOutAllOfSound,
			[Token(Token = "0x4000A10")]
			Mute,
			[Token(Token = "0x4000A11")]
			Pause,
			[Token(Token = "0x4000A12")]
			Solo,
			[Token(Token = "0x4000A13")]
			StopAllOfSound,
			[Token(Token = "0x4000A14")]
			Unmute,
			[Token(Token = "0x4000A15")]
			Unpause,
			[Token(Token = "0x4000A16")]
			Unsolo,
			[Token(Token = "0x4000A17")]
			StopAllSoundsOfTransform,
			[Token(Token = "0x4000A18")]
			PauseAllSoundsOfTransform,
			[Token(Token = "0x4000A19")]
			UnpauseAllSoundsOfTransform,
			[Token(Token = "0x4000A1A")]
			StopSoundGroupOfTransform,
			[Token(Token = "0x4000A1B")]
			PauseSoundGroupOfTransform,
			[Token(Token = "0x4000A1C")]
			UnpauseSoundGroupOfTransform,
			[Token(Token = "0x4000A1D")]
			FadeOutSoundGroupOfTransform,
			[Token(Token = "0x4000A1E")]
			RefillSoundGroupPool,
			[Token(Token = "0x4000A1F")]
			RouteToBus,
			[Token(Token = "0x4000A20")]
			GlideByPitch,
			[Token(Token = "0x4000A21")]
			ToggleSoundGroup,
			[Token(Token = "0x4000A22")]
			ToggleSoundGroupOfTransform,
			[Token(Token = "0x4000A23")]
			FadeOutAllSoundsOfTransform,
			[Token(Token = "0x4000A24")]
			StopOldSoundGroupVoices,
			[Token(Token = "0x4000A25")]
			FadeOutOldSoundGroupVoices
		}

		[Token(Token = "0x20001DD")]
		public enum PersistentSettingsCommand
		{
			[Token(Token = "0x4000A27")]
			None,
			[Token(Token = "0x4000A28")]
			SetBusVolume,
			[Token(Token = "0x4000A29")]
			SetGroupVolume,
			[Token(Token = "0x4000A2A")]
			SetMixerVolume,
			[Token(Token = "0x4000A2B")]
			SetMusicVolume,
			[Token(Token = "0x4000A2C")]
			MixerMuteToggle,
			[Token(Token = "0x4000A2D")]
			MusicMuteToggle
		}

		[Token(Token = "0x20001DE")]
		public enum SongFadeInPosition
		{
			[Token(Token = "0x4000A2F")]
			NewClipFromBeginning = 1,
			[Token(Token = "0x4000A30")]
			NewClipFromLastKnownPosition = 3,
			[Token(Token = "0x4000A31")]
			SynchronizeClips = 5
		}

		[Token(Token = "0x20001DF")]
		public enum SoundSpawnLocationMode
		{
			[Token(Token = "0x4000A33")]
			MasterAudioLocation,
			[Token(Token = "0x4000A34")]
			CallerLocation,
			[Token(Token = "0x4000A35")]
			AttachToCaller
		}

		[Token(Token = "0x20001E0")]
		public enum VariationCommand
		{
			[Token(Token = "0x4000A37")]
			None,
			[Token(Token = "0x4000A38")]
			Stop,
			[Token(Token = "0x4000A39")]
			Pause,
			[Token(Token = "0x4000A3A")]
			Unpause
		}

		[Serializable]
		[Token(Token = "0x20001E1")]
		public struct CustomEventCandidate
		{
			[Token(Token = "0x4000A3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float DistanceAway;

			[Token(Token = "0x4000A3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public ICustomEventReceiver Receiver;

			[Token(Token = "0x4000A3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform Trans;

			[Token(Token = "0x4000A3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int RandomId;

			[Token(Token = "0x6000F43")]
			[Address(RVA = "0x1033A6C", Offset = "0x1033A6C", VA = "0x1033A6C")]
			public CustomEventCandidate(float distance, ICustomEventReceiver rec, Transform trans, int randomId)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001E2")]
		public class AudioGroupInfo
		{
			[Token(Token = "0x4000A3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public List<AudioInfo> Sources;

			[Token(Token = "0x4000A40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int LastFramePlayed;

			[Token(Token = "0x4000A41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float LastTimePlayed;

			[Token(Token = "0x4000A42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MasterAudioGroup Group;

			[Token(Token = "0x4000A43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool PlayedForWarming;

			[Token(Token = "0x6000F44")]
			[Address(RVA = "0x1DACEA8", Offset = "0x1DACEA8", VA = "0x1DACEA8")]
			public AudioGroupInfo(List<AudioInfo> sources, MasterAudioGroup groupScript)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001E3")]
		public class AudioInfo
		{
			[Token(Token = "0x4000A44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public AudioSource Source;

			[Token(Token = "0x4000A45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float OriginalVolume;

			[Token(Token = "0x4000A46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float LastPercentageVolume;

			[Token(Token = "0x4000A47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float LastRandomVolume;

			[Token(Token = "0x4000A48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public SoundGroupVariation Variation;

			[Token(Token = "0x6000F45")]
			[Address(RVA = "0x1DACF10", Offset = "0x1DACF10", VA = "0x1DACF10")]
			public AudioInfo(SoundGroupVariation variation, AudioSource source, float origVol)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001E4")]
		public class Playlist
		{
			[Token(Token = "0x2000243")]
			public enum CrossfadeTimeMode
			{
				[Token(Token = "0x4000B99")]
				UseMasterSetting,
				[Token(Token = "0x4000B9A")]
				Override
			}

			[Token(Token = "0x4000A49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool isExpanded;

			[Token(Token = "0x4000A4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string playlistName;

			[Token(Token = "0x4000A4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SongFadeInPosition songTransitionType;

			[Token(Token = "0x4000A4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public List<MusicSetting> MusicSettings;

			[Token(Token = "0x4000A4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public AudioLocation bulkLocationMode;

			[Token(Token = "0x4000A4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public CrossfadeTimeMode crossfadeMode;

			[Token(Token = "0x4000A4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float crossFadeTime;

			[Token(Token = "0x4000A50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public bool fadeInFirstSong;

			[Token(Token = "0x4000A51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
			public bool fadeOutLastSong;

			[Token(Token = "0x4000A52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
			public bool bulkEditMode;

			[Token(Token = "0x4000A53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3F")]
			public bool isTemporary;

			[Token(Token = "0x4000A54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public bool showMetadata;

			[Token(Token = "0x4000A55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public List<SongMetadataProperty> songMetadataProps;

			[Token(Token = "0x4000A56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public string newMetadataPropName;

			[Token(Token = "0x4000A57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public SongMetadataProperty.MetadataPropertyType newMetadataPropType;

			[Token(Token = "0x4000A58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public bool newMetadataPropRequired;

			[Token(Token = "0x4000A59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
			public bool newMetadataPropCanHaveMult;

			[Token(Token = "0x6000F46")]
			[Address(RVA = "0x1DACFCC", Offset = "0x1DACFCC", VA = "0x1DACFCC")]
			public Playlist()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001E5")]
		public class SoundGroupRefillInfo
		{
			[Token(Token = "0x4000A5A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float LastTimePlayed;

			[Token(Token = "0x4000A5B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float InactivePeriodSeconds;

			[Token(Token = "0x6000F47")]
			[Address(RVA = "0x1DAD0D0", Offset = "0x1DAD0D0", VA = "0x1DAD0D0")]
			public SoundGroupRefillInfo(float lastTimePlayed, float inactivePeriodSeconds)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001E6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC8734", Offset = "0xFC8734")]
		private sealed class <>c
		{
			[Token(Token = "0x4000A5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000A5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Predicate<OcclusionFreqChangeInfo> <>9__224_0;

			[Token(Token = "0x4000A5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Predicate<BusFadeInfo> <>9__225_0;

			[Token(Token = "0x4000A5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Predicate<GroupFadeInfo> <>9__226_0;

			[Token(Token = "0x4000A60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static Predicate<AmbientSoundToTriggerInfo> <>9__227_0;

			[Token(Token = "0x4000A61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public static Predicate<GroupPitchGlideInfo> <>9__228_0;

			[Token(Token = "0x4000A62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public static Predicate<BusPitchGlideInfo> <>9__229_0;

			[Token(Token = "0x4000A63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public static Comparison<CustomEventCandidate> <>9__427_0;

			[Token(Token = "0x4000A64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public static Comparison<CustomEventCandidate> <>9__427_1;

			[Token(Token = "0x6000F49")]
			[Address(RVA = "0x1DABDAC", Offset = "0x1DABDAC", VA = "0x1DABDAC")]
			public <>c()
			{
			}

			[Token(Token = "0x6000F4A")]
			[Address(RVA = "0x1DABDB4", Offset = "0x1DABDB4", VA = "0x1DABDB4")]
			internal bool <PerformOcclusionFrequencyChanges>b__224_0(OcclusionFreqChangeInfo obj)
			{
				return default(bool);
			}

			[Token(Token = "0x6000F4B")]
			[Address(RVA = "0x1DABDD4", Offset = "0x1DABDD4", VA = "0x1DABDD4")]
			internal bool <PerformBusFades>b__225_0(BusFadeInfo obj)
			{
				return default(bool);
			}

			[Token(Token = "0x6000F4C")]
			[Address(RVA = "0x1DABDF4", Offset = "0x1DABDF4", VA = "0x1DABDF4")]
			internal bool <PerformGroupFades>b__226_0(GroupFadeInfo obj)
			{
				return default(bool);
			}

			[Token(Token = "0x6000F4D")]
			[Address(RVA = "0x1DABE14", Offset = "0x1DABE14", VA = "0x1DABE14")]
			internal bool <PerformDelayedAmbientTriggers>b__227_0(AmbientSoundToTriggerInfo obj)
			{
				return default(bool);
			}

			[Token(Token = "0x6000F4E")]
			[Address(RVA = "0x1DABE4C", Offset = "0x1DABE4C", VA = "0x1DABE4C")]
			internal bool <PerformGroupPitchGlides>b__228_0(GroupPitchGlideInfo obj)
			{
				return default(bool);
			}

			[Token(Token = "0x6000F4F")]
			[Address(RVA = "0x1DABE6C", Offset = "0x1DABE6C", VA = "0x1DABE6C")]
			internal bool <PerformBusPitchGlides>b__229_0(BusPitchGlideInfo obj)
			{
				return default(bool);
			}

			[Token(Token = "0x6000F50")]
			[Address(RVA = "0x1DABE8C", Offset = "0x1DABE8C", VA = "0x1DABE8C")]
			internal int <FireCustomEvent>b__427_0(CustomEventCandidate x, CustomEventCandidate y)
			{
				return default(int);
			}

			[Token(Token = "0x6000F51")]
			[Address(RVA = "0x1DABE9C", Offset = "0x1DABE9C", VA = "0x1DABE9C")]
			internal int <FireCustomEvent>b__427_1(CustomEventCandidate x, CustomEventCandidate y)
			{
				return default(int);
			}
		}

		[Token(Token = "0x20001E7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC8744", Offset = "0xFC8744")]
		private sealed class <>c__DisplayClass239_0
		{
			[Token(Token = "0x4000A65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool done;

			[Token(Token = "0x6000F52")]
			[Address(RVA = "0x1DABEB0", Offset = "0x1DABEB0", VA = "0x1DABEB0")]
			public <>c__DisplayClass239_0()
			{
			}

			[Token(Token = "0x6000F53")]
			[Address(RVA = "0x1DABEB8", Offset = "0x1DABEB8", VA = "0x1DABEB8")]
			internal void <PlaySoundAndWaitUntilFinished>b__0()
			{
			}
		}

		[Token(Token = "0x20001E8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC8754", Offset = "0xFC8754")]
		private sealed class <PlaySoundAndWaitUntilFinished>d__239 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string sType;

			[Token(Token = "0x4000A69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float volumePercentage;

			[Token(Token = "0x4000A6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float? pitch;

			[Token(Token = "0x4000A6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float delaySoundTime;

			[Token(Token = "0x4000A6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public string variationName;

			[Token(Token = "0x4000A6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private <>c__DisplayClass239_0 <>8__1;

			[Token(Token = "0x4000A6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Action completedAction;

			[Token(Token = "0x17000335")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F57")]
				[Address(RVA = "0x1DACE38", Offset = "0x1DACE38", VA = "0x1DACE38", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000336")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F59")]
				[Address(RVA = "0x1DACEA0", Offset = "0x1DACEA0", VA = "0x1DACEA0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F54")]
			[Address(RVA = "0x1DACB58", Offset = "0x1DACB58", VA = "0x1DACB58")]
			[DebuggerHidden]
			public <PlaySoundAndWaitUntilFinished>d__239(int <>1__state)
			{
			}

			[Token(Token = "0x6000F55")]
			[Address(RVA = "0x1DACB84", Offset = "0x1DACB84", VA = "0x1DACB84", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F56")]
			[Address(RVA = "0x1DACB88", Offset = "0x1DACB88", VA = "0x1DACB88", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F58")]
			[Address(RVA = "0x1DACE40", Offset = "0x1DACE40", VA = "0x1DACE40", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001E9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC8764", Offset = "0xFC8764")]
		private sealed class <>c__DisplayClass240_0
		{
			[Token(Token = "0x4000A6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool done;

			[Token(Token = "0x6000F5A")]
			[Address(RVA = "0x1DABEC4", Offset = "0x1DABEC4", VA = "0x1DABEC4")]
			public <>c__DisplayClass240_0()
			{
			}

			[Token(Token = "0x6000F5B")]
			[Address(RVA = "0x1DABECC", Offset = "0x1DABECC", VA = "0x1DABECC")]
			internal void <PlaySound3DAtTransformAndWaitUntilFinished>b__0()
			{
			}
		}

		[Token(Token = "0x20001EA")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC8774", Offset = "0xFC8774")]
		private sealed class <PlaySound3DAtTransformAndWaitUntilFinished>d__240 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string sType;

			[Token(Token = "0x4000A73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Transform sourceTrans;

			[Token(Token = "0x4000A74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float volumePercentage;

			[Token(Token = "0x4000A75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float? pitch;

			[Token(Token = "0x4000A76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float delaySoundTime;

			[Token(Token = "0x4000A77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public string variationName;

			[Token(Token = "0x4000A78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public double? timeToSchedulePlay;

			[Token(Token = "0x4000A79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private <>c__DisplayClass240_0 <>8__1;

			[Token(Token = "0x4000A7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Action completedAction;

			[Token(Token = "0x17000337")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F5F")]
				[Address(RVA = "0x1DAC77C", Offset = "0x1DAC77C", VA = "0x1DAC77C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000338")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F61")]
				[Address(RVA = "0x1DAC7E4", Offset = "0x1DAC7E4", VA = "0x1DAC7E4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F5C")]
			[Address(RVA = "0x1DAC3C4", Offset = "0x1DAC3C4", VA = "0x1DAC3C4")]
			[DebuggerHidden]
			public <PlaySound3DAtTransformAndWaitUntilFinished>d__240(int <>1__state)
			{
			}

			[Token(Token = "0x6000F5D")]
			[Address(RVA = "0x1DAC3F0", Offset = "0x1DAC3F0", VA = "0x1DAC3F0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F5E")]
			[Address(RVA = "0x1DAC3F4", Offset = "0x1DAC3F4", VA = "0x1DAC3F4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F60")]
			[Address(RVA = "0x1DAC784", Offset = "0x1DAC784", VA = "0x1DAC784", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001EB")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC8784", Offset = "0xFC8784")]
		private sealed class <>c__DisplayClass241_0
		{
			[Token(Token = "0x4000A7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool done;

			[Token(Token = "0x6000F62")]
			[Address(RVA = "0x1DABED8", Offset = "0x1DABED8", VA = "0x1DABED8")]
			public <>c__DisplayClass241_0()
			{
			}

			[Token(Token = "0x6000F63")]
			[Address(RVA = "0x1DABEE0", Offset = "0x1DABEE0", VA = "0x1DABEE0")]
			internal void <PlaySound3DFollowTransformAndWaitUntilFinished>b__0()
			{
			}
		}

		[Token(Token = "0x20001EC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC8794", Offset = "0xFC8794")]
		private sealed class <PlaySound3DFollowTransformAndWaitUntilFinished>d__241 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string sType;

			[Token(Token = "0x4000A7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Transform sourceTrans;

			[Token(Token = "0x4000A80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float volumePercentage;

			[Token(Token = "0x4000A81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float? pitch;

			[Token(Token = "0x4000A82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float delaySoundTime;

			[Token(Token = "0x4000A83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public string variationName;

			[Token(Token = "0x4000A84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public double? timeToSchedulePlay;

			[Token(Token = "0x4000A85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private <>c__DisplayClass241_0 <>8__1;

			[Token(Token = "0x4000A86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Action completedAction;

			[Token(Token = "0x17000339")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F67")]
				[Address(RVA = "0x1DACAE8", Offset = "0x1DACAE8", VA = "0x1DACAE8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700033A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F69")]
				[Address(RVA = "0x1DACB50", Offset = "0x1DACB50", VA = "0x1DACB50", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F64")]
			[Address(RVA = "0x1DAC7EC", Offset = "0x1DAC7EC", VA = "0x1DAC7EC")]
			[DebuggerHidden]
			public <PlaySound3DFollowTransformAndWaitUntilFinished>d__241(int <>1__state)
			{
			}

			[Token(Token = "0x6000F65")]
			[Address(RVA = "0x1DAC818", Offset = "0x1DAC818", VA = "0x1DAC818", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F66")]
			[Address(RVA = "0x1DAC81C", Offset = "0x1DAC81C", VA = "0x1DAC81C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F68")]
			[Address(RVA = "0x1DACAF0", Offset = "0x1DACAF0", VA = "0x1DACAF0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001ED")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC87A4", Offset = "0xFC87A4")]
		private sealed class <>c__DisplayClass274_0
		{
			[Token(Token = "0x4000A87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string busName;

			[Token(Token = "0x6000F6A")]
			[Address(RVA = "0x1DABEEC", Offset = "0x1DABEEC", VA = "0x1DABEEC")]
			public <>c__DisplayClass274_0()
			{
			}

			[Token(Token = "0x6000F6B")]
			[Address(RVA = "0x1DABEF4", Offset = "0x1DABEF4", VA = "0x1DABEF4")]
			internal bool <RouteGroupToBus>b__1(GroupBus x)
			{
				return default(bool);
			}

			[Token(Token = "0x6000F6C")]
			[Address(RVA = "0x1DABF18", Offset = "0x1DABF18", VA = "0x1DABF18")]
			internal bool <RouteGroupToBus>b__0(GroupBus x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20001EE")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC87B4", Offset = "0xFC87B4")]
		private sealed class <>c__DisplayClass282_0
		{
			[Token(Token = "0x4000A88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string sType;

			[Token(Token = "0x6000F6D")]
			[Address(RVA = "0x1DABF3C", Offset = "0x1DABF3C", VA = "0x1DABF3C")]
			public <>c__DisplayClass282_0()
			{
			}

			[Token(Token = "0x6000F6E")]
			[Address(RVA = "0x1DABF44", Offset = "0x1DABF44", VA = "0x1DABF44")]
			internal bool <FadeSoundGroupToVolume>b__0(GroupFadeInfo obj)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20001EF")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC87C4", Offset = "0xFC87C4")]
		private sealed class <>c__DisplayClass285_0
		{
			[Token(Token = "0x4000A89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string sType;

			[Token(Token = "0x6000F6F")]
			[Address(RVA = "0x1DABF68", Offset = "0x1DABF68", VA = "0x1DABF68")]
			public <>c__DisplayClass285_0()
			{
			}

			[Token(Token = "0x6000F70")]
			[Address(RVA = "0x1DABF70", Offset = "0x1DABF70", VA = "0x1DABF70")]
			internal bool <GlideSoundGroupByPitch>b__0(GroupPitchGlideInfo obj)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20001F0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC87D4", Offset = "0xFC87D4")]
		private sealed class <>c__DisplayClass337_0
		{
			[Token(Token = "0x4000A8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string busName;

			[Token(Token = "0x6000F71")]
			[Address(RVA = "0x1DABF94", Offset = "0x1DABF94", VA = "0x1DABF94")]
			public <>c__DisplayClass337_0()
			{
			}

			[Token(Token = "0x6000F72")]
			[Address(RVA = "0x1DABF9C", Offset = "0x1DABF9C", VA = "0x1DABF9C")]
			internal bool <CreateBus>b__0(GroupBus obj)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20001F1")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC87E4", Offset = "0xFC87E4")]
		private sealed class <>c__DisplayClass341_0
		{
			[Token(Token = "0x4000A8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string busName;

			[Token(Token = "0x6000F73")]
			[Address(RVA = "0x1DABFC0", Offset = "0x1DABFC0", VA = "0x1DABFC0")]
			public <>c__DisplayClass341_0()
			{
			}

			[Token(Token = "0x6000F74")]
			[Address(RVA = "0x1DABFC8", Offset = "0x1DABFC8", VA = "0x1DABFC8")]
			internal bool <FadeBusToVolume>b__0(BusFadeInfo obj)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20001F2")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC87F4", Offset = "0xFC87F4")]
		private sealed class <>c__DisplayClass344_0
		{
			[Token(Token = "0x4000A8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string busName;

			[Token(Token = "0x6000F75")]
			[Address(RVA = "0x1DABFEC", Offset = "0x1DABFEC", VA = "0x1DABFEC")]
			public <>c__DisplayClass344_0()
			{
			}

			[Token(Token = "0x6000F76")]
			[Address(RVA = "0x1DABFF4", Offset = "0x1DABFF4", VA = "0x1DABFF4")]
			internal bool <GlideBusByPitch>b__0(BusPitchGlideInfo obj)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20001F3")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC8804", Offset = "0xFC8804")]
		private sealed class <>c__DisplayClass423_0
		{
			[Token(Token = "0x4000A8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string categoryName;

			[Token(Token = "0x6000F77")]
			[Address(RVA = "0x1DAC018", Offset = "0x1DAC018", VA = "0x1DAC018")]
			public <>c__DisplayClass423_0()
			{
			}

			[Token(Token = "0x6000F78")]
			[Address(RVA = "0x1DAC020", Offset = "0x1DAC020", VA = "0x1DAC020")]
			internal bool <CreateCustomEventCategoryIfNotThere>b__0(CustomEventCategory cat)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20001F4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC8814", Offset = "0xFC8814")]
		private sealed class <>c__DisplayClass424_0
		{
			[Token(Token = "0x4000A8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string customEventName;

			[Token(Token = "0x6000F79")]
			[Address(RVA = "0x1DAC044", Offset = "0x1DAC044", VA = "0x1DAC044")]
			public <>c__DisplayClass424_0()
			{
			}

			[Token(Token = "0x6000F7A")]
			[Address(RVA = "0x1DAC04C", Offset = "0x1DAC04C", VA = "0x1DAC04C")]
			internal bool <CreateCustomEvent>b__0(CustomEvent obj)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20001F5")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC8824", Offset = "0xFC8824")]
		private sealed class <>c__DisplayClass425_0
		{
			[Token(Token = "0x4000A8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string customEventName;

			[Token(Token = "0x6000F7B")]
			[Address(RVA = "0x1DAC070", Offset = "0x1DAC070", VA = "0x1DAC070")]
			public <>c__DisplayClass425_0()
			{
			}

			[Token(Token = "0x6000F7C")]
			[Address(RVA = "0x1DAC078", Offset = "0x1DAC078", VA = "0x1DAC078")]
			internal bool <DeleteCustomEvent>b__0(CustomEvent obj)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20001F6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC8834", Offset = "0xFC8834")]
		private sealed class <>c__DisplayClass426_0
		{
			[Token(Token = "0x4000A90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string customEventName;

			[Token(Token = "0x6000F7D")]
			[Address(RVA = "0x1DAC09C", Offset = "0x1DAC09C", VA = "0x1DAC09C")]
			public <>c__DisplayClass426_0()
			{
			}

			[Token(Token = "0x6000F7E")]
			[Address(RVA = "0x1DAC0A4", Offset = "0x1DAC0A4", VA = "0x1DAC0A4")]
			internal bool <GetCustomEventByName>b__0(CustomEvent obj)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20001F7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC8844", Offset = "0xFC8844")]
		private sealed class <>c__DisplayClass428_0
		{
			[Token(Token = "0x4000A91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string customEventName;

			[Token(Token = "0x6000F7F")]
			[Address(RVA = "0x1DAC0C8", Offset = "0x1DAC0C8", VA = "0x1DAC0C8")]
			public <>c__DisplayClass428_0()
			{
			}

			[Token(Token = "0x6000F80")]
			[Address(RVA = "0x1DAC0D0", Offset = "0x1DAC0D0", VA = "0x1DAC0D0")]
			internal bool <CustomEventExists>b__0(CustomEvent obj)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20001F8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC8854", Offset = "0xFC8854")]
		private sealed class <>c__DisplayClass429_0
		{
			[Token(Token = "0x4000A92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string eventName;

			[Token(Token = "0x6000F81")]
			[Address(RVA = "0x1DAC0F4", Offset = "0x1DAC0F4", VA = "0x1DAC0F4")]
			public <>c__DisplayClass429_0()
			{
			}

			[Token(Token = "0x6000F82")]
			[Address(RVA = "0x1DAC0FC", Offset = "0x1DAC0FC", VA = "0x1DAC0FC")]
			internal bool <GetChildReceivers>b__0(ICustomEventReceiver rec)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20001F9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC8864", Offset = "0xFC8864")]
		private sealed class <>c__DisplayClass430_0
		{
			[Token(Token = "0x4000A93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string eventName;

			[Token(Token = "0x6000F83")]
			[Address(RVA = "0x1DAC1CC", Offset = "0x1DAC1CC", VA = "0x1DAC1CC")]
			public <>c__DisplayClass430_0()
			{
			}

			[Token(Token = "0x6000F84")]
			[Address(RVA = "0x1DAC1D4", Offset = "0x1DAC1D4", VA = "0x1DAC1D4")]
			internal bool <GetParentReceivers>b__0(ICustomEventReceiver rec)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20001FA")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC8874", Offset = "0xFC8874")]
		private sealed class <>c__DisplayClass445_0
		{
			[Token(Token = "0x4000A94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public AmbientSound ambient;

			[Token(Token = "0x6000F85")]
			[Address(RVA = "0x1DAC2A4", Offset = "0x1DAC2A4", VA = "0x1DAC2A4")]
			public <>c__DisplayClass445_0()
			{
			}

			[Token(Token = "0x6000F86")]
			[Address(RVA = "0x1DAC2AC", Offset = "0x1DAC2AC", VA = "0x1DAC2AC")]
			internal bool <SetupAmbientNextFrame>b__0(AmbientSoundToTriggerInfo obj)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20001FB")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC8884", Offset = "0xFC8884")]
		private sealed class <>c__DisplayClass446_0
		{
			[Token(Token = "0x4000A95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public AmbientSound ambient;

			[Token(Token = "0x6000F87")]
			[Address(RVA = "0x1DAC334", Offset = "0x1DAC334", VA = "0x1DAC334")]
			public <>c__DisplayClass446_0()
			{
			}

			[Token(Token = "0x6000F88")]
			[Address(RVA = "0x1DAC33C", Offset = "0x1DAC33C", VA = "0x1DAC33C")]
			internal bool <RemoveDelayedAmbient>b__0(AmbientSoundToTriggerInfo obj)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40002EC")]
		public const string MasterAudioDefaultFolder = "Assets/Plugins/DarkTonic/MasterAudio";

		[Token(Token = "0x40002ED")]
		public const string PreviewText = "Random delay, custom fading & start/end position settings are ignored by preview in edit mode.";

		[Token(Token = "0x40002EE")]
		public const string LoopDisabledLoopedChain = "Loop Clip is always OFF for Looped Chain Groups";

		[Token(Token = "0x40002EF")]
		public const string LoopDisabledCustomEnd = "Loop Clip is always OFF when using Custom End Position";

		[Token(Token = "0x40002F0")]
		public const string DragAudioTip = "Drag Audio clips or a folder containing some here";

		[Token(Token = "0x40002F1")]
		public const string NoCategory = "[Uncategorized]";

		[Token(Token = "0x40002F2")]
		public const float SemiTonePitchFactor = 1.05946f;

		[Token(Token = "0x40002F3")]
		public const float SpatialBlend_2DValue = 0f;

		[Token(Token = "0x40002F4")]
		public const float SpatialBlend_3DValue = 1f;

		[Token(Token = "0x40002F5")]
		public const float MaxCrossFadeTimeSeconds = 120f;

		[Token(Token = "0x40002F6")]
		public const float DefaultDuckVolCut = -6f;

		[Token(Token = "0x40002F7")]
		public const int ERROR_MA_LAYER_COLLISIONS_DISABLED = 1;

		[Token(Token = "0x40002F8")]
		public const int PHYSICS_DISABLED = 2;

		[Token(Token = "0x40002F9")]
		public const string StoredLanguageNameKey = "~MA_Language_Key~";

		[Token(Token = "0x40002FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly YieldInstruction EndOfFrameDelay;

		[Token(Token = "0x40002FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly List<string> ExemptChildNames;

		[Token(Token = "0x40002FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly HashSet<int> ErrorNumbersLogged;

		[Token(Token = "0x40002FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static Action NumberOfAudioSourcesChanged;

		[Token(Token = "0x40002FE")]
		public const int HardCodedBusOptions = 2;

		[Token(Token = "0x40002FF")]
		public const string AllBusesName = "[All]";

		[Token(Token = "0x4000300")]
		public const string NoGroupName = "[None]";

		[Token(Token = "0x4000301")]
		public const string DynamicGroupName = "[Type In]";

		[Token(Token = "0x4000302")]
		public const string NoPlaylistName = "[No Playlist]";

		[Token(Token = "0x4000303")]
		public const string NoVoiceLimitName = "[NO LMT]";

		[Token(Token = "0x4000304")]
		public const string OnlyPlaylistControllerName = "~only~";

		[Token(Token = "0x4000305")]
		public const float InnerLoopCheckInterval = 0.1f;

		[Token(Token = "0x4000306")]
		private const int MaxComponents = 20;

		[Token(Token = "0x4000307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioLocation bulkLocationMode;

		[Token(Token = "0x4000308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string groupTemplateName;

		[Token(Token = "0x4000309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string audioSourceTemplateName;

		[Token(Token = "0x400030A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool showGroupCreation;

		[Token(Token = "0x400030B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool useGroupTemplates;

		[Token(Token = "0x400030C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public DragGroupMode curDragGroupMode;

		[Token(Token = "0x400030D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<GameObject> groupTemplates;

		[Token(Token = "0x400030E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<GameObject> audioSourceTemplates;

		[Token(Token = "0x400030F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool mixerMuted;

		[Token(Token = "0x4000310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool playlistsMuted;

		[Token(Token = "0x4000311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public LanguageMode langMode;

		[Token(Token = "0x4000312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public SystemLanguage testLanguage;

		[Token(Token = "0x4000313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public SystemLanguage defaultLanguage;

		[Token(Token = "0x4000314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<SystemLanguage> supportedLanguages;

		[Token(Token = "0x4000315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string busFilter;

		[Token(Token = "0x4000316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool useTextGroupFilter;

		[Token(Token = "0x4000317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string textGroupFilter;

		[Token(Token = "0x4000318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool resourceClipsPauseDoNotUnload;

		[Token(Token = "0x4000319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Transform playlistControllerPrefab;

		[Token(Token = "0x400031A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool persistBetweenScenes;

		[Token(Token = "0x400031B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		public bool shouldLogDestroys;

		[Token(Token = "0x400031C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8A")]
		public bool showBusColors;

		[Token(Token = "0x400031D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8B")]
		public bool areGroupsExpanded;

		[Token(Token = "0x400031E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Transform soundGroupTemplate;

		[Token(Token = "0x400031F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Transform soundGroupVariationTemplate;

		[Token(Token = "0x4000320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public List<GroupBus> groupBuses;

		[Token(Token = "0x4000321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public bool groupByBus;

		[Token(Token = "0x4000322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA9")]
		public bool sortAlpha;

		[Token(Token = "0x4000323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAA")]
		public bool showRangeSoundGizmos;

		[Token(Token = "0x4000324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAB")]
		public bool showSelectedRangeSoundGizmos;

		[Token(Token = "0x4000325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public Color rangeGizmoColor;

		[Token(Token = "0x4000326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public Color selectedRangeGizmoColor;

		[Token(Token = "0x4000327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public bool showAdvancedSettings;

		[Token(Token = "0x4000328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCD")]
		public bool showLocalization;

		[Token(Token = "0x4000329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCE")]
		public bool playListExpanded;

		[Token(Token = "0x400032A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCF")]
		public bool playlistsExpanded;

		[Token(Token = "0x400032B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public AllMusicSpatialBlendType musicSpatialBlendType;

		[Token(Token = "0x400032C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public float musicSpatialBlend;

		[Token(Token = "0x400032D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public AllMixerSpatialBlendType mixerSpatialBlendType;

		[Token(Token = "0x400032E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public float mixerSpatialBlend;

		[Token(Token = "0x400032F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public ItemSpatialBlendType newGroupSpatialType;

		[Token(Token = "0x4000330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public float newGroupSpatialBlend;

		[Token(Token = "0x4000331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public List<Playlist> musicPlaylists;

		[Token(Token = "0x4000332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public float _masterAudioVolume;

		[Token(Token = "0x4000333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public bool vrSettingsExpanded;

		[Token(Token = "0x4000334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF5")]
		public bool useSpatializer;

		[Token(Token = "0x4000335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF6")]
		public bool useSpatializerPostFX;

		[Token(Token = "0x4000336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF7")]
		public bool addOculusAudioSources;

		[Token(Token = "0x4000337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public bool addResonanceAudioSources;

		[Token(Token = "0x4000338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF9")]
		public bool ignoreTimeScale;

		[Token(Token = "0x4000339")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFA")]
		public bool useGaplessPlaylists;

		[Token(Token = "0x400033A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFB")]
		public bool saveRuntimeChanges;

		[Token(Token = "0x400033B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		public bool prioritizeOnDistance;

		[Token(Token = "0x400033C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public int rePrioritizeEverySecIndex;

		[Token(Token = "0x400033D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		public bool useOcclusion;

		[Token(Token = "0x400033E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public float occlusionMaxCutoffFreq;

		[Token(Token = "0x400033F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public float occlusionMinCutoffFreq;

		[Token(Token = "0x4000340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public float occlusionFreqChangeSeconds;

		[Token(Token = "0x4000341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		public OcclusionSelectionType occlusionSelectType;

		[Token(Token = "0x4000342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public int occlusionMaxRayCastsPerFrame;

		[Token(Token = "0x4000343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		public float occlusionRayCastOffset;

		[Token(Token = "0x4000344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public bool occlusionUseLayerMask;

		[Token(Token = "0x4000345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		public LayerMask occlusionLayerMask;

		[Token(Token = "0x4000346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public bool occlusionShowRaycasts;

		[Token(Token = "0x4000347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x129")]
		public bool occlusionShowCategories;

		[Token(Token = "0x4000348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		public RaycastMode occlusionRaycastMode;

		[Token(Token = "0x4000349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public bool occlusionIncludeStartRaycast2DCollider;

		[Token(Token = "0x400034A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x131")]
		public bool occlusionRaycastsHitTriggers;

		[Token(Token = "0x400034B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x132")]
		public bool ambientAdvancedExpanded;

		[Token(Token = "0x400034C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		public int ambientMaxRecalcsPerFrame;

		[Token(Token = "0x400034D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public bool visualAdvancedExpanded;

		[Token(Token = "0x400034E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x139")]
		public bool logAdvancedExpanded;

		[Token(Token = "0x400034F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13A")]
		public bool listenerAdvancedExpanded;

		[Token(Token = "0x4000350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13B")]
		public bool listenerFollowerHasRigidBody;

		[Token(Token = "0x4000351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		public VariationFollowerType variationFollowerType;

		[Token(Token = "0x4000352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public bool showFadingSettings;

		[Token(Token = "0x4000353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x141")]
		public bool stopZeroVolumeGroups;

		[Token(Token = "0x4000354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x142")]
		public bool stopZeroVolumeBuses;

		[Token(Token = "0x4000355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x143")]
		public bool stopZeroVolumePlaylists;

		[Token(Token = "0x4000356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		public float stopOldestBusFadeTime;

		[Token(Token = "0x4000357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public bool resourceAdvancedExpanded;

		[Token(Token = "0x4000358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x149")]
		public bool useClipAgePriority;

		[Token(Token = "0x4000359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14A")]
		public bool logOutOfVoices;

		[Token(Token = "0x400035A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14B")]
		public bool LogSounds;

		[Token(Token = "0x400035B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		public bool logCustomEvents;

		[Token(Token = "0x400035C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14D")]
		public bool disableLogging;

		[Token(Token = "0x400035D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14E")]
		public bool showMusicDucking;

		[Token(Token = "0x400035E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14F")]
		public bool enableMusicDucking;

		[Token(Token = "0x400035F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public List<DuckGroupInfo> musicDuckingSounds;

		[Token(Token = "0x4000360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public float defaultRiseVolStart;

		[Token(Token = "0x4000361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		public float defaultUnduckTime;

		[Token(Token = "0x4000362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public float defaultDuckedVolumeCut;

		[Token(Token = "0x4000363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		public float crossFadeTime;

		[Token(Token = "0x4000364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public float _masterPlaylistVolume;

		[Token(Token = "0x4000365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		public bool showGroupSelect;

		[Token(Token = "0x4000366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16D")]
		public bool hideGroupsWithNoActiveVars;

		[Token(Token = "0x4000367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16E")]
		public bool logPerfExpanded;

		[Token(Token = "0x4000368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16F")]
		public bool willWarm;

		[Token(Token = "0x4000369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public string newEventName;

		[Token(Token = "0x400036A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public bool showCustomEvents;

		[Token(Token = "0x400036B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public string newCustomEventCategoryName;

		[Token(Token = "0x400036C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public string addToCustomEventCategoryName;

		[Token(Token = "0x400036D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public List<CustomEvent> customEvents;

		[Token(Token = "0x400036E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public List<CustomEventCategory> customEventCategories;

		[Token(Token = "0x400036F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public Dictionary<string, DuckGroupInfo> duckingBySoundType;

		[Token(Token = "0x4000370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public int frames;

		[Token(Token = "0x4000371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		public bool showUnityMixerGroupAssignment;

		[Token(Token = "0x4000372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly PlaySoundResult AndForgetSuccessResult;

		[Token(Token = "0x4000373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static readonly PlaySoundResult failedResultDuringInit;

		[Token(Token = "0x4000374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private readonly Dictionary<string, AudioGroupInfo> AudioSourcesBySoundType;

		[Token(Token = "0x4000375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private Dictionary<string, List<int>> _randomizer;

		[Token(Token = "0x4000376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private Dictionary<string, List<int>> _randomizerOrigin;

		[Token(Token = "0x4000377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private Dictionary<string, List<int>> _randomizerLeftovers;

		[Token(Token = "0x4000378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private Dictionary<string, List<int>> _clipsPlayedBySoundTypeOldestFirst;

		[Token(Token = "0x4000379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private readonly List<SoundGroupVariationUpdater> ActiveVariationUpdaters;

		[Token(Token = "0x400037A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private readonly List<SoundGroupVariationUpdater> ActiveUpdatersToRemove;

		[Token(Token = "0x400037B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private readonly List<CustomEventCandidate> ValidReceivers;

		[Token(Token = "0x400037C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private readonly List<MasterAudioGroup> SoloedGroups;

		[Token(Token = "0x400037D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private readonly List<AmbientSoundToTriggerInfo> AmbientsToDelayedTrigger;

		[Token(Token = "0x400037E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private readonly Queue<CustomEventToFireInfo> CustomEventsToFire;

		[Token(Token = "0x400037F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private readonly Queue<TransformFollower> TransFollowerColliderPositionRecalcs;

		[Token(Token = "0x4000380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private readonly List<TransformFollower> ProcessedColliderPositionRecalcs;

		[Token(Token = "0x4000381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private readonly List<BusFadeInfo> BusFades;

		[Token(Token = "0x4000382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private readonly List<GroupFadeInfo> GroupFades;

		[Token(Token = "0x4000383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private readonly List<GroupPitchGlideInfo> GroupPitchGlides;

		[Token(Token = "0x4000384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private readonly List<BusPitchGlideInfo> BusPitchGlides;

		[Token(Token = "0x4000385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		private readonly List<OcclusionFreqChangeInfo> VariationOcclusionFreqChanges;

		[Token(Token = "0x4000386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		private readonly List<AudioSource> AllAudioSources;

		[Token(Token = "0x4000387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		private readonly Dictionary<string, Dictionary<ICustomEventReceiver, Transform>> ReceiversByEventName;

		[Token(Token = "0x4000388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		private readonly Dictionary<string, PlaylistController> PlaylistControllersByName;

		[Token(Token = "0x4000389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		private readonly Dictionary<string, SoundGroupRefillInfo> LastTimeSoundGroupPlayed;

		[Token(Token = "0x400038A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		private readonly List<GameObject> OcclusionSourcesInRange;

		[Token(Token = "0x400038B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		private readonly List<GameObject> OcclusionSourcesOutOfRange;

		[Token(Token = "0x400038C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		private readonly List<GameObject> OcclusionSourcesBlocked;

		[Token(Token = "0x400038D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		private readonly Queue<SoundGroupVariationUpdater> QueuedOcclusionRays;

		[Token(Token = "0x400038E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		private readonly List<SoundGroupVariation> VariationsStartedDuringMultiStop;

		[Token(Token = "0x400038F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		private bool _isStoppingMultiple;

		[Token(Token = "0x4000390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28C")]
		private float _repriTime;

		[Token(Token = "0x4000391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		private List<string> _groupsToRemove;

		[Token(Token = "0x4000392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		private bool _mustRescanGroups;

		[Token(Token = "0x4000393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		private Transform _trans;

		[Token(Token = "0x4000394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		private bool _soundsLoaded;

		[Token(Token = "0x4000395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A9")]
		private bool _warming;

		[Token(Token = "0x4000396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static MasterAudio _instance;

		[Token(Token = "0x4000397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static string _prospectiveMAFolder;

		[Token(Token = "0x4000398")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static Transform _listenerTrans;

		[Token(Token = "0x4000399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static readonly List<SoundGroupCommand> GroupCommandsWithNoGroupSelector;

		[Token(Token = "0x400039A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static readonly List<SoundGroupCommand> GroupCommandsWithNoAllGroupSelector;

		[Token(Token = "0x400039B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC96CC", Offset = "0xFC96CC")]
		private static bool <AppIsShuttingDown>k__BackingField;

		[Token(Token = "0x17000079")]
		public static float PlaylistMasterVolume
		{
			[Token(Token = "0x600037E")]
			[Address(RVA = "0x1832200", Offset = "0x1832200", VA = "0x1832200")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600037F")]
			[Address(RVA = "0x181DAF0", Offset = "0x181DAF0", VA = "0x181DAF0")]
			set
			{
			}
		}

		[Token(Token = "0x1700007A")]
		public static bool LogSoundsEnabled
		{
			[Token(Token = "0x6000390")]
			[Address(RVA = "0x1832C80", Offset = "0x1832C80", VA = "0x1832C80")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000391")]
			[Address(RVA = "0x1832CEC", Offset = "0x1832CEC", VA = "0x1832CEC")]
			set
			{
			}
		}

		[Token(Token = "0x1700007B")]
		public static bool LogOutOfVoices
		{
			[Token(Token = "0x6000392")]
			[Address(RVA = "0x182A244", Offset = "0x182A244", VA = "0x182A244")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000393")]
			[Address(RVA = "0x1832D60", Offset = "0x1832D60", VA = "0x1832D60")]
			set
			{
			}
		}

		[Token(Token = "0x1700007C")]
		public static List<AudioSource> MasterAudioSources
		{
			[Token(Token = "0x60003A7")]
			[Address(RVA = "0x1833E2C", Offset = "0x1833E2C", VA = "0x1833E2C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007D")]
		public static Transform ListenerTrans
		{
			[Token(Token = "0x60003A9")]
			[Address(RVA = "0x1805AE0", Offset = "0x1805AE0", VA = "0x1805AE0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007E")]
		public static PlaylistController OnlyPlaylistController
		{
			[Token(Token = "0x60003AA")]
			[Address(RVA = "0x1833F70", Offset = "0x1833F70", VA = "0x1833F70")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007F")]
		public static bool IsWarming
		{
			[Token(Token = "0x60003AB")]
			[Address(RVA = "0x18140AC", Offset = "0x18140AC", VA = "0x18140AC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000080")]
		public static bool MixerMuted
		{
			[Token(Token = "0x60003AC")]
			[Address(RVA = "0x1834008", Offset = "0x1834008", VA = "0x1834008")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60003AD")]
			[Address(RVA = "0x1830200", Offset = "0x1830200", VA = "0x1830200")]
			set
			{
			}
		}

		[Token(Token = "0x17000081")]
		public static bool PlaylistsMuted
		{
			[Token(Token = "0x60003AE")]
			[Address(RVA = "0x1834074", Offset = "0x1834074", VA = "0x1834074")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60003AF")]
			[Address(RVA = "0x1831280", Offset = "0x1831280", VA = "0x1831280")]
			set
			{
			}
		}

		[Token(Token = "0x17000082")]
		public bool EnableMusicDucking
		{
			[Token(Token = "0x60003B0")]
			[Address(RVA = "0x18340E0", Offset = "0x18340E0", VA = "0x18340E0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60003B1")]
			[Address(RVA = "0x18340E8", Offset = "0x18340E8", VA = "0x18340E8")]
			set
			{
			}
		}

		[Token(Token = "0x17000083")]
		public float MasterCrossFadeTime
		{
			[Token(Token = "0x60003B2")]
			[Address(RVA = "0x18340F4", Offset = "0x18340F4", VA = "0x18340F4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000084")]
		public static List<Playlist> MusicPlaylists
		{
			[Token(Token = "0x60003B3")]
			[Address(RVA = "0x1830EF8", Offset = "0x1830EF8", VA = "0x1830EF8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000085")]
		public static List<GroupBus> GroupBuses
		{
			[Token(Token = "0x60003B4")]
			[Address(RVA = "0x182DD60", Offset = "0x182DD60", VA = "0x182DD60")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000086")]
		public static List<string> RuntimeSoundGroupNames
		{
			[Token(Token = "0x60003B5")]
			[Address(RVA = "0x1818978", Offset = "0x1818978", VA = "0x1818978")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000087")]
		public static List<string> RuntimeBusNames
		{
			[Token(Token = "0x60003B6")]
			[Address(RVA = "0x181AFC8", Offset = "0x181AFC8", VA = "0x181AFC8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000088")]
		public static MasterAudio SafeInstance
		{
			[Token(Token = "0x60003B7")]
			[Address(RVA = "0x1803A94", Offset = "0x1803A94", VA = "0x1803A94")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000089")]
		public static MasterAudio Instance
		{
			[Token(Token = "0x60003B8")]
			[Address(RVA = "0x1804894", Offset = "0x1804894", VA = "0x1804894")]
			get
			{
				return null;
			}
			[Token(Token = "0x60003B9")]
			[Address(RVA = "0x18340FC", Offset = "0x18340FC", VA = "0x18340FC")]
			set
			{
			}
		}

		[Token(Token = "0x1700008A")]
		public static bool SoundsReady
		{
			[Token(Token = "0x60003BA")]
			[Address(RVA = "0x180E898", Offset = "0x180E898", VA = "0x180E898")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700008B")]
		public static bool AppIsShuttingDown
		{
			[Token(Token = "0x60003BB")]
			[Address(RVA = "0x1834168", Offset = "0x1834168", VA = "0x1834168")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD5C80", Offset = "0xFD5C80")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60003BC")]
			[Address(RVA = "0x18341D0", Offset = "0x18341D0", VA = "0x18341D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD5C90", Offset = "0xFD5C90")]
			set
			{
			}
		}

		[Token(Token = "0x1700008C")]
		public List<string> GroupNames
		{
			[Token(Token = "0x60003BD")]
			[Address(RVA = "0x1834240", Offset = "0x1834240", VA = "0x1834240")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008D")]
		public static List<string> SoundGroupHardCodedNames
		{
			[Token(Token = "0x60003BE")]
			[Address(RVA = "0x1805498", Offset = "0x1805498", VA = "0x1805498")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008E")]
		public List<string> BusNames
		{
			[Token(Token = "0x60003BF")]
			[Address(RVA = "0x183457C", Offset = "0x183457C", VA = "0x183457C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008F")]
		public List<string> PlaylistNames
		{
			[Token(Token = "0x60003C0")]
			[Address(RVA = "0x1834688", Offset = "0x1834688", VA = "0x1834688")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000090")]
		public List<string> PlaylistNamesOnly
		{
			[Token(Token = "0x60003C1")]
			[Address(RVA = "0x1834794", Offset = "0x1834794", VA = "0x1834794")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000091")]
		public Transform Trans
		{
			[Token(Token = "0x60003C2")]
			[Address(RVA = "0x18060A8", Offset = "0x18060A8", VA = "0x18060A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000092")]
		public bool ShouldShowUnityAudioMixerGroupAssignments
		{
			[Token(Token = "0x60003C3")]
			[Address(RVA = "0x1834880", Offset = "0x1834880", VA = "0x1834880")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000093")]
		public List<string> CustomEventNames
		{
			[Token(Token = "0x60003C4")]
			[Address(RVA = "0x1834888", Offset = "0x1834888", VA = "0x1834888")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000094")]
		public List<string> CustomEventNamesOnly
		{
			[Token(Token = "0x60003C5")]
			[Address(RVA = "0x1834A0C", Offset = "0x1834A0C", VA = "0x1834A0C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000095")]
		public static List<string> CustomEventHardCodedNames
		{
			[Token(Token = "0x60003C6")]
			[Address(RVA = "0x1834968", Offset = "0x1834968", VA = "0x1834968")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000096")]
		public static float MasterVolumeLevel
		{
			[Token(Token = "0x60003C7")]
			[Address(RVA = "0x1834B1C", Offset = "0x1834B1C", VA = "0x1834B1C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60003C8")]
			[Address(RVA = "0x181D9A8", Offset = "0x181D9A8", VA = "0x181D9A8")]
			set
			{
			}
		}

		[Token(Token = "0x17000097")]
		private static bool SceneHasMasterAudio
		{
			[Token(Token = "0x60003C9")]
			[Address(RVA = "0x1828224", Offset = "0x1828224", VA = "0x1828224")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000098")]
		public static bool IgnoreTimeScale
		{
			[Token(Token = "0x60003CA")]
			[Address(RVA = "0x180D630", Offset = "0x180D630", VA = "0x180D630")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000099")]
		public static SystemLanguage DynamicLanguage
		{
			[Token(Token = "0x60003CB")]
			[Address(RVA = "0x1807B8C", Offset = "0x1807B8C", VA = "0x1807B8C")]
			get
			{
				return default(SystemLanguage);
			}
			[Token(Token = "0x60003CC")]
			[Address(RVA = "0x1834B88", Offset = "0x1834B88", VA = "0x1834B88")]
			set
			{
			}
		}

		[Token(Token = "0x1700009A")]
		public static float ReprioritizeTime
		{
			[Token(Token = "0x60003CD")]
			[Address(RVA = "0x1834C4C", Offset = "0x1834C4C", VA = "0x1834C4C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700009B")]
		public static bool ShouldRescanGroups
		{
			[Token(Token = "0x60003D0")]
			[Address(RVA = "0x1834D98", Offset = "0x1834D98", VA = "0x1834D98")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700009C")]
		public static string ProspectiveMAPath
		{
			[Token(Token = "0x60003D1")]
			[Address(RVA = "0x1834E6C", Offset = "0x1834E6C", VA = "0x1834E6C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60003D2")]
			[Address(RVA = "0x1834ED4", Offset = "0x1834ED4", VA = "0x1834ED4")]
			set
			{
			}
		}

		[Token(Token = "0x60002AF")]
		[Address(RVA = "0x1824140", Offset = "0x1824140", VA = "0x1824140")]
		[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0xFD5B40", Offset = "0xFD5B40")]
		private static void Init()
		{
		}

		[Token(Token = "0x60002B0")]
		[Address(RVA = "0x18241E4", Offset = "0x18241E4", VA = "0x18241E4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60002B1")]
		[Address(RVA = "0x1825D80", Offset = "0x1825D80", VA = "0x1825D80")]
		private void Start()
		{
		}

		[Token(Token = "0x60002B2")]
		[Address(RVA = "0x1825ED8", Offset = "0x1825ED8", VA = "0x1825ED8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60002B3")]
		[Address(RVA = "0x182617C", Offset = "0x182617C", VA = "0x182617C")]
		private void Update()
		{
		}

		[Token(Token = "0x60002B4")]
		[Address(RVA = "0x182759C", Offset = "0x182759C", VA = "0x182759C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60002B5")]
		[Address(RVA = "0x1827638", Offset = "0x1827638", VA = "0x1827638")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60002B6")]
		[Address(RVA = "0x18275AC", Offset = "0x18275AC", VA = "0x18275AC")]
		private void ManualUpdate()
		{
		}

		[Token(Token = "0x60002B7")]
		[Address(RVA = "0x1825BD0", Offset = "0x1825BD0", VA = "0x1825BD0")]
		public string SoundGroupForWarming()
		{
			return null;
		}

		[Token(Token = "0x60002B8")]
		[Address(RVA = "0x1827A98", Offset = "0x1827A98", VA = "0x1827A98")]
		public static void RegisterUpdaterForUpdates(SoundGroupVariationUpdater updater)
		{
		}

		[Token(Token = "0x60002B9")]
		[Address(RVA = "0x1827B68", Offset = "0x1827B68", VA = "0x1827B68")]
		public static void UnregisterUpdaterForUpdates(SoundGroupVariationUpdater updater)
		{
		}

		[Token(Token = "0x60002BA")]
		[Address(RVA = "0x1827910", Offset = "0x1827910", VA = "0x1827910")]
		private void UpdateActiveVariations()
		{
		}

		[Token(Token = "0x60002BB")]
		[Address(RVA = "0x1827BEC", Offset = "0x1827BEC", VA = "0x1827BEC")]
		private static void UpdateRefillTime(string sType, float inactivePeriodSeconds)
		{
		}

		[Token(Token = "0x60002BC")]
		[Address(RVA = "0x182764C", Offset = "0x182764C", VA = "0x182764C")]
		private static void RecalcClosestColliderPositions()
		{
		}

		[Token(Token = "0x60002BD")]
		[Address(RVA = "0x18274D0", Offset = "0x18274D0", VA = "0x18274D0")]
		private static void FireCustomEventsWaiting()
		{
		}

		[Token(Token = "0x60002BE")]
		[Address(RVA = "0x182722C", Offset = "0x182722C", VA = "0x182722C")]
		private static void RefillInactiveGroupPools()
		{
		}

		[Token(Token = "0x60002BF")]
		[Address(RVA = "0x1826214", Offset = "0x1826214", VA = "0x1826214")]
		private static void PerformOcclusionFrequencyChanges()
		{
		}

		[Token(Token = "0x60002C0")]
		[Address(RVA = "0x1826510", Offset = "0x1826510", VA = "0x1826510")]
		private void PerformBusFades()
		{
		}

		[Token(Token = "0x60002C1")]
		[Address(RVA = "0x18269D8", Offset = "0x18269D8", VA = "0x18269D8")]
		private void PerformGroupFades()
		{
		}

		[Token(Token = "0x60002C2")]
		[Address(RVA = "0x1826EF8", Offset = "0x1826EF8", VA = "0x1826EF8")]
		public static void PerformDelayedAmbientTriggers()
		{
		}

		[Token(Token = "0x60002C3")]
		[Address(RVA = "0x1826D34", Offset = "0x1826D34", VA = "0x1826D34")]
		private void PerformGroupPitchGlides()
		{
		}

		[Token(Token = "0x60002C4")]
		[Address(RVA = "0x1826818", Offset = "0x1826818", VA = "0x1826818")]
		private void PerformBusPitchGlides()
		{
		}

		[Token(Token = "0x60002C5")]
		[Address(RVA = "0x182817C", Offset = "0x182817C", VA = "0x182817C")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x60002C6")]
		[Address(RVA = "0x180C934", Offset = "0x180C934", VA = "0x180C934")]
		public static bool PlaySoundAndForget(string sType, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay)
		{
			return default(bool);
		}

		[Token(Token = "0x60002C7")]
		[Address(RVA = "0x18167E4", Offset = "0x18167E4", VA = "0x18167E4")]
		public static PlaySoundResult PlaySound(string sType, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay, bool isChaining = false, bool isSingleSubscribedPlay = false)
		{
			return null;
		}

		[Token(Token = "0x60002C8")]
		[Address(RVA = "0x1829A9C", Offset = "0x1829A9C", VA = "0x1829A9C")]
		public static bool PlaySound3DAtVector3AndForget(string sType, Vector3 sourcePosition, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay)
		{
			return default(bool);
		}

		[Token(Token = "0x60002C9")]
		[Address(RVA = "0x1829C4C", Offset = "0x1829C4C", VA = "0x1829C4C")]
		public static PlaySoundResult PlaySound3DAtVector3(string sType, Vector3 sourcePosition, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay)
		{
			return null;
		}

		[Token(Token = "0x60002CA")]
		[Address(RVA = "0x1809A30", Offset = "0x1809A30", VA = "0x1809A30")]
		public static bool PlaySound3DAtTransformAndForget(string sType, Transform sourceTrans, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay)
		{
			return default(bool);
		}

		[Token(Token = "0x60002CB")]
		[Address(RVA = "0x1809CD4", Offset = "0x1809CD4", VA = "0x1809CD4")]
		public static PlaySoundResult PlaySound3DAtTransform(string sType, Transform sourceTrans, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay, bool isChaining = false, bool isSingleSubscribedPlay = false)
		{
			return null;
		}

		[Token(Token = "0x60002CC")]
		[Address(RVA = "0x1809FA4", Offset = "0x1809FA4", VA = "0x1809FA4")]
		public static bool PlaySound3DFollowTransformAndForget(string sType, Transform sourceTrans, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay)
		{
			return default(bool);
		}

		[Token(Token = "0x60002CD")]
		[Address(RVA = "0x180A248", Offset = "0x180A248", VA = "0x180A248")]
		public static PlaySoundResult PlaySound3DFollowTransform(string sType, Transform sourceTrans, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay, bool isChaining = false, bool isSingleSubscribedPlay = false)
		{
			return null;
		}

		[Token(Token = "0x60002CE")]
		[Address(RVA = "0x1829E24", Offset = "0x1829E24", VA = "0x1829E24")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xFD5B54", Offset = "0xFD5B54")]
		public static IEnumerator PlaySoundAndWaitUntilFinished(string sType, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] Action completedAction)
		{
			return null;
		}

		[Token(Token = "0x60002CF")]
		[Address(RVA = "0x180A530", Offset = "0x180A530", VA = "0x180A530")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xFD5BB8", Offset = "0xFD5BB8")]
		public static IEnumerator PlaySound3DAtTransformAndWaitUntilFinished(string sType, Transform sourceTrans, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay, [Optional] Action completedAction)
		{
			return null;
		}

		[Token(Token = "0x60002D0")]
		[Address(RVA = "0x180A6F0", Offset = "0x180A6F0", VA = "0x180A6F0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xFD5C1C", Offset = "0xFD5C1C")]
		public static IEnumerator PlaySound3DFollowTransformAndWaitUntilFinished(string sType, Transform sourceTrans, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay, [Optional] Action completedAction)
		{
			return null;
		}

		[Token(Token = "0x60002D1")]
		[Address(RVA = "0x1829A78", Offset = "0x1829A78", VA = "0x1829A78")]
		public static bool PSRAsSuccessBool(PlaySoundResult psr)
		{
			return default(bool);
		}

		[Token(Token = "0x60002D2")]
		[Address(RVA = "0x18282B8", Offset = "0x18282B8", VA = "0x18282B8")]
		private static PlaySoundResult PlaySoundAtVolume(string sType, float volumePercentage, Vector3 sourcePosition, double? timeToSchedulePlay, [Optional] float? pitch, [Optional] Transform sourceTrans, [Optional] string variationName, bool attachToSource = false, float delaySoundTime = 0f, bool useVector3 = false, bool makePlaySoundResult = false, bool isChaining = false, bool isSingleSubscribedPlay = false, bool triggeredAsChildGroup = false)
		{
			return null;
		}

		[Token(Token = "0x60002D3")]
		[Address(RVA = "0x182A74C", Offset = "0x182A74C", VA = "0x182A74C")]
		private static void MaybeChainNextVar(bool isChaining, SoundGroupVariation variation, float volumePercentage, float? pitch, Transform sourceTrans, bool attachToSource)
		{
		}

		[Token(Token = "0x60002D4")]
		[Address(RVA = "0x182A208", Offset = "0x182A208", VA = "0x182A208")]
		private static void SetLastPlayed(AudioGroupInfo grp)
		{
		}

		[Token(Token = "0x60002D5")]
		[Address(RVA = "0x182A544", Offset = "0x182A544", VA = "0x182A544")]
		private static void RemoveClipAndRefillIfEmpty(AudioGroupInfo grp, bool isNonSpecific, int? randomIndex, List<int> choices, string sType, int pickedChoice, bool loggingEnabledForGrp, bool isSingleVarLoop)
		{
		}

		[Token(Token = "0x60002D6")]
		[Address(RVA = "0x182A780", Offset = "0x182A780", VA = "0x182A780")]
		private static PlaySoundResult PlaySoundIfAvailable(AudioInfo info, Vector3 sourcePosition, float volumePercentage, ref bool forgetSoundPlayed, [Optional] float? pitch, [Optional] AudioGroupInfo audioGroup, [Optional] Transform sourceTrans, bool attachToSource = false, float delaySoundTime = 0f, bool useVector3 = false, bool makePlaySoundResult = false, [Optional] double? timeToSchedulePlay, bool isChaining = false, bool isSingleSubscribedPlay = false)
		{
			return null;
		}

		[Token(Token = "0x60002D7")]
		[Address(RVA = "0x182AEB0", Offset = "0x182AEB0", VA = "0x182AEB0")]
		public static void DuckSoundGroup(string soundGroupName, AudioSource aSource)
		{
		}

		[Token(Token = "0x60002D8")]
		[Address(RVA = "0x182B060", Offset = "0x182B060", VA = "0x182B060")]
		private static void StopPauseOrUnpauseSoundsOfTransform(Transform trans, List<AudioInfo> varList, VariationCommand varCmd)
		{
		}

		[Token(Token = "0x60002D9")]
		[Address(RVA = "0x180AEF0", Offset = "0x180AEF0", VA = "0x180AEF0")]
		public static void StopAllSoundsOfTransform(Transform sourceTrans)
		{
		}

		[Token(Token = "0x60002DA")]
		[Address(RVA = "0x180421C", Offset = "0x180421C", VA = "0x180421C")]
		public static void StopSoundGroupOfTransform(Transform sourceTrans, string sType)
		{
		}

		[Token(Token = "0x60002DB")]
		[Address(RVA = "0x180A850", Offset = "0x180A850", VA = "0x180A850")]
		public static void PauseAllSoundsOfTransform(Transform sourceTrans)
		{
		}

		[Token(Token = "0x60002DC")]
		[Address(RVA = "0x180ACE0", Offset = "0x180ACE0", VA = "0x180ACE0")]
		public static void PauseSoundGroupOfTransform(Transform sourceTrans, string sType)
		{
		}

		[Token(Token = "0x60002DD")]
		[Address(RVA = "0x180B48C", Offset = "0x180B48C", VA = "0x180B48C")]
		public static void UnpauseAllSoundsOfTransform(Transform sourceTrans)
		{
		}

		[Token(Token = "0x60002DE")]
		[Address(RVA = "0x180B91C", Offset = "0x180B91C", VA = "0x180B91C")]
		public static void UnpauseSoundGroupOfTransform(Transform sourceTrans, string sType)
		{
		}

		[Token(Token = "0x60002DF")]
		[Address(RVA = "0x1819F94", Offset = "0x1819F94", VA = "0x1819F94")]
		public static void FadeOutAllSoundsOfTransform(Transform sourceTrans, float fadeTime)
		{
		}

		[Token(Token = "0x60002E0")]
		[Address(RVA = "0x18043C8", Offset = "0x18043C8", VA = "0x18043C8")]
		public static void FadeOutSoundGroupOfTransform(Transform sourceTrans, string sType, float fadeTime)
		{
		}

		[Token(Token = "0x60002E1")]
		[Address(RVA = "0x1819914", Offset = "0x1819914", VA = "0x1819914")]
		public static void StopAllOfSound(string sType)
		{
		}

		[Token(Token = "0x60002E2")]
		[Address(RVA = "0x1818B98", Offset = "0x1818B98", VA = "0x1818B98")]
		public static void FadeOutAllOfSound(string sType, float fadeTime)
		{
		}

		[Token(Token = "0x60002E3")]
		[Address(RVA = "0x182B2F4", Offset = "0x182B2F4", VA = "0x182B2F4")]
		public static List<SoundGroupVariation> GetAllPlayingVariations()
		{
			return null;
		}

		[Token(Token = "0x60002E4")]
		[Address(RVA = "0x18096A8", Offset = "0x18096A8", VA = "0x18096A8")]
		public static List<SoundGroupVariation> GetAllPlayingVariationsOfTransform(Transform sourceTrans)
		{
			return null;
		}

		[Token(Token = "0x60002E5")]
		[Address(RVA = "0x182B56C", Offset = "0x182B56C", VA = "0x182B56C")]
		public static List<SoundGroupVariation> GetAllPlayingVariationsOfTransformList(List<Transform> sourceTransList)
		{
			return null;
		}

		[Token(Token = "0x60002E6")]
		[Address(RVA = "0x182B890", Offset = "0x182B890", VA = "0x182B890")]
		public static List<SoundGroupVariation> GetAllPlayingVariationsInBus(string busName)
		{
			return null;
		}

		[Token(Token = "0x60002E7")]
		[Address(RVA = "0x182BA60", Offset = "0x182BA60", VA = "0x182BA60")]
		public static void DeleteGroupVariation(string sType, string variationName)
		{
		}

		[Token(Token = "0x60002E8")]
		[Address(RVA = "0x182C778", Offset = "0x182C778", VA = "0x182C778")]
		public static void CreateGroupVariationFromClip(string sType, AudioClip clip, string variationName, float volume = 1f, float pitch = 1f)
		{
		}

		[Token(Token = "0x60002E9")]
		[Address(RVA = "0x182CD74", Offset = "0x182CD74", VA = "0x182CD74")]
		public static void ChangeVariationPitch(string sType, bool changeAllVariations, string variationName, float pitch)
		{
		}

		[Token(Token = "0x60002EA")]
		[Address(RVA = "0x182D0B8", Offset = "0x182D0B8", VA = "0x182D0B8")]
		public static void ChangeVariationVolume(string sType, bool changeAllVariations, string variationName, float volume)
		{
		}

		[Token(Token = "0x60002EB")]
		[Address(RVA = "0x182D394", Offset = "0x182D394", VA = "0x182D394")]
		public static void ChangeVariationClipFromResources(string sType, bool changeAllVariations, string variationName, string resourceFileName)
		{
		}

		[Token(Token = "0x60002EC")]
		[Address(RVA = "0x182D544", Offset = "0x182D544", VA = "0x182D544")]
		public static void ChangeVariationClip(string sType, bool changeAllVariations, string variationName, AudioClip clip)
		{
		}

		[Token(Token = "0x60002ED")]
		[Address(RVA = "0x182D7BC", Offset = "0x182D7BC", VA = "0x182D7BC")]
		public static void GradualOcclusionFreqChange(SoundGroupVariation variation, float fadeTime, float newCutoffFreq)
		{
		}

		[Token(Token = "0x60002EE")]
		[Address(RVA = "0x182DA84", Offset = "0x182DA84", VA = "0x182DA84")]
		public static AudioSource GetNextVariationForSoundGroup(string sType)
		{
			return null;
		}

		[Token(Token = "0x60002EF")]
		[Address(RVA = "0x1818A60", Offset = "0x1818A60", VA = "0x1818A60")]
		public static bool IsSoundGroupPlaying(string sType)
		{
			return default(bool);
		}

		[Token(Token = "0x60002F0")]
		[Address(RVA = "0x180BB3C", Offset = "0x180BB3C", VA = "0x180BB3C")]
		public static bool IsTransformPlayingSoundGroup(string sType, Transform sourceTrans)
		{
			return default(bool);
		}

		[Token(Token = "0x60002F1")]
		[Address(RVA = "0x181A160", Offset = "0x181A160", VA = "0x181A160")]
		public static void RouteGroupToBus(string sType, string busName)
		{
		}

		[Token(Token = "0x60002F2")]
		[Address(RVA = "0x182E010", Offset = "0x182E010", VA = "0x182E010")]
		public static float GetVariationLength(string sType, string variationName)
		{
			return default(float);
		}

		[Token(Token = "0x60002F3")]
		[Address(RVA = "0x1818DB4", Offset = "0x1818DB4", VA = "0x1818DB4")]
		public static void RefillSoundGroupPool(string sType)
		{
		}

		[Token(Token = "0x60002F4")]
		[Address(RVA = "0x182E770", Offset = "0x182E770", VA = "0x182E770")]
		public static bool SoundGroupExists(string sType)
		{
			return default(bool);
		}

		[Token(Token = "0x60002F5")]
		[Address(RVA = "0x181968C", Offset = "0x181968C", VA = "0x181968C")]
		public static void PauseSoundGroup(string sType)
		{
		}

		[Token(Token = "0x60002F6")]
		[Address(RVA = "0x182E810", Offset = "0x182E810", VA = "0x182E810")]
		public static void SetGroupSpatialBlend(string sType)
		{
		}

		[Token(Token = "0x60002F7")]
		[Address(RVA = "0x182E95C", Offset = "0x182E95C", VA = "0x182E95C")]
		public static void RouteGroupToUnityMixerGroup(string sType, AudioMixerGroup mixerGroup)
		{
		}

		[Token(Token = "0x60002F8")]
		[Address(RVA = "0x1819D20", Offset = "0x1819D20", VA = "0x1819D20")]
		public static void UnpauseSoundGroup(string sType)
		{
		}

		[Token(Token = "0x60002F9")]
		[Address(RVA = "0x18191BC", Offset = "0x18191BC", VA = "0x18191BC")]
		public static void FadeSoundGroupToVolume(string sType, float newVolume, float fadeTime, [Optional] Action completionCallback, bool willStopAfterFade = false, bool willResetVolumeAfterFade = false)
		{
		}

		[Token(Token = "0x60002FA")]
		[Address(RVA = "0x181AE18", Offset = "0x181AE18", VA = "0x181AE18")]
		public static void FadeOutOldSoundGroupVoices(string sType, float minimumPlayTime, float fadeTime)
		{
		}

		[Token(Token = "0x60002FB")]
		[Address(RVA = "0x181AC84", Offset = "0x181AC84", VA = "0x181AC84")]
		public static void StopOldSoundGroupVoices(string sType, float minimumPlayTime)
		{
		}

		[Token(Token = "0x60002FC")]
		[Address(RVA = "0x181A794", Offset = "0x181A794", VA = "0x181A794")]
		public static void GlideSoundGroupByPitch(string sType, float pitchAddition, float glideTime, [Optional] Action completionCallback)
		{
		}

		[Token(Token = "0x60002FD")]
		[Address(RVA = "0x180F5E8", Offset = "0x180F5E8", VA = "0x180F5E8")]
		public static void DeleteSoundGroup(string sType)
		{
		}

		[Token(Token = "0x60002FE")]
		[Address(RVA = "0x181034C", Offset = "0x181034C", VA = "0x181034C")]
		public static Transform CreateSoundGroup(DynamicSoundGroup aGroup, string creatorObjectName, bool errorOnExisting = true)
		{
			return null;
		}

		[Token(Token = "0x60002FF")]
		[Address(RVA = "0x182ECF8", Offset = "0x182ECF8", VA = "0x182ECF8")]
		public static float GetGroupVolume(string sType)
		{
			return default(float);
		}

		[Token(Token = "0x6000300")]
		[Address(RVA = "0x1827D60", Offset = "0x1827D60", VA = "0x1827D60")]
		public static void SetGroupVolume(string sType, float volumeLevel)
		{
		}

		[Token(Token = "0x6000301")]
		[Address(RVA = "0x1819554", Offset = "0x1819554", VA = "0x1819554")]
		public static void MuteGroup(string sType, bool shouldCheckMuteStatus = true)
		{
		}

		[Token(Token = "0x6000302")]
		[Address(RVA = "0x1819C18", Offset = "0x1819C18", VA = "0x1819C18")]
		public static void UnmuteGroup(string sType, bool shouldCheckMuteStatus = true)
		{
		}

		[Token(Token = "0x6000303")]
		[Address(RVA = "0x1825970", Offset = "0x1825970", VA = "0x1825970")]
		private static void AddRuntimeGroupInfo(string groupName, AudioGroupInfo groupInfo)
		{
		}

		[Token(Token = "0x6000304")]
		[Address(RVA = "0x182F010", Offset = "0x182F010", VA = "0x182F010")]
		private static void FireAudioSourcesNumberChangedEvent()
		{
		}

		[Token(Token = "0x6000305")]
		[Address(RVA = "0x182EEB4", Offset = "0x182EEB4", VA = "0x182EEB4")]
		public static void TrackRuntimeAudioSources(List<AudioSource> sources)
		{
		}

		[Token(Token = "0x6000306")]
		[Address(RVA = "0x1825F68", Offset = "0x1825F68", VA = "0x1825F68")]
		public static void StopTrackingRuntimeAudioSources(List<AudioSource> sources)
		{
		}

		[Token(Token = "0x6000307")]
		[Address(RVA = "0x182EAC8", Offset = "0x182EAC8", VA = "0x182EAC8")]
		private static void RemoveRuntimeGroupInfo(string groupName)
		{
		}

		[Token(Token = "0x6000308")]
		[Address(RVA = "0x182F0B8", Offset = "0x182F0B8", VA = "0x182F0B8")]
		private static void RescanChildren(MasterAudioGroup group)
		{
		}

		[Token(Token = "0x6000309")]
		[Address(RVA = "0x182EDB0", Offset = "0x182EDB0", VA = "0x182EDB0")]
		private static void SetGroupMuteStatus(MasterAudioGroup aGroup, string sType, bool isMute)
		{
		}

		[Token(Token = "0x600030A")]
		[Address(RVA = "0x18197D8", Offset = "0x18197D8", VA = "0x18197D8")]
		public static void SoloGroup(string sType, bool shouldCheckMuteStatus = true)
		{
		}

		[Token(Token = "0x600030B")]
		[Address(RVA = "0x180FCF8", Offset = "0x180FCF8", VA = "0x180FCF8")]
		public static void SilenceOrUnsilenceGroupsFromSoloChange()
		{
		}

		[Token(Token = "0x600030C")]
		[Address(RVA = "0x182F3CC", Offset = "0x182F3CC", VA = "0x182F3CC")]
		private static void UnsilenceNonSoloedGroups()
		{
		}

		[Token(Token = "0x600030D")]
		[Address(RVA = "0x182F544", Offset = "0x182F544", VA = "0x182F544")]
		private static void UnsilenceGroup(string sType)
		{
		}

		[Token(Token = "0x600030E")]
		[Address(RVA = "0x182F24C", Offset = "0x182F24C", VA = "0x182F24C")]
		private static void SilenceNonSoloedGroups()
		{
		}

		[Token(Token = "0x600030F")]
		[Address(RVA = "0x182F674", Offset = "0x182F674", VA = "0x182F674")]
		private static void SilenceGroup(string sType)
		{
		}

		[Token(Token = "0x6000310")]
		[Address(RVA = "0x1819E6C", Offset = "0x1819E6C", VA = "0x1819E6C")]
		public static void UnsoloGroup(string sType, bool shouldCheckMuteStatus = true)
		{
		}

		[Token(Token = "0x6000311")]
		[Address(RVA = "0x1803F28", Offset = "0x1803F28", VA = "0x1803F28")]
		public static MasterAudioGroup GrabGroup(string sType, bool logIfMissing = true)
		{
			return null;
		}

		[Token(Token = "0x6000312")]
		[Address(RVA = "0x182F7A4", Offset = "0x182F7A4", VA = "0x182F7A4")]
		public static int VoicesForGroup(string sType)
		{
			return default(int);
		}

		[Token(Token = "0x6000313")]
		[Address(RVA = "0x182F884", Offset = "0x182F884", VA = "0x182F884")]
		public static Transform FindGroupTransform(string sType)
		{
			return null;
		}

		[Token(Token = "0x6000314")]
		[Address(RVA = "0x182FA84", Offset = "0x182FA84", VA = "0x182FA84")]
		public static List<AudioInfo> GetAllVariationsOfGroup(string sType, bool logIfMissing = true)
		{
			return null;
		}

		[Token(Token = "0x6000315")]
		[Address(RVA = "0x182FBC4", Offset = "0x182FBC4", VA = "0x182FBC4")]
		public static AudioGroupInfo GetGroupInfo(string sType)
		{
			return null;
		}

		[Token(Token = "0x6000316")]
		[Address(RVA = "0x182FC94", Offset = "0x182FC94", VA = "0x182FC94")]
		public static void SubscribeToLastVariationPlayed(string sType, Action finishedCallback)
		{
		}

		[Token(Token = "0x6000317")]
		[Address(RVA = "0x182FDE0", Offset = "0x182FDE0", VA = "0x182FDE0")]
		public static void UnsubscribeFromLastVariationPlayed(string sType)
		{
		}

		[Token(Token = "0x6000318")]
		[Address(RVA = "0x182FEC4", Offset = "0x182FEC4", VA = "0x182FEC4")]
		public void SetSpatialBlendForMixer()
		{
		}

		[Token(Token = "0x6000319")]
		[Address(RVA = "0x181DBC0", Offset = "0x181DBC0", VA = "0x181DBC0")]
		public static void PauseMixer()
		{
		}

		[Token(Token = "0x600031A")]
		[Address(RVA = "0x181DD74", Offset = "0x181DD74", VA = "0x181DD74")]
		public static void UnpauseMixer()
		{
		}

		[Token(Token = "0x600031B")]
		[Address(RVA = "0x181DF28", Offset = "0x181DF28", VA = "0x181DF28")]
		public static void StopMixer()
		{
		}

		[Token(Token = "0x600031C")]
		[Address(RVA = "0x182FFEC", Offset = "0x182FFEC", VA = "0x182FFEC")]
		public static void UnsubscribeFromAllVariations()
		{
		}

		[Token(Token = "0x600031D")]
		[Address(RVA = "0x181E2B8", Offset = "0x181E2B8", VA = "0x181E2B8")]
		public static void StopEverything()
		{
		}

		[Token(Token = "0x600031E")]
		[Address(RVA = "0x181E1F8", Offset = "0x181E1F8", VA = "0x181E1F8")]
		public static void PauseEverything()
		{
		}

		[Token(Token = "0x600031F")]
		[Address(RVA = "0x181E258", Offset = "0x181E258", VA = "0x181E258")]
		public static void UnpauseEverything()
		{
		}

		[Token(Token = "0x6000320")]
		[Address(RVA = "0x181E130", Offset = "0x181E130", VA = "0x181E130")]
		public static void MuteEverything()
		{
		}

		[Token(Token = "0x6000321")]
		[Address(RVA = "0x181E194", Offset = "0x181E194", VA = "0x181E194")]
		public static void UnmuteEverything()
		{
		}

		[Token(Token = "0x6000322")]
		[Address(RVA = "0x1830544", Offset = "0x1830544", VA = "0x1830544")]
		public static List<string> ListOfAudioClipsInGroupsEditTime()
		{
			return null;
		}

		[Token(Token = "0x6000323")]
		[Address(RVA = "0x182800C", Offset = "0x182800C", VA = "0x182800C")]
		private static int GetBusIndex(string busName, bool alertMissing)
		{
			return default(int);
		}

		[Token(Token = "0x6000324")]
		[Address(RVA = "0x182DDCC", Offset = "0x182DDCC", VA = "0x182DDCC")]
		private static GroupBus GetBusByIndex(int busIndex)
		{
			return null;
		}

		[Token(Token = "0x6000325")]
		[Address(RVA = "0x181C68C", Offset = "0x181C68C", VA = "0x181C68C")]
		public static void ChangeBusPitch(string busName, float pitch)
		{
		}

		[Token(Token = "0x6000326")]
		[Address(RVA = "0x181BF24", Offset = "0x181BF24", VA = "0x181BF24")]
		public static void MuteBus(string busName)
		{
		}

		[Token(Token = "0x6000327")]
		[Address(RVA = "0x181C0E4", Offset = "0x181C0E4", VA = "0x181C0E4")]
		public static void UnmuteBus(string busName, bool shouldCheckMuteStatus = true)
		{
		}

		[Token(Token = "0x6000328")]
		[Address(RVA = "0x181C260", Offset = "0x181C260", VA = "0x181C260")]
		public static void ToggleMuteBus(string busName)
		{
		}

		[Token(Token = "0x6000329")]
		[Address(RVA = "0x181BAFC", Offset = "0x181BAFC", VA = "0x181BAFC")]
		public static void PauseBus(string busName)
		{
		}

		[Token(Token = "0x600032A")]
		[Address(RVA = "0x181C350", Offset = "0x181C350", VA = "0x181C350")]
		public static void SoloBus(string busName)
		{
		}

		[Token(Token = "0x600032B")]
		[Address(RVA = "0x181C510", Offset = "0x181C510", VA = "0x181C510")]
		public static void UnsoloBus(string busName, bool shouldCheckMuteStatus = true)
		{
		}

		[Token(Token = "0x600032C")]
		[Address(RVA = "0x18307B4", Offset = "0x18307B4", VA = "0x18307B4")]
		public static void RouteBusToUnityMixerGroup(string busName, AudioMixerGroup mixerGroup)
		{
		}

		[Token(Token = "0x600032D")]
		[Address(RVA = "0x182A2B0", Offset = "0x182A2B0", VA = "0x182A2B0")]
		private static void StopOldestSoundOnBus(GroupBus bus)
		{
		}

		[Token(Token = "0x600032E")]
		[Address(RVA = "0x181BC58", Offset = "0x181BC58", VA = "0x181BC58")]
		public static void StopBus(string busName)
		{
		}

		[Token(Token = "0x600032F")]
		[Address(RVA = "0x181BDE8", Offset = "0x181BDE8", VA = "0x181BDE8")]
		public static void UnpauseBus(string busName)
		{
		}

		[Token(Token = "0x6000330")]
		[Address(RVA = "0x18100E4", Offset = "0x18100E4", VA = "0x18100E4")]
		public static bool CreateBus(string busName, bool errorOnExisting = true, bool isTemporary = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000331")]
		[Address(RVA = "0x180F458", Offset = "0x180F458", VA = "0x180F458")]
		public static void DeleteBusByName(string busName)
		{
		}

		[Token(Token = "0x6000332")]
		[Address(RVA = "0x183090C", Offset = "0x183090C", VA = "0x183090C")]
		public static void DeleteBusByIndex(int busIndex)
		{
		}

		[Token(Token = "0x6000333")]
		[Address(RVA = "0x182ADF8", Offset = "0x182ADF8", VA = "0x182ADF8")]
		public static float GetBusVolume(MasterAudioGroup maGroup)
		{
			return default(float);
		}

		[Token(Token = "0x6000334")]
		[Address(RVA = "0x181B104", Offset = "0x181B104", VA = "0x181B104")]
		public static void FadeBusToVolume(string busName, float newVolume, float fadeTime, [Optional] Action completionCallback, bool willStopAfterFade = false, bool willResetVolumeAfterFade = false)
		{
		}

		[Token(Token = "0x6000335")]
		[Address(RVA = "0x181C9D4", Offset = "0x181C9D4", VA = "0x181C9D4")]
		public static void FadeOutOldBusVoices(string busName, float minimumPlayTime, float fadeTime)
		{
		}

		[Token(Token = "0x6000336")]
		[Address(RVA = "0x181C808", Offset = "0x181C808", VA = "0x181C808")]
		public static void StopOldBusVoices(string busName, float minimumPlayTime)
		{
		}

		[Token(Token = "0x6000337")]
		[Address(RVA = "0x181B4D4", Offset = "0x181B4D4", VA = "0x181B4D4")]
		public static void GlideBusByPitch(string busName, float pitchAddition, float glideTime, [Optional] Action completionCallback)
		{
		}

		[Token(Token = "0x6000338")]
		[Address(RVA = "0x1825AC4", Offset = "0x1825AC4", VA = "0x1825AC4")]
		public static void SetBusVolumeByName(string busName, float newVolume)
		{
		}

		[Token(Token = "0x6000339")]
		[Address(RVA = "0x1830BC8", Offset = "0x1830BC8", VA = "0x1830BC8")]
		private static void RecalculateGroupVolumes(AudioGroupInfo aGroup, GroupBus bus)
		{
		}

		[Token(Token = "0x600033A")]
		[Address(RVA = "0x182DE6C", Offset = "0x182DE6C", VA = "0x182DE6C")]
		private static void SetBusVolume(GroupBus bus, float newVolume)
		{
		}

		[Token(Token = "0x600033B")]
		[Address(RVA = "0x180FFF4", Offset = "0x180FFF4", VA = "0x180FFF4")]
		public static GroupBus GrabBusByName(string busName)
		{
			return null;
		}

		[Token(Token = "0x600033C")]
		[Address(RVA = "0x180AACC", Offset = "0x180AACC", VA = "0x180AACC")]
		public static void PauseBusOfTransform(Transform sourceTrans, string busName)
		{
		}

		[Token(Token = "0x600033D")]
		[Address(RVA = "0x180B708", Offset = "0x180B708", VA = "0x180B708")]
		public static void UnpauseBusOfTransform(Transform sourceTrans, string busName)
		{
		}

		[Token(Token = "0x600033E")]
		[Address(RVA = "0x180B1C0", Offset = "0x180B1C0", VA = "0x180B1C0")]
		public static void StopBusOfTransform(Transform sourceTrans, string busName)
		{
		}

		[Token(Token = "0x600033F")]
		[Address(RVA = "0x18113F8", Offset = "0x18113F8", VA = "0x18113F8")]
		public static void AddSoundGroupToDuckList(string sType, float riseVolumeStart, float duckedVolCut, float unduckTime, bool isTemporary = false)
		{
		}

		[Token(Token = "0x6000340")]
		[Address(RVA = "0x180F4F8", Offset = "0x180F4F8", VA = "0x180F4F8")]
		public static void RemoveSoundGroupFromDuckList(string sType)
		{
		}

		[Token(Token = "0x6000341")]
		[Address(RVA = "0x1830D80", Offset = "0x1830D80", VA = "0x1830D80")]
		public static Playlist GrabPlaylist(string playlistName, bool logErrorIfNotFound = true)
		{
			return null;
		}

		[Token(Token = "0x6000342")]
		[Address(RVA = "0x1830F64", Offset = "0x1830F64", VA = "0x1830F64")]
		public static void ChangePlaylistPitch(string playlistName, float pitch, [Optional] string songName)
		{
		}

		[Token(Token = "0x6000343")]
		[Address(RVA = "0x1831080", Offset = "0x1831080", VA = "0x1831080")]
		public static void MutePlaylist()
		{
		}

		[Token(Token = "0x6000344")]
		[Address(RVA = "0x1817660", Offset = "0x1817660", VA = "0x1817660")]
		public static void MutePlaylist(string playlistControllerName)
		{
		}

		[Token(Token = "0x6000345")]
		[Address(RVA = "0x18175F0", Offset = "0x18175F0", VA = "0x18175F0")]
		public static void MuteAllPlaylists()
		{
		}

		[Token(Token = "0x6000346")]
		[Address(RVA = "0x18311AC", Offset = "0x18311AC", VA = "0x18311AC")]
		private static void MutePlaylists(List<PlaylistController> playlists)
		{
		}

		[Token(Token = "0x6000347")]
		[Address(RVA = "0x1831360", Offset = "0x1831360", VA = "0x1831360")]
		public static void UnmutePlaylist()
		{
		}

		[Token(Token = "0x6000348")]
		[Address(RVA = "0x1817874", Offset = "0x1817874", VA = "0x1817874")]
		public static void UnmutePlaylist(string playlistControllerName)
		{
		}

		[Token(Token = "0x6000349")]
		[Address(RVA = "0x1817804", Offset = "0x1817804", VA = "0x1817804")]
		public static void UnmuteAllPlaylists()
		{
		}

		[Token(Token = "0x600034A")]
		[Address(RVA = "0x18313C8", Offset = "0x18313C8", VA = "0x18313C8")]
		private static void UnmutePlaylists(List<PlaylistController> playlists)
		{
		}

		[Token(Token = "0x600034B")]
		[Address(RVA = "0x183149C", Offset = "0x183149C", VA = "0x183149C")]
		public static void ToggleMutePlaylist()
		{
		}

		[Token(Token = "0x600034C")]
		[Address(RVA = "0x1817A88", Offset = "0x1817A88", VA = "0x1817A88")]
		public static void ToggleMutePlaylist(string playlistControllerName)
		{
		}

		[Token(Token = "0x600034D")]
		[Address(RVA = "0x1817A18", Offset = "0x1817A18", VA = "0x1817A18")]
		public static void ToggleMuteAllPlaylists()
		{
		}

		[Token(Token = "0x600034E")]
		[Address(RVA = "0x1831504", Offset = "0x1831504", VA = "0x1831504")]
		private static void ToggleMutePlaylists(List<PlaylistController> playlists)
		{
		}

		[Token(Token = "0x600034F")]
		[Address(RVA = "0x1831594", Offset = "0x1831594", VA = "0x1831594")]
		public static void PausePlaylist()
		{
		}

		[Token(Token = "0x6000350")]
		[Address(RVA = "0x18183AC", Offset = "0x18183AC", VA = "0x18183AC")]
		public static void PausePlaylist(string playlistControllerName)
		{
		}

		[Token(Token = "0x6000351")]
		[Address(RVA = "0x181833C", Offset = "0x181833C", VA = "0x181833C")]
		public static void PauseAllPlaylists()
		{
		}

		[Token(Token = "0x6000352")]
		[Address(RVA = "0x18315FC", Offset = "0x18315FC", VA = "0x18315FC")]
		private static void PausePlaylists(List<PlaylistController> playlists)
		{
		}

		[Token(Token = "0x6000353")]
		[Address(RVA = "0x183168C", Offset = "0x183168C", VA = "0x183168C")]
		public static void UnpausePlaylist()
		{
		}

		[Token(Token = "0x6000354")]
		[Address(RVA = "0x18187D4", Offset = "0x18187D4", VA = "0x18187D4")]
		public static void UnpausePlaylist(string playlistControllerName)
		{
		}

		[Token(Token = "0x6000355")]
		[Address(RVA = "0x1818764", Offset = "0x1818764", VA = "0x1818764")]
		public static void UnpauseAllPlaylists()
		{
		}

		[Token(Token = "0x6000356")]
		[Address(RVA = "0x18316F4", Offset = "0x18316F4", VA = "0x18316F4")]
		private static void UnpausePlaylists(List<PlaylistController> controllers)
		{
		}

		[Token(Token = "0x6000357")]
		[Address(RVA = "0x1831784", Offset = "0x1831784", VA = "0x1831784")]
		public static void StopPlaylist()
		{
		}

		[Token(Token = "0x6000358")]
		[Address(RVA = "0x18185C0", Offset = "0x18185C0", VA = "0x18185C0")]
		public static void StopPlaylist(string playlistControllerName)
		{
		}

		[Token(Token = "0x6000359")]
		[Address(RVA = "0x1818550", Offset = "0x1818550", VA = "0x1818550")]
		public static void StopAllPlaylists()
		{
		}

		[Token(Token = "0x600035A")]
		[Address(RVA = "0x18317EC", Offset = "0x18317EC", VA = "0x18317EC")]
		private static void StopPlaylists(List<PlaylistController> playlists)
		{
		}

		[Token(Token = "0x600035B")]
		[Address(RVA = "0x1831880", Offset = "0x1831880", VA = "0x1831880")]
		public static void TriggerNextPlaylistClip()
		{
		}

		[Token(Token = "0x600035C")]
		[Address(RVA = "0x1818198", Offset = "0x1818198", VA = "0x1818198")]
		public static void TriggerNextPlaylistClip(string playlistControllerName)
		{
		}

		[Token(Token = "0x600035D")]
		[Address(RVA = "0x1818128", Offset = "0x1818128", VA = "0x1818128")]
		public static void TriggerNextClipAllPlaylists()
		{
		}

		[Token(Token = "0x600035E")]
		[Address(RVA = "0x18318E8", Offset = "0x18318E8", VA = "0x18318E8")]
		private static void NextPlaylistClips(List<PlaylistController> playlists)
		{
		}

		[Token(Token = "0x600035F")]
		[Address(RVA = "0x1831978", Offset = "0x1831978", VA = "0x1831978")]
		public static void TriggerRandomPlaylistClip()
		{
		}

		[Token(Token = "0x6000360")]
		[Address(RVA = "0x1817F84", Offset = "0x1817F84", VA = "0x1817F84")]
		public static void TriggerRandomPlaylistClip(string playlistControllerName)
		{
		}

		[Token(Token = "0x6000361")]
		[Address(RVA = "0x1817F14", Offset = "0x1817F14", VA = "0x1817F14")]
		public static void TriggerRandomClipAllPlaylists()
		{
		}

		[Token(Token = "0x6000362")]
		[Address(RVA = "0x18319E0", Offset = "0x18319E0", VA = "0x18319E0")]
		private static void RandomPlaylistClips(List<PlaylistController> playlists)
		{
		}

		[Token(Token = "0x6000363")]
		[Address(RVA = "0x1831A70", Offset = "0x1831A70", VA = "0x1831A70")]
		public static void RestartPlaylist()
		{
		}

		[Token(Token = "0x6000364")]
		[Address(RVA = "0x1816A6C", Offset = "0x1816A6C", VA = "0x1816A6C")]
		public static void RestartPlaylist(string playlistControllerName)
		{
		}

		[Token(Token = "0x6000365")]
		[Address(RVA = "0x18169FC", Offset = "0x18169FC", VA = "0x18169FC")]
		public static void RestartAllPlaylists()
		{
		}

		[Token(Token = "0x6000366")]
		[Address(RVA = "0x1831AD8", Offset = "0x1831AD8", VA = "0x1831AD8")]
		private static void RestartPlaylists(List<PlaylistController> playlists)
		{
		}

		[Token(Token = "0x6000367")]
		[Address(RVA = "0x1831B68", Offset = "0x1831B68", VA = "0x1831B68")]
		public static void StartPlaylist(string playlistName)
		{
		}

		[Token(Token = "0x6000368")]
		[Address(RVA = "0x1816C20", Offset = "0x1816C20", VA = "0x1816C20")]
		public static void StartPlaylist(string playlistControllerName, string playlistName)
		{
		}

		[Token(Token = "0x6000369")]
		[Address(RVA = "0x1816F60", Offset = "0x1816F60", VA = "0x1816F60")]
		public static void StopLoopingAllCurrentSongs()
		{
		}

		[Token(Token = "0x600036A")]
		[Address(RVA = "0x1831C68", Offset = "0x1831C68", VA = "0x1831C68")]
		public static void StopLoopingCurrentSong()
		{
		}

		[Token(Token = "0x600036B")]
		[Address(RVA = "0x1816FD0", Offset = "0x1816FD0", VA = "0x1816FD0")]
		public static void StopLoopingCurrentSong(string playlistControllerName)
		{
		}

		[Token(Token = "0x600036C")]
		[Address(RVA = "0x1831BD8", Offset = "0x1831BD8", VA = "0x1831BD8")]
		private static void StopLoopingCurrentSongs(List<PlaylistController> playlistControllers)
		{
		}

		[Token(Token = "0x600036D")]
		[Address(RVA = "0x1817184", Offset = "0x1817184", VA = "0x1817184")]
		public static void StopAllPlaylistsAfterCurrentSongs()
		{
		}

		[Token(Token = "0x600036E")]
		[Address(RVA = "0x1831D60", Offset = "0x1831D60", VA = "0x1831D60")]
		public static void StopPlaylistAfterCurrentSong()
		{
		}

		[Token(Token = "0x600036F")]
		[Address(RVA = "0x18171F4", Offset = "0x18171F4", VA = "0x18171F4")]
		public static void StopPlaylistAfterCurrentSong(string playlistControllerName)
		{
		}

		[Token(Token = "0x6000370")]
		[Address(RVA = "0x1831CD0", Offset = "0x1831CD0", VA = "0x1831CD0")]
		private static void StopPlaylistAfterCurrentSongs(List<PlaylistController> playlistControllers)
		{
		}

		[Token(Token = "0x6000371")]
		[Address(RVA = "0x1831DC8", Offset = "0x1831DC8", VA = "0x1831DC8")]
		public static void QueuePlaylistClip(string clipName)
		{
		}

		[Token(Token = "0x6000372")]
		[Address(RVA = "0x1817DA0", Offset = "0x1817DA0", VA = "0x1817DA0")]
		public static void QueuePlaylistClip(string playlistControllerName, string clipName)
		{
		}

		[Token(Token = "0x6000373")]
		[Address(RVA = "0x1831E38", Offset = "0x1831E38", VA = "0x1831E38")]
		public static bool TriggerPlaylistClip(string clipName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000374")]
		[Address(RVA = "0x1817C2C", Offset = "0x1817C2C", VA = "0x1817C2C")]
		public static bool TriggerPlaylistClip(string playlistControllerName, string clipName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000375")]
		[Address(RVA = "0x1831EA8", Offset = "0x1831EA8", VA = "0x1831EA8")]
		public static void ChangePlaylistByName(string playlistName, bool playFirstClip = true)
		{
		}

		[Token(Token = "0x6000376")]
		[Address(RVA = "0x1816DE8", Offset = "0x1816DE8", VA = "0x1816DE8")]
		public static void ChangePlaylistByName(string playlistControllerName, string playlistName, bool playFirstClip = true)
		{
		}

		[Token(Token = "0x6000377")]
		[Address(RVA = "0x1831F28", Offset = "0x1831F28", VA = "0x1831F28")]
		public static void FadePlaylistToVolume(float targetVolume, float fadeTime)
		{
		}

		[Token(Token = "0x6000378")]
		[Address(RVA = "0x1817430", Offset = "0x1817430", VA = "0x1817430")]
		public static void FadePlaylistToVolume(string playlistControllerName, float targetVolume, float fadeTime)
		{
		}

		[Token(Token = "0x6000379")]
		[Address(RVA = "0x18173A8", Offset = "0x18173A8", VA = "0x18173A8")]
		public static void FadeAllPlaylistsToVolume(float targetVolume, float fadeTime)
		{
		}

		[Token(Token = "0x600037A")]
		[Address(RVA = "0x1831FA8", Offset = "0x1831FA8", VA = "0x1831FA8")]
		private static void FadePlaylists(List<PlaylistController> playlists, float targetVolume, float fadeTime)
		{
		}

		[Token(Token = "0x600037B")]
		[Address(RVA = "0x1811A90", Offset = "0x1811A90", VA = "0x1811A90")]
		public static void CreatePlaylist(Playlist playlist, bool errorOnDuplicate)
		{
		}

		[Token(Token = "0x600037C")]
		[Address(RVA = "0x180FB44", Offset = "0x180FB44", VA = "0x180FB44")]
		public static void DeletePlaylist(string playlistName)
		{
		}

		[Token(Token = "0x600037D")]
		[Address(RVA = "0x18320E8", Offset = "0x18320E8", VA = "0x18320E8")]
		public static void AddSongToPlaylist(string playlistName, AudioClip song, bool loopSong = false, float songPitch = 1f, float songVolume = 1f)
		{
		}

		[Token(Token = "0x6000380")]
		[Address(RVA = "0x183226C", Offset = "0x183226C", VA = "0x183226C")]
		public static void AudioListenerChanged(AudioListener listener)
		{
		}

		[Token(Token = "0x6000381")]
		[Address(RVA = "0x1811C30", Offset = "0x1811C30", VA = "0x1811C30")]
		public static void FireCustomEventNextFrame(string customEventName, Transform eventOrigin)
		{
		}

		[Token(Token = "0x6000382")]
		[Address(RVA = "0x181E8E8", Offset = "0x181E8E8", VA = "0x181E8E8")]
		public static void AddCustomEventReceiver(ICustomEventReceiver receiver, Transform receiverTrans)
		{
		}

		[Token(Token = "0x6000383")]
		[Address(RVA = "0x181ED0C", Offset = "0x181ED0C", VA = "0x181ED0C")]
		public static void RemoveCustomEventReceiver(ICustomEventReceiver receiver)
		{
		}

		[Token(Token = "0x6000384")]
		[Address(RVA = "0x18323A8", Offset = "0x18323A8", VA = "0x18323A8")]
		public static List<Transform> ReceiversForEvent(string customEventName)
		{
			return null;
		}

		[Token(Token = "0x6000385")]
		[Address(RVA = "0x181154C", Offset = "0x181154C", VA = "0x181154C")]
		public static CustomEventCategory CreateCustomEventCategoryIfNotThere(string categoryName, bool isTemporary)
		{
			return null;
		}

		[Token(Token = "0x6000386")]
		[Address(RVA = "0x1811754", Offset = "0x1811754", VA = "0x1811754")]
		public static void CreateCustomEvent(string customEventName, CustomEventReceiveMode eventReceiveMode, float distanceThreshold, EventReceiveFilter receiveFilter, int filterModeQty, string categoryName = "", bool isTemporary = false, bool errorOnDuplicate = true)
		{
		}

		[Token(Token = "0x6000387")]
		[Address(RVA = "0x180F980", Offset = "0x180F980", VA = "0x180F980")]
		public static void DeleteCustomEvent(string customEventName)
		{
		}

		[Token(Token = "0x6000388")]
		[Address(RVA = "0x1832634", Offset = "0x1832634", VA = "0x1832634")]
		public static CustomEvent GetCustomEventByName(string customEventName)
		{
			return null;
		}

		[Token(Token = "0x6000389")]
		[Address(RVA = "0x181CBBC", Offset = "0x181CBBC", VA = "0x181CBBC")]
		public static void FireCustomEvent(string customEventName, Transform originObject, bool logDupe = true)
		{
		}

		[Token(Token = "0x600038A")]
		[Address(RVA = "0x181E5D4", Offset = "0x181E5D4", VA = "0x181E5D4")]
		public static bool CustomEventExists(string customEventName)
		{
			return default(bool);
		}

		[Token(Token = "0x600038B")]
		[Address(RVA = "0x183274C", Offset = "0x183274C", VA = "0x183274C")]
		private static List<ICustomEventReceiver> GetChildReceivers(Transform origin, string eventName, bool includeSelf)
		{
			return null;
		}

		[Token(Token = "0x600038C")]
		[Address(RVA = "0x183289C", Offset = "0x183289C", VA = "0x183289C")]
		private static List<ICustomEventReceiver> GetParentReceivers(Transform origin, string eventName, bool includeSelf)
		{
			return null;
		}

		[Token(Token = "0x600038D")]
		[Address(RVA = "0x18329EC", Offset = "0x18329EC", VA = "0x18329EC")]
		private static List<ICustomEventReceiver> FilterOutSelf(List<ICustomEventReceiver> sourceList, Transform origin)
		{
			return null;
		}

		[Token(Token = "0x600038E")]
		[Address(RVA = "0x1829EF8", Offset = "0x1829EF8", VA = "0x1829EF8")]
		private static bool LoggingEnabledForGroup(MasterAudioGroup grp)
		{
			return default(bool);
		}

		[Token(Token = "0x600038F")]
		[Address(RVA = "0x182A008", Offset = "0x182A008", VA = "0x182A008")]
		private static void LogMessage(string message)
		{
		}

		[Token(Token = "0x6000394")]
		[Address(RVA = "0x18053E0", Offset = "0x18053E0", VA = "0x18053E0")]
		public static void LogWarning(string msg)
		{
		}

		[Token(Token = "0x6000395")]
		[Address(RVA = "0x1805238", Offset = "0x1805238", VA = "0x1805238")]
		public static void LogWarningIfNeverLogged(string msg, int errorNumber)
		{
		}

		[Token(Token = "0x6000396")]
		[Address(RVA = "0x18083EC", Offset = "0x18083EC", VA = "0x18083EC")]
		public static void LogError(string msg)
		{
		}

		[Token(Token = "0x6000397")]
		[Address(RVA = "0x1832DD4", Offset = "0x1832DD4", VA = "0x1832DD4")]
		public static void LogNoPlaylist(string playlistControllerName, string methodName)
		{
		}

		[Token(Token = "0x6000398")]
		[Address(RVA = "0x18310E8", Offset = "0x18310E8", VA = "0x18310E8")]
		private static bool IsOkToCallOnlyPlaylistMethod(List<PlaylistController> pcs, string methodName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000399")]
		[Address(RVA = "0x180368C", Offset = "0x180368C", VA = "0x180368C")]
		public static void SetupAmbientNextFrame(AmbientSound ambient)
		{
		}

		[Token(Token = "0x600039A")]
		[Address(RVA = "0x1803C30", Offset = "0x1803C30", VA = "0x1803C30")]
		public static void RemoveDelayedAmbient(AmbientSound ambient)
		{
		}

		[Token(Token = "0x600039B")]
		[Address(RVA = "0x1832FC0", Offset = "0x1832FC0", VA = "0x1832FC0")]
		public static void QueueTransformFollowerForColliderPositionRecalc(TransformFollower follower)
		{
		}

		[Token(Token = "0x600039C")]
		[Address(RVA = "0x18331CC", Offset = "0x18331CC", VA = "0x18331CC")]
		public static void AddToQueuedOcclusionRays(SoundGroupVariationUpdater updater)
		{
		}

		[Token(Token = "0x600039D")]
		[Address(RVA = "0x18333D8", Offset = "0x18333D8", VA = "0x18333D8")]
		public static void AddToOcclusionInRangeSources(GameObject src)
		{
		}

		[Token(Token = "0x600039E")]
		[Address(RVA = "0x18335B4", Offset = "0x18335B4", VA = "0x18335B4")]
		public static void AddToOcclusionOutOfRangeSources(GameObject src)
		{
		}

		[Token(Token = "0x600039F")]
		[Address(RVA = "0x1833918", Offset = "0x1833918", VA = "0x1833918")]
		public static void AddToBlockedOcclusionSources(GameObject src)
		{
		}

		[Token(Token = "0x60003A0")]
		[Address(RVA = "0x1833A80", Offset = "0x1833A80", VA = "0x1833A80")]
		public static bool HasQueuedOcclusionRays()
		{
			return default(bool);
		}

		[Token(Token = "0x60003A1")]
		[Address(RVA = "0x1833AFC", Offset = "0x1833AFC", VA = "0x1833AFC")]
		public static SoundGroupVariationUpdater OldestQueuedOcclusionRay()
		{
			return null;
		}

		[Token(Token = "0x60003A2")]
		[Address(RVA = "0x182D95C", Offset = "0x182D95C", VA = "0x182D95C")]
		public static bool IsOcclusionFreqencyTransitioning(SoundGroupVariation variation)
		{
			return default(bool);
		}

		[Token(Token = "0x60003A3")]
		[Address(RVA = "0x182C60C", Offset = "0x182C60C", VA = "0x182C60C")]
		public static void RemoveFromOcclusionFrequencyTransitioning(SoundGroupVariation variation)
		{
		}

		[Token(Token = "0x60003A4")]
		[Address(RVA = "0x18337B0", Offset = "0x18337B0", VA = "0x18337B0")]
		public static void RemoveFromBlockedOcclusionSources(GameObject src)
		{
		}

		[Token(Token = "0x60003A5")]
		[Address(RVA = "0x1833BDC", Offset = "0x1833BDC", VA = "0x1833BDC")]
		public static void StopTrackingOcclusionForSource(GameObject src)
		{
		}

		[Token(Token = "0x60003A6")]
		[Address(RVA = "0x182B238", Offset = "0x182B238", VA = "0x182B238")]
		private static bool IsLinkedGroupPlay(SoundGroupVariation variation)
		{
			return default(bool);
		}

		[Token(Token = "0x60003A8")]
		[Address(RVA = "0x1833E98", Offset = "0x1833E98", VA = "0x1833E98")]
		public static int RemainingClipsInGroup(string sType)
		{
			return default(int);
		}

		[Token(Token = "0x60003CE")]
		[Address(RVA = "0x182EC88", Offset = "0x182EC88", VA = "0x182EC88")]
		public static void RescanGroupsNow()
		{
		}

		[Token(Token = "0x60003CF")]
		[Address(RVA = "0x1834D2C", Offset = "0x1834D2C", VA = "0x1834D2C")]
		public static void DoneRescanningGroups()
		{
		}

		[Token(Token = "0x60003D3")]
		[Address(RVA = "0x1834F44", Offset = "0x1834F44", VA = "0x1834F44")]
		public static GameObject CreateMasterAudio()
		{
			return null;
		}

		[Token(Token = "0x60003D4")]
		[Address(RVA = "0x18350B0", Offset = "0x18350B0", VA = "0x18350B0")]
		public static GameObject CreatePlaylistController()
		{
			return null;
		}

		[Token(Token = "0x60003D5")]
		[Address(RVA = "0x183521C", Offset = "0x183521C", VA = "0x183521C")]
		public static GameObject CreateDynamicSoundGroupCreator()
		{
			return null;
		}

		[Token(Token = "0x60003D6")]
		[Address(RVA = "0x1835388", Offset = "0x1835388", VA = "0x1835388")]
		public static GameObject CreateSoundGroupOrganizer()
		{
			return null;
		}

		[Token(Token = "0x60003D7")]
		[Address(RVA = "0x18354F4", Offset = "0x18354F4", VA = "0x18354F4")]
		public MasterAudio()
		{
		}
	}
	[Token(Token = "0x2000062")]
	public static class PersistentAudioSettings
	{
		[Token(Token = "0x400039C")]
		public const string SfxVolKey = "MA_sfxVolume";

		[Token(Token = "0x400039D")]
		public const string MusicVolKey = "MA_musicVolume";

		[Token(Token = "0x400039E")]
		public const string SfxMuteKey = "MA_sfxMute";

		[Token(Token = "0x400039F")]
		public const string MusicMuteKey = "MA_musicMute";

		[Token(Token = "0x40003A0")]
		public const string BusVolKey = "MA_BusVolume_";

		[Token(Token = "0x40003A1")]
		public const string GroupVolKey = "MA_GroupVolume_";

		[Token(Token = "0x40003A2")]
		public const string BusKeysKey = "MA_BusKeys";

		[Token(Token = "0x40003A3")]
		public const string GroupKeysKey = "MA_GroupsKeys";

		[Token(Token = "0x40003A4")]
		public const string Separator = ";";

		[Token(Token = "0x1700009D")]
		public static string BusesUpdatedKeys
		{
			[Token(Token = "0x60003DA")]
			[Address(RVA = "0x1DAFAEC", Offset = "0x1DAFAEC", VA = "0x1DAFAEC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60003DB")]
			[Address(RVA = "0x1DAFB60", Offset = "0x1DAFB60", VA = "0x1DAFB60")]
			set
			{
			}
		}

		[Token(Token = "0x1700009E")]
		public static string GroupsUpdatedKeys
		{
			[Token(Token = "0x60003DF")]
			[Address(RVA = "0x1DAFC9C", Offset = "0x1DAFC9C", VA = "0x1DAFC9C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60003E0")]
			[Address(RVA = "0x1DAFD10", Offset = "0x1DAFD10", VA = "0x1DAFD10")]
			set
			{
			}
		}

		[Token(Token = "0x1700009F")]
		public static bool? MixerMuted
		{
			[Token(Token = "0x60003E3")]
			[Address(RVA = "0x1DAFFB0", Offset = "0x1DAFFB0", VA = "0x1DAFFB0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60003E4")]
			[Address(RVA = "0x1DB0040", Offset = "0x1DB0040", VA = "0x1DB0040")]
			set
			{
			}
		}

		[Token(Token = "0x170000A0")]
		public static float? MixerVolume
		{
			[Token(Token = "0x60003E5")]
			[Address(RVA = "0x1DB0174", Offset = "0x1DB0174", VA = "0x1DB0174")]
			get
			{
				return null;
			}
			[Token(Token = "0x60003E6")]
			[Address(RVA = "0x1DB01FC", Offset = "0x1DB01FC", VA = "0x1DB01FC")]
			set
			{
			}
		}

		[Token(Token = "0x170000A1")]
		public static bool? MusicMuted
		{
			[Token(Token = "0x60003E7")]
			[Address(RVA = "0x1DB0324", Offset = "0x1DB0324", VA = "0x1DB0324")]
			get
			{
				return null;
			}
			[Token(Token = "0x60003E8")]
			[Address(RVA = "0x1DB03B4", Offset = "0x1DB03B4", VA = "0x1DB03B4")]
			set
			{
			}
		}

		[Token(Token = "0x170000A2")]
		public static float? MusicVolume
		{
			[Token(Token = "0x60003E9")]
			[Address(RVA = "0x1DB04E8", Offset = "0x1DB04E8", VA = "0x1DB04E8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60003EA")]
			[Address(RVA = "0x1DB0570", Offset = "0x1DB0570", VA = "0x1DB0570")]
			set
			{
			}
		}

		[Token(Token = "0x60003D9")]
		[Address(RVA = "0x1DAF914", Offset = "0x1DAF914", VA = "0x1DAF914")]
		public static void SetBusVolume(string busName, float vol)
		{
		}

		[Token(Token = "0x60003DC")]
		[Address(RVA = "0x1DAFA98", Offset = "0x1DAFA98", VA = "0x1DAFA98")]
		public static string MakeBusKey(string busName)
		{
			return null;
		}

		[Token(Token = "0x60003DD")]
		[Address(RVA = "0x1DAFBB4", Offset = "0x1DAFBB4", VA = "0x1DAFBB4")]
		public static float? GetBusVolume(string busName)
		{
			return null;
		}

		[Token(Token = "0x60003DE")]
		[Address(RVA = "0x1DAFC48", Offset = "0x1DAFC48", VA = "0x1DAFC48")]
		public static string GetGroupKey(string groupName)
		{
			return null;
		}

		[Token(Token = "0x60003E1")]
		[Address(RVA = "0x1DAFD64", Offset = "0x1DAFD64", VA = "0x1DAFD64")]
		public static void SetGroupVolume(string grpName, float vol)
		{
		}

		[Token(Token = "0x60003E2")]
		[Address(RVA = "0x1DAFF1C", Offset = "0x1DAFF1C", VA = "0x1DAFF1C")]
		public static float? GetGroupVolume(string grpName)
		{
			return null;
		}

		[Token(Token = "0x60003EB")]
		[Address(RVA = "0x1DB0698", Offset = "0x1DB0698", VA = "0x1DB0698")]
		public static void RestoreMasterSettings()
		{
		}
	}
	[Token(Token = "0x2000063")]
	public class SoundGroupOrganizer : MonoBehaviour
	{
		[Token(Token = "0x20001FC")]
		public class CustomEventSelection
		{
			[Token(Token = "0x4000A96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public CustomEvent Event;

			[Token(Token = "0x4000A97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool IsSelected;

			[Token(Token = "0x6000F89")]
			[Address(RVA = "0x1DB8A64", Offset = "0x1DB8A64", VA = "0x1DB8A64")]
			public CustomEventSelection(CustomEvent cEvent, bool isSelected)
			{
			}
		}

		[Token(Token = "0x20001FD")]
		public class SoundGroupSelection
		{
			[Token(Token = "0x4000A98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject Go;

			[Token(Token = "0x4000A99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool IsSelected;

			[Token(Token = "0x6000F8A")]
			[Address(RVA = "0x1DB8AB0", Offset = "0x1DB8AB0", VA = "0x1DB8AB0")]
			public SoundGroupSelection(GameObject go, bool isSelected)
			{
			}
		}

		[Token(Token = "0x20001FE")]
		public enum MAItemType
		{
			[Token(Token = "0x4000A9B")]
			SoundGroups,
			[Token(Token = "0x4000A9C")]
			CustomEvents
		}

		[Token(Token = "0x20001FF")]
		public enum TransferMode
		{
			[Token(Token = "0x4000A9E")]
			None,
			[Token(Token = "0x4000A9F")]
			Import,
			[Token(Token = "0x4000AA0")]
			Export
		}

		[Token(Token = "0x40003A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject dynGroupTemplate;

		[Token(Token = "0x40003A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject dynVariationTemplate;

		[Token(Token = "0x40003A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject maGroupTemplate;

		[Token(Token = "0x40003A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject maVariationTemplate;

		[Token(Token = "0x40003A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public MasterAudio.DragGroupMode curDragGroupMode;

		[Token(Token = "0x40003AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public MasterAudio.AudioLocation bulkVariationMode;

		[Token(Token = "0x40003AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public SystemLanguage previewLanguage;

		[Token(Token = "0x40003AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool useTextGroupFilter;

		[Token(Token = "0x40003AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string textGroupFilter;

		[Token(Token = "0x40003AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public TransferMode transMode;

		[Token(Token = "0x40003AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject sourceObject;

		[Token(Token = "0x40003B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<SoundGroupSelection> selectedSourceSoundGroups;

		[Token(Token = "0x40003B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject destObject;

		[Token(Token = "0x40003B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public List<SoundGroupSelection> selectedDestSoundGroups;

		[Token(Token = "0x40003B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public MAItemType itemType;

		[Token(Token = "0x40003B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public List<CustomEventSelection> selectedSourceCustomEvents;

		[Token(Token = "0x40003B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public List<CustomEventSelection> selectedDestCustomEvents;

		[Token(Token = "0x40003B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public List<CustomEvent> customEvents;

		[Token(Token = "0x40003B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public List<CustomEventCategory> customEventCategories;

		[Token(Token = "0x40003B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public string newEventName;

		[Token(Token = "0x40003B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public string newCustomEventCategoryName;

		[Token(Token = "0x40003BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public string addToCustomEventCategoryName;

		[Token(Token = "0x60003EC")]
		[Address(RVA = "0x1DB87EC", Offset = "0x1DB87EC", VA = "0x1DB87EC")]
		private void Awake()
		{
		}

		[Token(Token = "0x60003ED")]
		[Address(RVA = "0x1DB8858", Offset = "0x1DB8858", VA = "0x1DB8858")]
		public SoundGroupOrganizer()
		{
		}
	}
	[Token(Token = "0x2000064")]
	public static class AmbientUtil
	{
		[Token(Token = "0x40003BB")]
		public const string FollowerHolderName = "_Followers";

		[Token(Token = "0x40003BC")]
		public const string ListenerFollowerName = "~ListenerFollower~";

		[Token(Token = "0x40003BD")]
		public const float ListenerFollowerTrigRadius = 0.01f;

		[Token(Token = "0x40003BE")]
		public const int IgnoreRaycastLayerNumber = 2;

		[Token(Token = "0x40003BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Transform _followerHolder;

		[Token(Token = "0x40003C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static ListenerFollower _listenerFollower;

		[Token(Token = "0x40003C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static List<TransformFollower> _transformFollowers;

		[Token(Token = "0x170000A3")]
		public static ListenerFollower ListenerFollower
		{
			[Token(Token = "0x60003F2")]
			[Address(RVA = "0x1805D6C", Offset = "0x1805D6C", VA = "0x1805D6C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A4")]
		public static Transform FollowerHolder
		{
			[Token(Token = "0x60003F3")]
			[Address(RVA = "0x1805690", Offset = "0x1805690", VA = "0x1805690")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A5")]
		public static bool HasListenerFollower
		{
			[Token(Token = "0x60003F6")]
			[Address(RVA = "0x180632C", Offset = "0x180632C", VA = "0x180632C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000A6")]
		public static bool HasListenerFolowerRigidBody
		{
			[Token(Token = "0x60003F7")]
			[Address(RVA = "0x1805488", Offset = "0x1805488", VA = "0x1805488")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60003EE")]
		[Address(RVA = "0x18055E4", Offset = "0x18055E4", VA = "0x18055E4")]
		public static void InitFollowerHolder()
		{
		}

		[Token(Token = "0x60003EF")]
		[Address(RVA = "0x1805344", Offset = "0x1805344", VA = "0x1805344")]
		public static bool InitListenerFollower()
		{
			return default(bool);
		}

		[Token(Token = "0x60003F0")]
		[Address(RVA = "0x1805CE8", Offset = "0x1805CE8", VA = "0x1805CE8")]
		public static void RemoveTransformFollower(TransformFollower follower)
		{
		}

		[Token(Token = "0x60003F1")]
		[Address(RVA = "0x1805490", Offset = "0x1805490", VA = "0x1805490")]
		public static Transform InitAudioSourceFollower(Transform transToFollow, string followerName, string soundGroupName, string variationName, float volume, bool willFollowSource, bool willPositionOnClosestColliderPoint, bool useTopCollider, bool useChildColliders, MasterAudio.AmbientSoundExitMode exitMode, float exitFadeTime, MasterAudio.AmbientSoundReEnterMode reEnterMode, float reEnterFadeTime)
		{
			return null;
		}

		[Token(Token = "0x60003F4")]
		[Address(RVA = "0x1806154", Offset = "0x1806154", VA = "0x1806154")]
		public static void ManualUpdate()
		{
		}

		[Token(Token = "0x60003F5")]
		[Address(RVA = "0x1806250", Offset = "0x1806250", VA = "0x1806250")]
		private static void UpdateListenerFollower()
		{
		}
	}
	[Token(Token = "0x2000065")]
	public static class ArrayListUtil
	{
		[Token(Token = "0x60003F9")]
		[Address(RVA = "0x180643C", Offset = "0x180643C", VA = "0x180643C")]
		public static void SortIntArray(ref List<int> list)
		{
		}

		[Token(Token = "0x60003FA")]
		[Address(RVA = "0x180654C", Offset = "0x180654C", VA = "0x180654C")]
		public static bool IsExcludedChildName(string name)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000066")]
	public static class AudioTransformExtensions
	{
		[Token(Token = "0x60003FB")]
		[Address(RVA = "0x18095C0", Offset = "0x18095C0", VA = "0x18095C0")]
		public static void FadeOutSoundGroupOfTransform(this Transform sourceTrans, string sType, float fadeTime)
		{
		}

		[Token(Token = "0x60003FC")]
		[Address(RVA = "0x1809644", Offset = "0x1809644", VA = "0x1809644")]
		public static List<SoundGroupVariation> GetAllPlayingVariationsOfTransform(this Transform sourceTrans)
		{
			return null;
		}

		[Token(Token = "0x60003FD")]
		[Address(RVA = "0x1809984", Offset = "0x1809984", VA = "0x1809984")]
		public static bool PlaySound3DAtTransformAndForget(this Transform sourceTrans, string sType, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName)
		{
			return default(bool);
		}

		[Token(Token = "0x60003FE")]
		[Address(RVA = "0x1809C14", Offset = "0x1809C14", VA = "0x1809C14")]
		public static PlaySoundResult PlaySound3DAtTransform(this Transform sourceTrans, string sType, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName)
		{
			return null;
		}

		[Token(Token = "0x60003FF")]
		[Address(RVA = "0x1809EF8", Offset = "0x1809EF8", VA = "0x1809EF8")]
		public static bool PlaySound3DFollowTransformAndForget(this Transform sourceTrans, string sType, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000400")]
		[Address(RVA = "0x180A188", Offset = "0x180A188", VA = "0x180A188")]
		public static PlaySoundResult PlaySound3DFollowTransform(this Transform sourceTrans, string sType, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName)
		{
			return null;
		}

		[Token(Token = "0x6000401")]
		[Address(RVA = "0x180A46C", Offset = "0x180A46C", VA = "0x180A46C")]
		public static IEnumerator PlaySound3DAtTransformAndWaitUntilFinished(this Transform sourceTrans, string sType, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay, [Optional] Action completedAction)
		{
			return null;
		}

		[Token(Token = "0x6000402")]
		[Address(RVA = "0x180A62C", Offset = "0x180A62C", VA = "0x180A62C")]
		public static IEnumerator PlaySound3DFollowTransformAndWaitUntilFinished(this Transform sourceTrans, string sType, float volumePercentage = 1f, [Optional] float? pitch, float delaySoundTime = 0f, [Optional] string variationName, [Optional] double? timeToSchedulePlay, [Optional] Action completedAction)
		{
			return null;
		}

		[Token(Token = "0x6000403")]
		[Address(RVA = "0x180A7EC", Offset = "0x180A7EC", VA = "0x180A7EC")]
		public static void PauseAllSoundsOfTransform(Transform sourceTrans)
		{
		}

		[Token(Token = "0x6000404")]
		[Address(RVA = "0x180AA58", Offset = "0x180AA58", VA = "0x180AA58")]
		public static void PauseBusOfTransform(this Transform sourceTrans, string busName)
		{
		}

		[Token(Token = "0x6000405")]
		[Address(RVA = "0x180AC6C", Offset = "0x180AC6C", VA = "0x180AC6C")]
		public static void PauseSoundGroupOfTransform(this Transform sourceTrans, string sType)
		{
		}

		[Token(Token = "0x6000406")]
		[Address(RVA = "0x180AE8C", Offset = "0x180AE8C", VA = "0x180AE8C")]
		public static void StopAllSoundsOfTransform(this Transform sourceTrans)
		{
		}

		[Token(Token = "0x6000407")]
		[Address(RVA = "0x180B14C", Offset = "0x180B14C", VA = "0x180B14C")]
		public static void StopBusOfTransform(this Transform sourceTrans, string busName)
		{
		}

		[Token(Token = "0x6000408")]
		[Address(RVA = "0x180B3B4", Offset = "0x180B3B4", VA = "0x180B3B4")]
		public static void StopSoundGroupOfTransform(this Transform sourceTrans, string sType)
		{
		}

		[Token(Token = "0x6000409")]
		[Address(RVA = "0x180B428", Offset = "0x180B428", VA = "0x180B428")]
		public static void UnpauseAllSoundsOfTransform(this Transform sourceTrans)
		{
		}

		[Token(Token = "0x600040A")]
		[Address(RVA = "0x180B694", Offset = "0x180B694", VA = "0x180B694")]
		public static void UnpauseBusOfTransform(this Transform sourceTrans, string busName)
		{
		}

		[Token(Token = "0x600040B")]
		[Address(RVA = "0x180B8A8", Offset = "0x180B8A8", VA = "0x180B8A8")]
		public static void UnpauseSoundGroupOfTransform(this Transform sourceTrans, string sType)
		{
		}

		[Token(Token = "0x600040C")]
		[Address(RVA = "0x180BAC8", Offset = "0x180BAC8", VA = "0x180BAC8")]
		public static bool IsTransformPlayingSoundGroup(this Transform sourceTrans, string sType)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000067")]
	public class AudioTransformTracker : MonoBehaviour
	{
		[Token(Token = "0x40003C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int _frames;

		[Token(Token = "0x40003C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform _trans;

		[Token(Token = "0x170000A7")]
		public Transform Trans
		{
			[Token(Token = "0x600040D")]
			[Address(RVA = "0x180BCFC", Offset = "0x180BCFC", VA = "0x180BCFC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600040E")]
		[Address(RVA = "0x180BDA0", Offset = "0x180BDA0", VA = "0x180BDA0")]
		private void Update()
		{
		}

		[Token(Token = "0x600040F")]
		[Address(RVA = "0x180BDB0", Offset = "0x180BDB0", VA = "0x180BDB0")]
		public AudioTransformTracker()
		{
		}
	}
	[Token(Token = "0x2000068")]
	public static class AudioUtil
	{
		[Token(Token = "0x40003C4")]
		public const float DefaultMinOcclusionCutoffFrequency = 22000f;

		[Token(Token = "0x40003C5")]
		public const float DefaultMaxOcclusionCutoffFrequency = 0f;

		[Token(Token = "0x40003C6")]
		private const float SemitonePitchChangeAmt = 1.0594635f;

		[Token(Token = "0x170000A8")]
		public static float FixedDeltaTime
		{
			[Token(Token = "0x6000413")]
			[Address(RVA = "0x180BE30", Offset = "0x180BE30", VA = "0x180BE30")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000A9")]
		public static float FrameTime
		{
			[Token(Token = "0x6000414")]
			[Address(RVA = "0x180BE38", Offset = "0x180BE38", VA = "0x180BE38")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000AA")]
		public static float Time
		{
			[Token(Token = "0x6000415")]
			[Address(RVA = "0x180BE40", Offset = "0x180BE40", VA = "0x180BE40")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000AB")]
		public static int FrameCount
		{
			[Token(Token = "0x6000416")]
			[Address(RVA = "0x180BE48", Offset = "0x180BE48", VA = "0x180BE48")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000410")]
		[Address(RVA = "0x180BDB8", Offset = "0x180BDB8", VA = "0x180BDB8")]
		private static float CutoffRange(SoundGroupVariationUpdater updater)
		{
			return default(float);
		}

		[Token(Token = "0x6000411")]
		[Address(RVA = "0x180BE00", Offset = "0x180BE00", VA = "0x180BE00")]
		private static float MaxCutoffFreq(SoundGroupVariationUpdater updater)
		{
			return default(float);
		}

		[Token(Token = "0x6000412")]
		[Address(RVA = "0x180BE18", Offset = "0x180BE18", VA = "0x180BE18")]
		public static float MinCutoffFreq(SoundGroupVariationUpdater updater)
		{
			return default(float);
		}

		[Token(Token = "0x6000417")]
		[Address(RVA = "0x180BE50", Offset = "0x180BE50", VA = "0x180BE50")]
		public static float GetOcclusionCutoffFrequencyByDistanceRatio(float distRatio, SoundGroupVariationUpdater updater)
		{
			return default(float);
		}

		[Token(Token = "0x6000418")]
		[Address(RVA = "0x180BE9C", Offset = "0x180BE9C", VA = "0x180BE9C")]
		public static float GetSemitonesFromPitch(float pitch)
		{
			return default(float);
		}

		[Token(Token = "0x6000419")]
		[Address(RVA = "0x180BF60", Offset = "0x180BF60", VA = "0x180BF60")]
		public static float GetPitchFromSemitones(float semitones)
		{
			return default(float);
		}

		[Token(Token = "0x600041A")]
		[Address(RVA = "0x180C014", Offset = "0x180C014", VA = "0x180C014")]
		public static float GetDbFromFloatVolume(float vol)
		{
			return default(float);
		}

		[Token(Token = "0x600041B")]
		[Address(RVA = "0x180C08C", Offset = "0x180C08C", VA = "0x180C08C")]
		public static float GetFloatVolumeFromDb(float db)
		{
			return default(float);
		}

		[Token(Token = "0x600041C")]
		[Address(RVA = "0x1807300", Offset = "0x1807300", VA = "0x1807300")]
		public static float GetAudioPlayedPercentage(AudioSource source)
		{
			return default(float);
		}

		[Token(Token = "0x600041D")]
		[Address(RVA = "0x180C100", Offset = "0x180C100", VA = "0x180C100")]
		public static bool IsClipPaused(AudioSource source)
		{
			return default(bool);
		}

		[Token(Token = "0x600041E")]
		[Address(RVA = "0x180C148", Offset = "0x180C148", VA = "0x180C148")]
		public static void ClipPlayed(AudioClip clip, GameObject actor)
		{
		}

		[Token(Token = "0x600041F")]
		[Address(RVA = "0x180C1D8", Offset = "0x180C1D8", VA = "0x180C1D8")]
		public static void UnloadNonPreloadedAudioData(AudioClip clip, GameObject actor)
		{
		}

		[Token(Token = "0x6000420")]
		[Address(RVA = "0x1808E80", Offset = "0x1808E80", VA = "0x1808E80")]
		public static bool AudioClipWillPreload(AudioClip clip)
		{
			return default(bool);
		}

		[Token(Token = "0x6000421")]
		[Address(RVA = "0x180C2BC", Offset = "0x180C2BC", VA = "0x180C2BC")]
		public static bool IsClipReadyToPlay(this AudioClip clip)
		{
			return default(bool);
		}

		[Token(Token = "0x6000422")]
		[Address(RVA = "0x180C354", Offset = "0x180C354", VA = "0x180C354")]
		private static float GetPositiveUsablePitch(AudioSource source)
		{
			return default(float);
		}

		[Token(Token = "0x6000423")]
		[Address(RVA = "0x180C380", Offset = "0x180C380", VA = "0x180C380")]
		private static float GetPositiveUsablePitch(float pitch)
		{
			return default(float);
		}

		[Token(Token = "0x6000424")]
		[Address(RVA = "0x180C390", Offset = "0x180C390", VA = "0x180C390")]
		public static float AdjustAudioClipDurationForPitch(float duration, AudioSource sourceWithPitch)
		{
			return default(float);
		}

		[Token(Token = "0x6000425")]
		[Address(RVA = "0x180C3CC", Offset = "0x180C3CC", VA = "0x180C3CC")]
		public static float AdjustAudioClipDurationForPitch(float duration, float pitch)
		{
			return default(float);
		}

		[Token(Token = "0x6000426")]
		[Address(RVA = "0x180C3E0", Offset = "0x180C3E0", VA = "0x180C3E0")]
		public static float AdjustEndLeadTimeForPitch(float duration, AudioSource sourceWithPitch)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000069")]
	public static class CoroutineHelper
	{
		[Token(Token = "0x2000200")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC8894", Offset = "0xFC8894")]
		private sealed class <WaitForActualSeconds>d__0 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000AA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000AA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000AA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float time;

			[Token(Token = "0x4000AA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private float <start>5__2;

			[Token(Token = "0x1700033B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F8E")]
				[Address(RVA = "0x180D09C", Offset = "0x180D09C", VA = "0x180D09C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700033C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F90")]
				[Address(RVA = "0x180D104", Offset = "0x180D104", VA = "0x180D104", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F8B")]
			[Address(RVA = "0x180CF9C", Offset = "0x180CF9C", VA = "0x180CF9C")]
			[DebuggerHidden]
			public <WaitForActualSeconds>d__0(int <>1__state)
			{
			}

			[Token(Token = "0x6000F8C")]
			[Address(RVA = "0x180CFC8", Offset = "0x180CFC8", VA = "0x180CFC8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F8D")]
			[Address(RVA = "0x180CFCC", Offset = "0x180CFCC", VA = "0x180CFCC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F8F")]
			[Address(RVA = "0x180D0A4", Offset = "0x180D0A4", VA = "0x180D0A4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6000427")]
		[Address(RVA = "0x180CF24", Offset = "0x180CF24", VA = "0x180CF24")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xFD5DC0", Offset = "0xFD5DC0")]
		public static IEnumerator WaitForActualSeconds(float time)
		{
			return null;
		}
	}
	[Token(Token = "0x200006A")]
	public static class DTMonoHelper
	{
		[Token(Token = "0x6000428")]
		[Address(RVA = "0x1806090", Offset = "0x1806090", VA = "0x1806090")]
		public static Transform GetChildTransform(this Transform transParent, string childName)
		{
			return null;
		}

		[Token(Token = "0x6000429")]
		[Address(RVA = "0x180D234", Offset = "0x180D234", VA = "0x180D234")]
		public static bool IsActive(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x600042A")]
		[Address(RVA = "0x180D24C", Offset = "0x180D24C", VA = "0x180D24C")]
		public static void SetActive(GameObject go, bool isActive)
		{
		}

		[Token(Token = "0x600042B")]
		[Address(RVA = "0x180595C", Offset = "0x180595C", VA = "0x180595C")]
		public static void DestroyAllChildren(this Transform tran)
		{
		}
	}
	[Token(Token = "0x200006B")]
	public class DelayBetweenSongs : MonoBehaviour
	{
		[Token(Token = "0x2000201")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC88A4", Offset = "0xFC88A4")]
		private sealed class <PlaySongWithDelay>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000AA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000AA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000AA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DelayBetweenSongs <>4__this;

			[Token(Token = "0x1700033D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F94")]
				[Address(RVA = "0x180D69C", Offset = "0x180D69C", VA = "0x180D69C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700033E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F96")]
				[Address(RVA = "0x180D704", Offset = "0x180D704", VA = "0x180D704", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F91")]
			[Address(RVA = "0x180D454", Offset = "0x180D454", VA = "0x180D454")]
			[DebuggerHidden]
			public <PlaySongWithDelay>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6000F92")]
			[Address(RVA = "0x180D4EC", Offset = "0x180D4EC", VA = "0x180D4EC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F93")]
			[Address(RVA = "0x180D4F0", Offset = "0x180D4F0", VA = "0x180D4F0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F95")]
			[Address(RVA = "0x180D6A4", Offset = "0x180D6A4", VA = "0x180D6A4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40003C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float minTimeToWait;

		[Token(Token = "0x40003C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float maxTimeToWait;

		[Token(Token = "0x40003C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string playlistControllerName;

		[Token(Token = "0x40003CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private PlaylistController _controller;

		[Token(Token = "0x600042C")]
		[Address(RVA = "0x180D268", Offset = "0x180D268", VA = "0x180D268")]
		private void Start()
		{
		}

		[Token(Token = "0x600042D")]
		[Address(RVA = "0x180D314", Offset = "0x180D314", VA = "0x180D314")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600042E")]
		[Address(RVA = "0x180D3A0", Offset = "0x180D3A0", VA = "0x180D3A0")]
		private void SongEnded(string songName)
		{
		}

		[Token(Token = "0x600042F")]
		[Address(RVA = "0x180D3D8", Offset = "0x180D3D8", VA = "0x180D3D8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xFD5E44", Offset = "0xFD5E44")]
		private IEnumerator PlaySongWithDelay()
		{
			return null;
		}

		[Token(Token = "0x6000430")]
		[Address(RVA = "0x180D480", Offset = "0x180D480", VA = "0x180D480")]
		public DelayBetweenSongs()
		{
		}
	}
	[Token(Token = "0x200006C")]
	[AttributeAttribute(Name = "AudioScriptOrder", RVA = "0xFC6190", Offset = "0xFC6190")]
	public class DynamicSoundGroupCreator : MonoBehaviour
	{
		[Token(Token = "0x2000202")]
		public enum CreateItemsWhen
		{
			[Token(Token = "0x4000AA9")]
			FirstEnableOnly,
			[Token(Token = "0x4000AAA")]
			EveryEnable
		}

		[Token(Token = "0x2000203")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC88B4", Offset = "0xFC88B4")]
		private sealed class <>c__DisplayClass39_0
		{
			[Token(Token = "0x4000AAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public CustomEventCategory aCat;

			[Token(Token = "0x6000F97")]
			[Address(RVA = "0x180FB3C", Offset = "0x180FB3C", VA = "0x180FB3C")]
			public <>c__DisplayClass39_0()
			{
			}

			[Token(Token = "0x6000F98")]
			[Address(RVA = "0x1812128", Offset = "0x1812128", VA = "0x1812128")]
			internal bool <RemoveItems>b__0(CustomEventCategory cat)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40003CB")]
		public const int ExtraHardCodedBusOptions = 1;

		[Token(Token = "0x40003CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SystemLanguage previewLanguage;

		[Token(Token = "0x40003CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public MasterAudio.DragGroupMode curDragGroupMode;

		[Token(Token = "0x40003CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject groupTemplate;

		[Token(Token = "0x40003CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject variationTemplate;

		[Token(Token = "0x40003D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool errorOnDuplicates;

		[Token(Token = "0x40003D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool createOnAwake;

		[Token(Token = "0x40003D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool soundGroupsAreExpanded;

		[Token(Token = "0x40003D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
		public bool removeGroupsOnSceneChange;

		[Token(Token = "0x40003D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public CreateItemsWhen reUseMode;

		[Token(Token = "0x40003D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool showCustomEvents;

		[Token(Token = "0x40003D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public MasterAudio.AudioLocation bulkVariationMode;

		[Token(Token = "0x40003D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<CustomEvent> customEventsToCreate;

		[Token(Token = "0x40003D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<CustomEventCategory> customEventCategories;

		[Token(Token = "0x40003D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string newEventName;

		[Token(Token = "0x40003DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string newCustomEventCategoryName;

		[Token(Token = "0x40003DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string addToCustomEventCategoryName;

		[Token(Token = "0x40003DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool showMusicDucking;

		[Token(Token = "0x40003DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public List<DuckGroupInfo> musicDuckingSounds;

		[Token(Token = "0x40003DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public List<GroupBus> groupBuses;

		[Token(Token = "0x40003DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool playListExpanded;

		[Token(Token = "0x40003E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		public bool playlistEditorExp;

		[Token(Token = "0x40003E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public List<MasterAudio.Playlist> musicPlaylists;

		[Token(Token = "0x40003E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public List<GameObject> audioSourceTemplates;

		[Token(Token = "0x40003E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public string audioSourceTemplateName;

		[Token(Token = "0x40003E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public bool groupByBus;

		[Token(Token = "0x40003E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		public bool itemsCreatedEventExpanded;

		[Token(Token = "0x40003E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public string itemsCreatedCustomEvent;

		[Token(Token = "0x40003E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool showUnityMixerGroupAssignment;

		[Token(Token = "0x40003E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		private bool _hasCreated;

		[Token(Token = "0x40003E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private readonly List<Transform> _groupsToRemove;

		[Token(Token = "0x40003EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Transform _trans;

		[Token(Token = "0x40003EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private readonly List<DynamicSoundGroup> _groupsToCreate;

		[Token(Token = "0x170000AC")]
		public static int HardCodedBusOptions
		{
			[Token(Token = "0x600043A")]
			[Address(RVA = "0x1810344", Offset = "0x1810344", VA = "0x1810344")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000AD")]
		public List<DynamicSoundGroup> GroupsToCreate
		{
			[Token(Token = "0x600043B")]
			[Address(RVA = "0x1811E4C", Offset = "0x1811E4C", VA = "0x1811E4C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AE")]
		public bool ShouldShowUnityAudioMixerGroupAssignments
		{
			[Token(Token = "0x600043C")]
			[Address(RVA = "0x1811E54", Offset = "0x1811E54", VA = "0x1811E54")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000431")]
		[Address(RVA = "0x180E244", Offset = "0x180E244", VA = "0x180E244")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000432")]
		[Address(RVA = "0x180E320", Offset = "0x180E320", VA = "0x180E320")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000433")]
		[Address(RVA = "0x180E410", Offset = "0x180E410", VA = "0x180E410")]
		private void Start()
		{
		}

		[Token(Token = "0x6000434")]
		[Address(RVA = "0x180E414", Offset = "0x180E414", VA = "0x180E414")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000435")]
		[Address(RVA = "0x180E324", Offset = "0x180E324", VA = "0x180E324")]
		private void CreateItemsIfReady()
		{
		}

		[Token(Token = "0x6000436")]
		[Address(RVA = "0x180E538", Offset = "0x180E538", VA = "0x180E538")]
		public void RemoveItems()
		{
		}

		[Token(Token = "0x6000437")]
		[Address(RVA = "0x180E96C", Offset = "0x180E96C", VA = "0x180E96C")]
		public void CreateItems()
		{
		}

		[Token(Token = "0x6000438")]
		[Address(RVA = "0x1811BC0", Offset = "0x1811BC0", VA = "0x1811BC0")]
		private void FireEvents()
		{
		}

		[Token(Token = "0x6000439")]
		[Address(RVA = "0x180FDA8", Offset = "0x180FDA8", VA = "0x180FDA8")]
		public void PopulateGroupData()
		{
		}

		[Token(Token = "0x600043D")]
		[Address(RVA = "0x1811E5C", Offset = "0x1811E5C", VA = "0x1811E5C")]
		public DynamicSoundGroupCreator()
		{
		}
	}
	[Token(Token = "0x200006D")]
	public static class FilePlayerPrefs
	{
		[Token(Token = "0x40003EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Hashtable PlayerPrefsHashtable;

		[Token(Token = "0x40003ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static bool _hashTableChanged;

		[Token(Token = "0x40003EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static string _serializedOutput;

		[Token(Token = "0x40003EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly string SerializedInput;

		[Token(Token = "0x40003F0")]
		private const string ParametersSeperator = ";";

		[Token(Token = "0x40003F1")]
		private const string KeyValueSeperator = ":";

		[Token(Token = "0x40003F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly string FileName;

		[Token(Token = "0x600043E")]
		[Address(RVA = "0x18218BC", Offset = "0x18218BC", VA = "0x18218BC")]
		static FilePlayerPrefs()
		{
		}

		[Token(Token = "0x600043F")]
		[Address(RVA = "0x1821CFC", Offset = "0x1821CFC", VA = "0x1821CFC")]
		public static bool HasKey(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x6000440")]
		[Address(RVA = "0x1821D80", Offset = "0x1821D80", VA = "0x1821D80")]
		public static void SetString(string key, string value)
		{
		}

		[Token(Token = "0x6000441")]
		[Address(RVA = "0x1821EB8", Offset = "0x1821EB8", VA = "0x1821EB8")]
		public static void SetInt(string key, int value)
		{
		}

		[Token(Token = "0x6000442")]
		[Address(RVA = "0x1822030", Offset = "0x1822030", VA = "0x1822030")]
		public static void SetFloat(string key, float value)
		{
		}

		[Token(Token = "0x6000443")]
		[Address(RVA = "0x18221B0", Offset = "0x18221B0", VA = "0x18221B0")]
		public static void SetBool(string key, bool value)
		{
		}

		[Token(Token = "0x6000444")]
		[Address(RVA = "0x182232C", Offset = "0x182232C", VA = "0x182232C")]
		public static string GetString(string key)
		{
			return null;
		}

		[Token(Token = "0x6000445")]
		[Address(RVA = "0x1822410", Offset = "0x1822410", VA = "0x1822410")]
		public static string GetString(string key, string defaultValue)
		{
			return null;
		}

		[Token(Token = "0x6000446")]
		[Address(RVA = "0x1822554", Offset = "0x1822554", VA = "0x1822554")]
		public static int GetInt(string key)
		{
			return default(int);
		}

		[Token(Token = "0x6000447")]
		[Address(RVA = "0x18226F4", Offset = "0x18226F4", VA = "0x18226F4")]
		public static int GetInt(string key, int defaultValue)
		{
			return default(int);
		}

		[Token(Token = "0x6000448")]
		[Address(RVA = "0x1822874", Offset = "0x1822874", VA = "0x1822874")]
		public static float GetFloat(string key)
		{
			return default(float);
		}

		[Token(Token = "0x6000449")]
		[Address(RVA = "0x1822A14", Offset = "0x1822A14", VA = "0x1822A14")]
		public static float GetFloat(string key, float defaultValue)
		{
			return default(float);
		}

		[Token(Token = "0x600044A")]
		[Address(RVA = "0x1822B9C", Offset = "0x1822B9C", VA = "0x1822B9C")]
		public static bool GetBool(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x600044B")]
		[Address(RVA = "0x1822CA4", Offset = "0x1822CA4", VA = "0x1822CA4")]
		public static bool GetBool(string key, bool defaultValue)
		{
			return default(bool);
		}

		[Token(Token = "0x600044C")]
		[Address(RVA = "0x1822E30", Offset = "0x1822E30", VA = "0x1822E30")]
		public static void DeleteKey(string key)
		{
		}

		[Token(Token = "0x600044D")]
		[Address(RVA = "0x1822EB4", Offset = "0x1822EB4", VA = "0x1822EB4")]
		public static void DeleteAll()
		{
		}

		[Token(Token = "0x600044E")]
		[Address(RVA = "0x1822F30", Offset = "0x1822F30", VA = "0x1822F30")]
		public static void Flush()
		{
		}

		[Token(Token = "0x600044F")]
		[Address(RVA = "0x18230BC", Offset = "0x18230BC", VA = "0x18230BC")]
		private static void Serialize()
		{
		}

		[Token(Token = "0x6000450")]
		[Address(RVA = "0x1821A34", Offset = "0x1821A34", VA = "0x1821A34")]
		private static void Deserialize()
		{
		}

		[Token(Token = "0x6000451")]
		[Address(RVA = "0x182359C", Offset = "0x182359C", VA = "0x182359C")]
		private static string EscapeNonSeperators(string inputToEscape)
		{
			return null;
		}

		[Token(Token = "0x6000452")]
		[Address(RVA = "0x1823628", Offset = "0x1823628", VA = "0x1823628")]
		private static string DeEscapeNonSeperators(string inputToDeEscape)
		{
			return null;
		}

		[Token(Token = "0x6000453")]
		[Address(RVA = "0x18236B4", Offset = "0x18236B4", VA = "0x18236B4")]
		public static object GetTypeValue(string typeName, string value)
		{
			return null;
		}
	}
	[Token(Token = "0x200006E")]
	[AttributeAttribute(Name = "AudioScriptOrder", RVA = "0xFC61A4", Offset = "0xFC61A4")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xFC61A4", Offset = "0xFC61A4")]
	public class PlaylistController : MonoBehaviour
	{
		[Token(Token = "0x2000204")]
		public enum AudioPlayType
		{
			[Token(Token = "0x4000AAD")]
			PlayNow,
			[Token(Token = "0x4000AAE")]
			Schedule,
			[Token(Token = "0x4000AAF")]
			AlreadyScheduled
		}

		[Token(Token = "0x2000205")]
		public enum PlaylistStates
		{
			[Token(Token = "0x4000AB1")]
			NotInScene,
			[Token(Token = "0x4000AB2")]
			Stopped,
			[Token(Token = "0x4000AB3")]
			Playing,
			[Token(Token = "0x4000AB4")]
			Paused,
			[Token(Token = "0x4000AB5")]
			Crossfading
		}

		[Token(Token = "0x2000206")]
		public enum FadeMode
		{
			[Token(Token = "0x4000AB7")]
			None,
			[Token(Token = "0x4000AB8")]
			GradualFade
		}

		[Token(Token = "0x2000207")]
		public enum AudioDuckingMode
		{
			[Token(Token = "0x4000ABA")]
			NotDucking,
			[Token(Token = "0x4000ABB")]
			SetToDuck,
			[Token(Token = "0x4000ABC")]
			Ducked
		}

		[Token(Token = "0x2000208")]
		public delegate void SongChangedEventHandler(string newSongName, MusicSetting song);

		[Token(Token = "0x2000209")]
		public delegate void SongEndedEventHandler(string songName);

		[Token(Token = "0x200020A")]
		public delegate void SongLoopedEventHandler(string songName);

		[Token(Token = "0x200020B")]
		public delegate void PlaylistEndedEventHandler();

		[Token(Token = "0x200020C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC88C4", Offset = "0xFC88C4")]
		private sealed class <>c__DisplayClass104_0
		{
			[Token(Token = "0x4000ABD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string clipName;

			[Token(Token = "0x6000FA9")]
			[Address(RVA = "0x1DB1728", Offset = "0x1DB1728", VA = "0x1DB1728")]
			public <>c__DisplayClass104_0()
			{
			}

			[Token(Token = "0x6000FAA")]
			[Address(RVA = "0x1DB8460", Offset = "0x1DB8460", VA = "0x1DB8460")]
			internal bool <FindSongByAliasOrName>b__0(MusicSetting obj)
			{
				return default(bool);
			}

			[Token(Token = "0x6000FAB")]
			[Address(RVA = "0x1DB8484", Offset = "0x1DB8484", VA = "0x1DB8484")]
			internal bool <FindSongByAliasOrName>b__1(MusicSetting obj)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200020D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC88D4", Offset = "0xFC88D4")]
		private sealed class <>c__DisplayClass114_0
		{
			[Token(Token = "0x4000ABE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string playlistControllerName;

			[Token(Token = "0x6000FAC")]
			[Address(RVA = "0x1DB3900", Offset = "0x1DB3900", VA = "0x1DB3900")]
			public <>c__DisplayClass114_0()
			{
			}

			[Token(Token = "0x6000FAD")]
			[Address(RVA = "0x1DB8554", Offset = "0x1DB8554", VA = "0x1DB8554")]
			internal bool <InstanceByName>b__0(PlaylistController obj)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200020E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC88E4", Offset = "0xFC88E4")]
		private sealed class <>c__DisplayClass144_0
		{
			[Token(Token = "0x4000ABF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public PlaylistController <>4__this;

			[Token(Token = "0x4000AC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float volumeBeforeFade;

			[Token(Token = "0x6000FAE")]
			[Address(RVA = "0x1DB674C", Offset = "0x1DB674C", VA = "0x1DB674C")]
			public <>c__DisplayClass144_0()
			{
			}

			[Token(Token = "0x6000FAF")]
			[Address(RVA = "0x1DB8600", Offset = "0x1DB8600", VA = "0x1DB8600")]
			internal void <FadeOutPlaylist>b__0()
			{
			}
		}

		[Token(Token = "0x40003F3")]
		public const float ScheduledSongMinBadOffset = 0.5f;

		[Token(Token = "0x40003F4")]
		public const int FramesEarlyToTrigger = 2;

		[Token(Token = "0x40003F5")]
		public const int FramesEarlyToBeSyncable = 10;

		[Token(Token = "0x40003F6")]
		private const string NotReadyMessage = "Playlist Controller is not initialized yet. It must call its own Awake & Start method before any other methods are called. If you have a script with an Awake or Start event that needs to call it, make sure PlaylistController.cs is set to execute first (Script Execution Order window in Unity). Awake event is still not guaranteed to work, so use Start where possible.";

		[Token(Token = "0x40003F7")]
		private const float MinSongLength = 0.5f;

		[Token(Token = "0x40003F8")]
		private const float SlowestFrameTimeForCalc = 0.3f;

		[Token(Token = "0x40003F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool startPlaylistOnAwake;

		[Token(Token = "0x40003FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool isShuffle;

		[Token(Token = "0x40003FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool isAutoAdvance;

		[Token(Token = "0x40003FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool loopPlaylist;

		[Token(Token = "0x40003FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float _playlistVolume;

		[Token(Token = "0x40003FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool isMuted;

		[Token(Token = "0x40003FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string startPlaylistName;

		[Token(Token = "0x4000400")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int syncGroupNum;

		[Token(Token = "0x4000401")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AudioMixerGroup mixerChannel;

		[Token(Token = "0x4000402")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public MasterAudio.ItemSpatialBlendType spatialBlendType;

		[Token(Token = "0x4000403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float spatialBlend;

		[Token(Token = "0x4000404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool initializedEventExpanded;

		[Token(Token = "0x4000405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string initializedCustomEvent;

		[Token(Token = "0x4000406")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool crossfadeStartedExpanded;

		[Token(Token = "0x4000407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string crossfadeStartedCustomEvent;

		[Token(Token = "0x4000408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool songChangedEventExpanded;

		[Token(Token = "0x4000409")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string songChangedCustomEvent;

		[Token(Token = "0x400040A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool songEndedEventExpanded;

		[Token(Token = "0x400040B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public string songEndedCustomEvent;

		[Token(Token = "0x400040C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool songLoopedEventExpanded;

		[Token(Token = "0x400040D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public string songLoopedCustomEvent;

		[Token(Token = "0x400040E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool playlistStartedEventExpanded;

		[Token(Token = "0x400040F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public string playlistStartedCustomEvent;

		[Token(Token = "0x4000410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public bool playlistEndedEventExpanded;

		[Token(Token = "0x4000411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public string playlistEndedCustomEvent;

		[Token(Token = "0x4000412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private AudioSource _activeAudio;

		[Token(Token = "0x4000413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private AudioSource _transitioningAudio;

		[Token(Token = "0x4000414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float _activeAudioEndVolume;

		[Token(Token = "0x4000415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private float _transitioningAudioStartVolume;

		[Token(Token = "0x4000416")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float _crossFadeStartTime;

		[Token(Token = "0x4000417")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private readonly List<int> _clipsRemaining;

		[Token(Token = "0x4000418")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private int _currentSequentialClipIndex;

		[Token(Token = "0x4000419")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private AudioDuckingMode _duckingMode;

		[Token(Token = "0x400041A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float _timeToStartUnducking;

		[Token(Token = "0x400041B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float _timeToFinishUnducking;

		[Token(Token = "0x400041C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float _originalMusicVolume;

		[Token(Token = "0x400041D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private float _initialDuckVolume;

		[Token(Token = "0x400041E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private float _duckRange;

		[Token(Token = "0x400041F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private MusicSetting _currentSong;

		[Token(Token = "0x4000420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private GameObject _go;

		[Token(Token = "0x4000421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private string _name;

		[Token(Token = "0x4000422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private FadeMode _curFadeMode;

		[Token(Token = "0x4000423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private float _slowFadeStartTime;

		[Token(Token = "0x4000424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private float _slowFadeCompletionTime;

		[Token(Token = "0x4000425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private float _slowFadeStartVolume;

		[Token(Token = "0x4000426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private float _slowFadeTargetVolume;

		[Token(Token = "0x4000427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private MasterAudio.Playlist _currentPlaylist;

		[Token(Token = "0x4000428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private float _lastTimeMissingPlaylistLogged;

		[Token(Token = "0x4000429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Action _fadeCompleteCallback;

		[Token(Token = "0x400042A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private readonly List<MusicSetting> _queuedSongs;

		[Token(Token = "0x400042B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private bool _lostFocus;

		[Token(Token = "0x400042C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x151")]
		private bool _autoStartedPlaylist;

		[Token(Token = "0x400042D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private AudioSource _audioClip;

		[Token(Token = "0x400042E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private AudioSource _transClip;

		[Token(Token = "0x400042F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private MusicSetting _newSongSetting;

		[Token(Token = "0x4000430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private bool _nextSongRequested;

		[Token(Token = "0x4000431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x171")]
		private bool _nextSongScheduled;

		[Token(Token = "0x4000432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		private int _lastRandomClipIndex;

		[Token(Token = "0x4000433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private float _lastTimeSongRequested;

		[Token(Token = "0x4000434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		private float _currentDuckVolCut;

		[Token(Token = "0x4000435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private int? _lastSongPosition;

		[Token(Token = "0x4000436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private double? _currentSchedSongDspStartTime;

		[Token(Token = "0x4000437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private double? _currentSchedSongDspEndTime;

		[Token(Token = "0x4000438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private int _lastFrameSongPosition;

		[Token(Token = "0x4000439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private readonly Dictionary<AudioSource, double> _scheduledSongOffsetByAudioSource;

		[Token(Token = "0x400043A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public int _frames;

		[Token(Token = "0x400043B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<PlaylistController> _instances;

		[Token(Token = "0x400043C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private Coroutine _resourceCoroutine;

		[Token(Token = "0x400043D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private int _songsPlayedFromPlaylist;

		[Token(Token = "0x400043E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private AudioSource _audio1;

		[Token(Token = "0x400043F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private AudioSource _audio2;

		[Token(Token = "0x4000440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private string _activeSongAlias;

		[Token(Token = "0x4000441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private Transform _trans;

		[Token(Token = "0x4000442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private bool _willPersist;

		[Token(Token = "0x4000443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private double? _songPauseTime;

		[Token(Token = "0x4000444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private int framesOfSongPlayed;

		[Token(Token = "0x4000449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC971C", Offset = "0xFC971C")]
		private bool <ControllerIsReady>k__BackingField;

		[Token(Token = "0x400044A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x231")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC972C", Offset = "0xFC972C")]
		private bool <IsCrossFading>k__BackingField;

		[Token(Token = "0x170000AF")]
		private bool SongIsNonAdvancible
		{
			[Token(Token = "0x6000498")]
			[Address(RVA = "0x1DB7DE8", Offset = "0x1DB7DE8", VA = "0x1DB7DE8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B0")]
		public bool ControllerIsReady
		{
			[Token(Token = "0x600049A")]
			[Address(RVA = "0x1DB7E40", Offset = "0x1DB7E40", VA = "0x1DB7E40")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD5F28", Offset = "0xFD5F28")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600049B")]
			[Address(RVA = "0x1DB7E48", Offset = "0x1DB7E48", VA = "0x1DB7E48")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD5F38", Offset = "0xFD5F38")]
			private set
			{
			}
		}

		[Token(Token = "0x170000B1")]
		public PlaylistStates PlaylistState
		{
			[Token(Token = "0x600049C")]
			[Address(RVA = "0x1DB30F0", Offset = "0x1DB30F0", VA = "0x1DB30F0")]
			get
			{
				return default(PlaylistStates);
			}
		}

		[Token(Token = "0x170000B2")]
		public AudioSource ActiveAudioSource
		{
			[Token(Token = "0x600049D")]
			[Address(RVA = "0x1DB2390", Offset = "0x1DB2390", VA = "0x1DB2390")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B3")]
		public static List<PlaylistController> Instances
		{
			[Token(Token = "0x600049E")]
			[Address(RVA = "0x1DB3908", Offset = "0x1DB3908", VA = "0x1DB3908")]
			get
			{
				return null;
			}
			[Token(Token = "0x600049F")]
			[Address(RVA = "0x1DB7E54", Offset = "0x1DB7E54", VA = "0x1DB7E54")]
			set
			{
			}
		}

		[Token(Token = "0x170000B4")]
		public GameObject PlaylistControllerGameObject
		{
			[Token(Token = "0x60004A0")]
			[Address(RVA = "0x1DB7EAC", Offset = "0x1DB7EAC", VA = "0x1DB7EAC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B5")]
		public AudioSource CurrentPlaylistSource
		{
			[Token(Token = "0x60004A1")]
			[Address(RVA = "0x1DB7EB4", Offset = "0x1DB7EB4", VA = "0x1DB7EB4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B6")]
		public AudioClip CurrentPlaylistClip
		{
			[Token(Token = "0x60004A2")]
			[Address(RVA = "0x1DB7EBC", Offset = "0x1DB7EBC", VA = "0x1DB7EBC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B7")]
		public AudioClip FadingPlaylistClip
		{
			[Token(Token = "0x60004A3")]
			[Address(RVA = "0x1DB7F54", Offset = "0x1DB7F54", VA = "0x1DB7F54")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B8")]
		public AudioSource FadingSource
		{
			[Token(Token = "0x60004A4")]
			[Address(RVA = "0x1DB7FF4", Offset = "0x1DB7FF4", VA = "0x1DB7FF4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B9")]
		public bool IsCrossFading
		{
			[Token(Token = "0x60004A5")]
			[Address(RVA = "0x1DB800C", Offset = "0x1DB800C", VA = "0x1DB800C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD5F48", Offset = "0xFD5F48")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60004A6")]
			[Address(RVA = "0x1DB8014", Offset = "0x1DB8014", VA = "0x1DB8014")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD5F58", Offset = "0xFD5F58")]
			private set
			{
			}
		}

		[Token(Token = "0x170000BA")]
		public bool IsFading
		{
			[Token(Token = "0x60004A7")]
			[Address(RVA = "0x1DB8020", Offset = "0x1DB8020", VA = "0x1DB8020")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000BB")]
		public float PlaylistVolume
		{
			[Token(Token = "0x60004A8")]
			[Address(RVA = "0x1DB6294", Offset = "0x1DB6294", VA = "0x1DB6294")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60004A9")]
			[Address(RVA = "0x1DB8040", Offset = "0x1DB8040", VA = "0x1DB8040")]
			set
			{
			}
		}

		[Token(Token = "0x170000BC")]
		public MasterAudio.Playlist CurrentPlaylist
		{
			[Token(Token = "0x60004AB")]
			[Address(RVA = "0x1DB67E4", Offset = "0x1DB67E4", VA = "0x1DB67E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BD")]
		public bool HasPlaylist
		{
			[Token(Token = "0x60004AC")]
			[Address(RVA = "0x1DB3BF8", Offset = "0x1DB3BF8", VA = "0x1DB3BF8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000BE")]
		public string PlaylistName
		{
			[Token(Token = "0x60004AD")]
			[Address(RVA = "0x1DB808C", Offset = "0x1DB808C", VA = "0x1DB808C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BF")]
		private bool IsMuted
		{
			[Token(Token = "0x60004AE")]
			[Address(RVA = "0x1DB8104", Offset = "0x1DB8104", VA = "0x1DB8104")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000C0")]
		private bool PlaylistIsMuted
		{
			[Token(Token = "0x60004AF")]
			[Address(RVA = "0x1DB3D58", Offset = "0x1DB3D58", VA = "0x1DB3D58")]
			set
			{
			}
		}

		[Token(Token = "0x170000C1")]
		private float CrossFadeTime
		{
			[Token(Token = "0x60004B0")]
			[Address(RVA = "0x1DB2F14", Offset = "0x1DB2F14", VA = "0x1DB2F14")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000C2")]
		private bool IsAutoAdvance
		{
			[Token(Token = "0x60004B1")]
			[Address(RVA = "0x1DB2FA4", Offset = "0x1DB2FA4", VA = "0x1DB2FA4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000C3")]
		public GameObject GameObj
		{
			[Token(Token = "0x60004B2")]
			[Address(RVA = "0x1DB4524", Offset = "0x1DB4524", VA = "0x1DB4524")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C4")]
		public string ControllerName
		{
			[Token(Token = "0x60004B3")]
			[Address(RVA = "0x1DB1374", Offset = "0x1DB1374", VA = "0x1DB1374")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C5")]
		public bool CanSchedule
		{
			[Token(Token = "0x60004B4")]
			[Address(RVA = "0x1DB2D98", Offset = "0x1DB2D98", VA = "0x1DB2D98")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000C6")]
		private bool IsFrameFastEnough
		{
			[Token(Token = "0x60004B5")]
			[Address(RVA = "0x1DB1AEC", Offset = "0x1DB1AEC", VA = "0x1DB1AEC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000C7")]
		private bool ShouldNotSwitchEarly
		{
			[Token(Token = "0x60004B6")]
			[Address(RVA = "0x1DB30B4", Offset = "0x1DB30B4", VA = "0x1DB30B4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000C8")]
		private Transform Trans
		{
			[Token(Token = "0x60004B7")]
			[Address(RVA = "0x1DB19E0", Offset = "0x1DB19E0", VA = "0x1DB19E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C9")]
		public int ClipsRemainingInCurrentPlaylist
		{
			[Token(Token = "0x60004B8")]
			[Address(RVA = "0x1DB810C", Offset = "0x1DB810C", VA = "0x1DB810C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x14000004")]
		public event SongChangedEventHandler SongChanged
		{
			[Token(Token = "0x6000454")]
			[Address(RVA = "0x1DB08DC", Offset = "0x1DB08DC", VA = "0x1DB08DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD5EA8", Offset = "0xFD5EA8")]
			add
			{
			}
			[Token(Token = "0x6000455")]
			[Address(RVA = "0x1DB0984", Offset = "0x1DB0984", VA = "0x1DB0984")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD5EB8", Offset = "0xFD5EB8")]
			remove
			{
			}
		}

		[Token(Token = "0x14000005")]
		public event SongEndedEventHandler SongEnded
		{
			[Token(Token = "0x6000456")]
			[Address(RVA = "0x1DB0A2C", Offset = "0x1DB0A2C", VA = "0x1DB0A2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD5EC8", Offset = "0xFD5EC8")]
			add
			{
			}
			[Token(Token = "0x6000457")]
			[Address(RVA = "0x1DB0AD4", Offset = "0x1DB0AD4", VA = "0x1DB0AD4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD5ED8", Offset = "0xFD5ED8")]
			remove
			{
			}
		}

		[Token(Token = "0x14000006")]
		public event SongLoopedEventHandler SongLooped
		{
			[Token(Token = "0x6000458")]
			[Address(RVA = "0x1DB0B7C", Offset = "0x1DB0B7C", VA = "0x1DB0B7C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD5EE8", Offset = "0xFD5EE8")]
			add
			{
			}
			[Token(Token = "0x6000459")]
			[Address(RVA = "0x1DB0C24", Offset = "0x1DB0C24", VA = "0x1DB0C24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD5EF8", Offset = "0xFD5EF8")]
			remove
			{
			}
		}

		[Token(Token = "0x14000007")]
		public event PlaylistEndedEventHandler PlaylistEnded
		{
			[Token(Token = "0x600045A")]
			[Address(RVA = "0x1DB0CCC", Offset = "0x1DB0CCC", VA = "0x1DB0CCC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD5F08", Offset = "0xFD5F08")]
			add
			{
			}
			[Token(Token = "0x600045B")]
			[Address(RVA = "0x1DB0D74", Offset = "0x1DB0D74", VA = "0x1DB0D74")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD5F18", Offset = "0xFD5F18")]
			remove
			{
			}
		}

		[Token(Token = "0x600045C")]
		[Address(RVA = "0x1DB0E1C", Offset = "0x1DB0E1C", VA = "0x1DB0E1C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600045D")]
		[Address(RVA = "0x1DB13C8", Offset = "0x1DB13C8", VA = "0x1DB13C8")]
		public void SetSpatialBlend()
		{
		}

		[Token(Token = "0x600045E")]
		[Address(RVA = "0x1DB15E0", Offset = "0x1DB15E0", VA = "0x1DB15E0")]
		private MusicSetting FindSongByAliasOrName(string clipName)
		{
			return null;
		}

		[Token(Token = "0x600045F")]
		[Address(RVA = "0x1DB1730", Offset = "0x1DB1730", VA = "0x1DB1730")]
		private void SetAudiosIfEmpty()
		{
		}

		[Token(Token = "0x6000460")]
		[Address(RVA = "0x1DB152C", Offset = "0x1DB152C", VA = "0x1DB152C")]
		private void SetAudioSpatialBlend(float blend)
		{
		}

		[Token(Token = "0x6000461")]
		[Address(RVA = "0x1DB17CC", Offset = "0x1DB17CC", VA = "0x1DB17CC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000462")]
		[Address(RVA = "0x1DB1A84", Offset = "0x1DB1A84", VA = "0x1DB1A84")]
		private void AutoStartPlaylist()
		{
		}

		[Token(Token = "0x6000463")]
		[Address(RVA = "0x1DB1BC0", Offset = "0x1DB1BC0", VA = "0x1DB1BC0")]
		private void CoUpdate()
		{
		}

		[Token(Token = "0x6000464")]
		[Address(RVA = "0x1DB2068", Offset = "0x1DB2068", VA = "0x1DB2068")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000465")]
		[Address(RVA = "0x1DB2148", Offset = "0x1DB2148", VA = "0x1DB2148")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000466")]
		[Address(RVA = "0x1DB2468", Offset = "0x1DB2468", VA = "0x1DB2468")]
		private void OnApplicationPause(bool pauseStatus)
		{
		}

		[Token(Token = "0x6000467")]
		[Address(RVA = "0x1DB2474", Offset = "0x1DB2474", VA = "0x1DB2474")]
		private void Update()
		{
		}

		[Token(Token = "0x6000468")]
		[Address(RVA = "0x1DB3770", Offset = "0x1DB3770", VA = "0x1DB3770")]
		public static PlaylistController InstanceByName(string playlistControllerName, bool errorIfNotFound = true)
		{
			return null;
		}

		[Token(Token = "0x6000469")]
		[Address(RVA = "0x1DB3ABC", Offset = "0x1DB3ABC", VA = "0x1DB3ABC")]
		public bool IsSongPlaying(string songName)
		{
			return default(bool);
		}

		[Token(Token = "0x600046A")]
		[Address(RVA = "0x1DB3C08", Offset = "0x1DB3C08", VA = "0x1DB3C08")]
		public void ClearQueue()
		{
		}

		[Token(Token = "0x600046B")]
		[Address(RVA = "0x1DB3CA4", Offset = "0x1DB3CA4", VA = "0x1DB3CA4")]
		public void ToggleMutePlaylist()
		{
		}

		[Token(Token = "0x600046C")]
		[Address(RVA = "0x1DB1AE4", Offset = "0x1DB1AE4", VA = "0x1DB1AE4")]
		public void MutePlaylist()
		{
		}

		[Token(Token = "0x600046D")]
		[Address(RVA = "0x1DB3D50", Offset = "0x1DB3D50", VA = "0x1DB3D50")]
		public void UnmutePlaylist()
		{
		}

		[Token(Token = "0x600046E")]
		[Address(RVA = "0x1DB3EC0", Offset = "0x1DB3EC0", VA = "0x1DB3EC0")]
		public void PausePlaylist()
		{
		}

		[Token(Token = "0x600046F")]
		[Address(RVA = "0x1DB40A4", Offset = "0x1DB40A4", VA = "0x1DB40A4")]
		public bool UnpausePlaylist()
		{
			return default(bool);
		}

		[Token(Token = "0x6000470")]
		[Address(RVA = "0x1DB1F40", Offset = "0x1DB1F40", VA = "0x1DB1F40")]
		public void StopPlaylist(bool onlyFadingClip = false)
		{
		}

		[Token(Token = "0x6000471")]
		[Address(RVA = "0x1DB48E8", Offset = "0x1DB48E8", VA = "0x1DB48E8")]
		public void FadeToVolume(float targetVolume, float fadeTime, [Optional] Action callback)
		{
		}

		[Token(Token = "0x6000472")]
		[Address(RVA = "0x1DB4A24", Offset = "0x1DB4A24", VA = "0x1DB4A24")]
		public void PlayRandomSong()
		{
		}

		[Token(Token = "0x6000473")]
		[Address(RVA = "0x1DB4AB0", Offset = "0x1DB4AB0", VA = "0x1DB4AB0")]
		public void PlayARandomSong(AudioPlayType playType)
		{
		}

		[Token(Token = "0x6000474")]
		[Address(RVA = "0x1DB4C74", Offset = "0x1DB4C74", VA = "0x1DB4C74")]
		private void RemoveRandomClip(int randIndex)
		{
		}

		[Token(Token = "0x6000475")]
		[Address(RVA = "0x1DB5420", Offset = "0x1DB5420", VA = "0x1DB5420")]
		private void PlayFirstQueuedSong(AudioPlayType playType)
		{
		}

		[Token(Token = "0x6000476")]
		[Address(RVA = "0x1DB5524", Offset = "0x1DB5524", VA = "0x1DB5524")]
		public void PlayNextSong()
		{
		}

		[Token(Token = "0x6000477")]
		[Address(RVA = "0x1DB55B0", Offset = "0x1DB55B0", VA = "0x1DB55B0")]
		public void PlayTheNextSong(AudioPlayType playType)
		{
		}

		[Token(Token = "0x6000478")]
		[Address(RVA = "0x1DB5730", Offset = "0x1DB5730", VA = "0x1DB5730")]
		private void AdvanceSongCounter()
		{
		}

		[Token(Token = "0x6000479")]
		[Address(RVA = "0x1DB57A8", Offset = "0x1DB57A8", VA = "0x1DB57A8")]
		public void StopPlaylistAfterCurrentSong()
		{
		}

		[Token(Token = "0x600047A")]
		[Address(RVA = "0x1DB5960", Offset = "0x1DB5960", VA = "0x1DB5960")]
		public void StopLoopingCurrentSong()
		{
		}

		[Token(Token = "0x600047B")]
		[Address(RVA = "0x1DB5ADC", Offset = "0x1DB5ADC", VA = "0x1DB5ADC")]
		public void QueuePlaylistClip(string clipName, bool scheduleNow = true)
		{
		}

		[Token(Token = "0x600047C")]
		[Address(RVA = "0x1DB5E28", Offset = "0x1DB5E28", VA = "0x1DB5E28")]
		public bool TriggerPlaylistClip(string clipName)
		{
			return default(bool);
		}

		[Token(Token = "0x600047D")]
		[Address(RVA = "0x1DB60F4", Offset = "0x1DB60F4", VA = "0x1DB60F4")]
		public void DuckMusicForTime(float duckLength, float unduckTime, float pitch, float duckedTimePercentage, float duckedVolCut)
		{
		}

		[Token(Token = "0x600047E")]
		[Address(RVA = "0x1DB6264", Offset = "0x1DB6264", VA = "0x1DB6264")]
		private void InitControllerIfNot()
		{
		}

		[Token(Token = "0x600047F")]
		[Address(RVA = "0x1DB1E0C", Offset = "0x1DB1E0C", VA = "0x1DB1E0C")]
		public void UpdateMasterVolume()
		{
		}

		[Token(Token = "0x6000480")]
		[Address(RVA = "0x1DB6304", Offset = "0x1DB6304", VA = "0x1DB6304")]
		public void StartPlaylist(string playlistName)
		{
		}

		[Token(Token = "0x6000481")]
		[Address(RVA = "0x1DB6460", Offset = "0x1DB6460", VA = "0x1DB6460")]
		public void ChangePlaylist(string playlistName, bool playFirstClip = true)
		{
		}

		[Token(Token = "0x6000482")]
		[Address(RVA = "0x1DB4464", Offset = "0x1DB4464", VA = "0x1DB4464")]
		private void FinishPlaylistInit(bool playFirstClip = true)
		{
		}

		[Token(Token = "0x6000483")]
		[Address(RVA = "0x1DB63D4", Offset = "0x1DB63D4", VA = "0x1DB63D4")]
		public void RestartPlaylist()
		{
		}

		[Token(Token = "0x6000484")]
		[Address(RVA = "0x1DB6598", Offset = "0x1DB6598", VA = "0x1DB6598")]
		private void CheckIfPlaylistStarted()
		{
		}

		[Token(Token = "0x6000485")]
		[Address(RVA = "0x1DB667C", Offset = "0x1DB667C", VA = "0x1DB667C")]
		private PlaylistController FindOtherControllerInSameSyncGroup()
		{
			return null;
		}

		[Token(Token = "0x6000486")]
		[Address(RVA = "0x1DB31FC", Offset = "0x1DB31FC", VA = "0x1DB31FC")]
		private void FadeOutPlaylist()
		{
		}

		[Token(Token = "0x6000487")]
		[Address(RVA = "0x1DB19AC", Offset = "0x1DB19AC", VA = "0x1DB19AC")]
		private void InitializePlaylist()
		{
		}

		[Token(Token = "0x6000488")]
		[Address(RVA = "0x1DB1B14", Offset = "0x1DB1B14", VA = "0x1DB1B14")]
		private void PlayNextOrRandom(AudioPlayType playType)
		{
		}

		[Token(Token = "0x6000489")]
		[Address(RVA = "0x1DB2FDC", Offset = "0x1DB2FDC", VA = "0x1DB2FDC")]
		private void FirePlaylistEndedEventIfAny()
		{
		}

		[Token(Token = "0x600048A")]
		[Address(RVA = "0x1DB5288", Offset = "0x1DB5288", VA = "0x1DB5288")]
		private void FillClips()
		{
		}

		[Token(Token = "0x600048B")]
		[Address(RVA = "0x1DB4D0C", Offset = "0x1DB4D0C", VA = "0x1DB4D0C")]
		private void PlaySong(MusicSetting setting, AudioPlayType playType)
		{
		}

		[Token(Token = "0x600048C")]
		[Address(RVA = "0x1DB72BC", Offset = "0x1DB72BC", VA = "0x1DB72BC")]
		public double? ScheduledGaplessNextSongStartTime()
		{
			return null;
		}

		[Token(Token = "0x600048D")]
		[Address(RVA = "0x1DB688C", Offset = "0x1DB688C", VA = "0x1DB688C")]
		public void FinishLoadingNewSong(MusicSetting songSetting, AudioClip clipToPlay, AudioPlayType playType)
		{
		}

		[Token(Token = "0x600048E")]
		[Address(RVA = "0x1DB7550", Offset = "0x1DB7550", VA = "0x1DB7550")]
		private void RemoveScheduledClip()
		{
		}

		[Token(Token = "0x600048F")]
		[Address(RVA = "0x1DB5AD4", Offset = "0x1DB5AD4", VA = "0x1DB5AD4")]
		private void ScheduleNextSong()
		{
		}

		[Token(Token = "0x6000490")]
		[Address(RVA = "0x1DB32F0", Offset = "0x1DB32F0", VA = "0x1DB32F0")]
		private void FadeInScheduledSong()
		{
		}

		[Token(Token = "0x6000491")]
		[Address(RVA = "0x1DB7368", Offset = "0x1DB7368", VA = "0x1DB7368")]
		private double CalculateNextTrackStartTimeOffset()
		{
			return default(double);
		}

		[Token(Token = "0x6000492")]
		[Address(RVA = "0x1DB79D8", Offset = "0x1DB79D8", VA = "0x1DB79D8")]
		private double GetClipDuration(AudioSource src)
		{
			return default(double);
		}

		[Token(Token = "0x6000493")]
		[Address(RVA = "0x1DB45C8", Offset = "0x1DB45C8", VA = "0x1DB45C8")]
		private void ScheduleClipPlay(double scheduledPlayTimeOffset, AudioSource source, bool calledAfterPause)
		{
		}

		[Token(Token = "0x6000494")]
		[Address(RVA = "0x1DB7438", Offset = "0x1DB7438", VA = "0x1DB7438")]
		private void CrossFadeNow(AudioSource audioClip)
		{
		}

		[Token(Token = "0x6000495")]
		[Address(RVA = "0x1DB2ABC", Offset = "0x1DB2ABC", VA = "0x1DB2ABC")]
		private void CeaseAudioSource(AudioSource source)
		{
		}

		[Token(Token = "0x6000496")]
		[Address(RVA = "0x1DB2E30", Offset = "0x1DB2E30", VA = "0x1DB2E30")]
		private void SetDuckProperties()
		{
		}

		[Token(Token = "0x6000497")]
		[Address(RVA = "0x1DB368C", Offset = "0x1DB368C", VA = "0x1DB368C")]
		private void AudioDucking()
		{
		}

		[Token(Token = "0x6000499")]
		[Address(RVA = "0x1DB6754", Offset = "0x1DB6754", VA = "0x1DB6754")]
		private bool SongShouldLoop(MusicSetting setting)
		{
			return default(bool);
		}

		[Token(Token = "0x60004AA")]
		[Address(RVA = "0x1DB8048", Offset = "0x1DB8048", VA = "0x1DB8048")]
		public void RouteToMixerChannel(AudioMixerGroup group)
		{
		}

		[Token(Token = "0x60004B9")]
		[Address(RVA = "0x1DB815C", Offset = "0x1DB815C", VA = "0x1DB815C")]
		public PlaylistController()
		{
		}

		[Token(Token = "0x60004BA")]
		[Address(RVA = "0x1DB8358", Offset = "0x1DB8358", VA = "0x1DB8358")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD5F68", Offset = "0xFD5F68")]
		private bool <FindOtherControllerInSameSyncGroup>b__143_0(PlaylistController obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60004BB")]
		[Address(RVA = "0x1DB8450", Offset = "0x1DB8450", VA = "0x1DB8450")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD5F78", Offset = "0xFD5F78")]
		private bool <FinishLoadingNewSong>b__151_0(MusicSetting obj)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200006F")]
	public static class SpatializerHelper
	{
		[Token(Token = "0x400044B")]
		private const string OculusSpatializer = "OculusSpatializer";

		[Token(Token = "0x400044C")]
		private const string ResonanceAudioSpatializer = "Resonance Audio";

		[Token(Token = "0x170000CA")]
		public static bool IsSupportedSpatializer
		{
			[Token(Token = "0x60004BC")]
			[Address(RVA = "0x1DBFDC0", Offset = "0x1DBFDC0", VA = "0x1DBFDC0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000CB")]
		public static bool IsOculusAudioSpatializer
		{
			[Token(Token = "0x60004BD")]
			[Address(RVA = "0x1DBFE4C", Offset = "0x1DBFE4C", VA = "0x1DBFE4C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000CC")]
		public static bool IsResonanceAudioSpatializer
		{
			[Token(Token = "0x60004BE")]
			[Address(RVA = "0x1DBFEA0", Offset = "0x1DBFEA0", VA = "0x1DBFEA0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000CD")]
		public static string SelectedSpatializer
		{
			[Token(Token = "0x60004BF")]
			[Address(RVA = "0x1DBFE44", Offset = "0x1DBFE44", VA = "0x1DBFE44")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000CE")]
		public static bool SpatializerOptionExists
		{
			[Token(Token = "0x60004C0")]
			[Address(RVA = "0x1DBFEF4", Offset = "0x1DBFEF4", VA = "0x1DBFEF4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60004C1")]
		[Address(RVA = "0x1DB96A8", Offset = "0x1DB96A8", VA = "0x1DB96A8")]
		public static void TurnOnSpatializerIfEnabled(AudioSource source)
		{
		}
	}
	[Token(Token = "0x2000070")]
	public static class UtilStrings
	{
		[Token(Token = "0x60004C2")]
		[Address(RVA = "0x1DBFEFC", Offset = "0x1DBFEFC", VA = "0x1DBFEFC")]
		public static string TrimSpace(string untrimmed)
		{
			return null;
		}

		[Token(Token = "0x60004C3")]
		[Address(RVA = "0x1DBFF7C", Offset = "0x1DBFF7C", VA = "0x1DBFF7C")]
		public static string ReplaceUnsafeChars(string source)
		{
			return null;
		}
	}
}
namespace DarkTonic.MasterAudio.Examples
{
	[Token(Token = "0x2000071")]
	public class MA_Bootstrapper : MonoBehaviour
	{
		[Token(Token = "0x60004C4")]
		[Address(RVA = "0x18203FC", Offset = "0x18203FC", VA = "0x18203FC")]
		private void Awake()
		{
		}

		[Token(Token = "0x60004C5")]
		[Address(RVA = "0x1820400", Offset = "0x1820400", VA = "0x1820400")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60004C6")]
		[Address(RVA = "0x1820520", Offset = "0x1820520", VA = "0x1820520")]
		public MA_Bootstrapper()
		{
		}
	}
	[Token(Token = "0x2000072")]
	public class MA_DestroyFinishedParticle : MonoBehaviour
	{
		[Token(Token = "0x400044D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ParticleSystem particles;

		[Token(Token = "0x60004C7")]
		[Address(RVA = "0x1820528", Offset = "0x1820528", VA = "0x1820528")]
		private void Awake()
		{
		}

		[Token(Token = "0x60004C8")]
		[Address(RVA = "0x1820598", Offset = "0x1820598", VA = "0x1820598")]
		private void Update()
		{
		}

		[Token(Token = "0x60004C9")]
		[Address(RVA = "0x1820638", Offset = "0x1820638", VA = "0x1820638")]
		public MA_DestroyFinishedParticle()
		{
		}
	}
	[Token(Token = "0x2000073")]
	public class MA_EnemyOne : MonoBehaviour
	{
		[Token(Token = "0x400044E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject ExplosionParticlePrefab;

		[Token(Token = "0x400044F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform _trans;

		[Token(Token = "0x4000450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float _speed;

		[Token(Token = "0x4000451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float _horizSpeed;

		[Token(Token = "0x60004CA")]
		[Address(RVA = "0x1820640", Offset = "0x1820640", VA = "0x1820640")]
		private void Awake()
		{
		}

		[Token(Token = "0x60004CB")]
		[Address(RVA = "0x182072C", Offset = "0x182072C", VA = "0x182072C")]
		private void Update()
		{
		}

		[Token(Token = "0x60004CC")]
		[Address(RVA = "0x1820890", Offset = "0x1820890", VA = "0x1820890")]
		public MA_EnemyOne()
		{
		}
	}
	[Token(Token = "0x2000074")]
	public class MA_EnemySpawner : MonoBehaviour
	{
		[Token(Token = "0x4000452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject Enemy;

		[Token(Token = "0x4000453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool spawnerEnabled;

		[Token(Token = "0x4000454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform trans;

		[Token(Token = "0x4000455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float nextSpawnTime;

		[Token(Token = "0x60004CD")]
		[Address(RVA = "0x1820898", Offset = "0x1820898", VA = "0x1820898")]
		private void Awake()
		{
		}

		[Token(Token = "0x60004CE")]
		[Address(RVA = "0x1820910", Offset = "0x1820910", VA = "0x1820910")]
		private void Update()
		{
		}

		[Token(Token = "0x60004CF")]
		[Address(RVA = "0x1820AB0", Offset = "0x1820AB0", VA = "0x1820AB0")]
		public MA_EnemySpawner()
		{
		}
	}
	[Token(Token = "0x2000075")]
	public class MA_GameScene : MonoBehaviour
	{
		[Token(Token = "0x60004D0")]
		[Address(RVA = "0x1820AB8", Offset = "0x1820AB8", VA = "0x1820AB8")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60004D1")]
		[Address(RVA = "0x1820B64", Offset = "0x1820B64", VA = "0x1820B64")]
		public MA_GameScene()
		{
		}
	}
	[Token(Token = "0x2000076")]
	public class MA_Laser : MonoBehaviour
	{
		[Token(Token = "0x4000456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Transform _trans;

		[Token(Token = "0x60004D2")]
		[Address(RVA = "0x1820B6C", Offset = "0x1820B6C", VA = "0x1820B6C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60004D3")]
		[Address(RVA = "0x1820C08", Offset = "0x1820C08", VA = "0x1820C08")]
		private void Update()
		{
		}

		[Token(Token = "0x60004D4")]
		[Address(RVA = "0x1820CF4", Offset = "0x1820CF4", VA = "0x1820CF4")]
		public MA_Laser()
		{
		}
	}
	[Token(Token = "0x2000077")]
	public class MA_LocalizationUI : MonoBehaviour
	{
		[Token(Token = "0x60004D5")]
		[Address(RVA = "0x1820CFC", Offset = "0x1820CFC", VA = "0x1820CFC")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60004D6")]
		[Address(RVA = "0x1820DA8", Offset = "0x1820DA8", VA = "0x1820DA8")]
		public MA_LocalizationUI()
		{
		}
	}
	[Token(Token = "0x2000078")]
	public class MA_PlayerControl : MonoBehaviour
	{
		[Token(Token = "0x4000457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject ProjectilePrefab;

		[Token(Token = "0x4000458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool canShoot;

		[Token(Token = "0x4000459")]
		private const float MoveSpeed = 10f;

		[Token(Token = "0x400045A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform _trans;

		[Token(Token = "0x400045B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float _lastMoveAmt;

		[Token(Token = "0x60004D7")]
		[Address(RVA = "0x1820DB0", Offset = "0x1820DB0", VA = "0x1820DB0")]
		private void Awake()
		{
		}

		[Token(Token = "0x60004D8")]
		[Address(RVA = "0x1820E4C", Offset = "0x1820E4C", VA = "0x1820E4C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60004D9")]
		[Address(RVA = "0x1820E50", Offset = "0x1820E50", VA = "0x1820E50")]
		private void OnBecameInvisible()
		{
		}

		[Token(Token = "0x60004DA")]
		[Address(RVA = "0x1820E54", Offset = "0x1820E54", VA = "0x1820E54")]
		private void OnBecameVisible()
		{
		}

		[Token(Token = "0x60004DB")]
		[Address(RVA = "0x1820E58", Offset = "0x1820E58", VA = "0x1820E58")]
		private void Update()
		{
		}

		[Token(Token = "0x60004DC")]
		[Address(RVA = "0x182106C", Offset = "0x182106C", VA = "0x182106C")]
		public MA_PlayerControl()
		{
		}
	}
	[Token(Token = "0x2000079")]
	public class MA_PlayerSpawnerControl : MonoBehaviour
	{
		[Token(Token = "0x400045C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject Player;

		[Token(Token = "0x400045D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float nextSpawnTime;

		[Token(Token = "0x170000CF")]
		private bool PlayerActive
		{
			[Token(Token = "0x60004DE")]
			[Address(RVA = "0x18210AC", Offset = "0x18210AC", VA = "0x18210AC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60004DD")]
		[Address(RVA = "0x182107C", Offset = "0x182107C", VA = "0x182107C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60004DF")]
		[Address(RVA = "0x18210C8", Offset = "0x18210C8", VA = "0x18210C8")]
		private void Update()
		{
		}

		[Token(Token = "0x60004E0")]
		[Address(RVA = "0x182114C", Offset = "0x182114C", VA = "0x182114C")]
		public MA_PlayerSpawnerControl()
		{
		}
	}
	[Token(Token = "0x200007A")]
	public class MA_SampleICustomEventReceiver : MonoBehaviour, ICustomEventReceiver
	{
		[Token(Token = "0x400045E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly List<string> _eventsSubscribedTo;

		[Token(Token = "0x60004E1")]
		[Address(RVA = "0x1821154", Offset = "0x1821154", VA = "0x1821154")]
		private void Awake()
		{
		}

		[Token(Token = "0x60004E2")]
		[Address(RVA = "0x1821158", Offset = "0x1821158", VA = "0x1821158")]
		private void Start()
		{
		}

		[Token(Token = "0x60004E3")]
		[Address(RVA = "0x1821290", Offset = "0x1821290", VA = "0x1821290")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60004E4")]
		[Address(RVA = "0x1821310", Offset = "0x1821310", VA = "0x1821310")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60004E5")]
		[Address(RVA = "0x182115C", Offset = "0x182115C", VA = "0x182115C", Slot = "4")]
		public void CheckForIllegalCustomEvents()
		{
		}

		[Token(Token = "0x60004E6")]
		[Address(RVA = "0x1821494", Offset = "0x1821494", VA = "0x1821494", Slot = "5")]
		public void ReceiveEvent(string customEventName, Vector3 originPoint)
		{
		}

		[Token(Token = "0x60004E7")]
		[Address(RVA = "0x18215A4", Offset = "0x18215A4", VA = "0x18215A4", Slot = "6")]
		public bool SubscribesToEvent(string customEventName)
		{
			return default(bool);
		}

		[Token(Token = "0x60004E8")]
		[Address(RVA = "0x1821294", Offset = "0x1821294", VA = "0x1821294", Slot = "7")]
		public void RegisterReceiver()
		{
		}

		[Token(Token = "0x60004E9")]
		[Address(RVA = "0x1821430", Offset = "0x1821430", VA = "0x1821430", Slot = "8")]
		public void UnregisterReceiver()
		{
		}

		[Token(Token = "0x60004EA")]
		[Address(RVA = "0x1821630", Offset = "0x1821630", VA = "0x1821630", Slot = "9")]
		public IList<AudioEventGroup> GetAllEvents()
		{
			return null;
		}

		[Token(Token = "0x60004EB")]
		[Address(RVA = "0x1821744", Offset = "0x1821744", VA = "0x1821744")]
		public MA_SampleICustomEventReceiver()
		{
		}
	}
	[Token(Token = "0x200007B")]
	public class MA_TestUI : MonoBehaviour
	{
		[Token(Token = "0x60004EC")]
		[Address(RVA = "0x1821808", Offset = "0x1821808", VA = "0x1821808")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60004ED")]
		[Address(RVA = "0x18218B4", Offset = "0x18218B4", VA = "0x18218B4")]
		public MA_TestUI()
		{
		}
	}
}
namespace FluffyUnderware.DevTools
{
	[Token(Token = "0x200007C")]
	public interface IDTGroupParsingAttribute
	{
		[Token(Token = "0x170000D0")]
		string Path
		{
			[Token(Token = "0x60004EE")]
			get;
		}
	}
	[Token(Token = "0x200007D")]
	public interface IDTFieldParsingAttribute
	{
	}
	[Token(Token = "0x200007E")]
	public interface IDTGroupRenderAttribute
	{
	}
	[Token(Token = "0x200007F")]
	public interface IDTFieldRenderAttribute
	{
	}
	[Token(Token = "0x2000080")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xFC621C", Offset = "0xFC621C")]
	public class DTVersionAttribute : Attribute
	{
		[Token(Token = "0x400045F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string Version;

		[Token(Token = "0x60004EF")]
		[Address(RVA = "0x1F0BCB8", Offset = "0x1F0BCB8", VA = "0x1F0BCB8")]
		public DTVersionAttribute(string version)
		{
		}
	}
	[Token(Token = "0x2000081")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xFC6250", Offset = "0xFC6250")]
	public class DTAttribute : Attribute, IComparable
	{
		[Token(Token = "0x4000460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC973C", Offset = "0xFC973C")]
		private int <TypeSort>k__BackingField;

		[Token(Token = "0x4000461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int Sort;

		[Token(Token = "0x4000462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool ShowBelowProperty;

		[Token(Token = "0x4000463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int Space;

		[Token(Token = "0x170000D1")]
		public int TypeSort
		{
			[Token(Token = "0x60004F0")]
			[Address(RVA = "0x1F063FC", Offset = "0x1F063FC", VA = "0x1F063FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD5F88", Offset = "0xFD5F88")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60004F1")]
			[Address(RVA = "0x1F06404", Offset = "0x1F06404", VA = "0x1F06404")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD5F98", Offset = "0xFD5F98")]
			protected set
			{
			}
		}

		[Token(Token = "0x60004F2")]
		[Address(RVA = "0x1F0640C", Offset = "0x1F0640C", VA = "0x1F0640C", Slot = "8")]
		public virtual int CompareTo(object obj)
		{
			return default(int);
		}

		[Token(Token = "0x60004F3")]
		[Address(RVA = "0x1F03C40", Offset = "0x1F03C40", VA = "0x1F03C40")]
		public DTAttribute(int sortOrder, bool showBelow = false)
		{
		}
	}
	[Token(Token = "0x2000082")]
	public class GroupAttribute : DTAttribute, IDTGroupParsingAttribute, IDTGroupRenderAttribute
	{
		[Token(Token = "0x4000464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC974C", Offset = "0xFC974C")]
		private bool <PathIsAbsolute>k__BackingField;

		[Token(Token = "0x4000465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool Expanded;

		[Token(Token = "0x4000466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public bool Invisible;

		[Token(Token = "0x4000467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string Label;

		[Token(Token = "0x4000468")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string Tooltip;

		[Token(Token = "0x4000469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string HelpURL;

		[Token(Token = "0x400046A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string mPath;

		[Token(Token = "0x170000D2")]
		public string Path
		{
			[Token(Token = "0x60004F4")]
			[Address(RVA = "0x1F107A4", Offset = "0x1F107A4", VA = "0x1F107A4", Slot = "9")]
			get
			{
				return null;
			}
			[Token(Token = "0x60004F5")]
			[Address(RVA = "0x1F107AC", Offset = "0x1F107AC", VA = "0x1F107AC")]
			protected set
			{
			}
		}

		[Token(Token = "0x170000D3")]
		public bool PathIsAbsolute
		{
			[Token(Token = "0x60004F6")]
			[Address(RVA = "0x1F108A4", Offset = "0x1F108A4", VA = "0x1F108A4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD5FA8", Offset = "0xFD5FA8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60004F7")]
			[Address(RVA = "0x1F108AC", Offset = "0x1F108AC", VA = "0x1F108AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD5FB8", Offset = "0xFD5FB8")]
			private set
			{
			}
		}

		[Token(Token = "0x60004F8")]
		[Address(RVA = "0x1F03FDC", Offset = "0x1F03FDC", VA = "0x1F03FDC")]
		public GroupAttribute(string pathAndName)
		{
		}
	}
	[Token(Token = "0x2000083")]
	public class ActionAttribute : DTAttribute
	{
		[Token(Token = "0x200020F")]
		public enum ActionEnum
		{
			[Token(Token = "0x4000AC2")]
			Show,
			[Token(Token = "0x4000AC3")]
			Hide,
			[Token(Token = "0x4000AC4")]
			Enable,
			[Token(Token = "0x4000AC5")]
			Disable,
			[Token(Token = "0x4000AC6")]
			ShowInfo,
			[Token(Token = "0x4000AC7")]
			ShowWarning,
			[Token(Token = "0x4000AC8")]
			ShowError,
			[Token(Token = "0x4000AC9")]
			Callback
		}

		[Token(Token = "0x2000210")]
		public enum ActionPositionEnum
		{
			[Token(Token = "0x4000ACB")]
			Above,
			[Token(Token = "0x4000ACC")]
			Below
		}

		[Token(Token = "0x400046B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ActionEnum Action;

		[Token(Token = "0x400046C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public ActionPositionEnum Position;

		[Token(Token = "0x400046D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public object ActionData;

		[Token(Token = "0x400046E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private MethodInfo mCallback;

		[Token(Token = "0x60004F9")]
		[Address(RVA = "0x1F03BD8", Offset = "0x1F03BD8", VA = "0x1F03BD8")]
		protected ActionAttribute(string actionData, ActionEnum action = ActionEnum.Callback)
		{
		}

		[Token(Token = "0x60004FA")]
		[Address(RVA = "0x1F03C88", Offset = "0x1F03C88", VA = "0x1F03C88")]
		public void Callback(object classInstance)
		{
		}
	}
	[Token(Token = "0x2000084")]
	public class ConditionalAttribute : ActionAttribute
	{
		[Token(Token = "0x2000211")]
		public enum OperatorEnum
		{
			[Token(Token = "0x4000ACE")]
			AND,
			[Token(Token = "0x4000ACF")]
			OR
		}

		[Token(Token = "0x2000212")]
		public class Condition
		{
			[Token(Token = "0x4000AD0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string FieldName;

			[Token(Token = "0x4000AD1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public FieldInfo FieldInfo;

			[Token(Token = "0x4000AD2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PropertyInfo PropertyInfo;

			[Token(Token = "0x4000AD3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public object CompareTo;

			[Token(Token = "0x4000AD4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool CompareFalse;

			[Token(Token = "0x4000AD5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public OperatorEnum Operator;

			[Token(Token = "0x4000AD6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public MethodInfo MethodInfo;

			[Token(Token = "0x4000AD7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public string MethodName;

			[Token(Token = "0x6000FB0")]
			[Address(RVA = "0x1F05988", Offset = "0x1F05988", VA = "0x1F05988")]
			public Condition()
			{
			}
		}

		[Token(Token = "0x400046F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Condition[] Conditions;

		[Token(Token = "0x60004FB")]
		[Address(RVA = "0x1F05820", Offset = "0x1F05820", VA = "0x1F05820")]
		protected ConditionalAttribute(string fieldOrProperty, object compareTo, bool compareFalse = false)
		{
		}

		[Token(Token = "0x60004FC")]
		[Address(RVA = "0x1F05990", Offset = "0x1F05990", VA = "0x1F05990")]
		protected ConditionalAttribute(string fieldOrProperty, object compareTo, bool compareFalse, OperatorEnum op, string fieldOrProperty2, object compareTo2, bool compareFalse2)
		{
		}

		[Token(Token = "0x60004FD")]
		[Address(RVA = "0x1F05B98", Offset = "0x1F05B98", VA = "0x1F05B98")]
		protected ConditionalAttribute(string fieldOrProperty, object compareTo, bool compareFalse, OperatorEnum op, string fieldOrProperty2, object compareTo2, bool compareFalse2, string fieldOrProperty3, object compareTo3, bool compareFalse3)
		{
		}

		[Token(Token = "0x60004FE")]
		[Address(RVA = "0x1F05E30", Offset = "0x1F05E30", VA = "0x1F05E30")]
		protected ConditionalAttribute(string methodToQuery)
		{
		}

		[Token(Token = "0x60004FF")]
		[Address(RVA = "0x1F05F7C", Offset = "0x1F05F7C", VA = "0x1F05F7C", Slot = "9")]
		public virtual bool ConditionMet(object classInstance)
		{
			return default(bool);
		}

		[Token(Token = "0x6000500")]
		[Address(RVA = "0x1F06048", Offset = "0x1F06048", VA = "0x1F06048")]
		private bool evaluate(Condition cond, object classInstance)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000085")]
	public class SortOrderAttribute : DTAttribute, IDTFieldParsingAttribute
	{
		[Token(Token = "0x6000501")]
		[Address(RVA = "0x1F13460", Offset = "0x1F13460", VA = "0x1F13460")]
		public SortOrderAttribute(int sort = 100)
		{
		}
	}
	[Token(Token = "0x2000086")]
	public class AsGroupAttribute : GroupAttribute, IDTFieldParsingAttribute, IDTFieldRenderAttribute
	{
		[Token(Token = "0x6000502")]
		[Address(RVA = "0x1F03F84", Offset = "0x1F03F84", VA = "0x1F03F84")]
		public AsGroupAttribute([Optional] string pathAndName)
		{
		}
	}
	[Token(Token = "0x2000087")]
	public class TabAttribute : GroupAttribute
	{
		[Token(Token = "0x4000470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public readonly string TabName;

		[Token(Token = "0x4000471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public readonly string TabBarName;

		[Token(Token = "0x6000503")]
		[Address(RVA = "0x1F13498", Offset = "0x1F13498", VA = "0x1F13498")]
		public TabAttribute(string pathAndName)
		{
		}

		[Token(Token = "0x6000504")]
		[Address(RVA = "0x1F13550", Offset = "0x1F13550", VA = "0x1F13550")]
		private static bool split(string pathAndName, out string path, out string tabBar, out string tabname)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000088")]
	public class SectionAttribute : GroupAttribute
	{
		[Token(Token = "0x4000472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool Fixed;

		[Token(Token = "0x6000505")]
		[Address(RVA = "0x1F10FE4", Offset = "0x1F10FE4", VA = "0x1F10FE4")]
		public SectionAttribute(string name, bool expanded = true, bool fix = false, int sort = 100)
		{
		}
	}
	[Token(Token = "0x2000089")]
	public class NoSectionAttribute : SectionAttribute
	{
		[Token(Token = "0x6000506")]
		[Address(RVA = "0x1F10F48", Offset = "0x1F10F48", VA = "0x1F10F48")]
		public NoSectionAttribute()
		{
		}
	}
	[Token(Token = "0x200008A")]
	public class Hide : DTAttribute, IDTFieldParsingAttribute, IDTFieldRenderAttribute
	{
		[Token(Token = "0x6000507")]
		[Address(RVA = "0x1F108F0", Offset = "0x1F108F0", VA = "0x1F108F0")]
		public Hide()
		{
		}
	}
	[Token(Token = "0x200008B")]
	public class Inline : DTAttribute, IDTFieldParsingAttribute, IDTFieldRenderAttribute
	{
		[Token(Token = "0x6000508")]
		[Address(RVA = "0x1F10928", Offset = "0x1F10928", VA = "0x1F10928")]
		public Inline()
		{
		}
	}
	[Token(Token = "0x200008C")]
	public class ArrayExAttribute : DTAttribute, IDTFieldParsingAttribute
	{
		[Token(Token = "0x4000473")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool Draggable;

		[Token(Token = "0x4000474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool ShowHeader;

		[Token(Token = "0x4000475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public bool ShowAdd;

		[Token(Token = "0x4000476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
		public bool ShowDelete;

		[Token(Token = "0x4000477")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool DropTarget;

		[Token(Token = "0x6000509")]
		[Address(RVA = "0x1F03F3C", Offset = "0x1F03F3C", VA = "0x1F03F3C")]
		public ArrayExAttribute()
		{
		}
	}
	[Token(Token = "0x200008D")]
	public class FieldActionAttribute : ActionAttribute, IDTFieldRenderAttribute
	{
		[Token(Token = "0x600050A")]
		[Address(RVA = "0x1F0FFBC", Offset = "0x1F0FFBC", VA = "0x1F0FFBC")]
		public FieldActionAttribute(string actionData, ActionEnum action = ActionEnum.Callback)
		{
		}
	}
	[Token(Token = "0x200008E")]
	public class GroupActionAttribute : ActionAttribute, IDTGroupRenderAttribute
	{
		[Token(Token = "0x600050B")]
		[Address(RVA = "0x1F1073C", Offset = "0x1F1073C", VA = "0x1F1073C")]
		public GroupActionAttribute(string actionData, ActionEnum action = ActionEnum.Callback)
		{
		}
	}
	[Token(Token = "0x200008F")]
	public class FieldConditionAttribute : ConditionalAttribute, IDTFieldRenderAttribute
	{
		[Token(Token = "0x600050C")]
		[Address(RVA = "0x1F10024", Offset = "0x1F10024", VA = "0x1F10024")]
		public FieldConditionAttribute(string fieldOrProperty, object compareTo, bool compareFalse = false, ActionEnum action = ActionEnum.Show, [Optional] object actionData, ActionPositionEnum position = ActionPositionEnum.Below)
		{
		}

		[Token(Token = "0x600050D")]
		[Address(RVA = "0x1F10074", Offset = "0x1F10074", VA = "0x1F10074")]
		public FieldConditionAttribute(string fieldOrProperty, object compareTo, bool compareFalse, OperatorEnum op, string fieldOrProperty2, object compareTo2, bool compareFalse2)
		{
		}

		[Token(Token = "0x600050E")]
		[Address(RVA = "0x1F10080", Offset = "0x1F10080", VA = "0x1F10080")]
		public FieldConditionAttribute(string fieldOrProperty, object compareTo, bool compareFalse, OperatorEnum op, string fieldOrProperty2, object compareTo2, bool compareFalse2, string fieldOrProperty3, object compareTo3, bool compareFalse3)
		{
		}

		[Token(Token = "0x600050F")]
		[Address(RVA = "0x1F100A0", Offset = "0x1F100A0", VA = "0x1F100A0")]
		public FieldConditionAttribute(string methodToQuery)
		{
		}
	}
	[Token(Token = "0x2000090")]
	public class GroupConditionAttribute : ConditionalAttribute, IDTGroupRenderAttribute
	{
		[Token(Token = "0x6000510")]
		[Address(RVA = "0x1F108B8", Offset = "0x1F108B8", VA = "0x1F108B8")]
		public GroupConditionAttribute(string fieldOrProperty, object compareTo, bool compareFalse = false)
		{
		}

		[Token(Token = "0x6000511")]
		[Address(RVA = "0x1F108C0", Offset = "0x1F108C0", VA = "0x1F108C0")]
		public GroupConditionAttribute(string fieldOrProperty, object compareTo, bool compareFalse, OperatorEnum op, string fieldOrProperty2, object compareTo2, bool compareFalse2)
		{
		}

		[Token(Token = "0x6000512")]
		[Address(RVA = "0x1F108CC", Offset = "0x1F108CC", VA = "0x1F108CC")]
		public GroupConditionAttribute(string fieldOrProperty, object compareTo, bool compareFalse, OperatorEnum op, string fieldOrProperty2, object compareTo2, bool compareFalse2, string fieldOrProperty3, object compareTo3, bool compareFalse3)
		{
		}

		[Token(Token = "0x6000513")]
		[Address(RVA = "0x1F108EC", Offset = "0x1F108EC", VA = "0x1F108EC")]
		public GroupConditionAttribute(string methodToQuery)
		{
		}
	}
	[Token(Token = "0x2000091")]
	public class Couple<T1, T2>
	{
		[Token(Token = "0x4000478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC975C", Offset = "0xFC975C")]
		private T1 <First>k__BackingField;

		[Token(Token = "0x4000479")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC976C", Offset = "0xFC976C")]
		private T2 <Second>k__BackingField;

		[Token(Token = "0x170000D4")]
		public T1 First
		{
			[Token(Token = "0x6000514")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD5FC8", Offset = "0xFD5FC8")]
			get
			{
				return (T1)null;
			}
			[Token(Token = "0x6000515")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD5FD8", Offset = "0xFD5FD8")]
			set
			{
			}
		}

		[Token(Token = "0x170000D5")]
		public T2 Second
		{
			[Token(Token = "0x6000516")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD5FE8", Offset = "0xFD5FE8")]
			get
			{
				return (T2)null;
			}
			[Token(Token = "0x6000517")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD5FF8", Offset = "0xFD5FF8")]
			set
			{
			}
		}

		[Token(Token = "0x6000518")]
		public Couple(T1 first, T2 second)
		{
		}
	}
	[Token(Token = "0x2000092")]
	public static class DTTween
	{
		[Token(Token = "0x2000213")]
		public enum EasingMethod
		{
			[Token(Token = "0x4000AD9")]
			Linear,
			[Token(Token = "0x4000ADA")]
			ExponentialIn,
			[Token(Token = "0x4000ADB")]
			ExponentialOut,
			[Token(Token = "0x4000ADC")]
			ExponentialInOut,
			[Token(Token = "0x4000ADD")]
			ExponentialOutIn,
			[Token(Token = "0x4000ADE")]
			CircularIn,
			[Token(Token = "0x4000ADF")]
			CircularOut,
			[Token(Token = "0x4000AE0")]
			CircularInOut,
			[Token(Token = "0x4000AE1")]
			CircularOutIn,
			[Token(Token = "0x4000AE2")]
			QuadraticIn,
			[Token(Token = "0x4000AE3")]
			QuadraticOut,
			[Token(Token = "0x4000AE4")]
			QuadraticInOut,
			[Token(Token = "0x4000AE5")]
			QuadraticOutIn,
			[Token(Token = "0x4000AE6")]
			SinusIn,
			[Token(Token = "0x4000AE7")]
			SinusOut,
			[Token(Token = "0x4000AE8")]
			SinusInOut,
			[Token(Token = "0x4000AE9")]
			SinusOutIn,
			[Token(Token = "0x4000AEA")]
			CubicIn,
			[Token(Token = "0x4000AEB")]
			CubicOut,
			[Token(Token = "0x4000AEC")]
			CubicInOut,
			[Token(Token = "0x4000AED")]
			CubicOutIn,
			[Token(Token = "0x4000AEE")]
			QuarticIn,
			[Token(Token = "0x4000AEF")]
			QuarticOut,
			[Token(Token = "0x4000AF0")]
			QuarticInOut,
			[Token(Token = "0x4000AF1")]
			QuarticOutIn,
			[Token(Token = "0x4000AF2")]
			QuinticIn,
			[Token(Token = "0x4000AF3")]
			QuinticOut,
			[Token(Token = "0x4000AF4")]
			QuinticInOut,
			[Token(Token = "0x4000AF5")]
			QuinticOutIn
		}

		[Token(Token = "0x6000519")]
		[Address(RVA = "0x1F090E0", Offset = "0x1F090E0", VA = "0x1F090E0")]
		public static float Ease(EasingMethod method, float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600051A")]
		[Address(RVA = "0x1F0A75C", Offset = "0x1F0A75C", VA = "0x1F0A75C")]
		public static float Ease(EasingMethod method, float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x600051B")]
		[Address(RVA = "0x1F0A6D0", Offset = "0x1F0A6D0", VA = "0x1F0A6D0")]
		public static float Linear(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600051C")]
		[Address(RVA = "0x1F0B608", Offset = "0x1F0B608", VA = "0x1F0B608")]
		public static float Linear(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x600051D")]
		[Address(RVA = "0x1F0923C", Offset = "0x1F0923C", VA = "0x1F0923C")]
		public static float ExpoOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600051E")]
		[Address(RVA = "0x1F0AA98", Offset = "0x1F0AA98", VA = "0x1F0AA98")]
		public static float ExpoOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x600051F")]
		[Address(RVA = "0x1F09174", Offset = "0x1F09174", VA = "0x1F09174")]
		public static float ExpoIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000520")]
		[Address(RVA = "0x1F0A9F0", Offset = "0x1F0A9F0", VA = "0x1F0A9F0")]
		public static float ExpoIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000521")]
		[Address(RVA = "0x1F09300", Offset = "0x1F09300", VA = "0x1F09300")]
		public static float ExpoInOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000522")]
		[Address(RVA = "0x1F0AB3C", Offset = "0x1F0AB3C", VA = "0x1F0AB3C")]
		public static float ExpoInOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000523")]
		[Address(RVA = "0x1F0942C", Offset = "0x1F0942C", VA = "0x1F0942C")]
		public static float ExpoOutIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000524")]
		[Address(RVA = "0x1F0AC50", Offset = "0x1F0AC50", VA = "0x1F0AC50")]
		public static float ExpoOutIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000525")]
		[Address(RVA = "0x1F095A0", Offset = "0x1F095A0", VA = "0x1F095A0")]
		public static float CircOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000526")]
		[Address(RVA = "0x1F0AD2C", Offset = "0x1F0AD2C", VA = "0x1F0AD2C")]
		public static float CircOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000527")]
		[Address(RVA = "0x1F094EC", Offset = "0x1F094EC", VA = "0x1F094EC")]
		public static float CircIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000528")]
		[Address(RVA = "0x1F0AC7C", Offset = "0x1F0AC7C", VA = "0x1F0AC7C")]
		public static float CircIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000529")]
		[Address(RVA = "0x1F09654", Offset = "0x1F09654", VA = "0x1F09654")]
		public static float CircInOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600052A")]
		[Address(RVA = "0x1F0ADDC", Offset = "0x1F0ADDC", VA = "0x1F0ADDC")]
		public static float CircInOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x600052B")]
		[Address(RVA = "0x1F0976C", Offset = "0x1F0976C", VA = "0x1F0976C")]
		public static float CircOutIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600052C")]
		[Address(RVA = "0x1F0AED8", Offset = "0x1F0AED8", VA = "0x1F0AED8")]
		public static float CircOutIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x600052D")]
		[Address(RVA = "0x1F098BC", Offset = "0x1F098BC", VA = "0x1F098BC")]
		public static float QuadOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600052E")]
		[Address(RVA = "0x1F0AF18", Offset = "0x1F0AF18", VA = "0x1F0AF18")]
		public static float QuadOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x600052F")]
		[Address(RVA = "0x1F0982C", Offset = "0x1F0982C", VA = "0x1F0982C")]
		public static float QuadIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000530")]
		[Address(RVA = "0x1F0AF04", Offset = "0x1F0AF04", VA = "0x1F0AF04")]
		public static float QuadIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000531")]
		[Address(RVA = "0x1F09954", Offset = "0x1F09954", VA = "0x1F09954")]
		public static float QuadInOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000532")]
		[Address(RVA = "0x1F0AF34", Offset = "0x1F0AF34", VA = "0x1F0AF34")]
		public static float QuadInOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000533")]
		[Address(RVA = "0x1F09A6C", Offset = "0x1F09A6C", VA = "0x1F09A6C")]
		public static float QuadOutIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000534")]
		[Address(RVA = "0x1F0B030", Offset = "0x1F0B030", VA = "0x1F0B030")]
		public static float QuadOutIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000535")]
		[Address(RVA = "0x1F09BCC", Offset = "0x1F09BCC", VA = "0x1F09BCC")]
		public static float SineOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000536")]
		[Address(RVA = "0x1F0B120", Offset = "0x1F0B120", VA = "0x1F0B120")]
		public static float SineOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000537")]
		[Address(RVA = "0x1F09B2C", Offset = "0x1F09B2C", VA = "0x1F09B2C")]
		public static float SineIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000538")]
		[Address(RVA = "0x1F0B084", Offset = "0x1F0B084", VA = "0x1F0B084")]
		public static float SineIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000539")]
		[Address(RVA = "0x1F09C68", Offset = "0x1F09C68", VA = "0x1F09C68")]
		public static float SineInOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600053A")]
		[Address(RVA = "0x1F0B1B8", Offset = "0x1F0B1B8", VA = "0x1F0B1B8")]
		public static float SineInOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x600053B")]
		[Address(RVA = "0x1F09D84", Offset = "0x1F09D84", VA = "0x1F09D84")]
		public static float SineOutIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600053C")]
		[Address(RVA = "0x1F0B2BC", Offset = "0x1F0B2BC", VA = "0x1F0B2BC")]
		public static float SineOutIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x600053D")]
		[Address(RVA = "0x1F09ED8", Offset = "0x1F09ED8", VA = "0x1F09ED8")]
		public static float CubicOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600053E")]
		[Address(RVA = "0x1F0B300", Offset = "0x1F0B300", VA = "0x1F0B300")]
		public static float CubicOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x600053F")]
		[Address(RVA = "0x1F09E44", Offset = "0x1F09E44", VA = "0x1F09E44")]
		public static float CubicIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000540")]
		[Address(RVA = "0x1F0B2E8", Offset = "0x1F0B2E8", VA = "0x1F0B2E8")]
		public static float CubicIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000541")]
		[Address(RVA = "0x1F09F7C", Offset = "0x1F09F7C", VA = "0x1F09F7C")]
		public static float CubicInOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000542")]
		[Address(RVA = "0x1F0B328", Offset = "0x1F0B328", VA = "0x1F0B328")]
		public static float CubicInOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000543")]
		[Address(RVA = "0x1F0A050", Offset = "0x1F0A050", VA = "0x1F0A050")]
		public static float CubicOutIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000544")]
		[Address(RVA = "0x1F0B37C", Offset = "0x1F0B37C", VA = "0x1F0B37C")]
		public static float CubicOutIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000545")]
		[Address(RVA = "0x1F0A1A8", Offset = "0x1F0A1A8", VA = "0x1F0A1A8")]
		public static float QuartOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000546")]
		[Address(RVA = "0x1F0B3F8", Offset = "0x1F0B3F8", VA = "0x1F0B3F8")]
		public static float QuartOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000547")]
		[Address(RVA = "0x1F0A110", Offset = "0x1F0A110", VA = "0x1F0A110")]
		public static float QuartIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000548")]
		[Address(RVA = "0x1F0B3DC", Offset = "0x1F0B3DC", VA = "0x1F0B3DC")]
		public static float QuartIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000549")]
		[Address(RVA = "0x1F0A24C", Offset = "0x1F0A24C", VA = "0x1F0A24C")]
		public static float QuartInOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600054A")]
		[Address(RVA = "0x1F0B420", Offset = "0x1F0B420", VA = "0x1F0B420")]
		public static float QuartInOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x600054B")]
		[Address(RVA = "0x1F0A324", Offset = "0x1F0A324", VA = "0x1F0A324")]
		public static float QuartOutIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600054C")]
		[Address(RVA = "0x1F0B47C", Offset = "0x1F0B47C", VA = "0x1F0B47C")]
		public static float QuartOutIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x600054D")]
		[Address(RVA = "0x1F0A480", Offset = "0x1F0A480", VA = "0x1F0A480")]
		public static float QuintOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600054E")]
		[Address(RVA = "0x1F0B504", Offset = "0x1F0B504", VA = "0x1F0B504")]
		public static float QuintOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x600054F")]
		[Address(RVA = "0x1F0A3E4", Offset = "0x1F0A3E4", VA = "0x1F0A3E4")]
		public static float QuintIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000550")]
		[Address(RVA = "0x1F0B4E4", Offset = "0x1F0B4E4", VA = "0x1F0B4E4")]
		public static float QuintIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000551")]
		[Address(RVA = "0x1F0A52C", Offset = "0x1F0A52C", VA = "0x1F0A52C")]
		public static float QuintInOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000552")]
		[Address(RVA = "0x1F0B534", Offset = "0x1F0B534", VA = "0x1F0B534")]
		public static float QuintInOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000553")]
		[Address(RVA = "0x1F0A610", Offset = "0x1F0A610", VA = "0x1F0A610")]
		public static float QuintOutIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000554")]
		[Address(RVA = "0x1F0B598", Offset = "0x1F0B598", VA = "0x1F0B598")]
		public static float QuintOutIn(float t, float b, float c, float d)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000093")]
	public class DTObjectDump
	{
		[Token(Token = "0x400047A")]
		private const int INDENTSPACES = 5;

		[Token(Token = "0x400047B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string mIndent;

		[Token(Token = "0x400047C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private StringBuilder mSB;

		[Token(Token = "0x400047D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private object mObject;

		[Token(Token = "0x6000555")]
		[Address(RVA = "0x1F07EFC", Offset = "0x1F07EFC", VA = "0x1F07EFC")]
		public DTObjectDump(object o, int indent = 0)
		{
		}

		[Token(Token = "0x6000556")]
		[Address(RVA = "0x1F08E68", Offset = "0x1F08E68", VA = "0x1F08E68", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000557")]
		[Address(RVA = "0x1F08240", Offset = "0x1F08240", VA = "0x1F08240")]
		private void AppendHeader(string name)
		{
		}

		[Token(Token = "0x6000558")]
		[Address(RVA = "0x1F082C8", Offset = "0x1F082C8", VA = "0x1F082C8")]
		private void AppendMember(MemberInfo info)
		{
		}
	}
	[Token(Token = "0x2000094")]
	public static class DTUtility
	{
		[Token(Token = "0x400047E")]
		public const string HelpUrlBase = "https://curvyeditor.com/doclink/";

		[Token(Token = "0x170000D6")]
		public static bool IsEditorStateChange
		{
			[Token(Token = "0x600055A")]
			[Address(RVA = "0x1F0B620", Offset = "0x1F0B620", VA = "0x1F0B620")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000559")]
		[Address(RVA = "0x1F0B618", Offset = "0x1F0B618", VA = "0x1F0B618")]
		public static Material GetDefaultMaterial()
		{
			return null;
		}

		[Token(Token = "0x600055B")]
		[Address(RVA = "0x1F0B628", Offset = "0x1F0B628", VA = "0x1F0B628")]
		public static float GetHandleSize(Vector3 position)
		{
			return default(float);
		}

		[Token(Token = "0x600055C")]
		[Address(RVA = "0x1F0B798", Offset = "0x1F0B798", VA = "0x1F0B798")]
		public static float GetHandleSize(Vector3 position, Camera camera, Vector3 cameraPosition, Vector3 cameraZDirection, Transform cameraTransform)
		{
			return default(float);
		}

		[Token(Token = "0x600055D")]
		public static void SetPlayerPrefs<T>(string key, T value)
		{
		}

		[Token(Token = "0x600055E")]
		public static T GetPlayerPrefs<T>(string key, T defaultValue)
		{
			return (T)null;
		}

		[Token(Token = "0x600055F")]
		[Address(RVA = "0x1F0B98C", Offset = "0x1F0B98C", VA = "0x1F0B98C")]
		public static float RandomSign()
		{
			return default(float);
		}

		[Token(Token = "0x6000560")]
		[Address(RVA = "0x1F0B9B8", Offset = "0x1F0B9B8", VA = "0x1F0B9B8")]
		public static string GetHelpUrl(object forClass)
		{
			return null;
		}

		[Token(Token = "0x6000561")]
		[Address(RVA = "0x1F0BA28", Offset = "0x1F0BA28", VA = "0x1F0BA28")]
		public static string GetHelpUrl(Type classType)
		{
			return null;
		}

		[Token(Token = "0x6000562")]
		[Address(RVA = "0x1F0BB50", Offset = "0x1F0BB50", VA = "0x1F0BB50")]
		public static Vector3 GetCenterPosition(Vector3 fallback, params Vector3[] vectors)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000563")]
		public static T CreateGameObject<T>(Transform parent, string name) where T : MonoBehaviour
		{
			return null;
		}
	}
	[Token(Token = "0x2000095")]
	public static class DTTime
	{
		[Token(Token = "0x400047F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float _EditorDeltaTime;

		[Token(Token = "0x4000480")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static float _EditorLastTime;

		[Token(Token = "0x170000D7")]
		public static double TimeSinceStartup
		{
			[Token(Token = "0x6000564")]
			[Address(RVA = "0x1F04428", Offset = "0x1F04428", VA = "0x1F04428")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x170000D8")]
		public static float deltaTime
		{
			[Token(Token = "0x6000565")]
			[Address(RVA = "0x1F08FA4", Offset = "0x1F08FA4", VA = "0x1F08FA4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000566")]
		[Address(RVA = "0x1F09010", Offset = "0x1F09010", VA = "0x1F09010")]
		public static void InitializeEditorTime()
		{
		}

		[Token(Token = "0x6000567")]
		[Address(RVA = "0x1F09074", Offset = "0x1F09074", VA = "0x1F09074")]
		public static void UpdateEditorTime()
		{
		}
	}
	[Token(Token = "0x2000096")]
	public class TimeMeasure : Ring<long>
	{
		[Token(Token = "0x4000481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Stopwatch mWatch;

		[Token(Token = "0x170000D9")]
		public double LastTicks
		{
			[Token(Token = "0x600056C")]
			[Address(RVA = "0x1F14014", Offset = "0x1F14014", VA = "0x1F14014")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x170000DA")]
		public double LastMS
		{
			[Token(Token = "0x600056D")]
			[Address(RVA = "0x1F14084", Offset = "0x1F14084", VA = "0x1F14084")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x170000DB")]
		public double AverageMS
		{
			[Token(Token = "0x600056E")]
			[Address(RVA = "0x1F140A4", Offset = "0x1F140A4", VA = "0x1F140A4")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x170000DC")]
		public double MinimumMS
		{
			[Token(Token = "0x600056F")]
			[Address(RVA = "0x1F14180", Offset = "0x1F14180", VA = "0x1F14180")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x170000DD")]
		public double MaximumMS
		{
			[Token(Token = "0x6000570")]
			[Address(RVA = "0x1F14284", Offset = "0x1F14284", VA = "0x1F14284")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x170000DE")]
		public double AverageTicks
		{
			[Token(Token = "0x6000571")]
			[Address(RVA = "0x1F14388", Offset = "0x1F14388", VA = "0x1F14388")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x170000DF")]
		public double MinimumTicks
		{
			[Token(Token = "0x6000572")]
			[Address(RVA = "0x1F14458", Offset = "0x1F14458", VA = "0x1F14458")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x170000E0")]
		public double MaximumTicks
		{
			[Token(Token = "0x6000573")]
			[Address(RVA = "0x1F14550", Offset = "0x1F14550", VA = "0x1F14550")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x6000568")]
		[Address(RVA = "0x1F13EC8", Offset = "0x1F13EC8", VA = "0x1F13EC8")]
		public TimeMeasure(int size)
		{
		}

		[Token(Token = "0x6000569")]
		[Address(RVA = "0x1F13F54", Offset = "0x1F13F54", VA = "0x1F13F54")]
		public void Start()
		{
		}

		[Token(Token = "0x600056A")]
		[Address(RVA = "0x1F13F70", Offset = "0x1F13F70", VA = "0x1F13F70")]
		public void Stop()
		{
		}

		[Token(Token = "0x600056B")]
		[Address(RVA = "0x1F13FF8", Offset = "0x1F13FF8", VA = "0x1F13FF8")]
		public void Pause()
		{
		}
	}
	[Token(Token = "0x2000097")]
	public static class DTMath
	{
		[Token(Token = "0x6000574")]
		[Address(RVA = "0x1F06AE0", Offset = "0x1F06AE0", VA = "0x1F06AE0")]
		public static Vector3 ParallelTransportFrame(Vector3 up, Vector3 tan0, Vector3 tan1)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000575")]
		[Address(RVA = "0x1F06CF0", Offset = "0x1F06CF0", VA = "0x1F06CF0")]
		public static Vector3 LeftTan(ref Vector3 tan, ref Vector3 up)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000576")]
		[Address(RVA = "0x1F06DA0", Offset = "0x1F06DA0", VA = "0x1F06DA0")]
		public static Vector3 RightTan(ref Vector3 tan, ref Vector3 up)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000577")]
		[Address(RVA = "0x1F06E50", Offset = "0x1F06E50", VA = "0x1F06E50")]
		public static float Repeat(float t, float length)
		{
			return default(float);
		}

		[Token(Token = "0x6000578")]
		[Address(RVA = "0x1F06ED8", Offset = "0x1F06ED8", VA = "0x1F06ED8")]
		public static double FixNaN(double v)
		{
			return default(double);
		}

		[Token(Token = "0x6000579")]
		[Address(RVA = "0x1F06F58", Offset = "0x1F06F58", VA = "0x1F06F58")]
		public static float FixNaN(float v)
		{
			return default(float);
		}

		[Token(Token = "0x600057A")]
		[Address(RVA = "0x1F06F88", Offset = "0x1F06F88", VA = "0x1F06F88")]
		public static Vector2 FixNaN(Vector2 v)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600057B")]
		[Address(RVA = "0x1F06FDC", Offset = "0x1F06FDC", VA = "0x1F06FDC")]
		public static Vector3 FixNaN(Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600057C")]
		[Address(RVA = "0x1F01CAC", Offset = "0x1F01CAC", VA = "0x1F01CAC")]
		public static float MapValue(float min, float max, float value, float vMin = -1f, float vMax = 1f)
		{
			return default(float);
		}

		[Token(Token = "0x600057D")]
		[Address(RVA = "0x1F0704C", Offset = "0x1F0704C", VA = "0x1F0704C")]
		public static float SnapPrecision(float value, int decimals)
		{
			return default(float);
		}

		[Token(Token = "0x600057E")]
		[Address(RVA = "0x1F070D4", Offset = "0x1F070D4", VA = "0x1F070D4")]
		public static Vector2 SnapPrecision(Vector2 value, int decimals)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600057F")]
		[Address(RVA = "0x1F07134", Offset = "0x1F07134", VA = "0x1F07134")]
		public static Vector3 SnapPrecision(Vector3 value, int decimals)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000580")]
		[Address(RVA = "0x1F071C8", Offset = "0x1F071C8", VA = "0x1F071C8")]
		public static float LinePointDistanceSqr(Vector3 l1, Vector3 l2, Vector3 p, out float frag)
		{
			return default(float);
		}

		[Token(Token = "0x6000581")]
		[Address(RVA = "0x1F07424", Offset = "0x1F07424", VA = "0x1F07424")]
		public static bool RayLineSegmentIntersection(Vector2 r0, Vector2 dir, Vector2 l1, Vector2 l2, out Vector2 hit, out float frag)
		{
			return default(bool);
		}

		[Token(Token = "0x6000582")]
		[Address(RVA = "0x1F07594", Offset = "0x1F07594", VA = "0x1F07594")]
		public static bool ShortestIntersectionLine(Vector3 line1A, Vector3 line1B, Vector3 line2A, Vector3 line2B, out Vector3 resultSegmentA, out Vector3 resultSegmentB)
		{
			return default(bool);
		}

		[Token(Token = "0x6000583")]
		[Address(RVA = "0x1F07980", Offset = "0x1F07980", VA = "0x1F07980")]
		public static bool LineLineIntersection(Vector3 line1A, Vector3 line1B, Vector3 line2A, Vector3 line2B, out Vector3 hitPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x6000584")]
		[Address(RVA = "0x1F07B04", Offset = "0x1F07B04", VA = "0x1F07B04")]
		public static bool LineLineIntersect(Vector2 line1A, Vector2 line1B, Vector2 line2A, Vector2 line2B, out Vector2 hitPoint, bool segmentOnly = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6000585")]
		[Address(RVA = "0x1F07C80", Offset = "0x1F07C80", VA = "0x1F07C80")]
		public static bool PointInsideTriangle(Vector3 A, Vector3 B, Vector3 C, Vector3 p, out float ac, out float ab, bool edgesAllowed)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000098")]
	public class UnityEventEx<T0> : UnityEvent<T0>
	{
		[Token(Token = "0x4000482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private object mCallerList;

		[Token(Token = "0x4000483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private MethodInfo mCallsCount;

		[Token(Token = "0x4000484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int mCount;

		[Token(Token = "0x6000586")]
		public void AddListenerOnce(UnityAction<T0> call)
		{
		}

		[Token(Token = "0x6000587")]
		public bool HasListeners()
		{
			return default(bool);
		}

		[Token(Token = "0x6000588")]
		public void CheckForListeners()
		{
		}

		[Token(Token = "0x6000589")]
		public UnityEventEx()
		{
		}
	}
	[Token(Token = "0x2000099")]
	public static class DTLog
	{
		[Token(Token = "0x600058A")]
		[Address(RVA = "0x1F064E0", Offset = "0x1F064E0", VA = "0x1F064E0")]
		public static void Log(object message)
		{
		}

		[Token(Token = "0x600058B")]
		[Address(RVA = "0x1F06548", Offset = "0x1F06548", VA = "0x1F06548")]
		public static void Log(object message, UnityEngine.Object context)
		{
		}

		[Token(Token = "0x600058C")]
		[Address(RVA = "0x1F065C0", Offset = "0x1F065C0", VA = "0x1F065C0")]
		public static void LogError(object message)
		{
		}

		[Token(Token = "0x600058D")]
		[Address(RVA = "0x1F06628", Offset = "0x1F06628", VA = "0x1F06628")]
		public static void LogError(object message, UnityEngine.Object context)
		{
		}

		[Token(Token = "0x600058E")]
		[Address(RVA = "0x1F066A0", Offset = "0x1F066A0", VA = "0x1F066A0")]
		public static void LogErrorFormat(string format, params object[] args)
		{
		}

		[Token(Token = "0x600058F")]
		[Address(RVA = "0x1F06718", Offset = "0x1F06718", VA = "0x1F06718")]
		public static void LogErrorFormat(UnityEngine.Object context, string format, params object[] args)
		{
		}

		[Token(Token = "0x6000590")]
		[Address(RVA = "0x1F06798", Offset = "0x1F06798", VA = "0x1F06798")]
		public static void LogException(Exception exception)
		{
		}

		[Token(Token = "0x6000591")]
		[Address(RVA = "0x1F06800", Offset = "0x1F06800", VA = "0x1F06800")]
		public static void LogException(Exception exception, UnityEngine.Object context)
		{
		}

		[Token(Token = "0x6000592")]
		[Address(RVA = "0x1F06878", Offset = "0x1F06878", VA = "0x1F06878")]
		public static void LogFormat(string format, params object[] args)
		{
		}

		[Token(Token = "0x6000593")]
		[Address(RVA = "0x1F068F0", Offset = "0x1F068F0", VA = "0x1F068F0")]
		public static void LogFormat(UnityEngine.Object context, string format, params object[] args)
		{
		}

		[Token(Token = "0x6000594")]
		[Address(RVA = "0x1F042A4", Offset = "0x1F042A4", VA = "0x1F042A4")]
		public static void LogWarning(object message)
		{
		}

		[Token(Token = "0x6000595")]
		[Address(RVA = "0x1F06970", Offset = "0x1F06970", VA = "0x1F06970")]
		public static void LogWarning(object message, UnityEngine.Object context)
		{
		}

		[Token(Token = "0x6000596")]
		[Address(RVA = "0x1F069E8", Offset = "0x1F069E8", VA = "0x1F069E8")]
		public static void LogWarningFormat(string format, params object[] args)
		{
		}

		[Token(Token = "0x6000597")]
		[Address(RVA = "0x1F06A60", Offset = "0x1F06A60", VA = "0x1F06A60")]
		public static void LogWarningFormat(UnityEngine.Object context, string format, params object[] args)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200009A")]
	public struct FloatRegion : IEquatable<FloatRegion>
	{
		[Token(Token = "0x4000485")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float From;

		[Token(Token = "0x4000486")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float To;

		[Token(Token = "0x4000487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool SimpleValue;

		[Token(Token = "0x170000E1")]
		public static FloatRegion ZeroOne
		{
			[Token(Token = "0x600059A")]
			[Address(RVA = "0x1F100C0", Offset = "0x1F100C0", VA = "0x1F100C0")]
			get
			{
				return default(FloatRegion);
			}
		}

		[Token(Token = "0x170000E2")]
		public bool Positive
		{
			[Token(Token = "0x600059D")]
			[Address(RVA = "0x1039488", Offset = "0x1039488", VA = "0x1039488")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000E3")]
		public float Low
		{
			[Token(Token = "0x600059E")]
			[Address(RVA = "0x1039498", Offset = "0x1039498", VA = "0x1039498")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600059F")]
			[Address(RVA = "0x10394A8", Offset = "0x10394A8", VA = "0x10394A8")]
			set
			{
			}
		}

		[Token(Token = "0x170000E4")]
		public float High
		{
			[Token(Token = "0x60005A0")]
			[Address(RVA = "0x10394C4", Offset = "0x10394C4", VA = "0x10394C4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60005A1")]
			[Address(RVA = "0x10394D4", Offset = "0x10394D4", VA = "0x10394D4")]
			set
			{
			}
		}

		[Token(Token = "0x170000E5")]
		public float Random
		{
			[Token(Token = "0x60005A2")]
			[Address(RVA = "0x10394F0", Offset = "0x10394F0", VA = "0x10394F0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000E6")]
		public float Next
		{
			[Token(Token = "0x60005A3")]
			[Address(RVA = "0x10394FC", Offset = "0x10394FC", VA = "0x10394FC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000E7")]
		public float Length
		{
			[Token(Token = "0x60005A4")]
			[Address(RVA = "0x1039518", Offset = "0x1039518", VA = "0x1039518")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000E8")]
		public float LengthPositive
		{
			[Token(Token = "0x60005A5")]
			[Address(RVA = "0x1039524", Offset = "0x1039524", VA = "0x1039524")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000598")]
		[Address(RVA = "0x1039450", Offset = "0x1039450", VA = "0x1039450")]
		public FloatRegion(float value)
		{
		}

		[Token(Token = "0x6000599")]
		[Address(RVA = "0x1039460", Offset = "0x1039460", VA = "0x1039460")]
		public FloatRegion(float A, float B)
		{
		}

		[Token(Token = "0x600059B")]
		[Address(RVA = "0x103946C", Offset = "0x103946C", VA = "0x103946C")]
		public void MakePositive()
		{
		}

		[Token(Token = "0x600059C")]
		[Address(RVA = "0x1039480", Offset = "0x1039480", VA = "0x1039480")]
		public void Clamp(float low, float high)
		{
		}

		[Token(Token = "0x60005A6")]
		[Address(RVA = "0x103953C", Offset = "0x103953C", VA = "0x103953C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60005A7")]
		[Address(RVA = "0x1039544", Offset = "0x1039544", VA = "0x1039544", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60005A8")]
		[Address(RVA = "0x1039580", Offset = "0x1039580", VA = "0x1039580", Slot = "4")]
		public bool Equals(FloatRegion other)
		{
			return default(bool);
		}

		[Token(Token = "0x60005A9")]
		[Address(RVA = "0x103958C", Offset = "0x103958C", VA = "0x103958C", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60005AA")]
		[Address(RVA = "0x1F10438", Offset = "0x1F10438", VA = "0x1F10438")]
		public static FloatRegion operator +(FloatRegion a, FloatRegion b)
		{
			return default(FloatRegion);
		}

		[Token(Token = "0x60005AB")]
		[Address(RVA = "0x1F1046C", Offset = "0x1F1046C", VA = "0x1F1046C")]
		public static FloatRegion operator -(FloatRegion a, FloatRegion b)
		{
			return default(FloatRegion);
		}

		[Token(Token = "0x60005AC")]
		[Address(RVA = "0x1F104A0", Offset = "0x1F104A0", VA = "0x1F104A0")]
		public static FloatRegion operator -(FloatRegion a)
		{
			return default(FloatRegion);
		}

		[Token(Token = "0x60005AD")]
		[Address(RVA = "0x1F104B8", Offset = "0x1F104B8", VA = "0x1F104B8")]
		public static FloatRegion operator *(FloatRegion a, float v)
		{
			return default(FloatRegion);
		}

		[Token(Token = "0x60005AE")]
		[Address(RVA = "0x1F104E0", Offset = "0x1F104E0", VA = "0x1F104E0")]
		public static FloatRegion operator *(float v, FloatRegion a)
		{
			return default(FloatRegion);
		}

		[Token(Token = "0x60005AF")]
		[Address(RVA = "0x1F10508", Offset = "0x1F10508", VA = "0x1F10508")]
		public static FloatRegion operator /(FloatRegion a, float v)
		{
			return default(FloatRegion);
		}

		[Token(Token = "0x60005B0")]
		[Address(RVA = "0x1F10530", Offset = "0x1F10530", VA = "0x1F10530")]
		public static bool operator ==(FloatRegion lhs, FloatRegion rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x60005B1")]
		[Address(RVA = "0x1F10638", Offset = "0x1F10638", VA = "0x1F10638")]
		public static bool operator !=(FloatRegion lhs, FloatRegion rhs)
		{
			return default(bool);
		}
	}
	[Serializable]
	[Token(Token = "0x200009B")]
	public struct IntRegion : IEquatable<IntRegion>
	{
		[Token(Token = "0x4000488")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int From;

		[Token(Token = "0x4000489")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int To;

		[Token(Token = "0x400048A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool SimpleValue;

		[Token(Token = "0x170000E9")]
		public static IntRegion ZeroOne
		{
			[Token(Token = "0x60005B4")]
			[Address(RVA = "0x1F10984", Offset = "0x1F10984", VA = "0x1F10984")]
			get
			{
				return default(IntRegion);
			}
		}

		[Token(Token = "0x170000EA")]
		public bool Positive
		{
			[Token(Token = "0x60005B7")]
			[Address(RVA = "0x1039610", Offset = "0x1039610", VA = "0x1039610")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000EB")]
		public int Low
		{
			[Token(Token = "0x60005B8")]
			[Address(RVA = "0x1039620", Offset = "0x1039620", VA = "0x1039620")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60005B9")]
			[Address(RVA = "0x1039630", Offset = "0x1039630", VA = "0x1039630")]
			set
			{
			}
		}

		[Token(Token = "0x170000EC")]
		public int High
		{
			[Token(Token = "0x60005BA")]
			[Address(RVA = "0x103964C", Offset = "0x103964C", VA = "0x103964C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60005BB")]
			[Address(RVA = "0x103965C", Offset = "0x103965C", VA = "0x103965C")]
			set
			{
			}
		}

		[Token(Token = "0x170000ED")]
		public int Random
		{
			[Token(Token = "0x60005BC")]
			[Address(RVA = "0x1039678", Offset = "0x1039678", VA = "0x1039678")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000EE")]
		public int Length
		{
			[Token(Token = "0x60005BD")]
			[Address(RVA = "0x1039688", Offset = "0x1039688", VA = "0x1039688")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000EF")]
		public int LengthPositive
		{
			[Token(Token = "0x60005BE")]
			[Address(RVA = "0x1039694", Offset = "0x1039694", VA = "0x1039694")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60005B2")]
		[Address(RVA = "0x10395D8", Offset = "0x10395D8", VA = "0x10395D8")]
		public IntRegion(int value)
		{
		}

		[Token(Token = "0x60005B3")]
		[Address(RVA = "0x10395E8", Offset = "0x10395E8", VA = "0x10395E8")]
		public IntRegion(int A, int B)
		{
		}

		[Token(Token = "0x60005B5")]
		[Address(RVA = "0x10395F4", Offset = "0x10395F4", VA = "0x10395F4")]
		public void MakePositive()
		{
		}

		[Token(Token = "0x60005B6")]
		[Address(RVA = "0x1039608", Offset = "0x1039608", VA = "0x1039608")]
		public void Clamp(int low, int high)
		{
		}

		[Token(Token = "0x60005BF")]
		[Address(RVA = "0x10396A8", Offset = "0x10396A8", VA = "0x10396A8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60005C0")]
		[Address(RVA = "0x10396B0", Offset = "0x10396B0", VA = "0x10396B0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60005C1")]
		[Address(RVA = "0x10396EC", Offset = "0x10396EC", VA = "0x10396EC", Slot = "4")]
		public bool Equals(IntRegion other)
		{
			return default(bool);
		}

		[Token(Token = "0x60005C2")]
		[Address(RVA = "0x10396F8", Offset = "0x10396F8", VA = "0x10396F8", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60005C3")]
		[Address(RVA = "0x1F10CC4", Offset = "0x1F10CC4", VA = "0x1F10CC4")]
		public static IntRegion operator +(IntRegion a, IntRegion b)
		{
			return default(IntRegion);
		}

		[Token(Token = "0x60005C4")]
		[Address(RVA = "0x1F10CE0", Offset = "0x1F10CE0", VA = "0x1F10CE0")]
		public static IntRegion operator -(IntRegion a, IntRegion b)
		{
			return default(IntRegion);
		}

		[Token(Token = "0x60005C5")]
		[Address(RVA = "0x1F10CFC", Offset = "0x1F10CFC", VA = "0x1F10CFC")]
		public static IntRegion operator -(IntRegion a)
		{
			return default(IntRegion);
		}

		[Token(Token = "0x60005C6")]
		[Address(RVA = "0x1F10D14", Offset = "0x1F10D14", VA = "0x1F10D14")]
		public static IntRegion operator *(IntRegion a, int v)
		{
			return default(IntRegion);
		}

		[Token(Token = "0x60005C7")]
		[Address(RVA = "0x1F10D2C", Offset = "0x1F10D2C", VA = "0x1F10D2C")]
		public static IntRegion operator *(int v, IntRegion a)
		{
			return default(IntRegion);
		}

		[Token(Token = "0x60005C8")]
		[Address(RVA = "0x1F10D48", Offset = "0x1F10D48", VA = "0x1F10D48")]
		public static IntRegion operator /(IntRegion a, int v)
		{
			return default(IntRegion);
		}

		[Token(Token = "0x60005C9")]
		[Address(RVA = "0x1F10D60", Offset = "0x1F10D60", VA = "0x1F10D60")]
		public static bool operator ==(IntRegion lhs, IntRegion rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x60005CA")]
		[Address(RVA = "0x1F10D98", Offset = "0x1F10D98", VA = "0x1F10D98")]
		public static bool operator !=(IntRegion lhs, IntRegion rhs)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200009C")]
	public class WeightedRandom<T>
	{
		[Token(Token = "0x400048B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private List<T> mData;

		[Token(Token = "0x400048C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int mCurrentPosition;

		[Token(Token = "0x400048D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T mCurrentItem;

		[Token(Token = "0x400048E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC977C", Offset = "0xFC977C")]
		private int <Seed>k__BackingField;

		[Token(Token = "0x400048F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC978C", Offset = "0xFC978C")]
		private bool <RandomizeSeed>k__BackingField;

		[Token(Token = "0x170000F0")]
		public int Seed
		{
			[Token(Token = "0x60005CB")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6008", Offset = "0xFD6008")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60005CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6018", Offset = "0xFD6018")]
			set
			{
			}
		}

		[Token(Token = "0x170000F1")]
		public bool RandomizeSeed
		{
			[Token(Token = "0x60005CD")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6028", Offset = "0xFD6028")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60005CE")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6038", Offset = "0xFD6038")]
			set
			{
			}
		}

		[Token(Token = "0x170000F2")]
		private int Capacity
		{
			[Token(Token = "0x60005CF")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000F3")]
		public int Size
		{
			[Token(Token = "0x60005D0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60005D1")]
		public WeightedRandom(int initCapacity = 0)
		{
		}

		[Token(Token = "0x60005D2")]
		public WeightedRandom(int initCapacity, int seed)
		{
		}

		[Token(Token = "0x60005D3")]
		public void Add(T item, int amount)
		{
		}

		[Token(Token = "0x60005D4")]
		public T Next()
		{
			return (T)null;
		}

		[Token(Token = "0x60005D5")]
		public void Reset()
		{
		}

		[Token(Token = "0x60005D6")]
		public void Clear()
		{
		}
	}
	[Token(Token = "0x200009D")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xFC6288", Offset = "0xFC6288")]
	public class Ring<T> : IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable
	{
		[Token(Token = "0x4000490")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private List<T> mList;

		[Token(Token = "0x4000491")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC979C", Offset = "0xFC979C")]
		private int <Size>k__BackingField;

		[Token(Token = "0x4000492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int mIndex;

		[Token(Token = "0x170000F4")]
		public int Size
		{
			[Token(Token = "0x60005D7")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6048", Offset = "0xFD6048")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60005D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6058", Offset = "0xFD6058")]
			private set
			{
			}
		}

		[Token(Token = "0x170000F5")]
		public T Item
		{
			[Token(Token = "0x60005DF")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x60005E0")]
			set
			{
			}
		}

		[Token(Token = "0x170000F6")]
		public int Count
		{
			[Token(Token = "0x60005E4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000F7")]
		public bool IsReadOnly
		{
			[Token(Token = "0x60005E5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60005D9")]
		public Ring(int size)
		{
		}

		[Token(Token = "0x60005DA")]
		public void Add(T item)
		{
		}

		[Token(Token = "0x60005DB")]
		public void Clear()
		{
		}

		[Token(Token = "0x60005DC")]
		public int IndexOf(T item)
		{
			return default(int);
		}

		[Token(Token = "0x60005DD")]
		public void Insert(int index, T item)
		{
		}

		[Token(Token = "0x60005DE")]
		public void RemoveAt(int index)
		{
		}

		[Token(Token = "0x60005E1")]
		public IEnumerator GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x60005E2")]
		public bool Contains(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x60005E3")]
		public void CopyTo(T[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x60005E6")]
		public bool Remove(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x60005E7")]
		private IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
		{
			return null;
		}
	}
	[Token(Token = "0x200009E")]
	public class Pool<T> : IPool
	{
		[Token(Token = "0x4000493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private List<T> mObjects;

		[Token(Token = "0x4000494")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC97AC", Offset = "0xFC97AC")]
		private string <Identifier>k__BackingField;

		[Token(Token = "0x4000495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC97BC", Offset = "0xFC97BC")]
		private PoolSettings <Settings>k__BackingField;

		[Token(Token = "0x4000496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private double mLastTime;

		[Token(Token = "0x4000497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private double mDeltaTime;

		[Token(Token = "0x170000F8")]
		public string Identifier
		{
			[Token(Token = "0x60005E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6068", Offset = "0xFD6068")]
			get
			{
				return null;
			}
			[Token(Token = "0x60005E9")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6078", Offset = "0xFD6078")]
			set
			{
			}
		}

		[Token(Token = "0x170000F9")]
		public PoolSettings Settings
		{
			[Token(Token = "0x60005EA")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6088", Offset = "0xFD6088")]
			get
			{
				return null;
			}
			[Token(Token = "0x60005EB")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6098", Offset = "0xFD6098")]
			protected set
			{
			}
		}

		[Token(Token = "0x170000FA")]
		public Type Type
		{
			[Token(Token = "0x60005EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FB")]
		public int Count
		{
			[Token(Token = "0x60005F1")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60005ED")]
		public Pool([Optional] PoolSettings settings)
		{
		}

		[Token(Token = "0x60005EE")]
		public void Update()
		{
		}

		[Token(Token = "0x60005EF")]
		public void Reset()
		{
		}

		[Token(Token = "0x60005F0")]
		public void Clear()
		{
		}

		[Token(Token = "0x60005F2")]
		public virtual T Pop([Optional] Transform parent)
		{
			return (T)null;
		}

		[Token(Token = "0x60005F3")]
		public virtual void Push(T item)
		{
		}

		[Token(Token = "0x60005F4")]
		protected virtual void sendBeforePush(T item)
		{
		}

		[Token(Token = "0x60005F5")]
		protected virtual void sendAfterPop(T item)
		{
		}

		[Token(Token = "0x60005F6")]
		protected virtual void setParent(T item, Transform parent)
		{
		}

		[Token(Token = "0x60005F7")]
		protected virtual T create()
		{
			return (T)null;
		}

		[Token(Token = "0x60005F8")]
		protected virtual void destroy(T item)
		{
		}

		[Token(Token = "0x60005F9")]
		private void log(string msg)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200009F")]
	public class PoolSettings
	{
		[Token(Token = "0x4000498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private bool m_Prewarm;

		[Token(Token = "0x4000499")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		[SerializeField]
		private bool m_AutoCreate;

		[Token(Token = "0x400049A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		[SerializeField]
		private bool m_AutoEnableDisable;

		[Token(Token = "0x400049B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Positive]
		[SerializeField]
		private int m_MinItems;

		[Token(Token = "0x400049C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Positive]
		[SerializeField]
		private int m_Threshold;

		[Token(Token = "0x400049D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Positive]
		[SerializeField]
		private float m_Speed;

		[Token(Token = "0x400049E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool Debug;

		[Token(Token = "0x170000FC")]
		public bool Prewarm
		{
			[Token(Token = "0x60005FC")]
			[Address(RVA = "0x1F123A0", Offset = "0x1F123A0", VA = "0x1F123A0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60005FD")]
			[Address(RVA = "0x1F121B8", Offset = "0x1F121B8", VA = "0x1F121B8")]
			set
			{
			}
		}

		[Token(Token = "0x170000FD")]
		public bool AutoCreate
		{
			[Token(Token = "0x60005FE")]
			[Address(RVA = "0x1F123A8", Offset = "0x1F123A8", VA = "0x1F123A8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60005FF")]
			[Address(RVA = "0x1F121D8", Offset = "0x1F121D8", VA = "0x1F121D8")]
			set
			{
			}
		}

		[Token(Token = "0x170000FE")]
		public bool AutoEnableDisable
		{
			[Token(Token = "0x6000600")]
			[Address(RVA = "0x1F123B0", Offset = "0x1F123B0", VA = "0x1F123B0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000601")]
			[Address(RVA = "0x1F123B8", Offset = "0x1F123B8", VA = "0x1F123B8")]
			set
			{
			}
		}

		[Token(Token = "0x170000FF")]
		public int MinItems
		{
			[Token(Token = "0x6000602")]
			[Address(RVA = "0x1F123D8", Offset = "0x1F123D8", VA = "0x1F123D8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000603")]
			[Address(RVA = "0x1F121F8", Offset = "0x1F121F8", VA = "0x1F121F8")]
			set
			{
			}
		}

		[Token(Token = "0x17000100")]
		public int Threshold
		{
			[Token(Token = "0x6000604")]
			[Address(RVA = "0x1F123E0", Offset = "0x1F123E0", VA = "0x1F123E0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000605")]
			[Address(RVA = "0x1F12284", Offset = "0x1F12284", VA = "0x1F12284")]
			set
			{
			}
		}

		[Token(Token = "0x17000101")]
		public float Speed
		{
			[Token(Token = "0x6000606")]
			[Address(RVA = "0x1F123E8", Offset = "0x1F123E8", VA = "0x1F123E8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000607")]
			[Address(RVA = "0x1F12314", Offset = "0x1F12314", VA = "0x1F12314")]
			set
			{
			}
		}

		[Token(Token = "0x60005FA")]
		[Address(RVA = "0x1F121A0", Offset = "0x1F121A0", VA = "0x1F121A0")]
		public PoolSettings()
		{
		}

		[Token(Token = "0x60005FB")]
		[Address(RVA = "0x1F11ADC", Offset = "0x1F11ADC", VA = "0x1F11ADC")]
		public PoolSettings(PoolSettings src)
		{
		}

		[Token(Token = "0x6000608")]
		[Address(RVA = "0x1F0407C", Offset = "0x1F0407C", VA = "0x1F0407C")]
		public void OnValidate()
		{
		}
	}
	[Token(Token = "0x20000A0")]
	public interface IPool
	{
		[Token(Token = "0x17000102")]
		string Identifier
		{
			[Token(Token = "0x6000609")]
			get;
			[Token(Token = "0x600060A")]
			set;
		}

		[Token(Token = "0x17000103")]
		PoolSettings Settings
		{
			[Token(Token = "0x600060B")]
			get;
		}

		[Token(Token = "0x17000104")]
		int Count
		{
			[Token(Token = "0x600060F")]
			get;
		}

		[Token(Token = "0x600060C")]
		void Clear();

		[Token(Token = "0x600060D")]
		void Reset();

		[Token(Token = "0x600060E")]
		void Update();
	}
	[Token(Token = "0x20000A1")]
	public interface IPoolable
	{
		[Token(Token = "0x6000610")]
		void OnBeforePush();

		[Token(Token = "0x6000611")]
		void OnAfterPop();
	}
	[Token(Token = "0x20000A2")]
	public enum DTMessageType
	{
		[Token(Token = "0x40004A0")]
		None,
		[Token(Token = "0x40004A1")]
		Info,
		[Token(Token = "0x40004A2")]
		Warning,
		[Token(Token = "0x40004A3")]
		Error
	}
	[Token(Token = "0x20000A3")]
	public enum AttributeOptionsFlags
	{
		[Token(Token = "0x40004A5")]
		None = 0,
		[Token(Token = "0x40004A6")]
		Compact = 1,
		[Token(Token = "0x40004A7")]
		Clipboard = 128,
		[Token(Token = "0x40004A8")]
		Zero = 256,
		[Token(Token = "0x40004A9")]
		One = 512,
		[Token(Token = "0x40004AA")]
		Negate = 1024,
		[Token(Token = "0x40004AB")]
		Full = 1920,
		[Token(Token = "0x40004AC")]
		FullCompact = 1921
	}
	[Token(Token = "0x20000A4")]
	public class DTPropertyAttribute : PropertyAttribute
	{
		[Token(Token = "0x40004AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Label;

		[Token(Token = "0x40004AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Tooltip;

		[Token(Token = "0x40004AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string Color;

		[Token(Token = "0x40004B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AttributeOptionsFlags Options;

		[Token(Token = "0x40004B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int Precision;

		[Token(Token = "0x6000612")]
		[Address(RVA = "0x1F03EE4", Offset = "0x1F03EE4", VA = "0x1F03EE4")]
		public DTPropertyAttribute(string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x20000A5")]
	public class LabelAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x6000613")]
		[Address(RVA = "0x1F10DD4", Offset = "0x1F10DD4", VA = "0x1F10DD4")]
		public LabelAttribute()
		{
		}

		[Token(Token = "0x6000614")]
		[Address(RVA = "0x1F10E28", Offset = "0x1F10E28", VA = "0x1F10E28")]
		public LabelAttribute(string label, string tooltip = "")
		{
		}
	}
	[Token(Token = "0x20000A6")]
	public class ToggleButtonAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x6000615")]
		[Address(RVA = "0x1F14644", Offset = "0x1F14644", VA = "0x1F14644")]
		public ToggleButtonAttribute(string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x20000A7")]
	public class LayerAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x6000616")]
		[Address(RVA = "0x1F10E2C", Offset = "0x1F10E2C", VA = "0x1F10E2C")]
		public LayerAttribute(string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x20000A8")]
	public class TagAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x6000617")]
		[Address(RVA = "0x1F1370C", Offset = "0x1F1370C", VA = "0x1F1370C")]
		public TagAttribute(string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x20000A9")]
	public class VectorExAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x6000618")]
		[Address(RVA = "0x1F14648", Offset = "0x1F14648", VA = "0x1F14648")]
		public VectorExAttribute(string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x20000AA")]
	public class AnimationCurveExAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x6000619")]
		[Address(RVA = "0x1F03EBC", Offset = "0x1F03EBC", VA = "0x1F03EBC")]
		public AnimationCurveExAttribute(string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x20000AB")]
	public class MinAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x40004B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float MinValue;

		[Token(Token = "0x40004B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string MinFieldOrPropertyName;

		[Token(Token = "0x600061A")]
		[Address(RVA = "0x1F10E98", Offset = "0x1F10E98", VA = "0x1F10E98")]
		public MinAttribute(float value, string label = "", string tooltip = "")
		{
		}

		[Token(Token = "0x600061B")]
		[Address(RVA = "0x1F10EC8", Offset = "0x1F10EC8", VA = "0x1F10EC8")]
		public MinAttribute(string fieldOrProperty, string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x20000AC")]
	public class PositiveAttribute : MinAttribute
	{
		[Token(Token = "0x600061C")]
		[Address(RVA = "0x1F123F0", Offset = "0x1F123F0", VA = "0x1F123F0")]
		public PositiveAttribute()
		{
		}
	}
	[Token(Token = "0x20000AD")]
	public class MaxAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x40004B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float MaxValue;

		[Token(Token = "0x40004B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string MaxFieldOrPropertyName;

		[Token(Token = "0x600061D")]
		[Address(RVA = "0x1F10E30", Offset = "0x1F10E30", VA = "0x1F10E30")]
		public MaxAttribute(float value, string label = "", string tooltip = "")
		{
		}

		[Token(Token = "0x600061E")]
		[Address(RVA = "0x1F10E60", Offset = "0x1F10E60", VA = "0x1F10E60")]
		public MaxAttribute(string fieldOrProperty, string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x20000AE")]
	public class RangeExAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x40004B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float MinValue;

		[Token(Token = "0x40004B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string MinFieldOrPropertyName;

		[Token(Token = "0x40004B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float MaxValue;

		[Token(Token = "0x40004B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string MaxFieldOrPropertyName;

		[Token(Token = "0x40004BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool Slider;

		[Token(Token = "0x600061F")]
		[Address(RVA = "0x1F13320", Offset = "0x1F13320", VA = "0x1F13320")]
		public RangeExAttribute(float minValue, float maxValue, string label = "", string tooltip = "")
		{
		}

		[Token(Token = "0x6000620")]
		[Address(RVA = "0x1F13360", Offset = "0x1F13360", VA = "0x1F13360")]
		public RangeExAttribute(string minFieldOrProperty, float maxValue, string label = "", string tooltip = "")
		{
		}

		[Token(Token = "0x6000621")]
		[Address(RVA = "0x1F133B4", Offset = "0x1F133B4", VA = "0x1F133B4")]
		public RangeExAttribute(float minValue, string maxFieldOrProperty, string label = "", string tooltip = "")
		{
		}

		[Token(Token = "0x6000622")]
		[Address(RVA = "0x1F13404", Offset = "0x1F13404", VA = "0x1F13404")]
		public RangeExAttribute(string minFieldOrProperty, string maxFieldOrProperty, string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x20000AF")]
	public class MinMaxAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x40004BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly string MaxValueField;

		[Token(Token = "0x40004BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float Min;

		[Token(Token = "0x40004BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string MinBoundFieldOrPropertyName;

		[Token(Token = "0x40004BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float Max;

		[Token(Token = "0x40004BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string MaxBoundFieldOrPropertyName;

		[Token(Token = "0x6000623")]
		[Address(RVA = "0x1F10F00", Offset = "0x1F10F00", VA = "0x1F10F00")]
		public MinMaxAttribute(string maxValueField, string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x20000B0")]
	public class EnumFlagAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x6000624")]
		[Address(RVA = "0x1F0C3CC", Offset = "0x1F0C3CC", VA = "0x1F0C3CC")]
		public EnumFlagAttribute(string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x20000B1")]
	public class ObjectSelectorAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x6000625")]
		[Address(RVA = "0x1F11068", Offset = "0x1F11068", VA = "0x1F11068")]
		public ObjectSelectorAttribute(string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x20000B2")]
	public class PathSelectorAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x2000214")]
		public enum DialogMode
		{
			[Token(Token = "0x4000AF7")]
			OpenFile,
			[Token(Token = "0x4000AF8")]
			OpenFolder,
			[Token(Token = "0x4000AF9")]
			CreateFile
		}

		[Token(Token = "0x40004C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly DialogMode Mode;

		[Token(Token = "0x40004C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string Title;

		[Token(Token = "0x40004C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string Directory;

		[Token(Token = "0x40004C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string Extension;

		[Token(Token = "0x40004C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string DefaultName;

		[Token(Token = "0x6000626")]
		[Address(RVA = "0x1F1106C", Offset = "0x1F1106C", VA = "0x1F1106C")]
		public PathSelectorAttribute(DialogMode mode = DialogMode.OpenFile)
		{
		}
	}
	[Token(Token = "0x20000B3")]
	public class EnumSelectionGridAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x6000627")]
		[Address(RVA = "0x1F0C3D0", Offset = "0x1F0C3D0", VA = "0x1F0C3D0")]
		public EnumSelectionGridAttribute(string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x20000B4")]
	public class DTRegionAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x40004C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool RegionIsOptional;

		[Token(Token = "0x40004C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string RegionOptionsPropertyName;

		[Token(Token = "0x40004C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool UseSlider;

		[Token(Token = "0x6000628")]
		[Address(RVA = "0x1F08F48", Offset = "0x1F08F48", VA = "0x1F08F48")]
		public DTRegionAttribute()
		{
		}
	}
	[Token(Token = "0x20000B5")]
	public class FloatRegionAttribute : DTRegionAttribute
	{
		[Token(Token = "0x6000629")]
		[Address(RVA = "0x1F10738", Offset = "0x1F10738", VA = "0x1F10738")]
		public FloatRegionAttribute()
		{
		}
	}
	[Token(Token = "0x20000B6")]
	public class IntRegionAttribute : DTRegionAttribute
	{
		[Token(Token = "0x600062A")]
		[Address(RVA = "0x1F10DD0", Offset = "0x1F10DD0", VA = "0x1F10DD0")]
		public IntRegionAttribute()
		{
		}
	}
	[Token(Token = "0x20000B7")]
	public struct RegionOptions<T>
	{
		[Token(Token = "0x40004C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string LabelFrom;

		[Token(Token = "0x40004C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string LabelTo;

		[Token(Token = "0x40004CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string OptionalTooltip;

		[Token(Token = "0x40004CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public DTValueClamping ClampFrom;

		[Token(Token = "0x40004CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public DTValueClamping ClampTo;

		[Token(Token = "0x40004CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T FromMin;

		[Token(Token = "0x40004CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T FromMax;

		[Token(Token = "0x40004CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T ToMin;

		[Token(Token = "0x40004D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T ToMax;

		[Token(Token = "0x17000105")]
		public static RegionOptions<T> Default
		{
			[Token(Token = "0x600062B")]
			get
			{
				return default(RegionOptions<T>);
			}
		}

		[Token(Token = "0x600062C")]
		public static RegionOptions<T> MinMax(T min, T max)
		{
			return default(RegionOptions<T>);
		}
	}
	[Token(Token = "0x20000B8")]
	public enum DTValueClamping
	{
		[Token(Token = "0x40004D2")]
		None,
		[Token(Token = "0x40004D3")]
		Min,
		[Token(Token = "0x40004D4")]
		Max,
		[Token(Token = "0x40004D5")]
		Range
	}
	[Token(Token = "0x20000B9")]
	public class ThreadPoolWorker<T> : IDisposable
	{
		[Token(Token = "0x40004D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly SimplePool<QueuedCallback> queuedCallbackPool;

		[Token(Token = "0x40004D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly SimplePool<LoopState<T>> loopStatePool;

		[Token(Token = "0x40004D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _remainingWorkItems;

		[Token(Token = "0x40004D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ManualResetEvent _done;

		[Token(Token = "0x40004DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private WaitCallback handleWorkItemCallBack;

		[Token(Token = "0x40004DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private WaitCallback handleLoopCallBack;

		[Token(Token = "0x600062D")]
		public ThreadPoolWorker()
		{
		}

		[Token(Token = "0x600062E")]
		public void ParralelFor(Action<T> action, List<T> list)
		{
		}

		[Token(Token = "0x600062F")]
		private bool WaitAll(int millisecondsTimeout, bool exitContext)
		{
			return default(bool);
		}

		[Token(Token = "0x6000630")]
		private void ThrowIfDisposed()
		{
		}

		[Token(Token = "0x6000631")]
		private void DoneWorkItem()
		{
		}

		[Token(Token = "0x6000632")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000633")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD60A8", Offset = "0xFD60A8")]
		private void <.ctor>b__6_0(object o)
		{
		}

		[Token(Token = "0x6000634")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD60B8", Offset = "0xFD60B8")]
		private void <.ctor>b__6_1(object state)
		{
		}
	}
	[Token(Token = "0x20000BA")]
	internal class SimplePool<T> where T : new()
	{
		[Token(Token = "0x40004DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly List<T> freeItemsBackfield;

		[Token(Token = "0x6000635")]
		public SimplePool(int preCreatedElementsCount)
		{
		}

		[Token(Token = "0x6000636")]
		public T GetItem()
		{
			return (T)null;
		}

		[Token(Token = "0x6000637")]
		public void ReleaseItem(T item)
		{
		}
	}
	[Token(Token = "0x20000BB")]
	internal class QueuedCallback
	{
		[Token(Token = "0x40004DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public WaitCallback Callback;

		[Token(Token = "0x40004DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public object State;

		[Token(Token = "0x6000638")]
		[Address(RVA = "0x1F13318", Offset = "0x1F13318", VA = "0x1F13318")]
		public QueuedCallback()
		{
		}
	}
	[Token(Token = "0x20000BC")]
	internal class LoopState<T>
	{
		[Token(Token = "0x40004DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public short StartIndex;

		[Token(Token = "0x40004E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public short EndIndex;

		[Token(Token = "0x40004E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public List<T> Items;

		[Token(Token = "0x40004E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Action<T> Action;

		[Token(Token = "0x6000639")]
		public LoopState()
		{
		}
	}
	[Token(Token = "0x20000BD")]
	public class ThreadPoolWorker : IDisposable
	{
		[Serializable]
		[Token(Token = "0x2000215")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC88F4", Offset = "0xFC88F4")]
		private sealed class <>c__4<T>
		{
			[Token(Token = "0x4000AFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c__4<T> <>9;

			[Token(Token = "0x4000AFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static WaitCallback <>9__4_0;

			[Token(Token = "0x6000FB2")]
			public <>c__4()
			{
			}

			[Token(Token = "0x6000FB3")]
			internal void <ParralelFor>b__4_0(object state)
			{
			}
		}

		[Token(Token = "0x2000216")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC8904", Offset = "0xFC8904")]
		private sealed class <>c__DisplayClass7_0
		{
			[Token(Token = "0x4000AFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Action act;

			[Token(Token = "0x6000FB4")]
			[Address(RVA = "0x1F13A64", Offset = "0x1F13A64", VA = "0x1F13A64")]
			public <>c__DisplayClass7_0()
			{
			}

			[Token(Token = "0x6000FB5")]
			[Address(RVA = "0x1F13EAC", Offset = "0x1F13EAC", VA = "0x1F13EAC")]
			internal void <QueueWorkItem>b__0(object x)
			{
			}
		}

		[Token(Token = "0x40004E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int _remainingWorkItems;

		[Token(Token = "0x40004E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ManualResetEvent _done;

		[Token(Token = "0x600063A")]
		[Address(RVA = "0x1F13710", Offset = "0x1F13710", VA = "0x1F13710")]
		public void QueueWorkItem(WaitCallback callback)
		{
		}

		[Token(Token = "0x600063B")]
		[Address(RVA = "0x1F137B4", Offset = "0x1F137B4", VA = "0x1F137B4")]
		public void QueueWorkItem(Action act)
		{
		}

		[Token(Token = "0x600063C")]
		public void ParralelFor<T>(Action<T> action, List<T> list)
		{
		}

		[Token(Token = "0x600063D")]
		[Address(RVA = "0x1F138BC", Offset = "0x1F138BC", VA = "0x1F138BC")]
		private void QueueWorkItem(QueuedCallback callback)
		{
		}

		[Token(Token = "0x600063E")]
		[Address(RVA = "0x1F13718", Offset = "0x1F13718", VA = "0x1F13718")]
		public void QueueWorkItem(WaitCallback callback, object state)
		{
		}

		[Token(Token = "0x600063F")]
		[Address(RVA = "0x1F137BC", Offset = "0x1F137BC", VA = "0x1F137BC")]
		public void QueueWorkItem(Action act, object state)
		{
		}

		[Token(Token = "0x6000640")]
		[Address(RVA = "0x1F13A6C", Offset = "0x1F13A6C", VA = "0x1F13A6C")]
		public bool WaitAll()
		{
			return default(bool);
		}

		[Token(Token = "0x6000641")]
		[Address(RVA = "0x1F13B78", Offset = "0x1F13B78", VA = "0x1F13B78")]
		public bool WaitAll(TimeSpan timeout, bool exitContext)
		{
			return default(bool);
		}

		[Token(Token = "0x6000642")]
		[Address(RVA = "0x1F13A78", Offset = "0x1F13A78", VA = "0x1F13A78")]
		public bool WaitAll(int millisecondsTimeout, bool exitContext)
		{
			return default(bool);
		}

		[Token(Token = "0x6000643")]
		[Address(RVA = "0x1F13C74", Offset = "0x1F13C74", VA = "0x1F13C74")]
		private void HandleWorkItem(object state)
		{
		}

		[Token(Token = "0x6000644")]
		[Address(RVA = "0x1F13BC4", Offset = "0x1F13BC4", VA = "0x1F13BC4")]
		private void DoneWorkItem()
		{
		}

		[Token(Token = "0x6000645")]
		[Address(RVA = "0x1F139BC", Offset = "0x1F139BC", VA = "0x1F139BC")]
		private void ThrowIfDisposed()
		{
		}

		[Token(Token = "0x6000646")]
		[Address(RVA = "0x1F13D64", Offset = "0x1F13D64", VA = "0x1F13D64", Slot = "4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000647")]
		[Address(RVA = "0x1F13E2C", Offset = "0x1F13E2C", VA = "0x1F13E2C")]
		public ThreadPoolWorker()
		{
		}
	}
	[Token(Token = "0x20000BE")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC62C0", Offset = "0xFC62C0")]
	public class ComponentPool : MonoBehaviour, IPool, ISerializationCallbackReceiver
	{
		[Token(Token = "0x2000217")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC8914", Offset = "0xFC8914")]
		private sealed class <>c__DisplayClass36_0
		{
			[Token(Token = "0x4000AFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string typeName;

			[Token(Token = "0x6000FB6")]
			[Address(RVA = "0x1F05648", Offset = "0x1F05648", VA = "0x1F05648")]
			public <>c__DisplayClass36_0()
			{
			}

			[Token(Token = "0x6000FB7")]
			[Address(RVA = "0x1F057DC", Offset = "0x1F057DC", VA = "0x1F057DC")]
			internal bool <OnAfterDeserialize>b__0(Type t)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40004E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[HideInInspector]
		private string m_Identifier;

		[Token(Token = "0x40004E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Inline]
		[SerializeField]
		private PoolSettings m_Settings;

		[Token(Token = "0x40004E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private PoolManager mManager;

		[Token(Token = "0x40004E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<UnityEngine.Component> mObjects;

		[Token(Token = "0x40004E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private double mLastTime;

		[Token(Token = "0x40004EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private double mDeltaTime;

		[Token(Token = "0x17000106")]
		public PoolSettings Settings
		{
			[Token(Token = "0x6000648")]
			[Address(RVA = "0x1F04028", Offset = "0x1F04028", VA = "0x1F04028", Slot = "6")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000649")]
			[Address(RVA = "0x1F04030", Offset = "0x1F04030", VA = "0x1F04030")]
			set
			{
			}
		}

		[Token(Token = "0x17000107")]
		public PoolManager Manager
		{
			[Token(Token = "0x600064A")]
			[Address(RVA = "0x1F040B4", Offset = "0x1F040B4", VA = "0x1F040B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000108")]
		public string Identifier
		{
			[Token(Token = "0x600064B")]
			[Address(RVA = "0x1F04160", Offset = "0x1F04160", VA = "0x1F04160", Slot = "4")]
			get
			{
				return null;
			}
			[Token(Token = "0x600064C")]
			[Address(RVA = "0x1F04168", Offset = "0x1F04168", VA = "0x1F04168", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x17000109")]
		public Type Type
		{
			[Token(Token = "0x600064D")]
			[Address(RVA = "0x1F041D4", Offset = "0x1F041D4", VA = "0x1F041D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010A")]
		public int Count
		{
			[Token(Token = "0x600064E")]
			[Address(RVA = "0x1F0430C", Offset = "0x1F0430C", VA = "0x1F0430C", Slot = "10")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600064F")]
		[Address(RVA = "0x1F0435C", Offset = "0x1F0435C", VA = "0x1F0435C")]
		public void Initialize(Type type, PoolSettings settings)
		{
		}

		[Token(Token = "0x6000650")]
		[Address(RVA = "0x1F04588", Offset = "0x1F04588", VA = "0x1F04588")]
		private void Start()
		{
		}

		[Token(Token = "0x6000651")]
		[Address(RVA = "0x1F045AC", Offset = "0x1F045AC", VA = "0x1F045AC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000652")]
		[Address(RVA = "0x1F04648", Offset = "0x1F04648", VA = "0x1F04648")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000653")]
		[Address(RVA = "0x1F0464C", Offset = "0x1F0464C", VA = "0x1F0464C", Slot = "9")]
		public void Update()
		{
		}

		[Token(Token = "0x6000654")]
		[Address(RVA = "0x1F04444", Offset = "0x1F04444", VA = "0x1F04444", Slot = "8")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000655")]
		[Address(RVA = "0x1F04B24", Offset = "0x1F04B24", VA = "0x1F04B24")]
		public void OnSceneLoaded(Scene scn, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x6000656")]
		[Address(RVA = "0x1F04C18", Offset = "0x1F04C18", VA = "0x1F04C18", Slot = "7")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000657")]
		[Address(RVA = "0x1F04CEC", Offset = "0x1F04CEC", VA = "0x1F04CEC")]
		public void Push(UnityEngine.Component item)
		{
		}

		[Token(Token = "0x6000658")]
		[Address(RVA = "0x1F04FE0", Offset = "0x1F04FE0", VA = "0x1F04FE0")]
		public UnityEngine.Component Pop([Optional] Transform parent)
		{
			return null;
		}

		[Token(Token = "0x6000659")]
		public T Pop<T>(Transform parent) where T : UnityEngine.Component
		{
			return null;
		}

		[Token(Token = "0x600065A")]
		[Address(RVA = "0x1F04A3C", Offset = "0x1F04A3C", VA = "0x1F04A3C")]
		private UnityEngine.Component create()
		{
			return null;
		}

		[Token(Token = "0x600065B")]
		[Address(RVA = "0x1F04980", Offset = "0x1F04980", VA = "0x1F04980")]
		private void destroy(UnityEngine.Component item)
		{
		}

		[Token(Token = "0x600065C")]
		[Address(RVA = "0x1F05354", Offset = "0x1F05354", VA = "0x1F05354")]
		private void setParent(UnityEngine.Component item, Transform parent)
		{
		}

		[Token(Token = "0x600065D")]
		[Address(RVA = "0x1F051AC", Offset = "0x1F051AC", VA = "0x1F051AC")]
		private void sendAfterPop(UnityEngine.Component item)
		{
		}

		[Token(Token = "0x600065E")]
		[Address(RVA = "0x1F04E3C", Offset = "0x1F04E3C", VA = "0x1F04E3C")]
		private void sendBeforePush(UnityEngine.Component item)
		{
		}

		[Token(Token = "0x600065F")]
		[Address(RVA = "0x1F048B4", Offset = "0x1F048B4", VA = "0x1F048B4")]
		private void log(string msg)
		{
		}

		[Token(Token = "0x6000660")]
		[Address(RVA = "0x1F05404", Offset = "0x1F05404", VA = "0x1F05404", Slot = "11")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x6000661")]
		[Address(RVA = "0x1F05408", Offset = "0x1F05408", VA = "0x1F05408", Slot = "12")]
		public void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x6000662")]
		[Address(RVA = "0x1F05760", Offset = "0x1F05760", VA = "0x1F05760")]
		public ComponentPool()
		{
		}
	}
	[Token(Token = "0x20000BF")]
	public class DTSingleton<T> : MonoBehaviour, IDTSingleton where T : MonoBehaviour, IDTSingleton
	{
		[Serializable]
		[Token(Token = "0x2000218")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC8924", Offset = "0xFC8924")]
		private sealed class <>c
		{
			[Token(Token = "0x4000AFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000AFF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<UnityEngine.Object, bool> <>9__7_0;

			[Token(Token = "0x6000FB9")]
			public <>c()
			{
			}

			[Token(Token = "0x6000FBA")]
			internal bool <get_Instance>b__7_0(UnityEngine.Object o)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40004EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static T _instance;

		[Token(Token = "0x40004EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static object _lock;

		[Token(Token = "0x40004ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool applicationIsQuitting;

		[Token(Token = "0x40004EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool isDuplicateInstance;

		[Token(Token = "0x1700010B")]
		public static bool HasInstance
		{
			[Token(Token = "0x6000663")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700010C")]
		public static T Instance
		{
			[Token(Token = "0x6000664")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000665")]
		public virtual void Awake()
		{
		}

		[Token(Token = "0x6000666")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6000667")]
		public virtual void MergeDoubleLoaded(IDTSingleton newInstance)
		{
		}

		[Token(Token = "0x6000668")]
		private void DestroySelf()
		{
		}

		[Token(Token = "0x6000669")]
		public DTSingleton()
		{
		}
	}
	[Token(Token = "0x20000C0")]
	public interface IDTSingleton
	{
		[Token(Token = "0x600066B")]
		void MergeDoubleLoaded(IDTSingleton newInstance);
	}
	[Token(Token = "0x20000C1")]
	public abstract class DTVersionedMonoBehaviour : MonoBehaviour
	{
		[Token(Token = "0x40004EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[HideInInspector]
		private string m_Version;

		[Token(Token = "0x1700010D")]
		public string Version
		{
			[Token(Token = "0x600066C")]
			[Address(RVA = "0x1F0BCEC", Offset = "0x1F0BCEC", VA = "0x1F0BCEC")]
			get
			{
				return null;
			}
			[Token(Token = "0x600066D")]
			[Address(RVA = "0x1F0BCF4", Offset = "0x1F0BCF4", VA = "0x1F0BCF4")]
			protected set
			{
			}
		}

		[Token(Token = "0x600066E")]
		[Address(RVA = "0x1F0BCFC", Offset = "0x1F0BCFC", VA = "0x1F0BCFC")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD60C8", Offset = "0xFD60C8")]
		protected void CheckForVersionUpgrade()
		{
		}

		[Token(Token = "0x600066F")]
		[Address(RVA = "0x1F0BD00", Offset = "0x1F0BD00", VA = "0x1F0BD00", Slot = "4")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD6100", Offset = "0xFD6100")]
		protected virtual bool UpgradeVersion(string oldVersion, string newVersion)
		{
			return default(bool);
		}

		[Token(Token = "0x6000670")]
		[Address(RVA = "0x1F0BFE4", Offset = "0x1F0BFE4", VA = "0x1F0BFE4")]
		public void Destroy()
		{
		}

		[Token(Token = "0x6000671")]
		[Address(RVA = "0x1F0C098", Offset = "0x1F0C098", VA = "0x1F0C098")]
		protected DTVersionedMonoBehaviour()
		{
		}
	}
	[Token(Token = "0x20000C2")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xFC62F8", Offset = "0xFC62F8")]
	public abstract class DuplicateEditorMesh : MonoBehaviour
	{
		[Token(Token = "0x40004F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private MeshFilter mFilter;

		[Token(Token = "0x1700010E")]
		public MeshFilter Filter
		{
			[Token(Token = "0x6000672")]
			[Address(RVA = "0x1F0C0A0", Offset = "0x1F0C0A0", VA = "0x1F0C0A0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000673")]
		[Address(RVA = "0x1F0C14C", Offset = "0x1F0C14C", VA = "0x1F0C14C", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000674")]
		[Address(RVA = "0x1F0C3C4", Offset = "0x1F0C3C4", VA = "0x1F0C3C4")]
		protected DuplicateEditorMesh()
		{
		}
	}
	[Token(Token = "0x20000C3")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC636C", Offset = "0xFC636C")]
	public class InspectorNote : MonoBehaviour
	{
		[Token(Token = "0x40004F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TextAreaAttribute", RVA = "0xFC994C", Offset = "0xFC994C")]
		[SerializeField]
		private string m_Note;

		[Token(Token = "0x6000675")]
		[Address(RVA = "0x1F10960", Offset = "0x1F10960", VA = "0x1F10960")]
		public InspectorNote()
		{
		}
	}
	[Token(Token = "0x20000C4")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC63A4", Offset = "0xFC63A4")]
	[ExecuteInEditMode]
	[DisallowMultipleComponent]
	public class PoolManager : MonoBehaviour
	{
		[Token(Token = "0x40004F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0xFC998C", Offset = "0xFC998C")]
		[SerializeField]
		private bool m_AutoCreatePools;

		[Token(Token = "0x40004F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "AsGroupAttribute", RVA = "0xFC99E4", Offset = "0xFC99E4")]
		[SerializeField]
		private PoolSettings m_DefaultSettings;

		[Token(Token = "0x40004F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC9A28", Offset = "0xFC9A28")]
		private bool <IsInitialized>k__BackingField;

		[Token(Token = "0x40004F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Dictionary<string, IPool> Pools;

		[Token(Token = "0x40004F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Dictionary<Type, IPool> TypePools;

		[Token(Token = "0x40004F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private IPool[] mPools;

		[Token(Token = "0x1700010F")]
		public bool AutoCreatePools
		{
			[Token(Token = "0x6000676")]
			[Address(RVA = "0x1F110E8", Offset = "0x1F110E8", VA = "0x1F110E8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000677")]
			[Address(RVA = "0x1F110F0", Offset = "0x1F110F0", VA = "0x1F110F0")]
			set
			{
			}
		}

		[Token(Token = "0x17000110")]
		public PoolSettings DefaultSettings
		{
			[Token(Token = "0x6000678")]
			[Address(RVA = "0x1F11110", Offset = "0x1F11110", VA = "0x1F11110")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000679")]
			[Address(RVA = "0x1F11118", Offset = "0x1F11118", VA = "0x1F11118")]
			set
			{
			}
		}

		[Token(Token = "0x17000111")]
		public bool IsInitialized
		{
			[Token(Token = "0x600067A")]
			[Address(RVA = "0x1F11164", Offset = "0x1F11164", VA = "0x1F11164")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6138", Offset = "0xFD6138")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600067B")]
			[Address(RVA = "0x1F1116C", Offset = "0x1F1116C", VA = "0x1F1116C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6148", Offset = "0xFD6148")]
			private set
			{
			}
		}

		[Token(Token = "0x17000112")]
		public int Count
		{
			[Token(Token = "0x600067C")]
			[Address(RVA = "0x1F11178", Offset = "0x1F11178", VA = "0x1F11178")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600067D")]
		[Address(RVA = "0x1F111F8", Offset = "0x1F111F8", VA = "0x1F111F8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600067E")]
		[Address(RVA = "0x1F11200", Offset = "0x1F11200", VA = "0x1F11200")]
		private void Update()
		{
		}

		[Token(Token = "0x600067F")]
		[Address(RVA = "0x1F11394", Offset = "0x1F11394", VA = "0x1F11394")]
		private void Initialize()
		{
		}

		[Token(Token = "0x6000680")]
		[Address(RVA = "0x1F117C0", Offset = "0x1F117C0", VA = "0x1F117C0")]
		public string GetUniqueIdentifier(string ident)
		{
			return null;
		}

		[Token(Token = "0x6000681")]
		public Pool<T> GetTypePool<T>()
		{
			return null;
		}

		[Token(Token = "0x6000682")]
		public ComponentPool GetComponentPool<T>() where T : UnityEngine.Component
		{
			return null;
		}

		[Token(Token = "0x6000683")]
		[Address(RVA = "0x1F11878", Offset = "0x1F11878", VA = "0x1F11878")]
		public PrefabPool GetPrefabPool(string identifier, params GameObject[] prefabs)
		{
			return null;
		}

		[Token(Token = "0x6000684")]
		public Pool<T> CreateTypePool<T>([Optional] PoolSettings settings)
		{
			return null;
		}

		[Token(Token = "0x6000685")]
		public ComponentPool CreateComponentPool<T>([Optional] PoolSettings settings) where T : UnityEngine.Component
		{
			return null;
		}

		[Token(Token = "0x6000686")]
		[Address(RVA = "0x1F11974", Offset = "0x1F11974", VA = "0x1F11974")]
		public PrefabPool CreatePrefabPool(string name, [Optional] PoolSettings settings, params GameObject[] prefabs)
		{
			return null;
		}

		[Token(Token = "0x6000687")]
		[Address(RVA = "0x1F11CB8", Offset = "0x1F11CB8", VA = "0x1F11CB8")]
		public List<IPool> FindPools(string identifierStartsWith)
		{
			return null;
		}

		[Token(Token = "0x6000688")]
		[Address(RVA = "0x1F11E28", Offset = "0x1F11E28", VA = "0x1F11E28")]
		public void DeletePools(string startsWith)
		{
		}

		[Token(Token = "0x6000689")]
		[Address(RVA = "0x1F11ED8", Offset = "0x1F11ED8", VA = "0x1F11ED8")]
		public void DeletePool(IPool pool)
		{
		}

		[Token(Token = "0x600068A")]
		public void DeletePool<T>()
		{
		}

		[Token(Token = "0x600068B")]
		[Address(RVA = "0x1F12088", Offset = "0x1F12088", VA = "0x1F12088")]
		public PoolManager()
		{
		}
	}
	[Token(Token = "0x20000C5")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xFC6400", Offset = "0xFC6400")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC6400", Offset = "0xFC6400")]
	public class PrefabPool : MonoBehaviour, IPool
	{
		[Token(Token = "0x40004F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFC9A38", Offset = "0xFC9A38")]
		[SerializeField]
		private string m_Identifier;

		[Token(Token = "0x40004F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private List<GameObject> m_Prefabs;

		[Token(Token = "0x40004FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Inline]
		[SerializeField]
		private PoolSettings m_Settings;

		[Token(Token = "0x40004FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private PoolManager mManager;

		[Token(Token = "0x40004FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<GameObject> mObjects;

		[Token(Token = "0x40004FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private double mLastTime;

		[Token(Token = "0x40004FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private double mDeltaTime;

		[Token(Token = "0x17000113")]
		public string Identifier
		{
			[Token(Token = "0x600068C")]
			[Address(RVA = "0x1F1244C", Offset = "0x1F1244C", VA = "0x1F1244C", Slot = "4")]
			get
			{
				return null;
			}
			[Token(Token = "0x600068D")]
			[Address(RVA = "0x1F12454", Offset = "0x1F12454", VA = "0x1F12454", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x17000114")]
		public List<GameObject> Prefabs
		{
			[Token(Token = "0x600068E")]
			[Address(RVA = "0x1F12580", Offset = "0x1F12580", VA = "0x1F12580")]
			get
			{
				return null;
			}
			[Token(Token = "0x600068F")]
			[Address(RVA = "0x1F12588", Offset = "0x1F12588", VA = "0x1F12588")]
			set
			{
			}
		}

		[Token(Token = "0x17000115")]
		public PoolSettings Settings
		{
			[Token(Token = "0x6000690")]
			[Address(RVA = "0x1F125A0", Offset = "0x1F125A0", VA = "0x1F125A0", Slot = "6")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000691")]
			[Address(RVA = "0x1F125A8", Offset = "0x1F125A8", VA = "0x1F125A8")]
			set
			{
			}
		}

		[Token(Token = "0x17000116")]
		public PoolManager Manager
		{
			[Token(Token = "0x6000692")]
			[Address(RVA = "0x1F124D4", Offset = "0x1F124D4", VA = "0x1F124D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000117")]
		public int Count
		{
			[Token(Token = "0x6000699")]
			[Address(RVA = "0x1F129C8", Offset = "0x1F129C8", VA = "0x1F129C8", Slot = "10")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000693")]
		[Address(RVA = "0x1F125F4", Offset = "0x1F125F4", VA = "0x1F125F4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000694")]
		[Address(RVA = "0x1F125F8", Offset = "0x1F125F8", VA = "0x1F125F8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000695")]
		[Address(RVA = "0x1F11B90", Offset = "0x1F11B90", VA = "0x1F11B90")]
		public void Initialize(string ident, PoolSettings settings, params GameObject[] prefabs)
		{
		}

		[Token(Token = "0x6000696")]
		[Address(RVA = "0x1F12760", Offset = "0x1F12760", VA = "0x1F12760", Slot = "9")]
		public void Update()
		{
		}

		[Token(Token = "0x6000697")]
		[Address(RVA = "0x1F1261C", Offset = "0x1F1261C", VA = "0x1F1261C", Slot = "8")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000698")]
		[Address(RVA = "0x1F12D08", Offset = "0x1F12D08", VA = "0x1F12D08", Slot = "7")]
		public void Clear()
		{
		}

		[Token(Token = "0x600069A")]
		[Address(RVA = "0x1F12DDC", Offset = "0x1F12DDC", VA = "0x1F12DDC")]
		public GameObject Pop([Optional] Transform parent)
		{
			return null;
		}

		[Token(Token = "0x600069B")]
		[Address(RVA = "0x1F12FFC", Offset = "0x1F12FFC", VA = "0x1F12FFC", Slot = "11")]
		public virtual void Push(GameObject item)
		{
		}

		[Token(Token = "0x600069C")]
		[Address(RVA = "0x1F12B4C", Offset = "0x1F12B4C", VA = "0x1F12B4C")]
		private GameObject create()
		{
			return null;
		}

		[Token(Token = "0x600069D")]
		[Address(RVA = "0x1F12AE4", Offset = "0x1F12AE4", VA = "0x1F12AE4")]
		private void destroy(GameObject go)
		{
		}

		[Token(Token = "0x600069E")]
		[Address(RVA = "0x1F12A18", Offset = "0x1F12A18", VA = "0x1F12A18")]
		private void log(string msg)
		{
		}

		[Token(Token = "0x600069F")]
		[Address(RVA = "0x1F131CC", Offset = "0x1F131CC", VA = "0x1F131CC")]
		private void setParent(Transform item, Transform parent)
		{
		}

		[Token(Token = "0x60006A0")]
		[Address(RVA = "0x1F12F9C", Offset = "0x1F12F9C", VA = "0x1F12F9C")]
		private void sendAfterPop(GameObject item)
		{
		}

		[Token(Token = "0x60006A1")]
		[Address(RVA = "0x1F1316C", Offset = "0x1F1316C", VA = "0x1F1316C")]
		private void sendBeforePush(GameObject item)
		{
		}

		[Token(Token = "0x60006A2")]
		[Address(RVA = "0x1F13270", Offset = "0x1F13270", VA = "0x1F13270")]
		public PrefabPool()
		{
		}
	}
}
namespace FluffyUnderware.DevTools.Extensions
{
	[Token(Token = "0x20000C6")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFC6488", Offset = "0xFC6488")]
	public static class TransformExt
	{
		[Token(Token = "0x60006A3")]
		[Address(RVA = "0x1F0EB40", Offset = "0x1F0EB40", VA = "0x1F0EB40")]
		public static void CopyFrom(this Transform t, Transform other)
		{
		}

		[Token(Token = "0x60006A4")]
		[Address(RVA = "0x1F0EBB0", Offset = "0x1F0EBB0", VA = "0x1F0EBB0")]
		public static void SetChildrenHideFlags(this Transform t, HideFlags flags)
		{
		}
	}
	[Token(Token = "0x20000C7")]
	public static class ObjectExt
	{
		[Token(Token = "0x60006A5")]
		[Address(RVA = "0x1F0DFBC", Offset = "0x1F0DFBC", VA = "0x1F0DFBC")]
		public static void Destroy(this UnityEngine.Object c)
		{
		}

		[Token(Token = "0x60006A6")]
		[Address(RVA = "0x1F0E024", Offset = "0x1F0E024", VA = "0x1F0E024")]
		public static string ToDumpString(this object o)
		{
			return null;
		}
	}
	[Token(Token = "0x20000C8")]
	public static class Vector2Ext
	{
		[Token(Token = "0x60006A7")]
		[Address(RVA = "0x1F0F928", Offset = "0x1F0F928", VA = "0x1F0F928")]
		public static Vector2 Snap(this Vector2 v, float snapX, float snapY = -1f)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60006A8")]
		[Address(RVA = "0x1F0F994", Offset = "0x1F0F994", VA = "0x1F0F994")]
		public static float AngleSigned(this Vector2 a, Vector2 b)
		{
			return default(float);
		}

		[Token(Token = "0x60006A9")]
		[Address(RVA = "0x1F0FA6C", Offset = "0x1F0FA6C", VA = "0x1F0FA6C")]
		public static Vector2 LeftNormal(this Vector2 v)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60006AA")]
		[Address(RVA = "0x1F0FAA4", Offset = "0x1F0FAA4", VA = "0x1F0FAA4")]
		public static Vector2 RightNormal(this Vector2 v)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60006AB")]
		[Address(RVA = "0x1F0FADC", Offset = "0x1F0FADC", VA = "0x1F0FADC")]
		public static Vector2 Rotate(this Vector2 v, float degree)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60006AC")]
		[Address(RVA = "0x1F0FBA0", Offset = "0x1F0FBA0", VA = "0x1F0FBA0")]
		public static Vector2 ToVector3(this Vector2 v)
		{
			return default(Vector2);
		}
	}
	[Token(Token = "0x20000C9")]
	public static class Vector3Ext
	{
		[Token(Token = "0x60006AD")]
		[Address(RVA = "0x1F0FC44", Offset = "0x1F0FC44", VA = "0x1F0FC44")]
		public static float AngleSigned(this Vector3 a, Vector3 b, Vector3 normal)
		{
			return default(float);
		}

		[Token(Token = "0x60006AE")]
		[Address(RVA = "0x1F0FD88", Offset = "0x1F0FD88", VA = "0x1F0FD88")]
		public static Vector3 RotateAround(this Vector3 point, Vector3 origin, Quaternion rotation)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006AF")]
		[Address(RVA = "0x1F0FEB8", Offset = "0x1F0FEB8", VA = "0x1F0FEB8")]
		public static Vector2 ToVector2(this Vector3 v)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60006B0")]
		[Address(RVA = "0x1F0FEE4", Offset = "0x1F0FEE4", VA = "0x1F0FEE4")]
		public static bool Approximately(this Vector3 v1, Vector3 v2)
		{
			return default(bool);
		}

		[Token(Token = "0x60006B1")]
		[Address(RVA = "0x1F0FFA0", Offset = "0x1F0FFA0", VA = "0x1F0FFA0")]
		public static bool NotApproximately(this Vector3 v1, Vector3 v2)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20000CA")]
	public static class QuaternionExt
	{
		[Token(Token = "0x60006B2")]
		[Address(RVA = "0x1F0E098", Offset = "0x1F0E098", VA = "0x1F0E098")]
		public static bool SameOrientation(this Quaternion q1, Quaternion q2)
		{
			return default(bool);
		}

		[Token(Token = "0x60006B3")]
		[Address(RVA = "0x1F0E198", Offset = "0x1F0E198", VA = "0x1F0E198")]
		public static bool DifferentOrientation(this Quaternion q1, Quaternion q2)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20000CB")]
	public static class CameraExt
	{
		[Token(Token = "0x40004FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Plane[] camPlanes;

		[Token(Token = "0x4000500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Vector3 camPos;

		[Token(Token = "0x4000501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static Vector3 camForward;

		[Token(Token = "0x4000502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static float fov;

		[Token(Token = "0x4000503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private static float screenW;

		[Token(Token = "0x4000504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static float screenH;

		[Token(Token = "0x60006B4")]
		[Address(RVA = "0x1F0C3D4", Offset = "0x1F0C3D4", VA = "0x1F0C3D4")]
		public static bool BoundsInView(this Camera c, Bounds bounds)
		{
			return default(bool);
		}

		[Token(Token = "0x60006B5")]
		[Address(RVA = "0x1F0C724", Offset = "0x1F0C724", VA = "0x1F0C724")]
		public static bool BoundsPartiallyInView(this Camera c, Bounds bounds)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20000CC")]
	public static class GameObjectExt
	{
		[Token(Token = "0x60006B7")]
		[Address(RVA = "0x1F0D6EC", Offset = "0x1F0D6EC", VA = "0x1F0D6EC")]
		public static GameObject DuplicateGameObject(this GameObject source, Transform newParent, bool keepPrefabReference = false)
		{
			return null;
		}

		[Token(Token = "0x60006B8")]
		[Address(RVA = "0x1F0D01C", Offset = "0x1F0D01C", VA = "0x1F0D01C")]
		public static void StripComponents(this GameObject go, params Type[] toKeep)
		{
		}
	}
	[Token(Token = "0x20000CD")]
	public static class ComponentExt
	{
		[Token(Token = "0x60006B9")]
		[Address(RVA = "0x1F0CF30", Offset = "0x1F0CF30", VA = "0x1F0CF30")]
		public static void StripComponents(this UnityEngine.Component c, params Type[] toKeep)
		{
		}

		[Token(Token = "0x60006BA")]
		[Address(RVA = "0x1F0D204", Offset = "0x1F0D204", VA = "0x1F0D204")]
		public static GameObject AddChildGameObject(this UnityEngine.Component c, string name)
		{
			return null;
		}

		[Token(Token = "0x60006BB")]
		public static T AddChildGameObject<T>(this UnityEngine.Component c, string name) where T : UnityEngine.Component
		{
			return null;
		}

		[Token(Token = "0x60006BC")]
		public static T DuplicateGameObject<T>(this UnityEngine.Component source, Transform newParent, bool keepPrefabConnection = false) where T : UnityEngine.Component
		{
			return null;
		}

		[Token(Token = "0x60006BD")]
		[Address(RVA = "0x1F0D2B0", Offset = "0x1F0D2B0", VA = "0x1F0D2B0")]
		public static UnityEngine.Component DuplicateGameObject(this UnityEngine.Component source, Transform newParent, bool keepPrefabConnection = false)
		{
			return null;
		}
	}
	[Token(Token = "0x20000CE")]
	public static class ColorExt
	{
		[Token(Token = "0x60006BE")]
		[Address(RVA = "0x1F0CD1C", Offset = "0x1F0CD1C", VA = "0x1F0CD1C")]
		public static string ToHtml(this Color c)
		{
			return null;
		}
	}
	[Token(Token = "0x20000CF")]
	public static class EnumExt
	{
		[Token(Token = "0x60006BF")]
		[Address(RVA = "0x1F0D4D4", Offset = "0x1F0D4D4", VA = "0x1F0D4D4")]
		public static bool HasFlag(this Enum variable, params Enum[] flags)
		{
			return default(bool);
		}

		[Token(Token = "0x60006C0")]
		public static bool HasFlag<T>(this T value, T flag) where T : struct
		{
			return default(bool);
		}

		[Token(Token = "0x60006C1")]
		public static T Set<T>(this Enum value, T append)
		{
			return (T)null;
		}

		[Token(Token = "0x60006C2")]
		public static T Set<T>(this Enum value, T append, bool OnOff)
		{
			return (T)null;
		}

		[Token(Token = "0x60006C3")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD6348", Offset = "0xFD6348")]
		public static T Toggle<T>(this Enum value, T toggleValue)
		{
			return (T)null;
		}

		[Token(Token = "0x60006C4")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD6394", Offset = "0xFD6394")]
		public static T SetAll<T>(this Enum value)
		{
			return (T)null;
		}
	}
	[Token(Token = "0x20000D0")]
	public static class RectExt
	{
		[Token(Token = "0x60006C5")]
		[Address(RVA = "0x1F0E298", Offset = "0x1F0E298", VA = "0x1F0E298")]
		public static Rect Set(this Rect rect, Vector2 pos, Vector2 size)
		{
			return default(Rect);
		}

		[Token(Token = "0x60006C6")]
		[Address(RVA = "0x1F0E2F4", Offset = "0x1F0E2F4", VA = "0x1F0E2F4")]
		public static Rect SetBetween(this Rect rect, Vector2 pos, Vector2 pos2)
		{
			return default(Rect);
		}

		[Token(Token = "0x60006C7")]
		[Address(RVA = "0x1F0E350", Offset = "0x1F0E350", VA = "0x1F0E350")]
		public static Rect SetPosition(this Rect rect, Vector2 pos)
		{
			return default(Rect);
		}

		[Token(Token = "0x60006C8")]
		[Address(RVA = "0x1F0E3BC", Offset = "0x1F0E3BC", VA = "0x1F0E3BC")]
		public static Rect SetPosition(this Rect rect, float x, float y)
		{
			return default(Rect);
		}

		[Token(Token = "0x60006C9")]
		[Address(RVA = "0x1F0E428", Offset = "0x1F0E428", VA = "0x1F0E428")]
		public static Vector2 GetSize(this Rect rect)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60006CA")]
		[Address(RVA = "0x1F0E488", Offset = "0x1F0E488", VA = "0x1F0E488")]
		public static Rect SetSize(this Rect rect, Vector2 size)
		{
			return default(Rect);
		}

		[Token(Token = "0x60006CB")]
		[Address(RVA = "0x1F0E4F4", Offset = "0x1F0E4F4", VA = "0x1F0E4F4")]
		public static Rect ScaleBy(this Rect rect, int pixel)
		{
			return default(Rect);
		}

		[Token(Token = "0x60006CC")]
		[Address(RVA = "0x1F0E4FC", Offset = "0x1F0E4FC", VA = "0x1F0E4FC")]
		public static Rect ScaleBy(this Rect rect, int x, int y)
		{
			return default(Rect);
		}

		[Token(Token = "0x60006CD")]
		[Address(RVA = "0x1F0E5D4", Offset = "0x1F0E5D4", VA = "0x1F0E5D4")]
		public static Rect ShiftBy(this Rect rect, int x, int y)
		{
			return default(Rect);
		}

		[Token(Token = "0x60006CE")]
		[Address(RVA = "0x1F0E664", Offset = "0x1F0E664", VA = "0x1F0E664")]
		public static Rect Include(this Rect rect, Rect other)
		{
			return default(Rect);
		}
	}
	[Token(Token = "0x20000D1")]
	public static class StringExt
	{
		[Token(Token = "0x60006CF")]
		[Address(RVA = "0x1F0E7D0", Offset = "0x1F0E7D0", VA = "0x1F0E7D0")]
		public static Color ColorFromHtml(this string hexString)
		{
			return default(Color);
		}

		[Token(Token = "0x60006D0")]
		[Address(RVA = "0x1F0EA8C", Offset = "0x1F0EA8C", VA = "0x1F0EA8C")]
		public static string TrimStart(this string s, string trim, StringComparison compare = StringComparison.CurrentCultureIgnoreCase)
		{
			return null;
		}

		[Token(Token = "0x60006D1")]
		[Address(RVA = "0x1F0EAE0", Offset = "0x1F0EAE0", VA = "0x1F0EAE0")]
		public static string TrimEnd(this string s, string trim, StringComparison compare = StringComparison.CurrentCultureIgnoreCase)
		{
			return null;
		}
	}
	[Token(Token = "0x20000D2")]
	public static class IEnumerableExt
	{
		[Token(Token = "0x60006D2")]
		public static void ForEach<T>(this IEnumerable<T> ie, Action<T> action)
		{
		}
	}
	[Token(Token = "0x20000D3")]
	public static class ArrayExt
	{
		[Token(Token = "0x60006D3")]
		public static T[] SubArray<T>(this T[] data, int index, int length)
		{
			return null;
		}

		[Token(Token = "0x60006D4")]
		public static T[] RemoveAt<T>(this T[] source, int index)
		{
			return null;
		}

		[Token(Token = "0x60006D5")]
		public static T[] InsertAt<T>(this T[] source, int index)
		{
			return null;
		}

		[Token(Token = "0x60006D6")]
		public static T[] Swap<T>(this T[] source, int index, int with)
		{
			return null;
		}

		[Token(Token = "0x60006D7")]
		public static T[] Add<T>(this T[] source, T item)
		{
			return null;
		}

		[Token(Token = "0x60006D8")]
		public static T[] AddRange<T>(this T[] source, T[] items)
		{
			return null;
		}

		[Token(Token = "0x60006D9")]
		public static T[] RemoveDuplicates<T>(this T[] source)
		{
			return null;
		}

		[Token(Token = "0x60006DA")]
		public static int IndexOf<T>(this T[] source, T item)
		{
			return default(int);
		}

		[Token(Token = "0x60006DB")]
		public static T[] Remove<T>(this T[] source, T item)
		{
			return null;
		}
	}
	[Token(Token = "0x20000D4")]
	public static class MeshFilterExt
	{
		[Token(Token = "0x60006DC")]
		[Address(RVA = "0x1F0D7E8", Offset = "0x1F0D7E8", VA = "0x1F0D7E8")]
		public static Mesh PrepareNewShared(this MeshFilter m, string name = "Mesh")
		{
			return null;
		}

		[Token(Token = "0x60006DD")]
		[Address(RVA = "0x1F0D96C", Offset = "0x1F0D96C", VA = "0x1F0D96C")]
		public static void CalculateTangents(this MeshFilter m)
		{
		}
	}
	[Token(Token = "0x20000D5")]
	public static class TypeExt
	{
		[Serializable]
		[Token(Token = "0x2000219")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC8934", Offset = "0xFC8934")]
		private sealed class <>c
		{
			[Token(Token = "0x4000B00")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000B01")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<Assembly, IEnumerable<Type>> <>9__1_0;

			[Token(Token = "0x6000FBC")]
			[Address(RVA = "0x1F0F8FC", Offset = "0x1F0F8FC", VA = "0x1F0F8FC")]
			public <>c()
			{
			}

			[Token(Token = "0x6000FBD")]
			[Address(RVA = "0x1F0F904", Offset = "0x1F0F904", VA = "0x1F0F904")]
			internal IEnumerable<Type> <GetLoadedTypes>b__1_0(Assembly a)
			{
				return null;
			}
		}

		[Token(Token = "0x60006DE")]
		[Address(RVA = "0x1F0EC80", Offset = "0x1F0EC80", VA = "0x1F0EC80")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD6570", Offset = "0xFD6570")]
		public static Type[] GetAllTypes(this Type typeFromAssembly)
		{
			return null;
		}

		[Token(Token = "0x60006DF")]
		[Address(RVA = "0x1F05650", Offset = "0x1F05650", VA = "0x1F05650")]
		public static Type[] GetLoadedTypes()
		{
			return null;
		}

		[Token(Token = "0x60006E0")]
		[Address(RVA = "0x1F0ECB8", Offset = "0x1F0ECB8", VA = "0x1F0ECB8")]
		public static IEnumerable<Assembly> GetLoadedAssemblies()
		{
			return null;
		}

		[Token(Token = "0x60006E1")]
		public static Dictionary<U, Type> GetAllTypesWithAttribute<U>(this Type type)
		{
			return null;
		}

		[Token(Token = "0x60006E2")]
		public static List<FieldInfo> GetFieldsWithAttribute<T>(this Type type, bool includeInherited = false, bool includePrivate = false) where T : Attribute
		{
			return null;
		}

		[Token(Token = "0x60006E3")]
		public static T GetCustomAttribute<T>(this Type type) where T : Attribute
		{
			return null;
		}

		[Token(Token = "0x60006E4")]
		[Address(RVA = "0x1F03E88", Offset = "0x1F03E88", VA = "0x1F03E88")]
		public static MethodInfo MethodByName(this Type type, string name, bool includeInherited = false, bool includePrivate = false)
		{
			return null;
		}

		[Token(Token = "0x60006E5")]
		[Address(RVA = "0x1F0638C", Offset = "0x1F0638C", VA = "0x1F0638C")]
		public static FieldInfo FieldByName(this Type type, string name, bool includeInherited = false, bool includePrivate = false)
		{
			return null;
		}

		[Token(Token = "0x60006E6")]
		[Address(RVA = "0x1F063C8", Offset = "0x1F063C8", VA = "0x1F063C8")]
		public static PropertyInfo PropertyByName(this Type type, string name, bool includeInherited = false, bool includePrivate = false)
		{
			return null;
		}

		[Token(Token = "0x60006E7")]
		[Address(RVA = "0x1F080C0", Offset = "0x1F080C0", VA = "0x1F080C0")]
		public static FieldInfo[] GetAllFields(this Type type, bool includeInherited = false, bool includePrivate = false)
		{
			return null;
		}

		[Token(Token = "0x60006E8")]
		[Address(RVA = "0x1F08CE8", Offset = "0x1F08CE8", VA = "0x1F08CE8")]
		public static PropertyInfo[] GetAllProperties(this Type type, bool includeInherited = false, bool includePrivate = false)
		{
			return null;
		}

		[Token(Token = "0x60006E9")]
		[Address(RVA = "0x1F0F148", Offset = "0x1F0F148", VA = "0x1F0F148")]
		public static bool IsFrameworkType(this Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x60006EA")]
		[Address(RVA = "0x1F0F254", Offset = "0x1F0F254", VA = "0x1F0F254")]
		public static bool IsArrayOrList(this Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x60006EB")]
		[Address(RVA = "0x1F08E88", Offset = "0x1F08E88", VA = "0x1F08E88")]
		public static Type GetEnumerableType(this Type t)
		{
			return null;
		}

		[Token(Token = "0x60006EC")]
		[Address(RVA = "0x1F0F33C", Offset = "0x1F0F33C", VA = "0x1F0F33C")]
		private static Type FindIEnumerable(Type seqType)
		{
			return null;
		}

		[Token(Token = "0x60006ED")]
		[Address(RVA = "0x1F0ECDC", Offset = "0x1F0ECDC", VA = "0x1F0ECDC")]
		private static MethodInfo GetMethodIncludingBaseClasses(this Type type, string name, BindingFlags bindingFlags)
		{
			return null;
		}

		[Token(Token = "0x60006EE")]
		[Address(RVA = "0x1F0EE50", Offset = "0x1F0EE50", VA = "0x1F0EE50")]
		private static FieldInfo GetFieldIncludingBaseClasses(this Type type, string name, BindingFlags bindingFlags)
		{
			return null;
		}

		[Token(Token = "0x60006EF")]
		[Address(RVA = "0x1F0EFD4", Offset = "0x1F0EFD4", VA = "0x1F0EFD4")]
		private static PropertyInfo GetPropertyIncludingBaseClasses(this Type type, string name, BindingFlags bindingFlags)
		{
			return null;
		}

		[Token(Token = "0x60006F0")]
		[Address(RVA = "0x1F0F798", Offset = "0x1F0F798", VA = "0x1F0F798")]
		public static bool Matches(this Type type, params Type[] types)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20000D6")]
	public static class FieldInfoExt
	{
		[Token(Token = "0x60006F1")]
		public static T GetCustomAttribute<T>(this FieldInfo field) where T : Attribute
		{
			return null;
		}
	}
}
namespace FluffyUnderware.Curvy
{
	[Token(Token = "0x20000D7")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC65D4", Offset = "0xFC65D4")]
	public class MetaCGOptions : CurvyMetadataBase
	{
		[Token(Token = "0x4000505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Positive]
		[SerializeField]
		private int m_MaterialID;

		[Token(Token = "0x4000506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private bool m_HardEdge;

		[Token(Token = "0x4000507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Positive]
		[SerializeField]
		private float m_MaxStepDistance;

		[Token(Token = "0x4000508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0xFC9BA8", Offset = "0xFC9BA8")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFC9BA8", Offset = "0xFC9BA8")]
		[SerializeField]
		private bool m_UVEdge;

		[Token(Token = "0x4000509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		[Positive]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFC9CA8", Offset = "0xFC9CA8")]
		[SerializeField]
		private bool m_ExplicitU;

		[Token(Token = "0x400050A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFC9D6C", Offset = "0xFC9D6C")]
		[AttributeAttribute(Name = "FieldActionAttribute", RVA = "0xFC9D6C", Offset = "0xFC9D6C")]
		[Positive]
		[SerializeField]
		private float m_FirstU;

		[Token(Token = "0x400050B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFC9E58", Offset = "0xFC9E58")]
		[Positive]
		[SerializeField]
		private float m_SecondU;

		[Token(Token = "0x17000118")]
		public int MaterialID
		{
			[Token(Token = "0x60006F2")]
			[Address(RVA = "0x1DF5F48", Offset = "0x1DF5F48", VA = "0x1DF5F48")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60006F3")]
			[Address(RVA = "0x1DF5F50", Offset = "0x1DF5F50", VA = "0x1DF5F50")]
			set
			{
			}
		}

		[Token(Token = "0x17000119")]
		public bool HardEdge
		{
			[Token(Token = "0x60006F4")]
			[Address(RVA = "0x1DF5FF4", Offset = "0x1DF5FF4", VA = "0x1DF5FF4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60006F5")]
			[Address(RVA = "0x1DF5FFC", Offset = "0x1DF5FFC", VA = "0x1DF5FFC")]
			set
			{
			}
		}

		[Token(Token = "0x1700011A")]
		public bool UVEdge
		{
			[Token(Token = "0x60006F6")]
			[Address(RVA = "0x1DF6024", Offset = "0x1DF6024", VA = "0x1DF6024")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60006F7")]
			[Address(RVA = "0x1DF602C", Offset = "0x1DF602C", VA = "0x1DF602C")]
			set
			{
			}
		}

		[Token(Token = "0x1700011B")]
		public bool ExplicitU
		{
			[Token(Token = "0x60006F8")]
			[Address(RVA = "0x1DF6054", Offset = "0x1DF6054", VA = "0x1DF6054")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60006F9")]
			[Address(RVA = "0x1DF605C", Offset = "0x1DF605C", VA = "0x1DF605C")]
			set
			{
			}
		}

		[Token(Token = "0x1700011C")]
		public float FirstU
		{
			[Token(Token = "0x60006FA")]
			[Address(RVA = "0x1DF6084", Offset = "0x1DF6084", VA = "0x1DF6084")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60006FB")]
			[Address(RVA = "0x1DF608C", Offset = "0x1DF608C", VA = "0x1DF608C")]
			set
			{
			}
		}

		[Token(Token = "0x1700011D")]
		public float SecondU
		{
			[Token(Token = "0x60006FC")]
			[Address(RVA = "0x1DF60A8", Offset = "0x1DF60A8", VA = "0x1DF60A8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60006FD")]
			[Address(RVA = "0x1DF60B0", Offset = "0x1DF60B0", VA = "0x1DF60B0")]
			set
			{
			}
		}

		[Token(Token = "0x1700011E")]
		public float MaxStepDistance
		{
			[Token(Token = "0x60006FE")]
			[Address(RVA = "0x1DF60CC", Offset = "0x1DF60CC", VA = "0x1DF60CC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60006FF")]
			[Address(RVA = "0x1DF60D4", Offset = "0x1DF60D4", VA = "0x1DF60D4")]
			set
			{
			}
		}

		[Token(Token = "0x1700011F")]
		public bool HasDifferentMaterial
		{
			[Token(Token = "0x6000700")]
			[Address(RVA = "0x1DF519C", Offset = "0x1DF519C", VA = "0x1DF519C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000120")]
		private bool showUVEdge
		{
			[Token(Token = "0x6000701")]
			[Address(RVA = "0x1DF6178", Offset = "0x1DF6178", VA = "0x1DF6178")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000121")]
		private bool showExplicitU
		{
			[Token(Token = "0x6000702")]
			[Address(RVA = "0x1DF62C8", Offset = "0x1DF62C8", VA = "0x1DF62C8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000122")]
		private bool showFirstU
		{
			[Token(Token = "0x6000703")]
			[Address(RVA = "0x1DF635C", Offset = "0x1DF635C", VA = "0x1DF635C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000123")]
		private bool showSecondU
		{
			[Token(Token = "0x6000704")]
			[Address(RVA = "0x1DF63FC", Offset = "0x1DF63FC", VA = "0x1DF63FC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000705")]
		[Address(RVA = "0x1DF6410", Offset = "0x1DF6410", VA = "0x1DF6410")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000706")]
		[Address(RVA = "0x1DF50E8", Offset = "0x1DF50E8", VA = "0x1DF50E8")]
		public float GetDefinedFirstU(float defaultValue)
		{
			return default(float);
		}

		[Token(Token = "0x6000707")]
		[Address(RVA = "0x1DF5134", Offset = "0x1DF5134", VA = "0x1DF5134")]
		public float GetDefinedSecondU(float defaultValue)
		{
			return default(float);
		}

		[Token(Token = "0x6000708")]
		[Address(RVA = "0x1DF64C8", Offset = "0x1DF64C8", VA = "0x1DF64C8")]
		public MetaCGOptions()
		{
		}
	}
	[Token(Token = "0x20000D8")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFC660C", Offset = "0xFC660C")]
	public interface ICurvyMetadata
	{
	}
	[Token(Token = "0x20000D9")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFC6644", Offset = "0xFC6644")]
	public interface ICurvyInterpolatableMetadata : ICurvyMetadata
	{
		[Token(Token = "0x17000124")]
		object Value
		{
			[Token(Token = "0x6000709")]
			get;
		}

		[Token(Token = "0x600070A")]
		object InterpolateObject(ICurvyMetadata b, float f);
	}
	[Token(Token = "0x20000DA")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFC667C", Offset = "0xFC667C")]
	public interface ICurvyInterpolatableMetadata<U> : ICurvyInterpolatableMetadata, ICurvyMetadata
	{
		[Token(Token = "0x600070B")]
		U Interpolate(ICurvyMetadata b, float f);
	}
	[Token(Token = "0x20000DB")]
	public enum OrientationModeEnum
	{
		[Token(Token = "0x400050D")]
		None,
		[Token(Token = "0x400050E")]
		Orientation,
		[Token(Token = "0x400050F")]
		Tangent
	}
	[Token(Token = "0x20000DC")]
	public enum OrientationAxisEnum
	{
		[Token(Token = "0x4000511")]
		Up,
		[Token(Token = "0x4000512")]
		Down,
		[Token(Token = "0x4000513")]
		Forward,
		[Token(Token = "0x4000514")]
		Backward,
		[Token(Token = "0x4000515")]
		Left,
		[Token(Token = "0x4000516")]
		Right
	}
	[Token(Token = "0x20000DD")]
	public enum ConnectionHeadingEnum
	{
		[Token(Token = "0x4000518")]
		Minus = -1,
		[Token(Token = "0x4000519")]
		Sharp,
		[Token(Token = "0x400051A")]
		Plus,
		[Token(Token = "0x400051B")]
		Auto
	}
	[Token(Token = "0x20000DE")]
	public static class ConnectionHeadingEnumMethods
	{
		[Token(Token = "0x600070C")]
		[Address(RVA = "0x1DC1550", Offset = "0x1DC1550", VA = "0x1DC1550")]
		public static ConnectionHeadingEnum ResolveAuto(this ConnectionHeadingEnum heading, CurvySplineSegment followUp)
		{
			return default(ConnectionHeadingEnum);
		}
	}
	[Token(Token = "0x20000DF")]
	public enum CurvyUpdateMethod
	{
		[Token(Token = "0x400051D")]
		Update,
		[Token(Token = "0x400051E")]
		LateUpdate,
		[Token(Token = "0x400051F")]
		FixedUpdate
	}
	[Token(Token = "0x20000E0")]
	public enum CurvyRepeatingOrderEnum
	{
		[Token(Token = "0x4000521")]
		Random,
		[Token(Token = "0x4000522")]
		Row
	}
	[Token(Token = "0x20000E1")]
	public enum CurvyPlane
	{
		[Token(Token = "0x4000524")]
		XY,
		[Token(Token = "0x4000525")]
		XZ,
		[Token(Token = "0x4000526")]
		YZ
	}
	[Token(Token = "0x20000E2")]
	public enum CurvyPositionMode
	{
		[Token(Token = "0x4000528")]
		Relative,
		[Token(Token = "0x4000529")]
		WorldUnits
	}
	[Token(Token = "0x20000E3")]
	[Flags]
	public enum CurvyBezierModeEnum
	{
		[Token(Token = "0x400052B")]
		None = 0,
		[Token(Token = "0x400052C")]
		Direction = 1,
		[Token(Token = "0x400052D")]
		Length = 2,
		[Token(Token = "0x400052E")]
		Connections = 4,
		[Token(Token = "0x400052F")]
		Combine = 8
	}
	[Token(Token = "0x20000E4")]
	public enum CurvyAdvBezierModeEnum
	{
		[Token(Token = "0x4000531")]
		None = 0,
		[Token(Token = "0x4000532")]
		Direction = 1,
		[Token(Token = "0x4000533")]
		Length = 2,
		[Token(Token = "0x4000534")]
		Combine = 8
	}
	[Token(Token = "0x20000E5")]
	public enum CurvyInterpolation
	{
		[Token(Token = "0x4000536")]
		Linear,
		[Token(Token = "0x4000537")]
		CatmullRom,
		[Token(Token = "0x4000538")]
		TCB,
		[Token(Token = "0x4000539")]
		Bezier
	}
	[Token(Token = "0x20000E6")]
	public enum CurvyClamping
	{
		[Token(Token = "0x400053B")]
		Clamp,
		[Token(Token = "0x400053C")]
		Loop,
		[Token(Token = "0x400053D")]
		PingPong
	}
	[Token(Token = "0x20000E7")]
	public enum CurvyOrientation
	{
		[Token(Token = "0x400053F")]
		None,
		[Token(Token = "0x4000540")]
		Dynamic,
		[Token(Token = "0x4000541")]
		Static
	}
	[Token(Token = "0x20000E8")]
	public enum CurvyOrientationSwirl
	{
		[Token(Token = "0x4000543")]
		None,
		[Token(Token = "0x4000544")]
		Segment,
		[Token(Token = "0x4000545")]
		AnchorGroup,
		[Token(Token = "0x4000546")]
		AnchorGroupAbs
	}
	[Token(Token = "0x20000E9")]
	public enum CurvySplineGizmos
	{
		[Token(Token = "0x4000548")]
		None = 0,
		[Token(Token = "0x4000549")]
		Curve = 2,
		[Token(Token = "0x400054A")]
		Approximation = 4,
		[Token(Token = "0x400054B")]
		Tangents = 8,
		[Token(Token = "0x400054C")]
		Orientation = 16,
		[Token(Token = "0x400054D")]
		Labels = 32,
		[Token(Token = "0x400054E")]
		Metadata = 64,
		[Token(Token = "0x400054F")]
		Bounds = 128,
		[Token(Token = "0x4000550")]
		All = 65535
	}
	[Token(Token = "0x20000EA")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xFC66D4", Offset = "0xFC66D4")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC66D4", Offset = "0xFC66D4")]
	public class CurvyConnection : MonoBehaviour, ISerializationCallbackReceiver
	{
		[Serializable]
		[Token(Token = "0x200021A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC8944", Offset = "0xFC8944")]
		private sealed class <>c
		{
			[Token(Token = "0x4000B02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000B03")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Predicate<CurvySplineSegment> <>9__24_0;

			[Token(Token = "0x4000B04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Predicate<CurvySplineSegment> <>9__26_0;

			[Token(Token = "0x4000B05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Predicate<CurvySplineSegment> <>9__27_0;

			[Token(Token = "0x6000FBF")]
			[Address(RVA = "0x2020270", Offset = "0x2020270", VA = "0x2020270")]
			public <>c()
			{
			}

			[Token(Token = "0x6000FC0")]
			[Address(RVA = "0x2020278", Offset = "0x2020278", VA = "0x2020278")]
			internal bool <OnSceneLoaded>b__24_0(CurvySplineSegment cp)
			{
				return default(bool);
			}

			[Token(Token = "0x6000FC1")]
			[Address(RVA = "0x20202E4", Offset = "0x20202E4", VA = "0x20202E4")]
			internal bool <OnBeforeSerialize>b__26_0(CurvySplineSegment cp)
			{
				return default(bool);
			}

			[Token(Token = "0x6000FC2")]
			[Address(RVA = "0x20202F0", Offset = "0x20202F0", VA = "0x20202F0")]
			internal bool <OnAfterDeserialize>b__27_0(CurvySplineSegment cp)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Hide]
		private List<CurvySplineSegment> m_ControlPoints;

		[Token(Token = "0x4000552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ReadOnlyCollection<CurvySplineSegment> readOnlyControlPoints;

		[Token(Token = "0x4000553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Couple<Vector3, Quaternion> processedConnectionCoordinates;

		[Token(Token = "0x4000554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<CurvySplineSegment, Couple<Vector3, Quaternion>> processedControlPointsCoordinates;

		[Token(Token = "0x17000125")]
		public ReadOnlyCollection<CurvySplineSegment> ControlPointsList
		{
			[Token(Token = "0x600070D")]
			[Address(RVA = "0x201B5E4", Offset = "0x201B5E4", VA = "0x201B5E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000126")]
		public int Count
		{
			[Token(Token = "0x600070E")]
			[Address(RVA = "0x201E800", Offset = "0x201E800", VA = "0x201E800")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000127")]
		public CurvySplineSegment Item
		{
			[Token(Token = "0x600070F")]
			[Address(RVA = "0x201E850", Offset = "0x201E850", VA = "0x201E850")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000710")]
		[Address(RVA = "0x201E8C8", Offset = "0x201E8C8", VA = "0x201E8C8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000711")]
		[Address(RVA = "0x201EB7C", Offset = "0x201EB7C", VA = "0x201EB7C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000712")]
		[Address(RVA = "0x201EC18", Offset = "0x201EC18", VA = "0x201EC18")]
		private void Update()
		{
		}

		[Token(Token = "0x6000713")]
		[Address(RVA = "0x201F064", Offset = "0x201F064", VA = "0x201F064")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000714")]
		[Address(RVA = "0x201F09C", Offset = "0x201F09C", VA = "0x201F09C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000715")]
		[Address(RVA = "0x201F0D4", Offset = "0x201F0D4", VA = "0x201F0D4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000716")]
		[Address(RVA = "0x201F1FC", Offset = "0x201F1FC", VA = "0x201F1FC")]
		public static CurvyConnection Create(params CurvySplineSegment[] controlPoints)
		{
			return null;
		}

		[Token(Token = "0x6000717")]
		[Address(RVA = "0x201F398", Offset = "0x201F398", VA = "0x201F398")]
		public void AddControlPoints(params CurvySplineSegment[] controlPoints)
		{
		}

		[Token(Token = "0x6000718")]
		[Address(RVA = "0x201F5E8", Offset = "0x201F5E8", VA = "0x201F5E8")]
		public void AutoSetFollowUp()
		{
		}

		[Token(Token = "0x6000719")]
		[Address(RVA = "0x201F8B4", Offset = "0x201F8B4", VA = "0x201F8B4")]
		public void RemoveControlPoint(CurvySplineSegment controlPoint, bool destroySelfIfEmpty = true)
		{
		}

		[Token(Token = "0x600071A")]
		[Address(RVA = "0x201F97C", Offset = "0x201F97C", VA = "0x201F97C")]
		public void Delete()
		{
		}

		[Token(Token = "0x600071B")]
		[Address(RVA = "0x201FA10", Offset = "0x201FA10", VA = "0x201FA10")]
		public List<CurvySplineSegment> OtherControlPoints(CurvySplineSegment source)
		{
			return null;
		}

		[Token(Token = "0x600071C")]
		[Address(RVA = "0x201FAAC", Offset = "0x201FAAC", VA = "0x201FAAC")]
		public void SetSynchronisationPositionAndRotation(Vector3 referencePosition, Quaternion referenceRotation)
		{
		}

		[Token(Token = "0x600071D")]
		[Address(RVA = "0x201EC50", Offset = "0x201EC50", VA = "0x201EC50")]
		private void DoUpdate()
		{
		}

		[Token(Token = "0x600071E")]
		[Address(RVA = "0x201FDCC", Offset = "0x201FDCC", VA = "0x201FDCC")]
		private void OnSceneLoaded(Scene arg0, LoadSceneMode arg1)
		{
		}

		[Token(Token = "0x600071F")]
		[Address(RVA = "0x201E96C", Offset = "0x201E96C", VA = "0x201E96C")]
		private void ResetProcessedCoordinates()
		{
		}

		[Token(Token = "0x6000720")]
		[Address(RVA = "0x201FF58", Offset = "0x201FF58", VA = "0x201FF58", Slot = "4")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x6000721")]
		[Address(RVA = "0x2020058", Offset = "0x2020058", VA = "0x2020058", Slot = "5")]
		public void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x6000722")]
		[Address(RVA = "0x2020158", Offset = "0x2020158", VA = "0x2020158")]
		public CurvyConnection()
		{
		}
	}
	[Token(Token = "0x20000EB")]
	public class CurvyEventArgs : EventArgs
	{
		[Token(Token = "0x4000555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly MonoBehaviour Sender;

		[Token(Token = "0x4000556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly object Data;

		[Token(Token = "0x6000723")]
		[Address(RVA = "0x2018074", Offset = "0x2018074", VA = "0x2018074")]
		public CurvyEventArgs(MonoBehaviour sender, object data)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000EC")]
	public class CurvySplineEvent : UnityEventEx<CurvySplineEventArgs>
	{
		[Token(Token = "0x6000724")]
		[Address(RVA = "0x1BEADC8", Offset = "0x1BEADC8", VA = "0x1BEADC8")]
		public CurvySplineEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000ED")]
	public class CurvyControlPointEvent : UnityEventEx<CurvyControlPointEventArgs>
	{
		[Token(Token = "0x6000725")]
		[Address(RVA = "0x20202FC", Offset = "0x20202FC", VA = "0x20202FC")]
		public CurvyControlPointEvent()
		{
		}
	}
	[Token(Token = "0x20000EE")]
	public class CurvyControlPointEventArgs : CurvySplineEventArgs
	{
		[Token(Token = "0x200021B")]
		public enum ModeEnum
		{
			[Token(Token = "0x4000B07")]
			None,
			[Token(Token = "0x4000B08")]
			AddBefore,
			[Token(Token = "0x4000B09")]
			AddAfter,
			[Token(Token = "0x4000B0A")]
			Delete
		}

		[Token(Token = "0x4000557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly ModeEnum Mode;

		[Token(Token = "0x4000558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly CurvySplineSegment ControlPoint;

		[Token(Token = "0x6000726")]
		[Address(RVA = "0x202034C", Offset = "0x202034C", VA = "0x202034C")]
		public CurvyControlPointEventArgs(MonoBehaviour sender, CurvySpline spline, CurvySplineSegment cp, ModeEnum mode = ModeEnum.None, [Optional] object data)
		{
		}
	}
	[Token(Token = "0x20000EF")]
	public class CurvySplineEventArgs : CurvyEventArgs
	{
		[Token(Token = "0x4000559")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly CurvySpline Spline;

		[Token(Token = "0x6000727")]
		[Address(RVA = "0x1BEAE18", Offset = "0x1BEAE18", VA = "0x1BEAE18")]
		public CurvySplineEventArgs(MonoBehaviour sender, CurvySpline spline, [Optional] object data)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000F0")]
	public class CurvyCGEvent : UnityEventEx<CurvyCGEventArgs>
	{
		[Token(Token = "0x6000728")]
		[Address(RVA = "0x201E65C", Offset = "0x201E65C", VA = "0x201E65C")]
		public CurvyCGEvent()
		{
		}
	}
	[Token(Token = "0x20000F1")]
	public class CurvyCGEventArgs : EventArgs
	{
		[Token(Token = "0x400055A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly MonoBehaviour Sender;

		[Token(Token = "0x400055B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly CurvyGenerator Generator;

		[Token(Token = "0x400055C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly CGModule Module;

		[Token(Token = "0x6000729")]
		[Address(RVA = "0x201E6AC", Offset = "0x201E6AC", VA = "0x201E6AC")]
		public CurvyCGEventArgs(CGModule module)
		{
		}

		[Token(Token = "0x600072A")]
		[Address(RVA = "0x201E758", Offset = "0x201E758", VA = "0x201E758")]
		public CurvyCGEventArgs(CurvyGenerator generator, CGModule module)
		{
		}
	}
	[Token(Token = "0x20000F2")]
	public static class CurvyGizmoHelper
	{
		[Token(Token = "0x400055D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Matrix4x4 Matrix;

		[Token(Token = "0x600072B")]
		[Address(RVA = "0x2020398", Offset = "0x2020398", VA = "0x2020398")]
		public static void SegmentCurveGizmo(CurvySplineSegment seg, Color col, float stepSize = 0.05f)
		{
		}

		[Token(Token = "0x600072C")]
		[Address(RVA = "0x20205CC", Offset = "0x20205CC", VA = "0x20205CC")]
		public static void SegmentApproximationGizmo(CurvySplineSegment seg, Color col)
		{
		}

		[Token(Token = "0x600072D")]
		[Address(RVA = "0x20208D4", Offset = "0x20208D4", VA = "0x20208D4")]
		public static void SegmentOrientationAnchorGizmo(CurvySplineSegment seg, Color col)
		{
		}

		[Token(Token = "0x600072E")]
		[Address(RVA = "0x2020B78", Offset = "0x2020B78", VA = "0x2020B78")]
		public static void SegmentOrientationGizmo(CurvySplineSegment seg, Color col)
		{
		}

		[Token(Token = "0x600072F")]
		[Address(RVA = "0x2020E44", Offset = "0x2020E44", VA = "0x2020E44")]
		public static void SegmentTangentGizmo(CurvySplineSegment seg, Color col)
		{
		}

		[Token(Token = "0x6000730")]
		[Address(RVA = "0x2021094", Offset = "0x2021094", VA = "0x2021094")]
		public static void ControlPointGizmo(CurvySplineSegment cp, bool selected, Color col)
		{
		}

		[Token(Token = "0x6000731")]
		[Address(RVA = "0x2021458", Offset = "0x2021458", VA = "0x2021458")]
		public static void BoundsGizmo(CurvySplineSegment cp, Color col)
		{
		}
	}
	[Token(Token = "0x20000F3")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xFC6744", Offset = "0xFC6744")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC6744", Offset = "0xFC6744")]
	public class CurvyGlobalManager : DTSingleton<CurvyGlobalManager>
	{
		[Token(Token = "0x400055E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool HideManager;

		[Token(Token = "0x400055F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static float SceneViewResolution;

		[Token(Token = "0x4000560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Color DefaultGizmoColor;

		[Token(Token = "0x4000561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static Color DefaultGizmoSelectionColor;

		[Token(Token = "0x4000562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static CurvyInterpolation DefaultInterpolation;

		[Token(Token = "0x4000563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public static float GizmoControlPointSize;

		[Token(Token = "0x4000564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static float GizmoOrientationLength;

		[Token(Token = "0x4000565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public static Color GizmoOrientationColor;

		[Token(Token = "0x4000566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public static int SplineLayer;

		[Token(Token = "0x4000567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static CurvySplineGizmos Gizmos;

		[Token(Token = "0x4000568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private PoolManager mPoolManager;

		[Token(Token = "0x4000569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ComponentPool mControlPointPool;

		[Token(Token = "0x17000128")]
		public static bool ShowCurveGizmo
		{
			[Token(Token = "0x6000733")]
			[Address(RVA = "0x2021670", Offset = "0x2021670", VA = "0x2021670")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000734")]
			[Address(RVA = "0x20216DC", Offset = "0x20216DC", VA = "0x20216DC")]
			set
			{
			}
		}

		[Token(Token = "0x17000129")]
		public static bool ShowApproximationGizmo
		{
			[Token(Token = "0x6000735")]
			[Address(RVA = "0x2021778", Offset = "0x2021778", VA = "0x2021778")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000736")]
			[Address(RVA = "0x20217E4", Offset = "0x20217E4", VA = "0x20217E4")]
			set
			{
			}
		}

		[Token(Token = "0x1700012A")]
		public static bool ShowTangentsGizmo
		{
			[Token(Token = "0x6000737")]
			[Address(RVA = "0x2021880", Offset = "0x2021880", VA = "0x2021880")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000738")]
			[Address(RVA = "0x20218EC", Offset = "0x20218EC", VA = "0x20218EC")]
			set
			{
			}
		}

		[Token(Token = "0x1700012B")]
		public static bool ShowOrientationGizmo
		{
			[Token(Token = "0x6000739")]
			[Address(RVA = "0x2021988", Offset = "0x2021988", VA = "0x2021988")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600073A")]
			[Address(RVA = "0x20219F4", Offset = "0x20219F4", VA = "0x20219F4")]
			set
			{
			}
		}

		[Token(Token = "0x1700012C")]
		public static bool ShowLabelsGizmo
		{
			[Token(Token = "0x600073B")]
			[Address(RVA = "0x2021A90", Offset = "0x2021A90", VA = "0x2021A90")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600073C")]
			[Address(RVA = "0x2021AFC", Offset = "0x2021AFC", VA = "0x2021AFC")]
			set
			{
			}
		}

		[Token(Token = "0x1700012D")]
		public static bool ShowMetadataGizmo
		{
			[Token(Token = "0x600073D")]
			[Address(RVA = "0x2021B98", Offset = "0x2021B98", VA = "0x2021B98")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600073E")]
			[Address(RVA = "0x2021C04", Offset = "0x2021C04", VA = "0x2021C04")]
			set
			{
			}
		}

		[Token(Token = "0x1700012E")]
		public static bool ShowBoundsGizmo
		{
			[Token(Token = "0x600073F")]
			[Address(RVA = "0x2021CA0", Offset = "0x2021CA0", VA = "0x2021CA0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000740")]
			[Address(RVA = "0x2021D0C", Offset = "0x2021D0C", VA = "0x2021D0C")]
			set
			{
			}
		}

		[Token(Token = "0x1700012F")]
		public PoolManager PoolManager
		{
			[Token(Token = "0x6000741")]
			[Address(RVA = "0x2021DA8", Offset = "0x2021DA8", VA = "0x2021DA8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000130")]
		public ComponentPool ControlPointPool
		{
			[Token(Token = "0x6000742")]
			[Address(RVA = "0x2021E54", Offset = "0x2021E54", VA = "0x2021E54")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000131")]
		public CurvyConnection[] Connections
		{
			[Token(Token = "0x6000743")]
			[Address(RVA = "0x2021E5C", Offset = "0x2021E5C", VA = "0x2021E5C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000744")]
		[Address(RVA = "0x2021EAC", Offset = "0x2021EAC", VA = "0x2021EAC")]
		public CurvyConnection[] GetContainingConnections(params CurvySpline[] splines)
		{
			return null;
		}

		[Token(Token = "0x6000745")]
		[Address(RVA = "0x2022658", Offset = "0x2022658", VA = "0x2022658", Slot = "5")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6000746")]
		[Address(RVA = "0x20227E0", Offset = "0x20227E0", VA = "0x20227E0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000747")]
		[Address(RVA = "0x2022874", Offset = "0x2022874", VA = "0x2022874")]
		[AttributeAttribute(Name = "RuntimeInitializeOnLoadMethodAttribute", RVA = "0xFD66CC", Offset = "0xFD66CC")]
		private static void LoadRuntimeSettings()
		{
		}

		[Token(Token = "0x6000748")]
		[Address(RVA = "0x2022AFC", Offset = "0x2022AFC", VA = "0x2022AFC")]
		public static void SaveRuntimeSettings()
		{
		}

		[Token(Token = "0x6000749")]
		[Address(RVA = "0x2022CE0", Offset = "0x2022CE0", VA = "0x2022CE0", Slot = "7")]
		public override void MergeDoubleLoaded(IDTSingleton newInstance)
		{
		}

		[Token(Token = "0x600074A")]
		[Address(RVA = "0x2022DFC", Offset = "0x2022DFC", VA = "0x2022DFC")]
		public CurvyGlobalManager()
		{
		}
	}
	[Token(Token = "0x20000F4")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFC67DC", Offset = "0xFC67DC")]
	public abstract class CurvyInterpolatableMetadataBase : CurvyMetadataBase, ICurvyInterpolatableMetadata, ICurvyMetadata
	{
		[Token(Token = "0x17000132")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD7A94", Offset = "0xFD7A94")]
		public abstract object Value
		{
			[Token(Token = "0x600074C")]
			get;
		}

		[Token(Token = "0x600074D")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD66DC", Offset = "0xFD66DC")]
		public abstract object InterpolateObject(ICurvyMetadata b, float f);

		[Token(Token = "0x600074E")]
		[Address(RVA = "0x2022FA8", Offset = "0x2022FA8", VA = "0x2022FA8")]
		protected CurvyInterpolatableMetadataBase()
		{
		}
	}
	[Token(Token = "0x20000F5")]
	[ExecuteInEditMode]
	public abstract class CurvyInterpolatableMetadataBase<T> : CurvyInterpolatableMetadataBase, ICurvyInterpolatableMetadata<T>, ICurvyInterpolatableMetadata, ICurvyMetadata
	{
		[Token(Token = "0x17000133")]
		public abstract T MetaDataValue
		{
			[Token(Token = "0x600074F")]
			get;
		}

		[Token(Token = "0x17000134")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD7ACC", Offset = "0xFD7ACC")]
		public override object Value
		{
			[Token(Token = "0x6000751")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000750")]
		public abstract T Interpolate(CurvyInterpolatableMetadataBase<T> nextMetadata, float interpolationTime);

		[Token(Token = "0x6000752")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD6714", Offset = "0xFD6714")]
		public override object InterpolateObject(ICurvyMetadata b, float f)
		{
			return null;
		}

		[Token(Token = "0x6000753")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD674C", Offset = "0xFD674C")]
		public T Interpolate(ICurvyMetadata b, float f)
		{
			return (T)null;
		}

		[Token(Token = "0x6000754")]
		protected CurvyInterpolatableMetadataBase()
		{
		}
	}
	[Token(Token = "0x20000F6")]
	[ExecuteInEditMode]
	public abstract class CurvyMetadataBase : MonoBehaviour, ICurvyMetadata
	{
		[Token(Token = "0x400056A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CurvySplineSegment mCP;

		[Token(Token = "0x17000135")]
		public CurvySplineSegment ControlPoint
		{
			[Token(Token = "0x6000755")]
			[Address(RVA = "0x2022FB8", Offset = "0x2022FB8", VA = "0x2022FB8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000136")]
		public CurvySpline Spline
		{
			[Token(Token = "0x6000756")]
			[Address(RVA = "0x2022FC0", Offset = "0x2022FC0", VA = "0x2022FC0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000757")]
		[Address(RVA = "0x202304C", Offset = "0x202304C", VA = "0x202304C", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000758")]
		[Address(RVA = "0x20230C4", Offset = "0x20230C4", VA = "0x20230C4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000759")]
		public T GetPreviousData<T>(bool autoCreate = true, bool segmentsOnly = true, bool useFollowUp = false) where T : MonoBehaviour, ICurvyMetadata
		{
			return null;
		}

		[Token(Token = "0x600075A")]
		public T GetNextData<T>(bool autoCreate = true, bool segmentsOnly = true, bool useFollowUp = false) where T : MonoBehaviour, ICurvyMetadata
		{
			return null;
		}

		[Token(Token = "0x600075B")]
		[Address(RVA = "0x20230E4", Offset = "0x20230E4", VA = "0x20230E4")]
		protected void NotifyModification()
		{
		}

		[Token(Token = "0x600075C")]
		[Address(RVA = "0x2022FB0", Offset = "0x2022FB0", VA = "0x2022FB0")]
		protected CurvyMetadataBase()
		{
		}
	}
	[Token(Token = "0x20000F7")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xFC6848", Offset = "0xFC6848")]
	public class CGResourceManagerAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x400056B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly string ResourceName;

		[Token(Token = "0x400056C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool ReadOnly;

		[Token(Token = "0x600075D")]
		[Address(RVA = "0x1DC00C8", Offset = "0x1DC00C8", VA = "0x1DC00C8")]
		public CGResourceManagerAttribute(string resourceName)
		{
		}
	}
	[Token(Token = "0x20000F8")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xFC6880", Offset = "0xFC6880")]
	public sealed class CGResourceCollectionManagerAttribute : CGResourceManagerAttribute
	{
		[Token(Token = "0x400056D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool ShowCount;

		[Token(Token = "0x600075E")]
		[Address(RVA = "0x1DC00A0", Offset = "0x1DC00A0", VA = "0x1DC00A0")]
		public CGResourceCollectionManagerAttribute(string resourceName)
		{
		}
	}
	[Token(Token = "0x20000F9")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xFC68B8", Offset = "0xFC68B8")]
	public sealed class CGDataReferenceSelectorAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x400056E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly Type DataType;

		[Token(Token = "0x600075F")]
		[Address(RVA = "0x1DC002C", Offset = "0x1DC002C", VA = "0x1DC002C")]
		public CGDataReferenceSelectorAttribute(Type dataType)
		{
		}
	}
	[Token(Token = "0x20000FA")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xFC68F0", Offset = "0xFC68F0")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC68F0", Offset = "0xFC68F0")]
	public class CurvyShape : DTVersionedMonoBehaviour
	{
		[Token(Token = "0x400056F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFC9F54", Offset = "0xFC9F54")]
		private CurvyPlane m_Plane;

		[Token(Token = "0x4000570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		[HideInInspector]
		private bool m_Persistent;

		[Token(Token = "0x4000571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<CurvyShapeInfo, Type> mShapeDefs;

		[Token(Token = "0x4000572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CurvySpline mSpline;

		[NonSerialized]
		[Token(Token = "0x4000573")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool Dirty;

		[Token(Token = "0x17000137")]
		public CurvyPlane Plane
		{
			[Token(Token = "0x6000760")]
			[Address(RVA = "0x2023188", Offset = "0x2023188", VA = "0x2023188")]
			get
			{
				return default(CurvyPlane);
			}
			[Token(Token = "0x6000761")]
			[Address(RVA = "0x2023190", Offset = "0x2023190", VA = "0x2023190")]
			set
			{
			}
		}

		[Token(Token = "0x17000138")]
		public bool Persistent
		{
			[Token(Token = "0x6000762")]
			[Address(RVA = "0x20231AC", Offset = "0x20231AC", VA = "0x20231AC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000763")]
			[Address(RVA = "0x20231B4", Offset = "0x20231B4", VA = "0x20231B4")]
			set
			{
			}
		}

		[Token(Token = "0x17000139")]
		public CurvySpline Spline
		{
			[Token(Token = "0x6000764")]
			[Address(RVA = "0x20231E8", Offset = "0x20231E8", VA = "0x20231E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013A")]
		public static Dictionary<CurvyShapeInfo, Type> ShapeDefinitions
		{
			[Token(Token = "0x6000774")]
			[Address(RVA = "0x2024874", Offset = "0x2024874", VA = "0x2024874")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000765")]
		[Address(RVA = "0x2023290", Offset = "0x2023290", VA = "0x2023290")]
		private void Update()
		{
		}

		[Token(Token = "0x6000766")]
		[Address(RVA = "0x20233C4", Offset = "0x20233C4", VA = "0x20233C4", Slot = "5")]
		protected virtual void Reset()
		{
		}

		[Token(Token = "0x6000767")]
		[Address(RVA = "0x20233DC", Offset = "0x20233DC", VA = "0x20233DC")]
		public void Delete()
		{
		}

		[Token(Token = "0x6000768")]
		[Address(RVA = "0x20232D0", Offset = "0x20232D0", VA = "0x20232D0")]
		public void Refresh()
		{
		}

		[Token(Token = "0x6000769")]
		[Address(RVA = "0x2023538", Offset = "0x2023538", VA = "0x2023538")]
		public CurvyShape Replace(string menuName)
		{
			return null;
		}

		[Token(Token = "0x600076A")]
		[Address(RVA = "0x202383C", Offset = "0x202383C", VA = "0x202383C")]
		protected void PrepareSpline(CurvyInterpolation interpolation, CurvyOrientation orientation = CurvyOrientation.Dynamic, int cachedensity = 50, bool closed = true)
		{
		}

		[Token(Token = "0x600076B")]
		[Address(RVA = "0x2023B2C", Offset = "0x2023B2C", VA = "0x2023B2C")]
		protected void SetPosition(int no, Vector3 position)
		{
		}

		[Token(Token = "0x600076C")]
		[Address(RVA = "0x2023BD4", Offset = "0x2023BD4", VA = "0x2023BD4")]
		protected void SetRotation(int no, Quaternion rotation)
		{
		}

		[Token(Token = "0x600076D")]
		[Address(RVA = "0x2023C84", Offset = "0x2023C84", VA = "0x2023C84")]
		protected void SetBezierHandles(int no, float distanceFrag)
		{
		}

		[Token(Token = "0x600076E")]
		[Address(RVA = "0x2023C8C", Offset = "0x2023C8C", VA = "0x2023C8C")]
		protected void SetBezierHandles(int no, float inDistanceFrag, float outDistanceFrag)
		{
		}

		[Token(Token = "0x600076F")]
		[Address(RVA = "0x2023F84", Offset = "0x2023F84", VA = "0x2023F84")]
		protected void SetBezierHandles(int no, Vector3 i, Vector3 o, Space space = Space.World)
		{
		}

		[Token(Token = "0x6000770")]
		[Address(RVA = "0x2023EE0", Offset = "0x2023EE0", VA = "0x2023EE0")]
		public static void SetBezierHandles(float distanceFrag, bool setIn, bool setOut, params CurvySplineSegment[] controlPoints)
		{
		}

		[Token(Token = "0x6000771")]
		[Address(RVA = "0x20240E0", Offset = "0x20240E0", VA = "0x20240E0")]
		protected void SetCGHardEdges(params int[] controlPoints)
		{
		}

		[Token(Token = "0x6000772")]
		[Address(RVA = "0x2024248", Offset = "0x2024248", VA = "0x2024248", Slot = "6")]
		protected virtual void ApplyShape()
		{
		}

		[Token(Token = "0x6000773")]
		[Address(RVA = "0x202424C", Offset = "0x202424C", VA = "0x202424C")]
		protected void PrepareControlPoints(int count)
		{
		}

		[Token(Token = "0x6000775")]
		[Address(RVA = "0x2024998", Offset = "0x2024998", VA = "0x2024998")]
		public static List<string> GetShapesMenuNames(bool only2D = false)
		{
			return null;
		}

		[Token(Token = "0x6000776")]
		[Address(RVA = "0x2024B2C", Offset = "0x2024B2C", VA = "0x2024B2C")]
		public static List<string> GetShapesMenuNames(Type currentShapeType, out int currentIndex, bool only2D = false)
		{
			return null;
		}

		[Token(Token = "0x6000777")]
		[Address(RVA = "0x2024D90", Offset = "0x2024D90", VA = "0x2024D90")]
		public static string GetShapeName(Type shapeType)
		{
			return null;
		}

		[Token(Token = "0x6000778")]
		[Address(RVA = "0x20236A8", Offset = "0x20236A8", VA = "0x20236A8")]
		public static Type GetShapeType(string menuName)
		{
			return null;
		}

		[Token(Token = "0x6000779")]
		[Address(RVA = "0x2023444", Offset = "0x2023444", VA = "0x2023444")]
		private void applyPlane()
		{
		}

		[Token(Token = "0x600077A")]
		[Address(RVA = "0x2024EFC", Offset = "0x2024EFC", VA = "0x2024EFC")]
		private void applyRotation(Quaternion q)
		{
		}

		[Token(Token = "0x600077B")]
		[Address(RVA = "0x2025228", Offset = "0x2025228", VA = "0x2025228")]
		public CurvyShape()
		{
		}
	}
	[Token(Token = "0x20000FB")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xFC6988", Offset = "0xFC6988")]
	public sealed class CurvyShapeInfo : Attribute
	{
		[Token(Token = "0x4000574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string Name;

		[Token(Token = "0x4000575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly bool Is2D;

		[Token(Token = "0x600077D")]
		[Address(RVA = "0x2025320", Offset = "0x2025320", VA = "0x2025320")]
		public CurvyShapeInfo(string name, bool is2D = true)
		{
		}
	}
	[Token(Token = "0x20000FC")]
	public class CurvyShape2D : CurvyShape
	{
		[Token(Token = "0x600077E")]
		[Address(RVA = "0x20252B0", Offset = "0x20252B0", VA = "0x20252B0")]
		public CurvyShape2D()
		{
		}
	}
	[Token(Token = "0x20000FD")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xFC69C0", Offset = "0xFC69C0")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC69C0", Offset = "0xFC69C0")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xFC69C0", Offset = "0xFC69C0")]
	[ExecuteInEditMode]
	public class CurvySpline : DTVersionedMonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200021C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC8954", Offset = "0xFC8954")]
		private sealed class <>c
		{
			[Token(Token = "0x4000B0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000B0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Action<CurvySplineSegment> <>9__299_0;

			[Token(Token = "0x6000FC4")]
			[Address(RVA = "0x1BEAC0C", Offset = "0x1BEAC0C", VA = "0x1BEAC0C")]
			public <>c()
			{
			}

			[Token(Token = "0x6000FC5")]
			[Address(RVA = "0x1BEAC14", Offset = "0x1BEAC14", VA = "0x1BEAC14")]
			internal void <ProcessDirtyControlPoints>b__299_0(CurvySplineSegment controlPoint)
			{
			}
		}

		[Token(Token = "0x4000576")]
		public const string VERSION = "6.4.0";

		[Token(Token = "0x4000577")]
		public const string APIVERSION = "640";

		[Token(Token = "0x4000578")]
		public const string WEBROOT = "https://curvyeditor.com/";

		[Token(Token = "0x4000579")]
		public const string DOCLINK = "https://curvyeditor.com/doclink/";

		[Token(Token = "0x400057A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[HideInInspector]
		private List<CurvySplineSegment> ControlPoints;

		[Token(Token = "0x400057B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public bool ShowGizmos;

		[Token(Token = "0x400057C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFCA034", Offset = "0xFCA034")]
		private Action<CurvySpline> <OnGlobalCoordinatesChanged>k__BackingField;

		[Token(Token = "0x400057D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0xFCA044", Offset = "0xFCA044")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFCA044", Offset = "0xFCA044")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xFCA044", Offset = "0xFCA044")]
		private CurvyInterpolation m_Interpolation;

		[Token(Token = "0x400057E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFCA100", Offset = "0xFCA100")]
		[AttributeAttribute(Name = "FieldActionAttribute", RVA = "0xFCA100", Offset = "0xFCA100")]
		[SerializeField]
		private bool m_RestrictTo2D;

		[Token(Token = "0x400057F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xFCA174", Offset = "0xFCA174")]
		private bool m_Closed;

		[Token(Token = "0x4000580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFCA1C0", Offset = "0xFCA1C0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFCA1C0", Offset = "0xFCA1C0")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xFCA1C0", Offset = "0xFCA1C0")]
		private bool m_AutoEndTangents;

		[Token(Token = "0x4000581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFCA25C", Offset = "0xFCA25C")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xFCA25C", Offset = "0xFCA25C")]
		private CurvyOrientation m_Orientation;

		[Token(Token = "0x4000582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0xFCA2CC", Offset = "0xFCA2CC")]
		[AttributeAttribute(Name = "GroupConditionAttribute", RVA = "0xFCA2CC", Offset = "0xFCA2CC")]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0xFCA2CC", Offset = "0xFCA2CC")]
		[SerializeField]
		private float m_AutoHandleDistance;

		[Token(Token = "0x4000583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0xFCA400", Offset = "0xFCA400")]
		[AttributeAttribute(Name = "GroupConditionAttribute", RVA = "0xFCA400", Offset = "0xFCA400")]
		[AttributeAttribute(Name = "GroupActionAttribute", RVA = "0xFCA400", Offset = "0xFCA400")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xFCA400", Offset = "0xFCA400")]
		private float m_Tension;

		[Token(Token = "0x4000584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xFCA550", Offset = "0xFCA550")]
		private float m_Continuity;

		[Token(Token = "0x4000585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xFCA59C", Offset = "0xFCA59C")]
		private float m_Bias;

		[Token(Token = "0x4000586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0xFCA5E8", Offset = "0xFCA5E8")]
		[AttributeAttribute(Name = "FieldActionAttribute", RVA = "0xFCA5E8", Offset = "0xFCA5E8")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFCA5E8", Offset = "0xFCA5E8")]
		[SerializeField]
		private Color m_GizmoColor;

		[Token(Token = "0x4000587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFCA6C8", Offset = "0xFCA6C8")]
		[SerializeField]
		private Color m_GizmoSelectionColor;

		[Token(Token = "0x4000588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0xFCA730", Offset = "0xFCA730")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xFCA730", Offset = "0xFCA730")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFCA730", Offset = "0xFCA730")]
		private int m_CacheDensity;

		[Token(Token = "0x4000589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFCA7EC", Offset = "0xFCA7EC")]
		private float m_MaxPointsPerUnit;

		[Token(Token = "0x400058A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFCA838", Offset = "0xFCA838")]
		private bool m_UsePooling;

		[Token(Token = "0x400058B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFCA884", Offset = "0xFCA884")]
		private bool m_UseThreading;

		[Token(Token = "0x400058C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7E")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFCA8D0", Offset = "0xFCA8D0")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xFCA8D0", Offset = "0xFCA8D0")]
		private bool m_CheckTransform;

		[Token(Token = "0x400058D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private CurvyUpdateMethod m_UpdateIn;

		[Token(Token = "0x400058E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0xFCA950", Offset = "0xFCA950")]
		[AttributeAttribute(Name = "SortOrderAttribute", RVA = "0xFCA950", Offset = "0xFCA950")]
		[SerializeField]
		protected CurvySplineEvent m_OnRefresh;

		[Token(Token = "0x400058F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0xFCA9D8", Offset = "0xFCA9D8")]
		[AttributeAttribute(Name = "SortOrderAttribute", RVA = "0xFCA9D8", Offset = "0xFCA9D8")]
		[SerializeField]
		protected CurvySplineEvent m_OnAfterControlPointChanges;

		[Token(Token = "0x4000590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0xFCAA40", Offset = "0xFCAA40")]
		[AttributeAttribute(Name = "SortOrderAttribute", RVA = "0xFCAA40", Offset = "0xFCAA40")]
		[SerializeField]
		protected CurvyControlPointEvent m_OnBeforeControlPointAdd;

		[Token(Token = "0x4000591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0xFCAAA8", Offset = "0xFCAAA8")]
		[AttributeAttribute(Name = "SortOrderAttribute", RVA = "0xFCAAA8", Offset = "0xFCAAA8")]
		[SerializeField]
		protected CurvyControlPointEvent m_OnAfterControlPointAdd;

		[Token(Token = "0x4000592")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0xFCAB10", Offset = "0xFCAB10")]
		[AttributeAttribute(Name = "SortOrderAttribute", RVA = "0xFCAB10", Offset = "0xFCAB10")]
		[SerializeField]
		protected CurvyControlPointEvent m_OnBeforeControlPointDelete;

		[Token(Token = "0x4000593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool mIsInitialized;

		[Token(Token = "0x4000594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		private bool isStarted;

		[Token(Token = "0x4000595")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB2")]
		private bool sendOnRefreshEventNextUpdate;

		[Token(Token = "0x4000596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private readonly object controlPointsRelationshipCacheLock;

		[Token(Token = "0x4000597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private List<CurvySplineSegment> mSegments;

		[Token(Token = "0x4000598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private ReadOnlyCollection<CurvySplineSegment> readOnlyControlPoints;

		[Token(Token = "0x4000599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float length;

		[Token(Token = "0x400059A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private int mCacheSize;

		[Token(Token = "0x400059B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Bounds? mBounds;

		[Token(Token = "0x400059C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private bool mDirtyCurve;

		[Token(Token = "0x400059D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF5")]
		private bool mDirtyOrientation;

		[Token(Token = "0x400059E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private HashSet<CurvySplineSegment> dirtyControlPointsMinimalSet;

		[Token(Token = "0x400059F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private List<CurvySplineSegment> dirtyCpsExtendedList;

		[Token(Token = "0x40005A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private bool allControlPointsAreDirty;

		[Token(Token = "0x40005A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private ThreadPoolWorker<CurvySplineSegment> mThreadWorker;

		[Token(Token = "0x40005A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private readonly CurvySplineEventArgs defaultSplineEventArgs;

		[Token(Token = "0x40005A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private readonly CurvyControlPointEventArgs defaultAddAfterEventArgs;

		[Token(Token = "0x40005A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private readonly CurvyControlPointEventArgs defaultDeleteEventArgs;

		[Token(Token = "0x40005A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private float[] controlPointsDistances;

		[Token(Token = "0x40005A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private readonly Action<CurvySplineSegment> refreshCurveAction;

		[Token(Token = "0x40005A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Vector3 lastProcessedPosition;

		[Token(Token = "0x40005A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		private Quaternion lastProcessedRotation;

		[Token(Token = "0x40005A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		private Vector3 lastProcessedScale;

		[Token(Token = "0x40005AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private bool globalCoordinatesChangedThisFrame;

		[Token(Token = "0x40005AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x169")]
		private bool isCpsRelationshipCacheValid;

		[Token(Token = "0x40005AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private CurvySplineSegment firstSegment;

		[Token(Token = "0x40005AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private CurvySplineSegment lastSegment;

		[Token(Token = "0x40005AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private CurvySplineSegment firstVisibleControlPoint;

		[Token(Token = "0x40005AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private CurvySplineSegment lastVisibleControlPoint;

		[Token(Token = "0x40005B0")]
		private const float MinimalMaxPointsPerUnit = 0.0001f;

		[Token(Token = "0x40005B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly string InvalidCPErrorMessage;

		[Token(Token = "0x40005B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private Transform cachedTransform;

		[Token(Token = "0x1700013B")]
		public CurvyInterpolation Interpolation
		{
			[Token(Token = "0x6000780")]
			[Address(RVA = "0x202574C", Offset = "0x202574C", VA = "0x202574C")]
			get
			{
				return default(CurvyInterpolation);
			}
			[Token(Token = "0x6000781")]
			[Address(RVA = "0x202398C", Offset = "0x202398C", VA = "0x202398C")]
			set
			{
			}
		}

		[Token(Token = "0x1700013C")]
		public bool RestrictTo2D
		{
			[Token(Token = "0x6000782")]
			[Address(RVA = "0x2025AFC", Offset = "0x2025AFC", VA = "0x2025AFC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000783")]
			[Address(RVA = "0x2023B00", Offset = "0x2023B00", VA = "0x2023B00")]
			set
			{
			}
		}

		[Token(Token = "0x1700013D")]
		public float AutoHandleDistance
		{
			[Token(Token = "0x6000784")]
			[Address(RVA = "0x2025B04", Offset = "0x2025B04", VA = "0x2025B04")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000785")]
			[Address(RVA = "0x2025B0C", Offset = "0x2025B0C", VA = "0x2025B0C")]
			set
			{
			}
		}

		[Token(Token = "0x1700013E")]
		public bool Closed
		{
			[Token(Token = "0x6000786")]
			[Address(RVA = "0x2025BB0", Offset = "0x2025BB0", VA = "0x2025BB0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000787")]
			[Address(RVA = "0x2023AA8", Offset = "0x2023AA8", VA = "0x2023AA8")]
			set
			{
			}
		}

		[Token(Token = "0x1700013F")]
		public bool AutoEndTangents
		{
			[Token(Token = "0x6000788")]
			[Address(RVA = "0x2025BB8", Offset = "0x2025BB8", VA = "0x2025BB8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000789")]
			[Address(RVA = "0x2025A7C", Offset = "0x2025A7C", VA = "0x2025A7C")]
			set
			{
			}
		}

		[Token(Token = "0x17000140")]
		public CurvyOrientation Orientation
		{
			[Token(Token = "0x600078A")]
			[Address(RVA = "0x2025BE4", Offset = "0x2025BE4", VA = "0x2025BE4")]
			get
			{
				return default(CurvyOrientation);
			}
			[Token(Token = "0x600078B")]
			[Address(RVA = "0x20239D8", Offset = "0x20239D8", VA = "0x20239D8")]
			set
			{
			}
		}

		[Token(Token = "0x17000141")]
		public CurvyUpdateMethod UpdateIn
		{
			[Token(Token = "0x600078C")]
			[Address(RVA = "0x2025BEC", Offset = "0x2025BEC", VA = "0x2025BEC")]
			get
			{
				return default(CurvyUpdateMethod);
			}
			[Token(Token = "0x600078D")]
			[Address(RVA = "0x2025BF4", Offset = "0x2025BF4", VA = "0x2025BF4")]
			set
			{
			}
		}

		[Token(Token = "0x17000142")]
		public Color GizmoColor
		{
			[Token(Token = "0x600078E")]
			[Address(RVA = "0x2025C08", Offset = "0x2025C08", VA = "0x2025C08")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x600078F")]
			[Address(RVA = "0x2025C14", Offset = "0x2025C14", VA = "0x2025C14")]
			set
			{
			}
		}

		[Token(Token = "0x17000143")]
		public Color GizmoSelectionColor
		{
			[Token(Token = "0x6000790")]
			[Address(RVA = "0x2025C80", Offset = "0x2025C80", VA = "0x2025C80")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000791")]
			[Address(RVA = "0x2025C8C", Offset = "0x2025C8C", VA = "0x2025C8C")]
			set
			{
			}
		}

		[Token(Token = "0x17000144")]
		public int CacheDensity
		{
			[Token(Token = "0x6000792")]
			[Address(RVA = "0x2025CF8", Offset = "0x2025CF8", VA = "0x2025CF8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000793")]
			[Address(RVA = "0x20239FC", Offset = "0x20239FC", VA = "0x20239FC")]
			set
			{
			}
		}

		[Token(Token = "0x17000145")]
		public float MaxPointsPerUnit
		{
			[Token(Token = "0x6000794")]
			[Address(RVA = "0x2025D00", Offset = "0x2025D00", VA = "0x2025D00")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000795")]
			[Address(RVA = "0x2025D08", Offset = "0x2025D08", VA = "0x2025D08")]
			set
			{
			}
		}

		[Token(Token = "0x17000146")]
		public bool UsePooling
		{
			[Token(Token = "0x6000796")]
			[Address(RVA = "0x2025DBC", Offset = "0x2025DBC", VA = "0x2025DBC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000797")]
			[Address(RVA = "0x2025DC4", Offset = "0x2025DC4", VA = "0x2025DC4")]
			set
			{
			}
		}

		[Token(Token = "0x17000147")]
		public bool UseThreading
		{
			[Token(Token = "0x6000798")]
			[Address(RVA = "0x2025DE4", Offset = "0x2025DE4", VA = "0x2025DE4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000799")]
			[Address(RVA = "0x2025DEC", Offset = "0x2025DEC", VA = "0x2025DEC")]
			set
			{
			}
		}

		[Token(Token = "0x17000148")]
		public bool CheckTransform
		{
			[Token(Token = "0x600079A")]
			[Address(RVA = "0x2025E0C", Offset = "0x2025E0C", VA = "0x2025E0C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600079B")]
			[Address(RVA = "0x2025E14", Offset = "0x2025E14", VA = "0x2025E14")]
			set
			{
			}
		}

		[Token(Token = "0x17000149")]
		public float Tension
		{
			[Token(Token = "0x600079C")]
			[Address(RVA = "0x2025E40", Offset = "0x2025E40", VA = "0x2025E40")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600079D")]
			[Address(RVA = "0x2025E48", Offset = "0x2025E48", VA = "0x2025E48")]
			set
			{
			}
		}

		[Token(Token = "0x1700014A")]
		public float Continuity
		{
			[Token(Token = "0x600079E")]
			[Address(RVA = "0x2025E68", Offset = "0x2025E68", VA = "0x2025E68")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600079F")]
			[Address(RVA = "0x2025E70", Offset = "0x2025E70", VA = "0x2025E70")]
			set
			{
			}
		}

		[Token(Token = "0x1700014B")]
		public float Bias
		{
			[Token(Token = "0x60007A0")]
			[Address(RVA = "0x2025E90", Offset = "0x2025E90", VA = "0x2025E90")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60007A1")]
			[Address(RVA = "0x2025E98", Offset = "0x2025E98", VA = "0x2025E98")]
			set
			{
			}
		}

		[Token(Token = "0x1700014C")]
		public bool IsInitialized
		{
			[Token(Token = "0x60007A2")]
			[Address(RVA = "0x2025EB8", Offset = "0x2025EB8", VA = "0x2025EB8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700014D")]
		public Bounds Bounds
		{
			[Token(Token = "0x60007A3")]
			[Address(RVA = "0x2025EC0", Offset = "0x2025EC0", VA = "0x2025EC0")]
			get
			{
				return default(Bounds);
			}
		}

		[Token(Token = "0x1700014E")]
		public int Count
		{
			[Token(Token = "0x60007A4")]
			[Address(RVA = "0x2019BA8", Offset = "0x2019BA8", VA = "0x2019BA8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700014F")]
		public int ControlPointCount
		{
			[Token(Token = "0x60007A5")]
			[Address(RVA = "0x2023E90", Offset = "0x2023E90", VA = "0x2023E90")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000150")]
		public int CacheSize
		{
			[Token(Token = "0x60007A6")]
			[Address(RVA = "0x20261A4", Offset = "0x20261A4", VA = "0x20261A4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000151")]
		public float Length
		{
			[Token(Token = "0x60007A7")]
			[Address(RVA = "0x2018CAC", Offset = "0x2018CAC", VA = "0x2018CAC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000152")]
		public bool Dirty
		{
			[Token(Token = "0x60007A8")]
			[Address(RVA = "0x201A774", Offset = "0x201A774", VA = "0x201A774")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000153")]
		public CurvySplineSegment Item
		{
			[Token(Token = "0x60007A9")]
			[Address(RVA = "0x20260E4", Offset = "0x20260E4", VA = "0x20260E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000154")]
		public ReadOnlyCollection<CurvySplineSegment> ControlPointsList
		{
			[Token(Token = "0x60007AA")]
			[Address(RVA = "0x20225DC", Offset = "0x20225DC", VA = "0x20225DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000155")]
		[CanBeNull]
		public CurvySplineSegment FirstVisibleControlPoint
		{
			[Token(Token = "0x60007AB")]
			[Address(RVA = "0x201B938", Offset = "0x201B938", VA = "0x201B938")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000156")]
		[CanBeNull]
		public CurvySplineSegment LastVisibleControlPoint
		{
			[Token(Token = "0x60007AC")]
			[Address(RVA = "0x201B96C", Offset = "0x201B96C", VA = "0x201B96C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000157")]
		public CurvySplineSegment FirstSegment
		{
			[Token(Token = "0x60007AD")]
			[Address(RVA = "0x2026870", Offset = "0x2026870", VA = "0x2026870")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000158")]
		public CurvySplineSegment LastSegment
		{
			[Token(Token = "0x60007AE")]
			[Address(RVA = "0x20268A4", Offset = "0x20268A4", VA = "0x20268A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000159")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD7B24", Offset = "0xFD7B24")]
		public CurvySpline NextSpline
		{
			[Token(Token = "0x60007AF")]
			[Address(RVA = "0x20268D8", Offset = "0x20268D8", VA = "0x20268D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700015A")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD7B5C", Offset = "0xFD7B5C")]
		public CurvySpline PreviousSpline
		{
			[Token(Token = "0x60007B0")]
			[Address(RVA = "0x20269B0", Offset = "0x20269B0", VA = "0x20269B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700015B")]
		public bool GlobalCoordinatesChangedThisFrame
		{
			[Token(Token = "0x60007B1")]
			[Address(RVA = "0x2026A88", Offset = "0x2026A88", VA = "0x2026A88")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700015C")]
		public Action<CurvySpline> OnGlobalCoordinatesChanged
		{
			[Token(Token = "0x60007B2")]
			[Address(RVA = "0x2026A90", Offset = "0x2026A90", VA = "0x2026A90")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6784", Offset = "0xFD6784")]
			get
			{
				return null;
			}
			[Token(Token = "0x60007B3")]
			[Address(RVA = "0x2026A98", Offset = "0x2026A98", VA = "0x2026A98")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6794", Offset = "0xFD6794")]
			set
			{
			}
		}

		[Token(Token = "0x1700015D")]
		public CurvySplineEvent OnRefresh
		{
			[Token(Token = "0x60007B4")]
			[Address(RVA = "0x2026AA0", Offset = "0x2026AA0", VA = "0x2026AA0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60007B5")]
			[Address(RVA = "0x2026AA8", Offset = "0x2026AA8", VA = "0x2026AA8")]
			set
			{
			}
		}

		[Token(Token = "0x1700015E")]
		public CurvySplineEvent OnAfterControlPointChanges
		{
			[Token(Token = "0x60007B6")]
			[Address(RVA = "0x2026AC0", Offset = "0x2026AC0", VA = "0x2026AC0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60007B7")]
			[Address(RVA = "0x2026AC8", Offset = "0x2026AC8", VA = "0x2026AC8")]
			set
			{
			}
		}

		[Token(Token = "0x1700015F")]
		public CurvyControlPointEvent OnBeforeControlPointAdd
		{
			[Token(Token = "0x60007B8")]
			[Address(RVA = "0x2026AE0", Offset = "0x2026AE0", VA = "0x2026AE0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60007B9")]
			[Address(RVA = "0x2026AE8", Offset = "0x2026AE8", VA = "0x2026AE8")]
			set
			{
			}
		}

		[Token(Token = "0x17000160")]
		public CurvyControlPointEvent OnAfterControlPointAdd
		{
			[Token(Token = "0x60007BA")]
			[Address(RVA = "0x2026B00", Offset = "0x2026B00", VA = "0x2026B00")]
			get
			{
				return null;
			}
			[Token(Token = "0x60007BB")]
			[Address(RVA = "0x2026B08", Offset = "0x2026B08", VA = "0x2026B08")]
			set
			{
			}
		}

		[Token(Token = "0x17000161")]
		public CurvyControlPointEvent OnBeforeControlPointDelete
		{
			[Token(Token = "0x60007BC")]
			[Address(RVA = "0x2026B20", Offset = "0x2026B20", VA = "0x2026B20")]
			get
			{
				return null;
			}
			[Token(Token = "0x60007BD")]
			[Address(RVA = "0x2026B28", Offset = "0x2026B28", VA = "0x2026B28")]
			set
			{
			}
		}

		[Token(Token = "0x17000162")]
		private List<CurvySplineSegment> Segments
		{
			[Token(Token = "0x6000835")]
			[Address(RVA = "0x2026170", Offset = "0x2026170", VA = "0x2026170")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600077F")]
		[Address(RVA = "0x202536C", Offset = "0x202536C", VA = "0x202536C")]
		public CurvySpline()
		{
		}

		[Token(Token = "0x60007BE")]
		[Address(RVA = "0x2026B40", Offset = "0x2026B40", VA = "0x2026B40")]
		public static CurvySpline Create()
		{
			return null;
		}

		[Token(Token = "0x60007BF")]
		[Address(RVA = "0x2026D14", Offset = "0x2026D14", VA = "0x2026D14")]
		public static CurvySpline Create(CurvySpline takeOptionsFrom)
		{
			return null;
		}

		[Token(Token = "0x60007C0")]
		[Address(RVA = "0x2026EA8", Offset = "0x2026EA8", VA = "0x2026EA8")]
		public static int CalculateCacheSize(int density, float splineLength, float maxPointsPerUnit)
		{
			return default(int);
		}

		[Token(Token = "0x60007C1")]
		[Address(RVA = "0x2026F58", Offset = "0x2026F58", VA = "0x2026F58")]
		public static float CalculateSamplingPointsPerUnit(int density, float maxPointsPerUnit)
		{
			return default(float);
		}

		[Token(Token = "0x60007C2")]
		[Address(RVA = "0x2027048", Offset = "0x2027048", VA = "0x2027048")]
		public static Vector3 Bezier(Vector3 T0, Vector3 P0, Vector3 P1, Vector3 T1, float f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007C3")]
		[Address(RVA = "0x2027138", Offset = "0x2027138", VA = "0x2027138")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD67A4", Offset = "0xFD67A4")]
		public static float BezierTangent(float T0, float P0, float P1, float T1, float t)
		{
			return default(float);
		}

		[Token(Token = "0x60007C4")]
		[Address(RVA = "0x2027188", Offset = "0x2027188", VA = "0x2027188")]
		public static Vector3 BezierTangent(Vector3 T0, Vector3 P0, Vector3 P1, Vector3 T1, float f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007C5")]
		[Address(RVA = "0x202748C", Offset = "0x202748C", VA = "0x202748C")]
		public static Vector3 CatmullRom(Vector3 T0, Vector3 P0, Vector3 P1, Vector3 T1, float f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007C6")]
		[Address(RVA = "0x20275AC", Offset = "0x20275AC", VA = "0x20275AC")]
		public static Vector3 TCB(Vector3 T0, Vector3 P0, Vector3 P1, Vector3 T1, float f, float FT0, float FC0, float FB0, float FT1, float FC1, float FB1)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007C7")]
		[Address(RVA = "0x20277C4", Offset = "0x20277C4", VA = "0x20277C4")]
		[NotNull]
		public static CurvySplineSegment GetFollowUpHeadingControlPoint(CurvySplineSegment followUp, ConnectionHeadingEnum headingDirection)
		{
			return null;
		}

		[Token(Token = "0x60007C8")]
		[Address(RVA = "0x20193BC", Offset = "0x20193BC", VA = "0x20193BC")]
		public Vector3 Interpolate(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007C9")]
		[Address(RVA = "0x20278AC", Offset = "0x20278AC", VA = "0x20278AC")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD67EC", Offset = "0xFD67EC")]
		public Vector3 Interpolate(float tf, CurvyInterpolation interpolation)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007CA")]
		[Address(RVA = "0x2019474", Offset = "0x2019474", VA = "0x2019474")]
		public Vector3 InterpolateFast(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007CB")]
		public T GetMetadata<T>(float tf) where T : UnityEngine.Component, ICurvyMetadata
		{
			return null;
		}

		[Token(Token = "0x60007CC")]
		[Address(RVA = "0x2027974", Offset = "0x2027974", VA = "0x2027974")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD6824", Offset = "0xFD6824")]
		public UnityEngine.Component GetMetadata(Type type, float tf)
		{
			return null;
		}

		[Token(Token = "0x60007CD")]
		public U GetInterpolatedMetadata<T, U>(float tf) where T : CurvyInterpolatableMetadataBase<U>
		{
			return (U)null;
		}

		[Token(Token = "0x60007CE")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD685C", Offset = "0xFD685C")]
		public U InterpolateMetadata<T, U>(float tf) where T : UnityEngine.Component, ICurvyInterpolatableMetadata<U>
		{
			return (U)null;
		}

		[Token(Token = "0x60007CF")]
		[Address(RVA = "0x20279CC", Offset = "0x20279CC", VA = "0x20279CC")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD6894", Offset = "0xFD6894")]
		public object InterpolateMetadata(Type type, float tf)
		{
			return null;
		}

		[Token(Token = "0x60007D0")]
		[Address(RVA = "0x2027A24", Offset = "0x2027A24", VA = "0x2027A24")]
		public Vector3 InterpolateScale(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007D1")]
		[Address(RVA = "0x20199BC", Offset = "0x20199BC", VA = "0x20199BC")]
		public Vector3 GetOrientationUpFast(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007D2")]
		[Address(RVA = "0x2027ADC", Offset = "0x2027ADC", VA = "0x2027ADC")]
		public Quaternion GetOrientationFast(float tf, bool inverse = false)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007D3")]
		[Address(RVA = "0x20197D4", Offset = "0x20197D4", VA = "0x20197D4")]
		public Vector3 GetTangent(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007D4")]
		[Address(RVA = "0x2027BA4", Offset = "0x2027BA4", VA = "0x2027BA4")]
		public Vector3 GetTangent(float tf, Vector3 localPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007D5")]
		[Address(RVA = "0x201988C", Offset = "0x201988C", VA = "0x201988C")]
		public Vector3 GetTangentFast(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007D6")]
		[Address(RVA = "0x2027C7C", Offset = "0x2027C7C", VA = "0x2027C7C")]
		public void InterpolateAndGetTangent(float tf, out Vector3 localPosition, out Vector3 localTangent)
		{
		}

		[Token(Token = "0x60007D7")]
		[Address(RVA = "0x2027D64", Offset = "0x2027D64", VA = "0x2027D64")]
		public void InterpolateAndGetTangentFast(float tf, out Vector3 localPosition, out Vector3 localTangent)
		{
		}

		[Token(Token = "0x60007D8")]
		[Address(RVA = "0x2027E4C", Offset = "0x2027E4C", VA = "0x2027E4C")]
		public Vector3 GetTangentByDistance(float distance)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007D9")]
		[Address(RVA = "0x2027E74", Offset = "0x2027E74", VA = "0x2027E74")]
		public Vector3 GetTangentByDistanceFast(float distance)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007DA")]
		[Address(RVA = "0x2027E9C", Offset = "0x2027E9C", VA = "0x2027E9C")]
		public Vector3 InterpolateByDistance(float distance)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007DB")]
		[Address(RVA = "0x2027EC4", Offset = "0x2027EC4", VA = "0x2027EC4")]
		public Vector3 InterpolateByDistanceFast(float distance)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007DC")]
		[Address(RVA = "0x2027EEC", Offset = "0x2027EEC", VA = "0x2027EEC")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD68CC", Offset = "0xFD68CC")]
		public float ExtrapolateDistanceToTF(float tf, float distance, float stepSize)
		{
			return default(float);
		}

		[Token(Token = "0x60007DD")]
		[Address(RVA = "0x20280B4", Offset = "0x20280B4", VA = "0x20280B4")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD6904", Offset = "0xFD6904")]
		public float ExtrapolateDistanceToTFFast(float tf, float distance, float stepSize)
		{
			return default(float);
		}

		[Token(Token = "0x60007DE")]
		[Address(RVA = "0x201917C", Offset = "0x201917C", VA = "0x201917C")]
		public float TFToDistance(float tf, CurvyClamping clamping = CurvyClamping.Clamp)
		{
			return default(float);
		}

		[Token(Token = "0x60007DF")]
		[Address(RVA = "0x201AD2C", Offset = "0x201AD2C", VA = "0x201AD2C")]
		public CurvySplineSegment TFToSegment(float tf, out float localF, out bool isOnSegmentStart, out bool isOnSegmentEnd, CurvyClamping clamping)
		{
			return null;
		}

		[Token(Token = "0x60007E0")]
		[Address(RVA = "0x202827C", Offset = "0x202827C", VA = "0x202827C")]
		public CurvySplineSegment TFToSegment(float tf, out float localF, CurvyClamping clamping)
		{
			return null;
		}

		[Token(Token = "0x60007E1")]
		[Address(RVA = "0x20282AC", Offset = "0x20282AC", VA = "0x20282AC")]
		public CurvySplineSegment TFToSegment(float tf, CurvyClamping clamping)
		{
			return null;
		}

		[Token(Token = "0x60007E2")]
		[Address(RVA = "0x20282E4", Offset = "0x20282E4", VA = "0x20282E4")]
		public CurvySplineSegment TFToSegment(float tf)
		{
			return null;
		}

		[Token(Token = "0x60007E3")]
		[Address(RVA = "0x2019704", Offset = "0x2019704", VA = "0x2019704")]
		public CurvySplineSegment TFToSegment(float tf, out float localF)
		{
			return null;
		}

		[Token(Token = "0x60007E4")]
		[Address(RVA = "0x202831C", Offset = "0x202831C", VA = "0x202831C")]
		public float SegmentToTF(CurvySplineSegment segment)
		{
			return default(float);
		}

		[Token(Token = "0x60007E5")]
		[Address(RVA = "0x201AF78", Offset = "0x201AF78", VA = "0x201AF78")]
		public float SegmentToTF(CurvySplineSegment segment, float localF)
		{
			return default(float);
		}

		[Token(Token = "0x60007E6")]
		[Address(RVA = "0x2019268", Offset = "0x2019268", VA = "0x2019268")]
		public float DistanceToTF(float distance, CurvyClamping clamping = CurvyClamping.Clamp)
		{
			return default(float);
		}

		[Token(Token = "0x60007E7")]
		[Address(RVA = "0x2028364", Offset = "0x2028364", VA = "0x2028364")]
		public CurvySplineSegment DistanceToSegment(float distance, CurvyClamping clamping = CurvyClamping.Clamp)
		{
			return null;
		}

		[Token(Token = "0x60007E8")]
		[Address(RVA = "0x2028334", Offset = "0x2028334", VA = "0x2028334")]
		public CurvySplineSegment DistanceToSegment(float distance, out float localDistance, CurvyClamping clamping = CurvyClamping.Clamp)
		{
			return null;
		}

		[Token(Token = "0x60007E9")]
		[Address(RVA = "0x201ADF0", Offset = "0x201ADF0", VA = "0x201ADF0")]
		public CurvySplineSegment DistanceToSegment(float distance, out float localDistance, out bool isOnSegmentStart, out bool isOnSegmentEnd, CurvyClamping clamping = CurvyClamping.Clamp)
		{
			return null;
		}

		[Token(Token = "0x60007EA")]
		[Address(RVA = "0x202839C", Offset = "0x202839C", VA = "0x202839C")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD693C", Offset = "0xFD693C")]
		public Vector3 Move(ref float tf, ref int direction, float fDistance, CurvyClamping clamping)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007EB")]
		[Address(RVA = "0x20283E8", Offset = "0x20283E8", VA = "0x20283E8")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD6974", Offset = "0xFD6974")]
		public Vector3 MoveFast(ref float tf, ref int direction, float fDistance, CurvyClamping clamping)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007EC")]
		[Address(RVA = "0x2028434", Offset = "0x2028434", VA = "0x2028434")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD69AC", Offset = "0xFD69AC")]
		public Vector3 MoveBy(ref float tf, ref int direction, float distance, CurvyClamping clamping, float stepSize = 0.002f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007ED")]
		[Address(RVA = "0x20284A0", Offset = "0x20284A0", VA = "0x20284A0")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD69E4", Offset = "0xFD69E4")]
		public Vector3 MoveByFast(ref float tf, ref int direction, float distance, CurvyClamping clamping, float stepSize = 0.002f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007EE")]
		[Address(RVA = "0x202850C", Offset = "0x202850C", VA = "0x202850C")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD6A1C", Offset = "0xFD6A1C")]
		public Vector3 MoveByLengthFast(ref float tf, ref int direction, float distance, CurvyClamping clamping)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007EF")]
		[Address(RVA = "0x2028598", Offset = "0x2028598", VA = "0x2028598")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD6A54", Offset = "0xFD6A54")]
		public Vector3 MoveByAngle(ref float tf, ref int direction, float angle, CurvyClamping clamping, float stepSize = 0.002f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007F0")]
		[Address(RVA = "0x2028830", Offset = "0x2028830", VA = "0x2028830")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD6A8C", Offset = "0xFD6A8C")]
		public Vector3 MoveByAngleFast(ref float tf, ref int direction, float angle, CurvyClamping clamping, float stepSize)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007F1")]
		[Address(RVA = "0x2028AC8", Offset = "0x2028AC8", VA = "0x2028AC8")]
		public float ClampDistance(float distance, CurvyClamping clamping)
		{
			return default(float);
		}

		[Token(Token = "0x60007F2")]
		[Address(RVA = "0x2028B04", Offset = "0x2028B04", VA = "0x2028B04")]
		public float ClampDistance(float distance, CurvyClamping clamping, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x60007F3")]
		[Address(RVA = "0x201A67C", Offset = "0x201A67C", VA = "0x201A67C")]
		public float ClampDistance(float distance, ref int dir, CurvyClamping clamping)
		{
			return default(float);
		}

		[Token(Token = "0x60007F4")]
		[Address(RVA = "0x2028B58", Offset = "0x2028B58", VA = "0x2028B58")]
		public float ClampDistance(float distance, ref int dir, CurvyClamping clamping, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x60007F5")]
		[Address(RVA = "0x2028BB4", Offset = "0x2028BB4", VA = "0x2028BB4")]
		public CurvySplineSegment Add()
		{
			return null;
		}

		[Token(Token = "0x60007F6")]
		[Address(RVA = "0x2028BC0", Offset = "0x2028BC0", VA = "0x2028BC0")]
		public CurvySplineSegment[] Add(params Vector3[] controlPointsLocalPositions)
		{
			return null;
		}

		[Token(Token = "0x60007F7")]
		[Address(RVA = "0x2028F6C", Offset = "0x2028F6C", VA = "0x2028F6C")]
		public CurvySplineSegment InsertBefore(CurvySplineSegment controlPoint, bool skipRefreshingAndEvents = false)
		{
			return null;
		}

		[Token(Token = "0x60007F8")]
		[Address(RVA = "0x2029154", Offset = "0x2029154", VA = "0x2029154")]
		public CurvySplineSegment InsertBefore([CanBeNull] CurvySplineSegment controlPoint, Vector3 globalPosition, bool skipRefreshingAndEvents = false)
		{
			return null;
		}

		[Token(Token = "0x60007F9")]
		[Address(RVA = "0x2024470", Offset = "0x2024470", VA = "0x2024470")]
		public CurvySplineSegment InsertAfter(CurvySplineSegment controlPoint, bool skipRefreshingAndEvents = false)
		{
			return null;
		}

		[Token(Token = "0x60007FA")]
		[Address(RVA = "0x2028DDC", Offset = "0x2028DDC", VA = "0x2028DDC")]
		public CurvySplineSegment InsertAfter([CanBeNull] CurvySplineSegment controlPoint, Vector3 globalPosition, bool skipRefreshingAndEvents = false)
		{
			return null;
		}

		[Token(Token = "0x60007FB")]
		[Address(RVA = "0x2029698", Offset = "0x2029698", VA = "0x2029698")]
		public void Clear()
		{
		}

		[Token(Token = "0x60007FC")]
		[Address(RVA = "0x2024654", Offset = "0x2024654", VA = "0x2024654")]
		public void Delete(CurvySplineSegment controlPoint, bool skipRefreshingAndEvents = false)
		{
		}

		[Token(Token = "0x60007FD")]
		[Address(RVA = "0x2029C28", Offset = "0x2029C28", VA = "0x2029C28")]
		public Vector3[] GetApproximation(Space space = Space.Self)
		{
			return null;
		}

		[Token(Token = "0x60007FE")]
		[Address(RVA = "0x2029DFC", Offset = "0x2029DFC", VA = "0x2029DFC")]
		public Vector3[] GetApproximationT()
		{
			return null;
		}

		[Token(Token = "0x60007FF")]
		[Address(RVA = "0x2029F1C", Offset = "0x2029F1C", VA = "0x2029F1C")]
		public Vector3[] GetApproximationUpVectors()
		{
			return null;
		}

		[Token(Token = "0x6000800")]
		[Address(RVA = "0x202A03C", Offset = "0x202A03C", VA = "0x202A03C")]
		public float GetNearestPointTF(Vector3 localPosition)
		{
			return default(float);
		}

		[Token(Token = "0x6000801")]
		[Address(RVA = "0x202A0B0", Offset = "0x202A0B0", VA = "0x202A0B0")]
		public float GetNearestPointTF(Vector3 localPosition, out Vector3 nearest)
		{
			return default(float);
		}

		[Token(Token = "0x6000802")]
		[Address(RVA = "0x202A0E4", Offset = "0x202A0E4", VA = "0x202A0E4")]
		public float GetNearestPointTF(Vector3 localPosition, int startSegmentIndex = 0, int stopSegmentIndex = -1)
		{
			return default(float);
		}

		[Token(Token = "0x6000803")]
		[Address(RVA = "0x202A07C", Offset = "0x202A07C", VA = "0x202A07C")]
		public float GetNearestPointTF(Vector3 localPosition, out Vector3 nearest, int startSegmentIndex = 0, int stopSegmentIndex = -1)
		{
			return default(float);
		}

		[Token(Token = "0x6000804")]
		[Address(RVA = "0x202A124", Offset = "0x202A124", VA = "0x202A124")]
		public float GetNearestPointTF(Vector3 localPosition, out Vector3 nearestPoint, [CanBeNull] out CurvySplineSegment nearestSegment, out float nearestSegmentF, int startSegmentIndex = 0, int stopSegmentIndex = -1)
		{
			return default(float);
		}

		[Token(Token = "0x6000805")]
		[Address(RVA = "0x201A7DC", Offset = "0x201A7DC", VA = "0x201A7DC")]
		public void Refresh()
		{
		}

		[Token(Token = "0x6000806")]
		[Address(RVA = "0x202352C", Offset = "0x202352C", VA = "0x202352C")]
		public void SetDirtyAll()
		{
		}

		[Token(Token = "0x6000807")]
		[Address(RVA = "0x2025830", Offset = "0x2025830", VA = "0x2025830")]
		public void SetDirtyAll(SplineDirtyingType dirtyingType, bool dirtyConnectedControlPoints)
		{
		}

		[Token(Token = "0x6000808")]
		[Address(RVA = "0x202B2E4", Offset = "0x202B2E4", VA = "0x202B2E4")]
		public void SetDirty(CurvySplineSegment dirtyControlPoint, SplineDirtyingType dirtyingType)
		{
		}

		[Token(Token = "0x6000809")]
		[Address(RVA = "0x201FD74", Offset = "0x201FD74", VA = "0x201FD74")]
		public void SetDirtyPartial(CurvySplineSegment dirtyControlPoint, SplineDirtyingType dirtyingType)
		{
		}

		[Token(Token = "0x600080A")]
		[Address(RVA = "0x202B818", Offset = "0x202B818", VA = "0x202B818")]
		public Vector3 ToWorldPosition(Vector3 localPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600080B")]
		[Address(RVA = "0x202B864", Offset = "0x202B864", VA = "0x202B864")]
		public void SyncSplineFromHierarchy()
		{
		}

		[Token(Token = "0x600080C")]
		[Address(RVA = "0x202BB08", Offset = "0x202BB08", VA = "0x202BB08")]
		public Vector3[] GetApproximationPoints(float fromTF, float toTF, bool includeEndPoint = true)
		{
			return null;
		}

		[Token(Token = "0x600080D")]
		[Address(RVA = "0x202BF60", Offset = "0x202BF60", VA = "0x202BF60")]
		public bool IsPlanar(out int ignoreAxis)
		{
			return default(bool);
		}

		[Token(Token = "0x600080E")]
		[Address(RVA = "0x202BFDC", Offset = "0x202BFDC", VA = "0x202BFDC")]
		public bool IsPlanar(out bool xplanar, out bool yplanar, out bool zplanar)
		{
			return default(bool);
		}

		[Token(Token = "0x600080F")]
		[Address(RVA = "0x202C264", Offset = "0x202C264", VA = "0x202C264")]
		public bool IsPlanar(CurvyPlane plane)
		{
			return default(bool);
		}

		[Token(Token = "0x6000810")]
		[Address(RVA = "0x202C42C", Offset = "0x202C42C", VA = "0x202C42C")]
		public void MakePlanar(CurvyPlane plane)
		{
		}

		[Token(Token = "0x6000811")]
		[Address(RVA = "0x202C8C4", Offset = "0x202C8C4", VA = "0x202C8C4")]
		public void Subdivide([Optional] CurvySplineSegment fromCP, [Optional] CurvySplineSegment toCP)
		{
		}

		[Token(Token = "0x6000812")]
		[Address(RVA = "0x202CFE0", Offset = "0x202CFE0", VA = "0x202CFE0")]
		public void Simplify([Optional] CurvySplineSegment fromCP, [Optional] CurvySplineSegment toCP)
		{
		}

		[Token(Token = "0x6000813")]
		[Address(RVA = "0x202D2DC", Offset = "0x202D2DC", VA = "0x202D2DC")]
		public void Equalize([Optional] CurvySplineSegment fromCP, [Optional] CurvySplineSegment toCP)
		{
		}

		[Token(Token = "0x6000814")]
		[Address(RVA = "0x202D68C", Offset = "0x202D68C", VA = "0x202D68C")]
		public void Normalize()
		{
		}

		[Token(Token = "0x6000815")]
		[Address(RVA = "0x202D8B0", Offset = "0x202D8B0", VA = "0x202D8B0")]
		public void MakePlanar(int axis)
		{
		}

		[Token(Token = "0x6000816")]
		[Address(RVA = "0x202DA58", Offset = "0x202DA58", VA = "0x202DA58")]
		public Vector3 SetPivot(float xRel = 0f, float yRel = 0f, float zRel = 0f, bool preview = false)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000817")]
		[Address(RVA = "0x202DDC8", Offset = "0x202DDC8", VA = "0x202DDC8")]
		public void Flip()
		{
		}

		[Token(Token = "0x6000818")]
		[Address(RVA = "0x202E0BC", Offset = "0x202E0BC", VA = "0x202E0BC")]
		public void MoveControlPoints(int startIndex, int count, CurvySplineSegment destCP)
		{
		}

		[Token(Token = "0x6000819")]
		[Address(RVA = "0x202E4AC", Offset = "0x202E4AC", VA = "0x202E4AC")]
		public void JoinWith(CurvySplineSegment destCP)
		{
		}

		[Token(Token = "0x600081A")]
		[Address(RVA = "0x202E598", Offset = "0x202E598", VA = "0x202E598")]
		public CurvySpline Split(CurvySplineSegment controlPoint)
		{
			return null;
		}

		[Token(Token = "0x600081B")]
		[Address(RVA = "0x202E84C", Offset = "0x202E84C", VA = "0x202E84C")]
		public void SetFirstControlPoint(CurvySplineSegment controlPoint)
		{
		}

		[Token(Token = "0x600081C")]
		[Address(RVA = "0x202E9DC", Offset = "0x202E9DC", VA = "0x202E9DC")]
		public bool IsControlPointAnOrientationAnchor(CurvySplineSegment controlPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x600081D")]
		[Address(RVA = "0x201F870", Offset = "0x201F870", VA = "0x201F870")]
		public bool CanControlPointHaveFollowUp(CurvySplineSegment controlPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x600081E")]
		[Address(RVA = "0x2029238", Offset = "0x2029238", VA = "0x2029238")]
		public short GetControlPointIndex(CurvySplineSegment controlPoint)
		{
			return default(short);
		}

		[Token(Token = "0x600081F")]
		[Address(RVA = "0x202E808", Offset = "0x202E808", VA = "0x202E808")]
		public short GetSegmentIndex(CurvySplineSegment segment)
		{
			return default(short);
		}

		[Token(Token = "0x6000820")]
		[Address(RVA = "0x201AFD8", Offset = "0x201AFD8", VA = "0x201AFD8")]
		[CanBeNull]
		public CurvySplineSegment GetNextControlPoint(CurvySplineSegment controlPoint)
		{
			return null;
		}

		[Token(Token = "0x6000821")]
		[Address(RVA = "0x202EAEC", Offset = "0x202EAEC", VA = "0x202EAEC")]
		[CanBeNull]
		public short GetNextControlPointIndex(CurvySplineSegment controlPoint)
		{
			return default(short);
		}

		[Token(Token = "0x6000822")]
		[Address(RVA = "0x202EB30", Offset = "0x202EB30", VA = "0x202EB30")]
		[CanBeNull]
		public CurvySplineSegment GetNextControlPointUsingFollowUp(CurvySplineSegment controlPoint)
		{
			return null;
		}

		[Token(Token = "0x6000823")]
		[Address(RVA = "0x201B1C8", Offset = "0x201B1C8", VA = "0x201B1C8")]
		[CanBeNull]
		public CurvySplineSegment GetPreviousControlPoint(CurvySplineSegment controlPoint)
		{
			return null;
		}

		[Token(Token = "0x6000824")]
		[Address(RVA = "0x202EBF4", Offset = "0x202EBF4", VA = "0x202EBF4")]
		[CanBeNull]
		public short GetPreviousControlPointIndex(CurvySplineSegment controlPoint)
		{
			return default(short);
		}

		[Token(Token = "0x6000825")]
		[Address(RVA = "0x202EC38", Offset = "0x202EC38", VA = "0x202EC38")]
		[CanBeNull]
		public CurvySplineSegment GetPreviousControlPointUsingFollowUp(CurvySplineSegment controlPoint)
		{
			return null;
		}

		[Token(Token = "0x6000826")]
		[Address(RVA = "0x202BEB0", Offset = "0x202BEB0", VA = "0x202BEB0")]
		[CanBeNull]
		public CurvySplineSegment GetNextSegment(CurvySplineSegment segment)
		{
			return null;
		}

		[Token(Token = "0x6000827")]
		[Address(RVA = "0x202ECFC", Offset = "0x202ECFC", VA = "0x202ECFC")]
		[CanBeNull]
		public CurvySplineSegment GetPreviousSegment(CurvySplineSegment segment)
		{
			return null;
		}

		[Token(Token = "0x6000828")]
		[Address(RVA = "0x201B184", Offset = "0x201B184", VA = "0x201B184")]
		public bool IsControlPointASegment(CurvySplineSegment controlPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x6000829")]
		[Address(RVA = "0x201B278", Offset = "0x201B278", VA = "0x201B278")]
		public bool IsControlPointVisible(CurvySplineSegment controlPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x600082A")]
		[Address(RVA = "0x202EDAC", Offset = "0x202EDAC", VA = "0x202EDAC")]
		public short GetControlPointOrientationAnchorIndex(CurvySplineSegment controlPoint)
		{
			return default(short);
		}

		[Token(Token = "0x600082B")]
		[Address(RVA = "0x202EDF0", Offset = "0x202EDF0", VA = "0x202EDF0")]
		public void SetFromString(string fieldAndValue)
		{
		}

		[Token(Token = "0x600082C")]
		[Address(RVA = "0x202F38C", Offset = "0x202F38C", VA = "0x202F38C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600082D")]
		[Address(RVA = "0x202F428", Offset = "0x202F428", VA = "0x202F428")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600082E")]
		[Address(RVA = "0x2026CD0", Offset = "0x2026CD0", VA = "0x2026CD0")]
		public void Start()
		{
		}

		[Token(Token = "0x600082F")]
		[Address(RVA = "0x202F4BC", Offset = "0x202F4BC", VA = "0x202F4BC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000830")]
		[Address(RVA = "0x202F4C4", Offset = "0x202F4C4", VA = "0x202F4C4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000831")]
		[Address(RVA = "0x202F628", Offset = "0x202F628", VA = "0x202F628", Slot = "5")]
		protected virtual void Reset()
		{
		}

		[Token(Token = "0x6000832")]
		[Address(RVA = "0x202F7D8", Offset = "0x202F7D8", VA = "0x202F7D8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000833")]
		[Address(RVA = "0x202FB74", Offset = "0x202FB74", VA = "0x202FB74")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000834")]
		[Address(RVA = "0x202FBB8", Offset = "0x202FBB8", VA = "0x202FBB8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000836")]
		[Address(RVA = "0x202F47C", Offset = "0x202F47C", VA = "0x202F47C")]
		private void Initialize()
		{
		}

		[Token(Token = "0x6000837")]
		[Address(RVA = "0x202F818", Offset = "0x202F818", VA = "0x202F818")]
		private void doUpdate()
		{
		}

		[Token(Token = "0x6000838")]
		[Address(RVA = "0x2025BC0", Offset = "0x2025BC0", VA = "0x2025BC0")]
		private bool canHaveManualEndCP()
		{
			return default(bool);
		}

		[Token(Token = "0x6000839")]
		[Address(RVA = "0x202B33C", Offset = "0x202B33C", VA = "0x202B33C")]
		private void SetDirty(CurvySplineSegment controlPoint, SplineDirtyingType dirtyingType, CurvySplineSegment previousControlPoint, CurvySplineSegment nextControlPoint, bool ignoreConnectionOfInputControlPoint)
		{
		}

		[Token(Token = "0x600083A")]
		[Address(RVA = "0x202B294", Offset = "0x202B294", VA = "0x202B294")]
		private void SetDirtyingFlags(SplineDirtyingType dirtyingType)
		{
		}

		[Token(Token = "0x600083B")]
		[Address(RVA = "0x202E04C", Offset = "0x202E04C", VA = "0x202E04C")]
		private void ReverseControlPoints()
		{
		}

		[Token(Token = "0x600083C")]
		[Address(RVA = "0x202FC74", Offset = "0x202FC74", VA = "0x202FC74")]
		private static short GetNextControlPointIndex(short controlPointIndex, bool isSplineClosed, int controlPointsCount)
		{
			return default(short);
		}

		[Token(Token = "0x600083D")]
		[Address(RVA = "0x202FC90", Offset = "0x202FC90", VA = "0x202FC90")]
		private static short GetPreviousControlPointIndex(short controlPointIndex, bool isSplineClosed, int controlPointsCount)
		{
			return default(short);
		}

		[Token(Token = "0x600083E")]
		[Address(RVA = "0x202FCB4", Offset = "0x202FCB4", VA = "0x202FCB4")]
		private static bool IsControlPointASegment(int controlPointIndex, int controlPointCount, bool isClosed, bool notAutoEndTangentsAndIsCatmullRomOrTCB)
		{
			return default(bool);
		}

		[Token(Token = "0x600083F")]
		[Address(RVA = "0x202B96C", Offset = "0x202B96C", VA = "0x202B96C")]
		private void AddControlPoint(CurvySplineSegment item)
		{
		}

		[Token(Token = "0x6000840")]
		[Address(RVA = "0x202E318", Offset = "0x202E318", VA = "0x202E318")]
		private void InsertControlPoint(int index, CurvySplineSegment item)
		{
		}

		[Token(Token = "0x6000841")]
		[Address(RVA = "0x2029A34", Offset = "0x2029A34", VA = "0x2029A34")]
		private void RemoveControlPoint(CurvySplineSegment item)
		{
		}

		[Token(Token = "0x6000842")]
		[Address(RVA = "0x20298EC", Offset = "0x20298EC", VA = "0x20298EC")]
		private void ClearControlPoints()
		{
		}

		[Token(Token = "0x6000843")]
		[Address(RVA = "0x2025754", Offset = "0x2025754", VA = "0x2025754")]
		internal void InvalidateControlPointsRelationshipCacheINTERNAL()
		{
		}

		[Token(Token = "0x6000844")]
		[Address(RVA = "0x202627C", Offset = "0x202627C", VA = "0x202627C")]
		private void RebuildControlPointsRelationshipCache(bool fixNonCoherentControlPoints)
		{
		}

		[Token(Token = "0x6000845")]
		[Address(RVA = "0x202A3EC", Offset = "0x202A3EC", VA = "0x202A3EC")]
		private void ProcessDirtyControlPoints()
		{
		}

		[Token(Token = "0x6000846")]
		[Address(RVA = "0x202FF74", Offset = "0x202FF74", VA = "0x202FF74")]
		private void PrepareThreadCompatibleData()
		{
		}

		[Token(Token = "0x6000847")]
		[Address(RVA = "0x202FCEC", Offset = "0x202FCEC", VA = "0x202FCEC")]
		private void FillDirtyCpsExtendedList()
		{
		}

		[Token(Token = "0x6000848")]
		[Address(RVA = "0x202317C", Offset = "0x202317C", VA = "0x202317C")]
		internal void NotifyMetaDataModification()
		{
		}

		[Token(Token = "0x6000849")]
		[Address(RVA = "0x2030138", Offset = "0x2030138", VA = "0x2030138")]
		private void SyncHierarchyFromSpline(bool renameControlPoints = true)
		{
		}

		[Token(Token = "0x600084A")]
		[Address(RVA = "0x202FBFC", Offset = "0x202FBFC", VA = "0x202FBFC")]
		private void UpdatedLastProcessedGlobalCoordinates()
		{
		}

		[Token(Token = "0x600084B")]
		[Address(RVA = "0x202927C", Offset = "0x202927C", VA = "0x202927C")]
		private CurvySplineSegment InsertAt(CurvySplineSegment controlPoint, Vector3 globalPosition, int insertionIndex, CurvyControlPointEventArgs.ModeEnum insertionMode, bool skipRefreshingAndEvents)
		{
			return null;
		}

		[Token(Token = "0x600084C")]
		[Address(RVA = "0x202B228", Offset = "0x202B228", VA = "0x202B228")]
		private CurvySplineEventArgs OnRefreshEvent(CurvySplineEventArgs e)
		{
			return null;
		}

		[Token(Token = "0x600084D")]
		[Address(RVA = "0x2028D70", Offset = "0x2028D70", VA = "0x2028D70")]
		private CurvyControlPointEventArgs OnBeforeControlPointAddEvent(CurvyControlPointEventArgs e)
		{
			return null;
		}

		[Token(Token = "0x600084E")]
		[Address(RVA = "0x2028E94", Offset = "0x2028E94", VA = "0x2028E94")]
		private CurvyControlPointEventArgs OnAfterControlPointAddEvent(CurvyControlPointEventArgs e)
		{
			return null;
		}

		[Token(Token = "0x600084F")]
		[Address(RVA = "0x2029880", Offset = "0x2029880", VA = "0x2029880")]
		private CurvyControlPointEventArgs OnBeforeControlPointDeleteEvent(CurvyControlPointEventArgs e)
		{
			return null;
		}

		[Token(Token = "0x6000850")]
		[Address(RVA = "0x2028F00", Offset = "0x2028F00", VA = "0x2028F00")]
		private CurvySplineEventArgs OnAfterControlPointChangesEvent(CurvySplineEventArgs e)
		{
			return null;
		}

		[Token(Token = "0x6000852")]
		[Address(RVA = "0x2030198", Offset = "0x2030198", VA = "0x2030198")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6B44", Offset = "0xFD6B44")]
		private void <.ctor>b__4_0(CurvySplineSegment controlPoint)
		{
		}
	}
	[Token(Token = "0x20000FE")]
	public enum SplineDirtyingType
	{
		[Token(Token = "0x40005B4")]
		OrientationOnly,
		[Token(Token = "0x40005B5")]
		Everything
	}
	[Token(Token = "0x20000FF")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC6A58", Offset = "0xFC6A58")]
	public class CurvySplineSegment : MonoBehaviour, IPoolable
	{
		[Token(Token = "0x200021D")]
		internal readonly struct ControlPointExtrinsicProperties : IEquatable<ControlPointExtrinsicProperties>
		{
			[Token(Token = "0x4000B0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly bool isVisible;

			[Token(Token = "0x4000B0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
			private readonly short segmentIndex;

			[Token(Token = "0x4000B0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			private readonly short controlPointIndex;

			[Token(Token = "0x4000B10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6")]
			private readonly short nextControlPointIndex;

			[Token(Token = "0x4000B11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private readonly short previousControlPointIndex;

			[Token(Token = "0x4000B12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
			private readonly bool previousControlPointIsSegment;

			[Token(Token = "0x4000B13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB")]
			private readonly bool nextControlPointIsSegment;

			[Token(Token = "0x4000B14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private readonly bool canHaveFollowUp;

			[Token(Token = "0x4000B15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
			private readonly short orientationAnchorIndex;

			[Token(Token = "0x1700033F")]
			internal bool IsVisible
			{
				[Token(Token = "0x6000FC6")]
				[Address(RVA = "0x102ACC0", Offset = "0x102ACC0", VA = "0x102ACC0")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000340")]
			internal short SegmentIndex
			{
				[Token(Token = "0x6000FC7")]
				[Address(RVA = "0x102ACC8", Offset = "0x102ACC8", VA = "0x102ACC8")]
				get
				{
					return default(short);
				}
			}

			[Token(Token = "0x17000341")]
			internal short ControlPointIndex
			{
				[Token(Token = "0x6000FC8")]
				[Address(RVA = "0x102ACD0", Offset = "0x102ACD0", VA = "0x102ACD0")]
				get
				{
					return default(short);
				}
			}

			[Token(Token = "0x17000342")]
			internal short NextControlPointIndex
			{
				[Token(Token = "0x6000FC9")]
				[Address(RVA = "0x102ACD8", Offset = "0x102ACD8", VA = "0x102ACD8")]
				get
				{
					return default(short);
				}
			}

			[Token(Token = "0x17000343")]
			internal short PreviousControlPointIndex
			{
				[Token(Token = "0x6000FCA")]
				[Address(RVA = "0x102ACE0", Offset = "0x102ACE0", VA = "0x102ACE0")]
				get
				{
					return default(short);
				}
			}

			[Token(Token = "0x17000344")]
			internal bool PreviousControlPointIsSegment
			{
				[Token(Token = "0x6000FCB")]
				[Address(RVA = "0x102ACE8", Offset = "0x102ACE8", VA = "0x102ACE8")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000345")]
			internal bool NextControlPointIsSegment
			{
				[Token(Token = "0x6000FCC")]
				[Address(RVA = "0x102ACF0", Offset = "0x102ACF0", VA = "0x102ACF0")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000346")]
			internal bool CanHaveFollowUp
			{
				[Token(Token = "0x6000FCD")]
				[Address(RVA = "0x102ACF8", Offset = "0x102ACF8", VA = "0x102ACF8")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000347")]
			internal bool IsSegment
			{
				[Token(Token = "0x6000FCE")]
				[Address(RVA = "0x102AD00", Offset = "0x102AD00", VA = "0x102AD00")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000348")]
			internal short OrientationAnchorIndex
			{
				[Token(Token = "0x6000FCF")]
				[Address(RVA = "0x102AD10", Offset = "0x102AD10", VA = "0x102AD10")]
				get
				{
					return default(short);
				}
			}

			[Token(Token = "0x6000FD0")]
			[Address(RVA = "0x102AD18", Offset = "0x102AD18", VA = "0x102AD18")]
			internal ControlPointExtrinsicProperties(bool isVisible, short segmentIndex, short controlPointIndex, short previousControlPointIndex, short nextControlPointIndex, bool previousControlPointIsSegment, bool nextControlPointIsSegment, bool canHaveFollowUp, short orientationAnchorIndex)
			{
			}

			[Token(Token = "0x6000FD1")]
			[Address(RVA = "0x102AD58", Offset = "0x102AD58", VA = "0x102AD58", Slot = "4")]
			public bool Equals(ControlPointExtrinsicProperties other)
			{
				return default(bool);
			}

			[Token(Token = "0x6000FD2")]
			[Address(RVA = "0x102AD60", Offset = "0x102AD60", VA = "0x102AD60", Slot = "0")]
			public override bool Equals(object obj)
			{
				return default(bool);
			}

			[Token(Token = "0x6000FD3")]
			[Address(RVA = "0x102AD68", Offset = "0x102AD68", VA = "0x102AD68", Slot = "2")]
			public override int GetHashCode()
			{
				return default(int);
			}

			[Token(Token = "0x6000FD4")]
			[Address(RVA = "0x1BF2D2C", Offset = "0x1BF2D2C", VA = "0x1BF2D2C")]
			public static bool operator ==(ControlPointExtrinsicProperties left, ControlPointExtrinsicProperties right)
			{
				return default(bool);
			}

			[Token(Token = "0x6000FD5")]
			[Address(RVA = "0x1BF2D5C", Offset = "0x1BF2D5C", VA = "0x1BF2D5C")]
			public static bool operator !=(ControlPointExtrinsicProperties left, ControlPointExtrinsicProperties right)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40005B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Color GizmoTangentColor;

		[NonSerialized]
		[Token(Token = "0x40005B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3[] Approximation;

		[NonSerialized]
		[Token(Token = "0x40005B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float[] ApproximationDistances;

		[NonSerialized]
		[Token(Token = "0x40005B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3[] ApproximationUp;

		[NonSerialized]
		[Token(Token = "0x40005BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3[] ApproximationT;

		[Token(Token = "0x40005BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFCAB78", Offset = "0xFCAB78")]
		private float <Length>k__BackingField;

		[Token(Token = "0x40005BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFCAB88", Offset = "0xFCAB88")]
		private float <Distance>k__BackingField;

		[Token(Token = "0x40005BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFCAB98", Offset = "0xFCAB98")]
		private float <TF>k__BackingField;

		[Token(Token = "0x40005BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0xFCABA8", Offset = "0xFCABA8")]
		[AttributeAttribute(Name = "FieldActionAttribute", RVA = "0xFCABA8", Offset = "0xFCABA8")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFCABA8", Offset = "0xFCABA8")]
		[SerializeField]
		private bool m_AutoBakeOrientation;

		[Token(Token = "0x40005BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0xFCAC64", Offset = "0xFCAC64")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFCAC64", Offset = "0xFCAC64")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFCAC64", Offset = "0xFCAC64")]
		[SerializeField]
		private bool m_OrientationAnchor;

		[Token(Token = "0x40005C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFCAD60", Offset = "0xFCAD60")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0xFCAD60", Offset = "0xFCAD60")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFCAD60", Offset = "0xFCAD60")]
		[SerializeField]
		private CurvyOrientationSwirl m_Swirl;

		[Token(Token = "0x40005C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFCAE70", Offset = "0xFCAE70")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0xFCAE70", Offset = "0xFCAE70")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFCAE70", Offset = "0xFCAE70")]
		[SerializeField]
		private float m_SwirlTurns;

		[Token(Token = "0x40005C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0xFCAFC4", Offset = "0xFCAFC4")]
		[AttributeAttribute(Name = "GroupConditionAttribute", RVA = "0xFCAFC4", Offset = "0xFCAFC4")]
		[SerializeField]
		private bool m_AutoHandles;

		[Token(Token = "0x40005C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0xFCB0C0", Offset = "0xFCB0C0")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFCB0C0", Offset = "0xFCB0C0")]
		[SerializeField]
		private float m_AutoHandleDistance;

		[Token(Token = "0x40005C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0xFCB1BC", Offset = "0xFCB1BC")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xFCB1BC", Offset = "0xFCB1BC")]
		private Vector3 m_HandleIn;

		[Token(Token = "0x40005C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0xFCB270", Offset = "0xFCB270")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xFCB270", Offset = "0xFCB270")]
		private Vector3 m_HandleOut;

		[Token(Token = "0x40005C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0xFCB324", Offset = "0xFCB324")]
		[AttributeAttribute(Name = "GroupConditionAttribute", RVA = "0xFCB324", Offset = "0xFCB324")]
		[AttributeAttribute(Name = "GroupActionAttribute", RVA = "0xFCB324", Offset = "0xFCB324")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFCB324", Offset = "0xFCB324")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xFCB324", Offset = "0xFCB324")]
		private bool m_OverrideGlobalTension;

		[Token(Token = "0x40005C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFCB4B0", Offset = "0xFCB4B0")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xFCB4B0", Offset = "0xFCB4B0")]
		private bool m_OverrideGlobalContinuity;

		[Token(Token = "0x40005C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFCB53C", Offset = "0xFCB53C")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xFCB53C", Offset = "0xFCB53C")]
		private bool m_OverrideGlobalBias;

		[Token(Token = "0x40005C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x73")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFCB5C8", Offset = "0xFCB5C8")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xFCB5C8", Offset = "0xFCB5C8")]
		private bool m_SynchronizeTCB;

		[Token(Token = "0x40005CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFCB638", Offset = "0xFCB638")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFCB638", Offset = "0xFCB638")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xFCB638", Offset = "0xFCB638")]
		private float m_StartTension;

		[Token(Token = "0x40005CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFCB748", Offset = "0xFCB748")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFCB748", Offset = "0xFCB748")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xFCB748", Offset = "0xFCB748")]
		private float m_EndTension;

		[Token(Token = "0x40005CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFCB894", Offset = "0xFCB894")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFCB894", Offset = "0xFCB894")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xFCB894", Offset = "0xFCB894")]
		private float m_StartContinuity;

		[Token(Token = "0x40005CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFCB9A4", Offset = "0xFCB9A4")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFCB9A4", Offset = "0xFCB9A4")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xFCB9A4", Offset = "0xFCB9A4")]
		private float m_EndContinuity;

		[Token(Token = "0x40005CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFCBAF0", Offset = "0xFCBAF0")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFCBAF0", Offset = "0xFCBAF0")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xFCBAF0", Offset = "0xFCBAF0")]
		private float m_StartBias;

		[Token(Token = "0x40005CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFCBC00", Offset = "0xFCBC00")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFCBC00", Offset = "0xFCBC00")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xFCBC00", Offset = "0xFCBC00")]
		private float m_EndBias;

		[Token(Token = "0x40005D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		[HideInInspector]
		private CurvySplineSegment m_FollowUp;

		[Token(Token = "0x40005D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		[HideInInspector]
		private ConnectionHeadingEnum m_FollowUpHeading;

		[Token(Token = "0x40005D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[SerializeField]
		[HideInInspector]
		private bool m_ConnectionSyncPosition;

		[Token(Token = "0x40005D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9D")]
		[SerializeField]
		[HideInInspector]
		private bool m_ConnectionSyncRotation;

		[Token(Token = "0x40005D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		[HideInInspector]
		private CurvyConnection m_Connection;

		[Token(Token = "0x40005D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private int cacheSize;

		[Token(Token = "0x40005D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Transform cachedTransform;

		[Token(Token = "0x40005D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Vector3 threadSafeLocalPosition;

		[Token(Token = "0x40005D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Vector3 threadSafeNextCpLocalPosition;

		[Token(Token = "0x40005D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Vector3 threadSafePreviousCpLocalPosition;

		[Token(Token = "0x40005DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private Quaternion threadSafeLocalRotation;

		[Token(Token = "0x40005DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private CurvySplineSegment cachedNextControlPoint;

		[Token(Token = "0x40005DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private CurvySpline mSpline;

		[Token(Token = "0x40005DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private float mStepSize;

		[Token(Token = "0x40005DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private Bounds? mBounds;

		[Token(Token = "0x40005DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private readonly HashSet<UnityEngine.Component> mMetaData;

		[Token(Token = "0x40005E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Vector3 lastProcessedLocalPosition;

		[Token(Token = "0x40005E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private Quaternion lastProcessedLocalRotation;

		[Token(Token = "0x40005E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		private ControlPointExtrinsicProperties extrinsicPropertiesINTERNAL;

		[Token(Token = "0x17000163")]
		public bool AutoBakeOrientation
		{
			[Token(Token = "0x6000853")]
			[Address(RVA = "0x1BEAE50", Offset = "0x1BEAE50", VA = "0x1BEAE50")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000854")]
			[Address(RVA = "0x1BEAE58", Offset = "0x1BEAE58", VA = "0x1BEAE58")]
			set
			{
			}
		}

		[Token(Token = "0x17000164")]
		public bool SerializedOrientationAnchor
		{
			[Token(Token = "0x6000855")]
			[Address(RVA = "0x1BEAE78", Offset = "0x1BEAE78", VA = "0x1BEAE78")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000856")]
			[Address(RVA = "0x1BEAE80", Offset = "0x1BEAE80", VA = "0x1BEAE80")]
			set
			{
			}
		}

		[Token(Token = "0x17000165")]
		public CurvyOrientationSwirl Swirl
		{
			[Token(Token = "0x6000857")]
			[Address(RVA = "0x1BEAEEC", Offset = "0x1BEAEEC", VA = "0x1BEAEEC")]
			get
			{
				return default(CurvyOrientationSwirl);
			}
			[Token(Token = "0x6000858")]
			[Address(RVA = "0x1BEAEF4", Offset = "0x1BEAEF4", VA = "0x1BEAEF4")]
			set
			{
			}
		}

		[Token(Token = "0x17000166")]
		public float SwirlTurns
		{
			[Token(Token = "0x6000859")]
			[Address(RVA = "0x1BEAF30", Offset = "0x1BEAF30", VA = "0x1BEAF30")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600085A")]
			[Address(RVA = "0x1BEAF38", Offset = "0x1BEAF38", VA = "0x1BEAF38")]
			set
			{
			}
		}

		[Token(Token = "0x17000167")]
		public Vector3 HandleIn
		{
			[Token(Token = "0x600085B")]
			[Address(RVA = "0x1BEAF70", Offset = "0x1BEAF70", VA = "0x1BEAF70")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600085C")]
			[Address(RVA = "0x1BEAF7C", Offset = "0x1BEAF7C", VA = "0x1BEAF7C")]
			set
			{
			}
		}

		[Token(Token = "0x17000168")]
		public Vector3 HandleOut
		{
			[Token(Token = "0x600085D")]
			[Address(RVA = "0x1BEB064", Offset = "0x1BEB064", VA = "0x1BEB064")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600085E")]
			[Address(RVA = "0x1BEB070", Offset = "0x1BEB070", VA = "0x1BEB070")]
			set
			{
			}
		}

		[Token(Token = "0x17000169")]
		public Vector3 HandleInPosition
		{
			[Token(Token = "0x600085F")]
			[Address(RVA = "0x1BEB158", Offset = "0x1BEB158", VA = "0x1BEB158")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000860")]
			[Address(RVA = "0x1BEB298", Offset = "0x1BEB298", VA = "0x1BEB298")]
			set
			{
			}
		}

		[Token(Token = "0x1700016A")]
		public Vector3 HandleOutPosition
		{
			[Token(Token = "0x6000861")]
			[Address(RVA = "0x1BEB388", Offset = "0x1BEB388", VA = "0x1BEB388")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000862")]
			[Address(RVA = "0x1BEB4C8", Offset = "0x1BEB4C8", VA = "0x1BEB4C8")]
			set
			{
			}
		}

		[Token(Token = "0x1700016B")]
		public bool AutoHandles
		{
			[Token(Token = "0x6000863")]
			[Address(RVA = "0x1BEB5B8", Offset = "0x1BEB5B8", VA = "0x1BEB5B8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000864")]
			[Address(RVA = "0x1BEB5C0", Offset = "0x1BEB5C0", VA = "0x1BEB5C0")]
			set
			{
			}
		}

		[Token(Token = "0x1700016C")]
		public float AutoHandleDistance
		{
			[Token(Token = "0x6000865")]
			[Address(RVA = "0x1BEB76C", Offset = "0x1BEB76C", VA = "0x1BEB76C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000866")]
			[Address(RVA = "0x1BEB774", Offset = "0x1BEB774", VA = "0x1BEB774")]
			set
			{
			}
		}

		[Token(Token = "0x1700016D")]
		public bool SynchronizeTCB
		{
			[Token(Token = "0x6000867")]
			[Address(RVA = "0x1BEB830", Offset = "0x1BEB830", VA = "0x1BEB830")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000868")]
			[Address(RVA = "0x1BEB838", Offset = "0x1BEB838", VA = "0x1BEB838")]
			set
			{
			}
		}

		[Token(Token = "0x1700016E")]
		public bool OverrideGlobalTension
		{
			[Token(Token = "0x6000869")]
			[Address(RVA = "0x1BEB880", Offset = "0x1BEB880", VA = "0x1BEB880")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600086A")]
			[Address(RVA = "0x1BEB888", Offset = "0x1BEB888", VA = "0x1BEB888")]
			set
			{
			}
		}

		[Token(Token = "0x1700016F")]
		public bool OverrideGlobalContinuity
		{
			[Token(Token = "0x600086B")]
			[Address(RVA = "0x1BEB8D0", Offset = "0x1BEB8D0", VA = "0x1BEB8D0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600086C")]
			[Address(RVA = "0x1BEB8D8", Offset = "0x1BEB8D8", VA = "0x1BEB8D8")]
			set
			{
			}
		}

		[Token(Token = "0x17000170")]
		public bool OverrideGlobalBias
		{
			[Token(Token = "0x600086D")]
			[Address(RVA = "0x1BEB920", Offset = "0x1BEB920", VA = "0x1BEB920")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600086E")]
			[Address(RVA = "0x1BEB928", Offset = "0x1BEB928", VA = "0x1BEB928")]
			set
			{
			}
		}

		[Token(Token = "0x17000171")]
		public float StartTension
		{
			[Token(Token = "0x600086F")]
			[Address(RVA = "0x1BEB970", Offset = "0x1BEB970", VA = "0x1BEB970")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000870")]
			[Address(RVA = "0x1BEB978", Offset = "0x1BEB978", VA = "0x1BEB978")]
			set
			{
			}
		}

		[Token(Token = "0x17000172")]
		public float StartContinuity
		{
			[Token(Token = "0x6000871")]
			[Address(RVA = "0x1BEB9B0", Offset = "0x1BEB9B0", VA = "0x1BEB9B0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000872")]
			[Address(RVA = "0x1BEB9B8", Offset = "0x1BEB9B8", VA = "0x1BEB9B8")]
			set
			{
			}
		}

		[Token(Token = "0x17000173")]
		public float StartBias
		{
			[Token(Token = "0x6000873")]
			[Address(RVA = "0x1BEB9F0", Offset = "0x1BEB9F0", VA = "0x1BEB9F0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000874")]
			[Address(RVA = "0x1BEB9F8", Offset = "0x1BEB9F8", VA = "0x1BEB9F8")]
			set
			{
			}
		}

		[Token(Token = "0x17000174")]
		public float EndTension
		{
			[Token(Token = "0x6000875")]
			[Address(RVA = "0x1BEBA30", Offset = "0x1BEBA30", VA = "0x1BEBA30")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000876")]
			[Address(RVA = "0x1BEBA38", Offset = "0x1BEBA38", VA = "0x1BEBA38")]
			set
			{
			}
		}

		[Token(Token = "0x17000175")]
		public float EndContinuity
		{
			[Token(Token = "0x6000877")]
			[Address(RVA = "0x1BEBA70", Offset = "0x1BEBA70", VA = "0x1BEBA70")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000878")]
			[Address(RVA = "0x1BEBA78", Offset = "0x1BEBA78", VA = "0x1BEBA78")]
			set
			{
			}
		}

		[Token(Token = "0x17000176")]
		public float EndBias
		{
			[Token(Token = "0x6000879")]
			[Address(RVA = "0x1BEBAB0", Offset = "0x1BEBAB0", VA = "0x1BEBAB0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600087A")]
			[Address(RVA = "0x1BEBAB8", Offset = "0x1BEBAB8", VA = "0x1BEBAB8")]
			set
			{
			}
		}

		[Token(Token = "0x17000177")]
		public CurvySplineSegment FollowUp
		{
			[Token(Token = "0x600087B")]
			[Address(RVA = "0x1BEBAF0", Offset = "0x1BEBAF0", VA = "0x1BEBAF0")]
			get
			{
				return null;
			}
			[Token(Token = "0x600087C")]
			[Address(RVA = "0x1BEBAF8", Offset = "0x1BEBAF8", VA = "0x1BEBAF8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000178")]
		public ConnectionHeadingEnum FollowUpHeading
		{
			[Token(Token = "0x600087D")]
			[Address(RVA = "0x1BEBBF4", Offset = "0x1BEBBF4", VA = "0x1BEBBF4")]
			get
			{
				return default(ConnectionHeadingEnum);
			}
			[Token(Token = "0x600087E")]
			[Address(RVA = "0x1BEBBFC", Offset = "0x1BEBBFC", VA = "0x1BEBBFC")]
			set
			{
			}
		}

		[Token(Token = "0x17000179")]
		public bool ConnectionSyncPosition
		{
			[Token(Token = "0x600087F")]
			[Address(RVA = "0x1BEBCB8", Offset = "0x1BEBCB8", VA = "0x1BEBCB8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000880")]
			[Address(RVA = "0x1BEBCC0", Offset = "0x1BEBCC0", VA = "0x1BEBCC0")]
			set
			{
			}
		}

		[Token(Token = "0x1700017A")]
		public bool ConnectionSyncRotation
		{
			[Token(Token = "0x6000881")]
			[Address(RVA = "0x1BEBCE0", Offset = "0x1BEBCE0", VA = "0x1BEBCE0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000882")]
			[Address(RVA = "0x1BEBCE8", Offset = "0x1BEBCE8", VA = "0x1BEBCE8")]
			set
			{
			}
		}

		[Token(Token = "0x1700017B")]
		public CurvyConnection Connection
		{
			[Token(Token = "0x6000883")]
			[Address(RVA = "0x1BEBD08", Offset = "0x1BEBD08", VA = "0x1BEBD08")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000884")]
			[Address(RVA = "0x1BEBD10", Offset = "0x1BEBD10", VA = "0x1BEBD10")]
			internal set
			{
			}
		}

		[Token(Token = "0x1700017C")]
		public int CacheSize
		{
			[Token(Token = "0x6000885")]
			[Address(RVA = "0x1BEBEF0", Offset = "0x1BEBEF0", VA = "0x1BEBEF0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000886")]
			[Address(RVA = "0x1BEBEF8", Offset = "0x1BEBEF8", VA = "0x1BEBEF8")]
			private set
			{
			}
		}

		[Token(Token = "0x1700017D")]
		public Bounds Bounds
		{
			[Token(Token = "0x6000887")]
			[Address(RVA = "0x1BEBF00", Offset = "0x1BEBF00", VA = "0x1BEBF00")]
			get
			{
				return default(Bounds);
			}
		}

		[Token(Token = "0x1700017E")]
		public float Length
		{
			[Token(Token = "0x6000888")]
			[Address(RVA = "0x1BEC190", Offset = "0x1BEC190", VA = "0x1BEC190")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6B54", Offset = "0xFD6B54")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000889")]
			[Address(RVA = "0x1BEC198", Offset = "0x1BEC198", VA = "0x1BEC198")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6B64", Offset = "0xFD6B64")]
			private set
			{
			}
		}

		[Token(Token = "0x1700017F")]
		public float Distance
		{
			[Token(Token = "0x600088A")]
			[Address(RVA = "0x1BEC1A0", Offset = "0x1BEC1A0", VA = "0x1BEC1A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6B74", Offset = "0xFD6B74")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600088B")]
			[Address(RVA = "0x1BEC1A8", Offset = "0x1BEC1A8", VA = "0x1BEC1A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6B84", Offset = "0xFD6B84")]
			internal set
			{
			}
		}

		[Token(Token = "0x17000180")]
		public float TF
		{
			[Token(Token = "0x600088C")]
			[Address(RVA = "0x1BEC1B0", Offset = "0x1BEC1B0", VA = "0x1BEC1B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6B94", Offset = "0xFD6B94")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600088D")]
			[Address(RVA = "0x1BEC1B8", Offset = "0x1BEC1B8", VA = "0x1BEC1B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6BA4", Offset = "0xFD6BA4")]
			internal set
			{
			}
		}

		[Token(Token = "0x17000181")]
		public bool IsFirstControlPoint
		{
			[Token(Token = "0x600088E")]
			[Address(RVA = "0x1BEC1C0", Offset = "0x1BEC1C0", VA = "0x1BEC1C0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000182")]
		public bool IsLastControlPoint
		{
			[Token(Token = "0x600088F")]
			[Address(RVA = "0x1BEC1F0", Offset = "0x1BEC1F0", VA = "0x1BEC1F0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000183")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD7B94", Offset = "0xFD7B94")]
		public List<UnityEngine.Component> MetaData
		{
			[Token(Token = "0x6000890")]
			[Address(RVA = "0x1BEC248", Offset = "0x1BEC248", VA = "0x1BEC248")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000184")]
		public HashSet<UnityEngine.Component> MetaDataSet
		{
			[Token(Token = "0x6000891")]
			[Address(RVA = "0x1BEC298", Offset = "0x1BEC298", VA = "0x1BEC298")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000185")]
		public CurvySpline Spline
		{
			[Token(Token = "0x6000892")]
			[Address(RVA = "0x1BEC2A0", Offset = "0x1BEC2A0", VA = "0x1BEC2A0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000186")]
		public bool HasUnprocessedLocalPosition
		{
			[Token(Token = "0x6000893")]
			[Address(RVA = "0x1BEC2A8", Offset = "0x1BEC2A8", VA = "0x1BEC2A8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000187")]
		public bool HasUnprocessedLocalOrientation
		{
			[Token(Token = "0x6000894")]
			[Address(RVA = "0x1BEC374", Offset = "0x1BEC374", VA = "0x1BEC374")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000188")]
		public bool OrientatinInfluencesSpline
		{
			[Token(Token = "0x6000895")]
			[Address(RVA = "0x1BEC3B8", Offset = "0x1BEC3B8", VA = "0x1BEC3B8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000189")]
		private CurvyInterpolation interpolation
		{
			[Token(Token = "0x60008C5")]
			[Address(RVA = "0x1BF04CC", Offset = "0x1BF04CC", VA = "0x1BF04CC")]
			get
			{
				return default(CurvyInterpolation);
			}
		}

		[Token(Token = "0x1700018A")]
		private bool isDynamicOrientation
		{
			[Token(Token = "0x60008C6")]
			[Address(RVA = "0x1BF0558", Offset = "0x1BF0558", VA = "0x1BF0558")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700018B")]
		private bool IsOrientationAnchorEditable
		{
			[Token(Token = "0x60008C7")]
			[Address(RVA = "0x1BF05EC", Offset = "0x1BF05EC", VA = "0x1BF05EC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700018C")]
		private bool canHaveSwirl
		{
			[Token(Token = "0x60008C8")]
			[Address(RVA = "0x1BF06F4", Offset = "0x1BF06F4", VA = "0x1BF06F4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000896")]
		[Address(RVA = "0x1BEC468", Offset = "0x1BEC468", VA = "0x1BEC468")]
		public void SetBezierHandleIn(Vector3 position, Space space = Space.Self, CurvyBezierModeEnum mode = CurvyBezierModeEnum.None)
		{
		}

		[Token(Token = "0x6000897")]
		[Address(RVA = "0x1BEC9B0", Offset = "0x1BEC9B0", VA = "0x1BEC9B0")]
		public void SetBezierHandleOut(Vector3 position, Space space = Space.Self, CurvyBezierModeEnum mode = CurvyBezierModeEnum.None)
		{
		}

		[Token(Token = "0x6000898")]
		[Address(RVA = "0x1BECEF8", Offset = "0x1BECEF8", VA = "0x1BECEF8")]
		public void SetBezierHandles(float distanceFrag = -1f, bool setIn = true, bool setOut = true, bool noDirtying = false)
		{
		}

		[Token(Token = "0x6000899")]
		[Address(RVA = "0x1BED220", Offset = "0x1BED220", VA = "0x1BED220")]
		public void SetBezierHandles(float distanceFrag, Vector3 p, Vector3 n, bool setIn = true, bool setOut = true, bool noDirtying = false)
		{
		}

		[Token(Token = "0x600089A")]
		[Address(RVA = "0x1BED434", Offset = "0x1BED434", VA = "0x1BED434")]
		public void SetFollowUp(CurvySplineSegment target, ConnectionHeadingEnum heading = ConnectionHeadingEnum.Auto)
		{
		}

		[Token(Token = "0x600089B")]
		[Address(RVA = "0x1BED588", Offset = "0x1BED588", VA = "0x1BED588")]
		public void Disconnect()
		{
		}

		[Token(Token = "0x600089C")]
		[Address(RVA = "0x1BED61C", Offset = "0x1BED61C", VA = "0x1BED61C")]
		public void ResetConnectionRelatedData()
		{
		}

		[Token(Token = "0x600089D")]
		[Address(RVA = "0x1BED670", Offset = "0x1BED670", VA = "0x1BED670")]
		public Vector3 Interpolate(float localF)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600089E")]
		[Address(RVA = "0x1BED9FC", Offset = "0x1BED9FC", VA = "0x1BED9FC")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD6BB4", Offset = "0xFD6BB4")]
		public Vector3 Interpolate(float localF, CurvyInterpolation interpolation)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600089F")]
		[Address(RVA = "0x1BEDEFC", Offset = "0x1BEDEFC", VA = "0x1BEDEFC")]
		public Vector3 InterpolateFast(float localF)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008A0")]
		[Address(RVA = "0x1BEE104", Offset = "0x1BEE104", VA = "0x1BEE104")]
		public void ReloadMetaData()
		{
		}

		[Token(Token = "0x60008A1")]
		[Address(RVA = "0x1BEE3F0", Offset = "0x1BEE3F0", VA = "0x1BEE3F0")]
		public void RegisterMetaData(CurvyMetadataBase metaData)
		{
		}

		[Token(Token = "0x60008A2")]
		[Address(RVA = "0x1BEE460", Offset = "0x1BEE460", VA = "0x1BEE460")]
		public void UnregisterMetaData(CurvyMetadataBase metaData)
		{
		}

		[Token(Token = "0x60008A3")]
		[Address(RVA = "0x1BEE4C8", Offset = "0x1BEE4C8", VA = "0x1BEE4C8")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD6BEC", Offset = "0xFD6BEC")]
		public UnityEngine.Component GetMetaData(Type type, bool autoCreate = false)
		{
			return null;
		}

		[Token(Token = "0x60008A4")]
		public T GetMetadata<T>(bool autoCreate = false) where T : UnityEngine.Component, ICurvyMetadata
		{
			return null;
		}

		[Token(Token = "0x60008A5")]
		public U GetInterpolatedMetadata<T, U>(float f) where T : CurvyInterpolatableMetadataBase<U>
		{
			return (U)null;
		}

		[Token(Token = "0x60008A6")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD6C24", Offset = "0xFD6C24")]
		public U InterpolateMetadata<T, U>(float f) where T : UnityEngine.Component, ICurvyInterpolatableMetadata<U>
		{
			return (U)null;
		}

		[Token(Token = "0x60008A7")]
		[Address(RVA = "0x1BEE77C", Offset = "0x1BEE77C", VA = "0x1BEE77C")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD6C5C", Offset = "0xFD6C5C")]
		public object InterpolateMetadata(Type type, float f)
		{
			return null;
		}

		[Token(Token = "0x60008A8")]
		[Address(RVA = "0x1BEE8F0", Offset = "0x1BEE8F0", VA = "0x1BEE8F0")]
		public void DeleteMetadata()
		{
		}

		[Token(Token = "0x60008A9")]
		[Address(RVA = "0x1BEE9A4", Offset = "0x1BEE9A4", VA = "0x1BEE9A4")]
		public Vector3 InterpolateScale(float localF)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008AA")]
		[Address(RVA = "0x1BEEB00", Offset = "0x1BEEB00", VA = "0x1BEEB00")]
		public Vector3 GetTangent(float localF)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008AB")]
		[Address(RVA = "0x1BEEBA4", Offset = "0x1BEEBA4", VA = "0x1BEEBA4")]
		public Vector3 GetTangent(float localF, Vector3 position)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008AC")]
		[Address(RVA = "0x1BEED6C", Offset = "0x1BEED6C", VA = "0x1BEED6C")]
		public Vector3 GetTangentFast(float localF)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008AD")]
		[Address(RVA = "0x1BEEED0", Offset = "0x1BEEED0", VA = "0x1BEEED0")]
		public void InterpolateAndGetTangent(float localF, out Vector3 localPosition, out Vector3 localTangent)
		{
		}

		[Token(Token = "0x60008AE")]
		[Address(RVA = "0x1BEEF98", Offset = "0x1BEEF98", VA = "0x1BEEF98")]
		public void InterpolateAndGetTangentFast(float localF, out Vector3 localPosition, out Vector3 localTangent)
		{
		}

		[Token(Token = "0x60008AF")]
		[Address(RVA = "0x1BEF174", Offset = "0x1BEF174", VA = "0x1BEF174")]
		public Quaternion GetOrientationFast(float localF)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60008B0")]
		[Address(RVA = "0x1BEF17C", Offset = "0x1BEF17C", VA = "0x1BEF17C")]
		public Quaternion GetOrientationFast(float localF, bool inverse)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60008B1")]
		[Address(RVA = "0x1BEF31C", Offset = "0x1BEF31C", VA = "0x1BEF31C")]
		public Vector3 GetOrientationUpFast(float localF)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008B2")]
		[Address(RVA = "0x1BEF480", Offset = "0x1BEF480", VA = "0x1BEF480")]
		public float GetNearestPointF(Vector3 p)
		{
			return default(float);
		}

		[Token(Token = "0x60008B3")]
		[Address(RVA = "0x1BEF6AC", Offset = "0x1BEF6AC", VA = "0x1BEF6AC")]
		public float DistanceToLocalF(float localDistance)
		{
			return default(float);
		}

		[Token(Token = "0x60008B4")]
		[Address(RVA = "0x1BEF780", Offset = "0x1BEF780", VA = "0x1BEF780")]
		public float LocalFToDistance(float localF)
		{
			return default(float);
		}

		[Token(Token = "0x60008B5")]
		[Address(RVA = "0x1BEF830", Offset = "0x1BEF830", VA = "0x1BEF830")]
		public float LocalFToTF(float localF)
		{
			return default(float);
		}

		[Token(Token = "0x60008B6")]
		[Address(RVA = "0x1BEF850", Offset = "0x1BEF850", VA = "0x1BEF850", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60008B7")]
		[Address(RVA = "0x1BEF918", Offset = "0x1BEF918", VA = "0x1BEF918")]
		public void BakeOrientationToTransform()
		{
		}

		[Token(Token = "0x60008B8")]
		[Address(RVA = "0x1BEE00C", Offset = "0x1BEE00C", VA = "0x1BEE00C")]
		public int getApproximationIndexINTERNAL(float localF, out float frag)
		{
			return default(int);
		}

		[Token(Token = "0x60008B9")]
		[Address(RVA = "0x1BEFBE8", Offset = "0x1BEFBE8", VA = "0x1BEFBE8")]
		public void LinkToSpline(CurvySpline spline)
		{
		}

		[Token(Token = "0x60008BA")]
		[Address(RVA = "0x1BEFBF0", Offset = "0x1BEFBF0", VA = "0x1BEFBF0")]
		public void UnlinkFromSpline()
		{
		}

		[Token(Token = "0x60008BB")]
		[Address(RVA = "0x1BEFBFC", Offset = "0x1BEFBFC", VA = "0x1BEFBFC")]
		public void SetLocalPosition(Vector3 newPosition)
		{
		}

		[Token(Token = "0x60008BC")]
		[Address(RVA = "0x1BEFE00", Offset = "0x1BEFE00", VA = "0x1BEFE00")]
		public void SetPosition(Vector3 value)
		{
		}

		[Token(Token = "0x60008BD")]
		[Address(RVA = "0x1BEF9B8", Offset = "0x1BEF9B8", VA = "0x1BEF9B8")]
		public void SetLocalRotation(Quaternion value)
		{
		}

		[Token(Token = "0x60008BE")]
		[Address(RVA = "0x1BF0004", Offset = "0x1BF0004", VA = "0x1BF0004")]
		public void SetRotation(Quaternion value)
		{
		}

		[Token(Token = "0x60008BF")]
		[Address(RVA = "0x1BF0234", Offset = "0x1BF0234", VA = "0x1BF0234", Slot = "4")]
		public void OnBeforePush()
		{
		}

		[Token(Token = "0x60008C0")]
		[Address(RVA = "0x1BF0320", Offset = "0x1BF0320", VA = "0x1BF0320", Slot = "5")]
		public void OnAfterPop()
		{
		}

		[Token(Token = "0x60008C1")]
		[Address(RVA = "0x1BF0458", Offset = "0x1BF0458", VA = "0x1BF0458")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008C2")]
		[Address(RVA = "0x1BF0490", Offset = "0x1BF0490", VA = "0x1BF0490")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60008C3")]
		[Address(RVA = "0x1BF04C8", Offset = "0x1BF04C8", VA = "0x1BF04C8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60008C4")]
		[Address(RVA = "0x1BF0324", Offset = "0x1BF0324", VA = "0x1BF0324")]
		public void Reset()
		{
		}

		[Token(Token = "0x60008C9")]
		[Address(RVA = "0x1BF07F4", Offset = "0x1BF07F4", VA = "0x1BF07F4")]
		internal void SetExtrinsicPropertiesINTERNAL(ControlPointExtrinsicProperties value)
		{
		}

		[Token(Token = "0x60008CA")]
		[Address(RVA = "0x1BF0808", Offset = "0x1BF0808", VA = "0x1BF0808")]
		internal unsafe ref ControlPointExtrinsicProperties GetExtrinsicPropertiesINTERNAL()
		{
			return ref *(ControlPointExtrinsicProperties*)null;
		}

		[Token(Token = "0x60008CB")]
		[Address(RVA = "0x1BEE21C", Offset = "0x1BEE21C", VA = "0x1BEE21C")]
		private void CheckAgainstMetaDataDuplication()
		{
		}

		[Token(Token = "0x60008CC")]
		[Address(RVA = "0x1BEBDCC", Offset = "0x1BEBDCC", VA = "0x1BEBDCC")]
		private bool SetConnection(CurvyConnection newConnection)
		{
			return default(bool);
		}

		[Token(Token = "0x60008CD")]
		[Address(RVA = "0x1BEB60C", Offset = "0x1BEB60C", VA = "0x1BEB60C")]
		private bool SetAutoHandles(bool newValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60008CE")]
		[Address(RVA = "0x1BEF69C", Offset = "0x1BEF69C", VA = "0x1BEF69C")]
		private float getApproximationLocalF(int idx)
		{
			return default(float);
		}

		[Token(Token = "0x60008CF")]
		[Address(RVA = "0x1BF0810", Offset = "0x1BF0810", VA = "0x1BF0810")]
		internal void refreshCurveINTERNAL(CurvyInterpolation splineInterpolation, bool isControlPointASegment, CurvySpline spline)
		{
		}

		[Token(Token = "0x60008D0")]
		[Address(RVA = "0x1BF0F10", Offset = "0x1BF0F10", VA = "0x1BF0F10")]
		private float InterpolateBezierSegment(CurvySplineSegment nextControlPoint, int newCacheSize)
		{
			return default(float);
		}

		[Token(Token = "0x60008D1")]
		[Address(RVA = "0x1BF17A4", Offset = "0x1BF17A4", VA = "0x1BF17A4")]
		private float InterpolateTCBSegment(CurvySplineSegment nextControlPoint, int newCacheSize, float splineTension, float splineContinuity, float splineBias)
		{
			return default(float);
		}

		[Token(Token = "0x60008D2")]
		[Address(RVA = "0x1BF1378", Offset = "0x1BF1378", VA = "0x1BF1378")]
		private float InterpolateCatmullSegment(CurvySplineSegment nextControlPoint, int newCacheSize)
		{
			return default(float);
		}

		[Token(Token = "0x60008D3")]
		[Address(RVA = "0x1BF1D18", Offset = "0x1BF1D18", VA = "0x1BF1D18")]
		private float InterpolateLinearSegment(CurvySplineSegment nextControlPoint, int newCacheSize)
		{
			return default(float);
		}

		[Token(Token = "0x60008D4")]
		[Address(RVA = "0x1BF1FC4", Offset = "0x1BF1FC4", VA = "0x1BF1FC4")]
		internal void refreshOrientationNoneINTERNAL()
		{
		}

		[Token(Token = "0x60008D5")]
		[Address(RVA = "0x1BEAC2C", Offset = "0x1BEAC2C", VA = "0x1BEAC2C")]
		internal void refreshOrientationStaticINTERNAL()
		{
		}

		[Token(Token = "0x60008D6")]
		[Address(RVA = "0x1BF22D0", Offset = "0x1BF22D0", VA = "0x1BF22D0")]
		internal void refreshOrientationDynamicINTERNAL(Vector3 initialUp)
		{
		}

		[Token(Token = "0x60008D7")]
		[Address(RVA = "0x1BF2508", Offset = "0x1BF2508", VA = "0x1BF2508")]
		internal void ClearBoundsINTERNAL()
		{
		}

		[Token(Token = "0x60008D8")]
		[Address(RVA = "0x1BF2008", Offset = "0x1BF2008", VA = "0x1BF2008")]
		internal Vector3 getOrthoUp0INTERNAL()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008D9")]
		[Address(RVA = "0x1BF2138", Offset = "0x1BF2138", VA = "0x1BF2138")]
		private Vector3 getOrthoUp1INTERNAL()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008DA")]
		[Address(RVA = "0x1BF2528", Offset = "0x1BF2528", VA = "0x1BF2528")]
		internal void UnsetFollowUpWithoutDirtyingINTERNAL()
		{
		}

		[Token(Token = "0x60008DB")]
		[Address(RVA = "0x1BF255C", Offset = "0x1BF255C", VA = "0x1BF255C")]
		internal void PrepareThreadCompatibleDataINTERNAL(bool useFollowUp)
		{
		}

		[Token(Token = "0x60008DC")]
		[Address(RVA = "0x1BF27F8", Offset = "0x1BF27F8", VA = "0x1BF27F8")]
		public CurvySplineSegment()
		{
		}
	}
	[Token(Token = "0x2000100")]
	public static class CurvySplineSegmentDefaultValues
	{
		[Token(Token = "0x40005E3")]
		public const CurvyOrientationSwirl Swirl = CurvyOrientationSwirl.None;

		[Token(Token = "0x40005E4")]
		public const bool AutoHandles = true;

		[Token(Token = "0x40005E5")]
		public const float AutoHandleDistance = 0.39f;

		[Token(Token = "0x40005E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Vector3 HandleIn;

		[Token(Token = "0x40005E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static readonly Vector3 HandleOut;
	}
	[Token(Token = "0x2000101")]
	public static class CurvySplineDefaultValues
	{
		[Token(Token = "0x40005E8")]
		public const bool AutoEndTangents = true;

		[Token(Token = "0x40005E9")]
		public const CurvyOrientation Orientation = CurvyOrientation.Dynamic;

		[Token(Token = "0x40005EA")]
		public const float AutoHandleDistance = 0.39f;

		[Token(Token = "0x40005EB")]
		public const int CacheDensity = 50;

		[Token(Token = "0x40005EC")]
		public const float MaxPointsPerUnit = 8f;

		[Token(Token = "0x40005ED")]
		public const bool UsePooling = true;

		[Token(Token = "0x40005EE")]
		public const CurvyUpdateMethod UpdateIn = CurvyUpdateMethod.Update;

		[Token(Token = "0x40005EF")]
		public const bool CheckTransform = true;
	}
	[Token(Token = "0x2000102")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xFC6AA4", Offset = "0xFC6AA4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xFC6AA4", Offset = "0xFC6AA4")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC6AA4", Offset = "0xFC6AA4")]
	public class CurvyUISpline : CurvySpline
	{
		[Token(Token = "0x60008DF")]
		[Address(RVA = "0x1BF2E4C", Offset = "0x1BF2E4C", VA = "0x1BF2E4C")]
		public static CurvyUISpline CreateUISpline(string gameObjectName = "Curvy UI Spline")
		{
			return null;
		}

		[Token(Token = "0x60008E0")]
		[Address(RVA = "0x1BF2FCC", Offset = "0x1BF2FCC", VA = "0x1BF2FCC", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x60008E1")]
		[Address(RVA = "0x1BF2F88", Offset = "0x1BF2F88", VA = "0x1BF2F88")]
		private void SetupUISpline()
		{
		}

		[Token(Token = "0x60008E2")]
		[Address(RVA = "0x1BF2FF4", Offset = "0x1BF2FF4", VA = "0x1BF2FF4")]
		public CurvyUISpline()
		{
		}
	}
}
namespace FluffyUnderware.Curvy.ThirdParty.LibTessDotNet
{
	[Token(Token = "0x2000103")]
	internal class Dict<TValue> where TValue : class
	{
		[Token(Token = "0x200021E")]
		public class Node
		{
			[Token(Token = "0x4000B16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal TValue _key;

			[Token(Token = "0x4000B17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal Node _prev;

			[Token(Token = "0x4000B18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal Node _next;

			[Token(Token = "0x17000349")]
			public TValue Key
			{
				[Token(Token = "0x6000FD6")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700034A")]
			public Node Prev
			{
				[Token(Token = "0x6000FD7")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700034B")]
			public Node Next
			{
				[Token(Token = "0x6000FD8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000FD9")]
			public Node()
			{
			}
		}

		[Token(Token = "0x200021F")]
		public delegate bool LessOrEqual(TValue lhs, TValue rhs);

		[Token(Token = "0x40005F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private LessOrEqual _leq;

		[Token(Token = "0x40005F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Node _head;

		[Token(Token = "0x60008E3")]
		public Dict(LessOrEqual leq)
		{
		}

		[Token(Token = "0x60008E4")]
		public Node Insert(TValue key)
		{
			return null;
		}

		[Token(Token = "0x60008E5")]
		public Node InsertBefore(Node node, TValue key)
		{
			return null;
		}

		[Token(Token = "0x60008E6")]
		public Node Find(TValue key)
		{
			return null;
		}

		[Token(Token = "0x60008E7")]
		public Node Min()
		{
			return null;
		}

		[Token(Token = "0x60008E8")]
		public void Remove(Node node)
		{
		}
	}
	[Token(Token = "0x2000104")]
	internal static class Geom
	{
		[Token(Token = "0x60008E9")]
		[Address(RVA = "0x1DF8F90", Offset = "0x1DF8F90", VA = "0x1DF8F90")]
		public static bool IsWindingInside(WindingRule rule, int n)
		{
			return default(bool);
		}

		[Token(Token = "0x60008EA")]
		[Address(RVA = "0x1DF906C", Offset = "0x1DF906C", VA = "0x1DF906C")]
		public static bool VertCCW(MeshUtils.Vertex u, MeshUtils.Vertex v, MeshUtils.Vertex w)
		{
			return default(bool);
		}

		[Token(Token = "0x60008EB")]
		[Address(RVA = "0x1DF90C0", Offset = "0x1DF90C0", VA = "0x1DF90C0")]
		public static bool VertEq(MeshUtils.Vertex lhs, MeshUtils.Vertex rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x60008EC")]
		[Address(RVA = "0x1DF9104", Offset = "0x1DF9104", VA = "0x1DF9104")]
		public static bool VertLeq(MeshUtils.Vertex lhs, MeshUtils.Vertex rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x60008ED")]
		[Address(RVA = "0x1DF9154", Offset = "0x1DF9154", VA = "0x1DF9154")]
		public static float EdgeEval(MeshUtils.Vertex u, MeshUtils.Vertex v, MeshUtils.Vertex w)
		{
			return default(float);
		}

		[Token(Token = "0x60008EE")]
		[Address(RVA = "0x1DF91C8", Offset = "0x1DF91C8", VA = "0x1DF91C8")]
		public static float EdgeSign(MeshUtils.Vertex u, MeshUtils.Vertex v, MeshUtils.Vertex w)
		{
			return default(float);
		}

		[Token(Token = "0x60008EF")]
		[Address(RVA = "0x1DF922C", Offset = "0x1DF922C", VA = "0x1DF922C")]
		public static bool TransLeq(MeshUtils.Vertex lhs, MeshUtils.Vertex rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x60008F0")]
		[Address(RVA = "0x1DF927C", Offset = "0x1DF927C", VA = "0x1DF927C")]
		public static float TransEval(MeshUtils.Vertex u, MeshUtils.Vertex v, MeshUtils.Vertex w)
		{
			return default(float);
		}

		[Token(Token = "0x60008F1")]
		[Address(RVA = "0x1DF92F0", Offset = "0x1DF92F0", VA = "0x1DF92F0")]
		public static float TransSign(MeshUtils.Vertex u, MeshUtils.Vertex v, MeshUtils.Vertex w)
		{
			return default(float);
		}

		[Token(Token = "0x60008F2")]
		[Address(RVA = "0x1DF9354", Offset = "0x1DF9354", VA = "0x1DF9354")]
		public static bool EdgeGoesLeft(MeshUtils.Edge e)
		{
			return default(bool);
		}

		[Token(Token = "0x60008F3")]
		[Address(RVA = "0x1DF939C", Offset = "0x1DF939C", VA = "0x1DF939C")]
		public static bool EdgeGoesRight(MeshUtils.Edge e)
		{
			return default(bool);
		}

		[Token(Token = "0x60008F4")]
		[Address(RVA = "0x1DF93C4", Offset = "0x1DF93C4", VA = "0x1DF93C4")]
		public static float VertL1dist(MeshUtils.Vertex u, MeshUtils.Vertex v)
		{
			return default(float);
		}

		[Token(Token = "0x60008F5")]
		[Address(RVA = "0x1DF9460", Offset = "0x1DF9460", VA = "0x1DF9460")]
		public static void AddWinding(MeshUtils.Edge eDst, MeshUtils.Edge eSrc)
		{
		}

		[Token(Token = "0x60008F6")]
		[Address(RVA = "0x1DF94AC", Offset = "0x1DF94AC", VA = "0x1DF94AC")]
		public static float Interpolate(float a, float x, float b, float y)
		{
			return default(float);
		}

		[Token(Token = "0x60008F7")]
		[Address(RVA = "0x1DF9508", Offset = "0x1DF9508", VA = "0x1DF9508")]
		private static void Swap(ref MeshUtils.Vertex a, ref MeshUtils.Vertex b)
		{
		}

		[Token(Token = "0x60008F8")]
		[Address(RVA = "0x1DF9540", Offset = "0x1DF9540", VA = "0x1DF9540")]
		public static void EdgeIntersect(MeshUtils.Vertex o1, MeshUtils.Vertex d1, MeshUtils.Vertex o2, MeshUtils.Vertex d2, MeshUtils.Vertex v)
		{
		}
	}
	[Token(Token = "0x2000105")]
	internal class LTMesh : MeshUtils.Pooled<LTMesh>
	{
		[Token(Token = "0x40005F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal MeshUtils.Vertex _vHead;

		[Token(Token = "0x40005F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal MeshUtils.Face _fHead;

		[Token(Token = "0x40005F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal MeshUtils.Edge _eHead;

		[Token(Token = "0x40005F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal MeshUtils.Edge _eHeadSym;

		[Token(Token = "0x60008F9")]
		[Address(RVA = "0x1DF99D8", Offset = "0x1DF99D8", VA = "0x1DF99D8")]
		public LTMesh()
		{
		}

		[Token(Token = "0x60008FA")]
		[Address(RVA = "0x1DF9CE8", Offset = "0x1DF9CE8", VA = "0x1DF9CE8", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60008FB")]
		[Address(RVA = "0x1DF9D3C", Offset = "0x1DF9D3C", VA = "0x1DF9D3C", Slot = "5")]
		public override void OnFree()
		{
		}

		[Token(Token = "0x60008FC")]
		[Address(RVA = "0x1DF9E3C", Offset = "0x1DF9E3C", VA = "0x1DF9E3C")]
		public MeshUtils.Edge MakeEdge()
		{
			return null;
		}

		[Token(Token = "0x60008FD")]
		[Address(RVA = "0x1DFA210", Offset = "0x1DFA210", VA = "0x1DFA210")]
		public void Splice(MeshUtils.Edge eOrg, MeshUtils.Edge eDst)
		{
		}

		[Token(Token = "0x60008FE")]
		[Address(RVA = "0x1DFA4F4", Offset = "0x1DFA4F4", VA = "0x1DFA4F4")]
		public void Delete(MeshUtils.Edge eDel)
		{
		}

		[Token(Token = "0x60008FF")]
		[Address(RVA = "0x1DFA714", Offset = "0x1DFA714", VA = "0x1DFA714")]
		public MeshUtils.Edge AddEdgeVertex(MeshUtils.Edge eOrg)
		{
			return null;
		}

		[Token(Token = "0x6000900")]
		[Address(RVA = "0x1DFA7B0", Offset = "0x1DFA7B0", VA = "0x1DFA7B0")]
		public MeshUtils.Edge SplitEdge(MeshUtils.Edge eOrg)
		{
			return null;
		}

		[Token(Token = "0x6000901")]
		[Address(RVA = "0x1DFA8B0", Offset = "0x1DFA8B0", VA = "0x1DFA8B0")]
		public MeshUtils.Edge Connect(MeshUtils.Edge eOrg, MeshUtils.Edge eDst)
		{
			return null;
		}

		[Token(Token = "0x6000902")]
		[Address(RVA = "0x1DFA9B4", Offset = "0x1DFA9B4", VA = "0x1DFA9B4")]
		public void ZapFace(MeshUtils.Face fZap)
		{
		}

		[Token(Token = "0x6000903")]
		[Address(RVA = "0x1DFAB18", Offset = "0x1DFAB18", VA = "0x1DFAB18")]
		public void MergeConvexFaces(int maxVertsPerFace)
		{
		}

		[Token(Token = "0x6000904")]
		[Address(RVA = "0x1DFACE8", Offset = "0x1DFACE8", VA = "0x1DFACE8")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0xFD6C94", Offset = "0xFD6C94")]
		public void Check()
		{
		}
	}
	[Token(Token = "0x2000106")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xFC6B54", Offset = "0xFC6B54")]
	public struct Vec3
	{
		[Token(Token = "0x40005F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Vec3 Zero;

		[Token(Token = "0x40005F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float X;

		[Token(Token = "0x40005F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float Y;

		[Token(Token = "0x40005F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float Z;

		[Token(Token = "0x1700018D")]
		public float Item
		{
			[Token(Token = "0x6000905")]
			[Address(RVA = "0x10393F4", Offset = "0x10393F4", VA = "0x10393F4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000906")]
			[Address(RVA = "0x10393FC", Offset = "0x10393FC", VA = "0x10393FC")]
			set
			{
			}
		}

		[Token(Token = "0x6000907")]
		[Address(RVA = "0x1F013C8", Offset = "0x1F013C8", VA = "0x1F013C8")]
		public static void Sub(ref Vec3 lhs, ref Vec3 rhs, out Vec3 result)
		{
		}

		[Token(Token = "0x6000908")]
		[Address(RVA = "0x1F013FC", Offset = "0x1F013FC", VA = "0x1F013FC")]
		public static void Neg(ref Vec3 v)
		{
		}

		[Token(Token = "0x6000909")]
		[Address(RVA = "0x1F01418", Offset = "0x1F01418", VA = "0x1F01418")]
		public static void Dot(ref Vec3 u, ref Vec3 v, out float dot)
		{
		}

		[Token(Token = "0x600090A")]
		[Address(RVA = "0x1F01444", Offset = "0x1F01444", VA = "0x1F01444")]
		public static void Normalize(ref Vec3 v)
		{
		}

		[Token(Token = "0x600090B")]
		[Address(RVA = "0x1F014FC", Offset = "0x1F014FC", VA = "0x1F014FC")]
		public static int LongAxis(ref Vec3 v)
		{
			return default(int);
		}

		[Token(Token = "0x600090C")]
		[Address(RVA = "0x1039404", Offset = "0x1039404", VA = "0x1039404", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000107")]
	internal static class MeshUtils
	{
		[Token(Token = "0x2000220")]
		public abstract class Pooled<T> where T : Pooled<T>, new()
		{
			[Token(Token = "0x4000B19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static Stack<T> _stack;

			[Token(Token = "0x6000FDE")]
			public abstract void Reset();

			[Token(Token = "0x6000FDF")]
			public virtual void OnFree()
			{
			}

			[Token(Token = "0x6000FE0")]
			public static T Create()
			{
				return null;
			}

			[Token(Token = "0x6000FE1")]
			public void Free()
			{
			}

			[Token(Token = "0x6000FE2")]
			protected Pooled()
			{
			}
		}

		[Token(Token = "0x2000221")]
		public class Vertex : Pooled<Vertex>
		{
			[Token(Token = "0x4000B1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal Vertex _prev;

			[Token(Token = "0x4000B1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal Vertex _next;

			[Token(Token = "0x4000B1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal Edge _anEdge;

			[Token(Token = "0x4000B1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal Vec3 _coords;

			[Token(Token = "0x4000B1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			internal float _s;

			[Token(Token = "0x4000B1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal float _t;

			[Token(Token = "0x4000B20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			internal PQHandle _pqHandle;

			[Token(Token = "0x4000B21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal int _n;

			[Token(Token = "0x4000B22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal object _data;

			[Token(Token = "0x6000FE3")]
			[Address(RVA = "0x1DFB18C", Offset = "0x1DFB18C", VA = "0x1DFB18C", Slot = "4")]
			public override void Reset()
			{
			}

			[Token(Token = "0x6000FE4")]
			[Address(RVA = "0x1DFB248", Offset = "0x1DFB248", VA = "0x1DFB248")]
			public Vertex()
			{
			}
		}

		[Token(Token = "0x2000222")]
		public class Face : Pooled<Face>
		{
			[Token(Token = "0x4000B23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal Face _prev;

			[Token(Token = "0x4000B24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal Face _next;

			[Token(Token = "0x4000B25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal Edge _anEdge;

			[Token(Token = "0x4000B26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal Face _trail;

			[Token(Token = "0x4000B27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal int _n;

			[Token(Token = "0x4000B28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			internal bool _marked;

			[Token(Token = "0x4000B29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
			internal bool _inside;

			[Token(Token = "0x1700034C")]
			internal int VertsCount
			{
				[Token(Token = "0x6000FE5")]
				[Address(RVA = "0x1DFAC98", Offset = "0x1DFAC98", VA = "0x1DFAC98")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x6000FE6")]
			[Address(RVA = "0x1DFB0DC", Offset = "0x1DFB0DC", VA = "0x1DFB0DC", Slot = "4")]
			public override void Reset()
			{
			}

			[Token(Token = "0x6000FE7")]
			[Address(RVA = "0x1DFB13C", Offset = "0x1DFB13C", VA = "0x1DFB13C")]
			public Face()
			{
			}
		}

		[Token(Token = "0x2000223")]
		public struct EdgePair
		{
			[Token(Token = "0x4000B2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal Edge _e;

			[Token(Token = "0x4000B2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal Edge _eSym;

			[Token(Token = "0x6000FE8")]
			[Address(RVA = "0x1DF9C1C", Offset = "0x1DF9C1C", VA = "0x1DF9C1C")]
			public static EdgePair Create()
			{
				return default(EdgePair);
			}

			[Token(Token = "0x6000FE9")]
			[Address(RVA = "0x10363B0", Offset = "0x10363B0", VA = "0x10363B0")]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x2000224")]
		public class Edge : Pooled<Edge>
		{
			[Token(Token = "0x4000B2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal EdgePair _pair;

			[Token(Token = "0x4000B2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal Edge _next;

			[Token(Token = "0x4000B2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal Edge _Sym;

			[Token(Token = "0x4000B2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal Edge _Onext;

			[Token(Token = "0x4000B30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal Edge _Lnext;

			[Token(Token = "0x4000B31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal Vertex _Org;

			[Token(Token = "0x4000B32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal Face _Lface;

			[Token(Token = "0x4000B33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			internal Tess.ActiveRegion _activeRegion;

			[Token(Token = "0x4000B34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			internal int _winding;

			[Token(Token = "0x1700034D")]
			internal Face _Rface
			{
				[Token(Token = "0x6000FEA")]
				[Address(RVA = "0x1DFA628", Offset = "0x1DFA628", VA = "0x1DFA628")]
				get
				{
					return null;
				}
				[Token(Token = "0x6000FEB")]
				[Address(RVA = "0x1DFA894", Offset = "0x1DFA894", VA = "0x1DFA894")]
				set
				{
				}
			}

			[Token(Token = "0x1700034E")]
			internal Vertex _Dst
			{
				[Token(Token = "0x6000FEC")]
				[Address(RVA = "0x1DF9380", Offset = "0x1DF9380", VA = "0x1DF9380")]
				get
				{
					return null;
				}
				[Token(Token = "0x6000FED")]
				[Address(RVA = "0x1DFA878", Offset = "0x1DFA878", VA = "0x1DFA878")]
				set
				{
				}
			}

			[Token(Token = "0x1700034F")]
			internal Edge _Oprev
			{
				[Token(Token = "0x6000FEE")]
				[Address(RVA = "0x1DFA644", Offset = "0x1DFA644", VA = "0x1DFA644")]
				get
				{
					return null;
				}
				[Token(Token = "0x6000FEF")]
				[Address(RVA = "0x1DFAE64", Offset = "0x1DFAE64", VA = "0x1DFAE64")]
				set
				{
				}
			}

			[Token(Token = "0x17000350")]
			internal Edge _Lprev
			{
				[Token(Token = "0x6000FF0")]
				[Address(RVA = "0x1DFACCC", Offset = "0x1DFACCC", VA = "0x1DFACCC")]
				get
				{
					return null;
				}
				[Token(Token = "0x6000FF1")]
				[Address(RVA = "0x1DFAE80", Offset = "0x1DFAE80", VA = "0x1DFAE80")]
				set
				{
				}
			}

			[Token(Token = "0x17000351")]
			internal Edge _Dprev
			{
				[Token(Token = "0x6000FF2")]
				[Address(RVA = "0x1DFAE9C", Offset = "0x1DFAE9C", VA = "0x1DFAE9C")]
				get
				{
					return null;
				}
				[Token(Token = "0x6000FF3")]
				[Address(RVA = "0x1DFAEB8", Offset = "0x1DFAEB8", VA = "0x1DFAEB8")]
				set
				{
				}
			}

			[Token(Token = "0x17000352")]
			internal Edge _Rprev
			{
				[Token(Token = "0x6000FF4")]
				[Address(RVA = "0x1DFAED4", Offset = "0x1DFAED4", VA = "0x1DFAED4")]
				get
				{
					return null;
				}
				[Token(Token = "0x6000FF5")]
				[Address(RVA = "0x1DFAEF0", Offset = "0x1DFAEF0", VA = "0x1DFAEF0")]
				set
				{
				}
			}

			[Token(Token = "0x17000353")]
			internal Edge _Dnext
			{
				[Token(Token = "0x6000FF6")]
				[Address(RVA = "0x1DFAF0C", Offset = "0x1DFAF0C", VA = "0x1DFAF0C")]
				get
				{
					return null;
				}
				[Token(Token = "0x6000FF7")]
				[Address(RVA = "0x1DFAF34", Offset = "0x1DFAF34", VA = "0x1DFAF34")]
				set
				{
				}
			}

			[Token(Token = "0x17000354")]
			internal Edge _Rnext
			{
				[Token(Token = "0x6000FF8")]
				[Address(RVA = "0x1DFAF5C", Offset = "0x1DFAF5C", VA = "0x1DFAF5C")]
				get
				{
					return null;
				}
				[Token(Token = "0x6000FF9")]
				[Address(RVA = "0x1DFAF84", Offset = "0x1DFAF84", VA = "0x1DFAF84")]
				set
				{
				}
			}

			[Token(Token = "0x6000FFA")]
			[Address(RVA = "0x1DFADD0", Offset = "0x1DFADD0", VA = "0x1DFADD0")]
			internal static void EnsureFirst(ref Edge e)
			{
			}

			[Token(Token = "0x6000FFB")]
			[Address(RVA = "0x1DFAFAC", Offset = "0x1DFAFAC", VA = "0x1DFAFAC", Slot = "4")]
			public override void Reset()
			{
			}

			[Token(Token = "0x6000FFC")]
			[Address(RVA = "0x1DFB08C", Offset = "0x1DFB08C", VA = "0x1DFB08C")]
			public Edge()
			{
			}
		}

		[Token(Token = "0x40005FA")]
		public const int Undef = -1;

		[Token(Token = "0x600090E")]
		[Address(RVA = "0x1DF9E90", Offset = "0x1DF9E90", VA = "0x1DF9E90")]
		public static Edge MakeEdge(Edge eNext)
		{
			return null;
		}

		[Token(Token = "0x600090F")]
		[Address(RVA = "0x1DFA464", Offset = "0x1DFA464", VA = "0x1DFA464")]
		public static void Splice(Edge a, Edge b)
		{
		}

		[Token(Token = "0x6000910")]
		[Address(RVA = "0x1DFA008", Offset = "0x1DFA008", VA = "0x1DFA008")]
		public static void MakeVertex(Edge eOrig, Vertex vNext)
		{
		}

		[Token(Token = "0x6000911")]
		[Address(RVA = "0x1DFA0FC", Offset = "0x1DFA0FC", VA = "0x1DFA0FC")]
		public static void MakeFace(Edge eOrig, Face fNext)
		{
		}

		[Token(Token = "0x6000912")]
		[Address(RVA = "0x1DFA660", Offset = "0x1DFA660", VA = "0x1DFA660")]
		public static void KillEdge(Edge eDel)
		{
		}

		[Token(Token = "0x6000913")]
		[Address(RVA = "0x1DFA2EC", Offset = "0x1DFA2EC", VA = "0x1DFA2EC")]
		public static void KillVertex(Vertex vDel, Vertex newOrg)
		{
		}

		[Token(Token = "0x6000914")]
		[Address(RVA = "0x1DFA3A8", Offset = "0x1DFA3A8", VA = "0x1DFA3A8")]
		public static void KillFace(Face fDel, Face newLFace)
		{
		}

		[Token(Token = "0x6000915")]
		[Address(RVA = "0x1DFAE00", Offset = "0x1DFAE00", VA = "0x1DFAE00")]
		public static float FaceArea(Face f)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000108")]
	internal struct PQHandle
	{
		[Token(Token = "0x40005FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly int Invalid;

		[Token(Token = "0x40005FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal int _handle;
	}
	[Token(Token = "0x2000109")]
	internal class PriorityHeap<TValue> where TValue : class
	{
		[Token(Token = "0x2000225")]
		public delegate bool LessOrEqual(TValue lhs, TValue rhs);

		[Token(Token = "0x2000226")]
		protected class HandleElem
		{
			[Token(Token = "0x4000B35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal TValue _key;

			[Token(Token = "0x4000B36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal int _node;

			[Token(Token = "0x6001001")]
			public HandleElem()
			{
			}
		}

		[Token(Token = "0x40005FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private LessOrEqual _leq;

		[Token(Token = "0x40005FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int[] _nodes;

		[Token(Token = "0x40005FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private HandleElem[] _handles;

		[Token(Token = "0x4000600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _size;

		[Token(Token = "0x4000601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _max;

		[Token(Token = "0x4000602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _freeList;

		[Token(Token = "0x4000603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool _initialized;

		[Token(Token = "0x1700018E")]
		public bool Empty
		{
			[Token(Token = "0x6000917")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000918")]
		public PriorityHeap(int initialSize, LessOrEqual leq)
		{
		}

		[Token(Token = "0x6000919")]
		private void FloatDown(int curr)
		{
		}

		[Token(Token = "0x600091A")]
		private void FloatUp(int curr)
		{
		}

		[Token(Token = "0x600091B")]
		public void Init()
		{
		}

		[Token(Token = "0x600091C")]
		public PQHandle Insert(TValue value)
		{
			return default(PQHandle);
		}

		[Token(Token = "0x600091D")]
		public TValue ExtractMin()
		{
			return null;
		}

		[Token(Token = "0x600091E")]
		public TValue Minimum()
		{
			return null;
		}

		[Token(Token = "0x600091F")]
		public void Remove(PQHandle handle)
		{
		}
	}
	[Token(Token = "0x200010A")]
	internal class PriorityQueue<TValue> where TValue : class
	{
		[Token(Token = "0x2000227")]
		private class StackItem
		{
			[Token(Token = "0x4000B37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal int p;

			[Token(Token = "0x4000B38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal int r;

			[Token(Token = "0x6001002")]
			public StackItem()
			{
			}
		}

		[Token(Token = "0x4000604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private PriorityHeap<TValue>.LessOrEqual _leq;

		[Token(Token = "0x4000605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private PriorityHeap<TValue> _heap;

		[Token(Token = "0x4000606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private TValue[] _keys;

		[Token(Token = "0x4000607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int[] _order;

		[Token(Token = "0x4000608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _size;

		[Token(Token = "0x4000609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _max;

		[Token(Token = "0x400060A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool _initialized;

		[Token(Token = "0x1700018F")]
		public bool Empty
		{
			[Token(Token = "0x6000920")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000921")]
		public PriorityQueue(int initialSize, PriorityHeap<TValue>.LessOrEqual leq)
		{
		}

		[Token(Token = "0x6000922")]
		private static void Swap(ref int a, ref int b)
		{
		}

		[Token(Token = "0x6000923")]
		public void Init()
		{
		}

		[Token(Token = "0x6000924")]
		public PQHandle Insert(TValue value)
		{
			return default(PQHandle);
		}

		[Token(Token = "0x6000925")]
		public TValue ExtractMin()
		{
			return null;
		}

		[Token(Token = "0x6000926")]
		public TValue Minimum()
		{
			return null;
		}

		[Token(Token = "0x6000927")]
		public void Remove(PQHandle handle)
		{
		}
	}
	[Token(Token = "0x200010B")]
	public class Tess
	{
		[Token(Token = "0x2000228")]
		internal class ActiveRegion
		{
			[Token(Token = "0x4000B39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal MeshUtils.Edge _eUp;

			[Token(Token = "0x4000B3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal Dict<ActiveRegion>.Node _nodeUp;

			[Token(Token = "0x4000B3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal int _windingNumber;

			[Token(Token = "0x4000B3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal bool _inside;

			[Token(Token = "0x4000B3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
			internal bool _sentinel;

			[Token(Token = "0x4000B3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
			internal bool _dirty;

			[Token(Token = "0x4000B3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
			internal bool _fixUpperEdge;

			[Token(Token = "0x6001003")]
			[Address(RVA = "0x1F00E68", Offset = "0x1F00E68", VA = "0x1F00E68")]
			public ActiveRegion()
			{
			}
		}

		[Token(Token = "0x400060B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private LTMesh _mesh;

		[Token(Token = "0x400060C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vec3 _normal;

		[Token(Token = "0x400060D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vec3 _sUnit;

		[Token(Token = "0x400060E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vec3 _tUnit;

		[Token(Token = "0x400060F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float _bminX;

		[Token(Token = "0x4000610")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float _bminY;

		[Token(Token = "0x4000611")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float _bmaxX;

		[Token(Token = "0x4000612")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float _bmaxY;

		[Token(Token = "0x4000613")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private WindingRule _windingRule;

		[Token(Token = "0x4000614")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Dict<ActiveRegion> _dict;

		[Token(Token = "0x4000615")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private PriorityQueue<MeshUtils.Vertex> _pq;

		[Token(Token = "0x4000616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private MeshUtils.Vertex _event;

		[Token(Token = "0x4000617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private CombineCallback _combineCallback;

		[Token(Token = "0x4000618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private ContourVertex[] _vertices;

		[Token(Token = "0x4000619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int _vertexCount;

		[Token(Token = "0x400061A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int[] _elements;

		[Token(Token = "0x400061B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int _elementCount;

		[Token(Token = "0x400061C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float SUnitX;

		[Token(Token = "0x400061D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float SUnitY;

		[Token(Token = "0x400061E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float SentinelCoord;

		[Token(Token = "0x400061F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool NoEmptyPolygons;

		[Token(Token = "0x4000620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		public bool UsePooling;

		[Token(Token = "0x17000190")]
		public Vec3 Normal
		{
			[Token(Token = "0x6000947")]
			[Address(RVA = "0x1DFD770", Offset = "0x1DFD770", VA = "0x1DFD770")]
			get
			{
				return default(Vec3);
			}
			[Token(Token = "0x6000948")]
			[Address(RVA = "0x1DFD77C", Offset = "0x1DFD77C", VA = "0x1DFD77C")]
			set
			{
			}
		}

		[Token(Token = "0x17000191")]
		public ContourVertex[] Vertices
		{
			[Token(Token = "0x6000949")]
			[Address(RVA = "0x1DFD788", Offset = "0x1DFD788", VA = "0x1DFD788")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000192")]
		public int VertexCount
		{
			[Token(Token = "0x600094A")]
			[Address(RVA = "0x1DFD790", Offset = "0x1DFD790", VA = "0x1DFD790")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000193")]
		public int[] Elements
		{
			[Token(Token = "0x600094B")]
			[Address(RVA = "0x1DFD798", Offset = "0x1DFD798", VA = "0x1DFD798")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000194")]
		public int ElementCount
		{
			[Token(Token = "0x600094C")]
			[Address(RVA = "0x1DFD7A0", Offset = "0x1DFD7A0", VA = "0x1DFD7A0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000928")]
		[Address(RVA = "0x1DFB2EC", Offset = "0x1DFB2EC", VA = "0x1DFB2EC")]
		private ActiveRegion RegionBelow(ActiveRegion reg)
		{
			return null;
		}

		[Token(Token = "0x6000929")]
		[Address(RVA = "0x1DFB318", Offset = "0x1DFB318", VA = "0x1DFB318")]
		private ActiveRegion RegionAbove(ActiveRegion reg)
		{
			return null;
		}

		[Token(Token = "0x600092A")]
		[Address(RVA = "0x1DFB344", Offset = "0x1DFB344", VA = "0x1DFB344")]
		private bool EdgeLeq(ActiveRegion reg1, ActiveRegion reg2)
		{
			return default(bool);
		}

		[Token(Token = "0x600092B")]
		[Address(RVA = "0x1DFB458", Offset = "0x1DFB458", VA = "0x1DFB458")]
		private void DeleteRegion(ActiveRegion reg)
		{
		}

		[Token(Token = "0x600092C")]
		[Address(RVA = "0x1DFB4D8", Offset = "0x1DFB4D8", VA = "0x1DFB4D8")]
		private void FixUpperEdge(ActiveRegion reg, MeshUtils.Edge newEdge)
		{
		}

		[Token(Token = "0x600092D")]
		[Address(RVA = "0x1DFB540", Offset = "0x1DFB540", VA = "0x1DFB540")]
		private ActiveRegion TopLeftRegion(ActiveRegion reg)
		{
			return null;
		}

		[Token(Token = "0x600092E")]
		[Address(RVA = "0x1DFB600", Offset = "0x1DFB600", VA = "0x1DFB600")]
		private ActiveRegion TopRightRegion(ActiveRegion reg)
		{
			return null;
		}

		[Token(Token = "0x600092F")]
		[Address(RVA = "0x1DFB660", Offset = "0x1DFB660", VA = "0x1DFB660")]
		private ActiveRegion AddRegionBelow(ActiveRegion regAbove, MeshUtils.Edge eNewUp)
		{
			return null;
		}

		[Token(Token = "0x6000930")]
		[Address(RVA = "0x1DFB738", Offset = "0x1DFB738", VA = "0x1DFB738")]
		private void ComputeWinding(ActiveRegion reg)
		{
		}

		[Token(Token = "0x6000931")]
		[Address(RVA = "0x1DFB790", Offset = "0x1DFB790", VA = "0x1DFB790")]
		private void FinishRegion(ActiveRegion reg)
		{
		}

		[Token(Token = "0x6000932")]
		[Address(RVA = "0x1DFB7E0", Offset = "0x1DFB7E0", VA = "0x1DFB7E0")]
		private MeshUtils.Edge FinishLeftRegions(ActiveRegion regFirst, ActiveRegion regLast)
		{
			return null;
		}

		[Token(Token = "0x6000933")]
		[Address(RVA = "0x1DFB914", Offset = "0x1DFB914", VA = "0x1DFB914")]
		private void AddRightEdges(ActiveRegion regUp, MeshUtils.Edge eFirst, MeshUtils.Edge eLast, MeshUtils.Edge eTopLeft, bool cleanUp)
		{
		}

		[Token(Token = "0x6000934")]
		[Address(RVA = "0x1DFBEA0", Offset = "0x1DFBEA0", VA = "0x1DFBEA0")]
		private void SpliceMergeVertices(MeshUtils.Edge e1, MeshUtils.Edge e2)
		{
		}

		[Token(Token = "0x6000935")]
		[Address(RVA = "0x1DFBEB8", Offset = "0x1DFBEB8", VA = "0x1DFBEB8")]
		private void VertexWeights(MeshUtils.Vertex isect, MeshUtils.Vertex org, MeshUtils.Vertex dst, out float w0, out float w1)
		{
		}

		[Token(Token = "0x6000936")]
		[Address(RVA = "0x1DFBFB4", Offset = "0x1DFBFB4", VA = "0x1DFBFB4")]
		private void GetIntersectData(MeshUtils.Vertex isect, MeshUtils.Vertex orgUp, MeshUtils.Vertex dstUp, MeshUtils.Vertex orgLo, MeshUtils.Vertex dstLo)
		{
		}

		[Token(Token = "0x6000937")]
		[Address(RVA = "0x1DFBAD4", Offset = "0x1DFBAD4", VA = "0x1DFBAD4")]
		private bool CheckForRightSplice(ActiveRegion regUp)
		{
			return default(bool);
		}

		[Token(Token = "0x6000938")]
		[Address(RVA = "0x1DFC268", Offset = "0x1DFC268", VA = "0x1DFC268")]
		private bool CheckForLeftSplice(ActiveRegion regUp)
		{
			return default(bool);
		}

		[Token(Token = "0x6000939")]
		[Address(RVA = "0x1DFC3D8", Offset = "0x1DFC3D8", VA = "0x1DFC3D8")]
		private bool CheckForIntersect(ActiveRegion regUp)
		{
			return default(bool);
		}

		[Token(Token = "0x600093A")]
		[Address(RVA = "0x1DFBC70", Offset = "0x1DFBC70", VA = "0x1DFBC70")]
		private void WalkDirtyRegions(ActiveRegion regUp)
		{
		}

		[Token(Token = "0x600093B")]
		[Address(RVA = "0x1DFC9FC", Offset = "0x1DFC9FC", VA = "0x1DFC9FC")]
		private void ConnectRightVertex(ActiveRegion regUp, MeshUtils.Edge eBottomLeft)
		{
		}

		[Token(Token = "0x600093C")]
		[Address(RVA = "0x1DFCBFC", Offset = "0x1DFCBFC", VA = "0x1DFCBFC")]
		private void ConnectLeftDegenerate(ActiveRegion regUp, MeshUtils.Vertex vEvent)
		{
		}

		[Token(Token = "0x600093D")]
		[Address(RVA = "0x1DFCDEC", Offset = "0x1DFCDEC", VA = "0x1DFCDEC")]
		private void ConnectLeftVertex(MeshUtils.Vertex vEvent)
		{
		}

		[Token(Token = "0x600093E")]
		[Address(RVA = "0x1DFCD0C", Offset = "0x1DFCD0C", VA = "0x1DFCD0C")]
		private void SweepEvent(MeshUtils.Vertex vEvent)
		{
		}

		[Token(Token = "0x600093F")]
		[Address(RVA = "0x1DFD014", Offset = "0x1DFD014", VA = "0x1DFD014")]
		private void AddSentinel(float smin, float smax, float t)
		{
		}

		[Token(Token = "0x6000940")]
		[Address(RVA = "0x1DFD14C", Offset = "0x1DFD14C", VA = "0x1DFD14C")]
		private void InitEdgeDict()
		{
		}

		[Token(Token = "0x6000941")]
		[Address(RVA = "0x1DFD224", Offset = "0x1DFD224", VA = "0x1DFD224")]
		private void DoneEdgeDict()
		{
		}

		[Token(Token = "0x6000942")]
		[Address(RVA = "0x1DFD2B0", Offset = "0x1DFD2B0", VA = "0x1DFD2B0")]
		private void RemoveDegenerateEdges()
		{
		}

		[Token(Token = "0x6000943")]
		[Address(RVA = "0x1DFD3F4", Offset = "0x1DFD3F4", VA = "0x1DFD3F4")]
		private void InitPriorityQ()
		{
		}

		[Token(Token = "0x6000944")]
		[Address(RVA = "0x1DFD5B0", Offset = "0x1DFD5B0", VA = "0x1DFD5B0")]
		private void DonePriorityQ()
		{
		}

		[Token(Token = "0x6000945")]
		[Address(RVA = "0x1DFD5BC", Offset = "0x1DFD5BC", VA = "0x1DFD5BC")]
		private void RemoveDegenerateFaces()
		{
		}

		[Token(Token = "0x6000946")]
		[Address(RVA = "0x1DFD654", Offset = "0x1DFD654", VA = "0x1DFD654")]
		protected void ComputeInterior()
		{
		}

		[Token(Token = "0x600094D")]
		[Address(RVA = "0x1DFD7A8", Offset = "0x1DFD7A8", VA = "0x1DFD7A8")]
		public Tess()
		{
		}

		[Token(Token = "0x600094E")]
		[Address(RVA = "0x1DFD884", Offset = "0x1DFD884", VA = "0x1DFD884")]
		private void ComputeNormal(ref Vec3 norm)
		{
		}

		[Token(Token = "0x600094F")]
		[Address(RVA = "0x1DFDF88", Offset = "0x1DFDF88", VA = "0x1DFDF88")]
		private void CheckOrientation()
		{
		}

		[Token(Token = "0x6000950")]
		[Address(RVA = "0x1DFE0A0", Offset = "0x1DFE0A0", VA = "0x1DFE0A0")]
		private void ProjectPolygon()
		{
		}

		[Token(Token = "0x6000951")]
		[Address(RVA = "0x1DFE3A4", Offset = "0x1DFE3A4", VA = "0x1DFE3A4")]
		private void TessellateMonoRegion(MeshUtils.Face face)
		{
		}

		[Token(Token = "0x6000952")]
		[Address(RVA = "0x1DFE594", Offset = "0x1DFE594", VA = "0x1DFE594")]
		private void TessellateInterior()
		{
		}

		[Token(Token = "0x6000953")]
		[Address(RVA = "0x1DFE600", Offset = "0x1DFE600", VA = "0x1DFE600")]
		private void DiscardExterior()
		{
		}

		[Token(Token = "0x6000954")]
		[Address(RVA = "0x1DFE668", Offset = "0x1DFE668", VA = "0x1DFE668")]
		private void SetWindingNumber(int value, bool keepOnlyBoundary)
		{
		}

		[Token(Token = "0x6000955")]
		[Address(RVA = "0x1DFE738", Offset = "0x1DFE738", VA = "0x1DFE738")]
		private int GetNeighbourFace(MeshUtils.Edge edge)
		{
			return default(int);
		}

		[Token(Token = "0x6000956")]
		[Address(RVA = "0x1DFE774", Offset = "0x1DFE774", VA = "0x1DFE774")]
		private void OutputPolymesh(ElementType elementType, int polySize)
		{
		}

		[Token(Token = "0x6000957")]
		[Address(RVA = "0x1DFEBDC", Offset = "0x1DFEBDC", VA = "0x1DFEBDC")]
		private void OutputContours()
		{
		}

		[Token(Token = "0x6000958")]
		[Address(RVA = "0x1DFEE48", Offset = "0x1DFEE48", VA = "0x1DFEE48")]
		private float SignedArea(ContourVertex[] vertices)
		{
			return default(float);
		}

		[Token(Token = "0x6000959")]
		[Address(RVA = "0x1DFEEE8", Offset = "0x1DFEEE8", VA = "0x1DFEEE8")]
		public void AddContour(ContourVertex[] vertices)
		{
		}

		[Token(Token = "0x600095A")]
		[Address(RVA = "0x1DFEEF0", Offset = "0x1DFEEF0", VA = "0x1DFEEF0")]
		public void AddContour(ContourVertex[] vertices, ContourOrientation forceOrientation)
		{
		}

		[Token(Token = "0x600095B")]
		[Address(RVA = "0x1DFF0D0", Offset = "0x1DFF0D0", VA = "0x1DFF0D0")]
		public void Tessellate(WindingRule windingRule, ElementType elementType, int polySize)
		{
		}

		[Token(Token = "0x600095C")]
		[Address(RVA = "0x1DFF0D8", Offset = "0x1DFF0D8", VA = "0x1DFF0D8")]
		public void Tessellate(WindingRule windingRule, ElementType elementType, int polySize, CombineCallback combineCallback)
		{
		}
	}
	[Token(Token = "0x200010C")]
	public enum WindingRule
	{
		[Token(Token = "0x4000622")]
		EvenOdd,
		[Token(Token = "0x4000623")]
		NonZero,
		[Token(Token = "0x4000624")]
		Positive,
		[Token(Token = "0x4000625")]
		Negative,
		[Token(Token = "0x4000626")]
		AbsGeqTwo
	}
	[Token(Token = "0x200010D")]
	public enum ElementType
	{
		[Token(Token = "0x4000628")]
		Polygons,
		[Token(Token = "0x4000629")]
		ConnectedPolygons,
		[Token(Token = "0x400062A")]
		BoundaryContours
	}
	[Token(Token = "0x200010E")]
	public enum ContourOrientation
	{
		[Token(Token = "0x400062C")]
		Original,
		[Token(Token = "0x400062D")]
		Clockwise,
		[Token(Token = "0x400062E")]
		CounterClockwise
	}
	[Token(Token = "0x200010F")]
	public struct ContourVertex
	{
		[Token(Token = "0x400062F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vec3 Position;

		[Token(Token = "0x4000630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public object Data;

		[Token(Token = "0x600095D")]
		[Address(RVA = "0x103636C", Offset = "0x103636C", VA = "0x103636C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000110")]
	public delegate object CombineCallback(Vec3 position, object[] data, float[] weights);
	[Token(Token = "0x2000111")]
	public static class LibTessVector3Extension
	{
		[Token(Token = "0x6000962")]
		[Address(RVA = "0x1DFADB8", Offset = "0x1DFADB8", VA = "0x1DFADB8")]
		public static Vec3 Vec3(this Vector3 v)
		{
			return default(Vec3);
		}

		[Token(Token = "0x6000963")]
		[Address(RVA = "0x1DFADBC", Offset = "0x1DFADBC", VA = "0x1DFADBC")]
		public static ContourVertex ContourVertex(this Vector3 v)
		{
			return default(ContourVertex);
		}
	}
	[Token(Token = "0x2000112")]
	public static class LibTessV3Extension
	{
		[Token(Token = "0x6000964")]
		[Address(RVA = "0x1DFAD84", Offset = "0x1DFAD84", VA = "0x1DFAD84")]
		public static Vector3 Vector3(this Vec3 v)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x2000113")]
	public static class UnityLibTessUtility
	{
		[Token(Token = "0x6000965")]
		[Address(RVA = "0x1F00E70", Offset = "0x1F00E70", VA = "0x1F00E70")]
		public static ContourVertex[] ToContourVertex(Vector3[] v, bool zeroZ = false)
		{
			return null;
		}

		[Token(Token = "0x6000966")]
		[Address(RVA = "0x1F00F64", Offset = "0x1F00F64", VA = "0x1F00F64")]
		public static Vector3[] FromContourVertex(ContourVertex[] v)
		{
			return null;
		}

		[Token(Token = "0x6000967")]
		[Address(RVA = "0x1F00FE4", Offset = "0x1F00FE4", VA = "0x1F00FE4")]
		public static void SetFromContourVertex(ref Vector3[] v3Array, ref ContourVertex[] cvArray)
		{
		}

		[Token(Token = "0x6000968")]
		[Address(RVA = "0x1F01130", Offset = "0x1F01130", VA = "0x1F01130")]
		public static void SetToContourVertex(ref ContourVertex[] cvArray, ref Vector3[] v3Array)
		{
		}
	}
}
namespace FluffyUnderware.Curvy.ImportExport
{
	[Token(Token = "0x2000114")]
	public enum CurvySerializationSpace
	{
		[Token(Token = "0x4000632")]
		Global,
		[Token(Token = "0x4000633")]
		Local
	}
	[Serializable]
	[Token(Token = "0x2000115")]
	public class SerializedCurvySpline
	{
		[Token(Token = "0x4000634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Name;

		[Token(Token = "0x4000635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 Position;

		[Token(Token = "0x4000636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 Rotation;

		[Token(Token = "0x4000637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public CurvyInterpolation Interpolation;

		[Token(Token = "0x4000638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool RestrictTo2D;

		[Token(Token = "0x4000639")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		public bool Closed;

		[Token(Token = "0x400063A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
		public bool AutoEndTangents;

		[Token(Token = "0x400063B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public CurvyOrientation Orientation;

		[Token(Token = "0x400063C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float AutoHandleDistance;

		[Token(Token = "0x400063D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int CacheDensity;

		[Token(Token = "0x400063E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float MaxPointsPerUnit;

		[Token(Token = "0x400063F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool UsePooling;

		[Token(Token = "0x4000640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool UseThreading;

		[Token(Token = "0x4000641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		public bool CheckTransform;

		[Token(Token = "0x4000642")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public CurvyUpdateMethod UpdateIn;

		[Token(Token = "0x4000643")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public SerializedCurvySplineSegment[] ControlPoints;

		[Token(Token = "0x6000969")]
		[Address(RVA = "0x1DF55A4", Offset = "0x1DF55A4", VA = "0x1DF55A4")]
		public SerializedCurvySpline()
		{
		}

		[Token(Token = "0x600096A")]
		[Address(RVA = "0x1DF566C", Offset = "0x1DF566C", VA = "0x1DF566C")]
		public SerializedCurvySpline([NotNull] CurvySpline spline, CurvySerializationSpace space)
		{
		}

		[Token(Token = "0x600096B")]
		[Address(RVA = "0x1DF5A08", Offset = "0x1DF5A08", VA = "0x1DF5A08")]
		public void WriteIntoSpline([NotNull] CurvySpline deserializedSpline, CurvySerializationSpace space)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000116")]
	public class SerializedCurvySplineSegment
	{
		[Token(Token = "0x4000644")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 Position;

		[Token(Token = "0x4000645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 Rotation;

		[Token(Token = "0x4000646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool AutoBakeOrientation;

		[Token(Token = "0x4000647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool OrientationAnchor;

		[Token(Token = "0x4000648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public CurvyOrientationSwirl Swirl;

		[Token(Token = "0x4000649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float SwirlTurns;

		[Token(Token = "0x400064A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool AutoHandles;

		[Token(Token = "0x400064B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float AutoHandleDistance;

		[Token(Token = "0x400064C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 HandleOut;

		[Token(Token = "0x400064D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 HandleIn;

		[Token(Token = "0x600096C")]
		[Address(RVA = "0x1DF5E98", Offset = "0x1DF5E98", VA = "0x1DF5E98")]
		public SerializedCurvySplineSegment()
		{
		}

		[Token(Token = "0x600096D")]
		[Address(RVA = "0x1DF58FC", Offset = "0x1DF58FC", VA = "0x1DF58FC")]
		public SerializedCurvySplineSegment([NotNull] CurvySplineSegment segment, CurvySerializationSpace space)
		{
		}

		[Token(Token = "0x600096E")]
		[Address(RVA = "0x1DF5CB0", Offset = "0x1DF5CB0", VA = "0x1DF5CB0")]
		public void WriteIntoControlPoint([NotNull] CurvySplineSegment controlPoint, CurvySerializationSpace space)
		{
		}
	}
}
namespace FluffyUnderware.Curvy.Controllers
{
	[Token(Token = "0x2000117")]
	public abstract class ConnectedControlPointsSelector : MonoBehaviour
	{
		[Token(Token = "0x600096F")]
		public abstract CurvySplineSegment SelectConnectedControlPoint(SplineController caller, CurvyConnection connection, CurvySplineSegment currentControlPoint);

		[Token(Token = "0x6000970")]
		[Address(RVA = "0x1DC1648", Offset = "0x1DC1648", VA = "0x1DC1648")]
		protected ConnectedControlPointsSelector()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000118")]
	public class ControllerEvent : UnityEventEx<CurvyController>
	{
		[Token(Token = "0x6000971")]
		[Address(RVA = "0x1DC1650", Offset = "0x1DC1650", VA = "0x1DC1650")]
		public ControllerEvent()
		{
		}
	}
	[Token(Token = "0x2000119")]
	public class CurvyControllerEventArgs : CurvyEventArgs
	{
		[Token(Token = "0x400064E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly CurvyController Controller;

		[Token(Token = "0x6000972")]
		[Address(RVA = "0x2018040", Offset = "0x2018040", VA = "0x2018040")]
		public CurvyControllerEventArgs(MonoBehaviour sender, CurvyController controller)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200011A")]
	public class CurvySplineMoveEvent : UnityEventEx<CurvySplineMoveEventArgs>
	{
		[Token(Token = "0x6000973")]
		[Address(RVA = "0x201810C", Offset = "0x201810C", VA = "0x201810C")]
		public CurvySplineMoveEvent()
		{
		}
	}
	[Token(Token = "0x200011B")]
	public class CurvySplineMoveEventArgs : CancelEventArgs
	{
		[Token(Token = "0x400064F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFCBE64", Offset = "0xFCBE64")]
		private SplineController <Sender>k__BackingField;

		[Token(Token = "0x4000650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFCBE74", Offset = "0xFCBE74")]
		private CurvySpline <Spline>k__BackingField;

		[Token(Token = "0x4000651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFCBE84", Offset = "0xFCBE84")]
		private CurvySplineSegment <ControlPoint>k__BackingField;

		[Token(Token = "0x4000652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFCBE94", Offset = "0xFCBE94")]
		private bool <WorldUnits>k__BackingField;

		[Token(Token = "0x4000653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFCBEA4", Offset = "0xFCBEA4")]
		private MovementDirection <MovementDirection>k__BackingField;

		[Token(Token = "0x4000654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFCBEB4", Offset = "0xFCBEB4")]
		private float <Delta>k__BackingField;

		[Token(Token = "0x4000655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFCBEC4", Offset = "0xFCBEC4")]
		private float <Position>k__BackingField;

		[Token(Token = "0x17000195")]
		public SplineController Sender
		{
			[Token(Token = "0x6000974")]
			[Address(RVA = "0x201815C", Offset = "0x201815C", VA = "0x201815C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6CFC", Offset = "0xFD6CFC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000975")]
			[Address(RVA = "0x2018164", Offset = "0x2018164", VA = "0x2018164")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6D0C", Offset = "0xFD6D0C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000196")]
		public CurvySpline Spline
		{
			[Token(Token = "0x6000976")]
			[Address(RVA = "0x201816C", Offset = "0x201816C", VA = "0x201816C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6D1C", Offset = "0xFD6D1C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000977")]
			[Address(RVA = "0x2018174", Offset = "0x2018174", VA = "0x2018174")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6D2C", Offset = "0xFD6D2C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000197")]
		public CurvySplineSegment ControlPoint
		{
			[Token(Token = "0x6000978")]
			[Address(RVA = "0x201817C", Offset = "0x201817C", VA = "0x201817C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6D3C", Offset = "0xFD6D3C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000979")]
			[Address(RVA = "0x2018184", Offset = "0x2018184", VA = "0x2018184")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6D4C", Offset = "0xFD6D4C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000198")]
		public bool WorldUnits
		{
			[Token(Token = "0x600097A")]
			[Address(RVA = "0x201818C", Offset = "0x201818C", VA = "0x201818C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6D5C", Offset = "0xFD6D5C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600097B")]
			[Address(RVA = "0x2018194", Offset = "0x2018194", VA = "0x2018194")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6D6C", Offset = "0xFD6D6C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000199")]
		public MovementDirection MovementDirection
		{
			[Token(Token = "0x600097C")]
			[Address(RVA = "0x20181A0", Offset = "0x20181A0", VA = "0x20181A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6D7C", Offset = "0xFD6D7C")]
			get
			{
				return default(MovementDirection);
			}
			[Token(Token = "0x600097D")]
			[Address(RVA = "0x20181A8", Offset = "0x20181A8", VA = "0x20181A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6D8C", Offset = "0xFD6D8C")]
			private set
			{
			}
		}

		[Token(Token = "0x1700019A")]
		public float Delta
		{
			[Token(Token = "0x600097E")]
			[Address(RVA = "0x20181B0", Offset = "0x20181B0", VA = "0x20181B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6D9C", Offset = "0xFD6D9C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600097F")]
			[Address(RVA = "0x20181B8", Offset = "0x20181B8", VA = "0x20181B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6DAC", Offset = "0xFD6DAC")]
			private set
			{
			}
		}

		[Token(Token = "0x1700019B")]
		public float Position
		{
			[Token(Token = "0x6000980")]
			[Address(RVA = "0x20181C0", Offset = "0x20181C0", VA = "0x20181C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6DBC", Offset = "0xFD6DBC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000981")]
			[Address(RVA = "0x20181C8", Offset = "0x20181C8", VA = "0x20181C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6DCC", Offset = "0xFD6DCC")]
			private set
			{
			}
		}

		[Token(Token = "0x6000982")]
		[Address(RVA = "0x20181D0", Offset = "0x20181D0", VA = "0x20181D0")]
		public CurvySplineMoveEventArgs(SplineController sender, CurvySpline spline, CurvySplineSegment controlPoint, float position, bool usingWorldUnits, float delta, MovementDirection direction)
		{
		}

		[Token(Token = "0x6000983")]
		[Address(RVA = "0x2018248", Offset = "0x2018248", VA = "0x2018248")]
		internal void Set_INTERNAL(SplineController sender, CurvySpline spline, CurvySplineSegment controlPoint, float position, float delta, MovementDirection direction, bool usingWorldUnits)
		{
		}
	}
	[Token(Token = "0x200011C")]
	[ExecuteInEditMode]
	public abstract class CurvyController : DTVersionedMonoBehaviour, ISerializationCallbackReceiver
	{
		[Token(Token = "0x2000229")]
		public enum MoveModeEnum
		{
			[Token(Token = "0x4000B41")]
			Relative,
			[Token(Token = "0x4000B42")]
			AbsolutePrecise
		}

		[Token(Token = "0x200022A")]
		public enum CurvyControllerState
		{
			[Token(Token = "0x4000B44")]
			Stopped,
			[Token(Token = "0x4000B45")]
			Playing,
			[Token(Token = "0x4000B46")]
			Paused
		}

		[Token(Token = "0x4000656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0xFCBED4", Offset = "0xFCBED4")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFCBED4", Offset = "0xFCBED4")]
		public CurvyUpdateMethod UpdateIn;

		[Token(Token = "0x4000657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0xFCBF6C", Offset = "0xFCBF6C")]
		[SerializeField]
		private CurvyPositionMode m_PositionMode;

		[Token(Token = "0x4000658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0xFCBFF0", Offset = "0xFCBFF0")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xFCBFF0", Offset = "0xFCBFF0")]
		protected float m_Position;

		[Token(Token = "0x4000659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0xFCC09C", Offset = "0xFCC09C")]
		[SerializeField]
		private MoveModeEnum m_MoveMode;

		[Token(Token = "0x400065A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Positive]
		[SerializeField]
		private float m_Speed;

		[Token(Token = "0x400065B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private MovementDirection m_Direction;

		[Token(Token = "0x400065C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private CurvyClamping m_Clamping;

		[Token(Token = "0x400065D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFCC170", Offset = "0xFCC170")]
		private bool m_PlayAutomatically;

		[Token(Token = "0x400065E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0xFCC1BC", Offset = "0xFCC1BC")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFCC1BC", Offset = "0xFCC1BC")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFCC1BC", Offset = "0xFCC1BC")]
		[SerializeField]
		private OrientationModeEnum m_OrientationMode;

		[Token(Token = "0x400065F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFCC308", Offset = "0xFCC308")]
		[SerializeField]
		private bool m_LockRotation;

		[Token(Token = "0x4000660")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFCC370", Offset = "0xFCC370")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFCC370", Offset = "0xFCC370")]
		[SerializeField]
		private OrientationAxisEnum m_OrientationAxis;

		[Token(Token = "0x4000661")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFCC4A4", Offset = "0xFCC4A4")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFCC4A4", Offset = "0xFCC4A4")]
		[SerializeField]
		private bool m_IgnoreDirection;

		[Token(Token = "0x4000662")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "MinAttribute", RVA = "0xFCC5C4", Offset = "0xFCC5C4")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFCC5C4", Offset = "0xFCC5C4")]
		[SerializeField]
		private float m_DampingDirection;

		[Token(Token = "0x4000663")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "MinAttribute", RVA = "0xFCC6C0", Offset = "0xFCC6C0")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFCC6C0", Offset = "0xFCC6C0")]
		[SerializeField]
		private float m_DampingUp;

		[Token(Token = "0x4000664")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0xFCC7BC", Offset = "0xFCC7BC")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFCC7BC", Offset = "0xFCC7BC")]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0xFCC7BC", Offset = "0xFCC7BC")]
		[SerializeField]
		private float m_OffsetAngle;

		[Token(Token = "0x4000665")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFCC918", Offset = "0xFCC918")]
		[SerializeField]
		private float m_OffsetRadius;

		[Token(Token = "0x4000666")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFCC9D8", Offset = "0xFCC9D8")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFCC9D8", Offset = "0xFCC9D8")]
		[SerializeField]
		private bool m_OffsetCompensation;

		[Token(Token = "0x4000667")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0xFCCAD0", Offset = "0xFCCAD0")]
		[SerializeField]
		protected ControllerEvent onInitialized;

		[Token(Token = "0x4000668")]
		protected const string ControllerNotReadyMessage = "The controller is not yet ready";

		[Token(Token = "0x4000669")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected CurvyControllerState State;

		[Token(Token = "0x400066A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		protected Vector3 DirectionDampingVelocity;

		[Token(Token = "0x400066B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected Vector3 UpDampingVelocity;

		[Token(Token = "0x400066C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		protected float PrePlayPosition;

		[Token(Token = "0x400066D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected MovementDirection PrePlayDirection;

		[Token(Token = "0x400066E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		protected Quaternion LockedRotation;

		[Token(Token = "0x400066F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFCCB30", Offset = "0xFCCB30")]
		private bool <isInitialized>k__BackingField;

		[Token(Token = "0x1700019C")]
		public ControllerEvent OnInitialized
		{
			[Token(Token = "0x6000984")]
			[Address(RVA = "0x1DC16A0", Offset = "0x1DC16A0", VA = "0x1DC16A0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700019D")]
		public CurvyPositionMode PositionMode
		{
			[Token(Token = "0x6000985")]
			[Address(RVA = "0x1DC16A8", Offset = "0x1DC16A8", VA = "0x1DC16A8")]
			get
			{
				return default(CurvyPositionMode);
			}
			[Token(Token = "0x6000986")]
			[Address(RVA = "0x1DC16B0", Offset = "0x1DC16B0", VA = "0x1DC16B0")]
			set
			{
			}
		}

		[Token(Token = "0x1700019E")]
		public MoveModeEnum MoveMode
		{
			[Token(Token = "0x6000987")]
			[Address(RVA = "0x1DC16B8", Offset = "0x1DC16B8", VA = "0x1DC16B8")]
			get
			{
				return default(MoveModeEnum);
			}
			[Token(Token = "0x6000988")]
			[Address(RVA = "0x1DC16C0", Offset = "0x1DC16C0", VA = "0x1DC16C0")]
			set
			{
			}
		}

		[Token(Token = "0x1700019F")]
		public bool PlayAutomatically
		{
			[Token(Token = "0x6000989")]
			[Address(RVA = "0x1DC16D4", Offset = "0x1DC16D4", VA = "0x1DC16D4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600098A")]
			[Address(RVA = "0x1DC16DC", Offset = "0x1DC16DC", VA = "0x1DC16DC")]
			set
			{
			}
		}

		[Token(Token = "0x170001A0")]
		public CurvyClamping Clamping
		{
			[Token(Token = "0x600098B")]
			[Address(RVA = "0x1DC16FC", Offset = "0x1DC16FC", VA = "0x1DC16FC")]
			get
			{
				return default(CurvyClamping);
			}
			[Token(Token = "0x600098C")]
			[Address(RVA = "0x1DC1704", Offset = "0x1DC1704", VA = "0x1DC1704")]
			set
			{
			}
		}

		[Token(Token = "0x170001A1")]
		public OrientationModeEnum OrientationMode
		{
			[Token(Token = "0x600098D")]
			[Address(RVA = "0x1DC1718", Offset = "0x1DC1718", VA = "0x1DC1718")]
			get
			{
				return default(OrientationModeEnum);
			}
			[Token(Token = "0x600098E")]
			[Address(RVA = "0x1DC1720", Offset = "0x1DC1720", VA = "0x1DC1720")]
			set
			{
			}
		}

		[Token(Token = "0x170001A2")]
		public bool LockRotation
		{
			[Token(Token = "0x600098F")]
			[Address(RVA = "0x1DC1734", Offset = "0x1DC1734", VA = "0x1DC1734")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000990")]
			[Address(RVA = "0x1DC173C", Offset = "0x1DC173C", VA = "0x1DC173C")]
			set
			{
			}
		}

		[Token(Token = "0x170001A3")]
		public OrientationAxisEnum OrientationAxis
		{
			[Token(Token = "0x6000991")]
			[Address(RVA = "0x1DC17A4", Offset = "0x1DC17A4", VA = "0x1DC17A4")]
			get
			{
				return default(OrientationAxisEnum);
			}
			[Token(Token = "0x6000992")]
			[Address(RVA = "0x1DC17AC", Offset = "0x1DC17AC", VA = "0x1DC17AC")]
			set
			{
			}
		}

		[Token(Token = "0x170001A4")]
		public float DirectionDampingTime
		{
			[Token(Token = "0x6000993")]
			[Address(RVA = "0x1DC17C0", Offset = "0x1DC17C0", VA = "0x1DC17C0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000994")]
			[Address(RVA = "0x1DC17C8", Offset = "0x1DC17C8", VA = "0x1DC17C8")]
			set
			{
			}
		}

		[Token(Token = "0x170001A5")]
		public float UpDampingTime
		{
			[Token(Token = "0x6000995")]
			[Address(RVA = "0x1DC1854", Offset = "0x1DC1854", VA = "0x1DC1854")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000996")]
			[Address(RVA = "0x1DC185C", Offset = "0x1DC185C", VA = "0x1DC185C")]
			set
			{
			}
		}

		[Token(Token = "0x170001A6")]
		public bool IgnoreDirection
		{
			[Token(Token = "0x6000997")]
			[Address(RVA = "0x1DC18E8", Offset = "0x1DC18E8", VA = "0x1DC18E8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000998")]
			[Address(RVA = "0x1DC18F0", Offset = "0x1DC18F0", VA = "0x1DC18F0")]
			set
			{
			}
		}

		[Token(Token = "0x170001A7")]
		public float OffsetAngle
		{
			[Token(Token = "0x6000999")]
			[Address(RVA = "0x1DC1910", Offset = "0x1DC1910", VA = "0x1DC1910")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600099A")]
			[Address(RVA = "0x1DC1918", Offset = "0x1DC1918", VA = "0x1DC1918")]
			set
			{
			}
		}

		[Token(Token = "0x170001A8")]
		public float OffsetRadius
		{
			[Token(Token = "0x600099B")]
			[Address(RVA = "0x1DC192C", Offset = "0x1DC192C", VA = "0x1DC192C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600099C")]
			[Address(RVA = "0x1DC1934", Offset = "0x1DC1934", VA = "0x1DC1934")]
			set
			{
			}
		}

		[Token(Token = "0x170001A9")]
		public bool OffsetCompensation
		{
			[Token(Token = "0x600099D")]
			[Address(RVA = "0x1DC1948", Offset = "0x1DC1948", VA = "0x1DC1948")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600099E")]
			[Address(RVA = "0x1DC1950", Offset = "0x1DC1950", VA = "0x1DC1950")]
			set
			{
			}
		}

		[Token(Token = "0x170001AA")]
		public float Speed
		{
			[Token(Token = "0x600099F")]
			[Address(RVA = "0x1DC195C", Offset = "0x1DC195C", VA = "0x1DC195C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60009A0")]
			[Address(RVA = "0x1DC1964", Offset = "0x1DC1964", VA = "0x1DC1964")]
			set
			{
			}
		}

		[Token(Token = "0x170001AB")]
		public float RelativePosition
		{
			[Token(Token = "0x60009A1")]
			[Address(RVA = "0x1DC1978", Offset = "0x1DC1978", VA = "0x1DC1978")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60009A2")]
			[Address(RVA = "0x1DC1B70", Offset = "0x1DC1B70", VA = "0x1DC1B70")]
			set
			{
			}
		}

		[Token(Token = "0x170001AC")]
		public float AbsolutePosition
		{
			[Token(Token = "0x60009A3")]
			[Address(RVA = "0x1DC1C40", Offset = "0x1DC1C40", VA = "0x1DC1C40")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60009A4")]
			[Address(RVA = "0x1DC1D44", Offset = "0x1DC1D44", VA = "0x1DC1D44")]
			set
			{
			}
		}

		[Token(Token = "0x170001AD")]
		public float Position
		{
			[Token(Token = "0x60009A5")]
			[Address(RVA = "0x1DC1E14", Offset = "0x1DC1E14", VA = "0x1DC1E14")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60009A6")]
			[Address(RVA = "0x1DC1EA8", Offset = "0x1DC1EA8", VA = "0x1DC1EA8")]
			set
			{
			}
		}

		[Token(Token = "0x170001AE")]
		public MovementDirection MovementDirection
		{
			[Token(Token = "0x60009A7")]
			[Address(RVA = "0x1DC1F54", Offset = "0x1DC1F54", VA = "0x1DC1F54")]
			get
			{
				return default(MovementDirection);
			}
			[Token(Token = "0x60009A8")]
			[Address(RVA = "0x1DC1F5C", Offset = "0x1DC1F5C", VA = "0x1DC1F5C")]
			set
			{
			}
		}

		[Token(Token = "0x170001AF")]
		public CurvyControllerState PlayState
		{
			[Token(Token = "0x60009A9")]
			[Address(RVA = "0x1DC1F64", Offset = "0x1DC1F64", VA = "0x1DC1F64")]
			get
			{
				return default(CurvyControllerState);
			}
		}

		[Token(Token = "0x170001B0")]
		public abstract bool IsReady
		{
			[Token(Token = "0x60009AA")]
			get;
		}

		[Token(Token = "0x170001B1")]
		public virtual Transform Transform
		{
			[Token(Token = "0x60009B2")]
			[Address(RVA = "0x1DC22E0", Offset = "0x1DC22E0", VA = "0x1DC22E0", Slot = "15")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B2")]
		protected virtual bool ShowOrientationSection
		{
			[Token(Token = "0x60009BD")]
			[Address(RVA = "0x1DC3264", Offset = "0x1DC3264", VA = "0x1DC3264", Slot = "26")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001B3")]
		protected virtual bool ShowOffsetSection
		{
			[Token(Token = "0x60009BE")]
			[Address(RVA = "0x1DC326C", Offset = "0x1DC326C", VA = "0x1DC326C", Slot = "27")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001B4")]
		public abstract float Length
		{
			[Token(Token = "0x60009BF")]
			get;
		}

		[Token(Token = "0x170001B5")]
		protected bool isInitialized
		{
			[Token(Token = "0x60009D0")]
			[Address(RVA = "0x1DC39E4", Offset = "0x1DC39E4", VA = "0x1DC39E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6DDC", Offset = "0xFD6DDC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60009D1")]
			[Address(RVA = "0x1DC39EC", Offset = "0x1DC39EC", VA = "0x1DC39EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6DEC", Offset = "0xFD6DEC")]
			private set
			{
			}
		}

		[Token(Token = "0x170001B6")]
		protected float TimeSinceLastUpdate
		{
			[Token(Token = "0x60009D2")]
			[Address(RVA = "0x1DC2100", Offset = "0x1DC2100", VA = "0x1DC2100")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001B7")]
		protected bool UseOffset
		{
			[Token(Token = "0x60009D3")]
			[Address(RVA = "0x1DC2694", Offset = "0x1DC2694", VA = "0x1DC2694")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001B8")]
		private float maxPosition
		{
			[Token(Token = "0x60009D6")]
			[Address(RVA = "0x1DC39F8", Offset = "0x1DC39F8", VA = "0x1DC39F8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60009AB")]
		[Address(RVA = "0x1DC1F6C", Offset = "0x1DC1F6C", VA = "0x1DC1F6C", Slot = "8")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x60009AC")]
		[Address(RVA = "0x1DC1FD4", Offset = "0x1DC1FD4", VA = "0x1DC1FD4", Slot = "9")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x60009AD")]
		[Address(RVA = "0x1DC20B0", Offset = "0x1DC20B0", VA = "0x1DC20B0", Slot = "10")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x60009AE")]
		[Address(RVA = "0x1DC20CC", Offset = "0x1DC20CC", VA = "0x1DC20CC", Slot = "11")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x60009AF")]
		[Address(RVA = "0x1DC21B8", Offset = "0x1DC21B8", VA = "0x1DC21B8", Slot = "12")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x60009B0")]
		[Address(RVA = "0x1DC2210", Offset = "0x1DC2210", VA = "0x1DC2210", Slot = "13")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x60009B1")]
		[Address(RVA = "0x1DC2248", Offset = "0x1DC2248", VA = "0x1DC2248", Slot = "14")]
		protected virtual void Reset()
		{
		}

		[Token(Token = "0x60009B3")]
		[Address(RVA = "0x1DC22E8", Offset = "0x1DC22E8", VA = "0x1DC22E8", Slot = "16")]
		protected virtual void InitializedApplyDeltaTime(float deltaTime)
		{
		}

		[Token(Token = "0x60009B4")]
		[Address(RVA = "0x1DC2918", Offset = "0x1DC2918", VA = "0x1DC2918", Slot = "17")]
		protected virtual void ComputeTargetPositionAndRotation(out Vector3 targetPosition, out Vector3 targetUp, out Vector3 targetForward)
		{
		}

		[Token(Token = "0x60009B5")]
		[Address(RVA = "0x1DC311C", Offset = "0x1DC311C", VA = "0x1DC311C", Slot = "18")]
		protected virtual void Initialize()
		{
		}

		[Token(Token = "0x60009B6")]
		[Address(RVA = "0x1DC3204", Offset = "0x1DC3204", VA = "0x1DC3204", Slot = "19")]
		protected virtual void Deinitialize()
		{
		}

		[Token(Token = "0x60009B7")]
		[Address(RVA = "0x1DC3234", Offset = "0x1DC3234", VA = "0x1DC3234", Slot = "20")]
		protected virtual void BindEvents()
		{
		}

		[Token(Token = "0x60009B8")]
		[Address(RVA = "0x1DC3238", Offset = "0x1DC3238", VA = "0x1DC3238", Slot = "21")]
		protected virtual void UnbindEvents()
		{
		}

		[Token(Token = "0x60009B9")]
		[Address(RVA = "0x1DC323C", Offset = "0x1DC323C", VA = "0x1DC323C", Slot = "22")]
		protected virtual void SavePrePlayState()
		{
		}

		[Token(Token = "0x60009BA")]
		[Address(RVA = "0x1DC324C", Offset = "0x1DC324C", VA = "0x1DC324C", Slot = "23")]
		protected virtual void RestorePrePlayState()
		{
		}

		[Token(Token = "0x60009BB")]
		[Address(RVA = "0x1DC325C", Offset = "0x1DC325C", VA = "0x1DC325C", Slot = "24")]
		protected virtual void UserAfterInit()
		{
		}

		[Token(Token = "0x60009BC")]
		[Address(RVA = "0x1DC3260", Offset = "0x1DC3260", VA = "0x1DC3260", Slot = "25")]
		protected virtual void UserAfterUpdate()
		{
		}

		[Token(Token = "0x60009C0")]
		protected abstract void Advance(float speed, float deltaTime);

		[Token(Token = "0x60009C1")]
		protected abstract void SimulateAdvance(ref float tf, ref MovementDirection curyDirection, float speed, float deltaTime);

		[Token(Token = "0x60009C2")]
		protected abstract float AbsoluteToRelative(float worldUnitDistance);

		[Token(Token = "0x60009C3")]
		protected abstract float RelativeToAbsolute(float relativeDistance);

		[Token(Token = "0x60009C4")]
		protected abstract Vector3 GetInterpolatedSourcePosition(float tf);

		[Token(Token = "0x60009C5")]
		protected abstract void GetInterpolatedSourcePosition(float tf, out Vector3 interpolatedPosition, out Vector3 tangent, out Vector3 up);

		[Token(Token = "0x60009C6")]
		protected abstract Vector3 GetOrientation(float tf);

		[Token(Token = "0x60009C7")]
		protected abstract Vector3 GetTangent(float tf);

		[Token(Token = "0x60009C8")]
		[Address(RVA = "0x1DC2070", Offset = "0x1DC2070", VA = "0x1DC2070")]
		public void Play()
		{
		}

		[Token(Token = "0x60009C9")]
		[Address(RVA = "0x1DC327C", Offset = "0x1DC327C", VA = "0x1DC327C")]
		public void Stop()
		{
		}

		[Token(Token = "0x60009CA")]
		[Address(RVA = "0x1DC32B8", Offset = "0x1DC32B8", VA = "0x1DC32B8")]
		public void Pause()
		{
		}

		[Token(Token = "0x60009CB")]
		[Address(RVA = "0x1DC32D0", Offset = "0x1DC32D0", VA = "0x1DC32D0")]
		public void Refresh()
		{
		}

		[Token(Token = "0x60009CC")]
		[Address(RVA = "0x1DC2108", Offset = "0x1DC2108", VA = "0x1DC2108")]
		public void ApplyDeltaTime(float deltaTime)
		{
		}

		[Token(Token = "0x60009CD")]
		[Address(RVA = "0x1DC32D8", Offset = "0x1DC32D8", VA = "0x1DC32D8")]
		public void TeleportTo(float newPosition)
		{
		}

		[Token(Token = "0x60009CE")]
		[Address(RVA = "0x1DC336C", Offset = "0x1DC336C", VA = "0x1DC336C")]
		public void TeleportBy(float distance, MovementDirection direction)
		{
		}

		[Token(Token = "0x60009CF")]
		[Address(RVA = "0x1DC3448", Offset = "0x1DC3448", VA = "0x1DC3448")]
		public void SetFromString(string fieldAndValue)
		{
		}

		[Token(Token = "0x60009D4")]
		[Address(RVA = "0x1DC3024", Offset = "0x1DC3024", VA = "0x1DC3024")]
		protected static Vector3 ApplyOffset(Vector3 position, Vector3 tangent, Vector3 up, float offsetAngle, float offsetRadius)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009D5")]
		[Address(RVA = "0x1DC1A7C", Offset = "0x1DC1A7C", VA = "0x1DC1A7C")]
		protected static float GetClampedPosition(float position, CurvyPositionMode positionMode, CurvyClamping clampingMode, float length)
		{
			return default(float);
		}

		[Token(Token = "0x60009D7")]
		[Address(RVA = "0x1DC26A4", Offset = "0x1DC26A4", VA = "0x1DC26A4")]
		protected float ComputeOffsetCompensatedSpeed(float deltaTime)
		{
			return default(float);
		}

		[Token(Token = "0x60009D8")]
		[Address(RVA = "0x1DC2E98", Offset = "0x1DC2E98", VA = "0x1DC2E98")]
		private void GetOrientationNoneUpAndForward(out Vector3 targetUp, out Vector3 targetForward)
		{
		}

		[Token(Token = "0x60009D9")]
		[Address(RVA = "0x1DC3AB0", Offset = "0x1DC3AB0", VA = "0x1DC3AB0", Slot = "37")]
		public virtual void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x60009DA")]
		[Address(RVA = "0x1DC3B54", Offset = "0x1DC3B54", VA = "0x1DC3B54", Slot = "5")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x60009DB")]
		[Address(RVA = "0x1DC3B58", Offset = "0x1DC3B58", VA = "0x1DC3B58")]
		protected CurvyController()
		{
		}
	}
	[Token(Token = "0x200011D")]
	public enum MovementDirection
	{
		[Token(Token = "0x4000671")]
		Forward,
		[Token(Token = "0x4000672")]
		Backward
	}
	[Token(Token = "0x200011E")]
	public static class MovementDirectionMethods
	{
		[Token(Token = "0x60009DC")]
		[Address(RVA = "0x20182D0", Offset = "0x20182D0", VA = "0x20182D0")]
		public static MovementDirection FromInt(int value)
		{
			return default(MovementDirection);
		}

		[Token(Token = "0x60009DD")]
		[Address(RVA = "0x20182D8", Offset = "0x20182D8", VA = "0x20182D8")]
		public static MovementDirection GetOpposite(this MovementDirection value)
		{
			return default(MovementDirection);
		}

		[Token(Token = "0x60009DE")]
		[Address(RVA = "0x2018360", Offset = "0x2018360", VA = "0x2018360")]
		public static int ToInt(this MovementDirection direction)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200011F")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xFC6BCC", Offset = "0xFC6BCC")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC6BCC", Offset = "0xFC6BCC")]
	public class PathController : CurvyController
	{
		[Token(Token = "0x4000673")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0xFCCB40", Offset = "0xFCCB40")]
		[SerializeField]
		[AttributeAttribute(Name = "CGDataReferenceSelectorAttribute", RVA = "0xFCCB40", Offset = "0xFCCB40")]
		private CGDataReference m_Path;

		[Token(Token = "0x170001B9")]
		public CGDataReference Path
		{
			[Token(Token = "0x60009DF")]
			[Address(RVA = "0x20183E8", Offset = "0x20183E8", VA = "0x20183E8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009E0")]
			[Address(RVA = "0x20183F0", Offset = "0x20183F0", VA = "0x20183F0")]
			set
			{
			}
		}

		[Token(Token = "0x170001BA")]
		public CGPath PathData
		{
			[Token(Token = "0x60009E1")]
			[Address(RVA = "0x20183F8", Offset = "0x20183F8", VA = "0x20183F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001BB")]
		public override float Length
		{
			[Token(Token = "0x60009E2")]
			[Address(RVA = "0x2018470", Offset = "0x2018470", VA = "0x2018470", Slot = "28")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001BC")]
		public override bool IsReady
		{
			[Token(Token = "0x60009E3")]
			[Address(RVA = "0x20184B0", Offset = "0x20184B0", VA = "0x20184B0", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60009E4")]
		[Address(RVA = "0x2018500", Offset = "0x2018500", VA = "0x2018500", Slot = "32")]
		protected override float RelativeToAbsolute(float relativeDistance)
		{
			return default(float);
		}

		[Token(Token = "0x60009E5")]
		[Address(RVA = "0x201855C", Offset = "0x201855C", VA = "0x201855C", Slot = "31")]
		protected override float AbsoluteToRelative(float worldUnitDistance)
		{
			return default(float);
		}

		[Token(Token = "0x60009E6")]
		[Address(RVA = "0x20185B8", Offset = "0x20185B8", VA = "0x20185B8", Slot = "33")]
		protected override Vector3 GetInterpolatedSourcePosition(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009E7")]
		[Address(RVA = "0x201862C", Offset = "0x201862C", VA = "0x201862C", Slot = "34")]
		protected override void GetInterpolatedSourcePosition(float tf, out Vector3 interpolatedPosition, out Vector3 tangent, out Vector3 up)
		{
		}

		[Token(Token = "0x60009E8")]
		[Address(RVA = "0x2018704", Offset = "0x2018704", VA = "0x2018704", Slot = "36")]
		protected override Vector3 GetTangent(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009E9")]
		[Address(RVA = "0x2018778", Offset = "0x2018778", VA = "0x2018778", Slot = "35")]
		protected override Vector3 GetOrientation(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009EA")]
		[Address(RVA = "0x20187EC", Offset = "0x20187EC", VA = "0x20187EC", Slot = "29")]
		protected override void Advance(float speed, float deltaTime)
		{
		}

		[Token(Token = "0x60009EB")]
		[Address(RVA = "0x2018868", Offset = "0x2018868", VA = "0x2018868", Slot = "30")]
		protected override void SimulateAdvance(ref float tf, ref MovementDirection curyDirection, float speed, float deltaTime)
		{
		}

		[Token(Token = "0x60009EC")]
		[Address(RVA = "0x2018978", Offset = "0x2018978", VA = "0x2018978")]
		public PathController()
		{
		}
	}
	[Token(Token = "0x2000120")]
	public enum SplineControllerConnectionBehavior
	{
		[Token(Token = "0x4000675")]
		CurrentSpline,
		[Token(Token = "0x4000676")]
		FollowUpSpline,
		[Token(Token = "0x4000677")]
		RandomSpline,
		[Token(Token = "0x4000678")]
		FollowUpOtherwiseRandom,
		[Token(Token = "0x4000679")]
		Custom
	}
	[Token(Token = "0x2000121")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xFC6C30", Offset = "0xFC6C30")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC6C30", Offset = "0xFC6C30")]
	public class SplineController : CurvyController
	{
		[Token(Token = "0x400067A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0xFCCC04", Offset = "0xFCCC04")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFCCC04", Offset = "0xFCCC04")]
		[SerializeField]
		protected CurvySpline m_Spline;

		[Token(Token = "0x400067B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFCCCB0", Offset = "0xFCCCB0")]
		private bool m_UseCache;

		[Token(Token = "0x400067C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0xFCCCFC", Offset = "0xFCCCFC")]
		[SerializeField]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFCCCFC", Offset = "0xFCCCFC")]
		private SplineControllerConnectionBehavior connectionBehavior;

		[Token(Token = "0x400067D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFCCDB0", Offset = "0xFCCDB0")]
		private bool allowDirectionChange;

		[Token(Token = "0x400067E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
		[SerializeField]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFCCE10", Offset = "0xFCCE10")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFCCE10", Offset = "0xFCCE10")]
		private bool rejectCurrentSpline;

		[Token(Token = "0x400067F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBA")]
		[SerializeField]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFCCEFC", Offset = "0xFCCEFC")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFCCEFC", Offset = "0xFCCEFC")]
		private bool rejectTooDivergentSplines;

		[Token(Token = "0x4000680")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[SerializeField]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFCCFE8", Offset = "0xFCCFE8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xFCCFE8", Offset = "0xFCCFE8")]
		private float maxAllowedDivergenceAngle;

		[Token(Token = "0x4000681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFCD06C", Offset = "0xFCD06C")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFCD06C", Offset = "0xFCD06C")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFCD06C", Offset = "0xFCD06C")]
		private ConnectedControlPointsSelector connectionCustomSelector;

		[Token(Token = "0x4000682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0xFCD1A0", Offset = "0xFCD1A0")]
		[SerializeField]
		protected CurvySplineMoveEvent m_OnControlPointReached;

		[Token(Token = "0x4000683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		protected CurvySplineMoveEvent m_OnEndReached;

		[Token(Token = "0x4000684")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		protected CurvySplineMoveEvent m_OnSwitch;

		[Token(Token = "0x4000685")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFCD234", Offset = "0xFCD234")]
		private bool <IsSwitching>k__BackingField;

		[Token(Token = "0x4000686")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private CurvySpline prePlaySpline;

		[Token(Token = "0x4000687")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private readonly CurvySplineMoveEventArgs preAllocatedEventArgs;

		[Token(Token = "0x4000688")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected float SwitchStartTime;

		[Token(Token = "0x4000689")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		protected float SwitchDuration;

		[Token(Token = "0x400068A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		protected CurvySpline SwitchTarget;

		[Token(Token = "0x400068B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		protected float TfOnSwitchTarget;

		[Token(Token = "0x400068C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		protected MovementDirection DirectionOnSwitchTarget;

		[Token(Token = "0x400068D")]
		private const string InvalidSegmentErrorMessage = "[Curvy] Controller {0} reached segment {1} which is invalid segment because it has a length of 0. Please fix the invalid segment to avoid issues with the controller";

		[Token(Token = "0x170001BD")]
		public virtual CurvySpline Spline
		{
			[Token(Token = "0x60009EE")]
			[Address(RVA = "0x2018ABC", Offset = "0x2018ABC", VA = "0x2018ABC", Slot = "38")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009EF")]
			[Address(RVA = "0x2018AC4", Offset = "0x2018AC4", VA = "0x2018AC4", Slot = "39")]
			set
			{
			}
		}

		[Token(Token = "0x170001BE")]
		public bool UseCache
		{
			[Token(Token = "0x60009F0")]
			[Address(RVA = "0x2018ACC", Offset = "0x2018ACC", VA = "0x2018ACC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60009F1")]
			[Address(RVA = "0x2018AD4", Offset = "0x2018AD4", VA = "0x2018AD4")]
			set
			{
			}
		}

		[Token(Token = "0x170001BF")]
		public SplineControllerConnectionBehavior ConnectionBehavior
		{
			[Token(Token = "0x60009F2")]
			[Address(RVA = "0x2018AF4", Offset = "0x2018AF4", VA = "0x2018AF4")]
			get
			{
				return default(SplineControllerConnectionBehavior);
			}
			[Token(Token = "0x60009F3")]
			[Address(RVA = "0x2018AFC", Offset = "0x2018AFC", VA = "0x2018AFC")]
			set
			{
			}
		}

		[Token(Token = "0x170001C0")]
		public ConnectedControlPointsSelector ConnectionCustomSelector
		{
			[Token(Token = "0x60009F4")]
			[Address(RVA = "0x2018B04", Offset = "0x2018B04", VA = "0x2018B04")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009F5")]
			[Address(RVA = "0x2018B0C", Offset = "0x2018B0C", VA = "0x2018B0C")]
			set
			{
			}
		}

		[Token(Token = "0x170001C1")]
		public bool AllowDirectionChange
		{
			[Token(Token = "0x60009F6")]
			[Address(RVA = "0x2018B14", Offset = "0x2018B14", VA = "0x2018B14")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60009F7")]
			[Address(RVA = "0x2018B1C", Offset = "0x2018B1C", VA = "0x2018B1C")]
			set
			{
			}
		}

		[Token(Token = "0x170001C2")]
		public bool RejectCurrentSpline
		{
			[Token(Token = "0x60009F8")]
			[Address(RVA = "0x2018B28", Offset = "0x2018B28", VA = "0x2018B28")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60009F9")]
			[Address(RVA = "0x2018B30", Offset = "0x2018B30", VA = "0x2018B30")]
			set
			{
			}
		}

		[Token(Token = "0x170001C3")]
		public bool RejectTooDivergentSplines
		{
			[Token(Token = "0x60009FA")]
			[Address(RVA = "0x2018B3C", Offset = "0x2018B3C", VA = "0x2018B3C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60009FB")]
			[Address(RVA = "0x2018B44", Offset = "0x2018B44", VA = "0x2018B44")]
			set
			{
			}
		}

		[Token(Token = "0x170001C4")]
		public float MaxAllowedDivergenceAngle
		{
			[Token(Token = "0x60009FC")]
			[Address(RVA = "0x2018B50", Offset = "0x2018B50", VA = "0x2018B50")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60009FD")]
			[Address(RVA = "0x2018B58", Offset = "0x2018B58", VA = "0x2018B58")]
			set
			{
			}
		}

		[Token(Token = "0x170001C5")]
		public CurvySplineMoveEvent OnControlPointReached
		{
			[Token(Token = "0x60009FE")]
			[Address(RVA = "0x2018B60", Offset = "0x2018B60", VA = "0x2018B60")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009FF")]
			[Address(RVA = "0x2018B68", Offset = "0x2018B68", VA = "0x2018B68")]
			set
			{
			}
		}

		[Token(Token = "0x170001C6")]
		public CurvySplineMoveEvent OnEndReached
		{
			[Token(Token = "0x6000A00")]
			[Address(RVA = "0x2018B70", Offset = "0x2018B70", VA = "0x2018B70")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A01")]
			[Address(RVA = "0x2018B78", Offset = "0x2018B78", VA = "0x2018B78")]
			set
			{
			}
		}

		[Token(Token = "0x170001C7")]
		public CurvySplineMoveEvent OnSwitch
		{
			[Token(Token = "0x6000A02")]
			[Address(RVA = "0x2018B80", Offset = "0x2018B80", VA = "0x2018B80")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A03")]
			[Address(RVA = "0x2018B88", Offset = "0x2018B88", VA = "0x2018B88")]
			set
			{
			}
		}

		[Token(Token = "0x170001C8")]
		public bool IsSwitching
		{
			[Token(Token = "0x6000A04")]
			[Address(RVA = "0x2018B90", Offset = "0x2018B90", VA = "0x2018B90")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6E1C", Offset = "0xFD6E1C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A05")]
			[Address(RVA = "0x2018B98", Offset = "0x2018B98", VA = "0x2018B98")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6E2C", Offset = "0xFD6E2C")]
			private set
			{
			}
		}

		[Token(Token = "0x170001C9")]
		public float SwitchProgress
		{
			[Token(Token = "0x6000A06")]
			[Address(RVA = "0x2018BA4", Offset = "0x2018BA4", VA = "0x2018BA4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001CA")]
		public override float Length
		{
			[Token(Token = "0x6000A07")]
			[Address(RVA = "0x2018C50", Offset = "0x2018C50", VA = "0x2018C50", Slot = "28")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001CB")]
		public override bool IsReady
		{
			[Token(Token = "0x6000A0C")]
			[Address(RVA = "0x201905C", Offset = "0x201905C", VA = "0x201905C", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001CC")]
		private bool ShowRandomConnectionOptions
		{
			[Token(Token = "0x6000A24")]
			[Address(RVA = "0x201BB3C", Offset = "0x201BB3C", VA = "0x201BB3C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60009ED")]
		[Address(RVA = "0x20189EC", Offset = "0x20189EC", VA = "0x20189EC")]
		public SplineController()
		{
		}

		[Token(Token = "0x6000A08")]
		[Address(RVA = "0x2018DAC", Offset = "0x2018DAC", VA = "0x2018DAC", Slot = "40")]
		public virtual void SwitchTo(CurvySpline destinationSpline, float destinationTf, float duration)
		{
		}

		[Token(Token = "0x6000A09")]
		[Address(RVA = "0x2018E64", Offset = "0x2018E64", VA = "0x2018E64")]
		public void FinishCurrentSwitch()
		{
		}

		[Token(Token = "0x6000A0A")]
		[Address(RVA = "0x2018EB0", Offset = "0x2018EB0", VA = "0x2018EB0")]
		public void CancelCurrentSwitch()
		{
		}

		[Token(Token = "0x6000A0B")]
		[Address(RVA = "0x2018EC0", Offset = "0x2018EC0", VA = "0x2018EC0")]
		public static float GetAngleBetweenConnectedSplines(CurvySplineSegment before, MovementDirection movementMode, CurvySplineSegment after, bool allowMovementModeChange)
		{
			return default(float);
		}

		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0x20190B4", Offset = "0x20190B4", VA = "0x20190B4", Slot = "22")]
		protected override void SavePrePlayState()
		{
		}

		[Token(Token = "0x6000A0E")]
		[Address(RVA = "0x20190FC", Offset = "0x20190FC", VA = "0x20190FC", Slot = "23")]
		protected override void RestorePrePlayState()
		{
		}

		[Token(Token = "0x6000A0F")]
		[Address(RVA = "0x2019134", Offset = "0x2019134", VA = "0x2019134", Slot = "32")]
		protected override float RelativeToAbsolute(float relativeDistance)
		{
			return default(float);
		}

		[Token(Token = "0x6000A10")]
		[Address(RVA = "0x2019220", Offset = "0x2019220", VA = "0x2019220", Slot = "31")]
		protected override float AbsoluteToRelative(float worldUnitDistance)
		{
			return default(float);
		}

		[Token(Token = "0x6000A11")]
		[Address(RVA = "0x201931C", Offset = "0x201931C", VA = "0x201931C", Slot = "33")]
		protected override Vector3 GetInterpolatedSourcePosition(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A12")]
		[Address(RVA = "0x201952C", Offset = "0x201952C", VA = "0x201952C", Slot = "34")]
		protected override void GetInterpolatedSourcePosition(float tf, out Vector3 interpolatedPosition, out Vector3 tangent, out Vector3 up)
		{
		}

		[Token(Token = "0x6000A13")]
		[Address(RVA = "0x2019734", Offset = "0x2019734", VA = "0x2019734", Slot = "36")]
		protected override Vector3 GetTangent(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A14")]
		[Address(RVA = "0x2019944", Offset = "0x2019944", VA = "0x2019944", Slot = "35")]
		protected override Vector3 GetOrientation(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A15")]
		[Address(RVA = "0x2019A74", Offset = "0x2019A74", VA = "0x2019A74", Slot = "29")]
		protected override void Advance(float speed, float deltaTime)
		{
		}

		[Token(Token = "0x6000A16")]
		[Address(RVA = "0x201A618", Offset = "0x201A618", VA = "0x201A618", Slot = "30")]
		protected override void SimulateAdvance(ref float tf, ref MovementDirection curyDirection, float speed, float deltaTime)
		{
		}

		[Token(Token = "0x6000A17")]
		[Address(RVA = "0x201A4BC", Offset = "0x201A4BC", VA = "0x201A4BC")]
		private void SimulateAdvanceOnSpline(ref float tf, ref MovementDirection curyDirection, CurvySpline spline, float distance)
		{
		}

		[Token(Token = "0x6000A18")]
		[Address(RVA = "0x201A6C0", Offset = "0x201A6C0", VA = "0x201A6C0", Slot = "16")]
		protected override void InitializedApplyDeltaTime(float deltaTime)
		{
		}

		[Token(Token = "0x6000A19")]
		[Address(RVA = "0x201A804", Offset = "0x201A804", VA = "0x201A804", Slot = "17")]
		protected override void ComputeTargetPositionAndRotation(out Vector3 targetPosition, out Vector3 targetUp, out Vector3 targetForward)
		{
		}

		[Token(Token = "0x6000A1A")]
		[Address(RVA = "0x201AB48", Offset = "0x201AB48", VA = "0x201AB48")]
		private static float MovementCompatibleGetPosition(SplineController controller, CurvyPositionMode positionMode, out CurvySplineSegment controlPoint, out bool isOnControlPoint, float clampedPosition)
		{
			return default(float);
		}

		[Token(Token = "0x6000A1B")]
		[Address(RVA = "0x201B088", Offset = "0x201B088", VA = "0x201B088")]
		private static void MovementCompatibleSetPosition(SplineController controller, CurvyPositionMode positionMode, float specialClampedPosition)
		{
		}

		[Token(Token = "0x6000A1C")]
		[Address(RVA = "0x2019C0C", Offset = "0x2019C0C", VA = "0x2019C0C")]
		private void EventAwareMove(float distance)
		{
		}

		[Token(Token = "0x6000A1D")]
		[Address(RVA = "0x201B360", Offset = "0x201B360", VA = "0x201B360")]
		private void HandleReachingNewControlPoint(CurvySplineSegment controlPoint, float controlPointPosition, CurvyPositionMode positionMode, float currentDelta, ref bool cancelMovement, out CurvySplineSegment postEventsControlPoint, out bool postEventsIsControllerOnControlPoint, out float postEventsControlPointPosition)
		{
		}

		[Token(Token = "0x6000A1E")]
		[Address(RVA = "0x201B9A0", Offset = "0x201B9A0", VA = "0x201B9A0")]
		private void InvokeEventHandler(CurvySplineMoveEvent @event, CurvySplineMoveEventArgs eventArgument, CurvyPositionMode positionMode, ref CurvySplineSegment postEventsControlPoint, ref bool postEventsIsControllerOnControlPoint, ref float postEventsControlPointPosition)
		{
		}

		[Token(Token = "0x6000A1F")]
		[Address(RVA = "0x201B750", Offset = "0x201B750", VA = "0x201B750")]
		private CurvySplineSegment HandleRandomConnectionBehavior(CurvySplineSegment currentControlPoint, MovementDirection currentDirection, out MovementDirection newDirection, ReadOnlyCollection<CurvySplineSegment> connectedControlPoints)
		{
			return null;
		}

		[Token(Token = "0x6000A20")]
		[Address(RVA = "0x2019014", Offset = "0x2019014", VA = "0x2019014")]
		private static MovementDirection GetPostConnectionDirection(CurvySplineSegment connectedControlPoint, MovementDirection currentDirection, bool directionChangeAllowed)
		{
			return default(MovementDirection);
		}

		[Token(Token = "0x6000A21")]
		[Address(RVA = "0x201B660", Offset = "0x201B660", VA = "0x201B660")]
		private CurvySplineSegment HandleFollowUpConnectionBehavior(CurvySplineSegment currentControlPoint, MovementDirection currentDirection, out MovementDirection newDirection)
		{
			return null;
		}

		[Token(Token = "0x6000A22")]
		[Address(RVA = "0x201BA88", Offset = "0x201BA88", VA = "0x201BA88")]
		private static MovementDirection HeadingToDirection(ConnectionHeadingEnum heading, CurvySplineSegment controlPoint, MovementDirection currentDirection)
		{
			return default(MovementDirection);
		}

		[Token(Token = "0x6000A23")]
		[Address(RVA = "0x201B2BC", Offset = "0x201B2BC", VA = "0x201B2BC")]
		private static float GetControlPointPosition(CurvySplineSegment controlPoint, CurvyPositionMode positionMode)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000122")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xFC6C94", Offset = "0xFC6C94")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xFC6C94", Offset = "0xFC6C94")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC6C94", Offset = "0xFC6C94")]
	public class UITextSplineController : SplineController, IMeshModifier
	{
		[Token(Token = "0x200022B")]
		protected interface IGlyph
		{
			[Token(Token = "0x17000355")]
			Vector3 Center
			{
				[Token(Token = "0x6001004")]
				get;
			}

			[Token(Token = "0x6001005")]
			void Transpose(Vector3 v);

			[Token(Token = "0x6001006")]
			void Rotate(Quaternion rotation);
		}

		[Token(Token = "0x200022C")]
		protected class GlyphQuad : IGlyph
		{
			[Token(Token = "0x4000B47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public UIVertex[] V;

			[Token(Token = "0x4000B48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Rect Rect;

			[Token(Token = "0x17000356")]
			public Vector3 Center
			{
				[Token(Token = "0x6001007")]
				[Address(RVA = "0x201D57C", Offset = "0x201D57C", VA = "0x201D57C", Slot = "4")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x6001008")]
			[Address(RVA = "0x201D604", Offset = "0x201D604", VA = "0x201D604")]
			public void Load(List<UIVertex> verts, int index)
			{
			}

			[Token(Token = "0x6001009")]
			[Address(RVA = "0x201CA28", Offset = "0x201CA28", VA = "0x201CA28")]
			public void LoadTris(List<UIVertex> verts, int index)
			{
			}

			[Token(Token = "0x600100A")]
			[Address(RVA = "0x201D820", Offset = "0x201D820", VA = "0x201D820")]
			public void calcRect()
			{
			}

			[Token(Token = "0x600100B")]
			[Address(RVA = "0x201D894", Offset = "0x201D894", VA = "0x201D894")]
			public void Save(List<UIVertex> verts, int index)
			{
			}

			[Token(Token = "0x600100C")]
			[Address(RVA = "0x201CC44", Offset = "0x201CC44", VA = "0x201CC44")]
			public void Save(VertexHelper vh)
			{
			}

			[Token(Token = "0x600100D")]
			[Address(RVA = "0x201DA50", Offset = "0x201DA50", VA = "0x201DA50", Slot = "5")]
			public void Transpose(Vector3 v)
			{
			}

			[Token(Token = "0x600100E")]
			[Address(RVA = "0x201DB58", Offset = "0x201DB58", VA = "0x201DB58", Slot = "6")]
			public void Rotate(Quaternion rotation)
			{
			}

			[Token(Token = "0x600100F")]
			[Address(RVA = "0x201C9BC", Offset = "0x201C9BC", VA = "0x201C9BC")]
			public GlyphQuad()
			{
			}
		}

		[Token(Token = "0x200022D")]
		protected class GlyphPlain : IGlyph
		{
			[Token(Token = "0x4000B49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3[] V;

			[Token(Token = "0x4000B4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Rect Rect;

			[Token(Token = "0x17000357")]
			public Vector3 Center
			{
				[Token(Token = "0x6001010")]
				[Address(RVA = "0x201D284", Offset = "0x201D284", VA = "0x201D284", Slot = "4")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x6001011")]
			[Address(RVA = "0x201BF78", Offset = "0x201BF78", VA = "0x201BF78")]
			public void Load(ref Vector3[] verts, int index)
			{
			}

			[Token(Token = "0x6001012")]
			[Address(RVA = "0x201D30C", Offset = "0x201D30C", VA = "0x201D30C")]
			public void calcRect()
			{
			}

			[Token(Token = "0x6001013")]
			[Address(RVA = "0x201C718", Offset = "0x201C718", VA = "0x201C718")]
			public void Save(ref Vector3[] verts, int index)
			{
			}

			[Token(Token = "0x6001014")]
			[Address(RVA = "0x201D380", Offset = "0x201D380", VA = "0x201D380", Slot = "5")]
			public void Transpose(Vector3 v)
			{
			}

			[Token(Token = "0x6001015")]
			[Address(RVA = "0x201D488", Offset = "0x201D488", VA = "0x201D488", Slot = "6")]
			public void Rotate(Quaternion rotation)
			{
			}

			[Token(Token = "0x6001016")]
			[Address(RVA = "0x201BF0C", Offset = "0x201BF0C", VA = "0x201BF0C")]
			public GlyphPlain()
			{
			}
		}

		[Token(Token = "0x400068E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0xFCD244", Offset = "0xFCD244")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFCD244", Offset = "0xFCD244")]
		[SerializeField]
		private bool staticOrientation;

		[Token(Token = "0x400068F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Graphic m_Graphic;

		[Token(Token = "0x4000690")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private RectTransform mRect;

		[Token(Token = "0x4000691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Text mText;

		[Token(Token = "0x170001CD")]
		public bool StaticOrientation
		{
			[Token(Token = "0x6000A25")]
			[Address(RVA = "0x201BB50", Offset = "0x201BB50", VA = "0x201BB50")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A26")]
			[Address(RVA = "0x201BB58", Offset = "0x201BB58", VA = "0x201BB58")]
			set
			{
			}
		}

		[Token(Token = "0x170001CE")]
		protected override bool ShowOrientationSection
		{
			[Token(Token = "0x6000A27")]
			[Address(RVA = "0x201BB64", Offset = "0x201BB64", VA = "0x201BB64", Slot = "26")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001CF")]
		protected override bool ShowOffsetSection
		{
			[Token(Token = "0x6000A28")]
			[Address(RVA = "0x201BB6C", Offset = "0x201BB6C", VA = "0x201BB6C", Slot = "27")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001D0")]
		protected Text Text
		{
			[Token(Token = "0x6000A29")]
			[Address(RVA = "0x201BB74", Offset = "0x201BB74", VA = "0x201BB74")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D1")]
		protected RectTransform Rect
		{
			[Token(Token = "0x6000A2A")]
			[Address(RVA = "0x201BC20", Offset = "0x201BC20", VA = "0x201BC20")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D2")]
		protected Graphic graphic
		{
			[Token(Token = "0x6000A2B")]
			[Address(RVA = "0x201BCCC", Offset = "0x201BCCC", VA = "0x201BCCC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D3")]
		public override CurvySpline Spline
		{
			[Token(Token = "0x6000A32")]
			[Address(RVA = "0x201CDD8", Offset = "0x201CDD8", VA = "0x201CDD8", Slot = "38")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A33")]
			[Address(RVA = "0x201CDE0", Offset = "0x201CDE0", VA = "0x201CDE0", Slot = "39")]
			set
			{
			}
		}

		[Token(Token = "0x6000A2C")]
		[Address(RVA = "0x201BD78", Offset = "0x201BD78", VA = "0x201BD78", Slot = "16")]
		protected override void InitializedApplyDeltaTime(float deltaTime)
		{
		}

		[Token(Token = "0x6000A2D")]
		[Address(RVA = "0x201BDB4", Offset = "0x201BDB4", VA = "0x201BDB4", Slot = "41")]
		public void ModifyMesh(Mesh verts)
		{
		}

		[Token(Token = "0x6000A2E")]
		[Address(RVA = "0x201C850", Offset = "0x201C850", VA = "0x201C850", Slot = "42")]
		public void ModifyMesh(VertexHelper vertexHelper)
		{
		}

		[Token(Token = "0x6000A2F")]
		[Address(RVA = "0x201C0B0", Offset = "0x201C0B0", VA = "0x201C0B0")]
		private void UpdateGlyph(IGlyph glyph)
		{
		}

		[Token(Token = "0x6000A30")]
		[Address(RVA = "0x201CC68", Offset = "0x201CC68", VA = "0x201CC68", Slot = "8")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000A31")]
		[Address(RVA = "0x201CD20", Offset = "0x201CD20", VA = "0x201CD20", Slot = "10")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6000A34")]
		[Address(RVA = "0x201D0CC", Offset = "0x201D0CC", VA = "0x201D0CC", Slot = "20")]
		protected override void BindEvents()
		{
		}

		[Token(Token = "0x6000A35")]
		[Address(RVA = "0x201D0F4", Offset = "0x201D0F4", VA = "0x201D0F4", Slot = "21")]
		protected override void UnbindEvents()
		{
		}

		[Token(Token = "0x6000A36")]
		[Address(RVA = "0x201CFB4", Offset = "0x201CFB4", VA = "0x201CFB4")]
		private void BindSplineRelatedEvents()
		{
		}

		[Token(Token = "0x6000A37")]
		[Address(RVA = "0x201CEA4", Offset = "0x201CEA4", VA = "0x201CEA4")]
		private void UnbindSplineRelatedEvents()
		{
		}

		[Token(Token = "0x6000A38")]
		[Address(RVA = "0x201D11C", Offset = "0x201D11C", VA = "0x201D11C")]
		private void OnSplineRefreshed(CurvySplineEventArgs e)
		{
		}

		[Token(Token = "0x6000A39")]
		[Address(RVA = "0x201D280", Offset = "0x201D280", VA = "0x201D280")]
		public UITextSplineController()
		{
		}
	}
	[Token(Token = "0x2000123")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xFC6D40", Offset = "0xFC6D40")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC6D40", Offset = "0xFC6D40")]
	public class VolumeController : CurvyController
	{
		[Token(Token = "0x4000692")]
		private const float CrossPositionRangeMin = -0.5f;

		[Token(Token = "0x4000693")]
		private const float CrossPositionRangeMax = 0.5f;

		[Token(Token = "0x4000694")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0xFCD2C0", Offset = "0xFCD2C0")]
		[AttributeAttribute(Name = "CGDataReferenceSelectorAttribute", RVA = "0xFCD2C0", Offset = "0xFCD2C0")]
		[SerializeField]
		private CGDataReference m_Volume;

		[Token(Token = "0x4000695")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0xFCD380", Offset = "0xFCD380")]
		[SerializeField]
		[FloatRegion]
		private FloatRegion m_CrossRange;

		[Token(Token = "0x4000696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0xFCD44C", Offset = "0xFCD44C")]
		[SerializeField]
		private float crossRelativePosition;

		[Token(Token = "0x4000697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private CurvyClamping m_CrossClamping;

		[Token(Token = "0x4000698")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[SerializeField]
		[HideInInspector]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFCD4F4", Offset = "0xFCD4F4")]
		private float m_CrossInitialPosition;

		[Token(Token = "0x170001D4")]
		public CGDataReference Volume
		{
			[Token(Token = "0x6000A3A")]
			[Address(RVA = "0x201DC4C", Offset = "0x201DC4C", VA = "0x201DC4C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A3B")]
			[Address(RVA = "0x201DC54", Offset = "0x201DC54", VA = "0x201DC54")]
			set
			{
			}
		}

		[Token(Token = "0x170001D5")]
		public CGVolume VolumeData
		{
			[Token(Token = "0x6000A3C")]
			[Address(RVA = "0x201DC5C", Offset = "0x201DC5C", VA = "0x201DC5C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D6")]
		public float CrossFrom
		{
			[Token(Token = "0x6000A3D")]
			[Address(RVA = "0x201DCD4", Offset = "0x201DCD4", VA = "0x201DCD4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A3E")]
			[Address(RVA = "0x201DCDC", Offset = "0x201DCDC", VA = "0x201DCDC")]
			set
			{
			}
		}

		[Token(Token = "0x170001D7")]
		public float CrossTo
		{
			[Token(Token = "0x6000A3F")]
			[Address(RVA = "0x201DD60", Offset = "0x201DD60", VA = "0x201DD60")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A40")]
			[Address(RVA = "0x201DD68", Offset = "0x201DD68", VA = "0x201DD68")]
			set
			{
			}
		}

		[Token(Token = "0x170001D8")]
		public float CrossLength
		{
			[Token(Token = "0x6000A41")]
			[Address(RVA = "0x201DDF0", Offset = "0x201DDF0", VA = "0x201DDF0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001D9")]
		public CurvyClamping CrossClamping
		{
			[Token(Token = "0x6000A42")]
			[Address(RVA = "0x201DDFC", Offset = "0x201DDFC", VA = "0x201DDFC")]
			get
			{
				return default(CurvyClamping);
			}
			[Token(Token = "0x6000A43")]
			[Address(RVA = "0x201DE04", Offset = "0x201DE04", VA = "0x201DE04")]
			set
			{
			}
		}

		[Token(Token = "0x170001DA")]
		public float CrossRelativePosition
		{
			[Token(Token = "0x6000A44")]
			[Address(RVA = "0x201DE0C", Offset = "0x201DE0C", VA = "0x201DE0C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A45")]
			[Address(RVA = "0x201DE38", Offset = "0x201DE38", VA = "0x201DE38")]
			set
			{
			}
		}

		[Token(Token = "0x170001DB")]
		public override float Length
		{
			[Token(Token = "0x6000A46")]
			[Address(RVA = "0x201DE68", Offset = "0x201DE68", VA = "0x201DE68", Slot = "28")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001DC")]
		public override bool IsReady
		{
			[Token(Token = "0x6000A49")]
			[Address(RVA = "0x201DF90", Offset = "0x201DF90", VA = "0x201DF90", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001DD")]
		private RegionOptions<float> CrossRangeOptions
		{
			[Token(Token = "0x6000A52")]
			[Address(RVA = "0x201E4F0", Offset = "0x201E4F0", VA = "0x201E4F0")]
			get
			{
				return default(RegionOptions<float>);
			}
		}

		[Token(Token = "0x170001DE")]
		private float MinCrossRelativePosition
		{
			[Token(Token = "0x6000A53")]
			[Address(RVA = "0x201E548", Offset = "0x201E548", VA = "0x201E548")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001DF")]
		private float MaxCrossRelativePosition
		{
			[Token(Token = "0x6000A54")]
			[Address(RVA = "0x201E550", Offset = "0x201E550", VA = "0x201E550")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000A47")]
		[Address(RVA = "0x201DEA8", Offset = "0x201DEA8", VA = "0x201DEA8")]
		public float CrossRelativeToAbsolute(float relativeDistance)
		{
			return default(float);
		}

		[Token(Token = "0x6000A48")]
		[Address(RVA = "0x201DF1C", Offset = "0x201DF1C", VA = "0x201DF1C")]
		public float CrossAbsoluteToRelative(float worldUnitDistance)
		{
			return default(float);
		}

		[Token(Token = "0x6000A4A")]
		[Address(RVA = "0x201DFE0", Offset = "0x201DFE0", VA = "0x201DFE0", Slot = "32")]
		protected override float RelativeToAbsolute(float relativeDistance)
		{
			return default(float);
		}

		[Token(Token = "0x6000A4B")]
		[Address(RVA = "0x201E03C", Offset = "0x201E03C", VA = "0x201E03C", Slot = "31")]
		protected override float AbsoluteToRelative(float worldUnitDistance)
		{
			return default(float);
		}

		[Token(Token = "0x6000A4C")]
		[Address(RVA = "0x201E098", Offset = "0x201E098", VA = "0x201E098", Slot = "33")]
		protected override Vector3 GetInterpolatedSourcePosition(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A4D")]
		[Address(RVA = "0x201E130", Offset = "0x201E130", VA = "0x201E130", Slot = "34")]
		protected override void GetInterpolatedSourcePosition(float tf, out Vector3 interpolatedPosition, out Vector3 tangent, out Vector3 up)
		{
		}

		[Token(Token = "0x6000A4E")]
		[Address(RVA = "0x201E234", Offset = "0x201E234", VA = "0x201E234", Slot = "36")]
		protected override Vector3 GetTangent(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A4F")]
		[Address(RVA = "0x201E2CC", Offset = "0x201E2CC", VA = "0x201E2CC", Slot = "35")]
		protected override Vector3 GetOrientation(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A50")]
		[Address(RVA = "0x201E364", Offset = "0x201E364", VA = "0x201E364", Slot = "29")]
		protected override void Advance(float speed, float deltaTime)
		{
		}

		[Token(Token = "0x6000A51")]
		[Address(RVA = "0x201E3E0", Offset = "0x201E3E0", VA = "0x201E3E0", Slot = "30")]
		protected override void SimulateAdvance(ref float tf, ref MovementDirection curyDirection, float speed, float deltaTime)
		{
		}

		[Token(Token = "0x6000A55")]
		[Address(RVA = "0x201DE24", Offset = "0x201DE24", VA = "0x201DE24")]
		private float GetClampedCrossPosition(float position)
		{
			return default(float);
		}

		[Token(Token = "0x6000A56")]
		[Address(RVA = "0x201E558", Offset = "0x201E558", VA = "0x201E558", Slot = "37")]
		public override void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x6000A57")]
		[Address(RVA = "0x201E5B0", Offset = "0x201E5B0", VA = "0x201E5B0")]
		public VolumeController()
		{
		}
	}
}
namespace FluffyUnderware.Curvy.Components
{
	[Token(Token = "0x2000124")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC6DA4", Offset = "0xFC6DA4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xFC6DA4", Offset = "0xFC6DA4")]
	public class CurvyGLRenderer : MonoBehaviour
	{
		[Token(Token = "0x4000699")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[ArrayEx]
		public List<GLSlotData> Splines;

		[Token(Token = "0x400069A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material lineMaterial;

		[Token(Token = "0x6000A58")]
		[Address(RVA = "0x1DC013C", Offset = "0x1DC013C", VA = "0x1DC013C")]
		private void CreateLineMaterial()
		{
		}

		[Token(Token = "0x6000A59")]
		[Address(RVA = "0x1DC0248", Offset = "0x1DC0248", VA = "0x1DC0248")]
		private void OnPostRender()
		{
		}

		[Token(Token = "0x6000A5A")]
		[Address(RVA = "0x1DC041C", Offset = "0x1DC041C", VA = "0x1DC041C")]
		private void sanitize()
		{
		}

		[Token(Token = "0x6000A5B")]
		[Address(RVA = "0x1DC0878", Offset = "0x1DC0878", VA = "0x1DC0878")]
		private void OnSplineRefresh(CurvySplineEventArgs e)
		{
		}

		[Token(Token = "0x6000A5C")]
		[Address(RVA = "0x1DC09CC", Offset = "0x1DC09CC", VA = "0x1DC09CC")]
		private GLSlotData getSlot(CurvySpline spline)
		{
			return null;
		}

		[Token(Token = "0x6000A5D")]
		[Address(RVA = "0x1DC0B48", Offset = "0x1DC0B48", VA = "0x1DC0B48")]
		public void Add(CurvySpline spline)
		{
		}

		[Token(Token = "0x6000A5E")]
		[Address(RVA = "0x1DC0CD0", Offset = "0x1DC0CD0", VA = "0x1DC0CD0")]
		public void Remove(CurvySpline spline)
		{
		}

		[Token(Token = "0x6000A5F")]
		[Address(RVA = "0x1DC0DD4", Offset = "0x1DC0DD4", VA = "0x1DC0DD4")]
		public CurvyGLRenderer()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000125")]
	public class GLSlotData
	{
		[Token(Token = "0x400069B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public CurvySpline Spline;

		[Token(Token = "0x400069C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color LineColor;

		[Token(Token = "0x400069D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<Vector3[]> VertexData;

		[Token(Token = "0x6000A60")]
		[Address(RVA = "0x1DC054C", Offset = "0x1DC054C", VA = "0x1DC054C")]
		public void GetVertexData()
		{
		}

		[Token(Token = "0x6000A61")]
		[Address(RVA = "0x1DC0690", Offset = "0x1DC0690", VA = "0x1DC0690")]
		public void Render(Material mat)
		{
		}

		[Token(Token = "0x6000A62")]
		[Address(RVA = "0x1DC0C24", Offset = "0x1DC0C24", VA = "0x1DC0C24")]
		public GLSlotData()
		{
		}
	}
	[Token(Token = "0x2000126")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xFC6E04", Offset = "0xFC6E04")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xFC6E04", Offset = "0xFC6E04")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC6E04", Offset = "0xFC6E04")]
	public class CurvyLineRenderer : MonoBehaviour
	{
		[Token(Token = "0x400069E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CurvySpline m_Spline;

		[Token(Token = "0x400069F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private LineRenderer mRenderer;

		[Token(Token = "0x170001E0")]
		public CurvySpline Spline
		{
			[Token(Token = "0x6000A63")]
			[Address(RVA = "0x1DC0E50", Offset = "0x1DC0E50", VA = "0x1DC0E50")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A64")]
			[Address(RVA = "0x1DC0E58", Offset = "0x1DC0E58", VA = "0x1DC0E58")]
			set
			{
			}
		}

		[Token(Token = "0x6000A65")]
		[Address(RVA = "0x1DC133C", Offset = "0x1DC133C", VA = "0x1DC133C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A66")]
		[Address(RVA = "0x1DC147C", Offset = "0x1DC147C", VA = "0x1DC147C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000A67")]
		[Address(RVA = "0x1DC14E4", Offset = "0x1DC14E4", VA = "0x1DC14E4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000A68")]
		[Address(RVA = "0x1DC14E8", Offset = "0x1DC14E8", VA = "0x1DC14E8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A69")]
		[Address(RVA = "0x1DC14EC", Offset = "0x1DC14EC", VA = "0x1DC14EC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A6A")]
		[Address(RVA = "0x1DC14F0", Offset = "0x1DC14F0", VA = "0x1DC14F0")]
		private void EnforceWorldSpaceUsage()
		{
		}

		[Token(Token = "0x6000A6B")]
		[Address(RVA = "0x1DC11FC", Offset = "0x1DC11FC", VA = "0x1DC11FC")]
		public void Refresh()
		{
		}

		[Token(Token = "0x6000A6C")]
		[Address(RVA = "0x1DC1540", Offset = "0x1DC1540", VA = "0x1DC1540")]
		private void OnSplineRefresh(CurvySplineEventArgs e)
		{
		}

		[Token(Token = "0x6000A6D")]
		[Address(RVA = "0x1DC1544", Offset = "0x1DC1544", VA = "0x1DC1544")]
		private void OnSplineCoordinatesChanged(CurvySpline spline)
		{
		}

		[Token(Token = "0x6000A6E")]
		[Address(RVA = "0x1DC1088", Offset = "0x1DC1088", VA = "0x1DC1088")]
		private void BindEvents()
		{
		}

		[Token(Token = "0x6000A6F")]
		[Address(RVA = "0x1DC0F14", Offset = "0x1DC0F14", VA = "0x1DC0F14")]
		private void UnbindEvents()
		{
		}

		[Token(Token = "0x6000A70")]
		[Address(RVA = "0x1DC1548", Offset = "0x1DC1548", VA = "0x1DC1548")]
		public CurvyLineRenderer()
		{
		}
	}
}
namespace FluffyUnderware.Curvy.Shapes
{
	[Token(Token = "0x2000127")]
	[AttributeAttribute(Name = "CurvyShapeInfo", RVA = "0xFC6EC0", Offset = "0xFC6EC0")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xFC6EC0", Offset = "0xFC6EC0")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xFC6EC0", Offset = "0xFC6EC0")]
	public class CSCircle : CurvyShape2D
	{
		[Token(Token = "0x40006A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Positive]
		[SerializeField]
		private int m_Count;

		[Token(Token = "0x40006A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private float m_Radius;

		[Token(Token = "0x170001E1")]
		public int Count
		{
			[Token(Token = "0x6000A71")]
			[Address(RVA = "0x1DF64D0", Offset = "0x1DF64D0", VA = "0x1DF64D0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000A72")]
			[Address(RVA = "0x1DF64D8", Offset = "0x1DF64D8", VA = "0x1DF64D8")]
			set
			{
			}
		}

		[Token(Token = "0x170001E2")]
		public float Radius
		{
			[Token(Token = "0x6000A73")]
			[Address(RVA = "0x1DF656C", Offset = "0x1DF656C", VA = "0x1DF656C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A74")]
			[Address(RVA = "0x1DF6574", Offset = "0x1DF6574", VA = "0x1DF6574")]
			set
			{
			}
		}

		[Token(Token = "0x6000A75")]
		[Address(RVA = "0x1DF6608", Offset = "0x1DF6608", VA = "0x1DF6608", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6000A76")]
		[Address(RVA = "0x1DF6640", Offset = "0x1DF6640", VA = "0x1DF6640", Slot = "6")]
		protected override void ApplyShape()
		{
		}

		[Token(Token = "0x6000A77")]
		[Address(RVA = "0x1DF67CC", Offset = "0x1DF67CC", VA = "0x1DF67CC")]
		public CSCircle()
		{
		}
	}
	[Token(Token = "0x2000128")]
	[AttributeAttribute(Name = "CurvyShapeInfo", RVA = "0xFC6F70", Offset = "0xFC6F70")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xFC6F70", Offset = "0xFC6F70")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xFC6F70", Offset = "0xFC6F70")]
	public class CSPie : CSCircle
	{
		[Token(Token = "0x200022E")]
		public enum EatModeEnum
		{
			[Token(Token = "0x4000B4C")]
			Left,
			[Token(Token = "0x4000B4D")]
			Right,
			[Token(Token = "0x4000B4E")]
			Center
		}

		[Token(Token = "0x40006A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xFCD5FC", Offset = "0xFCD5FC")]
		[SerializeField]
		private float m_Roundness;

		[Token(Token = "0x40006A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0xFCD63C", Offset = "0xFCD63C")]
		private int m_Empty;

		[Token(Token = "0x40006A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFCD6BC", Offset = "0xFCD6BC")]
		[SerializeField]
		private EatModeEnum m_Eat;

		[Token(Token = "0x170001E3")]
		public float Roundness
		{
			[Token(Token = "0x6000A78")]
			[Address(RVA = "0x1DF67E0", Offset = "0x1DF67E0", VA = "0x1DF67E0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A79")]
			[Address(RVA = "0x1DF67E8", Offset = "0x1DF67E8", VA = "0x1DF67E8")]
			set
			{
			}
		}

		[Token(Token = "0x170001E4")]
		public int Empty
		{
			[Token(Token = "0x6000A7A")]
			[Address(RVA = "0x1DF6878", Offset = "0x1DF6878", VA = "0x1DF6878")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000A7B")]
			[Address(RVA = "0x1DF6880", Offset = "0x1DF6880", VA = "0x1DF6880")]
			set
			{
			}
		}

		[Token(Token = "0x170001E5")]
		private int maxEmpty
		{
			[Token(Token = "0x6000A7C")]
			[Address(RVA = "0x1DF691C", Offset = "0x1DF691C", VA = "0x1DF691C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001E6")]
		public EatModeEnum Eat
		{
			[Token(Token = "0x6000A7D")]
			[Address(RVA = "0x1DF6924", Offset = "0x1DF6924", VA = "0x1DF6924")]
			get
			{
				return default(EatModeEnum);
			}
			[Token(Token = "0x6000A7E")]
			[Address(RVA = "0x1DF692C", Offset = "0x1DF692C", VA = "0x1DF692C")]
			set
			{
			}
		}

		[Token(Token = "0x6000A7F")]
		[Address(RVA = "0x1DF6948", Offset = "0x1DF6948", VA = "0x1DF6948", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6000A80")]
		[Address(RVA = "0x1DF6998", Offset = "0x1DF6998", VA = "0x1DF6998")]
		private Vector3 cpPosition(int i, int empty, float d)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A81")]
		[Address(RVA = "0x1DF6AE8", Offset = "0x1DF6AE8", VA = "0x1DF6AE8", Slot = "6")]
		protected override void ApplyShape()
		{
		}

		[Token(Token = "0x6000A82")]
		[Address(RVA = "0x1DF723C", Offset = "0x1DF723C", VA = "0x1DF723C")]
		public CSPie()
		{
		}
	}
	[Token(Token = "0x2000129")]
	[AttributeAttribute(Name = "CurvyShapeInfo", RVA = "0xFC7020", Offset = "0xFC7020")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xFC7020", Offset = "0xFC7020")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xFC7020", Offset = "0xFC7020")]
	public class CSRectangle : CurvyShape2D
	{
		[Token(Token = "0x40006A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Positive]
		[SerializeField]
		private float m_Width;

		[Token(Token = "0x40006A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Positive]
		[SerializeField]
		private float m_Height;

		[Token(Token = "0x170001E7")]
		public float Width
		{
			[Token(Token = "0x6000A83")]
			[Address(RVA = "0x1DF7258", Offset = "0x1DF7258", VA = "0x1DF7258")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A84")]
			[Address(RVA = "0x1DF7260", Offset = "0x1DF7260", VA = "0x1DF7260")]
			set
			{
			}
		}

		[Token(Token = "0x170001E8")]
		public float Height
		{
			[Token(Token = "0x6000A85")]
			[Address(RVA = "0x1DF72F4", Offset = "0x1DF72F4", VA = "0x1DF72F4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A86")]
			[Address(RVA = "0x1DF72FC", Offset = "0x1DF72FC", VA = "0x1DF72FC")]
			set
			{
			}
		}

		[Token(Token = "0x6000A87")]
		[Address(RVA = "0x1DF7390", Offset = "0x1DF7390", VA = "0x1DF7390", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6000A88")]
		[Address(RVA = "0x1DF73D4", Offset = "0x1DF73D4", VA = "0x1DF73D4", Slot = "6")]
		protected override void ApplyShape()
		{
		}

		[Token(Token = "0x6000A89")]
		[Address(RVA = "0x1DF75EC", Offset = "0x1DF75EC", VA = "0x1DF75EC")]
		public CSRectangle()
		{
		}
	}
	[Token(Token = "0x200012A")]
	[AttributeAttribute(Name = "CurvyShapeInfo", RVA = "0xFC70D0", Offset = "0xFC70D0")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xFC70D0", Offset = "0xFC70D0")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xFC70D0", Offset = "0xFC70D0")]
	public class CSRoundedRectangle : CurvyShape2D
	{
		[Token(Token = "0x40006A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Positive]
		[SerializeField]
		private float m_Width;

		[Token(Token = "0x40006A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Positive]
		[SerializeField]
		private float m_Height;

		[Token(Token = "0x40006A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xFCD7F4", Offset = "0xFCD7F4")]
		[SerializeField]
		private float m_Roundness;

		[Token(Token = "0x170001E9")]
		public float Width
		{
			[Token(Token = "0x6000A8A")]
			[Address(RVA = "0x1DF75FC", Offset = "0x1DF75FC", VA = "0x1DF75FC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A8B")]
			[Address(RVA = "0x1DF7604", Offset = "0x1DF7604", VA = "0x1DF7604")]
			set
			{
			}
		}

		[Token(Token = "0x170001EA")]
		public float Height
		{
			[Token(Token = "0x6000A8C")]
			[Address(RVA = "0x1DF7698", Offset = "0x1DF7698", VA = "0x1DF7698")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A8D")]
			[Address(RVA = "0x1DF76A0", Offset = "0x1DF76A0", VA = "0x1DF76A0")]
			set
			{
			}
		}

		[Token(Token = "0x170001EB")]
		public float Roundness
		{
			[Token(Token = "0x6000A8E")]
			[Address(RVA = "0x1DF7734", Offset = "0x1DF7734", VA = "0x1DF7734")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A8F")]
			[Address(RVA = "0x1DF773C", Offset = "0x1DF773C", VA = "0x1DF773C")]
			set
			{
			}
		}

		[Token(Token = "0x6000A90")]
		[Address(RVA = "0x1DF77CC", Offset = "0x1DF77CC", VA = "0x1DF77CC", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6000A91")]
		[Address(RVA = "0x1DF781C", Offset = "0x1DF781C", VA = "0x1DF781C", Slot = "6")]
		protected override void ApplyShape()
		{
		}

		[Token(Token = "0x6000A92")]
		[Address(RVA = "0x1DF7FB0", Offset = "0x1DF7FB0", VA = "0x1DF7FB0")]
		public CSRoundedRectangle()
		{
		}
	}
	[Token(Token = "0x200012B")]
	[AttributeAttribute(Name = "CurvyShapeInfo", RVA = "0xFC7180", Offset = "0xFC7180")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xFC7180", Offset = "0xFC7180")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xFC7180", Offset = "0xFC7180")]
	public class CSSpiral : CurvyShape2D
	{
		[Token(Token = "0x40006AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Positive]
		[SerializeField]
		private int m_Count;

		[Token(Token = "0x40006AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Positive]
		[SerializeField]
		private float m_Circles;

		[Token(Token = "0x40006AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Positive]
		[SerializeField]
		private float m_Radius;

		[Token(Token = "0x40006AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFCD93C", Offset = "0xFCD93C")]
		[SerializeField]
		private AnimationCurve m_RadiusFactor;

		[Token(Token = "0x40006AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private AnimationCurve m_Z;

		[Token(Token = "0x170001EC")]
		public int Count
		{
			[Token(Token = "0x6000A93")]
			[Address(RVA = "0x1DF7FC8", Offset = "0x1DF7FC8", VA = "0x1DF7FC8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000A94")]
			[Address(RVA = "0x1DF7FD0", Offset = "0x1DF7FD0", VA = "0x1DF7FD0")]
			set
			{
			}
		}

		[Token(Token = "0x170001ED")]
		public float Circles
		{
			[Token(Token = "0x6000A95")]
			[Address(RVA = "0x1DF8064", Offset = "0x1DF8064", VA = "0x1DF8064")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A96")]
			[Address(RVA = "0x1DF806C", Offset = "0x1DF806C", VA = "0x1DF806C")]
			set
			{
			}
		}

		[Token(Token = "0x170001EE")]
		public float Radius
		{
			[Token(Token = "0x6000A97")]
			[Address(RVA = "0x1DF8100", Offset = "0x1DF8100", VA = "0x1DF8100")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A98")]
			[Address(RVA = "0x1DF8108", Offset = "0x1DF8108", VA = "0x1DF8108")]
			set
			{
			}
		}

		[Token(Token = "0x170001EF")]
		public AnimationCurve RadiusFactor
		{
			[Token(Token = "0x6000A99")]
			[Address(RVA = "0x1DF819C", Offset = "0x1DF819C", VA = "0x1DF819C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A9A")]
			[Address(RVA = "0x1DF81A4", Offset = "0x1DF81A4", VA = "0x1DF81A4")]
			set
			{
			}
		}

		[Token(Token = "0x170001F0")]
		public AnimationCurve Z
		{
			[Token(Token = "0x6000A9B")]
			[Address(RVA = "0x1DF81DC", Offset = "0x1DF81DC", VA = "0x1DF81DC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A9C")]
			[Address(RVA = "0x1DF81E4", Offset = "0x1DF81E4", VA = "0x1DF81E4")]
			set
			{
			}
		}

		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0x1DF821C", Offset = "0x1DF821C", VA = "0x1DF821C", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0x1DF82E4", Offset = "0x1DF82E4", VA = "0x1DF82E4", Slot = "6")]
		protected override void ApplyShape()
		{
		}

		[Token(Token = "0x6000A9F")]
		[Address(RVA = "0x1DF84B8", Offset = "0x1DF84B8", VA = "0x1DF84B8")]
		public CSSpiral()
		{
		}
	}
	[Token(Token = "0x200012C")]
	[AttributeAttribute(Name = "CurvyShapeInfo", RVA = "0xFC7230", Offset = "0xFC7230")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xFC7230", Offset = "0xFC7230")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xFC7230", Offset = "0xFC7230")]
	public class CSStar : CurvyShape2D
	{
		[Token(Token = "0x40006AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		[Positive]
		private int m_Sides;

		[Token(Token = "0x40006B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[Positive]
		private float m_OuterRadius;

		[Token(Token = "0x40006B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0xFCDA40", Offset = "0xFCDA40")]
		private float m_OuterRoundness;

		[Token(Token = "0x40006B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[Positive]
		private float m_InnerRadius;

		[Token(Token = "0x40006B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0xFCDAE8", Offset = "0xFCDAE8")]
		private float m_InnerRoundness;

		[Token(Token = "0x170001F1")]
		public int Sides
		{
			[Token(Token = "0x6000AA0")]
			[Address(RVA = "0x1DF854C", Offset = "0x1DF854C", VA = "0x1DF854C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000AA1")]
			[Address(RVA = "0x1DF8554", Offset = "0x1DF8554", VA = "0x1DF8554")]
			set
			{
			}
		}

		[Token(Token = "0x170001F2")]
		public float OuterRadius
		{
			[Token(Token = "0x6000AA2")]
			[Address(RVA = "0x1DF85E8", Offset = "0x1DF85E8", VA = "0x1DF85E8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000AA3")]
			[Address(RVA = "0x1DF85F0", Offset = "0x1DF85F0", VA = "0x1DF85F0")]
			set
			{
			}
		}

		[Token(Token = "0x170001F3")]
		public float OuterRoundness
		{
			[Token(Token = "0x6000AA4")]
			[Address(RVA = "0x1DF8688", Offset = "0x1DF8688", VA = "0x1DF8688")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000AA5")]
			[Address(RVA = "0x1DF8690", Offset = "0x1DF8690", VA = "0x1DF8690")]
			set
			{
			}
		}

		[Token(Token = "0x170001F4")]
		public float InnerRadius
		{
			[Token(Token = "0x6000AA6")]
			[Address(RVA = "0x1DF8724", Offset = "0x1DF8724", VA = "0x1DF8724")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000AA7")]
			[Address(RVA = "0x1DF872C", Offset = "0x1DF872C", VA = "0x1DF872C")]
			set
			{
			}
		}

		[Token(Token = "0x170001F5")]
		public float InnerRoundness
		{
			[Token(Token = "0x6000AA8")]
			[Address(RVA = "0x1DF87C0", Offset = "0x1DF87C0", VA = "0x1DF87C0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000AA9")]
			[Address(RVA = "0x1DF87C8", Offset = "0x1DF87C8", VA = "0x1DF87C8")]
			set
			{
			}
		}

		[Token(Token = "0x6000AAA")]
		[Address(RVA = "0x1DF885C", Offset = "0x1DF885C", VA = "0x1DF885C", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6000AAB")]
		[Address(RVA = "0x1DF88B8", Offset = "0x1DF88B8", VA = "0x1DF88B8", Slot = "6")]
		protected override void ApplyShape()
		{
		}

		[Token(Token = "0x6000AAC")]
		[Address(RVA = "0x1DF8B44", Offset = "0x1DF8B44", VA = "0x1DF8B44")]
		public CSStar()
		{
		}
	}
}
namespace FluffyUnderware.Curvy.Utils
{
	[Token(Token = "0x200012D")]
	public static class OptimizedOperators
	{
		[Token(Token = "0x6000AAD")]
		[Address(RVA = "0x1F026FC", Offset = "0x1F026FC", VA = "0x1F026FC")]
		public static Vector3 Addition(this Vector3 a, Vector3 b)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000AAE")]
		[Address(RVA = "0x1F0270C", Offset = "0x1F0270C", VA = "0x1F0270C")]
		public static Vector3 UnaryNegation(this Vector3 a)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000AAF")]
		[Address(RVA = "0x1F0271C", Offset = "0x1F0271C", VA = "0x1F0271C")]
		public static Vector3 Subtraction(this Vector3 a, Vector3 b)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000AB0")]
		[Address(RVA = "0x1F0272C", Offset = "0x1F0272C", VA = "0x1F0272C")]
		public static Vector3 Multiply(this Vector3 a, float d)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000AB1")]
		[Address(RVA = "0x1F0273C", Offset = "0x1F0273C", VA = "0x1F0273C")]
		public static Vector3 Multiply(this float d, Vector3 a)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000AB2")]
		[Address(RVA = "0x1F02750", Offset = "0x1F02750", VA = "0x1F02750")]
		public static Vector3 Division(this Vector3 a, float d)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000AB3")]
		[Address(RVA = "0x1F02768", Offset = "0x1F02768", VA = "0x1F02768")]
		public static Vector3 Normalize(this Vector3 value)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000AB4")]
		[Address(RVA = "0x1F0284C", Offset = "0x1F0284C", VA = "0x1F0284C")]
		public static Vector3 LerpUnclamped(this Vector3 a, Vector3 b, float t)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x200012E")]
	public static class CurvyUtility
	{
		[Token(Token = "0x6000AB5")]
		[Address(RVA = "0x1F016C8", Offset = "0x1F016C8", VA = "0x1F016C8")]
		public static float ClampTF(float tf, CurvyClamping clamping)
		{
			return default(float);
		}

		[Token(Token = "0x6000AB6")]
		[Address(RVA = "0x1F017F8", Offset = "0x1F017F8", VA = "0x1F017F8")]
		public static float ClampTF(float tf, ref int dir, CurvyClamping clamping)
		{
			return default(float);
		}

		[Token(Token = "0x6000AB7")]
		[Address(RVA = "0x1F01970", Offset = "0x1F01970", VA = "0x1F01970")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD6EBC", Offset = "0xFD6EBC")]
		public static float ClampTF(float tf, ref int dir, CurvyClamping clamping, float minTF, float maxTF)
		{
			return default(float);
		}

		[Token(Token = "0x6000AB8")]
		[Address(RVA = "0x1F01B34", Offset = "0x1F01B34", VA = "0x1F01B34")]
		public static float ClampValue(float tf, CurvyClamping clamping, float minTF, float maxTF)
		{
			return default(float);
		}

		[Token(Token = "0x6000AB9")]
		[Address(RVA = "0x1F01CC8", Offset = "0x1F01CC8", VA = "0x1F01CC8")]
		public static float ClampDistance(float distance, CurvyClamping clamping, float length)
		{
			return default(float);
		}

		[Token(Token = "0x6000ABA")]
		[Address(RVA = "0x1F01E20", Offset = "0x1F01E20", VA = "0x1F01E20")]
		public static float ClampDistance(float distance, CurvyClamping clamping, float length, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6000ABB")]
		[Address(RVA = "0x1F01FB4", Offset = "0x1F01FB4", VA = "0x1F01FB4")]
		public static float ClampDistance(float distance, ref int dir, CurvyClamping clamping, float length)
		{
			return default(float);
		}

		[Token(Token = "0x6000ABC")]
		[Address(RVA = "0x1F02158", Offset = "0x1F02158", VA = "0x1F02158")]
		public static float ClampDistance(float distance, ref int dir, CurvyClamping clamping, float length, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6000ABD")]
		[Address(RVA = "0x1F02334", Offset = "0x1F02334", VA = "0x1F02334")]
		public static Material GetDefaultMaterial()
		{
			return null;
		}

		[Token(Token = "0x6000ABE")]
		[Address(RVA = "0x1F02430", Offset = "0x1F02430", VA = "0x1F02430")]
		public static bool Approximately(this float x, float y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ABF")]
		[Address(RVA = "0x1F02548", Offset = "0x1F02548", VA = "0x1F02548")]
		public static int InterpolationSearch(float[] array, float x)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200012F")]
	public class Spline2Mesh
	{
		[Token(Token = "0x40006B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<SplinePolyLine> Lines;

		[Token(Token = "0x40006B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public WindingRule Winding;

		[Token(Token = "0x40006B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector2 UVTiling;

		[Token(Token = "0x40006B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector2 UVOffset;

		[Token(Token = "0x40006B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool SuppressUVMapping;

		[Token(Token = "0x40006B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public bool UV2;

		[Token(Token = "0x40006BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string MeshName;

		[Token(Token = "0x40006BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool VertexLineOnly;

		[Token(Token = "0x40006BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFCDB58", Offset = "0xFCDB58")]
		private string <Error>k__BackingField;

		[Token(Token = "0x40006BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Tess mTess;

		[Token(Token = "0x40006BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Mesh mMesh;

		[Token(Token = "0x170001F6")]
		public string Error
		{
			[Token(Token = "0x6000AC0")]
			[Address(RVA = "0x1F02874", Offset = "0x1F02874", VA = "0x1F02874")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6F04", Offset = "0xFD6F04")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AC1")]
			[Address(RVA = "0x1F0287C", Offset = "0x1F0287C", VA = "0x1F0287C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6F14", Offset = "0xFD6F14")]
			private set
			{
			}
		}

		[Token(Token = "0x6000AC2")]
		[Address(RVA = "0x1F02884", Offset = "0x1F02884", VA = "0x1F02884")]
		public bool Apply(out Mesh result)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC3")]
		[Address(RVA = "0x1F02DB0", Offset = "0x1F02DB0", VA = "0x1F02DB0")]
		private bool triangulate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC4")]
		[Address(RVA = "0x1F03214", Offset = "0x1F03214", VA = "0x1F03214")]
		private static bool polyLineIsValid(SplinePolyLine pl)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC5")]
		[Address(RVA = "0x1F032B0", Offset = "0x1F032B0", VA = "0x1F032B0")]
		public Spline2Mesh()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000130")]
	public class SplinePolyLine
	{
		[Token(Token = "0x200022F")]
		public enum VertexCalculation
		{
			[Token(Token = "0x4000B50")]
			ByApproximation,
			[Token(Token = "0x4000B51")]
			ByAngle
		}

		[Token(Token = "0x2000230")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC8974", Offset = "0xFC8974")]
		private sealed class <>c__DisplayClass13_0
		{
			[Token(Token = "0x4000B52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public List<Vector3> vPos;

			[Token(Token = "0x4000B53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3 curPos;

			[Token(Token = "0x4000B54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public List<Vector3> vTan;

			[Token(Token = "0x4000B55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Vector3 curTangent;

			[Token(Token = "0x4000B56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public List<float> vTF;

			[Token(Token = "0x4000B57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public float angleFromLast;

			[Token(Token = "0x4000B58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public float distAccu;

			[Token(Token = "0x4000B59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public int linearSteps;

			[Token(Token = "0x6001017")]
			[Address(RVA = "0x1F03B24", Offset = "0x1F03B24", VA = "0x1F03B24")]
			public <>c__DisplayClass13_0()
			{
			}

			[Token(Token = "0x6001018")]
			[Address(RVA = "0x1F03B2C", Offset = "0x1F03B2C", VA = "0x1F03B2C")]
			internal void <GetPolygon>b__0(float f)
			{
			}
		}

		[Token(Token = "0x40006BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ContourOrientation Orientation;

		[Token(Token = "0x40006C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CurvySpline Spline;

		[Token(Token = "0x40006C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VertexCalculation VertexMode;

		[Token(Token = "0x40006C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float Angle;

		[Token(Token = "0x40006C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float Distance;

		[Token(Token = "0x40006C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Space Space;

		[Token(Token = "0x170001F7")]
		public bool IsClosed
		{
			[Token(Token = "0x6000AC9")]
			[Address(RVA = "0x1F0347C", Offset = "0x1F0347C", VA = "0x1F0347C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000AC6")]
		[Address(RVA = "0x1F03384", Offset = "0x1F03384", VA = "0x1F03384")]
		public SplinePolyLine(CurvySpline spline)
		{
		}

		[Token(Token = "0x6000AC7")]
		[Address(RVA = "0x1F03424", Offset = "0x1F03424", VA = "0x1F03424")]
		public SplinePolyLine(CurvySpline spline, float angle, float distance)
		{
		}

		[Token(Token = "0x6000AC8")]
		[Address(RVA = "0x1F033C0", Offset = "0x1F033C0", VA = "0x1F033C0")]
		private SplinePolyLine(CurvySpline spline, VertexCalculation vertexMode, float angle, float distance, Space space = Space.World)
		{
		}

		[Token(Token = "0x6000ACA")]
		[Address(RVA = "0x1F030D8", Offset = "0x1F030D8", VA = "0x1F030D8")]
		public Vector3[] GetVertices()
		{
			return null;
		}

		[Token(Token = "0x6000ACB")]
		[Address(RVA = "0x1F03510", Offset = "0x1F03510", VA = "0x1F03510")]
		private static Vector3[] GetPolygon(CurvySpline spline, float fromTF, float toTF, float maxAngle, float minDistance, float maxDistance, out List<float> vertexTF, out List<Vector3> vertexTangents, bool includeEndPoint = true, float stepSize = 0.01f)
		{
			return null;
		}
	}
}
namespace FluffyUnderware.Curvy.Generator
{
	[Token(Token = "0x2000131")]
	public abstract class SplineInputModuleBase : CGModule
	{
		[Token(Token = "0x40006C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0xFCDB68", Offset = "0xFCDB68")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFCDB68", Offset = "0xFCDB68")]
		private bool m_UseCache;

		[Token(Token = "0x40006C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA5")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFCDBD8", Offset = "0xFCDBD8")]
		[SerializeField]
		private bool m_UseGlobalSpace;

		[Token(Token = "0x40006C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0xFCDC24", Offset = "0xFCDC24")]
		[SerializeField]
		protected CurvySplineSegment m_StartCP;

		[Token(Token = "0x40006C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFCDC70", Offset = "0xFCDC70")]
		[SerializeField]
		protected CurvySplineSegment m_EndCP;

		[Token(Token = "0x170001F8")]
		public bool UseCache
		{
			[Token(Token = "0x6000ACC")]
			[Address(RVA = "0x1DF32F0", Offset = "0x1DF32F0", VA = "0x1DF32F0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000ACD")]
			[Address(RVA = "0x1DF32F8", Offset = "0x1DF32F8", VA = "0x1DF32F8")]
			set
			{
			}
		}

		[Token(Token = "0x170001F9")]
		public CurvySplineSegment StartCP
		{
			[Token(Token = "0x6000ACE")]
			[Address(RVA = "0x1DF3320", Offset = "0x1DF3320", VA = "0x1DF3320")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000ACF")]
			[Address(RVA = "0x1DF3328", Offset = "0x1DF3328", VA = "0x1DF3328")]
			set
			{
			}
		}

		[Token(Token = "0x170001FA")]
		public CurvySplineSegment EndCP
		{
			[Token(Token = "0x6000AD0")]
			[Address(RVA = "0x1DF33D4", Offset = "0x1DF33D4", VA = "0x1DF33D4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AD1")]
			[Address(RVA = "0x1DF33DC", Offset = "0x1DF33DC", VA = "0x1DF33DC")]
			set
			{
			}
		}

		[Token(Token = "0x170001FB")]
		public bool UseGlobalSpace
		{
			[Token(Token = "0x6000AD2")]
			[Address(RVA = "0x1DF3488", Offset = "0x1DF3488", VA = "0x1DF3488")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000AD3")]
			[Address(RVA = "0x1DF3490", Offset = "0x1DF3490", VA = "0x1DF3490")]
			set
			{
			}
		}

		[Token(Token = "0x170001FC")]
		public override bool IsConfigured
		{
			[Token(Token = "0x6000AD4")]
			[Address(RVA = "0x1DF34A4", Offset = "0x1DF34A4", VA = "0x1DF34A4", Slot = "9")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001FD")]
		public override bool IsInitialized
		{
			[Token(Token = "0x6000AD5")]
			[Address(RVA = "0x1DF354C", Offset = "0x1DF354C", VA = "0x1DF354C", Slot = "10")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001FE")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD7BCC", Offset = "0xFD7BCC")]
		public float PathLength
		{
			[Token(Token = "0x6000AD6")]
			[Address(RVA = "0x1DF361C", Offset = "0x1DF361C", VA = "0x1DF361C", Slot = "15")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001FF")]
		public bool PathIsClosed
		{
			[Token(Token = "0x6000AD7")]
			[Address(RVA = "0x1DF3788", Offset = "0x1DF3788", VA = "0x1DF3788", Slot = "16")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000200")]
		protected abstract CurvySpline InputSpline
		{
			[Token(Token = "0x6000AE7")]
			get;
			[Token(Token = "0x6000AE8")]
			set;
		}

		[Token(Token = "0x6000AD8")]
		[Address(RVA = "0x1DF38A8", Offset = "0x1DF38A8", VA = "0x1DF38A8", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000AD9")]
		[Address(RVA = "0x1DF38F0", Offset = "0x1DF38F0", VA = "0x1DF38F0", Slot = "7")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6000ADA")]
		[Address(RVA = "0x1DF3AAC", Offset = "0x1DF3AAC", VA = "0x1DF3AAC", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000ADB")]
		[Address(RVA = "0x1DF3B2C", Offset = "0x1DF3B2C", VA = "0x1DF3B2C")]
		private void OnSplineRefreshed(CurvySplineEventArgs e)
		{
		}

		[Token(Token = "0x6000ADC")]
		[Address(RVA = "0x1DF3C8C", Offset = "0x1DF3C8C", VA = "0x1DF3C8C")]
		private void OnInputSplineCoordinatesChanged(CurvySpline sender)
		{
		}

		[Token(Token = "0x6000ADD")]
		[Address(RVA = "0x1DF3C80", Offset = "0x1DF3C80", VA = "0x1DF3C80")]
		private void ForceRefresh()
		{
		}

		[Token(Token = "0x6000ADE")]
		[Address(RVA = "0x1DF3674", Offset = "0x1DF3674", VA = "0x1DF3674")]
		private float getPathLength(CurvySpline spline)
		{
			return default(float);
		}

		[Token(Token = "0x6000ADF")]
		[Address(RVA = "0x1DF37E0", Offset = "0x1DF37E0", VA = "0x1DF37E0")]
		private bool getPathClosed(CurvySpline spline)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AE0")]
		[Address(RVA = "0x1DEC8A0", Offset = "0x1DEC8A0", VA = "0x1DEC8A0")]
		protected CGData GetSplineData(CurvySpline spline, bool fullPath, CGDataRequestRasterization raster, CGDataRequestMetaCGOptions options)
		{
			return null;
		}

		[Token(Token = "0x6000AE1")]
		[Address(RVA = "0x1DF3FAC", Offset = "0x1DF3FAC", VA = "0x1DF3FAC")]
		private static void FillData(CGShape dataToFill, SamplePointsMaterialGroup materialGroup, List<float> sourceFs, List<float> relativeFs, bool isFullPath, List<Vector3> positions, List<Vector3> tangents, List<Vector3> normals, bool considerSplineTransform, Transform splineTransform, Transform generatorTransform)
		{
		}

		[Token(Token = "0x6000AE2")]
		[Address(RVA = "0x1DF3E2C", Offset = "0x1DF3E2C", VA = "0x1DF3E2C")]
		private static void AddPoint(float sourceF, float relativeF, bool isFullPath, Vector3 position, Vector3 tangent, Vector3 up, List<float> sourceFList, List<float> relativeFList, List<Vector3> positionList, List<Vector3> tangentList, List<Vector3> upList)
		{
		}

		[Token(Token = "0x6000AE3")]
		[Address(RVA = "0x1DF42FC", Offset = "0x1DF42FC", VA = "0x1DF42FC")]
		private static bool MoveByAngleExt(CurvySpline spline, bool useCache, ref float tf, float maxDistance, float maxAngle, out Vector3 pos, out Vector3 tan, float stopTF, bool loop, float stepDist)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AE4")]
		[Address(RVA = "0x1DF45E4", Offset = "0x1DF45E4", VA = "0x1DF45E4")]
		private static void CalculateExtendedUV(CurvySpline spline, float startTF, float endTF, List<SamplePointUData> ext, CGShape data)
		{
		}

		[Token(Token = "0x6000AE5")]
		[Address(RVA = "0x1DF4DE0", Offset = "0x1DF4DE0", VA = "0x1DF4DE0")]
		private static MetaCGOptions findPreviousReferenceCPOptions(CurvySpline spline, float tf, out CurvySplineSegment cp)
		{
			return null;
		}

		[Token(Token = "0x6000AE6")]
		[Address(RVA = "0x1DF4F4C", Offset = "0x1DF4F4C", VA = "0x1DF4F4C")]
		private static MetaCGOptions findNextReferenceCPOptions(CurvySpline spline, float tf, out CurvySplineSegment cp)
		{
			return null;
		}

		[Token(Token = "0x6000AE9")]
		[Address(RVA = "0x1DEE4C0", Offset = "0x1DEE4C0", VA = "0x1DEE4C0", Slot = "19")]
		protected virtual void OnSplineAssigned()
		{
		}

		[Token(Token = "0x6000AEA")]
		[Address(RVA = "0x1DEC428", Offset = "0x1DEC428", VA = "0x1DEC428")]
		protected void ValidateStartAndEndCps()
		{
		}

		[Token(Token = "0x6000AEB")]
		[Address(RVA = "0x1DEDF38", Offset = "0x1DEDF38", VA = "0x1DEDF38")]
		protected SplineInputModuleBase()
		{
		}
	}
	[Token(Token = "0x2000132")]
	public abstract class TRSModuleBase : CGModule
	{
		[Token(Token = "0x40006C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[SerializeField]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0xFCDCD8", Offset = "0xFCDCD8")]
		private Vector3 m_Transpose;

		[Token(Token = "0x40006CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0xFCDD40", Offset = "0xFCDD40")]
		private Vector3 m_Rotation;

		[Token(Token = "0x40006CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[SerializeField]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0xFCDDA8", Offset = "0xFCDDA8")]
		private Vector3 m_Scale;

		[Token(Token = "0x17000201")]
		public Vector3 Transpose
		{
			[Token(Token = "0x6000AEC")]
			[Address(RVA = "0x1DF5254", Offset = "0x1DF5254", VA = "0x1DF5254")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000AED")]
			[Address(RVA = "0x1DF5260", Offset = "0x1DF5260", VA = "0x1DF5260")]
			set
			{
			}
		}

		[Token(Token = "0x17000202")]
		public Vector3 Rotation
		{
			[Token(Token = "0x6000AEE")]
			[Address(RVA = "0x1DF5324", Offset = "0x1DF5324", VA = "0x1DF5324")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000AEF")]
			[Address(RVA = "0x1DF5330", Offset = "0x1DF5330", VA = "0x1DF5330")]
			set
			{
			}
		}

		[Token(Token = "0x17000203")]
		public Vector3 Scale
		{
			[Token(Token = "0x6000AF0")]
			[Address(RVA = "0x1DF53F4", Offset = "0x1DF53F4", VA = "0x1DF53F4")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000AF1")]
			[Address(RVA = "0x1DF5400", Offset = "0x1DF5400", VA = "0x1DF5400")]
			set
			{
			}
		}

		[Token(Token = "0x17000204")]
		public Matrix4x4 Matrix
		{
			[Token(Token = "0x6000AF2")]
			[Address(RVA = "0x1DF0BFC", Offset = "0x1DF0BFC", VA = "0x1DF0BFC")]
			get
			{
				return default(Matrix4x4);
			}
		}

		[Token(Token = "0x6000AF3")]
		[Address(RVA = "0x1DF54C4", Offset = "0x1DF54C4", VA = "0x1DF54C4", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000AF4")]
		[Address(RVA = "0x1DF550C", Offset = "0x1DF550C", VA = "0x1DF550C", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000AF5")]
		[Address(RVA = "0x1DF0DB8", Offset = "0x1DF0DB8", VA = "0x1DF0DB8")]
		protected TRSModuleBase()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000133")]
	public class CGBoundsGroup : CGWeightedItem
	{
		[Token(Token = "0x2000231")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFC8984", Offset = "0xFC8984")]
		public enum DistributionModeEnum
		{
			[Token(Token = "0x4000B5B")]
			Parent,
			[Token(Token = "0x4000B5C")]
			Self
		}

		[Token(Token = "0x2000232")]
		public enum RotationModeEnum
		{
			[Token(Token = "0x4000B5E")]
			Full,
			[Token(Token = "0x4000B5F")]
			Direction,
			[Token(Token = "0x4000B60")]
			Horizontal,
			[Token(Token = "0x4000B61")]
			Independent
		}

		[Token(Token = "0x40006CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private string m_Name;

		[Token(Token = "0x40006CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFCDE20", Offset = "0xFCDE20")]
		private bool m_KeepTogether;

		[Token(Token = "0x40006CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		[FloatRegion]
		private FloatRegion m_SpaceBefore;

		[Token(Token = "0x40006CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[FloatRegion]
		private FloatRegion m_SpaceAfter;

		[Token(Token = "0x40006D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		[FloatRegion]
		private FloatRegion m_CrossBase;

		[Token(Token = "0x40006D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFCDF74", Offset = "0xFCDF74")]
		private bool m_IgnoreModuleCrossBase;

		[Token(Token = "0x40006D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		[HideInInspector]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFCDFC0", Offset = "0xFCDFC0")]
		private CurvyRepeatingOrderEnum m_RepeatingOrder;

		[Token(Token = "0x40006D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFCE01C", Offset = "0xFCE01C")]
		private bool m_RandomizeItems;

		[Token(Token = "0x40006D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[IntRegion]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFCE068", Offset = "0xFCE068")]
		private IntRegion m_RepeatingItems;

		[Token(Token = "0x40006D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		[HideInInspector]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFCE0F0", Offset = "0xFCE0F0")]
		private DistributionModeEnum m_DistributionMode;

		[Token(Token = "0x40006D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[SerializeField]
		[HideInInspector]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFCE14C", Offset = "0xFCE14C")]
		[FloatRegion]
		private FloatRegion m_PositionOffset;

		[Token(Token = "0x40006D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		[HideInInspector]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFCE1F0", Offset = "0xFCE1F0")]
		[FloatRegion]
		private FloatRegion m_Height;

		[Token(Token = "0x40006D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFCE270", Offset = "0xFCE270")]
		private bool m_RelativeTranslation;

		[Token(Token = "0x40006D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		[FloatRegion]
		private FloatRegion m_TranslationX;

		[Token(Token = "0x40006DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[SerializeField]
		[FloatRegion]
		private FloatRegion m_TranslationY;

		[Token(Token = "0x40006DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		[FloatRegion]
		private FloatRegion m_TranslationZ;

		[Token(Token = "0x40006DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFCE3A0", Offset = "0xFCE3A0")]
		private RotationModeEnum m_RotationMode;

		[Token(Token = "0x40006DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		[HideInInspector]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFCE3EC", Offset = "0xFCE3EC")]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0xFCE3EC", Offset = "0xFCE3EC")]
		private Vector3 m_RotationOffset;

		[Token(Token = "0x40006DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[SerializeField]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFCE488", Offset = "0xFCE488")]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0xFCE488", Offset = "0xFCE488")]
		private Vector3 m_RotationScatter;

		[Token(Token = "0x40006DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		[FloatRegion]
		private FloatRegion m_RotationX;

		[Token(Token = "0x40006E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[SerializeField]
		[FloatRegion]
		private FloatRegion m_RotationY;

		[Token(Token = "0x40006E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		[FloatRegion]
		private FloatRegion m_RotationZ;

		[Token(Token = "0x40006E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFCE5F8", Offset = "0xFCE5F8")]
		private bool m_UniformScaling;

		[Token(Token = "0x40006E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		[FloatRegion]
		private FloatRegion m_ScaleX;

		[Token(Token = "0x40006E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[SerializeField]
		[FloatRegion]
		private FloatRegion m_ScaleY;

		[Token(Token = "0x40006E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		[FloatRegion]
		private FloatRegion m_ScaleZ;

		[Token(Token = "0x40006E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		private List<CGBoundsGroupItem> m_Items;

		[Token(Token = "0x40006E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFCE738", Offset = "0xFCE738")]
		private WeightedRandom<int> mItemBag;

		[Token(Token = "0x17000205")]
		public string Name
		{
			[Token(Token = "0x6000AF6")]
			[Address(RVA = "0x1BFC358", Offset = "0x1BFC358", VA = "0x1BFC358")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AF7")]
			[Address(RVA = "0x1BFC360", Offset = "0x1BFC360", VA = "0x1BFC360")]
			set
			{
			}
		}

		[Token(Token = "0x17000206")]
		public bool KeepTogether
		{
			[Token(Token = "0x6000AF8")]
			[Address(RVA = "0x1BFC3A8", Offset = "0x1BFC3A8", VA = "0x1BFC3A8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000AF9")]
			[Address(RVA = "0x1BFC3B0", Offset = "0x1BFC3B0", VA = "0x1BFC3B0")]
			set
			{
			}
		}

		[Token(Token = "0x17000207")]
		public FloatRegion SpaceBefore
		{
			[Token(Token = "0x6000AFA")]
			[Address(RVA = "0x1BFC3D0", Offset = "0x1BFC3D0", VA = "0x1BFC3D0")]
			get
			{
				return default(FloatRegion);
			}
			[Token(Token = "0x6000AFB")]
			[Address(RVA = "0x1BFC3E0", Offset = "0x1BFC3E0", VA = "0x1BFC3E0")]
			set
			{
			}
		}

		[Token(Token = "0x17000208")]
		public FloatRegion SpaceAfter
		{
			[Token(Token = "0x6000AFC")]
			[Address(RVA = "0x1BFC430", Offset = "0x1BFC430", VA = "0x1BFC430")]
			get
			{
				return default(FloatRegion);
			}
			[Token(Token = "0x6000AFD")]
			[Address(RVA = "0x1BFC440", Offset = "0x1BFC440", VA = "0x1BFC440")]
			set
			{
			}
		}

		[Token(Token = "0x17000209")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD7C04", Offset = "0xFD7C04")]
		public CurvyRepeatingOrderEnum RepeatingOrder
		{
			[Token(Token = "0x6000AFE")]
			[Address(RVA = "0x1BFC490", Offset = "0x1BFC490", VA = "0x1BFC490")]
			get
			{
				return default(CurvyRepeatingOrderEnum);
			}
			[Token(Token = "0x6000AFF")]
			[Address(RVA = "0x1BFC49C", Offset = "0x1BFC49C", VA = "0x1BFC49C")]
			set
			{
			}
		}

		[Token(Token = "0x1700020A")]
		public bool RandomizeItems
		{
			[Token(Token = "0x6000B00")]
			[Address(RVA = "0x1BFC4E8", Offset = "0x1BFC4E8", VA = "0x1BFC4E8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B01")]
			[Address(RVA = "0x1BFC4C8", Offset = "0x1BFC4C8", VA = "0x1BFC4C8")]
			set
			{
			}
		}

		[Token(Token = "0x1700020B")]
		public IntRegion RepeatingItems
		{
			[Token(Token = "0x6000B02")]
			[Address(RVA = "0x1BFC4F0", Offset = "0x1BFC4F0", VA = "0x1BFC4F0")]
			get
			{
				return default(IntRegion);
			}
			[Token(Token = "0x6000B03")]
			[Address(RVA = "0x1BFC500", Offset = "0x1BFC500", VA = "0x1BFC500")]
			set
			{
			}
		}

		[Token(Token = "0x1700020C")]
		public FloatRegion CrossBase
		{
			[Token(Token = "0x6000B04")]
			[Address(RVA = "0x1BFC550", Offset = "0x1BFC550", VA = "0x1BFC550")]
			get
			{
				return default(FloatRegion);
			}
			[Token(Token = "0x6000B05")]
			[Address(RVA = "0x1BFC560", Offset = "0x1BFC560", VA = "0x1BFC560")]
			set
			{
			}
		}

		[Token(Token = "0x1700020D")]
		public bool IgnoreModuleCrossBase
		{
			[Token(Token = "0x6000B06")]
			[Address(RVA = "0x1BFC5B0", Offset = "0x1BFC5B0", VA = "0x1BFC5B0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B07")]
			[Address(RVA = "0x1BFC5B8", Offset = "0x1BFC5B8", VA = "0x1BFC5B8")]
			set
			{
			}
		}

		[Token(Token = "0x1700020E")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD7C3C", Offset = "0xFD7C3C")]
		public DistributionModeEnum DistributionMode
		{
			[Token(Token = "0x6000B08")]
			[Address(RVA = "0x1BFC5D8", Offset = "0x1BFC5D8", VA = "0x1BFC5D8")]
			get
			{
				return default(DistributionModeEnum);
			}
			[Token(Token = "0x6000B09")]
			[Address(RVA = "0x1BFC5E0", Offset = "0x1BFC5E0", VA = "0x1BFC5E0")]
			set
			{
			}
		}

		[Token(Token = "0x1700020F")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD7C74", Offset = "0xFD7C74")]
		public FloatRegion PositionOffset
		{
			[Token(Token = "0x6000B0A")]
			[Address(RVA = "0x1BFC60C", Offset = "0x1BFC60C", VA = "0x1BFC60C")]
			get
			{
				return default(FloatRegion);
			}
			[Token(Token = "0x6000B0B")]
			[Address(RVA = "0x1BFC61C", Offset = "0x1BFC61C", VA = "0x1BFC61C")]
			set
			{
			}
		}

		[Token(Token = "0x17000210")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD7CAC", Offset = "0xFD7CAC")]
		public FloatRegion Height
		{
			[Token(Token = "0x6000B0C")]
			[Address(RVA = "0x1BFC624", Offset = "0x1BFC624", VA = "0x1BFC624")]
			get
			{
				return default(FloatRegion);
			}
			[Token(Token = "0x6000B0D")]
			[Address(RVA = "0x1BFC634", Offset = "0x1BFC634", VA = "0x1BFC634")]
			set
			{
			}
		}

		[Token(Token = "0x17000211")]
		public RotationModeEnum RotationMode
		{
			[Token(Token = "0x6000B0E")]
			[Address(RVA = "0x1BFC700", Offset = "0x1BFC700", VA = "0x1BFC700")]
			get
			{
				return default(RotationModeEnum);
			}
			[Token(Token = "0x6000B0F")]
			[Address(RVA = "0x1BFC708", Offset = "0x1BFC708", VA = "0x1BFC708")]
			set
			{
			}
		}

		[Token(Token = "0x17000212")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD7CE4", Offset = "0xFD7CE4")]
		public Vector3 RotationOffset
		{
			[Token(Token = "0x6000B10")]
			[Address(RVA = "0x1BFC71C", Offset = "0x1BFC71C", VA = "0x1BFC71C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000B11")]
			[Address(RVA = "0x1BFC7BC", Offset = "0x1BFC7BC", VA = "0x1BFC7BC")]
			set
			{
			}
		}

		[Token(Token = "0x17000213")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD7D1C", Offset = "0xFD7D1C")]
		public Vector3 RotationScatter
		{
			[Token(Token = "0x6000B12")]
			[Address(RVA = "0x1BFC8BC", Offset = "0x1BFC8BC", VA = "0x1BFC8BC")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000B13")]
			[Address(RVA = "0x1BFCB08", Offset = "0x1BFCB08", VA = "0x1BFCB08")]
			set
			{
			}
		}

		[Token(Token = "0x17000214")]
		public FloatRegion RotationX
		{
			[Token(Token = "0x6000B14")]
			[Address(RVA = "0x1BFCC08", Offset = "0x1BFCC08", VA = "0x1BFCC08")]
			get
			{
				return default(FloatRegion);
			}
			[Token(Token = "0x6000B15")]
			[Address(RVA = "0x1BFCA18", Offset = "0x1BFCA18", VA = "0x1BFCA18")]
			set
			{
			}
		}

		[Token(Token = "0x17000215")]
		public FloatRegion RotationY
		{
			[Token(Token = "0x6000B16")]
			[Address(RVA = "0x1BFCC18", Offset = "0x1BFCC18", VA = "0x1BFCC18")]
			get
			{
				return default(FloatRegion);
			}
			[Token(Token = "0x6000B17")]
			[Address(RVA = "0x1BFCA68", Offset = "0x1BFCA68", VA = "0x1BFCA68")]
			set
			{
			}
		}

		[Token(Token = "0x17000216")]
		public FloatRegion RotationZ
		{
			[Token(Token = "0x6000B18")]
			[Address(RVA = "0x1BFCC28", Offset = "0x1BFCC28", VA = "0x1BFCC28")]
			get
			{
				return default(FloatRegion);
			}
			[Token(Token = "0x6000B19")]
			[Address(RVA = "0x1BFCAB8", Offset = "0x1BFCAB8", VA = "0x1BFCAB8")]
			set
			{
			}
		}

		[Token(Token = "0x17000217")]
		public bool UniformScaling
		{
			[Token(Token = "0x6000B1A")]
			[Address(RVA = "0x1BFCC38", Offset = "0x1BFCC38", VA = "0x1BFCC38")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B1B")]
			[Address(RVA = "0x1BFCC40", Offset = "0x1BFCC40", VA = "0x1BFCC40")]
			set
			{
			}
		}

		[Token(Token = "0x17000218")]
		public FloatRegion ScaleX
		{
			[Token(Token = "0x6000B1C")]
			[Address(RVA = "0x1BFCC60", Offset = "0x1BFCC60", VA = "0x1BFCC60")]
			get
			{
				return default(FloatRegion);
			}
			[Token(Token = "0x6000B1D")]
			[Address(RVA = "0x1BFCC70", Offset = "0x1BFCC70", VA = "0x1BFCC70")]
			set
			{
			}
		}

		[Token(Token = "0x17000219")]
		public FloatRegion ScaleY
		{
			[Token(Token = "0x6000B1E")]
			[Address(RVA = "0x1BFCCC0", Offset = "0x1BFCCC0", VA = "0x1BFCCC0")]
			get
			{
				return default(FloatRegion);
			}
			[Token(Token = "0x6000B1F")]
			[Address(RVA = "0x1BFCCD0", Offset = "0x1BFCCD0", VA = "0x1BFCCD0")]
			set
			{
			}
		}

		[Token(Token = "0x1700021A")]
		public FloatRegion ScaleZ
		{
			[Token(Token = "0x6000B20")]
			[Address(RVA = "0x1BFCD20", Offset = "0x1BFCD20", VA = "0x1BFCD20")]
			get
			{
				return default(FloatRegion);
			}
			[Token(Token = "0x6000B21")]
			[Address(RVA = "0x1BFCD30", Offset = "0x1BFCD30", VA = "0x1BFCD30")]
			set
			{
			}
		}

		[Token(Token = "0x1700021B")]
		public bool RelativeTranslation
		{
			[Token(Token = "0x6000B22")]
			[Address(RVA = "0x1BFCD80", Offset = "0x1BFCD80", VA = "0x1BFCD80")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B23")]
			[Address(RVA = "0x1BFC6E0", Offset = "0x1BFC6E0", VA = "0x1BFC6E0")]
			set
			{
			}
		}

		[Token(Token = "0x1700021C")]
		public FloatRegion TranslationX
		{
			[Token(Token = "0x6000B24")]
			[Address(RVA = "0x1BFCD88", Offset = "0x1BFCD88", VA = "0x1BFCD88")]
			get
			{
				return default(FloatRegion);
			}
			[Token(Token = "0x6000B25")]
			[Address(RVA = "0x1BFCD98", Offset = "0x1BFCD98", VA = "0x1BFCD98")]
			set
			{
			}
		}

		[Token(Token = "0x1700021D")]
		public FloatRegion TranslationY
		{
			[Token(Token = "0x6000B26")]
			[Address(RVA = "0x1BFCDE8", Offset = "0x1BFCDE8", VA = "0x1BFCDE8")]
			get
			{
				return default(FloatRegion);
			}
			[Token(Token = "0x6000B27")]
			[Address(RVA = "0x1BFC690", Offset = "0x1BFC690", VA = "0x1BFC690")]
			set
			{
			}
		}

		[Token(Token = "0x1700021E")]
		public FloatRegion TranslationZ
		{
			[Token(Token = "0x6000B28")]
			[Address(RVA = "0x1BFCDF8", Offset = "0x1BFCDF8", VA = "0x1BFCDF8")]
			get
			{
				return default(FloatRegion);
			}
			[Token(Token = "0x6000B29")]
			[Address(RVA = "0x1BFCE08", Offset = "0x1BFCE08", VA = "0x1BFCE08")]
			set
			{
			}
		}

		[Token(Token = "0x1700021F")]
		public List<CGBoundsGroupItem> Items
		{
			[Token(Token = "0x6000B2A")]
			[Address(RVA = "0x1BFCE58", Offset = "0x1BFCE58", VA = "0x1BFCE58")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000220")]
		public int FirstRepeating
		{
			[Token(Token = "0x6000B2B")]
			[Address(RVA = "0x1BFCE60", Offset = "0x1BFCE60", VA = "0x1BFCE60")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000B2C")]
			[Address(RVA = "0x1BFCE68", Offset = "0x1BFCE68", VA = "0x1BFCE68")]
			set
			{
			}
		}

		[Token(Token = "0x17000221")]
		public int LastRepeating
		{
			[Token(Token = "0x6000B2D")]
			[Address(RVA = "0x1BFCF68", Offset = "0x1BFCF68", VA = "0x1BFCF68")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000B2E")]
			[Address(RVA = "0x1BFCF70", Offset = "0x1BFCF70", VA = "0x1BFCF70")]
			set
			{
			}
		}

		[Token(Token = "0x17000222")]
		public int ItemCount
		{
			[Token(Token = "0x6000B2F")]
			[Address(RVA = "0x1BFCF18", Offset = "0x1BFCF18", VA = "0x1BFCF18")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000223")]
		private RegionOptions<int> RepeatingGroupsOptions
		{
			[Token(Token = "0x6000B33")]
			[Address(RVA = "0x1BFD5C8", Offset = "0x1BFD5C8", VA = "0x1BFD5C8")]
			get
			{
				return default(RegionOptions<int>);
			}
		}

		[Token(Token = "0x17000224")]
		private RegionOptions<float> PositionRangeOptions
		{
			[Token(Token = "0x6000B34")]
			[Address(RVA = "0x1BFD66C", Offset = "0x1BFD66C", VA = "0x1BFD66C")]
			get
			{
				return default(RegionOptions<float>);
			}
		}

		[Token(Token = "0x6000B30")]
		[Address(RVA = "0x1BFD024", Offset = "0x1BFD024", VA = "0x1BFD024")]
		public CGBoundsGroup(string name)
		{
		}

		[Token(Token = "0x6000B31")]
		[Address(RVA = "0x1BFD2D0", Offset = "0x1BFD2D0", VA = "0x1BFD2D0")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD6F24", Offset = "0xFD6F24")]
		public void ConvertObsoleteData()
		{
		}

		[Token(Token = "0x6000B32")]
		[Address(RVA = "0x1BFD4A4", Offset = "0x1BFD4A4", VA = "0x1BFD4A4")]
		public static void FillItemBag(WeightedRandom<int> bag, IEnumerable<CGWeightedItem> itemsWeights, int firstItem, int lastItem)
		{
		}

		[Token(Token = "0x6000B35")]
		[Address(RVA = "0x1BFD6C4", Offset = "0x1BFD6C4", VA = "0x1BFD6C4")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD6F5C", Offset = "0xFD6F5C")]
		internal void PrepareINTERNAL()
		{
		}

		[Token(Token = "0x6000B36")]
		[Address(RVA = "0x1BFD7F0", Offset = "0x1BFD7F0", VA = "0x1BFD7F0")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD6F6C", Offset = "0xFD6F6C")]
		internal int getRandomItemINTERNAL()
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000134")]
	public enum CGYesNoAuto
	{
		[Token(Token = "0x40006E9")]
		Yes,
		[Token(Token = "0x40006EA")]
		No,
		[Token(Token = "0x40006EB")]
		Auto
	}
	[Token(Token = "0x2000135")]
	public enum CGReferenceMode
	{
		[Token(Token = "0x40006ED")]
		Source,
		[Token(Token = "0x40006EE")]
		Self
	}
	[Token(Token = "0x2000136")]
	public enum CGKeepAspectMode
	{
		[Token(Token = "0x40006F0")]
		Off,
		[Token(Token = "0x40006F1")]
		ScaleU,
		[Token(Token = "0x40006F2")]
		ScaleV
	}
	[Token(Token = "0x2000137")]
	public enum CGUVEnum
	{
		[Token(Token = "0x40006F4")]
		U,
		[Token(Token = "0x40006F5")]
		V
	}
	[Token(Token = "0x2000138")]
	public enum CGColliderEnum
	{
		[Token(Token = "0x40006F7")]
		None,
		[Token(Token = "0x40006F8")]
		Mesh,
		[Token(Token = "0x40006F9")]
		Box,
		[Token(Token = "0x40006FA")]
		Sphere,
		[Token(Token = "0x40006FB")]
		Capsule
	}
	[Serializable]
	[Token(Token = "0x2000139")]
	public struct CGSpot : IEquatable<CGSpot>
	{
		[Token(Token = "0x40006FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFCE748", Offset = "0xFCE748")]
		private int m_Index;

		[Token(Token = "0x40006FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		[SerializeField]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0xFCE7A8", Offset = "0xFCE7A8")]
		private Vector3 m_Position;

		[Token(Token = "0x40006FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0xFCE818", Offset = "0xFCE818")]
		private Quaternion m_Rotation;

		[Token(Token = "0x40006FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0xFCE888", Offset = "0xFCE888")]
		private Vector3 m_Scale;

		[Token(Token = "0x17000225")]
		public int Index
		{
			[Token(Token = "0x6000B37")]
			[Address(RVA = "0x1036420", Offset = "0x1036420", VA = "0x1036420")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000226")]
		public Vector3 Position
		{
			[Token(Token = "0x6000B38")]
			[Address(RVA = "0x1036428", Offset = "0x1036428", VA = "0x1036428")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000B39")]
			[Address(RVA = "0x1036434", Offset = "0x1036434", VA = "0x1036434")]
			set
			{
			}
		}

		[Token(Token = "0x17000227")]
		public Quaternion Rotation
		{
			[Token(Token = "0x6000B3A")]
			[Address(RVA = "0x103643C", Offset = "0x103643C", VA = "0x103643C")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x6000B3B")]
			[Address(RVA = "0x1036448", Offset = "0x1036448", VA = "0x1036448")]
			set
			{
			}
		}

		[Token(Token = "0x17000228")]
		public Vector3 Scale
		{
			[Token(Token = "0x6000B3C")]
			[Address(RVA = "0x1036450", Offset = "0x1036450", VA = "0x1036450")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000B3D")]
			[Address(RVA = "0x103645C", Offset = "0x103645C", VA = "0x103645C")]
			set
			{
			}
		}

		[Token(Token = "0x17000229")]
		public Matrix4x4 Matrix
		{
			[Token(Token = "0x6000B3E")]
			[Address(RVA = "0x1036464", Offset = "0x1036464", VA = "0x1036464")]
			get
			{
				return default(Matrix4x4);
			}
		}

		[Token(Token = "0x6000B3F")]
		[Address(RVA = "0x103646C", Offset = "0x103646C", VA = "0x103646C")]
		public CGSpot(int index)
		{
		}

		[Token(Token = "0x6000B40")]
		[Address(RVA = "0x1036474", Offset = "0x1036474", VA = "0x1036474")]
		public CGSpot(int index, Vector3 position, Quaternion rotation, Vector3 scale)
		{
		}

		[Token(Token = "0x6000B41")]
		[Address(RVA = "0x103649C", Offset = "0x103649C", VA = "0x103649C")]
		public void ToTransform(Transform transform)
		{
		}

		[Token(Token = "0x6000B42")]
		[Address(RVA = "0x10364A4", Offset = "0x10364A4", VA = "0x10364A4", Slot = "4")]
		public bool Equals(CGSpot other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B43")]
		[Address(RVA = "0x10364DC", Offset = "0x10364DC", VA = "0x10364DC", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B44")]
		[Address(RVA = "0x10364E4", Offset = "0x10364E4", VA = "0x10364E4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B45")]
		[Address(RVA = "0x1E3B684", Offset = "0x1E3B684", VA = "0x1E3B684")]
		public static bool operator ==(CGSpot left, CGSpot right)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B46")]
		[Address(RVA = "0x1E3B6B8", Offset = "0x1E3B6B8", VA = "0x1E3B6B8")]
		public static bool operator !=(CGSpot left, CGSpot right)
		{
			return default(bool);
		}
	}
	[Serializable]
	[Token(Token = "0x200013A")]
	public class CGMaterialSettings
	{
		[Token(Token = "0x4000700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool SwapUV;

		[Token(Token = "0x4000701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public CGKeepAspectMode KeepAspect;

		[Token(Token = "0x4000702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float UVRotation;

		[Token(Token = "0x4000703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector2 UVOffset;

		[Token(Token = "0x4000704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector2 UVScale;

		[Token(Token = "0x6000B47")]
		[Address(RVA = "0x1BFFA24", Offset = "0x1BFFA24", VA = "0x1BFFA24")]
		public CGMaterialSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200013B")]
	public class CGMaterialSettingsEx : CGMaterialSettings
	{
		[Token(Token = "0x4000705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int MaterialID;

		[Token(Token = "0x6000B48")]
		[Address(RVA = "0x1BFFAA4", Offset = "0x1BFFAA4", VA = "0x1BFFAA4")]
		public CGMaterialSettingsEx()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200013C")]
	public class CGMeshProperties
	{
		[Token(Token = "0x4000706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private Mesh m_Mesh;

		[Token(Token = "0x4000707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Material[] m_Material;

		[Token(Token = "0x4000708")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0xFCE918", Offset = "0xFCE918")]
		private Vector3 m_Translation;

		[Token(Token = "0x4000709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0xFCE980", Offset = "0xFCE980")]
		private Vector3 m_Rotation;

		[Token(Token = "0x400070A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0xFCE9E8", Offset = "0xFCE9E8")]
		private Vector3 m_Scale;

		[Token(Token = "0x1700022A")]
		public Mesh Mesh
		{
			[Token(Token = "0x6000B49")]
			[Address(RVA = "0x1BFFAA8", Offset = "0x1BFFAA8", VA = "0x1BFFAA8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B4A")]
			[Address(RVA = "0x1BFFAB0", Offset = "0x1BFFAB0", VA = "0x1BFFAB0")]
			set
			{
			}
		}

		[Token(Token = "0x1700022B")]
		public Material[] Material
		{
			[Token(Token = "0x6000B4B")]
			[Address(RVA = "0x1BFFBDC", Offset = "0x1BFFBDC", VA = "0x1BFFBDC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B4C")]
			[Address(RVA = "0x1BFFBE4", Offset = "0x1BFFBE4", VA = "0x1BFFBE4")]
			set
			{
			}
		}

		[Token(Token = "0x1700022C")]
		public Vector3 Translation
		{
			[Token(Token = "0x6000B4D")]
			[Address(RVA = "0x1BFFBFC", Offset = "0x1BFFBFC", VA = "0x1BFFBFC")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000B4E")]
			[Address(RVA = "0x1BFFC08", Offset = "0x1BFFC08", VA = "0x1BFFC08")]
			set
			{
			}
		}

		[Token(Token = "0x1700022D")]
		public Vector3 Rotation
		{
			[Token(Token = "0x6000B4F")]
			[Address(RVA = "0x1BFFCC0", Offset = "0x1BFFCC0", VA = "0x1BFFCC0")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000B50")]
			[Address(RVA = "0x1BFFCCC", Offset = "0x1BFFCCC", VA = "0x1BFFCCC")]
			set
			{
			}
		}

		[Token(Token = "0x1700022E")]
		public Vector3 Scale
		{
			[Token(Token = "0x6000B51")]
			[Address(RVA = "0x1BFFD84", Offset = "0x1BFFD84", VA = "0x1BFFD84")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000B52")]
			[Address(RVA = "0x1BFFD90", Offset = "0x1BFFD90", VA = "0x1BFFD90")]
			set
			{
			}
		}

		[Token(Token = "0x1700022F")]
		public Matrix4x4 Matrix
		{
			[Token(Token = "0x6000B53")]
			[Address(RVA = "0x1BFFE48", Offset = "0x1BFFE48", VA = "0x1BFFE48")]
			get
			{
				return default(Matrix4x4);
			}
		}

		[Token(Token = "0x6000B54")]
		[Address(RVA = "0x1BFFF68", Offset = "0x1BFFF68", VA = "0x1BFFF68")]
		public CGMeshProperties()
		{
		}

		[Token(Token = "0x6000B55")]
		[Address(RVA = "0x1C00004", Offset = "0x1C00004", VA = "0x1C00004")]
		public CGMeshProperties(Mesh mesh)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200013D")]
	public class CGGameObjectProperties
	{
		[Token(Token = "0x400070B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private GameObject m_Object;

		[Token(Token = "0x400070C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0xFCEA60", Offset = "0xFCEA60")]
		private Vector3 m_Translation;

		[Token(Token = "0x400070D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0xFCEAC8", Offset = "0xFCEAC8")]
		private Vector3 m_Rotation;

		[Token(Token = "0x400070E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0xFCEB30", Offset = "0xFCEB30")]
		private Vector3 m_Scale;

		[Token(Token = "0x17000230")]
		public GameObject Object
		{
			[Token(Token = "0x6000B56")]
			[Address(RVA = "0x1BFF028", Offset = "0x1BFF028", VA = "0x1BFF028")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B57")]
			[Address(RVA = "0x1BFF030", Offset = "0x1BFF030", VA = "0x1BFF030")]
			set
			{
			}
		}

		[Token(Token = "0x17000231")]
		public Vector3 Translation
		{
			[Token(Token = "0x6000B58")]
			[Address(RVA = "0x1BFF0D0", Offset = "0x1BFF0D0", VA = "0x1BFF0D0")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000B59")]
			[Address(RVA = "0x1BFF0DC", Offset = "0x1BFF0DC", VA = "0x1BFF0DC")]
			set
			{
			}
		}

		[Token(Token = "0x17000232")]
		public Vector3 Rotation
		{
			[Token(Token = "0x6000B5A")]
			[Address(RVA = "0x1BFF194", Offset = "0x1BFF194", VA = "0x1BFF194")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000B5B")]
			[Address(RVA = "0x1BFF1A0", Offset = "0x1BFF1A0", VA = "0x1BFF1A0")]
			set
			{
			}
		}

		[Token(Token = "0x17000233")]
		public Vector3 Scale
		{
			[Token(Token = "0x6000B5C")]
			[Address(RVA = "0x1BFF258", Offset = "0x1BFF258", VA = "0x1BFF258")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000B5D")]
			[Address(RVA = "0x1BFF264", Offset = "0x1BFF264", VA = "0x1BFF264")]
			set
			{
			}
		}

		[Token(Token = "0x17000234")]
		public Matrix4x4 Matrix
		{
			[Token(Token = "0x6000B5E")]
			[Address(RVA = "0x1BFF31C", Offset = "0x1BFF31C", VA = "0x1BFF31C")]
			get
			{
				return default(Matrix4x4);
			}
		}

		[Token(Token = "0x6000B5F")]
		[Address(RVA = "0x1BFF43C", Offset = "0x1BFF43C", VA = "0x1BFF43C")]
		public CGGameObjectProperties()
		{
		}

		[Token(Token = "0x6000B60")]
		[Address(RVA = "0x1BFF4B4", Offset = "0x1BFF4B4", VA = "0x1BFF4B4")]
		public CGGameObjectProperties(GameObject gameObject)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200013E")]
	public class CGWeightedItem
	{
		[Token(Token = "0x400070F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0xFCEB98", Offset = "0xFCEB98")]
		[SerializeField]
		private float m_Weight;

		[Token(Token = "0x17000235")]
		public float Weight
		{
			[Token(Token = "0x6000B61")]
			[Address(RVA = "0x1E4061C", Offset = "0x1E4061C", VA = "0x1E4061C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B62")]
			[Address(RVA = "0x1E40624", Offset = "0x1E40624", VA = "0x1E40624")]
			set
			{
			}
		}

		[Token(Token = "0x6000B63")]
		[Address(RVA = "0x1E406AC", Offset = "0x1E406AC", VA = "0x1E406AC")]
		public CGWeightedItem()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200013F")]
	public class CGBoundsGroupItem : CGWeightedItem
	{
		[Token(Token = "0x4000710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int Index;

		[Token(Token = "0x6000B64")]
		[Address(RVA = "0x1BFD848", Offset = "0x1BFD848", VA = "0x1BFD848")]
		public CGBoundsGroupItem()
		{
		}
	}
	[Token(Token = "0x2000140")]
	public struct ControlPointOption : IEquatable<ControlPointOption>
	{
		[Token(Token = "0x4000711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float TF;

		[Token(Token = "0x4000712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float Distance;

		[Token(Token = "0x4000713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool Include;

		[Token(Token = "0x4000714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int MaterialID;

		[Token(Token = "0x4000715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool HardEdge;

		[Token(Token = "0x4000716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float MaxStepDistance;

		[Token(Token = "0x4000717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool UVEdge;

		[Token(Token = "0x4000718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool UVShift;

		[Token(Token = "0x4000719")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float FirstU;

		[Token(Token = "0x400071A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float SecondU;

		[Token(Token = "0x6000B65")]
		[Address(RVA = "0x10365B8", Offset = "0x10365B8", VA = "0x10365B8")]
		public ControlPointOption(float tf, float dist, bool includeAnyways, int materialID, bool hardEdge, float maxStepDistance, bool uvEdge, bool uvShift, float firstU, float secondU)
		{
		}

		[Token(Token = "0x6000B66")]
		[Address(RVA = "0x10365FC", Offset = "0x10365FC", VA = "0x10365FC", Slot = "4")]
		public bool Equals(ControlPointOption other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B67")]
		[Address(RVA = "0x1036634", Offset = "0x1036634", VA = "0x1036634", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B68")]
		[Address(RVA = "0x103663C", Offset = "0x103663C", VA = "0x103663C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B69")]
		[Address(RVA = "0x1E40988", Offset = "0x1E40988", VA = "0x1E40988")]
		public static bool operator ==(ControlPointOption left, ControlPointOption right)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B6A")]
		[Address(RVA = "0x1E409BC", Offset = "0x1E409BC", VA = "0x1E409BC")]
		public static bool operator !=(ControlPointOption left, ControlPointOption right)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000141")]
	public struct SamplePointsPatch : IEquatable<SamplePointsPatch>
	{
		[Token(Token = "0x400071B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int Start;

		[Token(Token = "0x400071C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int Count;

		[Token(Token = "0x17000236")]
		public int End
		{
			[Token(Token = "0x6000B6B")]
			[Address(RVA = "0x103617C", Offset = "0x103617C", VA = "0x103617C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000B6C")]
			[Address(RVA = "0x1036188", Offset = "0x1036188", VA = "0x1036188")]
			set
			{
			}
		}

		[Token(Token = "0x17000237")]
		public int TriangleCount
		{
			[Token(Token = "0x6000B6D")]
			[Address(RVA = "0x1036190", Offset = "0x1036190", VA = "0x1036190")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000B6E")]
		[Address(RVA = "0x103619C", Offset = "0x103619C", VA = "0x103619C")]
		public SamplePointsPatch(int start)
		{
		}

		[Token(Token = "0x6000B6F")]
		[Address(RVA = "0x10361A4", Offset = "0x10361A4", VA = "0x10361A4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B70")]
		[Address(RVA = "0x10361AC", Offset = "0x10361AC", VA = "0x10361AC", Slot = "4")]
		public bool Equals(SamplePointsPatch other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B71")]
		[Address(RVA = "0x10361D4", Offset = "0x10361D4", VA = "0x10361D4", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B72")]
		[Address(RVA = "0x10361DC", Offset = "0x10361DC", VA = "0x10361DC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B73")]
		[Address(RVA = "0x1DF314C", Offset = "0x1DF314C", VA = "0x1DF314C")]
		public static bool operator ==(SamplePointsPatch left, SamplePointsPatch right)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B74")]
		[Address(RVA = "0x1DF316C", Offset = "0x1DF316C", VA = "0x1DF316C")]
		public static bool operator !=(SamplePointsPatch left, SamplePointsPatch right)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000142")]
	public class SamplePointsMaterialGroup
	{
		[Token(Token = "0x400071D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int MaterialID;

		[Token(Token = "0x400071E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<SamplePointsPatch> Patches;

		[Token(Token = "0x17000238")]
		public int TriangleCount
		{
			[Token(Token = "0x6000B75")]
			[Address(RVA = "0x1DF2674", Offset = "0x1DF2674", VA = "0x1DF2674")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000239")]
		public int StartVertex
		{
			[Token(Token = "0x6000B76")]
			[Address(RVA = "0x1DF272C", Offset = "0x1DF272C", VA = "0x1DF272C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700023A")]
		public int EndVertex
		{
			[Token(Token = "0x6000B77")]
			[Address(RVA = "0x1DF2790", Offset = "0x1DF2790", VA = "0x1DF2790")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700023B")]
		public int VertexCount
		{
			[Token(Token = "0x6000B78")]
			[Address(RVA = "0x1DF280C", Offset = "0x1DF280C", VA = "0x1DF280C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000B79")]
		[Address(RVA = "0x1DF2840", Offset = "0x1DF2840", VA = "0x1DF2840")]
		public SamplePointsMaterialGroup(int materialID)
		{
		}

		[Token(Token = "0x6000B7A")]
		[Address(RVA = "0x1DF28D0", Offset = "0x1DF28D0", VA = "0x1DF28D0")]
		public void GetLengths(CGVolume volume, out float worldLength, out float uLength)
		{
		}

		[Token(Token = "0x6000B7B")]
		[Address(RVA = "0x1DF03CC", Offset = "0x1DF03CC", VA = "0x1DF03CC")]
		public SamplePointsMaterialGroup Clone()
		{
			return null;
		}
	}
	[Token(Token = "0x2000143")]
	public struct SamplePointUData : IEquatable<SamplePointUData>
	{
		[Token(Token = "0x400071F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int Vertex;

		[Token(Token = "0x4000720")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public bool UVEdge;

		[Token(Token = "0x4000721")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float FirstU;

		[Token(Token = "0x4000722")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float SecondU;

		[Token(Token = "0x6000B7C")]
		[Address(RVA = "0x1036148", Offset = "0x1036148", VA = "0x1036148")]
		public SamplePointUData(int vt, bool uvEdge, float uv0, float uv1)
		{
		}

		[Token(Token = "0x6000B7D")]
		[Address(RVA = "0x103615C", Offset = "0x103615C", VA = "0x103615C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B7E")]
		[Address(RVA = "0x1036164", Offset = "0x1036164", VA = "0x1036164", Slot = "4")]
		public bool Equals(SamplePointUData other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B7F")]
		[Address(RVA = "0x103616C", Offset = "0x103616C", VA = "0x103616C", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B80")]
		[Address(RVA = "0x1036174", Offset = "0x1036174", VA = "0x1036174", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B81")]
		[Address(RVA = "0x1DF2610", Offset = "0x1DF2610", VA = "0x1DF2610")]
		public static bool operator ==(SamplePointUData left, SamplePointUData right)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B82")]
		[Address(RVA = "0x1DF2640", Offset = "0x1DF2640", VA = "0x1DF2640")]
		public static bool operator !=(SamplePointUData left, SamplePointUData right)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000144")]
	public class SamplePointsMaterialGroupCollection : List<SamplePointsMaterialGroup>
	{
		[Token(Token = "0x4000723")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int MaterialID;

		[Token(Token = "0x4000724")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float AspectCorrection;

		[Token(Token = "0x1700023C")]
		public int TriangleCount
		{
			[Token(Token = "0x6000B83")]
			[Address(RVA = "0x1DF2AA8", Offset = "0x1DF2AA8", VA = "0x1DF2AA8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000B84")]
		[Address(RVA = "0x1DF2B4C", Offset = "0x1DF2B4C", VA = "0x1DF2B4C")]
		public SamplePointsMaterialGroupCollection()
		{
		}

		[Token(Token = "0x6000B85")]
		[Address(RVA = "0x1DF2BC4", Offset = "0x1DF2BC4", VA = "0x1DF2BC4")]
		public SamplePointsMaterialGroupCollection(int capacity)
		{
		}

		[Token(Token = "0x6000B86")]
		[Address(RVA = "0x1DF2C4C", Offset = "0x1DF2C4C", VA = "0x1DF2C4C")]
		public SamplePointsMaterialGroupCollection(IEnumerable<SamplePointsMaterialGroup> collection)
		{
		}

		[Token(Token = "0x6000B87")]
		[Address(RVA = "0x1DF2CD4", Offset = "0x1DF2CD4", VA = "0x1DF2CD4")]
		public void CalculateAspectCorrection(CGVolume volume, CGMaterialSettingsEx matSettings)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000145")]
	public class CGDataReference
	{
		[Token(Token = "0x4000725")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private CGModule m_Module;

		[Token(Token = "0x4000726")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private string m_SlotName;

		[Token(Token = "0x4000727")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CGModuleOutputSlot mSlot;

		[Token(Token = "0x1700023D")]
		public CGData[] Data
		{
			[Token(Token = "0x6000B88")]
			[Address(RVA = "0x1BFDA9C", Offset = "0x1BFDA9C", VA = "0x1BFDA9C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700023E")]
		public CGModuleOutputSlot Slot
		{
			[Token(Token = "0x6000B89")]
			[Address(RVA = "0x1BFDB14", Offset = "0x1BFDB14", VA = "0x1BFDB14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700023F")]
		public bool HasValue
		{
			[Token(Token = "0x6000B8A")]
			[Address(RVA = "0x1BFDD30", Offset = "0x1BFDD30", VA = "0x1BFDD30")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000240")]
		public bool IsEmpty
		{
			[Token(Token = "0x6000B8B")]
			[Address(RVA = "0x1BFDD60", Offset = "0x1BFDD60", VA = "0x1BFDD60")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000241")]
		public CGModule Module
		{
			[Token(Token = "0x6000B8C")]
			[Address(RVA = "0x1BFDD6C", Offset = "0x1BFDD6C", VA = "0x1BFDD6C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000242")]
		public string SlotName
		{
			[Token(Token = "0x6000B8D")]
			[Address(RVA = "0x1BFDD74", Offset = "0x1BFDD74", VA = "0x1BFDD74")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B8E")]
		[Address(RVA = "0x1BFDD7C", Offset = "0x1BFDD7C", VA = "0x1BFDD7C")]
		public CGDataReference()
		{
		}

		[Token(Token = "0x6000B8F")]
		[Address(RVA = "0x1BFDD84", Offset = "0x1BFDD84", VA = "0x1BFDD84")]
		public CGDataReference(CGModule module, string slotName)
		{
		}

		[Token(Token = "0x6000B90")]
		[Address(RVA = "0x1BFDE08", Offset = "0x1BFDE08", VA = "0x1BFDE08")]
		public CGDataReference(CurvyGenerator generator, string moduleName, string slotName)
		{
		}

		[Token(Token = "0x6000B91")]
		[Address(RVA = "0x1BFDEB8", Offset = "0x1BFDEB8", VA = "0x1BFDEB8")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000B92")]
		public T GetData<T>() where T : CGData
		{
			return null;
		}

		[Token(Token = "0x6000B93")]
		public T[] GetAllData<T>() where T : CGData
		{
			return null;
		}

		[Token(Token = "0x6000B94")]
		[Address(RVA = "0x1BFDDC4", Offset = "0x1BFDDC4", VA = "0x1BFDDC4")]
		public void setINTERNAL(CGModule module, string slotName)
		{
		}

		[Token(Token = "0x6000B95")]
		[Address(RVA = "0x1BFDE50", Offset = "0x1BFDE50", VA = "0x1BFDE50")]
		public void setINTERNAL(CurvyGenerator generator, string moduleName, string slotName)
		{
		}
	}
	[Token(Token = "0x2000146")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xFC7300", Offset = "0xFC7300")]
	public sealed class CGDataInfoAttribute : Attribute
	{
		[Token(Token = "0x4000728")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Color Color;

		[Token(Token = "0x6000B96")]
		[Address(RVA = "0x1BFD9A0", Offset = "0x1BFD9A0", VA = "0x1BFD9A0")]
		public CGDataInfoAttribute(Color color)
		{
		}

		[Token(Token = "0x6000B97")]
		[Address(RVA = "0x1BFD9EC", Offset = "0x1BFD9EC", VA = "0x1BFD9EC")]
		public CGDataInfoAttribute(float r, float g, float b, float a = 1f)
		{
		}

		[Token(Token = "0x6000B98")]
		[Address(RVA = "0x1BFDA60", Offset = "0x1BFDA60", VA = "0x1BFDA60")]
		public CGDataInfoAttribute(string htmlColor)
		{
		}
	}
	[Token(Token = "0x2000147")]
	public class CGData
	{
		[Token(Token = "0x4000729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Name;

		[Token(Token = "0x17000243")]
		public virtual int Count
		{
			[Token(Token = "0x6000B99")]
			[Address(RVA = "0x1BFD850", Offset = "0x1BFD850", VA = "0x1BFD850", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000B9A")]
		[Address(RVA = "0x1BFD858", Offset = "0x1BFD858", VA = "0x1BFD858")]
		public static implicit operator bool(CGData a)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B9B")]
		public virtual T Clone<T>() where T : CGData
		{
			return null;
		}

		[Token(Token = "0x6000B9C")]
		[Address(RVA = "0x1BFD864", Offset = "0x1BFD864", VA = "0x1BFD864")]
		protected int getGenericFIndex(ref float[] FMapArray, float fValue, out float frag)
		{
			return default(int);
		}

		[Token(Token = "0x6000B9D")]
		[Address(RVA = "0x1BFC1A4", Offset = "0x1BFC1A4", VA = "0x1BFC1A4")]
		public CGData()
		{
		}
	}
	[Token(Token = "0x2000148")]
	[AttributeAttribute(Name = "CGDataInfoAttribute", RVA = "0xFC7314", Offset = "0xFC7314")]
	public class CGShape : CGData
	{
		[Serializable]
		[Token(Token = "0x2000233")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC89BC", Offset = "0xFC89BC")]
		private sealed class <>c
		{
			[Token(Token = "0x4000B62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000B63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<SamplePointsMaterialGroup, SamplePointsMaterialGroup> <>9__16_0;

			[Token(Token = "0x4000B64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<SamplePointsMaterialGroup, SamplePointsMaterialGroup> <>9__18_0;

			[Token(Token = "0x600101A")]
			[Address(RVA = "0x1E3ABCC", Offset = "0x1E3ABCC", VA = "0x1E3ABCC")]
			public <>c()
			{
			}

			[Token(Token = "0x600101B")]
			[Address(RVA = "0x1E3ABD4", Offset = "0x1E3ABD4", VA = "0x1E3ABD4")]
			internal SamplePointsMaterialGroup <.ctor>b__16_0(SamplePointsMaterialGroup g)
			{
				return null;
			}

			[Token(Token = "0x600101C")]
			[Address(RVA = "0x1E3ABF0", Offset = "0x1E3ABF0", VA = "0x1E3ABF0")]
			internal SamplePointsMaterialGroup <Copy>b__18_0(SamplePointsMaterialGroup g)
			{
				return null;
			}
		}

		[Token(Token = "0x400072A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float[] SourceF;

		[Token(Token = "0x400072B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float[] F;

		[Token(Token = "0x400072C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3[] Position;

		[Token(Token = "0x400072D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3[] Normal;

		[Token(Token = "0x400072E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float[] Map;

		[Token(Token = "0x400072F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<SamplePointsMaterialGroup> MaterialGroups;

		[Token(Token = "0x4000730")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool SourceIsManaged;

		[Token(Token = "0x4000731")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool Closed;

		[Token(Token = "0x4000732")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		public bool Seamless;

		[Token(Token = "0x4000733")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float Length;

		[Token(Token = "0x4000734")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float mCacheLastF;

		[Token(Token = "0x4000735")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int mCacheLastIndex;

		[Token(Token = "0x4000736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float mCacheLastFrag;

		[Token(Token = "0x17000244")]
		public override int Count
		{
			[Token(Token = "0x6000B9E")]
			[Address(RVA = "0x1E3A040", Offset = "0x1E3A040", VA = "0x1E3A040", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000B9F")]
		[Address(RVA = "0x1E3857C", Offset = "0x1E3857C", VA = "0x1E3857C")]
		public CGShape()
		{
		}

		[Token(Token = "0x6000BA0")]
		[Address(RVA = "0x1E38770", Offset = "0x1E38770", VA = "0x1E38770")]
		public CGShape(CGShape source)
		{
		}

		[Token(Token = "0x6000BA1")]
		public override T Clone<T>()
		{
			return null;
		}

		[Token(Token = "0x6000BA2")]
		[Address(RVA = "0x1E38BEC", Offset = "0x1E38BEC", VA = "0x1E38BEC")]
		public static void Copy(CGShape dest, CGShape source)
		{
		}

		[Token(Token = "0x6000BA3")]
		[Address(RVA = "0x1E3A05C", Offset = "0x1E3A05C", VA = "0x1E3A05C")]
		public void Copy(CGShape source)
		{
		}

		[Token(Token = "0x6000BA4")]
		[Address(RVA = "0x1E3A060", Offset = "0x1E3A060", VA = "0x1E3A060")]
		public float DistanceToF(float distance)
		{
			return default(float);
		}

		[Token(Token = "0x6000BA5")]
		[Address(RVA = "0x1E3A0EC", Offset = "0x1E3A0EC", VA = "0x1E3A0EC")]
		public float FToDistance(float f)
		{
			return default(float);
		}

		[Token(Token = "0x6000BA6")]
		[Address(RVA = "0x1E3904C", Offset = "0x1E3904C", VA = "0x1E3904C")]
		public int GetFIndex(float f, out float frag)
		{
			return default(int);
		}

		[Token(Token = "0x6000BA7")]
		[Address(RVA = "0x1E3A16C", Offset = "0x1E3A16C", VA = "0x1E3A16C")]
		public Vector3 InterpolatePosition(float f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000BA8")]
		[Address(RVA = "0x1E3A218", Offset = "0x1E3A218", VA = "0x1E3A218")]
		public Vector3 InterpolateUp(float f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000BA9")]
		[Address(RVA = "0x1E3A34C", Offset = "0x1E3A34C", VA = "0x1E3A34C")]
		public void Interpolate(float f, out Vector3 position, out Vector3 up)
		{
		}

		[Token(Token = "0x6000BAA")]
		[Address(RVA = "0x1E3A500", Offset = "0x1E3A500", VA = "0x1E3A500")]
		public void Move(ref float f, ref int direction, float speed, CurvyClamping clamping)
		{
		}

		[Token(Token = "0x6000BAB")]
		[Address(RVA = "0x1E3A544", Offset = "0x1E3A544", VA = "0x1E3A544")]
		public void MoveBy(ref float f, ref int direction, float speedDist, CurvyClamping clamping)
		{
		}

		[Token(Token = "0x6000BAC")]
		[Address(RVA = "0x1E394F8", Offset = "0x1E394F8", VA = "0x1E394F8", Slot = "6")]
		public virtual void Recalculate()
		{
		}

		[Token(Token = "0x6000BAD")]
		[Address(RVA = "0x1E3A5B8", Offset = "0x1E3A5B8", VA = "0x1E3A5B8")]
		public void RecalculateNormals(List<int> softEdges)
		{
		}
	}
	[Token(Token = "0x2000149")]
	[AttributeAttribute(Name = "CGDataInfoAttribute", RVA = "0xFC7340", Offset = "0xFC7340")]
	public class CGPath : CGShape
	{
		[Token(Token = "0x4000737")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3[] Direction;

		[Token(Token = "0x6000BAE")]
		[Address(RVA = "0x1E38514", Offset = "0x1E38514", VA = "0x1E38514")]
		public CGPath()
		{
		}

		[Token(Token = "0x6000BAF")]
		[Address(RVA = "0x1E386A4", Offset = "0x1E386A4", VA = "0x1E386A4")]
		public CGPath(CGPath source)
		{
		}

		[Token(Token = "0x6000BB0")]
		public override T Clone<T>()
		{
			return null;
		}

		[Token(Token = "0x6000BB1")]
		[Address(RVA = "0x1E38B50", Offset = "0x1E38B50", VA = "0x1E38B50")]
		public static void Copy(CGPath dest, CGPath source)
		{
		}

		[Token(Token = "0x6000BB2")]
		[Address(RVA = "0x1E38E3C", Offset = "0x1E38E3C", VA = "0x1E38E3C")]
		public void Interpolate(float f, out Vector3 position, out Vector3 direction, out Vector3 up)
		{
		}

		[Token(Token = "0x6000BB3")]
		[Address(RVA = "0x1E390BC", Offset = "0x1E390BC", VA = "0x1E390BC")]
		public void Interpolate(float f, float angleF, out Vector3 pos, out Vector3 dir, out Vector3 up)
		{
		}

		[Token(Token = "0x6000BB4")]
		[Address(RVA = "0x1E391B0", Offset = "0x1E391B0", VA = "0x1E391B0")]
		public Vector3 InterpolateDirection(float f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000BB5")]
		[Address(RVA = "0x1E392E4", Offset = "0x1E392E4", VA = "0x1E392E4", Slot = "6")]
		public override void Recalculate()
		{
		}
	}
	[Token(Token = "0x200014A")]
	[AttributeAttribute(Name = "CGDataInfoAttribute", RVA = "0xFC736C", Offset = "0xFC736C")]
	public class CGVolume : CGPath
	{
		[Token(Token = "0x4000738")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Vector3[] Vertex;

		[Token(Token = "0x4000739")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Vector3[] VertexNormal;

		[Token(Token = "0x400073A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float[] CrossF;

		[Token(Token = "0x400073B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float[] CrossMap;

		[Token(Token = "0x400073C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float[] SegmentLength;

		[Token(Token = "0x400073D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool CrossClosed;

		[Token(Token = "0x400073E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		public bool CrossSeamless;

		[Token(Token = "0x400073F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float CrossFShift;

		[Token(Token = "0x4000740")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public SamplePointsMaterialGroupCollection CrossMaterialGroups;

		[Token(Token = "0x17000245")]
		public int CrossSize
		{
			[Token(Token = "0x6000BB6")]
			[Address(RVA = "0x1E3C4AC", Offset = "0x1E3C4AC", VA = "0x1E3C4AC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000246")]
		public int VertexCount
		{
			[Token(Token = "0x6000BB7")]
			[Address(RVA = "0x1E3EA44", Offset = "0x1E3EA44", VA = "0x1E3EA44")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000BB8")]
		[Address(RVA = "0x1E3EA60", Offset = "0x1E3EA60", VA = "0x1E3EA60")]
		public CGVolume()
		{
		}

		[Token(Token = "0x6000BB9")]
		[Address(RVA = "0x1E3EB24", Offset = "0x1E3EB24", VA = "0x1E3EB24")]
		public CGVolume(int samplePoints, CGShape crossShape)
		{
		}

		[Token(Token = "0x6000BBA")]
		[Address(RVA = "0x1E3ED88", Offset = "0x1E3ED88", VA = "0x1E3ED88")]
		public CGVolume(CGPath path, CGShape crossShape)
		{
		}

		[Token(Token = "0x6000BBB")]
		[Address(RVA = "0x1E3EFF4", Offset = "0x1E3EFF4", VA = "0x1E3EFF4")]
		public CGVolume(CGVolume source)
		{
		}

		[Token(Token = "0x6000BBC")]
		[Address(RVA = "0x1E3F294", Offset = "0x1E3F294", VA = "0x1E3F294")]
		public static CGVolume Get(CGVolume data, CGPath path, CGShape crossShape)
		{
			return null;
		}

		[Token(Token = "0x6000BBD")]
		public override T Clone<T>()
		{
			return null;
		}

		[Token(Token = "0x6000BBE")]
		[Address(RVA = "0x1E3F47C", Offset = "0x1E3F47C", VA = "0x1E3F47C")]
		public void InterpolateVolume(float f, float crossF, out Vector3 pos, out Vector3 dir, out Vector3 up)
		{
		}

		[Token(Token = "0x6000BBF")]
		[Address(RVA = "0x1E3F848", Offset = "0x1E3F848", VA = "0x1E3F848")]
		public Vector3 InterpolateVolumePosition(float f, float crossF)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000BC0")]
		[Address(RVA = "0x1E3FB30", Offset = "0x1E3FB30", VA = "0x1E3FB30")]
		public Vector3 InterpolateVolumeDirection(float f, float crossF)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000BC1")]
		[Address(RVA = "0x1E3FCF0", Offset = "0x1E3FCF0", VA = "0x1E3FCF0")]
		public Vector3 InterpolateVolumeUp(float f, float crossF)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000BC2")]
		[Address(RVA = "0x1E3FF70", Offset = "0x1E3FF70", VA = "0x1E3FF70")]
		public float GetCrossLength(float pathF)
		{
			return default(float);
		}

		[Token(Token = "0x6000BC3")]
		[Address(RVA = "0x1E40350", Offset = "0x1E40350", VA = "0x1E40350")]
		public float CrossFToDistance(float f, float crossF, CurvyClamping crossClamping = CurvyClamping.Clamp)
		{
			return default(float);
		}

		[Token(Token = "0x6000BC4")]
		[Address(RVA = "0x1E40394", Offset = "0x1E40394", VA = "0x1E40394")]
		public float CrossDistanceToF(float f, float distance, CurvyClamping crossClamping = CurvyClamping.Clamp)
		{
			return default(float);
		}

		[Token(Token = "0x6000BC5")]
		[Address(RVA = "0x1E400F8", Offset = "0x1E400F8", VA = "0x1E400F8")]
		public void GetSegmentIndices(float pathF, out int s0Index, out int s1Index, out float frag)
		{
		}

		[Token(Token = "0x6000BC6")]
		[Address(RVA = "0x1E403DC", Offset = "0x1E403DC", VA = "0x1E403DC")]
		public int GetSegmentIndex(int segment)
		{
			return default(int);
		}

		[Token(Token = "0x6000BC7")]
		[Address(RVA = "0x1E403FC", Offset = "0x1E403FC", VA = "0x1E403FC")]
		public int GetCrossFIndex(float crossF, out float frag)
		{
			return default(int);
		}

		[Token(Token = "0x6000BC8")]
		[Address(RVA = "0x1E404AC", Offset = "0x1E404AC", VA = "0x1E404AC")]
		public int GetVertexIndex(float pathF, out float pathFrag)
		{
			return default(int);
		}

		[Token(Token = "0x6000BC9")]
		[Address(RVA = "0x1E3F7F8", Offset = "0x1E3F7F8", VA = "0x1E3F7F8")]
		public int GetVertexIndex(float pathF, float crossF, out float pathFrag, out float crossFrag)
		{
			return default(int);
		}

		[Token(Token = "0x6000BCA")]
		[Address(RVA = "0x1E40530", Offset = "0x1E40530", VA = "0x1E40530")]
		public Vector3[] GetSegmentVertices(params int[] segmentIndices)
		{
			return null;
		}

		[Token(Token = "0x6000BCB")]
		[Address(RVA = "0x1E401E4", Offset = "0x1E401E4", VA = "0x1E401E4")]
		private float calcSegmentLength(int segmentIndex)
		{
			return default(float);
		}
	}
	[Token(Token = "0x200014B")]
	[AttributeAttribute(Name = "CGDataInfoAttribute", RVA = "0xFC7394", Offset = "0xFC7394")]
	public class CGBounds : CGData
	{
		[Token(Token = "0x4000741")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Bounds? mBounds;

		[Token(Token = "0x17000247")]
		public Bounds Bounds
		{
			[Token(Token = "0x6000BCC")]
			[Address(RVA = "0x1BFBFCC", Offset = "0x1BFBFCC", VA = "0x1BFBFCC")]
			get
			{
				return default(Bounds);
			}
			[Token(Token = "0x6000BCD")]
			[Address(RVA = "0x1BFC048", Offset = "0x1BFC048", VA = "0x1BFC048")]
			set
			{
			}
		}

		[Token(Token = "0x17000248")]
		public float Depth
		{
			[Token(Token = "0x6000BCE")]
			[Address(RVA = "0x1BFC154", Offset = "0x1BFC154", VA = "0x1BFC154")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000BCF")]
		[Address(RVA = "0x1BFC19C", Offset = "0x1BFC19C", VA = "0x1BFC19C")]
		public CGBounds()
		{
		}

		[Token(Token = "0x6000BD0")]
		[Address(RVA = "0x1BFC1AC", Offset = "0x1BFC1AC", VA = "0x1BFC1AC")]
		public CGBounds(Bounds bounds)
		{
		}

		[Token(Token = "0x6000BD1")]
		[Address(RVA = "0x1BFC1F8", Offset = "0x1BFC1F8", VA = "0x1BFC1F8")]
		public CGBounds(CGBounds source)
		{
		}

		[Token(Token = "0x6000BD2")]
		[Address(RVA = "0x1BFC2A0", Offset = "0x1BFC2A0", VA = "0x1BFC2A0", Slot = "6")]
		public virtual void RecalculateBounds()
		{
		}

		[Token(Token = "0x6000BD3")]
		public override T Clone<T>()
		{
			return null;
		}

		[Token(Token = "0x6000BD4")]
		[Address(RVA = "0x1BFC2C8", Offset = "0x1BFC2C8", VA = "0x1BFC2C8")]
		public static void Copy(CGBounds dest, CGBounds source)
		{
		}
	}
	[Token(Token = "0x200014C")]
	public class CGVSubMesh : CGData
	{
		[Token(Token = "0x4000742")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int[] Triangles;

		[Token(Token = "0x4000743")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material Material;

		[Token(Token = "0x17000249")]
		public override int Count
		{
			[Token(Token = "0x6000BD5")]
			[Address(RVA = "0x1E3E89C", Offset = "0x1E3E89C", VA = "0x1E3E89C", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000BD6")]
		[Address(RVA = "0x1E3E338", Offset = "0x1E3E338", VA = "0x1E3E338")]
		public CGVSubMesh([Optional] Material material)
		{
		}

		[Token(Token = "0x6000BD7")]
		[Address(RVA = "0x1E3CC58", Offset = "0x1E3CC58", VA = "0x1E3CC58")]
		public CGVSubMesh(int[] triangles, [Optional] Material material)
		{
		}

		[Token(Token = "0x6000BD8")]
		[Address(RVA = "0x1E3E8B8", Offset = "0x1E3E8B8", VA = "0x1E3E8B8")]
		public CGVSubMesh(int triangleCount, [Optional] Material material)
		{
		}

		[Token(Token = "0x6000BD9")]
		[Address(RVA = "0x1E3C76C", Offset = "0x1E3C76C", VA = "0x1E3C76C")]
		public CGVSubMesh(CGVSubMesh source)
		{
		}

		[Token(Token = "0x6000BDA")]
		public override T Clone<T>()
		{
			return null;
		}

		[Token(Token = "0x6000BDB")]
		[Address(RVA = "0x1E3E944", Offset = "0x1E3E944", VA = "0x1E3E944")]
		public static CGVSubMesh Get(CGVSubMesh data, int triangleCount, [Optional] Material material)
		{
			return null;
		}

		[Token(Token = "0x6000BDC")]
		[Address(RVA = "0x1E3E9E8", Offset = "0x1E3E9E8", VA = "0x1E3E9E8")]
		public void ShiftIndices(int offset, int startIndex = 0)
		{
		}

		[Token(Token = "0x6000BDD")]
		[Address(RVA = "0x1E3D8A4", Offset = "0x1E3D8A4", VA = "0x1E3D8A4")]
		public void Add(CGVSubMesh other, int shiftIndexOffset = 0)
		{
		}
	}
	[Token(Token = "0x200014D")]
	[AttributeAttribute(Name = "CGDataInfoAttribute", RVA = "0xFC73B8", Offset = "0xFC73B8")]
	public class CGVMesh : CGBounds
	{
		[Token(Token = "0x4000744")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3[] Vertex;

		[Token(Token = "0x4000745")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector2[] UV;

		[Token(Token = "0x4000746")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector2[] UV2;

		[Token(Token = "0x4000747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector3[] Normal;

		[Token(Token = "0x4000748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector4[] Tangents;

		[Token(Token = "0x4000749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public CGVSubMesh[] SubMeshes;

		[Token(Token = "0x1700024A")]
		public override int Count
		{
			[Token(Token = "0x6000BDE")]
			[Address(RVA = "0x1E3C0DC", Offset = "0x1E3C0DC", VA = "0x1E3C0DC", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700024B")]
		public bool HasUV
		{
			[Token(Token = "0x6000BDF")]
			[Address(RVA = "0x1E3C0F8", Offset = "0x1E3C0F8", VA = "0x1E3C0F8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700024C")]
		public bool HasUV2
		{
			[Token(Token = "0x6000BE0")]
			[Address(RVA = "0x1E3C11C", Offset = "0x1E3C11C", VA = "0x1E3C11C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700024D")]
		public bool HasNormals
		{
			[Token(Token = "0x6000BE1")]
			[Address(RVA = "0x1E3C140", Offset = "0x1E3C140", VA = "0x1E3C140")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700024E")]
		public bool HasTangents
		{
			[Token(Token = "0x6000BE2")]
			[Address(RVA = "0x1E3C164", Offset = "0x1E3C164", VA = "0x1E3C164")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700024F")]
		public int TriangleCount
		{
			[Token(Token = "0x6000BE3")]
			[Address(RVA = "0x1E3C188", Offset = "0x1E3C188", VA = "0x1E3C188")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000BE4")]
		[Address(RVA = "0x1E3C214", Offset = "0x1E3C214", VA = "0x1E3C214")]
		public CGVMesh()
		{
		}

		[Token(Token = "0x6000BE5")]
		[Address(RVA = "0x1E3C22C", Offset = "0x1E3C22C", VA = "0x1E3C22C")]
		public CGVMesh(int vertexCount, bool addUV = false, bool addUV2 = false, bool addNormals = false, bool addTangents = false)
		{
		}

		[Token(Token = "0x6000BE6")]
		[Address(RVA = "0x1E3C378", Offset = "0x1E3C378", VA = "0x1E3C378")]
		public CGVMesh(CGVolume volume)
		{
		}

		[Token(Token = "0x6000BE7")]
		[Address(RVA = "0x1E3C3D4", Offset = "0x1E3C3D4", VA = "0x1E3C3D4")]
		public CGVMesh(CGVolume volume, IntRegion subset)
		{
		}

		[Token(Token = "0x6000BE8")]
		[Address(RVA = "0x1E3C4C8", Offset = "0x1E3C4C8", VA = "0x1E3C4C8")]
		public CGVMesh(CGVMesh source)
		{
		}

		[Token(Token = "0x6000BE9")]
		[Address(RVA = "0x1E3C828", Offset = "0x1E3C828", VA = "0x1E3C828")]
		public CGVMesh(CGMeshProperties meshProperties)
		{
		}

		[Token(Token = "0x6000BEA")]
		[Address(RVA = "0x1E3C894", Offset = "0x1E3C894", VA = "0x1E3C894")]
		public CGVMesh(Mesh source, Material[] materials, Matrix4x4 trsMatrix)
		{
		}

		[Token(Token = "0x6000BEB")]
		public override T Clone<T>()
		{
			return null;
		}

		[Token(Token = "0x6000BEC")]
		[Address(RVA = "0x1E3CF00", Offset = "0x1E3CF00", VA = "0x1E3CF00")]
		public static CGVMesh Get(CGVMesh data, CGVolume source, bool addUV, bool reverseNormals)
		{
			return null;
		}

		[Token(Token = "0x6000BED")]
		[Address(RVA = "0x1E3CF88", Offset = "0x1E3CF88", VA = "0x1E3CF88")]
		public static CGVMesh Get(CGVMesh data, CGVolume source, IntRegion subset, bool addUV, bool reverseNormals)
		{
			return null;
		}

		[Token(Token = "0x6000BEE")]
		[Address(RVA = "0x1E3D28C", Offset = "0x1E3D28C", VA = "0x1E3D28C")]
		public void SetSubMeshCount(int count)
		{
		}

		[Token(Token = "0x6000BEF")]
		[Address(RVA = "0x1E3D2EC", Offset = "0x1E3D2EC", VA = "0x1E3D2EC")]
		public void AddSubMesh([Optional] CGVSubMesh submesh)
		{
		}

		[Token(Token = "0x6000BF0")]
		[Address(RVA = "0x1E3D35C", Offset = "0x1E3D35C", VA = "0x1E3D35C")]
		public void MergeVMesh(CGVMesh source)
		{
		}

		[Token(Token = "0x6000BF1")]
		[Address(RVA = "0x1E3D9A8", Offset = "0x1E3D9A8", VA = "0x1E3D9A8")]
		public void MergeVMesh(CGVMesh source, Matrix4x4 matrix)
		{
		}

		[Token(Token = "0x6000BF2")]
		[Address(RVA = "0x1E3DBA8", Offset = "0x1E3DBA8", VA = "0x1E3DBA8")]
		public void MergeVMeshes(List<CGVMesh> vMeshes, int startIndex, int endIndex)
		{
		}

		[Token(Token = "0x6000BF3")]
		[Address(RVA = "0x1E3D49C", Offset = "0x1E3D49C", VA = "0x1E3D49C")]
		private void MergeUVsNormalsAndTangents(CGVMesh source, int preMergeVertexCount)
		{
		}

		[Token(Token = "0x6000BF4")]
		[Address(RVA = "0x1E3D770", Offset = "0x1E3D770", VA = "0x1E3D770")]
		public CGVSubMesh GetMaterialSubMesh(Material mat, bool createIfMissing = true)
		{
			return null;
		}

		[Token(Token = "0x6000BF5")]
		[Address(RVA = "0x1E3E3C0", Offset = "0x1E3E3C0", VA = "0x1E3E3C0")]
		public Mesh AsMesh()
		{
			return null;
		}

		[Token(Token = "0x6000BF6")]
		[Address(RVA = "0x1E3E438", Offset = "0x1E3E438", VA = "0x1E3E438")]
		public void ToMesh(ref Mesh msh)
		{
		}

		[Token(Token = "0x6000BF7")]
		[Address(RVA = "0x1E3E574", Offset = "0x1E3E574", VA = "0x1E3E574")]
		public Material[] GetMaterials()
		{
			return null;
		}

		[Token(Token = "0x6000BF8")]
		[Address(RVA = "0x1E3E658", Offset = "0x1E3E658", VA = "0x1E3E658", Slot = "6")]
		public override void RecalculateBounds()
		{
		}

		[Token(Token = "0x6000BF9")]
		[Address(RVA = "0x1E3E86C", Offset = "0x1E3E86C", VA = "0x1E3E86C")]
		public void RecalculateUV2()
		{
		}

		[Token(Token = "0x6000BFA")]
		[Address(RVA = "0x1E3CCA8", Offset = "0x1E3CCA8", VA = "0x1E3CCA8")]
		public void TRS(Matrix4x4 matrix)
		{
		}

		[Token(Token = "0x6000BFB")]
		private void copyData<T>(ref T[] src, ref T[] dst, int currentSize, int extraSize)
		{
		}
	}
	[Token(Token = "0x200014E")]
	[AttributeAttribute(Name = "CGDataInfoAttribute", RVA = "0xFC73DC", Offset = "0xFC73DC")]
	public class CGGameObject : CGBounds
	{
		[Token(Token = "0x400074A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject Object;

		[Token(Token = "0x400074B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 Translate;

		[Token(Token = "0x400074C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Vector3 Rotate;

		[Token(Token = "0x400074D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector3 Scale;

		[Token(Token = "0x17000250")]
		public Matrix4x4 Matrix
		{
			[Token(Token = "0x6000BFC")]
			[Address(RVA = "0x1BFE5FC", Offset = "0x1BFE5FC", VA = "0x1BFE5FC")]
			get
			{
				return default(Matrix4x4);
			}
		}

		[Token(Token = "0x6000BFD")]
		[Address(RVA = "0x1BFE71C", Offset = "0x1BFE71C", VA = "0x1BFE71C")]
		public CGGameObject()
		{
		}

		[Token(Token = "0x6000BFE")]
		[Address(RVA = "0x1BFE794", Offset = "0x1BFE794", VA = "0x1BFE794")]
		public CGGameObject(CGGameObjectProperties properties)
		{
		}

		[Token(Token = "0x6000BFF")]
		[Address(RVA = "0x1BFE944", Offset = "0x1BFE944", VA = "0x1BFE944")]
		public CGGameObject(GameObject obj)
		{
		}

		[Token(Token = "0x6000C00")]
		[Address(RVA = "0x1BFE7DC", Offset = "0x1BFE7DC", VA = "0x1BFE7DC")]
		public CGGameObject(GameObject obj, Vector3 translate, Vector3 rotate, Vector3 scale)
		{
		}

		[Token(Token = "0x6000C01")]
		[Address(RVA = "0x1BFEA2C", Offset = "0x1BFEA2C", VA = "0x1BFEA2C")]
		public CGGameObject(CGGameObject source)
		{
		}

		[Token(Token = "0x6000C02")]
		public override T Clone<T>()
		{
			return null;
		}

		[Token(Token = "0x6000C03")]
		[Address(RVA = "0x1BFEAFC", Offset = "0x1BFEAFC", VA = "0x1BFEAFC")]
		public static CGGameObject Get(CGGameObject data, GameObject obj, Vector3 translate, Vector3 rotate, Vector3 scale)
		{
			return null;
		}

		[Token(Token = "0x6000C04")]
		[Address(RVA = "0x1BFEC40", Offset = "0x1BFEC40", VA = "0x1BFEC40", Slot = "6")]
		public override void RecalculateBounds()
		{
		}
	}
	[Token(Token = "0x200014F")]
	[AttributeAttribute(Name = "CGDataInfoAttribute", RVA = "0xFC7414", Offset = "0xFC7414")]
	public class CGSpots : CGData
	{
		[Token(Token = "0x400074E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CGSpot[] Points;

		[Token(Token = "0x17000251")]
		public override int Count
		{
			[Token(Token = "0x6000C05")]
			[Address(RVA = "0x1E3B6F0", Offset = "0x1E3B6F0", VA = "0x1E3B6F0", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000C06")]
		[Address(RVA = "0x1E3B70C", Offset = "0x1E3B70C", VA = "0x1E3B70C")]
		public CGSpots()
		{
		}

		[Token(Token = "0x6000C07")]
		[Address(RVA = "0x1E3B778", Offset = "0x1E3B778", VA = "0x1E3B778")]
		public CGSpots(params CGSpot[] points)
		{
		}

		[Token(Token = "0x6000C08")]
		[Address(RVA = "0x1E3B7AC", Offset = "0x1E3B7AC", VA = "0x1E3B7AC")]
		public CGSpots(params List<CGSpot>[] lists)
		{
		}

		[Token(Token = "0x6000C09")]
		[Address(RVA = "0x1E3B8EC", Offset = "0x1E3B8EC", VA = "0x1E3B8EC")]
		public CGSpots(CGSpots source)
		{
		}

		[Token(Token = "0x6000C0A")]
		public override T Clone<T>()
		{
			return null;
		}
	}
	[Token(Token = "0x2000150")]
	public class CGDataRequestParameter
	{
		[Token(Token = "0x6000C0B")]
		[Address(RVA = "0x1BFE13C", Offset = "0x1BFE13C", VA = "0x1BFE13C")]
		public static implicit operator bool(CGDataRequestParameter a)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C0C")]
		[Address(RVA = "0x1BFDF78", Offset = "0x1BFDF78", VA = "0x1BFDF78")]
		public CGDataRequestParameter()
		{
		}
	}
	[Token(Token = "0x2000151")]
	public class CGDataRequestMetaCGOptions : CGDataRequestParameter
	{
		[Token(Token = "0x400074F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool CheckHardEdges;

		[Token(Token = "0x4000750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool CheckMaterialID;

		[Token(Token = "0x4000751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public bool IncludeControlPoints;

		[Token(Token = "0x4000752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
		public bool CheckExtendedUV;

		[Token(Token = "0x6000C0D")]
		[Address(RVA = "0x1BFDF14", Offset = "0x1BFDF14", VA = "0x1BFDF14")]
		public CGDataRequestMetaCGOptions(bool checkEdges, bool checkMaterials, bool includeCP, bool extendedUV)
		{
		}

		[Token(Token = "0x6000C0E")]
		[Address(RVA = "0x1BFDF80", Offset = "0x1BFDF80", VA = "0x1BFDF80", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C0F")]
		[Address(RVA = "0x1BFE094", Offset = "0x1BFE094", VA = "0x1BFE094", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000152")]
	public class CGDataRequestShapeRasterization : CGDataRequestRasterization
	{
		[Token(Token = "0x4000753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float[] PathF;

		[Token(Token = "0x6000C10")]
		[Address(RVA = "0x1BFE4A0", Offset = "0x1BFE4A0", VA = "0x1BFE4A0")]
		public CGDataRequestShapeRasterization(float[] pathF, float start, float rasterizedRelativeLength, int resolution, float angle, ModeEnum mode = ModeEnum.Even)
		{
		}

		[Token(Token = "0x6000C11")]
		[Address(RVA = "0x1BFE4D8", Offset = "0x1BFE4D8", VA = "0x1BFE4D8", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C12")]
		[Address(RVA = "0x1BFE5B8", Offset = "0x1BFE5B8", VA = "0x1BFE5B8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000153")]
	public class CGDataRequestRasterization : CGDataRequestParameter
	{
		[Token(Token = "0x2000234")]
		public enum ModeEnum
		{
			[Token(Token = "0x4000B66")]
			Even,
			[Token(Token = "0x4000B67")]
			Optimized
		}

		[Token(Token = "0x4000754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float Start;

		[Token(Token = "0x4000755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float RasterizedRelativeLength;

		[Token(Token = "0x4000756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int Resolution;

		[Token(Token = "0x4000757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFCEC34", Offset = "0xFCEC34")]
		public float SplineAbsoluteLength;

		[Token(Token = "0x4000758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float AngleThreshold;

		[Token(Token = "0x4000759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public ModeEnum Mode;

		[Token(Token = "0x6000C13")]
		[Address(RVA = "0x1BFE148", Offset = "0x1BFE148", VA = "0x1BFE148")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD6F7C", Offset = "0xFD6F7C")]
		public CGDataRequestRasterization(float start, float rasterizedRelativeLength, int resolution, float splineAbsoluteLength, float angle, ModeEnum mode = ModeEnum.Even)
		{
		}

		[Token(Token = "0x6000C14")]
		[Address(RVA = "0x1BFE214", Offset = "0x1BFE214", VA = "0x1BFE214")]
		public CGDataRequestRasterization(float start, float rasterizedRelativeLength, int resolution, float angle, ModeEnum mode = ModeEnum.Even)
		{
		}

		[Token(Token = "0x6000C15")]
		[Address(RVA = "0x1BFE2DC", Offset = "0x1BFE2DC", VA = "0x1BFE2DC")]
		public CGDataRequestRasterization(CGDataRequestRasterization source)
		{
		}

		[Token(Token = "0x6000C16")]
		[Address(RVA = "0x1BFE304", Offset = "0x1BFE304", VA = "0x1BFE304", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C17")]
		[Address(RVA = "0x1BFE3EC", Offset = "0x1BFE3EC", VA = "0x1BFE3EC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000154")]
	public interface INoProcessing
	{
	}
	[Token(Token = "0x2000155")]
	public interface IExternalInput
	{
		[Token(Token = "0x17000252")]
		bool SupportsIPE
		{
			[Token(Token = "0x6000C18")]
			get;
		}
	}
	[Token(Token = "0x2000156")]
	public interface IOnRequestProcessing
	{
		[Token(Token = "0x6000C19")]
		CGData[] OnSlotDataRequest(CGModuleInputSlot requestedBy, CGModuleOutputSlot requestedSlot, params CGDataRequestParameter[] requests);
	}
	[Token(Token = "0x2000157")]
	public interface IPathProvider
	{
		[Token(Token = "0x17000253")]
		bool PathIsClosed
		{
			[Token(Token = "0x6000C1A")]
			get;
		}
	}
	[Token(Token = "0x2000158")]
	public interface IOnRequestPath : IOnRequestProcessing, IPathProvider
	{
		[Token(Token = "0x17000254")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD7D54", Offset = "0xFD7D54")]
		float PathLength
		{
			[Token(Token = "0x6000C1B")]
			get;
		}
	}
	[Token(Token = "0x2000159")]
	public interface ICGResourceLoader
	{
		[Token(Token = "0x6000C1C")]
		UnityEngine.Component Create(CGModule cgModule, string context);

		[Token(Token = "0x6000C1D")]
		void Destroy(CGModule cgModule, UnityEngine.Component obj, string context, bool kill);
	}
	[Token(Token = "0x200015A")]
	public interface ICGResourceCollection
	{
		[Token(Token = "0x17000255")]
		int Count
		{
			[Token(Token = "0x6000C1E")]
			get;
		}

		[Token(Token = "0x17000256")]
		UnityEngine.Component[] ItemsArray
		{
			[Token(Token = "0x6000C1F")]
			get;
		}
	}
	[Token(Token = "0x200015B")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xFC7438", Offset = "0xFC7438")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC7438", Offset = "0xFC7438")]
	public class CGMeshResource : DuplicateEditorMesh, IPoolable
	{
		[Token(Token = "0x400075A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private MeshRenderer mRenderer;

		[Token(Token = "0x400075B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Collider mCollider;

		[Token(Token = "0x17000257")]
		public MeshRenderer Renderer
		{
			[Token(Token = "0x6000C20")]
			[Address(RVA = "0x1C00144", Offset = "0x1C00144", VA = "0x1C00144")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000258")]
		public Collider Collider
		{
			[Token(Token = "0x6000C21")]
			[Address(RVA = "0x1C001F0", Offset = "0x1C001F0", VA = "0x1C001F0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C22")]
		[Address(RVA = "0x1C0029C", Offset = "0x1C0029C", VA = "0x1C0029C")]
		public Mesh Prepare()
		{
			return null;
		}

		[Token(Token = "0x6000C23")]
		[Address(RVA = "0x1C002F8", Offset = "0x1C002F8", VA = "0x1C002F8")]
		public bool ColliderMatches(CGColliderEnum type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C24")]
		[Address(RVA = "0x1C004BC", Offset = "0x1C004BC", VA = "0x1C004BC")]
		public void RemoveCollider()
		{
		}

		[Token(Token = "0x6000C25")]
		[Address(RVA = "0x1C005BC", Offset = "0x1C005BC", VA = "0x1C005BC")]
		public bool UpdateCollider(CGColliderEnum mode, bool convex, bool isTrigger, PhysicMaterial material, MeshColliderCookingOptions meshCookingOptions = MeshColliderCookingOptions.CookForFasterSimulation | MeshColliderCookingOptions.EnableMeshCleaning | MeshColliderCookingOptions.WeldColocatedVertices)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C26")]
		[Address(RVA = "0x1C00D28", Offset = "0x1C00D28", VA = "0x1C00D28", Slot = "5")]
		public void OnBeforePush()
		{
		}

		[Token(Token = "0x6000C27")]
		[Address(RVA = "0x1C00D2C", Offset = "0x1C00D2C", VA = "0x1C00D2C", Slot = "6")]
		public void OnAfterPop()
		{
		}

		[Token(Token = "0x6000C28")]
		[Address(RVA = "0x1C00D30", Offset = "0x1C00D30", VA = "0x1C00D30")]
		public CGMeshResource()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200015C")]
	public class CGMeshResourceCollection : ICGResourceCollection
	{
		[Token(Token = "0x400075C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<CGMeshResource> Items;

		[Token(Token = "0x17000259")]
		public int Count
		{
			[Token(Token = "0x6000C29")]
			[Address(RVA = "0x1C00D38", Offset = "0x1C00D38", VA = "0x1C00D38", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700025A")]
		public UnityEngine.Component[] ItemsArray
		{
			[Token(Token = "0x6000C2A")]
			[Address(RVA = "0x1C00D88", Offset = "0x1C00D88", VA = "0x1C00D88", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C2B")]
		[Address(RVA = "0x1C00DE0", Offset = "0x1C00DE0", VA = "0x1C00DE0")]
		public CGMeshResourceCollection()
		{
		}
	}
	[Token(Token = "0x200015D")]
	[ExecuteInEditMode]
	public abstract class CGModule : DTVersionedMonoBehaviour
	{
		[Token(Token = "0x400075D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0xFCEC6C", Offset = "0xFCEC6C")]
		[SerializeField]
		protected CurvyCGEvent m_OnBeforeRefresh;

		[Token(Token = "0x400075E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0xFCECC4", Offset = "0xFCECC4")]
		[SerializeField]
		protected CurvyCGEvent m_OnRefresh;

		[Token(Token = "0x400075F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[HideInInspector]
		private string m_ModuleName;

		[Token(Token = "0x4000760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[HideInInspector]
		private bool m_Active;

		[Token(Token = "0x4000761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0xFCED80", Offset = "0xFCED80")]
		[AttributeAttribute(Name = "GroupConditionAttribute", RVA = "0xFCED80", Offset = "0xFCED80")]
		[AttributeAttribute(Name = "FieldActionAttribute", RVA = "0xFCED80", Offset = "0xFCED80")]
		[SerializeField]
		private bool m_RandomizeSeed;

		[Token(Token = "0x4000762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		[HideInInspector]
		private int m_Seed;

		[NonSerialized]
		[Token(Token = "0x4000763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<string> UIMessages;

		[Token(Token = "0x4000764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private CurvyGenerator mGenerator;

		[Token(Token = "0x4000765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[HideInInspector]
		private int m_UniqueID;

		[Token(Token = "0x4000766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFCEE9C", Offset = "0xFCEE9C")]
		private bool <CircularReferenceError>k__BackingField;

		[Token(Token = "0x4000767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal int SortAncestors;

		[Token(Token = "0x4000768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		public CGModuleProperties Properties;

		[Token(Token = "0x4000769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		public List<CGModuleLink> InputLinks;

		[Token(Token = "0x400076A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HideInInspector]
		public List<CGModuleLink> OutputLinks;

		[Token(Token = "0x400076B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFCEEDC", Offset = "0xFCEEDC")]
		private Dictionary<string, CGModuleInputSlot> <InputByName>k__BackingField;

		[Token(Token = "0x400076C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFCEEEC", Offset = "0xFCEEEC")]
		private Dictionary<string, CGModuleOutputSlot> <OutputByName>k__BackingField;

		[Token(Token = "0x400076D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFCEEFC", Offset = "0xFCEEFC")]
		private List<CGModuleInputSlot> <Input>k__BackingField;

		[Token(Token = "0x400076E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFCEF0C", Offset = "0xFCEF0C")]
		private List<CGModuleOutputSlot> <Output>k__BackingField;

		[Token(Token = "0x400076F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private ModuleInfoAttribute mInfo;

		[Token(Token = "0x4000770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private bool mDirty;

		[Token(Token = "0x4000771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		private bool mInitialized;

		[Token(Token = "0x4000772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA2")]
		private bool mStateChangeDirty;

		[Token(Token = "0x4000773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA3")]
		private bool mLastIsConfiguredState;

		[Token(Token = "0x1700025B")]
		public CurvyCGEvent OnBeforeRefresh
		{
			[Token(Token = "0x6000C2C")]
			[Address(RVA = "0x1C0117C", Offset = "0x1C0117C", VA = "0x1C0117C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C2D")]
			[Address(RVA = "0x1C01184", Offset = "0x1C01184", VA = "0x1C01184")]
			set
			{
			}
		}

		[Token(Token = "0x1700025C")]
		public CurvyCGEvent OnRefresh
		{
			[Token(Token = "0x6000C2E")]
			[Address(RVA = "0x1C0119C", Offset = "0x1C0119C", VA = "0x1C0119C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C2F")]
			[Address(RVA = "0x1C011A4", Offset = "0x1C011A4", VA = "0x1C011A4")]
			set
			{
			}
		}

		[Token(Token = "0x1700025D")]
		public string ModuleName
		{
			[Token(Token = "0x6000C32")]
			[Address(RVA = "0x1C01294", Offset = "0x1C01294", VA = "0x1C01294")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C33")]
			[Address(RVA = "0x1C0129C", Offset = "0x1C0129C", VA = "0x1C0129C")]
			set
			{
			}
		}

		[Token(Token = "0x1700025E")]
		public bool Active
		{
			[Token(Token = "0x6000C34")]
			[Address(RVA = "0x1C014D8", Offset = "0x1C014D8", VA = "0x1C014D8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C35")]
			[Address(RVA = "0x1C014E0", Offset = "0x1C014E0", VA = "0x1C014E0")]
			set
			{
			}
		}

		[Token(Token = "0x1700025F")]
		public int Seed
		{
			[Token(Token = "0x6000C36")]
			[Address(RVA = "0x1C017CC", Offset = "0x1C017CC", VA = "0x1C017CC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C37")]
			[Address(RVA = "0x1C017D4", Offset = "0x1C017D4", VA = "0x1C017D4")]
			set
			{
			}
		}

		[Token(Token = "0x17000260")]
		public bool RandomizeSeed
		{
			[Token(Token = "0x6000C38")]
			[Address(RVA = "0x1C017EC", Offset = "0x1C017EC", VA = "0x1C017EC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C39")]
			[Address(RVA = "0x1C017F4", Offset = "0x1C017F4", VA = "0x1C017F4")]
			set
			{
			}
		}

		[Token(Token = "0x17000261")]
		public CurvyGenerator Generator
		{
			[Token(Token = "0x6000C3A")]
			[Address(RVA = "0x1C01814", Offset = "0x1C01814", VA = "0x1C01814")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000262")]
		public int UniqueID
		{
			[Token(Token = "0x6000C3B")]
			[Address(RVA = "0x1C0181C", Offset = "0x1C0181C", VA = "0x1C0181C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000263")]
		public bool CircularReferenceError
		{
			[Token(Token = "0x6000C3C")]
			[Address(RVA = "0x1C01824", Offset = "0x1C01824", VA = "0x1C01824")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6FB4", Offset = "0xFD6FB4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C3D")]
			[Address(RVA = "0x1C0182C", Offset = "0x1C0182C", VA = "0x1C0182C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6FC4", Offset = "0xFD6FC4")]
			set
			{
			}
		}

		[Token(Token = "0x17000264")]
		public Dictionary<string, CGModuleInputSlot> InputByName
		{
			[Token(Token = "0x6000C3E")]
			[Address(RVA = "0x1C01838", Offset = "0x1C01838", VA = "0x1C01838")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6FD4", Offset = "0xFD6FD4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C3F")]
			[Address(RVA = "0x1C01840", Offset = "0x1C01840", VA = "0x1C01840")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6FE4", Offset = "0xFD6FE4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000265")]
		public Dictionary<string, CGModuleOutputSlot> OutputByName
		{
			[Token(Token = "0x6000C40")]
			[Address(RVA = "0x1C01848", Offset = "0x1C01848", VA = "0x1C01848")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD6FF4", Offset = "0xFD6FF4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C41")]
			[Address(RVA = "0x1C01850", Offset = "0x1C01850", VA = "0x1C01850")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD7004", Offset = "0xFD7004")]
			private set
			{
			}
		}

		[Token(Token = "0x17000266")]
		public List<CGModuleInputSlot> Input
		{
			[Token(Token = "0x6000C42")]
			[Address(RVA = "0x1C01858", Offset = "0x1C01858", VA = "0x1C01858")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD7014", Offset = "0xFD7014")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C43")]
			[Address(RVA = "0x1C01860", Offset = "0x1C01860", VA = "0x1C01860")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD7024", Offset = "0xFD7024")]
			private set
			{
			}
		}

		[Token(Token = "0x17000267")]
		public List<CGModuleOutputSlot> Output
		{
			[Token(Token = "0x6000C44")]
			[Address(RVA = "0x1C01868", Offset = "0x1C01868", VA = "0x1C01868")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD7034", Offset = "0xFD7034")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C45")]
			[Address(RVA = "0x1C01870", Offset = "0x1C01870", VA = "0x1C01870")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD7044", Offset = "0xFD7044")]
			private set
			{
			}
		}

		[Token(Token = "0x17000268")]
		public ModuleInfoAttribute Info
		{
			[Token(Token = "0x6000C46")]
			[Address(RVA = "0x1C01878", Offset = "0x1C01878", VA = "0x1C01878")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000269")]
		public bool Dirty
		{
			[Token(Token = "0x6000C47")]
			[Address(RVA = "0x1C019AC", Offset = "0x1C019AC", VA = "0x1C019AC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C48")]
			[Address(RVA = "0x1C0153C", Offset = "0x1C0153C", VA = "0x1C0153C")]
			set
			{
			}
		}

		[Token(Token = "0x1700026A")]
		public virtual bool IsConfigured
		{
			[Token(Token = "0x6000C4F")]
			[Address(RVA = "0x1C033A4", Offset = "0x1C033A4", VA = "0x1C033A4", Slot = "9")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700026B")]
		public virtual bool IsInitialized
		{
			[Token(Token = "0x6000C50")]
			[Address(RVA = "0x1C035D0", Offset = "0x1C035D0", VA = "0x1C035D0", Slot = "10")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000C30")]
		[Address(RVA = "0x1C011BC", Offset = "0x1C011BC", VA = "0x1C011BC")]
		protected CurvyCGEventArgs OnBeforeRefreshEvent(CurvyCGEventArgs e)
		{
			return null;
		}

		[Token(Token = "0x6000C31")]
		[Address(RVA = "0x1C01228", Offset = "0x1C01228", VA = "0x1C01228")]
		protected CurvyCGEventArgs OnRefreshEvent(CurvyCGEventArgs e)
		{
			return null;
		}

		[Token(Token = "0x6000C49")]
		[Address(RVA = "0x1C019B4", Offset = "0x1C019B4", VA = "0x1C019B4", Slot = "5")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000C4A")]
		[Address(RVA = "0x1C01AAC", Offset = "0x1C01AAC", VA = "0x1C01AAC", Slot = "6")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000C4B")]
		[Address(RVA = "0x1C01B44", Offset = "0x1C01B44", VA = "0x1C01B44")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6000C4C")]
		[Address(RVA = "0x1C02124", Offset = "0x1C02124", VA = "0x1C02124", Slot = "7")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000C4D")]
		[Address(RVA = "0x1C02128", Offset = "0x1C02128", VA = "0x1C02128", Slot = "8")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6000C4E")]
		[Address(RVA = "0x1C0339C", Offset = "0x1C0339C", VA = "0x1C0339C")]
		private void OnDidApplyAnimationProperties()
		{
		}

		[Token(Token = "0x6000C51")]
		[Address(RVA = "0x1C035D8", Offset = "0x1C035D8", VA = "0x1C035D8", Slot = "11")]
		public virtual void Refresh()
		{
		}

		[Token(Token = "0x6000C52")]
		[Address(RVA = "0x1C03630", Offset = "0x1C03630", VA = "0x1C03630", Slot = "12")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x6000C53")]
		[Address(RVA = "0x1C03078", Offset = "0x1C03078", VA = "0x1C03078")]
		public void ReInitializeLinkedSlots()
		{
		}

		[Token(Token = "0x6000C54")]
		[Address(RVA = "0x1C03774", Offset = "0x1C03774", VA = "0x1C03774", Slot = "13")]
		public virtual void OnStateChange()
		{
		}

		[Token(Token = "0x6000C55")]
		[Address(RVA = "0x1C03818", Offset = "0x1C03818", VA = "0x1C03818", Slot = "14")]
		public virtual void OnTemplateCreated()
		{
		}

		[Token(Token = "0x6000C56")]
		protected static T GetRequestParameter<T>(ref CGDataRequestParameter[] requests) where T : CGDataRequestParameter
		{
			return null;
		}

		[Token(Token = "0x6000C57")]
		[Address(RVA = "0x1C0381C", Offset = "0x1C0381C", VA = "0x1C0381C")]
		protected static void RemoveRequestParameter(ref CGDataRequestParameter[] requests, CGDataRequestParameter request)
		{
		}

		[Token(Token = "0x6000C58")]
		[Address(RVA = "0x1C038E0", Offset = "0x1C038E0", VA = "0x1C038E0")]
		public CGModuleLink GetOutputLink(CGModuleOutputSlot outSlot, CGModuleInputSlot inSlot)
		{
			return null;
		}

		[Token(Token = "0x6000C59")]
		[Address(RVA = "0x1C039C0", Offset = "0x1C039C0", VA = "0x1C039C0")]
		public List<CGModuleLink> GetOutputLinks(CGModuleOutputSlot outSlot)
		{
			return null;
		}

		[Token(Token = "0x6000C5A")]
		[Address(RVA = "0x1C03AD8", Offset = "0x1C03AD8", VA = "0x1C03AD8")]
		public CGModuleLink GetInputLink(CGModuleInputSlot inSlot, CGModuleOutputSlot outSlot)
		{
			return null;
		}

		[Token(Token = "0x6000C5B")]
		[Address(RVA = "0x1C03AE0", Offset = "0x1C03AE0", VA = "0x1C03AE0")]
		public List<CGModuleLink> GetInputLinks(CGModuleInputSlot inSlot)
		{
			return null;
		}

		[Token(Token = "0x6000C5C")]
		[Address(RVA = "0x1C038E8", Offset = "0x1C038E8", VA = "0x1C038E8")]
		private static CGModuleLink GetLink(List<CGModuleLink> lst, CGModuleSlot source, CGModuleSlot target)
		{
			return null;
		}

		[Token(Token = "0x6000C5D")]
		[Address(RVA = "0x1C039C8", Offset = "0x1C039C8", VA = "0x1C039C8")]
		private static List<CGModuleLink> GetLinks(List<CGModuleLink> lst, CGModuleSlot source)
		{
			return null;
		}

		[Token(Token = "0x6000C5E")]
		[Address(RVA = "0x1C03AE8", Offset = "0x1C03AE8", VA = "0x1C03AE8")]
		public CGModule CopyTo(CurvyGenerator targetGenerator)
		{
			return null;
		}

		[Token(Token = "0x6000C5F")]
		[Address(RVA = "0x1C03C18", Offset = "0x1C03C18", VA = "0x1C03C18")]
		public UnityEngine.Component AddManagedResource(string resourceName, string context = "", int index = -1)
		{
			return null;
		}

		[Token(Token = "0x6000C60")]
		[Address(RVA = "0x1C02D7C", Offset = "0x1C02D7C", VA = "0x1C02D7C")]
		public void DeleteManagedResource(string resourceName, UnityEngine.Component res, string context = "", bool dontUsePool = false)
		{
		}

		[Token(Token = "0x6000C61")]
		[Address(RVA = "0x1C04040", Offset = "0x1C04040", VA = "0x1C04040")]
		public bool IsManagedResource(UnityEngine.Component res)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C62")]
		[Address(RVA = "0x1C03D98", Offset = "0x1C03D98", VA = "0x1C03D98")]
		protected void RenameResource(string resourceName, UnityEngine.Component resource, int index = -1)
		{
		}

		[Token(Token = "0x6000C63")]
		[Address(RVA = "0x1C0412C", Offset = "0x1C0412C", VA = "0x1C0412C")]
		protected PrefabPool GetPrefabPool(GameObject prefab)
		{
			return null;
		}

		[Token(Token = "0x6000C64")]
		[Address(RVA = "0x1C04290", Offset = "0x1C04290", VA = "0x1C04290")]
		public List<IPool> GetAllPrefabPools()
		{
			return null;
		}

		[Token(Token = "0x6000C65")]
		[Address(RVA = "0x1C04360", Offset = "0x1C04360", VA = "0x1C04360")]
		public void DeleteAllPrefabPools()
		{
		}

		[Token(Token = "0x6000C66")]
		[Address(RVA = "0x1C04430", Offset = "0x1C04430", VA = "0x1C04430")]
		public void Delete()
		{
		}

		[Token(Token = "0x6000C67")]
		[Address(RVA = "0x1C044D8", Offset = "0x1C044D8", VA = "0x1C044D8")]
		public CGModuleInputSlot GetInputSlot(string name)
		{
			return null;
		}

		[Token(Token = "0x6000C68")]
		[Address(RVA = "0x1C02E58", Offset = "0x1C02E58", VA = "0x1C02E58")]
		public List<CGModuleInputSlot> GetInputSlots([Optional] Type filterType)
		{
			return null;
		}

		[Token(Token = "0x6000C69")]
		[Address(RVA = "0x1BFDC9C", Offset = "0x1BFDC9C", VA = "0x1BFDC9C")]
		public CGModuleOutputSlot GetOutputSlot(string name)
		{
			return null;
		}

		[Token(Token = "0x6000C6A")]
		[Address(RVA = "0x1C0317C", Offset = "0x1C0317C", VA = "0x1C0317C")]
		public List<CGModuleOutputSlot> GetOutputSlots([Optional] Type filterType)
		{
			return null;
		}

		[Token(Token = "0x6000C6B")]
		[Address(RVA = "0x1C028DC", Offset = "0x1C028DC", VA = "0x1C028DC")]
		public bool GetManagedResources(out List<UnityEngine.Component> components, out List<string> componentNames)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C6C")]
		[Address(RVA = "0x1C03BEC", Offset = "0x1C03BEC", VA = "0x1C03BEC")]
		public int SetUniqueIdINTERNAL()
		{
			return default(int);
		}

		[Token(Token = "0x6000C6D")]
		[Address(RVA = "0x1C0456C", Offset = "0x1C0456C", VA = "0x1C0456C")]
		internal void initializeSort()
		{
		}

		[Token(Token = "0x6000C6E")]
		[Address(RVA = "0x1C0465C", Offset = "0x1C0465C", VA = "0x1C0465C")]
		internal List<CGModule> decrementChilds()
		{
			return null;
		}

		[Token(Token = "0x6000C6F")]
		[Address(RVA = "0x1C04848", Offset = "0x1C04848", VA = "0x1C04848")]
		internal void doRefresh()
		{
		}

		[Token(Token = "0x6000C70")]
		[Address(RVA = "0x1C018BC", Offset = "0x1C018BC", VA = "0x1C018BC")]
		internal ModuleInfoAttribute getInfo()
		{
			return null;
		}

		[Token(Token = "0x6000C71")]
		[Address(RVA = "0x1C04988", Offset = "0x1C04988", VA = "0x1C04988")]
		private bool usesRandom()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C72")]
		[Address(RVA = "0x1C01D20", Offset = "0x1C01D20", VA = "0x1C01D20")]
		private void loadSlots()
		{
		}

		[Token(Token = "0x6000C73")]
		[Address(RVA = "0x1C049C8", Offset = "0x1C049C8", VA = "0x1C049C8")]
		private SlotInfo getSlotInfo(FieldInfo f)
		{
			return null;
		}

		[Token(Token = "0x6000C74")]
		[Address(RVA = "0x1C02728", Offset = "0x1C02728", VA = "0x1C02728")]
		private void setTreeDirtyStateChange()
		{
		}

		[Token(Token = "0x6000C75")]
		[Address(RVA = "0x1C019E0", Offset = "0x1C019E0", VA = "0x1C019E0")]
		private CurvyGenerator RetrieveGenerator()
		{
			return null;
		}

		[Token(Token = "0x6000C76")]
		[Address(RVA = "0x1C04DC0", Offset = "0x1C04DC0", VA = "0x1C04DC0")]
		public void checkOnStateChangedINTERNAL()
		{
		}

		[Token(Token = "0x6000C77")]
		[Address(RVA = "0x1C012F4", Offset = "0x1C012F4", VA = "0x1C012F4")]
		public void renameManagedResourcesINTERNAL()
		{
		}

		[Token(Token = "0x6000C78")]
		[Address(RVA = "0x1C04DFC", Offset = "0x1C04DFC", VA = "0x1C04DFC")]
		protected CGModule()
		{
		}
	}
	[Token(Token = "0x200015E")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xFC74D0", Offset = "0xFC74D0")]
	public sealed class ModuleInfoAttribute : Attribute, IComparable
	{
		[Token(Token = "0x4000774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string MenuName;

		[Token(Token = "0x4000775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string ModuleName;

		[Token(Token = "0x4000776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string Description;

		[Token(Token = "0x4000777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool UsesRandom;

		[Token(Token = "0x6000C79")]
		[Address(RVA = "0x1E43820", Offset = "0x1E43820", VA = "0x1E43820")]
		public ModuleInfoAttribute(string name)
		{
		}

		[Token(Token = "0x6000C7A")]
		[Address(RVA = "0x1E43854", Offset = "0x1E43854", VA = "0x1E43854", Slot = "7")]
		public int CompareTo(object obj)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200015F")]
	public class CGModuleProperties
	{
		[Token(Token = "0x4000778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Rect Dimensions;

		[Token(Token = "0x4000779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float MinWidth;

		[Token(Token = "0x400077A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float LabelWidth;

		[Token(Token = "0x400077B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color BackgroundColor;

		[Token(Token = "0x6000C7B")]
		[Address(RVA = "0x1E37EF0", Offset = "0x1E37EF0", VA = "0x1E37EF0")]
		public CGModuleProperties()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000160")]
	public class CGModuleLink
	{
		[Token(Token = "0x400077C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private int m_ModuleID;

		[Token(Token = "0x400077D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private string m_SlotName;

		[Token(Token = "0x400077E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private int m_TargetModuleID;

		[Token(Token = "0x400077F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private string m_TargetSlotName;

		[Token(Token = "0x1700026C")]
		public int ModuleID
		{
			[Token(Token = "0x6000C7C")]
			[Address(RVA = "0x1E37204", Offset = "0x1E37204", VA = "0x1E37204")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700026D")]
		public string SlotName
		{
			[Token(Token = "0x6000C7D")]
			[Address(RVA = "0x1E3720C", Offset = "0x1E3720C", VA = "0x1E3720C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700026E")]
		public int TargetModuleID
		{
			[Token(Token = "0x6000C7E")]
			[Address(RVA = "0x1E37214", Offset = "0x1E37214", VA = "0x1E37214")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700026F")]
		public string TargetSlotName
		{
			[Token(Token = "0x6000C7F")]
			[Address(RVA = "0x1E3721C", Offset = "0x1E3721C", VA = "0x1E3721C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C80")]
		[Address(RVA = "0x1E37224", Offset = "0x1E37224", VA = "0x1E37224")]
		public CGModuleLink(int sourceID, string sourceSlotName, int targetID, string targetSlotName)
		{
		}

		[Token(Token = "0x6000C81")]
		[Address(RVA = "0x1E36460", Offset = "0x1E36460", VA = "0x1E36460")]
		public CGModuleLink(CGModuleSlot source, CGModuleSlot target)
		{
		}

		[Token(Token = "0x6000C82")]
		[Address(RVA = "0x1E372E8", Offset = "0x1E372E8", VA = "0x1E372E8")]
		public bool IsSame(CGModuleLink o)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C83")]
		[Address(RVA = "0x1E37360", Offset = "0x1E37360", VA = "0x1E37360")]
		public bool IsSame(CGModuleSlot source, CGModuleSlot target)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C84")]
		[Address(RVA = "0x1E3747C", Offset = "0x1E3747C", VA = "0x1E3747C")]
		public bool IsTo(CGModuleSlot s)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C85")]
		[Address(RVA = "0x1E37520", Offset = "0x1E37520", VA = "0x1E37520")]
		public bool IsFrom(CGModuleSlot s)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C86")]
		[Address(RVA = "0x1E375C4", Offset = "0x1E375C4", VA = "0x1E375C4")]
		public bool IsUsing(CGModule module)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C87")]
		[Address(RVA = "0x1E375FC", Offset = "0x1E375FC", VA = "0x1E375FC")]
		public bool IsBetween(CGModuleSlot one, CGModuleSlot another)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C88")]
		[Address(RVA = "0x1E37674", Offset = "0x1E37674", VA = "0x1E37674")]
		public void SetModuleIDIINTERNAL(int moduleID, int targetModuleID)
		{
		}

		[Token(Token = "0x6000C89")]
		[Address(RVA = "0x1E36454", Offset = "0x1E36454", VA = "0x1E36454")]
		public static implicit operator bool(CGModuleLink a)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C8A")]
		[Address(RVA = "0x1E37680", Offset = "0x1E37680", VA = "0x1E37680", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000161")]
	public class CGModuleSlot
	{
		[Token(Token = "0x4000780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFCEF5C", Offset = "0xFCEF5C")]
		private CGModule <Module>k__BackingField;

		[Token(Token = "0x4000781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFCEF6C", Offset = "0xFCEF6C")]
		private SlotInfo <Info>k__BackingField;

		[Token(Token = "0x4000782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFCEF7C", Offset = "0xFCEF7C")]
		private Vector2 <Origin>k__BackingField;

		[Token(Token = "0x4000783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFCEF8C", Offset = "0xFCEF8C")]
		private Rect <DropZone>k__BackingField;

		[Token(Token = "0x4000784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected List<CGModuleSlot> mLinkedSlots;

		[Token(Token = "0x17000270")]
		public CGModule Module
		{
			[Token(Token = "0x6000C8B")]
			[Address(RVA = "0x1E37F2C", Offset = "0x1E37F2C", VA = "0x1E37F2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD7054", Offset = "0xFD7054")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C8C")]
			[Address(RVA = "0x1E37F34", Offset = "0x1E37F34", VA = "0x1E37F34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD7064", Offset = "0xFD7064")]
			internal set
			{
			}
		}

		[Token(Token = "0x17000271")]
		public SlotInfo Info
		{
			[Token(Token = "0x6000C8D")]
			[Address(RVA = "0x1E37F3C", Offset = "0x1E37F3C", VA = "0x1E37F3C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD7074", Offset = "0xFD7074")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C8E")]
			[Address(RVA = "0x1E37F44", Offset = "0x1E37F44", VA = "0x1E37F44")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD7084", Offset = "0xFD7084")]
			internal set
			{
			}
		}

		[Token(Token = "0x17000272")]
		public Vector2 Origin
		{
			[Token(Token = "0x6000C8F")]
			[Address(RVA = "0x1E37F4C", Offset = "0x1E37F4C", VA = "0x1E37F4C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD7094", Offset = "0xFD7094")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6000C90")]
			[Address(RVA = "0x1E37F54", Offset = "0x1E37F54", VA = "0x1E37F54")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD70A4", Offset = "0xFD70A4")]
			set
			{
			}
		}

		[Token(Token = "0x17000273")]
		public Rect DropZone
		{
			[Token(Token = "0x6000C91")]
			[Address(RVA = "0x1E37F5C", Offset = "0x1E37F5C", VA = "0x1E37F5C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD70B4", Offset = "0xFD70B4")]
			get
			{
				return default(Rect);
			}
			[Token(Token = "0x6000C92")]
			[Address(RVA = "0x1E37F68", Offset = "0x1E37F68", VA = "0x1E37F68")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD70C4", Offset = "0xFD70C4")]
			set
			{
			}
		}

		[Token(Token = "0x17000274")]
		public bool IsLinked
		{
			[Token(Token = "0x6000C93")]
			[Address(RVA = "0x1E37F74", Offset = "0x1E37F74", VA = "0x1E37F74")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000275")]
		public bool IsLinkedAndConfigured
		{
			[Token(Token = "0x6000C94")]
			[Address(RVA = "0x1E37FDC", Offset = "0x1E37FDC", VA = "0x1E37FDC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000276")]
		public IOnRequestProcessing OnRequestModule
		{
			[Token(Token = "0x6000C95")]
			[Address(RVA = "0x1E36F04", Offset = "0x1E36F04", VA = "0x1E36F04")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000277")]
		public IOnRequestPath OnRequestPathModule
		{
			[Token(Token = "0x6000C96")]
			[Address(RVA = "0x1E380B8", Offset = "0x1E380B8", VA = "0x1E380B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000278")]
		public IPathProvider PathProvider
		{
			[Token(Token = "0x6000C97")]
			[Address(RVA = "0x1E38108", Offset = "0x1E38108", VA = "0x1E38108")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000279")]
		public IExternalInput ExternalInput
		{
			[Token(Token = "0x6000C98")]
			[Address(RVA = "0x1E38158", Offset = "0x1E38158", VA = "0x1E38158")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700027A")]
		public List<CGModuleSlot> LinkedSlots
		{
			[Token(Token = "0x6000C99")]
			[Address(RVA = "0x1E36654", Offset = "0x1E36654", VA = "0x1E36654")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700027B")]
		public int Count
		{
			[Token(Token = "0x6000C9A")]
			[Address(RVA = "0x1E36DC8", Offset = "0x1E36DC8", VA = "0x1E36DC8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700027C")]
		public string Name
		{
			[Token(Token = "0x6000C9B")]
			[Address(RVA = "0x1E3728C", Offset = "0x1E3728C", VA = "0x1E3728C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C9C")]
		[Address(RVA = "0x1E36048", Offset = "0x1E36048", VA = "0x1E36048")]
		public CGModuleSlot()
		{
		}

		[Token(Token = "0x6000C9D")]
		[Address(RVA = "0x1E36724", Offset = "0x1E36724", VA = "0x1E36724")]
		public bool HasLinkTo(CGModuleSlot other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C9E")]
		[Address(RVA = "0x1E381A8", Offset = "0x1E381A8", VA = "0x1E381A8")]
		public List<CGModule> GetLinkedModules()
		{
			return null;
		}

		[Token(Token = "0x6000C9F")]
		[Address(RVA = "0x1E3698C", Offset = "0x1E3698C", VA = "0x1E3698C", Slot = "4")]
		public virtual void LinkTo(CGModuleSlot other)
		{
		}

		[Token(Token = "0x6000CA0")]
		[Address(RVA = "0x1E367E4", Offset = "0x1E367E4", VA = "0x1E367E4")]
		protected static void LinkInputAndOutput(CGModuleSlot inputSlot, CGModuleSlot outputSlot)
		{
		}

		[Token(Token = "0x6000CA1")]
		[Address(RVA = "0x1E36BF0", Offset = "0x1E36BF0", VA = "0x1E36BF0", Slot = "5")]
		public virtual void UnlinkFrom(CGModuleSlot other)
		{
		}

		[Token(Token = "0x6000CA2")]
		[Address(RVA = "0x1E382AC", Offset = "0x1E382AC", VA = "0x1E382AC", Slot = "6")]
		public virtual void UnlinkAll()
		{
		}

		[Token(Token = "0x6000CA3")]
		[Address(RVA = "0x1E36514", Offset = "0x1E36514", VA = "0x1E36514")]
		public void ReInitializeLinkedSlots()
		{
		}

		[Token(Token = "0x6000CA4")]
		[Address(RVA = "0x1E382B0", Offset = "0x1E382B0", VA = "0x1E382B0")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD70D4", Offset = "0xFD70D4")]
		public void ReInitializeLinkedTargetModules()
		{
		}

		[Token(Token = "0x6000CA5")]
		[Address(RVA = "0x1E363A4", Offset = "0x1E363A4", VA = "0x1E363A4", Slot = "7")]
		protected virtual void LoadLinkedSlots()
		{
		}

		[Token(Token = "0x6000CA6")]
		[Address(RVA = "0x1E383F4", Offset = "0x1E383F4", VA = "0x1E383F4")]
		public static implicit operator bool(CGModuleSlot a)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA7")]
		[Address(RVA = "0x1E38400", Offset = "0x1E38400", VA = "0x1E38400", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000162")]
	public class CGModuleInputSlot : CGModuleSlot
	{
		[Token(Token = "0x1700027D")]
		public InputSlotInfo InputInfo
		{
			[Token(Token = "0x6000CA8")]
			[Address(RVA = "0x1E35FD8", Offset = "0x1E35FD8", VA = "0x1E35FD8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CA9")]
		[Address(RVA = "0x1E36040", Offset = "0x1E36040", VA = "0x1E36040")]
		public CGModuleInputSlot()
		{
		}

		[Token(Token = "0x6000CAA")]
		[Address(RVA = "0x1E36050", Offset = "0x1E36050", VA = "0x1E36050", Slot = "7")]
		protected override void LoadLinkedSlots()
		{
		}

		[Token(Token = "0x6000CAB")]
		[Address(RVA = "0x1E36520", Offset = "0x1E36520", VA = "0x1E36520", Slot = "6")]
		public override void UnlinkAll()
		{
		}

		[Token(Token = "0x6000CAC")]
		[Address(RVA = "0x1E366DC", Offset = "0x1E366DC", VA = "0x1E366DC", Slot = "4")]
		public override void LinkTo(CGModuleSlot outputSlot)
		{
		}

		[Token(Token = "0x6000CAD")]
		[Address(RVA = "0x1E36A8C", Offset = "0x1E36A8C", VA = "0x1E36A8C", Slot = "5")]
		public override void UnlinkFrom(CGModuleSlot outputSlot)
		{
		}

		[Token(Token = "0x6000CAE")]
		[Address(RVA = "0x1E36CF0", Offset = "0x1E36CF0", VA = "0x1E36CF0")]
		public CGModuleOutputSlot SourceSlot(int index = 0)
		{
			return null;
		}

		[Token(Token = "0x6000CAF")]
		[Address(RVA = "0x1E36E1C", Offset = "0x1E36E1C", VA = "0x1E36E1C")]
		public bool CanLinkTo(CGModuleOutputSlot source)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CB0")]
		[Address(RVA = "0x1E36FD8", Offset = "0x1E36FD8", VA = "0x1E36FD8")]
		public static bool AreInputAndOutputSlotsCompatible(InputSlotInfo inputSlotInfo, bool inputSlotModuleIsOnRequest, OutputSlotInfo outputSlotInfo, bool outputSlotModuleIsOnRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CB1")]
		[Address(RVA = "0x1E37160", Offset = "0x1E37160", VA = "0x1E37160")]
		private CGModule SourceModule(int index)
		{
			return null;
		}

		[Token(Token = "0x6000CB2")]
		public T GetData<T>(params CGDataRequestParameter[] requests) where T : CGData
		{
			return null;
		}

		[Token(Token = "0x6000CB3")]
		public List<T> GetAllData<T>(params CGDataRequestParameter[] requests) where T : CGData
		{
			return null;
		}

		[Token(Token = "0x6000CB4")]
		private CGData[] GetData<T>(int slotIndex, params CGDataRequestParameter[] requests) where T : CGData
		{
			return null;
		}

		[Token(Token = "0x6000CB5")]
		private static CGData[] cloneData<T>(ref CGData[] source) where T : CGData
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000163")]
	public class CGModuleOutputSlot : CGModuleSlot
	{
		[Token(Token = "0x4000785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public CGData[] Data;

		[Token(Token = "0x4000786")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public CGDataRequestParameter[] LastRequestParameters;

		[Token(Token = "0x1700027E")]
		public OutputSlotInfo OutputInfo
		{
			[Token(Token = "0x6000CB6")]
			[Address(RVA = "0x1E36F54", Offset = "0x1E36F54", VA = "0x1E36F54")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700027F")]
		public bool HasData
		{
			[Token(Token = "0x6000CBB")]
			[Address(RVA = "0x1E37DCC", Offset = "0x1E37DCC", VA = "0x1E37DCC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000CB7")]
		[Address(RVA = "0x1E37860", Offset = "0x1E37860", VA = "0x1E37860")]
		public CGModuleOutputSlot()
		{
		}

		[Token(Token = "0x6000CB8")]
		[Address(RVA = "0x1E378CC", Offset = "0x1E378CC", VA = "0x1E378CC", Slot = "7")]
		protected override void LoadLinkedSlots()
		{
		}

		[Token(Token = "0x6000CB9")]
		[Address(RVA = "0x1E37C20", Offset = "0x1E37C20", VA = "0x1E37C20", Slot = "4")]
		public override void LinkTo(CGModuleSlot inputSlot)
		{
		}

		[Token(Token = "0x6000CBA")]
		[Address(RVA = "0x1E37C68", Offset = "0x1E37C68", VA = "0x1E37C68", Slot = "5")]
		public override void UnlinkFrom(CGModuleSlot inputSlot)
		{
		}

		[Token(Token = "0x6000CBC")]
		[Address(RVA = "0x1E37E0C", Offset = "0x1E37E0C", VA = "0x1E37E0C")]
		public void ClearData()
		{
		}

		[Token(Token = "0x6000CBD")]
		public void SetData<T>(List<T> data) where T : CGData
		{
		}

		[Token(Token = "0x6000CBE")]
		[Address(RVA = "0x1E37E6C", Offset = "0x1E37E6C", VA = "0x1E37E6C")]
		public void SetData(params CGData[] data)
		{
		}

		[Token(Token = "0x6000CBF")]
		public T GetData<T>() where T : CGData
		{
			return null;
		}

		[Token(Token = "0x6000CC0")]
		public T[] GetAllData<T>() where T : CGData
		{
			return null;
		}
	}
	[Token(Token = "0x2000164")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xFC74E4", Offset = "0xFC74E4")]
	public class SlotInfo : Attribute, IComparable
	{
		[Token(Token = "0x2000235")]
		public enum SlotArrayType
		{
			[Token(Token = "0x4000B69")]
			Unknown,
			[Token(Token = "0x4000B6A")]
			Normal,
			[Token(Token = "0x4000B6B")]
			Hidden
		}

		[Token(Token = "0x4000787")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Type[] DataTypes;

		[Token(Token = "0x4000788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Name;

		[Token(Token = "0x4000789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string displayName;

		[Token(Token = "0x400078A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string Tooltip;

		[Token(Token = "0x400078B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool Array;

		[Token(Token = "0x400078C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public SlotArrayType ArrayType;

		[Token(Token = "0x17000280")]
		public string DisplayName
		{
			[Token(Token = "0x6000CC1")]
			[Address(RVA = "0x1DF3224", Offset = "0x1DF3224", VA = "0x1DF3224")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CC2")]
			[Address(RVA = "0x1DF323C", Offset = "0x1DF323C", VA = "0x1DF323C")]
			set
			{
			}
		}

		[Token(Token = "0x6000CC3")]
		[Address(RVA = "0x1DF21D4", Offset = "0x1DF21D4", VA = "0x1DF21D4")]
		protected SlotInfo(string name, params Type[] type)
		{
		}

		[Token(Token = "0x6000CC4")]
		[Address(RVA = "0x1DF3244", Offset = "0x1DF3244", VA = "0x1DF3244")]
		protected SlotInfo(params Type[] type)
		{
		}

		[Token(Token = "0x6000CC5")]
		[Address(RVA = "0x1DF3250", Offset = "0x1DF3250", VA = "0x1DF3250", Slot = "7")]
		public int CompareTo(object obj)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000165")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xFC74F8", Offset = "0xFC74F8")]
	public sealed class InputSlotInfo : SlotInfo
	{
		[Token(Token = "0x400078D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool RequestDataOnly;

		[Token(Token = "0x400078E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool Optional;

		[Token(Token = "0x400078F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		public bool ModifiesData;

		[Token(Token = "0x6000CC6")]
		[Address(RVA = "0x1E43808", Offset = "0x1E43808", VA = "0x1E43808")]
		public InputSlotInfo(string name, params Type[] type)
		{
		}

		[Token(Token = "0x6000CC7")]
		[Address(RVA = "0x1E43810", Offset = "0x1E43810", VA = "0x1E43810")]
		public InputSlotInfo(params Type[] type)
		{
		}

		[Token(Token = "0x6000CC8")]
		[Address(RVA = "0x1E37054", Offset = "0x1E37054", VA = "0x1E37054")]
		public bool IsValidFrom(Type outType)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000166")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xFC752C", Offset = "0xFC752C")]
	public class OutputSlotInfo : SlotInfo
	{
		[Token(Token = "0x17000281")]
		public Type DataType
		{
			[Token(Token = "0x6000CC9")]
			[Address(RVA = "0x1DF20D0", Offset = "0x1DF20D0", VA = "0x1DF20D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CCA")]
		[Address(RVA = "0x1DF2104", Offset = "0x1DF2104", VA = "0x1DF2104")]
		public OutputSlotInfo(Type type)
		{
		}

		[Token(Token = "0x6000CCB")]
		[Address(RVA = "0x1DF2110", Offset = "0x1DF2110", VA = "0x1DF2110")]
		public OutputSlotInfo(string name, Type type)
		{
		}
	}
	[Token(Token = "0x2000167")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xFC7560", Offset = "0xFC7560")]
	public class ShapeOutputSlotInfo : OutputSlotInfo
	{
		[Token(Token = "0x4000790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool OutputsVariableShape;

		[Token(Token = "0x6000CCC")]
		[Address(RVA = "0x1DF318C", Offset = "0x1DF318C", VA = "0x1DF318C")]
		public ShapeOutputSlotInfo()
		{
		}

		[Token(Token = "0x6000CCD")]
		[Address(RVA = "0x1DF3194", Offset = "0x1DF3194", VA = "0x1DF3194")]
		public ShapeOutputSlotInfo(string name)
		{
		}
	}
	[Token(Token = "0x2000168")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xFC7594", Offset = "0xFC7594")]
	public sealed class ResourceLoaderAttribute : Attribute
	{
		[Token(Token = "0x4000791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string ResourceName;

		[Token(Token = "0x6000CCE")]
		[Address(RVA = "0x1DF222C", Offset = "0x1DF222C", VA = "0x1DF222C")]
		public ResourceLoaderAttribute(string resName)
		{
		}
	}
	[Token(Token = "0x2000169")]
	public static class CGResourceHandler
	{
		[Token(Token = "0x4000792")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<string, ICGResourceLoader> Loader;

		[Token(Token = "0x6000CCF")]
		[Address(RVA = "0x1E39804", Offset = "0x1E39804", VA = "0x1E39804")]
		public static UnityEngine.Component CreateResource(CGModule module, string resName, string context)
		{
			return null;
		}

		[Token(Token = "0x6000CD0")]
		[Address(RVA = "0x1E39CA4", Offset = "0x1E39CA4", VA = "0x1E39CA4")]
		public static void DestroyResource(CGModule module, string resName, UnityEngine.Component obj, string context, bool kill)
		{
		}

		[Token(Token = "0x6000CD1")]
		[Address(RVA = "0x1E39A14", Offset = "0x1E39A14", VA = "0x1E39A14")]
		private static void getLoaders()
		{
		}
	}
	[Token(Token = "0x200016A")]
	[AttributeAttribute(Name = "ResourceLoaderAttribute", RVA = "0xFC75A8", Offset = "0xFC75A8")]
	public class CGSplineResourceLoader : ICGResourceLoader
	{
		[Token(Token = "0x6000CD3")]
		[Address(RVA = "0x1E3ADCC", Offset = "0x1E3ADCC", VA = "0x1E3ADCC", Slot = "4")]
		public UnityEngine.Component Create(CGModule cgModule, string context)
		{
			return null;
		}

		[Token(Token = "0x6000CD4")]
		[Address(RVA = "0x1E3AF88", Offset = "0x1E3AF88", VA = "0x1E3AF88", Slot = "5")]
		public void Destroy(CGModule cgModule, UnityEngine.Component obj, string context, bool kill)
		{
		}

		[Token(Token = "0x6000CD5")]
		[Address(RVA = "0x1E3B028", Offset = "0x1E3B028", VA = "0x1E3B028")]
		public CGSplineResourceLoader()
		{
		}
	}
	[Token(Token = "0x200016B")]
	[AttributeAttribute(Name = "ResourceLoaderAttribute", RVA = "0xFC75E0", Offset = "0xFC75E0")]
	public class CGShapeResourceLoader : ICGResourceLoader
	{
		[Token(Token = "0x6000CD6")]
		[Address(RVA = "0x1E3AC0C", Offset = "0x1E3AC0C", VA = "0x1E3AC0C", Slot = "4")]
		public UnityEngine.Component Create(CGModule cgModule, string context)
		{
			return null;
		}

		[Token(Token = "0x6000CD7")]
		[Address(RVA = "0x1E3AD24", Offset = "0x1E3AD24", VA = "0x1E3AD24", Slot = "5")]
		public void Destroy(CGModule cgModule, UnityEngine.Component obj, string context, bool kill)
		{
		}

		[Token(Token = "0x6000CD8")]
		[Address(RVA = "0x1E3ADC4", Offset = "0x1E3ADC4", VA = "0x1E3ADC4")]
		public CGShapeResourceLoader()
		{
		}
	}
	[Token(Token = "0x200016C")]
	[AttributeAttribute(Name = "ResourceLoaderAttribute", RVA = "0xFC7618", Offset = "0xFC7618")]
	public class CGMeshResourceLoader : ICGResourceLoader
	{
		[Token(Token = "0x6000CD9")]
		[Address(RVA = "0x1C00E5C", Offset = "0x1C00E5C", VA = "0x1C00E5C", Slot = "4")]
		public UnityEngine.Component Create(CGModule cgModule, string context)
		{
			return null;
		}

		[Token(Token = "0x6000CDA")]
		[Address(RVA = "0x1C00ED4", Offset = "0x1C00ED4", VA = "0x1C00ED4", Slot = "5")]
		public void Destroy(CGModule cgModule, UnityEngine.Component obj, string context, bool kill)
		{
		}

		[Token(Token = "0x6000CDB")]
		[Address(RVA = "0x1C01174", Offset = "0x1C01174", VA = "0x1C01174")]
		public CGMeshResourceLoader()
		{
		}
	}
	[Token(Token = "0x200016D")]
	[AttributeAttribute(Name = "ResourceLoaderAttribute", RVA = "0xFC7650", Offset = "0xFC7650")]
	public class CGGameObjectResourceLoader : ICGResourceLoader
	{
		[Token(Token = "0x6000CDC")]
		[Address(RVA = "0x1BFF69C", Offset = "0x1BFF69C", VA = "0x1BFF69C", Slot = "4")]
		public UnityEngine.Component Create(CGModule cgModule, string context)
		{
			return null;
		}

		[Token(Token = "0x6000CDD")]
		[Address(RVA = "0x1BFF804", Offset = "0x1BFF804", VA = "0x1BFF804", Slot = "5")]
		public void Destroy(CGModule cgModule, UnityEngine.Component obj, string context, bool kill)
		{
		}

		[Token(Token = "0x6000CDE")]
		[Address(RVA = "0x1BFFA1C", Offset = "0x1BFFA1C", VA = "0x1BFFA1C")]
		public CGGameObjectResourceLoader()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200016E")]
	public class CGGameObjectResourceCollection : ICGResourceCollection
	{
		[Token(Token = "0x4000793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<Transform> Items;

		[Token(Token = "0x4000794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<string> PoolNames;

		[Token(Token = "0x17000282")]
		public int Count
		{
			[Token(Token = "0x6000CDF")]
			[Address(RVA = "0x1BFF544", Offset = "0x1BFF544", VA = "0x1BFF544", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000283")]
		public UnityEngine.Component[] ItemsArray
		{
			[Token(Token = "0x6000CE0")]
			[Address(RVA = "0x1BFF594", Offset = "0x1BFF594", VA = "0x1BFF594", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CE1")]
		[Address(RVA = "0x1BFF5EC", Offset = "0x1BFF5EC", VA = "0x1BFF5EC")]
		public CGGameObjectResourceCollection()
		{
		}
	}
	[Token(Token = "0x200016F")]
	public static class CGUtility
	{
		[Token(Token = "0x6000CE2")]
		[Address(RVA = "0x1E3B928", Offset = "0x1E3B928", VA = "0x1E3B928")]
		public static Vector2[] CalculateUV2(Vector2[] uv)
		{
			return null;
		}

		[Token(Token = "0x6000CE3")]
		[Address(RVA = "0x1E3BA4C", Offset = "0x1E3BA4C", VA = "0x1E3BA4C")]
		public static List<ControlPointOption> GetControlPointsWithOptions(CGDataRequestMetaCGOptions options, CurvySpline shape, float startDist, float endDist, bool optimize, out int initialMaterialID, out float initialMaxStep)
		{
			return null;
		}
	}
	[Token(Token = "0x2000170")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC7688", Offset = "0xFC7688")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xFC7688", Offset = "0xFC7688")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xFC7688", Offset = "0xFC7688")]
	public class CurvyGenerator : DTVersionedMonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000236")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC89CC", Offset = "0xFC89CC")]
		private sealed class <>c
		{
			[Token(Token = "0x4000B6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000B6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<CGModule, bool> <>9__46_0;

			[Token(Token = "0x4000B6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<CGModule, float> <>9__46_1;

			[Token(Token = "0x4000B6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Func<CGModuleInputSlot, IEnumerable<CGModule>> <>9__65_0;

			[Token(Token = "0x4000B70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static Func<CGModule, float> <>9__65_1;

			[Token(Token = "0x4000B71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public static Func<CGModuleInputSlot, IEnumerable<CGModule>> <>9__66_0;

			[Token(Token = "0x600101E")]
			[Address(RVA = "0x1E43714", Offset = "0x1E43714", VA = "0x1E43714")]
			public <>c()
			{
			}

			[Token(Token = "0x600101F")]
			[Address(RVA = "0x1E4371C", Offset = "0x1E4371C", VA = "0x1E4371C")]
			internal bool <ReorderModules>b__46_0(CGModule m)
			{
				return default(bool);
			}

			[Token(Token = "0x6001020")]
			[Address(RVA = "0x1E43780", Offset = "0x1E43780", VA = "0x1E43780")]
			internal float <ReorderModules>b__46_1(CGModule m)
			{
				return default(float);
			}

			[Token(Token = "0x6001021")]
			[Address(RVA = "0x1E437A8", Offset = "0x1E437A8", VA = "0x1E437A8")]
			internal IEnumerable<CGModule> <ReorderEndpointRecursiveInputs>b__65_0(CGModuleInputSlot i)
			{
				return null;
			}

			[Token(Token = "0x6001022")]
			[Address(RVA = "0x1E437C0", Offset = "0x1E437C0", VA = "0x1E437C0")]
			internal float <ReorderEndpointRecursiveInputs>b__65_1(CGModule m)
			{
				return default(float);
			}

			[Token(Token = "0x6001023")]
			[Address(RVA = "0x1E437E8", Offset = "0x1E437E8", VA = "0x1E437E8")]
			internal IEnumerable<CGModule> <UpdateModulesRecursiveInputs>b__66_0(CGModuleInputSlot i)
			{
				return null;
			}
		}

		[Token(Token = "0x2000237")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC89DC", Offset = "0xFC89DC")]
		private sealed class <>c__DisplayClass66_0
		{
			[Token(Token = "0x4000B72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Dictionary<CGModule, HashSet<CGModule>> modulesRecursiveInputs;

			[Token(Token = "0x6001024")]
			[Address(RVA = "0x1E434FC", Offset = "0x1E434FC", VA = "0x1E434FC")]
			public <>c__DisplayClass66_0()
			{
			}

			[Token(Token = "0x6001025")]
			[Address(RVA = "0x1E43800", Offset = "0x1E43800", VA = "0x1E43800")]
			internal IEnumerable<CGModule> <UpdateModulesRecursiveInputs>b__1(CGModule i)
			{
				return null;
			}
		}

		[Token(Token = "0x4000795")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFCEF9C", Offset = "0xFCEF9C")]
		[SerializeField]
		private bool m_ShowDebug;

		[Token(Token = "0x4000796")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFCEFE8", Offset = "0xFCEFE8")]
		[SerializeField]
		private bool m_AutoRefresh;

		[Token(Token = "0x4000797")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFCF034", Offset = "0xFCF034")]
		[Positive]
		[SerializeField]
		private int m_RefreshDelay;

		[Token(Token = "0x4000798")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFCF118", Offset = "0xFCF118")]
		[Positive]
		[SerializeField]
		private int m_RefreshDelayEditor;

		[Token(Token = "0x4000799")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0xFCF1FC", Offset = "0xFCF1FC")]
		[SerializeField]
		protected CurvyCGEvent m_OnRefresh;

		[Token(Token = "0x400079A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public List<CGModule> Modules;

		[Token(Token = "0x400079B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[HideInInspector]
		internal int m_LastModuleID;

		[Token(Token = "0x400079C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFCF2B8", Offset = "0xFCF2B8")]
		private bool <Destroying>k__BackingField;

		[Token(Token = "0x400079D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Dictionary<int, CGModule> ModulesByID;

		[Token(Token = "0x400079E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool mInitialized;

		[Token(Token = "0x400079F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		private bool mInitializedPhaseOne;

		[Token(Token = "0x40007A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		private bool mNeedSort;

		[Token(Token = "0x40007A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private double mLastUpdateTime;

		[Token(Token = "0x40007A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private PoolManager mPoolManager;

		[Token(Token = "0x40007A3")]
		private const int ModulesReorderingDeltaX = 50;

		[Token(Token = "0x40007A4")]
		private const int ModulesReorderingDeltaY = 20;

		[Token(Token = "0x17000284")]
		public bool ShowDebug
		{
			[Token(Token = "0x6000CE4")]
			[Address(RVA = "0x1E409F4", Offset = "0x1E409F4", VA = "0x1E409F4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CE5")]
			[Address(RVA = "0x1E409FC", Offset = "0x1E409FC", VA = "0x1E409FC")]
			set
			{
			}
		}

		[Token(Token = "0x17000285")]
		public bool AutoRefresh
		{
			[Token(Token = "0x6000CE6")]
			[Address(RVA = "0x1E40A1C", Offset = "0x1E40A1C", VA = "0x1E40A1C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CE7")]
			[Address(RVA = "0x1E40A24", Offset = "0x1E40A24", VA = "0x1E40A24")]
			set
			{
			}
		}

		[Token(Token = "0x17000286")]
		public int RefreshDelay
		{
			[Token(Token = "0x6000CE8")]
			[Address(RVA = "0x1E40A44", Offset = "0x1E40A44", VA = "0x1E40A44")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000CE9")]
			[Address(RVA = "0x1E40A4C", Offset = "0x1E40A4C", VA = "0x1E40A4C")]
			set
			{
			}
		}

		[Token(Token = "0x17000287")]
		public int RefreshDelayEditor
		{
			[Token(Token = "0x6000CEA")]
			[Address(RVA = "0x1E40AD8", Offset = "0x1E40AD8", VA = "0x1E40AD8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000CEB")]
			[Address(RVA = "0x1E40AE0", Offset = "0x1E40AE0", VA = "0x1E40AE0")]
			set
			{
			}
		}

		[Token(Token = "0x17000288")]
		public PoolManager PoolManager
		{
			[Token(Token = "0x6000CEC")]
			[Address(RVA = "0x1E40B6C", Offset = "0x1E40B6C", VA = "0x1E40B6C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000289")]
		public CurvyCGEvent OnRefresh
		{
			[Token(Token = "0x6000CED")]
			[Address(RVA = "0x1E40C18", Offset = "0x1E40C18", VA = "0x1E40C18")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CEE")]
			[Address(RVA = "0x1E40C20", Offset = "0x1E40C20", VA = "0x1E40C20")]
			set
			{
			}
		}

		[Token(Token = "0x1700028A")]
		public bool IsInitialized
		{
			[Token(Token = "0x6000CEF")]
			[Address(RVA = "0x1E40C38", Offset = "0x1E40C38", VA = "0x1E40C38")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700028B")]
		public bool Destroying
		{
			[Token(Token = "0x6000CF0")]
			[Address(RVA = "0x1E40C40", Offset = "0x1E40C40", VA = "0x1E40C40")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD710C", Offset = "0xFD710C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CF1")]
			[Address(RVA = "0x1E40C48", Offset = "0x1E40C48", VA = "0x1E40C48")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD711C", Offset = "0xFD711C")]
			private set
			{
			}
		}

		[Token(Token = "0x6000CF2")]
		[Address(RVA = "0x1E40C54", Offset = "0x1E40C54", VA = "0x1E40C54")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000CF3")]
		[Address(RVA = "0x1E40C78", Offset = "0x1E40C78", VA = "0x1E40C78")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000CF4")]
		[Address(RVA = "0x1E40C88", Offset = "0x1E40C88", VA = "0x1E40C88")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000CF5")]
		[Address(RVA = "0x1E40C94", Offset = "0x1E40C94", VA = "0x1E40C94")]
		private void Update()
		{
		}

		[Token(Token = "0x6000CF6")]
		[Address(RVA = "0x1E41120", Offset = "0x1E41120", VA = "0x1E41120")]
		public static CurvyGenerator Create()
		{
			return null;
		}

		[Token(Token = "0x6000CF7")]
		public T AddModule<T>() where T : CGModule
		{
			return null;
		}

		[Token(Token = "0x6000CF8")]
		[Address(RVA = "0x1E41244", Offset = "0x1E41244", VA = "0x1E41244")]
		public CGModule AddModule(Type type)
		{
			return null;
		}

		[Token(Token = "0x6000CF9")]
		[Address(RVA = "0x1E41394", Offset = "0x1E41394", VA = "0x1E41394")]
		public void ArrangeModules()
		{
		}

		[Token(Token = "0x6000CFA")]
		[Address(RVA = "0x1E416BC", Offset = "0x1E416BC", VA = "0x1E416BC")]
		public void ReorderModules()
		{
		}

		[Token(Token = "0x6000CFB")]
		[Address(RVA = "0x1E42300", Offset = "0x1E42300", VA = "0x1E42300")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000CFC")]
		[Address(RVA = "0x1E42418", Offset = "0x1E42418", VA = "0x1E42418")]
		public void DeleteModule(CGModule module)
		{
		}

		[Token(Token = "0x6000CFD")]
		public List<T> FindModules<T>(bool includeOnRequestProcessing = false) where T : CGModule
		{
			return null;
		}

		[Token(Token = "0x6000CFE")]
		[Address(RVA = "0x1E424A4", Offset = "0x1E424A4", VA = "0x1E424A4")]
		public List<CGModule> GetModules(bool includeOnRequestProcessing = false)
		{
			return null;
		}

		[Token(Token = "0x6000CFF")]
		[Address(RVA = "0x1E363A8", Offset = "0x1E363A8", VA = "0x1E363A8")]
		public CGModule GetModule(int moduleID, bool includeOnRequestProcessing = false)
		{
			return null;
		}

		[Token(Token = "0x6000D00")]
		public T GetModule<T>(int moduleID, bool includeOnRequestProcessing = false) where T : CGModule
		{
			return null;
		}

		[Token(Token = "0x6000D01")]
		[Address(RVA = "0x1E425F4", Offset = "0x1E425F4", VA = "0x1E425F4")]
		public CGModule GetModule(string moduleName, bool includeOnRequestProcessing = false)
		{
			return null;
		}

		[Token(Token = "0x6000D02")]
		public T GetModule<T>(string moduleName, bool includeOnRequestProcessing = false) where T : CGModule
		{
			return null;
		}

		[Token(Token = "0x6000D03")]
		[Address(RVA = "0x1E42734", Offset = "0x1E42734", VA = "0x1E42734")]
		public CGModuleOutputSlot GetModuleOutputSlot(int moduleId, string slotName)
		{
			return null;
		}

		[Token(Token = "0x6000D04")]
		[Address(RVA = "0x1E427F4", Offset = "0x1E427F4", VA = "0x1E427F4")]
		public CGModuleOutputSlot GetModuleOutputSlot(string moduleName, string slotName)
		{
			return null;
		}

		[Token(Token = "0x6000D05")]
		[Address(RVA = "0x1E40CA8", Offset = "0x1E40CA8", VA = "0x1E40CA8")]
		public void Initialize(bool force = false)
		{
		}

		[Token(Token = "0x6000D06")]
		[Address(RVA = "0x1E428B4", Offset = "0x1E428B4", VA = "0x1E428B4")]
		public void Refresh(bool forceUpdate = false)
		{
		}

		[Token(Token = "0x6000D07")]
		[Address(RVA = "0x1E410A0", Offset = "0x1E410A0", VA = "0x1E410A0")]
		public void TryAutoRefresh()
		{
		}

		[Token(Token = "0x6000D08")]
		[Address(RVA = "0x1E43278", Offset = "0x1E43278", VA = "0x1E43278")]
		protected CurvyCGEventArgs OnRefreshEvent(CurvyCGEventArgs e)
		{
			return null;
		}

		[Token(Token = "0x6000D09")]
		[Address(RVA = "0x1E42304", Offset = "0x1E42304", VA = "0x1E42304")]
		private void clearModules()
		{
		}

		[Token(Token = "0x6000D0A")]
		[Address(RVA = "0x1E432E4", Offset = "0x1E432E4", VA = "0x1E432E4")]
		public string getUniqueModuleNameINTERNAL(string name)
		{
			return null;
		}

		[Token(Token = "0x6000D0B")]
		[Address(RVA = "0x1E382A0", Offset = "0x1E382A0", VA = "0x1E382A0")]
		internal void sortModulesINTERNAL()
		{
		}

		[Token(Token = "0x6000D0C")]
		[Address(RVA = "0x1E42EE4", Offset = "0x1E42EE4", VA = "0x1E42EE4")]
		private bool doSortModules()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D0D")]
		[Address(RVA = "0x1E41E4C", Offset = "0x1E41E4C", VA = "0x1E41E4C")]
		private static void ReorderEndpointRecursiveInputs(CGModule endPoint, HashSet<int> reordredModuleIds, Dictionary<CGModule, HashSet<CGModule>> modulesRecursiveInputs)
		{
		}

		[Token(Token = "0x6000D0E")]
		[Address(RVA = "0x1E41BDC", Offset = "0x1E41BDC", VA = "0x1E41BDC")]
		private static HashSet<CGModule> UpdateModulesRecursiveInputs(Dictionary<CGModule, HashSet<CGModule>> modulesRecursiveInputs, CGModule moduleToAdd)
		{
			return null;
		}

		[Token(Token = "0x6000D0F")]
		[Address(RVA = "0x1E43504", Offset = "0x1E43504", VA = "0x1E43504")]
		public CurvyGenerator()
		{
		}

		[Token(Token = "0x6000D10")]
		[Address(RVA = "0x1E435FC", Offset = "0x1E435FC", VA = "0x1E435FC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD712C", Offset = "0xFD712C")]
		private bool <Initialize>b__57_0(CGModule m)
		{
			return default(bool);
		}
	}
}
namespace FluffyUnderware.Curvy.Generator.Modules
{
	[Token(Token = "0x2000171")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0xFC7748", Offset = "0xFC7748")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC7748", Offset = "0xFC7748")]
	public class BuildRasterizedPath : CGModule, IPathProvider
	{
		[Token(Token = "0x40007A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0xFCF2C8", Offset = "0xFCF2C8")]
		public CGModuleInputSlot InPath;

		[Token(Token = "0x40007A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0xFCF398", Offset = "0xFCF398")]
		public CGModuleOutputSlot OutPath;

		[Token(Token = "0x40007A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[FloatRegion]
		[SerializeField]
		private FloatRegion m_Range;

		[Token(Token = "0x40007A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0xFCF4AC", Offset = "0xFCF4AC")]
		private int m_Resolution;

		[Token(Token = "0x40007A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private bool m_Optimize;

		[Token(Token = "0x40007AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFCF528", Offset = "0xFCF528")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0xFCF528", Offset = "0xFCF528")]
		private float m_AngleTreshold;

		[Token(Token = "0x1700028C")]
		public float From
		{
			[Token(Token = "0x6000D11")]
			[Address(RVA = "0x1E438D8", Offset = "0x1E438D8", VA = "0x1E438D8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D12")]
			[Address(RVA = "0x1E438E0", Offset = "0x1E438E0", VA = "0x1E438E0")]
			set
			{
			}
		}

		[Token(Token = "0x1700028D")]
		public float To
		{
			[Token(Token = "0x6000D13")]
			[Address(RVA = "0x1E43978", Offset = "0x1E43978", VA = "0x1E43978")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D14")]
			[Address(RVA = "0x1E43980", Offset = "0x1E43980", VA = "0x1E43980")]
			set
			{
			}
		}

		[Token(Token = "0x1700028E")]
		public float Length
		{
			[Token(Token = "0x6000D15")]
			[Address(RVA = "0x1E43B44", Offset = "0x1E43B44", VA = "0x1E43B44")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D16")]
			[Address(RVA = "0x1E43B74", Offset = "0x1E43B74", VA = "0x1E43B74")]
			set
			{
			}
		}

		[Token(Token = "0x1700028F")]
		public int Resolution
		{
			[Token(Token = "0x6000D17")]
			[Address(RVA = "0x1E43BC8", Offset = "0x1E43BC8", VA = "0x1E43BC8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D18")]
			[Address(RVA = "0x1E43BD0", Offset = "0x1E43BD0", VA = "0x1E43BD0")]
			set
			{
			}
		}

		[Token(Token = "0x17000290")]
		public bool Optimize
		{
			[Token(Token = "0x6000D19")]
			[Address(RVA = "0x1E43C6C", Offset = "0x1E43C6C", VA = "0x1E43C6C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D1A")]
			[Address(RVA = "0x1E43C74", Offset = "0x1E43C74", VA = "0x1E43C74")]
			set
			{
			}
		}

		[Token(Token = "0x17000291")]
		public float AngleThreshold
		{
			[Token(Token = "0x6000D1B")]
			[Address(RVA = "0x1E43C9C", Offset = "0x1E43C9C", VA = "0x1E43C9C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D1C")]
			[Address(RVA = "0x1E43CA4", Offset = "0x1E43CA4", VA = "0x1E43CA4")]
			set
			{
			}
		}

		[Token(Token = "0x17000292")]
		public CGPath Path
		{
			[Token(Token = "0x6000D1D")]
			[Address(RVA = "0x1E43D48", Offset = "0x1E43D48", VA = "0x1E43D48")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000293")]
		public bool PathIsClosed
		{
			[Token(Token = "0x6000D1E")]
			[Address(RVA = "0x1E43A58", Offset = "0x1E43A58", VA = "0x1E43A58", Slot = "15")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000294")]
		private RegionOptions<float> RangeOptions
		{
			[Token(Token = "0x6000D1F")]
			[Address(RVA = "0x1E43DA0", Offset = "0x1E43DA0", VA = "0x1E43DA0")]
			get
			{
				return default(RegionOptions<float>);
			}
		}

		[Token(Token = "0x6000D20")]
		[Address(RVA = "0x1E43EA4", Offset = "0x1E43EA4", VA = "0x1E43EA4", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000D21")]
		[Address(RVA = "0x1E43EEC", Offset = "0x1E43EEC", VA = "0x1E43EEC", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000D22")]
		[Address(RVA = "0x1E43F60", Offset = "0x1E43F60", VA = "0x1E43F60", Slot = "11")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x6000D23")]
		[Address(RVA = "0x1E44160", Offset = "0x1E44160", VA = "0x1E44160")]
		public BuildRasterizedPath()
		{
		}
	}
	[Token(Token = "0x2000172")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0xFC77E0", Offset = "0xFC77E0")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC77E0", Offset = "0xFC77E0")]
	public class BuildShapeExtrusion : CGModule, IPathProvider
	{
		[Token(Token = "0x2000238")]
		public enum ScaleModeEnum
		{
			[Token(Token = "0x4000B74")]
			Simple,
			[Token(Token = "0x4000B75")]
			Advanced
		}

		[Token(Token = "0x2000239")]
		public enum CrossShiftModeEnum
		{
			[Token(Token = "0x4000B77")]
			None,
			[Token(Token = "0x4000B78")]
			ByOrientation,
			[Token(Token = "0x4000B79")]
			Custom
		}

		[Serializable]
		[Token(Token = "0x200023A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC89EC", Offset = "0xFC89EC")]
		private sealed class <>c
		{
			[Token(Token = "0x4000B7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000B7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<CGShape, int> <>9__152_0;

			[Token(Token = "0x6001027")]
			[Address(RVA = "0x1E469F4", Offset = "0x1E469F4", VA = "0x1E469F4")]
			public <>c()
			{
			}

			[Token(Token = "0x6001028")]
			[Address(RVA = "0x1E469FC", Offset = "0x1E469FC", VA = "0x1E469FC")]
			internal int <Refresh>b__152_0(CGShape c)
			{
				return default(int);
			}
		}

		[Token(Token = "0x40007AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0xFCF624", Offset = "0xFCF624")]
		public CGModuleInputSlot InPath;

		[Token(Token = "0x40007AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0xFCF6D8", Offset = "0xFCF6D8")]
		public CGModuleInputSlot InCross;

		[Token(Token = "0x40007AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0xFCF798", Offset = "0xFCF798")]
		public CGModuleOutputSlot OutVolume;

		[Token(Token = "0x40007AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0xFCF80C", Offset = "0xFCF80C")]
		public CGModuleOutputSlot OutVolumeHollow;

		[Token(Token = "0x40007AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0xFCF880", Offset = "0xFCF880")]
		[FloatRegion]
		[SerializeField]
		private FloatRegion m_Range;

		[Token(Token = "0x40007B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0xFCF90C", Offset = "0xFCF90C")]
		private int m_Resolution;

		[Token(Token = "0x40007B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private bool m_Optimize;

		[Token(Token = "0x40007B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFCF988", Offset = "0xFCF988")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0xFCF988", Offset = "0xFCF988")]
		private float m_AngleThreshold;

		[Token(Token = "0x40007B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0xFCFAA0", Offset = "0xFCFAA0")]
		[AttributeAttribute(Name = "FieldActionAttribute", RVA = "0xFCFAA0", Offset = "0xFCFAA0")]
		[FloatRegion]
		[SerializeField]
		private FloatRegion m_CrossRange;

		[Token(Token = "0x40007B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0xFCFB58", Offset = "0xFCFB58")]
		private int m_CrossResolution;

		[Token(Token = "0x40007B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFCFBE0", Offset = "0xFCFBE0")]
		private bool m_CrossOptimize;

		[Token(Token = "0x40007B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFCFC40", Offset = "0xFCFC40")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0xFCFC40", Offset = "0xFCFC40")]
		private float m_CrossAngleThreshold;

		[Token(Token = "0x40007B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFCFD58", Offset = "0xFCFD58")]
		private bool m_CrossIncludeControlpoints;

		[Token(Token = "0x40007B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF9")]
		[SerializeField]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFCFDB8", Offset = "0xFCFDB8")]
		private bool m_CrossHardEdges;

		[Token(Token = "0x40007B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFA")]
		[SerializeField]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFCFE18", Offset = "0xFCFE18")]
		private bool m_CrossMaterials;

		[Token(Token = "0x40007BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFB")]
		[SerializeField]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFCFE78", Offset = "0xFCFE78")]
		private bool m_CrossExtendedUV;

		[Token(Token = "0x40007BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[SerializeField]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFCFED8", Offset = "0xFCFED8")]
		private CrossShiftModeEnum m_CrossShiftMode;

		[Token(Token = "0x40007BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0xFCFF54", Offset = "0xFCFF54")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFCFF54", Offset = "0xFCFF54")]
		private float m_CrossShiftValue;

		[Token(Token = "0x40007BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFD0050", Offset = "0xFD0050")]
		[SerializeField]
		private bool m_CrossReverseNormals;

		[Token(Token = "0x40007BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0xFD00B8", Offset = "0xFD00B8")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFD00B8", Offset = "0xFD00B8")]
		[SerializeField]
		private ScaleModeEnum m_ScaleMode;

		[Token(Token = "0x40007BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFD0144", Offset = "0xFD0144")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFD0144", Offset = "0xFD0144")]
		[SerializeField]
		private CGReferenceMode m_ScaleReference;

		[Token(Token = "0x40007C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFD0230", Offset = "0xFD0230")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFD0230", Offset = "0xFD0230")]
		[SerializeField]
		private float m_ScaleOffset;

		[Token(Token = "0x40007C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		[SerializeField]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFD031C", Offset = "0xFD031C")]
		private bool m_ScaleUniform;

		[Token(Token = "0x40007C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		private float m_ScaleX;

		[Token(Token = "0x40007C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFD03A8", Offset = "0xFD03A8")]
		private float m_ScaleY;

		[Token(Token = "0x40007C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFD0458", Offset = "0xFD0458")]
		[AttributeAttribute(Name = "AnimationCurveExAttribute", RVA = "0xFD0458", Offset = "0xFD0458")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFD0458", Offset = "0xFD0458")]
		private AnimationCurve m_ScaleCurveX;

		[Token(Token = "0x40007C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFD0568", Offset = "0xFD0568")]
		[AttributeAttribute(Name = "AnimationCurveExAttribute", RVA = "0xFD0568", Offset = "0xFD0568")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFD0568", Offset = "0xFD0568")]
		private AnimationCurve m_ScaleCurveY;

		[Token(Token = "0x40007C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0xFD06BC", Offset = "0xFD06BC")]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0xFD06BC", Offset = "0xFD06BC")]
		[SerializeField]
		private float m_HollowInset;

		[Token(Token = "0x40007C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFD0774", Offset = "0xFD0774")]
		[SerializeField]
		private bool m_HollowReverseNormals;

		[Token(Token = "0x40007C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD07DC", Offset = "0xFD07DC")]
		private int <PathSamples>k__BackingField;

		[Token(Token = "0x40007C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD07EC", Offset = "0xFD07EC")]
		private int <CrossSamples>k__BackingField;

		[Token(Token = "0x40007CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD07FC", Offset = "0xFD07FC")]
		private int <CrossGroups>k__BackingField;

		[Token(Token = "0x40007CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD080C", Offset = "0xFD080C")]
		private Vector3 <CrossPosition>k__BackingField;

		[Token(Token = "0x40007CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD081C", Offset = "0xFD081C")]
		private Quaternion <CrossRotation>k__BackingField;

		[Token(Token = "0x17000295")]
		public float From
		{
			[Token(Token = "0x6000D24")]
			[Address(RVA = "0x1E44218", Offset = "0x1E44218", VA = "0x1E44218")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D25")]
			[Address(RVA = "0x1E44220", Offset = "0x1E44220", VA = "0x1E44220")]
			set
			{
			}
		}

		[Token(Token = "0x17000296")]
		public float To
		{
			[Token(Token = "0x6000D26")]
			[Address(RVA = "0x1E442B8", Offset = "0x1E442B8", VA = "0x1E442B8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D27")]
			[Address(RVA = "0x1E442C0", Offset = "0x1E442C0", VA = "0x1E442C0")]
			set
			{
			}
		}

		[Token(Token = "0x17000297")]
		public float Length
		{
			[Token(Token = "0x6000D28")]
			[Address(RVA = "0x1E4446C", Offset = "0x1E4446C", VA = "0x1E4446C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D29")]
			[Address(RVA = "0x1E4449C", Offset = "0x1E4449C", VA = "0x1E4449C")]
			set
			{
			}
		}

		[Token(Token = "0x17000298")]
		public int Resolution
		{
			[Token(Token = "0x6000D2A")]
			[Address(RVA = "0x1E444F0", Offset = "0x1E444F0", VA = "0x1E444F0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D2B")]
			[Address(RVA = "0x1E444F8", Offset = "0x1E444F8", VA = "0x1E444F8")]
			set
			{
			}
		}

		[Token(Token = "0x17000299")]
		public bool Optimize
		{
			[Token(Token = "0x6000D2C")]
			[Address(RVA = "0x1E44594", Offset = "0x1E44594", VA = "0x1E44594")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D2D")]
			[Address(RVA = "0x1E4459C", Offset = "0x1E4459C", VA = "0x1E4459C")]
			set
			{
			}
		}

		[Token(Token = "0x1700029A")]
		public float AngleThreshold
		{
			[Token(Token = "0x6000D2E")]
			[Address(RVA = "0x1E445C4", Offset = "0x1E445C4", VA = "0x1E445C4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D2F")]
			[Address(RVA = "0x1E445CC", Offset = "0x1E445CC", VA = "0x1E445CC")]
			set
			{
			}
		}

		[Token(Token = "0x1700029B")]
		public float CrossFrom
		{
			[Token(Token = "0x6000D30")]
			[Address(RVA = "0x1E44670", Offset = "0x1E44670", VA = "0x1E44670")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D31")]
			[Address(RVA = "0x1E44678", Offset = "0x1E44678", VA = "0x1E44678")]
			set
			{
			}
		}

		[Token(Token = "0x1700029C")]
		public float CrossTo
		{
			[Token(Token = "0x6000D32")]
			[Address(RVA = "0x1E44710", Offset = "0x1E44710", VA = "0x1E44710")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D33")]
			[Address(RVA = "0x1E44718", Offset = "0x1E44718", VA = "0x1E44718")]
			set
			{
			}
		}

		[Token(Token = "0x1700029D")]
		public float CrossLength
		{
			[Token(Token = "0x6000D34")]
			[Address(RVA = "0x1E448C4", Offset = "0x1E448C4", VA = "0x1E448C4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D35")]
			[Address(RVA = "0x1E448F4", Offset = "0x1E448F4", VA = "0x1E448F4")]
			set
			{
			}
		}

		[Token(Token = "0x1700029E")]
		public int CrossResolution
		{
			[Token(Token = "0x6000D36")]
			[Address(RVA = "0x1E44948", Offset = "0x1E44948", VA = "0x1E44948")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D37")]
			[Address(RVA = "0x1E44950", Offset = "0x1E44950", VA = "0x1E44950")]
			set
			{
			}
		}

		[Token(Token = "0x1700029F")]
		public bool CrossOptimize
		{
			[Token(Token = "0x6000D38")]
			[Address(RVA = "0x1E449EC", Offset = "0x1E449EC", VA = "0x1E449EC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D39")]
			[Address(RVA = "0x1E449F4", Offset = "0x1E449F4", VA = "0x1E449F4")]
			set
			{
			}
		}

		[Token(Token = "0x170002A0")]
		public float CrossAngleThreshold
		{
			[Token(Token = "0x6000D3A")]
			[Address(RVA = "0x1E44A1C", Offset = "0x1E44A1C", VA = "0x1E44A1C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D3B")]
			[Address(RVA = "0x1E44A24", Offset = "0x1E44A24", VA = "0x1E44A24")]
			set
			{
			}
		}

		[Token(Token = "0x170002A1")]
		public bool CrossIncludeControlPoints
		{
			[Token(Token = "0x6000D3C")]
			[Address(RVA = "0x1E44AC8", Offset = "0x1E44AC8", VA = "0x1E44AC8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D3D")]
			[Address(RVA = "0x1E44AD0", Offset = "0x1E44AD0", VA = "0x1E44AD0")]
			set
			{
			}
		}

		[Token(Token = "0x170002A2")]
		public bool CrossHardEdges
		{
			[Token(Token = "0x6000D3E")]
			[Address(RVA = "0x1E44AF8", Offset = "0x1E44AF8", VA = "0x1E44AF8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D3F")]
			[Address(RVA = "0x1E44B00", Offset = "0x1E44B00", VA = "0x1E44B00")]
			set
			{
			}
		}

		[Token(Token = "0x170002A3")]
		public bool CrossMaterials
		{
			[Token(Token = "0x6000D40")]
			[Address(RVA = "0x1E44B28", Offset = "0x1E44B28", VA = "0x1E44B28")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D41")]
			[Address(RVA = "0x1E44B30", Offset = "0x1E44B30", VA = "0x1E44B30")]
			set
			{
			}
		}

		[Token(Token = "0x170002A4")]
		public bool CrossExtendedUV
		{
			[Token(Token = "0x6000D42")]
			[Address(RVA = "0x1E44B58", Offset = "0x1E44B58", VA = "0x1E44B58")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D43")]
			[Address(RVA = "0x1E44B60", Offset = "0x1E44B60", VA = "0x1E44B60")]
			set
			{
			}
		}

		[Token(Token = "0x170002A5")]
		public CrossShiftModeEnum CrossShiftMode
		{
			[Token(Token = "0x6000D44")]
			[Address(RVA = "0x1E44B88", Offset = "0x1E44B88", VA = "0x1E44B88")]
			get
			{
				return default(CrossShiftModeEnum);
			}
			[Token(Token = "0x6000D45")]
			[Address(RVA = "0x1E44B90", Offset = "0x1E44B90", VA = "0x1E44B90")]
			set
			{
			}
		}

		[Token(Token = "0x170002A6")]
		public float CrossShiftValue
		{
			[Token(Token = "0x6000D46")]
			[Address(RVA = "0x1E44BAC", Offset = "0x1E44BAC", VA = "0x1E44BAC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D47")]
			[Address(RVA = "0x1E44BB4", Offset = "0x1E44BB4", VA = "0x1E44BB4")]
			set
			{
			}
		}

		[Token(Token = "0x170002A7")]
		public bool CrossReverseNormals
		{
			[Token(Token = "0x6000D48")]
			[Address(RVA = "0x1E44C4C", Offset = "0x1E44C4C", VA = "0x1E44C4C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D49")]
			[Address(RVA = "0x1E44C54", Offset = "0x1E44C54", VA = "0x1E44C54")]
			set
			{
			}
		}

		[Token(Token = "0x170002A8")]
		public ScaleModeEnum ScaleMode
		{
			[Token(Token = "0x6000D4A")]
			[Address(RVA = "0x1E44C7C", Offset = "0x1E44C7C", VA = "0x1E44C7C")]
			get
			{
				return default(ScaleModeEnum);
			}
			[Token(Token = "0x6000D4B")]
			[Address(RVA = "0x1E44C84", Offset = "0x1E44C84", VA = "0x1E44C84")]
			set
			{
			}
		}

		[Token(Token = "0x170002A9")]
		public CGReferenceMode ScaleReference
		{
			[Token(Token = "0x6000D4C")]
			[Address(RVA = "0x1E44CA0", Offset = "0x1E44CA0", VA = "0x1E44CA0")]
			get
			{
				return default(CGReferenceMode);
			}
			[Token(Token = "0x6000D4D")]
			[Address(RVA = "0x1E44CA8", Offset = "0x1E44CA8", VA = "0x1E44CA8")]
			set
			{
			}
		}

		[Token(Token = "0x170002AA")]
		public bool ScaleUniform
		{
			[Token(Token = "0x6000D4E")]
			[Address(RVA = "0x1E44CC4", Offset = "0x1E44CC4", VA = "0x1E44CC4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D4F")]
			[Address(RVA = "0x1E44CCC", Offset = "0x1E44CCC", VA = "0x1E44CCC")]
			set
			{
			}
		}

		[Token(Token = "0x170002AB")]
		public float ScaleOffset
		{
			[Token(Token = "0x6000D50")]
			[Address(RVA = "0x1E44CF4", Offset = "0x1E44CF4", VA = "0x1E44CF4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D51")]
			[Address(RVA = "0x1E44CFC", Offset = "0x1E44CFC", VA = "0x1E44CFC")]
			set
			{
			}
		}

		[Token(Token = "0x170002AC")]
		public float ScaleX
		{
			[Token(Token = "0x6000D52")]
			[Address(RVA = "0x1E44D18", Offset = "0x1E44D18", VA = "0x1E44D18")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D53")]
			[Address(RVA = "0x1E44D20", Offset = "0x1E44D20", VA = "0x1E44D20")]
			set
			{
			}
		}

		[Token(Token = "0x170002AD")]
		public float ScaleY
		{
			[Token(Token = "0x6000D54")]
			[Address(RVA = "0x1E44D3C", Offset = "0x1E44D3C", VA = "0x1E44D3C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D55")]
			[Address(RVA = "0x1E44D44", Offset = "0x1E44D44", VA = "0x1E44D44")]
			set
			{
			}
		}

		[Token(Token = "0x170002AE")]
		public AnimationCurve ScaleMultiplierX
		{
			[Token(Token = "0x6000D56")]
			[Address(RVA = "0x1E44D60", Offset = "0x1E44D60", VA = "0x1E44D60")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D57")]
			[Address(RVA = "0x1E44D68", Offset = "0x1E44D68", VA = "0x1E44D68")]
			set
			{
			}
		}

		[Token(Token = "0x170002AF")]
		public AnimationCurve ScaleMultiplierY
		{
			[Token(Token = "0x6000D58")]
			[Address(RVA = "0x1E44DA8", Offset = "0x1E44DA8", VA = "0x1E44DA8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D59")]
			[Address(RVA = "0x1E44DB0", Offset = "0x1E44DB0", VA = "0x1E44DB0")]
			set
			{
			}
		}

		[Token(Token = "0x170002B0")]
		public float HollowInset
		{
			[Token(Token = "0x6000D5A")]
			[Address(RVA = "0x1E44DF0", Offset = "0x1E44DF0", VA = "0x1E44DF0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D5B")]
			[Address(RVA = "0x1E44DF8", Offset = "0x1E44DF8", VA = "0x1E44DF8")]
			set
			{
			}
		}

		[Token(Token = "0x170002B1")]
		public bool HollowReverseNormals
		{
			[Token(Token = "0x6000D5C")]
			[Address(RVA = "0x1E44E8C", Offset = "0x1E44E8C", VA = "0x1E44E8C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D5D")]
			[Address(RVA = "0x1E44E94", Offset = "0x1E44E94", VA = "0x1E44E94")]
			set
			{
			}
		}

		[Token(Token = "0x170002B2")]
		public int PathSamples
		{
			[Token(Token = "0x6000D5E")]
			[Address(RVA = "0x1E44EBC", Offset = "0x1E44EBC", VA = "0x1E44EBC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD713C", Offset = "0xFD713C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D5F")]
			[Address(RVA = "0x1E44EC4", Offset = "0x1E44EC4", VA = "0x1E44EC4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD714C", Offset = "0xFD714C")]
			private set
			{
			}
		}

		[Token(Token = "0x170002B3")]
		public int CrossSamples
		{
			[Token(Token = "0x6000D60")]
			[Address(RVA = "0x1E44ECC", Offset = "0x1E44ECC", VA = "0x1E44ECC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD715C", Offset = "0xFD715C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D61")]
			[Address(RVA = "0x1E44ED4", Offset = "0x1E44ED4", VA = "0x1E44ED4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD716C", Offset = "0xFD716C")]
			private set
			{
			}
		}

		[Token(Token = "0x170002B4")]
		public int CrossGroups
		{
			[Token(Token = "0x6000D62")]
			[Address(RVA = "0x1E44EDC", Offset = "0x1E44EDC", VA = "0x1E44EDC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD717C", Offset = "0xFD717C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D63")]
			[Address(RVA = "0x1E44EE4", Offset = "0x1E44EE4", VA = "0x1E44EE4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD718C", Offset = "0xFD718C")]
			private set
			{
			}
		}

		[Token(Token = "0x170002B5")]
		public IExternalInput Cross
		{
			[Token(Token = "0x6000D64")]
			[Address(RVA = "0x1E44EEC", Offset = "0x1E44EEC", VA = "0x1E44EEC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B6")]
		public Vector3 CrossPosition
		{
			[Token(Token = "0x6000D65")]
			[Address(RVA = "0x1E44F40", Offset = "0x1E44F40", VA = "0x1E44F40")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD719C", Offset = "0xFD719C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000D66")]
			[Address(RVA = "0x1E44F50", Offset = "0x1E44F50", VA = "0x1E44F50")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD71AC", Offset = "0xFD71AC")]
			protected set
			{
			}
		}

		[Token(Token = "0x170002B7")]
		public Quaternion CrossRotation
		{
			[Token(Token = "0x6000D67")]
			[Address(RVA = "0x1E44F60", Offset = "0x1E44F60", VA = "0x1E44F60")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD71BC", Offset = "0xFD71BC")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x6000D68")]
			[Address(RVA = "0x1E44F74", Offset = "0x1E44F74", VA = "0x1E44F74")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD71CC", Offset = "0xFD71CC")]
			protected set
			{
			}
		}

		[Token(Token = "0x170002B8")]
		public bool PathIsClosed
		{
			[Token(Token = "0x6000D69")]
			[Address(RVA = "0x1E44F88", Offset = "0x1E44F88", VA = "0x1E44F88", Slot = "15")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002B9")]
		private bool ClampPath
		{
			[Token(Token = "0x6000D6A")]
			[Address(RVA = "0x1E44380", Offset = "0x1E44380", VA = "0x1E44380")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002BA")]
		private bool ClampCross
		{
			[Token(Token = "0x6000D6B")]
			[Address(RVA = "0x1E447D8", Offset = "0x1E447D8", VA = "0x1E447D8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002BB")]
		private RegionOptions<float> RangeOptions
		{
			[Token(Token = "0x6000D6C")]
			[Address(RVA = "0x1E45050", Offset = "0x1E45050", VA = "0x1E45050")]
			get
			{
				return default(RegionOptions<float>);
			}
		}

		[Token(Token = "0x170002BC")]
		private RegionOptions<float> CrossRangeOptions
		{
			[Token(Token = "0x6000D6D")]
			[Address(RVA = "0x1E45154", Offset = "0x1E45154", VA = "0x1E45154")]
			get
			{
				return default(RegionOptions<float>);
			}
		}

		[Token(Token = "0x6000D6E")]
		[Address(RVA = "0x1E45258", Offset = "0x1E45258", VA = "0x1E45258", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000D6F")]
		[Address(RVA = "0x1E452A0", Offset = "0x1E452A0", VA = "0x1E452A0", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000D70")]
		[Address(RVA = "0x1E45558", Offset = "0x1E45558", VA = "0x1E45558", Slot = "11")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x6000D71")]
		[Address(RVA = "0x1E466F8", Offset = "0x1E466F8", VA = "0x1E466F8")]
		public Vector3 GetScale(float f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D72")]
		[Address(RVA = "0x1E46634", Offset = "0x1E46634", VA = "0x1E46634")]
		private void getScaleInternal(float f, Vector3 baseScale, ref Vector3 scale)
		{
		}

		[Token(Token = "0x6000D73")]
		[Address(RVA = "0x1E467F8", Offset = "0x1E467F8", VA = "0x1E467F8")]
		public BuildShapeExtrusion()
		{
		}
	}
	[Token(Token = "0x2000173")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0xFC7878", Offset = "0xFC7878")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC7878", Offset = "0xFC7878")]
	public class BuildVolumeCaps : CGModule
	{
		[Token(Token = "0x40007CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0xFD082C", Offset = "0xFD082C")]
		public CGModuleInputSlot InVolume;

		[Token(Token = "0x40007CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0xFD08C8", Offset = "0xFD08C8")]
		public CGModuleInputSlot InVolumeHoles;

		[Token(Token = "0x40007CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0xFD0980", Offset = "0xFD0980")]
		public CGModuleOutputSlot OutVMesh;

		[Token(Token = "0x40007D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0xFD0A00", Offset = "0xFD0A00")]
		[SerializeField]
		private CGYesNoAuto m_StartCap;

		[Token(Token = "0x40007D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[SerializeField]
		private CGYesNoAuto m_EndCap;

		[Token(Token = "0x40007D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xFD0A5C", Offset = "0xFD0A5C")]
		private bool m_ReverseTriOrder;

		[Token(Token = "0x40007D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
		[SerializeField]
		private bool m_GenerateUV;

		[Token(Token = "0x40007D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0xFD0AB8", Offset = "0xFD0AB8")]
		[Inline]
		[SerializeField]
		private CGMaterialSettings m_StartMaterialSettings;

		[Token(Token = "0x40007D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFD0B14", Offset = "0xFD0B14")]
		[SerializeField]
		private Material m_StartMaterial;

		[Token(Token = "0x40007D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0xFD0B7C", Offset = "0xFD0B7C")]
		[SerializeField]
		private bool m_CloneStartCap;

		[Token(Token = "0x40007D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[AttributeAttribute(Name = "AsGroupAttribute", RVA = "0xFD0BC8", Offset = "0xFD0BC8")]
		[AttributeAttribute(Name = "GroupConditionAttribute", RVA = "0xFD0BC8", Offset = "0xFD0BC8")]
		[SerializeField]
		private CGMaterialSettings m_EndMaterialSettings;

		[Token(Token = "0x40007D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[AttributeAttribute(Name = "GroupAttribute", RVA = "0xFD0C8C", Offset = "0xFD0C8C")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFD0C8C", Offset = "0xFD0C8C")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFD0C8C", Offset = "0xFD0C8C")]
		[SerializeField]
		private Material m_EndMaterial;

		[Token(Token = "0x170002BD")]
		public bool GenerateUV
		{
			[Token(Token = "0x6000D74")]
			[Address(RVA = "0x1E46A1C", Offset = "0x1E46A1C", VA = "0x1E46A1C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D75")]
			[Address(RVA = "0x1E46A24", Offset = "0x1E46A24", VA = "0x1E46A24")]
			set
			{
			}
		}

		[Token(Token = "0x170002BE")]
		public bool ReverseTriOrder
		{
			[Token(Token = "0x6000D76")]
			[Address(RVA = "0x1E46A4C", Offset = "0x1E46A4C", VA = "0x1E46A4C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D77")]
			[Address(RVA = "0x1E46A54", Offset = "0x1E46A54", VA = "0x1E46A54")]
			set
			{
			}
		}

		[Token(Token = "0x170002BF")]
		public CGYesNoAuto StartCap
		{
			[Token(Token = "0x6000D78")]
			[Address(RVA = "0x1E46A7C", Offset = "0x1E46A7C", VA = "0x1E46A7C")]
			get
			{
				return default(CGYesNoAuto);
			}
			[Token(Token = "0x6000D79")]
			[Address(RVA = "0x1E46A84", Offset = "0x1E46A84", VA = "0x1E46A84")]
			set
			{
			}
		}

		[Token(Token = "0x170002C0")]
		public Material StartMaterial
		{
			[Token(Token = "0x6000D7A")]
			[Address(RVA = "0x1E46AA0", Offset = "0x1E46AA0", VA = "0x1E46AA0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D7B")]
			[Address(RVA = "0x1E46AA8", Offset = "0x1E46AA8", VA = "0x1E46AA8")]
			set
			{
			}
		}

		[Token(Token = "0x170002C1")]
		public CGMaterialSettings StartMaterialSettings
		{
			[Token(Token = "0x6000D7C")]
			[Address(RVA = "0x1E46B4C", Offset = "0x1E46B4C", VA = "0x1E46B4C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002C2")]
		public CGYesNoAuto EndCap
		{
			[Token(Token = "0x6000D7D")]
			[Address(RVA = "0x1E46B54", Offset = "0x1E46B54", VA = "0x1E46B54")]
			get
			{
				return default(CGYesNoAuto);
			}
			[Token(Token = "0x6000D7E")]
			[Address(RVA = "0x1E46B5C", Offset = "0x1E46B5C", VA = "0x1E46B5C")]
			set
			{
			}
		}

		[Token(Token = "0x170002C3")]
		public bool CloneStartCap
		{
			[Token(Token = "0x6000D7F")]
			[Address(RVA = "0x1E46B78", Offset = "0x1E46B78", VA = "0x1E46B78")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D80")]
			[Address(RVA = "0x1E46B80", Offset = "0x1E46B80", VA = "0x1E46B80")]
			set
			{
			}
		}

		[Token(Token = "0x170002C4")]
		public CGMaterialSettings EndMaterialSettings
		{
			[Token(Token = "0x6000D81")]
			[Address(RVA = "0x1E46BA8", Offset = "0x1E46BA8", VA = "0x1E46BA8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002C5")]
		public Material EndMaterial
		{
			[Token(Token = "0x6000D82")]
			[Address(RVA = "0x1E46BB0", Offset = "0x1E46BB0", VA = "0x1E46BB0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D83")]
			[Address(RVA = "0x1E46BB8", Offset = "0x1E46BB8", VA = "0x1E46BB8")]
			set
			{
			}
		}

		[Token(Token = "0x6000D84")]
		[Address(RVA = "0x1E46C5C", Offset = "0x1E46C5C", VA = "0x1E46C5C", Slot = "5")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000D85")]
		[Address(RVA = "0x1E46D4C", Offset = "0x1E46D4C", VA = "0x1E46D4C", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000D86")]
		[Address(RVA = "0x1E46EB8", Offset = "0x1E46EB8", VA = "0x1E46EB8", Slot = "11")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x6000D87")]
		[Address(RVA = "0x1E47AFC", Offset = "0x1E47AFC", VA = "0x1E47AFC")]
		private static Matrix4x4 getMatrix(CGVolume vol, int index, bool inverse)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6000D88")]
		[Address(RVA = "0x1E48074", Offset = "0x1E48074", VA = "0x1E48074")]
		private static void flipTris(ref int[] indices, int start, int end)
		{
		}

		[Token(Token = "0x6000D89")]
		[Address(RVA = "0x1E47DF0", Offset = "0x1E47DF0", VA = "0x1E47DF0")]
		private static Vector3[] applyMatrix(Vector3[] vt, Matrix4x4 matrix, out Bounds bounds)
		{
			return null;
		}

		[Token(Token = "0x6000D8A")]
		[Address(RVA = "0x1E47974", Offset = "0x1E47974", VA = "0x1E47974")]
		private static ContourVertex[] make2DSegment(CGVolume vol, int segmentIndex)
		{
			return null;
		}

		[Token(Token = "0x6000D8B")]
		[Address(RVA = "0x1E480FC", Offset = "0x1E480FC", VA = "0x1E480FC")]
		private static void applyUV(Vector3[] vts, ref Vector2[] uvArray, int index, int count, CGMaterialSettings mat, Bounds bounds)
		{
		}

		[Token(Token = "0x6000D8C")]
		[Address(RVA = "0x1E48418", Offset = "0x1E48418", VA = "0x1E48418")]
		public BuildVolumeCaps()
		{
		}
	}
	[Token(Token = "0x2000174")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0xFC7910", Offset = "0xFC7910")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC7910", Offset = "0xFC7910")]
	public class BuildVolumeMesh : CGModule
	{
		[Token(Token = "0x40007D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0xFD0D98", Offset = "0xFD0D98")]
		public CGModuleInputSlot InVolume;

		[Token(Token = "0x40007DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0xFD0E34", Offset = "0xFD0E34")]
		public CGModuleOutputSlot OutVMesh;

		[Token(Token = "0x40007DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0xFD0EB4", Offset = "0xFD0EB4")]
		[SerializeField]
		private bool m_GenerateUV;

		[Token(Token = "0x40007DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
		[SerializeField]
		private bool m_Split;

		[Token(Token = "0x40007DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[Positive]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFD0F10", Offset = "0xFD0F10")]
		[SerializeField]
		private float m_SplitLength;

		[Token(Token = "0x40007DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "FieldActionAttribute", RVA = "0xFD0FE0", Offset = "0xFD0FE0")]
		[SerializeField]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xFD0FE0", Offset = "0xFD0FE0")]
		private bool m_ReverseTriOrder;

		[Token(Token = "0x40007DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		[HideInInspector]
		private List<CGMaterialSettingsEx> m_MaterialSettings;

		[Token(Token = "0x40007E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		[HideInInspector]
		private Material[] m_Material;

		[Token(Token = "0x40007E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private List<SamplePointsMaterialGroupCollection> groupsByMatID;

		[Token(Token = "0x170002C6")]
		public bool GenerateUV
		{
			[Token(Token = "0x6000D8D")]
			[Address(RVA = "0x1E48544", Offset = "0x1E48544", VA = "0x1E48544")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D8E")]
			[Address(RVA = "0x1E4854C", Offset = "0x1E4854C", VA = "0x1E4854C")]
			set
			{
			}
		}

		[Token(Token = "0x170002C7")]
		public bool ReverseTriOrder
		{
			[Token(Token = "0x6000D8F")]
			[Address(RVA = "0x1E48574", Offset = "0x1E48574", VA = "0x1E48574")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D90")]
			[Address(RVA = "0x1E4857C", Offset = "0x1E4857C", VA = "0x1E4857C")]
			set
			{
			}
		}

		[Token(Token = "0x170002C8")]
		public bool Split
		{
			[Token(Token = "0x6000D91")]
			[Address(RVA = "0x1E485A4", Offset = "0x1E485A4", VA = "0x1E485A4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D92")]
			[Address(RVA = "0x1E485AC", Offset = "0x1E485AC", VA = "0x1E485AC")]
			set
			{
			}
		}

		[Token(Token = "0x170002C9")]
		public float SplitLength
		{
			[Token(Token = "0x6000D93")]
			[Address(RVA = "0x1E485D4", Offset = "0x1E485D4", VA = "0x1E485D4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D94")]
			[Address(RVA = "0x1E485DC", Offset = "0x1E485DC", VA = "0x1E485DC")]
			set
			{
			}
		}

		[Token(Token = "0x170002CA")]
		public List<CGMaterialSettingsEx> MaterialSetttings
		{
			[Token(Token = "0x6000D95")]
			[Address(RVA = "0x1E48674", Offset = "0x1E48674", VA = "0x1E48674")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002CB")]
		public int MaterialCount
		{
			[Token(Token = "0x6000D96")]
			[Address(RVA = "0x1E4867C", Offset = "0x1E4867C", VA = "0x1E4867C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000D97")]
		[Address(RVA = "0x1E486CC", Offset = "0x1E486CC", VA = "0x1E486CC", Slot = "5")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000D98")]
		[Address(RVA = "0x1E487E0", Offset = "0x1E487E0", VA = "0x1E487E0", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000D99")]
		[Address(RVA = "0x1E489C0", Offset = "0x1E489C0", VA = "0x1E489C0", Slot = "11")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x6000D9A")]
		[Address(RVA = "0x1E4870C", Offset = "0x1E4870C", VA = "0x1E4870C")]
		public int AddMaterial()
		{
			return default(int);
		}

		[Token(Token = "0x6000D9B")]
		[Address(RVA = "0x1E49238", Offset = "0x1E49238", VA = "0x1E49238")]
		public void RemoveMaterial(int index)
		{
		}

		[Token(Token = "0x6000D9C")]
		[Address(RVA = "0x1E493A4", Offset = "0x1E493A4", VA = "0x1E493A4")]
		public void SetMaterial(int index, Material mat)
		{
		}

		[Token(Token = "0x6000D9D")]
		[Address(RVA = "0x1E49520", Offset = "0x1E49520", VA = "0x1E49520")]
		public Material GetMaterial(int index)
		{
			return null;
		}

		[Token(Token = "0x6000D9E")]
		[Address(RVA = "0x1E48E54", Offset = "0x1E48E54", VA = "0x1E48E54")]
		private void prepare(CGVolume vol)
		{
		}

		[Token(Token = "0x6000D9F")]
		[Address(RVA = "0x1E48E80", Offset = "0x1E48E80", VA = "0x1E48E80")]
		private void build(CGVMesh vmesh, CGVolume vol, IntRegion subset)
		{
		}

		[Token(Token = "0x6000DA0")]
		[Address(RVA = "0x1E498A0", Offset = "0x1E498A0", VA = "0x1E498A0")]
		private static void prepareSubMeshes(CGVMesh vmesh, List<SamplePointsMaterialGroupCollection> groupsBySubMeshes, int extrusions, ref Material[] materials)
		{
		}

		[Token(Token = "0x6000DA1")]
		[Address(RVA = "0x1E49A88", Offset = "0x1E49A88", VA = "0x1E49A88")]
		private void createMaterialGroupUV(CGVMesh vmesh, CGVolume vol, SamplePointsMaterialGroup grp, int matIndex, float grpAspectCorrection, int sample, int baseVertex)
		{
		}

		[Token(Token = "0x6000DA2")]
		[Address(RVA = "0x1E49C2C", Offset = "0x1E49C2C", VA = "0x1E49C2C")]
		private static int createPatchTriangles(ref int[] triangles, ref int triIdx, int curVTIndex, int patchSize, int crossSize, bool reverse)
		{
			return default(int);
		}

		[Token(Token = "0x6000DA3")]
		[Address(RVA = "0x1E4957C", Offset = "0x1E4957C", VA = "0x1E4957C")]
		private List<SamplePointsMaterialGroupCollection> getMaterialIDGroups(CGVolume volume)
		{
			return null;
		}

		[Token(Token = "0x6000DA4")]
		[Address(RVA = "0x1E492FC", Offset = "0x1E492FC", VA = "0x1E492FC")]
		private bool validateMaterialIndex(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DA5")]
		[Address(RVA = "0x1E49D88", Offset = "0x1E49D88", VA = "0x1E49D88")]
		public BuildVolumeMesh()
		{
		}
	}
	[Token(Token = "0x2000175")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0xFC79A8", Offset = "0xFC79A8")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC79A8", Offset = "0xFC79A8")]
	public class BuildVolumeSpots : CGModule, ISerializationCallbackReceiver
	{
		[Token(Token = "0x200023B")]
		private class EndGroupData
		{
			[Token(Token = "0x4000B7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD4B4C", Offset = "0xFD4B4C")]
			private CGBoundsGroup <BoundsGroup>k__BackingField;

			[Token(Token = "0x4000B7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD4B5C", Offset = "0xFD4B5C")]
			private int[] <ItemIndices>k__BackingField;

			[Token(Token = "0x4000B7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD4B6C", Offset = "0xFD4B6C")]
			private readonly float <GroupDepth>k__BackingField;

			[Token(Token = "0x4000B7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD4B7C", Offset = "0xFD4B7C")]
			private readonly CGBounds[] <ItemBounds>k__BackingField;

			[Token(Token = "0x4000B80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD4B8C", Offset = "0xFD4B8C")]
			private readonly float <SpaceBefore>k__BackingField;

			[Token(Token = "0x4000B81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD4B9C", Offset = "0xFD4B9C")]
			private readonly float <SpaceAfter>k__BackingField;

			[Token(Token = "0x17000358")]
			internal CGBoundsGroup BoundsGroup
			{
				[Token(Token = "0x6001029")]
				[Address(RVA = "0x1DE7734", Offset = "0x1DE7734", VA = "0x1DE7734")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD7634", Offset = "0xFD7634")]
				get
				{
					return null;
				}
				[Token(Token = "0x600102A")]
				[Address(RVA = "0x1DE773C", Offset = "0x1DE773C", VA = "0x1DE773C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD7644", Offset = "0xFD7644")]
				private set
				{
				}
			}

			[Token(Token = "0x17000359")]
			internal int[] ItemIndices
			{
				[Token(Token = "0x600102B")]
				[Address(RVA = "0x1DE7744", Offset = "0x1DE7744", VA = "0x1DE7744")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD7654", Offset = "0xFD7654")]
				get
				{
					return null;
				}
				[Token(Token = "0x600102C")]
				[Address(RVA = "0x1DE774C", Offset = "0x1DE774C", VA = "0x1DE774C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD7664", Offset = "0xFD7664")]
				private set
				{
				}
			}

			[Token(Token = "0x1700035A")]
			internal float GroupDepth
			{
				[Token(Token = "0x600102D")]
				[Address(RVA = "0x1DE7754", Offset = "0x1DE7754", VA = "0x1DE7754")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD7674", Offset = "0xFD7674")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700035B")]
			internal CGBounds[] ItemBounds
			{
				[Token(Token = "0x600102E")]
				[Address(RVA = "0x1DE775C", Offset = "0x1DE775C", VA = "0x1DE775C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD7684", Offset = "0xFD7684")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700035C")]
			internal float SpaceBefore
			{
				[Token(Token = "0x600102F")]
				[Address(RVA = "0x1DE7764", Offset = "0x1DE7764", VA = "0x1DE7764")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD7694", Offset = "0xFD7694")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700035D")]
			internal float SpaceAfter
			{
				[Token(Token = "0x6001030")]
				[Address(RVA = "0x1DE776C", Offset = "0x1DE776C", VA = "0x1DE776C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD76A4", Offset = "0xFD76A4")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x6001031")]
			[Address(RVA = "0x1DE7774", Offset = "0x1DE7774", VA = "0x1DE7774")]
			public EndGroupData(CGBoundsGroup boundsGroup, int[] itemIndices, float groupDepth, CGBounds[] itemBounds, float spaceBefore, float spaceAfter)
			{
			}
		}

		[Token(Token = "0x200023C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC89FC", Offset = "0xFC89FC")]
		private sealed class <>c__DisplayClass79_0
		{
			[Token(Token = "0x4000B82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public EndGroupData endGroupData;

			[Token(Token = "0x6001032")]
			[Address(RVA = "0x1DE76CC", Offset = "0x1DE76CC", VA = "0x1DE76CC")]
			public <>c__DisplayClass79_0()
			{
			}
		}

		[Token(Token = "0x200023D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC8A0C", Offset = "0xFC8A0C")]
		private sealed class <>c__DisplayClass79_1
		{
			[Token(Token = "0x4000B83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float availableSpace;

			[Token(Token = "0x4000B84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public <>c__DisplayClass79_0 CS$<>8__locals1;

			[Token(Token = "0x6001033")]
			[Address(RVA = "0x1DE76D4", Offset = "0x1DE76D4", VA = "0x1DE76D4")]
			public <>c__DisplayClass79_1()
			{
			}

			[Token(Token = "0x6001034")]
			[Address(RVA = "0x1DE76DC", Offset = "0x1DE76DC", VA = "0x1DE76DC")]
			internal bool <Refresh>b__0(CGBounds i)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40007E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0xFD10C4", Offset = "0xFD10C4")]
		public CGModuleInputSlot InPath;

		[Token(Token = "0x40007E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0xFD119C", Offset = "0xFD119C")]
		public CGModuleInputSlot InBounds;

		[Token(Token = "0x40007E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0xFD1250", Offset = "0xFD1250")]
		public CGModuleOutputSlot OutSpots;

		[Token(Token = "0x40007E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		[HideInInspector]
		private bool m_WasUpgraded;

		[Token(Token = "0x40007E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0xFD12FC", Offset = "0xFD12FC")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0xFD12FC", Offset = "0xFD12FC")]
		[FloatRegion]
		[SerializeField]
		private FloatRegion m_Range;

		[Token(Token = "0x40007E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0xFD13B0", Offset = "0xFD13B0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFD13B0", Offset = "0xFD13B0")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFD13B0", Offset = "0xFD13B0")]
		[SerializeField]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFD13B0", Offset = "0xFD13B0")]
		private bool m_UseVolume;

		[Token(Token = "0x40007E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0xFD149C", Offset = "0xFD149C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFD149C", Offset = "0xFD149C")]
		private float m_CrossBase;

		[Token(Token = "0x40007E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFD1530", Offset = "0xFD1530")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFD1530", Offset = "0xFD1530")]
		private AnimationCurve m_CrossCurve;

		[Token(Token = "0x40007EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0xFD15BC", Offset = "0xFD15BC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFD15BC", Offset = "0xFD15BC")]
		[SerializeField]
		private bool m_Simulate;

		[Token(Token = "0x40007EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFD1638", Offset = "0xFD1638")]
		private bool m_UseBuggedRNG;

		[Token(Token = "0x40007EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0xFD1684", Offset = "0xFD1684")]
		[ArrayEx]
		[SerializeField]
		private List<CGBoundsGroup> m_Groups;

		[Token(Token = "0x40007ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[IntRegion]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFD16EC", Offset = "0xFD16EC")]
		private IntRegion m_RepeatingGroups;

		[Token(Token = "0x40007EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[SerializeField]
		private CurvyRepeatingOrderEnum m_RepeatingOrder;

		[Token(Token = "0x40007EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFD1784", Offset = "0xFD1784")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFD1784", Offset = "0xFD1784")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFD1784", Offset = "0xFD1784")]
		private bool m_FitEnd;

		[Token(Token = "0x40007F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD1894", Offset = "0xFD1894")]
		private int <Count>k__BackingField;

		[Token(Token = "0x40007F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public CGSpots SimulatedSpots;

		[Token(Token = "0x40007F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private WeightedRandom<int> mGroupBag;

		[Token(Token = "0x40007F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private List<CGBounds> mBounds;

		[Token(Token = "0x40007F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD18A4", Offset = "0xFD18A4")]
		private CGPath <Path>k__BackingField;

		[Token(Token = "0x170002CC")]
		public FloatRegion Range
		{
			[Token(Token = "0x6000DA6")]
			[Address(RVA = "0x1E49E8C", Offset = "0x1E49E8C", VA = "0x1E49E8C")]
			get
			{
				return default(FloatRegion);
			}
			[Token(Token = "0x6000DA7")]
			[Address(RVA = "0x1E49E9C", Offset = "0x1E49E9C", VA = "0x1E49E9C")]
			set
			{
			}
		}

		[Token(Token = "0x170002CD")]
		public bool UseVolume
		{
			[Token(Token = "0x6000DA8")]
			[Address(RVA = "0x1E49EF8", Offset = "0x1E49EF8", VA = "0x1E49EF8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DA9")]
			[Address(RVA = "0x1E49F00", Offset = "0x1E49F00", VA = "0x1E49F00")]
			set
			{
			}
		}

		[Token(Token = "0x170002CE")]
		public bool Simulate
		{
			[Token(Token = "0x6000DAA")]
			[Address(RVA = "0x1E49F28", Offset = "0x1E49F28", VA = "0x1E49F28")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DAB")]
			[Address(RVA = "0x1E49F30", Offset = "0x1E49F30", VA = "0x1E49F30")]
			set
			{
			}
		}

		[Token(Token = "0x170002CF")]
		public bool UseBuggedRng
		{
			[Token(Token = "0x6000DAC")]
			[Address(RVA = "0x1E49F58", Offset = "0x1E49F58", VA = "0x1E49F58")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DAD")]
			[Address(RVA = "0x1E49F60", Offset = "0x1E49F60", VA = "0x1E49F60")]
			set
			{
			}
		}

		[Token(Token = "0x170002D0")]
		public float CrossBase
		{
			[Token(Token = "0x6000DAE")]
			[Address(RVA = "0x1E49F88", Offset = "0x1E49F88", VA = "0x1E49F88")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DAF")]
			[Address(RVA = "0x1E49F90", Offset = "0x1E49F90", VA = "0x1E49F90")]
			set
			{
			}
		}

		[Token(Token = "0x170002D1")]
		public AnimationCurve CrossCurve
		{
			[Token(Token = "0x6000DB0")]
			[Address(RVA = "0x1E4A028", Offset = "0x1E4A028", VA = "0x1E4A028")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DB1")]
			[Address(RVA = "0x1E4A030", Offset = "0x1E4A030", VA = "0x1E4A030")]
			set
			{
			}
		}

		[Token(Token = "0x170002D2")]
		public List<CGBoundsGroup> Groups
		{
			[Token(Token = "0x6000DB2")]
			[Address(RVA = "0x1E4A06C", Offset = "0x1E4A06C", VA = "0x1E4A06C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DB3")]
			[Address(RVA = "0x1E4A074", Offset = "0x1E4A074", VA = "0x1E4A074")]
			set
			{
			}
		}

		[Token(Token = "0x170002D3")]
		public CurvyRepeatingOrderEnum RepeatingOrder
		{
			[Token(Token = "0x6000DB4")]
			[Address(RVA = "0x1E4A08C", Offset = "0x1E4A08C", VA = "0x1E4A08C")]
			get
			{
				return default(CurvyRepeatingOrderEnum);
			}
			[Token(Token = "0x6000DB5")]
			[Address(RVA = "0x1E4A094", Offset = "0x1E4A094", VA = "0x1E4A094")]
			set
			{
			}
		}

		[Token(Token = "0x170002D4")]
		public int FirstRepeating
		{
			[Token(Token = "0x6000DB6")]
			[Address(RVA = "0x1E4A0B0", Offset = "0x1E4A0B0", VA = "0x1E4A0B0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000DB7")]
			[Address(RVA = "0x1E4A0B8", Offset = "0x1E4A0B8", VA = "0x1E4A0B8")]
			set
			{
			}
		}

		[Token(Token = "0x170002D5")]
		public int LastRepeating
		{
			[Token(Token = "0x6000DB8")]
			[Address(RVA = "0x1E4A1C4", Offset = "0x1E4A1C4", VA = "0x1E4A1C4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000DB9")]
			[Address(RVA = "0x1E4A1CC", Offset = "0x1E4A1CC", VA = "0x1E4A1CC")]
			set
			{
			}
		}

		[Token(Token = "0x170002D6")]
		public bool FitEnd
		{
			[Token(Token = "0x6000DBA")]
			[Address(RVA = "0x1E4A28C", Offset = "0x1E4A28C", VA = "0x1E4A28C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DBB")]
			[Address(RVA = "0x1E4A294", Offset = "0x1E4A294", VA = "0x1E4A294")]
			set
			{
			}
		}

		[Token(Token = "0x170002D7")]
		public int GroupCount
		{
			[Token(Token = "0x6000DBC")]
			[Address(RVA = "0x1E4A174", Offset = "0x1E4A174", VA = "0x1E4A174")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002D8")]
		public GUIContent[] BoundsNames
		{
			[Token(Token = "0x6000DBD")]
			[Address(RVA = "0x1E4A2BC", Offset = "0x1E4A2BC", VA = "0x1E4A2BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002D9")]
		public int[] BoundsIndices
		{
			[Token(Token = "0x6000DBE")]
			[Address(RVA = "0x1E4A4A8", Offset = "0x1E4A4A8", VA = "0x1E4A4A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002DA")]
		public int Count
		{
			[Token(Token = "0x6000DBF")]
			[Address(RVA = "0x1E4A564", Offset = "0x1E4A564", VA = "0x1E4A564")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD71DC", Offset = "0xFD71DC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000DC0")]
			[Address(RVA = "0x1E4A56C", Offset = "0x1E4A56C", VA = "0x1E4A56C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD71EC", Offset = "0xFD71EC")]
			private set
			{
			}
		}

		[Token(Token = "0x170002DB")]
		private int lastGroupIndex
		{
			[Token(Token = "0x6000DC1")]
			[Address(RVA = "0x1E4A574", Offset = "0x1E4A574", VA = "0x1E4A574")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002DC")]
		private RegionOptions<float> RangeOptions
		{
			[Token(Token = "0x6000DC2")]
			[Address(RVA = "0x1E4A5F0", Offset = "0x1E4A5F0", VA = "0x1E4A5F0")]
			get
			{
				return default(RegionOptions<float>);
			}
		}

		[Token(Token = "0x170002DD")]
		private RegionOptions<int> RepeatingGroupsOptions
		{
			[Token(Token = "0x6000DC3")]
			[Address(RVA = "0x1E4A648", Offset = "0x1E4A648", VA = "0x1E4A648")]
			get
			{
				return default(RegionOptions<int>);
			}
		}

		[Token(Token = "0x170002DE")]
		private CGPath Path
		{
			[Token(Token = "0x6000DC4")]
			[Address(RVA = "0x1E4A6EC", Offset = "0x1E4A6EC", VA = "0x1E4A6EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD71FC", Offset = "0xFD71FC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DC5")]
			[Address(RVA = "0x1E4A6F4", Offset = "0x1E4A6F4", VA = "0x1E4A6F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD720C", Offset = "0xFD720C")]
			set
			{
			}
		}

		[Token(Token = "0x170002DF")]
		private CGVolume Volume
		{
			[Token(Token = "0x6000DC6")]
			[Address(RVA = "0x1E4A704", Offset = "0x1E4A704", VA = "0x1E4A704")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E0")]
		private float Length
		{
			[Token(Token = "0x6000DC7")]
			[Address(RVA = "0x1E4A788", Offset = "0x1E4A788", VA = "0x1E4A788")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002E1")]
		private bool ShowFitEnd
		{
			[Token(Token = "0x6000DD8")]
			[Address(RVA = "0x1E4D2DC", Offset = "0x1E4D2DC", VA = "0x1E4D2DC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000DC8")]
		[Address(RVA = "0x1E4A7C4", Offset = "0x1E4A7C4", VA = "0x1E4A7C4", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000DC9")]
		[Address(RVA = "0x1E4A7FC", Offset = "0x1E4A7FC", VA = "0x1E4A7FC", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000DCA")]
		[Address(RVA = "0x1E4AA28", Offset = "0x1E4AA28", VA = "0x1E4AA28", Slot = "13")]
		public override void OnStateChange()
		{
		}

		[Token(Token = "0x6000DCB")]
		[Address(RVA = "0x1E4AA70", Offset = "0x1E4AA70", VA = "0x1E4AA70")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000DCC")]
		[Address(RVA = "0x1E4AB60", Offset = "0x1E4AB60", VA = "0x1E4AB60", Slot = "11")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x6000DCD")]
		[Address(RVA = "0x1E4A948", Offset = "0x1E4A948", VA = "0x1E4A948")]
		public CGBoundsGroup AddGroup(string name)
		{
			return null;
		}

		[Token(Token = "0x6000DCE")]
		[Address(RVA = "0x1E4C7D0", Offset = "0x1E4C7D0", VA = "0x1E4C7D0")]
		public void RemoveGroup(CGBoundsGroup group)
		{
		}

		[Token(Token = "0x6000DCF")]
		[Address(RVA = "0x1E4C280", Offset = "0x1E4C280", VA = "0x1E4C280")]
		private static int[] GetGroupItemIndices(CGBoundsGroup boundsGroup, WeightedRandom<int> groupItemBag)
		{
			return null;
		}

		[Token(Token = "0x6000DD0")]
		[Address(RVA = "0x1E4C440", Offset = "0x1E4C440", VA = "0x1E4C440")]
		private float GetGroupDepth(int[] groupItemIndices, float spaceBefore, float spaceAfter, out CGBounds[] itemsBounds)
		{
			return default(float);
		}

		[Token(Token = "0x6000DD1")]
		[Address(RVA = "0x1E4C0C8", Offset = "0x1E4C0C8", VA = "0x1E4C0C8")]
		private bool AddGroupItems(int groupIndex, ref List<CGSpot> spots, float remainingLength, float startDistance, ref float currentDistance, out bool failedAddingAllItems, Dictionary<CGBoundsGroup, WeightedRandom<int>> itemsBagDictionary, int MaxSpotsCount)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DD2")]
		[Address(RVA = "0x1E4C5B4", Offset = "0x1E4C5B4", VA = "0x1E4C5B4")]
		private void AddGroupItems(CGBoundsGroup group, ref List<CGSpot> spots, float remainingLength, float startDistance, ref float currentDistance, out bool failedAddingAllItems, int[] itemIndices, float groupDepth, CGBounds[] itemBounds, float spaceBefore, float spaceAfter)
		{
		}

		[Token(Token = "0x6000DD3")]
		[Address(RVA = "0x1E4C848", Offset = "0x1E4C848", VA = "0x1E4C848")]
		private CGSpot GetSpot(int itemID, CGBoundsGroup boundsGroup, CGBounds bounds, float currentDistance, float startDistance)
		{
			return default(CGSpot);
		}

		[Token(Token = "0x6000DD4")]
		[Address(RVA = "0x1E4C3EC", Offset = "0x1E4C3EC", VA = "0x1E4C3EC")]
		private static float GetRegionNextValue(FloatRegion floatRegion)
		{
			return default(float);
		}

		[Token(Token = "0x6000DD5")]
		[Address(RVA = "0x1E4D0CC", Offset = "0x1E4D0CC", VA = "0x1E4D0CC")]
		private void GetTRS(CGBoundsGroup boundsGroup, Vector3 tangent, Vector3 up, out Quaternion rotation, out Vector3 translation, out Vector3 scale)
		{
		}

		[Token(Token = "0x6000DD6")]
		[Address(RVA = "0x1E4CD38", Offset = "0x1E4CD38", VA = "0x1E4CD38")]
		private void GetTRS630(CGBoundsGroup boundsGroup, Vector3 tangent, Vector3 up, out Quaternion rotation, out Vector3 translation, out Vector3 scale)
		{
		}

		[Token(Token = "0x6000DD7")]
		[Address(RVA = "0x1E4BDDC", Offset = "0x1E4BDDC", VA = "0x1E4BDDC")]
		private Dictionary<CGBoundsGroup, WeightedRandom<int>> Prepare()
		{
			return null;
		}

		[Token(Token = "0x6000DD9")]
		[Address(RVA = "0x1E4D33C", Offset = "0x1E4D33C", VA = "0x1E4D33C", Slot = "15")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x6000DDA")]
		[Address(RVA = "0x1E4D340", Offset = "0x1E4D340", VA = "0x1E4D340", Slot = "16")]
		public void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x6000DDB")]
		[Address(RVA = "0x1E4D660", Offset = "0x1E4D660", VA = "0x1E4D660")]
		public BuildVolumeSpots()
		{
		}
	}
	[Token(Token = "0x2000176")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0xFC7A48", Offset = "0xFC7A48")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC7A48", Offset = "0xFC7A48")]
	public class ConformPath : CGModule, IOnRequestPath, IOnRequestProcessing, IPathProvider
	{
		[Token(Token = "0x40007F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0xFD18B4", Offset = "0xFD18B4")]
		public CGModuleInputSlot InPath;

		[Token(Token = "0x40007F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0xFD1984", Offset = "0xFD1984")]
		public CGModuleOutputSlot OutPath;

		[Token(Token = "0x40007F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		[AttributeAttribute(Name = "VectorExAttribute", RVA = "0xFD19F8", Offset = "0xFD19F8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFD19F8", Offset = "0xFD19F8")]
		private Vector3 m_Direction;

		[Token(Token = "0x40007F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFD1A84", Offset = "0xFD1A84")]
		private float m_MaxDistance;

		[Token(Token = "0x40007F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFD1AD0", Offset = "0xFD1AD0")]
		private float m_Offset;

		[Token(Token = "0x40007FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFD1B1C", Offset = "0xFD1B1C")]
		private bool m_Warp;

		[Token(Token = "0x40007FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFD1B68", Offset = "0xFD1B68")]
		private LayerMask m_LayerMask;

		[Token(Token = "0x170002E2")]
		public Vector3 Direction
		{
			[Token(Token = "0x6000DDC")]
			[Address(RVA = "0x1DE7800", Offset = "0x1DE7800", VA = "0x1DE7800")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000DDD")]
			[Address(RVA = "0x1DE780C", Offset = "0x1DE780C", VA = "0x1DE780C")]
			set
			{
			}
		}

		[Token(Token = "0x170002E3")]
		public float MaxDistance
		{
			[Token(Token = "0x6000DDE")]
			[Address(RVA = "0x1DE78D0", Offset = "0x1DE78D0", VA = "0x1DE78D0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DDF")]
			[Address(RVA = "0x1DE78D8", Offset = "0x1DE78D8", VA = "0x1DE78D8")]
			set
			{
			}
		}

		[Token(Token = "0x170002E4")]
		public float Offset
		{
			[Token(Token = "0x6000DE0")]
			[Address(RVA = "0x1DE78F4", Offset = "0x1DE78F4", VA = "0x1DE78F4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DE1")]
			[Address(RVA = "0x1DE78FC", Offset = "0x1DE78FC", VA = "0x1DE78FC")]
			set
			{
			}
		}

		[Token(Token = "0x170002E5")]
		public bool Warp
		{
			[Token(Token = "0x6000DE2")]
			[Address(RVA = "0x1DE7918", Offset = "0x1DE7918", VA = "0x1DE7918")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DE3")]
			[Address(RVA = "0x1DE7920", Offset = "0x1DE7920", VA = "0x1DE7920")]
			set
			{
			}
		}

		[Token(Token = "0x170002E6")]
		public LayerMask LayerMask
		{
			[Token(Token = "0x6000DE4")]
			[Address(RVA = "0x1DE7948", Offset = "0x1DE7948", VA = "0x1DE7948")]
			get
			{
				return default(LayerMask);
			}
			[Token(Token = "0x6000DE5")]
			[Address(RVA = "0x1DE7950", Offset = "0x1DE7950", VA = "0x1DE7950")]
			set
			{
			}
		}

		[Token(Token = "0x170002E7")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD7D8C", Offset = "0xFD7D8C")]
		public float PathLength
		{
			[Token(Token = "0x6000DE8")]
			[Address(RVA = "0x1DE7AC0", Offset = "0x1DE7AC0", VA = "0x1DE7AC0", Slot = "15")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002E8")]
		public bool PathIsClosed
		{
			[Token(Token = "0x6000DE9")]
			[Address(RVA = "0x1DE7BEC", Offset = "0x1DE7BEC", VA = "0x1DE7BEC", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000DE6")]
		[Address(RVA = "0x1DE79AC", Offset = "0x1DE79AC", VA = "0x1DE79AC", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000DE7")]
		[Address(RVA = "0x1DE79E4", Offset = "0x1DE79E4", VA = "0x1DE79E4", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000DEA")]
		[Address(RVA = "0x1DE7CE0", Offset = "0x1DE7CE0", VA = "0x1DE7CE0", Slot = "16")]
		public CGData[] OnSlotDataRequest(CGModuleInputSlot requestedBy, CGModuleOutputSlot requestedSlot, params CGDataRequestParameter[] requests)
		{
			return null;
		}

		[Token(Token = "0x6000DEB")]
		[Address(RVA = "0x1DE7E48", Offset = "0x1DE7E48", VA = "0x1DE7E48")]
		public static CGPath Conform(Transform pathTransform, CGPath path, LayerMask layers, Vector3 projectionDirection, float offset, float rayLength, bool warp)
		{
			return null;
		}

		[Token(Token = "0x6000DEC")]
		[Address(RVA = "0x1DE8258", Offset = "0x1DE8258", VA = "0x1DE8258")]
		public ConformPath()
		{
		}
	}
	[Token(Token = "0x2000177")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0xFC7AE0", Offset = "0xFC7AE0")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC7AE0", Offset = "0xFC7AE0")]
	public class CreateGameObject : CGModule
	{
		[Token(Token = "0x40007FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0xFD1BB4", Offset = "0xFD1BB4")]
		public CGModuleInputSlot InGameObjectArray;

		[Token(Token = "0x40007FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0xFD1C80", Offset = "0xFD1C80")]
		public CGModuleInputSlot InSpots;

		[Token(Token = "0x40007FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		[AttributeAttribute(Name = "CGResourceCollectionManagerAttribute", RVA = "0xFD1D3C", Offset = "0xFD1D3C")]
		private CGGameObjectResourceCollection m_Resources;

		[Token(Token = "0x40007FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0xFD1D94", Offset = "0xFD1D94")]
		[SerializeField]
		private bool m_MakeStatic;

		[Token(Token = "0x4000800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[SerializeField]
		[AttributeAttribute(Name = "LayerAttribute", RVA = "0xFD1DE0", Offset = "0xFD1DE0")]
		private int m_Layer;

		[Token(Token = "0x170002E9")]
		public int Layer
		{
			[Token(Token = "0x6000DED")]
			[Address(RVA = "0x1DE8338", Offset = "0x1DE8338", VA = "0x1DE8338")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000DEE")]
			[Address(RVA = "0x1DE8340", Offset = "0x1DE8340", VA = "0x1DE8340")]
			set
			{
			}
		}

		[Token(Token = "0x170002EA")]
		public bool MakeStatic
		{
			[Token(Token = "0x6000DEF")]
			[Address(RVA = "0x1DE83DC", Offset = "0x1DE83DC", VA = "0x1DE83DC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DF0")]
			[Address(RVA = "0x1DE83E4", Offset = "0x1DE83E4", VA = "0x1DE83E4")]
			set
			{
			}
		}

		[Token(Token = "0x170002EB")]
		public CGGameObjectResourceCollection GameObjects
		{
			[Token(Token = "0x6000DF1")]
			[Address(RVA = "0x1DE840C", Offset = "0x1DE840C", VA = "0x1DE840C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002EC")]
		public int GameObjectCount
		{
			[Token(Token = "0x6000DF2")]
			[Address(RVA = "0x1DE8414", Offset = "0x1DE8414", VA = "0x1DE8414")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000DF3")]
		[Address(RVA = "0x1DE8430", Offset = "0x1DE8430", VA = "0x1DE8430", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000DF4")]
		[Address(RVA = "0x1DE85B0", Offset = "0x1DE85B0", VA = "0x1DE85B0", Slot = "8")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6000DF5")]
		[Address(RVA = "0x1DE85F4", Offset = "0x1DE85F4", VA = "0x1DE85F4", Slot = "14")]
		public override void OnTemplateCreated()
		{
		}

		[Token(Token = "0x6000DF6")]
		[Address(RVA = "0x1DE8480", Offset = "0x1DE8480", VA = "0x1DE8480")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000DF7")]
		[Address(RVA = "0x1DE85F8", Offset = "0x1DE85F8", VA = "0x1DE85F8", Slot = "13")]
		public override void OnStateChange()
		{
		}

		[Token(Token = "0x6000DF8")]
		[Address(RVA = "0x1DE8640", Offset = "0x1DE8640", VA = "0x1DE8640", Slot = "11")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x6000DF9")]
		[Address(RVA = "0x1DE8DF0", Offset = "0x1DE8DF0", VA = "0x1DE8DF0")]
		public CreateGameObject()
		{
		}
	}
	[Token(Token = "0x2000178")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0xFC7B5C", Offset = "0xFC7B5C")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC7B5C", Offset = "0xFC7B5C")]
	public class CreateMesh : CGModule
	{
		[Serializable]
		[Token(Token = "0x200023E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC8A1C", Offset = "0xFC8A1C")]
		private sealed class <>c
		{
			[Token(Token = "0x4000B85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000B86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<CGSpots, bool> <>9__109_0;

			[Token(Token = "0x4000B87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<CGSpots, IEnumerable<CGSpot>> <>9__109_1;

			[Token(Token = "0x4000B88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Comparison<CGSpot> <>9__114_0;

			[Token(Token = "0x6001036")]
			[Address(RVA = "0x1DEB5D4", Offset = "0x1DEB5D4", VA = "0x1DEB5D4")]
			public <>c()
			{
			}

			[Token(Token = "0x6001037")]
			[Address(RVA = "0x1DEB5DC", Offset = "0x1DEB5DC", VA = "0x1DEB5DC")]
			internal bool <Refresh>b__109_0(CGSpots s)
			{
				return default(bool);
			}

			[Token(Token = "0x6001038")]
			[Address(RVA = "0x1DEB5E8", Offset = "0x1DEB5E8", VA = "0x1DEB5E8")]
			internal IEnumerable<CGSpot> <Refresh>b__109_1(CGSpots s)
			{
				return null;
			}

			[Token(Token = "0x6001039")]
			[Address(RVA = "0x1DEB600", Offset = "0x1DEB600", VA = "0x1DEB600")]
			internal int <createSpotMeshes>b__114_0(CGSpot a, CGSpot b)
			{
				return default(int);
			}
		}

		[Token(Token = "0x4000801")]
		private const string DefaultTag = "Untagged";

		[Token(Token = "0x4000802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0xFD1E48", Offset = "0xFD1E48")]
		public CGModuleInputSlot InVMeshArray;

		[Token(Token = "0x4000803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0xFD1F14", Offset = "0xFD1F14")]
		public CGModuleInputSlot InSpots;

		[Token(Token = "0x4000804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		[AttributeAttribute(Name = "CGResourceCollectionManagerAttribute", RVA = "0xFD1FE8", Offset = "0xFD1FE8")]
		private CGMeshResourceCollection m_MeshResources;

		[Token(Token = "0x4000805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0xFD2040", Offset = "0xFD2040")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFD2040", Offset = "0xFD2040")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFD2040", Offset = "0xFD2040")]
		[SerializeField]
		private bool m_Combine;

		[Token(Token = "0x4000806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFD2144", Offset = "0xFD2144")]
		[SerializeField]
		private bool m_GroupMeshes;

		[Token(Token = "0x4000807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFD2190", Offset = "0xFD2190")]
		private CGYesNoAuto m_AddNormals;

		[Token(Token = "0x4000808")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFD224C", Offset = "0xFD224C")]
		private CGYesNoAuto m_AddTangents;

		[Token(Token = "0x4000809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFD2308", Offset = "0xFD2308")]
		private bool m_AddUV2;

		[Token(Token = "0x400080A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCD")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFD23C4", Offset = "0xFD23C4")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFD23C4", Offset = "0xFD23C4")]
		private bool m_MakeStatic;

		[Token(Token = "0x400080B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFD24A4", Offset = "0xFD24A4")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFD24A4", Offset = "0xFD24A4")]
		[AttributeAttribute(Name = "LayerAttribute", RVA = "0xFD24A4", Offset = "0xFD24A4")]
		private int m_Layer;

		[Token(Token = "0x400080C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFD25BC", Offset = "0xFD25BC")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFD25BC", Offset = "0xFD25BC")]
		[AttributeAttribute(Name = "TagAttribute", RVA = "0xFD25BC", Offset = "0xFD25BC")]
		private string m_Tag;

		[Token(Token = "0x400080D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0xFD26D4", Offset = "0xFD26D4")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFD26D4", Offset = "0xFD26D4")]
		private bool m_RendererEnabled;

		[Token(Token = "0x400080E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFD27B4", Offset = "0xFD27B4")]
		private ShadowCastingMode m_CastShadows;

		[Token(Token = "0x400080F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFD2870", Offset = "0xFD2870")]
		private bool m_ReceiveShadows;

		[Token(Token = "0x4000810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFD292C", Offset = "0xFD292C")]
		private LightProbeUsage m_LightProbeUsage;

		[Token(Token = "0x4000811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[HideInInspector]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFD29E8", Offset = "0xFD29E8")]
		private bool m_UseLightProbes;

		[Token(Token = "0x4000812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFD2AB4", Offset = "0xFD2AB4")]
		private ReflectionProbeUsage m_ReflectionProbes;

		[Token(Token = "0x4000813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFD2B70", Offset = "0xFD2B70")]
		private Transform m_AnchorOverride;

		[Token(Token = "0x4000814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0xFD2C2C", Offset = "0xFD2C2C")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFD2C2C", Offset = "0xFD2C2C")]
		private CGColliderEnum m_Collider;

		[Token(Token = "0x4000815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFD2D0C", Offset = "0xFD2D0C")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFD2D0C", Offset = "0xFD2D0C")]
		private bool m_Convex;

		[Token(Token = "0x4000816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x105")]
		[SerializeField]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFD2E28", Offset = "0xFD2E28")]
		private bool m_IsTrigger;

		[Token(Token = "0x4000817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFD2EE4", Offset = "0xFD2EE4")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFD2EE4", Offset = "0xFD2EE4")]
		[SerializeField]
		[AttributeAttribute(Name = "EnumFlagAttribute", RVA = "0xFD2EE4", Offset = "0xFD2EE4")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFD2EE4", Offset = "0xFD2EE4")]
		private MeshColliderCookingOptions m_CookingOptions;

		[Token(Token = "0x4000818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFD305C", Offset = "0xFD305C")]
		[SerializeField]
		private bool m_AutoUpdateColliders;

		[Token(Token = "0x4000819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		private PhysicMaterial m_Material;

		[Token(Token = "0x400081A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD30D4", Offset = "0xFD30D4")]
		private int <VertexCount>k__BackingField;

		[Token(Token = "0x400081B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private int mCurrentMeshCount;

		[Token(Token = "0x170002ED")]
		public bool Combine
		{
			[Token(Token = "0x6000DFA")]
			[Address(RVA = "0x1DE8EBC", Offset = "0x1DE8EBC", VA = "0x1DE8EBC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DFB")]
			[Address(RVA = "0x1DE8EC4", Offset = "0x1DE8EC4", VA = "0x1DE8EC4")]
			set
			{
			}
		}

		[Token(Token = "0x170002EE")]
		public bool GroupMeshes
		{
			[Token(Token = "0x6000DFC")]
			[Address(RVA = "0x1DE8EEC", Offset = "0x1DE8EEC", VA = "0x1DE8EEC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DFD")]
			[Address(RVA = "0x1DE8EF4", Offset = "0x1DE8EF4", VA = "0x1DE8EF4")]
			set
			{
			}
		}

		[Token(Token = "0x170002EF")]
		public CGYesNoAuto AddNormals
		{
			[Token(Token = "0x6000DFE")]
			[Address(RVA = "0x1DE8F1C", Offset = "0x1DE8F1C", VA = "0x1DE8F1C")]
			get
			{
				return default(CGYesNoAuto);
			}
			[Token(Token = "0x6000DFF")]
			[Address(RVA = "0x1DE8F24", Offset = "0x1DE8F24", VA = "0x1DE8F24")]
			set
			{
			}
		}

		[Token(Token = "0x170002F0")]
		public CGYesNoAuto AddTangents
		{
			[Token(Token = "0x6000E00")]
			[Address(RVA = "0x1DE8F40", Offset = "0x1DE8F40", VA = "0x1DE8F40")]
			get
			{
				return default(CGYesNoAuto);
			}
			[Token(Token = "0x6000E01")]
			[Address(RVA = "0x1DE8F48", Offset = "0x1DE8F48", VA = "0x1DE8F48")]
			set
			{
			}
		}

		[Token(Token = "0x170002F1")]
		public bool AddUV2
		{
			[Token(Token = "0x6000E02")]
			[Address(RVA = "0x1DE8F64", Offset = "0x1DE8F64", VA = "0x1DE8F64")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E03")]
			[Address(RVA = "0x1DE8F6C", Offset = "0x1DE8F6C", VA = "0x1DE8F6C")]
			set
			{
			}
		}

		[Token(Token = "0x170002F2")]
		public int Layer
		{
			[Token(Token = "0x6000E04")]
			[Address(RVA = "0x1DE8F94", Offset = "0x1DE8F94", VA = "0x1DE8F94")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000E05")]
			[Address(RVA = "0x1DE8F9C", Offset = "0x1DE8F9C", VA = "0x1DE8F9C")]
			set
			{
			}
		}

		[Token(Token = "0x170002F3")]
		public string Tag
		{
			[Token(Token = "0x6000E06")]
			[Address(RVA = "0x1DE9038", Offset = "0x1DE9038", VA = "0x1DE9038")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E07")]
			[Address(RVA = "0x1DE9040", Offset = "0x1DE9040", VA = "0x1DE9040")]
			set
			{
			}
		}

		[Token(Token = "0x170002F4")]
		public bool MakeStatic
		{
			[Token(Token = "0x6000E08")]
			[Address(RVA = "0x1DE9098", Offset = "0x1DE9098", VA = "0x1DE9098")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E09")]
			[Address(RVA = "0x1DE90A0", Offset = "0x1DE90A0", VA = "0x1DE90A0")]
			set
			{
			}
		}

		[Token(Token = "0x170002F5")]
		public bool RendererEnabled
		{
			[Token(Token = "0x6000E0A")]
			[Address(RVA = "0x1DE90C8", Offset = "0x1DE90C8", VA = "0x1DE90C8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E0B")]
			[Address(RVA = "0x1DE90D0", Offset = "0x1DE90D0", VA = "0x1DE90D0")]
			set
			{
			}
		}

		[Token(Token = "0x170002F6")]
		public ShadowCastingMode CastShadows
		{
			[Token(Token = "0x6000E0C")]
			[Address(RVA = "0x1DE90F8", Offset = "0x1DE90F8", VA = "0x1DE90F8")]
			get
			{
				return default(ShadowCastingMode);
			}
			[Token(Token = "0x6000E0D")]
			[Address(RVA = "0x1DE9100", Offset = "0x1DE9100", VA = "0x1DE9100")]
			set
			{
			}
		}

		[Token(Token = "0x170002F7")]
		public bool ReceiveShadows
		{
			[Token(Token = "0x6000E0E")]
			[Address(RVA = "0x1DE911C", Offset = "0x1DE911C", VA = "0x1DE911C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E0F")]
			[Address(RVA = "0x1DE9124", Offset = "0x1DE9124", VA = "0x1DE9124")]
			set
			{
			}
		}

		[Token(Token = "0x170002F8")]
		public bool UseLightProbes
		{
			[Token(Token = "0x6000E10")]
			[Address(RVA = "0x1DE914C", Offset = "0x1DE914C", VA = "0x1DE914C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E11")]
			[Address(RVA = "0x1DE9154", Offset = "0x1DE9154", VA = "0x1DE9154")]
			set
			{
			}
		}

		[Token(Token = "0x170002F9")]
		public LightProbeUsage LightProbeUsage
		{
			[Token(Token = "0x6000E12")]
			[Address(RVA = "0x1DE917C", Offset = "0x1DE917C", VA = "0x1DE917C")]
			get
			{
				return default(LightProbeUsage);
			}
			[Token(Token = "0x6000E13")]
			[Address(RVA = "0x1DE9184", Offset = "0x1DE9184", VA = "0x1DE9184")]
			set
			{
			}
		}

		[Token(Token = "0x170002FA")]
		public ReflectionProbeUsage ReflectionProbes
		{
			[Token(Token = "0x6000E14")]
			[Address(RVA = "0x1DE91A0", Offset = "0x1DE91A0", VA = "0x1DE91A0")]
			get
			{
				return default(ReflectionProbeUsage);
			}
			[Token(Token = "0x6000E15")]
			[Address(RVA = "0x1DE91A8", Offset = "0x1DE91A8", VA = "0x1DE91A8")]
			set
			{
			}
		}

		[Token(Token = "0x170002FB")]
		public Transform AnchorOverride
		{
			[Token(Token = "0x6000E16")]
			[Address(RVA = "0x1DE91C4", Offset = "0x1DE91C4", VA = "0x1DE91C4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E17")]
			[Address(RVA = "0x1DE91CC", Offset = "0x1DE91CC", VA = "0x1DE91CC")]
			set
			{
			}
		}

		[Token(Token = "0x170002FC")]
		public CGColliderEnum Collider
		{
			[Token(Token = "0x6000E18")]
			[Address(RVA = "0x1DE9270", Offset = "0x1DE9270", VA = "0x1DE9270")]
			get
			{
				return default(CGColliderEnum);
			}
			[Token(Token = "0x6000E19")]
			[Address(RVA = "0x1DE9278", Offset = "0x1DE9278", VA = "0x1DE9278")]
			set
			{
			}
		}

		[Token(Token = "0x170002FD")]
		public bool AutoUpdateColliders
		{
			[Token(Token = "0x6000E1A")]
			[Address(RVA = "0x1DE9294", Offset = "0x1DE9294", VA = "0x1DE9294")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E1B")]
			[Address(RVA = "0x1DE929C", Offset = "0x1DE929C", VA = "0x1DE929C")]
			set
			{
			}
		}

		[Token(Token = "0x170002FE")]
		public bool Convex
		{
			[Token(Token = "0x6000E1C")]
			[Address(RVA = "0x1DE92C4", Offset = "0x1DE92C4", VA = "0x1DE92C4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E1D")]
			[Address(RVA = "0x1DE92CC", Offset = "0x1DE92CC", VA = "0x1DE92CC")]
			set
			{
			}
		}

		[Token(Token = "0x170002FF")]
		public bool IsTrigger
		{
			[Token(Token = "0x6000E1E")]
			[Address(RVA = "0x1DE92F4", Offset = "0x1DE92F4", VA = "0x1DE92F4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E1F")]
			[Address(RVA = "0x1DE92FC", Offset = "0x1DE92FC", VA = "0x1DE92FC")]
			set
			{
			}
		}

		[Token(Token = "0x17000300")]
		public MeshColliderCookingOptions CookingOptions
		{
			[Token(Token = "0x6000E20")]
			[Address(RVA = "0x1DE9324", Offset = "0x1DE9324", VA = "0x1DE9324")]
			get
			{
				return default(MeshColliderCookingOptions);
			}
			[Token(Token = "0x6000E21")]
			[Address(RVA = "0x1DE932C", Offset = "0x1DE932C", VA = "0x1DE932C")]
			set
			{
			}
		}

		[Token(Token = "0x17000301")]
		public PhysicMaterial Material
		{
			[Token(Token = "0x6000E22")]
			[Address(RVA = "0x1DE9348", Offset = "0x1DE9348", VA = "0x1DE9348")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E23")]
			[Address(RVA = "0x1DE9350", Offset = "0x1DE9350", VA = "0x1DE9350")]
			set
			{
			}
		}

		[Token(Token = "0x17000302")]
		public CGMeshResourceCollection Meshes
		{
			[Token(Token = "0x6000E24")]
			[Address(RVA = "0x1DE93F0", Offset = "0x1DE93F0", VA = "0x1DE93F0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000303")]
		public int MeshCount
		{
			[Token(Token = "0x6000E25")]
			[Address(RVA = "0x1DE93F8", Offset = "0x1DE93F8", VA = "0x1DE93F8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000304")]
		public int VertexCount
		{
			[Token(Token = "0x6000E26")]
			[Address(RVA = "0x1DE9414", Offset = "0x1DE9414", VA = "0x1DE9414")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD721C", Offset = "0xFD721C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000E27")]
			[Address(RVA = "0x1DE941C", Offset = "0x1DE941C", VA = "0x1DE941C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD722C", Offset = "0xFD722C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000305")]
		private bool canGroupMeshes
		{
			[Token(Token = "0x6000E28")]
			[Address(RVA = "0x1DE9424", Offset = "0x1DE9424", VA = "0x1DE9424")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000306")]
		private bool canModifyStaticFlag
		{
			[Token(Token = "0x6000E29")]
			[Address(RVA = "0x1DE946C", Offset = "0x1DE946C", VA = "0x1DE946C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000307")]
		private bool canUpdate
		{
			[Token(Token = "0x6000E2A")]
			[Address(RVA = "0x1DE9474", Offset = "0x1DE9474", VA = "0x1DE9474")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000308")]
		private bool EnableIsTrigger
		{
			[Token(Token = "0x6000E2B")]
			[Address(RVA = "0x1DE94B0", Offset = "0x1DE94B0", VA = "0x1DE94B0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000E2C")]
		[Address(RVA = "0x1DE9508", Offset = "0x1DE9508", VA = "0x1DE9508", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E2D")]
		[Address(RVA = "0x1DE97E4", Offset = "0x1DE97E4", VA = "0x1DE97E4", Slot = "14")]
		public override void OnTemplateCreated()
		{
		}

		[Token(Token = "0x6000E2E")]
		[Address(RVA = "0x1DE97C8", Offset = "0x1DE97C8", VA = "0x1DE97C8")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000E2F")]
		[Address(RVA = "0x1DE9910", Offset = "0x1DE9910", VA = "0x1DE9910", Slot = "13")]
		public override void OnStateChange()
		{
		}

		[Token(Token = "0x6000E30")]
		[Address(RVA = "0x1DE9964", Offset = "0x1DE9964", VA = "0x1DE9964", Slot = "11")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x6000E31")]
		[Address(RVA = "0x1DEAB74", Offset = "0x1DEAB74", VA = "0x1DEAB74")]
		public GameObject SaveToScene([Optional] Transform parent)
		{
			return null;
		}

		[Token(Token = "0x6000E32")]
		[Address(RVA = "0x1DEAA04", Offset = "0x1DEAA04", VA = "0x1DEAA04")]
		public void UpdateColliders()
		{
		}

		[Token(Token = "0x6000E33")]
		[Address(RVA = "0x1DEAD80", Offset = "0x1DEAD80", VA = "0x1DEAD80")]
		private static GameObject SaveMeshResourceToScene(UnityEngine.Component managedResource, Transform newParent)
		{
			return null;
		}

		[Token(Token = "0x6000E34")]
		[Address(RVA = "0x1DEA62C", Offset = "0x1DEA62C", VA = "0x1DEA62C")]
		private void createMeshes(ref List<CGVMesh> vMeshes, bool combine)
		{
		}

		[Token(Token = "0x6000E35")]
		[Address(RVA = "0x1DE9D8C", Offset = "0x1DE9D8C", VA = "0x1DE9D8C")]
		private void createSpotMeshes(ref List<CGVMesh> vMeshes, CGSpot[] spots, bool combine)
		{
		}

		[Token(Token = "0x6000E36")]
		[Address(RVA = "0x1DEAEC4", Offset = "0x1DEAEC4", VA = "0x1DEAEC4")]
		private CGMeshResource writeVMeshToMesh(ref CGVMesh vmesh)
		{
			return null;
		}

		[Token(Token = "0x6000E37")]
		[Address(RVA = "0x1DE9800", Offset = "0x1DE9800", VA = "0x1DE9800")]
		private void removeUnusedResource()
		{
		}

		[Token(Token = "0x6000E38")]
		[Address(RVA = "0x1DEB178", Offset = "0x1DEB178", VA = "0x1DEB178")]
		private CGMeshResource getNewMesh()
		{
			return null;
		}

		[Token(Token = "0x6000E39")]
		[Address(RVA = "0x1DEB448", Offset = "0x1DEB448", VA = "0x1DEB448")]
		public CreateMesh()
		{
		}
	}
	[Token(Token = "0x2000179")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0xFC7BD8", Offset = "0xFC7BD8")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC7BD8", Offset = "0xFC7BD8")]
	public class CreatePathLineRenderer : CGModule
	{
		[Token(Token = "0x400081C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0xFD30E4", Offset = "0xFD30E4")]
		public CGModuleInputSlot InPath;

		[Token(Token = "0x400081D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private LineRenderer mLineRenderer;

		[Token(Token = "0x17000309")]
		public LineRenderer LineRenderer
		{
			[Token(Token = "0x6000E3A")]
			[Address(RVA = "0x1DEB630", Offset = "0x1DEB630", VA = "0x1DEB630")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E3B")]
		[Address(RVA = "0x1DEB6DC", Offset = "0x1DEB6DC", VA = "0x1DEB6DC", Slot = "5")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000E3C")]
		[Address(RVA = "0x1DEB80C", Offset = "0x1DEB80C", VA = "0x1DEB80C", Slot = "11")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x6000E3D")]
		[Address(RVA = "0x1DEB704", Offset = "0x1DEB704", VA = "0x1DEB704")]
		private void createLR()
		{
		}

		[Token(Token = "0x6000E3E")]
		[Address(RVA = "0x1DEB964", Offset = "0x1DEB964", VA = "0x1DEB964")]
		public CreatePathLineRenderer()
		{
		}
	}
	[Token(Token = "0x200017A")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0xFC7C70", Offset = "0xFC7C70")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC7C70", Offset = "0xFC7C70")]
	public class DebugRasterizedPath : CGModule
	{
		[Token(Token = "0x400081E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0xFD31A0", Offset = "0xFD31A0")]
		public CGModuleInputSlot InPath;

		[Token(Token = "0x400081F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFD325C", Offset = "0xFD325C")]
		public bool ShowNormals;

		[Token(Token = "0x4000820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFD3294", Offset = "0xFD3294")]
		public bool ShowOrientation;

		[Token(Token = "0x6000E3F")]
		[Address(RVA = "0x1DEB9D8", Offset = "0x1DEB9D8", VA = "0x1DEB9D8", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E40")]
		[Address(RVA = "0x1DEBA04", Offset = "0x1DEBA04", VA = "0x1DEBA04")]
		public DebugRasterizedPath()
		{
		}
	}
	[Token(Token = "0x200017B")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0xFC7D08", Offset = "0xFC7D08")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC7D08", Offset = "0xFC7D08")]
	public class DebugVMesh : CGModule
	{
		[Token(Token = "0x4000821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0xFD32CC", Offset = "0xFD32CC")]
		public CGModuleInputSlot InData;

		[Token(Token = "0x4000822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0xFD3388", Offset = "0xFD3388")]
		public bool ShowVertices;

		[Token(Token = "0x4000823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		public bool ShowVertexID;

		[Token(Token = "0x4000824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB2")]
		public bool ShowUV;

		[Token(Token = "0x6000E41")]
		[Address(RVA = "0x1DEBA80", Offset = "0x1DEBA80", VA = "0x1DEBA80", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E42")]
		[Address(RVA = "0x1DEBAAC", Offset = "0x1DEBAAC", VA = "0x1DEBAAC")]
		public DebugVMesh()
		{
		}
	}
	[Token(Token = "0x200017C")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0xFC7D84", Offset = "0xFC7D84")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC7D84", Offset = "0xFC7D84")]
	public class DebugVolume : CGModule
	{
		[Token(Token = "0x4000825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0xFD33C0", Offset = "0xFD33C0")]
		public CGModuleInputSlot InData;

		[Token(Token = "0x4000826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0xFD347C", Offset = "0xFD347C")]
		public bool ShowPathSamples;

		[Token(Token = "0x4000827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		public bool ShowCrossSamples;

		[Token(Token = "0x4000828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFD34B4", Offset = "0xFD34B4")]
		[IntRegion]
		public IntRegion LimitCross;

		[Token(Token = "0x4000829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public bool ShowNormals;

		[Token(Token = "0x400082A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
		public bool ShowIndex;

		[Token(Token = "0x400082B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC2")]
		public bool ShowMap;

		[Token(Token = "0x400082C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public Color PathColor;

		[Token(Token = "0x400082D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public Color VolumeColor;

		[Token(Token = "0x400082E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public Color NormalColor;

		[Token(Token = "0x400082F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0xFD3578", Offset = "0xFD3578")]
		public bool Interpolate;

		[Token(Token = "0x4000830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0xFD35B0", Offset = "0xFD35B0")]
		public float InterpolatePathF;

		[Token(Token = "0x4000831")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0xFD3604", Offset = "0xFD3604")]
		public float InterpolateCrossF;

		[Token(Token = "0x6000E43")]
		[Address(RVA = "0x1DEBB20", Offset = "0x1DEBB20", VA = "0x1DEBB20")]
		public DebugVolume()
		{
		}
	}
	[Token(Token = "0x200017D")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0xFC7E00", Offset = "0xFC7E00")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC7E00", Offset = "0xFC7E00")]
	public class InputGameObject : CGModule
	{
		[Token(Token = "0x4000832")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0xFD3658", Offset = "0xFD3658")]
		public CGModuleOutputSlot OutGameObject;

		[Token(Token = "0x4000833")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[ArrayEx]
		[SerializeField]
		private List<CGGameObjectProperties> m_GameObjects;

		[Token(Token = "0x1700030A")]
		public List<CGGameObjectProperties> GameObjects
		{
			[Token(Token = "0x6000E44")]
			[Address(RVA = "0x1DEBC04", Offset = "0x1DEBC04", VA = "0x1DEBC04")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700030B")]
		public bool SupportsIPE
		{
			[Token(Token = "0x6000E45")]
			[Address(RVA = "0x1DEBC0C", Offset = "0x1DEBC0C", VA = "0x1DEBC0C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000E46")]
		[Address(RVA = "0x1DEBC14", Offset = "0x1DEBC14", VA = "0x1DEBC14", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E47")]
		[Address(RVA = "0x1DEBC88", Offset = "0x1DEBC88", VA = "0x1DEBC88", Slot = "11")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x6000E48")]
		[Address(RVA = "0x1DEBE40", Offset = "0x1DEBE40", VA = "0x1DEBE40", Slot = "14")]
		public override void OnTemplateCreated()
		{
		}

		[Token(Token = "0x6000E49")]
		[Address(RVA = "0x1DEBEA4", Offset = "0x1DEBEA4", VA = "0x1DEBEA4")]
		public InputGameObject()
		{
		}
	}
	[Token(Token = "0x200017E")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0xFC7E98", Offset = "0xFC7E98")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC7E98", Offset = "0xFC7E98")]
	public class InputMesh : CGModule, IExternalInput
	{
		[Token(Token = "0x4000834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0xFD3710", Offset = "0xFD3710")]
		public CGModuleOutputSlot OutVMesh;

		[Token(Token = "0x4000835")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		[ArrayEx]
		private List<CGMeshProperties> m_Meshes;

		[Token(Token = "0x1700030C")]
		public List<CGMeshProperties> Meshes
		{
			[Token(Token = "0x6000E4A")]
			[Address(RVA = "0x1DEBF4C", Offset = "0x1DEBF4C", VA = "0x1DEBF4C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700030D")]
		public bool SupportsIPE
		{
			[Token(Token = "0x6000E4B")]
			[Address(RVA = "0x1DEBF54", Offset = "0x1DEBF54", VA = "0x1DEBF54", Slot = "15")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000E4C")]
		[Address(RVA = "0x1DEBF5C", Offset = "0x1DEBF5C", VA = "0x1DEBF5C", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E4D")]
		[Address(RVA = "0x1DEBFD0", Offset = "0x1DEBFD0", VA = "0x1DEBFD0", Slot = "11")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x6000E4E")]
		[Address(RVA = "0x1DEC1C0", Offset = "0x1DEC1C0", VA = "0x1DEC1C0", Slot = "14")]
		public override void OnTemplateCreated()
		{
		}

		[Token(Token = "0x6000E4F")]
		[Address(RVA = "0x1DEC224", Offset = "0x1DEC224", VA = "0x1DEC224")]
		public InputMesh()
		{
		}
	}
	[Token(Token = "0x200017F")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0xFC7F30", Offset = "0xFC7F30")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC7F30", Offset = "0xFC7F30")]
	public class InputSplinePath : SplineInputModuleBase, IExternalInput, IOnRequestPath, IOnRequestProcessing, IPathProvider
	{
		[Token(Token = "0x4000836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0xFD37C8", Offset = "0xFD37C8")]
		public CGModuleOutputSlot Path;

		[Token(Token = "0x4000837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0xFD383C", Offset = "0xFD383C")]
		[SerializeField]
		[AttributeAttribute(Name = "CGResourceManagerAttribute", RVA = "0xFD383C", Offset = "0xFD383C")]
		[AttributeAttribute(Name = "FieldConditionAttribute", RVA = "0xFD383C", Offset = "0xFD383C")]
		private CurvySpline m_Spline;

		[Token(Token = "0x1700030E")]
		public CurvySpline Spline
		{
			[Token(Token = "0x6000E50")]
			[Address(RVA = "0x1DEC360", Offset = "0x1DEC360", VA = "0x1DEC360")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E51")]
			[Address(RVA = "0x1DEC368", Offset = "0x1DEC368", VA = "0x1DEC368")]
			set
			{
			}
		}

		[Token(Token = "0x1700030F")]
		public bool SupportsIPE
		{
			[Token(Token = "0x6000E52")]
			[Address(RVA = "0x1DEC6EC", Offset = "0x1DEC6EC", VA = "0x1DEC6EC", Slot = "20")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000310")]
		protected override CurvySpline InputSpline
		{
			[Token(Token = "0x6000E55")]
			[Address(RVA = "0x1DEDEB8", Offset = "0x1DEDEB8", VA = "0x1DEDEB8", Slot = "17")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E56")]
			[Address(RVA = "0x1DEDEC0", Offset = "0x1DEDEC0", VA = "0x1DEDEC0", Slot = "18")]
			set
			{
			}
		}

		[Token(Token = "0x6000E53")]
		[Address(RVA = "0x1DEC6F4", Offset = "0x1DEC6F4", VA = "0x1DEC6F4", Slot = "22")]
		public CGData[] OnSlotDataRequest(CGModuleInputSlot requestedBy, CGModuleOutputSlot requestedSlot, params CGDataRequestParameter[] requests)
		{
			return null;
		}

		[Token(Token = "0x6000E54")]
		[Address(RVA = "0x1DEDE10", Offset = "0x1DEDE10", VA = "0x1DEDE10", Slot = "14")]
		public override void OnTemplateCreated()
		{
		}

		[Token(Token = "0x6000E57")]
		[Address(RVA = "0x1DEDEC4", Offset = "0x1DEDEC4", VA = "0x1DEDEC4")]
		public InputSplinePath()
		{
		}
	}
	[Token(Token = "0x2000180")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0xFC7FC8", Offset = "0xFC7FC8")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC7FC8", Offset = "0xFC7FC8")]
	public class InputSplineShape : SplineInputModuleBase, IExternalInput, IOnRequestPath, IOnRequestProcessing, IPathProvider
	{
		[Token(Token = "0x4000838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0xFD38F8", Offset = "0xFD38F8")]
		public CGModuleOutputSlot OutShape;

		[Token(Token = "0x4000839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "TabAttribute", RVA = "0xFD396C", Offset = "0xFD396C")]
		[SerializeField]
		[AttributeAttribute(Name = "CGResourceManagerAttribute", RVA = "0xFD396C", Offset = "0xFD396C")]
		private CurvySpline m_Shape;

		[Token(Token = "0x17000311")]
		public CurvySpline Shape
		{
			[Token(Token = "0x6000E58")]
			[Address(RVA = "0x1DEDF40", Offset = "0x1DEDF40", VA = "0x1DEDF40")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E59")]
			[Address(RVA = "0x1DEDF48", Offset = "0x1DEDF48", VA = "0x1DEDF48")]
			set
			{
			}
		}

		[Token(Token = "0x17000312")]
		public bool SupportsIPE
		{
			[Token(Token = "0x6000E5A")]
			[Address(RVA = "0x1DEE008", Offset = "0x1DEE008", VA = "0x1DEE008", Slot = "20")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000313")]
		public bool FreeForm
		{
			[Token(Token = "0x6000E5B")]
			[Address(RVA = "0x1DEE00C", Offset = "0x1DEE00C", VA = "0x1DEE00C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E5C")]
			[Address(RVA = "0x1DEE0E8", Offset = "0x1DEE0E8", VA = "0x1DEE0E8")]
			set
			{
			}
		}

		[Token(Token = "0x17000314")]
		protected override CurvySpline InputSpline
		{
			[Token(Token = "0x6000E60")]
			[Address(RVA = "0x1DEE418", Offset = "0x1DEE418", VA = "0x1DEE418", Slot = "17")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E61")]
			[Address(RVA = "0x1DEE420", Offset = "0x1DEE420", VA = "0x1DEE420", Slot = "18")]
			set
			{
			}
		}

		[Token(Token = "0x6000E5D")]
		[Address(RVA = "0x1DEE234", Offset = "0x1DEE234", VA = "0x1DEE234", Slot = "22")]
		public CGData[] OnSlotDataRequest(CGModuleInputSlot requestedBy, CGModuleOutputSlot requestedSlot, params CGDataRequestParameter[] requests)
		{
			return null;
		}

		[Token(Token = "0x6000E5E")]
		public T SetManagedShape<T>() where T : CurvyShape2D
		{
			return null;
		}

		[Token(Token = "0x6000E5F")]
		[Address(RVA = "0x1DEE370", Offset = "0x1DEE370", VA = "0x1DEE370")]
		public void RemoveManagedShape()
		{
		}

		[Token(Token = "0x6000E62")]
		[Address(RVA = "0x1DEE424", Offset = "0x1DEE424", VA = "0x1DEE424", Slot = "19")]
		protected override void OnSplineAssigned()
		{
		}

		[Token(Token = "0x6000E63")]
		[Address(RVA = "0x1DEE670", Offset = "0x1DEE670", VA = "0x1DEE670")]
		public InputSplineShape()
		{
		}
	}
	[Token(Token = "0x2000181")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0xFC8060", Offset = "0xFC8060")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC8060", Offset = "0xFC8060")]
	public class InputSpots : CGModule
	{
		[Token(Token = "0x400083A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0xFD39E0", Offset = "0xFD39E0")]
		public CGModuleOutputSlot OutSpots;

		[Token(Token = "0x400083B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[ArrayEx]
		[SerializeField]
		private List<CGSpot> m_Spots;

		[Token(Token = "0x17000315")]
		public List<CGSpot> Spots
		{
			[Token(Token = "0x6000E64")]
			[Address(RVA = "0x1DEE6E4", Offset = "0x1DEE6E4", VA = "0x1DEE6E4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E65")]
			[Address(RVA = "0x1DEE6EC", Offset = "0x1DEE6EC", VA = "0x1DEE6EC")]
			set
			{
			}
		}

		[Token(Token = "0x6000E66")]
		[Address(RVA = "0x1DEE728", Offset = "0x1DEE728", VA = "0x1DEE728", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000E67")]
		[Address(RVA = "0x1DEE760", Offset = "0x1DEE760", VA = "0x1DEE760", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E68")]
		[Address(RVA = "0x1DEE7D4", Offset = "0x1DEE7D4", VA = "0x1DEE7D4", Slot = "13")]
		public override void OnStateChange()
		{
		}

		[Token(Token = "0x6000E69")]
		[Address(RVA = "0x1DEE7DC", Offset = "0x1DEE7DC", VA = "0x1DEE7DC", Slot = "11")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x6000E6A")]
		[Address(RVA = "0x1DEE908", Offset = "0x1DEE908", VA = "0x1DEE908")]
		public InputSpots()
		{
		}
	}
	[Token(Token = "0x2000182")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0xFC80F8", Offset = "0xFC80F8")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC80F8", Offset = "0xFC80F8")]
	public class ModifierMixPaths : CGModule, IOnRequestPath, IOnRequestProcessing, IPathProvider
	{
		[Token(Token = "0x400083C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0xFD3A8C", Offset = "0xFD3A8C")]
		public CGModuleInputSlot InPathA;

		[Token(Token = "0x400083D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0xFD3B48", Offset = "0xFD3B48")]
		public CGModuleInputSlot InPathB;

		[Token(Token = "0x400083E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0xFD3C04", Offset = "0xFD3C04")]
		public CGModuleOutputSlot OutPath;

		[Token(Token = "0x400083F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0xFD3C78", Offset = "0xFD3C78")]
		private float m_Mix;

		[Token(Token = "0x17000316")]
		public float Mix
		{
			[Token(Token = "0x6000E6B")]
			[Address(RVA = "0x1DEE9B0", Offset = "0x1DEE9B0", VA = "0x1DEE9B0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E6C")]
			[Address(RVA = "0x1DEE9B8", Offset = "0x1DEE9B8", VA = "0x1DEE9B8")]
			set
			{
			}
		}

		[Token(Token = "0x17000317")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD7DC4", Offset = "0xFD7DC4")]
		public float PathLength
		{
			[Token(Token = "0x6000E6D")]
			[Address(RVA = "0x1DEE9D4", Offset = "0x1DEE9D4", VA = "0x1DEE9D4", Slot = "15")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000318")]
		public bool PathIsClosed
		{
			[Token(Token = "0x6000E6E")]
			[Address(RVA = "0x1DEEBA0", Offset = "0x1DEEBA0", VA = "0x1DEEBA0", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000E6F")]
		[Address(RVA = "0x1DEED2C", Offset = "0x1DEED2C", VA = "0x1DEED2C", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000E70")]
		[Address(RVA = "0x1DEED74", Offset = "0x1DEED74", VA = "0x1DEED74", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E71")]
		[Address(RVA = "0x1DEEDB4", Offset = "0x1DEEDB4", VA = "0x1DEEDB4", Slot = "16")]
		public CGData[] OnSlotDataRequest(CGModuleInputSlot requestedBy, CGModuleOutputSlot requestedSlot, params CGDataRequestParameter[] requests)
		{
			return null;
		}

		[Token(Token = "0x6000E72")]
		[Address(RVA = "0x1DEEEF0", Offset = "0x1DEEEF0", VA = "0x1DEEEF0")]
		public static CGPath MixPath(CGPath pathA, CGPath pathB, float mix, [NotNull] List<string> warningsContainer)
		{
			return null;
		}

		[Token(Token = "0x6000E73")]
		[Address(RVA = "0x1DEFBBC", Offset = "0x1DEFBBC", VA = "0x1DEFBBC")]
		public ModifierMixPaths()
		{
		}
	}
	[Token(Token = "0x2000183")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0xFC8190", Offset = "0xFC8190")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC8190", Offset = "0xFC8190")]
	public class ModifierMixShapes : CGModule, IOnRequestPath, IOnRequestProcessing, IPathProvider
	{
		[Serializable]
		[Token(Token = "0x200023F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC8A2C", Offset = "0xFC8A2C")]
		private sealed class <>c
		{
			[Token(Token = "0x4000B89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000B8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<SamplePointsMaterialGroup, SamplePointsMaterialGroup> <>9__15_0;

			[Token(Token = "0x600103B")]
			[Address(RVA = "0x1DF03AC", Offset = "0x1DF03AC", VA = "0x1DF03AC")]
			public <>c()
			{
			}

			[Token(Token = "0x600103C")]
			[Address(RVA = "0x1DF03B4", Offset = "0x1DF03B4", VA = "0x1DF03B4")]
			internal SamplePointsMaterialGroup <InterpolateShape>b__15_0(SamplePointsMaterialGroup g)
			{
				return null;
			}
		}

		[Token(Token = "0x4000840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0xFD3D04", Offset = "0xFD3D04")]
		public CGModuleInputSlot InShapeA;

		[Token(Token = "0x4000841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0xFD3DC0", Offset = "0xFD3DC0")]
		public CGModuleInputSlot InShapeB;

		[Token(Token = "0x4000842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0xFD3E7C", Offset = "0xFD3E7C")]
		public CGModuleOutputSlot OutShape;

		[Token(Token = "0x4000843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0xFD3EF0", Offset = "0xFD3EF0")]
		private float m_Mix;

		[Token(Token = "0x17000319")]
		public float Mix
		{
			[Token(Token = "0x6000E74")]
			[Address(RVA = "0x1DEFC88", Offset = "0x1DEFC88", VA = "0x1DEFC88")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E75")]
			[Address(RVA = "0x1DEFC90", Offset = "0x1DEFC90", VA = "0x1DEFC90")]
			set
			{
			}
		}

		[Token(Token = "0x1700031A")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD7DFC", Offset = "0xFD7DFC")]
		public float PathLength
		{
			[Token(Token = "0x6000E76")]
			[Address(RVA = "0x1DEFCAC", Offset = "0x1DEFCAC", VA = "0x1DEFCAC", Slot = "15")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700031B")]
		public bool PathIsClosed
		{
			[Token(Token = "0x6000E77")]
			[Address(RVA = "0x1DEFE78", Offset = "0x1DEFE78", VA = "0x1DEFE78", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000E78")]
		[Address(RVA = "0x1DF0004", Offset = "0x1DF0004", VA = "0x1DF0004", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000E79")]
		[Address(RVA = "0x1DF004C", Offset = "0x1DF004C", VA = "0x1DF004C", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E7A")]
		[Address(RVA = "0x1DF008C", Offset = "0x1DF008C", VA = "0x1DF008C", Slot = "16")]
		public CGData[] OnSlotDataRequest(CGModuleInputSlot requestedBy, CGModuleOutputSlot requestedSlot, params CGDataRequestParameter[] requests)
		{
			return null;
		}

		[Token(Token = "0x6000E7B")]
		[Address(RVA = "0x1DF01C0", Offset = "0x1DF01C0", VA = "0x1DF01C0")]
		public static CGShape MixShapes(CGShape shapeA, CGShape shapeB, float mix, [NotNull] List<string> warningsContainer, bool ignoreWarnings = false)
		{
			return null;
		}

		[Token(Token = "0x6000E7C")]
		[Address(RVA = "0x1DEF31C", Offset = "0x1DEF31C", VA = "0x1DEF31C")]
		public static void InterpolateShape([NotNull] CGShape resultShape, CGShape shapeA, CGShape shapeB, float mix, [NotNull] List<string> warningsContainer, bool ignoreWarnings = false)
		{
		}

		[Token(Token = "0x6000E7D")]
		[Address(RVA = "0x1DF0278", Offset = "0x1DF0278", VA = "0x1DF0278")]
		public ModifierMixShapes()
		{
		}
	}
	[Token(Token = "0x2000184")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0xFC8228", Offset = "0xFC8228")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC8228", Offset = "0xFC8228")]
	public class ModifierPathRelativeTranslation : CGModule, IOnRequestPath, IOnRequestProcessing, IPathProvider
	{
		[Token(Token = "0x4000844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0xFD3F7C", Offset = "0xFD3F7C")]
		public CGModuleInputSlot InPath;

		[Token(Token = "0x4000845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0xFD404C", Offset = "0xFD404C")]
		public CGModuleOutputSlot OutPath;

		[Token(Token = "0x4000846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xFD40C0", Offset = "0xFD40C0")]
		private float lateralTranslation;

		[Token(Token = "0x1700031C")]
		public float LateralTranslation
		{
			[Token(Token = "0x6000E7E")]
			[Address(RVA = "0x1DF047C", Offset = "0x1DF047C", VA = "0x1DF047C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E7F")]
			[Address(RVA = "0x1DF0484", Offset = "0x1DF0484", VA = "0x1DF0484")]
			set
			{
			}
		}

		[Token(Token = "0x1700031D")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD7E34", Offset = "0xFD7E34")]
		public float PathLength
		{
			[Token(Token = "0x6000E80")]
			[Address(RVA = "0x1DF04A4", Offset = "0x1DF04A4", VA = "0x1DF04A4", Slot = "15")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700031E")]
		public bool PathIsClosed
		{
			[Token(Token = "0x6000E81")]
			[Address(RVA = "0x1DF0598", Offset = "0x1DF0598", VA = "0x1DF0598", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000E82")]
		[Address(RVA = "0x1DF068C", Offset = "0x1DF068C", VA = "0x1DF068C", Slot = "16")]
		public CGData[] OnSlotDataRequest(CGModuleInputSlot requestedBy, CGModuleOutputSlot requestedSlot, params CGDataRequestParameter[] requests)
		{
			return null;
		}

		[Token(Token = "0x6000E83")]
		[Address(RVA = "0x1DF08F4", Offset = "0x1DF08F4", VA = "0x1DF08F4", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000E84")]
		[Address(RVA = "0x1DF093C", Offset = "0x1DF093C", VA = "0x1DF093C", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E85")]
		[Address(RVA = "0x1DF0988", Offset = "0x1DF0988", VA = "0x1DF0988")]
		public ModifierPathRelativeTranslation()
		{
		}
	}
	[Token(Token = "0x2000185")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0xFC82C0", Offset = "0xFC82C0")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC82C0", Offset = "0xFC82C0")]
	public class ModifierTRSMesh : TRSModuleBase
	{
		[Token(Token = "0x4000847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0xFD410C", Offset = "0xFD410C")]
		public CGModuleInputSlot InVMesh;

		[Token(Token = "0x4000848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0xFD41C4", Offset = "0xFD41C4")]
		public CGModuleOutputSlot OutVMesh;

		[Token(Token = "0x6000E86")]
		[Address(RVA = "0x1DF0A28", Offset = "0x1DF0A28", VA = "0x1DF0A28", Slot = "11")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x6000E87")]
		[Address(RVA = "0x1DF0D1C", Offset = "0x1DF0D1C", VA = "0x1DF0D1C")]
		public ModifierTRSMesh()
		{
		}
	}
	[Token(Token = "0x2000186")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0xFC8358", Offset = "0xFC8358")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC8358", Offset = "0xFC8358")]
	public class ModifierTRSPath : TRSModuleBase, IOnRequestPath, IOnRequestProcessing, IPathProvider
	{
		[Token(Token = "0x4000849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0xFD4244", Offset = "0xFD4244")]
		public CGModuleInputSlot InPath;

		[Token(Token = "0x400084A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0xFD4314", Offset = "0xFD4314")]
		public CGModuleOutputSlot OutPath;

		[Token(Token = "0x1700031F")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD7E6C", Offset = "0xFD7E6C")]
		public float PathLength
		{
			[Token(Token = "0x6000E88")]
			[Address(RVA = "0x1DF0E30", Offset = "0x1DF0E30", VA = "0x1DF0E30", Slot = "15")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000320")]
		public bool PathIsClosed
		{
			[Token(Token = "0x6000E89")]
			[Address(RVA = "0x1DF0F24", Offset = "0x1DF0F24", VA = "0x1DF0F24", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000E8A")]
		[Address(RVA = "0x1DF1018", Offset = "0x1DF1018", VA = "0x1DF1018", Slot = "16")]
		public CGData[] OnSlotDataRequest(CGModuleInputSlot requestedBy, CGModuleOutputSlot requestedSlot, params CGDataRequestParameter[] requests)
		{
			return null;
		}

		[Token(Token = "0x6000E8B")]
		[Address(RVA = "0x1DF1330", Offset = "0x1DF1330", VA = "0x1DF1330")]
		public ModifierTRSPath()
		{
		}
	}
	[Token(Token = "0x2000187")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0xFC83F0", Offset = "0xFC83F0")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC83F0", Offset = "0xFC83F0")]
	public class ModifierTRSShape : TRSModuleBase, IOnRequestPath, IOnRequestProcessing, IPathProvider
	{
		[Token(Token = "0x400084B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0xFD4388", Offset = "0xFD4388")]
		public CGModuleInputSlot InShape;

		[Token(Token = "0x400084C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[HideInInspector]
		[AttributeAttribute(Name = "OutputSlotInfo", RVA = "0xFD4458", Offset = "0xFD4458")]
		public CGModuleOutputSlot OutShape;

		[Token(Token = "0x17000321")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD7EA4", Offset = "0xFD7EA4")]
		public float PathLength
		{
			[Token(Token = "0x6000E8C")]
			[Address(RVA = "0x1DF13CC", Offset = "0x1DF13CC", VA = "0x1DF13CC", Slot = "15")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000322")]
		public bool PathIsClosed
		{
			[Token(Token = "0x6000E8D")]
			[Address(RVA = "0x1DF14C0", Offset = "0x1DF14C0", VA = "0x1DF14C0", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000E8E")]
		[Address(RVA = "0x1DF15B4", Offset = "0x1DF15B4", VA = "0x1DF15B4", Slot = "16")]
		public CGData[] OnSlotDataRequest(CGModuleInputSlot requestedBy, CGModuleOutputSlot requestedSlot, params CGDataRequestParameter[] requests)
		{
			return null;
		}

		[Token(Token = "0x6000E8F")]
		[Address(RVA = "0x1DF18CC", Offset = "0x1DF18CC", VA = "0x1DF18CC")]
		public ModifierTRSShape()
		{
		}
	}
	[Token(Token = "0x2000188")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0xFC8488", Offset = "0xFC8488")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC8488", Offset = "0xFC8488")]
	public class ModifierVariableMixShapes : CGModule, IOnRequestPath, IOnRequestProcessing, IPathProvider
	{
		[Token(Token = "0x400084D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0xFD44CC", Offset = "0xFD44CC")]
		public CGModuleInputSlot InShapeA;

		[Token(Token = "0x400084E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		[AttributeAttribute(Name = "InputSlotInfo", RVA = "0xFD4588", Offset = "0xFD4588")]
		public CGModuleInputSlot InShapeB;

		[Token(Token = "0x400084F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		[AttributeAttribute(Name = "ShapeOutputSlotInfo", RVA = "0xFD4644", Offset = "0xFD4644")]
		public CGModuleOutputSlot OutShape;

		[Token(Token = "0x4000850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "LabelAttribute", RVA = "0xFD4698", Offset = "0xFD4698")]
		[SerializeField]
		private AnimationCurve m_MixCurve;

		[Token(Token = "0x17000323")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xFD7EDC", Offset = "0xFD7EDC")]
		public float PathLength
		{
			[Token(Token = "0x6000E90")]
			[Address(RVA = "0x1DF1968", Offset = "0x1DF1968", VA = "0x1DF1968", Slot = "15")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000324")]
		public bool PathIsClosed
		{
			[Token(Token = "0x6000E91")]
			[Address(RVA = "0x1DF1B34", Offset = "0x1DF1B34", VA = "0x1DF1B34", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000325")]
		public AnimationCurve MixCurve
		{
			[Token(Token = "0x6000E92")]
			[Address(RVA = "0x1DF1CC0", Offset = "0x1DF1CC0", VA = "0x1DF1CC0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E93")]
			[Address(RVA = "0x1DF1CC8", Offset = "0x1DF1CC8", VA = "0x1DF1CC8")]
			set
			{
			}
		}

		[Token(Token = "0x6000E94")]
		[Address(RVA = "0x1DF1CF8", Offset = "0x1DF1CF8", VA = "0x1DF1CF8", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E95")]
		[Address(RVA = "0x1DF1D40", Offset = "0x1DF1D40", VA = "0x1DF1D40", Slot = "16")]
		public CGData[] OnSlotDataRequest(CGModuleInputSlot requestedBy, CGModuleOutputSlot requestedSlot, params CGDataRequestParameter[] requests)
		{
			return null;
		}

		[Token(Token = "0x6000E96")]
		[Address(RVA = "0x1DF1F0C", Offset = "0x1DF1F0C", VA = "0x1DF1F0C")]
		public ModifierVariableMixShapes()
		{
		}
	}
	[Token(Token = "0x2000189")]
	[AttributeAttribute(Name = "ModuleInfoAttribute", RVA = "0xFC8520", Offset = "0xFC8520")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xFC8520", Offset = "0xFC8520")]
	public class Note : CGModule, INoProcessing
	{
		[Token(Token = "0x4000851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		[AttributeAttribute(Name = "TextAreaAttribute", RVA = "0xFD4700", Offset = "0xFD4700")]
		private string m_Note;

		[Token(Token = "0x17000326")]
		public string NoteText
		{
			[Token(Token = "0x6000E97")]
			[Address(RVA = "0x1DF2000", Offset = "0x1DF2000", VA = "0x1DF2000")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E98")]
			[Address(RVA = "0x1DF2008", Offset = "0x1DF2008", VA = "0x1DF2008")]
			set
			{
			}
		}

		[Token(Token = "0x6000E99")]
		[Address(RVA = "0x1DF2050", Offset = "0x1DF2050", VA = "0x1DF2050", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000E9A")]
		[Address(RVA = "0x1DF2098", Offset = "0x1DF2098", VA = "0x1DF2098", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000E9B")]
		[Address(RVA = "0x1DF20C8", Offset = "0x1DF20C8", VA = "0x1DF20C8")]
		public Note()
		{
		}
	}
}
namespace FluffyUnderware.Curvy.Examples
{
	[Token(Token = "0x200018A")]
	public class CameraLook : MonoBehaviour
	{
		[Token(Token = "0x4000852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xFD4740", Offset = "0xFD4740")]
		[SerializeField]
		private float m_TurnSpeed;

		[Token(Token = "0x6000E9C")]
		[Address(RVA = "0x1BF305C", Offset = "0x1BF305C", VA = "0x1BF305C")]
		protected void Update()
		{
		}

		[Token(Token = "0x6000E9D")]
		[Address(RVA = "0x1BF3154", Offset = "0x1BF3154", VA = "0x1BF3154")]
		public CameraLook()
		{
		}
	}
	[Token(Token = "0x200018B")]
	[ExecuteInEditMode]
	public class ChaseCam : MonoBehaviour
	{
		[Token(Token = "0x4000853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform LookAt;

		[Token(Token = "0x4000854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform MoveTo;

		[Token(Token = "0x4000855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform RollTo;

		[Token(Token = "0x4000856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Positive]
		public float ChaseTime;

		[Token(Token = "0x4000857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 mVelocity;

		[Token(Token = "0x4000858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 mRollVelocity;

		[Token(Token = "0x6000E9E")]
		[Address(RVA = "0x1BF3164", Offset = "0x1BF3164", VA = "0x1BF3164")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000E9F")]
		[Address(RVA = "0x1BF3414", Offset = "0x1BF3414", VA = "0x1BF3414")]
		public ChaseCam()
		{
		}
	}
	[Token(Token = "0x200018C")]
	public class CurvyCamController : SplineController
	{
		[Token(Token = "0x4000859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0xFD4790", Offset = "0xFD4790")]
		public float MinSpeed;

		[Token(Token = "0x400085A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		public float MaxSpeed;

		[Token(Token = "0x400085B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public float Mass;

		[Token(Token = "0x400085C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		public float Down;

		[Token(Token = "0x400085D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public float Up;

		[Token(Token = "0x400085E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		public float Fric;

		[Token(Token = "0x6000EA0")]
		[Address(RVA = "0x1BF3424", Offset = "0x1BF3424", VA = "0x1BF3424", Slot = "8")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000EA1")]
		[Address(RVA = "0x1BF3454", Offset = "0x1BF3454", VA = "0x1BF3454", Slot = "29")]
		protected override void Advance(float speed, float deltaTime)
		{
		}

		[Token(Token = "0x6000EA2")]
		[Address(RVA = "0x1BF35A8", Offset = "0x1BF35A8", VA = "0x1BF35A8")]
		public CurvyCamController()
		{
		}
	}
	[Token(Token = "0x200018D")]
	public class HeightMetadata : CurvyInterpolatableMetadataBase<float>
	{
		[Token(Token = "0x400085F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0xFD47D4", Offset = "0xFD47D4")]
		private float m_Height;

		[Token(Token = "0x17000327")]
		public override float MetaDataValue
		{
			[Token(Token = "0x6000EA3")]
			[Address(RVA = "0x1BF35BC", Offset = "0x1BF35BC", VA = "0x1BF35BC", Slot = "10")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000EA4")]
		[Address(RVA = "0x1BF35C4", Offset = "0x1BF35C4", VA = "0x1BF35C4", Slot = "11")]
		public override float Interpolate(CurvyInterpolatableMetadataBase<float> nextMetadata, float interpolationTime)
		{
			return default(float);
		}

		[Token(Token = "0x6000EA5")]
		[Address(RVA = "0x1BF36D8", Offset = "0x1BF36D8", VA = "0x1BF36D8")]
		public HeightMetadata()
		{
		}
	}
	[Token(Token = "0x200018E")]
	public class InfiniteTrack : MonoBehaviour
	{
		[Token(Token = "0x2000240")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC8A3C", Offset = "0xFC8A3C")]
		private sealed class <setup>d__22 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public InfiniteTrack <>4__this;

			[Token(Token = "0x4000B8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <i>5__2;

			[Token(Token = "0x1700035E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001040")]
				[Address(RVA = "0x1BF4764", Offset = "0x1BF4764", VA = "0x1BF4764", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700035F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001042")]
				[Address(RVA = "0x1BF47CC", Offset = "0x1BF47CC", VA = "0x1BF47CC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600103D")]
			[Address(RVA = "0x1BF3A7C", Offset = "0x1BF3A7C", VA = "0x1BF3A7C")]
			[DebuggerHidden]
			public <setup>d__22(int <>1__state)
			{
			}

			[Token(Token = "0x600103E")]
			[Address(RVA = "0x1BF43FC", Offset = "0x1BF43FC", VA = "0x1BF43FC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600103F")]
			[Address(RVA = "0x1BF4400", Offset = "0x1BF4400", VA = "0x1BF4400", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001041")]
			[Address(RVA = "0x1BF476C", Offset = "0x1BF476C", VA = "0x1BF476C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CurvySpline TrackSpline;

		[Token(Token = "0x4000861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CurvyController Controller;

		[Token(Token = "0x4000862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Material RoadMaterial;

		[Token(Token = "0x4000863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Text TxtStats;

		[Token(Token = "0x4000864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Positive]
		public float CurvationX;

		[Token(Token = "0x4000865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Positive]
		public float CurvationY;

		[Token(Token = "0x4000866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Positive]
		public float CPStepSize;

		[Token(Token = "0x4000867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Positive]
		public int HeadCP;

		[Token(Token = "0x4000868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Positive]
		public int TailCP;

		[Token(Token = "0x4000869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "MinAttribute", RVA = "0xFD48A0", Offset = "0xFD48A0")]
		public int Sections;

		[Token(Token = "0x400086A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "MinAttribute", RVA = "0xFD48F8", Offset = "0xFD48F8")]
		public int SectionCPCount;

		[Token(Token = "0x400086B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int mInitState;

		[Token(Token = "0x400086C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool mUpdateSpline;

		[Token(Token = "0x400086D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int mUpdateIn;

		[Token(Token = "0x400086E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CurvyGenerator[] mGenerators;

		[Token(Token = "0x400086F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int mCurrentGen;

		[Token(Token = "0x4000870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float lastSectionEndV;

		[Token(Token = "0x4000871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector3 mDir;

		[Token(Token = "0x4000872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private TimeMeasure timeSpline;

		[Token(Token = "0x4000873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private TimeMeasure timeCG;

		[Token(Token = "0x6000EA6")]
		[Address(RVA = "0x1BF3728", Offset = "0x1BF3728", VA = "0x1BF3728")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EA7")]
		[Address(RVA = "0x1BF3810", Offset = "0x1BF3810", VA = "0x1BF3810")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000EA8")]
		[Address(RVA = "0x1BF3A00", Offset = "0x1BF3A00", VA = "0x1BF3A00")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xFD723C", Offset = "0xFD723C")]
		private IEnumerator setup()
		{
			return null;
		}

		[Token(Token = "0x6000EA9")]
		[Address(RVA = "0x1BF3AA8", Offset = "0x1BF3AA8", VA = "0x1BF3AA8")]
		private CurvyGenerator buildGenerator()
		{
			return null;
		}

		[Token(Token = "0x6000EAA")]
		[Address(RVA = "0x1BF3894", Offset = "0x1BF3894", VA = "0x1BF3894")]
		private void advanceTrack()
		{
		}

		[Token(Token = "0x6000EAB")]
		[Address(RVA = "0x1BF4068", Offset = "0x1BF4068", VA = "0x1BF4068")]
		private void advanceSections()
		{
		}

		[Token(Token = "0x6000EAC")]
		[Address(RVA = "0x1BF372C", Offset = "0x1BF372C", VA = "0x1BF372C")]
		private void updateStats()
		{
		}

		[Token(Token = "0x6000EAD")]
		[Address(RVA = "0x1BF4100", Offset = "0x1BF4100", VA = "0x1BF4100")]
		private void updateSectionGenerator(CurvyGenerator gen, int startCP, int endCP)
		{
		}

		[Token(Token = "0x6000EAE")]
		[Address(RVA = "0x1BF4310", Offset = "0x1BF4310", VA = "0x1BF4310")]
		public void Track_OnControlPointReached(CurvySplineMoveEventArgs e)
		{
		}

		[Token(Token = "0x6000EAF")]
		[Address(RVA = "0x1BF3DE8", Offset = "0x1BF3DE8", VA = "0x1BF3DE8")]
		private void addTrackCP()
		{
		}

		[Token(Token = "0x6000EB0")]
		[Address(RVA = "0x1BF4338", Offset = "0x1BF4338", VA = "0x1BF4338")]
		public InfiniteTrack()
		{
		}
	}
	[Token(Token = "0x200018F")]
	public class MDJunctionControl : CurvyMetadataBase
	{
		[Token(Token = "0x4000874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool UseJunction;

		[Token(Token = "0x6000EB1")]
		[Address(RVA = "0x1BF47D4", Offset = "0x1BF47D4", VA = "0x1BF47D4")]
		public void Toggle()
		{
		}

		[Token(Token = "0x6000EB2")]
		[Address(RVA = "0x1BF47E4", Offset = "0x1BF47E4", VA = "0x1BF47E4")]
		public MDJunctionControl()
		{
		}
	}
	[Token(Token = "0x2000190")]
	public class MetaDataController : SplineController
	{
		[Token(Token = "0x4000875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0xFD4950", Offset = "0xFD4950")]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0xFD4950", Offset = "0xFD4950")]
		[SerializeField]
		private float m_MaxHeight;

		[Token(Token = "0x17000328")]
		public float MaxHeight
		{
			[Token(Token = "0x6000EB3")]
			[Address(RVA = "0x1BF47EC", Offset = "0x1BF47EC", VA = "0x1BF47EC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000EB4")]
			[Address(RVA = "0x1BF47F4", Offset = "0x1BF47F4", VA = "0x1BF47F4")]
			set
			{
			}
		}

		[Token(Token = "0x6000EB5")]
		[Address(RVA = "0x1BF4808", Offset = "0x1BF4808", VA = "0x1BF4808", Slot = "24")]
		protected override void UserAfterInit()
		{
		}

		[Token(Token = "0x6000EB6")]
		[Address(RVA = "0x1BF4904", Offset = "0x1BF4904", VA = "0x1BF4904", Slot = "25")]
		protected override void UserAfterUpdate()
		{
		}

		[Token(Token = "0x6000EB7")]
		[Address(RVA = "0x1BF480C", Offset = "0x1BF480C", VA = "0x1BF480C")]
		private void setHeight()
		{
		}

		[Token(Token = "0x6000EB8")]
		[Address(RVA = "0x1BF4908", Offset = "0x1BF4908", VA = "0x1BF4908")]
		public MetaDataController()
		{
		}
	}
	[Token(Token = "0x2000191")]
	public class MotorController : SplineController
	{
		[Token(Token = "0x4000876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0xFD49F4", Offset = "0xFD49F4")]
		public float MaxSpeed;

		[Token(Token = "0x6000EB9")]
		[Address(RVA = "0x1BF4918", Offset = "0x1BF4918", VA = "0x1BF4918", Slot = "11")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000EBA")]
		[Address(RVA = "0x1BF49D4", Offset = "0x1BF49D4", VA = "0x1BF49D4")]
		public MotorController()
		{
		}
	}
	[Token(Token = "0x2000192")]
	[ExecuteInEditMode]
	public class MoveToNearestPoint : MonoBehaviour
	{
		[Token(Token = "0x4000877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform Lookup;

		[Token(Token = "0x4000878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CurvySpline Spline;

		[Token(Token = "0x4000879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Text StatisticsText;

		[Token(Token = "0x400087A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Slider Density;

		[Token(Token = "0x400087B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TimeMeasure Timer;

		[Token(Token = "0x6000EBB")]
		[Address(RVA = "0x1BF49E4", Offset = "0x1BF49E4", VA = "0x1BF49E4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EBC")]
		[Address(RVA = "0x1BF4C4C", Offset = "0x1BF4C4C", VA = "0x1BF4C4C")]
		public void OnSliderChange()
		{
		}

		[Token(Token = "0x6000EBD")]
		[Address(RVA = "0x1BF4C98", Offset = "0x1BF4C98", VA = "0x1BF4C98")]
		public MoveToNearestPoint()
		{
		}
	}
	[Token(Token = "0x2000193")]
	public class PaintSpline : MonoBehaviour
	{
		[Token(Token = "0x400087C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float StepDistance;

		[Token(Token = "0x400087D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SplineController Controller;

		[Token(Token = "0x400087E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Text InfoText;

		[Token(Token = "0x400087F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private CurvySpline mSpline;

		[Token(Token = "0x4000880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector2 mLastControlPointPos;

		[Token(Token = "0x4000881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool mResetSpline;

		[Token(Token = "0x6000EBE")]
		[Address(RVA = "0x1BF4D10", Offset = "0x1BF4D10", VA = "0x1BF4D10")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000EBF")]
		[Address(RVA = "0x1BF4D70", Offset = "0x1BF4D70", VA = "0x1BF4D70")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000EC0")]
		[Address(RVA = "0x1BF5004", Offset = "0x1BF5004", VA = "0x1BF5004")]
		private CurvySplineSegment addCP(Vector3 mousePos)
		{
			return null;
		}

		[Token(Token = "0x6000EC1")]
		[Address(RVA = "0x1BF5118", Offset = "0x1BF5118", VA = "0x1BF5118")]
		public PaintSpline()
		{
		}
	}
	[Token(Token = "0x2000194")]
	public class PerformanceAPI : MonoBehaviour
	{
		[Token(Token = "0x4000882")]
		private const int LOOPS = 20;

		[Token(Token = "0x4000883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<string> mTests;

		[Token(Token = "0x4000884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<string> mTestResults;

		[Token(Token = "0x4000885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CurvyInterpolation mInterpolation;

		[Token(Token = "0x4000886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private CurvyOrientation mOrientation;

		[Token(Token = "0x4000887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int mCacheSize;

		[Token(Token = "0x4000888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int mControlPointCount;

		[Token(Token = "0x4000889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int mTotalSplineLength;

		[Token(Token = "0x400088A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool mUseCache;

		[Token(Token = "0x400088B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		private bool mUseMultiThreads;

		[Token(Token = "0x400088C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int mCurrentTest;

		[Token(Token = "0x400088D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool mExecuting;

		[Token(Token = "0x400088E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private TimeMeasure Timer;

		[Token(Token = "0x400088F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private MethodInfo mGUIMethod;

		[Token(Token = "0x4000890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private MethodInfo mRunMethod;

		[Token(Token = "0x4000891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool mInterpolate_UseDistance;

		[Token(Token = "0x4000892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private int mRefresh_Mode;

		[Token(Token = "0x6000EC2")]
		[Address(RVA = "0x1BF5130", Offset = "0x1BF5130", VA = "0x1BF5130")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000EC3")]
		[Address(RVA = "0x1BF51B0", Offset = "0x1BF51B0", VA = "0x1BF51B0")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000EC4")]
		[Address(RVA = "0x1BF6BE4", Offset = "0x1BF6BE4", VA = "0x1BF6BE4")]
		private void GUI_Interpolate()
		{
		}

		[Token(Token = "0x6000EC5")]
		[Address(RVA = "0x1BF6D78", Offset = "0x1BF6D78", VA = "0x1BF6D78")]
		private void Test_Interpolate()
		{
		}

		[Token(Token = "0x6000EC6")]
		[Address(RVA = "0x1BF737C", Offset = "0x1BF737C", VA = "0x1BF737C")]
		private void GUI_Refresh()
		{
		}

		[Token(Token = "0x6000EC7")]
		[Address(RVA = "0x1BF76F0", Offset = "0x1BF76F0", VA = "0x1BF76F0")]
		private void Work()
		{
		}

		[Token(Token = "0x6000EC8")]
		[Address(RVA = "0x1BF7764", Offset = "0x1BF7764", VA = "0x1BF7764")]
		private void work()
		{
		}

		[Token(Token = "0x6000EC9")]
		[Address(RVA = "0x1BF77D8", Offset = "0x1BF77D8", VA = "0x1BF77D8")]
		private void Test_Refresh()
		{
		}

		[Token(Token = "0x6000ECA")]
		[Address(RVA = "0x1BF7048", Offset = "0x1BF7048", VA = "0x1BF7048")]
		private CurvySpline getSpline()
		{
			return null;
		}

		[Token(Token = "0x6000ECB")]
		[Address(RVA = "0x1BF7108", Offset = "0x1BF7108", VA = "0x1BF7108")]
		private void addRandomCP(ref CurvySpline spline, int count, int totalLength)
		{
		}

		[Token(Token = "0x6000ECC")]
		[Address(RVA = "0x1BF7A10", Offset = "0x1BF7A10", VA = "0x1BF7A10")]
		private void runTest()
		{
		}

		[Token(Token = "0x6000ECD")]
		[Address(RVA = "0x1BF7A4C", Offset = "0x1BF7A4C", VA = "0x1BF7A4C")]
		public PerformanceAPI()
		{
		}
	}
	[Token(Token = "0x2000195")]
	public class PerformanceDynamicSpline : MonoBehaviour
	{
		[Token(Token = "0x4000893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CurvySpline mSpline;

		[Token(Token = "0x4000894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CurvyGenerator Generator;

		[Token(Token = "0x4000895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Positive]
		public int UpdateInterval;

		[Token(Token = "0x4000896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeExAttribute", RVA = "0xFD4A48", Offset = "0xFD4A48")]
		public int CPCount;

		[Token(Token = "0x4000897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Positive]
		public float Radius;

		[Token(Token = "0x4000898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool AlwaysClear;

		[Token(Token = "0x4000899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		public bool UpdateCG;

		[Token(Token = "0x400089A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float mAngleStep;

		[Token(Token = "0x400089B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float mCurrentAngle;

		[Token(Token = "0x400089C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float mLastUpdateTime;

		[Token(Token = "0x400089D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private TimeMeasure ExecTimes;

		[Token(Token = "0x6000ECE")]
		[Address(RVA = "0x1BF7B48", Offset = "0x1BF7B48", VA = "0x1BF7B48")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000ECF")]
		[Address(RVA = "0x1BF7BA8", Offset = "0x1BF7BA8", VA = "0x1BF7BA8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000ED0")]
		[Address(RVA = "0x1BF7D7C", Offset = "0x1BF7D7C", VA = "0x1BF7D7C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000ED1")]
		[Address(RVA = "0x1BF7C18", Offset = "0x1BF7C18", VA = "0x1BF7C18")]
		private void addCP()
		{
		}

		[Token(Token = "0x6000ED2")]
		[Address(RVA = "0x1BF7EEC", Offset = "0x1BF7EEC", VA = "0x1BF7EEC")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000ED3")]
		[Address(RVA = "0x1BF8920", Offset = "0x1BF8920", VA = "0x1BF8920")]
		public PerformanceDynamicSpline()
		{
		}
	}
	[Token(Token = "0x2000196")]
	public class PoolTestRunner : MonoBehaviour
	{
		[Token(Token = "0x400089E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CurvySpline Spline;

		[Token(Token = "0x400089F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text PoolCountInfo;

		[Token(Token = "0x6000ED4")]
		[Address(RVA = "0x1BF89AC", Offset = "0x1BF89AC", VA = "0x1BF89AC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000ED5")]
		[Address(RVA = "0x1BF8AB0", Offset = "0x1BF8AB0", VA = "0x1BF8AB0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000ED6")]
		[Address(RVA = "0x1BF89B0", Offset = "0x1BF89B0", VA = "0x1BF89B0")]
		private void checkForSpline()
		{
		}

		[Token(Token = "0x6000ED7")]
		[Address(RVA = "0x1BF8B98", Offset = "0x1BF8B98", VA = "0x1BF8B98")]
		public void AddCP()
		{
		}

		[Token(Token = "0x6000ED8")]
		[Address(RVA = "0x1BF8CA0", Offset = "0x1BF8CA0", VA = "0x1BF8CA0")]
		public void DeleteCP()
		{
		}

		[Token(Token = "0x6000ED9")]
		[Address(RVA = "0x1BF8D9C", Offset = "0x1BF8D9C", VA = "0x1BF8D9C")]
		public void ClearSpline()
		{
		}

		[Token(Token = "0x6000EDA")]
		[Address(RVA = "0x1BF8E2C", Offset = "0x1BF8E2C", VA = "0x1BF8E2C")]
		public void DeleteSpline()
		{
		}

		[Token(Token = "0x6000EDB")]
		[Address(RVA = "0x1BF8EBC", Offset = "0x1BF8EBC", VA = "0x1BF8EBC")]
		public PoolTestRunner()
		{
		}
	}
	[Token(Token = "0x2000197")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xFC85E0", Offset = "0xFC85E0")]
	public class RigidBodySplineController : MonoBehaviour
	{
		[Token(Token = "0x40008A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CurvySpline Spline;

		[Token(Token = "0x40008A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SplineController CameraController;

		[Token(Token = "0x40008A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float VSpeed;

		[Token(Token = "0x40008A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float HSpeed;

		[Token(Token = "0x40008A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float CenterDrag;

		[Token(Token = "0x40008A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float JumpForce;

		[Token(Token = "0x40008A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbody mRigidBody;

		[Token(Token = "0x40008A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float mTF;

		[Token(Token = "0x40008A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float velocity;

		[Token(Token = "0x6000EDC")]
		[Address(RVA = "0x1BF8EC4", Offset = "0x1BF8EC4", VA = "0x1BF8EC4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EDD")]
		[Address(RVA = "0x1BF8F24", Offset = "0x1BF8F24", VA = "0x1BF8F24")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000EDE")]
		[Address(RVA = "0x1BF9030", Offset = "0x1BF9030", VA = "0x1BF9030")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000EDF")]
		[Address(RVA = "0x1BF9424", Offset = "0x1BF9424", VA = "0x1BF9424")]
		public RigidBodySplineController()
		{
		}
	}
	[Token(Token = "0x2000198")]
	public class RunnerController : SplineController
	{
		[Token(Token = "0x2000241")]
		private enum GuideMode
		{
			[Token(Token = "0x4000B90")]
			Guided,
			[Token(Token = "0x4000B91")]
			Jumping,
			[Token(Token = "0x4000B92")]
			FreeFall
		}

		[Token(Token = "0x2000242")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFC8A4C", Offset = "0xFC8A4C")]
		private sealed class <Jump>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RunnerController <>4__this;

			[Token(Token = "0x4000B96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <start>5__2;

			[Token(Token = "0x4000B97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <f>5__3;

			[Token(Token = "0x17000360")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001046")]
				[Address(RVA = "0x1BF9DC4", Offset = "0x1BF9DC4", VA = "0x1BF9DC4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000361")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001048")]
				[Address(RVA = "0x1BF9E2C", Offset = "0x1BF9E2C", VA = "0x1BF9E2C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001043")]
			[Address(RVA = "0x1BF9A30", Offset = "0x1BF9A30", VA = "0x1BF9A30")]
			[DebuggerHidden]
			public <Jump>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6001044")]
			[Address(RVA = "0x1BF9C84", Offset = "0x1BF9C84", VA = "0x1BF9C84", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001045")]
			[Address(RVA = "0x1BF9C88", Offset = "0x1BF9C88", VA = "0x1BF9C88", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001047")]
			[Address(RVA = "0x1BF9DCC", Offset = "0x1BF9DCC", VA = "0x1BF9DCC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40008A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[AttributeAttribute(Name = "SectionAttribute", RVA = "0xFD4AB8", Offset = "0xFD4AB8")]
		public float JumpHeight;

		[Token(Token = "0x40008AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		public float JumpSpeed;

		[Token(Token = "0x40008AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public AnimationCurve JumpCurve;

		[Token(Token = "0x40008AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public float Gravity;

		[Token(Token = "0x40008AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private GuideMode mMode;

		[Token(Token = "0x40008AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private float jumpHeight;

		[Token(Token = "0x40008AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private float fallingSpeed;

		[Token(Token = "0x40008B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private SplineRefMetadata mPossibleSwitchTarget;

		[Token(Token = "0x40008B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private int mSwitchInProgress;

		[Token(Token = "0x6000EE0")]
		[Address(RVA = "0x1BF9438", Offset = "0x1BF9438", VA = "0x1BF9438", Slot = "10")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6000EE1")]
		[Address(RVA = "0x1BF9464", Offset = "0x1BF9464", VA = "0x1BF9464", Slot = "16")]
		protected override void InitializedApplyDeltaTime(float deltaTime)
		{
		}

		[Token(Token = "0x6000EE2")]
		[Address(RVA = "0x1BF9774", Offset = "0x1BF9774", VA = "0x1BF9774")]
		private void Switch(int dir)
		{
		}

		[Token(Token = "0x6000EE3")]
		[Address(RVA = "0x1BF96F8", Offset = "0x1BF96F8", VA = "0x1BF96F8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xFD72A0", Offset = "0xFD72A0")]
		private IEnumerator Jump()
		{
			return null;
		}

		[Token(Token = "0x6000EE4")]
		[Address(RVA = "0x1BF9928", Offset = "0x1BF9928", VA = "0x1BF9928")]
		public void OnCPReached(CurvySplineMoveEventArgs e)
		{
		}

		[Token(Token = "0x6000EE5")]
		[Address(RVA = "0x1BF9A5C", Offset = "0x1BF9A5C", VA = "0x1BF9A5C")]
		public void UseFollowUpOrFall(CurvySplineMoveEventArgs e)
		{
		}

		[Token(Token = "0x6000EE6")]
		[Address(RVA = "0x1BF9C24", Offset = "0x1BF9C24", VA = "0x1BF9C24")]
		public RunnerController()
		{
		}
	}
	[Token(Token = "0x2000199")]
	public class SceneSwitcher : MonoBehaviour
	{
		[Token(Token = "0x40008B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text Text;

		[Token(Token = "0x40008B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Dropdown DropDown;

		[Token(Token = "0x40008B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Dictionary<string, string> scenesAlternativeNames;

		[Token(Token = "0x17000329")]
		private int CurrentLevel
		{
			[Token(Token = "0x6000EE8")]
			[Address(RVA = "0x1BFA158", Offset = "0x1BFA158", VA = "0x1BFA158")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000EE9")]
			[Address(RVA = "0x1BFA1D0", Offset = "0x1BFA1D0", VA = "0x1BFA1D0")]
			set
			{
			}
		}

		[Token(Token = "0x6000EE7")]
		[Address(RVA = "0x1BF9E34", Offset = "0x1BF9E34", VA = "0x1BF9E34")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EEA")]
		[Address(RVA = "0x1BF9F8C", Offset = "0x1BF9F8C", VA = "0x1BF9F8C")]
		private List<string> getScenes()
		{
			return null;
		}

		[Token(Token = "0x6000EEB")]
		[Address(RVA = "0x1BFA254", Offset = "0x1BFA254", VA = "0x1BFA254")]
		private void OnValueChanged(int value)
		{
		}

		[Token(Token = "0x6000EEC")]
		[Address(RVA = "0x1BFA270", Offset = "0x1BFA270", VA = "0x1BFA270")]
		public SceneSwitcher()
		{
		}
	}
	[Token(Token = "0x200019A")]
	public class SmoothFollow : MonoBehaviour
	{
		[Token(Token = "0x40008B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform target;

		[Token(Token = "0x40008B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float distance;

		[Token(Token = "0x40008B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float height;

		[Token(Token = "0x40008B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float rotationDamping;

		[Token(Token = "0x40008B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float heightDamping;

		[Token(Token = "0x6000EED")]
		[Address(RVA = "0x1BFA5F8", Offset = "0x1BFA5F8", VA = "0x1BFA5F8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EEE")]
		[Address(RVA = "0x1BFA5FC", Offset = "0x1BFA5FC", VA = "0x1BFA5FC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000EEF")]
		[Address(RVA = "0x1BFA928", Offset = "0x1BFA928", VA = "0x1BFA928")]
		public SmoothFollow()
		{
		}
	}
	[Token(Token = "0x200019B")]
	public class SplineControllerInputRail : MonoBehaviour
	{
		[Token(Token = "0x40008BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float acceleration;

		[Token(Token = "0x40008BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float limit;

		[Token(Token = "0x40008BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SplineController splineController;

		[Token(Token = "0x6000EF0")]
		[Address(RVA = "0x1BFA93C", Offset = "0x1BFA93C", VA = "0x1BFA93C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EF1")]
		[Address(RVA = "0x1BFAA20", Offset = "0x1BFAA20", VA = "0x1BFAA20")]
		public SplineControllerInputRail()
		{
		}
	}
	[Token(Token = "0x200019C")]
	public class SplineRefMetadata : CurvyMetadataBase
	{
		[Token(Token = "0x40008BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public new CurvySpline Spline;

		[Token(Token = "0x40008BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public CurvySplineSegment CP;

		[Token(Token = "0x40008BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string Options;

		[Token(Token = "0x6000EF2")]
		[Address(RVA = "0x1BFAA34", Offset = "0x1BFAA34", VA = "0x1BFAA34")]
		public SplineRefMetadata()
		{
		}
	}
	[Token(Token = "0x200019D")]
	[ExecuteInEditMode]
	public class TrainCarDrifter : MonoBehaviour
	{
		[Token(Token = "0x40008C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float speed;

		[Token(Token = "0x40008C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float wheelSpacing;

		[Token(Token = "0x40008C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 bodyOffset;

		[Token(Token = "0x40008C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SplineController controllerWheelLeading;

		[Token(Token = "0x40008C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SplineController controllerWheelTrailing;

		[Token(Token = "0x40008C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform trainCar;

		[Token(Token = "0x6000EF3")]
		[Address(RVA = "0x1BFAA3C", Offset = "0x1BFAA3C", VA = "0x1BFAA3C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EF4")]
		[Address(RVA = "0x1BFAA60", Offset = "0x1BFAA60", VA = "0x1BFAA60")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EF5")]
		[Address(RVA = "0x1BFAF50", Offset = "0x1BFAF50", VA = "0x1BFAF50")]
		public TrainCarDrifter()
		{
		}
	}
	[Token(Token = "0x200019E")]
	[ExecuteInEditMode]
	public class TrainCarManager : MonoBehaviour
	{
		[Token(Token = "0x40008C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SplineController Waggon;

		[Token(Token = "0x40008C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SplineController FrontAxis;

		[Token(Token = "0x40008C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SplineController BackAxis;

		[Token(Token = "0x40008C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TrainManager mTrain;

		[Token(Token = "0x1700032A")]
		public float Position
		{
			[Token(Token = "0x6000EF6")]
			[Address(RVA = "0x1BFAFBC", Offset = "0x1BFAFBC", VA = "0x1BFAFBC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000EF7")]
			[Address(RVA = "0x1BFAFD8", Offset = "0x1BFAFD8", VA = "0x1BFAFD8")]
			set
			{
			}
		}

		[Token(Token = "0x6000EF8")]
		[Address(RVA = "0x1BFB08C", Offset = "0x1BFB08C", VA = "0x1BFB08C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000EF9")]
		[Address(RVA = "0x1BFB2F0", Offset = "0x1BFB2F0", VA = "0x1BFB2F0")]
		public void setup()
		{
		}

		[Token(Token = "0x6000EFA")]
		[Address(RVA = "0x1BFB400", Offset = "0x1BFB400", VA = "0x1BFB400")]
		private void setController(SplineController c, CurvySpline spline, float speed)
		{
		}

		[Token(Token = "0x6000EFB")]
		[Address(RVA = "0x1BFB4DC", Offset = "0x1BFB4DC", VA = "0x1BFB4DC")]
		public void OnCPReached(CurvySplineMoveEventArgs e)
		{
		}

		[Token(Token = "0x6000EFC")]
		[Address(RVA = "0x1BFB5A4", Offset = "0x1BFB5A4", VA = "0x1BFB5A4")]
		public TrainCarManager()
		{
		}
	}
	[Token(Token = "0x200019F")]
	[ExecuteInEditMode]
	public class TrainManager : MonoBehaviour
	{
		[Token(Token = "0x40008CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CurvySpline Spline;

		[Token(Token = "0x40008CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float Speed;

		[Token(Token = "0x40008CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float Position;

		[Token(Token = "0x40008CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float CarSize;

		[Token(Token = "0x40008CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float AxisDistance;

		[Token(Token = "0x40008CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float CarGap;

		[Token(Token = "0x40008D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float Limit;

		[Token(Token = "0x40008D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool isSetup;

		[Token(Token = "0x40008D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private TrainCarManager[] Cars;

		[Token(Token = "0x6000EFD")]
		[Address(RVA = "0x1BFB5AC", Offset = "0x1BFB5AC", VA = "0x1BFB5AC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EFE")]
		[Address(RVA = "0x1BFB7CC", Offset = "0x1BFB7CC", VA = "0x1BFB7CC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000EFF")]
		[Address(RVA = "0x1BFB7D4", Offset = "0x1BFB7D4", VA = "0x1BFB7D4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000F00")]
		[Address(RVA = "0x1BFB5B0", Offset = "0x1BFB5B0", VA = "0x1BFB5B0")]
		private void setup()
		{
		}

		[Token(Token = "0x6000F01")]
		[Address(RVA = "0x1BFBA14", Offset = "0x1BFBA14", VA = "0x1BFBA14")]
		public TrainManager()
		{
		}
	}
	[Token(Token = "0x20001A0")]
	public class VolumeControllerInput : MonoBehaviour
	{
		[Token(Token = "0x40008D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float AngularVelocity;

		[Token(Token = "0x40008D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ParticleSystem explosionEmitter;

		[Token(Token = "0x40008D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public VolumeController volumeController;

		[Token(Token = "0x40008D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform rotatedTransform;

		[Token(Token = "0x40008D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float maxSpeed;

		[Token(Token = "0x40008D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float accelerationForward;

		[Token(Token = "0x40008D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float accelerationBackward;

		[Token(Token = "0x40008DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool mGameOver;

		[Token(Token = "0x6000F02")]
		[Address(RVA = "0x1BFBA28", Offset = "0x1BFBA28", VA = "0x1BFBA28")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F03")]
		[Address(RVA = "0x1BFBAD8", Offset = "0x1BFBAD8", VA = "0x1BFBAD8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F04")]
		[Address(RVA = "0x1BFBBA8", Offset = "0x1BFBBA8", VA = "0x1BFBBA8")]
		private void ResetController()
		{
		}

		[Token(Token = "0x6000F05")]
		[Address(RVA = "0x1BFBC00", Offset = "0x1BFBC00", VA = "0x1BFBC00")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F06")]
		[Address(RVA = "0x1BFBEDC", Offset = "0x1BFBEDC", VA = "0x1BFBEDC")]
		public void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000F07")]
		[Address(RVA = "0x1BFBEE0", Offset = "0x1BFBEE0", VA = "0x1BFBEE0")]
		public void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000F08")]
		[Address(RVA = "0x1BFBF7C", Offset = "0x1BFBF7C", VA = "0x1BFBF7C")]
		private void StartOver()
		{
		}

		[Token(Token = "0x6000F09")]
		[Address(RVA = "0x1BFBFA0", Offset = "0x1BFBFA0", VA = "0x1BFBFA0")]
		public VolumeControllerInput()
		{
		}

		[Token(Token = "0x6000F0A")]
		[Address(RVA = "0x1BFBFC8", Offset = "0x1BFBFC8", VA = "0x1BFBFC8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xFD7304", Offset = "0xFD7304")]
		private void <Start>b__9_0(CurvyController arg0)
		{
		}
	}
}
