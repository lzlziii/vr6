using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using AOT;
using Agora.Rtc;
using Agora.Rtc.LitJson;
using Agora.Util;
using ExitGames.Client.Photon;
using LitJson;
using Photon.Pun;
using Photon.Realtime;
using RingBuffer;
using Unity.Collections;
using Unity.XR.PXR;
using UnityEngine;
using UnityEngine.Android;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.InputSystem;
using UnityEngine.Networking;
using UnityEngine.SceneManagement;
using UnityEngine.Serialization;
using UnityEngine.UI;
using UnityEngine.Video;
using UnityEngine.XR;

[assembly: CompilationRelaxations(8)]
[assembly: RuntimeCompatibility(WrapNonExceptionThrows = true)]
[assembly: Debuggable(DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]
[assembly: AssemblyVersion("0.0.0.0")]
[Serializable]
[CreateAssetMenu(menuName = "Agora/AppIdInput", fileName = "AppIdInput", order = 1)]
public class AppIdInput : ScriptableObject
{
	[FormerlySerializedAs("APP_ID")]
	[SerializeField]
	public string appID = "";

	[FormerlySerializedAs("TOKEN")]
	[SerializeField]
	public string token = "";

	[FormerlySerializedAs("CHANNEL_NAME")]
	[SerializeField]
	public string channelName = "YOUR_CHANNEL_NAME";
}
public class Home : MonoBehaviour
{
	public InputField AppIdInupt;

	public InputField ChannelInput;

	public InputField TokenInput;

	public AppIdInput AppInputConfig;

	public GameObject CasePanel;

	public GameObject CaseScrollerView;

	public GameObject EventSystem;

	private string _playSceneName = "";

	private string[] _baseSceneNameList = new string[2] { "BasicAudioCallScene", "BasicVideoCallScene" };

	private string[] _advancedNameList = new string[32]
	{
		"AudioMixingScene", "AudioSpectrumScene", "ChannelMediaRelayScene", "ContentInspectScene", "CustomCaptureAudioScene", "CustomCaptureVideoScene", "CustomRenderAudioScene", "DeviceManagerScene", "DualCameraScene", "JoinChannelVideoTokenScene",
		"JoinChannelWithUserAccountScene", "MediaPlayerScene", "MediaPlayerWithCustomDataProviderScene", "MediaRecorderScene", "MetadataScene", "ProcessAudioRawDataScene", "ProcessVideoRawDataScene", "PushEncodedVideoImageScene", "ScreenShareScene", "ScreenShareWhileVideoCallScene",
		"SetBeautyEffectOptionsScene", "SetEncryptionScene", "SetVideoEncodeConfigurationScene", "StartLocalVideoTranscoderScene", "SpatialAudioWithMediaPlayerScene", "StartDirectCdnStreamingScene", "StartRhythmPlayerScene", "StartRtmpStreamWithTranscodingScene", "StreamMessageScene", "TakeSnapshotScene",
		"VirtualBackgroundScene", "VoiceChangerScene"
	};

	private void Awake()
	{
		PermissionHelper.RequestMicrophontPermission();
		PermissionHelper.RequestCameraPermission();
		GameObject gameObject = GameObject.Find("Content");
		gameObject.GetComponent<RectTransform>();
		for (int i = 0; i < _baseSceneNameList.Length; i++)
		{
			GameObject obj = UnityEngine.Object.Instantiate(CasePanel, gameObject.transform);
			obj.transform.Find("Text").gameObject.GetComponent<Text>().text = _baseSceneNameList[i];
			Button component = obj.transform.Find("Button").gameObject.GetComponent<Button>();
			component.onClick.AddListener(OnJoinSceneClicked);
			component.onClick.AddListener(SetScolllerActive);
		}
		for (int j = 0; j < _advancedNameList.Length; j++)
		{
			GameObject obj2 = UnityEngine.Object.Instantiate(CasePanel, gameObject.transform);
			obj2.transform.Find("Text").gameObject.GetComponent<Text>().text = _advancedNameList[j];
			Button component2 = obj2.transform.Find("Button").gameObject.GetComponent<Button>();
			component2.onClick.AddListener(OnJoinSceneClicked);
			component2.onClick.AddListener(SetScolllerActive);
		}
		if ((bool)AppInputConfig)
		{
			AppIdInupt.text = AppInputConfig.appID;
			ChannelInput.text = AppInputConfig.channelName;
			TokenInput.text = AppInputConfig.token;
		}
	}

	private void Start()
	{
	}

	private void Update()
	{
	}

	private void OnApplicationQuit()
	{
		UnityEngine.Debug.Log("OnApplicationQuit");
	}

	public void OnLeaveButtonClicked()
	{
		StartCoroutine(UnloadSceneAsync());
		CaseScrollerView.SetActive(value: true);
	}

	public IEnumerator UnloadSceneAsync()
	{
		if (_playSceneName != "")
		{
			yield return SceneManager.UnloadSceneAsync(_playSceneName);
			EventSystem.gameObject.SetActive(value: true);
		}
	}

	public void OnJoinSceneClicked()
	{
		AppInputConfig.appID = AppIdInupt.text;
		AppInputConfig.channelName = ChannelInput.text;
		AppInputConfig.token = TokenInput.text;
		string text = UnityEngine.EventSystems.EventSystem.current.currentSelectedGameObject.transform.parent.Find("Text").gameObject.GetComponent<Text>().text;
		EventSystem.gameObject.SetActive(value: false);
		SceneManager.LoadScene(text, LoadSceneMode.Additive);
		_playSceneName = text;
	}

	public void SetScolllerActive()
	{
		CaseScrollerView.SetActive(value: false);
	}
}
[Serializable]
public class TokenObject
{
	public string rtcToken;
}
public class MultiKeyDictionary<T1, T2, T3> : Dictionary<T1, Dictionary<T2, T3>>
{
	public new Dictionary<T2, T3> this[T1 key]
	{
		get
		{
			if (!ContainsKey(key))
			{
				Add(key, new Dictionary<T2, T3>());
			}
			TryGetValue(key, out var value);
			return value;
		}
	}

	public bool ContainsKey(T1 key1, T2 key2)
	{
		TryGetValue(key1, out var value);
		return value?.ContainsKey(key2) ?? false;
	}
}
[Serializable]
public class Images
{
	public Texture2D clearImage;

	public Texture2D collapseImage;

	public Texture2D clearOnNewSceneImage;

	public Texture2D showTimeImage;

	public Texture2D showSceneImage;

	public Texture2D userImage;

	public Texture2D showMemoryImage;

	public Texture2D softwareImage;

	public Texture2D dateImage;

	public Texture2D showFpsImage;

	public Texture2D infoImage;

	public Texture2D saveLogsImage;

	public Texture2D searchImage;

	public Texture2D copyImage;

	public Texture2D closeImage;

	public Texture2D buildFromImage;

	public Texture2D systemInfoImage;

	public Texture2D graphicsInfoImage;

	public Texture2D backImage;

	public Texture2D logImage;

	public Texture2D warningImage;

	public Texture2D errorImage;

	public Texture2D barImage;

	public Texture2D button_activeImage;

	public Texture2D even_logImage;

	public Texture2D odd_logImage;

	public Texture2D selectedImage;

	public GUISkin reporterScrollerSkin;
}
public class Reporter : MonoBehaviour
{
	public enum _LogType
	{
		Assert = 1,
		Error = 0,
		Exception = 4,
		Log = 3,
		Warning = 2
	}

	public class Sample
	{
		public float time;

		public byte loadedScene;

		public float memory;

		public float fps;

		public string fpsText;

		public static float MemSize()
		{
			return 13f;
		}

		public string GetSceneName()
		{
			if (loadedScene == byte.MaxValue)
			{
				return "AssetBundleScene";
			}
			return scenes[loadedScene];
		}
	}

	public class Log
	{
		public int count = 1;

		public _LogType logType;

		public string condition;

		public string stacktrace;

		public int sampleId;

		public Log CreateCopy()
		{
			return (Log)MemberwiseClone();
		}

		public float GetMemoryUsage()
		{
			return 8 + condition.Length * 2 + stacktrace.Length * 2 + 4;
		}
	}

	private enum ReportView
	{
		None,
		Logs,
		Info,
		Snapshot
	}

	private enum DetailView
	{
		None,
		StackTrace,
		Graph
	}

	private List<Sample> samples = new List<Sample>();

	private List<Log> logs = new List<Log>();

	private List<Log> collapsedLogs = new List<Log>();

	private List<Log> currentLog = new List<Log>();

	private MultiKeyDictionary<string, string, Log> logsDic = new MultiKeyDictionary<string, string, Log>();

	private Dictionary<string, string> cachedString = new Dictionary<string, string>();

	[HideInInspector]
	public bool show;

	private bool collapse;

	private bool clearOnNewSceneLoaded;

	private bool showTime;

	private bool showScene;

	private bool showMemory;

	private bool showFps;

	private bool showGraph;

	private bool showLog = true;

	private bool showWarning = true;

	private bool showError = true;

	private int numOfLogs;

	private int numOfLogsWarning;

	private int numOfLogsError;

	private int numOfCollapsedLogs;

	private int numOfCollapsedLogsWarning;

	private int numOfCollapsedLogsError;

	private bool showClearOnNewSceneLoadedButton = true;

	private bool showTimeButton = true;

	private bool showSceneButton = true;

	private bool showMemButton = true;

	private bool showFpsButton = true;

	private bool showSearchText = true;

	private bool showCopyButton = true;

	private bool showSaveButton = true;

	private string buildDate;

	private string logDate;

	private float logsMemUsage;

	private float graphMemUsage;

	private float gcTotalMemory;

	public string UserData = "";

	public float fps;

	public string fpsText;

	private ReportView currentView = ReportView.Logs;

	private static bool created;

	public Images images;

	private GUIContent clearContent;

	private GUIContent collapseContent;

	private GUIContent clearOnNewSceneContent;

	private GUIContent showTimeContent;

	private GUIContent showSceneContent;

	private GUIContent userContent;

	private GUIContent showMemoryContent;

	private GUIContent softwareContent;

	private GUIContent dateContent;

	private GUIContent showFpsContent;

	private GUIContent infoContent;

	private GUIContent saveLogsContent;

	private GUIContent searchContent;

	private GUIContent copyContent;

	private GUIContent closeContent;

	private GUIContent buildFromContent;

	private GUIContent systemInfoContent;

	private GUIContent graphicsInfoContent;

	private GUIContent backContent;

	private GUIContent logContent;

	private GUIContent warningContent;

	private GUIContent errorContent;

	private GUIStyle barStyle;

	private GUIStyle buttonActiveStyle;

	private GUIStyle nonStyle;

	private GUIStyle lowerLeftFontStyle;

	private GUIStyle backStyle;

	private GUIStyle evenLogStyle;

	private GUIStyle oddLogStyle;

	private GUIStyle logButtonStyle;

	private GUIStyle selectedLogStyle;

	private GUIStyle selectedLogFontStyle;

	private GUIStyle stackLabelStyle;

	private GUIStyle scrollerStyle;

	private GUIStyle searchStyle;

	private GUIStyle sliderBackStyle;

	private GUIStyle sliderThumbStyle;

	private GUISkin toolbarScrollerSkin;

	private GUISkin logScrollerSkin;

	private GUISkin graphScrollerSkin;

	public Vector2 size = new Vector2(32f, 32f);

	public float maxSize = 20f;

	public int numOfCircleToShow = 1;

	private static string[] scenes;

	private string currentScene;

	private string filterText = "";

	private string deviceModel;

	private string deviceType;

	private string deviceName;

	private string graphicsMemorySize;

	private string maxTextureSize;

	private string systemMemorySize;

	public bool Initialized;

	private Rect screenRect = Rect.zero;

	private Rect toolBarRect = Rect.zero;

	private Rect logsRect = Rect.zero;

	private Rect stackRect = Rect.zero;

	private Rect graphRect = Rect.zero;

	private Rect graphMinRect = Rect.zero;

	private Rect graphMaxRect = Rect.zero;

	private Rect buttomRect = Rect.zero;

	private Vector2 stackRectTopLeft;

	private Rect detailRect = Rect.zero;

	private Vector2 scrollPosition;

	private Vector2 scrollPosition2;

	private Vector2 toolbarScrollPosition;

	private Log selectedLog;

	private float toolbarOldDrag;

	private float oldDrag;

	private float oldDrag2;

	private float oldDrag3;

	private int startIndex;

	private Rect countRect = Rect.zero;

	private Rect timeRect = Rect.zero;

	private Rect timeLabelRect = Rect.zero;

	private Rect sceneRect = Rect.zero;

	private Rect sceneLabelRect = Rect.zero;

	private Rect memoryRect = Rect.zero;

	private Rect memoryLabelRect = Rect.zero;

	private Rect fpsRect = Rect.zero;

	private Rect fpsLabelRect = Rect.zero;

	private GUIContent tempContent = new GUIContent();

	private Vector2 infoScrollPosition;

	private Vector2 oldInfoDrag;

	private Rect tempRect;

	private float graphSize = 4f;

	private int startFrame;

	private int currentFrame;

	private Vector3 tempVector1;

	private Vector3 tempVector2;

	private Vector2 graphScrollerPos;

	private float maxFpsValue;

	private float minFpsValue;

	private float maxMemoryValue;

	private float minMemoryValue;

	private List<Vector2> gestureDetector = new List<Vector2>();

	private Vector2 gestureSum = Vector2.zero;

	private float gestureLength;

	private int gestureCount;

	private float lastClickTime = -1f;

	private Vector2 startPos;

	private Vector2 downPos;

	private Vector2 mousePosition;

	private int frames;

	private bool firstTime = true;

	private float lastUpdate;

	private const int requiredFrames = 10;

	private const float updateInterval = 0.25f;

	private List<Log> threadedLogs = new List<Log>();

	public float TotalMemUsage => logsMemUsage + graphMemUsage;

	private void Awake()
	{
		if (!Initialized)
		{
			Initialize();
		}
		SceneManager.sceneLoaded += _OnLevelWasLoaded;
	}

	private void OnDestroy()
	{
		SceneManager.sceneLoaded -= _OnLevelWasLoaded;
	}

	private void OnEnable()
	{
		if (logs.Count == 0)
		{
			clear();
		}
	}

	private void OnDisable()
	{
	}

	private void addSample()
	{
		Sample sample = new Sample();
		sample.fps = fps;
		sample.fpsText = fpsText;
		sample.loadedScene = (byte)SceneManager.GetActiveScene().buildIndex;
		sample.time = Time.realtimeSinceStartup;
		sample.memory = gcTotalMemory;
		samples.Add(sample);
		graphMemUsage = (float)samples.Count * Sample.MemSize() / 1024f / 1024f;
	}

	public void Initialize()
	{
		if (!created)
		{
			try
			{
				base.gameObject.SendMessage("OnPreStart");
			}
			catch (Exception exception)
			{
				UnityEngine.Debug.LogException(exception);
			}
			scenes = new string[SceneManager.sceneCountInBuildSettings];
			currentScene = SceneManager.GetActiveScene().name;
			UnityEngine.Object.DontDestroyOnLoad(base.gameObject);
			Application.logMessageReceivedThreaded += CaptureLogThread;
			created = true;
			clearContent = new GUIContent("", images.clearImage, "Clear logs");
			collapseContent = new GUIContent("", images.collapseImage, "Collapse logs");
			clearOnNewSceneContent = new GUIContent("", images.clearOnNewSceneImage, "Clear logs on new scene loaded");
			showTimeContent = new GUIContent("", images.showTimeImage, "Show Hide Time");
			showSceneContent = new GUIContent("", images.showSceneImage, "Show Hide Scene");
			showMemoryContent = new GUIContent("", images.showMemoryImage, "Show Hide Memory");
			softwareContent = new GUIContent("", images.softwareImage, "Software");
			dateContent = new GUIContent("", images.dateImage, "Date");
			showFpsContent = new GUIContent("", images.showFpsImage, "Show Hide fps");
			infoContent = new GUIContent("", images.infoImage, "Information about application");
			saveLogsContent = new GUIContent("", images.saveLogsImage, "Save logs to device");
			searchContent = new GUIContent("", images.searchImage, "Search for logs");
			copyContent = new GUIContent("", images.copyImage, "Copy log to clipboard");
			closeContent = new GUIContent("", images.closeImage, "Hide logs");
			userContent = new GUIContent("", images.userImage, "User");
			buildFromContent = new GUIContent("", images.buildFromImage, "Build From");
			systemInfoContent = new GUIContent("", images.systemInfoImage, "System Info");
			graphicsInfoContent = new GUIContent("", images.graphicsInfoImage, "Graphics Info");
			backContent = new GUIContent("", images.backImage, "Back");
			logContent = new GUIContent("", images.logImage, "show or hide logs");
			warningContent = new GUIContent("", images.warningImage, "show or hide warnings");
			errorContent = new GUIContent("", images.errorImage, "show or hide errors");
			currentView = (ReportView)PlayerPrefs.GetInt("Reporter_currentView", 1);
			show = PlayerPrefs.GetInt("Reporter_show") == 1;
			collapse = PlayerPrefs.GetInt("Reporter_collapse") == 1;
			clearOnNewSceneLoaded = PlayerPrefs.GetInt("Reporter_clearOnNewSceneLoaded") == 1;
			showTime = PlayerPrefs.GetInt("Reporter_showTime") == 1;
			showScene = PlayerPrefs.GetInt("Reporter_showScene") == 1;
			showMemory = PlayerPrefs.GetInt("Reporter_showMemory") == 1;
			showFps = PlayerPrefs.GetInt("Reporter_showFps") == 1;
			showGraph = PlayerPrefs.GetInt("Reporter_showGraph") == 1;
			showLog = PlayerPrefs.GetInt("Reporter_showLog", 1) == 1;
			showWarning = PlayerPrefs.GetInt("Reporter_showWarning", 1) == 1;
			showError = PlayerPrefs.GetInt("Reporter_showError", 1) == 1;
			filterText = PlayerPrefs.GetString("Reporter_filterText");
			size.x = (size.y = PlayerPrefs.GetFloat("Reporter_size", 32f));
			showClearOnNewSceneLoadedButton = PlayerPrefs.GetInt("Reporter_showClearOnNewSceneLoadedButton", 1) == 1;
			showTimeButton = PlayerPrefs.GetInt("Reporter_showTimeButton", 1) == 1;
			showSceneButton = PlayerPrefs.GetInt("Reporter_showSceneButton", 1) == 1;
			showMemButton = PlayerPrefs.GetInt("Reporter_showMemButton", 1) == 1;
			showFpsButton = PlayerPrefs.GetInt("Reporter_showFpsButton", 1) == 1;
			showSearchText = PlayerPrefs.GetInt("Reporter_showSearchText", 1) == 1;
			showCopyButton = PlayerPrefs.GetInt("Reporter_showCopyButton", 1) == 1;
			showSaveButton = PlayerPrefs.GetInt("Reporter_showSaveButton", 1) == 1;
			initializeStyle();
			Initialized = true;
			if (show)
			{
				doShow();
			}
			deviceModel = SystemInfo.deviceModel.ToString();
			deviceType = SystemInfo.deviceType.ToString();
			deviceName = SystemInfo.deviceName.ToString();
			graphicsMemorySize = SystemInfo.graphicsMemorySize.ToString();
			maxTextureSize = SystemInfo.maxTextureSize.ToString();
			systemMemorySize = SystemInfo.systemMemorySize.ToString();
		}
		else
		{
			UnityEngine.Debug.LogWarning("tow manager is exists delete the second");
			UnityEngine.Object.DestroyImmediate(base.gameObject, allowDestroyingAssets: true);
		}
	}

	private void initializeStyle()
	{
		int num = (int)(size.x * 0.2f);
		int num2 = (int)(size.y * 0.2f);
		nonStyle = new GUIStyle();
		nonStyle.clipping = TextClipping.Clip;
		nonStyle.border = new RectOffset(0, 0, 0, 0);
		nonStyle.normal.background = null;
		nonStyle.fontSize = (int)(size.y / 2f);
		nonStyle.alignment = TextAnchor.MiddleCenter;
		lowerLeftFontStyle = new GUIStyle();
		lowerLeftFontStyle.clipping = TextClipping.Clip;
		lowerLeftFontStyle.border = new RectOffset(0, 0, 0, 0);
		lowerLeftFontStyle.normal.background = null;
		lowerLeftFontStyle.fontSize = (int)(size.y / 2f);
		lowerLeftFontStyle.fontStyle = FontStyle.Bold;
		lowerLeftFontStyle.alignment = TextAnchor.LowerLeft;
		barStyle = new GUIStyle();
		barStyle.border = new RectOffset(1, 1, 1, 1);
		barStyle.normal.background = images.barImage;
		barStyle.active.background = images.button_activeImage;
		barStyle.alignment = TextAnchor.MiddleCenter;
		barStyle.margin = new RectOffset(1, 1, 1, 1);
		barStyle.clipping = TextClipping.Clip;
		barStyle.fontSize = (int)(size.y / 2f);
		buttonActiveStyle = new GUIStyle();
		buttonActiveStyle.border = new RectOffset(1, 1, 1, 1);
		buttonActiveStyle.normal.background = images.button_activeImage;
		buttonActiveStyle.alignment = TextAnchor.MiddleCenter;
		buttonActiveStyle.margin = new RectOffset(1, 1, 1, 1);
		buttonActiveStyle.fontSize = (int)(size.y / 2f);
		backStyle = new GUIStyle();
		backStyle.normal.background = images.even_logImage;
		backStyle.clipping = TextClipping.Clip;
		backStyle.fontSize = (int)(size.y / 2f);
		evenLogStyle = new GUIStyle();
		evenLogStyle.normal.background = images.even_logImage;
		evenLogStyle.fixedHeight = size.y;
		evenLogStyle.clipping = TextClipping.Clip;
		evenLogStyle.alignment = TextAnchor.UpperLeft;
		evenLogStyle.imagePosition = ImagePosition.ImageLeft;
		evenLogStyle.fontSize = (int)(size.y / 2f);
		oddLogStyle = new GUIStyle();
		oddLogStyle.normal.background = images.odd_logImage;
		oddLogStyle.fixedHeight = size.y;
		oddLogStyle.clipping = TextClipping.Clip;
		oddLogStyle.alignment = TextAnchor.UpperLeft;
		oddLogStyle.imagePosition = ImagePosition.ImageLeft;
		oddLogStyle.fontSize = (int)(size.y / 2f);
		logButtonStyle = new GUIStyle();
		logButtonStyle.fixedHeight = size.y;
		logButtonStyle.clipping = TextClipping.Clip;
		logButtonStyle.alignment = TextAnchor.UpperLeft;
		logButtonStyle.fontSize = (int)(size.y / 2f);
		logButtonStyle.padding = new RectOffset(num, num, num2, num2);
		selectedLogStyle = new GUIStyle();
		selectedLogStyle.normal.background = images.selectedImage;
		selectedLogStyle.fixedHeight = size.y;
		selectedLogStyle.clipping = TextClipping.Clip;
		selectedLogStyle.alignment = TextAnchor.UpperLeft;
		selectedLogStyle.normal.textColor = Color.white;
		selectedLogStyle.fontSize = (int)(size.y / 2f);
		selectedLogFontStyle = new GUIStyle();
		selectedLogFontStyle.normal.background = images.selectedImage;
		selectedLogFontStyle.fixedHeight = size.y;
		selectedLogFontStyle.clipping = TextClipping.Clip;
		selectedLogFontStyle.alignment = TextAnchor.UpperLeft;
		selectedLogFontStyle.normal.textColor = Color.white;
		selectedLogFontStyle.fontSize = (int)(size.y / 2f);
		selectedLogFontStyle.padding = new RectOffset(num, num, num2, num2);
		stackLabelStyle = new GUIStyle();
		stackLabelStyle.wordWrap = true;
		stackLabelStyle.fontSize = (int)(size.y / 2f);
		stackLabelStyle.padding = new RectOffset(num, num, num2, num2);
		scrollerStyle = new GUIStyle();
		scrollerStyle.normal.background = images.barImage;
		searchStyle = new GUIStyle();
		searchStyle.clipping = TextClipping.Clip;
		searchStyle.alignment = TextAnchor.LowerCenter;
		searchStyle.fontSize = (int)(size.y / 2f);
		searchStyle.wordWrap = true;
		sliderBackStyle = new GUIStyle();
		sliderBackStyle.normal.background = images.barImage;
		sliderBackStyle.fixedHeight = size.y;
		sliderBackStyle.border = new RectOffset(1, 1, 1, 1);
		sliderThumbStyle = new GUIStyle();
		sliderThumbStyle.normal.background = images.selectedImage;
		sliderThumbStyle.fixedWidth = size.x;
		GUISkin reporterScrollerSkin = images.reporterScrollerSkin;
		toolbarScrollerSkin = UnityEngine.Object.Instantiate(reporterScrollerSkin);
		toolbarScrollerSkin.verticalScrollbar.fixedWidth = 0f;
		toolbarScrollerSkin.horizontalScrollbar.fixedHeight = 0f;
		toolbarScrollerSkin.verticalScrollbarThumb.fixedWidth = 0f;
		toolbarScrollerSkin.horizontalScrollbarThumb.fixedHeight = 0f;
		logScrollerSkin = UnityEngine.Object.Instantiate(reporterScrollerSkin);
		logScrollerSkin.verticalScrollbar.fixedWidth = size.x * 2f;
		logScrollerSkin.horizontalScrollbar.fixedHeight = 0f;
		logScrollerSkin.verticalScrollbarThumb.fixedWidth = size.x * 2f;
		logScrollerSkin.horizontalScrollbarThumb.fixedHeight = 0f;
		graphScrollerSkin = UnityEngine.Object.Instantiate(reporterScrollerSkin);
		graphScrollerSkin.verticalScrollbar.fixedWidth = 0f;
		graphScrollerSkin.horizontalScrollbar.fixedHeight = size.x * 2f;
		graphScrollerSkin.verticalScrollbarThumb.fixedWidth = 0f;
		graphScrollerSkin.horizontalScrollbarThumb.fixedHeight = size.x * 2f;
	}

	private void Start()
	{
		logDate = DateTime.Now.ToString();
		StartCoroutine("readInfo");
	}

	private void clear()
	{
		logs.Clear();
		collapsedLogs.Clear();
		currentLog.Clear();
		logsDic.Clear();
		selectedLog = null;
		numOfLogs = 0;
		numOfLogsWarning = 0;
		numOfLogsError = 0;
		numOfCollapsedLogs = 0;
		numOfCollapsedLogsWarning = 0;
		numOfCollapsedLogsError = 0;
		logsMemUsage = 0f;
		graphMemUsage = 0f;
		samples.Clear();
		GC.Collect();
		selectedLog = null;
	}

	private void calculateCurrentLog()
	{
		bool flag = !string.IsNullOrEmpty(filterText);
		string value = "";
		if (flag)
		{
			value = filterText.ToLower();
		}
		currentLog.Clear();
		if (collapse)
		{
			for (int i = 0; i < collapsedLogs.Count; i++)
			{
				Log log = collapsedLogs[i];
				if ((log.logType == _LogType.Log && !showLog) || (log.logType == _LogType.Warning && !showWarning) || (log.logType == _LogType.Error && !showError) || (log.logType == _LogType.Assert && !showError) || (log.logType == _LogType.Exception && !showError))
				{
					continue;
				}
				if (flag)
				{
					if (log.condition.ToLower().Contains(value))
					{
						currentLog.Add(log);
					}
				}
				else
				{
					currentLog.Add(log);
				}
			}
		}
		else
		{
			for (int j = 0; j < logs.Count; j++)
			{
				Log log2 = logs[j];
				if ((log2.logType == _LogType.Log && !showLog) || (log2.logType == _LogType.Warning && !showWarning) || (log2.logType == _LogType.Error && !showError) || (log2.logType == _LogType.Assert && !showError) || (log2.logType == _LogType.Exception && !showError))
				{
					continue;
				}
				if (flag)
				{
					if (log2.condition.ToLower().Contains(value))
					{
						currentLog.Add(log2);
					}
				}
				else
				{
					currentLog.Add(log2);
				}
			}
		}
		if (selectedLog == null)
		{
			return;
		}
		int num = currentLog.IndexOf(selectedLog);
		if (num == -1)
		{
			Log item = logsDic[selectedLog.condition][selectedLog.stacktrace];
			num = currentLog.IndexOf(item);
			if (num != -1)
			{
				scrollPosition.y = (float)num * size.y;
			}
		}
		else
		{
			scrollPosition.y = (float)num * size.y;
		}
	}

	private void DrawInfo()
	{
		GUILayout.BeginArea(screenRect, backStyle);
		Vector2 drag = getDrag();
		if (drag.x != 0f && downPos != Vector2.zero)
		{
			infoScrollPosition.x -= drag.x - oldInfoDrag.x;
		}
		if (drag.y != 0f && downPos != Vector2.zero)
		{
			infoScrollPosition.y += drag.y - oldInfoDrag.y;
		}
		oldInfoDrag = drag;
		GUI.skin = toolbarScrollerSkin;
		infoScrollPosition = GUILayout.BeginScrollView(infoScrollPosition);
		GUILayout.Space(size.x);
		GUILayout.BeginHorizontal();
		GUILayout.Space(size.x);
		GUILayout.Box(buildFromContent, nonStyle, GUILayout.Width(size.x), GUILayout.Height(size.y));
		GUILayout.Space(size.x);
		GUILayout.Label(buildDate, nonStyle, GUILayout.Height(size.y));
		GUILayout.FlexibleSpace();
		GUILayout.EndHorizontal();
		GUILayout.BeginHorizontal();
		GUILayout.Space(size.x);
		GUILayout.Box(systemInfoContent, nonStyle, GUILayout.Width(size.x), GUILayout.Height(size.y));
		GUILayout.Space(size.x);
		GUILayout.Label(deviceModel, nonStyle, GUILayout.Height(size.y));
		GUILayout.Space(size.x);
		GUILayout.Label(deviceType, nonStyle, GUILayout.Height(size.y));
		GUILayout.Space(size.x);
		GUILayout.Label(deviceName, nonStyle, GUILayout.Height(size.y));
		GUILayout.FlexibleSpace();
		GUILayout.EndHorizontal();
		GUILayout.BeginHorizontal();
		GUILayout.Space(size.x);
		GUILayout.Box(graphicsInfoContent, nonStyle, GUILayout.Width(size.x), GUILayout.Height(size.y));
		GUILayout.Space(size.x);
		GUILayout.Label(SystemInfo.graphicsDeviceName, nonStyle, GUILayout.Height(size.y));
		GUILayout.Space(size.x);
		GUILayout.Label(graphicsMemorySize, nonStyle, GUILayout.Height(size.y));
		GUILayout.Space(size.x);
		GUILayout.Label(maxTextureSize, nonStyle, GUILayout.Height(size.y));
		GUILayout.FlexibleSpace();
		GUILayout.EndHorizontal();
		GUILayout.BeginHorizontal();
		GUILayout.Space(size.x);
		GUILayout.Space(size.x);
		GUILayout.Space(size.x);
		GUILayout.Label("Screen Width " + Screen.width, nonStyle, GUILayout.Height(size.y));
		GUILayout.Space(size.x);
		GUILayout.Label("Screen Height " + Screen.height, nonStyle, GUILayout.Height(size.y));
		GUILayout.FlexibleSpace();
		GUILayout.EndHorizontal();
		GUILayout.BeginHorizontal();
		GUILayout.Space(size.x);
		GUILayout.Box(showMemoryContent, nonStyle, GUILayout.Width(size.x), GUILayout.Height(size.y));
		GUILayout.Space(size.x);
		GUILayout.Label(systemMemorySize + " mb", nonStyle, GUILayout.Height(size.y));
		GUILayout.FlexibleSpace();
		GUILayout.EndHorizontal();
		GUILayout.BeginHorizontal();
		GUILayout.Space(size.x);
		GUILayout.Space(size.x);
		GUILayout.Space(size.x);
		GUILayout.Label("Mem Usage Of Logs " + logsMemUsage.ToString("0.000") + " mb", nonStyle, GUILayout.Height(size.y));
		GUILayout.Space(size.x);
		GUILayout.Label("GC Memory " + gcTotalMemory.ToString("0.000") + " mb", nonStyle, GUILayout.Height(size.y));
		GUILayout.FlexibleSpace();
		GUILayout.EndHorizontal();
		GUILayout.BeginHorizontal();
		GUILayout.Space(size.x);
		GUILayout.Box(softwareContent, nonStyle, GUILayout.Width(size.x), GUILayout.Height(size.y));
		GUILayout.Space(size.x);
		GUILayout.Label(SystemInfo.operatingSystem, nonStyle, GUILayout.Height(size.y));
		GUILayout.FlexibleSpace();
		GUILayout.EndHorizontal();
		GUILayout.BeginHorizontal();
		GUILayout.Space(size.x);
		GUILayout.Box(dateContent, nonStyle, GUILayout.Width(size.x), GUILayout.Height(size.y));
		GUILayout.Space(size.x);
		GUILayout.Label(DateTime.Now.ToString(), nonStyle, GUILayout.Height(size.y));
		GUILayout.Label(" - Application Started At " + logDate, nonStyle, GUILayout.Height(size.y));
		GUILayout.FlexibleSpace();
		GUILayout.EndHorizontal();
		GUILayout.BeginHorizontal();
		GUILayout.Space(size.x);
		GUILayout.Box(showTimeContent, nonStyle, GUILayout.Width(size.x), GUILayout.Height(size.y));
		GUILayout.Space(size.x);
		GUILayout.Label(Time.realtimeSinceStartup.ToString("000"), nonStyle, GUILayout.Height(size.y));
		GUILayout.FlexibleSpace();
		GUILayout.EndHorizontal();
		GUILayout.BeginHorizontal();
		GUILayout.Space(size.x);
		GUILayout.Box(showFpsContent, nonStyle, GUILayout.Width(size.x), GUILayout.Height(size.y));
		GUILayout.Space(size.x);
		GUILayout.Label(fpsText, nonStyle, GUILayout.Height(size.y));
		GUILayout.FlexibleSpace();
		GUILayout.EndHorizontal();
		GUILayout.BeginHorizontal();
		GUILayout.Space(size.x);
		GUILayout.Box(userContent, nonStyle, GUILayout.Width(size.x), GUILayout.Height(size.y));
		GUILayout.Space(size.x);
		GUILayout.Label(UserData, nonStyle, GUILayout.Height(size.y));
		GUILayout.FlexibleSpace();
		GUILayout.EndHorizontal();
		GUILayout.BeginHorizontal();
		GUILayout.Space(size.x);
		GUILayout.Box(showSceneContent, nonStyle, GUILayout.Width(size.x), GUILayout.Height(size.y));
		GUILayout.Space(size.x);
		GUILayout.Label(currentScene, nonStyle, GUILayout.Height(size.y));
		GUILayout.FlexibleSpace();
		GUILayout.EndHorizontal();
		GUILayout.BeginHorizontal();
		GUILayout.Space(size.x);
		GUILayout.Box(showSceneContent, nonStyle, GUILayout.Width(size.x), GUILayout.Height(size.y));
		GUILayout.Space(size.x);
		GUILayout.Label("Unity Version = " + Application.unityVersion, nonStyle, GUILayout.Height(size.y));
		GUILayout.FlexibleSpace();
		GUILayout.EndHorizontal();
		drawInfo_enableDisableToolBarButtons();
		GUILayout.FlexibleSpace();
		GUILayout.BeginHorizontal();
		GUILayout.Space(size.x);
		GUILayout.Label("Size = " + size.x.ToString("0.0"), nonStyle, GUILayout.Height(size.y));
		GUILayout.Space(size.x);
		float num = GUILayout.HorizontalSlider(size.x, 16f, 64f, sliderBackStyle, sliderThumbStyle, GUILayout.Width((float)Screen.width * 0.5f));
		if (size.x != num)
		{
			size.x = (size.y = num);
			initializeStyle();
		}
		GUILayout.FlexibleSpace();
		GUILayout.EndHorizontal();
		GUILayout.BeginHorizontal();
		GUILayout.Space(size.x);
		if (GUILayout.Button(backContent, barStyle, GUILayout.Width(size.x * 2f), GUILayout.Height(size.y * 2f)))
		{
			currentView = ReportView.Logs;
		}
		GUILayout.FlexibleSpace();
		GUILayout.EndHorizontal();
		GUILayout.EndScrollView();
		GUILayout.EndArea();
	}

	private void drawInfo_enableDisableToolBarButtons()
	{
		GUILayout.BeginHorizontal();
		GUILayout.Space(size.x);
		GUILayout.Label("Hide or Show tool bar buttons", nonStyle, GUILayout.Height(size.y));
		GUILayout.Space(size.x);
		GUILayout.FlexibleSpace();
		GUILayout.EndHorizontal();
		GUILayout.BeginHorizontal();
		GUILayout.Space(size.x);
		if (GUILayout.Button(clearOnNewSceneContent, showClearOnNewSceneLoadedButton ? buttonActiveStyle : barStyle, GUILayout.Width(size.x * 2f), GUILayout.Height(size.y * 2f)))
		{
			showClearOnNewSceneLoadedButton = !showClearOnNewSceneLoadedButton;
		}
		if (GUILayout.Button(showTimeContent, showTimeButton ? buttonActiveStyle : barStyle, GUILayout.Width(size.x * 2f), GUILayout.Height(size.y * 2f)))
		{
			showTimeButton = !showTimeButton;
		}
		tempRect = GUILayoutUtility.GetLastRect();
		GUI.Label(tempRect, Time.realtimeSinceStartup.ToString("0.0"), lowerLeftFontStyle);
		if (GUILayout.Button(showSceneContent, showSceneButton ? buttonActiveStyle : barStyle, GUILayout.Width(size.x * 2f), GUILayout.Height(size.y * 2f)))
		{
			showSceneButton = !showSceneButton;
		}
		tempRect = GUILayoutUtility.GetLastRect();
		GUI.Label(tempRect, currentScene, lowerLeftFontStyle);
		if (GUILayout.Button(showMemoryContent, showMemButton ? buttonActiveStyle : barStyle, GUILayout.Width(size.x * 2f), GUILayout.Height(size.y * 2f)))
		{
			showMemButton = !showMemButton;
		}
		tempRect = GUILayoutUtility.GetLastRect();
		GUI.Label(tempRect, gcTotalMemory.ToString("0.0"), lowerLeftFontStyle);
		if (GUILayout.Button(showFpsContent, showFpsButton ? buttonActiveStyle : barStyle, GUILayout.Width(size.x * 2f), GUILayout.Height(size.y * 2f)))
		{
			showFpsButton = !showFpsButton;
		}
		tempRect = GUILayoutUtility.GetLastRect();
		GUI.Label(tempRect, fpsText, lowerLeftFontStyle);
		if (GUILayout.Button(searchContent, showSearchText ? buttonActiveStyle : barStyle, GUILayout.Width(size.x * 2f), GUILayout.Height(size.y * 2f)))
		{
			showSearchText = !showSearchText;
		}
		if (GUILayout.Button(copyContent, showCopyButton ? buttonActiveStyle : barStyle, GUILayout.Width(size.x * 2f), GUILayout.Height(size.y * 2f)))
		{
			showCopyButton = !showCopyButton;
		}
		if (GUILayout.Button(saveLogsContent, showSaveButton ? buttonActiveStyle : barStyle, GUILayout.Width(size.x * 2f), GUILayout.Height(size.y * 2f)))
		{
			showSaveButton = !showSaveButton;
		}
		tempRect = GUILayoutUtility.GetLastRect();
		GUI.TextField(tempRect, filterText, searchStyle);
		GUILayout.FlexibleSpace();
		GUILayout.EndHorizontal();
	}

	private void DrawReport()
	{
		screenRect.x = 0f;
		screenRect.y = 0f;
		screenRect.width = Screen.width;
		screenRect.height = Screen.height;
		GUILayout.BeginArea(screenRect, backStyle);
		GUILayout.BeginVertical();
		GUILayout.FlexibleSpace();
		GUILayout.BeginHorizontal();
		GUILayout.FlexibleSpace();
		GUILayout.Label("Select Photo", nonStyle, GUILayout.Height(size.y));
		GUILayout.FlexibleSpace();
		GUILayout.EndHorizontal();
		GUILayout.BeginHorizontal();
		GUILayout.Label("Coming Soon", nonStyle, GUILayout.Height(size.y));
		GUILayout.EndHorizontal();
		GUILayout.BeginHorizontal();
		GUILayout.FlexibleSpace();
		if (GUILayout.Button(backContent, barStyle, GUILayout.Width(size.x), GUILayout.Height(size.y)))
		{
			currentView = ReportView.Logs;
		}
		GUILayout.FlexibleSpace();
		GUILayout.EndHorizontal();
		GUILayout.FlexibleSpace();
		GUILayout.EndVertical();
		GUILayout.EndArea();
	}

	private void drawToolBar()
	{
		toolBarRect.x = 0f;
		toolBarRect.y = 0f;
		toolBarRect.width = Screen.width;
		toolBarRect.height = size.y * 2f;
		GUI.skin = toolbarScrollerSkin;
		Vector2 drag = getDrag();
		if (drag.x != 0f && downPos != Vector2.zero && downPos.y > (float)Screen.height - size.y * 2f)
		{
			toolbarScrollPosition.x -= drag.x - toolbarOldDrag;
		}
		toolbarOldDrag = drag.x;
		GUILayout.BeginArea(toolBarRect);
		toolbarScrollPosition = GUILayout.BeginScrollView(toolbarScrollPosition);
		GUILayout.BeginHorizontal(barStyle);
		if (GUILayout.Button(clearContent, barStyle, GUILayout.Width(size.x * 2f), GUILayout.Height(size.y * 2f)))
		{
			clear();
		}
		if (GUILayout.Button(collapseContent, collapse ? buttonActiveStyle : barStyle, GUILayout.Width(size.x * 2f), GUILayout.Height(size.y * 2f)))
		{
			collapse = !collapse;
			calculateCurrentLog();
		}
		if (showClearOnNewSceneLoadedButton && GUILayout.Button(clearOnNewSceneContent, clearOnNewSceneLoaded ? buttonActiveStyle : barStyle, GUILayout.Width(size.x * 2f), GUILayout.Height(size.y * 2f)))
		{
			clearOnNewSceneLoaded = !clearOnNewSceneLoaded;
		}
		if (showTimeButton && GUILayout.Button(showTimeContent, showTime ? buttonActiveStyle : barStyle, GUILayout.Width(size.x * 2f), GUILayout.Height(size.y * 2f)))
		{
			showTime = !showTime;
		}
		if (showSceneButton)
		{
			tempRect = GUILayoutUtility.GetLastRect();
			GUI.Label(tempRect, Time.realtimeSinceStartup.ToString("0.0"), lowerLeftFontStyle);
			if (GUILayout.Button(showSceneContent, showScene ? buttonActiveStyle : barStyle, GUILayout.Width(size.x * 2f), GUILayout.Height(size.y * 2f)))
			{
				showScene = !showScene;
			}
			tempRect = GUILayoutUtility.GetLastRect();
			GUI.Label(tempRect, currentScene, lowerLeftFontStyle);
		}
		if (showMemButton)
		{
			if (GUILayout.Button(showMemoryContent, showMemory ? buttonActiveStyle : barStyle, GUILayout.Width(size.x * 2f), GUILayout.Height(size.y * 2f)))
			{
				showMemory = !showMemory;
			}
			tempRect = GUILayoutUtility.GetLastRect();
			GUI.Label(tempRect, gcTotalMemory.ToString("0.0"), lowerLeftFontStyle);
		}
		if (showFpsButton)
		{
			if (GUILayout.Button(showFpsContent, showFps ? buttonActiveStyle : barStyle, GUILayout.Width(size.x * 2f), GUILayout.Height(size.y * 2f)))
			{
				showFps = !showFps;
			}
			tempRect = GUILayoutUtility.GetLastRect();
			GUI.Label(tempRect, fpsText, lowerLeftFontStyle);
		}
		if (showSearchText)
		{
			GUILayout.Box(searchContent, barStyle, GUILayout.Width(size.x * 2f), GUILayout.Height(size.y * 2f));
			tempRect = GUILayoutUtility.GetLastRect();
			string text = GUI.TextField(tempRect, filterText, searchStyle);
			if (text != filterText)
			{
				filterText = text;
				calculateCurrentLog();
			}
		}
		if (showCopyButton && GUILayout.Button(copyContent, barStyle, GUILayout.Width(size.x * 2f), GUILayout.Height(size.y * 2f)))
		{
			if (selectedLog == null)
			{
				GUIUtility.systemCopyBuffer = "No log selected";
			}
			else
			{
				GUIUtility.systemCopyBuffer = selectedLog.condition + Environment.NewLine + Environment.NewLine + selectedLog.stacktrace;
			}
		}
		if (showSaveButton && GUILayout.Button(saveLogsContent, barStyle, GUILayout.Width(size.x * 2f), GUILayout.Height(size.y * 2f)))
		{
			SaveLogsToDevice();
		}
		if (GUILayout.Button(infoContent, barStyle, GUILayout.Width(size.x * 2f), GUILayout.Height(size.y * 2f)))
		{
			currentView = ReportView.Info;
		}
		GUILayout.FlexibleSpace();
		string text2 = " ";
		text2 = ((!collapse) ? (text2 + numOfLogs) : (text2 + numOfCollapsedLogs));
		string text3 = " ";
		text3 = ((!collapse) ? (text3 + numOfLogsWarning) : (text3 + numOfCollapsedLogsWarning));
		string text4 = " ";
		text4 = ((!collapse) ? (text4 + numOfLogsError) : (text4 + numOfCollapsedLogsError));
		GUILayout.BeginHorizontal(showLog ? buttonActiveStyle : barStyle);
		if (GUILayout.Button(logContent, nonStyle, GUILayout.Width(size.x * 2f), GUILayout.Height(size.y * 2f)))
		{
			showLog = !showLog;
			calculateCurrentLog();
		}
		if (GUILayout.Button(text2, nonStyle, GUILayout.Width(size.x * 2f), GUILayout.Height(size.y * 2f)))
		{
			showLog = !showLog;
			calculateCurrentLog();
		}
		GUILayout.EndHorizontal();
		GUILayout.BeginHorizontal(showWarning ? buttonActiveStyle : barStyle);
		if (GUILayout.Button(warningContent, nonStyle, GUILayout.Width(size.x * 2f), GUILayout.Height(size.y * 2f)))
		{
			showWarning = !showWarning;
			calculateCurrentLog();
		}
		if (GUILayout.Button(text3, nonStyle, GUILayout.Width(size.x * 2f), GUILayout.Height(size.y * 2f)))
		{
			showWarning = !showWarning;
			calculateCurrentLog();
		}
		GUILayout.EndHorizontal();
		GUILayout.BeginHorizontal(showError ? buttonActiveStyle : nonStyle);
		if (GUILayout.Button(errorContent, nonStyle, GUILayout.Width(size.x * 2f), GUILayout.Height(size.y * 2f)))
		{
			showError = !showError;
			calculateCurrentLog();
		}
		if (GUILayout.Button(text4, nonStyle, GUILayout.Width(size.x * 2f), GUILayout.Height(size.y * 2f)))
		{
			showError = !showError;
			calculateCurrentLog();
		}
		GUILayout.EndHorizontal();
		if (GUILayout.Button(closeContent, barStyle, GUILayout.Width(size.x * 2f), GUILayout.Height(size.y * 2f)))
		{
			show = false;
			UnityEngine.Object.DestroyImmediate(base.gameObject.GetComponent<ReporterGUI>());
			try
			{
				base.gameObject.SendMessage("OnHideReporter");
			}
			catch (Exception exception)
			{
				UnityEngine.Debug.LogException(exception);
			}
		}
		GUILayout.EndHorizontal();
		GUILayout.EndScrollView();
		GUILayout.EndArea();
	}

	private void DrawLogs()
	{
		GUILayout.BeginArea(logsRect, backStyle);
		GUI.skin = logScrollerSkin;
		Vector2 drag = getDrag();
		if (drag.y != 0f && logsRect.Contains(new Vector2(downPos.x, (float)Screen.height - downPos.y)))
		{
			scrollPosition.y += drag.y - oldDrag;
		}
		scrollPosition = GUILayout.BeginScrollView(scrollPosition);
		oldDrag = drag.y;
		int a = (int)((float)Screen.height * 0.75f / size.y);
		int count = currentLog.Count;
		a = Mathf.Min(a, count - startIndex);
		int num = 0;
		int num2 = (int)((float)startIndex * size.y);
		if (num2 > 0)
		{
			GUILayout.BeginHorizontal(GUILayout.Height(num2));
			GUILayout.Label("---");
			GUILayout.EndHorizontal();
		}
		int value = startIndex + a;
		value = Mathf.Clamp(value, 0, count);
		bool flag = a < count;
		int num3 = startIndex;
		while (startIndex + num < value && num3 < currentLog.Count)
		{
			Log log = currentLog[num3];
			if ((log.logType != _LogType.Log || showLog) && (log.logType != _LogType.Warning || showWarning) && (log.logType != 0 || showError) && (log.logType != _LogType.Assert || showError) && (log.logType != _LogType.Exception || showError))
			{
				if (num >= a)
				{
					break;
				}
				GUIContent gUIContent = null;
				gUIContent = ((log.logType == _LogType.Log) ? logContent : ((log.logType != _LogType.Warning) ? errorContent : warningContent));
				GUIStyle gUIStyle = (((startIndex + num) % 2 == 0) ? evenLogStyle : oddLogStyle);
				if (log == selectedLog)
				{
					gUIStyle = selectedLogStyle;
				}
				tempContent.text = log.count.ToString();
				float num4 = 0f;
				if (collapse)
				{
					num4 = barStyle.CalcSize(tempContent).x + 3f;
				}
				countRect.x = (float)Screen.width - num4;
				countRect.y = size.y * (float)num3;
				if (num2 > 0)
				{
					countRect.y += 8f;
				}
				countRect.width = num4;
				countRect.height = size.y;
				if (flag)
				{
					countRect.x -= size.x * 2f;
				}
				Sample sample = samples[log.sampleId];
				fpsRect = countRect;
				if (showFps)
				{
					tempContent.text = sample.fpsText;
					num4 = gUIStyle.CalcSize(tempContent).x + size.x;
					fpsRect.x -= num4;
					fpsRect.width = size.x;
					fpsLabelRect = fpsRect;
					fpsLabelRect.x += size.x;
					fpsLabelRect.width = num4 - size.x;
				}
				memoryRect = fpsRect;
				if (showMemory)
				{
					tempContent.text = sample.memory.ToString("0.000");
					num4 = gUIStyle.CalcSize(tempContent).x + size.x;
					memoryRect.x -= num4;
					memoryRect.width = size.x;
					memoryLabelRect = memoryRect;
					memoryLabelRect.x += size.x;
					memoryLabelRect.width = num4 - size.x;
				}
				sceneRect = memoryRect;
				if (showScene)
				{
					tempContent.text = sample.GetSceneName();
					num4 = gUIStyle.CalcSize(tempContent).x + size.x;
					sceneRect.x -= num4;
					sceneRect.width = size.x;
					sceneLabelRect = sceneRect;
					sceneLabelRect.x += size.x;
					sceneLabelRect.width = num4 - size.x;
				}
				timeRect = sceneRect;
				if (showTime)
				{
					tempContent.text = sample.time.ToString("0.000");
					num4 = gUIStyle.CalcSize(tempContent).x + size.x;
					timeRect.x -= num4;
					timeRect.width = size.x;
					timeLabelRect = timeRect;
					timeLabelRect.x += size.x;
					timeLabelRect.width = num4 - size.x;
				}
				GUILayout.BeginHorizontal(gUIStyle);
				if (log == selectedLog)
				{
					GUILayout.Box(gUIContent, nonStyle, GUILayout.Width(size.x), GUILayout.Height(size.y));
					GUILayout.Label(log.condition, selectedLogFontStyle);
					if (showTime)
					{
						GUI.Box(timeRect, showTimeContent, gUIStyle);
						GUI.Label(timeLabelRect, sample.time.ToString("0.000"), gUIStyle);
					}
					if (showScene)
					{
						GUI.Box(sceneRect, showSceneContent, gUIStyle);
						GUI.Label(sceneLabelRect, sample.GetSceneName(), gUIStyle);
					}
					if (showMemory)
					{
						GUI.Box(memoryRect, showMemoryContent, gUIStyle);
						GUI.Label(memoryLabelRect, sample.memory.ToString("0.000") + " mb", gUIStyle);
					}
					if (showFps)
					{
						GUI.Box(fpsRect, showFpsContent, gUIStyle);
						GUI.Label(fpsLabelRect, sample.fpsText, gUIStyle);
					}
				}
				else
				{
					if (GUILayout.Button(gUIContent, nonStyle, GUILayout.Width(size.x), GUILayout.Height(size.y)))
					{
						selectedLog = log;
					}
					if (GUILayout.Button(log.condition, logButtonStyle))
					{
						selectedLog = log;
					}
					if (showTime)
					{
						GUI.Box(timeRect, showTimeContent, gUIStyle);
						GUI.Label(timeLabelRect, sample.time.ToString("0.000"), gUIStyle);
					}
					if (showScene)
					{
						GUI.Box(sceneRect, showSceneContent, gUIStyle);
						GUI.Label(sceneLabelRect, sample.GetSceneName(), gUIStyle);
					}
					if (showMemory)
					{
						GUI.Box(memoryRect, showMemoryContent, gUIStyle);
						GUI.Label(memoryLabelRect, sample.memory.ToString("0.000") + " mb", gUIStyle);
					}
					if (showFps)
					{
						GUI.Box(fpsRect, showFpsContent, gUIStyle);
						GUI.Label(fpsLabelRect, sample.fpsText, gUIStyle);
					}
				}
				if (collapse)
				{
					GUI.Label(countRect, log.count.ToString(), barStyle);
				}
				GUILayout.EndHorizontal();
				num++;
			}
			num3++;
		}
		int num5 = (int)((float)(count - (startIndex + a)) * size.y);
		if (num5 > 0)
		{
			GUILayout.BeginHorizontal(GUILayout.Height(num5));
			GUILayout.Label(" ");
			GUILayout.EndHorizontal();
		}
		GUILayout.EndScrollView();
		GUILayout.EndArea();
		buttomRect.x = 0f;
		buttomRect.y = (float)Screen.height - size.y;
		buttomRect.width = Screen.width;
		buttomRect.height = size.y;
		if (showGraph)
		{
			drawGraph();
		}
		else
		{
			drawStack();
		}
	}

	private void drawGraph()
	{
		graphRect = stackRect;
		graphRect.height = (float)Screen.height * 0.25f;
		GUI.skin = graphScrollerSkin;
		Vector2 drag = getDrag();
		if (graphRect.Contains(new Vector2(downPos.x, (float)Screen.height - downPos.y)))
		{
			if (drag.x != 0f)
			{
				graphScrollerPos.x -= drag.x - oldDrag3;
				graphScrollerPos.x = Mathf.Max(0f, graphScrollerPos.x);
			}
			Vector2 vector = downPos;
			if (vector != Vector2.zero)
			{
				currentFrame = startFrame + (int)(vector.x / graphSize);
			}
		}
		oldDrag3 = drag.x;
		GUILayout.BeginArea(graphRect, backStyle);
		graphScrollerPos = GUILayout.BeginScrollView(graphScrollerPos);
		startFrame = (int)(graphScrollerPos.x / graphSize);
		if (graphScrollerPos.x >= (float)samples.Count * graphSize - (float)Screen.width)
		{
			graphScrollerPos.x += graphSize;
		}
		GUILayout.Label(" ", GUILayout.Width((float)samples.Count * graphSize));
		GUILayout.EndScrollView();
		GUILayout.EndArea();
		maxFpsValue = 0f;
		minFpsValue = 100000f;
		maxMemoryValue = 0f;
		minMemoryValue = 100000f;
		for (int i = 0; (float)i < (float)Screen.width / graphSize; i++)
		{
			int num = startFrame + i;
			if (num >= samples.Count)
			{
				break;
			}
			Sample sample = samples[num];
			if (maxFpsValue < sample.fps)
			{
				maxFpsValue = sample.fps;
			}
			if (minFpsValue > sample.fps)
			{
				minFpsValue = sample.fps;
			}
			if (maxMemoryValue < sample.memory)
			{
				maxMemoryValue = sample.memory;
			}
			if (minMemoryValue > sample.memory)
			{
				minMemoryValue = sample.memory;
			}
		}
		if (currentFrame != -1 && currentFrame < samples.Count)
		{
			Sample sample2 = samples[currentFrame];
			GUILayout.BeginArea(buttomRect, backStyle);
			GUILayout.BeginHorizontal();
			GUILayout.Box(showTimeContent, nonStyle, GUILayout.Width(size.x), GUILayout.Height(size.y));
			GUILayout.Label(sample2.time.ToString("0.0"), nonStyle);
			GUILayout.Space(size.x);
			GUILayout.Box(showSceneContent, nonStyle, GUILayout.Width(size.x), GUILayout.Height(size.y));
			GUILayout.Label(sample2.GetSceneName(), nonStyle);
			GUILayout.Space(size.x);
			GUILayout.Box(showMemoryContent, nonStyle, GUILayout.Width(size.x), GUILayout.Height(size.y));
			GUILayout.Label(sample2.memory.ToString("0.000"), nonStyle);
			GUILayout.Space(size.x);
			GUILayout.Box(showFpsContent, nonStyle, GUILayout.Width(size.x), GUILayout.Height(size.y));
			GUILayout.Label(sample2.fpsText, nonStyle);
			GUILayout.Space(size.x);
			GUILayout.FlexibleSpace();
			GUILayout.EndHorizontal();
			GUILayout.EndArea();
		}
		graphMaxRect = stackRect;
		graphMaxRect.height = size.y;
		GUILayout.BeginArea(graphMaxRect);
		GUILayout.BeginHorizontal();
		GUILayout.Box(showMemoryContent, nonStyle, GUILayout.Width(size.x), GUILayout.Height(size.y));
		GUILayout.Label(maxMemoryValue.ToString("0.000"), nonStyle);
		GUILayout.Box(showFpsContent, nonStyle, GUILayout.Width(size.x), GUILayout.Height(size.y));
		GUILayout.Label(maxFpsValue.ToString("0.000"), nonStyle);
		GUILayout.FlexibleSpace();
		GUILayout.EndHorizontal();
		GUILayout.EndArea();
		graphMinRect = stackRect;
		graphMinRect.y = stackRect.y + stackRect.height - size.y;
		graphMinRect.height = size.y;
		GUILayout.BeginArea(graphMinRect);
		GUILayout.BeginHorizontal();
		GUILayout.Box(showMemoryContent, nonStyle, GUILayout.Width(size.x), GUILayout.Height(size.y));
		GUILayout.Label(minMemoryValue.ToString("0.000"), nonStyle);
		GUILayout.Box(showFpsContent, nonStyle, GUILayout.Width(size.x), GUILayout.Height(size.y));
		GUILayout.Label(minFpsValue.ToString("0.000"), nonStyle);
		GUILayout.FlexibleSpace();
		GUILayout.EndHorizontal();
		GUILayout.EndArea();
	}

	private void drawStack()
	{
		if (selectedLog != null)
		{
			Vector2 drag = getDrag();
			if (drag.y != 0f && stackRect.Contains(new Vector2(downPos.x, (float)Screen.height - downPos.y)))
			{
				scrollPosition2.y += drag.y - oldDrag2;
			}
			oldDrag2 = drag.y;
			GUILayout.BeginArea(stackRect, backStyle);
			scrollPosition2 = GUILayout.BeginScrollView(scrollPosition2);
			Sample sample = null;
			try
			{
				sample = samples[selectedLog.sampleId];
			}
			catch (Exception exception)
			{
				UnityEngine.Debug.LogException(exception);
			}
			GUILayout.BeginHorizontal();
			GUILayout.Label(selectedLog.condition, stackLabelStyle);
			GUILayout.EndHorizontal();
			GUILayout.Space(size.y * 0.25f);
			GUILayout.BeginHorizontal();
			GUILayout.Label(selectedLog.stacktrace, stackLabelStyle);
			GUILayout.EndHorizontal();
			GUILayout.Space(size.y);
			GUILayout.EndScrollView();
			GUILayout.EndArea();
			GUILayout.BeginArea(buttomRect, backStyle);
			GUILayout.BeginHorizontal();
			GUILayout.Box(showTimeContent, nonStyle, GUILayout.Width(size.x), GUILayout.Height(size.y));
			GUILayout.Label(sample.time.ToString("0.000"), nonStyle);
			GUILayout.Space(size.x);
			GUILayout.Box(showSceneContent, nonStyle, GUILayout.Width(size.x), GUILayout.Height(size.y));
			GUILayout.Label(sample.GetSceneName(), nonStyle);
			GUILayout.Space(size.x);
			GUILayout.Box(showMemoryContent, nonStyle, GUILayout.Width(size.x), GUILayout.Height(size.y));
			GUILayout.Label(sample.memory.ToString("0.000"), nonStyle);
			GUILayout.Space(size.x);
			GUILayout.Box(showFpsContent, nonStyle, GUILayout.Width(size.x), GUILayout.Height(size.y));
			GUILayout.Label(sample.fpsText, nonStyle);
			GUILayout.FlexibleSpace();
			GUILayout.EndHorizontal();
			GUILayout.EndArea();
		}
		else
		{
			GUILayout.BeginArea(stackRect, backStyle);
			GUILayout.EndArea();
			GUILayout.BeginArea(buttomRect, backStyle);
			GUILayout.EndArea();
		}
	}

	public void OnGUIDraw()
	{
		if (show)
		{
			screenRect.x = 0f;
			screenRect.y = 0f;
			screenRect.width = Screen.width;
			screenRect.height = Screen.height;
			getDownPos();
			logsRect.x = 0f;
			logsRect.y = size.y * 2f;
			logsRect.width = Screen.width;
			logsRect.height = (float)Screen.height * 0.75f - size.y * 2f;
			stackRectTopLeft.x = 0f;
			stackRect.x = 0f;
			stackRectTopLeft.y = (float)Screen.height * 0.75f;
			stackRect.y = (float)Screen.height * 0.75f;
			stackRect.width = Screen.width;
			stackRect.height = (float)Screen.height * 0.25f - size.y;
			detailRect.x = 0f;
			detailRect.y = (float)Screen.height - size.y * 3f;
			detailRect.width = Screen.width;
			detailRect.height = size.y * 3f;
			if (currentView == ReportView.Info)
			{
				DrawInfo();
			}
			else if (currentView == ReportView.Logs)
			{
				drawToolBar();
				DrawLogs();
			}
		}
	}

	private bool isGestureDone()
	{
		if (Application.platform == RuntimePlatform.Android || Application.platform == RuntimePlatform.IPhonePlayer)
		{
			if (Input.touches.Length != 1)
			{
				gestureDetector.Clear();
				gestureCount = 0;
			}
			else if (Input.touches[0].phase == UnityEngine.TouchPhase.Canceled || Input.touches[0].phase == UnityEngine.TouchPhase.Ended)
			{
				gestureDetector.Clear();
			}
			else if (Input.touches[0].phase == UnityEngine.TouchPhase.Moved)
			{
				Vector2 position = Input.touches[0].position;
				if (gestureDetector.Count == 0 || (position - gestureDetector[gestureDetector.Count - 1]).magnitude > 10f)
				{
					gestureDetector.Add(position);
				}
			}
		}
		else if (Input.GetMouseButtonUp(0))
		{
			gestureDetector.Clear();
			gestureCount = 0;
		}
		else if (Input.GetMouseButton(0))
		{
			Vector2 vector = new Vector2(Input.mousePosition.x, Input.mousePosition.y);
			if (gestureDetector.Count == 0 || (vector - gestureDetector[gestureDetector.Count - 1]).magnitude > 10f)
			{
				gestureDetector.Add(vector);
			}
		}
		if (gestureDetector.Count < 10)
		{
			return false;
		}
		gestureSum = Vector2.zero;
		gestureLength = 0f;
		Vector2 rhs = Vector2.zero;
		for (int i = 0; i < gestureDetector.Count - 2; i++)
		{
			Vector2 vector2 = gestureDetector[i + 1] - gestureDetector[i];
			float magnitude = vector2.magnitude;
			gestureSum += vector2;
			gestureLength += magnitude;
			if (Vector2.Dot(vector2, rhs) < 0f)
			{
				gestureDetector.Clear();
				gestureCount = 0;
				return false;
			}
			rhs = vector2;
		}
		int num = (Screen.width + Screen.height) / 4;
		if (gestureLength > (float)num && gestureSum.magnitude < (float)(num / 2))
		{
			gestureDetector.Clear();
			gestureCount++;
			if (gestureCount >= numOfCircleToShow)
			{
				return true;
			}
		}
		return false;
	}

	private bool isDoubleClickDone()
	{
		if (Application.platform == RuntimePlatform.Android || Application.platform == RuntimePlatform.IPhonePlayer)
		{
			if (Input.touches.Length != 1)
			{
				lastClickTime = -1f;
			}
			else if (Input.touches[0].phase == UnityEngine.TouchPhase.Began)
			{
				if (lastClickTime == -1f)
				{
					lastClickTime = Time.realtimeSinceStartup;
				}
				else
				{
					if (Time.realtimeSinceStartup - lastClickTime < 0.2f)
					{
						lastClickTime = -1f;
						return true;
					}
					lastClickTime = Time.realtimeSinceStartup;
				}
			}
		}
		else if (Input.GetMouseButtonDown(0))
		{
			if (lastClickTime == -1f)
			{
				lastClickTime = Time.realtimeSinceStartup;
			}
			else
			{
				if (Time.realtimeSinceStartup - lastClickTime < 0.2f)
				{
					lastClickTime = -1f;
					return true;
				}
				lastClickTime = Time.realtimeSinceStartup;
			}
		}
		return false;
	}

	private Vector2 getDownPos()
	{
		if (Application.platform == RuntimePlatform.Android || Application.platform == RuntimePlatform.IPhonePlayer)
		{
			if (Input.touches.Length == 1 && Input.touches[0].phase == UnityEngine.TouchPhase.Began)
			{
				downPos = Input.touches[0].position;
				return downPos;
			}
		}
		else if (Input.GetMouseButtonDown(0))
		{
			downPos.x = Input.mousePosition.x;
			downPos.y = Input.mousePosition.y;
			return downPos;
		}
		return Vector2.zero;
	}

	private Vector2 getDrag()
	{
		if (Application.platform == RuntimePlatform.Android || Application.platform == RuntimePlatform.IPhonePlayer)
		{
			if (Input.touches.Length != 1)
			{
				return Vector2.zero;
			}
			return Input.touches[0].position - downPos;
		}
		if (Input.GetMouseButton(0))
		{
			mousePosition = Input.mousePosition;
			return mousePosition - downPos;
		}
		return Vector2.zero;
	}

	private void calculateStartIndex()
	{
		startIndex = (int)(scrollPosition.y / size.y);
		startIndex = Mathf.Clamp(startIndex, 0, currentLog.Count);
	}

	private void doShow()
	{
		show = true;
		currentView = ReportView.Logs;
		base.gameObject.AddComponent<ReporterGUI>();
		try
		{
			base.gameObject.SendMessage("OnShowReporter");
		}
		catch (Exception exception)
		{
			UnityEngine.Debug.LogException(exception);
		}
	}

	private void Update()
	{
		fpsText = fps.ToString("0.000");
		gcTotalMemory = (float)GC.GetTotalMemory(forceFullCollection: false) / 1024f / 1024f;
		int buildIndex = SceneManager.GetActiveScene().buildIndex;
		if (buildIndex != -1 && string.IsNullOrEmpty(scenes[buildIndex]))
		{
			scenes[SceneManager.GetActiveScene().buildIndex] = SceneManager.GetActiveScene().name;
		}
		calculateStartIndex();
		if (!show && isGestureDone())
		{
			doShow();
		}
		if (threadedLogs.Count > 0)
		{
			lock (threadedLogs)
			{
				for (int i = 0; i < threadedLogs.Count; i++)
				{
					Log log = threadedLogs[i];
					AddLog(log.condition, log.stacktrace, (LogType)log.logType);
				}
				threadedLogs.Clear();
			}
		}
		if (firstTime)
		{
			firstTime = false;
			lastUpdate = Time.realtimeSinceStartup;
			frames = 0;
			return;
		}
		frames++;
		float num = Time.realtimeSinceStartup - lastUpdate;
		if (num > 0.25f && frames > 10)
		{
			fps = (float)frames / num;
			lastUpdate = Time.realtimeSinceStartup;
			frames = 0;
		}
	}

	private void CaptureLog(string condition, string stacktrace, LogType type)
	{
		AddLog(condition, stacktrace, type);
	}

	private void AddLog(string condition, string stacktrace, LogType type)
	{
		float num = 0f;
		string text = "";
		if (cachedString.ContainsKey(condition))
		{
			text = cachedString[condition];
		}
		else
		{
			text = condition;
			cachedString.Add(text, text);
			num += (float)((!string.IsNullOrEmpty(text)) ? (text.Length * 2) : 0);
			num += (float)IntPtr.Size;
		}
		string text2 = "";
		if (cachedString.ContainsKey(stacktrace))
		{
			text2 = cachedString[stacktrace];
		}
		else
		{
			text2 = stacktrace;
			cachedString.Add(text2, text2);
			num += (float)((!string.IsNullOrEmpty(text2)) ? (text2.Length * 2) : 0);
			num += (float)IntPtr.Size;
		}
		bool flag = false;
		addSample();
		Log log = new Log
		{
			logType = (_LogType)type,
			condition = text,
			stacktrace = text2,
			sampleId = samples.Count - 1
		};
		num += log.GetMemoryUsage();
		logsMemUsage += num / 1024f / 1024f;
		if (TotalMemUsage > maxSize)
		{
			clear();
			UnityEngine.Debug.Log("Memory Usage Reach" + maxSize + " mb So It is Cleared");
			return;
		}
		bool flag2 = false;
		if (logsDic.ContainsKey(text, stacktrace))
		{
			flag2 = false;
			logsDic[text][stacktrace].count++;
		}
		else
		{
			flag2 = true;
			collapsedLogs.Add(log);
			logsDic[text][stacktrace] = log;
			switch (type)
			{
			case LogType.Log:
				numOfCollapsedLogs++;
				break;
			case LogType.Warning:
				numOfCollapsedLogsWarning++;
				break;
			default:
				numOfCollapsedLogsError++;
				break;
			}
		}
		switch (type)
		{
		case LogType.Log:
			numOfLogs++;
			break;
		case LogType.Warning:
			numOfLogsWarning++;
			break;
		default:
			numOfLogsError++;
			break;
		}
		logs.Add(log);
		if (!collapse || flag2)
		{
			bool flag3 = false;
			if (log.logType == _LogType.Log && !showLog)
			{
				flag3 = true;
			}
			if (log.logType == _LogType.Warning && !showWarning)
			{
				flag3 = true;
			}
			if (log.logType == _LogType.Error && !showError)
			{
				flag3 = true;
			}
			if (log.logType == _LogType.Assert && !showError)
			{
				flag3 = true;
			}
			if (log.logType == _LogType.Exception && !showError)
			{
				flag3 = true;
			}
			if (!flag3 && (string.IsNullOrEmpty(filterText) || log.condition.ToLower().Contains(filterText.ToLower())))
			{
				currentLog.Add(log);
				flag = true;
			}
		}
		if (flag)
		{
			calculateStartIndex();
			int count = currentLog.Count;
			int num2 = (int)((float)Screen.height * 0.75f / size.y);
			if (startIndex >= count - num2)
			{
				scrollPosition.y += size.y;
			}
		}
		try
		{
			base.gameObject.SendMessage("OnLog", log);
		}
		catch (Exception exception)
		{
			UnityEngine.Debug.LogException(exception);
		}
	}

	private void CaptureLogThread(string condition, string stacktrace, LogType type)
	{
		Log item = new Log
		{
			condition = condition,
			stacktrace = stacktrace,
			logType = (_LogType)type
		};
		lock (threadedLogs)
		{
			threadedLogs.Add(item);
		}
	}

	private void _OnLevelWasLoaded(Scene _null1, LoadSceneMode _null2)
	{
		if (clearOnNewSceneLoaded)
		{
			clear();
		}
		currentScene = SceneManager.GetActiveScene().name;
		UnityEngine.Debug.Log("Scene " + SceneManager.GetActiveScene().name + " is loaded");
	}

	private void OnApplicationQuit()
	{
		PlayerPrefs.SetInt("Reporter_currentView", (int)currentView);
		PlayerPrefs.SetInt("Reporter_show", show ? 1 : 0);
		PlayerPrefs.SetInt("Reporter_collapse", collapse ? 1 : 0);
		PlayerPrefs.SetInt("Reporter_clearOnNewSceneLoaded", clearOnNewSceneLoaded ? 1 : 0);
		PlayerPrefs.SetInt("Reporter_showTime", showTime ? 1 : 0);
		PlayerPrefs.SetInt("Reporter_showScene", showScene ? 1 : 0);
		PlayerPrefs.SetInt("Reporter_showMemory", showMemory ? 1 : 0);
		PlayerPrefs.SetInt("Reporter_showFps", showFps ? 1 : 0);
		PlayerPrefs.SetInt("Reporter_showGraph", showGraph ? 1 : 0);
		PlayerPrefs.SetInt("Reporter_showLog", showLog ? 1 : 0);
		PlayerPrefs.SetInt("Reporter_showWarning", showWarning ? 1 : 0);
		PlayerPrefs.SetInt("Reporter_showError", showError ? 1 : 0);
		PlayerPrefs.SetString("Reporter_filterText", filterText);
		PlayerPrefs.SetFloat("Reporter_size", size.x);
		PlayerPrefs.SetInt("Reporter_showClearOnNewSceneLoadedButton", showClearOnNewSceneLoadedButton ? 1 : 0);
		PlayerPrefs.SetInt("Reporter_showTimeButton", showTimeButton ? 1 : 0);
		PlayerPrefs.SetInt("Reporter_showSceneButton", showSceneButton ? 1 : 0);
		PlayerPrefs.SetInt("Reporter_showMemButton", showMemButton ? 1 : 0);
		PlayerPrefs.SetInt("Reporter_showFpsButton", showFpsButton ? 1 : 0);
		PlayerPrefs.SetInt("Reporter_showSearchText", showSearchText ? 1 : 0);
		PlayerPrefs.Save();
	}

	private IEnumerator readInfo()
	{
		string text = "build_info";
		string text2 = text;
		if (text.IndexOf("://") == -1)
		{
			string text3 = Application.streamingAssetsPath;
			if (text3 == "")
			{
				text3 = Application.dataPath + "/StreamingAssets/";
			}
			text2 = Path.Combine(text3, text);
		}
		if (!text2.Contains("://"))
		{
			text2 = "file://" + text2;
		}
		UnityWebRequest www = UnityWebRequest.Get(text2);
		yield return www.SendWebRequest();
		if (!string.IsNullOrEmpty(www.error))
		{
			UnityEngine.Debug.LogError(www.error);
		}
		else
		{
			buildDate = www.downloadHandler.text;
		}
	}

	private void SaveLogsToDevice()
	{
		string text = Application.persistentDataPath + "/logs.txt";
		List<string> list = new List<string>();
		UnityEngine.Debug.Log("Saving logs to " + text);
		File.Delete(text);
		for (int i = 0; i < logs.Count; i++)
		{
			list.Add(logs[i].logType.ToString() + "\n" + logs[i].condition + "\n" + logs[i].stacktrace);
		}
		File.WriteAllLines(text, list.ToArray());
	}
}
public class ReporterGUI : MonoBehaviour
{
	private Reporter reporter;

	private void Awake()
	{
		reporter = base.gameObject.GetComponent<Reporter>();
	}

	private void OnGUI()
	{
		reporter.OnGUIDraw();
	}
}
public class ReporterMessageReceiver : MonoBehaviour
{
	private Reporter reporter;

	private void Start()
	{
		reporter = base.gameObject.GetComponent<Reporter>();
	}

	private void OnPreStart()
	{
		if (reporter == null)
		{
			reporter = base.gameObject.GetComponent<Reporter>();
		}
		if (Screen.width < 1000)
		{
			reporter.size = new Vector2(32f, 32f);
		}
		else
		{
			reporter.size = new Vector2(48f, 48f);
		}
		reporter.UserData = "Put user date here like his account to know which user is playing on this device";
	}

	private void OnHideReporter()
	{
	}

	private void OnShowReporter()
	{
	}

	private void OnLog(Reporter.Log log)
	{
	}
}
public class Rotate : MonoBehaviour
{
	private Vector3 angle;

	private void Start()
	{
		angle = base.transform.eulerAngles;
	}

	private void Update()
	{
		angle.y += Time.deltaTime * 100f;
		base.transform.eulerAngles = angle;
	}
}
public class TestReporter : MonoBehaviour
{
	public int logTestCount = 100;

	public int threadLogTestCount = 100;

	public bool logEverySecond = true;

	private int currentLogTestCount;

	private Reporter reporter;

	private GUIStyle style;

	private Rect rect1;

	private Rect rect2;

	private Rect rect3;

	private Rect rect4;

	private Rect rect5;

	private Rect rect6;

	private Thread thread;

	private float elapsed;

	private void Start()
	{
		Application.runInBackground = true;
		reporter = UnityEngine.Object.FindObjectOfType(typeof(Reporter)) as Reporter;
		UnityEngine.Debug.Log("test long text sdf asdfg asdfg sdfgsdfg sdfg sfgsdfgsdfg sdfg sdf gsdfg sfdg sf gsdfg sdfg asdfg sdfgsdfg sdfg sdf gsdfg sfdg sf gsdfg sdfg asdfg sdfgsdfg sdfg sdf gsdfg sfdg sf gsdfg sdfg asdfg sdfgsdfg sdfg sdf gsdfg sfdg sf gsdfg sdfg asdfg sdfgsdfg sdfg sdf gsdfg sfdg sf gsdfg sdfg asdfg ssssssssssssssssssssssasdf asdf asdf asdf adsf \n dfgsdfg sdfg sdf gsdfg sfdg sf gsdfg sdfg asdfasdf asdf asdf asdf adsf \n dfgsdfg sdfg sdf gsdfg sfdg sf gsdfg sdfg asdfasdf asdf asdf asdf adsf \n dfgsdfg sdfg sdf gsdfg sfdg sf gsdfg sdfg asdfasdf asdf asdf asdf adsf \n dfgsdfg sdfg sdf gsdfg sfdg sf gsdfg sdfg asdfasdf asdf asdf asdf adsf \n dfgsdfg sdfg sdf gsdfg sfdg sf gsdfg sdfg asdf");
		style = new GUIStyle();
		style.alignment = TextAnchor.MiddleCenter;
		style.normal.textColor = Color.white;
		style.wordWrap = true;
		for (int i = 0; i < 10; i++)
		{
			UnityEngine.Debug.Log("Test Collapsed log");
			UnityEngine.Debug.LogWarning("Test Collapsed Warning");
			UnityEngine.Debug.LogError("Test Collapsed Error");
		}
		for (int j = 0; j < 10; j++)
		{
			UnityEngine.Debug.Log("Test Collapsed log");
			UnityEngine.Debug.LogWarning("Test Collapsed Warning");
			UnityEngine.Debug.LogError("Test Collapsed Error");
		}
		rect1 = new Rect(Screen.width / 2 - 120, Screen.height / 2 - 225, 240f, 50f);
		rect2 = new Rect(Screen.width / 2 - 120, Screen.height / 2 - 175, 240f, 100f);
		rect3 = new Rect(Screen.width / 2 - 120, Screen.height / 2 - 50, 240f, 50f);
		rect4 = new Rect(Screen.width / 2 - 120, Screen.height / 2, 240f, 50f);
		rect5 = new Rect(Screen.width / 2 - 120, Screen.height / 2 + 50, 240f, 50f);
		rect6 = new Rect(Screen.width / 2 - 120, Screen.height / 2 + 100, 240f, 50f);
		thread = new Thread(threadLogTest);
		thread.Start();
	}

	private void OnDestroy()
	{
		thread.Abort();
	}

	private void threadLogTest()
	{
		for (int i = 0; i < threadLogTestCount; i++)
		{
			UnityEngine.Debug.Log("Test Log from Thread");
			UnityEngine.Debug.LogWarning("Test Warning from Thread");
			UnityEngine.Debug.LogError("Test Error from Thread");
		}
	}

	private void Update()
	{
		int num = 0;
		while (currentLogTestCount < logTestCount && num < 10)
		{
			UnityEngine.Debug.Log("Test Log " + currentLogTestCount);
			UnityEngine.Debug.LogError("Test LogError " + currentLogTestCount);
			UnityEngine.Debug.LogWarning("Test LogWarning " + currentLogTestCount);
			num++;
			currentLogTestCount++;
		}
		elapsed += Time.deltaTime;
		if (elapsed >= 1f)
		{
			elapsed = 0f;
			UnityEngine.Debug.Log("One Second Passed");
		}
	}

	private void OnGUI()
	{
		if ((bool)reporter && !reporter.show)
		{
			GUI.Label(rect1, "Draw circle on screen to show logs", style);
			GUI.Label(rect2, "To use Reporter just create reporter from reporter menu at first scene your game start", style);
			if (GUI.Button(rect3, "Load ReporterScene"))
			{
				SceneManager.LoadScene("ReporterScene");
			}
			if (GUI.Button(rect4, "Load test1"))
			{
				SceneManager.LoadScene("test1");
			}
			if (GUI.Button(rect5, "Load test2"))
			{
				SceneManager.LoadScene("test2");
			}
			GUI.Label(rect6, "fps : " + reporter.fps.ToString("0.0"), style);
		}
	}
}
public class AgoraManager : MonoSingleton<AgoraManager>
{
	public AppIdInput _appIdInput;

	private IRtcEngine rtcEngine;

	private ArrayList permissionList = new ArrayList();

	private bool isJoinChannel;

	public string curChannel;

	public GameObject screencastObj;

	private void Awake()
	{
		permissionList.Add("android.permission.RECORD_AUDIO");
		permissionList.Add("android.permission.CAMERA");
	}

	private void Start()
	{
	}

	private void OnDestroy()
	{
		LeaveChannel();
		UnLoadEngine();
	}

	private void Update()
	{
		CheckPermissions();
	}

	private void OnApplicationQuit()
	{
		UnLoadEngine();
	}

	private void CheckPermissions()
	{
		foreach (string permission in permissionList)
		{
			if (!Permission.HasUserAuthorizedPermission(permission))
			{
				Permission.RequestUserPermission(permission);
			}
		}
	}

	private void LoadEngine()
	{
		rtcEngine = RtcEngine.CreateAgoraRtcEngine();
		AgoraEventHandler engineEventHandler = new AgoraEventHandler();
		RtcEngineContext context = new RtcEngineContext(_appIdInput.appID, 0uL, CHANNEL_PROFILE_TYPE.CHANNEL_PROFILE_LIVE_BROADCASTING, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_MEETING);
		rtcEngine.Initialize(context);
		rtcEngine.InitEventHandler(engineEventHandler);
	}

	private void UnLoadEngine()
	{
		if (rtcEngine != null)
		{
			rtcEngine.InitEventHandler(null);
			rtcEngine.LeaveChannel();
			rtcEngine.Dispose();
		}
	}

	public void JoinChannel(string chanelName)
	{
		if (rtcEngine == null)
		{
			LoadEngine();
		}
		curChannel = chanelName;
		if (isJoinChannel)
		{
			rtcEngine.LeaveChannel();
		}
		rtcEngine.EnableAudio();
		rtcEngine.EnableVideo();
		VideoEncoderConfiguration videoEncoderConfiguration = new VideoEncoderConfiguration();
		videoEncoderConfiguration.dimensions = new VideoDimensions(640, 360);
		videoEncoderConfiguration.frameRate = 60;
		videoEncoderConfiguration.bitrate = 0;
		rtcEngine.SetVideoEncoderConfiguration(videoEncoderConfiguration);
		rtcEngine.SetClientRole(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
		rtcEngine.JoinChannel(_appIdInput.token, curChannel);
	}

	public void Reconnect()
	{
		if (!curChannel.Equals(string.Empty))
		{
			JoinChannel(curChannel);
		}
	}

	public void LeaveChannel()
	{
		if (rtcEngine != null && isJoinChannel)
		{
			rtcEngine.LeaveChannel();
		}
	}

	public void MuteAllRemoteAudioStreams(bool isMute)
	{
		if (rtcEngine != null)
		{
			rtcEngine.MuteAllRemoteAudioStreams(isMute);
		}
	}

	public void MuteLocalAudioStream(bool isMute)
	{
		if (rtcEngine != null)
		{
			rtcEngine.MuteLocalAudioStream(isMute);
		}
	}

	public void OnJoinChannelSuccess(string channelName, uint uid, int elapsed)
	{
		isJoinChannel = true;
		MuteAllRemoteAudioStreams(isMute: false);
		MuteLocalAudioStream(isMute: false);
		rtcEngine.AdjustRecordingSignalVolume(100);
		BaseManager<EventCenter>.GetInstance().EventTrigger("Agora_OnJoinChannelSuccess", channelName);
	}

	public void OnLeaveChannel(RtcStats rtcStats)
	{
		isJoinChannel = false;
		BaseManager<EventCenter>.GetInstance().EventTrigger("Agora_OnLeaveChannel");
	}
}
public class AgoraEventHandler : IRtcEngineEventHandler
{
	public override void OnUserJoined(RtcConnection connection, uint remoteUid, int elapsed)
	{
		if (remoteUid != 100)
		{
			return;
		}
		if (MonoSingleton<AgoraManager>.GetInstance().screencastObj.GetComponent<RawImage>() == null)
		{
			MonoSingleton<AgoraManager>.GetInstance().screencastObj.AddComponent<RawImage>();
		}
		VideoSurface videoSurface = MonoSingleton<AgoraManager>.GetInstance().screencastObj.GetComponent<VideoSurface>();
		if (videoSurface == null)
		{
			videoSurface = MonoSingleton<AgoraManager>.GetInstance().screencastObj.AddComponent<VideoSurface>();
			videoSurface.OnTextureSizeModify += delegate(int width, int height)
			{
				MonoSingleton<AgoraManager>.GetInstance().screencastObj.GetComponent<RectTransform>().sizeDelta = new Vector2(width, height);
			};
		}
		videoSurface.SetForUser(remoteUid, MonoSingleton<AgoraManager>.GetInstance().curChannel, VIDEO_SOURCE_TYPE.VIDEO_SOURCE_REMOTE);
		videoSurface.SetEnable(enable: true);
	}

	public override void OnUserOffline(RtcConnection connection, uint remoteUid, USER_OFFLINE_REASON_TYPE reason)
	{
		if (remoteUid == 100)
		{
			RawImage component = MonoSingleton<AgoraManager>.GetInstance().screencastObj.GetComponent<RawImage>();
			if (component != null)
			{
				UnityEngine.Object.Destroy(component);
			}
			VideoSurface component2 = MonoSingleton<AgoraManager>.GetInstance().screencastObj.GetComponent<VideoSurface>();
			if (component2 != null)
			{
				UnityEngine.Object.Destroy(component2);
			}
		}
	}

	public override void OnJoinChannelSuccess(RtcConnection connection, int elapsed)
	{
		MonoSingleton<AgoraManager>.GetInstance().OnJoinChannelSuccess(connection.channelId, connection.localUid, elapsed);
	}

	public override void OnLeaveChannel(RtcConnection connection, RtcStats stats)
	{
		MonoSingleton<AgoraManager>.GetInstance().OnLeaveChannel(stats);
		RawImage component = MonoSingleton<AgoraManager>.GetInstance().screencastObj.GetComponent<RawImage>();
		if (component != null)
		{
			UnityEngine.Object.Destroy(component);
		}
		VideoSurface component2 = MonoSingleton<AgoraManager>.GetInstance().screencastObj.GetComponent<VideoSurface>();
		if (component2 != null)
		{
			UnityEngine.Object.Destroy(component2);
		}
	}
}
public class AudioManager : BaseManager<AudioManager>
{
	private string root = "Audio";

	public void PlayAudioWithLanguage(string assetName)
	{
		PlayAudio(root + "/" + BaseManager<LanguageManager>.GetInstance().Language + "/" + assetName);
	}

	public void PlayAudio(string path)
	{
		BaseManager<ResourceManager>.GetInstance().LoadAsync(path, delegate(AudioClip clip)
		{
			if (clip != null)
			{
				AudioSource.PlayClipAtPoint(clip, Vector3.zero);
			}
		});
	}
}
[Serializable]
public class ObjData
{
	public string name;

	public GameObject gameObject;

	public bool active;
}
public class ObjManager : MonoSingleton<ObjManager>
{
	[SerializeField]
	private List<ObjData> objDatas = new List<ObjData>();

	public GameObject menu;

	public List<Texture2D> texture2Ds;

	private int bgIndex;

	public GameObject VideoCanvas;

	private void Awake()
	{
		BaseManager<EventCenter>.GetInstance().AddEventListener<DictionaryEntry>("OnRoomPropertiesUpdate", OnRoomPropertiesUpdate);
	}

	private void OnDestroy()
	{
		BaseManager<EventCenter>.GetInstance().RemoveEventListener<DictionaryEntry>("OnRoomPropertiesUpdate", OnRoomPropertiesUpdate);
	}

	public void SetRoomObjActive(string objName, bool active)
	{
		ExitGames.Client.Photon.Hashtable hashtable = new ExitGames.Client.Photon.Hashtable();
		hashtable.Add(objName, active);
		PunMonoSingleton<PhotonManager>.GetInstance().SetRoomProperties(hashtable);
	}

	private void ObjSetActive(string objName, bool active)
	{
		for (int i = 0; i < objDatas.Count; i++)
		{
			if (objName.Equals(objDatas[i].name))
			{
				objDatas[i].active = active;
				objDatas[i].gameObject.SetActive(active);
				BaseManager<EventCenter>.GetInstance().EventTrigger("RoomObjActiveUpdate", objDatas[i]);
			}
		}
	}

	public void MenuActive(bool negation, bool active = false)
	{
		if (negation)
		{
			if (menu.activeSelf)
			{
				menu.SetActive(value: false);
				return;
			}
			menu.SetActive(value: true);
			ResetMenuTransform();
		}
		else
		{
			ResetMenuTransform();
			menu.SetActive(active);
		}
	}

	public void ResetMenuTransform()
	{
		menu.transform.position = Camera.main.transform.position + Quaternion.Euler(0f, Camera.main.transform.transform.rotation.eulerAngles.y, 0f) * new Vector3(0f, 0f, 1.5f);
		menu.transform.rotation = Quaternion.Euler(0f, Camera.main.transform.eulerAngles.y, 0f);
	}

	public void SwitchBackground()
	{
		bgIndex++;
		if (bgIndex > texture2Ds.Count - 1)
		{
			bgIndex = 0;
		}
		RenderSettings.skybox.mainTexture = texture2Ds[bgIndex];
	}

	private void OnRoomPropertiesUpdate(DictionaryEntry entry)
	{
		ObjSetActive(entry.Key.ToString(), (bool)entry.Value);
	}
}
public class HttpManager : BaseManager<HttpManager>
{
	public void HttpGet(string url, Action<bool, string> ac = null)
	{
		MonoSingleton<MonoManager>.GetInstance().StartCoroutine(HttpGetCoroutine(url, ac));
	}

	public void HttpPost(string url, string posData, Action<bool, string> ac)
	{
		MonoSingleton<MonoManager>.GetInstance().StartCoroutine(HttpPostCoroutine(url, posData, ac));
	}

	private IEnumerator HttpGetCoroutine(string url, Action<bool, string> ac)
	{
		using UnityWebRequest webRequest = UnityWebRequest.Get(url);
		yield return webRequest.SendWebRequest();
		if (webRequest.isDone && webRequest.result == UnityWebRequest.Result.Success)
		{
			ac?.Invoke(arg1: true, webRequest.downloadHandler.text);
		}
		else
		{
			ac?.Invoke(arg1: false, webRequest.error);
		}
	}

	private static IEnumerator HttpPostCoroutine(string url, string postData, Action<bool, string> ac)
	{
		UnityWebRequest request = new UnityWebRequest(url, "POST");
		request.uploadHandler = new UploadHandlerRaw(Encoding.UTF8.GetBytes(postData));
		request.timeout = 5;
		request.SetRequestHeader("Content-Type", "application/json;charset=utf-8");
		request.downloadHandler = new DownloadHandlerBuffer();
		yield return request.SendWebRequest();
		if (request.isDone && request.result == UnityWebRequest.Result.Success)
		{
			DownloadHandler downloadHandler = request.downloadHandler;
			ac?.Invoke(arg1: true, downloadHandler.text);
		}
		else
		{
			ac?.Invoke(arg1: false, request.error);
		}
	}
}
public class InputActionControl : MonoBehaviour
{
	private void Awake()
	{
		XRSettings.eyeTextureResolutionScale = 1.5f;
		BaseManager<LanguageManager>.GetInstance().InitLanguageConfig();
	}

	private void Start()
	{
		MonoSingleton<ObjManager>.GetInstance().ResetMenuTransform();
		MonoSingleton<InputControl>.GetInstance().AddInputPerformed("XRRightHand", "Menu", delegate
		{
			MonoSingleton<ObjManager>.GetInstance().MenuActive(negation: true);
		});
	}

	private void Update()
	{
	}
}
public class InputControl : MonoSingleton<InputControl>
{
	public InputActionAsset inputActionAsset;

	public void AddInputPerformed(string mapName, string actionName, Action<InputAction.CallbackContext> performed)
	{
		if (inputActionAsset == null)
		{
			return;
		}
		InputActionMap inputActionMap = inputActionAsset.FindActionMap(mapName);
		if (inputActionMap != null)
		{
			InputAction inputAction = inputActionMap.FindAction(actionName);
			if (inputAction != null && performed != null)
			{
				inputAction.performed += performed;
			}
			else
			{
				UnityEngine.Debug.LogWarning(actionName + " is null");
			}
		}
		else
		{
			UnityEngine.Debug.LogWarning(mapName + " is null");
		}
	}

	public void AddInputCanceled(string mapName, string actionName, Action<InputAction.CallbackContext> canceled)
	{
		if (inputActionAsset == null)
		{
			return;
		}
		InputActionMap inputActionMap = inputActionAsset.FindActionMap(mapName);
		if (inputActionMap != null)
		{
			InputAction inputAction = inputActionMap.FindAction(actionName);
			if (inputAction != null)
			{
				inputAction.canceled += canceled;
			}
		}
	}
}
public class AndroidPluginManager : BaseManager<AndroidPluginManager>
{
	private AndroidJavaObject m_CurAndroidJavaObject;

	protected AndroidJavaObject CurAndroidJavaObject
	{
		get
		{
			if (m_CurAndroidJavaObject == null)
			{
				m_CurAndroidJavaObject = new AndroidJavaObject("com.omssion.omissionlibrary.SystemConfigPlugin");
			}
			return m_CurAndroidJavaObject;
		}
	}

	public string GetSystemLanguage()
	{
		string empty = string.Empty;
		string text = CurAndroidJavaObject.Call<string>("GetSystemLanguage", Array.Empty<object>());
		empty = ((text == null || !(text == "zh")) ? "English" : "Chinese");
		UnityEngine.Debug.Log(empty);
		return empty;
	}
}
public enum LanguageType
{
	CHINESE,
	ENGLISH
}
public delegate void ChangeLanguage();
public class LanguageManager : BaseManager<LanguageManager>
{
	private string m_Language;

	public Dictionary<string, Dictionary<string, string>> languageDic = new Dictionary<string, Dictionary<string, string>>();

	public Dictionary<string, string> curLaguageData = new Dictionary<string, string>();

	private LitJson.JsonData languageJsonTable;

	public string Language
	{
		get
		{
			return m_Language;
		}
		private set
		{
			m_Language = value;
		}
	}

	public event ChangeLanguage changeLangeuageEvent;

	public void InitLanguageConfig()
	{
		Language = BaseManager<AndroidPluginManager>.GetInstance().GetSystemLanguage();
		languageJsonTable = LitJson.JsonMapper.ToObject(BaseManager<ResourceManager>.GetInstance().Load<TextAsset>("LanguageDataJson").text);
		languageDic = LitJson.JsonMapper.ToObject<Dictionary<string, Dictionary<string, string>>>(languageJsonTable.ToJson());
		languageDic.TryGetValue(Language, out curLaguageData);
	}

	private void GetLanguageByType(string str)
	{
		languageDic.TryGetValue(str, out curLaguageData);
		this.changeLangeuageEvent();
	}

	public void LanguageState(string type)
	{
		if (languageDic.ContainsKey(type))
		{
			GetLanguageByType(type);
		}
	}

	public string GetText(string key)
	{
		string value = string.Empty;
		curLaguageData.TryGetValue(key, out value);
		return value;
	}

	public string GetKeyByLanguageName(string ln)
	{
		foreach (KeyValuePair<string, Dictionary<string, string>> item in languageDic)
		{
			if (item.Value["LanguageName"].Equals(ln))
			{
				return item.Key;
			}
		}
		return string.Empty;
	}
}
public class BaseManager<T> where T : new()
{
	private static T instance;

	public static T GetInstance()
	{
		if (instance == null)
		{
			instance = new T();
		}
		return instance;
	}
}
public abstract class MonoSingleton<T> : MonoBehaviour where T : MonoBehaviour
{
	private static T instance;

	public static T GetInstance()
	{
		if (null == instance)
		{
			instance = UnityEngine.Object.FindObjectOfType(typeof(T)) as T;
			if (instance == null)
			{
				instance = new GameObject(typeof(T).ToString() + "Obj", typeof(T)).GetComponent<T>();
			}
		}
		return instance;
	}
}
public class EventCenter : BaseManager<EventCenter>
{
	private Dictionary<string, IEventInfo> eventDic = new Dictionary<string, IEventInfo>();

	public void AddEventListener<T>(string name, Action<T> action)
	{
		if (eventDic.ContainsKey(name))
		{
			if (eventDic[name] is EventInfo<T>)
			{
				EventInfo<T> obj = eventDic[name] as EventInfo<T>;
				obj.action = (Action<T>)Delegate.Combine(obj.action, action);
			}
			else
			{
				UnityEngine.Debug.LogError("添加了不同参数的委托");
			}
		}
		else
		{
			eventDic.Add(name, new EventInfo<T>(action));
		}
	}

	public void AddEventListener(string name, Action action)
	{
		if (eventDic.ContainsKey(name))
		{
			if (eventDic[name] is EventInfo)
			{
				EventInfo obj = eventDic[name] as EventInfo;
				obj.action = (Action)Delegate.Combine(obj.action, action);
			}
			else
			{
				UnityEngine.Debug.LogError("添加了不同参数的委托");
			}
		}
		else
		{
			eventDic.Add(name, new EventInfo(action));
		}
	}

	public void RemoveEventListener<T>(string name, Action<T> action)
	{
		if (eventDic.ContainsKey(name))
		{
			EventInfo<T> obj = eventDic[name] as EventInfo<T>;
			obj.action = (Action<T>)Delegate.Remove(obj.action, action);
			if (eventDic[name] == null)
			{
				eventDic.Remove(name);
			}
		}
	}

	public void RemoveEventListener(string name, Action action)
	{
		if (eventDic.ContainsKey(name))
		{
			EventInfo obj = eventDic[name] as EventInfo;
			obj.action = (Action)Delegate.Remove(obj.action, action);
			if (eventDic[name] == null)
			{
				eventDic.Remove(name);
			}
		}
	}

	public void EventTrigger<T>(string name, T info)
	{
		if (eventDic.ContainsKey(name))
		{
			if (eventDic[name] is EventInfo<T>)
			{
				(eventDic[name] as EventInfo<T>).action(info);
			}
			else
			{
				UnityEngine.Debug.LogError("调用了不同参数的委托");
			}
		}
	}

	public void EventTrigger(string name)
	{
		if (eventDic.ContainsKey(name))
		{
			if (eventDic[name] is EventInfo)
			{
				(eventDic[name] as EventInfo).action();
			}
			else
			{
				UnityEngine.Debug.LogError("调用了不同参数的委托");
			}
		}
	}

	public void DeleteEvent(string name)
	{
		if (eventDic.ContainsKey(name))
		{
			eventDic.Remove(name);
		}
	}

	public void EventClear()
	{
		eventDic.Clear();
	}
}
public class EventInfo<T> : IEventInfo
{
	public Action<T> action;

	public EventInfo(Action<T> action)
	{
		this.action = action;
	}
}
public class EventInfo : IEventInfo
{
	public Action action;

	public EventInfo(Action action)
	{
		this.action = action;
	}
}
public interface IEventInfo
{
}
public class MonoManager : MonoSingleton<MonoManager>
{
	private event UnityAction updateEvent;

	private void Update()
	{
		if (this.updateEvent != null)
		{
			this.updateEvent();
		}
	}

	public void AddUpdateListen(UnityAction action)
	{
		updateEvent += action;
	}

	public void RemoveUpdateListen(UnityAction action)
	{
		updateEvent -= action;
	}
}
public class ResourceManager : BaseManager<ResourceManager>
{
	public T Load<T>(string name) where T : UnityEngine.Object
	{
		return Resources.Load<T>(name);
	}

	public void LoadAsync<T>(string name, UnityAction<T> action = null) where T : UnityEngine.Object
	{
		MonoSingleton<MonoManager>.GetInstance().StartCoroutine(ReallyLoadResourceAsyn(name, action));
	}

	private IEnumerator ReallyLoadResourceAsyn<T>(string name, UnityAction<T> action = null) where T : UnityEngine.Object
	{
		ResourceRequest r = Resources.LoadAsync<T>(name);
		yield return r;
		if (r.asset != null)
		{
			if (action != null)
			{
				if (r.asset is GameObject)
				{
					action(UnityEngine.Object.Instantiate(r.asset) as T);
				}
				else
				{
					action(r.asset as T);
				}
			}
		}
		else
		{
			UnityEngine.Debug.Log(name + ": null");
		}
	}
}
public class ScenesManager : BaseManager<ScenesManager>
{
	public void LoadScene(string name, UnityAction action)
	{
		SceneManager.LoadScene(name);
		action?.Invoke();
	}

	public void LoadSceneAsyn(string name, UnityAction action)
	{
		MonoSingleton<MonoManager>.GetInstance().StartCoroutine(ReallyLoadSceneAsyn(name, action));
	}

	private IEnumerator ReallyLoadSceneAsyn(string name, UnityAction action)
	{
		AsyncOperation ao = SceneManager.LoadSceneAsync(name);
		ao.allowSceneActivation = false;
		while (!ao.isDone)
		{
			BaseManager<EventCenter>.GetInstance().EventTrigger("LoadSceneAsyn", ao);
			yield return ao.progress;
		}
		action?.Invoke();
	}
}
public class BasePanel : MonoBehaviour
{
	private Dictionary<string, List<UIBehaviour>> controlDic = new Dictionary<string, List<UIBehaviour>>();

	protected void Awake()
	{
		FindChildrenControl<Button>();
		FindChildrenControl<Image>();
		FindChildrenControl<Text>();
		FindChildrenControl<Toggle>();
		FindChildrenControl<Slider>();
		FindChildrenControl<RawImage>();
		FindChildrenControl<InputField>();
		FindChildrenControl<Dropdown>();
		ConfigBaseControl();
	}

	public T GetControl<T>(string name) where T : UIBehaviour
	{
		List<UIBehaviour> value = null;
		if (controlDic.TryGetValue(name, out value))
		{
			for (int i = 0; i < value.Count; i++)
			{
				if (value[i] is T)
				{
					return value[i] as T;
				}
			}
		}
		return null;
	}

	private void FindChildrenControl<T>() where T : UIBehaviour
	{
		T[] componentsInChildren = GetComponentsInChildren<T>(includeInactive: true);
		for (int i = 0; i < componentsInChildren.Length; i++)
		{
			string key = componentsInChildren[i].gameObject.name;
			List<UIBehaviour> value = null;
			if (controlDic.TryGetValue(key, out value))
			{
				if (!value.Contains(componentsInChildren[i]))
				{
					value.Add(componentsInChildren[i]);
				}
			}
			else
			{
				controlDic.Add(key, new List<UIBehaviour> { componentsInChildren[i] });
			}
		}
	}

	protected virtual void ConfigBaseControl()
	{
	}
}
public class UIManager : BaseManager<UIManager>
{
}
public class ControlLoader : MonoBehaviour
{
	public Transform leftRoot;

	public Transform rightRoot;

	private void Start()
	{
		switch (XRSettings.loadedDeviceName)
		{
		case "oculus display":
		{
			Transform obj5 = UnityEngine.Object.Instantiate(BaseManager<ResourceManager>.GetInstance().Load<GameObject>("Prefabs/Handle/Oculus/OculusQuest2_Left")).transform;
			obj5.SetParent(leftRoot);
			obj5.localPosition = Vector3.zero;
			obj5.localRotation = Quaternion.identity;
			Transform obj6 = UnityEngine.Object.Instantiate(BaseManager<ResourceManager>.GetInstance().Load<GameObject>("Prefabs/Handle/Oculus/OculusQuest2_Right")).transform;
			obj6.SetParent(rightRoot);
			obj6.localPosition = Vector3.zero;
			obj6.localRotation = Quaternion.identity;
			break;
		}
		case "PicoXR Display":
		{
			string empty = string.Empty;
			string empty2 = string.Empty;
			if (PXR_Plugin.Controller.UPxr_GetControllerType() == 6)
			{
				empty = "Prefabs/Handle/Pico/PICO 4_L";
				empty2 = "Prefabs/Handle/Pico/PICO 4_R";
			}
			else
			{
				empty = "Prefabs/Handle/Pico/Neo3_L";
				empty2 = "Prefabs/Handle/Pico/Neo3_R";
			}
			Transform obj3 = UnityEngine.Object.Instantiate(BaseManager<ResourceManager>.GetInstance().Load<GameObject>(empty)).transform;
			obj3.SetParent(leftRoot);
			obj3.localPosition = Vector3.zero;
			obj3.localRotation = Quaternion.identity;
			Transform obj4 = UnityEngine.Object.Instantiate(BaseManager<ResourceManager>.GetInstance().Load<GameObject>(empty2)).transform;
			obj4.SetParent(rightRoot);
			obj4.localPosition = Vector3.zero;
			obj3.localRotation = Quaternion.identity;
			break;
		}
		case "GSXR Display":
		{
			Transform obj = UnityEngine.Object.Instantiate(BaseManager<ResourceManager>.GetInstance().Load<GameObject>("Prefabs/Handle/Nolo/Nolo_Left")).transform;
			obj.SetParent(leftRoot);
			obj.localPosition = Vector3.zero;
			obj.localRotation = Quaternion.identity;
			Transform obj2 = UnityEngine.Object.Instantiate(BaseManager<ResourceManager>.GetInstance().Load<GameObject>("Prefabs/Handle/Nolo/Nolo_Right")).transform;
			obj2.SetParent(rightRoot);
			obj2.localPosition = Vector3.zero;
			obj2.localRotation = Quaternion.identity;
			break;
		}
		}
	}
}
public class OmissionConferenceActorProperties
{
	public const string PLAYER_HEARTRATE = "HeartRateValue";
}
public class PhotonManager : PunMonoSingleton<PhotonManager>
{
	private string roomName;

	public bool isSocTip;

	[SerializeField]
	private List<Transform> origins = new List<Transform>();

	private void Awake()
	{
		PhotonNetwork.NetworkingClient.LoadBalancingPeer.SerializationProtocolType = SerializationProtocol.GpBinaryV16;
	}

	private void Start()
	{
		if (PlayerPrefs.HasKey("NickName"))
		{
			PhotonNetwork.LocalPlayer.NickName = PlayerPrefs.GetString("NickName");
		}
	}

	private void OnDestroy()
	{
	}

	public void JoinRoom(string roomName)
	{
		this.roomName = roomName;
		if (PhotonNetwork.IsConnected)
		{
			if (PhotonNetwork.InRoom)
			{
				PhotonNetwork.LeaveRoom();
				return;
			}
			PhotonNetwork.JoinOrCreateRoom(roomName, new RoomOptions
			{
				MaxPlayers = 20
			}, null);
		}
		else
		{
			PhotonNetwork.ConnectUsingSettings();
		}
	}

	public void Reconnect()
	{
		if (!roomName.Equals(string.Empty))
		{
			JoinRoom(roomName);
		}
	}

	public void SetUserNickName(string nickName)
	{
		PhotonNetwork.LocalPlayer.NickName = nickName;
		PlayerPrefs.SetString("NickName", nickName);
	}

	public override void OnConnectedToMaster()
	{
		PhotonNetwork.JoinOrCreateRoom(roomName, new RoomOptions
		{
			MaxPlayers = 20
		}, null);
	}

	public override void OnJoinedRoom()
	{
		if (isSocTip)
		{
			BaseManager<AudioManager>.GetInstance().PlayAudioWithLanguage("客服正在上线中");
		}
		else
		{
			BaseManager<AudioManager>.GetInstance().PlayAudioWithLanguage("成功加入房间");
		}
		roomName = PhotonNetwork.CurrentRoom.Name;
		InstantiateUserGameObject();
		MonoSingleton<ObjManager>.GetInstance().SetRoomObjActive("Projection", active: true);
		BaseManager<EventCenter>.GetInstance().EventTrigger("OnJoinRoom", roomName);
		BaseManager<EventCenter>.GetInstance().EventTrigger("IsJoinRoom", info: true);
	}

	public override void OnLeftRoom()
	{
		BaseManager<AudioManager>.GetInstance().PlayAudioWithLanguage("连接已断开");
		BaseManager<EventCenter>.GetInstance().EventTrigger("OnJoinRoom", string.Empty);
		BaseManager<EventCenter>.GetInstance().EventTrigger("IsJoinRoom", info: false);
	}

	public override void OnJoinRoomFailed(short returnCode, string message)
	{
		UnityEngine.Debug.Log("!!!!!!!!!!!!");
		PhotonNetwork.JoinOrCreateRoom(roomName, new RoomOptions
		{
			MaxPlayers = 20
		}, null);
		BaseManager<EventCenter>.GetInstance().EventTrigger("IsJoinRoom", info: false);
	}

	private void InstantiateUserGameObject()
	{
		Vector3 position = origins[PhotonNetwork.LocalPlayer.ActorNumber % 9].position;
		Quaternion rotation = origins[PhotonNetwork.LocalPlayer.ActorNumber % 9].rotation;
		Camera.main.transform.parent.parent.position = position;
		Camera.main.transform.parent.parent.rotation = rotation;
		PhotonNetwork.Instantiate("Prefabs/RoleModel", position, rotation, 0, new object[3]
		{
			UnityEngine.Random.value,
			UnityEngine.Random.value,
			UnityEngine.Random.value
		});
		MonoSingleton<ObjManager>.GetInstance().ResetMenuTransform();
	}

	public void SetRoomProperties(ExitGames.Client.Photon.Hashtable props)
	{
		PhotonNetwork.CurrentRoom.SetCustomProperties(props);
	}

	public override void OnPlayerEnteredRoom(Player newPlayer)
	{
		BaseManager<EventCenter>.GetInstance().EventTrigger("OnPlayerEnteredRoom");
	}

	public override void OnPlayerLeftRoom(Player otherPlayer)
	{
		BaseManager<EventCenter>.GetInstance().EventTrigger("OnPlayerLeftRoom");
	}

	public override void OnRoomPropertiesUpdate(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
	{
		foreach (DictionaryEntry item in propertiesThatChanged)
		{
			BaseManager<EventCenter>.GetInstance().EventTrigger("OnRoomPropertiesUpdate", item);
		}
	}

	public override void OnPlayerPropertiesUpdate(Player targetPlayer, ExitGames.Client.Photon.Hashtable changedProps)
	{
		BaseManager<EventCenter>.GetInstance().EventTrigger("OnPlayerPropertiesUpdate");
	}
}
public abstract class PunMonoSingleton<T> : MonoBehaviourPunCallbacks where T : MonoBehaviourPunCallbacks
{
	private static T instance;

	public static T GetInstance()
	{
		if (null == instance)
		{
			instance = UnityEngine.Object.FindObjectOfType(typeof(T)) as T;
			if (instance == null)
			{
				instance = new GameObject(typeof(T).ToString() + "Obj", typeof(T)).GetComponent<T>();
			}
		}
		return instance;
	}
}
public class TriggerRay : MonoBehaviourPun
{
	private LineRenderer lineRenderer;

	private RaycastHit rayinfo;

	private bool down;

	private bool isPress;

	public XRNode node;

	private void Start()
	{
		lineRenderer = GetComponent<LineRenderer>();
	}

	private void LateUpdate()
	{
		if (!base.photonView.IsMine)
		{
			return;
		}
		if (InputDevices.GetDeviceAtXRNode(node).TryGetFeatureValue(UnityEngine.XR.CommonUsages.triggerButton, out down) && down)
		{
			if (!isPress)
			{
				isPress = true;
			}
			base.photonView.RPC("SetRay", RpcTarget.All, true);
		}
		else if (isPress)
		{
			isPress = false;
			base.photonView.RPC("SetRay", RpcTarget.All, false);
		}
	}

	[PunRPC]
	private void SetRay(bool enable)
	{
		if (enable)
		{
			lineRenderer.SetPosition(0, base.transform.position);
			lineRenderer.SetPosition(1, base.transform.position + base.transform.forward * 10f);
			lineRenderer.enabled = true;
		}
		else
		{
			lineRenderer.enabled = false;
		}
	}
}
public class UISettingPanel : BasePanel
{
	private Toggle platform_0_Toggle;

	private Toggle platform_1_Toggle;

	private Toggle projectionToggle;

	private Toggle microphoneToggle;

	private Toggle headsetToggle;

	private Button reconnectButton;

	private Button switchBackgroundButton;

	private Text platform_0_Text;

	private Text platform_1_Text;

	private Text projectionText;

	private Text microphoneText;

	private Text headsetText;

	private Text reconnectText;

	private Text switchBackgroundText;

	private Text pcScreencastTips;

	protected override void ConfigBaseControl()
	{
		platform_0_Toggle = GetControl<Toggle>("Platform_0_Toggle");
		platform_1_Toggle = GetControl<Toggle>("Platform_1_Toggle");
		projectionToggle = GetControl<Toggle>("ProjectionToggle");
		microphoneToggle = GetControl<Toggle>("MicrophoneToggle");
		headsetToggle = GetControl<Toggle>("HeadsetToggle");
		reconnectButton = GetControl<Button>("ReconnButton");
		switchBackgroundButton = GetControl<Button>("SwitchBackgroundButton");
		platform_0_Text = GetControl<Text>("Platform_0_Text");
		platform_1_Text = GetControl<Text>("Platform_1_Text");
		projectionText = GetControl<Text>("ProjectionText");
		microphoneText = GetControl<Text>("MicrophoneText");
		headsetText = GetControl<Text>("HeadsetText");
		reconnectText = GetControl<Text>("ReconnButtonText");
		switchBackgroundText = GetControl<Text>("SwitchBackgroundText");
		pcScreencastTips = GetControl<Text>("PCScreencastTips");
	}

	private new void Awake()
	{
		base.Awake();
		BaseManager<EventCenter>.GetInstance().AddEventListener<bool>("IsJoinRoom", IsJoinRoom);
		BaseManager<EventCenter>.GetInstance().AddEventListener<ObjData>("RoomObjActiveUpdate", ObjSwitch);
		BaseManager<EventCenter>.GetInstance().AddEventListener<string>("Agora_OnJoinChannelSuccess", Agora_OnJoinChannelSuccess);
	}

	private void Start()
	{
		ChangeLangeuageEvent();
		platform_0_Toggle.onValueChanged.AddListener(delegate(bool isOn)
		{
			MonoSingleton<ObjManager>.GetInstance().SetRoomObjActive("Platform_0", isOn);
		});
		platform_1_Toggle.onValueChanged.AddListener(delegate(bool isOn)
		{
			MonoSingleton<ObjManager>.GetInstance().SetRoomObjActive("Platform_1", isOn);
		});
		projectionToggle.onValueChanged.AddListener(delegate(bool isOn)
		{
			MonoSingleton<ObjManager>.GetInstance().SetRoomObjActive("Projection", isOn);
		});
		microphoneToggle.onValueChanged.AddListener(delegate(bool isOn)
		{
			MonoSingleton<AgoraManager>.GetInstance().MuteLocalAudioStream(isOn);
		});
		headsetToggle.onValueChanged.AddListener(delegate(bool isOn)
		{
			MonoSingleton<AgoraManager>.GetInstance().MuteAllRemoteAudioStreams(isOn);
		});
		reconnectButton.onClick.AddListener(delegate
		{
			PunMonoSingleton<PhotonManager>.GetInstance().Reconnect();
			MonoSingleton<AgoraManager>.GetInstance().Reconnect();
		});
		switchBackgroundButton.onClick.AddListener(delegate
		{
			MonoSingleton<ObjManager>.GetInstance().SwitchBackground();
		});
		base.gameObject.SetActive(value: false);
	}

	private void OnDestroy()
	{
		BaseManager<EventCenter>.GetInstance().RemoveEventListener<bool>("IsJoinRoom", IsJoinRoom);
		BaseManager<EventCenter>.GetInstance().RemoveEventListener<ObjData>("RoomObjActiveUpdate", ObjSwitch);
		BaseManager<EventCenter>.GetInstance().AddEventListener<string>("Agora_OnJoinChannelSuccess", Agora_OnJoinChannelSuccess);
	}

	public void ObjSwitch(ObjData data)
	{
		if (data.name == "Platform_0")
		{
			platform_0_Toggle.SetIsOnWithoutNotify(data.active);
		}
		else if (data.name == "Platform_1")
		{
			platform_1_Toggle.SetIsOnWithoutNotify(data.active);
		}
		else if (data.name == "Projection")
		{
			projectionToggle.SetIsOnWithoutNotify(data.active);
		}
	}

	private void IsJoinRoom(bool isOnRoom)
	{
		base.gameObject.SetActive(isOnRoom);
	}

	private void ChangeLangeuageEvent()
	{
		platform_0_Text.text = BaseManager<LanguageManager>.GetInstance().GetText("Platform_0_Text");
		platform_1_Text.text = BaseManager<LanguageManager>.GetInstance().GetText("Platform_1_Text");
		projectionText.text = BaseManager<LanguageManager>.GetInstance().GetText("ProjectionText");
		microphoneText.text = BaseManager<LanguageManager>.GetInstance().GetText("MicrophoneText");
		headsetText.text = BaseManager<LanguageManager>.GetInstance().GetText("HeadsetText");
		reconnectText.text = BaseManager<LanguageManager>.GetInstance().GetText("ReconnectText");
		switchBackgroundText.text = BaseManager<LanguageManager>.GetInstance().GetText("SwitchBackgroundText");
		pcScreencastTips.text = BaseManager<LanguageManager>.GetInstance().GetText("PCScreencastTips");
	}

	private void Agora_OnJoinChannelSuccess(string channelName)
	{
		microphoneToggle.SetIsOnWithoutNotify(value: false);
		headsetToggle.SetIsOnWithoutNotify(value: false);
	}
}
public class UIRoomPanel : BasePanel
{
	private string SOCUrl = "https://omission.omission.vip/meeting/call?room=";

	private List<Button> keyBoards = new List<Button>();

	private Text panelTitleText;

	private Text roomNameText;

	private Button delButton;

	private Button backspaceButton;

	private Button joinButton;

	private Button socButton;

	private Text uIRoomNameText;

	private Text uIChannelNameText;

	private Text uIRoomNameTitleText;

	private Text uIChannelNameTitleText;

	private Text delButtonText;

	private Text backspaceButtonText;

	private Text joinRoomButtonText;

	private Text roomInputTipText;

	private Text socText;

	private Text socTipsText;

	private Text timeText;

	private bool viewSocTips;

	private bool preSocHttp = true;

	private new void Awake()
	{
		base.Awake();
		BaseManager<EventCenter>.GetInstance().AddEventListener<string>("OnJoinRoom", SetCurRoomName);
		BaseManager<EventCenter>.GetInstance().AddEventListener<string>("Agora_OnJoinChannelSuccess", Agora_OnJoinChannelSuccess);
		BaseManager<EventCenter>.GetInstance().AddEventListener("Agora_OnLeaveChannel", Agora_OnLeaveChannel);
		BaseManager<EventCenter>.GetInstance().AddEventListener<bool>("IsJoinRoom", IsJoinRoom);
	}

	private void OnDestroy()
	{
		BaseManager<EventCenter>.GetInstance().RemoveEventListener<string>("OnJoinRoom", SetCurRoomName);
		BaseManager<EventCenter>.GetInstance().RemoveEventListener<string>("Agora_OnJoinChannelSuccess", Agora_OnJoinChannelSuccess);
		BaseManager<EventCenter>.GetInstance().RemoveEventListener("Agora_OnLeaveChannel", Agora_OnLeaveChannel);
		BaseManager<EventCenter>.GetInstance().RemoveEventListener<bool>("IsJoinRoom", IsJoinRoom);
	}

	protected override void ConfigBaseControl()
	{
		panelTitleText = GetControl<Text>("PanelTitleText");
		roomNameText = GetControl<Text>("RoomNameText");
		delButton = GetControl<Button>("DelButton");
		backspaceButton = GetControl<Button>("BackspaceButton");
		joinButton = GetControl<Button>("JoinRoomButton");
		uIRoomNameText = GetControl<Text>("UIRoomNameText");
		uIChannelNameText = GetControl<Text>("UIChannelNameText");
		uIRoomNameTitleText = GetControl<Text>("UIRoomNameTitleText");
		uIChannelNameTitleText = GetControl<Text>("UIChannelNameTitleText");
		delButtonText = GetControl<Text>("DelButtonText");
		backspaceButtonText = GetControl<Text>("BackspaceButtonText");
		joinRoomButtonText = GetControl<Text>("JoinRoomButtonText");
		roomInputTipText = GetControl<Text>("RoomInputTipText");
		socButton = GetControl<Button>("SOCButton");
		socText = GetControl<Text>("SOCText");
		socTipsText = GetControl<Text>("SocTipsText");
		for (int i = 0; i <= 9; i++)
		{
			keyBoards.Add(GetControl<Button>(i.ToString()));
		}
		timeText = GetControl<Text>("TimeText");
	}

	private void Start()
	{
		ChangeLangeuageEvent();
		for (int i = 0; i < keyBoards.Count; i++)
		{
			int key = i;
			keyBoards[i].onClick.AddListener(delegate
			{
				roomNameText.text += keyBoards[key].GetComponentInChildren<Text>(includeInactive: true).text;
			});
		}
		delButton.onClick.AddListener(delegate
		{
			roomNameText.text = string.Empty;
		});
		backspaceButton.onClick.AddListener(delegate
		{
			roomNameText.text = roomNameText.text.Substring(0, roomNameText.text.Length - 1);
		});
		joinButton.onClick.AddListener(delegate
		{
			if (!roomNameText.text.Equals(string.Empty))
			{
				socButton.gameObject.SetActive(value: false);
				PunMonoSingleton<PhotonManager>.GetInstance().isSocTip = false;
				PunMonoSingleton<PhotonManager>.GetInstance().JoinRoom(roomNameText.text);
				MonoSingleton<AgoraManager>.GetInstance().JoinChannel(roomNameText.text);
			}
		});
		socButton.onClick.AddListener(delegate
		{
			socButton.gameObject.SetActive(value: false);
			viewSocTips = true;
			PunMonoSingleton<PhotonManager>.GetInstance().isSocTip = true;
			int num = UnityEngine.Random.Range(10000, 99999);
			PunMonoSingleton<PhotonManager>.GetInstance().JoinRoom(num.ToString());
			MonoSingleton<AgoraManager>.GetInstance().JoinChannel(num.ToString());
		});
	}

	private void FixedUpdate()
	{
		if (timeText != null)
		{
			timeText.text = DateTime.Now.ToString();
		}
	}

	private IEnumerator SocTip()
	{
		int time = 60;
		socTipsText.gameObject.SetActive(value: true);
		while (time > 0)
		{
			socTipsText.text = BaseManager<LanguageManager>.GetInstance().GetText("SocTips") + "(" + time-- + ")";
			yield return new WaitForSeconds(1f);
		}
		socTipsText.gameObject.SetActive(value: false);
	}

	private void SetCurRoomName(string roomName)
	{
		panelTitleText.text = BaseManager<LanguageManager>.GetInstance().GetText("RoomPanelTitle") + roomName;
		if (!viewSocTips)
		{
			return;
		}
		viewSocTips = false;
		if (!preSocHttp)
		{
			return;
		}
		preSocHttp = false;
		LitJson.JsonData jsonData = new LitJson.JsonData();
		jsonData["RoonName"] = roomName;
		jsonData["UID"] = SystemInfo.deviceUniqueIdentifier;
		jsonData["Date"] = DateTime.Now.ToString();
		BaseManager<HttpManager>.GetInstance().HttpPost(SOCUrl, jsonData.ToJson(), delegate(bool suc, string res)
		{
			if (suc)
			{
				MonoSingleton<MonoManager>.GetInstance().StartCoroutine(SocTip());
			}
			UnityEngine.Debug.Log(jsonData.ToJson());
		});
	}

	private void IsJoinRoom(bool isJoin)
	{
	}

	private void ChangeLangeuageEvent()
	{
		delButtonText.text = BaseManager<LanguageManager>.GetInstance().GetText("DelButtonText");
		backspaceButtonText.text = BaseManager<LanguageManager>.GetInstance().GetText("BackspaceButtonText");
		joinRoomButtonText.text = BaseManager<LanguageManager>.GetInstance().GetText("JoinRoomButtonText");
		uIRoomNameTitleText.text = BaseManager<LanguageManager>.GetInstance().GetText("uIRoomNameTitleText");
		uIChannelNameTitleText.text = BaseManager<LanguageManager>.GetInstance().GetText("uIChannelNameTitleText");
		roomInputTipText.text = BaseManager<LanguageManager>.GetInstance().GetText("RoomInputTip");
		socText.text = BaseManager<LanguageManager>.GetInstance().GetText("SoftwareOLconsultation");
	}

	private void Agora_OnJoinChannelSuccess(string channelName)
	{
		uIChannelNameText.text = channelName;
	}

	private void Agora_OnLeaveChannel()
	{
		uIChannelNameText.text = string.Empty;
	}
}
public class FlatVideoWinPanel : BasePanel
{
	private Button closePanelButton;

	private void Start()
	{
		BaseManager<EventCenter>.GetInstance().AddEventListener("OnVideoStop", OnVideoStop);
		closePanelButton.onClick.AddListener(delegate
		{
			MonoSingleton<VideoControl>.GetInstance().VideoStop();
			MonoSingleton<ObjManager>.GetInstance().VideoCanvas.SetActive(value: false);
			MonoSingleton<ObjManager>.GetInstance().MenuActive(negation: false, active: true);
		});
	}

	private void OnDestroy()
	{
		BaseManager<EventCenter>.GetInstance().RemoveEventListener("OnVideoStop", OnVideoStop);
	}

	private void OnVideoStop()
	{
		MonoSingleton<ObjManager>.GetInstance().VideoCanvas.SetActive(value: false);
		MonoSingleton<ObjManager>.GetInstance().MenuActive(negation: false, active: true);
	}

	protected override void ConfigBaseControl()
	{
		closePanelButton = GetControl<Button>("ClosePanelButton");
	}
}
public class VideoControl : MonoSingleton<VideoControl>
{
	public VideoPlayer videoPlayer;

	public VideoClip picoVideoClip;

	public VideoClip noloVideoClip;

	private void Awake()
	{
		if (!PlayerPrefs.HasKey("IsInit"))
		{
			PlayerPrefs.SetInt("IsInit", 1);
			MonoSingleton<ObjManager>.GetInstance().VideoCanvas.SetActive(value: true);
			MonoSingleton<ObjManager>.GetInstance().MenuActive(negation: false);
			switch (XRSettings.loadedDeviceName)
			{
			case "oculus display":
			case "PicoXR Display":
				videoPlayer.clip = picoVideoClip;
				break;
			case "GSXR Display":
				videoPlayer.clip = noloVideoClip;
				break;
			default:
				videoPlayer.clip = picoVideoClip;
				break;
			}
			videoPlayer.Play();
		}
	}

	private void Start()
	{
		videoPlayer.loopPointReached += delegate
		{
			BaseManager<EventCenter>.GetInstance().EventTrigger("OnVideoStop");
		};
	}

	public void VideoStop()
	{
		if (videoPlayer != null)
		{
			videoPlayer.Stop();
		}
	}
}
namespace Omission.Online
{
	public class AttachToCamera : MonoBehaviourPun, IPunInstantiateMagicCallback
	{
		private GameObject cam;

		public string objname;

		public SkinnedMeshRenderer skinned;

		private void Start()
		{
			if (base.photonView.IsMine)
			{
				cam = GameObject.Find(objname);
				base.transform.SetParent(cam.transform);
				base.transform.localPosition = Vector3.zero;
				base.transform.localRotation = Quaternion.identity;
			}
		}

		public void OnPhotonInstantiate(PhotonMessageInfo info)
		{
			object[] instantiationData = info.photonView.InstantiationData;
			if (instantiationData.Length != 0)
			{
				skinned.material.SetColor("_Tex_Color", new Color((float)instantiationData[0], (float)instantiationData[1], (float)instantiationData[2]));
			}
		}
	}
}
namespace Photon.Realtime.Demo
{
	public class ConnectAndJoinRandomLb : MonoBehaviour, IConnectionCallbacks, IMatchmakingCallbacks, ILobbyCallbacks
	{
		[SerializeField]
		private AppSettings appSettings = new AppSettings();

		private LoadBalancingClient lbc;

		private ConnectionHandler ch;

		public Text StateUiText;

		public void Start()
		{
			lbc = new LoadBalancingClient();
			lbc.AddCallbackTarget(this);
			if (!lbc.ConnectUsingSettings(appSettings))
			{
				UnityEngine.Debug.LogError("Error while connecting");
			}
			ch = base.gameObject.GetComponent<ConnectionHandler>();
			if (ch != null)
			{
				ch.Client = lbc;
				ch.StartFallbackSendAckThread();
			}
		}

		public void Update()
		{
			LoadBalancingClient loadBalancingClient = lbc;
			if (loadBalancingClient != null)
			{
				loadBalancingClient.Service();
				Text stateUiText = StateUiText;
				string text = loadBalancingClient.State.ToString();
				if (stateUiText != null && !stateUiText.text.Equals(text))
				{
					stateUiText.text = "State: " + text;
				}
			}
		}

		public void OnConnected()
		{
		}

		public void OnConnectedToMaster()
		{
			UnityEngine.Debug.Log("OnConnectedToMaster");
			lbc.OpJoinRandomRoom();
		}

		public void OnDisconnected(DisconnectCause cause)
		{
			UnityEngine.Debug.Log("OnDisconnected(" + cause.ToString() + ")");
		}

		public void OnCustomAuthenticationResponse(Dictionary<string, object> data)
		{
		}

		public void OnCustomAuthenticationFailed(string debugMessage)
		{
		}

		public void OnRegionListReceived(RegionHandler regionHandler)
		{
			UnityEngine.Debug.Log("OnRegionListReceived");
			regionHandler.PingMinimumOfRegions(OnRegionPingCompleted, null);
		}

		public void OnRoomListUpdate(List<RoomInfo> roomList)
		{
		}

		public void OnLobbyStatisticsUpdate(List<TypedLobbyInfo> lobbyStatistics)
		{
		}

		public void OnJoinedLobby()
		{
		}

		public void OnLeftLobby()
		{
		}

		public void OnFriendListUpdate(List<FriendInfo> friendList)
		{
		}

		public void OnCreatedRoom()
		{
		}

		public void OnCreateRoomFailed(short returnCode, string message)
		{
		}

		public void OnJoinedRoom()
		{
			UnityEngine.Debug.Log("OnJoinedRoom");
		}

		public void OnJoinRoomFailed(short returnCode, string message)
		{
		}

		public void OnJoinRandomFailed(short returnCode, string message)
		{
			UnityEngine.Debug.Log("OnJoinRandomFailed");
			lbc.OpCreateRoom(new EnterRoomParams());
		}

		public void OnLeftRoom()
		{
		}

		private void OnRegionPingCompleted(RegionHandler regionHandler)
		{
			UnityEngine.Debug.Log("OnRegionPingCompleted " + (object)regionHandler.BestRegion);
			UnityEngine.Debug.Log("RegionPingSummary: " + regionHandler.SummaryToCache);
			lbc.ConnectToRegionMaster(regionHandler.BestRegion.Code);
		}
	}
}
namespace Photon.Chat.Demo
{
	public static class AppSettingsExtensions
	{
		public static ChatAppSettings GetChatSettings(this AppSettings appSettings)
		{
			return new ChatAppSettings
			{
				AppIdChat = appSettings.AppIdChat,
				AppVersion = appSettings.AppVersion,
				FixedRegion = (appSettings.IsBestRegion ? null : appSettings.FixedRegion),
				NetworkLogging = appSettings.NetworkLogging,
				Protocol = appSettings.Protocol,
				EnableProtocolFallback = appSettings.EnableProtocolFallback,
				Server = (appSettings.IsDefaultNameServer ? null : appSettings.Server),
				Port = (ushort)appSettings.Port
			};
		}
	}
	public class ChannelSelector : MonoBehaviour, IPointerClickHandler, IEventSystemHandler
	{
		public string Channel;

		public void SetChannel(string channel)
		{
			Channel = channel;
			GetComponentInChildren<Text>().text = Channel;
		}

		public void OnPointerClick(PointerEventData eventData)
		{
			UnityEngine.Object.FindObjectOfType<ChatGui>().ShowChannel(Channel);
		}
	}
	[ExecuteInEditMode]
	public class ChatAppIdCheckerUI : MonoBehaviour
	{
		public Text Description;

		public void Update()
		{
			if (string.IsNullOrEmpty(PhotonNetwork.PhotonServerSettings.AppSettings.AppIdChat))
			{
				if (Description != null)
				{
					Description.text = "<Color=Red>WARNING:</Color>\nPlease setup a Chat AppId in the PhotonServerSettings file.";
				}
			}
			else if (Description != null)
			{
				Description.text = string.Empty;
			}
		}
	}
	public class ChatGui : MonoBehaviour, IChatClientListener
	{
		public string[] ChannelsToJoinOnConnect;

		public string[] FriendsList;

		public int HistoryLengthToFetch;

		private string selectedChannelName;

		public ChatClient chatClient;

		protected internal ChatAppSettings chatAppSettings;

		public GameObject missingAppIdErrorPanel;

		public GameObject ConnectingLabel;

		public RectTransform ChatPanel;

		public GameObject UserIdFormPanel;

		public InputField InputFieldChat;

		public Text CurrentChannelText;

		public Toggle ChannelToggleToInstantiate;

		public GameObject FriendListUiItemtoInstantiate;

		private readonly Dictionary<string, Toggle> channelToggles = new Dictionary<string, Toggle>();

		private readonly Dictionary<string, FriendItem> friendListItemLUT = new Dictionary<string, FriendItem>();

		public bool ShowState = true;

		public GameObject Title;

		public Text StateText;

		public Text UserIdText;

		private static string HelpText = "\n    -- HELP --\nTo subscribe to channel(s) (channelnames are case sensitive) :  \n\t<color=#E07B00>\\subscribe</color> <color=green><list of channelnames></color>\n\tor\n\t<color=#E07B00>\\s</color> <color=green><list of channelnames></color>\n\nTo leave channel(s):\n\t<color=#E07B00>\\unsubscribe</color> <color=green><list of channelnames></color>\n\tor\n\t<color=#E07B00>\\u</color> <color=green><list of channelnames></color>\n\nTo switch the active channel\n\t<color=#E07B00>\\join</color> <color=green><channelname></color>\n\tor\n\t<color=#E07B00>\\j</color> <color=green><channelname></color>\n\nTo send a private message: (username are case sensitive)\n\t\\<color=#E07B00>msg</color> <color=green><username></color> <color=green><message></color>\n\nTo change status:\n\t\\<color=#E07B00>state</color> <color=green><stateIndex></color> <color=green><message></color>\n<color=green>0</color> = Offline <color=green>1</color> = Invisible <color=green>2</color> = Online <color=green>3</color> = Away \n<color=green>4</color> = Do not disturb <color=green>5</color> = Looking For Group <color=green>6</color> = Playing\n\nTo clear the current chat tab (private chats get closed):\n\t<color=#E07B00>\\clear</color>";

		public int TestLength = 2048;

		private byte[] testBytes = new byte[2048];

		public string UserName { get; set; }

		public void Start()
		{
			UnityEngine.Object.DontDestroyOnLoad(base.gameObject);
			UserIdText.text = "";
			StateText.text = "";
			StateText.gameObject.SetActive(value: true);
			UserIdText.gameObject.SetActive(value: true);
			Title.SetActive(value: true);
			ChatPanel.gameObject.SetActive(value: false);
			ConnectingLabel.SetActive(value: false);
			if (string.IsNullOrEmpty(UserName))
			{
				UserName = "user" + Environment.TickCount % 99;
			}
			chatAppSettings = PhotonNetwork.PhotonServerSettings.AppSettings.GetChatSettings();
			bool flag = !string.IsNullOrEmpty(chatAppSettings.AppIdChat);
			missingAppIdErrorPanel.SetActive(!flag);
			UserIdFormPanel.gameObject.SetActive(flag);
			if (!flag)
			{
				UnityEngine.Debug.LogError("You need to set the chat app ID in the PhotonServerSettings file in order to continue.");
			}
		}

		public void Connect()
		{
			UserIdFormPanel.gameObject.SetActive(value: false);
			chatClient = new ChatClient(this);
			chatClient.UseBackgroundWorkerForSending = true;
			chatClient.AuthValues = new AuthenticationValues(UserName);
			chatClient.ConnectUsingSettings(chatAppSettings);
			ChannelToggleToInstantiate.gameObject.SetActive(value: false);
			UnityEngine.Debug.Log("Connecting as: " + UserName);
			ConnectingLabel.SetActive(value: true);
		}

		public void OnDestroy()
		{
			if (chatClient != null)
			{
				chatClient.Disconnect();
			}
		}

		public void OnApplicationQuit()
		{
			if (chatClient != null)
			{
				chatClient.Disconnect();
			}
		}

		public void Update()
		{
			if (chatClient != null)
			{
				chatClient.Service();
			}
			if (StateText == null)
			{
				UnityEngine.Object.Destroy(base.gameObject);
			}
			else
			{
				StateText.gameObject.SetActive(ShowState);
			}
		}

		public void OnEnterSend()
		{
			if (Input.GetKey(KeyCode.Return) || Input.GetKey(KeyCode.KeypadEnter))
			{
				SendChatMessage(InputFieldChat.text);
				InputFieldChat.text = "";
			}
		}

		public void OnClickSend()
		{
			if (InputFieldChat != null)
			{
				SendChatMessage(InputFieldChat.text);
				InputFieldChat.text = "";
			}
		}

		private void SendChatMessage(string inputLine)
		{
			if (string.IsNullOrEmpty(inputLine))
			{
				return;
			}
			if ("test".Equals(inputLine))
			{
				if (TestLength != testBytes.Length)
				{
					testBytes = new byte[TestLength];
				}
				chatClient.SendPrivateMessage(chatClient.AuthValues.UserId, testBytes, forwardAsWebhook: true);
			}
			bool flag = chatClient.PrivateChannels.ContainsKey(selectedChannelName);
			string target = string.Empty;
			if (flag)
			{
				target = selectedChannelName.Split(':')[1];
			}
			if (inputLine[0].Equals('\\'))
			{
				string[] array = inputLine.Split(new char[1] { ' ' }, 2);
				if (array[0].Equals("\\help"))
				{
					PostHelpToCurrentChannel();
				}
				if (array[0].Equals("\\state"))
				{
					int status = 0;
					List<string> list = new List<string>();
					list.Add("i am state " + status);
					string[] array2 = array[1].Split(' ', ',');
					if (array2.Length != 0)
					{
						status = int.Parse(array2[0]);
					}
					if (array2.Length > 1)
					{
						list.Add(array2[1]);
					}
					chatClient.SetOnlineStatus(status, list.ToArray());
				}
				else if ((array[0].Equals("\\subscribe") || array[0].Equals("\\s")) && !string.IsNullOrEmpty(array[1]))
				{
					chatClient.Subscribe(array[1].Split(' ', ','));
				}
				else if ((array[0].Equals("\\unsubscribe") || array[0].Equals("\\u")) && !string.IsNullOrEmpty(array[1]))
				{
					chatClient.Unsubscribe(array[1].Split(' ', ','));
				}
				else if (array[0].Equals("\\clear"))
				{
					ChatChannel channel;
					if (flag)
					{
						chatClient.PrivateChannels.Remove(selectedChannelName);
					}
					else if (chatClient.TryGetChannel(selectedChannelName, flag, out channel))
					{
						channel.ClearMessages();
					}
				}
				else if (array[0].Equals("\\msg") && !string.IsNullOrEmpty(array[1]))
				{
					string[] array3 = array[1].Split(new char[2] { ' ', ',' }, 2);
					if (array3.Length >= 2)
					{
						string target2 = array3[0];
						string message = array3[1];
						chatClient.SendPrivateMessage(target2, message);
					}
				}
				else if ((array[0].Equals("\\join") || array[0].Equals("\\j")) && !string.IsNullOrEmpty(array[1]))
				{
					string[] array4 = array[1].Split(new char[2] { ' ', ',' }, 2);
					if (channelToggles.ContainsKey(array4[0]))
					{
						ShowChannel(array4[0]);
						return;
					}
					chatClient.Subscribe(new string[1] { array4[0] });
				}
				else
				{
					UnityEngine.Debug.Log("The command '" + array[0] + "' is invalid.");
				}
			}
			else if (flag)
			{
				chatClient.SendPrivateMessage(target, inputLine);
			}
			else
			{
				chatClient.PublishMessage(selectedChannelName, inputLine);
			}
		}

		public void PostHelpToCurrentChannel()
		{
			CurrentChannelText.text += HelpText;
		}

		public void DebugReturn(DebugLevel level, string message)
		{
			switch (level)
			{
			case DebugLevel.ERROR:
				UnityEngine.Debug.LogError(message);
				break;
			case DebugLevel.WARNING:
				UnityEngine.Debug.LogWarning(message);
				break;
			default:
				UnityEngine.Debug.Log(message);
				break;
			}
		}

		public void OnConnected()
		{
			if (ChannelsToJoinOnConnect != null && ChannelsToJoinOnConnect.Length != 0)
			{
				chatClient.Subscribe(ChannelsToJoinOnConnect, HistoryLengthToFetch);
			}
			ConnectingLabel.SetActive(value: false);
			UserIdText.text = "Connected as " + UserName;
			ChatPanel.gameObject.SetActive(value: true);
			if (FriendsList != null && FriendsList.Length != 0)
			{
				chatClient.AddFriends(FriendsList);
				string[] friendsList = FriendsList;
				foreach (string text in friendsList)
				{
					if (FriendListUiItemtoInstantiate != null && text != UserName)
					{
						InstantiateFriendButton(text);
					}
				}
			}
			if (FriendListUiItemtoInstantiate != null)
			{
				FriendListUiItemtoInstantiate.SetActive(value: false);
			}
			chatClient.SetOnlineStatus(2);
		}

		public void OnDisconnected()
		{
			ConnectingLabel.SetActive(value: false);
		}

		public void OnChatStateChange(ChatState state)
		{
			StateText.text = state.ToString();
		}

		public void OnSubscribed(string[] channels, bool[] results)
		{
			foreach (string channelName in channels)
			{
				chatClient.PublishMessage(channelName, "says 'hi'.");
				if (ChannelToggleToInstantiate != null)
				{
					InstantiateChannelButton(channelName);
				}
			}
			UnityEngine.Debug.Log("OnSubscribed: " + string.Join(", ", channels));
			ShowChannel(channels[0]);
		}

		public void OnSubscribed(string channel, string[] users, Dictionary<object, object> properties)
		{
			UnityEngine.Debug.LogFormat("OnSubscribed: {0}, users.Count: {1} Channel-props: {2}.", channel, users.Length, properties.ToStringFull());
		}

		private void InstantiateChannelButton(string channelName)
		{
			if (channelToggles.ContainsKey(channelName))
			{
				UnityEngine.Debug.Log("Skipping creation for an existing channel toggle.");
				return;
			}
			Toggle toggle = UnityEngine.Object.Instantiate(ChannelToggleToInstantiate);
			toggle.gameObject.SetActive(value: true);
			toggle.GetComponentInChildren<ChannelSelector>().SetChannel(channelName);
			toggle.transform.SetParent(ChannelToggleToInstantiate.transform.parent, worldPositionStays: false);
			channelToggles.Add(channelName, toggle);
		}

		private void InstantiateFriendButton(string friendId)
		{
			GameObject obj = UnityEngine.Object.Instantiate(FriendListUiItemtoInstantiate);
			obj.gameObject.SetActive(value: true);
			FriendItem component = obj.GetComponent<FriendItem>();
			component.FriendId = friendId;
			obj.transform.SetParent(FriendListUiItemtoInstantiate.transform.parent, worldPositionStays: false);
			friendListItemLUT[friendId] = component;
		}

		public void OnUnsubscribed(string[] channels)
		{
			foreach (string text in channels)
			{
				if (channelToggles.ContainsKey(text))
				{
					UnityEngine.Object.Destroy(channelToggles[text].gameObject);
					channelToggles.Remove(text);
					UnityEngine.Debug.Log("Unsubscribed from channel '" + text + "'.");
					if (text == selectedChannelName && channelToggles.Count > 0)
					{
						IEnumerator<KeyValuePair<string, Toggle>> enumerator = channelToggles.GetEnumerator();
						enumerator.MoveNext();
						ShowChannel(enumerator.Current.Key);
						enumerator.Current.Value.isOn = true;
					}
				}
				else
				{
					UnityEngine.Debug.Log("Can't unsubscribe from channel '" + text + "' because you are currently not subscribed to it.");
				}
			}
		}

		public void OnGetMessages(string channelName, string[] senders, object[] messages)
		{
			if (channelName.Equals(selectedChannelName))
			{
				ShowChannel(selectedChannelName);
			}
		}

		public void OnPrivateMessage(string sender, object message, string channelName)
		{
			InstantiateChannelButton(channelName);
			if (message is byte[] array)
			{
				UnityEngine.Debug.Log("Message with byte[].Length: " + array.Length);
			}
			if (selectedChannelName.Equals(channelName))
			{
				ShowChannel(channelName);
			}
		}

		public void OnStatusUpdate(string user, int status, bool gotMessage, object message)
		{
			UnityEngine.Debug.LogWarning("status: " + $"{user} is {status}. Msg:{message}");
			if (friendListItemLUT.ContainsKey(user))
			{
				FriendItem friendItem = friendListItemLUT[user];
				if (friendItem != null)
				{
					friendItem.OnFriendStatusUpdate(status, gotMessage, message);
				}
			}
		}

		public void OnUserSubscribed(string channel, string user)
		{
			UnityEngine.Debug.LogFormat("OnUserSubscribed: channel=\"{0}\" userId=\"{1}\"", channel, user);
		}

		public void OnUserUnsubscribed(string channel, string user)
		{
			UnityEngine.Debug.LogFormat("OnUserUnsubscribed: channel=\"{0}\" userId=\"{1}\"", channel, user);
		}

		public void OnChannelPropertiesChanged(string channel, string userId, Dictionary<object, object> properties)
		{
			UnityEngine.Debug.LogFormat("OnChannelPropertiesChanged: {0} by {1}. Props: {2}.", channel, userId, properties.ToStringFull());
		}

		public void OnUserPropertiesChanged(string channel, string targetUserId, string senderUserId, Dictionary<object, object> properties)
		{
			UnityEngine.Debug.LogFormat("OnUserPropertiesChanged: (channel:{0} user:{1}) by {2}. Props: {3}.", channel, targetUserId, senderUserId, properties.ToStringFull());
		}

		public void OnErrorInfo(string channel, string error, object data)
		{
			UnityEngine.Debug.LogFormat("OnErrorInfo for channel {0}. Error: {1} Data: {2}", channel, error, data);
		}

		public void AddMessageToSelectedChannel(string msg)
		{
			ChatChannel channel = null;
			if (!chatClient.TryGetChannel(selectedChannelName, out channel))
			{
				UnityEngine.Debug.Log("AddMessageToSelectedChannel failed to find channel: " + selectedChannelName);
			}
			else
			{
				channel?.Add("Bot", msg, 0);
			}
		}

		public void ShowChannel(string channelName)
		{
			if (string.IsNullOrEmpty(channelName))
			{
				return;
			}
			ChatChannel channel = null;
			if (!chatClient.TryGetChannel(channelName, out channel))
			{
				UnityEngine.Debug.Log("ShowChannel failed to find channel: " + channelName);
				return;
			}
			selectedChannelName = channelName;
			CurrentChannelText.text = channel.ToStringMessages();
			UnityEngine.Debug.Log("ShowChannel: " + selectedChannelName);
			foreach (KeyValuePair<string, Toggle> channelToggle in channelToggles)
			{
				channelToggle.Value.isOn = ((channelToggle.Key == channelName) ? true : false);
			}
		}

		public void OpenDashboard()
		{
			Application.OpenURL("https://dashboard.photonengine.com");
		}
	}
	public class FriendItem : MonoBehaviour
	{
		public Text NameLabel;

		public Text StatusLabel;

		public Text Health;

		[HideInInspector]
		public string FriendId
		{
			get
			{
				return NameLabel.text;
			}
			set
			{
				NameLabel.text = value;
			}
		}

		public void Awake()
		{
			Health.text = string.Empty;
		}

		public void OnFriendStatusUpdate(int status, bool gotMessage, object message)
		{
			StatusLabel.text = status switch
			{
				1 => "Invisible", 
				2 => "Online", 
				3 => "Away", 
				4 => "Do not disturb", 
				5 => "Looking For Game/Group", 
				6 => "Playing", 
				_ => "Offline", 
			};
			if (gotMessage)
			{
				string text = string.Empty;
				if (message != null && message is string[] array && array.Length >= 2)
				{
					text = array[1] + "%";
				}
				Health.text = text;
			}
		}
	}
	public class IgnoreUiRaycastWhenInactive : MonoBehaviour, ICanvasRaycastFilter
	{
		public bool IsRaycastLocationValid(Vector2 screenPoint, Camera eventCamera)
		{
			return base.gameObject.activeInHierarchy;
		}
	}
	[RequireComponent(typeof(ChatGui))]
	public class NamePickGui : MonoBehaviour
	{
		private const string UserNamePlayerPref = "NamePickUserName";

		public ChatGui chatNewComponent;

		public InputField idInput;

		public void Start()
		{
			chatNewComponent = UnityEngine.Object.FindObjectOfType<ChatGui>();
			string @string = PlayerPrefs.GetString("NamePickUserName");
			if (!string.IsNullOrEmpty(@string))
			{
				idInput.text = @string;
			}
		}

		public void EndEditOnEnter()
		{
			if (Input.GetKey(KeyCode.Return) || Input.GetKey(KeyCode.KeypadEnter))
			{
				StartChat();
			}
		}

		public void StartChat()
		{
			ChatGui chatGui = UnityEngine.Object.FindObjectOfType<ChatGui>();
			chatGui.UserName = idInput.text.Trim();
			chatGui.Connect();
			base.enabled = false;
			PlayerPrefs.SetString("NamePickUserName", chatGui.UserName);
		}
	}
}
namespace Photon.Chat.UtilityScripts
{
	public class EventSystemSpawner : MonoBehaviour
	{
		private void OnEnable()
		{
			if (UnityEngine.Object.FindObjectOfType<EventSystem>() == null)
			{
				GameObject obj = new GameObject("EventSystem");
				obj.AddComponent<EventSystem>();
				obj.AddComponent<StandaloneInputModule>();
			}
		}
	}
	public class OnStartDelete : MonoBehaviour
	{
		private void Start()
		{
			UnityEngine.Object.Destroy(base.gameObject);
		}
	}
	[RequireComponent(typeof(Text))]
	public class TextButtonTransition : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler
	{
		private Text _text;

		public Selectable Selectable;

		public Color NormalColor = Color.white;

		public Color HoverColor = Color.black;

		public void Awake()
		{
			_text = GetComponent<Text>();
		}

		public void OnEnable()
		{
			_text.color = NormalColor;
		}

		public void OnDisable()
		{
			_text.color = NormalColor;
		}

		public void OnPointerEnter(PointerEventData eventData)
		{
			if (Selectable == null || Selectable.IsInteractable())
			{
				_text.color = HoverColor;
			}
		}

		public void OnPointerExit(PointerEventData eventData)
		{
			if (Selectable == null || Selectable.IsInteractable())
			{
				_text.color = NormalColor;
			}
		}
	}
	[RequireComponent(typeof(Text))]
	public class TextToggleIsOnTransition : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler
	{
		public Toggle toggle;

		private Text _text;

		public Color NormalOnColor = Color.white;

		public Color NormalOffColor = Color.black;

		public Color HoverOnColor = Color.black;

		public Color HoverOffColor = Color.black;

		private bool isHover;

		public void OnEnable()
		{
			_text = GetComponent<Text>();
			OnValueChanged(toggle.isOn);
			toggle.onValueChanged.AddListener(OnValueChanged);
		}

		public void OnDisable()
		{
			toggle.onValueChanged.RemoveListener(OnValueChanged);
		}

		public void OnValueChanged(bool isOn)
		{
			_text.color = ((!isOn) ? (isHover ? NormalOffColor : NormalOffColor) : (isHover ? HoverOnColor : HoverOnColor));
		}

		public void OnPointerEnter(PointerEventData eventData)
		{
			isHover = true;
			_text.color = (toggle.isOn ? HoverOnColor : HoverOffColor);
		}

		public void OnPointerExit(PointerEventData eventData)
		{
			isHover = false;
			_text.color = (toggle.isOn ? NormalOnColor : NormalOffColor);
		}
	}
}
namespace RingBuffer
{
	public class RingBuffer<T> : IEnumerable<T>, IEnumerable, ICollection<T>, ICollection
	{
		protected int head;

		protected int tail;

		protected int size;

		protected T[] buffer;

		private bool allowOverflow;

		public bool AllowOverflow => allowOverflow;

		public int Capacity => buffer.Length;

		public int Size => size;

		public int Count => size;

		public bool IsReadOnly => false;

		public object SyncRoot => this;

		public bool IsSynchronized => false;

		public T Get()
		{
			if (size == 0)
			{
				throw new InvalidOperationException("Buffer is empty.");
			}
			T result = buffer[head];
			head = (head + 1) % Capacity;
			size--;
			return result;
		}

		public void Put(T item)
		{
			if (tail == head && size != 0)
			{
				if (!allowOverflow)
				{
					throw new InvalidOperationException("The RingBuffer is full");
				}
				addToBuffer(item, overflow: true);
			}
			else
			{
				addToBuffer(item, overflow: false);
			}
		}

		public void Put(T[] item)
		{
			foreach (T item2 in item)
			{
				Put(item2);
			}
		}

		protected void addToBuffer(T toAdd, bool overflow)
		{
			if (overflow)
			{
				head = (head + 1) % Capacity;
			}
			else
			{
				size++;
			}
			buffer[tail] = toAdd;
			tail = (tail + 1) % Capacity;
		}

		public RingBuffer()
			: this(4)
		{
		}

		public RingBuffer(int capacity)
			: this(capacity, overflow: false)
		{
		}

		public RingBuffer(int capacity, bool overflow)
		{
			buffer = new T[capacity];
			allowOverflow = overflow;
		}

		public IEnumerator<T> GetEnumerator()
		{
			int _index = head;
			int i = 0;
			while (i < size)
			{
				yield return buffer[_index];
				i++;
				_index = (_index + 1) % Capacity;
			}
		}

		IEnumerator<T> IEnumerable<T>.GetEnumerator()
		{
			return GetEnumerator();
		}

		IEnumerator IEnumerable.GetEnumerator()
		{
			return GetEnumerator();
		}

		public void Add(T item)
		{
			Put(item);
		}

		public bool Contains(T item)
		{
			EqualityComparer<T> @default = EqualityComparer<T>.Default;
			int num = head;
			int num2 = 0;
			while (num2 < size)
			{
				if (@default.Equals(item, buffer[num]))
				{
					return true;
				}
				num2++;
				num = (num + 1) % Capacity;
			}
			return false;
		}

		public void Clear()
		{
			for (int i = 0; i < Capacity; i++)
			{
				buffer[i] = default(T);
			}
			head = 0;
			tail = 0;
			size = 0;
		}

		public void CopyTo(T[] array, int arrayIndex)
		{
			int num = head;
			int num2 = 0;
			while (num2 < size)
			{
				array[arrayIndex] = buffer[num];
				num2++;
				arrayIndex++;
				num = (num + 1) % Capacity;
			}
		}

		public bool Remove(T item)
		{
			int num = head;
			int num2 = 0;
			bool flag = false;
			EqualityComparer<T> @default = EqualityComparer<T>.Default;
			int num3 = 0;
			while (num3 < size)
			{
				if (@default.Equals(item, buffer[num]))
				{
					num2 = num;
					flag = true;
					break;
				}
				num3++;
				num = (num + 1) % Capacity;
			}
			if (flag)
			{
				T[] array = new T[size - 1];
				num = head;
				bool flag2 = false;
				int num4 = 0;
				while (num4 < size - 1)
				{
					if (num == num2)
					{
						flag2 = true;
					}
					if (flag2)
					{
						array[num] = buffer[(num + 1) % Capacity];
					}
					else
					{
						array[num] = buffer[num];
					}
					num4++;
					num = (num + 1) % Capacity;
				}
				size--;
				buffer = array;
				return true;
			}
			return false;
		}

		void ICollection.CopyTo(Array array, int index)
		{
			CopyTo((T[])array, index);
		}
	}
}
namespace Agora.Rtc
{
	public delegate void OnPlayerSourceStateChangedHandler(MEDIA_PLAYER_STATE state, MEDIA_PLAYER_ERROR ec);
	public delegate void OnPositionChangedHandler(long position_ms);
	public delegate void OnPlayerEventHandler(MEDIA_PLAYER_EVENT eventCode, long elapsedTime, string message);
	public delegate void OnMetaDataHandler(byte[] data, int length);
	public delegate void OnPlayBufferUpdatedHandler(long playCachedBuffer);
	public delegate void OnCompletedHandler();
	public delegate void OnAgoraCDNTokenWillExpireHandler();
	public delegate void OnPlayerSrcInfoChangedHandler(SrcInfo from, SrcInfo to);
	public delegate void OnPlayerInfoUpdatedHandler(PlayerUpdatedInfo info);
	public delegate void MediaPlayerOnAudioVolumeIndicationHandler(int volume);
	public class MediaPlayerSourceObserver : IMediaPlayerSourceObserver
	{
		public event OnPlayerSourceStateChangedHandler EventOnPlayerSourceStateChanged;

		public event OnPositionChangedHandler EventOnPositionChanged;

		public event OnPlayerEventHandler EventOnPlayerEvent;

		public event OnMetaDataHandler EventOnMetaData;

		public event OnPlayBufferUpdatedHandler EventOnPlayBufferUpdated;

		public event OnCompletedHandler EventOnCompleted;

		public event OnAgoraCDNTokenWillExpireHandler EventOnAgoraCDNTokenWillExpire;

		public event OnPlayerSrcInfoChangedHandler EventOnPlayerSrcInfoChanged;

		public event OnPlayerInfoUpdatedHandler EventOnPlayerInfoUpdated;

		public event MediaPlayerOnAudioVolumeIndicationHandler EventOnAudioVolumeIndication;

		public override void OnPlayerSourceStateChanged(MEDIA_PLAYER_STATE state, MEDIA_PLAYER_ERROR ec)
		{
			if (this.EventOnPlayerSourceStateChanged != null)
			{
				this.EventOnPlayerSourceStateChanged(state, ec);
			}
		}

		public override void OnPositionChanged(long position_ms)
		{
			if (this.EventOnPositionChanged != null)
			{
				this.EventOnPositionChanged(position_ms);
			}
		}

		public override void OnPlayerEvent(MEDIA_PLAYER_EVENT eventCode, long elapsedTime, string message)
		{
			if (this.EventOnPlayerEvent != null)
			{
				this.EventOnPlayerEvent(eventCode, elapsedTime, message);
			}
		}

		public override void OnMetaData(byte[] data, int length)
		{
			if (this.EventOnMetaData != null)
			{
				this.EventOnMetaData(data, length);
			}
		}

		public override void OnPlayBufferUpdated(long playCachedBuffer)
		{
			if (this.EventOnPlayBufferUpdated != null)
			{
				this.EventOnPlayBufferUpdated(playCachedBuffer);
			}
		}

		public override void OnCompleted()
		{
			if (this.EventOnCompleted != null)
			{
				this.EventOnCompleted();
			}
		}

		public override void OnAgoraCDNTokenWillExpire()
		{
			if (this.EventOnAgoraCDNTokenWillExpire != null)
			{
				this.EventOnAgoraCDNTokenWillExpire();
			}
		}

		public override void OnPlayerSrcInfoChanged(SrcInfo from, SrcInfo to)
		{
			if (this.EventOnPlayerSrcInfoChanged != null)
			{
				this.EventOnPlayerSrcInfoChanged(from, to);
			}
		}

		public override void OnPlayerInfoUpdated(PlayerUpdatedInfo info)
		{
			if (this.EventOnPlayerInfoUpdated != null)
			{
				this.EventOnPlayerInfoUpdated(info);
			}
		}

		public override void OnAudioVolumeIndication(int volume)
		{
			if (this.EventOnAudioVolumeIndication != null)
			{
				this.EventOnAudioVolumeIndication(volume);
			}
		}
	}
	public delegate void OnRecorderStateChangedHandler(RecorderState state, RecorderErrorCode error);
	public delegate void OnRecorderInfoUpdatedHandler(RecorderInfo info);
	public class MediaRecorderObserver : IMediaRecorderObserver
	{
		private static MediaRecorderObserver eventInstance;

		public event OnRecorderStateChangedHandler EventOnRecorderStateChanged;

		public event OnRecorderInfoUpdatedHandler EventOnRecorderInfoUpdated;

		public static MediaRecorderObserver GetInstance()
		{
			return eventInstance ?? (eventInstance = new MediaRecorderObserver());
		}

		public override void OnRecorderStateChanged(RecorderState state, RecorderErrorCode error)
		{
			if (this.EventOnRecorderStateChanged != null)
			{
				this.EventOnRecorderStateChanged(state, error);
			}
		}

		public override void OnRecorderInfoUpdated(RecorderInfo info)
		{
			if (this.EventOnRecorderInfoUpdated != null)
			{
				this.EventOnRecorderInfoUpdated(info);
			}
		}
	}
	public delegate void OnJoinChannelSuccessHandler(RtcConnection connection, int elapsed);
	public delegate void OnErrorHandler(int err, string msg);
	public delegate void OnLeaveChannelHandler(RtcConnection connection, RtcStats stats);
	public delegate void OnRejoinChannelSuccessHandler(RtcConnection connection, int elapsed);
	public delegate void OnProxyConnectedHandler(string channel, uint uid, PROXY_TYPE proxyType, string localProxyIp, int elapsed);
	public delegate void OnAudioQualityHandler(RtcConnection connection, uint remoteUid, int quality, ushort delay, ushort lost);
	public delegate void OnLastmileProbeResultHandler(LastmileProbeResult result);
	public delegate void OnAudioVolumeIndicationHandler(RtcConnection connection, AudioVolumeInfo[] speakers, uint speakerNumber, int totalVolume);
	public delegate void OnRtcStatsHandler(RtcConnection connection, RtcStats stats);
	public delegate void OnAudioDeviceStateChangedHandler(string deviceId, MEDIA_DEVICE_TYPE deviceType, MEDIA_DEVICE_STATE_TYPE deviceState);
	public delegate void OnAudioMixingFinishedHandler();
	public delegate void OnAudioEffectFinishedHandler(int soundId);
	public delegate void OnVideoDeviceStateChangedHandler(string deviceId, MEDIA_DEVICE_TYPE deviceType, MEDIA_DEVICE_STATE_TYPE deviceState);
	public delegate void OnMediaDeviceChangedHandler(MEDIA_DEVICE_TYPE deviceType);
	public delegate void OnNetworkQualityHandler(RtcConnection connection, uint remoteUid, int txQuality, int rxQuality);
	public delegate void OnIntraRequestReceivedHandler(RtcConnection connection);
	public delegate void OnUplinkNetworkInfoUpdatedHandler(UplinkNetworkInfo info);
	public delegate void OnDownlinkNetworkInfoUpdatedHandler(DownlinkNetworkInfo info);
	public delegate void OnLastmileQualityHandler(int quality);
	public delegate void OnFirstLocalVideoFrameHandler(RtcConnection connection, int width, int height, int elapsed);
	public delegate void OnFirstLocalVideoFramePublishedHandler(RtcConnection connection, int elapsed);
	public delegate void OnVideoSourceFrameSizeChangedHandler(RtcConnection connection, VIDEO_SOURCE_TYPE sourceType, int width, int height);
	public delegate void OnFirstRemoteVideoDecodedHandler(RtcConnection connection, uint remoteUid, int width, int height, int elapsed);
	public delegate void OnVideoSizeChangedHandler(RtcConnection connection, VIDEO_SOURCE_TYPE sourceType, uint uid, int width, int height, int rotation);
	public delegate void OnContentInspectResultHandler(CONTENT_INSPECT_RESULT result);
	public delegate void OnSnapshotTakenHandlerEx(RtcConnection connection, uint uid, string filePath, int width, int height, int errCode);
	public delegate void OnLocalVideoStateChangedHandler(VIDEO_SOURCE_TYPE source, LOCAL_VIDEO_STREAM_STATE state, LOCAL_VIDEO_STREAM_ERROR errorCode);
	public delegate void OnLocalVideoStateChangedHandlerEx(RtcConnection connection, LOCAL_VIDEO_STREAM_STATE state, LOCAL_VIDEO_STREAM_ERROR errorCode);
	public delegate void OnRemoteVideoStateChangedHandler(RtcConnection connection, uint remoteUid, REMOTE_VIDEO_STATE state, REMOTE_VIDEO_STATE_REASON reason, int elapsed);
	public delegate void OnFirstRemoteVideoFrameHandler(RtcConnection connection, uint remoteUid, int width, int height, int elapsed);
	public delegate void OnUserJoinedHandler(RtcConnection connection, uint remoteUid, int elapsed);
	public delegate void OnUserOfflineHandler(RtcConnection connection, uint remoteUid, USER_OFFLINE_REASON_TYPE reason);
	public delegate void OnUserMuteAudioHandler(RtcConnection connection, uint remoteUid, bool muted);
	public delegate void OnUserMuteVideoHandler(RtcConnection connection, uint remoteUid, bool muted);
	public delegate void OnUserEnableVideoHandler(RtcConnection connection, uint remoteUid, bool enabled);
	public delegate void OnUserEnableLocalVideoHandler(RtcConnection connection, uint remoteUid, bool enabled);
	public delegate void OnUserStateChangedHandler(RtcConnection connection, uint remoteUid, uint state);
	public delegate void OnApiCallExecutedHandler(int err, string api, string result);
	public delegate void OnLocalAudioStatsHandler(RtcConnection connection, LocalAudioStats stats);
	public delegate void OnRemoteAudioStatsHandler(RtcConnection connection, RemoteAudioStats stats);
	public delegate void OnLocalVideoStatsHandler(RtcConnection connection, LocalVideoStats stats);
	public delegate void OnRemoteVideoStatsHandler(RtcConnection connection, RemoteVideoStats stats);
	public delegate void OnCameraReadyHandler();
	public delegate void OnCameraFocusAreaChangedHandler(int x, int y, int width, int height);
	public delegate void OnCameraExposureAreaChangedHandler(int x, int y, int width, int height);
	public delegate void OnFacePositionChangedHandler(int imageWidth, int imageHeight, Rectangle vecRectangle, int[] vecDistance, int numFaces);
	public delegate void OnVideoStoppedHandler();
	public delegate void OnAudioMixingStateChangedHandler(AUDIO_MIXING_STATE_TYPE state, AUDIO_MIXING_REASON_TYPE reason);
	public delegate void OnRhythmPlayerStateChangedHandler(RHYTHM_PLAYER_STATE_TYPE state, RHYTHM_PLAYER_ERROR_TYPE errorCode);
	public delegate void OnConnectionLostHandler(RtcConnection connection);
	public delegate void OnConnectionInterruptedHandler(RtcConnection connection);
	public delegate void OnConnectionBannedHandler(RtcConnection connection);
	public delegate void OnStreamMessageHandler(RtcConnection connection, uint remoteUid, int streamId, byte[] data, uint length, ulong sentTs);
	public delegate void OnStreamMessageErrorHandler(RtcConnection connection, uint remoteUid, int streamId, int code, int missed, int cached);
	public delegate void OnRequestTokenHandler(RtcConnection connection);
	public delegate void OnTokenPrivilegeWillExpireHandler(RtcConnection connection, string token);
	public delegate void OnFirstLocalAudioFramePublishedHandler(RtcConnection connection, int elapsed);
	public delegate void OnFirstRemoteAudioFrameHandler(RtcConnection connection, uint userId, int elapsed);
	public delegate void OnFirstRemoteAudioDecodedHandler(RtcConnection connection, uint uid, int elapsed);
	public delegate void OnLocalAudioStateChangedHandler(RtcConnection connection, LOCAL_AUDIO_STREAM_STATE state, LOCAL_AUDIO_STREAM_ERROR error);
	public delegate void OnRemoteAudioStateChangedHandler(RtcConnection connection, uint remoteUid, REMOTE_AUDIO_STATE state, REMOTE_AUDIO_STATE_REASON reason, int elapsed);
	public delegate void OnActiveSpeakerHandler(RtcConnection connection, uint uid);
	public delegate void OnClientRoleChangedHandler(RtcConnection connection, CLIENT_ROLE_TYPE oldRole, CLIENT_ROLE_TYPE newRole);
	public delegate void OnClientRoleChangeFailedHandler(RtcConnection connection, CLIENT_ROLE_CHANGE_FAILED_REASON reason, CLIENT_ROLE_TYPE currentRole);
	public delegate void OnAudioDeviceVolumeChangedHandler(MEDIA_DEVICE_TYPE deviceType, int volume, bool muted);
	public delegate void OnRtmpStreamingStateChangedHandler(string url, RTMP_STREAM_PUBLISH_STATE state, RTMP_STREAM_PUBLISH_ERROR_TYPE errCode);
	public delegate void OnRtmpStreamingEventHandler(string url, RTMP_STREAMING_EVENT eventCode);
	public delegate void OnTranscodingUpdatedHandler();
	public delegate void OnAudioRoutingChangedHandler(int routing);
	public delegate void OnChannelMediaRelayStateChangedHandler(int state, int code);
	public delegate void OnChannelMediaRelayEventHandler(int code);
	public delegate void OnLocalPublishFallbackToAudioOnlyHandler(bool isFallbackOrRecover);
	public delegate void OnRemoteSubscribeFallbackToAudioOnlyHandler(uint uid, bool isFallbackOrRecover);
	public delegate void OnRemoteAudioTransportStatsHandler(RtcConnection connection, uint remoteUid, ushort delay, ushort lost, ushort rxKBitRate);
	public delegate void OnRemoteVideoTransportStatsHandler(RtcConnection connection, uint remoteUid, ushort delay, ushort lost, ushort rxKBitRate);
	public delegate void OnConnectionStateChangedHandler(RtcConnection connection, CONNECTION_STATE_TYPE state, CONNECTION_CHANGED_REASON_TYPE reason);
	public delegate void OnWlAccMessageHandler(RtcConnection connection, WLACC_MESSAGE_REASON reason, WLACC_SUGGEST_ACTION action, string wlAccMsg);
	public delegate void OnWlAccStatsHandler(RtcConnection connection, WlAccStats currentStats, WlAccStats averageStats);
	public delegate void OnNetworkTypeChangedHandler(RtcConnection connection, NETWORK_TYPE type);
	public delegate void OnEncryptionErrorHandler(RtcConnection connection, ENCRYPTION_ERROR_TYPE errorType);
	public delegate void OnUploadLogResultHandler(RtcConnection connection, string requestId, bool success, UPLOAD_ERROR_REASON reason);
	public delegate void OnUserAccountUpdatedHandler(RtcConnection connection, uint remoteUid, string userAccount);
	public delegate void OnPermissionErrorHandler(PERMISSION_TYPE permissionType);
	public delegate void OnLocalUserRegisteredHandler(uint uid, string userAccount);
	public delegate void OnUserInfoUpdatedHandler(uint uid, UserInfo info);
	public delegate void OnAudioSubscribeStateChangedHandler(string channel, uint uid, STREAM_SUBSCRIBE_STATE oldState, STREAM_SUBSCRIBE_STATE newState, int elapseSinceLastState);
	public delegate void OnVideoSubscribeStateChangedHandler(string channel, uint uid, STREAM_SUBSCRIBE_STATE oldState, STREAM_SUBSCRIBE_STATE newState, int elapseSinceLastState);
	public delegate void OnAudioPublishStateChangedHandler(string channel, STREAM_PUBLISH_STATE oldState, STREAM_PUBLISH_STATE newState, int elapseSinceLastState);
	public delegate void OnVideoPublishStateChangedHandler(VIDEO_SOURCE_TYPE source, string channel, STREAM_PUBLISH_STATE oldState, STREAM_PUBLISH_STATE newState, int elapseSinceLastState);
	public delegate void OnExtensionEventHandler(string provider, string extension, string key, string value);
	public delegate void OnExtensionStartedHandler(string provider, string extension);
	public delegate void OnExtensionStoppedHandler(string provider, string extension);
	public delegate void OnExtensionErrorHandler(string provider, string extension, int error, string message);
	public delegate void OnDirectCdnStreamingStateChangedHandler(DIRECT_CDN_STREAMING_STATE state, DIRECT_CDN_STREAMING_ERROR error, string message);
	public delegate void OnDirectCdnStreamingStatsHandler(DirectCdnStreamingStats stats);
	public class RtcEngineEventHandler : IRtcEngineEventHandler
	{
		private static RtcEngineEventHandler eventInstance;

		public event OnJoinChannelSuccessHandler EventOnJoinChannelSuccess;

		public event OnLeaveChannelHandler EventOnLeaveChannel;

		public event OnErrorHandler EventOnError;

		public event OnRejoinChannelSuccessHandler EventOnRejoinChannelSuccess;

		public event OnProxyConnectedHandler EventOnProxyConnected;

		public event OnAudioQualityHandler EventOnAudioQuality;

		public event OnLastmileProbeResultHandler EventOnLastmileProbeResult;

		public event OnAudioVolumeIndicationHandler EventOnAudioVolumeIndication;

		public event OnRtcStatsHandler EventOnRtcStats;

		public event OnAudioDeviceStateChangedHandler EventOnAudioDeviceStateChanged;

		public event OnAudioMixingFinishedHandler EventOnAudioMixingFinished;

		public event OnAudioEffectFinishedHandler EventOnAudioEffectFinished;

		public event OnVideoDeviceStateChangedHandler EventOnVideoDeviceStateChanged;

		public event OnMediaDeviceChangedHandler EventOnMediaDeviceChanged;

		public event OnNetworkQualityHandler EventOnNetworkQuality;

		public event OnIntraRequestReceivedHandler EventOnIntraRequestReceived;

		public event OnUplinkNetworkInfoUpdatedHandler EventOnUplinkNetworkInfoUpdated;

		public event OnDownlinkNetworkInfoUpdatedHandler EventOnDownlinkNetworkInfoUpdated;

		public event OnLastmileQualityHandler EventOnLastmileQuality;

		public event OnFirstLocalVideoFrameHandler EventOnFirstLocalVideoFrame;

		public event OnFirstLocalVideoFramePublishedHandler EventOnFirstLocalVideoFramePublished;

		public event OnVideoSourceFrameSizeChangedHandler EventOnVideoSourceFrameSizeChanged;

		public event OnFirstRemoteVideoDecodedHandler EventOnFirstRemoteVideoDecoded;

		public event OnVideoSizeChangedHandler EventOnVideoSizeChanged;

		public event OnContentInspectResultHandler EventOnContentInspectResult;

		public event OnSnapshotTakenHandlerEx EventOnSnapshotTakenEx;

		public event OnLocalVideoStateChangedHandler EventOnLocalVideoStateChanged;

		public event OnLocalVideoStateChangedHandlerEx EventOnLocalVideoStateChangedEx;

		public event OnRemoteVideoStateChangedHandler EventOnRemoteVideoStateChanged;

		public event OnFirstRemoteVideoFrameHandler EventOnFirstRemoteVideoFrame;

		public event OnUserJoinedHandler EventOnUserJoined;

		public event OnUserOfflineHandler EventOnUserOffline;

		public event OnUserMuteAudioHandler EventOnUserMuteAudio;

		public event OnUserMuteVideoHandler EventOnUserMuteVideo;

		public event OnUserEnableVideoHandler EventOnUserEnableVideo;

		public event OnUserEnableLocalVideoHandler EventOnUserEnableLocalVideo;

		public event OnUserStateChangedHandler EventOnUserStateChanged;

		public event OnApiCallExecutedHandler EventOnApiCallExecuted;

		public event OnLocalAudioStatsHandler EventOnLocalAudioStats;

		public event OnRemoteAudioStatsHandler EventOnRemoteAudioStats;

		public event OnLocalVideoStatsHandler EventOnLocalVideoStats;

		public event OnRemoteVideoStatsHandler EventOnRemoteVideoStats;

		public event OnCameraReadyHandler EventOnCameraReady;

		public event OnCameraFocusAreaChangedHandler EventOnCameraFocusAreaChanged;

		public event OnCameraExposureAreaChangedHandler EventOnCameraExposureAreaChanged;

		public event OnFacePositionChangedHandler EventOnFacePositionChanged;

		public event OnVideoStoppedHandler EventOnVideoStopped;

		public event OnAudioMixingStateChangedHandler EventOnAudioMixingStateChanged;

		public event OnRhythmPlayerStateChangedHandler EventOnRhythmPlayerStateChanged;

		public event OnConnectionLostHandler EventOnConnectionLost;

		public event OnConnectionInterruptedHandler EventOnConnectionInterrupted;

		public event OnConnectionBannedHandler EventOnConnectionBanned;

		public event OnStreamMessageHandler EventOnStreamMessage;

		public event OnStreamMessageErrorHandler EventOnStreamMessageError;

		public event OnRequestTokenHandler EventOnRequestToken;

		public event OnTokenPrivilegeWillExpireHandler EventOnTokenPrivilegeWillExpire;

		public event OnFirstLocalAudioFramePublishedHandler EventOnFirstLocalAudioFramePublished;

		public event OnFirstRemoteAudioFrameHandler EventOnFirstRemoteAudioFrame;

		public event OnFirstRemoteAudioDecodedHandler EventOnFirstRemoteAudioDecoded;

		public event OnLocalAudioStateChangedHandler EventOnLocalAudioStateChanged;

		public event OnRemoteAudioStateChangedHandler EventOnRemoteAudioStateChanged;

		public event OnActiveSpeakerHandler EventOnActiveSpeaker;

		public event OnClientRoleChangedHandler EventOnClientRoleChanged;

		public event OnClientRoleChangeFailedHandler EventOnClientRoleChangeFailed;

		public event OnAudioDeviceVolumeChangedHandler EventOnAudioDeviceVolumeChanged;

		public event OnRtmpStreamingStateChangedHandler EventOnRtmpStreamingStateChanged;

		public event OnRtmpStreamingEventHandler EventOnRtmpStreamingEvent;

		public event OnTranscodingUpdatedHandler EventOnTranscodingUpdated;

		public event OnAudioRoutingChangedHandler EventOnAudioRoutingChanged;

		public event OnChannelMediaRelayStateChangedHandler EventOnChannelMediaRelayStateChanged;

		public event OnChannelMediaRelayEventHandler EventOnChannelMediaRelayEvent;

		public event OnLocalPublishFallbackToAudioOnlyHandler EventOnLocalPublishFallbackToAudioOnly;

		public event OnRemoteSubscribeFallbackToAudioOnlyHandler EventOnRemoteSubscribeFallbackToAudioOnly;

		public event OnRemoteAudioTransportStatsHandler EventOnRemoteAudioTransportStats;

		public event OnRemoteVideoTransportStatsHandler EventOnRemoteVideoTransportStats;

		public event OnConnectionStateChangedHandler EventOnConnectionStateChanged;

		public event OnWlAccMessageHandler EventOnWlAccMessage;

		public event OnWlAccStatsHandler EventOnWlAccStats;

		public event OnNetworkTypeChangedHandler EventOnNetworkTypeChanged;

		public event OnEncryptionErrorHandler EventOnEncryptionError;

		public event OnUploadLogResultHandler EventOnUploadLogResult;

		public event OnUserAccountUpdatedHandler EventOnUserAccountUpdated;

		public event OnPermissionErrorHandler EventOnPermissionError;

		public event OnLocalUserRegisteredHandler EventOnLocalUserRegistered;

		public event OnUserInfoUpdatedHandler EventOnUserInfoUpdated;

		public event OnAudioSubscribeStateChangedHandler EventOnAudioSubscribeStateChanged;

		public event OnVideoSubscribeStateChangedHandler EventOnVideoSubscribeStateChanged;

		public event OnAudioPublishStateChangedHandler EventOnAudioPublishStateChanged;

		public event OnVideoPublishStateChangedHandler EventOnVideoPublishStateChanged;

		public event OnExtensionEventHandler EventOnExtensionEvent;

		public event OnExtensionStartedHandler EventOnExtensionStarted;

		public event OnExtensionStoppedHandler EventOnExtensionStopped;

		public event OnExtensionErrorHandler EventOnExtensionErrored;

		public event OnDirectCdnStreamingStateChangedHandler EventOnDirectCdnStreamingStateChanged;

		public event OnDirectCdnStreamingStatsHandler EventOnDirectCdnStreamingStats;

		public static RtcEngineEventHandler GetInstance()
		{
			if (eventInstance == null)
			{
				eventInstance = new RtcEngineEventHandler();
			}
			return eventInstance;
		}

		public override void OnJoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			if (this.EventOnJoinChannelSuccess != null)
			{
				this.EventOnJoinChannelSuccess(connection, elapsed);
			}
		}

		public override void OnError(int err, string msg)
		{
			if (this.EventOnError != null)
			{
				this.EventOnError(err, msg);
			}
		}

		public override void OnLeaveChannel(RtcConnection connection, RtcStats stats)
		{
			if (this.EventOnLeaveChannel != null)
			{
				this.EventOnLeaveChannel(connection, stats);
			}
		}

		public override void OnRejoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			if (this.EventOnRejoinChannelSuccess != null)
			{
				this.EventOnRejoinChannelSuccess(connection, elapsed);
			}
		}

		public override void OnProxyConnected(string channel, uint uid, PROXY_TYPE proxyType, string localProxyIp, int elapsed)
		{
			if (this.EventOnProxyConnected != null)
			{
				this.EventOnProxyConnected(channel, uid, proxyType, localProxyIp, elapsed);
			}
		}

		public override void OnAudioQuality(RtcConnection connection, uint remoteUid, int quality, ushort delay, ushort lost)
		{
			if (this.EventOnAudioQuality != null)
			{
				this.EventOnAudioQuality(connection, remoteUid, quality, delay, lost);
			}
		}

		public override void OnLastmileProbeResult(LastmileProbeResult result)
		{
			if (this.EventOnLastmileProbeResult != null)
			{
				this.EventOnLastmileProbeResult(result);
			}
		}

		public override void OnAudioVolumeIndication(RtcConnection connection, AudioVolumeInfo[] speakers, uint speakerNumber, int totalVolume)
		{
			if (this.EventOnAudioVolumeIndication != null)
			{
				this.EventOnAudioVolumeIndication(connection, speakers, speakerNumber, totalVolume);
			}
		}

		public override void OnRtcStats(RtcConnection connection, RtcStats stats)
		{
			if (this.EventOnRtcStats != null)
			{
				this.EventOnRtcStats(connection, stats);
			}
		}

		public override void OnAudioDeviceStateChanged(string deviceId, MEDIA_DEVICE_TYPE deviceType, MEDIA_DEVICE_STATE_TYPE deviceState)
		{
			if (this.EventOnAudioDeviceStateChanged != null)
			{
				this.EventOnAudioDeviceStateChanged(deviceId, deviceType, deviceState);
			}
		}

		[Obsolete]
		public override void OnAudioMixingFinished()
		{
			if (this.EventOnAudioMixingFinished != null)
			{
				this.EventOnAudioMixingFinished();
			}
		}

		public override void OnAudioEffectFinished(int soundId)
		{
			if (this.EventOnAudioEffectFinished != null)
			{
				this.EventOnAudioEffectFinished(soundId);
			}
		}

		public override void OnVideoDeviceStateChanged(string deviceId, MEDIA_DEVICE_TYPE deviceType, MEDIA_DEVICE_STATE_TYPE deviceState)
		{
			if (this.EventOnVideoDeviceStateChanged != null)
			{
				this.EventOnVideoDeviceStateChanged(deviceId, deviceType, deviceState);
			}
		}

		public override void OnMediaDeviceChanged(MEDIA_DEVICE_TYPE deviceType)
		{
			if (this.EventOnMediaDeviceChanged != null)
			{
				this.EventOnMediaDeviceChanged(deviceType);
			}
		}

		public override void OnNetworkQuality(RtcConnection connection, uint remoteUid, int txQuality, int rxQuality)
		{
			if (this.EventOnNetworkQuality != null)
			{
				this.EventOnNetworkQuality(connection, remoteUid, txQuality, rxQuality);
			}
		}

		public override void OnIntraRequestReceived(RtcConnection connection)
		{
			if (this.EventOnIntraRequestReceived != null)
			{
				this.EventOnIntraRequestReceived(connection);
			}
		}

		public override void OnUplinkNetworkInfoUpdated(UplinkNetworkInfo info)
		{
			if (this.EventOnUplinkNetworkInfoUpdated != null)
			{
				this.EventOnUplinkNetworkInfoUpdated(info);
			}
		}

		public override void OnDownlinkNetworkInfoUpdated(DownlinkNetworkInfo info)
		{
			if (this.EventOnDownlinkNetworkInfoUpdated != null)
			{
				this.EventOnDownlinkNetworkInfoUpdated(info);
			}
		}

		public override void OnLastmileQuality(int quality)
		{
			if (this.EventOnLastmileQuality != null)
			{
				this.EventOnLastmileQuality(quality);
			}
		}

		public override void OnFirstLocalVideoFrame(RtcConnection connection, int width, int height, int elapsed)
		{
			if (this.EventOnFirstLocalVideoFrame != null)
			{
				this.EventOnFirstLocalVideoFrame(connection, width, height, elapsed);
			}
		}

		public override void OnFirstLocalVideoFramePublished(RtcConnection connection, int elapsed)
		{
			if (this.EventOnFirstLocalVideoFramePublished != null)
			{
				this.EventOnFirstLocalVideoFramePublished(connection, elapsed);
			}
		}

		public override void OnVideoSourceFrameSizeChanged(RtcConnection connection, VIDEO_SOURCE_TYPE sourceType, int width, int height)
		{
			if (this.EventOnVideoSourceFrameSizeChanged != null)
			{
				this.EventOnVideoSourceFrameSizeChanged(connection, sourceType, width, height);
			}
		}

		public override void OnFirstRemoteVideoDecoded(RtcConnection connection, uint remoteUid, int width, int height, int elapsed)
		{
			if (this.EventOnFirstRemoteVideoDecoded != null)
			{
				this.EventOnFirstRemoteVideoDecoded(connection, remoteUid, width, height, elapsed);
			}
		}

		public override void OnVideoSizeChanged(RtcConnection connection, VIDEO_SOURCE_TYPE sourceType, uint uid, int width, int height, int rotation)
		{
			if (this.EventOnVideoSizeChanged != null)
			{
				this.EventOnVideoSizeChanged(connection, sourceType, uid, width, height, rotation);
			}
		}

		public override void OnContentInspectResult(CONTENT_INSPECT_RESULT result)
		{
			if (this.EventOnContentInspectResult != null)
			{
				this.EventOnContentInspectResult(result);
			}
		}

		public override void OnSnapshotTaken(RtcConnection connection, uint uid, string filePath, int width, int height, int errCode)
		{
			if (this.EventOnSnapshotTakenEx != null)
			{
				this.EventOnSnapshotTakenEx(connection, uid, filePath, width, height, errCode);
			}
		}

		public override void OnLocalVideoStateChanged(VIDEO_SOURCE_TYPE source, LOCAL_VIDEO_STREAM_STATE state, LOCAL_VIDEO_STREAM_ERROR errorCode)
		{
			if (this.EventOnLocalVideoStateChanged != null)
			{
				this.EventOnLocalVideoStateChanged(source, state, errorCode);
			}
		}

		public override void OnLocalVideoStateChanged(RtcConnection connection, LOCAL_VIDEO_STREAM_STATE state, LOCAL_VIDEO_STREAM_ERROR errorCode)
		{
			if (this.EventOnLocalVideoStateChangedEx != null)
			{
				this.EventOnLocalVideoStateChangedEx(connection, state, errorCode);
			}
		}

		public override void OnRemoteVideoStateChanged(RtcConnection connection, uint remoteUid, REMOTE_VIDEO_STATE state, REMOTE_VIDEO_STATE_REASON reason, int elapsed)
		{
			if (this.EventOnRemoteVideoStateChanged != null)
			{
				this.EventOnRemoteVideoStateChanged(connection, remoteUid, state, reason, elapsed);
			}
		}

		public override void OnFirstRemoteVideoFrame(RtcConnection connection, uint remoteUid, int width, int height, int elapsed)
		{
			if (this.EventOnFirstRemoteVideoFrame != null)
			{
				this.EventOnFirstRemoteVideoFrame(connection, remoteUid, width, height, elapsed);
			}
		}

		public override void OnUserJoined(RtcConnection connection, uint remoteUid, int elapsed)
		{
			if (this.EventOnUserJoined != null)
			{
				this.EventOnUserJoined(connection, remoteUid, elapsed);
			}
		}

		public override void OnUserOffline(RtcConnection connection, uint remoteUid, USER_OFFLINE_REASON_TYPE reason)
		{
			if (this.EventOnUserOffline != null)
			{
				this.EventOnUserOffline(connection, remoteUid, reason);
			}
		}

		[Obsolete]
		public override void OnUserMuteAudio(RtcConnection connection, uint remoteUid, bool muted)
		{
			if (this.EventOnUserMuteAudio != null)
			{
				this.EventOnUserMuteAudio(connection, remoteUid, muted);
			}
		}

		[Obsolete]
		public override void OnUserMuteVideo(RtcConnection connection, uint remoteUid, bool muted)
		{
			if (this.EventOnUserMuteVideo != null)
			{
				this.EventOnUserMuteVideo(connection, remoteUid, muted);
			}
		}

		[Obsolete]
		public override void OnUserEnableVideo(RtcConnection connection, uint remoteUid, bool enabled)
		{
			if (this.EventOnUserEnableVideo != null)
			{
				this.EventOnUserEnableVideo(connection, remoteUid, enabled);
			}
		}

		[Obsolete]
		public override void OnUserEnableLocalVideo(RtcConnection connection, uint remoteUid, bool enabled)
		{
			if (this.EventOnUserEnableLocalVideo != null)
			{
				this.EventOnUserEnableLocalVideo(connection, remoteUid, enabled);
			}
		}

		public override void OnUserStateChanged(RtcConnection connection, uint remoteUid, uint state)
		{
			if (this.EventOnUserStateChanged != null)
			{
				this.EventOnUserStateChanged(connection, remoteUid, state);
			}
		}

		public override void OnApiCallExecuted(int err, string api, string result)
		{
			if (this.EventOnApiCallExecuted != null)
			{
				this.EventOnApiCallExecuted(err, api, result);
			}
		}

		public override void OnLocalAudioStats(RtcConnection connection, LocalAudioStats stats)
		{
			if (this.EventOnLocalAudioStats != null)
			{
				this.EventOnLocalAudioStats(connection, stats);
			}
		}

		public override void OnRemoteAudioStats(RtcConnection connection, RemoteAudioStats stats)
		{
			if (this.EventOnRemoteAudioStats != null)
			{
				this.EventOnRemoteAudioStats(connection, stats);
			}
		}

		public override void OnLocalVideoStats(RtcConnection connection, LocalVideoStats stats)
		{
			if (this.EventOnLocalVideoStats != null)
			{
				this.EventOnLocalVideoStats(connection, stats);
			}
		}

		public override void OnRemoteVideoStats(RtcConnection connection, RemoteVideoStats stats)
		{
			if (this.EventOnRemoteVideoStats != null)
			{
				this.EventOnRemoteVideoStats(connection, stats);
			}
		}

		public override void OnCameraReady()
		{
			if (this.EventOnCameraReady != null)
			{
				this.EventOnCameraReady();
			}
		}

		public override void OnCameraFocusAreaChanged(int x, int y, int width, int height)
		{
			if (this.EventOnCameraFocusAreaChanged != null)
			{
				this.EventOnCameraFocusAreaChanged(x, y, width, height);
			}
		}

		public override void OnCameraExposureAreaChanged(int x, int y, int width, int height)
		{
			if (this.EventOnCameraExposureAreaChanged != null)
			{
				this.EventOnCameraExposureAreaChanged(x, y, width, height);
			}
		}

		public override void OnFacePositionChanged(int imageWidth, int imageHeight, Rectangle vecRectangle, int[] vecDistance, int numFaces)
		{
			if (this.EventOnFacePositionChanged != null)
			{
				this.EventOnFacePositionChanged(imageWidth, imageHeight, vecRectangle, vecDistance, numFaces);
			}
		}

		public override void OnVideoStopped()
		{
			if (this.EventOnVideoStopped != null)
			{
				this.EventOnVideoStopped();
			}
		}

		public override void OnAudioMixingStateChanged(AUDIO_MIXING_STATE_TYPE state, AUDIO_MIXING_REASON_TYPE reason)
		{
			if (this.EventOnAudioMixingStateChanged != null)
			{
				this.EventOnAudioMixingStateChanged(state, reason);
			}
		}

		public override void OnRhythmPlayerStateChanged(RHYTHM_PLAYER_STATE_TYPE state, RHYTHM_PLAYER_ERROR_TYPE errorCode)
		{
			if (this.EventOnRhythmPlayerStateChanged != null)
			{
				this.EventOnRhythmPlayerStateChanged(state, errorCode);
			}
		}

		public override void OnConnectionLost(RtcConnection connection)
		{
			if (this.EventOnConnectionLost != null)
			{
				this.EventOnConnectionLost(connection);
			}
		}

		public override void OnConnectionInterrupted(RtcConnection connection)
		{
			if (this.EventOnConnectionInterrupted != null)
			{
				this.EventOnConnectionInterrupted(connection);
			}
		}

		public override void OnConnectionBanned(RtcConnection connection)
		{
			if (this.EventOnConnectionBanned != null)
			{
				this.EventOnConnectionBanned(connection);
			}
		}

		public override void OnStreamMessage(RtcConnection connection, uint remoteUid, int streamId, byte[] data, uint length, ulong sentTs)
		{
			if (this.EventOnStreamMessage != null)
			{
				this.EventOnStreamMessage(connection, remoteUid, streamId, data, length, sentTs);
			}
		}

		public override void OnStreamMessageError(RtcConnection connection, uint remoteUid, int streamId, int code, int missed, int cached)
		{
			if (this.EventOnStreamMessageError != null)
			{
				this.EventOnStreamMessageError(connection, remoteUid, streamId, code, missed, cached);
			}
		}

		public override void OnRequestToken(RtcConnection connection)
		{
			if (this.EventOnRequestToken != null)
			{
				this.EventOnRequestToken(connection);
			}
		}

		public override void OnTokenPrivilegeWillExpire(RtcConnection connection, string token)
		{
			if (this.EventOnTokenPrivilegeWillExpire != null)
			{
				this.EventOnTokenPrivilegeWillExpire(connection, token);
			}
		}

		public override void OnFirstLocalAudioFramePublished(RtcConnection connection, int elapsed)
		{
			if (this.EventOnFirstLocalAudioFramePublished != null)
			{
				this.EventOnFirstLocalAudioFramePublished(connection, elapsed);
			}
		}

		public override void OnFirstRemoteAudioFrame(RtcConnection connection, uint userId, int elapsed)
		{
			if (this.EventOnFirstRemoteAudioFrame != null)
			{
				this.EventOnFirstRemoteAudioFrame(connection, userId, elapsed);
			}
		}

		public override void OnFirstRemoteAudioDecoded(RtcConnection connection, uint uid, int elapsed)
		{
			if (this.EventOnFirstRemoteAudioDecoded != null)
			{
				this.EventOnFirstRemoteAudioDecoded(connection, uid, elapsed);
			}
		}

		public override void OnLocalAudioStateChanged(RtcConnection connection, LOCAL_AUDIO_STREAM_STATE state, LOCAL_AUDIO_STREAM_ERROR error)
		{
			if (this.EventOnLocalAudioStateChanged != null)
			{
				this.EventOnLocalAudioStateChanged(connection, state, error);
			}
		}

		public override void OnRemoteAudioStateChanged(RtcConnection connection, uint remoteUid, REMOTE_AUDIO_STATE state, REMOTE_AUDIO_STATE_REASON reason, int elapsed)
		{
			if (this.EventOnRemoteAudioStateChanged != null)
			{
				this.EventOnRemoteAudioStateChanged(connection, remoteUid, state, reason, elapsed);
			}
		}

		public override void OnActiveSpeaker(RtcConnection connection, uint uid)
		{
			if (this.EventOnActiveSpeaker != null)
			{
				this.EventOnActiveSpeaker(connection, uid);
			}
		}

		public override void OnClientRoleChanged(RtcConnection connection, CLIENT_ROLE_TYPE oldRole, CLIENT_ROLE_TYPE newRole)
		{
			if (this.EventOnClientRoleChanged != null)
			{
				this.EventOnClientRoleChanged(connection, oldRole, newRole);
			}
		}

		public override void OnClientRoleChangeFailed(RtcConnection connection, CLIENT_ROLE_CHANGE_FAILED_REASON reason, CLIENT_ROLE_TYPE currentRole)
		{
			if (this.EventOnClientRoleChangeFailed != null)
			{
				this.EventOnClientRoleChangeFailed(connection, reason, currentRole);
			}
		}

		public override void OnAudioDeviceVolumeChanged(MEDIA_DEVICE_TYPE deviceType, int volume, bool muted)
		{
			if (this.EventOnAudioDeviceVolumeChanged != null)
			{
				this.EventOnAudioDeviceVolumeChanged(deviceType, volume, muted);
			}
		}

		public override void OnRtmpStreamingStateChanged(string url, RTMP_STREAM_PUBLISH_STATE state, RTMP_STREAM_PUBLISH_ERROR_TYPE errCode)
		{
			if (this.EventOnRtmpStreamingStateChanged != null)
			{
				this.EventOnRtmpStreamingStateChanged(url, state, errCode);
			}
		}

		public override void OnRtmpStreamingEvent(string url, RTMP_STREAMING_EVENT eventCode)
		{
			if (this.EventOnRtmpStreamingEvent != null)
			{
				this.EventOnRtmpStreamingEvent(url, eventCode);
			}
		}

		public override void OnTranscodingUpdated()
		{
			if (this.EventOnTranscodingUpdated != null)
			{
				this.EventOnTranscodingUpdated();
			}
		}

		public override void OnAudioRoutingChanged(int routing)
		{
			if (this.EventOnAudioRoutingChanged != null)
			{
				this.EventOnAudioRoutingChanged(routing);
			}
		}

		public override void OnChannelMediaRelayStateChanged(int state, int code)
		{
			if (this.EventOnChannelMediaRelayStateChanged != null)
			{
				this.EventOnChannelMediaRelayStateChanged(state, code);
			}
		}

		public override void OnChannelMediaRelayEvent(int code)
		{
			if (this.EventOnChannelMediaRelayEvent != null)
			{
				this.EventOnChannelMediaRelayEvent(code);
			}
		}

		public override void OnLocalPublishFallbackToAudioOnly(bool isFallbackOrRecover)
		{
			if (this.EventOnLocalPublishFallbackToAudioOnly != null)
			{
				this.EventOnLocalPublishFallbackToAudioOnly(isFallbackOrRecover);
			}
		}

		public override void OnRemoteSubscribeFallbackToAudioOnly(uint uid, bool isFallbackOrRecover)
		{
			if (this.EventOnRemoteSubscribeFallbackToAudioOnly != null)
			{
				this.EventOnRemoteSubscribeFallbackToAudioOnly(uid, isFallbackOrRecover);
			}
		}

		public override void OnRemoteAudioTransportStats(RtcConnection connection, uint remoteUid, ushort delay, ushort lost, ushort rxKBitRate)
		{
			if (this.EventOnRemoteAudioTransportStats != null)
			{
				this.EventOnRemoteAudioTransportStats(connection, remoteUid, delay, lost, rxKBitRate);
			}
		}

		public override void OnRemoteVideoTransportStats(RtcConnection connection, uint remoteUid, ushort delay, ushort lost, ushort rxKBitRate)
		{
			if (this.EventOnRemoteVideoTransportStats != null)
			{
				this.EventOnRemoteVideoTransportStats(connection, remoteUid, delay, lost, rxKBitRate);
			}
		}

		public override void OnConnectionStateChanged(RtcConnection connection, CONNECTION_STATE_TYPE state, CONNECTION_CHANGED_REASON_TYPE reason)
		{
			if (this.EventOnConnectionStateChanged != null)
			{
				this.EventOnConnectionStateChanged(connection, state, reason);
			}
		}

		public override void OnWlAccMessage(RtcConnection connection, WLACC_MESSAGE_REASON reason, WLACC_SUGGEST_ACTION action, string wlAccMsg)
		{
			if (this.EventOnWlAccMessage != null)
			{
				this.EventOnWlAccMessage(connection, reason, action, wlAccMsg);
			}
		}

		public override void OnWlAccStats(RtcConnection connection, WlAccStats currentStats, WlAccStats averageStats)
		{
			if (this.EventOnWlAccStats != null)
			{
				this.EventOnWlAccStats(connection, currentStats, averageStats);
			}
		}

		public override void OnNetworkTypeChanged(RtcConnection connection, NETWORK_TYPE type)
		{
			if (this.EventOnNetworkTypeChanged != null)
			{
				this.EventOnNetworkTypeChanged(connection, type);
			}
		}

		public override void OnEncryptionError(RtcConnection connection, ENCRYPTION_ERROR_TYPE errorType)
		{
			if (this.EventOnEncryptionError != null)
			{
				this.EventOnEncryptionError(connection, errorType);
			}
		}

		public override void OnUploadLogResult(RtcConnection connection, string requestId, bool success, UPLOAD_ERROR_REASON reason)
		{
			if (this.EventOnUploadLogResult != null)
			{
				this.EventOnUploadLogResult(connection, requestId, success, reason);
			}
		}

		public override void OnUserAccountUpdated(RtcConnection connection, uint remoteUid, string userAccount)
		{
			if (this.EventOnUserAccountUpdated != null)
			{
				this.EventOnUserAccountUpdated(connection, remoteUid, userAccount);
			}
		}

		public override void OnPermissionError(PERMISSION_TYPE permissionType)
		{
			if (this.EventOnPermissionError != null)
			{
				this.EventOnPermissionError(permissionType);
			}
		}

		public override void OnLocalUserRegistered(uint uid, string userAccount)
		{
			if (this.EventOnLocalUserRegistered != null)
			{
				this.EventOnLocalUserRegistered(uid, userAccount);
			}
		}

		public override void OnUserInfoUpdated(uint uid, UserInfo info)
		{
			if (this.EventOnUserInfoUpdated != null)
			{
				this.EventOnUserInfoUpdated(uid, info);
			}
		}

		public override void OnAudioSubscribeStateChanged(string channel, uint uid, STREAM_SUBSCRIBE_STATE oldState, STREAM_SUBSCRIBE_STATE newState, int elapseSinceLastState)
		{
			if (this.EventOnAudioSubscribeStateChanged != null)
			{
				this.EventOnAudioSubscribeStateChanged(channel, uid, oldState, newState, elapseSinceLastState);
			}
		}

		public override void OnVideoSubscribeStateChanged(string channel, uint uid, STREAM_SUBSCRIBE_STATE oldState, STREAM_SUBSCRIBE_STATE newState, int elapseSinceLastState)
		{
			if (this.EventOnVideoSubscribeStateChanged != null)
			{
				this.EventOnVideoSubscribeStateChanged(channel, uid, oldState, newState, elapseSinceLastState);
			}
		}

		public override void OnAudioPublishStateChanged(string channel, STREAM_PUBLISH_STATE oldState, STREAM_PUBLISH_STATE newState, int elapseSinceLastState)
		{
			if (this.EventOnAudioPublishStateChanged != null)
			{
				this.EventOnAudioPublishStateChanged(channel, oldState, newState, elapseSinceLastState);
			}
		}

		public override void OnVideoPublishStateChanged(VIDEO_SOURCE_TYPE source, string channel, STREAM_PUBLISH_STATE oldState, STREAM_PUBLISH_STATE newState, int elapseSinceLastState)
		{
			if (this.EventOnVideoPublishStateChanged != null)
			{
				this.EventOnVideoPublishStateChanged(source, channel, oldState, newState, elapseSinceLastState);
			}
		}

		public override void OnExtensionEvent(string provider, string extension, string key, string value)
		{
			if (this.EventOnExtensionEvent != null)
			{
				this.EventOnExtensionEvent(provider, extension, key, value);
			}
		}

		public override void OnExtensionStarted(string provider, string extension)
		{
			if (this.EventOnExtensionStarted != null)
			{
				this.EventOnExtensionStarted(provider, extension);
			}
		}

		public override void OnExtensionStopped(string provider, string extension)
		{
			if (this.EventOnExtensionStopped != null)
			{
				this.EventOnExtensionStopped(provider, extension);
			}
		}

		public override void OnExtensionError(string provider, string extension, int error, string message)
		{
			if (this.EventOnExtensionErrored != null)
			{
				this.EventOnExtensionErrored(provider, extension, error, message);
			}
		}

		public override void OnDirectCdnStreamingStateChanged(DIRECT_CDN_STREAMING_STATE state, DIRECT_CDN_STREAMING_ERROR error, string message)
		{
			if (this.EventOnExtensionErrored != null)
			{
				this.EventOnDirectCdnStreamingStateChanged(state, error, message);
			}
		}

		public override void OnDirectCdnStreamingStats(DirectCdnStreamingStats stats)
		{
			if (this.EventOnExtensionErrored != null)
			{
				this.EventOnDirectCdnStreamingStats(stats);
			}
		}
	}
	public abstract class IAudioDeviceManager
	{
		public abstract DeviceInfo[] EnumeratePlaybackDevices();

		public abstract int SetPlaybackDevice(string deviceId);

		public abstract int GetPlaybackDevice(ref string deviceId);

		public abstract int GetPlaybackDeviceInfo(ref string deviceId, ref string deviceName);

		public abstract int SetPlaybackDeviceVolume(int volume);

		public abstract int GetPlaybackDeviceVolume(ref int volume);

		public abstract int SetPlaybackDeviceMute(bool mute);

		public abstract int GetPlaybackDeviceMute(ref bool mute);

		public abstract int StartPlaybackDeviceTest(string testAudioFilePath);

		public abstract int StopPlaybackDeviceTest();

		public abstract int FollowSystemPlaybackDevice(bool enable);

		public abstract DeviceInfo[] EnumerateRecordingDevices();

		public abstract int SetRecordingDevice(string deviceId);

		public abstract int GetRecordingDevice(ref string deviceId);

		public abstract int GetRecordingDeviceInfo(ref string deviceId, ref string deviceName);

		public abstract int SetRecordingDeviceVolume(int volume);

		public abstract int GetRecordingDeviceVolume(ref int volume);

		public abstract int SetRecordingDeviceMute(bool mute);

		public abstract int GetRecordingDeviceMute(ref bool mute);

		public abstract int StartRecordingDeviceTest(int indicationInterval);

		public abstract int StopRecordingDeviceTest();

		public abstract int FollowSystemRecordingDevice(bool enable);

		public abstract int StartAudioDeviceLoopbackTest(int indicationInterval);

		public abstract int StopAudioDeviceLoopbackTest();
	}
	public abstract class IAudioEncodedFrameObserver
	{
		public virtual void OnRecordAudioEncodedFrame(IntPtr frameBufferPtr, int length, EncodedAudioFrameInfo audioEncodedFrameInfo)
		{
		}

		public virtual void OnPlaybackAudioEncodedFrame(IntPtr frameBufferPtr, int length, EncodedAudioFrameInfo audioEncodedFrameInfo)
		{
		}

		public virtual void OnMixedAudioEncodedFrame(IntPtr frameBufferPtr, int length, EncodedAudioFrameInfo audioEncodedFrameInfo)
		{
		}
	}
	public abstract class IAudioFrameObserver
	{
		public virtual bool OnRecordAudioFrame(string channelId, AudioFrame audioFrame)
		{
			return true;
		}

		public virtual bool OnPlaybackAudioFrame(string channelId, AudioFrame audio_frame)
		{
			return true;
		}

		public virtual bool OnMixedAudioFrame(string channelId, AudioFrame audio_frame)
		{
			return true;
		}

		public virtual int GetObservedAudioFramePosition()
		{
			return 0;
		}

		public virtual AudioParams GetPlaybackAudioParams()
		{
			return new AudioParams();
		}

		public virtual AudioParams GetRecordAudioParams()
		{
			return new AudioParams();
		}

		public virtual AudioParams GetMixedAudioParams()
		{
			return new AudioParams();
		}

		public virtual bool OnPlaybackAudioFrameBeforeMixing(string channel_id, uint uid, AudioFrame audio_frame)
		{
			return false;
		}

		public virtual bool OnPlaybackAudioFrameBeforeMixing(string channel_id, string uid, AudioFrame audio_frame)
		{
			return false;
		}
	}
	public abstract class IAudioSpectrumObserver
	{
		public virtual bool OnLocalAudioSpectrum(AudioSpectrumData data)
		{
			return true;
		}

		public virtual bool OnRemoteAudioSpectrum(UserAudioSpectrumInfo[] spectrums, uint spectrumNumber)
		{
			return true;
		}
	}
	public abstract class IMediaPlayer
	{
		public abstract void Dispose();

		public abstract int GetId();

		public abstract void InitEventHandler(IMediaPlayerSourceObserver engineEventHandler);

		public abstract void RegisterAudioFrameObserver(IMediaPlayerAudioFrameObserver observer);

		public abstract void RegisterAudioFrameObserver(IMediaPlayerAudioFrameObserver observer, RAW_AUDIO_FRAME_OP_MODE_TYPE mode);

		public abstract void UnregisterAudioFrameObserver();

		public abstract void RegisterMediaPlayerAudioSpectrumObserver(IAudioSpectrumObserver observer, int intervalInMS);

		public abstract void UnregisterMediaPlayerAudioSpectrumObserver();

		public abstract int Open(string url, long startPos);

		public abstract int OpenWithCustomSource(long startPos, IMediaPlayerCustomDataProvider provider);

		public abstract int OpenWithMediaSource(MediaSource source);

		public abstract int SetSoundPositionParams(float pan, float gain);

		public abstract int Play();

		public abstract int Pause();

		public abstract int Stop();

		public abstract int Resume();

		public abstract int Seek(long newPos);

		public abstract int GetDuration(ref long duration);

		public abstract int GetPlayPosition(ref long pos);

		public abstract int GetStreamCount(ref long count);

		public abstract int GetStreamInfo(long index, ref PlayerStreamInfo info);

		public abstract int SetLoopCount(int loopCount);

		public abstract int SetPlaybackSpeed(int speed);

		public abstract int SelectAudioTrack(int index);

		public abstract int SetPlayerOption(string key, int value);

		public abstract int SetPlayerOption(string key, string value);

		public abstract int TakeScreenshot(string filename);

		public abstract int SelectInternalSubtitle(int index);

		public abstract int SetExternalSubtitle(string url);

		public abstract MEDIA_PLAYER_STATE GetState();

		public abstract int Mute(bool muted);

		public abstract int GetMute(ref bool muted);

		public abstract int AdjustPlayoutVolume(int volume);

		public abstract int GetPlayoutVolume(ref int volume);

		public abstract int AdjustPublishSignalVolume(int volume);

		public abstract int GetPublishSignalVolume(ref int volume);

		public abstract int SetView();

		public abstract int SetRenderMode(RENDER_MODE_TYPE renderMode);

		public abstract int SetAudioDualMonoMode(AUDIO_DUAL_MONO_MODE mode);

		public abstract string GetPlayerSdkVersion();

		public abstract string GetPlaySrc();

		public abstract int SetAudioPitch(int pitch);

		public abstract int SetSpatialAudioParams(SpatialAudioParams spatial_audio_params);

		public abstract int OpenWithAgoraCDNSrc(string src, long startPos);

		public abstract int GetAgoraCDNLineCount();

		public abstract int SwitchAgoraCDNLineByIndex(int index);

		public abstract int GetCurrentAgoraCDNIndex();

		public abstract int EnableAutoSwitchAgoraCDN(bool enable);

		public abstract int RenewAgoraCDNSrcToken(string token, long ts);

		public abstract int SwitchAgoraCDNSrc(string src, bool syncPts = false);

		public abstract int SwitchSrc(string src, bool syncPts = true);

		public abstract int PreloadSrc(string src, long startPos);

		public abstract int PlayPreloadedSrc(string src);

		public abstract int UnloadSrc(string src);
	}
	public abstract class IMediaPlayerCacheManager
	{
		public abstract int RemoveAllCaches();

		public abstract int RemoveOldCache();

		public abstract int RemoveCacheByUri(string uri);

		public abstract int SetCacheDir(string path);

		public abstract int SetMaxCacheFileCount(int count);

		public abstract int SetMaxCacheFileSize(long cacheSize);

		public abstract int EnableAutoRemoveCache(bool enable);

		public abstract int GetCacheDir(out string path, int length);

		public abstract int GetMaxCacheFileCount();

		public abstract long GetMaxCacheFileSize();

		public abstract int GetCacheFileCount();
	}
	public abstract class IMediaPlayerCustomDataProvider
	{
		public virtual long OnSeek(long offset, int whence)
		{
			return 0L;
		}

		public virtual int OnReadData(IntPtr bufferPtr, int bufferSize)
		{
			return 0;
		}
	}
	public abstract class IMediaPlayerAudioFrameObserver
	{
		public virtual bool OnFrame(AudioPcmFrame videoFrame)
		{
			return true;
		}
	}
	public abstract class IMediaPlayerSourceObserver
	{
		public virtual void OnPlayerSourceStateChanged(MEDIA_PLAYER_STATE state, MEDIA_PLAYER_ERROR ec)
		{
		}

		public virtual void OnPositionChanged(long position_ms)
		{
		}

		public virtual void OnPlayerEvent(MEDIA_PLAYER_EVENT eventCode, long elapsedTime, string message)
		{
		}

		public virtual void OnMetaData(byte[] data, int length)
		{
		}

		public virtual void OnPlayBufferUpdated(long playCachedBuffer)
		{
		}

		public virtual void OnPreloadEvent(string src, PLAYER_PRELOAD_EVENT @event)
		{
		}

		public virtual void OnCompleted()
		{
		}

		public virtual void OnAgoraCDNTokenWillExpire()
		{
		}

		public virtual void OnPlayerSrcInfoChanged(SrcInfo from, SrcInfo to)
		{
		}

		public virtual void OnPlayerInfoUpdated(PlayerUpdatedInfo info)
		{
		}

		public virtual void OnAudioVolumeIndication(int volume)
		{
		}
	}
	public abstract class IMediaRecorder
	{
		public abstract int SetMediaRecorderObserver(RtcConnection connection, IMediaRecorderObserver callback);

		public abstract int StartRecording(RtcConnection connection, MediaRecorderConfiguration config);

		public abstract int StopRecording(RtcConnection connection);
	}
	public abstract class IMediaRecorderObserver
	{
		public virtual void OnRecorderStateChanged(RecorderState state, RecorderErrorCode error)
		{
		}

		public virtual void OnRecorderInfoUpdated(RecorderInfo info)
		{
		}
	}
	public abstract class IMetadataObserver
	{
		public virtual int GetMaxMetadataSize()
		{
			return 0;
		}

		public virtual bool OnReadyToSendMetadata(ref Metadata metadata, VIDEO_SOURCE_TYPE source_type)
		{
			return false;
		}

		public virtual void OnMetadataReceived(Metadata metadata)
		{
		}
	}
	public abstract class IRtcEngine
	{
		public abstract int Initialize(RtcEngineContext context);

		public abstract void Dispose(bool sync = false);

		public abstract int SetChannelProfile(CHANNEL_PROFILE_TYPE profile);

		public abstract int SetClientRole(CLIENT_ROLE_TYPE role);

		public abstract int SetClientRole(CLIENT_ROLE_TYPE role, ClientRoleOptions options);

		public abstract int JoinChannel(string token, string channelId, string info = "", uint uid = 0u);

		public abstract int JoinChannel(string token, string channelId, uint uid, ChannelMediaOptions options);

		public abstract int UpdateChannelMediaOptions(ChannelMediaOptions options);

		public abstract int LeaveChannel();

		public abstract int LeaveChannel(LeaveChannelOptions options);

		public abstract int RenewToken(string token);

		public abstract int JoinChannelWithUserAccount(string token, string channelId, string userAccount);

		public abstract int JoinChannelWithUserAccount(string token, string channelId, string userAccount, ChannelMediaOptions options);

		public abstract int GetUserInfoByUserAccount(string userAccount, ref UserInfo userInfo);

		public abstract int GetUserInfoByUid(uint uid, ref UserInfo userInfo);

		public abstract void InitEventHandler(IRtcEngineEventHandler engineEventHandler);

		public abstract int EnableAudio();

		public abstract int DisableAudio();

		public abstract int SetAudioProfile(AUDIO_PROFILE_TYPE profile, AUDIO_SCENARIO_TYPE scenario);

		public abstract int SetAudioProfile(AUDIO_PROFILE_TYPE profile);

		public abstract int SetAudioScenario(AUDIO_SCENARIO_TYPE scenario);

		public abstract int AdjustRecordingSignalVolume(int volume);

		public abstract int MuteRecordingSignal(bool mute);

		public abstract int AdjustPlaybackSignalVolume(int volume);

		public abstract int AdjustLoopbackSignalVolume(int volume);

		public abstract int AdjustUserPlaybackSignalVolume(uint uid, int volume);

		public abstract int EnableLocalAudio(bool enabled);

		public abstract int MuteLocalAudioStream(bool mute);

		public abstract int MuteAllRemoteAudioStreams(bool mute);

		public abstract int SetDefaultMuteAllRemoteAudioStreams(bool mute);

		public abstract int MuteRemoteAudioStream(uint uid, bool mute);

		public abstract int EnableVideo();

		public abstract int DisableVideo();

		public abstract int StartPreview();

		public abstract int StartPreview(VIDEO_SOURCE_TYPE sourceType);

		public abstract int StopPreview();

		public abstract int StopPreview(VIDEO_SOURCE_TYPE sourceType);

		public abstract int SetVideoEncoderConfiguration(VideoEncoderConfiguration config);

		public abstract int SetupRemoteVideo(VideoCanvas canvas);

		public abstract int SetupLocalVideo(VideoCanvas canvas);

		public abstract int SetLocalRenderMode(RENDER_MODE_TYPE renderMode, VIDEO_MIRROR_MODE_TYPE mirrorMode);

		public abstract int SetRemoteRenderMode(uint uid, RENDER_MODE_TYPE renderMode, VIDEO_MIRROR_MODE_TYPE mirrorMode);

		public abstract int SetLocalRenderMode(RENDER_MODE_TYPE renderMode);

		public abstract int SetLocalVideoMirrorMode(VIDEO_MIRROR_MODE_TYPE mirrorMode);

		public abstract int MuteLocalVideoStream(bool mute);

		public abstract int MuteRemoteVideoStream(uint uid, bool mute);

		public abstract int EnableLocalVideo(bool enabled);

		public abstract int MuteAllRemoteVideoStreams(bool mute);

		public abstract int SetDefaultMuteAllRemoteVideoStreams(bool mute);

		public abstract int EnableVideoImageSource(bool enable, ImageTrackOptions options);

		public abstract int SetColorEnhanceOptions(bool enabled, ColorEnhanceOptions options, MEDIA_SOURCE_TYPE type = MEDIA_SOURCE_TYPE.PRIMARY_CAMERA_SOURCE);

		public abstract int SetLowlightEnhanceOptions(bool enabled, LowlightEnhanceOptions options, MEDIA_SOURCE_TYPE type = MEDIA_SOURCE_TYPE.PRIMARY_CAMERA_SOURCE);

		public abstract int SetRemoteVideoSubscriptionOptions(uint uid, VideoSubscriptionOptions options);

		public abstract int SetVideoDenoiserOptions(bool enabled, VideoDenoiserOptions options, MEDIA_SOURCE_TYPE type = MEDIA_SOURCE_TYPE.PRIMARY_CAMERA_SOURCE);

		public abstract int TakeSnapshot(uint uid, string filePath);

		public abstract int StartPrimaryCameraCapture(CameraCapturerConfiguration config);

		public abstract int StartSecondaryCameraCapture(CameraCapturerConfiguration config);

		public abstract int StopPrimaryCameraCapture();

		public abstract int StopSecondaryCameraCapture();

		public abstract int StartPrimaryScreenCapture(ScreenCaptureConfiguration config);

		public abstract int StartSecondaryScreenCapture(ScreenCaptureConfiguration config);

		public abstract int StopPrimaryScreenCapture();

		public abstract int StopSecondaryScreenCapture();

		public abstract IMediaPlayer CreateMediaPlayer();

		public abstract void DestroyMediaPlayer(IMediaPlayer mediaPlayer);

		public abstract int SetAdvancedAudioOptions(AdvancedAudioOptions options);

		public abstract int SetBeautyEffectOptions(bool enabled, BeautyOptions options, MEDIA_SOURCE_TYPE type = MEDIA_SOURCE_TYPE.PRIMARY_CAMERA_SOURCE);

		public abstract int EnableVirtualBackground(bool enabled, VirtualBackgroundSource backgroundSource, SegmentationProperty segproperty, MEDIA_SOURCE_TYPE type = MEDIA_SOURCE_TYPE.PRIMARY_CAMERA_SOURCE);

		public abstract int EnableRemoteSuperResolution(uint userId, bool enable);

		public abstract int EnableFaceDetection(bool enabled);

		public abstract int EnableInEarMonitoring(bool enabled, int includeAudioFilters);

		public abstract int SetInEarMonitoringVolume(int volume);

		public abstract int StartAudioMixing(string filePath, bool loopback, int cycle);

		public abstract int StartAudioMixing(string filePath, bool loopback, int cycle, int startPos);

		public abstract int SetAudioMixingDualMonoMode(AUDIO_MIXING_DUAL_MONO_MODE mode);

		public abstract int StopAudioMixing();

		public abstract int PauseAudioMixing();

		public abstract int ResumeAudioMixing();

		public abstract int AdjustAudioMixingVolume(int volume);

		public abstract int AdjustAudioMixingPublishVolume(int volume);

		public abstract int GetAudioMixingPublishVolume();

		public abstract int AdjustAudioMixingPlayoutVolume(int volume);

		public abstract int GetAudioMixingPlayoutVolume();

		public abstract int GetAudioMixingDuration();

		public abstract int GetAudioMixingCurrentPosition();

		public abstract int SetAudioMixingPosition(int pos);

		public abstract int SetAudioMixingPitch(int pitch);

		public abstract int GetEffectsVolume();

		public abstract int SetEffectsVolume(int volume);

		public abstract int PreloadEffect(int soundId, string filePath, int startPos = 0);

		public abstract int PlayEffect(int soundId, string filePath, int loopCount, double pitch, double pan, int gain, bool publish = false, int startPos = 0);

		public abstract int PlayAllEffects(int loopCount, double pitch, double pan, int gain, bool publish = false);

		public abstract int GetVolumeOfEffect(int soundId);

		public abstract int SetVolumeOfEffect(int soundId, int volume);

		public abstract int PauseEffect(int soundId);

		public abstract int PauseAllEffects();

		public abstract int ResumeEffect(int soundId);

		public abstract int ResumeAllEffects();

		public abstract int StopEffect(int soundId);

		public abstract int StopAllEffects();

		public abstract int UnloadEffect(int soundId);

		public abstract int UnloadAllEffects();

		public abstract int GetEffectCurrentPosition(int soundId);

		public abstract int GetEffectDuration(string filePath);

		public abstract int SetEffectPosition(int soundId, int pos);

		public abstract int StartRhythmPlayer(string sound1, string sound2, AgoraRhythmPlayerConfig config);

		public abstract int StopRhythmPlayer();

		public abstract int ConfigRhythmPlayer(AgoraRhythmPlayerConfig config);

		public abstract int SetVoiceBeautifierPreset(VOICE_BEAUTIFIER_PRESET preset);

		public abstract int SetAudioEffectPreset(AUDIO_EFFECT_PRESET preset);

		public abstract int SetVoiceConversionPreset(VOICE_CONVERSION_PRESET preset);

		public abstract int SetAudioEffectParameters(AUDIO_EFFECT_PRESET preset, int param1, int param2);

		public abstract int SetVoiceBeautifierParameters(VOICE_BEAUTIFIER_PRESET preset, int param1, int param2);

		public abstract int SetVoiceConversionParameters(VOICE_CONVERSION_PRESET preset, int param1, int param2);

		public abstract int SetLocalVoicePitch(double pitch);

		public abstract int SetLocalVoiceEqualization(AUDIO_EQUALIZATION_BAND_FREQUENCY bandFrequency, int bandGain);

		public abstract int SetLocalVoiceReverb(AUDIO_REVERB_TYPE reverbKey, int value);

		public abstract int StartEchoTest();

		public abstract int StartEchoTest(int intervalInSeconds);

		public abstract int StartEchoTest(EchoTestConfiguration config);

		public abstract int StopEchoTest();

		public abstract int StartLastmileProbeTest(LastmileProbeConfig config);

		public abstract int StopLastmileProbeTest();

		public abstract ScreenCaptureSourceInfo[] GetScreenCaptureSources(SIZE thumbSize, SIZE iconSize, bool includeScreen);

		public abstract int SetScreenCaptureScenario(SCREEN_SCENARIO_TYPE screenScenario);

		public abstract int StartScreenCaptureByDisplayId(uint displayId, Rectangle regionRect, ScreenCaptureParameters captureParams);

		public abstract int StartScreenCaptureByScreenRect(Rectangle screenRect, Rectangle regionRect, ScreenCaptureParameters captureParams);

		public abstract int StartScreenCapture(byte[] mediaProjectionPermissionResultData, ScreenCaptureParameters captureParams);

		public abstract int StartScreenCapture(ScreenCaptureParameters2 captureParams);

		public abstract int UpdateScreenCapture(ScreenCaptureParameters2 captureParams);

		public abstract int StartScreenCaptureByWindowId(ulong windowId, Rectangle regionRect, ScreenCaptureParameters captureParams);

		public abstract int SetScreenCaptureContentHint(VIDEO_CONTENT_HINT contentHint);

		public abstract int UpdateScreenCaptureRegion(Rectangle regionRect);

		public abstract int UpdateScreenCaptureParameters(ScreenCaptureParameters captureParams);

		public abstract int StopScreenCapture();

		public abstract int EnableDualStreamMode(bool enabled);

		public abstract int EnableDualStreamMode(VIDEO_SOURCE_TYPE sourceType, bool enabled);

		public abstract int EnableDualStreamMode(VIDEO_SOURCE_TYPE sourceType, bool enabled, SimulcastStreamConfig streamConfig);

		public abstract int SetRemoteVideoStreamType(uint uid, VIDEO_STREAM_TYPE streamType);

		public abstract int SetRemoteDefaultVideoStreamType(VIDEO_STREAM_TYPE streamType);

		public abstract int SetDualStreamMode(SIMULCAST_STREAM_MODE mode);

		public abstract int SetDualStreamMode(VIDEO_SOURCE_TYPE sourceType, SIMULCAST_STREAM_MODE mode);

		public abstract int SetDualStreamMode(VIDEO_SOURCE_TYPE sourceType, SIMULCAST_STREAM_MODE mode, SimulcastStreamConfig streamConfig);

		public abstract int AddVideoWatermark(RtcImage watermark);

		public abstract int AddVideoWatermark(string watermarkUrl, WatermarkOptions options);

		public abstract int ClearVideoWatermark();

		public abstract int ClearVideoWatermarks();

		public abstract int SetEncryptionMode(string encryptionMode);

		public abstract int SetEncryptionSecret(string secret);

		public abstract int EnableEncryption(bool enabled, EncryptionConfig config);

		public abstract int EnableSoundPositionIndication(bool enabled);

		public abstract int StartLocalVideoTranscoder(LocalTranscoderConfiguration config);

		public abstract int UpdateLocalTranscoderConfiguration(LocalTranscoderConfiguration config);

		public abstract int StopLocalVideoTranscoder();

		public abstract int StartChannelMediaRelay(ChannelMediaRelayConfiguration configuration);

		public abstract int UpdateChannelMediaRelay(ChannelMediaRelayConfiguration configuration);

		public abstract int StopChannelMediaRelay();

		public abstract int PauseAllChannelMediaRelay();

		public abstract int ResumeAllChannelMediaRelay();

		public abstract int PushAudioFrame(MEDIA_SOURCE_TYPE type, AudioFrame frame, bool wrap = false, int sourceId = 0);

		public abstract int SetExternalAudioSource(bool enabled, int sampleRate, int channels, int sourceNumber, bool localPlayback = false, bool publish = true);

		public abstract int AdjustCustomAudioPublishVolume(int sourceId, int volume);

		public abstract int AdjustCustomAudioPlayoutVolume(int sourceId, int volume);

		public abstract int SetExternalAudioSink(bool enabled, int sampleRate, int channels);

		public abstract int PullAudioFrame(AudioFrame frame);

		public abstract void RegisterAudioFrameObserver(IAudioFrameObserver audioFrameObserver, OBSERVER_MODE mode = OBSERVER_MODE.INTPTR);

		public abstract void UnRegisterAudioFrameObserver();

		public abstract int SetRecordingAudioFrameParameters(int sampleRate, int channel, RAW_AUDIO_FRAME_OP_MODE_TYPE mode, int samplesPerCall);

		public abstract int SetPlaybackAudioFrameParameters(int sampleRate, int channel, RAW_AUDIO_FRAME_OP_MODE_TYPE mode, int samplesPerCall);

		public abstract int SetMixedAudioFrameParameters(int sampleRate, int channel, int samplesPerCall);

		public abstract int SetPlaybackAudioFrameBeforeMixingParameters(int sampleRate, int channel);

		public abstract void RegisterAudioEncodedFrameObserver(AudioEncodedFrameObserverConfig config, IAudioEncodedFrameObserver observer);

		public abstract void UnRegisterAudioEncodedFrameObserver();

		public abstract int EnableAudioSpectrumMonitor(int intervalInMS = 100);

		public abstract int DisableAudioSpectrumMonitor();

		public abstract void RegisterAudioSpectrumObserver(IAudioSpectrumObserver observer);

		public abstract void UnregisterAudioSpectrumObserver();

		public abstract int SetExternalVideoSource(bool enabled, bool useTexture, EXTERNAL_VIDEO_SOURCE_TYPE sourceType, SenderOptions encodedVideoOption);

		public abstract int PushVideoFrame(ExternalVideoFrame frame, uint videoTrackId = 0u);

		public abstract int PushEncodedVideoImage(byte[] imageBuffer, uint length, EncodedVideoFrameInfo videoEncodedFrameInfo, uint videoTrackId = 0u);

		public abstract uint CreateCustomEncodedVideoTrack(SenderOptions sender_option);

		public abstract int DestroyCustomEncodedVideoTrack(uint video_track_id);

		public abstract uint CreateCustomVideoTrack();

		public abstract int DestroyCustomVideoTrack(uint video_track_id);

		public abstract void RegisterVideoFrameObserver(IVideoFrameObserver videoFrameObserver, OBSERVER_MODE mode = OBSERVER_MODE.INTPTR);

		public abstract void UnRegisterVideoFrameObserver();

		public abstract void RegisterVideoEncodedFrameObserver(IVideoEncodedFrameObserver videoEncodedImageReceiver, OBSERVER_MODE mode = OBSERVER_MODE.INTPTR);

		public abstract void UnRegisterVideoEncodedFrameObserver();

		public abstract int LoadExtensionProvider(string path, bool unload_after_use = false);

		public abstract int SetExtensionProviderProperty(string provider, string key, string value);

		public abstract int EnableExtension(string provider, string extension, bool enable = true, MEDIA_SOURCE_TYPE type = MEDIA_SOURCE_TYPE.UNKNOWN_MEDIA_SOURCE);

		public abstract int SetExtensionProperty(string provider, string extension, string key, string value, MEDIA_SOURCE_TYPE type = MEDIA_SOURCE_TYPE.UNKNOWN_MEDIA_SOURCE);

		public abstract int GetExtensionProperty(string provider, string extension, string key, ref string value, int buf_len, MEDIA_SOURCE_TYPE type = MEDIA_SOURCE_TYPE.UNKNOWN_MEDIA_SOURCE);

		public abstract void RegisterMediaMetadataObserver(IMetadataObserver observer, METADATA_TYPE type);

		public abstract void UnregisterMediaMetadataObserver();

		public abstract int StartAudioRecording(string filePath, AUDIO_RECORDING_QUALITY_TYPE quality);

		public abstract int StartAudioRecording(string filePath, int sampleRate, AUDIO_RECORDING_QUALITY_TYPE quality);

		public abstract int StartAudioRecording(AudioRecordingConfiguration config);

		public abstract int StopAudioRecording();

		public abstract int SetCameraCapturerConfiguration(CameraCapturerConfiguration config);

		public abstract int SwitchCamera();

		public abstract bool IsCameraZoomSupported();

		public abstract bool IsCameraFaceDetectSupported();

		public abstract bool IsCameraTorchSupported();

		public abstract bool IsCameraFocusSupported();

		public abstract bool IsCameraAutoFocusFaceModeSupported();

		public abstract int SetCameraZoomFactor(float factor);

		public abstract float GetCameraMaxZoomFactor();

		public abstract int SetCameraFocusPositionInPreview(float positionX, float positionY);

		public abstract int SetCameraTorchOn(bool isOn);

		public abstract int SetCameraAutoFocusFaceModeEnabled(bool enabled);

		public abstract bool IsCameraExposurePositionSupported();

		public abstract int SetCameraExposurePosition(float positionXinView, float positionYinView);

		public abstract bool IsCameraAutoExposureFaceModeSupported();

		public abstract int SetCameraAutoExposureFaceModeEnabled(bool enabled);

		public abstract int SetDefaultAudioRouteToSpeakerphone(bool defaultToSpeaker);

		public abstract int SetEnableSpeakerphone(bool speakerOn);

		public abstract bool IsSpeakerphoneEnabled();

		public abstract int EnableAudioVolumeIndication(int interval, int smooth, bool reportVad);

		public abstract int CreateDataStream(ref int streamId, bool reliable, bool ordered);

		public abstract int CreateDataStream(ref int streamId, DataStreamConfig config);

		public abstract int SendStreamMessage(int streamId, byte[] data, uint length);

		public abstract int EnableLoopbackRecording(bool enabled, string deviceName = "");

		public abstract int GetLoopbackRecordingVolume();

		public abstract int SetCloudProxy(CLOUD_PROXY_TYPE proxyType);

		public abstract string GetCallId();

		public abstract int Rate(string callId, int rating, string description);

		public abstract int Complain(string callId, string description);

		public abstract string GetVersion(ref int build);

		public abstract string GetErrorDescription(int code);

		public abstract IAudioDeviceManager GetAudioDeviceManager();

		public abstract IVideoDeviceManager GetVideoDeviceManager();

		public abstract IMediaPlayerCacheManager GetMediaPlayerCacheManager();

		public abstract ILocalSpatialAudioEngine GetLocalSpatialAudioEngine();

		public abstract int SetRemoteVoicePosition(uint uid, double pan, double gain);

		public abstract int EnableSpatialAudio(bool enabled);

		public abstract int SetRemoteUserSpatialAudioParams(uint uid, SpatialAudioParams param);

		public abstract int AddInjectStreamUrl(string url, InjectStreamConfig config);

		public abstract int RemoveInjectStreamUrl(string url);

		public abstract int SetDirectCdnStreamingAudioConfiguration(AUDIO_PROFILE_TYPE profile);

		public abstract int SetDirectCdnStreamingVideoConfiguration(VideoEncoderConfiguration config);

		public abstract int StartDirectCdnStreaming(string publishUrl, DirectCdnStreamingMediaOptions options);

		public abstract int StopDirectCdnStreaming();

		public abstract int UpdateDirectCdnStreamingMediaOptions(DirectCdnStreamingMediaOptions options);

		public abstract int StartRtmpStreamWithoutTranscoding(string url);

		public abstract int StartRtmpStreamWithTranscoding(string url, LiveTranscoding transcoding);

		public abstract int UpdateRtmpTranscoding(LiveTranscoding transcoding);

		public abstract int StopRtmpStream(string url);

		public abstract int SetLogFile(string filePath);

		public abstract int SetLogFilter(uint filter);

		public abstract int SetLogLevel(LOG_LEVEL level);

		public abstract int SetLogFileSize(uint fileSizeInKBytes);

		public abstract int UploadLogFile(ref string requestId);

		public abstract int SetSubscribeAudioBlacklist(uint[] uidList, int uidNumber);

		public abstract int SetSubscribeAudioWhitelist(uint[] uidList, int uidNumber);

		public abstract int SetSubscribeVideoBlacklist(uint[] uidList, int uidNumber);

		public abstract int SetSubscribeVideoWhitelist(uint[] uidList, int uidNumber);

		public abstract int StartPrimaryCustomAudioTrack(AudioTrackConfig config);

		public abstract int StopPrimaryCustomAudioTrack();

		public abstract int StartSecondaryCustomAudioTrack(AudioTrackConfig config);

		public abstract int StopSecondaryCustomAudioTrack();

		public abstract int SetCameraDeviceOrientation(VIDEO_SOURCE_TYPE type, VIDEO_ORIENTATION orientation);

		public abstract int SetScreenCaptureOrientation(VIDEO_SOURCE_TYPE type, VIDEO_ORIENTATION orientation);

		public abstract CONNECTION_STATE_TYPE GetConnectionState();

		public abstract int SetRemoteUserPriority(uint uid, PRIORITY_TYPE userPriority);

		public abstract int PauseAudio();

		public abstract int ResumeAudio();

		public abstract int EnableWebSdkInteroperability(bool enabled);

		public abstract int SendCustomReportMessage(string id, string category, string @event, string label, int value);

		public abstract int StartAudioFrameDump(string channel_id, uint user_id, string location, string uuid, string passwd, long duration_ms, bool auto_upload);

		public abstract int StopAudioFrameDump(string channel_id, uint user_id, string location);

		public abstract int RegisterLocalUserAccount(string appId, string userAccount);

		public abstract int SetAudioSessionOperationRestriction(AUDIO_SESSION_OPERATION_RESTRICTION restriction);

		public abstract int SetParameters(string parameters);

		public abstract int GetAudioDeviceInfo(ref DeviceInfo deviceInfo);

		public abstract int EnableCustomAudioLocalPlayback(int sourceId, bool enabled);

		public abstract int SetLocalPublishFallbackOption(STREAM_FALLBACK_OPTIONS option);

		public abstract int SetRemoteSubscribeFallbackOption(STREAM_FALLBACK_OPTIONS option);

		public abstract int EnableEchoCancellationExternal(bool enabled, int audioSourceDelay);

		public abstract int SetDirectExternalAudioSource(bool enable, bool localPlayback);

		public abstract int PushDirectAudioFrame(AudioFrame frame);

		public abstract int SetLocalAccessPoint(LocalAccessPointConfiguration config);

		public abstract int SetAVSyncSource(string channelId, uint uid);

		public abstract int EnableContentInspect(bool enabled, ContentInspectConfig config);

		public abstract bool StartDumpVideo(VIDEO_SOURCE_TYPE type, string dir);

		public abstract bool StopDumpVideo();

		public abstract int EnableWirelessAccelerate(bool enabled);

		public abstract int GetAudioTrackCount();

		public abstract int SelectAudioTrack(int index);

		public abstract IMediaRecorder GetMediaRecorder();
	}
	public abstract class IRtcEngineEx : IRtcEngine
	{
		public abstract int JoinChannelEx(string token, RtcConnection connection, ChannelMediaOptions options);

		public abstract int LeaveChannelEx(RtcConnection connection);

		public abstract int UpdateChannelMediaOptionsEx(ChannelMediaOptions options, RtcConnection connection);

		public abstract int SetVideoEncoderConfigurationEx(VideoEncoderConfiguration config, RtcConnection connection);

		public abstract int SetupRemoteVideoEx(VideoCanvas canvas, RtcConnection connection);

		public abstract int MuteRemoteAudioStreamEx(uint uid, bool mute, RtcConnection connection);

		public abstract int MuteRemoteVideoStreamEx(uint uid, bool mute, RtcConnection connection);

		public abstract int SetRemoteVoicePositionEx(uint uid, double pan, double gain, RtcConnection connection);

		public abstract int SetRemoteUserSpatialAudioParamsEx(uint uid, SpatialAudioParams param, RtcConnection connection);

		public abstract int SetRemoteRenderModeEx(uint uid, RENDER_MODE_TYPE renderMode, VIDEO_MIRROR_MODE_TYPE mirrorMode, RtcConnection connection);

		public abstract int EnableLoopbackRecordingEx(bool enabled, RtcConnection connection);

		public abstract CONNECTION_STATE_TYPE GetConnectionStateEx(RtcConnection connection);

		public abstract int EnableEncryptionEx(RtcConnection connection, bool enabled, EncryptionConfig config);

		public abstract int CreateDataStreamEx(ref int streamId, bool reliable, bool ordered, RtcConnection connection);

		public abstract int CreateDataStreamEx(ref int streamId, DataStreamConfig config, RtcConnection connection);

		public abstract int SendStreamMessageEx(int streamId, byte[] data, uint length, RtcConnection connection);

		public abstract int AddVideoWatermarkEx(string watermarkUrl, WatermarkOptions options, RtcConnection connection);

		public abstract int ClearVideoWatermarkEx(RtcConnection connection);

		public abstract int SendCustomReportMessageEx(string id, string category, string @event, string label, int value, RtcConnection connection);

		public abstract int SetRemoteVideoStreamTypeEx(uint uid, VIDEO_STREAM_TYPE streamType, RtcConnection connection);

		public abstract int EnableAudioVolumeIndicationEx(int interval, int smooth, bool reportVad, RtcConnection connection);

		public abstract int SetVideoProfileEx(int width, int height, int frameRate, int bitrate);

		public abstract int EnableDualStreamModeEx(VIDEO_SOURCE_TYPE sourceType, bool enabled, SimulcastStreamConfig streamConfig, RtcConnection connection);

		public abstract int GetUserInfoByUserAccountEx(string userAccount, ref UserInfo userInfo, RtcConnection connection);

		public abstract int GetUserInfoByUidEx(uint uid, ref UserInfo userInfo, RtcConnection connection);

		public abstract int SetRemoteVideoSubscriptionOptionsEx(uint uid, VideoSubscriptionOptions options, RtcConnection connection);

		public abstract int SetSubscribeAudioBlacklistEx(uint[] uidList, int uidNumber, RtcConnection connection);

		public abstract int SetSubscribeAudioWhitelistEx(uint[] uidList, int uidNumber, RtcConnection connection);

		public abstract int SetSubscribeVideoBlacklistEx(uint[] uidList, int uidNumber, RtcConnection connection);

		public abstract int SetSubscribeVideoWhitelistEx(uint[] uidList, int uidNumber, RtcConnection connection);

		public abstract int SetDualStreamModeEx(VIDEO_SOURCE_TYPE sourceType, SIMULCAST_STREAM_MODE mode, SimulcastStreamConfig streamConfig, RtcConnection connection);

		public abstract int TakeSnapshotEx(RtcConnection connection, uint uid, string filePath);
	}
	public abstract class IRtcEngineEventHandler
	{
		public virtual void OnJoinChannelSuccess(RtcConnection connection, int elapsed)
		{
		}

		public virtual void OnRejoinChannelSuccess(RtcConnection connection, int elapsed)
		{
		}

		public virtual void OnProxyConnected(string channel, uint uid, PROXY_TYPE proxyType, string localProxyIp, int elapsed)
		{
		}

		public virtual void OnError(int err, string msg)
		{
		}

		public virtual void OnAudioQuality(RtcConnection connection, uint remoteUid, int quality, ushort delay, ushort lost)
		{
		}

		public virtual void OnLastmileProbeResult(LastmileProbeResult result)
		{
		}

		public virtual void OnAudioVolumeIndication(RtcConnection connection, AudioVolumeInfo[] speakers, uint speakerNumber, int totalVolume)
		{
		}

		public virtual void OnLeaveChannel(RtcConnection connection, RtcStats stats)
		{
		}

		public virtual void OnRtcStats(RtcConnection connection, RtcStats stats)
		{
		}

		public virtual void OnAudioDeviceStateChanged(string deviceId, MEDIA_DEVICE_TYPE deviceType, MEDIA_DEVICE_STATE_TYPE deviceState)
		{
		}

		[Obsolete("This method is deprecated, use onAudioMixingStateChanged instead")]
		public virtual void OnAudioMixingFinished()
		{
		}

		public virtual void OnAudioEffectFinished(int soundId)
		{
		}

		public virtual void OnVideoDeviceStateChanged(string deviceId, MEDIA_DEVICE_TYPE deviceType, MEDIA_DEVICE_STATE_TYPE deviceState)
		{
		}

		public virtual void OnMediaDeviceChanged(MEDIA_DEVICE_TYPE deviceType)
		{
		}

		public virtual void OnNetworkQuality(RtcConnection connection, uint remoteUid, int txQuality, int rxQuality)
		{
		}

		public virtual void OnIntraRequestReceived(RtcConnection connection)
		{
		}

		public virtual void OnUplinkNetworkInfoUpdated(UplinkNetworkInfo info)
		{
		}

		public virtual void OnDownlinkNetworkInfoUpdated(DownlinkNetworkInfo info)
		{
		}

		public virtual void OnLastmileQuality(int quality)
		{
		}

		public virtual void OnFirstLocalVideoFrame(RtcConnection connection, int width, int height, int elapsed)
		{
		}

		public virtual void OnFirstLocalVideoFramePublished(RtcConnection connection, int elapsed)
		{
		}

		public virtual void OnVideoSourceFrameSizeChanged(RtcConnection connection, VIDEO_SOURCE_TYPE sourceType, int width, int height)
		{
		}

		public virtual void OnFirstRemoteVideoDecoded(RtcConnection connection, uint remoteUid, int width, int height, int elapsed)
		{
		}

		public virtual void OnVideoSizeChanged(RtcConnection connection, VIDEO_SOURCE_TYPE sourceType, uint uid, int width, int height, int rotation)
		{
		}

		public virtual void OnContentInspectResult(CONTENT_INSPECT_RESULT result)
		{
		}

		public virtual void OnSnapshotTaken(RtcConnection connection, uint uid, string filePath, int width, int height, int errCode)
		{
		}

		public virtual void OnLocalVideoStateChanged(VIDEO_SOURCE_TYPE source, LOCAL_VIDEO_STREAM_STATE state, LOCAL_VIDEO_STREAM_ERROR errorCode)
		{
		}

		public virtual void OnLocalVideoStateChanged(RtcConnection connection, LOCAL_VIDEO_STREAM_STATE state, LOCAL_VIDEO_STREAM_ERROR errorCode)
		{
		}

		public virtual void OnRemoteVideoStateChanged(RtcConnection connection, uint remoteUid, REMOTE_VIDEO_STATE state, REMOTE_VIDEO_STATE_REASON reason, int elapsed)
		{
		}

		public virtual void OnFirstRemoteVideoFrame(RtcConnection connection, uint remoteUid, int width, int height, int elapsed)
		{
		}

		public virtual void OnUserJoined(RtcConnection connection, uint remoteUid, int elapsed)
		{
		}

		public virtual void OnUserOffline(RtcConnection connection, uint remoteUid, USER_OFFLINE_REASON_TYPE reason)
		{
		}

		[Obsolete("Use onRemoteAudioStateChanged instead of")]
		public virtual void OnUserMuteAudio(RtcConnection connection, uint remoteUid, bool muted)
		{
		}

		[Obsolete("Use onRemoteVideoStateChanged instead of")]
		public virtual void OnUserMuteVideo(RtcConnection connection, uint remoteUid, bool muted)
		{
		}

		[Obsolete("Use onRemoteVideoStateChanged instead of")]
		public virtual void OnUserEnableVideo(RtcConnection connection, uint remoteUid, bool enabled)
		{
		}

		[Obsolete("Use onRemoteVideoStateChanged instead of")]
		public virtual void OnUserEnableLocalVideo(RtcConnection connection, uint remoteUid, bool enabled)
		{
		}

		public virtual void OnUserStateChanged(RtcConnection connection, uint remoteUid, uint state)
		{
		}

		public virtual void OnApiCallExecuted(int err, string api, string result)
		{
		}

		public virtual void OnLocalAudioStats(RtcConnection connection, LocalAudioStats stats)
		{
		}

		public virtual void OnRemoteAudioStats(RtcConnection connection, RemoteAudioStats stats)
		{
		}

		public virtual void OnLocalVideoStats(RtcConnection connection, LocalVideoStats stats)
		{
		}

		public virtual void OnRemoteVideoStats(RtcConnection connection, RemoteVideoStats stats)
		{
		}

		public virtual void OnCameraReady()
		{
		}

		public virtual void OnCameraFocusAreaChanged(int x, int y, int width, int height)
		{
		}

		public virtual void OnCameraExposureAreaChanged(int x, int y, int width, int height)
		{
		}

		public virtual void OnFacePositionChanged(int imageWidth, int imageHeight, Rectangle vecRectangle, int[] vecDistance, int numFaces)
		{
		}

		public virtual void OnVideoStopped()
		{
		}

		public virtual void OnAudioMixingStateChanged(AUDIO_MIXING_STATE_TYPE state, AUDIO_MIXING_REASON_TYPE reason)
		{
		}

		public virtual void OnRhythmPlayerStateChanged(RHYTHM_PLAYER_STATE_TYPE state, RHYTHM_PLAYER_ERROR_TYPE errorCode)
		{
		}

		public virtual void OnConnectionLost(RtcConnection connection)
		{
		}

		public virtual void OnConnectionInterrupted(RtcConnection connection)
		{
		}

		public virtual void OnConnectionBanned(RtcConnection connection)
		{
		}

		public virtual void OnStreamMessage(RtcConnection connection, uint remoteUid, int streamId, byte[] data, uint length, ulong sentTs)
		{
		}

		public virtual void OnStreamMessageError(RtcConnection connection, uint remoteUid, int streamId, int code, int missed, int cached)
		{
		}

		public virtual void OnRequestToken(RtcConnection connection)
		{
		}

		public virtual void OnTokenPrivilegeWillExpire(RtcConnection connection, string token)
		{
		}

		public virtual void OnFirstLocalAudioFramePublished(RtcConnection connection, int elapsed)
		{
		}

		public virtual void OnFirstRemoteAudioFrame(RtcConnection connection, uint userId, int elapsed)
		{
		}

		public virtual void OnFirstRemoteAudioDecoded(RtcConnection connection, uint uid, int elapsed)
		{
		}

		public virtual void OnLocalAudioStateChanged(RtcConnection connection, LOCAL_AUDIO_STREAM_STATE state, LOCAL_AUDIO_STREAM_ERROR error)
		{
		}

		public virtual void OnRemoteAudioStateChanged(RtcConnection connection, uint remoteUid, REMOTE_AUDIO_STATE state, REMOTE_AUDIO_STATE_REASON reason, int elapsed)
		{
		}

		public virtual void OnActiveSpeaker(RtcConnection connection, uint uid)
		{
		}

		public virtual void OnClientRoleChanged(RtcConnection connection, CLIENT_ROLE_TYPE oldRole, CLIENT_ROLE_TYPE newRole)
		{
		}

		public virtual void OnClientRoleChangeFailed(RtcConnection connection, CLIENT_ROLE_CHANGE_FAILED_REASON reason, CLIENT_ROLE_TYPE currentRole)
		{
		}

		public virtual void OnAudioDeviceVolumeChanged(MEDIA_DEVICE_TYPE deviceType, int volume, bool muted)
		{
		}

		public virtual void OnRtmpStreamingStateChanged(string url, RTMP_STREAM_PUBLISH_STATE state, RTMP_STREAM_PUBLISH_ERROR_TYPE errCode)
		{
		}

		public virtual void OnRtmpStreamingEvent(string url, RTMP_STREAMING_EVENT eventCode)
		{
		}

		public virtual void OnTranscodingUpdated()
		{
		}

		public virtual void OnAudioRoutingChanged(int routing)
		{
		}

		public virtual void OnChannelMediaRelayStateChanged(int state, int code)
		{
		}

		public virtual void OnChannelMediaRelayEvent(int code)
		{
		}

		public virtual void OnLocalPublishFallbackToAudioOnly(bool isFallbackOrRecover)
		{
		}

		public virtual void OnRemoteSubscribeFallbackToAudioOnly(uint uid, bool isFallbackOrRecover)
		{
		}

		public virtual void OnRemoteAudioTransportStats(RtcConnection connection, uint remoteUid, ushort delay, ushort lost, ushort rxKBitRate)
		{
		}

		public virtual void OnRemoteVideoTransportStats(RtcConnection connection, uint remoteUid, ushort delay, ushort lost, ushort rxKBitRate)
		{
		}

		public virtual void OnConnectionStateChanged(RtcConnection connection, CONNECTION_STATE_TYPE state, CONNECTION_CHANGED_REASON_TYPE reason)
		{
		}

		public virtual void OnWlAccMessage(RtcConnection connection, WLACC_MESSAGE_REASON reason, WLACC_SUGGEST_ACTION action, string wlAccMsg)
		{
		}

		public virtual void OnWlAccStats(RtcConnection connection, WlAccStats currentStats, WlAccStats averageStats)
		{
		}

		public virtual void OnNetworkTypeChanged(RtcConnection connection, NETWORK_TYPE type)
		{
		}

		public virtual void OnEncryptionError(RtcConnection connection, ENCRYPTION_ERROR_TYPE errorType)
		{
		}

		public virtual void OnUploadLogResult(RtcConnection connection, string requestId, bool success, UPLOAD_ERROR_REASON reason)
		{
		}

		public virtual void OnUserAccountUpdated(RtcConnection connection, uint remoteUid, string userAccount)
		{
		}

		public virtual void OnPermissionError(PERMISSION_TYPE permissionType)
		{
		}

		public virtual void OnLocalUserRegistered(uint uid, string userAccount)
		{
		}

		public virtual void OnUserInfoUpdated(uint uid, UserInfo info)
		{
		}

		public virtual void OnAudioSubscribeStateChanged(string channel, uint uid, STREAM_SUBSCRIBE_STATE oldState, STREAM_SUBSCRIBE_STATE newState, int elapseSinceLastState)
		{
		}

		public virtual void OnVideoSubscribeStateChanged(string channel, uint uid, STREAM_SUBSCRIBE_STATE oldState, STREAM_SUBSCRIBE_STATE newState, int elapseSinceLastState)
		{
		}

		public virtual void OnAudioPublishStateChanged(string channel, STREAM_PUBLISH_STATE oldState, STREAM_PUBLISH_STATE newState, int elapseSinceLastState)
		{
		}

		public virtual void OnVideoPublishStateChanged(VIDEO_SOURCE_TYPE source, string channel, STREAM_PUBLISH_STATE oldState, STREAM_PUBLISH_STATE newState, int elapseSinceLastState)
		{
		}

		public virtual void OnExtensionEvent(string provider, string extension, string key, string value)
		{
		}

		public virtual void OnExtensionStarted(string provider, string extension)
		{
		}

		public virtual void OnExtensionStopped(string provider, string extension)
		{
		}

		public virtual void OnExtensionError(string provider, string extension, int error, string message)
		{
		}

		public virtual void OnDirectCdnStreamingStateChanged(DIRECT_CDN_STREAMING_STATE state, DIRECT_CDN_STREAMING_ERROR error, string message)
		{
		}

		public virtual void OnDirectCdnStreamingStats(DirectCdnStreamingStats stats)
		{
		}
	}
	public abstract class ILocalSpatialAudioEngine
	{
		public abstract void Dispose();

		public abstract int Initialize();

		public abstract int SetMaxAudioRecvCount(int maxCount);

		public abstract int SetAudioRecvRange(float range);

		public abstract int SetDistanceUnit(float unit);

		public abstract int UpdateSelfPosition(float[] position, float[] axisForward, float[] axisRight, float[] axisUp);

		public abstract int UpdateSelfPositionEx(float[] position, float[] axisForward, float[] axisRight, float[] axisUp, RtcConnection connection);

		public abstract int UpdatePlayerPositionInfo(int playerId, float[] position, float[] forward);

		public abstract int SetParameters(string @params);

		public abstract int MuteLocalAudioStream(bool mute);

		public abstract int MuteAllRemoteAudioStreams(bool mute);

		public abstract int UpdateRemotePosition(uint uid, float[] position, float[] forward);

		public abstract int UpdateRemotePositionEx(uint uid, float[] position, float[] forward, RtcConnection connection);

		public abstract int RemoveRemotePosition(uint uid);

		public abstract int RemoveRemotePositionEx(uint uid, RtcConnection connection);

		public abstract int ClearRemotePositions();

		public abstract int ClearRemotePositionsEx(RtcConnection connection);
	}
	public abstract class IVideoDeviceManager
	{
		public abstract DeviceInfo[] EnumerateVideoDevices();

		public abstract int SetDevice(string deviceIdUTF8);

		public abstract int GetDevice(ref string deviceIdUTF8);

		public abstract int StartDeviceTest(IntPtr hwnd);

		public abstract int StopDeviceTest();

		public abstract int GetCapability(string deviceIdUTF8, uint deviceCapabilityNumber, out VideoFormat capability);

		public abstract int NumberOfCapabilities(string deviceIdUTF8);
	}
	public abstract class IVideoEncodedFrameObserver
	{
		public virtual bool OnEncodedVideoFrameReceived(uint uid, IntPtr imageBufferPtr, ulong length, EncodedVideoFrameInfo videoEncodedFrameInfo)
		{
			return true;
		}
	}
	public abstract class IVideoFrameObserver
	{
		public virtual bool OnCaptureVideoFrame(VideoFrame videoFrame, VideoFrameBufferConfig config)
		{
			return true;
		}

		public virtual bool OnPreEncodeVideoFrame(VideoFrame videoFrame, VideoFrameBufferConfig config)
		{
			return true;
		}

		public virtual bool OnRenderVideoFrame(string channelId, uint uid, VideoFrame videoFrame)
		{
			return true;
		}

		public virtual VIDEO_OBSERVER_FRAME_TYPE GetVideoFormatPreference()
		{
			return VIDEO_OBSERVER_FRAME_TYPE.FRAME_TYPE_RGBA;
		}

		public virtual VIDEO_OBSERVER_POSITION GetObservedFramePosition()
		{
			return VIDEO_OBSERVER_POSITION.POSITION_POST_CAPTURER | VIDEO_OBSERVER_POSITION.POSITION_PRE_RENDERER;
		}
	}
	public sealed class AudioDeviceManager : IAudioDeviceManager
	{
		private IRtcEngine _rtcEngineInstance;

		private AudioDeviceManagerImpl _audioDeviecManagerImpl;

		private const int ErrorCode = -7;

		private static IAudioDeviceManager instance;

		public static IAudioDeviceManager Instance => instance;

		private AudioDeviceManager(IRtcEngine rtcEngine, AudioDeviceManagerImpl impl)
		{
			_rtcEngineInstance = rtcEngine;
			_audioDeviecManagerImpl = impl;
		}

		~AudioDeviceManager()
		{
			_rtcEngineInstance = null;
		}

		public override DeviceInfo[] EnumeratePlaybackDevices()
		{
			if (_rtcEngineInstance == null || _audioDeviecManagerImpl == null)
			{
				return null;
			}
			return _audioDeviecManagerImpl.EnumeratePlaybackDevices();
		}

		public override int SetPlaybackDevice(string deviceId)
		{
			if (_rtcEngineInstance == null || _audioDeviecManagerImpl == null)
			{
				return -7;
			}
			return _audioDeviecManagerImpl.SetPlaybackDevice(deviceId);
		}

		public override int GetPlaybackDevice(ref string deviceId)
		{
			if (_rtcEngineInstance == null || _audioDeviecManagerImpl == null)
			{
				return -7;
			}
			return _audioDeviecManagerImpl.GetPlaybackDevice(ref deviceId);
		}

		public override int GetPlaybackDeviceInfo(ref string deviceId, ref string deviceName)
		{
			if (_rtcEngineInstance == null || _audioDeviecManagerImpl == null)
			{
				return -7;
			}
			return _audioDeviecManagerImpl.GetPlaybackDeviceInfo(ref deviceId, ref deviceName);
		}

		public override int SetPlaybackDeviceVolume(int volume)
		{
			if (_rtcEngineInstance == null || _audioDeviecManagerImpl == null)
			{
				return -7;
			}
			return _audioDeviecManagerImpl.SetPlaybackDeviceVolume(volume);
		}

		public override int GetPlaybackDeviceVolume(ref int volume)
		{
			if (_rtcEngineInstance == null || _audioDeviecManagerImpl == null)
			{
				return -7;
			}
			return _audioDeviecManagerImpl.GetPlaybackDeviceVolume(ref volume);
		}

		public override int SetPlaybackDeviceMute(bool mute)
		{
			if (_rtcEngineInstance == null || _audioDeviecManagerImpl == null)
			{
				return -7;
			}
			return _audioDeviecManagerImpl.SetPlaybackDeviceMute(mute);
		}

		public override int GetPlaybackDeviceMute(ref bool mute)
		{
			if (_rtcEngineInstance == null || _audioDeviecManagerImpl == null)
			{
				return -7;
			}
			return _audioDeviecManagerImpl.GetPlaybackDeviceMute(ref mute);
		}

		public override int StartPlaybackDeviceTest(string testAudioFilePath)
		{
			if (_rtcEngineInstance == null || _audioDeviecManagerImpl == null)
			{
				return -7;
			}
			return _audioDeviecManagerImpl.StartPlaybackDeviceTest(testAudioFilePath);
		}

		public override int StopPlaybackDeviceTest()
		{
			if (_rtcEngineInstance == null || _audioDeviecManagerImpl == null)
			{
				return -7;
			}
			return _audioDeviecManagerImpl.StopPlaybackDeviceTest();
		}

		public override int FollowSystemPlaybackDevice(bool enable)
		{
			if (_rtcEngineInstance == null || _audioDeviecManagerImpl == null)
			{
				return -7;
			}
			return _audioDeviecManagerImpl.FollowSystemPlaybackDevice(enable);
		}

		public override DeviceInfo[] EnumerateRecordingDevices()
		{
			if (_rtcEngineInstance == null || _audioDeviecManagerImpl == null)
			{
				return null;
			}
			return _audioDeviecManagerImpl.EnumerateRecordingDevices();
		}

		public override int SetRecordingDevice(string deviceId)
		{
			if (_rtcEngineInstance == null || _audioDeviecManagerImpl == null)
			{
				return -7;
			}
			return _audioDeviecManagerImpl.SetRecordingDevice(deviceId);
		}

		public override int GetRecordingDevice(ref string deviceId)
		{
			if (_rtcEngineInstance == null || _audioDeviecManagerImpl == null)
			{
				return -7;
			}
			return _audioDeviecManagerImpl.GetRecordingDevice(ref deviceId);
		}

		public override int GetRecordingDeviceInfo(ref string deviceId, ref string deviceName)
		{
			if (_rtcEngineInstance == null || _audioDeviecManagerImpl == null)
			{
				return -7;
			}
			return _audioDeviecManagerImpl.GetRecordingDeviceInfo(ref deviceId, ref deviceName);
		}

		public override int SetRecordingDeviceVolume(int volume)
		{
			if (_rtcEngineInstance == null || _audioDeviecManagerImpl == null)
			{
				return -7;
			}
			return _audioDeviecManagerImpl.SetRecordingDeviceVolume(volume);
		}

		public override int GetRecordingDeviceVolume(ref int volume)
		{
			if (_rtcEngineInstance == null || _audioDeviecManagerImpl == null)
			{
				return -7;
			}
			return _audioDeviecManagerImpl.GetRecordingDeviceVolume(ref volume);
		}

		public override int SetRecordingDeviceMute(bool mute)
		{
			if (_rtcEngineInstance == null || _audioDeviecManagerImpl == null)
			{
				return -7;
			}
			return _audioDeviecManagerImpl.SetRecordingDeviceMute(mute);
		}

		public override int GetRecordingDeviceMute(ref bool mute)
		{
			if (_rtcEngineInstance == null || _audioDeviecManagerImpl == null)
			{
				return -7;
			}
			return _audioDeviecManagerImpl.GetRecordingDeviceMute(ref mute);
		}

		public override int StartRecordingDeviceTest(int indicationInterval)
		{
			if (_rtcEngineInstance == null || _audioDeviecManagerImpl == null)
			{
				return -7;
			}
			return _audioDeviecManagerImpl.StartRecordingDeviceTest(indicationInterval);
		}

		public override int StopRecordingDeviceTest()
		{
			if (_rtcEngineInstance == null || _audioDeviecManagerImpl == null)
			{
				return -7;
			}
			return _audioDeviecManagerImpl.StopRecordingDeviceTest();
		}

		public override int FollowSystemRecordingDevice(bool enable)
		{
			if (_rtcEngineInstance == null || _audioDeviecManagerImpl == null)
			{
				return -7;
			}
			return _audioDeviecManagerImpl.FollowSystemRecordingDevice(enable);
		}

		public override int StartAudioDeviceLoopbackTest(int indicationInterval)
		{
			if (_rtcEngineInstance == null || _audioDeviecManagerImpl == null)
			{
				return -7;
			}
			return _audioDeviecManagerImpl.StartAudioDeviceLoopbackTest(indicationInterval);
		}

		public override int StopAudioDeviceLoopbackTest()
		{
			if (_rtcEngineInstance == null || _audioDeviecManagerImpl == null)
			{
				return -7;
			}
			return _audioDeviecManagerImpl.StopAudioDeviceLoopbackTest();
		}

		internal static IAudioDeviceManager GetInstance(IRtcEngine rtcEngine, AudioDeviceManagerImpl impl)
		{
			return instance ?? (instance = new AudioDeviceManager(rtcEngine, impl));
		}

		internal static void ReleaseInstance()
		{
			instance = null;
		}
	}
	public sealed class MediaPlayer : IMediaPlayer
	{
		private IRtcEngine _rtcEngineInstance;

		private MediaPlayerImpl _mediaPlayerImpl;

		private const int ErrorCode = -7;

		private int playerId;

		internal MediaPlayer(IRtcEngine rtcEngine, MediaPlayerImpl impl)
		{
			_rtcEngineInstance = rtcEngine;
			_mediaPlayerImpl = impl;
			playerId = _mediaPlayerImpl.CreateMediaPlayer();
		}

		~MediaPlayer()
		{
			_mediaPlayerImpl = null;
			_rtcEngineInstance = null;
		}

		public override void Dispose()
		{
			if (_rtcEngineInstance != null && _mediaPlayerImpl != null)
			{
				_mediaPlayerImpl.DestroyMediaPlayer(playerId);
				playerId = 0;
			}
		}

		public override int GetId()
		{
			return playerId;
		}

		public override void InitEventHandler(IMediaPlayerSourceObserver engineEventHandler)
		{
			if (_rtcEngineInstance != null && _mediaPlayerImpl != null)
			{
				_mediaPlayerImpl.InitEventHandler(playerId, engineEventHandler);
			}
		}

		public override void RegisterAudioFrameObserver(IMediaPlayerAudioFrameObserver observer)
		{
			if (_rtcEngineInstance != null && _mediaPlayerImpl != null)
			{
				_mediaPlayerImpl.RegisterAudioFrameObserver(playerId, observer);
			}
		}

		public override void RegisterAudioFrameObserver(IMediaPlayerAudioFrameObserver observer, RAW_AUDIO_FRAME_OP_MODE_TYPE mode)
		{
			if (_rtcEngineInstance != null && _mediaPlayerImpl != null)
			{
				_mediaPlayerImpl.RegisterAudioFrameObserver(playerId, observer, mode);
			}
		}

		public override void UnregisterAudioFrameObserver()
		{
			if (_rtcEngineInstance != null && _mediaPlayerImpl != null)
			{
				_mediaPlayerImpl.UnregisterAudioFrameObserver(playerId);
			}
		}

		public override void RegisterMediaPlayerAudioSpectrumObserver(IAudioSpectrumObserver observer, int intervalInMS)
		{
			if (_rtcEngineInstance != null && _mediaPlayerImpl != null)
			{
				_mediaPlayerImpl.RegisterMediaPlayerAudioSpectrumObserver(playerId, observer, intervalInMS);
			}
		}

		public override void UnregisterMediaPlayerAudioSpectrumObserver()
		{
			if (_rtcEngineInstance != null && _mediaPlayerImpl != null)
			{
				_mediaPlayerImpl.UnregisterMediaPlayerAudioSpectrumObserver(playerId);
			}
		}

		public override int Open(string url, long startPos)
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerImpl.Open(playerId, url, startPos);
		}

		public override int OpenWithCustomSource(long startPos, IMediaPlayerCustomDataProvider provider)
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerImpl.OpenWithCustomSource(playerId, startPos, provider);
		}

		public override int OpenWithMediaSource(MediaSource source)
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerImpl.OpenWithMediaSource(playerId, source);
		}

		public override int SetSoundPositionParams(float pan, float gain)
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerImpl.SetSoundPositionParams(pan, gain);
		}

		public override int Play()
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerImpl.Play(playerId);
		}

		public override int Pause()
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerImpl.Pause(playerId);
		}

		public override int Stop()
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerImpl.Stop(playerId);
		}

		public override int Resume()
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerImpl.Resume(playerId);
		}

		public override int Seek(long newPos)
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerImpl.Seek(playerId, newPos);
		}

		public override int GetDuration(ref long duration)
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerImpl.GetDuration(playerId, ref duration);
		}

		public override int GetPlayPosition(ref long pos)
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerImpl.GetPlayPosition(playerId, ref pos);
		}

		public override int GetStreamCount(ref long count)
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerImpl.GetStreamCount(playerId, ref count);
		}

		public override int GetStreamInfo(long index, ref PlayerStreamInfo info)
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerImpl.GetStreamInfo(playerId, index, ref info);
		}

		public override int SetLoopCount(int loopCount)
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerImpl.SetLoopCount(playerId, loopCount);
		}

		public override int SetPlaybackSpeed(int speed)
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerImpl.SetPlaybackSpeed(playerId, speed);
		}

		public override int SelectAudioTrack(int index)
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerImpl.SelectAudioTrack(playerId, index);
		}

		public override int SetPlayerOption(string key, int value)
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerImpl.SetPlayerOption(playerId, key, value);
		}

		public override int SetPlayerOption(string key, string value)
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerImpl.SetPlayerOption(playerId, key, value);
		}

		public override int TakeScreenshot(string filename)
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerImpl.TakeScreenshot(playerId, filename);
		}

		public override int SelectInternalSubtitle(int index)
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerImpl.SelectInternalSubtitle(playerId, index);
		}

		public override int SetExternalSubtitle(string url)
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerImpl.SetExternalSubtitle(playerId, url);
		}

		public override MEDIA_PLAYER_STATE GetState()
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return MEDIA_PLAYER_STATE.PLAYER_STATE_DO_NOTHING_INTERNAL;
			}
			return _mediaPlayerImpl.GetState(playerId);
		}

		public override int Mute(bool muted)
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerImpl.Mute(playerId, muted);
		}

		public override int GetMute(ref bool muted)
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerImpl.GetMute(playerId, ref muted);
		}

		public override int AdjustPlayoutVolume(int volume)
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerImpl.AdjustPlayoutVolume(playerId, volume);
		}

		public override int GetPlayoutVolume(ref int volume)
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerImpl.GetPlayoutVolume(playerId, ref volume);
		}

		public override int AdjustPublishSignalVolume(int volume)
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerImpl.AdjustPublishSignalVolume(playerId, volume);
		}

		public override int GetPublishSignalVolume(ref int volume)
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerImpl.GetPublishSignalVolume(playerId, ref volume);
		}

		public override int SetView()
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerImpl.SetView(playerId);
		}

		public override int SetRenderMode(RENDER_MODE_TYPE renderMode)
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerImpl.SetRenderMode(playerId, renderMode);
		}

		public override int SetAudioDualMonoMode(AUDIO_DUAL_MONO_MODE mode)
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerImpl.SetAudioDualMonoMode(playerId, mode);
		}

		public override string GetPlayerSdkVersion()
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return null;
			}
			return _mediaPlayerImpl.GetPlayerSdkVersion(playerId);
		}

		public override string GetPlaySrc()
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return null;
			}
			return _mediaPlayerImpl.GetPlaySrc(playerId);
		}

		public override int SetAudioPitch(int pitch)
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerImpl.SetAudioPitch(playerId, pitch);
		}

		public override int SetSpatialAudioParams(SpatialAudioParams spatial_audio_params)
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerImpl.SetSpatialAudioParams(playerId, spatial_audio_params);
		}

		public override int OpenWithAgoraCDNSrc(string src, long startPos)
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerImpl.OpenWithAgoraCDNSrc(playerId, src, startPos);
		}

		public override int GetAgoraCDNLineCount()
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerImpl.GetAgoraCDNLineCount(playerId);
		}

		public override int SwitchAgoraCDNLineByIndex(int index)
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerImpl.SwitchAgoraCDNLineByIndex(playerId, index);
		}

		public override int GetCurrentAgoraCDNIndex()
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerImpl.GetCurrentAgoraCDNIndex(playerId);
		}

		public override int EnableAutoSwitchAgoraCDN(bool enable)
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerImpl.EnableAutoSwitchAgoraCDN(playerId, enable);
		}

		public override int RenewAgoraCDNSrcToken(string token, long ts)
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerImpl.RenewAgoraCDNSrcToken(playerId, token, ts);
		}

		public override int SwitchAgoraCDNSrc(string src, bool syncPts = false)
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerImpl.SwitchAgoraCDNSrc(playerId, src, syncPts);
		}

		public override int SwitchSrc(string src, bool syncPts = true)
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerImpl.SwitchSrc(playerId, src, syncPts);
		}

		public override int PreloadSrc(string src, long startPos)
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerImpl.PreloadSrc(playerId, src, startPos);
		}

		public override int PlayPreloadedSrc(string src)
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerImpl.PlayPreloadedSrc(playerId, src);
		}

		public override int UnloadSrc(string src)
		{
			if (_rtcEngineInstance == null || _mediaPlayerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerImpl.UnloadSrc(playerId, src);
		}
	}
	public class MediaPlayerCacheManager : IMediaPlayerCacheManager
	{
		private IRtcEngine _rtcEngineInstance;

		private MediaPlayerCacheManagerImpl _mediaPlayerCacheManagerImpl;

		private const int ErrorCode = -7;

		private static MediaPlayerCacheManager instance;

		public static MediaPlayerCacheManager Instance => instance;

		private MediaPlayerCacheManager(IRtcEngine rtcEngine, MediaPlayerCacheManagerImpl impl)
		{
			_rtcEngineInstance = rtcEngine;
			_mediaPlayerCacheManagerImpl = impl;
		}

		~MediaPlayerCacheManager()
		{
			_rtcEngineInstance = null;
		}

		internal static MediaPlayerCacheManager GetInstance(IRtcEngine rtcEngine, MediaPlayerCacheManagerImpl impl)
		{
			return instance ?? (instance = new MediaPlayerCacheManager(rtcEngine, impl));
		}

		internal static void ReleaseInstance()
		{
			instance = null;
		}

		public override int RemoveAllCaches()
		{
			if (_rtcEngineInstance == null || _mediaPlayerCacheManagerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerCacheManagerImpl.RemoveAllCaches();
		}

		public override int RemoveOldCache()
		{
			if (_rtcEngineInstance == null || _mediaPlayerCacheManagerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerCacheManagerImpl.RemoveOldCache();
		}

		public override int RemoveCacheByUri(string uri)
		{
			if (_rtcEngineInstance == null || _mediaPlayerCacheManagerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerCacheManagerImpl.RemoveCacheByUri(uri);
		}

		public override int SetCacheDir(string path)
		{
			if (_rtcEngineInstance == null || _mediaPlayerCacheManagerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerCacheManagerImpl.SetCacheDir(path);
		}

		public override int SetMaxCacheFileCount(int count)
		{
			if (_rtcEngineInstance == null || _mediaPlayerCacheManagerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerCacheManagerImpl.SetMaxCacheFileCount(count);
		}

		public override int SetMaxCacheFileSize(long cacheSize)
		{
			if (_rtcEngineInstance == null || _mediaPlayerCacheManagerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerCacheManagerImpl.SetMaxCacheFileSize(cacheSize);
		}

		public override int EnableAutoRemoveCache(bool enable)
		{
			if (_rtcEngineInstance == null || _mediaPlayerCacheManagerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerCacheManagerImpl.EnableAutoRemoveCache(enable);
		}

		public override int GetCacheDir(out string path, int length)
		{
			if (_rtcEngineInstance == null || _mediaPlayerCacheManagerImpl == null)
			{
				path = "";
				return -7;
			}
			return _mediaPlayerCacheManagerImpl.GetCacheDir(out path, length);
		}

		public override int GetMaxCacheFileCount()
		{
			if (_rtcEngineInstance == null || _mediaPlayerCacheManagerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerCacheManagerImpl.GetMaxCacheFileCount();
		}

		public override long GetMaxCacheFileSize()
		{
			if (_rtcEngineInstance == null || _mediaPlayerCacheManagerImpl == null)
			{
				return -7L;
			}
			return _mediaPlayerCacheManagerImpl.GetMaxCacheFileSize();
		}

		public override int GetCacheFileCount()
		{
			if (_rtcEngineInstance == null || _mediaPlayerCacheManagerImpl == null)
			{
				return -7;
			}
			return _mediaPlayerCacheManagerImpl.GetCacheFileCount();
		}
	}
	public sealed class MediaRecorder : IMediaRecorder
	{
		private IRtcEngine _rtcEngineInstance;

		private MediaRecorderImpl _mediaRecorderImpl;

		private const int ErrorCode = -7;

		private static MediaRecorder instance;

		public static MediaRecorder Instance => instance;

		internal MediaRecorder(IRtcEngine rtcEngine, MediaRecorderImpl impl)
		{
			_rtcEngineInstance = rtcEngine;
			_mediaRecorderImpl = impl;
		}

		~MediaRecorder()
		{
			_mediaRecorderImpl = null;
			_rtcEngineInstance = null;
		}

		internal static IMediaRecorder GetInstance(IRtcEngine rtcEngine, MediaRecorderImpl impl)
		{
			return instance ?? (instance = new MediaRecorder(rtcEngine, impl));
		}

		internal static void ReleaseInstance()
		{
			instance = null;
		}

		public override int SetMediaRecorderObserver(RtcConnection connection, IMediaRecorderObserver callback)
		{
			if (_rtcEngineInstance == null || _mediaRecorderImpl == null)
			{
				return -7;
			}
			return _mediaRecorderImpl.SetMediaRecorderObserver(connection, callback);
		}

		public override int StartRecording(RtcConnection connection, MediaRecorderConfiguration config)
		{
			if (_rtcEngineInstance == null || _mediaRecorderImpl == null)
			{
				return -7;
			}
			return _mediaRecorderImpl.StartRecording(connection, config);
		}

		public override int StopRecording(RtcConnection connection)
		{
			if (_rtcEngineInstance == null || _mediaRecorderImpl == null)
			{
				return -7;
			}
			return _mediaRecorderImpl.StopRecording(connection);
		}
	}
	public class AgoraGameObject : MonoBehaviour
	{
		private void OnApplicationQuit()
		{
			RtcEngine.Get()?.Dispose();
		}
	}
	internal class AudioDeviceManagerImpl
	{
		private bool _disposed;

		private IntPtr _irisApiEngine;

		private CharAssistant _result;

		internal AudioDeviceManagerImpl(IntPtr irisApiEngine)
		{
			_result = default(CharAssistant);
			_irisApiEngine = irisApiEngine;
		}

		~AudioDeviceManagerImpl()
		{
			Dispose(disposing: false);
		}

		internal void Dispose()
		{
			Dispose(disposing: true);
			GC.SuppressFinalize(this);
		}

		internal void Dispose(bool disposing)
		{
			if (!_disposed)
			{
				_irisApiEngine = IntPtr.Zero;
				_result = default(CharAssistant);
				_disposed = true;
			}
		}

		public DeviceInfo[] EnumeratePlaybackDevices()
		{
			if (AgoraRtcNative.CallIrisApi(_irisApiEngine, "AudioDeviceManager_enumeratePlaybackDevices", "", 0u, IntPtr.Zero, 0u, out _result) == 0)
			{
				return AgoraJson.JsonToStructArray<DeviceInfo>(_result.Result, "result");
			}
			return new DeviceInfo[0];
		}

		public int SetPlaybackDevice(string deviceId)
		{
			string text = AgoraJson.ToJson(new { deviceId });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "AudioDeviceManager_setPlaybackDevice", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int GetPlaybackDevice(ref string deviceId)
		{
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "AudioDeviceManager_getPlaybackDevice", "", 0u, IntPtr.Zero, 0u, out _result);
			deviceId = (string)AgoraJson.GetData<string>(_result.Result, "deviceId");
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int GetPlaybackDeviceInfo(ref string deviceId, ref string deviceName)
		{
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "AudioDeviceManager_getPlaybackDeviceInfo", "", 0u, IntPtr.Zero, 0u, out _result);
			deviceId = (string)AgoraJson.GetData<string>(_result.Result, "deviceId");
			deviceName = (string)AgoraJson.GetData<string>(_result.Result, "deviceName");
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetPlaybackDeviceVolume(int volume)
		{
			string text = AgoraJson.ToJson(new { volume });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "AudioDeviceManager_setPlaybackDeviceVolume", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int GetPlaybackDeviceVolume(ref int volume)
		{
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "AudioDeviceManager_getPlaybackDeviceVolume", "", 0u, IntPtr.Zero, 0u, out _result);
			volume = (int)AgoraJson.GetData<int>(_result.Result, "result");
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetPlaybackDeviceMute(bool mute)
		{
			string text = AgoraJson.ToJson(new { mute });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "AudioDeviceManager_setPlaybackDeviceMute", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int GetPlaybackDeviceMute(ref bool mute)
		{
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "AudioDeviceManager_getPlaybackDeviceMute", "", 0u, IntPtr.Zero, 0u, out _result);
			mute = (bool)AgoraJson.GetData<bool>(_result.Result, "mute");
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StartPlaybackDeviceTest(string testAudioFilePath)
		{
			string text = AgoraJson.ToJson(new { testAudioFilePath });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "AudioDeviceManager_startPlaybackDeviceTest", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StopPlaybackDeviceTest()
		{
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "AudioDeviceManager_stopPlaybackDeviceTest", "", 0u, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int FollowSystemPlaybackDevice(bool enable)
		{
			string text = AgoraJson.ToJson(new { enable });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "AudioDeviceManager_followSystemPlaybackDevice", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public DeviceInfo[] EnumerateRecordingDevices()
		{
			if (AgoraRtcNative.CallIrisApi(_irisApiEngine, "AudioDeviceManager_enumerateRecordingDevices", "", 0u, IntPtr.Zero, 0u, out _result) == 0)
			{
				return AgoraJson.JsonToStructArray<DeviceInfo>(_result.Result, "result");
			}
			return new DeviceInfo[0];
		}

		public int SetRecordingDevice(string deviceId)
		{
			string text = AgoraJson.ToJson(new { deviceId });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "AudioDeviceManager_setRecordingDevice", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int GetRecordingDevice(ref string deviceId)
		{
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "AudioDeviceManager_getRecordingDevice", "", 0u, IntPtr.Zero, 0u, out _result);
			deviceId = (string)AgoraJson.GetData<string>(_result.Result, "deviceId");
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int GetRecordingDeviceInfo(ref string deviceId, ref string deviceName)
		{
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "AudioDeviceManager_getRecordingDeviceInfo", "", 0u, IntPtr.Zero, 0u, out _result);
			deviceId = (string)AgoraJson.GetData<string>(_result.Result, "deviceId");
			deviceName = (string)AgoraJson.GetData<string>(_result.Result, "deviceName");
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetRecordingDeviceVolume(int volume)
		{
			string text = AgoraJson.ToJson(new { volume });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "AudioDeviceManager_setRecordingDeviceVolume", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int GetRecordingDeviceVolume(ref int volume)
		{
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "AudioDeviceManager_getRecordingDeviceVolume", "", 0u, IntPtr.Zero, 0u, out _result);
			volume = (int)AgoraJson.GetData<int>(_result.Result, "result");
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetRecordingDeviceMute(bool mute)
		{
			string text = AgoraJson.ToJson(new { mute });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "AudioDeviceManager_setRecordingDeviceMute", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int GetRecordingDeviceMute(ref bool mute)
		{
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "AudioDeviceManager_getRecordingDeviceMute", "", 0u, IntPtr.Zero, 0u, out _result);
			mute = (bool)AgoraJson.GetData<bool>(_result.Result, "mute");
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StartRecordingDeviceTest(int indicationInterval)
		{
			string text = AgoraJson.ToJson(new { indicationInterval });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "AudioDeviceManager_startRecordingDeviceTest", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StopRecordingDeviceTest()
		{
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "AudioDeviceManager_stopRecordingDeviceTest", "", 0u, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int FollowSystemRecordingDevice(bool enable)
		{
			string text = AgoraJson.ToJson(new { enable });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "AudioDeviceManager_followSystemRecordingDevice", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StartAudioDeviceLoopbackTest(int indicationInterval)
		{
			string text = AgoraJson.ToJson(new { indicationInterval });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "AudioDeviceManager_startAudioDeviceLoopbackTest", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StopAudioDeviceLoopbackTest()
		{
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "AudioDeviceManager_stopAudioDeviceLoopbackTest", "", 0u, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}
	}
	public class MediaPlayerCacheManagerImpl
	{
		private bool _disposed;

		private IntPtr _irisApiEngine;

		private CharAssistant _result;

		internal MediaPlayerCacheManagerImpl(IntPtr irisApiEngine)
		{
			_result = default(CharAssistant);
			_irisApiEngine = irisApiEngine;
		}

		~MediaPlayerCacheManagerImpl()
		{
			Dispose(disposing: false);
		}

		internal void Dispose()
		{
			Dispose(disposing: true);
			GC.SuppressFinalize(this);
		}

		internal void Dispose(bool disposing)
		{
			if (!_disposed)
			{
				_irisApiEngine = IntPtr.Zero;
				_result = default(CharAssistant);
				_disposed = true;
			}
		}

		public int RemoveAllCaches()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayerCacheManager_removeAllCaches", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int RemoveOldCache()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayerCacheManager_removeOldCache", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int RemoveCacheByUri(string uri)
		{
			string text = AgoraJson.ToJson(new { uri });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayerCacheManager_removeCacheByUri", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetCacheDir(string path)
		{
			string text = AgoraJson.ToJson(new { path });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayerCacheManager_setCacheDir", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetMaxCacheFileCount(int count)
		{
			string text = AgoraJson.ToJson(new { count });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayerCacheManager_setMaxCacheFileCount", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetMaxCacheFileSize(long cacheSize)
		{
			string text = AgoraJson.ToJson(new { cacheSize });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayerCacheManager_setMaxCacheFileSize", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int EnableAutoRemoveCache(bool enable)
		{
			string text = AgoraJson.ToJson(new { enable });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayerCacheManager_enableAutoRemoveCache", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int GetCacheDir(out string path, int length)
		{
			string text = AgoraJson.ToJson(new { length });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayerCacheManager_getCacheDir", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				path = (string)AgoraJson.GetData<string>(_result.Result, "path");
			}
			else
			{
				path = "";
			}
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int GetMaxCacheFileCount()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayerCacheManager_getMaxCacheFileCount", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public long GetMaxCacheFileSize()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayerCacheManager_getMaxCacheFileSize", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (long)AgoraJson.GetData<long>(_result.Result, "result");
			}
			return num;
		}

		public int GetCacheFileCount()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayerCacheManager_getCacheFileCount", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}
	}
	internal class MediaPlayerImpl
	{
		private bool _disposed;

		private IntPtr _irisApiEngine;

		private CharAssistant _result;

		private IntPtr _irisEngineEventHandlerHandleNative;

		private IrisCEventHandler _irisCEventHandler;

		private IntPtr _irisCEngineEventHandlerNative;

		private IntPtr _irisMediaPlayerCAudioFrameObserverNative;

		private IrisMediaPlayerCAudioFrameObserver _irisMediaPlayerCAudioFrameObserver;

		private IntPtr _irisMediaPlayerAudioFrameObserverHandleNative;

		private Dictionary<int, IntPtr> _irisMediaPlayerCCustomProviderNatives = new Dictionary<int, IntPtr>();

		private Dictionary<int, IrisMediaPlayerCCustomProvider> _irisMediaPlayerCCustomProviders = new Dictionary<int, IrisMediaPlayerCCustomProvider>();

		private Dictionary<int, IntPtr> _irisMediaPlayerCustomProviderHandleNatives = new Dictionary<int, IntPtr>();

		private Dictionary<int, IntPtr> _irisMediaPlayerCMediaProviderNatives = new Dictionary<int, IntPtr>();

		private Dictionary<int, IrisMediaPlayerCCustomProvider> _irisMediaPlayerCMediaProviders = new Dictionary<int, IrisMediaPlayerCCustomProvider>();

		private Dictionary<int, IntPtr> _irisMediaPlayerMediaProviderHandleNatives = new Dictionary<int, IntPtr>();

		private IntPtr _irisMediaPlayerCAudioSpectrumObserverNative;

		private IrisMediaPlayerCAudioSpectrumObserver _irisMediaPlayerCAudioSpectrumObserver;

		private IntPtr _irisMediaPlayerCAudioSpectrumObserverHandleNative;

		private AgoraCallbackObject _callbackObject;

		private static readonly string identifier = "AgoraMediaPlayer";

		private List<T> GetDicKeys<T, D>(Dictionary<T, D> dic)
		{
			List<T> list = new List<T>();
			foreach (KeyValuePair<T, D> item in dic)
			{
				list.Add(item.Key);
			}
			return list;
		}

		internal MediaPlayerImpl(IntPtr irisApiEngine)
		{
			_result = default(CharAssistant);
			_irisApiEngine = irisApiEngine;
			CreateEventHandler();
		}

		~MediaPlayerImpl()
		{
			Dispose(disposing: false);
		}

		private void Dispose(bool disposing)
		{
			if (_disposed)
			{
				return;
			}
			if (disposing)
			{
				ReleaseEventHandler();
				UnSetIrisAudioFrameObserver();
				UnSetIrisAudioSpectrumObserver();
				foreach (int dicKey in GetDicKeys(_irisMediaPlayerCCustomProviderNatives))
				{
					UnSetMediaPlayerOpenWithCustomSource(dicKey);
				}
				foreach (int dicKey2 in GetDicKeys(_irisMediaPlayerCMediaProviderNatives))
				{
					UnsetMediaPlayerOpenWithMediaSource(dicKey2);
				}
			}
			_irisApiEngine = IntPtr.Zero;
			_result = default(CharAssistant);
			_disposed = true;
		}

		public void Dispose()
		{
			Dispose(disposing: true);
			GC.SuppressFinalize(this);
		}

		private void CreateEventHandler()
		{
			if (_irisEngineEventHandlerHandleNative == IntPtr.Zero)
			{
				_irisCEventHandler = new IrisCEventHandler
				{
					OnEvent = MediaPlayerSourceObserverNative.OnEvent
				};
				IrisCEventHandlerNative irisCEventHandlerNative = default(IrisCEventHandlerNative);
				irisCEventHandlerNative.onEvent = Marshal.GetFunctionPointerForDelegate(_irisCEventHandler.OnEvent);
				IrisCEventHandlerNative structure = irisCEventHandlerNative;
				_irisCEngineEventHandlerNative = Marshal.AllocHGlobal(Marshal.SizeOf(structure));
				Marshal.StructureToPtr(structure, _irisCEngineEventHandlerNative, fDeleteOld: true);
				_irisEngineEventHandlerHandleNative = AgoraRtcNative.SetIrisMediaPlayerEventHandler(_irisApiEngine, _irisCEngineEventHandlerNative);
				_callbackObject = new AgoraCallbackObject(identifier);
				MediaPlayerSourceObserverNative.CallbackObject = _callbackObject;
			}
		}

		private void ReleaseEventHandler()
		{
			MediaPlayerSourceObserverNative.RtcMediaPlayerEventHandlerDic.Clear();
			MediaPlayerSourceObserverNative.CallbackObject = null;
			if (_callbackObject != null)
			{
				_callbackObject.Release();
			}
			_callbackObject = null;
			AgoraRtcNative.UnsetIrisMediaPlayerEventHandler(_irisApiEngine, _irisEngineEventHandlerHandleNative);
			Marshal.FreeHGlobal(_irisCEngineEventHandlerNative);
			_irisEngineEventHandlerHandleNative = IntPtr.Zero;
		}

		private void SetIrisAudioFrameObserver()
		{
			var param = new { };
			if (!(_irisMediaPlayerAudioFrameObserverHandleNative != IntPtr.Zero))
			{
				_irisMediaPlayerCAudioFrameObserver = new IrisMediaPlayerCAudioFrameObserver
				{
					OnFrame = MediaPlayerAudioFrameObserverNative.OnFrame
				};
				IrisMediaPlayerCAudioFrameObserverNative irisMediaPlayerCAudioFrameObserverNative = default(IrisMediaPlayerCAudioFrameObserverNative);
				irisMediaPlayerCAudioFrameObserverNative.onFrame = Marshal.GetFunctionPointerForDelegate(_irisMediaPlayerCAudioFrameObserver.OnFrame);
				IrisMediaPlayerCAudioFrameObserverNative structure = irisMediaPlayerCAudioFrameObserverNative;
				_irisMediaPlayerCAudioFrameObserverNative = Marshal.AllocHGlobal(Marshal.SizeOf(structure));
				Marshal.StructureToPtr(structure, _irisMediaPlayerCAudioFrameObserverNative, fDeleteOld: true);
				_irisMediaPlayerAudioFrameObserverHandleNative = AgoraRtcNative.RegisterMediaPlayerAudioFrameObserver(_irisApiEngine, _irisMediaPlayerCAudioFrameObserverNative, AgoraJson.ToJson(param));
			}
		}

		private void SetIrisAudioFrameObserverWithMode(RAW_AUDIO_FRAME_OP_MODE_TYPE mode)
		{
			var param = new { mode };
			if (!(_irisMediaPlayerAudioFrameObserverHandleNative != IntPtr.Zero))
			{
				_irisMediaPlayerCAudioFrameObserver = new IrisMediaPlayerCAudioFrameObserver
				{
					OnFrame = MediaPlayerAudioFrameObserverNative.OnFrame
				};
				IrisMediaPlayerCAudioFrameObserverNative irisMediaPlayerCAudioFrameObserverNative = default(IrisMediaPlayerCAudioFrameObserverNative);
				irisMediaPlayerCAudioFrameObserverNative.onFrame = Marshal.GetFunctionPointerForDelegate(_irisMediaPlayerCAudioFrameObserver.OnFrame);
				IrisMediaPlayerCAudioFrameObserverNative structure = irisMediaPlayerCAudioFrameObserverNative;
				_irisMediaPlayerCAudioFrameObserverNative = Marshal.AllocHGlobal(Marshal.SizeOf(structure));
				Marshal.StructureToPtr(structure, _irisMediaPlayerCAudioFrameObserverNative, fDeleteOld: true);
				_irisMediaPlayerAudioFrameObserverHandleNative = AgoraRtcNative.RegisterMediaPlayerAudioFrameObserver(_irisApiEngine, _irisMediaPlayerCAudioFrameObserverNative, AgoraJson.ToJson(param));
			}
		}

		private void UnSetIrisAudioFrameObserver()
		{
			var param = new { };
			if (!(_irisMediaPlayerAudioFrameObserverHandleNative == IntPtr.Zero))
			{
				AgoraRtcNative.UnRegisterMediaPlayerAudioFrameObserver(_irisApiEngine, _irisMediaPlayerAudioFrameObserverHandleNative, AgoraJson.ToJson(param));
				_irisMediaPlayerAudioFrameObserverHandleNative = IntPtr.Zero;
				_irisMediaPlayerCAudioFrameObserver = default(IrisMediaPlayerCAudioFrameObserver);
				Marshal.FreeHGlobal(_irisMediaPlayerCAudioFrameObserverNative);
			}
		}

		private int SetMediaPlayerOpenWithCustomSource(int playerId, long startPos, bool hadPovider)
		{
			IntPtr intPtr = IntPtr.Zero;
			if (hadPovider)
			{
				IrisMediaPlayerCCustomProvider irisMediaPlayerCCustomProvider = default(IrisMediaPlayerCCustomProvider);
				irisMediaPlayerCCustomProvider.OnSeek = MediaPlayerCustomDataProviderNative.OnSeek;
				irisMediaPlayerCCustomProvider.OnReadData = MediaPlayerCustomDataProviderNative.OnReadData;
				IrisMediaPlayerCCustomProvider value = irisMediaPlayerCCustomProvider;
				IrisMediaPlayerCCustomProviderNative irisMediaPlayerCCustomProviderNative = default(IrisMediaPlayerCCustomProviderNative);
				irisMediaPlayerCCustomProviderNative.onSeek = Marshal.GetFunctionPointerForDelegate(value.OnSeek);
				irisMediaPlayerCCustomProviderNative.onReadData = Marshal.GetFunctionPointerForDelegate(value.OnReadData);
				IrisMediaPlayerCCustomProviderNative structure = irisMediaPlayerCCustomProviderNative;
				intPtr = Marshal.AllocHGlobal(Marshal.SizeOf(structure));
				Marshal.StructureToPtr(structure, intPtr, fDeleteOld: true);
				_irisMediaPlayerCCustomProviderNatives.Add(playerId, intPtr);
				_irisMediaPlayerCCustomProviders.Add(playerId, value);
			}
			var param = new { playerId, startPos };
			IntPtr intPtr2 = AgoraRtcNative.MediaPlayerOpenWithCustomSource(_irisApiEngine, intPtr, AgoraJson.ToJson(param));
			if (intPtr2 != IntPtr.Zero)
			{
				_irisMediaPlayerCustomProviderHandleNatives.Add(playerId, intPtr2);
			}
			return 0;
		}

		private int UnSetMediaPlayerOpenWithCustomSource(int playerId)
		{
			if (!_irisMediaPlayerCustomProviderHandleNatives.ContainsKey(playerId))
			{
				return 0;
			}
			var param = new { playerId };
			IntPtr handle = _irisMediaPlayerCustomProviderHandleNatives[playerId];
			AgoraRtcNative.MediaPlayerUnOpenWithCustomSource(_irisApiEngine, handle, AgoraJson.ToJson(param));
			Marshal.FreeHGlobal(_irisMediaPlayerCCustomProviderNatives[playerId]);
			_irisMediaPlayerCCustomProviderNatives.Remove(playerId);
			_irisMediaPlayerCCustomProviders.Remove(playerId);
			_irisMediaPlayerCustomProviderHandleNatives.Remove(playerId);
			return 0;
		}

		private int SetMediaPlayerOpenWithMediaSource(int playerId, MediaSource source, bool hadProvider)
		{
			IntPtr intPtr = IntPtr.Zero;
			if (hadProvider)
			{
				IrisMediaPlayerCCustomProvider irisMediaPlayerCCustomProvider = default(IrisMediaPlayerCCustomProvider);
				irisMediaPlayerCCustomProvider.OnSeek = MediaPlayerCustomDataProviderNative.OnSeek;
				irisMediaPlayerCCustomProvider.OnReadData = MediaPlayerCustomDataProviderNative.OnReadData;
				IrisMediaPlayerCCustomProvider value = irisMediaPlayerCCustomProvider;
				IrisMediaPlayerCCustomProviderNative irisMediaPlayerCCustomProviderNative = default(IrisMediaPlayerCCustomProviderNative);
				irisMediaPlayerCCustomProviderNative.onSeek = Marshal.GetFunctionPointerForDelegate(value.OnSeek);
				irisMediaPlayerCCustomProviderNative.onReadData = Marshal.GetFunctionPointerForDelegate(value.OnReadData);
				IrisMediaPlayerCCustomProviderNative structure = irisMediaPlayerCCustomProviderNative;
				intPtr = Marshal.AllocHGlobal(Marshal.SizeOf(structure));
				Marshal.StructureToPtr(structure, intPtr, fDeleteOld: true);
				_irisMediaPlayerCMediaProviderNatives.Add(playerId, intPtr);
				_irisMediaPlayerCMediaProviders.Add(playerId, value);
			}
			var param = new { playerId, source };
			IntPtr intPtr2 = AgoraRtcNative.MediaPlayerOpenWithMediaSource(_irisApiEngine, intPtr, AgoraJson.ToJson(param));
			if (intPtr2 != IntPtr.Zero)
			{
				_irisMediaPlayerMediaProviderHandleNatives.Add(playerId, intPtr2);
			}
			return 0;
		}

		private int UnsetMediaPlayerOpenWithMediaSource(int playerId)
		{
			if (!_irisMediaPlayerMediaProviderHandleNatives.ContainsKey(playerId))
			{
				return 0;
			}
			var param = new { playerId };
			IntPtr handle = _irisMediaPlayerMediaProviderHandleNatives[playerId];
			AgoraRtcNative.MediaPlayerUnOpenWithCustomSource(_irisApiEngine, handle, AgoraJson.ToJson(param));
			Marshal.FreeHGlobal(_irisMediaPlayerCMediaProviderNatives[playerId]);
			_irisMediaPlayerCMediaProviderNatives.Remove(playerId);
			_irisMediaPlayerCMediaProviders.Remove(playerId);
			_irisMediaPlayerMediaProviderHandleNatives.Remove(playerId);
			return 0;
		}

		private void SetIrisAudioSpectrumObserver(int intervalInMS)
		{
			if (!(_irisMediaPlayerCAudioSpectrumObserverNative != IntPtr.Zero))
			{
				var param = new { intervalInMS };
				_irisMediaPlayerCAudioSpectrumObserver = new IrisMediaPlayerCAudioSpectrumObserver
				{
					OnLocalAudioSpectrum = MediaPlayerAudioSpectrumObserverNative.OnLocalAudioSpectrum,
					OnRemoteAudioSpectrum = MediaPlayerAudioSpectrumObserverNative.OnRemoteAudioSpectrum
				};
				IrisMediaPlayerCAudioSpectrumObserverNative irisMediaPlayerCAudioSpectrumObserverNative = default(IrisMediaPlayerCAudioSpectrumObserverNative);
				irisMediaPlayerCAudioSpectrumObserverNative.onLocalAudioSpectrum = Marshal.GetFunctionPointerForDelegate(_irisMediaPlayerCAudioSpectrumObserver.OnLocalAudioSpectrum);
				irisMediaPlayerCAudioSpectrumObserverNative.onRemoteAudioSpectrum = Marshal.GetFunctionPointerForDelegate(_irisMediaPlayerCAudioSpectrumObserver.OnRemoteAudioSpectrum);
				IrisMediaPlayerCAudioSpectrumObserverNative structure = irisMediaPlayerCAudioSpectrumObserverNative;
				_irisMediaPlayerCAudioSpectrumObserverHandleNative = Marshal.AllocHGlobal(Marshal.SizeOf(structure));
				Marshal.StructureToPtr(structure, _irisMediaPlayerCAudioSpectrumObserverHandleNative, fDeleteOld: true);
				_irisMediaPlayerCAudioSpectrumObserverNative = AgoraRtcNative.RegisterMediaPlayerAudioSpectrumObserver(_irisApiEngine, _irisMediaPlayerCAudioSpectrumObserverHandleNative, AgoraJson.ToJson(param));
			}
		}

		private void UnSetIrisAudioSpectrumObserver()
		{
			if (!(_irisMediaPlayerCAudioSpectrumObserverNative == IntPtr.Zero))
			{
				var param = new { };
				AgoraRtcNative.UnRegisterMediaPlayerAudioSpectrumObserver(_irisApiEngine, _irisMediaPlayerCAudioSpectrumObserverNative, AgoraJson.ToJson(param));
				_irisMediaPlayerCAudioSpectrumObserverNative = IntPtr.Zero;
				MediaPlayerAudioSpectrumObserverNative.AgoraRtcAudioSpectrumObserverDic.Clear();
				_irisMediaPlayerCAudioSpectrumObserver = default(IrisMediaPlayerCAudioSpectrumObserver);
				Marshal.FreeHGlobal(_irisMediaPlayerCAudioSpectrumObserverHandleNative);
			}
		}

		public void InitEventHandler(int playerId, IMediaPlayerSourceObserver engineEventHandler)
		{
			if (!MediaPlayerSourceObserverNative.RtcMediaPlayerEventHandlerDic.ContainsKey(playerId))
			{
				MediaPlayerSourceObserverNative.RtcMediaPlayerEventHandlerDic.Add(playerId, engineEventHandler);
			}
			if (engineEventHandler == null && MediaPlayerSourceObserverNative.RtcMediaPlayerEventHandlerDic.ContainsKey(playerId))
			{
				MediaPlayerSourceObserverNative.RtcMediaPlayerEventHandlerDic.Remove(playerId);
			}
		}

		public void RegisterAudioFrameObserver(int playerId, IMediaPlayerAudioFrameObserver observer)
		{
			SetIrisAudioFrameObserver();
			if (!MediaPlayerAudioFrameObserverNative.AudioFrameObserverDic.ContainsKey(playerId))
			{
				MediaPlayerAudioFrameObserverNative.AudioFrameObserverDic.Add(playerId, observer);
			}
		}

		public void RegisterAudioFrameObserver(int playerId, IMediaPlayerAudioFrameObserver observer, RAW_AUDIO_FRAME_OP_MODE_TYPE mode)
		{
			SetIrisAudioFrameObserverWithMode(mode);
			if (!MediaPlayerAudioFrameObserverNative.AudioFrameObserverDic.ContainsKey(playerId))
			{
				MediaPlayerAudioFrameObserverNative.AudioFrameObserverDic.Add(playerId, observer);
			}
		}

		public void UnregisterAudioFrameObserver(int playerId)
		{
			if (MediaPlayerAudioFrameObserverNative.AudioFrameObserverDic.ContainsKey(playerId))
			{
				MediaPlayerAudioFrameObserverNative.AudioFrameObserverDic.Remove(playerId);
			}
		}

		public void RegisterMediaPlayerAudioSpectrumObserver(int playerId, IAudioSpectrumObserver observer, int intervalInMS)
		{
			SetIrisAudioSpectrumObserver(intervalInMS);
			if (!MediaPlayerAudioSpectrumObserverNative.AgoraRtcAudioSpectrumObserverDic.ContainsKey(playerId))
			{
				MediaPlayerAudioSpectrumObserverNative.AgoraRtcAudioSpectrumObserverDic.Add(playerId, observer);
			}
		}

		public void UnregisterMediaPlayerAudioSpectrumObserver(int playerId)
		{
			if (!MediaPlayerAudioSpectrumObserverNative.AgoraRtcAudioSpectrumObserverDic.ContainsKey(playerId))
			{
				MediaPlayerAudioSpectrumObserverNative.AgoraRtcAudioSpectrumObserverDic.Remove(playerId);
			}
		}

		public int CreateMediaPlayer()
		{
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "RtcEngine_createMediaPlayer", "", 0u, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int DestroyMediaPlayer(int playerId)
		{
			string text = AgoraJson.ToJson(new { playerId });
			return AgoraRtcNative.CallIrisApi(_irisApiEngine, "RtcEngine_destroyMediaPlayer", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
		}

		public int Open(int playerId, string url, long startPos)
		{
			string text = AgoraJson.ToJson(new { playerId, url, startPos });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_open", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int OpenWithCustomSource(int playerId, long startPos, IMediaPlayerCustomDataProvider provider)
		{
			UnsetMediaPlayerOpenWithMediaSource(playerId);
			UnSetMediaPlayerOpenWithCustomSource(playerId);
			SetMediaPlayerOpenWithCustomSource(playerId, startPos, provider != null);
			if (provider != null)
			{
				if (MediaPlayerCustomDataProviderNative.CustomDataProviders.ContainsKey(playerId))
				{
					MediaPlayerCustomDataProviderNative.CustomDataProviders.Remove(playerId);
				}
				MediaPlayerCustomDataProviderNative.CustomDataProviders.Add(playerId, provider);
			}
			else if (MediaPlayerCustomDataProviderNative.CustomDataProviders.ContainsKey(playerId))
			{
				MediaPlayerCustomDataProviderNative.CustomDataProviders.Remove(playerId);
			}
			return 0;
		}

		public int OpenWithMediaSource(int playerId, MediaSource source)
		{
			UnsetMediaPlayerOpenWithMediaSource(playerId);
			UnSetMediaPlayerOpenWithCustomSource(playerId);
			SetMediaPlayerOpenWithMediaSource(playerId, source, source.provider != null);
			IMediaPlayerCustomDataProvider provider = source.provider;
			if (provider != null)
			{
				if (MediaPlayerCustomDataProviderNative.CustomDataProviders.ContainsKey(playerId))
				{
					MediaPlayerCustomDataProviderNative.CustomDataProviders.Remove(playerId);
				}
				MediaPlayerCustomDataProviderNative.CustomDataProviders.Add(playerId, provider);
			}
			else if (MediaPlayerCustomDataProviderNative.CustomDataProviders.ContainsKey(playerId))
			{
				MediaPlayerCustomDataProviderNative.CustomDataProviders.Remove(playerId);
			}
			return 0;
		}

		public int SetSoundPositionParams(float pan, float gain)
		{
			string text = AgoraJson.ToJson(new { pan, gain });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_setSoundPositionParams", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int Play(int playerId)
		{
			string text = AgoraJson.ToJson(new { playerId });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_play", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int Pause(int playerId)
		{
			string text = AgoraJson.ToJson(new { playerId });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_pause", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int Stop(int playerId)
		{
			string text = AgoraJson.ToJson(new { playerId });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_stop", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int Resume(int playerId)
		{
			string text = AgoraJson.ToJson(new { playerId });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_resume", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int Seek(int playerId, long newPos)
		{
			string text = AgoraJson.ToJson(new { playerId, newPos });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_seek", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int GetDuration(int playerId, ref long duration)
		{
			string text = AgoraJson.ToJson(new { playerId });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_getDuration", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			duration = (long)AgoraJson.GetData<long>(_result.Result, "duration");
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int GetPlayPosition(int playerId, ref long pos)
		{
			string text = AgoraJson.ToJson(new { playerId });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_getPlayPosition", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			pos = (long)AgoraJson.GetData<long>(_result.Result, "pos");
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int GetStreamCount(int playerId, ref long count)
		{
			string text = AgoraJson.ToJson(new { playerId });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_getStreamCount", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			count = (long)AgoraJson.GetData<long>(_result.Result, "count");
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int GetStreamInfo(int playerId, long index, ref PlayerStreamInfo info)
		{
			string text = AgoraJson.ToJson(new { playerId, index });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_getStreamInfo", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			info = ((num != 0) ? new PlayerStreamInfo() : AgoraJson.JsonToStruct<PlayerStreamInfo>(_result.Result, "info"));
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetLoopCount(int playerId, int loopCount)
		{
			string text = AgoraJson.ToJson(new { playerId, loopCount });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_setLoopCount", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetPlaybackSpeed(int playerId, int speed)
		{
			string text = AgoraJson.ToJson(new { playerId, speed });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_setPlaybackSpeed", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SelectAudioTrack(int playerId, int index)
		{
			string text = AgoraJson.ToJson(new { playerId, index });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_selectAudioTrack", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetPlayerOption(int playerId, string key, int value)
		{
			string text = AgoraJson.ToJson(new { playerId, key, value });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_setPlayerOption", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetPlayerOption(int playerId, string key, string value)
		{
			string text = AgoraJson.ToJson(new { playerId, key, value });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_setPlayerOption2", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int TakeScreenshot(int playerId, string filename)
		{
			string text = AgoraJson.ToJson(new { playerId, filename });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_takeScreenshot", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SelectInternalSubtitle(int playerId, int index)
		{
			string text = AgoraJson.ToJson(new { playerId, index });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_selectInternalSubtitle", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetExternalSubtitle(int playerId, string url)
		{
			string text = AgoraJson.ToJson(new { playerId, url });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_setExternalSubtitle", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public MEDIA_PLAYER_STATE GetState(int playerId)
		{
			string text = AgoraJson.ToJson(new { playerId });
			AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_getState", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			return (MEDIA_PLAYER_STATE)AgoraJson.GetData<int>(_result.Result, "result");
		}

		public int Mute(int playerId, bool muted)
		{
			string text = AgoraJson.ToJson(new { playerId, muted });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_mute", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int GetMute(int playerId, ref bool muted)
		{
			string text = AgoraJson.ToJson(new { playerId });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_getMute", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			muted = (bool)AgoraJson.GetData<bool>(_result.Result, "muted");
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int AdjustPlayoutVolume(int playerId, int volume)
		{
			string text = AgoraJson.ToJson(new { playerId, volume });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_adjustPlayoutVolume", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int GetPlayoutVolume(int playerId, ref int volume)
		{
			string text = AgoraJson.ToJson(new { playerId });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_getPlayoutVolume", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			volume = (int)AgoraJson.GetData<int>(_result.Result, "volume");
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int AdjustPublishSignalVolume(int playerId, int volume)
		{
			string text = AgoraJson.ToJson(new { playerId, volume });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_adjustPublishSignalVolume", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int GetPublishSignalVolume(int playerId, ref int volume)
		{
			string text = AgoraJson.ToJson(new { playerId, volume });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_getPublishSignalVolume", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			volume = (int)AgoraJson.GetData<int>(_result.Result, "volume");
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetView(int playerId)
		{
			string text = AgoraJson.ToJson(new { playerId });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_setView", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetRenderMode(int playerId, RENDER_MODE_TYPE renderMode)
		{
			string text = AgoraJson.ToJson(new { playerId, renderMode });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_setRenderMode", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetAudioDualMonoMode(int playerId, AUDIO_DUAL_MONO_MODE mode)
		{
			string text = AgoraJson.ToJson(new { playerId, mode });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_setAudioDualMonoMode", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public string GetPlayerSdkVersion(int playerId)
		{
			string text = AgoraJson.ToJson(new { playerId });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_getPlayerSdkVersion", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (string)AgoraJson.GetData<string>(_result.Result, "result");
			}
			return num.ToString();
		}

		public string GetPlaySrc(int playerId)
		{
			string text = AgoraJson.ToJson(new { playerId });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_getPlaySrc", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (string)AgoraJson.GetData<string>(_result.Result, "result");
			}
			return num.ToString();
		}

		public int SetAudioPitch(int playerId, int pitch)
		{
			string text = AgoraJson.ToJson(new { playerId, pitch });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_setAudioPitch", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetSpatialAudioParams(int playerId, SpatialAudioParams spatial_audio_params)
		{
			string text = AgoraJson.ToJson(new { playerId, spatial_audio_params });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_setSpatialAudioParams", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int OpenWithAgoraCDNSrc(int playerId, string src, long startPos)
		{
			string text = AgoraJson.ToJson(new { playerId, src, startPos });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_openWithAgoraCDNSrc", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int GetAgoraCDNLineCount(int playerId)
		{
			string text = AgoraJson.ToJson(new { playerId });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_getAgoraCDNLineCount", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SwitchAgoraCDNLineByIndex(int playerId, int index)
		{
			string text = AgoraJson.ToJson(new { playerId, index });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_switchAgoraCDNLineByIndex", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int GetCurrentAgoraCDNIndex(int playerId)
		{
			_ = new { playerId };
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_getCurrentAgoraCDNIndex", "", 0u, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int EnableAutoSwitchAgoraCDN(int playerId, bool enable)
		{
			string text = AgoraJson.ToJson(new { playerId, enable });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_enableAutoSwitchAgoraCDN", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int RenewAgoraCDNSrcToken(int playerId, string token, long ts)
		{
			string text = AgoraJson.ToJson(new { playerId, token, ts });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_renewAgoraCDNSrcToken", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SwitchAgoraCDNSrc(int playerId, string src, bool syncPts = false)
		{
			string text = AgoraJson.ToJson(new { playerId, src, syncPts });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_switchAgoraCDNSrc", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SwitchSrc(int playerId, string src, bool syncPts = true)
		{
			string text = AgoraJson.ToJson(new { playerId, src, syncPts });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_switchSrc", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int PreloadSrc(int playerId, string src, long startPos)
		{
			string text = AgoraJson.ToJson(new { playerId, src, startPos });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_preloadSrc", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int PlayPreloadedSrc(int playerId, string src)
		{
			string text = AgoraJson.ToJson(new { playerId, src });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_playPreloadedSrc", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int UnloadSrc(int playerId, string src)
		{
			string text = AgoraJson.ToJson(new { playerId, src });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaPlayer_unloadSrc", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}
	}
	public class MediaRecorderImpl
	{
		private IntPtr _irisApiEngine;

		private CharAssistant _result;

		private bool _disposed;

		private IntPtr _irisEngineEventHandlerHandleNative;

		private IrisCEventHandler _irisCEventHandler;

		private IntPtr _irisCEngineEventHandlerNative;

		private AgoraCallbackObject _callbackObject;

		private static readonly string identifier = "AgoraMediaRecorder";

		internal MediaRecorderImpl(IntPtr irisApiEngine)
		{
			_result = default(CharAssistant);
			_irisApiEngine = irisApiEngine;
			CreateEventHandler();
		}

		~MediaRecorderImpl()
		{
			Dispose(disposing: false);
		}

		private void Dispose(bool disposing)
		{
			if (!_disposed)
			{
				if (disposing)
				{
					ReleaseEventHandler();
				}
				_irisApiEngine = IntPtr.Zero;
				_result = default(CharAssistant);
				_disposed = true;
			}
		}

		public void Dispose()
		{
			Dispose(disposing: true);
			GC.SuppressFinalize(this);
		}

		private void CreateEventHandler()
		{
			if (_irisEngineEventHandlerHandleNative == IntPtr.Zero)
			{
				_irisCEventHandler = new IrisCEventHandler
				{
					OnEvent = MediaRecorderObserverNative.OnEvent
				};
				IrisCEventHandlerNative irisCEventHandlerNative = default(IrisCEventHandlerNative);
				irisCEventHandlerNative.onEvent = Marshal.GetFunctionPointerForDelegate(_irisCEventHandler.OnEvent);
				IrisCEventHandlerNative structure = irisCEventHandlerNative;
				_irisCEngineEventHandlerNative = Marshal.AllocHGlobal(Marshal.SizeOf(structure));
				Marshal.StructureToPtr(structure, _irisCEngineEventHandlerNative, fDeleteOld: true);
				_irisEngineEventHandlerHandleNative = AgoraRtcNative.SetIrisMediaRecorderEventHandler(_irisApiEngine, _irisCEngineEventHandlerNative);
				_callbackObject = new AgoraCallbackObject(identifier);
				MediaRecorderObserverNative.CallbackObject = _callbackObject;
			}
		}

		private void ReleaseEventHandler()
		{
			MediaRecorderObserverNative.MediaRecorderObserverDic.Clear();
			MediaRecorderObserverNative.CallbackObject = null;
			if (_callbackObject != null)
			{
				_callbackObject.Release();
			}
			_callbackObject = null;
			AgoraRtcNative.UnsetIrisMediaRecorderEventHandler(_irisApiEngine, _irisEngineEventHandlerHandleNative);
			Marshal.FreeHGlobal(_irisCEngineEventHandlerNative);
			_irisEngineEventHandlerHandleNative = IntPtr.Zero;
		}

		public int SetMediaRecorderObserver(RtcConnection connection, IMediaRecorderObserver callback)
		{
			string key = connection.localUid + connection.channelId;
			if (!MediaRecorderObserverNative.MediaRecorderObserverDic.ContainsKey(key))
			{
				MediaRecorderObserverNative.MediaRecorderObserverDic.Add(key, callback);
				string text = AgoraJson.ToJson(new { connection });
				int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaRecorder_setMediaRecorderObserver", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
				if (num == 0)
				{
					return (int)AgoraJson.GetData<int>(_result.Result, "result");
				}
				return num;
			}
			if (callback == null && MediaRecorderObserverNative.MediaRecorderObserverDic.ContainsKey(key))
			{
				MediaRecorderObserverNative.MediaRecorderObserverDic.Remove(key);
			}
			return 0;
		}

		public int StartRecording(RtcConnection connection, MediaRecorderConfiguration config)
		{
			string text = AgoraJson.ToJson(new { connection, config });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaRecorder_startRecording", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StopRecording(RtcConnection connection)
		{
			string text = AgoraJson.ToJson(new { connection });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "MediaRecorder_stopRecording", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}
	}
	internal class RtcEngineImpl
	{
		private bool _disposed;

		private static RtcEngineImpl engineInstance = null;

		private static readonly string identifier = "AgoraRtcEngine";

		private IntPtr _irisRtcEngine;

		private CharAssistant _result;

		private IntPtr _irisEngineEventHandlerHandleNative;

		private IrisCEventHandler _irisCEventHandler;

		private IntPtr _irisCEngineEventHandlerNative;

		private AgoraCallbackObject _callbackObject;

		private IntPtr _irisRtcCAudioFrameObserverNative;

		private IrisRtcCAudioFrameObserver _irisRtcCAudioFrameObserver;

		private IntPtr _irisRtcAudioFrameObserverHandleNative;

		private IntPtr _irisRtcCAudioEncodedFrameObserverNative;

		private IrisRtcCAudioEncodedFrameObserver _irisRtcCAudioEncodedFrameObserver;

		private IntPtr _irisRtcAudioEncodedFrameObserverHandleNative;

		private IntPtr _irisRtcCVideoFrameObserverNative;

		private IrisRtcCVideoFrameObserver _irisRtcCVideoFrameObserver;

		private IntPtr _irisRtcVideoFrameObserverHandleNative;

		private IntPtr _irisRtcCVideoEncodedFrameObserverNative;

		private IrisRtcCVideoEncodedFrameObserver _irisRtcCVideoEncodedFrameObserver;

		private IntPtr _irisRtcVideoEncodedFrameObserverHandleNative;

		private IntPtr _irisRtcCMetaDataObserverNative;

		private IrisCMediaMetadataObserver _irisRtcCMetaDataObserver;

		private IntPtr _irisRtcMetaDataObserverHandleNative;

		private IntPtr _videoFrameBufferManagerPtr;

		private VideoDeviceManagerImpl _videoDeviceManagerInstance;

		private AudioDeviceManagerImpl _audioDeviceManagerInstance;

		private MediaPlayerImpl _mediaPlayerInstance;

		private LocalSpatialAudioEngineImpl _spatialAudioEngineInstance;

		private MediaPlayerCacheManagerImpl _mediaPlayerCacheManager;

		private MediaRecorderImpl _mediaRecorderInstance;

		private IntPtr _irisRtcCAudioSpectrumObserverNative;

		private IrisMediaPlayerCAudioSpectrumObserver _irisRtcCAudioSpectrumObserver;

		private IntPtr _irisRtcCAudioSpectrumObserverHandleNative;

		public event Action<RtcEngineImpl> OnRtcEngineImpleWillDispose;

		private RtcEngineImpl()
		{
			_result = default(CharAssistant);
			_irisRtcEngine = AgoraRtcNative.CreateIrisApiEngine();
			_videoDeviceManagerInstance = new VideoDeviceManagerImpl(_irisRtcEngine);
			_audioDeviceManagerInstance = new AudioDeviceManagerImpl(_irisRtcEngine);
			_mediaPlayerInstance = new MediaPlayerImpl(_irisRtcEngine);
			_spatialAudioEngineInstance = new LocalSpatialAudioEngineImpl(_irisRtcEngine);
			_mediaPlayerCacheManager = new MediaPlayerCacheManagerImpl(_irisRtcEngine);
			_mediaRecorderInstance = new MediaRecorderImpl(_irisRtcEngine);
			_videoFrameBufferManagerPtr = AgoraRtcNative.CreateIrisVideoFrameBufferManager();
			AgoraRtcNative.Attach(_irisRtcEngine, _videoFrameBufferManagerPtr);
			CreateEventHandler();
		}

		private void Dispose(bool disposing, bool sync)
		{
			if (_disposed)
			{
				return;
			}
			if (disposing)
			{
				if (this.OnRtcEngineImpleWillDispose != null)
				{
					this.OnRtcEngineImpleWillDispose(this);
				}
				ReleaseEventHandler();
				UnSetIrisAudioFrameObserver();
				UnSetIrisVideoFrameObserver();
				UnSetIrisMetaDataObserver();
				UnSetIrisAudioEncodedFrameObserver();
				UnSetIrisAudioSpectrumObserver();
				_videoDeviceManagerInstance.Dispose();
				_videoDeviceManagerInstance = null;
				_audioDeviceManagerInstance.Dispose();
				_audioDeviceManagerInstance = null;
				_mediaPlayerInstance.Dispose();
				_mediaPlayerInstance = null;
				_spatialAudioEngineInstance = null;
				_mediaPlayerCacheManager.Dispose();
				_mediaPlayerCacheManager = null;
				_mediaRecorderInstance.Dispose();
				_mediaRecorderInstance = null;
				AgoraRtcNative.Detach(_irisRtcEngine, _videoFrameBufferManagerPtr);
			}
			Release(sync);
			AgoraRtcNative.FreeIrisVideoFrameBufferManager(_videoFrameBufferManagerPtr);
			_disposed = true;
		}

		private void Release(bool sync = false)
		{
			string text = AgoraJson.ToJson(new { sync });
			AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_release", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			AgoraRtcNative.DestroyIrisApiEngine(_irisRtcEngine);
			_irisRtcEngine = IntPtr.Zero;
			_result = default(CharAssistant);
			engineInstance = null;
		}

		private void CreateEventHandler()
		{
			if (_irisEngineEventHandlerHandleNative == IntPtr.Zero)
			{
				_irisCEventHandler = new IrisCEventHandler
				{
					OnEvent = RtcEngineEventHandlerNative.OnEvent
				};
				IrisCEventHandlerNative irisCEventHandlerNative = default(IrisCEventHandlerNative);
				irisCEventHandlerNative.onEvent = Marshal.GetFunctionPointerForDelegate(_irisCEventHandler.OnEvent);
				IrisCEventHandlerNative structure = irisCEventHandlerNative;
				_irisCEngineEventHandlerNative = Marshal.AllocHGlobal(Marshal.SizeOf(structure));
				Marshal.StructureToPtr(structure, _irisCEngineEventHandlerNative, fDeleteOld: true);
				_irisEngineEventHandlerHandleNative = AgoraRtcNative.SetIrisRtcEngineEventHandler(_irisRtcEngine, _irisCEngineEventHandlerNative);
				_callbackObject = new AgoraCallbackObject("Agora" + GetHashCode());
				RtcEngineEventHandlerNative.CallbackObject = _callbackObject;
			}
		}

		private void ReleaseEventHandler()
		{
			RtcEngineEventHandlerNative.EngineEventHandler = null;
			RtcEngineEventHandlerNative.CallbackObject = null;
			if (_callbackObject != null)
			{
				_callbackObject.Release();
			}
			_callbackObject = null;
			AgoraRtcNative.UnsetIrisRtcEngineEventHandler(_irisRtcEngine, _irisEngineEventHandlerHandleNative);
			Marshal.FreeHGlobal(_irisCEngineEventHandlerNative);
			_irisEngineEventHandlerHandleNative = IntPtr.Zero;
		}

		internal IntPtr GetNativeHandler()
		{
			return _irisRtcEngine;
		}

		internal IntPtr GetVideoFrameBufferManager()
		{
			return _videoFrameBufferManagerPtr;
		}

		public static RtcEngineImpl GetInstance()
		{
			return engineInstance ?? (engineInstance = new RtcEngineImpl());
		}

		public static RtcEngineImpl Get()
		{
			return engineInstance;
		}

		public int Initialize(RtcEngineContext context)
		{
			string text = AgoraJson.ToJson(new { context });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_initialize", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			int num2 = ((num != 0) ? num : ((int)AgoraJson.GetData<int>(_result.Result, "result")));
			if (num2 == 0)
			{
				SetAppType(AppType.APP_TYPE_UNITY);
			}
			return num2;
		}

		public void Dispose(bool sync = false)
		{
			Dispose(disposing: true, sync);
			GC.SuppressFinalize(this);
		}

		public void InitEventHandler(IRtcEngineEventHandler engineEventHandler)
		{
			RtcEngineEventHandlerNative.EngineEventHandler = engineEventHandler;
		}

		public void RegisterAudioFrameObserver(IAudioFrameObserver audioFrameObserver, OBSERVER_MODE mode = OBSERVER_MODE.INTPTR)
		{
			SetIrisAudioFrameObserver();
			AudioFrameObserverNative.AudioFrameObserver = audioFrameObserver;
			AudioFrameObserverNative.mode = mode;
		}

		public void UnRegisterAudioFrameObserver()
		{
			UnSetIrisAudioFrameObserver();
		}

		private void SetIrisAudioFrameObserver()
		{
			if (!(_irisRtcAudioFrameObserverHandleNative != IntPtr.Zero))
			{
				_irisRtcCAudioFrameObserver = new IrisRtcCAudioFrameObserver
				{
					OnRecordAudioFrame = AudioFrameObserverNative.OnRecordAudioFrame,
					OnPlaybackAudioFrame = AudioFrameObserverNative.OnPlaybackAudioFrame,
					OnMixedAudioFrame = AudioFrameObserverNative.OnMixedAudioFrame,
					OnPlaybackAudioFrameBeforeMixing = AudioFrameObserverNative.OnPlaybackAudioFrameBeforeMixing,
					OnPlaybackAudioFrameBeforeMixing2 = AudioFrameObserverNative.OnPlaybackAudioFrameBeforeMixing2,
					GetPlaybackAudioParams = AudioFrameObserverNative.GetPlaybackAudioParams,
					GetRecordAudioParams = AudioFrameObserverNative.GetRecordAudioParams,
					GetMixedAudioParams = AudioFrameObserverNative.GetMixedAudioParams,
					GetObservedAudioFramePosition = AudioFrameObserverNative.GetObservedAudioFramePosition
				};
				IrisRtcCAudioFrameObserverNative irisRtcCAudioFrameObserverNative = default(IrisRtcCAudioFrameObserverNative);
				irisRtcCAudioFrameObserverNative.OnRecordAudioFrame = Marshal.GetFunctionPointerForDelegate(_irisRtcCAudioFrameObserver.OnRecordAudioFrame);
				irisRtcCAudioFrameObserverNative.OnPlaybackAudioFrame = Marshal.GetFunctionPointerForDelegate(_irisRtcCAudioFrameObserver.OnPlaybackAudioFrame);
				irisRtcCAudioFrameObserverNative.OnMixedAudioFrame = Marshal.GetFunctionPointerForDelegate(_irisRtcCAudioFrameObserver.OnMixedAudioFrame);
				irisRtcCAudioFrameObserverNative.OnPlaybackAudioFrameBeforeMixing = Marshal.GetFunctionPointerForDelegate(_irisRtcCAudioFrameObserver.OnPlaybackAudioFrameBeforeMixing);
				irisRtcCAudioFrameObserverNative.OnPlaybackAudioFrameBeforeMixing2 = Marshal.GetFunctionPointerForDelegate(_irisRtcCAudioFrameObserver.OnPlaybackAudioFrameBeforeMixing2);
				irisRtcCAudioFrameObserverNative.GetPlaybackAudioParams = Marshal.GetFunctionPointerForDelegate(_irisRtcCAudioFrameObserver.GetPlaybackAudioParams);
				irisRtcCAudioFrameObserverNative.GetRecordAudioParams = Marshal.GetFunctionPointerForDelegate(_irisRtcCAudioFrameObserver.GetRecordAudioParams);
				irisRtcCAudioFrameObserverNative.GetMixedAudioParams = Marshal.GetFunctionPointerForDelegate(_irisRtcCAudioFrameObserver.GetMixedAudioParams);
				irisRtcCAudioFrameObserverNative.GetObservedAudioFramePosition = Marshal.GetFunctionPointerForDelegate(_irisRtcCAudioFrameObserver.GetObservedAudioFramePosition);
				IrisRtcCAudioFrameObserverNative structure = irisRtcCAudioFrameObserverNative;
				_irisRtcCAudioFrameObserverNative = Marshal.AllocHGlobal(Marshal.SizeOf(structure));
				Marshal.StructureToPtr(structure, _irisRtcCAudioFrameObserverNative, fDeleteOld: true);
				_irisRtcAudioFrameObserverHandleNative = AgoraRtcNative.RegisterAudioFrameObserver(_irisRtcEngine, _irisRtcCAudioFrameObserverNative, 0, identifier);
			}
		}

		private void UnSetIrisAudioFrameObserver()
		{
			if (!(_irisRtcAudioFrameObserverHandleNative == IntPtr.Zero))
			{
				AgoraRtcNative.UnRegisterAudioFrameObserver(_irisRtcEngine, _irisRtcAudioFrameObserverHandleNative, identifier);
				_irisRtcAudioFrameObserverHandleNative = IntPtr.Zero;
				AudioFrameObserverNative.AudioFrameObserver = null;
				_irisRtcCAudioFrameObserver = default(IrisRtcCAudioFrameObserver);
				Marshal.FreeHGlobal(_irisRtcCAudioFrameObserverNative);
			}
		}

		public void RegisterVideoFrameObserver(IVideoFrameObserver videoFrameObserver, OBSERVER_MODE mode = OBSERVER_MODE.INTPTR)
		{
			SetIrisVideoFrameObserver();
			VideoFrameObserverNative.VideoFrameObserver = videoFrameObserver;
			VideoFrameObserverNative.mode = mode;
		}

		public void UnRegisterVideoFrameObserver()
		{
			UnSetIrisVideoFrameObserver();
		}

		private void SetIrisVideoFrameObserver()
		{
			if (!(_irisRtcVideoFrameObserverHandleNative != IntPtr.Zero))
			{
				_irisRtcCVideoFrameObserver = new IrisRtcCVideoFrameObserver
				{
					OnCaptureVideoFrame = VideoFrameObserverNative.OnCaptureVideoFrame,
					OnPreEncodeVideoFrame = VideoFrameObserverNative.OnPreEncodeVideoFrame,
					OnRenderVideoFrame = VideoFrameObserverNative.OnRenderVideoFrame,
					GetObservedFramePosition = VideoFrameObserverNative.GetObservedFramePosition
				};
				IrisRtcCVideoFrameObserverNative irisRtcCVideoFrameObserverNative = default(IrisRtcCVideoFrameObserverNative);
				irisRtcCVideoFrameObserverNative.OnCaptureVideoFrame = Marshal.GetFunctionPointerForDelegate(_irisRtcCVideoFrameObserver.OnCaptureVideoFrame);
				irisRtcCVideoFrameObserverNative.OnPreEncodeVideoFrame = Marshal.GetFunctionPointerForDelegate(_irisRtcCVideoFrameObserver.OnPreEncodeVideoFrame);
				irisRtcCVideoFrameObserverNative.OnRenderVideoFrame = Marshal.GetFunctionPointerForDelegate(_irisRtcCVideoFrameObserver.OnRenderVideoFrame);
				irisRtcCVideoFrameObserverNative.GetObservedFramePosition = Marshal.GetFunctionPointerForDelegate(_irisRtcCVideoFrameObserver.GetObservedFramePosition);
				IrisRtcCVideoFrameObserverNative structure = irisRtcCVideoFrameObserverNative;
				_irisRtcCVideoFrameObserverNative = Marshal.AllocHGlobal(Marshal.SizeOf(structure));
				Marshal.StructureToPtr(structure, _irisRtcCVideoFrameObserverNative, fDeleteOld: true);
				_irisRtcVideoFrameObserverHandleNative = AgoraRtcNative.RegisterVideoFrameObserver(_irisRtcEngine, _irisRtcCVideoFrameObserverNative, 0, identifier);
			}
		}

		private void UnSetIrisVideoFrameObserver()
		{
			if (!(_irisRtcVideoFrameObserverHandleNative == IntPtr.Zero))
			{
				AgoraRtcNative.UnRegisterVideoFrameObserver(_irisRtcEngine, _irisRtcVideoFrameObserverHandleNative, identifier);
				_irisRtcVideoFrameObserverHandleNative = IntPtr.Zero;
				VideoFrameObserverNative.VideoFrameObserver = null;
				_irisRtcCVideoFrameObserver = default(IrisRtcCVideoFrameObserver);
				Marshal.FreeHGlobal(_irisRtcCVideoFrameObserverNative);
			}
		}

		public void RegisterVideoEncodedFrameObserver(IVideoEncodedFrameObserver VideoEncodedFrameObserver, OBSERVER_MODE mode = OBSERVER_MODE.INTPTR)
		{
			SetIrisVideoEncodedFrameObserver();
			VideoEncodedFrameObserverNative.VideoEncodedFrameObserver = VideoEncodedFrameObserver;
		}

		public void UnRegisterVideoEncodedFrameObserver()
		{
			UnSetIrisVideoEncodedFrameObserver();
		}

		private void SetIrisVideoEncodedFrameObserver()
		{
			if (!(_irisRtcVideoEncodedFrameObserverHandleNative != IntPtr.Zero))
			{
				_irisRtcCVideoEncodedFrameObserver = new IrisRtcCVideoEncodedFrameObserver
				{
					OnEncodedVideoFrameReceived = VideoEncodedFrameObserverNative.OnEncodedVideoFrameReceived
				};
				IrisRtcCVideoEncodedFrameObserverNative irisRtcCVideoEncodedFrameObserverNative = default(IrisRtcCVideoEncodedFrameObserverNative);
				irisRtcCVideoEncodedFrameObserverNative.OnEncodedVideoFrameReceived = Marshal.GetFunctionPointerForDelegate(_irisRtcCVideoEncodedFrameObserver.OnEncodedVideoFrameReceived);
				IrisRtcCVideoEncodedFrameObserverNative structure = irisRtcCVideoEncodedFrameObserverNative;
				_irisRtcCVideoEncodedFrameObserverNative = Marshal.AllocHGlobal(Marshal.SizeOf(structure));
				Marshal.StructureToPtr(structure, _irisRtcCVideoEncodedFrameObserverNative, fDeleteOld: true);
				_irisRtcVideoEncodedFrameObserverHandleNative = AgoraRtcNative.RegisterVideoEncodedFrameObserver(_irisRtcEngine, _irisRtcCVideoEncodedFrameObserverNative, 0, identifier);
			}
		}

		private void UnSetIrisVideoEncodedFrameObserver()
		{
			if (!(_irisRtcVideoEncodedFrameObserverHandleNative == IntPtr.Zero))
			{
				AgoraRtcNative.UnRegisterVideoEncodedFrameObserver(_irisRtcEngine, _irisRtcVideoEncodedFrameObserverHandleNative, identifier);
				_irisRtcVideoEncodedFrameObserverHandleNative = IntPtr.Zero;
				VideoEncodedFrameObserverNative.VideoEncodedFrameObserver = null;
				_irisRtcCVideoEncodedFrameObserver = default(IrisRtcCVideoEncodedFrameObserver);
				Marshal.FreeHGlobal(_irisRtcCVideoEncodedFrameObserverNative);
				_irisRtcCVideoEncodedFrameObserverNative = IntPtr.Zero;
			}
		}

		private void SetIrisMetaDataObserver(METADATA_TYPE type)
		{
			if (!(_irisRtcMetaDataObserverHandleNative != IntPtr.Zero))
			{
				_irisRtcCMetaDataObserver = new IrisCMediaMetadataObserver
				{
					GetMaxMetadataSize = MetadataObserverNative.GetMaxMetadataSize,
					OnReadyToSendMetadata = MetadataObserverNative.OnReadyToSendMetadata,
					OnMetadataReceived = MetadataObserverNative.OnMetadataReceived
				};
				IrisCMediaMetadataObserverNative irisCMediaMetadataObserverNative = default(IrisCMediaMetadataObserverNative);
				irisCMediaMetadataObserverNative.getMaxMetadataSize = Marshal.GetFunctionPointerForDelegate(_irisRtcCMetaDataObserver.GetMaxMetadataSize);
				irisCMediaMetadataObserverNative.onReadyToSendMetadata = Marshal.GetFunctionPointerForDelegate(_irisRtcCMetaDataObserver.OnReadyToSendMetadata);
				irisCMediaMetadataObserverNative.onMetadataReceived = Marshal.GetFunctionPointerForDelegate(_irisRtcCMetaDataObserver.OnMetadataReceived);
				IrisCMediaMetadataObserverNative structure = irisCMediaMetadataObserverNative;
				_irisRtcCMetaDataObserverNative = Marshal.AllocHGlobal(Marshal.SizeOf(structure));
				Marshal.StructureToPtr(structure, _irisRtcCMetaDataObserverNative, fDeleteOld: true);
				string @params = AgoraJson.ToJson(new { type });
				_irisRtcMetaDataObserverHandleNative = AgoraRtcNative.RegisterMediaMetadataObserver(_irisRtcEngine, _irisRtcCMetaDataObserverNative, @params);
			}
		}

		private void UnSetIrisMetaDataObserver()
		{
			if (!(_irisRtcMetaDataObserverHandleNative == IntPtr.Zero))
			{
				AgoraRtcNative.UnRegisterMediaMetadataObserver(_irisRtcEngine, _irisRtcMetaDataObserverHandleNative, "");
				_irisRtcMetaDataObserverHandleNative = IntPtr.Zero;
				MetadataObserverNative.Observer = null;
				_irisRtcCMetaDataObserver = default(IrisCMediaMetadataObserver);
				Marshal.FreeHGlobal(_irisRtcCMetaDataObserverNative);
			}
		}

		public AudioDeviceManagerImpl GetAudioDeviceManager()
		{
			return _audioDeviceManagerInstance;
		}

		public VideoDeviceManagerImpl GetVideoDeviceManager()
		{
			return _videoDeviceManagerInstance;
		}

		public MediaPlayerImpl GetMediaPlayer()
		{
			return _mediaPlayerInstance;
		}

		public LocalSpatialAudioEngineImpl GetLocalSpatialAudioEngine()
		{
			return _spatialAudioEngineInstance;
		}

		public MediaPlayerCacheManagerImpl GetMediaPlayerCacheManager()
		{
			return _mediaPlayerCacheManager;
		}

		public MediaRecorderImpl GetMediaRecorder()
		{
			return _mediaRecorderInstance;
		}

		internal IVideoStreamManager GetVideoStreamManager()
		{
			return new VideoStreamManager(this);
		}

		public string GetVersion(ref int build)
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_getVersion", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				build = (int)AgoraJson.GetData<int>(_result.Result, "build");
			}
			else
			{
				build = 0;
			}
			if (num == 0)
			{
				return (string)AgoraJson.GetData<string>(_result.Result, "result");
			}
			return null;
		}

		public string GetErrorDescription(int code)
		{
			string text = AgoraJson.ToJson(new { code });
			if (AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_getErrorDescription", text, (uint)text.Length, IntPtr.Zero, 0u, out _result) == 0)
			{
				return (string)AgoraJson.GetData<string>(_result.Result, "result");
			}
			return null;
		}

		public int JoinChannel(string token, string channelId, string info = "", uint uid = 0u)
		{
			string text = AgoraJson.ToJson(new { token, channelId, info, uid });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_joinChannel", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int JoinChannel(string token, string channelId, uint uid, ChannelMediaOptions options)
		{
			string text = AgoraJson.ToJson(new { token, channelId, uid, options });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_joinChannel2", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int UpdateChannelMediaOptions(ChannelMediaOptions options)
		{
			string text = AgoraJson.ToJson(new { options });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_updateChannelMediaOptions", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int LeaveChannel()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_leaveChannel", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int LeaveChannel(LeaveChannelOptions options)
		{
			string text = AgoraJson.ToJson(new { options });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_leaveChannel2", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int RenewToken(string token)
		{
			string text = AgoraJson.ToJson(new { token });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_renewToken", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetChannelProfile(CHANNEL_PROFILE_TYPE profile)
		{
			string text = AgoraJson.ToJson(new { profile });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setChannelProfile", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetClientRole(CLIENT_ROLE_TYPE role)
		{
			string text = AgoraJson.ToJson(new { role });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setClientRole", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetClientRole(CLIENT_ROLE_TYPE role, ClientRoleOptions options)
		{
			string text = AgoraJson.ToJson(new { role, options });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setClientRole2", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StartEchoTest()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_startEchoTest", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StartEchoTest(int intervalInSeconds)
		{
			string text = AgoraJson.ToJson(new { intervalInSeconds });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_startEchoTest2", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StartEchoTest(EchoTestConfiguration config)
		{
			string text = AgoraJson.ToJson(new { config });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_startEchoTest3", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StopEchoTest()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_stopEchoTest", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int EnableVideo()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_enableVideo", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int DisableVideo()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_disableVideo", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StartPreview()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_startPreview", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StartPreview(VIDEO_SOURCE_TYPE sourceType)
		{
			string text = AgoraJson.ToJson(new { sourceType });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_startPreview2", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StopPreview()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_stopPreview", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StopPreview(VIDEO_SOURCE_TYPE sourceType)
		{
			string text = AgoraJson.ToJson(new { sourceType });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_stopPreview2", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StartLastmileProbeTest(LastmileProbeConfig config)
		{
			string text = AgoraJson.ToJson(new { config });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_startLastmileProbeTest", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StopLastmileProbeTest()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_stopLastmileProbeTest", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetVideoEncoderConfiguration(VideoEncoderConfiguration config)
		{
			string text = AgoraJson.ToJson(new { config });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setVideoEncoderConfiguration", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetBeautyEffectOptions(bool enabled, BeautyOptions options, MEDIA_SOURCE_TYPE type = MEDIA_SOURCE_TYPE.PRIMARY_CAMERA_SOURCE)
		{
			string text = AgoraJson.ToJson(new { enabled, options, type });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setBeautyEffectOptions", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int EnableAudio()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_enableAudio", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int DisableAudio()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_disableAudio", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetAudioProfile(AUDIO_PROFILE_TYPE profile, AUDIO_SCENARIO_TYPE scenario)
		{
			string text = AgoraJson.ToJson(new { profile, scenario });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setAudioProfile", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetAudioProfile(AUDIO_PROFILE_TYPE profile)
		{
			string text = AgoraJson.ToJson(new { profile });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setAudioProfile2", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int EnableLocalAudio(bool enabled)
		{
			string text = AgoraJson.ToJson(new { enabled });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_enableLocalAudio", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int MuteLocalAudioStream(bool mute)
		{
			string text = AgoraJson.ToJson(new { mute });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_muteLocalAudioStream", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int MuteAllRemoteAudioStreams(bool mute)
		{
			string text = AgoraJson.ToJson(new { mute });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_muteAllRemoteAudioStreams", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetDefaultMuteAllRemoteAudioStreams(bool mute)
		{
			string text = AgoraJson.ToJson(new { mute });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setDefaultMuteAllRemoteAudioStreams", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int MuteRemoteAudioStream(uint uid, bool mute)
		{
			string text = AgoraJson.ToJson(new { uid, mute });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_muteRemoteAudioStream", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int MuteLocalVideoStream(bool mute)
		{
			string text = AgoraJson.ToJson(new { mute });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_muteLocalVideoStream", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int EnableLocalVideo(bool enabled)
		{
			string text = AgoraJson.ToJson(new { enabled });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_enableLocalVideo", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int MuteAllRemoteVideoStreams(bool mute)
		{
			string text = AgoraJson.ToJson(new { mute });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_muteAllRemoteVideoStreams", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetDefaultMuteAllRemoteVideoStreams(bool mute)
		{
			string text = AgoraJson.ToJson(new { mute });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setDefaultMuteAllRemoteVideoStreams", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int MuteRemoteVideoStream(uint uid, bool mute)
		{
			string text = AgoraJson.ToJson(new { uid, mute });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_muteRemoteVideoStream", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetRemoteVideoStreamType(uint uid, VIDEO_STREAM_TYPE streamType)
		{
			string text = AgoraJson.ToJson(new { uid, streamType });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setRemoteVideoStreamType", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetRemoteDefaultVideoStreamType(VIDEO_STREAM_TYPE streamType)
		{
			string text = AgoraJson.ToJson(new { streamType });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setRemoteDefaultVideoStreamType", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetDualStreamMode(SIMULCAST_STREAM_MODE mode)
		{
			string text = AgoraJson.ToJson(new { mode });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setDualStreamMode", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetDualStreamMode(VIDEO_SOURCE_TYPE sourceType, SIMULCAST_STREAM_MODE mode)
		{
			string text = AgoraJson.ToJson(new { sourceType, mode });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setDualStreamMode2", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetDualStreamMode(VIDEO_SOURCE_TYPE sourceType, SIMULCAST_STREAM_MODE mode, SimulcastStreamConfig streamConfig)
		{
			string text = AgoraJson.ToJson(new { sourceType, mode, streamConfig });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setDualStreamMode3", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetDualStreamModeEx(VIDEO_SOURCE_TYPE sourceType, SIMULCAST_STREAM_MODE mode, SimulcastStreamConfig streamConfig, RtcConnection connection)
		{
			string text = AgoraJson.ToJson(new { sourceType, mode, streamConfig, connection });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngineEx_setDualStreamModeEx", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int TakeSnapshotEx(RtcConnection connection, uint uid, string filePath)
		{
			string text = AgoraJson.ToJson(new { connection, uid, filePath });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngineEx_takeSnapshotEx", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int EnableAudioVolumeIndication(int interval, int smooth, bool reportVad)
		{
			string text = AgoraJson.ToJson(new { interval, smooth, reportVad });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_enableAudioVolumeIndication", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StartAudioRecording(string filePath, AUDIO_RECORDING_QUALITY_TYPE quality)
		{
			string text = AgoraJson.ToJson(new { filePath, quality });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_startAudioRecording", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StartAudioRecording(string filePath, int sampleRate, AUDIO_RECORDING_QUALITY_TYPE quality)
		{
			string text = AgoraJson.ToJson(new { filePath, sampleRate, quality });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_startAudioRecording2", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StartAudioRecording(AudioRecordingConfiguration config)
		{
			string text = AgoraJson.ToJson(new { config });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_startAudioRecording3", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public void RegisterAudioEncodedFrameObserver(AudioEncodedFrameObserverConfig config, IAudioEncodedFrameObserver observer)
		{
			SetIrisAudioEncodedFrameObserver(config);
			AudioEncodedFrameObserverNative.AudioEncodedFrameObserver = observer;
		}

		public void UnRegisterAudioEncodedFrameObserver()
		{
			UnSetIrisAudioEncodedFrameObserver();
		}

		private void SetIrisAudioEncodedFrameObserver(AudioEncodedFrameObserverConfig config)
		{
			if (!(_irisRtcAudioEncodedFrameObserverHandleNative != IntPtr.Zero))
			{
				_irisRtcCAudioEncodedFrameObserver = new IrisRtcCAudioEncodedFrameObserver
				{
					OnRecordAudioEncodedFrame = AudioEncodedFrameObserverNative.OnRecordAudioEncodedFrame,
					OnPlaybackAudioEncodedFrame = AudioEncodedFrameObserverNative.OnPlaybackAudioEncodedFrame,
					OnMixedAudioEncodedFrame = AudioEncodedFrameObserverNative.OnMixedAudioEncodedFrame
				};
				IrisRtcCAudioEncodedFrameObserverNative irisRtcCAudioEncodedFrameObserverNative = default(IrisRtcCAudioEncodedFrameObserverNative);
				irisRtcCAudioEncodedFrameObserverNative.OnRecordAudioEncodedFrame = Marshal.GetFunctionPointerForDelegate(_irisRtcCAudioEncodedFrameObserver.OnRecordAudioEncodedFrame);
				irisRtcCAudioEncodedFrameObserverNative.OnPlaybackAudioEncodedFrame = Marshal.GetFunctionPointerForDelegate(_irisRtcCAudioEncodedFrameObserver.OnPlaybackAudioEncodedFrame);
				irisRtcCAudioEncodedFrameObserverNative.OnMixedAudioEncodedFrame = Marshal.GetFunctionPointerForDelegate(_irisRtcCAudioEncodedFrameObserver.OnMixedAudioEncodedFrame);
				IrisRtcCAudioEncodedFrameObserverNative structure = irisRtcCAudioEncodedFrameObserverNative;
				_irisRtcCAudioEncodedFrameObserverNative = Marshal.AllocHGlobal(Marshal.SizeOf(structure));
				Marshal.StructureToPtr(structure, _irisRtcCAudioEncodedFrameObserverNative, fDeleteOld: true);
				string @params = AgoraJson.ToJson(new { config });
				_irisRtcAudioEncodedFrameObserverHandleNative = AgoraRtcNative.RegisterAudioEncodedFrameObserver(_irisRtcEngine, _irisRtcCAudioEncodedFrameObserverNative, @params);
			}
		}

		private void UnSetIrisAudioEncodedFrameObserver()
		{
			_ = _irisRtcCAudioEncodedFrameObserverNative;
			AgoraRtcNative.UnRegisterAudioEncodedFrameObserver(_irisRtcEngine, _irisRtcAudioEncodedFrameObserverHandleNative, identifier);
			_irisRtcAudioEncodedFrameObserverHandleNative = IntPtr.Zero;
			AudioEncodedFrameObserverNative.AudioEncodedFrameObserver = null;
			Marshal.FreeHGlobal(_irisRtcCAudioEncodedFrameObserverNative);
			_irisRtcCAudioEncodedFrameObserverNative = IntPtr.Zero;
			_irisRtcCAudioEncodedFrameObserver = default(IrisRtcCAudioEncodedFrameObserver);
		}

		public int StopAudioRecording()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_stopAudioRecording", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StartAudioMixing(string filePath, bool loopback, int cycle)
		{
			string text = AgoraJson.ToJson(new { filePath, loopback, cycle });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_startAudioMixing", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StartAudioMixing(string filePath, bool loopback, int cycle, int startPos)
		{
			string text = AgoraJson.ToJson(new { filePath, loopback, cycle, startPos });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_startAudioMixing2", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StopAudioMixing()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_stopAudioMixing", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int PauseAudioMixing()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_pauseAudioMixing", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int ResumeAudioMixing()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_resumeAudioMixing", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int AdjustAudioMixingVolume(int volume)
		{
			string text = AgoraJson.ToJson(new { volume });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_adjustAudioMixingVolume", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int AdjustAudioMixingPublishVolume(int volume)
		{
			string text = AgoraJson.ToJson(new { volume });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_adjustAudioMixingPublishVolume", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int GetAudioMixingPublishVolume()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_getAudioMixingPublishVolume", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int AdjustAudioMixingPlayoutVolume(int volume)
		{
			string text = AgoraJson.ToJson(new { volume });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_adjustAudioMixingPlayoutVolume", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int GetAudioMixingPlayoutVolume()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_getAudioMixingPlayoutVolume", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int GetAudioMixingDuration()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_getAudioMixingDuration", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int GetAudioMixingCurrentPosition()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_getAudioMixingCurrentPosition", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetAudioMixingPosition(int pos)
		{
			string text = AgoraJson.ToJson(new { pos });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setAudioMixingPosition", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetAudioMixingPitch(int pitch)
		{
			string text = AgoraJson.ToJson(new { pitch });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setAudioMixingPitch", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int GetEffectsVolume()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_getEffectsVolume", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetEffectsVolume(int volume)
		{
			string text = AgoraJson.ToJson(new { volume });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setEffectsVolume", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int PreloadEffect(int soundId, string filePath, int startPos = 0)
		{
			string text = AgoraJson.ToJson(new { soundId, filePath, startPos });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_preloadEffect", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int PlayEffect(int soundId, string filePath, int loopCount, double pitch, double pan, int gain, bool publish = false, int startPos = 0)
		{
			string text = AgoraJson.ToJson(new { soundId, filePath, loopCount, pitch, pan, gain, publish, startPos });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_playEffect", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int PlayAllEffects(int loopCount, double pitch, double pan, int gain, bool publish = false)
		{
			string text = AgoraJson.ToJson(new { loopCount, pitch, pan, gain, publish });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_playAllEffects", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int GetVolumeOfEffect(int soundId)
		{
			string text = AgoraJson.ToJson(new { soundId });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_getVolumeOfEffect", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetVolumeOfEffect(int soundId, int volume)
		{
			string text = AgoraJson.ToJson(new { soundId, volume });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setVolumeOfEffect", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int PauseEffect(int soundId)
		{
			string text = AgoraJson.ToJson(new { soundId });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_pauseEffect", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int PauseAllEffects()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_pauseAllEffects", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int ResumeEffect(int soundId)
		{
			string text = AgoraJson.ToJson(new { soundId });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_resumeEffect", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int ResumeAllEffects()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_resumeAllEffects", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StopEffect(int soundId)
		{
			string text = AgoraJson.ToJson(new { soundId });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_stopEffect", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StopAllEffects()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_stopAllEffects", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int UnloadEffect(int soundId)
		{
			string text = AgoraJson.ToJson(new { soundId });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_unloadEffect", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int UnloadAllEffects()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_unloadAllEffects", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int GetEffectCurrentPosition(int soundId)
		{
			string text = AgoraJson.ToJson(new { soundId });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_getEffectCurrentPosition", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int GetEffectDuration(string filePath)
		{
			string text = AgoraJson.ToJson(new { filePath });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_getEffectDuration", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetEffectPosition(int soundId, int pos)
		{
			string text = AgoraJson.ToJson(new { soundId, pos });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setEffectPosition", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int EnableSoundPositionIndication(bool enabled)
		{
			string text = AgoraJson.ToJson(new { enabled });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_enableSoundPositionIndication", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetRemoteVoicePosition(uint uid, double pan, double gain)
		{
			string text = AgoraJson.ToJson(new { uid, pan, gain });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setRemoteVoicePosition", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int EnableSpatialAudio(bool enabled)
		{
			string text = AgoraJson.ToJson(new { enabled });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_enableSpatialAudio", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetVoiceBeautifierPreset(VOICE_BEAUTIFIER_PRESET preset)
		{
			string text = AgoraJson.ToJson(new { preset });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setVoiceBeautifierPreset", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetAudioEffectPreset(AUDIO_EFFECT_PRESET preset)
		{
			string text = AgoraJson.ToJson(new { preset });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setAudioEffectPreset", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetVoiceConversionPreset(VOICE_CONVERSION_PRESET preset)
		{
			string text = AgoraJson.ToJson(new { preset });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setVoiceConversionPreset", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetAudioEffectParameters(AUDIO_EFFECT_PRESET preset, int param1, int param2)
		{
			string text = AgoraJson.ToJson(new { preset, param1, param2 });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setAudioEffectParameters", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetVoiceBeautifierParameters(VOICE_BEAUTIFIER_PRESET preset, int param1, int param2)
		{
			string text = AgoraJson.ToJson(new { preset, param1, param2 });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setVoiceBeautifierParameters", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetVoiceConversionParameters(VOICE_CONVERSION_PRESET preset, int param1, int param2)
		{
			string text = AgoraJson.ToJson(new { preset, param1, param2 });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setVoiceConversionParameters", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetLocalVoicePitch(double pitch)
		{
			string text = AgoraJson.ToJson(new { pitch });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setLocalVoicePitch", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetLocalVoiceEqualization(AUDIO_EQUALIZATION_BAND_FREQUENCY bandFrequency, int bandGain)
		{
			string text = AgoraJson.ToJson(new { bandFrequency, bandGain });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setLocalVoiceEqualization", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetLocalVoiceReverb(AUDIO_REVERB_TYPE reverbKey, int value)
		{
			string text = AgoraJson.ToJson(new { reverbKey, value });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setLocalVoiceReverb", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetLogFile(string filePath)
		{
			string text = AgoraJson.ToJson(new { filePath });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setLogFile", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetLogFilter(uint filter)
		{
			string text = AgoraJson.ToJson(new { filter });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setLogFilter", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetLogLevel(LOG_LEVEL level)
		{
			string text = AgoraJson.ToJson(new { level });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setLogLevel", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetLogFileSize(uint fileSizeInKBytes)
		{
			string text = AgoraJson.ToJson(new { fileSizeInKBytes });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setLogFileSize", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetLocalRenderMode(RENDER_MODE_TYPE renderMode, VIDEO_MIRROR_MODE_TYPE mirrorMode)
		{
			string text = AgoraJson.ToJson(new { renderMode, mirrorMode });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setLocalRenderMode", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetRemoteRenderMode(uint uid, RENDER_MODE_TYPE renderMode, VIDEO_MIRROR_MODE_TYPE mirrorMode)
		{
			string text = AgoraJson.ToJson(new { uid, renderMode, mirrorMode });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setRemoteRenderMode", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetLocalRenderMode(RENDER_MODE_TYPE renderMode)
		{
			string text = AgoraJson.ToJson(new { renderMode });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setLocalRenderMode2", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetLocalVideoMirrorMode(VIDEO_MIRROR_MODE_TYPE mirrorMode)
		{
			string text = AgoraJson.ToJson(new { mirrorMode });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setLocalVideoMirrorMode", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int EnableDualStreamMode(bool enabled)
		{
			string text = AgoraJson.ToJson(new { enabled });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_enableDualStreamMode", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int EnableDualStreamMode(VIDEO_SOURCE_TYPE sourceType, bool enabled)
		{
			string text = AgoraJson.ToJson(new { sourceType, enabled });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_enableDualStreamMode2", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int EnableDualStreamMode(VIDEO_SOURCE_TYPE sourceType, bool enabled, SimulcastStreamConfig streamConfig)
		{
			string text = AgoraJson.ToJson(new { sourceType, enabled, streamConfig });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_enableDualStreamMode3", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetExternalAudioSink(bool enabled, int sampleRate, int channels)
		{
			string text = AgoraJson.ToJson(new { enabled, sampleRate, channels });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "MediaEngine_setExternalAudioSink", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StartPrimaryCustomAudioTrack(AudioTrackConfig config)
		{
			string text = AgoraJson.ToJson(new { config });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_startPrimaryCustomAudioTrack", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StopPrimaryCustomAudioTrack()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_stopPrimaryCustomAudioTrack", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StartSecondaryCustomAudioTrack(AudioTrackConfig config)
		{
			string text = AgoraJson.ToJson(new { config });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_startSecondaryCustomAudioTrack", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StopSecondaryCustomAudioTrack()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_stopSecondaryCustomAudioTrack", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetRecordingAudioFrameParameters(int sampleRate, int channel, RAW_AUDIO_FRAME_OP_MODE_TYPE mode, int samplesPerCall)
		{
			string text = AgoraJson.ToJson(new { sampleRate, channel, mode, samplesPerCall });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setRecordingAudioFrameParameters", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetPlaybackAudioFrameParameters(int sampleRate, int channel, RAW_AUDIO_FRAME_OP_MODE_TYPE mode, int samplesPerCall)
		{
			string text = AgoraJson.ToJson(new { sampleRate, channel, mode, samplesPerCall });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setPlaybackAudioFrameParameters", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetMixedAudioFrameParameters(int sampleRate, int channel, int samplesPerCall)
		{
			string text = AgoraJson.ToJson(new { sampleRate, channel, samplesPerCall });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setMixedAudioFrameParameters", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetPlaybackAudioFrameBeforeMixingParameters(int sampleRate, int channel)
		{
			string text = AgoraJson.ToJson(new { sampleRate, channel });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setPlaybackAudioFrameBeforeMixingParameters", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int EnableAudioSpectrumMonitor(int intervalInMS = 100)
		{
			string text = AgoraJson.ToJson(new { intervalInMS });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_enableAudioSpectrumMonitor", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int DisableAudioSpectrumMonitor()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_disableAudioSpectrumMonitor", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		private void SetIrisAudioSpectrumObserver()
		{
			if (!(_irisRtcCAudioSpectrumObserverNative != IntPtr.Zero))
			{
				var param = new { };
				_irisRtcCAudioSpectrumObserver = new IrisMediaPlayerCAudioSpectrumObserver
				{
					OnLocalAudioSpectrum = AudioSpectrumObserverNative.OnLocalAudioSpectrum,
					OnRemoteAudioSpectrum = AudioSpectrumObserverNative.OnRemoteAudioSpectrum
				};
				IrisMediaPlayerCAudioSpectrumObserverNative irisMediaPlayerCAudioSpectrumObserverNative = default(IrisMediaPlayerCAudioSpectrumObserverNative);
				irisMediaPlayerCAudioSpectrumObserverNative.onLocalAudioSpectrum = Marshal.GetFunctionPointerForDelegate(_irisRtcCAudioSpectrumObserver.OnLocalAudioSpectrum);
				irisMediaPlayerCAudioSpectrumObserverNative.onRemoteAudioSpectrum = Marshal.GetFunctionPointerForDelegate(_irisRtcCAudioSpectrumObserver.OnRemoteAudioSpectrum);
				IrisMediaPlayerCAudioSpectrumObserverNative structure = irisMediaPlayerCAudioSpectrumObserverNative;
				_irisRtcCAudioSpectrumObserverHandleNative = Marshal.AllocHGlobal(Marshal.SizeOf(structure));
				Marshal.StructureToPtr(structure, _irisRtcCAudioSpectrumObserverHandleNative, fDeleteOld: true);
				_irisRtcCAudioSpectrumObserverNative = AgoraRtcNative.RegisterRtcAudioSpectrumObserver(_irisRtcEngine, _irisRtcCAudioSpectrumObserverHandleNative, AgoraJson.ToJson(param));
			}
		}

		private void UnSetIrisAudioSpectrumObserver()
		{
			if (!(_irisRtcCAudioSpectrumObserverNative == IntPtr.Zero))
			{
				var param = new { };
				AgoraRtcNative.UnRegisterRtcAudioSpectrumObserver(_irisRtcEngine, _irisRtcCAudioSpectrumObserverNative, AgoraJson.ToJson(param));
				_irisRtcCAudioSpectrumObserverNative = IntPtr.Zero;
				_irisRtcCAudioSpectrumObserver = default(IrisMediaPlayerCAudioSpectrumObserver);
				Marshal.FreeHGlobal(_irisRtcCAudioSpectrumObserverHandleNative);
			}
		}

		public void RegisterAudioSpectrumObserver(IAudioSpectrumObserver observer)
		{
			SetIrisAudioSpectrumObserver();
			AudioSpectrumObserverNative.AgoraRtcAudioSpectrumObserver = observer;
		}

		public void UnregisterAudioSpectrumObserver()
		{
			AudioSpectrumObserverNative.AgoraRtcAudioSpectrumObserver = null;
			UnSetIrisAudioSpectrumObserver();
		}

		public int AdjustRecordingSignalVolume(int volume)
		{
			string text = AgoraJson.ToJson(new { volume });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_adjustRecordingSignalVolume", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int MuteRecordingSignal(bool mute)
		{
			string text = AgoraJson.ToJson(new { mute });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_muteRecordingSignal", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int AdjustPlaybackSignalVolume(int volume)
		{
			string text = AgoraJson.ToJson(new { volume });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_adjustPlaybackSignalVolume", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int AdjustUserPlaybackSignalVolume(uint uid, int volume)
		{
			string text = AgoraJson.ToJson(new { uid, volume });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_adjustUserPlaybackSignalVolume", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int EnableLoopbackRecording(bool enabled, string deviceName = "")
		{
			string text = AgoraJson.ToJson(new { enabled, deviceName });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_enableLoopbackRecording", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int GetLoopbackRecordingVolume()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_getLoopbackRecordingVolume", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int EnableInEarMonitoring(bool enabled, int includeAudioFilters)
		{
			string text = AgoraJson.ToJson(new { enabled, includeAudioFilters });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_enableInEarMonitoring", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetInEarMonitoringVolume(int volume)
		{
			string text = AgoraJson.ToJson(new { volume });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setInEarMonitoringVolume", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int LoadExtensionProvider(string path, bool unload_after_use = false)
		{
			string text = AgoraJson.ToJson(new { path, unload_after_use });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_loadExtensionProvider", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetExtensionProviderProperty(string provider, string key, string value)
		{
			string text = AgoraJson.ToJson(new { provider, key, value });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setExtensionProviderProperty", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int EnableExtension(string provider, string extension, bool enable = true, MEDIA_SOURCE_TYPE type = MEDIA_SOURCE_TYPE.UNKNOWN_MEDIA_SOURCE)
		{
			string text = AgoraJson.ToJson(new { provider, extension, enable, type });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_enableExtension", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetExtensionProperty(string provider, string extension, string key, string value, MEDIA_SOURCE_TYPE type = MEDIA_SOURCE_TYPE.UNKNOWN_MEDIA_SOURCE)
		{
			string text = AgoraJson.ToJson(new { provider, extension, key, value, type });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setExtensionProperty", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int GetExtensionProperty(string provider, string extension, string key, ref string value, int buf_len, MEDIA_SOURCE_TYPE type = MEDIA_SOURCE_TYPE.UNKNOWN_MEDIA_SOURCE)
		{
			string text = AgoraJson.ToJson(new { provider, extension, key, value, buf_len, type });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_getExtensionProperty", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				value = (string)AgoraJson.GetData<string>(_result.Result, "value");
			}
			else
			{
				value = "";
			}
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetCameraCapturerConfiguration(CameraCapturerConfiguration config)
		{
			string text = AgoraJson.ToJson(new { config });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setCameraCapturerConfiguration", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SwitchCamera()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_switchCamera", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public bool IsCameraZoomSupported()
		{
			string text = AgoraJson.ToJson(new { });
			if (AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_isCameraZoomSupported", text, (uint)text.Length, IntPtr.Zero, 0u, out _result) == 0)
			{
				return (bool)AgoraJson.GetData<bool>(_result.Result, "result");
			}
			return false;
		}

		public bool IsCameraFaceDetectSupported()
		{
			string text = AgoraJson.ToJson(new { });
			if (AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_isCameraFaceDetectSupported", text, (uint)text.Length, IntPtr.Zero, 0u, out _result) == 0)
			{
				return (bool)AgoraJson.GetData<bool>(_result.Result, "result");
			}
			return false;
		}

		public bool IsCameraTorchSupported()
		{
			string text = AgoraJson.ToJson(new { });
			if (AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_isCameraTorchSupported", text, (uint)text.Length, IntPtr.Zero, 0u, out _result) == 0)
			{
				return (bool)AgoraJson.GetData<bool>(_result.Result, "result");
			}
			return false;
		}

		public bool IsCameraFocusSupported()
		{
			string text = AgoraJson.ToJson(new { });
			if (AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_isCameraFocusSupported", text, (uint)text.Length, IntPtr.Zero, 0u, out _result) == 0)
			{
				return (bool)AgoraJson.GetData<bool>(_result.Result, "result");
			}
			return false;
		}

		public bool IsCameraAutoFocusFaceModeSupported()
		{
			string text = AgoraJson.ToJson(new { });
			if (AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_isCameraAutoFocusFaceModeSupported", text, (uint)text.Length, IntPtr.Zero, 0u, out _result) == 0)
			{
				return (bool)AgoraJson.GetData<bool>(_result.Result, "result");
			}
			return false;
		}

		public int SetCameraZoomFactor(float factor)
		{
			string text = AgoraJson.ToJson(new { factor });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setCameraZoomFactor", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int EnableFaceDetection(bool enabled)
		{
			string text = AgoraJson.ToJson(new { enabled });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_enableFaceDetection", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public float GetCameraMaxZoomFactor()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_getCameraMaxZoomFactor", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (float)(double)AgoraJson.GetData<double>(_result.Result, "result");
			}
			return num;
		}

		public int SetCameraFocusPositionInPreview(float positionX, float positionY)
		{
			string text = AgoraJson.ToJson(new { positionX, positionY });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setCameraFocusPositionInPreview", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetCameraTorchOn(bool isOn)
		{
			string text = AgoraJson.ToJson(new { isOn });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setCameraTorchOn", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetCameraAutoFocusFaceModeEnabled(bool enabled)
		{
			string text = AgoraJson.ToJson(new { enabled });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setCameraAutoFocusFaceModeEnabled", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public bool IsCameraExposurePositionSupported()
		{
			string text = AgoraJson.ToJson(new { });
			if (AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_isCameraExposurePositionSupported", text, (uint)text.Length, IntPtr.Zero, 0u, out _result) == 0)
			{
				return (bool)AgoraJson.GetData<bool>(_result.Result, "result");
			}
			return false;
		}

		public int SetCameraExposurePosition(float positionXinView, float positionYinView)
		{
			string text = AgoraJson.ToJson(new { positionXinView, positionYinView });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setCameraExposurePosition", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public bool IsCameraAutoExposureFaceModeSupported()
		{
			string text = AgoraJson.ToJson(new { });
			if (AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_isCameraAutoExposureFaceModeSupported", text, (uint)text.Length, IntPtr.Zero, 0u, out _result) == 0)
			{
				return (bool)AgoraJson.GetData<bool>(_result.Result, "result");
			}
			return false;
		}

		public int SetCameraAutoExposureFaceModeEnabled(bool enabled)
		{
			string text = AgoraJson.ToJson(new { enabled });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setCameraAutoExposureFaceModeEnabled", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetDefaultAudioRouteToSpeakerphone(bool defaultToSpeaker)
		{
			string text = AgoraJson.ToJson(new { defaultToSpeaker });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setDefaultAudioRouteToSpeakerphone", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetEnableSpeakerphone(bool speakerOn)
		{
			string text = AgoraJson.ToJson(new { speakerOn });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setEnableSpeakerphone", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public bool IsSpeakerphoneEnabled()
		{
			string text = AgoraJson.ToJson(new { });
			if (AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_isSpeakerphoneEnabled", text, (uint)text.Length, IntPtr.Zero, 0u, out _result) == 0)
			{
				return (bool)AgoraJson.GetData<bool>(_result.Result, "result");
			}
			return false;
		}

		public int StartScreenCaptureByDisplayId(uint displayId, Rectangle regionRect, ScreenCaptureParameters captureParams)
		{
			string text = AgoraJson.ToJson(new { displayId, regionRect, captureParams });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_startScreenCaptureByDisplayId", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StartScreenCaptureByScreenRect(Rectangle screenRect, Rectangle regionRect, ScreenCaptureParameters captureParams)
		{
			string text = AgoraJson.ToJson(new { screenRect, regionRect, captureParams });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_startScreenCaptureByScreenRect", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StartScreenCaptureByWindowId(ulong windowId, Rectangle regionRect, ScreenCaptureParameters captureParams)
		{
			string text = AgoraJson.ToJson(new { windowId, regionRect, captureParams });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_startScreenCaptureByWindowId", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetScreenCaptureContentHint(VIDEO_CONTENT_HINT contentHint)
		{
			string text = AgoraJson.ToJson(new { contentHint });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setScreenCaptureContentHint", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int UpdateScreenCaptureRegion(Rectangle regionRect)
		{
			string text = AgoraJson.ToJson(new { regionRect });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_updateScreenCaptureRegion", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int UpdateScreenCaptureParameters(ScreenCaptureParameters captureParams)
		{
			string text = AgoraJson.ToJson(new { captureParams });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_updateScreenCaptureParameters", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StopScreenCapture()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_stopScreenCapture", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public string GetCallId()
		{
			string text = AgoraJson.ToJson(new { });
			if (AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_getCallId", text, (uint)text.Length, IntPtr.Zero, 0u, out _result) == 0)
			{
				return (string)AgoraJson.GetData<string>(_result.Result, "result");
			}
			return null;
		}

		public int Rate(string callId, int rating, string description)
		{
			string text = AgoraJson.ToJson(new { callId, rating, description });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_rate", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int Complain(string callId, string description)
		{
			string text = AgoraJson.ToJson(new { callId, description });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_complain", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int AddPublishStreamUrl(string url, bool transcodingEnabled)
		{
			string text = AgoraJson.ToJson(new { url, transcodingEnabled });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_addPublishStreamUrl", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int RemovePublishStreamUrl(string url)
		{
			string text = AgoraJson.ToJson(new { url });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_removePublishStreamUrl", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetLiveTranscoding(LiveTranscoding transcoding)
		{
			string text = AgoraJson.ToJson(new { transcoding });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setLiveTranscoding", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StartLocalVideoTranscoder(LocalTranscoderConfiguration config)
		{
			string text = AgoraJson.ToJson(new { config });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_startLocalVideoTranscoder", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int UpdateLocalTranscoderConfiguration(LocalTranscoderConfiguration config)
		{
			string text = AgoraJson.ToJson(new { config });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_updateLocalTranscoderConfiguration", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StopLocalVideoTranscoder()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_stopLocalVideoTranscoder", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StartPrimaryCameraCapture(CameraCapturerConfiguration config)
		{
			string text = AgoraJson.ToJson(new { config });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_startPrimaryCameraCapture", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StartSecondaryCameraCapture(CameraCapturerConfiguration config)
		{
			string text = AgoraJson.ToJson(new { config });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_startSecondaryCameraCapture", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StopPrimaryCameraCapture()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_stopPrimaryCameraCapture", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StopSecondaryCameraCapture()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_stopSecondaryCameraCapture", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetCameraDeviceOrientation(VIDEO_SOURCE_TYPE type, VIDEO_ORIENTATION orientation)
		{
			string text = AgoraJson.ToJson(new { type, orientation });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setCameraDeviceOrientation", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetScreenCaptureOrientation(VIDEO_SOURCE_TYPE type, VIDEO_ORIENTATION orientation)
		{
			string text = AgoraJson.ToJson(new { type, orientation });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setScreenCaptureOrientation", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StartPrimaryScreenCapture(ScreenCaptureConfiguration config)
		{
			string text = AgoraJson.ToJson(new { config });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_startPrimaryScreenCapture", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StartSecondaryScreenCapture(ScreenCaptureConfiguration config)
		{
			string text = AgoraJson.ToJson(new { config });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_startSecondaryScreenCapture", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StopPrimaryScreenCapture()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_stopPrimaryScreenCapture", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StopSecondaryScreenCapture()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_stopSecondaryScreenCapture", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public CONNECTION_STATE_TYPE GetConnectionState()
		{
			string text = AgoraJson.ToJson(new { });
			AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_getConnectionState", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			return (CONNECTION_STATE_TYPE)AgoraJson.GetData<int>(_result.Result, "result");
		}

		public int SetRemoteUserPriority(uint uid, PRIORITY_TYPE userPriority)
		{
			string text = AgoraJson.ToJson(new { uid, userPriority });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setRemoteUserPriority", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetEncryptionMode(string encryptionMode)
		{
			string text = AgoraJson.ToJson(new { encryptionMode });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setEncryptionMode", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetEncryptionSecret(string secret)
		{
			string text = AgoraJson.ToJson(new { secret });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setEncryptionSecret", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int EnableEncryption(bool enabled, EncryptionConfig config)
		{
			string text = AgoraJson.ToJson(new { enabled, config });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_enableEncryption", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int CreateDataStream(ref int streamId, bool reliable, bool ordered)
		{
			string text = AgoraJson.ToJson(new { reliable, ordered });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_createDataStream", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				streamId = (int)AgoraJson.GetData<int>(_result.Result, "streamId");
			}
			else
			{
				streamId = 0;
			}
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int CreateDataStream(ref int streamId, DataStreamConfig config)
		{
			string text = AgoraJson.ToJson(new { config });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_createDataStream2", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				streamId = (int)AgoraJson.GetData<int>(_result.Result, "streamId");
			}
			else
			{
				streamId = 0;
			}
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int AddVideoWatermark(RtcImage watermark)
		{
			string text = AgoraJson.ToJson(new { watermark });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_addVideoWatermark", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int AddVideoWatermark(string watermarkUrl, WatermarkOptions options)
		{
			string text = AgoraJson.ToJson(new { watermarkUrl, options });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_addVideoWatermark2", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int ClearVideoWatermark()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_clearVideoWatermark", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int ClearVideoWatermarks()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_clearVideoWatermarks", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int AddInjectStreamUrl(string url, InjectStreamConfig config)
		{
			string text = AgoraJson.ToJson(new { url, config });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_addInjectStreamUrl", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int RemoveInjectStreamUrl(string url)
		{
			string text = AgoraJson.ToJson(new { url });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_removeInjectStreamUrl", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int PauseAudio()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_pauseAudio", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int ResumeAudio()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_resumeAudio", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int EnableWebSdkInteroperability(bool enabled)
		{
			string text = AgoraJson.ToJson(new { enabled });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_enableWebSdkInteroperability", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SendCustomReportMessage(string id, string category, string @event, string label, int value)
		{
			string text = AgoraJson.ToJson(new { id, category, @event, label, value });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_sendCustomReportMessage", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public void RegisterMediaMetadataObserver(IMetadataObserver observer, METADATA_TYPE type)
		{
			SetIrisMetaDataObserver(type);
			MetadataObserverNative.Observer = observer;
		}

		public void UnregisterMediaMetadataObserver()
		{
			UnSetIrisMetaDataObserver();
		}

		public int StartAudioFrameDump(string channel_id, uint user_id, string location, string uuid, string passwd, long duration_ms, bool auto_upload)
		{
			string text = AgoraJson.ToJson(new { channel_id, user_id, location, uuid, passwd, duration_ms, auto_upload });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_startAudioFrameDump", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StopAudioFrameDump(string channel_id, uint user_id, string location)
		{
			string text = AgoraJson.ToJson(new { channel_id, user_id, location });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_stopAudioFrameDump", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int RegisterLocalUserAccount(string appId, string userAccount)
		{
			string text = AgoraJson.ToJson(new { appId, userAccount });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_registerLocalUserAccount", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int JoinChannelWithUserAccount(string token, string channelId, string userAccount)
		{
			string text = AgoraJson.ToJson(new { token, channelId, userAccount });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_joinChannelWithUserAccount", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int JoinChannelWithUserAccount(string token, string channelId, string userAccount, ChannelMediaOptions options)
		{
			string text = AgoraJson.ToJson(new { token, channelId, userAccount, options });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_joinChannelWithUserAccount2", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int JoinChannelWithUserAccountEx(string token, string channelId, string userAccount, ChannelMediaOptions options)
		{
			string text = AgoraJson.ToJson(new { token, channelId, userAccount, options });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_joinChannelWithUserAccountEx", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int GetUserInfoByUserAccount(string userAccount, ref UserInfo userInfo)
		{
			string text = AgoraJson.ToJson(new { userAccount });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_getUserInfoByUserAccount", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				userInfo = AgoraJson.JsonToStruct<UserInfo>(_result.Result, "userInfo");
			}
			else
			{
				userInfo = new UserInfo();
			}
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int GetUserInfoByUid(uint uid, ref UserInfo userInfo)
		{
			string text = AgoraJson.ToJson(new { uid });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_getUserInfoByUid", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				userInfo = AgoraJson.JsonToStruct<UserInfo>(_result.Result, "userInfo");
			}
			else
			{
				userInfo = new UserInfo();
			}
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StartChannelMediaRelay(ChannelMediaRelayConfiguration configuration)
		{
			string text = AgoraJson.ToJson(new { configuration });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_startChannelMediaRelay", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int UpdateChannelMediaRelay(ChannelMediaRelayConfiguration configuration)
		{
			string text = AgoraJson.ToJson(new { configuration });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_updateChannelMediaRelay", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StopChannelMediaRelay()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_stopChannelMediaRelay", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetDirectCdnStreamingAudioConfiguration(AUDIO_PROFILE_TYPE profile)
		{
			string text = AgoraJson.ToJson(new { profile });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setDirectCdnStreamingAudioConfiguration", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetDirectCdnStreamingVideoConfiguration(VideoEncoderConfiguration config)
		{
			string text = AgoraJson.ToJson(new { config });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setDirectCdnStreamingVideoConfiguration", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StartDirectCdnStreaming(string publishUrl, DirectCdnStreamingMediaOptions options)
		{
			string text = AgoraJson.ToJson(new { publishUrl, options });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_startDirectCdnStreaming", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StopDirectCdnStreaming()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_stopDirectCdnStreaming", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int UpdateDirectCdnStreamingMediaOptions(DirectCdnStreamingMediaOptions options)
		{
			string text = AgoraJson.ToJson(new { options });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_updateDirectCdnStreamingMediaOptions", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int JoinChannelEx(string token, RtcConnection connection, ChannelMediaOptions options)
		{
			string text = AgoraJson.ToJson(new { token, connection, options });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngineEx_joinChannelEx", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int LeaveChannelEx(RtcConnection connection)
		{
			string text = AgoraJson.ToJson(new { connection });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngineEx_leaveChannelEx", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int UpdateChannelMediaOptionsEx(ChannelMediaOptions options, RtcConnection connection)
		{
			string text = AgoraJson.ToJson(new { options, connection });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngineEx_updateChannelMediaOptionsEx", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetVideoEncoderConfigurationEx(VideoEncoderConfiguration config, RtcConnection connection)
		{
			string text = AgoraJson.ToJson(new { config, connection });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngineEx_setVideoEncoderConfigurationEx", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int MuteRemoteAudioStreamEx(uint uid, bool mute, RtcConnection connection)
		{
			string text = AgoraJson.ToJson(new { uid, mute, connection });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngineEx_muteRemoteAudioStreamEx", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int MuteRemoteVideoStreamEx(uint uid, bool mute, RtcConnection connection)
		{
			string text = AgoraJson.ToJson(new { uid, mute, connection });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngineEx_muteRemoteVideoStreamEx", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetRemoteVoicePositionEx(uint uid, double pan, double gain, RtcConnection connection)
		{
			string text = AgoraJson.ToJson(new { uid, pan, gain, connection });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngineEx_setRemoteVoicePositionEx", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetRemoteUserSpatialAudioParamsEx(uint uid, SpatialAudioParams param, RtcConnection connection)
		{
			string text = AgoraJson.ToJson(new { uid, param, connection });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngineEx_setRemoteUserSpatialAudioParamsEx", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetRemoteRenderModeEx(uint uid, RENDER_MODE_TYPE renderMode, VIDEO_MIRROR_MODE_TYPE mirrorMode, RtcConnection connection)
		{
			string text = AgoraJson.ToJson(new { uid, renderMode, mirrorMode, connection });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngineEx_setRemoteRenderModeEx", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int EnableLoopbackRecordingEx(bool enabled, RtcConnection connection)
		{
			string text = AgoraJson.ToJson(new { enabled, connection });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngineEx_enableLoopbackRecordingEx", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public CONNECTION_STATE_TYPE GetConnectionStateEx(RtcConnection connection)
		{
			string text = AgoraJson.ToJson(new { connection });
			AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngineEx_getConnectionStateEx", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			return (CONNECTION_STATE_TYPE)AgoraJson.GetData<int>(_result.Result, "result");
		}

		public int EnableEncryptionEx(RtcConnection connection, bool enabled, EncryptionConfig config)
		{
			string text = AgoraJson.ToJson(new { connection, enabled, config });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngineEx_enableEncryptionEx", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int CreateDataStreamEx(ref int streamId, bool reliable, bool ordered, RtcConnection connection)
		{
			string text = AgoraJson.ToJson(new { reliable, ordered, connection });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngineEx_createDataStreamEx", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				streamId = (int)AgoraJson.GetData<int>(_result.Result, "streamId");
			}
			else
			{
				streamId = 0;
			}
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int CreateDataStreamEx(ref int streamId, DataStreamConfig config, RtcConnection connection)
		{
			string text = AgoraJson.ToJson(new { config, connection });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngineEx_createDataStreamEx2", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				streamId = (int)AgoraJson.GetData<int>(_result.Result, "streamId");
			}
			else
			{
				streamId = 0;
			}
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int AddVideoWatermarkEx(string watermarkUrl, WatermarkOptions options, RtcConnection connection)
		{
			string text = AgoraJson.ToJson(new { watermarkUrl, options, connection });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngineEx_addVideoWatermarkEx", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int ClearVideoWatermarkEx(RtcConnection connection)
		{
			string text = AgoraJson.ToJson(new { connection });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngineEx_clearVideoWatermarkEx", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SendCustomReportMessageEx(string id, string category, string @event, string label, int value, RtcConnection connection)
		{
			string text = AgoraJson.ToJson(new { id, category, @event, label, value, connection });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngineEx_sendCustomReportMessageEx", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		private int SetAppType(AppType appType)
		{
			string text = AgoraJson.ToJson(new { appType });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setAppType", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetExternalVideoSource(bool enabled, bool useTexture, EXTERNAL_VIDEO_SOURCE_TYPE sourceType, SenderOptions encodedVideoOption)
		{
			string text = AgoraJson.ToJson(new { enabled, useTexture, sourceType, encodedVideoOption });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "MediaEngine_setExternalVideoSource", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetExternalAudioSource(bool enabled, int sampleRate, int channels, int sourceNumber, bool localPlayback = false, bool publish = true)
		{
			string text = AgoraJson.ToJson(new { enabled, sampleRate, channels, sourceNumber, localPlayback, publish });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "MediaEngine_setExternalAudioSource", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetAudioSessionOperationRestriction(AUDIO_SESSION_OPERATION_RESTRICTION restriction)
		{
			string text = AgoraJson.ToJson(new { restriction });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setAudioSessionOperationRestriction", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int AdjustCustomAudioPublishVolume(int sourceId, int volume)
		{
			string text = AgoraJson.ToJson(new { sourceId, volume });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_adjustCustomAudioPublishVolume", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int AdjustCustomAudioPlayoutVolume(int sourceId, int volume)
		{
			string text = AgoraJson.ToJson(new { sourceId, volume });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_adjustCustomAudioPlayoutVolume", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetParameters(string parameters)
		{
			string text = AgoraJson.ToJson(new { parameters });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setParameters", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int GetAudioDeviceInfo(ref DeviceInfo deviceInfo)
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_getAudioDeviceInfo", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				deviceInfo = AgoraJson.JsonToStruct<DeviceInfo>(_result.Result, "deviceInfo");
			}
			else
			{
				deviceInfo = new DeviceInfo();
			}
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int EnableCustomAudioLocalPlayback(int sourceId, bool enabled)
		{
			string text = AgoraJson.ToJson(new { sourceId, enabled });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_enableCustomAudioLocalPlayback", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int EnableVirtualBackground(bool enabled, VirtualBackgroundSource backgroundSource, SegmentationProperty segproperty, MEDIA_SOURCE_TYPE type)
		{
			string text = AgoraJson.ToJson(new { enabled, backgroundSource, segproperty, type });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_enableVirtualBackground", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetLocalPublishFallbackOption(STREAM_FALLBACK_OPTIONS option)
		{
			string text = AgoraJson.ToJson(new { option });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setLocalPublishFallbackOption", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetRemoteSubscribeFallbackOption(STREAM_FALLBACK_OPTIONS option)
		{
			string text = AgoraJson.ToJson(new { option });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setRemoteSubscribeFallbackOption", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int PauseAllChannelMediaRelay()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_pauseAllChannelMediaRelay", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int ResumeAllChannelMediaRelay()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_resumeAllChannelMediaRelay", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int EnableEchoCancellationExternal(bool enabled, int audioSourceDelay)
		{
			string text = AgoraJson.ToJson(new { enabled, audioSourceDelay });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_enableEchoCancellationExternal", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StartRhythmPlayer(string sound1, string sound2, AgoraRhythmPlayerConfig config)
		{
			string text = AgoraJson.ToJson(new { sound1, sound2, config });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_startRhythmPlayer", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StopRhythmPlayer()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_stopRhythmPlayer", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int ConfigRhythmPlayer(AgoraRhythmPlayerConfig config)
		{
			string text = AgoraJson.ToJson(new { config });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_configRhythmPlayer", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetRemoteUserSpatialAudioParams(uint uid, SpatialAudioParams param)
		{
			_ = new { uid, param };
			string text = AgoraJson.ToJson(param);
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setRemoteUserSpatialAudioParams", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetDirectExternalAudioSource(bool enable, bool localPlayback)
		{
			string text = AgoraJson.ToJson(new { enable, localPlayback });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "MediaEngine_setDirectExternalAudioSource", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetCloudProxy(CLOUD_PROXY_TYPE proxyType)
		{
			string text = AgoraJson.ToJson(new { proxyType });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setCloudProxy", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetLocalAccessPoint(LocalAccessPointConfiguration config)
		{
			string text = AgoraJson.ToJson(new { config });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setLocalAccessPoint", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetAdvancedAudioOptions(AdvancedAudioOptions options)
		{
			string text = AgoraJson.ToJson(new { options });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setAdvancedAudioOptions", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetAVSyncSource(string channelId, uint uid)
		{
			string text = AgoraJson.ToJson(new { channelId, uid });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setAVSyncSource", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StartRtmpStreamWithoutTranscoding(string url)
		{
			string text = AgoraJson.ToJson(new { url });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_startRtmpStreamWithoutTranscoding", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StartRtmpStreamWithTranscoding(string url, LiveTranscoding transcoding)
		{
			string text = AgoraJson.ToJson(new { url, transcoding });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_startRtmpStreamWithTranscoding", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int UpdateRtmpTranscoding(LiveTranscoding transcoding)
		{
			string text = AgoraJson.ToJson(new { transcoding });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_updateRtmpTranscoding", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StopRtmpStream(string url)
		{
			string text = AgoraJson.ToJson(new { url });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_stopRtmpStream", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int GetUserInfoByUserAccountEx(string userAccount, ref UserInfo userInfo, RtcConnection connection)
		{
			string text = AgoraJson.ToJson(new { userAccount, connection });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngineEx_getUserInfoByUserAccountEx", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				userInfo = AgoraJson.JsonToStruct<UserInfo>(_result.Result, "userInfo");
			}
			else
			{
				userInfo = new UserInfo();
			}
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int GetUserInfoByUidEx(uint uid, ref UserInfo userInfo, RtcConnection connection)
		{
			string text = AgoraJson.ToJson(new { uid, connection });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngineEx_getUserInfoByUidEx", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				userInfo = AgoraJson.JsonToStruct<UserInfo>(_result.Result, "userInfo");
			}
			else
			{
				userInfo = new UserInfo();
			}
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int EnableRemoteSuperResolution(uint userId, bool enable)
		{
			string text = AgoraJson.ToJson(new { userId, enable });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_enableRemoteSuperResolution", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetRemoteVideoStreamTypeEx(uint uid, VIDEO_STREAM_TYPE streamType, RtcConnection connection)
		{
			string text = AgoraJson.ToJson(new { uid, streamType, connection });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngineEx_setRemoteVideoStreamTypeEx", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int EnableAudioVolumeIndicationEx(int interval, int smooth, bool reportVad, RtcConnection connection)
		{
			string text = AgoraJson.ToJson(new { interval, smooth, reportVad, connection });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngineEx_enableAudioVolumeIndicationEx", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetVideoProfileEx(int width, int height, int frameRate, int bitrate)
		{
			string text = AgoraJson.ToJson(new { width, height, frameRate, bitrate });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngineEx_setVideoProfileEx", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int EnableDualStreamModeEx(VIDEO_SOURCE_TYPE sourceType, bool enabled, SimulcastStreamConfig streamConfig, RtcConnection connection)
		{
			string text = AgoraJson.ToJson(new { sourceType, enabled, streamConfig, connection });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngineEx_enableDualStreamModeEx", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int AddPublishStreamUrlEx(string url, bool transcodingEnabled, RtcConnection connection)
		{
			string text = AgoraJson.ToJson(new { url, transcodingEnabled, connection });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngineEx_addPublishStreamUrlEx", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int UploadLogFile(ref string requestId)
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_uploadLogFile", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				requestId = (string)AgoraJson.GetData<string>(_result.Result, "requestId");
			}
			else
			{
				requestId = "";
			}
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public ScreenCaptureSourceInfo[] GetScreenCaptureSources(SIZE thumbSize, SIZE iconSize, bool includeScreen)
		{
			string text = AgoraJson.ToJson(new { thumbSize, iconSize, includeScreen });
			ScreenCaptureSourceInfoInternal[] array = ((AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_getScreenCaptureSources", text, (uint)text.Length, IntPtr.Zero, 0u, out _result) != 0) ? new ScreenCaptureSourceInfoInternal[0] : AgoraJson.JsonToStructArray<ScreenCaptureSourceInfoInternal>(_result.Result, "result"));
			ScreenCaptureSourceInfo[] array2 = new ScreenCaptureSourceInfo[array.Length];
			for (int i = 0; i < array.Length; i++)
			{
				ScreenCaptureSourceInfo screenCaptureSourceInfo = new ScreenCaptureSourceInfo();
				screenCaptureSourceInfo.type = array[i].type;
				screenCaptureSourceInfo.isOccluded = array[i].isOccluded;
				screenCaptureSourceInfo.primaryMonitor = array[i].primaryMonitor;
				screenCaptureSourceInfo.processPath = array[i].processPath;
				screenCaptureSourceInfo.sourceId = array[i].sourceId;
				screenCaptureSourceInfo.sourceName = array[i].sourceName;
				screenCaptureSourceInfo.sourceTitle = array[i].sourceTitle;
				ThumbImageBuffer thumbImageBuffer = new ThumbImageBuffer();
				thumbImageBuffer.height = array[i].thumbImage.height;
				thumbImageBuffer.width = array[i].thumbImage.width;
				thumbImageBuffer.length = array[i].thumbImage.length;
				byte[] array3 = new byte[thumbImageBuffer.length];
				if (thumbImageBuffer.length != 0)
				{
					Marshal.Copy((IntPtr)array[i].thumbImage.buffer, array3, 0, (int)thumbImageBuffer.length);
				}
				thumbImageBuffer.buffer = array3;
				screenCaptureSourceInfo.thumbImage = thumbImageBuffer;
				ThumbImageBuffer thumbImageBuffer2 = new ThumbImageBuffer();
				thumbImageBuffer2.height = array[i].iconImage.height;
				thumbImageBuffer2.width = array[i].iconImage.width;
				thumbImageBuffer2.length = array[i].iconImage.length;
				byte[] array4 = new byte[thumbImageBuffer2.length];
				if (thumbImageBuffer2.length != 0)
				{
					Marshal.Copy((IntPtr)array[i].iconImage.buffer, array4, 0, (int)thumbImageBuffer2.length);
				}
				thumbImageBuffer2.buffer = array4;
				screenCaptureSourceInfo.iconImage = thumbImageBuffer2;
				array2[i] = screenCaptureSourceInfo;
			}
			ReleaseScreenCaptureSources();
			return array2;
		}

		public int AdjustLoopbackSignalVolume(int volume)
		{
			string text = AgoraJson.ToJson(new { volume });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_adjustLoopbackSignalVolume", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public uint CreateCustomEncodedVideoTrack(SenderOptions sender_option)
		{
			string text = AgoraJson.ToJson(new { sender_option });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_createCustomEncodedVideoTrack", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num != 0)
			{
				AgoraLog.LogWarning("CreateCustomEncodedVideoTrack: IrisError:" + num);
			}
			if (num == 0)
			{
				return (uint)AgoraJson.GetData<uint>(_result.Result, "result");
			}
			return 0u;
		}

		public uint CreateCustomVideoTrack()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_createCustomVideoTrack", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num != 0)
			{
				AgoraLog.LogWarning("createCustomVideoTrack: IrisError:" + num);
			}
			if (num == 0)
			{
				return (uint)AgoraJson.GetData<uint>(_result.Result, "result");
			}
			return 0u;
		}

		public int DestroyCustomEncodedVideoTrack(uint video_track_id)
		{
			string text = AgoraJson.ToJson(new { video_track_id });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_destroyCustomEncodedVideoTrack", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int DestroyCustomVideoTrack(uint video_track_id)
		{
			string text = AgoraJson.ToJson(new { video_track_id });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_destroyCustomVideoTrack", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int EnableContentInspect(bool enabled, ContentInspectConfig config)
		{
			string text = AgoraJson.ToJson(new { enabled, config });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_enableContentInspect", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int EnableVideoImageSource(bool enable, ImageTrackOptions options)
		{
			string text = AgoraJson.ToJson(new { enable, options });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_enableVideoImageSource", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int EnableWirelessAccelerate(bool enabled)
		{
			string text = AgoraJson.ToJson(new { enabled });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_enableWirelessAccelerate", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int GetAudioTrackCount()
		{
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_getAudioTrackCount", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SelectAudioTrack(int index)
		{
			string text = AgoraJson.ToJson(new { index });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_selectAudioTrack", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetAudioMixingDualMonoMode(AUDIO_MIXING_DUAL_MONO_MODE mode)
		{
			string text = AgoraJson.ToJson(new { mode });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setAudioMixingDualMonoMode", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetAudioScenario(AUDIO_SCENARIO_TYPE scenario)
		{
			string text = AgoraJson.ToJson(new { scenario });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setAudioScenario", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetColorEnhanceOptions(bool enabled, ColorEnhanceOptions options, MEDIA_SOURCE_TYPE type)
		{
			string text = AgoraJson.ToJson(new { enabled, options, type });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setColorEnhanceOptions", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetLowlightEnhanceOptions(bool enabled, LowlightEnhanceOptions options, MEDIA_SOURCE_TYPE type)
		{
			string text = AgoraJson.ToJson(new { enabled, options, type });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setLowlightEnhanceOptions", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetRemoteVideoSubscriptionOptions(uint uid, VideoSubscriptionOptions options)
		{
			string text = AgoraJson.ToJson(new { uid, options });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setRemoteVideoSubscriptionOptions", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetScreenCaptureScenario(SCREEN_SCENARIO_TYPE screenScenario)
		{
			string text = AgoraJson.ToJson(new { screenScenario });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setScreenCaptureScenario", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetSubscribeAudioBlacklist(uint[] uidList, int uidNumber)
		{
			string text = AgoraJson.ToJson(new { uidList, uidNumber });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setSubscribeAudioBlacklist", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetSubscribeAudioWhitelist(uint[] uidList, int uidNumber)
		{
			string text = AgoraJson.ToJson(new { uidList, uidNumber });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setSubscribeAudioWhitelist", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetSubscribeVideoBlacklist(uint[] uidList, int uidNumber)
		{
			string text = AgoraJson.ToJson(new { uidList, uidNumber });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setSubscribeVideoBlacklist", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetSubscribeVideoWhitelist(uint[] uidList, int uidNumber)
		{
			string text = AgoraJson.ToJson(new { uidList, uidNumber });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setSubscribeVideoWhitelist", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetVideoDenoiserOptions(bool enabled, VideoDenoiserOptions options, MEDIA_SOURCE_TYPE type)
		{
			string text = AgoraJson.ToJson(new { enabled, options, type });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setVideoDenoiserOptions", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StartScreenCapture(ScreenCaptureParameters2 captureParams)
		{
			string text = AgoraJson.ToJson(new { captureParams });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_startScreenCapture", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int UpdateScreenCapture(ScreenCaptureParameters2 captureParams)
		{
			string text = AgoraJson.ToJson(new { captureParams });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_updateScreenCapture", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int TakeSnapshot(uint uid, string filePath)
		{
			string text = AgoraJson.ToJson(new { uid, filePath });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_takeSnapshot", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetRemoteVideoSubscriptionOptionsEx(uint uid, VideoSubscriptionOptions options, RtcConnection connection)
		{
			string text = AgoraJson.ToJson(new { uid, options, connection });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngineEx_setRemoteVideoSubscriptionOptionsEx", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetSubscribeAudioBlacklistEx(uint[] uidList, int uidNumber, RtcConnection connection)
		{
			string text = AgoraJson.ToJson(new { uidList, uidNumber, connection });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngineEx_setSubscribeAudioBlacklistEx", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetSubscribeAudioWhitelistEx(uint[] uidList, int uidNumber, RtcConnection connection)
		{
			string text = AgoraJson.ToJson(new { uidList, uidNumber, connection });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngineEx_setSubscribeAudioWhitelistEx", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetSubscribeVideoBlacklistEx(uint[] uidList, int uidNumber, RtcConnection connection)
		{
			string text = AgoraJson.ToJson(new { uidList, uidNumber, connection });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngineEx_setSubscribeVideoBlacklistEx", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetSubscribeVideoWhitelistEx(uint[] uidList, int uidNumber, RtcConnection connection)
		{
			string text = AgoraJson.ToJson(new { uidList, uidNumber, connection });
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngineEx_setSubscribeVideoWhitelistEx", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetupRemoteVideo(VideoCanvas canvas)
		{
			string text = AgoraJson.ToJson(new
			{
				canvas = new { canvas.view, canvas.renderMode, canvas.uid, canvas.mirrorMode, canvas.isScreenView, canvas.priv_size, canvas.sourceType }
			});
			IntPtr intPtr = Marshal.UnsafeAddrOfPinnedArrayElement(canvas.priv, 0);
			IntPtr[] arr = new IntPtr[1] { intPtr };
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setupRemoteVideo", text, (uint)text.Length, Marshal.UnsafeAddrOfPinnedArrayElement(arr, 0), 1u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetupLocalVideo(VideoCanvas canvas)
		{
			string text = AgoraJson.ToJson(new
			{
				canvas = new { canvas.view, canvas.renderMode, canvas.uid, canvas.mirrorMode, canvas.isScreenView, canvas.priv_size, canvas.sourceType }
			});
			IntPtr intPtr = Marshal.UnsafeAddrOfPinnedArrayElement(canvas.priv, 0);
			IntPtr[] arr = new IntPtr[1] { intPtr };
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_setupLocalVideo", text, (uint)text.Length, Marshal.UnsafeAddrOfPinnedArrayElement(arr, 0), 1u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StartScreenCapture(byte[] mediaProjectionPermissionResultData, ScreenCaptureParameters captureParams)
		{
			string text = AgoraJson.ToJson(new { captureParams });
			IntPtr intPtr = Marshal.UnsafeAddrOfPinnedArrayElement(mediaProjectionPermissionResultData, 0);
			IntPtr[] arr = new IntPtr[1] { intPtr };
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_startScreenCapture", text, (uint)text.Length, Marshal.UnsafeAddrOfPinnedArrayElement(arr, 0), 1u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SendStreamMessage(int streamId, byte[] data, uint length)
		{
			string text = AgoraJson.ToJson(new { streamId, length });
			IntPtr intPtr = Marshal.UnsafeAddrOfPinnedArrayElement(data, 0);
			IntPtr[] arr = new IntPtr[1] { intPtr };
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_sendStreamMessage", text, (uint)text.Length, Marshal.UnsafeAddrOfPinnedArrayElement(arr, 0), 1u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SendStreamMessageEx(int streamId, byte[] data, uint length, RtcConnection connection)
		{
			string text = AgoraJson.ToJson(new { streamId, length, connection });
			IntPtr intPtr = Marshal.UnsafeAddrOfPinnedArrayElement(data, 0);
			IntPtr[] arr = new IntPtr[1] { intPtr };
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngineEx_sendStreamMessageEx", text, (uint)text.Length, Marshal.UnsafeAddrOfPinnedArrayElement(arr, 0), 1u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetupRemoteVideoEx(VideoCanvas canvas, RtcConnection connection)
		{
			string text = AgoraJson.ToJson(new
			{
				canvas = new { canvas.view, canvas.renderMode, canvas.uid, canvas.mirrorMode, canvas.isScreenView, canvas.priv_size, canvas.sourceType },
				connection = connection
			});
			IntPtr intPtr = Marshal.UnsafeAddrOfPinnedArrayElement(canvas.priv, 0);
			IntPtr[] arr = new IntPtr[1] { intPtr };
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngineEx_setupRemoteVideoEx", text, (uint)text.Length, Marshal.UnsafeAddrOfPinnedArrayElement(arr, 0), 1u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int PushAudioFrame(MEDIA_SOURCE_TYPE type, AudioFrame frame, bool wrap = false, int sourceId = 0)
		{
			string text = AgoraJson.ToJson(new
			{
				type = type,
				frame = new { frame.type, frame.samplesPerChannel, frame.bytesPerSample, frame.channels, frame.samplesPerSec, frame.renderTimeMs, frame.avsync_type },
				wrap = wrap,
				sourceId = sourceId
			});
			IntPtr intPtr = Marshal.UnsafeAddrOfPinnedArrayElement(frame.RawBuffer, 0);
			IntPtr[] arr = new IntPtr[1] { intPtr };
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "MediaEngine_pushAudioFrame", text, (uint)text.Length, Marshal.UnsafeAddrOfPinnedArrayElement(arr, 0), 1u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int PushVideoFrame(ExternalVideoFrame frame, uint videoTrackId)
		{
			var param = new
			{
				frame = new { frame.type, frame.format, frame.stride, frame.height, frame.cropLeft, frame.cropTop, frame.cropRight, frame.cropBottom, frame.rotation, frame.timestamp },
				videoTrackId = videoTrackId
			};
			IntPtr intPtr = Marshal.UnsafeAddrOfPinnedArrayElement(frame.buffer, 0);
			IntPtr zero = IntPtr.Zero;
			IntPtr zero2 = IntPtr.Zero;
			IntPtr[] arr = new IntPtr[3] { intPtr, zero, zero2 };
			string text = AgoraJson.ToJson(param);
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "MediaEngine_pushVideoFrame", text, (uint)text.Length, Marshal.UnsafeAddrOfPinnedArrayElement(arr, 0), 3u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int PushEncodedVideoImage(byte[] imageBuffer, uint length, EncodedVideoFrameInfo videoEncodedFrameInfo, uint videoTrackId)
		{
			string text = AgoraJson.ToJson(new { length, videoEncodedFrameInfo, videoTrackId });
			IntPtr intPtr = Marshal.UnsafeAddrOfPinnedArrayElement(imageBuffer, 0);
			IntPtr[] arr = new IntPtr[1] { intPtr };
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "MediaEngine_pushEncodedVideoImage", text, (uint)text.Length, Marshal.UnsafeAddrOfPinnedArrayElement(arr, 0), 1u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int PushDirectAudioFrame(AudioFrame frame)
		{
			string text = AgoraJson.ToJson(new
			{
				frame = new { frame.type, frame.samplesPerChannel, frame.bytesPerSample, frame.channels, frame.samplesPerSec, frame.renderTimeMs, frame.avsync_type }
			});
			IntPtr intPtr = Marshal.UnsafeAddrOfPinnedArrayElement(frame.RawBuffer, 0);
			IntPtr[] arr = new IntPtr[1] { intPtr };
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "MediaEngine_pushDirectAudioFrame", text, (uint)text.Length, Marshal.UnsafeAddrOfPinnedArrayElement(arr, 0), 1u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int PullAudioFrame(AudioFrame frame)
		{
			string text = AgoraJson.ToJson(new
			{
				frame = new { frame.type, frame.samplesPerChannel, frame.bytesPerSample, frame.channels, frame.samplesPerSec, frame.buffer, frame.renderTimeMs, frame.avsync_type }
			});
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "MediaEngine_pullAudioFrame", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			AudioFrameWithoutBuffer audioFrameWithoutBuffer = ((_result.Result.Length == 0) ? new AudioFrameWithoutBuffer() : AgoraJson.JsonToStruct<AudioFrameWithoutBuffer>(_result.Result, "frame"));
			frame.avsync_type = audioFrameWithoutBuffer.avsync_type;
			frame.channels = audioFrameWithoutBuffer.channels;
			frame.samplesPerChannel = audioFrameWithoutBuffer.samplesPerChannel;
			frame.type = audioFrameWithoutBuffer.type;
			frame.bytesPerSample = audioFrameWithoutBuffer.bytesPerSample;
			frame.renderTimeMs = audioFrameWithoutBuffer.renderTimeMs;
			frame.samplesPerSec = audioFrameWithoutBuffer.samplesPerSec;
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public bool StartDumpVideo(VIDEO_SOURCE_TYPE type, string dir)
		{
			return AgoraRtcNative.StartDumpVideo(_videoFrameBufferManagerPtr, type, dir);
		}

		public bool StopDumpVideo()
		{
			return AgoraRtcNative.StopDumpVideo(_videoFrameBufferManagerPtr);
		}

		public int ReleaseScreenCaptureSources()
		{
			int num = AgoraRtcNative.CallIrisApi(_irisRtcEngine, "RtcEngine_releaseScreenCaptureSources", "", 0u, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		~RtcEngineImpl()
		{
			Dispose(disposing: false, sync: false);
		}
	}
	public class LocalSpatialAudioEngineImpl
	{
		private IntPtr _irisApiEngine;

		private CharAssistant _result;

		private bool _disposed;

		private bool _initialized;

		private const int UNINITIALIZED = -7;

		internal LocalSpatialAudioEngineImpl(IntPtr irisApiEngine)
		{
			_result = default(CharAssistant);
			_irisApiEngine = irisApiEngine;
		}

		~LocalSpatialAudioEngineImpl()
		{
			Dispose();
		}

		public void Dispose()
		{
			if (!_disposed)
			{
				_disposed = true;
			}
			_irisApiEngine = IntPtr.Zero;
			_result = default(CharAssistant);
			GC.SuppressFinalize(this);
		}

		public int SetMaxAudioRecvCount(int maxCount)
		{
			if (!_initialized)
			{
				return -7;
			}
			string text = AgoraJson.ToJson(new { maxCount });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "LocalSpatialAudioEngine_setMaxAudioRecvCount", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetAudioRecvRange(float range)
		{
			if (!_initialized)
			{
				return -7;
			}
			string text = AgoraJson.ToJson(new { range });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "LocalSpatialAudioEngine_setAudioRecvRange", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetDistanceUnit(float unit)
		{
			if (!_initialized)
			{
				return -7;
			}
			string text = AgoraJson.ToJson(new { unit });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "LocalSpatialAudioEngine_setDistanceUnit", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int UpdateSelfPosition(float[] position, float[] axisForward, float[] axisRight, float[] axisUp)
		{
			if (!_initialized)
			{
				return -7;
			}
			string text = AgoraJson.ToJson(new { position, axisForward, axisRight, axisUp });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "LocalSpatialAudioEngine_updateSelfPosition", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int UpdateSelfPositionEx(float[] position, float[] axisForward, float[] axisRight, float[] axisUp, RtcConnection connection)
		{
			if (!_initialized)
			{
				return -7;
			}
			string text = AgoraJson.ToJson(new { position, axisForward, axisRight, axisUp, connection });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "LocalSpatialAudioEngine_updateSelfPositionEx", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int UpdatePlayerPositionInfo(int playerId, float[] position, float[] forward)
		{
			if (!_initialized)
			{
				return -7;
			}
			RemoteVoicePositionInfo positionInfo = new RemoteVoicePositionInfo(position, forward);
			string text = AgoraJson.ToJson(new { playerId, positionInfo });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "LocalSpatialAudioEngine_updatePlayerPositionInfo", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int SetParameters(string @params)
		{
			if (!_initialized)
			{
				return -7;
			}
			string text = AgoraJson.ToJson(new { @params });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "LocalSpatialAudioEngine_setParameters", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int MuteLocalAudioStream(bool mute)
		{
			if (!_initialized)
			{
				return -7;
			}
			string text = AgoraJson.ToJson(new { mute });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "LocalSpatialAudioEngine_muteLocalAudioStream", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int MuteAllRemoteAudioStreams(bool mute)
		{
			if (!_initialized)
			{
				return -7;
			}
			string text = AgoraJson.ToJson(new { mute });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "LocalSpatialAudioEngine_muteAllRemoteAudioStreams", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int UpdateRemotePosition(uint uid, float[] position, float[] forward)
		{
			if (!_initialized)
			{
				return -7;
			}
			RemoteVoicePositionInfo posInfo = new RemoteVoicePositionInfo(position, forward);
			string text = AgoraJson.ToJson(new { uid, posInfo });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "LocalSpatialAudioEngine_updateRemotePosition", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int UpdateRemotePositionEx(uint uid, float[] position, float[] forward, RtcConnection connection)
		{
			if (!_initialized)
			{
				return -7;
			}
			RemoteVoicePositionInfo posInfo = new RemoteVoicePositionInfo(position, forward);
			string text = AgoraJson.ToJson(new { uid, posInfo, connection });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "LocalSpatialAudioEngine_updateRemotePositionEx", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int RemoveRemotePosition(uint uid)
		{
			if (!_initialized)
			{
				return -7;
			}
			string text = AgoraJson.ToJson(new { uid });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "LocalSpatialAudioEngine_removeRemotePosition", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int RemoveRemotePositionEx(uint uid, RtcConnection connection)
		{
			if (!_initialized)
			{
				return -7;
			}
			string text = AgoraJson.ToJson(new { uid, connection });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "LocalSpatialAudioEngine_removeRemotePositionEx", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int ClearRemotePositions()
		{
			if (!_initialized)
			{
				return -7;
			}
			string text = AgoraJson.ToJson(new { });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "LocalSpatialAudioEngine_clearRemotePositions", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int ClearRemotePositionsEx(RtcConnection connection)
		{
			if (!_initialized)
			{
				return -7;
			}
			string text = AgoraJson.ToJson(new { connection });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "LocalSpatialAudioEngine_clearRemotePositionsEx", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int Initialize()
		{
			AgoraRtcNative.CallIrisApi(_irisApiEngine, "LocalSpatialAudioEngine_initialize", "", 0u, IntPtr.Zero, 0u, out _result);
			int num = (int)AgoraJson.GetData<int>(_result.Result, "result");
			if (num == 0)
			{
				_initialized = true;
			}
			return num;
		}
	}
	internal class VideoDeviceManagerImpl
	{
		private bool _disposed;

		private IntPtr _irisApiEngine;

		private CharAssistant _result;

		internal VideoDeviceManagerImpl(IntPtr irisApiEngine)
		{
			_result = default(CharAssistant);
			_irisApiEngine = irisApiEngine;
		}

		~VideoDeviceManagerImpl()
		{
			Dispose(disposing: false);
		}

		internal void Dispose()
		{
			Dispose(disposing: true);
			GC.SuppressFinalize(this);
		}

		internal void Dispose(bool disposing)
		{
			if (!_disposed)
			{
				_irisApiEngine = IntPtr.Zero;
				_result = default(CharAssistant);
				_disposed = true;
			}
		}

		public DeviceInfo[] EnumerateVideoDevices()
		{
			if (AgoraRtcNative.CallIrisApi(_irisApiEngine, "VideoDeviceManager_enumerateVideoDevices", "", 0u, IntPtr.Zero, 0u, out _result) == 0)
			{
				return AgoraJson.JsonToStructArray<DeviceInfo>(_result.Result, "result");
			}
			return new DeviceInfo[0];
		}

		public int SetDevice(string deviceIdUTF8)
		{
			string text = AgoraJson.ToJson(new { deviceIdUTF8 });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "VideoDeviceManager_setDevice", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int GetDevice(ref string deviceIdUTF8)
		{
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "VideoDeviceManager_getDevice", "", 0u, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				deviceIdUTF8 = (string)AgoraJson.GetData<string>(_result.Result, "deviceIdUTF8");
			}
			else
			{
				deviceIdUTF8 = "";
			}
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StartDeviceTest(IntPtr hwnd)
		{
			string text = AgoraJson.ToJson(new
			{
				hwnd = (ulong)(long)hwnd
			});
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "VideoDeviceManager_startDeviceTest", text, (uint)text.Length, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int StopDeviceTest()
		{
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "VideoDeviceManager_stopDeviceTest", "", 0u, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int GetCapability(string deviceIdUTF8, uint deviceCapabilityNumber, out VideoFormat capability)
		{
			string @params = AgoraJson.ToJson(new { deviceIdUTF8, deviceCapabilityNumber });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "VideoDeviceManager_getCapability", @params, 0u, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				capability = AgoraJson.JsonToStruct<VideoFormat>(_result.Result, "capability");
			}
			else
			{
				capability = new VideoFormat();
			}
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}

		public int NumberOfCapabilities(string deviceIdUTF8)
		{
			string @params = AgoraJson.ToJson(new { deviceIdUTF8 });
			int num = AgoraRtcNative.CallIrisApi(_irisApiEngine, "VideoDeviceManager_numberOfCapabilities", @params, 0u, IntPtr.Zero, 0u, out _result);
			if (num == 0)
			{
				return (int)AgoraJson.GetData<int>(_result.Result, "result");
			}
			return num;
		}
	}
	internal static class AgoraApiType
	{
		internal const string FUNC_KEY_ERROR = "";

		internal const string FUNC_RTCENGINE_SETPARAMETERS = "RtcEngine_setParameters";

		internal const string FUNC_RTCENGINE_SETAPPTYPE = "RtcEngine_setAppType";

		internal const string FUNC_RTCENGINE_RELEASE = "RtcEngine_release";

		internal const string FUNC_RTCENGINE_INITIALIZE = "RtcEngine_initialize";

		internal const string FUNC_RTCENGINE_QUERYINTERFACE = "RtcEngine_queryInterface";

		internal const string FUNC_RTCENGINE_GETVERSION = "RtcEngine_getVersion";

		internal const string FUNC_RTCENGINE_GETERRORDESCRIPTION = "RtcEngine_getErrorDescription";

		internal const string FUNC_RTCENGINE_JOINCHANNEL = "RtcEngine_joinChannel";

		internal const string FUNC_RTCENGINE_JOINCHANNEL2 = "RtcEngine_joinChannel2";

		internal const string FUNC_RTCENGINE_UPDATECHANNELMEDIAOPTIONS = "RtcEngine_updateChannelMediaOptions";

		internal const string FUNC_RTCENGINE_LEAVECHANNEL = "RtcEngine_leaveChannel";

		internal const string FUNC_RTCENGINE_LEAVECHANNEL2 = "RtcEngine_leaveChannel2";

		internal const string FUNC_RTCENGINE_RENEWTOKEN = "RtcEngine_renewToken";

		internal const string FUNC_RTCENGINE_SETCHANNELPROFILE = "RtcEngine_setChannelProfile";

		internal const string FUNC_RTCENGINE_SETCLIENTROLE = "RtcEngine_setClientRole";

		internal const string FUNC_RTCENGINE_SETCLIENTROLE2 = "RtcEngine_setClientRole2";

		internal const string FUNC_RTCENGINE_STARTECHOTEST = "RtcEngine_startEchoTest";

		internal const string FUNC_RTCENGINE_STARTECHOTEST2 = "RtcEngine_startEchoTest2";

		internal const string FUNC_RTCENGINE_STARTECHOTEST3 = "RtcEngine_startEchoTest3";

		internal const string FUNC_RTCENGINE_STOPECHOTEST = "RtcEngine_stopEchoTest";

		internal const string FUNC_RTCENGINE_ENABLEVIDEO = "RtcEngine_enableVideo";

		internal const string FUNC_RTCENGINE_DISABLEVIDEO = "RtcEngine_disableVideo";

		internal const string FUNC_RTCENGINE_STARTPREVIEW = "RtcEngine_startPreview";

		internal const string FUNC_RTCENGINE_STARTPREVIEW2 = "RtcEngine_startPreview2";

		internal const string FUNC_RTCENGINE_STOPPREVIEW = "RtcEngine_stopPreview";

		internal const string FUNC_RTCENGINE_STOPPREVIEW2 = "RtcEngine_stopPreview2";

		internal const string FUNC_RTCENGINE_STARTLASTMILEPROBETEST = "RtcEngine_startLastmileProbeTest";

		internal const string FUNC_RTCENGINE_STOPLASTMILEPROBETEST = "RtcEngine_stopLastmileProbeTest";

		internal const string FUNC_RTCENGINE_SETVIDEOENCODERCONFIGURATION = "RtcEngine_setVideoEncoderConfiguration";

		internal const string FUNC_RTCENGINE_SETBEAUTYEFFECTOPTIONS = "RtcEngine_setBeautyEffectOptions";

		internal const string FUNC_RTCENGINE_ENABLEVIRTUALBACKGROUND = "RtcEngine_enableVirtualBackground";

		internal const string FUNC_RTCENGINE_ENABLEREMOTESUPERRESOLUTION = "RtcEngine_enableRemoteSuperResolution";

		internal const string FUNC_RTCENGINE_SETUPREMOTEVIDEO = "RtcEngine_setupRemoteVideo";

		internal const string FUNC_RTCENGINE_SETUPLOCALVIDEO = "RtcEngine_setupLocalVideo";

		internal const string FUNC_RTCENGINE_ENABLEAUDIO = "RtcEngine_enableAudio";

		internal const string FUNC_RTCENGINE_DISABLEAUDIO = "RtcEngine_disableAudio";

		internal const string FUNC_RTCENGINE_SETAUDIOPROFILE = "RtcEngine_setAudioProfile";

		internal const string FUNC_RTCENGINE_SETAUDIOPROFILE2 = "RtcEngine_setAudioProfile2";

		internal const string FUNC_RTCENGINE_ENABLELOCALAUDIO = "RtcEngine_enableLocalAudio";

		internal const string FUNC_RTCENGINE_MUTELOCALAUDIOSTREAM = "RtcEngine_muteLocalAudioStream";

		internal const string FUNC_RTCENGINE_MUTEALLREMOTEAUDIOSTREAMS = "RtcEngine_muteAllRemoteAudioStreams";

		internal const string FUNC_RTCENGINE_SETDEFAULTMUTEALLREMOTEAUDIOSTREAMS = "RtcEngine_setDefaultMuteAllRemoteAudioStreams";

		internal const string FUNC_RTCENGINE_MUTEREMOTEAUDIOSTREAM = "RtcEngine_muteRemoteAudioStream";

		internal const string FUNC_RTCENGINE_MUTELOCALVIDEOSTREAM = "RtcEngine_muteLocalVideoStream";

		internal const string FUNC_RTCENGINE_ENABLELOCALVIDEO = "RtcEngine_enableLocalVideo";

		internal const string FUNC_RTCENGINE_MUTEALLREMOTEVIDEOSTREAMS = "RtcEngine_muteAllRemoteVideoStreams";

		internal const string FUNC_RTCENGINE_SETDEFAULTMUTEALLREMOTEVIDEOSTREAMS = "RtcEngine_setDefaultMuteAllRemoteVideoStreams";

		internal const string FUNC_RTCENGINE_MUTEREMOTEVIDEOSTREAM = "RtcEngine_muteRemoteVideoStream";

		internal const string FUNC_RTCENGINE_SETREMOTEVIDEOSTREAMTYPE = "RtcEngine_setRemoteVideoStreamType";

		internal const string FUNC_RTCENGINE_SETREMOTEDEFAULTVIDEOSTREAMTYPE = "RtcEngine_setRemoteDefaultVideoStreamType";

		internal const string FUNC_RTCENGINE_ENABLEAUDIOVOLUMEINDICATION = "RtcEngine_enableAudioVolumeIndication";

		internal const string FUNC_RTCENGINE_STARTAUDIORECORDING = "RtcEngine_startAudioRecording";

		internal const string FUNC_RTCENGINE_STARTAUDIORECORDING2 = "RtcEngine_startAudioRecording2";

		internal const string FUNC_RTCENGINE_STARTAUDIORECORDING3 = "RtcEngine_startAudioRecording3";

		internal const string FUNC_RTCENGINE_REGISTERAUDIOENCODEDFRAMEOBSERVER = "RtcEngine_registerAudioEncodedFrameObserver";

		internal const string FUNC_RTCENGINE_STOPAUDIORECORDING = "RtcEngine_stopAudioRecording";

		internal const string FUNC_RTCENGINE_CREATEMEDIAPLAYER = "RtcEngine_createMediaPlayer";

		internal const string FUNC_RTCENGINE_DESTROYMEDIAPLAYER = "RtcEngine_destroyMediaPlayer";

		internal const string FUNC_RTCENGINE_STARTAUDIOMIXING = "RtcEngine_startAudioMixing";

		internal const string FUNC_RTCENGINE_STARTAUDIOMIXING2 = "RtcEngine_startAudioMixing2";

		internal const string FUNC_RTCENGINE_STOPAUDIOMIXING = "RtcEngine_stopAudioMixing";

		internal const string FUNC_RTCENGINE_PAUSEAUDIOMIXING = "RtcEngine_pauseAudioMixing";

		internal const string FUNC_RTCENGINE_RESUMEAUDIOMIXING = "RtcEngine_resumeAudioMixing";

		internal const string FUNC_RTCENGINE_ADJUSTAUDIOMIXINGVOLUME = "RtcEngine_adjustAudioMixingVolume";

		internal const string FUNC_RTCENGINE_ADJUSTAUDIOMIXINGPUBLISHVOLUME = "RtcEngine_adjustAudioMixingPublishVolume";

		internal const string FUNC_RTCENGINE_GETAUDIOMIXINGPUBLISHVOLUME = "RtcEngine_getAudioMixingPublishVolume";

		internal const string FUNC_RTCENGINE_ADJUSTAUDIOMIXINGPLAYOUTVOLUME = "RtcEngine_adjustAudioMixingPlayoutVolume";

		internal const string FUNC_RTCENGINE_GETAUDIOMIXINGPLAYOUTVOLUME = "RtcEngine_getAudioMixingPlayoutVolume";

		internal const string FUNC_RTCENGINE_GETAUDIOMIXINGDURATION = "RtcEngine_getAudioMixingDuration";

		internal const string FUNC_RTCENGINE_GETAUDIOMIXINGCURRENTPOSITION = "RtcEngine_getAudioMixingCurrentPosition";

		internal const string FUNC_RTCENGINE_SETAUDIOMIXINGPOSITION = "RtcEngine_setAudioMixingPosition";

		internal const string FUNC_RTCENGINE_SETAUDIOMIXINGPITCH = "RtcEngine_setAudioMixingPitch";

		internal const string FUNC_RTCENGINE_GETEFFECTSVOLUME = "RtcEngine_getEffectsVolume";

		internal const string FUNC_RTCENGINE_SETEFFECTSVOLUME = "RtcEngine_setEffectsVolume";

		internal const string FUNC_RTCENGINE_PRELOADEFFECT = "RtcEngine_preloadEffect";

		internal const string FUNC_RTCENGINE_PLAYEFFECT = "RtcEngine_playEffect";

		internal const string FUNC_RTCENGINE_PLAYALLEFFECTS = "RtcEngine_playAllEffects";

		internal const string FUNC_RTCENGINE_GETVOLUMEOFEFFECT = "RtcEngine_getVolumeOfEffect";

		internal const string FUNC_RTCENGINE_SETVOLUMEOFEFFECT = "RtcEngine_setVolumeOfEffect";

		internal const string FUNC_RTCENGINE_PAUSEEFFECT = "RtcEngine_pauseEffect";

		internal const string FUNC_RTCENGINE_PAUSEALLEFFECTS = "RtcEngine_pauseAllEffects";

		internal const string FUNC_RTCENGINE_RESUMEEFFECT = "RtcEngine_resumeEffect";

		internal const string FUNC_RTCENGINE_RESUMEALLEFFECTS = "RtcEngine_resumeAllEffects";

		internal const string FUNC_RTCENGINE_STOPEFFECT = "RtcEngine_stopEffect";

		internal const string FUNC_RTCENGINE_STOPALLEFFECTS = "RtcEngine_stopAllEffects";

		internal const string FUNC_RTCENGINE_UNLOADEFFECT = "RtcEngine_unloadEffect";

		internal const string FUNC_RTCENGINE_UNLOADALLEFFECTS = "RtcEngine_unloadAllEffects";

		internal const string FUNC_RTCENGINE_ENABLESOUNDPOSITIONINDICATION = "RtcEngine_enableSoundPositionIndication";

		internal const string FUNC_RTCENGINE_SETREMOTEVOICEPOSITION = "RtcEngine_setRemoteVoicePosition";

		internal const string FUNC_RTCENGINE_ENABLESPATIALAUDIO = "RtcEngine_enableSpatialAudio";

		internal const string FUNC_RTCENGINE_SETREMOTEUSERSPATIALAUDIOPARAMS = "RtcEngine_setRemoteUserSpatialAudioParams";

		internal const string FUNC_RTCENGINE_SETVOICEBEAUTIFIERPRESET = "RtcEngine_setVoiceBeautifierPreset";

		internal const string FUNC_RTCENGINE_SETAUDIOEFFECTPRESET = "RtcEngine_setAudioEffectPreset";

		internal const string FUNC_RTCENGINE_SETVOICECONVERSIONPRESET = "RtcEngine_setVoiceConversionPreset";

		internal const string FUNC_RTCENGINE_SETAUDIOEFFECTPARAMETERS = "RtcEngine_setAudioEffectParameters";

		internal const string FUNC_RTCENGINE_SETVOICEBEAUTIFIERPARAMETERS = "RtcEngine_setVoiceBeautifierParameters";

		internal const string FUNC_RTCENGINE_SETVOICECONVERSIONPARAMETERS = "RtcEngine_setVoiceConversionParameters";

		internal const string FUNC_RTCENGINE_SETLOCALVOICEPITCH = "RtcEngine_setLocalVoicePitch";

		internal const string FUNC_RTCENGINE_SETLOCALVOICEEQUALIZATION = "RtcEngine_setLocalVoiceEqualization";

		internal const string FUNC_RTCENGINE_SETLOCALVOICEREVERB = "RtcEngine_setLocalVoiceReverb";

		internal const string FUNC_RTCENGINE_SETLOGFILE = "RtcEngine_setLogFile";

		internal const string FUNC_RTCENGINE_SETLOGFILTER = "RtcEngine_setLogFilter";

		internal const string FUNC_RTCENGINE_SETLOGLEVEL = "RtcEngine_setLogLevel";

		internal const string FUNC_RTCENGINE_SETLOGFILESIZE = "RtcEngine_setLogFileSize";

		internal const string FUNC_RTCENGINE_UPLOADLOGFILE = "RtcEngine_uploadLogFile";

		internal const string FUNC_RTCENGINE_SETLOCALRENDERMODE = "RtcEngine_setLocalRenderMode";

		internal const string FUNC_RTCENGINE_SETREMOTERENDERMODE = "RtcEngine_setRemoteRenderMode";

		internal const string FUNC_RTCENGINE_SETLOCALRENDERMODE2 = "RtcEngine_setLocalRenderMode2";

		internal const string FUNC_RTCENGINE_SETLOCALVIDEOMIRRORMODE = "RtcEngine_setLocalVideoMirrorMode";

		internal const string FUNC_RTCENGINE_ENABLEDUALSTREAMMODE = "RtcEngine_enableDualStreamMode";

		internal const string FUNC_RTCENGINE_ENABLEDUALSTREAMMODE2 = "RtcEngine_enableDualStreamMode2";

		internal const string FUNC_RTCENGINE_ENABLEDUALSTREAMMODE3 = "RtcEngine_enableDualStreamMode3";

		internal const string FUNC_RTCENGINE_ENABLEECHOCANCELLATIONEXTERNAL = "RtcEngine_enableEchoCancellationExternal";

		internal const string FUNC_RTCENGINE_ENABLECUSTOMAUDIOLOCALPLAYBACK = "RtcEngine_enableCustomAudioLocalPlayback";

		internal const string FUNC_RTCENGINE_STARTPRIMARYCUSTOMAUDIOTRACK = "RtcEngine_startPrimaryCustomAudioTrack";

		internal const string FUNC_RTCENGINE_STOPPRIMARYCUSTOMAUDIOTRACK = "RtcEngine_stopPrimaryCustomAudioTrack";

		internal const string FUNC_RTCENGINE_STARTSECONDARYCUSTOMAUDIOTRACK = "RtcEngine_startSecondaryCustomAudioTrack";

		internal const string FUNC_RTCENGINE_STOPSECONDARYCUSTOMAUDIOTRACK = "RtcEngine_stopSecondaryCustomAudioTrack";

		internal const string FUNC_RTCENGINE_SETRECORDINGAUDIOFRAMEPARAMETERS = "RtcEngine_setRecordingAudioFrameParameters";

		internal const string FUNC_RTCENGINE_SETPLAYBACKAUDIOFRAMEPARAMETERS = "RtcEngine_setPlaybackAudioFrameParameters";

		internal const string FUNC_RTCENGINE_SETMIXEDAUDIOFRAMEPARAMETERS = "RtcEngine_setMixedAudioFrameParameters";

		internal const string FUNC_RTCENGINE_SETPLAYBACKAUDIOFRAMEBEFOREMIXINGPARAMETERS = "RtcEngine_setPlaybackAudioFrameBeforeMixingParameters";

		internal const string FUNC_RTCENGINE_ENABLEAUDIOSPECTRUMMONITOR = "RtcEngine_enableAudioSpectrumMonitor";

		internal const string FUNC_RTCENGINE_DISABLEAUDIOSPECTRUMMONITOR = "RtcEngine_disableAudioSpectrumMonitor";

		internal const string FUNC_RTCENGINE_REGISTERAUDIOSPECTRUMOBSERVER = "RtcEngine_registerAudioSpectrumObserver";

		internal const string FUNC_RTCENGINE_UNREGISTERAUDIOSPECTRUMOBSERVER = "RtcEngine_unregisterAudioSpectrumObserver";

		internal const string FUNC_RTCENGINE_ADJUSTRECORDINGSIGNALVOLUME = "RtcEngine_adjustRecordingSignalVolume";

		internal const string FUNC_RTCENGINE_MUTERECORDINGSIGNAL = "RtcEngine_muteRecordingSignal";

		internal const string FUNC_RTCENGINE_ADJUSTPLAYBACKSIGNALVOLUME = "RtcEngine_adjustPlaybackSignalVolume";

		internal const string FUNC_RTCENGINE_ADJUSTUSERPLAYBACKSIGNALVOLUME = "RtcEngine_adjustUserPlaybackSignalVolume";

		internal const string FUNC_RTCENGINE_SETLOCALPUBLISHFALLBACKOPTION = "RtcEngine_setLocalPublishFallbackOption";

		internal const string FUNC_RTCENGINE_SETREMOTESUBSCRIBEFALLBACKOPTION = "RtcEngine_setRemoteSubscribeFallbackOption";

		internal const string FUNC_RTCENGINE_ENABLELOOPBACKRECORDING = "RtcEngine_enableLoopbackRecording";

		internal const string FUNC_RTCENGINE_ADJUSTLOOPBACKRECORDINGVOLUME = "RtcEngine_adjustLoopbackRecordingVolume";

		internal const string FUNC_RTCENGINE_GETLOOPBACKRECORDINGVOLUME = "RtcEngine_getLoopbackRecordingVolume";

		internal const string FUNC_RTCENGINE_ENABLEINEARMONITORING = "RtcEngine_enableInEarMonitoring";

		internal const string FUNC_RTCENGINE_SETINEARMONITORINGVOLUME = "RtcEngine_setInEarMonitoringVolume";

		internal const string FUNC_RTCENGINE_LOADEXTENSIONPROVIDER = "RtcEngine_loadExtensionProvider";

		internal const string FUNC_RTCENGINE_SETEXTENSIONPROVIDERPROPERTY = "RtcEngine_setExtensionProviderProperty";

		internal const string FUNC_RTCENGINE_ENABLEEXTENSION = "RtcEngine_enableExtension";

		internal const string FUNC_RTCENGINE_SETEXTENSIONPROPERTY = "RtcEngine_setExtensionProperty";

		internal const string FUNC_RTCENGINE_GETEXTENSIONPROPERTY = "RtcEngine_getExtensionProperty";

		internal const string FUNC_RTCENGINE_SETCAMERACAPTURERCONFIGURATION = "RtcEngine_setCameraCapturerConfiguration";

		internal const string FUNC_RTCENGINE_SWITCHCAMERA = "RtcEngine_switchCamera";

		internal const string FUNC_RTCENGINE_ISCAMERAZOOMSUPPORTED = "RtcEngine_isCameraZoomSupported";

		internal const string FUNC_RTCENGINE_ISCAMERAFACEDETECTSUPPORTED = "RtcEngine_isCameraFaceDetectSupported";

		internal const string FUNC_RTCENGINE_ISCAMERATORCHSUPPORTED = "RtcEngine_isCameraTorchSupported";

		internal const string FUNC_RTCENGINE_ISCAMERAFOCUSSUPPORTED = "RtcEngine_isCameraFocusSupported";

		internal const string FUNC_RTCENGINE_ISCAMERAAUTOFOCUSFACEMODESUPPORTED = "RtcEngine_isCameraAutoFocusFaceModeSupported";

		internal const string FUNC_RTCENGINE_SETCAMERAZOOMFACTOR = "RtcEngine_setCameraZoomFactor";

		internal const string FUNC_RTCENGINE_ENABLEFACEDETECTION = "RtcEngine_enableFaceDetection";

		internal const string FUNC_RTCENGINE_GETCAMERAMAXZOOMFACTOR = "RtcEngine_getCameraMaxZoomFactor";

		internal const string FUNC_RTCENGINE_SETCAMERAFOCUSPOSITIONINPREVIEW = "RtcEngine_setCameraFocusPositionInPreview";

		internal const string FUNC_RTCENGINE_SETCAMERATORCHON = "RtcEngine_setCameraTorchOn";

		internal const string FUNC_RTCENGINE_SETCAMERAAUTOFOCUSFACEMODEENABLED = "RtcEngine_setCameraAutoFocusFaceModeEnabled";

		internal const string FUNC_RTCENGINE_ISCAMERAEXPOSUREPOSITIONSUPPORTED = "RtcEngine_isCameraExposurePositionSupported";

		internal const string FUNC_RTCENGINE_SETCAMERAEXPOSUREPOSITION = "RtcEngine_setCameraExposurePosition";

		internal const string FUNC_RTCENGINE_ISCAMERAAUTOEXPOSUREFACEMODESUPPORTED = "RtcEngine_isCameraAutoExposureFaceModeSupported";

		internal const string FUNC_RTCENGINE_SETCAMERAAUTOEXPOSUREFACEMODEENABLED = "RtcEngine_setCameraAutoExposureFaceModeEnabled";

		internal const string FUNC_RTCENGINE_SETDEFAULTAUDIOROUTETOSPEAKERPHONE = "RtcEngine_setDefaultAudioRouteToSpeakerphone";

		internal const string FUNC_RTCENGINE_SETENABLESPEAKERPHONE = "RtcEngine_setEnableSpeakerphone";

		internal const string FUNC_RTCENGINE_ISSPEAKERPHONEENABLED = "RtcEngine_isSpeakerphoneEnabled";

		internal const string FUNC_RTCENGINE_GETSCREENCAPTURESOURCES = "RtcEngine_getScreenCaptureSources";

		internal const string FUNC_RTCENGINE_STARTSCREENCAPTUREBYSCREENRECT = "RtcEngine_startScreenCaptureByScreenRect";

		internal const string FUNC_RTCENGINE_STARTSCREENCAPTURE = "RtcEngine_startScreenCapture";

		internal const string FUNC_RTCENGINE_GETAUDIODEVICEINFO = "RtcEngine_getAudioDeviceInfo";

		internal const string FUNC_RTCENGINE_STARTSCREENCAPTUREBYWINDOWID = "RtcEngine_startScreenCaptureByWindowId";

		internal const string FUNC_RTCENGINE_SETSCREENCAPTURECONTENTHINT = "RtcEngine_setScreenCaptureContentHint";

		internal const string FUNC_RTCENGINE_UPDATESCREENCAPTUREREGION = "RtcEngine_updateScreenCaptureRegion";

		internal const string FUNC_RTCENGINE_UPDATESCREENCAPTUREPARAMETERS = "RtcEngine_updateScreenCaptureParameters";

		internal const string FUNC_RTCENGINE_STOPSCREENCAPTURE = "RtcEngine_stopScreenCapture";

		internal const string FUNC_RTCENGINE_GETCALLID = "RtcEngine_getCallId";

		internal const string FUNC_RTCENGINE_RATE = "RtcEngine_rate";

		internal const string FUNC_RTCENGINE_COMPLAIN = "RtcEngine_complain";

		internal const string FUNC_RTCENGINE_ADDPUBLISHSTREAMURL = "RtcEngine_addPublishStreamUrl";

		internal const string FUNC_RTCENGINE_REMOVEPUBLISHSTREAMURL = "RtcEngine_removePublishStreamUrl";

		internal const string FUNC_RTCENGINE_SETLIVETRANSCODING = "RtcEngine_setLiveTranscoding";

		internal const string FUNC_RTCENGINE_STARTRTMPSTREAMWITHOUTTRANSCODING = "RtcEngine_startRtmpStreamWithoutTranscoding";

		internal const string FUNC_RTCENGINE_STARTRTMPSTREAMWITHTRANSCODING = "RtcEngine_startRtmpStreamWithTranscoding";

		internal const string FUNC_RTCENGINE_UPDATERTMPTRANSCODING = "RtcEngine_updateRtmpTranscoding";

		internal const string FUNC_RTCENGINE_STOPRTMPSTREAM = "RtcEngine_stopRtmpStream";

		internal const string FUNC_RTCENGINE_STARTLOCALVIDEOTRANSCODER = "RtcEngine_startLocalVideoTranscoder";

		internal const string FUNC_RTCENGINE_UPDATELOCALTRANSCODERCONFIGURATION = "RtcEngine_updateLocalTranscoderConfiguration";

		internal const string FUNC_RTCENGINE_STOPLOCALVIDEOTRANSCODER = "RtcEngine_stopLocalVideoTranscoder";

		internal const string FUNC_RTCENGINE_STARTPRIMARYCAMERACAPTURE = "RtcEngine_startPrimaryCameraCapture";

		internal const string FUNC_RTCENGINE_STARTSECONDARYCAMERACAPTURE = "RtcEngine_startSecondaryCameraCapture";

		internal const string FUNC_RTCENGINE_STOPPRIMARYCAMERACAPTURE = "RtcEngine_stopPrimaryCameraCapture";

		internal const string FUNC_RTCENGINE_STOPSECONDARYCAMERACAPTURE = "RtcEngine_stopSecondaryCameraCapture";

		internal const string FUNC_RTCENGINE_SETCAMERADEVICEORIENTATION = "RtcEngine_setCameraDeviceOrientation";

		internal const string FUNC_RTCENGINE_SETSCREENCAPTUREORIENTATION = "RtcEngine_setScreenCaptureOrientation";

		internal const string FUNC_RTCENGINE_STARTPRIMARYSCREENCAPTURE = "RtcEngine_startPrimaryScreenCapture";

		internal const string FUNC_RTCENGINE_STARTSECONDARYSCREENCAPTURE = "RtcEngine_startSecondaryScreenCapture";

		internal const string FUNC_RTCENGINE_STOPPRIMARYSCREENCAPTURE = "RtcEngine_stopPrimaryScreenCapture";

		internal const string FUNC_RTCENGINE_STOPSECONDARYSCREENCAPTURE = "RtcEngine_stopSecondaryScreenCapture";

		internal const string FUNC_RTCENGINE_GETCONNECTIONSTATE = "RtcEngine_getConnectionState";

		internal const string FUNC_RTCENGINE_REGISTEREVENTHANDLER = "RtcEngine_registerEventHandler";

		internal const string FUNC_RTCENGINE_UNREGISTEREVENTHANDLER = "RtcEngine_unregisterEventHandler";

		internal const string FUNC_RTCENGINE_SETREMOTEUSERPRIORITY = "RtcEngine_setRemoteUserPriority";

		internal const string FUNC_RTCENGINE_REGISTERPACKETOBSERVER = "RtcEngine_registerPacketObserver";

		internal const string FUNC_RTCENGINE_SETENCRYPTIONMODE = "RtcEngine_setEncryptionMode";

		internal const string FUNC_RTCENGINE_SETENCRYPTIONSECRET = "RtcEngine_setEncryptionSecret";

		internal const string FUNC_RTCENGINE_ENABLEENCRYPTION = "RtcEngine_enableEncryption";

		internal const string FUNC_RTCENGINE_CREATEDATASTREAM = "RtcEngine_createDataStream";

		internal const string FUNC_RTCENGINE_CREATEDATASTREAM2 = "RtcEngine_createDataStream2";

		internal const string FUNC_RTCENGINE_SENDSTREAMMESSAGE = "RtcEngine_sendStreamMessage";

		internal const string FUNC_RTCENGINE_ADDVIDEOWATERMARK = "RtcEngine_addVideoWatermark";

		internal const string FUNC_RTCENGINE_ADDVIDEOWATERMARK2 = "RtcEngine_addVideoWatermark2";

		internal const string FUNC_RTCENGINE_CLEARVIDEOWATERMARK = "RtcEngine_clearVideoWatermark";

		internal const string FUNC_RTCENGINE_CLEARVIDEOWATERMARKS = "RtcEngine_clearVideoWatermarks";

		internal const string FUNC_RTCENGINE_ADDINJECTSTREAMURL = "RtcEngine_addInjectStreamUrl";

		internal const string FUNC_RTCENGINE_REMOVEINJECTSTREAMURL = "RtcEngine_removeInjectStreamUrl";

		internal const string FUNC_RTCENGINE_PAUSEAUDIO = "RtcEngine_pauseAudio";

		internal const string FUNC_RTCENGINE_RESUMEAUDIO = "RtcEngine_resumeAudio";

		internal const string FUNC_RTCENGINE_ENABLEWEBSDKINTEROPERABILITY = "RtcEngine_enableWebSdkInteroperability";

		internal const string FUNC_RTCENGINE_SENDCUSTOMREPORTMESSAGE = "RtcEngine_sendCustomReportMessage";

		internal const string FUNC_RTCENGINE_REGISTERMEDIAMETADATAOBSERVER = "RtcEngine_registerMediaMetadataObserver";

		internal const string FUNC_RTCENGINE_UNREGISTERMEDIAMETADATAOBSERVER = "RtcEngine_unregisterMediaMetadataObserver";

		internal const string FUNC_RTCENGINE_STARTAUDIOFRAMEDUMP = "RtcEngine_startAudioFrameDump";

		internal const string FUNC_RTCENGINE_STOPAUDIOFRAMEDUMP = "RtcEngine_stopAudioFrameDump";

		internal const string FUNC_RTCENGINE_REGISTERLOCALUSERACCOUNT = "RtcEngine_registerLocalUserAccount";

		internal const string FUNC_RTCENGINE_JOINCHANNELWITHUSERACCOUNT = "RtcEngine_joinChannelWithUserAccount";

		internal const string FUNC_RTCENGINE_JOINCHANNELWITHUSERACCOUNT2 = "RtcEngine_joinChannelWithUserAccount2";

		internal const string FUNC_RTCENGINE_JOINCHANNELWITHUSERACCOUNTEX = "RtcEngine_joinChannelWithUserAccountEx";

		internal const string FUNC_RTCENGINE_GETUSERINFOBYUSERACCOUNT = "RtcEngine_getUserInfoByUserAccount";

		internal const string FUNC_RTCENGINE_GETUSERINFOBYUID = "RtcEngine_getUserInfoByUid";

		internal const string FUNC_RTCENGINE_STARTCHANNELMEDIARELAY = "RtcEngine_startChannelMediaRelay";

		internal const string FUNC_RTCENGINE_UPDATECHANNELMEDIARELAY = "RtcEngine_updateChannelMediaRelay";

		internal const string FUNC_RTCENGINE_STOPCHANNELMEDIARELAY = "RtcEngine_stopChannelMediaRelay";

		internal const string FUNC_RTCENGINE_PAUSEALLCHANNELMEDIARELAY = "RtcEngine_pauseAllChannelMediaRelay";

		internal const string FUNC_RTCENGINE_RESUMEALLCHANNELMEDIARELAY = "RtcEngine_resumeAllChannelMediaRelay";

		internal const string FUNC_RTCENGINE_SETDIRECTCDNSTREAMINGAUDIOCONFIGURATION = "RtcEngine_setDirectCdnStreamingAudioConfiguration";

		internal const string FUNC_RTCENGINE_SETDIRECTCDNSTREAMINGVIDEOCONFIGURATION = "RtcEngine_setDirectCdnStreamingVideoConfiguration";

		internal const string FUNC_RTCENGINE_STARTDIRECTCDNSTREAMING = "RtcEngine_startDirectCdnStreaming";

		internal const string FUNC_RTCENGINE_STOPDIRECTCDNSTREAMING = "RtcEngine_stopDirectCdnStreaming";

		internal const string FUNC_RTCENGINE_UPDATEDIRECTCDNSTREAMINGMEDIAOPTIONS = "RtcEngine_updateDirectCdnStreamingMediaOptions";

		internal const string FUNC_RTCENGINE_PUSHDIRECTCDNSTREAMINGCUSTOMVIDEOFRAME = "RtcEngine_pushDirectCdnStreamingCustomVideoFrame";

		internal const string FUNC_RTCENGINE_TAKESNAPSHOT = "RtcEngine_takeSnapshot";

		internal const string FUNC_RTCENGINE_SETCONTENTINSPECT = "RtcEngine_SetContentInspect";

		internal const string FUNC_RTCENGINE_SWITCHCHANNEL = "RtcEngine_switchChannel";

		internal const string FUNC_RTCENGINE_STARTRHYTHMPLAYER = "RtcEngine_startRhythmPlayer";

		internal const string FUNC_RTCENGINE_STOPRHYTHMPLAYER = "RtcEngine_stopRhythmPlayer";

		internal const string FUNC_RTCENGINE_CONFIGRHYTHMPLAYER = "RtcEngine_configRhythmPlayer";

		internal const string FUNC_RTCENGINE_ADJUSTCUSTOMAUDIOPUBLISHVOLUME = "RtcEngine_adjustCustomAudioPublishVolume";

		internal const string FUNC_RTCENGINE_ADJUSTCUSTOMAUDIOPLAYOUTVOLUME = "RtcEngine_adjustCustomAudioPlayoutVolume";

		internal const string FUNC_RTCENGINE_SETCLOUDPROXY = "RtcEngine_setCloudProxy";

		internal const string FUNC_RTCENGINE_SETLOCALACCESSPOINT = "RtcEngine_setLocalAccessPoint";

		internal const string FUNC_RTCENGINE_ENABLEFISHEYECORRECTION = "RtcEngine_enableFishEyeCorrection";

		internal const string FUNC_RTCENGINE_SETADVANCEDAUDIOOPTIONS = "RtcEngine_setAdvancedAudioOptions";

		internal const string FUNC_RTCENGINE_SETAVSYNCSOURCE = "RtcEngine_setAVSyncSource";

		internal const string FUNC_RTCENGINE_STARTSCREENCAPTUREBYDISPLAYID = "RtcEngine_startScreenCaptureByDisplayId";

		internal const string FUNC_RTCENGINE_SETMAXMETADATASIZE = "RtcEngine_setMaxMetadataSize";

		internal const string FUNC_RTCENGINE_SENDMETADATA = "RtcEngine_sendMetaData";

		internal const string FUNC_RTCENGINE_RELEASESCREENCAPTURESOURCES = "RtcEngine_releaseScreenCaptureSources";

		internal const string FUNC_RTCENGINE_ADJUSTLOOPBACKSIGNALVOLUME = "RtcEngine_adjustLoopbackSignalVolume";

		internal const string FUNC_RTCENGINE_SETAUDIOMIXINGDUALMONOMODE = "RtcEngine_setAudioMixingDualMonoMode";

		internal const string FUNC_RTCENGINE_CREATECUSTOMENCODEDVIDEOTRACK = "RtcEngine_createCustomEncodedVideoTrack";

		internal const string FUNC_RTCENGINE_CREATECUSTOMVIDEOTRACK = "RtcEngine_createCustomVideoTrack";

		internal const string FUNC_RTCENGINE_DESTROYCUSTOMENCODEDVIDEOTRACK = "RtcEngine_destroyCustomEncodedVideoTrack";

		internal const string FUNC_RTCENGINE_DESTROYCUSTOMVIDEOTRACK = "RtcEngine_destroyCustomVideoTrack";

		internal const string FUNC_RTCENGINE_ENABLECONTENTINSPECT = "RtcEngine_enableContentInspect";

		internal const string FUNC_RTCENGINE_ENABLEVIDEOIMAGESOURCE = "RtcEngine_enableVideoImageSource";

		internal const string FUNC_RTCENGINE_ENABLEWIRELESSACCELERATE = "RtcEngine_enableWirelessAccelerate";

		internal const string FUNC_RTCENGINE_UPDATESCREENCAPTURE = "RtcEngine_updateScreenCapture";

		internal const string FUNC_RTCENGINE_SELECTAUDIOTRACK = "RtcEngine_selectAudioTrack";

		internal const string FUNC_RTCENGINE_GETAUDIOTRACKCOUNT = "RtcEngine_getAudioTrackCount";

		internal const string FUNC_RTCENGINE_SETCOLORENHANCEOPTIONS = "RtcEngine_setColorEnhanceOptions";

		internal const string FUNC_RTCENGINE_SETLOWLIGHTENHANCEOPTIONS = "RtcEngine_setLowlightEnhanceOptions";

		internal const string FUNC_RTCENGINE_SETREMOTEVIDEOSUBSCRIPTIONOPTIONS = "RtcEngine_setRemoteVideoSubscriptionOptions";

		internal const string FUNC_RTCENGINE_SETSCREENCAPTURESCENARIO = "RtcEngine_setScreenCaptureScenario";

		internal const string FUNC_RTCENGINE_SETSUBSCRIBEVIDEOBLACKLIST = "RtcEngine_setSubscribeVideoBlacklist";

		internal const string FUNC_RTCENGINE_SETSUBSCRIBEAUDIOBLACKLIST = "RtcEngine_setSubscribeAudioBlacklist";

		internal const string FUNC_RTCENGINE_SETSUBSCRIBEAUDIOWHITELIST = "RtcEngine_setSubscribeAudioWhitelist";

		internal const string FUNC_RTCENGINE_SETSUBSCRIBEVIDEOWHITELIST = "RtcEngine_setSubscribeVideoWhitelist";

		internal const string FUNC_RTCENGINE_SETVIDEODENOISEROPTIONS = "RtcEngine_setVideoDenoiserOptions";

		internal const string FUNC_RTCENGINE_SETAUDIOSESSIONOPERATIONRESTRICTION = "RtcEngine_setAudioSessionOperationRestriction";

		internal const string FUNC_RTCENGINE_SETAUDIOSCENARIO = "RtcEngine_setAudioScenario";

		internal const string FUNC_RTCENGINE_SETDUALSTREAMMODE = "RtcEngine_setDualStreamMode";

		internal const string FUNC_RTCENGINE_SETDUALSTREAMMODE2 = "RtcEngine_setDualStreamMode2";

		internal const string FUNC_RTCENGINE_SETDUALSTREAMMODE3 = "RtcEngine_setDualStreamMode3";

		internal const string FUNC_RTCENGINE_GETEFFECTCURRENTPOSITION = "RtcEngine_getEffectCurrentPosition";

		internal const string FUNC_RTCENGINE_GETEFFECTDURATION = "RtcEngine_getEffectDuration";

		internal const string FUNC_RTCENGINE_SETEFFECTPOSITION = "RtcEngine_setEffectPosition";

		internal const string FUNC_RTCENGINE_STARTMEDIARECORDERRECORDING = "RtcEngine_startMediaRecorderRecording";

		internal const string FUNC_RTCENGINE_STOPMEDIARECORDERRECORDING = "RtcEngine_stopMediaRecorderRecording";

		internal const string FUNC_RTCENGINEEX_JOINCHANNELEX = "RtcEngineEx_joinChannelEx";

		internal const string FUNC_RTCENGINEEX_LEAVECHANNELEX = "RtcEngineEx_leaveChannelEx";

		internal const string FUNC_RTCENGINEEX_UPDATECHANNELMEDIAOPTIONSEX = "RtcEngineEx_updateChannelMediaOptionsEx";

		internal const string FUNC_RTCENGINEEX_SETVIDEOENCODERCONFIGURATIONEX = "RtcEngineEx_setVideoEncoderConfigurationEx";

		internal const string FUNC_RTCENGINEEX_SETUPREMOTEVIDEOEX = "RtcEngineEx_setupRemoteVideoEx";

		internal const string FUNC_RTCENGINEEX_MUTEREMOTEAUDIOSTREAMEX = "RtcEngineEx_muteRemoteAudioStreamEx";

		internal const string FUNC_RTCENGINEEX_MUTEREMOTEVIDEOSTREAMEX = "RtcEngineEx_muteRemoteVideoStreamEx";

		internal const string FUNC_RTCENGINEEX_SETREMOTEVIDEOSTREAMTYPEEX = "RtcEngineEx_setRemoteVideoStreamTypeEx";

		internal const string FUNC_RTCENGINEEX_SETREMOTEVOICEPOSITIONEX = "RtcEngineEx_setRemoteVoicePositionEx";

		internal const string FUNC_RTCENGINEEX_SETREMOTEUSERSPATIALAUDIOPARAMSEX = "RtcEngineEx_setRemoteUserSpatialAudioParamsEx";

		internal const string FUNC_RTCENGINEEX_SETREMOTERENDERMODEEX = "RtcEngineEx_setRemoteRenderModeEx";

		internal const string FUNC_RTCENGINEEX_ENABLELOOPBACKRECORDINGEX = "RtcEngineEx_enableLoopbackRecordingEx";

		internal const string FUNC_RTCENGINEEX_GETCONNECTIONSTATEEX = "RtcEngineEx_getConnectionStateEx";

		internal const string FUNC_RTCENGINEEX_ENABLEENCRYPTIONEX = "RtcEngineEx_enableEncryptionEx";

		internal const string FUNC_RTCENGINEEX_CREATEDATASTREAMEX = "RtcEngineEx_createDataStreamEx";

		internal const string FUNC_RTCENGINEEX_CREATEDATASTREAMEX2 = "RtcEngineEx_createDataStreamEx2";

		internal const string FUNC_RTCENGINEEX_SENDSTREAMMESSAGEEX = "RtcEngineEx_sendStreamMessageEx";

		internal const string FUNC_RTCENGINEEX_ADDVIDEOWATERMARKEX = "RtcEngineEx_addVideoWatermarkEx";

		internal const string FUNC_RTCENGINEEX_CLEARVIDEOWATERMARKEX = "RtcEngineEx_clearVideoWatermarkEx";

		internal const string FUNC_RTCENGINEEX_SENDCUSTOMREPORTMESSAGEEX = "RtcEngineEx_sendCustomReportMessageEx";

		internal const string FUNC_RTCENGINEEX_ENABLEAUDIOVOLUMEINDICATIONEX = "RtcEngineEx_enableAudioVolumeIndicationEx";

		internal const string FUNC_RTCENGINEEX_GETUSERINFOBYUSERACCOUNTEX = "RtcEngineEx_getUserInfoByUserAccountEx";

		internal const string FUNC_RTCENGINEEX_GETUSERINFOBYUIDEX = "RtcEngineEx_getUserInfoByUidEx";

		internal const string FUNC_RTCENGINEEX_SETVIDEOPROFILEEX = "RtcEngineEx_setVideoProfileEx";

		internal const string FUNC_RTCENGINEEX_ENABLEDUALSTREAMMODEEX = "RtcEngineEx_enableDualStreamModeEx";

		internal const string FUNC_RTCENGINEEX_ADDPUBLISHSTREAMURLEX = "RtcEngineEx_addPublishStreamUrlEx";

		internal const string FUNC_RTCENGINEEX_SETREMOTEVIDEOSUBSCRIPTIONOPTIONSEX = "RtcEngineEx_setRemoteVideoSubscriptionOptionsEx";

		internal const string FUNC_RTCENGINEEX_SETSUBSCRIBEVIDEOBLACKLISTEX = "RtcEngineEx_setSubscribeVideoBlacklistEx";

		internal const string FUNC_RTCENGINEEX_SETSUBSCRIBEAUDIOBLACKLISTEX = "RtcEngineEx_setSubscribeAudioBlacklistEx";

		internal const string FUNC_RTCENGINEEX_SETSUBSCRIBEAUDIOWHITELISTEX = "RtcEngineEx_setSubscribeAudioWhitelistEx";

		internal const string FUNC_RTCENGINEEX_SETSUBSCRIBEVIDEOWHITELISTEX = "RtcEngineEx_setSubscribeVideoWhitelistEx";

		internal const string FUNC_RTCENGINEEX_SETREMOTEVIDEOSUBSCRIPTIONOPTIONS = "RtcEngineEx_setRemoteVideoSubscriptionOptions";

		internal const string FUNC_RTCENGINEEX_ENABLEWIRELESSACCELERATE = "RtcEngineEx_enableWirelessAccelerate";

		internal const string FUNC_RTCENGINEEX_SETDUALSTREAMMODEEX = "RtcEngineEx_setDualStreamModeEx";

		internal const string FUNC_RTCENGINEEX_TAKESNAPSHOTEX = "RtcEngineEx_takeSnapshotEx";

		internal const string FUNC_MEDIAPLAYER_INITIALIZE = "MediaPlayer_initialize";

		internal const string FUNC_MEDIAPLAYER_GETMEDIAPLAYERID = "MediaPlayer_getMediaPlayerId";

		internal const string FUNC_MEDIAPLAYER_OPEN = "MediaPlayer_open";

		internal const string FUNC_MEDIAPLAYER_OPENWITHMEDIASOURCE = "MediaPlayer_openWithMediaSource";

		internal const string FUNC_MEDIAPLAYER_OPENWITHCUSTOMSOURCE = "MediaPlayer_openWithCustomSource";

		internal const string FUNC_MEDIAPLAYER_PLAY = "MediaPlayer_play";

		internal const string FUNC_MEDIAPLAYER_PAUSE = "MediaPlayer_pause";

		internal const string FUNC_MEDIAPLAYER_STOP = "MediaPlayer_stop";

		internal const string FUNC_MEDIAPLAYER_RESUME = "MediaPlayer_resume";

		internal const string FUNC_MEDIAPLAYER_SEEK = "MediaPlayer_seek";

		internal const string FUNC_MEDIAPLAYER_SETAUDIOPITCH = "MediaPlayer_setAudioPitch";

		internal const string FUNC_MEDIAPLAYER_GETDURATION = "MediaPlayer_getDuration";

		internal const string FUNC_MEDIAPLAYER_GETPLAYPOSITION = "MediaPlayer_getPlayPosition";

		internal const string FUNC_MEDIAPLAYER_GETSTREAMCOUNT = "MediaPlayer_getStreamCount";

		internal const string FUNC_MEDIAPLAYER_GETSTREAMINFO = "MediaPlayer_getStreamInfo";

		internal const string FUNC_MEDIAPLAYER_SETLOOPCOUNT = "MediaPlayer_setLoopCount";

		internal const string FUNC_MEDIAPLAYER_MUTEAUDIO = "MediaPlayer_muteAudio";

		internal const string FUNC_MEDIAPLAYER_ISAUDIOMUTED = "MediaPlayer_isAudioMuted";

		internal const string FUNC_MEDIAPLAYER_MUTEVIDEO = "MediaPlayer_muteVideo";

		internal const string FUNC_MEDIAPLAYER_ISVIDEOMUTED = "MediaPlayer_isVideoMuted";

		internal const string FUNC_MEDIAPLAYER_SETPLAYBACKSPEED = "MediaPlayer_setPlaybackSpeed";

		internal const string FUNC_MEDIAPLAYER_SELECTAUDIOTRACK = "MediaPlayer_selectAudioTrack";

		internal const string FUNC_MEDIAPLAYER_SETPLAYEROPTION = "MediaPlayer_setPlayerOption";

		internal const string FUNC_MEDIAPLAYER_SETPLAYEROPTION2 = "MediaPlayer_setPlayerOption2";

		internal const string FUNC_MEDIAPLAYER_TAKESCREENSHOT = "MediaPlayer_takeScreenshot";

		internal const string FUNC_MEDIAPLAYER_SELECTINTERNALSUBTITLE = "MediaPlayer_selectInternalSubtitle";

		internal const string FUNC_MEDIAPLAYER_SETEXTERNALSUBTITLE = "MediaPlayer_setExternalSubtitle";

		internal const string FUNC_MEDIAPLAYER_GETSTATE = "MediaPlayer_getState";

		internal const string FUNC_MEDIAPLAYER_MUTE = "MediaPlayer_mute";

		internal const string FUNC_MEDIAPLAYER_GETMUTE = "MediaPlayer_getMute";

		internal const string FUNC_MEDIAPLAYER_ADJUSTPLAYOUTVOLUME = "MediaPlayer_adjustPlayoutVolume";

		internal const string FUNC_MEDIAPLAYER_GETPLAYOUTVOLUME = "MediaPlayer_getPlayoutVolume";

		internal const string FUNC_MEDIAPLAYER_ADJUSTPUBLISHSIGNALVOLUME = "MediaPlayer_adjustPublishSignalVolume";

		internal const string FUNC_MEDIAPLAYER_GETPUBLISHSIGNALVOLUME = "MediaPlayer_getPublishSignalVolume";

		internal const string FUNC_MEDIAPLAYER_SETVIEW = "MediaPlayer_setView";

		internal const string FUNC_MEDIAPLAYER_SETRENDERMODE = "MediaPlayer_setRenderMode";

		internal const string FUNC_MEDIAPLAYER_REGISTERPLAYERSOURCEOBSERVER = "MediaPlayer_registerPlayerSourceObserver";

		internal const string FUNC_MEDIAPLAYER_UNREGISTERPLAYERSOURCEOBSERVER = "MediaPlayer_unregisterPlayerSourceObserver";

		internal const string FUNC_MEDIAPLAYER_REGISTERAUDIOFRAMEOBSERVER = "MediaPlayer_registerAudioFrameObserver";

		internal const string FUNC_MEDIAPLAYER_REGISTERAUDIOFRAMEOBSERVER2 = "MediaPlayer_registerAudioFrameObserver2";

		internal const string FUNC_MEDIAPLAYER_UNREGISTERAUDIOFRAMEOBSERVER = "MediaPlayer_unregisterAudioFrameObserver";

		internal const string FUNC_MEDIAPLAYER_REGISTERVIDEOFRAMEOBSERVER = "MediaPlayer_registerVideoFrameObserver";

		internal const string FUNC_MEDIAPLAYER_UNREGISTERVIDEOFRAMEOBSERVER = "MediaPlayer_unregisterVideoFrameObserver";

		internal const string FUNC_MEDIAPLAYER_REGISTERMEDIAPLAYERAUDIOSPECTRUMOBSERVER = "MediaPlayer_registerMediaPlayerAudioSpectrumObserver";

		internal const string FUNC_MEDIAPLAYER_UNREGISTERMEDIAPLAYERAUDIOSPECTRUMOBSERVER = "MediaPlayer_unregisterMediaPlayerAudioSpectrumObserver";

		internal const string FUNC_MEDIAPLAYER_SETAUDIODUALMONOMODE = "MediaPlayer_setAudioDualMonoMode";

		internal const string FUNC_MEDIAPLAYER_GETPLAYERSDKVERSION = "MediaPlayer_getPlayerSdkVersion";

		internal const string FUNC_MEDIAPLAYER_GETPLAYSRC = "MediaPlayer_getPlaySrc";

		internal const string FUNC_MEDIAPLAYER_OPENWITHAGORACDNSRC = "MediaPlayer_openWithAgoraCDNSrc";

		internal const string FUNC_MEDIAPLAYER_GETAGORACDNLINECOUNT = "MediaPlayer_getAgoraCDNLineCount";

		internal const string FUNC_MEDIAPLAYER_SWITCHAGORACDNLINEBYINDEX = "MediaPlayer_switchAgoraCDNLineByIndex";

		internal const string FUNC_MEDIAPLAYER_GETCURRENTAGORACDNINDEX = "MediaPlayer_getCurrentAgoraCDNIndex";

		internal const string FUNC_MEDIAPLAYER_ENABLEAUTOSWITCHAGORACDN = "MediaPlayer_enableAutoSwitchAgoraCDN";

		internal const string FUNC_MEDIAPLAYER_RENEWAGORACDNSRCTOKEN = "MediaPlayer_renewAgoraCDNSrcToken";

		internal const string FUNC_MEDIAPLAYER_SWITCHAGORACDNSRC = "MediaPlayer_switchAgoraCDNSrc";

		internal const string FUNC_MEDIAPLAYER_SWITCHSRC = "MediaPlayer_switchSrc";

		internal const string FUNC_MEDIAPLAYER_PRELOADSRC = "MediaPlayer_preloadSrc";

		internal const string FUNC_MEDIAPLAYER_PLAYPRELOADEDSRC = "MediaPlayer_playPreloadedSrc";

		internal const string FUNC_MEDIAPLAYER_UNLOADSRC = "MediaPlayer_unloadSrc";

		internal const string FUNC_MEDIAPLAYER_SETSPATIALAUDIOPARAMS = "MediaPlayer_setSpatialAudioParams";

		internal const string FUNC_MEDIAPLAYER_SETSOUNDPOSITIONPARAMS = "MediaPlayer_setSoundPositionParams";

		internal const string FUNC_AUDIODEVICEMANAGER_ENUMERATEPLAYBACKDEVICES = "AudioDeviceManager_enumeratePlaybackDevices";

		internal const string FUNC_AUDIODEVICEMANAGER_ENUMERATERECORDINGDEVICES = "AudioDeviceManager_enumerateRecordingDevices";

		internal const string FUNC_AUDIODEVICEMANAGER_SETPLAYBACKDEVICE = "AudioDeviceManager_setPlaybackDevice";

		internal const string FUNC_AUDIODEVICEMANAGER_GETPLAYBACKDEVICE = "AudioDeviceManager_getPlaybackDevice";

		internal const string FUNC_AUDIODEVICEMANAGER_GETPLAYBACKDEVICEINFO = "AudioDeviceManager_getPlaybackDeviceInfo";

		internal const string FUNC_AUDIODEVICEMANAGER_SETPLAYBACKDEVICEVOLUME = "AudioDeviceManager_setPlaybackDeviceVolume";

		internal const string FUNC_AUDIODEVICEMANAGER_GETPLAYBACKDEVICEVOLUME = "AudioDeviceManager_getPlaybackDeviceVolume";

		internal const string FUNC_AUDIODEVICEMANAGER_SETRECORDINGDEVICE = "AudioDeviceManager_setRecordingDevice";

		internal const string FUNC_AUDIODEVICEMANAGER_GETRECORDINGDEVICE = "AudioDeviceManager_getRecordingDevice";

		internal const string FUNC_AUDIODEVICEMANAGER_GETRECORDINGDEVICEINFO = "AudioDeviceManager_getRecordingDeviceInfo";

		internal const string FUNC_AUDIODEVICEMANAGER_SETRECORDINGDEVICEVOLUME = "AudioDeviceManager_setRecordingDeviceVolume";

		internal const string FUNC_AUDIODEVICEMANAGER_GETRECORDINGDEVICEVOLUME = "AudioDeviceManager_getRecordingDeviceVolume";

		internal const string FUNC_AUDIODEVICEMANAGER_SETPLAYBACKDEVICEMUTE = "AudioDeviceManager_setPlaybackDeviceMute";

		internal const string FUNC_AUDIODEVICEMANAGER_GETPLAYBACKDEVICEMUTE = "AudioDeviceManager_getPlaybackDeviceMute";

		internal const string FUNC_AUDIODEVICEMANAGER_SETRECORDINGDEVICEMUTE = "AudioDeviceManager_setRecordingDeviceMute";

		internal const string FUNC_AUDIODEVICEMANAGER_GETRECORDINGDEVICEMUTE = "AudioDeviceManager_getRecordingDeviceMute";

		internal const string FUNC_AUDIODEVICEMANAGER_STARTPLAYBACKDEVICETEST = "AudioDeviceManager_startPlaybackDeviceTest";

		internal const string FUNC_AUDIODEVICEMANAGER_STOPPLAYBACKDEVICETEST = "AudioDeviceManager_stopPlaybackDeviceTest";

		internal const string FUNC_AUDIODEVICEMANAGER_STARTRECORDINGDEVICETEST = "AudioDeviceManager_startRecordingDeviceTest";

		internal const string FUNC_AUDIODEVICEMANAGER_STOPRECORDINGDEVICETEST = "AudioDeviceManager_stopRecordingDeviceTest";

		internal const string FUNC_AUDIODEVICEMANAGER_STARTAUDIODEVICELOOPBACKTEST = "AudioDeviceManager_startAudioDeviceLoopbackTest";

		internal const string FUNC_AUDIODEVICEMANAGER_STOPAUDIODEVICELOOPBACKTEST = "AudioDeviceManager_stopAudioDeviceLoopbackTest";

		internal const string FUNC_AUDIODEVICEMANAGER_RELEASE = "AudioDeviceManager_release";

		internal const string FUNC_AUDIODEVICEMANAGER_FOLLOWSYSTEMRECORDINGDEVICE = "AudioDeviceManager_followSystemRecordingDevice";

		internal const string FUNC_AUDIODEVICEMANAGER_FOLLOWSYSTEMPLAYBACKDEVICE = "AudioDeviceManager_followSystemPlaybackDevice";

		internal const string FUNC_VIDEODEVICEMANAGER_ENUMERATEVIDEODEVICES = "VideoDeviceManager_enumerateVideoDevices";

		internal const string FUNC_VIDEODEVICEMANAGER_SETDEVICE = "VideoDeviceManager_setDevice";

		internal const string FUNC_VIDEODEVICEMANAGER_GETDEVICE = "VideoDeviceManager_getDevice";

		internal const string FUNC_VIDEODEVICEMANAGER_STARTDEVICETEST = "VideoDeviceManager_startDeviceTest";

		internal const string FUNC_VIDEODEVICEMANAGER_STOPDEVICETEST = "VideoDeviceManager_stopDeviceTest";

		internal const string FUNC_VIDEODEVICEMANAGER_RELEASE = "VideoDeviceManager_release";

		internal const string FUNC_VIDEODEVICEMANAGER_NUMBEROFCAPABILITIES = "VideoDeviceManager_numberOfCapabilities";

		internal const string FUNC_VIDEODEVICEMANAGER_GETCAPABILITY = "VideoDeviceManager_getCapability";

		internal const string FUNC_CLOUDSPATIALAUDIOENGINE_SETMAXAUDIORECVCOUNT = "CloudSpatialAudioEngine_setMaxAudioRecvCount";

		internal const string FUNC_CLOUDSPATIALAUDIOENGINE_SETAUDIORECVRANGE = "CloudSpatialAudioEngine_setAudioRecvRange";

		internal const string FUNC_CLOUDSPATIALAUDIOENGINE_SETDISTANCEUNIT = "CloudSpatialAudioEngine_setDistanceUnit";

		internal const string FUNC_CLOUDSPATIALAUDIOENGINE_UPDATESELFPOSITION = "CloudSpatialAudioEngine_updateSelfPosition";

		internal const string FUNC_CLOUDSPATIALAUDIOENGINE_UPDATESELFPOSITIONEX = "CloudSpatialAudioEngine_updateSelfPositionEx";

		internal const string FUNC_CLOUDSPATIALAUDIOENGINE_UPDATEPLAYERPOSITIONINFO = "CloudSpatialAudioEngine_updatePlayerPositionInfo";

		internal const string FUNC_CLOUDSPATIALAUDIOENGINE_SETPARAMETERS = "CloudSpatialAudioEngine_setParameters";

		internal const string FUNC_CLOUDSPATIALAUDIOENGINE_INITIALIZE = "CloudSpatialAudioEngine_initialize";

		internal const string FUNC_CLOUDSPATIALAUDIOENGINE_ADDEVENTHANDLER = "CloudSpatialAudioEngine_addEventHandler";

		internal const string FUNC_CLOUDSPATIALAUDIOENGINE_REMOVEEVENTHANDLER = "CloudSpatialAudioEngine_removeEventHandler";

		internal const string FUNC_CLOUDSPATIALAUDIOENGINE_ENABLESPATIALIZER = "CloudSpatialAudioEngine_enableSpatializer";

		internal const string FUNC_CLOUDSPATIALAUDIOENGINE_SETTEAMID = "CloudSpatialAudioEngine_setTeamId";

		internal const string FUNC_CLOUDSPATIALAUDIOENGINE_SETAUDIORANGEMODE = "CloudSpatialAudioEngine_setAudioRangeMode";

		internal const string FUNC_CLOUDSPATIALAUDIOENGINE_ENTERROOM = "CloudSpatialAudioEngine_enterRoom";

		internal const string FUNC_CLOUDSPATIALAUDIOENGINE_RENEWTOKEN = "CloudSpatialAudioEngine_renewToken";

		internal const string FUNC_CLOUDSPATIALAUDIOENGINE_EXITROOM = "CloudSpatialAudioEngine_exitRoom";

		internal const string FUNC_CLOUDSPATIALAUDIOENGINE_GETTEAMMATES = "CloudSpatialAudioEngine_getTeammates";

		internal const string FUNC_CLOUDSPATIALAUDIOENGINE_MUTELOCALAUDIOSTREAM = "CloudSpatialAudioEngine_muteLocalAudioStream";

		internal const string FUNC_CLOUDSPATIALAUDIOENGINE_MUTEALLREMOTEAUDIOSTREAMS = "CloudSpatialAudioEngine_muteAllRemoteAudioStreams";

		internal const string FUNC_LOCALSPATIALAUDIOENGINE_SETMAXAUDIORECVCOUNT = "LocalSpatialAudioEngine_setMaxAudioRecvCount";

		internal const string FUNC_LOCALSPATIALAUDIOENGINE_SETAUDIORECVRANGE = "LocalSpatialAudioEngine_setAudioRecvRange";

		internal const string FUNC_LOCALSPATIALAUDIOENGINE_SETDISTANCEUNIT = "LocalSpatialAudioEngine_setDistanceUnit";

		internal const string FUNC_LOCALSPATIALAUDIOENGINE_UPDATESELFPOSITION = "LocalSpatialAudioEngine_updateSelfPosition";

		internal const string FUNC_LOCALSPATIALAUDIOENGINE_UPDATESELFPOSITIONEX = "LocalSpatialAudioEngine_updateSelfPositionEx";

		internal const string FUNC_LOCALSPATIALAUDIOENGINE_UPDATEPLAYERPOSITIONINFO = "LocalSpatialAudioEngine_updatePlayerPositionInfo";

		internal const string FUNC_LOCALSPATIALAUDIOENGINE_SETPARAMETERS = "LocalSpatialAudioEngine_setParameters";

		internal const string FUNC_LOCALSPATIALAUDIOENGINE_UPDATEREMOTEPOSITION = "LocalSpatialAudioEngine_updateRemotePosition";

		internal const string FUNC_LOCALSPATIALAUDIOENGINE_REMOVEREMOTEPOSITION = "LocalSpatialAudioEngine_removeRemotePosition";

		internal const string FUNC_LOCALSPATIALAUDIOENGINE_CLEARREMOTEPOSITIONS = "LocalSpatialAudioEngine_clearRemotePositions";

		internal const string FUNC_LOCALSPATIALAUDIOENGINE_UPDATEREMOTEPOSITIONEX = "LocalSpatialAudioEngine_updateRemotePositionEx";

		internal const string FUNC_LOCALSPATIALAUDIOENGINE_REMOVEREMOTEPOSITIONEX = "LocalSpatialAudioEngine_removeRemotePositionEx";

		internal const string FUNC_LOCALSPATIALAUDIOENGINE_CLEARREMOTEPOSITIONSEX = "LocalSpatialAudioEngine_clearRemotePositionsEx";

		internal const string FUNC_LOCALSPATIALAUDIOENGINE_MUTELOCALAUDIOSTREAM = "LocalSpatialAudioEngine_muteLocalAudioStream";

		internal const string FUNC_LOCALSPATIALAUDIOENGINE_MUTEALLREMOTEAUDIOSTREAMS = "LocalSpatialAudioEngine_muteAllRemoteAudioStreams";

		internal const string FUNC_LOCALSPATIALAUDIOENGINE_INITIALIZE = "LocalSpatialAudioEngine_initialize";

		internal const string FUNC_RTCRAWDATAPLUGINMANAGER_REGISTERPLUGIN = "RtcRawDataPluginManager_registerPlugin";

		internal const string FUNC_RTCRAWDATAPLUGINMANAGER_GETPLUGINPARAMETER = "RtcRawDataPluginManager_getPluginParameter";

		internal const string FUNC_RTCRAWDATAPLUGINMANAGER_UNREGISTERPLUGIN = "RtcRawDataPluginManager_unRegisterPlugin";

		internal const string FUNC_RTCRAWDATAPLUGINMANAGER_HASPLUGIN = "RtcRawDataPluginManager_hasPlugin";

		internal const string FUNC_RTCRAWDATAPLUGINMANAGER_ENABLEPLUGIN = "RtcRawDataPluginManager_enablePlugin";

		internal const string FUNC_RTCRAWDATAPLUGINMANAGER_DELETEPLUGIN = "RtcRawDataPluginManager_deletePlugin";

		internal const string FUNC_RTCRAWDATAPLUGINMANAGER_GETPLUGINS = "RtcRawDataPluginManager_getPlugins";

		internal const string FUNC_RTCRAWDATAPLUGINMANAGER_SETPLUGINPARAMETER = "RtcRawDataPluginManager_setPluginParameter";

		internal const string FUNC_RTCRAWDATAPLUGINMANAGER_REMOVEALLPLUGINS = "RtcRawDataPluginManager_removeAllPlugins";

		internal const string FUNC_MEDIAENGINE_REGISTERAUDIOFRAMEOBSERVER = "MediaEngine_registerAudioFrameObserver";

		internal const string FUNC_MEDIAENGINE_REGISTERVIDEOFRAMEOBSERVER = "MediaEngine_registerVideoFrameObserver";

		internal const string FUNC_MEDIAENGINE_REGISTERVIDEOENCODEDIMAGERECEIVER = "MediaEngine_registerVideoEncodedImageReceiver";

		internal const string FUNC_MEDIAENGINE_PUSHAUDIOFRAME = "MediaEngine_pushAudioFrame";

		internal const string FUNC_MEDIAENGINE_PUSHCAPTUREAUDIOFRAME = "MediaEngine_pushCaptureAudioFrame";

		internal const string FUNC_MEDIAENGINE_PUSHREVERSEAUDIOFRAME = "MediaEngine_pushReverseAudioFrame";

		internal const string FUNC_MEDIAENGINE_PUSHDIRECTAUDIOFRAME = "MediaEngine_pushDirectAudioFrame";

		internal const string FUNC_MEDIAENGINE_PULLAUDIOFRAME = "MediaEngine_pullAudioFrame";

		internal const string FUNC_MEDIAENGINE_SETEXTERNALVIDEOSOURCE = "MediaEngine_setExternalVideoSource";

		internal const string FUNC_MEDIAENGINE_SETEXTERNALAUDIOSOURCE = "MediaEngine_setExternalAudioSource";

		internal const string FUNC_MEDIAENGINE_SETEXTERNALAUDIOSINK = "MediaEngine_setExternalAudioSink";

		internal const string FUNC_MEDIAENGINE_ENABLECUSTOMAUDIOLOCALPLAYBACK = "MediaEngine_enableCustomAudioLocalPlayback";

		internal const string FUNC_MEDIAENGINE_SETDIRECTEXTERNALAUDIOSOURCE = "MediaEngine_setDirectExternalAudioSource";

		internal const string FUNC_MEDIAENGINE_PUSHVIDEOFRAME = "MediaEngine_pushVideoFrame";

		internal const string FUNC_MEDIAENGINE_PUSHVIDEOFRAME2 = "MediaEngine_pushVideoFrame2";

		internal const string FUNC_MEDIAENGINE_PUSHENCODEDVIDEOIMAGE = "MediaEngine_pushEncodedVideoImage";

		internal const string FUNC_MEDIAENGINE_PUSHENCODEDVIDEOIMAGE2 = "MediaEngine_pushEncodedVideoImage2";

		internal const string FUNC_MEDIAENGINE_RELEASE = "MediaEngine_release";

		internal const string FUNC_RTCRAWDATA_REGISTERAUDIOFRAMEOBSERVER = "RtcRawData_registerAudioFrameObserver";

		internal const string FUNC_RTCRAWDATA_UNREGISTERAUDIOFRAMEOBSERVER = "RtcRawData_unRegisterAudioFrameObserver";

		internal const string FUNC_RTCRAWDATA_REGISTERVIDEOFRAMEOBSERVER = "RtcRawData_registerVideoFrameObserver";

		internal const string FUNC_RTCRAWDATA_UNREGISTERVIDEOFRAMEOBSERVER = "RtcRawData_unRegisterVideoFrameObserver";

		internal const string FUNC_RTCRAWDATA_REGISTERVIDEOENCODEDIMAGERECEIVER = "RtcRawData_registerVideoEncodedImageReceiver";

		internal const string FUNC_RTCRAWDATA_UNREGISTERVIDEOENCODEDIMAGERECEIVER = "RtcRawData_unRegisterVideoEncodedImageReceiver";

		internal const string FUNC_RTCRAWDATA_REGISTERAUDIOENCODEDFRAMEOBSERVER = "RtcRawData_registerAudioEncodedFrameObserver";

		internal const string FUNC_RTCRAWDATA_UNREGISTERAUDIOENCODEDFRAMEOBSERVER = "RtcRawData_unRegisterAudioEncodedFrameObserver";

		internal const string FUNC_RTCRAWDATA_ATTACH = "RtcRawData_attach";

		internal const string FUNC_RTCRAWDATA_DETACH = "RtcRawData_detach";

		internal const string FUNC_MEDIAPLAYERCACHEMANAGER_ENABLEAUTOREMOVECACHE = "MediaPlayerCacheManager_enableAutoRemoveCache";

		internal const string FUNC_MEDIAPLAYERCACHEMANAGER_GETCACHEDIR = "MediaPlayerCacheManager_getCacheDir";

		internal const string FUNC_MEDIAPLAYERCACHEMANAGER_GETCACHEFILECOUNT = "MediaPlayerCacheManager_getCacheFileCount";

		internal const string FUNC_MEDIAPLAYERCACHEMANAGER_GETMAXCACHEFILECOUNT = "MediaPlayerCacheManager_getMaxCacheFileCount";

		internal const string FUNC_MEDIAPLAYERCACHEMANAGER_GETMAXCACHEFILESIZE = "MediaPlayerCacheManager_getMaxCacheFileSize";

		internal const string FUNC_MEDIAPLAYERCACHEMANAGER_REMOVEALLCACHES = "MediaPlayerCacheManager_removeAllCaches";

		internal const string FUNC_MEDIAPLAYERCACHEMANAGER_REMOVECACHEBYURI = "MediaPlayerCacheManager_removeCacheByUri";

		internal const string FUNC_MEDIAPLAYERCACHEMANAGER_REMOVEOLDCACHE = "MediaPlayerCacheManager_removeOldCache";

		internal const string FUNC_MEDIAPLAYERCACHEMANAGER_SETCACHEDIR = "MediaPlayerCacheManager_setCacheDir";

		internal const string FUNC_MEDIAPLAYERCACHEMANAGER_SETMAXCACHEFILECOUNT = "MediaPlayerCacheManager_setMaxCacheFileCount";

		internal const string FUNC_MEDIAPLAYERCACHEMANAGER_SETMAXCACHEFILESIZE = "MediaPlayerCacheManager_setMaxCacheFileSize";

		internal const string FUNC_MEDIARECORDER_SETMEDIARECORDEROBSERVER = "MediaRecorder_setMediaRecorderObserver";

		internal const string FUNC_MEDIARECORDER_STARTRECORDING = "MediaRecorder_startRecording";

		internal const string FUNC_MEDIARECORDER_STOPRECORDING = "MediaRecorder_stopRecording";
	}
	internal struct IrisAudioFrame
	{
		internal AUDIO_FRAME_TYPE type;

		internal int samples;

		internal int bytes_per_sample;

		internal int channels;

		internal int samples_per_sec;

		internal IntPtr buffer;

		internal long buffer_length;

		internal long render_time_ms;

		internal int av_sync_type;
	}
	internal struct IrisEncodedAudioFrameInfo
	{
		internal AUDIO_CODEC_TYPE codec;

		internal int sampleRateHz;

		internal int samplesPerChannel;

		internal int numberOfChannels;

		internal IrisEncodedAudioFrameAdvancedSettings advancedSettings;

		internal long captureTimeMs;
	}
	internal struct IrisEncodedAudioFrameAdvancedSettings
	{
		internal bool speech;

		internal bool sendEvenIfEmpty;
	}
	internal struct IrisVideoFrame
	{
		internal VIDEO_OBSERVER_FRAME_TYPE type;

		internal int width;

		internal int height;

		internal int y_stride;

		internal int u_stride;

		internal int v_stride;

		internal IntPtr y_buffer;

		internal IntPtr u_buffer;

		internal IntPtr v_buffer;

		internal uint y_buffer_length;

		internal uint u_buffer_length;

		internal uint v_buffer_length;

		internal int rotation;

		internal long render_time_ms;

		internal int av_sync_type;

		internal IntPtr metadata_buffer;

		internal int metadata_size;

		internal IntPtr sharedContext;

		internal int textureId;

		[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
		internal float[] matrix;
	}
	internal struct IrisWindowCollection
	{
		internal IntPtr windows;

		internal uint length;
	}
	internal struct IrisDisplayCollection
	{
		internal IntPtr displays;

		internal int length;
	}
	internal struct IrisWindow
	{
		internal ulong id;

		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 512)]
		internal string name;

		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 512)]
		internal string owner_name;

		internal IrisRect bounds;

		internal IrisRect work_area;
	}
	internal struct IrisDisplay
	{
		internal uint id;

		internal float scale;

		internal IrisRect bounds;

		internal IrisRect work_area;

		internal int rotation;
	}
	internal struct IrisRect
	{
		internal double x;

		internal double y;

		internal double width;

		internal double height;
	}
	internal struct IrisEncodedVideoFrameInfo
	{
		internal int codecType;

		internal int width;

		internal int height;

		internal int framesPerSecond;

		internal int frameType;

		internal int rotation;

		internal int trackId;

		internal long captureTimeMs;

		internal uint uid;

		internal int streamType;
	}
	public enum IRIS_BYTES_PER_SAMPLE
	{
		IRIS_TWO_BYTES_PER_SAMPLE = 2
	}
	internal struct IrisAudioPcmFrame
	{
		internal uint capture_timestamp;

		internal ulong samples_per_channel_;

		internal int sample_rate_hz_;

		internal IRIS_BYTES_PER_SAMPLE bytes_per_sample;

		internal ulong num_channels_;

		[MarshalAs(UnmanagedType.LPArray, SizeConst = 3840)]
		internal short[] data_;
	}
	internal struct IrisAudioSpectrumData
	{
		internal IntPtr audioSpectrumData;

		internal int dataLength;
	}
	internal struct IrisUserAudioSpectrumInfo
	{
		internal uint uid;

		internal IrisAudioSpectrumData spectrumData;
	}
	internal struct IrisVideoFrameBufferConfig
	{
		internal int type;

		internal uint id;

		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 512)]
		internal string key;
	}
	internal struct IrisMetadata
	{
		internal uint uid;

		internal uint size;

		internal IntPtr buffer;

		internal long timeStampMs;
	}
	internal class AudioFrameWithoutBuffer
	{
		public AUDIO_FRAME_TYPE type { get; set; }

		public int samplesPerChannel { get; set; }

		public BYTES_PER_SAMPLE bytesPerSample { get; set; }

		public ulong bufferPtr { get; set; }

		public int channels { get; set; }

		public int samplesPerSec { get; set; }

		public long renderTimeMs { get; set; }

		public int avsync_type { get; set; }

		public AudioFrameWithoutBuffer()
		{
		}

		public AudioFrameWithoutBuffer(AUDIO_FRAME_TYPE type, int samplesPerChannel, BYTES_PER_SAMPLE bytesPerSample, int channels, int samplesPerSec, long renderTimeMs, int avsync_type)
		{
			this.type = type;
			this.samplesPerChannel = samplesPerChannel;
			this.bytesPerSample = bytesPerSample;
			this.channels = channels;
			this.samplesPerSec = samplesPerSec;
			this.renderTimeMs = renderTimeMs;
			this.avsync_type = avsync_type;
		}
	}
	internal class ThumbImageBufferInternal
	{
		public uint length { get; set; }

		public uint width { get; set; }

		public uint height { get; set; }

		public long buffer { get; set; }

		public ThumbImageBufferInternal()
		{
			buffer = 0L;
			length = 0u;
			width = 0u;
			height = 0u;
		}
	}
	internal class ScreenCaptureSourceInfoInternal
	{
		public ScreenCaptureSourceType type { get; set; }

		public ulong sourceId { get; set; }

		public string sourceName { get; set; }

		public ThumbImageBufferInternal thumbImage { get; set; }

		public ThumbImageBufferInternal iconImage { get; set; }

		public string processPath { get; set; }

		public string sourceTitle { get; set; }

		public bool primaryMonitor { get; set; }

		public bool isOccluded { get; set; }

		public ScreenCaptureSourceInfoInternal()
		{
			type = ScreenCaptureSourceType.ScreenCaptureSourceType_Unknown;
			sourceId = 0uL;
			sourceName = "";
			processPath = "";
			sourceTitle = "";
			primaryMonitor = false;
			isOccluded = false;
			thumbImage = new ThumbImageBufferInternal();
			iconImage = new ThumbImageBufferInternal();
		}
	}
	internal enum IRIS_VIDEO_PROCESS_ERR
	{
		ERR_OK = 0,
		ERR_NULL_POINTER = 1,
		ERR_SIZE_NOT_MATCHING = 2,
		ERR_BUFFER_EMPTY = 5
	}
	internal static class AgoraRtcNative
	{
		private const string AgoraRtcLibName = "AgoraRtcWrapper";

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern IntPtr CreateIrisApiEngine();

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern void DestroyIrisApiEngine(IntPtr engine_ptr);

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern IntPtr SetIrisRtcEngineEventHandler(IntPtr engine_ptr, IntPtr event_handler);

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern void UnsetIrisRtcEngineEventHandler(IntPtr engine_ptr, IntPtr handle);

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern int CallIrisApi(IntPtr engine_ptr, string func_name, string @params, uint paramLength, IntPtr bufferPtr, uint bufferLength, out CharAssistant result);

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern IntPtr RegisterRtcAudioSpectrumObserver(IntPtr engine_ptr, IntPtr observer, string @params);

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern int UnRegisterRtcAudioSpectrumObserver(IntPtr engine_ptr, IntPtr handle, string @params);

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern IntPtr RegisterAudioFrameObserver(IntPtr engine_ptr, IntPtr observerNative, int order, string identifier);

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern void UnRegisterAudioFrameObserver(IntPtr engine_ptr, IntPtr handle, string identifier);

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern IntPtr RegisterVideoFrameObserver(IntPtr engine_ptr, IntPtr observerNative, int order, string identifier);

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern void UnRegisterVideoFrameObserver(IntPtr engine_ptr, IntPtr handle, string identifier);

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern IntPtr RegisterAudioEncodedFrameObserver(IntPtr engine_ptr, IntPtr observerNative, string @params);

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern void UnRegisterAudioEncodedFrameObserver(IntPtr engine_ptr, IntPtr handle, string identifier);

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern IntPtr RegisterVideoEncodedFrameObserver(IntPtr engine_ptr, IntPtr receiverNative, int order, string identifier);

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern void UnRegisterVideoEncodedFrameObserver(IntPtr engine_ptr, IntPtr handle, string identifier);

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern void Attach(IntPtr engine_ptr, IntPtr manager_ptr);

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern void Detach(IntPtr engine_ptr, IntPtr manager_ptr);

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern IntPtr CreateIrisVideoFrameBufferManager();

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern void FreeIrisVideoFrameBufferManager(IntPtr manager_ptr);

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern IntPtr EnableVideoFrameBuffer(IntPtr manager_ptr, ref IrisCVideoFrameBufferNative buffer, uint uid = 0u, string channel_id = "");

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern void DisableVideoFrameBufferByUid(IntPtr manager_ptr, uint uid = 0u, string channel_id = "");

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern IRIS_VIDEO_PROCESS_ERR GetVideoFrame(IntPtr manager_ptr, ref IrisVideoFrame video_frame, out bool is_new_frame, uint uid, string channel_id = "");

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern IntPtr EnableVideoFrameBufferByConfig(IntPtr manager_ptr, ref IrisCVideoFrameBufferNative buffer, ref IrisVideoFrameBufferConfig config);

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern void DisableVideoFrameBufferByDelegate(IntPtr manager_ptr, IntPtr handle);

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern void DisableVideoFrameBufferByConfig(IntPtr manager_ptr, ref IrisVideoFrameBufferConfig config, IntPtr handle);

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern void DisableAllVideoFrameBuffer(IntPtr manager_ptr);

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern IRIS_VIDEO_PROCESS_ERR GetVideoFrameByConfig(IntPtr manager_ptr, ref IrisVideoFrame video_frame, out bool is_new_frame, ref IrisVideoFrameBufferConfig config);

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern bool StartDumpVideo(IntPtr manager_ptr, VIDEO_SOURCE_TYPE type, string dir);

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern bool StopDumpVideo(IntPtr manager_ptr);

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern bool ConvertVideoFrame(ref IrisVideoFrame dst, ref IrisVideoFrame src);

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern void ClearVideoFrame(ref IrisVideoFrame video_frame);

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern IntPtr SetIrisMediaPlayerEventHandler(IntPtr engine_ptr, IntPtr event_handler);

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern void UnsetIrisMediaPlayerEventHandler(IntPtr engine_ptr, IntPtr handle);

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern IntPtr RegisterMediaPlayerAudioFrameObserver(IntPtr engine_ptr, IntPtr observer, string @params);

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern void UnRegisterMediaPlayerAudioFrameObserver(IntPtr engine_ptr, IntPtr handle, string @params);

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern IntPtr RegisterMediaPlayerAudioSpectrumObserver(IntPtr engine_ptr, IntPtr observer, string @params);

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern void UnRegisterMediaPlayerAudioSpectrumObserver(IntPtr engine_ptr, IntPtr handle, string @params);

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern IntPtr MediaPlayerOpenWithCustomSource(IntPtr engine_ptr, IntPtr provider, string @params);

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern int MediaPlayerUnOpenWithCustomSource(IntPtr engine_ptr, IntPtr handle, string @params);

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern IntPtr MediaPlayerOpenWithMediaSource(IntPtr engine_ptr, IntPtr provider, string @params);

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern int MediaPlayerUnOpenWithMediaSource(IntPtr engine_ptr, IntPtr handle, string @params);

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern IntPtr SetIrisCloudAudioEngineEventHandler(IntPtr engine_ptr, IntPtr event_handler);

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern void UnsetIrisCloudAudioEngineEventHandler(IntPtr engine_ptr, IntPtr handle);

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern IntPtr RegisterMediaMetadataObserver(IntPtr engine_ptr, IntPtr observer, string @params);

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern void UnRegisterMediaMetadataObserver(IntPtr engine_ptr, IntPtr handle, string @params);

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern IntPtr SetIrisMediaRecorderEventHandler(IntPtr engine_ptr, IntPtr event_handler);

		[DllImport("AgoraRtcWrapper", CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
		internal static extern void UnsetIrisMediaRecorderEventHandler(IntPtr engine_ptr, IntPtr handle);
	}
	[UnmanagedFunctionPointer(CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
	internal delegate bool Func_Bool_Native();
	[UnmanagedFunctionPointer(CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
	internal delegate uint Func_Uint32_t_Native();
	[UnmanagedFunctionPointer(CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
	internal delegate void Func_Event_Native(string @event, string data, IntPtr buffer, IntPtr length, uint buffer_count);
	[UnmanagedFunctionPointer(CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
	internal delegate void Func_EventEx_Native(string @event, string data, IntPtr result, IntPtr buffer, IntPtr length, uint buffer_count);
	internal struct IrisCEventHandlerNative
	{
		internal IntPtr onEvent;

		internal IntPtr onEventEx;
	}
	internal struct IrisCEventHandler
	{
		internal Func_Event_Native OnEvent;

		internal Func_EventEx_Native OnEventEx;
	}
	[UnmanagedFunctionPointer(CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
	internal delegate bool Func_AudioFrameLocal_Native(string channelId, IntPtr audio_frame);
	[UnmanagedFunctionPointer(CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
	internal delegate bool Func_AudioFrameRemote_Native(string channel_id, uint uid, IntPtr audio_frame);
	[UnmanagedFunctionPointer(CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
	internal delegate bool Func_AudioFrameRemoteStringUid_Native(string channel_id, string uid, IntPtr audio_frame);
	[UnmanagedFunctionPointer(CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
	internal delegate IrisAudioParams Func_AudioParams_Native();
	[UnmanagedFunctionPointer(CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
	internal delegate int Func_AudioFramePosition_Native();
	public enum IRIS_AUDIO_FRAME_POSITION
	{
		IRIS_AUDIO_FRAME_POSITION_NONE = 0,
		IRIS_AUDIO_FRAME_POSITION_PLAYBACK = 1,
		IRIS_AUDIO_FRAME_POSITION_RECORD = 2,
		IRIS_AUDIO_FRAME_POSITION_MIXED = 4,
		IRIS_AUDIO_FRAME_POSITION_BEFORE_MIXING = 8
	}
	public enum IRIS_RAW_AUDIO_FRAME_OP_MODE_TYPE
	{
		IRIS_RAW_AUDIO_FRAME_OP_MODE_READ_ONLY = 0,
		IRIS_RAW_AUDIO_FRAME_OP_MODE_READ_WRITE = 2
	}
	internal struct IrisAudioParams
	{
		internal int sample_rate;

		internal int channels;

		internal IRIS_RAW_AUDIO_FRAME_OP_MODE_TYPE mode;

		internal int samples_per_call;
	}
	internal struct IrisRtcCAudioFrameObserverNative
	{
		internal IntPtr OnRecordAudioFrame;

		internal IntPtr OnPlaybackAudioFrame;

		internal IntPtr OnMixedAudioFrame;

		internal IntPtr OnPlaybackAudioFrameBeforeMixing;

		internal IntPtr OnPlaybackAudioFrameBeforeMixing2;

		internal IntPtr GetPlaybackAudioParams;

		internal IntPtr GetRecordAudioParams;

		internal IntPtr GetMixedAudioParams;

		internal IntPtr GetObservedAudioFramePosition;
	}
	internal struct IrisRtcCAudioFrameObserver
	{
		internal Func_AudioFrameLocal_Native OnRecordAudioFrame;

		internal Func_AudioFrameLocal_Native OnPlaybackAudioFrame;

		internal Func_AudioFrameLocal_Native OnMixedAudioFrame;

		internal Func_AudioFrameRemote_Native OnPlaybackAudioFrameBeforeMixing;

		internal Func_AudioFrameRemoteStringUid_Native OnPlaybackAudioFrameBeforeMixing2;

		internal Func_AudioParams_Native GetPlaybackAudioParams;

		internal Func_AudioParams_Native GetRecordAudioParams;

		internal Func_AudioParams_Native GetMixedAudioParams;

		internal Func_AudioFramePosition_Native GetObservedAudioFramePosition;
	}
	[UnmanagedFunctionPointer(CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
	internal delegate void Func_RecordAudioEncodedFrame_Native(IntPtr frame_buffer, int length, IntPtr encoded_audio_frame_info);
	internal struct IrisRtcCAudioEncodedFrameObserverNative
	{
		internal IntPtr OnRecordAudioEncodedFrame;

		internal IntPtr OnPlaybackAudioEncodedFrame;

		internal IntPtr OnMixedAudioEncodedFrame;
	}
	internal struct IrisRtcCAudioEncodedFrameObserver
	{
		internal Func_RecordAudioEncodedFrame_Native OnRecordAudioEncodedFrame;

		internal Func_RecordAudioEncodedFrame_Native OnPlaybackAudioEncodedFrame;

		internal Func_RecordAudioEncodedFrame_Native OnMixedAudioEncodedFrame;
	}
	[UnmanagedFunctionPointer(CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
	internal delegate bool Func_VideoFrameLocal_Native(IntPtr video_frame);
	[UnmanagedFunctionPointer(CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
	internal delegate bool Func_VideoCaptureLocal_Native(IntPtr video_frame, IntPtr config);
	[UnmanagedFunctionPointer(CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
	internal delegate bool Func_VideoFrameRemote_Native(string channel_id, uint uid, IntPtr video_frame);
	[UnmanagedFunctionPointer(CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
	internal delegate bool Func_VideoFrameEx_Native(string channel_id, uint uid, IntPtr video_frame);
	[UnmanagedFunctionPointer(CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
	internal delegate void Func_VideoFrame_Native(IntPtr video_frame, IntPtr config, bool resize);
	internal struct IrisRtcCVideoFrameObserverNative
	{
		internal IntPtr OnCaptureVideoFrame;

		internal IntPtr OnPreEncodeVideoFrame;

		internal IntPtr OnRenderVideoFrame;

		internal IntPtr GetObservedFramePosition;
	}
	internal struct IrisRtcCVideoFrameObserver
	{
		internal Func_VideoCaptureLocal_Native OnCaptureVideoFrame;

		internal Func_VideoCaptureLocal_Native OnPreEncodeVideoFrame;

		internal Func_VideoFrameRemote_Native OnRenderVideoFrame;

		internal Func_Uint32_t_Native GetObservedFramePosition;
	}
	internal struct IrisCVideoFrameBufferNative
	{
		internal int type;

		internal IntPtr OnVideoFrameReceived;

		internal int bytes_per_row_alignment;
	}
	internal struct IrisCVideoFrameBuffer
	{
		internal VIDEO_OBSERVER_FRAME_TYPE type;

		internal Func_VideoFrame_Native OnVideoFrameReceived;

		internal int bytes_per_row_alignment;
	}
	[UnmanagedFunctionPointer(CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
	internal delegate bool Func_EncodedVideoFrameObserver_Native(uint uid, IntPtr imageBuffer, ulong length, IntPtr videoEncodedFrameInfo);
	internal struct IrisRtcCVideoEncodedFrameObserverNative
	{
		internal IntPtr OnEncodedVideoFrameReceived;
	}
	internal struct IrisRtcCVideoEncodedFrameObserver
	{
		internal Func_EncodedVideoFrameObserver_Native OnEncodedVideoFrameReceived;
	}
	[UnmanagedFunctionPointer(CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
	internal delegate bool Func_AudioOnFrame_Native(IntPtr audio_frame, int mediaPlayerId);
	[UnmanagedFunctionPointer(CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
	internal delegate long Func_OnSeek_Native(long offset, int whence, int playerId);
	[UnmanagedFunctionPointer(CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
	internal delegate int Func_onReadData_Native(IntPtr buffer, int bufferSize, int playerId);
	[UnmanagedFunctionPointer(CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
	internal delegate bool Func_LocalAudioSpectrum_Native(int playerId, IntPtr data);
	[UnmanagedFunctionPointer(CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
	internal delegate bool Func_RemoteAudioSpectrum_Native(int playerId, IntPtr audio_frame, uint spectrumNumber);
	internal struct IrisMediaPlayerCAudioSpectrumObserverNative
	{
		internal IntPtr onLocalAudioSpectrum;

		internal IntPtr onRemoteAudioSpectrum;
	}
	internal struct IrisMediaPlayerCAudioSpectrumObserver
	{
		internal Func_LocalAudioSpectrum_Native OnLocalAudioSpectrum;

		internal Func_RemoteAudioSpectrum_Native OnRemoteAudioSpectrum;
	}
	internal struct IrisMediaPlayerCAudioFrameObserverNative
	{
		internal IntPtr onFrame;
	}
	internal struct IrisMediaPlayerCAudioFrameObserver
	{
		internal Func_AudioOnFrame_Native OnFrame;
	}
	internal struct IrisMediaPlayerCCustomProviderNative
	{
		internal IntPtr onSeek;

		internal IntPtr onReadData;
	}
	internal struct IrisMediaPlayerCCustomProvider
	{
		internal Func_OnSeek_Native OnSeek;

		internal Func_onReadData_Native OnReadData;
	}
	[UnmanagedFunctionPointer(CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
	internal delegate int Func_MaxMetadataSize_Native();
	[UnmanagedFunctionPointer(CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
	internal delegate bool Func_ReadyToSendMetadata_Native(ref IrisMetadata metaData, VIDEO_SOURCE_TYPE source_type);
	[UnmanagedFunctionPointer(CallingConvention.Cdecl, CharSet = CharSet.Ansi)]
	internal delegate void Func_MetadataReceived_Native(IntPtr metadata);
	internal struct IrisCMediaMetadataObserverNative
	{
		internal IntPtr getMaxMetadataSize;

		internal IntPtr onReadyToSendMetadata;

		internal IntPtr onMetadataReceived;
	}
	internal struct IrisCMediaMetadataObserver
	{
		internal Func_MaxMetadataSize_Native GetMaxMetadataSize;

		internal Func_ReadyToSendMetadata_Native OnReadyToSendMetadata;

		internal Func_MetadataReceived_Native OnMetadataReceived;
	}
	internal static class AudioEncodedFrameObserverNative
	{
		internal static IAudioEncodedFrameObserver AudioEncodedFrameObserver;

		internal static EncodedAudioFrameInfo IrisEncodedAudioFrameInfo2EncodedAudioFrameInfo(ref IrisEncodedAudioFrameInfo from)
		{
			EncodedAudioFrameInfo encodedAudioFrameInfo = new EncodedAudioFrameInfo();
			encodedAudioFrameInfo.codec = from.codec;
			encodedAudioFrameInfo.sampleRateHz = from.sampleRateHz;
			encodedAudioFrameInfo.samplesPerChannel = from.samplesPerChannel;
			encodedAudioFrameInfo.numberOfChannels = from.numberOfChannels;
			encodedAudioFrameInfo.advancedSettings = new EncodedAudioFrameAdvancedSettings();
			encodedAudioFrameInfo.advancedSettings.speech = from.advancedSettings.speech;
			encodedAudioFrameInfo.advancedSettings.sendEvenIfEmpty = from.advancedSettings.sendEvenIfEmpty;
			encodedAudioFrameInfo.captureTimeMs = from.captureTimeMs;
			return encodedAudioFrameInfo;
		}

		[MonoPInvokeCallback(typeof(Func_RecordAudioEncodedFrame_Native))]
		internal static void OnRecordAudioEncodedFrame(IntPtr frame_buffer, int length, IntPtr encoded_audio_frame_info)
		{
			if (AudioEncodedFrameObserver == null)
			{
				return;
			}
			IrisEncodedAudioFrameInfo from = (IrisEncodedAudioFrameInfo)Marshal.PtrToStructure(encoded_audio_frame_info, typeof(IrisEncodedAudioFrameInfo));
			EncodedAudioFrameInfo audioEncodedFrameInfo = IrisEncodedAudioFrameInfo2EncodedAudioFrameInfo(ref from);
			try
			{
				AudioEncodedFrameObserver.OnRecordAudioEncodedFrame(frame_buffer, length, audioEncodedFrameInfo);
			}
			catch (Exception ex)
			{
				AgoraLog.LogError("[Exception] IAudioEncodedFrameObserver.OnRecordAudioEncodedFrame: " + ex);
			}
		}

		[MonoPInvokeCallback(typeof(Func_RecordAudioEncodedFrame_Native))]
		internal static void OnPlaybackAudioEncodedFrame(IntPtr frame_buffer, int length, IntPtr encoded_audio_frame_info)
		{
			if (AudioEncodedFrameObserver == null)
			{
				return;
			}
			IrisEncodedAudioFrameInfo from = (IrisEncodedAudioFrameInfo)Marshal.PtrToStructure(encoded_audio_frame_info, typeof(IrisEncodedAudioFrameInfo));
			EncodedAudioFrameInfo audioEncodedFrameInfo = IrisEncodedAudioFrameInfo2EncodedAudioFrameInfo(ref from);
			try
			{
				AudioEncodedFrameObserver.OnPlaybackAudioEncodedFrame(frame_buffer, length, audioEncodedFrameInfo);
			}
			catch (Exception ex)
			{
				AgoraLog.LogError("[Exception] IAudioEncodedFrameObserver.OnPlaybackAudioEncodedFrame: " + ex);
			}
		}

		[MonoPInvokeCallback(typeof(Func_RecordAudioEncodedFrame_Native))]
		internal static void OnMixedAudioEncodedFrame(IntPtr frame_buffer, int length, IntPtr encoded_audio_frame_info)
		{
			if (AudioEncodedFrameObserver == null)
			{
				return;
			}
			IrisEncodedAudioFrameInfo from = (IrisEncodedAudioFrameInfo)Marshal.PtrToStructure(encoded_audio_frame_info, typeof(IrisEncodedAudioFrameInfo));
			EncodedAudioFrameInfo audioEncodedFrameInfo = IrisEncodedAudioFrameInfo2EncodedAudioFrameInfo(ref from);
			try
			{
				AudioEncodedFrameObserver.OnMixedAudioEncodedFrame(frame_buffer, length, audioEncodedFrameInfo);
			}
			catch (Exception ex)
			{
				AgoraLog.LogError("[Exception] IAudioEncodedFrameObserver.OnMixedAudioEncodedFrame: " + ex);
			}
		}
	}
	internal static class AudioFrameObserverNative
	{
		private static class LocalAudioFrames
		{
			internal static AudioFrame RecordAudioFrame = new AudioFrame();

			internal static AudioFrame PlaybackAudioFrame = new AudioFrame();

			internal static AudioFrame MixedAudioFrame = new AudioFrame();

			internal static Dictionary<string, Dictionary<uint, AudioFrame>> AudioFrameBeforeMixingEx = new Dictionary<string, Dictionary<uint, AudioFrame>>();

			internal static Dictionary<string, Dictionary<string, AudioFrame>> AudioFrameBeforeMixingEx2 = new Dictionary<string, Dictionary<string, AudioFrame>>();

			internal static IrisAudioParams irisAudioParams = default(IrisAudioParams);
		}

		internal static OBSERVER_MODE mode = OBSERVER_MODE.INTPTR;

		internal static IAudioFrameObserver AudioFrameObserver;

		private static AudioFrame ProcessAudioFrameReceived(IntPtr audioFramePtr, string channelId, uint uid)
		{
			IrisAudioFrame irisAudioFrame = (IrisAudioFrame)(Marshal.PtrToStructure(audioFramePtr, typeof(IrisAudioFrame)) ?? ((object)default(IrisAudioFrame)));
			AudioFrame audioFrame = null;
			if (channelId == "")
			{
				switch (uid)
				{
				case 0u:
					audioFrame = LocalAudioFrames.RecordAudioFrame;
					break;
				case 1u:
					audioFrame = LocalAudioFrames.PlaybackAudioFrame;
					break;
				case 2u:
					audioFrame = LocalAudioFrames.MixedAudioFrame;
					break;
				}
			}
			else
			{
				if (!LocalAudioFrames.AudioFrameBeforeMixingEx.ContainsKey(channelId))
				{
					LocalAudioFrames.AudioFrameBeforeMixingEx[channelId] = new Dictionary<uint, AudioFrame>();
					LocalAudioFrames.AudioFrameBeforeMixingEx[channelId][uid] = new AudioFrame();
				}
				else if (!LocalAudioFrames.AudioFrameBeforeMixingEx[channelId].ContainsKey(uid))
				{
					LocalAudioFrames.AudioFrameBeforeMixingEx[channelId][uid] = new AudioFrame();
				}
				audioFrame = LocalAudioFrames.AudioFrameBeforeMixingEx[channelId][uid];
			}
			if (mode == OBSERVER_MODE.RAW_DATA)
			{
				if (audioFrame.channels != irisAudioFrame.channels || audioFrame.samplesPerChannel != irisAudioFrame.samples || audioFrame.bytesPerSample != (BYTES_PER_SAMPLE)irisAudioFrame.bytes_per_sample)
				{
					audioFrame.RawBuffer = new byte[irisAudioFrame.buffer_length];
				}
				if (irisAudioFrame.buffer != IntPtr.Zero)
				{
					Marshal.Copy(irisAudioFrame.buffer, audioFrame.RawBuffer, 0, (int)irisAudioFrame.buffer_length);
				}
			}
			audioFrame.type = irisAudioFrame.type;
			audioFrame.samplesPerChannel = irisAudioFrame.samples;
			audioFrame.bufferPtr = irisAudioFrame.buffer;
			audioFrame.bytesPerSample = (BYTES_PER_SAMPLE)irisAudioFrame.bytes_per_sample;
			audioFrame.channels = irisAudioFrame.channels;
			audioFrame.samplesPerSec = irisAudioFrame.samples_per_sec;
			audioFrame.renderTimeMs = irisAudioFrame.render_time_ms;
			audioFrame.avsync_type = irisAudioFrame.av_sync_type;
			return audioFrame;
		}

		private static AudioFrame ProcessAudioFrameReceived(IntPtr audioFramePtr, string channelId, string uid)
		{
			IrisAudioFrame irisAudioFrame = (IrisAudioFrame)(Marshal.PtrToStructure(audioFramePtr, typeof(IrisAudioFrame)) ?? ((object)default(IrisAudioFrame)));
			AudioFrame audioFrame = null;
			if (!LocalAudioFrames.AudioFrameBeforeMixingEx2.ContainsKey(channelId))
			{
				LocalAudioFrames.AudioFrameBeforeMixingEx2[channelId] = new Dictionary<string, AudioFrame>();
				LocalAudioFrames.AudioFrameBeforeMixingEx2[channelId][uid] = new AudioFrame();
			}
			else if (!LocalAudioFrames.AudioFrameBeforeMixingEx2[channelId].ContainsKey(uid))
			{
				LocalAudioFrames.AudioFrameBeforeMixingEx2[channelId][uid] = new AudioFrame();
			}
			audioFrame = LocalAudioFrames.AudioFrameBeforeMixingEx2[channelId][uid];
			if (mode == OBSERVER_MODE.RAW_DATA)
			{
				if (audioFrame.channels != irisAudioFrame.channels || audioFrame.samplesPerChannel != irisAudioFrame.samples || audioFrame.bytesPerSample != (BYTES_PER_SAMPLE)irisAudioFrame.bytes_per_sample)
				{
					audioFrame.RawBuffer = new byte[irisAudioFrame.buffer_length];
				}
				if (irisAudioFrame.buffer != IntPtr.Zero)
				{
					Marshal.Copy(irisAudioFrame.buffer, audioFrame.RawBuffer, 0, (int)irisAudioFrame.buffer_length);
				}
			}
			audioFrame.type = irisAudioFrame.type;
			audioFrame.samplesPerChannel = irisAudioFrame.samples;
			audioFrame.bufferPtr = irisAudioFrame.buffer;
			audioFrame.bytesPerSample = (BYTES_PER_SAMPLE)irisAudioFrame.bytes_per_sample;
			audioFrame.channels = irisAudioFrame.channels;
			audioFrame.samplesPerSec = irisAudioFrame.samples_per_sec;
			audioFrame.renderTimeMs = irisAudioFrame.render_time_ms;
			audioFrame.avsync_type = irisAudioFrame.av_sync_type;
			return audioFrame;
		}

		private static IrisAudioParams ProcessAudioParams(AudioParams audioParams)
		{
			LocalAudioFrames.irisAudioParams.sample_rate = audioParams.sample_rate;
			LocalAudioFrames.irisAudioParams.channels = audioParams.channels;
			LocalAudioFrames.irisAudioParams.mode = (IRIS_RAW_AUDIO_FRAME_OP_MODE_TYPE)audioParams.mode;
			LocalAudioFrames.irisAudioParams.samples_per_call = audioParams.samples_per_call;
			return LocalAudioFrames.irisAudioParams;
		}

		[MonoPInvokeCallback(typeof(Func_AudioFrameLocal_Native))]
		internal static bool OnRecordAudioFrame(string channelId, IntPtr audioFramePtr)
		{
			if (AudioFrameObserver == null)
			{
				return true;
			}
			AudioFrame audioFrame = ProcessAudioFrameReceived(audioFramePtr, "", 0u);
			try
			{
				return AudioFrameObserver.OnRecordAudioFrame(channelId, audioFrame);
			}
			catch (Exception ex)
			{
				AgoraLog.LogError("[Exception] IAudioFrameObserver.OnRecordAudioFrame: " + ex);
				return true;
			}
		}

		[MonoPInvokeCallback(typeof(Func_AudioFrameLocal_Native))]
		internal static bool OnPlaybackAudioFrame(string channelId, IntPtr audioFramePtr)
		{
			if (AudioFrameObserver == null)
			{
				return true;
			}
			AudioFrame audio_frame = ProcessAudioFrameReceived(audioFramePtr, "", 1u);
			try
			{
				return AudioFrameObserver.OnPlaybackAudioFrame(channelId, audio_frame);
			}
			catch (Exception ex)
			{
				AgoraLog.LogError("[Exception] IAudioFrameObserver.OnPlaybackAudioFrame: " + ex);
				return true;
			}
		}

		[MonoPInvokeCallback(typeof(Func_AudioFrameLocal_Native))]
		internal static bool OnMixedAudioFrame(string channelId, IntPtr audioFramePtr)
		{
			if (AudioFrameObserver == null)
			{
				return true;
			}
			AudioFrame audio_frame = ProcessAudioFrameReceived(audioFramePtr, "", 2u);
			try
			{
				return AudioFrameObserver.OnMixedAudioFrame(channelId, audio_frame);
			}
			catch (Exception ex)
			{
				AgoraLog.LogError("[Exception] IAudioFrameObserver.OnMixedAudioFrame: " + ex);
				return true;
			}
		}

		[MonoPInvokeCallback(typeof(Func_AudioFramePosition_Native))]
		internal static int GetObservedAudioFramePosition()
		{
			if (AudioFrameObserver == null)
			{
				return 0;
			}
			try
			{
				return AudioFrameObserver.GetObservedAudioFramePosition();
			}
			catch (Exception ex)
			{
				AgoraLog.LogError("[Exception] IAudioFrameObserver.GetObservedAudioFramePosition: " + ex);
				return 0;
			}
		}

		[MonoPInvokeCallback(typeof(Func_AudioParams_Native))]
		internal static IrisAudioParams GetPlaybackAudioParams()
		{
			if (AudioFrameObserver == null)
			{
				return LocalAudioFrames.irisAudioParams;
			}
			try
			{
				return ProcessAudioParams(AudioFrameObserver.GetPlaybackAudioParams());
			}
			catch (Exception ex)
			{
				AgoraLog.LogError("[Exception] IAudioFrameObserver.GetPlaybackAudioParams: " + ex);
				return LocalAudioFrames.irisAudioParams;
			}
		}

		[MonoPInvokeCallback(typeof(Func_AudioParams_Native))]
		internal static IrisAudioParams GetRecordAudioParams()
		{
			if (AudioFrameObserver == null)
			{
				return LocalAudioFrames.irisAudioParams;
			}
			try
			{
				return ProcessAudioParams(AudioFrameObserver.GetRecordAudioParams());
			}
			catch (Exception ex)
			{
				AgoraLog.LogError("[Exception] IAudioFrameObserver.GetRecordAudioParams: " + ex);
				return LocalAudioFrames.irisAudioParams;
			}
		}

		[MonoPInvokeCallback(typeof(Func_AudioParams_Native))]
		internal static IrisAudioParams GetMixedAudioParams()
		{
			if (AudioFrameObserver == null)
			{
				return LocalAudioFrames.irisAudioParams;
			}
			try
			{
				return ProcessAudioParams(AudioFrameObserver.GetMixedAudioParams());
			}
			catch (Exception ex)
			{
				AgoraLog.LogError("[Exception] IAudioFrameObserver.GetMixedAudioParams: " + ex);
				return LocalAudioFrames.irisAudioParams;
			}
		}

		[MonoPInvokeCallback(typeof(Func_AudioFrameRemote_Native))]
		internal static bool OnPlaybackAudioFrameBeforeMixing(string channelId, uint uid, IntPtr audioFramePtr)
		{
			if (AudioFrameObserver == null)
			{
				return true;
			}
			AudioFrame audio_frame = ProcessAudioFrameReceived(audioFramePtr, channelId, uid);
			try
			{
				return AudioFrameObserver.OnPlaybackAudioFrameBeforeMixing(channelId, uid, audio_frame);
			}
			catch (Exception ex)
			{
				AgoraLog.LogError("[Exception] IAudioFrameObserver.OnPlaybackAudioFrameBeforeMixing: " + ex);
				return true;
			}
		}

		[MonoPInvokeCallback(typeof(Func_AudioFrameRemoteStringUid_Native))]
		internal static bool OnPlaybackAudioFrameBeforeMixing2(string channelId, string uid, IntPtr audioFramePtr)
		{
			if (AudioFrameObserver == null)
			{
				return true;
			}
			AudioFrame audio_frame = ProcessAudioFrameReceived(audioFramePtr, channelId, uid);
			try
			{
				return AudioFrameObserver.OnPlaybackAudioFrameBeforeMixing(channelId, uid, audio_frame);
			}
			catch (Exception ex)
			{
				AgoraLog.LogError("[Exception] IAudioFrameObserver.OnPlaybackAudioFrameBeforeMixing2: " + ex);
				return true;
			}
		}
	}
	internal static class AudioSpectrumObserverNative
	{
		internal static IAudioSpectrumObserver AgoraRtcAudioSpectrumObserver;

		private static AudioSpectrumData ProcessAudioSpectrumData(IntPtr bufferPtr, int length)
		{
			AudioSpectrumData result = default(AudioSpectrumData);
			result.dataLength = length;
			result.audioSpectrumData = new float[length];
			if (bufferPtr != IntPtr.Zero)
			{
				Marshal.Copy(bufferPtr, result.audioSpectrumData, 0, length);
			}
			return result;
		}

		[MonoPInvokeCallback(typeof(Func_LocalAudioSpectrum_Native))]
		internal static bool OnLocalAudioSpectrum(int playerId, IntPtr data)
		{
			if (AgoraRtcAudioSpectrumObserver == null || playerId != 0)
			{
				return true;
			}
			IrisAudioSpectrumData irisAudioSpectrumData = (IrisAudioSpectrumData)Marshal.PtrToStructure(data, typeof(IrisAudioSpectrumData));
			try
			{
				return AgoraRtcAudioSpectrumObserver.OnLocalAudioSpectrum(ProcessAudioSpectrumData(irisAudioSpectrumData.audioSpectrumData, irisAudioSpectrumData.dataLength));
			}
			catch (Exception ex)
			{
				AgoraLog.LogError("[Exception] IAudioSpectrumObserver.OnLocalAudioSpectrum: " + ex);
				return true;
			}
		}

		[MonoPInvokeCallback(typeof(Func_RemoteAudioSpectrum_Native))]
		internal static bool OnRemoteAudioSpectrum(int playerId, IntPtr dataspectrums, uint spectrumNumber)
		{
			if (AgoraRtcAudioSpectrumObserver == null || playerId != 0)
			{
				return true;
			}
			UserAudioSpectrumInfo[] array = new UserAudioSpectrumInfo[spectrumNumber];
			for (int i = 0; i < spectrumNumber; i++)
			{
				IrisUserAudioSpectrumInfo irisUserAudioSpectrumInfo = (IrisUserAudioSpectrumInfo)Marshal.PtrToStructure(new IntPtr(dataspectrums.ToInt64() + Marshal.SizeOf(typeof(IrisUserAudioSpectrumInfo)) * i), typeof(IrisUserAudioSpectrumInfo));
				array[i].uid = irisUserAudioSpectrumInfo.uid;
				array[i].spectrumData = ProcessAudioSpectrumData(irisUserAudioSpectrumInfo.spectrumData.audioSpectrumData, irisUserAudioSpectrumInfo.spectrumData.dataLength);
			}
			try
			{
				return AgoraRtcAudioSpectrumObserver.OnRemoteAudioSpectrum(array, spectrumNumber);
			}
			catch (Exception ex)
			{
				AgoraLog.LogError("[Exception] IAudioSpectrumObserver.OnRemoteAudioSpectrum: " + ex);
				return true;
			}
		}
	}
	internal static class MediaPlayerAudioFrameObserverNative
	{
		private static class LocalAudioPcmFrames
		{
			internal static readonly AudioPcmFrame AudioPcmFrame;
		}

		internal static Dictionary<int, IMediaPlayerAudioFrameObserver> AudioFrameObserverDic = new Dictionary<int, IMediaPlayerAudioFrameObserver>();

		[MonoPInvokeCallback(typeof(Func_AudioOnFrame_Native))]
		internal static bool OnFrame(IntPtr audioFramePtr, int mediaPlayerId)
		{
			IrisAudioPcmFrame irisAudioPcmFrame = (IrisAudioPcmFrame)(Marshal.PtrToStructure(audioFramePtr, typeof(IrisAudioPcmFrame)) ?? ((object)default(IrisAudioPcmFrame)));
			AudioPcmFrame audioPcmFrame = default(AudioPcmFrame);
			audioPcmFrame = LocalAudioPcmFrames.AudioPcmFrame;
			audioPcmFrame.data_ = new short[3840];
			audioPcmFrame.data_ = irisAudioPcmFrame.data_;
			audioPcmFrame.num_channels_ = irisAudioPcmFrame.num_channels_;
			audioPcmFrame.capture_timestamp = irisAudioPcmFrame.capture_timestamp;
			audioPcmFrame.sample_rate_hz_ = irisAudioPcmFrame.sample_rate_hz_;
			audioPcmFrame.samples_per_channel_ = irisAudioPcmFrame.samples_per_channel_;
			try
			{
				return AudioFrameObserverDic.ContainsKey(mediaPlayerId) || AudioFrameObserverDic[mediaPlayerId].OnFrame(audioPcmFrame);
			}
			catch (Exception ex)
			{
				AgoraLog.LogError("[Exception] IMediaPlayerAudioFrameObserver.OnFrame: " + ex);
				return true;
			}
		}
	}
	internal static class MediaPlayerAudioSpectrumObserverNative
	{
		internal static Dictionary<int, IAudioSpectrumObserver> AgoraRtcAudioSpectrumObserverDic = new Dictionary<int, IAudioSpectrumObserver>();

		private static AudioSpectrumData ProcessAudioSpectrumData(IntPtr bufferPtr, int length)
		{
			AudioSpectrumData result = default(AudioSpectrumData);
			result.dataLength = length;
			result.audioSpectrumData = new float[length];
			if (bufferPtr != IntPtr.Zero)
			{
				Marshal.Copy(bufferPtr, result.audioSpectrumData, 0, length);
			}
			return result;
		}

		[MonoPInvokeCallback(typeof(Func_LocalAudioSpectrum_Native))]
		internal static bool OnLocalAudioSpectrum(int playerId, IntPtr data)
		{
			if (!AgoraRtcAudioSpectrumObserverDic.ContainsKey(playerId))
			{
				return false;
			}
			IrisAudioSpectrumData irisAudioSpectrumData = (IrisAudioSpectrumData)Marshal.PtrToStructure(data, typeof(IrisAudioSpectrumData));
			try
			{
				return AgoraRtcAudioSpectrumObserverDic[playerId].OnLocalAudioSpectrum(ProcessAudioSpectrumData(irisAudioSpectrumData.audioSpectrumData, irisAudioSpectrumData.dataLength));
			}
			catch (Exception ex)
			{
				AgoraLog.LogError("[Exception] IAudioSpectrumObserver.OnLocalAudioSpectrum: " + ex);
				return true;
			}
		}

		[MonoPInvokeCallback(typeof(Func_RemoteAudioSpectrum_Native))]
		internal static bool OnRemoteAudioSpectrum(int playerId, IntPtr dataspectrums, uint spectrumNumber)
		{
			if (!AgoraRtcAudioSpectrumObserverDic.ContainsKey(playerId))
			{
				return false;
			}
			UserAudioSpectrumInfo[] array = new UserAudioSpectrumInfo[spectrumNumber];
			for (int i = 0; i < spectrumNumber; i++)
			{
				IrisUserAudioSpectrumInfo irisUserAudioSpectrumInfo = (IrisUserAudioSpectrumInfo)Marshal.PtrToStructure(new IntPtr(dataspectrums.ToInt64() + Marshal.SizeOf(typeof(IrisUserAudioSpectrumInfo)) * i), typeof(IrisUserAudioSpectrumInfo));
				array[i].uid = irisUserAudioSpectrumInfo.uid;
				array[i].spectrumData = ProcessAudioSpectrumData(irisUserAudioSpectrumInfo.spectrumData.audioSpectrumData, irisUserAudioSpectrumInfo.spectrumData.dataLength);
			}
			try
			{
				return AgoraRtcAudioSpectrumObserverDic[playerId].OnRemoteAudioSpectrum(array, spectrumNumber);
			}
			catch (Exception ex)
			{
				AgoraLog.LogError("[Exception] IAudioSpectrumObserver.OnRemoteAudioSpectrum: " + ex);
				return true;
			}
		}
	}
	internal static class MediaPlayerCustomDataProviderNative
	{
		internal static Dictionary<int, IMediaPlayerCustomDataProvider> CustomDataProviders = new Dictionary<int, IMediaPlayerCustomDataProvider>();

		[MonoPInvokeCallback(typeof(Func_OnSeek_Native))]
		internal static long OnSeek(long offset, int whence, int playerId)
		{
			if (CustomDataProviders.ContainsKey(playerId))
			{
				try
				{
					return CustomDataProviders[playerId].OnSeek(offset, whence);
				}
				catch (Exception ex)
				{
					AgoraLog.LogError("[Exception] IMediaPlayerCustomDataProvider.OnSeek: " + ex);
					return 0L;
				}
			}
			return 0L;
		}

		[MonoPInvokeCallback(typeof(Func_onReadData_Native))]
		internal static int OnReadData(IntPtr buffer, int bufferSize, int playerId)
		{
			if (CustomDataProviders.ContainsKey(playerId))
			{
				try
				{
					return CustomDataProviders[playerId].OnReadData(buffer, bufferSize);
				}
				catch (Exception ex)
				{
					AgoraLog.LogError("[Exception] IMediaPlayerCustomDataProvider.OnReadData: " + ex);
					return 0;
				}
			}
			return 0;
		}
	}
	internal static class MediaPlayerSourceObserverNative
	{
		internal static Dictionary<int, IMediaPlayerSourceObserver> RtcMediaPlayerEventHandlerDic = new Dictionary<int, IMediaPlayerSourceObserver>();

		internal static AgoraCallbackObject CallbackObject = null;

		[MonoPInvokeCallback(typeof(Func_Event_Native))]
		internal static void OnEvent(string @event, string data, IntPtr buffer, IntPtr length, uint buffer_count)
		{
			if (CallbackObject == null || CallbackObject._CallbackQueue == null)
			{
				return;
			}
			Agora.Rtc.LitJson.JsonData jsonData = AgoraJson.ToObject(data);
			int playerId = (int)AgoraJson.GetData<int>(jsonData, "playerId");
			if (@event == null)
			{
				return;
			}
			switch (@event)
			{
			case "MediaPlayerSourceObserver_onPlayerSourceStateChanged":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (RtcMediaPlayerEventHandlerDic.ContainsKey(playerId))
					{
						RtcMediaPlayerEventHandlerDic[playerId].OnPlayerSourceStateChanged((MEDIA_PLAYER_STATE)AgoraJson.GetData<int>(jsonData, "state"), (MEDIA_PLAYER_ERROR)AgoraJson.GetData<int>(jsonData, "ec"));
					}
				});
				break;
			case "MediaPlayerSourceObserver_onPositionChanged":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (RtcMediaPlayerEventHandlerDic.ContainsKey(playerId))
					{
						RtcMediaPlayerEventHandlerDic[playerId].OnPositionChanged((long)AgoraJson.GetData<long>(jsonData, "position_ms"));
					}
				});
				break;
			case "MediaPlayerSourceObserver_onPlayerEvent":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (RtcMediaPlayerEventHandlerDic.ContainsKey(playerId))
					{
						RtcMediaPlayerEventHandlerDic[playerId].OnPlayerEvent((MEDIA_PLAYER_EVENT)AgoraJson.GetData<int>(jsonData, "eventCode"), (long)AgoraJson.GetData<long>(jsonData, "elapsedTime"), (string)AgoraJson.GetData<string>(jsonData, "message"));
					}
				});
				break;
			case "MediaPlayerSourceObserver_onPlayBufferUpdated":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (RtcMediaPlayerEventHandlerDic.ContainsKey(playerId))
					{
						RtcMediaPlayerEventHandlerDic[playerId].OnPlayBufferUpdated((long)AgoraJson.GetData<long>(jsonData, "playCachedBuffer"));
					}
				});
				break;
			case "MediaPlayerSourceObserver_onPreloadEvent":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (RtcMediaPlayerEventHandlerDic.ContainsKey(playerId))
					{
						RtcMediaPlayerEventHandlerDic[playerId].OnPreloadEvent((string)AgoraJson.GetData<string>(jsonData, "src"), (PLAYER_PRELOAD_EVENT)AgoraJson.GetData<int>(jsonData, "event"));
					}
				});
				break;
			case "MediaPlayerSourceObserver_onCompleted":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (RtcMediaPlayerEventHandlerDic.ContainsKey(playerId))
					{
						RtcMediaPlayerEventHandlerDic[playerId].OnCompleted();
					}
				});
				break;
			case "MediaPlayerSourceObserver_onAgoraCDNTokenWillExpire":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (RtcMediaPlayerEventHandlerDic.ContainsKey(playerId))
					{
						RtcMediaPlayerEventHandlerDic[playerId].OnAgoraCDNTokenWillExpire();
					}
				});
				break;
			case "MediaPlayerSourceObserver_onPlayerInfoUpdated":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (RtcMediaPlayerEventHandlerDic.ContainsKey(playerId))
					{
						RtcMediaPlayerEventHandlerDic[playerId].OnPlayerInfoUpdated(AgoraJson.JsonToStruct<PlayerUpdatedInfo>(jsonData, "info"));
					}
				});
				break;
			case "MediaPlayerSourceObserver_onPlayerSrcInfoChanged":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (RtcMediaPlayerEventHandlerDic.ContainsKey(playerId))
					{
						RtcMediaPlayerEventHandlerDic[playerId].OnPlayerSrcInfoChanged(AgoraJson.JsonToStruct<SrcInfo>(jsonData, "from"), AgoraJson.JsonToStruct<SrcInfo>(jsonData, "to"));
					}
				});
				break;
			case "MediaPlayerSourceObserver_onAudioVolumeIndication":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (RtcMediaPlayerEventHandlerDic.ContainsKey(playerId))
					{
						RtcMediaPlayerEventHandlerDic[playerId].OnAudioVolumeIndication((int)AgoraJson.GetData<int>(jsonData, "volume"));
					}
				});
				break;
			case "MediaPlayerSourceObserver_onMetaData":
			{
				int byteLength = (int)AgoraJson.GetData<int>(jsonData, "length");
				IntPtr source = (IntPtr)(long)(ulong)AgoraJson.GetData<ulong>(jsonData, "data");
				byte[] byteData = new byte[byteLength];
				if (byteLength != 0)
				{
					Marshal.Copy(source, byteData, 0, byteLength);
				}
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (RtcMediaPlayerEventHandlerDic.ContainsKey(playerId))
					{
						RtcMediaPlayerEventHandlerDic[playerId].OnMetaData(byteData, byteLength);
					}
				});
				break;
			}
			}
		}
	}
	internal static class MediaRecorderObserverNative
	{
		internal static Dictionary<string, IMediaRecorderObserver> MediaRecorderObserverDic = new Dictionary<string, IMediaRecorderObserver>();

		internal static AgoraCallbackObject CallbackObject = null;

		[MonoPInvokeCallback(typeof(Func_Event_Native))]
		internal static void OnEvent(string @event, string data, IntPtr buffer, IntPtr length, uint buffer_count)
		{
			if (CallbackObject == null || CallbackObject._CallbackQueue == null)
			{
				return;
			}
			Agora.Rtc.LitJson.JsonData jsonData = AgoraJson.ToObject(data);
			RtcConnection rtcConnection = AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection");
			string key = rtcConnection.localUid + rtcConnection.channelId;
			switch (@event)
			{
			case "MediaRecorderObserver_onRecorderStateChanged":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (MediaRecorderObserverDic.ContainsKey(key))
					{
						MediaRecorderObserverDic[key].OnRecorderStateChanged((RecorderState)AgoraJson.GetData<int>(jsonData, "state"), (RecorderErrorCode)AgoraJson.GetData<int>(jsonData, "error"));
					}
				});
				break;
			case "MediaRecorderObserver_onRecorderInfoUpdated":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (MediaRecorderObserverDic.ContainsKey(key))
					{
						MediaRecorderObserverDic[key].OnRecorderInfoUpdated(AgoraJson.JsonToStruct<RecorderInfo>(jsonData, "info"));
					}
				});
				break;
			}
		}
	}
	internal static class MetadataObserverNative
	{
		internal static IMetadataObserver Observer;

		[MonoPInvokeCallback(typeof(Func_MaxMetadataSize_Native))]
		internal static int GetMaxMetadataSize()
		{
			if (Observer == null)
			{
				return 0;
			}
			return Observer.GetMaxMetadataSize();
		}

		[MonoPInvokeCallback(typeof(Func_ReadyToSendMetadata_Native))]
		internal static bool OnReadyToSendMetadata(ref IrisMetadata metadata, VIDEO_SOURCE_TYPE source_type)
		{
			if (Observer == null)
			{
				return false;
			}
			Metadata metadata2 = new Metadata();
			metadata2.buffer = metadata.buffer;
			metadata2.size = metadata.size;
			metadata2.uid = metadata.uid;
			metadata2.timeStampMs = metadata.timeStampMs;
			bool result = Observer.OnReadyToSendMetadata(ref metadata2, source_type);
			metadata.buffer = metadata2.buffer;
			metadata.uid = metadata2.uid;
			metadata.size = metadata2.size;
			metadata.timeStampMs = metadata2.timeStampMs;
			return result;
		}

		[MonoPInvokeCallback(typeof(Func_MetadataReceived_Native))]
		internal static void OnMetadataReceived(IntPtr metadata)
		{
			if (Observer != null)
			{
				IrisMetadata irisMetadata = (IrisMetadata)(Marshal.PtrToStructure(metadata, typeof(IrisMetadata)) ?? ((object)default(IrisMetadata)));
				Metadata metadata2 = new Metadata();
				metadata2.buffer = irisMetadata.buffer;
				metadata2.uid = irisMetadata.uid;
				metadata2.size = irisMetadata.size;
				metadata2.timeStampMs = irisMetadata.timeStampMs;
				Observer.OnMetadataReceived(metadata2);
			}
		}
	}
	internal static class RtcEngineEventHandlerNative
	{
		internal static IRtcEngineEventHandler EngineEventHandler;

		internal static AgoraCallbackObject CallbackObject;

		[MonoPInvokeCallback(typeof(Func_Event_Native))]
		internal static void OnEvent(string @event, string data, IntPtr buffer, IntPtr length, uint buffer_count)
		{
			if (EngineEventHandler == null)
			{
				return;
			}
			Agora.Rtc.LitJson.JsonData jsonData = AgoraJson.ToObject(data);
			if (CallbackObject == null || CallbackObject._CallbackQueue == null)
			{
				return;
			}
			if (@event == null)
			{
				return;
			}
			switch (@event)
			{
			case "onError":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnError((int)AgoraJson.GetData<int>(jsonData, "err"), (string)AgoraJson.GetData<string>(jsonData, "msg"));
					}
				});
				break;
			case "onJoinChannelSuccessEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnJoinChannelSuccess(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"), (int)AgoraJson.GetData<int>(jsonData, "elapsed"));
					}
				});
				break;
			case "onRejoinChannelSuccessEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnRejoinChannelSuccess(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"), (int)AgoraJson.GetData<int>(jsonData, "elapsed"));
					}
				});
				break;
			case "onProxyConnected":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnProxyConnected((string)AgoraJson.GetData<string>(jsonData, "channel"), (uint)AgoraJson.GetData<uint>(jsonData, "uid"), (PROXY_TYPE)AgoraJson.GetData<int>(jsonData, "proxyType"), (string)AgoraJson.GetData<string>(jsonData, "localProxyIp"), (int)AgoraJson.GetData<int>(jsonData, "elapsed"));
					}
				});
				break;
			case "onAudioQualityEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnAudioQuality(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"), (uint)AgoraJson.GetData<uint>(jsonData, "remoteUid"), (int)AgoraJson.GetData<int>(jsonData, "elapsed"), (ushort)AgoraJson.GetData<ushort>(jsonData, "delay"), (ushort)AgoraJson.GetData<ushort>(jsonData, "lost"));
					}
				});
				break;
			case "onLeaveChannelEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnLeaveChannel(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"), AgoraJson.JsonToStruct<RtcStats>(jsonData, "stats"));
					}
				});
				break;
			case "onClientRoleChangedEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnClientRoleChanged(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"), (CLIENT_ROLE_TYPE)AgoraJson.GetData<int>(jsonData, "oldRole"), (CLIENT_ROLE_TYPE)AgoraJson.GetData<int>(jsonData, "newRole"));
					}
				});
				break;
			case "onClientRoleChangeFailedEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnClientRoleChangeFailed(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"), (CLIENT_ROLE_CHANGE_FAILED_REASON)AgoraJson.GetData<int>(jsonData, "reason"), (CLIENT_ROLE_TYPE)AgoraJson.GetData<int>(jsonData, "currentRole"));
					}
				});
				break;
			case "onUserJoinedEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnUserJoined(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"), (uint)AgoraJson.GetData<uint>(jsonData, "remoteUid"), (int)AgoraJson.GetData<int>(jsonData, "elapsed"));
					}
				});
				break;
			case "onUserOfflineEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnUserOffline(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"), (uint)AgoraJson.GetData<uint>(jsonData, "remoteUid"), (USER_OFFLINE_REASON_TYPE)AgoraJson.GetData<int>(jsonData, "reason"));
					}
				});
				break;
			case "onLastmileQuality":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnLastmileQuality((int)AgoraJson.GetData<int>(jsonData, "quality"));
					}
				});
				break;
			case "onLastmileProbeResult":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnLastmileProbeResult(AgoraJson.JsonToStruct<LastmileProbeResult>(jsonData, "result"));
					}
				});
				break;
			case "onConnectionInterruptedEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnConnectionInterrupted(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"));
					}
				});
				break;
			case "onConnectionLostEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnConnectionLost(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"));
					}
				});
				break;
			case "onConnectionBannedEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnConnectionBanned(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"));
					}
				});
				break;
			case "onApiCallExecuted":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnApiCallExecuted((int)AgoraJson.GetData<int>(jsonData, "err"), (string)AgoraJson.GetData<string>(jsonData, "api"), (string)AgoraJson.GetData<string>(jsonData, "result"));
					}
				});
				break;
			case "onRequestTokenEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnRequestToken(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"));
					}
				});
				break;
			case "onTokenPrivilegeWillExpireEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnTokenPrivilegeWillExpire(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"), (string)AgoraJson.GetData<string>(jsonData, "token"));
					}
				});
				break;
			case "onRtcStatsEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnRtcStats(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"), AgoraJson.JsonToStruct<RtcStats>(jsonData, "stats"));
					}
				});
				break;
			case "onNetworkQualityEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnNetworkQuality(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"), (uint)AgoraJson.GetData<uint>(jsonData, "remoteUid"), (int)AgoraJson.GetData<int>(jsonData, "txQuality"), (int)AgoraJson.GetData<int>(jsonData, "rxQuality"));
					}
				});
				break;
			case "onLocalVideoStatsEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnLocalVideoStats(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"), AgoraJson.JsonToStruct<LocalVideoStats>(jsonData, "stats"));
					}
				});
				break;
			case "onRemoteVideoStatsEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnRemoteVideoStats(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"), AgoraJson.JsonToStruct<RemoteVideoStats>(jsonData, "stats"));
					}
				});
				break;
			case "onLocalAudioStatsEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnLocalAudioStats(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"), AgoraJson.JsonToStruct<LocalAudioStats>(jsonData, "stats"));
					}
				});
				break;
			case "onRemoteAudioStatsEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnRemoteAudioStats(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"), AgoraJson.JsonToStruct<RemoteAudioStats>(jsonData, "stats"));
					}
				});
				break;
			case "onLocalAudioStateChangedEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnLocalAudioStateChanged(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"), (LOCAL_AUDIO_STREAM_STATE)AgoraJson.GetData<int>(jsonData, "state"), (LOCAL_AUDIO_STREAM_ERROR)AgoraJson.GetData<int>(jsonData, "error"));
					}
				});
				break;
			case "onRemoteAudioStateChangedEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnRemoteAudioStateChanged(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"), (uint)AgoraJson.GetData<uint>(jsonData, "remoteUid"), (REMOTE_AUDIO_STATE)AgoraJson.GetData<int>(jsonData, "state"), (REMOTE_AUDIO_STATE_REASON)AgoraJson.GetData<int>(jsonData, "reason"), (int)AgoraJson.GetData<int>(jsonData, "elapsed"));
					}
				});
				break;
			case "onAudioPublishStateChanged":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnAudioPublishStateChanged((string)AgoraJson.GetData<string>(jsonData, "channel"), (STREAM_PUBLISH_STATE)AgoraJson.GetData<int>(jsonData, "oldState"), (STREAM_PUBLISH_STATE)AgoraJson.GetData<int>(jsonData, "newState"), (int)AgoraJson.GetData<int>(jsonData, "elapseSinceLastState"));
					}
				});
				break;
			case "onVideoPublishStateChanged":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnVideoPublishStateChanged((VIDEO_SOURCE_TYPE)AgoraJson.GetData<int>(jsonData, "source"), (string)AgoraJson.GetData<string>(jsonData, "channel"), (STREAM_PUBLISH_STATE)AgoraJson.GetData<int>(jsonData, "oldState"), (STREAM_PUBLISH_STATE)AgoraJson.GetData<int>(jsonData, "newState"), (int)AgoraJson.GetData<int>(jsonData, "elapseSinceLastState"));
					}
				});
				break;
			case "onAudioSubscribeStateChanged":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnAudioSubscribeStateChanged((string)AgoraJson.GetData<string>(jsonData, "channel"), (uint)AgoraJson.GetData<uint>(jsonData, "uid"), (STREAM_SUBSCRIBE_STATE)AgoraJson.GetData<int>(jsonData, "oldState"), (STREAM_SUBSCRIBE_STATE)AgoraJson.GetData<int>(jsonData, "newState"), (int)AgoraJson.GetData<int>(jsonData, "elapseSinceLastState"));
					}
				});
				break;
			case "onVideoSubscribeStateChanged":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnVideoSubscribeStateChanged((string)AgoraJson.GetData<string>(jsonData, "channel"), (uint)AgoraJson.GetData<uint>(jsonData, "uid"), (STREAM_SUBSCRIBE_STATE)AgoraJson.GetData<int>(jsonData, "oldState"), (STREAM_SUBSCRIBE_STATE)AgoraJson.GetData<int>(jsonData, "newState"), (int)AgoraJson.GetData<int>(jsonData, "elapseSinceLastState"));
					}
				});
				break;
			case "onAudioVolumeIndicationEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						uint num = (uint)AgoraJson.GetData<uint>(jsonData, "speakerNumber");
						AudioVolumeInfo[] speakers = AgoraJson.JsonToStructArray<AudioVolumeInfo>(jsonData, "speakers", num);
						int totalVolume = (int)AgoraJson.GetData<int>(jsonData, "totalVolume");
						EngineEventHandler.OnAudioVolumeIndication(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"), speakers, num, totalVolume);
					}
				});
				break;
			case "onActiveSpeakerEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnActiveSpeaker(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"), (uint)AgoraJson.GetData<uint>(jsonData, "uid"));
					}
				});
				break;
			case "onVideoStopped":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnVideoStopped();
					}
				});
				break;
			case "onFirstLocalVideoFrameEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnFirstLocalVideoFrame(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"), (int)AgoraJson.GetData<int>(jsonData, "width"), (int)AgoraJson.GetData<int>(jsonData, "height"), (int)AgoraJson.GetData<int>(jsonData, "elapsed"));
					}
				});
				break;
			case "onFirstLocalVideoFramePublishedEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnFirstLocalVideoFramePublished(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"), (int)AgoraJson.GetData<int>(jsonData, "elapsed"));
					}
				});
				break;
			case "onFirstRemoteVideoFrameEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnFirstRemoteVideoFrame(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"), (uint)AgoraJson.GetData<uint>(jsonData, "remoteUid"), (int)AgoraJson.GetData<int>(jsonData, "width"), (int)AgoraJson.GetData<int>(jsonData, "height"), (int)AgoraJson.GetData<int>(jsonData, "elapsed"));
					}
				});
				break;
			case "onFirstRemoteVideoDecodedEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnFirstRemoteVideoDecoded(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"), (uint)AgoraJson.GetData<uint>(jsonData, "remoteUid"), (int)AgoraJson.GetData<int>(jsonData, "width"), (int)AgoraJson.GetData<int>(jsonData, "height"), (int)AgoraJson.GetData<int>(jsonData, "elapsed"));
					}
				});
				break;
			case "onAudioDeviceStateChanged":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnAudioDeviceStateChanged((string)AgoraJson.GetData<string>(jsonData, "deviceId"), (MEDIA_DEVICE_TYPE)AgoraJson.GetData<int>(jsonData, "deviceType"), (MEDIA_DEVICE_STATE_TYPE)AgoraJson.GetData<int>(jsonData, "deviceState"));
					}
				});
				break;
			case "onAudioDeviceVolumeChanged":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnAudioDeviceVolumeChanged((MEDIA_DEVICE_TYPE)AgoraJson.GetData<int>(jsonData, "deviceType"), (int)AgoraJson.GetData<int>(jsonData, "volume"), (bool)AgoraJson.GetData<bool>(jsonData, "muted"));
					}
				});
				break;
			case "onCameraReady":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnCameraReady();
					}
				});
				break;
			case "onCameraFocusAreaChanged":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnCameraFocusAreaChanged((int)AgoraJson.GetData<int>(jsonData, "x"), (int)AgoraJson.GetData<int>(jsonData, "y"), (int)AgoraJson.GetData<int>(jsonData, "width"), (int)AgoraJson.GetData<int>(jsonData, "height"));
					}
				});
				break;
			case "onFacePositionChanged":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						int num2 = (int)AgoraJson.GetData<int>(jsonData, "numFaces");
						EngineEventHandler.OnFacePositionChanged((int)AgoraJson.GetData<int>(jsonData, "imageWidth"), (int)AgoraJson.GetData<int>(jsonData, "imageHeight"), AgoraJson.JsonToStruct<Rectangle>((string)AgoraJson.GetData<string>(jsonData, "vecRectangle")), AgoraJson.JsonToStructArray<int>(jsonData, "vecDistance", (uint)num2), num2);
					}
				});
				break;
			case "onCameraExposureAreaChanged":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnCameraExposureAreaChanged((int)AgoraJson.GetData<int>(jsonData, "x"), (int)AgoraJson.GetData<int>(jsonData, "y"), (int)AgoraJson.GetData<int>(jsonData, "width"), (int)AgoraJson.GetData<int>(jsonData, "height"));
					}
				});
				break;
			case "onAudioMixingFinished":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnAudioMixingFinished();
					}
				});
				break;
			case "onAudioMixingStateChanged":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnAudioMixingStateChanged((AUDIO_MIXING_STATE_TYPE)AgoraJson.GetData<int>(jsonData, "state"), (AUDIO_MIXING_REASON_TYPE)AgoraJson.GetData<int>(jsonData, "reason"));
					}
				});
				break;
			case "onRhythmPlayerStateChanged":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnRhythmPlayerStateChanged((RHYTHM_PLAYER_STATE_TYPE)AgoraJson.GetData<int>(jsonData, "state"), (RHYTHM_PLAYER_ERROR_TYPE)AgoraJson.GetData<int>(jsonData, "errorCode"));
					}
				});
				break;
			case "onAudioEffectFinished":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnAudioEffectFinished((int)AgoraJson.GetData<int>(jsonData, "soundId"));
					}
				});
				break;
			case "onVideoDeviceStateChanged":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnVideoDeviceStateChanged((string)AgoraJson.GetData<string>(jsonData, "deviceId"), (MEDIA_DEVICE_TYPE)AgoraJson.GetData<int>(jsonData, "deviceType"), (MEDIA_DEVICE_STATE_TYPE)AgoraJson.GetData<int>(jsonData, "deviceState"));
					}
				});
				break;
			case "onLocalVideoStateChanged":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnLocalVideoStateChanged((VIDEO_SOURCE_TYPE)AgoraJson.GetData<int>(jsonData, "source"), (LOCAL_VIDEO_STREAM_STATE)AgoraJson.GetData<int>(jsonData, "state"), (LOCAL_VIDEO_STREAM_ERROR)AgoraJson.GetData<int>(jsonData, "error"));
					}
				});
				break;
			case "onLocalVideoStateChangedEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnLocalVideoStateChanged(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"), (LOCAL_VIDEO_STREAM_STATE)AgoraJson.GetData<int>(jsonData, "state"), (LOCAL_VIDEO_STREAM_ERROR)AgoraJson.GetData<int>(jsonData, "errorCode"));
					}
				});
				break;
			case "onVideoSizeChangedEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnVideoSizeChanged(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"), (VIDEO_SOURCE_TYPE)AgoraJson.GetData<int>(jsonData, "sourceType"), (uint)AgoraJson.GetData<uint>(jsonData, "uid"), (int)AgoraJson.GetData<int>(jsonData, "width"), (int)AgoraJson.GetData<int>(jsonData, "height"), (int)AgoraJson.GetData<int>(jsonData, "rotation"));
					}
				});
				break;
			case "onContentInspectResult":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnContentInspectResult((CONTENT_INSPECT_RESULT)AgoraJson.GetData<int>(jsonData, "result"));
					}
				});
				break;
			case "onSnapshotTakenEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnSnapshotTaken(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"), (uint)AgoraJson.GetData<uint>(jsonData, "uid"), (string)AgoraJson.GetData<string>(jsonData, "filePath"), (int)AgoraJson.GetData<int>(jsonData, "width"), (int)AgoraJson.GetData<int>(jsonData, "height"), (int)AgoraJson.GetData<int>(jsonData, "errCode"));
					}
				});
				break;
			case "onRemoteVideoStateChangedEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnRemoteVideoStateChanged(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"), (uint)AgoraJson.GetData<uint>(jsonData, "remoteUid"), (REMOTE_VIDEO_STATE)AgoraJson.GetData<int>(jsonData, "state"), (REMOTE_VIDEO_STATE_REASON)AgoraJson.GetData<int>(jsonData, "reason"), (int)AgoraJson.GetData<int>(jsonData, "elapsed"));
					}
				});
				break;
			case "onUserStateChangedEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnUserStateChanged(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"), (uint)AgoraJson.GetData<uint>(jsonData, "remoteUid"), (uint)AgoraJson.GetData<uint>(jsonData, "state"));
					}
				});
				break;
			case "onStreamMessageErrorEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnStreamMessageError(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"), (uint)AgoraJson.GetData<uint>(jsonData, "remoteUid"), (int)AgoraJson.GetData<int>(jsonData, "streamId"), (int)AgoraJson.GetData<int>(jsonData, "code"), (int)AgoraJson.GetData<int>(jsonData, "missed"), (int)AgoraJson.GetData<int>(jsonData, "cached"));
					}
				});
				break;
			case "onChannelMediaRelayStateChanged":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnChannelMediaRelayStateChanged((int)AgoraJson.GetData<int>(jsonData, "state"), (int)AgoraJson.GetData<int>(jsonData, "code"));
					}
				});
				break;
			case "onChannelMediaRelayEvent":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnChannelMediaRelayEvent((int)AgoraJson.GetData<int>(jsonData, "code"));
					}
				});
				break;
			case "onFirstLocalAudioFramePublishedEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnFirstLocalAudioFramePublished(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"), (int)AgoraJson.GetData<int>(jsonData, "elapsed"));
					}
				});
				break;
			case "onFirstRemoteAudioFrameEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnFirstRemoteAudioFrame(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"), (uint)AgoraJson.GetData<uint>(jsonData, "uid"), (int)AgoraJson.GetData<int>(jsonData, "elapsed"));
					}
				});
				break;
			case "onFirstRemoteAudioDecodedEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnFirstRemoteAudioDecoded(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"), (uint)AgoraJson.GetData<uint>(jsonData, "uid"), (int)AgoraJson.GetData<int>(jsonData, "elapsed"));
					}
				});
				break;
			case "onRtmpStreamingStateChanged":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnRtmpStreamingStateChanged((string)AgoraJson.GetData<string>(jsonData, "url"), (RTMP_STREAM_PUBLISH_STATE)AgoraJson.GetData<int>(jsonData, "state"), (RTMP_STREAM_PUBLISH_ERROR_TYPE)AgoraJson.GetData<int>(jsonData, "errCode"));
					}
				});
				break;
			case "onRtmpStreamingEvent":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnRtmpStreamingEvent((string)AgoraJson.GetData<string>(jsonData, "url"), (RTMP_STREAMING_EVENT)AgoraJson.GetData<int>(jsonData, "eventCode"));
					}
				});
				break;
			case "onTranscodingUpdated":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnTranscodingUpdated();
					}
				});
				break;
			case "onLocalPublishFallbackToAudioOnly":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnLocalPublishFallbackToAudioOnly((bool)AgoraJson.GetData<bool>(jsonData, "isFallbackOrRecover"));
					}
				});
				break;
			case "onRemoteSubscribeFallbackToAudioOnly":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnRemoteSubscribeFallbackToAudioOnly((uint)AgoraJson.GetData<uint>(jsonData, "uid"), (bool)AgoraJson.GetData<bool>(jsonData, "isFallbackOrRecover"));
					}
				});
				break;
			case "onRemoteAudioTransportStatsEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnRemoteAudioTransportStats(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"), (uint)AgoraJson.GetData<uint>(jsonData, "remoteUid"), (ushort)AgoraJson.GetData<ushort>(jsonData, "delay"), (ushort)AgoraJson.GetData<ushort>(jsonData, "lost"), (ushort)AgoraJson.GetData<ushort>(jsonData, "rxKBitRate"));
					}
				});
				break;
			case "onRemoteVideoTransportStatsEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnRemoteVideoTransportStats(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"), (uint)AgoraJson.GetData<uint>(jsonData, "remoteUid"), (ushort)AgoraJson.GetData<ushort>(jsonData, "delay"), (ushort)AgoraJson.GetData<ushort>(jsonData, "lost"), (ushort)AgoraJson.GetData<ushort>(jsonData, "rxKBitRate"));
					}
				});
				break;
			case "onConnectionStateChangedEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnConnectionStateChanged(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"), (CONNECTION_STATE_TYPE)AgoraJson.GetData<int>(jsonData, "state"), (CONNECTION_CHANGED_REASON_TYPE)AgoraJson.GetData<int>(jsonData, "reason"));
					}
				});
				break;
			case "onWlAccMessageEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnWlAccMessage(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"), (WLACC_MESSAGE_REASON)AgoraJson.GetData<int>(jsonData, "reason"), (WLACC_SUGGEST_ACTION)AgoraJson.GetData<int>(jsonData, "action"), (string)AgoraJson.GetData<string>(jsonData, "wlAccMsg"));
					}
				});
				break;
			case "onWlAccStatsEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnWlAccStats(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"), AgoraJson.JsonToStruct<WlAccStats>(jsonData, "currentStats"), AgoraJson.JsonToStruct<WlAccStats>(jsonData, "averageStats"));
					}
				});
				break;
			case "onNetworkTypeChangedEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnNetworkTypeChanged(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"), (NETWORK_TYPE)AgoraJson.GetData<int>(jsonData, "type"));
					}
				});
				break;
			case "onLocalUserRegistered":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnLocalUserRegistered((uint)AgoraJson.GetData<uint>(jsonData, "uid"), (string)AgoraJson.GetData<string>(jsonData, "userAccount"));
					}
				});
				break;
			case "onUserInfoUpdated":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnUserInfoUpdated((uint)AgoraJson.GetData<uint>(jsonData, "uid"), AgoraJson.JsonToStruct<UserInfo>(jsonData, "info"));
					}
				});
				break;
			case "onMediaDeviceChanged":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnMediaDeviceChanged((MEDIA_DEVICE_TYPE)AgoraJson.GetData<int>(jsonData, "deviceType"));
					}
				});
				break;
			case "onIntraRequestReceivedEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnIntraRequestReceived(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"));
					}
				});
				break;
			case "onUplinkNetworkInfoUpdated":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnUplinkNetworkInfoUpdated(AgoraJson.JsonToStruct<UplinkNetworkInfo>(jsonData, "info"));
					}
				});
				break;
			case "onDownlinkNetworkInfoUpdated":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnDownlinkNetworkInfoUpdated(AgoraJson.JsonToStruct<DownlinkNetworkInfo>(jsonData, "info"));
					}
				});
				break;
			case "onVideoSourceFrameSizeChangedEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnVideoSourceFrameSizeChanged(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"), (VIDEO_SOURCE_TYPE)AgoraJson.GetData<int>(jsonData, "sourceType"), (int)AgoraJson.GetData<int>(jsonData, "width"), (int)AgoraJson.GetData<int>(jsonData, "height"));
					}
				});
				break;
			case "onEncryptionErrorEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnEncryptionError(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"), (ENCRYPTION_ERROR_TYPE)AgoraJson.GetData<int>(jsonData, "errorType"));
					}
				});
				break;
			case "onUploadLogResultEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnUploadLogResult(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"), (string)AgoraJson.GetData<string>(jsonData, "requestId"), (bool)AgoraJson.GetData<bool>(jsonData, "success"), (UPLOAD_ERROR_REASON)AgoraJson.GetData<int>(jsonData, "reason"));
					}
				});
				break;
			case "onUserAccountUpdatedEx":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnUserAccountUpdated(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"), (uint)AgoraJson.GetData<uint>(jsonData, "remoteUid"), (string)AgoraJson.GetData<string>(jsonData, "userAccount"));
					}
				});
				break;
			case "onAudioRoutingChanged":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnAudioRoutingChanged((int)AgoraJson.GetData<int>(jsonData, "routing"));
					}
				});
				break;
			case "onPermissionError":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnPermissionError((PERMISSION_TYPE)AgoraJson.GetData<int>(jsonData, "permissionType"));
					}
				});
				break;
			case "onExtensionEvent":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnExtensionEvent((string)AgoraJson.GetData<string>(jsonData, "provider"), (string)AgoraJson.GetData<string>(jsonData, "extension"), (string)AgoraJson.GetData<string>(jsonData, "key"), (string)AgoraJson.GetData<string>(jsonData, "value"));
					}
				});
				break;
			case "onExtensionStarted":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnExtensionStarted((string)AgoraJson.GetData<string>(jsonData, "provider"), (string)AgoraJson.GetData<string>(jsonData, "extension"));
					}
				});
				break;
			case "onExtensionStopped":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnExtensionStopped((string)AgoraJson.GetData<string>(jsonData, "provider"), (string)AgoraJson.GetData<string>(jsonData, "extension"));
					}
				});
				break;
			case "onExtensionError":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnExtensionError((string)AgoraJson.GetData<string>(jsonData, "provider"), (string)AgoraJson.GetData<string>(jsonData, "extension"), (int)AgoraJson.GetData<int>(jsonData, "error"), (string)AgoraJson.GetData<string>(jsonData, "message"));
					}
				});
				break;
			case "DirectCdnStreamingEventHandler_onDirectCdnStreamingStateChanged":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnDirectCdnStreamingStateChanged((DIRECT_CDN_STREAMING_STATE)AgoraJson.GetData<int>(jsonData, "state"), (DIRECT_CDN_STREAMING_ERROR)AgoraJson.GetData<int>(jsonData, "error"), (string)AgoraJson.GetData<string>(jsonData, "message"));
					}
				});
				break;
			case "DirectCdnStreamingEventHandler_onDirectCdnStreamingStats":
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnDirectCdnStreamingStats(AgoraJson.JsonToStruct<DirectCdnStreamingStats>(jsonData, "stats"));
					}
				});
				break;
			case "onStreamMessageEx":
			{
				uint byteLength = (uint)AgoraJson.GetData<uint>(jsonData, "length");
				IntPtr source = (IntPtr)(long)(ulong)AgoraJson.GetData<ulong>(jsonData, "data");
				byte[] byteData = new byte[byteLength];
				if (byteLength != 0)
				{
					Marshal.Copy(source, byteData, 0, (int)byteLength);
				}
				CallbackObject._CallbackQueue.EnQueue(delegate
				{
					if (EngineEventHandler != null)
					{
						EngineEventHandler.OnStreamMessage(AgoraJson.JsonToStruct<RtcConnection>(jsonData, "connection"), (uint)AgoraJson.GetData<uint>(jsonData, "remoteUid"), (int)AgoraJson.GetData<int>(jsonData, "streamId"), byteData, byteLength, (ulong)AgoraJson.GetData<ulong>(jsonData, "sentTs"));
					}
				});
				break;
			}
			}
		}
	}
	internal static class VideoEncodedFrameObserverNative
	{
		private static class LocalVideoEncodedVideoFrameInfo
		{
			internal static readonly EncodedVideoFrameInfo info = new EncodedVideoFrameInfo();
		}

		internal static IVideoEncodedFrameObserver VideoEncodedFrameObserver;

		[MonoPInvokeCallback(typeof(Func_EncodedVideoFrameObserver_Native))]
		internal static bool OnEncodedVideoFrameReceived(uint uid, IntPtr imageBuffer, ulong length, IntPtr videoEncodedFrameInfoPtr)
		{
			if (VideoEncodedFrameObserver == null)
			{
				return true;
			}
			IrisEncodedVideoFrameInfo irisEncodedVideoFrameInfo = (IrisEncodedVideoFrameInfo)(Marshal.PtrToStructure(videoEncodedFrameInfoPtr, typeof(IrisEncodedVideoFrameInfo)) ?? ((object)default(IrisEncodedVideoFrameInfo)));
			EncodedVideoFrameInfo info = LocalVideoEncodedVideoFrameInfo.info;
			info.codecType = (VIDEO_CODEC_TYPE)irisEncodedVideoFrameInfo.codecType;
			info.width = irisEncodedVideoFrameInfo.width;
			info.height = irisEncodedVideoFrameInfo.height;
			info.framesPerSecond = irisEncodedVideoFrameInfo.framesPerSecond;
			info.frameType = (VIDEO_FRAME_TYPE_NATIVE)irisEncodedVideoFrameInfo.frameType;
			info.rotation = (VIDEO_ORIENTATION)irisEncodedVideoFrameInfo.rotation;
			info.trackId = irisEncodedVideoFrameInfo.trackId;
			info.captureTimeMs = irisEncodedVideoFrameInfo.captureTimeMs;
			info.uid = irisEncodedVideoFrameInfo.uid;
			info.streamType = (VIDEO_STREAM_TYPE)irisEncodedVideoFrameInfo.streamType;
			try
			{
				return VideoEncodedFrameObserver.OnEncodedVideoFrameReceived(uid, imageBuffer, length, info);
			}
			catch (Exception ex)
			{
				AgoraLog.LogError("[Exception] IVideoEncodedFrameObserver.OnEncodedVideoFrameReceived: " + ex);
				return false;
			}
		}
	}
	internal static class VideoFrameObserverNative
	{
		private static class LocalVideoFrames
		{
			internal static readonly VideoFrame CaptureVideoFrame = new VideoFrame();

			internal static readonly VideoFrame PreEncodeVideoFrame = new VideoFrame();

			internal static readonly VideoFrame RenderVideoFrame = new VideoFrame();

			internal static readonly Dictionary<string, Dictionary<uint, VideoFrame>> RenderVideoFrameEx = new Dictionary<string, Dictionary<uint, VideoFrame>>();
		}

		internal static OBSERVER_MODE mode = OBSERVER_MODE.INTPTR;

		internal static IVideoFrameObserver VideoFrameObserver;

		private static VideoFrame ProcessVideoFrameReceived(IntPtr videoFramePtr, string channelId, uint uid)
		{
			IrisVideoFrame src = (IrisVideoFrame)(Marshal.PtrToStructure(videoFramePtr, typeof(IrisVideoFrame)) ?? ((object)default(IrisVideoFrame)));
			VideoFrame videoFrame = new VideoFrame();
			bool flag = VideoFrameObserver.GetVideoFormatPreference() != VIDEO_OBSERVER_FRAME_TYPE.FRAME_TYPE_YUV420;
			IrisVideoFrame dst = default(IrisVideoFrame);
			dst.type = VideoFrameObserver.GetVideoFormatPreference();
			if (flag)
			{
				AgoraRtcNative.ConvertVideoFrame(ref dst, ref src);
			}
			if (channelId == "")
			{
				switch (uid)
				{
				case 0u:
					videoFrame = LocalVideoFrames.CaptureVideoFrame;
					break;
				case 1u:
					videoFrame = LocalVideoFrames.PreEncodeVideoFrame;
					break;
				case 2u:
					videoFrame = LocalVideoFrames.RenderVideoFrame;
					break;
				}
			}
			else
			{
				if (!LocalVideoFrames.RenderVideoFrameEx.ContainsKey(channelId))
				{
					LocalVideoFrames.RenderVideoFrameEx[channelId] = new Dictionary<uint, VideoFrame>();
					LocalVideoFrames.RenderVideoFrameEx[channelId][uid] = new VideoFrame();
				}
				else if (!LocalVideoFrames.RenderVideoFrameEx[channelId].ContainsKey(uid))
				{
					LocalVideoFrames.RenderVideoFrameEx[channelId][uid] = new VideoFrame();
				}
				videoFrame = LocalVideoFrames.RenderVideoFrameEx[channelId][uid];
			}
			if (mode == OBSERVER_MODE.RAW_DATA)
			{
				if (videoFrame.height != dst.height || videoFrame.yStride != dst.y_stride || videoFrame.uStride != dst.u_stride || videoFrame.vStride != dst.v_stride)
				{
					videoFrame.yBuffer = new byte[dst.y_buffer_length];
					videoFrame.uBuffer = new byte[dst.u_buffer_length];
					videoFrame.vBuffer = new byte[dst.v_buffer_length];
				}
				if (dst.y_buffer != IntPtr.Zero)
				{
					Marshal.Copy(dst.y_buffer, videoFrame.yBuffer, 0, (int)dst.y_buffer_length);
				}
				if (dst.u_buffer != IntPtr.Zero)
				{
					Marshal.Copy(dst.u_buffer, videoFrame.uBuffer, 0, (int)dst.u_buffer_length);
				}
				if (dst.v_buffer != IntPtr.Zero)
				{
					Marshal.Copy(dst.v_buffer, videoFrame.vBuffer, 0, (int)dst.v_buffer_length);
				}
			}
			videoFrame.width = dst.width;
			videoFrame.height = dst.height;
			videoFrame.yBufferPtr = dst.y_buffer;
			videoFrame.yStride = dst.y_stride;
			videoFrame.uBufferPtr = dst.u_buffer;
			videoFrame.uStride = dst.u_stride;
			videoFrame.vBufferPtr = dst.v_buffer;
			videoFrame.vStride = dst.v_stride;
			videoFrame.rotation = dst.rotation;
			videoFrame.renderTimeMs = dst.render_time_ms;
			videoFrame.avsync_type = dst.av_sync_type;
			videoFrame.metadata_size = dst.metadata_size;
			videoFrame.metadata_buffer = dst.metadata_buffer;
			videoFrame.sharedContext = dst.sharedContext;
			videoFrame.matrix = dst.matrix;
			videoFrame.textureId = dst.textureId;
			if (flag)
			{
				AgoraRtcNative.ClearVideoFrame(ref dst);
			}
			return videoFrame;
		}

		[MonoPInvokeCallback(typeof(Func_VideoCaptureLocal_Native))]
		internal static bool OnCaptureVideoFrame(IntPtr videoFramePtr, IntPtr videoFrameConfig)
		{
			IrisVideoFrameBufferConfig irisVideoFrameBufferConfig = (IrisVideoFrameBufferConfig)(Marshal.PtrToStructure(videoFrameConfig, typeof(IrisVideoFrameBufferConfig)) ?? ((object)default(IrisVideoFrameBufferConfig)));
			VideoFrameBufferConfig config = default(VideoFrameBufferConfig);
			config.type = (VIDEO_SOURCE_TYPE)irisVideoFrameBufferConfig.type;
			config.id = irisVideoFrameBufferConfig.id;
			config.key = irisVideoFrameBufferConfig.key;
			try
			{
				return VideoFrameObserver == null || VideoFrameObserver.OnCaptureVideoFrame(ProcessVideoFrameReceived(videoFramePtr, "", 0u), config);
			}
			catch (Exception ex)
			{
				AgoraLog.LogError("[Exception] IVideoFrameObserver.OnCaptureVideoFrame: " + ex);
				return true;
			}
		}

		[MonoPInvokeCallback(typeof(Func_VideoCaptureLocal_Native))]
		internal static bool OnPreEncodeVideoFrame(IntPtr videoFramePtr, IntPtr videoFrameConfig)
		{
			IrisVideoFrameBufferConfig irisVideoFrameBufferConfig = (IrisVideoFrameBufferConfig)(Marshal.PtrToStructure(videoFrameConfig, typeof(IrisVideoFrameBufferConfig)) ?? ((object)default(IrisVideoFrameBufferConfig)));
			VideoFrameBufferConfig config = default(VideoFrameBufferConfig);
			config.type = (VIDEO_SOURCE_TYPE)irisVideoFrameBufferConfig.type;
			config.id = irisVideoFrameBufferConfig.id;
			config.key = irisVideoFrameBufferConfig.key;
			try
			{
				return VideoFrameObserver == null || VideoFrameObserver.OnPreEncodeVideoFrame(ProcessVideoFrameReceived(videoFramePtr, "", 1u), config);
			}
			catch (Exception ex)
			{
				AgoraLog.LogError("[Exception] IVideoFrameObserver.OnPreEncodeVideoFrame: " + ex);
				return true;
			}
		}

		[MonoPInvokeCallback(typeof(Func_VideoFrameRemote_Native))]
		internal static bool OnRenderVideoFrame(string channel_id, uint uid, IntPtr videoFramePtr)
		{
			try
			{
				return VideoFrameObserver == null || VideoFrameObserver.OnRenderVideoFrame(channel_id, uid, ProcessVideoFrameReceived(videoFramePtr, "", 2u));
			}
			catch (Exception ex)
			{
				AgoraLog.LogError("[Exception] IVideoFrameObserver.OnRenderVideoFrame: " + ex);
				return true;
			}
		}

		[MonoPInvokeCallback(typeof(Func_Uint32_t_Native))]
		internal static uint GetObservedFramePosition()
		{
			if (VideoFrameObserver == null)
			{
				return 3u;
			}
			try
			{
				return (uint)VideoFrameObserver.GetObservedFramePosition();
			}
			catch (Exception ex)
			{
				AgoraLog.LogError("[Exception] IVideoFrameObserver.GetObservedFramePosition: " + ex);
				return 0u;
			}
		}
	}
	public sealed class RtcEngine : IRtcEngineEx
	{
		private RtcEngineImpl _rtcEngineImpl;

		private IAudioDeviceManager _audioDeviceManager;

		private IVideoDeviceManager _videoDeviceManager;

		private ILocalSpatialAudioEngine _localSpatialAudioEngine;

		private IMediaPlayerCacheManager _mediaPlayerCacheManager;

		private IMediaRecorder _mediaRecorder;

		private const int ErrorCode = -7;

		private GameObject _agoraEngineObject;

		private static IRtcEngine instance;

		public static IRtcEngine Instance => instance ?? (instance = new RtcEngine());

		public static IRtcEngineEx InstanceEx => (IRtcEngineEx)(instance ?? (instance = new RtcEngine()));

		private RtcEngine()
		{
			_rtcEngineImpl = RtcEngineImpl.GetInstance();
			_audioDeviceManager = AudioDeviceManager.GetInstance(this, _rtcEngineImpl.GetAudioDeviceManager());
			_videoDeviceManager = VideoDeviceManager.GetInstance(this, _rtcEngineImpl.GetVideoDeviceManager());
			_localSpatialAudioEngine = LocalSpatialAudioEngine.GetInstance(this, _rtcEngineImpl.GetLocalSpatialAudioEngine());
			_mediaPlayerCacheManager = MediaPlayerCacheManager.GetInstance(this, _rtcEngineImpl.GetMediaPlayerCacheManager());
			_mediaRecorder = MediaRecorder.GetInstance(this, _rtcEngineImpl.GetMediaRecorder());
			InitAgoraEngineObject();
		}

		~RtcEngine()
		{
			_audioDeviceManager = null;
			_videoDeviceManager = null;
			_localSpatialAudioEngine = null;
			_mediaPlayerCacheManager = null;
			_mediaRecorder = null;
		}

		public static IRtcEngine CreateAgoraRtcEngine()
		{
			return instance ?? (instance = new RtcEngine());
		}

		public static IRtcEngineEx CreateAgoraRtcEngineEx()
		{
			return (IRtcEngineEx)(instance ?? (instance = new RtcEngine()));
		}

		public static IRtcEngine Get()
		{
			return instance;
		}

		private void InitAgoraEngineObject()
		{
			_agoraEngineObject = GameObject.Find("AgoraRtcEngineObj");
			if (_agoraEngineObject == null)
			{
				_agoraEngineObject = new GameObject("AgoraRtcEngineObj");
				UnityEngine.Object.DontDestroyOnLoad(_agoraEngineObject);
				_agoraEngineObject.hideFlags = HideFlags.HideInHierarchy;
				_agoraEngineObject.AddComponent<AgoraGameObject>();
			}
		}

		public override int Initialize(RtcEngineContext context)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.Initialize(context);
		}

		public override void Dispose(bool sync = false)
		{
			if (_rtcEngineImpl != null)
			{
				_rtcEngineImpl.Dispose(sync);
				_rtcEngineImpl = null;
				AudioDeviceManager.ReleaseInstance();
				VideoDeviceManager.ReleaseInstance();
				LocalSpatialAudioEngine.ReleaseInstance();
				MediaPlayerCacheManager.ReleaseInstance();
				MediaRecorder.ReleaseInstance();
				instance = null;
			}
		}

		public override void InitEventHandler(IRtcEngineEventHandler engineEventHandler)
		{
			if (_rtcEngineImpl != null)
			{
				_rtcEngineImpl.InitEventHandler(engineEventHandler);
			}
		}

		public override void RegisterAudioFrameObserver(IAudioFrameObserver audioFrameObserver, OBSERVER_MODE mode = OBSERVER_MODE.INTPTR)
		{
			if (_rtcEngineImpl != null)
			{
				_rtcEngineImpl.RegisterAudioFrameObserver(audioFrameObserver, mode);
			}
		}

		public override void UnRegisterAudioFrameObserver()
		{
			if (_rtcEngineImpl != null)
			{
				_rtcEngineImpl.UnRegisterAudioFrameObserver();
			}
		}

		public override void RegisterVideoFrameObserver(IVideoFrameObserver videoFrameObserver, OBSERVER_MODE mode = OBSERVER_MODE.INTPTR)
		{
			if (_rtcEngineImpl != null)
			{
				_rtcEngineImpl.RegisterVideoFrameObserver(videoFrameObserver, mode);
			}
		}

		public override void UnRegisterVideoFrameObserver()
		{
			if (_rtcEngineImpl != null)
			{
				_rtcEngineImpl.UnRegisterVideoFrameObserver();
			}
		}

		public override void RegisterVideoEncodedFrameObserver(IVideoEncodedFrameObserver videoEncodedImageReceiver, OBSERVER_MODE mode = OBSERVER_MODE.INTPTR)
		{
			if (_rtcEngineImpl != null)
			{
				_rtcEngineImpl.RegisterVideoEncodedFrameObserver(videoEncodedImageReceiver, mode);
			}
		}

		public override void UnRegisterVideoEncodedFrameObserver()
		{
			if (_rtcEngineImpl != null)
			{
				_rtcEngineImpl.UnRegisterVideoEncodedFrameObserver();
			}
		}

		public override IAudioDeviceManager GetAudioDeviceManager()
		{
			if (_rtcEngineImpl == null)
			{
				return null;
			}
			return _audioDeviceManager;
		}

		public override IVideoDeviceManager GetVideoDeviceManager()
		{
			if (_rtcEngineImpl == null)
			{
				return null;
			}
			return _videoDeviceManager;
		}

		public override IMediaPlayerCacheManager GetMediaPlayerCacheManager()
		{
			if (_rtcEngineImpl == null)
			{
				return null;
			}
			return _mediaPlayerCacheManager;
		}

		public override IMediaRecorder GetMediaRecorder()
		{
			if (_rtcEngineImpl == null)
			{
				return null;
			}
			return _mediaRecorder;
		}

		public override IMediaPlayer CreateMediaPlayer()
		{
			if (_rtcEngineImpl == null)
			{
				return null;
			}
			return new MediaPlayer(this, _rtcEngineImpl.GetMediaPlayer());
		}

		public override void DestroyMediaPlayer(IMediaPlayer mediaPlayer)
		{
			if (_rtcEngineImpl != null)
			{
			}
			mediaPlayer.Dispose();
		}

		public override ILocalSpatialAudioEngine GetLocalSpatialAudioEngine()
		{
			if (_rtcEngineImpl == null)
			{
				return null;
			}
			return _localSpatialAudioEngine;
		}

		public override string GetVersion(ref int build)
		{
			if (_rtcEngineImpl == null)
			{
				build = 0;
				return null;
			}
			return _rtcEngineImpl.GetVersion(ref build);
		}

		public override string GetErrorDescription(int code)
		{
			if (_rtcEngineImpl == null)
			{
				return null;
			}
			return _rtcEngineImpl.GetErrorDescription(code);
		}

		public override int JoinChannel(string token, string channelId, string info = "", uint uid = 0u)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.JoinChannel(token, channelId, info, uid);
		}

		public override int JoinChannel(string token, string channelId, uint uid, ChannelMediaOptions options)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.JoinChannel(token, channelId, uid, options);
		}

		public override int UpdateChannelMediaOptions(ChannelMediaOptions options)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.UpdateChannelMediaOptions(options);
		}

		public override int LeaveChannel()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.LeaveChannel();
		}

		public override int LeaveChannel(LeaveChannelOptions options)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.LeaveChannel(options);
		}

		public override int RenewToken(string token)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.RenewToken(token);
		}

		public override int SetChannelProfile(CHANNEL_PROFILE_TYPE profile)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetChannelProfile(profile);
		}

		public override int SetClientRole(CLIENT_ROLE_TYPE role)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetClientRole(role);
		}

		public override int SetClientRole(CLIENT_ROLE_TYPE role, ClientRoleOptions options)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetClientRole(role, options);
		}

		public override int StartEchoTest()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StartEchoTest();
		}

		public override int StartEchoTest(int intervalInSeconds)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StartEchoTest(intervalInSeconds);
		}

		public override int StartEchoTest(EchoTestConfiguration config)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StartEchoTest(config);
		}

		public override int StopEchoTest()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StopEchoTest();
		}

		public override int EnableVideo()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.EnableVideo();
		}

		public override int DisableVideo()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.DisableVideo();
		}

		public override int StartPreview()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StartPreview();
		}

		public override int StartPreview(VIDEO_SOURCE_TYPE sourceType)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StartPreview();
		}

		public override int StopPreview()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StopPreview();
		}

		public override int StopPreview(VIDEO_SOURCE_TYPE sourceType)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StopPreview(sourceType);
		}

		public override int StartLastmileProbeTest(LastmileProbeConfig config)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StartLastmileProbeTest(config);
		}

		public override int StopLastmileProbeTest()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StopLastmileProbeTest();
		}

		public override int SetVideoEncoderConfiguration(VideoEncoderConfiguration config)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetVideoEncoderConfiguration(config);
		}

		public override int SetBeautyEffectOptions(bool enabled, BeautyOptions options, MEDIA_SOURCE_TYPE type = MEDIA_SOURCE_TYPE.PRIMARY_CAMERA_SOURCE)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetBeautyEffectOptions(enabled, options, type);
		}

		public override int EnableVirtualBackground(bool enabled, VirtualBackgroundSource backgroundSource, SegmentationProperty segproperty, MEDIA_SOURCE_TYPE type = MEDIA_SOURCE_TYPE.PRIMARY_CAMERA_SOURCE)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.EnableVirtualBackground(enabled, backgroundSource, segproperty, type);
		}

		public override int SetupRemoteVideo(VideoCanvas canvas)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetupRemoteVideo(canvas);
		}

		public override int SetupLocalVideo(VideoCanvas canvas)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetupLocalVideo(canvas);
		}

		public override int EnableAudio()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.EnableAudio();
		}

		public override int DisableAudio()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.DisableAudio();
		}

		public override int SetAudioProfile(AUDIO_PROFILE_TYPE profile, AUDIO_SCENARIO_TYPE scenario)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetAudioProfile(profile, scenario);
		}

		public override int SetAudioScenario(AUDIO_SCENARIO_TYPE scenario)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetAudioScenario(scenario);
		}

		public override int SetAudioProfile(AUDIO_PROFILE_TYPE profile)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetAudioProfile(profile);
		}

		public override int EnableLocalAudio(bool enabled)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.EnableLocalAudio(enabled);
		}

		public override int MuteLocalAudioStream(bool mute)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.MuteLocalAudioStream(mute);
		}

		public override int MuteAllRemoteAudioStreams(bool mute)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.MuteAllRemoteAudioStreams(mute);
		}

		public override int SetDefaultMuteAllRemoteAudioStreams(bool mute)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetDefaultMuteAllRemoteAudioStreams(mute);
		}

		public override int MuteRemoteAudioStream(uint uid, bool mute)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.MuteRemoteAudioStream(uid, mute);
		}

		public override int MuteLocalVideoStream(bool mute)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.MuteLocalVideoStream(mute);
		}

		public override int EnableLocalVideo(bool enabled)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.EnableLocalVideo(enabled);
		}

		public override int MuteAllRemoteVideoStreams(bool mute)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.MuteAllRemoteVideoStreams(mute);
		}

		public override int SetDefaultMuteAllRemoteVideoStreams(bool mute)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetDefaultMuteAllRemoteVideoStreams(mute);
		}

		public override int EnableVideoImageSource(bool enable, ImageTrackOptions options)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.EnableVideoImageSource(enable, options);
		}

		public override int SetColorEnhanceOptions(bool enabled, ColorEnhanceOptions options, MEDIA_SOURCE_TYPE type = MEDIA_SOURCE_TYPE.PRIMARY_CAMERA_SOURCE)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetColorEnhanceOptions(enabled, options, type);
		}

		public override int SetLowlightEnhanceOptions(bool enabled, LowlightEnhanceOptions options, MEDIA_SOURCE_TYPE type = MEDIA_SOURCE_TYPE.PRIMARY_CAMERA_SOURCE)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetLowlightEnhanceOptions(enabled, options, type);
		}

		public override int SetRemoteVideoSubscriptionOptions(uint uid, VideoSubscriptionOptions options)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetRemoteVideoSubscriptionOptions(uid, options);
		}

		public override int SetVideoDenoiserOptions(bool enabled, VideoDenoiserOptions options, MEDIA_SOURCE_TYPE type = MEDIA_SOURCE_TYPE.PRIMARY_CAMERA_SOURCE)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetVideoDenoiserOptions(enabled, options, type);
		}

		public override int MuteRemoteVideoStream(uint uid, bool mute)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.MuteRemoteVideoStream(uid, mute);
		}

		public override int SetRemoteVideoStreamType(uint uid, VIDEO_STREAM_TYPE streamType)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetRemoteVideoStreamType(uid, streamType);
		}

		public override int SetRemoteDefaultVideoStreamType(VIDEO_STREAM_TYPE streamType)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetRemoteDefaultVideoStreamType(streamType);
		}

		public override int SetDualStreamMode(SIMULCAST_STREAM_MODE mode)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetDualStreamMode(mode);
		}

		public override int SetDualStreamMode(VIDEO_SOURCE_TYPE sourceType, SIMULCAST_STREAM_MODE mode)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetDualStreamMode(sourceType, mode);
		}

		public override int SetDualStreamMode(VIDEO_SOURCE_TYPE sourceType, SIMULCAST_STREAM_MODE mode, SimulcastStreamConfig streamConfig)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetDualStreamMode(sourceType, mode, streamConfig);
		}

		public override int SetDualStreamModeEx(VIDEO_SOURCE_TYPE sourceType, SIMULCAST_STREAM_MODE mode, SimulcastStreamConfig streamConfig, RtcConnection connection)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetDualStreamModeEx(sourceType, mode, streamConfig, connection);
		}

		public override int TakeSnapshotEx(RtcConnection connection, uint uid, string filePath)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.TakeSnapshotEx(connection, uid, filePath);
		}

		public override int EnableAudioVolumeIndication(int interval, int smooth, bool reportVad)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.EnableAudioVolumeIndication(interval, smooth, reportVad);
		}

		public override int StartAudioRecording(string filePath, AUDIO_RECORDING_QUALITY_TYPE quality)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StartAudioRecording(filePath, quality);
		}

		public override int StartAudioRecording(string filePath, int sampleRate, AUDIO_RECORDING_QUALITY_TYPE quality)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StartAudioRecording(filePath, sampleRate, quality);
		}

		public override int StartAudioRecording(AudioRecordingConfiguration config)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StartAudioRecording(config);
		}

		public override void RegisterAudioEncodedFrameObserver(AudioEncodedFrameObserverConfig config, IAudioEncodedFrameObserver observer)
		{
			if (_rtcEngineImpl != null)
			{
				_rtcEngineImpl.RegisterAudioEncodedFrameObserver(config, observer);
			}
		}

		public override void UnRegisterAudioEncodedFrameObserver()
		{
			if (_rtcEngineImpl != null)
			{
				_rtcEngineImpl.UnRegisterAudioEncodedFrameObserver();
			}
		}

		public override int StopAudioRecording()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StopAudioRecording();
		}

		public override int StartAudioMixing(string filePath, bool loopback, int cycle)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StartAudioMixing(filePath, loopback, cycle);
		}

		public override int StartAudioMixing(string filePath, bool loopback, int cycle, int startPos)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StartAudioMixing(filePath, loopback, cycle, startPos);
		}

		public override int SetAudioMixingDualMonoMode(AUDIO_MIXING_DUAL_MONO_MODE mode)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetAudioMixingDualMonoMode(mode);
		}

		public override int StopAudioMixing()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StopAudioMixing();
		}

		public override int PauseAudioMixing()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.PauseAudioMixing();
		}

		public override int ResumeAudioMixing()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.ResumeAudioMixing();
		}

		public override int AdjustAudioMixingVolume(int volume)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.AdjustAudioMixingVolume(volume);
		}

		public override int AdjustAudioMixingPublishVolume(int volume)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.AdjustAudioMixingPublishVolume(volume);
		}

		public override int GetAudioMixingPublishVolume()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.GetAudioMixingPublishVolume();
		}

		public override int AdjustAudioMixingPlayoutVolume(int volume)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.AdjustAudioMixingPlayoutVolume(volume);
		}

		public override int GetAudioMixingPlayoutVolume()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.GetAudioMixingPlayoutVolume();
		}

		public override int GetAudioMixingDuration()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.GetAudioMixingDuration();
		}

		public override int GetAudioMixingCurrentPosition()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.GetAudioMixingCurrentPosition();
		}

		public override int SetAudioMixingPosition(int pos)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetAudioMixingPosition(pos);
		}

		public override int SetAudioMixingPitch(int pitch)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetAudioMixingPitch(pitch);
		}

		public override int GetEffectsVolume()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.GetEffectsVolume();
		}

		public override int SetEffectsVolume(int volume)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetEffectsVolume(volume);
		}

		public override int PreloadEffect(int soundId, string filePath, int startPos = 0)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.PreloadEffect(soundId, filePath, startPos);
		}

		public override int PlayEffect(int soundId, string filePath, int loopCount, double pitch, double pan, int gain, bool publish = false, int startPos = 0)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.PlayEffect(soundId, filePath, loopCount, pitch, pan, gain, publish, startPos);
		}

		public override int PlayAllEffects(int loopCount, double pitch, double pan, int gain, bool publish = false)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.PlayAllEffects(loopCount, pitch, pan, gain, publish);
		}

		public override int GetVolumeOfEffect(int soundId)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.GetVolumeOfEffect(soundId);
		}

		public override int SetVolumeOfEffect(int soundId, int volume)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetVolumeOfEffect(soundId, volume);
		}

		public override int PauseEffect(int soundId)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.PauseEffect(soundId);
		}

		public override int PauseAllEffects()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.PauseAllEffects();
		}

		public override int ResumeEffect(int soundId)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.ResumeEffect(soundId);
		}

		public override int ResumeAllEffects()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.ResumeAllEffects();
		}

		public override int StopEffect(int soundId)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StopEffect(soundId);
		}

		public override int StopAllEffects()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StopAllEffects();
		}

		public override int UnloadEffect(int soundId)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.UnloadEffect(soundId);
		}

		public override int UnloadAllEffects()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.UnloadAllEffects();
		}

		public override int GetEffectCurrentPosition(int soundId)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.GetEffectCurrentPosition(soundId);
		}

		public override int GetEffectDuration(string filePath)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.GetEffectDuration(filePath);
		}

		public override int SetEffectPosition(int soundId, int pos)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetEffectPosition(soundId, pos);
		}

		public override int EnableSoundPositionIndication(bool enabled)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.EnableSoundPositionIndication(enabled);
		}

		public override int SetRemoteVoicePosition(uint uid, double pan, double gain)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetRemoteVoicePosition(uid, pan, gain);
		}

		public override int EnableSpatialAudio(bool enabled)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.EnableSpatialAudio(enabled);
		}

		public override int SetRemoteUserSpatialAudioParams(uint uid, SpatialAudioParams param)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetRemoteUserSpatialAudioParams(uid, param);
		}

		public override int SetVoiceBeautifierPreset(VOICE_BEAUTIFIER_PRESET preset)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetVoiceBeautifierPreset(preset);
		}

		public override int SetAudioEffectPreset(AUDIO_EFFECT_PRESET preset)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetAudioEffectPreset(preset);
		}

		public override int SetVoiceConversionPreset(VOICE_CONVERSION_PRESET preset)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetVoiceConversionPreset(preset);
		}

		public override int SetAudioEffectParameters(AUDIO_EFFECT_PRESET preset, int param1, int param2)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetAudioEffectParameters(preset, param1, param2);
		}

		public override int SetVoiceBeautifierParameters(VOICE_BEAUTIFIER_PRESET preset, int param1, int param2)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetVoiceBeautifierParameters(preset, param1, param2);
		}

		public override int SetVoiceConversionParameters(VOICE_CONVERSION_PRESET preset, int param1, int param2)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetVoiceConversionParameters(preset, param1, param2);
		}

		public override int SetLocalVoicePitch(double pitch)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetLocalVoicePitch(pitch);
		}

		public override int SetLocalVoiceEqualization(AUDIO_EQUALIZATION_BAND_FREQUENCY bandFrequency, int bandGain)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetLocalVoiceEqualization(bandFrequency, bandGain);
		}

		public override int SetLocalVoiceReverb(AUDIO_REVERB_TYPE reverbKey, int value)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetLocalVoiceReverb(reverbKey, value);
		}

		public override int SetLogFile(string filePath)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetLogFile(filePath);
		}

		public override int SetLogFilter(uint filter)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetLogFilter(filter);
		}

		public override int SetLogLevel(LOG_LEVEL level)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetLogLevel(level);
		}

		public override int SetLogFileSize(uint fileSizeInKBytes)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetLogFileSize(fileSizeInKBytes);
		}

		public override int SetLocalRenderMode(RENDER_MODE_TYPE renderMode, VIDEO_MIRROR_MODE_TYPE mirrorMode)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetLocalRenderMode(renderMode, mirrorMode);
		}

		public override int SetRemoteRenderMode(uint uid, RENDER_MODE_TYPE renderMode, VIDEO_MIRROR_MODE_TYPE mirrorMode)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetRemoteRenderMode(uid, renderMode, mirrorMode);
		}

		public override int SetLocalRenderMode(RENDER_MODE_TYPE renderMode)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetLocalRenderMode(renderMode);
		}

		public override int SetLocalVideoMirrorMode(VIDEO_MIRROR_MODE_TYPE mirrorMode)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetLocalVideoMirrorMode(mirrorMode);
		}

		public override int EnableDualStreamMode(bool enabled)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.EnableDualStreamMode(enabled);
		}

		public override int EnableDualStreamMode(VIDEO_SOURCE_TYPE sourceType, bool enabled)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.EnableDualStreamMode(sourceType, enabled);
		}

		public override int EnableDualStreamMode(VIDEO_SOURCE_TYPE sourceType, bool enabled, SimulcastStreamConfig streamConfig)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.EnableDualStreamMode(sourceType, enabled, streamConfig);
		}

		public override int SetExternalAudioSink(bool enabled, int sampleRate, int channels)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetExternalAudioSink(enabled, sampleRate, channels);
		}

		public override int StartPrimaryCustomAudioTrack(AudioTrackConfig config)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StartPrimaryCustomAudioTrack(config);
		}

		public override int StopPrimaryCustomAudioTrack()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StopPrimaryCustomAudioTrack();
		}

		public override int StartSecondaryCustomAudioTrack(AudioTrackConfig config)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StartSecondaryCustomAudioTrack(config);
		}

		public override int StopSecondaryCustomAudioTrack()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StopSecondaryCustomAudioTrack();
		}

		public override int SetRecordingAudioFrameParameters(int sampleRate, int channel, RAW_AUDIO_FRAME_OP_MODE_TYPE mode, int samplesPerCall)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetRecordingAudioFrameParameters(sampleRate, channel, mode, samplesPerCall);
		}

		public override int SetPlaybackAudioFrameParameters(int sampleRate, int channel, RAW_AUDIO_FRAME_OP_MODE_TYPE mode, int samplesPerCall)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetPlaybackAudioFrameParameters(sampleRate, channel, mode, samplesPerCall);
		}

		public override int SetMixedAudioFrameParameters(int sampleRate, int channel, int samplesPerCall)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetMixedAudioFrameParameters(sampleRate, channel, samplesPerCall);
		}

		public override int SetPlaybackAudioFrameBeforeMixingParameters(int sampleRate, int channel)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetPlaybackAudioFrameBeforeMixingParameters(sampleRate, channel);
		}

		public override int EnableAudioSpectrumMonitor(int intervalInMS = 100)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.EnableAudioSpectrumMonitor(intervalInMS);
		}

		public override int DisableAudioSpectrumMonitor()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.DisableAudioSpectrumMonitor();
		}

		public override void RegisterAudioSpectrumObserver(IAudioSpectrumObserver observer)
		{
			if (_rtcEngineImpl != null)
			{
				_rtcEngineImpl.RegisterAudioSpectrumObserver(observer);
			}
		}

		public override void UnregisterAudioSpectrumObserver()
		{
			if (_rtcEngineImpl != null)
			{
				_rtcEngineImpl.UnregisterAudioSpectrumObserver();
			}
		}

		public override int AdjustRecordingSignalVolume(int volume)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.AdjustRecordingSignalVolume(volume);
		}

		public override int MuteRecordingSignal(bool mute)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.MuteRecordingSignal(mute);
		}

		public override int AdjustPlaybackSignalVolume(int volume)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.AdjustPlaybackSignalVolume(volume);
		}

		public override int AdjustLoopbackSignalVolume(int volume)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.AdjustLoopbackSignalVolume(volume);
		}

		public override int AdjustUserPlaybackSignalVolume(uint uid, int volume)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.AdjustUserPlaybackSignalVolume(uid, volume);
		}

		public override int EnableLoopbackRecording(bool enabled, string deviceName = "")
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.EnableLoopbackRecording(enabled, deviceName);
		}

		public override int GetLoopbackRecordingVolume()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.GetLoopbackRecordingVolume();
		}

		public override int EnableInEarMonitoring(bool enabled, int includeAudioFilters)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.EnableInEarMonitoring(enabled, includeAudioFilters);
		}

		public override int SetInEarMonitoringVolume(int volume)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetInEarMonitoringVolume(volume);
		}

		public override int LoadExtensionProvider(string path, bool unload_after_use = false)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.LoadExtensionProvider(path, unload_after_use);
		}

		public override int SetExtensionProviderProperty(string provider, string key, string value)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetExtensionProviderProperty(provider, key, value);
		}

		public override int EnableExtension(string provider, string extension, bool enable = true, MEDIA_SOURCE_TYPE type = MEDIA_SOURCE_TYPE.UNKNOWN_MEDIA_SOURCE)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.EnableExtension(provider, extension, enable, type);
		}

		public override int SetExtensionProperty(string provider, string extension, string key, string value, MEDIA_SOURCE_TYPE type = MEDIA_SOURCE_TYPE.UNKNOWN_MEDIA_SOURCE)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetExtensionProperty(provider, extension, key, value, type);
		}

		public override int GetExtensionProperty(string provider, string extension, string key, ref string value, int buf_len, MEDIA_SOURCE_TYPE type = MEDIA_SOURCE_TYPE.UNKNOWN_MEDIA_SOURCE)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.GetExtensionProperty(provider, extension, key, ref value, buf_len, type);
		}

		public override int SetCameraCapturerConfiguration(CameraCapturerConfiguration config)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetCameraCapturerConfiguration(config);
		}

		public override int SwitchCamera()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SwitchCamera();
		}

		public override bool IsCameraZoomSupported()
		{
			if (_rtcEngineImpl == null)
			{
				return false;
			}
			return _rtcEngineImpl.IsCameraZoomSupported();
		}

		public override bool IsCameraFaceDetectSupported()
		{
			if (_rtcEngineImpl == null)
			{
				return false;
			}
			return _rtcEngineImpl.IsCameraFaceDetectSupported();
		}

		public override bool IsCameraTorchSupported()
		{
			if (_rtcEngineImpl == null)
			{
				return false;
			}
			return _rtcEngineImpl.IsCameraTorchSupported();
		}

		public override bool IsCameraFocusSupported()
		{
			if (_rtcEngineImpl == null)
			{
				return false;
			}
			return _rtcEngineImpl.IsCameraFocusSupported();
		}

		public override bool IsCameraAutoFocusFaceModeSupported()
		{
			if (_rtcEngineImpl == null)
			{
				return false;
			}
			return _rtcEngineImpl.IsCameraAutoFocusFaceModeSupported();
		}

		public override int SetCameraZoomFactor(float factor)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetCameraZoomFactor(factor);
		}

		public override int EnableFaceDetection(bool enabled)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.EnableFaceDetection(enabled);
		}

		public override float GetCameraMaxZoomFactor()
		{
			if (_rtcEngineImpl == null)
			{
				return -7f;
			}
			return _rtcEngineImpl.GetCameraMaxZoomFactor();
		}

		public override int SetCameraFocusPositionInPreview(float positionX, float positionY)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetCameraFocusPositionInPreview(positionX, positionY);
		}

		public override int SetCameraTorchOn(bool isOn)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetCameraTorchOn(isOn);
		}

		public override int SetCameraAutoFocusFaceModeEnabled(bool enabled)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetCameraAutoFocusFaceModeEnabled(enabled);
		}

		public override bool IsCameraExposurePositionSupported()
		{
			if (_rtcEngineImpl == null)
			{
				return false;
			}
			return _rtcEngineImpl.IsCameraExposurePositionSupported();
		}

		public override int SetCameraExposurePosition(float positionXinView, float positionYinView)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetCameraExposurePosition(positionXinView, positionYinView);
		}

		public override bool IsCameraAutoExposureFaceModeSupported()
		{
			if (_rtcEngineImpl == null)
			{
				return false;
			}
			return _rtcEngineImpl.IsCameraAutoExposureFaceModeSupported();
		}

		public override int SetCameraAutoExposureFaceModeEnabled(bool enabled)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetCameraAutoExposureFaceModeEnabled(enabled);
		}

		public override int SetDefaultAudioRouteToSpeakerphone(bool defaultToSpeaker)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetDefaultAudioRouteToSpeakerphone(defaultToSpeaker);
		}

		public override int SetEnableSpeakerphone(bool speakerOn)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetEnableSpeakerphone(speakerOn);
		}

		public override bool IsSpeakerphoneEnabled()
		{
			if (_rtcEngineImpl == null)
			{
				return false;
			}
			return _rtcEngineImpl.IsSpeakerphoneEnabled();
		}

		public override int StartScreenCaptureByDisplayId(uint displayId, Rectangle regionRect, ScreenCaptureParameters captureParams)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StartScreenCaptureByDisplayId(displayId, regionRect, captureParams);
		}

		public override int StartScreenCaptureByScreenRect(Rectangle screenRect, Rectangle regionRect, ScreenCaptureParameters captureParams)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StartScreenCaptureByScreenRect(screenRect, regionRect, captureParams);
		}

		public override int StartScreenCapture(byte[] mediaProjectionPermissionResultData, ScreenCaptureParameters captureParams)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StartScreenCapture(mediaProjectionPermissionResultData, captureParams);
		}

		public override int StartScreenCapture(ScreenCaptureParameters2 captureParams)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StartScreenCapture(captureParams);
		}

		public override int UpdateScreenCapture(ScreenCaptureParameters2 captureParams)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.UpdateScreenCapture(captureParams);
		}

		public override int StartScreenCaptureByWindowId(ulong windowId, Rectangle regionRect, ScreenCaptureParameters captureParams)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StartScreenCaptureByWindowId(windowId, regionRect, captureParams);
		}

		public override int SetScreenCaptureContentHint(VIDEO_CONTENT_HINT contentHint)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetScreenCaptureContentHint(contentHint);
		}

		public override int UpdateScreenCaptureRegion(Rectangle regionRect)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.UpdateScreenCaptureRegion(regionRect);
		}

		public override int UpdateScreenCaptureParameters(ScreenCaptureParameters captureParams)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.UpdateScreenCaptureParameters(captureParams);
		}

		public override int StopScreenCapture()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StopScreenCapture();
		}

		public override string GetCallId()
		{
			if (_rtcEngineImpl == null)
			{
				return null;
			}
			return _rtcEngineImpl.GetCallId();
		}

		public override int Rate(string callId, int rating, string description)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.Rate(callId, rating, description);
		}

		public override int Complain(string callId, string description)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.Complain(callId, description);
		}

		public override int StartLocalVideoTranscoder(LocalTranscoderConfiguration config)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StartLocalVideoTranscoder(config);
		}

		public override int UpdateLocalTranscoderConfiguration(LocalTranscoderConfiguration config)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.UpdateLocalTranscoderConfiguration(config);
		}

		public override int StopLocalVideoTranscoder()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StopLocalVideoTranscoder();
		}

		public override int StartPrimaryCameraCapture(CameraCapturerConfiguration config)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StartPrimaryCameraCapture(config);
		}

		public override int StartSecondaryCameraCapture(CameraCapturerConfiguration config)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StartSecondaryCameraCapture(config);
		}

		public override int StopPrimaryCameraCapture()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StopPrimaryCameraCapture();
		}

		public override int StopSecondaryCameraCapture()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StopSecondaryCameraCapture();
		}

		public override int SetCameraDeviceOrientation(VIDEO_SOURCE_TYPE type, VIDEO_ORIENTATION orientation)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetCameraDeviceOrientation(type, orientation);
		}

		public override int SetScreenCaptureOrientation(VIDEO_SOURCE_TYPE type, VIDEO_ORIENTATION orientation)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetScreenCaptureOrientation(type, orientation);
		}

		public override int StartPrimaryScreenCapture(ScreenCaptureConfiguration config)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StartPrimaryScreenCapture(config);
		}

		public override int StartSecondaryScreenCapture(ScreenCaptureConfiguration config)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StartSecondaryScreenCapture(config);
		}

		public override int StopPrimaryScreenCapture()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StopPrimaryScreenCapture();
		}

		public override int StopSecondaryScreenCapture()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StopSecondaryScreenCapture();
		}

		public override CONNECTION_STATE_TYPE GetConnectionState()
		{
			if (_rtcEngineImpl == null)
			{
				return CONNECTION_STATE_TYPE.CONNECTION_STATE_CONNECTED;
			}
			return _rtcEngineImpl.GetConnectionState();
		}

		public override int SetRemoteUserPriority(uint uid, PRIORITY_TYPE userPriority)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetRemoteUserPriority(uid, userPriority);
		}

		public override int SetEncryptionMode(string encryptionMode)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetEncryptionMode(encryptionMode);
		}

		public override int SetEncryptionSecret(string secret)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetEncryptionSecret(secret);
		}

		public override int EnableEncryption(bool enabled, EncryptionConfig config)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.EnableEncryption(enabled, config);
		}

		public override int CreateDataStream(ref int streamId, bool reliable, bool ordered)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.CreateDataStream(ref streamId, reliable, ordered);
		}

		public override int CreateDataStream(ref int streamId, DataStreamConfig config)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.CreateDataStream(ref streamId, config);
		}

		public override int SendStreamMessage(int streamId, byte[] data, uint length)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SendStreamMessage(streamId, data, length);
		}

		public override int AddVideoWatermark(RtcImage watermark)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.AddVideoWatermark(watermark);
		}

		public override int AddVideoWatermark(string watermarkUrl, WatermarkOptions options)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.AddVideoWatermark(watermarkUrl, options);
		}

		public override int ClearVideoWatermark()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.ClearVideoWatermark();
		}

		public override int ClearVideoWatermarks()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.ClearVideoWatermarks();
		}

		public override int AddInjectStreamUrl(string url, InjectStreamConfig config)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.AddInjectStreamUrl(url, config);
		}

		public override int RemoveInjectStreamUrl(string url)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.RemoveInjectStreamUrl(url);
		}

		public override int PauseAudio()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.PauseAudio();
		}

		public override int ResumeAudio()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.ResumeAudio();
		}

		public override int EnableWebSdkInteroperability(bool enabled)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.EnableWebSdkInteroperability(enabled);
		}

		public override int SendCustomReportMessage(string id, string category, string @event, string label, int value)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SendCustomReportMessage(id, category, @event, label, value);
		}

		public override void RegisterMediaMetadataObserver(IMetadataObserver observer, METADATA_TYPE type)
		{
			if (_rtcEngineImpl != null)
			{
				_rtcEngineImpl.RegisterMediaMetadataObserver(observer, type);
			}
		}

		public override void UnregisterMediaMetadataObserver()
		{
			if (_rtcEngineImpl != null)
			{
				_rtcEngineImpl.UnregisterMediaMetadataObserver();
			}
		}

		public override int StartAudioFrameDump(string channel_id, uint user_id, string location, string uuid, string passwd, long duration_ms, bool auto_upload)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StartAudioFrameDump(channel_id, user_id, location, uuid, passwd, duration_ms, auto_upload);
		}

		public override int StopAudioFrameDump(string channel_id, uint user_id, string location)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StopAudioFrameDump(channel_id, user_id, location);
		}

		public override int RegisterLocalUserAccount(string appId, string userAccount)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.RegisterLocalUserAccount(appId, userAccount);
		}

		public override int JoinChannelWithUserAccount(string token, string channelId, string userAccount)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.JoinChannelWithUserAccount(token, channelId, userAccount);
		}

		public override int JoinChannelWithUserAccount(string token, string channelId, string userAccount, ChannelMediaOptions options)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.JoinChannelWithUserAccount(token, channelId, userAccount, options);
		}

		public override int GetUserInfoByUserAccount(string userAccount, ref UserInfo userInfo)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.GetUserInfoByUserAccount(userAccount, ref userInfo);
		}

		public override int GetUserInfoByUid(uint uid, ref UserInfo userInfo)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.GetUserInfoByUid(uid, ref userInfo);
		}

		public override int StartChannelMediaRelay(ChannelMediaRelayConfiguration configuration)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StartChannelMediaRelay(configuration);
		}

		public override int UpdateChannelMediaRelay(ChannelMediaRelayConfiguration configuration)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.UpdateChannelMediaRelay(configuration);
		}

		public override int StopChannelMediaRelay()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StopChannelMediaRelay();
		}

		public override int SetDirectCdnStreamingAudioConfiguration(AUDIO_PROFILE_TYPE profile)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetDirectCdnStreamingAudioConfiguration(profile);
		}

		public override int SetDirectCdnStreamingVideoConfiguration(VideoEncoderConfiguration config)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetDirectCdnStreamingVideoConfiguration(config);
		}

		public override int StartDirectCdnStreaming(string publishUrl, DirectCdnStreamingMediaOptions options)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StartDirectCdnStreaming(publishUrl, options);
		}

		public override int StopDirectCdnStreaming()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StopDirectCdnStreaming();
		}

		public override int UpdateDirectCdnStreamingMediaOptions(DirectCdnStreamingMediaOptions options)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.UpdateDirectCdnStreamingMediaOptions(options);
		}

		public override int JoinChannelEx(string token, RtcConnection connection, ChannelMediaOptions options)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.JoinChannelEx(token, connection, options);
		}

		public override int LeaveChannelEx(RtcConnection connection)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.LeaveChannelEx(connection);
		}

		public override int UpdateChannelMediaOptionsEx(ChannelMediaOptions options, RtcConnection connection)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.UpdateChannelMediaOptionsEx(options, connection);
		}

		public override int SetVideoEncoderConfigurationEx(VideoEncoderConfiguration config, RtcConnection connection)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetVideoEncoderConfigurationEx(config, connection);
		}

		public override int SetupRemoteVideoEx(VideoCanvas canvas, RtcConnection connection)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetupRemoteVideoEx(canvas, connection);
		}

		public override int MuteRemoteAudioStreamEx(uint uid, bool mute, RtcConnection connection)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.MuteRemoteAudioStreamEx(uid, mute, connection);
		}

		public override int MuteRemoteVideoStreamEx(uint uid, bool mute, RtcConnection connection)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.MuteRemoteVideoStreamEx(uid, mute, connection);
		}

		public override int SetRemoteVoicePositionEx(uint uid, double pan, double gain, RtcConnection connection)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetRemoteVoicePositionEx(uid, pan, gain, connection);
		}

		public override int SetRemoteUserSpatialAudioParamsEx(uint uid, SpatialAudioParams param, RtcConnection connection)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetRemoteUserSpatialAudioParamsEx(uid, param, connection);
		}

		public override int SetRemoteRenderModeEx(uint uid, RENDER_MODE_TYPE renderMode, VIDEO_MIRROR_MODE_TYPE mirrorMode, RtcConnection connection)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetRemoteRenderModeEx(uid, renderMode, mirrorMode, connection);
		}

		public override int EnableLoopbackRecordingEx(bool enabled, RtcConnection connection)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.EnableLoopbackRecordingEx(enabled, connection);
		}

		public override CONNECTION_STATE_TYPE GetConnectionStateEx(RtcConnection connection)
		{
			if (_rtcEngineImpl == null)
			{
				return CONNECTION_STATE_TYPE.CONNECTION_STATE_CONNECTED;
			}
			return _rtcEngineImpl.GetConnectionStateEx(connection);
		}

		public override int EnableEncryptionEx(RtcConnection connection, bool enabled, EncryptionConfig config)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.EnableEncryptionEx(connection, enabled, config);
		}

		public override int CreateDataStreamEx(ref int streamId, bool reliable, bool ordered, RtcConnection connection)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.CreateDataStreamEx(ref streamId, reliable, ordered, connection);
		}

		public override int CreateDataStreamEx(ref int streamId, DataStreamConfig config, RtcConnection connection)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.CreateDataStreamEx(ref streamId, config, connection);
		}

		public override int SendStreamMessageEx(int streamId, byte[] data, uint length, RtcConnection connection)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SendStreamMessageEx(streamId, data, length, connection);
		}

		public override int AddVideoWatermarkEx(string watermarkUrl, WatermarkOptions options, RtcConnection connection)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.AddVideoWatermarkEx(watermarkUrl, options, connection);
		}

		public override int ClearVideoWatermarkEx(RtcConnection connection)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.ClearVideoWatermarkEx(connection);
		}

		public override int SendCustomReportMessageEx(string id, string category, string @event, string label, int value, RtcConnection connection)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SendCustomReportMessageEx(id, category, @event, label, value, connection);
		}

		public override int PushAudioFrame(MEDIA_SOURCE_TYPE type, AudioFrame frame, bool wrap = false, int sourceId = 0)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.PushAudioFrame(type, frame, wrap, sourceId);
		}

		public override int PullAudioFrame(AudioFrame frame)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.PullAudioFrame(frame);
		}

		public override int SetExternalVideoSource(bool enabled, bool useTexture, EXTERNAL_VIDEO_SOURCE_TYPE sourceType, SenderOptions encodedVideoOption)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetExternalVideoSource(enabled, useTexture, sourceType, encodedVideoOption);
		}

		public override int SetExternalAudioSource(bool enabled, int sampleRate, int channels, int sourceNumber, bool localPlayback = false, bool publish = true)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetExternalAudioSource(enabled, sampleRate, channels, sourceNumber, localPlayback, publish);
		}

		public override int PushVideoFrame(ExternalVideoFrame frame, uint videoTrackId = 0u)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.PushVideoFrame(frame, videoTrackId);
		}

		public override int PushEncodedVideoImage(byte[] imageBuffer, uint length, EncodedVideoFrameInfo videoEncodedFrameInfo, uint videoTrackId = 0u)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.PushEncodedVideoImage(imageBuffer, length, videoEncodedFrameInfo, videoTrackId);
		}

		public override uint CreateCustomEncodedVideoTrack(SenderOptions sender_option)
		{
			if (_rtcEngineImpl == null)
			{
				return 0u;
			}
			return _rtcEngineImpl.CreateCustomEncodedVideoTrack(sender_option);
		}

		public override int DestroyCustomEncodedVideoTrack(uint video_track_id)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.DestroyCustomEncodedVideoTrack(video_track_id);
		}

		public override uint CreateCustomVideoTrack()
		{
			if (_rtcEngineImpl == null)
			{
				return 0u;
			}
			return _rtcEngineImpl.CreateCustomVideoTrack();
		}

		public override int DestroyCustomVideoTrack(uint video_track_id)
		{
			if (_rtcEngineImpl == null)
			{
				return 0;
			}
			return _rtcEngineImpl.DestroyCustomVideoTrack(video_track_id);
		}

		public override int SetAudioSessionOperationRestriction(AUDIO_SESSION_OPERATION_RESTRICTION restriction)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetAudioSessionOperationRestriction(restriction);
		}

		public override int AdjustCustomAudioPublishVolume(int sourceId, int volume)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.AdjustCustomAudioPublishVolume(sourceId, volume);
		}

		public override int AdjustCustomAudioPlayoutVolume(int sourceId, int volume)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.AdjustCustomAudioPlayoutVolume(sourceId, volume);
		}

		public override int SetParameters(string parameters)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetParameters(parameters);
		}

		public override int GetAudioDeviceInfo(ref DeviceInfo deviceInfo)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.GetAudioDeviceInfo(ref deviceInfo);
		}

		public override int EnableCustomAudioLocalPlayback(int sourceId, bool enabled)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.EnableCustomAudioLocalPlayback(sourceId, enabled);
		}

		public override int SetLocalPublishFallbackOption(STREAM_FALLBACK_OPTIONS option)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetLocalPublishFallbackOption(option);
		}

		public override int SetRemoteSubscribeFallbackOption(STREAM_FALLBACK_OPTIONS option)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetRemoteSubscribeFallbackOption(option);
		}

		public override int PauseAllChannelMediaRelay()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.PauseAllChannelMediaRelay();
		}

		public override int ResumeAllChannelMediaRelay()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.ResumeAllChannelMediaRelay();
		}

		public override int EnableEchoCancellationExternal(bool enabled, int audioSourceDelay)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.EnableEchoCancellationExternal(enabled, audioSourceDelay);
		}

		public override int TakeSnapshot(uint uid, string filePath)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.TakeSnapshot(uid, filePath);
		}

		public override int StartRhythmPlayer(string sound1, string sound2, AgoraRhythmPlayerConfig config)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StartRhythmPlayer(sound1, sound2, config);
		}

		public override int StopRhythmPlayer()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StopRhythmPlayer();
		}

		public override int ConfigRhythmPlayer(AgoraRhythmPlayerConfig config)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.ConfigRhythmPlayer(config);
		}

		public override int SetDirectExternalAudioSource(bool enable, bool localPlayback)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetDirectExternalAudioSource(enable, localPlayback);
		}

		public override int PushDirectAudioFrame(AudioFrame frame)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.PushDirectAudioFrame(frame);
		}

		public override int SetCloudProxy(CLOUD_PROXY_TYPE proxyType)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetCloudProxy(proxyType);
		}

		public override int SetLocalAccessPoint(LocalAccessPointConfiguration config)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetLocalAccessPoint(config);
		}

		public override int SetAdvancedAudioOptions(AdvancedAudioOptions options)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetAdvancedAudioOptions(options);
		}

		public override int SetAVSyncSource(string channelId, uint uid)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetAVSyncSource(channelId, uid);
		}

		public override int StartRtmpStreamWithoutTranscoding(string url)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StartRtmpStreamWithoutTranscoding(url);
		}

		public override int StartRtmpStreamWithTranscoding(string url, LiveTranscoding transcoding)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StartRtmpStreamWithTranscoding(url, transcoding);
		}

		public override int UpdateRtmpTranscoding(LiveTranscoding transcoding)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.UpdateRtmpTranscoding(transcoding);
		}

		public override int StopRtmpStream(string url)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.StopRtmpStream(url);
		}

		public override int GetUserInfoByUserAccountEx(string userAccount, ref UserInfo userInfo, RtcConnection connection)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.GetUserInfoByUserAccountEx(userAccount, ref userInfo, connection);
		}

		public override int GetUserInfoByUidEx(uint uid, ref UserInfo userInfo, RtcConnection connection)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.GetUserInfoByUidEx(uid, ref userInfo, connection);
		}

		public override int SetRemoteVideoSubscriptionOptionsEx(uint uid, VideoSubscriptionOptions options, RtcConnection connection)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetRemoteVideoSubscriptionOptionsEx(uid, options, connection);
		}

		public override int SetSubscribeAudioBlacklistEx(uint[] uidList, int uidNumber, RtcConnection connection)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetSubscribeAudioBlacklistEx(uidList, uidNumber, connection);
		}

		public override int SetSubscribeAudioWhitelistEx(uint[] uidList, int uidNumber, RtcConnection connection)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetSubscribeAudioWhitelistEx(uidList, uidNumber, connection);
		}

		public override int SetSubscribeVideoBlacklistEx(uint[] uidList, int uidNumber, RtcConnection connection)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetSubscribeVideoBlacklistEx(uidList, uidNumber, connection);
		}

		public override int SetSubscribeVideoWhitelistEx(uint[] uidList, int uidNumber, RtcConnection connection)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetSubscribeVideoWhitelistEx(uidList, uidNumber, connection);
		}

		public override int EnableRemoteSuperResolution(uint userId, bool enable)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.EnableRemoteSuperResolution(userId, enable);
		}

		public override int EnableContentInspect(bool enabled, ContentInspectConfig config)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.EnableContentInspect(enabled, config);
		}

		public override int SetRemoteVideoStreamTypeEx(uint uid, VIDEO_STREAM_TYPE streamType, RtcConnection connection)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetRemoteVideoStreamTypeEx(uid, streamType, connection);
		}

		public override int EnableAudioVolumeIndicationEx(int interval, int smooth, bool reportVad, RtcConnection connection)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.EnableAudioVolumeIndicationEx(interval, smooth, reportVad, connection);
		}

		public override int SetVideoProfileEx(int width, int height, int frameRate, int bitrate)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetVideoProfileEx(width, height, frameRate, bitrate);
		}

		public override int EnableDualStreamModeEx(VIDEO_SOURCE_TYPE sourceType, bool enabled, SimulcastStreamConfig streamConfig, RtcConnection connection)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.EnableDualStreamModeEx(sourceType, enabled, streamConfig, connection);
		}

		public override int UploadLogFile(ref string requestId)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.UploadLogFile(ref requestId);
		}

		public override int SetSubscribeAudioBlacklist(uint[] uidList, int uidNumber)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetSubscribeAudioBlacklist(uidList, uidNumber);
		}

		public override int SetSubscribeAudioWhitelist(uint[] uidList, int uidNumber)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetSubscribeAudioWhitelist(uidList, uidNumber);
		}

		public override int SetSubscribeVideoBlacklist(uint[] uidList, int uidNumber)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetSubscribeVideoBlacklist(uidList, uidNumber);
		}

		public override int SetSubscribeVideoWhitelist(uint[] uidList, int uidNumber)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetSubscribeVideoWhitelist(uidList, uidNumber);
		}

		public override ScreenCaptureSourceInfo[] GetScreenCaptureSources(SIZE thumbSize, SIZE iconSize, bool includeScreen)
		{
			if (_rtcEngineImpl == null)
			{
				return null;
			}
			return _rtcEngineImpl.GetScreenCaptureSources(thumbSize, iconSize, includeScreen);
		}

		public override int SetScreenCaptureScenario(SCREEN_SCENARIO_TYPE screenScenario)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SetScreenCaptureScenario(screenScenario);
		}

		public override bool StartDumpVideo(VIDEO_SOURCE_TYPE type, string dir)
		{
			return _rtcEngineImpl.StartDumpVideo(type, dir);
		}

		public override bool StopDumpVideo()
		{
			return _rtcEngineImpl.StopDumpVideo();
		}

		public override int EnableWirelessAccelerate(bool enabled)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.EnableWirelessAccelerate(enabled);
		}

		public override int GetAudioTrackCount()
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.GetAudioTrackCount();
		}

		public override int SelectAudioTrack(int index)
		{
			if (_rtcEngineImpl == null)
			{
				return -7;
			}
			return _rtcEngineImpl.SelectAudioTrack(index);
		}
	}
	public sealed class LocalSpatialAudioEngine : ILocalSpatialAudioEngine
	{
		private IRtcEngine _rtcEngineInstance;

		private LocalSpatialAudioEngineImpl _localSpatialAudioEngineImpl;

		private const int ErrorCode = -7;

		private static ILocalSpatialAudioEngine instance;

		public static ILocalSpatialAudioEngine Instance => instance;

		private LocalSpatialAudioEngine(IRtcEngine rtcEngine, LocalSpatialAudioEngineImpl impl)
		{
			_rtcEngineInstance = rtcEngine;
			_localSpatialAudioEngineImpl = impl;
		}

		~LocalSpatialAudioEngine()
		{
			_rtcEngineInstance = null;
		}

		public override void Dispose()
		{
			if (_rtcEngineInstance != null && _localSpatialAudioEngineImpl != null)
			{
				_localSpatialAudioEngineImpl.Dispose();
			}
		}

		public override int Initialize()
		{
			if (_rtcEngineInstance == null || _localSpatialAudioEngineImpl == null)
			{
				return -7;
			}
			return _localSpatialAudioEngineImpl.Initialize();
		}

		public override int SetMaxAudioRecvCount(int maxCount)
		{
			if (_rtcEngineInstance == null || _localSpatialAudioEngineImpl == null)
			{
				return -7;
			}
			return _localSpatialAudioEngineImpl.SetMaxAudioRecvCount(maxCount);
		}

		public override int SetAudioRecvRange(float range)
		{
			if (_rtcEngineInstance == null || _localSpatialAudioEngineImpl == null)
			{
				return -7;
			}
			return _localSpatialAudioEngineImpl.SetAudioRecvRange(range);
		}

		public override int SetDistanceUnit(float unit)
		{
			if (_rtcEngineInstance == null || _localSpatialAudioEngineImpl == null)
			{
				return -7;
			}
			return _localSpatialAudioEngineImpl.SetDistanceUnit(unit);
		}

		public override int UpdateSelfPosition(float[] position, float[] axisForward, float[] axisRight, float[] axisUp)
		{
			if (_rtcEngineInstance == null || _localSpatialAudioEngineImpl == null)
			{
				return -7;
			}
			return _localSpatialAudioEngineImpl.UpdateSelfPosition(position, axisForward, axisRight, axisUp);
		}

		public override int UpdateSelfPositionEx(float[] position, float[] axisForward, float[] axisRight, float[] axisUp, RtcConnection connection)
		{
			if (_rtcEngineInstance == null || _localSpatialAudioEngineImpl == null)
			{
				return -7;
			}
			return _localSpatialAudioEngineImpl.UpdateSelfPositionEx(position, axisForward, axisRight, axisUp, connection);
		}

		public override int UpdatePlayerPositionInfo(int playerId, float[] position, float[] forward)
		{
			if (_rtcEngineInstance == null || _localSpatialAudioEngineImpl == null)
			{
				return -7;
			}
			return _localSpatialAudioEngineImpl.UpdatePlayerPositionInfo(playerId, position, forward);
		}

		public override int SetParameters(string @params)
		{
			if (_rtcEngineInstance == null || _localSpatialAudioEngineImpl == null)
			{
				return -7;
			}
			return _localSpatialAudioEngineImpl.SetParameters(@params);
		}

		public override int MuteLocalAudioStream(bool mute)
		{
			if (_rtcEngineInstance == null || _localSpatialAudioEngineImpl == null)
			{
				return -7;
			}
			return _localSpatialAudioEngineImpl.MuteLocalAudioStream(mute);
		}

		public override int MuteAllRemoteAudioStreams(bool mute)
		{
			if (_rtcEngineInstance == null || _localSpatialAudioEngineImpl == null)
			{
				return -7;
			}
			return _localSpatialAudioEngineImpl.MuteAllRemoteAudioStreams(mute);
		}

		public override int UpdateRemotePosition(uint uid, float[] position, float[] forward)
		{
			if (_rtcEngineInstance == null || _localSpatialAudioEngineImpl == null)
			{
				return -7;
			}
			return _localSpatialAudioEngineImpl.UpdateRemotePosition(uid, position, forward);
		}

		public override int UpdateRemotePositionEx(uint uid, float[] position, float[] forward, RtcConnection connection)
		{
			if (_rtcEngineInstance == null || _localSpatialAudioEngineImpl == null)
			{
				return -7;
			}
			return _localSpatialAudioEngineImpl.UpdateRemotePositionEx(uid, position, forward, connection);
		}

		public override int RemoveRemotePosition(uint uid)
		{
			if (_rtcEngineInstance == null || _localSpatialAudioEngineImpl == null)
			{
				return -7;
			}
			return _localSpatialAudioEngineImpl.RemoveRemotePosition(uid);
		}

		public override int RemoveRemotePositionEx(uint uid, RtcConnection connection)
		{
			if (_rtcEngineInstance == null || _localSpatialAudioEngineImpl == null)
			{
				return -7;
			}
			return _localSpatialAudioEngineImpl.RemoveRemotePositionEx(uid, connection);
		}

		public override int ClearRemotePositions()
		{
			if (_rtcEngineInstance == null || _localSpatialAudioEngineImpl == null)
			{
				return -7;
			}
			return _localSpatialAudioEngineImpl.ClearRemotePositions();
		}

		public override int ClearRemotePositionsEx(RtcConnection connection)
		{
			if (_rtcEngineInstance == null || _localSpatialAudioEngineImpl == null)
			{
				return -7;
			}
			return _localSpatialAudioEngineImpl.ClearRemotePositionsEx(connection);
		}

		internal static ILocalSpatialAudioEngine GetInstance(IRtcEngine rtcEngine, LocalSpatialAudioEngineImpl impl)
		{
			return instance ?? (instance = new LocalSpatialAudioEngine(rtcEngine, impl));
		}

		internal static void ReleaseInstance()
		{
			instance = null;
		}
	}
	public sealed class VideoDeviceManager : IVideoDeviceManager
	{
		private IRtcEngine _rtcEngineInstance;

		private VideoDeviceManagerImpl _videoDeviecManagerImpl;

		private const int ErrorCode = -7;

		private static IVideoDeviceManager instance;

		public static IVideoDeviceManager Instance => instance;

		private VideoDeviceManager(IRtcEngine rtcEngine, VideoDeviceManagerImpl impl)
		{
			_rtcEngineInstance = rtcEngine;
			_videoDeviecManagerImpl = impl;
		}

		~VideoDeviceManager()
		{
			_rtcEngineInstance = null;
		}

		public override DeviceInfo[] EnumerateVideoDevices()
		{
			if (_rtcEngineInstance == null || _videoDeviecManagerImpl == null)
			{
				return null;
			}
			return _videoDeviecManagerImpl.EnumerateVideoDevices();
		}

		public override int SetDevice(string deviceIdUTF8)
		{
			if (_rtcEngineInstance == null || _videoDeviecManagerImpl == null)
			{
				return -7;
			}
			return _videoDeviecManagerImpl.SetDevice(deviceIdUTF8);
		}

		public override int GetDevice(ref string deviceIdUTF8)
		{
			if (_rtcEngineInstance == null || _videoDeviecManagerImpl == null)
			{
				return -7;
			}
			return _videoDeviecManagerImpl.GetDevice(ref deviceIdUTF8);
		}

		public override int StartDeviceTest(IntPtr hwnd)
		{
			if (_rtcEngineInstance == null || _videoDeviecManagerImpl == null)
			{
				return -7;
			}
			return _videoDeviecManagerImpl.StartDeviceTest(hwnd);
		}

		public override int StopDeviceTest()
		{
			if (_rtcEngineInstance == null || _videoDeviecManagerImpl == null)
			{
				return -7;
			}
			return _videoDeviecManagerImpl.StopDeviceTest();
		}

		public override int GetCapability(string deviceIdUTF8, uint deviceCapabilityNumber, out VideoFormat capability)
		{
			if (_rtcEngineInstance == null || _videoDeviecManagerImpl == null)
			{
				capability = new VideoFormat();
				return -7;
			}
			return _videoDeviecManagerImpl.GetCapability(deviceIdUTF8, deviceCapabilityNumber, out capability);
		}

		public override int NumberOfCapabilities(string deviceIdUTF8)
		{
			if (_rtcEngineInstance == null || _videoDeviecManagerImpl == null)
			{
				return -7;
			}
			return _videoDeviecManagerImpl.NumberOfCapabilities(deviceIdUTF8);
		}

		internal static IVideoDeviceManager GetInstance(IRtcEngine rtcEngine, VideoDeviceManagerImpl impl)
		{
			return instance ?? (instance = new VideoDeviceManager(rtcEngine, impl));
		}

		internal static void ReleaseInstance()
		{
			instance = null;
		}
	}
	internal sealed class AgoraCallbackObject
	{
		private GameObject _CallbackGameObject { get; set; }

		internal AgoraCallbackQueue _CallbackQueue { get; set; }

		private string GameObjectName { get; set; }

		internal AgoraCallbackObject(string gameObjectName)
		{
			GameObjectName = gameObjectName;
			InitGameObject(gameObjectName);
		}

		internal void Release()
		{
			DeInitGameObject(GameObjectName);
		}

		private void InitGameObject(string gameObjectName)
		{
			DeInitGameObject(gameObjectName);
			_CallbackGameObject = new GameObject(gameObjectName);
			_CallbackQueue = _CallbackGameObject.AddComponent<AgoraCallbackQueue>();
			UnityEngine.Object.DontDestroyOnLoad(_CallbackGameObject);
			_CallbackGameObject.hideFlags = HideFlags.HideInHierarchy;
		}

		private void DeInitGameObject(string gameObjectName)
		{
			GameObject gameObject = GameObject.Find(gameObjectName);
			if ((object)gameObject != null)
			{
				gameObject.GetComponent<AgoraCallbackQueue>()?.ClearQueue();
				UnityEngine.Object.Destroy(gameObject);
			}
		}
	}
	internal sealed class AgoraCallbackQueue : MonoBehaviour
	{
		private readonly Queue<Action> _queue = new Queue<Action>();

		internal void ClearQueue()
		{
			lock (_queue)
			{
				_queue.Clear();
			}
		}

		internal void EnQueue(Action action)
		{
			lock (_queue)
			{
				if (action != null)
				{
					_queue.Enqueue(action);
				}
			}
		}

		internal Action DeQueue()
		{
			Action result = null;
			lock (_queue)
			{
				if (_queue.Count > 0)
				{
					result = _queue.Dequeue();
				}
				return result;
			}
		}

		private void Update()
		{
			lock (_queue)
			{
				while (_queue.Count > 0)
				{
					try
					{
						_queue.Dequeue()();
					}
					catch (Exception ex)
					{
						AgoraLog.LogError("[Exception] AgoraCallbackQueue: " + ex);
					}
				}
			}
		}

		private void OnDestroy()
		{
			ClearQueue();
		}
	}
	internal class AgoraLog
	{
		private const string AgoraMsgTag = "[Agora]:";

		internal static void Log(string msg)
		{
			UnityEngine.Debug.LogFormat("{0} {1}\n", "[Agora]:", msg);
		}

		internal static void LogWarning(string warningMsg)
		{
			UnityEngine.Debug.LogWarningFormat("{0} {1}\n", "[Agora]:", warningMsg);
		}

		internal static void LogError(string errorMsg)
		{
			UnityEngine.Debug.LogErrorFormat("{0} {1}\n", "[Agora]:", errorMsg);
		}
	}
	public class Optional<T>
	{
		private T value;

		private bool hasValue;

		public Optional()
		{
			hasValue = false;
		}

		public bool HasValue()
		{
			return hasValue;
		}

		public T GetValue()
		{
			return value;
		}

		public void SetValue(T val)
		{
			hasValue = true;
			value = val;
		}

		public void SetEmpty()
		{
			hasValue = false;
		}
	}
	public class OptionalJsonParse
	{
		public virtual void ToJson(Agora.Rtc.LitJson.JsonWriter writer)
		{
			throw new NotImplementedException();
		}

		public virtual void WriteEnum(Agora.Rtc.LitJson.JsonWriter writer, object obj)
		{
			Type underlyingType = Enum.GetUnderlyingType(obj.GetType());
			if (underlyingType == typeof(long))
			{
				writer.Write((long)obj);
			}
			else if (underlyingType == typeof(uint))
			{
				writer.Write((uint)obj);
			}
			else if (underlyingType == typeof(ulong))
			{
				writer.Write((ulong)obj);
			}
			else if (underlyingType == typeof(ushort))
			{
				writer.Write((ushort)obj);
			}
			else if (underlyingType == typeof(short))
			{
				writer.Write((short)obj);
			}
			else if (underlyingType == typeof(byte))
			{
				writer.Write((byte)obj);
			}
			else if (underlyingType == typeof(sbyte))
			{
				writer.Write((sbyte)obj);
			}
			else
			{
				writer.Write((int)obj);
			}
		}
	}
	public class AgoraJson
	{
		private const string ErrorTag = "AgoraJsonError";

		internal static object GetData<T>(string data, string key)
		{
			string text = "";
			try
			{
				Agora.Rtc.LitJson.JsonData jsonData = Agora.Rtc.LitJson.JsonMapper.ToObject(data);
				if (jsonData[key] == null)
				{
					return null;
				}
				text = jsonData[key].ToString();
			}
			catch (Exception)
			{
				AgoraLog.LogError("AgoraJsonError" + data);
			}
			return typeof(T).Name switch
			{
				"Boolean" => bool.Parse(text), 
				"Byte" => byte.Parse(text), 
				"Decimal" => decimal.Parse(text), 
				"Double" => double.Parse(text), 
				"Int16" => short.Parse(text), 
				"Int32" => int.Parse(text), 
				"Int64" => long.Parse(text), 
				"SByte" => sbyte.Parse(text), 
				"Single" => float.Parse(text), 
				"String" => text, 
				"UInt16" => ushort.Parse(text), 
				"UInt32" => uint.Parse(text), 
				"UInt64" => ulong.Parse(text), 
				_ => text, 
			};
		}

		internal static object GetData<T>(char[] data, string key)
		{
			return GetData<T>(new string(data, 0, Array.IndexOf(data, '\0')), key);
		}

		internal static object GetData<T>(Agora.Rtc.LitJson.JsonData data, string key)
		{
			string text = data[key].ToString();
			return typeof(T).Name switch
			{
				"Boolean" => bool.Parse(text), 
				"Byte" => byte.Parse(text), 
				"Decimal" => decimal.Parse(text), 
				"Double" => double.Parse(text), 
				"Int16" => short.Parse(text), 
				"Int32" => int.Parse(text), 
				"Int64" => long.Parse(text), 
				"SByte" => sbyte.Parse(text), 
				"Single" => float.Parse(text), 
				"String" => text, 
				"UInt16" => ushort.Parse(text), 
				"UInt32" => uint.Parse(text), 
				"UInt64" => ulong.Parse(text), 
				_ => text, 
			};
		}

		internal static T JsonToStruct<T>(char[] data) where T : new()
		{
			return JsonToStruct<T>(new string(data, 0, Array.IndexOf(data, '\0')));
		}

		internal static T JsonToStruct<T>(char[] data, string key) where T : new()
		{
			return JsonToStruct<T>(new string(data, 0, Array.IndexOf(data, '\0')), key);
		}

		internal static T[] JsonToStructArray<T>(char[] data, string key = null, uint length = 0u) where T : new()
		{
			return JsonToStructArray<T>(new string(data, 0, Array.IndexOf(data, '\0')), key, length);
		}

		internal static T JsonToStruct<T>(string data) where T : new()
		{
			return Agora.Rtc.LitJson.JsonMapper.ToObject<T>(data);
		}

		internal static T JsonToStruct<T>(string data, string key) where T : new()
		{
			return JsonToStruct<T>(ToJson(Agora.Rtc.LitJson.JsonMapper.ToObject(data)[key]) ?? string.Empty);
		}

		internal static T JsonToStruct<T>(Agora.Rtc.LitJson.JsonData data, string key) where T : new()
		{
			return JsonToStruct<T>(ToJson(data[key]) ?? string.Empty);
		}

		internal static T[] JsonToStructArray<T>(string data, string key = null, uint length = 0u) where T : new()
		{
			Agora.Rtc.LitJson.JsonData jsonData = ((key == null) ? Agora.Rtc.LitJson.JsonMapper.ToObject(data) : Agora.Rtc.LitJson.JsonMapper.ToObject(data)[key]);
			if (jsonData == null)
			{
				return new T[0];
			}
			length = ((length != 0) ? length : ((uint)jsonData.Count));
			T[] array = new T[length];
			for (int i = 0; i < length; i++)
			{
				array[i] = JsonToStruct<T>(jsonData[i].ToJson());
			}
			return array;
		}

		internal static T[] JsonToStructArray<T>(Agora.Rtc.LitJson.JsonData data, string key = null, uint length = 0u) where T : new()
		{
			Agora.Rtc.LitJson.JsonData jsonData = ((key == null) ? data : data[key]);
			if (jsonData == null)
			{
				return new T[0];
			}
			length = ((length != 0) ? length : ((uint)jsonData.Count));
			T[] array = new T[length];
			for (int i = 0; i < length; i++)
			{
				array[i] = JsonToStruct<T>(jsonData[i].ToJson());
			}
			return array;
		}

		internal static string ToJson<T>(T param)
		{
			return Agora.Rtc.LitJson.JsonMapper.ToJson(param);
		}

		internal static Agora.Rtc.LitJson.JsonData ToObject(string data)
		{
			return Agora.Rtc.LitJson.JsonMapper.ToObject(data);
		}
	}
	internal struct CharAssistant
	{
		[MarshalAs(UnmanagedType.ByValArray, SizeConst = 65536)]
		private byte[] resultChar;

		public string Result
		{
			get
			{
				string @string = Encoding.UTF8.GetString(resultChar);
				return @string[..@string.IndexOf('\0')];
			}
		}

		internal CharAssistant(int param = 0)
		{
			resultChar = new byte[65536];
		}
	}
	internal static class ObsoleteMethodWarning
	{
		internal const string GeneralWarning = "This method is deprecated.";
	}
	internal enum AppType
	{
		APP_TYPE_NATIVE,
		APP_TYPE_COCOS,
		APP_TYPE_UNITY,
		APP_TYPE_ELECTRON,
		APP_TYPE_FLUTTER,
		APP_TYPE_UNREAL,
		APP_TYPE_XAMARIN,
		APP_TYPE_API_CLOUD,
		APP_TYPE_REACT_NATIVE,
		APP_TYPE_PYTHON,
		APP_TYPE_COCOS_CREATOR,
		APP_TYPE_RUST,
		APP_TYPE_C_SHARP,
		APP_TYPE_CEF,
		APP_TYPE_UNI_APP
	}
	public enum CHANNEL_PROFILE_TYPE
	{
		CHANNEL_PROFILE_COMMUNICATION,
		CHANNEL_PROFILE_LIVE_BROADCASTING,
		[Obsolete]
		CHANNEL_PROFILE_GAME,
		[Obsolete]
		CHANNEL_PROFILE_CLOUD_GAMING,
		[Obsolete]
		CHANNEL_PROFILE_COMMUNICATION_1v1
	}
	public enum WARN_CODE_TYPE
	{
		WARN_INVALID_VIEW = 8,
		WARN_INIT_VIDEO = 16,
		WARN_PENDING = 20,
		WARN_NO_AVAILABLE_CHANNEL = 103,
		WARN_LOOKUP_CHANNEL_TIMEOUT = 104,
		WARN_LOOKUP_CHANNEL_REJECTED = 105,
		WARN_OPEN_CHANNEL_TIMEOUT = 106,
		WARN_OPEN_CHANNEL_REJECTED = 107,
		WARN_SWITCH_LIVE_VIDEO_TIMEOUT = 111,
		WARN_SET_CLIENT_ROLE_TIMEOUT = 118,
		WARN_OPEN_CHANNEL_INVALID_TICKET = 121,
		WARN_OPEN_CHANNEL_TRY_NEXT_VOS = 122,
		WARN_CHANNEL_CONNECTION_UNRECOVERABLE = 131,
		WARN_CHANNEL_CONNECTION_IP_CHANGED = 132,
		WARN_CHANNEL_CONNECTION_PORT_CHANGED = 133,
		WARN_CHANNEL_SOCKET_ERROR = 134,
		WARN_AUDIO_MIXING_OPEN_ERROR = 701,
		WARN_ADM_RUNTIME_PLAYOUT_WARNING = 1014,
		WARN_ADM_RUNTIME_RECORDING_WARNING = 1016,
		WARN_ADM_RECORD_AUDIO_SILENCE = 1019,
		WARN_ADM_PLAYOUT_MALFUNCTION = 1020,
		WARN_ADM_RECORD_MALFUNCTION = 1021,
		WARN_ADM_RECORD_AUDIO_LOWLEVEL = 1031,
		WARN_ADM_PLAYOUT_AUDIO_LOWLEVEL = 1032,
		WARN_ADM_WINDOWS_NO_DATA_READY_EVENT = 1040,
		WARN_APM_HOWLING = 1051,
		WARN_ADM_GLITCH_STATE = 1052,
		WARN_ADM_IMPROPER_SETTINGS = 1053,
		WARN_ADM_WIN_CORE_NO_RECORDING_DEVICE = 1322,
		WARN_ADM_WIN_CORE_NO_PLAYOUT_DEVICE = 1323,
		WARN_ADM_WIN_CORE_IMPROPER_CAPTURE_RELEASE = 1324
	}
	internal enum ERROR_CODE_TYPE
	{
		ERR_OK = 0,
		ERR_FAILED = 1,
		ERR_INVALID_ARGUMENT = 2,
		ERR_NOT_READY = 3,
		ERR_NOT_SUPPORTED = 4,
		ERR_REFUSED = 5,
		ERR_BUFFER_TOO_SMALL = 6,
		ERR_NOT_INITIALIZED = 7,
		ERR_INVALID_STATE = 8,
		ERR_NO_PERMISSION = 9,
		ERR_TIMEDOUT = 10,
		ERR_CANCELED = 11,
		ERR_TOO_OFTEN = 12,
		ERR_BIND_SOCKET = 13,
		ERR_NET_DOWN = 14,
		ERR_JOIN_CHANNEL_REJECTED = 17,
		ERR_LEAVE_CHANNEL_REJECTED = 18,
		ERR_ALREADY_IN_USE = 19,
		ERR_ABORTED = 20,
		ERR_INIT_NET_ENGINE = 21,
		ERR_RESOURCE_LIMITED = 22,
		ERR_INVALID_APP_ID = 101,
		ERR_INVALID_CHANNEL_NAME = 102,
		ERR_NO_SERVER_RESOURCES = 103,
		ERR_TOKEN_EXPIRED = 109,
		ERR_INVALID_TOKEN = 110,
		ERR_CONNECTION_INTERRUPTED = 111,
		ERR_CONNECTION_LOST = 112,
		ERR_NOT_IN_CHANNEL = 113,
		ERR_SIZE_TOO_LARGE = 114,
		ERR_BITRATE_LIMIT = 115,
		ERR_TOO_MANY_DATA_STREAMS = 116,
		ERR_STREAM_MESSAGE_TIMEOUT = 117,
		ERR_SET_CLIENT_ROLE_NOT_AUTHORIZED = 119,
		ERR_DECRYPTION_FAILED = 120,
		ERR_INVALID_USER_ID = 121,
		ERR_CLIENT_IS_BANNED_BY_SERVER = 123,
		ERR_ENCRYPTED_STREAM_NOT_ALLOWED_PUBLISH = 130,
		ERR_LICENSE_CREDENTIAL_INVALID = 131,
		ERR_INVALID_USER_ACCOUNT = 134,
		ERR_MODULE_NOT_FOUND = 157,
		ERR_CERT_RAW = 157,
		ERR_CERT_JSON_PART = 158,
		ERR_CERT_JSON_INVAL = 159,
		ERR_CERT_JSON_NOMEM = 160,
		ERR_CERT_CUSTOM = 161,
		ERR_CERT_CREDENTIAL = 162,
		ERR_CERT_SIGN = 163,
		ERR_CERT_FAIL = 164,
		ERR_CERT_BUF = 165,
		ERR_CERT_NULL = 166,
		ERR_CERT_DUEDATE = 167,
		ERR_CERT_REQUEST = 168,
		ERR_PCMSEND_FORMAT = 200,
		ERR_PCMSEND_BUFFEROVERFLOW = 201,
		ERR_LOGIN_ALREADY_LOGIN = 428,
		ERR_LOAD_MEDIA_ENGINE = 1001,
		ERR_ADM_GENERAL_ERROR = 1005,
		ERR_ADM_INIT_PLAYOUT = 1008,
		ERR_ADM_START_PLAYOUT = 1009,
		ERR_ADM_STOP_PLAYOUT = 1010,
		ERR_ADM_INIT_RECORDING = 1011,
		ERR_ADM_START_RECORDING = 1012,
		ERR_ADM_STOP_RECORDING = 1013,
		ERR_VDM_CAMERA_NOT_AUTHORIZED = 1501
	}
	public enum AUDIO_SESSION_OPERATION_RESTRICTION
	{
		AUDIO_SESSION_OPERATION_RESTRICTION_NONE = 0,
		AUDIO_SESSION_OPERATION_RESTRICTION_SET_CATEGORY = 1,
		AUDIO_SESSION_OPERATION_RESTRICTION_CONFIGURE_SESSION = 2,
		AUDIO_SESSION_OPERATION_RESTRICTION_DEACTIVATE_SESSION = 4,
		AUDIO_SESSION_OPERATION_RESTRICTION_ALL = 0x80
	}
	public enum USER_OFFLINE_REASON_TYPE
	{
		USER_OFFLINE_QUIT,
		USER_OFFLINE_DROPPED,
		USER_OFFLINE_BECOME_AUDIENCE
	}
	public enum INTERFACE_ID_TYPE
	{
		AGORA_IID_AUDIO_DEVICE_MANAGER = 1,
		AGORA_IID_VIDEO_DEVICE_MANAGER,
		AGORA_IID_PARAMETER_ENGINE,
		AGORA_IID_MEDIA_ENGINE,
		AGORA_IID_AUDIO_ENGINE,
		AGORA_IID_VIDEO_ENGINE,
		AGORA_IID_RTC_CONNECTION,
		AGORA_IID_SIGNALING_ENGINE,
		AGORA_IID_MEDIA_ENGINE_REGULATOR,
		AGORA_IID_CLOUD_SPATIAL_AUDIO,
		AGORA_IID_LOCAL_SPATIAL_AUDIO,
		AGORA_IID_MEDIA_RECORDER
	}
	public enum QUALITY_TYPE
	{
		[Obsolete("This member is deprecated")]
		QUALITY_UNKNOWN,
		QUALITY_EXCELLENT,
		QUALITY_GOOD,
		QUALITY_POOR,
		QUALITY_BAD,
		QUALITY_VBAD,
		QUALITY_DOWN,
		QUALITY_UNSUPPORTED,
		QUALITY_DETECTING
	}
	public enum FIT_MODE_TYPE
	{
		MODE_COVER = 1,
		MODE_CONTAIN
	}
	public enum VIDEO_ORIENTATION
	{
		VIDEO_ORIENTATION_0 = 0,
		VIDEO_ORIENTATION_90 = 90,
		VIDEO_ORIENTATION_180 = 180,
		VIDEO_ORIENTATION_270 = 270
	}
	public enum FRAME_RATE
	{
		FRAME_RATE_FPS_1 = 1,
		FRAME_RATE_FPS_7 = 7,
		FRAME_RATE_FPS_10 = 10,
		FRAME_RATE_FPS_15 = 15,
		FRAME_RATE_FPS_24 = 24,
		FRAME_RATE_FPS_30 = 30,
		FRAME_RATE_FPS_60 = 60
	}
	public enum FRAME_WIDTH
	{
		FRAME_WIDTH_640 = 640
	}
	public enum FRAME_HEIGHT
	{
		FRAME_HEIGHT_360 = 360
	}
	public enum VIDEO_FRAME_TYPE
	{
		VIDEO_FRAME_TYPE_BLANK_FRAME = 0,
		VIDEO_FRAME_TYPE_KEY_FRAME = 3,
		VIDEO_FRAME_TYPE_DELTA_FRAME = 4,
		VIDEO_FRAME_TYPE_B_FRAME = 5,
		VIDEO_FRAME_TYPE_DROPPABLE_FRAME = 6,
		VIDEO_FRAME_TYPE_UNKNOW = 7
	}
	public enum VIDEO_FRAME_TYPE_NATIVE
	{
		VIDEO_FRAME_TYPE_BLANK_FRAME = 0,
		VIDEO_FRAME_TYPE_KEY_FRAME = 3,
		VIDEO_FRAME_TYPE_DELTA_FRAME = 4,
		VIDEO_FRAME_TYPE_B_FRAME = 5,
		VIDEO_FRAME_TYPE_DROPPABLE_FRAME = 6,
		VIDEO_FRAME_TYPE_UNKNOW = 7
	}
	public enum ORIENTATION_MODE
	{
		ORIENTATION_MODE_ADAPTIVE,
		ORIENTATION_MODE_FIXED_LANDSCAPE,
		ORIENTATION_MODE_FIXED_PORTRAIT
	}
	public enum DEGRADATION_PREFERENCE
	{
		MAINTAIN_QUALITY = 0,
		MAINTAIN_FRAMERATE = 1,
		MAINTAIN_BALANCED = 2,
		MAINTAIN_RESOLUTION = 3,
		DISABLED = 100
	}
	public class VideoDimensions
	{
		public int width { get; set; }

		public int height { get; set; }

		public VideoDimensions()
		{
			width = 640;
			height = 480;
		}

		public VideoDimensions(int width, int height)
		{
			this.width = width;
			this.height = height;
		}
	}
	public enum BITRATE
	{
		STANDARD_BITRATE = 0,
		COMPATIBLE_BITRATE = -1,
		DEFAULT_MIN_BITRATE = -1,
		DEFAULT_MIN_BITRATE_EQUAL_TO_TARGET_BITRATE = -2
	}
	public enum VIDEO_CODEC_TYPE
	{
		VIDEO_CODEC_NONE = 0,
		VIDEO_CODEC_VP8 = 1,
		VIDEO_CODEC_H264 = 2,
		VIDEO_CODEC_H265 = 3,
		VIDEO_CODEC_VP9 = 5,
		VIDEO_CODEC_GENERIC = 6,
		VIDEO_CODEC_GENERIC_H264 = 7,
		VIDEO_CODEC_AV1 = 12,
		VIDEO_CODEC_GENERIC_JPEG = 20
	}
	public enum TCcMode
	{
		CC_ENABLED,
		CC_DISABLED
	}
	public class SenderOptions
	{
		public TCcMode ccMode { get; set; }

		public VIDEO_CODEC_TYPE codecType { get; set; }

		public int targetBitrate { get; set; }

		public SenderOptions()
		{
			ccMode = TCcMode.CC_ENABLED;
			codecType = VIDEO_CODEC_TYPE.VIDEO_CODEC_GENERIC_H264;
			targetBitrate = 6500;
		}
	}
	public enum AUDIO_CODEC_TYPE
	{
		AUDIO_CODEC_OPUS = 1,
		AUDIO_CODEC_PCMA = 3,
		AUDIO_CODEC_PCMU = 4,
		AUDIO_CODEC_G722 = 5,
		AUDIO_CODEC_AACLC = 8,
		AUDIO_CODEC_HEAAC = 9,
		AUDIO_CODEC_JC1 = 10,
		AUDIO_CODEC_HEAAC2 = 11,
		AUDIO_CODEC_LPCNET = 12
	}
	[Flags]
	public enum AUDIO_ENCODING_TYPE
	{
		AUDIO_ENCODING_TYPE_AAC_16000_LOW = 0x10101,
		AUDIO_ENCODING_TYPE_AAC_16000_MEDIUM = 0x10102,
		AUDIO_ENCODING_TYPE_AAC_32000_LOW = 0x10201,
		AUDIO_ENCODING_TYPE_AAC_32000_MEDIUM = 0x10202,
		AUDIO_ENCODING_TYPE_AAC_32000_HIGH = 0x10203,
		AUDIO_ENCODING_TYPE_AAC_48000_MEDIUM = 0x10302,
		AUDIO_ENCODING_TYPE_AAC_48000_HIGH = 0x10303,
		AUDIO_ENCODING_TYPE_OPUS_16000_LOW = 0x20101,
		AUDIO_ENCODING_TYPE_OPUS_16000_MEDIUM = 0x20102,
		AUDIO_ENCODING_TYPE_OPUS_48000_MEDIUM = 0x20302,
		AUDIO_ENCODING_TYPE_OPUS_48000_HIGH = 0x20303
	}
	public enum WATERMARK_FIT_MODE
	{
		FIT_MODE_COVER_POSITION,
		FIT_MODE_USE_IMAGE_RATIO
	}
	public class EncodedAudioFrameAdvancedSettings
	{
		public bool speech { get; set; }

		public bool sendEvenIfEmpty { get; set; }

		public EncodedAudioFrameAdvancedSettings()
		{
			speech = true;
			sendEvenIfEmpty = true;
		}
	}
	public class EncodedAudioFrameInfo
	{
		public AUDIO_CODEC_TYPE codec { get; set; }

		public int sampleRateHz { get; set; }

		public int samplesPerChannel { get; set; }

		public int numberOfChannels { get; set; }

		public EncodedAudioFrameAdvancedSettings advancedSettings { get; set; }

		public long captureTimeMs { get; set; }

		public EncodedAudioFrameInfo()
		{
			codec = AUDIO_CODEC_TYPE.AUDIO_CODEC_AACLC;
			sampleRateHz = 0;
			samplesPerChannel = 0;
			numberOfChannels = 0;
			captureTimeMs = 0L;
		}

		public EncodedAudioFrameInfo(ref EncodedAudioFrameInfo rhs)
		{
			codec = rhs.codec;
			sampleRateHz = rhs.sampleRateHz;
			samplesPerChannel = rhs.samplesPerChannel;
			numberOfChannels = rhs.numberOfChannels;
			advancedSettings = rhs.advancedSettings;
			captureTimeMs = rhs.captureTimeMs;
		}
	}
	public class AudioPcmDataInfo
	{
		public uint samplesPerChannel { get; set; }

		public short channelNum { get; set; }

		public uint samplesOut { get; set; }

		public long elapsedTimeMs { get; set; }

		public long ntpTimeMs { get; set; }

		public AudioPcmDataInfo()
		{
			samplesPerChannel = 0u;
			channelNum = 0;
			samplesOut = 0u;
			elapsedTimeMs = 0L;
			ntpTimeMs = 0L;
		}

		public AudioPcmDataInfo(ref AudioPcmDataInfo rhs)
		{
			samplesPerChannel = rhs.samplesPerChannel;
			channelNum = rhs.channelNum;
			samplesOut = rhs.samplesOut;
			elapsedTimeMs = rhs.elapsedTimeMs;
			ntpTimeMs = rhs.ntpTimeMs;
		}
	}
	public enum H264PacketizeMode
	{
		NonInterleaved,
		SingleNalUnit
	}
	public enum VIDEO_STREAM_TYPE
	{
		VIDEO_STREAM_HIGH,
		VIDEO_STREAM_LOW
	}
	public class VideoSubscriptionOptions : OptionalJsonParse
	{
		public Optional<VIDEO_STREAM_TYPE> type = new Optional<VIDEO_STREAM_TYPE>();

		public Optional<bool> encodedFrameOnly = new Optional<bool>();

		public override void ToJson(Agora.Rtc.LitJson.JsonWriter writer)
		{
			writer.WriteObjectStart();
			if (type.HasValue())
			{
				writer.WritePropertyName("type");
				WriteEnum(writer, type.GetValue());
			}
			if (encodedFrameOnly.HasValue())
			{
				writer.WritePropertyName("encodedFrameOnly");
				writer.Write(encodedFrameOnly.GetValue());
			}
			writer.WriteObjectEnd();
		}
	}
	public class EncodedVideoFrameInfo
	{
		public VIDEO_CODEC_TYPE codecType { get; set; }

		public int width { get; set; }

		public int height { get; set; }

		public int framesPerSecond { get; set; }

		public VIDEO_FRAME_TYPE_NATIVE frameType { get; set; }

		public VIDEO_ORIENTATION rotation { get; set; }

		public int trackId { get; set; }

		public long captureTimeMs { get; set; }

		public uint uid { get; set; }

		public VIDEO_STREAM_TYPE streamType { get; set; }

		public EncodedVideoFrameInfo()
		{
			codecType = VIDEO_CODEC_TYPE.VIDEO_CODEC_H264;
			width = 0;
			height = 0;
			framesPerSecond = 0;
			frameType = VIDEO_FRAME_TYPE_NATIVE.VIDEO_FRAME_TYPE_BLANK_FRAME;
			rotation = VIDEO_ORIENTATION.VIDEO_ORIENTATION_0;
			trackId = 0;
			captureTimeMs = 0L;
			uid = 0u;
			streamType = VIDEO_STREAM_TYPE.VIDEO_STREAM_HIGH;
		}

		public EncodedVideoFrameInfo(ref EncodedVideoFrameInfo rhs)
		{
			codecType = rhs.codecType;
			width = rhs.width;
			height = rhs.width;
			framesPerSecond = rhs.framesPerSecond;
			frameType = rhs.frameType;
			rotation = rhs.rotation;
			trackId = rhs.trackId;
			captureTimeMs = rhs.captureTimeMs;
			uid = rhs.uid;
			streamType = rhs.streamType;
		}
	}
	public enum VIDEO_MIRROR_MODE_TYPE
	{
		VIDEO_MIRROR_MODE_AUTO,
		VIDEO_MIRROR_MODE_ENABLED,
		VIDEO_MIRROR_MODE_DISABLED
	}
	public class VideoEncoderConfiguration
	{
		public VIDEO_CODEC_TYPE codecType { get; set; }

		public VideoDimensions dimensions { get; set; }

		public int frameRate { get; set; }

		public int bitrate { get; set; }

		public int minBitrate { get; set; }

		public ORIENTATION_MODE orientationMode { get; set; }

		public DEGRADATION_PREFERENCE degradationPreference { get; set; }

		public VIDEO_MIRROR_MODE_TYPE mirrorMode { get; set; }

		public VideoEncoderConfiguration(ref VideoDimensions d, int f, int b, ORIENTATION_MODE m, VIDEO_MIRROR_MODE_TYPE mirror = VIDEO_MIRROR_MODE_TYPE.VIDEO_MIRROR_MODE_DISABLED)
		{
			codecType = VIDEO_CODEC_TYPE.VIDEO_CODEC_H264;
			dimensions = d;
			frameRate = f;
			bitrate = b;
			minBitrate = -1;
			orientationMode = m;
			degradationPreference = DEGRADATION_PREFERENCE.MAINTAIN_QUALITY;
			mirrorMode = mirror;
		}

		public VideoEncoderConfiguration(int width, int height, int f, int b, ORIENTATION_MODE m, VIDEO_MIRROR_MODE_TYPE mirror = VIDEO_MIRROR_MODE_TYPE.VIDEO_MIRROR_MODE_DISABLED)
		{
			codecType = VIDEO_CODEC_TYPE.VIDEO_CODEC_H264;
			dimensions = new VideoDimensions(width, height);
			frameRate = f;
			bitrate = b;
			minBitrate = -1;
			orientationMode = m;
			degradationPreference = DEGRADATION_PREFERENCE.MAINTAIN_QUALITY;
			mirrorMode = mirror;
		}

		public VideoEncoderConfiguration(ref VideoEncoderConfiguration config)
		{
			codecType = config.codecType;
			dimensions = config.dimensions;
			frameRate = config.frameRate;
			bitrate = config.bitrate;
			minBitrate = config.minBitrate;
			orientationMode = config.orientationMode;
			degradationPreference = config.degradationPreference;
			mirrorMode = config.mirrorMode;
		}

		public VideoEncoderConfiguration()
		{
			codecType = VIDEO_CODEC_TYPE.VIDEO_CODEC_H264;
			dimensions = new VideoDimensions(640, 360);
			frameRate = 15;
			bitrate = 0;
			minBitrate = -1;
			orientationMode = ORIENTATION_MODE.ORIENTATION_MODE_ADAPTIVE;
			degradationPreference = DEGRADATION_PREFERENCE.MAINTAIN_QUALITY;
			mirrorMode = VIDEO_MIRROR_MODE_TYPE.VIDEO_MIRROR_MODE_DISABLED;
		}
	}
	public class DataStreamConfig
	{
		public bool syncWithAudio;

		public bool ordered;
	}
	public enum SIMULCAST_STREAM_MODE
	{
		AUTO_SIMULCAST_STREAM = -1,
		DISABLE_SIMULCAST_STREM,
		ENABLE_SIMULCAST_STREAM
	}
	public class SimulcastStreamConfig
	{
		public VideoDimensions dimensions { get; set; }

		public int bitrate { get; set; }

		public int framerate { get; set; }

		public SimulcastStreamConfig()
		{
			dimensions = new VideoDimensions(160, 120);
			bitrate = 65;
			framerate = 5;
		}

		public SimulcastStreamConfig(VideoDimensions dimensions, int bitrate, int framerate)
		{
			this.dimensions = dimensions;
			this.bitrate = bitrate;
			this.framerate = framerate;
		}
	}
	public class Rectangle
	{
		public int x { get; set; }

		public int y { get; set; }

		public int width { get; set; }

		public int height { get; set; }

		public Rectangle()
		{
		}

		public Rectangle(int x, int y, int width, int height)
		{
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
		}
	}
	public class WatermarkRatio
	{
		public float xRatio { get; set; }

		public float yRatio { get; set; }

		public float widthRatio { get; set; }

		public WatermarkRatio()
		{
			xRatio = 0f;
			yRatio = 0f;
			widthRatio = 0f;
		}

		public WatermarkRatio(float x, float y, float width)
		{
			xRatio = x;
			yRatio = y;
			widthRatio = width;
		}
	}
	public class WatermarkOptions
	{
		public bool visibleInPreview { get; set; }

		public Rectangle positionInLandscapeMode { get; set; }

		public Rectangle positionInPortraitMode { get; set; }

		public WatermarkRatio watermarkRatio { get; set; }

		public WATERMARK_FIT_MODE mode { get; set; }

		public WatermarkOptions()
		{
			visibleInPreview = false;
			positionInLandscapeMode = new Rectangle(0, 0, 0, 0);
			positionInPortraitMode = new Rectangle(0, 0, 0, 0);
			watermarkRatio = new WatermarkRatio();
			mode = WATERMARK_FIT_MODE.FIT_MODE_COVER_POSITION;
		}

		public WatermarkOptions(bool visibleInPreview, Rectangle positionInLandscapeMode, Rectangle positionInPortraitMode, WatermarkRatio ratio, WATERMARK_FIT_MODE mode)
		{
			this.visibleInPreview = visibleInPreview;
			this.positionInLandscapeMode = positionInLandscapeMode ?? new Rectangle();
			this.positionInPortraitMode = positionInPortraitMode ?? new Rectangle();
			watermarkRatio = ratio ?? new WatermarkRatio();
			this.mode = mode;
		}
	}
	public class RtcStats
	{
		public uint duration { get; set; }

		public uint txBytes { get; set; }

		public uint rxBytes { get; set; }

		public uint txAudioBytes { get; set; }

		public uint txVideoBytes { get; set; }

		public uint rxAudioBytes { get; set; }

		public uint rxVideoBytes { get; set; }

		public ushort txKBitRate { get; set; }

		public ushort rxKBitRate { get; set; }

		public ushort rxAudioKBitRate { get; set; }

		public ushort txAudioKBitRate { get; set; }

		public ushort rxVideoKBitRate { get; set; }

		public ushort txVideoKBitRate { get; set; }

		public ushort lastmileDelay { get; set; }

		public uint userCount { get; set; }

		public double cpuAppUsage { get; set; }

		public double cpuTotalUsage { get; set; }

		public int gatewayRtt { get; set; }

		public double memoryAppUsageRatio { get; set; }

		public double memoryTotalUsageRatio { get; set; }

		public int memoryAppUsageInKbytes { get; set; }

		public int connectTimeMs { get; set; }

		public int firstAudioPacketDuration { get; set; }

		public int firstVideoPacketDuration { get; set; }

		public int firstVideoKeyFramePacketDuration { get; set; }

		public int packetsBeforeFirstKeyFramePacket { get; set; }

		public int firstAudioPacketDurationAfterUnmute { get; set; }

		public int firstVideoPacketDurationAfterUnmute { get; set; }

		public int firstVideoKeyFramePacketDurationAfterUnmute { get; set; }

		public int firstVideoKeyFrameDecodedDurationAfterUnmute { get; set; }

		public int firstVideoKeyFrameRenderedDurationAfterUnmute { get; set; }

		public int txPacketLossRate { get; set; }

		public int rxPacketLossRate { get; set; }

		public RtcStats()
		{
		}

		public RtcStats(uint duration, uint txBytes, uint rxBytes, uint txAudioBytes, uint txVideoBytes, uint rxAudioBytes, uint rxVideoBytes, ushort txKBitRate, ushort rxKBitRate, ushort rxAudioKBitRate, ushort txAudioKBitRate, ushort rxVideoKBitRate, ushort txVideoKBitRate, ushort lastmileDelay, uint userCount, double cpuAppUsage, double cpuTotalUsage, int gatewayRtt, double memoryAppUsageRatio, double memoryTotalUsageRatio, int memoryAppUsageInKbytes, int connectTimeMs, int firstAudioPacketDuration, int firstVideoPacketDuration, int firstVideoKeyFramePacketDuration, int packetsBeforeFirstKeyFramePacket, int firstAudioPacketDurationAfterUnmute, int firstVideoPacketDurationAfterUnmute, int firstVideoKeyFramePacketDurationAfterUnmute, int firstVideoKeyFrameDecodedDurationAfterUnmute, int firstVideoKeyFrameRenderedDurationAfterUnmute, int txPacketLossRate, int rxPacketLossRate)
		{
			this.duration = duration;
			this.txBytes = txBytes;
			this.rxBytes = rxBytes;
			this.txAudioBytes = txAudioBytes;
			this.txVideoBytes = txVideoBytes;
			this.rxAudioBytes = rxAudioBytes;
			this.rxVideoBytes = rxVideoBytes;
			this.txKBitRate = txKBitRate;
			this.rxKBitRate = rxKBitRate;
			this.rxAudioKBitRate = rxAudioKBitRate;
			this.txAudioKBitRate = txAudioKBitRate;
			this.rxVideoKBitRate = rxVideoKBitRate;
			this.txVideoKBitRate = txVideoKBitRate;
			this.lastmileDelay = lastmileDelay;
			this.userCount = userCount;
			this.cpuAppUsage = cpuAppUsage;
			this.cpuTotalUsage = cpuTotalUsage;
			this.gatewayRtt = gatewayRtt;
			this.memoryAppUsageRatio = memoryAppUsageRatio;
			this.memoryTotalUsageRatio = memoryTotalUsageRatio;
			this.memoryAppUsageInKbytes = memoryAppUsageInKbytes;
			this.connectTimeMs = connectTimeMs;
			this.firstAudioPacketDuration = firstAudioPacketDuration;
			this.firstVideoPacketDuration = firstVideoPacketDuration;
			this.firstVideoKeyFramePacketDuration = firstVideoKeyFramePacketDuration;
			this.packetsBeforeFirstKeyFramePacket = packetsBeforeFirstKeyFramePacket;
			this.firstAudioPacketDurationAfterUnmute = firstAudioPacketDurationAfterUnmute;
			this.firstVideoPacketDurationAfterUnmute = firstVideoPacketDurationAfterUnmute;
			this.firstVideoKeyFramePacketDurationAfterUnmute = firstVideoKeyFramePacketDurationAfterUnmute;
			this.firstVideoKeyFrameDecodedDurationAfterUnmute = firstVideoKeyFrameDecodedDurationAfterUnmute;
			this.firstVideoKeyFrameRenderedDurationAfterUnmute = firstVideoKeyFrameRenderedDurationAfterUnmute;
			this.txPacketLossRate = txPacketLossRate;
			this.rxPacketLossRate = rxPacketLossRate;
		}
	}
	public enum VIDEO_SOURCE_TYPE
	{
		VIDEO_SOURCE_CAMERA_PRIMARY = 0,
		VIDEO_SOURCE_CAMERA = 0,
		VIDEO_SOURCE_CAMERA_SECONDARY = 1,
		VIDEO_SOURCE_SCREEN_PRIMARY = 2,
		VIDEO_SOURCE_SCREEN = 2,
		VIDEO_SOURCE_SCREEN_SECONDARY = 3,
		VIDEO_SOURCE_CUSTOM = 4,
		VIDEO_SOURCE_MEDIA_PLAYER = 5,
		VIDEO_SOURCE_RTC_IMAGE_PNG = 6,
		VIDEO_SOURCE_RTC_IMAGE_JPEG = 7,
		VIDEO_SOURCE_RTC_IMAGE_GIF = 8,
		VIDEO_SOURCE_REMOTE = 9,
		VIDEO_SOURCE_TRANSCODED = 10,
		VIDEO_SOURCE_UNKNOWN = 100
	}
	public enum CLIENT_ROLE_TYPE
	{
		CLIENT_ROLE_BROADCASTER = 1,
		CLIENT_ROLE_AUDIENCE
	}
	public enum QUALITY_ADAPT_INDICATION
	{
		ADAPT_NONE,
		ADAPT_UP_BANDWIDTH,
		ADAPT_DOWN_BANDWIDTH
	}
	public enum AUDIENCE_LATENCY_LEVEL_TYPE
	{
		AUDIENCE_LATENCY_LEVEL_LOW_LATENCY = 1,
		AUDIENCE_LATENCY_LEVEL_ULTRA_LOW_LATENCY
	}
	public class ClientRoleOptions
	{
		public AUDIENCE_LATENCY_LEVEL_TYPE audienceLatencyLevel;

		public ClientRoleOptions()
		{
			audienceLatencyLevel = AUDIENCE_LATENCY_LEVEL_TYPE.AUDIENCE_LATENCY_LEVEL_ULTRA_LOW_LATENCY;
		}
	}
	public enum EXPERIENCE_QUALITY_TYPE
	{
		EXPERIENCE_QUALITY_GOOD,
		EXPERIENCE_QUALITY_BAD
	}
	public enum EXPERIENCE_POOR_REASON
	{
		EXPERIENCE_REASON_NONE = 0,
		REMOTE_NETWORK_QUALITY_POOR = 1,
		LOCAL_NETWORK_QUALITY_POOR = 2,
		WIRELESS_SIGNAL_POOR = 4,
		WIFI_BLUETOOTH_COEXIST = 8
	}
	public class RemoteAudioStats
	{
		public uint uid { get; set; }

		public int quality { get; set; }

		public int networkTransportDelay { get; set; }

		public int jitterBufferDelay { get; set; }

		public int audioLossRate { get; set; }

		public int numChannels { get; set; }

		public int receivedSampleRate { get; set; }

		public int receivedBitrate { get; set; }

		public int totalFrozenTime { get; set; }

		public int frozenRate { get; set; }

		public int mosValue { get; set; }

		public int totalActiveTime { get; set; }

		public int publishDuration { get; set; }

		public int qoeQuality { get; set; }

		public int qualityChangedReason { get; set; }

		public RemoteAudioStats()
		{
			uid = 0u;
			quality = 0;
			networkTransportDelay = 0;
			jitterBufferDelay = 0;
			audioLossRate = 0;
			numChannels = 0;
			receivedSampleRate = 0;
			receivedBitrate = 0;
			totalFrozenTime = 0;
			frozenRate = 0;
			mosValue = 0;
			totalActiveTime = 0;
			publishDuration = 0;
			qoeQuality = 0;
			qualityChangedReason = 0;
		}

		public RemoteAudioStats(uint uid, int quality, int networkTransportDelay, int jitterBufferDelay, int audioLossRate, int numChannels, int receivedSampleRate, int receivedBitrate, int totalFrozenTime, int frozenRate, int mosValue, int totalActiveTime, int publishDuration, int qoeQuality, int qualityChangedReason)
		{
			this.uid = uid;
			this.quality = quality;
			this.networkTransportDelay = networkTransportDelay;
			this.jitterBufferDelay = jitterBufferDelay;
			this.audioLossRate = audioLossRate;
			this.numChannels = numChannels;
			this.receivedSampleRate = receivedSampleRate;
			this.receivedBitrate = receivedBitrate;
			this.totalFrozenTime = totalFrozenTime;
			this.frozenRate = frozenRate;
			this.mosValue = mosValue;
			this.totalActiveTime = totalActiveTime;
			this.publishDuration = publishDuration;
			this.qoeQuality = qoeQuality;
			this.qualityChangedReason = qualityChangedReason;
		}
	}
	public enum AUDIO_PROFILE_TYPE
	{
		AUDIO_PROFILE_DEFAULT,
		AUDIO_PROFILE_SPEECH_STANDARD,
		AUDIO_PROFILE_MUSIC_STANDARD,
		AUDIO_PROFILE_MUSIC_STANDARD_STEREO,
		AUDIO_PROFILE_MUSIC_HIGH_QUALITY,
		AUDIO_PROFILE_MUSIC_HIGH_QUALITY_STEREO,
		AUDIO_PROFILE_IOT,
		AUDIO_PROFILE_NUM
	}
	public enum AUDIO_SCENARIO_TYPE
	{
		AUDIO_SCENARIO_DEFAULT = 0,
		AUDIO_SCENARIO_GAME_STREAMING = 3,
		AUDIO_SCENARIO_CHATROOM = 5,
		AUDIO_SCENARIO_CHORUS = 7,
		AUDIO_SCENARIO_MEETING = 8,
		AUDIO_SCENARIO_NUM = 9
	}
	public class VideoFormat
	{
		public enum OPTIONAL_ENUM_SIZE_T
		{
			kMaxWidthInPixels = 3840,
			kMaxHeightInPixels = 2160,
			kMaxFps = 60
		}

		public int width { get; set; }

		public int height { get; set; }

		public int fps { get; set; }

		public VideoFormat()
		{
			width = 640;
			height = 360;
			fps = 15;
		}

		public VideoFormat(int w, int h, int f)
		{
			width = w;
			height = h;
			fps = f;
		}
	}
	public enum VIDEO_CONTENT_HINT
	{
		CONTENT_HINT_NONE,
		CONTENT_HINT_MOTION,
		CONTENT_HINT_DETAILS
	}
	public enum SCREEN_SCENARIO_TYPE
	{
		SCREEN_SCENARIO_DOCUMENT = 1,
		SCREEN_SCENARIO_GAMING,
		SCREEN_SCENARIO_VIDEO,
		SCREEN_SCENARIO_RDC
	}
	public enum CAPTURE_BRIGHTNESS_LEVEL_TYPE
	{
		CAPTURE_BRIGHTNESS_LEVEL_INVALID = -1,
		CAPTURE_BRIGHTNESS_LEVEL_NORMAL,
		CAPTURE_BRIGHTNESS_LEVEL_BRIGHT,
		CAPTURE_BRIGHTNESS_LEVEL_DARK
	}
	public enum LOCAL_AUDIO_STREAM_STATE
	{
		LOCAL_AUDIO_STREAM_STATE_STOPPED,
		LOCAL_AUDIO_STREAM_STATE_RECORDING,
		LOCAL_AUDIO_STREAM_STATE_ENCODING,
		LOCAL_AUDIO_STREAM_STATE_FAILED
	}
	public enum LOCAL_AUDIO_STREAM_ERROR
	{
		LOCAL_AUDIO_STREAM_ERROR_OK,
		LOCAL_AUDIO_STREAM_ERROR_FAILURE,
		LOCAL_AUDIO_STREAM_ERROR_DEVICE_NO_PERMISSION,
		LOCAL_AUDIO_STREAM_ERROR_DEVICE_BUSY,
		LOCAL_AUDIO_STREAM_ERROR_RECORD_FAILURE,
		LOCAL_AUDIO_STREAM_ERROR_ENCODE_FAILURE,
		LOCAL_AUDIO_STREAM_ERROR_NO_RECORDING_DEVICE,
		LOCAL_AUDIO_STREAM_ERROR_NO_PLAYOUT_DEVICE,
		LOCAL_AUDIO_STREAM_ERROR_INTERRUPTED,
		LOCAL_AUDIO_STREAM_ERROR_RECORD_INVALID_ID,
		LOCAL_AUDIO_STREAM_ERROR_PLAYOUT_INVALID_ID
	}
	public enum LOCAL_VIDEO_STREAM_STATE
	{
		LOCAL_VIDEO_STREAM_STATE_STOPPED,
		LOCAL_VIDEO_STREAM_STATE_CAPTURING,
		LOCAL_VIDEO_STREAM_STATE_ENCODING,
		LOCAL_VIDEO_STREAM_STATE_FAILED
	}
	public enum LOCAL_VIDEO_STREAM_ERROR
	{
		LOCAL_VIDEO_STREAM_ERROR_OK = 0,
		LOCAL_VIDEO_STREAM_ERROR_FAILURE = 1,
		LOCAL_VIDEO_STREAM_ERROR_DEVICE_NO_PERMISSION = 2,
		LOCAL_VIDEO_STREAM_ERROR_DEVICE_BUSY = 3,
		LOCAL_VIDEO_STREAM_ERROR_CAPTURE_FAILURE = 4,
		LOCAL_VIDEO_STREAM_ERROR_ENCODE_FAILURE = 5,
		LOCAL_VIDEO_STREAM_ERROR_CAPTURE_INBACKGROUND = 6,
		LOCAL_VIDEO_STREAM_ERROR_CAPTURE_MULTIPLE_FOREGROUND_APPS = 7,
		LOCAL_VIDEO_STREAM_ERROR_DEVICE_NOT_FOUND = 8,
		LOCAL_VIDEO_STREAM_ERROR_DEVICE_DISCONNECTED = 9,
		LOCAL_VIDEO_STREAM_ERROR_DEVICE_INVALID_ID = 10,
		LOCAL_VIDEO_STREAM_ERROR_DEVICE_SYSTEM_PRESSURE = 101,
		LOCAL_VIDEO_STREAM_ERROR_SCREEN_CAPTURE_WINDOW_MINIMIZED = 11,
		LOCAL_VIDEO_STREAM_ERROR_SCREEN_CAPTURE_WINDOW_CLOSED = 12,
		LOCAL_VIDEO_STREAM_ERROR_SCREEN_CAPTURE_WINDOW_OCCLUDED = 13,
		LOCAL_VIDEO_STREAM_ERROR_SCREEN_CAPTURE_WINDOW_NOT_SUPPORTED = 20
	}
	public enum REMOTE_AUDIO_STATE
	{
		REMOTE_AUDIO_STATE_STOPPED,
		REMOTE_AUDIO_STATE_STARTING,
		REMOTE_AUDIO_STATE_DECODING,
		REMOTE_AUDIO_STATE_FROZEN,
		REMOTE_AUDIO_STATE_FAILED
	}
	public enum REMOTE_AUDIO_STATE_REASON
	{
		REMOTE_AUDIO_REASON_INTERNAL,
		REMOTE_AUDIO_REASON_NETWORK_CONGESTION,
		REMOTE_AUDIO_REASON_NETWORK_RECOVERY,
		REMOTE_AUDIO_REASON_LOCAL_MUTED,
		REMOTE_AUDIO_REASON_LOCAL_UNMUTED,
		REMOTE_AUDIO_REASON_REMOTE_MUTED,
		REMOTE_AUDIO_REASON_REMOTE_UNMUTED,
		REMOTE_AUDIO_REASON_REMOTE_OFFLINE
	}
	public enum REMOTE_VIDEO_STATE
	{
		REMOTE_VIDEO_STATE_STOPPED,
		REMOTE_VIDEO_STATE_STARTING,
		REMOTE_VIDEO_STATE_DECODING,
		REMOTE_VIDEO_STATE_FROZEN,
		REMOTE_VIDEO_STATE_FAILED
	}
	public enum REMOTE_VIDEO_STATE_REASON
	{
		REMOTE_VIDEO_STATE_REASON_INTERNAL,
		REMOTE_VIDEO_STATE_REASON_NETWORK_CONGESTION,
		REMOTE_VIDEO_STATE_REASON_NETWORK_RECOVERY,
		REMOTE_VIDEO_STATE_REASON_LOCAL_MUTED,
		REMOTE_VIDEO_STATE_REASON_LOCAL_UNMUTED,
		REMOTE_VIDEO_STATE_REASON_REMOTE_MUTED,
		REMOTE_VIDEO_STATE_REASON_REMOTE_UNMUTED,
		REMOTE_VIDEO_STATE_REASON_REMOTE_OFFLINE,
		REMOTE_VIDEO_STATE_REASON_AUDIO_FALLBACK,
		REMOTE_VIDEO_STATE_REASON_AUDIO_FALLBACK_RECOVERY,
		REMOTE_VIDEO_STATE_REASON_VIDEO_STREAM_TYPE_CHANGE_TO_LOW,
		REMOTE_VIDEO_STATE_REASON_VIDEO_STREAM_TYPE_CHANGE_TO_HIGH
	}
	[Flags]
	public enum REMOTE_USER_STATE
	{
		USER_STATE_MUTE_AUDIO = 1,
		USER_STATE_MUTE_VIDEO = 2,
		USER_STATE_ENABLE_VIDEO = 0x10,
		USER_STATE_ENABLE_LOCAL_VIDEO = 0x100
	}
	public class VideoTrackInfo
	{
		public bool isLocal { get; set; }

		public uint ownerUid { get; set; }

		public uint trackId { get; set; }

		public string channelId { get; set; }

		public VIDEO_STREAM_TYPE streamType { get; set; }

		public VIDEO_CODEC_TYPE codecType { get; set; }

		public bool encodedFrameOnly { get; set; }

		public VIDEO_SOURCE_TYPE sourceType { get; set; }

		public uint observationPosition { get; set; }

		public VideoTrackInfo()
		{
			isLocal = false;
			ownerUid = 0u;
			trackId = 0u;
			channelId = null;
			streamType = VIDEO_STREAM_TYPE.VIDEO_STREAM_HIGH;
			codecType = VIDEO_CODEC_TYPE.VIDEO_CODEC_H264;
			encodedFrameOnly = false;
			sourceType = VIDEO_SOURCE_TYPE.VIDEO_SOURCE_CAMERA_PRIMARY;
			observationPosition = 1u;
		}

		public VideoTrackInfo(bool isLocal, uint ownerUid, uint trackId, string channelId, VIDEO_STREAM_TYPE streamType, VIDEO_CODEC_TYPE codecType, bool encodedFrameOnly, VIDEO_SOURCE_TYPE sourceType, uint observationPosition)
		{
			this.isLocal = isLocal;
			this.ownerUid = ownerUid;
			this.trackId = trackId;
			this.channelId = channelId;
			this.streamType = streamType;
			this.codecType = codecType;
			this.encodedFrameOnly = encodedFrameOnly;
			this.sourceType = sourceType;
			this.observationPosition = observationPosition;
		}
	}
	public enum REMOTE_VIDEO_DOWNSCALE_LEVEL
	{
		REMOTE_VIDEO_DOWNSCALE_LEVEL_NONE,
		REMOTE_VIDEO_DOWNSCALE_LEVEL_1,
		REMOTE_VIDEO_DOWNSCALE_LEVEL_2,
		REMOTE_VIDEO_DOWNSCALE_LEVEL_3,
		REMOTE_VIDEO_DOWNSCALE_LEVEL_4
	}
	public class AudioVolumeInfo
	{
		public uint uid { get; set; }

		public uint volume { get; set; }

		public uint vad { get; set; }

		public double voicePitch { get; set; }

		public AudioVolumeInfo()
		{
			uid = 0u;
			volume = 0u;
			vad = 0u;
			voicePitch = 0.0;
		}

		public AudioVolumeInfo(uint uid, uint volume, uint vad, double voicePitch)
		{
			this.uid = uid;
			this.volume = volume;
			this.vad = vad;
			this.voicePitch = voicePitch;
		}
	}
	public class DeviceInfo
	{
		public string deviceName;

		public string deviceId;
	}
	public enum AUDIO_SAMPLE_RATE_TYPE
	{
		AUDIO_SAMPLE_RATE_32000 = 32000,
		AUDIO_SAMPLE_RATE_44100 = 44100,
		AUDIO_SAMPLE_RATE_48000 = 48000
	}
	public enum VIDEO_CODEC_TYPE_FOR_STREAM
	{
		VIDEO_CODEC_H264_FOR_STREAM = 1,
		VIDEO_CODEC_H265_FOR_STREAM
	}
	public enum VIDEO_CODEC_PROFILE_TYPE
	{
		VIDEO_CODEC_PROFILE_BASELINE = 66,
		VIDEO_CODEC_PROFILE_MAIN = 77,
		VIDEO_CODEC_PROFILE_HIGH = 100
	}
	public enum AUDIO_CODEC_PROFILE_TYPE
	{
		AUDIO_CODEC_PROFILE_LC_AAC,
		AUDIO_CODEC_PROFILE_HE_AAC,
		AUDIO_CODEC_PROFILE_HE_AAC_V2
	}
	public class LocalAudioStats
	{
		public int numChannels { get; set; }

		public int sentSampleRate { get; set; }

		public int sentBitrate { get; set; }

		public int internalCodec { get; set; }

		public ushort txPacketLossRate { get; set; }

		public int audioDeviceDelay { get; set; }

		public LocalAudioStats()
		{
		}

		public LocalAudioStats(int numChannels, int sentSampleRate, int sentBitrate, int internalCodec, ushort txPacketLossRate, int audioDeviceDelay)
		{
			this.numChannels = numChannels;
			this.sentSampleRate = sentSampleRate;
			this.sentBitrate = sentBitrate;
			this.internalCodec = internalCodec;
			this.txPacketLossRate = txPacketLossRate;
			this.audioDeviceDelay = audioDeviceDelay;
		}
	}
	public enum RTMP_STREAM_PUBLISH_STATE
	{
		RTMP_STREAM_PUBLISH_STATE_IDLE,
		RTMP_STREAM_PUBLISH_STATE_CONNECTING,
		RTMP_STREAM_PUBLISH_STATE_RUNNING,
		RTMP_STREAM_PUBLISH_STATE_RECOVERING,
		RTMP_STREAM_PUBLISH_STATE_FAILURE,
		RTMP_STREAM_PUBLISH_STATE_DISCONNECTING
	}
	public enum RTMP_STREAM_PUBLISH_ERROR_TYPE
	{
		RTMP_STREAM_PUBLISH_ERROR_OK = 0,
		RTMP_STREAM_PUBLISH_ERROR_INVALID_ARGUMENT = 1,
		RTMP_STREAM_PUBLISH_ERROR_ENCRYPTED_STREAM_NOT_ALLOWED = 2,
		RTMP_STREAM_PUBLISH_ERROR_CONNECTION_TIMEOUT = 3,
		RTMP_STREAM_PUBLISH_ERROR_INTERNAL_SERVER_ERROR = 4,
		RTMP_STREAM_PUBLISH_ERROR_RTMP_SERVER_ERROR = 5,
		RTMP_STREAM_PUBLISH_ERROR_TOO_OFTEN = 6,
		RTMP_STREAM_PUBLISH_ERROR_REACH_LIMIT = 7,
		RTMP_STREAM_PUBLISH_ERROR_NOT_AUTHORIZED = 8,
		RTMP_STREAM_PUBLISH_ERROR_STREAM_NOT_FOUND = 9,
		RTMP_STREAM_PUBLISH_ERROR_FORMAT_NOT_SUPPORTED = 10,
		RTMP_STREAM_PUBLISH_ERROR_NOT_BROADCASTER = 11,
		RTMP_STREAM_PUBLISH_ERROR_TRANSCODING_NO_MIX_STREAM = 13,
		RTMP_STREAM_PUBLISH_ERROR_NET_DOWN = 14,
		RTMP_STREAM_PUBLISH_ERROR_INVALID_APPID = 15,
		RTMP_STREAM_PUBLISH_ERROR_INVALID_PRIVILEGE = 16,
		RTMP_STREAM_UNPUBLISH_ERROR_OK = 100
	}
	public enum RTMP_STREAMING_EVENT
	{
		RTMP_STREAMING_EVENT_FAILED_LOAD_IMAGE = 1,
		RTMP_STREAMING_EVENT_URL_ALREADY_IN_USE,
		RTMP_STREAMING_EVENT_ADVANCED_FEATURE_NOT_SUPPORT,
		RTMP_STREAMING_EVENT_REQUEST_TOO_OFTEN
	}
	public class RtcImage
	{
		public string url { get; set; }

		public int x { get; set; }

		public int y { get; set; }

		public int width { get; set; }

		public int height { get; set; }

		public int zOrder { get; set; }

		public double alpha { get; set; }

		public RtcImage()
		{
			url = null;
			x = 0;
			y = 0;
			width = 0;
			height = 0;
			zOrder = 0;
			alpha = 1.0;
		}

		public RtcImage(string url, int x, int y, int width, int height, int zOrder, double alpha)
		{
			this.url = url;
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			this.zOrder = zOrder;
			this.alpha = alpha;
		}
	}
	public class LiveStreamAdvancedFeature
	{
		public string featureName { get; set; }

		public bool opened { get; set; }

		public LiveStreamAdvancedFeature()
		{
			featureName = null;
			opened = false;
		}

		public LiveStreamAdvancedFeature(string feat_name, bool open)
		{
			featureName = feat_name;
			opened = open;
		}
	}
	public enum CONNECTION_STATE_TYPE
	{
		CONNECTION_STATE_DISCONNECTED = 1,
		CONNECTION_STATE_CONNECTING,
		CONNECTION_STATE_CONNECTED,
		CONNECTION_STATE_RECONNECTING,
		CONNECTION_STATE_FAILED
	}
	public class TranscodingUser
	{
		public uint uid { get; set; }

		public int x { get; set; }

		public int y { get; set; }

		public int width { get; set; }

		public int height { get; set; }

		public int zOrder { get; set; }

		public double alpha { get; set; }

		public int audioChannel { get; set; }

		public TranscodingUser()
		{
			uid = 0u;
			x = 0;
			y = 0;
			width = 0;
			height = 0;
			zOrder = 0;
			alpha = 1.0;
			audioChannel = 0;
		}

		public TranscodingUser(uint uid, int x, int y, int width, int height, int zOrder, double alpha, int audioChannel)
		{
			this.uid = uid;
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			this.zOrder = zOrder;
			this.alpha = alpha;
			this.audioChannel = audioChannel;
		}
	}
	public class LiveTranscoding
	{
		public int width { get; set; }

		public int height { get; set; }

		public int videoBitrate { get; set; }

		public int videoFramerate { get; set; }

		public bool lowLatency { get; set; }

		public int videoGop { get; set; }

		public VIDEO_CODEC_PROFILE_TYPE videoCodecProfile { get; set; }

		public uint backgroundColor { get; set; }

		public VIDEO_CODEC_TYPE_FOR_STREAM videoCodecType { get; set; }

		public uint userCount { get; set; }

		public TranscodingUser[] transcodingUsers { get; set; }

		public string transcodingExtraInfo { get; set; }

		public string metadata { get; set; }

		public RtcImage[] watermark { get; set; }

		public uint watermarkCount { get; set; }

		public RtcImage[] backgroundImage { get; set; }

		public uint backgroundImageCount { get; set; }

		public AUDIO_SAMPLE_RATE_TYPE audioSampleRate { get; set; }

		public int audioBitrate { get; set; }

		public int audioChannels { get; set; }

		public AUDIO_CODEC_PROFILE_TYPE audioCodecProfile { get; set; }

		public LiveStreamAdvancedFeature[] advancedFeatures { get; set; }

		public uint advancedFeatureCount { get; set; }

		public LiveTranscoding()
		{
			width = 360;
			height = 640;
			videoBitrate = 400;
			videoFramerate = 15;
			lowLatency = false;
			videoGop = 30;
			videoCodecProfile = VIDEO_CODEC_PROFILE_TYPE.VIDEO_CODEC_PROFILE_HIGH;
			backgroundColor = 0u;
			videoCodecType = VIDEO_CODEC_TYPE_FOR_STREAM.VIDEO_CODEC_H264_FOR_STREAM;
			userCount = 0u;
			transcodingUsers = new TranscodingUser[0];
			transcodingExtraInfo = null;
			metadata = null;
			watermark = new RtcImage[0];
			watermarkCount = 0u;
			backgroundImage = new RtcImage[0];
			backgroundImageCount = 0u;
			audioSampleRate = AUDIO_SAMPLE_RATE_TYPE.AUDIO_SAMPLE_RATE_48000;
			audioBitrate = 48;
			audioChannels = 1;
			audioCodecProfile = AUDIO_CODEC_PROFILE_TYPE.AUDIO_CODEC_PROFILE_LC_AAC;
			advancedFeatures = new LiveStreamAdvancedFeature[0];
			advancedFeatureCount = 0u;
		}

		public LiveTranscoding(int width, int height, int videoBitrate, int videoFramerate, bool lowLatency, int videoGop, VIDEO_CODEC_PROFILE_TYPE videoCodecProfile, uint backgroundColor, VIDEO_CODEC_TYPE_FOR_STREAM videoCodecType, uint userCount, TranscodingUser[] transcodingUsers, string transcodingExtraInfo, string metadata, RtcImage[] watermark, uint watermarkCount, RtcImage[] backgroundImage, uint backgroundImageCount, AUDIO_SAMPLE_RATE_TYPE audioSampleRate, int audioBitrate, int audioChannels, AUDIO_CODEC_PROFILE_TYPE audioCodecProfile, LiveStreamAdvancedFeature[] advancedFeatures, uint advancedFeatureCount)
		{
			this.width = width;
			this.height = height;
			this.videoBitrate = videoBitrate;
			this.videoFramerate = videoFramerate;
			this.lowLatency = lowLatency;
			this.videoGop = videoGop;
			this.videoCodecProfile = videoCodecProfile;
			this.backgroundColor = backgroundColor;
			this.videoCodecType = videoCodecType;
			this.userCount = userCount;
			this.transcodingUsers = transcodingUsers;
			this.transcodingExtraInfo = transcodingExtraInfo;
			this.metadata = metadata;
			this.watermark = watermark;
			this.watermarkCount = watermarkCount;
			this.backgroundImage = backgroundImage;
			this.backgroundImageCount = backgroundImageCount;
			this.audioSampleRate = audioSampleRate;
			this.audioBitrate = audioBitrate;
			this.audioChannels = audioChannels;
			this.audioCodecProfile = audioCodecProfile;
			this.advancedFeatures = advancedFeatures;
			this.advancedFeatureCount = advancedFeatureCount;
		}
	}
	public class TranscodingVideoStream
	{
		public MEDIA_SOURCE_TYPE sourceType { get; set; }

		public uint remoteUserUid { get; set; }

		public string imageUrl { get; set; }

		public int x { get; set; }

		public int y { get; set; }

		public int width { get; set; }

		public int height { get; set; }

		public int zOrder { get; set; }

		public double alpha { get; set; }

		public bool mirror { get; set; }

		public TranscodingVideoStream()
		{
			sourceType = MEDIA_SOURCE_TYPE.PRIMARY_CAMERA_SOURCE;
			remoteUserUid = 0u;
			imageUrl = null;
			x = 0;
			y = 0;
			width = 0;
			height = 0;
			zOrder = 0;
			alpha = 1.0;
			mirror = false;
		}

		public TranscodingVideoStream(MEDIA_SOURCE_TYPE sourceType, uint remoteUserUid, string imageUrl, int x, int y, int width, int height, int zOrder, double alpha, bool mirror)
		{
			this.sourceType = sourceType;
			this.remoteUserUid = remoteUserUid;
			this.imageUrl = imageUrl;
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			this.zOrder = zOrder;
			this.alpha = alpha;
			this.mirror = mirror;
		}
	}
	public class LocalTranscoderConfiguration
	{
		public uint streamCount { get; set; }

		public TranscodingVideoStream[] VideoInputStreams { get; set; }

		public VideoEncoderConfiguration videoOutputConfiguration { get; set; }

		public LocalTranscoderConfiguration()
		{
			streamCount = 0u;
			VideoInputStreams = null;
			videoOutputConfiguration = new VideoEncoderConfiguration();
		}

		public LocalTranscoderConfiguration(uint streamCount, TranscodingVideoStream[] VideoInputStreams, VideoEncoderConfiguration videoOutputConfiguration)
		{
			this.streamCount = streamCount;
			this.VideoInputStreams = VideoInputStreams;
			this.videoOutputConfiguration = videoOutputConfiguration;
		}
	}
	public class LastmileProbeConfig
	{
		public bool probeUplink { get; set; }

		public bool probeDownlink { get; set; }

		public uint expectedUplinkBitrate { get; set; }

		public uint expectedDownlinkBitrate { get; set; }

		public LastmileProbeConfig()
		{
		}

		public LastmileProbeConfig(bool probeUplink, bool probeDownlink, uint expectedUplinkBitrate, uint expectedDownlinkBitrate)
		{
			this.probeUplink = probeUplink;
			this.probeDownlink = probeDownlink;
			this.expectedUplinkBitrate = expectedUplinkBitrate;
			this.expectedDownlinkBitrate = expectedDownlinkBitrate;
		}
	}
	public enum LASTMILE_PROBE_RESULT_STATE
	{
		LASTMILE_PROBE_RESULT_COMPLETE = 1,
		LASTMILE_PROBE_RESULT_INCOMPLETE_NO_BWE,
		LASTMILE_PROBE_RESULT_UNAVAILABLE
	}
	public class LastmileProbeOneWayResult
	{
		public uint packetLossRate { get; set; }

		public uint jitter { get; set; }

		public uint availableBandwidth { get; set; }

		public LastmileProbeOneWayResult()
		{
		}

		public LastmileProbeOneWayResult(uint packetLossRate, uint jitter, uint availableBandwidth)
		{
			this.packetLossRate = packetLossRate;
			this.jitter = jitter;
			this.availableBandwidth = availableBandwidth;
		}
	}
	public class LastmileProbeResult
	{
		public LASTMILE_PROBE_RESULT_STATE state { get; set; }

		public LastmileProbeOneWayResult uplinkReport { get; set; }

		public LastmileProbeOneWayResult downlinkReport { get; set; }

		public uint rtt { get; set; }

		public LastmileProbeResult()
		{
			state = LASTMILE_PROBE_RESULT_STATE.LASTMILE_PROBE_RESULT_UNAVAILABLE;
			rtt = 0u;
		}

		public LastmileProbeResult(LASTMILE_PROBE_RESULT_STATE state, LastmileProbeOneWayResult uplinkReport, LastmileProbeOneWayResult downlinkReport, uint rtt)
		{
			this.state = state;
			this.uplinkReport = uplinkReport;
			this.downlinkReport = downlinkReport;
			this.rtt = rtt;
		}
	}
	public enum CONNECTION_CHANGED_REASON_TYPE
	{
		CONNECTION_CHANGED_CONNECTING,
		CONNECTION_CHANGED_JOIN_SUCCESS,
		CONNECTION_CHANGED_INTERRUPTED,
		CONNECTION_CHANGED_BANNED_BY_SERVER,
		CONNECTION_CHANGED_JOIN_FAILED,
		CONNECTION_CHANGED_LEAVE_CHANNEL,
		CONNECTION_CHANGED_INVALID_APP_ID,
		CONNECTION_CHANGED_INVALID_CHANNEL_NAME,
		CONNECTION_CHANGED_INVALID_TOKEN,
		CONNECTION_CHANGED_TOKEN_EXPIRED,
		CONNECTION_CHANGED_REJECTED_BY_SERVER,
		CONNECTION_CHANGED_SETTING_PROXY_SERVER,
		CONNECTION_CHANGED_RENEW_TOKEN,
		CONNECTION_CHANGED_CLIENT_IP_ADDRESS_CHANGED,
		CONNECTION_CHANGED_KEEP_ALIVE_TIMEOUT,
		CONNECTION_CHANGED_REJOIN_SUCCESS,
		CONNECTION_CHANGED_LOST,
		CONNECTION_CHANGED_ECHO_TEST,
		CONNECTION_CHANGED_CLIENT_IP_ADDRESS_CHANGED_BY_USER,
		CONNECTION_CHANGED_SAME_UID_LOGIN,
		CONNECTION_CHANGED_TOO_MANY_BROADCASTERS
	}
	public enum CLIENT_ROLE_CHANGE_FAILED_REASON
	{
		CLIENT_ROLE_CHANGE_FAILED_TOO_MANY_BROADCASTERS = 1,
		CLIENT_ROLE_CHANGE_FAILED_NOT_AUTHORIZED,
		CLIENT_ROLE_CHANGE_FAILED_REQUEST_TIME_OUT,
		CLIENT_ROLE_CHANGE_FAILED_CONNECTION_FAILED
	}
	public enum WLACC_MESSAGE_REASON
	{
		WLACC_MESSAGE_REASON_WEAK_SIGNAL,
		WLACC_MESSAGE_REASON_CHANNEL_CONGESTION
	}
	public enum WLACC_SUGGEST_ACTION
	{
		WLACC_SUGGEST_ACTION_CLOSE_TO_WIFI,
		WLACC_SUGGEST_ACTION_CONNECT_SSID,
		WLACC_SUGGEST_ACTION_CHECK_5G,
		WLACC_SUGGEST_ACTION_MODIFY_SSID
	}
	public class WlAccStats
	{
		public ushort e2eDelayPercent { get; set; }

		public ushort frozenRatioPercent { get; set; }

		public ushort lossRatePercent { get; set; }
	}
	public enum NETWORK_TYPE
	{
		NETWORK_TYPE_UNKNOWN = -1,
		NETWORK_TYPE_DISCONNECTED,
		NETWORK_TYPE_LAN,
		NETWORK_TYPE_WIFI,
		NETWORK_TYPE_MOBILE_2G,
		NETWORK_TYPE_MOBILE_3G,
		NETWORK_TYPE_MOBILE_4G
	}
	public enum VIDEO_VIEW_SETUP_MODE
	{
		VIDEO_VIEW_SETUP_REPLACE,
		VIDEO_VIEW_SETUP_ADD,
		VIDEO_VIEW_SETUP_REMOVE
	}
	public class VideoCanvas
	{
		public ulong view { get; set; }

		public RENDER_MODE_TYPE renderMode { get; set; }

		public VIDEO_MIRROR_MODE_TYPE mirrorMode { get; set; }

		public uint uid { get; set; }

		public bool isScreenView { get; set; }

		public byte[] priv { get; set; }

		public uint priv_size { get; set; }

		public VIDEO_SOURCE_TYPE sourceType { get; set; }

		public Rectangle cropArea { get; set; }

		public VIDEO_VIEW_SETUP_MODE setupMode { get; set; }

		public VideoCanvas()
		{
			view = 0uL;
			renderMode = RENDER_MODE_TYPE.RENDER_MODE_HIDDEN;
			uid = 0u;
			mirrorMode = VIDEO_MIRROR_MODE_TYPE.VIDEO_MIRROR_MODE_AUTO;
			isScreenView = false;
			priv = null;
			priv_size = 0u;
			sourceType = VIDEO_SOURCE_TYPE.VIDEO_SOURCE_CAMERA_PRIMARY;
			cropArea = new Rectangle();
			setupMode = VIDEO_VIEW_SETUP_MODE.VIDEO_VIEW_SETUP_REPLACE;
		}

		public VideoCanvas(ulong v, RENDER_MODE_TYPE m, VIDEO_MIRROR_MODE_TYPE mt, uint u)
		{
			view = v;
			renderMode = m;
			mirrorMode = mt;
			uid = u;
			isScreenView = false;
			priv = null;
			priv_size = 0u;
			sourceType = VIDEO_SOURCE_TYPE.VIDEO_SOURCE_CAMERA_PRIMARY;
			cropArea = new Rectangle();
			setupMode = VIDEO_VIEW_SETUP_MODE.VIDEO_VIEW_SETUP_REPLACE;
		}

		public VideoCanvas(ulong v, RENDER_MODE_TYPE m, VIDEO_MIRROR_MODE_TYPE mt, string u)
		{
			view = v;
			renderMode = m;
			mirrorMode = mt;
			uid = 0u;
			isScreenView = false;
			priv = null;
			priv_size = 0u;
			sourceType = VIDEO_SOURCE_TYPE.VIDEO_SOURCE_CAMERA_PRIMARY;
			cropArea = new Rectangle();
			setupMode = VIDEO_VIEW_SETUP_MODE.VIDEO_VIEW_SETUP_REPLACE;
		}
	}
	public enum LIGHTENING_CONTRAST_LEVEL
	{
		LIGHTENING_CONTRAST_LOW,
		LIGHTENING_CONTRAST_NORMAL,
		LIGHTENING_CONTRAST_HIGH
	}
	public class BeautyOptions
	{
		public LIGHTENING_CONTRAST_LEVEL lighteningContrastLevel { get; set; }

		public float lighteningLevel { get; set; }

		public float smoothnessLevel { get; set; }

		public float rednessLevel { get; set; }

		public float sharpnessLevel { get; set; }

		public BeautyOptions()
		{
			lighteningContrastLevel = LIGHTENING_CONTRAST_LEVEL.LIGHTENING_CONTRAST_NORMAL;
			lighteningLevel = 0f;
			smoothnessLevel = 0f;
			rednessLevel = 0f;
			sharpnessLevel = 0f;
		}

		public BeautyOptions(LIGHTENING_CONTRAST_LEVEL lighteningContrastLevel, float lighteningLevel, float smoothnessLevel, float rednessLevel, float sharpnessLevel)
		{
			this.lighteningContrastLevel = lighteningContrastLevel;
			this.lighteningLevel = lighteningLevel;
			this.smoothnessLevel = smoothnessLevel;
			this.rednessLevel = rednessLevel;
			this.sharpnessLevel = sharpnessLevel;
		}
	}
	public enum LOW_LIGHT_ENHANCE_MODE
	{
		LOW_LIGHT_ENHANCE_AUTO,
		LOW_LIGHT_ENHANCE_MANUAL
	}
	public enum LOW_LIGHT_ENHANCE_LEVEL
	{
		LOW_LIGHT_ENHANCE_LEVEL_HIGH_QUALITY,
		LOW_LIGHT_ENHANCE_LEVEL_FAST
	}
	public class LowlightEnhanceOptions
	{
		public LOW_LIGHT_ENHANCE_MODE mode { get; set; }

		public LOW_LIGHT_ENHANCE_LEVEL level { get; set; }

		public LowlightEnhanceOptions(LOW_LIGHT_ENHANCE_MODE lowlightMode, LOW_LIGHT_ENHANCE_LEVEL lowlightLevel)
		{
			mode = lowlightMode;
			level = lowlightLevel;
		}

		public LowlightEnhanceOptions()
		{
			mode = LOW_LIGHT_ENHANCE_MODE.LOW_LIGHT_ENHANCE_AUTO;
			level = LOW_LIGHT_ENHANCE_LEVEL.LOW_LIGHT_ENHANCE_LEVEL_HIGH_QUALITY;
		}
	}
	public enum VIDEO_DENOISER_MODE
	{
		VIDEO_DENOISER_AUTO,
		VIDEO_DENOISER_MANUAL
	}
	public enum VIDEO_DENOISER_LEVEL
	{
		VIDEO_DENOISER_LEVEL_HIGH_QUALITY,
		VIDEO_DENOISER_LEVEL_FAST,
		VIDEO_DENOISER_LEVEL_STRENGTH
	}
	public class VideoDenoiserOptions
	{
		public VIDEO_DENOISER_MODE mode { get; set; }

		public VIDEO_DENOISER_LEVEL level { get; set; }

		public VideoDenoiserOptions(VIDEO_DENOISER_MODE denoiserMode, VIDEO_DENOISER_LEVEL denoiserLevel)
		{
			mode = denoiserMode;
			level = denoiserLevel;
		}

		public VideoDenoiserOptions()
		{
			mode = VIDEO_DENOISER_MODE.VIDEO_DENOISER_AUTO;
			level = VIDEO_DENOISER_LEVEL.VIDEO_DENOISER_LEVEL_HIGH_QUALITY;
		}
	}
	public class ColorEnhanceOptions
	{
		public float strengthLevel { get; set; }

		public float skinProtectLevel { get; set; }

		public ColorEnhanceOptions(float stength, float skinProtect)
		{
			strengthLevel = stength;
			skinProtectLevel = skinProtect;
		}

		public ColorEnhanceOptions()
		{
			strengthLevel = 0f;
			skinProtectLevel = 1f;
		}
	}
	public enum BACKGROUND_SOURCE_TYPE
	{
		BACKGROUND_COLOR = 1,
		BACKGROUND_IMG,
		BACKGROUND_BLUR
	}
	public enum BACKGROUND_BLUR_DEGREE
	{
		BLUR_DEGREE_LOW = 1,
		BLUR_DEGREE_MEDIUM,
		BLUR_DEGREE_HIGH
	}
	public class VirtualBackgroundSource
	{
		public BACKGROUND_SOURCE_TYPE background_source_type;

		public uint color;

		public string source;

		public BACKGROUND_BLUR_DEGREE blur_degree;

		public VirtualBackgroundSource()
		{
			background_source_type = BACKGROUND_SOURCE_TYPE.BACKGROUND_COLOR;
			color = 16777215u;
			source = "";
			blur_degree = BACKGROUND_BLUR_DEGREE.BLUR_DEGREE_HIGH;
		}
	}
	public enum SEG_MODEL_TYPE
	{
		SEG_MODEL_AI = 1,
		SEG_MODEL_GREEN
	}
	public class SegmentationProperty
	{
		public SEG_MODEL_TYPE modelType { get; set; }

		public float greenCapacity { get; set; }

		public SegmentationProperty()
		{
			modelType = SEG_MODEL_TYPE.SEG_MODEL_AI;
			greenCapacity = 0.5f;
		}
	}
	[Flags]
	public enum VOICE_BEAUTIFIER_PRESET
	{
		VOICE_BEAUTIFIER_OFF = 0,
		CHAT_BEAUTIFIER_MAGNETIC = 0x1010100,
		CHAT_BEAUTIFIER_FRESH = 0x1010200,
		CHAT_BEAUTIFIER_VITALITY = 0x1010300,
		SINGING_BEAUTIFIER = 0x1020100,
		TIMBRE_TRANSFORMATION_VIGOROUS = 0x1030100,
		TIMBRE_TRANSFORMATION_DEEP = 0x1030200,
		TIMBRE_TRANSFORMATION_MELLOW = 0x1030300,
		TIMBRE_TRANSFORMATION_FALSETTO = 0x1030400,
		TIMBRE_TRANSFORMATION_FULL = 0x1030500,
		TIMBRE_TRANSFORMATION_CLEAR = 0x1030600,
		TIMBRE_TRANSFORMATION_RESOUNDING = 0x1030700,
		TIMBRE_TRANSFORMATION_RINGING = 0x1030800,
		ULTRA_HIGH_QUALITY_VOICE = 0x1040100
	}
	[Flags]
	public enum AUDIO_EFFECT_PRESET
	{
		AUDIO_EFFECT_OFF = 0,
		ROOM_ACOUSTICS_KTV = 0x2010100,
		ROOM_ACOUSTICS_VOCAL_CONCERT = 0x2010200,
		ROOM_ACOUSTICS_STUDIO = 0x2010300,
		ROOM_ACOUSTICS_PHONOGRAPH = 0x2010400,
		ROOM_ACOUSTICS_VIRTUAL_STEREO = 0x2010500,
		ROOM_ACOUSTICS_SPACIAL = 0x2010600,
		ROOM_ACOUSTICS_ETHEREAL = 0x2010700,
		ROOM_ACOUSTICS_3D_VOICE = 0x2010800,
		ROOM_ACOUSTICS_VIRTUAL_SURROUND_SOUND = 0x2010900,
		VOICE_CHANGER_EFFECT_UNCLE = 0x2020100,
		VOICE_CHANGER_EFFECT_OLDMAN = 0x2020200,
		VOICE_CHANGER_EFFECT_BOY = 0x2020300,
		VOICE_CHANGER_EFFECT_SISTER = 0x2020400,
		VOICE_CHANGER_EFFECT_GIRL = 0x2020500,
		VOICE_CHANGER_EFFECT_PIGKING = 0x2020600,
		VOICE_CHANGER_EFFECT_HULK = 0x2020700,
		STYLE_TRANSFORMATION_RNB = 0x2030100,
		STYLE_TRANSFORMATION_POPULAR = 0x2030200,
		PITCH_CORRECTION = 0x2040100
	}
	[Flags]
	public enum VOICE_CONVERSION_PRESET
	{
		VOICE_CONVERSION_OFF = 0,
		VOICE_CHANGER_NEUTRAL = 0x3010100,
		VOICE_CHANGER_SWEET = 0x3010200,
		VOICE_CHANGER_SOLID = 0x3010300,
		VOICE_CHANGER_BASS = 0x3010400
	}
	public class ScreenCaptureParameters
	{
		public VideoDimensions dimensions { get; set; }

		public int frameRate { get; set; }

		public int bitrate { get; set; }

		public bool captureMouseCursor { get; set; }

		public bool windowFocus { get; set; }

		public ulong[] excludeWindowList { get; set; }

		public int excludeWindowCount { get; set; }

		public int highLightWidth { get; set; }

		public uint highLightColor { get; set; }

		public bool enableHighLight { get; set; }

		public ScreenCaptureParameters()
		{
			dimensions = new VideoDimensions(1920, 1080);
			frameRate = 5;
			bitrate = 0;
			captureMouseCursor = true;
			windowFocus = false;
			excludeWindowList = new ulong[0];
			excludeWindowCount = 0;
			highLightWidth = 0;
			highLightColor = 0u;
			enableHighLight = false;
		}

		public ScreenCaptureParameters(ref VideoDimensions d, int f, int b)
		{
			dimensions = new VideoDimensions(d.width, d.height);
			frameRate = f;
			bitrate = b;
			captureMouseCursor = true;
			windowFocus = false;
			excludeWindowList = new ulong[0];
			excludeWindowCount = 0;
			highLightWidth = 0;
			highLightColor = 0u;
			enableHighLight = false;
		}

		public ScreenCaptureParameters(int width, int height, int f, int b)
		{
			dimensions = new VideoDimensions(width, height);
			frameRate = f;
			bitrate = b;
			captureMouseCursor = true;
			windowFocus = false;
			excludeWindowList = new ulong[0];
			excludeWindowCount = 0;
			highLightWidth = 0;
			highLightColor = 0u;
			enableHighLight = false;
		}

		public ScreenCaptureParameters(int width, int height, int f, int b, bool cur, bool fcs)
		{
			dimensions = new VideoDimensions(width, height);
			frameRate = f;
			bitrate = b;
			captureMouseCursor = cur;
			windowFocus = fcs;
			excludeWindowList = new ulong[0];
			excludeWindowCount = 0;
			highLightWidth = 0;
			highLightColor = 0u;
			enableHighLight = false;
		}

		public ScreenCaptureParameters(int width, int height, int f, int b, ulong[] ex, int cnt)
		{
			dimensions = new VideoDimensions(width, height);
			frameRate = f;
			bitrate = b;
			captureMouseCursor = true;
			windowFocus = false;
			excludeWindowList = ex;
			excludeWindowCount = cnt;
			highLightWidth = 0;
			highLightColor = 0u;
			enableHighLight = false;
		}

		public ScreenCaptureParameters(int width, int height, int f, int b, bool cur, bool fcs, ulong[] ex, int cnt)
		{
			dimensions = new VideoDimensions(width, height);
			frameRate = f;
			bitrate = b;
			captureMouseCursor = cur;
			windowFocus = fcs;
			excludeWindowList = ex;
			excludeWindowCount = cnt;
			highLightWidth = 0;
			highLightColor = 0u;
			enableHighLight = false;
		}
	}
	public enum AUDIO_RECORDING_QUALITY_TYPE
	{
		AUDIO_RECORDING_QUALITY_LOW,
		AUDIO_RECORDING_QUALITY_MEDIUM,
		AUDIO_RECORDING_QUALITY_HIGH,
		AUDIO_RECORDING_QUALITY_ULTRA_HIGH
	}
	public enum AUDIO_FILE_RECORDING_TYPE
	{
		AUDIO_FILE_RECORDING_MIC = 1,
		AUDIO_FILE_RECORDING_PLAYBACK,
		AUDIO_FILE_RECORDING_MIXED
	}
	public enum AUDIO_ENCODED_FRAME_OBSERVER_POSITION
	{
		AUDIO_ENCODED_FRAME_OBSERVER_POSITION_RECORD = 1,
		AUDIO_ENCODED_FRAME_OBSERVER_POSITION_PLAYBACK,
		AUDIO_ENCODED_FRAME_OBSERVER_POSITION_MIXED
	}
	public class AudioRecordingConfiguration
	{
		public string filePath { get; set; }

		public bool encode { get; set; }

		public int sampleRate { get; set; }

		public AUDIO_FILE_RECORDING_TYPE fileRecordingType { get; set; }

		public AUDIO_RECORDING_QUALITY_TYPE quality { get; set; }

		public int recordingChannel { get; set; }

		public AudioRecordingConfiguration()
		{
			filePath = "";
			encode = false;
			sampleRate = 32000;
			fileRecordingType = AUDIO_FILE_RECORDING_TYPE.AUDIO_FILE_RECORDING_MIXED;
			quality = AUDIO_RECORDING_QUALITY_TYPE.AUDIO_RECORDING_QUALITY_LOW;
			recordingChannel = 1;
		}

		public AudioRecordingConfiguration(string file_path, int sample_rate, AUDIO_RECORDING_QUALITY_TYPE quality_type, int channel)
		{
			filePath = file_path;
			encode = false;
			sampleRate = sample_rate;
			fileRecordingType = AUDIO_FILE_RECORDING_TYPE.AUDIO_FILE_RECORDING_MIXED;
			quality = quality_type;
			recordingChannel = channel;
		}

		public AudioRecordingConfiguration(string file_path, bool enc, int sample_rate, AUDIO_FILE_RECORDING_TYPE type, AUDIO_RECORDING_QUALITY_TYPE quality_type, int channel)
		{
			filePath = file_path;
			encode = enc;
			sampleRate = sample_rate;
			fileRecordingType = type;
			quality = quality_type;
			recordingChannel = channel;
		}
	}
	public class AudioEncodedFrameObserverConfig
	{
		public AUDIO_ENCODED_FRAME_OBSERVER_POSITION postionType { get; set; }

		public AUDIO_ENCODING_TYPE encodingType { get; set; }

		public AudioEncodedFrameObserverConfig()
		{
			postionType = AUDIO_ENCODED_FRAME_OBSERVER_POSITION.AUDIO_ENCODED_FRAME_OBSERVER_POSITION_PLAYBACK;
			encodingType = AUDIO_ENCODING_TYPE.AUDIO_ENCODING_TYPE_OPUS_48000_MEDIUM;
		}

		public AudioEncodedFrameObserverConfig(AUDIO_ENCODED_FRAME_OBSERVER_POSITION postionType, AUDIO_ENCODING_TYPE encodingType)
		{
			this.encodingType = encodingType;
			this.postionType = postionType;
		}
	}
	public enum AREA_CODE : uint
	{
		AREA_CODE_CN = 1u,
		AREA_CODE_NA = 2u,
		AREA_CODE_EU = 4u,
		AREA_CODE_AS = 8u,
		AREA_CODE_JP = 16u,
		AREA_CODE_IN = 32u,
		AREA_CODE_GLOB = uint.MaxValue
	}
	public enum AREA_CODE_EX : uint
	{
		AREA_CODE_OC = 64u,
		AREA_CODE_SA = 128u,
		AREA_CODE_AF = 256u,
		AREA_CODE_KR = 512u,
		AREA_CODE_HKMC = 1024u,
		AREA_CODE_US = 2048u,
		AREA_CODE_OVS = 4294967294u
	}
	public enum CHANNEL_MEDIA_RELAY_ERROR
	{
		RELAY_OK,
		RELAY_ERROR_SERVER_ERROR_RESPONSE,
		RELAY_ERROR_SERVER_NO_RESPONSE,
		RELAY_ERROR_NO_RESOURCE_AVAILABLE,
		RELAY_ERROR_FAILED_JOIN_SRC,
		RELAY_ERROR_FAILED_JOIN_DEST,
		RELAY_ERROR_FAILED_PACKET_RECEIVED_FROM_SRC,
		RELAY_ERROR_FAILED_PACKET_SENT_TO_DEST,
		RELAY_ERROR_SERVER_CONNECTION_LOST,
		RELAY_ERROR_INTERNAL_ERROR,
		RELAY_ERROR_SRC_TOKEN_EXPIRED,
		RELAY_ERROR_DEST_TOKEN_EXPIRED
	}
	public enum CHANNEL_MEDIA_RELAY_EVENT
	{
		RELAY_EVENT_NETWORK_DISCONNECTED,
		RELAY_EVENT_NETWORK_CONNECTED,
		RELAY_EVENT_PACKET_JOINED_SRC_CHANNEL,
		RELAY_EVENT_PACKET_JOINED_DEST_CHANNEL,
		RELAY_EVENT_PACKET_SENT_TO_DEST_CHANNEL,
		RELAY_EVENT_PACKET_RECEIVED_VIDEO_FROM_SRC,
		RELAY_EVENT_PACKET_RECEIVED_AUDIO_FROM_SRC,
		RELAY_EVENT_PACKET_UPDATE_DEST_CHANNEL,
		RELAY_EVENT_PACKET_UPDATE_DEST_CHANNEL_REFUSED,
		RELAY_EVENT_PACKET_UPDATE_DEST_CHANNEL_NOT_CHANGE,
		RELAY_EVENT_PACKET_UPDATE_DEST_CHANNEL_IS_NULL,
		RELAY_EVENT_VIDEO_PROFILE_UPDATE,
		RELAY_EVENT_PAUSE_SEND_PACKET_TO_DEST_CHANNEL_SUCCESS,
		RELAY_EVENT_PAUSE_SEND_PACKET_TO_DEST_CHANNEL_FAILED,
		RELAY_EVENT_RESUME_SEND_PACKET_TO_DEST_CHANNEL_SUCCESS,
		RELAY_EVENT_RESUME_SEND_PACKET_TO_DEST_CHANNEL_FAILED
	}
	public enum CHANNEL_MEDIA_RELAY_STATE
	{
		RELAY_STATE_IDLE,
		RELAY_STATE_CONNECTING,
		RELAY_STATE_RUNNING,
		RELAY_STATE_FAILURE
	}
	public class ChannelMediaInfo
	{
		public string channelName { get; set; }

		public string token { get; set; }

		public uint uid { get; set; }

		public ChannelMediaInfo()
		{
		}

		public ChannelMediaInfo(string channelName, string token, uint uid)
		{
			this.channelName = channelName;
			this.token = token;
			this.uid = uid;
		}
	}
	public class ChannelMediaRelayConfiguration
	{
		public ChannelMediaInfo srcInfo { get; set; }

		public ChannelMediaInfo[] destInfos { get; set; }

		public int destCount { get; set; }

		public ChannelMediaRelayConfiguration()
		{
			srcInfo = null;
			destInfos = new ChannelMediaInfo[0];
			destCount = 0;
		}

		public ChannelMediaRelayConfiguration(ChannelMediaInfo srcInfo, ChannelMediaInfo[] destInfos, int destCount)
		{
			this.srcInfo = srcInfo;
			this.destInfos = destInfos ?? new ChannelMediaInfo[0];
			this.destCount = destCount;
		}
	}
	public class UplinkNetworkInfo
	{
		public int video_encoder_target_bitrate_bps;

		public UplinkNetworkInfo()
		{
			video_encoder_target_bitrate_bps = 0;
		}

		public UplinkNetworkInfo(int video_encoder_target_bitrate_bps)
		{
			this.video_encoder_target_bitrate_bps = video_encoder_target_bitrate_bps;
		}
	}
	public class PeerDownlinkInfo
	{
		public string uid { get; set; }

		public VIDEO_STREAM_TYPE stream_type { get; set; }

		public REMOTE_VIDEO_DOWNSCALE_LEVEL current_downscale_level { get; set; }

		public int expected_bitrate_bps { get; set; }

		public PeerDownlinkInfo()
		{
			uid = "";
			stream_type = VIDEO_STREAM_TYPE.VIDEO_STREAM_HIGH;
			current_downscale_level = REMOTE_VIDEO_DOWNSCALE_LEVEL.REMOTE_VIDEO_DOWNSCALE_LEVEL_NONE;
			expected_bitrate_bps = -1;
		}

		public PeerDownlinkInfo(string uid, VIDEO_STREAM_TYPE stream_type, REMOTE_VIDEO_DOWNSCALE_LEVEL current_downscale_level, int expected_bitrate_bps)
		{
			this.uid = uid;
			this.stream_type = stream_type;
			this.current_downscale_level = current_downscale_level;
			this.expected_bitrate_bps = expected_bitrate_bps;
		}
	}
	public class DownlinkNetworkInfo
	{
		public int lastmile_buffer_delay_time_ms { get; set; }

		public int bandwidth_estimation_bps { get; set; }

		public int total_downscale_level_count { get; set; }

		public PeerDownlinkInfo[] peer_downlink_info { get; set; }

		public int total_received_video_count { get; set; }

		public DownlinkNetworkInfo()
		{
			lastmile_buffer_delay_time_ms = -1;
			bandwidth_estimation_bps = -1;
			total_downscale_level_count = -1;
			peer_downlink_info = null;
			total_received_video_count = -1;
		}

		public DownlinkNetworkInfo(ref DownlinkNetworkInfo info)
		{
			lastmile_buffer_delay_time_ms = info.lastmile_buffer_delay_time_ms;
			bandwidth_estimation_bps = info.bandwidth_estimation_bps;
			total_downscale_level_count = info.total_downscale_level_count;
			peer_downlink_info = null;
			total_received_video_count = info.total_received_video_count;
			if (total_received_video_count > 0)
			{
				peer_downlink_info = new PeerDownlinkInfo[total_received_video_count];
				for (int i = 0; i < total_received_video_count; i++)
				{
					peer_downlink_info[i] = info.peer_downlink_info[i];
				}
			}
		}

		public DownlinkNetworkInfo(int lastmile_buffer_delay_time_ms, int bandwidth_estimation_bps, int total_downscale_level_count, PeerDownlinkInfo[] peer_downlink_info, int total_received_video_count)
		{
			this.lastmile_buffer_delay_time_ms = lastmile_buffer_delay_time_ms;
			this.bandwidth_estimation_bps = bandwidth_estimation_bps;
			this.total_downscale_level_count = total_downscale_level_count;
			this.peer_downlink_info = peer_downlink_info;
			this.total_received_video_count = total_received_video_count;
		}
	}
	public enum ENCRYPTION_MODE
	{
		AES_128_XTS = 1,
		AES_128_ECB,
		AES_256_XTS,
		SM4_128_ECB,
		AES_128_GCM,
		AES_256_GCM,
		AES_128_GCM2,
		AES_256_GCM2,
		MODE_END
	}
	public class EncryptionConfig
	{
		private byte[] encryptionKdfSalt32 = new byte[32];

		public ENCRYPTION_MODE encryptionMode { get; set; }

		public string encryptionKey { get; set; }

		public byte[] encryptionKdfSalt
		{
			get
			{
				return encryptionKdfSalt32;
			}
			set
			{
				Buffer.BlockCopy(value, 0, encryptionKdfSalt32, 0, 32);
			}
		}

		public EncryptionConfig()
		{
			encryptionMode = ENCRYPTION_MODE.MODE_END;
			encryptionKey = "";
			encryptionKdfSalt = new byte[32];
		}

		public EncryptionConfig(ENCRYPTION_MODE encryptionMode, string encryptionKey, byte[] encryptionKdfSalt)
		{
			this.encryptionMode = encryptionMode;
			this.encryptionKey = encryptionKey;
			this.encryptionKdfSalt = encryptionKdfSalt;
		}

		public string getEncryptionString()
		{
			return encryptionMode switch
			{
				ENCRYPTION_MODE.AES_128_XTS => "aes-128-xts", 
				ENCRYPTION_MODE.AES_128_ECB => "aes-128-ecb", 
				ENCRYPTION_MODE.AES_256_XTS => "aes-256-xts", 
				ENCRYPTION_MODE.SM4_128_ECB => "sm4-128-ecb", 
				ENCRYPTION_MODE.AES_128_GCM => "aes-128-gcm", 
				ENCRYPTION_MODE.AES_256_GCM => "aes-256-gcm", 
				ENCRYPTION_MODE.AES_128_GCM2 => "aes-128-gcm-2", 
				ENCRYPTION_MODE.AES_256_GCM2 => "aes-256-gcm-2", 
				_ => "aes-128-gcm-2", 
			};
		}
	}
	public enum ENCRYPTION_ERROR_TYPE
	{
		ENCRYPTION_ERROR_INTERNAL_FAILURE,
		ENCRYPTION_ERROR_DECRYPTION_FAILURE,
		ENCRYPTION_ERROR_ENCRYPTION_FAILURE
	}
	public enum UPLOAD_ERROR_REASON
	{
		UPLOAD_SUCCESS,
		UPLOAD_NET_ERROR,
		UPLOAD_SERVER_ERROR
	}
	public enum PERMISSION_TYPE
	{
		RECORD_AUDIO,
		CAMERA,
		SCREEN_CAPTURE
	}
	public enum MAX_USER_ACCOUNT_LENGTH_TYPE
	{
		MAX_USER_ACCOUNT_LENGTH = 0x100
	}
	public enum STREAM_SUBSCRIBE_STATE
	{
		SUB_STATE_IDLE,
		SUB_STATE_NO_SUBSCRIBED,
		SUB_STATE_SUBSCRIBING,
		SUB_STATE_SUBSCRIBED
	}
	public enum STREAM_PUBLISH_STATE
	{
		PUB_STATE_IDLE,
		PUB_STATE_NO_PUBLISHED,
		PUB_STATE_PUBLISHING,
		PUB_STATE_PUBLISHED
	}
	public class EchoTestConfiguration
	{
		public ulong view { get; set; }

		public bool enableAudio { get; set; }

		public bool enableVideo { get; set; }

		public string token { get; set; }

		public string channelId { get; set; }

		public EchoTestConfiguration(ulong v, bool ea, bool ev, string t, string c)
		{
			view = v;
			enableAudio = ea;
			enableVideo = ev;
			token = t;
			channelId = c;
		}

		public EchoTestConfiguration()
		{
			view = 0uL;
			enableAudio = true;
			enableVideo = true;
			token = "";
			channelId = "";
		}
	}
	public class UserInfo
	{
		public uint uid;

		public string userAccount;

		public UserInfo()
		{
			uid = 0u;
			userAccount = "";
		}
	}
	[Flags]
	public enum EAR_MONITORING_FILTER_TYPE
	{
		EAR_MONITORING_FILTER_NONE = 1,
		EAR_MONITORING_FILTER_BUILT_IN_AUDIO_FILTERS = 2,
		EAR_MONITORING_FILTER_NOISE_SUPPRESSION = 4
	}
	public enum THREAD_PRIORITY_TYPE
	{
		LOWEST,
		LOW,
		NORMAL,
		HIGH,
		HIGHEST,
		CRITICAL
	}
	public class ScreenVideoParameters
	{
		public VIDEO_CONTENT_HINT contentHint = VIDEO_CONTENT_HINT.CONTENT_HINT_MOTION;

		public VideoDimensions dimensions { get; set; }

		public int frameRate { get; set; }

		public int bitrate { get; set; }

		public ScreenVideoParameters()
		{
			dimensions = new VideoDimensions(1280, 720);
			frameRate = 15;
		}
	}
	public class ScreenAudioParameters
	{
		public int sampleRate { get; set; }

		public int channels { get; set; }

		public int captureSignalVolume { get; set; }

		public ScreenAudioParameters()
		{
			sampleRate = 16000;
			channels = 2;
			captureSignalVolume = 100;
		}
	}
	public class ScreenCaptureParameters2
	{
		public bool captureAudio { get; set; }

		public ScreenAudioParameters audioParams { get; set; }

		public bool captureVideo { get; set; }

		public ScreenVideoParameters videoParams { get; set; }

		public ScreenCaptureParameters2()
		{
			captureAudio = false;
			audioParams = new ScreenAudioParameters();
			captureAudio = true;
			videoParams = new ScreenVideoParameters();
		}
	}
	public class SpatialAudioParams : OptionalJsonParse
	{
		public Optional<double> speaker_azimuth = new Optional<double>();

		public Optional<double> speaker_elevation = new Optional<double>();

		public Optional<double> speaker_distance = new Optional<double>();

		public Optional<int> speaker_orientation = new Optional<int>();

		public Optional<bool> enable_blur = new Optional<bool>();

		public Optional<bool> enable_air_absorb = new Optional<bool>();

		public Optional<double> speaker_attenuation = new Optional<double>();

		public override void ToJson(Agora.Rtc.LitJson.JsonWriter writer)
		{
			writer.WriteObjectStart();
			if (speaker_azimuth.HasValue())
			{
				writer.WritePropertyName("speaker_azimuth");
				writer.Write(speaker_azimuth.GetValue());
			}
			if (speaker_elevation.HasValue())
			{
				writer.WritePropertyName("speaker_elevation");
				writer.Write(speaker_elevation.GetValue());
			}
			if (speaker_distance.HasValue())
			{
				writer.WritePropertyName("speaker_distance");
				writer.Write(speaker_distance.GetValue());
			}
			if (speaker_orientation.HasValue())
			{
				writer.WritePropertyName("speaker_orientation");
				writer.Write(speaker_orientation.GetValue());
			}
			if (enable_blur.HasValue())
			{
				writer.WritePropertyName("enable_blur");
				writer.Write(enable_blur.GetValue());
			}
			if (enable_air_absorb.HasValue())
			{
				writer.WritePropertyName("enable_air_absorb");
				writer.Write(enable_air_absorb.GetValue());
			}
			if (speaker_attenuation.HasValue())
			{
				writer.WritePropertyName("speaker_attenuation");
				writer.Write(speaker_attenuation.GetValue());
			}
			writer.WriteObjectEnd();
		}
	}
	public enum AudioRoute
	{
		ROUTE_DEFAULT = -1,
		ROUTE_HEADSET,
		ROUTE_EARPIECE,
		ROUTE_HEADSETNOMIC,
		ROUTE_SPEAKERPHONE,
		ROUTE_LOUDSPEAKER,
		ROUTE_HEADSETBLUETOOTH,
		ROUTE_HDMI,
		ROUTE_USB,
		ROUTE_DISPLAYPORT,
		ROUTE_AIRPLAY
	}
	public enum BYTES_PER_SAMPLE
	{
		TWO_BYTES_PER_SAMPLE = 2
	}
	public class AudioParameters
	{
		public int sample_rate { get; set; }

		public uint channels { get; set; }

		public uint frames_per_buffer { get; set; }

		public AudioParameters()
		{
			sample_rate = 0;
			channels = 0u;
			frames_per_buffer = 0u;
		}

		public AudioParameters(int sample_rate, uint channels, uint frames_per_buffer)
		{
			this.sample_rate = sample_rate;
			this.channels = channels;
			this.frames_per_buffer = frames_per_buffer;
		}
	}
	public enum RAW_AUDIO_FRAME_OP_MODE_TYPE
	{
		RAW_AUDIO_FRAME_OP_MODE_READ_ONLY = 0,
		RAW_AUDIO_FRAME_OP_MODE_READ_WRITE = 2
	}
	public enum MEDIA_SOURCE_TYPE
	{
		AUDIO_PLAYOUT_SOURCE = 0,
		AUDIO_RECORDING_SOURCE = 1,
		PRIMARY_CAMERA_SOURCE = 2,
		SECONDARY_CAMERA_SOURCE = 3,
		PRIMARY_SCREEN_SOURCE = 4,
		SECONDARY_SCREEN_SOURCE = 5,
		CUSTOM_VIDEO_SOURCE = 6,
		MEDIA_PLAYER_SOURCE = 7,
		RTC_IMAGE_PNG_SOURCE = 8,
		RTC_IMAGE_JPEG_SOURCE = 9,
		RTC_IMAGE_GIF_SOURCE = 10,
		REMOTE_VIDEO_SOURCE = 11,
		TRANSCODED_VIDEO_SOURCE = 12,
		UNKNOWN_MEDIA_SOURCE = 100
	}
	public class PacketOptions
	{
		public uint timestamp { get; set; }

		public byte audioLevelIndication { get; set; }

		public PacketOptions()
		{
			timestamp = 0u;
			audioLevelIndication = 127;
		}
	}
	public class AudioEncodedFrameInfo
	{
		public ulong sendTs;

		public byte codec;

		public AudioEncodedFrameInfo()
		{
			sendTs = 0uL;
			codec = 0;
		}
	}
	public struct AudioPcmFrame
	{
		public uint capture_timestamp;

		public ulong samples_per_channel_;

		public int sample_rate_hz_;

		public ulong num_channels_;

		public BYTES_PER_SAMPLE bytes_per_sample;

		public short[] data_;
	}
	public enum AUDIO_DUAL_MONO_MODE
	{
		AUDIO_DUAL_MONO_STEREO,
		AUDIO_DUAL_MONO_L,
		AUDIO_DUAL_MONO_R,
		AUDIO_DUAL_MONO_MIX
	}
	public enum VIDEO_PIXEL_FORMAT
	{
		VIDEO_PIXEL_DEFAULT = 0,
		VIDEO_PIXEL_I420 = 1,
		VIDEO_PIXEL_BGRA = 2,
		VIDEO_PIXEL_NV21 = 3,
		VIDEO_PIXEL_RGBA = 4,
		VIDEO_PIXEL_NV12 = 8,
		VIDEO_TEXTURE_2D = 10,
		VIDEO_TEXTURE_OES = 11,
		VIDEO_CVPIXEL_NV12 = 12,
		VIDEO_CVPIXEL_I420 = 13,
		VIDEO_CVPIXEL_BGRA = 14,
		VIDEO_PIXEL_I422 = 16
	}
	public enum RENDER_MODE_TYPE
	{
		RENDER_MODE_HIDDEN = 1,
		RENDER_MODE_FIT,
		[Obsolete]
		RENDER_MODE_ADAPTIVE
	}
	public enum EGL_CONTEXT_TYPE
	{
		EGL_CONTEXT10,
		EGL_CONTEXT14
	}
	public enum VIDEO_BUFFER_TYPE
	{
		VIDEO_BUFFER_RAW_DATA = 1,
		VIDEO_BUFFER_ARRAY,
		VIDEO_BUFFER_TEXTURE
	}
	public class ExternalVideoFrame
	{
		public VIDEO_BUFFER_TYPE type { get; set; }

		public VIDEO_PIXEL_FORMAT format { get; set; }

		public byte[] buffer { get; set; }

		public int stride { get; set; }

		public int height { get; set; }

		public int cropLeft { get; set; }

		public int cropTop { get; set; }

		public int cropRight { get; set; }

		public int cropBottom { get; set; }

		public int rotation { get; set; }

		public long timestamp { get; set; }

		public byte[] eglContext { get; set; }

		public EGL_CONTEXT_TYPE eglType { get; set; }

		public int textureId { get; set; }

		public byte[] metadata_buffer { get; set; }

		public int metadata_size { get; set; }

		public ExternalVideoFrame()
		{
			type = VIDEO_BUFFER_TYPE.VIDEO_BUFFER_RAW_DATA;
			format = VIDEO_PIXEL_FORMAT.VIDEO_PIXEL_DEFAULT;
			buffer = null;
			stride = 0;
			height = 0;
			cropLeft = 0;
			cropTop = 0;
			cropRight = 0;
			cropBottom = 0;
			rotation = 0;
			timestamp = 0L;
			eglContext = null;
			eglType = EGL_CONTEXT_TYPE.EGL_CONTEXT10;
			textureId = 0;
			metadata_buffer = null;
			metadata_size = 0;
		}

		public ExternalVideoFrame(VIDEO_BUFFER_TYPE type, VIDEO_PIXEL_FORMAT format, byte[] buffer, int stride, int height, long timestamp, byte[] eglContext, EGL_CONTEXT_TYPE eglType, int textureId, byte[] metadata_buffer, int metadata_size, int cropLeft = 0, int cropTop = 0, int cropRight = 0, int cropBottom = 0, int rotation = 0)
		{
			this.type = type;
			this.format = format;
			this.buffer = buffer;
			this.stride = stride;
			this.height = height;
			this.cropLeft = cropLeft;
			this.cropTop = cropTop;
			this.cropRight = cropRight;
			this.cropBottom = cropBottom;
			this.rotation = rotation;
			this.timestamp = timestamp;
			this.eglContext = eglContext;
			this.eglType = eglType;
			this.textureId = textureId;
			this.metadata_buffer = metadata_buffer;
			this.metadata_size = metadata_size;
		}
	}
	public class VideoFrame
	{
		public VIDEO_PIXEL_FORMAT type;

		public int width;

		public int height;

		public int yStride;

		public int uStride;

		public int vStride;

		public byte[] yBuffer;

		public IntPtr yBufferPtr;

		public byte[] uBuffer;

		public IntPtr uBufferPtr;

		public byte[] vBuffer;

		public IntPtr vBufferPtr;

		public int rotation;

		public long renderTimeMs;

		public int avsync_type;

		public IntPtr metadata_buffer;

		public int metadata_size;

		public IntPtr sharedContext;

		public int textureId;

		public float[] matrix;

		public byte[] alphaBuffer;

		public IntPtr alphaBufferPtr;

		public VideoFrame()
		{
			type = VIDEO_PIXEL_FORMAT.VIDEO_PIXEL_DEFAULT;
			width = 0;
			height = 0;
			yStride = 0;
			uStride = 0;
			vStride = 0;
			yBuffer = new byte[0];
			uBuffer = new byte[0];
			vBuffer = new byte[0];
			yBufferPtr = IntPtr.Zero;
			uBufferPtr = IntPtr.Zero;
			vBufferPtr = IntPtr.Zero;
			rotation = 0;
			renderTimeMs = 0L;
			avsync_type = 0;
			metadata_buffer = IntPtr.Zero;
			metadata_size = 0;
			sharedContext = IntPtr.Zero;
			textureId = 0;
			matrix = new float[16];
		}
	}
	public enum MEDIA_PLAYER_SOURCE_TYPE
	{
		MEDIA_PLAYER_SOURCE_DEFAULT,
		MEDIA_PLAYER_SOURCE_FULL_FEATURED,
		MEDIA_PLAYER_SOURCE_SIMPLE
	}
	[Flags]
	public enum VIDEO_MODULE_POSITION
	{
		POSITION_POST_CAPTURER = 1,
		POSITION_PRE_RENDERER = 2,
		POSITION_PRE_ENCODER = 4,
		POSITION_POST_FILTERS = 8
	}
	public enum AUDIO_FRAME_TYPE
	{
		FRAME_TYPE_PCM16
	}
	public enum MAX_HANDLE_TIME_CNT
	{
		MAX_HANDLE_TIME_CNT = 10
	}
	public class AudioFrame
	{
		public AUDIO_FRAME_TYPE type { get; set; }

		public int samplesPerChannel { get; set; }

		public BYTES_PER_SAMPLE bytesPerSample { get; set; }

		public int channels { get; set; }

		public int samplesPerSec { get; set; }

		public ulong buffer { get; set; }

		public IntPtr bufferPtr { get; set; }

		public byte[] RawBuffer { get; set; }

		public long renderTimeMs { get; set; }

		public int avsync_type { get; set; }

		public AudioFrame()
		{
			type = AUDIO_FRAME_TYPE.FRAME_TYPE_PCM16;
			samplesPerChannel = 0;
			bytesPerSample = BYTES_PER_SAMPLE.TWO_BYTES_PER_SAMPLE;
			channels = 0;
			samplesPerSec = 0;
			RawBuffer = new byte[0];
			renderTimeMs = 0L;
			avsync_type = 0;
		}

		public AudioFrame(AUDIO_FRAME_TYPE type, int samplesPerChannel, BYTES_PER_SAMPLE bytesPerSample, int channels, int samplesPerSec, byte[] buffer, long renderTimeMs, int avsync_type)
		{
			this.type = type;
			this.samplesPerChannel = samplesPerChannel;
			this.bytesPerSample = bytesPerSample;
			this.channels = channels;
			this.samplesPerSec = samplesPerSec;
			RawBuffer = buffer;
			this.renderTimeMs = renderTimeMs;
			this.avsync_type = avsync_type;
		}
	}
	[Flags]
	public enum AUDIO_FRAME_POSITION
	{
		AUDIO_FRAME_POSITION_NONE = 0,
		AUDIO_FRAME_POSITION_PLAYBACK = 1,
		AUDIO_FRAME_POSITION_RECORD = 2,
		AUDIO_FRAME_POSITION_MIXED = 4,
		AUDIO_FRAME_POSITION_BEFORE_MIXING = 8
	}
	public class AudioParams
	{
		public int sample_rate { get; set; }

		public int channels { get; set; }

		public RAW_AUDIO_FRAME_OP_MODE_TYPE mode { get; set; }

		public int samples_per_call { get; set; }

		public AudioParams()
		{
			sample_rate = 0;
			channels = 0;
			mode = RAW_AUDIO_FRAME_OP_MODE_TYPE.RAW_AUDIO_FRAME_OP_MODE_READ_ONLY;
			samples_per_call = 0;
		}

		public AudioParams(int samplerate, int channel, RAW_AUDIO_FRAME_OP_MODE_TYPE type, int samplesPerCall)
		{
			sample_rate = samplerate;
			channels = channel;
			mode = type;
			samples_per_call = samplesPerCall;
		}
	}
	public struct AudioSpectrumData
	{
		public float[] audioSpectrumData;

		public int dataLength;
	}
	public struct UserAudioSpectrumInfo
	{
		public uint uid;

		public AudioSpectrumData spectrumData;
	}
	[Flags]
	public enum VIDEO_OBSERVER_POSITION
	{
		POSITION_POST_CAPTURER = 1,
		POSITION_PRE_RENDERER = 2,
		POSITION_PRE_ENCODER = 4
	}
	public enum CONTENT_INSPECT_RESULT
	{
		CONTENT_INSPECT_NEUTRAL = 1,
		CONTENT_INSPECT_SEXY = 2,
		CONTENT_INSPECT_PORN = 3,
		MAX_CONTENT_INSPECT_MODULE_COUNT = 32
	}
	public enum CONTENT_INSPECT_VENDOR
	{
		CONTENT_INSPECT_VENDOR_AGORA = 1,
		CONTENT_INSPECT_VENDOR_TUPU,
		ONTENT_INSPECT_VENDOR_HIVE
	}
	public enum CONTENT_INSPECT_DEVICE_TYPE
	{
		CONTENT_INSPECT_DEVICE_INVALID,
		CONTENT_INSPECT_DEVICE_AGORA
	}
	public enum CONTENT_INSPECT_TYPE
	{
		CONTENT_INSPECT_INVALID,
		CONTENT_INSPECT_MODERATION,
		CONTENT_INSPECT_SUPERVISION
	}
	public enum CONTENT_INSPECT_WORK_TYPE
	{
		CONTENT_INSPECT_WORK_DEVICE,
		CONTENT_INSPECT_WORK_CLOUD,
		CONTENT_INSPECT_WORK_DEVICE_CLOUD
	}
	public class ContentInspectModule
	{
		public CONTENT_INSPECT_TYPE type;

		public uint interval;

		public ContentInspectModule()
		{
			type = CONTENT_INSPECT_TYPE.CONTENT_INSPECT_INVALID;
			interval = 0u;
		}
	}
	public class ContentInspectConfig
	{
		public ContentInspectModule[] modules { get; set; }

		public int moduleCount { get; set; }

		public ContentInspectConfig()
		{
			modules = null;
			moduleCount = 0;
		}
	}
	public enum EXTERNAL_VIDEO_SOURCE_TYPE
	{
		VIDEO_FRAME,
		ENCODED_VIDEO_FRAME
	}
	public enum MediaRecorderContainerFormat
	{
		FORMAT_MP4 = 1
	}
	public enum MediaRecorderStreamType
	{
		STREAM_TYPE_AUDIO = 1,
		STREAM_TYPE_VIDEO,
		STREAM_TYPE_BOTH
	}
	public enum RecorderState
	{
		RECORDER_STATE_ERROR = -1,
		RECORDER_STATE_START = 2,
		RECORDER_STATE_STOP = 3
	}
	public enum RecorderErrorCode
	{
		RECORDER_ERROR_NONE,
		RECORDER_ERROR_WRITE_FAILED,
		RECORDER_ERROR_NO_STREAM,
		RECORDER_ERROR_OVER_MAX_DURATION,
		RECORDER_ERROR_CONFIG_CHANGED
	}
	public class MediaRecorderConfiguration
	{
		public string storagePath { get; set; }

		public MediaRecorderContainerFormat containerFormat { get; set; }

		public MediaRecorderStreamType streamType { get; set; }

		public int maxDurationMs { get; set; }

		public int recorderInfoUpdateInterval { get; set; }

		public MediaRecorderConfiguration()
		{
			storagePath = "";
			containerFormat = MediaRecorderContainerFormat.FORMAT_MP4;
			streamType = MediaRecorderStreamType.STREAM_TYPE_BOTH;
			maxDurationMs = 120000;
			recorderInfoUpdateInterval = 0;
		}

		public MediaRecorderConfiguration(string path, MediaRecorderContainerFormat format, MediaRecorderStreamType type, int duration, int interval)
		{
			storagePath = path;
			containerFormat = format;
			streamType = type;
			maxDurationMs = duration;
			recorderInfoUpdateInterval = interval;
		}
	}
	public class RecorderInfo
	{
		public string fileName { get; set; }

		public uint durationMs { get; set; }

		public uint fileSize { get; set; }

		public RecorderInfo()
		{
			fileName = "";
			durationMs = 0u;
			fileSize = 0u;
		}

		public RecorderInfo(string name, uint dur, uint size)
		{
			fileName = name;
			durationMs = dur;
			fileSize = size;
		}
	}
	public enum MEDIA_PLAYER_STATE
	{
		PLAYER_STATE_IDLE = 0,
		PLAYER_STATE_OPENING = 1,
		PLAYER_STATE_OPEN_COMPLETED = 2,
		PLAYER_STATE_PLAYING = 3,
		PLAYER_STATE_PAUSED = 4,
		PLAYER_STATE_PLAYBACK_COMPLETED = 5,
		PLAYER_STATE_PLAYBACK_ALL_LOOPS_COMPLETED = 6,
		PLAYER_STATE_STOPPED = 7,
		PLAYER_STATE_PAUSING_INTERNAL = 50,
		PLAYER_STATE_STOPPING_INTERNAL = 51,
		PLAYER_STATE_SEEKING_INTERNAL = 52,
		PLAYER_STATE_GETTING_INTERNAL = 53,
		PLAYER_STATE_NONE_INTERNAL = 54,
		PLAYER_STATE_DO_NOTHING_INTERNAL = 55,
		PLAYER_STATE_SET_TRACK_INTERNAL = 56,
		PLAYER_STATE_FAILED = 100
	}
	public enum MEDIA_PLAYER_ERROR
	{
		PLAYER_ERROR_NONE = 0,
		PLAYER_ERROR_INVALID_ARGUMENTS = -1,
		PLAYER_ERROR_INTERNAL = -2,
		PLAYER_ERROR_NO_RESOURCE = -3,
		PLAYER_ERROR_INVALID_MEDIA_SOURCE = -4,
		PLAYER_ERROR_UNKNOWN_STREAM_TYPE = -5,
		PLAYER_ERROR_OBJ_NOT_INITIALIZED = -6,
		PLAYER_ERROR_CODEC_NOT_SUPPORTED = -7,
		PLAYER_ERROR_VIDEO_RENDER_FAILED = -8,
		PLAYER_ERROR_INVALID_STATE = -9,
		PLAYER_ERROR_URL_NOT_FOUND = -10,
		PLAYER_ERROR_INVALID_CONNECTION_STATE = -11,
		PLAYER_ERROR_SRC_BUFFER_UNDERFLOW = -12,
		PLAYER_ERROR_INTERRUPTED = -13,
		PLAYER_ERROR_NOT_SUPPORTED = -14,
		PLAYER_ERROR_TOKEN_EXPIRED = -15,
		PLAYER_ERROR_IP_EXPIRED = -16,
		PLAYER_ERROR_UNKNOWN = -17
	}
	public enum MEDIA_STREAM_TYPE
	{
		STREAM_TYPE_UNKNOWN,
		STREAM_TYPE_VIDEO,
		STREAM_TYPE_AUDIO,
		STREAM_TYPE_SUBTITLE
	}
	public enum MEDIA_PLAYER_EVENT
	{
		PLAYER_EVENT_SEEK_BEGIN = 0,
		PLAYER_EVENT_SEEK_COMPLETE = 1,
		PLAYER_EVENT_SEEK_ERROR = 2,
		PLAYER_EVENT_AUDIO_TRACK_CHANGED = 5,
		PLAYER_EVENT_BUFFER_LOW = 6,
		PLAYER_EVENT_BUFFER_RECOVER = 7,
		PLAYER_EVENT_FREEZE_START = 8,
		PLAYER_EVENT_FREEZE_STOP = 9,
		PLAYER_EVENT_SWITCH_BEGIN = 10,
		PLAYER_EVENT_SWITCH_COMPLETE = 11,
		PLAYER_EVENT_SWITCH_ERROR = 12,
		PLAYER_EVENT_FIRST_DISPLAYED = 13,
		PLAYER_EVENT_REACH_CACHE_FILE_MAX_COUNT = 14,
		PLAYER_EVENT_REACH_CACHE_FILE_MAX_SIZE = 15,
		PLAYER_EVENT_TRY_OPEN_START = 16,
		PLAYER_EVENT_TRY_OPEN_SUCCEED = 17,
		PLAYER_EVENT_TRY_OPEN_FAILED = 18
	}
	public enum PLAYER_PRELOAD_EVENT
	{
		PLAYER_PRELOAD_EVENT_BEGIN,
		PLAYER_PRELOAD_EVENT_COMPLETE,
		PLAYER_PRELOAD_EVENT_ERROR
	}
	public class PlayerStreamInfo
	{
		public MEDIA_STREAM_TYPE streamType;

		public int streamIndex { get; set; }

		public string codecName { get; set; }

		public string language { get; set; }

		public int videoFrameRate { get; set; }

		public int videoBitRate { get; set; }

		public int videoWidth { get; set; }

		public int videoHeight { get; set; }

		public int videoRotation { get; set; }

		public int audioSampleRate { get; set; }

		public int audioChannels { get; set; }

		public int audioBitsPerSample { get; set; }

		public long duration { get; set; }

		public PlayerStreamInfo()
		{
			streamIndex = 0;
			streamType = MEDIA_STREAM_TYPE.STREAM_TYPE_UNKNOWN;
			videoFrameRate = 0;
			videoBitRate = 0;
			videoWidth = 0;
			videoHeight = 0;
			videoRotation = 0;
			audioSampleRate = 0;
			audioChannels = 0;
			audioBitsPerSample = 0;
			duration = 0L;
			codecName = "";
			language = "";
		}
	}
	public class SrcInfo
	{
		public int bitrateInKbps { get; set; }

		public string name { get; set; }
	}
	public enum MEDIA_PLAYER_METADATA_TYPE
	{
		PLAYER_METADATA_TYPE_UNKNOWN,
		PLAYER_METADATA_TYPE_SEI
	}
	public class CacheStatistics
	{
		public long fileSize { get; set; }

		public long cacheSize { get; set; }

		public long downloadSize { get; set; }
	}
	public class PlayerUpdatedInfo : OptionalJsonParse
	{
		public Optional<string> playerId = new Optional<string>();

		public Optional<string> deviceId = new Optional<string>();

		public Optional<CacheStatistics> cacheStatistics = new Optional<CacheStatistics>();

		public override void ToJson(Agora.Rtc.LitJson.JsonWriter writer)
		{
			writer.WriteObjectStart();
			if (playerId.HasValue())
			{
				writer.WritePropertyName("playerId");
				writer.Write(playerId.GetValue());
			}
			if (deviceId.HasValue())
			{
				writer.WritePropertyName("deviceId");
				writer.Write(deviceId.GetValue());
			}
			if (cacheStatistics.HasValue())
			{
				writer.WritePropertyName("cacheStatistics");
				Agora.Rtc.LitJson.JsonMapper.WriteValue(cacheStatistics.GetValue(), writer, writer_is_private: false, 0);
			}
			writer.WriteObjectEnd();
		}
	}
	public class MediaSource : OptionalJsonParse
	{
		public Optional<bool> isAgoraSource = new Optional<bool>();

		public Optional<bool> isLiveSource = new Optional<bool>();

		public string url { get; set; }

		public string uri { get; set; }

		public long startPos { get; set; }

		public bool autoPlay { get; set; }

		public bool enableCache { get; set; }

		public IMediaPlayerCustomDataProvider provider { get; set; }

		public MediaSource()
		{
			url = "";
			uri = "";
			startPos = 0L;
			autoPlay = true;
			enableCache = false;
			provider = null;
		}

		public override void ToJson(Agora.Rtc.LitJson.JsonWriter writer)
		{
			writer.WriteObjectStart();
			writer.WritePropertyName("url");
			writer.Write(url);
			writer.WritePropertyName("uri");
			writer.Write(uri);
			writer.WritePropertyName("startPos");
			writer.Write(startPos);
			writer.WritePropertyName("autoPlay");
			writer.Write(autoPlay);
			writer.WritePropertyName("enableCache");
			writer.Write(enableCache);
			if (isAgoraSource.HasValue())
			{
				writer.WritePropertyName("isAgoraSource");
				writer.Write(isAgoraSource.GetValue());
			}
			if (isLiveSource.HasValue())
			{
				writer.WritePropertyName("isLiveSource");
				writer.Write(isLiveSource.GetValue());
			}
			writer.WriteObjectEnd();
		}
	}
	public enum OBSERVER_MODE
	{
		RAW_DATA,
		INTPTR
	}
	public struct VideoFrameBufferConfig
	{
		public VIDEO_SOURCE_TYPE type;

		public uint id;

		public string key;
	}
	public enum VIDEO_OBSERVER_FRAME_TYPE
	{
		FRAME_TYPE_YUV420,
		FRAME_TYPE_YUV422,
		FRAME_TYPE_RGBA,
		FRAME_TYPE_BGRA
	}
	public class LogConfig
	{
		public string filePath { get; set; }

		public uint fileSizeInKB { get; set; }

		public LOG_LEVEL level { get; set; }

		public LogConfig()
		{
			filePath = "";
			fileSizeInKB = 0u;
			level = LOG_LEVEL.LOG_LEVEL_INFO;
		}

		public LogConfig(string filePath, uint fileSize = 1024u, LOG_LEVEL level = LOG_LEVEL.LOG_LEVEL_INFO)
		{
			this.filePath = filePath;
			fileSizeInKB = 0u;
			this.level = level;
		}
	}
	[Flags]
	public enum LOG_LEVEL
	{
		LOG_LEVEL_NONE = 0,
		LOG_LEVEL_INFO = 1,
		LOG_LEVEL_WARN = 2,
		LOG_LEVEL_ERROR = 4,
		LOG_LEVEL_FATAL = 8
	}
	public enum AUDIO_MIXING_DUAL_MONO_MODE
	{
		AUDIO_MIXING_DUAL_MONO_AUTO,
		AUDIO_MIXING_DUAL_MONO_L,
		AUDIO_MIXING_DUAL_MONO_R,
		AUDIO_MIXING_DUAL_MONO_MIX
	}
	public enum RHYTHM_PLAYER_STATE_TYPE
	{
		RHYTHM_PLAYER_STATE_IDLE = 810,
		RHYTHM_PLAYER_STATE_OPENING,
		RHYTHM_PLAYER_STATE_DECODING,
		RHYTHM_PLAYER_STATE_PLAYING,
		RHYTHM_PLAYER_STATE_FAILED
	}
	public enum RHYTHM_PLAYER_ERROR_TYPE
	{
		RHYTHM_PLAYER_ERROR_OK = 0,
		RHYTHM_PLAYER_ERROR_FAILED = 1,
		RHYTHM_PLAYER_ERROR_CAN_NOT_OPEN = 801,
		RHYTHM_PLAYER_ERROR_CAN_NOT_PLAY = 802,
		RHYTHM_PLAYER_ERROR_FILE_OVER_DURATION_LIMIT = 803
	}
	public class AgoraRhythmPlayerConfig
	{
		public int beatsPerMeasure { get; set; }

		public int beatsPerMinute { get; set; }

		public AgoraRhythmPlayerConfig()
		{
			beatsPerMeasure = 4;
			beatsPerMinute = 60;
		}
	}
	public enum MEDIA_DEVICE_TYPE
	{
		UNKNOWN_AUDIO_DEVICE = -1,
		AUDIO_PLAYOUT_DEVICE,
		AUDIO_RECORDING_DEVICE,
		VIDEO_RENDER_DEVICE,
		VIDEO_CAPTURE_DEVICE,
		AUDIO_APPLICATION_PLAYOUT_DEVICE
	}
	public enum AUDIO_MIXING_STATE_TYPE
	{
		AUDIO_MIXING_STATE_PLAYING = 710,
		AUDIO_MIXING_STATE_PAUSED = 711,
		AUDIO_MIXING_STATE_STOPPED = 713,
		AUDIO_MIXING_STATE_FAILED = 714
	}
	public enum AUDIO_MIXING_REASON_TYPE
	{
		AUDIO_MIXING_REASON_CAN_NOT_OPEN = 701,
		AUDIO_MIXING_REASON_TOO_FREQUENT_CALL = 702,
		AUDIO_MIXING_REASON_INTERRUPTED_EOF = 703,
		AUDIO_MIXING_REASON_ONE_LOOP_COMPLETED = 721,
		AUDIO_MIXING_REASON_ALL_LOOPS_COMPLETED = 723,
		AUDIO_MIXING_REASON_STOPPED_BY_USER = 724,
		AUDIO_MIXING_REASON_OK = 0
	}
	public enum INJECT_STREAM_STATUS
	{
		INJECT_STREAM_STATUS_START_SUCCESS,
		INJECT_STREAM_STATUS_START_ALREADY_EXISTS,
		INJECT_STREAM_STATUS_START_UNAUTHORIZED,
		INJECT_STREAM_STATUS_START_TIMEDOUT,
		INJECT_STREAM_STATUS_START_FAILED,
		INJECT_STREAM_STATUS_STOP_SUCCESS,
		INJECT_STREAM_STATUS_STOP_NOT_FOUND,
		INJECT_STREAM_STATUS_STOP_UNAUTHORIZED,
		INJECT_STREAM_STATUS_STOP_TIMEDOUT,
		INJECT_STREAM_STATUS_STOP_FAILED,
		INJECT_STREAM_STATUS_BROKEN
	}
	public enum AUDIO_EQUALIZATION_BAND_FREQUENCY
	{
		AUDIO_EQUALIZATION_BAND_31,
		AUDIO_EQUALIZATION_BAND_62,
		AUDIO_EQUALIZATION_BAND_125,
		AUDIO_EQUALIZATION_BAND_250,
		AUDIO_EQUALIZATION_BAND_500,
		AUDIO_EQUALIZATION_BAND_1K,
		AUDIO_EQUALIZATION_BAND_2K,
		AUDIO_EQUALIZATION_BAND_4K,
		AUDIO_EQUALIZATION_BAND_8K,
		AUDIO_EQUALIZATION_BAND_16K
	}
	public enum AUDIO_REVERB_TYPE
	{
		AUDIO_REVERB_DRY_LEVEL,
		AUDIO_REVERB_WET_LEVEL,
		AUDIO_REVERB_ROOM_SIZE,
		AUDIO_REVERB_WET_DELAY,
		AUDIO_REVERB_STRENGTH
	}
	public enum STREAM_FALLBACK_OPTIONS
	{
		STREAM_FALLBACK_OPTION_DISABLED,
		STREAM_FALLBACK_OPTION_VIDEO_STREAM_LOW,
		STREAM_FALLBACK_OPTION_AUDIO_ONLY
	}
	public enum PRIORITY_TYPE
	{
		PRIORITY_HIGH = 50,
		PRIORITY_NORMAL = 100
	}
	public class LocalVideoStats
	{
		public uint uid { get; set; }

		public int sentBitrate { get; set; }

		public int sentFrameRate { get; set; }

		public int captureFrameRate { get; set; }

		public int captureFrameWidth { get; set; }

		public int captureFrameHeight { get; set; }

		public int regulatedCaptureFrameRate { get; set; }

		public int regulatedCaptureFrameWidth { get; set; }

		public int regulatedCaptureFrameHeight { get; set; }

		public int encoderOutputFrameRate { get; set; }

		public int encodedFrameWidth { get; set; }

		public int encodedFrameHeight { get; set; }

		public int rendererOutputFrameRate { get; set; }

		public int targetBitrate { get; set; }

		public int targetFrameRate { get; set; }

		public QUALITY_ADAPT_INDICATION qualityAdaptIndication { get; set; }

		public int encodedBitrate { get; set; }

		public int encodedFrameCount { get; set; }

		public VIDEO_CODEC_TYPE codecType { get; set; }

		public ushort txPacketLossRate { get; set; }

		public CAPTURE_BRIGHTNESS_LEVEL_TYPE captureBrightnessLevel { get; set; }
	}
	public class RemoteVideoStats
	{
		public uint uid { get; set; }

		[Obsolete]
		public int delay { get; set; }

		public int width { get; set; }

		public int height { get; set; }

		public int receivedBitrate { get; set; }

		public int decoderOutputFrameRate { get; set; }

		public int rendererOutputFrameRate { get; set; }

		public int frameLossRate { get; set; }

		public int packetLossRate { get; set; }

		public VIDEO_STREAM_TYPE rxStreamType { get; set; }

		public int totalFrozenTime { get; set; }

		public int frozenRate { get; set; }

		public int avSyncTimeMs { get; set; }

		public int totalActiveTime { get; set; }

		public int publishDuration { get; set; }

		public int superResolutionType { get; set; }
	}
	public class Region
	{
		public uint uid { get; set; }

		public double x { get; set; }

		public double y { get; set; }

		public double width { get; set; }

		public double height { get; set; }

		public int zOrder { get; set; }

		public double alpha { get; set; }

		public RENDER_MODE_TYPE renderMode { get; set; }

		public Region()
		{
			uid = 0u;
			x = 0.0;
			y = 0.0;
			width = 0.0;
			height = 0.0;
			zOrder = 0;
			alpha = 1.0;
			renderMode = RENDER_MODE_TYPE.RENDER_MODE_HIDDEN;
		}
	}
	public class VideoCompositingLayout
	{
		public int canvasWidth { get; set; }

		public int canvasHeight { get; set; }

		public string backgroundColor { get; set; }

		public Region[] regions { get; set; }

		public int regionCount { get; set; }

		public string appData { get; set; }

		public int appDataLength { get; set; }

		public VideoCompositingLayout()
		{
			canvasWidth = 0;
			canvasHeight = 0;
			backgroundColor = "";
			regions = new Region[0];
			regionCount = 0;
			appData = "";
			appDataLength = 0;
		}
	}
	public class InjectStreamConfig
	{
		public int width { get; set; }

		public int height { get; set; }

		public int videoGop { get; set; }

		public int videoFramerate { get; set; }

		public int videoBitrate { get; set; }

		public AUDIO_SAMPLE_RATE_TYPE audioSampleRate { get; set; }

		public int audioBitrate { get; set; }

		public int audioChannels { get; set; }

		public InjectStreamConfig()
		{
			width = 0;
			height = 0;
			videoGop = 30;
			videoFramerate = 15;
			videoBitrate = 400;
			audioSampleRate = AUDIO_SAMPLE_RATE_TYPE.AUDIO_SAMPLE_RATE_48000;
			audioBitrate = 48;
			audioChannels = 1;
		}

		public InjectStreamConfig(int width, int height, int videoGop, int videoFramerate, int videoBitrate, AUDIO_SAMPLE_RATE_TYPE audioSampleRate, int audioBitrate, int audioChannels)
		{
			this.width = width;
			this.height = height;
			this.videoGop = videoGop;
			this.videoFramerate = videoFramerate;
			this.videoBitrate = videoBitrate;
			this.audioSampleRate = audioSampleRate;
			this.audioBitrate = audioBitrate;
			this.audioChannels = audioChannels;
		}
	}
	public enum RTMP_STREAM_LIFE_CYCLE_TYPE
	{
		RTMP_STREAM_LIFE_CYCLE_BIND2CHANNEL = 1,
		RTMP_STREAM_LIFE_CYCLE_BIND2OWNER
	}
	public class PublisherConfiguration
	{
		public int width { get; set; }

		public int height { get; set; }

		public int framerate { get; set; }

		public int bitrate { get; set; }

		public int defaultLayout { get; set; }

		public int lifecycle { get; set; }

		public bool owner { get; set; }

		public int injectStreamWidth { get; set; }

		public int injectStreamHeight { get; set; }

		public string injectStreamUrl { get; set; }

		public string publishUrl { get; set; }

		public string rawStreamUrl { get; set; }

		public string extraInfo { get; set; }

		public PublisherConfiguration()
		{
			width = 640;
			height = 360;
			framerate = 15;
			bitrate = 500;
			defaultLayout = 1;
			lifecycle = 1;
			owner = true;
			injectStreamWidth = 0;
			injectStreamHeight = 0;
			injectStreamUrl = "";
			publishUrl = "";
			rawStreamUrl = "";
			extraInfo = "";
		}
	}
	public class AudioTrackConfig
	{
		public bool enableLocalPlayback { get; set; }

		public AudioTrackConfig()
		{
			enableLocalPlayback = true;
		}
	}
	public enum CAMERA_DIRECTION
	{
		CAMERA_REAR,
		CAMERA_FRONT
	}
	public enum CLOUD_PROXY_TYPE
	{
		NONE_PROXY,
		UDP_PROXY,
		TCP_PROXY
	}
	public class CameraCapturerConfiguration
	{
		public string deviceId { get; set; }

		public VideoFormat format { get; set; }

		public bool followEncodeDimensionRatio { get; set; }

		public CAMERA_DIRECTION cameraDirection { get; set; }

		public CameraCapturerConfiguration()
		{
			deviceId = "";
			cameraDirection = CAMERA_DIRECTION.CAMERA_FRONT;
			format = new VideoFormat();
			followEncodeDimensionRatio = true;
		}

		public CameraCapturerConfiguration(string deviceId, VideoFormat format, CAMERA_DIRECTION cameraDirection, bool followEncodeDimensionRatio)
		{
			this.deviceId = deviceId;
			this.format = format;
			this.cameraDirection = cameraDirection;
			this.followEncodeDimensionRatio = followEncodeDimensionRatio;
		}
	}
	public class ScreenCaptureConfiguration
	{
		public bool isCaptureWindow { get; set; }

		public uint displayId { get; set; }

		public Rectangle screenRect { get; set; }

		public uint windowId { get; set; }

		public ScreenCaptureParameters parameters { get; set; }

		public Rectangle regionRect { get; set; }

		public ScreenCaptureConfiguration()
		{
			isCaptureWindow = false;
			displayId = 0u;
		}
	}
	public class SIZE
	{
		public int width { get; set; }

		public int height { get; set; }

		public SIZE()
		{
			width = 0;
			height = 0;
		}

		public SIZE(int ww, int hh)
		{
			width = ww;
			height = hh;
		}
	}
	public class ThumbImageBuffer
	{
		public byte[] buffer { get; set; }

		public uint length { get; set; }

		public uint width { get; set; }

		public uint height { get; set; }

		public ThumbImageBuffer()
		{
			buffer = new byte[0];
			length = 0u;
			width = 0u;
			height = 0u;
		}
	}
	public enum ScreenCaptureSourceType
	{
		ScreenCaptureSourceType_Unknown = -1,
		ScreenCaptureSourceType_Window,
		ScreenCaptureSourceType_Screen,
		ScreenCaptureSourceType_Custom
	}
	public class ScreenCaptureSourceInfo
	{
		public ScreenCaptureSourceType type { get; set; }

		public ulong sourceId { get; set; }

		public string sourceName { get; set; }

		public ThumbImageBuffer thumbImage { get; set; }

		public ThumbImageBuffer iconImage { get; set; }

		public string processPath { get; set; }

		public string sourceTitle { get; set; }

		public bool primaryMonitor { get; set; }

		public bool isOccluded { get; set; }

		public ScreenCaptureSourceInfo()
		{
			type = ScreenCaptureSourceType.ScreenCaptureSourceType_Unknown;
			sourceId = 0uL;
			sourceName = "";
			processPath = "";
			sourceTitle = "";
			primaryMonitor = false;
			isOccluded = false;
			thumbImage = new ThumbImageBuffer();
			iconImage = new ThumbImageBuffer();
		}
	}
	public class AdvancedAudioOptions : OptionalJsonParse
	{
		public Optional<int> audioProcessingChannels = new Optional<int>();

		public override void ToJson(Agora.Rtc.LitJson.JsonWriter writer)
		{
			writer.WriteObjectStart();
			if (audioProcessingChannels.HasValue())
			{
				writer.WritePropertyName("audioProcessingChannels");
				writer.Write(audioProcessingChannels.GetValue());
			}
			writer.WriteObjectEnd();
		}
	}
	public class ImageTrackOptions
	{
		public string imageUrl { get; set; }

		public int fps { get; set; }

		public ImageTrackOptions()
		{
			imageUrl = "";
			fps = 1;
		}
	}
	public class ChannelMediaOptions : OptionalJsonParse
	{
		public Optional<bool> publishCameraTrack = new Optional<bool>();

		public Optional<bool> publishSecondaryCameraTrack = new Optional<bool>();

		public Optional<bool> publishMicrophoneTrack = new Optional<bool>();

		public Optional<bool> publishScreenCaptureVideo = new Optional<bool>();

		public Optional<bool> publishScreenCaptureAudio = new Optional<bool>();

		public Optional<bool> publishScreenTrack = new Optional<bool>();

		public Optional<bool> publishSecondaryScreenTrack = new Optional<bool>();

		public Optional<bool> publishCustomAudioTrack = new Optional<bool>();

		public Optional<int> publishCustomAudioSourceId = new Optional<int>();

		public Optional<bool> publishCustomAudioTrackEnableAec = new Optional<bool>();

		public Optional<bool> publishDirectCustomAudioTrack = new Optional<bool>();

		public Optional<bool> publishCustomAudioTrackAec = new Optional<bool>();

		public Optional<bool> publishCustomVideoTrack = new Optional<bool>();

		public Optional<bool> publishEncodedVideoTrack = new Optional<bool>();

		public Optional<bool> publishMediaPlayerAudioTrack = new Optional<bool>();

		public Optional<bool> publishMediaPlayerVideoTrack = new Optional<bool>();

		public Optional<bool> publishTrancodedVideoTrack = new Optional<bool>();

		public Optional<bool> autoSubscribeAudio = new Optional<bool>();

		public Optional<bool> autoSubscribeVideo = new Optional<bool>();

		public Optional<bool> enableAudioRecordingOrPlayout = new Optional<bool>();

		public Optional<int> publishMediaPlayerId = new Optional<int>();

		public Optional<CLIENT_ROLE_TYPE> clientRoleType = new Optional<CLIENT_ROLE_TYPE>();

		public Optional<AUDIENCE_LATENCY_LEVEL_TYPE> audienceLatencyLevel = new Optional<AUDIENCE_LATENCY_LEVEL_TYPE>();

		public Optional<VIDEO_STREAM_TYPE> defaultVideoStreamType = new Optional<VIDEO_STREAM_TYPE>();

		public Optional<CHANNEL_PROFILE_TYPE> channelProfile = new Optional<CHANNEL_PROFILE_TYPE>();

		public Optional<int> audioDelayMs = new Optional<int>();

		public Optional<int> mediaPlayerAudioDelayMs = new Optional<int>();

		public Optional<string> token = new Optional<string>();

		public Optional<bool> enableBuiltInMediaEncryption = new Optional<bool>();

		public Optional<bool> publishRhythmPlayerTrack = new Optional<bool>();

		public Optional<bool> isInteractiveAudience = new Optional<bool>();

		public Optional<uint> customVideoTrackId = new Optional<uint>();

		public Optional<bool> isAudioFilterable = new Optional<bool>();

		public override void ToJson(Agora.Rtc.LitJson.JsonWriter writer)
		{
			writer.WriteObjectStart();
			if (publishCameraTrack.HasValue())
			{
				writer.WritePropertyName("publishCameraTrack");
				writer.Write(publishCameraTrack.GetValue());
			}
			if (publishSecondaryCameraTrack.HasValue())
			{
				writer.WritePropertyName("publishSecondaryCameraTrack");
				writer.Write(publishSecondaryCameraTrack.GetValue());
			}
			if (publishMicrophoneTrack.HasValue())
			{
				writer.WritePropertyName("publishMicrophoneTrack");
				writer.Write(publishMicrophoneTrack.GetValue());
			}
			if (publishScreenCaptureVideo.HasValue())
			{
				writer.WritePropertyName("publishScreenCaptureVideo");
				writer.Write(publishScreenCaptureVideo.GetValue());
			}
			if (publishScreenCaptureAudio.HasValue())
			{
				writer.WritePropertyName("publishScreenCaptureAudio");
				writer.Write(publishScreenCaptureAudio.GetValue());
			}
			if (publishScreenTrack.HasValue())
			{
				writer.WritePropertyName("publishScreenTrack");
				writer.Write(publishScreenTrack.GetValue());
			}
			if (publishSecondaryScreenTrack.HasValue())
			{
				writer.WritePropertyName("publishSecondaryScreenTrack");
				writer.Write(publishSecondaryScreenTrack.GetValue());
			}
			if (publishCustomAudioTrack.HasValue())
			{
				writer.WritePropertyName("publishCustomAudioTrack");
				writer.Write(publishCustomAudioTrack.GetValue());
			}
			if (publishCustomAudioSourceId.HasValue())
			{
				writer.WritePropertyName("publishCustomAudioSourceId");
				writer.Write(publishCustomAudioSourceId.GetValue());
			}
			if (publishCustomAudioTrackEnableAec.HasValue())
			{
				writer.WritePropertyName("publishCustomAudioTrackEnableAec");
				writer.Write(publishCustomAudioTrackEnableAec.GetValue());
			}
			if (publishDirectCustomAudioTrack.HasValue())
			{
				writer.WritePropertyName("publishDirectCustomAudioTrack");
				writer.Write(publishDirectCustomAudioTrack.GetValue());
			}
			if (publishCustomAudioTrackAec.HasValue())
			{
				writer.WritePropertyName("publishCustomAudioTrackAec");
				writer.Write(publishCustomAudioTrackAec.GetValue());
			}
			if (publishCustomVideoTrack.HasValue())
			{
				writer.WritePropertyName("publishCustomVideoTrack");
				writer.Write(publishCustomVideoTrack.GetValue());
			}
			if (publishEncodedVideoTrack.HasValue())
			{
				writer.WritePropertyName("publishEncodedVideoTrack");
				writer.Write(publishEncodedVideoTrack.GetValue());
			}
			if (publishMediaPlayerAudioTrack.HasValue())
			{
				writer.WritePropertyName("publishMediaPlayerAudioTrack");
				writer.Write(publishMediaPlayerAudioTrack.GetValue());
			}
			if (publishMediaPlayerVideoTrack.HasValue())
			{
				writer.WritePropertyName("publishMediaPlayerVideoTrack");
				writer.Write(publishMediaPlayerVideoTrack.GetValue());
			}
			if (publishTrancodedVideoTrack.HasValue())
			{
				writer.WritePropertyName("publishTrancodedVideoTrack");
				writer.Write(publishTrancodedVideoTrack.GetValue());
			}
			if (autoSubscribeAudio.HasValue())
			{
				writer.WritePropertyName("autoSubscribeAudio");
				writer.Write(autoSubscribeAudio.GetValue());
			}
			if (autoSubscribeVideo.HasValue())
			{
				writer.WritePropertyName("autoSubscribeVideo");
				writer.Write(autoSubscribeVideo.GetValue());
			}
			if (enableAudioRecordingOrPlayout.HasValue())
			{
				writer.WritePropertyName("enableAudioRecordingOrPlayout");
				writer.Write(enableAudioRecordingOrPlayout.GetValue());
			}
			if (publishMediaPlayerId.HasValue())
			{
				writer.WritePropertyName("publishMediaPlayerId");
				writer.Write(publishMediaPlayerId.GetValue());
			}
			if (clientRoleType.HasValue())
			{
				writer.WritePropertyName("clientRoleType");
				WriteEnum(writer, clientRoleType.GetValue());
			}
			if (audienceLatencyLevel.HasValue())
			{
				writer.WritePropertyName("audienceLatencyLevel");
				WriteEnum(writer, audienceLatencyLevel.GetValue());
			}
			if (defaultVideoStreamType.HasValue())
			{
				writer.WritePropertyName("defaultVideoStreamType");
				WriteEnum(writer, defaultVideoStreamType.GetValue());
			}
			if (channelProfile.HasValue())
			{
				writer.WritePropertyName("channelProfile");
				WriteEnum(writer, channelProfile.GetValue());
			}
			if (audioDelayMs.HasValue())
			{
				writer.WritePropertyName("audioDelayMs");
				writer.Write(audioDelayMs.GetValue());
			}
			if (mediaPlayerAudioDelayMs.HasValue())
			{
				writer.WritePropertyName("xxmediaPlayerAudioDelayMs");
				writer.Write(mediaPlayerAudioDelayMs.GetValue());
			}
			if (token.HasValue())
			{
				writer.WritePropertyName("token");
				writer.Write(token.GetValue());
			}
			if (enableBuiltInMediaEncryption.HasValue())
			{
				writer.WritePropertyName("enableBuiltInMediaEncryption");
				writer.Write(enableBuiltInMediaEncryption.GetValue());
			}
			if (publishRhythmPlayerTrack.HasValue())
			{
				writer.WritePropertyName("publishRhythmPlayerTrack");
				writer.Write(publishRhythmPlayerTrack.GetValue());
			}
			if (isInteractiveAudience.HasValue())
			{
				writer.WritePropertyName("isInteractiveAudience");
				writer.Write(isInteractiveAudience.GetValue());
			}
			if (customVideoTrackId.HasValue())
			{
				writer.WritePropertyName("customVideoTrackId");
				writer.Write(customVideoTrackId.GetValue());
			}
			if (isAudioFilterable.HasValue())
			{
				writer.WritePropertyName("isAudioFilterable");
				writer.Write(isAudioFilterable.GetValue());
			}
			writer.WriteObjectEnd();
		}
	}
	public enum LOCAL_PROXY_MODE
	{
		kConnectivityFirst,
		kLocalOnly
	}
	public enum PROXY_TYPE
	{
		NONE_PROXY_TYPE,
		UDP_PROXY_TYPE,
		TCP_PROXY_TYPE,
		LOCAL_PROXY_TYPE,
		TCP_PROXY_AUTO_FALLBACK_TYPE
	}
	public class LocalAccessPointConfiguration
	{
		public string[] ipList { get; set; }

		public int ipListSize { get; set; }

		public string[] domainList { get; set; }

		public int domainListSize { get; set; }

		public string verifyDomainName { get; set; }

		public LOCAL_PROXY_MODE mode { get; set; }

		public LocalAccessPointConfiguration()
		{
			ipList = new string[0];
			ipListSize = 0;
			domainList = new string[0];
			domainListSize = 0;
			verifyDomainName = "";
			mode = LOCAL_PROXY_MODE.kConnectivityFirst;
		}
	}
	public class LeaveChannelOptions
	{
		public bool stopAudioMixing { get; set; }

		public bool stopAllEffect { get; set; }

		public bool stopMicrophoneRecording { get; set; }

		public LeaveChannelOptions()
		{
			stopAudioMixing = true;
			stopAllEffect = true;
			stopMicrophoneRecording = true;
		}
	}
	public class RtcEngineContext : OptionalJsonParse
	{
		private IRtcEngineEventHandler eventHandler;

		public Optional<THREAD_PRIORITY_TYPE> threadPriority = new Optional<THREAD_PRIORITY_TYPE>();

		public string appId { get; set; }

		public ulong context { get; set; }

		public CHANNEL_PROFILE_TYPE channelProfile { get; set; }

		public AUDIO_SCENARIO_TYPE audioScenario { get; set; }

		public AREA_CODE areaCode { get; set; }

		public LogConfig logConfig { get; set; }

		public bool useExternalEglContext { get; set; }

		public RtcEngineContext()
		{
			eventHandler = null;
			appId = "";
			context = 0uL;
			channelProfile = CHANNEL_PROFILE_TYPE.CHANNEL_PROFILE_LIVE_BROADCASTING;
			audioScenario = AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_DEFAULT;
			areaCode = AREA_CODE.AREA_CODE_GLOB;
			logConfig = new LogConfig();
			useExternalEglContext = false;
		}

		public RtcEngineContext(string appId, ulong context, CHANNEL_PROFILE_TYPE channelProfile, AUDIO_SCENARIO_TYPE audioScenario, AREA_CODE areaCode = AREA_CODE.AREA_CODE_CN, LogConfig logConfig = null)
		{
			this.appId = appId;
			this.context = context;
			this.channelProfile = channelProfile;
			this.audioScenario = audioScenario;
			this.areaCode = areaCode;
			this.logConfig = logConfig ?? new LogConfig();
		}

		public override void ToJson(Agora.Rtc.LitJson.JsonWriter writer)
		{
			writer.WriteObjectStart();
			writer.WritePropertyName("appId");
			writer.Write(appId);
			writer.WritePropertyName("context");
			writer.Write(context);
			writer.WritePropertyName("channelProfile");
			WriteEnum(writer, channelProfile);
			writer.WritePropertyName("audioScenario");
			WriteEnum(writer, audioScenario);
			writer.WritePropertyName("areaCode");
			WriteEnum(writer, areaCode);
			writer.WritePropertyName("logConfig");
			Agora.Rtc.LitJson.JsonMapper.WriteValue(logConfig, writer, writer_is_private: false, 0);
			if (threadPriority.HasValue())
			{
				writer.WritePropertyName("threadPriority");
				WriteEnum(writer, threadPriority.GetValue());
			}
			writer.WritePropertyName("useExternalEglContext");
			writer.Write(useExternalEglContext);
			writer.WriteObjectEnd();
		}
	}
	public enum METADATA_TYPE
	{
		UNKNOWN_METADATA = -1,
		VIDEO_METADATA
	}
	public enum MAX_METADATA_SIZE_TYPE
	{
		MAX_METADATA_SIZE_IN_BYTE = 0x400
	}
	public class Metadata
	{
		public uint uid;

		public uint size;

		private ulong _buffer;

		public long timeStampMs;

		public IntPtr buffer
		{
			get
			{
				return (IntPtr)(long)_buffer;
			}
			set
			{
				_buffer = (ulong)(long)value;
			}
		}
	}
	public enum DIRECT_CDN_STREAMING_ERROR
	{
		DIRECT_CDN_STREAMING_ERROR_OK,
		DIRECT_CDN_STREAMING_ERROR_FAILED,
		DIRECT_CDN_STREAMING_ERROR_AUDIO_PUBLICATION,
		DIRECT_CDN_STREAMING_ERROR_VIDEO_PUBLICATION,
		DIRECT_CDN_STREAMING_ERROR_NET_CONNECT,
		DIRECT_CDN_STREAMING_ERROR_BAD_NAME
	}
	public enum DIRECT_CDN_STREAMING_STATE
	{
		DIRECT_CDN_STREAMING_STATE_IDLE,
		DIRECT_CDN_STREAMING_STATE_RUNNING,
		DIRECT_CDN_STREAMING_STATE_STOPPED,
		DIRECT_CDN_STREAMING_STATE_FAILED,
		DIRECT_CDN_STREAMING_STATE_RECOVERING
	}
	public class DirectCdnStreamingStats
	{
		public int videoWidth { get; set; }

		public int videoHeight { get; set; }

		public int fps { get; set; }

		public int videoBitrate { get; set; }

		public int audioBitrate { get; set; }
	}
	public class DirectCdnStreamingMediaOptions : OptionalJsonParse
	{
		public Optional<bool> publishCameraTrack = new Optional<bool>();

		public Optional<bool> publishMicrophoneTrack = new Optional<bool>();

		public Optional<bool> publishCustomAudioTrack = new Optional<bool>();

		public Optional<bool> publishCustomVideoTrack = new Optional<bool>();

		public Optional<bool> publishMediaPlayerAudioTrack = new Optional<bool>();

		public Optional<int> publishMediaPlayerId = new Optional<int>();

		public Optional<uint> customVideoTrackId = new Optional<uint>();

		private void SetAll(ref DirectCdnStreamingMediaOptions change)
		{
			publishCameraTrack = change.publishCameraTrack;
			publishMicrophoneTrack = change.publishMicrophoneTrack;
			publishCustomAudioTrack = change.publishCustomAudioTrack;
			publishCustomVideoTrack = change.publishCustomVideoTrack;
			publishMediaPlayerAudioTrack = change.publishMediaPlayerAudioTrack;
			publishMediaPlayerId = change.publishMediaPlayerId;
			customVideoTrackId = change.customVideoTrackId;
		}

		public override void ToJson(Agora.Rtc.LitJson.JsonWriter writer)
		{
			writer.WriteObjectStart();
			if (publishCameraTrack.HasValue())
			{
				writer.WritePropertyName("publishCameraTrack");
				writer.Write(publishCameraTrack.GetValue());
			}
			if (publishMicrophoneTrack.HasValue())
			{
				writer.WritePropertyName("publishMicrophoneTrack");
				writer.Write(publishMicrophoneTrack.GetValue());
			}
			if (publishCustomAudioTrack.HasValue())
			{
				writer.WritePropertyName("publishCustomAudioTrack");
				writer.Write(publishCustomAudioTrack.GetValue());
			}
			if (publishCustomVideoTrack.HasValue())
			{
				writer.WritePropertyName("publishCustomVideoTrack");
				writer.Write(publishCustomVideoTrack.GetValue());
			}
			if (publishMediaPlayerAudioTrack.HasValue())
			{
				writer.WritePropertyName("publishMediaPlayerAudioTrack");
				writer.Write(publishMediaPlayerAudioTrack.GetValue());
			}
			if (publishMediaPlayerId.HasValue())
			{
				writer.WritePropertyName("publishMediaPlayerId");
				writer.Write(publishMediaPlayerId.GetValue());
			}
			if (customVideoTrackId.HasValue())
			{
				writer.WritePropertyName("customVideoTrackId");
				writer.Write(customVideoTrackId.GetValue());
			}
			writer.WriteObjectEnd();
		}
	}
	public enum QUALITY_REPORT_FORMAT_TYPE
	{
		QUALITY_REPORT_JSON,
		QUALITY_REPORT_HTML
	}
	public enum MEDIA_DEVICE_STATE_TYPE
	{
		MEDIA_DEVICE_STATE_IDLE = 0,
		MEDIA_DEVICE_STATE_ACTIVE = 1,
		MEDIA_DEVICE_STATE_DISABLED = 2,
		MEDIA_DEVICE_STATE_NOT_PRESENT = 4,
		MEDIA_DEVICE_STATE_UNPLUGGED = 8
	}
	public enum VIDEO_PROFILE_TYPE
	{
		VIDEO_PROFILE_LANDSCAPE_120P = 0,
		VIDEO_PROFILE_LANDSCAPE_120P_3 = 2,
		VIDEO_PROFILE_LANDSCAPE_180P = 10,
		VIDEO_PROFILE_LANDSCAPE_180P_3 = 12,
		VIDEO_PROFILE_LANDSCAPE_180P_4 = 13,
		VIDEO_PROFILE_LANDSCAPE_240P = 20,
		VIDEO_PROFILE_LANDSCAPE_240P_3 = 22,
		VIDEO_PROFILE_LANDSCAPE_240P_4 = 23,
		VIDEO_PROFILE_LANDSCAPE_360P = 30,
		VIDEO_PROFILE_LANDSCAPE_360P_3 = 32,
		VIDEO_PROFILE_LANDSCAPE_360P_4 = 33,
		VIDEO_PROFILE_LANDSCAPE_360P_6 = 35,
		VIDEO_PROFILE_LANDSCAPE_360P_7 = 36,
		VIDEO_PROFILE_LANDSCAPE_360P_8 = 37,
		VIDEO_PROFILE_LANDSCAPE_360P_9 = 38,
		VIDEO_PROFILE_LANDSCAPE_360P_10 = 39,
		VIDEO_PROFILE_LANDSCAPE_360P_11 = 100,
		VIDEO_PROFILE_LANDSCAPE_480P = 40,
		VIDEO_PROFILE_LANDSCAPE_480P_3 = 42,
		VIDEO_PROFILE_LANDSCAPE_480P_4 = 43,
		VIDEO_PROFILE_LANDSCAPE_480P_6 = 45,
		VIDEO_PROFILE_LANDSCAPE_480P_8 = 47,
		VIDEO_PROFILE_LANDSCAPE_480P_9 = 48,
		VIDEO_PROFILE_LANDSCAPE_480P_10 = 49,
		VIDEO_PROFILE_LANDSCAPE_720P = 50,
		VIDEO_PROFILE_LANDSCAPE_720P_3 = 52,
		VIDEO_PROFILE_LANDSCAPE_720P_5 = 54,
		VIDEO_PROFILE_LANDSCAPE_720P_6 = 55,
		VIDEO_PROFILE_LANDSCAPE_1080P = 60,
		VIDEO_PROFILE_LANDSCAPE_1080P_3 = 62,
		VIDEO_PROFILE_LANDSCAPE_1080P_5 = 64,
		VIDEO_PROFILE_LANDSCAPE_1440P = 66,
		VIDEO_PROFILE_LANDSCAPE_1440P_2 = 67,
		VIDEO_PROFILE_LANDSCAPE_4K = 70,
		VIDEO_PROFILE_LANDSCAPE_4K_3 = 72,
		VIDEO_PROFILE_PORTRAIT_120P = 1000,
		VIDEO_PROFILE_PORTRAIT_120P_3 = 1002,
		VIDEO_PROFILE_PORTRAIT_180P = 1010,
		VIDEO_PROFILE_PORTRAIT_180P_3 = 1012,
		VIDEO_PROFILE_PORTRAIT_180P_4 = 1013,
		VIDEO_PROFILE_PORTRAIT_240P = 1020,
		VIDEO_PROFILE_PORTRAIT_240P_3 = 1022,
		VIDEO_PROFILE_PORTRAIT_240P_4 = 1023,
		VIDEO_PROFILE_PORTRAIT_360P = 1030,
		VIDEO_PROFILE_PORTRAIT_360P_3 = 1032,
		VIDEO_PROFILE_PORTRAIT_360P_4 = 1033,
		VIDEO_PROFILE_PORTRAIT_360P_6 = 1035,
		VIDEO_PROFILE_PORTRAIT_360P_7 = 1036,
		VIDEO_PROFILE_PORTRAIT_360P_8 = 1037,
		VIDEO_PROFILE_PORTRAIT_360P_9 = 1038,
		VIDEO_PROFILE_PORTRAIT_360P_10 = 1039,
		VIDEO_PROFILE_PORTRAIT_360P_11 = 1100,
		VIDEO_PROFILE_PORTRAIT_480P = 1040,
		VIDEO_PROFILE_PORTRAIT_480P_3 = 1042,
		VIDEO_PROFILE_PORTRAIT_480P_4 = 1043,
		VIDEO_PROFILE_PORTRAIT_480P_6 = 1045,
		VIDEO_PROFILE_PORTRAIT_480P_8 = 1047,
		VIDEO_PROFILE_PORTRAIT_480P_9 = 1048,
		VIDEO_PROFILE_PORTRAIT_480P_10 = 1049,
		VIDEO_PROFILE_PORTRAIT_720P = 1050,
		VIDEO_PROFILE_PORTRAIT_720P_3 = 1052,
		VIDEO_PROFILE_PORTRAIT_720P_5 = 1054,
		VIDEO_PROFILE_PORTRAIT_720P_6 = 1055,
		VIDEO_PROFILE_PORTRAIT_1080P = 1060,
		VIDEO_PROFILE_PORTRAIT_1080P_3 = 1062,
		VIDEO_PROFILE_PORTRAIT_1080P_5 = 1064,
		VIDEO_PROFILE_PORTRAIT_1440P = 1066,
		VIDEO_PROFILE_PORTRAIT_1440P_2 = 1067,
		VIDEO_PROFILE_PORTRAIT_4K = 1070,
		VIDEO_PROFILE_PORTRAIT_4K_3 = 1072,
		VIDEO_PROFILE_DEFAULT = 30
	}
	public class RtcConnection
	{
		public string channelId { get; set; }

		public uint localUid { get; set; }

		public RtcConnection()
		{
		}

		public RtcConnection(string channelId, uint localUid)
		{
			this.channelId = channelId;
			this.localUid = localUid;
		}
	}
	public enum SAE_CONNECTION_STATE_TYPE
	{
		SAE_CONNECTION_STATE_CONNECTING,
		SAE_CONNECTION_STATE_CONNECTED,
		SAE_CONNECTION_STATE_DISCONNECTED,
		SAE_CONNECTION_STATE_RECONNECTING,
		SAE_CONNECTION_STATE_RECONNECTED
	}
	public enum SAE_CONNECTION_CHANGED_REASON_TYPE
	{
		SAE_CONNECTION_CHANGED_DEFAULT,
		SAE_CONNECTION_CHANGED_CONNECTING,
		SAE_CONNECTION_CHANGED_CREATE_ROOM_FAIL,
		SAE_CONNECTION_CHANGED_RTM_DISCONNECT,
		SAE_CONNECTION_CHANGED_RTM_ABORTED,
		SAE_CONNECTION_CHANGED_LOST_SYNC
	}
	public enum AUDIO_RANGE_MODE_TYPE
	{
		AUDIO_RANGE_MODE_WORLD,
		AUDIO_RANGE_MODE_TEAM
	}
	public class RemoteVoicePositionInfo
	{
		public float[] position { get; set; }

		public float[] forward { get; set; }

		public RemoteVoicePositionInfo(float[] position, float[] forward)
		{
			this.position = position;
			this.forward = forward;
		}
	}
	public enum SAE_DEPLOY_REGION
	{
		SAE_DEPLOY_REGION_CN = 1,
		SAE_DEPLOY_REGION_NA = 2,
		SAE_DEPLOY_REGION_EU = 4,
		SAE_DEPLOY_REGION_AS = 8
	}
	public class LocalSpatialAudioConfig
	{
		public IRtcEngine rtcEngine { get; set; }

		public LocalSpatialAudioConfig()
		{
			rtcEngine = null;
		}
	}
	internal class TextureManager : MonoBehaviour
	{
		private int _videoPixelWidth;

		private int _videoPixelHeight;

		private uint _uid;

		private string _channelId = "";

		private VIDEO_SOURCE_TYPE _sourceType;

		private bool _needResize;

		private bool _needUpdateInfo = true;

		private bool isFresh;

		private IVideoStreamManager _videoStreamManager;

		private IrisVideoFrame _cachedVideoFrame;

		private int _refCount;

		private bool _canAttach;

		public int Width;

		public int Height;

		private Texture2D _texture;

		public Texture2D Texture
		{
			get
			{
				_refCount++;
				AgoraLog.Log("TextureManager refCount Add, Now is: " + _refCount);
				return _texture;
			}
		}

		private void Awake()
		{
			InitTexture();
			InitIrisVideoFrame();
		}

		private void Update()
		{
			if (!_needUpdateInfo)
			{
				ReFreshTexture();
			}
		}

		private void OnDestroy()
		{
			AgoraLog.Log($"VideoSurface channel: ${_channelId}, user:{_uid} destroy");
			if (_videoStreamManager != null)
			{
				_videoStreamManager.DisableVideoFrameBuffer(_sourceType, _uid, _channelId);
				_videoStreamManager.Dispose();
				_videoStreamManager = null;
			}
			FreeMemory();
			DestroyTexture();
		}

		private void InitTexture()
		{
			try
			{
				_texture = new Texture2D(_videoPixelWidth, _videoPixelHeight, TextureFormat.RGBA32, mipChain: false);
				_texture.Apply();
			}
			catch (Exception ex)
			{
				AgoraLog.LogError("Exception e = " + ex);
			}
		}

		private void InitIrisVideoFrame()
		{
			_cachedVideoFrame = new IrisVideoFrame
			{
				type = VIDEO_OBSERVER_FRAME_TYPE.FRAME_TYPE_RGBA,
				y_stride = _videoPixelWidth * 4,
				height = _videoPixelHeight,
				width = _videoPixelWidth,
				y_buffer = Marshal.AllocHGlobal(_videoPixelWidth * _videoPixelHeight * 4)
			};
		}

		internal int GetRefCount()
		{
			return _refCount;
		}

		internal bool CanTextureAttach()
		{
			return _canAttach;
		}

		internal void EnableVideoFrameWithIdentity()
		{
			RtcEngineImpl rtcEngineImpl = RtcEngineImpl.Get();
			if (rtcEngineImpl != null)
			{
				if (_videoStreamManager == null)
				{
					_videoStreamManager = rtcEngineImpl.GetVideoStreamManager();
				}
				if (_videoStreamManager != null)
				{
					_videoStreamManager.EnableVideoFrameBuffer(_sourceType, _uid, _channelId);
					_needUpdateInfo = false;
				}
			}
		}

		internal void ReFreshTexture()
		{
			IRIS_VIDEO_PROCESS_ERR videoFrame = _videoStreamManager.GetVideoFrame(ref _cachedVideoFrame, ref isFresh, _sourceType, _uid, _channelId);
			Width = _cachedVideoFrame.width;
			Height = _cachedVideoFrame.height;
			switch (videoFrame)
			{
			case IRIS_VIDEO_PROCESS_ERR.ERR_NULL_POINTER:
			case IRIS_VIDEO_PROCESS_ERR.ERR_BUFFER_EMPTY:
				_canAttach = false;
				return;
			case IRIS_VIDEO_PROCESS_ERR.ERR_SIZE_NOT_MATCHING:
				_needResize = true;
				_videoPixelWidth = _cachedVideoFrame.width;
				_videoPixelHeight = _cachedVideoFrame.height;
				FreeMemory();
				_cachedVideoFrame.type = VIDEO_OBSERVER_FRAME_TYPE.FRAME_TYPE_RGBA;
				_cachedVideoFrame.y_stride = _videoPixelWidth * 4;
				_cachedVideoFrame.height = _videoPixelHeight;
				_cachedVideoFrame.width = _videoPixelWidth;
				_cachedVideoFrame.y_buffer = Marshal.AllocHGlobal(_videoPixelWidth * _videoPixelHeight * 4);
				break;
			default:
				_canAttach = true;
				break;
			}
			if (!isFresh)
			{
				return;
			}
			try
			{
				if (_needResize)
				{
					_texture.Resize(_videoPixelWidth, _videoPixelHeight);
					_texture.Apply();
					_needResize = false;
				}
				else
				{
					_texture.LoadRawTextureData(_cachedVideoFrame.y_buffer, _videoPixelWidth * _videoPixelHeight * 4);
					_texture.Apply();
				}
			}
			catch (Exception ex)
			{
				AgoraLog.Log("Exception e = " + ex);
			}
		}

		internal void SetVideoStreamIdentity(uint uid = 0u, string channelId = "", VIDEO_SOURCE_TYPE source_type = VIDEO_SOURCE_TYPE.VIDEO_SOURCE_CAMERA_PRIMARY)
		{
			_uid = uid;
			_channelId = channelId;
			_sourceType = source_type;
		}

		internal void Detach()
		{
			if (_refCount > 0)
			{
				_refCount--;
				AgoraLog.Log("TextureManager refCount Minus, Now is: " + _refCount);
			}
		}

		private void DestroyTexture()
		{
			if (_texture != null)
			{
				UnityEngine.Object.Destroy(_texture);
				_texture = null;
			}
		}

		private void FreeMemory()
		{
			if (_cachedVideoFrame.y_buffer != IntPtr.Zero)
			{
				Marshal.FreeHGlobal(_cachedVideoFrame.y_buffer);
			}
		}
	}
	internal abstract class IVideoStreamManager : IDisposable
	{
		internal abstract int EnableVideoFrameBuffer(VIDEO_SOURCE_TYPE sourceType, uint uid, string key = "");

		internal abstract void DisableVideoFrameBuffer(VIDEO_SOURCE_TYPE sourceType, uint uid = 0u, string key = "");

		internal abstract IRIS_VIDEO_PROCESS_ERR GetVideoFrame(ref IrisVideoFrame video_frame, ref bool is_new_frame, VIDEO_SOURCE_TYPE sourceType, uint uid, string key = "");

		public abstract void Dispose();
	}
	internal class VideoStreamManager : IVideoStreamManager
	{
		private RtcEngineImpl _agoraRtcEngine;

		private IrisCVideoFrameBufferNative _videoFrameBuffer;

		private IntPtr _irisVideoFrameBufferHandle = IntPtr.Zero;

		private IrisVideoFrameBufferConfig _videoFrameBufferConfig;

		private bool _disposed;

		public VideoStreamManager(RtcEngineImpl agoraRtcEngine)
		{
			_agoraRtcEngine = agoraRtcEngine;
			_agoraRtcEngine.OnRtcEngineImpleWillDispose += RtcEngineImplWillDispose;
			_videoFrameBufferConfig = default(IrisVideoFrameBufferConfig);
		}

		~VideoStreamManager()
		{
			Dispose();
		}

		internal override int EnableVideoFrameBuffer(VIDEO_SOURCE_TYPE sourceType, uint uid, string channel_id = "")
		{
			if (_agoraRtcEngine == null)
			{
				AgoraLog.LogError($"EnableVideoFrameCache ret: ${ERROR_CODE_TYPE.ERR_NOT_INITIALIZED}");
				return 7;
			}
			IntPtr nativeHandler = _agoraRtcEngine.GetNativeHandler();
			IntPtr videoFrameBufferManager = _agoraRtcEngine.GetVideoFrameBufferManager();
			if (nativeHandler != IntPtr.Zero && _irisVideoFrameBufferHandle == IntPtr.Zero)
			{
				_videoFrameBuffer = new IrisCVideoFrameBufferNative
				{
					type = 2,
					OnVideoFrameReceived = IntPtr.Zero,
					bytes_per_row_alignment = 2
				};
				_videoFrameBufferConfig.type = (int)sourceType;
				_videoFrameBufferConfig.id = uid;
				_videoFrameBufferConfig.key = channel_id;
				_irisVideoFrameBufferHandle = AgoraRtcNative.EnableVideoFrameBufferByConfig(videoFrameBufferManager, ref _videoFrameBuffer, ref _videoFrameBufferConfig);
				AgoraLog.Log("EnableVideoFrameBufferByConfig");
				return 0;
			}
			return 7;
		}

		internal override void DisableVideoFrameBuffer(VIDEO_SOURCE_TYPE sourceType, uint uid = 0u, string key = "")
		{
			if (_agoraRtcEngine == null)
			{
				AgoraLog.LogError($"EnableVideoFrameCache ret: ${ERROR_CODE_TYPE.ERR_NOT_INITIALIZED}");
				return;
			}
			IntPtr nativeHandler = _agoraRtcEngine.GetNativeHandler();
			IntPtr videoFrameBufferManager = _agoraRtcEngine.GetVideoFrameBufferManager();
			if (nativeHandler != IntPtr.Zero && _irisVideoFrameBufferHandle != IntPtr.Zero)
			{
				_videoFrameBufferConfig.type = (int)sourceType;
				_videoFrameBufferConfig.id = uid;
				_videoFrameBufferConfig.key = key;
				AgoraRtcNative.DisableVideoFrameBufferByConfig(videoFrameBufferManager, ref _videoFrameBufferConfig, _irisVideoFrameBufferHandle);
				AgoraLog.Log("DisableVideoFrameBufferByConfig");
				_irisVideoFrameBufferHandle = IntPtr.Zero;
			}
		}

		internal override IRIS_VIDEO_PROCESS_ERR GetVideoFrame(ref IrisVideoFrame video_frame, ref bool is_new_frame, VIDEO_SOURCE_TYPE sourceType, uint uid, string key = "")
		{
			if (_agoraRtcEngine == null)
			{
				AgoraLog.LogError($"EnableVideoFrameCache ret: ${ERROR_CODE_TYPE.ERR_NOT_INITIALIZED}");
				return IRIS_VIDEO_PROCESS_ERR.ERR_NULL_POINTER;
			}
			IntPtr nativeHandler = _agoraRtcEngine.GetNativeHandler();
			IntPtr videoFrameBufferManager = _agoraRtcEngine.GetVideoFrameBufferManager();
			if (nativeHandler != IntPtr.Zero)
			{
				_videoFrameBufferConfig.type = (int)sourceType;
				_videoFrameBufferConfig.id = uid;
				_videoFrameBufferConfig.key = key;
				return AgoraRtcNative.GetVideoFrameByConfig(videoFrameBufferManager, ref video_frame, out is_new_frame, ref _videoFrameBufferConfig);
			}
			return IRIS_VIDEO_PROCESS_ERR.ERR_NULL_POINTER;
		}

		internal void RtcEngineImplWillDispose(RtcEngineImpl impl)
		{
			IntPtr nativeHandler = _agoraRtcEngine.GetNativeHandler();
			IntPtr videoFrameBufferManager = _agoraRtcEngine.GetVideoFrameBufferManager();
			if (nativeHandler != IntPtr.Zero && _irisVideoFrameBufferHandle != IntPtr.Zero)
			{
				AgoraRtcNative.DisableVideoFrameBufferByConfig(videoFrameBufferManager, ref _videoFrameBufferConfig, _irisVideoFrameBufferHandle);
				AgoraLog.Log("DisableVideoFrameBufferByConfig on RtcEngineImplWillDispose");
				_irisVideoFrameBufferHandle = IntPtr.Zero;
			}
		}

		internal void Dispose(bool disposing)
		{
			if (!_disposed && disposing)
			{
				_agoraRtcEngine.OnRtcEngineImpleWillDispose -= RtcEngineImplWillDispose;
				_agoraRtcEngine = null;
				_disposed = true;
			}
		}

		public override void Dispose()
		{
			Dispose(disposing: true);
			GC.SuppressFinalize(this);
		}
	}
	public enum VideoSurfaceType
	{
		Renderer,
		RawImage
	}
	public delegate void OnTextureSizeModifyHandler(int width, int height);
	public sealed class VideoSurface : MonoBehaviour
	{
		[SerializeField]
		private VideoSurfaceType VideoSurfaceType;

		[SerializeField]
		private bool Enable = true;

		[SerializeField]
		private uint Uid;

		[SerializeField]
		private string ChannelId = "";

		[SerializeField]
		private VIDEO_SOURCE_TYPE SourceType;

		private Component _renderer;

		private bool _needUpdateInfo = true;

		private bool _hasAttach;

		private GameObject _TextureManagerGameObject;

		private TextureManager _textureManager;

		private int _textureWidth;

		private int _textureHeight;

		public event OnTextureSizeModifyHandler OnTextureSizeModify;

		private void Start()
		{
			CheckVideoSurfaceType();
		}

		private void Update()
		{
			if (_renderer == null || _needUpdateInfo)
			{
				return;
			}
			if (Enable)
			{
				if (_textureManager == null)
				{
					_TextureManagerGameObject = GameObject.Find("TextureManager" + Uid + ChannelId + SourceType);
					if (_TextureManagerGameObject == null)
					{
						_TextureManagerGameObject = new GameObject("TextureManager" + Uid + ChannelId + SourceType);
						_TextureManagerGameObject.hideFlags = HideFlags.HideInHierarchy;
						_textureManager = _TextureManagerGameObject.AddComponent<TextureManager>();
						_textureManager.SetVideoStreamIdentity(Uid, ChannelId, SourceType);
						_textureManager.EnableVideoFrameWithIdentity();
					}
					else
					{
						_textureManager = _TextureManagerGameObject.GetComponent<TextureManager>();
					}
				}
				else if ((bool)_textureManager && !_hasAttach && _textureManager.CanTextureAttach())
				{
					ApplyTexture(_textureManager.Texture);
					_hasAttach = true;
				}
				if ((bool)_textureManager && (_textureWidth != _textureManager.Width || _textureHeight != _textureManager.Height))
				{
					_textureWidth = _textureManager.Width;
					_textureHeight = _textureManager.Height;
					if (_textureWidth != 0 && _textureHeight != 0 && this.OnTextureSizeModify != null)
					{
						this.OnTextureSizeModify(_textureWidth, _textureHeight);
					}
				}
			}
			else if (_hasAttach && !IsBlankTexture())
			{
				DestroyTextureManager();
				ApplyTexture(null);
			}
		}

		private void OnDestroy()
		{
			AgoraLog.Log($"VideoSurface channel: ${ChannelId}, user:{Uid} destroy");
			DestroyTextureManager();
		}

		private void CheckVideoSurfaceType()
		{
			if (VideoSurfaceType == VideoSurfaceType.Renderer)
			{
				_renderer = GetComponent<Renderer>();
			}
			if (_renderer == null || VideoSurfaceType == VideoSurfaceType.RawImage)
			{
				_renderer = GetComponent<RawImage>();
				if (_renderer != null)
				{
					VideoSurfaceType = VideoSurfaceType.RawImage;
				}
			}
			if (_renderer == null)
			{
				AgoraLog.LogError("Unable to find surface render in VideoSurface component.");
			}
		}

		private void DestroyTextureManager()
		{
			if (!(_textureManager == null))
			{
				if (_hasAttach)
				{
					_textureManager.Detach();
					_hasAttach = false;
				}
				if (_textureManager.GetRefCount() <= 0)
				{
					UnityEngine.Object.Destroy(_TextureManagerGameObject);
				}
				_textureManager = null;
			}
		}

		private bool IsBlankTexture()
		{
			if (VideoSurfaceType == VideoSurfaceType.Renderer)
			{
				Renderer renderer = _renderer as Renderer;
				if (!(renderer.material.mainTexture == null))
				{
					return !(renderer.material.mainTexture is Texture2D);
				}
				return true;
			}
			if (VideoSurfaceType == VideoSurfaceType.RawImage)
			{
				return (_renderer as RawImage).texture == null;
			}
			return true;
		}

		private void ApplyTexture(Texture2D texture)
		{
			if (VideoSurfaceType == VideoSurfaceType.Renderer)
			{
				(_renderer as Renderer).material.mainTexture = texture;
			}
			else if (VideoSurfaceType == VideoSurfaceType.RawImage)
			{
				(_renderer as RawImage).texture = texture;
			}
		}

		private void UpdateShader()
		{
			MeshRenderer component = GetComponent<MeshRenderer>();
			if (component != null)
			{
				component.material = new Material(Shader.Find("Unlit/Texture"));
			}
		}

		public void SetForUser(uint uid = 0u, string channelId = "", VIDEO_SOURCE_TYPE source_type = VIDEO_SOURCE_TYPE.VIDEO_SOURCE_CAMERA_PRIMARY)
		{
			Uid = uid;
			ChannelId = channelId;
			SourceType = source_type;
			_needUpdateInfo = false;
		}

		public void SetEnable(bool enable)
		{
			Enable = enable;
		}
	}
}
namespace Agora.Rtc.Media.Base
{
	internal enum VIDEO_SOURCE_TYPE
	{
		CAMERA_SOURCE_FRONT,
		CAMERA_SOURCE_BACK,
		VIDEO_SOURCE_UNSPECIFIED
	}
}
namespace Agora.Rtc.LitJson
{
	public enum JsonType
	{
		None,
		Object,
		Array,
		String,
		Int,
		UInt,
		Long,
		ULong,
		Double,
		Boolean
	}
	public interface IJsonWrapper : IList, ICollection, IEnumerable, IOrderedDictionary, IDictionary
	{
		bool IsArray { get; }

		bool IsBoolean { get; }

		bool IsDouble { get; }

		bool IsInt { get; }

		bool IsUInt { get; }

		bool IsLong { get; }

		bool IsULong { get; }

		bool IsObject { get; }

		bool IsString { get; }

		bool GetBoolean();

		double GetDouble();

		int GetInt();

		uint GetUInt();

		JsonType GetJsonType();

		long GetLong();

		ulong GetULong();

		string GetString();

		void SetBoolean(bool val);

		void SetDouble(double val);

		void SetInt(int val);

		void SetUInt(uint val);

		void SetJsonType(JsonType type);

		void SetLong(long val);

		void SetULong(ulong val);

		void SetString(string val);

		string ToJson();

		void ToJson(JsonWriter writer);
	}
	public class JsonData : IJsonWrapper, IList, ICollection, IEnumerable, IOrderedDictionary, IDictionary, IEquatable<JsonData>
	{
		private IList<JsonData> inst_array;

		private bool inst_boolean;

		private double inst_double;

		private int inst_int;

		private uint inst_uint;

		private long inst_long;

		private ulong inst_ulong;

		private IDictionary<string, JsonData> inst_object;

		private string inst_string;

		private string json;

		private JsonType type;

		private IList<KeyValuePair<string, JsonData>> object_list;

		public int Count => EnsureCollection().Count;

		public bool IsArray => type == JsonType.Array;

		public bool IsBoolean => type == JsonType.Boolean;

		public bool IsDouble => type == JsonType.Double;

		public bool IsInt => type == JsonType.Int;

		public bool IsUInt
		{
			get
			{
				if (type == JsonType.UInt)
				{
					return true;
				}
				if (type == JsonType.Int && inst_int >= 0)
				{
					return true;
				}
				return false;
			}
		}

		public bool IsLong
		{
			get
			{
				if (type == JsonType.Long)
				{
					return true;
				}
				if (type == JsonType.UInt)
				{
					return true;
				}
				if (type == JsonType.Int)
				{
					return true;
				}
				return false;
			}
		}

		public bool IsULong
		{
			get
			{
				if (type == JsonType.ULong)
				{
					return true;
				}
				if (type == JsonType.Long && inst_long >= 0)
				{
					return true;
				}
				if (type == JsonType.UInt)
				{
					return true;
				}
				if (type == JsonType.Int && inst_int >= 0)
				{
					return true;
				}
				return false;
			}
		}

		public bool IsObject => type == JsonType.Object;

		public bool IsString => type == JsonType.String;

		public ICollection<string> Keys
		{
			get
			{
				EnsureDictionary();
				return inst_object.Keys;
			}
		}

		int ICollection.Count => Count;

		bool ICollection.IsSynchronized => EnsureCollection().IsSynchronized;

		object ICollection.SyncRoot => EnsureCollection().SyncRoot;

		bool IDictionary.IsFixedSize => EnsureDictionary().IsFixedSize;

		bool IDictionary.IsReadOnly => EnsureDictionary().IsReadOnly;

		ICollection IDictionary.Keys
		{
			get
			{
				EnsureDictionary();
				IList<string> list = new List<string>();
				foreach (KeyValuePair<string, JsonData> item in object_list)
				{
					list.Add(item.Key);
				}
				return (ICollection)list;
			}
		}

		ICollection IDictionary.Values
		{
			get
			{
				EnsureDictionary();
				IList<JsonData> list = new List<JsonData>();
				foreach (KeyValuePair<string, JsonData> item in object_list)
				{
					list.Add(item.Value);
				}
				return (ICollection)list;
			}
		}

		bool IJsonWrapper.IsArray => IsArray;

		bool IJsonWrapper.IsBoolean => IsBoolean;

		bool IJsonWrapper.IsDouble => IsDouble;

		bool IJsonWrapper.IsInt => IsInt;

		bool IJsonWrapper.IsUInt => IsUInt;

		bool IJsonWrapper.IsLong => IsLong;

		bool IJsonWrapper.IsULong => IsULong;

		bool IJsonWrapper.IsObject => IsObject;

		bool IJsonWrapper.IsString => IsString;

		bool IList.IsFixedSize => EnsureList().IsFixedSize;

		bool IList.IsReadOnly => EnsureList().IsReadOnly;

		object IDictionary.this[object key]
		{
			get
			{
				return EnsureDictionary()[key];
			}
			set
			{
				if (!(key is string))
				{
					throw new ArgumentException("The key has to be a string");
				}
				JsonData value2 = ToJsonData(value);
				this[(string)key] = value2;
			}
		}

		object IOrderedDictionary.this[int idx]
		{
			get
			{
				EnsureDictionary();
				return object_list[idx].Value;
			}
			set
			{
				EnsureDictionary();
				JsonData value2 = ToJsonData(value);
				KeyValuePair<string, JsonData> keyValuePair = object_list[idx];
				inst_object[keyValuePair.Key] = value2;
				KeyValuePair<string, JsonData> value3 = new KeyValuePair<string, JsonData>(keyValuePair.Key, value2);
				object_list[idx] = value3;
			}
		}

		object IList.this[int index]
		{
			get
			{
				return EnsureList()[index];
			}
			set
			{
				EnsureList();
				JsonData value2 = ToJsonData(value);
				this[index] = value2;
			}
		}

		public JsonData this[string prop_name]
		{
			get
			{
				EnsureDictionary();
				return inst_object[prop_name];
			}
			set
			{
				EnsureDictionary();
				KeyValuePair<string, JsonData> keyValuePair = new KeyValuePair<string, JsonData>(prop_name, value);
				if (inst_object.ContainsKey(prop_name))
				{
					for (int i = 0; i < object_list.Count; i++)
					{
						if (object_list[i].Key == prop_name)
						{
							object_list[i] = keyValuePair;
							break;
						}
					}
				}
				else
				{
					object_list.Add(keyValuePair);
				}
				inst_object[prop_name] = value;
				json = null;
			}
		}

		public JsonData this[int index]
		{
			get
			{
				EnsureCollection();
				if (type == JsonType.Array)
				{
					return inst_array[index];
				}
				return object_list[index].Value;
			}
			set
			{
				EnsureCollection();
				if (type == JsonType.Array)
				{
					inst_array[index] = value;
				}
				else
				{
					KeyValuePair<string, JsonData> keyValuePair = object_list[index];
					KeyValuePair<string, JsonData> value2 = new KeyValuePair<string, JsonData>(keyValuePair.Key, value);
					object_list[index] = value2;
					inst_object[keyValuePair.Key] = value;
				}
				json = null;
			}
		}

		public bool ContainsKey(string key)
		{
			EnsureDictionary();
			return inst_object.Keys.Contains(key);
		}

		public JsonData()
		{
		}

		public JsonData(bool boolean)
		{
			type = JsonType.Boolean;
			inst_boolean = boolean;
		}

		public JsonData(double number)
		{
			type = JsonType.Double;
			inst_double = number;
		}

		public JsonData(int number)
		{
			type = JsonType.Int;
			inst_int = number;
		}

		public JsonData(uint number)
		{
			type = JsonType.UInt;
			inst_uint = number;
		}

		public JsonData(long number)
		{
			type = JsonType.Long;
			inst_long = number;
		}

		public JsonData(ulong number)
		{
			type = JsonType.ULong;
			inst_ulong = number;
		}

		public JsonData(object obj)
		{
			if (obj is bool)
			{
				type = JsonType.Boolean;
				inst_boolean = (bool)obj;
				return;
			}
			if (obj is double)
			{
				type = JsonType.Double;
				inst_double = (double)obj;
				return;
			}
			if (obj is int)
			{
				type = JsonType.Int;
				inst_int = (int)obj;
				return;
			}
			if (obj is uint)
			{
				type = JsonType.UInt;
				inst_uint = (uint)obj;
				return;
			}
			if (obj is long)
			{
				type = JsonType.Long;
				inst_long = (long)obj;
				return;
			}
			if (obj is ulong)
			{
				type = JsonType.ULong;
				inst_ulong = (ulong)obj;
				return;
			}
			if (obj is string)
			{
				type = JsonType.String;
				inst_string = (string)obj;
				return;
			}
			throw new ArgumentException("Unable to wrap the given object with JsonData");
		}

		public JsonData(string str)
		{
			type = JsonType.String;
			inst_string = str;
		}

		public static implicit operator JsonData(bool data)
		{
			return new JsonData(data);
		}

		public static implicit operator JsonData(double data)
		{
			return new JsonData(data);
		}

		public static implicit operator JsonData(int data)
		{
			return new JsonData(data);
		}

		public static implicit operator JsonData(uint data)
		{
			return new JsonData(data);
		}

		public static implicit operator JsonData(long data)
		{
			return new JsonData(data);
		}

		public static implicit operator JsonData(ulong data)
		{
			return new JsonData(data);
		}

		public static implicit operator JsonData(string data)
		{
			return new JsonData(data);
		}

		public static explicit operator bool(JsonData data)
		{
			if (data.type != JsonType.Boolean)
			{
				throw new InvalidCastException("Instance of JsonData doesn't hold a double");
			}
			return data.inst_boolean;
		}

		public static explicit operator double(JsonData data)
		{
			if (data.type != JsonType.Double)
			{
				throw new InvalidCastException("Instance of JsonData doesn't hold a double");
			}
			return data.inst_double;
		}

		public static explicit operator int(JsonData data)
		{
			if (data.type != JsonType.Int && data.type != JsonType.Long)
			{
				throw new InvalidCastException("Instance of JsonData doesn't hold an int");
			}
			if (data.type != JsonType.Int)
			{
				return (int)data.inst_long;
			}
			return data.inst_int;
		}

		public static explicit operator uint(JsonData data)
		{
			if (data.type != JsonType.UInt && data.type != JsonType.ULong)
			{
				throw new InvalidCastException("Instance of JsonData doesn't hold an Uint");
			}
			if (data.type != JsonType.UInt)
			{
				return (uint)data.inst_ulong;
			}
			return data.inst_uint;
		}

		public static explicit operator long(JsonData data)
		{
			if (data.type != JsonType.Long && data.type != JsonType.Int)
			{
				throw new InvalidCastException("Instance of JsonData doesn't hold a long");
			}
			if (data.type != JsonType.Long)
			{
				return data.inst_int;
			}
			return data.inst_long;
		}

		public static explicit operator ulong(JsonData data)
		{
			if (data.type != JsonType.ULong && data.type != JsonType.UInt)
			{
				throw new InvalidCastException("Instance of JsonData doesn't hold a ulong");
			}
			if (data.type != JsonType.ULong)
			{
				return data.inst_uint;
			}
			return data.inst_ulong;
		}

		public static explicit operator string(JsonData data)
		{
			if (data.type != JsonType.String)
			{
				throw new InvalidCastException("Instance of JsonData doesn't hold a string");
			}
			return data.inst_string;
		}

		void ICollection.CopyTo(Array array, int index)
		{
			EnsureCollection().CopyTo(array, index);
		}

		void IDictionary.Add(object key, object value)
		{
			JsonData value2 = ToJsonData(value);
			EnsureDictionary().Add(key, value2);
			KeyValuePair<string, JsonData> item = new KeyValuePair<string, JsonData>((string)key, value2);
			object_list.Add(item);
			json = null;
		}

		void IDictionary.Clear()
		{
			EnsureDictionary().Clear();
			object_list.Clear();
			json = null;
		}

		bool IDictionary.Contains(object key)
		{
			return EnsureDictionary().Contains(key);
		}

		IDictionaryEnumerator IDictionary.GetEnumerator()
		{
			return ((IOrderedDictionary)this).GetEnumerator();
		}

		void IDictionary.Remove(object key)
		{
			EnsureDictionary().Remove(key);
			for (int i = 0; i < object_list.Count; i++)
			{
				if (object_list[i].Key == (string)key)
				{
					object_list.RemoveAt(i);
					break;
				}
			}
			json = null;
		}

		IEnumerator IEnumerable.GetEnumerator()
		{
			return EnsureCollection().GetEnumerator();
		}

		bool IJsonWrapper.GetBoolean()
		{
			if (type != JsonType.Boolean)
			{
				throw new InvalidOperationException("JsonData instance doesn't hold a boolean");
			}
			return inst_boolean;
		}

		double IJsonWrapper.GetDouble()
		{
			if (type != JsonType.Double)
			{
				throw new InvalidOperationException("JsonData instance doesn't hold a double");
			}
			return inst_double;
		}

		int IJsonWrapper.GetInt()
		{
			if (type != JsonType.Int)
			{
				throw new InvalidOperationException("JsonData instance doesn't hold an int");
			}
			return inst_int;
		}

		uint IJsonWrapper.GetUInt()
		{
			if (type == JsonType.UInt)
			{
				return inst_uint;
			}
			if (type == JsonType.Int && inst_int >= 0)
			{
				return (uint)inst_int;
			}
			throw new InvalidOperationException("JsonData instance doesn't hold an uint");
		}

		long IJsonWrapper.GetLong()
		{
			if (type == JsonType.Long)
			{
				return inst_long;
			}
			if (type == JsonType.UInt)
			{
				return inst_uint;
			}
			if (type == JsonType.Int)
			{
				return inst_int;
			}
			throw new InvalidOperationException("JsonData instance doesn't hold a long");
		}

		ulong IJsonWrapper.GetULong()
		{
			if (type == JsonType.ULong)
			{
				return inst_ulong;
			}
			if (type == JsonType.Long && inst_long >= 0)
			{
				return (ulong)inst_long;
			}
			if (type == JsonType.UInt)
			{
				return inst_uint;
			}
			if (type == JsonType.Int && inst_int >= 0)
			{
				return (ulong)inst_int;
			}
			throw new InvalidOperationException("JsonData instance doesn't hold a ulong");
		}

		string IJsonWrapper.GetString()
		{
			if (type != JsonType.String)
			{
				throw new InvalidOperationException("JsonData instance doesn't hold a string");
			}
			return inst_string;
		}

		void IJsonWrapper.SetBoolean(bool val)
		{
			type = JsonType.Boolean;
			inst_boolean = val;
			json = null;
		}

		void IJsonWrapper.SetDouble(double val)
		{
			type = JsonType.Double;
			inst_double = val;
			json = null;
		}

		void IJsonWrapper.SetInt(int val)
		{
			type = JsonType.Int;
			inst_int = val;
			json = null;
		}

		void IJsonWrapper.SetUInt(uint val)
		{
			type = JsonType.UInt;
			inst_uint = val;
			json = null;
		}

		void IJsonWrapper.SetLong(long val)
		{
			type = JsonType.Long;
			inst_long = val;
			json = null;
		}

		void IJsonWrapper.SetULong(ulong val)
		{
			type = JsonType.ULong;
			inst_ulong = val;
			json = null;
		}

		void IJsonWrapper.SetString(string val)
		{
			type = JsonType.String;
			inst_string = val;
			json = null;
		}

		string IJsonWrapper.ToJson()
		{
			return ToJson();
		}

		void IJsonWrapper.ToJson(JsonWriter writer)
		{
			ToJson(writer);
		}

		int IList.Add(object value)
		{
			return Add(value);
		}

		void IList.Clear()
		{
			EnsureList().Clear();
			json = null;
		}

		bool IList.Contains(object value)
		{
			return EnsureList().Contains(value);
		}

		int IList.IndexOf(object value)
		{
			return EnsureList().IndexOf(value);
		}

		void IList.Insert(int index, object value)
		{
			EnsureList().Insert(index, value);
			json = null;
		}

		void IList.Remove(object value)
		{
			EnsureList().Remove(value);
			json = null;
		}

		void IList.RemoveAt(int index)
		{
			EnsureList().RemoveAt(index);
			json = null;
		}

		IDictionaryEnumerator IOrderedDictionary.GetEnumerator()
		{
			EnsureDictionary();
			return new OrderedDictionaryEnumerator(object_list.GetEnumerator());
		}

		void IOrderedDictionary.Insert(int idx, object key, object value)
		{
			string text = (string)key;
			JsonData value2 = (this[text] = ToJsonData(value));
			KeyValuePair<string, JsonData> item = new KeyValuePair<string, JsonData>(text, value2);
			object_list.Insert(idx, item);
		}

		void IOrderedDictionary.RemoveAt(int idx)
		{
			EnsureDictionary();
			inst_object.Remove(object_list[idx].Key);
			object_list.RemoveAt(idx);
		}

		private ICollection EnsureCollection()
		{
			if (type == JsonType.Array)
			{
				return (ICollection)inst_array;
			}
			if (type == JsonType.Object)
			{
				return (ICollection)inst_object;
			}
			throw new InvalidOperationException("The JsonData instance has to be initialized first");
		}

		private IDictionary EnsureDictionary()
		{
			if (type == JsonType.Object)
			{
				return (IDictionary)inst_object;
			}
			if (type != 0)
			{
				throw new InvalidOperationException("Instance of JsonData is not a dictionary");
			}
			type = JsonType.Object;
			inst_object = new Dictionary<string, JsonData>();
			object_list = new List<KeyValuePair<string, JsonData>>();
			return (IDictionary)inst_object;
		}

		private IList EnsureList()
		{
			if (type == JsonType.Array)
			{
				return (IList)inst_array;
			}
			if (type != 0)
			{
				throw new InvalidOperationException("Instance of JsonData is not a list");
			}
			type = JsonType.Array;
			inst_array = new List<JsonData>();
			return (IList)inst_array;
		}

		private JsonData ToJsonData(object obj)
		{
			if (obj == null)
			{
				return null;
			}
			if (obj is JsonData)
			{
				return (JsonData)obj;
			}
			return new JsonData(obj);
		}

		private static void WriteJson(IJsonWrapper obj, JsonWriter writer)
		{
			if (obj == null)
			{
				writer.Write(null);
			}
			else if (obj.IsString)
			{
				writer.Write(obj.GetString());
			}
			else if (obj.IsBoolean)
			{
				writer.Write(obj.GetBoolean());
			}
			else if (obj.IsDouble)
			{
				writer.Write(obj.GetDouble());
			}
			else if (obj.IsInt)
			{
				writer.Write(obj.GetInt());
			}
			else if (obj.IsUInt)
			{
				writer.Write(obj.GetUInt());
			}
			else if (obj.IsLong)
			{
				writer.Write(obj.GetLong());
			}
			else if (obj.IsULong)
			{
				writer.Write(obj.GetULong());
			}
			else if (obj.IsArray)
			{
				writer.WriteArrayStart();
				foreach (JsonData item in (IEnumerable)obj)
				{
					WriteJson(item, writer);
				}
				writer.WriteArrayEnd();
			}
			else
			{
				if (!obj.IsObject)
				{
					return;
				}
				writer.WriteObjectStart();
				foreach (DictionaryEntry item2 in (IDictionary)obj)
				{
					writer.WritePropertyName((string)item2.Key);
					WriteJson((JsonData)item2.Value, writer);
				}
				writer.WriteObjectEnd();
			}
		}

		public int Add(object value)
		{
			JsonData value2 = ToJsonData(value);
			json = null;
			return EnsureList().Add(value2);
		}

		public bool Remove(object obj)
		{
			json = null;
			if (IsObject)
			{
				JsonData value = null;
				if (inst_object.TryGetValue((string)obj, out value))
				{
					if (inst_object.Remove((string)obj))
					{
						return object_list.Remove(new KeyValuePair<string, JsonData>((string)obj, value));
					}
					return false;
				}
				throw new KeyNotFoundException("The specified key was not found in the JsonData object.");
			}
			if (IsArray)
			{
				return inst_array.Remove(ToJsonData(obj));
			}
			throw new InvalidOperationException("Instance of JsonData is not an object or a list.");
		}

		public void Clear()
		{
			if (IsObject)
			{
				((IDictionary)this).Clear();
			}
			else if (IsArray)
			{
				((IList)this).Clear();
			}
		}

		public bool Equals(JsonData x)
		{
			if (x == null)
			{
				return false;
			}
			if (x.type != type && ((x.type != JsonType.Int && x.type != JsonType.Long) || (type != JsonType.Int && type != JsonType.Long)))
			{
				return false;
			}
			switch (type)
			{
			case JsonType.None:
				return true;
			case JsonType.Object:
				return inst_object.Equals(x.inst_object);
			case JsonType.Array:
				return inst_array.Equals(x.inst_array);
			case JsonType.String:
				return inst_string.Equals(x.inst_string);
			case JsonType.Int:
				if (x.IsLong)
				{
					if (x.inst_long < int.MinValue || x.inst_long > int.MaxValue)
					{
						return false;
					}
					return inst_int.Equals((int)x.inst_long);
				}
				return inst_int.Equals(x.inst_int);
			case JsonType.Long:
				if (x.IsInt)
				{
					if (inst_long < int.MinValue || inst_long > int.MaxValue)
					{
						return false;
					}
					return x.inst_int.Equals((int)inst_long);
				}
				return inst_long.Equals(x.inst_long);
			case JsonType.Double:
				return inst_double.Equals(x.inst_double);
			case JsonType.Boolean:
				return inst_boolean.Equals(x.inst_boolean);
			default:
				return false;
			}
		}

		public JsonType GetJsonType()
		{
			return type;
		}

		public void SetJsonType(JsonType type)
		{
			if (this.type != type)
			{
				switch (type)
				{
				case JsonType.Object:
					inst_object = new Dictionary<string, JsonData>();
					object_list = new List<KeyValuePair<string, JsonData>>();
					break;
				case JsonType.Array:
					inst_array = new List<JsonData>();
					break;
				case JsonType.String:
					inst_string = null;
					break;
				case JsonType.Int:
					inst_int = 0;
					break;
				case JsonType.UInt:
					inst_uint = 0u;
					break;
				case JsonType.Long:
					inst_long = 0L;
					break;
				case JsonType.ULong:
					inst_ulong = 0uL;
					break;
				case JsonType.Double:
					inst_double = 0.0;
					break;
				case JsonType.Boolean:
					inst_boolean = false;
					break;
				}
				this.type = type;
			}
		}

		public string ToJson()
		{
			if (json != null)
			{
				return json;
			}
			StringWriter stringWriter = new StringWriter();
			JsonWriter jsonWriter = new JsonWriter(stringWriter);
			jsonWriter.Validate = false;
			WriteJson(this, jsonWriter);
			json = stringWriter.ToString();
			return json;
		}

		public void ToJson(JsonWriter writer)
		{
			bool validate = writer.Validate;
			writer.Validate = false;
			WriteJson(this, writer);
			writer.Validate = validate;
		}

		public override string ToString()
		{
			return type switch
			{
				JsonType.Array => "JsonData array", 
				JsonType.Boolean => inst_boolean.ToString(), 
				JsonType.Double => inst_double.ToString(), 
				JsonType.Int => inst_int.ToString(), 
				JsonType.UInt => inst_uint.ToString(), 
				JsonType.Long => inst_long.ToString(), 
				JsonType.ULong => inst_ulong.ToString(), 
				JsonType.Object => "JsonData object", 
				JsonType.String => inst_string, 
				_ => "Uninitialized JsonData", 
			};
		}
	}
	internal class OrderedDictionaryEnumerator : IDictionaryEnumerator, IEnumerator
	{
		private IEnumerator<KeyValuePair<string, JsonData>> list_enumerator;

		public object Current => Entry;

		public DictionaryEntry Entry
		{
			get
			{
				KeyValuePair<string, JsonData> current = list_enumerator.Current;
				return new DictionaryEntry(current.Key, current.Value);
			}
		}

		public object Key => list_enumerator.Current.Key;

		public object Value => list_enumerator.Current.Value;

		public OrderedDictionaryEnumerator(IEnumerator<KeyValuePair<string, JsonData>> enumerator)
		{
			list_enumerator = enumerator;
		}

		public bool MoveNext()
		{
			return list_enumerator.MoveNext();
		}

		public void Reset()
		{
			list_enumerator.Reset();
		}
	}
	public class JsonException : ApplicationException
	{
		public JsonException()
		{
		}

		internal JsonException(ParserToken token)
			: base($"Invalid token '{token}' in input string")
		{
		}

		internal JsonException(ParserToken token, Exception inner_exception)
			: base($"Invalid token '{token}' in input string", inner_exception)
		{
		}

		internal JsonException(int c)
			: base($"Invalid character '{(char)c}' in input string")
		{
		}

		internal JsonException(int c, Exception inner_exception)
			: base($"Invalid character '{(char)c}' in input string", inner_exception)
		{
		}

		public JsonException(string message)
			: base(message)
		{
		}

		public JsonException(string message, Exception inner_exception)
			: base(message, inner_exception)
		{
		}
	}
	internal struct PropertyMetadata
	{
		public MemberInfo Info;

		public bool IsField;

		public Type Type;
	}
	internal struct ArrayMetadata
	{
		private Type element_type;

		private bool is_array;

		private bool is_list;

		public Type ElementType
		{
			get
			{
				if (element_type == null)
				{
					return typeof(JsonData);
				}
				return element_type;
			}
			set
			{
				element_type = value;
			}
		}

		public bool IsArray
		{
			get
			{
				return is_array;
			}
			set
			{
				is_array = value;
			}
		}

		public bool IsList
		{
			get
			{
				return is_list;
			}
			set
			{
				is_list = value;
			}
		}
	}
	internal struct ObjectMetadata
	{
		private Type element_type;

		private bool is_dictionary;

		private IDictionary<string, PropertyMetadata> properties;

		public Type ElementType
		{
			get
			{
				if (element_type == null)
				{
					return typeof(JsonData);
				}
				return element_type;
			}
			set
			{
				element_type = value;
			}
		}

		public bool IsDictionary
		{
			get
			{
				return is_dictionary;
			}
			set
			{
				is_dictionary = value;
			}
		}

		public IDictionary<string, PropertyMetadata> Properties
		{
			get
			{
				return properties;
			}
			set
			{
				properties = value;
			}
		}
	}
	internal delegate void ExporterFunc(object obj, JsonWriter writer);
	public delegate void ExporterFunc<T>(T obj, JsonWriter writer);
	internal delegate object ImporterFunc(object input);
	public delegate TValue ImporterFunc<TJson, TValue>(TJson input);
	public delegate IJsonWrapper WrapperFactory();
	public class JsonMapper
	{
		private static readonly int max_nesting_depth;

		private static readonly IFormatProvider datetime_format;

		private static readonly IDictionary<Type, ExporterFunc> base_exporters_table;

		private static readonly IDictionary<Type, ExporterFunc> custom_exporters_table;

		private static readonly IDictionary<Type, IDictionary<Type, ImporterFunc>> base_importers_table;

		private static readonly IDictionary<Type, IDictionary<Type, ImporterFunc>> custom_importers_table;

		private static readonly IDictionary<Type, ArrayMetadata> array_metadata;

		private static readonly object array_metadata_lock;

		private static readonly IDictionary<Type, IDictionary<Type, MethodInfo>> conv_ops;

		private static readonly object conv_ops_lock;

		private static readonly IDictionary<Type, ObjectMetadata> object_metadata;

		private static readonly object object_metadata_lock;

		private static readonly IDictionary<Type, IList<PropertyMetadata>> type_properties;

		private static readonly object type_properties_lock;

		private static readonly JsonWriter static_writer;

		private static readonly object static_writer_lock;

		static JsonMapper()
		{
			array_metadata_lock = new object();
			conv_ops_lock = new object();
			object_metadata_lock = new object();
			type_properties_lock = new object();
			static_writer_lock = new object();
			max_nesting_depth = 100;
			array_metadata = new Dictionary<Type, ArrayMetadata>();
			conv_ops = new Dictionary<Type, IDictionary<Type, MethodInfo>>();
			object_metadata = new Dictionary<Type, ObjectMetadata>();
			type_properties = new Dictionary<Type, IList<PropertyMetadata>>();
			static_writer = new JsonWriter();
			datetime_format = DateTimeFormatInfo.InvariantInfo;
			base_exporters_table = new Dictionary<Type, ExporterFunc>();
			custom_exporters_table = new Dictionary<Type, ExporterFunc>();
			base_importers_table = new Dictionary<Type, IDictionary<Type, ImporterFunc>>();
			custom_importers_table = new Dictionary<Type, IDictionary<Type, ImporterFunc>>();
			RegisterBaseExporters();
			RegisterCustomExporters();
			RegisterBaseImporters();
			RegisterCustomImporters();
		}

		private static void AddArrayMetadata(Type type)
		{
			if (array_metadata.ContainsKey(type))
			{
				return;
			}
			ArrayMetadata value = default(ArrayMetadata);
			value.IsArray = type.IsArray;
			if (type.GetInterface("System.Collections.IList") != null)
			{
				value.IsList = true;
			}
			PropertyInfo[] properties = type.GetProperties();
			foreach (PropertyInfo propertyInfo in properties)
			{
				if (!(propertyInfo.Name != "Item"))
				{
					ParameterInfo[] indexParameters = propertyInfo.GetIndexParameters();
					if (indexParameters.Length == 1 && indexParameters[0].ParameterType == typeof(int))
					{
						value.ElementType = propertyInfo.PropertyType;
					}
				}
			}
			lock (array_metadata_lock)
			{
				try
				{
					array_metadata.Add(type, value);
				}
				catch (ArgumentException)
				{
				}
			}
		}

		private static void AddObjectMetadata(Type type)
		{
			if (object_metadata.ContainsKey(type))
			{
				return;
			}
			ObjectMetadata value = default(ObjectMetadata);
			if (type.GetInterface("System.Collections.IDictionary") != null)
			{
				value.IsDictionary = true;
			}
			value.Properties = new Dictionary<string, PropertyMetadata>();
			PropertyInfo[] properties = type.GetProperties();
			foreach (PropertyInfo propertyInfo in properties)
			{
				if (propertyInfo.Name == "Item")
				{
					ParameterInfo[] indexParameters = propertyInfo.GetIndexParameters();
					if (indexParameters.Length == 1 && indexParameters[0].ParameterType == typeof(string))
					{
						value.ElementType = propertyInfo.PropertyType;
					}
				}
				else
				{
					PropertyMetadata value2 = default(PropertyMetadata);
					value2.Info = propertyInfo;
					value2.Type = propertyInfo.PropertyType;
					value.Properties.Add(propertyInfo.Name, value2);
				}
			}
			FieldInfo[] fields = type.GetFields();
			foreach (FieldInfo fieldInfo in fields)
			{
				PropertyMetadata value3 = default(PropertyMetadata);
				value3.Info = fieldInfo;
				value3.IsField = true;
				value3.Type = fieldInfo.FieldType;
				value.Properties.Add(fieldInfo.Name, value3);
			}
			lock (object_metadata_lock)
			{
				try
				{
					object_metadata.Add(type, value);
				}
				catch (ArgumentException)
				{
				}
			}
		}

		private static void AddTypeProperties(Type type)
		{
			if (type_properties.ContainsKey(type))
			{
				return;
			}
			IList<PropertyMetadata> list = new List<PropertyMetadata>();
			PropertyInfo[] properties = type.GetProperties();
			foreach (PropertyInfo propertyInfo in properties)
			{
				if (!(propertyInfo.Name == "Item"))
				{
					PropertyMetadata item = default(PropertyMetadata);
					item.Info = propertyInfo;
					item.IsField = false;
					list.Add(item);
				}
			}
			FieldInfo[] fields = type.GetFields();
			foreach (FieldInfo info in fields)
			{
				PropertyMetadata item2 = default(PropertyMetadata);
				item2.Info = info;
				item2.IsField = true;
				list.Add(item2);
			}
			lock (type_properties_lock)
			{
				try
				{
					type_properties.Add(type, list);
				}
				catch (ArgumentException)
				{
				}
			}
		}

		private static MethodInfo GetConvOp(Type t1, Type t2)
		{
			lock (conv_ops_lock)
			{
				if (!conv_ops.ContainsKey(t1))
				{
					conv_ops.Add(t1, new Dictionary<Type, MethodInfo>());
				}
			}
			if (conv_ops[t1].ContainsKey(t2))
			{
				return conv_ops[t1][t2];
			}
			MethodInfo method = t1.GetMethod("op_Implicit", new Type[1] { t2 });
			lock (conv_ops_lock)
			{
				try
				{
					conv_ops[t1].Add(t2, method);
					return method;
				}
				catch (ArgumentException)
				{
					return conv_ops[t1][t2];
				}
			}
		}

		private static object ReadValue(Type inst_type, JsonReader reader)
		{
			reader.Read();
			if (reader.Token == JsonToken.ArrayEnd)
			{
				return null;
			}
			Type underlyingType = Nullable.GetUnderlyingType(inst_type);
			Type type = underlyingType ?? inst_type;
			if (reader.Token == JsonToken.Null)
			{
				if (inst_type.IsClass || underlyingType != null)
				{
					return null;
				}
				throw new JsonException($"Can't assign null to an instance of type {inst_type}");
			}
			if (reader.Token == JsonToken.Double || reader.Token == JsonToken.Int || reader.Token == JsonToken.UInt || reader.Token == JsonToken.Long || reader.Token == JsonToken.ULong || reader.Token == JsonToken.String || reader.Token == JsonToken.Boolean)
			{
				Type type2 = reader.Value.GetType();
				if (type.IsAssignableFrom(type2))
				{
					return reader.Value;
				}
				if (custom_importers_table.ContainsKey(type2) && custom_importers_table[type2].ContainsKey(type))
				{
					return custom_importers_table[type2][type](reader.Value);
				}
				if (base_importers_table.ContainsKey(type2) && base_importers_table[type2].ContainsKey(type))
				{
					return base_importers_table[type2][type](reader.Value);
				}
				if (type.IsEnum)
				{
					return Enum.ToObject(type, reader.Value);
				}
				MethodInfo convOp = GetConvOp(type, type2);
				if (convOp != null)
				{
					return convOp.Invoke(null, new object[1] { reader.Value });
				}
				throw new JsonException($"Can't assign value '{reader.Value}' (type {type2}) to type {inst_type}");
			}
			object obj = null;
			if (reader.Token == JsonToken.ArrayStart)
			{
				AddArrayMetadata(inst_type);
				ArrayMetadata arrayMetadata = array_metadata[inst_type];
				if (!arrayMetadata.IsArray && !arrayMetadata.IsList)
				{
					throw new JsonException($"Type {inst_type} can't act as an array");
				}
				IList list;
				Type elementType;
				if (!arrayMetadata.IsArray)
				{
					list = (IList)Activator.CreateInstance(inst_type);
					elementType = arrayMetadata.ElementType;
				}
				else
				{
					list = new ArrayList();
					elementType = inst_type.GetElementType();
				}
				list.Clear();
				while (true)
				{
					object obj2 = ReadValue(elementType, reader);
					if (obj2 == null && reader.Token == JsonToken.ArrayEnd)
					{
						break;
					}
					list.Add(obj2);
				}
				if (arrayMetadata.IsArray)
				{
					int count = list.Count;
					obj = Array.CreateInstance(elementType, count);
					for (int i = 0; i < count; i++)
					{
						((Array)obj).SetValue(list[i], i);
					}
				}
				else
				{
					obj = list;
				}
			}
			else if (reader.Token == JsonToken.ObjectStart)
			{
				AddObjectMetadata(type);
				ObjectMetadata objectMetadata = object_metadata[type];
				obj = Activator.CreateInstance(type);
				while (true)
				{
					reader.Read();
					if (reader.Token == JsonToken.ObjectEnd)
					{
						break;
					}
					string text = (string)reader.Value;
					if (objectMetadata.Properties.ContainsKey(text))
					{
						PropertyMetadata propertyMetadata = objectMetadata.Properties[text];
						if (custom_importers_table.ContainsKey(propertyMetadata.Type))
						{
							IDictionary<Type, ImporterFunc> dictionary = custom_importers_table[propertyMetadata.Type];
							reader.Read();
							object value;
							if (reader.Value == null)
							{
								value = null;
							}
							else
							{
								Type type3 = reader.Value.GetType();
								if (!dictionary.ContainsKey(type3))
								{
									throw new NotImplementedException("custom_importers_table miss: adapter" + propertyMetadata.Type?.ToString() + " " + type3);
								}
								value = dictionary[type3](reader.Value);
							}
							if (propertyMetadata.IsField)
							{
								((FieldInfo)propertyMetadata.Info).SetValue(obj, value);
								continue;
							}
							PropertyInfo propertyInfo = (PropertyInfo)propertyMetadata.Info;
							if (propertyInfo.CanWrite)
							{
								propertyInfo.SetValue(obj, value, null);
							}
						}
						else if (propertyMetadata.IsField)
						{
							((FieldInfo)propertyMetadata.Info).SetValue(obj, ReadValue(propertyMetadata.Type, reader));
						}
						else
						{
							PropertyInfo propertyInfo2 = (PropertyInfo)propertyMetadata.Info;
							if (propertyInfo2.CanWrite)
							{
								propertyInfo2.SetValue(obj, ReadValue(propertyMetadata.Type, reader), null);
							}
							else
							{
								ReadValue(propertyMetadata.Type, reader);
							}
						}
					}
					else if (!objectMetadata.IsDictionary)
					{
						if (!reader.SkipNonMembers)
						{
							throw new JsonException($"The type {inst_type} doesn't have the property '{text}'");
						}
						ReadSkip(reader);
					}
					else
					{
						((IDictionary)obj).Add(text, ReadValue(objectMetadata.ElementType, reader));
					}
				}
			}
			return obj;
		}

		private static IJsonWrapper ReadValue(WrapperFactory factory, JsonReader reader)
		{
			reader.Read();
			if (reader.Token == JsonToken.ArrayEnd || reader.Token == JsonToken.Null)
			{
				return null;
			}
			IJsonWrapper jsonWrapper = factory();
			if (reader.Token == JsonToken.String)
			{
				jsonWrapper.SetString((string)reader.Value);
				return jsonWrapper;
			}
			if (reader.Token == JsonToken.Double)
			{
				jsonWrapper.SetDouble((double)reader.Value);
				return jsonWrapper;
			}
			if (reader.Token == JsonToken.Int)
			{
				jsonWrapper.SetInt((int)reader.Value);
				return jsonWrapper;
			}
			if (reader.Token == JsonToken.UInt)
			{
				jsonWrapper.SetUInt((uint)reader.Value);
				return jsonWrapper;
			}
			if (reader.Token == JsonToken.Long)
			{
				jsonWrapper.SetLong((long)reader.Value);
				return jsonWrapper;
			}
			if (reader.Token == JsonToken.ULong)
			{
				jsonWrapper.SetULong((ulong)reader.Value);
				return jsonWrapper;
			}
			if (reader.Token == JsonToken.Boolean)
			{
				jsonWrapper.SetBoolean((bool)reader.Value);
				return jsonWrapper;
			}
			if (reader.Token == JsonToken.ArrayStart)
			{
				jsonWrapper.SetJsonType(JsonType.Array);
				while (true)
				{
					IJsonWrapper jsonWrapper2 = ReadValue(factory, reader);
					if (jsonWrapper2 == null && reader.Token == JsonToken.ArrayEnd)
					{
						break;
					}
					jsonWrapper.Add(jsonWrapper2);
				}
			}
			else if (reader.Token == JsonToken.ObjectStart)
			{
				jsonWrapper.SetJsonType(JsonType.Object);
				while (true)
				{
					reader.Read();
					if (reader.Token == JsonToken.ObjectEnd)
					{
						break;
					}
					string key = (string)reader.Value;
					jsonWrapper[key] = ReadValue(factory, reader);
				}
			}
			return jsonWrapper;
		}

		private static void ReadSkip(JsonReader reader)
		{
			ToWrapper(() => new JsonMockWrapper(), reader);
		}

		private static void RegisterBaseExporters()
		{
			base_exporters_table[typeof(byte)] = delegate(object obj, JsonWriter writer)
			{
				writer.Write(Convert.ToInt32((byte)obj));
			};
			base_exporters_table[typeof(char)] = delegate(object obj, JsonWriter writer)
			{
				writer.Write(Convert.ToString((char)obj));
			};
			base_exporters_table[typeof(DateTime)] = delegate(object obj, JsonWriter writer)
			{
				writer.Write(Convert.ToString((DateTime)obj, datetime_format));
			};
			base_exporters_table[typeof(decimal)] = delegate(object obj, JsonWriter writer)
			{
				writer.Write((decimal)obj);
			};
			base_exporters_table[typeof(sbyte)] = delegate(object obj, JsonWriter writer)
			{
				writer.Write(Convert.ToInt32((sbyte)obj));
			};
			base_exporters_table[typeof(short)] = delegate(object obj, JsonWriter writer)
			{
				writer.Write(Convert.ToInt32((short)obj));
			};
			base_exporters_table[typeof(ushort)] = delegate(object obj, JsonWriter writer)
			{
				writer.Write(Convert.ToInt32((ushort)obj));
			};
			base_exporters_table[typeof(uint)] = delegate(object obj, JsonWriter writer)
			{
				writer.Write(Convert.ToUInt64((uint)obj));
			};
			base_exporters_table[typeof(ulong)] = delegate(object obj, JsonWriter writer)
			{
				writer.Write((ulong)obj);
			};
			base_exporters_table[typeof(DateTimeOffset)] = delegate(object obj, JsonWriter writer)
			{
				writer.Write(((DateTimeOffset)obj).ToString("yyyy-MM-ddTHH:mm:ss.fffffffzzz", datetime_format));
			};
		}

		private static void RegisterCustomExporters()
		{
		}

		private static void RegisterBaseImporters()
		{
			ImporterFunc importer = (object input) => Convert.ToByte((int)input);
			RegisterImporter(base_importers_table, typeof(int), typeof(byte), importer);
			importer = (object input) => Convert.ToUInt64((int)input);
			RegisterImporter(base_importers_table, typeof(int), typeof(ulong), importer);
			importer = (object input) => Convert.ToInt64((int)input);
			RegisterImporter(base_importers_table, typeof(int), typeof(long), importer);
			importer = (object input) => Convert.ToUInt32((int)input);
			RegisterImporter(base_importers_table, typeof(int), typeof(uint), importer);
			importer = (object input) => Convert.ToSByte((int)input);
			RegisterImporter(base_importers_table, typeof(int), typeof(sbyte), importer);
			importer = (object input) => Convert.ToInt16((int)input);
			RegisterImporter(base_importers_table, typeof(int), typeof(short), importer);
			importer = (object input) => Convert.ToUInt16((int)input);
			RegisterImporter(base_importers_table, typeof(int), typeof(ushort), importer);
			importer = (object input) => Convert.ToUInt32((int)input);
			RegisterImporter(base_importers_table, typeof(int), typeof(uint), importer);
			importer = (object input) => Convert.ToSingle((int)input);
			RegisterImporter(base_importers_table, typeof(int), typeof(float), importer);
			importer = (object input) => Convert.ToDouble((int)input);
			RegisterImporter(base_importers_table, typeof(int), typeof(double), importer);
			importer = (object input) => Convert.ToInt64((uint)input);
			RegisterImporter(base_importers_table, typeof(uint), typeof(long), importer);
			importer = (object input) => Convert.ToUInt64((uint)input);
			RegisterImporter(base_importers_table, typeof(uint), typeof(ulong), importer);
			importer = (object input) => Convert.ToDecimal((double)input);
			RegisterImporter(base_importers_table, typeof(double), typeof(decimal), importer);
			importer = (object input) => Convert.ToSingle((double)input);
			RegisterImporter(base_importers_table, typeof(double), typeof(float), importer);
			importer = (object input) => Convert.ToUInt32((long)input);
			RegisterImporter(base_importers_table, typeof(long), typeof(uint), importer);
			importer = (object input) => Convert.ToUInt64((long)input);
			RegisterImporter(base_importers_table, typeof(long), typeof(ulong), importer);
			importer = (object input) => Convert.ToChar((string)input);
			RegisterImporter(base_importers_table, typeof(string), typeof(char), importer);
			importer = (object input) => Convert.ToDateTime((string)input, datetime_format);
			RegisterImporter(base_importers_table, typeof(string), typeof(DateTime), importer);
			importer = (object input) => DateTimeOffset.Parse((string)input, datetime_format);
			RegisterImporter(base_importers_table, typeof(string), typeof(DateTimeOffset), importer);
		}

		private static void RegisterCustomImporters()
		{
			ImporterFunc importer = delegate(object input)
			{
				Optional<double> optional37 = new Optional<double>();
				optional37.SetValue(Convert.ToDouble(input));
				return optional37;
			};
			RegisterImporter(custom_importers_table, typeof(Optional<double>), typeof(double), importer);
			importer = delegate(object input)
			{
				Optional<double> optional36 = new Optional<double>();
				optional36.SetValue(Convert.ToInt32(input));
				return optional36;
			};
			RegisterImporter(custom_importers_table, typeof(Optional<double>), typeof(int), importer);
			importer = delegate(object input)
			{
				Optional<double> optional35 = new Optional<double>();
				optional35.SetValue(Convert.ToInt64(input));
				return optional35;
			};
			RegisterImporter(custom_importers_table, typeof(Optional<double>), typeof(long), importer);
			importer = delegate(object input)
			{
				Optional<float> optional34 = new Optional<float>();
				optional34.SetValue((float)Convert.ToDouble(input));
				return optional34;
			};
			RegisterImporter(custom_importers_table, typeof(Optional<float>), typeof(double), importer);
			importer = delegate(object input)
			{
				Optional<float> optional33 = new Optional<float>();
				optional33.SetValue(Convert.ToInt32(input));
				return optional33;
			};
			RegisterImporter(custom_importers_table, typeof(Optional<float>), typeof(int), importer);
			importer = delegate(object input)
			{
				Optional<float> optional32 = new Optional<float>();
				optional32.SetValue(Convert.ToInt64(input));
				return optional32;
			};
			RegisterImporter(custom_importers_table, typeof(Optional<float>), typeof(long), importer);
			importer = delegate(object input)
			{
				Optional<short> optional31 = new Optional<short>();
				optional31.SetValue((short)Convert.ToInt32(input));
				return optional31;
			};
			RegisterImporter(custom_importers_table, typeof(Optional<short>), typeof(int), importer);
			importer = delegate(object input)
			{
				Optional<short> optional30 = new Optional<short>();
				optional30.SetValue((short)Convert.ToUInt64(input));
				return optional30;
			};
			RegisterImporter(custom_importers_table, typeof(Optional<short>), typeof(long), importer);
			importer = delegate(object input)
			{
				Optional<short> optional29 = new Optional<short>();
				optional29.SetValue((short)Convert.ToDouble(input));
				return optional29;
			};
			RegisterImporter(custom_importers_table, typeof(Optional<short>), typeof(double), importer);
			importer = delegate(object input)
			{
				Optional<ushort> optional28 = new Optional<ushort>();
				optional28.SetValue((ushort)Convert.ToInt32(input));
				return optional28;
			};
			RegisterImporter(custom_importers_table, typeof(Optional<ushort>), typeof(int), importer);
			importer = delegate(object input)
			{
				Optional<ushort> optional27 = new Optional<ushort>();
				optional27.SetValue((ushort)Convert.ToUInt64(input));
				return optional27;
			};
			RegisterImporter(custom_importers_table, typeof(Optional<ushort>), typeof(long), importer);
			importer = delegate(object input)
			{
				Optional<ushort> optional26 = new Optional<ushort>();
				optional26.SetValue((ushort)Convert.ToDouble(input));
				return optional26;
			};
			RegisterImporter(custom_importers_table, typeof(Optional<ushort>), typeof(double), importer);
			importer = delegate(object input)
			{
				Optional<int> optional25 = new Optional<int>();
				optional25.SetValue(Convert.ToInt32(input));
				return optional25;
			};
			RegisterImporter(custom_importers_table, typeof(Optional<int>), typeof(int), importer);
			importer = delegate(object input)
			{
				Optional<int> optional24 = new Optional<int>();
				optional24.SetValue((int)Convert.ToDouble(input));
				return optional24;
			};
			RegisterImporter(custom_importers_table, typeof(Optional<int>), typeof(double), importer);
			importer = delegate(object input)
			{
				Optional<int> optional23 = new Optional<int>();
				optional23.SetValue((int)Convert.ToUInt64(input));
				return optional23;
			};
			RegisterImporter(custom_importers_table, typeof(Optional<int>), typeof(long), importer);
			importer = delegate(object input)
			{
				Optional<uint> optional22 = new Optional<uint>();
				optional22.SetValue((uint)Convert.ToInt32(input));
				return optional22;
			};
			RegisterImporter(custom_importers_table, typeof(Optional<uint>), typeof(int), importer);
			importer = delegate(object input)
			{
				Optional<uint> optional21 = new Optional<uint>();
				optional21.SetValue((uint)Convert.ToDouble(input));
				return optional21;
			};
			RegisterImporter(custom_importers_table, typeof(Optional<uint>), typeof(double), importer);
			importer = delegate(object input)
			{
				Optional<uint> optional20 = new Optional<uint>();
				optional20.SetValue((uint)Convert.ToUInt64(input));
				return optional20;
			};
			RegisterImporter(custom_importers_table, typeof(Optional<uint>), typeof(long), importer);
			importer = delegate(object input)
			{
				Optional<long> optional19 = new Optional<long>();
				optional19.SetValue(Convert.ToInt32(input));
				return optional19;
			};
			RegisterImporter(custom_importers_table, typeof(Optional<long>), typeof(int), importer);
			importer = delegate(object input)
			{
				Optional<long> optional18 = new Optional<long>();
				optional18.SetValue((long)Convert.ToDouble(input));
				return optional18;
			};
			RegisterImporter(custom_importers_table, typeof(Optional<long>), typeof(double), importer);
			importer = delegate(object input)
			{
				Optional<long> optional17 = new Optional<long>();
				optional17.SetValue((long)Convert.ToUInt64(input));
				return optional17;
			};
			RegisterImporter(custom_importers_table, typeof(Optional<long>), typeof(long), importer);
			importer = delegate(object input)
			{
				Optional<ulong> optional16 = new Optional<ulong>();
				optional16.SetValue((ulong)Convert.ToInt32(input));
				return optional16;
			};
			RegisterImporter(custom_importers_table, typeof(Optional<ulong>), typeof(int), importer);
			importer = delegate(object input)
			{
				Optional<ulong> optional15 = new Optional<ulong>();
				optional15.SetValue((ulong)Convert.ToDouble(input));
				return optional15;
			};
			RegisterImporter(custom_importers_table, typeof(Optional<ulong>), typeof(double), importer);
			importer = delegate(object input)
			{
				Optional<ulong> optional14 = new Optional<ulong>();
				optional14.SetValue(Convert.ToUInt64(input));
				return optional14;
			};
			RegisterImporter(custom_importers_table, typeof(Optional<ulong>), typeof(long), importer);
			importer = delegate(object input)
			{
				Optional<bool> optional13 = new Optional<bool>();
				optional13.SetValue(Convert.ToBoolean(input));
				return optional13;
			};
			RegisterImporter(custom_importers_table, typeof(Optional<bool>), typeof(bool), importer);
			importer = delegate(object input)
			{
				Optional<string> optional12 = new Optional<string>();
				optional12.SetValue(Convert.ToString(input));
				return optional12;
			};
			RegisterImporter(custom_importers_table, typeof(Optional<string>), typeof(string), importer);
			importer = delegate(object input)
			{
				Optional<CLIENT_ROLE_TYPE> optional11 = new Optional<CLIENT_ROLE_TYPE>();
				optional11.SetValue((CLIENT_ROLE_TYPE)Convert.ToInt16(input));
				return optional11;
			};
			RegisterImporter(custom_importers_table, typeof(Optional<CLIENT_ROLE_TYPE>), typeof(int), importer);
			importer = delegate(object input)
			{
				Optional<CLIENT_ROLE_TYPE> optional10 = new Optional<CLIENT_ROLE_TYPE>();
				optional10.SetValue((CLIENT_ROLE_TYPE)Convert.ToUInt64(input));
				return optional10;
			};
			RegisterImporter(custom_importers_table, typeof(Optional<CLIENT_ROLE_TYPE>), typeof(long), importer);
			importer = delegate(object input)
			{
				Optional<AUDIENCE_LATENCY_LEVEL_TYPE> optional9 = new Optional<AUDIENCE_LATENCY_LEVEL_TYPE>();
				optional9.SetValue((AUDIENCE_LATENCY_LEVEL_TYPE)Convert.ToInt16(input));
				return optional9;
			};
			RegisterImporter(custom_importers_table, typeof(Optional<AUDIENCE_LATENCY_LEVEL_TYPE>), typeof(int), importer);
			importer = delegate(object input)
			{
				Optional<AUDIENCE_LATENCY_LEVEL_TYPE> optional8 = new Optional<AUDIENCE_LATENCY_LEVEL_TYPE>();
				optional8.SetValue((AUDIENCE_LATENCY_LEVEL_TYPE)Convert.ToUInt64(input));
				return optional8;
			};
			RegisterImporter(custom_importers_table, typeof(Optional<AUDIENCE_LATENCY_LEVEL_TYPE>), typeof(long), importer);
			importer = delegate(object input)
			{
				Optional<VIDEO_STREAM_TYPE> optional7 = new Optional<VIDEO_STREAM_TYPE>();
				optional7.SetValue((VIDEO_STREAM_TYPE)Convert.ToInt16(input));
				return optional7;
			};
			RegisterImporter(custom_importers_table, typeof(Optional<VIDEO_STREAM_TYPE>), typeof(int), importer);
			importer = delegate(object input)
			{
				Optional<VIDEO_STREAM_TYPE> optional6 = new Optional<VIDEO_STREAM_TYPE>();
				optional6.SetValue((VIDEO_STREAM_TYPE)Convert.ToUInt64(input));
				return optional6;
			};
			RegisterImporter(custom_importers_table, typeof(Optional<VIDEO_STREAM_TYPE>), typeof(long), importer);
			importer = delegate(object input)
			{
				Optional<CHANNEL_PROFILE_TYPE> optional5 = new Optional<CHANNEL_PROFILE_TYPE>();
				optional5.SetValue((CHANNEL_PROFILE_TYPE)Convert.ToInt16(input));
				return optional5;
			};
			RegisterImporter(custom_importers_table, typeof(Optional<CHANNEL_PROFILE_TYPE>), typeof(int), importer);
			importer = delegate(object input)
			{
				Optional<CHANNEL_PROFILE_TYPE> optional4 = new Optional<CHANNEL_PROFILE_TYPE>();
				optional4.SetValue((CHANNEL_PROFILE_TYPE)Convert.ToUInt64(input));
				return optional4;
			};
			RegisterImporter(custom_importers_table, typeof(Optional<CHANNEL_PROFILE_TYPE>), typeof(long), importer);
			importer = delegate(object input)
			{
				Optional<THREAD_PRIORITY_TYPE> optional3 = new Optional<THREAD_PRIORITY_TYPE>();
				optional3.SetValue((THREAD_PRIORITY_TYPE)Convert.ToInt16(input));
				return optional3;
			};
			RegisterImporter(custom_importers_table, typeof(Optional<THREAD_PRIORITY_TYPE>), typeof(int), importer);
			importer = delegate(object input)
			{
				Optional<THREAD_PRIORITY_TYPE> optional2 = new Optional<THREAD_PRIORITY_TYPE>();
				optional2.SetValue((THREAD_PRIORITY_TYPE)Convert.ToUInt64(input));
				return optional2;
			};
			RegisterImporter(custom_importers_table, typeof(Optional<THREAD_PRIORITY_TYPE>), typeof(long), importer);
			importer = delegate(object input)
			{
				Optional<CacheStatistics> optional = new Optional<CacheStatistics>();
				optional.SetValue(ToObject<CacheStatistics>((string)input));
				return optional;
			};
			RegisterImporter(custom_importers_table, typeof(Optional<CacheStatistics>), typeof(string), importer);
		}

		private static void RegisterImporter(IDictionary<Type, IDictionary<Type, ImporterFunc>> table, Type json_type, Type value_type, ImporterFunc importer)
		{
			if (!table.ContainsKey(json_type))
			{
				table.Add(json_type, new Dictionary<Type, ImporterFunc>());
			}
			table[json_type][value_type] = importer;
		}

		public static void WriteValue(object obj, JsonWriter writer, bool writer_is_private, int depth)
		{
			if (depth > max_nesting_depth)
			{
				throw new JsonException($"Max allowed object depth reached while trying to export from type {obj.GetType()}");
			}
			if (obj == null)
			{
				writer.Write(null);
				return;
			}
			if (obj is OptionalJsonParse)
			{
				((OptionalJsonParse)obj).ToJson(writer);
				return;
			}
			if (obj is IJsonWrapper)
			{
				if (writer_is_private)
				{
					writer.TextWriter.Write(((IJsonWrapper)obj).ToJson());
				}
				else
				{
					((IJsonWrapper)obj).ToJson(writer);
				}
				return;
			}
			if (obj is string)
			{
				writer.Write((string)obj);
				return;
			}
			if (obj is double)
			{
				writer.Write((double)obj);
				return;
			}
			if (obj is float)
			{
				writer.Write((float)obj);
				return;
			}
			if (obj is int)
			{
				writer.Write((int)obj);
				return;
			}
			if (obj is bool)
			{
				writer.Write((bool)obj);
				return;
			}
			if (obj is long)
			{
				writer.Write((long)obj);
				return;
			}
			if (obj is Array)
			{
				writer.WriteArrayStart();
				foreach (object item in (Array)obj)
				{
					WriteValue(item, writer, writer_is_private, depth + 1);
				}
				writer.WriteArrayEnd();
				return;
			}
			if (obj is IList)
			{
				writer.WriteArrayStart();
				foreach (object item2 in (IList)obj)
				{
					WriteValue(item2, writer, writer_is_private, depth + 1);
				}
				writer.WriteArrayEnd();
				return;
			}
			if (obj is IDictionary)
			{
				writer.WriteObjectStart();
				foreach (DictionaryEntry item3 in (IDictionary)obj)
				{
					writer.WritePropertyName((string)item3.Key);
					WriteValue(item3.Value, writer, writer_is_private, depth + 1);
				}
				writer.WriteObjectEnd();
				return;
			}
			Type type = obj.GetType();
			if (custom_exporters_table.ContainsKey(type))
			{
				custom_exporters_table[type](obj, writer);
				return;
			}
			if (base_exporters_table.ContainsKey(type))
			{
				base_exporters_table[type](obj, writer);
				return;
			}
			if (obj is Enum)
			{
				Type underlyingType = Enum.GetUnderlyingType(type);
				if (underlyingType == typeof(long))
				{
					writer.Write((long)obj);
				}
				else if (underlyingType == typeof(uint))
				{
					writer.Write((uint)obj);
				}
				else if (underlyingType == typeof(ulong))
				{
					writer.Write((ulong)obj);
				}
				else if (underlyingType == typeof(ushort))
				{
					writer.Write((ushort)obj);
				}
				else if (underlyingType == typeof(short))
				{
					writer.Write((short)obj);
				}
				else if (underlyingType == typeof(byte))
				{
					writer.Write((byte)obj);
				}
				else if (underlyingType == typeof(sbyte))
				{
					writer.Write((sbyte)obj);
				}
				else
				{
					writer.Write((int)obj);
				}
				return;
			}
			AddTypeProperties(type);
			IList<PropertyMetadata> list = type_properties[type];
			writer.WriteObjectStart();
			foreach (PropertyMetadata item4 in list)
			{
				if (item4.IsField)
				{
					writer.WritePropertyName(item4.Info.Name);
					WriteValue(((FieldInfo)item4.Info).GetValue(obj), writer, writer_is_private, depth + 1);
					continue;
				}
				PropertyInfo propertyInfo = (PropertyInfo)item4.Info;
				if (propertyInfo.CanRead)
				{
					writer.WritePropertyName(item4.Info.Name);
					WriteValue(propertyInfo.GetValue(obj, null), writer, writer_is_private, depth + 1);
				}
			}
			writer.WriteObjectEnd();
		}

		public static string ToJson(object obj)
		{
			lock (static_writer_lock)
			{
				static_writer.Reset();
				WriteValue(obj, static_writer, writer_is_private: false, 0);
				return static_writer.ToString();
			}
		}

		public static void ToJson(object obj, JsonWriter writer)
		{
			WriteValue(obj, writer, writer_is_private: false, 0);
		}

		public static JsonData ToObject(JsonReader reader)
		{
			return (JsonData)ToWrapper(() => new JsonData(), reader);
		}

		public static JsonData ToObject(TextReader reader)
		{
			JsonReader reader2 = new JsonReader(reader);
			return (JsonData)ToWrapper(() => new JsonData(), reader2);
		}

		public static JsonData ToObject(string json)
		{
			return (JsonData)ToWrapper(() => new JsonData(), json);
		}

		public static T ToObject<T>(JsonReader reader)
		{
			return (T)ReadValue(typeof(T), reader);
		}

		public static T ToObject<T>(TextReader reader)
		{
			JsonReader reader2 = new JsonReader(reader);
			return (T)ReadValue(typeof(T), reader2);
		}

		public static T ToObject<T>(string json)
		{
			JsonReader reader = new JsonReader(json);
			return (T)ReadValue(typeof(T), reader);
		}

		public static object ToObject(string json, Type ConvertType)
		{
			JsonReader reader = new JsonReader(json);
			return ReadValue(ConvertType, reader);
		}

		public static IJsonWrapper ToWrapper(WrapperFactory factory, JsonReader reader)
		{
			return ReadValue(factory, reader);
		}

		public static IJsonWrapper ToWrapper(WrapperFactory factory, string json)
		{
			JsonReader reader = new JsonReader(json);
			return ReadValue(factory, reader);
		}

		public static void RegisterExporter<T>(ExporterFunc<T> exporter)
		{
			ExporterFunc value = delegate(object obj, JsonWriter writer)
			{
				exporter((T)obj, writer);
			};
			custom_exporters_table[typeof(T)] = value;
		}

		public static void RegisterImporter<TJson, TValue>(ImporterFunc<TJson, TValue> importer)
		{
			ImporterFunc importer2 = (object input) => importer((TJson)input);
			RegisterImporter(custom_importers_table, typeof(TJson), typeof(TValue), importer2);
		}

		public static void UnregisterExporters()
		{
			custom_exporters_table.Clear();
		}

		public static void UnregisterImporters()
		{
			custom_importers_table.Clear();
		}
	}
	public class JsonMockWrapper : IJsonWrapper, IList, ICollection, IEnumerable, IOrderedDictionary, IDictionary
	{
		public bool IsArray => false;

		public bool IsBoolean => false;

		public bool IsDouble => false;

		public bool IsInt => false;

		public bool IsUInt => false;

		public bool IsLong => false;

		public bool IsULong => false;

		public bool IsObject => false;

		public bool IsString => false;

		bool IList.IsFixedSize => true;

		bool IList.IsReadOnly => true;

		object IList.this[int index]
		{
			get
			{
				return null;
			}
			set
			{
			}
		}

		int ICollection.Count => 0;

		bool ICollection.IsSynchronized => false;

		object ICollection.SyncRoot => null;

		bool IDictionary.IsFixedSize => true;

		bool IDictionary.IsReadOnly => true;

		ICollection IDictionary.Keys => null;

		ICollection IDictionary.Values => null;

		object IDictionary.this[object key]
		{
			get
			{
				return null;
			}
			set
			{
			}
		}

		object IOrderedDictionary.this[int idx]
		{
			get
			{
				return null;
			}
			set
			{
			}
		}

		public bool GetBoolean()
		{
			return false;
		}

		public double GetDouble()
		{
			return 0.0;
		}

		public int GetInt()
		{
			return 0;
		}

		public uint GetUInt()
		{
			return 0u;
		}

		public JsonType GetJsonType()
		{
			return JsonType.None;
		}

		public long GetLong()
		{
			return 0L;
		}

		public ulong GetULong()
		{
			return 0uL;
		}

		public string GetString()
		{
			return "";
		}

		public void SetBoolean(bool val)
		{
		}

		public void SetDouble(double val)
		{
		}

		public void SetInt(int val)
		{
		}

		public void SetUInt(uint val)
		{
		}

		public void SetJsonType(JsonType type)
		{
		}

		public void SetLong(long val)
		{
		}

		public void SetULong(ulong val)
		{
		}

		public void SetString(string val)
		{
		}

		public string ToJson()
		{
			return "";
		}

		public void ToJson(JsonWriter writer)
		{
		}

		int IList.Add(object value)
		{
			return 0;
		}

		void IList.Clear()
		{
		}

		bool IList.Contains(object value)
		{
			return false;
		}

		int IList.IndexOf(object value)
		{
			return -1;
		}

		void IList.Insert(int i, object v)
		{
		}

		void IList.Remove(object value)
		{
		}

		void IList.RemoveAt(int index)
		{
		}

		void ICollection.CopyTo(Array array, int index)
		{
		}

		IEnumerator IEnumerable.GetEnumerator()
		{
			return null;
		}

		void IDictionary.Add(object k, object v)
		{
		}

		void IDictionary.Clear()
		{
		}

		bool IDictionary.Contains(object key)
		{
			return false;
		}

		void IDictionary.Remove(object key)
		{
		}

		IDictionaryEnumerator IDictionary.GetEnumerator()
		{
			return null;
		}

		IDictionaryEnumerator IOrderedDictionary.GetEnumerator()
		{
			return null;
		}

		void IOrderedDictionary.Insert(int i, object k, object v)
		{
		}

		void IOrderedDictionary.RemoveAt(int i)
		{
		}
	}
	public enum JsonToken
	{
		None,
		ObjectStart,
		PropertyName,
		ObjectEnd,
		ArrayStart,
		ArrayEnd,
		Int,
		UInt,
		Long,
		ULong,
		Double,
		String,
		Boolean,
		Null
	}
	public class JsonReader
	{
		private static readonly IDictionary<int, IDictionary<int, int[]>> parse_table;

		private Stack<int> automaton_stack;

		private int current_input;

		private int current_symbol;

		private bool end_of_json;

		private bool end_of_input;

		private Lexer lexer;

		private bool parser_in_string;

		private bool parser_return;

		private bool read_started;

		private TextReader reader;

		private bool reader_is_owned;

		private bool skip_non_members;

		private object token_value;

		private JsonToken token;

		public bool AllowComments
		{
			get
			{
				return lexer.AllowComments;
			}
			set
			{
				lexer.AllowComments = value;
			}
		}

		public bool AllowSingleQuotedStrings
		{
			get
			{
				return lexer.AllowSingleQuotedStrings;
			}
			set
			{
				lexer.AllowSingleQuotedStrings = value;
			}
		}

		public bool SkipNonMembers
		{
			get
			{
				return skip_non_members;
			}
			set
			{
				skip_non_members = value;
			}
		}

		public bool EndOfInput => end_of_input;

		public bool EndOfJson => end_of_json;

		public JsonToken Token => token;

		public object Value => token_value;

		static JsonReader()
		{
			parse_table = PopulateParseTable();
		}

		public JsonReader(string json_text)
			: this(new StringReader(json_text), owned: true)
		{
		}

		public JsonReader(TextReader reader)
			: this(reader, owned: false)
		{
		}

		private JsonReader(TextReader reader, bool owned)
		{
			if (reader == null)
			{
				throw new ArgumentNullException("reader");
			}
			parser_in_string = false;
			parser_return = false;
			read_started = false;
			automaton_stack = new Stack<int>();
			automaton_stack.Push(65553);
			automaton_stack.Push(65543);
			lexer = new Lexer(reader);
			end_of_input = false;
			end_of_json = false;
			skip_non_members = true;
			this.reader = reader;
			reader_is_owned = owned;
		}

		private static IDictionary<int, IDictionary<int, int[]>> PopulateParseTable()
		{
			IDictionary<int, IDictionary<int, int[]>> result = new Dictionary<int, IDictionary<int, int[]>>();
			TableAddRow(result, ParserToken.Array);
			TableAddCol(result, ParserToken.Array, 91, 91, 65549);
			TableAddRow(result, ParserToken.ArrayPrime);
			TableAddCol(result, ParserToken.ArrayPrime, 34, 65550, 65551, 93);
			TableAddCol(result, ParserToken.ArrayPrime, 91, 65550, 65551, 93);
			TableAddCol(result, ParserToken.ArrayPrime, 93, 93);
			TableAddCol(result, ParserToken.ArrayPrime, 123, 65550, 65551, 93);
			TableAddCol(result, ParserToken.ArrayPrime, 65537, 65550, 65551, 93);
			TableAddCol(result, ParserToken.ArrayPrime, 65538, 65550, 65551, 93);
			TableAddCol(result, ParserToken.ArrayPrime, 65539, 65550, 65551, 93);
			TableAddCol(result, ParserToken.ArrayPrime, 65540, 65550, 65551, 93);
			TableAddRow(result, ParserToken.Object);
			TableAddCol(result, ParserToken.Object, 123, 123, 65545);
			TableAddRow(result, ParserToken.ObjectPrime);
			TableAddCol(result, ParserToken.ObjectPrime, 34, 65546, 65547, 125);
			TableAddCol(result, ParserToken.ObjectPrime, 125, 125);
			TableAddRow(result, ParserToken.Pair);
			TableAddCol(result, ParserToken.Pair, 34, 65552, 58, 65550);
			TableAddRow(result, ParserToken.PairRest);
			TableAddCol(result, ParserToken.PairRest, 44, 44, 65546, 65547);
			TableAddCol(result, ParserToken.PairRest, 125, 65554);
			TableAddRow(result, ParserToken.String);
			TableAddCol(result, ParserToken.String, 34, 34, 65541, 34);
			TableAddRow(result, ParserToken.Text);
			TableAddCol(result, ParserToken.Text, 91, 65548);
			TableAddCol(result, ParserToken.Text, 123, 65544);
			TableAddRow(result, ParserToken.Value);
			TableAddCol(result, ParserToken.Value, 34, 65552);
			TableAddCol(result, ParserToken.Value, 91, 65548);
			TableAddCol(result, ParserToken.Value, 123, 65544);
			TableAddCol(result, ParserToken.Value, 65537, 65537);
			TableAddCol(result, ParserToken.Value, 65538, 65538);
			TableAddCol(result, ParserToken.Value, 65539, 65539);
			TableAddCol(result, ParserToken.Value, 65540, 65540);
			TableAddRow(result, ParserToken.ValueRest);
			TableAddCol(result, ParserToken.ValueRest, 44, 44, 65550, 65551);
			TableAddCol(result, ParserToken.ValueRest, 93, 65554);
			return result;
		}

		private static void TableAddCol(IDictionary<int, IDictionary<int, int[]>> parse_table, ParserToken row, int col, params int[] symbols)
		{
			parse_table[(int)row].Add(col, symbols);
		}

		private static void TableAddRow(IDictionary<int, IDictionary<int, int[]>> parse_table, ParserToken rule)
		{
			parse_table.Add((int)rule, new Dictionary<int, int[]>());
		}

		private void ProcessNumber(string number)
		{
			int result2;
			uint result3;
			long result4;
			ulong result5;
			if ((number.IndexOf('.') != -1 || number.IndexOf('e') != -1 || number.IndexOf('E') != -1) && double.TryParse(number, NumberStyles.Any, CultureInfo.InvariantCulture, out var result))
			{
				token = JsonToken.Double;
				token_value = result;
			}
			else if (int.TryParse(number, NumberStyles.Integer, CultureInfo.InvariantCulture, out result2))
			{
				token = JsonToken.Int;
				token_value = result2;
			}
			else if (uint.TryParse(number, NumberStyles.Integer, CultureInfo.InvariantCulture, out result3))
			{
				token = JsonToken.UInt;
				token_value = result3;
			}
			else if (long.TryParse(number, NumberStyles.Integer, CultureInfo.InvariantCulture, out result4))
			{
				token = JsonToken.Long;
				token_value = result4;
			}
			else if (ulong.TryParse(number, NumberStyles.Integer, CultureInfo.InvariantCulture, out result5))
			{
				token = JsonToken.ULong;
				token_value = result5;
			}
			else
			{
				token = JsonToken.Int;
				token_value = 0;
			}
		}

		private void ProcessSymbol()
		{
			if (current_symbol == 91)
			{
				token = JsonToken.ArrayStart;
				parser_return = true;
			}
			else if (current_symbol == 93)
			{
				token = JsonToken.ArrayEnd;
				parser_return = true;
			}
			else if (current_symbol == 123)
			{
				token = JsonToken.ObjectStart;
				parser_return = true;
			}
			else if (current_symbol == 125)
			{
				token = JsonToken.ObjectEnd;
				parser_return = true;
			}
			else if (current_symbol == 34)
			{
				if (parser_in_string)
				{
					parser_in_string = false;
					parser_return = true;
					return;
				}
				if (token == JsonToken.None)
				{
					token = JsonToken.String;
				}
				parser_in_string = true;
			}
			else if (current_symbol == 65541)
			{
				token_value = lexer.StringValue;
			}
			else if (current_symbol == 65539)
			{
				token = JsonToken.Boolean;
				token_value = false;
				parser_return = true;
			}
			else if (current_symbol == 65540)
			{
				token = JsonToken.Null;
				parser_return = true;
			}
			else if (current_symbol == 65537)
			{
				ProcessNumber(lexer.StringValue);
				parser_return = true;
			}
			else if (current_symbol == 65546)
			{
				token = JsonToken.PropertyName;
			}
			else if (current_symbol == 65538)
			{
				token = JsonToken.Boolean;
				token_value = true;
				parser_return = true;
			}
		}

		private bool ReadToken()
		{
			if (end_of_input)
			{
				return false;
			}
			lexer.NextToken();
			if (lexer.EndOfInput)
			{
				Close();
				return false;
			}
			current_input = lexer.Token;
			return true;
		}

		public void Close()
		{
			if (end_of_input)
			{
				return;
			}
			end_of_input = true;
			end_of_json = true;
			if (reader_is_owned)
			{
				using (reader)
				{
				}
			}
			reader = null;
		}

		public bool Read()
		{
			if (end_of_input)
			{
				return false;
			}
			if (end_of_json)
			{
				end_of_json = false;
				automaton_stack.Clear();
				automaton_stack.Push(65553);
				automaton_stack.Push(65543);
			}
			parser_in_string = false;
			parser_return = false;
			token = JsonToken.None;
			token_value = null;
			if (!read_started)
			{
				read_started = true;
				if (!ReadToken())
				{
					return false;
				}
			}
			while (true)
			{
				if (parser_return)
				{
					if (automaton_stack.Peek() == 65553)
					{
						end_of_json = true;
					}
					return true;
				}
				current_symbol = automaton_stack.Pop();
				ProcessSymbol();
				if (current_symbol == current_input)
				{
					if (!ReadToken())
					{
						break;
					}
					continue;
				}
				int[] array;
				try
				{
					array = parse_table[current_symbol][current_input];
				}
				catch (KeyNotFoundException inner_exception)
				{
					throw new JsonException((ParserToken)current_input, inner_exception);
				}
				if (array[0] != 65554)
				{
					for (int num = array.Length - 1; num >= 0; num--)
					{
						automaton_stack.Push(array[num]);
					}
				}
			}
			if (automaton_stack.Peek() != 65553)
			{
				throw new JsonException("Input doesn't evaluate to proper JSON text");
			}
			if (parser_return)
			{
				return true;
			}
			return false;
		}
	}
	internal enum Condition
	{
		InArray,
		InObject,
		NotAProperty,
		Property,
		Value
	}
	internal class WriterContext
	{
		public int Count;

		public bool InArray;

		public bool InObject;

		public bool ExpectingValue;

		public int Padding;
	}
	public class JsonWriter
	{
		private static readonly NumberFormatInfo number_format;

		private WriterContext context;

		private Stack<WriterContext> ctx_stack;

		private bool has_reached_end;

		private char[] hex_seq;

		private int indentation;

		private int indent_value;

		private StringBuilder inst_string_builder;

		private bool pretty_print;

		private bool validate;

		private bool lower_case_properties;

		private TextWriter writer;

		public int IndentValue
		{
			get
			{
				return indent_value;
			}
			set
			{
				indentation = indentation / indent_value * value;
				indent_value = value;
			}
		}

		public bool PrettyPrint
		{
			get
			{
				return pretty_print;
			}
			set
			{
				pretty_print = value;
			}
		}

		public TextWriter TextWriter => writer;

		public bool Validate
		{
			get
			{
				return validate;
			}
			set
			{
				validate = value;
			}
		}

		public bool LowerCaseProperties
		{
			get
			{
				return lower_case_properties;
			}
			set
			{
				lower_case_properties = value;
			}
		}

		static JsonWriter()
		{
			number_format = NumberFormatInfo.InvariantInfo;
		}

		public JsonWriter()
		{
			inst_string_builder = new StringBuilder();
			writer = new StringWriter(inst_string_builder);
			Init();
		}

		public JsonWriter(StringBuilder sb)
			: this(new StringWriter(sb))
		{
		}

		public JsonWriter(TextWriter writer)
		{
			if (writer == null)
			{
				throw new ArgumentNullException("writer");
			}
			this.writer = writer;
			Init();
		}

		private void DoValidation(Condition cond)
		{
			if (!context.ExpectingValue)
			{
				context.Count++;
			}
			if (!validate)
			{
				return;
			}
			if (has_reached_end)
			{
				throw new JsonException("A complete JSON symbol has already been written");
			}
			switch (cond)
			{
			case Condition.InArray:
				if (!context.InArray)
				{
					throw new JsonException("Can't close an array here");
				}
				break;
			case Condition.InObject:
				if (!context.InObject || context.ExpectingValue)
				{
					throw new JsonException("Can't close an object here");
				}
				break;
			case Condition.NotAProperty:
				if (context.InObject && !context.ExpectingValue)
				{
					throw new JsonException("Expected a property");
				}
				break;
			case Condition.Property:
				if (!context.InObject || context.ExpectingValue)
				{
					throw new JsonException("Can't add a property here");
				}
				break;
			case Condition.Value:
				if (!context.InArray && (!context.InObject || !context.ExpectingValue))
				{
					throw new JsonException("Can't add a value here");
				}
				break;
			}
		}

		private void Init()
		{
			has_reached_end = false;
			hex_seq = new char[4];
			indentation = 0;
			indent_value = 4;
			pretty_print = false;
			validate = true;
			lower_case_properties = false;
			ctx_stack = new Stack<WriterContext>();
			context = new WriterContext();
			ctx_stack.Push(context);
		}

		private static void IntToHex(int n, char[] hex)
		{
			for (int i = 0; i < 4; i++)
			{
				int num = n % 16;
				if (num < 10)
				{
					hex[3 - i] = (char)(48 + num);
				}
				else
				{
					hex[3 - i] = (char)(65 + (num - 10));
				}
				n >>= 4;
			}
		}

		private void Indent()
		{
			if (pretty_print)
			{
				indentation += indent_value;
			}
		}

		private void Put(string str)
		{
			if (pretty_print && !context.ExpectingValue)
			{
				for (int i = 0; i < indentation; i++)
				{
					writer.Write(' ');
				}
			}
			writer.Write(str);
		}

		private void PutNewline()
		{
			PutNewline(add_comma: true);
		}

		private void PutNewline(bool add_comma)
		{
			if (add_comma && !context.ExpectingValue && context.Count > 1)
			{
				writer.Write(',');
			}
			if (pretty_print && !context.ExpectingValue)
			{
				writer.Write(Environment.NewLine);
			}
		}

		private void PutString(string str)
		{
			Put(string.Empty);
			writer.Write('"');
			int length = str.Length;
			for (int i = 0; i < length; i++)
			{
				switch (str[i])
				{
				case '\n':
					writer.Write("\\n");
					continue;
				case '\r':
					writer.Write("\\r");
					continue;
				case '\t':
					writer.Write("\\t");
					continue;
				case '"':
				case '\\':
					writer.Write('\\');
					writer.Write(str[i]);
					continue;
				case '\f':
					writer.Write("\\f");
					continue;
				case '\b':
					writer.Write("\\b");
					continue;
				}
				if (str[i] >= ' ' && str[i] <= '~')
				{
					writer.Write(str[i]);
					continue;
				}
				IntToHex(str[i], hex_seq);
				writer.Write("\\u");
				writer.Write(hex_seq);
			}
			writer.Write('"');
		}

		private void Unindent()
		{
			if (pretty_print)
			{
				indentation -= indent_value;
			}
		}

		public override string ToString()
		{
			if (inst_string_builder == null)
			{
				return string.Empty;
			}
			return inst_string_builder.ToString();
		}

		public void Reset()
		{
			has_reached_end = false;
			ctx_stack.Clear();
			context = new WriterContext();
			ctx_stack.Push(context);
			if (inst_string_builder != null)
			{
				inst_string_builder.Remove(0, inst_string_builder.Length);
			}
		}

		public void Write(bool boolean)
		{
			DoValidation(Condition.Value);
			PutNewline();
			Put(boolean ? "true" : "false");
			context.ExpectingValue = false;
		}

		public void Write(decimal number)
		{
			DoValidation(Condition.Value);
			PutNewline();
			Put(Convert.ToString(number, number_format));
			context.ExpectingValue = false;
		}

		public void Write(double number)
		{
			DoValidation(Condition.Value);
			PutNewline();
			string text = Convert.ToString(number, number_format);
			Put(text);
			if (text.IndexOf('.') == -1 && text.IndexOf('E') == -1)
			{
				writer.Write(".0");
			}
			context.ExpectingValue = false;
		}

		public void Write(float number)
		{
			DoValidation(Condition.Value);
			PutNewline();
			string str = Convert.ToString(number, number_format);
			Put(str);
			context.ExpectingValue = false;
		}

		public void Write(int number)
		{
			DoValidation(Condition.Value);
			PutNewline();
			Put(Convert.ToString(number, number_format));
			context.ExpectingValue = false;
		}

		public void Write(long number)
		{
			DoValidation(Condition.Value);
			PutNewline();
			Put(Convert.ToString(number, number_format));
			context.ExpectingValue = false;
		}

		public void Write(string str)
		{
			DoValidation(Condition.Value);
			PutNewline();
			if (str == null)
			{
				Put("null");
			}
			else
			{
				PutString(str);
			}
			context.ExpectingValue = false;
		}

		[CLSCompliant(false)]
		public void Write(ulong number)
		{
			DoValidation(Condition.Value);
			PutNewline();
			Put(Convert.ToString(number, number_format));
			context.ExpectingValue = false;
		}

		public void WriteArrayEnd()
		{
			DoValidation(Condition.InArray);
			PutNewline(add_comma: false);
			ctx_stack.Pop();
			if (ctx_stack.Count == 1)
			{
				has_reached_end = true;
			}
			else
			{
				context = ctx_stack.Peek();
				context.ExpectingValue = false;
			}
			Unindent();
			Put("]");
		}

		public void WriteArrayStart()
		{
			DoValidation(Condition.NotAProperty);
			PutNewline();
			Put("[");
			context = new WriterContext();
			context.InArray = true;
			ctx_stack.Push(context);
			Indent();
		}

		public void WriteObjectEnd()
		{
			DoValidation(Condition.InObject);
			PutNewline(add_comma: false);
			ctx_stack.Pop();
			if (ctx_stack.Count == 1)
			{
				has_reached_end = true;
			}
			else
			{
				context = ctx_stack.Peek();
				context.ExpectingValue = false;
			}
			Unindent();
			Put("}");
		}

		public void WriteObjectStart()
		{
			DoValidation(Condition.NotAProperty);
			PutNewline();
			Put("{");
			context = new WriterContext();
			context.InObject = true;
			ctx_stack.Push(context);
			Indent();
		}

		public void WritePropertyName(string property_name)
		{
			DoValidation(Condition.Property);
			PutNewline();
			string text = ((property_name == null || !lower_case_properties) ? property_name : property_name.ToLowerInvariant());
			PutString(text);
			if (pretty_print)
			{
				if (text.Length > context.Padding)
				{
					context.Padding = text.Length;
				}
				for (int num = context.Padding - text.Length; num >= 0; num--)
				{
					writer.Write(' ');
				}
				writer.Write(": ");
			}
			else
			{
				writer.Write(':');
			}
			context.ExpectingValue = true;
		}
	}
	internal class FsmContext
	{
		public bool Return;

		public int NextState;

		public Lexer L;

		public int StateStack;
	}
	internal class Lexer
	{
		private delegate bool StateHandler(FsmContext ctx);

		private static readonly int[] fsm_return_table;

		private static readonly StateHandler[] fsm_handler_table;

		private bool allow_comments;

		private bool allow_single_quoted_strings;

		private bool end_of_input;

		private FsmContext fsm_context;

		private int input_buffer;

		private int input_char;

		private TextReader reader;

		private int state;

		private StringBuilder string_buffer;

		private string string_value;

		private int token;

		private int unichar;

		public bool AllowComments
		{
			get
			{
				return allow_comments;
			}
			set
			{
				allow_comments = value;
			}
		}

		public bool AllowSingleQuotedStrings
		{
			get
			{
				return allow_single_quoted_strings;
			}
			set
			{
				allow_single_quoted_strings = value;
			}
		}

		public bool EndOfInput => end_of_input;

		public int Token => token;

		public string StringValue => string_value;

		static Lexer()
		{
			PopulateFsmTables(out fsm_handler_table, out fsm_return_table);
		}

		public Lexer(TextReader reader)
		{
			allow_comments = true;
			allow_single_quoted_strings = true;
			input_buffer = 0;
			string_buffer = new StringBuilder(128);
			state = 1;
			end_of_input = false;
			this.reader = reader;
			fsm_context = new FsmContext();
			fsm_context.L = this;
		}

		private static int HexValue(int digit)
		{
			switch (digit)
			{
			case 65:
			case 97:
				return 10;
			case 66:
			case 98:
				return 11;
			case 67:
			case 99:
				return 12;
			case 68:
			case 100:
				return 13;
			case 69:
			case 101:
				return 14;
			case 70:
			case 102:
				return 15;
			default:
				return digit - 48;
			}
		}

		private static void PopulateFsmTables(out StateHandler[] fsm_handler_table, out int[] fsm_return_table)
		{
			fsm_handler_table = new StateHandler[28]
			{
				State1, State2, State3, State4, State5, State6, State7, State8, State9, State10,
				State11, State12, State13, State14, State15, State16, State17, State18, State19, State20,
				State21, State22, State23, State24, State25, State26, State27, State28
			};
			fsm_return_table = new int[28]
			{
				65542, 0, 65537, 65537, 0, 65537, 0, 65537, 0, 0,
				65538, 0, 0, 0, 65539, 0, 0, 65540, 65541, 65542,
				0, 0, 65541, 65542, 0, 0, 0, 0
			};
		}

		private static char ProcessEscChar(int esc_char)
		{
			switch (esc_char)
			{
			case 34:
			case 39:
			case 47:
			case 92:
				return Convert.ToChar(esc_char);
			case 110:
				return '\n';
			case 116:
				return '\t';
			case 114:
				return '\r';
			case 98:
				return '\b';
			case 102:
				return '\f';
			default:
				return '?';
			}
		}

		private static bool State1(FsmContext ctx)
		{
			while (ctx.L.GetChar())
			{
				if (ctx.L.input_char == 32 || (ctx.L.input_char >= 9 && ctx.L.input_char <= 13))
				{
					continue;
				}
				if (ctx.L.input_char >= 49 && ctx.L.input_char <= 57)
				{
					ctx.L.string_buffer.Append((char)ctx.L.input_char);
					ctx.NextState = 3;
					return true;
				}
				switch (ctx.L.input_char)
				{
				case 34:
					ctx.NextState = 19;
					ctx.Return = true;
					return true;
				case 44:
				case 58:
				case 91:
				case 93:
				case 123:
				case 125:
					ctx.NextState = 1;
					ctx.Return = true;
					return true;
				case 45:
					ctx.L.string_buffer.Append((char)ctx.L.input_char);
					ctx.NextState = 2;
					return true;
				case 48:
					ctx.L.string_buffer.Append((char)ctx.L.input_char);
					ctx.NextState = 4;
					return true;
				case 102:
					ctx.NextState = 12;
					return true;
				case 110:
					ctx.NextState = 16;
					return true;
				case 116:
					ctx.NextState = 9;
					return true;
				case 39:
					if (!ctx.L.allow_single_quoted_strings)
					{
						return false;
					}
					ctx.L.input_char = 34;
					ctx.NextState = 23;
					ctx.Return = true;
					return true;
				case 47:
					if (!ctx.L.allow_comments)
					{
						return false;
					}
					ctx.NextState = 25;
					return true;
				default:
					return false;
				}
			}
			return true;
		}

		private static bool State2(FsmContext ctx)
		{
			ctx.L.GetChar();
			if (ctx.L.input_char >= 49 && ctx.L.input_char <= 57)
			{
				ctx.L.string_buffer.Append((char)ctx.L.input_char);
				ctx.NextState = 3;
				return true;
			}
			if (ctx.L.input_char == 48)
			{
				ctx.L.string_buffer.Append((char)ctx.L.input_char);
				ctx.NextState = 4;
				return true;
			}
			return false;
		}

		private static bool State3(FsmContext ctx)
		{
			while (ctx.L.GetChar())
			{
				if (ctx.L.input_char >= 48 && ctx.L.input_char <= 57)
				{
					ctx.L.string_buffer.Append((char)ctx.L.input_char);
					continue;
				}
				if (ctx.L.input_char == 32 || (ctx.L.input_char >= 9 && ctx.L.input_char <= 13))
				{
					ctx.Return = true;
					ctx.NextState = 1;
					return true;
				}
				switch (ctx.L.input_char)
				{
				case 44:
				case 93:
				case 125:
					ctx.L.UngetChar();
					ctx.Return = true;
					ctx.NextState = 1;
					return true;
				case 46:
					ctx.L.string_buffer.Append((char)ctx.L.input_char);
					ctx.NextState = 5;
					return true;
				case 69:
				case 101:
					ctx.L.string_buffer.Append((char)ctx.L.input_char);
					ctx.NextState = 7;
					return true;
				default:
					return false;
				}
			}
			return true;
		}

		private static bool State4(FsmContext ctx)
		{
			ctx.L.GetChar();
			if (ctx.L.input_char == 32 || (ctx.L.input_char >= 9 && ctx.L.input_char <= 13))
			{
				ctx.Return = true;
				ctx.NextState = 1;
				return true;
			}
			switch (ctx.L.input_char)
			{
			case 44:
			case 93:
			case 125:
				ctx.L.UngetChar();
				ctx.Return = true;
				ctx.NextState = 1;
				return true;
			case 46:
				ctx.L.string_buffer.Append((char)ctx.L.input_char);
				ctx.NextState = 5;
				return true;
			case 69:
			case 101:
				ctx.L.string_buffer.Append((char)ctx.L.input_char);
				ctx.NextState = 7;
				return true;
			default:
				return false;
			}
		}

		private static bool State5(FsmContext ctx)
		{
			ctx.L.GetChar();
			if (ctx.L.input_char >= 48 && ctx.L.input_char <= 57)
			{
				ctx.L.string_buffer.Append((char)ctx.L.input_char);
				ctx.NextState = 6;
				return true;
			}
			return false;
		}

		private static bool State6(FsmContext ctx)
		{
			while (ctx.L.GetChar())
			{
				if (ctx.L.input_char >= 48 && ctx.L.input_char <= 57)
				{
					ctx.L.string_buffer.Append((char)ctx.L.input_char);
					continue;
				}
				if (ctx.L.input_char == 32 || (ctx.L.input_char >= 9 && ctx.L.input_char <= 13))
				{
					ctx.Return = true;
					ctx.NextState = 1;
					return true;
				}
				switch (ctx.L.input_char)
				{
				case 44:
				case 93:
				case 125:
					ctx.L.UngetChar();
					ctx.Return = true;
					ctx.NextState = 1;
					return true;
				case 69:
				case 101:
					ctx.L.string_buffer.Append((char)ctx.L.input_char);
					ctx.NextState = 7;
					return true;
				default:
					return false;
				}
			}
			return true;
		}

		private static bool State7(FsmContext ctx)
		{
			ctx.L.GetChar();
			if (ctx.L.input_char >= 48 && ctx.L.input_char <= 57)
			{
				ctx.L.string_buffer.Append((char)ctx.L.input_char);
				ctx.NextState = 8;
				return true;
			}
			int num = ctx.L.input_char;
			if (num == 43 || num == 45)
			{
				ctx.L.string_buffer.Append((char)ctx.L.input_char);
				ctx.NextState = 8;
				return true;
			}
			return false;
		}

		private static bool State8(FsmContext ctx)
		{
			while (ctx.L.GetChar())
			{
				if (ctx.L.input_char >= 48 && ctx.L.input_char <= 57)
				{
					ctx.L.string_buffer.Append((char)ctx.L.input_char);
					continue;
				}
				if (ctx.L.input_char == 32 || (ctx.L.input_char >= 9 && ctx.L.input_char <= 13))
				{
					ctx.Return = true;
					ctx.NextState = 1;
					return true;
				}
				int num = ctx.L.input_char;
				if (num == 44 || num == 93 || num == 125)
				{
					ctx.L.UngetChar();
					ctx.Return = true;
					ctx.NextState = 1;
					return true;
				}
				return false;
			}
			return true;
		}

		private static bool State9(FsmContext ctx)
		{
			ctx.L.GetChar();
			if (ctx.L.input_char == 114)
			{
				ctx.NextState = 10;
				return true;
			}
			return false;
		}

		private static bool State10(FsmContext ctx)
		{
			ctx.L.GetChar();
			if (ctx.L.input_char == 117)
			{
				ctx.NextState = 11;
				return true;
			}
			return false;
		}

		private static bool State11(FsmContext ctx)
		{
			ctx.L.GetChar();
			if (ctx.L.input_char == 101)
			{
				ctx.Return = true;
				ctx.NextState = 1;
				return true;
			}
			return false;
		}

		private static bool State12(FsmContext ctx)
		{
			ctx.L.GetChar();
			if (ctx.L.input_char == 97)
			{
				ctx.NextState = 13;
				return true;
			}
			return false;
		}

		private static bool State13(FsmContext ctx)
		{
			ctx.L.GetChar();
			if (ctx.L.input_char == 108)
			{
				ctx.NextState = 14;
				return true;
			}
			return false;
		}

		private static bool State14(FsmContext ctx)
		{
			ctx.L.GetChar();
			if (ctx.L.input_char == 115)
			{
				ctx.NextState = 15;
				return true;
			}
			return false;
		}

		private static bool State15(FsmContext ctx)
		{
			ctx.L.GetChar();
			if (ctx.L.input_char == 101)
			{
				ctx.Return = true;
				ctx.NextState = 1;
				return true;
			}
			return false;
		}

		private static bool State16(FsmContext ctx)
		{
			ctx.L.GetChar();
			if (ctx.L.input_char == 117)
			{
				ctx.NextState = 17;
				return true;
			}
			return false;
		}

		private static bool State17(FsmContext ctx)
		{
			ctx.L.GetChar();
			if (ctx.L.input_char == 108)
			{
				ctx.NextState = 18;
				return true;
			}
			return false;
		}

		private static bool State18(FsmContext ctx)
		{
			ctx.L.GetChar();
			if (ctx.L.input_char == 108)
			{
				ctx.Return = true;
				ctx.NextState = 1;
				return true;
			}
			return false;
		}

		private static bool State19(FsmContext ctx)
		{
			while (ctx.L.GetChar())
			{
				switch (ctx.L.input_char)
				{
				case 34:
					ctx.L.UngetChar();
					ctx.Return = true;
					ctx.NextState = 20;
					return true;
				case 92:
					ctx.StateStack = 19;
					ctx.NextState = 21;
					return true;
				}
				ctx.L.string_buffer.Append((char)ctx.L.input_char);
			}
			return true;
		}

		private static bool State20(FsmContext ctx)
		{
			ctx.L.GetChar();
			if (ctx.L.input_char == 34)
			{
				ctx.Return = true;
				ctx.NextState = 1;
				return true;
			}
			return false;
		}

		private static bool State21(FsmContext ctx)
		{
			ctx.L.GetChar();
			switch (ctx.L.input_char)
			{
			case 117:
				ctx.NextState = 22;
				return true;
			case 34:
			case 39:
			case 47:
			case 92:
			case 98:
			case 102:
			case 110:
			case 114:
			case 116:
				ctx.L.string_buffer.Append(ProcessEscChar(ctx.L.input_char));
				ctx.NextState = ctx.StateStack;
				return true;
			default:
				return false;
			}
		}

		private static bool State22(FsmContext ctx)
		{
			int num = 0;
			int num2 = 4096;
			ctx.L.unichar = 0;
			while (ctx.L.GetChar())
			{
				if ((ctx.L.input_char >= 48 && ctx.L.input_char <= 57) || (ctx.L.input_char >= 65 && ctx.L.input_char <= 70) || (ctx.L.input_char >= 97 && ctx.L.input_char <= 102))
				{
					ctx.L.unichar += HexValue(ctx.L.input_char) * num2;
					num++;
					num2 /= 16;
					if (num == 4)
					{
						ctx.L.string_buffer.Append(Convert.ToChar(ctx.L.unichar));
						ctx.NextState = ctx.StateStack;
						return true;
					}
					continue;
				}
				return false;
			}
			return true;
		}

		private static bool State23(FsmContext ctx)
		{
			while (ctx.L.GetChar())
			{
				switch (ctx.L.input_char)
				{
				case 39:
					ctx.L.UngetChar();
					ctx.Return = true;
					ctx.NextState = 24;
					return true;
				case 92:
					ctx.StateStack = 23;
					ctx.NextState = 21;
					return true;
				}
				ctx.L.string_buffer.Append((char)ctx.L.input_char);
			}
			return true;
		}

		private static bool State24(FsmContext ctx)
		{
			ctx.L.GetChar();
			if (ctx.L.input_char == 39)
			{
				ctx.L.input_char = 34;
				ctx.Return = true;
				ctx.NextState = 1;
				return true;
			}
			return false;
		}

		private static bool State25(FsmContext ctx)
		{
			ctx.L.GetChar();
			switch (ctx.L.input_char)
			{
			case 42:
				ctx.NextState = 27;
				return true;
			case 47:
				ctx.NextState = 26;
				return true;
			default:
				return false;
			}
		}

		private static bool State26(FsmContext ctx)
		{
			while (ctx.L.GetChar())
			{
				if (ctx.L.input_char == 10)
				{
					ctx.NextState = 1;
					return true;
				}
			}
			return true;
		}

		private static bool State27(FsmContext ctx)
		{
			while (ctx.L.GetChar())
			{
				if (ctx.L.input_char == 42)
				{
					ctx.NextState = 28;
					return true;
				}
			}
			return true;
		}

		private static bool State28(FsmContext ctx)
		{
			while (ctx.L.GetChar())
			{
				if (ctx.L.input_char != 42)
				{
					if (ctx.L.input_char == 47)
					{
						ctx.NextState = 1;
						return true;
					}
					ctx.NextState = 27;
					return true;
				}
			}
			return true;
		}

		private bool GetChar()
		{
			if ((input_char = NextChar()) != -1)
			{
				return true;
			}
			end_of_input = true;
			return false;
		}

		private int NextChar()
		{
			if (input_buffer != 0)
			{
				int result = input_buffer;
				input_buffer = 0;
				return result;
			}
			return reader.Read();
		}

		public bool NextToken()
		{
			fsm_context.Return = false;
			while (true)
			{
				if (!fsm_handler_table[state - 1](fsm_context))
				{
					throw new JsonException(input_char);
				}
				if (end_of_input)
				{
					return false;
				}
				if (fsm_context.Return)
				{
					break;
				}
				state = fsm_context.NextState;
			}
			string_value = string_buffer.ToString();
			string_buffer.Remove(0, string_buffer.Length);
			token = fsm_return_table[state - 1];
			if (token == 65542)
			{
				token = input_char;
			}
			state = fsm_context.NextState;
			return true;
		}

		private void UngetChar()
		{
			input_buffer = input_char;
		}
	}
	internal enum ParserToken
	{
		None = 65536,
		Number,
		True,
		False,
		Null,
		CharSeq,
		Char,
		Text,
		Object,
		ObjectPrime,
		Pair,
		PairRest,
		Array,
		ArrayPrime,
		Value,
		ValueRest,
		String,
		End,
		Epsilon
	}
}
namespace Agora.Util
{
	public class Logger
	{
		private Text text;

		public Logger(Text text)
		{
			this.text = text;
		}

		public void UpdateLog(string logMessage)
		{
			UnityEngine.Debug.Log(logMessage);
			string text = this.text.text;
			if (text.Length > 400)
			{
				text = text.Substring(text.Length - 50);
			}
			text += "\r\n \r\n";
			text += logMessage;
			this.text.text = text;
		}

		public bool DebugAssert(bool condition, string message)
		{
			if (!condition)
			{
				UpdateLog(message);
				return false;
			}
			return true;
		}
	}
	public class PermissionHelper
	{
		public static void RequestMicrophontPermission()
		{
			if (!Permission.HasUserAuthorizedPermission("android.permission.RECORD_AUDIO"))
			{
				Permission.RequestUserPermission("android.permission.RECORD_AUDIO");
			}
		}

		public static void RequestCameraPermission()
		{
			if (!Permission.HasUserAuthorizedPermission("android.permission.CAMERA"))
			{
				Permission.RequestUserPermission("android.permission.CAMERA");
			}
		}
	}
	public static class HelperClass
	{
		public static IEnumerator FetchToken(string url, string channel, int userId, Action<string> callback = null)
		{
			UnityWebRequest request = UnityWebRequest.Get($"{url}/rtc/{channel}/publisher/uid/{userId}/");
			yield return request.SendWebRequest();
			if (request.isNetworkError || request.isHttpError)
			{
				UnityEngine.Debug.Log(request.error);
				callback(null);
			}
			else
			{
				TokenObject tokenObject = JsonUtility.FromJson<TokenObject>(request.downloadHandler.text);
				callback(tokenObject.rtcToken);
			}
		}
	}
	public class UIElementDrag : EventTrigger
	{
		public override void OnDrag(PointerEventData eventData)
		{
			base.transform.position = new Vector2(Input.mousePosition.x, Input.mousePosition.y);
			base.OnDrag(eventData);
		}
	}
}
namespace Agora_RTC_Plugin.API_Example.Examples.Basic.JoinChannelVideo
{
	public class JoinChannelVideo : MonoBehaviour
	{
		[FormerlySerializedAs("appIdInput")]
		[SerializeField]
		private AppIdInput _appIdInput;

		[Header("_____________Basic Configuration_____________")]
		[FormerlySerializedAs("APP_ID")]
		[SerializeField]
		private string _appID = "";

		[FormerlySerializedAs("TOKEN")]
		[SerializeField]
		private string _token = "";

		[FormerlySerializedAs("CHANNEL_NAME")]
		[SerializeField]
		private string _channelName = "";

		public Text LogText;

		internal Agora.Util.Logger Log;

		internal IRtcEngine RtcEngine;

		private void Start()
		{
			LoadAssetData();
			if (CheckAppId())
			{
				InitEngine();
				JoinChannel();
			}
		}

		private void Update()
		{
			PermissionHelper.RequestMicrophontPermission();
			PermissionHelper.RequestCameraPermission();
		}

		[ContextMenu("ShowAgoraBasicProfileData")]
		private void LoadAssetData()
		{
			if (!(_appIdInput == null))
			{
				_appID = _appIdInput.appID;
				_token = _appIdInput.token;
				_channelName = _appIdInput.channelName;
			}
		}

		private bool CheckAppId()
		{
			Log = new Agora.Util.Logger(LogText);
			return Log.DebugAssert(_appID.Length > 10, "Please fill in your appId in API-Example/profile/appIdInput.asset");
		}

		private void InitEngine()
		{
			RtcEngine = Agora.Rtc.RtcEngine.CreateAgoraRtcEngine();
			UserEventHandler engineEventHandler = new UserEventHandler(this);
			RtcEngineContext context = new RtcEngineContext(_appID, 0uL, CHANNEL_PROFILE_TYPE.CHANNEL_PROFILE_LIVE_BROADCASTING, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_DEFAULT);
			RtcEngine.Initialize(context);
			RtcEngine.InitEventHandler(engineEventHandler);
		}

		private void JoinChannel()
		{
			RtcEngine.EnableAudio();
			RtcEngine.EnableVideo();
			VideoEncoderConfiguration videoEncoderConfiguration = new VideoEncoderConfiguration();
			videoEncoderConfiguration.dimensions = new VideoDimensions(640, 360);
			videoEncoderConfiguration.frameRate = 15;
			videoEncoderConfiguration.bitrate = 0;
			RtcEngine.SetVideoEncoderConfiguration(videoEncoderConfiguration);
			RtcEngine.SetChannelProfile(CHANNEL_PROFILE_TYPE.CHANNEL_PROFILE_COMMUNICATION);
			RtcEngine.SetClientRole(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			RtcEngine.JoinChannel(_token, _channelName);
		}

		private void OnDestroy()
		{
			UnityEngine.Debug.Log("OnDestroy");
			if (RtcEngine != null)
			{
				RtcEngine.InitEventHandler(null);
				RtcEngine.LeaveChannel();
				RtcEngine.Dispose();
			}
		}

		internal string GetChannelName()
		{
			return _channelName;
		}

		internal static void MakeVideoView(uint uid, string channelId = "")
		{
			if ((object)GameObject.Find(uid.ToString()) != null)
			{
				return;
			}
			VideoSurface videoSurface = MakeImageSurface(uid.ToString());
			if ((object)videoSurface != null)
			{
				if (uid == 0)
				{
					videoSurface.SetForUser(uid, channelId);
				}
				else
				{
					videoSurface.SetForUser(uid, channelId, VIDEO_SOURCE_TYPE.VIDEO_SOURCE_REMOTE);
				}
				videoSurface.OnTextureSizeModify += delegate(int width, int height)
				{
					float num = (float)height / (float)width;
					videoSurface.transform.localScale = new Vector3(-5f, 5f * num, 1f);
					UnityEngine.Debug.Log("OnTextureSizeModify: " + width + "  " + height);
				};
				videoSurface.SetEnable(enable: true);
			}
		}

		private static VideoSurface MakePlaneSurface(string goName)
		{
			GameObject gameObject = GameObject.CreatePrimitive(PrimitiveType.Plane);
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.transform.Rotate(-90f, 0f, 0f);
			UnityEngine.Random.Range(3f, 5f);
			UnityEngine.Random.Range(-2f, 2f);
			gameObject.transform.position = Vector3.zero;
			gameObject.transform.localScale = new Vector3(0.25f, 0.5f, 0.5f);
			return gameObject.AddComponent<VideoSurface>();
		}

		private static VideoSurface MakeImageSurface(string goName)
		{
			GameObject gameObject = new GameObject();
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.AddComponent<RawImage>();
			gameObject.AddComponent<UIElementDrag>();
			GameObject gameObject2 = GameObject.Find("VideoCanvas");
			if (gameObject2 != null)
			{
				gameObject.transform.parent = gameObject2.transform;
				UnityEngine.Debug.Log("add video view");
			}
			else
			{
				UnityEngine.Debug.Log("Canvas is null video view");
			}
			gameObject.transform.Rotate(0f, 0f, 180f);
			gameObject.transform.localPosition = Vector3.zero;
			gameObject.transform.localScale = new Vector3(2f, 3f, 1f);
			return gameObject.AddComponent<VideoSurface>();
		}

		internal static void DestroyVideoView(uint uid)
		{
			GameObject gameObject = GameObject.Find(uid.ToString());
			if ((object)gameObject != null)
			{
				UnityEngine.Object.Destroy(gameObject);
			}
		}
	}
	internal class UserEventHandler : IRtcEngineEventHandler
	{
		private readonly JoinChannelVideo _videoSample;

		internal UserEventHandler(JoinChannelVideo videoSample)
		{
			_videoSample = videoSample;
		}

		public override void OnError(int err, string msg)
		{
			_videoSample.Log.UpdateLog($"OnError err: {err}, msg: {msg}");
		}

		public override void OnJoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			int build = 0;
			UnityEngine.Debug.Log("Agora: OnJoinChannelSuccess ");
			_videoSample.Log.UpdateLog($"sdk version: ${_videoSample.RtcEngine.GetVersion(ref build)}");
			_videoSample.Log.UpdateLog($"sdk build: ${build}");
			_videoSample.Log.UpdateLog($"OnJoinChannelSuccess channelName: {connection.channelId}, uid: {connection.localUid}, elapsed: {elapsed}");
			JoinChannelVideo.MakeVideoView(0u);
		}

		public override void OnRejoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			_videoSample.Log.UpdateLog("OnRejoinChannelSuccess");
		}

		public override void OnLeaveChannel(RtcConnection connection, RtcStats stats)
		{
			_videoSample.Log.UpdateLog("OnLeaveChannel");
			JoinChannelVideo.DestroyVideoView(0u);
		}

		public override void OnClientRoleChanged(RtcConnection connection, CLIENT_ROLE_TYPE oldRole, CLIENT_ROLE_TYPE newRole)
		{
			_videoSample.Log.UpdateLog("OnClientRoleChanged");
		}

		public override void OnUserJoined(RtcConnection connection, uint uid, int elapsed)
		{
			_videoSample.Log.UpdateLog($"OnUserJoined uid: ${uid} elapsed: ${elapsed}");
			JoinChannelVideo.MakeVideoView(uid, _videoSample.GetChannelName());
		}

		public override void OnUserOffline(RtcConnection connection, uint uid, USER_OFFLINE_REASON_TYPE reason)
		{
			_videoSample.Log.UpdateLog($"OnUserOffLine uid: ${uid}, reason: ${(int)reason}");
			JoinChannelVideo.DestroyVideoView(uid);
		}

		public override void OnUplinkNetworkInfoUpdated(UplinkNetworkInfo info)
		{
			_videoSample.Log.UpdateLog("OnUplinkNetworkInfoUpdated");
		}

		public override void OnDownlinkNetworkInfoUpdated(DownlinkNetworkInfo info)
		{
			_videoSample.Log.UpdateLog("OnDownlinkNetworkInfoUpdated");
		}
	}
}
namespace Agora_RTC_Plugin.API_Example.Examples.Basic.JoinChannelAudio
{
	public class JoinChannelAudio : MonoBehaviour
	{
		[FormerlySerializedAs("appIdInput")]
		[SerializeField]
		private AppIdInput _appIdInput;

		[Header("_____________Basic Configuration_____________")]
		[FormerlySerializedAs("APP_ID")]
		[SerializeField]
		private string _appID = "";

		[FormerlySerializedAs("TOKEN")]
		[SerializeField]
		private string _token = "";

		[FormerlySerializedAs("CHANNEL_NAME")]
		[SerializeField]
		private string _channelName = "";

		public Text LogText;

		internal Agora.Util.Logger Log;

		internal IRtcEngine RtcEngine;

		private void Start()
		{
			LoadAssetData();
			if (CheckAppId())
			{
				InitRtcEngine();
				JoinChannel();
			}
		}

		private void Update()
		{
			PermissionHelper.RequestMicrophontPermission();
		}

		private bool CheckAppId()
		{
			Log = new Agora.Util.Logger(LogText);
			return Log.DebugAssert(_appID.Length > 10, "Please fill in your appId in API-Example/profile/appIdInput.asset!!!!!");
		}

		[ContextMenu("ShowAgoraBasicProfileData")]
		private void LoadAssetData()
		{
			if (!(_appIdInput == null))
			{
				_appID = _appIdInput.appID;
				_token = _appIdInput.token;
				_channelName = _appIdInput.channelName;
			}
		}

		private void InitRtcEngine()
		{
			RtcEngine = Agora.Rtc.RtcEngine.CreateAgoraRtcEngine();
			UserEventHandler engineEventHandler = new UserEventHandler(this);
			RtcEngineContext context = new RtcEngineContext(_appID, 0uL, CHANNEL_PROFILE_TYPE.CHANNEL_PROFILE_LIVE_BROADCASTING, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_DEFAULT);
			RtcEngine.Initialize(context);
			RtcEngine.InitEventHandler(engineEventHandler);
		}

		private void JoinChannel()
		{
			RtcEngine.EnableAudio();
			RtcEngine.SetClientRole(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			RtcEngine.JoinChannel(_token, _channelName);
		}

		private void OnLeaveBtnClick()
		{
			RtcEngine.InitEventHandler(null);
			RtcEngine.LeaveChannel();
		}

		private void OnDestroy()
		{
			UnityEngine.Debug.Log("OnDestroy");
			if (RtcEngine != null)
			{
				RtcEngine.InitEventHandler(null);
				RtcEngine.LeaveChannel();
				RtcEngine.Dispose();
			}
		}
	}
	internal class UserEventHandler : IRtcEngineEventHandler
	{
		private readonly JoinChannelAudio _audioSample;

		internal UserEventHandler(JoinChannelAudio audioSample)
		{
			_audioSample = audioSample;
		}

		public override void OnError(int err, string msg)
		{
			_audioSample.Log.UpdateLog($"OnError err: {err}, msg: {msg}");
		}

		public override void OnJoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			int build = 0;
			_audioSample.Log.UpdateLog($"sdk version: ${_audioSample.RtcEngine.GetVersion(ref build)}");
			_audioSample.Log.UpdateLog($"OnJoinChannelSuccess channelName: {connection.channelId}, uid: {connection.localUid}, elapsed: {elapsed}");
		}

		public override void OnRejoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			_audioSample.Log.UpdateLog("OnRejoinChannelSuccess");
		}

		public override void OnLeaveChannel(RtcConnection connection, RtcStats stats)
		{
			_audioSample.Log.UpdateLog("OnLeaveChannel");
		}

		public override void OnClientRoleChanged(RtcConnection connection, CLIENT_ROLE_TYPE oldRole, CLIENT_ROLE_TYPE newRole)
		{
			_audioSample.Log.UpdateLog("OnClientRoleChanged");
		}

		public override void OnUserJoined(RtcConnection connection, uint uid, int elapsed)
		{
			_audioSample.Log.UpdateLog($"OnUserJoined uid: ${uid} elapsed: ${elapsed}");
		}

		public override void OnUserOffline(RtcConnection connection, uint uid, USER_OFFLINE_REASON_TYPE reason)
		{
			_audioSample.Log.UpdateLog($"OnUserOffLine uid: ${uid}, reason: ${(int)reason}");
		}
	}
}
namespace Agora_RTC_Plugin.API_Example.Examples.Advanced.VoiceChanger
{
	public class VoiceChanger : MonoBehaviour
	{
		[FormerlySerializedAs("appIdInput")]
		[SerializeField]
		private AppIdInput _appIdInput;

		[Header("_____________Basic Configuration_____________")]
		[FormerlySerializedAs("APP_ID")]
		[SerializeField]
		private string _appID = "";

		[FormerlySerializedAs("TOKEN")]
		[SerializeField]
		private string _token = "";

		[FormerlySerializedAs("CHANNEL_NAME")]
		[SerializeField]
		private string _channelName = "";

		public Text LogText;

		internal Agora.Util.Logger Log;

		internal IRtcEngine RtcEngine;

		private void Start()
		{
			LoadAssetData();
			if (CheckAppId())
			{
				InitEngine();
				SetupUI();
				JoinChannel();
			}
		}

		[ContextMenu("ShowAgoraBasicProfileData")]
		public void LoadAssetData()
		{
			if (!(_appIdInput == null))
			{
				_appID = _appIdInput.appID;
				_token = _appIdInput.token;
				_channelName = _appIdInput.channelName;
			}
		}

		private bool CheckAppId()
		{
			Log = new Agora.Util.Logger(LogText);
			return Log.DebugAssert(_appID.Length > 10, "Please fill in your appId in API-Example/profile/appIdInput.asset");
		}

		private void InitEngine()
		{
			RtcEngine = Agora.Rtc.RtcEngine.CreateAgoraRtcEngine();
			UserEventHandler engineEventHandler = new UserEventHandler(this);
			RtcEngineContext context = new RtcEngineContext(_appID, 0uL, CHANNEL_PROFILE_TYPE.CHANNEL_PROFILE_LIVE_BROADCASTING, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_DEFAULT);
			RtcEngine.Initialize(context);
			RtcEngine.InitEventHandler(engineEventHandler);
		}

		private void JoinChannel()
		{
			RtcEngine.SetClientRole(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			RtcEngine.EnableAudio();
			RtcEngine.JoinChannel(_token, _channelName);
		}

		private void Update()
		{
			PermissionHelper.RequestMicrophontPermission();
		}

		private void SetupUI()
		{
			Transform obj = GameObject.Find("Canvas/Scroll View/Viewport/Content").transform;
			obj.Find("ChatBeautifierButton").GetComponent<Button>().onClick.AddListener(OnChatBeautifierButtonPress);
			obj.Find("SingingBeautifierButton").GetComponent<Button>().onClick.AddListener(OnSingingBeautifierButtonPress);
			obj.Find("TimbreTransformationButton").GetComponent<Button>().onClick.AddListener(OnTimbreTransformationButtonPress);
			obj.Find("OffVoiceBeautifierButton").GetComponent<Button>().onClick.AddListener(OnOffVoiceBeautifierButtonPress);
			obj.Find("StyleTransformationButton").GetComponent<Button>().onClick.AddListener(OnStyleTransformationButtonPress);
			obj.Find("RoomAcoustuicsButton").GetComponent<Button>().onClick.AddListener(OnRoomAcoustuicsButtonPress);
			obj.Find("PitchButton").GetComponent<Button>().onClick.AddListener(OnPitchButtonPress);
			obj.Find("OffAudioEffectButton").GetComponent<Button>().onClick.AddListener(OnOffAudioEffectButtonPress);
			obj.Find("VoiceChangerButton").GetComponent<Button>().onClick.AddListener(OnVoiceChangerButtonPress);
			obj.Find("OffVoiceChangerButton").GetComponent<Button>().onClick.AddListener(OnOffVoiceChangerButtonPress);
			obj.Find("CustomVocalEffectsButton").GetComponent<Button>().onClick.AddListener(OnCustomVocalEffectsButtonPress);
		}

		private void OnDestroy()
		{
			UnityEngine.Debug.Log("OnDestroy");
			if (RtcEngine != null)
			{
				RtcEngine.InitEventHandler(null);
				RtcEngine.LeaveChannel();
				RtcEngine.Dispose();
			}
		}

		private void OnChatBeautifierButtonPress()
		{
			RtcEngine.SetAudioProfile(AUDIO_PROFILE_TYPE.AUDIO_PROFILE_MUSIC_HIGH_QUALITY, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_GAME_STREAMING);
			int num = RtcEngine.SetVoiceBeautifierPreset(VOICE_BEAUTIFIER_PRESET.CHAT_BEAUTIFIER_MAGNETIC);
			Log.UpdateLog($"SetVoiceBeautifierPreset nRet:{num}");
		}

		private void OnSingingBeautifierButtonPress()
		{
			RtcEngine.SetAudioProfile(AUDIO_PROFILE_TYPE.AUDIO_PROFILE_MUSIC_HIGH_QUALITY, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_GAME_STREAMING);
			int num = RtcEngine.SetVoiceBeautifierPreset(VOICE_BEAUTIFIER_PRESET.SINGING_BEAUTIFIER);
			Log.UpdateLog($"SetVoiceBeautifierPreset nRet:{num}");
		}

		private void OnTimbreTransformationButtonPress()
		{
			RtcEngine.SetAudioProfile(AUDIO_PROFILE_TYPE.AUDIO_PROFILE_MUSIC_HIGH_QUALITY, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_GAME_STREAMING);
			int num = RtcEngine.SetVoiceBeautifierPreset(VOICE_BEAUTIFIER_PRESET.TIMBRE_TRANSFORMATION_VIGOROUS);
			Log.UpdateLog($"SetVoiceBeautifierPreset nRet:{num}");
		}

		private void OnOffVoiceBeautifierButtonPress()
		{
			RtcEngine.SetAudioProfile(AUDIO_PROFILE_TYPE.AUDIO_PROFILE_MUSIC_HIGH_QUALITY, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_GAME_STREAMING);
			int num = RtcEngine.SetVoiceBeautifierPreset(VOICE_BEAUTIFIER_PRESET.VOICE_BEAUTIFIER_OFF);
			Log.UpdateLog($"SetVoiceBeautifierPreset nRet:{num}");
		}

		private void OnStyleTransformationButtonPress()
		{
			RtcEngine.SetAudioProfile(AUDIO_PROFILE_TYPE.AUDIO_PROFILE_MUSIC_HIGH_QUALITY, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_GAME_STREAMING);
			int num = RtcEngine.SetAudioEffectPreset(AUDIO_EFFECT_PRESET.STYLE_TRANSFORMATION_POPULAR);
			Log.UpdateLog($"SetAudioEffectPreset nRet:{num}");
		}

		private void OnRoomAcoustuicsButtonPress()
		{
			RtcEngine.SetAudioProfile(AUDIO_PROFILE_TYPE.AUDIO_PROFILE_MUSIC_HIGH_QUALITY, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_GAME_STREAMING);
			int num = RtcEngine.SetAudioEffectPreset(AUDIO_EFFECT_PRESET.ROOM_ACOUSTICS_KTV);
			Log.UpdateLog($"SetAudioEffectPreset nRet:{num}");
		}

		private void OnPitchButtonPress()
		{
			RtcEngine.SetAudioProfile(AUDIO_PROFILE_TYPE.AUDIO_PROFILE_MUSIC_HIGH_QUALITY, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_GAME_STREAMING);
			int num = RtcEngine.SetAudioEffectPreset(AUDIO_EFFECT_PRESET.PITCH_CORRECTION);
			Log.UpdateLog($"SetAudioEffectPreset nRet:{num}");
		}

		private void OnOffAudioEffectButtonPress()
		{
			RtcEngine.SetAudioProfile(AUDIO_PROFILE_TYPE.AUDIO_PROFILE_MUSIC_HIGH_QUALITY, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_GAME_STREAMING);
			int num = RtcEngine.SetAudioEffectPreset(AUDIO_EFFECT_PRESET.AUDIO_EFFECT_OFF);
			Log.UpdateLog($"SetAudioEffectPreset nRet:{num}");
		}

		private void OnVoiceChangerButtonPress()
		{
			RtcEngine.SetAudioProfile(AUDIO_PROFILE_TYPE.AUDIO_PROFILE_MUSIC_HIGH_QUALITY, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_GAME_STREAMING);
			int num = RtcEngine.SetVoiceConversionPreset(VOICE_CONVERSION_PRESET.VOICE_CHANGER_NEUTRAL);
			Log.UpdateLog($"SetVoiceConversionPreset nRet:{num}");
		}

		private void OnOffVoiceChangerButtonPress()
		{
			RtcEngine.SetAudioProfile(AUDIO_PROFILE_TYPE.AUDIO_PROFILE_MUSIC_HIGH_QUALITY, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_GAME_STREAMING);
			int num = RtcEngine.SetVoiceConversionPreset(VOICE_CONVERSION_PRESET.VOICE_CONVERSION_OFF);
			Log.UpdateLog($"SetVoiceConversionPreset nRet:{num}");
		}

		private void OnCustomVocalEffectsButtonPress()
		{
			int num = RtcEngine.SetLocalVoicePitch(0.5);
			Log.UpdateLog($"SetLocalVoicePitch nRet:{num}");
			num = RtcEngine.SetLocalVoiceEqualization(AUDIO_EQUALIZATION_BAND_FREQUENCY.AUDIO_EQUALIZATION_BAND_31, -15);
			Log.UpdateLog($"SetLocalVoiceEqualization nRet:{num}");
			num = RtcEngine.SetLocalVoiceReverb(AUDIO_REVERB_TYPE.AUDIO_REVERB_DRY_LEVEL, 10);
			Log.UpdateLog($"SetLocalVoiceReverb nRet:{num}");
			num = RtcEngine.SetLocalVoiceReverb(AUDIO_REVERB_TYPE.AUDIO_REVERB_WET_LEVEL, 7);
			Log.UpdateLog($"SetLocalVoiceReverb nRet:{num}");
			num = RtcEngine.SetLocalVoiceReverb(AUDIO_REVERB_TYPE.AUDIO_REVERB_ROOM_SIZE, 6);
			Log.UpdateLog($"SetLocalVoiceReverb nRet:{num}");
			num = RtcEngine.SetLocalVoiceReverb(AUDIO_REVERB_TYPE.AUDIO_REVERB_WET_DELAY, 124);
			Log.UpdateLog($"SetLocalVoiceReverb nRet:{num}");
			num = RtcEngine.SetLocalVoiceReverb(AUDIO_REVERB_TYPE.AUDIO_REVERB_STRENGTH, 78);
			Log.UpdateLog($"SetLocalVoiceReverb nRet:{num}");
		}
	}
	internal class UserEventHandler : IRtcEngineEventHandler
	{
		private readonly VoiceChanger _voiceChanger;

		internal UserEventHandler(VoiceChanger voiceChanger)
		{
			_voiceChanger = voiceChanger;
		}

		public override void OnJoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			int build = 0;
			_voiceChanger.Log.UpdateLog($"sdk version: ${_voiceChanger.RtcEngine.GetVersion(ref build)}");
			_voiceChanger.Log.UpdateLog($"onJoinChannelSuccess channelName: {connection.channelId}, uid: {connection.localUid}, elapsed: {elapsed}");
		}

		public override void OnLeaveChannel(RtcConnection connection, RtcStats stats)
		{
			_voiceChanger.Log.UpdateLog("OnLeaveChannelSuccess");
		}

		public override void OnUserJoined(RtcConnection connection, uint uid, int elapsed)
		{
			_voiceChanger.Log.UpdateLog($"OnUserJoined uid: ${uid} elapsed: ${elapsed}");
		}

		public override void OnUserOffline(RtcConnection connection, uint uid, USER_OFFLINE_REASON_TYPE reason)
		{
			_voiceChanger.Log.UpdateLog($"OnUserOffLine uid: ${uid}, reason: ${(int)reason}");
		}

		public override void OnError(int error, string msg)
		{
			_voiceChanger.Log.UpdateLog($"OnSDKError error: {error}, msg: {msg}");
		}

		public override void OnConnectionLost(RtcConnection connection)
		{
			_voiceChanger.Log.UpdateLog($"OnConnectionLost ");
		}
	}
}
namespace Agora_RTC_Plugin.API_Example.Examples.Advanced.VirtualBackground
{
	public class VirtualBackground : MonoBehaviour
	{
		[FormerlySerializedAs("appIdInput")]
		[SerializeField]
		private AppIdInput _appIdInput;

		[Header("_____________Basic Configuration_____________")]
		[FormerlySerializedAs("APP_ID")]
		[SerializeField]
		private string _appID = "";

		[FormerlySerializedAs("TOKEN")]
		[SerializeField]
		private string _token = "";

		[FormerlySerializedAs("CHANNEL_NAME")]
		[SerializeField]
		private string _channelName = "";

		public Text LogText;

		internal Agora.Util.Logger Log;

		internal IRtcEngine RtcEngine;

		private void Start()
		{
			LoadAssetData();
			if (CheckAppId())
			{
				InitEngine();
				InitLogFilePath();
				SetupUI();
				JoinChannel();
			}
		}

		private void Update()
		{
			PermissionHelper.RequestMicrophontPermission();
			PermissionHelper.RequestCameraPermission();
		}

		[ContextMenu("ShowAgoraBasicProfileData")]
		private void LoadAssetData()
		{
			if (!(_appIdInput == null))
			{
				_appID = _appIdInput.appID;
				_token = _appIdInput.token;
				_channelName = _appIdInput.channelName;
			}
		}

		private bool CheckAppId()
		{
			Log = new Agora.Util.Logger(LogText);
			return Log.DebugAssert(_appID.Length > 10, "Please fill in your appId in API-Example/profile/appIdInput.asset");
		}

		private void InitEngine()
		{
			RtcEngine = Agora.Rtc.RtcEngine.CreateAgoraRtcEngine();
			UserEventHandler engineEventHandler = new UserEventHandler(this);
			RtcEngineContext context = new RtcEngineContext(_appID, 0uL, CHANNEL_PROFILE_TYPE.CHANNEL_PROFILE_LIVE_BROADCASTING, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_DEFAULT);
			RtcEngine.Initialize(context);
			RtcEngine.InitEventHandler(engineEventHandler);
		}

		private void JoinChannel()
		{
			RtcEngine.EnableAudio();
			RtcEngine.EnableVideo();
			RtcEngine.SetClientRole(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			RtcEngine.JoinChannel(_token, _channelName);
		}

		private void InitLogFilePath()
		{
			string text = Application.persistentDataPath + "/rtc.log";
			int num = RtcEngine.SetLogFile(text);
			Log.UpdateLog($"logPath:{text},nRet:{num}");
		}

		private void SetupUI()
		{
			Transform obj = base.transform.Find("UI");
			obj.Find("StartButton").GetComponent<Button>().onClick.AddListener(OnStartButtonPress);
			obj.Find("StartButton2").GetComponent<Button>().onClick.AddListener(OnStartButtonPress2);
			obj.Find("StopButton").GetComponent<Button>().onClick.AddListener(OnStopButtonPress);
		}

		private void OnStartButtonPress()
		{
			VirtualBackgroundSource virtualBackgroundSource = new VirtualBackgroundSource();
			virtualBackgroundSource.background_source_type = BACKGROUND_SOURCE_TYPE.BACKGROUND_COLOR;
			virtualBackgroundSource.color = 16777215u;
			SegmentationProperty segproperty = new SegmentationProperty();
			int num = RtcEngine.EnableVirtualBackground(enabled: true, virtualBackgroundSource, segproperty);
			Log.UpdateLog("EnableVirtualBackground true :" + num);
		}

		private void OnStartButtonPress2()
		{
			VirtualBackgroundSource virtualBackgroundSource = new VirtualBackgroundSource();
			virtualBackgroundSource.background_source_type = BACKGROUND_SOURCE_TYPE.BACKGROUND_IMG;
			string source = "/assets/img/png.png";
			virtualBackgroundSource.source = source;
			SegmentationProperty segproperty = new SegmentationProperty();
			int num = RtcEngine.EnableVirtualBackground(enabled: true, virtualBackgroundSource, segproperty);
			Log.UpdateLog("EnableVirtualBackground true :" + num);
		}

		private void OnStopButtonPress()
		{
			VirtualBackgroundSource backgroundSource = new VirtualBackgroundSource();
			SegmentationProperty segproperty = new SegmentationProperty();
			int num = RtcEngine.EnableVirtualBackground(enabled: false, backgroundSource, segproperty);
			Log.UpdateLog("EnableVirtualBackground false :" + num);
		}

		private void OnDestroy()
		{
			UnityEngine.Debug.Log("OnDestroy");
			if (RtcEngine != null)
			{
				RtcEngine.InitEventHandler(null);
				RtcEngine.LeaveChannel();
				RtcEngine.Dispose();
			}
		}

		internal string GetChannelName()
		{
			return _channelName;
		}

		internal static void MakeVideoView(uint uid, string channelId = "")
		{
			if ((object)GameObject.Find(uid.ToString()) != null)
			{
				return;
			}
			VideoSurface videoSurface = MakeImageSurface(uid.ToString());
			if ((object)videoSurface != null)
			{
				if (uid == 0)
				{
					videoSurface.SetForUser(uid, channelId);
				}
				else
				{
					videoSurface.SetForUser(uid, channelId, VIDEO_SOURCE_TYPE.VIDEO_SOURCE_REMOTE);
				}
				videoSurface.OnTextureSizeModify += delegate(int width, int height)
				{
					float num = (float)height / (float)width;
					videoSurface.transform.localScale = new Vector3(-5f, 5f * num, 1f);
					UnityEngine.Debug.Log("OnTextureSizeModify: " + width + "  " + height);
				};
				videoSurface.SetEnable(enable: true);
			}
		}

		private static VideoSurface MakePlaneSurface(string goName)
		{
			GameObject gameObject = GameObject.CreatePrimitive(PrimitiveType.Plane);
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.transform.Rotate(-90f, 0f, 0f);
			UnityEngine.Random.Range(3f, 5f);
			UnityEngine.Random.Range(-2f, 2f);
			gameObject.transform.position = Vector3.zero;
			gameObject.transform.localScale = new Vector3(0.25f, 0.5f, 0.5f);
			return gameObject.AddComponent<VideoSurface>();
		}

		private static VideoSurface MakeImageSurface(string goName)
		{
			GameObject gameObject = new GameObject();
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.AddComponent<RawImage>();
			gameObject.AddComponent<UIElementDrag>();
			GameObject gameObject2 = GameObject.Find("VideoCanvas");
			if (gameObject2 != null)
			{
				gameObject.transform.parent = gameObject2.transform;
				UnityEngine.Debug.Log("add video view");
			}
			else
			{
				UnityEngine.Debug.Log("Canvas is null video view");
			}
			gameObject.transform.Rotate(0f, 0f, 180f);
			gameObject.transform.localPosition = Vector3.zero;
			gameObject.transform.localScale = new Vector3(2f, 3f, 1f);
			return gameObject.AddComponent<VideoSurface>();
		}

		internal static void DestroyVideoView(uint uid)
		{
			GameObject gameObject = GameObject.Find(uid.ToString());
			if ((object)gameObject != null)
			{
				UnityEngine.Object.Destroy(gameObject);
			}
		}
	}
	internal class UserEventHandler : IRtcEngineEventHandler
	{
		private readonly VirtualBackground _sample;

		internal UserEventHandler(VirtualBackground sample)
		{
			_sample = sample;
		}

		public override void OnError(int err, string msg)
		{
			_sample.Log.UpdateLog($"OnError err: {err}, msg: {msg}");
		}

		public override void OnJoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			int build = 0;
			UnityEngine.Debug.Log("Agora: OnJoinChannelSuccess ");
			_sample.Log.UpdateLog($"sdk version: ${_sample.RtcEngine.GetVersion(ref build)}");
			_sample.Log.UpdateLog($"OnJoinChannelSuccess channelName: {connection.channelId}, uid: {connection.localUid}, elapsed: {elapsed}");
			VirtualBackground.MakeVideoView(0u);
		}

		public override void OnRejoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			_sample.Log.UpdateLog("OnRejoinChannelSuccess");
		}

		public override void OnLeaveChannel(RtcConnection connection, RtcStats stats)
		{
			_sample.Log.UpdateLog("OnLeaveChannel");
			VirtualBackground.DestroyVideoView(0u);
		}

		public override void OnClientRoleChanged(RtcConnection connection, CLIENT_ROLE_TYPE oldRole, CLIENT_ROLE_TYPE newRole)
		{
			_sample.Log.UpdateLog("OnClientRoleChanged");
		}

		public override void OnUserJoined(RtcConnection connection, uint uid, int elapsed)
		{
			_sample.Log.UpdateLog($"OnUserJoined uid: ${uid} elapsed: ${elapsed}");
			VirtualBackground.MakeVideoView(uid, _sample.GetChannelName());
		}

		public override void OnUserOffline(RtcConnection connection, uint uid, USER_OFFLINE_REASON_TYPE reason)
		{
			_sample.Log.UpdateLog($"OnUserOffLine uid: ${uid}, reason: ${(int)reason}");
			VirtualBackground.DestroyVideoView(uid);
		}
	}
}
namespace Agora_RTC_Plugin.API_Example.Examples.Advanced.TakeSnapshot
{
	public class TakeSnapshot : MonoBehaviour
	{
		[FormerlySerializedAs("appIdInput")]
		[SerializeField]
		private AppIdInput _appIdInput;

		[Header("_____________Basic Configuration_____________")]
		[FormerlySerializedAs("APP_ID")]
		[SerializeField]
		private string _appID = "";

		[FormerlySerializedAs("TOKEN")]
		[SerializeField]
		private string _token = "";

		[FormerlySerializedAs("CHANNEL_NAME")]
		[SerializeField]
		public string _channelName = "";

		public Text LogText;

		internal Agora.Util.Logger Log;

		internal IRtcEngine RtcEngine;

		public uint LocalUid;

		private void Start()
		{
			LoadAssetData();
			if (CheckAppId())
			{
				SetupUI();
				EnableUI(visible: false);
				InitEngine();
				JoinChannel();
			}
		}

		private void Update()
		{
			PermissionHelper.RequestMicrophontPermission();
			PermissionHelper.RequestCameraPermission();
		}

		[ContextMenu("ShowAgoraBasicProfileData")]
		public void LoadAssetData()
		{
			if (!(_appIdInput == null))
			{
				_appID = _appIdInput.appID;
				_token = _appIdInput.token;
				_channelName = _appIdInput.channelName;
			}
		}

		private bool CheckAppId()
		{
			Log = new Agora.Util.Logger(LogText);
			return Log.DebugAssert(_appID.Length > 10, "Please fill in your appId in API-Example/profile/appIdInput.asset");
		}

		private void InitEngine()
		{
			RtcEngine = Agora.Rtc.RtcEngine.CreateAgoraRtcEngine();
			UserEventHandler engineEventHandler = new UserEventHandler(this);
			RtcEngineContext context = new RtcEngineContext(_appID, 0uL, CHANNEL_PROFILE_TYPE.CHANNEL_PROFILE_LIVE_BROADCASTING, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_DEFAULT);
			RtcEngine.Initialize(context);
			RtcEngine.InitEventHandler(engineEventHandler);
		}

		private void JoinChannel()
		{
			RtcEngine.EnableAudio();
			RtcEngine.EnableVideo();
			RtcEngine.SetClientRole(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			RtcEngine.JoinChannel(_token, _channelName);
		}

		private void SetupUI()
		{
			base.transform.Find("TakeSnapshotButton").GetComponent<Button>().onClick.AddListener(OnTakeSnapshotButtonPress);
		}

		public void EnableUI(bool visible)
		{
			base.transform.Find("TakeSnapshotButton").gameObject.SetActive(visible);
		}

		private void OnTakeSnapshotButtonPress()
		{
			uint uid = 0u;
			string text = Path.Combine(Application.persistentDataPath, "takeSnapshot.jpg");
			int num = RtcEngine.TakeSnapshot(uid, text);
			Log.UpdateLog("TakeSnapshot nRet: " + num);
			Log.UpdateLog("TakeSnapshot in " + text);
		}

		private void OnDestroy()
		{
			UnityEngine.Debug.Log("OnDestroy");
			if (RtcEngine != null)
			{
				RtcEngine.InitEventHandler(null);
				RtcEngine.LeaveChannel();
				RtcEngine.Dispose();
			}
		}

		internal static void MakeVideoView(uint uid, string channelId = "")
		{
			if ((object)GameObject.Find(uid.ToString()) != null)
			{
				return;
			}
			VideoSurface videoSurface = MakeImageSurface(uid.ToString());
			if ((object)videoSurface != null)
			{
				if (uid == 0)
				{
					videoSurface.SetForUser(uid, channelId);
				}
				else
				{
					videoSurface.SetForUser(uid, channelId, VIDEO_SOURCE_TYPE.VIDEO_SOURCE_REMOTE);
				}
				videoSurface.OnTextureSizeModify += delegate(int width, int height)
				{
					float num = (float)height / (float)width;
					videoSurface.transform.localScale = new Vector3(-5f, 5f * num, 1f);
					UnityEngine.Debug.Log("OnTextureSizeModify: " + width + "  " + height);
				};
				videoSurface.SetEnable(enable: true);
			}
		}

		private static VideoSurface MakePlaneSurface(string goName)
		{
			GameObject gameObject = GameObject.CreatePrimitive(PrimitiveType.Plane);
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.transform.Rotate(-90f, 0f, 0f);
			gameObject.transform.position = Vector3.zero;
			gameObject.transform.localScale = new Vector3(0.25f, 0.5f, 0.5f);
			return gameObject.AddComponent<VideoSurface>();
		}

		private static VideoSurface MakeImageSurface(string goName)
		{
			GameObject gameObject = new GameObject();
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.AddComponent<RawImage>();
			gameObject.AddComponent<UIElementDrag>();
			GameObject gameObject2 = GameObject.Find("VideoCanvas");
			if (gameObject2 != null)
			{
				gameObject.transform.parent = gameObject2.transform;
				UnityEngine.Debug.Log("add video view");
			}
			else
			{
				UnityEngine.Debug.Log("Canvas is null video view");
			}
			gameObject.transform.Rotate(0f, 0f, 180f);
			gameObject.transform.localPosition = Vector3.zero;
			gameObject.transform.localScale = new Vector3(2f, 3f, 1f);
			return gameObject.AddComponent<VideoSurface>();
		}

		internal static void DestroyVideoView(uint uid)
		{
			GameObject gameObject = GameObject.Find(uid.ToString());
			if ((object)gameObject != null)
			{
				UnityEngine.Object.Destroy(gameObject);
			}
		}
	}
	internal class UserEventHandler : IRtcEngineEventHandler
	{
		private readonly TakeSnapshot _takeSnapshot;

		internal UserEventHandler(TakeSnapshot videoSample)
		{
			_takeSnapshot = videoSample;
		}

		public override void OnError(int err, string msg)
		{
			_takeSnapshot.Log.UpdateLog($"OnError err: {err}, msg: {msg}");
		}

		public override void OnJoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			int build = 0;
			UnityEngine.Debug.Log("Agora: OnJoinChannelSuccess ");
			_takeSnapshot.Log.UpdateLog($"sdk version: ${_takeSnapshot.RtcEngine.GetVersion(ref build)}");
			_takeSnapshot.Log.UpdateLog($"OnJoinChannelSuccess channelName: {connection.channelId}, uid: {connection.localUid}, elapsed: {elapsed}");
			_takeSnapshot.LocalUid = connection.localUid;
			_takeSnapshot.EnableUI(visible: true);
			TakeSnapshot.MakeVideoView(0u);
		}

		public override void OnRejoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			_takeSnapshot.Log.UpdateLog("OnRejoinChannelSuccess");
		}

		public override void OnLeaveChannel(RtcConnection connection, RtcStats stats)
		{
			_takeSnapshot.Log.UpdateLog("OnLeaveChannel");
			TakeSnapshot.DestroyVideoView(0u);
		}

		public override void OnClientRoleChanged(RtcConnection connection, CLIENT_ROLE_TYPE oldRole, CLIENT_ROLE_TYPE newRole)
		{
			_takeSnapshot.Log.UpdateLog("OnClientRoleChanged");
		}

		public override void OnUserJoined(RtcConnection connection, uint uid, int elapsed)
		{
			_takeSnapshot.Log.UpdateLog($"OnUserJoined uid: ${uid} elapsed: ${elapsed}");
			TakeSnapshot.MakeVideoView(uid, _takeSnapshot._channelName);
			_takeSnapshot.EnableUI(visible: true);
		}

		public override void OnUserOffline(RtcConnection connection, uint uid, USER_OFFLINE_REASON_TYPE reason)
		{
			_takeSnapshot.Log.UpdateLog($"OnUserOffLine uid: ${uid}, reason: ${(int)reason}");
			TakeSnapshot.DestroyVideoView(uid);
		}

		public override void OnSnapshotTaken(RtcConnection connection, uint remoteUid, string filePath, int width, int height, int errCode)
		{
			_takeSnapshot.Log.UpdateLog($"OnSnapshotTaken: {filePath},{width},{height},{errCode}");
		}
	}
}
namespace Agora_RTC_Plugin.API_Example.Examples.Advanced.StreamMessage
{
	public class StreamMessage : MonoBehaviour
	{
		[FormerlySerializedAs("appIdInput")]
		[SerializeField]
		private AppIdInput _appIdInput;

		[Header("_____________Basic Configuration_____________")]
		[FormerlySerializedAs("APP_ID")]
		[SerializeField]
		public string _appID = "";

		[FormerlySerializedAs("TOKEN")]
		[SerializeField]
		public string _token = "";

		[FormerlySerializedAs("CHANNEL_NAME")]
		[SerializeField]
		public string _channelName = "";

		public Text LogText;

		internal Agora.Util.Logger Log;

		internal IRtcEngine RtcEngine;

		private int _streamId = -1;

		private void Start()
		{
			LoadAssetData();
			if (CheckAppId())
			{
				InitEngine();
				SetupUI();
				EnableUI(visible: false);
				JoinChannel();
			}
		}

		[ContextMenu("ShowAgoraBasicProfileData")]
		private void LoadAssetData()
		{
			if (!(_appIdInput == null))
			{
				_appID = _appIdInput.appID;
				_token = _appIdInput.token;
				_channelName = _appIdInput.channelName;
			}
		}

		private bool CheckAppId()
		{
			Log = new Agora.Util.Logger(LogText);
			return Log.DebugAssert(_appID.Length > 10, "Please fill in your appId in API-Example/profile/appIdInput.asset");
		}

		private void InitEngine()
		{
			RtcEngine = Agora.Rtc.RtcEngine.CreateAgoraRtcEngine();
			UserEventHandler engineEventHandler = new UserEventHandler(this);
			RtcEngineContext context = new RtcEngineContext(_appID, 0uL, CHANNEL_PROFILE_TYPE.CHANNEL_PROFILE_LIVE_BROADCASTING, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_GAME_STREAMING);
			RtcEngine.Initialize(context);
			RtcEngine.InitEventHandler(engineEventHandler);
		}

		private void JoinChannel()
		{
			RtcEngine.SetClientRole(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			RtcEngine.EnableAudio();
			RtcEngine.JoinChannel(_token, _channelName);
		}

		private void Update()
		{
			PermissionHelper.RequestMicrophontPermission();
		}

		private void SetupUI()
		{
			base.transform.Find("UI").Find("SendButton").GetComponent<Button>()
				.onClick.AddListener(onSendButtonPress);
		}

		public void EnableUI(bool visible)
		{
			base.transform.Find("UI").gameObject.SetActive(visible);
		}

		private void onSendButtonPress()
		{
			InputField component = base.transform.Find("UI/InputField").GetComponent<InputField>();
			if (component.text == "")
			{
				Log.UpdateLog("Dont send empty message!");
			}
			int num = CreateDataStreamId();
			if (num < 0)
			{
				Log.UpdateLog("CreateDataStream failed!");
				return;
			}
			SendStreamMessage(num, component.text);
			component.text = "";
		}

		private int CreateDataStreamId()
		{
			if (_streamId == -1)
			{
				DataStreamConfig dataStreamConfig = new DataStreamConfig();
				dataStreamConfig.syncWithAudio = false;
				dataStreamConfig.ordered = true;
				int num = RtcEngine.CreateDataStream(ref _streamId, dataStreamConfig);
				Log.UpdateLog($"CreateDataStream: nRet{num}, streamId{_streamId}");
			}
			return _streamId;
		}

		private void SendStreamMessage(int streamId, string message)
		{
			byte[] bytes = Encoding.Default.GetBytes(message);
			int num = RtcEngine.SendStreamMessage(streamId, bytes, Convert.ToUInt32(bytes.Length));
			Log.UpdateLog("SendStreamMessage :" + num);
		}

		private void OnDestroy()
		{
			UnityEngine.Debug.Log("OnDestroy");
			if (RtcEngine != null)
			{
				RtcEngine.InitEventHandler(null);
				RtcEngine.LeaveChannel();
				RtcEngine.Dispose();
			}
		}
	}
	internal class UserEventHandler : IRtcEngineEventHandler
	{
		private readonly StreamMessage _streamMessage;

		internal UserEventHandler(StreamMessage videoSample)
		{
			_streamMessage = videoSample;
		}

		public override void OnError(int err, string msg)
		{
			_streamMessage.Log.UpdateLog($"OnError err: {err}, msg: {msg}");
		}

		public override void OnJoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			int build = 0;
			UnityEngine.Debug.Log("Agora: OnJoinChannelSuccess ");
			_streamMessage.Log.UpdateLog($"sdk version: ${_streamMessage.RtcEngine.GetVersion(ref build)}");
			_streamMessage.Log.UpdateLog($"OnJoinChannelSuccess channelName: {connection.channelId}, uid: {connection.localUid}, elapsed: {elapsed}");
			_streamMessage.EnableUI(visible: true);
		}

		public override void OnRejoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			_streamMessage.Log.UpdateLog("OnRejoinChannelSuccess");
		}

		public override void OnLeaveChannel(RtcConnection connection, RtcStats stats)
		{
			_streamMessage.Log.UpdateLog("OnLeaveChannel");
			_streamMessage.EnableUI(visible: false);
		}

		public override void OnClientRoleChanged(RtcConnection connection, CLIENT_ROLE_TYPE oldRole, CLIENT_ROLE_TYPE newRole)
		{
			_streamMessage.Log.UpdateLog("OnClientRoleChanged");
		}

		public override void OnUserJoined(RtcConnection connection, uint uid, int elapsed)
		{
			_streamMessage.Log.UpdateLog($"OnUserJoined uid: ${uid} elapsed: ${elapsed}");
		}

		public override void OnUserOffline(RtcConnection connection, uint uid, USER_OFFLINE_REASON_TYPE reason)
		{
			_streamMessage.Log.UpdateLog($"OnUserOffLine uid: ${uid}, reason: ${(int)reason}");
		}

		public override void OnStreamMessage(RtcConnection connection, uint remoteUid, int streamId, byte[] data, uint length, ulong sentTs)
		{
			string @string = Encoding.Default.GetString(data);
			_streamMessage.Log.UpdateLog($"OnStreamMessage remoteUid: {remoteUid}, stream message: {@string}");
		}

		public override void OnStreamMessageError(RtcConnection connection, uint remoteUid, int streamId, int code, int missed, int cached)
		{
			_streamMessage.Log.UpdateLog($"OnStreamMessageError remoteUid: {remoteUid}, streamId: {streamId}, code: {code}, missed: {missed}, cached: {cached}");
		}
	}
}
namespace Agora_RTC_Plugin.API_Example.Examples.Advanced.StartRtmpStreamWithTranscoding
{
	public class StartRtmpStreamWithTranscoding : MonoBehaviour
	{
		[FormerlySerializedAs("appIdInput")]
		[SerializeField]
		private AppIdInput _appIdInput;

		[Header("_____________Basic Configuration_____________")]
		[FormerlySerializedAs("APP_ID")]
		[SerializeField]
		private string _appID = "";

		[FormerlySerializedAs("TOKEN")]
		[SerializeField]
		private string _token = "";

		[FormerlySerializedAs("CHANNEL_NAME")]
		[SerializeField]
		private string _channelName = "";

		public Text LogText;

		internal Agora.Util.Logger Log;

		internal IRtcEngine RtcEngine;

		public uint Uid;

		private void Start()
		{
			LoadAssetData();
			if (CheckAppId())
			{
				InitEngine();
				SetUpUI();
				JoinChannel();
			}
		}

		private void Update()
		{
			PermissionHelper.RequestMicrophontPermission();
			PermissionHelper.RequestCameraPermission();
		}

		[ContextMenu("ShowAgoraBasicProfileData")]
		public void LoadAssetData()
		{
			if (!(_appIdInput == null))
			{
				_appID = _appIdInput.appID;
				_token = _appIdInput.token;
				_channelName = _appIdInput.channelName;
			}
		}

		private bool CheckAppId()
		{
			Log = new Agora.Util.Logger(LogText);
			return Log.DebugAssert(_appID.Length > 10, "Please fill in your appId in API-Example/profile/appIdInput.asset");
		}

		private void InitEngine()
		{
			RtcEngine = Agora.Rtc.RtcEngine.CreateAgoraRtcEngine();
			UserEventHandler engineEventHandler = new UserEventHandler(this);
			RtcEngineContext context = new RtcEngineContext(_appID, 0uL, CHANNEL_PROFILE_TYPE.CHANNEL_PROFILE_LIVE_BROADCASTING, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_DEFAULT);
			RtcEngine.Initialize(context);
			RtcEngine.InitEventHandler(engineEventHandler);
		}

		private void JoinChannel()
		{
			RtcEngine.EnableAudio();
			RtcEngine.EnableVideo();
			RtcEngine.SetClientRole(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			RtcEngine.JoinChannel(_token, _channelName);
		}

		private void SetUpUI()
		{
			base.transform.Find("StartButton").GetComponent<Button>().onClick.AddListener(OnStartButtonPress);
			base.transform.Find("UpdateButton").GetComponent<Button>().onClick.AddListener(OnUpdateButtonPress);
			base.transform.Find("StopButton").GetComponent<Button>().onClick.AddListener(OnStopButtonPress);
		}

		private void OnStartButtonPress()
		{
			if (Uid == 0)
			{
				Log.UpdateLog("your must join channel.");
				return;
			}
			LiveTranscoding liveTranscoding = new LiveTranscoding();
			liveTranscoding.userCount = 1u;
			liveTranscoding.transcodingUsers = new TranscodingUser[1];
			liveTranscoding.transcodingUsers[0] = new TranscodingUser
			{
				uid = Uid,
				x = 0,
				y = 0,
				width = 360,
				height = 640,
				alpha = 1.0,
				zOrder = 1,
				audioChannel = 0
			};
			int num = RtcEngine.StartRtmpStreamWithTranscoding("rtmp://push.alexmk.name/live/agora_rtc_unity_" + _channelName, liveTranscoding);
			Log.UpdateLog("StartRtmpStreamWithTranscoding:" + num);
			if (num == 0)
			{
				Log.UpdateLog("pushing stream to rtmp://push.alexmk.name/live/agora_rtc_unity_" + _channelName);
			}
		}

		private void OnUpdateButtonPress()
		{
			LiveTranscoding liveTranscoding = new LiveTranscoding();
			liveTranscoding.width = 640;
			liveTranscoding.height = 960;
			liveTranscoding.userCount = 1u;
			liveTranscoding.transcodingUsers = new TranscodingUser[1];
			liveTranscoding.transcodingUsers[0] = new TranscodingUser
			{
				uid = Uid,
				x = 100,
				y = 100,
				width = 360,
				height = 640,
				alpha = 1.0,
				zOrder = 1,
				audioChannel = 0
			};
			int num = RtcEngine.UpdateRtmpTranscoding(liveTranscoding);
			Log.UpdateLog("UpdateRtmpTranscoding:" + num);
		}

		private void OnStopButtonPress()
		{
			int num = RtcEngine.StopRtmpStream("rtmp://push.alexmk.name/live/agora_rtc_unity_" + _channelName);
			Log.UpdateLog("StopRtmpStream:" + num);
		}

		private void OnDestroy()
		{
			UnityEngine.Debug.Log("OnDestroy");
			if (RtcEngine != null)
			{
				RtcEngine.InitEventHandler(null);
				RtcEngine.LeaveChannel();
				RtcEngine.Dispose();
			}
		}

		internal string GetChannelName()
		{
			return _channelName;
		}

		internal static void MakeVideoView(uint uid, string channelId = "")
		{
			if ((object)GameObject.Find(uid.ToString()) != null)
			{
				return;
			}
			VideoSurface videoSurface = MakeImageSurface(uid.ToString());
			if ((object)videoSurface != null)
			{
				if (uid == 0)
				{
					videoSurface.SetForUser(uid, channelId);
				}
				else
				{
					videoSurface.SetForUser(uid, channelId, VIDEO_SOURCE_TYPE.VIDEO_SOURCE_REMOTE);
				}
				videoSurface.OnTextureSizeModify += delegate(int width, int height)
				{
					float num = (float)height / (float)width;
					videoSurface.transform.localScale = new Vector3(-5f, 5f * num, 1f);
					UnityEngine.Debug.Log("OnTextureSizeModify: " + width + "  " + height);
				};
				videoSurface.SetEnable(enable: true);
			}
		}

		private static VideoSurface MakePlaneSurface(string goName)
		{
			GameObject gameObject = GameObject.CreatePrimitive(PrimitiveType.Plane);
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.transform.Rotate(-90f, 0f, 0f);
			UnityEngine.Random.Range(3f, 5f);
			UnityEngine.Random.Range(-2f, 2f);
			gameObject.transform.position = Vector3.zero;
			gameObject.transform.localScale = new Vector3(0.25f, 0.5f, 0.5f);
			return gameObject.AddComponent<VideoSurface>();
		}

		private static VideoSurface MakeImageSurface(string goName)
		{
			GameObject gameObject = new GameObject();
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.AddComponent<RawImage>();
			gameObject.AddComponent<UIElementDrag>();
			GameObject gameObject2 = GameObject.Find("VideoCanvas");
			if (gameObject2 != null)
			{
				gameObject.transform.parent = gameObject2.transform;
				UnityEngine.Debug.Log("add video view");
			}
			else
			{
				UnityEngine.Debug.Log("Canvas is null video view");
			}
			gameObject.transform.Rotate(0f, 0f, 180f);
			gameObject.transform.localPosition = Vector3.zero;
			gameObject.transform.localScale = new Vector3(2f, 3f, 1f);
			return gameObject.AddComponent<VideoSurface>();
		}

		internal static void DestroyVideoView(uint uid)
		{
			GameObject gameObject = GameObject.Find(uid.ToString());
			if ((object)gameObject != null)
			{
				UnityEngine.Object.Destroy(gameObject);
			}
		}
	}
	internal class UserEventHandler : IRtcEngineEventHandler
	{
		private readonly StartRtmpStreamWithTranscoding _sample;

		internal UserEventHandler(StartRtmpStreamWithTranscoding sample)
		{
			_sample = sample;
		}

		public override void OnError(int err, string msg)
		{
			_sample.Log.UpdateLog($"OnError err: {err}, msg: {msg}");
		}

		public override void OnJoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			UnityEngine.Debug.Log("Agora: OnJoinChannelSuccess ");
			int build = 0;
			_sample.Log.UpdateLog($"sdk version: ${_sample.RtcEngine.GetVersion(ref build)}");
			_sample.Log.UpdateLog($"OnJoinChannelSuccess channelName: {connection.channelId}, uid: {connection.localUid}, elapsed: {elapsed}");
			_sample.Uid = connection.localUid;
			StartRtmpStreamWithTranscoding.MakeVideoView(0u);
		}

		public override void OnRejoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			_sample.Log.UpdateLog("OnRejoinChannelSuccess");
		}

		public override void OnLeaveChannel(RtcConnection connection, RtcStats stats)
		{
			_sample.Log.UpdateLog("OnLeaveChannel");
			StartRtmpStreamWithTranscoding.DestroyVideoView(0u);
		}

		public override void OnClientRoleChanged(RtcConnection connection, CLIENT_ROLE_TYPE oldRole, CLIENT_ROLE_TYPE newRole)
		{
			_sample.Log.UpdateLog("OnClientRoleChanged");
		}

		public override void OnUserJoined(RtcConnection connection, uint uid, int elapsed)
		{
			_sample.Log.UpdateLog($"OnUserJoined uid: ${uid} elapsed: ${elapsed}");
			StartRtmpStreamWithTranscoding.MakeVideoView(uid, _sample.GetChannelName());
		}

		public override void OnUserOffline(RtcConnection connection, uint uid, USER_OFFLINE_REASON_TYPE reason)
		{
			_sample.Log.UpdateLog($"OnUserOffLine uid: ${uid}, reason: ${(int)reason}");
			StartRtmpStreamWithTranscoding.DestroyVideoView(uid);
		}

		public override void OnRtmpStreamingStateChanged(string url, RTMP_STREAM_PUBLISH_STATE state, RTMP_STREAM_PUBLISH_ERROR_TYPE errCode)
		{
			_sample.Log.UpdateLog($"OnRtmpStreamingStateChanged url:{url},  state:{state},  errCode:{errCode}");
		}

		public override void OnTranscodingUpdated()
		{
			_sample.Log.UpdateLog($"OnTranscodingUpdated");
		}
	}
}
namespace Agora_RTC_Plugin.API_Example.Examples.Advanced.StartRhythmPlayer
{
	public class StartRhythmPlayer : MonoBehaviour
	{
		[FormerlySerializedAs("appIdInput")]
		[SerializeField]
		private AppIdInput _appIdInput;

		[Header("_____________Basic Configuration_____________")]
		[FormerlySerializedAs("APP_ID")]
		[SerializeField]
		private string _appID = "";

		[FormerlySerializedAs("TOKEN")]
		[SerializeField]
		private string _token = "";

		[FormerlySerializedAs("CHANNEL_NAME")]
		[SerializeField]
		private string _channelName = "";

		public Text LogText;

		internal Agora.Util.Logger Log;

		internal IRtcEngine RtcEngine;

		private void Start()
		{
			LoadAssetData();
			if (CheckAppId())
			{
				SetupUI();
				InitEngine();
				JoinChannel();
			}
		}

		private void Update()
		{
			PermissionHelper.RequestMicrophontPermission();
			PermissionHelper.RequestCameraPermission();
		}

		[ContextMenu("ShowAgoraBasicProfileData")]
		private void LoadAssetData()
		{
			if (!(_appIdInput == null))
			{
				_appID = _appIdInput.appID;
				_token = _appIdInput.token;
				_channelName = _appIdInput.channelName;
			}
		}

		private bool CheckAppId()
		{
			Log = new Agora.Util.Logger(LogText);
			return Log.DebugAssert(_appID.Length > 10, "Please fill in your appId in API-Example/profile/appIdInput.asset");
		}

		private void SetupUI()
		{
			base.gameObject.transform.Find("StartButton").GetComponent<Button>().onClick.AddListener(OnStartButtonPress);
			base.gameObject.transform.Find("StopButton").GetComponent<Button>().onClick.AddListener(OnStopButtonPress);
			base.gameObject.transform.Find("ConfigButton").GetComponent<Button>().onClick.AddListener(OnConfigButtonPress);
		}

		private void InitEngine()
		{
			RtcEngine = Agora.Rtc.RtcEngine.CreateAgoraRtcEngine();
			UserEventHandler engineEventHandler = new UserEventHandler(this);
			RtcEngineContext context = new RtcEngineContext(_appID, 0uL, CHANNEL_PROFILE_TYPE.CHANNEL_PROFILE_LIVE_BROADCASTING, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_DEFAULT);
			RtcEngine.Initialize(context);
			RtcEngine.InitEventHandler(engineEventHandler);
		}

		private void JoinChannel()
		{
			RtcEngine.EnableAudio();
			RtcEngine.EnableVideo();
			RtcEngine.SetClientRole(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			RtcEngine.JoinChannel(_token, _channelName);
		}

		private void OnStartButtonPress()
		{
			string sound = "/assets/audio/ding.mp3";
			string sound2 = "/assets/audio/dang.mp3";
			AgoraRhythmPlayerConfig config = new AgoraRhythmPlayerConfig
			{
				beatsPerMeasure = 4,
				beatsPerMinute = 60
			};
			int num = RtcEngine.StartRhythmPlayer(sound, sound2, config);
			Log.UpdateLog("StartRhythmPlayer nRet:" + num);
		}

		private void OnStopButtonPress()
		{
			int num = RtcEngine.StopRhythmPlayer();
			Log.UpdateLog("StopRhythmPlayer nRet:" + num);
		}

		private void OnConfigButtonPress()
		{
			AgoraRhythmPlayerConfig config = new AgoraRhythmPlayerConfig
			{
				beatsPerMeasure = 6,
				beatsPerMinute = 60
			};
			int num = RtcEngine.ConfigRhythmPlayer(config);
			Log.UpdateLog("ConfigRhythmPlayer nRet:" + num);
			Log.UpdateLog("beatsPerMeasure is config from 4 to 6");
		}

		private void OnDestroy()
		{
			UnityEngine.Debug.Log("OnDestroy");
			if (RtcEngine != null)
			{
				RtcEngine.InitEventHandler(null);
				RtcEngine.LeaveChannel();
				RtcEngine.Dispose();
			}
		}

		internal string GetChannelName()
		{
			return _channelName;
		}
	}
	internal class UserEventHandler : IRtcEngineEventHandler
	{
		private readonly StartRhythmPlayer _startRhythmPlayer;

		internal UserEventHandler(StartRhythmPlayer videoSample)
		{
			_startRhythmPlayer = videoSample;
		}

		public override void OnError(int err, string msg)
		{
			_startRhythmPlayer.Log.UpdateLog($"OnError err: {err}, msg: {msg}");
		}

		public override void OnJoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			int build = 0;
			UnityEngine.Debug.Log("Agora: OnJoinChannelSuccess ");
			_startRhythmPlayer.Log.UpdateLog($"sdk version: ${_startRhythmPlayer.RtcEngine.GetVersion(ref build)}");
			_startRhythmPlayer.Log.UpdateLog($"OnJoinChannelSuccess channelName: {connection.channelId}, uid: {connection.localUid}, elapsed: {elapsed}");
		}

		public override void OnRejoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			_startRhythmPlayer.Log.UpdateLog("OnRejoinChannelSuccess");
		}

		public override void OnLeaveChannel(RtcConnection connection, RtcStats stats)
		{
			_startRhythmPlayer.Log.UpdateLog("OnLeaveChannel");
		}

		public override void OnClientRoleChanged(RtcConnection connection, CLIENT_ROLE_TYPE oldRole, CLIENT_ROLE_TYPE newRole)
		{
			_startRhythmPlayer.Log.UpdateLog("OnClientRoleChanged");
		}

		public override void OnUserJoined(RtcConnection connection, uint uid, int elapsed)
		{
			_startRhythmPlayer.Log.UpdateLog($"OnUserJoined uid: ${uid} elapsed: ${elapsed}");
		}

		public override void OnUserOffline(RtcConnection connection, uint uid, USER_OFFLINE_REASON_TYPE reason)
		{
			_startRhythmPlayer.Log.UpdateLog($"OnUserOffLine uid: ${uid}, reason: ${(int)reason}");
		}

		public override void OnRhythmPlayerStateChanged(RHYTHM_PLAYER_STATE_TYPE state, RHYTHM_PLAYER_ERROR_TYPE errorCode)
		{
			_startRhythmPlayer.Log.UpdateLog($"OnRhythmPlayerStateChanged {state},{errorCode}");
		}
	}
}
namespace Agora_RTC_Plugin.API_Example.Examples.Advanced.StartLocalVideoTranscoder
{
	public class StartLocalVideoTranscoder : MonoBehaviour
	{
		[FormerlySerializedAs("appIdInput")]
		[SerializeField]
		private AppIdInput _appIdInput;

		[Header("_____________Basic Configuration_____________")]
		[FormerlySerializedAs("APP_ID")]
		[SerializeField]
		private string _appID = "";

		[FormerlySerializedAs("TOKEN")]
		[SerializeField]
		private string _token = "";

		[FormerlySerializedAs("CHANNEL_NAME")]
		[SerializeField]
		private string _channelName = "";

		public Text LogText;

		internal Agora.Util.Logger Log;

		internal IRtcEngine RtcEngine;

		internal IMediaPlayer MediaPlayer;

		internal List<uint> RemoteUserUids = new List<uint>();

		public Toggle ToggleRecord;

		public Toggle TogglePrimartCamera;

		public Toggle ToggleSecondaryCamera;

		public Toggle TogglePng;

		public Toggle ToggleJpg;

		public Toggle ToggleGif;

		public Toggle ToggleRemote;

		public Toggle ToggleScreenShare;

		public Toggle ToggleMediaPlay;

		private void Start()
		{
			LoadAssetData();
			if (CheckAppId())
			{
				SetUpUI();
				InitEngine();
				InitMediaPlayer();
				JoinChannel();
			}
		}

		private void Update()
		{
			PermissionHelper.RequestMicrophontPermission();
			PermissionHelper.RequestCameraPermission();
		}

		[ContextMenu("ShowAgoraBasicProfileData")]
		private void LoadAssetData()
		{
			if (!(_appIdInput == null))
			{
				_appID = _appIdInput.appID;
				_token = _appIdInput.token;
				_channelName = _appIdInput.channelName;
			}
		}

		private void SetUpUI()
		{
			Transform obj = base.transform.Find("UI");
			obj.Find("StartButton").GetComponent<Button>().onClick.AddListener(OnStartButtonPress);
			obj.Find("UpdateButton").GetComponent<Button>().onClick.AddListener(OnUpdateButtonPress);
			obj.Find("StopButton").GetComponent<Button>().onClick.AddListener(OnStopButtonPress);
		}

		private bool CheckAppId()
		{
			Log = new Agora.Util.Logger(LogText);
			return Log.DebugAssert(_appID.Length > 10, "Please fill in your appId in API-Example/profile/appIdInput.asset");
		}

		private void InitEngine()
		{
			RtcEngine = Agora.Rtc.RtcEngine.CreateAgoraRtcEngine();
			UserEventHandler engineEventHandler = new UserEventHandler(this);
			RtcEngineContext context = new RtcEngineContext(_appID, 0uL, CHANNEL_PROFILE_TYPE.CHANNEL_PROFILE_LIVE_BROADCASTING, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_DEFAULT);
			UnityEngine.Debug.Log("Agora: Initialize " + RtcEngine.Initialize(context));
			RtcEngine.InitEventHandler(engineEventHandler);
		}

		private void InitMediaPlayer()
		{
			MediaPlayer = RtcEngine.CreateMediaPlayer();
			if (MediaPlayer == null)
			{
				UnityEngine.Debug.Log("GetAgoraRtcMediaPlayer failed!");
			}
			MpkEventHandler engineEventHandler = new MpkEventHandler(this);
			MediaPlayer.InitEventHandler(engineEventHandler);
			UnityEngine.Debug.Log("playerId id: " + MediaPlayer.GetId());
		}

		private void JoinChannel()
		{
			RtcEngine.EnableAudio();
			RtcEngine.EnableVideo();
			RtcEngine.SetClientRole(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			MakeVideoView(0u, "", VIDEO_SOURCE_TYPE.VIDEO_SOURCE_TRANSCODED);
			ChannelMediaOptions channelMediaOptions = new ChannelMediaOptions();
			channelMediaOptions.publishCameraTrack.SetValue(val: false);
			channelMediaOptions.publishSecondaryCameraTrack.SetValue(val: false);
			channelMediaOptions.publishTrancodedVideoTrack.SetValue(val: true);
			RtcEngine.JoinChannel(_token, _channelName, 0u, channelMediaOptions);
		}

		private LocalTranscoderConfiguration GenerateLocalTranscoderConfiguration()
		{
			List<TranscodingVideoStream> list = new List<TranscodingVideoStream>();
			if (ToggleRecord.isOn)
			{
				list.Add(new TranscodingVideoStream(MEDIA_SOURCE_TYPE.AUDIO_RECORDING_SOURCE, 0u, "", 0, 0, 0, 0, 1, 1.0, mirror: false));
			}
			if (TogglePrimartCamera.isOn)
			{
				DeviceInfo[] array = RtcEngine.GetVideoDeviceManager().EnumerateVideoDevices();
				if (array.Length >= 1)
				{
					CameraCapturerConfiguration config = new CameraCapturerConfiguration
					{
						format = new VideoFormat(640, 320, 30),
						deviceId = array[0].deviceId
					};
					int num = RtcEngine.StartPrimaryCameraCapture(config);
					Log.UpdateLog("StartPrimaryCameraCapture :" + num);
					list.Add(new TranscodingVideoStream(MEDIA_SOURCE_TYPE.PRIMARY_CAMERA_SOURCE, 0u, "", 0, 0, 640, 320, 1, 1.0, mirror: false));
				}
				else
				{
					Log.UpdateLog("PRIMARY_CAMERA Not Found!");
				}
			}
			if (ToggleSecondaryCamera.isOn)
			{
				DeviceInfo[] array2 = RtcEngine.GetVideoDeviceManager().EnumerateVideoDevices();
				if (array2.Length >= 2)
				{
					CameraCapturerConfiguration config2 = new CameraCapturerConfiguration
					{
						format = new VideoFormat(640, 320, 30),
						deviceId = array2[0].deviceId
					};
					RtcEngine.StartSecondaryCameraCapture(config2);
					list.Add(new TranscodingVideoStream(MEDIA_SOURCE_TYPE.SECONDARY_CAMERA_SOURCE, 0u, "", 0, 0, 360, 240, 1, 1.0, mirror: false));
				}
				else
				{
					Log.UpdateLog("SECONDARY_CAMERA Not Found!");
				}
			}
			if (TogglePng.isOn)
			{
				string imageUrl = "/assets/img/png.png";
				list.Add(new TranscodingVideoStream(MEDIA_SOURCE_TYPE.RTC_IMAGE_PNG_SOURCE, 0u, imageUrl, 320, 180, 640, 360, 1, 1.0, mirror: false));
			}
			if (ToggleJpg.isOn)
			{
				string imageUrl2 = "/assets/img/jpg.jpg";
				list.Add(new TranscodingVideoStream(MEDIA_SOURCE_TYPE.RTC_IMAGE_JPEG_SOURCE, 0u, imageUrl2, 360, 240, 360, 240, 1, 1.0, mirror: false));
			}
			if (ToggleGif.isOn)
			{
				string imageUrl3 = "/assets/img/gif.gif";
				list.Add(new TranscodingVideoStream(MEDIA_SOURCE_TYPE.RTC_IMAGE_GIF_SOURCE, 0u, imageUrl3, 0, 0, 476, 280, 1, 1.0, mirror: false));
			}
			if (ToggleRemote.isOn)
			{
				if (RemoteUserUids.Count >= 1)
				{
					uint remoteUserUid = RemoteUserUids[0];
					list.Add(new TranscodingVideoStream(MEDIA_SOURCE_TYPE.REMOTE_VIDEO_SOURCE, remoteUserUid, "", 200, 200, 100, 100, 1, 1.0, mirror: false));
				}
				else
				{
					Log.UpdateLog("remote user not found");
				}
			}
			if (ToggleScreenShare.isOn)
			{
				if (StartScreenShare())
				{
					list.Add(new TranscodingVideoStream(MEDIA_SOURCE_TYPE.PRIMARY_SCREEN_SOURCE, 0u, "", 480, 640, 640, 320, 1, 1.0, mirror: false));
				}
			}
			else
			{
				StopScreenShare();
			}
			if (ToggleMediaPlay.isOn)
			{
				int num2 = MediaPlayer.Open("https://big-class-test.oss-cn-hangzhou.aliyuncs.com/61102.1592987815092.mp4", 0L);
				Log.UpdateLog("Media palyer ret:" + num2);
				int id = MediaPlayer.GetId();
				Log.UpdateLog("Media palyer ret:" + num2);
				list.Add(new TranscodingVideoStream(MEDIA_SOURCE_TYPE.MEDIA_PLAYER_SOURCE, 0u, id.ToString(), 0, 0, 1080, 960, 1, 1.0, mirror: false));
			}
			else
			{
				MediaPlayer.Stop();
			}
			LocalTranscoderConfiguration localTranscoderConfiguration = new LocalTranscoderConfiguration();
			localTranscoderConfiguration.streamCount = Convert.ToUInt32(list.Count);
			localTranscoderConfiguration.VideoInputStreams = new TranscodingVideoStream[list.Count];
			for (int i = 0; i < list.Count; i++)
			{
				localTranscoderConfiguration.VideoInputStreams[i] = list[i];
			}
			localTranscoderConfiguration.videoOutputConfiguration.dimensions.width = 1080;
			localTranscoderConfiguration.videoOutputConfiguration.dimensions.height = 960;
			return localTranscoderConfiguration;
		}

		private bool StartScreenShare()
		{
			Log.UpdateLog("Not Support Screen Share in this platform!");
			return false;
		}

		private void StopScreenShare()
		{
			Log.UpdateLog("Not Support Screen Share in this platform!");
		}

		private void OnStartButtonPress()
		{
			LocalTranscoderConfiguration config = GenerateLocalTranscoderConfiguration();
			int num = RtcEngine.StartLocalVideoTranscoder(config);
			Log.UpdateLog("StartLocalVideoTranscoder:" + num);
			ChannelMediaOptions channelMediaOptions = new ChannelMediaOptions();
			channelMediaOptions.publishCameraTrack.SetValue(val: false);
			channelMediaOptions.publishSecondaryCameraTrack.SetValue(val: false);
			channelMediaOptions.publishTrancodedVideoTrack.SetValue(val: true);
			RtcEngine.UpdateChannelMediaOptions(channelMediaOptions);
		}

		private void OnUpdateButtonPress()
		{
			LocalTranscoderConfiguration config = GenerateLocalTranscoderConfiguration();
			int num = RtcEngine.UpdateLocalTranscoderConfiguration(config);
			Log.UpdateLog("UpdateLocalTranscoderConfiguration:" + num);
		}

		private void OnStopButtonPress()
		{
			int num = RtcEngine.StopLocalVideoTranscoder();
			Log.UpdateLog("StopLocalVideoTranscoder:" + num);
			MediaPlayer.Stop();
		}

		private void OnDestroy()
		{
			UnityEngine.Debug.Log("OnDestroy");
			if (RtcEngine != null)
			{
				RtcEngine.InitEventHandler(null);
				RtcEngine.LeaveChannel();
				RtcEngine.Dispose();
			}
		}

		internal string GetChannelName()
		{
			return _channelName;
		}

		internal static VideoSurface MakeVideoView(uint uid, string channelId = "", VIDEO_SOURCE_TYPE source = VIDEO_SOURCE_TYPE.VIDEO_SOURCE_CAMERA_PRIMARY)
		{
			if ((object)GameObject.Find(uid.ToString()) != null)
			{
				return null;
			}
			VideoSurface videoSurface = MakeImageSurface(uid.ToString());
			if ((object)videoSurface == null)
			{
				return null;
			}
			if (uid == 0)
			{
				videoSurface.SetForUser(uid, channelId, source);
			}
			else
			{
				videoSurface.SetForUser(uid, channelId, VIDEO_SOURCE_TYPE.VIDEO_SOURCE_REMOTE);
			}
			videoSurface.OnTextureSizeModify += delegate(int width, int height)
			{
				float num = (float)height / (float)width;
				videoSurface.transform.localScale = new Vector3(-5f, 5f * num, 1f);
				UnityEngine.Debug.Log("OnTextureSizeModify: " + width + "  " + height);
			};
			videoSurface.SetEnable(enable: true);
			return videoSurface;
		}

		private static VideoSurface MakePlaneSurface(string goName)
		{
			GameObject gameObject = GameObject.CreatePrimitive(PrimitiveType.Plane);
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.transform.position = Vector3.zero;
			gameObject.transform.localScale = new Vector3(0.25f, 0.5f, 0.5f);
			return gameObject.AddComponent<VideoSurface>();
		}

		private static VideoSurface MakeImageSurface(string goName)
		{
			GameObject gameObject = new GameObject();
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.AddComponent<RawImage>();
			gameObject.AddComponent<UIElementDrag>();
			GameObject gameObject2 = GameObject.Find("VideoCanvas");
			if (gameObject2 != null)
			{
				gameObject.transform.parent = gameObject2.transform;
				UnityEngine.Debug.Log("add video view");
			}
			else
			{
				UnityEngine.Debug.Log("Canvas is null video view");
			}
			gameObject.transform.Rotate(0f, 0f, 180f);
			gameObject.transform.localPosition = Vector3.zero;
			gameObject.transform.localScale = new Vector3(2f, 3f, 1f);
			return gameObject.AddComponent<VideoSurface>();
		}

		internal static void DestroyVideoView(uint uid)
		{
			GameObject gameObject = GameObject.Find(uid.ToString());
			if ((object)gameObject != null)
			{
				UnityEngine.Object.Destroy(gameObject);
			}
		}
	}
	internal class UserEventHandler : IRtcEngineEventHandler
	{
		private readonly StartLocalVideoTranscoder _sample;

		internal UserEventHandler(StartLocalVideoTranscoder sample)
		{
			_sample = sample;
		}

		public override void OnError(int err, string msg)
		{
			_sample.Log.UpdateLog($"OnError err: {err}, msg: {msg}");
		}

		public override void OnJoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			int build = 0;
			UnityEngine.Debug.Log("Agora: OnJoinChannelSuccess ");
			_sample.Log.UpdateLog($"sdk version: ${_sample.RtcEngine.GetVersion(ref build)}");
			_sample.Log.UpdateLog($"OnJoinChannelSuccess channelName: {connection.channelId}, uid: {connection.localUid}, elapsed: {elapsed}");
			StartLocalVideoTranscoder.MakeVideoView(0u);
		}

		public override void OnRejoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			_sample.Log.UpdateLog("OnRejoinChannelSuccess");
		}

		public override void OnLeaveChannel(RtcConnection connection, RtcStats stats)
		{
			_sample.Log.UpdateLog("OnLeaveChannel");
			StartLocalVideoTranscoder.DestroyVideoView(0u);
		}

		public override void OnClientRoleChanged(RtcConnection connection, CLIENT_ROLE_TYPE oldRole, CLIENT_ROLE_TYPE newRole)
		{
			_sample.Log.UpdateLog("OnClientRoleChanged");
		}

		public override void OnUserJoined(RtcConnection connection, uint uid, int elapsed)
		{
			_sample.Log.UpdateLog($"OnUserJoined uid: ${uid} elapsed: ${elapsed}");
			StartLocalVideoTranscoder.MakeVideoView(uid, _sample.GetChannelName());
			if (!_sample.RemoteUserUids.Contains(uid))
			{
				_sample.RemoteUserUids.Add(uid);
			}
		}

		public override void OnUserOffline(RtcConnection connection, uint uid, USER_OFFLINE_REASON_TYPE reason)
		{
			_sample.Log.UpdateLog($"OnUserOffLine uid: ${uid}, reason: ${(int)reason}");
			StartLocalVideoTranscoder.DestroyVideoView(uid);
			_sample.RemoteUserUids.Remove(uid);
		}
	}
	internal class MpkEventHandler : IMediaPlayerSourceObserver
	{
		private readonly StartLocalVideoTranscoder _sample;

		internal MpkEventHandler(StartLocalVideoTranscoder sample)
		{
			_sample = sample;
		}

		public override void OnPlayerSourceStateChanged(MEDIA_PLAYER_STATE state, MEDIA_PLAYER_ERROR ec)
		{
			_sample.Log.UpdateLog($"OnPlayerSourceStateChanged state: {state}, ec: {ec}, playId: {_sample.MediaPlayer.GetId()}");
			UnityEngine.Debug.Log("OnPlayerSourceStateChanged");
			if (state == MEDIA_PLAYER_STATE.PLAYER_STATE_OPEN_COMPLETED)
			{
				_sample.MediaPlayer.Play();
			}
		}

		public override void OnPlayerEvent(MEDIA_PLAYER_EVENT @event, long elapsedTime, string message)
		{
			_sample.Log.UpdateLog($"OnPlayerEvent state: {@event}");
		}
	}
}
namespace Agora_RTC_Plugin.API_Example.Examples.Advanced.StartDirectCdnStreaming
{
	public class StartDirectCdnStreaming : MonoBehaviour
	{
		[FormerlySerializedAs("appIdInput")]
		[SerializeField]
		private AppIdInput _appIdInput;

		[Header("_____________Basic Configuration_____________")]
		[FormerlySerializedAs("APP_ID")]
		[SerializeField]
		private string _appID = "";

		[FormerlySerializedAs("TOKEN")]
		[SerializeField]
		private string _token = "";

		[FormerlySerializedAs("CHANNEL_NAME")]
		[SerializeField]
		private string _channelName = "";

		private const string PUBLISH_URL = "rtmp://push.alexmk.name/live/agora_rtc_unity";

		public Text LogText;

		internal Agora.Util.Logger Log;

		internal IRtcEngine RtcEngine;

		private void Start()
		{
			LoadAssetData();
			if (CheckAppId())
			{
				InitEngine();
				SetProfile();
				StartDirectCdnStreamingCamera();
			}
		}

		private void Update()
		{
			PermissionHelper.RequestMicrophontPermission();
			PermissionHelper.RequestCameraPermission();
		}

		private bool CheckAppId()
		{
			Log = new Agora.Util.Logger(LogText);
			return Log.DebugAssert(_appID.Length > 10, "Please fill in your appId in API-Example/profile/appIdInput.asset");
		}

		[ContextMenu("ShowAgoraBasicProfileData")]
		private void LoadAssetData()
		{
			if (!(_appIdInput == null))
			{
				_appID = _appIdInput.appID;
				_token = _appIdInput.token;
				_channelName = _appIdInput.channelName;
			}
		}

		private void InitEngine()
		{
			RtcEngine = Agora.Rtc.RtcEngine.CreateAgoraRtcEngine();
			new UserEventHandler(this);
			RtcEngineContext context = new RtcEngineContext(_appID, 0uL, CHANNEL_PROFILE_TYPE.CHANNEL_PROFILE_LIVE_BROADCASTING, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_DEFAULT);
			RtcEngine.Initialize(context);
			RtcEngine.InitEventHandler(new UserEventHandler(this));
		}

		private void SetProfile()
		{
			RtcEngine.EnableAudio();
			RtcEngine.EnableVideo();
			RtcEngine.SetChannelProfile(CHANNEL_PROFILE_TYPE.CHANNEL_PROFILE_LIVE_BROADCASTING);
			RtcEngine.SetClientRole(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
		}

		private void StartDirectCdnStreamingCamera()
		{
			DirectCdnStreamingMediaOptions directCdnStreamingMediaOptions = new DirectCdnStreamingMediaOptions();
			directCdnStreamingMediaOptions.publishMicrophoneTrack.SetValue(val: true);
			directCdnStreamingMediaOptions.publishCameraTrack.SetValue(val: true);
			RtcEngine.SetDirectCdnStreamingVideoConfiguration(new VideoEncoderConfiguration
			{
				dimensions = new VideoDimensions
				{
					width = 1280,
					height = 720
				},
				frameRate = 15,
				bitrate = 2260,
				minBitrate = -1,
				degradationPreference = DEGRADATION_PREFERENCE.MAINTAIN_QUALITY,
				codecType = VIDEO_CODEC_TYPE.VIDEO_CODEC_H264,
				mirrorMode = VIDEO_MIRROR_MODE_TYPE.VIDEO_MIRROR_MODE_DISABLED
			});
			RtcEngine.StartDirectCdnStreaming("rtmp://push.alexmk.name/live/agora_rtc_unity", directCdnStreamingMediaOptions);
			RtcEngine.StartPreview();
			MakeVideoView(0u);
		}

		private void OnDestroy()
		{
			UnityEngine.Debug.Log("OnDestroy");
			if (RtcEngine != null)
			{
				RtcEngine.InitEventHandler(null);
				DestroyVideoView(0u);
				RtcEngine.StopPreview();
				RtcEngine.StopDirectCdnStreaming();
				RtcEngine.Dispose();
			}
		}

		internal string GetChannelName()
		{
			return _channelName;
		}

		internal static void MakeVideoView(uint uid, string channelId = "")
		{
			if ((object)GameObject.Find(uid.ToString()) != null)
			{
				return;
			}
			VideoSurface videoSurface = MakeImageSurface(uid.ToString());
			if ((object)videoSurface != null)
			{
				if (uid == 0)
				{
					videoSurface.SetForUser(uid, channelId);
				}
				else
				{
					videoSurface.SetForUser(uid, channelId, VIDEO_SOURCE_TYPE.VIDEO_SOURCE_REMOTE);
				}
				videoSurface.OnTextureSizeModify += delegate(int width, int height)
				{
					float num = (float)height / (float)width;
					videoSurface.transform.localScale = new Vector3(-5f, 5f * num, 1f);
					UnityEngine.Debug.Log("OnTextureSizeModify: " + width + "  " + height);
				};
				videoSurface.SetEnable(enable: true);
			}
		}

		private static VideoSurface MakePlaneSurface(string goName)
		{
			GameObject gameObject = GameObject.CreatePrimitive(PrimitiveType.Plane);
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.transform.Rotate(-90f, 0f, 0f);
			float y = UnityEngine.Random.Range(3f, 5f);
			float x = UnityEngine.Random.Range(-2f, 2f);
			gameObject.transform.position = new Vector3(x, y, 0f);
			gameObject.transform.localScale = new Vector3(0.25f, 0.5f, 0.5f);
			return gameObject.AddComponent<VideoSurface>();
		}

		private static VideoSurface MakeImageSurface(string goName)
		{
			GameObject gameObject = new GameObject();
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.AddComponent<RawImage>();
			gameObject.AddComponent<UIElementDrag>();
			GameObject gameObject2 = GameObject.Find("VideoCanvas");
			if (gameObject2 != null)
			{
				gameObject.transform.parent = gameObject2.transform;
				UnityEngine.Debug.Log("add video view");
			}
			else
			{
				UnityEngine.Debug.Log("Canvas is null video view");
			}
			gameObject.transform.Rotate(0f, 0f, 180f);
			gameObject.transform.localPosition = Vector3.zero;
			gameObject.transform.localScale = new Vector3(3f, 4f, 1f);
			return gameObject.AddComponent<VideoSurface>();
		}

		internal static void DestroyVideoView(uint uid)
		{
			GameObject gameObject = GameObject.Find(uid.ToString());
			if ((object)gameObject != null)
			{
				UnityEngine.Object.Destroy(gameObject);
			}
		}
	}
	internal class UserEventHandler : IRtcEngineEventHandler
	{
		private readonly StartDirectCdnStreaming _startDirectCdnStreaming;

		internal UserEventHandler(StartDirectCdnStreaming startDirectCdnStreaming)
		{
			_startDirectCdnStreaming = startDirectCdnStreaming;
		}

		public override void OnJoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			int build = 0;
			_startDirectCdnStreaming.Log.UpdateLog($"sdk version: ${_startDirectCdnStreaming.RtcEngine.GetVersion(ref build)}");
			_startDirectCdnStreaming.Log.UpdateLog($"onJoinChannelSuccess channelName: {connection.channelId}, uid: {connection.localUid}, elapsed: {elapsed}");
			StartDirectCdnStreaming.MakeVideoView(0u);
		}

		public override void OnLeaveChannel(RtcConnection connection, RtcStats stats)
		{
			_startDirectCdnStreaming.Log.UpdateLog("OnLeaveChannelSuccess");
			StartDirectCdnStreaming.DestroyVideoView(0u);
		}

		public override void OnUserJoined(RtcConnection connection, uint remoteUid, int elapsed)
		{
			_startDirectCdnStreaming.Log.UpdateLog($"OnUserJoined uid: ${connection.localUid} elapsed: ${elapsed}");
			StartDirectCdnStreaming.MakeVideoView(remoteUid, _startDirectCdnStreaming.GetChannelName());
		}

		public override void OnUserOffline(RtcConnection connection, uint remoteUid, USER_OFFLINE_REASON_TYPE reason)
		{
			_startDirectCdnStreaming.Log.UpdateLog($"OnUserOffLine uid: ${remoteUid}, reason: ${(int)reason}");
			StartDirectCdnStreaming.DestroyVideoView(remoteUid);
		}

		public override void OnError(int error, string msg)
		{
			_startDirectCdnStreaming.Log.UpdateLog($"OnSDKError error: {error}, msg: {msg}");
		}

		public override void OnConnectionLost(RtcConnection connection)
		{
			_startDirectCdnStreaming.Log.UpdateLog("OnConnectionLost ");
		}

		public override void OnDirectCdnStreamingStateChanged(DIRECT_CDN_STREAMING_STATE state, DIRECT_CDN_STREAMING_ERROR error, string message)
		{
			_startDirectCdnStreaming.Log.UpdateLog($"OnDirectCdnStreamingStateChanged state: {state}, error: {error}");
		}

		public override void OnDirectCdnStreamingStats(DirectCdnStreamingStats stats)
		{
			_startDirectCdnStreaming.Log.UpdateLog("OnDirectCdnStreamingStats videoHeight:" + stats.videoHeight + " videoWidth:" + stats.videoWidth);
			_startDirectCdnStreaming.Log.UpdateLog("OnDirectCdnStreamingStats fps:" + stats.fps);
		}
	}
}
namespace Agora_RTC_Plugin.API_Example.Examples.Advanced.SpatialAudioWithMediaPlayer
{
	public class SpatialAudioWithMediaPlayer : MonoBehaviour
	{
		[FormerlySerializedAs("appIdInput")]
		[SerializeField]
		private AppIdInput _appIdInput;

		[Header("_____________Basic Configuration_____________")]
		[FormerlySerializedAs("APP_ID")]
		[SerializeField]
		private string _appID = "";

		[FormerlySerializedAs("TOKEN")]
		[SerializeField]
		private string _token = "";

		[FormerlySerializedAs("CHANNEL_NAME")]
		[SerializeField]
		private string _channelName = "";

		public Text LogText;

		internal Agora.Util.Logger Log;

		internal IRtcEngineEx RtcEngine;

		internal IMediaPlayer MediaPlayer;

		private const string MPK_URL = "https://agora-adc-artifacts.oss-cn-beijing.aliyuncs.com/video/meta_live_mpk.mov";

		private Button _button1;

		private Button _button2;

		private Button _button3;

		public uint UidUseInEx = 123u;

		public uint UidUseInMPK = 67890u;

		public ILocalSpatialAudioEngine SpatialAudioEngine;

		public int x;

		private void Start()
		{
			LoadAssetData();
			if (CheckAppId())
			{
				SetUpUI();
				InitEngine();
				InitMediaPlayer();
				InitSpatialAudioEngine();
				JoinChannelEx(_channelName, UidUseInEx);
				JoinChannelExWithMPK(_channelName, UidUseInMPK, MediaPlayer.GetId());
			}
		}

		private void Update()
		{
			PermissionHelper.RequestMicrophontPermission();
			PermissionHelper.RequestCameraPermission();
		}

		[ContextMenu("ShowAgoraBasicProfileData")]
		private void LoadAssetData()
		{
			if (!(_appIdInput == null))
			{
				_appID = _appIdInput.appID;
				_token = _appIdInput.token;
				_channelName = _appIdInput.channelName;
			}
		}

		private bool CheckAppId()
		{
			Log = new Agora.Util.Logger(LogText);
			return Log.DebugAssert(_appID.Length > 10, "Please fill in your appId in API-Example/profile/appIdInput.asset");
		}

		private void InitEngine()
		{
			RtcEngine = Agora.Rtc.RtcEngine.CreateAgoraRtcEngineEx();
			UserEventHandler engineEventHandler = new UserEventHandler(this);
			RtcEngineContext context = new RtcEngineContext(_appID, 0uL, CHANNEL_PROFILE_TYPE.CHANNEL_PROFILE_LIVE_BROADCASTING, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_GAME_STREAMING);
			UnityEngine.Debug.Log("Agora: Initialize " + RtcEngine.Initialize(context));
			RtcEngine.InitEventHandler(engineEventHandler);
		}

		private void InitMediaPlayer()
		{
			MediaPlayer = RtcEngine.CreateMediaPlayer();
			if (MediaPlayer == null)
			{
				UnityEngine.Debug.Log("GetAgoraRtcMediaPlayer failed!");
				return;
			}
			MpkEventHandler engineEventHandler = new MpkEventHandler(this);
			MediaPlayer.InitEventHandler(engineEventHandler);
			UnityEngine.Debug.Log("playerId id: " + MediaPlayer.GetId());
		}

		private void InitSpatialAudioEngine()
		{
			SpatialAudioEngine = RtcEngine.GetLocalSpatialAudioEngine();
			UnityEngine.Debug.Log("_spatialAudioEngine: Initialize " + SpatialAudioEngine.Initialize());
			SpatialAudioEngine.SetAudioRecvRange(30f);
		}

		private void JoinChannelEx(string channelName, uint uid)
		{
			RtcEngine.EnableAudio();
			RtcEngine.EnableVideo();
			RtcEngine.EnableSpatialAudio(enabled: true);
			RtcEngine.SetClientRole(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			RtcConnection rtcConnection = new RtcConnection();
			rtcConnection.channelId = channelName;
			rtcConnection.localUid = uid;
			ChannelMediaOptions channelMediaOptions = new ChannelMediaOptions();
			channelMediaOptions.autoSubscribeAudio.SetValue(val: true);
			channelMediaOptions.autoSubscribeVideo.SetValue(val: true);
			channelMediaOptions.publishCameraTrack.SetValue(val: false);
			channelMediaOptions.enableAudioRecordingOrPlayout.SetValue(val: true);
			channelMediaOptions.clientRoleType.SetValue(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			UnityEngine.Debug.Log("RtcEngineController JoinChannelEx returns: " + RtcEngine.JoinChannelEx("", rtcConnection, channelMediaOptions));
		}

		private void JoinChannelExWithMPK(string channelName, uint uid, int playerId)
		{
			RtcConnection rtcConnection = new RtcConnection();
			rtcConnection.channelId = channelName;
			rtcConnection.localUid = uid;
			ChannelMediaOptions channelMediaOptions = new ChannelMediaOptions();
			channelMediaOptions.autoSubscribeAudio.SetValue(val: false);
			channelMediaOptions.autoSubscribeVideo.SetValue(val: false);
			channelMediaOptions.publishCameraTrack.SetValue(val: false);
			channelMediaOptions.publishMediaPlayerAudioTrack.SetValue(val: true);
			channelMediaOptions.publishMediaPlayerVideoTrack.SetValue(val: true);
			channelMediaOptions.publishMediaPlayerId.SetValue(playerId);
			channelMediaOptions.enableAudioRecordingOrPlayout.SetValue(val: false);
			channelMediaOptions.clientRoleType.SetValue(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			int num = RtcEngine.JoinChannelEx("", rtcConnection, channelMediaOptions);
			RtcEngine.UpdateChannelMediaOptionsEx(channelMediaOptions, rtcConnection);
			UnityEngine.Debug.Log("RtcEngineController JoinChannelEx_MPK returns: " + num);
		}

		private void SetUpUI()
		{
			_button1 = GameObject.Find("Button1").GetComponent<Button>();
			_button1.onClick.AddListener(onLeftLocationPress);
			_button2 = GameObject.Find("Button2").GetComponent<Button>();
			_button2.onClick.AddListener(onRightLocationPress);
			_button3 = GameObject.Find("Button3").GetComponent<Button>();
			_button3.onClick.AddListener(onOpenButtonPress);
		}

		private void onLeftLocationPress()
		{
			float[] position = new float[3] { 0f, 1f, 0f };
			UnityEngine.Debug.Log("_spatialAudio.UpdateRemotePosition returns: " + SpatialAudioEngine.UpdateRemotePositionEx(UidUseInMPK, position, new float[3], new RtcConnection(_channelName, UidUseInEx)));
		}

		private void onRightLocationPress()
		{
			float[] position = new float[3] { 0f, -1f, 0f };
			UnityEngine.Debug.Log("_spatialAudio.UpdateRemotePosition returns: " + SpatialAudioEngine.UpdateRemotePositionEx(UidUseInMPK, position, new float[3], new RtcConnection(_channelName, UidUseInEx)));
		}

		private void onOpenButtonPress()
		{
			UnityEngine.Debug.Log("_mediaPlayer.Open returns: " + MediaPlayer.Open("https://agora-adc-artifacts.oss-cn-beijing.aliyuncs.com/video/meta_live_mpk.mov", 0L));
			MediaPlayer.AdjustPlayoutVolume(0);
		}

		private void OnDestroy()
		{
			UnityEngine.Debug.Log("OnDestroy");
			if (RtcEngine != null)
			{
				RtcEngine.InitEventHandler(null);
				RtcEngine.LeaveChannel();
				RtcEngine.Dispose();
			}
		}

		internal string GetChannelName()
		{
			return _channelName;
		}

		internal static void MakeVideoView(uint uid, string channelId = "")
		{
			if ((object)GameObject.Find(uid.ToString()) != null)
			{
				return;
			}
			VideoSurface videoSurface = MakeImageSurface(uid.ToString());
			if ((object)videoSurface != null)
			{
				videoSurface.SetForUser(uid, channelId, VIDEO_SOURCE_TYPE.VIDEO_SOURCE_REMOTE);
				videoSurface.SetEnable(enable: true);
				videoSurface.OnTextureSizeModify += delegate(int width, int height)
				{
					float num = (float)height / (float)width;
					videoSurface.transform.localScale = new Vector3(-5f, 5f * num, 1f);
					UnityEngine.Debug.Log("OnTextureSizeModify: " + width + "  " + height);
				};
			}
		}

		private static VideoSurface MakePlaneSurface(string goName)
		{
			GameObject gameObject = GameObject.CreatePrimitive(PrimitiveType.Plane);
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.transform.Rotate(-90f, 0f, 0f);
			gameObject.transform.position = Vector3.zero;
			gameObject.transform.localScale = new Vector3(0.25f, 0.5f, 0.5f);
			return gameObject.AddComponent<VideoSurface>();
		}

		private static VideoSurface MakeImageSurface(string goName)
		{
			GameObject gameObject = new GameObject();
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.AddComponent<RawImage>();
			gameObject.AddComponent<UIElementDrag>();
			GameObject gameObject2 = GameObject.Find("VideoCanvas");
			if (gameObject2 != null)
			{
				gameObject.transform.parent = gameObject2.transform;
				UnityEngine.Debug.Log("add video view");
			}
			else
			{
				UnityEngine.Debug.Log("Canvas is null video view");
			}
			gameObject.transform.Rotate(0f, 0f, 180f);
			gameObject.transform.localPosition = Vector3.zero;
			gameObject.transform.localScale = new Vector3(2f, 3f, 1f);
			return gameObject.AddComponent<VideoSurface>();
		}

		internal static void DestroyVideoView(uint uid)
		{
			GameObject gameObject = GameObject.Find(uid.ToString());
			if ((object)gameObject != null)
			{
				UnityEngine.Object.Destroy(gameObject);
			}
		}
	}
	internal class MpkEventHandler : IMediaPlayerSourceObserver
	{
		private readonly SpatialAudioWithMediaPlayer _spatialAudio;

		internal MpkEventHandler(SpatialAudioWithMediaPlayer spatialAudio)
		{
			_spatialAudio = spatialAudio;
		}

		public override void OnPlayerSourceStateChanged(MEDIA_PLAYER_STATE state, MEDIA_PLAYER_ERROR ec)
		{
			_spatialAudio.Log.UpdateLog($"OnPlayerSourceStateChanged state: {state}, ec: {ec}, playId: {_spatialAudio.MediaPlayer.GetId()}");
			UnityEngine.Debug.Log("OnPlayerSourceStateChanged");
			if (state == MEDIA_PLAYER_STATE.PLAYER_STATE_OPEN_COMPLETED)
			{
				_spatialAudio.x = 1;
				UnityEngine.Debug.Log("Play return" + _spatialAudio.MediaPlayer.Play());
				SpatialAudioWithMediaPlayer.MakeVideoView(_spatialAudio.UidUseInMPK, _spatialAudio.GetChannelName());
			}
		}
	}
	internal class UserEventHandler : IRtcEngineEventHandler
	{
		private readonly SpatialAudioWithMediaPlayer _spatialAudio;

		internal UserEventHandler(SpatialAudioWithMediaPlayer spatialAudio)
		{
			_spatialAudio = spatialAudio;
		}

		public override void OnError(int err, string msg)
		{
			_spatialAudio.Log.UpdateLog($"OnError err: {err}, msg: {msg}");
		}

		public override void OnJoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			UnityEngine.Debug.Log("Agora: OnJoinChannelSuccess ");
			_spatialAudio.Log.UpdateLog($"OnJoinChannelSuccess channelName: {connection.channelId}, uid: {connection.localUid}, elapsed: {elapsed}");
			float[] position = new float[3];
			float[] axisForward = new float[3] { 1f, 0f, 0f };
			float[] axisRight = new float[3] { 0f, 1f, 0f };
			float[] axisUp = new float[3] { 0f, 0f, 1f };
			UnityEngine.Debug.Log("UpdateSelfPosition return: " + _spatialAudio.SpatialAudioEngine.UpdateSelfPositionEx(position, axisForward, axisRight, axisUp, connection));
		}

		public override void OnRejoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			_spatialAudio.Log.UpdateLog("OnRejoinChannelSuccess");
		}

		public override void OnLeaveChannel(RtcConnection connection, RtcStats stats)
		{
			_spatialAudio.Log.UpdateLog("OnLeaveChannel");
			SpatialAudioWithMediaPlayer.DestroyVideoView(0u);
		}

		public override void OnClientRoleChanged(RtcConnection connection, CLIENT_ROLE_TYPE oldRole, CLIENT_ROLE_TYPE newRole)
		{
			_spatialAudio.Log.UpdateLog("OnClientRoleChanged");
		}

		public override void OnUserJoined(RtcConnection connection, uint uid, int elapsed)
		{
			_spatialAudio.Log.UpdateLog($"OnUserJoined uid: ${uid} elapsed: ${elapsed}");
			if (uid == _spatialAudio.UidUseInMPK)
			{
				_spatialAudio.Log.UpdateLog($"OnUserJoined uid: ${uid} elapsed: ${elapsed}");
			}
			else if (uid == _spatialAudio.UidUseInEx)
			{
				_spatialAudio.Log.UpdateLog($"OnUserJoined uid: ${uid} elapsed: ${elapsed}");
				SpatialAudioWithMediaPlayer.MakeVideoView(uid, _spatialAudio.GetChannelName());
			}
		}

		public override void OnUserOffline(RtcConnection connection, uint uid, USER_OFFLINE_REASON_TYPE reason)
		{
			_spatialAudio.Log.UpdateLog($"OnUserOffLine uid: ${uid}, reason: ${(int)reason}");
			SpatialAudioWithMediaPlayer.DestroyVideoView(uid);
		}
	}
}
namespace Agora_RTC_Plugin.API_Example.Examples.Advanced.SetVideoEncodeConfiguration
{
	public class SetVideoEncodeConfiguration : MonoBehaviour
	{
		[FormerlySerializedAs("appIdInput")]
		[SerializeField]
		private AppIdInput _appIdInput;

		[Header("_____________Basic Configuration_____________")]
		[FormerlySerializedAs("APP_ID")]
		[SerializeField]
		private string _appID = "";

		[FormerlySerializedAs("TOKEN")]
		[SerializeField]
		private string _token = "";

		[FormerlySerializedAs("CHANNEL_NAME")]
		[SerializeField]
		private string _channelName = "";

		public Text LogText;

		internal Agora.Util.Logger Log;

		internal IRtcEngine RtcEngine;

		private VideoDimensions[] _dimensions = new VideoDimensions[3]
		{
			new VideoDimensions
			{
				width = 640,
				height = 480
			},
			new VideoDimensions
			{
				width = 480,
				height = 480
			},
			new VideoDimensions
			{
				width = 480,
				height = 240
			}
		};

		private void Start()
		{
			LoadAssetData();
			if (CheckAppId())
			{
				InitEngine();
				JoinChannel();
				SetVideoEncoderConfiguration();
			}
		}

		private void Update()
		{
			PermissionHelper.RequestMicrophontPermission();
			PermissionHelper.RequestCameraPermission();
		}

		private bool CheckAppId()
		{
			Log = new Agora.Util.Logger(LogText);
			return Log.DebugAssert(_appID.Length > 10, "Please fill in your appId in API-Example/profile/appIdInput.asset");
		}

		[ContextMenu("ShowAgoraBasicProfileData")]
		private void LoadAssetData()
		{
			if (!(_appIdInput == null))
			{
				_appID = _appIdInput.appID;
				_token = _appIdInput.token;
				_channelName = _appIdInput.channelName;
			}
		}

		private void InitEngine()
		{
			RtcEngine = Agora.Rtc.RtcEngine.CreateAgoraRtcEngine();
			UserEventHandler engineEventHandler = new UserEventHandler(this);
			RtcEngineContext context = new RtcEngineContext(_appID, 0uL, CHANNEL_PROFILE_TYPE.CHANNEL_PROFILE_LIVE_BROADCASTING, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_DEFAULT);
			RtcEngine.Initialize(context);
			RtcEngine.InitEventHandler(engineEventHandler);
		}

		private void JoinChannel()
		{
			RtcEngine.SetClientRole(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			RtcEngine.EnableAudio();
			RtcEngine.EnableVideo();
			RtcEngine.JoinChannel(_token, _channelName);
		}

		private void SetVideoEncoderConfiguration(int dim = 0)
		{
			if (dim >= _dimensions.Length)
			{
				UnityEngine.Debug.LogError("Invalid dimension choice!");
				return;
			}
			VideoEncoderConfiguration videoEncoderConfiguration = new VideoEncoderConfiguration
			{
				dimensions = _dimensions[dim],
				frameRate = 15,
				codecType = VIDEO_CODEC_TYPE.VIDEO_CODEC_H264,
				bitrate = 0,
				minBitrate = 1,
				orientationMode = ORIENTATION_MODE.ORIENTATION_MODE_ADAPTIVE,
				degradationPreference = DEGRADATION_PREFERENCE.MAINTAIN_FRAMERATE,
				mirrorMode = VIDEO_MIRROR_MODE_TYPE.VIDEO_MIRROR_MODE_AUTO
			};
			RtcEngine.SetVideoEncoderConfiguration(videoEncoderConfiguration);
		}

		private void OnDestroy()
		{
			UnityEngine.Debug.Log("OnDestroy");
			if (RtcEngine != null)
			{
				RtcEngine.InitEventHandler(null);
				RtcEngine.LeaveChannel();
				RtcEngine.Dispose();
			}
		}

		internal string GetChannelName()
		{
			return _channelName;
		}

		internal static void MakeVideoView(uint uid, string channelId = "")
		{
			if ((object)GameObject.Find(uid.ToString()) != null)
			{
				return;
			}
			VideoSurface videoSurface = MakeImageSurface(uid.ToString());
			if ((object)videoSurface != null)
			{
				if (uid == 0)
				{
					videoSurface.SetForUser(uid, channelId);
				}
				else
				{
					videoSurface.SetForUser(uid, channelId, VIDEO_SOURCE_TYPE.VIDEO_SOURCE_REMOTE);
				}
				videoSurface.OnTextureSizeModify += delegate(int width, int height)
				{
					float num = (float)height / (float)width;
					videoSurface.transform.localScale = new Vector3(-5f, 5f * num, 1f);
					UnityEngine.Debug.Log("OnTextureSizeModify: " + width + "  " + height);
				};
				videoSurface.SetEnable(enable: true);
			}
		}

		private static VideoSurface MakePlaneSurface(string goName)
		{
			GameObject gameObject = GameObject.CreatePrimitive(PrimitiveType.Plane);
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.transform.Rotate(-90f, 0f, 0f);
			gameObject.transform.position = Vector3.zero;
			gameObject.transform.localScale = new Vector3(0.25f, 0.5f, 0.5f);
			return gameObject.AddComponent<VideoSurface>();
		}

		private static VideoSurface MakeImageSurface(string goName)
		{
			GameObject gameObject = new GameObject();
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.AddComponent<RawImage>();
			gameObject.AddComponent<UIElementDrag>();
			GameObject gameObject2 = GameObject.Find("VideoCanvas");
			if (gameObject2 != null)
			{
				gameObject.transform.parent = gameObject2.transform;
				UnityEngine.Debug.Log("add video view");
			}
			else
			{
				UnityEngine.Debug.Log("Canvas is null video view");
			}
			gameObject.transform.Rotate(0f, 0f, 180f);
			gameObject.transform.localPosition = Vector3.zero;
			gameObject.transform.localScale = new Vector3(2f, 3f, 1f);
			return gameObject.AddComponent<VideoSurface>();
		}

		internal static void DestroyVideoView(uint uid)
		{
			GameObject gameObject = GameObject.Find(uid.ToString());
			if ((object)gameObject != null)
			{
				UnityEngine.Object.Destroy(gameObject);
			}
		}
	}
	internal class UserEventHandler : IRtcEngineEventHandler
	{
		private readonly SetVideoEncodeConfiguration _videoEncoderConfiguration;

		internal UserEventHandler(SetVideoEncodeConfiguration videoEncoderConfiguration)
		{
			_videoEncoderConfiguration = videoEncoderConfiguration;
		}

		public override void OnJoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			int build = 0;
			_videoEncoderConfiguration.Log.UpdateLog($"sdk version: ${_videoEncoderConfiguration.RtcEngine.GetVersion(ref build)}");
			_videoEncoderConfiguration.Log.UpdateLog($"onJoinChannelSuccess channelName: {connection.channelId}, uid: {connection.localUid}, elapsed: {elapsed}");
			SetVideoEncodeConfiguration.MakeVideoView(0u);
		}

		public override void OnLeaveChannel(RtcConnection connection, RtcStats stats)
		{
			_videoEncoderConfiguration.Log.UpdateLog("OnLeaveChannelSuccess");
			SetVideoEncodeConfiguration.DestroyVideoView(0u);
		}

		public override void OnUserJoined(RtcConnection connection, uint uid, int elapsed)
		{
			_videoEncoderConfiguration.Log.UpdateLog($"OnUserJoined uid: ${uid} elapsed: ${elapsed}");
			SetVideoEncodeConfiguration.MakeVideoView(uid, _videoEncoderConfiguration.GetChannelName());
		}

		public override void OnUserOffline(RtcConnection connection, uint uid, USER_OFFLINE_REASON_TYPE reason)
		{
			_videoEncoderConfiguration.Log.UpdateLog($"OnUserOffLine uid: ${uid}, reason: ${(int)reason}");
			SetVideoEncodeConfiguration.DestroyVideoView(uid);
		}

		public override void OnError(int error, string msg)
		{
			_videoEncoderConfiguration.Log.UpdateLog($"OnSDKError error: {error}, msg: {msg}");
		}

		public override void OnConnectionLost(RtcConnection connection)
		{
			_videoEncoderConfiguration.Log.UpdateLog($"OnConnectionLost ");
		}
	}
}
namespace Agora_RTC_Plugin.API_Example.Examples.Advanced.SetEncryption
{
	public class EncryptionSample : MonoBehaviour
	{
		[FormerlySerializedAs("appIdInput")]
		[SerializeField]
		private AppIdInput _appIdInput;

		[Header("_____________Basic Configuration_____________")]
		[FormerlySerializedAs("APP_ID")]
		[SerializeField]
		private string _appID = "";

		[FormerlySerializedAs("TOKEN")]
		[SerializeField]
		private string _token = "";

		[FormerlySerializedAs("CHANNEL_NAME")]
		[SerializeField]
		private string _channelName = "";

		[SerializeField]
		public ENCRYPTION_MODE EncrytionMode = ENCRYPTION_MODE.AES_128_GCM2;

		private string secret = "Hello_Unity";

		public Text LogText;

		internal Agora.Util.Logger Log;

		internal IRtcEngine RtcEngine;

		private void Start()
		{
			LoadAssetData();
			if (CheckAppId())
			{
				InitRtcEngine();
				SetEncryption();
				JoinChannel();
			}
		}

		private void Update()
		{
			PermissionHelper.RequestMicrophontPermission();
		}

		private bool CheckAppId()
		{
			Log = new Agora.Util.Logger(LogText);
			return Log.DebugAssert(_appID.Length > 10, "Please fill in your appId in API-Example/profile/appIdInput.asset");
		}

		[ContextMenu("ShowAgoraBasicProfileData")]
		private void LoadAssetData()
		{
			if (!(_appIdInput == null))
			{
				_appID = _appIdInput.appID;
				_token = _appIdInput.token;
				_channelName = _appIdInput.channelName;
			}
		}

		private void InitRtcEngine()
		{
			RtcEngine = Agora.Rtc.RtcEngine.CreateAgoraRtcEngine();
			RtcEngineContext context = new RtcEngineContext(_appID, 0uL, CHANNEL_PROFILE_TYPE.CHANNEL_PROFILE_LIVE_BROADCASTING, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_DEFAULT);
			RtcEngine.Initialize(context);
			RtcEngine.InitEventHandler(new UserEventHandler(this));
		}

		private byte[] GetEncryptionSaltFromServer()
		{
			return Encoding.UTF8.GetBytes("EncryptionKdfSaltInBase64Strings");
		}

		private void SetEncryption()
		{
			byte[] encryptionSaltFromServer = GetEncryptionSaltFromServer();
			EncryptionConfig config = new EncryptionConfig
			{
				encryptionMode = EncrytionMode,
				encryptionKey = secret,
				encryptionKdfSalt = encryptionSaltFromServer
			};
			Log.UpdateLog($"encryption mode: {EncrytionMode} secret: {secret}");
			int num = RtcEngine.EnableEncryption(enabled: true, config);
			Log.UpdateLog("EnableEncryption: " + num);
		}

		private void JoinChannel()
		{
			RtcEngine.SetClientRole(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			RtcEngine.EnableAudio();
			RtcEngine.EnableVideo();
			RtcEngine.JoinChannel(_token, _channelName);
		}

		private void OnLeaveBtnClick()
		{
			RtcEngine.LeaveChannel();
		}

		private void OnDestroy()
		{
			UnityEngine.Debug.Log("OnDestroy");
			if (RtcEngine != null)
			{
				RtcEngine.InitEventHandler(null);
				RtcEngine.LeaveChannel();
				RtcEngine.Dispose();
			}
		}

		internal static void MakeVideoView(uint uid, string channelId = "")
		{
			if ((object)GameObject.Find(uid.ToString()) != null)
			{
				return;
			}
			VideoSurface videoSurface = MakeImageSurface(uid.ToString());
			if ((object)videoSurface != null)
			{
				if (uid == 0)
				{
					videoSurface.SetForUser(uid, channelId);
				}
				else
				{
					videoSurface.SetForUser(uid, channelId, VIDEO_SOURCE_TYPE.VIDEO_SOURCE_REMOTE);
				}
				videoSurface.OnTextureSizeModify += delegate(int width, int height)
				{
					float num = (float)height / (float)width;
					videoSurface.transform.localScale = new Vector3(-5f, 5f * num, 1f);
					UnityEngine.Debug.Log("OnTextureSizeModify: " + width + "  " + height);
				};
				videoSurface.SetEnable(enable: true);
			}
		}

		private static VideoSurface MakePlaneSurface(string goName)
		{
			GameObject gameObject = GameObject.CreatePrimitive(PrimitiveType.Plane);
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.transform.Rotate(-90f, 0f, 0f);
			UnityEngine.Random.Range(3f, 5f);
			UnityEngine.Random.Range(-2f, 2f);
			gameObject.transform.position = Vector3.zero;
			gameObject.transform.localScale = new Vector3(0.25f, 0.5f, 0.5f);
			return gameObject.AddComponent<VideoSurface>();
		}

		private static VideoSurface MakeImageSurface(string goName)
		{
			GameObject gameObject = new GameObject();
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.AddComponent<RawImage>();
			gameObject.AddComponent<UIElementDrag>();
			GameObject gameObject2 = GameObject.Find("VideoCanvas");
			if (gameObject2 != null)
			{
				gameObject.transform.parent = gameObject2.transform;
				UnityEngine.Debug.Log("add video view");
			}
			else
			{
				UnityEngine.Debug.Log("Canvas is null video view");
			}
			gameObject.transform.Rotate(0f, 0f, 180f);
			gameObject.transform.localPosition = Vector3.zero;
			gameObject.transform.localScale = new Vector3(2f, 3f, 1f);
			return gameObject.AddComponent<VideoSurface>();
		}

		internal static void DestroyVideoView(uint uid)
		{
			GameObject gameObject = GameObject.Find(uid.ToString());
			if ((object)gameObject != null)
			{
				UnityEngine.Object.Destroy(gameObject);
			}
		}

		internal string GetChannelName()
		{
			return _channelName;
		}
	}
	internal class UserEventHandler : IRtcEngineEventHandler
	{
		private readonly EncryptionSample _encryptionSample;

		internal UserEventHandler(EncryptionSample encryptionSample)
		{
			_encryptionSample = encryptionSample;
		}

		public override void OnJoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			int build = 0;
			_encryptionSample.Log.UpdateLog($"sdk version: {_encryptionSample.RtcEngine.GetVersion(ref build)}");
			_encryptionSample.Log.UpdateLog($"onJoinChannelSuccess channelName: {connection.channelId}, uid: {connection.localUid}, elapsed: {elapsed}");
			EncryptionSample.MakeVideoView(0u);
		}

		public override void OnLeaveChannel(RtcConnection connection, RtcStats stats)
		{
			_encryptionSample.Log.UpdateLog("OnLeaveChannelSuccess");
			EncryptionSample.MakeVideoView(0u);
		}

		public override void OnUserJoined(RtcConnection connection, uint uid, int elapsed)
		{
			_encryptionSample.Log.UpdateLog($"OnUserJoined uid: ${uid} elapsed: ${elapsed}");
			EncryptionSample.MakeVideoView(uid, _encryptionSample.GetChannelName());
		}

		public override void OnUserOffline(RtcConnection connection, uint uid, USER_OFFLINE_REASON_TYPE reason)
		{
			_encryptionSample.Log.UpdateLog($"OnUserOffLine uid: ${uid}, reason: ${(int)reason}");
			EncryptionSample.DestroyVideoView(uid);
		}

		public override void OnError(int error, string msg)
		{
			_encryptionSample.Log.UpdateLog($"OnSDKError error: {error}, msg: {msg}");
		}

		public override void OnConnectionLost(RtcConnection connection)
		{
			_encryptionSample.Log.UpdateLog($"OnConnectionLost ");
		}

		public override void OnEncryptionError(RtcConnection connection, ENCRYPTION_ERROR_TYPE errorType)
		{
			_encryptionSample.Log.UpdateLog("OnEncryptionError: " + errorType);
		}
	}
}
namespace Agora_RTC_Plugin.API_Example.Examples.Advanced.SetBeautyEffectOptions
{
	public class SetBeautyEffectOptions : MonoBehaviour
	{
		[FormerlySerializedAs("appIdInput")]
		[SerializeField]
		private AppIdInput _appIdInput;

		[Header("_____________Basic Configuration_____________")]
		[FormerlySerializedAs("APP_ID")]
		[SerializeField]
		private string _appID = "";

		[FormerlySerializedAs("TOKEN")]
		[SerializeField]
		private string _token = "";

		[FormerlySerializedAs("CHANNEL_NAME")]
		[SerializeField]
		private string _channelName = "";

		public Text LogText;

		internal Agora.Util.Logger Log;

		internal IRtcEngine RtcEngine;

		public Text TextLighteningLevel;

		public Text TextSmoothnessLevel;

		public Text TextRednessLevel;

		public Text TextSharpnessLevel;

		public Slider SliderLighteningLevel;

		public Slider SliderSmoothnessLevel;

		public Slider SliderRednessLevel;

		public Slider SliderSharpnessLevel;

		private void Start()
		{
			LoadAssetData();
			if (CheckAppId())
			{
				SetUpUI();
				InitEngine();
				InitLogFilePath();
				JoinChannel();
			}
		}

		private void Update()
		{
			PermissionHelper.RequestMicrophontPermission();
			PermissionHelper.RequestCameraPermission();
		}

		[ContextMenu("ShowAgoraBasicProfileData")]
		private void LoadAssetData()
		{
			if (!(_appIdInput == null))
			{
				_appID = _appIdInput.appID;
				_token = _appIdInput.token;
				_channelName = _appIdInput.channelName;
			}
		}

		private bool CheckAppId()
		{
			Log = new Agora.Util.Logger(LogText);
			return Log.DebugAssert(_appID.Length > 10, "Please fill in your appId in API-Example/profile/appIdInput.asset");
		}

		private void InitEngine()
		{
			RtcEngine = Agora.Rtc.RtcEngine.CreateAgoraRtcEngine();
			UserEventHandler engineEventHandler = new UserEventHandler(this);
			RtcEngineContext context = new RtcEngineContext(_appID, 0uL, CHANNEL_PROFILE_TYPE.CHANNEL_PROFILE_LIVE_BROADCASTING, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_DEFAULT);
			RtcEngine.Initialize(context);
			RtcEngine.InitEventHandler(engineEventHandler);
		}

		private void JoinChannel()
		{
			RtcEngine.EnableAudio();
			RtcEngine.EnableVideo();
			RtcEngine.SetClientRole(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			RtcEngine.JoinChannel(_token, _channelName);
		}

		private void InitLogFilePath()
		{
			string text = Application.persistentDataPath + "/rtc.log";
			int num = RtcEngine.SetLogFile(text);
			Log.UpdateLog($"logPath:{text},nRet:{num}");
		}

		private void SetUpUI()
		{
			SliderLighteningLevel.onValueChanged.AddListener(delegate(float value)
			{
				TextLighteningLevel.text = "lighteningLevel:" + value;
			});
			SliderSmoothnessLevel.onValueChanged.AddListener(delegate(float value)
			{
				TextSmoothnessLevel.text = "smoothnessLevel:" + value;
			});
			SliderRednessLevel.onValueChanged.AddListener(delegate(float value)
			{
				TextRednessLevel.text = "rednessLevel:" + value;
			});
			SliderSharpnessLevel.onValueChanged.AddListener(delegate(float value)
			{
				TextSharpnessLevel.text = "sharpnessLevel:" + value;
			});
			base.transform.Find("UI/StartButton").GetComponent<Button>().onClick.AddListener(OnStartButtonPress);
			base.transform.Find("UI/StopButton").GetComponent<Button>().onClick.AddListener(OnStopButtonPress);
		}

		private void OnStartButtonPress()
		{
			BeautyOptions beautyOptions = new BeautyOptions();
			beautyOptions.lighteningContrastLevel = LIGHTENING_CONTRAST_LEVEL.LIGHTENING_CONTRAST_HIGH;
			beautyOptions.lighteningLevel = SliderLighteningLevel.value;
			beautyOptions.smoothnessLevel = SliderSmoothnessLevel.value;
			beautyOptions.rednessLevel = SliderRednessLevel.value;
			beautyOptions.sharpnessLevel = SliderSharpnessLevel.value;
			int num = RtcEngine.SetBeautyEffectOptions(enabled: true, beautyOptions);
			Log.UpdateLog("Start SetBeautyEffectOptions:" + num);
		}

		private void OnStopButtonPress()
		{
			BeautyOptions beautyOptions = new BeautyOptions();
			beautyOptions.lighteningContrastLevel = LIGHTENING_CONTRAST_LEVEL.LIGHTENING_CONTRAST_HIGH;
			beautyOptions.lighteningLevel = SliderLighteningLevel.value;
			beautyOptions.smoothnessLevel = SliderSmoothnessLevel.value;
			beautyOptions.rednessLevel = SliderRednessLevel.value;
			beautyOptions.sharpnessLevel = SliderSharpnessLevel.value;
			int num = RtcEngine.SetBeautyEffectOptions(enabled: false, beautyOptions);
			Log.UpdateLog("Stop SetBeautyEffectOptions:" + num);
		}

		private void OnDestroy()
		{
			UnityEngine.Debug.Log("OnDestroy");
			if (RtcEngine != null)
			{
				RtcEngine.InitEventHandler(null);
				RtcEngine.LeaveChannel();
				RtcEngine.Dispose();
			}
		}

		internal string GetChannelName()
		{
			return _channelName;
		}

		internal static void MakeVideoView(uint uid, string channelId = "")
		{
			if ((object)GameObject.Find(uid.ToString()) != null)
			{
				return;
			}
			VideoSurface videoSurface = MakeImageSurface(uid.ToString());
			if ((object)videoSurface != null)
			{
				if (uid == 0)
				{
					videoSurface.SetForUser(uid, channelId);
				}
				else
				{
					videoSurface.SetForUser(uid, channelId, VIDEO_SOURCE_TYPE.VIDEO_SOURCE_REMOTE);
				}
				videoSurface.OnTextureSizeModify += delegate(int width, int height)
				{
					float num = (float)height / (float)width;
					videoSurface.transform.localScale = new Vector3(-5f, 5f * num, 1f);
					UnityEngine.Debug.Log("OnTextureSizeModify: " + width + "  " + height);
				};
				videoSurface.SetEnable(enable: true);
			}
		}

		private static VideoSurface MakePlaneSurface(string goName)
		{
			GameObject gameObject = GameObject.CreatePrimitive(PrimitiveType.Plane);
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.transform.Rotate(-90f, 0f, 0f);
			UnityEngine.Random.Range(3f, 5f);
			UnityEngine.Random.Range(-2f, 2f);
			gameObject.transform.position = Vector3.zero;
			gameObject.transform.localScale = new Vector3(0.25f, 0.5f, 0.5f);
			return gameObject.AddComponent<VideoSurface>();
		}

		private static VideoSurface MakeImageSurface(string goName)
		{
			GameObject gameObject = new GameObject();
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.AddComponent<RawImage>();
			gameObject.AddComponent<UIElementDrag>();
			GameObject gameObject2 = GameObject.Find("VideoCanvas");
			if (gameObject2 != null)
			{
				gameObject.transform.parent = gameObject2.transform;
				UnityEngine.Debug.Log("add video view");
			}
			else
			{
				UnityEngine.Debug.Log("Canvas is null video view");
			}
			gameObject.transform.Rotate(0f, 0f, 180f);
			gameObject.transform.localPosition = Vector3.zero;
			gameObject.transform.localScale = new Vector3(2f, 3f, 1f);
			return gameObject.AddComponent<VideoSurface>();
		}

		internal static void DestroyVideoView(uint uid)
		{
			GameObject gameObject = GameObject.Find(uid.ToString());
			if ((object)gameObject != null)
			{
				UnityEngine.Object.Destroy(gameObject);
			}
		}
	}
	internal class UserEventHandler : IRtcEngineEventHandler
	{
		private readonly SetBeautyEffectOptions _sample;

		internal UserEventHandler(SetBeautyEffectOptions sample)
		{
			_sample = sample;
		}

		public override void OnError(int err, string msg)
		{
			_sample.Log.UpdateLog($"OnError err: {err}, msg: {msg}");
		}

		public override void OnJoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			int build = 0;
			UnityEngine.Debug.Log("Agora: OnJoinChannelSuccess ");
			_sample.Log.UpdateLog($"sdk version: ${_sample.RtcEngine.GetVersion(ref build)}");
			_sample.Log.UpdateLog($"OnJoinChannelSuccess channelName: {connection.channelId}, uid: {connection.localUid}, elapsed: {elapsed}");
			SetBeautyEffectOptions.MakeVideoView(0u);
		}

		public override void OnRejoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			_sample.Log.UpdateLog("OnRejoinChannelSuccess");
		}

		public override void OnLeaveChannel(RtcConnection connection, RtcStats stats)
		{
			_sample.Log.UpdateLog("OnLeaveChannel");
			SetBeautyEffectOptions.DestroyVideoView(0u);
		}

		public override void OnClientRoleChanged(RtcConnection connection, CLIENT_ROLE_TYPE oldRole, CLIENT_ROLE_TYPE newRole)
		{
			_sample.Log.UpdateLog("OnClientRoleChanged");
		}

		public override void OnUserJoined(RtcConnection connection, uint uid, int elapsed)
		{
			_sample.Log.UpdateLog($"OnUserJoined uid: ${uid} elapsed: ${elapsed}");
			SetBeautyEffectOptions.MakeVideoView(uid, _sample.GetChannelName());
		}

		public override void OnUserOffline(RtcConnection connection, uint uid, USER_OFFLINE_REASON_TYPE reason)
		{
			_sample.Log.UpdateLog($"OnUserOffLine uid: ${uid}, reason: ${(int)reason}");
			SetBeautyEffectOptions.DestroyVideoView(uid);
		}
	}
}
namespace Agora_RTC_Plugin.API_Example.Examples.Advanced.ScreenShareWhileVideoCall
{
	public class ScreenShareWhileVideoCall : MonoBehaviour
	{
		[FormerlySerializedAs("appIdInput")]
		[SerializeField]
		private AppIdInput _appIdInput;

		[Header("_____________Basic Configuration_____________")]
		[FormerlySerializedAs("APP_ID")]
		[SerializeField]
		private string _appID = "";

		[FormerlySerializedAs("TOKEN")]
		[SerializeField]
		private string _token = "";

		[FormerlySerializedAs("CHANNEL_NAME")]
		[SerializeField]
		private string _channelName = "";

		public Text LogText;

		internal Agora.Util.Logger Log;

		internal IRtcEngineEx RtcEngine;

		public uint Uid1 = 123u;

		public uint Uid2 = 456u;

		private Dropdown _winIdSelect;

		private Button _startShareBtn;

		private Button _stopShareBtn;

		private void Start()
		{
			LoadAssetData();
			if (CheckAppId())
			{
				InitEngine();
				GameObject.Find("winIdSelect").SetActive(value: false);
				EnableUI();
				JoinChannel();
			}
		}

		private bool CheckAppId()
		{
			Log = new Agora.Util.Logger(LogText);
			return Log.DebugAssert(_appID.Length > 10, "Please fill in your appId in API-Example/profile/appIdInput.asset");
		}

		[ContextMenu("ShowAgoraBasicProfileData")]
		private void LoadAssetData()
		{
			if (!(_appIdInput == null))
			{
				_appID = _appIdInput.appID;
				_token = _appIdInput.token;
				_channelName = _appIdInput.channelName;
			}
		}

		private void JoinChannel()
		{
			RtcEngine.EnableAudio();
			RtcEngine.EnableVideo();
			RtcEngine.SetClientRole(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			ChannelMediaOptions channelMediaOptions = new ChannelMediaOptions();
			channelMediaOptions.autoSubscribeAudio.SetValue(val: true);
			channelMediaOptions.autoSubscribeVideo.SetValue(val: true);
			channelMediaOptions.publishCameraTrack.SetValue(val: true);
			channelMediaOptions.publishScreenTrack.SetValue(val: false);
			channelMediaOptions.enableAudioRecordingOrPlayout.SetValue(val: true);
			channelMediaOptions.clientRoleType.SetValue(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			RtcEngine.JoinChannel(_token, _channelName, Uid1, channelMediaOptions);
		}

		private void ScreenShareJoinChannel()
		{
			ChannelMediaOptions channelMediaOptions = new ChannelMediaOptions();
			channelMediaOptions.autoSubscribeAudio.SetValue(val: false);
			channelMediaOptions.autoSubscribeVideo.SetValue(val: false);
			channelMediaOptions.publishCameraTrack.SetValue(val: false);
			channelMediaOptions.publishScreenTrack.SetValue(val: true);
			channelMediaOptions.enableAudioRecordingOrPlayout.SetValue(val: false);
			channelMediaOptions.publishScreenCaptureAudio.SetValue(val: true);
			channelMediaOptions.publishScreenCaptureVideo.SetValue(val: true);
			channelMediaOptions.clientRoleType.SetValue(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			UnityEngine.Debug.Log("JoinChannelEx returns: " + RtcEngine.JoinChannelEx(_token, new RtcConnection(_channelName, Uid2), channelMediaOptions));
		}

		private void ScreenShareLeaveChannel()
		{
			RtcEngine.LeaveChannelEx(new RtcConnection(_channelName, Uid2));
		}

		private void UpdateChannelMediaOptions()
		{
			ChannelMediaOptions channelMediaOptions = new ChannelMediaOptions();
			channelMediaOptions.autoSubscribeAudio.SetValue(val: false);
			channelMediaOptions.autoSubscribeVideo.SetValue(val: false);
			channelMediaOptions.publishCameraTrack.SetValue(val: false);
			channelMediaOptions.publishScreenTrack.SetValue(val: true);
			channelMediaOptions.publishScreenCaptureAudio.SetValue(val: true);
			channelMediaOptions.publishScreenCaptureVideo.SetValue(val: true);
			channelMediaOptions.clientRoleType.SetValue(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			UnityEngine.Debug.Log("UpdateChannelMediaOptions returns: " + RtcEngine.UpdateChannelMediaOptions(channelMediaOptions));
		}

		private void InitEngine()
		{
			RtcEngine = Agora.Rtc.RtcEngine.CreateAgoraRtcEngineEx();
			new UserEventHandler(this);
			RtcEngineContext context = new RtcEngineContext(_appID, 0uL, CHANNEL_PROFILE_TYPE.CHANNEL_PROFILE_LIVE_BROADCASTING, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_DEFAULT);
			RtcEngine.Initialize(context);
			RtcEngine.InitEventHandler(new UserEventHandler(this));
		}

		private void PrepareScreenCapture()
		{
			_winIdSelect = GameObject.Find("winIdSelect").GetComponent<Dropdown>();
			if (!(_winIdSelect == null) && RtcEngine != null)
			{
				_winIdSelect.ClearOptions();
				SIZE sIZE = new SIZE();
				sIZE.width = 360;
				sIZE.height = 240;
				SIZE sIZE2 = new SIZE();
				sIZE2.width = 360;
				sIZE2.height = 240;
				ScreenCaptureSourceInfo[] screenCaptureSources = RtcEngine.GetScreenCaptureSources(sIZE, sIZE2, includeScreen: true);
				_winIdSelect.AddOptions(screenCaptureSources.Select((ScreenCaptureSourceInfo w) => new Dropdown.OptionData($"{w.type}: {w.sourceName}-{w.sourceTitle} | {w.sourceId}")).ToList());
			}
		}

		private void EnableUI()
		{
			_startShareBtn = GameObject.Find("startShareBtn").GetComponent<Button>();
			_stopShareBtn = GameObject.Find("stopShareBtn").GetComponent<Button>();
			if (_startShareBtn != null)
			{
				_startShareBtn.onClick.AddListener(OnStartShareBtnClick);
			}
			if (_stopShareBtn != null)
			{
				_stopShareBtn.onClick.AddListener(OnStopShareBtnClick);
				_stopShareBtn.gameObject.SetActive(value: false);
			}
		}

		private void OnStartShareBtnClick()
		{
			if (RtcEngine != null)
			{
				if (_startShareBtn != null)
				{
					_startShareBtn.gameObject.SetActive(value: false);
				}
				if (_stopShareBtn != null)
				{
					_stopShareBtn.gameObject.SetActive(value: true);
				}
				ScreenCaptureParameters2 screenCaptureParameters = new ScreenCaptureParameters2();
				screenCaptureParameters.captureAudio = true;
				screenCaptureParameters.captureVideo = true;
				int num = RtcEngine.StartScreenCapture(screenCaptureParameters);
				Log.UpdateLog("StartScreenCapture :" + num);
				ScreenShareJoinChannel();
			}
		}

		private void OnStopShareBtnClick()
		{
			ScreenShareLeaveChannel();
			if (_startShareBtn != null)
			{
				_startShareBtn.gameObject.SetActive(value: true);
			}
			if (_stopShareBtn != null)
			{
				_stopShareBtn.gameObject.SetActive(value: false);
			}
			RtcEngine.StopScreenCapture();
		}

		private void OnDestroy()
		{
			UnityEngine.Debug.Log("OnDestroy");
			if (RtcEngine != null)
			{
				RtcEngine.InitEventHandler(null);
				RtcEngine.LeaveChannel();
				RtcEngine.Dispose();
			}
		}

		internal string GetChannelName()
		{
			return _channelName;
		}

		internal static void MakeVideoView(uint uid, string channelId = "", VIDEO_SOURCE_TYPE videoSourceType = VIDEO_SOURCE_TYPE.VIDEO_SOURCE_CAMERA_PRIMARY)
		{
			if ((object)GameObject.Find(uid.ToString()) != null)
			{
				return;
			}
			VideoSurface videoSurface = new VideoSurface();
			switch (videoSourceType)
			{
			case VIDEO_SOURCE_TYPE.VIDEO_SOURCE_CAMERA_PRIMARY:
				videoSurface = MakeImageSurface("MainCameraView");
				break;
			case VIDEO_SOURCE_TYPE.VIDEO_SOURCE_SCREEN_PRIMARY:
				videoSurface = MakeImageSurface("ScreenShareView");
				break;
			default:
				videoSurface = MakeImageSurface(uid.ToString());
				break;
			}
			if ((object)videoSurface != null)
			{
				videoSurface.SetForUser(uid, channelId, videoSourceType);
				videoSurface.SetEnable(enable: true);
				videoSurface.OnTextureSizeModify += delegate(int width, int height)
				{
					float num = (float)height / (float)width;
					videoSurface.transform.localScale = new Vector3(-5f, 5f * num, 1f);
					UnityEngine.Debug.Log("OnTextureSizeModify: " + width + "  " + height);
				};
			}
		}

		private static VideoSurface MakePlaneSurface(string goName)
		{
			GameObject gameObject = GameObject.CreatePrimitive(PrimitiveType.Plane);
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.transform.Rotate(-90f, 0f, 0f);
			gameObject.transform.position = Vector3.zero;
			gameObject.transform.localScale = new Vector3(0.25f, 0.5f, 0.5f);
			return gameObject.AddComponent<VideoSurface>();
		}

		private static VideoSurface MakeImageSurface(string goName)
		{
			GameObject gameObject = new GameObject();
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.AddComponent<RawImage>();
			gameObject.AddComponent<UIElementDrag>();
			GameObject gameObject2 = GameObject.Find("VideoCanvas");
			if (gameObject2 != null)
			{
				gameObject.transform.parent = gameObject2.transform;
				UnityEngine.Debug.Log("add video view");
			}
			else
			{
				UnityEngine.Debug.Log("Canvas is null video view");
			}
			gameObject.transform.Rotate(0f, 0f, 180f);
			gameObject.transform.localPosition = Vector3.zero;
			gameObject.transform.localScale = new Vector3(3f, 4f, 1f);
			return gameObject.AddComponent<VideoSurface>();
		}

		internal static void DestroyVideoView(string name)
		{
			GameObject gameObject = GameObject.Find(name);
			if ((object)gameObject != null)
			{
				UnityEngine.Object.Destroy(gameObject);
			}
		}
	}
	internal class UserEventHandler : IRtcEngineEventHandler
	{
		private readonly ScreenShareWhileVideoCall _desktopScreenShare;

		internal UserEventHandler(ScreenShareWhileVideoCall desktopScreenShare)
		{
			_desktopScreenShare = desktopScreenShare;
		}

		public override void OnError(int err, string msg)
		{
			_desktopScreenShare.Log.UpdateLog($"OnError err: {err}, msg: {msg}");
		}

		public override void OnJoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			int build = 0;
			_desktopScreenShare.Log.UpdateLog($"sdk version: ${_desktopScreenShare.RtcEngine.GetVersion(ref build)}");
			_desktopScreenShare.Log.UpdateLog($"OnJoinChannelSuccess channelName: {connection.channelId}, uid: {connection.localUid}, elapsed: {elapsed}");
			if (connection.localUid == _desktopScreenShare.Uid1)
			{
				ScreenShareWhileVideoCall.MakeVideoView(0u);
			}
			else if (connection.localUid == _desktopScreenShare.Uid2)
			{
				ScreenShareWhileVideoCall.MakeVideoView(0u, "", VIDEO_SOURCE_TYPE.VIDEO_SOURCE_SCREEN_PRIMARY);
			}
		}

		public override void OnRejoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			_desktopScreenShare.Log.UpdateLog("OnRejoinChannelSuccess");
		}

		public override void OnLeaveChannel(RtcConnection connection, RtcStats stats)
		{
			_desktopScreenShare.Log.UpdateLog("OnLeaveChannel");
			if (connection.localUid == _desktopScreenShare.Uid1)
			{
				ScreenShareWhileVideoCall.DestroyVideoView("MainCameraView");
			}
			else if (connection.localUid == _desktopScreenShare.Uid2)
			{
				ScreenShareWhileVideoCall.DestroyVideoView("ScreenShareView");
			}
		}

		public override void OnClientRoleChanged(RtcConnection connection, CLIENT_ROLE_TYPE oldRole, CLIENT_ROLE_TYPE newRole)
		{
			_desktopScreenShare.Log.UpdateLog("OnClientRoleChanged");
		}

		public override void OnUserJoined(RtcConnection connection, uint uid, int elapsed)
		{
			_desktopScreenShare.Log.UpdateLog($"OnUserJoined uid: ${uid} elapsed: ${elapsed}");
			if (uid != _desktopScreenShare.Uid1 && uid != _desktopScreenShare.Uid2)
			{
				ScreenShareWhileVideoCall.MakeVideoView(uid, _desktopScreenShare.GetChannelName(), VIDEO_SOURCE_TYPE.VIDEO_SOURCE_REMOTE);
			}
		}

		public override void OnUserOffline(RtcConnection connection, uint uid, USER_OFFLINE_REASON_TYPE reason)
		{
			_desktopScreenShare.Log.UpdateLog($"OnUserOffLine uid: ${uid}, reason: ${(int)reason}");
			if (uid != _desktopScreenShare.Uid1 && uid != _desktopScreenShare.Uid2)
			{
				ScreenShareWhileVideoCall.DestroyVideoView(uid.ToString());
			}
		}
	}
}
namespace Agora_RTC_Plugin.API_Example.Examples.Advanced.ScreenShare
{
	public class ScreenShare : MonoBehaviour
	{
		[FormerlySerializedAs("appIdInput")]
		[SerializeField]
		private AppIdInput _appIdInput;

		[Header("_____________Basic Configuration_____________")]
		[FormerlySerializedAs("APP_ID")]
		[SerializeField]
		private string _appID = "";

		[FormerlySerializedAs("TOKEN")]
		[SerializeField]
		private string _token = "";

		[FormerlySerializedAs("CHANNEL_NAME")]
		[SerializeField]
		private string _channelName = "";

		public Text LogText;

		internal Agora.Util.Logger Log;

		internal IRtcEngine RtcEngine;

		private Dropdown _winIdSelect;

		private Button _startShareBtn;

		private Button _stopShareBtn;

		private Button _updateShareBtn;

		private void Start()
		{
			LoadAssetData();
			if (CheckAppId())
			{
				InitEngine();
				GameObject.Find("winIdSelect").SetActive(value: false);
				EnableUI();
				JoinChannel();
			}
		}

		private bool CheckAppId()
		{
			Log = new Agora.Util.Logger(LogText);
			return Log.DebugAssert(_appID.Length > 10, "Please fill in your appId in API-Example/profile/appIdInput.asset");
		}

		[ContextMenu("ShowAgoraBasicProfileData")]
		private void LoadAssetData()
		{
			if (!(_appIdInput == null))
			{
				_appID = _appIdInput.appID;
				_token = _appIdInput.token;
				_channelName = _appIdInput.channelName;
			}
		}

		private void JoinChannel()
		{
			RtcEngine.EnableAudio();
			RtcEngine.EnableVideo();
			RtcEngine.SetClientRole(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			UnityEngine.Debug.Log("JoinChannel returns: " + RtcEngine.JoinChannel(_token, _channelName));
		}

		private void UpdateChannelMediaOptions()
		{
			ChannelMediaOptions channelMediaOptions = new ChannelMediaOptions();
			channelMediaOptions.autoSubscribeAudio.SetValue(val: true);
			channelMediaOptions.autoSubscribeVideo.SetValue(val: true);
			channelMediaOptions.publishCameraTrack.SetValue(val: false);
			channelMediaOptions.publishScreenTrack.SetValue(val: true);
			channelMediaOptions.publishScreenCaptureAudio.SetValue(val: true);
			channelMediaOptions.publishScreenCaptureVideo.SetValue(val: true);
			channelMediaOptions.clientRoleType.SetValue(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			UnityEngine.Debug.Log("UpdateChannelMediaOptions returns: " + RtcEngine.UpdateChannelMediaOptions(channelMediaOptions));
		}

		private void InitEngine()
		{
			RtcEngine = Agora.Rtc.RtcEngine.CreateAgoraRtcEngine();
			new UserEventHandler(this);
			RtcEngineContext context = new RtcEngineContext(_appID, 0uL, CHANNEL_PROFILE_TYPE.CHANNEL_PROFILE_LIVE_BROADCASTING, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_DEFAULT);
			RtcEngine.Initialize(context);
			RtcEngine.InitEventHandler(new UserEventHandler(this));
		}

		private void PrepareScreenCapture()
		{
			_winIdSelect = GameObject.Find("winIdSelect").GetComponent<Dropdown>();
			if (!(_winIdSelect == null) && RtcEngine != null)
			{
				_winIdSelect.ClearOptions();
				SIZE sIZE = new SIZE();
				sIZE.width = 360;
				sIZE.height = 240;
				SIZE sIZE2 = new SIZE();
				sIZE2.width = 360;
				sIZE2.height = 240;
				ScreenCaptureSourceInfo[] screenCaptureSources = RtcEngine.GetScreenCaptureSources(sIZE, sIZE2, includeScreen: true);
				_winIdSelect.AddOptions(screenCaptureSources.Select((ScreenCaptureSourceInfo w) => new Dropdown.OptionData($"{w.type}: {w.sourceName}-{w.sourceTitle} | {w.sourceId}")).ToList());
			}
		}

		private void EnableUI()
		{
			_startShareBtn = GameObject.Find("startShareBtn").GetComponent<Button>();
			_stopShareBtn = GameObject.Find("stopShareBtn").GetComponent<Button>();
			if (_startShareBtn != null)
			{
				_startShareBtn.onClick.AddListener(OnStartShareBtnClick);
			}
			if (_stopShareBtn != null)
			{
				_stopShareBtn.onClick.AddListener(OnStopShareBtnClick);
				_stopShareBtn.gameObject.SetActive(value: false);
			}
			GameObject gameObject = GameObject.Find("updateShareBtn");
			if (gameObject != null)
			{
				_updateShareBtn = gameObject.GetComponent<Button>();
				_updateShareBtn.onClick.AddListener(OnUpdateShareBtnClick);
			}
		}

		private void OnStartShareBtnClick()
		{
			if (RtcEngine != null)
			{
				if (_startShareBtn != null)
				{
					_startShareBtn.gameObject.SetActive(value: false);
				}
				if (_stopShareBtn != null)
				{
					_stopShareBtn.gameObject.SetActive(value: true);
				}
				ScreenCaptureParameters2 screenCaptureParameters = new ScreenCaptureParameters2();
				screenCaptureParameters.captureAudio = true;
				screenCaptureParameters.captureVideo = true;
				int num = RtcEngine.StartScreenCapture(screenCaptureParameters);
				Log.UpdateLog("StartScreenCapture :" + num);
				UpdateChannelMediaOptions();
			}
		}

		private void OnStopShareBtnClick()
		{
			if (_startShareBtn != null)
			{
				_startShareBtn.gameObject.SetActive(value: true);
			}
			if (_stopShareBtn != null)
			{
				_stopShareBtn.gameObject.SetActive(value: false);
			}
			RtcEngine.StopScreenCapture();
		}

		private void OnUpdateShareBtnClick()
		{
			ScreenCaptureParameters2 screenCaptureParameters = new ScreenCaptureParameters2();
			screenCaptureParameters.captureAudio = true;
			screenCaptureParameters.captureVideo = true;
			screenCaptureParameters.videoParams.dimensions.width = 960;
			screenCaptureParameters.videoParams.dimensions.height = 640;
			int num = RtcEngine.UpdateScreenCapture(screenCaptureParameters);
			Log.UpdateLog("UpdateScreenCapture: " + num);
		}

		private void OnDestroy()
		{
			UnityEngine.Debug.Log("OnDestroy");
			if (RtcEngine != null)
			{
				RtcEngine.InitEventHandler(null);
				RtcEngine.LeaveChannel();
				RtcEngine.Dispose();
			}
		}

		internal string GetChannelName()
		{
			return _channelName;
		}

		internal static void MakeVideoView(uint uid, string channelId = "", VIDEO_SOURCE_TYPE videoSourceType = VIDEO_SOURCE_TYPE.VIDEO_SOURCE_CAMERA_PRIMARY)
		{
			if ((object)GameObject.Find(uid.ToString()) != null)
			{
				return;
			}
			VideoSurface videoSurface = MakeImageSurface(uid.ToString());
			if ((object)videoSurface != null)
			{
				videoSurface.SetForUser(uid, channelId, videoSourceType);
				videoSurface.SetEnable(enable: true);
				videoSurface.OnTextureSizeModify += delegate(int width, int height)
				{
					float num = (float)height / (float)width;
					videoSurface.transform.localScale = new Vector3(-5f, 5f * num, 1f);
					UnityEngine.Debug.Log("OnTextureSizeModify: " + width + "  " + height);
				};
			}
		}

		private static VideoSurface MakePlaneSurface(string goName)
		{
			GameObject gameObject = GameObject.CreatePrimitive(PrimitiveType.Plane);
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.transform.Rotate(-90f, 0f, 0f);
			gameObject.transform.position = Vector3.zero;
			gameObject.transform.localScale = new Vector3(0.25f, 0.5f, 0.5f);
			return gameObject.AddComponent<VideoSurface>();
		}

		private static VideoSurface MakeImageSurface(string goName)
		{
			GameObject gameObject = new GameObject();
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.AddComponent<RawImage>();
			gameObject.AddComponent<UIElementDrag>();
			GameObject gameObject2 = GameObject.Find("VideoCanvas");
			if (gameObject2 != null)
			{
				gameObject.transform.parent = gameObject2.transform;
				UnityEngine.Debug.Log("add video view");
			}
			else
			{
				UnityEngine.Debug.Log("Canvas is null video view");
			}
			gameObject.transform.Rotate(0f, 0f, 180f);
			gameObject.transform.localPosition = Vector3.zero;
			gameObject.transform.localScale = new Vector3(3f, 4f, 1f);
			return gameObject.AddComponent<VideoSurface>();
		}

		internal static void DestroyVideoView(uint uid)
		{
			GameObject gameObject = GameObject.Find(uid.ToString());
			if ((object)gameObject != null)
			{
				UnityEngine.Object.Destroy(gameObject);
			}
		}
	}
	internal class UserEventHandler : IRtcEngineEventHandler
	{
		private readonly ScreenShare _desktopScreenShare;

		internal UserEventHandler(ScreenShare desktopScreenShare)
		{
			_desktopScreenShare = desktopScreenShare;
		}

		public override void OnError(int err, string msg)
		{
			_desktopScreenShare.Log.UpdateLog($"OnError err: {err}, msg: {msg}");
		}

		public override void OnJoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			int build = 0;
			_desktopScreenShare.Log.UpdateLog($"sdk version: ${_desktopScreenShare.RtcEngine.GetVersion(ref build)}");
			_desktopScreenShare.Log.UpdateLog($"OnJoinChannelSuccess channelName: {connection.channelId}, uid: {connection.localUid}, elapsed: {elapsed}");
			ScreenShare.MakeVideoView(0u, "", VIDEO_SOURCE_TYPE.VIDEO_SOURCE_SCREEN_PRIMARY);
		}

		public override void OnRejoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			_desktopScreenShare.Log.UpdateLog("OnRejoinChannelSuccess");
		}

		public override void OnLeaveChannel(RtcConnection connection, RtcStats stats)
		{
			_desktopScreenShare.Log.UpdateLog("OnLeaveChannel");
			ScreenShare.DestroyVideoView(connection.localUid);
			ScreenShare.DestroyVideoView(0u);
		}

		public override void OnClientRoleChanged(RtcConnection connection, CLIENT_ROLE_TYPE oldRole, CLIENT_ROLE_TYPE newRole)
		{
			_desktopScreenShare.Log.UpdateLog("OnClientRoleChanged");
		}

		public override void OnUserJoined(RtcConnection connection, uint uid, int elapsed)
		{
			_desktopScreenShare.Log.UpdateLog($"OnUserJoined uid: ${uid} elapsed: ${elapsed}");
			ScreenShare.MakeVideoView(uid, _desktopScreenShare.GetChannelName(), VIDEO_SOURCE_TYPE.VIDEO_SOURCE_REMOTE);
		}

		public override void OnUserOffline(RtcConnection connection, uint uid, USER_OFFLINE_REASON_TYPE reason)
		{
			_desktopScreenShare.Log.UpdateLog($"OnUserOffLine uid: ${uid}, reason: ${(int)reason}");
			ScreenShare.DestroyVideoView(uid);
		}
	}
}
namespace Agora_RTC_Plugin.API_Example.Examples.Advanced.PushEncodedVideoImage
{
	public class PushEncodedVideoImage : MonoBehaviour
	{
		[FormerlySerializedAs("appIdInput")]
		[SerializeField]
		private AppIdInput _appIdInput;

		[Header("_____________Basic Configuration_____________")]
		[FormerlySerializedAs("APP_ID")]
		[SerializeField]
		public string _appID = "";

		[FormerlySerializedAs("TOKEN")]
		[SerializeField]
		public string _token = "";

		[FormerlySerializedAs("CHANNEL_NAME")]
		[SerializeField]
		public string _channelName = "";

		public GameObject RolePrefab;

		private GameObject _roleLocal;

		public Text LogText;

		internal Agora.Util.Logger Log;

		internal IRtcEngineEx RtcEngine;

		public Dictionary<string, Vector3> RolePositionDic = new Dictionary<string, Vector3>();

		internal uint Uid1;

		internal uint Uid2;

		private System.Random _random = new System.Random();

		private void Start()
		{
			LoadAssetData();
			if (CheckAppId())
			{
				Uid1 = (uint)(_random.Next() % 1000);
				Uid2 = (uint)(_random.Next() % 1000 + 1000);
				InitEngine();
				JoinChannel1();
				JoinChannel2();
			}
		}

		[ContextMenu("ShowAgoraBasicProfileData")]
		private void LoadAssetData()
		{
			if (!(_appIdInput == null))
			{
				_appID = _appIdInput.appID;
				_token = _appIdInput.token;
				_channelName = _appIdInput.channelName;
			}
		}

		private bool CheckAppId()
		{
			Log = new Agora.Util.Logger(LogText);
			return Log.DebugAssert(_appID.Length > 10, "Please fill in your appId in API-Example/profile/appIdInput.asset");
		}

		private void InitEngine()
		{
			RtcEngine = Agora.Rtc.RtcEngine.CreateAgoraRtcEngineEx();
			UserEventHandler engineEventHandler = new UserEventHandler(this);
			RtcEngineContext context = new RtcEngineContext(_appID, 0uL, CHANNEL_PROFILE_TYPE.CHANNEL_PROFILE_LIVE_BROADCASTING, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_GAME_STREAMING);
			RtcEngine.Initialize(context);
			RtcEngine.InitEventHandler(engineEventHandler);
			RtcEngine.RegisterVideoEncodedFrameObserver(new VideoEncodedImageReceiver(this));
		}

		private void JoinChannel1()
		{
			RtcEngine.SetClientRole(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			RtcEngine.EnableVideo();
			ChannelMediaOptions channelMediaOptions = new ChannelMediaOptions();
			channelMediaOptions.autoSubscribeVideo.SetValue(val: true);
			channelMediaOptions.autoSubscribeAudio.SetValue(val: true);
			channelMediaOptions.publishCameraTrack.SetValue(val: true);
			channelMediaOptions.publishMicrophoneTrack.SetValue(val: true);
			channelMediaOptions.clientRoleType.SetValue(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			channelMediaOptions.channelProfile.SetValue(CHANNEL_PROFILE_TYPE.CHANNEL_PROFILE_LIVE_BROADCASTING);
			RtcConnection rtcConnection = new RtcConnection();
			rtcConnection.channelId = _channelName;
			rtcConnection.localUid = Uid1;
			int num = RtcEngine.JoinChannelEx(_token, rtcConnection, channelMediaOptions);
			Log.UpdateLog("joinChanne1: nRet" + num + " uid1:" + Uid1);
		}

		private void JoinChannel2()
		{
			RtcEngine.SetClientRole(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			RtcEngine.EnableVideo();
			SenderOptions senderOptions = new SenderOptions();
			senderOptions.codecType = VIDEO_CODEC_TYPE.VIDEO_CODEC_GENERIC;
			RtcEngine.SetExternalVideoSource(enabled: true, useTexture: true, EXTERNAL_VIDEO_SOURCE_TYPE.ENCODED_VIDEO_FRAME, senderOptions);
			ChannelMediaOptions channelMediaOptions = new ChannelMediaOptions();
			channelMediaOptions.autoSubscribeVideo.SetValue(val: true);
			channelMediaOptions.autoSubscribeAudio.SetValue(val: true);
			channelMediaOptions.publishCustomAudioTrack.SetValue(val: false);
			channelMediaOptions.publishCameraTrack.SetValue(val: false);
			channelMediaOptions.publishCustomVideoTrack.SetValue(val: false);
			channelMediaOptions.publishEncodedVideoTrack.SetValue(val: true);
			channelMediaOptions.clientRoleType.SetValue(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			channelMediaOptions.channelProfile.SetValue(CHANNEL_PROFILE_TYPE.CHANNEL_PROFILE_LIVE_BROADCASTING);
			RtcConnection rtcConnection = new RtcConnection();
			rtcConnection.channelId = _channelName;
			rtcConnection.localUid = Uid2;
			int num = RtcEngine.JoinChannelEx(_token, rtcConnection, channelMediaOptions);
			Log.UpdateLog("joinChanne1: nRet" + num + " uid2:" + Uid2);
		}

		private void Update()
		{
			PermissionHelper.RequestMicrophontPermission();
			PermissionHelper.RequestCameraPermission();
			lock (RolePositionDic)
			{
				foreach (KeyValuePair<string, Vector3> item in RolePositionDic)
				{
					UpdateRolePositon(item.Key, item.Value);
				}
			}
		}

		private void OnDestroy()
		{
			UnityEngine.Debug.Log("OnDestroy");
			if (RtcEngine != null)
			{
				RtcEngine.InitEventHandler(null);
				RtcEngine.UnRegisterVideoEncodedFrameObserver();
				RtcConnection rtcConnection = new RtcConnection();
				rtcConnection.channelId = _channelName;
				rtcConnection.localUid = Uid1;
				RtcEngine.LeaveChannelEx(rtcConnection);
				rtcConnection.localUid = Uid2;
				RtcEngine.LeaveChannelEx(rtcConnection);
				RtcEngine.Dispose();
			}
		}

		public void CreateRole(string uid, bool isLocal)
		{
			if (!(GameObject.Find("Role" + uid) != null))
			{
				GameObject gameObject = UnityEngine.Object.Instantiate(RolePrefab, base.transform);
				gameObject.name = "Role" + uid;
				Text component = gameObject.transform.Find("Text").GetComponent<Text>();
				component.text = uid;
				if (isLocal)
				{
					component.text += "\n(Local)";
					gameObject.AddComponent<UIElementDrag>();
					_roleLocal = gameObject;
				}
				else if (_roleLocal != null)
				{
					int childCount = base.transform.childCount;
					_roleLocal.transform.SetSiblingIndex(childCount - 1);
				}
				gameObject.GetComponent<RectTransform>().anchoredPosition = Vector3.zero;
			}
		}

		public void DestroyRole(string uid, bool isLocal)
		{
			string n = "Role" + uid;
			GameObject gameObject = base.gameObject.transform.Find(n).gameObject;
			if ((bool)gameObject)
			{
				UnityEngine.Object.Destroy(gameObject);
			}
			if (isLocal)
			{
				_roleLocal = null;
			}
		}

		private void UpdateRolePositon(string uid, Vector3 pos)
		{
			string n = "Role" + uid;
			Transform transform = base.gameObject.transform.Find(n);
			if ((bool)transform)
			{
				transform.transform.localPosition = pos;
			}
		}

		public void StartPushEncodeVideoImage()
		{
			InvokeRepeating("UpdateForPushEncodeVideoImage", 0f, 0.1f);
			Log.UpdateLog("Start PushEncodeVideoImage in every frame");
		}

		public void StopPushEncodeVideoImage()
		{
			CancelInvoke("UpdateForPushEncodeVideoImage");
			Log.UpdateLog("Stop PushEncodeVideoImage");
		}

		internal string GetChannelName()
		{
			return _channelName;
		}

		private void UpdateForPushEncodeVideoImage()
		{
			if ((bool)_roleLocal)
			{
				string s = JsonUtility.ToJson(_roleLocal.transform.localPosition);
				byte[] bytes = Encoding.Default.GetBytes(s);
				EncodedVideoFrameInfo videoEncodedFrameInfo = new EncodedVideoFrameInfo
				{
					framesPerSecond = 60,
					codecType = VIDEO_CODEC_TYPE.VIDEO_CODEC_GENERIC,
					frameType = VIDEO_FRAME_TYPE_NATIVE.VIDEO_FRAME_TYPE_KEY_FRAME
				};
				UnityEngine.Debug.Log("PushEncodedVideoImage: " + RtcEngine.PushEncodedVideoImage(bytes, Convert.ToUInt32(bytes.Length), videoEncodedFrameInfo));
			}
		}

		internal static void MakeVideoView(uint uid, string channelId = "")
		{
			if ((object)GameObject.Find(uid.ToString()) != null)
			{
				return;
			}
			VideoSurface videoSurface = MakeImageSurface(uid.ToString());
			if ((object)videoSurface != null)
			{
				if (uid == 0)
				{
					videoSurface.SetForUser(uid, channelId);
				}
				else
				{
					videoSurface.SetForUser(uid, channelId, VIDEO_SOURCE_TYPE.VIDEO_SOURCE_REMOTE);
				}
				videoSurface.OnTextureSizeModify += delegate(int width, int height)
				{
					float num = (float)height / (float)width;
					videoSurface.transform.localScale = new Vector3(-5f, 5f * num, 1f);
					UnityEngine.Debug.Log("OnTextureSizeModify: " + width + "  " + height);
				};
				videoSurface.SetEnable(enable: true);
			}
		}

		private static VideoSurface MakePlaneSurface(string goName)
		{
			GameObject gameObject = GameObject.CreatePrimitive(PrimitiveType.Plane);
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.transform.Rotate(-90f, 0f, 0f);
			UnityEngine.Random.Range(3f, 5f);
			UnityEngine.Random.Range(-2f, 2f);
			gameObject.transform.position = Vector3.zero;
			gameObject.transform.localScale = new Vector3(0.25f, 0.5f, 0.5f);
			return gameObject.AddComponent<VideoSurface>();
		}

		private static VideoSurface MakeImageSurface(string goName)
		{
			GameObject gameObject = new GameObject();
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.AddComponent<RawImage>();
			gameObject.AddComponent<UIElementDrag>();
			GameObject gameObject2 = GameObject.Find("VideoCanvas");
			if (gameObject2 != null)
			{
				gameObject.transform.parent = gameObject2.transform;
				UnityEngine.Debug.Log("add video view");
			}
			else
			{
				UnityEngine.Debug.Log("Canvas is null video view");
			}
			gameObject.transform.Rotate(0f, 0f, 180f);
			gameObject.transform.localPosition = Vector3.zero;
			gameObject.transform.localScale = new Vector3(2f, 3f, 1f);
			return gameObject.AddComponent<VideoSurface>();
		}

		internal static void DestroyVideoView(uint uid)
		{
			GameObject gameObject = GameObject.Find(uid.ToString());
			if ((object)gameObject != null)
			{
				UnityEngine.Object.Destroy(gameObject);
			}
		}
	}
	internal class UserEventHandler : IRtcEngineEventHandler
	{
		private readonly PushEncodedVideoImage _pushEncodedVideoImage;

		internal UserEventHandler(PushEncodedVideoImage videoSample)
		{
			_pushEncodedVideoImage = videoSample;
		}

		public override void OnError(int err, string msg)
		{
			_pushEncodedVideoImage.Log.UpdateLog($"OnError err: {err}, msg: {msg}");
		}

		public override void OnJoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			int build = 0;
			UnityEngine.Debug.Log("Agora: OnJoinChannelSuccess ");
			_pushEncodedVideoImage.Log.UpdateLog($"sdk version: ${_pushEncodedVideoImage.RtcEngine.GetVersion(ref build)}");
			_pushEncodedVideoImage.Log.UpdateLog($"OnJoinChannelSuccess channelName: {connection.channelId}, uid: {connection.localUid}, elapsed: {elapsed}");
			if (connection.localUid >= 1000)
			{
				_pushEncodedVideoImage.CreateRole(connection.localUid.ToString(), isLocal: true);
				_pushEncodedVideoImage.Log.UpdateLog("you can drag your role to every where");
				_pushEncodedVideoImage.StartPushEncodeVideoImage();
			}
			else
			{
				PushEncodedVideoImage.MakeVideoView(0u);
			}
		}

		public override void OnRejoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			_pushEncodedVideoImage.Log.UpdateLog("OnRejoinChannelSuccess");
		}

		public override void OnLeaveChannel(RtcConnection connection, RtcStats stats)
		{
			_pushEncodedVideoImage.Log.UpdateLog("OnLeaveChannel");
			if (connection.localUid >= 1000)
			{
				_pushEncodedVideoImage.DestroyRole(connection.localUid.ToString(), isLocal: true);
				_pushEncodedVideoImage.StopPushEncodeVideoImage();
			}
			else
			{
				PushEncodedVideoImage.DestroyVideoView(0u);
			}
		}

		public override void OnClientRoleChanged(RtcConnection connection, CLIENT_ROLE_TYPE oldRole, CLIENT_ROLE_TYPE newRole)
		{
			_pushEncodedVideoImage.Log.UpdateLog("OnClientRoleChanged");
		}

		public override void OnUserJoined(RtcConnection connection, uint uid, int elapsed)
		{
			_pushEncodedVideoImage.Log.UpdateLog($"OnUserJoined uid: ${uid} elapsed: ${elapsed}");
			if (uid != _pushEncodedVideoImage.Uid1 && uid != _pushEncodedVideoImage.Uid2)
			{
				if (uid >= 1000)
				{
					_pushEncodedVideoImage.CreateRole(uid.ToString(), isLocal: false);
					VideoSubscriptionOptions videoSubscriptionOptions = new VideoSubscriptionOptions();
					videoSubscriptionOptions.encodedFrameOnly.SetValue(val: true);
					int num = _pushEncodedVideoImage.RtcEngine.SetRemoteVideoSubscriptionOptionsEx(uid, videoSubscriptionOptions, connection);
					_pushEncodedVideoImage.Log.UpdateLog("SetRemoteVideoSubscriptionOptions nRet:" + num);
				}
				else
				{
					PushEncodedVideoImage.MakeVideoView(uid, _pushEncodedVideoImage.GetChannelName());
				}
			}
		}

		public override void OnUserOffline(RtcConnection connection, uint uid, USER_OFFLINE_REASON_TYPE reason)
		{
			_pushEncodedVideoImage.Log.UpdateLog($"OnUserOffLine uid: ${uid}, reason: ${(int)reason}");
			if (uid != _pushEncodedVideoImage.Uid1 && uid != _pushEncodedVideoImage.Uid2)
			{
				if (uid >= 1000)
				{
					_pushEncodedVideoImage.DestroyRole(uid.ToString(), isLocal: false);
				}
				else
				{
					PushEncodedVideoImage.DestroyVideoView(uid);
				}
			}
		}

		public override void OnChannelMediaRelayEvent(int code)
		{
			_pushEncodedVideoImage.Log.UpdateLog($"OnChannelMediaRelayEvent: {code}");
		}

		public override void OnChannelMediaRelayStateChanged(int state, int code)
		{
			_pushEncodedVideoImage.Log.UpdateLog($"OnChannelMediaRelayStateChanged state: {state}, code: {code}");
		}
	}
	internal class VideoEncodedImageReceiver : IVideoEncodedFrameObserver
	{
		private readonly PushEncodedVideoImage _pushEncodedVideoImage;

		internal VideoEncodedImageReceiver(PushEncodedVideoImage videoSample)
		{
			_pushEncodedVideoImage = videoSample;
		}

		public override bool OnEncodedVideoFrameReceived(uint uid, IntPtr imageBufferPtr, ulong length, EncodedVideoFrameInfo videoEncodedFrameInfo)
		{
			byte[] array = new byte[length];
			Marshal.Copy(imageBufferPtr, array, 0, (int)length);
			string @string = Encoding.Default.GetString(array);
			Vector3 value = JsonUtility.FromJson<Vector3>(@string);
			string key = uid.ToString();
			UnityEngine.Debug.Log("OnEncodedVideoImageReceived" + uid + " pos" + @string);
			lock (_pushEncodedVideoImage.RolePositionDic)
			{
				if (_pushEncodedVideoImage.RolePositionDic.ContainsKey(key))
				{
					_pushEncodedVideoImage.RolePositionDic[key] = value;
				}
				else
				{
					_pushEncodedVideoImage.RolePositionDic.Add(key, value);
				}
			}
			return true;
		}
	}
}
namespace Agora_RTC_Plugin.API_Example.Examples.Advanced.ProcessVideoRawData
{
	public class ProcessVideoRawData : MonoBehaviour
	{
		[FormerlySerializedAs("appIdInput")]
		[SerializeField]
		private AppIdInput _appIdInput;

		[Header("_____________Basic Configuration_____________")]
		[FormerlySerializedAs("APP_ID")]
		[SerializeField]
		private string _appID = "";

		[FormerlySerializedAs("TOKEN")]
		[SerializeField]
		private string _token = "";

		[FormerlySerializedAs("CHANNEL_NAME")]
		[SerializeField]
		private string _channelName = "";

		public Text LogText;

		internal Agora.Util.Logger Log;

		internal IRtcEngine RtcEngine;

		internal int Count;

		internal int WriteCount;

		internal int ReadCount;

		internal byte[] VideoBuffer = new byte[0];

		private int _videoFrameWidth = 1080;

		private int _videoFrameHeight = 720;

		private bool _needResize;

		public GameObject VideoView;

		private Texture2D _texture;

		private bool _isTextureAttach;

		public int VideoFrameWidth
		{
			get
			{
				return _videoFrameWidth;
			}
			set
			{
				if (value != _videoFrameWidth)
				{
					_videoFrameWidth = value;
					_needResize = true;
				}
			}
		}

		public int VideoFrameHeight
		{
			get
			{
				return _videoFrameHeight;
			}
			set
			{
				if (value != _videoFrameHeight)
				{
					_videoFrameHeight = value;
					_needResize = true;
				}
			}
		}

		private void Start()
		{
			LoadAssetData();
			if (CheckAppId())
			{
				SetUpUI();
				InitEngine();
				JoinChannel();
			}
		}

		private void Update()
		{
			PermissionHelper.RequestMicrophontPermission();
			PermissionHelper.RequestCameraPermission();
			if (!_isTextureAttach)
			{
				VideoView.GetComponent<RawImage>().texture = _texture;
				_isTextureAttach = true;
				return;
			}
			if (VideoBuffer != null && VideoBuffer.Length != 0 && !_needResize)
			{
				lock (VideoBuffer)
				{
					_texture.LoadRawTextureData(VideoBuffer);
					_texture.Apply();
					return;
				}
			}
			if (_needResize)
			{
				_texture.Resize(_videoFrameWidth, _videoFrameHeight);
				_texture.Apply();
				_needResize = false;
			}
		}

		private bool CheckAppId()
		{
			Log = new Agora.Util.Logger(LogText);
			return Log.DebugAssert(_appID.Length > 10, "Please fill in your appId in API-Example/profile/appIdInput.asset");
		}

		[ContextMenu("ShowAgoraBasicProfileData")]
		public void LoadAssetData()
		{
			if (!(_appIdInput == null))
			{
				_appID = _appIdInput.appID;
				_token = _appIdInput.token;
				_channelName = _appIdInput.channelName;
			}
		}

		private void SetUpUI()
		{
			_ = _videoFrameHeight;
			_ = _videoFrameWidth;
			_texture = new Texture2D(_videoFrameWidth, _videoFrameHeight, TextureFormat.RGBA32, mipChain: false);
			_texture.Apply();
		}

		private void InitEngine()
		{
			RtcEngine = Agora.Rtc.RtcEngine.CreateAgoraRtcEngine();
			UserEventHandler engineEventHandler = new UserEventHandler(this);
			RtcEngineContext context = new RtcEngineContext(_appID, 0uL, CHANNEL_PROFILE_TYPE.CHANNEL_PROFILE_LIVE_BROADCASTING, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_DEFAULT);
			RtcEngine.Initialize(context);
			RtcEngine.InitEventHandler(engineEventHandler);
			RtcEngine.RegisterVideoFrameObserver(new VideoFrameObserver(this), OBSERVER_MODE.RAW_DATA);
		}

		private void JoinChannel()
		{
			VideoEncoderConfiguration videoEncoderConfiguration = new VideoEncoderConfiguration();
			videoEncoderConfiguration.dimensions = new VideoDimensions(_videoFrameWidth, _videoFrameHeight);
			RtcEngine.SetVideoEncoderConfiguration(videoEncoderConfiguration);
			RtcEngine.SetClientRole(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			RtcEngine.EnableAudio();
			RtcEngine.EnableVideo();
			RtcEngine.JoinChannel(_token, _channelName);
		}

		private void OnDestroy()
		{
			UnityEngine.Debug.Log("OnDestroy");
			if (RtcEngine != null)
			{
				if (_texture != null)
				{
					UnityEngine.Object.Destroy(_texture);
					_texture = null;
				}
				RtcEngine.UnRegisterVideoFrameObserver();
				RtcEngine.InitEventHandler(null);
				RtcEngine.LeaveChannel();
				RtcEngine.Dispose();
			}
		}

		private static float[] ConvertByteToFloat16(byte[] byteArray)
		{
			float[] array = new float[byteArray.Length / 2];
			for (int i = 0; i < array.Length; i++)
			{
				array[i] = (float)BitConverter.ToInt16(byteArray, i * 2) / 32768f;
			}
			return array;
		}
	}
	internal class UserEventHandler : IRtcEngineEventHandler
	{
		private readonly ProcessVideoRawData _agoraVideoRawData;

		internal UserEventHandler(ProcessVideoRawData agoraVideoRawData)
		{
			_agoraVideoRawData = agoraVideoRawData;
		}

		public override void OnError(int err, string msg)
		{
			_agoraVideoRawData.Log.UpdateLog($"OnError err: {err}, msg: {msg}");
		}

		public override void OnJoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			int build = 0;
			_agoraVideoRawData.Log.UpdateLog($"sdk version: ${_agoraVideoRawData.RtcEngine.GetVersion(ref build)}");
			_agoraVideoRawData.Log.UpdateLog($"OnJoinChannelSuccess channelName: {connection.channelId}, uid: {connection.localUid}, elapsed: {elapsed}");
		}

		public override void OnRejoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			_agoraVideoRawData.Log.UpdateLog("OnRejoinChannelSuccess");
		}

		public override void OnLeaveChannel(RtcConnection connection, RtcStats stats)
		{
			_agoraVideoRawData.Log.UpdateLog("OnLeaveChannel");
		}

		public override void OnClientRoleChanged(RtcConnection connection, CLIENT_ROLE_TYPE oldRole, CLIENT_ROLE_TYPE newRole)
		{
			_agoraVideoRawData.Log.UpdateLog("OnClientRoleChanged");
		}

		public override void OnUserJoined(RtcConnection connection, uint uid, int elapsed)
		{
			_agoraVideoRawData.Log.UpdateLog($"OnUserJoined uid: ${uid} elapsed: ${elapsed}");
		}

		public override void OnUserOffline(RtcConnection connection, uint uid, USER_OFFLINE_REASON_TYPE reason)
		{
			_agoraVideoRawData.Log.UpdateLog($"OnUserOffLine uid: ${uid}, reason: ${(int)reason}");
		}
	}
	internal class VideoFrameObserver : IVideoFrameObserver
	{
		private readonly ProcessVideoRawData _agoraVideoRawData;

		internal VideoFrameObserver(ProcessVideoRawData agoraVideoRawData)
		{
			_agoraVideoRawData = agoraVideoRawData;
		}

		public override bool OnCaptureVideoFrame(VideoFrame videoFrame, VideoFrameBufferConfig config)
		{
			UnityEngine.Debug.Log("OnCaptureVideoFrame----------- width:" + videoFrame.width + " height:" + videoFrame.height);
			_agoraVideoRawData.VideoFrameWidth = videoFrame.width;
			_agoraVideoRawData.VideoFrameHeight = videoFrame.height;
			lock (_agoraVideoRawData.VideoBuffer)
			{
				_agoraVideoRawData.VideoBuffer = videoFrame.yBuffer;
			}
			return true;
		}

		public override bool OnRenderVideoFrame(string channelId, uint uid, VideoFrame videoFrame)
		{
			UnityEngine.Debug.Log("OnRenderVideoFrameHandler----------- uid:" + uid + " width:" + videoFrame.width + " height:" + videoFrame.height);
			return true;
		}

		public override VIDEO_OBSERVER_FRAME_TYPE GetVideoFormatPreference()
		{
			return VIDEO_OBSERVER_FRAME_TYPE.FRAME_TYPE_RGBA;
		}
	}
}
namespace Agora_RTC_Plugin.API_Example.Examples.Advanced.ProcessAudioRawData
{
	public class ProcessAudioRawData : MonoBehaviour
	{
		[FormerlySerializedAs("appIdInput")]
		[SerializeField]
		private AppIdInput _appIdInput;

		[Header("_____________Basic Configuration_____________")]
		[FormerlySerializedAs("APP_ID")]
		[SerializeField]
		private string _appID = "";

		[FormerlySerializedAs("TOKEN")]
		[SerializeField]
		private string _token = "";

		[FormerlySerializedAs("CHANNEL_NAME")]
		[SerializeField]
		private string _channelName = "";

		public Text LogText;

		internal Agora.Util.Logger Log;

		internal IRtcEngine RtcEngine;

		private const int CHANNEL = 1;

		private const int PULL_FREQ_PER_SEC = 100;

		public const int SAMPLE_RATE = 32000;

		public const int CLIP_SAMPLES = 320;

		internal int _count;

		internal int _writeCount;

		internal int _readCount;

		internal RingBuffer<float> _audioBuffer;

		internal AudioClip _audioClip;

		private bool _startSignal;

		private void Start()
		{
			LoadAssetData();
			if (CheckAppId())
			{
				InitEngine();
				JoinChannel();
				AudioSource component = GetComponent<AudioSource>();
				if (component == null)
				{
					base.gameObject.AddComponent<AudioSource>();
				}
				SetupAudio(component, "externalClip");
			}
		}

		private void Update()
		{
			PermissionHelper.RequestMicrophontPermission();
			PermissionHelper.RequestCameraPermission();
		}

		private bool CheckAppId()
		{
			Log = new Agora.Util.Logger(LogText);
			return Log.DebugAssert(_appID.Length > 10, "Please fill in your appId in API-Example/profile/appIdInput.asset");
		}

		[ContextMenu("ShowAgoraBasicProfileData")]
		public void LoadAssetData()
		{
			if (!(_appIdInput == null))
			{
				_appID = _appIdInput.appID;
				_token = _appIdInput.token;
				_channelName = _appIdInput.channelName;
			}
		}

		private void InitEngine()
		{
			RtcEngine = Agora.Rtc.RtcEngine.CreateAgoraRtcEngine();
			UserEventHandler engineEventHandler = new UserEventHandler(this);
			RtcEngineContext context = new RtcEngineContext(_appID, 0uL, CHANNEL_PROFILE_TYPE.CHANNEL_PROFILE_LIVE_BROADCASTING, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_DEFAULT);
			RtcEngine.Initialize(context);
			RtcEngine.InitEventHandler(engineEventHandler);
			RtcEngine.RegisterAudioFrameObserver(new AudioFrameObserver(this), OBSERVER_MODE.RAW_DATA);
			RtcEngine.SetPlaybackAudioFrameParameters(32000, 1, RAW_AUDIO_FRAME_OP_MODE_TYPE.RAW_AUDIO_FRAME_OP_MODE_READ_ONLY, 1024);
		}

		private void JoinChannel()
		{
			RtcEngine.SetClientRole(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			RtcEngine.EnableAudio();
			RtcEngine.EnableVideo();
			RtcEngine.JoinChannel(_token, _channelName);
		}

		private void OnDestroy()
		{
			UnityEngine.Debug.Log("OnDestroy");
			if (RtcEngine != null)
			{
				RtcEngine.UnRegisterAudioFrameObserver();
				RtcEngine.InitEventHandler(null);
				RtcEngine.LeaveChannel();
				RtcEngine.Dispose();
			}
		}

		private void SetupAudio(AudioSource aud, string clipName)
		{
			int capacity = 32000;
			_audioBuffer = new RingBuffer<float>(capacity, overflow: true);
			_audioClip = AudioClip.Create(clipName, 320, 1, 32000, stream: true, OnAudioRead);
			aud.clip = _audioClip;
			aud.loop = true;
			aud.Play();
		}

		private void OnAudioRead(float[] data)
		{
			for (int i = 0; i < data.Length; i++)
			{
				lock (_audioBuffer)
				{
					if (_audioBuffer.Count > 0)
					{
						data[i] = _audioBuffer.Get();
						_readCount++;
					}
				}
			}
			UnityEngine.Debug.LogFormat("buffer length remains: {0}", _writeCount - _readCount);
		}

		internal static float[] ConvertByteToFloat16(byte[] byteArray)
		{
			float[] array = new float[byteArray.Length / 2];
			for (int i = 0; i < array.Length; i++)
			{
				array[i] = (float)BitConverter.ToInt16(byteArray, i * 2) / 32768f;
			}
			return array;
		}
	}
	internal class UserEventHandler : IRtcEngineEventHandler
	{
		private readonly ProcessAudioRawData _agoraVideoRawData;

		internal UserEventHandler(ProcessAudioRawData agoraVideoRawData)
		{
			_agoraVideoRawData = agoraVideoRawData;
		}

		public override void OnError(int err, string msg)
		{
			_agoraVideoRawData.Log.UpdateLog($"OnError err: {err}, msg: {msg}");
		}

		public override void OnJoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			int build = 0;
			_agoraVideoRawData.Log.UpdateLog($"sdk version: ${_agoraVideoRawData.RtcEngine.GetVersion(ref build)}");
			_agoraVideoRawData.Log.UpdateLog($"OnJoinChannelSuccess channelName: {connection.channelId}, uid: {connection.localUid}, elapsed: {elapsed}");
		}

		public override void OnRejoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			_agoraVideoRawData.Log.UpdateLog("OnRejoinChannelSuccess");
		}

		public override void OnLeaveChannel(RtcConnection connection, RtcStats stats)
		{
			_agoraVideoRawData.Log.UpdateLog("OnLeaveChannel");
		}

		public override void OnClientRoleChanged(RtcConnection connection, CLIENT_ROLE_TYPE oldRole, CLIENT_ROLE_TYPE newRole)
		{
			_agoraVideoRawData.Log.UpdateLog("OnClientRoleChanged");
		}

		public override void OnUserJoined(RtcConnection connection, uint uid, int elapsed)
		{
			_agoraVideoRawData.Log.UpdateLog($"OnUserJoined uid: ${uid} elapsed: ${elapsed}");
		}

		public override void OnUserOffline(RtcConnection connection, uint uid, USER_OFFLINE_REASON_TYPE reason)
		{
			_agoraVideoRawData.Log.UpdateLog($"OnUserOffLine uid: ${uid}, reason: ${(int)reason}");
		}
	}
	internal class AudioFrameObserver : IAudioFrameObserver
	{
		private readonly ProcessAudioRawData _agoraAudioRawData;

		private AudioParams _audioParams;

		internal AudioFrameObserver(ProcessAudioRawData agoraAudioRawData)
		{
			_agoraAudioRawData = agoraAudioRawData;
			_audioParams = new AudioParams();
			_audioParams.sample_rate = 16000;
			_audioParams.channels = 2;
			_audioParams.mode = RAW_AUDIO_FRAME_OP_MODE_TYPE.RAW_AUDIO_FRAME_OP_MODE_READ_ONLY;
			_audioParams.samples_per_call = 1024;
		}

		public override bool OnRecordAudioFrame(string channelId, AudioFrame audioFrame)
		{
			UnityEngine.Debug.Log("OnRecordAudioFrame-----------");
			return true;
		}

		public override bool OnPlaybackAudioFrame(string channelId, AudioFrame audioFrame)
		{
			UnityEngine.Debug.Log("OnPlaybackAudioFrame-----------");
			if (_agoraAudioRawData._count == 1)
			{
				UnityEngine.Debug.LogWarning("audioFrame = " + audioFrame);
			}
			float[] array = ProcessAudioRawData.ConvertByteToFloat16(audioFrame.RawBuffer);
			lock (_agoraAudioRawData._audioBuffer)
			{
				_agoraAudioRawData._audioBuffer.Put(array);
				_agoraAudioRawData._writeCount += array.Length;
				_agoraAudioRawData._count++;
			}
			return true;
		}

		public override int GetObservedAudioFramePosition()
		{
			UnityEngine.Debug.Log("GetObservedAudioFramePosition-----------");
			return 15;
		}

		public override AudioParams GetPlaybackAudioParams()
		{
			UnityEngine.Debug.Log("GetPlaybackAudioParams-----------");
			return _audioParams;
		}

		public override AudioParams GetRecordAudioParams()
		{
			UnityEngine.Debug.Log("GetRecordAudioParams-----------");
			return _audioParams;
		}

		public override AudioParams GetMixedAudioParams()
		{
			UnityEngine.Debug.Log("GetMixedAudioParams-----------");
			return _audioParams;
		}

		public override bool OnPlaybackAudioFrameBeforeMixing(string channel_id, uint uid, AudioFrame audio_frame)
		{
			UnityEngine.Debug.Log("OnPlaybackAudioFrameBeforeMixing-----------");
			return false;
		}

		public override bool OnPlaybackAudioFrameBeforeMixing(string channel_id, string uid, AudioFrame audio_frame)
		{
			UnityEngine.Debug.Log("OnPlaybackAudioFrameBeforeMixing2-----------");
			return false;
		}
	}
}
namespace Agora_RTC_Plugin.API_Example.Examples.Advanced.MetadataSample
{
	public class MetadataSample : MonoBehaviour
	{
		[FormerlySerializedAs("appIdInput")]
		[SerializeField]
		private AppIdInput _appIdInput;

		[Header("_____________Basic Configuration_____________")]
		[FormerlySerializedAs("APP_ID")]
		[SerializeField]
		public string _appID = "";

		[FormerlySerializedAs("TOKEN")]
		[SerializeField]
		public string _token = "";

		[FormerlySerializedAs("CHANNEL_NAME")]
		[SerializeField]
		public string _channelName = "";

		public Text LogText;

		internal Agora.Util.Logger Log;

		internal IRtcEngine RtcEngine;

		internal bool Sending;

		internal Queue<string> MetadataQueue = new Queue<string>();

		private void Start()
		{
			LoadAssetData();
			if (CheckAppId())
			{
				InitEngine();
				SetupUI();
				JoinChannel();
			}
		}

		[ContextMenu("ShowAgoraBasicProfileData")]
		private void LoadAssetData()
		{
			if (!(_appIdInput == null))
			{
				_appID = _appIdInput.appID;
				_token = _appIdInput.token;
				_channelName = _appIdInput.channelName;
			}
		}

		private bool CheckAppId()
		{
			Log = new Agora.Util.Logger(LogText);
			return Log.DebugAssert(_appID.Length > 10, "Please fill in your appId in API-Example/profile/appIdInput.asset");
		}

		private void InitEngine()
		{
			RtcEngine = Agora.Rtc.RtcEngine.CreateAgoraRtcEngine();
			UserEventHandler engineEventHandler = new UserEventHandler(this);
			RtcEngineContext context = new RtcEngineContext(_appID, 0uL, CHANNEL_PROFILE_TYPE.CHANNEL_PROFILE_LIVE_BROADCASTING, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_GAME_STREAMING);
			RtcEngine.Initialize(context);
			RtcEngine.InitEventHandler(engineEventHandler);
			UserMetadataObserver observer = new UserMetadataObserver(this);
			RtcEngine.RegisterMediaMetadataObserver(observer, METADATA_TYPE.VIDEO_METADATA);
		}

		private void SetupUI()
		{
			Transform obj = base.transform.Find("UI");
			obj.Find("StartButton").GetComponent<Button>().onClick.AddListener(OnStartButtonPress);
			obj.Find("StopButton").GetComponent<Button>().onClick.AddListener(OnStopButtonPress);
		}

		private void JoinChannel()
		{
			RtcEngine.SetClientRole(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			RtcEngine.EnableAudio();
			RtcEngine.EnableVideo();
			RtcEngine.JoinChannel(_token, _channelName);
		}

		private void Update()
		{
			PermissionHelper.RequestMicrophontPermission();
			lock (MetadataQueue)
			{
				while (MetadataQueue.Count > 0)
				{
					string logMessage = MetadataQueue.Dequeue();
					Log.UpdateLog(logMessage);
				}
			}
		}

		private void OnStartButtonPress()
		{
			Sending = true;
			Log.UpdateLog("Sending: true");
		}

		private void OnStopButtonPress()
		{
			Sending = false;
			Log.UpdateLog("Sending: false");
		}

		private void OnDestroy()
		{
			UnityEngine.Debug.Log("OnDestroy");
			if (RtcEngine != null)
			{
				RtcEngine.InitEventHandler(null);
				RtcEngine.UnregisterMediaMetadataObserver();
				RtcEngine.LeaveChannel();
				RtcEngine.Dispose();
			}
		}

		public string GetChannelName()
		{
			return _channelName;
		}

		internal static void MakeVideoView(uint uid, string channelId = "")
		{
			if ((object)GameObject.Find(uid.ToString()) != null)
			{
				return;
			}
			VideoSurface videoSurface = MakeImageSurface(uid.ToString());
			if ((object)videoSurface != null)
			{
				if (uid == 0)
				{
					videoSurface.SetForUser(uid, channelId);
				}
				else
				{
					videoSurface.SetForUser(uid, channelId, VIDEO_SOURCE_TYPE.VIDEO_SOURCE_REMOTE);
				}
				videoSurface.OnTextureSizeModify += delegate(int width, int height)
				{
					float num = (float)height / (float)width;
					videoSurface.transform.localScale = new Vector3(-5f, 5f * num, 1f);
					UnityEngine.Debug.Log("OnTextureSizeModify: " + width + "  " + height);
				};
				videoSurface.SetEnable(enable: true);
			}
		}

		private static VideoSurface MakePlaneSurface(string goName)
		{
			GameObject gameObject = GameObject.CreatePrimitive(PrimitiveType.Plane);
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.transform.Rotate(-90f, 0f, 0f);
			gameObject.transform.position = Vector3.zero;
			gameObject.transform.localScale = new Vector3(0.25f, 0.5f, 0.5f);
			return gameObject.AddComponent<VideoSurface>();
		}

		private static VideoSurface MakeImageSurface(string goName)
		{
			GameObject gameObject = new GameObject();
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.AddComponent<RawImage>();
			gameObject.AddComponent<UIElementDrag>();
			GameObject gameObject2 = GameObject.Find("VideoCanvas");
			if (gameObject2 != null)
			{
				gameObject.transform.parent = gameObject2.transform;
				UnityEngine.Debug.Log("add video view");
			}
			else
			{
				UnityEngine.Debug.Log("Canvas is null video view");
			}
			gameObject.transform.Rotate(0f, 0f, 180f);
			gameObject.transform.localPosition = Vector3.zero;
			gameObject.transform.localScale = new Vector3(2f, 3f, 1f);
			return gameObject.AddComponent<VideoSurface>();
		}

		internal static void DestroyVideoView(uint uid)
		{
			GameObject gameObject = GameObject.Find(uid.ToString());
			if ((object)gameObject != null)
			{
				UnityEngine.Object.Destroy(gameObject);
			}
		}
	}
	internal class UserEventHandler : IRtcEngineEventHandler
	{
		private readonly MetadataSample _sample;

		internal UserEventHandler(MetadataSample sample)
		{
			_sample = sample;
		}

		public override void OnError(int err, string msg)
		{
			_sample.Log.UpdateLog($"OnError err: {err}, msg: {msg}");
		}

		public override void OnJoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			int build = 0;
			UnityEngine.Debug.Log("Agora: OnJoinChannelSuccess ");
			_sample.Log.UpdateLog($"sdk version: ${_sample.RtcEngine.GetVersion(ref build)}");
			_sample.Log.UpdateLog($"OnJoinChannelSuccess channelName: {connection.channelId}, uid: {connection.localUid}, elapsed: {elapsed}");
			MetadataSample.MakeVideoView(0u);
		}

		public override void OnRejoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			_sample.Log.UpdateLog("OnRejoinChannelSuccess");
		}

		public override void OnLeaveChannel(RtcConnection connection, RtcStats stats)
		{
			_sample.Log.UpdateLog("OnLeaveChannel");
			MetadataSample.DestroyVideoView(0u);
		}

		public override void OnClientRoleChanged(RtcConnection connection, CLIENT_ROLE_TYPE oldRole, CLIENT_ROLE_TYPE newRole)
		{
			_sample.Log.UpdateLog("OnClientRoleChanged");
		}

		public override void OnStreamMessageError(RtcConnection connection, uint remoteUid, int streamId, int code, int missed, int cached)
		{
			_sample.Log.UpdateLog($"OnStreamMessageError remoteUid: {remoteUid}, streamId: {streamId}, code: {code}, missed: {missed}, cached: {cached}");
		}

		public override void OnUserJoined(RtcConnection connection, uint uid, int elapsed)
		{
			_sample.Log.UpdateLog($"OnUserJoined uid: ${uid} elapsed: ${elapsed}");
			MetadataSample.MakeVideoView(uid, _sample.GetChannelName());
		}

		public override void OnUserOffline(RtcConnection connection, uint uid, USER_OFFLINE_REASON_TYPE reason)
		{
			_sample.Log.UpdateLog($"OnUserOffLine uid: ${uid}, reason: ${(int)reason}");
			MetadataSample.DestroyVideoView(uid);
		}
	}
	internal class UserMetadataObserver : IMetadataObserver
	{
		private MetadataSample _sample;

		private int tick;

		internal UserMetadataObserver(MetadataSample sample)
		{
			_sample = sample;
		}

		public override int GetMaxMetadataSize()
		{
			return 128;
		}

		public override bool OnReadyToSendMetadata(ref Metadata metadata, VIDEO_SOURCE_TYPE source_type)
		{
			if (_sample.Sending)
			{
				tick++;
				string s = "tick :" + tick;
				byte[] bytes = Encoding.Default.GetBytes(s);
				Marshal.Copy(bytes, 0, metadata.buffer, bytes.Length);
				metadata.size = (uint)bytes.Length;
				UnityEngine.Debug.Log("OnReadyToSendMetadata Sended metadatasize:" + metadata.size);
			}
			return _sample.Sending;
		}

		public override void OnMetadataReceived(Metadata data)
		{
			byte[] array = new byte[data.size];
			Marshal.Copy(data.buffer, array, 0, (int)data.size);
			string @string = Encoding.Default.GetString(array);
			string item = $"OnMetadataReceived uid:{data.uid} buffer:{@string}";
			lock (_sample.MetadataQueue)
			{
				_sample.MetadataQueue.Enqueue(item);
			}
		}
	}
}
namespace Agora_RTC_Plugin.API_Example.Examples.Advanced.MediaRecorder
{
	public class MediaRecorder : MonoBehaviour
	{
		[FormerlySerializedAs("appIdInput")]
		[SerializeField]
		private AppIdInput _appIdInput;

		[Header("_____________Basic Configuration_____________")]
		[FormerlySerializedAs("APP_ID")]
		[SerializeField]
		private string _appID = "";

		[FormerlySerializedAs("TOKEN")]
		[SerializeField]
		private string _token = "";

		[FormerlySerializedAs("CHANNEL_NAME")]
		[SerializeField]
		private string _channelName = "";

		public Text LogText;

		internal Agora.Util.Logger Log;

		internal IRtcEngine RtcEngine;

		internal IMediaPlayer MediaPlayer;

		internal RtcConnection SelfConnection;

		internal IMediaRecorder Recorder;

		private Button _button1;

		private Button _button2;

		private void Start()
		{
			LoadAssetData();
			if (CheckAppId())
			{
				SetUpUI();
				EnableUI(val: false);
				InitEngine();
				JoinChannel();
			}
		}

		private void Update()
		{
			PermissionHelper.RequestMicrophontPermission();
			PermissionHelper.RequestCameraPermission();
		}

		private void SetUpUI()
		{
			_button1 = GameObject.Find("Button1").GetComponent<Button>();
			_button1.onClick.AddListener(OnStartButtonPress);
			_button2 = GameObject.Find("Button2").GetComponent<Button>();
			_button2.onClick.AddListener(OnStopButtonPress);
		}

		public void EnableUI(bool val)
		{
			base.transform.Find("Button1").gameObject.SetActive(val);
			base.transform.Find("Button2").gameObject.SetActive(val);
		}

		private bool CheckAppId()
		{
			Log = new Agora.Util.Logger(LogText);
			return Log.DebugAssert(_appID.Length > 10, "Please fill in your appId in API-Example/profile/appIdInput.asset");
		}

		[ContextMenu("ShowAgoraBasicProfileData")]
		private void LoadAssetData()
		{
			if (!(_appIdInput == null))
			{
				_appID = _appIdInput.appID;
				_token = _appIdInput.token;
				_channelName = _appIdInput.channelName;
			}
		}

		private void InitEngine()
		{
			RtcEngine = Agora.Rtc.RtcEngine.CreateAgoraRtcEngine();
			UserEventHandler engineEventHandler = new UserEventHandler(this);
			RtcEngineContext context = new RtcEngineContext(_appID, 0uL, CHANNEL_PROFILE_TYPE.CHANNEL_PROFILE_LIVE_BROADCASTING, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_GAME_STREAMING);
			RtcEngine.Initialize(context);
			RtcEngine.InitEventHandler(engineEventHandler);
		}

		internal void InitMediaRecorder()
		{
			Recorder = RtcEngine.GetMediaRecorder();
			int num = Recorder.SetMediaRecorderObserver(SelfConnection, new MediaRecorderObserver(this));
			Log.UpdateLog("SetMediaRecorderObserver:" + num);
		}

		private void JoinChannel()
		{
			RtcEngine.EnableAudio();
			RtcEngine.EnableVideo();
			RtcEngine.SetClientRole(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			ChannelMediaOptions channelMediaOptions = new ChannelMediaOptions();
			channelMediaOptions.autoSubscribeAudio.SetValue(val: true);
			channelMediaOptions.autoSubscribeVideo.SetValue(val: true);
			channelMediaOptions.publishCameraTrack.SetValue(val: true);
			channelMediaOptions.publishMicrophoneTrack.SetValue(val: true);
			channelMediaOptions.enableAudioRecordingOrPlayout.SetValue(val: true);
			channelMediaOptions.clientRoleType.SetValue(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			int num = RtcEngine.JoinChannel(_token, _channelName, 0u, channelMediaOptions);
			Log.UpdateLog("RtcEngineController JoinChannel_MPK returns: " + num);
		}

		private void OnStartButtonPress()
		{
			MediaRecorderConfiguration mediaRecorderConfiguration = new MediaRecorderConfiguration();
			mediaRecorderConfiguration.storagePath = Application.persistentDataPath + "/record.mp4";
			mediaRecorderConfiguration.recorderInfoUpdateInterval = 5;
			int num = Recorder.StartRecording(SelfConnection, mediaRecorderConfiguration);
			Log.UpdateLog("StartRecording:" + num);
			Log.UpdateLog("storagePath: " + mediaRecorderConfiguration.storagePath);
		}

		private void OnStopButtonPress()
		{
			int num = Recorder.StopRecording(SelfConnection);
			Log.UpdateLog("StopRecording:" + num);
		}

		private void OnDestroy()
		{
			UnityEngine.Debug.Log("OnDestroy");
			if (RtcEngine != null)
			{
				RtcEngine.InitEventHandler(null);
				RtcEngine.LeaveChannel();
				RtcEngine.Dispose();
				RtcEngine = null;
			}
		}

		internal string GetChannelName()
		{
			return _channelName;
		}

		internal static void MakeVideoView(uint uid, string channelId = "", VIDEO_SOURCE_TYPE videoSourceType = VIDEO_SOURCE_TYPE.VIDEO_SOURCE_CAMERA_PRIMARY)
		{
			if ((object)GameObject.Find(uid.ToString()) != null)
			{
				return;
			}
			VideoSurface videoSurface = MakeImageSurface(uid.ToString());
			if ((object)videoSurface != null)
			{
				videoSurface.SetForUser(uid, channelId, videoSourceType);
				videoSurface.SetEnable(enable: true);
				videoSurface.OnTextureSizeModify += delegate(int width, int height)
				{
					float num = (float)height / (float)width;
					videoSurface.transform.localScale = new Vector3(-5f, 5f * num, 1f);
					UnityEngine.Debug.Log("OnTextureSizeModify: " + width + "  " + height);
				};
			}
		}

		private VideoSurface MakePlaneSurface(string goName)
		{
			GameObject gameObject = GameObject.CreatePrimitive(PrimitiveType.Plane);
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.transform.Rotate(-90f, 0f, 0f);
			gameObject.transform.position = Vector3.zero;
			gameObject.transform.localScale = new Vector3(1f, 1.333f, 0.5f);
			return gameObject.AddComponent<VideoSurface>();
		}

		private static VideoSurface MakeImageSurface(string goName)
		{
			GameObject gameObject = new GameObject();
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.AddComponent<RawImage>();
			gameObject.AddComponent<UIElementDrag>();
			GameObject gameObject2 = GameObject.Find("VideoCanvas");
			if (gameObject2 != null)
			{
				gameObject.transform.parent = gameObject2.transform;
				UnityEngine.Debug.Log("add video view");
			}
			else
			{
				UnityEngine.Debug.Log("Canvas is null video view");
			}
			gameObject.transform.Rotate(0f, 0f, 180f);
			gameObject.transform.localPosition = Vector3.zero;
			gameObject.transform.localScale = new Vector3(4.5f, 3f, 1f);
			return gameObject.AddComponent<VideoSurface>();
		}

		internal static void DestroyVideoView(uint uid)
		{
			GameObject gameObject = GameObject.Find(uid.ToString());
			if ((object)gameObject != null)
			{
				UnityEngine.Object.Destroy(gameObject);
			}
		}
	}
	internal class UserEventHandler : IRtcEngineEventHandler
	{
		private readonly MediaRecorder _sample;

		internal UserEventHandler(MediaRecorder sample)
		{
			_sample = sample;
		}

		public override void OnError(int err, string msg)
		{
			_sample.Log.UpdateLog($"OnError err: {err}, msg: {msg}");
		}

		public override void OnJoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			int build = 0;
			_sample.Log.UpdateLog($"sdk version: ${_sample.RtcEngine.GetVersion(ref build)}");
			_sample.Log.UpdateLog($"OnJoinChannelSuccess channelName: {connection.channelId}, uid: {connection.localUid}, elapsed: {elapsed}");
			_sample.SelfConnection = connection;
			_sample.EnableUI(val: true);
			MediaRecorder.MakeVideoView(0u);
			_sample.InitMediaRecorder();
		}

		public override void OnRejoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			_sample.Log.UpdateLog("OnRejoinChannelSuccess");
		}

		public override void OnLeaveChannel(RtcConnection connection, RtcStats stats)
		{
			_sample.Log.UpdateLog("OnLeaveChannel");
			MediaRecorder.DestroyVideoView(0u);
		}

		public override void OnClientRoleChanged(RtcConnection connection, CLIENT_ROLE_TYPE oldRole, CLIENT_ROLE_TYPE newRole)
		{
			_sample.Log.UpdateLog("OnClientRoleChanged");
		}

		public override void OnUserJoined(RtcConnection connection, uint uid, int elapsed)
		{
			_sample.Log.UpdateLog($"OnUserJoined uid: ${uid} elapsed: ${elapsed}");
		}

		public override void OnUserOffline(RtcConnection connection, uint uid, USER_OFFLINE_REASON_TYPE reason)
		{
			_sample.Log.UpdateLog($"OnUserOffLine uid: ${uid}, reason: ${(int)reason}");
			MediaRecorder.DestroyVideoView(uid);
		}
	}
	internal class MediaRecorderObserver : IMediaRecorderObserver
	{
		private readonly MediaRecorder _sample;

		internal MediaRecorderObserver(MediaRecorder sample)
		{
			_sample = sample;
		}

		public override void OnRecorderInfoUpdated(RecorderInfo info)
		{
			_sample.Log.UpdateLog($"OnRecorderInfoUpdated fileName: {info.fileName}, durationMs: {info.durationMs} fileSize：{info.fileSize}");
		}

		public override void OnRecorderStateChanged(RecorderState state, RecorderErrorCode error)
		{
			_sample.Log.UpdateLog($"OnRecorderStateChanged state: {state}, error: {error}");
		}
	}
}
namespace Agora_RTC_Plugin.API_Example.Examples.Advanced.MediaPlayerWithCustomDataProviderExample
{
	public class MediaPlayerWithCustomDataProviderExample : MonoBehaviour
	{
		[FormerlySerializedAs("appIdInput")]
		[SerializeField]
		private AppIdInput _appIdInput;

		[Header("_____________Basic Configuration_____________")]
		[FormerlySerializedAs("APP_ID")]
		[SerializeField]
		private string _appID = "";

		[FormerlySerializedAs("TOKEN")]
		[SerializeField]
		private string _token = "";

		[FormerlySerializedAs("CHANNEL_NAME")]
		[SerializeField]
		private string _channelName = "";

		public Text LogText;

		internal Agora.Util.Logger Log;

		internal IRtcEngine RtcEngine;

		internal IMediaPlayer MediaPlayer;

		internal UserPlayerCustomDataProvider customDataProvider;

		private Button _button1;

		private Button _button2;

		private Button _button3;

		private Button _button4;

		private Button _button5;

		private void Start()
		{
			LoadAssetData();
			if (CheckAppId())
			{
				SetUpUI();
				InitEngine();
				InitMediaPlayer();
				JoinChannelWithMPK();
			}
		}

		private void Update()
		{
			PermissionHelper.RequestMicrophontPermission();
			PermissionHelper.RequestCameraPermission();
		}

		private void SetUpUI()
		{
			_button1 = GameObject.Find("Button1").GetComponent<Button>();
			_button1.onClick.AddListener(OnPlayButtonPress);
			_button2 = GameObject.Find("Button2").GetComponent<Button>();
			_button2.onClick.AddListener(OnStopButtonPress);
			_button3 = GameObject.Find("Button3").GetComponent<Button>();
			_button3.onClick.AddListener(OnPauseButtonPress);
			_button4 = GameObject.Find("Button4").GetComponent<Button>();
			_button4.onClick.AddListener(OnResumeButtonPress);
			_button5 = GameObject.Find("Button5").GetComponent<Button>();
			_button5.onClick.AddListener(OnOpenButtonPress);
		}

		public void EnableUI(bool val)
		{
			base.transform.Find("Button1").gameObject.SetActive(val);
			base.transform.Find("Button2").gameObject.SetActive(val);
			base.transform.Find("Button3").gameObject.SetActive(val);
			base.transform.Find("Button4").gameObject.SetActive(val);
		}

		private bool CheckAppId()
		{
			Log = new Agora.Util.Logger(LogText);
			return Log.DebugAssert(_appID.Length > 10, "Please fill in your appId in API-Example/profile/appIdInput.asset");
		}

		[ContextMenu("ShowAgoraBasicProfileData")]
		private void LoadAssetData()
		{
			if (!(_appIdInput == null))
			{
				_appID = _appIdInput.appID;
				_token = _appIdInput.token;
				_channelName = _appIdInput.channelName;
			}
		}

		private void InitEngine()
		{
			RtcEngine = Agora.Rtc.RtcEngine.CreateAgoraRtcEngine();
			UserEventHandler engineEventHandler = new UserEventHandler(this);
			RtcEngineContext context = new RtcEngineContext(_appID, 0uL, CHANNEL_PROFILE_TYPE.CHANNEL_PROFILE_LIVE_BROADCASTING, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_GAME_STREAMING);
			RtcEngine.Initialize(context);
			RtcEngine.InitEventHandler(engineEventHandler);
			string text = Application.persistentDataPath + "/rtc.log";
			RtcEngine.SetLogFile(text);
			Log.UpdateLog("logFile:" + text);
		}

		private void InitMediaPlayer()
		{
			MediaPlayer = RtcEngine.CreateMediaPlayer();
			if (MediaPlayer == null)
			{
				Log.UpdateLog("CreateMediaPlayer failed!");
				return;
			}
			MpkEventHandler engineEventHandler = new MpkEventHandler(this);
			MediaPlayer.InitEventHandler(engineEventHandler);
			Log.UpdateLog("playerId id: " + MediaPlayer.GetId());
		}

		private void JoinChannelWithMPK()
		{
			RtcEngine.EnableAudio();
			RtcEngine.EnableVideo();
			RtcEngine.SetClientRole(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			ChannelMediaOptions channelMediaOptions = new ChannelMediaOptions();
			channelMediaOptions.autoSubscribeAudio.SetValue(val: true);
			channelMediaOptions.autoSubscribeVideo.SetValue(val: true);
			channelMediaOptions.publishCustomAudioTrack.SetValue(val: false);
			channelMediaOptions.publishCameraTrack.SetValue(val: false);
			channelMediaOptions.publishMediaPlayerAudioTrack.SetValue(val: true);
			channelMediaOptions.publishMediaPlayerVideoTrack.SetValue(val: true);
			channelMediaOptions.publishMediaPlayerId.SetValue(MediaPlayer.GetId());
			channelMediaOptions.enableAudioRecordingOrPlayout.SetValue(val: true);
			channelMediaOptions.clientRoleType.SetValue(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			int num = RtcEngine.JoinChannel(_token, _channelName, 0u, channelMediaOptions);
			Log.UpdateLog("RtcEngineController JoinChannel_MPK returns: " + num);
		}

		private void OnPlayButtonPress()
		{
			int num = MediaPlayer.Play();
			Log.UpdateLog("Play return" + num);
		}

		private void OnStopButtonPress()
		{
			int num = MediaPlayer.Stop();
			Log.UpdateLog("Stop return" + num);
			customDataProvider.Close();
		}

		private void OnPauseButtonPress()
		{
			int num = MediaPlayer.Pause();
			Log.UpdateLog("Pause return" + num);
		}

		private void OnResumeButtonPress()
		{
			int num = MediaPlayer.Resume();
			Log.UpdateLog("Resume returns: " + num);
		}

		private void OnOpenButtonPress()
		{
			customDataProvider = new UserPlayerCustomDataProvider(this);
			string file = "/assets/img/MPK.mov";
			customDataProvider.Open(file);
			MediaSource mediaSource = new MediaSource();
			mediaSource.provider = customDataProvider;
			mediaSource.autoPlay = false;
			int num = MediaPlayer.OpenWithMediaSource(mediaSource);
			Log.UpdateLog("OpenWithMediaSource: " + num);
		}

		private void TestMediaPlayer()
		{
			long duration = 0L;
			UnityEngine.Debug.Log("_mediaPlayer.GetDuration returns: " + MediaPlayer.GetDuration(ref duration) + "duration: " + duration);
			long pos = 0L;
			UnityEngine.Debug.Log("_mediaPlayer.GetPlayPosition returns: " + MediaPlayer.GetPlayPosition(ref pos) + "position: " + pos);
			UnityEngine.Debug.Log("_mediaPlayer.GetState:" + MediaPlayer.GetState());
			bool muted = true;
			UnityEngine.Debug.Log("_mediaPlayer.GetMute returns: " + MediaPlayer.GetMute(ref muted) + "mute: " + muted);
			int volume = 0;
			UnityEngine.Debug.Log("_mediaPlayer.GetPlayoutVolume returns: " + MediaPlayer.GetPlayoutVolume(ref volume) + "volume: " + volume);
			UnityEngine.Debug.Log("SDK Version:" + MediaPlayer.GetPlayerSdkVersion());
			UnityEngine.Debug.Log("GetPlaySrc:" + MediaPlayer.GetPlaySrc());
		}

		private void OnDestroy()
		{
			UnityEngine.Debug.Log("OnDestroy");
			if (RtcEngine != null)
			{
				if (MediaPlayer != null)
				{
					MediaPlayer.Stop();
					RtcEngine.DestroyMediaPlayer(MediaPlayer);
				}
				if (customDataProvider != null)
				{
					customDataProvider.Close();
				}
				RtcEngine.InitEventHandler(null);
				RtcEngine.LeaveChannel();
				RtcEngine.Dispose();
				RtcEngine = null;
			}
		}

		internal string GetChannelName()
		{
			return _channelName;
		}

		internal static void MakeVideoView(uint uid, string channelId = "", VIDEO_SOURCE_TYPE videoSourceType = VIDEO_SOURCE_TYPE.VIDEO_SOURCE_CAMERA_PRIMARY)
		{
			if ((object)GameObject.Find(uid.ToString()) != null)
			{
				return;
			}
			VideoSurface videoSurface = MakeImageSurface(uid.ToString());
			if ((object)videoSurface != null)
			{
				videoSurface.SetForUser(uid, channelId, videoSourceType);
				videoSurface.SetEnable(enable: true);
				videoSurface.OnTextureSizeModify += delegate(int width, int height)
				{
					float num = (float)height / (float)width;
					videoSurface.transform.localScale = new Vector3(-5f, 5f * num, 1f);
					UnityEngine.Debug.Log("OnTextureSizeModify: " + width + "  " + height);
				};
			}
		}

		private VideoSurface MakePlaneSurface(string goName)
		{
			GameObject gameObject = GameObject.CreatePrimitive(PrimitiveType.Plane);
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.transform.Rotate(-90f, 0f, 0f);
			gameObject.transform.position = Vector3.zero;
			gameObject.transform.localScale = new Vector3(1f, 1.333f, 0.5f);
			return gameObject.AddComponent<VideoSurface>();
		}

		private static VideoSurface MakeImageSurface(string goName)
		{
			GameObject gameObject = new GameObject();
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.AddComponent<RawImage>();
			gameObject.AddComponent<UIElementDrag>();
			GameObject gameObject2 = GameObject.Find("VideoCanvas");
			if (gameObject2 != null)
			{
				gameObject.transform.parent = gameObject2.transform;
				UnityEngine.Debug.Log("add video view");
			}
			else
			{
				UnityEngine.Debug.Log("Canvas is null video view");
			}
			gameObject.transform.Rotate(0f, 0f, 180f);
			gameObject.transform.localPosition = Vector3.zero;
			gameObject.transform.localScale = new Vector3(4.5f, 3f, 1f);
			return gameObject.AddComponent<VideoSurface>();
		}

		internal static void DestroyVideoView(uint uid)
		{
			GameObject gameObject = GameObject.Find(uid.ToString());
			if ((object)gameObject != null)
			{
				UnityEngine.Object.Destroy(gameObject);
			}
		}
	}
	internal class MpkEventHandler : IMediaPlayerSourceObserver
	{
		private readonly MediaPlayerWithCustomDataProviderExample _sample;

		internal MpkEventHandler(MediaPlayerWithCustomDataProviderExample sample)
		{
			_sample = sample;
		}

		public override void OnPlayerSourceStateChanged(MEDIA_PLAYER_STATE state, MEDIA_PLAYER_ERROR ec)
		{
			_sample.Log.UpdateLog($"OnPlayerSourceStateChanged state: {state}, ec: {ec}, playId: {_sample.MediaPlayer.GetId()}");
			UnityEngine.Debug.Log("OnPlayerSourceStateChanged");
			switch (state)
			{
			case MEDIA_PLAYER_STATE.PLAYER_STATE_OPEN_COMPLETED:
				MediaPlayerWithCustomDataProviderExample.MakeVideoView((uint)_sample.MediaPlayer.GetId(), "", VIDEO_SOURCE_TYPE.VIDEO_SOURCE_MEDIA_PLAYER);
				_sample.EnableUI(val: true);
				_sample.Log.UpdateLog("Open Complete. Click start to play media");
				break;
			case MEDIA_PLAYER_STATE.PLAYER_STATE_STOPPED:
				MediaPlayerWithCustomDataProviderExample.DestroyVideoView((uint)_sample.MediaPlayer.GetId());
				_sample.EnableUI(val: false);
				break;
			}
		}

		public override void OnPlayerEvent(MEDIA_PLAYER_EVENT @event, long elapsedTime, string message)
		{
			_sample.Log.UpdateLog($"OnPlayerEvent state: {@event}");
		}
	}
	internal class UserEventHandler : IRtcEngineEventHandler
	{
		private readonly MediaPlayerWithCustomDataProviderExample _sample;

		internal UserEventHandler(MediaPlayerWithCustomDataProviderExample sample)
		{
			_sample = sample;
		}

		public override void OnError(int err, string msg)
		{
			_sample.Log.UpdateLog($"OnError err: {err}, msg: {msg}");
		}

		public override void OnJoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			int build = 0;
			_sample.Log.UpdateLog($"sdk version: ${_sample.RtcEngine.GetVersion(ref build)}");
			_sample.Log.UpdateLog($"OnJoinChannelSuccess channelName: {connection.channelId}, uid: {connection.localUid}, elapsed: {elapsed}");
		}

		public override void OnRejoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			_sample.Log.UpdateLog("OnRejoinChannelSuccess");
		}

		public override void OnLeaveChannel(RtcConnection connection, RtcStats stats)
		{
			_sample.Log.UpdateLog("OnLeaveChannel");
			MediaPlayerWithCustomDataProviderExample.DestroyVideoView(0u);
		}

		public override void OnClientRoleChanged(RtcConnection connection, CLIENT_ROLE_TYPE oldRole, CLIENT_ROLE_TYPE newRole)
		{
			_sample.Log.UpdateLog("OnClientRoleChanged");
		}

		public override void OnUserJoined(RtcConnection connection, uint uid, int elapsed)
		{
			_sample.Log.UpdateLog($"OnUserJoined uid: ${uid} elapsed: ${elapsed}");
		}

		public override void OnUserOffline(RtcConnection connection, uint uid, USER_OFFLINE_REASON_TYPE reason)
		{
			_sample.Log.UpdateLog($"OnUserOffLine uid: ${uid}, reason: ${(int)reason}");
			MediaPlayerWithCustomDataProviderExample.DestroyVideoView(uid);
		}
	}
	internal class UserPlayerCustomDataProvider : IMediaPlayerCustomDataProvider
	{
		private MediaPlayerWithCustomDataProviderExample _sample;

		private FileStream fis;

		private long fileSize;

		internal UserPlayerCustomDataProvider(MediaPlayerWithCustomDataProviderExample sample)
		{
			_sample = sample;
		}

		public bool Open(string file)
		{
			try
			{
				if (File.Exists(file))
				{
					fis = new FileStream(file, FileMode.Open, FileAccess.Read);
					fileSize = fis.Length;
					_sample.Log.UpdateLog("open file sucess size: " + fileSize);
				}
			}
			catch (Exception ex)
			{
				_sample.Log.UpdateLog("open catch exception " + ex);
				return false;
			}
			return true;
		}

		public void Close()
		{
			if (fis != null)
			{
				try
				{
					fis.Close();
				}
				catch (Exception ex)
				{
					_sample.Log.UpdateLog("close catch exception " + ex);
				}
				fis = null;
			}
		}

		public override long OnSeek(long offset, int whence)
		{
			UnityEngine.Debug.Log($"OnSeek offset:{offset} whence:{whence}");
			switch (whence)
			{
			case 0:
				try
				{
					if (fis == null)
					{
						return -1L;
					}
					fis.Seek(offset, SeekOrigin.Begin);
					return offset;
				}
				catch (Exception ex)
				{
					UnityEngine.Debug.Log("onseek catch exception " + ex);
					return -1L;
				}
			case 65536:
				return fileSize;
			default:
				return 0L;
			}
		}

		public override int OnReadData(IntPtr bufferPtr, int bufferSize)
		{
			UnityEngine.Debug.Log($"OnReadData bufferPtr:{(long)bufferPtr} bufferSize:{bufferSize}");
			if (fis == null)
			{
				return -1;
			}
			byte[] array = new byte[bufferSize];
			int num = -1;
			try
			{
				num = fis.Read(array, 0, bufferSize);
				if (num == -1)
				{
					return -1;
				}
				UnityEngine.Debug.Log("onReadData: " + num);
				Marshal.Copy(array, 0, bufferPtr, num);
				return num;
			}
			catch (Exception ex)
			{
				UnityEngine.Debug.Log("onseek catch exception " + ex);
				return -1;
			}
		}
	}
}
namespace Agora_RTC_Plugin.API_Example.Examples.Advanced.MediaPlayer
{
	public class MediaPlayerExample : MonoBehaviour
	{
		[FormerlySerializedAs("appIdInput")]
		[SerializeField]
		private AppIdInput _appIdInput;

		[Header("_____________Basic Configuration_____________")]
		[FormerlySerializedAs("APP_ID")]
		[SerializeField]
		private string _appID = "";

		[FormerlySerializedAs("TOKEN")]
		[SerializeField]
		private string _token = "";

		[FormerlySerializedAs("CHANNEL_NAME")]
		[SerializeField]
		private string _channelName = "";

		public Text LogText;

		internal Agora.Util.Logger Log;

		internal IRtcEngine RtcEngine;

		internal IMediaPlayer MediaPlayer;

		private const string MPK_URL = "https://download.agora.io/demo/test/fiture265_60_4.flv";

		private const string PRELOAD_URL = "https://agora-adc-artifacts.oss-cn-beijing.aliyuncs.com/video/meta_live_mpk.mov";

		private Button _button1;

		private Button _button2;

		private Button _button3;

		private Button _button4;

		private Button _button5;

		private Button _button6;

		private Button _button7;

		private Toggle _urlToggle;

		private Toggle _loopToggle;

		private InputField _inputField;

		private void Start()
		{
			LoadAssetData();
			if (CheckAppId())
			{
				SetUpUI();
				EnableUI(val: false);
				InitEngine();
				InitMediaPlayer();
				JoinChannelWithMPK();
			}
		}

		private void Update()
		{
			PermissionHelper.RequestMicrophontPermission();
			PermissionHelper.RequestCameraPermission();
		}

		private void SetUpUI()
		{
			_button1 = GameObject.Find("Button1").GetComponent<Button>();
			_button1.onClick.AddListener(OnPlayButtonPress);
			_button2 = GameObject.Find("Button2").GetComponent<Button>();
			_button2.onClick.AddListener(OnStopButtonPress);
			_button3 = GameObject.Find("Button3").GetComponent<Button>();
			_button3.onClick.AddListener(OnPauseButtonPress);
			_button4 = GameObject.Find("Button4").GetComponent<Button>();
			_button4.onClick.AddListener(OnResumeButtonPress);
			_button5 = GameObject.Find("Button5").GetComponent<Button>();
			_button5.onClick.AddListener(OnOpenButtonPress);
			_button6 = GameObject.Find("Button6").GetComponent<Button>();
			_button6.onClick.AddListener(OnPreloadSrcButtonClick);
			_button7 = GameObject.Find("Button7").GetComponent<Button>();
			_button7.onClick.AddListener(OnPlayPreloadButtonClick);
			_urlToggle = GameObject.Find("UrlToggle").GetComponent<Toggle>();
			_loopToggle = GameObject.Find("LoopToggle").GetComponent<Toggle>();
			_inputField = GameObject.Find("InputField").GetComponent<InputField>();
		}

		public void EnableUI(bool val)
		{
			base.transform.Find("Button1").gameObject.SetActive(val);
			base.transform.Find("Button2").gameObject.SetActive(val);
			base.transform.Find("Button3").gameObject.SetActive(val);
			base.transform.Find("Button4").gameObject.SetActive(val);
		}

		private bool CheckAppId()
		{
			Log = new Agora.Util.Logger(LogText);
			return Log.DebugAssert(_appID.Length > 10, "Please fill in your appId in API-Example/profile/appIdInput.asset");
		}

		[ContextMenu("ShowAgoraBasicProfileData")]
		private void LoadAssetData()
		{
			if (!(_appIdInput == null))
			{
				_appID = _appIdInput.appID;
				_token = _appIdInput.token;
				_channelName = _appIdInput.channelName;
			}
		}

		private void InitEngine()
		{
			RtcEngine = Agora.Rtc.RtcEngine.CreateAgoraRtcEngine();
			UserEventHandler engineEventHandler = new UserEventHandler(this);
			RtcEngineContext context = new RtcEngineContext(_appID, 0uL, CHANNEL_PROFILE_TYPE.CHANNEL_PROFILE_LIVE_BROADCASTING, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_GAME_STREAMING);
			RtcEngine.Initialize(context);
			RtcEngine.InitEventHandler(engineEventHandler);
			string text = Application.persistentDataPath + "/rtc.log";
			RtcEngine.SetLogFile(text);
			Log.UpdateLog("logFile:" + text);
		}

		private void InitMediaPlayer()
		{
			MediaPlayer = RtcEngine.CreateMediaPlayer();
			if (MediaPlayer == null)
			{
				Log.UpdateLog("CreateMediaPlayer failed!");
				return;
			}
			MpkEventHandler engineEventHandler = new MpkEventHandler(this);
			MediaPlayer.InitEventHandler(engineEventHandler);
			Log.UpdateLog("playerId id: " + MediaPlayer.GetId());
		}

		private void JoinChannelWithMPK()
		{
			RtcEngine.EnableAudio();
			RtcEngine.EnableVideo();
			RtcEngine.SetClientRole(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			ChannelMediaOptions channelMediaOptions = new ChannelMediaOptions();
			channelMediaOptions.autoSubscribeAudio.SetValue(val: true);
			channelMediaOptions.autoSubscribeVideo.SetValue(val: true);
			channelMediaOptions.publishCustomAudioTrack.SetValue(val: false);
			channelMediaOptions.publishCameraTrack.SetValue(val: false);
			channelMediaOptions.publishMediaPlayerAudioTrack.SetValue(val: true);
			channelMediaOptions.publishMediaPlayerVideoTrack.SetValue(val: true);
			channelMediaOptions.publishMediaPlayerId.SetValue(MediaPlayer.GetId());
			channelMediaOptions.enableAudioRecordingOrPlayout.SetValue(val: true);
			channelMediaOptions.clientRoleType.SetValue(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			int num = RtcEngine.JoinChannel(_token, _channelName, 0u, channelMediaOptions);
			Log.UpdateLog("RtcEngineController JoinChannel_MPK returns: " + num);
		}

		private void OnPlayButtonPress()
		{
			if (IsLoop())
			{
				MediaPlayer.SetLoopCount(-1);
			}
			else
			{
				MediaPlayer.SetLoopCount(0);
			}
			int num = MediaPlayer.Play();
			Log.UpdateLog("Play return" + num);
			TestMediaPlayer();
		}

		private void OnStopButtonPress()
		{
			int num = MediaPlayer.Stop();
			Log.UpdateLog("Stop return" + num);
		}

		private void OnPauseButtonPress()
		{
			int num = MediaPlayer.Pause();
			Log.UpdateLog("Pause return" + num);
		}

		private void OnResumeButtonPress()
		{
			int num = MediaPlayer.Resume();
			Log.UpdateLog("Resume returns: " + num);
		}

		private void OnOpenButtonPress()
		{
			string text = null;
			text = ((!_urlToggle.isOn) ? "/assets/img/MPK.mov" : ((!(_inputField.text == "")) ? _inputField.text : "https://download.agora.io/demo/test/fiture265_60_4.flv"));
			Log.UpdateLog("Is opening : " + text);
			int num = MediaPlayer.Open(text, 0L);
			Log.UpdateLog("Open returns: " + num);
		}

		private void OnOpenWithCustomSource()
		{
			int num = MediaPlayer.OpenWithCustomSource(0L, new UserPlayerCustomDataProvider(this));
			Log.UpdateLog("OpenWithCustomSource" + num);
		}

		private void OnPreloadSrcButtonClick()
		{
			int num = MediaPlayer.PreloadSrc("https://agora-adc-artifacts.oss-cn-beijing.aliyuncs.com/video/meta_live_mpk.mov", 0L);
			Log.UpdateLog("PreloadSrc: " + num);
		}

		private void OnPlayPreloadButtonClick()
		{
			int num = MediaPlayer.PlayPreloadedSrc("https://agora-adc-artifacts.oss-cn-beijing.aliyuncs.com/video/meta_live_mpk.mov");
			Log.UpdateLog("PlayPreloadedSrc: " + num);
		}

		private void TestMediaPlayer()
		{
			long duration = 0L;
			UnityEngine.Debug.Log("_mediaPlayer.GetDuration returns: " + MediaPlayer.GetDuration(ref duration) + "duration: " + duration);
			long pos = 0L;
			UnityEngine.Debug.Log("_mediaPlayer.GetPlayPosition returns: " + MediaPlayer.GetPlayPosition(ref pos) + "position: " + pos);
			UnityEngine.Debug.Log("_mediaPlayer.GetState:" + MediaPlayer.GetState());
			bool muted = true;
			UnityEngine.Debug.Log("_mediaPlayer.GetMute returns: " + MediaPlayer.GetMute(ref muted) + "mute: " + muted);
			int volume = 0;
			UnityEngine.Debug.Log("_mediaPlayer.GetPlayoutVolume returns: " + MediaPlayer.GetPlayoutVolume(ref volume) + "volume: " + volume);
			UnityEngine.Debug.Log("SDK Version:" + MediaPlayer.GetPlayerSdkVersion());
			UnityEngine.Debug.Log("GetPlaySrc:" + MediaPlayer.GetPlaySrc());
		}

		private void OnDestroy()
		{
			UnityEngine.Debug.Log("OnDestroy");
			if (RtcEngine != null)
			{
				if (MediaPlayer != null)
				{
					RtcEngine.DestroyMediaPlayer(MediaPlayer);
				}
				RtcEngine.InitEventHandler(null);
				RtcEngine.LeaveChannel();
				RtcEngine.Dispose();
				RtcEngine = null;
			}
		}

		internal string GetChannelName()
		{
			return _channelName;
		}

		internal bool IsLoop()
		{
			return _loopToggle.isOn;
		}

		internal static void MakeVideoView(uint uid, string channelId = "", VIDEO_SOURCE_TYPE videoSourceType = VIDEO_SOURCE_TYPE.VIDEO_SOURCE_CAMERA_PRIMARY)
		{
			if ((object)GameObject.Find(uid.ToString()) != null)
			{
				return;
			}
			VideoSurface videoSurface = MakeImageSurface(uid.ToString());
			if ((object)videoSurface != null)
			{
				videoSurface.SetForUser(uid, channelId, videoSourceType);
				videoSurface.SetEnable(enable: true);
				videoSurface.OnTextureSizeModify += delegate(int width, int height)
				{
					float num = (float)height / (float)width;
					videoSurface.transform.localScale = new Vector3(-5f, 5f * num, 1f);
					UnityEngine.Debug.Log("OnTextureSizeModify: " + width + "  " + height);
				};
			}
		}

		private VideoSurface MakePlaneSurface(string goName)
		{
			GameObject gameObject = GameObject.CreatePrimitive(PrimitiveType.Plane);
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.transform.Rotate(-90f, 0f, 0f);
			gameObject.transform.position = Vector3.zero;
			gameObject.transform.localScale = new Vector3(1f, 1.333f, 0.5f);
			return gameObject.AddComponent<VideoSurface>();
		}

		private static VideoSurface MakeImageSurface(string goName)
		{
			GameObject gameObject = new GameObject();
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.AddComponent<RawImage>();
			gameObject.AddComponent<UIElementDrag>();
			GameObject gameObject2 = GameObject.Find("VideoCanvas");
			if (gameObject2 != null)
			{
				gameObject.transform.parent = gameObject2.transform;
				UnityEngine.Debug.Log("add video view");
			}
			else
			{
				UnityEngine.Debug.Log("Canvas is null video view");
			}
			gameObject.transform.Rotate(0f, 0f, 180f);
			gameObject.transform.localPosition = Vector3.zero;
			gameObject.transform.localScale = new Vector3(4.5f, 3f, 1f);
			return gameObject.AddComponent<VideoSurface>();
		}

		internal static void DestroyVideoView(uint uid)
		{
			GameObject gameObject = GameObject.Find(uid.ToString());
			if ((object)gameObject != null)
			{
				UnityEngine.Object.Destroy(gameObject);
			}
		}
	}
	internal class MpkEventHandler : IMediaPlayerSourceObserver
	{
		private readonly MediaPlayerExample _sample;

		internal MpkEventHandler(MediaPlayerExample sample)
		{
			_sample = sample;
		}

		public override void OnPlayerSourceStateChanged(MEDIA_PLAYER_STATE state, MEDIA_PLAYER_ERROR ec)
		{
			_sample.Log.UpdateLog($"OnPlayerSourceStateChanged state: {state}, ec: {ec}, playId: {_sample.MediaPlayer.GetId()}");
			UnityEngine.Debug.Log("OnPlayerSourceStateChanged");
			switch (state)
			{
			case MEDIA_PLAYER_STATE.PLAYER_STATE_OPEN_COMPLETED:
				MediaPlayerExample.MakeVideoView((uint)_sample.MediaPlayer.GetId(), "", VIDEO_SOURCE_TYPE.VIDEO_SOURCE_MEDIA_PLAYER);
				_sample.EnableUI(val: true);
				_sample.Log.UpdateLog("Open Complete. Click start to play media");
				break;
			case MEDIA_PLAYER_STATE.PLAYER_STATE_STOPPED:
				MediaPlayerExample.DestroyVideoView((uint)_sample.MediaPlayer.GetId());
				_sample.EnableUI(val: false);
				break;
			}
		}

		public override void OnPlayerEvent(MEDIA_PLAYER_EVENT @event, long elapsedTime, string message)
		{
			_sample.Log.UpdateLog($"OnPlayerEvent state: {@event}");
		}

		public override void OnPreloadEvent(string src, PLAYER_PRELOAD_EVENT @event)
		{
			_sample.Log.UpdateLog($"OnPreloadEvent src: {src}, @event: {@event}");
		}
	}
	internal class UserEventHandler : IRtcEngineEventHandler
	{
		private readonly MediaPlayerExample _sample;

		internal UserEventHandler(MediaPlayerExample sample)
		{
			_sample = sample;
		}

		public override void OnError(int err, string msg)
		{
			_sample.Log.UpdateLog($"OnError err: {err}, msg: {msg}");
		}

		public override void OnJoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			int build = 0;
			_sample.Log.UpdateLog($"sdk version: ${_sample.RtcEngine.GetVersion(ref build)}");
			_sample.Log.UpdateLog($"OnJoinChannelSuccess channelName: {connection.channelId}, uid: {connection.localUid}, elapsed: {elapsed}");
		}

		public override void OnRejoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			_sample.Log.UpdateLog("OnRejoinChannelSuccess");
		}

		public override void OnLeaveChannel(RtcConnection connection, RtcStats stats)
		{
			_sample.Log.UpdateLog("OnLeaveChannel");
			MediaPlayerExample.DestroyVideoView(0u);
		}

		public override void OnClientRoleChanged(RtcConnection connection, CLIENT_ROLE_TYPE oldRole, CLIENT_ROLE_TYPE newRole)
		{
			_sample.Log.UpdateLog("OnClientRoleChanged");
		}

		public override void OnUserJoined(RtcConnection connection, uint uid, int elapsed)
		{
			_sample.Log.UpdateLog($"OnUserJoined uid: ${uid} elapsed: ${elapsed}");
		}

		public override void OnUserOffline(RtcConnection connection, uint uid, USER_OFFLINE_REASON_TYPE reason)
		{
			_sample.Log.UpdateLog($"OnUserOffLine uid: ${uid}, reason: ${(int)reason}");
			MediaPlayerExample.DestroyVideoView(uid);
		}
	}
	internal class UserPlayerCustomDataProvider : IMediaPlayerCustomDataProvider
	{
		private MediaPlayerExample _sample;

		internal UserPlayerCustomDataProvider(MediaPlayerExample sample)
		{
			_sample = sample;
		}

		public override long OnSeek(long offset, int whence)
		{
			UnityEngine.Debug.Log("UserPlayerCustomDataProvider OnSeek");
			return 0L;
		}

		public override int OnReadData(IntPtr bufferPtr, int bufferSize)
		{
			UnityEngine.Debug.Log("UserPlayerCustomDataProvider OnReadData");
			return 0;
		}
	}
}
namespace Agora_RTC_Plugin.API_Example.Examples.Advanced.JoinChannelWithUserAccount
{
	public class JoinChannelWithUserAccount : MonoBehaviour
	{
		[FormerlySerializedAs("appIdInput")]
		[SerializeField]
		private AppIdInput _appIdInput;

		[Header("_____________Basic Configuration_____________")]
		[FormerlySerializedAs("APP_ID")]
		[SerializeField]
		private string _appID = "";

		[FormerlySerializedAs("TOKEN")]
		[SerializeField]
		private string _token = "";

		[FormerlySerializedAs("CHANNEL_NAME")]
		[SerializeField]
		private string _channelName = "";

		public Text LogText;

		internal Agora.Util.Logger Log;

		internal IRtcEngine RtcEngine;

		private const string USER_ACCOUNT = "Unity";

		private void Start()
		{
			LoadAssetData();
			if (CheckAppId())
			{
				InitEngine();
				JoinChannel();
			}
		}

		private void Update()
		{
			PermissionHelper.RequestMicrophontPermission();
			PermissionHelper.RequestCameraPermission();
		}

		[ContextMenu("ShowAgoraBasicProfileData")]
		private void LoadAssetData()
		{
			if (!(_appIdInput == null))
			{
				_appID = _appIdInput.appID;
				_token = _appIdInput.token;
				_channelName = _appIdInput.channelName;
			}
		}

		private bool CheckAppId()
		{
			Log = new Agora.Util.Logger(LogText);
			return Log.DebugAssert(_appID.Length > 10, "Please fill in your appId in API-Example/profile/appIdInput.asset");
		}

		private void InitEngine()
		{
			RtcEngine = Agora.Rtc.RtcEngine.CreateAgoraRtcEngine();
			UserEventHandler engineEventHandler = new UserEventHandler(this);
			RtcEngineContext context = new RtcEngineContext(_appID, 0uL, CHANNEL_PROFILE_TYPE.CHANNEL_PROFILE_LIVE_BROADCASTING, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_DEFAULT);
			RtcEngine.Initialize(context);
			RtcEngine.InitEventHandler(engineEventHandler);
		}

		private void JoinChannel()
		{
			RtcEngine.EnableAudio();
			RtcEngine.EnableVideo();
			RtcEngine.SetClientRole(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			RtcEngine.JoinChannelWithUserAccount(_token, _channelName, "Unity");
		}

		private void GetUserInfoByUserAccount()
		{
			UserInfo userInfo = new UserInfo();
			RtcEngine.GetUserInfoByUserAccount("Unity", ref userInfo);
			Log.UpdateLog($"GetUserInfoByUserAccount account: {userInfo.userAccount}, uid: {userInfo.uid}");
		}

		private void OnDestroy()
		{
			UnityEngine.Debug.Log("OnDestroy");
			if (RtcEngine != null)
			{
				RtcEngine.InitEventHandler(null);
				RtcEngine.LeaveChannel();
				RtcEngine.Dispose();
			}
		}

		internal string GetChannelName()
		{
			return _channelName;
		}

		internal static void MakeVideoView(uint uid, string channelId = "")
		{
			if ((object)GameObject.Find(uid.ToString()) != null)
			{
				return;
			}
			VideoSurface videoSurface = MakeImageSurface(uid.ToString());
			if ((object)videoSurface != null)
			{
				if (uid == 0)
				{
					videoSurface.SetForUser(uid, channelId);
				}
				else
				{
					videoSurface.SetForUser(uid, channelId, VIDEO_SOURCE_TYPE.VIDEO_SOURCE_REMOTE);
				}
				videoSurface.OnTextureSizeModify += delegate(int width, int height)
				{
					float num = (float)height / (float)width;
					videoSurface.transform.localScale = new Vector3(-5f, 5f * num, 1f);
					UnityEngine.Debug.Log("OnTextureSizeModify: " + width + "  " + height);
				};
				videoSurface.SetEnable(enable: true);
			}
		}

		private VideoSurface MakePlaneSurface(string goName)
		{
			GameObject gameObject = GameObject.CreatePrimitive(PrimitiveType.Plane);
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.transform.Rotate(-90f, 0f, 0f);
			gameObject.transform.position = Vector3.zero;
			gameObject.transform.localScale = new Vector3(0.25f, 0.5f, 0.5f);
			return gameObject.AddComponent<VideoSurface>();
		}

		private static VideoSurface MakeImageSurface(string goName)
		{
			GameObject gameObject = new GameObject();
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.AddComponent<RawImage>();
			gameObject.AddComponent<UIElementDrag>();
			GameObject gameObject2 = GameObject.Find("VideoCanvas");
			if (gameObject2 != null)
			{
				gameObject.transform.parent = gameObject2.transform;
				UnityEngine.Debug.Log("add video view");
			}
			else
			{
				UnityEngine.Debug.Log("Canvas is null video view");
			}
			gameObject.transform.Rotate(0f, 0f, 180f);
			gameObject.transform.localPosition = Vector3.zero;
			gameObject.transform.localScale = new Vector3(2f, 3f, 1f);
			return gameObject.AddComponent<VideoSurface>();
		}

		internal static void DestroyVideoView(uint uid)
		{
			GameObject gameObject = GameObject.Find(uid.ToString());
			if ((object)gameObject != null)
			{
				UnityEngine.Object.Destroy(gameObject);
			}
		}
	}
	internal class UserEventHandler : IRtcEngineEventHandler
	{
		private readonly JoinChannelWithUserAccount _videoSample;

		internal UserEventHandler(JoinChannelWithUserAccount videoSample)
		{
			_videoSample = videoSample;
		}

		public override void OnError(int err, string msg)
		{
			_videoSample.Log.UpdateLog($"OnError err: {err}, msg: {msg}");
		}

		public override void OnJoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			int build = 0;
			UnityEngine.Debug.Log("Agora: OnJoinChannelSuccess ");
			_videoSample.Log.UpdateLog($"sdk version: ${_videoSample.RtcEngine.GetVersion(ref build)}");
			_videoSample.Log.UpdateLog($"OnJoinChannelSuccess channelName: {connection.channelId}, uid: {connection.localUid}, elapsed: {elapsed}");
			JoinChannelWithUserAccount.MakeVideoView(0u);
		}

		public override void OnRejoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			_videoSample.Log.UpdateLog("OnRejoinChannelSuccess");
		}

		public override void OnLeaveChannel(RtcConnection connection, RtcStats stats)
		{
			_videoSample.Log.UpdateLog("OnLeaveChannel");
			JoinChannelWithUserAccount.DestroyVideoView(0u);
		}

		public override void OnClientRoleChanged(RtcConnection connection, CLIENT_ROLE_TYPE oldRole, CLIENT_ROLE_TYPE newRole)
		{
			_videoSample.Log.UpdateLog("OnClientRoleChanged");
		}

		public override void OnUserJoined(RtcConnection connection, uint uid, int elapsed)
		{
			_videoSample.Log.UpdateLog($"OnUserJoined uid: ${uid} elapsed: ${elapsed}");
			JoinChannelWithUserAccount.MakeVideoView(uid, _videoSample.GetChannelName());
		}

		public override void OnUserOffline(RtcConnection connection, uint uid, USER_OFFLINE_REASON_TYPE reason)
		{
			_videoSample.Log.UpdateLog($"OnUserOffLine uid: ${uid}, reason: ${(int)reason}");
			JoinChannelWithUserAccount.DestroyVideoView(uid);
		}
	}
}
namespace Agora_RTC_Plugin.API_Example.Examples.Advanced.JoinChannelVideoToken
{
	public class JoinChannelVideoToken : MonoBehaviour
	{
		[FormerlySerializedAs("appIdInput")]
		[SerializeField]
		private AppIdInput _appIdInput;

		[Header("_____________Basic Configuration_____________")]
		[FormerlySerializedAs("APP_ID")]
		[SerializeField]
		private string _appID = "";

		[FormerlySerializedAs("TOKEN")]
		[SerializeField]
		private string _token = "";

		[FormerlySerializedAs("CHANNEL_NAME")]
		[SerializeField]
		private string _channelName = "";

		public Text LogText;

		internal Agora.Util.Logger Log;

		internal IRtcEngine RtcEngine;

		internal static string _channelToken = "";

		internal static string _tokenBase = "http://localhost:8080";

		internal CONNECTION_STATE_TYPE _state = CONNECTION_STATE_TYPE.CONNECTION_STATE_DISCONNECTED;

		private void Start()
		{
			LoadAssetData();
			if (CheckAppId())
			{
				InitEngine();
				JoinChannel();
			}
		}

		internal void RenewOrJoinToken(string newToken)
		{
			_channelToken = newToken;
			if (_state == CONNECTION_STATE_TYPE.CONNECTION_STATE_DISCONNECTED || _state == CONNECTION_STATE_TYPE.CONNECTION_STATE_DISCONNECTED || _state == CONNECTION_STATE_TYPE.CONNECTION_STATE_FAILED)
			{
				JoinChannel();
			}
			else
			{
				UpdateToken();
			}
		}

		private void Update()
		{
			PermissionHelper.RequestMicrophontPermission();
			PermissionHelper.RequestCameraPermission();
		}

		private void UpdateToken()
		{
			RtcEngine.RenewToken(_channelToken);
		}

		private bool CheckAppId()
		{
			Log = new Agora.Util.Logger(LogText);
			return Log.DebugAssert(_appID.Length > 10, "Please fill in your appId in API-Example/profile/appIdInput.asset");
		}

		[ContextMenu("ShowAgoraBasicProfileData")]
		private void LoadAssetData()
		{
			if (!(_appIdInput == null))
			{
				_appID = _appIdInput.appID;
				_token = _appIdInput.token;
				_channelToken = _appIdInput.token;
				_channelName = _appIdInput.channelName;
			}
		}

		private void InitEngine()
		{
			RtcEngine = Agora.Rtc.RtcEngine.CreateAgoraRtcEngine();
			UserEventHandler engineEventHandler = new UserEventHandler(this);
			RtcEngineContext context = new RtcEngineContext(_appID, 0uL, CHANNEL_PROFILE_TYPE.CHANNEL_PROFILE_LIVE_BROADCASTING, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_DEFAULT);
			RtcEngine.Initialize(context);
			RtcEngine.InitEventHandler(engineEventHandler);
		}

		private void JoinChannel()
		{
			RtcEngine.SetClientRole(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			RtcEngine.EnableAudio();
			RtcEngine.EnableVideo();
			if (_channelToken.Length == 0)
			{
				StartCoroutine(HelperClass.FetchToken(_tokenBase, _channelName, 0, RenewOrJoinToken));
			}
			else
			{
				RtcEngine.JoinChannel(_channelToken, _channelName);
			}
		}

		private void OnDestroy()
		{
			UnityEngine.Debug.Log("OnDestroy");
			if (RtcEngine != null)
			{
				RtcEngine.InitEventHandler(null);
				RtcEngine.LeaveChannel();
				RtcEngine.Dispose();
			}
		}

		internal string GetChannelName()
		{
			return _channelName;
		}

		internal static void MakeVideoView(uint uid, string channelId = "")
		{
			if ((object)GameObject.Find(uid.ToString()) != null)
			{
				return;
			}
			VideoSurface videoSurface = MakeImageSurface(uid.ToString());
			if ((object)videoSurface != null)
			{
				if (uid == 0)
				{
					videoSurface.SetForUser(uid, channelId);
				}
				else
				{
					videoSurface.SetForUser(uid, channelId, VIDEO_SOURCE_TYPE.VIDEO_SOURCE_REMOTE);
				}
				videoSurface.OnTextureSizeModify += delegate(int width, int height)
				{
					float num = (float)height / (float)width;
					videoSurface.transform.localScale = new Vector3(-5f, 5f * num, 1f);
					UnityEngine.Debug.Log("OnTextureSizeModify: " + width + "  " + height);
				};
				videoSurface.SetEnable(enable: true);
			}
		}

		private static VideoSurface MakePlaneSurface(string goName)
		{
			GameObject gameObject = GameObject.CreatePrimitive(PrimitiveType.Plane);
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.transform.Rotate(-90f, 0f, 0f);
			gameObject.transform.position = Vector3.zero;
			gameObject.transform.localScale = new Vector3(0.25f, 0.5f, 0.5f);
			return gameObject.AddComponent<VideoSurface>();
		}

		private static VideoSurface MakeImageSurface(string goName)
		{
			GameObject gameObject = new GameObject();
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.AddComponent<RawImage>();
			gameObject.AddComponent<UIElementDrag>();
			GameObject gameObject2 = GameObject.Find("VideoCanvas");
			if (gameObject2 != null)
			{
				gameObject.transform.parent = gameObject2.transform;
				UnityEngine.Debug.Log("add video view");
			}
			else
			{
				UnityEngine.Debug.Log("Canvas is null video view");
			}
			gameObject.transform.Rotate(0f, 0f, 180f);
			gameObject.transform.localPosition = Vector3.zero;
			gameObject.transform.localScale = new Vector3(3f, 4f, 1f);
			return gameObject.AddComponent<VideoSurface>();
		}

		internal static void DestroyVideoView(uint uid)
		{
			GameObject gameObject = GameObject.Find(uid.ToString());
			if ((object)gameObject != null)
			{
				UnityEngine.Object.Destroy(gameObject);
			}
		}
	}
	internal class UserEventHandler : IRtcEngineEventHandler
	{
		private readonly JoinChannelVideoToken _helloVideoTokenAgora;

		internal UserEventHandler(JoinChannelVideoToken helloVideoTokenAgora)
		{
			_helloVideoTokenAgora = helloVideoTokenAgora;
		}

		public override void OnError(int err, string msg)
		{
			_helloVideoTokenAgora.Log.UpdateLog($"OnError err: {err}, msg: {msg}");
		}

		public override void OnJoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			int build = 0;
			_helloVideoTokenAgora.Log.UpdateLog($"sdk version: ${_helloVideoTokenAgora.RtcEngine.GetVersion(ref build)}");
			_helloVideoTokenAgora.Log.UpdateLog($"OnJoinChannelSuccess channelName: {connection.channelId}, uid: {connection.localUid}, elapsed: {elapsed}");
			_helloVideoTokenAgora.Log.UpdateLog($"New Token: {JoinChannelVideoToken._channelToken}");
			JoinChannelVideoToken.MakeVideoView(0u);
		}

		public override void OnRejoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			_helloVideoTokenAgora.Log.UpdateLog("OnRejoinChannelSuccess");
		}

		public override void OnLeaveChannel(RtcConnection connection, RtcStats stats)
		{
			_helloVideoTokenAgora.Log.UpdateLog("OnLeaveChannel");
			JoinChannelVideoToken.DestroyVideoView(0u);
		}

		public override void OnClientRoleChanged(RtcConnection connection, CLIENT_ROLE_TYPE oldRole, CLIENT_ROLE_TYPE newRole)
		{
			_helloVideoTokenAgora.Log.UpdateLog("OnClientRoleChanged");
		}

		public override void OnUserJoined(RtcConnection connection, uint uid, int elapsed)
		{
			_helloVideoTokenAgora.Log.UpdateLog($"OnUserJoined uid: ${uid} elapsed: ${elapsed}");
			JoinChannelVideoToken.MakeVideoView(uid, _helloVideoTokenAgora.GetChannelName());
		}

		public override void OnUserOffline(RtcConnection connection, uint uid, USER_OFFLINE_REASON_TYPE reason)
		{
			_helloVideoTokenAgora.Log.UpdateLog($"OnUserOffLine uid: ${uid}, reason: ${(int)reason}");
			JoinChannelVideoToken.DestroyVideoView(uid);
		}

		public override void OnTokenPrivilegeWillExpire(RtcConnection connection, string token)
		{
			_helloVideoTokenAgora.StartCoroutine(HelperClass.FetchToken(JoinChannelVideoToken._tokenBase, _helloVideoTokenAgora.GetChannelName(), 0, _helloVideoTokenAgora.RenewOrJoinToken));
		}

		public override void OnConnectionStateChanged(RtcConnection connection, CONNECTION_STATE_TYPE state, CONNECTION_CHANGED_REASON_TYPE reason)
		{
			_helloVideoTokenAgora._state = state;
		}

		public override void OnConnectionLost(RtcConnection connection)
		{
			_helloVideoTokenAgora.Log.UpdateLog($"OnConnectionLost ");
		}
	}
}
namespace Agora_RTC_Plugin.API_Example.Examples.Advanced.DualCamera
{
	public class DualCamera : MonoBehaviour
	{
		[FormerlySerializedAs("appIdInput")]
		[SerializeField]
		private AppIdInput _appIdInput;

		[Header("_____________Basic Configuration_____________")]
		[FormerlySerializedAs("APP_ID")]
		[SerializeField]
		private string _appID = "";

		[FormerlySerializedAs("TOKEN")]
		[SerializeField]
		private string _token = "";

		[FormerlySerializedAs("CHANNEL_NAME")]
		[SerializeField]
		private string _channelName = "";

		public Text LogText;

		internal Agora.Util.Logger Log;

		internal IRtcEngineEx RtcEngine;

		internal bool IsChannelJoined;

		private IVideoDeviceManager _videoDeviceManager;

		private DeviceInfo[] _videoDeviceInfos;

		private CameraCapturerConfiguration _config1;

		private CameraCapturerConfiguration _config2;

		public uint UID1 = 123u;

		public uint UID2 = 456u;

		private void Start()
		{
			LogText.text = "iOS/Android is not supported, but you could see how it works on the Editor for Windows/MacOS";
		}

		private void Update()
		{
			PermissionHelper.RequestMicrophontPermission();
			PermissionHelper.RequestCameraPermission();
		}

		private bool CheckAppId()
		{
			Log = new Agora.Util.Logger(LogText);
			return Log.DebugAssert(_appID.Length > 10, "Please fill in your appId in API-Example/profile/appIdInput.asset");
		}

		[ContextMenu("ShowAgoraBasicProfileData")]
		private void LoadAssetData()
		{
			if (!(_appIdInput == null))
			{
				_appID = _appIdInput.appID;
				_token = _appIdInput.token;
				_channelName = _appIdInput.channelName;
			}
		}

		private void InitEngine()
		{
			RtcEngine = Agora.Rtc.RtcEngine.CreateAgoraRtcEngineEx();
			UserEventHandler engineEventHandler = new UserEventHandler(this);
			RtcEngineContext context = new RtcEngineContext(_appID, 0uL, CHANNEL_PROFILE_TYPE.CHANNEL_PROFILE_LIVE_BROADCASTING, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_DEFAULT);
			RtcEngine.Initialize(context);
			RtcEngine.InitEventHandler(engineEventHandler);
		}

		public void MainCameraJoinChannel()
		{
			RtcEngine.StartPreview();
			RtcEngine.EnableAudio();
			RtcEngine.EnableVideo();
			RtcEngine.SetClientRole(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			int num = RtcEngine.StartPrimaryCameraCapture(_config1);
			Log.UpdateLog($"StartPrimaryCameraCapture returns: {num}");
			ChannelMediaOptions channelMediaOptions = new ChannelMediaOptions();
			channelMediaOptions.publishCameraTrack.SetValue(val: true);
			channelMediaOptions.autoSubscribeAudio.SetValue(val: true);
			channelMediaOptions.autoSubscribeVideo.SetValue(val: true);
			channelMediaOptions.publishScreenTrack.SetValue(val: false);
			channelMediaOptions.enableAudioRecordingOrPlayout.SetValue(val: true);
			channelMediaOptions.clientRoleType.SetValue(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			UnityEngine.Debug.Log("MainCameraJoinChannel returns: " + RtcEngine.JoinChannel(_token, _channelName, UID1, channelMediaOptions));
		}

		public void MainCameraLeaveChannel()
		{
			RtcEngine.StopPrimaryCameraCapture();
			UnityEngine.Debug.Log("MainCameraLeaveChannel returns: " + RtcEngine.LeaveChannel());
		}

		public void SecondCameraJoinChannel()
		{
			int num = RtcEngine.StartSecondaryCameraCapture(_config2);
			Log.UpdateLog($"StartSecondaryCameraCapture returns: {num}");
			ChannelMediaOptions channelMediaOptions = new ChannelMediaOptions();
			channelMediaOptions.autoSubscribeAudio.SetValue(val: false);
			channelMediaOptions.autoSubscribeVideo.SetValue(val: false);
			channelMediaOptions.publishCustomAudioTrack.SetValue(val: false);
			channelMediaOptions.publishCameraTrack.SetValue(val: false);
			channelMediaOptions.publishSecondaryCameraTrack.SetValue(val: true);
			channelMediaOptions.enableAudioRecordingOrPlayout.SetValue(val: false);
			channelMediaOptions.clientRoleType.SetValue(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			UnityEngine.Debug.Log("JoinChannelEx returns: " + RtcEngine.JoinChannelEx(_token, new RtcConnection(_channelName, UID2), channelMediaOptions));
		}

		public void SecondCameraLeaveChannel()
		{
			RtcEngine.StopSecondaryCameraCapture();
			UnityEngine.Debug.Log("SecondCameraLeaveChannel returns: " + RtcEngine.LeaveChannelEx(new RtcConnection(_channelName, 456u)));
		}

		private void GetVideoDeviceManager()
		{
			_videoDeviceManager = RtcEngine.GetVideoDeviceManager();
			_videoDeviceInfos = _videoDeviceManager.EnumerateVideoDevices();
			Log.UpdateLog($"VideoDeviceManager count: {_videoDeviceInfos.Length}");
			for (int i = 0; i < _videoDeviceInfos.Length; i++)
			{
				Log.UpdateLog($"VideoDeviceManager device index: {i}, name: {_videoDeviceInfos[i].deviceName}, id: {_videoDeviceInfos[i].deviceId}");
			}
			_config1 = new CameraCapturerConfiguration();
			_config1.deviceId = _videoDeviceInfos[0].deviceId;
			UnityEngine.Debug.Log("PrimaryCamera: " + _config1.deviceId);
			_config1.format = new VideoFormat();
			if (_videoDeviceInfos.Length > 1)
			{
				_config2 = new CameraCapturerConfiguration();
				_config2.deviceId = _videoDeviceInfos[1].deviceId;
				UnityEngine.Debug.Log("SecondaryCamera: " + _config2.deviceId);
				_config2.format = new VideoFormat();
			}
		}

		private void OnDestroy()
		{
			UnityEngine.Debug.Log("OnDestroy");
			if (RtcEngine != null)
			{
				RtcEngine.InitEventHandler(null);
				RtcEngine.StopSecondaryCameraCapture();
				RtcEngine.StopPrimaryCameraCapture();
				RtcEngine.LeaveChannelEx(new RtcConnection(_channelName, 456u));
				RtcEngine.LeaveChannel();
				RtcEngine.Dispose();
			}
		}

		internal string GetChannelName()
		{
			return _channelName;
		}

		internal static void MakeVideoView(uint uid, string channelId = "", VIDEO_SOURCE_TYPE videoSourceType = VIDEO_SOURCE_TYPE.VIDEO_SOURCE_CAMERA_PRIMARY)
		{
			if ((object)GameObject.Find(uid.ToString()) != null)
			{
				return;
			}
			VideoSurface videoSurface = null;
			switch (videoSourceType)
			{
			case VIDEO_SOURCE_TYPE.VIDEO_SOURCE_CAMERA_PRIMARY:
				videoSurface = MakeImageSurface("MainCameraView");
				break;
			case VIDEO_SOURCE_TYPE.VIDEO_SOURCE_CAMERA_SECONDARY:
				videoSurface = MakeImageSurface("SecondCameraView");
				break;
			default:
				videoSurface = MakeImageSurface(uid.ToString());
				break;
			}
			if ((object)videoSurface != null)
			{
				videoSurface.SetForUser(uid, channelId, videoSourceType);
				videoSurface.OnTextureSizeModify += delegate(int width, int height)
				{
					float num = (float)height / (float)width;
					videoSurface.transform.localScale = new Vector3(-5f, 5f * num, 1f);
					UnityEngine.Debug.Log("OnTextureSizeModify: " + width + "  " + height);
				};
				videoSurface.SetEnable(enable: true);
			}
		}

		private static VideoSurface MakePlaneSurface(string goName)
		{
			GameObject gameObject = GameObject.Find(goName);
			if ((object)gameObject != null)
			{
				return null;
			}
			gameObject = GameObject.CreatePrimitive(PrimitiveType.Plane);
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.transform.Rotate(-90f, 0f, 0f);
			gameObject.transform.position = Vector3.zero;
			gameObject.transform.localScale = new Vector3(0.25f, 0.5f, 0.5f);
			return gameObject.AddComponent<VideoSurface>();
		}

		private static VideoSurface MakeImageSurface(string goName)
		{
			GameObject gameObject = new GameObject();
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.AddComponent<RawImage>();
			gameObject.AddComponent<UIElementDrag>();
			GameObject gameObject2 = GameObject.Find("VideoCanvas");
			if (gameObject2 != null)
			{
				gameObject.transform.parent = gameObject2.transform;
				UnityEngine.Debug.Log("add video view");
			}
			else
			{
				UnityEngine.Debug.Log("Canvas is null video view");
			}
			gameObject.transform.Rotate(0f, 0f, 180f);
			gameObject.transform.localPosition = Vector3.zero;
			gameObject.transform.localScale = new Vector3(2f, 3f, 1f);
			return gameObject.AddComponent<VideoSurface>();
		}

		internal static void DestroyVideoView(string name)
		{
			GameObject gameObject = GameObject.Find(name);
			if ((object)gameObject != null)
			{
				UnityEngine.Object.Destroy(gameObject);
			}
		}
	}
	internal class UserEventHandler : IRtcEngineEventHandler
	{
		private readonly DualCamera _videoSample;

		internal UserEventHandler(DualCamera videoSample)
		{
			_videoSample = videoSample;
		}

		public override void OnError(int err, string msg)
		{
			_videoSample.Log.UpdateLog($"OnError err: {err}, msg: {msg}");
		}

		public override void OnJoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			int build = 0;
			_videoSample.IsChannelJoined = true;
			_videoSample.Log.UpdateLog($"sdk version: ${_videoSample.RtcEngine.GetVersion(ref build)}");
			_videoSample.Log.UpdateLog($"OnJoinChannelSuccess channelName: {connection.channelId}, uid: {connection.localUid}, elapsed: {elapsed}");
			if (connection.localUid == _videoSample.UID1)
			{
				DualCamera.MakeVideoView(0u);
			}
			if (connection.localUid == _videoSample.UID2)
			{
				DualCamera.MakeVideoView(0u, "", VIDEO_SOURCE_TYPE.VIDEO_SOURCE_CAMERA_SECONDARY);
			}
		}

		public override void OnRejoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			_videoSample.Log.UpdateLog("OnRejoinChannelSuccess");
		}

		public override void OnLeaveChannel(RtcConnection connection, RtcStats stats)
		{
			_videoSample.IsChannelJoined = false;
			_videoSample.Log.UpdateLog("OnLeaveChannel");
			if (connection.localUid == _videoSample.UID1)
			{
				DualCamera.DestroyVideoView("MainCameraView");
			}
			if (connection.localUid == _videoSample.UID2)
			{
				DualCamera.DestroyVideoView("SecondCameraView");
			}
		}

		public override void OnClientRoleChanged(RtcConnection connection, CLIENT_ROLE_TYPE oldRole, CLIENT_ROLE_TYPE newRole)
		{
			_videoSample.Log.UpdateLog("OnClientRoleChanged");
		}

		public override void OnUserJoined(RtcConnection connection, uint uid, int elapsed)
		{
			_videoSample.Log.UpdateLog($"OnUserJoined uid: ${uid} elapsed: ${elapsed}");
			if (uid != _videoSample.UID1 && uid != _videoSample.UID2)
			{
				DualCamera.MakeVideoView(uid, _videoSample.GetChannelName());
			}
		}

		public override void OnUserOffline(RtcConnection connection, uint uid, USER_OFFLINE_REASON_TYPE reason)
		{
			_videoSample.Log.UpdateLog($"OnUserOffLine uid: ${uid}, reason: ${(int)reason}");
			if (uid != _videoSample.UID1 && uid != _videoSample.UID2)
			{
				DualCamera.DestroyVideoView(uid.ToString());
			}
		}
	}
}
namespace Agora_RTC_Plugin.API_Example.Examples.Advanced.DeviceManager
{
	public class DeviceManager : MonoBehaviour
	{
		[FormerlySerializedAs("appIdInput")]
		[SerializeField]
		private AppIdInput _appIdInput;

		[Header("_____________Basic Configuration_____________")]
		[FormerlySerializedAs("APP_ID")]
		[SerializeField]
		private string _appID = "";

		[FormerlySerializedAs("TOKEN")]
		[SerializeField]
		private string _token = "";

		[FormerlySerializedAs("CHANNEL_NAME")]
		[SerializeField]
		private string _channelName = "";

		public Text LogText;

		internal Agora.Util.Logger Log;

		internal IRtcEngine RtcEngine;

		private IAudioDeviceManager _audioDeviceManager;

		private IVideoDeviceManager _videoDeviceManager;

		private DeviceInfo[] _audioRecordingDeviceInfos;

		private DeviceInfo[] _audioPlaybackDeviceInfos;

		private DeviceInfo[] _videoDeviceInfos;

		private const int DEVICE_INDEX = 0;

		private void Start()
		{
			LogText.text = "iOS/Android is not supported, but you could see how it works on the Editor for Windows/MacOS";
		}

		private void Update()
		{
			PermissionHelper.RequestMicrophontPermission();
		}

		private bool CheckAppId()
		{
			Log = new Agora.Util.Logger(LogText);
			return Log.DebugAssert(_appID.Length > 10, "Please fill in your appId in API-Example/profile/appIdInput.asset");
		}

		[ContextMenu("ShowAgoraBasicProfileData")]
		private void LoadAssetData()
		{
			if (!(_appIdInput == null))
			{
				_appID = _appIdInput.appID;
				_token = _appIdInput.token;
				_channelName = _appIdInput.channelName;
			}
		}

		private void InitRtcEngine()
		{
			RtcEngine = Agora.Rtc.RtcEngine.CreateAgoraRtcEngine();
			UserEventHandler engineEventHandler = new UserEventHandler(this);
			RtcEngineContext context = new RtcEngineContext(_appID, 0uL, CHANNEL_PROFILE_TYPE.CHANNEL_PROFILE_LIVE_BROADCASTING, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_DEFAULT);
			RtcEngine.Initialize(context);
			RtcEngine.InitEventHandler(engineEventHandler);
		}

		private void CallDeviceManagerApi()
		{
			GetAudioRecordingDevice();
			GetAudioPlaybackDevice();
			GetVideoDeviceManager();
			SetCurrentDevice();
			SetCurrentDeviceVolume();
		}

		private void GetAudioRecordingDevice()
		{
			_audioDeviceManager = RtcEngine.GetAudioDeviceManager();
			_audioRecordingDeviceInfos = _audioDeviceManager.EnumerateRecordingDevices();
			Log.UpdateLog($"AudioRecordingDevice count: {_audioRecordingDeviceInfos.Length}");
			for (int i = 0; i < _audioRecordingDeviceInfos.Length; i++)
			{
				Log.UpdateLog($"AudioRecordingDevice device index: {i}, name: {_audioRecordingDeviceInfos[i].deviceName}, id: {_audioRecordingDeviceInfos[i].deviceId}");
			}
		}

		private void GetAudioPlaybackDevice()
		{
			_audioDeviceManager = RtcEngine.GetAudioDeviceManager();
			_audioPlaybackDeviceInfos = _audioDeviceManager.EnumeratePlaybackDevices();
			Log.UpdateLog($"AudioPlaybackDevice count: {_audioPlaybackDeviceInfos.Length}");
			for (int i = 0; i < _audioPlaybackDeviceInfos.Length; i++)
			{
				Log.UpdateLog($"AudioPlaybackDevice device index: {i}, name: {_audioPlaybackDeviceInfos[i].deviceName}, id: {_audioPlaybackDeviceInfos[i].deviceId}");
			}
		}

		private void GetVideoDeviceManager()
		{
			_videoDeviceManager = RtcEngine.GetVideoDeviceManager();
			_videoDeviceInfos = _videoDeviceManager.EnumerateVideoDevices();
			Log.UpdateLog($"VideoDeviceManager count: {_videoDeviceInfos.Length}");
			for (int i = 0; i < _videoDeviceInfos.Length; i++)
			{
				Log.UpdateLog($"VideoDeviceManager device index: {i}, name: {_videoDeviceInfos[i].deviceName}, id: {_videoDeviceInfos[i].deviceId}");
			}
		}

		private void SetCurrentDevice()
		{
			if (_audioDeviceManager != null && _audioRecordingDeviceInfos.Length != 0)
			{
				_audioDeviceManager.SetRecordingDevice(_audioRecordingDeviceInfos[0].deviceId);
			}
			if (_audioDeviceManager != null && _audioPlaybackDeviceInfos.Length != 0)
			{
				_audioDeviceManager.SetPlaybackDevice(_audioPlaybackDeviceInfos[0].deviceId);
			}
			if (_videoDeviceManager != null && _videoDeviceInfos.Length != 0)
			{
				UnityEngine.Debug.Log("SetDevice returns: " + _videoDeviceManager.SetDevice(_videoDeviceInfos[0].deviceId));
			}
		}

		private void SetCurrentDeviceVolume()
		{
			if (_audioDeviceManager != null)
			{
				_audioDeviceManager.SetRecordingDeviceVolume(100);
			}
			if (_audioDeviceManager != null)
			{
				_audioDeviceManager.SetPlaybackDeviceVolume(100);
			}
		}

		private void OnDestroy()
		{
			UnityEngine.Debug.Log("OnDestroy");
			if (RtcEngine != null)
			{
				RtcEngine.InitEventHandler(null);
				RtcEngine.LeaveChannel();
				RtcEngine.Dispose();
			}
		}
	}
	internal class UserEventHandler : IRtcEngineEventHandler
	{
		private readonly DeviceManager _deviceManagerSample;

		internal UserEventHandler(DeviceManager deviceManagerSample)
		{
			_deviceManagerSample = deviceManagerSample;
		}

		public override void OnError(int err, string msg)
		{
			_deviceManagerSample.Log.UpdateLog($"OnError err: {err}, msg: {msg}");
		}

		public override void OnJoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			int build = 0;
			_deviceManagerSample.Log.UpdateLog($"sdk version: ${_deviceManagerSample.RtcEngine.GetVersion(ref build)}");
			_deviceManagerSample.Log.UpdateLog($"OnJoinChannelSuccess channelName: {connection.channelId}, uid: {connection.localUid}, elapsed: {elapsed}");
		}

		public override void OnRejoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			_deviceManagerSample.Log.UpdateLog("OnRejoinChannelSuccess");
		}

		public override void OnLeaveChannel(RtcConnection connection, RtcStats stats)
		{
			_deviceManagerSample.Log.UpdateLog("OnLeaveChannel");
		}

		public override void OnClientRoleChanged(RtcConnection connection, CLIENT_ROLE_TYPE oldRole, CLIENT_ROLE_TYPE newRole)
		{
			_deviceManagerSample.Log.UpdateLog("OnClientRoleChanged");
		}

		public override void OnUserJoined(RtcConnection connection, uint uid, int elapsed)
		{
			_deviceManagerSample.Log.UpdateLog($"OnUserJoined uid: ${uid} elapsed: ${elapsed}");
		}

		public override void OnUserOffline(RtcConnection connection, uint uid, USER_OFFLINE_REASON_TYPE reason)
		{
			_deviceManagerSample.Log.UpdateLog($"OnUserOffLine uid: ${uid}, reason: ${(int)reason}");
		}
	}
}
namespace Agora_RTC_Plugin.API_Example.Examples.Advanced.CustomRenderAudio
{
	public class CustomRenderAudio : MonoBehaviour
	{
		[FormerlySerializedAs("appIdInput")]
		[SerializeField]
		private AppIdInput _appIdInput;

		[Header("_____________Basic Configuration_____________")]
		[FormerlySerializedAs("APP_ID")]
		[SerializeField]
		private string _appID = "";

		[FormerlySerializedAs("TOKEN")]
		[SerializeField]
		private string _token = "";

		[FormerlySerializedAs("CHANNEL_NAME")]
		[SerializeField]
		private string _channelName = "";

		public Text LogText;

		internal Agora.Util.Logger Log;

		internal IRtcEngine RtcEngine;

		private const int CHANNEL = 1;

		private const int SAMPLE_RATE = 44100;

		private const int PULL_FREQ_PER_SEC = 100;

		private RingBuffer<float> _audioBuffer;

		private AudioClip _audioClip;

		private Thread _pullAudioFrameThread;

		private object _pullAudioFrameThreadSignal = new object();

		private int _writeCount;

		private int _readCount;

		private void Start()
		{
			LoadAssetData();
			if (CheckAppId())
			{
				InitRtcEngine();
				JoinChannel();
				AudioSource aud = InitAudioSource();
				StartPullAudioFrame(aud, "externalClip");
			}
		}

		private void Update()
		{
			PermissionHelper.RequestMicrophontPermission();
		}

		private bool CheckAppId()
		{
			Log = new Agora.Util.Logger(LogText);
			return Log.DebugAssert(_appID.Length > 10, "Please fill in your appId in API-Example/profile/appIdInput.asset");
		}

		[ContextMenu("ShowAgoraBasicProfileData")]
		private void LoadAssetData()
		{
			if (!(_appIdInput == null))
			{
				_appID = _appIdInput.appID;
				_token = _appIdInput.token;
				_channelName = _appIdInput.channelName;
			}
		}

		private void InitRtcEngine()
		{
			RtcEngine = Agora.Rtc.RtcEngine.CreateAgoraRtcEngine();
			UserEventHandler engineEventHandler = new UserEventHandler(this);
			RtcEngineContext context = new RtcEngineContext(_appID, 0uL, CHANNEL_PROFILE_TYPE.CHANNEL_PROFILE_LIVE_BROADCASTING, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_DEFAULT);
			RtcEngine.Initialize(context);
			RtcEngine.InitEventHandler(engineEventHandler);
		}

		private void JoinChannel()
		{
			RtcEngine.EnableAudio();
			int num = RtcEngine.SetExternalAudioSink(enabled: true, 44100, 1);
			Log.UpdateLog("SetExternalAudioSink ret:" + num);
			RtcEngine.JoinChannel(_token, _channelName);
		}

		private AudioSource InitAudioSource()
		{
			AudioSource audioSource = GetComponent<AudioSource>();
			if (audioSource == null)
			{
				audioSource = base.gameObject.AddComponent<AudioSource>();
			}
			return audioSource;
		}

		private void StartPullAudioFrame(AudioSource aud, string clipName)
		{
			int capacity = 44100;
			_audioBuffer = new RingBuffer<float>(capacity, overflow: true);
			_pullAudioFrameThread = new Thread(PullAudioFrameThread);
			_pullAudioFrameThread.Start();
			_audioClip = AudioClip.Create(clipName, 441, 1, 44100, stream: true, OnAudioRead);
			aud.clip = _audioClip;
			aud.loop = true;
			aud.Play();
		}

		private void OnDestroy()
		{
			UnityEngine.Debug.Log("OnDestroy");
			lock (_pullAudioFrameThreadSignal)
			{
				if (RtcEngine != null)
				{
					RtcEngine.InitEventHandler(null);
					RtcEngine.LeaveChannel();
					RtcEngine.Dispose();
					RtcEngine = null;
				}
			}
		}

		private void PullAudioFrameThread()
		{
			int avsync_type = 0;
			int num = 2;
			int num2 = 1;
			int num3 = 441;
			int samplesPerSec = 44100;
			byte[] buffer = new byte[num3 * num];
			int num4 = 10;
			TimeSpan ts = new TimeSpan(DateTime.Now.Ticks);
			AudioFrame audioFrame = new AudioFrame(AUDIO_FRAME_TYPE.FRAME_TYPE_PCM16, num3, BYTES_PER_SAMPLE.TWO_BYTES_PER_SAMPLE, num2, samplesPerSec, buffer, 0L, avsync_type);
			IntPtr intPtr = Marshal.AllocHGlobal(num3 * num * num2);
			audioFrame.buffer = (ulong)(long)intPtr;
			audioFrame.bufferPtr = intPtr;
			while (true)
			{
				lock (_pullAudioFrameThreadSignal)
				{
					if (RtcEngine == null)
					{
						break;
					}
					TimeSpan timeSpan = new TimeSpan(DateTime.Now.Ticks);
					if (timeSpan.Subtract(ts).Duration().Milliseconds >= num4)
					{
						ts = new TimeSpan(DateTime.Now.Ticks);
						int num5 = RtcEngine.PullAudioFrame(audioFrame);
						UnityEngine.Debug.Log("PullAudioFrame returns: " + num5);
						if (num5 == 0)
						{
							Marshal.Copy((IntPtr)(long)audioFrame.buffer, audioFrame.RawBuffer, 0, audioFrame.RawBuffer.Length);
							float[] array = ConvertByteToFloat16(audioFrame.RawBuffer);
							lock (_audioBuffer)
							{
								_audioBuffer.Put(array);
							}
							_writeCount += array.Length;
						}
					}
					goto IL_017f;
				}
				IL_017f:
				Thread.Sleep(1);
			}
			Marshal.FreeHGlobal(intPtr);
		}

		private static float[] ConvertByteToFloat16(byte[] byteArray)
		{
			float[] array = new float[byteArray.Length / 2];
			for (int i = 0; i < array.Length; i++)
			{
				array[i] = (float)BitConverter.ToInt16(byteArray, i * 2) / 32768f;
			}
			return array;
		}

		private void OnAudioRead(float[] data)
		{
			for (int i = 0; i < data.Length; i++)
			{
				lock (_audioBuffer)
				{
					if (_audioBuffer.Count > 0)
					{
						data[i] = _audioBuffer.Get();
						continue;
					}
				}
				break;
			}
			UnityEngine.Debug.LogFormat("buffer length remains: {0}", _writeCount - _readCount);
		}
	}
	internal class UserEventHandler : IRtcEngineEventHandler
	{
		private readonly CustomRenderAudio _customAudioSinkSample;

		internal UserEventHandler(CustomRenderAudio customAudioSinkSample)
		{
			_customAudioSinkSample = customAudioSinkSample;
		}

		public override void OnJoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			int build = 0;
			_customAudioSinkSample.Log.UpdateLog($"sdk version: {_customAudioSinkSample.RtcEngine.GetVersion(ref build)}");
			_customAudioSinkSample.Log.UpdateLog($"onJoinChannelSuccess channelName: {connection.channelId}, uid: {connection.localUid}, elapsed: {elapsed}");
		}

		public override void OnLeaveChannel(RtcConnection connection, RtcStats stats)
		{
			_customAudioSinkSample.Log.UpdateLog("OnLeaveChannelSuccess");
		}

		public override void OnError(int error, string msg)
		{
			_customAudioSinkSample.Log.UpdateLog($"OnSDKError error: {error}, msg: {msg}");
		}

		public override void OnConnectionLost(RtcConnection connection)
		{
			_customAudioSinkSample.Log.UpdateLog($"OnConnectionLost ");
		}
	}
}
namespace Agora_RTC_Plugin.API_Example.Examples.Advanced.CustomCaptureVideo
{
	public class CustomCaptureVideo : MonoBehaviour
	{
		[FormerlySerializedAs("appIdInput")]
		[SerializeField]
		private AppIdInput _appIdInput;

		[Header("_____________Basic Configuration_____________")]
		[FormerlySerializedAs("APP_ID")]
		[SerializeField]
		private string _appID = "";

		[FormerlySerializedAs("TOKEN")]
		[SerializeField]
		private string _token = "";

		[FormerlySerializedAs("CHANNEL_NAME")]
		[SerializeField]
		private string _channelName = "";

		public Text LogText;

		internal Agora.Util.Logger Log;

		internal IRtcEngine RtcEngine;

		private Texture2D _texture;

		private Rect _rect;

		private int i;

		private WebCamTexture _webCameraTexture;

		public RawImage RawImage;

		public Vector2 CameraSize = new Vector2(640f, 480f);

		public int CameraFPS = 15;

		private byte[] _shareData;

		private void Start()
		{
			LoadAssetData();
			if (CheckAppId())
			{
				InitCameraDevice();
				InitTexture();
				InitEngine();
				SetExternalVideoSource();
				JoinChannel();
			}
		}

		private void Update()
		{
			PermissionHelper.RequestMicrophontPermission();
			StartCoroutine(ShareScreen());
		}

		[ContextMenu("ShowAgoraBasicProfileData")]
		private void LoadAssetData()
		{
			if (!(_appIdInput == null))
			{
				_appID = _appIdInput.appID;
				_token = _appIdInput.token;
				_channelName = _appIdInput.channelName;
			}
		}

		private IEnumerator ShareScreen()
		{
			yield return new WaitForEndOfFrame();
			IRtcEngine instance = Agora.Rtc.RtcEngine.Instance;
			if (instance != null)
			{
				_texture.ReadPixels(_rect, 0, 0);
				_texture.Apply();
				NativeArray<byte> rawTextureData = _texture.GetRawTextureData<byte>();
				if (_shareData?.Length != rawTextureData.Length)
				{
					_shareData = new byte[rawTextureData.Length];
				}
				rawTextureData.CopyTo(_shareData);
				ExternalVideoFrame externalVideoFrame = new ExternalVideoFrame();
				externalVideoFrame.type = VIDEO_BUFFER_TYPE.VIDEO_BUFFER_RAW_DATA;
				externalVideoFrame.format = VIDEO_PIXEL_FORMAT.VIDEO_PIXEL_RGBA;
				externalVideoFrame.buffer = _shareData;
				externalVideoFrame.stride = (int)_rect.width;
				externalVideoFrame.height = (int)_rect.height;
				externalVideoFrame.cropLeft = 10;
				externalVideoFrame.cropTop = 10;
				externalVideoFrame.cropRight = 10;
				externalVideoFrame.cropBottom = 10;
				externalVideoFrame.rotation = 180;
				externalVideoFrame.timestamp = DateTime.Now.Ticks / 10000;
				UnityEngine.Debug.Log("PushVideoFrame ret = " + instance.PushVideoFrame(externalVideoFrame) + "time: " + DateTime.Now.Millisecond);
			}
		}

		private void InitEngine()
		{
			RtcEngine = Agora.Rtc.RtcEngine.CreateAgoraRtcEngine();
			UserEventHandler engineEventHandler = new UserEventHandler(this);
			RtcEngineContext context = new RtcEngineContext(_appID, 0uL, CHANNEL_PROFILE_TYPE.CHANNEL_PROFILE_LIVE_BROADCASTING, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_DEFAULT);
			RtcEngine.Initialize(context);
			RtcEngine.InitEventHandler(engineEventHandler);
		}

		private void SetExternalVideoSource()
		{
			int num = RtcEngine.SetExternalVideoSource(enabled: true, useTexture: false, EXTERNAL_VIDEO_SOURCE_TYPE.VIDEO_FRAME, new SenderOptions());
			Log.UpdateLog("SetExternalVideoSource returns:" + num);
		}

		private void JoinChannel()
		{
			RtcEngine.EnableAudio();
			RtcEngine.EnableVideo();
			RtcEngine.SetClientRole(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			RtcEngine.JoinChannel(_token, _channelName);
		}

		private bool CheckAppId()
		{
			Log = new Agora.Util.Logger(LogText);
			return Log.DebugAssert(_appID.Length > 10, "Please fill in your appId in Canvas!!!!");
		}

		private void InitTexture()
		{
			_rect = new Rect(0f, 0f, Screen.width, Screen.height);
			_texture = new Texture2D((int)_rect.width, (int)_rect.height, TextureFormat.RGBA32, mipChain: false);
		}

		private void InitCameraDevice()
		{
			WebCamDevice[] devices = WebCamTexture.devices;
			_webCameraTexture = new WebCamTexture(devices[0].name, (int)CameraSize.x, (int)CameraSize.y, CameraFPS);
			RawImage.texture = _webCameraTexture;
			_webCameraTexture.Play();
		}

		private void OnDestroy()
		{
			UnityEngine.Debug.Log("OnDestroy");
			if ((bool)_webCameraTexture)
			{
				_webCameraTexture.Stop();
			}
			if (RtcEngine != null)
			{
				RtcEngine.InitEventHandler(null);
				RtcEngine.LeaveChannel();
				RtcEngine.Dispose();
			}
		}

		internal string GetChannelName()
		{
			return _channelName;
		}

		internal static void MakeVideoView(uint uid, string channelId = "")
		{
			if ((object)GameObject.Find(uid.ToString()) != null)
			{
				return;
			}
			VideoSurface videoSurface = makeImageSurface(uid.ToString());
			if ((object)videoSurface != null)
			{
				if (uid == 0)
				{
					videoSurface.SetForUser(uid, channelId);
				}
				else
				{
					videoSurface.SetForUser(uid, channelId, VIDEO_SOURCE_TYPE.VIDEO_SOURCE_REMOTE);
				}
				videoSurface.OnTextureSizeModify += delegate(int width, int height)
				{
					float num = (float)height / (float)width;
					videoSurface.transform.localScale = new Vector3(-5f, 5f * num, 1f);
					UnityEngine.Debug.Log("OnTextureSizeModify: " + width + "  " + height);
				};
				videoSurface.SetEnable(enable: true);
			}
		}

		private static VideoSurface MakePlaneSurface(string goName)
		{
			GameObject gameObject = GameObject.CreatePrimitive(PrimitiveType.Plane);
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.transform.Rotate(-90f, 0f, 0f);
			gameObject.transform.position = Vector3.zero;
			gameObject.transform.localScale = new Vector3(0.25f, 0.5f, 0.5f);
			return gameObject.AddComponent<VideoSurface>();
		}

		private static VideoSurface makeImageSurface(string goName)
		{
			GameObject gameObject = new GameObject();
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.AddComponent<RawImage>();
			gameObject.AddComponent<UIElementDrag>();
			GameObject gameObject2 = GameObject.Find("VideoCanvas");
			if (gameObject2 != null)
			{
				gameObject.transform.parent = gameObject2.transform;
				UnityEngine.Debug.Log("add video view");
			}
			else
			{
				UnityEngine.Debug.Log("Canvas is null video view");
			}
			gameObject.transform.Rotate(0f, 0f, 180f);
			gameObject.transform.localPosition = Vector3.zero;
			gameObject.transform.localScale = new Vector3(3f, 4f, 1f);
			return gameObject.AddComponent<VideoSurface>();
		}

		internal static void DestroyVideoView(uint uid)
		{
			GameObject gameObject = GameObject.Find(uid.ToString());
			if ((object)gameObject != null)
			{
				UnityEngine.Object.Destroy(gameObject);
			}
		}
	}
	internal class UserEventHandler : IRtcEngineEventHandler
	{
		private readonly CustomCaptureVideo _customCaptureVideo;

		internal UserEventHandler(CustomCaptureVideo customCaptureVideo)
		{
			_customCaptureVideo = customCaptureVideo;
		}

		public override void OnError(int err, string msg)
		{
			_customCaptureVideo.Log.UpdateLog($"OnError err: {err}, msg: {msg}");
		}

		public override void OnJoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			int build = 0;
			_customCaptureVideo.Log.UpdateLog($"sdk version: ${_customCaptureVideo.RtcEngine.GetVersion(ref build)}");
			_customCaptureVideo.Log.UpdateLog($"OnJoinChannelSuccess channelName: {connection.channelId}, uid: {connection.localUid}, elapsed: {elapsed}");
		}

		public override void OnRejoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			_customCaptureVideo.Log.UpdateLog("OnRejoinChannelSuccess");
		}

		public override void OnLeaveChannel(RtcConnection connection, RtcStats stats)
		{
			_customCaptureVideo.Log.UpdateLog("OnLeaveChannel");
		}

		public override void OnClientRoleChanged(RtcConnection connection, CLIENT_ROLE_TYPE oldRole, CLIENT_ROLE_TYPE newRole)
		{
			_customCaptureVideo.Log.UpdateLog("OnClientRoleChanged");
		}

		public override void OnUserJoined(RtcConnection connection, uint uid, int elapsed)
		{
			_customCaptureVideo.Log.UpdateLog($"OnUserJoined uid: ${uid} elapsed: ${elapsed}");
			CustomCaptureVideo.MakeVideoView(uid, _customCaptureVideo.GetChannelName());
		}

		public override void OnUserOffline(RtcConnection connection, uint uid, USER_OFFLINE_REASON_TYPE reason)
		{
			_customCaptureVideo.Log.UpdateLog($"OnUserOffLine uid: ${uid}, reason: ${(int)reason}");
			CustomCaptureVideo.DestroyVideoView(uid);
		}
	}
}
namespace Agora_RTC_Plugin.API_Example.Examples.Advanced.CustomCaptureAudio
{
	public class CustomCaptureAudio : MonoBehaviour
	{
		[FormerlySerializedAs("appIdInput")]
		[SerializeField]
		private AppIdInput _appIdInput;

		[Header("_____________Basic Configuration_____________")]
		[FormerlySerializedAs("APP_ID")]
		[SerializeField]
		private string _appID = "";

		[FormerlySerializedAs("TOKEN")]
		[SerializeField]
		private string _token = "";

		[FormerlySerializedAs("CHANNEL_NAME")]
		[SerializeField]
		private string _channelName = "";

		public Text LogText;

		internal Agora.Util.Logger Log;

		internal IRtcEngine RtcEngine;

		private const int CHANNEL = 1;

		private const int SAMPLE_RATE = 48000;

		private const int PUSH_FREQ_PER_SEC = 100;

		private RingBuffer<byte> _audioBuffer;

		private bool _startConvertSignal;

		private Thread _pushAudioFrameThread;

		private object _pushAudioFrameThreadSignal = new object();

		private int _count;

		private bool _startSignal;

		private void Start()
		{
			LoadAssetData();
			if (CheckAppId())
			{
				InitRtcEngine();
				SetExternalAudioSource();
				JoinChannel();
				StartPushAudioFrame();
			}
		}

		private void Update()
		{
			PermissionHelper.RequestMicrophontPermission();
		}

		[ContextMenu("ShowAgoraBasicProfileData")]
		private void LoadAssetData()
		{
			if (!(_appIdInput == null))
			{
				_appID = _appIdInput.appID;
				_token = _appIdInput.token;
				_channelName = _appIdInput.channelName;
			}
		}

		private bool CheckAppId()
		{
			Log = new Agora.Util.Logger(LogText);
			return Log.DebugAssert(_appID.Length > 10, "Please fill in your appId in API-Example/profile/appIdInput.asset");
		}

		private void InitRtcEngine()
		{
			RtcEngine = Agora.Rtc.RtcEngine.CreateAgoraRtcEngine();
			RtcEngineContext context = new RtcEngineContext(_appID, 0uL, CHANNEL_PROFILE_TYPE.CHANNEL_PROFILE_LIVE_BROADCASTING, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_DEFAULT);
			RtcEngine.Initialize(context);
			RtcEngine.InitEventHandler(new UserEventHandler(this));
		}

		private void SetExternalAudioSource()
		{
			int num = RtcEngine.SetExternalAudioSource(enabled: true, 48000, 1, 1);
			Log.UpdateLog("SetExternalAudioSource nRet:" + num);
		}

		private void StartPushAudioFrame()
		{
			int capacity = 48000;
			_audioBuffer = new RingBuffer<byte>(capacity, overflow: true);
			_startConvertSignal = true;
			_pushAudioFrameThread = new Thread(PushAudioFrameThread);
			_pushAudioFrameThread.Start();
		}

		private void JoinChannel()
		{
			RtcEngine.SetAudioProfile(AUDIO_PROFILE_TYPE.AUDIO_PROFILE_MUSIC_HIGH_QUALITY, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_DEFAULT);
			RtcEngine.EnableAudio();
			RtcEngine.SetClientRole(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			RtcEngine.JoinChannel(_token, _channelName);
		}

		private void OnLeaveBtnClick()
		{
			RtcEngine.LeaveChannel();
		}

		private void OnDestroy()
		{
			UnityEngine.Debug.Log("OnDestroy");
			if (RtcEngine == null)
			{
				return;
			}
			lock (_pushAudioFrameThreadSignal)
			{
				RtcEngine.InitEventHandler(null);
				RtcEngine.LeaveChannel();
				RtcEngine.Dispose();
				RtcEngine = null;
			}
		}

		private void PushAudioFrameThread()
		{
			int num = 2;
			AUDIO_FRAME_TYPE type = AUDIO_FRAME_TYPE.FRAME_TYPE_PCM16;
			int channels = 1;
			int num2 = 480;
			int samplesPerSec = 48000;
			byte[] array = new byte[num2 * num];
			int num3 = 10;
			DateTime dateTime = DateTime.Now;
			IntPtr intPtr = Marshal.AllocHGlobal(array.Length);
			AudioFrame audioFrame = new AudioFrame
			{
				bytesPerSample = BYTES_PER_SAMPLE.TWO_BYTES_PER_SAMPLE,
				type = type,
				samplesPerChannel = num2,
				samplesPerSec = samplesPerSec,
				channels = channels,
				buffer = (ulong)(long)intPtr,
				bufferPtr = intPtr,
				RawBuffer = array,
				renderTimeMs = num3
			};
			while (true)
			{
				lock (_pushAudioFrameThreadSignal)
				{
					if (RtcEngine == null)
					{
						break;
					}
					DateTime now = DateTime.Now;
					if ((now - dateTime).Milliseconds >= num3)
					{
						lock (_audioBuffer)
						{
							if (_audioBuffer.Size > num2 * num)
							{
								for (int i = 0; i < num2 * num; i++)
								{
									array[i] = _audioBuffer.Get();
								}
								Marshal.Copy(array, 0, audioFrame.bufferPtr, array.Length);
								UnityEngine.Debug.Log("PushAudioFrame returns: " + RtcEngine.PushAudioFrame(MEDIA_SOURCE_TYPE.AUDIO_PLAYOUT_SOURCE, audioFrame));
								dateTime = now;
							}
							else
							{
								dateTime = dateTime.AddMilliseconds(1.0);
							}
						}
					}
					goto IL_017a;
				}
				IL_017a:
				Thread.Sleep(1);
			}
			Marshal.FreeHGlobal(intPtr);
		}

		private void OnAudioFilterRead(float[] data, int channels)
		{
			if (!_startConvertSignal)
			{
				return;
			}
			int num = 32767;
			for (int i = 0; i < data.Length; i++)
			{
				float num2 = data[i];
				if (num2 > 1f)
				{
					num2 = 1f;
				}
				else if (num2 < -1f)
				{
					num2 = -1f;
				}
				short value = (short)(num2 * (float)num);
				byte[] array = new byte[2];
				array = BitConverter.GetBytes(value);
				lock (_audioBuffer)
				{
					_audioBuffer.Put(array[0]);
					_audioBuffer.Put(array[1]);
				}
			}
		}
	}
	internal class UserEventHandler : IRtcEngineEventHandler
	{
		private readonly CustomCaptureAudio _customAudioSource;

		internal UserEventHandler(CustomCaptureAudio customAudioSource)
		{
			_customAudioSource = customAudioSource;
		}

		public override void OnJoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			int build = 0;
			_customAudioSource.Log.UpdateLog($"sdk version: {_customAudioSource.RtcEngine.GetVersion(ref build)}");
			_customAudioSource.Log.UpdateLog($"onJoinChannelSuccess channelName: {connection.channelId}, uid: {connection.localUid}, elapsed: {elapsed}");
		}

		public override void OnLeaveChannel(RtcConnection connection, RtcStats stats)
		{
			_customAudioSource.Log.UpdateLog("OnLeaveChannelSuccess");
		}

		public override void OnError(int error, string msg)
		{
			_customAudioSource.Log.UpdateLog($"OnSDKError error: {error}, msg: {msg}");
		}

		public override void OnConnectionLost(RtcConnection connection)
		{
			_customAudioSource.Log.UpdateLog($"OnConnectionLost ");
		}
	}
}
namespace Agora_RTC_Plugin.API_Example.Examples.Advanced.ContentInspect
{
	public class ContentInspect : MonoBehaviour
	{
		[FormerlySerializedAs("appIdInput")]
		[SerializeField]
		private AppIdInput _appIdInput;

		[Header("_____________Basic Configuration_____________")]
		[FormerlySerializedAs("APP_ID")]
		[SerializeField]
		private string _appID = "";

		[FormerlySerializedAs("TOKEN")]
		[SerializeField]
		private string _token = "";

		[FormerlySerializedAs("CHANNEL_NAME")]
		[SerializeField]
		private string _channelName = "";

		public Text LogText;

		internal Agora.Util.Logger Log;

		internal IRtcEngine RtcEngine;

		private void Start()
		{
			LoadAssetData();
			if (CheckAppId())
			{
				InitEngine();
				JoinChannel();
				SetupUI();
			}
		}

		private void Update()
		{
			PermissionHelper.RequestMicrophontPermission();
			PermissionHelper.RequestCameraPermission();
		}

		[ContextMenu("ShowAgoraBasicProfileData")]
		private void LoadAssetData()
		{
			if (!(_appIdInput == null))
			{
				_appID = _appIdInput.appID;
				_token = _appIdInput.token;
				_channelName = _appIdInput.channelName;
			}
		}

		private bool CheckAppId()
		{
			Log = new Agora.Util.Logger(LogText);
			return Log.DebugAssert(_appID.Length > 10, "Please fill in your appId in API-Example/profile/appIdInput.asset");
		}

		private void InitEngine()
		{
			RtcEngine = Agora.Rtc.RtcEngine.CreateAgoraRtcEngine();
			UserEventHandler engineEventHandler = new UserEventHandler(this);
			RtcEngineContext context = new RtcEngineContext(_appID, 0uL, CHANNEL_PROFILE_TYPE.CHANNEL_PROFILE_LIVE_BROADCASTING, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_DEFAULT);
			RtcEngine.Initialize(context);
			RtcEngine.InitEventHandler(engineEventHandler);
		}

		private void JoinChannel()
		{
			RtcEngine.EnableAudio();
			RtcEngine.EnableVideo();
			RtcEngine.SetClientRole(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			RtcEngine.JoinChannel(_token, _channelName);
		}

		private void SetupUI()
		{
			Transform obj = base.transform.Find("UI");
			obj.Find("StartButton").GetComponent<Button>().onClick.AddListener(OnStartButtonClick);
			obj.Find("StopButton").GetComponent<Button>().onClick.AddListener(OnStopButtonClick);
		}

		private void OnStartButtonClick()
		{
			ContentInspectConfig contentInspectConfig = new ContentInspectConfig();
			contentInspectConfig.modules = new ContentInspectModule[1];
			contentInspectConfig.modules[0] = new ContentInspectModule
			{
				type = CONTENT_INSPECT_TYPE.CONTENT_INSPECT_MODERATION,
				interval = 1u
			};
			contentInspectConfig.moduleCount = 1;
			int num = RtcEngine.EnableContentInspect(enabled: true, contentInspectConfig);
			Log.UpdateLog("StartContentInspect: " + num);
		}

		private void OnStopButtonClick()
		{
			ContentInspectConfig contentInspectConfig = new ContentInspectConfig();
			contentInspectConfig.modules = new ContentInspectModule[1];
			contentInspectConfig.modules[0] = new ContentInspectModule
			{
				type = CONTENT_INSPECT_TYPE.CONTENT_INSPECT_MODERATION,
				interval = 1u
			};
			contentInspectConfig.moduleCount = 1;
			int num = RtcEngine.EnableContentInspect(enabled: false, contentInspectConfig);
			Log.UpdateLog("StopContentInspect: " + num);
		}

		private void OnDestroy()
		{
			UnityEngine.Debug.Log("OnDestroy");
			if (RtcEngine != null)
			{
				RtcEngine.InitEventHandler(null);
				RtcEngine.LeaveChannel();
				RtcEngine.Dispose();
			}
		}

		internal string GetChannelName()
		{
			return _channelName;
		}

		internal static void MakeVideoView(uint uid, string channelId = "")
		{
			if ((object)GameObject.Find(uid.ToString()) != null)
			{
				return;
			}
			VideoSurface videoSurface = MakeImageSurface(uid.ToString());
			if ((object)videoSurface != null)
			{
				if (uid == 0)
				{
					videoSurface.SetForUser(uid, channelId);
				}
				else
				{
					videoSurface.SetForUser(uid, channelId, VIDEO_SOURCE_TYPE.VIDEO_SOURCE_REMOTE);
				}
				videoSurface.OnTextureSizeModify += delegate(int width, int height)
				{
					float num = (float)height / (float)width;
					videoSurface.transform.localScale = new Vector3(-5f, 5f * num, 1f);
					UnityEngine.Debug.Log("OnTextureSizeModify: " + width + "  " + height);
				};
				videoSurface.SetEnable(enable: true);
			}
		}

		private static VideoSurface MakePlaneSurface(string goName)
		{
			GameObject gameObject = GameObject.CreatePrimitive(PrimitiveType.Plane);
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.transform.Rotate(-90f, 0f, 0f);
			UnityEngine.Random.Range(3f, 5f);
			UnityEngine.Random.Range(-2f, 2f);
			gameObject.transform.position = Vector3.zero;
			gameObject.transform.localScale = new Vector3(0.25f, 0.5f, 0.5f);
			return gameObject.AddComponent<VideoSurface>();
		}

		private static VideoSurface MakeImageSurface(string goName)
		{
			GameObject gameObject = new GameObject();
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.AddComponent<RawImage>();
			gameObject.AddComponent<UIElementDrag>();
			GameObject gameObject2 = GameObject.Find("VideoCanvas");
			if (gameObject2 != null)
			{
				gameObject.transform.parent = gameObject2.transform;
				UnityEngine.Debug.Log("add video view");
			}
			else
			{
				UnityEngine.Debug.Log("Canvas is null video view");
			}
			gameObject.transform.Rotate(0f, 0f, 180f);
			gameObject.transform.localPosition = Vector3.zero;
			gameObject.transform.localScale = new Vector3(2f, 3f, 1f);
			return gameObject.AddComponent<VideoSurface>();
		}

		internal static void DestroyVideoView(uint uid)
		{
			GameObject gameObject = GameObject.Find(uid.ToString());
			if ((object)gameObject != null)
			{
				UnityEngine.Object.Destroy(gameObject);
			}
		}
	}
	internal class UserEventHandler : IRtcEngineEventHandler
	{
		private readonly ContentInspect _sample;

		internal UserEventHandler(ContentInspect sample)
		{
			_sample = sample;
		}

		public override void OnError(int err, string msg)
		{
			_sample.Log.UpdateLog($"OnError err: {err}, msg: {msg}");
		}

		public override void OnJoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			int build = 0;
			UnityEngine.Debug.Log("Agora: OnJoinChannelSuccess ");
			_sample.Log.UpdateLog($"sdk version: ${_sample.RtcEngine.GetVersion(ref build)}");
			_sample.Log.UpdateLog($"OnJoinChannelSuccess channelName: {connection.channelId}, uid: {connection.localUid}, elapsed: {elapsed}");
			ContentInspect.MakeVideoView(0u);
		}

		public override void OnRejoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			_sample.Log.UpdateLog("OnRejoinChannelSuccess");
		}

		public override void OnLeaveChannel(RtcConnection connection, RtcStats stats)
		{
			_sample.Log.UpdateLog("OnLeaveChannel");
			ContentInspect.DestroyVideoView(0u);
		}

		public override void OnClientRoleChanged(RtcConnection connection, CLIENT_ROLE_TYPE oldRole, CLIENT_ROLE_TYPE newRole)
		{
			_sample.Log.UpdateLog("OnClientRoleChanged");
		}

		public override void OnUserJoined(RtcConnection connection, uint uid, int elapsed)
		{
			_sample.Log.UpdateLog($"OnUserJoined uid: ${uid} elapsed: ${elapsed}");
			ContentInspect.MakeVideoView(uid, _sample.GetChannelName());
		}

		public override void OnUserOffline(RtcConnection connection, uint uid, USER_OFFLINE_REASON_TYPE reason)
		{
			_sample.Log.UpdateLog($"OnUserOffLine uid: ${uid}, reason: ${(int)reason}");
			ContentInspect.DestroyVideoView(uid);
		}

		public override void OnContentInspectResult(CONTENT_INSPECT_RESULT result)
		{
			_sample.Log.UpdateLog("OnContentInspectResult :" + result);
		}
	}
}
namespace Agora_RTC_Plugin.API_Example.Examples.Advanced.ChannelMediaRelay
{
	public class ChannelMediaRelay : MonoBehaviour
	{
		[FormerlySerializedAs("appIdInput")]
		[SerializeField]
		private AppIdInput _appIdInput;

		[Header("_____________Basic Configuration_____________")]
		[FormerlySerializedAs("APP_ID")]
		[SerializeField]
		public string _appID = "";

		[FormerlySerializedAs("TOKEN")]
		[SerializeField]
		public string _token = "";

		[FormerlySerializedAs("CHANNEL_NAME")]
		[SerializeField]
		public string _channelName = "";

		public Text LogText;

		internal Agora.Util.Logger Log;

		internal IRtcEngine RtcEngine;

		private void Start()
		{
			LoadAssetData();
			if (CheckAppId())
			{
				InitEngine();
				SetupUI();
				EnableUI(visible: false);
				JoinChannel();
			}
		}

		[ContextMenu("ShowAgoraBasicProfileData")]
		private void LoadAssetData()
		{
			if (!(_appIdInput == null))
			{
				_appID = _appIdInput.appID;
				_token = _appIdInput.token;
				_channelName = _appIdInput.channelName;
			}
		}

		private bool CheckAppId()
		{
			Log = new Agora.Util.Logger(LogText);
			return Log.DebugAssert(_appID.Length > 10, "Please fill in your appId in API-Example/profile/appIdInput.asset");
		}

		private void InitEngine()
		{
			RtcEngine = Agora.Rtc.RtcEngine.CreateAgoraRtcEngine();
			UserEventHandler engineEventHandler = new UserEventHandler(this);
			RtcEngineContext context = new RtcEngineContext(_appID, 0uL, CHANNEL_PROFILE_TYPE.CHANNEL_PROFILE_LIVE_BROADCASTING, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_GAME_STREAMING);
			RtcEngine.Initialize(context);
			RtcEngine.InitEventHandler(engineEventHandler);
		}

		private void JoinChannel()
		{
			RtcEngine.SetClientRole(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			RtcEngine.EnableAudio();
			RtcEngine.EnableVideo();
			RtcEngine.JoinChannel(_token, _channelName);
		}

		private void Update()
		{
			PermissionHelper.RequestMicrophontPermission();
			PermissionHelper.RequestCameraPermission();
		}

		private void SetupUI()
		{
			Transform obj = base.transform.Find("UI");
			obj.Find("StartButton").GetComponent<Button>().onClick.AddListener(OnStartButtonClick);
			obj.Find("UpdateButton").GetComponent<Button>().onClick.AddListener(onUpdateButtonClick);
			obj.Find("StopButton").GetComponent<Button>().onClick.AddListener(OnStopButtonClick);
			obj.Find("PauseAllButton").GetComponent<Button>().onClick.AddListener(onPauseAllButtonClick);
			obj.Find("ResumAllButton").GetComponent<Button>().onClick.AddListener(OnResumeAllButtonClick);
		}

		public void EnableUI(bool visible)
		{
			base.transform.Find("UI").gameObject.SetActive(visible);
		}

		private void OnStartButtonClick()
		{
			ChannelMediaRelayConfiguration channelMediaRelayConfiguration = new ChannelMediaRelayConfiguration();
			channelMediaRelayConfiguration.srcInfo = new ChannelMediaInfo
			{
				channelName = _appIdInput.channelName,
				uid = 0u,
				token = _appIdInput.token
			};
			channelMediaRelayConfiguration.destInfos = new ChannelMediaInfo[1];
			channelMediaRelayConfiguration.destInfos[0] = new ChannelMediaInfo
			{
				channelName = _appIdInput.channelName + "_2",
				uid = 0u,
				token = _appIdInput.token
			};
			channelMediaRelayConfiguration.destCount = 1;
			int num = RtcEngine.StartChannelMediaRelay(channelMediaRelayConfiguration);
			Log.UpdateLog("StartChannelMediaRelay nRet:" + num + " new ChannelName: " + _appIdInput.channelName + "_2");
		}

		private void onUpdateButtonClick()
		{
			ChannelMediaRelayConfiguration channelMediaRelayConfiguration = new ChannelMediaRelayConfiguration();
			channelMediaRelayConfiguration.srcInfo = new ChannelMediaInfo
			{
				channelName = _appIdInput.channelName,
				uid = 0u,
				token = _appIdInput.token
			};
			channelMediaRelayConfiguration.destInfos = new ChannelMediaInfo[1];
			channelMediaRelayConfiguration.destInfos[0] = new ChannelMediaInfo
			{
				channelName = _appIdInput.channelName + "_3",
				uid = 0u,
				token = _appIdInput.token
			};
			channelMediaRelayConfiguration.destCount = 1;
			int num = RtcEngine.UpdateChannelMediaRelay(channelMediaRelayConfiguration);
			Log.UpdateLog("UpdateChannelMediaRelay nRet:" + num + " new ChannelName: " + _appIdInput.channelName + "_3");
		}

		private void onPauseAllButtonClick()
		{
			int num = RtcEngine.PauseAllChannelMediaRelay();
			Log.UpdateLog("onPauseAllButtonClick nRet:" + num);
		}

		private void OnResumeAllButtonClick()
		{
			int num = RtcEngine.ResumeAllChannelMediaRelay();
			Log.UpdateLog("OnResumeAllButtonClick nRet:" + num);
		}

		private void OnStopButtonClick()
		{
			int num = RtcEngine.StopChannelMediaRelay();
			Log.UpdateLog("OnStopButtonClick nRet:" + num);
		}

		private void OnDestroy()
		{
			UnityEngine.Debug.Log("OnDestroy");
			if (RtcEngine != null)
			{
				RtcEngine.InitEventHandler(null);
				RtcEngine.LeaveChannel();
				RtcEngine.Dispose();
				RtcEngine = null;
			}
		}

		internal static void MakeVideoView(uint uid, string channelId = "", VIDEO_SOURCE_TYPE type = VIDEO_SOURCE_TYPE.VIDEO_SOURCE_CAMERA_PRIMARY)
		{
			if ((object)GameObject.Find(uid.ToString()) != null)
			{
				return;
			}
			VideoSurface videoSurface = MakeImageSurface(uid.ToString());
			if ((object)videoSurface != null)
			{
				videoSurface.SetForUser(uid, channelId, type);
				videoSurface.OnTextureSizeModify += delegate(int width, int height)
				{
					float num = (float)height / (float)width;
					videoSurface.transform.localScale = new Vector3(-5f, 5f * num, 1f);
					UnityEngine.Debug.Log("OnTextureSizeModify: " + width + "  " + height);
				};
				videoSurface.SetEnable(enable: true);
			}
		}

		private static VideoSurface MakePlaneSurface(string goName)
		{
			GameObject gameObject = GameObject.CreatePrimitive(PrimitiveType.Plane);
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.transform.Rotate(-90f, 0f, 0f);
			gameObject.transform.position = Vector3.zero;
			gameObject.transform.localScale = new Vector3(0.25f, 0.5f, 0.5f);
			return gameObject.AddComponent<VideoSurface>();
		}

		private static VideoSurface MakeImageSurface(string goName)
		{
			GameObject gameObject = new GameObject();
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.AddComponent<RawImage>();
			gameObject.AddComponent<UIElementDrag>();
			GameObject gameObject2 = GameObject.Find("VideoCanvas");
			if (gameObject2 != null)
			{
				gameObject.transform.parent = gameObject2.transform;
				UnityEngine.Debug.Log("add video view");
			}
			else
			{
				UnityEngine.Debug.Log("Canvas is null video view");
			}
			gameObject.transform.Rotate(0f, 0f, 180f);
			gameObject.transform.localPosition = Vector3.zero;
			gameObject.transform.localScale = new Vector3(2f, 3f, 1f);
			return gameObject.AddComponent<VideoSurface>();
		}

		internal static void DestroyVideoView(uint uid)
		{
			GameObject gameObject = GameObject.Find(uid.ToString());
			if ((object)gameObject != null)
			{
				UnityEngine.Object.Destroy(gameObject);
			}
		}
	}
	internal class UserEventHandler : IRtcEngineEventHandler
	{
		private readonly ChannelMediaRelay _channelMediaRelay;

		internal UserEventHandler(ChannelMediaRelay videoSample)
		{
			_channelMediaRelay = videoSample;
		}

		public override void OnError(int err, string msg)
		{
			_channelMediaRelay.Log.UpdateLog($"OnError err: {err}, msg: {msg}");
		}

		public override void OnJoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			int build = 0;
			UnityEngine.Debug.Log("Agora: OnJoinChannelSuccess ");
			_channelMediaRelay.Log.UpdateLog($"sdk version: ${_channelMediaRelay.RtcEngine.GetVersion(ref build)}");
			_channelMediaRelay.Log.UpdateLog($"OnJoinChannelSuccess channelName: {connection.channelId}, uid: {connection.localUid}, elapsed: {elapsed}");
			_channelMediaRelay.EnableUI(visible: true);
			ChannelMediaRelay.MakeVideoView(0u);
		}

		public override void OnRejoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			_channelMediaRelay.Log.UpdateLog("OnRejoinChannelSuccess");
		}

		public override void OnLeaveChannel(RtcConnection connection, RtcStats stats)
		{
			_channelMediaRelay.Log.UpdateLog("OnLeaveChannel");
			_channelMediaRelay.EnableUI(visible: false);
			ChannelMediaRelay.DestroyVideoView(0u);
		}

		public override void OnClientRoleChanged(RtcConnection connection, CLIENT_ROLE_TYPE oldRole, CLIENT_ROLE_TYPE newRole)
		{
			_channelMediaRelay.Log.UpdateLog($"OnClientRoleChanged {oldRole}, {newRole}");
		}

		public override void OnUserJoined(RtcConnection connection, uint uid, int elapsed)
		{
			_channelMediaRelay.Log.UpdateLog($"OnUserJoined uid: ${uid} elapsed: ${elapsed}");
			ChannelMediaRelay.MakeVideoView(uid, _channelMediaRelay._channelName, VIDEO_SOURCE_TYPE.VIDEO_SOURCE_REMOTE);
		}

		public override void OnUserOffline(RtcConnection connection, uint uid, USER_OFFLINE_REASON_TYPE reason)
		{
			_channelMediaRelay.Log.UpdateLog($"OnUserOffLine uid: ${uid}, reason: ${(int)reason}");
			ChannelMediaRelay.DestroyVideoView(uid);
		}

		public override void OnChannelMediaRelayEvent(int code)
		{
			_channelMediaRelay.Log.UpdateLog($"OnChannelMediaRelayEvent: {code}");
		}

		public override void OnChannelMediaRelayStateChanged(int state, int code)
		{
			_channelMediaRelay.Log.UpdateLog($"OnChannelMediaRelayStateChanged state: {state}, code: {code}");
		}
	}
}
namespace Agora_RTC_Plugin.API_Example.Examples.Advanced.AudioSpectrum
{
	public class AudioSpectrum : MonoBehaviour
	{
		[FormerlySerializedAs("appIdInput")]
		[SerializeField]
		private AppIdInput _appIdInput;

		[Header("_____________Basic Configuration_____________")]
		[FormerlySerializedAs("APP_ID")]
		[SerializeField]
		private string _appID = "";

		[FormerlySerializedAs("TOKEN")]
		[SerializeField]
		private string _token = "";

		[FormerlySerializedAs("CHANNEL_NAME")]
		[SerializeField]
		private string _channelName = "";

		public Text LogText;

		public RectTransform spectrums;

		public List<float> data = new List<float>();

		internal Agora.Util.Logger Log;

		internal IRtcEngine RtcEngine;

		internal IMediaPlayer MediaPlayer;

		private const string MPK_URL = "https://agora-adc-artifacts.oss-cn-beijing.aliyuncs.com/video/meta_live_mpk.mov";

		private Button _button1;

		private Button _button2;

		private Button _button3;

		private Button _button4;

		private Button _button5;

		private Toggle _urlToggle;

		private void Start()
		{
			LoadAssetData();
			if (CheckAppId())
			{
				SetUpUI();
				EnableUI(val: false);
				InitEngine();
				InitMediaPlayer();
				JoinChannelWithMPK();
			}
		}

		private void Update()
		{
			PermissionHelper.RequestMicrophontPermission();
			PermissionHelper.RequestCameraPermission();
			lock (data)
			{
				if (data.Count > 0)
				{
					for (int i = 0; i < data.Count; i++)
					{
						float num = 0f - data[i] + 1f;
						if (num <= 1f)
						{
							num = 1f;
						}
						((RectTransform)spectrums.GetChild(i)).sizeDelta = new Vector2(15f, num);
					}
				}
				data.Clear();
			}
		}

		private void SetUpUI()
		{
			_button1 = GameObject.Find("Button1").GetComponent<Button>();
			_button1.onClick.AddListener(OnPlayButtonPress);
			_button2 = GameObject.Find("Button2").GetComponent<Button>();
			_button2.onClick.AddListener(OnStopButtonPress);
			_button3 = GameObject.Find("Button3").GetComponent<Button>();
			_button3.onClick.AddListener(OnPauseButtonPress);
			_button4 = GameObject.Find("Button4").GetComponent<Button>();
			_button4.onClick.AddListener(OnResumeButtonPress);
			_button5 = GameObject.Find("Button5").GetComponent<Button>();
			_button5.onClick.AddListener(OnOpenButtonPress);
			_urlToggle = GameObject.Find("UrlToggle").GetComponent<Toggle>();
		}

		public void EnableUI(bool val)
		{
			base.transform.Find("Button1").gameObject.SetActive(val);
			base.transform.Find("Button2").gameObject.SetActive(val);
			base.transform.Find("Button3").gameObject.SetActive(val);
			base.transform.Find("Button4").gameObject.SetActive(val);
		}

		private bool CheckAppId()
		{
			Log = new Agora.Util.Logger(LogText);
			return Log.DebugAssert(_appID.Length > 10, "Please fill in your appId in API-Example/profile/appIdInput.asset");
		}

		[ContextMenu("ShowAgoraBasicProfileData")]
		private void LoadAssetData()
		{
			if (!(_appIdInput == null))
			{
				_appID = _appIdInput.appID;
				_token = _appIdInput.token;
				_channelName = _appIdInput.channelName;
			}
		}

		private void InitEngine()
		{
			RtcEngine = Agora.Rtc.RtcEngine.CreateAgoraRtcEngine();
			UserEventHandler engineEventHandler = new UserEventHandler(this);
			RtcEngineContext context = new RtcEngineContext(_appID, 0uL, CHANNEL_PROFILE_TYPE.CHANNEL_PROFILE_LIVE_BROADCASTING, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_GAME_STREAMING);
			RtcEngine.Initialize(context);
			RtcEngine.InitEventHandler(engineEventHandler);
		}

		private void InitMediaPlayer()
		{
			MediaPlayer = RtcEngine.CreateMediaPlayer();
			if (MediaPlayer == null)
			{
				Log.UpdateLog("CreateMediaPlayer failed!");
				return;
			}
			MpkEventHandler engineEventHandler = new MpkEventHandler(this);
			MediaPlayer.InitEventHandler(engineEventHandler);
			Log.UpdateLog("playerId id: " + MediaPlayer.GetId());
			MediaPlayer.RegisterMediaPlayerAudioSpectrumObserver(new UserAudioSpectrumObserver(this), 16);
		}

		private void JoinChannelWithMPK()
		{
			RtcEngine.EnableAudio();
			RtcEngine.EnableVideo();
			RtcEngine.SetClientRole(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			ChannelMediaOptions channelMediaOptions = new ChannelMediaOptions();
			channelMediaOptions.autoSubscribeAudio.SetValue(val: true);
			channelMediaOptions.autoSubscribeVideo.SetValue(val: true);
			channelMediaOptions.publishCustomAudioTrack.SetValue(val: false);
			channelMediaOptions.publishCameraTrack.SetValue(val: false);
			channelMediaOptions.publishMediaPlayerAudioTrack.SetValue(val: true);
			channelMediaOptions.publishMediaPlayerVideoTrack.SetValue(val: true);
			channelMediaOptions.publishMediaPlayerId.SetValue(MediaPlayer.GetId());
			channelMediaOptions.enableAudioRecordingOrPlayout.SetValue(val: true);
			channelMediaOptions.clientRoleType.SetValue(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			int num = RtcEngine.JoinChannel(_token, _channelName, 0u, channelMediaOptions);
			Log.UpdateLog("RtcEngineController JoinChannel_MPK returns: " + num);
		}

		private void OnPlayButtonPress()
		{
			int num = MediaPlayer.Play();
			Log.UpdateLog("Play return" + num);
			TestMediaPlayer();
		}

		private void OnStopButtonPress()
		{
			int num = MediaPlayer.Stop();
			Log.UpdateLog("Stop return" + num);
		}

		private void OnPauseButtonPress()
		{
			int num = MediaPlayer.Pause();
			Log.UpdateLog("Pause return" + num);
		}

		private void OnResumeButtonPress()
		{
			int num = MediaPlayer.Resume();
			Log.UpdateLog("Resume returns: " + num);
		}

		private void OnOpenButtonPress()
		{
			string text = null;
			text = ((!_urlToggle.isOn) ? "/assets/img/MPK.mov" : "https://agora-adc-artifacts.oss-cn-beijing.aliyuncs.com/video/meta_live_mpk.mov");
			Log.UpdateLog("Is opening : " + text);
			int num = MediaPlayer.Open(text, 0L);
			Log.UpdateLog("Open returns: " + num);
		}

		private void TestMediaPlayer()
		{
			long duration = 0L;
			UnityEngine.Debug.Log("_mediaPlayer.GetDuration returns: " + MediaPlayer.GetDuration(ref duration) + "duration: " + duration);
			long pos = 0L;
			UnityEngine.Debug.Log("_mediaPlayer.GetPlayPosition returns: " + MediaPlayer.GetPlayPosition(ref pos) + "position: " + pos);
			UnityEngine.Debug.Log("_mediaPlayer.GetState:" + MediaPlayer.GetState());
			bool muted = true;
			UnityEngine.Debug.Log("_mediaPlayer.GetMute returns: " + MediaPlayer.GetMute(ref muted) + "mute: " + muted);
			int volume = 0;
			UnityEngine.Debug.Log("_mediaPlayer.GetPlayoutVolume returns: " + MediaPlayer.GetPlayoutVolume(ref volume) + "volume: " + volume);
			UnityEngine.Debug.Log("SDK Version:" + MediaPlayer.GetPlayerSdkVersion());
			UnityEngine.Debug.Log("GetPlaySrc:" + MediaPlayer.GetPlaySrc());
		}

		private void OnDestroy()
		{
			UnityEngine.Debug.Log("OnDestroy");
			if (RtcEngine != null)
			{
				if (MediaPlayer != null)
				{
					RtcEngine.DestroyMediaPlayer(MediaPlayer);
				}
				RtcEngine.InitEventHandler(null);
				RtcEngine.LeaveChannel();
				RtcEngine.Dispose();
				RtcEngine = null;
			}
		}

		internal string GetChannelName()
		{
			return _channelName;
		}

		internal static void MakeVideoView(uint uid, string channelId = "", VIDEO_SOURCE_TYPE videoSourceType = VIDEO_SOURCE_TYPE.VIDEO_SOURCE_CAMERA_PRIMARY)
		{
			if ((object)GameObject.Find(uid.ToString()) != null)
			{
				return;
			}
			VideoSurface videoSurface = MakeImageSurface(uid.ToString());
			if ((object)videoSurface != null)
			{
				videoSurface.SetForUser(uid, channelId, videoSourceType);
				videoSurface.SetEnable(enable: true);
				videoSurface.OnTextureSizeModify += delegate(int width, int height)
				{
					float num = (float)height / (float)width;
					videoSurface.transform.localScale = new Vector3(-5f, 5f * num, 1f);
					UnityEngine.Debug.Log("OnTextureSizeModify: " + width + "  " + height);
				};
			}
		}

		private VideoSurface MakePlaneSurface(string goName)
		{
			GameObject gameObject = GameObject.CreatePrimitive(PrimitiveType.Plane);
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.transform.Rotate(-90f, 0f, 0f);
			gameObject.transform.position = Vector3.zero;
			gameObject.transform.localScale = new Vector3(1f, 1.333f, 0.5f);
			return gameObject.AddComponent<VideoSurface>();
		}

		private static VideoSurface MakeImageSurface(string goName)
		{
			GameObject gameObject = new GameObject();
			if (gameObject == null)
			{
				return null;
			}
			gameObject.name = goName;
			gameObject.AddComponent<RawImage>();
			gameObject.AddComponent<UIElementDrag>();
			GameObject gameObject2 = GameObject.Find("VideoCanvas");
			if (gameObject2 != null)
			{
				gameObject.transform.parent = gameObject2.transform;
				UnityEngine.Debug.Log("add video view");
			}
			else
			{
				UnityEngine.Debug.Log("Canvas is null video view");
			}
			gameObject.transform.Rotate(0f, 0f, 180f);
			gameObject.transform.localPosition = Vector3.zero;
			gameObject.transform.localScale = new Vector3(4.5f, 3f, 1f);
			return gameObject.AddComponent<VideoSurface>();
		}

		internal static void DestroyVideoView(uint uid)
		{
			GameObject gameObject = GameObject.Find(uid.ToString());
			if ((object)gameObject != null)
			{
				UnityEngine.Object.Destroy(gameObject);
			}
		}
	}
	internal class MpkEventHandler : IMediaPlayerSourceObserver
	{
		private readonly AudioSpectrum _sample;

		internal MpkEventHandler(AudioSpectrum sample)
		{
			_sample = sample;
		}

		public override void OnPlayerSourceStateChanged(MEDIA_PLAYER_STATE state, MEDIA_PLAYER_ERROR ec)
		{
			_sample.Log.UpdateLog($"OnPlayerSourceStateChanged state: {state}, ec: {ec}, playId: {_sample.MediaPlayer.GetId()}");
			UnityEngine.Debug.Log("OnPlayerSourceStateChanged");
			switch (state)
			{
			case MEDIA_PLAYER_STATE.PLAYER_STATE_OPEN_COMPLETED:
				AudioSpectrum.MakeVideoView((uint)_sample.MediaPlayer.GetId(), "", VIDEO_SOURCE_TYPE.VIDEO_SOURCE_MEDIA_PLAYER);
				_sample.EnableUI(val: true);
				_sample.Log.UpdateLog("Open Complete. Click start to play media");
				break;
			case MEDIA_PLAYER_STATE.PLAYER_STATE_STOPPED:
				AudioSpectrum.DestroyVideoView((uint)_sample.MediaPlayer.GetId());
				_sample.EnableUI(val: false);
				break;
			}
		}

		public override void OnPlayerEvent(MEDIA_PLAYER_EVENT @event, long elapsedTime, string message)
		{
			_sample.Log.UpdateLog($"OnPlayerEvent state: {@event}");
		}
	}
	internal class UserEventHandler : IRtcEngineEventHandler
	{
		private readonly AudioSpectrum _sample;

		internal UserEventHandler(AudioSpectrum sample)
		{
			_sample = sample;
		}

		public override void OnError(int err, string msg)
		{
			_sample.Log.UpdateLog($"OnError err: {err}, msg: {msg}");
		}

		public override void OnJoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			int build = 0;
			_sample.Log.UpdateLog($"sdk version: ${_sample.RtcEngine.GetVersion(ref build)}");
			_sample.Log.UpdateLog($"OnJoinChannelSuccess channelName: {connection.channelId}, uid: {connection.localUid}, elapsed: {elapsed}");
		}

		public override void OnRejoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			_sample.Log.UpdateLog("OnRejoinChannelSuccess");
		}

		public override void OnLeaveChannel(RtcConnection connection, RtcStats stats)
		{
			_sample.Log.UpdateLog("OnLeaveChannel");
			AudioSpectrum.DestroyVideoView(0u);
		}

		public override void OnClientRoleChanged(RtcConnection connection, CLIENT_ROLE_TYPE oldRole, CLIENT_ROLE_TYPE newRole)
		{
			_sample.Log.UpdateLog("OnClientRoleChanged");
		}

		public override void OnUserJoined(RtcConnection connection, uint uid, int elapsed)
		{
			_sample.Log.UpdateLog($"OnUserJoined uid: ${uid} elapsed: ${elapsed}");
		}

		public override void OnUserOffline(RtcConnection connection, uint uid, USER_OFFLINE_REASON_TYPE reason)
		{
			_sample.Log.UpdateLog($"OnUserOffLine uid: ${uid}, reason: ${(int)reason}");
			AudioSpectrum.DestroyVideoView(uid);
		}
	}
	internal class UserPlayerCustomDataProvider : IMediaPlayerCustomDataProvider
	{
		private AudioSpectrum _sample;

		internal UserPlayerCustomDataProvider(AudioSpectrum sample)
		{
			_sample = sample;
		}

		public override long OnSeek(long offset, int whence)
		{
			UnityEngine.Debug.Log("UserPlayerCustomDataProvider OnSeek");
			return 0L;
		}

		public override int OnReadData(IntPtr bufferPtr, int bufferSize)
		{
			UnityEngine.Debug.Log("UserPlayerCustomDataProvider OnReadData");
			return 0;
		}
	}
	internal class UserAudioSpectrumObserver : IAudioSpectrumObserver
	{
		private AudioSpectrum _sample;

		private bool s = true;

		internal UserAudioSpectrumObserver(AudioSpectrum sample)
		{
			_sample = sample;
		}

		public override bool OnLocalAudioSpectrum(AudioSpectrumData data)
		{
			if (data.dataLength > 0)
			{
				lock (_sample.data)
				{
					_sample.data.Clear();
					int num = data.dataLength / 15;
					for (int i = 0; i < 15; i++)
					{
						_sample.data.Add(data.audioSpectrumData[i * num]);
					}
				}
			}
			return true;
		}

		public override bool OnRemoteAudioSpectrum(UserAudioSpectrumInfo[] spectrums, uint spectrumNumber)
		{
			return true;
		}
	}
}
namespace Agora_RTC_Plugin.API_Example.Examples.Advanced.AudioMixing
{
	public class AudioMixing : MonoBehaviour
	{
		[FormerlySerializedAs("AppIdInput")]
		[SerializeField]
		private AppIdInput _appIdInput;

		[Header("_____________Basic Configuration_____________")]
		[FormerlySerializedAs("APP_ID")]
		[SerializeField]
		private string _appID = "";

		[FormerlySerializedAs("TOKEN")]
		[SerializeField]
		private string _token = "";

		[FormerlySerializedAs("CHANNEL_NAME")]
		[SerializeField]
		private string _channelName = "";

		[SerializeField]
		public string Sound_URL = "";

		private string _localPath = "";

		public Text LogText;

		internal Agora.Util.Logger Log;

		internal IRtcEngine RtcEngine;

		private bool _isMixing;

		private bool _effectOn;

		private Button _mixingButton { get; set; }

		private Button _effectButton { get; set; }

		private Toggle _urlToggle { get; set; }

		private Toggle _loopbackToggle { get; set; }

		private void Start()
		{
			LoadAssetData();
			if (CheckAppId())
			{
				InitRtcEngine();
				SetupUI();
				EnableUI(enable: false);
				JoinChannel();
			}
		}

		private void Update()
		{
			PermissionHelper.RequestMicrophontPermission();
		}

		[ContextMenu("ShowAgoraBasicProfileData")]
		private void LoadAssetData()
		{
			if (!(_appIdInput == null))
			{
				_appID = _appIdInput.appID;
				_token = _appIdInput.token;
				_channelName = _appIdInput.channelName;
			}
		}

		private bool CheckAppId()
		{
			Log = new Agora.Util.Logger(LogText);
			return Log.DebugAssert(_appID.Length > 10, "Please fill in your appId in API-Example/profile/appIdInput.asset");
		}

		private void InitRtcEngine()
		{
			RtcEngine = Agora.Rtc.RtcEngine.CreateAgoraRtcEngine();
			UserEventHandler engineEventHandler = new UserEventHandler(this);
			RtcEngineContext context = new RtcEngineContext(_appID, 0uL, CHANNEL_PROFILE_TYPE.CHANNEL_PROFILE_LIVE_BROADCASTING, AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_DEFAULT);
			RtcEngine.Initialize(context);
			RtcEngine.InitEventHandler(engineEventHandler);
		}

		private void SetupUI()
		{
			_mixingButton = GameObject.Find("MixButton").GetComponent<Button>();
			_mixingButton.onClick.AddListener(HandleAudioMixingButton);
			_effectButton = GameObject.Find("EffectButton").GetComponent<Button>();
			_effectButton.onClick.AddListener(HandleEffectButton);
			_urlToggle = GameObject.Find("Toggle").GetComponent<Toggle>();
			_loopbackToggle = GameObject.Find("Loopback").GetComponent<Toggle>();
			_localPath = "/assets/audio/Agora.io-Interactions.mp3";
			Log.UpdateLog($"the audio file path: {_localPath}");
		}

		internal void EnableUI(bool enable)
		{
			_mixingButton.enabled = enable;
			_effectButton.enabled = enable;
		}

		private void JoinChannel()
		{
			RtcEngine.EnableAudio();
			RtcEngine.SetClientRole(CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER);
			RtcEngine.JoinChannel(_token, _channelName);
		}

		private void StartAudioMixing()
		{
			UnityEngine.Debug.Log("Playing with " + (_urlToggle.isOn ? "URL" : "local file"));
			UnityEngine.Debug.Log("StartAudioMixing returns: " + RtcEngine.StartAudioMixing(_urlToggle.isOn ? Sound_URL : _localPath, _loopbackToggle.isOn, 1));
		}

		private void PlayEffectTest()
		{
			UnityEngine.Debug.Log("Playing with " + (_urlToggle.isOn ? "URL" : "local file"));
			RtcEngine.PlayEffect(1, _urlToggle.isOn ? Sound_URL : _localPath, 1, 1.0, 0.0, 100, publish: true);
		}

		private void StopEffectTest()
		{
			RtcEngine.StopAllEffects();
		}

		private void OnDestroy()
		{
			UnityEngine.Debug.Log("OnDestroy");
			if (RtcEngine != null)
			{
				RtcEngine.InitEventHandler(null);
				RtcEngine.LeaveChannel();
				RtcEngine.Dispose();
			}
		}

		private void HandleAudioMixingButton()
		{
			if (_effectOn)
			{
				Log.UpdateLog("Testing Effect right now, can't play effect...");
				return;
			}
			if (_isMixing)
			{
				RtcEngine.StopAudioMixing();
			}
			else
			{
				StartAudioMixing();
			}
			_isMixing = !_isMixing;
			_mixingButton.GetComponentInChildren<Text>().text = (_isMixing ? "Stop Mixing" : "Start Mixing");
		}

		private void HandleEffectButton()
		{
			if (_isMixing)
			{
				Log.UpdateLog("Testing Mixing right now, can't play effect...");
				return;
			}
			if (_effectOn)
			{
				StopEffectTest();
			}
			else
			{
				PlayEffectTest();
			}
			_effectOn = !_effectOn;
			_effectButton.GetComponentInChildren<Text>().text = (_effectOn ? "Stop Effect" : "Play Effect");
		}
	}
	internal class UserEventHandler : IRtcEngineEventHandler
	{
		private readonly AudioMixing _audioMixing;

		internal UserEventHandler(AudioMixing audioMixing)
		{
			_audioMixing = audioMixing;
		}

		public override void OnError(int err, string msg)
		{
			_audioMixing.Log.UpdateLog($"OnError err: {err}, msg: {msg}");
		}

		public override void OnJoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			int build = 0;
			_audioMixing.Log.UpdateLog($"sdk version: ${_audioMixing.RtcEngine.GetVersion(ref build)}");
			_audioMixing.Log.UpdateLog($"OnJoinChannelSuccess channelName: {connection.channelId}, uid: {connection.localUid}, elapsed: {elapsed}");
			_audioMixing.EnableUI(enable: true);
		}

		public override void OnRejoinChannelSuccess(RtcConnection connection, int elapsed)
		{
			_audioMixing.Log.UpdateLog("OnRejoinChannelSuccess");
		}

		public override void OnLeaveChannel(RtcConnection connection, RtcStats stats)
		{
			_audioMixing.Log.UpdateLog("OnLeaveChannel");
		}

		public override void OnClientRoleChanged(RtcConnection connection, CLIENT_ROLE_TYPE oldRole, CLIENT_ROLE_TYPE newRole)
		{
			_audioMixing.Log.UpdateLog("OnClientRoleChanged");
		}

		public override void OnUserJoined(RtcConnection connection, uint uid, int elapsed)
		{
			_audioMixing.Log.UpdateLog($"OnUserJoined uid: ${uid} elapsed: ${elapsed}");
		}

		public override void OnUserOffline(RtcConnection connection, uint uid, USER_OFFLINE_REASON_TYPE reason)
		{
			_audioMixing.Log.UpdateLog($"OnUserOffLine uid: ${uid}, reason: ${(int)reason}");
		}

		public override void OnAudioMixingStateChanged(AUDIO_MIXING_STATE_TYPE state, AUDIO_MIXING_REASON_TYPE errorCode)
		{
			_audioMixing.Log.UpdateLog($"AUDIO_MIXING_STATE_TYPE: ${state}, AUDIO_MIXING_REASON_TYPE: ${errorCode}");
		}
	}
}
