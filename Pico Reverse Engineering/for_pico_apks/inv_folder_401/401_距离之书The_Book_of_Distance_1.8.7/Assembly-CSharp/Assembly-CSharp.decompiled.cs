using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Serialization.Formatters.Binary;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using BOD;
using BOD.SetControl;
using BOD.Transitions;
using BOD_Prototype;
using DG.Tweening;
using DG.Tweening.Core;
using DG.Tweening.Plugins.Core.PathCore;
using DG.Tweening.Plugins.Options;
using Il2CppDummyDll;
using Malee;
using PathCreation;
using TMPro;
using Unity.Collections;
using Unity.XR.CoreUtils;
using UnityEngine;
using UnityEngine.Audio;
using UnityEngine.Events;
using UnityEngine.InputSystem.Utilities;
using UnityEngine.Localization;
using UnityEngine.Playables;
using UnityEngine.Rendering;
using UnityEngine.Rendering.PostProcessing;
using UnityEngine.Rendering.Universal;
using UnityEngine.ResourceManagement.AsyncOperations;
using UnityEngine.SceneManagement;
using UnityEngine.Scripting;
using UnityEngine.Timeline;
using UnityEngine.UI;
using UnityEngine.XR;
using UnityEngine.XR.Interaction.Toolkit;
using VLB;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
public class AnimatorRandomBlend : StateMachineBehaviour
{
	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int animationCount;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string parameterName;

	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float minTime;

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float maxTime;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float transitionDuration;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float time;

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int[] animHash;

	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int oldAnim;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int newAnim;

	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float transitionTime;

	[Token(Token = "0x6000001")]
	[Address(RVA = "0xC558B8", Offset = "0xC558B8", VA = "0xC558B8", Slot = "4")]
	public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000002")]
	[Address(RVA = "0xC55A9C", Offset = "0xC55A9C", VA = "0xC55A9C", Slot = "5")]
	public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000003")]
	[Address(RVA = "0xC55A1C", Offset = "0xC55A1C", VA = "0xC55A1C")]
	private void PickNewAnimation(Animator animator)
	{
	}

	[Token(Token = "0x6000004")]
	[Address(RVA = "0xC55C08", Offset = "0xC55C08", VA = "0xC55C08")]
	public AnimatorRandomBlend()
	{
	}
}
[Token(Token = "0x2000003")]
[RequireComponent(typeof(TextMeshPro))]
public class DebugLogPanel : MonoBehaviour
{
	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Visual Feedback")]
	[Tooltip("Granularity. Sometimes you may not want to see everything being sent to the console.")]
	[SerializeField]
	private LogType LogLevel;

	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	[Tooltip("Maximum number of messages before deleting the older messages.")]
	private int maxNumberOfMessages;

	[Token(Token = "0x400000D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Tooltip("Check this if you want the stack trace printed after the message.")]
	private bool includeStackTrace;

	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	[SerializeField]
	[Tooltip("Play a sound when the message panel is updated.")]
	[Header("Auditory Feedback")]
	private bool playSoundOnMessage;

	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	private bool newMessageArrived;

	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private TextMeshPro debugText;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<string> messageQueue;

	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private AudioSource messageSound;

	[Token(Token = "0x6000005")]
	[Address(RVA = "0xC55C2C", Offset = "0xC55C2C", VA = "0xC55C2C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000006")]
	[Address(RVA = "0xC55D44", Offset = "0xC55D44", VA = "0xC55D44")]
	private void Application_logMessageReceivedThreaded(string condition, string stackTrace, LogType type)
	{
	}

	[Token(Token = "0x6000007")]
	[Address(RVA = "0xC55F08", Offset = "0xC55F08", VA = "0xC55F08")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000008")]
	[Address(RVA = "0xC55F88", Offset = "0xC55F88", VA = "0xC55F88")]
	private void PrintQueue()
	{
	}

	[Token(Token = "0x6000009")]
	[Address(RVA = "0xC560B4", Offset = "0xC560B4", VA = "0xC560B4")]
	private void Update()
	{
	}

	[Token(Token = "0x600000A")]
	[Address(RVA = "0xC560D4", Offset = "0xC560D4", VA = "0xC560D4")]
	public DebugLogPanel()
	{
	}
}
[Serializable]
[Token(Token = "0x2000004")]
public class LightControlBehaviour : PlayableBehaviour
{
	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Color color;

	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float intensity;

	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float bounceIntensity;

	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float range;

	[Token(Token = "0x600000B")]
	[Address(RVA = "0xC560E4", Offset = "0xC560E4", VA = "0xC560E4")]
	public LightControlBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x2000005")]
public class LightControlClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LightControlBehaviour template;

	[Token(Token = "0x17000001")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x600000C")]
		[Address(RVA = "0xC56104", Offset = "0xC56104", VA = "0xC56104", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x600000D")]
	[Address(RVA = "0xC5610C", Offset = "0xC5610C", VA = "0xC5610C", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x600000E")]
	[Address(RVA = "0xC561B4", Offset = "0xC561B4", VA = "0xC561B4")]
	public LightControlClip()
	{
	}
}
[Token(Token = "0x2000006")]
public class LightControlMixerBehaviour : PlayableBehaviour
{
	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Color m_DefaultColor;

	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float m_DefaultIntensity;

	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float m_DefaultBounceIntensity;

	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float m_DefaultRange;

	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Light m_TrackBinding;

	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool m_FirstFrameHappened;

	[Token(Token = "0x600000F")]
	[Address(RVA = "0xC56234", Offset = "0xC56234", VA = "0xC56234", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x6000010")]
	[Address(RVA = "0xC565D0", Offset = "0xC565D0", VA = "0xC565D0", Slot = "16")]
	public override void OnPlayableDestroy(Playable playable)
	{
	}

	[Token(Token = "0x6000011")]
	[Address(RVA = "0xC5669C", Offset = "0xC5669C", VA = "0xC5669C")]
	public LightControlMixerBehaviour()
	{
	}
}
[Token(Token = "0x2000007")]
[TrackBindingType(typeof(Light))]
[TrackClipType(typeof(LightControlClip))]
[TrackColor(0.9454092f, 0.9779412f, 0.3883002f)]
public class LightControlTrack : TrackAsset
{
	[Token(Token = "0x6000012")]
	[Address(RVA = "0xC566A4", Offset = "0xC566A4", VA = "0xC566A4", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000013")]
	[Address(RVA = "0xC56744", Offset = "0xC56744", VA = "0xC56744", Slot = "29")]
	public override void GatherProperties(PlayableDirector director, IPropertyCollector driver)
	{
	}

	[Token(Token = "0x6000014")]
	[Address(RVA = "0xC5674C", Offset = "0xC5674C", VA = "0xC5674C")]
	public LightControlTrack()
	{
	}
}
[Token(Token = "0x2000008")]
public class DestroyAfterTime : MonoBehaviour
{
	[Token(Token = "0x6000015")]
	[Address(RVA = "0xC567A4", Offset = "0xC567A4", VA = "0xC567A4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000016")]
	[Address(RVA = "0xC56814", Offset = "0xC56814", VA = "0xC56814")]
	public DestroyAfterTime()
	{
	}
}
[Token(Token = "0x2000009")]
public class EnableAWS : MonoBehaviour
{
	[Token(Token = "0x6000017")]
	[Address(RVA = "0xC5681C", Offset = "0xC5681C", VA = "0xC5681C")]
	public EnableAWS()
	{
	}
}
[Token(Token = "0x200000A")]
public class LiftTrainWalls : MonoBehaviour
{
	[Token(Token = "0x200000C")]
	[CompilerGenerated]
	private sealed class <LiftComponents>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LiftTrainWalls <>4__this;

		[Token(Token = "0x17000002")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000020")]
			[Address(RVA = "0xC56AC4", Offset = "0xC56AC4", VA = "0xC56AC4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000003")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000022")]
			[Address(RVA = "0xC56B0C", Offset = "0xC56B0C", VA = "0xC56B0C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600001D")]
		[Address(RVA = "0xC568AC", Offset = "0xC568AC", VA = "0xC568AC")]
		[DebuggerHidden]
		public <LiftComponents>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x600001E")]
		[Address(RVA = "0xC56904", Offset = "0xC56904", VA = "0xC56904", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600001F")]
		[Address(RVA = "0xC56908", Offset = "0xC56908", VA = "0xC56908", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000021")]
		[Address(RVA = "0xC56ACC", Offset = "0xC56ACC", VA = "0xC56ACC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float ednPosition;

	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float time;

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] trainWallsComponents;

	[Token(Token = "0x6000018")]
	[Address(RVA = "0xC56824", Offset = "0xC56824", VA = "0xC56824")]
	public void TriggerLiftTrainWallsAnimation()
	{
	}

	[Token(Token = "0x6000019")]
	[Address(RVA = "0xC56844", Offset = "0xC56844", VA = "0xC56844")]
	[IteratorStateMachine(typeof(<LiftComponents>d__4))]
	private IEnumerator LiftComponents()
	{
		return null;
	}

	[Token(Token = "0x600001A")]
	[Address(RVA = "0xC568D4", Offset = "0xC568D4", VA = "0xC568D4")]
	public LiftTrainWalls()
	{
	}
}
[Token(Token = "0x200000D")]
public class ModernJapaneseRoomStateController : WhiteboxStateController
{
	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject MuseunChunk;

	[Token(Token = "0x6000023")]
	[Address(RVA = "0xC56B14", Offset = "0xC56B14", VA = "0xC56B14", Slot = "7")]
	public override void OnStateChange()
	{
	}

	[Token(Token = "0x6000024")]
	[Address(RVA = "0xC56B1C", Offset = "0xC56B1C", VA = "0xC56B1C")]
	public ModernJapaneseRoomStateController()
	{
	}
}
[Token(Token = "0x200000E")]
public class MuseumStateController : WhiteboxStateController
{
	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject StreetChunk;

	[Token(Token = "0x6000025")]
	[Address(RVA = "0xC56B24", Offset = "0xC56B24", VA = "0xC56B24", Slot = "7")]
	public override void OnStateChange()
	{
	}

	[Token(Token = "0x6000026")]
	[Address(RVA = "0xC56BDC", Offset = "0xC56BDC", VA = "0xC56BDC")]
	public MuseumStateController()
	{
	}
}
[Token(Token = "0x200000F")]
public class OnDisableChangeLayer : MonoBehaviour
{
	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject yonezo;

	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject yeiko;

	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject familyExtra1;

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject familyExtra2;

	[Token(Token = "0x6000027")]
	[Address(RVA = "0xC56BE4", Offset = "0xC56BE4", VA = "0xC56BE4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000028")]
	[Address(RVA = "0xC56E2C", Offset = "0xC56E2C", VA = "0xC56E2C")]
	private void ChangeYonezoLayer()
	{
	}

	[Token(Token = "0x6000029")]
	[Address(RVA = "0xC56C04", Offset = "0xC56C04", VA = "0xC56C04")]
	private void ChangeYeikoLayer()
	{
	}

	[Token(Token = "0x600002A")]
	[Address(RVA = "0xC56CBC", Offset = "0xC56CBC", VA = "0xC56CBC")]
	private void ChangeBoyLayer()
	{
	}

	[Token(Token = "0x600002B")]
	[Address(RVA = "0xC56D74", Offset = "0xC56D74", VA = "0xC56D74")]
	private void ChangeGirlLayer()
	{
	}

	[Token(Token = "0x600002C")]
	[Address(RVA = "0xC56EE4", Offset = "0xC56EE4", VA = "0xC56EE4")]
	public OnDisableChangeLayer()
	{
	}
}
[Token(Token = "0x2000010")]
public class OnEnabledDestroyGameObject : MonoBehaviour
{
	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject goToBeDestroyed;

	[Token(Token = "0x600002D")]
	[Address(RVA = "0xC56EEC", Offset = "0xC56EEC", VA = "0xC56EEC")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x600002E")]
	[Address(RVA = "0xC56F48", Offset = "0xC56F48", VA = "0xC56F48")]
	public OnEnabledDestroyGameObject()
	{
	}
}
[Token(Token = "0x2000011")]
public class OnEnabledInstantiateGameObject : MonoBehaviour
{
	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject goToInstantiate;

	[Token(Token = "0x600002F")]
	[Address(RVA = "0xC56F50", Offset = "0xC56F50", VA = "0xC56F50")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x6000030")]
	[Address(RVA = "0xC56FC0", Offset = "0xC56FC0", VA = "0xC56FC0")]
	public OnEnabledInstantiateGameObject()
	{
	}
}
[Token(Token = "0x2000012")]
public class OnParentChangeChangePosition : MonoBehaviour
{
	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform childToChangePosition;

	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Vector3 rightHandChildPosition;

	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private Vector3 rightHandPosition;

	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Vector3 leftHandChildPosition;

	[Token(Token = "0x6000031")]
	[Address(RVA = "0xC56FC8", Offset = "0xC56FC8", VA = "0xC56FC8")]
	private void OnTransformParentChanged()
	{
	}

	[Token(Token = "0x6000032")]
	[Address(RVA = "0xC570E8", Offset = "0xC570E8", VA = "0xC570E8")]
	public OnParentChangeChangePosition()
	{
	}
}
[Token(Token = "0x2000013")]
public class Demonstration_MeshProcessing : MonoBehaviour
{
	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] g;

	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material mat;

	[Token(Token = "0x6000033")]
	[Address(RVA = "0xC570F0", Offset = "0xC570F0", VA = "0xC570F0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000034")]
	[Address(RVA = "0xC5767C", Offset = "0xC5767C", VA = "0xC5767C")]
	public Demonstration_MeshProcessing()
	{
	}
}
[Token(Token = "0x2000014")]
public class Demonstration_NoclipController : MonoBehaviour
{
	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float movSpeed;

	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float lookSpeed;

	[Token(Token = "0x6000035")]
	[Address(RVA = "0xC57684", Offset = "0xC57684", VA = "0xC57684")]
	private void Update()
	{
	}

	[Token(Token = "0x6000036")]
	[Address(RVA = "0xC57D58", Offset = "0xC57D58", VA = "0xC57D58")]
	public Demonstration_NoclipController()
	{
	}
}
[Token(Token = "0x2000015")]
public class EdgeDetect : MonoBehaviour
{
	[Token(Token = "0x2000016")]
	public enum DebugMode
	{
		[Token(Token = "0x400004F")]
		none,
		[Token(Token = "0x4000050")]
		outlines,
		[Token(Token = "0x4000051")]
		normals,
		[Token(Token = "0x4000052")]
		simpleDepth,
		[Token(Token = "0x4000053")]
		depthCompression,
		[Token(Token = "0x4000054")]
		worldSpace
	}

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Range(0f, 10f)]
	public float depthSensitivity;

	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float prevDepthSensitivity;

	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Range(0f, 10f)]
	public float depthSensitivity2;

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float prevDepth2Sensitivity;

	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Range(0f, 10f)]
	public float normalsSensitivity;

	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float prevNormalsSensitivity;

	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public DebugMode debugMode;

	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private DebugMode prevDebugMode;

	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Color outlineColor;

	[Token(Token = "0x400003E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Color prevOutlineColor;

	[Token(Token = "0x400003F")]
	private const float farClipPlaneMultiplicand = 1.75f;

	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private RenderTexture depthTexture;

	[Token(Token = "0x4000041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private RenderTexture normalsTexture;

	[Token(Token = "0x4000042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Camera cam;

	[Token(Token = "0x4000043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[HideInInspector]
	public Shader encodedDepthShader;

	[Token(Token = "0x4000044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Material edgeDetectMat;

	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[HideInInspector]
	public Shader edgeDetectShader;

	[Token(Token = "0x4000046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Camera depthCapturingCamera;

	[Token(Token = "0x4000047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[HideInInspector]
	public Shader edgeCombineShader;

	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private RenderTexture edgeTexture;

	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Material edgeCombineMat;

	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[HideInInspector]
	public Shader normalsShader;

	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Camera normalsCapturingCamera;

	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private int width;

	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private int height;

	[Token(Token = "0x6000037")]
	[Address(RVA = "0xC57D6C", Offset = "0xC57D6C", VA = "0xC57D6C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000038")]
	[Address(RVA = "0xC5849C", Offset = "0xC5849C", VA = "0xC5849C")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x6000039")]
	[Address(RVA = "0xC585D8", Offset = "0xC585D8", VA = "0xC585D8")]
	public EdgeDetect()
	{
	}
}
[Token(Token = "0x2000017")]
public static class MeshProcessor
{
	[Token(Token = "0x2000018")]
	public struct edge
	{
		[Token(Token = "0x4000057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int a;

		[Token(Token = "0x4000058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int b;

		[Token(Token = "0x6000041")]
		[Address(RVA = "0xC59480", Offset = "0xC59480", VA = "0xC59480")]
		public edge(int _a, int _b)
		{
		}

		[Token(Token = "0x6000042")]
		[Address(RVA = "0xC595D4", Offset = "0xC595D4", VA = "0xC595D4", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000043")]
		[Address(RVA = "0xC5965C", Offset = "0xC5965C", VA = "0xC5965C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}

	[Token(Token = "0x4000055")]
	private const float vertexEquivalenceMargin = 0.05f;

	[Token(Token = "0x4000056")]
	private const float normalEquivalenceMargin = 0.05f;

	[Token(Token = "0x600003A")]
	[Address(RVA = "0xC573AC", Offset = "0xC573AC", VA = "0xC573AC")]
	public static Mesh processForOutlineMesh(Mesh mesh)
	{
		return null;
	}

	[Token(Token = "0x600003B")]
	[Address(RVA = "0xC5885C", Offset = "0xC5885C", VA = "0xC5885C")]
	private static void yes(edge[] edges, Vector3[] points, int indexX, int indexY, int thirdIndex, List<Vector2> uv, List<Vector3> verts)
	{
	}

	[Token(Token = "0x600003C")]
	[Address(RVA = "0xC59310", Offset = "0xC59310", VA = "0xC59310")]
	public static Vector3 GetClosestPointOnLine(Vector3 A, Vector3 B, Vector3 P)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600003D")]
	[Address(RVA = "0xC58604", Offset = "0xC58604", VA = "0xC58604")]
	public static edge[] processForEdges(Mesh mesh)
	{
		return null;
	}

	[Token(Token = "0x600003E")]
	[Address(RVA = "0xC59378", Offset = "0xC59378", VA = "0xC59378")]
	private static void tryReduce(ref int index, Vector3[] verts, Vector3[] norms)
	{
	}

	[Token(Token = "0x600003F")]
	[Address(RVA = "0xC59464", Offset = "0xC59464", VA = "0xC59464")]
	private static void trySwap(ref int d, ref int e)
	{
	}

	[Token(Token = "0x6000040")]
	[Address(RVA = "0xC59488", Offset = "0xC59488", VA = "0xC59488")]
	private static void tryPair(edge m, List<edge> intpairs, List<edge> intpairsWithAtLeast2SharedTriangles)
	{
	}
}
[Token(Token = "0x2000019")]
public class PlayAnimation : MonoBehaviour
{
	[Token(Token = "0x4000059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animation animation;

	[Token(Token = "0x6000044")]
	[Address(RVA = "0xC59668", Offset = "0xC59668", VA = "0xC59668")]
	public void OnPlayAnimation()
	{
	}

	[Token(Token = "0x6000045")]
	[Address(RVA = "0xC596BC", Offset = "0xC596BC", VA = "0xC596BC")]
	public PlayAnimation()
	{
	}
}
[Token(Token = "0x200001A")]
public class SECTR_AudioDemoUI : SECTR_DemoUI
{
	[Token(Token = "0x400005A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private SECTR_AudioCueInstance chatterInstance;

	[Token(Token = "0x400005B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SECTR_ToolTip("A cue with a low loudness.", null, false)]
	public SECTR_AudioCue SoftCue;

	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SECTR_ToolTip("A cue at the normal loudness of speech.", null, false)]
	public SECTR_AudioCue ChatterCue;

	[Token(Token = "0x400005D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SECTR_ToolTip("A loud sound.", null, false)]
	public SECTR_AudioCue GunshotCue;

	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SECTR_ToolTip("A very, very loud sound.", null, false)]
	public SECTR_AudioCue ExplosionCue;

	[Token(Token = "0x400005F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SECTR_ToolTip("Dynamic audio prefab to spawn.")]
	public GameObject AudioPrefab;

	[Token(Token = "0x4000060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SECTR_ToolTip("Speed at which to throw prefab.")]
	public float PrefabThrowSpeed;

	[Token(Token = "0x6000046")]
	[Address(RVA = "0xC596C4", Offset = "0xC596C4", VA = "0xC596C4", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x6000047")]
	[Address(RVA = "0xC59DFC", Offset = "0xC59DFC", VA = "0xC59DFC")]
	protected void ShowHUD(bool active)
	{
	}

	[Token(Token = "0x6000048")]
	[Address(RVA = "0xC59E58", Offset = "0xC59E58", VA = "0xC59E58")]
	protected void PlaySoft(bool active)
	{
	}

	[Token(Token = "0x6000049")]
	[Address(RVA = "0xC59E98", Offset = "0xC59E98", VA = "0xC59E98")]
	protected void PlayChatter(bool active)
	{
	}

	[Token(Token = "0x600004A")]
	[Address(RVA = "0xC5A020", Offset = "0xC5A020", VA = "0xC5A020")]
	protected void PlayGunshot(bool active)
	{
	}

	[Token(Token = "0x600004B")]
	[Address(RVA = "0xC5A054", Offset = "0xC5A054", VA = "0xC5A054")]
	protected void PlayExplosion(bool active)
	{
	}

	[Token(Token = "0x600004C")]
	[Address(RVA = "0xC5A088", Offset = "0xC5A088", VA = "0xC5A088")]
	protected void ThrowPrefab(bool active)
	{
	}

	[Token(Token = "0x600004D")]
	[Address(RVA = "0xC5A260", Offset = "0xC5A260", VA = "0xC5A260")]
	public SECTR_AudioDemoUI()
	{
	}
}
[Token(Token = "0x200001B")]
public class SECTR_CompleteDemoUI : SECTR_DemoUI
{
	[Token(Token = "0x4000061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private string originalDemoMessage;

	[Token(Token = "0x4000062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Multiline]
	public string Unity4PerfMessage;

	[Token(Token = "0x600004E")]
	[Address(RVA = "0xC5A2F4", Offset = "0xC5A2F4", VA = "0xC5A2F4")]
	private void Start()
	{
	}

	[Token(Token = "0x600004F")]
	[Address(RVA = "0xC5A478", Offset = "0xC5A478", VA = "0xC5A478", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x6000050")]
	[Address(RVA = "0xC5A528", Offset = "0xC5A528", VA = "0xC5A528", Slot = "6")]
	protected override void OnGUI()
	{
	}

	[Token(Token = "0x6000051")]
	[Address(RVA = "0xC5AF40", Offset = "0xC5AF40", VA = "0xC5AF40")]
	public SECTR_CompleteDemoUI()
	{
	}
}
[Token(Token = "0x200001C")]
[AddComponentMenu("Procedural Worlds/SECTR/Demos/SECTR Character Motor")]
[RequireComponent(typeof(CharacterController))]
public class SECTR_CharacterMotor : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x200001D")]
	public class CharacterMotorMovement
	{
		[Token(Token = "0x4000071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float maxForwardSpeed;

		[Token(Token = "0x4000072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float maxSidewaysSpeed;

		[Token(Token = "0x4000073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxBackwardsSpeed;

		[Token(Token = "0x4000074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve slopeSpeedMultiplier;

		[Token(Token = "0x4000075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float maxGroundAcceleration;

		[Token(Token = "0x4000076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float maxAirAcceleration;

		[Token(Token = "0x4000077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float gravity;

		[Token(Token = "0x4000078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float maxFallSpeed;

		[Token(Token = "0x4000079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float footstepDistance;

		[Token(Token = "0x400007A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float pushPower;

		[NonSerialized]
		[Token(Token = "0x400007B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public CollisionFlags collisionFlags;

		[NonSerialized]
		[Token(Token = "0x400007C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 velocity;

		[NonSerialized]
		[Token(Token = "0x400007D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector3 frameVelocity;

		[NonSerialized]
		[Token(Token = "0x400007E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Vector3 hitPoint;

		[NonSerialized]
		[Token(Token = "0x400007F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Vector3 lastHitPoint;

		[NonSerialized]
		[Token(Token = "0x4000080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public PhysicMaterial hitMaterial;

		[Token(Token = "0x6000061")]
		[Address(RVA = "0xC5D178", Offset = "0xC5D178", VA = "0xC5D178")]
		public CharacterMotorMovement()
		{
		}
	}

	[Token(Token = "0x200001E")]
	public enum MovementTransferOnJump
	{
		[Token(Token = "0x4000082")]
		None,
		[Token(Token = "0x4000083")]
		InitTransfer,
		[Token(Token = "0x4000084")]
		PermaTransfer,
		[Token(Token = "0x4000085")]
		PermaLocked
	}

	[Serializable]
	[Token(Token = "0x200001F")]
	public class CharacterMotorJumping
	{
		[Token(Token = "0x4000086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool enabled;

		[Token(Token = "0x4000087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float baseHeight;

		[Token(Token = "0x4000088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float extraHeight;

		[Token(Token = "0x4000089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float perpAmount;

		[Token(Token = "0x400008A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float steepPerpAmount;

		[NonSerialized]
		[Token(Token = "0x400008B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool jumping;

		[NonSerialized]
		[Token(Token = "0x400008C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool holdingJumpButton;

		[NonSerialized]
		[Token(Token = "0x400008D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float lastStartTime;

		[NonSerialized]
		[Token(Token = "0x400008E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float lastButtonDownTime;

		[NonSerialized]
		[Token(Token = "0x400008F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 jumpDir;

		[Token(Token = "0x6000062")]
		[Address(RVA = "0xC5D398", Offset = "0xC5D398", VA = "0xC5D398")]
		public CharacterMotorJumping()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000020")]
	public class CharacterMotorMovingPlatform
	{
		[Token(Token = "0x4000090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool enabled;

		[Token(Token = "0x4000091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public MovementTransferOnJump movementTransfer;

		[NonSerialized]
		[Token(Token = "0x4000092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform hitPlatform;

		[NonSerialized]
		[Token(Token = "0x4000093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform activePlatform;

		[NonSerialized]
		[Token(Token = "0x4000094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 activeLocalPoint;

		[NonSerialized]
		[Token(Token = "0x4000095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 activeGlobalPoint;

		[NonSerialized]
		[Token(Token = "0x4000096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Quaternion activeLocalRotation;

		[NonSerialized]
		[Token(Token = "0x4000097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Quaternion activeGlobalRotation;

		[NonSerialized]
		[Token(Token = "0x4000098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Matrix4x4 lastMatrix;

		[NonSerialized]
		[Token(Token = "0x4000099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Vector3 platformVelocity;

		[NonSerialized]
		[Token(Token = "0x400009A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public bool newPlatform;

		[Token(Token = "0x6000063")]
		[Address(RVA = "0xC5D418", Offset = "0xC5D418", VA = "0xC5D418")]
		public CharacterMotorMovingPlatform()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000021")]
	public class CharacterMotorSliding
	{
		[Token(Token = "0x400009B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool enabled;

		[Token(Token = "0x400009C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float slidingSpeed;

		[Token(Token = "0x400009D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float sidewaysControl;

		[Token(Token = "0x400009E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float speedControl;

		[Token(Token = "0x6000064")]
		[Address(RVA = "0xC5D430", Offset = "0xC5D430", VA = "0xC5D430")]
		public CharacterMotorSliding()
		{
		}
	}

	[Token(Token = "0x2000022")]
	[CompilerGenerated]
	private sealed class <SubtractNewPlatformVelocity>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400009F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SECTR_CharacterMotor <>4__this;

		[Token(Token = "0x40000A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform <platform>5__2;

		[Token(Token = "0x17000004")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000068")]
			[Address(RVA = "0xC5D5F8", Offset = "0xC5D5F8", VA = "0xC5D5F8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000005")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600006A")]
			[Address(RVA = "0xC5D640", Offset = "0xC5D640", VA = "0xC5D640", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000065")]
		[Address(RVA = "0xC5CDE0", Offset = "0xC5CDE0", VA = "0xC5CDE0")]
		[DebuggerHidden]
		public <SubtractNewPlatformVelocity>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x6000066")]
		[Address(RVA = "0xC5D458", Offset = "0xC5D458", VA = "0xC5D458", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000067")]
		[Address(RVA = "0xC5D45C", Offset = "0xC5D45C", VA = "0xC5D45C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000069")]
		[Address(RVA = "0xC5D600", Offset = "0xC5D600", VA = "0xC5D600", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool canControl;

	[Token(Token = "0x4000064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Vector3 lastGroundNormal;

	[Token(Token = "0x4000065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform cachedTransform;

	[Token(Token = "0x4000066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private CharacterController cachedController;

	[Token(Token = "0x4000067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 lastFootstepPosition;

	[Token(Token = "0x4000068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private PhysicMaterial defaultHitMaterial;

	[NonSerialized]
	[Token(Token = "0x4000069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Vector3 inputMoveDirection;

	[NonSerialized]
	[Token(Token = "0x400006A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public bool inputJump;

	[NonSerialized]
	[Token(Token = "0x400006B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
	public bool grounded;

	[NonSerialized]
	[Token(Token = "0x400006C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Vector3 groundNormal;

	[Token(Token = "0x400006D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SECTR_ToolTip("Basic movement properties.")]
	public CharacterMotorMovement movement;

	[Token(Token = "0x400006E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SECTR_ToolTip("Jump specific movement properties.")]
	public CharacterMotorJumping jumping;

	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SECTR_ToolTip("Platform specific movment properties.")]
	public CharacterMotorMovingPlatform movingPlatform;

	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public CharacterMotorSliding sliding;

	[Token(Token = "0x6000052")]
	[Address(RVA = "0xC5AF44", Offset = "0xC5AF44", VA = "0xC5AF44")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000053")]
	[Address(RVA = "0xC5AFF8", Offset = "0xC5AFF8", VA = "0xC5AFF8")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000054")]
	[Address(RVA = "0xC5BD30", Offset = "0xC5BD30", VA = "0xC5BD30")]
	private Vector3 ApplyInputVelocityChange(Vector3 velocity)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000055")]
	[Address(RVA = "0xC5C14C", Offset = "0xC5C14C", VA = "0xC5C14C")]
	private Vector3 ApplyGravityAndJumping(Vector3 velocity)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000056")]
	[Address(RVA = "0xC5CA10", Offset = "0xC5CA10", VA = "0xC5CA10")]
	private void OnControllerColliderHit(ControllerColliderHit hit)
	{
	}

	[Token(Token = "0x6000057")]
	[Address(RVA = "0xC5C5D0", Offset = "0xC5C5D0", VA = "0xC5C5D0")]
	[IteratorStateMachine(typeof(<SubtractNewPlatformVelocity>d__24))]
	private IEnumerator SubtractNewPlatformVelocity()
	{
		return null;
	}

	[Token(Token = "0x6000058")]
	[Address(RVA = "0xC5C51C", Offset = "0xC5C51C", VA = "0xC5C51C")]
	private bool MoveWithPlatform()
	{
		return default(bool);
	}

	[Token(Token = "0x6000059")]
	[Address(RVA = "0xC5C680", Offset = "0xC5C680", VA = "0xC5C680")]
	private Vector3 GetDesiredHorizontalVelocity()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600005A")]
	[Address(RVA = "0xC5C7E4", Offset = "0xC5C7E4", VA = "0xC5C7E4")]
	private Vector3 AdjustGroundVelocityToNormal(Vector3 hVelocity, Vector3 groundNormal)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600005B")]
	[Address(RVA = "0xC5C5B4", Offset = "0xC5C5B4", VA = "0xC5C5B4")]
	private bool IsGroundedTest()
	{
		return default(bool);
	}

	[Token(Token = "0x600005C")]
	[Address(RVA = "0xC5C9BC", Offset = "0xC5C9BC", VA = "0xC5C9BC")]
	private float GetMaxAcceleration(bool grounded)
	{
		return default(float);
	}

	[Token(Token = "0x600005D")]
	[Address(RVA = "0xC5C9E8", Offset = "0xC5C9E8", VA = "0xC5C9E8")]
	private float CalculateJumpVerticalSpeed(float targetJumpHeight)
	{
		return default(float);
	}

	[Token(Token = "0x600005E")]
	[Address(RVA = "0xC5C638", Offset = "0xC5C638", VA = "0xC5C638")]
	private bool TooSteep()
	{
		return default(bool);
	}

	[Token(Token = "0x600005F")]
	[Address(RVA = "0xC5CE08", Offset = "0xC5CE08", VA = "0xC5CE08")]
	private float MaxSpeedInDirection(Vector3 desiredMovementDirection)
	{
		return default(float);
	}

	[Token(Token = "0x6000060")]
	[Address(RVA = "0xC5CFD0", Offset = "0xC5CFD0", VA = "0xC5CFD0")]
	public SECTR_CharacterMotor()
	{
	}
}
[Token(Token = "0x2000023")]
[RequireComponent(typeof(SECTR_FPSController))]
public class SECTR_DemoUI : MonoBehaviour
{
	[Token(Token = "0x2000024")]
	protected enum WatermarkLocation
	{
		[Token(Token = "0x40000AD")]
		UpperLeft,
		[Token(Token = "0x40000AE")]
		UpperCenter,
		[Token(Token = "0x40000AF")]
		UpperRight
	}

	[Token(Token = "0x2000025")]
	protected delegate void DemoButtonPressedDelegate(bool active);

	[Token(Token = "0x2000026")]
	private class DemoButton
	{
		[Token(Token = "0x40000B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public KeyCode key;

		[Token(Token = "0x40000B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string activeHint;

		[Token(Token = "0x40000B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string inactiveHint;

		[Token(Token = "0x40000B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool active;

		[Token(Token = "0x40000B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool pressed;

		[Token(Token = "0x40000B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public DemoButtonPressedDelegate demoButtonPressed;

		[Token(Token = "0x6000076")]
		[Address(RVA = "0xC5D78C", Offset = "0xC5D78C", VA = "0xC5D78C")]
		public DemoButton(KeyCode key, string activeHint, string inactiveHint, DemoButtonPressedDelegate demoButtonPressed)
		{
		}
	}

	[Token(Token = "0x40000A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool passedIntro;

	[Token(Token = "0x40000A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected SECTR_FPSController cachedController;

	[Token(Token = "0x40000A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected GUIStyle demoButtonStyle;

	[Token(Token = "0x40000A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected WatermarkLocation watermarkLocation;

	[Token(Token = "0x40000A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<DemoButton> demoButtons;

	[Token(Token = "0x40000A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SECTR_ToolTip("Texture to display as a watermark.")]
	public Texture2D Watermark;

	[Token(Token = "0x40000A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SECTR_ToolTip("Link to a controllable ghost/spectator camera.")]
	public SECTR_GhostController PipController;

	[Token(Token = "0x40000AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Multiline]
	[SECTR_ToolTip("Message to display at start of demo.")]
	public string DemoMessage;

	[Token(Token = "0x40000AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SECTR_ToolTip("Disables HUD for video captures.")]
	public bool CaptureMode;

	[Token(Token = "0x17000006")]
	public bool PipActive
	{
		[Token(Token = "0x600006B")]
		[Address(RVA = "0xC5D648", Offset = "0xC5D648", VA = "0xC5D648")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600006C")]
	[Address(RVA = "0xC59C2C", Offset = "0xC59C2C", VA = "0xC59C2C", Slot = "4")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x600006D")]
	[Address(RVA = "0xC5D6CC", Offset = "0xC5D6CC", VA = "0xC5D6CC", Slot = "5")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x600006E")]
	[Address(RVA = "0xC5A634", Offset = "0xC5A634", VA = "0xC5A634", Slot = "6")]
	protected virtual void OnGUI()
	{
	}

	[Token(Token = "0x600006F")]
	[Address(RVA = "0xC59B0C", Offset = "0xC59B0C", VA = "0xC59B0C")]
	protected void AddButton(KeyCode key, string activeHint, string inactiveHint, DemoButtonPressedDelegate buttonPressedDelegate)
	{
	}

	[Token(Token = "0x6000070")]
	[Address(RVA = "0xC5D7E8", Offset = "0xC5D7E8", VA = "0xC5D7E8")]
	private void PressedPip(bool active)
	{
	}

	[Token(Token = "0x6000071")]
	[Address(RVA = "0xC5A26C", Offset = "0xC5A26C", VA = "0xC5A26C")]
	public SECTR_DemoUI()
	{
	}
}
[Token(Token = "0x2000027")]
[RequireComponent(typeof(Camera))]
[ExecuteInEditMode]
public class SECTR_FogDisable : MonoBehaviour
{
	[Token(Token = "0x40000B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool previousFogState;

	[Token(Token = "0x6000077")]
	[Address(RVA = "0xC5D8F8", Offset = "0xC5D8F8", VA = "0xC5D8F8")]
	private void OnPreRender()
	{
	}

	[Token(Token = "0x6000078")]
	[Address(RVA = "0xC5D920", Offset = "0xC5D920", VA = "0xC5D920")]
	private void OnPostRender()
	{
	}

	[Token(Token = "0x6000079")]
	[Address(RVA = "0xC5D92C", Offset = "0xC5D92C", VA = "0xC5D92C")]
	public SECTR_FogDisable()
	{
	}
}
[Token(Token = "0x2000028")]
[RequireComponent(typeof(Camera))]
public abstract class SECTR_FPController : MonoBehaviour
{
	[Token(Token = "0x2000029")]
	protected class TrackedTouch
	{
		[Token(Token = "0x40000C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector2 startPos;

		[Token(Token = "0x40000C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector2 currentPos;

		[Token(Token = "0x6000080")]
		[Address(RVA = "0xC5E3FC", Offset = "0xC5E3FC", VA = "0xC5E3FC")]
		public TrackedTouch()
		{
		}
	}

	[Token(Token = "0x40000B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector2 _mouseAbsolute;

	[Token(Token = "0x40000B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector2 _smoothMouse;

	[Token(Token = "0x40000B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector2 _clampInDegrees;

	[Token(Token = "0x40000BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector2 _targetDirection;

	[Token(Token = "0x40000BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool focused;

	[Token(Token = "0x40000BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected Dictionary<int, TrackedTouch> _touches;

	[Token(Token = "0x40000BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SECTR_ToolTip("Whether to lock the cursor when this camera is active.")]
	public bool LockCursor;

	[Token(Token = "0x40000BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SECTR_ToolTip("Scalar for mouse sensitivity.")]
	public Vector2 Sensitivity;

	[Token(Token = "0x40000BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SECTR_ToolTip("Scalar for mouse smoothing.")]
	public Vector2 Smoothing;

	[Token(Token = "0x40000C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SECTR_ToolTip("Adjusts the size of the virtual joystick.")]
	public float TouchScreenLookScale;

	[Token(Token = "0x600007A")]
	[Address(RVA = "0xC5D934", Offset = "0xC5D934", VA = "0xC5D934")]
	private void Start()
	{
	}

	[Token(Token = "0x600007B")]
	[Address(RVA = "0xC5D984", Offset = "0xC5D984", VA = "0xC5D984")]
	private void OnApplicationFocus(bool focused)
	{
	}

	[Token(Token = "0x600007C")]
	[Address(RVA = "0xC5D990", Offset = "0xC5D990", VA = "0xC5D990", Slot = "4")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x600007D")]
	[Address(RVA = "0xC5E184", Offset = "0xC5E184", VA = "0xC5E184")]
	protected Vector2 GetScreenJoystick(bool left)
	{
		return default(Vector2);
	}

	[Token(Token = "0x600007E")]
	[Address(RVA = "0xC5DE18", Offset = "0xC5DE18", VA = "0xC5DE18")]
	private void _UpdateTouches()
	{
	}

	[Token(Token = "0x600007F")]
	[Address(RVA = "0xC5E404", Offset = "0xC5E404", VA = "0xC5E404")]
	protected SECTR_FPController()
	{
	}
}
[Token(Token = "0x200002A")]
[RequireComponent(typeof(SECTR_CharacterMotor))]
[AddComponentMenu("Procedural Worlds/SECTR/Demos/SECTR Character Controller")]
public class SECTR_FPSController : SECTR_FPController
{
	[Token(Token = "0x40000C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private SECTR_CharacterMotor cachedMotor;

	[Token(Token = "0x6000081")]
	[Address(RVA = "0xC5E4AC", Offset = "0xC5E4AC", VA = "0xC5E4AC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000082")]
	[Address(RVA = "0xC5E4FC", Offset = "0xC5E4FC", VA = "0xC5E4FC", Slot = "4")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000083")]
	[Address(RVA = "0xC5E798", Offset = "0xC5E798", VA = "0xC5E798")]
	private Vector3 ProjectOntoPlane(Vector3 v, Vector3 normal)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000084")]
	[Address(RVA = "0xC5E898", Offset = "0xC5E898", VA = "0xC5E898")]
	private Vector3 ConstantSlerp(Vector3 from, Vector3 to, float angle)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000085")]
	[Address(RVA = "0xC5E9E0", Offset = "0xC5E9E0", VA = "0xC5E9E0")]
	public SECTR_FPSController()
	{
	}
}
[Token(Token = "0x200002B")]
[AddComponentMenu("Procedural Worlds/SECTR/Demos/SECTR Ghost Controller")]
public class SECTR_GhostController : SECTR_FPController
{
	[Token(Token = "0x40000C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SECTR_ToolTip("The speed at which to fly through the world.")]
	public float FlySpeed;

	[Token(Token = "0x40000C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SECTR_ToolTip("The translation acceleration amount applied by keyboard input.")]
	public float AccelerationRatio;

	[Token(Token = "0x40000C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SECTR_ToolTip("The amount by which holding down Ctrl slows you down.")]
	public float SlowDownRatio;

	[Token(Token = "0x6000086")]
	[Address(RVA = "0xC5E9E4", Offset = "0xC5E9E4", VA = "0xC5E9E4", Slot = "4")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000087")]
	[Address(RVA = "0xC5EDD4", Offset = "0xC5EDD4", VA = "0xC5EDD4")]
	public SECTR_GhostController()
	{
	}
}
[Token(Token = "0x200002C")]
public class SECTR_TreeSpawner : MonoBehaviour
{
	[Token(Token = "0x40000C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject treeToSpawn;

	[Token(Token = "0x40000C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float spawnThreshold;

	[Token(Token = "0x40000C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool spawnEnabled;

	[Token(Token = "0x6000088")]
	[Address(RVA = "0xC5EDEC", Offset = "0xC5EDEC", VA = "0xC5EDEC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000089")]
	[Address(RVA = "0xC5EDF0", Offset = "0xC5EDF0", VA = "0xC5EDF0")]
	private void Update()
	{
	}

	[Token(Token = "0x600008A")]
	[Address(RVA = "0xC5EDF4", Offset = "0xC5EDF4", VA = "0xC5EDF4")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600008B")]
	[Address(RVA = "0xC5F384", Offset = "0xC5F384", VA = "0xC5F384")]
	public SECTR_TreeSpawner()
	{
	}
}
[Token(Token = "0x200002D")]
public class SECTR_Wanderer : MonoBehaviour
{
	[Token(Token = "0x40000CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<SECTR_Graph.Node> path;

	[Token(Token = "0x40000CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<Vector3> waypoints;

	[Token(Token = "0x40000CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int currentWaypointIndex;

	[Token(Token = "0x40000CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SECTR_ToolTip("The speed at which the wanderer moves throughout the world.")]
	public float MovementSpeed;

	[Token(Token = "0x600008C")]
	[Address(RVA = "0xC5F39C", Offset = "0xC5F39C", VA = "0xC5F39C")]
	private void Update()
	{
	}

	[Token(Token = "0x600008D")]
	[Address(RVA = "0xC5FA60", Offset = "0xC5FA60", VA = "0xC5FA60")]
	public SECTR_Wanderer()
	{
	}
}
[Token(Token = "0x200002E")]
public class SECTR_StreamDemoUI : SECTR_DemoUI
{
	[Token(Token = "0x40000CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Multiline]
	public string NoExportMessage;

	[Token(Token = "0x600008E")]
	[Address(RVA = "0xC5FB30", Offset = "0xC5FB30", VA = "0xC5FB30", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x600008F")]
	[Address(RVA = "0xC5FBD8", Offset = "0xC5FBD8", VA = "0xC5FBD8", Slot = "6")]
	protected override void OnGUI()
	{
	}

	[Token(Token = "0x6000090")]
	[Address(RVA = "0xC5FDAC", Offset = "0xC5FDAC", VA = "0xC5FDAC")]
	public SECTR_StreamDemoUI()
	{
	}
}
[Token(Token = "0x200002F")]
public class SECTR_VisDemoUI : SECTR_DemoUI
{
	[Token(Token = "0x40000CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private string originalDemoMessage;

	[Token(Token = "0x40000D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Multiline]
	public string Unity4PerfMessage;

	[Token(Token = "0x6000091")]
	[Address(RVA = "0xC5FDB0", Offset = "0xC5FDB0", VA = "0xC5FDB0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000092")]
	[Address(RVA = "0xC5FF34", Offset = "0xC5FF34", VA = "0xC5FF34", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x6000093")]
	[Address(RVA = "0xC60004", Offset = "0xC60004", VA = "0xC60004", Slot = "6")]
	protected override void OnGUI()
	{
	}

	[Token(Token = "0x6000094")]
	[Address(RVA = "0xC6030C", Offset = "0xC6030C", VA = "0xC6030C")]
	protected void ToggleCulling(bool active)
	{
	}

	[Token(Token = "0x6000095")]
	[Address(RVA = "0xC603D4", Offset = "0xC603D4", VA = "0xC603D4")]
	public SECTR_VisDemoUI()
	{
	}
}
[Serializable]
[Token(Token = "0x2000030")]
public class SECTR_AudioAmbience
{
	[Token(Token = "0x40000D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SECTR_ToolTip("The looping 2D cue to play as long as this ambience is active.", null, false)]
	public SECTR_AudioCue BackgroundLoop;

	[Token(Token = "0x40000D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SECTR_ToolTip("A list of one-shots that will play randomly around the listener.")]
	public List<SECTR_AudioCue> OneShots;

	[Token(Token = "0x40000D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SECTR_ToolTip("The min and max time between one-shot playback.", "OneShots")]
	public Vector2 OneShotInterval;

	[Token(Token = "0x40000D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SECTR_ToolTip("The a volume scalar for the Cues in this Ambience. Combines with the base Cue volume.")]
	public float Volume;

	[Token(Token = "0x40000D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SECTR_ToolTip("When enabled the higher probability one shots will be more likely to play, gets the probability from the cue.")]
	public bool UseOneShotCuesProbability;

	[Token(Token = "0x40000D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public float TotalProbability;

	[Token(Token = "0x6000096")]
	[Address(RVA = "0xC603D8", Offset = "0xC603D8", VA = "0xC603D8")]
	public SECTR_AudioAmbience()
	{
	}
}
[Token(Token = "0x2000031")]
public class SECTR_AudioBus : ScriptableObject
{
	[Token(Token = "0x40000D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[HideInInspector]
	private SECTR_AudioBus parent;

	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<SECTR_AudioBus> children;

	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float userVolume;

	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float userPitch;

	[Token(Token = "0x40000DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float effectiveVolume;

	[Token(Token = "0x40000DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float effectivePitch;

	[Token(Token = "0x40000DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool muted;

	[Token(Token = "0x40000DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SECTR_ToolTip("The volume of this bus, between 0 and 1.", 0f, 1f)]
	public float Volume;

	[Token(Token = "0x40000DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SECTR_ToolTip("The pitch of this bus, between 0 and 2.", 0f, 2f)]
	public float Pitch;

	[Token(Token = "0x17000007")]
	public float UserVolume
	{
		[Token(Token = "0x6000098")]
		[Address(RVA = "0xC60478", Offset = "0xC60478", VA = "0xC60478")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000097")]
		[Address(RVA = "0xC60470", Offset = "0xC60470", VA = "0xC60470")]
		set
		{
		}
	}

	[Token(Token = "0x17000008")]
	public float UserPitch
	{
		[Token(Token = "0x600009A")]
		[Address(RVA = "0xC60488", Offset = "0xC60488", VA = "0xC60488")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000099")]
		[Address(RVA = "0xC60480", Offset = "0xC60480", VA = "0xC60480")]
		set
		{
		}
	}

	[Token(Token = "0x17000009")]
	public bool Muted
	{
		[Token(Token = "0x600009B")]
		[Address(RVA = "0xC60490", Offset = "0xC60490", VA = "0xC60490")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600009C")]
		[Address(RVA = "0xC60498", Offset = "0xC60498", VA = "0xC60498")]
		set
		{
		}
	}

	[Token(Token = "0x1700000A")]
	public float EffectiveVolume
	{
		[Token(Token = "0x600009D")]
		[Address(RVA = "0xC604A4", Offset = "0xC604A4", VA = "0xC604A4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600009E")]
		[Address(RVA = "0xC604AC", Offset = "0xC604AC", VA = "0xC604AC")]
		set
		{
		}
	}

	[Token(Token = "0x1700000B")]
	public float EffectivePitch
	{
		[Token(Token = "0x600009F")]
		[Address(RVA = "0xC604E0", Offset = "0xC604E0", VA = "0xC604E0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60000A0")]
		[Address(RVA = "0xC604E8", Offset = "0xC604E8", VA = "0xC604E8")]
		set
		{
		}
	}

	[Token(Token = "0x1700000C")]
	public SECTR_AudioBus Parent
	{
		[Token(Token = "0x60000A2")]
		[Address(RVA = "0xC60794", Offset = "0xC60794", VA = "0xC60794")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000A1")]
		[Address(RVA = "0xC60514", Offset = "0xC60514", VA = "0xC60514")]
		set
		{
		}
	}

	[Token(Token = "0x1700000D")]
	public List<SECTR_AudioBus> Children
	{
		[Token(Token = "0x60000A3")]
		[Address(RVA = "0xC6079C", Offset = "0xC6079C", VA = "0xC6079C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60000A4")]
	[Address(RVA = "0xC607A4", Offset = "0xC607A4", VA = "0xC607A4")]
	public bool IsAncestorOf(SECTR_AudioBus bus)
	{
		return default(bool);
	}

	[Token(Token = "0x60000A5")]
	[Address(RVA = "0xC60854", Offset = "0xC60854", VA = "0xC60854")]
	public bool IsDecendentOf(SECTR_AudioBus bus)
	{
		return default(bool);
	}

	[Token(Token = "0x60000A6")]
	[Address(RVA = "0xC60900", Offset = "0xC60900", VA = "0xC60900")]
	public void ResetUserVolume()
	{
	}

	[Token(Token = "0x60000A7")]
	[Address(RVA = "0xC609E8", Offset = "0xC609E8", VA = "0xC609E8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000A8")]
	[Address(RVA = "0xC60A68", Offset = "0xC60A68", VA = "0xC60A68")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000A9")]
	[Address(RVA = "0xC6067C", Offset = "0xC6067C", VA = "0xC6067C")]
	private void _AddChild(SECTR_AudioBus child)
	{
	}

	[Token(Token = "0x60000AA")]
	[Address(RVA = "0xC60624", Offset = "0xC60624", VA = "0xC60624")]
	private void _RemoveChild(SECTR_AudioBus child)
	{
	}

	[Token(Token = "0x60000AB")]
	[Address(RVA = "0xC60AE8", Offset = "0xC60AE8", VA = "0xC60AE8")]
	public SECTR_AudioBus()
	{
	}
}
[Token(Token = "0x2000032")]
public class SECTR_AudioCue : ScriptableObject
{
	[Token(Token = "0x2000033")]
	public enum PlaybackModes
	{
		[Token(Token = "0x4000101")]
		Random,
		[Token(Token = "0x4000102")]
		Shuffle,
		[Token(Token = "0x4000103")]
		Loop,
		[Token(Token = "0x4000104")]
		PingPong
	}

	[Token(Token = "0x2000034")]
	public enum FalloffTypes
	{
		[Token(Token = "0x4000106")]
		Linear,
		[Token(Token = "0x4000107")]
		Logarithmic
	}

	[Token(Token = "0x2000035")]
	public enum Spatializations
	{
		[Token(Token = "0x4000109")]
		Simple2D,
		[Token(Token = "0x400010A")]
		Infinite3D,
		[Token(Token = "0x400010B")]
		Local3D,
		[Token(Token = "0x400010C")]
		Occludable3D
	}

	[Serializable]
	[Token(Token = "0x2000036")]
	public class ClipData
	{
		[Token(Token = "0x400010D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private AudioClip clip;

		[Token(Token = "0x400010E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool playedInShuffle;

		[Token(Token = "0x400010F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float volume;

		[Token(Token = "0x4000110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private SECTR_ULong bakeTimestamp;

		[Token(Token = "0x4000111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve HDRCurve;

		[Token(Token = "0x17000014")]
		public AudioClip Clip
		{
			[Token(Token = "0x60000BD")]
			[Address(RVA = "0xC61438", Offset = "0xC61438", VA = "0xC61438")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000015")]
		public float Volume
		{
			[Token(Token = "0x60000BE")]
			[Address(RVA = "0xC61440", Offset = "0xC61440", VA = "0xC61440")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60000BF")]
			[Address(RVA = "0xC61448", Offset = "0xC61448", VA = "0xC61448")]
			set
			{
			}
		}

		[Token(Token = "0x17000016")]
		public bool PlayedInShuffle
		{
			[Token(Token = "0x60000C0")]
			[Address(RVA = "0xC61450", Offset = "0xC61450", VA = "0xC61450")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60000C1")]
			[Address(RVA = "0xC61458", Offset = "0xC61458", VA = "0xC61458")]
			set
			{
			}
		}

		[Token(Token = "0x60000BC")]
		[Address(RVA = "0xC613A8", Offset = "0xC613A8", VA = "0xC613A8")]
		public ClipData(AudioClip clip)
		{
		}
	}

	[Token(Token = "0x40000E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[HideInInspector]
	private SECTR_AudioCue template;

	[Token(Token = "0x40000E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	[SerializeField]
	private SECTR_AudioBus bus;

	[Token(Token = "0x40000E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int clipPlaybackIndex;

	[Token(Token = "0x40000E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool needsShuffling;

	[Token(Token = "0x40000E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	private bool pingPongIncrement;

	[Token(Token = "0x40000E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SECTR_ToolTip("List of Audio Clips for this Cue to choose from.")]
	public List<ClipData> AudioClips;

	[Token(Token = "0x40000E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SECTR_ToolTip("The rules for selecting which audio clip to play next")]
	public PlaybackModes PlaybackMode;

	[Token(Token = "0x40000E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SECTR_ToolTip("Determines if the sound should be mixed in HDR or LDR.")]
	public bool HDR;

	[Token(Token = "0x40000E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SECTR_ToolTip("The loudness, in dB(SPL), of this HDR Cue.")]
	public Vector2 Loudness;

	[Token(Token = "0x40000E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SECTR_ToolTip("The volume of this Cue.")]
	public Vector2 Volume;

	[Token(Token = "0x40000EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SECTR_ToolTip("The pitch adjustment of this Cue.")]
	public Vector2 Pitch;

	[Token(Token = "0x40000EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SECTR_ToolTip("Set to true to auto-loop this Cue.")]
	public bool Loops;

	[Token(Token = "0x40000EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SECTR_ToolTip("Cue priority, lower is more important.", 0f, 255f)]
	public int Priority;

	[Token(Token = "0x40000ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SECTR_ToolTip("Prevent this Cue from recieving Audio Effects.")]
	public bool BypassEffects;

	[Token(Token = "0x40000EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SECTR_ToolTip("Maximum number of instances of this Cue that can be played at once.", 1f, -1f)]
	public int MaxInstances;

	[Token(Token = "0x40000EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SECTR_ToolTip("Number of seconds over which to fade in the Cue when played.", 0f, -1f)]
	public float FadeInTime;

	[Token(Token = "0x40000F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[SECTR_ToolTip("Number of seconds over which to fade out the Cue when stopped.", 0f, -1f)]
	public float FadeOutTime;

	[Token(Token = "0x40000F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SECTR_ToolTip("Number of seconds to keep this Audio Cue alive after it has stopped playing. (Used to allow effects like reverb etc. to play out before destroying the Audio Source.)")]
	public int KeepAliveTime;

	[Token(Token = "0x40000F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[SECTR_ToolTip("Sets rules for how to spatialize this sound.")]
	public Spatializations Spatialization;

	[Token(Token = "0x40000F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SECTR_ToolTip("Expands or narrows the range of speakers out of which this Cue plays.", 0f, 360f)]
	public float Spread;

	[Token(Token = "0x40000F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[SECTR_ToolTip("Moves the sound around the speaker field.", -1f, 1f)]
	public float Pan2D;

	[Token(Token = "0x40000F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SECTR_ToolTip("Attenuation style of this clip.")]
	public FalloffTypes Falloff;

	[Token(Token = "0x40000F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[SECTR_ToolTip("The range at which the sound is no longer audible.", 0f, -1f)]
	public float MaxDistance;

	[Token(Token = "0x40000F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SECTR_ToolTip("The range within which the sound will be at peak volume/loudness.", 0f, -1f)]
	public float MinDistance;

	[Token(Token = "0x40000F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[SECTR_ToolTip("Scales the amount of doppler effect applied to this Cue.", 0f, 1f)]
	public float DopplerLevel;

	[Token(Token = "0x40000F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SECTR_ToolTip("Prevents too many instances of a cue playing near one another.", 0f, -1f)]
	public int ProximityLimit;

	[Token(Token = "0x40000FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[SECTR_ToolTip("The size of the proximity limit check.", "ProximityLimit", 0f, -1f)]
	public float ProximityRange;

	[Token(Token = "0x40000FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SECTR_ToolTip("Allows you to scale down the amount of occlusion applied to this Cue (when occluded).", 0f, 1f)]
	public float OcclusionScale;

	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	[SECTR_ToolTip("The chance that this cue will actually make a sound when played.", 0f, 1f)]
	public float PlayProbability;

	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SECTR_ToolTip("Random delay before start of playback.")]
	public Vector2 Delay;

	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SECTR_ToolTip("Special prefab to use when playing this Cue. Useful for adding effects to this source.", null, false)]
	public GameObject Prefab;

	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SECTR_ToolTip("Control parameters for this Cue")]
	public List<SECTR_CueParam> ControlParams;

	[Token(Token = "0x1700000E")]
	public SECTR_AudioCue Template
	{
		[Token(Token = "0x60000AD")]
		[Address(RVA = "0xC60C10", Offset = "0xC60C10", VA = "0xC60C10")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000AC")]
		[Address(RVA = "0xC60B74", Offset = "0xC60B74", VA = "0xC60B74")]
		set
		{
		}
	}

	[Token(Token = "0x1700000F")]
	public SECTR_AudioBus Bus
	{
		[Token(Token = "0x60000AF")]
		[Address(RVA = "0xC60C90", Offset = "0xC60C90", VA = "0xC60C90")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000AE")]
		[Address(RVA = "0xC60C18", Offset = "0xC60C18", VA = "0xC60C18")]
		set
		{
		}
	}

	[Token(Token = "0x17000010")]
	public SECTR_AudioCue SourceCue
	{
		[Token(Token = "0x60000B0")]
		[Address(RVA = "0xC60C98", Offset = "0xC60C98", VA = "0xC60C98")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000011")]
	public bool Is3D
	{
		[Token(Token = "0x60000B1")]
		[Address(RVA = "0xC60D08", Offset = "0xC60D08", VA = "0xC60D08")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000012")]
	public bool IsLocal
	{
		[Token(Token = "0x60000B2")]
		[Address(RVA = "0xC60D18", Offset = "0xC60D18", VA = "0xC60D18")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000013")]
	public int ClipIndex
	{
		[Token(Token = "0x60000B3")]
		[Address(RVA = "0xC60D28", Offset = "0xC60D28", VA = "0xC60D28")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60000B4")]
	[Address(RVA = "0xC60D30", Offset = "0xC60D30", VA = "0xC60D30")]
	public ClipData GetNextClip()
	{
		return null;
	}

	[Token(Token = "0x60000B5")]
	[Address(RVA = "0xC60FD0", Offset = "0xC60FD0", VA = "0xC60FD0")]
	public float MinClipLength()
	{
		return default(float);
	}

	[Token(Token = "0x60000B6")]
	[Address(RVA = "0xC610EC", Offset = "0xC610EC", VA = "0xC610EC")]
	public float MaxClipLength()
	{
		return default(float);
	}

	[Token(Token = "0x60000B7")]
	[Address(RVA = "0xC611F0", Offset = "0xC611F0", VA = "0xC611F0")]
	public void ResetClipIndex()
	{
	}

	[Token(Token = "0x60000B8")]
	[Address(RVA = "0xC61204", Offset = "0xC61204", VA = "0xC61204")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000B9")]
	[Address(RVA = "0xC61218", Offset = "0xC61218", VA = "0xC61218")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000BA")]
	[Address(RVA = "0xC60E8C", Offset = "0xC60E8C", VA = "0xC60E8C")]
	private void _ShuffleClips()
	{
	}

	[Token(Token = "0x60000BB")]
	[Address(RVA = "0xC6121C", Offset = "0xC6121C", VA = "0xC6121C")]
	public SECTR_AudioCue()
	{
	}
}
[Token(Token = "0x2000037")]
public interface SECTR_IAudioInstance
{
	[Token(Token = "0x17000017")]
	int Generation
	{
		[Token(Token = "0x60000C2")]
		get;
	}

	[Token(Token = "0x17000018")]
	bool Active
	{
		[Token(Token = "0x60000C3")]
		get;
	}

	[Token(Token = "0x17000019")]
	Vector3 Position
	{
		[Token(Token = "0x60000C4")]
		get;
		[Token(Token = "0x60000C5")]
		set;
	}

	[Token(Token = "0x1700001A")]
	Vector3 LocalPosition
	{
		[Token(Token = "0x60000C6")]
		get;
		[Token(Token = "0x60000C7")]
		set;
	}

	[Token(Token = "0x1700001B")]
	float Volume
	{
		[Token(Token = "0x60000C8")]
		get;
		[Token(Token = "0x60000C9")]
		set;
	}

	[Token(Token = "0x1700001C")]
	float Pitch
	{
		[Token(Token = "0x60000CA")]
		get;
		[Token(Token = "0x60000CB")]
		set;
	}

	[Token(Token = "0x1700001D")]
	bool Mute
	{
		[Token(Token = "0x60000CC")]
		get;
		[Token(Token = "0x60000CD")]
		set;
	}

	[Token(Token = "0x1700001E")]
	bool Pause
	{
		[Token(Token = "0x60000CE")]
		get;
		[Token(Token = "0x60000CF")]
		set;
	}

	[Token(Token = "0x1700001F")]
	int TimeSamples
	{
		[Token(Token = "0x60000D0")]
		get;
		[Token(Token = "0x60000D1")]
		set;
	}

	[Token(Token = "0x17000020")]
	float TimeSeconds
	{
		[Token(Token = "0x60000D2")]
		get;
		[Token(Token = "0x60000D3")]
		set;
	}

	[Token(Token = "0x60000D4")]
	void Stop(bool stopImmediately);

	[Token(Token = "0x60000D5")]
	void ForceInfinite();

	[Token(Token = "0x60000D6")]
	void ForceOcclusion(bool occluded);

	[Token(Token = "0x60000D7")]
	void SetParameter(string param, float value);

	[Token(Token = "0x60000D8")]
	AudioSource GetInternalAudioSource();
}
[Token(Token = "0x2000038")]
public struct SECTR_AudioCueInstance : SECTR_IAudioInstance
{
	[Token(Token = "0x4000112")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private SECTR_IAudioInstance internalInstance;

	[Token(Token = "0x4000113")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private int generation;

	[Token(Token = "0x17000021")]
	public int Generation
	{
		[Token(Token = "0x60000DA")]
		[Address(RVA = "0xC61470", Offset = "0xC61470", VA = "0xC61470", Slot = "4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000022")]
	public bool Active
	{
		[Token(Token = "0x60000DB")]
		[Address(RVA = "0xC61478", Offset = "0xC61478", VA = "0xC61478", Slot = "5")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000023")]
	public Vector3 Position
	{
		[Token(Token = "0x60000DC")]
		[Address(RVA = "0xC615A4", Offset = "0xC615A4", VA = "0xC615A4", Slot = "6")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x60000DD")]
		[Address(RVA = "0xC61694", Offset = "0xC61694", VA = "0xC61694", Slot = "7")]
		set
		{
		}
	}

	[Token(Token = "0x17000024")]
	public Vector3 LocalPosition
	{
		[Token(Token = "0x60000DE")]
		[Address(RVA = "0xC61780", Offset = "0xC61780", VA = "0xC61780", Slot = "8")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x60000DF")]
		[Address(RVA = "0xC61870", Offset = "0xC61870", VA = "0xC61870", Slot = "9")]
		set
		{
		}
	}

	[Token(Token = "0x17000025")]
	public float Volume
	{
		[Token(Token = "0x60000E0")]
		[Address(RVA = "0xC6195C", Offset = "0xC6195C", VA = "0xC6195C", Slot = "10")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60000E1")]
		[Address(RVA = "0xC61A1C", Offset = "0xC61A1C", VA = "0xC61A1C", Slot = "11")]
		set
		{
		}
	}

	[Token(Token = "0x17000026")]
	public float Pitch
	{
		[Token(Token = "0x60000E2")]
		[Address(RVA = "0xC61AEC", Offset = "0xC61AEC", VA = "0xC61AEC", Slot = "12")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60000E3")]
		[Address(RVA = "0xC61BAC", Offset = "0xC61BAC", VA = "0xC61BAC", Slot = "13")]
		set
		{
		}
	}

	[Token(Token = "0x17000027")]
	public bool Mute
	{
		[Token(Token = "0x60000E4")]
		[Address(RVA = "0xC61C7C", Offset = "0xC61C7C", VA = "0xC61C7C", Slot = "14")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000E5")]
		[Address(RVA = "0xC61D3C", Offset = "0xC61D3C", VA = "0xC61D3C", Slot = "15")]
		set
		{
		}
	}

	[Token(Token = "0x17000028")]
	public bool Pause
	{
		[Token(Token = "0x60000E6")]
		[Address(RVA = "0xC61E00", Offset = "0xC61E00", VA = "0xC61E00", Slot = "16")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000E7")]
		[Address(RVA = "0xC61EC0", Offset = "0xC61EC0", VA = "0xC61EC0", Slot = "17")]
		set
		{
		}
	}

	[Token(Token = "0x17000029")]
	public float TimeSeconds
	{
		[Token(Token = "0x60000E8")]
		[Address(RVA = "0xC61F84", Offset = "0xC61F84", VA = "0xC61F84", Slot = "20")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60000E9")]
		[Address(RVA = "0xC62044", Offset = "0xC62044", VA = "0xC62044", Slot = "21")]
		set
		{
		}
	}

	[Token(Token = "0x1700002A")]
	public int TimeSamples
	{
		[Token(Token = "0x60000EA")]
		[Address(RVA = "0xC62114", Offset = "0xC62114", VA = "0xC62114", Slot = "18")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60000EB")]
		[Address(RVA = "0xC621D4", Offset = "0xC621D4", VA = "0xC621D4", Slot = "19")]
		set
		{
		}
	}

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0xC61464", Offset = "0xC61464", VA = "0xC61464")]
	public SECTR_AudioCueInstance(SECTR_IAudioInstance internalInstance, int generation)
	{
	}

	[Token(Token = "0x60000EC")]
	[Address(RVA = "0xC59F5C", Offset = "0xC59F5C", VA = "0xC59F5C", Slot = "22")]
	public void Stop(bool stopImmediately)
	{
	}

	[Token(Token = "0x60000ED")]
	[Address(RVA = "0xC62298", Offset = "0xC62298", VA = "0xC62298", Slot = "23")]
	public void ForceInfinite()
	{
	}

	[Token(Token = "0x60000EE")]
	[Address(RVA = "0xC62354", Offset = "0xC62354", VA = "0xC62354", Slot = "24")]
	public void ForceOcclusion(bool occluded)
	{
	}

	[Token(Token = "0x60000EF")]
	[Address(RVA = "0xC62418", Offset = "0xC62418", VA = "0xC62418", Slot = "25")]
	public void SetParameter(string param, float value)
	{
	}

	[Token(Token = "0x60000F0")]
	[Address(RVA = "0xC624F0", Offset = "0xC624F0", VA = "0xC624F0", Slot = "26")]
	public AudioSource GetInternalAudioSource()
	{
		return null;
	}

	[Token(Token = "0x60000F1")]
	[Address(RVA = "0xC625B0", Offset = "0xC625B0", VA = "0xC625B0")]
	public SECTR_IAudioInstance GetInternalInstance()
	{
		return null;
	}

	[Token(Token = "0x60000F2")]
	[Address(RVA = "0xC59F38", Offset = "0xC59F38", VA = "0xC59F38")]
	public static implicit operator bool(SECTR_AudioCueInstance x)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000039")]
public abstract class SECTR_AudioEnvironment : MonoBehaviour
{
	[Token(Token = "0x4000114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool ambienceActive;

	[Token(Token = "0x4000115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SECTR_ToolTip("The configuraiton of the ambient audio in this Reverb Zone.")]
	public SECTR_AudioAmbience Ambience;

	[Token(Token = "0x1700002B")]
	public bool Active
	{
		[Token(Token = "0x60000F3")]
		[Address(RVA = "0xC625B8", Offset = "0xC625B8", VA = "0xC625B8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60000F4")]
	[Address(RVA = "0xC625C0", Offset = "0xC625C0", VA = "0xC625C0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000F5")]
	[Address(RVA = "0xC62608", Offset = "0xC62608", VA = "0xC62608")]
	protected void Activate()
	{
	}

	[Token(Token = "0x60000F6")]
	[Address(RVA = "0xC625E4", Offset = "0xC625E4", VA = "0xC625E4")]
	protected void Deactivate()
	{
	}

	[Token(Token = "0x60000F7")]
	[Address(RVA = "0xC627DC", Offset = "0xC627DC", VA = "0xC627DC")]
	protected SECTR_AudioEnvironment()
	{
	}
}
[Token(Token = "0x200003A")]
[AddComponentMenu("Procedural Worlds/SECTR/Audio/SECTR Audio Environment Trigger")]
public class SECTR_AudioEnvironmentTrigger : SECTR_AudioEnvironment
{
	[Token(Token = "0x4000116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject activator;

	[Token(Token = "0x60000F8")]
	[Address(RVA = "0xC62840", Offset = "0xC62840", VA = "0xC62840")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000F9")]
	[Address(RVA = "0xC628B4", Offset = "0xC628B4", VA = "0xC628B4")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60000FA")]
	[Address(RVA = "0xC62948", Offset = "0xC62948", VA = "0xC62948")]
	private void OnTriggerEnter2D(Collider2D other)
	{
	}

	[Token(Token = "0x60000FB")]
	[Address(RVA = "0xC629DC", Offset = "0xC629DC", VA = "0xC629DC")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60000FC")]
	[Address(RVA = "0xC62A84", Offset = "0xC62A84", VA = "0xC62A84")]
	private void OnTriggerExit2D(Collider2D other)
	{
	}

	[Token(Token = "0x60000FD")]
	[Address(RVA = "0xC62B2C", Offset = "0xC62B2C", VA = "0xC62B2C")]
	public SECTR_AudioEnvironmentTrigger()
	{
	}
}
[Token(Token = "0x200003B")]
[RequireComponent(typeof(AudioReverbZone))]
[AddComponentMenu("Procedural Worlds/SECTR/Audio/SECTR Audio Environment Zone")]
public class SECTR_AudioEnvironmentZone : SECTR_AudioEnvironment
{
	[Token(Token = "0x4000117")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private AudioReverbZone cachedZone;

	[Token(Token = "0x60000FE")]
	[Address(RVA = "0xC62B30", Offset = "0xC62B30", VA = "0xC62B30")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000FF")]
	[Address(RVA = "0xC62B80", Offset = "0xC62B80", VA = "0xC62B80")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000100")]
	[Address(RVA = "0xC62BA8", Offset = "0xC62BA8", VA = "0xC62BA8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000101")]
	[Address(RVA = "0xC62D88", Offset = "0xC62D88", VA = "0xC62D88")]
	public SECTR_AudioEnvironmentZone()
	{
	}
}
[Token(Token = "0x200003C")]
public abstract class SECTR_AudioSource : MonoBehaviour
{
	[Token(Token = "0x4000118")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	[SerializeField]
	protected float volume;

	[Token(Token = "0x4000119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	[HideInInspector]
	protected float pitch;

	[Token(Token = "0x400011A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool playedFromStart;

	[Token(Token = "0x400011B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SECTR_ToolTip("The Cue to play from this source.", null, false)]
	public SECTR_AudioCue Cue;

	[Token(Token = "0x400011C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SECTR_ToolTip("If the Cue should be forced to loop when playing.")]
	public bool Loop;

	[Token(Token = "0x400011D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	[SECTR_ToolTip("Should the Cue auto-play when created.")]
	public bool PlayOnStart;

	[Token(Token = "0x1700002C")]
	public float Volume
	{
		[Token(Token = "0x6000102")]
		[Address(RVA = "0xC62D8C", Offset = "0xC62D8C", VA = "0xC62D8C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000103")]
		[Address(RVA = "0xC62D94", Offset = "0xC62D94", VA = "0xC62D94")]
		set
		{
		}
	}

	[Token(Token = "0x1700002D")]
	public float Pitch
	{
		[Token(Token = "0x6000104")]
		[Address(RVA = "0xC62DC8", Offset = "0xC62DC8", VA = "0xC62DC8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000105")]
		[Address(RVA = "0xC62DD0", Offset = "0xC62DD0", VA = "0xC62DD0")]
		set
		{
		}
	}

	[Token(Token = "0x1700002E")]
	public abstract bool IsPlaying
	{
		[Token(Token = "0x6000106")]
		get;
	}

	[Token(Token = "0x6000107")]
	public abstract void Play();

	[Token(Token = "0x6000108")]
	public abstract void Stop(bool stopImmediately);

	[Token(Token = "0x6000109")]
	[Address(RVA = "0xC62E04", Offset = "0xC62E04", VA = "0xC62E04")]
	public void PlayEvent()
	{
	}

	[Token(Token = "0x600010A")]
	[Address(RVA = "0xC62E10", Offset = "0xC62E10", VA = "0xC62E10")]
	public void StopEvent(bool stopImmediately)
	{
	}

	[Token(Token = "0x600010B")]
	[Address(RVA = "0xC62E20", Offset = "0xC62E20", VA = "0xC62E20")]
	private void Start()
	{
	}

	[Token(Token = "0x600010C")]
	[Address(RVA = "0xC62E5C", Offset = "0xC62E5C", VA = "0xC62E5C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600010D")]
	[Address(RVA = "0xC62E9C", Offset = "0xC62E9C", VA = "0xC62E9C", Slot = "7")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x600010E")]
	protected abstract void OnVolumePitchChanged();

	[Token(Token = "0x600010F")]
	[Address(RVA = "0xC62EAC", Offset = "0xC62EAC", VA = "0xC62EAC")]
	protected SECTR_AudioSource()
	{
	}
}
[Token(Token = "0x200003D")]
[RequireComponent(typeof(SECTR_Member))]
[AddComponentMenu("Procedural Worlds/SECTR/Audio/SECTR Audio System")]
[ExecuteInEditMode]
[RequireComponent(typeof(AudioListener))]
public class SECTR_AudioSystem : MonoBehaviour
{
	[Token(Token = "0x200003E")]
	private class Instance : SECTR_IAudioInstance
	{
		[Token(Token = "0x200003F")]
		[Flags]
		private enum Flags
		{
			[Token(Token = "0x400015F")]
			Loops = 1,
			[Token(Token = "0x4000160")]
			FadingIn = 2,
			[Token(Token = "0x4000161")]
			FadingOut = 4,
			[Token(Token = "0x4000162")]
			Muted = 8,
			[Token(Token = "0x4000163")]
			Local = 0x10,
			[Token(Token = "0x4000164")]
			ThreeD = 0x20,
			[Token(Token = "0x4000165")]
			Paused = 0x40,
			[Token(Token = "0x4000166")]
			HDR = 0x80,
			[Token(Token = "0x4000167")]
			Occludable = 0x100,
			[Token(Token = "0x4000168")]
			Occluded = 0x200,
			[Token(Token = "0x4000169")]
			ForcedInfinite = 0x400,
			[Token(Token = "0x400016A")]
			Delayed = 0x800
		}

		[Token(Token = "0x4000149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public double KeepAliveTimeStamp;

		[Token(Token = "0x400014A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int generation;

		[Token(Token = "0x400014B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AudioSource source;

		[Token(Token = "0x400014C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AudioLowPassFilter lowpass;

		[Token(Token = "0x400014D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SECTR_AudioCue audioCue;

		[Token(Token = "0x400014E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform parent;

		[Token(Token = "0x400014F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 localPosition;

		[Token(Token = "0x4000150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Flags flags;

		[Token(Token = "0x4000151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float nextTestTime;

		[Token(Token = "0x4000152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float fadeStarTime;

		[Token(Token = "0x4000153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float basePitch;

		[Token(Token = "0x4000154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float baseVolumeLoudness;

		[Token(Token = "0x4000155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float userVolume;

		[Token(Token = "0x4000156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float userPitch;

		[Token(Token = "0x4000157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float occlusionAlpha;

		[Token(Token = "0x4000158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private AnimationCurve hdrCurve;

		[Token(Token = "0x4000159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Dictionary<SECTR_CueParam, float> paramTable;

		[Token(Token = "0x400015A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private List<float> volumeParamValues;

		[Token(Token = "0x400015B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<float> pitchParamValues;

		[Token(Token = "0x400015C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Dictionary<SECTR_CueParam.AttributeData, float> attributeParamValues;

		[Token(Token = "0x400015D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Dictionary<SECTR_CueParam.AttributeData, float> attributeParamBaseValues;

		[Token(Token = "0x17000033")]
		public int Generation
		{
			[Token(Token = "0x600012C")]
			[Address(RVA = "0xC6762C", Offset = "0xC6762C", VA = "0xC6762C", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000034")]
		public bool Active
		{
			[Token(Token = "0x600012D")]
			[Address(RVA = "0xC670F4", Offset = "0xC670F4", VA = "0xC670F4", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000035")]
		public Vector3 Position
		{
			[Token(Token = "0x600012E")]
			[Address(RVA = "0xC67430", Offset = "0xC67430", VA = "0xC67430", Slot = "6")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600012F")]
			[Address(RVA = "0xC6767C", Offset = "0xC6767C", VA = "0xC6767C", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x17000036")]
		public Vector3 LocalPosition
		{
			[Token(Token = "0x6000130")]
			[Address(RVA = "0xC677F4", Offset = "0xC677F4", VA = "0xC677F4", Slot = "8")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000131")]
			[Address(RVA = "0xC67800", Offset = "0xC67800", VA = "0xC67800", Slot = "9")]
			set
			{
			}
		}

		[Token(Token = "0x17000037")]
		public float Volume
		{
			[Token(Token = "0x6000132")]
			[Address(RVA = "0xC678C8", Offset = "0xC678C8", VA = "0xC678C8", Slot = "10")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000133")]
			[Address(RVA = "0xC678D0", Offset = "0xC678D0", VA = "0xC678D0", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x17000038")]
		public float Pitch
		{
			[Token(Token = "0x6000134")]
			[Address(RVA = "0xC67908", Offset = "0xC67908", VA = "0xC67908", Slot = "12")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000135")]
			[Address(RVA = "0xC67910", Offset = "0xC67910", VA = "0xC67910", Slot = "13")]
			set
			{
			}
		}

		[Token(Token = "0x17000039")]
		public bool Mute
		{
			[Token(Token = "0x6000136")]
			[Address(RVA = "0xC67948", Offset = "0xC67948", VA = "0xC67948", Slot = "14")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000137")]
			[Address(RVA = "0xC67960", Offset = "0xC67960", VA = "0xC67960", Slot = "15")]
			set
			{
			}
		}

		[Token(Token = "0x1700003A")]
		public bool Pause
		{
			[Token(Token = "0x6000138")]
			[Address(RVA = "0xC67A24", Offset = "0xC67A24", VA = "0xC67A24", Slot = "16")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000139")]
			[Address(RVA = "0xC64780", Offset = "0xC64780", VA = "0xC64780", Slot = "17")]
			set
			{
			}
		}

		[Token(Token = "0x1700003B")]
		public float TimeSeconds
		{
			[Token(Token = "0x600013A")]
			[Address(RVA = "0xC67A4C", Offset = "0xC67A4C", VA = "0xC67A4C", Slot = "20")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600013B")]
			[Address(RVA = "0xC67AD4", Offset = "0xC67AD4", VA = "0xC67AD4", Slot = "21")]
			set
			{
			}
		}

		[Token(Token = "0x1700003C")]
		public int TimeSamples
		{
			[Token(Token = "0x600013C")]
			[Address(RVA = "0xC67B68", Offset = "0xC67B68", VA = "0xC67B68", Slot = "18")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600013D")]
			[Address(RVA = "0xC67BF0", Offset = "0xC67BF0", VA = "0xC67BF0", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x1700003D")]
		public bool Loops
		{
			[Token(Token = "0x6000142")]
			[Address(RVA = "0xC67634", Offset = "0xC67634", VA = "0xC67634")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700003E")]
		public bool Local
		{
			[Token(Token = "0x6000143")]
			[Address(RVA = "0xC67670", Offset = "0xC67670", VA = "0xC67670")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700003F")]
		public bool ThreeD
		{
			[Token(Token = "0x6000144")]
			[Address(RVA = "0xC67664", Offset = "0xC67664", VA = "0xC67664")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000040")]
		public bool FadingIn
		{
			[Token(Token = "0x6000145")]
			[Address(RVA = "0xC680BC", Offset = "0xC680BC", VA = "0xC680BC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000041")]
		public bool FadingOut
		{
			[Token(Token = "0x6000146")]
			[Address(RVA = "0xC671A8", Offset = "0xC671A8", VA = "0xC671A8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000042")]
		public bool Muted
		{
			[Token(Token = "0x6000147")]
			[Address(RVA = "0xC67954", Offset = "0xC67954", VA = "0xC67954")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000043")]
		public bool Paused
		{
			[Token(Token = "0x6000148")]
			[Address(RVA = "0xC6764C", Offset = "0xC6764C", VA = "0xC6764C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000044")]
		public bool HDR
		{
			[Token(Token = "0x6000149")]
			[Address(RVA = "0xC680C8", Offset = "0xC680C8", VA = "0xC680C8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000045")]
		public bool Occludable
		{
			[Token(Token = "0x600014A")]
			[Address(RVA = "0xC680D4", Offset = "0xC680D4", VA = "0xC680D4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000046")]
		public bool Occluded
		{
			[Token(Token = "0x600014B")]
			[Address(RVA = "0xC680E0", Offset = "0xC680E0", VA = "0xC680E0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000047")]
		public bool ForcedInfinite
		{
			[Token(Token = "0x600014C")]
			[Address(RVA = "0xC680EC", Offset = "0xC680EC", VA = "0xC680EC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000048")]
		public bool Delayed
		{
			[Token(Token = "0x600014D")]
			[Address(RVA = "0xC67640", Offset = "0xC67640", VA = "0xC67640")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000049")]
		public SECTR_AudioBus Bus
		{
			[Token(Token = "0x600014E")]
			[Address(RVA = "0xC64700", Offset = "0xC64700", VA = "0xC64700")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004A")]
		public SECTR_AudioCue Cue
		{
			[Token(Token = "0x600014F")]
			[Address(RVA = "0xC680F8", Offset = "0xC680F8", VA = "0xC680F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600013E")]
		[Address(RVA = "0xC67C84", Offset = "0xC67C84", VA = "0xC67C84", Slot = "23")]
		public void ForceInfinite()
		{
		}

		[Token(Token = "0x600013F")]
		[Address(RVA = "0xC67D7C", Offset = "0xC67D7C", VA = "0xC67D7C", Slot = "24")]
		public void ForceOcclusion(bool occluded)
		{
		}

		[Token(Token = "0x6000140")]
		[Address(RVA = "0xC67E24", Offset = "0xC67E24", VA = "0xC67E24", Slot = "25")]
		public void SetParameter(string param, float value)
		{
		}

		[Token(Token = "0x6000141")]
		[Address(RVA = "0xC680B4", Offset = "0xC680B4", VA = "0xC680B4", Slot = "26")]
		public AudioSource GetInternalAudioSource()
		{
			return null;
		}

		[Token(Token = "0x6000150")]
		[Address(RVA = "0xC63638", Offset = "0xC63638", VA = "0xC63638")]
		public void Init(SECTR_AudioCue audioCue, Transform parent, Vector3 localPosition, bool loops)
		{
		}

		[Token(Token = "0x6000151")]
		[Address(RVA = "0xC63D18", Offset = "0xC63D18", VA = "0xC63D18")]
		public void Clone(Instance instance, Vector3 newPosition)
		{
		}

		[Token(Token = "0x6000152")]
		[Address(RVA = "0xC67258", Offset = "0xC67258", VA = "0xC67258")]
		public void Uninit()
		{
		}

		[Token(Token = "0x6000153")]
		[Address(RVA = "0xC63830", Offset = "0xC63830", VA = "0xC63830")]
		public void Play()
		{
		}

		[Token(Token = "0x6000154")]
		[Address(RVA = "0xC658B4", Offset = "0xC658B4", VA = "0xC658B4", Slot = "22")]
		public void Stop(bool stopImmediately)
		{
		}

		[Token(Token = "0x6000155")]
		[Address(RVA = "0xC66114", Offset = "0xC66114", VA = "0xC66114")]
		public void Update(float deltaTime, bool volumeOnly)
		{
		}

		[Token(Token = "0x6000156")]
		[Address(RVA = "0xC67A08", Offset = "0xC67A08", VA = "0xC67A08")]
		private void _SetFlag(Flags flag, bool on)
		{
		}

		[Token(Token = "0x6000157")]
		[Address(RVA = "0xC67A3C", Offset = "0xC67A3C", VA = "0xC67A3C")]
		private bool _GetFlag(Flags flag)
		{
			return default(bool);
		}

		[Token(Token = "0x6000158")]
		[Address(RVA = "0xC682FC", Offset = "0xC682FC", VA = "0xC682FC")]
		private bool _AcquireSource()
		{
			return default(bool);
		}

		[Token(Token = "0x6000159")]
		[Address(RVA = "0xC68E4C", Offset = "0xC68E4C", VA = "0xC68E4C")]
		private void _ReleaseSource()
		{
		}

		[Token(Token = "0x600015A")]
		[Address(RVA = "0xC68100", Offset = "0xC68100", VA = "0xC68100")]
		private void _AddProximityInstance(SECTR_AudioCue srcCue)
		{
		}

		[Token(Token = "0x600015B")]
		[Address(RVA = "0xC68288", Offset = "0xC68288", VA = "0xC68288")]
		private void _ScheduleNextTest()
		{
		}

		[Token(Token = "0x600015C")]
		[Address(RVA = "0xC690CC", Offset = "0xC690CC", VA = "0xC690CC")]
		private void _Stop(bool stopImmediately)
		{
		}

		[Token(Token = "0x600015D")]
		[Address(RVA = "0xC653C8", Offset = "0xC653C8", VA = "0xC653C8")]
		public Instance()
		{
		}
	}

	[Token(Token = "0x2000040")]
	[Flags]
	public enum OcclusionModes
	{
		[Token(Token = "0x400016C")]
		Graph = 1,
		[Token(Token = "0x400016D")]
		Raycast = 2,
		[Token(Token = "0x400016E")]
		Distance = 4
	}

	[Token(Token = "0x400011E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static SECTR_AudioSystem audioSystem;

	[Token(Token = "0x400011F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Stack<Instance> instancePool;

	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static Stack<AudioSource> simpleSourcePool;

	[Token(Token = "0x4000121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static Stack<AudioSource> lowpassSourcePool;

	[Token(Token = "0x4000122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static Dictionary<GameObject, Stack<AudioSource>> prefabSourcePool;

	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static Transform sourcePoolParent;

	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static List<Instance> activeInstances;

	[Token(Token = "0x4000125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static Dictionary<SECTR_AudioCue, int> maxInstancesTable;

	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static Dictionary<SECTR_AudioCue, List<Instance>> proximityTable;

	[Token(Token = "0x4000127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static float currentTime;

	[Token(Token = "0x4000128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private static List<SECTR_AudioAmbience> ambienceStack;

	[Token(Token = "0x4000129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private static SECTR_AudioAmbience currentAmbience;

	[Token(Token = "0x400012A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static SECTR_AudioCueInstance ambienceLoop;

	[Token(Token = "0x400012B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private static SECTR_AudioCueInstance ambienceOneShot;

	[Token(Token = "0x400012C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private static float nextAmbienceOneShotTime;

	[Token(Token = "0x400012D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private static SECTR_AudioCue currentMusic;

	[Token(Token = "0x400012E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private static SECTR_AudioCueInstance musicLoop;

	[Token(Token = "0x400012F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private static float windowHDRMax;

	[Token(Token = "0x4000130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private static float windowHDRMin;

	[Token(Token = "0x4000131")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private static float currentLoudness;

	[Token(Token = "0x4000132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private static List<SECTR_Graph.Node> occlusionPath;

	[Token(Token = "0x4000133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private static SECTR_Member cachedMember;

	[Token(Token = "0x4000134")]
	private const float EPSILON = 0.001f;

	[Token(Token = "0x4000135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SECTR_ToolTip("The maximum number of instances that can be active at once. Inaudible sounds do not count against this limit.")]
	public int MaxInstances;

	[Token(Token = "0x4000136")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SECTR_ToolTip("The number of instances to allocate with lowpass effects (for occlusion and the like).")]
	public int LowpassInstances;

	[Token(Token = "0x4000137")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SECTR_ToolTip("The Bus at the top of the mixing heirarchy. Required to play sounds.", null, false)]
	public SECTR_AudioBus MasterBus;

	[Token(Token = "0x4000138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SECTR_ToolTip("The baseline settings for any environmental audio. Will be audible when no other ambiences are active.")]
	public SECTR_AudioAmbience DefaultAmbience;

	[Token(Token = "0x4000139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SECTR_ToolTip("Minimum Loudness for the HDR mixer. Current Loudness will never drop below this.", 0f, 200f)]
	public float HDRBaseLoudness;

	[Token(Token = "0x400013A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SECTR_ToolTip("The maximum difference between the loudest sound and the softest sound before sounds are simply culled out.", 0f, 200f)]
	public float HDRWindowSize;

	[Token(Token = "0x400013B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SECTR_ToolTip("Speed at which HDR window decays after a loud sound is played.", 0f, 100f)]
	public float HDRDecay;

	[Token(Token = "0x400013C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SECTR_ToolTip("Should sounds close to the listener be blended into 2D (to avoid harsh stereo switching).")]
	public bool BlendNearbySounds;

	[Token(Token = "0x400013D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SECTR_ToolTip("Objects close to the listener will be blended into 2D, as a kind of fake HRTF. This determines the start and end of that blend.", "BlendNearbySounds")]
	public Vector2 NearBlendRange;

	[Token(Token = "0x400013E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SECTR_ToolTip("Determines what kind of logic to use for computing sound occlusion.", null, typeof(OcclusionModes))]
	public OcclusionModes OcclusionFlags;

	[Token(Token = "0x400013F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SECTR_ToolTip("The distance beyond which sounds will be considered occluded, if Distance occlusion is enabled.", "OcclusionFlags")]
	public float OcclusionDistance;

	[Token(Token = "0x4000140")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SECTR_ToolTip("The layers to test against when raycasting for occlusion.", "OcclusionFlags")]
	public LayerMask RaycastLayers;

	[Token(Token = "0x4000141")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SECTR_ToolTip("The amount by which to decrease the volume of occluded sounds.", "OcclusionFlags", 0f, 1f)]
	public float OcclusionVolume;

	[Token(Token = "0x4000142")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SECTR_ToolTip("The frequency cutoff of the lowpass filter for occluded sounds.", "OcclusionFlags", 10f, 22000f)]
	public float OcclusionCutoff;

	[Token(Token = "0x4000143")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SECTR_ToolTip("The resonance Q of the lowpass filter for occluded sounds.", "OcclusionFlags", 1f, 10f)]
	public float OcclusionResonanceQ;

	[Token(Token = "0x4000144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SECTR_ToolTip("The amount of time between tests to see if looping sounds should start or stop running.")]
	public Vector2 RetestInterval;

	[Token(Token = "0x4000145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SECTR_ToolTip("The amount of buffer to give before culling distant sounds.")]
	public float CullingBuffer;

	[Token(Token = "0x4000146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[SECTR_ToolTip("Enable or disable of the in-game audio HUD.", true)]
	public bool ShowAudioHUD;

	[Token(Token = "0x4000147")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SECTR_ToolTip("Material to use to render HUD lines.", true)]
	public Material HUDLineMaterial;

	[Token(Token = "0x4000148")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SECTR_ToolTip("In the editor only, puts the listener at the AudioSystem, not at the Scene Camera.", true)]
	public bool Debugging;

	[Token(Token = "0x1700002F")]
	public static bool Initialized
	{
		[Token(Token = "0x6000110")]
		[Address(RVA = "0xC62CBC", Offset = "0xC62CBC", VA = "0xC62CBC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000030")]
	public static SECTR_Member Member
	{
		[Token(Token = "0x6000111")]
		[Address(RVA = "0xC62EC4", Offset = "0xC62EC4", VA = "0xC62EC4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000031")]
	public static SECTR_AudioSystem AudioSystem
	{
		[Token(Token = "0x6000112")]
		[Address(RVA = "0xC62F0C", Offset = "0xC62F0C", VA = "0xC62F0C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000032")]
	public static Transform Listener
	{
		[Token(Token = "0x6000113")]
		[Address(RVA = "0xC62D34", Offset = "0xC62D34", VA = "0xC62D34")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000114")]
	[Address(RVA = "0xC59E8C", Offset = "0xC59E8C", VA = "0xC59E8C")]
	public static SECTR_AudioCueInstance Play(SECTR_AudioCue audioCue, Vector3 position, bool loop)
	{
		return default(SECTR_AudioCueInstance);
	}

	[Token(Token = "0x6000115")]
	[Address(RVA = "0xC62F54", Offset = "0xC62F54", VA = "0xC62F54")]
	public static SECTR_AudioCueInstance Play(SECTR_AudioCue audioCue, Transform parent, Vector3 localPosition, bool loop)
	{
		return default(SECTR_AudioCueInstance);
	}

	[Token(Token = "0x6000116")]
	[Address(RVA = "0xC63B58", Offset = "0xC63B58", VA = "0xC63B58")]
	public static SECTR_AudioCueInstance Clone(SECTR_AudioCueInstance instance, Vector3 newPosition)
	{
		return default(SECTR_AudioCueInstance);
	}

	[Token(Token = "0x6000117")]
	[Address(RVA = "0xC63EB8", Offset = "0xC63EB8", VA = "0xC63EB8")]
	public static void PlayMusic(SECTR_AudioCue musicCue)
	{
	}

	[Token(Token = "0x6000118")]
	[Address(RVA = "0xC6408C", Offset = "0xC6408C", VA = "0xC6408C")]
	public static void StopMusic(bool stopImmediate)
	{
	}

	[Token(Token = "0x6000119")]
	[Address(RVA = "0xC6263C", Offset = "0xC6263C", VA = "0xC6263C")]
	public static void PushAmbience(SECTR_AudioAmbience ambience)
	{
	}

	[Token(Token = "0x600011A")]
	[Address(RVA = "0xC62754", Offset = "0xC62754", VA = "0xC62754")]
	public static void RemoveAmbience(SECTR_AudioAmbience ambience)
	{
	}

	[Token(Token = "0x600011B")]
	[Address(RVA = "0xC640F4", Offset = "0xC640F4", VA = "0xC640F4")]
	public static void SetBusVolume(string busName, float volume)
	{
	}

	[Token(Token = "0x600011C")]
	[Address(RVA = "0xC64310", Offset = "0xC64310", VA = "0xC64310")]
	public static void SetBusVolume(SECTR_AudioBus bus, float volume)
	{
	}

	[Token(Token = "0x600011D")]
	[Address(RVA = "0xC643E0", Offset = "0xC643E0", VA = "0xC643E0")]
	public static void MuteBus(string busName, bool mute)
	{
	}

	[Token(Token = "0x600011E")]
	[Address(RVA = "0xC644B8", Offset = "0xC644B8", VA = "0xC644B8")]
	public static void MuteBus(SECTR_AudioBus bus, bool mute)
	{
	}

	[Token(Token = "0x600011F")]
	[Address(RVA = "0xC64580", Offset = "0xC64580", VA = "0xC64580")]
	public static void PauseBus(SECTR_AudioBus bus, bool paused)
	{
	}

	[Token(Token = "0x6000120")]
	[Address(RVA = "0xC64834", Offset = "0xC64834", VA = "0xC64834")]
	public static bool IsOccluded(Vector3 worldSpacePosition, OcclusionModes occlusionFlags)
	{
		return default(bool);
	}

	[Token(Token = "0x6000121")]
	[Address(RVA = "0xC64AFC", Offset = "0xC64AFC", VA = "0xC64AFC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000122")]
	[Address(RVA = "0xC656F0", Offset = "0xC656F0", VA = "0xC656F0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000123")]
	[Address(RVA = "0xC658CC", Offset = "0xC658CC", VA = "0xC658CC")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000124")]
	[Address(RVA = "0xC632E4", Offset = "0xC632E4", VA = "0xC632E4")]
	private static bool _CheckInstances(SECTR_AudioCue audioCue, bool isPlaying)
	{
		return default(bool);
	}

	[Token(Token = "0x6000125")]
	[Address(RVA = "0xC633AC", Offset = "0xC633AC", VA = "0xC633AC")]
	private static bool _CheckProximity(SECTR_AudioCue audioCue, Transform parent, Vector3 position, Instance testInstance)
	{
		return default(bool);
	}

	[Token(Token = "0x6000126")]
	[Address(RVA = "0xC671B4", Offset = "0xC671B4", VA = "0xC671B4")]
	private static double GetUnixTimeStamp()
	{
		return default(double);
	}

	[Token(Token = "0x6000127")]
	[Address(RVA = "0xC6555C", Offset = "0xC6555C", VA = "0xC6555C")]
	private static float _UpdateTime()
	{
		return default(float);
	}

	[Token(Token = "0x6000128")]
	[Address(RVA = "0xC655B8", Offset = "0xC655B8", VA = "0xC655B8")]
	private static void _UpdateBusPitchVolume(SECTR_AudioBus bus, float effectiveVolume, float effectivePitch)
	{
	}

	[Token(Token = "0x6000129")]
	[Address(RVA = "0xC65B4C", Offset = "0xC65B4C", VA = "0xC65B4C")]
	private static void _UpdateAmbience()
	{
	}

	[Token(Token = "0x600012A")]
	[Address(RVA = "0xC641DC", Offset = "0xC641DC", VA = "0xC641DC")]
	private static SECTR_AudioBus _FindBus(SECTR_AudioBus bus, string busName)
	{
		return null;
	}

	[Token(Token = "0x600012B")]
	[Address(RVA = "0xC67558", Offset = "0xC67558", VA = "0xC67558")]
	public SECTR_AudioSystem()
	{
	}
}
[Token(Token = "0x2000041")]
[AddComponentMenu("Procedural Worlds/SECTR/Audio/SECTR Character Audio")]
public class SECTR_CharacterAudio : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000042")]
	public class SurfaceSound
	{
		[Token(Token = "0x4000172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SECTR_ToolTip("The material that this set applies to.")]
		public PhysicMaterial SurfaceMaterial;

		[Token(Token = "0x4000173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SECTR_ToolTip("Default footstep sound. Used if no material specific sound exists.")]
		public SECTR_AudioCue FootstepCue;

		[Token(Token = "0x4000174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SECTR_ToolTip("Default footstep sound. Used if no material specific sound exists.")]
		public SECTR_AudioCue JumpCue;

		[Token(Token = "0x4000175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SECTR_ToolTip("Default landing sound. Used if no material specific sound exists.")]
		public SECTR_AudioCue LandCue;

		[Token(Token = "0x6000165")]
		[Address(RVA = "0xC6A640", Offset = "0xC6A640", VA = "0xC6A640")]
		public SurfaceSound()
		{
		}
	}

	[Token(Token = "0x400016F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<PhysicMaterial, SurfaceSound> surfaceTable;

	[Token(Token = "0x4000170")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SECTR_ToolTip("Default sounds to play if there is no material specific sound.")]
	public SurfaceSound DefaultSounds;

	[Token(Token = "0x4000171")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SECTR_ToolTip("List of surface specific sounds.")]
	public List<SurfaceSound> SurfaceSounds;

	[Token(Token = "0x600015E")]
	[Address(RVA = "0xC6A298", Offset = "0xC6A298", VA = "0xC6A298")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600015F")]
	[Address(RVA = "0xC6A3F8", Offset = "0xC6A3F8", VA = "0xC6A3F8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000160")]
	[Address(RVA = "0xC6A400", Offset = "0xC6A400", VA = "0xC6A400")]
	private void OnFootstep(PhysicMaterial currentMaterial)
	{
	}

	[Token(Token = "0x6000161")]
	[Address(RVA = "0xC6A4FC", Offset = "0xC6A4FC", VA = "0xC6A4FC")]
	private void OnJump(PhysicMaterial currentMaterial)
	{
	}

	[Token(Token = "0x6000162")]
	[Address(RVA = "0xC6A548", Offset = "0xC6A548", VA = "0xC6A548")]
	private void OnLand(PhysicMaterial currentMaterial)
	{
	}

	[Token(Token = "0x6000163")]
	[Address(RVA = "0xC6A44C", Offset = "0xC6A44C", VA = "0xC6A44C")]
	private SurfaceSound _GetCurrentSurface(PhysicMaterial currentMaterial)
	{
		return null;
	}

	[Token(Token = "0x6000164")]
	[Address(RVA = "0xC6A594", Offset = "0xC6A594", VA = "0xC6A594")]
	public SECTR_CharacterAudio()
	{
	}
}
[Token(Token = "0x2000043")]
[RequireComponent(typeof(AudioSource))]
[ExecuteInEditMode]
[AddComponentMenu("")]
public class SECTR_ComputeRMS : MonoBehaviour
{
	[Token(Token = "0x2000044")]
	private struct BakeInfo
	{
		[Token(Token = "0x400017D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SECTR_AudioCue cue;

		[Token(Token = "0x400017E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public SECTR_AudioCue.ClipData clipData;

		[Token(Token = "0x600016D")]
		[Address(RVA = "0xC6B238", Offset = "0xC6B238", VA = "0xC6B238")]
		public BakeInfo(SECTR_AudioCue cue, SECTR_AudioCue.ClipData clipData)
		{
		}
	}

	[Token(Token = "0x4000176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<BakeInfo> hdrBakeList;

	[Token(Token = "0x4000177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<SECTR_ComputeRMS> activeBakeList;

	[Token(Token = "0x4000178")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int hdrBakeIndex;

	[Token(Token = "0x4000179")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private SECTR_AudioCue cue;

	[Token(Token = "0x400017A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private SECTR_AudioCue.ClipData clipData;

	[Token(Token = "0x400017B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<float> samples;

	[Token(Token = "0x400017C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int numChannels;

	[Token(Token = "0x1700004B")]
	public float Progress
	{
		[Token(Token = "0x6000166")]
		[Address(RVA = "0xC6A648", Offset = "0xC6A648", VA = "0xC6A648")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6000167")]
	[Address(RVA = "0xC6A820", Offset = "0xC6A820", VA = "0xC6A820")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000168")]
	[Address(RVA = "0xC6A824", Offset = "0xC6A824", VA = "0xC6A824")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000169")]
	[Address(RVA = "0xC6A828", Offset = "0xC6A828", VA = "0xC6A828")]
	private void Update()
	{
	}

	[Token(Token = "0x600016A")]
	[Address(RVA = "0xC6B110", Offset = "0xC6B110", VA = "0xC6B110")]
	private void OnAudioFilterRead(float[] samples, int numChannels)
	{
	}

	[Token(Token = "0x600016B")]
	[Address(RVA = "0xC6AF9C", Offset = "0xC6AF9C", VA = "0xC6AF9C")]
	public void _StartCompute(SECTR_AudioCue cue, SECTR_AudioCue.ClipData clipData)
	{
	}

	[Token(Token = "0x600016C")]
	[Address(RVA = "0xC6B178", Offset = "0xC6B178", VA = "0xC6B178")]
	public SECTR_ComputeRMS()
	{
	}
}
[Serializable]
[Token(Token = "0x2000045")]
public class SECTR_CueParam
{
	[Token(Token = "0x2000046")]
	public enum TargetType
	{
		[Token(Token = "0x4000186")]
		Volume,
		[Token(Token = "0x4000187")]
		Pitch,
		[Token(Token = "0x4000188")]
		Attribute
	}

	[Serializable]
	[Token(Token = "0x2000047")]
	public class AttributeData
	{
		[Token(Token = "0x4000189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Type componentType;

		[Token(Token = "0x400018A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private string componentTypeString;

		[Token(Token = "0x400018B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string attributeName;

		[Token(Token = "0x400018C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool fieldAttribute;

		[Token(Token = "0x1700004C")]
		public Type ComponentType
		{
			[Token(Token = "0x6000170")]
			[Address(RVA = "0xC6B434", Offset = "0xC6B434", VA = "0xC6B434")]
			get
			{
				return null;
			}
			[Token(Token = "0x600016F")]
			[Address(RVA = "0xC6B3A4", Offset = "0xC6B3A4", VA = "0xC6B3A4")]
			set
			{
			}
		}

		[Token(Token = "0x6000171")]
		[Address(RVA = "0xC6B508", Offset = "0xC6B508", VA = "0xC6B508")]
		public AttributeData()
		{
		}
	}

	[Token(Token = "0x400017F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string name;

	[Token(Token = "0x4000180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TargetType affects;

	[Token(Token = "0x4000181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float defaultValue;

	[Token(Token = "0x4000182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve curve;

	[Token(Token = "0x4000183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AttributeData attributeData;

	[Token(Token = "0x4000184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool toggle;

	[Token(Token = "0x600016E")]
	[Address(RVA = "0xC6B240", Offset = "0xC6B240", VA = "0xC6B240")]
	public SECTR_CueParam()
	{
	}
}
[Token(Token = "0x2000048")]
[AddComponentMenu("Procedural Worlds/SECTR/Audio/SECTR Door Audio")]
public class SECTR_DoorAudio : MonoBehaviour
{
	[Token(Token = "0x400018D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private SECTR_AudioCueInstance instance;

	[Token(Token = "0x400018E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SECTR_ToolTip("Sound to play while door is in Open state.", null, false)]
	public SECTR_AudioCue OpenLoopCue;

	[Token(Token = "0x400018F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SECTR_ToolTip("Sound to play while door is in Closed state.", null, false)]
	public SECTR_AudioCue ClosedLoopCue;

	[Token(Token = "0x4000190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SECTR_ToolTip("Sound to play when door starts to open.", null, false)]
	public SECTR_AudioCue OpeningCue;

	[Token(Token = "0x4000191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SECTR_ToolTip("Sound to play while door starts to close.", null, false)]
	public SECTR_AudioCue ClosingCue;

	[Token(Token = "0x4000192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SECTR_ToolTip("Sound to play while waiting for the door to start opening.", null, false)]
	public SECTR_AudioCue WaitingCue;

	[Token(Token = "0x6000172")]
	[Address(RVA = "0xC6B510", Offset = "0xC6B510", VA = "0xC6B510")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000173")]
	[Address(RVA = "0xC6B530", Offset = "0xC6B530", VA = "0xC6B530")]
	private void OnOpen()
	{
	}

	[Token(Token = "0x6000174")]
	[Address(RVA = "0xC6B5C4", Offset = "0xC6B5C4", VA = "0xC6B5C4")]
	private void OnOpening()
	{
	}

	[Token(Token = "0x6000175")]
	[Address(RVA = "0xC6B658", Offset = "0xC6B658", VA = "0xC6B658")]
	private void OnClose()
	{
	}

	[Token(Token = "0x6000176")]
	[Address(RVA = "0xC6B6EC", Offset = "0xC6B6EC", VA = "0xC6B6EC")]
	private void OnClosing()
	{
	}

	[Token(Token = "0x6000177")]
	[Address(RVA = "0xC6B780", Offset = "0xC6B780", VA = "0xC6B780")]
	private void OnWaiting()
	{
	}

	[Token(Token = "0x6000178")]
	[Address(RVA = "0xC6B520", Offset = "0xC6B520", VA = "0xC6B520")]
	private void _Stop(bool stopImmediately)
	{
	}

	[Token(Token = "0x6000179")]
	[Address(RVA = "0xC6B814", Offset = "0xC6B814", VA = "0xC6B814")]
	public SECTR_DoorAudio()
	{
	}
}
[Token(Token = "0x2000049")]
[AddComponentMenu("Procedural Worlds/SECTR/Audio/SECTR Impact Audio")]
[ExecuteInEditMode]
public class SECTR_ImpactAudio : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x200004A")]
	public class ImpactSound
	{
		[Token(Token = "0x4000199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PhysicMaterial SurfaceMaterial;

		[Token(Token = "0x400019A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SECTR_AudioCue ImpactCue;

		[Token(Token = "0x600017E")]
		[Address(RVA = "0xC6BC3C", Offset = "0xC6BC3C", VA = "0xC6BC3C")]
		public ImpactSound()
		{
		}
	}

	[Token(Token = "0x4000193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float nextImpactTime;

	[Token(Token = "0x4000194")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<PhysicMaterial, ImpactSound> surfaceTable;

	[Token(Token = "0x4000195")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SECTR_ToolTip("Default sound to play on impact.")]
	public ImpactSound DefaultSound;

	[Token(Token = "0x4000196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SECTR_ToolTip("Surface specific impact sounds.")]
	public List<ImpactSound> SurfaceImpacts;

	[Token(Token = "0x4000197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SECTR_ToolTip("The minimum relative speed at the time of impact required to trigger this cue.")]
	public float MinImpactSpeed;

	[Token(Token = "0x4000198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SECTR_ToolTip("The minimum amount of time between playback of this sound.")]
	public float MinImpactInterval;

	[Token(Token = "0x600017A")]
	[Address(RVA = "0xC6B81C", Offset = "0xC6B81C", VA = "0xC6B81C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600017B")]
	[Address(RVA = "0xC6B97C", Offset = "0xC6B97C", VA = "0xC6B97C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600017C")]
	[Address(RVA = "0xC6B984", Offset = "0xC6B984", VA = "0xC6B984")]
	private void OnCollisionStay(Collision collision)
	{
	}

	[Token(Token = "0x600017D")]
	[Address(RVA = "0xC6BBB4", Offset = "0xC6BBB4", VA = "0xC6BBB4")]
	public SECTR_ImpactAudio()
	{
	}
}
[Token(Token = "0x200004B")]
[ExecuteInEditMode]
[AddComponentMenu("Procedural Worlds/SECTR/Audio/SECTR Music Trigger")]
public class SECTR_MusicTrigger : MonoBehaviour
{
	[Token(Token = "0x400019B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private GameObject activator;

	[Token(Token = "0x400019C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SECTR_ToolTip("The Cue to play as music. If null, this trigger will stop the current music.", null, false)]
	public SECTR_AudioCue Cue;

	[Token(Token = "0x400019D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SECTR_ToolTip("Should music be forced to loop when playing.")]
	public bool Loop;

	[Token(Token = "0x400019E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	[SECTR_ToolTip("Should the music stop when leaving the trigger.")]
	public bool StopOnExit;

	[Token(Token = "0x600017F")]
	[Address(RVA = "0xC6BC44", Offset = "0xC6BC44", VA = "0xC6BC44")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000180")]
	[Address(RVA = "0xC6BD34", Offset = "0xC6BD34", VA = "0xC6BD34")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000181")]
	[Address(RVA = "0xC6BD58", Offset = "0xC6BD58", VA = "0xC6BD58")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000182")]
	[Address(RVA = "0xC6BE28", Offset = "0xC6BE28", VA = "0xC6BE28")]
	private void OnTriggerEnter2D(Collider2D other)
	{
	}

	[Token(Token = "0x6000183")]
	[Address(RVA = "0xC6BEF8", Offset = "0xC6BEF8", VA = "0xC6BEF8")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000184")]
	[Address(RVA = "0xC6BF7C", Offset = "0xC6BF7C", VA = "0xC6BF7C")]
	private void OnTriggerExit2D(Collider2D other)
	{
	}

	[Token(Token = "0x6000185")]
	[Address(RVA = "0xC6BCB8", Offset = "0xC6BCB8", VA = "0xC6BCB8")]
	private void _Play()
	{
	}

	[Token(Token = "0x6000186")]
	[Address(RVA = "0xC6BD4C", Offset = "0xC6BD4C", VA = "0xC6BD4C")]
	private void _Stop(bool stopImmediately)
	{
	}

	[Token(Token = "0x6000187")]
	[Address(RVA = "0xC6C01C", Offset = "0xC6C01C", VA = "0xC6C01C")]
	public SECTR_MusicTrigger()
	{
	}
}
[Token(Token = "0x200004C")]
[AddComponentMenu("Procedural Worlds/SECTR/Audio/SECTR Point Source")]
[ExecuteInEditMode]
public class SECTR_PointSource : SECTR_AudioSource
{
	[Token(Token = "0x400019F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected SECTR_AudioCueInstance instance;

	[Token(Token = "0x1700004D")]
	public override bool IsPlaying
	{
		[Token(Token = "0x6000188")]
		[Address(RVA = "0xC6C02C", Offset = "0xC6C02C", VA = "0xC6C02C", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000189")]
	[Address(RVA = "0xC6C03C", Offset = "0xC6C03C", VA = "0xC6C03C", Slot = "5")]
	public override void Play()
	{
	}

	[Token(Token = "0x600018A")]
	[Address(RVA = "0xC6C1A8", Offset = "0xC6C1A8", VA = "0xC6C1A8", Slot = "6")]
	public override void Stop(bool stopImmediately)
	{
	}

	[Token(Token = "0x600018B")]
	[Address(RVA = "0xC6C1B8", Offset = "0xC6C1B8", VA = "0xC6C1B8", Slot = "8")]
	protected override void OnVolumePitchChanged()
	{
	}

	[Token(Token = "0x600018C")]
	[Address(RVA = "0xC6C210", Offset = "0xC6C210", VA = "0xC6C210")]
	public SECTR_PointSource()
	{
	}
}
[Token(Token = "0x200004D")]
[RequireComponent(typeof(SECTR_Member))]
[ExecuteInEditMode]
[AddComponentMenu("Procedural Worlds/SECTR/Audio/SECTR Propagation Source")]
public class SECTR_PropagationSource : SECTR_AudioSource
{
	[Token(Token = "0x200004E")]
	private class PathSound
	{
		[Token(Token = "0x40001A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SECTR_AudioCueInstance instance;

		[Token(Token = "0x40001A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SECTR_Portal firstPortal;

		[Token(Token = "0x40001A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SECTR_Portal secondPortal;

		[Token(Token = "0x40001AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float firstDistance;

		[Token(Token = "0x40001AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float secondDistance;

		[Token(Token = "0x40001AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float distance;

		[Token(Token = "0x40001AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 position;

		[Token(Token = "0x40001AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 lastListenerPosition;

		[Token(Token = "0x40001AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float weight;

		[Token(Token = "0x40001B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool occluded;

		[Token(Token = "0x6000196")]
		[Address(RVA = "0xC6DBE4", Offset = "0xC6DBE4", VA = "0xC6DBE4")]
		public PathSound()
		{
		}
	}

	[Token(Token = "0x40001A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private SECTR_Member cachedMember;

	[Token(Token = "0x40001A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<SECTR_Graph.Node> path;

	[Token(Token = "0x40001A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<PathSound> activeSounds;

	[Token(Token = "0x40001A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float directDistanceToListener;

	[Token(Token = "0x40001A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private bool playing;

	[Token(Token = "0x40001A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	private bool played;

	[Token(Token = "0x40001A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SECTR_ToolTip("When the listener gets within this distance of a portal, the sound direction will start to blend towards the next portal or source position.", 0f, -1f)]
	public float InterpDistance;

	[Token(Token = "0x1700004E")]
	public override bool IsPlaying
	{
		[Token(Token = "0x600018D")]
		[Address(RVA = "0xC6C218", Offset = "0xC6C218", VA = "0xC6C218", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600018E")]
	[Address(RVA = "0xC6C278", Offset = "0xC6C278", VA = "0xC6C278", Slot = "5")]
	public override void Play()
	{
	}

	[Token(Token = "0x600018F")]
	[Address(RVA = "0xC6C284", Offset = "0xC6C284", VA = "0xC6C284", Slot = "6")]
	public override void Stop(bool stopImmediately)
	{
	}

	[Token(Token = "0x6000190")]
	[Address(RVA = "0xC6C35C", Offset = "0xC6C35C", VA = "0xC6C35C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000191")]
	[Address(RVA = "0xC6C3AC", Offset = "0xC6C3AC", VA = "0xC6C3AC", Slot = "7")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x6000192")]
	[Address(RVA = "0xC6C3C8", Offset = "0xC6C3C8", VA = "0xC6C3C8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000193")]
	[Address(RVA = "0xC6DE84", Offset = "0xC6DE84", VA = "0xC6DE84", Slot = "8")]
	protected override void OnVolumePitchChanged()
	{
	}

	[Token(Token = "0x6000194")]
	[Address(RVA = "0xC6DC68", Offset = "0xC6DC68", VA = "0xC6DC68")]
	private void _ComputeSoundSpatialization(Vector3 listenerPosition, float distanceToListener, PathSound pathSound)
	{
	}

	[Token(Token = "0x6000195")]
	[Address(RVA = "0xC6E05C", Offset = "0xC6E05C", VA = "0xC6E05C")]
	public SECTR_PropagationSource()
	{
	}
}
[Token(Token = "0x200004F")]
[ExecuteInEditMode]
[AddComponentMenu("Procedural Worlds/SECTR/Audio/SECTR Region Source")]
public class SECTR_RegionSource : SECTR_PointSource
{
	[Token(Token = "0x40001B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SECTR_ToolTip("Determine the closest point by raycast instead of bounding box. More accurate but more expensive.")]
	public bool Raycast;

	[Token(Token = "0x6000197")]
	[Address(RVA = "0xC6E12C", Offset = "0xC6E12C", VA = "0xC6E12C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000198")]
	[Address(RVA = "0xC6E3F4", Offset = "0xC6E3F4", VA = "0xC6E3F4")]
	public SECTR_RegionSource()
	{
	}
}
[Token(Token = "0x2000050")]
[ExecuteInEditMode]
[AddComponentMenu("Procedural Worlds/SECTR/Audio/SECTR Spline Source")]
public class SECTR_SplineSource : SECTR_PointSource
{
	[Token(Token = "0x2000051")]
	private class SplineNode
	{
		[Token(Token = "0x40001B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 Point;

		[Token(Token = "0x40001B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion Rot;

		[Token(Token = "0x40001B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float T;

		[Token(Token = "0x40001BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector2 EaseIO;

		[Token(Token = "0x60001A3")]
		[Address(RVA = "0xC6F2C4", Offset = "0xC6F2C4", VA = "0xC6F2C4")]
		public SplineNode(Vector3 p, Quaternion q, float t, Vector2 io)
		{
		}

		[Token(Token = "0x60001A4")]
		[Address(RVA = "0xC6F344", Offset = "0xC6F344", VA = "0xC6F344")]
		public SplineNode(SplineNode o)
		{
		}
	}

	[Token(Token = "0x40001B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<SplineNode> nodes;

	[Token(Token = "0x40001B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SECTR_ToolTip("Array of scene objects to use as control points for the spline")]
	public List<Transform> SplinePoints;

	[Token(Token = "0x40001B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SECTR_ToolTip("Determines if the spline is open or closed (i.e. a loop).")]
	public bool Closed;

	[Token(Token = "0x40001B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	[SECTR_ToolTip("Determines if the audio source is allowed to leave the spline during interpolation.")]
	public bool AllowShortcuts;

	[Token(Token = "0x40001B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SECTR_ToolTip("The maximum speed at which to interpolate the sound in space.", 0f, -1f)]
	public float MaxInterpSpeed;

	[Token(Token = "0x6000199")]
	[Address(RVA = "0xC6E3FC", Offset = "0xC6E3FC", VA = "0xC6E3FC", Slot = "5")]
	public override void Play()
	{
	}

	[Token(Token = "0x600019A")]
	[Address(RVA = "0xC6E6E0", Offset = "0xC6E6E0", VA = "0xC6E6E0")]
	private void Awake()
	{
	}

	[Token(Token = "0x600019B")]
	[Address(RVA = "0xC6F088", Offset = "0xC6F088", VA = "0xC6F088")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600019C")]
	[Address(RVA = "0xC6F08C", Offset = "0xC6F08C", VA = "0xC6F08C", Slot = "7")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x600019D")]
	[Address(RVA = "0xC6F094", Offset = "0xC6F094", VA = "0xC6F094")]
	private void Update()
	{
	}

	[Token(Token = "0x600019E")]
	[Address(RVA = "0xC6E6E4", Offset = "0xC6E6E4", VA = "0xC6E6E4")]
	private void _SetupSpline()
	{
	}

	[Token(Token = "0x600019F")]
	[Address(RVA = "0xC6E464", Offset = "0xC6E464", VA = "0xC6E464")]
	private Vector3 _GetClosestPointOnSpline(Vector3 point)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60001A0")]
	[Address(RVA = "0xC6F398", Offset = "0xC6F398", VA = "0xC6F398")]
	private Vector3 _GetHermiteAtT(float timeParam)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60001A1")]
	[Address(RVA = "0xC6F698", Offset = "0xC6F698", VA = "0xC6F698")]
	private float _Ease(float t, float k1, float k2)
	{
		return default(float);
	}

	[Token(Token = "0x60001A2")]
	[Address(RVA = "0xC6F770", Offset = "0xC6F770", VA = "0xC6F770")]
	public SECTR_SplineSource()
	{
	}
}
[Token(Token = "0x2000052")]
[AddComponentMenu("Procedural Worlds/SECTR/Audio/SECTR Start Music")]
public class SECTR_StartMusic : MonoBehaviour
{
	[Token(Token = "0x40001BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SECTR_ToolTip("The music to play on Start.")]
	public SECTR_AudioCue Cue;

	[Token(Token = "0x60001A5")]
	[Address(RVA = "0xC6F844", Offset = "0xC6F844", VA = "0xC6F844")]
	private void Start()
	{
	}

	[Token(Token = "0x60001A6")]
	[Address(RVA = "0xC6F8A8", Offset = "0xC6F8A8", VA = "0xC6F8A8")]
	public SECTR_StartMusic()
	{
	}
}
[Token(Token = "0x2000053")]
[AddComponentMenu("Procedural Worlds/SECTR/Audio/SECTR Trigger Source")]
[ExecuteInEditMode]
public class SECTR_TriggerSource : SECTR_PointSource
{
	[Token(Token = "0x40001BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GameObject activator;

	[Token(Token = "0x60001A7")]
	[Address(RVA = "0xC6F8B0", Offset = "0xC6F8B0", VA = "0xC6F8B0")]
	public SECTR_TriggerSource()
	{
	}

	[Token(Token = "0x60001A8")]
	[Address(RVA = "0xC6F8CC", Offset = "0xC6F8CC", VA = "0xC6F8CC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60001A9")]
	[Address(RVA = "0xC6F95C", Offset = "0xC6F95C", VA = "0xC6F95C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60001AA")]
	[Address(RVA = "0xC6F9F8", Offset = "0xC6F9F8", VA = "0xC6F9F8")]
	private void OnTriggerEnter2D(Collider2D other)
	{
	}

	[Token(Token = "0x60001AB")]
	[Address(RVA = "0xC6FA94", Offset = "0xC6FA94", VA = "0xC6FA94")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60001AC")]
	[Address(RVA = "0xC6FB3C", Offset = "0xC6FB3C", VA = "0xC6FB3C")]
	private void OnTriggerExit2D(Collider2D other)
	{
	}
}
[Token(Token = "0x2000054")]
public static class SECTR_Constants
{
	[Token(Token = "0x2000055")]
	public enum ReparentingMode
	{
		[Token(Token = "0x40001C6")]
		Bounds,
		[Token(Token = "0x40001C7")]
		Position
	}

	[Token(Token = "0x40001BD")]
	public const string MAJOR_VERSION = "1";

	[Token(Token = "0x40001BE")]
	public const string MINOR_VERSION = "4.0";

	[Token(Token = "0x40001BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly Color UI_SEPARATOR_LINE_COLOR;

	[Token(Token = "0x40001C0")]
	public const string GAIA_SPAWN_GROUP = "Gaia_Spawns";

	[Token(Token = "0x40001C1")]
	public const string PATH_AudioHUDGraphMaterial = "Scripts/Audio/Assets/AudioHUD_Graph.mat";

	[Token(Token = "0x40001C2")]
	public const string PATH_VisGizmoMaterial = "Scripts/Vis/Assets/FrustumDebug.mat";

	[Token(Token = "0x40001C3")]
	public const string PATH_AudioIcons = "Scripts/Audio/Editor/Icons/";

	[Token(Token = "0x40001C4")]
	public const string GX_ABOUT = "\nSECTR is a suite of modules for Unity that allows you to build the best looking, sounding, and most efficient games possible, all by taking advantage of the structure already present in your game world. If you want to stream an open world, bring a huge game to mobile, or take advantage of the latest techniques in audio occlusion and propagation, SECTR is your solution.\n\nMain Features\n - SECTR CORE: Sector Creation Kit\n - SECTR AUDIO: Immersive Spatial Audio\n - SECTR STREAM: Seamless Scene Streaming\n - SECTR VIS: Dynamic Occlusion Culling\n\n - SECTR COMPLETE: Contains all the packages\n";
}
[Token(Token = "0x2000056")]
[RequireComponent(typeof(Animator))]
[AddComponentMenu("Procedural Worlds/SECTR/Audio/SECTR Door")]
public class SECTR_Door : MonoBehaviour
{
	[Token(Token = "0x40001C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int controlParam;

	[Token(Token = "0x40001C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int canOpenParam;

	[Token(Token = "0x40001CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int closedState;

	[Token(Token = "0x40001CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int waitingState;

	[Token(Token = "0x40001CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int openingState;

	[Token(Token = "0x40001CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int openState;

	[Token(Token = "0x40001CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int closingState;

	[Token(Token = "0x40001CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int lastState;

	[Token(Token = "0x40001D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Animator cachedAnimator;

	[Token(Token = "0x40001D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int openCount;

	[Token(Token = "0x40001D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SECTR_ToolTip("The portal this door affects (if any).")]
	public SECTR_Portal Portal;

	[Token(Token = "0x40001D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SECTR_ToolTip("The name of the control param in the door.")]
	public string ControlParam;

	[Token(Token = "0x40001D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SECTR_ToolTip("The name of the control param that indicates if we are allowed to open.")]
	public string CanOpenParam;

	[Token(Token = "0x40001D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SECTR_ToolTip("The full name (layer and state) of the Open state in the Animation Controller.")]
	public string OpenState;

	[Token(Token = "0x40001D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SECTR_ToolTip("The full name (layer and state) of the Closed state in the Animation Controller.")]
	public string ClosedState;

	[Token(Token = "0x40001D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SECTR_ToolTip("The full name (layer and state) of the Opening state in the Animation Controller.")]
	public string OpeningState;

	[Token(Token = "0x40001D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SECTR_ToolTip("The full name (layer and state) of the Closing state in the Animation Controller.")]
	public string ClosingState;

	[Token(Token = "0x40001D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SECTR_ToolTip("The full name (layer and state) of the Wating state in the Animation Controller.")]
	public string WaitingState;

	[Token(Token = "0x60001AE")]
	[Address(RVA = "0xC6FC34", Offset = "0xC6FC34", VA = "0xC6FC34")]
	public void OpenDoor()
	{
	}

	[Token(Token = "0x60001AF")]
	[Address(RVA = "0xC6FC44", Offset = "0xC6FC44", VA = "0xC6FC44")]
	public void CloseDoor()
	{
	}

	[Token(Token = "0x60001B0")]
	[Address(RVA = "0xC6FC54", Offset = "0xC6FC54", VA = "0xC6FC54")]
	public bool IsFullyOpen()
	{
		return default(bool);
	}

	[Token(Token = "0x60001B1")]
	[Address(RVA = "0xC6FCC0", Offset = "0xC6FCC0", VA = "0xC6FCC0")]
	public bool IsClosed()
	{
		return default(bool);
	}

	[Token(Token = "0x60001B2")]
	[Address(RVA = "0xC6FD2C", Offset = "0xC6FD2C", VA = "0xC6FD2C", Slot = "4")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x60001B3")]
	[Address(RVA = "0xC6FE08", Offset = "0xC6FE08", VA = "0xC6FE08")]
	private void Start()
	{
	}

	[Token(Token = "0x60001B4")]
	[Address(RVA = "0xC6FF08", Offset = "0xC6FF08", VA = "0xC6FF08")]
	private void Update()
	{
	}

	[Token(Token = "0x60001B5")]
	[Address(RVA = "0xC70148", Offset = "0xC70148", VA = "0xC70148", Slot = "5")]
	protected virtual void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60001B6")]
	[Address(RVA = "0xC70158", Offset = "0xC70158", VA = "0xC70158", Slot = "6")]
	protected virtual void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60001B7")]
	[Address(RVA = "0xC70168", Offset = "0xC70168", VA = "0xC70168", Slot = "7")]
	protected virtual bool CanOpen()
	{
		return default(bool);
	}

	[Token(Token = "0x60001B8")]
	[Address(RVA = "0xC70170", Offset = "0xC70170", VA = "0xC70170")]
	public SECTR_Door()
	{
	}
}
[Token(Token = "0x2000057")]
public class SECTR_FloatingPointFix : MonoBehaviour
{
	[Token(Token = "0x40001DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static SECTR_FloatingPointFix instance;

	[Token(Token = "0x40001DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<SECTR_FloatingPointFixMember> allMembers;

	[Token(Token = "0x40001DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<ParticleSystem> allWorldSpaceParticleSystems;

	[Token(Token = "0x40001DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem.Particle[] currentParticles;

	[Token(Token = "0x40001DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float threshold;

	[Token(Token = "0x40001DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Vector3 totalOffset;

	[Token(Token = "0x1700004F")]
	public static SECTR_FloatingPointFix Instance
	{
		[Token(Token = "0x60001B9")]
		[Address(RVA = "0xC70280", Offset = "0xC70280", VA = "0xC70280")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000050")]
	public static bool IsActive
	{
		[Token(Token = "0x60001BA")]
		[Address(RVA = "0xC70468", Offset = "0xC70468", VA = "0xC70468")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60001BB")]
	[Address(RVA = "0xC705EC", Offset = "0xC705EC", VA = "0xC705EC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60001BC")]
	[Address(RVA = "0xC7075C", Offset = "0xC7075C", VA = "0xC7075C")]
	public void AddMember(SECTR_FloatingPointFixMember member)
	{
	}

	[Token(Token = "0x60001BD")]
	[Address(RVA = "0xC70830", Offset = "0xC70830", VA = "0xC70830")]
	public void RemoveMember(SECTR_FloatingPointFixMember member)
	{
	}

	[Token(Token = "0x60001BE")]
	[Address(RVA = "0xC708C0", Offset = "0xC708C0", VA = "0xC708C0")]
	public void AddWorldSpaceParticleSystem(ParticleSystem ps)
	{
	}

	[Token(Token = "0x60001BF")]
	[Address(RVA = "0xC70994", Offset = "0xC70994", VA = "0xC70994")]
	public void RemoveWorldSpaceParticleSystem(ParticleSystem ps)
	{
	}

	[Token(Token = "0x60001C0")]
	[Address(RVA = "0xC70A24", Offset = "0xC70A24", VA = "0xC70A24")]
	public Vector3 ConvertToOriginalSpace(Vector3 position)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60001C1")]
	[Address(RVA = "0xC70A3C", Offset = "0xC70A3C", VA = "0xC70A3C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60001C2")]
	[Address(RVA = "0xC71134", Offset = "0xC71134", VA = "0xC71134")]
	public SECTR_FloatingPointFix()
	{
	}
}
[Token(Token = "0x2000058")]
public class SECTR_FloatingPointFixMember : MonoBehaviour
{
	[Token(Token = "0x60001C3")]
	[Address(RVA = "0xC7123C", Offset = "0xC7123C", VA = "0xC7123C")]
	protected void OnEnable()
	{
	}

	[Token(Token = "0x60001C4")]
	[Address(RVA = "0xC7125C", Offset = "0xC7125C", VA = "0xC7125C")]
	protected void OnDestroy()
	{
	}

	[Token(Token = "0x60001C5")]
	[Address(RVA = "0xC7128C", Offset = "0xC7128C", VA = "0xC7128C")]
	private void Start()
	{
	}

	[Token(Token = "0x60001C6")]
	[Address(RVA = "0xC71290", Offset = "0xC71290", VA = "0xC71290")]
	private void Update()
	{
	}

	[Token(Token = "0x60001C7")]
	[Address(RVA = "0xC71294", Offset = "0xC71294", VA = "0xC71294")]
	public SECTR_FloatingPointFixMember()
	{
	}
}
[Token(Token = "0x2000059")]
[RequireComponent(typeof(ParticleSystem))]
public class SECTR_FloatingPointFixParticleSystem : SECTR_FloatingPointFixMember
{
	[Token(Token = "0x60001C8")]
	[Address(RVA = "0xC7129C", Offset = "0xC7129C", VA = "0xC7129C")]
	protected new void OnEnable()
	{
	}

	[Token(Token = "0x60001C9")]
	[Address(RVA = "0xC7136C", Offset = "0xC7136C", VA = "0xC7136C")]
	protected new void OnDestroy()
	{
	}

	[Token(Token = "0x60001CA")]
	[Address(RVA = "0xC71418", Offset = "0xC71418", VA = "0xC71418")]
	private void Start()
	{
	}

	[Token(Token = "0x60001CB")]
	[Address(RVA = "0xC7141C", Offset = "0xC7141C", VA = "0xC7141C")]
	private void Update()
	{
	}

	[Token(Token = "0x60001CC")]
	[Address(RVA = "0xC71420", Offset = "0xC71420", VA = "0xC71420")]
	public SECTR_FloatingPointFixParticleSystem()
	{
	}
}
[Token(Token = "0x200005A")]
public static class SECTR_Geometry
{
	[Token(Token = "0x40001E0")]
	public const float kVERTEX_EPSILON = 0.001f;

	[Token(Token = "0x40001E1")]
	public const float kBOUNDS_CHEAT = 0.01f;

	[Token(Token = "0x60001CD")]
	[Address(RVA = "0xC71428", Offset = "0xC71428", VA = "0xC71428")]
	public static Bounds ComputeBounds(Light light)
	{
		return default(Bounds);
	}

	[Token(Token = "0x60001CE")]
	[Address(RVA = "0xC7178C", Offset = "0xC7178C", VA = "0xC7178C")]
	public static Bounds ComputeBounds(Terrain terrain)
	{
		return default(Bounds);
	}

	[Token(Token = "0x60001CF")]
	[Address(RVA = "0xC71918", Offset = "0xC71918", VA = "0xC71918")]
	public static bool FrustumIntersectsBounds(Bounds bounds, List<Plane> frustum, int inMask, out int outMask)
	{
		return default(bool);
	}

	[Token(Token = "0x60001D0")]
	[Address(RVA = "0xC71AE0", Offset = "0xC71AE0", VA = "0xC71AE0")]
	public static bool FrustumContainsBounds(Bounds bounds, List<Plane> frustum)
	{
		return default(bool);
	}

	[Token(Token = "0x60001D1")]
	[Address(RVA = "0xC71C8C", Offset = "0xC71C8C", VA = "0xC71C8C")]
	public static bool BoundsContainsBounds(Bounds container, Bounds contained)
	{
		return default(bool);
	}

	[Token(Token = "0x60001D2")]
	[Address(RVA = "0xC71CE8", Offset = "0xC71CE8", VA = "0xC71CE8")]
	public static bool BoundsIntersectsSphere(Bounds bounds, Vector3 sphereCenter, float sphereRadius)
	{
		return default(bool);
	}

	[Token(Token = "0x60001D3")]
	[Address(RVA = "0xC71D98", Offset = "0xC71D98", VA = "0xC71D98")]
	public static Bounds ProjectBounds(Bounds bounds, Vector3 projection)
	{
		return default(Bounds);
	}

	[Token(Token = "0x60001D4")]
	[Address(RVA = "0xC71E44", Offset = "0xC71E44", VA = "0xC71E44")]
	public static bool IsPointInFrontOfPlane(Vector3 position, Vector3 center, Vector3 normal)
	{
		return default(bool);
	}

	[Token(Token = "0x60001D5")]
	[Address(RVA = "0xC71F58", Offset = "0xC71F58", VA = "0xC71F58")]
	public static bool IsPolygonConvex(Vector3[] verts)
	{
		return default(bool);
	}

	[Token(Token = "0x60001D6")]
	[Address(RVA = "0xC72224", Offset = "0xC72224", VA = "0xC72224")]
	public static int CompareVectorsCW(Vector3 a, Vector3 b, Vector3 centroid, Vector3 normal)
	{
		return default(int);
	}
}
[Token(Token = "0x200005B")]
public static class SECTR_Graph
{
	[Token(Token = "0x200005C")]
	public class Node : IComparable<Node>
	{
		[Token(Token = "0x40001E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SECTR_Portal Portal;

		[Token(Token = "0x40001E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SECTR_Sector Sector;

		[Token(Token = "0x40001E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float CostPlusEstimate;

		[Token(Token = "0x40001E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float Cost;

		[Token(Token = "0x40001EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int Depth;

		[Token(Token = "0x40001EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool ForwardTraversal;

		[Token(Token = "0x40001EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Node Parent;

		[Token(Token = "0x60001DC")]
		[Address(RVA = "0xC73C20", Offset = "0xC73C20", VA = "0xC73C20", Slot = "4")]
		public int CompareTo(Node other)
		{
			return default(int);
		}

		[Token(Token = "0x60001DD")]
		[Address(RVA = "0xC73140", Offset = "0xC73140", VA = "0xC73140")]
		public static void ReconstructPath(List<Node> path, Node currentNode)
		{
		}

		[Token(Token = "0x60001DE")]
		[Address(RVA = "0xC728AC", Offset = "0xC728AC", VA = "0xC728AC")]
		public Node()
		{
		}
	}

	[Token(Token = "0x40001E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<SECTR_Sector> initialSectors;

	[Token(Token = "0x40001E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static List<SECTR_Sector> goalSectors;

	[Token(Token = "0x40001E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static SECTR_PriorityQueue<Node> openSet;

	[Token(Token = "0x40001E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static Dictionary<SECTR_Portal, Node> closedSet;

	[Token(Token = "0x60001D7")]
	[Address(RVA = "0xC72330", Offset = "0xC72330", VA = "0xC72330")]
	public static void DepthWalk(ref List<Node> nodes, SECTR_Sector root, SECTR_Portal.PortalFlags stopFlags, int maxDepth)
	{
	}

	[Token(Token = "0x60001D8")]
	[Address(RVA = "0xC729D4", Offset = "0xC729D4", VA = "0xC729D4")]
	public static void BreadthWalk(ref List<Node> nodes, SECTR_Sector root, SECTR_Portal.PortalFlags stopFlags, int maxDepth)
	{
	}

	[Token(Token = "0x60001D9")]
	[Address(RVA = "0xC6D120", Offset = "0xC6D120", VA = "0xC6D120")]
	public static void FindShortestPath(ref List<Node> path, Vector3 start, Vector3 goal, SECTR_Portal.PortalFlags stopFlags)
	{
	}

	[Token(Token = "0x60001DA")]
	[Address(RVA = "0xC731B0", Offset = "0xC731B0", VA = "0xC731B0")]
	public static string GetGraphAsDot(string graphName)
	{
		return null;
	}
}
[Token(Token = "0x200005D")]
public abstract class SECTR_Hull : MonoBehaviour
{
	[Token(Token = "0x40001ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Mesh previousMesh;

	[Token(Token = "0x40001EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3[] vertsCW;

	[Token(Token = "0x40001EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 meshCentroid;

	[Token(Token = "0x40001F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	protected Vector3 meshNormal;

	[Token(Token = "0x40001F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SECTR_ToolTip("Convex, planar mesh that defines the portal shape.")]
	public Mesh HullMesh;

	[Token(Token = "0x17000051")]
	public Vector3[] VertsCW
	{
		[Token(Token = "0x60001DF")]
		[Address(RVA = "0xC73C50", Offset = "0xC73C50", VA = "0xC73C50")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000052")]
	public Vector3 Normal
	{
		[Token(Token = "0x60001E0")]
		[Address(RVA = "0xC742C8", Offset = "0xC742C8", VA = "0xC742C8")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000053")]
	public Vector3 ReverseNormal
	{
		[Token(Token = "0x60001E1")]
		[Address(RVA = "0xC74304", Offset = "0xC74304", VA = "0xC74304")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000054")]
	public Vector3 Center
	{
		[Token(Token = "0x60001E2")]
		[Address(RVA = "0xC6DBF4", Offset = "0xC6DBF4", VA = "0xC6DBF4")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000055")]
	public Plane HullPlane
	{
		[Token(Token = "0x60001E3")]
		[Address(RVA = "0xC7434C", Offset = "0xC7434C", VA = "0xC7434C")]
		get
		{
			return default(Plane);
		}
	}

	[Token(Token = "0x17000056")]
	public Plane ReverseHullPlane
	{
		[Token(Token = "0x60001E4")]
		[Address(RVA = "0xC743C4", Offset = "0xC743C4", VA = "0xC743C4")]
		get
		{
			return default(Plane);
		}
	}

	[Token(Token = "0x17000057")]
	public Bounds BoundingBox
	{
		[Token(Token = "0x60001E5")]
		[Address(RVA = "0xC6DE88", Offset = "0xC6DE88", VA = "0xC6DE88")]
		get
		{
			return default(Bounds);
		}
	}

	[Token(Token = "0x60001E6")]
	[Address(RVA = "0xC7443C", Offset = "0xC7443C", VA = "0xC7443C")]
	public bool IsPointInHull(Vector3 p, float distanceTolerance)
	{
		return default(bool);
	}

	[Token(Token = "0x60001E7")]
	[Address(RVA = "0xC73C68", Offset = "0xC73C68", VA = "0xC73C68")]
	protected void ComputeVerts()
	{
	}

	[Token(Token = "0x60001E8")]
	[Address(RVA = "0xC74730", Offset = "0xC74730", VA = "0xC74730")]
	protected SECTR_Hull()
	{
	}
}
[Token(Token = "0x200005E")]
[ExecuteInEditMode]
[AddComponentMenu("Procedural Worlds/SECTR/Core/SECTR Member")]
public class SECTR_Member : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x200005F")]
	public class Child
	{
		[Token(Token = "0x400021D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject gameObject;

		[Token(Token = "0x400021E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int gameObjectHash;

		[Token(Token = "0x400021F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SECTR_Member member;

		[Token(Token = "0x4000220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Renderer renderer;

		[Token(Token = "0x4000221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int renderHash;

		[Token(Token = "0x4000222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Light light;

		[Token(Token = "0x4000223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int lightHash;

		[Token(Token = "0x4000224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Terrain terrain;

		[Token(Token = "0x4000225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int terrainHash;

		[Token(Token = "0x4000226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Bounds rendererBounds;

		[Token(Token = "0x4000227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Bounds lightBounds;

		[Token(Token = "0x4000228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public Bounds terrainBounds;

		[Token(Token = "0x4000229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public bool shadowLight;

		[Token(Token = "0x400022A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9D")]
		public bool rendererCastsShadows;

		[Token(Token = "0x400022B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9E")]
		public bool terrainCastsShadows;

		[Token(Token = "0x400022C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public LayerMask layer;

		[Token(Token = "0x400022D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public Vector3 shadowLightPosition;

		[Token(Token = "0x400022E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float shadowLightRange;

		[Token(Token = "0x400022F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public LightType shadowLightType;

		[Token(Token = "0x4000230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public int shadowCullingMask;

		[Token(Token = "0x4000231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public bool processed;

		[Token(Token = "0x4000232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBD")]
		public bool renderCulled;

		[Token(Token = "0x4000233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBE")]
		public bool lightCulled;

		[Token(Token = "0x4000234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBF")]
		public bool terrainCulled;

		[Token(Token = "0x600020F")]
		[Address(RVA = "0xC766D4", Offset = "0xC766D4", VA = "0xC766D4")]
		public void Init(GameObject gameObject, Renderer renderer, Light light, Terrain terrain, SECTR_Member member, bool dirShadowCaster, Vector3 shadowVec)
		{
		}

		[Token(Token = "0x6000210")]
		[Address(RVA = "0xC78038", Offset = "0xC78038", VA = "0xC78038", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000211")]
		[Address(RVA = "0xC780CC", Offset = "0xC780CC", VA = "0xC780CC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000212")]
		[Address(RVA = "0xC775F4", Offset = "0xC775F4", VA = "0xC775F4")]
		public static bool operator ==(Child x, Child y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000213")]
		[Address(RVA = "0xC775C8", Offset = "0xC775C8", VA = "0xC775C8")]
		public static bool operator !=(Child x, Child y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000214")]
		[Address(RVA = "0xC77620", Offset = "0xC77620", VA = "0xC77620")]
		public Child()
		{
		}
	}

	[Token(Token = "0x2000060")]
	public enum BoundsUpdateModes
	{
		[Token(Token = "0x4000236")]
		Start,
		[Token(Token = "0x4000237")]
		Movement,
		[Token(Token = "0x4000238")]
		Always,
		[Token(Token = "0x4000239")]
		Static,
		[Token(Token = "0x400023A")]
		SelfOnly
	}

	[Token(Token = "0x2000061")]
	public enum ChildCullModes
	{
		[Token(Token = "0x400023C")]
		Default,
		[Token(Token = "0x400023D")]
		Group,
		[Token(Token = "0x400023E")]
		Individual
	}

	[Token(Token = "0x2000062")]
	public delegate void MembershipChanged(List<SECTR_Sector> left, List<SECTR_Sector> joined);

	[Token(Token = "0x40001F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<Transform> ignoreTransforms;

	[Token(Token = "0x40001F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[HideInInspector]
	private List<Child> children;

	[Token(Token = "0x40001F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[HideInInspector]
	private List<Child> renderers;

	[Token(Token = "0x40001F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	[SerializeField]
	private List<Child> lights;

	[Token(Token = "0x40001F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	[SerializeField]
	private List<Child> terrains;

	[Token(Token = "0x40001F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[HideInInspector]
	private List<Child> shadowLights;

	[Token(Token = "0x40001F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[HideInInspector]
	private List<Child> shadowCasters;

	[Token(Token = "0x40001F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	[HideInInspector]
	private Bounds totalBounds;

	[Token(Token = "0x40001FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	[HideInInspector]
	private Bounds renderBounds;

	[Token(Token = "0x40001FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	[HideInInspector]
	private Bounds lightBounds;

	[Token(Token = "0x40001FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[HideInInspector]
	[SerializeField]
	private bool hasRenderBounds;

	[Token(Token = "0x40001FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
	[HideInInspector]
	[SerializeField]
	private bool hasLightBounds;

	[Token(Token = "0x40001FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9A")]
	[HideInInspector]
	[SerializeField]
	private bool shadowCaster;

	[Token(Token = "0x40001FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9B")]
	[HideInInspector]
	[SerializeField]
	private bool shadowLight;

	[Token(Token = "0x4000200")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	[HideInInspector]
	[SerializeField]
	private bool frozen;

	[Token(Token = "0x4000201")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9D")]
	[HideInInspector]
	[SerializeField]
	private bool neverJoin;

	[Token(Token = "0x4000202")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	[HideInInspector]
	protected List<Light> bakedOnlyLights;

	[Token(Token = "0x4000203")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	protected bool isSector;

	[Token(Token = "0x4000204")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	protected SECTR_Member childProxy;

	[Token(Token = "0x4000205")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	protected bool hasChildProxy;

	[Token(Token = "0x4000206")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
	private bool started;

	[Token(Token = "0x4000207")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBA")]
	private bool usedStartSector;

	[Token(Token = "0x4000208")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private List<SECTR_Sector> sectors;

	[Token(Token = "0x4000209")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private List<SECTR_Sector> newSectors;

	[Token(Token = "0x400020A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private List<SECTR_Sector> leftSectors;

	[Token(Token = "0x400020B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Dictionary<Transform, Child> childTable;

	[Token(Token = "0x400020C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private Dictionary<Light, Light> bakedOnlyTable;

	[Token(Token = "0x400020D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private Vector3 lastPosition;

	[Token(Token = "0x400020E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private Stack<Child> childPool;

	[Token(Token = "0x400020F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<SECTR_Member> allMembers;

	[Token(Token = "0x4000210")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Dictionary<Transform, SECTR_Member> allMemberTable;

	[Token(Token = "0x4000211")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[SECTR_ToolTip("Set to true if Sector membership should only change when crossing a portal.")]
	public bool PortalDetermined;

	[Token(Token = "0x4000212")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[SECTR_ToolTip("If set, forces the initial Sector to be the specified Sector.", "PortalDetermined")]
	public SECTR_Sector ForceStartSector;

	[Token(Token = "0x4000213")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[SECTR_ToolTip("Determines how often the bounds are recomputed. More frequent updates requires more CPU.")]
	public BoundsUpdateModes BoundsUpdateMode;

	[Token(Token = "0x4000214")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	[SECTR_ToolTip("Adds a buffer on bounding box to compensate for minor imprecisions.")]
	public float ExtraBounds;

	[Token(Token = "0x4000215")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[SECTR_ToolTip("Override computed bounds with the user specified bounds. Advanced users only.")]
	public bool OverrideBounds;

	[Token(Token = "0x4000216")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	[SECTR_ToolTip("User specified override bounds. Auto-populated with the current bounds when override is inactive.", "OverrideBounds")]
	public Bounds BoundsOverride;

	[Token(Token = "0x4000217")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	[SECTR_ToolTip("Optional shadow casting directional light to use in membership calculations. Bounds will be extruded away from light, if set.")]
	public Light DirShadowCaster;

	[Token(Token = "0x4000218")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	[SECTR_ToolTip("Distance by which to extend the bounds away from the shadow casting light.", "DirShadowCaster")]
	public float DirShadowDistance;

	[Token(Token = "0x4000219")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
	[SECTR_ToolTip("Determines if this SectorCuller should cull individual children, or cull all children based on the aggregate bounds.")]
	public ChildCullModes ChildCulling;

	[NonSerialized]
	[Token(Token = "0x400021A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	[HideInInspector]
	public int LastVisibleFrameNumber;

	[Token(Token = "0x400021B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
	public bool FloatingPointFix;

	[Token(Token = "0x17000058")]
	public static List<SECTR_Member> All
	{
		[Token(Token = "0x60001EA")]
		[Address(RVA = "0xC74800", Offset = "0xC74800", VA = "0xC74800")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000059")]
	public bool CullEachChild
	{
		[Token(Token = "0x60001EB")]
		[Address(RVA = "0xC74858", Offset = "0xC74858", VA = "0xC74858")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700005A")]
	public List<SECTR_Sector> Sectors
	{
		[Token(Token = "0x60001EC")]
		[Address(RVA = "0xC74888", Offset = "0xC74888", VA = "0xC74888")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700005B")]
	public List<Child> Children
	{
		[Token(Token = "0x60001ED")]
		[Address(RVA = "0xC74890", Offset = "0xC74890", VA = "0xC74890")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700005C")]
	public List<Child> Renderers
	{
		[Token(Token = "0x60001EE")]
		[Address(RVA = "0xC748B4", Offset = "0xC748B4", VA = "0xC748B4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700005D")]
	public bool ShadowCaster
	{
		[Token(Token = "0x60001EF")]
		[Address(RVA = "0xC748D8", Offset = "0xC748D8", VA = "0xC748D8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700005E")]
	public List<Child> ShadowCasters
	{
		[Token(Token = "0x60001F0")]
		[Address(RVA = "0xC748FC", Offset = "0xC748FC", VA = "0xC748FC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700005F")]
	public List<Child> Lights
	{
		[Token(Token = "0x60001F1")]
		[Address(RVA = "0xC74920", Offset = "0xC74920", VA = "0xC74920")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000060")]
	public bool ShadowLight
	{
		[Token(Token = "0x60001F2")]
		[Address(RVA = "0xC74944", Offset = "0xC74944", VA = "0xC74944")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000061")]
	public List<Child> ShadowLights
	{
		[Token(Token = "0x60001F3")]
		[Address(RVA = "0xC74968", Offset = "0xC74968", VA = "0xC74968")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000062")]
	public List<Child> Terrains
	{
		[Token(Token = "0x60001F4")]
		[Address(RVA = "0xC7498C", Offset = "0xC7498C", VA = "0xC7498C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000063")]
	public Bounds TotalBounds
	{
		[Token(Token = "0x60001F5")]
		[Address(RVA = "0xC749B0", Offset = "0xC749B0", VA = "0xC749B0")]
		get
		{
			return default(Bounds);
		}
	}

	[Token(Token = "0x17000064")]
	public Bounds RenderBounds
	{
		[Token(Token = "0x60001F6")]
		[Address(RVA = "0xC749C4", Offset = "0xC749C4", VA = "0xC749C4")]
		get
		{
			return default(Bounds);
		}
	}

	[Token(Token = "0x17000065")]
	public bool HasRenderBounds
	{
		[Token(Token = "0x60001F7")]
		[Address(RVA = "0xC749F4", Offset = "0xC749F4", VA = "0xC749F4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000066")]
	public Bounds LightBounds
	{
		[Token(Token = "0x60001F8")]
		[Address(RVA = "0xC74A18", Offset = "0xC74A18", VA = "0xC74A18")]
		get
		{
			return default(Bounds);
		}
	}

	[Token(Token = "0x17000067")]
	public bool HasLightBounds
	{
		[Token(Token = "0x60001F9")]
		[Address(RVA = "0xC74A48", Offset = "0xC74A48", VA = "0xC74A48")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000068")]
	public bool Frozen
	{
		[Token(Token = "0x60001FD")]
		[Address(RVA = "0xC74AC4", Offset = "0xC74AC4", VA = "0xC74AC4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60001FC")]
		[Address(RVA = "0xC74AB0", Offset = "0xC74AB0", VA = "0xC74AB0")]
		set
		{
		}
	}

	[Token(Token = "0x17000069")]
	public SECTR_Member ChildProxy
	{
		[Token(Token = "0x60001FE")]
		[Address(RVA = "0xC74ACC", Offset = "0xC74ACC", VA = "0xC74ACC")]
		set
		{
		}
	}

	[Token(Token = "0x1700006A")]
	public bool NeverJoin
	{
		[Token(Token = "0x60001FF")]
		[Address(RVA = "0xC74B44", Offset = "0xC74B44", VA = "0xC74B44")]
		set
		{
		}
	}

	[Token(Token = "0x1700006B")]
	public bool IsSector
	{
		[Token(Token = "0x6000200")]
		[Address(RVA = "0xC74B50", Offset = "0xC74B50", VA = "0xC74B50")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x14000001")]
	public event MembershipChanged Changed
	{
		[Token(Token = "0x6000203")]
		[Address(RVA = "0xC75E14", Offset = "0xC75E14", VA = "0xC75E14")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000204")]
		[Address(RVA = "0xC75EB4", Offset = "0xC75EB4", VA = "0xC75EB4")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x60001FA")]
	[Address(RVA = "0xC74A6C", Offset = "0xC74A6C", VA = "0xC74A6C")]
	public bool IsVisibleThisFrame()
	{
		return default(bool);
	}

	[Token(Token = "0x60001FB")]
	[Address(RVA = "0xC74A8C", Offset = "0xC74A8C", VA = "0xC74A8C")]
	public bool WasVisibleLastFrame()
	{
		return default(bool);
	}

	[Token(Token = "0x6000201")]
	[Address(RVA = "0xC710D8", Offset = "0xC710D8", VA = "0xC710D8")]
	public void ForceUpdate(bool updateChildren)
	{
	}

	[Token(Token = "0x6000202")]
	[Address(RVA = "0xC75CA0", Offset = "0xC75CA0", VA = "0xC75CA0")]
	public void SectorDisabled(SECTR_Sector sector)
	{
	}

	[Token(Token = "0x6000205")]
	[Address(RVA = "0xC75F54", Offset = "0xC75F54", VA = "0xC75F54")]
	private void Start()
	{
	}

	[Token(Token = "0x6000206")]
	[Address(RVA = "0xC75FB0", Offset = "0xC75FB0", VA = "0xC75FB0", Slot = "4")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000207")]
	[Address(RVA = "0xC761FC", Offset = "0xC761FC", VA = "0xC761FC", Slot = "5")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x6000208")]
	[Address(RVA = "0xC76630", Offset = "0xC76630", VA = "0xC76630")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000209")]
	[Address(RVA = "0xC74B58", Offset = "0xC74B58", VA = "0xC74B58")]
	private void _UpdateChildren()
	{
	}

	[Token(Token = "0x600020A")]
	[Address(RVA = "0xC76D2C", Offset = "0xC76D2C", VA = "0xC76D2C")]
	private void _AddChildren(Transform childTransform, bool dirShadowCaster, Vector3 shadowVec)
	{
	}

	[Token(Token = "0x600020B")]
	[Address(RVA = "0xC75548", Offset = "0xC75548", VA = "0xC75548")]
	private void _UpdateSectorMembership()
	{
	}

	[Token(Token = "0x600020C")]
	[Address(RVA = "0xC77628", Offset = "0xC77628", VA = "0xC77628")]
	private SECTR_Portal _CrossedPortal(SECTR_Sector sector)
	{
		return null;
	}

	[Token(Token = "0x600020D")]
	[Address(RVA = "0xC77BA8", Offset = "0xC77BA8", VA = "0xC77BA8")]
	public SECTR_Member()
	{
	}
}
[Token(Token = "0x2000063")]
public static class SECTR_Modules
{
	[Token(Token = "0x400023F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool AUDIO;

	[Token(Token = "0x4000240")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
	public static bool VIS;

	[Token(Token = "0x4000241")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
	public static bool STREAM;

	[Token(Token = "0x4000242")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
	public static bool DEV;

	[Token(Token = "0x4000243")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static string VERSION;

	[Token(Token = "0x6000219")]
	[Address(RVA = "0xC7824C", Offset = "0xC7824C", VA = "0xC7824C")]
	static SECTR_Modules()
	{
	}

	[Token(Token = "0x600021A")]
	[Address(RVA = "0xC78454", Offset = "0xC78454", VA = "0xC78454")]
	public static bool HasPro()
	{
		return default(bool);
	}

	[Token(Token = "0x600021B")]
	[Address(RVA = "0xC7845C", Offset = "0xC7845C", VA = "0xC7845C")]
	public static bool HasComplete()
	{
		return default(bool);
	}
}
[Token(Token = "0x2000064")]
[ExecuteInEditMode]
[AddComponentMenu("Procedural Worlds/SECTR/Core/SECTR Portal")]
public class SECTR_Portal : SECTR_Hull
{
	[Token(Token = "0x2000065")]
	[Flags]
	public enum PortalFlags
	{
		[Token(Token = "0x400024A")]
		Closed = 1,
		[Token(Token = "0x400024B")]
		Locked = 2,
		[Token(Token = "0x400024C")]
		PassThrough = 4
	}

	[Token(Token = "0x2000066")]
	[CompilerGenerated]
	private sealed class <GetSectors>d__17 : IEnumerable<SECTR_Sector>, IEnumerable, IEnumerator<SECTR_Sector>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400024D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400024E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private SECTR_Sector <>2__current;

		[Token(Token = "0x400024F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int <>l__initialThreadId;

		[Token(Token = "0x4000250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SECTR_Portal <>4__this;

		[Token(Token = "0x17000070")]
		private SECTR_Sector System.Collections.Generic.IEnumerator<SECTR_Sector>.Current
		{
			[Token(Token = "0x600022C")]
			[Address(RVA = "0xC78C84", Offset = "0xC78C84", VA = "0xC78C84", Slot = "6")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000071")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600022E")]
			[Address(RVA = "0xC78CCC", Offset = "0xC78CCC", VA = "0xC78CCC", Slot = "9")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000229")]
		[Address(RVA = "0xC788E4", Offset = "0xC788E4", VA = "0xC788E4")]
		[DebuggerHidden]
		public <GetSectors>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x600022A")]
		[Address(RVA = "0xC78C04", Offset = "0xC78C04", VA = "0xC78C04", Slot = "7")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600022B")]
		[Address(RVA = "0xC78C08", Offset = "0xC78C08", VA = "0xC78C08", Slot = "8")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600022D")]
		[Address(RVA = "0xC78C8C", Offset = "0xC78C8C", VA = "0xC78C8C", Slot = "10")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}

		[Token(Token = "0x600022F")]
		[Address(RVA = "0xC78CD4", Offset = "0xC78CD4", VA = "0xC78CD4", Slot = "4")]
		[DebuggerHidden]
		private IEnumerator<SECTR_Sector> System.Collections.Generic.IEnumerable<SECTR_Sector>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000230")]
		[Address(RVA = "0xC78D78", Offset = "0xC78D78", VA = "0xC78D78", Slot = "5")]
		[DebuggerHidden]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}

	[Token(Token = "0x4000244")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[HideInInspector]
	private SECTR_Sector frontSector;

	[Token(Token = "0x4000245")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	[HideInInspector]
	private SECTR_Sector backSector;

	[Token(Token = "0x4000246")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool visited;

	[Token(Token = "0x4000247")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<SECTR_Portal> allPortals;

	[Token(Token = "0x4000248")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SECTR_ToolTip("Flags for this Portal. Used in graph traversals and the like.", null, typeof(PortalFlags))]
	public PortalFlags Flags;

	[Token(Token = "0x1700006C")]
	public static List<SECTR_Portal> All
	{
		[Token(Token = "0x600021C")]
		[Address(RVA = "0xC784FC", Offset = "0xC784FC", VA = "0xC784FC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700006D")]
	public SECTR_Sector FrontSector
	{
		[Token(Token = "0x600021E")]
		[Address(RVA = "0xC728B4", Offset = "0xC728B4", VA = "0xC728B4")]
		get
		{
			return null;
		}
		[Token(Token = "0x600021D")]
		[Address(RVA = "0xC78554", Offset = "0xC78554", VA = "0xC78554")]
		set
		{
		}
	}

	[Token(Token = "0x1700006E")]
	public SECTR_Sector BackSector
	{
		[Token(Token = "0x6000220")]
		[Address(RVA = "0xC72944", Offset = "0xC72944", VA = "0xC72944")]
		get
		{
			return null;
		}
		[Token(Token = "0x600021F")]
		[Address(RVA = "0xC7876C", Offset = "0xC7876C", VA = "0xC7876C")]
		set
		{
		}
	}

	[Token(Token = "0x1700006F")]
	public bool Visited
	{
		[Token(Token = "0x6000221")]
		[Address(RVA = "0xC78858", Offset = "0xC78858", VA = "0xC78858")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000222")]
		[Address(RVA = "0xC78860", Offset = "0xC78860", VA = "0xC78860")]
		set
		{
		}
	}

	[Token(Token = "0x6000223")]
	[Address(RVA = "0xC7886C", Offset = "0xC7886C", VA = "0xC7886C")]
	[IteratorStateMachine(typeof(<GetSectors>d__17))]
	public IEnumerable<SECTR_Sector> GetSectors()
	{
		return null;
	}

	[Token(Token = "0x6000224")]
	[Address(RVA = "0xC6FEEC", Offset = "0xC6FEEC", VA = "0xC6FEEC")]
	public void SetFlag(PortalFlags flag, bool on)
	{
	}

	[Token(Token = "0x6000225")]
	[Address(RVA = "0xC78918", Offset = "0xC78918", VA = "0xC78918")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000226")]
	[Address(RVA = "0xC78A68", Offset = "0xC78A68", VA = "0xC78A68")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000227")]
	[Address(RVA = "0xC78B70", Offset = "0xC78B70", VA = "0xC78B70")]
	public SECTR_Portal()
	{
	}
}
[Token(Token = "0x2000067")]
public class SECTR_PriorityQueue<T> where T : IComparable<T>
{
	[Token(Token = "0x4000251")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private List<T> data;

	[Token(Token = "0x17000072")]
	public int Count
	{
		[Token(Token = "0x6000233")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000234")]
		set
		{
		}
	}

	[Token(Token = "0x17000073")]
	public T this[int index]
	{
		[Token(Token = "0x6000235")]
		get
		{
			return (T)null;
		}
		[Token(Token = "0x6000236")]
		set
		{
		}
	}

	[Token(Token = "0x6000231")]
	public SECTR_PriorityQueue()
	{
	}

	[Token(Token = "0x6000232")]
	public SECTR_PriorityQueue(int capacity)
	{
	}

	[Token(Token = "0x6000237")]
	public void Enqueue(T item)
	{
	}

	[Token(Token = "0x6000238")]
	public T Dequeue()
	{
		return (T)null;
	}

	[Token(Token = "0x6000239")]
	public T Peek()
	{
		return (T)null;
	}

	[Token(Token = "0x600023A")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x600023B")]
	public bool IsConsistent()
	{
		return default(bool);
	}

	[Token(Token = "0x600023C")]
	public void Clear()
	{
	}

	[Token(Token = "0x600023D")]
	private void _SwapElements(int i, int j)
	{
	}

	[Token(Token = "0x600023E")]
	private void _Update(int i)
	{
	}
}
[Token(Token = "0x2000068")]
[ExecuteInEditMode]
[AddComponentMenu("Procedural Worlds/SECTR/Core/SECTR Sector")]
public class SECTR_Sector : SECTR_Member
{
	[Token(Token = "0x4000252")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private List<SECTR_Portal> portals;

	[Token(Token = "0x4000253")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private List<SECTR_Member> members;

	[Token(Token = "0x4000254")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private bool visited;

	[Token(Token = "0x4000255")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<SECTR_Sector> allSectors;

	[Token(Token = "0x4000256")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	[SECTR_ToolTip("The terrain Sector attached on the top side of this Sector.")]
	public SECTR_Sector TopTerrain;

	[Token(Token = "0x4000257")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	[SECTR_ToolTip("The terrain Sector attached on the bottom side of this Sector.")]
	public SECTR_Sector BottomTerrain;

	[Token(Token = "0x4000258")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	[SECTR_ToolTip("The terrain Sector attached on the left side of this Sector.")]
	public SECTR_Sector LeftTerrain;

	[Token(Token = "0x4000259")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	[SECTR_ToolTip("The terrain Sector attached on the right side of this Sector.")]
	public SECTR_Sector RightTerrain;

	[Token(Token = "0x17000074")]
	public new static List<SECTR_Sector> All
	{
		[Token(Token = "0x6000240")]
		[Address(RVA = "0xC78E70", Offset = "0xC78E70", VA = "0xC78E70")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000075")]
	public bool Visited
	{
		[Token(Token = "0x6000243")]
		[Address(RVA = "0xC78EC8", Offset = "0xC78EC8", VA = "0xC78EC8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000244")]
		[Address(RVA = "0xC78ED0", Offset = "0xC78ED0", VA = "0xC78ED0")]
		set
		{
		}
	}

	[Token(Token = "0x17000076")]
	public List<SECTR_Portal> Portals
	{
		[Token(Token = "0x6000245")]
		[Address(RVA = "0xC78EDC", Offset = "0xC78EDC", VA = "0xC78EDC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000077")]
	public List<SECTR_Member> Members
	{
		[Token(Token = "0x6000246")]
		[Address(RVA = "0xC78EE4", Offset = "0xC78EE4", VA = "0xC78EE4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000078")]
	public bool IsConnectedTerrain
	{
		[Token(Token = "0x6000247")]
		[Address(RVA = "0xC78EEC", Offset = "0xC78EEC", VA = "0xC78EEC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600023F")]
	[Address(RVA = "0xC78D7C", Offset = "0xC78D7C", VA = "0xC78D7C")]
	private SECTR_Sector()
	{
	}

	[Token(Token = "0x6000241")]
	[Address(RVA = "0xC72F58", Offset = "0xC72F58", VA = "0xC72F58")]
	public static void GetContaining(ref List<SECTR_Sector> sectors, Vector3 position)
	{
	}

	[Token(Token = "0x6000242")]
	[Address(RVA = "0xC779C8", Offset = "0xC779C8", VA = "0xC779C8")]
	public static void GetContaining(ref List<SECTR_Sector> sectors, Bounds bounds)
	{
	}

	[Token(Token = "0x6000248")]
	[Address(RVA = "0xC78FC4", Offset = "0xC78FC4", VA = "0xC78FC4")]
	public void ConnectTerrainNeighbors()
	{
	}

	[Token(Token = "0x6000249")]
	[Address(RVA = "0xC791AC", Offset = "0xC791AC", VA = "0xC791AC")]
	public void DisonnectTerrainNeighbors()
	{
	}

	[Token(Token = "0x600024A")]
	[Address(RVA = "0xC78698", Offset = "0xC78698", VA = "0xC78698")]
	public void Register(SECTR_Portal portal)
	{
	}

	[Token(Token = "0x600024B")]
	[Address(RVA = "0xC78640", Offset = "0xC78640", VA = "0xC78640")]
	public void Deregister(SECTR_Portal portal)
	{
	}

	[Token(Token = "0x600024C")]
	[Address(RVA = "0xC77920", Offset = "0xC77920", VA = "0xC77920")]
	public void Register(SECTR_Member member)
	{
	}

	[Token(Token = "0x600024D")]
	[Address(RVA = "0xC765D8", Offset = "0xC765D8", VA = "0xC765D8")]
	public void Deregister(SECTR_Member member)
	{
	}

	[Token(Token = "0x600024E")]
	[Address(RVA = "0xC79544", Offset = "0xC79544", VA = "0xC79544", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x600024F")]
	[Address(RVA = "0xC796C0", Offset = "0xC796C0", VA = "0xC796C0", Slot = "5")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x6000250")]
	[Address(RVA = "0xC790EC", Offset = "0xC790EC", VA = "0xC790EC")]
	protected static Terrain GetTerrain(SECTR_Sector sector)
	{
		return null;
	}
}
[Token(Token = "0x2000069")]
public struct SECTR_SectorChildCandidate
{
	[Token(Token = "0x400025A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public List<string> ancestors;

	[Token(Token = "0x400025B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public Transform transform;

	[Token(Token = "0x400025C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Bounds bounds;
}
[Token(Token = "0x200006A")]
public class SECTR_SectorUtils : MonoBehaviour
{
	[Token(Token = "0x6000252")]
	[Address(RVA = "0xC798C8", Offset = "0xC798C8", VA = "0xC798C8")]
	public static bool DoHaveSectors()
	{
		return default(bool);
	}

	[Token(Token = "0x6000253")]
	[Address(RVA = "0xC79978", Offset = "0xC79978", VA = "0xC79978")]
	public static void SendObjectsIntoSectors(ref List<GameObject> parentsUndoList, List<GameObject> gameObjects, Vector3 parentLocation, SECTR_Constants.ReparentingMode localizeBy = SECTR_Constants.ReparentingMode.Bounds, bool mergeSpawns = true, bool doGlobalParenting = false)
	{
	}

	[Token(Token = "0x6000254")]
	[Address(RVA = "0xC79A24", Offset = "0xC79A24", VA = "0xC79A24")]
	public static void SendObjectsIntoSectors(ref List<GameObject> parentsUndoList, List<GameObject> gameObjects, Vector3 parentLocation, string[] hierarchy, SECTR_Constants.ReparentingMode localizeBy = SECTR_Constants.ReparentingMode.Bounds, bool mergeSpawns = true, bool doGlobalParenting = false)
	{
	}

	[Token(Token = "0x6000255")]
	[Address(RVA = "0xC7AC74", Offset = "0xC7AC74", VA = "0xC7AC74")]
	public static void AddObjToCandidateListByPosition(ref List<SECTR_SectorChildCandidate> sectorChildCandidates, Transform objectTransform)
	{
	}

	[Token(Token = "0x6000256")]
	[Address(RVA = "0xC7A578", Offset = "0xC7A578", VA = "0xC7A578")]
	public static void AddObjToCandidateListByPosition(ref List<SECTR_SectorChildCandidate> sectorChildCandidates, Transform objectTransform, string[] ancestors)
	{
	}

	[Token(Token = "0x6000257")]
	[Address(RVA = "0xC7ACD8", Offset = "0xC7ACD8", VA = "0xC7ACD8")]
	public static void AddObjToCandidateListByBounds(ref List<SECTR_SectorChildCandidate> sectorChildCandidates, Transform objectTransform)
	{
	}

	[Token(Token = "0x6000258")]
	[Address(RVA = "0xC7A198", Offset = "0xC7A198", VA = "0xC7A198")]
	public static void AddObjToCandidateListByBounds(ref List<SECTR_SectorChildCandidate> sectorChildCandidates, Transform objectTransform, string[] ancestors)
	{
	}

	[Token(Token = "0x6000259")]
	[Address(RVA = "0xC7A748", Offset = "0xC7A748", VA = "0xC7A748")]
	public static List<SECTR_Sector> GetTopLevelSectors()
	{
		return null;
	}

	[Token(Token = "0x600025A")]
	[Address(RVA = "0xC7AD3C", Offset = "0xC7AD3C", VA = "0xC7AD3C")]
	public static void Encapsulate(List<SECTR_SectorChildCandidate> sectorChildCandidates, string undoString)
	{
	}

	[Token(Token = "0x600025B")]
	[Address(RVA = "0xC7ADE0", Offset = "0xC7ADE0", VA = "0xC7ADE0")]
	public static void Encapsulate(SECTR_Sector newSector, List<SECTR_SectorChildCandidate> sectorChildCandidates, string undoString)
	{
	}

	[Token(Token = "0x600025C")]
	[Address(RVA = "0xC7B144", Offset = "0xC7B144", VA = "0xC7B144")]
	public static Transform UndoParent(Transform parent, Transform child, string undoString)
	{
		return null;
	}

	[Token(Token = "0x600025D")]
	[Address(RVA = "0xC7B1A0", Offset = "0xC7B1A0", VA = "0xC7B1A0")]
	public static void UndoParent(GameObject parent, GameObject child, string undoString)
	{
	}

	[Token(Token = "0x600025E")]
	[Address(RVA = "0xC7A9D0", Offset = "0xC7A9D0", VA = "0xC7A9D0")]
	private static Transform GetParent(ref List<GameObject> newParentList, Transform parentOfHierarchy, Vector3 parentLocation, List<string> hierarchy, bool mergeSpawns)
	{
		return null;
	}

	[Token(Token = "0x600025F")]
	[Address(RVA = "0xC7B1F0", Offset = "0xC7B1F0", VA = "0xC7B1F0")]
	private static GameObject GetGlobalParent(ref List<GameObject> newParents, Vector3 parentLocation, string[] hierarchy, bool mergeSpawns)
	{
		return null;
	}

	[Token(Token = "0x6000260")]
	[Address(RVA = "0xC7A074", Offset = "0xC7A074", VA = "0xC7A074")]
	private static void ParentObjectsGlobally(ref List<GameObject> newParents, List<GameObject> gameObjects, Vector3 parentLocation, string[] hierarchy, bool mergeSpawns)
	{
	}

	[Token(Token = "0x6000261")]
	[Address(RVA = "0xC7B5E8", Offset = "0xC7B5E8", VA = "0xC7B5E8")]
	public SECTR_SectorUtils()
	{
	}
}
[Token(Token = "0x200006B")]
[AttributeUsage(AttributeTargets.Field)]
public class SECTR_ToolTip : Attribute
{
	[Token(Token = "0x400025D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private string tipText;

	[Token(Token = "0x400025E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private string dependentProperty;

	[Token(Token = "0x400025F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float min;

	[Token(Token = "0x4000260")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float max;

	[Token(Token = "0x4000261")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Type enumType;

	[Token(Token = "0x4000262")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool hasRange;

	[Token(Token = "0x4000263")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool devOnly;

	[Token(Token = "0x4000264")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	private bool sceneObjectOverride;

	[Token(Token = "0x4000265")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
	private bool allowSceneObjects;

	[Token(Token = "0x4000266")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private bool treatAsLayer;

	[Token(Token = "0x17000079")]
	public string TipText
	{
		[Token(Token = "0x600026A")]
		[Address(RVA = "0xC7B7C0", Offset = "0xC7B7C0", VA = "0xC7B7C0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700007A")]
	public string DependentProperty
	{
		[Token(Token = "0x600026B")]
		[Address(RVA = "0xC7B7C8", Offset = "0xC7B7C8", VA = "0xC7B7C8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700007B")]
	public float Min
	{
		[Token(Token = "0x600026C")]
		[Address(RVA = "0xC7B7D0", Offset = "0xC7B7D0", VA = "0xC7B7D0")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700007C")]
	public float Max
	{
		[Token(Token = "0x600026D")]
		[Address(RVA = "0xC7B7D8", Offset = "0xC7B7D8", VA = "0xC7B7D8")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700007D")]
	public Type EnumType
	{
		[Token(Token = "0x600026E")]
		[Address(RVA = "0xC7B7E0", Offset = "0xC7B7E0", VA = "0xC7B7E0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700007E")]
	public bool HasRange
	{
		[Token(Token = "0x600026F")]
		[Address(RVA = "0xC7B7E8", Offset = "0xC7B7E8", VA = "0xC7B7E8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700007F")]
	public bool DevOnly
	{
		[Token(Token = "0x6000270")]
		[Address(RVA = "0xC7B7F0", Offset = "0xC7B7F0", VA = "0xC7B7F0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000080")]
	public bool SceneObjectOverride
	{
		[Token(Token = "0x6000271")]
		[Address(RVA = "0xC7B7F8", Offset = "0xC7B7F8", VA = "0xC7B7F8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000081")]
	public bool AllowSceneObjects
	{
		[Token(Token = "0x6000272")]
		[Address(RVA = "0xC7B800", Offset = "0xC7B800", VA = "0xC7B800")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000082")]
	public bool TreatAsLayer
	{
		[Token(Token = "0x6000273")]
		[Address(RVA = "0xC7B808", Offset = "0xC7B808", VA = "0xC7B808")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000262")]
	[Address(RVA = "0xC7B5F0", Offset = "0xC7B5F0", VA = "0xC7B5F0")]
	public SECTR_ToolTip(string tipText)
	{
	}

	[Token(Token = "0x6000263")]
	[Address(RVA = "0xC7B618", Offset = "0xC7B618", VA = "0xC7B618")]
	public SECTR_ToolTip(string tipText, float min, float max)
	{
	}

	[Token(Token = "0x6000264")]
	[Address(RVA = "0xC7B65C", Offset = "0xC7B65C", VA = "0xC7B65C")]
	public SECTR_ToolTip(string tipText, string dependentProperty)
	{
	}

	[Token(Token = "0x6000265")]
	[Address(RVA = "0xC7B688", Offset = "0xC7B688", VA = "0xC7B688")]
	public SECTR_ToolTip(string tipText, string dependentProperty, float min, float max)
	{
	}

	[Token(Token = "0x6000266")]
	[Address(RVA = "0xC7B6D0", Offset = "0xC7B6D0", VA = "0xC7B6D0")]
	public SECTR_ToolTip(string tipText, bool devOnly)
	{
	}

	[Token(Token = "0x6000267")]
	[Address(RVA = "0xC7B700", Offset = "0xC7B700", VA = "0xC7B700")]
	public SECTR_ToolTip(string tipText, bool devOnly, bool treatAsLayer)
	{
	}

	[Token(Token = "0x6000268")]
	[Address(RVA = "0xC7B740", Offset = "0xC7B740", VA = "0xC7B740")]
	public SECTR_ToolTip(string tipText, string dependentProperty, Type enumType)
	{
	}

	[Token(Token = "0x6000269")]
	[Address(RVA = "0xC7B77C", Offset = "0xC7B77C", VA = "0xC7B77C")]
	public SECTR_ToolTip(string tipText, string dependentProperty, bool allowSceneObjects)
	{
	}
}
[Serializable]
[Token(Token = "0x200006C")]
public class SECTR_ULong
{
	[Token(Token = "0x4000267")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	private int first;

	[Token(Token = "0x4000268")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[SerializeField]
	private int second;

	[Token(Token = "0x17000083")]
	public ulong value
	{
		[Token(Token = "0x6000274")]
		[Address(RVA = "0xC7B810", Offset = "0xC7B810", VA = "0xC7B810")]
		get
		{
			return default(ulong);
		}
		[Token(Token = "0x6000275")]
		[Address(RVA = "0xC7B820", Offset = "0xC7B820", VA = "0xC7B820")]
		set
		{
		}
	}

	[Token(Token = "0x6000276")]
	[Address(RVA = "0xC7B82C", Offset = "0xC7B82C", VA = "0xC7B82C")]
	public SECTR_ULong(ulong newValue)
	{
	}

	[Token(Token = "0x6000277")]
	[Address(RVA = "0xC7B858", Offset = "0xC7B858", VA = "0xC7B858")]
	public SECTR_ULong()
	{
	}

	[Token(Token = "0x6000278")]
	[Address(RVA = "0xC7B874", Offset = "0xC7B874", VA = "0xC7B874", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x6000279")]
	[Address(RVA = "0xC7B954", Offset = "0xC7B954", VA = "0xC7B954")]
	public static bool operator >(SECTR_ULong a, ulong b)
	{
		return default(bool);
	}

	[Token(Token = "0x600027A")]
	[Address(RVA = "0xC7B97C", Offset = "0xC7B97C", VA = "0xC7B97C")]
	public static bool operator >(ulong a, SECTR_ULong b)
	{
		return default(bool);
	}

	[Token(Token = "0x600027B")]
	[Address(RVA = "0xC7B9A4", Offset = "0xC7B9A4", VA = "0xC7B9A4")]
	public static bool operator <(SECTR_ULong a, ulong b)
	{
		return default(bool);
	}

	[Token(Token = "0x600027C")]
	[Address(RVA = "0xC7B9CC", Offset = "0xC7B9CC", VA = "0xC7B9CC")]
	public static bool operator <(ulong a, SECTR_ULong b)
	{
		return default(bool);
	}
}
[Token(Token = "0x200006D")]
[RequireComponent(typeof(SECTR_Sector))]
[AddComponentMenu("Procedural Worlds/SECTR/Stream/SECTR Chunk")]
public class SECTR_Chunk : MonoBehaviour
{
	[Token(Token = "0x200006E")]
	public enum LoadState
	{
		[Token(Token = "0x400027D")]
		Unloaded,
		[Token(Token = "0x400027E")]
		Loading,
		[Token(Token = "0x400027F")]
		Loaded,
		[Token(Token = "0x4000280")]
		Unloading,
		[Token(Token = "0x4000281")]
		Active
	}

	[Token(Token = "0x200006F")]
	public delegate void LoadCallback(SECTR_Chunk source, LoadState loadState);

	[Token(Token = "0x2000070")]
	[CompilerGenerated]
	private sealed class <_DeferredUnload>d__45 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SECTR_Chunk <>4__this;

		[Token(Token = "0x17000085")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600029F")]
			[Address(RVA = "0xC7D6EC", Offset = "0xC7D6EC", VA = "0xC7D6EC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000086")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002A1")]
			[Address(RVA = "0xC7D734", Offset = "0xC7D734", VA = "0xC7D734", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600029C")]
		[Address(RVA = "0xC7D2F0", Offset = "0xC7D2F0", VA = "0xC7D2F0")]
		[DebuggerHidden]
		public <_DeferredUnload>d__45(int <>1__state)
		{
		}

		[Token(Token = "0x600029D")]
		[Address(RVA = "0xC7D630", Offset = "0xC7D630", VA = "0xC7D630", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600029E")]
		[Address(RVA = "0xC7D634", Offset = "0xC7D634", VA = "0xC7D634", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002A0")]
		[Address(RVA = "0xC7D6F4", Offset = "0xC7D6F4", VA = "0xC7D6F4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000071")]
	[CompilerGenerated]
	private sealed class <_UnloadScene>d__46 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SECTR_Chunk <>4__this;

		[Token(Token = "0x17000087")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002A5")]
			[Address(RVA = "0xC7D80C", Offset = "0xC7D80C", VA = "0xC7D80C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000088")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002A7")]
			[Address(RVA = "0xC7D854", Offset = "0xC7D854", VA = "0xC7D854", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002A2")]
		[Address(RVA = "0xC7D380", Offset = "0xC7D380", VA = "0xC7D380")]
		[DebuggerHidden]
		public <_UnloadScene>d__46(int <>1__state)
		{
		}

		[Token(Token = "0x60002A3")]
		[Address(RVA = "0xC7D73C", Offset = "0xC7D73C", VA = "0xC7D73C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002A4")]
		[Address(RVA = "0xC7D740", Offset = "0xC7D740", VA = "0xC7D740", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002A6")]
		[Address(RVA = "0xC7D814", Offset = "0xC7D814", VA = "0xC7D814", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000269")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private AsyncOperation asyncLoadOp;

	[Token(Token = "0x400026A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private LoadState loadState;

	[Token(Token = "0x400026B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int refCount;

	[Token(Token = "0x400026C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject chunkRoot;

	[Token(Token = "0x400026D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject chunkSector;

	[Token(Token = "0x400026E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool recenterChunk;

	[Token(Token = "0x400026F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private SECTR_Sector cachedSector;

	[Token(Token = "0x4000270")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GameObject proxy;

	[Token(Token = "0x4000271")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool quitting;

	[Token(Token = "0x4000272")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static SECTR_Chunk chunkActivating;

	[Token(Token = "0x4000273")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static LinkedList<SECTR_Chunk> activationQueue;

	[Token(Token = "0x4000274")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static bool requestedDeferredUnload;

	[Token(Token = "0x4000275")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SECTR_ToolTip("The path of the scene to load")]
	public string ScenePath;

	[Token(Token = "0x4000276")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SECTR_ToolTip("The unique name of the root object in the exported Sector.")]
	public string NodeName;

	[Token(Token = "0x4000277")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SECTR_ToolTip("Exports the Chunk in a way that allows it to be shared by multiple Sectors, but may take more CPU to load.")]
	public bool ExportForReuse;

	[Token(Token = "0x4000278")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SECTR_ToolTip("A mesh to display when this Chunk is unloaded. Will be hidden when loaded.")]
	public Mesh ProxyMesh;

	[Token(Token = "0x4000279")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SECTR_ToolTip("The per-submesh materials for the proxy.")]
	public Material[] ProxyMaterials;

	[Token(Token = "0x17000084")]
	public SECTR_Sector Sector
	{
		[Token(Token = "0x600027D")]
		[Address(RVA = "0xC7B9F4", Offset = "0xC7B9F4", VA = "0xC7B9F4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x14000002")]
	public event LoadCallback Changed
	{
		[Token(Token = "0x6000283")]
		[Address(RVA = "0xC7BD6C", Offset = "0xC7BD6C", VA = "0xC7BD6C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000284")]
		[Address(RVA = "0xC7BE08", Offset = "0xC7BE08", VA = "0xC7BE08")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000003")]
	public event LoadCallback ReferenceChange
	{
		[Token(Token = "0x6000285")]
		[Address(RVA = "0xC7BEA4", Offset = "0xC7BEA4", VA = "0xC7BEA4")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000286")]
		[Address(RVA = "0xC7BF40", Offset = "0xC7BF40", VA = "0xC7BF40")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x600027E")]
	[Address(RVA = "0xC7B9FC", Offset = "0xC7B9FC", VA = "0xC7B9FC")]
	public void AddReference()
	{
	}

	[Token(Token = "0x600027F")]
	[Address(RVA = "0xC7BB90", Offset = "0xC7BB90", VA = "0xC7BB90")]
	public void RemoveReference()
	{
	}

	[Token(Token = "0x6000280")]
	[Address(RVA = "0xC7BCE4", Offset = "0xC7BCE4", VA = "0xC7BCE4")]
	public bool IsLoaded()
	{
		return default(bool);
	}

	[Token(Token = "0x6000281")]
	[Address(RVA = "0xC7BCF4", Offset = "0xC7BCF4", VA = "0xC7BCF4")]
	public bool IsUnloaded()
	{
		return default(bool);
	}

	[Token(Token = "0x6000282")]
	[Address(RVA = "0xC7BD04", Offset = "0xC7BD04", VA = "0xC7BD04")]
	public float LoadProgress()
	{
		return default(float);
	}

	[Token(Token = "0x6000287")]
	[Address(RVA = "0xC7BFDC", Offset = "0xC7BFDC", VA = "0xC7BFDC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000288")]
	[Address(RVA = "0xC7BFE4", Offset = "0xC7BFE4", VA = "0xC7BFE4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000289")]
	[Address(RVA = "0xC7C280", Offset = "0xC7C280", VA = "0xC7C280")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600028A")]
	[Address(RVA = "0xC7C894", Offset = "0xC7C894", VA = "0xC7C894")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x600028B")]
	[Address(RVA = "0xC7C8A0", Offset = "0xC7C8A0", VA = "0xC7C8A0")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600028C")]
	[Address(RVA = "0xC7BA4C", Offset = "0xC7BA4C", VA = "0xC7BA4C")]
	private void _Load()
	{
	}

	[Token(Token = "0x600028D")]
	[Address(RVA = "0xC7BBE0", Offset = "0xC7BBE0", VA = "0xC7BBE0")]
	private void _Unload()
	{
	}

	[Token(Token = "0x600028E")]
	[Address(RVA = "0xC7C584", Offset = "0xC7C584", VA = "0xC7C584")]
	private void _DestroyChunk(bool createProxy, bool fromDisable)
	{
	}

	[Token(Token = "0x600028F")]
	[Address(RVA = "0xC7C36C", Offset = "0xC7C36C", VA = "0xC7C36C")]
	private void _FindChunkRoot()
	{
	}

	[Token(Token = "0x6000290")]
	[Address(RVA = "0xC7CBD0", Offset = "0xC7CBD0", VA = "0xC7CBD0")]
	private void _SetupChunk()
	{
	}

	[Token(Token = "0x6000291")]
	[Address(RVA = "0xC7C054", Offset = "0xC7C054", VA = "0xC7C054")]
	private void _CreateProxy()
	{
	}

	[Token(Token = "0x6000292")]
	[Address(RVA = "0xC7CA20", Offset = "0xC7CA20", VA = "0xC7CA20")]
	private void _TrySceneActivation()
	{
	}

	[Token(Token = "0x6000293")]
	[Address(RVA = "0xC7D120", Offset = "0xC7D120", VA = "0xC7D120")]
	private void _UnloadResources()
	{
	}

	[Token(Token = "0x6000294")]
	[Address(RVA = "0xC7D288", Offset = "0xC7D288", VA = "0xC7D288")]
	[IteratorStateMachine(typeof(<_DeferredUnload>d__45))]
	private IEnumerator _DeferredUnload()
	{
		return null;
	}

	[Token(Token = "0x6000295")]
	[Address(RVA = "0xC7D318", Offset = "0xC7D318", VA = "0xC7D318")]
	[IteratorStateMachine(typeof(<_UnloadScene>d__46))]
	private IEnumerator _UnloadScene(string scenePath)
	{
		return null;
	}

	[Token(Token = "0x6000296")]
	[Address(RVA = "0xC7D3A8", Offset = "0xC7D3A8", VA = "0xC7D3A8")]
	public SECTR_Chunk()
	{
	}
}
[Token(Token = "0x2000072")]
[AddComponentMenu("")]
public class SECTR_ChunkRef : MonoBehaviour
{
	[Token(Token = "0x4000288")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<SECTR_ChunkRef> allChunkRefs;

	[Token(Token = "0x4000289")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform RealSector;

	[Token(Token = "0x400028A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool Recentered;

	[Token(Token = "0x60002A8")]
	[Address(RVA = "0xC7D180", Offset = "0xC7D180", VA = "0xC7D180")]
	public static SECTR_ChunkRef FindChunkRef(string chunkName)
	{
		return null;
	}

	[Token(Token = "0x60002A9")]
	[Address(RVA = "0xC7D85C", Offset = "0xC7D85C", VA = "0xC7D85C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002AA")]
	[Address(RVA = "0xC7D92C", Offset = "0xC7D92C", VA = "0xC7D92C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60002AB")]
	[Address(RVA = "0xC7D9AC", Offset = "0xC7D9AC", VA = "0xC7D9AC")]
	public SECTR_ChunkRef()
	{
	}
}
[Token(Token = "0x2000073")]
public class SECTR_GroupLoader : SECTR_Loader
{
	[Token(Token = "0x400028B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SECTR_ToolTip("The Sectors to load and unload together.")]
	public List<SECTR_Sector> Sectors;

	[Token(Token = "0x17000089")]
	public override bool Loaded
	{
		[Token(Token = "0x60002AE")]
		[Address(RVA = "0xC7DA80", Offset = "0xC7DA80", VA = "0xC7DA80", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60002AD")]
	[Address(RVA = "0xC7DA40", Offset = "0xC7DA40", VA = "0xC7DA40", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x60002AF")]
	[Address(RVA = "0xC7DBC4", Offset = "0xC7DBC4", VA = "0xC7DBC4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002B0")]
	[Address(RVA = "0xC7DD48", Offset = "0xC7DD48", VA = "0xC7DD48")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60002B1")]
	[Address(RVA = "0xC7DECC", Offset = "0xC7DECC", VA = "0xC7DECC")]
	private void ChunkChanged(SECTR_Chunk source, SECTR_Chunk.LoadState loadState)
	{
	}

	[Token(Token = "0x60002B2")]
	[Address(RVA = "0xC7E0D0", Offset = "0xC7E0D0", VA = "0xC7E0D0")]
	public SECTR_GroupLoader()
	{
	}
}
[Token(Token = "0x2000074")]
[AddComponentMenu("Procedural Worlds/SECTR/Stream/SECTR Hibernator")]
[RequireComponent(typeof(SECTR_Member))]
public class SECTR_Hibernator : MonoBehaviour
{
	[Token(Token = "0x2000075")]
	public delegate void HibernateCallback();

	[Token(Token = "0x400028C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool hibernating;

	[Token(Token = "0x400028D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private SECTR_Member cachedMember;

	[Token(Token = "0x400028E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<SECTR_Chunk, SECTR_Chunk> chunks;

	[Token(Token = "0x400028F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int numLoadedSectors;

	[Token(Token = "0x4000290")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SECTR_ToolTip("Hibernate components on children as well as ones on this game object.")]
	public bool HibernateChildren;

	[Token(Token = "0x4000291")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	[SECTR_ToolTip("Disable Behavior components during hibernation.")]
	public bool HibernateBehaviors;

	[Token(Token = "0x4000292")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
	[SECTR_ToolTip("Disable Collder components during hibernation.")]
	public bool HibernateColliders;

	[Token(Token = "0x4000293")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x37")]
	[SECTR_ToolTip("Disable RigidBody components during hibernation.")]
	public bool HibernateRigidBodies;

	[Token(Token = "0x4000294")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SECTR_ToolTip("Hide Render components during hibernation.")]
	public bool HibernateRenderers;

	[Token(Token = "0x4000295")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SECTR_ToolTip("Apply hibernation to an alternate entity.")]
	public GameObject HibernateTarget;

	[Token(Token = "0x14000004")]
	public event HibernateCallback Awoke
	{
		[Token(Token = "0x60002B3")]
		[Address(RVA = "0xC8E59C", Offset = "0xC8E59C", VA = "0xC8E59C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60002B4")]
		[Address(RVA = "0xC8E638", Offset = "0xC8E638", VA = "0xC8E638")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000005")]
	public event HibernateCallback Hibernated
	{
		[Token(Token = "0x60002B5")]
		[Address(RVA = "0xC8E6D4", Offset = "0xC8E6D4", VA = "0xC8E6D4")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60002B6")]
		[Address(RVA = "0xC8E770", Offset = "0xC8E770", VA = "0xC8E770")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000006")]
	public event HibernateCallback HibernateUpdate
	{
		[Token(Token = "0x60002B7")]
		[Address(RVA = "0xC8E80C", Offset = "0xC8E80C", VA = "0xC8E80C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60002B8")]
		[Address(RVA = "0xC8E8A8", Offset = "0xC8E8A8", VA = "0xC8E8A8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x60002B9")]
	[Address(RVA = "0xC8E944", Offset = "0xC8E944", VA = "0xC8E944")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002BA")]
	[Address(RVA = "0xC8EA20", Offset = "0xC8EA20", VA = "0xC8EA20")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60002BB")]
	[Address(RVA = "0xC8EAD4", Offset = "0xC8EAD4", VA = "0xC8EAD4")]
	private void _ChunkChanged(SECTR_Chunk source, SECTR_Chunk.LoadState loadState)
	{
	}

	[Token(Token = "0x60002BC")]
	[Address(RVA = "0xC8EB64", Offset = "0xC8EB64", VA = "0xC8EB64")]
	private void _MembershipChanged(List<SECTR_Sector> left, List<SECTR_Sector> joined)
	{
	}

	[Token(Token = "0x60002BD")]
	[Address(RVA = "0xC8EAFC", Offset = "0xC8EAFC", VA = "0xC8EAFC")]
	private void _HibernationChanged()
	{
	}

	[Token(Token = "0x60002BE")]
	[Address(RVA = "0xC8EED8", Offset = "0xC8EED8", VA = "0xC8EED8")]
	private void _WakeUp()
	{
	}

	[Token(Token = "0x60002BF")]
	[Address(RVA = "0xC8EE98", Offset = "0xC8EE98", VA = "0xC8EE98")]
	private void _Hibernate()
	{
	}

	[Token(Token = "0x60002C0")]
	[Address(RVA = "0xC8EF14", Offset = "0xC8EF14", VA = "0xC8EF14")]
	private void _UpdateComponents()
	{
	}

	[Token(Token = "0x60002C1")]
	[Address(RVA = "0xC8F374", Offset = "0xC8F374", VA = "0xC8F374")]
	public SECTR_Hibernator()
	{
	}
}
[Token(Token = "0x2000076")]
[AddComponentMenu("")]
public class SECTR_LightmapRef : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000077")]
	public class RefData
	{
		[Token(Token = "0x400029C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Texture2D FarLightmap;

		[Token(Token = "0x400029D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Texture2D NearLightmap;

		[Token(Token = "0x400029E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int index;

		[Token(Token = "0x60002CC")]
		[Address(RVA = "0xC8F8E4", Offset = "0xC8F8E4", VA = "0xC8F8E4")]
		public RefData()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000078")]
	public class RenderData
	{
		[Token(Token = "0x400029F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Renderer renderer;

		[Token(Token = "0x40002A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int rendererLightmapIndex;

		[Token(Token = "0x40002A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector4 rendererLightmapScaleOffset;

		[Token(Token = "0x40002A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Terrain terrain;

		[Token(Token = "0x40002A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int terrainLightmapIndex;

		[Token(Token = "0x60002CD")]
		[Address(RVA = "0xC8F8F4", Offset = "0xC8F8F4", VA = "0xC8F8F4")]
		public RenderData()
		{
		}
	}

	[Token(Token = "0x4000299")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	[SerializeField]
	private List<RefData> lightmapRefs;

	[Token(Token = "0x400029A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	[SerializeField]
	private List<RenderData> lightmapRenderRefs;

	[Token(Token = "0x400029B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int[] globalLightmapRefCount;

	[Token(Token = "0x1700008A")]
	public List<RefData> LightmapRefs
	{
		[Token(Token = "0x60002C6")]
		[Address(RVA = "0xC8F4FC", Offset = "0xC8F4FC", VA = "0xC8F4FC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700008B")]
	public List<RenderData> LightmapRenderers
	{
		[Token(Token = "0x60002C7")]
		[Address(RVA = "0xC8F504", Offset = "0xC8F504", VA = "0xC8F504")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60002C8")]
	[Address(RVA = "0xC8F50C", Offset = "0xC8F50C", VA = "0xC8F50C")]
	public static void InitRefCounts()
	{
	}

	[Token(Token = "0x60002C9")]
	[Address(RVA = "0xC8F6A8", Offset = "0xC8F6A8", VA = "0xC8F6A8")]
	private void Start()
	{
	}

	[Token(Token = "0x60002CA")]
	[Address(RVA = "0xC8F820", Offset = "0xC8F820", VA = "0xC8F820")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60002CB")]
	[Address(RVA = "0xC8F824", Offset = "0xC8F824", VA = "0xC8F824")]
	public SECTR_LightmapRef()
	{
	}
}
[Token(Token = "0x2000079")]
public abstract class SECTR_Loader : MonoBehaviour
{
	[Token(Token = "0x40002A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool locked;

	[Token(Token = "0x1700008C")]
	public abstract bool Loaded
	{
		[Token(Token = "0x60002CE")]
		get;
	}

	[Token(Token = "0x60002CF")]
	[Address(RVA = "0xC8F958", Offset = "0xC8F958", VA = "0xC8F958", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x60002D0")]
	[Address(RVA = "0xC8F998", Offset = "0xC8F998", VA = "0xC8F998")]
	protected void LockSelf(bool lockSelf)
	{
	}

	[Token(Token = "0x60002D1")]
	[Address(RVA = "0xC8FAE0", Offset = "0xC8FAE0", VA = "0xC8FAE0")]
	protected SECTR_Loader()
	{
	}
}
[Token(Token = "0x200007A")]
[AddComponentMenu("Procedural Worlds/SECTR/Stream/SECTR Loading Door")]
public class SECTR_LoadingDoor : SECTR_Door
{
	[Token(Token = "0x200007B")]
	private enum FadeMode
	{
		[Token(Token = "0x40002AD")]
		None,
		[Token(Token = "0x40002AE")]
		FadeIn,
		[Token(Token = "0x40002AF")]
		FadeOut,
		[Token(Token = "0x40002B0")]
		Hold
	}

	[Token(Token = "0x200007C")]
	private class LoadRequest
	{
		[Token(Token = "0x40002B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SECTR_Chunk chunkToLoad;

		[Token(Token = "0x40002B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SECTR_Chunk chunkToUnload;

		[Token(Token = "0x40002B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SECTR_Chunk loadedChunk;

		[Token(Token = "0x40002B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool enteredFront;

		[Token(Token = "0x40002B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool enteredBack;

		[Token(Token = "0x40002B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public FadeMode fadeMode;

		[Token(Token = "0x40002B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float fadeAmount;

		[Token(Token = "0x40002B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float holdStart;

		[Token(Token = "0x60002DB")]
		[Address(RVA = "0xC90014", Offset = "0xC90014", VA = "0xC90014")]
		public LoadRequest()
		{
		}
	}

	[Token(Token = "0x40002A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Texture2D fadeTexture;

	[Token(Token = "0x40002A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Dictionary<Collider, LoadRequest> loadRequests;

	[Token(Token = "0x40002A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SECTR_ToolTip("Specifies which layers are allow to cause loads (vs simply opening the door).")]
	public LayerMask LoadLayers;

	[Token(Token = "0x40002A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	[SECTR_ToolTip("Should screen fade to black before loading.")]
	public bool FadeBeforeLoad;

	[Token(Token = "0x40002A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SECTR_ToolTip("How long to fade out before loading. Also, how long to fade back in.", "FadeBeforeLoad")]
	public float FadeTime;

	[Token(Token = "0x40002AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	[SECTR_ToolTip("How long to stay faded out. Helps cover pops right at the moment of loading.", "FadeBeforeLoad")]
	public float HoldTime;

	[Token(Token = "0x40002AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SECTR_ToolTip("The color to fade the screen to on load.", "FadeBeforeLoad")]
	public Color FadeColor;

	[Token(Token = "0x60002D2")]
	[Address(RVA = "0xC8FAE8", Offset = "0xC8FAE8", VA = "0xC8FAE8", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x60002D3")]
	[Address(RVA = "0xC8FB98", Offset = "0xC8FB98", VA = "0xC8FB98", Slot = "5")]
	protected override void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60002D4")]
	[Address(RVA = "0xC9001C", Offset = "0xC9001C", VA = "0xC9001C", Slot = "6")]
	protected override void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60002D5")]
	[Address(RVA = "0xC902EC", Offset = "0xC902EC", VA = "0xC902EC")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60002D6")]
	[Address(RVA = "0xC90670", Offset = "0xC90670", VA = "0xC90670", Slot = "7")]
	protected override bool CanOpen()
	{
		return default(bool);
	}

	[Token(Token = "0x60002D7")]
	[Address(RVA = "0xC907F4", Offset = "0xC907F4", VA = "0xC907F4")]
	private void OnClose()
	{
	}

	[Token(Token = "0x60002D8")]
	[Address(RVA = "0xC9071C", Offset = "0xC9071C", VA = "0xC9071C")]
	private bool _IsSectorLoaded(SECTR_Sector sector)
	{
		return default(bool);
	}

	[Token(Token = "0x60002D9")]
	[Address(RVA = "0xC8FEA0", Offset = "0xC8FEA0", VA = "0xC8FEA0")]
	private SECTR_Chunk _GetOppositeChunk(Vector3 position)
	{
		return null;
	}

	[Token(Token = "0x60002DA")]
	[Address(RVA = "0xC90938", Offset = "0xC90938", VA = "0xC90938")]
	public SECTR_LoadingDoor()
	{
	}
}
[Token(Token = "0x200007D")]
[RequireComponent(typeof(SECTR_Member))]
[AddComponentMenu("Procedural Worlds/SECTR/Stream/SECTR Neighbor Loader")]
public class SECTR_NeighborLoader : SECTR_Loader
{
	[Token(Token = "0x40002B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private SECTR_Member cachedMember;

	[Token(Token = "0x40002BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<SECTR_Sector> currentSectors;

	[Token(Token = "0x40002BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<SECTR_Graph.Node> neighbors;

	[Token(Token = "0x40002BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SECTR_ToolTip("Determines how far out to load neighbor sectors from the current sector. Depth of 0 means only the current Sector.")]
	public int MaxDepth;

	[Token(Token = "0x1700008D")]
	public override bool Loaded
	{
		[Token(Token = "0x60002DD")]
		[Address(RVA = "0xC90A1C", Offset = "0xC90A1C", VA = "0xC90A1C", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60002DC")]
	[Address(RVA = "0xC909DC", Offset = "0xC909DC", VA = "0xC909DC", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x60002DE")]
	[Address(RVA = "0xC90B38", Offset = "0xC90B38", VA = "0xC90B38")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002DF")]
	[Address(RVA = "0xC90BF0", Offset = "0xC90BF0", VA = "0xC90BF0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60002E0")]
	[Address(RVA = "0xC91100", Offset = "0xC91100", VA = "0xC91100")]
	private void Start()
	{
	}

	[Token(Token = "0x60002E1")]
	[Address(RVA = "0xC91108", Offset = "0xC91108", VA = "0xC91108")]
	private void Update()
	{
	}

	[Token(Token = "0x60002E2")]
	[Address(RVA = "0xC90CF0", Offset = "0xC90CF0", VA = "0xC90CF0")]
	private void _MembershipChanged(List<SECTR_Sector> left, List<SECTR_Sector> joined)
	{
	}

	[Token(Token = "0x60002E3")]
	[Address(RVA = "0xC91140", Offset = "0xC91140", VA = "0xC91140")]
	public SECTR_NeighborLoader()
	{
	}
}
[Token(Token = "0x200007E")]
[AddComponentMenu("Procedural Worlds/SECTR/Stream/SECTR Region Loader")]
public class SECTR_RegionLoader : SECTR_Loader
{
	[Token(Token = "0x40002BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<SECTR_Sector> sectors;

	[Token(Token = "0x40002BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<SECTR_Sector> loadSectors;

	[Token(Token = "0x40002BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<SECTR_Sector> unloadSectors;

	[Token(Token = "0x40002C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool updated;

	[Token(Token = "0x40002C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SECTR_ToolTip("The dimensions of the volume in which terrain chunks should be loaded.")]
	public Vector3 LoadSize;

	[Token(Token = "0x40002C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SECTR_ToolTip("The distance from the load size that you need to move for a Sector to unload (as a percentage).", 0f, 1f)]
	public float UnloadBuffer;

	[Token(Token = "0x40002C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SECTR_ToolTip("If set, will only load Sectors in matching layers.")]
	public LayerMask LayersToLoad;

	[Token(Token = "0x1700008E")]
	public override bool Loaded
	{
		[Token(Token = "0x60002E5")]
		[Address(RVA = "0xC91250", Offset = "0xC91250", VA = "0xC91250", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60002E4")]
	[Address(RVA = "0xC91210", Offset = "0xC91210", VA = "0xC91210", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x60002E6")]
	[Address(RVA = "0xC91398", Offset = "0xC91398", VA = "0xC91398")]
	private void Start()
	{
	}

	[Token(Token = "0x60002E7")]
	[Address(RVA = "0xC913A0", Offset = "0xC913A0", VA = "0xC913A0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60002E8")]
	[Address(RVA = "0xC914FC", Offset = "0xC914FC", VA = "0xC914FC")]
	private void Update()
	{
	}

	[Token(Token = "0x60002E9")]
	[Address(RVA = "0xC91980", Offset = "0xC91980", VA = "0xC91980")]
	public SECTR_RegionLoader()
	{
	}
}
[Token(Token = "0x200007F")]
[RequireComponent(typeof(SECTR_Member))]
[AddComponentMenu("Procedural Worlds/SECTR/Stream/SECTR Start Loader")]
public class SECTR_StartLoader : SECTR_Loader
{
	[Token(Token = "0x40002C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Texture2D fadeTexture;

	[Token(Token = "0x40002C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float fadeAmount;

	[Token(Token = "0x40002C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private SECTR_Member cachedMember;

	[Token(Token = "0x40002C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SECTR_ToolTip("Set to true if the scene should start at black and fade in when loaded.")]
	public bool FadeIn;

	[Token(Token = "0x40002C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SECTR_ToolTip("Amount of time to fade in.", "FadeIn")]
	public float FadeTime;

	[Token(Token = "0x40002C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SECTR_ToolTip("The color to fade the screen to on load.", "FadeIn")]
	public Color FadeColor;

	[NonSerialized]
	[Token(Token = "0x40002CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool Paused;

	[Token(Token = "0x1700008F")]
	public override bool Loaded
	{
		[Token(Token = "0x60002EB")]
		[Address(RVA = "0xC91AA4", Offset = "0xC91AA4", VA = "0xC91AA4", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60002EA")]
	[Address(RVA = "0xC91A64", Offset = "0xC91A64", VA = "0xC91A64", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x60002EC")]
	[Address(RVA = "0xC91BF4", Offset = "0xC91BF4", VA = "0xC91BF4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002ED")]
	[Address(RVA = "0xC91CBC", Offset = "0xC91CBC", VA = "0xC91CBC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60002EE")]
	[Address(RVA = "0xC91CC8", Offset = "0xC91CC8", VA = "0xC91CC8")]
	private void Start()
	{
	}

	[Token(Token = "0x60002EF")]
	[Address(RVA = "0xC91DF8", Offset = "0xC91DF8", VA = "0xC91DF8")]
	private void Update()
	{
	}

	[Token(Token = "0x60002F0")]
	[Address(RVA = "0xC91E8C", Offset = "0xC91E8C", VA = "0xC91E8C")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60002F1")]
	[Address(RVA = "0xC91FF0", Offset = "0xC91FF0", VA = "0xC91FF0")]
	public SECTR_StartLoader()
	{
	}
}
[Token(Token = "0x2000080")]
[AddComponentMenu("Procedural Worlds/SECTR/Stream/SECTR Trigger Loader")]
public class SECTR_TriggerLoader : SECTR_Loader
{
	[Token(Token = "0x40002CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	protected int loadedCount;

	[Token(Token = "0x40002CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected bool chunksReferenced;

	[Token(Token = "0x40002CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SECTR_ToolTip("List of Sectors to load when entering this trigger.")]
	public List<SECTR_Sector> Sectors;

	[Token(Token = "0x40002CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SECTR_ToolTip("Should the Sectors be unloaded when trigger is exited.")]
	public bool UnloadOnExit;

	[Token(Token = "0x17000090")]
	public override bool Loaded
	{
		[Token(Token = "0x60002F3")]
		[Address(RVA = "0xC92050", Offset = "0xC92050", VA = "0xC92050", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60002F2")]
	[Address(RVA = "0xC92010", Offset = "0xC92010", VA = "0xC92010", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x60002F4")]
	[Address(RVA = "0xC9216C", Offset = "0xC9216C", VA = "0xC9216C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60002F5")]
	[Address(RVA = "0xC922C0", Offset = "0xC922C0", VA = "0xC922C0")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60002F6")]
	[Address(RVA = "0xC9242C", Offset = "0xC9242C", VA = "0xC9242C")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60002F7")]
	[Address(RVA = "0xC922EC", Offset = "0xC922EC", VA = "0xC922EC")]
	private void _RefChunks()
	{
	}

	[Token(Token = "0x60002F8")]
	[Address(RVA = "0xC92184", Offset = "0xC92184", VA = "0xC92184")]
	private void _UnrefChunks()
	{
	}

	[Token(Token = "0x60002F9")]
	[Address(RVA = "0xC92450", Offset = "0xC92450", VA = "0xC92450")]
	public SECTR_TriggerLoader()
	{
	}
}
[Token(Token = "0x2000081")]
[ExecuteInEditMode]
[RequireComponent(typeof(SECTR_Member))]
[AddComponentMenu("")]
public class SECTR_Culler : MonoBehaviour
{
	[Token(Token = "0x40002CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private SECTR_Member cachedMember;

	[Token(Token = "0x40002D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SECTR_ToolTip("Overrides the culling information on Member.")]
	public bool CullEachChild;

	[Token(Token = "0x60002FA")]
	[Address(RVA = "0xC924D4", Offset = "0xC924D4", VA = "0xC924D4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002FB")]
	[Address(RVA = "0xC92540", Offset = "0xC92540", VA = "0xC92540")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60002FC")]
	[Address(RVA = "0xC92544", Offset = "0xC92544", VA = "0xC92544")]
	public SECTR_Culler()
	{
	}
}
[Token(Token = "0x2000082")]
[RequireComponent(typeof(Camera))]
[AddComponentMenu("Procedural Worlds/SECTR/Vis/SECTR Culling Camera")]
[ExecuteInEditMode]
public class SECTR_CullingCamera : MonoBehaviour
{
	[Token(Token = "0x2000083")]
	private struct VisibilityNode
	{
		[Token(Token = "0x40002FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SECTR_Sector sector;

		[Token(Token = "0x40002FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public SECTR_Portal portal;

		[Token(Token = "0x40002FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<Plane> frustumPlanes;

		[Token(Token = "0x4000300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool forwardTraversal;

		[Token(Token = "0x6000316")]
		[Address(RVA = "0xC96548", Offset = "0xC96548", VA = "0xC96548")]
		public VisibilityNode(SECTR_CullingCamera cullingCamera, SECTR_Sector sector, SECTR_Portal portal, Plane[] frustumPlanes, bool forwardTraversal)
		{
		}

		[Token(Token = "0x6000317")]
		[Address(RVA = "0xC9725C", Offset = "0xC9725C", VA = "0xC9725C")]
		public VisibilityNode(SECTR_CullingCamera cullingCamera, SECTR_Sector sector, SECTR_Portal portal, List<Plane> frustumPlanes, bool forwardTraversal)
		{
		}
	}

	[Token(Token = "0x2000084")]
	private struct ClipVertex
	{
		[Token(Token = "0x4000301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector4 vertex;

		[Token(Token = "0x4000302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float side;

		[Token(Token = "0x6000318")]
		[Address(RVA = "0xC96888", Offset = "0xC96888", VA = "0xC96888")]
		public ClipVertex(Vector4 vertex, float side)
		{
		}
	}

	[Token(Token = "0x2000085")]
	private struct ThreadCullData
	{
		[Token(Token = "0x2000086")]
		public enum CullingModes
		{
			[Token(Token = "0x400030D")]
			None,
			[Token(Token = "0x400030E")]
			Graph,
			[Token(Token = "0x400030F")]
			Shadow
		}

		[Token(Token = "0x4000303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SECTR_Sector sector;

		[Token(Token = "0x4000304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector3 cameraPos;

		[Token(Token = "0x4000305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Plane> cullingPlanes;

		[Token(Token = "0x4000306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<List<Plane>> occluderFrustums;

		[Token(Token = "0x4000307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int baseMask;

		[Token(Token = "0x4000308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float shadowDistance;

		[Token(Token = "0x4000309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool cullingSimpleCulling;

		[Token(Token = "0x400030A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<SECTR_Member.Child> sectorShadowLights;

		[Token(Token = "0x400030B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public CullingModes cullingMode;

		[Token(Token = "0x6000319")]
		[Address(RVA = "0xC96B80", Offset = "0xC96B80", VA = "0xC96B80")]
		public ThreadCullData(SECTR_Sector sector, SECTR_CullingCamera cullingCamera, Vector3 cameraPos, List<Plane> cullingPlanes, List<List<Plane>> occluderFrustums, int baseMask, float shadowDistance, bool cullingSimpleCulling)
		{
		}

		[Token(Token = "0x600031A")]
		[Address(RVA = "0xC9821C", Offset = "0xC9821C", VA = "0xC9821C")]
		public ThreadCullData(SECTR_Sector sector, Vector3 cameraPos, List<SECTR_Member.Child> sectorShadowLights)
		{
		}
	}

	[Token(Token = "0x40002D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Camera myCamera;

	[Token(Token = "0x40002D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private SECTR_Member cullingMember;

	[Token(Token = "0x40002D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<int, SECTR_Member.Child> hiddenRenderers;

	[Token(Token = "0x40002D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Dictionary<int, SECTR_Member.Child> hiddenLights;

	[Token(Token = "0x40002D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Dictionary<int, SECTR_Member.Child> hiddenTerrains;

	[Token(Token = "0x40002D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int renderersCulled;

	[Token(Token = "0x40002D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int lightsCulled;

	[Token(Token = "0x40002D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int terrainsCulled;

	[Token(Token = "0x40002D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool didCull;

	[Token(Token = "0x40002DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	private bool runOnce;

	[Token(Token = "0x40002DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<SECTR_Sector> initialSectors;

	[Token(Token = "0x40002DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Stack<VisibilityNode> nodeStack;

	[Token(Token = "0x40002DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<ClipVertex> portalVertices;

	[Token(Token = "0x40002DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private List<Plane> newFrustum;

	[Token(Token = "0x40002DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private List<Plane> cullingPlanes;

	[Token(Token = "0x40002E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private List<List<Plane>> occluderFrustums;

	[Token(Token = "0x40002E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Dictionary<SECTR_Occluder, SECTR_Occluder> activeOccluders;

	[Token(Token = "0x40002E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private List<ClipVertex> occluderVerts;

	[Token(Token = "0x40002E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Dictionary<SECTR_Member.Child, int> shadowLights;

	[Token(Token = "0x40002E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private List<SECTR_Sector> shadowSectors;

	[Token(Token = "0x40002E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Dictionary<SECTR_Sector, List<SECTR_Member.Child>> shadowSectorTable;

	[Token(Token = "0x40002E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Dictionary<int, SECTR_Member.Child> visibleRenderers;

	[Token(Token = "0x40002E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Dictionary<int, SECTR_Member.Child> visibleLights;

	[Token(Token = "0x40002E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Dictionary<int, SECTR_Member.Child> visibleTerrains;

	[Token(Token = "0x40002E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private List<SECTR_Member.Child> visibleClothRenderers;

	[Token(Token = "0x40002EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Stack<List<Plane>> frustumPool;

	[Token(Token = "0x40002EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Stack<List<SECTR_Member.Child>> shadowLightPool;

	[Token(Token = "0x40002EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Stack<Dictionary<int, SECTR_Member.Child>> threadVisibleListPool;

	[Token(Token = "0x40002ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private Stack<Dictionary<SECTR_Member.Child, int>> threadShadowLightPool;

	[Token(Token = "0x40002EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private Stack<List<Plane>> threadFrustumPool;

	[Token(Token = "0x40002EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private Stack<List<List<Plane>>> threadOccluderPool;

	[Token(Token = "0x40002F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private List<Thread> workerThreads;

	[Token(Token = "0x40002F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private Queue<ThreadCullData> cullingWorkQueue;

	[Token(Token = "0x40002F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private int remainingThreadWork;

	[Token(Token = "0x40002F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<SECTR_CullingCamera> allCullingCameras;

	[Token(Token = "0x40002F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	[SECTR_ToolTip("Allows multiple culling cameras to be active at once, but at the cost of some performance.")]
	public bool MultiCameraCulling;

	[Token(Token = "0x40002F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10D")]
	[SECTR_ToolTip("Forces culling into a mode designed for 2D and iso games where the camera is always outside the scene.")]
	public bool SimpleCulling;

	[Token(Token = "0x40002F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[SECTR_ToolTip("Distance to draw clipped frustums.", 0f, 100f)]
	public float GizmoDistance;

	[Token(Token = "0x40002F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[SECTR_ToolTip("Material to use to render the debug frustum mesh.")]
	public Material GizmoMaterial;

	[Token(Token = "0x40002F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[SECTR_ToolTip("Makes the Editor camera display the Game view's culling while playing in editor.")]
	public bool CullInEditor;

	[Token(Token = "0x40002F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x121")]
	[SECTR_ToolTip("Set to false to disable shadow culling post pass.", true)]
	public bool CullShadows;

	[Token(Token = "0x40002FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	[SECTR_ToolTip("Use another camera for culling properties.", true)]
	public Camera cullingProxy;

	[Token(Token = "0x40002FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[SECTR_ToolTip("Number of worker threads for culling. Do not set this too high or you may see hitching.", 0f, -1f)]
	public int NumWorkerThreads;

	[Token(Token = "0x40002FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	[SECTR_ToolTip("Enables a workaround when using the Lightweight Rendering Pipeline. Keep disabled if not using LWRP.", 0f, -1f)]
	public bool LWRP_Fix;

	[Token(Token = "0x17000091")]
	public static List<SECTR_CullingCamera> All
	{
		[Token(Token = "0x60002FD")]
		[Address(RVA = "0xC9254C", Offset = "0xC9254C", VA = "0xC9254C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000092")]
	public int RenderersCulled
	{
		[Token(Token = "0x60002FE")]
		[Address(RVA = "0xC925A4", Offset = "0xC925A4", VA = "0xC925A4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000093")]
	public int LightsCulled
	{
		[Token(Token = "0x60002FF")]
		[Address(RVA = "0xC925AC", Offset = "0xC925AC", VA = "0xC925AC")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000094")]
	public int TerrainsCulled
	{
		[Token(Token = "0x6000300")]
		[Address(RVA = "0xC925B4", Offset = "0xC925B4", VA = "0xC925B4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000301")]
	[Address(RVA = "0xC925BC", Offset = "0xC925BC", VA = "0xC925BC")]
	public void ResetStats()
	{
	}

	[Token(Token = "0x6000302")]
	[Address(RVA = "0xC925CC", Offset = "0xC925CC", VA = "0xC925CC")]
	private void RenderPipeline_beginFrameRendering(Camera[] obj)
	{
	}

	[Token(Token = "0x6000303")]
	[Address(RVA = "0xC95268", Offset = "0xC95268", VA = "0xC95268")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000304")]
	[Address(RVA = "0xC954D8", Offset = "0xC954D8", VA = "0xC954D8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000305")]
	[Address(RVA = "0xC95858", Offset = "0xC95858", VA = "0xC95858")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000306")]
	[Address(RVA = "0xC925D0", Offset = "0xC925D0", VA = "0xC925D0")]
	private void OnPreCull()
	{
	}

	[Token(Token = "0x6000307")]
	[Address(RVA = "0xC98974", Offset = "0xC98974", VA = "0xC98974")]
	private void OnPostRender()
	{
	}

	[Token(Token = "0x6000308")]
	[Address(RVA = "0xC98984", Offset = "0xC98984", VA = "0xC98984")]
	private void _CullingWorker()
	{
	}

	[Token(Token = "0x6000309")]
	[Address(RVA = "0xC9737C", Offset = "0xC9737C", VA = "0xC9737C")]
	private void _FrustumCullSectorThread(ThreadCullData cullData)
	{
	}

	[Token(Token = "0x600030A")]
	[Address(RVA = "0xC98374", Offset = "0xC98374", VA = "0xC98374")]
	private void _ShadowCullSectorThread(ThreadCullData cullData)
	{
	}

	[Token(Token = "0x600030B")]
	[Address(RVA = "0xC970A4", Offset = "0xC970A4", VA = "0xC970A4")]
	private static void _FrustumCullSector(SECTR_Sector sector, Vector3 cameraPos, List<Plane> cullingPlanes, List<List<Plane>> occluderFrustums, int baseMask, float shadowDistance, bool forceGroupCull, ref Dictionary<int, SECTR_Member.Child> visibleRenderers, ref Dictionary<int, SECTR_Member.Child> visibleLights, ref Dictionary<int, SECTR_Member.Child> visibleTerrains, ref Dictionary<SECTR_Member.Child, int> shadowLights)
	{
	}

	[Token(Token = "0x600030C")]
	[Address(RVA = "0xC98B74", Offset = "0xC98B74", VA = "0xC98B74")]
	private static void _FrustumCull(SECTR_Member member, Vector3 cameraPos, List<Plane> frustumPlanes, List<List<Plane>> occluders, int baseMask, float shadowDistance, bool forceGroupCull, ref Dictionary<int, SECTR_Member.Child> visibleRenderers, ref Dictionary<int, SECTR_Member.Child> visibleLights, ref Dictionary<int, SECTR_Member.Child> visibleTerrains, ref Dictionary<SECTR_Member.Child, int> shadowLights)
	{
	}

	[Token(Token = "0x600030D")]
	[Address(RVA = "0xC98244", Offset = "0xC98244", VA = "0xC98244")]
	private static void _ShadowCullSector(SECTR_Sector sector, List<SECTR_Member.Child> sectorShadowLights, ref Dictionary<int, SECTR_Member.Child> visibleRenderers, ref Dictionary<int, SECTR_Member.Child> visibleTerrains)
	{
	}

	[Token(Token = "0x600030E")]
	[Address(RVA = "0xC992CC", Offset = "0xC992CC", VA = "0xC992CC")]
	private static void _ShadowCull(SECTR_Member member, List<SECTR_Member.Child> shadowLights, ref Dictionary<int, SECTR_Member.Child> visibleRenderers, ref Dictionary<int, SECTR_Member.Child> visibleTerrains)
	{
	}

	[Token(Token = "0x600030F")]
	[Address(RVA = "0xC991B8", Offset = "0xC991B8", VA = "0xC991B8")]
	private static bool _IsVisible(Bounds childBounds, List<Plane> frustumPlanes, int parentMask, List<List<Plane>> occluders)
	{
		return default(bool);
	}

	[Token(Token = "0x6000310")]
	[Address(RVA = "0xC95ABC", Offset = "0xC95ABC", VA = "0xC95ABC")]
	private void _HideAllMembers()
	{
	}

	[Token(Token = "0x6000311")]
	[Address(RVA = "0xC96000", Offset = "0xC96000", VA = "0xC96000")]
	private void _ApplyCulling(bool visible)
	{
	}

	[Token(Token = "0x6000312")]
	[Address(RVA = "0xC955D8", Offset = "0xC955D8", VA = "0xC955D8")]
	private void _UndoCulling()
	{
	}

	[Token(Token = "0x6000313")]
	[Address(RVA = "0xC96898", Offset = "0xC96898", VA = "0xC96898")]
	private void _BuildFrustumFromHull(Camera cullingCamera, bool forwardTraversal, List<ClipVertex> portalVertices, ref List<Plane> newFrustum)
	{
	}

	[Token(Token = "0x6000314")]
	[Address(RVA = "0xC99820", Offset = "0xC99820", VA = "0xC99820")]
	public SECTR_CullingCamera()
	{
	}
}
[Token(Token = "0x2000087")]
[ExecuteInEditMode]
[AddComponentMenu("Procedural Worlds/SECTR/Vis/SECTR LOD")]
[RequireComponent(typeof(SECTR_Member))]
public class SECTR_LOD : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000088")]
	public class LODEntry
	{
		[Token(Token = "0x400031B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject gameObject;

		[Token(Token = "0x400031C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Renderer lightmapSource;

		[Token(Token = "0x6000324")]
		[Address(RVA = "0xC9B068", Offset = "0xC9B068", VA = "0xC9B068")]
		public LODEntry()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000089")]
	public class LODSet
	{
		[Token(Token = "0x400031D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private List<LODEntry> lodEntries;

		[Token(Token = "0x400031E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float threshold;

		[Token(Token = "0x17000096")]
		public List<LODEntry> LODEntries
		{
			[Token(Token = "0x6000325")]
			[Address(RVA = "0xC9B070", Offset = "0xC9B070", VA = "0xC9B070")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000097")]
		public float Threshold
		{
			[Token(Token = "0x6000326")]
			[Address(RVA = "0xC9B078", Offset = "0xC9B078", VA = "0xC9B078")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000327")]
			[Address(RVA = "0xC9B080", Offset = "0xC9B080", VA = "0xC9B080")]
			set
			{
			}
		}

		[Token(Token = "0x6000328")]
		[Address(RVA = "0xC9B088", Offset = "0xC9B088", VA = "0xC9B088")]
		public LODEntry Add(GameObject gameObject, Renderer lightmapSource)
		{
			return null;
		}

		[Token(Token = "0x6000329")]
		[Address(RVA = "0xC9B274", Offset = "0xC9B274", VA = "0xC9B274")]
		public void Remove(GameObject gameObject)
		{
		}

		[Token(Token = "0x600032A")]
		[Address(RVA = "0xC9B184", Offset = "0xC9B184", VA = "0xC9B184")]
		public LODEntry GetEntry(GameObject gameObject)
		{
			return null;
		}

		[Token(Token = "0x600032B")]
		[Address(RVA = "0xC9B380", Offset = "0xC9B380", VA = "0xC9B380")]
		public LODSet()
		{
		}
	}

	[Token(Token = "0x200008A")]
	[Flags]
	public enum SiblinglFlags
	{
		[Token(Token = "0x4000320")]
		Behaviors = 1,
		[Token(Token = "0x4000321")]
		Renderers = 2,
		[Token(Token = "0x4000322")]
		Lights = 4,
		[Token(Token = "0x4000323")]
		Colliders = 8,
		[Token(Token = "0x4000324")]
		RigidBodies = 0x10
	}

	[Token(Token = "0x4000310")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	[SerializeField]
	private Vector3 boundsOffset;

	[Token(Token = "0x4000311")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	[HideInInspector]
	private float boundsRadius;

	[Token(Token = "0x4000312")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[HideInInspector]
	private bool boundsUpdated;

	[Token(Token = "0x4000313")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int activeLOD;

	[Token(Token = "0x4000314")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool siblingsDisabled;

	[Token(Token = "0x4000315")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private SECTR_Member cachedMember;

	[Token(Token = "0x4000316")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<GameObject> toHide;

	[Token(Token = "0x4000317")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<LODEntry> toShow;

	[Token(Token = "0x4000318")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<SECTR_LOD> allLODs;

	[Token(Token = "0x4000319")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public List<LODSet> LODs;

	[Token(Token = "0x400031A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SECTR_ToolTip("Determines which sibling components are disabled when the LOD is culled.", null, typeof(SiblinglFlags))]
	public SiblinglFlags CullSiblings;

	[Token(Token = "0x17000095")]
	public static List<SECTR_LOD> All
	{
		[Token(Token = "0x600031B")]
		[Address(RVA = "0xC99EFC", Offset = "0xC99EFC", VA = "0xC99EFC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600031C")]
	[Address(RVA = "0xC9585C", Offset = "0xC9585C", VA = "0xC9585C")]
	public void SelectLOD(Camera renderCamera)
	{
	}

	[Token(Token = "0x600031D")]
	[Address(RVA = "0xC9AB00", Offset = "0xC9AB00", VA = "0xC9AB00")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600031E")]
	[Address(RVA = "0xC9AD54", Offset = "0xC9AD54", VA = "0xC9AD54")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600031F")]
	[Address(RVA = "0xC9ADDC", Offset = "0xC9ADDC", VA = "0xC9ADDC")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000320")]
	[Address(RVA = "0xC9A2F0", Offset = "0xC9A2F0", VA = "0xC9A2F0")]
	private void _ActivateLOD(int lodIndex)
	{
	}

	[Token(Token = "0x6000321")]
	[Address(RVA = "0xC99F54", Offset = "0xC99F54", VA = "0xC99F54")]
	private void _CalculateBounds()
	{
	}

	[Token(Token = "0x6000322")]
	[Address(RVA = "0xC9AECC", Offset = "0xC9AECC", VA = "0xC9AECC")]
	public SECTR_LOD()
	{
	}
}
[Token(Token = "0x200008B")]
[RequireComponent(typeof(SECTR_Member))]
[AddComponentMenu("Procedural Worlds/SECTR/Vis/SECTR Occluder")]
public class SECTR_Occluder : SECTR_Hull
{
	[Token(Token = "0x200008C")]
	public enum OrientationAxis
	{
		[Token(Token = "0x400032B")]
		None,
		[Token(Token = "0x400032C")]
		XYZ,
		[Token(Token = "0x400032D")]
		XZ,
		[Token(Token = "0x400032E")]
		XY,
		[Token(Token = "0x400032F")]
		YZ
	}

	[Token(Token = "0x4000325")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private SECTR_Member cachedMember;

	[Token(Token = "0x4000326")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<SECTR_Sector> currentSectors;

	[Token(Token = "0x4000327")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<SECTR_Occluder> allOccluders;

	[Token(Token = "0x4000328")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Dictionary<SECTR_Sector, List<SECTR_Occluder>> occluderTable;

	[Token(Token = "0x4000329")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SECTR_ToolTip("The axes that should orient towards the camera during culling (if any).")]
	public OrientationAxis AutoOrient;

	[Token(Token = "0x17000098")]
	public static List<SECTR_Occluder> All
	{
		[Token(Token = "0x600032C")]
		[Address(RVA = "0xC9B400", Offset = "0xC9B400", VA = "0xC9B400")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000099")]
	public SECTR_Member Member
	{
		[Token(Token = "0x600032E")]
		[Address(RVA = "0xC9B458", Offset = "0xC9B458", VA = "0xC9B458")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700009A")]
	public Vector3 MeshNormal
	{
		[Token(Token = "0x600032F")]
		[Address(RVA = "0xC96868", Offset = "0xC96868", VA = "0xC96868")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x600032D")]
	[Address(RVA = "0xC96668", Offset = "0xC96668", VA = "0xC96668")]
	public static List<SECTR_Occluder> GetOccludersInSector(SECTR_Sector sector)
	{
		return null;
	}

	[Token(Token = "0x6000330")]
	[Address(RVA = "0xC96700", Offset = "0xC96700", VA = "0xC96700")]
	public Matrix4x4 GetCullingMatrix(Vector3 cameraPos)
	{
		return default(Matrix4x4);
	}

	[Token(Token = "0x6000331")]
	[Address(RVA = "0xC9B460", Offset = "0xC9B460", VA = "0xC9B460")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000332")]
	[Address(RVA = "0xC9B5C0", Offset = "0xC9B5C0", VA = "0xC9B5C0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000333")]
	[Address(RVA = "0xC9B6A8", Offset = "0xC9B6A8", VA = "0xC9B6A8")]
	private void _MembershipChanged(List<SECTR_Sector> left, List<SECTR_Sector> joined)
	{
	}

	[Token(Token = "0x6000334")]
	[Address(RVA = "0xC9BABC", Offset = "0xC9BABC", VA = "0xC9BABC")]
	public SECTR_Occluder()
	{
	}
}
[Token(Token = "0x200008D")]
[DisallowMultipleComponent]
public class QuickOutline : MonoBehaviour
{
	[Token(Token = "0x200008E")]
	public enum Mode
	{
		[Token(Token = "0x400033C")]
		OutlineAll,
		[Token(Token = "0x400033D")]
		OutlineVisible,
		[Token(Token = "0x400033E")]
		OutlineHidden,
		[Token(Token = "0x400033F")]
		OutlineAndSilhouette,
		[Token(Token = "0x4000340")]
		SilhouetteOnly
	}

	[Serializable]
	[Token(Token = "0x200008F")]
	private class ListVector3
	{
		[Token(Token = "0x4000341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<Vector3> data;

		[Token(Token = "0x6000349")]
		[Address(RVA = "0xC9D514", Offset = "0xC9D514", VA = "0xC9D514")]
		public ListVector3()
		{
		}
	}

	[Token(Token = "0x4000330")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static HashSet<Mesh> registeredMeshes;

	[Token(Token = "0x4000331")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Mode outlineMode;

	[Token(Token = "0x4000332")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private Color outlineColor;

	[Token(Token = "0x4000333")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	[Range(0f, 10f)]
	private float outlineWidth;

	[Token(Token = "0x4000334")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("Precompute enabled: Per-vertex calculations are performed in the editor and serialized with the object. Precompute disabled: Per-vertex calculations are performed at runtime in Awake(). This may cause a pause for large meshes.")]
	[SerializeField]
	[Header("Optional")]
	private bool precomputeOutline;

	[Token(Token = "0x4000335")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[HideInInspector]
	private List<Mesh> bakeKeys;

	[Token(Token = "0x4000336")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	[SerializeField]
	private List<ListVector3> bakeValues;

	[Token(Token = "0x4000337")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Renderer[] renderers;

	[Token(Token = "0x4000338")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Material outlineMaskMaterial;

	[Token(Token = "0x4000339")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Material outlineFillMaterial;

	[Token(Token = "0x400033A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool needsUpdate;

	[Token(Token = "0x1700009B")]
	public Mode OutlineMode
	{
		[Token(Token = "0x6000336")]
		[Address(RVA = "0xC9BC1C", Offset = "0xC9BC1C", VA = "0xC9BC1C")]
		get
		{
			return default(Mode);
		}
		[Token(Token = "0x6000337")]
		[Address(RVA = "0xC9BC24", Offset = "0xC9BC24", VA = "0xC9BC24")]
		set
		{
		}
	}

	[Token(Token = "0x1700009C")]
	public Color OutlineColor
	{
		[Token(Token = "0x6000338")]
		[Address(RVA = "0xC9BC34", Offset = "0xC9BC34", VA = "0xC9BC34")]
		get
		{
			return default(Color);
		}
		[Token(Token = "0x6000339")]
		[Address(RVA = "0xC9BC40", Offset = "0xC9BC40", VA = "0xC9BC40")]
		set
		{
		}
	}

	[Token(Token = "0x1700009D")]
	public float OutlineWidth
	{
		[Token(Token = "0x600033A")]
		[Address(RVA = "0xC9BC54", Offset = "0xC9BC54", VA = "0xC9BC54")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600033B")]
		[Address(RVA = "0xC9BC5C", Offset = "0xC9BC5C", VA = "0xC9BC5C")]
		set
		{
		}
	}

	[Token(Token = "0x600033C")]
	[Address(RVA = "0xC9BC6C", Offset = "0xC9BC6C", VA = "0xC9BC6C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600033D")]
	[Address(RVA = "0xC9C154", Offset = "0xC9C154", VA = "0xC9C154")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600033E")]
	[Address(RVA = "0xC9C2FC", Offset = "0xC9C2FC", VA = "0xC9C2FC")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x600033F")]
	[Address(RVA = "0xC9C674", Offset = "0xC9C674", VA = "0xC9C674")]
	private void Update()
	{
	}

	[Token(Token = "0x6000340")]
	[Address(RVA = "0xC9C834", Offset = "0xC9C834", VA = "0xC9C834")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000341")]
	[Address(RVA = "0xC9C94C", Offset = "0xC9C94C", VA = "0xC9C94C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000342")]
	[Address(RVA = "0xC9C414", Offset = "0xC9C414", VA = "0xC9C414")]
	private void Bake()
	{
	}

	[Token(Token = "0x6000343")]
	[Address(RVA = "0xC9BDE4", Offset = "0xC9BDE4", VA = "0xC9BDE4")]
	private void LoadSmoothNormals()
	{
	}

	[Token(Token = "0x6000344")]
	[Address(RVA = "0xC9C9B4", Offset = "0xC9C9B4", VA = "0xC9C9B4")]
	private List<Vector3> SmoothNormals(Mesh mesh)
	{
		return null;
	}

	[Token(Token = "0x6000345")]
	[Address(RVA = "0xC9D51C", Offset = "0xC9D51C", VA = "0xC9D51C")]
	private void CombineSubmeshes(Mesh mesh, Material[] materials)
	{
	}

	[Token(Token = "0x6000346")]
	[Address(RVA = "0xC9C688", Offset = "0xC9C688", VA = "0xC9C688")]
	private void UpdateMaterialProperties()
	{
	}

	[Token(Token = "0x6000347")]
	[Address(RVA = "0xC9D5C4", Offset = "0xC9D5C4", VA = "0xC9D5C4")]
	public QuickOutline()
	{
	}
}
[Token(Token = "0x2000091")]
public static class ResonanceAudio
{
	[StructLayout(0)]
	[Token(Token = "0x2000092")]
	private class RoomProperties
	{
		[Token(Token = "0x400035B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float positionX;

		[Token(Token = "0x400035C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float positionY;

		[Token(Token = "0x400035D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float positionZ;

		[Token(Token = "0x400035E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float rotationX;

		[Token(Token = "0x400035F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float rotationY;

		[Token(Token = "0x4000360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float rotationZ;

		[Token(Token = "0x4000361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float rotationW;

		[Token(Token = "0x4000362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float dimensionsX;

		[Token(Token = "0x4000363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float dimensionsY;

		[Token(Token = "0x4000364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float dimensionsZ;

		[Token(Token = "0x4000365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ResonanceAudioRoomManager.SurfaceMaterial materialLeft;

		[Token(Token = "0x4000366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public ResonanceAudioRoomManager.SurfaceMaterial materialRight;

		[Token(Token = "0x4000367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ResonanceAudioRoomManager.SurfaceMaterial materialBottom;

		[Token(Token = "0x4000368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public ResonanceAudioRoomManager.SurfaceMaterial materialTop;

		[Token(Token = "0x4000369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ResonanceAudioRoomManager.SurfaceMaterial materialFront;

		[Token(Token = "0x400036A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public ResonanceAudioRoomManager.SurfaceMaterial materialBack;

		[Token(Token = "0x400036B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float reflectionScalar;

		[Token(Token = "0x400036C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float reverbGain;

		[Token(Token = "0x400036D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float reverbTime;

		[Token(Token = "0x400036E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float reverbBrightness;

		[Token(Token = "0x6000365")]
		[Address(RVA = "0xC9ECE8", Offset = "0xC9ECE8", VA = "0xC9ECE8")]
		public RoomProperties()
		{
		}
	}

	[Token(Token = "0x4000345")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Transform listenerTransform;

	[Token(Token = "0x4000346")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static readonly Color listenerDirectivityColor;

	[Token(Token = "0x4000347")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static readonly Color sourceDirectivityColor;

	[Token(Token = "0x4000348")]
	public const float distanceEpsilon = 0.01f;

	[Token(Token = "0x4000349")]
	public const float maxDistanceLimit = 1000000f;

	[Token(Token = "0x400034A")]
	public const float minDistanceLimit = 990099f;

	[Token(Token = "0x400034B")]
	public const float maxGainDb = 24f;

	[Token(Token = "0x400034C")]
	public const float minGainDb = -24f;

	[Token(Token = "0x400034D")]
	public const float maxReverbBrightness = 1f;

	[Token(Token = "0x400034E")]
	public const float minReverbBrightness = -1f;

	[Token(Token = "0x400034F")]
	public const float maxReverbTime = 10f;

	[Token(Token = "0x4000350")]
	public const float maxReflectivity = 2f;

	[Token(Token = "0x4000351")]
	public const int maxNumOcclusionHits = 12;

	[Token(Token = "0x4000352")]
	public const float occlusionDetectionInterval = 0.2f;

	[Token(Token = "0x4000353")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static readonly Matrix4x4 flipZ;

	[Token(Token = "0x4000354")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private static RaycastHit[] occlusionHits;

	[Token(Token = "0x4000355")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private static int occlusionMaskValue;

	[Token(Token = "0x4000356")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private static float[] roomPosition;

	[Token(Token = "0x4000357")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private static RoomProperties roomProperties;

	[Token(Token = "0x4000358")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private static IntPtr roomPropertiesPtr;

	[Token(Token = "0x4000359")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private static Matrix4x4 transformMatrix;

	[Token(Token = "0x400035A")]
	private const string pluginName = "audiopluginresonanceaudio";

	[Token(Token = "0x1700009E")]
	public static Transform ListenerTransform
	{
		[Token(Token = "0x600034E")]
		[Address(RVA = "0xC9D86C", Offset = "0xC9D86C", VA = "0xC9D86C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600034F")]
	[Address(RVA = "0xC9D994", Offset = "0xC9D994", VA = "0xC9D994")]
	public static void UpdateAudioListener(ResonanceAudioListener listener)
	{
	}

	[Token(Token = "0x6000350")]
	[Address(RVA = "0xC9DB34", Offset = "0xC9DB34", VA = "0xC9DB34")]
	public static void DisableRoomEffects()
	{
	}

	[Token(Token = "0x6000351")]
	[Address(RVA = "0xC9DCC4", Offset = "0xC9DCC4", VA = "0xC9DCC4")]
	public static void UpdateRoom(ResonanceAudioRoom room)
	{
	}

	[Token(Token = "0x6000352")]
	[Address(RVA = "0xC9DFDC", Offset = "0xC9DFDC", VA = "0xC9DFDC")]
	public static void UpdateReverbProbe(ResonanceAudioReverbProbe reverbPobe)
	{
	}

	[Token(Token = "0x6000353")]
	[Address(RVA = "0xC9E294", Offset = "0xC9E294", VA = "0xC9E294")]
	public static bool StartRecording()
	{
		return default(bool);
	}

	[Token(Token = "0x6000354")]
	[Address(RVA = "0xC9E29C", Offset = "0xC9E29C", VA = "0xC9E29C")]
	public static bool StopRecordingAndSaveToFile(string filePath, bool seamless)
	{
		return default(bool);
	}

	[Token(Token = "0x6000355")]
	[Address(RVA = "0xC9E2A4", Offset = "0xC9E2A4", VA = "0xC9E2A4")]
	public static void InitializeReverbComputer(float[] vertices, int[] triangles, int[] materialIndices, float scatteringCoefficient)
	{
	}

	[Token(Token = "0x6000356")]
	[Address(RVA = "0xC9E2A8", Offset = "0xC9E2A8", VA = "0xC9E2A8")]
	public static bool ComputeRt60sAndProxyRoom(ResonanceAudioReverbProbe reverbProbe, int totalNumPaths, int numPathsPerBatch, int maxDepth, float energyThreshold, float listenerSphereRadius)
	{
		return default(bool);
	}

	[Token(Token = "0x6000357")]
	[Address(RVA = "0xC9E2B0", Offset = "0xC9E2B0", VA = "0xC9E2B0")]
	public static float ComputeOcclusion(Transform sourceTransform)
	{
		return default(float);
	}

	[Token(Token = "0x6000358")]
	[Address(RVA = "0xC9DA2C", Offset = "0xC9DA2C", VA = "0xC9DA2C")]
	public static float ConvertAmplitudeFromDb(float db)
	{
		return default(float);
	}

	[Token(Token = "0x6000359")]
	[Address(RVA = "0xC9E57C", Offset = "0xC9E57C", VA = "0xC9E57C")]
	public static Vector2[] Generate2dPolarPattern(float alpha, float order, int resolution)
	{
		return null;
	}

	[Token(Token = "0x600035A")]
	[Address(RVA = "0xC9E694", Offset = "0xC9E694", VA = "0xC9E694")]
	private static void ConvertAudioTransformFromUnity(ref Vector3 position, ref Quaternion rotation)
	{
	}

	[Token(Token = "0x600035B")]
	[Address(RVA = "0xC9E8F4", Offset = "0xC9E8F4", VA = "0xC9E8F4")]
	private static void SetProxyRoomProperties(ResonanceAudioReverbProbe reverbProbe, RoomProperties proxyRoomProperties)
	{
	}

	[Token(Token = "0x600035C")]
	[Address(RVA = "0xC9DEA4", Offset = "0xC9DEA4", VA = "0xC9DEA4")]
	private static void UpdateRoomProperties(ResonanceAudioRoom room)
	{
	}

	[Token(Token = "0x600035D")]
	[Address(RVA = "0xC9E1BC", Offset = "0xC9E1BC", VA = "0xC9E1BC")]
	private static void UpdateRoomProperties(ResonanceAudioReverbProbe reverbProbe)
	{
	}

	[Token(Token = "0x600035E")]
	[Address(RVA = "0xC9E938", Offset = "0xC9E938", VA = "0xC9E938")]
	private static void FillGeometryOfRoomProperties(Vector3 position, Quaternion rotation, Vector3 scale)
	{
	}

	[Token(Token = "0x600035F")]
	[Address(RVA = "0xC9E9EC", Offset = "0xC9E9EC", VA = "0xC9E9EC")]
	private static void FillWallMaterialsOfRoomProperties(ResonanceAudioRoomManager.SurfaceMaterial leftWall, ResonanceAudioRoomManager.SurfaceMaterial rightWall, ResonanceAudioRoomManager.SurfaceMaterial floor, ResonanceAudioRoomManager.SurfaceMaterial ceiling, ResonanceAudioRoomManager.SurfaceMaterial frontWall, ResonanceAudioRoomManager.SurfaceMaterial backWall)
	{
	}

	[Token(Token = "0x6000360")]
	[Address(RVA = "0xC9EA88", Offset = "0xC9EA88", VA = "0xC9EA88")]
	private static void FillModifiersOfRoomProperties(float reverbGainDb, float reverbTime, float reverbBrightness, float reflectivity)
	{
	}

	[PreserveSig]
	[Token(Token = "0x6000361")]
	[Address(RVA = "0xC9DA40", Offset = "0xC9DA40", VA = "0xC9DA40")]
	private static extern void SetListenerGain(float gain);

	[PreserveSig]
	[Token(Token = "0x6000362")]
	[Address(RVA = "0xC9DAB8", Offset = "0xC9DAB8", VA = "0xC9DAB8")]
	private static extern void SetListenerStereoSpeakerMode(bool enableStereoSpeakerMode);

	[PreserveSig]
	[Token(Token = "0x6000363")]
	[Address(RVA = "0xC9DC38", Offset = "0xC9DC38", VA = "0xC9DC38")]
	private static extern void SetRoomProperties(IntPtr roomProperties, float[] rt60s);
}
[Token(Token = "0x2000093")]
public class ResonanceAudioAcousticMesh
{
	[Token(Token = "0x4000371")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool isIncludedByObjectFiltering;

	[Token(Token = "0x4000372")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ResonanceAudioRoomManager.SurfaceMaterial[] surfaceMaterialsFromSubMesh;

	[Token(Token = "0x4000373")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private RangeInt[] triangleRangesFromSubMesh;

	[Token(Token = "0x4000374")]
	private const int unityMaxNumVerticesPerMesh = 65000;

	[Token(Token = "0x4000375")]
	private const int maxNumSubMeshes = 256;

	[Token(Token = "0x4000376")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Material visualizationMaterial;

	[Token(Token = "0x1700009F")]
	public Mesh mesh
	{
		[Token(Token = "0x6000366")]
		[Address(RVA = "0xC9ECF0", Offset = "0xC9ECF0", VA = "0xC9ECF0")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000367")]
		[Address(RVA = "0xC9ECF8", Offset = "0xC9ECF8", VA = "0xC9ECF8")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000A0")]
	public GameObject sourceObject
	{
		[Token(Token = "0x6000368")]
		[Address(RVA = "0xC9ED00", Offset = "0xC9ED00", VA = "0xC9ED00")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000369")]
		[Address(RVA = "0xC9ED08", Offset = "0xC9ED08", VA = "0xC9ED08")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x600036A")]
	[Address(RVA = "0xC9ED10", Offset = "0xC9ED10", VA = "0xC9ED10")]
	public static ResonanceAudioAcousticMesh GenerateFromMeshFilter(MeshFilter meshFilter, Shader surfaceMaterialShader)
	{
		return null;
	}

	[Token(Token = "0x600036B")]
	[Address(RVA = "0xC9F5B0", Offset = "0xC9F5B0", VA = "0xC9F5B0")]
	public static ResonanceAudioAcousticMesh GenerateFromTerrain(Terrain terrain, Shader surfaceMaterialShader)
	{
		return null;
	}

	[Token(Token = "0x600036C")]
	[Address(RVA = "0xC9FB9C", Offset = "0xC9FB9C", VA = "0xC9FB9C")]
	public int[] GetSurfaceMaterialIndicesFromTriangle()
	{
		return null;
	}

	[Token(Token = "0x600036D")]
	[Address(RVA = "0xC9FCDC", Offset = "0xC9FCDC", VA = "0xC9FCDC")]
	public void SetSurfaceMaterialToAllSubMeshes(ResonanceAudioRoomManager.SurfaceMaterial surfaceMaterial)
	{
	}

	[Token(Token = "0x600036E")]
	[Address(RVA = "0xC9FE3C", Offset = "0xC9FE3C", VA = "0xC9FE3C")]
	public void SetSurfaceMaterialToSubMesh(ResonanceAudioRoomManager.SurfaceMaterial surfaceMaterial, int subMeshIndex)
	{
	}

	[Token(Token = "0x600036F")]
	[Address(RVA = "0xCA007C", Offset = "0xCA007C", VA = "0xCA007C")]
	public bool Render()
	{
		return default(bool);
	}

	[Token(Token = "0x6000370")]
	[Address(RVA = "0xCA019C", Offset = "0xCA019C", VA = "0xCA019C")]
	public bool IsIncluded()
	{
		return default(bool);
	}

	[Token(Token = "0x6000371")]
	[Address(RVA = "0xCA0254", Offset = "0xCA0254", VA = "0xCA0254")]
	public bool IsSubMeshTriangular(int subMeshIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x6000372")]
	[Address(RVA = "0xC9EF40", Offset = "0xC9EF40", VA = "0xC9EF40")]
	private static int CountTriangleIndices(Mesh sourceMesh)
	{
		return default(int);
	}

	[Token(Token = "0x6000373")]
	[Address(RVA = "0xC9F80C", Offset = "0xC9F80C", VA = "0xC9F80C")]
	private static void SubSampleHeightMap(int originalM, int originalN, out int m, out int n, out int subSampleStep, out int subSampledNumTriangleIndices)
	{
	}

	[Token(Token = "0x6000374")]
	[Address(RVA = "0xC9EFCC", Offset = "0xC9EFCC", VA = "0xC9EFCC")]
	private void InitializeMesh(int numTriangleIndices, int numVertices, out int[] triangles, out Vector3[] vertices)
	{
	}

	[Token(Token = "0x6000375")]
	[Address(RVA = "0xC9F454", Offset = "0xC9F454", VA = "0xC9F454")]
	private void InitializeSubMeshMaterials()
	{
	}

	[Token(Token = "0x6000376")]
	[Address(RVA = "0xC9F500", Offset = "0xC9F500", VA = "0xC9F500")]
	private void InitializeVisualizationMaterial(Shader surfaceMaterialShader)
	{
	}

	[Token(Token = "0x6000377")]
	[Address(RVA = "0xC9F100", Offset = "0xC9F100", VA = "0xC9F100")]
	private void FillVerticesAndTrianglesFromMesh(Mesh sourceMesh, Transform sourceObjectTransform, ref Vector3[] vertices, ref int[] triangles)
	{
	}

	[Token(Token = "0x6000378")]
	[Address(RVA = "0xC9F8B8", Offset = "0xC9F8B8", VA = "0xC9F8B8")]
	private void FillTrianglesAndVerticesFromHeightMap(Vector3 terrainPosition, Vector3 terrainSize, float[,] heightMap, int m, int n, int subSampleStep, ref int[] triangles, ref Vector3[] vertices)
	{
	}

	[Token(Token = "0x6000379")]
	[Address(RVA = "0xCA028C", Offset = "0xCA028C", VA = "0xCA028C")]
	private void SetSubMeshEnds()
	{
	}

	[Token(Token = "0x600037A")]
	[Address(RVA = "0xC9FD2C", Offset = "0xC9FD2C", VA = "0xC9FD2C")]
	private void SetSubMeshSurfaceMaterials()
	{
	}

	[Token(Token = "0x600037B")]
	[Address(RVA = "0xC9EFC4", Offset = "0xC9EFC4", VA = "0xC9EFC4")]
	public ResonanceAudioAcousticMesh()
	{
	}
}
[Token(Token = "0x2000094")]
[ExecuteInEditMode]
[RequireComponent(typeof(AudioListener))]
[AddComponentMenu("ResonanceAudio/ResonanceAudioListener")]
public class ResonanceAudioListener : MonoBehaviour
{
	[Token(Token = "0x4000377")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Sets the global gain for all spatialized audio sources. Can be used to adjust the overall output volume.")]
	public float globalGainDb;

	[Token(Token = "0x4000378")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Tooltip("Sets the global layer mask for occlusion detection.")]
	public LayerMask occlusionMask;

	[Token(Token = "0x4000379")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("Disables HRTF-based rendering and force stereo-panning only rendering for all spatialized audio sources. This mode is recommended only when the audio output is routed to a stereo loudspeaker configuration.")]
	public bool stereoSpeakerModeEnabled;

	[Token(Token = "0x400037A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	[Tooltip("Sets whether the recorded soundfield clip should be saved as a seamless loop.")]
	public bool recorderSeamless;

	[Token(Token = "0x400037B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("Specify by tag which spatialized audio sources will be recorded. Choose \"Untagged\" to include all enabled spatialized audio sources in the scene.")]
	public string recorderSourceTag;

	[Token(Token = "0x400037D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	[SerializeField]
	private bool recorderFoldout;

	[Token(Token = "0x400037E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<AudioSource> recorderTaggedSources;

	[Token(Token = "0x400037F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private double recorderStartTime;

	[Token(Token = "0x170000A1")]
	public bool IsRecording
	{
		[Token(Token = "0x600037C")]
		[Address(RVA = "0xCA05F4", Offset = "0xCA05F4", VA = "0xCA05F4")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600037D")]
		[Address(RVA = "0xCA05FC", Offset = "0xCA05FC", VA = "0xCA05FC")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x600037E")]
	[Address(RVA = "0xCA0608", Offset = "0xCA0608", VA = "0xCA0608")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600037F")]
	[Address(RVA = "0xCA069C", Offset = "0xCA069C", VA = "0xCA069C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000380")]
	[Address(RVA = "0xCA08BC", Offset = "0xCA08BC", VA = "0xCA08BC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000381")]
	[Address(RVA = "0xCA0B38", Offset = "0xCA0B38", VA = "0xCA0B38")]
	public double GetCurrentRecordDuration()
	{
		return default(double);
	}

	[Token(Token = "0x6000382")]
	[Address(RVA = "0xCA0B68", Offset = "0xCA0B68", VA = "0xCA0B68")]
	public void StartSoundfieldRecorder()
	{
	}

	[Token(Token = "0x6000383")]
	[Address(RVA = "0xCA0730", Offset = "0xCA0730", VA = "0xCA0730")]
	public void StopSoundfieldRecorder(string filePath)
	{
	}

	[Token(Token = "0x6000384")]
	[Address(RVA = "0xCA0940", Offset = "0xCA0940", VA = "0xCA0940")]
	private void UpdateTaggedSources()
	{
	}

	[Token(Token = "0x6000385")]
	[Address(RVA = "0xCA0D88", Offset = "0xCA0D88", VA = "0xCA0D88")]
	public ResonanceAudioListener()
	{
	}
}
[Token(Token = "0x2000095")]
[CreateAssetMenu(fileName = "New Material Map", menuName = "ResonanceAudio/Material Map", order = 1000)]
public class ResonanceAudioMaterialMap : ScriptableObject
{
	[Token(Token = "0x4000380")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly Color[] surfaceMaterialColors;

	[Token(Token = "0x4000381")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private ResonanceAudioRoomManager.SurfaceMaterialDictionary surfaceMaterialFromGuid;

	[Token(Token = "0x4000382")]
	private const ResonanceAudioRoomManager.SurfaceMaterial defaultSurfaceMaterial = ResonanceAudioRoomManager.SurfaceMaterial.Transparent;

	[Token(Token = "0x6000386")]
	[Address(RVA = "0xCA0DE8", Offset = "0xCA0DE8", VA = "0xCA0DE8")]
	public List<string> GuidList()
	{
		return null;
	}

	[Token(Token = "0x6000387")]
	[Address(RVA = "0xCA0E54", Offset = "0xCA0E54", VA = "0xCA0E54")]
	public ResonanceAudioRoomManager.SurfaceMaterial GetMaterialFromGuid(string guid)
	{
		return default(ResonanceAudioRoomManager.SurfaceMaterial);
	}

	[Token(Token = "0x6000388")]
	[Address(RVA = "0xCA0EAC", Offset = "0xCA0EAC", VA = "0xCA0EAC")]
	public void AddDefaultMaterialIfGuidUnmapped(string guid)
	{
	}

	[Token(Token = "0x6000389")]
	[Address(RVA = "0xCA0F40", Offset = "0xCA0F40", VA = "0xCA0F40")]
	public ResonanceAudioMaterialMap()
	{
	}
}
[Token(Token = "0x2000096")]
public class ResonanceAudioMaterialMapper : ScriptableObject
{
	[Token(Token = "0x2000097")]
	private class UnityMaterialAcousticMeshData
	{
		[Token(Token = "0x4000388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<ResonanceAudioAcousticMesh> acousticMeshes;

		[Token(Token = "0x4000389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<int> subMeshIndices;

		[Token(Token = "0x6000397")]
		[Address(RVA = "0xCA2168", Offset = "0xCA2168", VA = "0xCA2168")]
		public UnityMaterialAcousticMeshData()
		{
		}
	}

	[Token(Token = "0x2000098")]
	private class TerrainAcousticMeshData
	{
		[Token(Token = "0x400038A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<ResonanceAudioAcousticMesh> acousticMeshes;

		[Token(Token = "0x6000398")]
		[Address(RVA = "0xCA222C", Offset = "0xCA222C", VA = "0xCA222C")]
		public TerrainAcousticMeshData()
		{
		}
	}

	[Token(Token = "0x4000383")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private ResonanceAudioMaterialMap materialMap;

	[Token(Token = "0x4000384")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<string, UnityMaterialAcousticMeshData> unityMaterialAcousticMeshDataFromGuid;

	[Token(Token = "0x4000385")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<string, TerrainAcousticMeshData> terrainAcousticMeshDataFromGuid;

	[Token(Token = "0x4000386")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private LayerMask reverbLayerMask;

	[Token(Token = "0x4000387")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private bool includeNonStaticGameObjects;

	[Token(Token = "0x600038B")]
	[Address(RVA = "0xCA1188", Offset = "0xCA1188", VA = "0xCA1188")]
	public void Initialize()
	{
	}

	[Token(Token = "0x600038C")]
	[Address(RVA = "0xCA1240", Offset = "0xCA1240", VA = "0xCA1240")]
	public void ApplyMaterialMapping(MeshRenderer[] meshRenderers, List<string>[] guidsForMeshRenderers, Terrain[] activeTerrains, string[] guidsForTerrains, Shader surfaceMaterialShader)
	{
	}

	[Token(Token = "0x600038D")]
	[Address(RVA = "0xCA1C34", Offset = "0xCA1C34", VA = "0xCA1C34")]
	public void RenderAcousticMeshes()
	{
	}

	[Token(Token = "0x600038E")]
	[Address(RVA = "0xCA1CCC", Offset = "0xCA1CCC", VA = "0xCA1CCC")]
	public List<ResonanceAudioAcousticMesh> GetIncludedAcousticMeshes()
	{
		return null;
	}

	[Token(Token = "0x600038F")]
	[Address(RVA = "0xCA12A8", Offset = "0xCA12A8", VA = "0xCA12A8")]
	private void BuildUnityMaterialData(MeshRenderer[] meshRenderers, List<string>[] guidsForMeshRenderers, Shader surfaceMaterialShader)
	{
	}

	[Token(Token = "0x6000390")]
	[Address(RVA = "0xCA1658", Offset = "0xCA1658", VA = "0xCA1658")]
	private void BuildTerrainData(Terrain[] activeTerrains, string[] guidsForTerrains, Shader surfaceMaterialShader)
	{
	}

	[Token(Token = "0x6000391")]
	[Address(RVA = "0xCA18B0", Offset = "0xCA18B0", VA = "0xCA18B0")]
	private void ApplyMaterialMappingToGuids(List<string> guids)
	{
	}

	[Token(Token = "0x6000392")]
	[Address(RVA = "0xCA22AC", Offset = "0xCA22AC", VA = "0xCA22AC")]
	private void ApplySurfaceMaterialToGameObjects(ResonanceAudioRoomManager.SurfaceMaterial surfaceMaterial, string guid)
	{
	}

	[Token(Token = "0x6000393")]
	[Address(RVA = "0xCA25C0", Offset = "0xCA25C0", VA = "0xCA25C0")]
	private void ApplySurfaceMaterialToTerrains(ResonanceAudioRoomManager.SurfaceMaterial surfaceMaterial, string guid)
	{
	}

	[Token(Token = "0x6000394")]
	[Address(RVA = "0xCA19EC", Offset = "0xCA19EC", VA = "0xCA19EC")]
	private void ApplyObjectFiltering()
	{
	}

	[Token(Token = "0x6000395")]
	[Address(RVA = "0xCA26B0", Offset = "0xCA26B0", VA = "0xCA26B0")]
	private bool IsIncludedByObjectFiltering(GameObject gameObject)
	{
		return default(bool);
	}

	[Token(Token = "0x6000396")]
	[Address(RVA = "0xCA2728", Offset = "0xCA2728", VA = "0xCA2728")]
	public ResonanceAudioMaterialMapper()
	{
	}
}
[Token(Token = "0x2000099")]
[AddComponentMenu("")]
[ExecuteInEditMode]
public class ResonanceAudioMaterialMapperUpdater : MonoBehaviour
{
	[Token(Token = "0x200009A")]
	public delegate void RefreshMaterialMapperDelegate();

	[Token(Token = "0x400038B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RefreshMaterialMapperDelegate RefreshMaterialMapper;

	[Token(Token = "0x6000399")]
	[Address(RVA = "0xCA2758", Offset = "0xCA2758", VA = "0xCA2758")]
	private void Update()
	{
	}

	[Token(Token = "0x600039A")]
	[Address(RVA = "0xCA279C", Offset = "0xCA279C", VA = "0xCA279C")]
	public ResonanceAudioMaterialMapperUpdater()
	{
	}
}
[Token(Token = "0x200009B")]
[AddComponentMenu("ResonanceAudio/ResonanceAudioReverbProbe")]
[ExecuteInEditMode]
public class ResonanceAudioReverbProbe : MonoBehaviour
{
	[Token(Token = "0x200009C")]
	public enum RegionShape
	{
		[Token(Token = "0x400039E")]
		Sphere,
		[Token(Token = "0x400039F")]
		Box
	}

	[Token(Token = "0x400038C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Time required in seconds for the reverb to decay by 60 dB for each frequency band.")]
	public float[] rt60s;

	[Token(Token = "0x400038D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("Adjusts the reverb gain in the room.")]
	public float reverbGainDb;

	[Token(Token = "0x400038E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("Adjusts the balance between high and low frequencies in the reverb. Increasing this value will increase high frequencies in the reverb, while decreasing the low frequencies respectively.")]
	public float reverbBrightness;

	[Token(Token = "0x400038F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("Adjusts the overall duration of the reverb by a positive scaling factor.")]
	public float reverbTime;

	[Token(Token = "0x4000390")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Tooltip("Shape of the region of application of this reverb.")]
	public RegionShape regionShape;

	[Token(Token = "0x4000391")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("Sets the dimensions of a box-shaped region of application in meters relative to the scale of the game object.")]
	public Vector3 boxRegionSize;

	[Token(Token = "0x4000392")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[Tooltip("Sets the radius of a spherical region of application in meters relative to the scale of the game object.")]
	public float sphereRegionRadius;

	[Token(Token = "0x4000393")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("Applies this reverb only when the center of the probe is visible from the listener. The visibility check will be done using physics raycast with respect to the Occlusion Mask selection in the ResonanceAudioListener component.")]
	public bool onlyApplyWhenVisible;

	[Token(Token = "0x4000394")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public Vector3 proxyRoomPosition;

	[Token(Token = "0x4000395")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Quaternion proxyRoomRotation;

	[Token(Token = "0x4000396")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Vector3 proxyRoomSize;

	[Token(Token = "0x4000397")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public ResonanceAudioRoomManager.SurfaceMaterial proxyRoomLeftWall;

	[Token(Token = "0x4000398")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public ResonanceAudioRoomManager.SurfaceMaterial proxyRoomRightWall;

	[Token(Token = "0x4000399")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public ResonanceAudioRoomManager.SurfaceMaterial proxyRoomFloor;

	[Token(Token = "0x400039A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public ResonanceAudioRoomManager.SurfaceMaterial proxyRoomCeiling;

	[Token(Token = "0x400039B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public ResonanceAudioRoomManager.SurfaceMaterial proxyRoomBackWall;

	[Token(Token = "0x400039C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public ResonanceAudioRoomManager.SurfaceMaterial proxyRoomFrontWall;

	[Token(Token = "0x600039F")]
	[Address(RVA = "0xCA28A0", Offset = "0xCA28A0", VA = "0xCA28A0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60003A0")]
	[Address(RVA = "0xCA28F8", Offset = "0xCA28F8", VA = "0xCA28F8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60003A1")]
	[Address(RVA = "0xCA2950", Offset = "0xCA2950", VA = "0xCA2950")]
	private void Update()
	{
	}

	[Token(Token = "0x60003A2")]
	[Address(RVA = "0xCA29A8", Offset = "0xCA29A8", VA = "0xCA29A8")]
	public float GetScaledSphericalRegionRadius()
	{
		return default(float);
	}

	[Token(Token = "0x60003A3")]
	[Address(RVA = "0xCA29E8", Offset = "0xCA29E8", VA = "0xCA29E8")]
	public Vector3 GetScaledBoxRegionSize()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60003A4")]
	[Address(RVA = "0xCA2A24", Offset = "0xCA2A24", VA = "0xCA2A24")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60003A5")]
	[Address(RVA = "0xCA2B60", Offset = "0xCA2B60", VA = "0xCA2B60")]
	public ResonanceAudioReverbProbe()
	{
	}
}
[Token(Token = "0x200009D")]
[AddComponentMenu("ResonanceAudio/ResonanceAudioRoom")]
public class ResonanceAudioRoom : MonoBehaviour
{
	[Token(Token = "0x40003A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Left wall surface material used to calculate the acoustic properties of the room.")]
	public ResonanceAudioRoomManager.SurfaceMaterial leftWall;

	[Token(Token = "0x40003A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Tooltip("Right wall surface material used to calculate the acoustic properties of the room.")]
	public ResonanceAudioRoomManager.SurfaceMaterial rightWall;

	[Token(Token = "0x40003A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("Floor surface material used to calculate the acoustic properties of the room.")]
	public ResonanceAudioRoomManager.SurfaceMaterial floor;

	[Token(Token = "0x40003A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("Ceiling surface material used to calculate the acoustic properties of the room.")]
	public ResonanceAudioRoomManager.SurfaceMaterial ceiling;

	[Token(Token = "0x40003A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("Back wall surface material used to calculate the acoustic properties of the room.")]
	public ResonanceAudioRoomManager.SurfaceMaterial backWall;

	[Token(Token = "0x40003A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Tooltip("Front wall surface material used to calculate the acoustic properties of the room.")]
	public ResonanceAudioRoomManager.SurfaceMaterial frontWall;

	[Token(Token = "0x40003A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("Adjusts what proportion of the direct sound is reflected back by each surface, after an appropriate delay. Reverberation is unaffected by this setting.")]
	public float reflectivity;

	[Token(Token = "0x40003A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Tooltip("Adjusts the reverb gain in the room.")]
	public float reverbGainDb;

	[Token(Token = "0x40003A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("Adjusts the balance between high and low frequencies in the reverb. Increasing this value will increase high frequencies in the reverb, while decreasing the low frequencies respectively.")]
	public float reverbBrightness;

	[Token(Token = "0x40003A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[Tooltip("Adjusts the overall duration of the reverb by a positive scaling factor.")]
	public float reverbTime;

	[Token(Token = "0x40003AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("Sets the room dimensions in meters relative to the scale of the game object.")]
	public Vector3 size;

	[Token(Token = "0x60003A6")]
	[Address(RVA = "0xCA2CB4", Offset = "0xCA2CB4", VA = "0xCA2CB4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60003A7")]
	[Address(RVA = "0xCA2D0C", Offset = "0xCA2D0C", VA = "0xCA2D0C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60003A8")]
	[Address(RVA = "0xCA2D64", Offset = "0xCA2D64", VA = "0xCA2D64")]
	private void Update()
	{
	}

	[Token(Token = "0x60003A9")]
	[Address(RVA = "0xCA2DBC", Offset = "0xCA2DBC", VA = "0xCA2DBC")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60003AA")]
	[Address(RVA = "0xCA2E88", Offset = "0xCA2E88", VA = "0xCA2E88")]
	public ResonanceAudioRoom()
	{
	}
}
[Token(Token = "0x200009E")]
public static class ResonanceAudioRoomManager
{
	[Token(Token = "0x200009F")]
	public enum SurfaceMaterial
	{
		[Token(Token = "0x40003AE")]
		Transparent,
		[Token(Token = "0x40003AF")]
		AcousticCeilingTiles,
		[Token(Token = "0x40003B0")]
		BrickBare,
		[Token(Token = "0x40003B1")]
		BrickPainted,
		[Token(Token = "0x40003B2")]
		ConcreteBlockCoarse,
		[Token(Token = "0x40003B3")]
		ConcreteBlockPainted,
		[Token(Token = "0x40003B4")]
		CurtainHeavy,
		[Token(Token = "0x40003B5")]
		FiberglassInsulation,
		[Token(Token = "0x40003B6")]
		GlassThin,
		[Token(Token = "0x40003B7")]
		GlassThick,
		[Token(Token = "0x40003B8")]
		Grass,
		[Token(Token = "0x40003B9")]
		LinoleumOnConcrete,
		[Token(Token = "0x40003BA")]
		Marble,
		[Token(Token = "0x40003BB")]
		Metal,
		[Token(Token = "0x40003BC")]
		ParquetOnConcrete,
		[Token(Token = "0x40003BD")]
		PlasterRough,
		[Token(Token = "0x40003BE")]
		PlasterSmooth,
		[Token(Token = "0x40003BF")]
		PlywoodPanel,
		[Token(Token = "0x40003C0")]
		PolishedConcreteOrTile,
		[Token(Token = "0x40003C1")]
		Sheetrock,
		[Token(Token = "0x40003C2")]
		WaterOrIceSurface,
		[Token(Token = "0x40003C3")]
		WoodCeiling,
		[Token(Token = "0x40003C4")]
		WoodPanel
	}

	[Serializable]
	[Token(Token = "0x20000A0")]
	public class SurfaceMaterialDictionary : Dictionary<string, SurfaceMaterial>, ISerializationCallbackReceiver
	{
		[Token(Token = "0x40003C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private List<string> guids;

		[Token(Token = "0x40003C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private List<SurfaceMaterial> surfaceMaterials;

		[Token(Token = "0x60003B7")]
		[Address(RVA = "0xCA3F84", Offset = "0xCA3F84", VA = "0xCA3F84")]
		public SurfaceMaterialDictionary()
		{
		}

		[Token(Token = "0x60003B8")]
		[Address(RVA = "0xCA4064", Offset = "0xCA4064", VA = "0xCA4064", Slot = "46")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x60003B9")]
		[Address(RVA = "0xCA4318", Offset = "0xCA4318", VA = "0xCA4318", Slot = "47")]
		public void OnAfterDeserialize()
		{
		}
	}

	[Token(Token = "0x20000A1")]
	private struct RoomEffectsRegion
	{
		[Token(Token = "0x40003C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ResonanceAudioRoom room;

		[Token(Token = "0x40003C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ResonanceAudioReverbProbe reverbProbe;

		[Token(Token = "0x60003BA")]
		[Address(RVA = "0xCA3E7C", Offset = "0xCA3E7C", VA = "0xCA3E7C")]
		public RoomEffectsRegion(ResonanceAudioRoom room, ResonanceAudioReverbProbe reverbProbe)
		{
		}
	}

	[Token(Token = "0x40003AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<RoomEffectsRegion> roomEffectsRegions;

	[Token(Token = "0x40003AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Bounds bounds;

	[Token(Token = "0x60003AB")]
	[Address(RVA = "0xCA2F08", Offset = "0xCA2F08", VA = "0xCA2F08")]
	public static float ComputeRoomEffectsGain(Vector3 sourcePosition)
	{
		return default(float);
	}

	[Token(Token = "0x60003AC")]
	[Address(RVA = "0xCA32B4", Offset = "0xCA32B4", VA = "0xCA32B4")]
	public static void UpdateRoom(ResonanceAudioRoom room)
	{
	}

	[Token(Token = "0x60003AD")]
	[Address(RVA = "0xCA38C4", Offset = "0xCA38C4", VA = "0xCA38C4")]
	public static void RemoveRoom(ResonanceAudioRoom room)
	{
	}

	[Token(Token = "0x60003AE")]
	[Address(RVA = "0xCA3920", Offset = "0xCA3920", VA = "0xCA3920")]
	public static void UpdateReverbProbe(ResonanceAudioReverbProbe reverbProbe)
	{
	}

	[Token(Token = "0x60003AF")]
	[Address(RVA = "0xCA3E20", Offset = "0xCA3E20", VA = "0xCA3E20")]
	public static void RemoveReverbProbe(ResonanceAudioReverbProbe reverbProbe)
	{
	}

	[Token(Token = "0x60003B0")]
	[Address(RVA = "0xCA3528", Offset = "0xCA3528", VA = "0xCA3528")]
	private static void UpdateRoomEffectsRegions(ResonanceAudioRoom room, bool isEnabled)
	{
	}

	[Token(Token = "0x60003B1")]
	[Address(RVA = "0xCA3BF0", Offset = "0xCA3BF0", VA = "0xCA3BF0")]
	private static void UpdateRoomEffectsRegions(ResonanceAudioReverbProbe reverbProbe, bool isEnabled)
	{
	}

	[Token(Token = "0x60003B2")]
	[Address(RVA = "0xCA375C", Offset = "0xCA375C", VA = "0xCA375C")]
	private static void UpdateRoomEffects()
	{
	}

	[Token(Token = "0x60003B3")]
	[Address(RVA = "0xCA32A0", Offset = "0xCA32A0", VA = "0xCA32A0")]
	private static float ComputeRoomEffectsAttenuation(float distanceToRoom)
	{
		return default(float);
	}

	[Token(Token = "0x60003B4")]
	[Address(RVA = "0xCA3318", Offset = "0xCA3318", VA = "0xCA3318")]
	private static bool IsListenerInsideRoom(ResonanceAudioRoom room)
	{
		return default(bool);
	}

	[Token(Token = "0x60003B5")]
	[Address(RVA = "0xCA3984", Offset = "0xCA3984", VA = "0xCA3984")]
	private static bool IsListenerInsideVisibleReverbProbe(ResonanceAudioReverbProbe reverbProbe)
	{
		return default(bool);
	}
}
[Token(Token = "0x20000A2")]
[RequireComponent(typeof(AudioSource))]
[ExecuteInEditMode]
[AddComponentMenu("ResonanceAudio/ResonanceAudioSource")]
public class ResonanceAudioSource : MonoBehaviour
{
	[Token(Token = "0x20000A3")]
	public enum Quality
	{
		[Token(Token = "0x40003D8")]
		Stereo,
		[Token(Token = "0x40003D9")]
		Low,
		[Token(Token = "0x40003DA")]
		High
	}

	[Token(Token = "0x20000A4")]
	private enum EffectData
	{
		[Token(Token = "0x40003DC")]
		Id,
		[Token(Token = "0x40003DD")]
		DistanceAttenuation,
		[Token(Token = "0x40003DE")]
		RoomEffectsGain,
		[Token(Token = "0x40003DF")]
		Gain,
		[Token(Token = "0x40003E0")]
		DirectivityAlpha,
		[Token(Token = "0x40003E1")]
		DirectivitySharpness,
		[Token(Token = "0x40003E2")]
		ListenerDirectivityAlpha,
		[Token(Token = "0x40003E3")]
		ListenerDirectivitySharpness,
		[Token(Token = "0x40003E4")]
		Occlusion,
		[Token(Token = "0x40003E5")]
		Quality,
		[Token(Token = "0x40003E6")]
		NearFieldEffectGain,
		[Token(Token = "0x40003E7")]
		Volume
	}

	[Token(Token = "0x40003C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Sets whether the room effects for the source should be bypassed.")]
	public bool bypassRoomEffects;

	[Token(Token = "0x40003CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Range(0f, 1f)]
	[Tooltip("Controls the balance between a dipole pattern and an omnidirectional pattern for source emission. By varying this value, different directivity patterns can be formed.")]
	public float directivityAlpha;

	[Token(Token = "0x40003CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Range(1f, 10f)]
	[Tooltip("Sets the sharpness of the source directivity pattern. Higher values will result in increased directivity.")]
	public float directivitySharpness;

	[Token(Token = "0x40003CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Range(0f, 1f)]
	[Tooltip("Controls the balance between a dipole pattern and an omnidirectional pattern for listener sensitivity. By varying this value, different directivity patterns can be formed.")]
	public float listenerDirectivityAlpha;

	[Token(Token = "0x40003CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Range(1f, 10f)]
	[Tooltip("Sets the sharpness of the listener directivity pattern. Higher values will result in increased directivity.")]
	public float listenerDirectivitySharpness;

	[Token(Token = "0x40003CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Tooltip("Applies a gain to the source for adjustment of relative loudness.")]
	public float gainDb;

	[Token(Token = "0x40003CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("Sets whether the near field effect should be applied when the distance between the source and the listener is less than 1m (in Unity units).")]
	public bool nearFieldEffectEnabled;

	[Token(Token = "0x40003D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Tooltip("Sets the nearfield effect gain. Note that the near field effect could result in up to ~9x gain boost on the source input, therefore, it is advised to set smaller gain values for louder sound sources to avoid clipping of the output signal.")]
	[Range(0f, 9f)]
	public float nearFieldEffectGain;

	[Token(Token = "0x40003D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("Sets whether the sound of the source should be occluded when there are other objects between the source and the listener.")]
	public bool occlusionEnabled;

	[Token(Token = "0x40003D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[Range(0f, 10f)]
	[Tooltip("Sets the occlusion effect intensity. Higher values will result in a stronger effect when the source is occluded.")]
	public float occlusionIntensity;

	[Token(Token = "0x40003D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("Sets the quality mode in which the spatial audio will be rendered. Higher quality modes allow increased fidelity at the cost of greater CPU usage.")]
	public Quality quality;

	[Token(Token = "0x40003D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float currentOcclusion;

	[Token(Token = "0x40003D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float nextOcclusionUpdate;

	[Token(Token = "0x170000A2")]
	public AudioSource audioSource
	{
		[Token(Token = "0x60003BB")]
		[Address(RVA = "0xCA4420", Offset = "0xCA4420", VA = "0xCA4420")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60003BC")]
		[Address(RVA = "0xCA4428", Offset = "0xCA4428", VA = "0xCA4428")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x60003BD")]
	[Address(RVA = "0xCA4430", Offset = "0xCA4430", VA = "0xCA4430")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003BE")]
	[Address(RVA = "0xCA4480", Offset = "0xCA4480", VA = "0xCA4480")]
	private void Update()
	{
	}

	[Token(Token = "0x60003BF")]
	[Address(RVA = "0xCA4544", Offset = "0xCA4544", VA = "0xCA4544")]
	private void UpdateSource()
	{
	}

	[Token(Token = "0x60003C0")]
	[Address(RVA = "0xCA485C", Offset = "0xCA485C", VA = "0xCA485C")]
	public ResonanceAudioSource()
	{
	}
}
[Token(Token = "0x20000A5")]
public class ShowBuildDateToText : MonoBehaviour
{
	[Token(Token = "0x40003E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text m_Text;

	[Token(Token = "0x60003C1")]
	[Address(RVA = "0xCA4880", Offset = "0xCA4880", VA = "0xCA4880")]
	private void Start()
	{
	}

	[Token(Token = "0x60003C2")]
	[Address(RVA = "0xCA495C", Offset = "0xCA495C", VA = "0xCA495C")]
	public ShowBuildDateToText()
	{
	}
}
[Token(Token = "0x20000A6")]
public class SkipStateOnSpace : MonoBehaviour
{
	[Token(Token = "0x60003C3")]
	[Address(RVA = "0xCA4964", Offset = "0xCA4964", VA = "0xCA4964")]
	private void Update()
	{
	}

	[Token(Token = "0x60003C4")]
	[Address(RVA = "0xCA49CC", Offset = "0xCA49CC", VA = "0xCA49CC")]
	public SkipStateOnSpace()
	{
	}
}
[Token(Token = "0x20000A7")]
[RequireComponent(typeof(Animation))]
public class StopAnimationAndDisableComponent : MonoBehaviour
{
	[Token(Token = "0x40003E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Animation animation;

	[Token(Token = "0x40003EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AnimationClip animClip;

	[Token(Token = "0x40003EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private SyncCharacterAnimation syncCharacterAnimation;

	[Token(Token = "0x60003C5")]
	[Address(RVA = "0xCA49D4", Offset = "0xCA49D4", VA = "0xCA49D4")]
	public void ForceStopAnimation()
	{
	}

	[Token(Token = "0x60003C6")]
	[Address(RVA = "0xCA4A30", Offset = "0xCA4A30", VA = "0xCA4A30")]
	public StopAnimationAndDisableComponent()
	{
	}
}
[Token(Token = "0x20000A8")]
public class TrainStateController : WhiteboxStateController
{
	[Token(Token = "0x40003EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject waveManager;

	[Token(Token = "0x60003C7")]
	[Address(RVA = "0xCA4A38", Offset = "0xCA4A38", VA = "0xCA4A38", Slot = "9")]
	protected override BOD.State GetStartingState()
	{
		return default(BOD.State);
	}

	[Token(Token = "0x60003C8")]
	[Address(RVA = "0xCA4A40", Offset = "0xCA4A40", VA = "0xCA4A40", Slot = "7")]
	public override void OnStateChange()
	{
	}

	[Token(Token = "0x60003C9")]
	[Address(RVA = "0xCA4AFC", Offset = "0xCA4AFC", VA = "0xCA4AFC")]
	public TrainStateController()
	{
	}
}
[Serializable]
[Token(Token = "0x20000A9")]
public class EaseTransformBehaviour : TransformControlBehaviour
{
	[Token(Token = "0x40003ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AnimationCurve easing;

	[Token(Token = "0x60003CA")]
	[Address(RVA = "0xCA4B04", Offset = "0xCA4B04", VA = "0xCA4B04", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x60003CB")]
	[Address(RVA = "0xCA4DA4", Offset = "0xCA4DA4", VA = "0xCA4DA4")]
	public EaseTransformBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x20000AA")]
public class EaseTransformClip : TransformControlClip
{
	[Token(Token = "0x40003EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public EaseTransformBehaviour template;

	[Token(Token = "0x170000A3")]
	public override TransformControlBehaviour TransformControlTemplate
	{
		[Token(Token = "0x60003CC")]
		[Address(RVA = "0xCA4E34", Offset = "0xCA4E34", VA = "0xCA4E34", Slot = "10")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60003CD")]
	[Address(RVA = "0xCA4E3C", Offset = "0xCA4E3C", VA = "0xCA4E3C", Slot = "11")]
	protected override Playable CreateTransformControlPlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x60003CE")]
	[Address(RVA = "0xCA4EE4", Offset = "0xCA4EE4", VA = "0xCA4EE4")]
	public EaseTransformClip()
	{
	}
}
[Serializable]
[Token(Token = "0x20000AB")]
public class EnterViaTrapdoorBehaviour : TransformControlBehaviour
{
	[Token(Token = "0x40003EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GridFloorReference floor;

	[Token(Token = "0x40003F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GridTrapdoor.MotionType style;

	[Token(Token = "0x40003F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GridTrapdoor trapdoor;

	[Token(Token = "0x40003F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float lowerDepth;

	[Token(Token = "0x40003F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public Vector2 axis;

	[Token(Token = "0x40003F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public bool resetTrapdoor;

	[Token(Token = "0x40003F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Transform binding;

	[Token(Token = "0x40003F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Transform originalParent;

	[Token(Token = "0x40003F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public bool simple;

	[NonSerialized]
	[Token(Token = "0x40003F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public EnterViaTrapdoorClip clip;

	[Token(Token = "0x60003CF")]
	[Address(RVA = "0xCA4F70", Offset = "0xCA4F70", VA = "0xCA4F70")]
	public void UpdateTrapdoor(Transform binding)
	{
	}

	[Token(Token = "0x60003D0")]
	[Address(RVA = "0xCA5070", Offset = "0xCA5070", VA = "0xCA5070", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x60003D1")]
	[Address(RVA = "0xCA52FC", Offset = "0xCA52FC", VA = "0xCA52FC")]
	private void Initialize()
	{
	}

	[Token(Token = "0x60003D2")]
	[Address(RVA = "0xCA5934", Offset = "0xCA5934", VA = "0xCA5934", Slot = "17")]
	public override void OnBehaviourPlay(Playable playable, FrameData info)
	{
	}

	[Token(Token = "0x60003D3")]
	[Address(RVA = "0xCA59AC", Offset = "0xCA59AC", VA = "0xCA59AC", Slot = "18")]
	public override void OnBehaviourPause(Playable playable, FrameData info)
	{
	}

	[Token(Token = "0x60003D4")]
	[Address(RVA = "0xCA5638", Offset = "0xCA5638", VA = "0xCA5638")]
	private void Process(float t)
	{
	}

	[Token(Token = "0x60003D5")]
	[Address(RVA = "0xCA5A8C", Offset = "0xCA5A8C", VA = "0xCA5A8C")]
	public EnterViaTrapdoorBehaviour()
	{
	}
}
[Token(Token = "0x20000AC")]
public class EnterViaTrapdoorClip : TransformControlClip
{
	[Token(Token = "0x40003F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public EnterViaTrapdoorBehaviour template;

	[Token(Token = "0x170000A4")]
	public override TransformControlBehaviour TransformControlTemplate
	{
		[Token(Token = "0x60003D6")]
		[Address(RVA = "0xCA5A98", Offset = "0xCA5A98", VA = "0xCA5A98", Slot = "10")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60003D7")]
	[Address(RVA = "0xCA5AA0", Offset = "0xCA5AA0", VA = "0xCA5AA0", Slot = "11")]
	protected override Playable CreateTransformControlPlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x60003D8")]
	[Address(RVA = "0xCA5C28", Offset = "0xCA5C28", VA = "0xCA5C28")]
	public EnterViaTrapdoorClip()
	{
	}
}
[Serializable]
[Token(Token = "0x20000AD")]
public class ExitViaTrapdoorBehaviour : TransformControlBehaviour
{
	[Token(Token = "0x40003FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GridFloorReference floor;

	[Token(Token = "0x40003FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GridTrapdoor.MotionType style;

	[Token(Token = "0x40003FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GridTrapdoor trapdoor;

	[Token(Token = "0x40003FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float lowerDepth;

	[Token(Token = "0x40003FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public Vector2 axis;

	[Token(Token = "0x40003FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public bool resetTrapdoor;

	[Token(Token = "0x4000400")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Transform binding;

	[Token(Token = "0x4000401")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Transform origianlParent;

	[Token(Token = "0x4000402")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public bool simple;

	[NonSerialized]
	[Token(Token = "0x4000403")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public ExitViaTrapdoorClip clip;

	[Token(Token = "0x60003D9")]
	[Address(RVA = "0xCA5C94", Offset = "0xCA5C94", VA = "0xCA5C94")]
	public void UpdateTrapdoor(Transform binding)
	{
	}

	[Token(Token = "0x60003DA")]
	[Address(RVA = "0xCA5D94", Offset = "0xCA5D94", VA = "0xCA5D94", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x60003DB")]
	[Address(RVA = "0xCA6020", Offset = "0xCA6020", VA = "0xCA6020")]
	private void Initialize()
	{
	}

	[Token(Token = "0x60003DC")]
	[Address(RVA = "0xCA64CC", Offset = "0xCA64CC", VA = "0xCA64CC", Slot = "17")]
	public override void OnBehaviourPlay(Playable playable, FrameData info)
	{
	}

	[Token(Token = "0x60003DD")]
	[Address(RVA = "0xCA6544", Offset = "0xCA6544", VA = "0xCA6544", Slot = "18")]
	public override void OnBehaviourPause(Playable playable, FrameData info)
	{
	}

	[Token(Token = "0x60003DE")]
	[Address(RVA = "0xCA61C4", Offset = "0xCA61C4", VA = "0xCA61C4")]
	private void Process(float t)
	{
	}

	[Token(Token = "0x60003DF")]
	[Address(RVA = "0xCA6660", Offset = "0xCA6660", VA = "0xCA6660")]
	public ExitViaTrapdoorBehaviour()
	{
	}
}
[Token(Token = "0x20000AE")]
public class ExitViaTrapdoorClip : TransformControlClip
{
	[Token(Token = "0x4000404")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ExitViaTrapdoorBehaviour template;

	[Token(Token = "0x170000A5")]
	public override TransformControlBehaviour TransformControlTemplate
	{
		[Token(Token = "0x60003E0")]
		[Address(RVA = "0xCA666C", Offset = "0xCA666C", VA = "0xCA666C", Slot = "10")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60003E1")]
	[Address(RVA = "0xCA6674", Offset = "0xCA6674", VA = "0xCA6674", Slot = "11")]
	protected override Playable CreateTransformControlPlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x60003E2")]
	[Address(RVA = "0xCA67FC", Offset = "0xCA67FC", VA = "0xCA67FC")]
	public ExitViaTrapdoorClip()
	{
	}
}
[Serializable]
[Token(Token = "0x20000AF")]
public class SetActiveBehaviour : TransformControlBehaviour
{
	[Token(Token = "0x4000405")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool active;

	[Token(Token = "0x4000406")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	public bool destroy;

	[Token(Token = "0x4000407")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Transform binding;

	[Token(Token = "0x60003E3")]
	[Address(RVA = "0xCA6868", Offset = "0xCA6868", VA = "0xCA6868", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x60003E4")]
	[Address(RVA = "0xCA69B4", Offset = "0xCA69B4", VA = "0xCA69B4", Slot = "18")]
	public override void OnBehaviourPause(Playable playable, FrameData info)
	{
	}

	[Token(Token = "0x60003E5")]
	[Address(RVA = "0xCA69B8", Offset = "0xCA69B8", VA = "0xCA69B8")]
	public SetActiveBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x20000B0")]
public class SetActiveClip : TransformControlClip
{
	[Token(Token = "0x4000408")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public SetActiveBehaviour template;

	[Token(Token = "0x170000A6")]
	public override TransformControlBehaviour TransformControlTemplate
	{
		[Token(Token = "0x60003E6")]
		[Address(RVA = "0xCA69BC", Offset = "0xCA69BC", VA = "0xCA69BC", Slot = "10")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60003E7")]
	[Address(RVA = "0xCA69C4", Offset = "0xCA69C4", VA = "0xCA69C4", Slot = "11")]
	protected override Playable CreateTransformControlPlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x60003E8")]
	[Address(RVA = "0xCA6A6C", Offset = "0xCA6A6C", VA = "0xCA6A6C")]
	public SetActiveClip()
	{
	}
}
[Serializable]
[Token(Token = "0x20000B1")]
public class SetTransformBehaviour : TransformControlBehaviour
{
	[Token(Token = "0x60003E9")]
	[Address(RVA = "0xCA6AD0", Offset = "0xCA6AD0", VA = "0xCA6AD0", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x60003EA")]
	[Address(RVA = "0xCA6BD0", Offset = "0xCA6BD0", VA = "0xCA6BD0", Slot = "17")]
	public override void OnBehaviourPlay(Playable playable, FrameData info)
	{
	}

	[Token(Token = "0x60003EB")]
	[Address(RVA = "0xCA6CCC", Offset = "0xCA6CCC", VA = "0xCA6CCC")]
	public SetTransformBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x20000B2")]
public class SetTransformClip : TransformControlClip
{
	[Token(Token = "0x4000409")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public SetTransformBehaviour template;

	[Token(Token = "0x170000A7")]
	public override TransformControlBehaviour TransformControlTemplate
	{
		[Token(Token = "0x60003EC")]
		[Address(RVA = "0xCA6CD0", Offset = "0xCA6CD0", VA = "0xCA6CD0", Slot = "10")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60003ED")]
	[Address(RVA = "0xCA6CD8", Offset = "0xCA6CD8", VA = "0xCA6CD8", Slot = "11")]
	protected override Playable CreateTransformControlPlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x60003EE")]
	[Address(RVA = "0xCA6D80", Offset = "0xCA6D80", VA = "0xCA6D80")]
	public SetTransformClip()
	{
	}
}
[Serializable]
[Token(Token = "0x20000B3")]
public class StringDescendBehaviour : TransformControlBehaviour
{
	[Token(Token = "0x400040A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float sway;

	[Token(Token = "0x400040B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[Range(0.2f, 0.8f)]
	public float hesitateTime;

	[Token(Token = "0x400040C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Range(0f, 1f)]
	public float slowHeight;

	[Token(Token = "0x400040D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public AnimationCurve heightCurve;

	[Token(Token = "0x60003EF")]
	[Address(RVA = "0xCA6DE4", Offset = "0xCA6DE4", VA = "0xCA6DE4", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x60003F0")]
	[Address(RVA = "0xCA7260", Offset = "0xCA7260", VA = "0xCA7260")]
	public void GenerateAnimation()
	{
	}

	[Token(Token = "0x60003F1")]
	[Address(RVA = "0xCA741C", Offset = "0xCA741C", VA = "0xCA741C")]
	private void GenerateInOutCurve(float startTime, float endTime, float minValue, float maxValue, float maxSpeed, float accelerationTime, Keyframe[] keyframes, int keyframeOffset = 0)
	{
	}

	[Token(Token = "0x60003F2")]
	[Address(RVA = "0xCA7524", Offset = "0xCA7524", VA = "0xCA7524")]
	public StringDescendBehaviour()
	{
	}
}
[Token(Token = "0x20000B4")]
public class StringDescendClip : TransformControlClip
{
	[Token(Token = "0x400040E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public StringDescendBehaviour template;

	[Token(Token = "0x170000A8")]
	public override TransformControlBehaviour TransformControlTemplate
	{
		[Token(Token = "0x60003F3")]
		[Address(RVA = "0xCA7530", Offset = "0xCA7530", VA = "0xCA7530", Slot = "10")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60003F4")]
	[Address(RVA = "0xCA7538", Offset = "0xCA7538", VA = "0xCA7538", Slot = "11")]
	protected override Playable CreateTransformControlPlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x60003F5")]
	[Address(RVA = "0xCA75F8", Offset = "0xCA75F8", VA = "0xCA75F8")]
	public StringDescendClip()
	{
	}
}
[Serializable]
[Token(Token = "0x20000B5")]
public class TransformControlBehaviour : PlayableBehaviour
{
	[Token(Token = "0x400040F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Vector3 position;

	[Token(Token = "0x4000410")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector3 rotation;

	[Token(Token = "0x4000411")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector3 scale;

	[Token(Token = "0x4000412")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Vector3 startPosition;

	[Token(Token = "0x4000413")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector3 startRotation;

	[Token(Token = "0x4000414")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public Vector3 startScale;

	[Token(Token = "0x60003F6")]
	[Address(RVA = "0xCA4DD4", Offset = "0xCA4DD4", VA = "0xCA4DD4")]
	public TransformControlBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x20000B6")]
public abstract class TransformControlClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x4000415")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PlayableDirector director;

	[Token(Token = "0x4000416")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TransformControlTrack track;

	[Token(Token = "0x170000A9")]
	public abstract TransformControlBehaviour TransformControlTemplate
	{
		[Token(Token = "0x60003F7")]
		get;
	}

	[Token(Token = "0x170000AA")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x60003F8")]
		[Address(RVA = "0xCA7664", Offset = "0xCA7664", VA = "0xCA7664", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x60003F9")]
	[Address(RVA = "0xCA766C", Offset = "0xCA766C", VA = "0xCA766C", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x60003FA")]
	protected abstract Playable CreateTransformControlPlayable(PlayableGraph graph, GameObject owner);

	[Token(Token = "0x60003FB")]
	[Address(RVA = "0xCA4F68", Offset = "0xCA4F68", VA = "0xCA4F68")]
	protected TransformControlClip()
	{
	}
}
[Token(Token = "0x20000B7")]
public class TransformControlMixer : PlayableBehaviour
{
	[Token(Token = "0x4000417")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Vector3 m_AssignedPosition;

	[Token(Token = "0x4000418")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Vector3 m_AssignedEulerAngles;

	[Token(Token = "0x4000419")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform m_TrackBinding;

	[Token(Token = "0x400041A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3 track;

	[Token(Token = "0x60003FC")]
	[Address(RVA = "0xCA76F0", Offset = "0xCA76F0", VA = "0xCA76F0", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x60003FD")]
	[Address(RVA = "0xCA7A70", Offset = "0xCA7A70", VA = "0xCA7A70")]
	public TransformControlMixer()
	{
	}
}
[Token(Token = "0x20000B8")]
[TrackBindingType(typeof(Transform))]
[TrackClipType(typeof(TransformControlClip))]
[TrackColor(0.4f, 0.6352941f, 0.8392158f)]
public class TransformControlTrack : TrackAsset
{
	[Token(Token = "0x60003FE")]
	[Address(RVA = "0xCA7A78", Offset = "0xCA7A78", VA = "0xCA7A78", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x60003FF")]
	[Address(RVA = "0xCA7FC8", Offset = "0xCA7FC8", VA = "0xCA7FC8", Slot = "29")]
	public override void GatherProperties(PlayableDirector director, IPropertyCollector driver)
	{
	}

	[Token(Token = "0x6000400")]
	[Address(RVA = "0xCA7FD0", Offset = "0xCA7FD0", VA = "0xCA7FD0")]
	public TransformControlTrack()
	{
	}
}
[Serializable]
[Token(Token = "0x20000B9")]
public class WheelTransformBehaviour : TransformControlBehaviour
{
	[Token(Token = "0x400041B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AnimationCurve easing;

	[Token(Token = "0x400041C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Vector3 pivotPoint;

	[Token(Token = "0x400041D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float angle;

	[Token(Token = "0x6000401")]
	[Address(RVA = "0xCA8028", Offset = "0xCA8028", VA = "0xCA8028", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x6000402")]
	[Address(RVA = "0xCA8314", Offset = "0xCA8314", VA = "0xCA8314")]
	public WheelTransformBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x20000BA")]
public class WheelTransformClip : TransformControlClip
{
	[Token(Token = "0x400041E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public WheelTransformBehaviour template;

	[Token(Token = "0x170000AB")]
	public override TransformControlBehaviour TransformControlTemplate
	{
		[Token(Token = "0x6000403")]
		[Address(RVA = "0xCA8344", Offset = "0xCA8344", VA = "0xCA8344", Slot = "10")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000404")]
	[Address(RVA = "0xCA834C", Offset = "0xCA834C", VA = "0xCA834C", Slot = "11")]
	protected override Playable CreateTransformControlPlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000405")]
	[Address(RVA = "0xCA83F4", Offset = "0xCA83F4", VA = "0xCA83F4")]
	public WheelTransformClip()
	{
	}
}
[Token(Token = "0x20000BB")]
public class typewriter_demo_NOPostProcess : MonoBehaviour
{
	[Token(Token = "0x400041F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float move_speed;

	[Token(Token = "0x4000420")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float rotate_speed;

	[Token(Token = "0x4000421")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float freeLook_speed;

	[Token(Token = "0x4000422")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AnimationCurve ease_curve;

	[Token(Token = "0x4000423")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform target;

	[Token(Token = "0x4000424")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform[] target_arr;

	[Token(Token = "0x4000425")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float[,] target_settings;

	[Token(Token = "0x4000426")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int target_ind;

	[Token(Token = "0x4000427")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float angle;

	[Token(Token = "0x4000428")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float height;

	[Token(Token = "0x4000429")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float distance;

	[Token(Token = "0x400042A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float zoom_speed;

	[Token(Token = "0x400042B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Vector3 zoomPos;

	[Token(Token = "0x400042C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector3 zoomRot;

	[Token(Token = "0x400042D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private Vector3 zoomPaperPos;

	[Token(Token = "0x400042E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Vector3 zoomPaperRot;

	[Token(Token = "0x400042F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private Vector3 lerp_to_pos;

	[Token(Token = "0x4000430")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Vector3 lerp_to_rot;

	[Token(Token = "0x4000431")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private Vector3 lerp_from_pos;

	[Token(Token = "0x4000432")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Vector3 lerp_from_rot;

	[Token(Token = "0x4000433")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private float lerp_to_fade;

	[Token(Token = "0x4000434")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private bool need_lerp;

	[Token(Token = "0x4000435")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private float lerp_time;

	[Token(Token = "0x4000436")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private GameObject obj_to_hide;

	[Token(Token = "0x4000437")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Material mat_to_fade;

	[Token(Token = "0x4000438")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Text LoadingText;

	[Token(Token = "0x4000439")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private Text WarningText;

	[Token(Token = "0x400043A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private Transform titles;

	[Token(Token = "0x400043B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private Slider DoF_Slider;

	[Token(Token = "0x400043C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private Slider Bloom_Slider;

	[Token(Token = "0x400043D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private Slider Chr_Slider;

	[Token(Token = "0x400043E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private typewriter type;

	[Token(Token = "0x6000406")]
	[Address(RVA = "0xCA8478", Offset = "0xCA8478", VA = "0xCA8478")]
	private void Start()
	{
	}

	[Token(Token = "0x6000407")]
	[Address(RVA = "0xCA8B38", Offset = "0xCA8B38", VA = "0xCA8B38")]
	private void Update()
	{
	}

	[Token(Token = "0x6000408")]
	[Address(RVA = "0xCA8ABC", Offset = "0xCA8ABC", VA = "0xCA8ABC")]
	private void Update_Camera_Position()
	{
	}

	[Token(Token = "0x6000409")]
	[Address(RVA = "0xCAA514", Offset = "0xCAA514", VA = "0xCAA514")]
	private Vector3 GetSphericalPos()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600040A")]
	[Address(RVA = "0xCAA57C", Offset = "0xCAA57C", VA = "0xCAA57C")]
	private Quaternion GetRotationToTarget(Vector3 fromPosition)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x600040B")]
	[Address(RVA = "0xCAA5C8", Offset = "0xCAA5C8", VA = "0xCAA5C8")]
	public typewriter_demo_NOPostProcess()
	{
	}
}
[Token(Token = "0x20000BC")]
public static class persistent_variables
{
	[Token(Token = "0x400043F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool hint_text_hidden;

	[Token(Token = "0x4000440")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static int target_ind;

	[Token(Token = "0x4000441")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static float angle;

	[Token(Token = "0x4000442")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static float height;

	[Token(Token = "0x4000443")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static float distance;

	[Token(Token = "0x4000444")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public static float dof;

	[Token(Token = "0x4000445")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static float bloom;

	[Token(Token = "0x4000446")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public static float chr;
}
[Token(Token = "0x20000BD")]
public class ui : MonoBehaviour
{
	[Token(Token = "0x4000447")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text text_2D_ref;

	[Token(Token = "0x4000448")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Font[] font_sets;

	[Token(Token = "0x4000449")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool ui_shown;

	[Token(Token = "0x400044A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Animation anim;

	[Token(Token = "0x400044B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Dropdown dd_fonts;

	[Token(Token = "0x400044C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Dropdown dd_sounds;

	[Token(Token = "0x400044D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GameObject text_hint;

	[Token(Token = "0x400044E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private typewriter type;

	[Token(Token = "0x600040D")]
	[Address(RVA = "0xCAA72C", Offset = "0xCAA72C", VA = "0xCAA72C")]
	private void Start()
	{
	}

	[Token(Token = "0x600040E")]
	[Address(RVA = "0xCAA8C8", Offset = "0xCAA8C8", VA = "0xCAA8C8")]
	private void Update()
	{
	}

	[Token(Token = "0x600040F")]
	[Address(RVA = "0xCAAAA8", Offset = "0xCAAAA8", VA = "0xCAAAA8")]
	public void FontSetChange()
	{
	}

	[Token(Token = "0x6000410")]
	[Address(RVA = "0xCAAAF0", Offset = "0xCAAAF0", VA = "0xCAAAF0")]
	public void SoundSetChange()
	{
	}

	[Token(Token = "0x6000411")]
	[Address(RVA = "0xCAAB18", Offset = "0xCAAB18", VA = "0xCAAB18")]
	public void Exit()
	{
	}

	[Token(Token = "0x6000412")]
	[Address(RVA = "0xCAAB20", Offset = "0xCAAB20", VA = "0xCAAB20")]
	public ui()
	{
	}
}
[Token(Token = "0x20000BE")]
public class clock : MonoBehaviour
{
	[Token(Token = "0x400044F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform hour;

	[Token(Token = "0x4000450")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform minute;

	[Token(Token = "0x4000451")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform seconds;

	[Token(Token = "0x4000452")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float hour_offset;

	[Token(Token = "0x4000453")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float minute_offset;

	[Token(Token = "0x4000454")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float second_offset;

	[Token(Token = "0x4000455")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool negative;

	[Token(Token = "0x6000413")]
	[Address(RVA = "0xCAAB28", Offset = "0xCAAB28", VA = "0xCAAB28")]
	private void Start()
	{
	}

	[Token(Token = "0x6000414")]
	[Address(RVA = "0xCAAB2C", Offset = "0xCAAB2C", VA = "0xCAAB2C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000415")]
	[Address(RVA = "0xCAACF4", Offset = "0xCAACF4", VA = "0xCAACF4")]
	public clock()
	{
	}
}
[Token(Token = "0x20000BF")]
public class face_to_camera : MonoBehaviour
{
	[Token(Token = "0x4000456")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Camera cam;

	[Token(Token = "0x6000416")]
	[Address(RVA = "0xCAACFC", Offset = "0xCAACFC", VA = "0xCAACFC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000417")]
	[Address(RVA = "0xCAAD80", Offset = "0xCAAD80", VA = "0xCAAD80")]
	public face_to_camera()
	{
	}
}
[Token(Token = "0x20000C0")]
public class typewriter : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20000C1")]
	public struct audio_set
	{
		[Token(Token = "0x4000474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AudioClip[] ShiftPress;

		[Token(Token = "0x4000475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AudioClip[] ButtonPress;

		[Token(Token = "0x4000476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AudioClip[] ButtonPressShifted;

		[Token(Token = "0x4000477")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip[] SpaceBar;

		[Token(Token = "0x4000478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioClip[] Carr_ret;

		[Token(Token = "0x4000479")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip[] End_of_Line;

		[Token(Token = "0x400047A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioClip[] NewLine;

		[Token(Token = "0x400047B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AudioClip[] Paper_In;

		[Token(Token = "0x400047C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AudioClip[] Paper_Out;
	}

	[Token(Token = "0x20000C2")]
	public enum errors
	{
		[Token(Token = "0x400047E")]
		ok,
		[Token(Token = "0x400047F")]
		paper_not_inserted,
		[Token(Token = "0x4000480")]
		can_not_press_second_button,
		[Token(Token = "0x4000481")]
		can_not_release_button_that_is_not_pressed,
		[Token(Token = "0x4000482")]
		paper_already_animating,
		[Token(Token = "0x4000483")]
		last_line_reached,
		[Token(Token = "0x4000484")]
		there_is_no_such_letter,
		[Token(Token = "0x4000485")]
		not_set
	}

	[Token(Token = "0x20000C3")]
	[CompilerGenerated]
	private sealed class <TypeStringCoroutine>d__35 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000486")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000488")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public typewriter <>4__this;

		[Token(Token = "0x4000489")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string str;

		[Token(Token = "0x400048A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float minDelay;

		[Token(Token = "0x400048B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float maxDelay;

		[Token(Token = "0x400048C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string <>7__wrap1;

		[Token(Token = "0x400048D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int <>7__wrap2;

		[Token(Token = "0x400048E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private char <c>5__4;

		[Token(Token = "0x400048F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
		private bool <isUpper>5__5;

		[Token(Token = "0x4000490")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int <ind>5__6;

		[Token(Token = "0x170000AC")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000434")]
			[Address(RVA = "0xCAC9E8", Offset = "0xCAC9E8", VA = "0xCAC9E8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000436")]
			[Address(RVA = "0xCACA30", Offset = "0xCACA30", VA = "0xCACA30", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000431")]
		[Address(RVA = "0xCABA74", Offset = "0xCABA74", VA = "0xCABA74")]
		[DebuggerHidden]
		public <TypeStringCoroutine>d__35(int <>1__state)
		{
		}

		[Token(Token = "0x6000432")]
		[Address(RVA = "0xCAC4C4", Offset = "0xCAC4C4", VA = "0xCAC4C4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000433")]
		[Address(RVA = "0xCAC4C8", Offset = "0xCAC4C8", VA = "0xCAC4C8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000435")]
		[Address(RVA = "0xCAC9F0", Offset = "0xCAC9F0", VA = "0xCAC9F0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000C4")]
	[CompilerGenerated]
	private sealed class <waitAndHidePaperOut>d__54 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000491")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public typewriter <>4__this;

		[Token(Token = "0x170000AE")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600043A")]
			[Address(RVA = "0xCACAEC", Offset = "0xCACAEC", VA = "0xCACAEC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600043C")]
			[Address(RVA = "0xCACB34", Offset = "0xCACB34", VA = "0xCACB34", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000437")]
		[Address(RVA = "0xCAC2BC", Offset = "0xCAC2BC", VA = "0xCAC2BC")]
		[DebuggerHidden]
		public <waitAndHidePaperOut>d__54(int <>1__state)
		{
		}

		[Token(Token = "0x6000438")]
		[Address(RVA = "0xCACA38", Offset = "0xCACA38", VA = "0xCACA38", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000439")]
		[Address(RVA = "0xCACA3C", Offset = "0xCACA3C", VA = "0xCACA3C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600043B")]
		[Address(RVA = "0xCACAF4", Offset = "0xCACAF4", VA = "0xCACAF4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000457")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float carriage_return_anim_speed;

	[Token(Token = "0x4000458")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float cariage_step;

	[Token(Token = "0x4000459")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float cariage_limit;

	[Token(Token = "0x400045A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float text2D_coeff_X;

	[Token(Token = "0x400045B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float text2D_coeff_Y;

	[Token(Token = "0x400045C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float text2D_offset_Y;

	[Token(Token = "0x400045D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int paperRollInit;

	[Token(Token = "0x400045E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float paperRollStep;

	[Token(Token = "0x400045F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GameObject mechanics;

	[Token(Token = "0x4000460")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GameObject space;

	[Token(Token = "0x4000461")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GameObject lenta_bone;

	[Token(Token = "0x4000462")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<GameObject> buttons;

	[Token(Token = "0x4000463")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Animation anim;

	[Token(Token = "0x4000464")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Animator animator;

	[Token(Token = "0x4000465")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public RectTransform ref_text_2D;

	[Token(Token = "0x4000466")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject paper_out;

	[Token(Token = "0x4000467")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private AudioSource aud;

	[Token(Token = "0x4000468")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public audio_set[] audio_sets;

	[Token(Token = "0x4000469")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public int active_audio_set;

	[Token(Token = "0x400046A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[HideInInspector]
	public string letters;

	[Token(Token = "0x400046B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private int PaperPosition;

	[Token(Token = "0x400046C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private bool carriage_return_request;

	[Token(Token = "0x400046D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float animator_stop;

	[Token(Token = "0x400046E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private string button_down_AZ;

	[Token(Token = "0x400046F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private bool button_shift_down;

	[Token(Token = "0x4000470")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private List<Vector2> AnimationRanges;

	[Token(Token = "0x4000471")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private int[] letters_to_button;

	[Token(Token = "0x4000472")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private GameObject[] hammers;

	[Token(Token = "0x4000473")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Vector3[,] hammer_positions;

	[Token(Token = "0x6000418")]
	[Address(RVA = "0xCAAD88", Offset = "0xCAAD88", VA = "0xCAAD88")]
	private void Start()
	{
	}

	[Token(Token = "0x6000419")]
	[Address(RVA = "0xCAB6EC", Offset = "0xCAB6EC", VA = "0xCAB6EC")]
	private void Update()
	{
	}

	[Token(Token = "0x600041A")]
	[Address(RVA = "0xCAB930", Offset = "0xCAB930", VA = "0xCAB930")]
	private void carriage_return_anim()
	{
	}

	[Token(Token = "0x600041B")]
	[Address(RVA = "0xCA9964", Offset = "0xCA9964", VA = "0xCA9964")]
	public void TypeString(string str, float minDelay, float maxDelay)
	{
	}

	[Token(Token = "0x600041C")]
	[Address(RVA = "0xCAB9EC", Offset = "0xCAB9EC", VA = "0xCAB9EC")]
	[IteratorStateMachine(typeof(<TypeStringCoroutine>d__35))]
	private IEnumerator TypeStringCoroutine(string str, float minDelay, float maxDelay)
	{
		return null;
	}

	[Token(Token = "0x600041D")]
	[Address(RVA = "0xCABA9C", Offset = "0xCABA9C", VA = "0xCABA9C")]
	public errors PressButtonAndType(string s)
	{
		return default(errors);
	}

	[Token(Token = "0x600041E")]
	[Address(RVA = "0xCA9A0C", Offset = "0xCA9A0C", VA = "0xCA9A0C")]
	public errors PressButtonAndType(int i)
	{
		return default(errors);
	}

	[Token(Token = "0x600041F")]
	[Address(RVA = "0xCAC04C", Offset = "0xCAC04C", VA = "0xCAC04C")]
	public errors PressButton(string s)
	{
		return default(errors);
	}

	[Token(Token = "0x6000420")]
	[Address(RVA = "0xCABB10", Offset = "0xCABB10", VA = "0xCABB10")]
	public errors PressButton(int i)
	{
		return default(errors);
	}

	[Token(Token = "0x6000421")]
	[Address(RVA = "0xCAC11C", Offset = "0xCAC11C", VA = "0xCAC11C")]
	public errors TypeLetter(string s)
	{
		return default(errors);
	}

	[Token(Token = "0x6000422")]
	[Address(RVA = "0xCABDE4", Offset = "0xCABDE4", VA = "0xCABDE4")]
	public errors TypeLetter(int i)
	{
		return default(errors);
	}

	[Token(Token = "0x6000423")]
	[Address(RVA = "0xCAC190", Offset = "0xCAC190", VA = "0xCAC190")]
	public errors ReleaseButton(string s)
	{
		return default(errors);
	}

	[Token(Token = "0x6000424")]
	[Address(RVA = "0xCA9A44", Offset = "0xCA9A44", VA = "0xCA9A44")]
	public errors ReleaseButton(int i)
	{
		return default(errors);
	}

	[Token(Token = "0x6000425")]
	[Address(RVA = "0xCA9CD8", Offset = "0xCA9CD8", VA = "0xCA9CD8")]
	public void PressSpace()
	{
	}

	[Token(Token = "0x6000426")]
	[Address(RVA = "0xCA9D5C", Offset = "0xCA9D5C", VA = "0xCA9D5C")]
	public void ReleaseSpace()
	{
	}

	[Token(Token = "0x6000427")]
	[Address(RVA = "0xCA9DB4", Offset = "0xCA9DB4", VA = "0xCA9DB4")]
	public void PressShift()
	{
	}

	[Token(Token = "0x6000428")]
	[Address(RVA = "0xCA9F10", Offset = "0xCA9F10", VA = "0xCA9F10")]
	public void ReleaseShift()
	{
	}

	[Token(Token = "0x6000429")]
	[Address(RVA = "0xCAA028", Offset = "0xCAA028", VA = "0xCAA028")]
	public errors PaperInit()
	{
		return default(errors);
	}

	[Token(Token = "0x600042A")]
	[Address(RVA = "0xCAA24C", Offset = "0xCAA24C", VA = "0xCAA24C")]
	public errors PaperToNextPosition()
	{
		return default(errors);
	}

	[Token(Token = "0x600042B")]
	[Address(RVA = "0xCAA3B0", Offset = "0xCAA3B0", VA = "0xCAA3B0")]
	public errors PaperOut()
	{
		return default(errors);
	}

	[Token(Token = "0x600042C")]
	[Address(RVA = "0xCAA4D4", Offset = "0xCAA4D4", VA = "0xCAA4D4")]
	public void CarriageReturn()
	{
	}

	[Token(Token = "0x600042D")]
	[Address(RVA = "0xCAC204", Offset = "0xCAC204", VA = "0xCAC204")]
	public void MoveCarriage()
	{
	}

	[Token(Token = "0x600042E")]
	[Address(RVA = "0xCAC0C0", Offset = "0xCAC0C0", VA = "0xCAC0C0")]
	private void playSound(AudioClip[] clip_arr)
	{
	}

	[Token(Token = "0x600042F")]
	[Address(RVA = "0xCAB8C8", Offset = "0xCAB8C8", VA = "0xCAB8C8")]
	[IteratorStateMachine(typeof(<waitAndHidePaperOut>d__54))]
	private IEnumerator waitAndHidePaperOut()
	{
		return null;
	}

	[Token(Token = "0x6000430")]
	[Address(RVA = "0xCAC2E4", Offset = "0xCAC2E4", VA = "0xCAC2E4")]
	public typewriter()
	{
	}
}
[Token(Token = "0x20000C5")]
public class typewriter_simpleTyping : MonoBehaviour
{
	[Token(Token = "0x4000494")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private typewriter type;

	[Token(Token = "0x600043D")]
	[Address(RVA = "0xCACB3C", Offset = "0xCACB3C", VA = "0xCACB3C")]
	private void Start()
	{
	}

	[Token(Token = "0x600043E")]
	[Address(RVA = "0xCACBCC", Offset = "0xCACBCC", VA = "0xCACBCC")]
	private void Update()
	{
	}

	[Token(Token = "0x600043F")]
	[Address(RVA = "0xCACEC8", Offset = "0xCACEC8", VA = "0xCACEC8")]
	public typewriter_simpleTyping()
	{
	}
}
[Serializable]
[Token(Token = "0x20000C6")]
public class PersonInLinePlayableAsset : PlayableAsset
{
	[Token(Token = "0x4000495")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int TriggerID;

	[Token(Token = "0x6000440")]
	[Address(RVA = "0xCACED0", Offset = "0xCACED0", VA = "0xCACED0", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject go)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000441")]
	[Address(RVA = "0xCACF80", Offset = "0xCACF80", VA = "0xCACF80")]
	public PersonInLinePlayableAsset()
	{
	}
}
[Token(Token = "0x20000C7")]
public class PersonInLinePlayableBehaviour : PlayableBehaviour
{
	[Token(Token = "0x6000442")]
	[Address(RVA = "0xCACF88", Offset = "0xCACF88", VA = "0xCACF88", Slot = "13")]
	public override void OnGraphStart(Playable playable)
	{
	}

	[Token(Token = "0x6000443")]
	[Address(RVA = "0xCACF8C", Offset = "0xCACF8C", VA = "0xCACF8C", Slot = "14")]
	public override void OnGraphStop(Playable playable)
	{
	}

	[Token(Token = "0x6000444")]
	[Address(RVA = "0xCACF90", Offset = "0xCACF90", VA = "0xCACF90", Slot = "17")]
	public override void OnBehaviourPlay(Playable playable, FrameData info)
	{
	}

	[Token(Token = "0x6000445")]
	[Address(RVA = "0xCACF94", Offset = "0xCACF94", VA = "0xCACF94", Slot = "18")]
	public override void OnBehaviourPause(Playable playable, FrameData info)
	{
	}

	[Token(Token = "0x6000446")]
	[Address(RVA = "0xCACF98", Offset = "0xCACF98", VA = "0xCACF98", Slot = "19")]
	public override void PrepareFrame(Playable playable, FrameData info)
	{
	}

	[Token(Token = "0x6000447")]
	[Address(RVA = "0xCACF9C", Offset = "0xCACF9C", VA = "0xCACF9C")]
	public PersonInLinePlayableBehaviour()
	{
	}
}
[Token(Token = "0x20000C8")]
[AddComponentMenu("Rendering/SetRenderQueue")]
public class SetRenderQueue : MonoBehaviour
{
	[Token(Token = "0x4000496")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected int[] m_queues;

	[Token(Token = "0x6000448")]
	[Address(RVA = "0xCACFA4", Offset = "0xCACFA4", VA = "0xCACFA4")]
	protected void Awake()
	{
	}

	[Token(Token = "0x6000449")]
	[Address(RVA = "0xCAD07C", Offset = "0xCAD07C", VA = "0xCAD07C")]
	public SetRenderQueue()
	{
	}
}
[Token(Token = "0x20000C9")]
public class ReadMe : MonoBehaviour
{
	[Token(Token = "0x600044A")]
	[Address(RVA = "0xCAD0F0", Offset = "0xCAD0F0", VA = "0xCAD0F0")]
	private void Start()
	{
	}

	[Token(Token = "0x600044B")]
	[Address(RVA = "0xCAD0F4", Offset = "0xCAD0F4", VA = "0xCAD0F4")]
	private void Update()
	{
	}

	[Token(Token = "0x600044C")]
	[Address(RVA = "0xCAD0F8", Offset = "0xCAD0F8", VA = "0xCAD0F8")]
	public ReadMe()
	{
	}
}
[Token(Token = "0x20000CA")]
public class WaterColorBrush : MonoBehaviour
{
	[Token(Token = "0x600044D")]
	[Address(RVA = "0xCAD100", Offset = "0xCAD100", VA = "0xCAD100")]
	public WaterColorBrush()
	{
	}
}
[Token(Token = "0x20000CB")]
public class BlastParticles : MonoBehaviour
{
	[Token(Token = "0x4000497")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public DissolveController dissolve;

	[Token(Token = "0x4000498")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ParticleSystem particles;

	[Token(Token = "0x4000499")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem.EmissionModule emit;

	[Token(Token = "0x400049A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ParticleSystem.VelocityOverLifetimeModule vel;

	[Token(Token = "0x400049B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private MeshRenderer rend;

	[Token(Token = "0x400049C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float maxParticles;

	[Token(Token = "0x600044E")]
	[Address(RVA = "0xCAD108", Offset = "0xCAD108", VA = "0xCAD108")]
	private void Start()
	{
	}

	[Token(Token = "0x600044F")]
	[Address(RVA = "0xCAD19C", Offset = "0xCAD19C", VA = "0xCAD19C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000450")]
	[Address(RVA = "0xCAD47C", Offset = "0xCAD47C", VA = "0xCAD47C")]
	public BlastParticles()
	{
	}
}
[Token(Token = "0x20000CC")]
[ExecuteInEditMode]
public class DissolveController : MonoBehaviour
{
	[Token(Token = "0x400049D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float radius;

	[Token(Token = "0x400049E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float effectSize;

	[Token(Token = "0x400049F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float burnSize;

	[Token(Token = "0x40004A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float speed;

	[Token(Token = "0x40004A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float normalVelocity;

	[Token(Token = "0x40004A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float radiusVelocity;

	[Token(Token = "0x40004A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Color color;

	[Token(Token = "0x40004A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public MeshRenderer explodeRenderers;

	[Token(Token = "0x40004A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ParticleSystem particles;

	[Token(Token = "0x6000451")]
	[Address(RVA = "0xCAD484", Offset = "0xCAD484", VA = "0xCAD484")]
	public void Update()
	{
	}

	[Token(Token = "0x6000452")]
	[Address(RVA = "0xCAD570", Offset = "0xCAD570", VA = "0xCAD570")]
	public DissolveController()
	{
	}
}
[Token(Token = "0x20000CD")]
public class DissolveParticles : MonoBehaviour
{
	[Token(Token = "0x40004A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ParticleSystem particles;

	[Token(Token = "0x40004A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public DissolveController dissolve;

	[Token(Token = "0x40004A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector3 dissolveCenter;

	[Token(Token = "0x40004A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float radius;

	[Token(Token = "0x40004AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float sqrRadius;

	[Token(Token = "0x40004AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Vector3 localPos;

	[Token(Token = "0x40004AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int particleCount;

	[Token(Token = "0x40004AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public int partsPerFrame;

	[Token(Token = "0x40004AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float particleDensity;

	[Token(Token = "0x40004AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int partCount;

	[Token(Token = "0x40004B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int partsPerframe;

	[Token(Token = "0x40004B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private int prevID;

	[Token(Token = "0x40004B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<Vector3> partPoses;

	[Token(Token = "0x40004B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private List<Vector3> norms;

	[Token(Token = "0x40004B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private List<Vector3> verts;

	[Token(Token = "0x40004B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private List<int> tris;

	[Token(Token = "0x40004B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool[] insides;

	[Token(Token = "0x6000453")]
	[Address(RVA = "0xCAD580", Offset = "0xCAD580", VA = "0xCAD580")]
	private void Start()
	{
	}

	[Token(Token = "0x6000454")]
	[Address(RVA = "0xCAD698", Offset = "0xCAD698", VA = "0xCAD698")]
	private void Update()
	{
	}

	[Token(Token = "0x6000455")]
	[Address(RVA = "0xCAD798", Offset = "0xCAD798", VA = "0xCAD798")]
	private bool CheckTriangleIntersects(int triID)
	{
		return default(bool);
	}

	[Token(Token = "0x6000456")]
	[Address(RVA = "0xCAD8DC", Offset = "0xCAD8DC", VA = "0xCAD8DC")]
	private void SpawnParticles(int triID)
	{
	}

	[Token(Token = "0x6000457")]
	[Address(RVA = "0xCAE0D8", Offset = "0xCAE0D8", VA = "0xCAE0D8")]
	public DissolveParticles()
	{
	}
}
[Token(Token = "0x20000CE")]
public class AdvanceWhenAudioIdx : MonoBehaviour
{
	[Token(Token = "0x20000CF")]
	[CompilerGenerated]
	private sealed class <CheckAudioIdx>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AdvanceWhenAudioIdx <>4__this;

		[Token(Token = "0x170000B0")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000460")]
			[Address(RVA = "0xCAE610", Offset = "0xCAE610", VA = "0xCAE610", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000462")]
			[Address(RVA = "0xCAE658", Offset = "0xCAE658", VA = "0xCAE658", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600045D")]
		[Address(RVA = "0xCAE2C4", Offset = "0xCAE2C4", VA = "0xCAE2C4")]
		[DebuggerHidden]
		public <CheckAudioIdx>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x600045E")]
		[Address(RVA = "0xCAE2F4", Offset = "0xCAE2F4", VA = "0xCAE2F4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600045F")]
		[Address(RVA = "0xCAE2F8", Offset = "0xCAE2F8", VA = "0xCAE2F8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000461")]
		[Address(RVA = "0xCAE618", Offset = "0xCAE618", VA = "0xCAE618", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40004B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PrototypeScene scene;

	[Token(Token = "0x40004B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int audioIdx;

	[Token(Token = "0x6000458")]
	[Address(RVA = "0xCAE208", Offset = "0xCAE208", VA = "0xCAE208")]
	private void Start()
	{
	}

	[Token(Token = "0x6000459")]
	[Address(RVA = "0xCAE20C", Offset = "0xCAE20C", VA = "0xCAE20C")]
	private void Update()
	{
	}

	[Token(Token = "0x600045A")]
	[Address(RVA = "0xCAE210", Offset = "0xCAE210", VA = "0xCAE210")]
	public void Advance()
	{
	}

	[Token(Token = "0x600045B")]
	[Address(RVA = "0xCAE25C", Offset = "0xCAE25C", VA = "0xCAE25C")]
	[IteratorStateMachine(typeof(<CheckAudioIdx>d__5))]
	private IEnumerator CheckAudioIdx()
	{
		return null;
	}

	[Token(Token = "0x600045C")]
	[Address(RVA = "0xCAE2EC", Offset = "0xCAE2EC", VA = "0xCAE2EC")]
	public AdvanceWhenAudioIdx()
	{
	}
}
[Token(Token = "0x20000D0")]
public class AnimatedPassport : MonoBehaviour
{
	[Token(Token = "0x40004BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform bone1;

	[Token(Token = "0x40004BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform bone2;

	[Token(Token = "0x40004BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float duration;

	[Token(Token = "0x40004BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 openRotation;

	[Token(Token = "0x40004C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool open;

	[Token(Token = "0x6000463")]
	[Address(RVA = "0xCAE660", Offset = "0xCAE660", VA = "0xCAE660")]
	private void Start()
	{
	}

	[Token(Token = "0x6000464")]
	[Address(RVA = "0xCAE664", Offset = "0xCAE664", VA = "0xCAE664")]
	public void Open()
	{
	}

	[Token(Token = "0x6000465")]
	[Address(RVA = "0xCAE734", Offset = "0xCAE734", VA = "0xCAE734")]
	public void Close()
	{
	}

	[Token(Token = "0x6000466")]
	[Address(RVA = "0xCAE790", Offset = "0xCAE790", VA = "0xCAE790")]
	public void SetOpenAmount(float percent)
	{
	}

	[Token(Token = "0x6000467")]
	[Address(RVA = "0xCAE8E0", Offset = "0xCAE8E0", VA = "0xCAE8E0")]
	public void OpenPartially(float percent)
	{
	}

	[Token(Token = "0x6000468")]
	[Address(RVA = "0xCAEA34", Offset = "0xCAEA34", VA = "0xCAEA34")]
	public void Toggle()
	{
	}

	[Token(Token = "0x6000469")]
	[Address(RVA = "0xCAEA6C", Offset = "0xCAEA6C", VA = "0xCAEA6C")]
	private void Update()
	{
	}

	[Token(Token = "0x600046A")]
	[Address(RVA = "0xCAEA70", Offset = "0xCAEA70", VA = "0xCAEA70")]
	public AnimatedPassport()
	{
	}
}
[Token(Token = "0x20000D1")]
public class AnimateMaterialsColor : DelayedAction
{
	[Token(Token = "0x40004C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material[] materials;

	[Token(Token = "0x40004C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Color[] endColors;

	[Token(Token = "0x40004C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string colorProperty;

	[Token(Token = "0x40004C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float duration;

	[Token(Token = "0x600046B")]
	[Address(RVA = "0xCAEA88", Offset = "0xCAEA88", VA = "0xCAEA88", Slot = "4")]
	protected override void Action()
	{
	}

	[Token(Token = "0x600046C")]
	[Address(RVA = "0xCAEBB0", Offset = "0xCAEBB0", VA = "0xCAEBB0")]
	public AnimateMaterialsColor()
	{
	}
}
[Token(Token = "0x20000D2")]
public class AnimateMaterialsFloatProperty : AnimateMaterialsProperty<float>
{
	[Serializable]
	[Token(Token = "0x20000D3")]
	public struct FadeDef
	{
		[Token(Token = "0x40004C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float value;

		[Token(Token = "0x40004C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float duration;
	}

	[Token(Token = "0x40004C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Ease ease;

	[Token(Token = "0x40004C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public FadeDef[] fades;

	[Token(Token = "0x600046D")]
	[Address(RVA = "0xCAEBB8", Offset = "0xCAEBB8", VA = "0xCAEBB8", Slot = "4")]
	protected override void AnimateProperty(Material m, float newValue, float duration)
	{
	}

	[Token(Token = "0x600046E")]
	[Address(RVA = "0xCAEC54", Offset = "0xCAEC54", VA = "0xCAEC54", Slot = "6")]
	protected override float GetProperty(Material m)
	{
		return default(float);
	}

	[Token(Token = "0x600046F")]
	[Address(RVA = "0xCAEC78", Offset = "0xCAEC78", VA = "0xCAEC78", Slot = "5")]
	protected override void SetProperty(Material m, float newValue)
	{
	}

	[Token(Token = "0x6000470")]
	[Address(RVA = "0xCAEC9C", Offset = "0xCAEC9C", VA = "0xCAEC9C", Slot = "7")]
	protected override float ZeroValue()
	{
		return default(float);
	}

	[Token(Token = "0x6000471")]
	[Address(RVA = "0xCAECA4", Offset = "0xCAECA4", VA = "0xCAECA4", Slot = "8")]
	protected override PropertyAnimation<float> GetFade(int fadeID)
	{
		return null;
	}

	[Token(Token = "0x6000472")]
	[Address(RVA = "0xCAED40", Offset = "0xCAED40", VA = "0xCAED40")]
	public AnimateMaterialsFloatProperty()
	{
	}
}
[Serializable]
[Token(Token = "0x20000D4")]
public class PropertyAnimation<T> : UnityEngine.Object
{
	[Token(Token = "0x40004C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public T value;

	[Token(Token = "0x40004CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float duration;

	[Token(Token = "0x6000473")]
	public PropertyAnimation()
	{
	}
}
[Token(Token = "0x20000D5")]
public abstract class AnimateMaterialsProperty<T> : MonoBehaviour
{
	[Token(Token = "0x40004CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Renderer[] renderers;

	[Token(Token = "0x40004CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public string property;

	[Token(Token = "0x40004CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public bool zeroOnAwake;

	[Token(Token = "0x40004CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public bool unscaledTime;

	[Token(Token = "0x40004CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private List<Material> newMaterials;

	[Token(Token = "0x40004D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private List<Material> oldMaterials;

	[Token(Token = "0x40004D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<Material> mats;

	[Token(Token = "0x40004D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private List<Renderer> convertedRenderers;

	[Token(Token = "0x6000474")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000475")]
	public void AddRenderers(GameObject ob)
	{
	}

	[Token(Token = "0x6000476")]
	public void AddRenderer(Renderer r)
	{
	}

	[Token(Token = "0x6000477")]
	public void Fade(float duration, T v)
	{
	}

	[Token(Token = "0x6000478")]
	public void FadeZero(float duration)
	{
	}

	[Token(Token = "0x6000479")]
	public void Fade(int fadeID)
	{
	}

	[Token(Token = "0x600047A")]
	public void FadeIn(float duration)
	{
	}

	[Token(Token = "0x600047B")]
	protected abstract void AnimateProperty(Material m, T newValue, float duration);

	[Token(Token = "0x600047C")]
	protected abstract void SetProperty(Material m, T newValue);

	[Token(Token = "0x600047D")]
	protected abstract T GetProperty(Material m);

	[Token(Token = "0x600047E")]
	protected abstract T ZeroValue();

	[Token(Token = "0x600047F")]
	protected abstract PropertyAnimation<T> GetFade(int fadeID);

	[Token(Token = "0x6000480")]
	protected AnimateMaterialsProperty()
	{
	}
}
[Token(Token = "0x20000D6")]
public class AnimateSeedTarget : MonoBehaviour
{
	[Token(Token = "0x40004D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3 startPos;

	[Token(Token = "0x40004D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float radius;

	[Token(Token = "0x40004D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float speed;

	[Token(Token = "0x6000482")]
	[Address(RVA = "0xCAEDAC", Offset = "0xCAEDAC", VA = "0xCAEDAC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000483")]
	[Address(RVA = "0xCAEDDC", Offset = "0xCAEDDC", VA = "0xCAEDDC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000484")]
	[Address(RVA = "0xCAEEA0", Offset = "0xCAEEA0", VA = "0xCAEEA0")]
	public AnimateSeedTarget()
	{
	}
}
[Token(Token = "0x20000D7")]
public class AnimationRandomBranch : StateMachineBehaviour
{
	[Token(Token = "0x40004D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int animationCount;

	[Token(Token = "0x40004D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string param;

	[Token(Token = "0x40004D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string cycleParam;

	[Token(Token = "0x40004D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float minTime;

	[Token(Token = "0x40004DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float maxTime;

	[Token(Token = "0x40004DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float time;

	[Token(Token = "0x6000485")]
	[Address(RVA = "0xCAEEA8", Offset = "0xCAEEA8", VA = "0xCAEEA8", Slot = "4")]
	public override void OnStateEnter(Animator animator, AnimatorStateInfo animatorStateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000486")]
	[Address(RVA = "0xCAEF18", Offset = "0xCAEF18", VA = "0xCAEF18", Slot = "5")]
	public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000487")]
	[Address(RVA = "0xCAEF98", Offset = "0xCAEF98", VA = "0xCAEF98")]
	public AnimationRandomBranch()
	{
	}
}
[Token(Token = "0x20000D8")]
[ExecuteInEditMode]
public class Arrange : MonoBehaviour
{
	[Token(Token = "0x40004DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float radius;

	[Token(Token = "0x40004DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool apply;

	[Token(Token = "0x6000488")]
	[Address(RVA = "0xCAEFA0", Offset = "0xCAEFA0", VA = "0xCAEFA0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000489")]
	[Address(RVA = "0xCAEFA4", Offset = "0xCAEFA4", VA = "0xCAEFA4")]
	private void Update()
	{
	}

	[Token(Token = "0x600048A")]
	[Address(RVA = "0xCAF100", Offset = "0xCAF100", VA = "0xCAF100")]
	public Arrange()
	{
	}
}
[Token(Token = "0x20000D9")]
public class AsyncCapture : MonoBehaviour
{
	[Token(Token = "0x40004DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Queue<AsyncGPUReadbackRequest> _requests;

	[Token(Token = "0x40004DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material photoMat;

	[Token(Token = "0x40004E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Texture2D photoTex;

	[Token(Token = "0x40004E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent photoTaken;

	[Token(Token = "0x40004E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Camera camera;

	[Token(Token = "0x600048B")]
	[Address(RVA = "0xCAF108", Offset = "0xCAF108", VA = "0xCAF108")]
	private void Start()
	{
	}

	[Token(Token = "0x600048C")]
	[Address(RVA = "0xCAF158", Offset = "0xCAF158", VA = "0xCAF158")]
	private void Update()
	{
	}

	[Token(Token = "0x600048D")]
	[Address(RVA = "0xCAF4B8", Offset = "0xCAF4B8", VA = "0xCAF4B8")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x600048E")]
	[Address(RVA = "0xCAF2EC", Offset = "0xCAF2EC", VA = "0xCAF2EC")]
	private void SaveBitmap(NativeArray<Color32> buffer, int width, int height)
	{
	}

	[Token(Token = "0x600048F")]
	[Address(RVA = "0xCAF60C", Offset = "0xCAF60C", VA = "0xCAF60C")]
	public AsyncCapture()
	{
	}
}
[Token(Token = "0x20000DA")]
public class AudioSourceControl : MonoBehaviour
{
	[Token(Token = "0x40004E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private AudioSource src;

	[Token(Token = "0x40004E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float fadeSpeed;

	[Token(Token = "0x40004E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool speedIsDuration;

	[Token(Token = "0x6000490")]
	[Address(RVA = "0xCAF688", Offset = "0xCAF688", VA = "0xCAF688")]
	private void GetSrc()
	{
	}

	[Token(Token = "0x6000491")]
	[Address(RVA = "0xCAF714", Offset = "0xCAF714", VA = "0xCAF714")]
	public void SetFadeSpeed(float fadeSpeed)
	{
	}

	[Token(Token = "0x6000492")]
	[Address(RVA = "0xCAF71C", Offset = "0xCAF71C", VA = "0xCAF71C")]
	public void FadeInAtTime(float time)
	{
	}

	[Token(Token = "0x6000493")]
	[Address(RVA = "0xCAF844", Offset = "0xCAF844", VA = "0xCAF844")]
	public void FadeOut()
	{
	}

	[Token(Token = "0x6000494")]
	[Address(RVA = "0xCAF914", Offset = "0xCAF914", VA = "0xCAF914")]
	public void FadeOutAndDestroy()
	{
	}

	[Token(Token = "0x6000495")]
	[Address(RVA = "0xCAF75C", Offset = "0xCAF75C", VA = "0xCAF75C")]
	public void FadeIn(float volume)
	{
	}

	[Token(Token = "0x6000496")]
	[Address(RVA = "0xCAFA48", Offset = "0xCAFA48", VA = "0xCAFA48")]
	public void Fade(float volume)
	{
	}

	[Token(Token = "0x6000497")]
	[Address(RVA = "0xCAF8F4", Offset = "0xCAF8F4", VA = "0xCAF8F4")]
	private float GetFadeDuration(float volumeChange)
	{
		return default(float);
	}

	[Token(Token = "0x6000498")]
	[Address(RVA = "0xCAFB04", Offset = "0xCAFB04", VA = "0xCAFB04")]
	private void DoDestroy()
	{
	}

	[Token(Token = "0x6000499")]
	[Address(RVA = "0xCAFB70", Offset = "0xCAFB70", VA = "0xCAFB70")]
	public AudioSourceControl()
	{
	}
}
[Token(Token = "0x20000DB")]
public class BODAudio : MonoBehaviour
{
	[Token(Token = "0x600049A")]
	[Address(RVA = "0xCAFB80", Offset = "0xCAFB80", VA = "0xCAFB80")]
	private void Start()
	{
	}

	[Token(Token = "0x600049B")]
	[Address(RVA = "0xCAFB84", Offset = "0xCAFB84", VA = "0xCAFB84")]
	private void Update()
	{
	}

	[Token(Token = "0x600049C")]
	[Address(RVA = "0xCAFB88", Offset = "0xCAFB88", VA = "0xCAFB88")]
	public BODAudio()
	{
	}
}
[Token(Token = "0x20000DC")]
public class SoundTag : MonoBehaviour
{
	[Token(Token = "0x40004E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string sonicTag;

	[Token(Token = "0x600049D")]
	[Address(RVA = "0xCAFB90", Offset = "0xCAFB90", VA = "0xCAFB90")]
	public SoundTag()
	{
	}
}
[Token(Token = "0x20000DD")]
public class BakeSkinnedPose : MonoBehaviour
{
	[Token(Token = "0x40004E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject find;

	[Token(Token = "0x40004E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<SkinnedMeshRenderer> objectsToBake;

	[Token(Token = "0x40004E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<MeshRenderer> otherMeshes;

	[Token(Token = "0x40004EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Mesh lastBakedMesh;

	[Token(Token = "0x600049E")]
	[Address(RVA = "0xCAFB98", Offset = "0xCAFB98", VA = "0xCAFB98")]
	public Mesh BakeMeshes()
	{
		return null;
	}

	[Token(Token = "0x600049F")]
	[Address(RVA = "0xCB0730", Offset = "0xCB0730", VA = "0xCB0730")]
	public BakeSkinnedPose()
	{
	}
}
[Token(Token = "0x20000DE")]
public class ExplosionForceWave : MonoBehaviour
{
	[Token(Token = "0x40004EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Rigidbody[] explodeBodies;

	[Token(Token = "0x40004EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float force;

	[Token(Token = "0x40004ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float speed;

	[Token(Token = "0x40004EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float startZ;

	[Token(Token = "0x40004EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float minTimeScale;

	[Token(Token = "0x40004F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float fumikoMinTimeScale;

	[Token(Token = "0x40004F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Vector3 waveDirection;

	[Token(Token = "0x40004F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float totalTime;

	[Token(Token = "0x40004F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UnityEvent Complete;

	[Token(Token = "0x40004F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float endZ;

	[Token(Token = "0x40004F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float p;

	[Token(Token = "0x40004F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float t;

	[Token(Token = "0x40004F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Animator fumikoAnimation;

	[Token(Token = "0x60004A0")]
	[Address(RVA = "0xCB0738", Offset = "0xCB0738", VA = "0xCB0738")]
	private void Start()
	{
	}

	[Token(Token = "0x60004A1")]
	[Address(RVA = "0xCB08A0", Offset = "0xCB08A0", VA = "0xCB08A0")]
	private void Update()
	{
	}

	[Token(Token = "0x60004A2")]
	[Address(RVA = "0xCB0D00", Offset = "0xCB0D00", VA = "0xCB0D00")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60004A3")]
	[Address(RVA = "0xCB0D0C", Offset = "0xCB0D0C", VA = "0xCB0D0C")]
	public ExplosionForceWave()
	{
	}
}
[Token(Token = "0x20000DF")]
public class ExplosionForceWaveAlternate : MonoBehaviour
{
	[Token(Token = "0x40004F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Rigidbody[] explodeBodies;

	[Token(Token = "0x40004F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float force;

	[Token(Token = "0x40004FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float speed;

	[Token(Token = "0x40004FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float startZ;

	[Token(Token = "0x40004FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float minTimeScale;

	[Token(Token = "0x40004FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float totalTime;

	[Token(Token = "0x40004FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEvent Complete;

	[Token(Token = "0x40004FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float endZ;

	[Token(Token = "0x4000500")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float p;

	[Token(Token = "0x4000501")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float t;

	[Token(Token = "0x60004A4")]
	[Address(RVA = "0xCB0D80", Offset = "0xCB0D80", VA = "0xCB0D80")]
	private void Start()
	{
	}

	[Token(Token = "0x60004A5")]
	[Address(RVA = "0xCB0D8C", Offset = "0xCB0D8C", VA = "0xCB0D8C")]
	private void Update()
	{
	}

	[Token(Token = "0x60004A6")]
	[Address(RVA = "0xCB11E0", Offset = "0xCB11E0", VA = "0xCB11E0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60004A7")]
	[Address(RVA = "0xCB11EC", Offset = "0xCB11EC", VA = "0xCB11EC")]
	public ExplosionForceWaveAlternate()
	{
	}
}
[Token(Token = "0x20000E0")]
[ExecuteInEditMode]
public class SetMaterials : MonoBehaviour
{
	[Token(Token = "0x4000502")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material[] mat;

	[Token(Token = "0x4000503")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool update;

	[Token(Token = "0x4000504")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float V_FR_DisplaceAmount;

	[Token(Token = "0x4000505")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float V_FR_RotateSpeed;

	[Token(Token = "0x4000506")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float V_FR_FragmentsScale;

	[Token(Token = "0x4000507")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float V_FR_DistanceToActivator;

	[Token(Token = "0x4000508")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float V_FR_RandomizeFragmentum;

	[Token(Token = "0x4000509")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float V_FR_RandomizeFragmentsScale;

	[Token(Token = "0x400050A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float V_FR_RandomizeDistanceToActivator;

	[Token(Token = "0x400050B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float V_FR_RandomizeInitialRotation;

	[Token(Token = "0x400050C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float V_FR_RandomizeRotationSpeed;

	[Token(Token = "0x400050D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float V_FR_RandomizeRotationTimeOffset;

	[Token(Token = "0x400050E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float V_FR_RandomizeDisplaceDirection;

	[Token(Token = "0x400050F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float V_FR_RandomizeDisplaceAmount;

	[Token(Token = "0x60004A8")]
	[Address(RVA = "0xCB1200", Offset = "0xCB1200", VA = "0xCB1200")]
	private void Start()
	{
	}

	[Token(Token = "0x60004A9")]
	[Address(RVA = "0xCB1204", Offset = "0xCB1204", VA = "0xCB1204")]
	private void Update()
	{
	}

	[Token(Token = "0x60004AA")]
	[Address(RVA = "0xCB1480", Offset = "0xCB1480", VA = "0xCB1480")]
	public SetMaterials()
	{
	}
}
[Token(Token = "0x20000E1")]
public class BookPodium : MonoBehaviour
{
	[Token(Token = "0x4000510")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RotatePage previousPage;

	[Token(Token = "0x4000511")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public RotatePage secondPage;

	[Token(Token = "0x4000512")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public RotatePage rotatePage;

	[Token(Token = "0x4000513")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public RotatePage nextPage;

	[Token(Token = "0x4000514")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public LinearMappingToAnimation cover_lm;

	[Token(Token = "0x4000515")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public LinearMapping[] page_lm;

	[Token(Token = "0x4000516")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public MenuBook activeBook;

	[Token(Token = "0x4000517")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float startAngle;

	[Token(Token = "0x4000518")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public int page_idx;

	[Token(Token = "0x4000519")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public InteractiveMaterialHint nextHint;

	[Token(Token = "0x400051A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public int openPage;

	[Token(Token = "0x60004AB")]
	[Address(RVA = "0xCB1488", Offset = "0xCB1488", VA = "0xCB1488")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004AC")]
	[Address(RVA = "0xCB1564", Offset = "0xCB1564", VA = "0xCB1564")]
	public void ShowHint()
	{
	}

	[Token(Token = "0x60004AD")]
	[Address(RVA = "0xCB162C", Offset = "0xCB162C", VA = "0xCB162C")]
	public void HideHint()
	{
	}

	[Token(Token = "0x60004AE")]
	[Address(RVA = "0xCB16F4", Offset = "0xCB16F4", VA = "0xCB16F4")]
	private void Start()
	{
	}

	[Token(Token = "0x60004AF")]
	[Address(RVA = "0xCB17E4", Offset = "0xCB17E4", VA = "0xCB17E4")]
	public void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60004B0")]
	[Address(RVA = "0xCB1858", Offset = "0xCB1858", VA = "0xCB1858")]
	public LinearMapping ActivePage()
	{
		return null;
	}

	[Token(Token = "0x60004B1")]
	[Address(RVA = "0xCB188C", Offset = "0xCB188C", VA = "0xCB188C")]
	public void BookOpen()
	{
	}

	[Token(Token = "0x60004B2")]
	[Address(RVA = "0xCB2020", Offset = "0xCB2020", VA = "0xCB2020")]
	public void PageOpen()
	{
	}

	[Token(Token = "0x60004B3")]
	[Address(RVA = "0xCB1A94", Offset = "0xCB1A94", VA = "0xCB1A94")]
	public void PageClosed()
	{
	}

	[Token(Token = "0x60004B4")]
	[Address(RVA = "0xCB2790", Offset = "0xCB2790", VA = "0xCB2790")]
	public void BookClosed()
	{
	}

	[Token(Token = "0x60004B5")]
	[Address(RVA = "0xCB2948", Offset = "0xCB2948", VA = "0xCB2948")]
	public void SetBook(MenuBook book)
	{
	}

	[Token(Token = "0x60004B6")]
	[Address(RVA = "0xCB2A88", Offset = "0xCB2A88", VA = "0xCB2A88")]
	private void Update()
	{
	}

	[Token(Token = "0x60004B7")]
	[Address(RVA = "0xCB2A8C", Offset = "0xCB2A8C", VA = "0xCB2A8C")]
	public BookPodium()
	{
	}
}
[Token(Token = "0x20000E2")]
public class BuildTestHelper : MonoBehaviour
{
	[Token(Token = "0x400051B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool isBuildSystem;

	[Token(Token = "0x60004B8")]
	[Address(RVA = "0xCB2A9C", Offset = "0xCB2A9C", VA = "0xCB2A9C")]
	private void Start()
	{
	}

	[Token(Token = "0x60004B9")]
	[Address(RVA = "0xCB2D6C", Offset = "0xCB2D6C", VA = "0xCB2D6C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60004BA")]
	[Address(RVA = "0xCB2C1C", Offset = "0xCB2C1C", VA = "0xCB2C1C")]
	public void StopBuildServer()
	{
	}

	[Token(Token = "0x60004BB")]
	[Address(RVA = "0xCB2D7C", Offset = "0xCB2D7C", VA = "0xCB2D7C")]
	public void StartBuildServer()
	{
	}

	[Token(Token = "0x60004BC")]
	[Address(RVA = "0xCB2ECC", Offset = "0xCB2ECC", VA = "0xCB2ECC")]
	private void Update()
	{
	}

	[Token(Token = "0x60004BD")]
	[Address(RVA = "0xCB2ED0", Offset = "0xCB2ED0", VA = "0xCB2ED0")]
	public BuildTestHelper()
	{
	}
}
[Token(Token = "0x20000E3")]
public class ChangeHierarchy : MonoBehaviour
{
	[Token(Token = "0x400051C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform onEnable;

	[Token(Token = "0x400051D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool clearParent;

	[Token(Token = "0x400051E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool dontDestroy;

	[Token(Token = "0x60004BE")]
	[Address(RVA = "0xCB2ED8", Offset = "0xCB2ED8", VA = "0xCB2ED8")]
	private void Start()
	{
	}

	[Token(Token = "0x60004BF")]
	[Address(RVA = "0xCB2FA8", Offset = "0xCB2FA8", VA = "0xCB2FA8")]
	public ChangeHierarchy()
	{
	}
}
[Token(Token = "0x20000E4")]
public class ChangeMaterial : MonoBehaviour
{
	[Token(Token = "0x400051F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Renderer[] renderers;

	[Token(Token = "0x4000520")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material material;

	[Token(Token = "0x60004C0")]
	[Address(RVA = "0xCB2FB0", Offset = "0xCB2FB0", VA = "0xCB2FB0")]
	private void Start()
	{
	}

	[Token(Token = "0x60004C1")]
	[Address(RVA = "0xCB2FB4", Offset = "0xCB2FB4", VA = "0xCB2FB4")]
	public void ChangeToMaterial()
	{
	}

	[Token(Token = "0x60004C2")]
	[Address(RVA = "0xCB301C", Offset = "0xCB301C", VA = "0xCB301C")]
	private void Update()
	{
	}

	[Token(Token = "0x60004C3")]
	[Address(RVA = "0xCB3020", Offset = "0xCB3020", VA = "0xCB3020")]
	public ChangeMaterial()
	{
	}
}
[Token(Token = "0x20000E5")]
[RequireComponent(typeof(Light))]
public class ChangeSpotAngle : MonoBehaviour
{
	[Token(Token = "0x4000521")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Light light;

	[Token(Token = "0x4000522")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float lightAngle;

	[Token(Token = "0x4000523")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float duration;

	[Token(Token = "0x60004C4")]
	[Address(RVA = "0xCB3028", Offset = "0xCB3028", VA = "0xCB3028")]
	public void ChangeAngle()
	{
	}

	[Token(Token = "0x60004C5")]
	[Address(RVA = "0xCB3158", Offset = "0xCB3158", VA = "0xCB3158")]
	public ChangeSpotAngle()
	{
	}
}
[Token(Token = "0x20000E6")]
[RequireComponent(typeof(Light))]
public class ChangeSpotIntensity : MonoBehaviour
{
	[Token(Token = "0x4000524")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Light light;

	[Token(Token = "0x4000525")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float intensity;

	[Token(Token = "0x4000526")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float duration;

	[Token(Token = "0x60004C8")]
	[Address(RVA = "0xCB3198", Offset = "0xCB3198", VA = "0xCB3198")]
	public void ChangeIntensity()
	{
	}

	[Token(Token = "0x60004C9")]
	[Address(RVA = "0xCB32C8", Offset = "0xCB32C8", VA = "0xCB32C8")]
	public ChangeSpotIntensity()
	{
	}
}
[Token(Token = "0x20000E7")]
public class ChangeSpotTarget : MonoBehaviour
{
	[Token(Token = "0x4000527")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LookAt lookAt;

	[Token(Token = "0x4000528")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform target;

	[Token(Token = "0x60004CC")]
	[Address(RVA = "0xCB3308", Offset = "0xCB3308", VA = "0xCB3308")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60004CD")]
	[Address(RVA = "0xCB3334", Offset = "0xCB3334", VA = "0xCB3334")]
	public ChangeSpotTarget()
	{
	}
}
[Token(Token = "0x20000E8")]
public class ArrivedAtWaypointListener : MonoBehaviour
{
	[Token(Token = "0x4000529")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SCENE_CHARACTER character;

	[Token(Token = "0x400052A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent Arrived;

	[Token(Token = "0x60004CE")]
	[Address(RVA = "0xCB333C", Offset = "0xCB333C", VA = "0xCB333C")]
	public void ArrivedAtWaypoint(SCENE_CHARACTER character)
	{
	}

	[Token(Token = "0x60004CF")]
	[Address(RVA = "0xCB3370", Offset = "0xCB3370", VA = "0xCB3370")]
	public ArrivedAtWaypointListener()
	{
	}
}
[Token(Token = "0x20000E9")]
public class CharacterCollisions : MonoBehaviour
{
	[Token(Token = "0x60004D0")]
	[Address(RVA = "0xCB3378", Offset = "0xCB3378", VA = "0xCB3378")]
	private void OnControllerColliderHit(ControllerColliderHit hit)
	{
	}

	[Token(Token = "0x60004D1")]
	[Address(RVA = "0xCB33A0", Offset = "0xCB33A0", VA = "0xCB33A0")]
	public CharacterCollisions()
	{
	}
}
[Token(Token = "0x20000EA")]
public class CharacterLoopHelper : MonoBehaviour
{
	[Token(Token = "0x400052B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private string animationName;

	[Token(Token = "0x400052C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 startPos;

	[Token(Token = "0x400052D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Quaternion startRot;

	[Token(Token = "0x400052E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Animator anim;

	[Token(Token = "0x60004D2")]
	[Address(RVA = "0xCB33A8", Offset = "0xCB33A8", VA = "0xCB33A8")]
	public void CancelLoop()
	{
	}

	[Token(Token = "0x60004D3")]
	[Address(RVA = "0xCB3458", Offset = "0xCB3458", VA = "0xCB3458")]
	public void BeginAnimation(string name, Vector3 startPos, Quaternion startRot)
	{
	}

	[Token(Token = "0x60004D4")]
	[Address(RVA = "0xCB350C", Offset = "0xCB350C", VA = "0xCB350C")]
	public void LoopStart(string animationName)
	{
	}

	[Token(Token = "0x60004D5")]
	[Address(RVA = "0xCB366C", Offset = "0xCB366C", VA = "0xCB366C")]
	public CharacterLoopHelper()
	{
	}
}
[Token(Token = "0x20000EB")]
public class CharacterRecorderHelper : MonoBehaviour
{
	[Token(Token = "0x400052F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationClip clip;

	[Token(Token = "0x4000530")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool record;

	[Token(Token = "0x4000531")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool recordOnStart;

	[Token(Token = "0x60004D6")]
	[Address(RVA = "0xCB36BC", Offset = "0xCB36BC", VA = "0xCB36BC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60004D7")]
	[Address(RVA = "0xCB3734", Offset = "0xCB3734", VA = "0xCB3734")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60004D8")]
	[Address(RVA = "0xCB3730", Offset = "0xCB3730", VA = "0xCB3730")]
	public void Record(AnimationClip clip)
	{
	}

	[Token(Token = "0x60004D9")]
	[Address(RVA = "0xCB3748", Offset = "0xCB3748", VA = "0xCB3748")]
	public void Stop()
	{
	}

	[Token(Token = "0x60004DA")]
	[Address(RVA = "0xCB3744", Offset = "0xCB3744", VA = "0xCB3744")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60004DB")]
	[Address(RVA = "0xCB37EC", Offset = "0xCB37EC", VA = "0xCB37EC")]
	private void Update()
	{
	}

	[Token(Token = "0x60004DC")]
	[Address(RVA = "0xCB37F0", Offset = "0xCB37F0", VA = "0xCB37F0")]
	public CharacterRecorderHelper()
	{
	}
}
[Token(Token = "0x20000EC")]
public class CharacterRockFade : MonoBehaviour
{
	[Token(Token = "0x4000532")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Material fadeMaterial;

	[Token(Token = "0x4000533")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Material sharedMaterial;

	[Token(Token = "0x4000534")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private MeshRenderer renderer;

	[Token(Token = "0x60004DD")]
	[Address(RVA = "0xCB37F8", Offset = "0xCB37F8", VA = "0xCB37F8")]
	private void Start()
	{
	}

	[Token(Token = "0x60004DE")]
	[Address(RVA = "0xCB38B4", Offset = "0xCB38B4", VA = "0xCB38B4")]
	private void FadeIn()
	{
	}

	[Token(Token = "0x60004DF")]
	[Address(RVA = "0xCB39D4", Offset = "0xCB39D4", VA = "0xCB39D4")]
	private void FadeInComplete()
	{
	}

	[Token(Token = "0x60004E0")]
	[Address(RVA = "0xCB39F8", Offset = "0xCB39F8", VA = "0xCB39F8")]
	public void FadeOut(float time)
	{
	}

	[Token(Token = "0x60004E1")]
	[Address(RVA = "0xCB3A70", Offset = "0xCB3A70", VA = "0xCB3A70")]
	public void FadeOut()
	{
	}

	[Token(Token = "0x60004E2")]
	[Address(RVA = "0xCB3B90", Offset = "0xCB3B90", VA = "0xCB3B90")]
	private void FadeOutComplete()
	{
	}

	[Token(Token = "0x60004E3")]
	[Address(RVA = "0xCB3C00", Offset = "0xCB3C00", VA = "0xCB3C00")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60004E4")]
	[Address(RVA = "0xCB3C08", Offset = "0xCB3C08", VA = "0xCB3C08")]
	public CharacterRockFade()
	{
	}
}
[Token(Token = "0x20000ED")]
public class FollowCharacter : MonoBehaviour
{
	[Token(Token = "0x4000535")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SCENE_CHARACTER characterID;

	[Token(Token = "0x4000536")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool EveryFrame;

	[Token(Token = "0x4000537")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform target;

	[Token(Token = "0x4000538")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool followRotation;

	[Token(Token = "0x4000539")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform character;

	[Token(Token = "0x60004E5")]
	[Address(RVA = "0xCB3C10", Offset = "0xCB3C10", VA = "0xCB3C10")]
	private void Start()
	{
	}

	[Token(Token = "0x60004E6")]
	[Address(RVA = "0xCB3D6C", Offset = "0xCB3D6C", VA = "0xCB3D6C")]
	private void Update()
	{
	}

	[Token(Token = "0x60004E7")]
	[Address(RVA = "0xCB3CF8", Offset = "0xCB3CF8", VA = "0xCB3CF8")]
	private void Follow()
	{
	}

	[Token(Token = "0x60004E8")]
	[Address(RVA = "0xCB3D7C", Offset = "0xCB3D7C", VA = "0xCB3D7C")]
	public FollowCharacter()
	{
	}
}
[Token(Token = "0x20000EE")]
public class JapaneseOfficeRandall : MonoBehaviour
{
	[Token(Token = "0x400053A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3 position;

	[Token(Token = "0x60004E9")]
	[Address(RVA = "0xCB3D8C", Offset = "0xCB3D8C", VA = "0xCB3D8C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004EA")]
	[Address(RVA = "0xCB3DF4", Offset = "0xCB3DF4", VA = "0xCB3DF4")]
	public void RandallEnterTatamiRoom()
	{
	}

	[Token(Token = "0x60004EB")]
	[Address(RVA = "0xCB3E60", Offset = "0xCB3E60", VA = "0xCB3E60")]
	public void RandallHide()
	{
	}

	[Token(Token = "0x60004EC")]
	[Address(RVA = "0xCB3F28", Offset = "0xCB3F28", VA = "0xCB3F28")]
	private void Start()
	{
	}

	[Token(Token = "0x60004ED")]
	[Address(RVA = "0xCB3F2C", Offset = "0xCB3F2C", VA = "0xCB3F2C")]
	private void Update()
	{
	}

	[Token(Token = "0x60004EE")]
	[Address(RVA = "0xCB3F30", Offset = "0xCB3F30", VA = "0xCB3F30")]
	public JapaneseOfficeRandall()
	{
	}
}
[Token(Token = "0x20000EF")]
public class Leaning : StateMachineBehaviour
{
	[Token(Token = "0x60004EF")]
	[Address(RVA = "0xCB3F38", Offset = "0xCB3F38", VA = "0xCB3F38", Slot = "6")]
	public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60004F0")]
	[Address(RVA = "0xCB3F90", Offset = "0xCB3F90", VA = "0xCB3F90")]
	public Leaning()
	{
	}
}
[Token(Token = "0x20000F0")]
public class MakeWishDad : MonoBehaviour
{
	[Token(Token = "0x400053B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3 position;

	[Token(Token = "0x60004F1")]
	[Address(RVA = "0xCB3F98", Offset = "0xCB3F98", VA = "0xCB3F98")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004F2")]
	[Address(RVA = "0xCB4000", Offset = "0xCB4000", VA = "0xCB4000")]
	private void Start()
	{
	}

	[Token(Token = "0x60004F3")]
	[Address(RVA = "0xCB4004", Offset = "0xCB4004", VA = "0xCB4004")]
	public void DadEnter()
	{
	}

	[Token(Token = "0x60004F4")]
	[Address(RVA = "0xCB4070", Offset = "0xCB4070", VA = "0xCB4070")]
	public void DadHide()
	{
	}

	[Token(Token = "0x60004F5")]
	[Address(RVA = "0xCB4094", Offset = "0xCB4094", VA = "0xCB4094")]
	private void Update()
	{
	}

	[Token(Token = "0x60004F6")]
	[Address(RVA = "0xCB4098", Offset = "0xCB4098", VA = "0xCB4098")]
	public MakeWishDad()
	{
	}
}
[Token(Token = "0x20000F1")]
public class MakeWishRandall : MonoBehaviour
{
	[Token(Token = "0x400053C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3 position;

	[Token(Token = "0x400053D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform placePaperRandall;

	[Token(Token = "0x400053E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float placePaperDuration;

	[Token(Token = "0x60004F7")]
	[Address(RVA = "0xCB40A0", Offset = "0xCB40A0", VA = "0xCB40A0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004F8")]
	[Address(RVA = "0xCB4108", Offset = "0xCB4108", VA = "0xCB4108")]
	public void RandallEnterMakeWish()
	{
	}

	[Token(Token = "0x60004F9")]
	[Address(RVA = "0xCB4214", Offset = "0xCB4214", VA = "0xCB4214")]
	public void RandallHide()
	{
	}

	[Token(Token = "0x60004FA")]
	[Address(RVA = "0xCB42DC", Offset = "0xCB42DC", VA = "0xCB42DC")]
	private void Start()
	{
	}

	[Token(Token = "0x60004FB")]
	[Address(RVA = "0xCB42E0", Offset = "0xCB42E0", VA = "0xCB42E0")]
	private void Update()
	{
	}

	[Token(Token = "0x60004FC")]
	[Address(RVA = "0xCB42E4", Offset = "0xCB42E4", VA = "0xCB42E4")]
	public MakeWishRandall()
	{
	}
}
[Token(Token = "0x20000F2")]
public class MakeWishYonezo : MonoBehaviour
{
	[Token(Token = "0x400053F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3 position;

	[Token(Token = "0x4000540")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform dropCraneYonezo;

	[Token(Token = "0x4000541")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float dropCraneDuration;

	[Token(Token = "0x60004FD")]
	[Address(RVA = "0xCB42EC", Offset = "0xCB42EC", VA = "0xCB42EC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004FE")]
	[Address(RVA = "0xCB4354", Offset = "0xCB4354", VA = "0xCB4354")]
	public void YonezoEnter()
	{
	}

	[Token(Token = "0x60004FF")]
	[Address(RVA = "0xCB43C0", Offset = "0xCB43C0", VA = "0xCB43C0")]
	public void YonezoDropCrane()
	{
	}

	[Token(Token = "0x6000500")]
	[Address(RVA = "0xCB44E8", Offset = "0xCB44E8", VA = "0xCB44E8")]
	public void YonezoHide()
	{
	}

	[Token(Token = "0x6000501")]
	[Address(RVA = "0xCB450C", Offset = "0xCB450C", VA = "0xCB450C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000502")]
	[Address(RVA = "0xCB4510", Offset = "0xCB4510", VA = "0xCB4510")]
	private void Update()
	{
	}

	[Token(Token = "0x6000503")]
	[Address(RVA = "0xCB4514", Offset = "0xCB4514", VA = "0xCB4514")]
	public MakeWishYonezo()
	{
	}
}
[Token(Token = "0x20000F3")]
public class SeatedCharacter : StateMachineBehaviour
{
	[Token(Token = "0x6000504")]
	[Address(RVA = "0xCB451C", Offset = "0xCB451C", VA = "0xCB451C", Slot = "6")]
	public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000505")]
	[Address(RVA = "0xCB4574", Offset = "0xCB4574", VA = "0xCB4574")]
	public SeatedCharacter()
	{
	}
}
[Token(Token = "0x20000F4")]
public class SetCharacterEnabled : MonoBehaviour
{
	[Token(Token = "0x4000542")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SCENE_CHARACTER characterID;

	[Token(Token = "0x4000543")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool isEnabled;

	[Token(Token = "0x4000544")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float delay;

	[Token(Token = "0x6000506")]
	[Address(RVA = "0xCB457C", Offset = "0xCB457C", VA = "0xCB457C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000507")]
	[Address(RVA = "0xCB45EC", Offset = "0xCB45EC", VA = "0xCB45EC")]
	private void SetEnabled()
	{
	}

	[Token(Token = "0x6000508")]
	[Address(RVA = "0xCB46B8", Offset = "0xCB46B8", VA = "0xCB46B8")]
	public SetCharacterEnabled()
	{
	}
}
[Token(Token = "0x20000F5")]
public class CheckFramePerspective : MonoBehaviour
{
	[Token(Token = "0x4000545")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private PhotoFrame frame;

	[Token(Token = "0x4000546")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Camera cam;

	[Token(Token = "0x4000547")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Collider[] targets;

	[Token(Token = "0x4000548")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Ray[] rays;

	[Token(Token = "0x4000549")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<Collider> targets_list;

	[Token(Token = "0x400054A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool perspective;

	[Token(Token = "0x400054B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject debugger;

	[Token(Token = "0x400054C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public UnityEvent takePhoto;

	[Token(Token = "0x6000509")]
	[Address(RVA = "0xCB46C0", Offset = "0xCB46C0", VA = "0xCB46C0")]
	private void Start()
	{
	}

	[Token(Token = "0x600050A")]
	[Address(RVA = "0xCB47D4", Offset = "0xCB47D4", VA = "0xCB47D4")]
	private void Update()
	{
	}

	[Token(Token = "0x600050B")]
	[Address(RVA = "0xCB4B60", Offset = "0xCB4B60", VA = "0xCB4B60")]
	public CheckFramePerspective()
	{
	}
}
[Token(Token = "0x20000F6")]
public class CheckObjectInView : MonoBehaviour
{
	[Token(Token = "0x400054D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent GotPerspective;

	[Token(Token = "0x400054E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Renderer[] obj;

	[Token(Token = "0x400054F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float maxAngle;

	[Token(Token = "0x4000550")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float lookDuration;

	[Token(Token = "0x4000551")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform cam;

	[Token(Token = "0x4000552")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool inView;

	[Token(Token = "0x4000553")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float angle;

	[Token(Token = "0x4000554")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool looking;

	[Token(Token = "0x4000555")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float lookingStartTime;

	[Token(Token = "0x4000556")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool invoked;

	[Token(Token = "0x600050C")]
	[Address(RVA = "0xCB5C08", Offset = "0xCB5C08", VA = "0xCB5C08")]
	private void Start()
	{
	}

	[Token(Token = "0x600050D")]
	[Address(RVA = "0xCB5C34", Offset = "0xCB5C34", VA = "0xCB5C34")]
	private void Update()
	{
	}

	[Token(Token = "0x600050E")]
	[Address(RVA = "0xCB5C38", Offset = "0xCB5C38", VA = "0xCB5C38")]
	private void CheckObject()
	{
	}

	[Token(Token = "0x600050F")]
	[Address(RVA = "0xCB5F08", Offset = "0xCB5F08", VA = "0xCB5F08")]
	public CheckObjectInView()
	{
	}
}
[Token(Token = "0x20000F7")]
public class CheckPerspective : MonoBehaviour
{
	[Token(Token = "0x4000557")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Camera cam;

	[Token(Token = "0x4000558")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Collider[] targets;

	[Token(Token = "0x4000559")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Ray[] rays;

	[Token(Token = "0x400055A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<Collider> targets_list;

	[Token(Token = "0x400055B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool perspective;

	[Token(Token = "0x400055C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject debugger;

	[Token(Token = "0x400055D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UnityEvent gotPerspective;

	[Token(Token = "0x6000510")]
	[Address(RVA = "0xCB5F10", Offset = "0xCB5F10", VA = "0xCB5F10")]
	private void Start()
	{
	}

	[Token(Token = "0x6000511")]
	[Address(RVA = "0xCB6000", Offset = "0xCB6000", VA = "0xCB6000")]
	private void Update()
	{
	}

	[Token(Token = "0x6000512")]
	[Address(RVA = "0xCB6360", Offset = "0xCB6360", VA = "0xCB6360")]
	public CheckPerspective()
	{
	}
}
[Token(Token = "0x20000F8")]
public class CheckPerspectiveCone : MonoBehaviour
{
	[Token(Token = "0x400055E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform headPose;

	[Token(Token = "0x400055F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float radius;

	[Token(Token = "0x4000560")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float coneAngle;

	[Token(Token = "0x4000561")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float minLookAngle;

	[Token(Token = "0x4000562")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent GotPerspective;

	[Token(Token = "0x4000563")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool gotPerspective;

	[Token(Token = "0x4000564")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Transform cam;

	[Token(Token = "0x6000513")]
	[Address(RVA = "0xCB6408", Offset = "0xCB6408", VA = "0xCB6408")]
	private void Start()
	{
	}

	[Token(Token = "0x6000514")]
	[Address(RVA = "0xCB6434", Offset = "0xCB6434", VA = "0xCB6434")]
	private void Update()
	{
	}

	[Token(Token = "0x6000515")]
	[Address(RVA = "0xCB688C", Offset = "0xCB688C", VA = "0xCB688C")]
	public CheckPerspectiveCone()
	{
	}
}
[Token(Token = "0x20000F9")]
public class CinematicCameraRig : MonoBehaviour
{
	[Token(Token = "0x4000565")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public XRNode trackedObject;

	[Token(Token = "0x4000566")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject cameraObject;

	[Token(Token = "0x4000567")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int numTrackers;

	[Token(Token = "0x6000516")]
	[Address(RVA = "0xCB68A8", Offset = "0xCB68A8", VA = "0xCB68A8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000517")]
	[Address(RVA = "0xCB69D8", Offset = "0xCB69D8", VA = "0xCB69D8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000518")]
	[Address(RVA = "0xCB6B68", Offset = "0xCB6B68", VA = "0xCB6B68")]
	public CinematicCameraRig()
	{
	}
}
[Token(Token = "0x20000FA")]
public class ClothLine : MonoBehaviour
{
	[Token(Token = "0x4000568")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float scaleZ;

	[Token(Token = "0x4000569")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject pegs;

	[Token(Token = "0x400056A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform pegTransform;

	[Token(Token = "0x400056B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool isAwake;

	[Token(Token = "0x6000519")]
	[Address(RVA = "0xCB6B70", Offset = "0xCB6B70", VA = "0xCB6B70")]
	private void Awake()
	{
	}

	[Token(Token = "0x600051A")]
	[Address(RVA = "0xCB6C18", Offset = "0xCB6C18", VA = "0xCB6C18")]
	public void ScaleOut(float delay = 0f, [Optional] TweenCallback onComplete)
	{
	}

	[Token(Token = "0x600051B")]
	[Address(RVA = "0xCB6DE8", Offset = "0xCB6DE8", VA = "0xCB6DE8")]
	public void ScaleIn([Optional] TweenCallback onComplete)
	{
	}

	[Token(Token = "0x600051C")]
	[Address(RVA = "0xCB6FA0", Offset = "0xCB6FA0", VA = "0xCB6FA0")]
	public void ShowPegs()
	{
	}

	[Token(Token = "0x600051D")]
	[Address(RVA = "0xCB7180", Offset = "0xCB7180", VA = "0xCB7180")]
	public ClothLine()
	{
	}
}
[Token(Token = "0x20000FD")]
[ExecuteInEditMode]
public class copyMaterials : MonoBehaviour
{
	[Token(Token = "0x400056F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Renderer renderFrom;

	[Token(Token = "0x4000570")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Renderer renderTo;

	[Token(Token = "0x4000571")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Material m;

	[Token(Token = "0x4000572")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool update;

	[Token(Token = "0x6000522")]
	[Address(RVA = "0xCB71EC", Offset = "0xCB71EC", VA = "0xCB71EC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000523")]
	[Address(RVA = "0xCB71F0", Offset = "0xCB71F0", VA = "0xCB71F0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000524")]
	[Address(RVA = "0xCB7290", Offset = "0xCB7290", VA = "0xCB7290")]
	public copyMaterials()
	{
	}
}
[Token(Token = "0x20000FE")]
public class CoyoteProximity : MonoBehaviour
{
	[Token(Token = "0x4000573")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float minDistance;

	[Token(Token = "0x4000574")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Light[] light;

	[Token(Token = "0x4000575")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float[] intensity;

	[Token(Token = "0x4000576")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public VolumetricLightBeam[] lightBeam;

	[Token(Token = "0x4000577")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float[] lightBeamIntensity;

	[Token(Token = "0x4000578")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Renderer coyoteRenderer;

	[Token(Token = "0x4000579")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Material emissionMaterial;

	[Token(Token = "0x400057A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Transform player;

	[Token(Token = "0x400057B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float distance;

	[Token(Token = "0x400057C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float percent;

	[Token(Token = "0x6000525")]
	[Address(RVA = "0xCB7298", Offset = "0xCB7298", VA = "0xCB7298")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000526")]
	[Address(RVA = "0xCB72F4", Offset = "0xCB72F4", VA = "0xCB72F4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000527")]
	[Address(RVA = "0xCB73B0", Offset = "0xCB73B0", VA = "0xCB73B0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000528")]
	[Address(RVA = "0xCB75D0", Offset = "0xCB75D0", VA = "0xCB75D0")]
	public CoyoteProximity()
	{
	}
}
[Token(Token = "0x20000FF")]
public class DestroySibling : MonoBehaviour
{
	[Token(Token = "0x400057D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] sibling;

	[Token(Token = "0x6000529")]
	[Address(RVA = "0xCB75D8", Offset = "0xCB75D8", VA = "0xCB75D8")]
	private void Start()
	{
	}

	[Token(Token = "0x600052A")]
	[Address(RVA = "0xCB75DC", Offset = "0xCB75DC", VA = "0xCB75DC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600052B")]
	[Address(RVA = "0xCB7684", Offset = "0xCB7684", VA = "0xCB7684")]
	private void Update()
	{
	}

	[Token(Token = "0x600052C")]
	[Address(RVA = "0xCB7688", Offset = "0xCB7688", VA = "0xCB7688")]
	public DestroySibling()
	{
	}
}
[Token(Token = "0x2000100")]
public class DevelopPhoto : MonoBehaviour
{
	[Token(Token = "0x400057E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float developDuration;

	[Token(Token = "0x400057F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Ease developEase;

	[Token(Token = "0x4000580")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Material photoMaterial;

	[Token(Token = "0x600052D")]
	[Address(RVA = "0xCB7690", Offset = "0xCB7690", VA = "0xCB7690")]
	private void Awake()
	{
	}

	[Token(Token = "0x600052E")]
	[Address(RVA = "0xCB7774", Offset = "0xCB7774", VA = "0xCB7774")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600052F")]
	[Address(RVA = "0xCB77F0", Offset = "0xCB77F0", VA = "0xCB77F0")]
	public DevelopPhoto()
	{
	}
}
[Token(Token = "0x2000101")]
public static class VolumetricLightBeamShortcutExtensions
{
	[Token(Token = "0x6000530")]
	[Address(RVA = "0xCB7804", Offset = "0xCB7804", VA = "0xCB7804")]
	public static Tweener DOIntensity(this VolumetricLightBeam target, float endValue, float duration)
	{
		return null;
	}
}
[Token(Token = "0x2000103")]
public class FadeEmissionObjects : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000104")]
	public struct FadeDef
	{
		[Token(Token = "0x4000589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Color color;

		[Token(Token = "0x400058A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float duration;
	}

	[Token(Token = "0x4000582")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Renderer[] renderers;

	[Token(Token = "0x4000583")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string property;

	[Token(Token = "0x4000584")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public FadeDef[] fades;

	[Token(Token = "0x4000585")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool setBlackOnAwake;

	[Token(Token = "0x4000586")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<Material> newMaterials;

	[Token(Token = "0x4000587")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<Material> oldMaterials;

	[Token(Token = "0x4000588")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<Material> mats;

	[Token(Token = "0x6000534")]
	[Address(RVA = "0xCB79A4", Offset = "0xCB79A4", VA = "0xCB79A4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000535")]
	[Address(RVA = "0xCB7D70", Offset = "0xCB7D70", VA = "0xCB7D70")]
	public void Fade(float duration, Color c)
	{
	}

	[Token(Token = "0x6000536")]
	[Address(RVA = "0xCB7EA4", Offset = "0xCB7EA4", VA = "0xCB7EA4")]
	public void FadeBlack(float duration)
	{
	}

	[Token(Token = "0x6000537")]
	[Address(RVA = "0xCB7EB8", Offset = "0xCB7EB8", VA = "0xCB7EB8")]
	public void Fade(int fadeID)
	{
	}

	[Token(Token = "0x6000538")]
	[Address(RVA = "0xCB7EF4", Offset = "0xCB7EF4", VA = "0xCB7EF4")]
	public void FadeIn(float duration)
	{
	}

	[Token(Token = "0x6000539")]
	[Address(RVA = "0xCB8054", Offset = "0xCB8054", VA = "0xCB8054")]
	public FadeEmissionObjects()
	{
	}
}
[Token(Token = "0x2000105")]
public class FadeLight : MonoBehaviour
{
	[Token(Token = "0x400058B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Light[] light;

	[Token(Token = "0x400058C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float[] intensity;

	[Token(Token = "0x400058D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public VolumetricLightBeam[] lightBeam;

	[Token(Token = "0x400058E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float[] lightBeamIntensity;

	[Token(Token = "0x400058F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float duration;

	[Token(Token = "0x4000590")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool fadeOut;

	[Token(Token = "0x600053B")]
	[Address(RVA = "0xCB8180", Offset = "0xCB8180", VA = "0xCB8180")]
	private void Awake()
	{
	}

	[Token(Token = "0x600053C")]
	[Address(RVA = "0xCB83B8", Offset = "0xCB83B8", VA = "0xCB83B8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600053D")]
	[Address(RVA = "0xCB849C", Offset = "0xCB849C", VA = "0xCB849C")]
	public void FadeIn(float duration)
	{
	}

	[Token(Token = "0x600053E")]
	[Address(RVA = "0xCB8580", Offset = "0xCB8580", VA = "0xCB8580")]
	private void Start()
	{
	}

	[Token(Token = "0x600053F")]
	[Address(RVA = "0xCB8584", Offset = "0xCB8584", VA = "0xCB8584")]
	private void Update()
	{
	}

	[Token(Token = "0x6000540")]
	[Address(RVA = "0xCB8588", Offset = "0xCB8588", VA = "0xCB8588")]
	public FadeLight()
	{
	}
}
[Token(Token = "0x2000106")]
public class FadeManyMaterials : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000107")]
	public class FadeTextures
	{
		[Token(Token = "0x4000595")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int sharedMaterialIdx;

		[Token(Token = "0x4000596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Texture[] tex;

		[Token(Token = "0x4000597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float maxTime;

		[Token(Token = "0x4000598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float minTime;

		[Token(Token = "0x4000599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int inc;

		[Token(Token = "0x400059A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool fadeUp;

		[Token(Token = "0x400059B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int idx;

		[Token(Token = "0x400059C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int t1;

		[Token(Token = "0x400059D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int t2;

		[Token(Token = "0x6000545")]
		[Address(RVA = "0xCB8CA4", Offset = "0xCB8CA4", VA = "0xCB8CA4")]
		public FadeTextures()
		{
		}
	}

	[Token(Token = "0x4000591")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Renderer renderer;

	[Token(Token = "0x4000592")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public FadeTextures[] fadeTex;

	[Token(Token = "0x4000593")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Material[] mat;

	[Token(Token = "0x4000594")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Shader shader;

	[Token(Token = "0x6000541")]
	[Address(RVA = "0xCB8598", Offset = "0xCB8598", VA = "0xCB8598")]
	private void Start()
	{
	}

	[Token(Token = "0x6000542")]
	[Address(RVA = "0xCB89D8", Offset = "0xCB89D8", VA = "0xCB89D8")]
	public void FadeAgain(int fadeTexIdx)
	{
	}

	[Token(Token = "0x6000543")]
	[Address(RVA = "0xCB8C98", Offset = "0xCB8C98", VA = "0xCB8C98")]
	private void Update()
	{
	}

	[Token(Token = "0x6000544")]
	[Address(RVA = "0xCB8C9C", Offset = "0xCB8C9C", VA = "0xCB8C9C")]
	public FadeManyMaterials()
	{
	}
}
[Token(Token = "0x200010A")]
public class FadeMaterials : MonoBehaviour
{
	[Token(Token = "0x40005A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material[] materials;

	[Token(Token = "0x40005A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string propertyName;

	[Token(Token = "0x40005A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float duration;

	[Token(Token = "0x40005A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Color[] originalColors;

	[Token(Token = "0x40005A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float startAlpha;

	[Token(Token = "0x600054B")]
	[Address(RVA = "0xCB8D24", Offset = "0xCB8D24", VA = "0xCB8D24")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600054C")]
	[Address(RVA = "0xCB8EA4", Offset = "0xCB8EA4", VA = "0xCB8EA4")]
	public FadeMaterials()
	{
	}
}
[Token(Token = "0x200010B")]
public class FadeOutEmissive : MonoBehaviour
{
	[Token(Token = "0x40005A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float duration;

	[Token(Token = "0x600054D")]
	[Address(RVA = "0xCB8EFC", Offset = "0xCB8EFC", VA = "0xCB8EFC")]
	private void Start()
	{
	}

	[Token(Token = "0x600054E")]
	[Address(RVA = "0xCB8F00", Offset = "0xCB8F00", VA = "0xCB8F00")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600054F")]
	[Address(RVA = "0xCB9008", Offset = "0xCB9008", VA = "0xCB9008")]
	private void Update()
	{
	}

	[Token(Token = "0x6000550")]
	[Address(RVA = "0xCB900C", Offset = "0xCB900C", VA = "0xCB900C")]
	public FadeOutEmissive()
	{
	}
}
[Token(Token = "0x200010C")]
public class FadeOutOnDisable : MonoBehaviour
{
	[Token(Token = "0x40005A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public FadeLight fadeLight;

	[Token(Token = "0x40005A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float duration;

	[Token(Token = "0x40005AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float delay;

	[Token(Token = "0x40005AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool disableGameObject;

	[Token(Token = "0x40005AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Ease ease;

	[Token(Token = "0x6000551")]
	[Address(RVA = "0xCB9014", Offset = "0xCB9014", VA = "0xCB9014")]
	private void Start()
	{
	}

	[Token(Token = "0x6000552")]
	[Address(RVA = "0xCB9018", Offset = "0xCB9018", VA = "0xCB9018")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000553")]
	[Address(RVA = "0xCB91EC", Offset = "0xCB91EC", VA = "0xCB91EC")]
	public void DisableGameObject()
	{
	}

	[Token(Token = "0x6000554")]
	[Address(RVA = "0xCB9218", Offset = "0xCB9218", VA = "0xCB9218")]
	private void Update()
	{
	}

	[Token(Token = "0x6000555")]
	[Address(RVA = "0xCB921C", Offset = "0xCB921C", VA = "0xCB921C")]
	public FadeOutOnDisable()
	{
	}
}
[Token(Token = "0x200010D")]
public class FadeRendererMaterials : MonoBehaviour
{
	[Token(Token = "0x40005AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Renderer renderer;

	[Token(Token = "0x40005AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int sharedMaterialIdx;

	[Token(Token = "0x40005AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Shader shader;

	[Token(Token = "0x40005B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Texture[] tex;

	[Token(Token = "0x40005B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float maxTime;

	[Token(Token = "0x40005B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float minTime;

	[Token(Token = "0x40005B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int inc;

	[Token(Token = "0x40005B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Material[] mat;

	[Token(Token = "0x40005B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int idx;

	[Token(Token = "0x40005B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int tCount;

	[Token(Token = "0x40005B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool fadeUp;

	[Token(Token = "0x40005B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public int t1;

	[Token(Token = "0x40005B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public int t2;

	[Token(Token = "0x6000556")]
	[Address(RVA = "0xCB9284", Offset = "0xCB9284", VA = "0xCB9284")]
	private void Start()
	{
	}

	[Token(Token = "0x6000557")]
	[Address(RVA = "0xCB95F4", Offset = "0xCB95F4", VA = "0xCB95F4")]
	public void FadeAgain()
	{
	}

	[Token(Token = "0x6000558")]
	[Address(RVA = "0xCB9824", Offset = "0xCB9824", VA = "0xCB9824")]
	private void Update()
	{
	}

	[Token(Token = "0x6000559")]
	[Address(RVA = "0xCB9828", Offset = "0xCB9828", VA = "0xCB9828")]
	public FadeRendererMaterials()
	{
	}
}
[Token(Token = "0x200010E")]
public class FlipOnEnable : MonoBehaviour
{
	[Token(Token = "0x40005BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 flipRotation;

	[Token(Token = "0x600055A")]
	[Address(RVA = "0xCB9848", Offset = "0xCB9848", VA = "0xCB9848")]
	private void Start()
	{
	}

	[Token(Token = "0x600055B")]
	[Address(RVA = "0xCB984C", Offset = "0xCB984C", VA = "0xCB984C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600055C")]
	[Address(RVA = "0xCB9878", Offset = "0xCB9878", VA = "0xCB9878")]
	private void Update()
	{
	}

	[Token(Token = "0x600055D")]
	[Address(RVA = "0xCB987C", Offset = "0xCB987C", VA = "0xCB987C")]
	public FlipOnEnable()
	{
	}
}
[Token(Token = "0x200010F")]
[ExecuteInEditMode]
public class SaveLightingFog : MonoBehaviour
{
	[Token(Token = "0x40005BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ScriptableFog scriptableFog;

	[Token(Token = "0x40005BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool update;

	[Token(Token = "0x600055E")]
	[Address(RVA = "0xCB9890", Offset = "0xCB9890", VA = "0xCB9890")]
	private void Start()
	{
	}

	[Token(Token = "0x600055F")]
	[Address(RVA = "0xCB9894", Offset = "0xCB9894", VA = "0xCB9894")]
	private void Update()
	{
	}

	[Token(Token = "0x6000560")]
	[Address(RVA = "0xCB9954", Offset = "0xCB9954", VA = "0xCB9954")]
	public SaveLightingFog()
	{
	}
}
[Token(Token = "0x2000110")]
[CreateAssetMenu(menuName = "ScriptableFog")]
public class ScriptableFog : ScriptableObject
{
	[Token(Token = "0x40005BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool fog;

	[Token(Token = "0x40005BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Color fogColor;

	[Token(Token = "0x40005BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float fogDensity;

	[Token(Token = "0x40005C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float fogEndDistance;

	[Token(Token = "0x40005C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public FogMode fogMode;

	[Token(Token = "0x40005C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float fogStartDistance;

	[Token(Token = "0x6000561")]
	[Address(RVA = "0xCB995C", Offset = "0xCB995C", VA = "0xCB995C")]
	public ScriptableFog()
	{
	}
}
[Token(Token = "0x2000111")]
[CreateAssetMenu]
public class GlowingObjectsList : ScriptableObject
{
	[Token(Token = "0x40005C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static GlowingObjectsList defaultList;

	[Token(Token = "0x40005C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<Renderer> list;

	[Token(Token = "0x170000B2")]
	public static GlowingObjectsList DefaultList
	{
		[Token(Token = "0x6000562")]
		[Address(RVA = "0xCB9964", Offset = "0xCB9964", VA = "0xCB9964")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000563")]
	[Address(RVA = "0xCB9A28", Offset = "0xCB9A28", VA = "0xCB9A28")]
	public GlowingObjectsList()
	{
	}
}
[Token(Token = "0x2000112")]
public class GlowLight : MonoBehaviour
{
	[Token(Token = "0x40005C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float maxIntensity;

	[Token(Token = "0x40005C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float minIntensity;

	[Token(Token = "0x40005C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float interval;

	[Token(Token = "0x40005C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Light light;

	[Token(Token = "0x40005C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool glow;

	[Token(Token = "0x6000564")]
	[Address(RVA = "0xCB9AA4", Offset = "0xCB9AA4", VA = "0xCB9AA4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000565")]
	[Address(RVA = "0xCB9B0C", Offset = "0xCB9B0C", VA = "0xCB9B0C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000566")]
	[Address(RVA = "0xCB9B10", Offset = "0xCB9B10", VA = "0xCB9B10")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000567")]
	[Address(RVA = "0xCB9B14", Offset = "0xCB9B14", VA = "0xCB9B14")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000568")]
	[Address(RVA = "0xCB9BB0", Offset = "0xCB9BB0", VA = "0xCB9BB0")]
	public void Glow()
	{
	}

	[Token(Token = "0x6000569")]
	[Address(RVA = "0xCB9BB8", Offset = "0xCB9BB8", VA = "0xCB9BB8")]
	public void Glow(bool activate = false)
	{
	}

	[Token(Token = "0x600056A")]
	[Address(RVA = "0xCB9D38", Offset = "0xCB9D38", VA = "0xCB9D38")]
	private void Update()
	{
	}

	[Token(Token = "0x600056B")]
	[Address(RVA = "0xCB9D3C", Offset = "0xCB9D3C", VA = "0xCB9D3C")]
	public GlowLight()
	{
	}
}
[Token(Token = "0x2000113")]
public class DeveloperPlayer : MonoBehaviour
{
	[Token(Token = "0x40005CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 offsetPos;

	[Token(Token = "0x40005CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector3 offsetRot;

	[Token(Token = "0x600056C")]
	[Address(RVA = "0xCB9D44", Offset = "0xCB9D44", VA = "0xCB9D44")]
	private void Start()
	{
	}

	[Token(Token = "0x600056D")]
	[Address(RVA = "0xCB9D48", Offset = "0xCB9D48", VA = "0xCB9D48")]
	private void Update()
	{
	}

	[Token(Token = "0x600056E")]
	[Address(RVA = "0xCB9D4C", Offset = "0xCB9D4C", VA = "0xCB9D4C")]
	public DeveloperPlayer()
	{
	}
}
[Token(Token = "0x2000114")]
[CreateAssetMenu(menuName = "ScriptableObjects/FloaterData")]
public class FloaterData : SingletonScriptableObject<FloaterData>
{
	[Token(Token = "0x40005CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float driftAmount;

	[Token(Token = "0x40005CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float driftSpeed;

	[Token(Token = "0x40005CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float phaseMagnitude;

	[Token(Token = "0x40005CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float frequency;

	[Token(Token = "0x40005D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float damping;

	[Token(Token = "0x40005D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float blowMultiplier;

	[Token(Token = "0x600056F")]
	[Address(RVA = "0xCB9D54", Offset = "0xCB9D54", VA = "0xCB9D54")]
	public FloaterData()
	{
	}
}
[Token(Token = "0x2000115")]
public static class Helper
{
	[Token(Token = "0x6000570")]
	public static T GetCopyOf<T>(this Component comp, T other) where T : Component
	{
		return null;
	}

	[Token(Token = "0x6000571")]
	[Address(RVA = "0xCB9D9C", Offset = "0xCB9D9C", VA = "0xCB9D9C")]
	public static void CopyClassValues(Component sourceComp, Component targetComp)
	{
	}

	[Token(Token = "0x6000572")]
	public static T AddComponent<T>(this GameObject go, T toAdd) where T : Component
	{
		return null;
	}
}
[Token(Token = "0x2000116")]
[CreateAssetMenu(menuName = "ScriptableObjects/InteractiveHintData")]
public class InteractiveHintData : SingletonScriptableObject<InteractiveHintData>
{
	[Token(Token = "0x40005D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject particleSystem;

	[Token(Token = "0x40005D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject particleTarget;

	[Token(Token = "0x6000573")]
	[Address(RVA = "0xCBA0B8", Offset = "0xCBA0B8", VA = "0xCBA0B8")]
	public InteractiveHintData()
	{
	}
}
[Token(Token = "0x2000117")]
public class ModifyLightSettings : MonoBehaviour
{
	[Token(Token = "0x40005D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float SpotlightFadeStart;

	[Token(Token = "0x40005D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float SpotlightFadeTotal;

	[Token(Token = "0x6000574")]
	[Address(RVA = "0xCBA100", Offset = "0xCBA100", VA = "0xCBA100")]
	private void Start()
	{
	}

	[Token(Token = "0x6000575")]
	[Address(RVA = "0xCBA104", Offset = "0xCBA104", VA = "0xCBA104")]
	private void Update()
	{
	}

	[Token(Token = "0x6000576")]
	[Address(RVA = "0xCBA108", Offset = "0xCBA108", VA = "0xCBA108")]
	public ModifyLightSettings()
	{
	}
}
[Token(Token = "0x2000118")]
public abstract class SingletonScriptableObject<T> : ScriptableObject where T : ScriptableObject
{
	[Token(Token = "0x40005D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static T _instance;

	[Token(Token = "0x170000B3")]
	public static T Instance
	{
		[Token(Token = "0x6000577")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000578")]
	protected SingletonScriptableObject()
	{
	}
}
[Token(Token = "0x2000119")]
public class TriggerEvent : MonoBehaviour
{
	[Token(Token = "0x40005D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string requireTag;

	[Token(Token = "0x40005D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Collider specificCollider;

	[Token(Token = "0x40005D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent TriggerEnter;

	[Token(Token = "0x40005DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent TriggerExit;

	[Token(Token = "0x40005DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEvent TriggerStay;

	[Token(Token = "0x6000579")]
	[Address(RVA = "0xCBA11C", Offset = "0xCBA11C", VA = "0xCBA11C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600057A")]
	[Address(RVA = "0xCBA220", Offset = "0xCBA220", VA = "0xCBA220")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600057B")]
	[Address(RVA = "0xCBA250", Offset = "0xCBA250", VA = "0xCBA250")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x600057C")]
	[Address(RVA = "0xCBA14C", Offset = "0xCBA14C", VA = "0xCBA14C")]
	private bool CheckShouldTrigger(Collider other)
	{
		return default(bool);
	}

	[Token(Token = "0x600057D")]
	[Address(RVA = "0xCBA280", Offset = "0xCBA280", VA = "0xCBA280")]
	public TriggerEvent()
	{
	}
}
[Token(Token = "0x200011A")]
public class AdvanceScene : MonoBehaviour
{
	[Token(Token = "0x200011B")]
	[CompilerGenerated]
	private sealed class <ChangeSceneOnTimer>d__16 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AdvanceScene <>4__this;

		[Token(Token = "0x170000B4")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600058B")]
			[Address(RVA = "0xCBAC98", Offset = "0xCBAC98", VA = "0xCBAC98", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600058D")]
			[Address(RVA = "0xCBACE0", Offset = "0xCBACE0", VA = "0xCBACE0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000588")]
		[Address(RVA = "0xCBABB4", Offset = "0xCBABB4", VA = "0xCBABB4")]
		[DebuggerHidden]
		public <ChangeSceneOnTimer>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x6000589")]
		[Address(RVA = "0xCBABE4", Offset = "0xCBABE4", VA = "0xCBABE4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600058A")]
		[Address(RVA = "0xCBABE8", Offset = "0xCBABE8", VA = "0xCBABE8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600058C")]
		[Address(RVA = "0xCBACA0", Offset = "0xCBACA0", VA = "0xCBACA0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40005DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float advanceDelay;

	[Token(Token = "0x40005DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float timeDelay;

	[Token(Token = "0x40005DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SCENE_CHARACTER character_id;

	[Token(Token = "0x40005DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string advanceWhenAnimNameContains;

	[Token(Token = "0x40005E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Animator animator;

	[Token(Token = "0x40005E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private AnimatorStateInfo info;

	[Token(Token = "0x40005E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private AnimatorClipInfo[] clipInfo;

	[Token(Token = "0x40005E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Tween audioFadeAdvanceTween;

	[Token(Token = "0x600057E")]
	[Address(RVA = "0xCBA288", Offset = "0xCBA288", VA = "0xCBA288")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600057F")]
	[Address(RVA = "0xCBA3A8", Offset = "0xCBA3A8", VA = "0xCBA3A8")]
	public void Advance()
	{
	}

	[Token(Token = "0x6000580")]
	[Address(RVA = "0xCBA418", Offset = "0xCBA418", VA = "0xCBA418")]
	private void Next()
	{
	}

	[Token(Token = "0x6000581")]
	[Address(RVA = "0xCBA494", Offset = "0xCBA494", VA = "0xCBA494")]
	public void GrabAndAudioAdvance()
	{
	}

	[Token(Token = "0x6000582")]
	[Address(RVA = "0xCBA69C", Offset = "0xCBA69C", VA = "0xCBA69C")]
	public void CheckAnimatorAdvance()
	{
	}

	[Token(Token = "0x6000583")]
	[Address(RVA = "0xCBA8DC", Offset = "0xCBA8DC", VA = "0xCBA8DC")]
	public void AdvanceIfState(int state)
	{
	}

	[Token(Token = "0x6000584")]
	[Address(RVA = "0xCBA958", Offset = "0xCBA958", VA = "0xCBA958")]
	public void GrabAndAudioAdvanceIfState(int state)
	{
	}

	[Token(Token = "0x6000585")]
	[Address(RVA = "0xCBAA00", Offset = "0xCBAA00", VA = "0xCBAA00")]
	public void FadeAudioAndAdvanceIfState(int state)
	{
	}

	[Token(Token = "0x6000586")]
	[Address(RVA = "0xCBAB4C", Offset = "0xCBAB4C", VA = "0xCBAB4C")]
	[IteratorStateMachine(typeof(<ChangeSceneOnTimer>d__16))]
	private IEnumerator ChangeSceneOnTimer()
	{
		return null;
	}

	[Token(Token = "0x6000587")]
	[Address(RVA = "0xCBABDC", Offset = "0xCBABDC", VA = "0xCBABDC")]
	public AdvanceScene()
	{
	}
}
[Token(Token = "0x200011C")]
public class BlurShader : MonoBehaviour
{
	[Token(Token = "0x40005E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Shader shader;

	[Token(Token = "0x40005E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Material mat;

	[Token(Token = "0x40005E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Space(15f)]
	public float radius;

	[Token(Token = "0x40005EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Coroutine fadeRoutine;

	[Token(Token = "0x600058E")]
	[Address(RVA = "0xCBACE8", Offset = "0xCBACE8", VA = "0xCBACE8")]
	private void Start()
	{
	}

	[Token(Token = "0x600058F")]
	[Address(RVA = "0xCBAD50", Offset = "0xCBAD50", VA = "0xCBAD50")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x6000590")]
	[Address(RVA = "0xCBADF4", Offset = "0xCBADF4", VA = "0xCBADF4")]
	public BlurShader()
	{
	}
}
[Token(Token = "0x200011D")]
public class CharacterBindTimelineTrack : MonoBehaviour
{
	[Token(Token = "0x40005EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SCENE_CHARACTER characterID;

	[Token(Token = "0x40005EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string trackName;

	[Token(Token = "0x40005ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public PlayableDirector director;

	[Token(Token = "0x40005EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float delay;

	[Token(Token = "0x6000591")]
	[Address(RVA = "0xCBAE08", Offset = "0xCBAE08", VA = "0xCBAE08")]
	private void Start()
	{
	}

	[Token(Token = "0x6000592")]
	[Address(RVA = "0xCBAE70", Offset = "0xCBAE70", VA = "0xCBAE70")]
	private void BindCharacter()
	{
	}

	[Token(Token = "0x6000593")]
	[Address(RVA = "0xCBAFBC", Offset = "0xCBAFBC", VA = "0xCBAFBC")]
	public void Unbind()
	{
	}

	[Token(Token = "0x6000594")]
	[Address(RVA = "0xCBB100", Offset = "0xCBB100", VA = "0xCBB100")]
	public CharacterBindTimelineTrack()
	{
	}
}
[Token(Token = "0x200011E")]
public class CharacterDrop : MonoBehaviour
{
	[Token(Token = "0x200011F")]
	[CompilerGenerated]
	private sealed class <DoDrop>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CharacterDrop <>4__this;

		[Token(Token = "0x170000B6")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600059D")]
			[Address(RVA = "0xCBB6A4", Offset = "0xCBB6A4", VA = "0xCBB6A4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600059F")]
			[Address(RVA = "0xCBB6EC", Offset = "0xCBB6EC", VA = "0xCBB6EC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600059A")]
		[Address(RVA = "0xCBB484", Offset = "0xCBB484", VA = "0xCBB484")]
		[DebuggerHidden]
		public <DoDrop>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x600059B")]
		[Address(RVA = "0xCBB4B4", Offset = "0xCBB4B4", VA = "0xCBB4B4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600059C")]
		[Address(RVA = "0xCBB4B8", Offset = "0xCBB4B8", VA = "0xCBB4B8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600059E")]
		[Address(RVA = "0xCBB6AC", Offset = "0xCBB6AC", VA = "0xCBB6AC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40005EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Collider dropZone;

	[Token(Token = "0x40005F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float delay;

	[Token(Token = "0x40005F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Rigidbody setNonKinematic;

	[Token(Token = "0x40005F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform parent;

	[Token(Token = "0x40005F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float minDistance;

	[Token(Token = "0x40005F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool toss;

	[Token(Token = "0x40005F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float tossVelocityY;

	[Token(Token = "0x40005F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private bool dropped;

	[Token(Token = "0x40005F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UnityEvent droppedEvent;

	[Token(Token = "0x6000595")]
	[Address(RVA = "0xCBB108", Offset = "0xCBB108", VA = "0xCBB108")]
	private void Update()
	{
	}

	[Token(Token = "0x6000596")]
	[Address(RVA = "0xCBB394", Offset = "0xCBB394", VA = "0xCBB394")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000597")]
	[Address(RVA = "0xCBB33C", Offset = "0xCBB33C", VA = "0xCBB33C")]
	private void Drop()
	{
	}

	[Token(Token = "0x6000598")]
	[Address(RVA = "0xCBB41C", Offset = "0xCBB41C", VA = "0xCBB41C")]
	[IteratorStateMachine(typeof(<DoDrop>d__12))]
	private IEnumerator DoDrop()
	{
		return null;
	}

	[Token(Token = "0x6000599")]
	[Address(RVA = "0xCBB4AC", Offset = "0xCBB4AC", VA = "0xCBB4AC")]
	public CharacterDrop()
	{
	}
}
[Token(Token = "0x2000120")]
public class DropArea : MonoBehaviour
{
	[Token(Token = "0x60005A0")]
	[Address(RVA = "0xCBB6F4", Offset = "0xCBB6F4", VA = "0xCBB6F4")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60005A1")]
	[Address(RVA = "0xCBB6F8", Offset = "0xCBB6F8", VA = "0xCBB6F8")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60005A2")]
	[Address(RVA = "0xCBB6FC", Offset = "0xCBB6FC", VA = "0xCBB6FC")]
	public DropArea()
	{
	}
}
[Token(Token = "0x2000121")]
public class EventMessenger : MonoBehaviour
{
	[Token(Token = "0x40005FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<string, UnityEvent> eventDictionary;

	[Token(Token = "0x40005FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static EventMessenger eventMessenger;

	[Token(Token = "0x170000B8")]
	public static EventMessenger instance
	{
		[Token(Token = "0x60005A3")]
		[Address(RVA = "0xCBB704", Offset = "0xCBB704", VA = "0xCBB704")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60005A4")]
	[Address(RVA = "0xCBB8B0", Offset = "0xCBB8B0", VA = "0xCBB8B0")]
	private void Init()
	{
	}

	[Token(Token = "0x60005A5")]
	[Address(RVA = "0xCBB92C", Offset = "0xCBB92C", VA = "0xCBB92C")]
	public static void StartListening(string eventName, UnityAction listener)
	{
	}

	[Token(Token = "0x60005A6")]
	[Address(RVA = "0xCBBA30", Offset = "0xCBBA30", VA = "0xCBBA30")]
	public static void StopListening(string eventName, UnityAction listener)
	{
	}

	[Token(Token = "0x60005A7")]
	[Address(RVA = "0xCBBB20", Offset = "0xCBBB20", VA = "0xCBBB20")]
	public static void TriggerEvent(string eventName)
	{
	}

	[Token(Token = "0x60005A8")]
	[Address(RVA = "0xCBBB9C", Offset = "0xCBBB9C", VA = "0xCBBB9C")]
	public EventMessenger()
	{
	}
}
[Token(Token = "0x2000122")]
public class NumberCountEvent : MonoBehaviour
{
	[Token(Token = "0x40005FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int triggerCount;

	[Token(Token = "0x40005FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent triggerEvent;

	[Token(Token = "0x40005FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent numberIncreased;

	[Token(Token = "0x4000600")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int currentCount;

	[Token(Token = "0x4000601")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private bool triggered;

	[Token(Token = "0x60005A9")]
	[Address(RVA = "0xCBBBA4", Offset = "0xCBBBA4", VA = "0xCBBBA4")]
	public void Add()
	{
	}

	[Token(Token = "0x60005AA")]
	[Address(RVA = "0xCBBC04", Offset = "0xCBBC04", VA = "0xCBBC04")]
	public void Subtract()
	{
	}

	[Token(Token = "0x60005AB")]
	[Address(RVA = "0xCBBC14", Offset = "0xCBBC14", VA = "0xCBBC14")]
	public NumberCountEvent()
	{
	}
}
[Token(Token = "0x2000123")]
public class PlaceObject : MonoBehaviour
{
	[Token(Token = "0x60005AC")]
	[Address(RVA = "0xCBBC98", Offset = "0xCBBC98", VA = "0xCBBC98")]
	private void Start()
	{
	}

	[Token(Token = "0x60005AD")]
	[Address(RVA = "0xCBBC9C", Offset = "0xCBBC9C", VA = "0xCBBC9C")]
	private void Update()
	{
	}

	[Token(Token = "0x60005AE")]
	[Address(RVA = "0xCBBCA0", Offset = "0xCBBCA0", VA = "0xCBBCA0")]
	public PlaceObject()
	{
	}
}
[Token(Token = "0x2000124")]
public class PouringTea : MonoBehaviour
{
	[Token(Token = "0x4000602")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float pourThreshold;

	[Token(Token = "0x4000603")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleSystem particle;

	[Token(Token = "0x4000604")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem.EmissionModule emission;

	[Token(Token = "0x60005AF")]
	[Address(RVA = "0xCBBCA8", Offset = "0xCBBCA8", VA = "0xCBBCA8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005B0")]
	[Address(RVA = "0xCBBD0C", Offset = "0xCBBD0C", VA = "0xCBBD0C")]
	private void Update()
	{
	}

	[Token(Token = "0x60005B1")]
	[Address(RVA = "0xCBBDB0", Offset = "0xCBBDB0", VA = "0xCBBDB0")]
	public PouringTea()
	{
	}
}
[Token(Token = "0x2000125")]
public class BanCollisions : MonoBehaviour
{
	[Token(Token = "0x4000605")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<Collider> banList;

	[Token(Token = "0x60005B2")]
	[Address(RVA = "0xCBBDB8", Offset = "0xCBBDB8", VA = "0xCBBDB8")]
	private void Start()
	{
	}

	[Token(Token = "0x60005B3")]
	[Address(RVA = "0xCBBE80", Offset = "0xCBBE80", VA = "0xCBBE80")]
	public BanCollisions()
	{
	}
}
[Token(Token = "0x2000126")]
public class BlackoutShader : MonoBehaviour
{
	[Token(Token = "0x2000127")]
	[CompilerGenerated]
	private sealed class <FadeTo>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400060A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400060B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400060C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BlackoutShader <>4__this;

		[Token(Token = "0x400060D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float value;

		[Token(Token = "0x400060E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <lp>5__2;

		[Token(Token = "0x400060F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <stFade>5__3;

		[Token(Token = "0x170000B9")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005BB")]
			[Address(RVA = "0xCBC184", Offset = "0xCBC184", VA = "0xCBC184", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005BD")]
			[Address(RVA = "0xCBC1CC", Offset = "0xCBC1CC", VA = "0xCBC1CC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005B8")]
		[Address(RVA = "0xCBC020", Offset = "0xCBC020", VA = "0xCBC020")]
		[DebuggerHidden]
		public <FadeTo>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x60005B9")]
		[Address(RVA = "0xCBC058", Offset = "0xCBC058", VA = "0xCBC058", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005BA")]
		[Address(RVA = "0xCBC05C", Offset = "0xCBC05C", VA = "0xCBC05C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005BC")]
		[Address(RVA = "0xCBC18C", Offset = "0xCBC18C", VA = "0xCBC18C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000606")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Space(15f)]
	public float fade;

	[Token(Token = "0x4000607")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float fadeSpeed;

	[Token(Token = "0x4000608")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Coroutine fadeRoutine;

	[Token(Token = "0x4000609")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Volume volume;

	[Token(Token = "0x60005B4")]
	[Address(RVA = "0xCBBEFC", Offset = "0xCBBEFC", VA = "0xCBBEFC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005B5")]
	[Address(RVA = "0xCBBF58", Offset = "0xCBBF58", VA = "0xCBBF58")]
	public void ChangeFade(float value)
	{
	}

	[Token(Token = "0x60005B6")]
	[Address(RVA = "0xCBBFA8", Offset = "0xCBBFA8", VA = "0xCBBFA8")]
	[IteratorStateMachine(typeof(<FadeTo>d__6))]
	private IEnumerator FadeTo(float value)
	{
		return null;
	}

	[Token(Token = "0x60005B7")]
	[Address(RVA = "0xCBC048", Offset = "0xCBC048", VA = "0xCBC048")]
	public BlackoutShader()
	{
	}
}
[Token(Token = "0x2000128")]
public class HeadBlackout : MonoBehaviour
{
	[Token(Token = "0x4000610")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LayerMask collisionMask;

	[Token(Token = "0x4000611")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float headRadius;

	[Token(Token = "0x4000612")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool headCollide;

	[Token(Token = "0x60005BE")]
	[Address(RVA = "0xCBC1D4", Offset = "0xCBC1D4", VA = "0xCBC1D4")]
	private void Update()
	{
	}

	[Token(Token = "0x60005BF")]
	[Address(RVA = "0xCBC1D8", Offset = "0xCBC1D8", VA = "0xCBC1D8")]
	private void CheckForCollision()
	{
	}

	[Token(Token = "0x60005C0")]
	[Address(RVA = "0xCBC2CC", Offset = "0xCBC2CC", VA = "0xCBC2CC")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60005C1")]
	[Address(RVA = "0xCBC2FC", Offset = "0xCBC2FC", VA = "0xCBC2FC")]
	public HeadBlackout()
	{
	}
}
[Token(Token = "0x2000129")]
public class BookCoverInteraction : MonoBehaviour
{
	[Token(Token = "0x4000613")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent closeBook;

	[Token(Token = "0x4000614")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent openBook;

	[Token(Token = "0x4000615")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float checkAngle;

	[Token(Token = "0x4000616")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool opened;

	[Token(Token = "0x60005C2")]
	[Address(RVA = "0xCBC304", Offset = "0xCBC304", VA = "0xCBC304")]
	public void Grab()
	{
	}

	[Token(Token = "0x60005C3")]
	[Address(RVA = "0xCBC308", Offset = "0xCBC308", VA = "0xCBC308")]
	public void Release()
	{
	}

	[Token(Token = "0x60005C4")]
	[Address(RVA = "0xCBC30C", Offset = "0xCBC30C", VA = "0xCBC30C")]
	private void Update()
	{
	}

	[Token(Token = "0x60005C5")]
	[Address(RVA = "0xCBC4A0", Offset = "0xCBC4A0", VA = "0xCBC4A0")]
	public BookCoverInteraction()
	{
	}
}
[Token(Token = "0x200012A")]
public class GoToRestPosition : MonoBehaviour
{
	[Token(Token = "0x200012B")]
	[CompilerGenerated]
	private sealed class <Moving>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400061A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400061B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GoToRestPosition <>4__this;

		[Token(Token = "0x400061C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <lp>5__2;

		[Token(Token = "0x400061D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 <startPos>5__3;

		[Token(Token = "0x400061E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Quaternion <startRot>5__4;

		[Token(Token = "0x170000BB")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005CC")]
			[Address(RVA = "0xCBC7DC", Offset = "0xCBC7DC", VA = "0xCBC7DC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005CE")]
			[Address(RVA = "0xCBC824", Offset = "0xCBC824", VA = "0xCBC824", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005C9")]
		[Address(RVA = "0xCBC5D8", Offset = "0xCBC5D8", VA = "0xCBC5D8")]
		[DebuggerHidden]
		public <Moving>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x60005CA")]
		[Address(RVA = "0xCBC608", Offset = "0xCBC608", VA = "0xCBC608", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005CB")]
		[Address(RVA = "0xCBC60C", Offset = "0xCBC60C", VA = "0xCBC60C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005CD")]
		[Address(RVA = "0xCBC7E4", Offset = "0xCBC7E4", VA = "0xCBC7E4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000617")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform position;

	[Token(Token = "0x4000618")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float moveSpeed;

	[Token(Token = "0x60005C6")]
	[Address(RVA = "0xCBC524", Offset = "0xCBC524", VA = "0xCBC524")]
	public void MoveTo()
	{
	}

	[Token(Token = "0x60005C7")]
	[Address(RVA = "0xCBC570", Offset = "0xCBC570", VA = "0xCBC570")]
	[IteratorStateMachine(typeof(<Moving>d__3))]
	private IEnumerator Moving()
	{
		return null;
	}

	[Token(Token = "0x60005C8")]
	[Address(RVA = "0xCBC600", Offset = "0xCBC600", VA = "0xCBC600")]
	public GoToRestPosition()
	{
	}
}
[Token(Token = "0x200012C")]
public class LeverInteraction : MonoBehaviour
{
	[Token(Token = "0x400061F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent completed;

	[Token(Token = "0x4000620")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Space(15f)]
	public float activateThreshold;

	[Token(Token = "0x4000621")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool lessThan;

	[Token(Token = "0x4000622")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	public bool greaterThan;

	[Token(Token = "0x4000623")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
	[Space(15f)]
	public bool debug;

	[Token(Token = "0x4000624")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
	private bool done;

	[Token(Token = "0x4000625")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private HingeJoint hinge;

	[Token(Token = "0x60005CF")]
	[Address(RVA = "0xCBC82C", Offset = "0xCBC82C", VA = "0xCBC82C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005D0")]
	[Address(RVA = "0xCBC87C", Offset = "0xCBC87C", VA = "0xCBC87C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60005D1")]
	[Address(RVA = "0xCBC938", Offset = "0xCBC938", VA = "0xCBC938")]
	private void CheckForPassThreshold()
	{
	}

	[Token(Token = "0x60005D2")]
	[Address(RVA = "0xCBC9E8", Offset = "0xCBC9E8", VA = "0xCBC9E8")]
	public LeverInteraction()
	{
	}
}
[Token(Token = "0x200012D")]
public class PaintInteraction : MonoBehaviour
{
	[Token(Token = "0x4000626")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Collider paintBrush;

	[Token(Token = "0x4000627")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent paintedEvent;

	[Token(Token = "0x60005D3")]
	[Address(RVA = "0xCBCA50", Offset = "0xCBCA50", VA = "0xCBCA50")]
	private void OnCollisionEnter(Collision other)
	{
	}

	[Token(Token = "0x60005D4")]
	[Address(RVA = "0xCBCAF0", Offset = "0xCBCAF0", VA = "0xCBCAF0")]
	public PaintInteraction()
	{
	}
}
[Token(Token = "0x200012E")]
public class PeepholeCamera : MonoBehaviour
{
	[Token(Token = "0x4000628")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform cam;

	[Token(Token = "0x60005D5")]
	[Address(RVA = "0xCBCB58", Offset = "0xCBCB58", VA = "0xCBCB58")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005D6")]
	[Address(RVA = "0xCBCB98", Offset = "0xCBCB98", VA = "0xCBCB98")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60005D7")]
	[Address(RVA = "0xCBCBBC", Offset = "0xCBCBBC", VA = "0xCBCBBC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60005D8")]
	[Address(RVA = "0xCBCBE0", Offset = "0xCBCBE0", VA = "0xCBCBE0")]
	private void Update()
	{
	}

	[Token(Token = "0x60005D9")]
	[Address(RVA = "0xCBCC5C", Offset = "0xCBCC5C", VA = "0xCBCC5C")]
	public PeepholeCamera()
	{
	}
}
[Token(Token = "0x200012F")]
public class PeepholeHead : MonoBehaviour
{
	[Token(Token = "0x4000629")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform movingPart;

	[Token(Token = "0x400062A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 moveDistance;

	[Token(Token = "0x400062B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Space(15f)]
	public Shader shade;

	[Token(Token = "0x400062C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform storedHead;

	[Token(Token = "0x400062D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Collider coll;

	[Token(Token = "0x400062E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector3 startPos;

	[Token(Token = "0x400062F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private Vector3 endPos;

	[Token(Token = "0x4000630")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3 enterPos;

	[Token(Token = "0x4000631")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool hover;

	[Token(Token = "0x60005DA")]
	[Address(RVA = "0xCBCC64", Offset = "0xCBCC64", VA = "0xCBCC64")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005DB")]
	[Address(RVA = "0xCBCCB4", Offset = "0xCBCCB4", VA = "0xCBCCB4")]
	private void Start()
	{
	}

	[Token(Token = "0x60005DC")]
	[Address(RVA = "0xCBCD14", Offset = "0xCBCD14", VA = "0xCBCD14")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60005DD")]
	[Address(RVA = "0xCBD160", Offset = "0xCBD160", VA = "0xCBD160")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60005DE")]
	[Address(RVA = "0xCBD20C", Offset = "0xCBD20C", VA = "0xCBD20C")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60005DF")]
	[Address(RVA = "0xCBD278", Offset = "0xCBD278", VA = "0xCBD278")]
	public PeepholeHead()
	{
	}
}
[Token(Token = "0x2000130")]
public class PeepholeWood : MonoBehaviour
{
	[Token(Token = "0x4000632")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MeshRenderer[] meshes;

	[Token(Token = "0x4000633")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float startFade;

	[Token(Token = "0x4000634")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float endFade;

	[Token(Token = "0x60005E0")]
	[Address(RVA = "0xCBD2D8", Offset = "0xCBD2D8", VA = "0xCBD2D8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005E1")]
	[Address(RVA = "0xCBD3A8", Offset = "0xCBD3A8", VA = "0xCBD3A8")]
	private void CalculateHeadDistance()
	{
	}

	[Token(Token = "0x60005E2")]
	[Address(RVA = "0xCBD534", Offset = "0xCBD534", VA = "0xCBD534")]
	private void Update()
	{
	}

	[Token(Token = "0x60005E3")]
	[Address(RVA = "0xCBD538", Offset = "0xCBD538", VA = "0xCBD538")]
	public PeepholeWood()
	{
	}
}
[Token(Token = "0x2000131")]
public class SoupyInteraction : MonoBehaviour
{
	[Token(Token = "0x4000635")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Renderer rend;

	[Token(Token = "0x4000636")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 lastPos;

	[Token(Token = "0x4000637")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 velocity;

	[Token(Token = "0x4000638")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 lastRot;

	[Token(Token = "0x4000639")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 angularVelocity;

	[Token(Token = "0x400063A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float MaxWobble;

	[Token(Token = "0x400063B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float WobbleSpeed;

	[Token(Token = "0x400063C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float Recovery;

	[Token(Token = "0x400063D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float wobbleAmountX;

	[Token(Token = "0x400063E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float wobbleAmountZ;

	[Token(Token = "0x400063F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float wobbleAmountToAddX;

	[Token(Token = "0x4000640")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float wobbleAmountToAddZ;

	[Token(Token = "0x4000641")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float pulse;

	[Token(Token = "0x4000642")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float time;

	[Token(Token = "0x60005E4")]
	[Address(RVA = "0xCBD540", Offset = "0xCBD540", VA = "0xCBD540")]
	private void Start()
	{
	}

	[Token(Token = "0x60005E5")]
	[Address(RVA = "0xCBD590", Offset = "0xCBD590", VA = "0xCBD590")]
	private void Update()
	{
	}

	[Token(Token = "0x60005E6")]
	[Address(RVA = "0xCBD840", Offset = "0xCBD840", VA = "0xCBD840")]
	public SoupyInteraction()
	{
	}
}
[Token(Token = "0x2000132")]
public class SuitcaseBlocker : MonoBehaviour
{
	[Token(Token = "0x4000643")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject blocker;

	[Token(Token = "0x4000644")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<string> blockedTags;

	[Token(Token = "0x4000645")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int amount;

	[Token(Token = "0x60005E7")]
	[Address(RVA = "0xCBD864", Offset = "0xCBD864", VA = "0xCBD864")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60005E8")]
	[Address(RVA = "0xCBD958", Offset = "0xCBD958", VA = "0xCBD958")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60005E9")]
	[Address(RVA = "0xCBDA50", Offset = "0xCBDA50", VA = "0xCBDA50")]
	public SuitcaseBlocker()
	{
	}
}
[Token(Token = "0x2000133")]
public class TargetHolo : MonoBehaviour
{
	[Token(Token = "0x2000134")]
	[CompilerGenerated]
	private sealed class <FadeIn>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400064A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TargetHolo <>4__this;

		[Token(Token = "0x400064B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <lp>5__2;

		[Token(Token = "0x170000BD")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005F3")]
			[Address(RVA = "0xCBDE28", Offset = "0xCBDE28", VA = "0xCBDE28", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005F5")]
			[Address(RVA = "0xCBDE70", Offset = "0xCBDE70", VA = "0xCBDE70", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005F0")]
		[Address(RVA = "0xCBDC74", Offset = "0xCBDC74", VA = "0xCBDC74")]
		[DebuggerHidden]
		public <FadeIn>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x60005F1")]
		[Address(RVA = "0xCBDD34", Offset = "0xCBDD34", VA = "0xCBDD34", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005F2")]
		[Address(RVA = "0xCBDD38", Offset = "0xCBDD38", VA = "0xCBDD38", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005F4")]
		[Address(RVA = "0xCBDE30", Offset = "0xCBDE30", VA = "0xCBDE30", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000135")]
	[CompilerGenerated]
	private sealed class <FadeOut>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400064C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400064D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400064E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TargetHolo <>4__this;

		[Token(Token = "0x400064F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <lp>5__2;

		[Token(Token = "0x170000BF")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005F9")]
			[Address(RVA = "0xCBDF68", Offset = "0xCBDF68", VA = "0xCBDF68", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005FB")]
			[Address(RVA = "0xCBDFB0", Offset = "0xCBDFB0", VA = "0xCBDFB0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005F6")]
		[Address(RVA = "0xCBDD04", Offset = "0xCBDD04", VA = "0xCBDD04")]
		[DebuggerHidden]
		public <FadeOut>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x60005F7")]
		[Address(RVA = "0xCBDE78", Offset = "0xCBDE78", VA = "0xCBDE78", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005F8")]
		[Address(RVA = "0xCBDE7C", Offset = "0xCBDE7C", VA = "0xCBDE7C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005FA")]
		[Address(RVA = "0xCBDF70", Offset = "0xCBDF70", VA = "0xCBDF70", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000646")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Material mat;

	[Token(Token = "0x4000647")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Color look;

	[Token(Token = "0x60005EA")]
	[Address(RVA = "0xCBDA58", Offset = "0xCBDA58", VA = "0xCBDA58")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005EB")]
	[Address(RVA = "0xCBDB5C", Offset = "0xCBDB5C", VA = "0xCBDB5C")]
	public void StartHolo()
	{
	}

	[Token(Token = "0x60005EC")]
	[Address(RVA = "0xCBDBB4", Offset = "0xCBDBB4", VA = "0xCBDBB4")]
	public void EndHolo()
	{
	}

	[Token(Token = "0x60005ED")]
	[Address(RVA = "0xCBDC0C", Offset = "0xCBDC0C", VA = "0xCBDC0C")]
	[IteratorStateMachine(typeof(<FadeIn>d__5))]
	private IEnumerator FadeIn()
	{
		return null;
	}

	[Token(Token = "0x60005EE")]
	[Address(RVA = "0xCBDC9C", Offset = "0xCBDC9C", VA = "0xCBDC9C")]
	[IteratorStateMachine(typeof(<FadeOut>d__6))]
	private IEnumerator FadeOut()
	{
		return null;
	}

	[Token(Token = "0x60005EF")]
	[Address(RVA = "0xCBDD2C", Offset = "0xCBDD2C", VA = "0xCBDD2C")]
	public TargetHolo()
	{
	}
}
[Token(Token = "0x2000136")]
public class TargetParticles : MonoBehaviour
{
	[Token(Token = "0x4000650")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem particles;

	[Token(Token = "0x60005FC")]
	[Address(RVA = "0xCBDFB8", Offset = "0xCBDFB8", VA = "0xCBDFB8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005FD")]
	[Address(RVA = "0xCBE008", Offset = "0xCBE008", VA = "0xCBE008")]
	public void StartParticles()
	{
	}

	[Token(Token = "0x60005FE")]
	[Address(RVA = "0xCBE024", Offset = "0xCBE024", VA = "0xCBE024")]
	public void EndParticles()
	{
	}

	[Token(Token = "0x60005FF")]
	[Address(RVA = "0xCBE040", Offset = "0xCBE040", VA = "0xCBE040")]
	public TargetParticles()
	{
	}
}
[Token(Token = "0x2000137")]
public class WindChimeInteraction : MonoBehaviour
{
	[Token(Token = "0x4000651")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent chimeSFX;

	[Token(Token = "0x4000652")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent chime;

	[Token(Token = "0x4000653")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioSource sound;

	[Token(Token = "0x4000654")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool ringOnce;

	[Token(Token = "0x4000655")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool ring;

	[Token(Token = "0x4000656")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Rigidbody body;

	[Token(Token = "0x4000657")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float maxVelocity;

	[Token(Token = "0x4000658")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float lastVel;

	[Token(Token = "0x4000659")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float lastAngle;

	[Token(Token = "0x6000600")]
	[Address(RVA = "0xCBE048", Offset = "0xCBE048", VA = "0xCBE048")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000601")]
	[Address(RVA = "0xCBE098", Offset = "0xCBE098", VA = "0xCBE098")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000602")]
	[Address(RVA = "0xCBE278", Offset = "0xCBE278", VA = "0xCBE278")]
	public WindChimeInteraction()
	{
	}
}
[Token(Token = "0x2000138")]
public class ShootProjectiles : MonoBehaviour
{
	[Token(Token = "0x2000139")]
	[CompilerGenerated]
	private sealed class <Shoot>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400065C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400065D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400065E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ShootProjectiles <>4__this;

		[Token(Token = "0x170000C1")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000609")]
			[Address(RVA = "0xCBE5F4", Offset = "0xCBE5F4", VA = "0xCBE5F4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C2")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600060B")]
			[Address(RVA = "0xCBE63C", Offset = "0xCBE63C", VA = "0xCBE63C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000606")]
		[Address(RVA = "0xCBE3B8", Offset = "0xCBE3B8", VA = "0xCBE3B8")]
		[DebuggerHidden]
		public <Shoot>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x6000607")]
		[Address(RVA = "0xCBE3E8", Offset = "0xCBE3E8", VA = "0xCBE3E8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000608")]
		[Address(RVA = "0xCBE3EC", Offset = "0xCBE3EC", VA = "0xCBE3EC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600060A")]
		[Address(RVA = "0xCBE5FC", Offset = "0xCBE5FC", VA = "0xCBE5FC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400065A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 shootVelocity;

	[Token(Token = "0x400065B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject projectile;

	[Token(Token = "0x6000603")]
	[Address(RVA = "0xCBE304", Offset = "0xCBE304", VA = "0xCBE304")]
	private void Start()
	{
	}

	[Token(Token = "0x6000604")]
	[Address(RVA = "0xCBE350", Offset = "0xCBE350", VA = "0xCBE350")]
	[IteratorStateMachine(typeof(<Shoot>d__3))]
	private IEnumerator Shoot()
	{
		return null;
	}

	[Token(Token = "0x6000605")]
	[Address(RVA = "0xCBE3E0", Offset = "0xCBE3E0", VA = "0xCBE3E0")]
	public ShootProjectiles()
	{
	}
}
[Token(Token = "0x200013A")]
public class LightGroup : MonoBehaviour
{
	[Token(Token = "0x200013B")]
	[CompilerGenerated]
	private sealed class <KillLightsAfterTime>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000668")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000669")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400066A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float time;

		[Token(Token = "0x400066B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LightGroup <>4__this;

		[Token(Token = "0x170000C3")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000619")]
			[Address(RVA = "0xCC0348", Offset = "0xCC0348", VA = "0xCC0348", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C4")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600061B")]
			[Address(RVA = "0xCC0390", Offset = "0xCC0390", VA = "0xCC0390", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000616")]
		[Address(RVA = "0xCBFA7C", Offset = "0xCBFA7C", VA = "0xCBFA7C")]
		[DebuggerHidden]
		public <KillLightsAfterTime>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x6000617")]
		[Address(RVA = "0xCC017C", Offset = "0xCC017C", VA = "0xCC017C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000618")]
		[Address(RVA = "0xCC0180", Offset = "0xCC0180", VA = "0xCC0180", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600061A")]
		[Address(RVA = "0xCC0350", Offset = "0xCC0350", VA = "0xCC0350", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400065F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<Light> lights;

	[Token(Token = "0x4000660")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<float> lightIntensities;

	[Token(Token = "0x4000661")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<VolumetricLightBeam> lightBeams;

	[Token(Token = "0x4000662")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public LightGroup fadeOtherLightgroup;

	[Token(Token = "0x4000663")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<float> lightBeamIntensities;

	[Token(Token = "0x4000664")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float fadeSpeed;

	[Token(Token = "0x4000665")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float startPercent;

	[Token(Token = "0x4000666")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float fadeToOnEnable;

	[Token(Token = "0x4000667")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float currentPercent;

	[Token(Token = "0x600060C")]
	[Address(RVA = "0xCBE644", Offset = "0xCBE644", VA = "0xCBE644")]
	private void Awake()
	{
	}

	[Token(Token = "0x600060D")]
	[Address(RVA = "0xCBED6C", Offset = "0xCBED6C", VA = "0xCBED6C")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x600060E")]
	[Address(RVA = "0xCBF6C0", Offset = "0xCBF6C0", VA = "0xCBF6C0")]
	public void SetFadeSpeed(float value)
	{
	}

	[Token(Token = "0x600060F")]
	[Address(RVA = "0xCBF2D8", Offset = "0xCBF2D8", VA = "0xCBF2D8")]
	public void Fade(float intensityPercent)
	{
	}

	[Token(Token = "0x6000610")]
	[Address(RVA = "0xCBF6C8", Offset = "0xCBF6C8", VA = "0xCBF6C8")]
	public void FadeToZeroOverTime(float time)
	{
	}

	[Token(Token = "0x6000611")]
	[Address(RVA = "0xCBFA04", Offset = "0xCBFA04", VA = "0xCBFA04")]
	[IteratorStateMachine(typeof(<KillLightsAfterTime>d__14))]
	private IEnumerator KillLightsAfterTime(float time)
	{
		return null;
	}

	[Token(Token = "0x6000612")]
	[Address(RVA = "0xCBEE08", Offset = "0xCBEE08", VA = "0xCBEE08")]
	public void FadeTo(LightGroup group)
	{
	}

	[Token(Token = "0x6000613")]
	[Address(RVA = "0xCBFAA4", Offset = "0xCBFAA4", VA = "0xCBFAA4")]
	private void FadeCopyLight(Light from, Light to)
	{
	}

	[Token(Token = "0x6000614")]
	[Address(RVA = "0xCBFDF8", Offset = "0xCBFDF8", VA = "0xCBFDF8")]
	private void FadeCopyLightBeam(VolumetricLightBeam from, VolumetricLightBeam to)
	{
	}

	[Token(Token = "0x6000615")]
	[Address(RVA = "0xCC0168", Offset = "0xCC0168", VA = "0xCC0168")]
	public LightGroup()
	{
	}
}
[Token(Token = "0x200013E")]
public class LoaderManager : Singleton<LoaderManager>
{
	[Token(Token = "0x200013F")]
	public delegate void LoadingScene();

	[Token(Token = "0x400066E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LoadingScene OnLoadingScene;

	[Token(Token = "0x400066F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool initialized;

	[Token(Token = "0x4000670")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private string _name;

	[Token(Token = "0x170000C5")]
	public string settingsPath
	{
		[Token(Token = "0x6000626")]
		[Address(RVA = "0xCC0480", Offset = "0xCC0480", VA = "0xCC0480")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000C6")]
	public Settings.Profile settings
	{
		[Token(Token = "0x6000627")]
		[Address(RVA = "0xCC04DC", Offset = "0xCC04DC", VA = "0xCC04DC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000628")]
	[Address(RVA = "0xCC0534", Offset = "0xCC0534", VA = "0xCC0534")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000629")]
	[Address(RVA = "0xCC05FC", Offset = "0xCC05FC", VA = "0xCC05FC")]
	private void Start()
	{
	}

	[Token(Token = "0x600062A")]
	[Address(RVA = "0xCC0600", Offset = "0xCC0600", VA = "0xCC0600")]
	private void Update()
	{
	}

	[Token(Token = "0x600062B")]
	[Address(RVA = "0xCC0604", Offset = "0xCC0604", VA = "0xCC0604")]
	public void CreateSettings(string json)
	{
	}

	[Token(Token = "0x600062C")]
	[Address(RVA = "0xCC06CC", Offset = "0xCC06CC", VA = "0xCC06CC")]
	public void SaveSettings()
	{
	}

	[Token(Token = "0x600062D")]
	[Address(RVA = "0xCC0728", Offset = "0xCC0728", VA = "0xCC0728")]
	public LoaderManager()
	{
	}
}
[Token(Token = "0x2000140")]
public class CheckLanguageSelectSkip : MonoBehaviour
{
	[Token(Token = "0x4000671")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent ShouldSkip;

	[Token(Token = "0x6000632")]
	[Address(RVA = "0xCC086C", Offset = "0xCC086C", VA = "0xCC086C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000633")]
	[Address(RVA = "0xCC08E8", Offset = "0xCC08E8", VA = "0xCC08E8")]
	public CheckLanguageSelectSkip()
	{
	}
}
[Token(Token = "0x2000141")]
public class LocaleSetter : MonoBehaviour
{
	[Token(Token = "0x4000672")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string localeName;

	[Token(Token = "0x6000634")]
	[Address(RVA = "0xCC08F0", Offset = "0xCC08F0", VA = "0xCC08F0")]
	public void SetLocale()
	{
	}

	[Token(Token = "0x6000635")]
	[Address(RVA = "0xCC0AE4", Offset = "0xCC0AE4", VA = "0xCC0AE4")]
	public LocaleSetter()
	{
	}
}
[Token(Token = "0x2000142")]
public class LocalizeTexture2D : MonoBehaviour
{
	[Token(Token = "0x4000673")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LocalizedTexture texture;

	[Token(Token = "0x4000674")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int materialID;

	[Token(Token = "0x4000675")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Renderer renderer;

	[Token(Token = "0x4000676")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string textureName;

	[Token(Token = "0x4000677")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Material mat;

	[Token(Token = "0x6000636")]
	[Address(RVA = "0xCC0B34", Offset = "0xCC0B34", VA = "0xCC0B34")]
	private void Start()
	{
	}

	[Token(Token = "0x6000637")]
	[Address(RVA = "0xCC0C34", Offset = "0xCC0C34", VA = "0xCC0C34")]
	public void UpdateMaterial()
	{
	}

	[Token(Token = "0x6000638")]
	[Address(RVA = "0xCC0D08", Offset = "0xCC0D08", VA = "0xCC0D08")]
	private void LocalizeTexture2D_Completed(AsyncOperationHandle<Texture> obj)
	{
	}

	[Token(Token = "0x6000639")]
	[Address(RVA = "0xCC0E0C", Offset = "0xCC0E0C", VA = "0xCC0E0C")]
	private void OnTextureChanged(Texture value)
	{
	}

	[Token(Token = "0x600063A")]
	[Address(RVA = "0xCC0E80", Offset = "0xCC0E80", VA = "0xCC0E80")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600063B")]
	[Address(RVA = "0xCC0F20", Offset = "0xCC0F20", VA = "0xCC0F20")]
	public LocalizeTexture2D()
	{
	}
}
[Serializable]
[Token(Token = "0x2000143")]
public class LocalizedFont : LocalizedAsset<TMP_FontAsset>
{
	[Token(Token = "0x600063C")]
	[Address(RVA = "0xCC0F70", Offset = "0xCC0F70", VA = "0xCC0F70")]
	public LocalizedFont()
	{
	}
}
[Serializable]
[Token(Token = "0x2000144")]
public class LocalizedTexture2D : LocalizedAsset<Texture2D>
{
	[Token(Token = "0x600063D")]
	[Address(RVA = "0xCC0FB8", Offset = "0xCC0FB8", VA = "0xCC0FB8")]
	public LocalizedTexture2D()
	{
	}
}
[Serializable]
[Token(Token = "0x2000145")]
public struct LocTexRef
{
	[Token(Token = "0x4000678")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public LocalizedTexture2D tex;
}
[Token(Token = "0x2000146")]
public class LocalizeTextureOrText : MonoBehaviour
{
	[Token(Token = "0x4000679")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LocalizedFont fontRef;

	[Token(Token = "0x400067A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LocalizedString textRef;

	[Token(Token = "0x400067B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public LocalizedTexture textureRef;

	[Token(Token = "0x400067C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TextMeshPro textbox;

	[Token(Token = "0x400067D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Renderer renderer;

	[Token(Token = "0x400067E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string textureID;

	[Token(Token = "0x400067F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Material mat;

	[Token(Token = "0x600063E")]
	[Address(RVA = "0xCC1000", Offset = "0xCC1000", VA = "0xCC1000")]
	private void Awake()
	{
	}

	[Token(Token = "0x600063F")]
	[Address(RVA = "0xCC1028", Offset = "0xCC1028", VA = "0xCC1028")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000640")]
	[Address(RVA = "0xCC11A4", Offset = "0xCC11A4", VA = "0xCC11A4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000641")]
	[Address(RVA = "0xCC1320", Offset = "0xCC1320", VA = "0xCC1320")]
	private void GotText(string value)
	{
	}

	[Token(Token = "0x6000642")]
	[Address(RVA = "0xCC1410", Offset = "0xCC1410", VA = "0xCC1410")]
	private void GotFont(TMP_FontAsset value)
	{
	}

	[Token(Token = "0x6000643")]
	[Address(RVA = "0xCC142C", Offset = "0xCC142C", VA = "0xCC142C")]
	private void GotTexture(Texture value)
	{
	}

	[Token(Token = "0x6000644")]
	[Address(RVA = "0xCC1454", Offset = "0xCC1454", VA = "0xCC1454")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000645")]
	[Address(RVA = "0xCC14B8", Offset = "0xCC14B8", VA = "0xCC14B8")]
	public LocalizeTextureOrText()
	{
	}
}
[Token(Token = "0x2000147")]
[DefaultExecutionOrder(-1000000)]
public class LocalizeTMProText : MonoBehaviour
{
	[Token(Token = "0x4000680")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LocalizedFont fontRef;

	[Token(Token = "0x4000681")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LocalizedString textRef;

	[Token(Token = "0x4000682")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshPro textbox;

	[Token(Token = "0x4000683")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Material mat;

	[Token(Token = "0x4000684")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private string currentText;

	[Token(Token = "0x4000685")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private FadeTMProText fade;

	[Token(Token = "0x4000686")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private TMP_FontAsset font;

	[Token(Token = "0x4000687")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool fading;

	[Token(Token = "0x4000688")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int elementsLoaded;

	[Token(Token = "0x6000646")]
	[Address(RVA = "0xCC1508", Offset = "0xCC1508", VA = "0xCC1508")]
	private void Start()
	{
	}

	[Token(Token = "0x6000647")]
	[Address(RVA = "0xCC1558", Offset = "0xCC1558", VA = "0xCC1558")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000648")]
	[Address(RVA = "0xCC173C", Offset = "0xCC173C", VA = "0xCC173C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000649")]
	[Address(RVA = "0xCC18C4", Offset = "0xCC18C4", VA = "0xCC18C4")]
	private void OnLocaleWillChange()
	{
	}

	[Token(Token = "0x600064A")]
	[Address(RVA = "0xCC19E0", Offset = "0xCC19E0", VA = "0xCC19E0")]
	private void GotText(string value)
	{
	}

	[Token(Token = "0x600064B")]
	[Address(RVA = "0xCC1B54", Offset = "0xCC1B54", VA = "0xCC1B54")]
	private void GotFont(TMP_FontAsset value)
	{
	}

	[Token(Token = "0x600064C")]
	[Address(RVA = "0xCC1B68", Offset = "0xCC1B68", VA = "0xCC1B68")]
	private void FadeComplete()
	{
	}

	[Token(Token = "0x600064D")]
	[Address(RVA = "0xCC1AAC", Offset = "0xCC1AAC", VA = "0xCC1AAC")]
	private void SetText()
	{
	}

	[Token(Token = "0x600064E")]
	[Address(RVA = "0xCC1B88", Offset = "0xCC1B88", VA = "0xCC1B88")]
	public LocalizeTMProText()
	{
	}
}
[Token(Token = "0x2000148")]
public class SmoothLocaleChanger : Singleton<SmoothLocaleChanger>
{
	[Token(Token = "0x2000149")]
	[CompilerGenerated]
	private sealed class <Wait>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400068C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400068D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400068E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x400068F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SmoothLocaleChanger <>4__this;

		[Token(Token = "0x170000C7")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000656")]
			[Address(RVA = "0xCC1E58", Offset = "0xCC1E58", VA = "0xCC1E58", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C8")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000658")]
			[Address(RVA = "0xCC1EA0", Offset = "0xCC1EA0", VA = "0xCC1EA0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000653")]
		[Address(RVA = "0xCC1C08", Offset = "0xCC1C08", VA = "0xCC1C08")]
		[DebuggerHidden]
		public <Wait>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6000654")]
		[Address(RVA = "0xCC1CAC", Offset = "0xCC1CAC", VA = "0xCC1CAC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000655")]
		[Address(RVA = "0xCC1CB0", Offset = "0xCC1CB0", VA = "0xCC1CB0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000657")]
		[Address(RVA = "0xCC1E60", Offset = "0xCC1E60", VA = "0xCC1E60", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000689")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent LocaleWillChange;

	[Token(Token = "0x400068A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private string nextLocale;

	[Token(Token = "0x400068B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float delay;

	[Token(Token = "0x600064F")]
	[Address(RVA = "0xCC0944", Offset = "0xCC0944", VA = "0xCC0944")]
	public void ChangeLocale(string localeName)
	{
	}

	[Token(Token = "0x6000650")]
	[Address(RVA = "0xCC1B90", Offset = "0xCC1B90", VA = "0xCC1B90")]
	[IteratorStateMachine(typeof(<Wait>d__4))]
	private IEnumerator Wait(float delay)
	{
		return null;
	}

	[Token(Token = "0x6000651")]
	[Address(RVA = "0xCC19CC", Offset = "0xCC19CC", VA = "0xCC19CC")]
	public void DelayLocaleChange(float delay)
	{
	}

	[Token(Token = "0x6000652")]
	[Address(RVA = "0xCC1C30", Offset = "0xCC1C30", VA = "0xCC1C30")]
	public SmoothLocaleChanger()
	{
	}
}
[Token(Token = "0x200014A")]
public class LookAt : MonoBehaviour
{
	[Token(Token = "0x4000690")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform lookAtTarget;

	[Token(Token = "0x4000691")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float lookSmoothness;

	[Token(Token = "0x4000692")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 lookPos;

	[Token(Token = "0x4000693")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3 lookVel;

	[Token(Token = "0x6000659")]
	[Address(RVA = "0xCC1EA8", Offset = "0xCC1EA8", VA = "0xCC1EA8")]
	public void Enable()
	{
	}

	[Token(Token = "0x600065A")]
	[Address(RVA = "0xCC1FC8", Offset = "0xCC1FC8", VA = "0xCC1FC8")]
	private void Update()
	{
	}

	[Token(Token = "0x600065B")]
	[Address(RVA = "0xCC2164", Offset = "0xCC2164", VA = "0xCC2164")]
	public void SetLookAtTarget(Transform t)
	{
	}

	[Token(Token = "0x600065C")]
	[Address(RVA = "0xCC216C", Offset = "0xCC216C", VA = "0xCC216C")]
	public LookAt()
	{
	}
}
[Token(Token = "0x200014B")]
public class MicInput : MonoBehaviour
{
	[Token(Token = "0x4000694")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float testSound;

	[Token(Token = "0x600065D")]
	[Address(RVA = "0xCC217C", Offset = "0xCC217C", VA = "0xCC217C")]
	public void GotLevel(float level)
	{
	}

	[Token(Token = "0x600065E")]
	[Address(RVA = "0xCC2184", Offset = "0xCC2184", VA = "0xCC2184")]
	public MicInput()
	{
	}
}
[Token(Token = "0x200014C")]
public class MoveBlastPlane : MonoBehaviour
{
	[Token(Token = "0x600065F")]
	[Address(RVA = "0xCC218C", Offset = "0xCC218C", VA = "0xCC218C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000660")]
	[Address(RVA = "0xCC223C", Offset = "0xCC223C", VA = "0xCC223C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000661")]
	[Address(RVA = "0xCC2240", Offset = "0xCC2240", VA = "0xCC2240")]
	public MoveBlastPlane()
	{
	}
}
[Token(Token = "0x200014D")]
public class OneTimeEvent : MonoBehaviour
{
	[Token(Token = "0x4000695")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent Event;

	[Token(Token = "0x4000696")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool hasInvoked;

	[Token(Token = "0x6000662")]
	[Address(RVA = "0xCC2248", Offset = "0xCC2248", VA = "0xCC2248")]
	public void Invoke()
	{
	}

	[Token(Token = "0x6000663")]
	[Address(RVA = "0xCC2280", Offset = "0xCC2280", VA = "0xCC2280")]
	public OneTimeEvent()
	{
	}
}
[Token(Token = "0x200014E")]
public class PhoneBookAnimator : MonoBehaviour
{
	[Token(Token = "0x4000697")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator animator;

	[Token(Token = "0x6000664")]
	[Address(RVA = "0xCC2288", Offset = "0xCC2288", VA = "0xCC2288")]
	private void Start()
	{
	}

	[Token(Token = "0x6000665")]
	[Address(RVA = "0xCC228C", Offset = "0xCC228C", VA = "0xCC228C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000666")]
	[Address(RVA = "0xCC2290", Offset = "0xCC2290", VA = "0xCC2290")]
	public void ToggleBook()
	{
	}

	[Token(Token = "0x6000667")]
	[Address(RVA = "0xCC233C", Offset = "0xCC233C", VA = "0xCC233C")]
	public void StopAnimator()
	{
	}

	[Token(Token = "0x6000668")]
	[Address(RVA = "0xCC23C0", Offset = "0xCC23C0", VA = "0xCC23C0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000669")]
	[Address(RVA = "0xCC23C4", Offset = "0xCC23C4", VA = "0xCC23C4")]
	public PhoneBookAnimator()
	{
	}
}
[Token(Token = "0x200014F")]
public class PhotoFrame : MonoBehaviour
{
	[Token(Token = "0x2000150")]
	private struct FrameHalf
	{
		[Token(Token = "0x40006B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 finalPos;

		[Token(Token = "0x40006B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x40006B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 velocity;

		[Token(Token = "0x6000676")]
		[Address(RVA = "0xCC2AEC", Offset = "0xCC2AEC", VA = "0xCC2AEC")]
		public void MoveToLocalPosition(Vector3 targetPos, float smoothing, float maxSpeed)
		{
		}
	}

	[Token(Token = "0x4000698")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform leftFramePiece;

	[Token(Token = "0x4000699")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform rightFramePiece;

	[Token(Token = "0x400069A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform frameTarget;

	[Token(Token = "0x400069B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Transform frameCenter;

	[Token(Token = "0x400069C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private float frameTargetWidth;

	[Token(Token = "0x400069D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private float frameWidth;

	[Token(Token = "0x400069E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float frameAspect;

	[Token(Token = "0x400069F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private float lookForgiveness;

	[Token(Token = "0x40006A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private float minFrameToCamDistance;

	[Token(Token = "0x40006A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private float animationSmoothing;

	[Token(Token = "0x40006A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private float animationMaxSpeed;

	[Token(Token = "0x40006A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	private float framePieceMaxDistance;

	[Token(Token = "0x40006A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Camera photoCamera;

	[Token(Token = "0x40006A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Material[] photoMats;

	[Token(Token = "0x40006A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private GameObject photo;

	[Token(Token = "0x40006A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public UnityEvent FrameComplete;

	[Token(Token = "0x40006A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private FrameHalf leftHalf;

	[Token(Token = "0x40006A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private FrameHalf rightHalf;

	[Token(Token = "0x40006AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Vector3 velocity;

	[Token(Token = "0x40006AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private int photoResolution;

	[Token(Token = "0x40006AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private Vector3 frameTargetPos;

	[Token(Token = "0x40006AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private Vector3 defaultPosition;

	[Token(Token = "0x40006AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private RenderTexture photoRT;

	[Token(Token = "0x40006B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Texture2D photoTex;

	[Token(Token = "0x40006B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private int readTries;

	[Token(Token = "0x40006B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private Transform cam;

	[Token(Token = "0x170000C9")]
	public bool complete
	{
		[Token(Token = "0x600066A")]
		[Address(RVA = "0xCC23CC", Offset = "0xCC23CC", VA = "0xCC23CC")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600066B")]
		[Address(RVA = "0xCC23D4", Offset = "0xCC23D4", VA = "0xCC23D4")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000CA")]
	public Transform Center
	{
		[Token(Token = "0x600066C")]
		[Address(RVA = "0xCC23E0", Offset = "0xCC23E0", VA = "0xCC23E0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600066D")]
	[Address(RVA = "0xCC23E8", Offset = "0xCC23E8", VA = "0xCC23E8")]
	private void Start()
	{
	}

	[Token(Token = "0x600066E")]
	[Address(RVA = "0xCC25F4", Offset = "0xCC25F4", VA = "0xCC25F4")]
	private void Update()
	{
	}

	[Token(Token = "0x600066F")]
	[Address(RVA = "0xCC2C00", Offset = "0xCC2C00", VA = "0xCC2C00")]
	public void Despawn()
	{
	}

	[Token(Token = "0x6000670")]
	[Address(RVA = "0xCC2C8C", Offset = "0xCC2C8C", VA = "0xCC2C8C")]
	[ContextMenu("Take Photo")]
	public void TakePhoto()
	{
	}

	[Token(Token = "0x6000671")]
	[Address(RVA = "0xCC30DC", Offset = "0xCC30DC", VA = "0xCC30DC")]
	private void GetData()
	{
	}

	[Token(Token = "0x6000672")]
	[Address(RVA = "0xCC3168", Offset = "0xCC3168", VA = "0xCC3168")]
	private void GotData(AsyncGPUReadbackRequest obj)
	{
	}

	[Token(Token = "0x6000673")]
	[Address(RVA = "0xCC2FA8", Offset = "0xCC2FA8", VA = "0xCC2FA8")]
	private void SetPhotoTexture(Texture photoTex)
	{
	}

	[Token(Token = "0x6000674")]
	[Address(RVA = "0xCC2BA8", Offset = "0xCC2BA8", VA = "0xCC2BA8")]
	private void Complete()
	{
	}

	[Token(Token = "0x6000675")]
	[Address(RVA = "0xCC3408", Offset = "0xCC3408", VA = "0xCC3408")]
	public PhotoFrame()
	{
	}
}
[Token(Token = "0x2000151")]
public class PlaceObjectHint : MonoBehaviour
{
	[Token(Token = "0x40006B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Renderer hintObject;

	[Token(Token = "0x40006B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string colorProperty;

	[Token(Token = "0x40006B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Material hintMaterial;

	[Token(Token = "0x40006B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float blinkTime;

	[Token(Token = "0x40006BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float maxAlpha;

	[Token(Token = "0x40006BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float fadeAmount;

	[Token(Token = "0x40006BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Color startColor;

	[Token(Token = "0x6000677")]
	[Address(RVA = "0xCC343C", Offset = "0xCC343C", VA = "0xCC343C")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x6000678")]
	[Address(RVA = "0xCC3644", Offset = "0xCC3644", VA = "0xCC3644")]
	public void UpdateFadeAmount(float fade)
	{
	}

	[Token(Token = "0x6000679")]
	[Address(RVA = "0xCC3660", Offset = "0xCC3660", VA = "0xCC3660")]
	private void UpdateHintBlink(float t)
	{
	}

	[Token(Token = "0x600067A")]
	[Address(RVA = "0xCC36B4", Offset = "0xCC36B4", VA = "0xCC36B4")]
	public PlaceObjectHint()
	{
	}
}
[Token(Token = "0x2000152")]
public class PositionTransition : MonoBehaviour
{
	[Token(Token = "0x40006BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform tweenTransform;

	[Token(Token = "0x40006BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float duration;

	[Token(Token = "0x40006BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float delay;

	[Token(Token = "0x40006C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Ease ease;

	[Token(Token = "0x600067C")]
	[Address(RVA = "0xCC3718", Offset = "0xCC3718", VA = "0xCC3718")]
	private void Start()
	{
	}

	[Token(Token = "0x600067D")]
	[Address(RVA = "0xCC37BC", Offset = "0xCC37BC", VA = "0xCC37BC")]
	private void Update()
	{
	}

	[Token(Token = "0x600067E")]
	[Address(RVA = "0xCC37C0", Offset = "0xCC37C0", VA = "0xCC37C0")]
	public PositionTransition()
	{
	}
}
[Token(Token = "0x2000153")]
public class ButtonState : MonoBehaviour
{
	[Token(Token = "0x40006C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int state_int;

	[Token(Token = "0x600067F")]
	[Address(RVA = "0xCC37C8", Offset = "0xCC37C8", VA = "0xCC37C8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000680")]
	[Address(RVA = "0xCC37CC", Offset = "0xCC37CC", VA = "0xCC37CC")]
	public void SetState()
	{
	}

	[Token(Token = "0x6000681")]
	[Address(RVA = "0xCC3954", Offset = "0xCC3954", VA = "0xCC3954")]
	private void Update()
	{
	}

	[Token(Token = "0x6000682")]
	[Address(RVA = "0xCC3A6C", Offset = "0xCC3A6C", VA = "0xCC3A6C")]
	public ButtonState()
	{
	}
}
[Token(Token = "0x2000154")]
public class ChangeFOV : MonoBehaviour
{
	[Token(Token = "0x40006C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float fovSliderValue;

	[Token(Token = "0x40006C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float _last;

	[Token(Token = "0x40006C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private string fovString;

	[Token(Token = "0x40006C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string lastString;

	[Token(Token = "0x40006C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Camera camera;

	[Token(Token = "0x40006C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool showGUI;

	[Token(Token = "0x6000683")]
	[Address(RVA = "0xCC3A74", Offset = "0xCC3A74", VA = "0xCC3A74")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000684")]
	[Address(RVA = "0xCC3AC8", Offset = "0xCC3AC8", VA = "0xCC3AC8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000685")]
	[Address(RVA = "0xCC3ACC", Offset = "0xCC3ACC", VA = "0xCC3ACC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000686")]
	[Address(RVA = "0xCC3AF8", Offset = "0xCC3AF8", VA = "0xCC3AF8")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000687")]
	[Address(RVA = "0xCC3C5C", Offset = "0xCC3C5C", VA = "0xCC3C5C")]
	public static string CleanStringForFloat(string input)
	{
		return null;
	}

	[Token(Token = "0x6000688")]
	[Address(RVA = "0xCC3D5C", Offset = "0xCC3D5C", VA = "0xCC3D5C")]
	public static string CleanStringForInt(string input)
	{
		return null;
	}

	[Token(Token = "0x6000689")]
	[Address(RVA = "0xCC3E5C", Offset = "0xCC3E5C", VA = "0xCC3E5C")]
	public ChangeFOV()
	{
	}
}
[Token(Token = "0x2000155")]
public class EnableWithEvent : MonoBehaviour
{
	[Token(Token = "0x40006C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject enableObj;

	[Token(Token = "0x600068A")]
	[Address(RVA = "0xCC3E6C", Offset = "0xCC3E6C", VA = "0xCC3E6C")]
	private void Start()
	{
	}

	[Token(Token = "0x600068B")]
	[Address(RVA = "0xCC3E70", Offset = "0xCC3E70", VA = "0xCC3E70")]
	private void Update()
	{
	}

	[Token(Token = "0x600068C")]
	[Address(RVA = "0xCC3E74", Offset = "0xCC3E74", VA = "0xCC3E74")]
	public void EnableObject()
	{
	}

	[Token(Token = "0x600068D")]
	[Address(RVA = "0xCC3E94", Offset = "0xCC3E94", VA = "0xCC3E94")]
	public EnableWithEvent()
	{
	}
}
[Token(Token = "0x2000156")]
public class FadeAfterEnable : MonoBehaviour
{
	[Token(Token = "0x40006C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float delay;

	[Token(Token = "0x40006CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float value;

	[Token(Token = "0x40006CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float duration;

	[Token(Token = "0x40006CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject[] objectToFade;

	[Token(Token = "0x600068E")]
	[Address(RVA = "0xCC3E9C", Offset = "0xCC3E9C", VA = "0xCC3E9C")]
	private void Start()
	{
	}

	[Token(Token = "0x600068F")]
	[Address(RVA = "0xCC3EA0", Offset = "0xCC3EA0", VA = "0xCC3EA0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000690")]
	[Address(RVA = "0xCC3FA8", Offset = "0xCC3FA8", VA = "0xCC3FA8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000691")]
	[Address(RVA = "0xCC406C", Offset = "0xCC406C", VA = "0xCC406C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000692")]
	[Address(RVA = "0xCC4074", Offset = "0xCC4074", VA = "0xCC4074")]
	private void Fade()
	{
	}

	[Token(Token = "0x6000693")]
	[Address(RVA = "0xCC41CC", Offset = "0xCC41CC", VA = "0xCC41CC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000694")]
	[Address(RVA = "0xCC41D0", Offset = "0xCC41D0", VA = "0xCC41D0")]
	public FadeAfterEnable()
	{
	}
}
[Token(Token = "0x2000157")]
public class FollowCamera : MonoBehaviour
{
	[Token(Token = "0x40006CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform camera;

	[Token(Token = "0x40006CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float distance;

	[Token(Token = "0x6000695")]
	[Address(RVA = "0xCC41D8", Offset = "0xCC41D8", VA = "0xCC41D8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000696")]
	[Address(RVA = "0xCC425C", Offset = "0xCC425C", VA = "0xCC425C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000697")]
	[Address(RVA = "0xCC443C", Offset = "0xCC443C", VA = "0xCC443C")]
	public FollowCamera()
	{
	}
}
[Token(Token = "0x2000158")]
public class LookAtCamera : MonoBehaviour
{
	[Token(Token = "0x40006CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform camera;

	[Token(Token = "0x6000698")]
	[Address(RVA = "0xCC4444", Offset = "0xCC4444", VA = "0xCC4444")]
	private void Start()
	{
	}

	[Token(Token = "0x6000699")]
	[Address(RVA = "0xCC4470", Offset = "0xCC4470", VA = "0xCC4470")]
	private void Update()
	{
	}

	[Token(Token = "0x600069A")]
	[Address(RVA = "0xCC44FC", Offset = "0xCC44FC", VA = "0xCC44FC")]
	public LookAtCamera()
	{
	}
}
[Token(Token = "0x2000159")]
public class MenuFollowCamera : MonoBehaviour
{
	[Token(Token = "0x40006D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform camera;

	[Token(Token = "0x40006D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float distance;

	[Token(Token = "0x40006D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float speed;

	[Token(Token = "0x600069B")]
	[Address(RVA = "0xCC4504", Offset = "0xCC4504", VA = "0xCC4504")]
	private void Start()
	{
	}

	[Token(Token = "0x600069C")]
	[Address(RVA = "0xCC4530", Offset = "0xCC4530", VA = "0xCC4530")]
	private void Update()
	{
	}

	[Token(Token = "0x600069D")]
	[Address(RVA = "0xCC473C", Offset = "0xCC473C", VA = "0xCC473C")]
	public MenuFollowCamera()
	{
	}
}
[Token(Token = "0x200015A")]
public class MenuScroll : MonoBehaviour
{
	[Token(Token = "0x40006D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ScrollRect scrollRect;

	[Token(Token = "0x40006D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float speed;

	[Token(Token = "0x40006D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float velocity;

	[Token(Token = "0x40006D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int pos;

	[Token(Token = "0x40006D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int size;

	[Token(Token = "0x600069E")]
	[Address(RVA = "0xCC4744", Offset = "0xCC4744", VA = "0xCC4744")]
	private void Start()
	{
	}

	[Token(Token = "0x600069F")]
	[Address(RVA = "0xCC483C", Offset = "0xCC483C", VA = "0xCC483C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60006A0")]
	[Address(RVA = "0xCC4840", Offset = "0xCC4840", VA = "0xCC4840")]
	private void Update()
	{
	}

	[Token(Token = "0x60006A1")]
	[Address(RVA = "0xCC494C", Offset = "0xCC494C", VA = "0xCC494C")]
	public MenuScroll()
	{
	}
}
[Token(Token = "0x200015B")]
public class PrototypeTransition : MonoBehaviour
{
	[Token(Token = "0x60006A2")]
	[Address(RVA = "0xCC4954", Offset = "0xCC4954", VA = "0xCC4954")]
	private void Start()
	{
	}

	[Token(Token = "0x60006A3")]
	[Address(RVA = "0xCC4958", Offset = "0xCC4958", VA = "0xCC4958")]
	private void Update()
	{
	}

	[Token(Token = "0x60006A4")]
	[Address(RVA = "0xCC495C", Offset = "0xCC495C", VA = "0xCC495C")]
	public void MoveUp()
	{
	}

	[Token(Token = "0x60006A5")]
	[Address(RVA = "0xCC4988", Offset = "0xCC4988", VA = "0xCC4988")]
	public void MoveDown()
	{
	}

	[Token(Token = "0x60006A6")]
	[Address(RVA = "0xCC49B4", Offset = "0xCC49B4", VA = "0xCC49B4")]
	public PrototypeTransition()
	{
	}
}
[Token(Token = "0x200015C")]
public enum RefreshRates
{
	[Token(Token = "0x40006D9")]
	r72 = 72,
	[Token(Token = "0x40006DA")]
	r90 = 90,
	[Token(Token = "0x40006DB")]
	r120 = 120
}
[Token(Token = "0x200015D")]
public class QuestGraphicsSettings : MonoBehaviour
{
	[Token(Token = "0x40006DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool _enableSpacewarpOnStart;

	[Token(Token = "0x40006DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[SerializeField]
	private bool _useDynamicFFR;

	[Token(Token = "0x40006DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private RefreshRates _standardFramerate;

	[Token(Token = "0x60006A7")]
	[Address(RVA = "0xCC49BC", Offset = "0xCC49BC", VA = "0xCC49BC")]
	private void Start()
	{
	}

	[Token(Token = "0x60006A8")]
	[Address(RVA = "0xCC49C0", Offset = "0xCC49C0", VA = "0xCC49C0")]
	public static void SetSpaceWarp(bool enable)
	{
	}

	[Token(Token = "0x60006A9")]
	[Address(RVA = "0xCC49C4", Offset = "0xCC49C4", VA = "0xCC49C4")]
	public QuestGraphicsSettings()
	{
	}
}
[Token(Token = "0x200015E")]
public class RandomizeAnimationStart : MonoBehaviour
{
	[Token(Token = "0x40006DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator animator;

	[Token(Token = "0x40006E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool randomizeTime;

	[Token(Token = "0x40006E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool randomizeSpeed;

	[Token(Token = "0x40006E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float minSpeed;

	[Token(Token = "0x40006E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float maxSpeed;

	[Token(Token = "0x60006AA")]
	[Address(RVA = "0xCC49DC", Offset = "0xCC49DC", VA = "0xCC49DC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006AB")]
	[Address(RVA = "0xCC4A68", Offset = "0xCC4A68", VA = "0xCC4A68")]
	private void Start()
	{
	}

	[Token(Token = "0x60006AC")]
	[Address(RVA = "0xCC4B00", Offset = "0xCC4B00", VA = "0xCC4B00")]
	private void Update()
	{
	}

	[Token(Token = "0x60006AD")]
	[Address(RVA = "0xCC4B04", Offset = "0xCC4B04", VA = "0xCC4B04")]
	public RandomizeAnimationStart()
	{
	}
}
[Token(Token = "0x200015F")]
[ExecuteInEditMode]
public class regenerate : MonoBehaviour
{
	[Token(Token = "0x40006E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool generate;

	[Token(Token = "0x40006E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject newParent;

	[Token(Token = "0x40006E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject Farmer;

	[Token(Token = "0x40006E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject Woman;

	[Token(Token = "0x40006E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject Boy;

	[Token(Token = "0x40006E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject Girl;

	[Token(Token = "0x60006AE")]
	[Address(RVA = "0xCC4B0C", Offset = "0xCC4B0C", VA = "0xCC4B0C")]
	private void Start()
	{
	}

	[Token(Token = "0x60006AF")]
	[Address(RVA = "0xCC4B10", Offset = "0xCC4B10", VA = "0xCC4B10")]
	private void Update()
	{
	}

	[Token(Token = "0x60006B0")]
	[Address(RVA = "0xCC4DB0", Offset = "0xCC4DB0", VA = "0xCC4DB0")]
	public regenerate()
	{
	}
}
[Token(Token = "0x2000160")]
[ExecuteInEditMode]
public class RemoveMissing : MonoBehaviour
{
	[Token(Token = "0x40006EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool generate;

	[Token(Token = "0x60006B1")]
	[Address(RVA = "0xCC4DB8", Offset = "0xCC4DB8", VA = "0xCC4DB8")]
	private void Start()
	{
	}

	[Token(Token = "0x60006B2")]
	[Address(RVA = "0xCC4DBC", Offset = "0xCC4DBC", VA = "0xCC4DBC")]
	private void Update()
	{
	}

	[Token(Token = "0x60006B3")]
	[Address(RVA = "0xCC4EE0", Offset = "0xCC4EE0", VA = "0xCC4EE0")]
	public RemoveMissing()
	{
	}
}
[Token(Token = "0x2000161")]
[ExecuteInEditMode]
public class ReplaceCameraShader : MonoBehaviour
{
	[Token(Token = "0x40006EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Camera mainCamera;

	[Token(Token = "0x40006EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Camera cameraComp;

	[Token(Token = "0x40006ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Shader replacedWith;

	[Token(Token = "0x40006EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly string targetTextureName;

	[Token(Token = "0x40006EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static readonly string targetDepthName;

	[Token(Token = "0x40006F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private RenderTexture target;

	[Token(Token = "0x40006F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private RenderTexture targetDepth;

	[Token(Token = "0x60006B4")]
	[Address(RVA = "0xCC4EE8", Offset = "0xCC4EE8", VA = "0xCC4EE8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60006B5")]
	[Address(RVA = "0xCC50BC", Offset = "0xCC50BC", VA = "0xCC50BC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60006B6")]
	[Address(RVA = "0xCC5208", Offset = "0xCC5208", VA = "0xCC5208")]
	public ReplaceCameraShader()
	{
	}
}
[Token(Token = "0x2000162")]
public class RotateDesk : MonoBehaviour
{
	[Token(Token = "0x60006B8")]
	[Address(RVA = "0xCC529C", Offset = "0xCC529C", VA = "0xCC529C")]
	public void CloseDesk()
	{
	}

	[Token(Token = "0x60006B9")]
	[Address(RVA = "0xCC55AC", Offset = "0xCC55AC", VA = "0xCC55AC")]
	public void EnableInteractions()
	{
	}

	[Token(Token = "0x60006BA")]
	[Address(RVA = "0xCC55FC", Offset = "0xCC55FC", VA = "0xCC55FC")]
	public void MoveAway()
	{
	}

	[Token(Token = "0x60006BB")]
	[Address(RVA = "0xCC56DC", Offset = "0xCC56DC", VA = "0xCC56DC")]
	public RotateDesk()
	{
	}
}
[Token(Token = "0x2000163")]
public class RotationTransition : MonoBehaviour
{
	[Token(Token = "0x40006F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform tweenTransform;

	[Token(Token = "0x40006F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float duration;

	[Token(Token = "0x40006F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float delay;

	[Token(Token = "0x40006F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Ease ease;

	[Token(Token = "0x60006BC")]
	[Address(RVA = "0xCC56E4", Offset = "0xCC56E4", VA = "0xCC56E4")]
	private void Start()
	{
	}

	[Token(Token = "0x60006BD")]
	[Address(RVA = "0xCC5788", Offset = "0xCC5788", VA = "0xCC5788")]
	private void Update()
	{
	}

	[Token(Token = "0x60006BE")]
	[Address(RVA = "0xCC578C", Offset = "0xCC578C", VA = "0xCC578C")]
	public RotationTransition()
	{
	}
}
[Token(Token = "0x2000164")]
public class SceneFrame : MonoBehaviour
{
	[Token(Token = "0x40006F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float distanceToAnimate;

	[Token(Token = "0x40006F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float duration;

	[Token(Token = "0x40006F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 pos0;

	[Token(Token = "0x40006F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 pos1;

	[Token(Token = "0x60006BF")]
	[Address(RVA = "0xCC5794", Offset = "0xCC5794", VA = "0xCC5794")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006C0")]
	[Address(RVA = "0xCC58D0", Offset = "0xCC58D0", VA = "0xCC58D0")]
	private void Start()
	{
	}

	[Token(Token = "0x60006C1")]
	[Address(RVA = "0xCC59A4", Offset = "0xCC59A4", VA = "0xCC59A4")]
	private void Update()
	{
	}

	[Token(Token = "0x60006C2")]
	[Address(RVA = "0xCC59A8", Offset = "0xCC59A8", VA = "0xCC59A8")]
	public SceneFrame()
	{
	}
}
[Token(Token = "0x2000165")]
public class CloseApplication : MonoBehaviour
{
	[Token(Token = "0x60006C3")]
	[Address(RVA = "0xCC59B0", Offset = "0xCC59B0", VA = "0xCC59B0")]
	public void DoCloseApplication()
	{
	}

	[Token(Token = "0x60006C4")]
	[Address(RVA = "0xCC59B8", Offset = "0xCC59B8", VA = "0xCC59B8")]
	public CloseApplication()
	{
	}
}
[Token(Token = "0x2000166")]
public class GoToBeginning : MonoBehaviour
{
	[Token(Token = "0x2000168")]
	[CompilerGenerated]
	private sealed class <GoToStart>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GoToBeginning <>4__this;

		[Token(Token = "0x170000CB")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006CE")]
			[Address(RVA = "0xCC6218", Offset = "0xCC6218", VA = "0xCC6218", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000CC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006D0")]
			[Address(RVA = "0xCC6260", Offset = "0xCC6260", VA = "0xCC6260", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006CB")]
		[Address(RVA = "0xCC5A48", Offset = "0xCC5A48", VA = "0xCC5A48")]
		[DebuggerHidden]
		public <GoToStart>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x60006CC")]
		[Address(RVA = "0xCC5B80", Offset = "0xCC5B80", VA = "0xCC5B80", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006CD")]
		[Address(RVA = "0xCC5B84", Offset = "0xCC5B84", VA = "0xCC5B84", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006CF")]
		[Address(RVA = "0xCC6220", Offset = "0xCC6220", VA = "0xCC6220", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40006FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static float waitseconds;

	[Token(Token = "0x40006FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static string[] neverDestroyObjects;

	[Token(Token = "0x40006FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Scene emptyScene;

	[Token(Token = "0x60006C5")]
	[Address(RVA = "0xCC59C0", Offset = "0xCC59C0", VA = "0xCC59C0")]
	public void DoGoToStart()
	{
	}

	[Token(Token = "0x60006C6")]
	[Address(RVA = "0xCC59E0", Offset = "0xCC59E0", VA = "0xCC59E0")]
	[IteratorStateMachine(typeof(<GoToStart>d__4))]
	private IEnumerator GoToStart()
	{
		return null;
	}

	[Token(Token = "0x60006C7")]
	[Address(RVA = "0xCC5A70", Offset = "0xCC5A70", VA = "0xCC5A70")]
	public GoToBeginning()
	{
	}
}
[Serializable]
[Token(Token = "0x2000169")]
public class ScenePicker : MonoBehaviour
{
	[Token(Token = "0x4000701")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public string scenePath;

	[Token(Token = "0x60006D1")]
	[Address(RVA = "0xCC6268", Offset = "0xCC6268", VA = "0xCC6268")]
	public ScenePicker()
	{
	}
}
[Token(Token = "0x200016A")]
public class ScrollingCloud : MonoBehaviour
{
	[Token(Token = "0x200016B")]
	private enum State
	{
		[Token(Token = "0x400070D")]
		Spawning,
		[Token(Token = "0x400070E")]
		Scrolling,
		[Token(Token = "0x400070F")]
		Despawning
	}

	[Token(Token = "0x4000702")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PathCreator path;

	[Token(Token = "0x4000703")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float moveSpeed;

	[Token(Token = "0x4000704")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float despawnY;

	[Token(Token = "0x4000705")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float spawnSpeed;

	[Token(Token = "0x4000706")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 velocity;

	[Token(Token = "0x4000707")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private State state;

	[Token(Token = "0x4000708")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float tSpeed;

	[Token(Token = "0x4000709")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float t;

	[Token(Token = "0x400070A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float y;

	[Token(Token = "0x400070B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private VertexPath pathData;

	[Token(Token = "0x60006D2")]
	[Address(RVA = "0xCC6270", Offset = "0xCC6270", VA = "0xCC6270")]
	private void Start()
	{
	}

	[Token(Token = "0x60006D3")]
	[Address(RVA = "0xCC62B4", Offset = "0xCC62B4", VA = "0xCC62B4")]
	private void StartScrolling()
	{
	}

	[Token(Token = "0x60006D4")]
	[Address(RVA = "0xCC6314", Offset = "0xCC6314", VA = "0xCC6314")]
	private void Update()
	{
	}

	[Token(Token = "0x60006D5")]
	[Address(RVA = "0xCC65FC", Offset = "0xCC65FC", VA = "0xCC65FC")]
	private void Spawn()
	{
	}

	[Token(Token = "0x60006D6")]
	[Address(RVA = "0xCC6480", Offset = "0xCC6480", VA = "0xCC6480")]
	private void Despawn()
	{
	}

	[Token(Token = "0x60006D7")]
	[Address(RVA = "0xCC685C", Offset = "0xCC685C", VA = "0xCC685C")]
	public ScrollingCloud()
	{
	}
}
[Token(Token = "0x200016C")]
[ExecuteInEditMode]
public class CropField : MonoBehaviour
{
	[Token(Token = "0x200016D")]
	[CompilerGenerated]
	private sealed class <DoGrowCrop>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000719")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400071A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CropField <>4__this;

		[Token(Token = "0x400071B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 position;

		[Token(Token = "0x400071C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ParticleSystem farPrefab;

		[Token(Token = "0x400071D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ParticleSystem shinePartsPrefab;

		[Token(Token = "0x400071E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float maxRadius;

		[Token(Token = "0x400071F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject nearPrefab;

		[Token(Token = "0x4000720")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ParticleSystem <farParts>5__2;

		[Token(Token = "0x4000721")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ParticleSystem <shineParts>5__3;

		[Token(Token = "0x4000722")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float <prevRad>5__4;

		[Token(Token = "0x4000723")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float <radius>5__5;

		[Token(Token = "0x170000CD")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006E2")]
			[Address(RVA = "0xCC7520", Offset = "0xCC7520", VA = "0xCC7520", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000CE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006E4")]
			[Address(RVA = "0xCC7568", Offset = "0xCC7568", VA = "0xCC7568", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006DF")]
		[Address(RVA = "0xCC6B10", Offset = "0xCC6B10", VA = "0xCC6B10")]
		[DebuggerHidden]
		public <DoGrowCrop>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x60006E0")]
		[Address(RVA = "0xCC6F28", Offset = "0xCC6F28", VA = "0xCC6F28", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006E1")]
		[Address(RVA = "0xCC6F2C", Offset = "0xCC6F2C", VA = "0xCC6F2C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006E3")]
		[Address(RVA = "0xCC7528", Offset = "0xCC7528", VA = "0xCC7528", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000710")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector2 size;

	[Token(Token = "0x4000711")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int rowCount;

	[Token(Token = "0x4000712")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float rowWidth;

	[Token(Token = "0x4000713")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float spacing;

	[Token(Token = "0x4000714")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioSource growSound;

	[Token(Token = "0x4000715")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioClipGroup growSounds;

	[Token(Token = "0x4000716")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float speed;

	[Token(Token = "0x4000717")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	[HideInInspector]
	private float spread;

	[Token(Token = "0x60006D8")]
	[Address(RVA = "0xCC6870", Offset = "0xCC6870", VA = "0xCC6870")]
	public bool CheckIfLandedOnCropRow(Vector3 worldPosition)
	{
		return default(bool);
	}

	[Token(Token = "0x60006D9")]
	[Address(RVA = "0xCC693C", Offset = "0xCC693C", VA = "0xCC693C")]
	private int GetRow(Vector3 worldPosition)
	{
		return default(int);
	}

	[Token(Token = "0x60006DA")]
	[Address(RVA = "0xCC69AC", Offset = "0xCC69AC", VA = "0xCC69AC")]
	public void GrowCrop(Vector3 position, GameObject nearPrefab, ParticleSystem farPrefab, [Optional] ParticleSystem shineParts)
	{
	}

	[Token(Token = "0x60006DB")]
	[Address(RVA = "0xCC69C4", Offset = "0xCC69C4", VA = "0xCC69C4")]
	public void GrowCrop(Vector3 position, GameObject nearPrefab, ParticleSystem farPrefab, float maxRadius, [Optional] ParticleSystem shineParts)
	{
	}

	[Token(Token = "0x60006DC")]
	[Address(RVA = "0xCC6A58", Offset = "0xCC6A58", VA = "0xCC6A58")]
	[IteratorStateMachine(typeof(<DoGrowCrop>d__12))]
	private IEnumerator DoGrowCrop(Vector3 position, GameObject nearPrefab, ParticleSystem farPrefab, float maxRadius, [Optional] ParticleSystem shinePartsPrefab)
	{
		return null;
	}

	[Token(Token = "0x60006DD")]
	[Address(RVA = "0xCC6B38", Offset = "0xCC6B38", VA = "0xCC6B38")]
	private void SpawnPlant(Vector3 pos, float radius, GameObject nearPrefab, ParticleSystem farParts, Vector3 center, [Optional] ParticleSystem shineParts)
	{
	}

	[Token(Token = "0x60006DE")]
	[Address(RVA = "0xCC6F0C", Offset = "0xCC6F0C", VA = "0xCC6F0C")]
	public CropField()
	{
	}
}
[Token(Token = "0x200016E")]
public class Flower : MonoBehaviour
{
	[Token(Token = "0x200016F")]
	[CompilerGenerated]
	private sealed class <Plant>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400072A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400072B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Flower <>4__this;

		[Token(Token = "0x400072C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 <initialScale>5__2;

		[Token(Token = "0x400072D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 <targetScale>5__3;

		[Token(Token = "0x400072E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <startTime>5__4;

		[Token(Token = "0x400072F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float <endTime>5__5;

		[Token(Token = "0x170000CF")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006F0")]
			[Address(RVA = "0xCC7F00", Offset = "0xCC7F00", VA = "0xCC7F00", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006F2")]
			[Address(RVA = "0xCC7F48", Offset = "0xCC7F48", VA = "0xCC7F48", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006ED")]
		[Address(RVA = "0xCC793C", Offset = "0xCC793C", VA = "0xCC793C")]
		[DebuggerHidden]
		public <Plant>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x60006EE")]
		[Address(RVA = "0xCC7A7C", Offset = "0xCC7A7C", VA = "0xCC7A7C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006EF")]
		[Address(RVA = "0xCC7A80", Offset = "0xCC7A80", VA = "0xCC7A80", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006F1")]
		[Address(RVA = "0xCC7F08", Offset = "0xCC7F08", VA = "0xCC7F08", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000724")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float overTime;

	[Token(Token = "0x4000725")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Animation animation;

	[Token(Token = "0x4000726")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Queue<Flower> flowers;

	[Token(Token = "0x4000727")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static int maxFlowers;

	[Token(Token = "0x4000728")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int id;

	[Token(Token = "0x60006E5")]
	[Address(RVA = "0xCC7570", Offset = "0xCC7570", VA = "0xCC7570")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006E6")]
	[Address(RVA = "0xCC7884", Offset = "0xCC7884", VA = "0xCC7884")]
	private void Start()
	{
	}

	[Token(Token = "0x60006E7")]
	[Address(RVA = "0xCC78D0", Offset = "0xCC78D0", VA = "0xCC78D0")]
	public void RandomColor()
	{
	}

	[Token(Token = "0x60006E8")]
	[Address(RVA = "0xCC78D4", Offset = "0xCC78D4", VA = "0xCC78D4")]
	[IteratorStateMachine(typeof(<Plant>d__8))]
	private IEnumerator Plant()
	{
		return null;
	}

	[Token(Token = "0x60006E9")]
	[Address(RVA = "0xCC76C4", Offset = "0xCC76C4", VA = "0xCC76C4")]
	private void Despawn()
	{
	}

	[Token(Token = "0x60006EA")]
	[Address(RVA = "0xCC7964", Offset = "0xCC7964", VA = "0xCC7964")]
	private void OnDespawnComplete()
	{
	}

	[Token(Token = "0x60006EB")]
	[Address(RVA = "0xCC79D0", Offset = "0xCC79D0", VA = "0xCC79D0")]
	public Flower()
	{
	}
}
[Token(Token = "0x2000170")]
public class ParticleSeeds : MonoBehaviour
{
	[Token(Token = "0x2000171")]
	public enum SeedBehaviour
	{
		[Token(Token = "0x4000741")]
		Particles,
		[Token(Token = "0x4000742")]
		ParticlesAndGrow,
		[Token(Token = "0x4000743")]
		GrowSlow,
		[Token(Token = "0x4000744")]
		Field
	}

	[Token(Token = "0x2000172")]
	[CompilerGenerated]
	private sealed class <GrowCoroutine>d__25 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000745")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000746")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Collider collider;

		[Token(Token = "0x4000748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ParticleSeeds <>4__this;

		[Token(Token = "0x4000749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform <transform>5__2;

		[Token(Token = "0x400074A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ParticleSystem <parts>5__3;

		[Token(Token = "0x400074B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <length>5__4;

		[Token(Token = "0x400074C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int <i>5__5;

		[Token(Token = "0x170000D1")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000701")]
			[Address(RVA = "0xCC8F30", Offset = "0xCC8F30", VA = "0xCC8F30", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D2")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000703")]
			[Address(RVA = "0xCC8F78", Offset = "0xCC8F78", VA = "0xCC8F78", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006FE")]
		[Address(RVA = "0xCC8888", Offset = "0xCC8888", VA = "0xCC8888")]
		[DebuggerHidden]
		public <GrowCoroutine>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x60006FF")]
		[Address(RVA = "0xCC892C", Offset = "0xCC892C", VA = "0xCC892C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000700")]
		[Address(RVA = "0xCC8930", Offset = "0xCC8930", VA = "0xCC8930", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000702")]
		[Address(RVA = "0xCC8F38", Offset = "0xCC8F38", VA = "0xCC8F38", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000730")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private SeedBehaviour seedBehaviour;

	[Token(Token = "0x4000731")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleSystem ps;

	[Token(Token = "0x4000732")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject flowerPrefab;

	[Token(Token = "0x4000733")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ParticleSystem flowerParticlePrefab;

	[Token(Token = "0x4000734")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ParticleSystem feedbackParticles;

	[Token(Token = "0x4000735")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int growSeeds;

	[Token(Token = "0x4000736")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public int seedsToPlant;

	[Token(Token = "0x4000737")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float plantRadius;

	[Token(Token = "0x4000738")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AudioClipGroup scatterSound;

	[Token(Token = "0x4000739")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Collider[] collider;

	[Token(Token = "0x400073A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<int> collided;

	[Token(Token = "0x400073B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Transform flowers;

	[Token(Token = "0x400073C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public UnityAction<int> onSeedPlanted;

	[Token(Token = "0x400073D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private ProportionValue<bool>[] fastOne;

	[Token(Token = "0x400073E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private int particleNum;

	[Token(Token = "0x400073F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private bool landed;

	[Token(Token = "0x60006F3")]
	[Address(RVA = "0xCC7F50", Offset = "0xCC7F50", VA = "0xCC7F50")]
	public void SetFlowersTransform(Transform flowers)
	{
	}

	[Token(Token = "0x60006F4")]
	[Address(RVA = "0xCC7F58", Offset = "0xCC7F58", VA = "0xCC7F58")]
	public void SetSeedCount(int num)
	{
	}

	[Token(Token = "0x60006F5")]
	[Address(RVA = "0xCC807C", Offset = "0xCC807C", VA = "0xCC807C")]
	public void AutoDestruct()
	{
	}

	[Token(Token = "0x60006F6")]
	[Address(RVA = "0xCC80CC", Offset = "0xCC80CC", VA = "0xCC80CC")]
	public void SetBehaviour(SeedBehaviour behaviour)
	{
	}

	[Token(Token = "0x60006F7")]
	[Address(RVA = "0xCC80D4", Offset = "0xCC80D4", VA = "0xCC80D4")]
	public void SetColliders(Collider[] collider)
	{
	}

	[Token(Token = "0x60006F8")]
	[Address(RVA = "0xCC80DC", Offset = "0xCC80DC", VA = "0xCC80DC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60006F9")]
	[Address(RVA = "0xCC80E0", Offset = "0xCC80E0", VA = "0xCC80E0")]
	private void Destroy()
	{
	}

	[Token(Token = "0x60006FA")]
	[Address(RVA = "0xCC814C", Offset = "0xCC814C", VA = "0xCC814C")]
	private void OnParticleTrigger()
	{
	}

	[Token(Token = "0x60006FB")]
	[Address(RVA = "0xCC8708", Offset = "0xCC8708", VA = "0xCC8708")]
	[IteratorStateMachine(typeof(<GrowCoroutine>d__25))]
	private IEnumerator GrowCoroutine(Collider collider)
	{
		return null;
	}

	[Token(Token = "0x60006FC")]
	[Address(RVA = "0xCC877C", Offset = "0xCC877C", VA = "0xCC877C")]
	private void SeedPlanted(Collider collider, Vector3 pos)
	{
	}

	[Token(Token = "0x60006FD")]
	[Address(RVA = "0xCC88B0", Offset = "0xCC88B0", VA = "0xCC88B0")]
	public ParticleSeeds()
	{
	}
}
[Token(Token = "0x2000173")]
public class SelectBook : MonoBehaviour
{
	[Token(Token = "0x6000704")]
	[Address(RVA = "0xCC8F80", Offset = "0xCC8F80", VA = "0xCC8F80")]
	private void Start()
	{
	}

	[Token(Token = "0x6000705")]
	[Address(RVA = "0xCC8F84", Offset = "0xCC8F84", VA = "0xCC8F84")]
	private void Update()
	{
	}

	[Token(Token = "0x6000706")]
	[Address(RVA = "0xCC8F88", Offset = "0xCC8F88", VA = "0xCC8F88")]
	public SelectBook()
	{
	}
}
[Token(Token = "0x2000174")]
public class Settings : SettingsBase
{
	[Serializable]
	[Token(Token = "0x2000175")]
	public class MixerSetting
	{
		[Token(Token = "0x400074E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string sourceName;

		[Token(Token = "0x400074F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string clipName;

		[Token(Token = "0x4000750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float volume;

		[Token(Token = "0x4000751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float minDistance;

		[Token(Token = "0x4000752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float maxDistance;

		[Token(Token = "0x600070C")]
		[Address(RVA = "0xCC9194", Offset = "0xCC9194", VA = "0xCC9194")]
		public MixerSetting()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000176")]
	public class Profile
	{
		[Token(Token = "0x4000753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MixerSetting[] mixerSettings;

		[Token(Token = "0x600070D")]
		[Address(RVA = "0xCC919C", Offset = "0xCC919C", VA = "0xCC919C")]
		public MixerSetting FindSourceClip(string sourceName, string clipName)
		{
			return null;
		}

		[Token(Token = "0x600070E")]
		[Address(RVA = "0xCC9504", Offset = "0xCC9504", VA = "0xCC9504")]
		public void SetValue(AudioSource aSource)
		{
		}

		[Token(Token = "0x600070F")]
		[Address(RVA = "0xCC9748", Offset = "0xCC9748", VA = "0xCC9748")]
		public Profile()
		{
		}
	}

	[Token(Token = "0x400074D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Profile settings;

	[Token(Token = "0x6000707")]
	[Address(RVA = "0xCC8F90", Offset = "0xCC8F90", VA = "0xCC8F90")]
	protected Profile GetSettings()
	{
		return null;
	}

	[Token(Token = "0x6000708")]
	[Address(RVA = "0xCC8F98", Offset = "0xCC8F98", VA = "0xCC8F98", Slot = "4")]
	public override void Load()
	{
	}

	[Token(Token = "0x6000709")]
	[Address(RVA = "0xCC0668", Offset = "0xCC0668", VA = "0xCC0668")]
	public void Create(string json)
	{
	}

	[Token(Token = "0x600070A")]
	[Address(RVA = "0xCC9148", Offset = "0xCC9148", VA = "0xCC9148", Slot = "5")]
	public override void Save()
	{
	}

	[Token(Token = "0x600070B")]
	[Address(RVA = "0xCC918C", Offset = "0xCC918C", VA = "0xCC918C")]
	public Settings()
	{
	}
}
[Token(Token = "0x2000177")]
public class SettingsBase : MonoBehaviour
{
	[Token(Token = "0x4000754")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool useEditorSettings;

	[Token(Token = "0x4000755")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string settingsFilename;

	[Token(Token = "0x4000756")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string[] _settingFiles;

	[Token(Token = "0x4000757")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int _settingFileID;

	[Token(Token = "0x6000710")]
	[Address(RVA = "0xCC9750", Offset = "0xCC9750", VA = "0xCC9750")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000711")]
	[Address(RVA = "0xCC975C", Offset = "0xCC975C", VA = "0xCC975C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000712")]
	[Address(RVA = "0xCC9760", Offset = "0xCC9760", VA = "0xCC9760", Slot = "4")]
	public virtual void Load()
	{
	}

	[Token(Token = "0x6000713")]
	[Address(RVA = "0xCC9764", Offset = "0xCC9764", VA = "0xCC9764", Slot = "5")]
	public virtual void Save()
	{
	}

	[Token(Token = "0x6000714")]
	[Address(RVA = "0xCC9768", Offset = "0xCC9768", VA = "0xCC9768", Slot = "6")]
	public virtual string SettingsFolderPath()
	{
		return null;
	}

	[Token(Token = "0x6000715")]
	[Address(RVA = "0xCC9800", Offset = "0xCC9800", VA = "0xCC9800")]
	public string SettingsFilePath()
	{
		return null;
	}

	[Token(Token = "0x6000716")]
	[Address(RVA = "0xCC98D8", Offset = "0xCC98D8", VA = "0xCC98D8")]
	public string[] SettingFiles()
	{
		return null;
	}

	[Token(Token = "0x6000717")]
	[Address(RVA = "0xCC98E0", Offset = "0xCC98E0", VA = "0xCC98E0")]
	public int SettingFileID()
	{
		return default(int);
	}

	[Token(Token = "0x6000718")]
	[Address(RVA = "0xCC98E8", Offset = "0xCC98E8", VA = "0xCC98E8")]
	public SettingsBase()
	{
	}
}
[Token(Token = "0x2000178")]
public class setValues : MonoBehaviour
{
	[Token(Token = "0x6000719")]
	[Address(RVA = "0xCC9964", Offset = "0xCC9964", VA = "0xCC9964")]
	private void Start()
	{
	}

	[Token(Token = "0x600071A")]
	[Address(RVA = "0xCC9A14", Offset = "0xCC9A14", VA = "0xCC9A14")]
	private void Update()
	{
	}

	[Token(Token = "0x600071B")]
	[Address(RVA = "0xCC9A18", Offset = "0xCC9A18", VA = "0xCC9A18")]
	public setValues()
	{
	}
}
[Token(Token = "0x2000179")]
public class Singleton<T> : MonoBehaviour where T : MonoBehaviour
{
	[Token(Token = "0x4000758")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static T instance;

	[Token(Token = "0x170000D3")]
	public static T Instance
	{
		[Token(Token = "0x600071C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600071D")]
	public Singleton()
	{
	}
}
[Token(Token = "0x200017A")]
public class SlidePhoto : MonoBehaviour
{
	[Token(Token = "0x4000759")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float delay;

	[Token(Token = "0x400075A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform target;

	[Token(Token = "0x400075B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform parent;

	[Token(Token = "0x600071E")]
	[Address(RVA = "0xCC9A20", Offset = "0xCC9A20", VA = "0xCC9A20")]
	private void Start()
	{
	}

	[Token(Token = "0x600071F")]
	[Address(RVA = "0xCC9A24", Offset = "0xCC9A24", VA = "0xCC9A24")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000720")]
	[Address(RVA = "0xCC9A74", Offset = "0xCC9A74", VA = "0xCC9A74")]
	public void Slide()
	{
	}

	[Token(Token = "0x6000721")]
	[Address(RVA = "0xCC9BE8", Offset = "0xCC9BE8", VA = "0xCC9BE8")]
	public void MakeInteractive()
	{
	}

	[Token(Token = "0x6000722")]
	[Address(RVA = "0xCC9BEC", Offset = "0xCC9BEC", VA = "0xCC9BEC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000723")]
	[Address(RVA = "0xCC9BF0", Offset = "0xCC9BF0", VA = "0xCC9BF0")]
	public SlidePhoto()
	{
	}
}
[Token(Token = "0x200017B")]
public class SmootTransform : MonoBehaviour
{
	[Token(Token = "0x400075C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform origin;

	[Token(Token = "0x400075D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float posLerp;

	[Token(Token = "0x400075E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float rotLerp;

	[Token(Token = "0x6000724")]
	[Address(RVA = "0xCC9BF8", Offset = "0xCC9BF8", VA = "0xCC9BF8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000725")]
	[Address(RVA = "0xCC9BFC", Offset = "0xCC9BFC", VA = "0xCC9BFC")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000726")]
	[Address(RVA = "0xCC9D40", Offset = "0xCC9D40", VA = "0xCC9D40")]
	public SmootTransform()
	{
	}
}
[Token(Token = "0x200017C")]
[DefaultExecutionOrder(-1)]
public class StayInGaze : MonoBehaviour
{
	[Token(Token = "0x400075F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float maxAngle;

	[Token(Token = "0x4000760")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float maxDistance;

	[Token(Token = "0x4000761")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float minDistance;

	[Token(Token = "0x4000762")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Range(-89.9f, 89.9f)]
	public float eyeLevelOffset;

	[Token(Token = "0x4000763")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool faceCamera;

	[Token(Token = "0x6000727")]
	[Address(RVA = "0xCC9D48", Offset = "0xCC9D48", VA = "0xCC9D48")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000728")]
	[Address(RVA = "0xCCA554", Offset = "0xCCA554", VA = "0xCCA554")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000729")]
	[Address(RVA = "0xCC9D60", Offset = "0xCC9D60", VA = "0xCC9D60")]
	private void Center(float maxAngle, float minDistance, float maxDistance, float eyeLevelMin, float eyeLevelMax)
	{
	}

	[Token(Token = "0x600072A")]
	[Address(RVA = "0xCCA56C", Offset = "0xCCA56C", VA = "0xCCA56C")]
	private void Update()
	{
	}

	[Token(Token = "0x600072B")]
	[Address(RVA = "0xCCA57C", Offset = "0xCCA57C", VA = "0xCCA57C")]
	public StayInGaze()
	{
	}
}
[Token(Token = "0x200017D")]
public class ParticleFollowCamera : MonoBehaviour
{
	[Token(Token = "0x4000764")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform camera;

	[Token(Token = "0x4000765")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform rect;

	[Token(Token = "0x4000766")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform child;

	[Token(Token = "0x4000767")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float multiplier;

	[Token(Token = "0x4000768")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float distance;

	[Token(Token = "0x4000769")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float speed;

	[Token(Token = "0x400076A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float dot;

	[Token(Token = "0x400076B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float angle;

	[Token(Token = "0x400076C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float delta;

	[Token(Token = "0x400076D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float minDot;

	[Token(Token = "0x400076E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float maxDot;

	[Token(Token = "0x400076F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ParticleSystem ps;

	[Token(Token = "0x600072C")]
	[Address(RVA = "0xCCA598", Offset = "0xCCA598", VA = "0xCCA598")]
	private void Update()
	{
	}

	[Token(Token = "0x600072D")]
	[Address(RVA = "0xCCA95C", Offset = "0xCCA95C", VA = "0xCCA95C")]
	public ParticleFollowCamera()
	{
	}
}
[Token(Token = "0x200017E")]
public class RectFollowCamera : MonoBehaviour
{
	[Token(Token = "0x4000770")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform camera;

	[Token(Token = "0x4000771")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform rect;

	[Token(Token = "0x4000772")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float multiplier;

	[Token(Token = "0x4000773")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float distance;

	[Token(Token = "0x4000774")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float speed;

	[Token(Token = "0x4000775")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float dot;

	[Token(Token = "0x4000776")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float angle;

	[Token(Token = "0x4000777")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float delta;

	[Token(Token = "0x4000778")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float minDot;

	[Token(Token = "0x4000779")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float maxDot;

	[Token(Token = "0x600072E")]
	[Address(RVA = "0xCCA964", Offset = "0xCCA964", VA = "0xCCA964")]
	private void Update()
	{
	}

	[Token(Token = "0x600072F")]
	[Address(RVA = "0xCCAD60", Offset = "0xCCAD60", VA = "0xCCAD60")]
	public RectFollowCamera()
	{
	}
}
[Token(Token = "0x200017F")]
public class StoryRectangle : MonoBehaviour
{
	[Token(Token = "0x400077A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject storyHintPrefab;

	[Token(Token = "0x400077B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool isLooking;

	[Token(Token = "0x400077C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float maxAngle;

	[Token(Token = "0x400077D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform m_Camera;

	[Token(Token = "0x400077E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3[] pos;

	[Token(Token = "0x400077F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GameObject storyHint;

	[Token(Token = "0x4000780")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public LineRenderer line;

	[Token(Token = "0x4000781")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public LineRenderer[] vertical;

	[Token(Token = "0x6000730")]
	[Address(RVA = "0xCCAD68", Offset = "0xCCAD68", VA = "0xCCAD68")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000731")]
	[Address(RVA = "0xCCAEBC", Offset = "0xCCAEBC", VA = "0xCCAEBC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000732")]
	[Address(RVA = "0xCCAEC0", Offset = "0xCCAEC0", VA = "0xCCAEC0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000733")]
	[Address(RVA = "0xCCB2B4", Offset = "0xCCB2B4", VA = "0xCCB2B4")]
	public void DestroyStoryRectangle()
	{
	}

	[Token(Token = "0x6000734")]
	[Address(RVA = "0xCCB324", Offset = "0xCCB324", VA = "0xCCB324")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000735")]
	[Address(RVA = "0xCCB51C", Offset = "0xCCB51C", VA = "0xCCB51C")]
	public StoryRectangle()
	{
	}
}
[Token(Token = "0x2000180")]
public class SuitcaseItem : MonoBehaviour
{
	[Token(Token = "0x6000736")]
	[Address(RVA = "0xCCB524", Offset = "0xCCB524", VA = "0xCCB524")]
	public SuitcaseItem()
	{
	}
}
[Token(Token = "0x2000181")]
public class SuitcaseLid : MonoBehaviour
{
	[Token(Token = "0x4000782")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent Opening;

	[Token(Token = "0x4000783")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent OpenComplete;

	[Token(Token = "0x4000784")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent Closing;

	[Token(Token = "0x4000785")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent CloseComplete;

	[Token(Token = "0x6000737")]
	[Address(RVA = "0xCCB52C", Offset = "0xCCB52C", VA = "0xCCB52C")]
	public void EnableObjectInteractions()
	{
	}

	[Token(Token = "0x6000738")]
	[Address(RVA = "0xCCB548", Offset = "0xCCB548", VA = "0xCCB548")]
	public void Open()
	{
	}

	[Token(Token = "0x6000739")]
	[Address(RVA = "0xCCB564", Offset = "0xCCB564", VA = "0xCCB564")]
	public void Close()
	{
	}

	[Token(Token = "0x600073A")]
	[Address(RVA = "0xCCB580", Offset = "0xCCB580", VA = "0xCCB580")]
	public void OnClosed()
	{
	}

	[Token(Token = "0x600073B")]
	[Address(RVA = "0xCCB59C", Offset = "0xCCB59C", VA = "0xCCB59C")]
	public void OnOpened()
	{
	}

	[Token(Token = "0x600073C")]
	[Address(RVA = "0xCCB5B8", Offset = "0xCCB5B8", VA = "0xCCB5B8")]
	public SuitcaseLid()
	{
	}
}
[Token(Token = "0x2000182")]
public class CameraController : MonoBehaviour
{
	[Token(Token = "0x4000786")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static CameraController _instance;

	[Token(Token = "0x4000787")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float RotationSmoothFactor;

	[Token(Token = "0x4000788")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float MouseLookSensitivity;

	[Token(Token = "0x4000789")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool LockYaw;

	[Token(Token = "0x400078A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector2 PitchClamp;

	[Token(Token = "0x400078B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 _targetCameraRotation;

	[Token(Token = "0x400078C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 _currentCameraRotation;

	[Token(Token = "0x400078D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float _defaultY;

	[Token(Token = "0x400078E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool _shaking;

	[Token(Token = "0x400078F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Camera _camera;

	[Token(Token = "0x4000790")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool _rotationControl;

	[Token(Token = "0x4000791")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Vector3 _savedTargetRotation;

	[Token(Token = "0x4000792")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector3 _savedCurrentRotation;

	[Token(Token = "0x4000793")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private Vector2 _savedPitchClamp;

	[Token(Token = "0x4000794")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float _savedSmoothFactor;

	[Token(Token = "0x4000795")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float _savedSensitivity;

	[Token(Token = "0x4000796")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float _savedFoV;

	[Token(Token = "0x170000D4")]
	public static CameraController Instance
	{
		[Token(Token = "0x600073D")]
		[Address(RVA = "0xCCB5C0", Offset = "0xCCB5C0", VA = "0xCCB5C0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000D5")]
	public Vector3 CurrentCameraRotation
	{
		[Token(Token = "0x600073E")]
		[Address(RVA = "0xCCB684", Offset = "0xCCB684", VA = "0xCCB684")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x600073F")]
	[Address(RVA = "0xCCB690", Offset = "0xCCB690", VA = "0xCCB690")]
	private void Start()
	{
	}

	[Token(Token = "0x6000740")]
	[Address(RVA = "0xCCB794", Offset = "0xCCB794", VA = "0xCCB794")]
	private void OnPreRender()
	{
	}

	[Token(Token = "0x6000741")]
	[Address(RVA = "0xCCB82C", Offset = "0xCCB82C", VA = "0xCCB82C")]
	public void ReParent(Transform newParent, Vector3 localPos)
	{
	}

	[Token(Token = "0x6000742")]
	[Address(RVA = "0xCCB8A0", Offset = "0xCCB8A0", VA = "0xCCB8A0")]
	public void PushSettings()
	{
	}

	[Token(Token = "0x6000743")]
	[Address(RVA = "0xCCB8F8", Offset = "0xCCB8F8", VA = "0xCCB8F8")]
	public void PopSettings()
	{
	}

	[Token(Token = "0x6000744")]
	[Address(RVA = "0xCCB94C", Offset = "0xCCB94C", VA = "0xCCB94C")]
	public void ApplyStarSphereSettings()
	{
	}

	[Token(Token = "0x6000745")]
	[Address(RVA = "0xCCB9E8", Offset = "0xCCB9E8", VA = "0xCCB9E8")]
	public void UpdateRotation()
	{
	}

	[Token(Token = "0x6000746")]
	[Address(RVA = "0xCCBD48", Offset = "0xCCBD48", VA = "0xCCBD48")]
	public static void Rotate(Vector3 deltaRotation)
	{
	}

	[Token(Token = "0x6000747")]
	[Address(RVA = "0xCCBDC4", Offset = "0xCCBDC4", VA = "0xCCBDC4")]
	public static void StartShaking()
	{
	}

	[Token(Token = "0x6000748")]
	[Address(RVA = "0xCCBDE4", Offset = "0xCCBDE4", VA = "0xCCBDE4")]
	public static void StopShaking()
	{
	}

	[Token(Token = "0x6000749")]
	[Address(RVA = "0xCCBE00", Offset = "0xCCBE00", VA = "0xCCBE00")]
	public CameraController()
	{
	}
}
[Token(Token = "0x2000183")]
public class Player : MonoBehaviour
{
	[Token(Token = "0x4000797")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Player _instance;

	[Token(Token = "0x4000798")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform _cameraTransform;

	[Token(Token = "0x4000799")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private CharacterController _charController;

	[Token(Token = "0x400079A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private CameraController _cameraController;

	[Token(Token = "0x400079B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Transform _fpsItemPivot;

	[Token(Token = "0x400079C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float _yForce;

	[Token(Token = "0x400079D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float _walkSpeed;

	[Token(Token = "0x400079E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float _crouchSpeedFactor;

	[Token(Token = "0x400079F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float _jumpForce;

	[Token(Token = "0x40007A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float _stickToGroundForce;

	[Token(Token = "0x40007A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float _gravity;

	[Token(Token = "0x40007A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool _crouched;

	[Token(Token = "0x40007A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float _cameraHeightNormal;

	[Token(Token = "0x40007A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float _cameraHeightCrouch;

	[Token(Token = "0x170000D6")]
	public static Player Instance
	{
		[Token(Token = "0x600074A")]
		[Address(RVA = "0xCCBE1C", Offset = "0xCCBE1C", VA = "0xCCBE1C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000D7")]
	public Vector3 Forward
	{
		[Token(Token = "0x600074B")]
		[Address(RVA = "0xCCBEE8", Offset = "0xCCBEE8", VA = "0xCCBEE8")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x600074C")]
	[Address(RVA = "0xCCBF04", Offset = "0xCCBF04", VA = "0xCCBF04")]
	private void Awake()
	{
	}

	[Token(Token = "0x600074D")]
	[Address(RVA = "0xCCBF50", Offset = "0xCCBF50", VA = "0xCCBF50")]
	private void Update()
	{
	}

	[Token(Token = "0x600074E")]
	[Address(RVA = "0xCCBF80", Offset = "0xCCBF80", VA = "0xCCBF80")]
	private void UpdateMovement()
	{
	}

	[Token(Token = "0x600074F")]
	[Address(RVA = "0xCCC4A4", Offset = "0xCCC4A4", VA = "0xCCC4A4")]
	private void UpdateCrouch()
	{
	}

	[Token(Token = "0x6000750")]
	[Address(RVA = "0xCCC568", Offset = "0xCCC568", VA = "0xCCC568")]
	private void UpdateItemHold()
	{
	}

	[Token(Token = "0x6000751")]
	[Address(RVA = "0xCCC670", Offset = "0xCCC670", VA = "0xCCC670")]
	public Player()
	{
	}
}
[Token(Token = "0x2000184")]
public class TwinCameraController : MonoBehaviour
{
	[Token(Token = "0x40007A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Camera _activeCamera;

	[Token(Token = "0x40007A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Camera _hiddenCamera;

	[Token(Token = "0x40007A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private CommandBuffer _depthHackBuffer;

	[Token(Token = "0x40007A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Renderer _depthHackQuad;

	[Token(Token = "0x40007A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public RenderTexture rt;

	[Token(Token = "0x6000752")]
	[Address(RVA = "0xCCC698", Offset = "0xCCC698", VA = "0xCCC698")]
	public void SwapCameras()
	{
	}

	[Token(Token = "0x6000753")]
	[Address(RVA = "0xCCC700", Offset = "0xCCC700", VA = "0xCCC700")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000754")]
	[Address(RVA = "0xCCC6FC", Offset = "0xCCC6FC", VA = "0xCCC6FC")]
	private void DoDepthHack()
	{
	}

	[Token(Token = "0x6000755")]
	[Address(RVA = "0xCCC8B8", Offset = "0xCCC8B8", VA = "0xCCC8B8")]
	public TwinCameraController()
	{
	}
}
[Token(Token = "0x2000185")]
public class UniverseController : MonoBehaviour
{
	[Token(Token = "0x2000186")]
	[CompilerGenerated]
	private sealed class <SwapAsync>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UniverseController <>4__this;

		[Token(Token = "0x40007BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <t>5__2;

		[Token(Token = "0x170000D9")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000760")]
			[Address(RVA = "0xCCCEC0", Offset = "0xCCCEC0", VA = "0xCCCEC0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000762")]
			[Address(RVA = "0xCCCF08", Offset = "0xCCCF08", VA = "0xCCCF08", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600075D")]
		[Address(RVA = "0xCCCB24", Offset = "0xCCCB24", VA = "0xCCCB24")]
		[DebuggerHidden]
		public <SwapAsync>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x600075E")]
		[Address(RVA = "0xCCCB60", Offset = "0xCCCB60", VA = "0xCCCB60", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600075F")]
		[Address(RVA = "0xCCCB64", Offset = "0xCCCB64", VA = "0xCCCB64", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000761")]
		[Address(RVA = "0xCCCEC8", Offset = "0xCCCEC8", VA = "0xCCCEC8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40007AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TwinCameraController _twinCameras;

	[Token(Token = "0x40007AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Header("Swap Effect Stuff")]
	private Vingette _vingette;

	[Token(Token = "0x40007AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AnimationCurve _innerVingette;

	[Token(Token = "0x40007AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AnimationCurve _outerVingette;

	[Token(Token = "0x40007AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private AnimationCurve _saturation;

	[Token(Token = "0x40007B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Camera[] _cameras;

	[Token(Token = "0x40007B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private AnimationCurve _fov;

	[Token(Token = "0x40007B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private AnimationCurve _timeScale;

	[Token(Token = "0x40007B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Transform _itemTransform;

	[Token(Token = "0x40007B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private AnimationCurve _itemPosition;

	[Token(Token = "0x40007B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private AudioSource _audio;

	[Token(Token = "0x40007B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool _swapTiggered;

	[Token(Token = "0x40007B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private readonly float _swapTime;

	[Token(Token = "0x170000D8")]
	public static bool Swapping
	{
		[Token(Token = "0x6000756")]
		[Address(RVA = "0xCCC8C0", Offset = "0xCCC8C0", VA = "0xCCC8C0")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000757")]
		[Address(RVA = "0xCCC908", Offset = "0xCCC908", VA = "0xCCC908")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000758")]
	[Address(RVA = "0xCCC954", Offset = "0xCCC954", VA = "0xCCC954")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000759")]
	[Address(RVA = "0xCCC9D8", Offset = "0xCCC9D8", VA = "0xCCC9D8")]
	private void SwapUniverses()
	{
	}

	[Token(Token = "0x600075A")]
	[Address(RVA = "0xCCCAA4", Offset = "0xCCCAA4", VA = "0xCCCAA4")]
	private void Update()
	{
	}

	[Token(Token = "0x600075B")]
	[Address(RVA = "0xCCCA3C", Offset = "0xCCCA3C", VA = "0xCCCA3C")]
	[IteratorStateMachine(typeof(<SwapAsync>d__20))]
	private IEnumerator SwapAsync()
	{
		return null;
	}

	[Token(Token = "0x600075C")]
	[Address(RVA = "0xCCCB4C", Offset = "0xCCCB4C", VA = "0xCCCB4C")]
	public UniverseController()
	{
	}
}
[Token(Token = "0x2000187")]
[ExecuteInEditMode]
public class Vingette : MonoBehaviour
{
	[Token(Token = "0x40007BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Shader _shader;

	[Token(Token = "0x40007BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Range(0f, 1f)]
	public float MinRadius;

	[Token(Token = "0x40007BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Range(0f, 1f)]
	public float MaxRadius;

	[Token(Token = "0x40007BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Range(0f, 1f)]
	public float Saturation;

	[Token(Token = "0x40007C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Material _material;

	[Token(Token = "0x6000763")]
	[Address(RVA = "0xCCCF10", Offset = "0xCCCF10", VA = "0xCCCF10")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000764")]
	[Address(RVA = "0xCCCF78", Offset = "0xCCCF78", VA = "0xCCCF78")]
	private void OnRenderImage(RenderTexture src, RenderTexture dst)
	{
	}

	[Token(Token = "0x6000765")]
	[Address(RVA = "0xCCD078", Offset = "0xCCD078", VA = "0xCCD078")]
	public Vingette()
	{
	}
}
[Token(Token = "0x2000188")]
public class TimedEvent : MonoBehaviour
{
	[Token(Token = "0x40007C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float delay;

	[Token(Token = "0x6000766")]
	[Address(RVA = "0xCCD094", Offset = "0xCCD094", VA = "0xCCD094")]
	private void Start()
	{
	}

	[Token(Token = "0x6000767")]
	[Address(RVA = "0xCCD098", Offset = "0xCCD098", VA = "0xCCD098")]
	private void Update()
	{
	}

	[Token(Token = "0x6000768")]
	[Address(RVA = "0xCCD09C", Offset = "0xCCD09C", VA = "0xCCD09C")]
	public TimedEvent()
	{
	}
}
[Token(Token = "0x2000189")]
public class DotweenPath : MonoBehaviour
{
	[Token(Token = "0x40007C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public DG.Tweening.Plugins.Core.PathCore.Path path;

	[Token(Token = "0x40007C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform target;

	[Token(Token = "0x40007C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public PathType type;

	[Token(Token = "0x40007C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3[] waypoints;

	[Token(Token = "0x40007C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3[] worldPoints;

	[Token(Token = "0x6000769")]
	[Address(RVA = "0xCCD0A4", Offset = "0xCCD0A4", VA = "0xCCD0A4")]
	private void UpdatePath()
	{
	}

	[Token(Token = "0x600076A")]
	[Address(RVA = "0xCCD1A4", Offset = "0xCCD1A4", VA = "0xCCD1A4")]
	public Tween DoPath(Transform target, float speed)
	{
		return null;
	}

	[Token(Token = "0x600076B")]
	[Address(RVA = "0xCCD25C", Offset = "0xCCD25C", VA = "0xCCD25C")]
	public DotweenPath()
	{
	}
}
[Token(Token = "0x200018A")]
public class GridFloorControlBehaviour : PlayableBehaviour
{
	[Token(Token = "0x600076C")]
	[Address(RVA = "0xCCD2C4", Offset = "0xCCD2C4", VA = "0xCCD2C4", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x600076D")]
	[Address(RVA = "0xCCD2F4", Offset = "0xCCD2F4", VA = "0xCCD2F4")]
	public GridFloorControlBehaviour()
	{
	}
}
[Token(Token = "0x200018B")]
public abstract class GridFloorControlClip : PlayableAsset
{
	[Token(Token = "0x600076E")]
	[Address(RVA = "0xCCD2FC", Offset = "0xCCD2FC", VA = "0xCCD2FC")]
	protected GridFloorControlClip()
	{
	}
}
[Token(Token = "0x200018C")]
[TrackBindingType(typeof(GridFloorReference))]
[TrackClipType(typeof(GridFloorControlClip))]
public class GridFloorControlTrack : PlayableTrack
{
	[Token(Token = "0x600076F")]
	[Address(RVA = "0xCCD304", Offset = "0xCCD304", VA = "0xCCD304", Slot = "29")]
	public override void GatherProperties(PlayableDirector director, IPropertyCollector driver)
	{
	}

	[Token(Token = "0x6000770")]
	private void AddObject<T>(IPropertyCollector driver, T ob, GameObject owner) where T : Component
	{
	}

	[Token(Token = "0x6000771")]
	[Address(RVA = "0xCCD30C", Offset = "0xCCD30C", VA = "0xCCD30C")]
	public GridFloorControlTrack()
	{
	}
}
[Serializable]
[Token(Token = "0x200018D")]
public class GridFloorEnabledBehaviour : PlayableBehaviour
{
	[Token(Token = "0x40007C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool enabled;

	[Token(Token = "0x40007C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private GridFloor floor;

	[Token(Token = "0x6000772")]
	[Address(RVA = "0xCCD314", Offset = "0xCCD314", VA = "0xCCD314", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x6000773")]
	[Address(RVA = "0xCCD46C", Offset = "0xCCD46C", VA = "0xCCD46C")]
	public GridFloorEnabledBehaviour()
	{
	}
}
[Token(Token = "0x200018E")]
public class GridFloorEnabledClip : GridFloorControlClip, ITimelineClipAsset
{
	[Token(Token = "0x40007C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GridFloorEnabledBehaviour template;

	[Token(Token = "0x170000DB")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x6000774")]
		[Address(RVA = "0xCCD474", Offset = "0xCCD474", VA = "0xCCD474", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x6000775")]
	[Address(RVA = "0xCCD47C", Offset = "0xCCD47C", VA = "0xCCD47C", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000776")]
	[Address(RVA = "0xCCD524", Offset = "0xCCD524", VA = "0xCCD524")]
	public GridFloorEnabledClip()
	{
	}
}
[Serializable]
[Token(Token = "0x200018F")]
public class GridFloorMaterialChangeBehaviour : PlayableBehaviour
{
	[Token(Token = "0x2000190")]
	public enum FlipPattern
	{
		[Token(Token = "0x40007D0")]
		RadialIn,
		[Token(Token = "0x40007D1")]
		RadialOut
	}

	[Token(Token = "0x2000191")]
	public enum FlipAxis
	{
		[Token(Token = "0x40007D3")]
		X,
		[Token(Token = "0x40007D4")]
		Y
	}

	[Token(Token = "0x40007CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Material[] newMaterials;

	[Token(Token = "0x40007CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public FlipPattern flipPattern;

	[Token(Token = "0x40007CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector3 patternAxis;

	[Token(Token = "0x40007CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public FlipAxis flipAxis;

	[Token(Token = "0x40007CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Range(0f, 0.999f)]
	public float flipSpeed;

	[Token(Token = "0x6000777")]
	[Address(RVA = "0xCCD58C", Offset = "0xCCD58C", VA = "0xCCD58C", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x6000778")]
	[Address(RVA = "0xCCDC74", Offset = "0xCCDC74", VA = "0xCCDC74")]
	private float GetTileRadiusTime(GridTile tile, float maxRadius)
	{
		return default(float);
	}

	[Token(Token = "0x6000779")]
	[Address(RVA = "0xCCDD14", Offset = "0xCCDD14", VA = "0xCCDD14")]
	private void FlipTile(GridTile c)
	{
	}

	[Token(Token = "0x600077A")]
	[Address(RVA = "0xCCDD18", Offset = "0xCCDD18", VA = "0xCCDD18")]
	public GridFloorMaterialChangeBehaviour()
	{
	}
}
[Token(Token = "0x2000192")]
public class GridFloorMaterialChangeClip : GridFloorControlClip, ITimelineClipAsset
{
	[Token(Token = "0x40007D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GridFloorMaterialChangeBehaviour template;

	[Token(Token = "0x170000DC")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x600077B")]
		[Address(RVA = "0xCCDD20", Offset = "0xCCDD20", VA = "0xCCDD20", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x600077C")]
	[Address(RVA = "0xCCDD28", Offset = "0xCCDD28", VA = "0xCCDD28", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x600077D")]
	[Address(RVA = "0xCCDDD0", Offset = "0xCCDDD0", VA = "0xCCDDD0")]
	public GridFloorMaterialChangeClip()
	{
	}
}
[Serializable]
[Token(Token = "0x2000193")]
public class SetParentBehaviour : PlayableBehaviour
{
	[Token(Token = "0x40007D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Transform newParent;

	[Token(Token = "0x600077E")]
	[Address(RVA = "0xCCDDD8", Offset = "0xCCDDD8", VA = "0xCCDDD8")]
	public SetParentBehaviour()
	{
	}
}
[Token(Token = "0x2000194")]
public class SetParentMixerBehaviour : PlayableBehaviour
{
	[Token(Token = "0x40007D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public SetParentTrack track;

	[Token(Token = "0x40007D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PlayableDirector director;

	[Token(Token = "0x40007D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform binding;

	[Token(Token = "0x600077F")]
	[Address(RVA = "0xCCDDE0", Offset = "0xCCDDE0", VA = "0xCCDDE0", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x6000780")]
	[Address(RVA = "0xCCE09C", Offset = "0xCCE09C", VA = "0xCCE09C", Slot = "14")]
	public override void OnGraphStop(Playable playable)
	{
	}

	[Token(Token = "0x6000781")]
	[Address(RVA = "0xCCE178", Offset = "0xCCE178", VA = "0xCCE178")]
	public SetParentMixerBehaviour()
	{
	}
}
[Token(Token = "0x2000195")]
public class SetParentPlayable : PlayableAsset
{
	[Token(Token = "0x40007DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ExposedReference<Transform> newParent;

	[Token(Token = "0x6000782")]
	[Address(RVA = "0xCCE180", Offset = "0xCCE180", VA = "0xCCE180", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000783")]
	[Address(RVA = "0xCCE2AC", Offset = "0xCCE2AC", VA = "0xCCE2AC")]
	public SetParentPlayable()
	{
	}
}
[Serializable]
[Token(Token = "0x2000196")]
[TrackClipType(typeof(SetParentPlayable))]
[TrackBindingType(typeof(Transform))]
public class SetParentTrack : TrackAsset
{
	[Token(Token = "0x40007DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public ExposedReference<Transform> defaultParent;

	[NonSerialized]
	[Token(Token = "0x40007DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	internal bool gotdefault;

	[Token(Token = "0x6000784")]
	[Address(RVA = "0xCCE2B4", Offset = "0xCCE2B4", VA = "0xCCE2B4", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000785")]
	[Address(RVA = "0xCCE408", Offset = "0xCCE408", VA = "0xCCE408", Slot = "29")]
	public override void GatherProperties(PlayableDirector director, IPropertyCollector driver)
	{
	}

	[Token(Token = "0x6000786")]
	[Address(RVA = "0xCCE410", Offset = "0xCCE410", VA = "0xCCE410")]
	public SetParentTrack()
	{
	}
}
[Token(Token = "0x2000197")]
public class SlideTransition : MonoBehaviour
{
	[Token(Token = "0x40007DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float moveSpeed;

	[Token(Token = "0x40007DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public DotweenPath path;

	[Token(Token = "0x6000787")]
	[Address(RVA = "0xCCE468", Offset = "0xCCE468", VA = "0xCCE468")]
	public void DoTransition()
	{
	}

	[Token(Token = "0x6000788")]
	[Address(RVA = "0xCCE500", Offset = "0xCCE500", VA = "0xCCE500")]
	public SlideTransition()
	{
	}
}
[Serializable]
[Token(Token = "0x2000198")]
public class ActivateTrapDoorBehaviour : PlayableBehaviour
{
	[Token(Token = "0x40007DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool active;

	[Token(Token = "0x6000789")]
	[Address(RVA = "0xCCE508", Offset = "0xCCE508", VA = "0xCCE508", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x600078A")]
	[Address(RVA = "0xCCE5F8", Offset = "0xCCE5F8", VA = "0xCCE5F8")]
	public ActivateTrapDoorBehaviour()
	{
	}
}
[Token(Token = "0x2000199")]
public class ActivateTrapDoorClip : TrapDoorControlClip
{
	[Token(Token = "0x40007E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ActivateTrapDoorBehaviour template;

	[Token(Token = "0x600078B")]
	[Address(RVA = "0xCCE600", Offset = "0xCCE600", VA = "0xCCE600", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x600078C")]
	[Address(RVA = "0xCCE6A8", Offset = "0xCCE6A8", VA = "0xCCE6A8")]
	public ActivateTrapDoorClip()
	{
	}
}
[Token(Token = "0x200019A")]
public abstract class TrapDoorControlClip : PlayableAsset
{
	[Token(Token = "0x600078D")]
	[Address(RVA = "0xCCE710", Offset = "0xCCE710", VA = "0xCCE710")]
	protected TrapDoorControlClip()
	{
	}
}
[Token(Token = "0x200019B")]
[TrackBindingType(typeof(GridTrapdoor))]
[TrackClipType(typeof(TrapDoorControlClip))]
public class TrapDoorControlTrack : TrackAsset
{
	[Token(Token = "0x600078E")]
	[Address(RVA = "0xCCE718", Offset = "0xCCE718", VA = "0xCCE718", Slot = "29")]
	public override void GatherProperties(PlayableDirector director, IPropertyCollector driver)
	{
	}

	[Token(Token = "0x600078F")]
	private void AddObject<T>(IPropertyCollector driver, GameObject owner, T ob) where T : Component
	{
	}

	[Token(Token = "0x6000790")]
	[Address(RVA = "0xCCE88C", Offset = "0xCCE88C", VA = "0xCCE88C")]
	public TrapDoorControlTrack()
	{
	}
}
[Serializable]
[Token(Token = "0x200019C")]
public class TrapDoorFlipBehaviour : PlayableBehaviour
{
	[Token(Token = "0x40007E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool flipped;

	[Token(Token = "0x6000791")]
	[Address(RVA = "0xCCE8E4", Offset = "0xCCE8E4", VA = "0xCCE8E4", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x6000792")]
	[Address(RVA = "0xCCEAFC", Offset = "0xCCEAFC", VA = "0xCCEAFC")]
	public TrapDoorFlipBehaviour()
	{
	}
}
[Token(Token = "0x200019D")]
public class TrapDoorFlipClip : TrapDoorControlClip
{
	[Token(Token = "0x40007E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TrapDoorFlipBehaviour template;

	[Token(Token = "0x6000793")]
	[Address(RVA = "0xCCEB04", Offset = "0xCCEB04", VA = "0xCCEB04", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000794")]
	[Address(RVA = "0xCCEBAC", Offset = "0xCCEBAC", VA = "0xCCEBAC")]
	public TrapDoorFlipClip()
	{
	}
}
[Serializable]
[Token(Token = "0x200019E")]
public class TrapDoorLowerBehaviour : PlayableBehaviour
{
	[Token(Token = "0x40007E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float distance;

	[Token(Token = "0x40007E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve easing;

	[Token(Token = "0x6000795")]
	[Address(RVA = "0xCCEBB4", Offset = "0xCCEBB4", VA = "0xCCEBB4", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x6000796")]
	[Address(RVA = "0xCCEF78", Offset = "0xCCEF78", VA = "0xCCEF78")]
	public TrapDoorLowerBehaviour()
	{
	}
}
[Token(Token = "0x200019F")]
public class TrapDoorLowerClip : TrapDoorControlClip
{
	[Token(Token = "0x40007E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TrapDoorLowerBehaviour template;

	[Token(Token = "0x6000797")]
	[Address(RVA = "0xCCEFAC", Offset = "0xCCEFAC", VA = "0xCCEFAC", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000798")]
	[Address(RVA = "0xCCF054", Offset = "0xCCF054", VA = "0xCCF054")]
	public TrapDoorLowerClip()
	{
	}
}
[Token(Token = "0x20001A0")]
public class WaitForStateAsset : PlayableAsset
{
	[Token(Token = "0x40007E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public BOD.State state;

	[Token(Token = "0x6000799")]
	[Address(RVA = "0xCCF05C", Offset = "0xCCF05C", VA = "0xCCF05C", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x600079A")]
	[Address(RVA = "0xCCF148", Offset = "0xCCF148", VA = "0xCCF148")]
	public WaitForStateAsset()
	{
	}
}
[Token(Token = "0x20001A1")]
public class WaitForStateBehaviour : PlayableBehaviour
{
	[Token(Token = "0x40007E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public BOD.State state;

	[Token(Token = "0x40007E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private PlayableDirector director;

	[Token(Token = "0x600079B")]
	[Address(RVA = "0xCCF150", Offset = "0xCCF150", VA = "0xCCF150", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x600079C")]
	[Address(RVA = "0xCCF2FC", Offset = "0xCCF2FC", VA = "0xCCF2FC", Slot = "15")]
	public override void OnPlayableCreate(Playable playable)
	{
	}

	[Token(Token = "0x600079D")]
	[Address(RVA = "0xCCF3D8", Offset = "0xCCF3D8", VA = "0xCCF3D8")]
	private void OnStateChange()
	{
	}

	[Token(Token = "0x600079E")]
	[Address(RVA = "0xCCF4A4", Offset = "0xCCF4A4", VA = "0xCCF4A4")]
	public WaitForStateBehaviour()
	{
	}
}
[Token(Token = "0x20001A2")]
public class TriggerOnEnable : MonoBehaviour
{
	[Token(Token = "0x20001A3")]
	[CompilerGenerated]
	private sealed class <EnableAfterFrame>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TriggerOnEnable <>4__this;

		[Token(Token = "0x170000DD")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60007A8")]
			[Address(RVA = "0xCCF708", Offset = "0xCCF708", VA = "0xCCF708", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007AA")]
			[Address(RVA = "0xCCF750", Offset = "0xCCF750", VA = "0xCCF750", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007A5")]
		[Address(RVA = "0xCCF5C8", Offset = "0xCCF5C8", VA = "0xCCF5C8")]
		[DebuggerHidden]
		public <EnableAfterFrame>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x60007A6")]
		[Address(RVA = "0xCCF5F8", Offset = "0xCCF5F8", VA = "0xCCF5F8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007A7")]
		[Address(RVA = "0xCCF5FC", Offset = "0xCCF5FC", VA = "0xCCF5FC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007A9")]
		[Address(RVA = "0xCCF710", Offset = "0xCCF710", VA = "0xCCF710", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40007E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent onEnable;

	[Token(Token = "0x40007EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent onDisable;

	[Token(Token = "0x40007EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float delay;

	[Token(Token = "0x40007EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float disableDelay;

	[Token(Token = "0x600079F")]
	[Address(RVA = "0xCCF4AC", Offset = "0xCCF4AC", VA = "0xCCF4AC")]
	private void Start()
	{
	}

	[Token(Token = "0x60007A0")]
	[Address(RVA = "0xCCF4B0", Offset = "0xCCF4B0", VA = "0xCCF4B0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60007A1")]
	[Address(RVA = "0xCCF538", Offset = "0xCCF538", VA = "0xCCF538")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60007A2")]
	[Address(RVA = "0xCCF5B4", Offset = "0xCCF5B4", VA = "0xCCF5B4")]
	private void DelayedDiableInvoke()
	{
	}

	[Token(Token = "0x60007A3")]
	[Address(RVA = "0xCCF4D0", Offset = "0xCCF4D0", VA = "0xCCF4D0")]
	[IteratorStateMachine(typeof(<EnableAfterFrame>d__8))]
	private IEnumerator EnableAfterFrame()
	{
		return null;
	}

	[Token(Token = "0x60007A4")]
	[Address(RVA = "0xCCF5F0", Offset = "0xCCF5F0", VA = "0xCCF5F0")]
	public TriggerOnEnable()
	{
	}
}
[Token(Token = "0x20001A4")]
public class ActivateAction : DelayedAction
{
	[Token(Token = "0x40007F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject target;

	[Token(Token = "0x40007F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool active;

	[Token(Token = "0x40007F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool toggle;

	[Token(Token = "0x60007AB")]
	[Address(RVA = "0xCCF758", Offset = "0xCCF758", VA = "0xCCF758", Slot = "4")]
	protected override void Action()
	{
	}

	[Token(Token = "0x60007AC")]
	[Address(RVA = "0xCCF81C", Offset = "0xCCF81C", VA = "0xCCF81C")]
	public ActivateAction()
	{
	}
}
[Token(Token = "0x20001A5")]
public abstract class CharacterDelayedAction : DelayedAction
{
	[Token(Token = "0x40007F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SCENE_CHARACTER characterID;

	[Token(Token = "0x60007AD")]
	[Address(RVA = "0xCCF82C", Offset = "0xCCF82C", VA = "0xCCF82C", Slot = "4")]
	protected override void Action()
	{
	}

	[Token(Token = "0x60007AE")]
	protected abstract void CharacterAction(GenericCharacter character);

	[Token(Token = "0x60007AF")]
	[Address(RVA = "0xCCF924", Offset = "0xCCF924", VA = "0xCCF924")]
	protected CharacterDelayedAction()
	{
	}
}
[Token(Token = "0x20001A6")]
public abstract class DelayedAction : MonoBehaviour
{
	[Token(Token = "0x20001A7")]
	[CompilerGenerated]
	private sealed class <WaitDelay>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DelayedAction <>4__this;

		[Token(Token = "0x170000DF")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60007B7")]
			[Address(RVA = "0xCCFAFC", Offset = "0xCCFAFC", VA = "0xCCFAFC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007B9")]
			[Address(RVA = "0xCCFB44", Offset = "0xCCFB44", VA = "0xCCFB44", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007B4")]
		[Address(RVA = "0xCCFA00", Offset = "0xCCFA00", VA = "0xCCFA00")]
		[DebuggerHidden]
		public <WaitDelay>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x60007B5")]
		[Address(RVA = "0xCCFA28", Offset = "0xCCFA28", VA = "0xCCFA28", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007B6")]
		[Address(RVA = "0xCCFA2C", Offset = "0xCCFA2C", VA = "0xCCFA2C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007B8")]
		[Address(RVA = "0xCCFB04", Offset = "0xCCFB04", VA = "0xCCFB04", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40007F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float delay;

	[Token(Token = "0x40007F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool everyEnable;

	[Token(Token = "0x40007F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	private bool triggered;

	[Token(Token = "0x60007B0")]
	[Address(RVA = "0xCCF92C", Offset = "0xCCF92C", VA = "0xCCF92C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60007B1")]
	[Address(RVA = "0xCCF998", Offset = "0xCCF998", VA = "0xCCF998")]
	[IteratorStateMachine(typeof(<WaitDelay>d__4))]
	private IEnumerator WaitDelay()
	{
		return null;
	}

	[Token(Token = "0x60007B2")]
	protected abstract void Action();

	[Token(Token = "0x60007B3")]
	[Address(RVA = "0xCCF824", Offset = "0xCCF824", VA = "0xCCF824")]
	protected DelayedAction()
	{
	}
}
[Token(Token = "0x20001A8")]
public class DestroyAction : DelayedAction
{
	[Token(Token = "0x40007FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject target;

	[Token(Token = "0x60007BA")]
	[Address(RVA = "0xCCFB4C", Offset = "0xCCFB4C", VA = "0xCCFB4C", Slot = "4")]
	protected override void Action()
	{
	}

	[Token(Token = "0x60007BB")]
	[Address(RVA = "0xCCFBE8", Offset = "0xCCFBE8", VA = "0xCCFBE8")]
	public DestroyAction()
	{
	}
}
[Token(Token = "0x20001A9")]
public class DestroyMultipleAction : DelayedAction
{
	[Token(Token = "0x40007FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<GameObject> objectsToDestroy;

	[Token(Token = "0x60007BC")]
	[Address(RVA = "0xCCFBF0", Offset = "0xCCFBF0", VA = "0xCCFBF0", Slot = "4")]
	protected override void Action()
	{
	}

	[Token(Token = "0x60007BD")]
	[Address(RVA = "0xCCFD88", Offset = "0xCCFD88", VA = "0xCCFD88")]
	public DestroyMultipleAction()
	{
	}
}
[Token(Token = "0x20001AA")]
public class SetParentTrigger : DelayedAction
{
	[Token(Token = "0x40007FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform target;

	[Token(Token = "0x40007FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform newParent;

	[Token(Token = "0x40007FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool setLocalPosision;

	[Token(Token = "0x40007FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Vector3 localPosition;

	[Token(Token = "0x4000800")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool setLocalRotation;

	[Token(Token = "0x4000801")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public Vector3 localRotation;

	[Token(Token = "0x4000802")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float lerpSpeed;

	[Token(Token = "0x4000803")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public Ease lerpEase;

	[Token(Token = "0x60007BE")]
	[Address(RVA = "0xCCFD90", Offset = "0xCCFD90", VA = "0xCCFD90", Slot = "4")]
	protected override void Action()
	{
	}

	[Token(Token = "0x60007BF")]
	[Address(RVA = "0xCCFF08", Offset = "0xCCFF08", VA = "0xCCFF08")]
	public SetParentTrigger()
	{
	}
}
[Token(Token = "0x20001AB")]
public class TweenTransform : MonoBehaviour
{
	[Token(Token = "0x4000804")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform tweenTransform;

	[Token(Token = "0x4000805")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float duration;

	[Token(Token = "0x4000806")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float delay;

	[Token(Token = "0x4000807")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Ease easeType;

	[Token(Token = "0x60007C0")]
	[Address(RVA = "0xCCFF70", Offset = "0xCCFF70", VA = "0xCCFF70")]
	private void Start()
	{
	}

	[Token(Token = "0x60007C1")]
	[Address(RVA = "0xCCFF74", Offset = "0xCCFF74", VA = "0xCCFF74")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60007C2")]
	[Address(RVA = "0xCD0018", Offset = "0xCD0018", VA = "0xCD0018")]
	private void Update()
	{
	}

	[Token(Token = "0x60007C3")]
	[Address(RVA = "0xCD001C", Offset = "0xCD001C", VA = "0xCD001C")]
	public TweenTransform()
	{
	}
}
[Token(Token = "0x20001AC")]
[RequireComponent(typeof(FadeTMProText))]
public class FadeTMPOnGrab : MonoBehaviour
{
	[Token(Token = "0x4000808")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private FadeTMProText fade;

	[Token(Token = "0x60007C4")]
	[Address(RVA = "0xCD0024", Offset = "0xCD0024", VA = "0xCD0024")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007C5")]
	[Address(RVA = "0xCD015C", Offset = "0xCD015C", VA = "0xCD015C")]
	private void OnRelease()
	{
	}

	[Token(Token = "0x60007C6")]
	[Address(RVA = "0xCD0198", Offset = "0xCD0198", VA = "0xCD0198")]
	private void OnGrab()
	{
	}

	[Token(Token = "0x60007C7")]
	[Address(RVA = "0xCD01C0", Offset = "0xCD01C0", VA = "0xCD01C0")]
	public FadeTMPOnGrab()
	{
	}
}
[Token(Token = "0x20001AD")]
[RequireComponent(typeof(TextMeshPro))]
public class FadeTMProText : MonoBehaviour
{
	[Token(Token = "0x4000809")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private TextMeshPro tmp;

	[Token(Token = "0x400080A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float fadeTime;

	[Token(Token = "0x400080B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float initAlpha;

	[Token(Token = "0x400080C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool isLocked;

	[Token(Token = "0x400080D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Tween fade;

	[Token(Token = "0x60007C8")]
	[Address(RVA = "0xCD01C8", Offset = "0xCD01C8", VA = "0xCD01C8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007C9")]
	[Address(RVA = "0xCD0218", Offset = "0xCD0218", VA = "0xCD0218")]
	private void Start()
	{
	}

	[Token(Token = "0x60007CA")]
	[Address(RVA = "0xCD023C", Offset = "0xCD023C", VA = "0xCD023C")]
	public void Lock(bool locked)
	{
	}

	[Token(Token = "0x60007CB")]
	[Address(RVA = "0xCD0190", Offset = "0xCD0190", VA = "0xCD0190")]
	public void FadeOut()
	{
	}

	[Token(Token = "0x60007CC")]
	[Address(RVA = "0xCD0248", Offset = "0xCD0248", VA = "0xCD0248")]
	public void FadeOut(TweenCallback onComplete)
	{
	}

	[Token(Token = "0x60007CD")]
	[Address(RVA = "0xCD01B8", Offset = "0xCD01B8", VA = "0xCD01B8")]
	public void FadeIn()
	{
	}

	[Token(Token = "0x60007CE")]
	[Address(RVA = "0xCD0300", Offset = "0xCD0300", VA = "0xCD0300")]
	public void FadeIn(TweenCallback onComplete)
	{
	}

	[Token(Token = "0x60007CF")]
	[Address(RVA = "0xCD03E4", Offset = "0xCD03E4", VA = "0xCD03E4")]
	public FadeTMProText()
	{
	}
}
[Serializable]
[Token(Token = "0x20001AE")]
public class ProgressEvent : UnityEvent<float>
{
	[Token(Token = "0x60007D0")]
	[Address(RVA = "0xCD03EC", Offset = "0xCD03EC", VA = "0xCD03EC")]
	public ProgressEvent()
	{
	}
}
[Token(Token = "0x20001AF")]
public interface IProgressProvider
{
	[Token(Token = "0x170000E1")]
	float progress
	{
		[Token(Token = "0x60007D1")]
		get;
	}

	[Token(Token = "0x170000E2")]
	bool progressChanged
	{
		[Token(Token = "0x60007D2")]
		get;
	}
}
[Token(Token = "0x20001B0")]
public class MaterialPropertyProgress : MonoBehaviour
{
	[Token(Token = "0x400080E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IProgressProvider progress;

	[Token(Token = "0x400080F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Renderer renderer;

	[Token(Token = "0x4000810")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int materialIndex;

	[Token(Token = "0x4000811")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string property;

	[Token(Token = "0x4000812")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Material material;

	[Token(Token = "0x4000813")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int p_Property;

	[Token(Token = "0x60007D3")]
	[Address(RVA = "0xCD0434", Offset = "0xCD0434", VA = "0xCD0434")]
	private void Start()
	{
	}

	[Token(Token = "0x60007D4")]
	[Address(RVA = "0xCD0538", Offset = "0xCD0538", VA = "0xCD0538")]
	private void Update()
	{
	}

	[Token(Token = "0x60007D5")]
	[Address(RVA = "0xCD05F4", Offset = "0xCD05F4", VA = "0xCD05F4")]
	private void OnProgress()
	{
	}

	[Token(Token = "0x60007D6")]
	[Address(RVA = "0xCD06B0", Offset = "0xCD06B0", VA = "0xCD06B0")]
	public MaterialPropertyProgress()
	{
	}
}
[Token(Token = "0x20001B1")]
public class PostEffectWeightProgress : MonoBehaviour
{
	[Token(Token = "0x4000814")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Volume volume;

	[Token(Token = "0x4000815")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float targetVol;

	[Token(Token = "0x60007D7")]
	[Address(RVA = "0xCD06B8", Offset = "0xCD06B8", VA = "0xCD06B8")]
	public void OnProgress(float progress)
	{
	}

	[Token(Token = "0x60007D8")]
	[Address(RVA = "0xCD06C0", Offset = "0xCD06C0", VA = "0xCD06C0")]
	public void Update()
	{
	}

	[Token(Token = "0x60007D9")]
	[Address(RVA = "0xCD0724", Offset = "0xCD0724", VA = "0xCD0724")]
	public PostEffectWeightProgress()
	{
	}
}
[Token(Token = "0x20001B2")]
public class ChangeMipBias : MonoBehaviour
{
	[Token(Token = "0x4000816")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float forcedBias;

	[Token(Token = "0x4000817")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Texture tex;

	[Token(Token = "0x60007DA")]
	[Address(RVA = "0xCD072C", Offset = "0xCD072C", VA = "0xCD072C")]
	private void Start()
	{
	}

	[Token(Token = "0x60007DB")]
	[Address(RVA = "0xCD0730", Offset = "0xCD0730", VA = "0xCD0730")]
	private void Update()
	{
	}

	[Token(Token = "0x60007DC")]
	[Address(RVA = "0xCD0734", Offset = "0xCD0734", VA = "0xCD0734")]
	public ChangeMipBias()
	{
	}
}
[Token(Token = "0x20001B3")]
[ExecuteInEditMode]
public class CopyColliders : MonoBehaviour
{
	[Token(Token = "0x4000818")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform sourceRoot;

	[Token(Token = "0x4000819")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform targetRoot;

	[Token(Token = "0x400081A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool copy;

	[Token(Token = "0x60007DD")]
	[Address(RVA = "0xCD0744", Offset = "0xCD0744", VA = "0xCD0744")]
	private void Start()
	{
	}

	[Token(Token = "0x60007DE")]
	[Address(RVA = "0xCD0748", Offset = "0xCD0748", VA = "0xCD0748")]
	private void Update()
	{
	}

	[Token(Token = "0x60007DF")]
	[Address(RVA = "0xCD0760", Offset = "0xCD0760", VA = "0xCD0760")]
	private void ColliderCopy(Transform src, Transform dst)
	{
	}

	[Token(Token = "0x60007E0")]
	[Address(RVA = "0xCD08F4", Offset = "0xCD08F4", VA = "0xCD08F4")]
	public CopyColliders()
	{
	}
}
[Token(Token = "0x20001B4")]
[ExecuteInEditMode]
public class CorrectAspectRatio : MonoBehaviour
{
	[Token(Token = "0x400081B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float scale;

	[Token(Token = "0x400081C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float _scale;

	[Token(Token = "0x60007E1")]
	[Address(RVA = "0xCD08FC", Offset = "0xCD08FC", VA = "0xCD08FC")]
	private void Start()
	{
	}

	[Token(Token = "0x60007E2")]
	[Address(RVA = "0xCD0900", Offset = "0xCD0900", VA = "0xCD0900")]
	private void Update()
	{
	}

	[Token(Token = "0x60007E3")]
	[Address(RVA = "0xCD098C", Offset = "0xCD098C", VA = "0xCD098C")]
	private void FixAspectRatio()
	{
	}

	[Token(Token = "0x60007E4")]
	[Address(RVA = "0xCD0A5C", Offset = "0xCD0A5C", VA = "0xCD0A5C")]
	public CorrectAspectRatio()
	{
	}
}
[Token(Token = "0x20001B5")]
public class DuplicateMaterials : MonoBehaviour
{
	[Token(Token = "0x400081D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string duplicated_material_path;

	[Token(Token = "0x60007E5")]
	[Address(RVA = "0xCD0A6C", Offset = "0xCD0A6C", VA = "0xCD0A6C")]
	private void Start()
	{
	}

	[Token(Token = "0x60007E6")]
	[Address(RVA = "0xCD0A70", Offset = "0xCD0A70", VA = "0xCD0A70")]
	private void Update()
	{
	}

	[Token(Token = "0x60007E7")]
	[Address(RVA = "0xCD0A74", Offset = "0xCD0A74", VA = "0xCD0A74")]
	public DuplicateMaterials()
	{
	}
}
[Token(Token = "0x20001B6")]
public class PrintHierarchy : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20001B7")]
	public struct ObjectData
	{
		[Token(Token = "0x4000822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string name;

		[Token(Token = "0x4000823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool activeSelf;

		[Token(Token = "0x4000824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		public bool active;

		[Token(Token = "0x4000825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform parent;

		[Token(Token = "0x4000826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string hierarchy;

		[Token(Token = "0x4000827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string scene;
	}

	[Token(Token = "0x20001B8")]
	[CompilerGenerated]
	private sealed class <Start>d__1 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400082A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PrintHierarchy <>4__this;

		[Token(Token = "0x170000E3")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60007F1")]
			[Address(RVA = "0xCD1F48", Offset = "0xCD1F48", VA = "0xCD1F48", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E4")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007F3")]
			[Address(RVA = "0xCD1F90", Offset = "0xCD1F90", VA = "0xCD1F90", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007EE")]
		[Address(RVA = "0xCD0AE4", Offset = "0xCD0AE4", VA = "0xCD0AE4")]
		[DebuggerHidden]
		public <Start>d__1(int <>1__state)
		{
		}

		[Token(Token = "0x60007EF")]
		[Address(RVA = "0xCD1C5C", Offset = "0xCD1C5C", VA = "0xCD1C5C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007F0")]
		[Address(RVA = "0xCD1C60", Offset = "0xCD1C60", VA = "0xCD1C60", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007F2")]
		[Address(RVA = "0xCD1F50", Offset = "0xCD1F50", VA = "0xCD1F50", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400081E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool analyzeActiveSelf;

	[Token(Token = "0x400081F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<GameObject, ObjectData> oldHierarchy;

	[Token(Token = "0x4000820")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<GameObject, List<ObjectData>> history;

	[Token(Token = "0x4000821")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private StringBuilder sb;

	[Token(Token = "0x60007E8")]
	[Address(RVA = "0xCD0A7C", Offset = "0xCD0A7C", VA = "0xCD0A7C")]
	[IteratorStateMachine(typeof(<Start>d__1))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60007E9")]
	[Address(RVA = "0xCD0B0C", Offset = "0xCD0B0C", VA = "0xCD0B0C")]
	private void Execute()
	{
	}

	[Token(Token = "0x60007EA")]
	[Address(RVA = "0xCD1A54", Offset = "0xCD1A54", VA = "0xCD1A54")]
	[ContextMenu("Analyze!")]
	public void Analyze()
	{
	}

	[Token(Token = "0x60007EB")]
	[Address(RVA = "0xCD0F6C", Offset = "0xCD0F6C", VA = "0xCD0F6C")]
	private void Analize(List<ObjectData> hist)
	{
	}

	[Token(Token = "0x60007EC")]
	[Address(RVA = "0xCD11AC", Offset = "0xCD11AC", VA = "0xCD11AC")]
	private void CheckChildren(GameObject ob, string heirarchy, int depth)
	{
	}

	[Token(Token = "0x60007ED")]
	[Address(RVA = "0xCD1B68", Offset = "0xCD1B68", VA = "0xCD1B68")]
	public PrintHierarchy()
	{
	}
}
[Token(Token = "0x20001B9")]
public class ProportionValue<T>
{
	[Token(Token = "0x170000E5")]
	public double Proportion
	{
		[Token(Token = "0x60007F4")]
		[CompilerGenerated]
		get
		{
			return default(double);
		}
		[Token(Token = "0x60007F5")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000E6")]
	public T Value
	{
		[Token(Token = "0x60007F6")]
		[CompilerGenerated]
		get
		{
			return (T)null;
		}
		[Token(Token = "0x60007F7")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60007F8")]
	public ProportionValue()
	{
	}
}
[Token(Token = "0x20001BA")]
public static class ProportionValue
{
	[Token(Token = "0x400082D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static System.Random random;

	[Token(Token = "0x60007F9")]
	public static ProportionValue<T> Create<T>(double proportion, T value)
	{
		return null;
	}

	[Token(Token = "0x60007FA")]
	public static T ChooseByRandom<T>(this IEnumerable<ProportionValue<T>> collection)
	{
		return (T)null;
	}
}
[Token(Token = "0x20001BB")]
public class ReadOnlyAttribute : PropertyAttribute
{
	[Token(Token = "0x60007FC")]
	[Address(RVA = "0xCD2010", Offset = "0xCD2010", VA = "0xCD2010")]
	public ReadOnlyAttribute()
	{
	}
}
[Token(Token = "0x20001BC")]
public static class RigidbodyExtensions
{
	[Token(Token = "0x60007FD")]
	[Address(RVA = "0xCD2018", Offset = "0xCD2018", VA = "0xCD2018")]
	public static void ForceTo(this Rigidbody rigidbody, Vector3 target, float deltaTime, float maxForce)
	{
	}

	[Token(Token = "0x60007FE")]
	[Address(RVA = "0xCD2128", Offset = "0xCD2128", VA = "0xCD2128")]
	public static void ForceTo(this Rigidbody rigidbody, Vector3 target, float deltaTime)
	{
	}

	[Token(Token = "0x60007FF")]
	[Address(RVA = "0xCD21A4", Offset = "0xCD21A4", VA = "0xCD21A4")]
	public static void TorqueTo(this Rigidbody rigidbody, Quaternion target, float deltaTime)
	{
	}
}
[Token(Token = "0x20001BD")]
[ExecuteInEditMode]
public class SetActiveOnSceneSave : MonoBehaviour
{
	[Token(Token = "0x6000800")]
	[Address(RVA = "0xCD23F4", Offset = "0xCD23F4", VA = "0xCD23F4")]
	public SetActiveOnSceneSave()
	{
	}
}
[Token(Token = "0x20001BE")]
public class SetAnimatorParameters : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20001BF")]
	public struct TriggerParameter
	{
		[Token(Token = "0x4000836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string name;
	}

	[Serializable]
	[Token(Token = "0x20001C0")]
	public struct FloatParameter
	{
		[Token(Token = "0x4000837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string name;

		[Token(Token = "0x4000838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float value;
	}

	[Serializable]
	[Token(Token = "0x20001C1")]
	public struct IntParameter
	{
		[Token(Token = "0x4000839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string name;

		[Token(Token = "0x400083A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int value;
	}

	[Serializable]
	[Token(Token = "0x20001C2")]
	public struct BoolParameter
	{
		[Token(Token = "0x400083B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string name;

		[Token(Token = "0x400083C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool value;
	}

	[Token(Token = "0x400082E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator animator;

	[Token(Token = "0x400082F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool onStart;

	[Token(Token = "0x4000830")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool onAwake;

	[Token(Token = "0x4000831")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	public bool onEnable;

	[Token(Token = "0x4000832")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TriggerParameter[] triggers;

	[Token(Token = "0x4000833")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public FloatParameter[] floats;

	[Token(Token = "0x4000834")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public IntParameter[] ints;

	[Token(Token = "0x4000835")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public BoolParameter[] bools;

	[Token(Token = "0x6000801")]
	[Address(RVA = "0xCD23FC", Offset = "0xCD23FC", VA = "0xCD23FC")]
	public void ApplyParameters()
	{
	}

	[Token(Token = "0x6000802")]
	[Address(RVA = "0xCD25C0", Offset = "0xCD25C0", VA = "0xCD25C0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000803")]
	[Address(RVA = "0xCD25D0", Offset = "0xCD25D0", VA = "0xCD25D0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000804")]
	[Address(RVA = "0xCD25E0", Offset = "0xCD25E0", VA = "0xCD25E0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000805")]
	[Address(RVA = "0xCD25F0", Offset = "0xCD25F0", VA = "0xCD25F0")]
	public SetAnimatorParameters()
	{
	}
}
[Serializable]
[Token(Token = "0x20001C3")]
public class SmoothFloat
{
	[Token(Token = "0x400083D")]
	private const int framesToReset = 10000;

	[Token(Token = "0x400083E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int historyLength;

	[Token(Token = "0x400083F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Queue<float> valueHistory;

	[Token(Token = "0x4000840")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float addedValue;

	[Token(Token = "0x4000841")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int valueCount;

	[Token(Token = "0x4000842")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int frames;

	[Token(Token = "0x6000806")]
	[Address(RVA = "0xCD25F8", Offset = "0xCD25F8", VA = "0xCD25F8")]
	public SmoothFloat()
	{
	}

	[Token(Token = "0x6000807")]
	[Address(RVA = "0xCD2694", Offset = "0xCD2694", VA = "0xCD2694")]
	public float Smooth(float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000808")]
	[Address(RVA = "0xCD2798", Offset = "0xCD2798", VA = "0xCD2798")]
	private void RecalculateAddedValue()
	{
	}
}
[Token(Token = "0x20001C4")]
public static class Vector3Extensions
{
	[Token(Token = "0x6000809")]
	[Address(RVA = "0xCD287C", Offset = "0xCD287C", VA = "0xCD287C")]
	public static Vector3 SmoothAccelerate(this Vector3 current, Vector3 target, ref Vector3 velocity, float maxAcceleration, float maxSpeed)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600080A")]
	[Address(RVA = "0xCD2910", Offset = "0xCD2910", VA = "0xCD2910")]
	public static Vector3 SmoothAccelerate(this Vector3 current, Vector3 target, ref Vector3 velocity, float maxAcceleration, float maxSpeed, float deltaTime, out bool slowing)
	{
		return default(Vector3);
	}
}
[Token(Token = "0x20001C5")]
public class VolumeSlider : MonoBehaviour
{
	[Token(Token = "0x4000843")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.Audio.AudioMixer mixer;

	[Token(Token = "0x4000844")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string variable;

	[Token(Token = "0x4000845")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Slider slider;

	[Token(Token = "0x600080B")]
	[Address(RVA = "0xCD2BA8", Offset = "0xCD2BA8", VA = "0xCD2BA8")]
	private void Start()
	{
	}

	[Token(Token = "0x600080C")]
	[Address(RVA = "0xCD2CB4", Offset = "0xCD2CB4", VA = "0xCD2CB4")]
	public void SetLevel(float sliderValue)
	{
	}

	[Token(Token = "0x600080D")]
	[Address(RVA = "0xCD2D0C", Offset = "0xCD2D0C", VA = "0xCD2D0C")]
	private void Update()
	{
	}

	[Token(Token = "0x600080E")]
	[Address(RVA = "0xCD2D10", Offset = "0xCD2D10", VA = "0xCD2D10")]
	public VolumeSlider()
	{
	}
}
[Token(Token = "0x20001C6")]
public class LerpZone : MonoBehaviour
{
	[Token(Token = "0x4000846")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Collider targetArea;

	[Token(Token = "0x4000847")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float maxDistance;

	[Token(Token = "0x600080F")]
	[Address(RVA = "0xCD2D18", Offset = "0xCD2D18", VA = "0xCD2D18")]
	public void GetInterpolation(ref Vector3 position, ref Quaternion rotation)
	{
	}

	[Token(Token = "0x6000810")]
	[Address(RVA = "0xCD2EC8", Offset = "0xCD2EC8", VA = "0xCD2EC8")]
	public LerpZone()
	{
	}
}
[Token(Token = "0x20001C7")]
public class JoystickLocomotion : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20001C8")]
	public class JoystickPress
	{
		[Token(Token = "0x4000851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public string[] axisNames;

		[Token(Token = "0x4000852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool didPress;

		[Token(Token = "0x600081F")]
		[Address(RVA = "0xCD3468", Offset = "0xCD3468", VA = "0xCD3468")]
		public bool GetPressed(out int direction)
		{
			return default(bool);
		}

		[Token(Token = "0x6000820")]
		[Address(RVA = "0xCD38C4", Offset = "0xCD38C4", VA = "0xCD38C4")]
		public JoystickPress()
		{
		}
	}

	[Token(Token = "0x4000848")]
	private const float inputMin = 0.5f;

	[Token(Token = "0x4000849")]
	private const float inputMax = 0.8f;

	[Token(Token = "0x400084A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public XROrigin rig;

	[Token(Token = "0x400084B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public JoystickPress rotationAxis;

	[Token(Token = "0x400084C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float rotationDegrees;

	[Token(Token = "0x400084D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public JoystickPress movementAxis;

	[Token(Token = "0x400084E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float moveDistance;

	[Token(Token = "0x400084F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Vector2 clampPosition;

	[Token(Token = "0x170000E7")]
	public static bool LocomotionActive
	{
		[Token(Token = "0x6000813")]
		[Address(RVA = "0xCD304C", Offset = "0xCD304C", VA = "0xCD304C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000814")]
		[Address(RVA = "0xCD30A0", Offset = "0xCD30A0", VA = "0xCD30A0")]
		set
		{
		}
	}

	[Token(Token = "0x14000007")]
	private static event Action LocomotionActiveChanged
	{
		[Token(Token = "0x6000811")]
		[Address(RVA = "0xCD2EDC", Offset = "0xCD2EDC", VA = "0xCD2EDC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000812")]
		[Address(RVA = "0xCD2F94", Offset = "0xCD2F94", VA = "0xCD2F94")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000815")]
	[Address(RVA = "0xCD3144", Offset = "0xCD3144", VA = "0xCD3144")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000816")]
	[Address(RVA = "0xCD31F4", Offset = "0xCD31F4", VA = "0xCD31F4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000817")]
	[Address(RVA = "0xCD31D4", Offset = "0xCD31D4", VA = "0xCD31D4")]
	private void OnEnableChanged()
	{
	}

	[Token(Token = "0x6000818")]
	[Address(RVA = "0xCD3270", Offset = "0xCD3270", VA = "0xCD3270")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000819")]
	[Address(RVA = "0xCD32F0", Offset = "0xCD32F0", VA = "0xCD32F0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600081A")]
	[Address(RVA = "0xCD3408", Offset = "0xCD3408", VA = "0xCD3408")]
	private void Update()
	{
	}

	[Token(Token = "0x600081B")]
	[Address(RVA = "0xCD3550", Offset = "0xCD3550", VA = "0xCD3550")]
	private void Rotate(int direction)
	{
	}

	[Token(Token = "0x600081C")]
	[Address(RVA = "0xCD3630", Offset = "0xCD3630", VA = "0xCD3630")]
	private void Move(int direction)
	{
	}

	[Token(Token = "0x600081D")]
	[Address(RVA = "0xCD3378", Offset = "0xCD3378", VA = "0xCD3378")]
	private void OnPlacepaceMoved()
	{
	}

	[Token(Token = "0x600081E")]
	[Address(RVA = "0xCD38A4", Offset = "0xCD38A4", VA = "0xCD38A4")]
	public JoystickLocomotion()
	{
	}
}
[Token(Token = "0x20001C9")]
public class PlatformDependantMaterial : MonoBehaviour
{
	[Token(Token = "0x4000853")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<Material> materials;

	[Token(Token = "0x4000854")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Renderer renderer;

	[Token(Token = "0x4000855")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int materialIndex;

	[Token(Token = "0x6000821")]
	[Address(RVA = "0xCD38CC", Offset = "0xCD38CC", VA = "0xCD38CC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000822")]
	[Address(RVA = "0xCD399C", Offset = "0xCD399C", VA = "0xCD399C")]
	public PlatformDependantMaterial()
	{
	}
}
[Token(Token = "0x20001CA")]
public class WaveFade : MonoBehaviour
{
	[Token(Token = "0x4000856")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform fader;

	[Token(Token = "0x6000823")]
	[Address(RVA = "0xCD39A4", Offset = "0xCD39A4", VA = "0xCD39A4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000824")]
	[Address(RVA = "0xCD39A8", Offset = "0xCD39A8", VA = "0xCD39A8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000825")]
	[Address(RVA = "0xCD39AC", Offset = "0xCD39AC", VA = "0xCD39AC")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000826")]
	[Address(RVA = "0xCD3B78", Offset = "0xCD3B78", VA = "0xCD3B78")]
	public WaveFade()
	{
	}
}
namespace BOD_Prototype
{
	[Token(Token = "0x20001CB")]
	[ExecuteInEditMode]
	public class InsertState : MonoBehaviour
	{
		[Token(Token = "0x4000857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public State insertAfter;

		[Token(Token = "0x4000858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool update;

		[Token(Token = "0x6000827")]
		[Address(RVA = "0xCD3B80", Offset = "0xCD3B80", VA = "0xCD3B80")]
		private void Start()
		{
		}

		[Token(Token = "0x6000828")]
		[Address(RVA = "0xCD3B84", Offset = "0xCD3B84", VA = "0xCD3B84")]
		private void Update()
		{
		}

		[Token(Token = "0x6000829")]
		[Address(RVA = "0xCD3C0C", Offset = "0xCD3C0C", VA = "0xCD3C0C")]
		public InsertState()
		{
		}
	}
	[Token(Token = "0x20001CC")]
	public enum State
	{
		[Token(Token = "0x400085A")]
		START,
		[Token(Token = "0x400085B")]
		TIME_TRAVEL,
		[Token(Token = "0x400085C")]
		TATAMI_ROOM,
		[Token(Token = "0x400085D")]
		RANDALL_PRELUDE,
		[Token(Token = "0x400085E")]
		DESK_REAPPEAR,
		[Token(Token = "0x400085F")]
		BOOK_OPENS,
		[Token(Token = "0x4000860")]
		BOOK_REAPPEARS,
		[Token(Token = "0x4000861")]
		BOOK_OF_DISTANCE,
		[Token(Token = "0x4000862")]
		HOW_TO_MAKE_WISH,
		[Token(Token = "0x4000863")]
		RANDALL_PLACES_PAPER,
		[Token(Token = "0x4000864")]
		CORK_BOARD_YONEZO,
		[Token(Token = "0x4000865")]
		PHONE_RINGS,
		[Token(Token = "0x4000866")]
		DAD_CORRECTS_RANDALL,
		[Token(Token = "0x4000867")]
		TRANSPORTED_TO_PAST,
		[Token(Token = "0x4000868")]
		HIROSHIMA_HOUSE,
		[Token(Token = "0x4000869")]
		LETTER_TO_VANCOUVER,
		[Token(Token = "0x400086A")]
		LETTER_FROM_VANCOUVER,
		[Token(Token = "0x400086B")]
		SHOW_BC_MAP,
		[Token(Token = "0x400086C")]
		SHOW_TICKET_CANADA,
		[Token(Token = "0x400086D")]
		FAMILY_GOODBYE,
		[Token(Token = "0x400086E")]
		WAVE_GOODBYE,
		[Token(Token = "0x400086F")]
		WAVE_VANCOUVER,
		[Token(Token = "0x4000870")]
		ARRIVAL,
		[Token(Token = "0x4000871")]
		IMMIGRATION,
		[Token(Token = "0x4000872")]
		STAMP_PASSPORT,
		[Token(Token = "0x4000873")]
		FAMILY_FARM,
		[Token(Token = "0x4000874")]
		WHEELBARROW,
		[Token(Token = "0x4000875")]
		FENCELINE,
		[Token(Token = "0x4000876")]
		PLANT_SEEDS,
		[Token(Token = "0x4000877")]
		EVERYTHING_BLOOMS,
		[Token(Token = "0x4000878")]
		TABLE_ON_PORCH,
		[Token(Token = "0x4000879")]
		TABLE_BOWL_1,
		[Token(Token = "0x400087A")]
		TABLE_BOWL_2,
		[Token(Token = "0x400087B")]
		TAKE_PHOTOS,
		[Token(Token = "0x400087C")]
		PHOTO_TAKEN,
		[Token(Token = "0x400087D")]
		SECOND_PHOTO_TAKEN,
		[Token(Token = "0x400087E")]
		NOTICE_APPEARS,
		[Token(Token = "0x400087F")]
		STANDING_IN_LINE,
		[Token(Token = "0x4000880")]
		ID_CARDS_APPEAR,
		[Token(Token = "0x4000881")]
		PACK_SUITCASE,
		[Token(Token = "0x4000882")]
		PICKUP_SUITCASE,
		[Token(Token = "0x4000883")]
		SEGREGATION,
		[Token(Token = "0x4000884")]
		SEGREGATION_MOVE,
		[Token(Token = "0x4000885")]
		TRAIN,
		[Token(Token = "0x4000886")]
		ANOTHER_TRAIN,
		[Token(Token = "0x4000887")]
		TRAIN_WALL_IMAGES,
		[Token(Token = "0x4000888")]
		RED_CIRCLES,
		[Token(Token = "0x4000889")]
		SWITCH_APPEARS,
		[Token(Token = "0x400088A")]
		SWITCH_1,
		[Token(Token = "0x400088B")]
		SWITCH_2,
		[Token(Token = "0x400088C")]
		SWITCH_3,
		[Token(Token = "0x400088D")]
		LABOUR_FARM,
		[Token(Token = "0x400088E")]
		DAD_TELLS_STORY,
		[Token(Token = "0x400088F")]
		EVERYTHING_FADES,
		[Token(Token = "0x4000890")]
		DESK_VOICE_REC,
		[Token(Token = "0x4000891")]
		DIAL_NUMBER,
		[Token(Token = "0x4000892")]
		PHONE_RINGS_AGAIN,
		[Token(Token = "0x4000893")]
		DESK_CHANGES,
		[Token(Token = "0x4000894")]
		DESK_ARCHIVAL_IMAGES,
		[Token(Token = "0x4000895")]
		DESK_IMAGE_FARM,
		[Token(Token = "0x4000896")]
		DESK_IMAGE_FADE,
		[Token(Token = "0x4000897")]
		ANOTHER_LETTER,
		[Token(Token = "0x4000898")]
		LETTER_HIROSHIMA,
		[Token(Token = "0x4000899")]
		HIROSHIMA_BLAST,
		[Token(Token = "0x400089A")]
		DESK_MODERN_OFFICE,
		[Token(Token = "0x400089B")]
		DIAL_ANOTHER_NUMBER,
		[Token(Token = "0x400089C")]
		MAP_AND_LETTER,
		[Token(Token = "0x400089D")]
		STREETVIEW,
		[Token(Token = "0x400089E")]
		I_FOUND_IT,
		[Token(Token = "0x400089F")]
		TO_JAPAN,
		[Token(Token = "0x40008A0")]
		ON_A_PLANE,
		[Token(Token = "0x40008A1")]
		GET_TRAN_TICKET,
		[Token(Token = "0x40008A2")]
		DOOR_WITH_KNOCKER,
		[Token(Token = "0x40008A3")]
		JAPANESE_ROOM,
		[Token(Token = "0x40008A4")]
		PHOTO_ALBUM,
		[Token(Token = "0x40008A5")]
		YONEZO_PHOTOS,
		[Token(Token = "0x40008A6")]
		PEOPLE_FADE,
		[Token(Token = "0x40008A7")]
		DAD_REACTION,
		[Token(Token = "0x40008A8")]
		MUSIC_FADE_OUT,
		[Token(Token = "0x40008A9")]
		WIND_CHIME_1,
		[Token(Token = "0x40008AA")]
		SHIP_SLICE,
		[Token(Token = "0x40008AB")]
		WIND_CHIME_2,
		[Token(Token = "0x40008AC")]
		FARMHOUSE_SLICE,
		[Token(Token = "0x40008AD")]
		WIND_CHIME_3,
		[Token(Token = "0x40008AE")]
		CAMP_SLICE,
		[Token(Token = "0x40008AF")]
		WIND_CHIME_4,
		[Token(Token = "0x40008B0")]
		HIROSHIMA_SLICE,
		[Token(Token = "0x40008B1")]
		WIND_CHIME_5,
		[Token(Token = "0x40008B2")]
		OFFICE_SLICE,
		[Token(Token = "0x40008B3")]
		WIND_CHIME_6,
		[Token(Token = "0x40008B4")]
		FINAL_SEED,
		[Token(Token = "0x40008B5")]
		END
	}
	[Token(Token = "0x20001CD")]
	[ExecuteInEditMode]
	public class Prototype : Singleton<Prototype>
	{
		[Token(Token = "0x20001CE")]
		public delegate void StateChange();

		[Token(Token = "0x40008B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMesh titleText;

		[Token(Token = "0x40008B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private State _currentState;

		[Token(Token = "0x40008B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PrototypeController leftController;

		[Token(Token = "0x40008B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public PrototypeController rightController;

		[Token(Token = "0x40008BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool allowPrimaryIndexTrigger;

		[Token(Token = "0x40008BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		private bool allowSecondaryIndexTrigger;

		[Token(Token = "0x40008BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ShowSelectionMenu selectionMenu;

		[Token(Token = "0x40008BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool update;

		[Token(Token = "0x170000E8")]
		public State currentState
		{
			[Token(Token = "0x600082C")]
			[Address(RVA = "0xCD3D4C", Offset = "0xCD3D4C", VA = "0xCD3D4C")]
			get
			{
				return default(State);
			}
			[Token(Token = "0x600082D")]
			[Address(RVA = "0xCD3D54", Offset = "0xCD3D54", VA = "0xCD3D54")]
			set
			{
			}
		}

		[Token(Token = "0x14000008")]
		public event StateChange OnStateChanged
		{
			[Token(Token = "0x600082A")]
			[Address(RVA = "0xCD3C14", Offset = "0xCD3C14", VA = "0xCD3C14")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600082B")]
			[Address(RVA = "0xCD3CB0", Offset = "0xCD3CB0", VA = "0xCD3CB0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600082E")]
		[Address(RVA = "0xCD3F04", Offset = "0xCD3F04", VA = "0xCD3F04")]
		private void Awake()
		{
		}

		[Token(Token = "0x600082F")]
		[Address(RVA = "0xCD3F08", Offset = "0xCD3F08", VA = "0xCD3F08")]
		private void Start()
		{
		}

		[Token(Token = "0x6000830")]
		[Address(RVA = "0xCD407C", Offset = "0xCD407C", VA = "0xCD407C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000831")]
		[Address(RVA = "0xCD44DC", Offset = "0xCD44DC", VA = "0xCD44DC")]
		public void PrevState()
		{
		}

		[Token(Token = "0x6000832")]
		[Address(RVA = "0xCD44F4", Offset = "0xCD44F4", VA = "0xCD44F4")]
		public void NextState()
		{
		}

		[Token(Token = "0x6000833")]
		[Address(RVA = "0xCD3D6C", Offset = "0xCD3D6C", VA = "0xCD3D6C")]
		public void SetState()
		{
		}

		[Token(Token = "0x6000834")]
		[Address(RVA = "0xCD4218", Offset = "0xCD4218", VA = "0xCD4218")]
		public void EditorUpdate()
		{
		}

		[Token(Token = "0x6000835")]
		[Address(RVA = "0xCD45E0", Offset = "0xCD45E0", VA = "0xCD45E0")]
		public Prototype()
		{
		}
	}
	[Token(Token = "0x20001CF")]
	[ExecuteInEditMode]
	public class PrototypeController : MonoBehaviour
	{
		[Token(Token = "0x40008BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject controller;

		[Token(Token = "0x40008C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject brush;

		[Token(Token = "0x40008C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject letter;

		[Token(Token = "0x40008C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public State[] showBrush;

		[Token(Token = "0x40008C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public State[] showLetter;

		[Token(Token = "0x600083A")]
		[Address(RVA = "0xCD472C", Offset = "0xCD472C", VA = "0xCD472C")]
		public void ShowController()
		{
		}

		[Token(Token = "0x600083B")]
		[Address(RVA = "0xCD4778", Offset = "0xCD4778", VA = "0xCD4778")]
		public void ShowBrush()
		{
		}

		[Token(Token = "0x600083C")]
		[Address(RVA = "0xCD47B0", Offset = "0xCD47B0", VA = "0xCD47B0")]
		public void ShowLetter()
		{
		}

		[Token(Token = "0x600083D")]
		[Address(RVA = "0xCD47E8", Offset = "0xCD47E8", VA = "0xCD47E8")]
		private void Start()
		{
		}

		[Token(Token = "0x600083E")]
		[Address(RVA = "0xCD47EC", Offset = "0xCD47EC", VA = "0xCD47EC")]
		private void Update()
		{
		}

		[Token(Token = "0x600083F")]
		[Address(RVA = "0xCD47F0", Offset = "0xCD47F0", VA = "0xCD47F0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000840")]
		[Address(RVA = "0xCD489C", Offset = "0xCD489C", VA = "0xCD489C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000841")]
		[Address(RVA = "0xCD49A0", Offset = "0xCD49A0", VA = "0xCD49A0")]
		public void InsertState(State insertAfter)
		{
		}

		[Token(Token = "0x6000842")]
		[Address(RVA = "0xCD4B44", Offset = "0xCD4B44", VA = "0xCD4B44")]
		public void StateRemoved(State removeAfter)
		{
		}

		[Token(Token = "0x6000843")]
		[Address(RVA = "0xCD4CE8", Offset = "0xCD4CE8", VA = "0xCD4CE8")]
		private void StateChanged()
		{
		}

		[Token(Token = "0x6000844")]
		[Address(RVA = "0xCD4EA8", Offset = "0xCD4EA8", VA = "0xCD4EA8")]
		public PrototypeController()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D0")]
	public class SceneAudio
	{
		[Token(Token = "0x40008C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float start_time;

		[Token(Token = "0x40008C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioSource source;

		[Token(Token = "0x6000845")]
		[Address(RVA = "0xCD4EB0", Offset = "0xCD4EB0", VA = "0xCD4EB0")]
		public SceneAudio()
		{
		}
	}
	[Token(Token = "0x20001D1")]
	[ExecuteInEditMode]
	public class PrototypeScene : MonoBehaviour
	{
		[Token(Token = "0x40008C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEvent audioFinished;

		[Token(Token = "0x40008C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEvent outTransition;

		[Token(Token = "0x40008C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SceneAudio[] scene_audio;

		[Token(Token = "0x40008C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool advance_scene;

		[Token(Token = "0x40008CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool keepPlayingWhenDisabled;

		[Token(Token = "0x40008CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int audio_idx;

		[Token(Token = "0x170000E9")]
		public AudioSource currentAudio
		{
			[Token(Token = "0x6000847")]
			[Address(RVA = "0xCD4EE0", Offset = "0xCD4EE0", VA = "0xCD4EE0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000846")]
		[Address(RVA = "0xCD4EB8", Offset = "0xCD4EB8", VA = "0xCD4EB8")]
		public bool AudioDone()
		{
			return default(bool);
		}

		[Token(Token = "0x6000848")]
		[Address(RVA = "0xCD4F2C", Offset = "0xCD4F2C", VA = "0xCD4F2C")]
		public void AddAudio(SceneAudio sa, bool first = false)
		{
		}

		[Token(Token = "0x6000849")]
		[Address(RVA = "0xCD50D4", Offset = "0xCD50D4", VA = "0xCD50D4")]
		public bool AudioPaused()
		{
			return default(bool);
		}

		[Token(Token = "0x600084A")]
		[Address(RVA = "0xCD5154", Offset = "0xCD5154", VA = "0xCD5154")]
		public void TickAdvanceScene()
		{
		}

		[Token(Token = "0x600084B")]
		[Address(RVA = "0xCD5160", Offset = "0xCD5160", VA = "0xCD5160")]
		public void Next()
		{
		}

		[Token(Token = "0x600084C")]
		[Address(RVA = "0xCD5168", Offset = "0xCD5168", VA = "0xCD5168")]
		public void Next(bool restart = false)
		{
		}

		[Token(Token = "0x600084D")]
		[Address(RVA = "0xCD5410", Offset = "0xCD5410", VA = "0xCD5410")]
		public void NextState()
		{
		}

		[Token(Token = "0x600084E")]
		[Address(RVA = "0xCD5460", Offset = "0xCD5460", VA = "0xCD5460")]
		public void PlayAudio()
		{
		}

		[Token(Token = "0x600084F")]
		[Address(RVA = "0xCD56C0", Offset = "0xCD56C0", VA = "0xCD56C0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000850")]
		[Address(RVA = "0xCD56F4", Offset = "0xCD56F4", VA = "0xCD56F4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000851")]
		[Address(RVA = "0xCD57C0", Offset = "0xCD57C0", VA = "0xCD57C0")]
		public PrototypeScene()
		{
		}
	}
	[Token(Token = "0x20001D2")]
	[ExecuteInEditMode]
	public class PrototypeStage : MonoBehaviour
	{
		[Token(Token = "0x40008CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject stage;

		[Token(Token = "0x40008CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Light pointLight;

		[Token(Token = "0x40008CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PostProcessVolume ppv;

		[Token(Token = "0x40008CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public State[] hideStage;

		[Token(Token = "0x40008D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float fog_density_main;

		[Token(Token = "0x40008D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float fog_density_blast;

		[Token(Token = "0x6000852")]
		[Address(RVA = "0xCD57D0", Offset = "0xCD57D0", VA = "0xCD57D0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000853")]
		[Address(RVA = "0xCD57D4", Offset = "0xCD57D4", VA = "0xCD57D4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000854")]
		[Address(RVA = "0xCD57D8", Offset = "0xCD57D8", VA = "0xCD57D8")]
		public void StateRemoved(State removeAfter)
		{
		}

		[Token(Token = "0x6000855")]
		[Address(RVA = "0xCD58F4", Offset = "0xCD58F4", VA = "0xCD58F4")]
		public void InsertState(State insertAfter)
		{
		}

		[Token(Token = "0x6000856")]
		[Address(RVA = "0xCD5A10", Offset = "0xCD5A10", VA = "0xCD5A10")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000857")]
		[Address(RVA = "0xCD5ABC", Offset = "0xCD5ABC", VA = "0xCD5ABC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000858")]
		[Address(RVA = "0xCD5BC0", Offset = "0xCD5BC0", VA = "0xCD5BC0")]
		private void StateChanged()
		{
		}

		[Token(Token = "0x6000859")]
		[Address(RVA = "0xCD5EC8", Offset = "0xCD5EC8", VA = "0xCD5EC8")]
		private void UpdateFog(float density)
		{
		}

		[Token(Token = "0x600085A")]
		[Address(RVA = "0xCD5ECC", Offset = "0xCD5ECC", VA = "0xCD5ECC")]
		public PrototypeStage()
		{
		}
	}
	[Token(Token = "0x20001D3")]
	[ExecuteInEditMode]
	public class StateRemoved : MonoBehaviour
	{
		[Token(Token = "0x40008D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public State removeAfter;

		[Token(Token = "0x40008D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool update;

		[Token(Token = "0x600085B")]
		[Address(RVA = "0xCD5EE0", Offset = "0xCD5EE0", VA = "0xCD5EE0")]
		private void Start()
		{
		}

		[Token(Token = "0x600085C")]
		[Address(RVA = "0xCD5EE4", Offset = "0xCD5EE4", VA = "0xCD5EE4")]
		private void Update()
		{
		}

		[Token(Token = "0x600085D")]
		[Address(RVA = "0xCD5F6C", Offset = "0xCD5F6C", VA = "0xCD5F6C")]
		public StateRemoved()
		{
		}
	}
}
namespace UnityEngine.Rendering.Universal.Internal
{
	[Token(Token = "0x20001D4")]
	public class GlowFeature : ScriptableRendererFeature
	{
		[Token(Token = "0x20001D5")]
		private class BGPass : ScriptableRenderPass
		{
			[Token(Token = "0x40008D9")]
			private const string m_ProfilerTag = "Render Glow Color";

			[Token(Token = "0x40008DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			private RenderTargetHandle maskTexture;

			[Token(Token = "0x40008DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
			private GlowingObjectsList obs;

			[Token(Token = "0x40008DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
			private Material colorMaterial;

			[Token(Token = "0x40008DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
			private List<Material> sharedMaterials;

			[Token(Token = "0x6000861")]
			[Address(RVA = "0xCD6164", Offset = "0xCD6164", VA = "0xCD6164")]
			public BGPass(RenderTargetHandle maskTexture, GlowingObjectsList objects, Material colorMaterial)
			{
			}

			[Token(Token = "0x6000862")]
			[Address(RVA = "0xCD6524", Offset = "0xCD6524", VA = "0xCD6524", Slot = "6")]
			public override void Configure(CommandBuffer cmd, RenderTextureDescriptor cameraTextureDescriptor)
			{
			}

			[Token(Token = "0x6000863")]
			[Address(RVA = "0xCD6608", Offset = "0xCD6608", VA = "0xCD6608", Slot = "9")]
			public override void Execute(ScriptableRenderContext context, ref RenderingData renderingData)
			{
			}

			[Token(Token = "0x6000864")]
			[Address(RVA = "0xCD688C", Offset = "0xCD688C", VA = "0xCD688C", Slot = "4")]
			public override void FrameCleanup(CommandBuffer cmd)
			{
			}
		}

		[Token(Token = "0x20001D6")]
		private class GlowPass : ScriptableRenderPass
		{
			[Token(Token = "0x40008DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			public Material blurMaterial;

			[Token(Token = "0x40008E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
			public Material postprocessMaterial;

			[Token(Token = "0x40008E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
			public Material finalRenderMaterial;

			[Token(Token = "0x40008E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
			private RenderTargetHandle m_TempMaskTexture;

			[Token(Token = "0x40008E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
			private RenderTargetHandle m_TempBlurTexture;

			[Token(Token = "0x40008E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
			private RenderTargetHandle m_TempBlurTexture2;

			[Token(Token = "0x40008E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
			private RenderTargetHandle m_SourceCopy_Temp;

			[Token(Token = "0x40008E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
			private string m_ProfilerTag;

			[Token(Token = "0x170000EA")]
			public FilterMode filterMode
			{
				[Token(Token = "0x6000865")]
				[Address(RVA = "0xCD68B0", Offset = "0xCD68B0", VA = "0xCD68B0")]
				[CompilerGenerated]
				get
				{
					return default(FilterMode);
				}
				[Token(Token = "0x6000866")]
				[Address(RVA = "0xCD68B8", Offset = "0xCD68B8", VA = "0xCD68B8")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x170000EB")]
			private RenderTargetIdentifier source
			{
				[Token(Token = "0x6000867")]
				[Address(RVA = "0xCD68C0", Offset = "0xCD68C0", VA = "0xCD68C0")]
				[CompilerGenerated]
				get
				{
					return default(RenderTargetIdentifier);
				}
				[Token(Token = "0x6000868")]
				[Address(RVA = "0xCD68DC", Offset = "0xCD68DC", VA = "0xCD68DC")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x170000EC")]
			private RenderTargetHandle destination
			{
				[Token(Token = "0x6000869")]
				[Address(RVA = "0xCD68F8", Offset = "0xCD68F8", VA = "0xCD68F8")]
				[CompilerGenerated]
				get
				{
					return default(RenderTargetHandle);
				}
				[Token(Token = "0x600086A")]
				[Address(RVA = "0xCD690C", Offset = "0xCD690C", VA = "0xCD690C")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x600086B")]
			[Address(RVA = "0xCD6220", Offset = "0xCD6220", VA = "0xCD6220")]
			public GlowPass(RenderPassEvent renderPassEvent, Material blurMaterial, Material finalCombineMaterial, RenderTargetHandle maskTexture, string tag)
			{
			}

			[Token(Token = "0x600086C")]
			[Address(RVA = "0xCD6920", Offset = "0xCD6920", VA = "0xCD6920", Slot = "6")]
			public override void Configure(CommandBuffer cmd, RenderTextureDescriptor cameraTextureDescriptor)
			{
			}

			[Token(Token = "0x600086D")]
			[Address(RVA = "0xCD6478", Offset = "0xCD6478", VA = "0xCD6478")]
			public void Setup(RenderTargetIdentifier source, RenderTargetHandle destination)
			{
			}

			[Token(Token = "0x600086E")]
			[Address(RVA = "0xCD6A44", Offset = "0xCD6A44", VA = "0xCD6A44", Slot = "9")]
			public override void Execute(ScriptableRenderContext context, ref RenderingData renderingData)
			{
			}

			[Token(Token = "0x600086F")]
			[Address(RVA = "0xCD6D38", Offset = "0xCD6D38", VA = "0xCD6D38", Slot = "4")]
			public override void FrameCleanup(CommandBuffer cmd)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001D7")]
		public class GlowSettings
		{
			[Token(Token = "0x40008E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RenderPassEvent Event;

			[Token(Token = "0x40008EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Material blurMaterial;

			[Token(Token = "0x40008EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GlowingObjectsList glowingObjects;

			[Token(Token = "0x40008EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Color glowColor;

			[Token(Token = "0x6000870")]
			[Address(RVA = "0xCD6514", Offset = "0xCD6514", VA = "0xCD6514")]
			public GlowSettings()
			{
			}
		}

		[Token(Token = "0x40008D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GlowSettings settings;

		[Token(Token = "0x40008D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RenderTargetHandle m_GlowMaskTexture;

		[Token(Token = "0x40008D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private BGPass m_ColorPass;

		[Token(Token = "0x40008D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GlowPass m_GlowPass;

		[Token(Token = "0x40008D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material m_FinalCombineMaterial;

		[Token(Token = "0x600085E")]
		[Address(RVA = "0xCD5F74", Offset = "0xCD5F74", VA = "0xCD5F74", Slot = "5")]
		public override void Create()
		{
		}

		[Token(Token = "0x600085F")]
		[Address(RVA = "0xCD6314", Offset = "0xCD6314", VA = "0xCD6314", Slot = "7")]
		public override void AddRenderPasses(ScriptableRenderer renderer, ref RenderingData renderingData)
		{
		}

		[Token(Token = "0x6000860")]
		[Address(RVA = "0xCD64A4", Offset = "0xCD64A4", VA = "0xCD64A4")]
		public GlowFeature()
		{
		}
	}
}
namespace UnityEngine.Rendering.LWRP
{
	[Token(Token = "0x20001D8")]
	public class Blit : ScriptableRendererFeature
	{
		[Serializable]
		[Token(Token = "0x20001D9")]
		public class BlitSettings
		{
			[Token(Token = "0x40008F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RenderPassEvent Event;

			[Token(Token = "0x40008F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Material blitMaterial;

			[Token(Token = "0x40008F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int blitMaterialPassIndex;

			[Token(Token = "0x40008F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public Target destination;

			[Token(Token = "0x40008F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string textureId;

			[Token(Token = "0x6000874")]
			[Address(RVA = "0xCD7234", Offset = "0xCD7234", VA = "0xCD7234")]
			public BlitSettings()
			{
			}
		}

		[Token(Token = "0x20001DA")]
		public enum Target
		{
			[Token(Token = "0x40008F6")]
			Color,
			[Token(Token = "0x40008F7")]
			Texture
		}

		[Token(Token = "0x40008ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BlitSettings settings;

		[Token(Token = "0x40008EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RenderTargetHandle m_RenderTextureHandle;

		[Token(Token = "0x40008EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private BlitPass blitPass;

		[Token(Token = "0x6000871")]
		[Address(RVA = "0xCD6D88", Offset = "0xCD6D88", VA = "0xCD6D88", Slot = "5")]
		public override void Create()
		{
		}

		[Token(Token = "0x6000872")]
		[Address(RVA = "0xCD6F44", Offset = "0xCD6F44", VA = "0xCD6F44", Slot = "7")]
		public override void AddRenderPasses(ScriptableRenderer renderer, ref RenderingData renderingData)
		{
		}

		[Token(Token = "0x6000873")]
		[Address(RVA = "0xCD71D0", Offset = "0xCD71D0", VA = "0xCD71D0")]
		public Blit()
		{
		}
	}
	[Token(Token = "0x20001DB")]
	internal class BlitPass : ScriptableRenderPass
	{
		[Token(Token = "0x20001DC")]
		public enum RenderTarget
		{
			[Token(Token = "0x4000900")]
			Color,
			[Token(Token = "0x4000901")]
			RenderTexture
		}

		[Token(Token = "0x40008F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Material blitMaterial;

		[Token(Token = "0x40008F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public int blitShaderPassIndex;

		[Token(Token = "0x40008FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private RenderTargetHandle m_TemporaryColorTexture;

		[Token(Token = "0x40008FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private string m_ProfilerTag;

		[Token(Token = "0x170000ED")]
		public FilterMode filterMode
		{
			[Token(Token = "0x6000875")]
			[Address(RVA = "0xCD7294", Offset = "0xCD7294", VA = "0xCD7294")]
			[CompilerGenerated]
			get
			{
				return default(FilterMode);
			}
			[Token(Token = "0x6000876")]
			[Address(RVA = "0xCD729C", Offset = "0xCD729C", VA = "0xCD729C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170000EE")]
		private RenderTargetIdentifier source
		{
			[Token(Token = "0x6000877")]
			[Address(RVA = "0xCD72A4", Offset = "0xCD72A4", VA = "0xCD72A4")]
			[CompilerGenerated]
			get
			{
				return default(RenderTargetIdentifier);
			}
			[Token(Token = "0x6000878")]
			[Address(RVA = "0xCD72C0", Offset = "0xCD72C0", VA = "0xCD72C0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170000EF")]
		private RenderTargetHandle destination
		{
			[Token(Token = "0x6000879")]
			[Address(RVA = "0xCD72DC", Offset = "0xCD72DC", VA = "0xCD72DC")]
			[CompilerGenerated]
			get
			{
				return default(RenderTargetHandle);
			}
			[Token(Token = "0x600087A")]
			[Address(RVA = "0xCD72F0", Offset = "0xCD72F0", VA = "0xCD72F0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x600087B")]
		[Address(RVA = "0xCD6EBC", Offset = "0xCD6EBC", VA = "0xCD6EBC")]
		public BlitPass(RenderPassEvent renderPassEvent, Material blitMaterial, int blitShaderPassIndex, string tag)
		{
		}

		[Token(Token = "0x600087C")]
		[Address(RVA = "0xCD71A4", Offset = "0xCD71A4", VA = "0xCD71A4")]
		public void Setup(RenderTargetIdentifier source, RenderTargetHandle destination)
		{
		}

		[Token(Token = "0x600087D")]
		[Address(RVA = "0xCD7304", Offset = "0xCD7304", VA = "0xCD7304", Slot = "9")]
		public override void Execute(ScriptableRenderContext context, ref RenderingData renderingData)
		{
		}

		[Token(Token = "0x600087E")]
		[Address(RVA = "0xCD75F4", Offset = "0xCD75F4", VA = "0xCD75F4", Slot = "4")]
		public override void FrameCleanup(CommandBuffer cmd)
		{
		}
	}
}
namespace UnityEngine.Localization.Settings
{
	[Serializable]
	[Token(Token = "0x20001DD")]
	public class SkipLanguageSelect : IStartupLocaleSelector
	{
		[Token(Token = "0x4000902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool shouldSkip;

		[Token(Token = "0x4000903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private string m_SkipCommandLineArgument;

		[Token(Token = "0x170000F0")]
		public string CommandLineArgument
		{
			[Token(Token = "0x600087F")]
			[Address(RVA = "0xCD76C0", Offset = "0xCD76C0", VA = "0xCD76C0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000880")]
			[Address(RVA = "0xCD76C8", Offset = "0xCD76C8", VA = "0xCD76C8")]
			set
			{
			}
		}

		[Token(Token = "0x6000881")]
		[Address(RVA = "0xCD76D0", Offset = "0xCD76D0", VA = "0xCD76D0", Slot = "4")]
		public Locale GetStartupLocale(ILocalesProvider availableLocales)
		{
			return null;
		}

		[Token(Token = "0x6000882")]
		[Address(RVA = "0xCD79F8", Offset = "0xCD79F8", VA = "0xCD79F8")]
		public SkipLanguageSelect()
		{
		}
	}
}
namespace BOD
{
	[Token(Token = "0x20001DE")]
	public class AnotherTrain : MonoBehaviour
	{
		[Token(Token = "0x6000883")]
		[Address(RVA = "0xCD7A48", Offset = "0xCD7A48", VA = "0xCD7A48")]
		public AnotherTrain()
		{
		}
	}
	[Token(Token = "0x20001DF")]
	[RequireComponent(typeof(Animation))]
	public class AnimationAudioEvent : MonoBehaviour
	{
		[Token(Token = "0x4000904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioSource audioSource;

		[Token(Token = "0x4000905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float eventTime;

		[Token(Token = "0x6000884")]
		[Address(RVA = "0xCD7A50", Offset = "0xCD7A50", VA = "0xCD7A50")]
		private void Start()
		{
		}

		[Token(Token = "0x6000885")]
		[Address(RVA = "0xCD7B3C", Offset = "0xCD7B3C", VA = "0xCD7B3C")]
		public void AudioEvent(int i)
		{
		}

		[Token(Token = "0x6000886")]
		[Address(RVA = "0xCD7C4C", Offset = "0xCD7C4C", VA = "0xCD7C4C")]
		public AnimationAudioEvent()
		{
		}
	}
	[Token(Token = "0x20001E0")]
	[CreateAssetMenu(menuName = "AudioClipGroup")]
	public class AudioClipGroup : ScriptableObject
	{
		[Token(Token = "0x4000906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip[] clip;

		[Token(Token = "0x6000887")]
		[Address(RVA = "0xCD7C54", Offset = "0xCD7C54", VA = "0xCD7C54")]
		public void Awake()
		{
		}

		[Token(Token = "0x6000888")]
		[Address(RVA = "0xCD7CF0", Offset = "0xCD7CF0", VA = "0xCD7CF0")]
		public AudioClip GetRandom()
		{
			return null;
		}

		[Token(Token = "0x6000889")]
		[Address(RVA = "0xCD7D38", Offset = "0xCD7D38", VA = "0xCD7D38")]
		public AudioClipGroup()
		{
		}
	}
	[Token(Token = "0x20001E1")]
	public class AudioManager : Singleton<AudioManager>
	{
		[Token(Token = "0x20001E2")]
		[CompilerGenerated]
		private sealed class <AmbienceCoroutine>d__16 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000910")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000911")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000912")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AudioManager <>4__this;

			[Token(Token = "0x4000913")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int track;

			[Token(Token = "0x4000914")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public AudioClip clip;

			[Token(Token = "0x4000915")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float ambienceVolume;

			[Token(Token = "0x4000916")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private AudioSource <ambience>5__2;

			[Token(Token = "0x170000F1")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600089A")]
				[Address(RVA = "0xCD85F0", Offset = "0xCD85F0", VA = "0xCD85F0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600089C")]
				[Address(RVA = "0xCD8638", Offset = "0xCD8638", VA = "0xCD8638", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000897")]
			[Address(RVA = "0xCD81D0", Offset = "0xCD81D0", VA = "0xCD81D0")]
			[DebuggerHidden]
			public <AmbienceCoroutine>d__16(int <>1__state)
			{
			}

			[Token(Token = "0x6000898")]
			[Address(RVA = "0xCD833C", Offset = "0xCD833C", VA = "0xCD833C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000899")]
			[Address(RVA = "0xCD8340", Offset = "0xCD8340", VA = "0xCD8340", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600089B")]
			[Address(RVA = "0xCD85F8", Offset = "0xCD85F8", VA = "0xCD85F8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001E3")]
		[CompilerGenerated]
		private sealed class <AmbienceStopCoroutine>d__17 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000917")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000918")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000919")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AudioManager <>4__this;

			[Token(Token = "0x400091A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int track;

			[Token(Token = "0x400091B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private AudioSource <ambience>5__2;

			[Token(Token = "0x170000F3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60008A0")]
				[Address(RVA = "0xCD882C", Offset = "0xCD882C", VA = "0xCD882C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60008A2")]
				[Address(RVA = "0xCD8874", Offset = "0xCD8874", VA = "0xCD8874", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600089D")]
			[Address(RVA = "0xCD8270", Offset = "0xCD8270", VA = "0xCD8270")]
			[DebuggerHidden]
			public <AmbienceStopCoroutine>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x600089E")]
			[Address(RVA = "0xCD8640", Offset = "0xCD8640", VA = "0xCD8640", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600089F")]
			[Address(RVA = "0xCD8644", Offset = "0xCD8644", VA = "0xCD8644", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60008A1")]
			[Address(RVA = "0xCD8834", Offset = "0xCD8834", VA = "0xCD8834", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001E4")]
		[CompilerGenerated]
		private sealed class <MusicStopCoroutine>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400091C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400091D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400091E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AudioManager <>4__this;

			[Token(Token = "0x400091F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float time;

			[Token(Token = "0x170000F5")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60008A6")]
				[Address(RVA = "0xCD89FC", Offset = "0xCD89FC", VA = "0xCD89FC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60008A8")]
				[Address(RVA = "0xCD8A44", Offset = "0xCD8A44", VA = "0xCD8A44", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60008A3")]
			[Address(RVA = "0xCD8298", Offset = "0xCD8298", VA = "0xCD8298")]
			[DebuggerHidden]
			public <MusicStopCoroutine>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x60008A4")]
			[Address(RVA = "0xCD887C", Offset = "0xCD887C", VA = "0xCD887C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60008A5")]
			[Address(RVA = "0xCD8880", Offset = "0xCD8880", VA = "0xCD8880", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60008A7")]
			[Address(RVA = "0xCD8A04", Offset = "0xCD8A04", VA = "0xCD8A04", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001E5")]
		[CompilerGenerated]
		private sealed class <MusicCoroutine>d__19 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000920")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000921")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000922")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AudioManager <>4__this;

			[Token(Token = "0x4000923")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public AudioClip musicClip;

			[Token(Token = "0x4000924")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float musicVolume;

			[Token(Token = "0x170000F7")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60008AC")]
				[Address(RVA = "0xCD8C90", Offset = "0xCD8C90", VA = "0xCD8C90", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F8")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60008AE")]
				[Address(RVA = "0xCD8CD8", Offset = "0xCD8CD8", VA = "0xCD8CD8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60008A9")]
			[Address(RVA = "0xCD82C0", Offset = "0xCD82C0", VA = "0xCD82C0")]
			[DebuggerHidden]
			public <MusicCoroutine>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x60008AA")]
			[Address(RVA = "0xCD8A4C", Offset = "0xCD8A4C", VA = "0xCD8A4C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60008AB")]
			[Address(RVA = "0xCD8A50", Offset = "0xCD8A50", VA = "0xCD8A50", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60008AD")]
			[Address(RVA = "0xCD8C98", Offset = "0xCD8C98", VA = "0xCD8C98", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioSource music;

		[Token(Token = "0x4000908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioSource[] ambience;

		[Token(Token = "0x4000909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeOutTime;

		[Token(Token = "0x400090A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float fadeInTime;

		[Token(Token = "0x400090B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioMixerGroup audioMixerSFX;

		[Token(Token = "0x400090C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AudioMixerGroup audioMixerVO;

		[Token(Token = "0x400090D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AudioMixerGroup audioMixerAmbience;

		[Token(Token = "0x400090E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AudioMixerGroup audioMixerMusic;

		[Token(Token = "0x400090F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float musicFadeSpeed;

		[Token(Token = "0x600088A")]
		[Address(RVA = "0xCD7D40", Offset = "0xCD7D40", VA = "0xCD7D40")]
		private void Update()
		{
		}

		[Token(Token = "0x600088B")]
		[Address(RVA = "0xCD7DC4", Offset = "0xCD7DC4", VA = "0xCD7DC4")]
		public void AdjustAmbienceVolume(int track, float volumeDelta, float time)
		{
		}

		[Token(Token = "0x600088C")]
		[Address(RVA = "0xCD7E38", Offset = "0xCD7E38", VA = "0xCD7E38")]
		public void PlayAmbience(AudioClip ambienceClip, int track, float volume)
		{
		}

		[Token(Token = "0x600088D")]
		[Address(RVA = "0xCD7EE8", Offset = "0xCD7EE8", VA = "0xCD7EE8")]
		public void StopAmbience(int track)
		{
		}

		[Token(Token = "0x600088E")]
		[Address(RVA = "0xCD7F74", Offset = "0xCD7F74", VA = "0xCD7F74")]
		public void PlayMusic(AudioClip musicClip, float volume)
		{
		}

		[Token(Token = "0x600088F")]
		[Address(RVA = "0xCD8114", Offset = "0xCD8114", VA = "0xCD8114")]
		public void StopMusic(float fadeSpeed)
		{
		}

		[Token(Token = "0x6000890")]
		[Address(RVA = "0xCD81AC", Offset = "0xCD81AC", VA = "0xCD81AC")]
		public void StopMusic()
		{
		}

		[Token(Token = "0x6000891")]
		[Address(RVA = "0xCD7E58", Offset = "0xCD7E58", VA = "0xCD7E58")]
		[IteratorStateMachine(typeof(<AmbienceCoroutine>d__16))]
		private IEnumerator AmbienceCoroutine(AudioClip clip, int track, float ambienceVolume)
		{
			return null;
		}

		[Token(Token = "0x6000892")]
		[Address(RVA = "0xCD81F8", Offset = "0xCD81F8", VA = "0xCD81F8")]
		[IteratorStateMachine(typeof(<AmbienceStopCoroutine>d__17))]
		private IEnumerator AmbienceStopCoroutine(int track)
		{
			return null;
		}

		[Token(Token = "0x6000893")]
		[Address(RVA = "0xCD8134", Offset = "0xCD8134", VA = "0xCD8134")]
		[IteratorStateMachine(typeof(<MusicStopCoroutine>d__18))]
		private IEnumerator MusicStopCoroutine(float time)
		{
			return null;
		}

		[Token(Token = "0x6000894")]
		[Address(RVA = "0xCD8090", Offset = "0xCD8090", VA = "0xCD8090")]
		[IteratorStateMachine(typeof(<MusicCoroutine>d__19))]
		private IEnumerator MusicCoroutine(AudioClip musicClip, float musicVolume)
		{
			return null;
		}

		[Token(Token = "0x6000895")]
		[Address(RVA = "0xCD82E8", Offset = "0xCD82E8", VA = "0xCD82E8")]
		public void PlaySoundAt(Vector3 point, AudioClip clip, float volume)
		{
		}

		[Token(Token = "0x6000896")]
		[Address(RVA = "0xCD82F4", Offset = "0xCD82F4", VA = "0xCD82F4")]
		public AudioManager()
		{
		}
	}
	[Token(Token = "0x20001E6")]
	public class CollisionAudio : MonoBehaviour
	{
		[Token(Token = "0x4000925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float minVelocity;

		[Token(Token = "0x4000926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float maxVelocity;

		[Token(Token = "0x4000927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<string> tags;

		[Token(Token = "0x4000928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioSource source;

		[Token(Token = "0x4000929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioClip audioClip;

		[Token(Token = "0x400092A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AudioClipGroup audioClipGroup;

		[Token(Token = "0x400092B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float minInterval;

		[Token(Token = "0x400092C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float lastCollisionTime;

		[Token(Token = "0x60008AF")]
		[Address(RVA = "0xCD8CE0", Offset = "0xCD8CE0", VA = "0xCD8CE0")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x60008B0")]
		[Address(RVA = "0xCD9000", Offset = "0xCD9000", VA = "0xCD9000")]
		private AudioClip GetClip()
		{
			return null;
		}

		[Token(Token = "0x60008B1")]
		[Address(RVA = "0xCD90B8", Offset = "0xCD90B8", VA = "0xCD90B8")]
		public CollisionAudio()
		{
		}
	}
	[Token(Token = "0x20001E7")]
	public class PlayAmbience : MonoBehaviour
	{
		[Token(Token = "0x400092D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip ambience;

		[Token(Token = "0x400092E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int track;

		[Token(Token = "0x400092F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float volume;

		[Token(Token = "0x60008B2")]
		[Address(RVA = "0xCD90C0", Offset = "0xCD90C0", VA = "0xCD90C0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60008B3")]
		[Address(RVA = "0xCD9130", Offset = "0xCD9130", VA = "0xCD9130")]
		public PlayAmbience()
		{
		}
	}
	[Token(Token = "0x20001E8")]
	public class PlayMusic : MonoBehaviour
	{
		[Token(Token = "0x4000930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip music;

		[Token(Token = "0x4000931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float volume;

		[Token(Token = "0x60008B4")]
		[Address(RVA = "0xCD9144", Offset = "0xCD9144", VA = "0xCD9144")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60008B5")]
		[Address(RVA = "0xCD919C", Offset = "0xCD919C", VA = "0xCD919C")]
		public PlayMusic()
		{
		}
	}
	[Token(Token = "0x20001E9")]
	public class SetAmbienceVolume : MonoBehaviour
	{
		[Token(Token = "0x4000932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int track;

		[Token(Token = "0x4000933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float volumeDelta;

		[Token(Token = "0x4000934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float time;

		[Token(Token = "0x60008B6")]
		[Address(RVA = "0xCD91B0", Offset = "0xCD91B0", VA = "0xCD91B0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60008B7")]
		[Address(RVA = "0xCD9208", Offset = "0xCD9208", VA = "0xCD9208")]
		public SetAmbienceVolume()
		{
		}
	}
	[Token(Token = "0x20001EA")]
	public class StopAmbience : MonoBehaviour
	{
		[Token(Token = "0x4000935")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int track;

		[Token(Token = "0x60008B8")]
		[Address(RVA = "0xCD9210", Offset = "0xCD9210", VA = "0xCD9210")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60008B9")]
		[Address(RVA = "0xCD9264", Offset = "0xCD9264", VA = "0xCD9264")]
		public StopAmbience()
		{
		}
	}
	[Token(Token = "0x20001EB")]
	public class StopMusic : MonoBehaviour
	{
		[Token(Token = "0x4000936")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float fadeSpeed;

		[Token(Token = "0x60008BA")]
		[Address(RVA = "0xCD926C", Offset = "0xCD926C", VA = "0xCD926C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60008BB")]
		[Address(RVA = "0xCD92F8", Offset = "0xCD92F8", VA = "0xCD92F8")]
		public StopMusic()
		{
		}
	}
	[Token(Token = "0x20001EC")]
	public class AudioMixer : MonoBehaviour
	{
		[Token(Token = "0x20001ED")]
		[CompilerGenerated]
		private sealed class <RefreshCoroutine>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400093A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400093B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400093C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AudioMixer <>4__this;

			[Token(Token = "0x400093D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Transform <gridTransform>5__2;

			[Token(Token = "0x400093E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private AudioSource[] <>7__wrap2;

			[Token(Token = "0x400093F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <>7__wrap3;

			[Token(Token = "0x170000F9")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60008C4")]
				[Address(RVA = "0xCD97EC", Offset = "0xCD97EC", VA = "0xCD97EC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000FA")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60008C6")]
				[Address(RVA = "0xCD9834", Offset = "0xCD9834", VA = "0xCD9834", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60008C1")]
			[Address(RVA = "0xCD941C", Offset = "0xCD941C", VA = "0xCD941C")]
			[DebuggerHidden]
			public <RefreshCoroutine>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x60008C2")]
			[Address(RVA = "0xCD944C", Offset = "0xCD944C", VA = "0xCD944C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60008C3")]
			[Address(RVA = "0xCD9450", Offset = "0xCD9450", VA = "0xCD9450", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60008C5")]
			[Address(RVA = "0xCD97F4", Offset = "0xCD97F4", VA = "0xCD97F4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000937")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject mixerPrefab;

		[Token(Token = "0x4000938")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GridLayoutGroup grid;

		[Token(Token = "0x4000939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool refreshing;

		[Token(Token = "0x60008BC")]
		[Address(RVA = "0xCD9308", Offset = "0xCD9308", VA = "0xCD9308")]
		private void Start()
		{
		}

		[Token(Token = "0x60008BD")]
		[Address(RVA = "0xCD930C", Offset = "0xCD930C", VA = "0xCD930C")]
		private void Update()
		{
		}

		[Token(Token = "0x60008BE")]
		[Address(RVA = "0xCD9310", Offset = "0xCD9310", VA = "0xCD9310")]
		public void Refresh()
		{
		}

		[Token(Token = "0x60008BF")]
		[Address(RVA = "0xCD93B4", Offset = "0xCD93B4", VA = "0xCD93B4")]
		[IteratorStateMachine(typeof(<RefreshCoroutine>d__6))]
		private IEnumerator RefreshCoroutine()
		{
			return null;
		}

		[Token(Token = "0x60008C0")]
		[Address(RVA = "0xCD9444", Offset = "0xCD9444", VA = "0xCD9444")]
		public AudioMixer()
		{
		}
	}
	[Token(Token = "0x20001EE")]
	public class BookCover : HandAttachBehaviour
	{
		[Token(Token = "0x20001EF")]
		public enum Axis_t
		{
			[Token(Token = "0x400096E")]
			XAxis,
			[Token(Token = "0x400096F")]
			YAxis,
			[Token(Token = "0x4000970")]
			ZAxis
		}

		[Token(Token = "0x20001F0")]
		[CompilerGenerated]
		private sealed class <HapticPulses>d__52 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000971")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000972")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000973")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Hand hand;

			[Token(Token = "0x4000974")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float flMagnitude;

			[Token(Token = "0x4000975")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public int nCount;

			[Token(Token = "0x4000976")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <nRangeMax>5__2;

			[Token(Token = "0x4000977")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private ushort <i>5__3;

			[Token(Token = "0x170000FB")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60008DD")]
				[Address(RVA = "0xCDB300", Offset = "0xCDB300", VA = "0xCDB300", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000FC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60008DF")]
				[Address(RVA = "0xCDB348", Offset = "0xCDB348", VA = "0xCDB348", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60008DA")]
			[Address(RVA = "0xCDA0B4", Offset = "0xCDA0B4", VA = "0xCDA0B4")]
			[DebuggerHidden]
			public <HapticPulses>d__52(int <>1__state)
			{
			}

			[Token(Token = "0x60008DB")]
			[Address(RVA = "0xCDB17C", Offset = "0xCDB17C", VA = "0xCDB17C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60008DC")]
			[Address(RVA = "0xCDB180", Offset = "0xCDB180", VA = "0xCDB180", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60008DE")]
			[Address(RVA = "0xCDB308", Offset = "0xCDB308", VA = "0xCDB308", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float lastLinearMappingValue;

		[Token(Token = "0x4000941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool released;

		[Token(Token = "0x4000942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float velocity;

		[Token(Token = "0x4000943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float velocityMultiplier;

		[Token(Token = "0x4000944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The axis around which the circular drive will rotate in local space")]
		public Axis_t axisOfRotation;

		[Token(Token = "0x4000945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Child GameObject which has the Collider component to initiate interaction, only needs to be set if there is more than one Collider child")]
		public Collider childCollider;

		[Token(Token = "0x4000946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("A LinearMapping component to drive, if not specified one will be dynamically added to this GameObject")]
		public LinearMapping linearMapping;

		[Token(Token = "0x4000947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("If true, the drive will stay manipulating as long as the button is held down, if false, it will stop if the controller moves out of the collider")]
		public bool hoverLock;

		[Token(Token = "0x4000948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		[Header("Limited Rotation")]
		[Tooltip("If true, the rotation will be limited to [minAngle, maxAngle], if false, the rotation is unlimited")]
		public bool limited;

		[Token(Token = "0x4000949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public Vector2 frozenDistanceMinMaxThreshold;

		[Token(Token = "0x400094A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public UnityEvent onFrozenDistanceThreshold;

		[Token(Token = "0x400094B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Header("Limited Rotation Min")]
		[Tooltip("If limited is true, the specifies the lower limit, otherwise value is unused")]
		public float minAngle;

		[Token(Token = "0x400094C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Tooltip("If limited, set whether drive will freeze its angle when the min angle is reached")]
		public bool freezeOnMin;

		[Token(Token = "0x400094D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("If limited, event invoked when minAngle is reached")]
		public UnityEvent onMinAngle;

		[Token(Token = "0x400094E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Header("Limited Rotation Max")]
		[Tooltip("If limited is true, the specifies the upper limit, otherwise value is unused")]
		public float maxAngle;

		[Token(Token = "0x400094F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[Tooltip("If limited, set whether drive will freeze its angle when the max angle is reached")]
		public bool freezeOnMax;

		[Token(Token = "0x4000950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("If limited, event invoked when maxAngle is reached")]
		public UnityEvent onMaxAngle;

		[Token(Token = "0x4000951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("If limited is true, this forces the starting angle to be startAngle, clamped to [minAngle, maxAngle]")]
		public bool forceStart;

		[Token(Token = "0x4000952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[Tooltip("If limited is true and forceStart is true, the starting angle will be this, clamped to [minAngle, maxAngle]")]
		public float startAngle;

		[Token(Token = "0x4000953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("If true, the transform of the GameObject this component is on will be rotated accordingly")]
		public bool rotateGameObject;

		[Token(Token = "0x4000954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Transform gameObjectToRotate;

		[Token(Token = "0x4000955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("If true, the path of the Hand (red) and the projected value (green) will be drawn")]
		public bool debugPath;

		[Token(Token = "0x4000956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[Tooltip("If debugPath is true, this is the maximum number of GameObjects to create to draw the path")]
		public int dbgPathLimit;

		[Token(Token = "0x4000957")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("If not null, the TextMesh will display the linear value and the angular value of this circular drive")]
		public TextMesh debugText;

		[Token(Token = "0x4000958")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("The output angle value of the drive in degrees, unlimited will increase or decrease without bound, take the 360 modulus to find number of rotations")]
		public float outAngle;

		[Token(Token = "0x4000959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public UnityEvent onGrab;

		[Token(Token = "0x400095A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Quaternion start;

		[Token(Token = "0x400095B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Vector3 worldPlaneNormal;

		[Token(Token = "0x400095C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private Vector3 localPlaneNormal;

		[Token(Token = "0x400095D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Vector3 lastHandProjected;

		[Token(Token = "0x400095E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private Color red;

		[Token(Token = "0x400095F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private Color green;

		[Token(Token = "0x4000960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private GameObject[] dbgHandObjects;

		[Token(Token = "0x4000961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private GameObject[] dbgProjObjects;

		[Token(Token = "0x4000962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private GameObject dbgObjectsParent;

		[Token(Token = "0x4000963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private int dbgObjectCount;

		[Token(Token = "0x4000964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		private int dbgObjectIndex;

		[Token(Token = "0x4000965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private bool driving;

		[Token(Token = "0x4000966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		private float minMaxAngularThreshold;

		[Token(Token = "0x4000967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private bool frozen;

		[Token(Token = "0x4000968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private float frozenAngle;

		[Token(Token = "0x4000969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private Vector3 frozenHandWorldPos;

		[Token(Token = "0x400096A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		private Vector2 frozenSqDistanceMinMaxThreshold;

		[Token(Token = "0x400096B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private Hand handHoverLocked;

		[Token(Token = "0x400096C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public bool disabled;

		[Token(Token = "0x60008C7")]
		[Address(RVA = "0xCD983C", Offset = "0xCD983C", VA = "0xCD983C")]
		public void EnableCollider()
		{
		}

		[Token(Token = "0x60008C8")]
		[Address(RVA = "0xCD985C", Offset = "0xCD985C", VA = "0xCD985C")]
		private void Freeze(Hand hand)
		{
		}

		[Token(Token = "0x60008C9")]
		[Address(RVA = "0xCD98B0", Offset = "0xCD98B0", VA = "0xCD98B0")]
		private void UnFreeze()
		{
		}

		[Token(Token = "0x60008CA")]
		[Address(RVA = "0xCD98C0", Offset = "0xCD98C0", VA = "0xCD98C0")]
		private void Start()
		{
		}

		[Token(Token = "0x60008CB")]
		[Address(RVA = "0xCD9DB8", Offset = "0xCD9DB8", VA = "0xCD9DB8")]
		public void DisableTurn()
		{
		}

		[Token(Token = "0x60008CC")]
		[Address(RVA = "0xCD9DE4", Offset = "0xCD9DE4", VA = "0xCD9DE4")]
		private void Update()
		{
		}

		[Token(Token = "0x60008CD")]
		[Address(RVA = "0xCDA02C", Offset = "0xCDA02C", VA = "0xCDA02C")]
		[IteratorStateMachine(typeof(<HapticPulses>d__52))]
		private IEnumerator HapticPulses(Hand hand, float flMagnitude, int nCount)
		{
			return null;
		}

		[Token(Token = "0x60008CE")]
		[Address(RVA = "0xCDA0DC", Offset = "0xCDA0DC", VA = "0xCDA0DC", Slot = "8")]
		protected override void Detach(Hand hand)
		{
		}

		[Token(Token = "0x60008CF")]
		[Address(RVA = "0xCDA11C", Offset = "0xCDA11C", VA = "0xCDA11C")]
		private new void Released()
		{
		}

		[Token(Token = "0x60008D0")]
		[Address(RVA = "0xCDA14C", Offset = "0xCDA14C", VA = "0xCDA14C", Slot = "7")]
		protected override void Attach(Hand hand)
		{
		}

		[Token(Token = "0x60008D1")]
		[Address(RVA = "0xCDA9F4", Offset = "0xCDA9F4", VA = "0xCDA9F4")]
		private void HandAttachedUpdate(Hand hand)
		{
		}

		[Token(Token = "0x60008D2")]
		[Address(RVA = "0xCDA1F8", Offset = "0xCDA1F8", VA = "0xCDA1F8")]
		private Vector3 ComputeToTransformProjected(Transform xForm)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008D3")]
		[Address(RVA = "0xCDAA0C", Offset = "0xCDAA0C", VA = "0xCDAA0C")]
		private void DrawDebugPath(Transform xForm, Vector3 toTransformProjected)
		{
		}

		[Token(Token = "0x60008D4")]
		[Address(RVA = "0xCD9FD0", Offset = "0xCD9FD0", VA = "0xCD9FD0")]
		private void UpdateLinearMapping()
		{
		}

		[Token(Token = "0x60008D5")]
		[Address(RVA = "0xCD9EFC", Offset = "0xCD9EFC", VA = "0xCD9EFC")]
		private void UpdateGameObject()
		{
		}

		[Token(Token = "0x60008D6")]
		[Address(RVA = "0xCDB014", Offset = "0xCDB014", VA = "0xCDB014")]
		private void UpdateDebugText()
		{
		}

		[Token(Token = "0x60008D7")]
		[Address(RVA = "0xCD9D98", Offset = "0xCD9D98", VA = "0xCD9D98")]
		private void UpdateAll()
		{
		}

		[Token(Token = "0x60008D8")]
		[Address(RVA = "0xCDA590", Offset = "0xCDA590", VA = "0xCDA590")]
		private void ComputeAngle(Hand hand)
		{
		}

		[Token(Token = "0x60008D9")]
		[Address(RVA = "0xCDB118", Offset = "0xCDB118", VA = "0xCDB118")]
		public BookCover()
		{
		}
	}
	[Token(Token = "0x20001F1")]
	public class BookPage : MonoBehaviour
	{
		[Token(Token = "0x4000978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BookPodium podium;

		[Token(Token = "0x4000979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int pageNum;

		[Token(Token = "0x400097A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<PopUpPhoto> photo;

		[Token(Token = "0x60008E0")]
		[Address(RVA = "0xCDB350", Offset = "0xCDB350", VA = "0xCDB350")]
		private void Start()
		{
		}

		[Token(Token = "0x60008E1")]
		[Address(RVA = "0xCDB3C0", Offset = "0xCDB3C0", VA = "0xCDB3C0")]
		public void RegisterPage(PopUpPhoto photoPage)
		{
		}

		[Token(Token = "0x60008E2")]
		[Address(RVA = "0xCDB51C", Offset = "0xCDB51C", VA = "0xCDB51C")]
		public void Open()
		{
		}

		[Token(Token = "0x60008E3")]
		[Address(RVA = "0xCDB5B8", Offset = "0xCDB5B8", VA = "0xCDB5B8")]
		public void Close()
		{
		}

		[Token(Token = "0x60008E4")]
		[Address(RVA = "0xCDB654", Offset = "0xCDB654", VA = "0xCDB654")]
		public void PreviousPage()
		{
		}

		[Token(Token = "0x60008E5")]
		[Address(RVA = "0xCDB71C", Offset = "0xCDB71C", VA = "0xCDB71C")]
		public void NextPage()
		{
		}

		[Token(Token = "0x60008E6")]
		[Address(RVA = "0xCDB7E0", Offset = "0xCDB7E0", VA = "0xCDB7E0")]
		private void Update()
		{
		}

		[Token(Token = "0x60008E7")]
		[Address(RVA = "0xCDB7E4", Offset = "0xCDB7E4", VA = "0xCDB7E4")]
		public BookPage()
		{
		}
	}
	[Token(Token = "0x20001F2")]
	public class ChalkLine : MonoBehaviour
	{
		[Token(Token = "0x400097B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform randallHands;

		[Token(Token = "0x400097C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform chalk;

		[Token(Token = "0x400097D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float startTime;

		[Token(Token = "0x400097E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float finishTime;

		[Token(Token = "0x400097F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 handPosition;

		[Token(Token = "0x4000980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 bannerPosition;

		[Token(Token = "0x4000981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool drawline;

		[Token(Token = "0x4000982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float time;

		[Token(Token = "0x4000983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Animator randallAnim;

		[Token(Token = "0x60008E8")]
		[Address(RVA = "0xCDB7EC", Offset = "0xCDB7EC", VA = "0xCDB7EC")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008E9")]
		[Address(RVA = "0xCDB868", Offset = "0xCDB868", VA = "0xCDB868")]
		private void Start()
		{
		}

		[Token(Token = "0x60008EA")]
		[Address(RVA = "0xCDB884", Offset = "0xCDB884", VA = "0xCDB884")]
		private void Update()
		{
		}

		[Token(Token = "0x60008EB")]
		[Address(RVA = "0xCDB9C8", Offset = "0xCDB9C8", VA = "0xCDB9C8")]
		public ChalkLine()
		{
		}
	}
	[Token(Token = "0x20001F3")]
	public class ChangePlayerTransform : MonoBehaviour
	{
		[Token(Token = "0x4000984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 rotate;

		[Token(Token = "0x60008EC")]
		[Address(RVA = "0xCDB9D0", Offset = "0xCDB9D0", VA = "0xCDB9D0")]
		private void Start()
		{
		}

		[Token(Token = "0x60008ED")]
		[Address(RVA = "0xCDBAF4", Offset = "0xCDBAF4", VA = "0xCDBAF4")]
		public ChangePlayerTransform()
		{
		}
	}
	[Token(Token = "0x20001F4")]
	public class AnimateCharacter : MonoBehaviour
	{
		[Token(Token = "0x4000985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SCENE_CHARACTER characterID;

		[Token(Token = "0x4000986")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float delay;

		[Token(Token = "0x4000987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GenericCharacter character;

		[Token(Token = "0x4000988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private SceneManager sceneMan;

		[Token(Token = "0x4000989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string animation;

		[Token(Token = "0x400098A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool value;

		[Token(Token = "0x400098B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool isTrigger;

		[Token(Token = "0x400098C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		public bool isAnimationName;

		[Token(Token = "0x400098D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B")]
		public bool forceUpdate;

		[Token(Token = "0x400098E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float crossfadeTime;

		[Token(Token = "0x400098F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float offsetTime;

		[Token(Token = "0x60008EE")]
		[Address(RVA = "0xCDBAFC", Offset = "0xCDBAFC", VA = "0xCDBAFC")]
		private void Start()
		{
		}

		[Token(Token = "0x60008EF")]
		[Address(RVA = "0xCDBBF0", Offset = "0xCDBBF0", VA = "0xCDBBF0")]
		private void Animate()
		{
		}

		[Token(Token = "0x60008F0")]
		[Address(RVA = "0xCDBCF0", Offset = "0xCDBCF0", VA = "0xCDBCF0")]
		private void Update()
		{
		}

		[Token(Token = "0x60008F1")]
		[Address(RVA = "0xCDBCF4", Offset = "0xCDBCF4", VA = "0xCDBCF4")]
		public AnimateCharacter()
		{
		}
	}
	[Token(Token = "0x20001F5")]
	public class AttachCharactersToPlatform : MonoBehaviour
	{
		[Token(Token = "0x4000990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SCENE_CHARACTER[] characterIDs;

		[Token(Token = "0x4000991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform platform;

		[Token(Token = "0x4000992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 lastpos;

		[Token(Token = "0x4000993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<GenericCharacter> characters;

		[Token(Token = "0x60008F2")]
		[Address(RVA = "0xCDBCFC", Offset = "0xCDBCFC", VA = "0xCDBCFC")]
		private void Start()
		{
		}

		[Token(Token = "0x60008F3")]
		[Address(RVA = "0xCDBE3C", Offset = "0xCDBE3C", VA = "0xCDBE3C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60008F4")]
		[Address(RVA = "0xCDC02C", Offset = "0xCDC02C", VA = "0xCDC02C")]
		public AttachCharactersToPlatform()
		{
		}
	}
	[Token(Token = "0x20001F6")]
	public class ChangeIdle : MonoBehaviour
	{
		[Token(Token = "0x4000994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SCENE_CHARACTER characterID;

		[Token(Token = "0x4000995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float delay;

		[Token(Token = "0x4000996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float clipTime;

		[Token(Token = "0x4000997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GenericCharacter character;

		[Token(Token = "0x4000998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SceneManager sceneMan;

		[Token(Token = "0x4000999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationClip animation;

		[Token(Token = "0x60008F5")]
		[Address(RVA = "0xCDC0A8", Offset = "0xCDC0A8", VA = "0xCDC0A8")]
		private void Start()
		{
		}

		[Token(Token = "0x60008F6")]
		[Address(RVA = "0xCDC0F8", Offset = "0xCDC0F8", VA = "0xCDC0F8")]
		private void ChangeAnimation()
		{
		}

		[Token(Token = "0x60008F7")]
		[Address(RVA = "0xCDC1C0", Offset = "0xCDC1C0", VA = "0xCDC1C0")]
		private void Update()
		{
		}

		[Token(Token = "0x60008F8")]
		[Address(RVA = "0xCDC1C4", Offset = "0xCDC1C4", VA = "0xCDC1C4")]
		public ChangeIdle()
		{
		}
	}
	[Token(Token = "0x20001F7")]
	public class CharacterObjectInteraction : MonoBehaviour
	{
		[Token(Token = "0x400099A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SCENE_CHARACTER characterID;

		[Token(Token = "0x400099B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform grabObject;

		[Token(Token = "0x400099C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform parentOnDrop;

		[Token(Token = "0x400099D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool destroyAllOnDisable;

		[Token(Token = "0x400099E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RightHandInteractionListener rightEvents;

		[Token(Token = "0x400099F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private LeftHandInteractionListener leftEvents;

		[Token(Token = "0x40009A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Dictionary<HumanBodyBones, GameObject> interactiveObject;

		[Token(Token = "0x40009A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GenericCharacter c;

		[Token(Token = "0x40009A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform followTransform;

		[Token(Token = "0x40009A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 pos;

		[Token(Token = "0x40009A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Quaternion rot;

		[Token(Token = "0x40009A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private Vector3 ObjPos;

		[Token(Token = "0x40009A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Quaternion ObjRot;

		[Token(Token = "0x40009A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool interacting;

		[Token(Token = "0x60008F9")]
		[Address(RVA = "0xCDC1CC", Offset = "0xCDC1CC", VA = "0xCDC1CC")]
		private void Update()
		{
		}

		[Token(Token = "0x60008FA")]
		[Address(RVA = "0xCDC504", Offset = "0xCDC504", VA = "0xCDC504")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60008FB")]
		[Address(RVA = "0xCDC66C", Offset = "0xCDC66C", VA = "0xCDC66C")]
		public void LeftGrab()
		{
		}

		[Token(Token = "0x60008FC")]
		[Address(RVA = "0xCDC704", Offset = "0xCDC704", VA = "0xCDC704")]
		public void RightGrab()
		{
		}

		[Token(Token = "0x60008FD")]
		[Address(RVA = "0xCDC770", Offset = "0xCDC770", VA = "0xCDC770")]
		public void RightDrop(float velocityMultiplier)
		{
		}

		[Token(Token = "0x60008FE")]
		[Address(RVA = "0xCDC778", Offset = "0xCDC778", VA = "0xCDC778")]
		public void LeftDrop(float velocityMultiplier)
		{
		}

		[Token(Token = "0x60008FF")]
		[Address(RVA = "0xCDC780", Offset = "0xCDC780", VA = "0xCDC780")]
		private void Drop(HumanBodyBones bone, float velocityMultiplier)
		{
		}

		[Token(Token = "0x6000900")]
		[Address(RVA = "0xCDC944", Offset = "0xCDC944", VA = "0xCDC944")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6000901")]
		[Address(RVA = "0xCDCA8C", Offset = "0xCDCA8C", VA = "0xCDCA8C")]
		public CharacterObjectInteraction()
		{
		}
	}
	[Token(Token = "0x20001F8")]
	[RequireComponent(typeof(GenericCharacter))]
	public class CharacterPrefabSwap : MonoBehaviour
	{
		[Token(Token = "0x40009A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject newPrefab;

		[Token(Token = "0x40009A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public State state;

		[Token(Token = "0x6000902")]
		[Address(RVA = "0xCDCB08", Offset = "0xCDCB08", VA = "0xCDCB08")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000903")]
		[Address(RVA = "0xCDCB88", Offset = "0xCDCB88", VA = "0xCDCB88")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000904")]
		[Address(RVA = "0xCDCC08", Offset = "0xCDCC08", VA = "0xCDCC08")]
		private void SceneManager_OnStateChange()
		{
		}

		[Token(Token = "0x6000905")]
		[Address(RVA = "0xCDCCF4", Offset = "0xCDCCF4", VA = "0xCDCCF4")]
		public CharacterPrefabSwap()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001F9")]
	public class BODCharacter
	{
		[Token(Token = "0x40009AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SCENE_CHARACTER characterID;

		[Token(Token = "0x40009AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string path;

		[Token(Token = "0x6000906")]
		[Address(RVA = "0xCDCCFC", Offset = "0xCDCCFC", VA = "0xCDCCFC")]
		public BODCharacter()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001FA")]
	[CreateAssetMenu]
	public class CharacterReference : ScriptableObject
	{
		[Token(Token = "0x40009AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BODCharacter[] character;

		[Token(Token = "0x6000907")]
		[Address(RVA = "0xCDCD04", Offset = "0xCDCD04", VA = "0xCDCD04")]
		public CharacterReference()
		{
		}
	}
	[Token(Token = "0x20001FB")]
	public class CharacterRockInteraction : MonoBehaviour
	{
		[Token(Token = "0x20001FC")]
		private enum RockCollectState
		{
			[Token(Token = "0x40009C4")]
			MoveToRandom,
			[Token(Token = "0x40009C5")]
			CollectRock,
			[Token(Token = "0x40009C6")]
			ReturnToWheelbarrow,
			[Token(Token = "0x40009C7")]
			DropRock
		}

		[Token(Token = "0x40009AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SCENE_CHARACTER characterID;

		[Token(Token = "0x40009AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject[] rockPrefabs;

		[Token(Token = "0x40009AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3[] rockOffsets;

		[Token(Token = "0x40009B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3[] rockRotationOffsets;

		[Token(Token = "0x40009B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool mirrorLeftHandOffsets;

		[Token(Token = "0x40009B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform parentOnDrop;

		[Token(Token = "0x40009B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool destroyAllOnDisable;

		[Token(Token = "0x40009B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool dropAllOnDisable;

		[Token(Token = "0x40009B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform[] spawnLocations;

		[Token(Token = "0x40009B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int prespawnCount;

		[Token(Token = "0x40009B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float minVelocityMultiplier;

		[Token(Token = "0x40009B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public UnityEvent HoldObject;

		[Token(Token = "0x40009B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public UnityEvent HandsEmpty;

		[Token(Token = "0x40009BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RightHandInteractionListener rightEvents;

		[Token(Token = "0x40009BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private LeftHandInteractionListener leftEvents;

		[Token(Token = "0x40009BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Dictionary<HumanBodyBones, GameObject> interactiveObject;

		[Token(Token = "0x40009BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int nextSpawn;

		[Token(Token = "0x40009BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Queue<GameObject> spawnedRocks;

		[Token(Token = "0x40009BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Queue<int> spawnedRockIDs;

		[Token(Token = "0x40009C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float minSpawnTime;

		[Token(Token = "0x40009C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private float lastGrabTime;

		[Token(Token = "0x40009C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private RockCollectState state;

		[Token(Token = "0x6000908")]
		[Address(RVA = "0xCDCD0C", Offset = "0xCDCD0C", VA = "0xCDCD0C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000909")]
		[Address(RVA = "0xCDCF6C", Offset = "0xCDCF6C", VA = "0xCDCF6C")]
		private void Update()
		{
		}

		[Token(Token = "0x600090A")]
		[Address(RVA = "0xCDCD48", Offset = "0xCDCD48", VA = "0xCDCD48")]
		private void SpawnNextRock()
		{
		}

		[Token(Token = "0x600090B")]
		[Address(RVA = "0xCDD2D8", Offset = "0xCDD2D8", VA = "0xCDD2D8")]
		public void LeftGrab()
		{
		}

		[Token(Token = "0x600090C")]
		[Address(RVA = "0xCDD8C8", Offset = "0xCDD8C8", VA = "0xCDD8C8")]
		public void RightGrab()
		{
		}

		[Token(Token = "0x600090D")]
		[Address(RVA = "0xCDD9AC", Offset = "0xCDD9AC", VA = "0xCDD9AC")]
		public void RightDrop(float velocityMultiplier)
		{
		}

		[Token(Token = "0x600090E")]
		[Address(RVA = "0xCDDCDC", Offset = "0xCDDCDC", VA = "0xCDDCDC")]
		public void LeftDrop(float velocityMultiplier)
		{
		}

		[Token(Token = "0x600090F")]
		[Address(RVA = "0xCDD9B4", Offset = "0xCDD9B4", VA = "0xCDD9B4")]
		private void Drop(HumanBodyBones bone, float velocityMultiplier)
		{
		}

		[Token(Token = "0x6000910")]
		[Address(RVA = "0xCDD3BC", Offset = "0xCDD3BC", VA = "0xCDD3BC")]
		private GameObject GrabRock(HumanBodyBones bone)
		{
			return null;
		}

		[Token(Token = "0x6000911")]
		[Address(RVA = "0xCDDCE4", Offset = "0xCDDCE4", VA = "0xCDDCE4")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6000912")]
		[Address(RVA = "0xCDE034", Offset = "0xCDE034", VA = "0xCDE034")]
		public CharacterRockInteraction()
		{
		}
	}
	[Token(Token = "0x20001FD")]
	public class ConditionalCharacterEnterPlatform : MonoBehaviour
	{
		[Token(Token = "0x20001FE")]
		[CompilerGenerated]
		private sealed class <ConditionalEnterRoutine>d__2 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40009C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40009CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40009CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ConditionalCharacterEnterPlatform <>4__this;

			[Token(Token = "0x40009CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private GenericCharacter <character>5__2;

			[Token(Token = "0x170000FD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600091A")]
				[Address(RVA = "0xCDE6AC", Offset = "0xCDE6AC", VA = "0xCDE6AC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000FE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600091C")]
				[Address(RVA = "0xCDE6F4", Offset = "0xCDE6F4", VA = "0xCDE6F4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000917")]
			[Address(RVA = "0xCDE204", Offset = "0xCDE204", VA = "0xCDE204")]
			[DebuggerHidden]
			public <ConditionalEnterRoutine>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x6000918")]
			[Address(RVA = "0xCDE238", Offset = "0xCDE238", VA = "0xCDE238", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000919")]
			[Address(RVA = "0xCDE23C", Offset = "0xCDE23C", VA = "0xCDE23C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600091B")]
			[Address(RVA = "0xCDE6B4", Offset = "0xCDE6B4", VA = "0xCDE6B4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40009C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SCENE_CHARACTER characterID;

		[Token(Token = "0x6000913")]
		[Address(RVA = "0xCDE150", Offset = "0xCDE150", VA = "0xCDE150")]
		private void Start()
		{
		}

		[Token(Token = "0x6000914")]
		[Address(RVA = "0xCDE19C", Offset = "0xCDE19C", VA = "0xCDE19C")]
		[IteratorStateMachine(typeof(<ConditionalEnterRoutine>d__2))]
		private IEnumerator ConditionalEnterRoutine()
		{
			return null;
		}

		[Token(Token = "0x6000915")]
		[Address(RVA = "0xCDE22C", Offset = "0xCDE22C", VA = "0xCDE22C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000916")]
		[Address(RVA = "0xCDE230", Offset = "0xCDE230", VA = "0xCDE230")]
		public ConditionalCharacterEnterPlatform()
		{
		}
	}
	[Token(Token = "0x20001FF")]
	public class CrowdSpawner : MonoBehaviour
	{
		[Token(Token = "0x2000200")]
		[CompilerGenerated]
		private sealed class <SpawnCrowd>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40009D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40009D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40009D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CrowdSpawner <>4__this;

			[Token(Token = "0x40009D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <i>5__2;

			[Token(Token = "0x170000FF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000924")]
				[Address(RVA = "0xCDED10", Offset = "0xCDED10", VA = "0xCDED10", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000100")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000926")]
				[Address(RVA = "0xCDED58", Offset = "0xCDED58", VA = "0xCDED58", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000921")]
			[Address(RVA = "0xCDE830", Offset = "0xCDE830", VA = "0xCDE830")]
			[DebuggerHidden]
			public <SpawnCrowd>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x6000922")]
			[Address(RVA = "0xCDE860", Offset = "0xCDE860", VA = "0xCDE860", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000923")]
			[Address(RVA = "0xCDE864", Offset = "0xCDE864", VA = "0xCDE864", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000925")]
			[Address(RVA = "0xCDED18", Offset = "0xCDED18", VA = "0xCDED18", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40009CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform spawnedParent;

		[Token(Token = "0x40009CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject[] options;

		[Token(Token = "0x40009CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float[] y_offset;

		[Token(Token = "0x40009D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject test;

		[Token(Token = "0x40009D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ProportionValue<int>[] children;

		[Token(Token = "0x40009D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string fps;

		[Token(Token = "0x40009D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int previousFrame;

		[Token(Token = "0x600091D")]
		[Address(RVA = "0xCDE6FC", Offset = "0xCDE6FC", VA = "0xCDE6FC")]
		private void Start()
		{
		}

		[Token(Token = "0x600091E")]
		[Address(RVA = "0xCDE748", Offset = "0xCDE748", VA = "0xCDE748")]
		private void UpdateFPS()
		{
		}

		[Token(Token = "0x600091F")]
		[Address(RVA = "0xCDE7C8", Offset = "0xCDE7C8", VA = "0xCDE7C8")]
		[IteratorStateMachine(typeof(<SpawnCrowd>d__9))]
		private IEnumerator SpawnCrowd()
		{
			return null;
		}

		[Token(Token = "0x6000920")]
		[Address(RVA = "0xCDE858", Offset = "0xCDE858", VA = "0xCDE858")]
		public CrowdSpawner()
		{
		}
	}
	[Token(Token = "0x2000201")]
	public class ExitCharacter : MonoBehaviour
	{
		[Token(Token = "0x40009D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SCENE_CHARACTER character;

		[Token(Token = "0x40009D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float delay;

		[Token(Token = "0x6000927")]
		[Address(RVA = "0xCDED60", Offset = "0xCDED60", VA = "0xCDED60")]
		private void Start()
		{
		}

		[Token(Token = "0x6000928")]
		[Address(RVA = "0xCDEDB0", Offset = "0xCDEDB0", VA = "0xCDEDB0")]
		private void DoExit()
		{
		}

		[Token(Token = "0x6000929")]
		[Address(RVA = "0xCDEE18", Offset = "0xCDEE18", VA = "0xCDEE18")]
		public ExitCharacter()
		{
		}
	}
	[Token(Token = "0x2000202")]
	public class GenericCharacter : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000203")]
		public struct Waypoint
		{
			[Token(Token = "0x40009F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Transform point;

			[Token(Token = "0x40009F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public bool faceDirection;
		}

		[Token(Token = "0x40009DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Waypoint> waypoint;

		[Token(Token = "0x40009DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float speed;

		[Token(Token = "0x40009DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int currentWaypoint;

		[Token(Token = "0x40009DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool loop;

		[Token(Token = "0x40009DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float distance;

		[Token(Token = "0x40009DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float turn;

		[Token(Token = "0x40009E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float forward;

		[Token(Token = "0x40009E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float m_TurnAmount;

		[Token(Token = "0x40009E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private float m_MovingTurnSpeed;

		[Token(Token = "0x40009E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private float m_StationaryTurnSpeed;

		[Token(Token = "0x40009E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		public float m_ForwardSpeed;

		[Token(Token = "0x40009E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Animator anim;

		[Token(Token = "0x40009E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public CharacterController character;

		[Token(Token = "0x40009E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Vector3 position;

		[Token(Token = "0x40009E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Vector3 hiddenVector;

		[Token(Token = "0x40009E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float enterDuration;

		[Token(Token = "0x40009EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float exitDelay;

		[Token(Token = "0x40009EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool freezeAtTarget;

		[Token(Token = "0x40009EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		public bool exitAtTarget;

		[Token(Token = "0x40009ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public SCENE_CHARACTER characterID;

		[Token(Token = "0x40009EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 platformOffset;

		[Token(Token = "0x40009EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected AnimatorOverrideController animatorOverrideController;

		[Token(Token = "0x40009F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool arrived;

		[Token(Token = "0x40009F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private int p_Forward;

		[Token(Token = "0x40009F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private int p_Turn;

		[Token(Token = "0x600092A")]
		[Address(RVA = "0xCDEE20", Offset = "0xCDEE20", VA = "0xCDEE20", Slot = "4")]
		public virtual void Awake()
		{
		}

		[Token(Token = "0x600092B")]
		[Address(RVA = "0xCDEF28", Offset = "0xCDEF28", VA = "0xCDEF28")]
		public void StartRecording(AnimationClip clip)
		{
		}

		[Token(Token = "0x600092C")]
		[Address(RVA = "0xCDEF2C", Offset = "0xCDEF2C", VA = "0xCDEF2C")]
		public void StopRecording()
		{
		}

		[Token(Token = "0x600092D")]
		[Address(RVA = "0xCDEF30", Offset = "0xCDEF30", VA = "0xCDEF30")]
		private void OnAnimatorMove()
		{
		}

		[Token(Token = "0x600092E")]
		[Address(RVA = "0xCDEF98", Offset = "0xCDEF98", VA = "0xCDEF98")]
		public void SetAnimationBool(string name, bool value)
		{
		}

		[Token(Token = "0x600092F")]
		[Address(RVA = "0xCDEFFC", Offset = "0xCDEFFC", VA = "0xCDEFFC")]
		public void SetIdleAnimation(AnimationClip clip, float time)
		{
		}

		[Token(Token = "0x6000930")]
		[Address(RVA = "0xCDF120", Offset = "0xCDF120", VA = "0xCDF120")]
		public void SetAnimationTrigger(string name)
		{
		}

		[Token(Token = "0x6000931")]
		[Address(RVA = "0xCDF17C", Offset = "0xCDF17C", VA = "0xCDF17C")]
		public void SetCharacterLayer()
		{
		}

		[Token(Token = "0x6000932")]
		[Address(RVA = "0xCDF1A8", Offset = "0xCDF1A8", VA = "0xCDF1A8")]
		public void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000933")]
		[Address(RVA = "0xCDF264", Offset = "0xCDF264", VA = "0xCDF264")]
		public bool IsStillMoving()
		{
			return default(bool);
		}

		[Token(Token = "0x6000934")]
		[Address(RVA = "0xCDE514", Offset = "0xCDE514", VA = "0xCDE514")]
		public void SetCharacterEnter(Transform transform, bool applyOffset = false, bool applyToCharacter = true)
		{
		}

		[Token(Token = "0x6000935")]
		[Address(RVA = "0xCDF31C", Offset = "0xCDF31C", VA = "0xCDF31C", Slot = "5")]
		public virtual void CharacterEnter(bool delay = true)
		{
		}

		[Token(Token = "0x6000936")]
		[Address(RVA = "0xCDE3F4", Offset = "0xCDE3F4", VA = "0xCDE3F4")]
		public void StopAndDisableCharacterController()
		{
		}

		[Token(Token = "0x6000937")]
		[Address(RVA = "0xCDF480", Offset = "0xCDF480", VA = "0xCDF480", Slot = "6")]
		public virtual void CharacterExit()
		{
		}

		[Token(Token = "0x6000938")]
		[Address(RVA = "0xCDF57C", Offset = "0xCDF57C", VA = "0xCDF57C", Slot = "7")]
		public virtual void Start()
		{
		}

		[Token(Token = "0x6000939")]
		[Address(RVA = "0xCDF63C", Offset = "0xCDF63C", VA = "0xCDF63C")]
		public void SetTarget(Transform t, bool spawn, bool faceDirection = false)
		{
		}

		[Token(Token = "0x600093A")]
		[Address(RVA = "0xCDF84C", Offset = "0xCDF84C", VA = "0xCDF84C")]
		public void SetPrefab(GameObject newPrefab)
		{
		}

		[Token(Token = "0x600093B")]
		[Address(RVA = "0xCDFA20", Offset = "0xCDFA20", VA = "0xCDFA20")]
		private void Update()
		{
		}

		[Token(Token = "0x600093C")]
		[Address(RVA = "0xCE03B4", Offset = "0xCE03B4", VA = "0xCE03B4")]
		public GenericCharacter()
		{
		}
	}
	[Token(Token = "0x2000204")]
	public class GetCharacterObject : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000205")]
		public class CharacterObjectEvent : UnityEvent<GameObject>
		{
			[Token(Token = "0x600093F")]
			[Address(RVA = "0xCE04EC", Offset = "0xCE04EC", VA = "0xCE04EC")]
			public CharacterObjectEvent()
			{
			}
		}

		[Token(Token = "0x2000206")]
		[CompilerGenerated]
		private sealed class <Start>d__3 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40009F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40009F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40009F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GetCharacterObject <>4__this;

			[Token(Token = "0x40009FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private SceneManager <sceneMan>5__2;

			[Token(Token = "0x17000101")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000943")]
				[Address(RVA = "0xCE0654", Offset = "0xCE0654", VA = "0xCE0654", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000102")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000945")]
				[Address(RVA = "0xCE069C", Offset = "0xCE069C", VA = "0xCE069C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000940")]
			[Address(RVA = "0xCE0460", Offset = "0xCE0460", VA = "0xCE0460")]
			[DebuggerHidden]
			public <Start>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x6000941")]
			[Address(RVA = "0xCE0534", Offset = "0xCE0534", VA = "0xCE0534", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000942")]
			[Address(RVA = "0xCE0538", Offset = "0xCE0538", VA = "0xCE0538", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000944")]
			[Address(RVA = "0xCE065C", Offset = "0xCE065C", VA = "0xCE065C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40009F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SCENE_CHARACTER characterID;

		[Token(Token = "0x40009F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CharacterObjectEvent GotCharacter;

		[Token(Token = "0x600093D")]
		[Address(RVA = "0xCE03F8", Offset = "0xCE03F8", VA = "0xCE03F8")]
		[IteratorStateMachine(typeof(<Start>d__3))]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x600093E")]
		[Address(RVA = "0xCE0488", Offset = "0xCE0488", VA = "0xCE0488")]
		public GetCharacterObject()
		{
		}
	}
	[Token(Token = "0x2000207")]
	public class GrabByCharacter : MonoBehaviour
	{
		[Token(Token = "0x2000208")]
		[CompilerGenerated]
		private sealed class <CharacterGrab>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GrabByCharacter <>4__this;

			[Token(Token = "0x4000A11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private ObjectInteractionListener <events>5__2;

			[Token(Token = "0x4000A12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <animStartTime>5__3;

			[Token(Token = "0x17000103")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000950")]
				[Address(RVA = "0xCE0DF4", Offset = "0xCE0DF4", VA = "0xCE0DF4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000104")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000952")]
				[Address(RVA = "0xCE0E3C", Offset = "0xCE0E3C", VA = "0xCE0E3C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600094D")]
			[Address(RVA = "0xCE07B8", Offset = "0xCE07B8", VA = "0xCE07B8")]
			[DebuggerHidden]
			public <CharacterGrab>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x600094E")]
			[Address(RVA = "0xCE0940", Offset = "0xCE0940", VA = "0xCE0940", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600094F")]
			[Address(RVA = "0xCE0944", Offset = "0xCE0944", VA = "0xCE0944", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000951")]
			[Address(RVA = "0xCE0DFC", Offset = "0xCE0DFC", VA = "0xCE0DFC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40009FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SCENE_CHARACTER characterID;

		[Token(Token = "0x40009FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public AvatarIKGoal hand;

		[Token(Token = "0x40009FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x40009FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string animationTrigger;

		[Token(Token = "0x40009FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float maxAnimationTime;

		[Token(Token = "0x4000A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GenericCharacter character;

		[Token(Token = "0x4000A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject grabItem;

		[Token(Token = "0x4000A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 grabOffset;

		[Token(Token = "0x4000A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEvent Grab;

		[Token(Token = "0x4000A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public UnityEvent Drop;

		[Token(Token = "0x4000A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private SceneManager sceneMan;

		[Token(Token = "0x4000A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private ObjectInteractionListener listener;

		[Token(Token = "0x4000A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Transform originalParent;

		[Token(Token = "0x4000A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 itemStartPos;

		[Token(Token = "0x4000A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private bool grabbing;

		[Token(Token = "0x4000A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8D")]
		private bool grabbed;

		[Token(Token = "0x4000A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8E")]
		private bool dropped;

		[Token(Token = "0x4000A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Transform grabParent;

		[Token(Token = "0x4000A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int grabProperty;

		[Token(Token = "0x6000946")]
		[Address(RVA = "0xCE06A4", Offset = "0xCE06A4", VA = "0xCE06A4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000947")]
		[Address(RVA = "0xCE072C", Offset = "0xCE072C", VA = "0xCE072C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000948")]
		[Address(RVA = "0xCE06C4", Offset = "0xCE06C4", VA = "0xCE06C4")]
		[IteratorStateMachine(typeof(<CharacterGrab>d__21))]
		private IEnumerator CharacterGrab()
		{
			return null;
		}

		[Token(Token = "0x6000949")]
		[Address(RVA = "0xCE07E0", Offset = "0xCE07E0", VA = "0xCE07E0")]
		private void SetIK(int layerIndex)
		{
		}

		[Token(Token = "0x600094A")]
		[Address(RVA = "0xCE0878", Offset = "0xCE0878", VA = "0xCE0878")]
		private void OnGrab()
		{
		}

		[Token(Token = "0x600094B")]
		[Address(RVA = "0xCE08F0", Offset = "0xCE08F0", VA = "0xCE08F0")]
		private void OnDrop(float velocityMultiplier)
		{
		}

		[Token(Token = "0x600094C")]
		[Address(RVA = "0xCE0930", Offset = "0xCE0930", VA = "0xCE0930")]
		public GrabByCharacter()
		{
		}
	}
	[Token(Token = "0x2000209")]
	public class HideShowCharacter : MonoBehaviour
	{
		[Token(Token = "0x4000A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SCENE_CHARACTER characterID;

		[Token(Token = "0x4000A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool hide;

		[Token(Token = "0x4000A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool show;

		[Token(Token = "0x4000A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x4000A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GenericCharacter character;

		[Token(Token = "0x4000A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SceneManager sceneMan;

		[Token(Token = "0x6000953")]
		[Address(RVA = "0xCE0E44", Offset = "0xCE0E44", VA = "0xCE0E44")]
		private void Start()
		{
		}

		[Token(Token = "0x6000954")]
		[Address(RVA = "0xCE0F5C", Offset = "0xCE0F5C", VA = "0xCE0F5C")]
		private SkinnedMeshRenderer[] Renderers()
		{
			return null;
		}

		[Token(Token = "0x6000955")]
		[Address(RVA = "0xCE0FBC", Offset = "0xCE0FBC", VA = "0xCE0FBC")]
		private void Hide()
		{
		}

		[Token(Token = "0x6000956")]
		[Address(RVA = "0xCE1024", Offset = "0xCE1024", VA = "0xCE1024")]
		private void Show()
		{
		}

		[Token(Token = "0x6000957")]
		[Address(RVA = "0xCE108C", Offset = "0xCE108C", VA = "0xCE108C")]
		public HideShowCharacter()
		{
		}
	}
	[Token(Token = "0x200020A")]
	public class HiroshimaHouseYonezo : GenericCharacter
	{
		[Token(Token = "0x6000958")]
		[Address(RVA = "0xCE1094", Offset = "0xCE1094", VA = "0xCE1094")]
		public void YonezoEnter()
		{
		}

		[Token(Token = "0x6000959")]
		[Address(RVA = "0xCE1128", Offset = "0xCE1128", VA = "0xCE1128")]
		public void YonezoHide()
		{
		}

		[Token(Token = "0x600095A")]
		[Address(RVA = "0xCE114C", Offset = "0xCE114C", VA = "0xCE114C")]
		private new void Start()
		{
		}

		[Token(Token = "0x600095B")]
		[Address(RVA = "0xCE1150", Offset = "0xCE1150", VA = "0xCE1150")]
		private void Update()
		{
		}

		[Token(Token = "0x600095C")]
		[Address(RVA = "0xCE1154", Offset = "0xCE1154", VA = "0xCE1154")]
		public HiroshimaHouseYonezo()
		{
		}
	}
	[Token(Token = "0x200020B")]
	public class IKCharacter : MonoBehaviour
	{
		[Token(Token = "0x4000A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SCENE_CHARACTER characterID;

		[Token(Token = "0x4000A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public AvatarIKGoal ikGoal;

		[Token(Token = "0x4000A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string IKPropertyName;

		[Token(Token = "0x4000A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float delay;

		[Token(Token = "0x4000A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform target;

		[Token(Token = "0x4000A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform hint;

		[Token(Token = "0x4000A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool position;

		[Token(Token = "0x4000A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public bool rotation;

		[Token(Token = "0x4000A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AnimationCurve customCurve;

		[Token(Token = "0x4000A22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float duration;

		[Token(Token = "0x4000A23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GenericCharacter character;

		[Token(Token = "0x4000A24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private SceneManager sceneMan;

		[Token(Token = "0x4000A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int ikProperty;

		[Token(Token = "0x4000A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private ObjectInteractionListener events;

		[Token(Token = "0x4000A27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float startTime;

		[Token(Token = "0x600095D")]
		[Address(RVA = "0xCE1198", Offset = "0xCE1198", VA = "0xCE1198")]
		private void Start()
		{
		}

		[Token(Token = "0x600095E")]
		[Address(RVA = "0xCE1268", Offset = "0xCE1268", VA = "0xCE1268")]
		private void DoIK()
		{
		}

		[Token(Token = "0x600095F")]
		[Address(RVA = "0xCE13B8", Offset = "0xCE13B8", VA = "0xCE13B8")]
		public void ReleaseIK()
		{
		}

		[Token(Token = "0x6000960")]
		[Address(RVA = "0xCE13DC", Offset = "0xCE13DC", VA = "0xCE13DC")]
		private void AnimateIK(int layerIndex)
		{
		}

		[Token(Token = "0x6000961")]
		[Address(RVA = "0xCE160C", Offset = "0xCE160C", VA = "0xCE160C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000962")]
		[Address(RVA = "0xCE16CC", Offset = "0xCE16CC", VA = "0xCE16CC")]
		public IKCharacter()
		{
		}
	}
	[Token(Token = "0x200020C")]
	public class IKListener : ObjectInteractionListener
	{
		[Token(Token = "0x6000963")]
		[Address(RVA = "0xCE16D4", Offset = "0xCE16D4", VA = "0xCE16D4", Slot = "4")]
		protected override void AttachToCharacter()
		{
		}

		[Token(Token = "0x6000964")]
		[Address(RVA = "0xCE17A8", Offset = "0xCE17A8", VA = "0xCE17A8")]
		public IKListener()
		{
		}
	}
	[Token(Token = "0x200020D")]
	public class LeftHandInteractionListener : ObjectInteractionListener
	{
		[Token(Token = "0x6000965")]
		[Address(RVA = "0xCE1864", Offset = "0xCE1864", VA = "0xCE1864")]
		public void LeftGrabObject()
		{
		}

		[Token(Token = "0x6000966")]
		[Address(RVA = "0xCE188C", Offset = "0xCE188C", VA = "0xCE188C")]
		public void LeftUseObject()
		{
		}

		[Token(Token = "0x6000967")]
		[Address(RVA = "0xCE18B4", Offset = "0xCE18B4", VA = "0xCE18B4")]
		public void LeftDropObject(float velocityMultiplier = 1f)
		{
		}

		[Token(Token = "0x6000968")]
		[Address(RVA = "0xCE19CC", Offset = "0xCE19CC", VA = "0xCE19CC", Slot = "4")]
		protected override void AttachToCharacter()
		{
		}

		[Token(Token = "0x6000969")]
		[Address(RVA = "0xCE1AA0", Offset = "0xCE1AA0", VA = "0xCE1AA0")]
		public LeftHandInteractionListener()
		{
		}
	}
	[Token(Token = "0x200020E")]
	public class MoveCharacter : MonoBehaviour
	{
		[Token(Token = "0x4000A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SCENE_CHARACTER characterID;

		[Token(Token = "0x4000A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float delay;

		[Token(Token = "0x4000A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool spawn;

		[Token(Token = "0x4000A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool onlySpawnIfNotSpawned;

		[Token(Token = "0x4000A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public bool spawnWhenIdle;

		[Token(Token = "0x4000A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
		public bool freezeAtTarget;

		[Token(Token = "0x4000A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool exitAtTarget;

		[Token(Token = "0x4000A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool faceDirectionAtTarget;

		[Token(Token = "0x4000A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string beginLoop;

		[Token(Token = "0x4000A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GenericCharacter character;

		[Token(Token = "0x4000A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SceneManager sceneMan;

		[Token(Token = "0x4000A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Animator animator;

		[Token(Token = "0x600096A")]
		[Address(RVA = "0xCE1AA4", Offset = "0xCE1AA4", VA = "0xCE1AA4")]
		private void Start()
		{
		}

		[Token(Token = "0x600096B")]
		[Address(RVA = "0xCE1C00", Offset = "0xCE1C00", VA = "0xCE1C00")]
		private void Move()
		{
		}

		[Token(Token = "0x600096C")]
		[Address(RVA = "0xCE2028", Offset = "0xCE2028", VA = "0xCE2028")]
		public void CheckAnimatorSpawn()
		{
		}

		[Token(Token = "0x600096D")]
		[Address(RVA = "0xCE2144", Offset = "0xCE2144", VA = "0xCE2144")]
		private void Update()
		{
		}

		[Token(Token = "0x600096E")]
		[Address(RVA = "0xCE2148", Offset = "0xCE2148", VA = "0xCE2148")]
		public MoveCharacter()
		{
		}
	}
	[Token(Token = "0x200020F")]
	public class MoveCharacterEnterPlatform : DelayedAction
	{
		[Token(Token = "0x4000A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SCENE_CHARACTER characterID;

		[Token(Token = "0x4000A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool applyOffset;

		[Token(Token = "0x4000A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool zeroCharacter;

		[Token(Token = "0x600096F")]
		[Address(RVA = "0xCE2150", Offset = "0xCE2150", VA = "0xCE2150", Slot = "4")]
		protected override void Action()
		{
		}

		[Token(Token = "0x6000970")]
		[Address(RVA = "0xCE21D0", Offset = "0xCE21D0", VA = "0xCE21D0")]
		public MoveCharacterEnterPlatform()
		{
		}
	}
	[Token(Token = "0x2000210")]
	public class FloatEvent : UnityEvent<float>
	{
		[Token(Token = "0x6000971")]
		[Address(RVA = "0xCE21E0", Offset = "0xCE21E0", VA = "0xCE21E0")]
		public FloatEvent()
		{
		}
	}
	[Token(Token = "0x2000211")]
	public abstract class ObjectInteractionListener : MonoBehaviour
	{
		[Token(Token = "0x4000A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SCENE_CHARACTER character;

		[Token(Token = "0x4000A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEvent Grab;

		[Token(Token = "0x4000A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEvent<float> Drop;

		[Token(Token = "0x4000A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEvent Use;

		[Token(Token = "0x4000A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Action<int> onAnimatorIK;

		[Token(Token = "0x4000A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected ObjectInteractionListener onCharacter;

		[Token(Token = "0x6000972")]
		[Address(RVA = "0xCE2228", Offset = "0xCE2228", VA = "0xCE2228")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6000973")]
		[Address(RVA = "0xCE2420", Offset = "0xCE2420", VA = "0xCE2420")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000974")]
		[Address(RVA = "0xCE1878", Offset = "0xCE1878", VA = "0xCE1878")]
		protected void GrabObject()
		{
		}

		[Token(Token = "0x6000975")]
		[Address(RVA = "0xCE18A0", Offset = "0xCE18A0", VA = "0xCE18A0")]
		protected void UseObject()
		{
		}

		[Token(Token = "0x6000976")]
		[Address(RVA = "0xCE18B8", Offset = "0xCE18B8", VA = "0xCE18B8")]
		protected void DropObject(float velocityMultiplier)
		{
		}

		[Token(Token = "0x6000977")]
		[Address(RVA = "0xCE25D8", Offset = "0xCE25D8", VA = "0xCE25D8")]
		private void OnAnimatorIK(int layerIndex)
		{
		}

		[Token(Token = "0x6000978")]
		protected abstract void AttachToCharacter();

		[Token(Token = "0x6000979")]
		[Address(RVA = "0xCE17AC", Offset = "0xCE17AC", VA = "0xCE17AC")]
		protected ObjectInteractionListener()
		{
		}
	}
	[Token(Token = "0x2000212")]
	[ExecuteInEditMode]
	public class ParentToCharacter : MonoBehaviour
	{
		[Token(Token = "0x4000A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SCENE_CHARACTER characterID;

		[Token(Token = "0x4000A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public HumanBodyBones parentTransform;

		[Token(Token = "0x4000A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 localPosition;

		[Token(Token = "0x4000A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 localRotation;

		[Token(Token = "0x4000A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform target;

		[Token(Token = "0x4000A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float moveDuration;

		[Token(Token = "0x4000A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Ease ease;

		[Token(Token = "0x600097A")]
		[Address(RVA = "0xCE25F4", Offset = "0xCE25F4", VA = "0xCE25F4")]
		private void Start()
		{
		}

		[Token(Token = "0x600097B")]
		[Address(RVA = "0xCE288C", Offset = "0xCE288C", VA = "0xCE288C")]
		public void DestroyMe()
		{
		}

		[Token(Token = "0x600097C")]
		[Address(RVA = "0xCE28F8", Offset = "0xCE28F8", VA = "0xCE28F8")]
		public ParentToCharacter()
		{
		}
	}
	[Token(Token = "0x2000213")]
	public class PauseCharacter : MonoBehaviour
	{
		[Token(Token = "0x4000A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SCENE_CHARACTER characterID;

		[Token(Token = "0x4000A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float delay;

		[Token(Token = "0x4000A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GenericCharacter character;

		[Token(Token = "0x4000A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private SceneManager sceneMan;

		[Token(Token = "0x4000A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool play;

		[Token(Token = "0x600097D")]
		[Address(RVA = "0xCE2908", Offset = "0xCE2908", VA = "0xCE2908")]
		private void Start()
		{
		}

		[Token(Token = "0x600097E")]
		[Address(RVA = "0xCE29D8", Offset = "0xCE29D8", VA = "0xCE29D8")]
		private void PauseAnimation()
		{
		}

		[Token(Token = "0x600097F")]
		[Address(RVA = "0xCE2A74", Offset = "0xCE2A74", VA = "0xCE2A74")]
		private void Update()
		{
		}

		[Token(Token = "0x6000980")]
		[Address(RVA = "0xCE2A78", Offset = "0xCE2A78", VA = "0xCE2A78")]
		public PauseCharacter()
		{
		}
	}
	[Token(Token = "0x2000214")]
	[ExecuteInEditMode]
	public class PreviewHelper : MonoBehaviour
	{
		[Token(Token = "0x4000A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool preview;

		[Token(Token = "0x4000A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationClip anim;

		[Token(Token = "0x4000A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float time;

		[Token(Token = "0x4000A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float lastTime;

		[Token(Token = "0x4000A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SCENE_CHARACTER characterID;

		[Token(Token = "0x4000A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject model;

		[Token(Token = "0x4000A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public SCENE_CHARACTER modelID;

		[Token(Token = "0x4000A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string modelPath;

		[Token(Token = "0x4000A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform instance;

		[Token(Token = "0x4000A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool createMoveCharacter;

		[Token(Token = "0x6000981")]
		[Address(RVA = "0xCE2A80", Offset = "0xCE2A80", VA = "0xCE2A80")]
		private void Start()
		{
		}

		[Token(Token = "0x6000982")]
		[Address(RVA = "0xCE2AF4", Offset = "0xCE2AF4", VA = "0xCE2AF4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000983")]
		[Address(RVA = "0xCE2B84", Offset = "0xCE2B84", VA = "0xCE2B84")]
		public PreviewHelper()
		{
		}
	}
	[Token(Token = "0x2000215")]
	public class RecordCharacterAnimation : MonoBehaviour
	{
		[Token(Token = "0x4000A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SCENE_CHARACTER characterID;

		[Token(Token = "0x4000A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool start;

		[Token(Token = "0x4000A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GenericCharacter character;

		[Token(Token = "0x4000A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private SceneManager sceneMan;

		[Token(Token = "0x4000A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationClip clip;

		[Token(Token = "0x4000A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool record;

		[Token(Token = "0x6000984")]
		[Address(RVA = "0xCE2B8C", Offset = "0xCE2B8C", VA = "0xCE2B8C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000985")]
		[Address(RVA = "0xCE2C48", Offset = "0xCE2C48", VA = "0xCE2C48")]
		private void Update()
		{
		}

		[Token(Token = "0x6000986")]
		[Address(RVA = "0xCE2C4C", Offset = "0xCE2C4C", VA = "0xCE2C4C")]
		public RecordCharacterAnimation()
		{
		}
	}
	[Token(Token = "0x2000216")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(GenericCharacter))]
	public class ReplaceModel : MonoBehaviour
	{
		[Token(Token = "0x4000A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject newModel;

		[Token(Token = "0x4000A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool replace;

		[Token(Token = "0x6000987")]
		[Address(RVA = "0xCE2C54", Offset = "0xCE2C54", VA = "0xCE2C54")]
		private void Start()
		{
		}

		[Token(Token = "0x6000988")]
		[Address(RVA = "0xCE2C84", Offset = "0xCE2C84", VA = "0xCE2C84")]
		private void Update()
		{
		}

		[Token(Token = "0x6000989")]
		[Address(RVA = "0xCE2CAC", Offset = "0xCE2CAC", VA = "0xCE2CAC")]
		private void Replace()
		{
		}

		[Token(Token = "0x600098A")]
		[Address(RVA = "0xCE2CB4", Offset = "0xCE2CB4", VA = "0xCE2CB4")]
		public ReplaceModel()
		{
		}
	}
	[Token(Token = "0x2000217")]
	public class RightHandInteractionListener : ObjectInteractionListener
	{
		[Token(Token = "0x600098B")]
		[Address(RVA = "0xCE2CBC", Offset = "0xCE2CBC", VA = "0xCE2CBC")]
		public void RightGrabObject()
		{
		}

		[Token(Token = "0x600098C")]
		[Address(RVA = "0xCE2D60", Offset = "0xCE2D60", VA = "0xCE2D60")]
		public void RightUseObject()
		{
		}

		[Token(Token = "0x600098D")]
		[Address(RVA = "0xCE2D74", Offset = "0xCE2D74", VA = "0xCE2D74")]
		public void RightDropObject(float velocityMultiplier = 1f)
		{
		}

		[Token(Token = "0x600098E")]
		[Address(RVA = "0xCE2D78", Offset = "0xCE2D78", VA = "0xCE2D78")]
		public void PickupHorseshoe()
		{
		}

		[Token(Token = "0x600098F")]
		[Address(RVA = "0xCE2E14", Offset = "0xCE2E14", VA = "0xCE2E14", Slot = "4")]
		protected override void AttachToCharacter()
		{
		}

		[Token(Token = "0x6000990")]
		[Address(RVA = "0xCE2EE8", Offset = "0xCE2EE8", VA = "0xCE2EE8")]
		public RightHandInteractionListener()
		{
		}
	}
	[Token(Token = "0x2000218")]
	public class Yonezo : GenericCharacter
	{
		[Token(Token = "0x4000A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public GameObject yonezo_farm;

		[Token(Token = "0x4000A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public GameObject yonezo_young;

		[Token(Token = "0x4000A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public GameObject yonezo_younger;

		[Token(Token = "0x6000991")]
		[Address(RVA = "0xCE2EEC", Offset = "0xCE2EEC", VA = "0xCE2EEC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000992")]
		[Address(RVA = "0xCE2F6C", Offset = "0xCE2F6C", VA = "0xCE2F6C")]
		public void OnStateChange()
		{
		}

		[Token(Token = "0x6000993")]
		[Address(RVA = "0xCE308C", Offset = "0xCE308C", VA = "0xCE308C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000994")]
		[Address(RVA = "0xCE310C", Offset = "0xCE310C", VA = "0xCE310C")]
		public Yonezo()
		{
		}
	}
	[Token(Token = "0x2000219")]
	public class CheckCoyoteInView : MonoBehaviour
	{
		[Token(Token = "0x4000A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEvent GotPerspective;

		[Token(Token = "0x4000A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float invokeWithoutLookingIn;

		[Token(Token = "0x4000A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public LayerMask collisionMask;

		[Token(Token = "0x4000A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Renderer[] obj;

		[Token(Token = "0x4000A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float maxAngle;

		[Token(Token = "0x4000A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float lookDuration;

		[Token(Token = "0x4000A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform cam;

		[Token(Token = "0x4000A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool inView;

		[Token(Token = "0x4000A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float angle;

		[Token(Token = "0x4000A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float lookingTime;

		[Token(Token = "0x4000A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float lastLookingTime;

		[Token(Token = "0x4000A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool looking;

		[Token(Token = "0x4000A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float lookingStartTime;

		[Token(Token = "0x4000A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool invoked;

		[Token(Token = "0x4000A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private bool insideCollider;

		[Token(Token = "0x4000A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform headCollider;

		[Token(Token = "0x4000A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float radius;

		[Token(Token = "0x6000995")]
		[Address(RVA = "0xCE3150", Offset = "0xCE3150", VA = "0xCE3150")]
		private void Start()
		{
		}

		[Token(Token = "0x6000996")]
		[Address(RVA = "0xCE31C4", Offset = "0xCE31C4", VA = "0xCE31C4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000997")]
		[Address(RVA = "0xCE3214", Offset = "0xCE3214", VA = "0xCE3214")]
		private void ProgressWithoutLooking()
		{
		}

		[Token(Token = "0x6000998")]
		[Address(RVA = "0xCE324C", Offset = "0xCE324C", VA = "0xCE324C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000999")]
		[Address(RVA = "0xCE3250", Offset = "0xCE3250", VA = "0xCE3250")]
		private void CheckObject()
		{
		}

		[Token(Token = "0x600099A")]
		[Address(RVA = "0xCE3718", Offset = "0xCE3718", VA = "0xCE3718")]
		public CheckCoyoteInView()
		{
		}
	}
	[Token(Token = "0x200021A")]
	public class ChickenCoop : MonoBehaviour
	{
		[Token(Token = "0x4000A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vector3 position;

		[Token(Token = "0x600099B")]
		[Address(RVA = "0xCE3720", Offset = "0xCE3720", VA = "0xCE3720")]
		private void Awake()
		{
		}

		[Token(Token = "0x600099C")]
		[Address(RVA = "0xCE3788", Offset = "0xCE3788", VA = "0xCE3788")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600099D")]
		[Address(RVA = "0xCE378C", Offset = "0xCE378C", VA = "0xCE378C")]
		public void CoopEnter()
		{
		}

		[Token(Token = "0x600099E")]
		[Address(RVA = "0xCE37F8", Offset = "0xCE37F8", VA = "0xCE37F8")]
		public ChickenCoop()
		{
		}
	}
	[Token(Token = "0x200021B")]
	public class CrateAnimation : MonoBehaviour
	{
		[Token(Token = "0x4000A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Animation animation;

		[Token(Token = "0x4000A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool checkPlaying;

		[Token(Token = "0x4000A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationClip clip;

		[Token(Token = "0x600099F")]
		[Address(RVA = "0xCE3800", Offset = "0xCE3800", VA = "0xCE3800")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60009A0")]
		[Address(RVA = "0xCE3870", Offset = "0xCE3870", VA = "0xCE3870")]
		private void CheckPlaying()
		{
		}

		[Token(Token = "0x60009A1")]
		[Address(RVA = "0xCE3918", Offset = "0xCE3918", VA = "0xCE3918")]
		private void Update()
		{
		}

		[Token(Token = "0x60009A2")]
		[Address(RVA = "0xCE391C", Offset = "0xCE391C", VA = "0xCE391C")]
		public CrateAnimation()
		{
		}
	}
	[Token(Token = "0x200021C")]
	public class DelayedAdvance : MonoBehaviour
	{
		[Token(Token = "0x4000A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float advanceDelay;

		[Token(Token = "0x4000A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlayableDirector playableDirector;

		[Token(Token = "0x4000A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float secondsBeforeTheEndOfTime;

		[Token(Token = "0x60009A3")]
		[Address(RVA = "0xCE3924", Offset = "0xCE3924", VA = "0xCE3924")]
		private void Start()
		{
		}

		[Token(Token = "0x60009A4")]
		[Address(RVA = "0xCE3928", Offset = "0xCE3928", VA = "0xCE3928")]
		private void Update()
		{
		}

		[Token(Token = "0x60009A5")]
		[Address(RVA = "0xCE392C", Offset = "0xCE392C", VA = "0xCE392C")]
		public void Advance()
		{
		}

		[Token(Token = "0x60009A6")]
		[Address(RVA = "0xCE397C", Offset = "0xCE397C", VA = "0xCE397C")]
		public void AdvanceAfterDelay()
		{
		}

		[Token(Token = "0x60009A7")]
		[Address(RVA = "0xCE3BA8", Offset = "0xCE3BA8", VA = "0xCE3BA8")]
		public DelayedAdvance()
		{
		}
	}
	[Token(Token = "0x200021D")]
	public class DisableObject : MonoBehaviour
	{
		[Token(Token = "0x4000A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject objectToDisable;

		[Token(Token = "0x60009A8")]
		[Address(RVA = "0xCE3BB0", Offset = "0xCE3BB0", VA = "0xCE3BB0")]
		private void Start()
		{
		}

		[Token(Token = "0x60009A9")]
		[Address(RVA = "0xCE3BB4", Offset = "0xCE3BB4", VA = "0xCE3BB4")]
		private void Update()
		{
		}

		[Token(Token = "0x60009AA")]
		[Address(RVA = "0xCE3BB8", Offset = "0xCE3BB8", VA = "0xCE3BB8")]
		public void SetDisabled()
		{
		}

		[Token(Token = "0x60009AB")]
		[Address(RVA = "0xCE3BD8", Offset = "0xCE3BD8", VA = "0xCE3BD8")]
		public DisableObject()
		{
		}
	}
	[Token(Token = "0x200021E")]
	public class DrawPaper : MonoBehaviour
	{
		[Token(Token = "0x200021F")]
		[CompilerGenerated]
		private sealed class <FlyLetterCoroutine>d__33 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DrawPaper <>4__this;

			[Token(Token = "0x4000A90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <startTime>5__2;

			[Token(Token = "0x4000A91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Rigidbody <rb>5__3;

			[Token(Token = "0x17000105")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60009C5")]
				[Address(RVA = "0xCE4E88", Offset = "0xCE4E88", VA = "0xCE4E88", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000106")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60009C7")]
				[Address(RVA = "0xCE4ED0", Offset = "0xCE4ED0", VA = "0xCE4ED0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60009C2")]
			[Address(RVA = "0xCE4648", Offset = "0xCE4648", VA = "0xCE4648")]
			[DebuggerHidden]
			public <FlyLetterCoroutine>d__33(int <>1__state)
			{
			}

			[Token(Token = "0x60009C3")]
			[Address(RVA = "0xCE4CE4", Offset = "0xCE4CE4", VA = "0xCE4CE4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60009C4")]
			[Address(RVA = "0xCE4CE8", Offset = "0xCE4CE8", VA = "0xCE4CE8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60009C6")]
			[Address(RVA = "0xCE4E90", Offset = "0xCE4E90", VA = "0xCE4E90", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000220")]
		[CompilerGenerated]
		private sealed class <DrawPaperAudioCoroutine>d__36 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DrawPaper <>4__this;

			[Token(Token = "0x17000107")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60009CB")]
				[Address(RVA = "0xCE4FAC", Offset = "0xCE4FAC", VA = "0xCE4FAC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000108")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60009CD")]
				[Address(RVA = "0xCE4FF4", Offset = "0xCE4FF4", VA = "0xCE4FF4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60009C8")]
			[Address(RVA = "0xCE4BA0", Offset = "0xCE4BA0", VA = "0xCE4BA0")]
			[DebuggerHidden]
			public <DrawPaperAudioCoroutine>d__36(int <>1__state)
			{
			}

			[Token(Token = "0x60009C9")]
			[Address(RVA = "0xCE4ED8", Offset = "0xCE4ED8", VA = "0xCE4ED8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60009CA")]
			[Address(RVA = "0xCE4EDC", Offset = "0xCE4EDC", VA = "0xCE4EDC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60009CC")]
			[Address(RVA = "0xCE4FB4", Offset = "0xCE4FB4", VA = "0xCE4FB4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int paperSoundIdx;

		[Token(Token = "0x4000A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material paintedMaterial;

		[Token(Token = "0x4000A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject paintedLetter;

		[Token(Token = "0x4000A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Material interactiveHint;

		[Token(Token = "0x4000A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Material paintMaterial;

		[Token(Token = "0x4000A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Material writtenMaterial;

		[Token(Token = "0x4000A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AudioSource slideSound;

		[Token(Token = "0x4000A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AudioSource foldSound;

		[Token(Token = "0x4000A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AudioClip drawpaperAudioSound;

		[Token(Token = "0x4000A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AudioClip[] paperAnimationSound;

		[Token(Token = "0x4000A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material defaultMaterial;

		[Token(Token = "0x4000A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool isInteractive;

		[Token(Token = "0x4000A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool isTransitioning;

		[Token(Token = "0x4000A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		public bool isLetter;

		[Token(Token = "0x4000A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public HiroshimaHouseStateController hiroshimaCtrl;

		[Token(Token = "0x4000A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public DropLocationLTP clothesPegAttachPoint;

		[Token(Token = "0x4000A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private LockToPoint ltp;

		[Token(Token = "0x4000A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Throwable itv;

		[Token(Token = "0x4000A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 pickupPosition;

		[Token(Token = "0x4000A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Quaternion pickupRotation;

		[Token(Token = "0x4000A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private InteractiveMaterialHint hint;

		[Token(Token = "0x4000A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool paintLetter;

		[Token(Token = "0x60009AC")]
		[Address(RVA = "0xCE3BE0", Offset = "0xCE3BE0", VA = "0xCE3BE0")]
		private void Awake()
		{
		}

		[Token(Token = "0x60009AD")]
		[Address(RVA = "0xCE3C6C", Offset = "0xCE3C6C", VA = "0xCE3C6C")]
		private void Start()
		{
		}

		[Token(Token = "0x60009AE")]
		[Address(RVA = "0xCE3DB0", Offset = "0xCE3DB0", VA = "0xCE3DB0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60009AF")]
		[Address(RVA = "0xCE3E0C", Offset = "0xCE3E0C", VA = "0xCE3E0C")]
		private void Update()
		{
		}

		[Token(Token = "0x60009B0")]
		[Address(RVA = "0xCE3F14", Offset = "0xCE3F14", VA = "0xCE3F14")]
		public void ChangeToInteractiveMaterial()
		{
		}

		[Token(Token = "0x60009B1")]
		[Address(RVA = "0xCE3FAC", Offset = "0xCE3FAC", VA = "0xCE3FAC")]
		public void MakeInteractive()
		{
		}

		[Token(Token = "0x60009B2")]
		[Address(RVA = "0xCE4024", Offset = "0xCE4024", VA = "0xCE4024")]
		public void MakeNotInteractive()
		{
		}

		[Token(Token = "0x60009B3")]
		[Address(RVA = "0xCE4098", Offset = "0xCE4098", VA = "0xCE4098")]
		public void ChangeToDefaultMaterial()
		{
		}

		[Token(Token = "0x60009B4")]
		[Address(RVA = "0xCE4170", Offset = "0xCE4170", VA = "0xCE4170")]
		public void PickedUp()
		{
		}

		[Token(Token = "0x60009B5")]
		[Address(RVA = "0xCE423C", Offset = "0xCE423C", VA = "0xCE423C")]
		public void EnableLetterInteraction()
		{
		}

		[Token(Token = "0x60009B6")]
		[Address(RVA = "0xCE44E4", Offset = "0xCE44E4", VA = "0xCE44E4")]
		public void FlyLetter()
		{
		}

		[Token(Token = "0x60009B7")]
		[Address(RVA = "0xCE45E0", Offset = "0xCE45E0", VA = "0xCE45E0")]
		[IteratorStateMachine(typeof(<FlyLetterCoroutine>d__33))]
		private IEnumerator FlyLetterCoroutine()
		{
			return null;
		}

		[Token(Token = "0x60009B8")]
		[Address(RVA = "0xCE4670", Offset = "0xCE4670", VA = "0xCE4670")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60009B9")]
		[Address(RVA = "0xCE3EDC", Offset = "0xCE3EDC", VA = "0xCE3EDC")]
		public void DoFoldTransition()
		{
		}

		[Token(Token = "0x60009BA")]
		[Address(RVA = "0xCE4B38", Offset = "0xCE4B38", VA = "0xCE4B38")]
		[IteratorStateMachine(typeof(<DrawPaperAudioCoroutine>d__36))]
		private IEnumerator DrawPaperAudioCoroutine()
		{
			return null;
		}

		[Token(Token = "0x60009BB")]
		[Address(RVA = "0xCE4788", Offset = "0xCE4788", VA = "0xCE4788")]
		private void LetterTransition()
		{
		}

		[Token(Token = "0x60009BC")]
		[Address(RVA = "0xCE4BC8", Offset = "0xCE4BC8", VA = "0xCE4BC8")]
		private void LetterTransitionFinished()
		{
		}

		[Token(Token = "0x60009BD")]
		[Address(RVA = "0xCE4BF4", Offset = "0xCE4BF4", VA = "0xCE4BF4")]
		private void OnTriggerStay(Collider other)
		{
		}

		[Token(Token = "0x60009BE")]
		[Address(RVA = "0xCE4BF8", Offset = "0xCE4BF8", VA = "0xCE4BF8")]
		public void OnAttachedToHand(Hand hand)
		{
		}

		[Token(Token = "0x60009BF")]
		[Address(RVA = "0xCE4BFC", Offset = "0xCE4BFC", VA = "0xCE4BFC")]
		public void OnDetachedFromHand(Hand hand)
		{
		}

		[Token(Token = "0x60009C0")]
		[Address(RVA = "0xCE4CBC", Offset = "0xCE4CBC", VA = "0xCE4CBC")]
		public DrawPaper()
		{
		}
	}
	[Token(Token = "0x2000221")]
	public class FadeOutCoop : MonoBehaviour
	{
		[Token(Token = "0x2000222")]
		[CompilerGenerated]
		private sealed class <FadeOutCoroutine>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FadeOutCoop <>4__this;

			[Token(Token = "0x17000109")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60009D8")]
				[Address(RVA = "0xCE5350", Offset = "0xCE5350", VA = "0xCE5350", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700010A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60009DA")]
				[Address(RVA = "0xCE5398", Offset = "0xCE5398", VA = "0xCE5398", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60009D5")]
			[Address(RVA = "0xCE50F4", Offset = "0xCE50F4", VA = "0xCE50F4")]
			[DebuggerHidden]
			public <FadeOutCoroutine>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x60009D6")]
			[Address(RVA = "0xCE5124", Offset = "0xCE5124", VA = "0xCE5124", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60009D7")]
			[Address(RVA = "0xCE5128", Offset = "0xCE5128", VA = "0xCE5128", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60009D9")]
			[Address(RVA = "0xCE5358", Offset = "0xCE5358", VA = "0xCE5358", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool isAudioFinished;

		[Token(Token = "0x4000A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool isCoyoteLookedAt;

		[Token(Token = "0x4000A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		private bool isFadeOut;

		[Token(Token = "0x4000A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Light[] light;

		[Token(Token = "0x4000A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public VolumetricLightBeam[] lightBeam;

		[Token(Token = "0x60009CE")]
		[Address(RVA = "0xCE4FFC", Offset = "0xCE4FFC", VA = "0xCE4FFC")]
		private void Start()
		{
		}

		[Token(Token = "0x60009CF")]
		[Address(RVA = "0xCE5000", Offset = "0xCE5000", VA = "0xCE5000")]
		public void AudioFinished()
		{
		}

		[Token(Token = "0x60009D0")]
		[Address(RVA = "0xCE500C", Offset = "0xCE500C", VA = "0xCE500C")]
		public void CoyoteLookedAt()
		{
		}

		[Token(Token = "0x60009D1")]
		[Address(RVA = "0xCE5018", Offset = "0xCE5018", VA = "0xCE5018")]
		private void Update()
		{
		}

		[Token(Token = "0x60009D2")]
		[Address(RVA = "0xCE5038", Offset = "0xCE5038", VA = "0xCE5038")]
		public void FadeOut()
		{
		}

		[Token(Token = "0x60009D3")]
		[Address(RVA = "0xCE508C", Offset = "0xCE508C", VA = "0xCE508C")]
		[IteratorStateMachine(typeof(<FadeOutCoroutine>d__10))]
		private IEnumerator FadeOutCoroutine()
		{
			return null;
		}

		[Token(Token = "0x60009D4")]
		[Address(RVA = "0xCE511C", Offset = "0xCE511C", VA = "0xCE511C")]
		public FadeOutCoop()
		{
		}
	}
	[Token(Token = "0x2000223")]
	[DefaultExecutionOrder(10000)]
	public class FallingLetter : MonoBehaviour
	{
		[Token(Token = "0x4000A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float swingAngle;

		[Token(Token = "0x4000A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float swingRadius;

		[Token(Token = "0x4000A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float swingSpeed;

		[Token(Token = "0x4000AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 swingAxis;

		[Token(Token = "0x4000AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float dropSpeed;

		[Token(Token = "0x4000AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float startHeight;

		[Token(Token = "0x4000AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float rotationSpeed;

		[Token(Token = "0x4000AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float slideDistance;

		[Token(Token = "0x4000AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float slideTime;

		[Token(Token = "0x4000AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 targetEnd;

		[Token(Token = "0x4000AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion rotationEnd;

		[Token(Token = "0x4000AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 center;

		[Token(Token = "0x4000AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float dropTime;

		[Token(Token = "0x60009DB")]
		[Address(RVA = "0xCE53A0", Offset = "0xCE53A0", VA = "0xCE53A0")]
		private void Awake()
		{
		}

		[Token(Token = "0x60009DC")]
		[Address(RVA = "0xCE53FC", Offset = "0xCE53FC", VA = "0xCE53FC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60009DD")]
		[Address(RVA = "0xCE54A8", Offset = "0xCE54A8", VA = "0xCE54A8")]
		private void Update()
		{
		}

		[Token(Token = "0x60009DE")]
		[Address(RVA = "0xCE5950", Offset = "0xCE5950", VA = "0xCE5950")]
		private void OnAttachedToHand(Hand hand)
		{
		}

		[Token(Token = "0x60009DF")]
		[Address(RVA = "0xCE5B14", Offset = "0xCE5B14", VA = "0xCE5B14")]
		public FallingLetter()
		{
		}
	}
	[Token(Token = "0x2000224")]
	public class FencePostPlanted : MonoBehaviour
	{
		[Token(Token = "0x4000AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractiveMaterialHint[] hints;

		[Token(Token = "0x4000AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Interactable mallet;

		[Token(Token = "0x4000AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioSource postInHole;

		[Token(Token = "0x60009E0")]
		[Address(RVA = "0xCE5B80", Offset = "0xCE5B80", VA = "0xCE5B80")]
		public void FencePostInTheHole(InteractiveMaterialHint fencepost)
		{
		}

		[Token(Token = "0x60009E1")]
		[Address(RVA = "0xCE5D1C", Offset = "0xCE5D1C", VA = "0xCE5D1C")]
		public FencePostPlanted()
		{
		}
	}
	[Token(Token = "0x2000225")]
	public class FlipFloaterPeriodically : MonoBehaviour
	{
		[Token(Token = "0x2000226")]
		[CompilerGenerated]
		private sealed class <Flip>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000AB2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000AB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000AB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FlipFloaterPeriodically <>4__this;

			[Token(Token = "0x1700010B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60009E9")]
				[Address(RVA = "0xCE5FF0", Offset = "0xCE5FF0", VA = "0xCE5FF0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700010C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60009EB")]
				[Address(RVA = "0xCE6038", Offset = "0xCE6038", VA = "0xCE6038", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60009E6")]
			[Address(RVA = "0xCE5DF8", Offset = "0xCE5DF8", VA = "0xCE5DF8")]
			[DebuggerHidden]
			public <Flip>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x60009E7")]
			[Address(RVA = "0xCE5E30", Offset = "0xCE5E30", VA = "0xCE5E30", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60009E8")]
			[Address(RVA = "0xCE5E34", Offset = "0xCE5E34", VA = "0xCE5E34", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60009EA")]
			[Address(RVA = "0xCE5FF8", Offset = "0xCE5FF8", VA = "0xCE5FF8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 flipAxis;

		[Token(Token = "0x4000AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool axisIsWorld;

		[Token(Token = "0x4000AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float time;

		[Token(Token = "0x4000AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float delay;

		[Token(Token = "0x4000AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Floater floater;

		[Token(Token = "0x60009E2")]
		[Address(RVA = "0xCE5D24", Offset = "0xCE5D24", VA = "0xCE5D24")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60009E3")]
		[Address(RVA = "0xCE5DF0", Offset = "0xCE5DF0", VA = "0xCE5DF0")]
		private void OnAttachedToHand(Hand hand)
		{
		}

		[Token(Token = "0x60009E4")]
		[Address(RVA = "0xCE5D88", Offset = "0xCE5D88", VA = "0xCE5D88")]
		[IteratorStateMachine(typeof(<Flip>d__7))]
		private IEnumerator Flip()
		{
			return null;
		}

		[Token(Token = "0x60009E5")]
		[Address(RVA = "0xCE5E20", Offset = "0xCE5E20", VA = "0xCE5E20")]
		public FlipFloaterPeriodically()
		{
		}
	}
	[Token(Token = "0x2000227")]
	public class Floater : MonoBehaviour
	{
		[Token(Token = "0x4000AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[ContextMenuItem("Reset", "GrabHomePosition")]
		public Vector3 homePosition;

		[Token(Token = "0x4000AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float initialHeight;

		[Token(Token = "0x4000AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 driftPosition;

		[Token(Token = "0x4000AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 Vdes;

		[Token(Token = "0x4000AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 blowForce;

		[Token(Token = "0x4000ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 _blowForce;

		[Token(Token = "0x4000ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float magnitude;

		[Token(Token = "0x4000ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Quaternion homeRotation;

		[Token(Token = "0x4000ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float maxSpeed;

		[Token(Token = "0x4000ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool reportPosition;

		[Token(Token = "0x4000ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float phase;

		[Token(Token = "0x4000AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float kp;

		[Token(Token = "0x4000AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float kd;

		[Token(Token = "0x4000AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public FloaterData data;

		[Token(Token = "0x4000AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Rigidbody rb;

		[Token(Token = "0x60009EC")]
		[Address(RVA = "0xCE6040", Offset = "0xCE6040", VA = "0xCE6040")]
		public void GrabHomePosition()
		{
		}

		[Token(Token = "0x60009ED")]
		[Address(RVA = "0xCE6070", Offset = "0xCE6070", VA = "0xCE6070")]
		public void Reset()
		{
		}

		[Token(Token = "0x60009EE")]
		[Address(RVA = "0xCE60AC", Offset = "0xCE60AC", VA = "0xCE60AC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60009EF")]
		[Address(RVA = "0xCE62E8", Offset = "0xCE62E8", VA = "0xCE62E8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60009F0")]
		[Address(RVA = "0xCE62EC", Offset = "0xCE62EC", VA = "0xCE62EC")]
		private void Update()
		{
		}

		[Token(Token = "0x60009F1")]
		[Address(RVA = "0xCE6414", Offset = "0xCE6414", VA = "0xCE6414")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60009F2")]
		[Address(RVA = "0xCE6B08", Offset = "0xCE6B08", VA = "0xCE6B08")]
		public Floater()
		{
		}
	}
	[Token(Token = "0x2000228")]
	public class FloaterEyeLevelAdjust : MonoBehaviour
	{
		[Token(Token = "0x4000AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<Floater> floaters;

		[Token(Token = "0x4000AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<float> localY;

		[Token(Token = "0x4000AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool awake;

		[Token(Token = "0x4000AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool update;

		[Token(Token = "0x60009F3")]
		[Address(RVA = "0xCE6B18", Offset = "0xCE6B18", VA = "0xCE6B18")]
		private void Awake()
		{
		}

		[Token(Token = "0x60009F4")]
		[Address(RVA = "0xCE6F10", Offset = "0xCE6F10", VA = "0xCE6F10")]
		private void Update()
		{
		}

		[Token(Token = "0x60009F5")]
		[Address(RVA = "0xCE6D60", Offset = "0xCE6D60", VA = "0xCE6D60")]
		private void Adjust()
		{
		}

		[Token(Token = "0x60009F6")]
		[Address(RVA = "0xCE6F20", Offset = "0xCE6F20", VA = "0xCE6F20")]
		public FloaterEyeLevelAdjust()
		{
		}
	}
	[Token(Token = "0x2000229")]
	[RequireComponent(typeof(VelocityEstimator))]
	[DefaultExecutionOrder(10000)]
	public class FloatingHover : MonoBehaviour
	{
		[Token(Token = "0x4000AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Collider collider;

		[Token(Token = "0x4000AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Animation animation;

		[Token(Token = "0x4000ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Rigidbody rb;

		[Token(Token = "0x4000ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Floater floater;

		[Token(Token = "0x4000ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 lastPosition;

		[Token(Token = "0x4000ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 floatPosition;

		[Token(Token = "0x4000ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float speed;

		[Token(Token = "0x4000ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private VelocityEstimator velEst;

		[Token(Token = "0x4000AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool attached;

		[Token(Token = "0x4000AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		public bool isFloating;

		[Token(Token = "0x4000AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		private bool initialHeightHomeSet;

		[Token(Token = "0x60009F7")]
		[Address(RVA = "0xCE6FE8", Offset = "0xCE6FE8", VA = "0xCE6FE8")]
		private void Awake()
		{
		}

		[Token(Token = "0x60009F8")]
		[Address(RVA = "0xCE7210", Offset = "0xCE7210", VA = "0xCE7210", Slot = "4")]
		protected virtual void OnAttachedToHand(Hand hand)
		{
		}

		[Token(Token = "0x60009F9")]
		[Address(RVA = "0xCE721C", Offset = "0xCE721C", VA = "0xCE721C", Slot = "5")]
		protected virtual void OnDetachedFromHand(Hand hand)
		{
		}

		[Token(Token = "0x60009FA")]
		[Address(RVA = "0xCE7224", Offset = "0xCE7224", VA = "0xCE7224")]
		private void Update()
		{
		}

		[Token(Token = "0x60009FB")]
		[Address(RVA = "0xCE7228", Offset = "0xCE7228", VA = "0xCE7228")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60009FC")]
		[Address(RVA = "0xCE7530", Offset = "0xCE7530", VA = "0xCE7530")]
		public FloatingHover()
		{
		}
	}
	[Token(Token = "0x200022A")]
	[DefaultExecutionOrder(0)]
	[RequireComponent(typeof(Floater))]
	[RequireComponent(typeof(FloatingHover))]
	public class FloatToLocal : MonoBehaviour
	{
		[Token(Token = "0x4000AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 localPosition;

		[Token(Token = "0x4000AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 localRotation;

		[Token(Token = "0x4000AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform target;

		[Token(Token = "0x4000AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float startHeight;

		[Token(Token = "0x4000AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float maxDistanceTime;

		[Token(Token = "0x4000AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Floater floater;

		[Token(Token = "0x4000AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private FloatingHover hover;

		[Token(Token = "0x4000ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float distanceTime;

		[Token(Token = "0x60009FD")]
		[Address(RVA = "0xCE7538", Offset = "0xCE7538", VA = "0xCE7538")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60009FE")]
		[Address(RVA = "0xCE7710", Offset = "0xCE7710", VA = "0xCE7710")]
		[ContextMenu("Current Local Transform")]
		public void RecordCurrent()
		{
		}

		[Token(Token = "0x60009FF")]
		[Address(RVA = "0xCE7784", Offset = "0xCE7784", VA = "0xCE7784")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A00")]
		[Address(RVA = "0xCE7A28", Offset = "0xCE7A28", VA = "0xCE7A28")]
		public FloatToLocal()
		{
		}
	}
	[Token(Token = "0x200022B")]
	[RequireComponent(typeof(Floater))]
	[DefaultExecutionOrder(0)]
	[RequireComponent(typeof(FloatingHover))]
	public class FloatToPoint : MonoBehaviour
	{
		[Token(Token = "0x4000ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float moveSpeed;

		[Token(Token = "0x4000ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform targetPoint;

		[Token(Token = "0x4000ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool floatOnStart;

		[Token(Token = "0x4000ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Floater floater;

		[Token(Token = "0x4000ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private FloatingHover hover;

		[Token(Token = "0x4000AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 startPos;

		[Token(Token = "0x4000AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion startRot;

		[Token(Token = "0x4000AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 homePosition;

		[Token(Token = "0x4000AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Quaternion homeRotation;

		[Token(Token = "0x4000AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool detatched;

		[Token(Token = "0x4000AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float floatTime;

		[Token(Token = "0x4000AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float floatDuration;

		[Token(Token = "0x6000A01")]
		[Address(RVA = "0xCE7A38", Offset = "0xCE7A38", VA = "0xCE7A38")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A02")]
		[Address(RVA = "0xCE7B34", Offset = "0xCE7B34", VA = "0xCE7B34")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A03")]
		[Address(RVA = "0xCE7CB8", Offset = "0xCE7CB8", VA = "0xCE7CB8")]
		private void OnAttachedToHand(Hand hand)
		{
		}

		[Token(Token = "0x6000A04")]
		[Address(RVA = "0xCE7B44", Offset = "0xCE7B44", VA = "0xCE7B44")]
		private void OnDetachedFromHand(Hand hand)
		{
		}

		[Token(Token = "0x6000A05")]
		[Address(RVA = "0xCE7CC0", Offset = "0xCE7CC0", VA = "0xCE7CC0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000A06")]
		[Address(RVA = "0xCE7F40", Offset = "0xCE7F40", VA = "0xCE7F40")]
		public FloatToPoint()
		{
		}
	}
	[Token(Token = "0x200022C")]
	[CreateAssetMenu(menuName = "GesturePattern")]
	public class GesturePattern : ScriptableObject
	{
		[Token(Token = "0x4000AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Gesture[] gesture;

		[Token(Token = "0x6000A07")]
		[Address(RVA = "0xCE7F48", Offset = "0xCE7F48", VA = "0xCE7F48")]
		public GesturePattern()
		{
		}
	}
	[Token(Token = "0x200022D")]
	public class SetWaveTarget : MonoBehaviour
	{
		[Token(Token = "0x4000AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public WaveManager waveManager;

		[Token(Token = "0x4000AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TriggerWave[] triggers;

		[Token(Token = "0x4000AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float delay;

		[Token(Token = "0x6000A08")]
		[Address(RVA = "0xCE7F50", Offset = "0xCE7F50", VA = "0xCE7F50")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A09")]
		[Address(RVA = "0xCE7FA0", Offset = "0xCE7FA0", VA = "0xCE7FA0")]
		private void SetTarget()
		{
		}

		[Token(Token = "0x6000A0A")]
		[Address(RVA = "0xCE8028", Offset = "0xCE8028", VA = "0xCE8028")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A0B")]
		[Address(RVA = "0xCE802C", Offset = "0xCE802C", VA = "0xCE802C")]
		public SetWaveTarget()
		{
		}
	}
	[Token(Token = "0x200022E")]
	public class TriggerWave : MonoBehaviour
	{
		[Token(Token = "0x4000AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEvent waveTriggered;

		[Token(Token = "0x4000AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEvent waveAutoTriggered;

		[Token(Token = "0x4000AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected bool triggerOnce;

		[Token(Token = "0x4000AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float autoTrigger;

		[Token(Token = "0x4000AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool auto;

		[Token(Token = "0x6000A0C")]
		[Address(RVA = "0xCE8034", Offset = "0xCE8034", VA = "0xCE8034")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0xCE8098", Offset = "0xCE8098", VA = "0xCE8098")]
		public void AutoTrigger()
		{
		}

		[Token(Token = "0x6000A0E")]
		[Address(RVA = "0xCE80AC", Offset = "0xCE80AC", VA = "0xCE80AC", Slot = "4")]
		public virtual void Trigger()
		{
		}

		[Token(Token = "0x6000A0F")]
		[Address(RVA = "0xCE8130", Offset = "0xCE8130", VA = "0xCE8130")]
		public TriggerWave()
		{
		}
	}
	[Token(Token = "0x200022F")]
	public class TriggerWaveAnimation : TriggerWave
	{
		[Token(Token = "0x4000AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Animator animator;

		[Token(Token = "0x6000A10")]
		[Address(RVA = "0xCE8140", Offset = "0xCE8140", VA = "0xCE8140")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A11")]
		[Address(RVA = "0xCE8144", Offset = "0xCE8144", VA = "0xCE8144")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A12")]
		[Address(RVA = "0xCE8148", Offset = "0xCE8148", VA = "0xCE8148", Slot = "4")]
		public override void Trigger()
		{
		}

		[Token(Token = "0x6000A13")]
		[Address(RVA = "0xCE8218", Offset = "0xCE8218", VA = "0xCE8218")]
		public TriggerWaveAnimation()
		{
		}
	}
	[Token(Token = "0x2000230")]
	public class TriggerWaveGroupAnimation : TriggerWave
	{
		[Token(Token = "0x4000AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SCENE_CHARACTER[] characterID;

		[Token(Token = "0x4000AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Animator[] group;

		[Token(Token = "0x4000AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string[] animation;

		[Token(Token = "0x4000AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string[] auto_animation;

		[Token(Token = "0x6000A14")]
		[Address(RVA = "0xCE8228", Offset = "0xCE8228", VA = "0xCE8228")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A15")]
		[Address(RVA = "0xCE8340", Offset = "0xCE8340", VA = "0xCE8340")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A16")]
		[Address(RVA = "0xCE8344", Offset = "0xCE8344", VA = "0xCE8344", Slot = "4")]
		public override void Trigger()
		{
		}

		[Token(Token = "0x6000A17")]
		[Address(RVA = "0xCE848C", Offset = "0xCE848C", VA = "0xCE848C")]
		public TriggerWaveGroupAnimation()
		{
		}
	}
	[Token(Token = "0x2000231")]
	public class TriggerWaveGroupPulse : TriggerWave
	{
		[Token(Token = "0x4000AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform[] group;

		[Token(Token = "0x6000A18")]
		[Address(RVA = "0xCE849C", Offset = "0xCE849C", VA = "0xCE849C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A19")]
		[Address(RVA = "0xCE84A0", Offset = "0xCE84A0", VA = "0xCE84A0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A1A")]
		[Address(RVA = "0xCE84A4", Offset = "0xCE84A4", VA = "0xCE84A4", Slot = "4")]
		public override void Trigger()
		{
		}

		[Token(Token = "0x6000A1B")]
		[Address(RVA = "0xCE869C", Offset = "0xCE869C", VA = "0xCE869C")]
		public TriggerWaveGroupPulse()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000232")]
	public class Gesture
	{
		[Token(Token = "0x2000233")]
		public enum Direction
		{
			[Token(Token = "0x4000AFD")]
			Up,
			[Token(Token = "0x4000AFE")]
			Down,
			[Token(Token = "0x4000AFF")]
			Left,
			[Token(Token = "0x4000B00")]
			Right,
			[Token(Token = "0x4000B01")]
			Forward,
			[Token(Token = "0x4000B02")]
			Back,
			[Token(Token = "0x4000B03")]
			None,
			[Token(Token = "0x4000B04")]
			Any
		}

		[Token(Token = "0x4000AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public XRNode source;

		[Token(Token = "0x4000AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Direction facing;

		[Token(Token = "0x4000AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float rotation;

		[Token(Token = "0x4000AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Direction moving;

		[Token(Token = "0x4000AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float time;

		[Token(Token = "0x4000AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float height_ratio;

		[Token(Token = "0x6000A1C")]
		[Address(RVA = "0xCE86AC", Offset = "0xCE86AC", VA = "0xCE86AC")]
		public static bool operator ==(Gesture g1, Gesture g2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A1D")]
		[Address(RVA = "0xCE8700", Offset = "0xCE8700", VA = "0xCE8700")]
		public static bool operator !=(Gesture g1, Gesture g2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A1E")]
		[Address(RVA = "0xCE8744", Offset = "0xCE8744", VA = "0xCE8744")]
		public Gesture()
		{
		}
	}
	[Token(Token = "0x2000234")]
	public class WaveManager : MonoBehaviour
	{
		[Token(Token = "0x2000235")]
		[CompilerGenerated]
		private sealed class <WaveFeedback>d__30 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WaveManager <>4__this;

			[Token(Token = "0x4000B1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Hand <playerHand>5__2;

			[Token(Token = "0x4000B20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <i>5__3;

			[Token(Token = "0x1700010D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000A2E")]
				[Address(RVA = "0xCE99A8", Offset = "0xCE99A8", VA = "0xCE99A8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700010E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000A30")]
				[Address(RVA = "0xCE99F0", Offset = "0xCE99F0", VA = "0xCE99F0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000A2B")]
			[Address(RVA = "0xCE961C", Offset = "0xCE961C", VA = "0xCE961C")]
			[DebuggerHidden]
			public <WaveFeedback>d__30(int <>1__state)
			{
			}

			[Token(Token = "0x6000A2C")]
			[Address(RVA = "0xCE9810", Offset = "0xCE9810", VA = "0xCE9810", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000A2D")]
			[Address(RVA = "0xCE9814", Offset = "0xCE9814", VA = "0xCE9814", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000A2F")]
			[Address(RVA = "0xCE99B0", Offset = "0xCE99B0", VA = "0xCE99B0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000236")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass31_0
		{
			[Token(Token = "0x4000B21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool found;

			[Token(Token = "0x4000B22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public WaveManager <>4__this;

			[Token(Token = "0x4000B23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Gesture[] data;

			[Token(Token = "0x4000B24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public XRNode hand;

			[Token(Token = "0x6000A31")]
			[Address(RVA = "0xCE99F8", Offset = "0xCE99F8", VA = "0xCE99F8")]
			public <>c__DisplayClass31_0()
			{
			}

			[Token(Token = "0x6000A32")]
			[Address(RVA = "0xCE9A00", Offset = "0xCE9A00", VA = "0xCE9A00")]
			internal void <RecognizeCoroutine>b__0()
			{
			}
		}

		[Token(Token = "0x2000237")]
		[CompilerGenerated]
		private sealed class <RecognizeCoroutine>d__31 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WaveManager <>4__this;

			[Token(Token = "0x4000B28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Gesture[] data;

			[Token(Token = "0x4000B29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public XRNode hand;

			[Token(Token = "0x4000B2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private <>c__DisplayClass31_0 <>8__1;

			[Token(Token = "0x4000B2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Thread <thread>5__2;

			[Token(Token = "0x1700010F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000A36")]
				[Address(RVA = "0xCE9BB4", Offset = "0xCE9BB4", VA = "0xCE9BB4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000110")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000A38")]
				[Address(RVA = "0xCE9BFC", Offset = "0xCE9BFC", VA = "0xCE9BFC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000A33")]
			[Address(RVA = "0xCE9644", Offset = "0xCE9644", VA = "0xCE9644")]
			[DebuggerHidden]
			public <RecognizeCoroutine>d__31(int <>1__state)
			{
			}

			[Token(Token = "0x6000A34")]
			[Address(RVA = "0xCE9A30", Offset = "0xCE9A30", VA = "0xCE9A30", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000A35")]
			[Address(RVA = "0xCE9A34", Offset = "0xCE9A34", VA = "0xCE9A34", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000A37")]
			[Address(RVA = "0xCE9BBC", Offset = "0xCE9BBC", VA = "0xCE9BBC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000238")]
		[CompilerGenerated]
		private sealed class <TimedGestureCoroutine>d__33 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float time;

			[Token(Token = "0x4000B2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public WaveManager <>4__this;

			[Token(Token = "0x17000111")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000A3C")]
				[Address(RVA = "0xCE9DA8", Offset = "0xCE9DA8", VA = "0xCE9DA8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000112")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000A3E")]
				[Address(RVA = "0xCE9DF0", Offset = "0xCE9DF0", VA = "0xCE9DF0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000A39")]
			[Address(RVA = "0xCE97E0", Offset = "0xCE97E0", VA = "0xCE97E0")]
			[DebuggerHidden]
			public <TimedGestureCoroutine>d__33(int <>1__state)
			{
			}

			[Token(Token = "0x6000A3A")]
			[Address(RVA = "0xCE9C04", Offset = "0xCE9C04", VA = "0xCE9C04", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000A3B")]
			[Address(RVA = "0xCE9C08", Offset = "0xCE9C08", VA = "0xCE9C08", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000A3D")]
			[Address(RVA = "0xCE9DB0", Offset = "0xCE9DB0", VA = "0xCE9DB0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform m_Camera;

		[Token(Token = "0x4000B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float minGestureRatio;

		[Token(Token = "0x4000B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Hand left_pose;

		[Token(Token = "0x4000B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Hand right_pose;

		[Token(Token = "0x4000B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Queue<Gesture> left_gesture_history;

		[Token(Token = "0x4000B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Queue<Gesture> right_gesture_history;

		[Token(Token = "0x4000B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Gesture left_gesture;

		[Token(Token = "0x4000B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Gesture right_gesture;

		[Token(Token = "0x4000B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public TriggerWave[] wave_recieve;

		[Token(Token = "0x4000B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool waved;

		[Token(Token = "0x4000B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		public bool isLooking;

		[Token(Token = "0x4000B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		public bool triggerGesture;

		[Token(Token = "0x4000B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public XRNode triggerHand;

		[Token(Token = "0x4000B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool timedGesture;

		[Token(Token = "0x4000B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float timedGestureTime;

		[Token(Token = "0x4000B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public XRNode timedGestureHand;

		[Token(Token = "0x4000B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private bool delayedGesture;

		[Token(Token = "0x4000B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float maxAngle;

		[Token(Token = "0x4000B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float minMagnitude;

		[Token(Token = "0x4000B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float currentAngle;

		[Token(Token = "0x4000B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public GesturePattern[] patterns;

		[Token(Token = "0x4000B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public int longestGesture;

		[Token(Token = "0x4000B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Player player;

		[Token(Token = "0x6000A1F")]
		[Address(RVA = "0xCE874C", Offset = "0xCE874C", VA = "0xCE874C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A20")]
		[Address(RVA = "0xCE887C", Offset = "0xCE887C", VA = "0xCE887C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A21")]
		[Address(RVA = "0xCE8020", Offset = "0xCE8020", VA = "0xCE8020")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000A22")]
		[Address(RVA = "0xCE8880", Offset = "0xCE8880", VA = "0xCE8880")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000A23")]
		[Address(RVA = "0xCE89D0", Offset = "0xCE89D0", VA = "0xCE89D0")]
		private void UpdatePose(Hand hand, XRNode source)
		{
		}

		[Token(Token = "0x6000A24")]
		[Address(RVA = "0xCE9070", Offset = "0xCE9070", VA = "0xCE9070")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A25")]
		[Address(RVA = "0xCE9050", Offset = "0xCE9050", VA = "0xCE9050")]
		public void RecognizeAsync(Gesture[] data, XRNode hand)
		{
		}

		[Token(Token = "0x6000A26")]
		[Address(RVA = "0xCE95B4", Offset = "0xCE95B4", VA = "0xCE95B4")]
		[IteratorStateMachine(typeof(<WaveFeedback>d__30))]
		private IEnumerator WaveFeedback()
		{
			return null;
		}

		[Token(Token = "0x6000A27")]
		[Address(RVA = "0xCE9538", Offset = "0xCE9538", VA = "0xCE9538")]
		[IteratorStateMachine(typeof(<RecognizeCoroutine>d__31))]
		private IEnumerator RecognizeCoroutine(Gesture[] data, XRNode hand)
		{
			return null;
		}

		[Token(Token = "0x6000A28")]
		[Address(RVA = "0xCE966C", Offset = "0xCE966C", VA = "0xCE966C")]
		private bool findPattern(Gesture[] data, XRNode hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A29")]
		[Address(RVA = "0xCE94C0", Offset = "0xCE94C0", VA = "0xCE94C0")]
		[IteratorStateMachine(typeof(<TimedGestureCoroutine>d__33))]
		private IEnumerator TimedGestureCoroutine(float time)
		{
			return null;
		}

		[Token(Token = "0x6000A2A")]
		[Address(RVA = "0xCE9808", Offset = "0xCE9808", VA = "0xCE9808")]
		public WaveManager()
		{
		}
	}
	[Token(Token = "0x2000239")]
	public class GiveCameraToRandall : MonoBehaviour
	{
		[Token(Token = "0x4000B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject camera;

		[Token(Token = "0x4000B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ParentToCharacter parentCharacter;

		[Token(Token = "0x4000B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float delay;

		[Token(Token = "0x6000A3F")]
		[Address(RVA = "0xCE9DF8", Offset = "0xCE9DF8", VA = "0xCE9DF8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A40")]
		[Address(RVA = "0xCE9E48", Offset = "0xCE9E48", VA = "0xCE9E48")]
		public void Reparent()
		{
		}

		[Token(Token = "0x6000A41")]
		[Address(RVA = "0xCE9F58", Offset = "0xCE9F58", VA = "0xCE9F58")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A42")]
		[Address(RVA = "0xCE9E50", Offset = "0xCE9E50", VA = "0xCE9E50")]
		public void CopyClassValues(ParentToCharacter sourceComp, GameObject target)
		{
		}

		[Token(Token = "0x6000A43")]
		[Address(RVA = "0xCE9F5C", Offset = "0xCE9F5C", VA = "0xCE9F5C")]
		public GiveCameraToRandall()
		{
		}
	}
	[Token(Token = "0x200023A")]
	public class GlowOutline : MonoBehaviour
	{
		[Token(Token = "0x4000B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GlowingObjectsList list;

		[Token(Token = "0x4000B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Renderer rend;

		[Token(Token = "0x6000A44")]
		[Address(RVA = "0xCE9F64", Offset = "0xCE9F64", VA = "0xCE9F64")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A45")]
		[Address(RVA = "0xCE9F68", Offset = "0xCE9F68", VA = "0xCE9F68")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000A46")]
		[Address(RVA = "0xCEA0CC", Offset = "0xCEA0CC", VA = "0xCEA0CC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000A47")]
		[Address(RVA = "0xCEA128", Offset = "0xCEA128", VA = "0xCEA128")]
		public GlowOutline()
		{
		}
	}
	[Token(Token = "0x200023B")]
	public class GovernmentContents : MonoBehaviour
	{
		[Token(Token = "0x200023C")]
		[CompilerGenerated]
		private sealed class <ShowContentRoutine>d__2 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GovernmentContents <>4__this;

			[Token(Token = "0x17000113")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000A4E")]
				[Address(RVA = "0xCEA6EC", Offset = "0xCEA6EC", VA = "0xCEA6EC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000114")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000A50")]
				[Address(RVA = "0xCEA734", Offset = "0xCEA734", VA = "0xCEA734", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000A4B")]
			[Address(RVA = "0xCEA1E4", Offset = "0xCEA1E4", VA = "0xCEA1E4")]
			[DebuggerHidden]
			public <ShowContentRoutine>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x6000A4C")]
			[Address(RVA = "0xCEA220", Offset = "0xCEA220", VA = "0xCEA220", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000A4D")]
			[Address(RVA = "0xCEA224", Offset = "0xCEA224", VA = "0xCEA224", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000A4F")]
			[Address(RVA = "0xCEA6F4", Offset = "0xCEA6F4", VA = "0xCEA6F4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float spacing;

		[Token(Token = "0x6000A48")]
		[Address(RVA = "0xCEA130", Offset = "0xCEA130", VA = "0xCEA130")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000A49")]
		[Address(RVA = "0xCEA17C", Offset = "0xCEA17C", VA = "0xCEA17C")]
		[IteratorStateMachine(typeof(<ShowContentRoutine>d__2))]
		private IEnumerator ShowContentRoutine()
		{
			return null;
		}

		[Token(Token = "0x6000A4A")]
		[Address(RVA = "0xCEA20C", Offset = "0xCEA20C", VA = "0xCEA20C")]
		public GovernmentContents()
		{
		}
	}
	[Token(Token = "0x200023D")]
	public class GrandpaGotLetters : MonoBehaviour
	{
		[Token(Token = "0x4000B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int activateIndex;

		[Token(Token = "0x4000B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int grabCount;

		[Token(Token = "0x4000B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int lettersCount;

		[Token(Token = "0x6000A51")]
		[Address(RVA = "0xCEA73C", Offset = "0xCEA73C", VA = "0xCEA73C")]
		public void LetterGrabbed()
		{
		}

		[Token(Token = "0x6000A52")]
		[Address(RVA = "0xCEA74C", Offset = "0xCEA74C", VA = "0xCEA74C")]
		public void CheckAdvance()
		{
		}

		[Token(Token = "0x6000A53")]
		[Address(RVA = "0xCEA8B4", Offset = "0xCEA8B4", VA = "0xCEA8B4")]
		public GrandpaGotLetters()
		{
		}
	}
	[Token(Token = "0x200023E")]
	public class HowToPlantSceneHelper : MonoBehaviour
	{
		[Token(Token = "0x6000A54")]
		[Address(RVA = "0xCEA8BC", Offset = "0xCEA8BC", VA = "0xCEA8BC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A55")]
		[Address(RVA = "0xCEA974", Offset = "0xCEA974", VA = "0xCEA974")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A56")]
		[Address(RVA = "0xCEA978", Offset = "0xCEA978", VA = "0xCEA978")]
		public HowToPlantSceneHelper()
		{
		}
	}
	[Token(Token = "0x200023F")]
	public class LabourFarmSceneHelper : MonoBehaviour
	{
		[Token(Token = "0x6000A57")]
		[Address(RVA = "0xCEA980", Offset = "0xCEA980", VA = "0xCEA980")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A58")]
		[Address(RVA = "0xCEAA38", Offset = "0xCEAA38", VA = "0xCEAA38")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A59")]
		[Address(RVA = "0xCEAA3C", Offset = "0xCEAA3C", VA = "0xCEAA3C")]
		public LabourFarmSceneHelper()
		{
		}
	}
	[Token(Token = "0x2000240")]
	public enum ParticleDensity
	{
		[Token(Token = "0x4000B3D")]
		Normal,
		[Token(Token = "0x4000B3E")]
		Extra
	}
	[Token(Token = "0x2000241")]
	public class HintingSystemController : Singleton<HintingSystemController>
	{
		[Token(Token = "0x2000242")]
		[CompilerGenerated]
		private sealed class <RegisterRoutine>d__35 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HintingSystemController <>4__this;

			[Token(Token = "0x17000115")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000A6B")]
				[Address(RVA = "0xCED3D8", Offset = "0xCED3D8", VA = "0xCED3D8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000116")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000A6D")]
				[Address(RVA = "0xCED420", Offset = "0xCED420", VA = "0xCED420", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000A68")]
			[Address(RVA = "0xCEADCC", Offset = "0xCEADCC", VA = "0xCEADCC")]
			[DebuggerHidden]
			public <RegisterRoutine>d__35(int <>1__state)
			{
			}

			[Token(Token = "0x6000A69")]
			[Address(RVA = "0xCED248", Offset = "0xCED248", VA = "0xCED248", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000A6A")]
			[Address(RVA = "0xCED24C", Offset = "0xCED24C", VA = "0xCED24C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000A6C")]
			[Address(RVA = "0xCED3E0", Offset = "0xCED3E0", VA = "0xCED3E0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000244")]
		[CompilerGenerated]
		private sealed class <PoofCoroutine>d__43 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HintingSystemController <>4__this;

			[Token(Token = "0x17000117")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000A73")]
				[Address(RVA = "0xCEDA00", Offset = "0xCEDA00", VA = "0xCEDA00", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000118")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000A75")]
				[Address(RVA = "0xCEDA48", Offset = "0xCEDA48", VA = "0xCEDA48", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000A70")]
			[Address(RVA = "0xCEC9A8", Offset = "0xCEC9A8", VA = "0xCEC9A8")]
			[DebuggerHidden]
			public <PoofCoroutine>d__43(int <>1__state)
			{
			}

			[Token(Token = "0x6000A71")]
			[Address(RVA = "0xCED45C", Offset = "0xCED45C", VA = "0xCED45C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000A72")]
			[Address(RVA = "0xCED460", Offset = "0xCED460", VA = "0xCED460", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000A74")]
			[Address(RVA = "0xCEDA08", Offset = "0xCEDA08", VA = "0xCEDA08", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxAttentionTime;

		[Token(Token = "0x4000B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float maxParticleMultiplier;

		[Token(Token = "0x4000B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float distance;

		[Token(Token = "0x4000B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float checkFrequency;

		[Token(Token = "0x4000B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float moveDuration;

		[Token(Token = "0x4000B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float speed;

		[Token(Token = "0x4000B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public InteractiveHintData hintData;

		[Token(Token = "0x4000B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ParticleDensity particleDensity;

		[Token(Token = "0x4000B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<InteractiveMaterialHint> hints;

		[Token(Token = "0x4000B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int hintIdx;

		[Token(Token = "0x4000B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		public GameObject highlightHolder;

		[Token(Token = "0x4000B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ParticleSystem hintSystem;

		[Token(Token = "0x4000B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public ParticleSystem targettingSystem;

		[Token(Token = "0x4000B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private ParticleSystem targetHaloSystem;

		[Token(Token = "0x4000B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private ParticleSystem.Particle[] currentParticles;

		[Token(Token = "0x4000B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private ParticleSystem.Particle[] targettingParticles;

		[Token(Token = "0x4000B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private ParticleSystem.Particle pp;

		[Token(Token = "0x4000B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private ParticleSystem.Particle tp;

		[Token(Token = "0x4000B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private InteractiveMaterialHint tmpHint;

		[Token(Token = "0x4000B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private AudioSource audioSFX;

		[Token(Token = "0x4000B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private float hintSoundTimer;

		[Token(Token = "0x4000B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		private bool hintSound;

		[Token(Token = "0x4000B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private List<Component> hintSoundLocks;

		[Token(Token = "0x4000B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private Transform hintTarget;

		[Token(Token = "0x4000B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private Transform target;

		[Token(Token = "0x4000B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private InteractiveMaterialHint showTarget;

		[Token(Token = "0x4000B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private float maxParticleRelease;

		[Token(Token = "0x4000B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		public bool emission;

		[Token(Token = "0x4000B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C5")]
		private bool poofing;

		[Token(Token = "0x4000B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private float poofing_time;

		[Token(Token = "0x4000B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		private Vector3 partsVel;

		[Token(Token = "0x4000B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private List<Vector4> TcustomData;

		[Token(Token = "0x4000B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public GlowingObjectsList defaultGlowObjectList;

		[Token(Token = "0x6000A5A")]
		[Address(RVA = "0xCEAA44", Offset = "0xCEAA44", VA = "0xCEAA44")]
		public void Register(InteractiveMaterialHint hint)
		{
		}

		[Token(Token = "0x6000A5B")]
		[Address(RVA = "0xCEAD58", Offset = "0xCEAD58", VA = "0xCEAD58")]
		public void SetMaxParticleSize(float size)
		{
		}

		[Token(Token = "0x6000A5C")]
		[Address(RVA = "0xCEACF0", Offset = "0xCEACF0", VA = "0xCEACF0")]
		[IteratorStateMachine(typeof(<RegisterRoutine>d__35))]
		private IEnumerator RegisterRoutine()
		{
			return null;
		}

		[Token(Token = "0x6000A5D")]
		[Address(RVA = "0xCEADF4", Offset = "0xCEADF4", VA = "0xCEADF4")]
		public void Unregister(InteractiveMaterialHint hint, bool destroy = true)
		{
		}

		[Token(Token = "0x6000A5E")]
		[Address(RVA = "0xCEB2F4", Offset = "0xCEB2F4", VA = "0xCEB2F4")]
		private void CheckNextHint()
		{
		}

		[Token(Token = "0x6000A5F")]
		[Address(RVA = "0xCEB3E8", Offset = "0xCEB3E8", VA = "0xCEB3E8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A60")]
		[Address(RVA = "0xCEC604", Offset = "0xCEC604", VA = "0xCEC604")]
		public void LockHintSoundTimer(Component ob)
		{
		}

		[Token(Token = "0x6000A61")]
		[Address(RVA = "0xCEC6D8", Offset = "0xCEC6D8", VA = "0xCEC6D8")]
		public void UnlockHintSoundTimer(Component ob, bool playSoundImmediate = false)
		{
		}

		[Token(Token = "0x6000A62")]
		[Address(RVA = "0xCEB3D4", Offset = "0xCEB3D4", VA = "0xCEB3D4")]
		private void RestartHintSoundTimer()
		{
		}

		[Token(Token = "0x6000A63")]
		[Address(RVA = "0xCEC77C", Offset = "0xCEC77C", VA = "0xCEC77C")]
		public void Poof(InteractiveMaterialHint hint)
		{
		}

		[Token(Token = "0x6000A64")]
		[Address(RVA = "0xCEC940", Offset = "0xCEC940", VA = "0xCEC940")]
		[IteratorStateMachine(typeof(<PoofCoroutine>d__43))]
		private IEnumerator PoofCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6000A65")]
		[Address(RVA = "0xCEC9D0", Offset = "0xCEC9D0", VA = "0xCEC9D0")]
		public void ShowTarget(InteractiveMaterialHint hint, bool register = true)
		{
		}

		[Token(Token = "0x6000A66")]
		[Address(RVA = "0xCECDB4", Offset = "0xCECDB4", VA = "0xCECDB4")]
		private void CreateParticle()
		{
		}

		[Token(Token = "0x6000A67")]
		[Address(RVA = "0xCED128", Offset = "0xCED128", VA = "0xCED128")]
		public HintingSystemController()
		{
		}
	}
	[Token(Token = "0x2000245")]
	public class HintSoundLock : MonoBehaviour
	{
		[Token(Token = "0x4000B67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool playImmediateOnUnlock;

		[Token(Token = "0x6000A76")]
		[Address(RVA = "0xCEDA50", Offset = "0xCEDA50", VA = "0xCEDA50")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000A77")]
		[Address(RVA = "0xCEDB00", Offset = "0xCEDB00", VA = "0xCEDB00")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000A78")]
		[Address(RVA = "0xCEDBB4", Offset = "0xCEDBB4", VA = "0xCEDBB4")]
		public HintSoundLock()
		{
		}
	}
	[Token(Token = "0x2000246")]
	public class DayNightCycle : MonoBehaviour
	{
		[Token(Token = "0x6000A79")]
		[Address(RVA = "0xCEDBBC", Offset = "0xCEDBBC", VA = "0xCEDBBC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A7A")]
		[Address(RVA = "0xCEDBC0", Offset = "0xCEDBC0", VA = "0xCEDBC0")]
		public void StartCycle()
		{
		}

		[Token(Token = "0x6000A7B")]
		[Address(RVA = "0xCEDC5C", Offset = "0xCEDC5C", VA = "0xCEDC5C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A7C")]
		[Address(RVA = "0xCEDC60", Offset = "0xCEDC60", VA = "0xCEDC60")]
		public DayNightCycle()
		{
		}
	}
	[Token(Token = "0x2000247")]
	public class Horseshoe : MonoBehaviour
	{
		[Token(Token = "0x4000B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HorseshoeGoHome gohomeTrigger;

		[Token(Token = "0x6000A7D")]
		[Address(RVA = "0xCEDC68", Offset = "0xCEDC68", VA = "0xCEDC68")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A7E")]
		[Address(RVA = "0xCEDC6C", Offset = "0xCEDC6C", VA = "0xCEDC6C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A7F")]
		[Address(RVA = "0xCEDC70", Offset = "0xCEDC70", VA = "0xCEDC70")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000A80")]
		[Address(RVA = "0xCEDF20", Offset = "0xCEDF20", VA = "0xCEDF20", Slot = "4")]
		protected virtual void OnAttachedToHand(Hand hand)
		{
		}

		[Token(Token = "0x6000A81")]
		[Address(RVA = "0xCEDF9C", Offset = "0xCEDF9C", VA = "0xCEDF9C")]
		public Horseshoe()
		{
		}
	}
	[Token(Token = "0x2000248")]
	public class HorseshoeGoHome : MonoBehaviour
	{
		[Token(Token = "0x4000B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform home;

		[Token(Token = "0x4000B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Horseshoe horseshoe;

		[Token(Token = "0x4000B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool insideTheTrigger;

		[Token(Token = "0x4000B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEvent horseshoeThrown;

		[Token(Token = "0x4000B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool triggered;

		[Token(Token = "0x6000A82")]
		[Address(RVA = "0xCEDD28", Offset = "0xCEDD28", VA = "0xCEDD28")]
		public void CheckHit()
		{
		}

		[Token(Token = "0x6000A83")]
		[Address(RVA = "0xCEDFA4", Offset = "0xCEDFA4", VA = "0xCEDFA4")]
		private void OnTriggerStay(Collider other)
		{
		}

		[Token(Token = "0x6000A84")]
		[Address(RVA = "0xCEDFA8", Offset = "0xCEDFA8", VA = "0xCEDFA8")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000A85")]
		[Address(RVA = "0xCEE0C0", Offset = "0xCEE0C0", VA = "0xCEE0C0")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000A86")]
		[Address(RVA = "0xCEE1D4", Offset = "0xCEE1D4", VA = "0xCEE1D4")]
		public HorseshoeGoHome()
		{
		}
	}
	[Token(Token = "0x2000249")]
	public class CollisionHaptics : MonoBehaviour
	{
		[Token(Token = "0x200024A")]
		[CompilerGenerated]
		private sealed class <TriggerHaptic>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CollisionHaptics <>4__this;

			[Token(Token = "0x4000B77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float amount;

			[Token(Token = "0x17000119")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000A8E")]
				[Address(RVA = "0xCEE54C", Offset = "0xCEE54C", VA = "0xCEE54C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700011A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000A90")]
				[Address(RVA = "0xCEE594", Offset = "0xCEE594", VA = "0xCEE594", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000A8B")]
			[Address(RVA = "0xCEE410", Offset = "0xCEE410", VA = "0xCEE410")]
			[DebuggerHidden]
			public <TriggerHaptic>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6000A8C")]
			[Address(RVA = "0xCEE478", Offset = "0xCEE478", VA = "0xCEE478", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000A8D")]
			[Address(RVA = "0xCEE47C", Offset = "0xCEE47C", VA = "0xCEE47C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000A8F")]
			[Address(RVA = "0xCEE554", Offset = "0xCEE554", VA = "0xCEE554", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private HandAttachBehaviour attach;

		[Token(Token = "0x4000B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve hapticIntensity;

		[Token(Token = "0x4000B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float maxVelocity;

		[Token(Token = "0x4000B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float maxDuration;

		[Token(Token = "0x4000B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float maxIntensity;

		[Token(Token = "0x4000B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float maxFrequency;

		[Token(Token = "0x6000A87")]
		[Address(RVA = "0xCEE1DC", Offset = "0xCEE1DC", VA = "0xCEE1DC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A88")]
		[Address(RVA = "0xCEE22C", Offset = "0xCEE22C", VA = "0xCEE22C")]
		public void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000A89")]
		[Address(RVA = "0xCEE398", Offset = "0xCEE398", VA = "0xCEE398")]
		[IteratorStateMachine(typeof(<TriggerHaptic>d__8))]
		private IEnumerator TriggerHaptic(float amount)
		{
			return null;
		}

		[Token(Token = "0x6000A8A")]
		[Address(RVA = "0xCEE438", Offset = "0xCEE438", VA = "0xCEE438")]
		public CollisionHaptics()
		{
		}
	}
	[Token(Token = "0x200024B")]
	public class DropLocation : MonoBehaviour
	{
		[Token(Token = "0x4000B78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEvent StartEffect;

		[Token(Token = "0x4000B79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEvent EndEffect;

		[Token(Token = "0x4000B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<LockToPoint> lockObjects;

		[Token(Token = "0x6000A91")]
		[Address(RVA = "0xCEE59C", Offset = "0xCEE59C", VA = "0xCEE59C")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000A92")]
		[Address(RVA = "0xCEE668", Offset = "0xCEE668", VA = "0xCEE668")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000A93")]
		[Address(RVA = "0xCEE730", Offset = "0xCEE730", VA = "0xCEE730")]
		public DropLocation()
		{
		}
	}
	[Token(Token = "0x200024C")]
	public class DropLocationLTP : MonoBehaviour
	{
		[Token(Token = "0x4000B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LockToPoint specificTarget;

		[Token(Token = "0x4000B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEvent LockedToPoint;

		[Token(Token = "0x4000B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool parentOnLock;

		[Token(Token = "0x4000B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool permanentAttach;

		[Token(Token = "0x4000B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Collider lerpCollider;

		[Token(Token = "0x4000B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("An alternate position to lerp and lock to. If not assigned, will use transform")]
		[SerializeField]
		private Transform targetPoint;

		[Token(Token = "0x4000B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private float mlerpDistance;

		[Token(Token = "0x4000B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform originalPoint;

		[Token(Token = "0x4000B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int enterCount;

		[Token(Token = "0x4000B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool locked;

		[Token(Token = "0x4000B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody body;

		[Token(Token = "0x4000B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Interactable interactable;

		[Token(Token = "0x4000B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private LockToPoint attachedObject;

		[Token(Token = "0x1700011B")]
		public GameObject AttachedObject
		{
			[Token(Token = "0x6000A94")]
			[Address(RVA = "0xCEE7B4", Offset = "0xCEE7B4", VA = "0xCEE7B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A95")]
		[Address(RVA = "0xCEE838", Offset = "0xCEE838", VA = "0xCEE838")]
		public bool GetInterpolation(ref Vector3 position, ref Quaternion rotation)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A96")]
		[Address(RVA = "0xCEEA58", Offset = "0xCEEA58", VA = "0xCEEA58")]
		public bool WouldInterpolateAtPosition(Vector3 position)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A97")]
		[Address(RVA = "0xCEEB34", Offset = "0xCEEB34", VA = "0xCEEB34")]
		public bool Attach(LockToPoint ltp)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A98")]
		[Address(RVA = "0xCEECC8", Offset = "0xCEECC8", VA = "0xCEECC8")]
		public bool Detatch(LockToPoint ltp)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A99")]
		[Address(RVA = "0xCEEBCC", Offset = "0xCEEBCC", VA = "0xCEEBCC")]
		public bool CanAttach(LockToPoint ltp)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A9A")]
		[Address(RVA = "0xCEED74", Offset = "0xCEED74", VA = "0xCEED74")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A9B")]
		[Address(RVA = "0xCEEDEC", Offset = "0xCEEDEC", VA = "0xCEEDEC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A9C")]
		[Address(RVA = "0xCEEEFC", Offset = "0xCEEEFC", VA = "0xCEEEFC")]
		public DropLocationLTP()
		{
		}
	}
	[Token(Token = "0x200024D")]
	public class DropObjects : MonoBehaviour
	{
		[Token(Token = "0x4000B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int objectCount;

		[Token(Token = "0x4000B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEvent filledEvents;

		[Token(Token = "0x4000B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string requiredTag;

		[Token(Token = "0x4000B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool triggered;

		[Token(Token = "0x4000B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int currentObjectCount;

		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0xCEEF18", Offset = "0xCEEF18", VA = "0xCEEF18")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0xCEEF98", Offset = "0xCEEF98", VA = "0xCEEF98")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000A9F")]
		[Address(RVA = "0xCEEFEC", Offset = "0xCEEFEC", VA = "0xCEEFEC")]
		public DropObjects()
		{
		}
	}
	[Token(Token = "0x200024E")]
	public class IndexButton : MonoBehaviour
	{
		[Token(Token = "0x4000B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform movingPart;

		[Token(Token = "0x4000B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Collider buttonCollider;

		[Token(Token = "0x4000B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 localMoveDistance;

		[Token(Token = "0x4000B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(0f, 1f)]
		public float engageAtPercent;

		[Token(Token = "0x4000B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 1f)]
		public float disengageAtPercent;

		[Token(Token = "0x4000B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public HandEvent onButtonDown;

		[Token(Token = "0x4000B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public HandEvent onButtonUp;

		[Token(Token = "0x4000B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public HandEvent onButtonIsPressed;

		[Token(Token = "0x4000B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool engaged;

		[Token(Token = "0x4000B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		public bool buttonDown;

		[Token(Token = "0x4000B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		public bool buttonUp;

		[Token(Token = "0x4000B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 startPosition;

		[Token(Token = "0x4000B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 endPosition;

		[Token(Token = "0x4000B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float enteredDistance;

		[Token(Token = "0x4000B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool hovering;

		[Token(Token = "0x4000B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Hand lastHoveredHand;

		[Token(Token = "0x6000AA0")]
		[Address(RVA = "0xCEF054", Offset = "0xCEF054", VA = "0xCEF054")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AA1")]
		[Address(RVA = "0xCEF144", Offset = "0xCEF144", VA = "0xCEF144")]
		private void HandHoverUpdate(Hand hand)
		{
		}

		[Token(Token = "0x6000AA2")]
		[Address(RVA = "0xCEF4A0", Offset = "0xCEF4A0", VA = "0xCEF4A0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000AA3")]
		[Address(RVA = "0xCEF3D8", Offset = "0xCEF3D8", VA = "0xCEF3D8")]
		private void InvokeEvents(bool wasEngaged, bool isEngaged)
		{
		}

		[Token(Token = "0x6000AA4")]
		[Address(RVA = "0xCEF4F4", Offset = "0xCEF4F4", VA = "0xCEF4F4")]
		public IndexButton()
		{
		}
	}
	[Token(Token = "0x200024F")]
	public class PoserChangeTrigger : MonoBehaviour
	{
		[Token(Token = "0x4000B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float radius;

		[Token(Token = "0x4000B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HandPose pose;

		[Token(Token = "0x4000B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Hand> hands;

		[Token(Token = "0x6000AA5")]
		[Address(RVA = "0xCEF514", Offset = "0xCEF514", VA = "0xCEF514")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000AA6")]
		[Address(RVA = "0xCEF58C", Offset = "0xCEF58C", VA = "0xCEF58C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000AA7")]
		[Address(RVA = "0xCEF79C", Offset = "0xCEF79C", VA = "0xCEF79C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000AA8")]
		[Address(RVA = "0xCEF938", Offset = "0xCEF938", VA = "0xCEF938")]
		public PoserChangeTrigger()
		{
		}
	}
	[Token(Token = "0x2000250")]
	public class PositionConstrainer : MonoBehaviour
	{
		[Token(Token = "0x2000251")]
		[CompilerGenerated]
		private sealed class <Drift>d__29 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000BB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000BB6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000BB7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool inAir;

			[Token(Token = "0x4000BB8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public PositionConstrainer <>4__this;

			[Token(Token = "0x4000BB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float delayTime;

			[Token(Token = "0x4000BBA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private Vector3 <refVelocity>5__2;

			[Token(Token = "0x4000BBB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Vector3 <refAngular>5__3;

			[Token(Token = "0x4000BBC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private float <lp>5__4;

			[Token(Token = "0x4000BBD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private Vector3 <startPos>5__5;

			[Token(Token = "0x4000BBE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			private Quaternion <startRot>5__6;

			[Token(Token = "0x4000BBF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			private Vector3 <returnPos>5__7;

			[Token(Token = "0x4000BC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			private Quaternion <returnRot>5__8;

			[Token(Token = "0x1700011C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000AB9")]
				[Address(RVA = "0xCF1D84", Offset = "0xCF1D84", VA = "0xCF1D84", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700011D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000ABB")]
				[Address(RVA = "0xCF1DCC", Offset = "0xCF1DCC", VA = "0xCF1DCC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000AB6")]
			[Address(RVA = "0xCF1584", Offset = "0xCF1584", VA = "0xCF1584")]
			[DebuggerHidden]
			public <Drift>d__29(int <>1__state)
			{
			}

			[Token(Token = "0x6000AB7")]
			[Address(RVA = "0xCF15AC", Offset = "0xCF15AC", VA = "0xCF15AC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000AB8")]
			[Address(RVA = "0xCF15B0", Offset = "0xCF15B0", VA = "0xCF15B0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000ABA")]
			[Address(RVA = "0xCF1D8C", Offset = "0xCF1D8C", VA = "0xCF1D8C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float moveSpeed;

		[Token(Token = "0x4000BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float distThreshold;

		[Token(Token = "0x4000BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float distThresholdAir;

		[Token(Token = "0x4000BA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float delayInAir;

		[Token(Token = "0x4000BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float delayOnContact;

		[Token(Token = "0x4000BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float deceleration;

		[Token(Token = "0x4000BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve easing;

		[Token(Token = "0x4000BA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Space(15f)]
		public DropLocation dropLoc;

		[Token(Token = "0x4000BA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Collider[] extraColliders;

		[Token(Token = "0x4000BA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool targetDrop;

		[Token(Token = "0x4000BAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Space(15f)]
		public UnityEvent arrived;

		[Token(Token = "0x4000BAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform home;

		[Token(Token = "0x4000BAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 homePosition;

		[Token(Token = "0x4000BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Quaternion homeRotation;

		[Token(Token = "0x4000BAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Rigidbody body;

		[Token(Token = "0x4000BAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<Collider> coll;

		[Token(Token = "0x4000BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Coroutine driftRoutine;

		[Token(Token = "0x4000BB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Hand steamHand;

		[Token(Token = "0x4000BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private bool startGrav;

		[Token(Token = "0x4000BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		[HideInInspector]
		public bool grabbed;

		[Token(Token = "0x4000BB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private int dropAreaCount;

		[Token(Token = "0x6000AA9")]
		[Address(RVA = "0xCEF9C0", Offset = "0xCEF9C0", VA = "0xCEF9C0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000AAA")]
		[Address(RVA = "0xCEFC00", Offset = "0xCEFC00", VA = "0xCEFC00")]
		public void SetHomeLocation()
		{
		}

		[Token(Token = "0x6000AAB")]
		[Address(RVA = "0xCEFC20", Offset = "0xCEFC20", VA = "0xCEFC20")]
		public void SetHomeLocation(Transform location)
		{
		}

		[Token(Token = "0x6000AAC")]
		[Address(RVA = "0xCEFCA8", Offset = "0xCEFCA8", VA = "0xCEFCA8")]
		public void SetHomeLocation(Vector3 position, Quaternion rotation)
		{
		}

		[Token(Token = "0x6000AAD")]
		[Address(RVA = "0xCEFE24", Offset = "0xCEFE24", VA = "0xCEFE24")]
		public void InstantDrift()
		{
		}

		[Token(Token = "0x6000AAE")]
		[Address(RVA = "0xCEFEF8", Offset = "0xCEFEF8", VA = "0xCEFEF8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000AAF")]
		[Address(RVA = "0xCEFF90", Offset = "0xCEFF90", VA = "0xCEFF90")]
		private void OnAttachedToHand(Hand hand)
		{
		}

		[Token(Token = "0x6000AB0")]
		[Address(RVA = "0xCF00C8", Offset = "0xCF00C8", VA = "0xCF00C8")]
		private void OnDetachedFromHand(Hand hand)
		{
		}

		[Token(Token = "0x6000AB1")]
		[Address(RVA = "0xCEFE6C", Offset = "0xCEFE6C", VA = "0xCEFE6C")]
		[IteratorStateMachine(typeof(<Drift>d__29))]
		private IEnumerator Drift(bool inAir, float delayTime)
		{
			return null;
		}

		[Token(Token = "0x6000AB2")]
		[Address(RVA = "0xCF01BC", Offset = "0xCF01BC", VA = "0xCF01BC")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000AB3")]
		[Address(RVA = "0xCF0364", Offset = "0xCF0364", VA = "0xCF0364")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000AB4")]
		[Address(RVA = "0xCF0404", Offset = "0xCF0404", VA = "0xCF0404")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000AB5")]
		[Address(RVA = "0xCF04A4", Offset = "0xCF04A4", VA = "0xCF04A4")]
		public PositionConstrainer()
		{
		}
	}
	[Token(Token = "0x2000252")]
	public class Tripod : MonoBehaviour
	{
		[Token(Token = "0x4000BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEvent SpawnComplete;

		[Token(Token = "0x4000BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEvent DespawnComplete;

		[Token(Token = "0x4000BC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform dropLocation;

		[Token(Token = "0x4000BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform legsScaler;

		[Token(Token = "0x4000BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool spawnOnStart;

		[Token(Token = "0x4000BC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool resizeOnSpawn;

		[Token(Token = "0x4000BC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float defaultHeight;

		[Token(Token = "0x6000ABC")]
		[Address(RVA = "0xCF1DD4", Offset = "0xCF1DD4", VA = "0xCF1DD4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000ABD")]
		[Address(RVA = "0xCF2190", Offset = "0xCF2190", VA = "0xCF2190")]
		public void SizeToEyeLevel(float interpolate)
		{
		}

		[Token(Token = "0x6000ABE")]
		[Address(RVA = "0xCF24D8", Offset = "0xCF24D8", VA = "0xCF24D8")]
		public void SetEyeLevel(float eyeLevel)
		{
		}

		[Token(Token = "0x6000ABF")]
		[Address(RVA = "0xCF21F8", Offset = "0xCF21F8", VA = "0xCF21F8")]
		public void SetEyeLevel(float eyeLevel, float interpolate)
		{
		}

		[Token(Token = "0x6000AC0")]
		[Address(RVA = "0xCF24E0", Offset = "0xCF24E0", VA = "0xCF24E0")]
		public void AnimateEyeLevel(float duration)
		{
		}

		[Token(Token = "0x6000AC1")]
		[Address(RVA = "0xCF1F20", Offset = "0xCF1F20", VA = "0xCF1F20")]
		public void Spawn()
		{
		}

		[Token(Token = "0x6000AC2")]
		[Address(RVA = "0xCF2648", Offset = "0xCF2648", VA = "0xCF2648")]
		public void Despawn()
		{
		}

		[Token(Token = "0x6000AC3")]
		[Address(RVA = "0xCF2768", Offset = "0xCF2768", VA = "0xCF2768")]
		private void OnSpawnComplete()
		{
		}

		[Token(Token = "0x6000AC4")]
		[Address(RVA = "0xCF277C", Offset = "0xCF277C", VA = "0xCF277C")]
		private void OnDespawnComplete()
		{
		}

		[Token(Token = "0x6000AC5")]
		[Address(RVA = "0xCF27B8", Offset = "0xCF27B8", VA = "0xCF27B8")]
		public Tripod()
		{
		}
	}
	[Token(Token = "0x2000254")]
	public class FencePost : MonoBehaviour
	{
		[Token(Token = "0x4000BCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEvent hitEvent;

		[Token(Token = "0x4000BCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Space(15f)]
		public float hitSpeed;

		[Token(Token = "0x4000BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float hitMultiplier;

		[Token(Token = "0x4000BCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float distanceForHitEvent;

		[Token(Token = "0x4000BD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 stakePosition;

		[Token(Token = "0x4000BD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool grounded;

		[Token(Token = "0x4000BD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Collider collider;

		[Token(Token = "0x4000BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float lastCollideTime;

		[Token(Token = "0x14000009")]
		private static event Action PostGrabbed
		{
			[Token(Token = "0x6000AC9")]
			[Address(RVA = "0xCF27F0", Offset = "0xCF27F0", VA = "0xCF27F0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000ACA")]
			[Address(RVA = "0xCF28A8", Offset = "0xCF28A8", VA = "0xCF28A8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400000A")]
		private static event Action PostPlanted
		{
			[Token(Token = "0x6000ACB")]
			[Address(RVA = "0xCF2960", Offset = "0xCF2960", VA = "0xCF2960")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000ACC")]
			[Address(RVA = "0xCF2A1C", Offset = "0xCF2A1C", VA = "0xCF2A1C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000ACD")]
		[Address(RVA = "0xCF2AD8", Offset = "0xCF2AD8", VA = "0xCF2AD8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000ACE")]
		[Address(RVA = "0xCF2C04", Offset = "0xCF2C04", VA = "0xCF2C04")]
		private void FencePost_PostGrabbed()
		{
		}

		[Token(Token = "0x6000ACF")]
		[Address(RVA = "0xCF2D80", Offset = "0xCF2D80", VA = "0xCF2D80")]
		private void FencePost_Planted()
		{
		}

		[Token(Token = "0x6000AD0")]
		[Address(RVA = "0xCF2D84", Offset = "0xCF2D84", VA = "0xCF2D84")]
		private void OnAttachedToHand(Hand hand)
		{
		}

		[Token(Token = "0x6000AD1")]
		[Address(RVA = "0xCF2DE8", Offset = "0xCF2DE8", VA = "0xCF2DE8")]
		private void OnAttached()
		{
		}

		[Token(Token = "0x6000AD2")]
		[Address(RVA = "0xCF2DEC", Offset = "0xCF2DEC", VA = "0xCF2DEC")]
		public void StakeInGround()
		{
		}

		[Token(Token = "0x6000AD3")]
		[Address(RVA = "0xCF2E90", Offset = "0xCF2E90", VA = "0xCF2E90")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000AD4")]
		[Address(RVA = "0xCF32DC", Offset = "0xCF32DC", VA = "0xCF32DC")]
		public FencePost()
		{
		}
	}
	[Token(Token = "0x2000255")]
	public class InteractiveMaterialHint : MonoBehaviour
	{
		[Token(Token = "0x2000256")]
		[CompilerGenerated]
		private sealed class <Start>d__17 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000BE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000BE3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000BE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public InteractiveMaterialHint <>4__this;

			[Token(Token = "0x1700011F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000AE7")]
				[Address(RVA = "0xCF3DE8", Offset = "0xCF3DE8", VA = "0xCF3DE8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000120")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000AE9")]
				[Address(RVA = "0xCF3E30", Offset = "0xCF3E30", VA = "0xCF3E30", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000AE4")]
			[Address(RVA = "0xCF33C0", Offset = "0xCF33C0", VA = "0xCF33C0")]
			[DebuggerHidden]
			public <Start>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x6000AE5")]
			[Address(RVA = "0xCF3C9C", Offset = "0xCF3C9C", VA = "0xCF3C9C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000AE6")]
			[Address(RVA = "0xCF3CA0", Offset = "0xCF3CA0", VA = "0xCF3CA0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000AE8")]
			[Address(RVA = "0xCF3DF0", Offset = "0xCF3DF0", VA = "0xCF3DF0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool hintOnStart;

		[Token(Token = "0x4000BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform hintTransform;

		[Token(Token = "0x4000BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform hintTarget;

		[Token(Token = "0x4000BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject rendererObject;

		[Token(Token = "0x4000BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Interactable hoverEvents;

		[Token(Token = "0x4000BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GlowingObjectsList highlighList;

		[Token(Token = "0x4000BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private ParticleSystem hintSystem;

		[Token(Token = "0x4000BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private ParticleSystemForceField hoverSystem;

		[Token(Token = "0x4000BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ParticleSystemForceField forceSystem;

		[Token(Token = "0x4000BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int handCount;

		[Token(Token = "0x4000BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool showTarget;

		[Token(Token = "0x4000BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		[Header("For Outlining Child Object")]
		public bool outlineInChild;

		[Token(Token = "0x4000BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject childOutline;

		[Token(Token = "0x1700011E")]
		public bool isHintMaterial
		{
			[Token(Token = "0x6000AD5")]
			[Address(RVA = "0xCF3344", Offset = "0xCF3344", VA = "0xCF3344")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000AD6")]
			[Address(RVA = "0xCF334C", Offset = "0xCF334C", VA = "0xCF334C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000AD7")]
		[Address(RVA = "0xCF3358", Offset = "0xCF3358", VA = "0xCF3358")]
		[IteratorStateMachine(typeof(<Start>d__17))]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x6000AD8")]
		[Address(RVA = "0xCF33E8", Offset = "0xCF33E8", VA = "0xCF33E8")]
		private void ParticleHoverBegin()
		{
		}

		[Token(Token = "0x6000AD9")]
		[Address(RVA = "0xCF34FC", Offset = "0xCF34FC", VA = "0xCF34FC")]
		private void ParticleHoverEnd()
		{
		}

		[Token(Token = "0x6000ADA")]
		[Address(RVA = "0xCF3614", Offset = "0xCF3614", VA = "0xCF3614")]
		private void FindHoverEvents()
		{
		}

		[Token(Token = "0x6000ADB")]
		[Address(RVA = "0xCF3878", Offset = "0xCF3878", VA = "0xCF3878")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000ADC")]
		[Address(RVA = "0xCF3A40", Offset = "0xCF3A40", VA = "0xCF3A40")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000ADD")]
		[Address(RVA = "0xCF3BD8", Offset = "0xCF3BD8", VA = "0xCF3BD8")]
		public void SetMaxParticleSize(float size)
		{
		}

		[Token(Token = "0x6000ADE")]
		[Address(RVA = "0xCF3914", Offset = "0xCF3914", VA = "0xCF3914")]
		public void ChangeToHintMaterial()
		{
		}

		[Token(Token = "0x6000ADF")]
		[Address(RVA = "0xCF3C38", Offset = "0xCF3C38", VA = "0xCF3C38")]
		public void Poof()
		{
		}

		[Token(Token = "0x6000AE0")]
		[Address(RVA = "0xCF39E0", Offset = "0xCF39E0", VA = "0xCF39E0")]
		public void ChangeToDefaultMaterial()
		{
		}

		[Token(Token = "0x6000AE1")]
		[Address(RVA = "0xCF3C90", Offset = "0xCF3C90", VA = "0xCF3C90")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000AE2")]
		[Address(RVA = "0xCF2CA8", Offset = "0xCF2CA8", VA = "0xCF2CA8")]
		public void ShowTarget()
		{
		}

		[Token(Token = "0x6000AE3")]
		[Address(RVA = "0xCF3C94", Offset = "0xCF3C94", VA = "0xCF3C94")]
		public InteractiveMaterialHint()
		{
		}
	}
	[Token(Token = "0x2000257")]
	public class LinearMappingToAnimation : MonoBehaviour
	{
		[Token(Token = "0x4000BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LinearMapping linearMapping;

		[Token(Token = "0x4000BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Animator animator;

		[Token(Token = "0x4000BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float animationScale;

		[Token(Token = "0x4000BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string animationName;

		[Token(Token = "0x6000AEA")]
		[Address(RVA = "0xCF3E38", Offset = "0xCF3E38", VA = "0xCF3E38")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AEB")]
		[Address(RVA = "0xCF3E3C", Offset = "0xCF3E3C", VA = "0xCF3E3C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000AEC")]
		[Address(RVA = "0xCF3F04", Offset = "0xCF3F04", VA = "0xCF3F04")]
		public LinearMappingToAnimation()
		{
		}
	}
	[Token(Token = "0x2000258")]
	public class LocaleOptionButton : MonoBehaviour
	{
		[Token(Token = "0x2000259")]
		[CompilerGenerated]
		private sealed class <CoInit>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000BEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000BEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000BF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LocaleOptionButton <>4__this;

			[Token(Token = "0x17000121")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000AF9")]
				[Address(RVA = "0xCF4748", Offset = "0xCF4748", VA = "0xCF4748", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000122")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000AFB")]
				[Address(RVA = "0xCF4790", Offset = "0xCF4790", VA = "0xCF4790", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000AF6")]
			[Address(RVA = "0xCF3F94", Offset = "0xCF3F94", VA = "0xCF3F94")]
			[DebuggerHidden]
			public <CoInit>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x6000AF7")]
			[Address(RVA = "0xCF436C", Offset = "0xCF436C", VA = "0xCF436C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000AF8")]
			[Address(RVA = "0xCF4370", Offset = "0xCF4370", VA = "0xCF4370", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000AFA")]
			[Address(RVA = "0xCF4750", Offset = "0xCF4750", VA = "0xCF4750", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200025A")]
		[CompilerGenerated]
		private sealed class <ChangeHighlight>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000BF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000BF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000BF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LocaleOptionButton <>4__this;

			[Token(Token = "0x4000BF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float highlight;

			[Token(Token = "0x4000BF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <current>5__2;

			[Token(Token = "0x4000BF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <duration>5__3;

			[Token(Token = "0x4000BF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <t>5__4;

			[Token(Token = "0x17000123")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000AFF")]
				[Address(RVA = "0xCF48D4", Offset = "0xCF48D4", VA = "0xCF48D4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000124")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000B01")]
				[Address(RVA = "0xCF491C", Offset = "0xCF491C", VA = "0xCF491C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000AFC")]
			[Address(RVA = "0xCF42B0", Offset = "0xCF42B0", VA = "0xCF42B0")]
			[DebuggerHidden]
			public <ChangeHighlight>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x6000AFD")]
			[Address(RVA = "0xCF4798", Offset = "0xCF4798", VA = "0xCF4798", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000AFE")]
			[Address(RVA = "0xCF479C", Offset = "0xCF479C", VA = "0xCF479C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000B00")]
			[Address(RVA = "0xCF48DC", Offset = "0xCF48DC", VA = "0xCF48DC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string localeCode;

		[Token(Token = "0x4000BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool selected;

		[Token(Token = "0x4000BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Renderer renderer;

		[Token(Token = "0x4000BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private MaterialPropertyBlock props;

		[Token(Token = "0x4000BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Locale locale;

		[Token(Token = "0x6000AED")]
		[Address(RVA = "0xCF3F0C", Offset = "0xCF3F0C", VA = "0xCF3F0C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000AEE")]
		[Address(RVA = "0xCF3F2C", Offset = "0xCF3F2C", VA = "0xCF3F2C")]
		[IteratorStateMachine(typeof(<CoInit>d__6))]
		private IEnumerator CoInit()
		{
			return null;
		}

		[Token(Token = "0x6000AEF")]
		[Address(RVA = "0xCF3FBC", Offset = "0xCF3FBC", VA = "0xCF3FBC")]
		private void OnSelectedLocaleChanged(Locale locale)
		{
		}

		[Token(Token = "0x6000AF0")]
		[Address(RVA = "0xCF412C", Offset = "0xCF412C", VA = "0xCF412C")]
		public void Select()
		{
		}

		[Token(Token = "0x6000AF1")]
		[Address(RVA = "0xCF41B8", Offset = "0xCF41B8", VA = "0xCF41B8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000AF2")]
		[Address(RVA = "0xCF40D4", Offset = "0xCF40D4", VA = "0xCF40D4")]
		public void SetSelected(bool selected)
		{
		}

		[Token(Token = "0x6000AF3")]
		[Address(RVA = "0xCF4238", Offset = "0xCF4238", VA = "0xCF4238")]
		[IteratorStateMachine(typeof(<ChangeHighlight>d__11))]
		private IEnumerator ChangeHighlight(float highlight)
		{
			return null;
		}

		[Token(Token = "0x6000AF4")]
		[Address(RVA = "0xCF42D8", Offset = "0xCF42D8", VA = "0xCF42D8")]
		private void SetHighlight(float lerp)
		{
		}

		[Token(Token = "0x6000AF5")]
		[Address(RVA = "0xCF4364", Offset = "0xCF4364", VA = "0xCF4364")]
		public LocaleOptionButton()
		{
		}
	}
	[Token(Token = "0x200025B")]
	public class MenuBook : MonoBehaviour
	{
		[Token(Token = "0x200025C")]
		public enum BookLanguage
		{
			[Token(Token = "0x4000C05")]
			ENGLIGH,
			[Token(Token = "0x4000C06")]
			FRENCH,
			[Token(Token = "0x4000C07")]
			JAPANESE
		}

		[Serializable]
		[Token(Token = "0x200025D")]
		public class BookPage
		{
			[Token(Token = "0x4000C08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Material mat;

			[Token(Token = "0x4000C09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public LocalizedTexture2D tex;

			[Token(Token = "0x6000B09")]
			[Address(RVA = "0xCF4AD4", Offset = "0xCF4AD4", VA = "0xCF4AD4")]
			public void Init()
			{
			}

			[Token(Token = "0x6000B0A")]
			[Address(RVA = "0xCF4DC8", Offset = "0xCF4DC8", VA = "0xCF4DC8")]
			private void Update(Texture2D tex)
			{
			}

			[Token(Token = "0x6000B0B")]
			[Address(RVA = "0xCF4E24", Offset = "0xCF4E24", VA = "0xCF4E24")]
			public BookPage()
			{
			}
		}

		[Token(Token = "0x4000BF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Animator cover;

		[Token(Token = "0x4000BF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RotatePage previousPage;

		[Token(Token = "0x4000BFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RotatePage secondPage;

		[Token(Token = "0x4000BFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public RotatePage rotatePage;

		[Token(Token = "0x4000BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public RotatePage nextPage;

		[Token(Token = "0x4000BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public BookPodium podium;

		[Token(Token = "0x4000BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform bookContents;

		[Token(Token = "0x4000BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform throwable;

		[Token(Token = "0x4000C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public BookPage[] bookPage;

		[Token(Token = "0x4000C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool initMaterials;

		[Token(Token = "0x4000C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		public bool doNotDestroy;

		[Token(Token = "0x4000C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public BookLanguage bookLanguage;

		[Token(Token = "0x6000B02")]
		[Address(RVA = "0xCF4924", Offset = "0xCF4924", VA = "0xCF4924")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B03")]
		[Address(RVA = "0xCF4AB0", Offset = "0xCF4AB0", VA = "0xCF4AB0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B04")]
		[Address(RVA = "0xCF4A4C", Offset = "0xCF4A4C", VA = "0xCF4A4C")]
		private void InitMaterials()
		{
		}

		[Token(Token = "0x6000B05")]
		[Address(RVA = "0xCF4BC8", Offset = "0xCF4BC8", VA = "0xCF4BC8")]
		public void MakeNonThrowable()
		{
		}

		[Token(Token = "0x6000B06")]
		[Address(RVA = "0xCF4C90", Offset = "0xCF4C90", VA = "0xCF4C90")]
		public void MakeThrowable()
		{
		}

		[Token(Token = "0x6000B07")]
		[Address(RVA = "0xCF4D3C", Offset = "0xCF4D3C", VA = "0xCF4D3C")]
		public void MakeCoverTurnable()
		{
		}

		[Token(Token = "0x6000B08")]
		[Address(RVA = "0xCF4DC0", Offset = "0xCF4DC0", VA = "0xCF4DC0")]
		public MenuBook()
		{
		}
	}
	[Token(Token = "0x200025E")]
	public class MoveRailing : MonoBehaviour
	{
		[Token(Token = "0x4000C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform railing;

		[Token(Token = "0x4000C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 positionOffset;

		[Token(Token = "0x4000C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform randallHands;

		[Token(Token = "0x4000C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float delay;

		[Token(Token = "0x4000C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float startZ;

		[Token(Token = "0x4000C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 handPosition;

		[Token(Token = "0x4000C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 railingPosition;

		[Token(Token = "0x4000C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool moving;

		[Token(Token = "0x4000C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private bool audioStarted;

		[Token(Token = "0x6000B0C")]
		[Address(RVA = "0xCF4E2C", Offset = "0xCF4E2C", VA = "0xCF4E2C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B0D")]
		[Address(RVA = "0xCF4F58", Offset = "0xCF4F58", VA = "0xCF4F58")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000B0E")]
		[Address(RVA = "0xCF4FA8", Offset = "0xCF4FA8", VA = "0xCF4FA8")]
		private void StartMoving()
		{
		}

		[Token(Token = "0x6000B0F")]
		[Address(RVA = "0xCF5038", Offset = "0xCF5038", VA = "0xCF5038")]
		private void FinishMoving()
		{
		}

		[Token(Token = "0x6000B10")]
		[Address(RVA = "0xCF5040", Offset = "0xCF5040", VA = "0xCF5040")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B11")]
		[Address(RVA = "0xCF5268", Offset = "0xCF5268", VA = "0xCF5268")]
		public MoveRailing()
		{
		}
	}
	[Token(Token = "0x200025F")]
	public class Newspapers : MonoBehaviour
	{
		[Token(Token = "0x4000C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool[] newspaper;

		[Token(Token = "0x4000C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float nextStateAdvance;

		[Token(Token = "0x4000C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool stateAdvanced;

		[Token(Token = "0x4000C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEvent complete;

		[Token(Token = "0x6000B12")]
		[Address(RVA = "0xCF5270", Offset = "0xCF5270", VA = "0xCF5270")]
		public void NextState()
		{
		}

		[Token(Token = "0x6000B13")]
		[Address(RVA = "0xCF5298", Offset = "0xCF5298", VA = "0xCF5298")]
		public void HoldingNewspaper()
		{
		}

		[Token(Token = "0x6000B14")]
		[Address(RVA = "0xCF5308", Offset = "0xCF5308", VA = "0xCF5308")]
		public Newspapers()
		{
		}
	}
	[Token(Token = "0x2000260")]
	public class PassportOfficer : MonoBehaviour
	{
		[Token(Token = "0x4000C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform passport;

		[Token(Token = "0x4000C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform passportGrab;

		[Token(Token = "0x4000C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform ticketGrab;

		[Token(Token = "0x4000C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform ticket;

		[Token(Token = "0x4000C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float grabPassportTime;

		[Token(Token = "0x4000C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float grabTicketTime;

		[Token(Token = "0x4000C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float dropTicketTime;

		[Token(Token = "0x4000C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Animator characterAnim;

		[Token(Token = "0x4000C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform leftHand;

		[Token(Token = "0x4000C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform rightHand;

		[Token(Token = "0x4000C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool holdingPassport;

		[Token(Token = "0x4000C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool holdingTicket;

		[Token(Token = "0x6000B15")]
		[Address(RVA = "0xCF5310", Offset = "0xCF5310", VA = "0xCF5310")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B16")]
		[Address(RVA = "0xCF53A4", Offset = "0xCF53A4", VA = "0xCF53A4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B17")]
		[Address(RVA = "0xCF53A8", Offset = "0xCF53A8", VA = "0xCF53A8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B18")]
		[Address(RVA = "0xCF5578", Offset = "0xCF5578", VA = "0xCF5578")]
		public PassportOfficer()
		{
		}
	}
	[Token(Token = "0x2000261")]
	public class PhoneNumberList : MonoBehaviour
	{
		[Token(Token = "0x4000C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioSource[] wrongNumberAudio;

		[Token(Token = "0x4000C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject[] numberInteractions;

		[Token(Token = "0x4000C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractiveMaterialHint paper;

		[Token(Token = "0x4000C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEvent complete;

		[Token(Token = "0x4000C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AudioSource phoneRinging;

		[Token(Token = "0x4000C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AudioSource currentAudio;

		[Token(Token = "0x4000C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int audioIdx;

		[Token(Token = "0x6000B19")]
		[Address(RVA = "0xCF5580", Offset = "0xCF5580", VA = "0xCF5580")]
		public void NextNumber()
		{
		}

		[Token(Token = "0x6000B1A")]
		[Address(RVA = "0xCF5620", Offset = "0xCF5620", VA = "0xCF5620")]
		public void ShowHint()
		{
		}

		[Token(Token = "0x6000B1B")]
		[Address(RVA = "0xCF5704", Offset = "0xCF5704", VA = "0xCF5704")]
		public void WrongNumber()
		{
		}

		[Token(Token = "0x6000B1C")]
		[Address(RVA = "0xCF588C", Offset = "0xCF588C", VA = "0xCF588C")]
		private void StopCurrentAudio()
		{
		}

		[Token(Token = "0x6000B1D")]
		[Address(RVA = "0xCF58C4", Offset = "0xCF58C4", VA = "0xCF58C4")]
		private void RestartWrongNumberAudio()
		{
		}

		[Token(Token = "0x6000B1E")]
		[Address(RVA = "0xCF5A30", Offset = "0xCF5A30", VA = "0xCF5A30")]
		private void FinishedAudio()
		{
		}

		[Token(Token = "0x6000B1F")]
		[Address(RVA = "0xCF5AB0", Offset = "0xCF5AB0", VA = "0xCF5AB0")]
		public PhoneNumberList()
		{
		}
	}
	[Token(Token = "0x2000262")]
	public class PlaceCameraOnTripod : MonoBehaviour
	{
		[Token(Token = "0x4000C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float delay;

		[Token(Token = "0x4000C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform camera;

		[Token(Token = "0x4000C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform tripod;

		[Token(Token = "0x4000C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform placement;

		[Token(Token = "0x6000B20")]
		[Address(RVA = "0xCF5B08", Offset = "0xCF5B08", VA = "0xCF5B08")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B21")]
		[Address(RVA = "0xCF5B58", Offset = "0xCF5B58", VA = "0xCF5B58")]
		public void PlaceOnTripod()
		{
		}

		[Token(Token = "0x6000B22")]
		[Address(RVA = "0xCF5C08", Offset = "0xCF5C08", VA = "0xCF5C08")]
		public void MakeInteractive()
		{
		}

		[Token(Token = "0x6000B23")]
		[Address(RVA = "0xCF5C6C", Offset = "0xCF5C6C", VA = "0xCF5C6C")]
		public PlaceCameraOnTripod()
		{
		}
	}
	[Token(Token = "0x2000263")]
	public class PlaceInHole : MonoBehaviour
	{
		[Token(Token = "0x4000C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float minDistance;

		[Token(Token = "0x4000C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float influence;

		[Token(Token = "0x4000C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float distance;

		[Token(Token = "0x4000C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Collider collider;

		[Token(Token = "0x4000C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody rb;

		[Token(Token = "0x4000C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float inf;

		[Token(Token = "0x4000C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform hole;

		[Token(Token = "0x4000C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float percent;

		[Token(Token = "0x4000C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Renderer renderer;

		[Token(Token = "0x4000C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GameObject proxy;

		[Token(Token = "0x4000C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float realWeight;

		[Token(Token = "0x4000C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private int gameLayer;

		[Token(Token = "0x4000C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public UnityEvent placed;

		[Token(Token = "0x4000C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool falling;

		[Token(Token = "0x4000C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private LockToPoint ltp;

		[Token(Token = "0x6000B24")]
		[Address(RVA = "0xCF5C74", Offset = "0xCF5C74", VA = "0xCF5C74")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B25")]
		[Address(RVA = "0xCF5C78", Offset = "0xCF5C78", VA = "0xCF5C78")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000B26")]
		[Address(RVA = "0xCF5DC4", Offset = "0xCF5DC4", VA = "0xCF5DC4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000B27")]
		[Address(RVA = "0xCF5DC8", Offset = "0xCF5DC8", VA = "0xCF5DC8", Slot = "4")]
		protected virtual void OnAttachedToHand(Hand hand)
		{
		}

		[Token(Token = "0x6000B28")]
		[Address(RVA = "0xCF5F9C", Offset = "0xCF5F9C", VA = "0xCF5F9C", Slot = "5")]
		protected virtual void OnDetachedFromHand(Hand hand)
		{
		}

		[Token(Token = "0x6000B29")]
		[Address(RVA = "0xCF6520", Offset = "0xCF6520", VA = "0xCF6520")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000B2A")]
		[Address(RVA = "0xCF65F8", Offset = "0xCF65F8", VA = "0xCF65F8")]
		private void SetNonkinematic()
		{
		}

		[Token(Token = "0x6000B2B")]
		[Address(RVA = "0xCF6664", Offset = "0xCF6664", VA = "0xCF6664")]
		private void Placed()
		{
		}

		[Token(Token = "0x6000B2C")]
		[Address(RVA = "0xCF66B0", Offset = "0xCF66B0", VA = "0xCF66B0")]
		private void HandAttachedUpdate(Hand hand)
		{
		}

		[Token(Token = "0x6000B2D")]
		[Address(RVA = "0xCF6C6C", Offset = "0xCF6C6C", VA = "0xCF6C6C")]
		public PlaceInHole()
		{
		}
	}
	[Token(Token = "0x2000264")]
	public class PlayBookAudio : MonoBehaviour
	{
		[Token(Token = "0x4000C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool playing;

		[Token(Token = "0x4000C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LinearMapping linearMapping;

		[Token(Token = "0x6000B32")]
		[Address(RVA = "0xCF6C94", Offset = "0xCF6C94", VA = "0xCF6C94")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B33")]
		[Address(RVA = "0xCF6D20", Offset = "0xCF6D20", VA = "0xCF6D20")]
		public PlayBookAudio()
		{
		}
	}
	[Token(Token = "0x2000265")]
	public class PopUpPhoto : MonoBehaviour
	{
		[Token(Token = "0x4000C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float y;

		[Token(Token = "0x4000C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float x;

		[Token(Token = "0x4000C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BookPodium podium;

		[Token(Token = "0x4000C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BookPage bookPage;

		[Token(Token = "0x4000C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Collider[] photos;

		[Token(Token = "0x4000C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float value;

		[Token(Token = "0x4000C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int pageDelta;

		[Token(Token = "0x4000C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool scaleXZ;

		[Token(Token = "0x4000C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public bool ren;

		[Token(Token = "0x4000C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		public bool hint;

		[Token(Token = "0x6000B34")]
		[Address(RVA = "0xCF6D28", Offset = "0xCF6D28", VA = "0xCF6D28")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B35")]
		[Address(RVA = "0xCF6DA4", Offset = "0xCF6DA4", VA = "0xCF6DA4")]
		public void EnablePhotoInteraction()
		{
		}

		[Token(Token = "0x6000B36")]
		[Address(RVA = "0xCF72C4", Offset = "0xCF72C4", VA = "0xCF72C4")]
		public void PickedUp()
		{
		}

		[Token(Token = "0x6000B37")]
		[Address(RVA = "0xCF7368", Offset = "0xCF7368", VA = "0xCF7368")]
		public void PageClosing()
		{
		}

		[Token(Token = "0x6000B38")]
		[Address(RVA = "0xCF7520", Offset = "0xCF7520", VA = "0xCF7520")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B39")]
		[Address(RVA = "0xCF77F0", Offset = "0xCF77F0", VA = "0xCF77F0")]
		public PopUpPhoto()
		{
		}
	}
	[Token(Token = "0x2000266")]
	public class PowerSwitchInteraction : HandAttachBehaviour
	{
		[Token(Token = "0x2000267")]
		public enum Axis_t
		{
			[Token(Token = "0x4000C74")]
			XAxis,
			[Token(Token = "0x4000C75")]
			YAxis,
			[Token(Token = "0x4000C76")]
			ZAxis
		}

		[Token(Token = "0x2000268")]
		[CompilerGenerated]
		private sealed class <HapticPulses>d__46 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000C77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000C78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000C79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Hand hand;

			[Token(Token = "0x4000C7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float flMagnitude;

			[Token(Token = "0x4000C7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public int nCount;

			[Token(Token = "0x4000C7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <nRangeMax>5__2;

			[Token(Token = "0x4000C7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private ushort <i>5__3;

			[Token(Token = "0x17000125")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000B4E")]
				[Address(RVA = "0xCF95E4", Offset = "0xCF95E4", VA = "0xCF95E4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000126")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000B50")]
				[Address(RVA = "0xCF962C", Offset = "0xCF962C", VA = "0xCF962C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000B4B")]
			[Address(RVA = "0xCF7DF4", Offset = "0xCF7DF4", VA = "0xCF7DF4")]
			[DebuggerHidden]
			public <HapticPulses>d__46(int <>1__state)
			{
			}

			[Token(Token = "0x6000B4C")]
			[Address(RVA = "0xCF93AC", Offset = "0xCF93AC", VA = "0xCF93AC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000B4D")]
			[Address(RVA = "0xCF93B0", Offset = "0xCF93B0", VA = "0xCF93B0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000B4F")]
			[Address(RVA = "0xCF95EC", Offset = "0xCF95EC", VA = "0xCF95EC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The axis around which the circular drive will rotate in local space")]
		public Axis_t axisOfRotation;

		[Token(Token = "0x4000C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Child GameObject which has the Collider component to initiate interaction, only needs to be set if there is more than one Collider child")]
		public Collider childCollider;

		[Token(Token = "0x4000C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("A LinearMapping component to drive, if not specified one will be dynamically added to this GameObject")]
		public LinearMapping linearMapping;

		[Token(Token = "0x4000C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("If true, the drive will stay manipulating as long as the button is held down, if false, it will stop if the controller moves out of the collider")]
		public bool hoverLock;

		[Token(Token = "0x4000C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		[Tooltip("If true, the rotation will be limited to [minAngle, maxAngle], if false, the rotation is unlimited")]
		[Header("Limited Rotation")]
		public bool limited;

		[Token(Token = "0x4000C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Vector2 frozenDistanceMinMaxThreshold;

		[Token(Token = "0x4000C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public UnityEvent onFrozenDistanceThreshold;

		[Token(Token = "0x4000C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("If limited is true, the specifies the lower limit, otherwise value is unused")]
		[Header("Limited Rotation Min")]
		public float minAngle;

		[Token(Token = "0x4000C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("If limited, set whether drive will freeze its angle when the min angle is reached")]
		public bool freezeOnMin;

		[Token(Token = "0x4000C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("If limited, event invoked when minAngle is reached")]
		public UnityEvent onMinAngle;

		[Token(Token = "0x4000C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Header("Limited Rotation Max")]
		[Tooltip("If limited is true, the specifies the upper limit, otherwise value is unused")]
		public float maxAngle;

		[Token(Token = "0x4000C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Tooltip("If limited, set whether drive will freeze its angle when the max angle is reached")]
		public bool freezeOnMax;

		[Token(Token = "0x4000C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("If limited, event invoked when maxAngle is reached")]
		public UnityEvent onMaxAngle;

		[Token(Token = "0x4000C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("If limited is true, this forces the starting angle to be startAngle, clamped to [minAngle, maxAngle]")]
		public bool forceStart;

		[Token(Token = "0x4000C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[Tooltip("If limited is true and forceStart is true, the starting angle will be this, clamped to [minAngle, maxAngle]")]
		public float startAngle;

		[Token(Token = "0x4000C58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("If true, the transform of the GameObject this component is on will be rotated accordingly")]
		public bool rotateGameObject;

		[Token(Token = "0x4000C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		[Tooltip("If true, the path of the Hand (red) and the projected value (green) will be drawn")]
		public bool debugPath;

		[Token(Token = "0x4000C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[Tooltip("If debugPath is true, this is the maximum number of GameObjects to create to draw the path")]
		public int dbgPathLimit;

		[Token(Token = "0x4000C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("If not null, the TextMesh will display the linear value and the angular value of this circular drive")]
		public TextMesh debugText;

		[Token(Token = "0x4000C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("The output angle value of the drive in degrees, unlimited will increase or decrease without bound, take the 360 modulus to find number of rotations")]
		public float outAngle;

		[Token(Token = "0x4000C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float snapAngle;

		[Token(Token = "0x4000C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Quaternion start;

		[Token(Token = "0x4000C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Vector3 worldPlaneNormal;

		[Token(Token = "0x4000C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Vector3 localPlaneNormal;

		[Token(Token = "0x4000C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Vector3 lastHandProjected;

		[Token(Token = "0x4000C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private Color red;

		[Token(Token = "0x4000C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private Color green;

		[Token(Token = "0x4000C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private GameObject[] dbgHandObjects;

		[Token(Token = "0x4000C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private GameObject[] dbgProjObjects;

		[Token(Token = "0x4000C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private GameObject dbgObjectsParent;

		[Token(Token = "0x4000C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private int dbgObjectCount;

		[Token(Token = "0x4000C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private int dbgObjectIndex;

		[Token(Token = "0x4000C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private bool driving;

		[Token(Token = "0x4000C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private float minMaxAngularThreshold;

		[Token(Token = "0x4000C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private bool frozen;

		[Token(Token = "0x4000C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private float frozenAngle;

		[Token(Token = "0x4000C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Vector3 frozenHandWorldPos;

		[Token(Token = "0x4000C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		private Vector2 frozenSqDistanceMinMaxThreshold;

		[Token(Token = "0x4000C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private Hand handHoverLocked;

		[Token(Token = "0x4000C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public float hapticMultiplier;

		[Token(Token = "0x4000C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private float lastNotch;

		[Token(Token = "0x4000C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public float notchAngle;

		[Token(Token = "0x6000B3A")]
		[Address(RVA = "0xCF7800", Offset = "0xCF7800", VA = "0xCF7800")]
		private void Freeze(Hand hand)
		{
		}

		[Token(Token = "0x6000B3B")]
		[Address(RVA = "0xCF7854", Offset = "0xCF7854", VA = "0xCF7854")]
		private void UnFreeze()
		{
		}

		[Token(Token = "0x6000B3C")]
		[Address(RVA = "0xCF7864", Offset = "0xCF7864", VA = "0xCF7864")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B3D")]
		[Address(RVA = "0xCF7D6C", Offset = "0xCF7D6C", VA = "0xCF7D6C")]
		[IteratorStateMachine(typeof(<HapticPulses>d__46))]
		private IEnumerator HapticPulses(Hand hand, float flMagnitude, int nCount)
		{
			return null;
		}

		[Token(Token = "0x6000B3E")]
		[Address(RVA = "0xCF7E1C", Offset = "0xCF7E1C", VA = "0xCF7E1C", Slot = "7")]
		protected override void Attach(Hand hand)
		{
		}

		[Token(Token = "0x6000B3F")]
		[Address(RVA = "0xCF87F4", Offset = "0xCF87F4", VA = "0xCF87F4", Slot = "8")]
		protected override void Detach(Hand hand)
		{
		}

		[Token(Token = "0x6000B40")]
		[Address(RVA = "0xCF8A70", Offset = "0xCF8A70", VA = "0xCF8A70")]
		private void HandAttachedUpdate(Hand hand)
		{
		}

		[Token(Token = "0x6000B41")]
		[Address(RVA = "0xCF8860", Offset = "0xCF8860", VA = "0xCF8860")]
		private void CheckSnap()
		{
		}

		[Token(Token = "0x6000B42")]
		[Address(RVA = "0xCF7EB0", Offset = "0xCF7EB0", VA = "0xCF7EB0")]
		private Vector3 ComputeToTransformProjected(Transform xForm)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B43")]
		[Address(RVA = "0xCF8A88", Offset = "0xCF8A88", VA = "0xCF8A88")]
		private void DrawDebugPath(Transform xForm, Vector3 toTransformProjected)
		{
		}

		[Token(Token = "0x6000B44")]
		[Address(RVA = "0xCF9084", Offset = "0xCF9084", VA = "0xCF9084")]
		private void UpdateLinearMapping()
		{
		}

		[Token(Token = "0x6000B45")]
		[Address(RVA = "0xCF91E8", Offset = "0xCF91E8", VA = "0xCF91E8")]
		private void UpdateGameObject()
		{
		}

		[Token(Token = "0x6000B46")]
		[Address(RVA = "0xCF90E4", Offset = "0xCF90E4", VA = "0xCF90E4")]
		private void UpdateDebugText()
		{
		}

		[Token(Token = "0x6000B47")]
		[Address(RVA = "0xCF7D4C", Offset = "0xCF7D4C", VA = "0xCF7D4C")]
		private void UpdateAll()
		{
		}

		[Token(Token = "0x6000B48")]
		[Address(RVA = "0xCF92C8", Offset = "0xCF92C8", VA = "0xCF92C8")]
		public void Destroy()
		{
		}

		[Token(Token = "0x6000B49")]
		[Address(RVA = "0xCF8248", Offset = "0xCF8248", VA = "0xCF8248")]
		private void ComputeAngle(Hand hand)
		{
		}

		[Token(Token = "0x6000B4A")]
		[Address(RVA = "0xCF9348", Offset = "0xCF9348", VA = "0xCF9348")]
		public PowerSwitchInteraction()
		{
		}
	}
	[Token(Token = "0x2000269")]
	public class ShowSelectionMenu : MonoBehaviour
	{
		[Token(Token = "0x200026A")]
		[CompilerGenerated]
		private sealed class <StopLaserShow>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000C86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000C87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000C88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ShowSelectionMenu <>4__this;

			[Token(Token = "0x17000127")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000B5A")]
				[Address(RVA = "0xCF9978", Offset = "0xCF9978", VA = "0xCF9978", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000128")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000B5C")]
				[Address(RVA = "0xCF99C0", Offset = "0xCF99C0", VA = "0xCF99C0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000B57")]
			[Address(RVA = "0xCF97E0", Offset = "0xCF97E0", VA = "0xCF97E0")]
			[DebuggerHidden]
			public <StopLaserShow>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x6000B58")]
			[Address(RVA = "0xCF98CC", Offset = "0xCF98CC", VA = "0xCF98CC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000B59")]
			[Address(RVA = "0xCF98D0", Offset = "0xCF98D0", VA = "0xCF98D0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000B5B")]
			[Address(RVA = "0xCF9980", Offset = "0xCF9980", VA = "0xCF9980", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200026B")]
		[CompilerGenerated]
		private sealed class <BeginLaserShow>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000C89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000C8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000C8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ShowSelectionMenu <>4__this;

			[Token(Token = "0x17000129")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000B60")]
				[Address(RVA = "0xCF9D24", Offset = "0xCF9D24", VA = "0xCF9D24", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700012A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000B62")]
				[Address(RVA = "0xCF9D6C", Offset = "0xCF9D6C", VA = "0xCF9D6C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000B5D")]
			[Address(RVA = "0xCF9870", Offset = "0xCF9870", VA = "0xCF9870")]
			[DebuggerHidden]
			public <BeginLaserShow>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x6000B5E")]
			[Address(RVA = "0xCF99C8", Offset = "0xCF99C8", VA = "0xCF99C8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000B5F")]
			[Address(RVA = "0xCF99CC", Offset = "0xCF99CC", VA = "0xCF99CC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000B61")]
			[Address(RVA = "0xCF9D2C", Offset = "0xCF9D2C", VA = "0xCF9D2C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool show;

		[Token(Token = "0x4000C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject uiCameraPrefab;

		[Token(Token = "0x4000C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject selectionMenuPrefab;

		[Token(Token = "0x4000C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameObject selectionMenu;

		[Token(Token = "0x4000C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject uiCamera;

		[Token(Token = "0x4000C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public XRController activeSource;

		[Token(Token = "0x4000C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform handTransform;

		[Token(Token = "0x4000C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool debugEnabled;

		[Token(Token = "0x6000B51")]
		[Address(RVA = "0xCF9634", Offset = "0xCF9634", VA = "0xCF9634")]
		private void Show()
		{
		}

		[Token(Token = "0x6000B52")]
		[Address(RVA = "0xCF972C", Offset = "0xCF972C", VA = "0xCF972C")]
		public void Hide()
		{
		}

		[Token(Token = "0x6000B53")]
		[Address(RVA = "0xCF9778", Offset = "0xCF9778", VA = "0xCF9778")]
		[IteratorStateMachine(typeof(<StopLaserShow>d__10))]
		private IEnumerator StopLaserShow()
		{
			return null;
		}

		[Token(Token = "0x6000B54")]
		[Address(RVA = "0xCF9808", Offset = "0xCF9808", VA = "0xCF9808")]
		[IteratorStateMachine(typeof(<BeginLaserShow>d__11))]
		private IEnumerator BeginLaserShow()
		{
			return null;
		}

		[Token(Token = "0x6000B55")]
		[Address(RVA = "0xCF9898", Offset = "0xCF9898", VA = "0xCF9898")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B56")]
		[Address(RVA = "0xCF98C4", Offset = "0xCF98C4", VA = "0xCF98C4")]
		public ShowSelectionMenu()
		{
		}
	}
	[Token(Token = "0x200026C")]
	public class StateSelectionMenu : MonoBehaviour
	{
		[Token(Token = "0x4000C8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject buttonPrefab;

		[Token(Token = "0x4000C8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform buttonHolder;

		[Token(Token = "0x6000B63")]
		[Address(RVA = "0xCF9D74", Offset = "0xCF9D74", VA = "0xCF9D74")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B64")]
		[Address(RVA = "0xCF9FC4", Offset = "0xCF9FC4", VA = "0xCF9FC4")]
		private void ButtonClicked()
		{
		}

		[Token(Token = "0x6000B65")]
		[Address(RVA = "0xCF9FC8", Offset = "0xCF9FC8", VA = "0xCF9FC8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B66")]
		[Address(RVA = "0xCF9FCC", Offset = "0xCF9FCC", VA = "0xCF9FCC")]
		public StateSelectionMenu()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200026D")]
	public class WhiteboxState
	{
		[Token(Token = "0x4000C8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string stateName;

		[Token(Token = "0x4000C8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject obj;

		[Token(Token = "0x6000B67")]
		[Address(RVA = "0xCF9FD4", Offset = "0xCF9FD4", VA = "0xCF9FD4")]
		public WhiteboxState()
		{
		}
	}
	[Token(Token = "0x200026E")]
	[CreateAssetMenu(menuName = "WhiteboxScene")]
	public class WhiteboxScene : ScriptableObject
	{
		[Token(Token = "0x4000C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public WhiteboxState[] state;

		[Token(Token = "0x6000B68")]
		[Address(RVA = "0xCF9FDC", Offset = "0xCF9FDC", VA = "0xCF9FDC")]
		public WhiteboxScene()
		{
		}
	}
	[Token(Token = "0x200026F")]
	[ExecuteInEditMode]
	public class WhiteboxStateController : MonoBehaviour
	{
		[Token(Token = "0x2000270")]
		[CompilerGenerated]
		private sealed class <DelayedLastStateDeactivation>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000C99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000C9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000C9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WhiteboxStateController <>4__this;

			[Token(Token = "0x1700012B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000B7B")]
				[Address(RVA = "0xCFAE60", Offset = "0xCFAE60", VA = "0xCFAE60", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700012C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000B7D")]
				[Address(RVA = "0xCFAEA8", Offset = "0xCFAEA8", VA = "0xCFAEA8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000B78")]
			[Address(RVA = "0xCFA9C0", Offset = "0xCFA9C0", VA = "0xCFA9C0")]
			[DebuggerHidden]
			public <DelayedLastStateDeactivation>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6000B79")]
			[Address(RVA = "0xCFADAC", Offset = "0xCFADAC", VA = "0xCFADAC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000B7A")]
			[Address(RVA = "0xCFADB0", Offset = "0xCFADB0", VA = "0xCFADB0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000B7C")]
			[Address(RVA = "0xCFAE68", Offset = "0xCFAE68", VA = "0xCFAE68", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000271")]
		[CompilerGenerated]
		private sealed class <DelayedSharedDeactivation>d__16 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000C9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000C9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000C9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WhiteboxStateController <>4__this;

			[Token(Token = "0x1700012D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000B81")]
				[Address(RVA = "0xCFAF64", Offset = "0xCFAF64", VA = "0xCFAF64", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700012E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000B83")]
				[Address(RVA = "0xCFAFAC", Offset = "0xCFAFAC", VA = "0xCFAFAC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000B7E")]
			[Address(RVA = "0xCFA9E8", Offset = "0xCFA9E8", VA = "0xCFA9E8")]
			[DebuggerHidden]
			public <DelayedSharedDeactivation>d__16(int <>1__state)
			{
			}

			[Token(Token = "0x6000B7F")]
			[Address(RVA = "0xCFAEB0", Offset = "0xCFAEB0", VA = "0xCFAEB0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000B80")]
			[Address(RVA = "0xCFAEB4", Offset = "0xCFAEB4", VA = "0xCFAEB4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000B82")]
			[Address(RVA = "0xCFAF6C", Offset = "0xCFAF6C", VA = "0xCFAF6C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dictionary<string, GameObject> stateLookup;

		[Token(Token = "0x4000C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject[] states;

		[Token(Token = "0x4000C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject lastState;

		[Token(Token = "0x4000C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject sharedGameObject;

		[Token(Token = "0x4000C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool updateStates;

		[Token(Token = "0x4000C96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool delayedSharedDeactivation;

		[Token(Token = "0x4000C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Player player;

		[Token(Token = "0x4000C98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		protected GameObject previousSceneChunk;

		[Token(Token = "0x6000B69")]
		[Address(RVA = "0xCF9FE4", Offset = "0xCF9FE4", VA = "0xCF9FE4", Slot = "4")]
		public virtual void Awake()
		{
		}

		[Token(Token = "0x6000B6A")]
		[Address(RVA = "0xCFA13C", Offset = "0xCFA13C", VA = "0xCFA13C", Slot = "5")]
		public virtual void Start()
		{
		}

		[Token(Token = "0x6000B6B")]
		[Address(RVA = "0xCFA144", Offset = "0xCFA144", VA = "0xCFA144", Slot = "6")]
		public virtual void Update()
		{
		}

		[Token(Token = "0x6000B6C")]
		[Address(RVA = "0xCFA148", Offset = "0xCFA148", VA = "0xCFA148")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000B6D")]
		[Address(RVA = "0xCFA350", Offset = "0xCFA350", VA = "0xCFA350")]
		public void OnHover()
		{
		}

		[Token(Token = "0x6000B6E")]
		[Address(RVA = "0xCFA3B8", Offset = "0xCFA3B8", VA = "0xCFA3B8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000B6F")]
		[Address(RVA = "0xCFA4F4", Offset = "0xCFA4F4", VA = "0xCFA4F4", Slot = "7")]
		public virtual void OnStateChange()
		{
		}

		[Token(Token = "0x6000B70")]
		[Address(RVA = "0xCFA8F0", Offset = "0xCFA8F0", VA = "0xCFA8F0")]
		[IteratorStateMachine(typeof(<DelayedLastStateDeactivation>d__15))]
		private IEnumerator DelayedLastStateDeactivation()
		{
			return null;
		}

		[Token(Token = "0x6000B71")]
		[Address(RVA = "0xCFA958", Offset = "0xCFA958", VA = "0xCFA958")]
		[IteratorStateMachine(typeof(<DelayedSharedDeactivation>d__16))]
		private IEnumerator DelayedSharedDeactivation()
		{
			return null;
		}

		[Token(Token = "0x6000B72")]
		[Address(RVA = "0xCFA774", Offset = "0xCFA774", VA = "0xCFA774")]
		private protected bool IsPartOfSceneTransition(string lastStateName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B73")]
		[Address(RVA = "0xCFAA10", Offset = "0xCFAA10", VA = "0xCFAA10", Slot = "8")]
		protected virtual void TryDestroyPreviousScene()
		{
		}

		[Token(Token = "0x6000B74")]
		[Address(RVA = "0xCFAAF4", Offset = "0xCFAAF4", VA = "0xCFAAF4", Slot = "9")]
		protected virtual State GetStartingState()
		{
			return default(State);
		}

		[Token(Token = "0x6000B75")]
		[Address(RVA = "0xCFAAFC", Offset = "0xCFAAFC", VA = "0xCFAAFC", Slot = "10")]
		protected virtual GameObject GetPreviousSceneChunk()
		{
			return null;
		}

		[Token(Token = "0x6000B76")]
		[Address(RVA = "0xCFAB04", Offset = "0xCFAB04", VA = "0xCFAB04")]
		public void DropObjects()
		{
		}

		[Token(Token = "0x6000B77")]
		[Address(RVA = "0xCFADA4", Offset = "0xCFADA4", VA = "0xCFADA4")]
		public WhiteboxStateController()
		{
		}
	}
	[Token(Token = "0x2000272")]
	public class PullBanner : MonoBehaviour
	{
		[Token(Token = "0x4000C9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform banner;

		[Token(Token = "0x4000CA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform randallHands;

		[Token(Token = "0x4000CA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float minY;

		[Token(Token = "0x4000CA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float startTime;

		[Token(Token = "0x4000CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float finishTime;

		[Token(Token = "0x4000CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 handPosition;

		[Token(Token = "0x4000CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 bannerPosition;

		[Token(Token = "0x4000CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool moving;

		[Token(Token = "0x4000CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Animator randallAnim;

		[Token(Token = "0x6000B84")]
		[Address(RVA = "0xCFAFB4", Offset = "0xCFAFB4", VA = "0xCFAFB4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B85")]
		[Address(RVA = "0xCFB02C", Offset = "0xCFB02C", VA = "0xCFB02C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B86")]
		[Address(RVA = "0xCFB1AC", Offset = "0xCFB1AC", VA = "0xCFB1AC")]
		public PullBanner()
		{
		}
	}
	[Token(Token = "0x2000273")]
	public class PushDesk : MonoBehaviour
	{
		[Token(Token = "0x4000CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform randallHands;

		[Token(Token = "0x4000CA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x4000CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float deskWidth;

		[Token(Token = "0x4000CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform desk;

		[Token(Token = "0x4000CAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 pushAxis;

		[Token(Token = "0x4000CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AudioSource audio;

		[Token(Token = "0x4000CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float startTime;

		[Token(Token = "0x4000CAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool audioStarted;

		[Token(Token = "0x6000B87")]
		[Address(RVA = "0xCFB1B4", Offset = "0xCFB1B4", VA = "0xCFB1B4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B88")]
		[Address(RVA = "0xCFB2E4", Offset = "0xCFB2E4", VA = "0xCFB2E4")]
		public void PushAgain()
		{
		}

		[Token(Token = "0x6000B89")]
		[Address(RVA = "0xCFB354", Offset = "0xCFB354", VA = "0xCFB354")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000B8A")]
		[Address(RVA = "0xCFB504", Offset = "0xCFB504", VA = "0xCFB504")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000B8B")]
		[Address(RVA = "0xCFB57C", Offset = "0xCFB57C", VA = "0xCFB57C")]
		private void OnStateChange()
		{
		}

		[Token(Token = "0x6000B8C")]
		[Address(RVA = "0xCFB754", Offset = "0xCFB754", VA = "0xCFB754")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B8D")]
		[Address(RVA = "0xCFB770", Offset = "0xCFB770", VA = "0xCFB770")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B8E")]
		[Address(RVA = "0xCFBA04", Offset = "0xCFBA04", VA = "0xCFBA04")]
		public PushDesk()
		{
		}
	}
	[Token(Token = "0x2000274")]
	public class RotatePage : MonoBehaviour
	{
		[Token(Token = "0x4000CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SkinnedMeshRenderer page;

		[Token(Token = "0x4000CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LinearMapping lm;

		[Token(Token = "0x4000CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float blendValueStart;

		[Token(Token = "0x4000CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float blendValueEnd;

		[Token(Token = "0x4000CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float blendShapeFloat;

		[Token(Token = "0x4000CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float startAngle;

		[Token(Token = "0x4000CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float endAngle;

		[Token(Token = "0x4000CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 startVector;

		[Token(Token = "0x6000B8F")]
		[Address(RVA = "0xCFBA64", Offset = "0xCFBA64", VA = "0xCFBA64")]
		public void PageTurn(float normalizedValue)
		{
		}

		[Token(Token = "0x6000B90")]
		[Address(RVA = "0xCFBB00", Offset = "0xCFBB00", VA = "0xCFBB00")]
		public void SetMaterial(Material mat)
		{
		}

		[Token(Token = "0x6000B91")]
		[Address(RVA = "0xCFBB1C", Offset = "0xCFBB1C", VA = "0xCFBB1C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B92")]
		[Address(RVA = "0xCFBB70", Offset = "0xCFBB70", VA = "0xCFBB70")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B93")]
		[Address(RVA = "0xCFBBF8", Offset = "0xCFBBF8", VA = "0xCFBBF8")]
		public RotatePage()
		{
		}
	}
	[Token(Token = "0x2000275")]
	public class BOD_LoadLevel : MonoBehaviour
	{
		[Token(Token = "0x2000276")]
		[CompilerGenerated]
		private sealed class <LoadLevel>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000CBE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000CBF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000CC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public BOD_LoadLevel <>4__this;

			[Token(Token = "0x4000CC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private string[] <>7__wrap1;

			[Token(Token = "0x4000CC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <>7__wrap2;

			[Token(Token = "0x17000130")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000B9D")]
				[Address(RVA = "0xCFC01C", Offset = "0xCFC01C", VA = "0xCFC01C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000131")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000B9F")]
				[Address(RVA = "0xCFC064", Offset = "0xCFC064", VA = "0xCFC064", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000B9A")]
			[Address(RVA = "0xCFBD20", Offset = "0xCFBD20", VA = "0xCFBD20")]
			[DebuggerHidden]
			public <LoadLevel>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x6000B9B")]
			[Address(RVA = "0xCFBD58", Offset = "0xCFBD58", VA = "0xCFBD58", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000B9C")]
			[Address(RVA = "0xCFBD5C", Offset = "0xCFBD5C", VA = "0xCFBD5C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000B9E")]
			[Address(RVA = "0xCFC024", Offset = "0xCFC024", VA = "0xCFC024", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static BOD_LoadLevel _active;

		[Token(Token = "0x4000CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string[] levelName;

		[Token(Token = "0x4000CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool loadAdditive;

		[Token(Token = "0x4000CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool loadAsync;

		[Token(Token = "0x4000CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject initalLoadBlocker;

		[Token(Token = "0x4000CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AsyncOperation async;

		[Token(Token = "0x1700012F")]
		public static bool loading
		{
			[Token(Token = "0x6000B94")]
			[Address(RVA = "0xCFBC00", Offset = "0xCFBC00", VA = "0xCFBC00")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000B95")]
		[Address(RVA = "0xCFBC78", Offset = "0xCFBC78", VA = "0xCFBC78")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000B96")]
		[Address(RVA = "0xCFBC7C", Offset = "0xCFBC7C", VA = "0xCFBC7C")]
		public void LoadLevel(string[] levelName)
		{
		}

		[Token(Token = "0x6000B97")]
		[Address(RVA = "0xCFBC84", Offset = "0xCFBC84", VA = "0xCFBC84")]
		private void Trigger()
		{
		}

		[Token(Token = "0x6000B98")]
		[Address(RVA = "0xCFBCB8", Offset = "0xCFBCB8", VA = "0xCFBCB8")]
		[IteratorStateMachine(typeof(<LoadLevel>d__11))]
		private IEnumerator LoadLevel()
		{
			return null;
		}

		[Token(Token = "0x6000B99")]
		[Address(RVA = "0xCFBD48", Offset = "0xCFBD48", VA = "0xCFBD48")]
		public BOD_LoadLevel()
		{
		}
	}
	[Token(Token = "0x2000277")]
	public class SceneController : MonoBehaviour
	{
		[Token(Token = "0x4000CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject currentState;

		[Token(Token = "0x4000CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private SECTR_TriggerLoader loader;

		[Token(Token = "0x4000CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool _makeActive;

		[Token(Token = "0x4000CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool _loaded;

		[Token(Token = "0x6000BA0")]
		[Address(RVA = "0xCFC06C", Offset = "0xCFC06C", VA = "0xCFC06C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000BA1")]
		[Address(RVA = "0xCFC11C", Offset = "0xCFC11C", VA = "0xCFC11C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BA2")]
		[Address(RVA = "0xCFC120", Offset = "0xCFC120", VA = "0xCFC120")]
		private void Update()
		{
		}

		[Token(Token = "0x6000BA3")]
		[Address(RVA = "0xCFC2CC", Offset = "0xCFC2CC", VA = "0xCFC2CC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000BA4")]
		[Address(RVA = "0xCFC350", Offset = "0xCFC350", VA = "0xCFC350")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000BA5")]
		[Address(RVA = "0xCFC134", Offset = "0xCFC134", VA = "0xCFC134")]
		private void OnStateChange()
		{
		}

		[Token(Token = "0x6000BA6")]
		[Address(RVA = "0xCFC514", Offset = "0xCFC514", VA = "0xCFC514")]
		public SceneController()
		{
		}
	}
	[Token(Token = "0x2000278")]
	public enum State
	{
		[Token(Token = "0x4000CC8")]
		START,
		[Token(Token = "0x4000CC9")]
		TIME_TRAVEL,
		[Token(Token = "0x4000CCA")]
		TATAMI_ROOM,
		[Token(Token = "0x4000CCB")]
		RANDALL_PRELUDE,
		[Token(Token = "0x4000CCC")]
		DAD_LACK_OF_PRESENCE,
		[Token(Token = "0x4000CCD")]
		RANDALL_KNOWS_SOME_THINGS,
		[Token(Token = "0x4000CCE")]
		SKIP_TO_CORK_BOARD,
		[Token(Token = "0x4000CCF")]
		BOOK_OF_DISTANCE,
		[Token(Token = "0x4000CD0")]
		HOW_TO_MAKE_WISH,
		[Token(Token = "0x4000CD1")]
		RANDALL_PLACES_PAPER,
		[Token(Token = "0x4000CD2")]
		CORK_BOARD_YONEZO,
		[Token(Token = "0x4000CD3")]
		PHONE_RINGS,
		[Token(Token = "0x4000CD4")]
		DAD_CORRECTS_RANDALL,
		[Token(Token = "0x4000CD5")]
		TRANSPORTED_TO_PAST,
		[Token(Token = "0x4000CD6")]
		FAMILY_GOODBYE,
		[Token(Token = "0x4000CD7")]
		HIROSHIMA_HOUSE,
		[Token(Token = "0x4000CD8")]
		LETTER_TO_VANCOUVER,
		[Token(Token = "0x4000CD9")]
		LETTER_FROM_VANCOUVER,
		[Token(Token = "0x4000CDA")]
		LETTER_FROM_VANCOUVER_2,
		[Token(Token = "0x4000CDB")]
		PACK_SUITCASE_HIROSHIMA,
		[Token(Token = "0x4000CDC")]
		WAVE_GOODBYE,
		[Token(Token = "0x4000CDD")]
		WAVE_VANCOUVER,
		[Token(Token = "0x4000CDE")]
		ARRIVAL,
		[Token(Token = "0x4000CDF")]
		IMMIGRATION,
		[Token(Token = "0x4000CE0")]
		STAMP_PASSPORT,
		[Token(Token = "0x4000CE1")]
		FAMILY_FARM,
		[Token(Token = "0x4000CE2")]
		WHEELBARROW,
		[Token(Token = "0x4000CE3")]
		FENCELINE,
		[Token(Token = "0x4000CE4")]
		PLANT_SEEDS,
		[Token(Token = "0x4000CE5")]
		EVERYTHING_BLOOMS,
		[Token(Token = "0x4000CE6")]
		TABLE_ON_PORCH,
		[Token(Token = "0x4000CE7")]
		TABLE_BOWL_1,
		[Token(Token = "0x4000CE8")]
		TABLE_BOWL_2,
		[Token(Token = "0x4000CE9")]
		TAKE_PHOTOS,
		[Token(Token = "0x4000CEA")]
		PHOTO_TAKEN,
		[Token(Token = "0x4000CEB")]
		SECOND_PHOTO_TAKEN,
		[Token(Token = "0x4000CEC")]
		NOTICE_APPEARS,
		[Token(Token = "0x4000CED")]
		STANDING_IN_LINE,
		[Token(Token = "0x4000CEE")]
		ID_CARDS_APPEAR,
		[Token(Token = "0x4000CEF")]
		PACK_SUITCASE,
		[Token(Token = "0x4000CF0")]
		PICKUP_SUITCASE,
		[Token(Token = "0x4000CF1")]
		SEGREGATION,
		[Token(Token = "0x4000CF2")]
		SEGREGATION_MOVE,
		[Token(Token = "0x4000CF3")]
		RED_CIRCLES,
		[Token(Token = "0x4000CF4")]
		SWITCH_APPEARS,
		[Token(Token = "0x4000CF5")]
		SWITCH_1,
		[Token(Token = "0x4000CF6")]
		SWITCH_2,
		[Token(Token = "0x4000CF7")]
		SWITCH_3,
		[Token(Token = "0x4000CF8")]
		TRAIN,
		[Token(Token = "0x4000CF9")]
		ANOTHER_TRAIN,
		[Token(Token = "0x4000CFA")]
		TRAIN_WALL_IMAGES,
		[Token(Token = "0x4000CFB")]
		LABOUR_FARM,
		[Token(Token = "0x4000CFC")]
		DAD_TELLS_STORY,
		[Token(Token = "0x4000CFD")]
		LABOUR_FARM_PLANTING,
		[Token(Token = "0x4000CFE")]
		FAMILY_ALBUM,
		[Token(Token = "0x4000CFF")]
		OPENING_LETTERS,
		[Token(Token = "0x4000D00")]
		TYPEWRITERS,
		[Token(Token = "0x4000D01")]
		DESK_CHANGES,
		[Token(Token = "0x4000D02")]
		DESK_ARCHIVAL_IMAGES,
		[Token(Token = "0x4000D03")]
		DESK_IMAGE_FARM,
		[Token(Token = "0x4000D04")]
		DESK_IMAGE_FADE,
		[Token(Token = "0x4000D05")]
		ANOTHER_LETTER,
		[Token(Token = "0x4000D06")]
		LETTER_HIROSHIMA,
		[Token(Token = "0x4000D07")]
		HIROSHIMA_BLAST,
		[Token(Token = "0x4000D08")]
		DESK_MODERN_OFFICE,
		[Token(Token = "0x4000D09")]
		DIAL_ANOTHER_NUMBER,
		[Token(Token = "0x4000D0A")]
		MAP_AND_LETTER,
		[Token(Token = "0x4000D0B")]
		STREETVIEW,
		[Token(Token = "0x4000D0C")]
		I_FOUND_IT,
		[Token(Token = "0x4000D0D")]
		TO_JAPAN,
		[Token(Token = "0x4000D0E")]
		ON_A_PLANE,
		[Token(Token = "0x4000D0F")]
		GET_TRAN_TICKET,
		[Token(Token = "0x4000D10")]
		DOOR_WITH_KNOCKER,
		[Token(Token = "0x4000D11")]
		JAPANESE_ROOM,
		[Token(Token = "0x4000D12")]
		PHOTO_ALBUM,
		[Token(Token = "0x4000D13")]
		YONEZO_PHOTOS,
		[Token(Token = "0x4000D14")]
		PEOPLE_FADE,
		[Token(Token = "0x4000D15")]
		DAD_REACTION,
		[Token(Token = "0x4000D16")]
		MUSIC_FADE_OUT,
		[Token(Token = "0x4000D17")]
		WIND_CHIME_1,
		[Token(Token = "0x4000D18")]
		MUSEUM_SLICE_1,
		[Token(Token = "0x4000D19")]
		WIND_CHIME_2,
		[Token(Token = "0x4000D1A")]
		MUSEUM_SLICE_2,
		[Token(Token = "0x4000D1B")]
		WIND_CHIME_3,
		[Token(Token = "0x4000D1C")]
		MUSEUM_SLICE_3,
		[Token(Token = "0x4000D1D")]
		WIND_CHIME_4,
		[Token(Token = "0x4000D1E")]
		MUSEUM_SLICE_4,
		[Token(Token = "0x4000D1F")]
		WIND_CHIME_5,
		[Token(Token = "0x4000D20")]
		MUSEUM_SLICE_5,
		[Token(Token = "0x4000D21")]
		WIND_CHIME_6,
		[Token(Token = "0x4000D22")]
		MUSEUM_SLICE_6,
		[Token(Token = "0x4000D23")]
		WIND_CHIME_7,
		[Token(Token = "0x4000D24")]
		MUSEUM_SLICE_7,
		[Token(Token = "0x4000D25")]
		WIND_CHIME_8,
		[Token(Token = "0x4000D26")]
		MUSEUM_SLICE_8,
		[Token(Token = "0x4000D27")]
		END
	}
	[Token(Token = "0x2000279")]
	public enum SCENE_CHARACTER
	{
		[Token(Token = "0x4000D29")]
		UNTAGGED,
		[Token(Token = "0x4000D2A")]
		RANDALL,
		[Token(Token = "0x4000D2B")]
		DAD,
		[Token(Token = "0x4000D2C")]
		YONEZO,
		[Token(Token = "0x4000D2D")]
		YONEZOS_DAD,
		[Token(Token = "0x4000D2E")]
		YONEZOS_MOM,
		[Token(Token = "0x4000D2F")]
		YONEZOS_OLDER_SISTER,
		[Token(Token = "0x4000D30")]
		HUMIKO,
		[Token(Token = "0x4000D31")]
		IMMIGRATION_OFFICER,
		[Token(Token = "0x4000D32")]
		YEIKO,
		[Token(Token = "0x4000D33")]
		FAMILY_FARM_BOY,
		[Token(Token = "0x4000D34")]
		FAMILY_FARM_GIRL,
		[Token(Token = "0x4000D35")]
		FAMILY_FARM_EXTRA_WORKER_1,
		[Token(Token = "0x4000D36")]
		FAMILY_FARM_EXTRA_WORKER_2,
		[Token(Token = "0x4000D37")]
		SUITCASE_PACKING_EXTRA,
		[Token(Token = "0x4000D38")]
		RCMP_OFFICER,
		[Token(Token = "0x4000D39")]
		PASSPORT_OFFICER,
		[Token(Token = "0x4000D3A")]
		FUJIKO,
		[Token(Token = "0x4000D3B")]
		FUJIKO_RELATIVE_MALE,
		[Token(Token = "0x4000D3C")]
		FUJIKO_RELATIVE_FEMALE,
		[Token(Token = "0x4000D3D")]
		INTERNMENT_EXTRA_1,
		[Token(Token = "0x4000D3E")]
		INTERNMENT_EXTRA_2,
		[Token(Token = "0x4000D3F")]
		INTERNMENT_EXTRA_3,
		[Token(Token = "0x4000D40")]
		INTERNMENT_EXTRA_4,
		[Token(Token = "0x4000D41")]
		INTERNMENT_EXTRA_5,
		[Token(Token = "0x4000D42")]
		TRAIN_EXTRA_1,
		[Token(Token = "0x4000D43")]
		TRAIN_EXTRA_2,
		[Token(Token = "0x4000D44")]
		TRAIN_EXTRA_3,
		[Token(Token = "0x4000D45")]
		TRAIN_EXTRA_BOY,
		[Token(Token = "0x4000D46")]
		YONEZOS_YOUNGER_BROTHER,
		[Token(Token = "0x4000D47")]
		VANCOUVER_EXTRA_FEMALE_1,
		[Token(Token = "0x4000D48")]
		VANCOUVER_EXTRA_FEMALE_2
	}
	[Serializable]
	[Token(Token = "0x200027A")]
	public class BodScene
	{
		[Token(Token = "0x4000D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		public string sceneName;

		[Token(Token = "0x4000D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string scenePath;

		[Token(Token = "0x4000D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public State loadState;

		[Token(Token = "0x4000D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool loadForever;

		[Token(Token = "0x4000D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public State unloadState;

		[Token(Token = "0x6000BA7")]
		[Address(RVA = "0xCFC51C", Offset = "0xCFC51C", VA = "0xCFC51C")]
		public BodScene()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200027B")]
	public class BodSceneList : ReorderableArray<BodScene>
	{
		[Token(Token = "0x6000BA8")]
		[Address(RVA = "0xCFC524", Offset = "0xCFC524", VA = "0xCFC524")]
		public BodSceneList()
		{
		}
	}
	[Token(Token = "0x200027C")]
	public class SceneManager : Singleton<SceneManager>
	{
		[Token(Token = "0x200027D")]
		public delegate void StateChange();

		[Token(Token = "0x4000D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform playerTransform;

		[Token(Token = "0x4000D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Reorderable]
		public BodSceneList scenes;

		[Token(Token = "0x4000D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Dictionary<string, BodScene> scene_lookup;

		[Token(Token = "0x4000D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<SCENE_CHARACTER, GenericCharacter> character_lookup;

		[Token(Token = "0x4000D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string stateHelper;

		[Token(Token = "0x4000D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Canvas audioMenu;

		[Token(Token = "0x4000D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Material hintMaterial;

		[Token(Token = "0x4000D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		public List<string> scenesPrtOfTransitions;

		[Token(Token = "0x4000D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static string sceneToActivate;

		[Token(Token = "0x4000D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static int sceneloadIdx;

		[Token(Token = "0x4000D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private State _currentState;

		[Token(Token = "0x4000D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Volume _ppv;

		[Token(Token = "0x17000132")]
		public State currentState
		{
			[Token(Token = "0x6000BAB")]
			[Address(RVA = "0xCFC56C", Offset = "0xCFC56C", VA = "0xCFC56C")]
			get
			{
				return default(State);
			}
			[Token(Token = "0x6000BAC")]
			[Address(RVA = "0xCFC574", Offset = "0xCFC574", VA = "0xCFC574")]
			set
			{
			}
		}

		[Token(Token = "0x17000133")]
		public Volume ppv
		{
			[Token(Token = "0x6000BAE")]
			[Address(RVA = "0xCFC650", Offset = "0xCFC650", VA = "0xCFC650")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BAF")]
			[Address(RVA = "0xCFC658", Offset = "0xCFC658", VA = "0xCFC658")]
			set
			{
			}
		}

		[Token(Token = "0x1400000B")]
		public static event StateChange OnStateChange
		{
			[Token(Token = "0x6000BA9")]
			[Address(RVA = "0xCFA298", Offset = "0xCFA298", VA = "0xCFA298")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000BAA")]
			[Address(RVA = "0xCFA43C", Offset = "0xCFA43C", VA = "0xCFA43C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000BAD")]
		[Address(RVA = "0xCFC5F4", Offset = "0xCFC5F4", VA = "0xCFC5F4")]
		public void Refresh()
		{
		}

		[Token(Token = "0x6000BB0")]
		[Address(RVA = "0xCFC118", Offset = "0xCFC118", VA = "0xCFC118")]
		public static void SetScene()
		{
		}

		[Token(Token = "0x6000BB1")]
		[Address(RVA = "0xCFC3D0", Offset = "0xCFC3D0", VA = "0xCFC3D0")]
		public bool CheckSetActive(string sceneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BB2")]
		[Address(RVA = "0xCFC944", Offset = "0xCFC944", VA = "0xCFC944")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000BB3")]
		[Address(RVA = "0xCFCA08", Offset = "0xCFCA08", VA = "0xCFCA08")]
		private void OnLowMemory()
		{
		}

		[Token(Token = "0x6000BB4")]
		[Address(RVA = "0xCFCA10", Offset = "0xCFCA10", VA = "0xCFCA10")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000BB5")]
		[Address(RVA = "0xCFCEF4", Offset = "0xCFCEF4", VA = "0xCFCEF4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000BB6")]
		[Address(RVA = "0xCFCFEC", Offset = "0xCFCFEC", VA = "0xCFCFEC")]
		private void OnSceneLoaded(Scene scene, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x6000BB7")]
		[Address(RVA = "0xCFD3D8", Offset = "0xCFD3D8", VA = "0xCFD3D8")]
		public void CheckState()
		{
		}

		[Token(Token = "0x6000BB8")]
		[Address(RVA = "0xCFD5EC", Offset = "0xCFD5EC", VA = "0xCFD5EC")]
		public void PrevState()
		{
		}

		[Token(Token = "0x6000BB9")]
		[Address(RVA = "0xCF57A4", Offset = "0xCF57A4", VA = "0xCF57A4")]
		public void NextState()
		{
		}

		[Token(Token = "0x6000BBA")]
		[Address(RVA = "0xCFD600", Offset = "0xCFD600", VA = "0xCFD600")]
		public void RegisterCharacter(GenericCharacter character)
		{
		}

		[Token(Token = "0x6000BBB")]
		[Address(RVA = "0xCF4EE8", Offset = "0xCF4EE8", VA = "0xCF4EE8")]
		public GenericCharacter GetCharacter(SCENE_CHARACTER characterID)
		{
			return null;
		}

		[Token(Token = "0x6000BBC")]
		[Address(RVA = "0xCFD6D4", Offset = "0xCFD6D4", VA = "0xCFD6D4")]
		private void SetState()
		{
		}

		[Token(Token = "0x6000BBD")]
		[Address(RVA = "0xCFD7A4", Offset = "0xCFD7A4", VA = "0xCFD7A4")]
		public SceneManager()
		{
		}
	}
	[Token(Token = "0x2000280")]
	public class SceneTransition : MonoBehaviour
	{
		[Token(Token = "0x4000D5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public State triggerState;

		[Token(Token = "0x4000D5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEvent transition;

		[Token(Token = "0x4000D5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool fireWhenGreaterThan;

		[Token(Token = "0x4000D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool fired;

		[Token(Token = "0x6000BC8")]
		[Address(RVA = "0xCFD928", Offset = "0xCFD928", VA = "0xCFD928")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000BC9")]
		[Address(RVA = "0xCFDA48", Offset = "0xCFDA48", VA = "0xCFDA48")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000BCA")]
		[Address(RVA = "0xCFD9C4", Offset = "0xCFD9C4", VA = "0xCFD9C4")]
		private void OnStateChange()
		{
		}

		[Token(Token = "0x6000BCB")]
		[Address(RVA = "0xCFDAC0", Offset = "0xCFDAC0", VA = "0xCFDAC0")]
		private void Fire()
		{
		}

		[Token(Token = "0x6000BCC")]
		[Address(RVA = "0xCFDB5C", Offset = "0xCFDB5C", VA = "0xCFDB5C")]
		public SceneTransition()
		{
		}
	}
	[Token(Token = "0x2000281")]
	public class SkipToState : MonoBehaviour
	{
		[Token(Token = "0x4000D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public State skipState;

		[Token(Token = "0x6000BCD")]
		[Address(RVA = "0xCFDB64", Offset = "0xCFDB64", VA = "0xCFDB64")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000BCE")]
		[Address(RVA = "0xCFDBB8", Offset = "0xCFDBB8", VA = "0xCFDBB8")]
		public SkipToState()
		{
		}
	}
	[Token(Token = "0x2000282")]
	[ExecuteInEditMode]
	public class AlbertaLabourFarmStateController : WhiteboxStateController
	{
		[Token(Token = "0x4000D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int numSeedsToPlant;

		[Token(Token = "0x4000D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int numSeedsPlanted;

		[Token(Token = "0x4000D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AdvanceScene seedAdvance;

		[Token(Token = "0x4000D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Animation letterDissolve;

		[Token(Token = "0x4000D66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject yonezo;

		[Token(Token = "0x4000D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private SceneManager sceneMan;

		[Token(Token = "0x6000BCF")]
		[Address(RVA = "0xCFDBC0", Offset = "0xCFDBC0", VA = "0xCFDBC0", Slot = "7")]
		public override void OnStateChange()
		{
		}

		[Token(Token = "0x6000BD0")]
		[Address(RVA = "0xCFDC64", Offset = "0xCFDC64", VA = "0xCFDC64", Slot = "9")]
		protected override State GetStartingState()
		{
			return default(State);
		}

		[Token(Token = "0x6000BD1")]
		[Address(RVA = "0xCFDC6C", Offset = "0xCFDC6C", VA = "0xCFDC6C", Slot = "6")]
		public override void Update()
		{
		}

		[Token(Token = "0x6000BD2")]
		[Address(RVA = "0xCFDD4C", Offset = "0xCFDD4C", VA = "0xCFDD4C")]
		private void ChangeYonezoLayer()
		{
		}

		[Token(Token = "0x6000BD3")]
		[Address(RVA = "0xCFDE04", Offset = "0xCFDE04", VA = "0xCFDE04")]
		public void PressPhoneButton()
		{
		}

		[Token(Token = "0x6000BD4")]
		[Address(RVA = "0xCFDE08", Offset = "0xCFDE08", VA = "0xCFDE08")]
		public void LetterAdvance()
		{
		}

		[Token(Token = "0x6000BD5")]
		[Address(RVA = "0xCFDE34", Offset = "0xCFDE34", VA = "0xCFDE34")]
		public void DissolveLetter()
		{
		}

		[Token(Token = "0x6000BD6")]
		[Address(RVA = "0xCFDEE0", Offset = "0xCFDEE0", VA = "0xCFDEE0")]
		public void YonezoExit()
		{
		}

		[Token(Token = "0x6000BD7")]
		[Address(RVA = "0xCFDEE4", Offset = "0xCFDEE4", VA = "0xCFDEE4")]
		public void CountSeeds()
		{
		}

		[Token(Token = "0x6000BD8")]
		[Address(RVA = "0xCFDFA0", Offset = "0xCFDFA0", VA = "0xCFDFA0")]
		public AlbertaLabourFarmStateController()
		{
		}
	}
	[Token(Token = "0x2000283")]
	[ExecuteInEditMode]
	public class HiroshimaHouseStateController : WhiteboxStateController
	{
		[Token(Token = "0x2000284")]
		[CompilerGenerated]
		private sealed class <FamilyGoodbyeCoroutine>d__52 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HiroshimaHouseStateController <>4__this;

			[Token(Token = "0x17000134")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000C00")]
				[Address(RVA = "0xD006AC", Offset = "0xD006AC", VA = "0xD006AC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000135")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000C02")]
				[Address(RVA = "0xD006F4", Offset = "0xD006F4", VA = "0xD006F4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000BFD")]
			[Address(RVA = "0xCFEB04", Offset = "0xCFEB04", VA = "0xCFEB04")]
			[DebuggerHidden]
			public <FamilyGoodbyeCoroutine>d__52(int <>1__state)
			{
			}

			[Token(Token = "0x6000BFE")]
			[Address(RVA = "0xD00338", Offset = "0xD00338", VA = "0xD00338", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000BFF")]
			[Address(RVA = "0xD0033C", Offset = "0xD0033C", VA = "0xD0033C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000C01")]
			[Address(RVA = "0xD006B4", Offset = "0xD006B4", VA = "0xD006B4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000285")]
		[CompilerGenerated]
		private sealed class <AnimateFirstLetterContents>d__61 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x17000136")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000C06")]
				[Address(RVA = "0xD00794", Offset = "0xD00794", VA = "0xD00794", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000137")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000C08")]
				[Address(RVA = "0xD007DC", Offset = "0xD007DC", VA = "0xD007DC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000C03")]
			[Address(RVA = "0xCFF2E8", Offset = "0xCFF2E8", VA = "0xCFF2E8")]
			[DebuggerHidden]
			public <AnimateFirstLetterContents>d__61(int <>1__state)
			{
			}

			[Token(Token = "0x6000C04")]
			[Address(RVA = "0xD006FC", Offset = "0xD006FC", VA = "0xD006FC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000C05")]
			[Address(RVA = "0xD00700", Offset = "0xD00700", VA = "0xD00700", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000C07")]
			[Address(RVA = "0xD0079C", Offset = "0xD0079C", VA = "0xD0079C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject paperToVancouver;

		[Token(Token = "0x4000D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform _shared;

		[Token(Token = "0x4000D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GameObject brush;

		[Token(Token = "0x4000D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform paperTransform;

		[Token(Token = "0x4000D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform letterTransform;

		[Token(Token = "0x4000D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public DrawPaper drawPaper;

		[Token(Token = "0x4000D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public int numberOfLetters;

		[Token(Token = "0x4000D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public int numberOfLettersToSend;

		[Token(Token = "0x4000D70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform letterFromVancouver;

		[Token(Token = "0x4000D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Transform letterFromVancouver2;

		[Token(Token = "0x4000D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Vector3 letterLocalPosition;

		[Token(Token = "0x4000D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public Vector3 letterLocalRotation;

		[Token(Token = "0x4000D74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Transform fromVancouver;

		[Token(Token = "0x4000D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public List<DrawPaper> paperStack;

		[Token(Token = "0x4000D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public PhotoFrame photoFrame;

		[Token(Token = "0x4000D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public GameObject photoPrefab;

		[Token(Token = "0x4000D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public GameObject photo;

		[Token(Token = "0x4000D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public GameObject sceneFrame;

		[Token(Token = "0x4000D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Tripod familyPhotoTripod;

		[Token(Token = "0x4000D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public WaterColorBrush paintManager;

		[Token(Token = "0x4000D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Transform contents_letter1;

		[Token(Token = "0x4000D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public bool letter1_opened;

		[Token(Token = "0x4000D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF9")]
		public bool letter2_opened;

		[Token(Token = "0x4000D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Transform contents_letter2;

		[Token(Token = "0x4000D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public BookCover map;

		[Token(Token = "0x4000D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public WindChimeTransition windchime;

		[Token(Token = "0x4000D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public float familyGoodbyeDuration;

		[Token(Token = "0x4000D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private int numLettersCreated;

		[Token(Token = "0x4000D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private int numLettersSent;

		[Token(Token = "0x4000D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private Vector3 letterPos;

		[Token(Token = "0x4000D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Quaternion letterRot;

		[Token(Token = "0x4000D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Vector3 letterPos2;

		[Token(Token = "0x4000D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		private Quaternion letterRot2;

		[Token(Token = "0x4000D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public GameObject ourDesk;

		[Token(Token = "0x4000D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public GameObject yonezosDesk;

		[Token(Token = "0x4000D8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public Transform suitcase;

		[Token(Token = "0x4000D8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public Transform yonezoSuitcase;

		[Token(Token = "0x4000D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public GameObject wheel;

		[Token(Token = "0x4000D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public ClothLine clothesLine;

		[Token(Token = "0x4000D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public GameObject clothesPeg;

		[Token(Token = "0x4000D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public DropLocationLTP clothesPegAttachPoint;

		[Token(Token = "0x4000D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public Animation deskArm;

		[Token(Token = "0x4000D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public AudioSource clothesLineDing;

		[Token(Token = "0x4000D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public ParentToCharacter yonezoHandHat;

		[Token(Token = "0x4000D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public GameObject HowToMakeAWish;

		[Token(Token = "0x4000D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private int papersHeld;

		[Token(Token = "0x4000D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		private bool isFirstClip;

		[Token(Token = "0x6000BD9")]
		[Address(RVA = "0xCFDFA8", Offset = "0xCFDFA8", VA = "0xCFDFA8", Slot = "4")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6000BDA")]
		[Address(RVA = "0xCFE2BC", Offset = "0xCFE2BC", VA = "0xCFE2BC", Slot = "6")]
		public override void Update()
		{
		}

		[Token(Token = "0x6000BDB")]
		[Address(RVA = "0xCFE340", Offset = "0xCFE340", VA = "0xCFE340", Slot = "7")]
		public override void OnStateChange()
		{
		}

		[Token(Token = "0x6000BDC")]
		[Address(RVA = "0xCFEA94", Offset = "0xCFEA94", VA = "0xCFEA94", Slot = "9")]
		protected override State GetStartingState()
		{
			return default(State);
		}

		[Token(Token = "0x6000BDD")]
		[Address(RVA = "0xCFE2F4", Offset = "0xCFE2F4", VA = "0xCFE2F4")]
		public void FamilyGoodbye()
		{
		}

		[Token(Token = "0x6000BDE")]
		[Address(RVA = "0xCFEA9C", Offset = "0xCFEA9C", VA = "0xCFEA9C")]
		[IteratorStateMachine(typeof(<FamilyGoodbyeCoroutine>d__52))]
		public IEnumerator FamilyGoodbyeCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6000BDF")]
		[Address(RVA = "0xCFEB2C", Offset = "0xCFEB2C", VA = "0xCFEB2C")]
		internal void PaperGrabbed()
		{
		}

		[Token(Token = "0x6000BE0")]
		[Address(RVA = "0xCFEC94", Offset = "0xCFEC94", VA = "0xCFEC94")]
		private void ReelInPegAndDing()
		{
		}

		[Token(Token = "0x6000BE1")]
		[Address(RVA = "0xCFEF50", Offset = "0xCFEF50", VA = "0xCFEF50")]
		internal void PaperDropped()
		{
		}

		[Token(Token = "0x6000BE2")]
		[Address(RVA = "0xCFEF64", Offset = "0xCFEF64", VA = "0xCFEF64")]
		public void LetterPainted()
		{
		}

		[Token(Token = "0x6000BE3")]
		[Address(RVA = "0xCFF10C", Offset = "0xCFF10C", VA = "0xCFF10C")]
		public void DisableBrushHint()
		{
		}

		[Token(Token = "0x6000BE4")]
		[Address(RVA = "0xCFF16C", Offset = "0xCFF16C", VA = "0xCFF16C")]
		public void PickupFirstEnvelope()
		{
		}

		[Token(Token = "0x6000BE5")]
		[Address(RVA = "0xCFF1BC", Offset = "0xCFF1BC", VA = "0xCFF1BC")]
		public void DropFirstEnvelope()
		{
		}

		[Token(Token = "0x6000BE6")]
		[Address(RVA = "0xCFF1F8", Offset = "0xCFF1F8", VA = "0xCFF1F8")]
		public void FirstLetterOpened()
		{
		}

		[Token(Token = "0x6000BE7")]
		[Address(RVA = "0xCFF288", Offset = "0xCFF288", VA = "0xCFF288")]
		[IteratorStateMachine(typeof(<AnimateFirstLetterContents>d__61))]
		private IEnumerator AnimateFirstLetterContents()
		{
			return null;
		}

		[Token(Token = "0x6000BE8")]
		[Address(RVA = "0xCFF310", Offset = "0xCFF310", VA = "0xCFF310")]
		public void SecondLetterOpened()
		{
		}

		[Token(Token = "0x6000BE9")]
		[Address(RVA = "0xCFF3D0", Offset = "0xCFF3D0", VA = "0xCFF3D0")]
		public void MakeFirstLetterNonKinematic()
		{
		}

		[Token(Token = "0x6000BEA")]
		[Address(RVA = "0xCFF430", Offset = "0xCFF430", VA = "0xCFF430")]
		public void MakeSecondLetterNonKinematic()
		{
		}

		[Token(Token = "0x6000BEB")]
		[Address(RVA = "0xCFF490", Offset = "0xCFF490", VA = "0xCFF490")]
		public void PickupSuitcase()
		{
		}

		[Token(Token = "0x6000BEC")]
		[Address(RVA = "0xCFF55C", Offset = "0xCFF55C", VA = "0xCFF55C")]
		public void AddPaper(DrawPaper paper)
		{
		}

		[Token(Token = "0x6000BED")]
		[Address(RVA = "0xCFF650", Offset = "0xCFF650", VA = "0xCFF650")]
		public void LetterSent(DrawPaper paper)
		{
		}

		[Token(Token = "0x6000BEE")]
		[Address(RVA = "0xCFF96C", Offset = "0xCFF96C", VA = "0xCFF96C")]
		private void DoTheDing()
		{
		}

		[Token(Token = "0x6000BEF")]
		[Address(RVA = "0xCFED5C", Offset = "0xCFED5C", VA = "0xCFED5C")]
		private void ReelInClothesPeg([Optional] TweenCallback onComplete, float delay = 0f)
		{
		}

		[Token(Token = "0x6000BF0")]
		[Address(RVA = "0xCFF7A4", Offset = "0xCFF7A4", VA = "0xCFF7A4")]
		private void SendOutClothesPeg([Optional] TweenCallback onComplete)
		{
		}

		[Token(Token = "0x6000BF1")]
		[Address(RVA = "0xCFE7FC", Offset = "0xCFE7FC", VA = "0xCFE7FC")]
		private void SpawnObjectOnClothesLine(GameObject ob)
		{
		}

		[Token(Token = "0x6000BF2")]
		[Address(RVA = "0xCFF9F4", Offset = "0xCFF9F4", VA = "0xCFF9F4")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x6000BF3")]
		[Address(RVA = "0xCFFA40", Offset = "0xCFFA40", VA = "0xCFFA40")]
		public void SortPaper()
		{
		}

		[Token(Token = "0x6000BF4")]
		[Address(RVA = "0xCFFC78", Offset = "0xCFFC78", VA = "0xCFFC78")]
		public void EnableBrush()
		{
		}

		[Token(Token = "0x6000BF5")]
		[Address(RVA = "0xCFFD0C", Offset = "0xCFFD0C", VA = "0xCFFD0C")]
		public void PickupBrush()
		{
		}

		[Token(Token = "0x6000BF6")]
		[Address(RVA = "0xCFFDA8", Offset = "0xCFFDA8", VA = "0xCFFDA8")]
		public void DropBrush()
		{
		}

		[Token(Token = "0x6000BF7")]
		[Address(RVA = "0xCFE6C4", Offset = "0xCFE6C4", VA = "0xCFE6C4")]
		public void SpawnNewPaper()
		{
		}

		[Token(Token = "0x6000BF8")]
		[Address(RVA = "0xCFFDAC", Offset = "0xCFFDAC", VA = "0xCFFDAC")]
		public void TakePhoto()
		{
		}

		[Token(Token = "0x6000BF9")]
		[Address(RVA = "0xCFFE14", Offset = "0xCFFE14", VA = "0xCFFE14")]
		public void PhotoTaken()
		{
		}

		[Token(Token = "0x6000BFA")]
		[Address(RVA = "0xD0021C", Offset = "0xD0021C", VA = "0xD0021C")]
		public void AddFloater()
		{
		}

		[Token(Token = "0x6000BFB")]
		[Address(RVA = "0xD00290", Offset = "0xD00290", VA = "0xD00290")]
		public HiroshimaHouseStateController()
		{
		}
	}
	[Token(Token = "0x2000289")]
	[ExecuteInEditMode]
	public class HiyeMaruStateController : WhiteboxStateController
	{
		[Token(Token = "0x200028A")]
		[CompilerGenerated]
		private sealed class <CoTurnSceneLights>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000DAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000DAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000DAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HiyeMaruStateController <>4__this;

			[Token(Token = "0x17000138")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000C20")]
				[Address(RVA = "0xD0111C", Offset = "0xD0111C", VA = "0xD0111C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000139")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000C22")]
				[Address(RVA = "0xD01164", Offset = "0xD01164", VA = "0xD01164", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000C1D")]
			[Address(RVA = "0xD00C2C", Offset = "0xD00C2C", VA = "0xD00C2C")]
			[DebuggerHidden]
			public <CoTurnSceneLights>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x6000C1E")]
			[Address(RVA = "0xD01030", Offset = "0xD01030", VA = "0xD01030", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000C1F")]
			[Address(RVA = "0xD01034", Offset = "0xD01034", VA = "0xD01034", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000C21")]
			[Address(RVA = "0xD01124", Offset = "0xD01124", VA = "0xD01124", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200028B")]
		[CompilerGenerated]
		private sealed class <TurnYeikLightsOffAfterTime>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000DAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000DB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000DB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HiyeMaruStateController <>4__this;

			[Token(Token = "0x1700013A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000C26")]
				[Address(RVA = "0xD01234", Offset = "0xD01234", VA = "0xD01234", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700013B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000C28")]
				[Address(RVA = "0xD0127C", Offset = "0xD0127C", VA = "0xD0127C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000C23")]
			[Address(RVA = "0xD00CDC", Offset = "0xD00CDC", VA = "0xD00CDC")]
			[DebuggerHidden]
			public <TurnYeikLightsOffAfterTime>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6000C24")]
			[Address(RVA = "0xD0116C", Offset = "0xD0116C", VA = "0xD0116C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000C25")]
			[Address(RVA = "0xD01170", Offset = "0xD01170", VA = "0xD01170", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000C27")]
			[Address(RVA = "0xD0123C", Offset = "0xD0123C", VA = "0xD0123C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject dayNightSky;

		[Token(Token = "0x4000DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject WaveController;

		[Token(Token = "0x4000DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform hiroshimaLayout;

		[Token(Token = "0x4000DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject HiroshimaHouse;

		[Token(Token = "0x4000DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GameObject stageLight;

		[Token(Token = "0x4000DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public LightGroup YeikoLight;

		[Token(Token = "0x4000DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public LightGroup YeikoStageLight;

		[Token(Token = "0x4000DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public LightGroup[] sceneLightGroups;

		[Token(Token = "0x4000DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static SCENE_CHARACTER[] family;

		[Token(Token = "0x4000DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool taken;

		[Token(Token = "0x4000DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float distance;

		[Token(Token = "0x6000C10")]
		[Address(RVA = "0xD00AF8", Offset = "0xD00AF8", VA = "0xD00AF8", Slot = "5")]
		public override void Start()
		{
		}

		[Token(Token = "0x6000C11")]
		[Address(RVA = "0xD00B00", Offset = "0xD00B00", VA = "0xD00B00", Slot = "9")]
		protected override State GetStartingState()
		{
			return default(State);
		}

		[Token(Token = "0x6000C12")]
		[Address(RVA = "0xD00B08", Offset = "0xD00B08", VA = "0xD00B08", Slot = "7")]
		public override void OnStateChange()
		{
		}

		[Token(Token = "0x6000C13")]
		[Address(RVA = "0xD00BC4", Offset = "0xD00BC4", VA = "0xD00BC4")]
		[IteratorStateMachine(typeof(<CoTurnSceneLights>d__11))]
		private IEnumerator CoTurnSceneLights()
		{
			return null;
		}

		[Token(Token = "0x6000C14")]
		[Address(RVA = "0xD00C54", Offset = "0xD00C54", VA = "0xD00C54")]
		public void TriggerYeikoLightsCo()
		{
		}

		[Token(Token = "0x6000C15")]
		[Address(RVA = "0xD00C74", Offset = "0xD00C74", VA = "0xD00C74")]
		[IteratorStateMachine(typeof(<TurnYeikLightsOffAfterTime>d__13))]
		private IEnumerator TurnYeikLightsOffAfterTime()
		{
			return null;
		}

		[Token(Token = "0x6000C16")]
		[Address(RVA = "0xD00D04", Offset = "0xD00D04", VA = "0xD00D04")]
		public void UnparetnFamily()
		{
		}

		[Token(Token = "0x6000C17")]
		[Address(RVA = "0xD00D80", Offset = "0xD00D80", VA = "0xD00D80")]
		private void SetFamilyParent(Transform parent, bool enabledCharacter)
		{
		}

		[Token(Token = "0x6000C18")]
		[Address(RVA = "0xD00E98", Offset = "0xD00E98", VA = "0xD00E98")]
		public void Waved()
		{
		}

		[Token(Token = "0x6000C19")]
		[Address(RVA = "0xD00F40", Offset = "0xD00F40", VA = "0xD00F40")]
		public void HideFamily()
		{
		}

		[Token(Token = "0x6000C1A")]
		[Address(RVA = "0xD00F90", Offset = "0xD00F90", VA = "0xD00F90")]
		public void ShowPeopleVancouver()
		{
		}

		[Token(Token = "0x6000C1B")]
		[Address(RVA = "0xD00F94", Offset = "0xD00F94", VA = "0xD00F94")]
		public HiyeMaruStateController()
		{
		}
	}
	[Token(Token = "0x200028C")]
	[ExecuteInEditMode]
	public class HowToPlantStateController : WhiteboxStateController
	{
		[Token(Token = "0x200028D")]
		[CompilerGenerated]
		private sealed class <CoEnableTableOnPorchObjects>d__22 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000DC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000DC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000DC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HowToPlantStateController <>4__this;

			[Token(Token = "0x1700013C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000C43")]
				[Address(RVA = "0xD0228C", Offset = "0xD0228C", VA = "0xD0228C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700013D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000C45")]
				[Address(RVA = "0xD022D4", Offset = "0xD022D4", VA = "0xD022D4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000C40")]
			[Address(RVA = "0xD017E8", Offset = "0xD017E8", VA = "0xD017E8")]
			[DebuggerHidden]
			public <CoEnableTableOnPorchObjects>d__22(int <>1__state)
			{
			}

			[Token(Token = "0x6000C41")]
			[Address(RVA = "0xD021D4", Offset = "0xD021D4", VA = "0xD021D4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000C42")]
			[Address(RVA = "0xD021D8", Offset = "0xD021D8", VA = "0xD021D8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000C44")]
			[Address(RVA = "0xD02294", Offset = "0xD02294", VA = "0xD02294", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200028E")]
		[CompilerGenerated]
		private sealed class <CoEnableTableOnPourchLights>d__23 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000DCA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000DCB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000DCC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HowToPlantStateController <>4__this;

			[Token(Token = "0x1700013E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000C49")]
				[Address(RVA = "0xD0241C", Offset = "0xD0241C", VA = "0xD0241C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700013F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000C4B")]
				[Address(RVA = "0xD02464", Offset = "0xD02464", VA = "0xD02464", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000C46")]
			[Address(RVA = "0xD01810", Offset = "0xD01810", VA = "0xD01810")]
			[DebuggerHidden]
			public <CoEnableTableOnPourchLights>d__23(int <>1__state)
			{
			}

			[Token(Token = "0x6000C47")]
			[Address(RVA = "0xD022DC", Offset = "0xD022DC", VA = "0xD022DC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000C48")]
			[Address(RVA = "0xD022E0", Offset = "0xD022E0", VA = "0xD022E0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000C4A")]
			[Address(RVA = "0xD02424", Offset = "0xD02424", VA = "0xD02424", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200028F")]
		[CompilerGenerated]
		private sealed class <ActivateEverythingBloomsLights>d__24 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000DCD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000DCE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000DCF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HowToPlantStateController <>4__this;

			[Token(Token = "0x17000140")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000C4F")]
				[Address(RVA = "0xD02568", Offset = "0xD02568", VA = "0xD02568", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000141")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000C51")]
				[Address(RVA = "0xD025B0", Offset = "0xD025B0", VA = "0xD025B0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000C4C")]
			[Address(RVA = "0xD01838", Offset = "0xD01838", VA = "0xD01838")]
			[DebuggerHidden]
			public <ActivateEverythingBloomsLights>d__24(int <>1__state)
			{
			}

			[Token(Token = "0x6000C4D")]
			[Address(RVA = "0xD0246C", Offset = "0xD0246C", VA = "0xD0246C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000C4E")]
			[Address(RVA = "0xD02470", Offset = "0xD02470", VA = "0xD02470", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000C50")]
			[Address(RVA = "0xD02570", Offset = "0xD02570", VA = "0xD02570", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000290")]
		[CompilerGenerated]
		private sealed class <ActivateEverythingBloomsObjects>d__25 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000DD0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000DD1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000DD2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HowToPlantStateController <>4__this;

			[Token(Token = "0x17000142")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000C55")]
				[Address(RVA = "0xD027A8", Offset = "0xD027A8", VA = "0xD027A8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000143")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000C57")]
				[Address(RVA = "0xD027F0", Offset = "0xD027F0", VA = "0xD027F0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000C52")]
			[Address(RVA = "0xD01860", Offset = "0xD01860", VA = "0xD01860")]
			[DebuggerHidden]
			public <ActivateEverythingBloomsObjects>d__25(int <>1__state)
			{
			}

			[Token(Token = "0x6000C53")]
			[Address(RVA = "0xD025B8", Offset = "0xD025B8", VA = "0xD025B8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000C54")]
			[Address(RVA = "0xD025BC", Offset = "0xD025BC", VA = "0xD025BC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000C56")]
			[Address(RVA = "0xD027B0", Offset = "0xD027B0", VA = "0xD027B0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000291")]
		[CompilerGenerated]
		private sealed class <AnimatePosts>d__42 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000DD3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000DD4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000DD5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HowToPlantStateController <>4__this;

			[Token(Token = "0x4000DD6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private WaitForSeconds <wait>5__2;

			[Token(Token = "0x4000DD7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Animation[] <>7__wrap2;

			[Token(Token = "0x4000DD8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <>7__wrap3;

			[Token(Token = "0x17000144")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000C5B")]
				[Address(RVA = "0xD02918", Offset = "0xD02918", VA = "0xD02918", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000145")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000C5D")]
				[Address(RVA = "0xD02960", Offset = "0xD02960", VA = "0xD02960", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000C58")]
			[Address(RVA = "0xD02130", Offset = "0xD02130", VA = "0xD02130")]
			[DebuggerHidden]
			public <AnimatePosts>d__42(int <>1__state)
			{
			}

			[Token(Token = "0x6000C59")]
			[Address(RVA = "0xD027F8", Offset = "0xD027F8", VA = "0xD027F8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000C5A")]
			[Address(RVA = "0xD027FC", Offset = "0xD027FC", VA = "0xD027FC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000C5C")]
			[Address(RVA = "0xD02920", Offset = "0xD02920", VA = "0xD02920", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int rocksInWheelbarrowToAdvance;

		[Token(Token = "0x4000DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Wheelbarrow wheelbarrow;

		[Token(Token = "0x4000DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FadeOutOnDisable rocksFade;

		[Token(Token = "0x4000DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject[] bowlsToPlace;

		[Token(Token = "0x4000DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Dictionary<GameObject, bool> bowlsPlaced;

		[Token(Token = "0x4000DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public AdvanceScene rocksAdvance;

		[Token(Token = "0x4000DB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Material[] plantMaterials;

		[Token(Token = "0x4000DB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<Color> oldPlantColors;

		[Token(Token = "0x4000DBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool plantFaded;

		[Token(Token = "0x4000DBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public int numSeedsToPlant;

		[Token(Token = "0x4000DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Animation[] fencePeices;

		[Token(Token = "0x4000DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private int numSeedsPlanted;

		[Token(Token = "0x4000DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private SceneManager sceneMan;

		[Token(Token = "0x4000DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float tableAnimationTime;

		[Token(Token = "0x4000DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private bool animatingPosts;

		[Token(Token = "0x4000DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public GameObject[] EverythingBloomsLights;

		[Token(Token = "0x4000DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public GameObject[] PlantSeedsAndEverythingBloomsShared;

		[Token(Token = "0x4000DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public LightGroup[] TableOnPourchLightGroups;

		[Token(Token = "0x4000DC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public float EverythingBloomsLightsActivationDelay;

		[Token(Token = "0x4000DC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public GameObject TableOnPorchGameObject;

		[Token(Token = "0x4000DC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public GameObject EverythingBloomsLayuout;

		[Token(Token = "0x6000C29")]
		[Address(RVA = "0xD01284", Offset = "0xD01284", VA = "0xD01284", Slot = "7")]
		public override void OnStateChange()
		{
		}

		[Token(Token = "0x6000C2A")]
		[Address(RVA = "0xD01718", Offset = "0xD01718", VA = "0xD01718")]
		[IteratorStateMachine(typeof(<CoEnableTableOnPorchObjects>d__22))]
		private IEnumerator CoEnableTableOnPorchObjects()
		{
			return null;
		}

		[Token(Token = "0x6000C2B")]
		[Address(RVA = "0xD01780", Offset = "0xD01780", VA = "0xD01780")]
		[IteratorStateMachine(typeof(<CoEnableTableOnPourchLights>d__23))]
		private IEnumerator CoEnableTableOnPourchLights()
		{
			return null;
		}

		[Token(Token = "0x6000C2C")]
		[Address(RVA = "0xD01648", Offset = "0xD01648", VA = "0xD01648")]
		[IteratorStateMachine(typeof(<ActivateEverythingBloomsLights>d__24))]
		private IEnumerator ActivateEverythingBloomsLights()
		{
			return null;
		}

		[Token(Token = "0x6000C2D")]
		[Address(RVA = "0xD016B0", Offset = "0xD016B0", VA = "0xD016B0")]
		[IteratorStateMachine(typeof(<ActivateEverythingBloomsObjects>d__25))]
		private IEnumerator ActivateEverythingBloomsObjects()
		{
			return null;
		}

		[Token(Token = "0x6000C2E")]
		[Address(RVA = "0xD01888", Offset = "0xD01888", VA = "0xD01888", Slot = "9")]
		protected override State GetStartingState()
		{
			return default(State);
		}

		[Token(Token = "0x6000C2F")]
		[Address(RVA = "0xD01890", Offset = "0xD01890", VA = "0xD01890", Slot = "5")]
		public override void Start()
		{
		}

		[Token(Token = "0x6000C30")]
		[Address(RVA = "0xD0197C", Offset = "0xD0197C", VA = "0xD0197C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000C31")]
		[Address(RVA = "0xD01984", Offset = "0xD01984", VA = "0xD01984", Slot = "6")]
		public override void Update()
		{
		}

		[Token(Token = "0x6000C32")]
		[Address(RVA = "0xD01AB8", Offset = "0xD01AB8", VA = "0xD01AB8")]
		public void PickupRock()
		{
		}

		[Token(Token = "0x6000C33")]
		[Address(RVA = "0xD01B80", Offset = "0xD01B80", VA = "0xD01B80")]
		private void Next()
		{
		}

		[Token(Token = "0x6000C34")]
		[Address(RVA = "0xD01B98", Offset = "0xD01B98", VA = "0xD01B98")]
		public void GrabbedNotice()
		{
		}

		[Token(Token = "0x6000C35")]
		[Address(RVA = "0xD01C08", Offset = "0xD01C08", VA = "0xD01C08")]
		public void PickupBowl(GameObject gameObject)
		{
		}

		[Token(Token = "0x6000C36")]
		[Address(RVA = "0xD01D98", Offset = "0xD01D98", VA = "0xD01D98")]
		public void BowlPlaced(GameObject gameObject)
		{
		}

		[Token(Token = "0x6000C37")]
		[Address(RVA = "0xD0207C", Offset = "0xD0207C", VA = "0xD0207C")]
		public void FadePlants(float duration)
		{
		}

		[Token(Token = "0x6000C38")]
		[Address(RVA = "0xD02080", Offset = "0xD02080", VA = "0xD02080")]
		public void FadeInPlants(float duration)
		{
		}

		[Token(Token = "0x6000C39")]
		[Address(RVA = "0xD02084", Offset = "0xD02084", VA = "0xD02084")]
		public void FadePlantsNotice()
		{
		}

		[Token(Token = "0x6000C3A")]
		[Address(RVA = "0xD02088", Offset = "0xD02088", VA = "0xD02088")]
		public void FadePlants(Color color, float duration)
		{
		}

		[Token(Token = "0x6000C3B")]
		[Address(RVA = "0xD01980", Offset = "0xD01980", VA = "0xD01980")]
		private void ResetPlantMaterials()
		{
		}

		[Token(Token = "0x6000C3C")]
		[Address(RVA = "0xD0208C", Offset = "0xD0208C", VA = "0xD0208C")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6000C3D")]
		[Address(RVA = "0xD02090", Offset = "0xD02090", VA = "0xD02090")]
		public void PostHammered()
		{
		}

		[Token(Token = "0x6000C3E")]
		[Address(RVA = "0xD020C8", Offset = "0xD020C8", VA = "0xD020C8")]
		[IteratorStateMachine(typeof(<AnimatePosts>d__42))]
		private IEnumerator AnimatePosts()
		{
			return null;
		}

		[Token(Token = "0x6000C3F")]
		[Address(RVA = "0xD02158", Offset = "0xD02158", VA = "0xD02158")]
		public HowToPlantStateController()
		{
		}
	}
	[Token(Token = "0x2000292")]
	public class HuntingForInformationStateController : WhiteboxStateController
	{
		[Token(Token = "0x6000C5E")]
		[Address(RVA = "0xD02968", Offset = "0xD02968", VA = "0xD02968", Slot = "9")]
		protected override State GetStartingState()
		{
			return default(State);
		}

		[Token(Token = "0x6000C5F")]
		[Address(RVA = "0xD02970", Offset = "0xD02970", VA = "0xD02970")]
		public HuntingForInformationStateController()
		{
		}
	}
	[Token(Token = "0x2000293")]
	[ExecuteInEditMode]
	public class ImmigrationStateController : WhiteboxStateController
	{
		[Token(Token = "0x4000DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Material interactiveMaterial;

		[Token(Token = "0x4000DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject passport;

		[Token(Token = "0x4000DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GameObject counter;

		[Token(Token = "0x4000DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject stamp;

		[Token(Token = "0x4000DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GameObject stampAnimationTrigger;

		[Token(Token = "0x4000DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Animation stampAnimation;

		[Token(Token = "0x4000DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Transform canadaLocation;

		[Token(Token = "0x4000DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform door;

		[Token(Token = "0x4000DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public AudioSource doorCloseSound;

		[Token(Token = "0x4000DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public LightGroup backLights;

		[Token(Token = "0x4000DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public UnityEvent passportPickedUp;

		[Token(Token = "0x4000DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Transform stepThroughHint;

		[Token(Token = "0x4000DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public GameObject Passport;

		[Token(Token = "0x4000DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Vector3 stampPosition;

		[Token(Token = "0x4000DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private bool door_open;

		[Token(Token = "0x4000DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC5")]
		private bool canadaEntered;

		[Token(Token = "0x4000DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public LightGroup[] sceneLights;

		[Token(Token = "0x6000C60")]
		[Address(RVA = "0xD02978", Offset = "0xD02978", VA = "0xD02978", Slot = "7")]
		public override void OnStateChange()
		{
		}

		[Token(Token = "0x6000C61")]
		[Address(RVA = "0xD02BD0", Offset = "0xD02BD0", VA = "0xD02BD0", Slot = "9")]
		protected override State GetStartingState()
		{
			return default(State);
		}

		[Token(Token = "0x6000C62")]
		[Address(RVA = "0xD02BD8", Offset = "0xD02BD8", VA = "0xD02BD8")]
		public void StampPassport()
		{
		}

		[Token(Token = "0x6000C63")]
		[Address(RVA = "0xD02C28", Offset = "0xD02C28", VA = "0xD02C28")]
		public void ReEnablePassport()
		{
		}

		[Token(Token = "0x6000C64")]
		[Address(RVA = "0xD02D8C", Offset = "0xD02D8C", VA = "0xD02D8C", Slot = "6")]
		public override void Update()
		{
		}

		[Token(Token = "0x6000C65")]
		[Address(RVA = "0xD02E38", Offset = "0xD02E38", VA = "0xD02E38")]
		public void CanadaEntered()
		{
		}

		[Token(Token = "0x6000C66")]
		[Address(RVA = "0xD02FF0", Offset = "0xD02FF0", VA = "0xD02FF0")]
		private void EnterCanadaLightsFaded()
		{
		}

		[Token(Token = "0x6000C67")]
		[Address(RVA = "0xD03124", Offset = "0xD03124", VA = "0xD03124")]
		public void PickupPassport()
		{
		}

		[Token(Token = "0x6000C68")]
		[Address(RVA = "0xD03308", Offset = "0xD03308", VA = "0xD03308")]
		public void DropPassport()
		{
		}

		[Token(Token = "0x6000C69")]
		[Address(RVA = "0xD03464", Offset = "0xD03464", VA = "0xD03464")]
		public ImmigrationStateController()
		{
		}
	}
	[Token(Token = "0x2000294")]
	[ExecuteInEditMode]
	public class InternmentStateController : WhiteboxStateController
	{
		[Token(Token = "0x4000DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject light1;

		[Token(Token = "0x4000DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject light2;

		[Token(Token = "0x4000DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public ParticleSystem[] snowParticles;

		[Token(Token = "0x4000DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool nextState;

		[Token(Token = "0x6000C6B")]
		[Address(RVA = "0xD0354C", Offset = "0xD0354C", VA = "0xD0354C", Slot = "9")]
		protected override State GetStartingState()
		{
			return default(State);
		}

		[Token(Token = "0x6000C6C")]
		[Address(RVA = "0xD03554", Offset = "0xD03554", VA = "0xD03554")]
		public void SwitchFlipped()
		{
		}

		[Token(Token = "0x6000C6D")]
		[Address(RVA = "0xD035CC", Offset = "0xD035CC", VA = "0xD035CC")]
		public void StopSnow()
		{
		}

		[Token(Token = "0x6000C6E")]
		[Address(RVA = "0xD036AC", Offset = "0xD036AC", VA = "0xD036AC")]
		public void Switch1()
		{
		}

		[Token(Token = "0x6000C6F")]
		[Address(RVA = "0xD03744", Offset = "0xD03744", VA = "0xD03744")]
		public void Switch2()
		{
		}

		[Token(Token = "0x6000C70")]
		[Address(RVA = "0xD036D8", Offset = "0xD036D8", VA = "0xD036D8")]
		public void CheckNextState()
		{
		}

		[Token(Token = "0x6000C71")]
		[Address(RVA = "0xD03770", Offset = "0xD03770", VA = "0xD03770")]
		public InternmentStateController()
		{
		}
	}
	[Token(Token = "0x2000295")]
	[ExecuteInEditMode]
	public class JapaneseOfficeStateController : WhiteboxStateController
	{
		[Token(Token = "0x4000DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 horseshoePosition;

		[Token(Token = "0x4000DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 horseshoeRotation;

		[Token(Token = "0x4000DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Collider horseshoeInteraciton;

		[Token(Token = "0x4000DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public BookPodium podium;

		[Token(Token = "0x4000DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool touched_horseshoe;

		[Token(Token = "0x4000DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		private bool touched_photo;

		[Token(Token = "0x6000C72")]
		[Address(RVA = "0xD03778", Offset = "0xD03778", VA = "0xD03778")]
		public void TurnPage()
		{
		}

		[Token(Token = "0x6000C73")]
		[Address(RVA = "0xD037E4", Offset = "0xD037E4", VA = "0xD037E4")]
		public void HiroshimaPageOpen()
		{
		}

		[Token(Token = "0x6000C74")]
		[Address(RVA = "0xD03854", Offset = "0xD03854", VA = "0xD03854")]
		public void EnableBookPage()
		{
		}

		[Token(Token = "0x6000C75")]
		[Address(RVA = "0xD038E0", Offset = "0xD038E0", VA = "0xD038E0")]
		public void FirstTouch(GameObject gameObject)
		{
		}

		[Token(Token = "0x6000C76")]
		[Address(RVA = "0xD03A60", Offset = "0xD03A60", VA = "0xD03A60")]
		public void HorseshoeThrown()
		{
		}

		[Token(Token = "0x6000C77")]
		[Address(RVA = "0xD03AD0", Offset = "0xD03AD0", VA = "0xD03AD0")]
		public void EnableHorseshoe()
		{
		}

		[Token(Token = "0x6000C78")]
		[Address(RVA = "0xD03AF0", Offset = "0xD03AF0", VA = "0xD03AF0")]
		public JapaneseOfficeStateController()
		{
		}
	}
	[Token(Token = "0x2000296")]
	[ExecuteInEditMode]
	public class MakeWishStateController : WhiteboxStateController
	{
		[Token(Token = "0x4000DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public PrototypeScene timeTravel;

		[Token(Token = "0x4000DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject bookInteraction;

		[Token(Token = "0x4000DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Animator bookAnimator;

		[Token(Token = "0x4000DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Collider horseshoeInteraciton;

		[Token(Token = "0x4000DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform corkBoard;

		[Token(Token = "0x4000DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public AudioSource r1a;

		[Token(Token = "0x4000DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public AudioSource r1b;

		[Token(Token = "0x4000DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public AudioSource r2;

		[Token(Token = "0x4000DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public GameObject r2Playing;

		[Token(Token = "0x4000DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool played_horseshoe;

		[Token(Token = "0x4000DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		private bool played_photo;

		[Token(Token = "0x6000C79")]
		[Address(RVA = "0xD03B10", Offset = "0xD03B10", VA = "0xD03B10", Slot = "7")]
		public override void OnStateChange()
		{
		}

		[Token(Token = "0x6000C7A")]
		[Address(RVA = "0xD03F80", Offset = "0xD03F80", VA = "0xD03F80")]
		public void FlipCorkboard()
		{
		}

		[Token(Token = "0x6000C7B")]
		[Address(RVA = "0xD0402C", Offset = "0xD0402C", VA = "0xD0402C")]
		public void NorenOtherSide()
		{
		}

		[Token(Token = "0x6000C7C")]
		[Address(RVA = "0xD0413C", Offset = "0xD0413C", VA = "0xD0413C", Slot = "6")]
		public override void Update()
		{
		}

		[Token(Token = "0x6000C7D")]
		[Address(RVA = "0xD04190", Offset = "0xD04190", VA = "0xD04190")]
		public void MakePaperInteractive()
		{
		}

		[Token(Token = "0x6000C7E")]
		[Address(RVA = "0xD04194", Offset = "0xD04194", VA = "0xD04194")]
		public void BookOpened()
		{
		}

		[Token(Token = "0x6000C7F")]
		[Address(RVA = "0xD041CC", Offset = "0xD041CC", VA = "0xD041CC")]
		public void BookClosed()
		{
		}

		[Token(Token = "0x6000C80")]
		[Address(RVA = "0xD041D0", Offset = "0xD041D0", VA = "0xD041D0")]
		public void WhyDidHeLeaveStoryPage()
		{
		}

		[Token(Token = "0x6000C81")]
		[Address(RVA = "0xD041D4", Offset = "0xD041D4", VA = "0xD041D4")]
		public void ButtonPressed()
		{
		}

		[Token(Token = "0x6000C82")]
		[Address(RVA = "0xD0423C", Offset = "0xD0423C", VA = "0xD0423C")]
		public MakeWishStateController()
		{
		}
	}
	[Token(Token = "0x2000297")]
	public class ModernJapaneseRoomStateController : WhiteboxStateController
	{
		[Token(Token = "0x6000C83")]
		[Address(RVA = "0xD04244", Offset = "0xD04244", VA = "0xD04244", Slot = "9")]
		protected override State GetStartingState()
		{
			return default(State);
		}

		[Token(Token = "0x6000C84")]
		[Address(RVA = "0xD0424C", Offset = "0xD0424C", VA = "0xD0424C")]
		public ModernJapaneseRoomStateController()
		{
		}
	}
	[Token(Token = "0x2000298")]
	public class MuseumStateController : WhiteboxStateController
	{
		[Token(Token = "0x6000C85")]
		[Address(RVA = "0xD04254", Offset = "0xD04254", VA = "0xD04254", Slot = "9")]
		protected override State GetStartingState()
		{
			return default(State);
		}

		[Token(Token = "0x6000C86")]
		[Address(RVA = "0xD0425C", Offset = "0xD0425C", VA = "0xD0425C")]
		public MuseumStateController()
		{
		}
	}
	[Token(Token = "0x2000299")]
	public class PlaneStateController : WhiteboxStateController
	{
		[Token(Token = "0x4000DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform passportLocation;

		[Token(Token = "0x4000E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform ticketStartPosition;

		[Token(Token = "0x4000E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform passportHomeLocation;

		[Token(Token = "0x4000E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject[] subscenes;

		[Token(Token = "0x4000E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public List<AudioSourceControl> subSceneAudio;

		[Token(Token = "0x4000E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public GameObject passport;

		[Token(Token = "0x4000E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public GameObject ticket;

		[Token(Token = "0x4000E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public GameObject officerAnims;

		[Token(Token = "0x4000E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int subScene;

		[Token(Token = "0x6000C87")]
		[Address(RVA = "0xD04264", Offset = "0xD04264", VA = "0xD04264", Slot = "4")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6000C88")]
		[Address(RVA = "0xD042CC", Offset = "0xD042CC", VA = "0xD042CC", Slot = "9")]
		protected override State GetStartingState()
		{
			return default(State);
		}

		[Token(Token = "0x6000C89")]
		[Address(RVA = "0xD042D4", Offset = "0xD042D4", VA = "0xD042D4")]
		public void PassportGrabbed()
		{
		}

		[Token(Token = "0x6000C8A")]
		[Address(RVA = "0xD043A8", Offset = "0xD043A8", VA = "0xD043A8")]
		public void NextState()
		{
		}

		[Token(Token = "0x6000C8B")]
		[Address(RVA = "0xD043F4", Offset = "0xD043F4", VA = "0xD043F4")]
		public void PassportPlaced()
		{
		}

		[Token(Token = "0x6000C8C")]
		[Address(RVA = "0xD04564", Offset = "0xD04564", VA = "0xD04564")]
		private void EnableTicket()
		{
		}

		[Token(Token = "0x6000C8D")]
		[Address(RVA = "0xD04568", Offset = "0xD04568", VA = "0xD04568")]
		public void TicketGrabbed()
		{
		}

		[Token(Token = "0x6000C8E")]
		[Address(RVA = "0xD045DC", Offset = "0xD045DC", VA = "0xD045DC")]
		public void AdvanceSubScene()
		{
		}

		[Token(Token = "0x6000C8F")]
		[Address(RVA = "0xD04748", Offset = "0xD04748", VA = "0xD04748")]
		public PlaneStateController()
		{
		}
	}
	[Token(Token = "0x200029A")]
	public class StreetStateController : WhiteboxStateController
	{
		[Token(Token = "0x6000C90")]
		[Address(RVA = "0xD05750", Offset = "0xD05750", VA = "0xD05750", Slot = "9")]
		protected override State GetStartingState()
		{
			return default(State);
		}

		[Token(Token = "0x6000C91")]
		[Address(RVA = "0xD05758", Offset = "0xD05758", VA = "0xD05758")]
		public StreetStateController()
		{
		}
	}
	[Token(Token = "0x200029B")]
	[ExecuteInEditMode]
	public class SuitcasePackingStateController : WhiteboxStateController
	{
		[Token(Token = "0x4000E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AdvanceScene packingSceneAdvance;

		[Token(Token = "0x4000E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool suitcaseGrabbed;

		[Token(Token = "0x6000C92")]
		[Address(RVA = "0xD05760", Offset = "0xD05760", VA = "0xD05760", Slot = "7")]
		public override void OnStateChange()
		{
		}

		[Token(Token = "0x6000C93")]
		[Address(RVA = "0xD05768", Offset = "0xD05768", VA = "0xD05768", Slot = "9")]
		protected override State GetStartingState()
		{
			return default(State);
		}

		[Token(Token = "0x6000C94")]
		[Address(RVA = "0xD05770", Offset = "0xD05770", VA = "0xD05770")]
		public void CloseSuitcase()
		{
		}

		[Token(Token = "0x6000C95")]
		[Address(RVA = "0xD057E4", Offset = "0xD057E4", VA = "0xD057E4")]
		public void PickupSuitcase()
		{
		}

		[Token(Token = "0x6000C96")]
		[Address(RVA = "0xD0581C", Offset = "0xD0581C", VA = "0xD0581C")]
		public SuitcasePackingStateController()
		{
		}
	}
	[Token(Token = "0x200029C")]
	public class PickupSeeds : MonoBehaviour
	{
		[Token(Token = "0x200029D")]
		[CompilerGenerated]
		private sealed class <ReleaseParticles>d__17 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000E19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000E1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Hand hand;

			[Token(Token = "0x4000E1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public GameObject seeds;

			[Token(Token = "0x4000E1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public PickupSeeds <>4__this;

			[Token(Token = "0x4000E1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private Transform <attachmentPoint>5__2;

			[Token(Token = "0x4000E1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private ParticleSystem.Particle[] <m_Particles>5__3;

			[Token(Token = "0x4000E1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private int <numParticlesAlive>5__4;

			[Token(Token = "0x4000E20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private ParticleSystem <ps>5__5;

			[Token(Token = "0x4000E21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private ParticleSeeds <particleSeeds>5__6;

			[Token(Token = "0x4000E22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private int <particlesReleased>5__7;

			[Token(Token = "0x17000146")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000CA1")]
				[Address(RVA = "0xD06A64", Offset = "0xD06A64", VA = "0xD06A64", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000147")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000CA3")]
				[Address(RVA = "0xD06AAC", Offset = "0xD06AAC", VA = "0xD06AAC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000C9E")]
			[Address(RVA = "0xD05F18", Offset = "0xD05F18", VA = "0xD05F18")]
			[DebuggerHidden]
			public <ReleaseParticles>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x6000C9F")]
			[Address(RVA = "0xD061B8", Offset = "0xD061B8", VA = "0xD061B8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000CA0")]
			[Address(RVA = "0xD061BC", Offset = "0xD061BC", VA = "0xD061BC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000CA2")]
			[Address(RVA = "0xD06A6C", Offset = "0xD06A6C", VA = "0xD06A6C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ParticleSeeds.SeedBehaviour plantingBehaviour;

		[Token(Token = "0x4000E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform flowers;

		[Token(Token = "0x4000E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractiveMaterialHint interactiveMaterialHint;

		[Token(Token = "0x4000E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int numberOfSeeds;

		[Token(Token = "0x4000E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject seedsPrefab;

		[Token(Token = "0x4000E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Collider[] seedsCollider;

		[Token(Token = "0x4000E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool[] seedsPlanted;

		[Token(Token = "0x4000E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Hand[] hands;

		[Token(Token = "0x4000E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GameObject[] seeds;

		[Token(Token = "0x4000E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public UnityEvent pickupSeeds;

		[Token(Token = "0x4000E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public UnityEvent releaseSeeds;

		[Token(Token = "0x4000E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public UnityEvent planting;

		[Token(Token = "0x4000E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public UnityEvent seedPlanted;

		[Token(Token = "0x4000E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int plantedCount;

		[Token(Token = "0x6000C97")]
		[Address(RVA = "0xD05824", Offset = "0xD05824", VA = "0xD05824")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C98")]
		[Address(RVA = "0xD058D0", Offset = "0xD058D0", VA = "0xD058D0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C99")]
		[Address(RVA = "0xD05DF4", Offset = "0xD05DF4", VA = "0xD05DF4")]
		public void SeedPlanted(int colliderIdx)
		{
		}

		[Token(Token = "0x6000C9A")]
		[Address(RVA = "0xD05D78", Offset = "0xD05D78", VA = "0xD05D78")]
		[IteratorStateMachine(typeof(<ReleaseParticles>d__17))]
		private IEnumerator ReleaseParticles(Hand hand, GameObject seeds)
		{
			return null;
		}

		[Token(Token = "0x6000C9B")]
		[Address(RVA = "0xD05F40", Offset = "0xD05F40", VA = "0xD05F40")]
		public void OnHandHoverStart(Hand hand)
		{
		}

		[Token(Token = "0x6000C9C")]
		[Address(RVA = "0xD0609C", Offset = "0xD0609C", VA = "0xD0609C")]
		public void OnHandHoverEnd(Hand hand)
		{
		}

		[Token(Token = "0x6000C9D")]
		[Address(RVA = "0xD061B0", Offset = "0xD061B0", VA = "0xD061B0")]
		public PickupSeeds()
		{
		}
	}
	[Token(Token = "0x200029E")]
	public class SetParticleDensity : MonoBehaviour
	{
		[Token(Token = "0x4000E23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ParticleDensity particleDensity;

		[Token(Token = "0x6000CA4")]
		[Address(RVA = "0xD06AB4", Offset = "0xD06AB4", VA = "0xD06AB4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000CA5")]
		[Address(RVA = "0xD06B0C", Offset = "0xD06B0C", VA = "0xD06B0C")]
		public SetParticleDensity()
		{
		}
	}
	[Token(Token = "0x200029F")]
	[ExecuteInEditMode]
	public class SetPostProcessProfile : MonoBehaviour
	{
		[Token(Token = "0x4000E24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Volume ppv;

		[Token(Token = "0x4000E25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ScriptableFog fog;

		[Token(Token = "0x4000E26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fogTransitionDuration;

		[Token(Token = "0x4000E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static List<Tween> tweens;

		[Token(Token = "0x17000148")]
		public static SetPostProcessProfile current
		{
			[Token(Token = "0x6000CA7")]
			[Address(RVA = "0xD06BBC", Offset = "0xD06BBC", VA = "0xD06BBC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CA8")]
			[Address(RVA = "0xD06C14", Offset = "0xD06C14", VA = "0xD06C14")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000CA6")]
		[Address(RVA = "0xD06B14", Offset = "0xD06B14", VA = "0xD06B14")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000CA9")]
		[Address(RVA = "0xD06C70", Offset = "0xD06C70", VA = "0xD06C70")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000CAA")]
		[Address(RVA = "0xD07830", Offset = "0xD07830", VA = "0xD07830")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000CAB")]
		[Address(RVA = "0xD07944", Offset = "0xD07944", VA = "0xD07944")]
		public static void DisableFog(float duration)
		{
		}

		[Token(Token = "0x6000CAC")]
		[Address(RVA = "0xD06D80", Offset = "0xD06D80", VA = "0xD06D80")]
		private void ApplyFog()
		{
		}

		[Token(Token = "0x6000CAD")]
		[Address(RVA = "0xD07FF0", Offset = "0xD07FF0", VA = "0xD07FF0")]
		public static void KillTweens()
		{
		}

		[Token(Token = "0x6000CAE")]
		[Address(RVA = "0xD081AC", Offset = "0xD081AC", VA = "0xD081AC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CAF")]
		[Address(RVA = "0xD081B0", Offset = "0xD081B0", VA = "0xD081B0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000CB0")]
		[Address(RVA = "0xD081B4", Offset = "0xD081B4", VA = "0xD081B4")]
		public SetPostProcessProfile()
		{
		}
	}
	[Token(Token = "0x20002A1")]
	public class SourceMixer : MonoBehaviour
	{
		[Token(Token = "0x4000E38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioMixer aMixer;

		[Token(Token = "0x4000E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text mixerName;

		[Token(Token = "0x4000E3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InputField volumeInput;

		[Token(Token = "0x4000E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Slider volumeSlider;

		[Token(Token = "0x4000E3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public InputField minDInput;

		[Token(Token = "0x4000E3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Slider minDSlider;

		[Token(Token = "0x4000E3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public InputField maxDInput;

		[Token(Token = "0x4000E3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Slider maxDSlider;

		[Token(Token = "0x4000E40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private AudioSource source;

		[Token(Token = "0x6000CC2")]
		[Address(RVA = "0xD0832C", Offset = "0xD0832C", VA = "0xD0832C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CC3")]
		[Address(RVA = "0xD08330", Offset = "0xD08330", VA = "0xD08330")]
		public void SetSource(AudioSource aSource)
		{
		}

		[Token(Token = "0x6000CC4")]
		[Address(RVA = "0xD08614", Offset = "0xD08614", VA = "0xD08614")]
		public void SetMinDLevel(float sliderValue)
		{
		}

		[Token(Token = "0x6000CC5")]
		[Address(RVA = "0xD08878", Offset = "0xD08878", VA = "0xD08878")]
		public void SetMinDValue(string value)
		{
		}

		[Token(Token = "0x6000CC6")]
		[Address(RVA = "0xD08674", Offset = "0xD08674", VA = "0xD08674")]
		public void SetVolumeLevel(float sliderValue)
		{
		}

		[Token(Token = "0x6000CC7")]
		[Address(RVA = "0xD088EC", Offset = "0xD088EC", VA = "0xD088EC")]
		public void SetVolumeValue(string value)
		{
		}

		[Token(Token = "0x6000CC8")]
		[Address(RVA = "0xD086D4", Offset = "0xD086D4", VA = "0xD086D4")]
		public void SetMaxDLevel(float sliderValue)
		{
		}

		[Token(Token = "0x6000CC9")]
		[Address(RVA = "0xD08960", Offset = "0xD08960", VA = "0xD08960")]
		public void SetMaxDValue(string value)
		{
		}

		[Token(Token = "0x6000CCA")]
		[Address(RVA = "0xD08734", Offset = "0xD08734", VA = "0xD08734")]
		public void Save()
		{
		}

		[Token(Token = "0x6000CCB")]
		[Address(RVA = "0xD089D4", Offset = "0xD089D4", VA = "0xD089D4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000CCC")]
		[Address(RVA = "0xD089D8", Offset = "0xD089D8", VA = "0xD089D8")]
		public SourceMixer()
		{
		}
	}
	[Token(Token = "0x20002A2")]
	public class Stage : MonoBehaviour
	{
		[Token(Token = "0x4000E41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject stage;

		[Token(Token = "0x4000E42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Light blastLight;

		[Token(Token = "0x4000E43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PostProcessVolume ppv;

		[Token(Token = "0x4000E44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float lightIntensity;

		[Token(Token = "0x4000E45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float fog_density_main;

		[Token(Token = "0x4000E46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float fog_density_blast;

		[Token(Token = "0x6000CCD")]
		[Address(RVA = "0xD089E0", Offset = "0xD089E0", VA = "0xD089E0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CCE")]
		[Address(RVA = "0xD08A08", Offset = "0xD08A08", VA = "0xD08A08")]
		private void Update()
		{
		}

		[Token(Token = "0x6000CCF")]
		[Address(RVA = "0xD08A0C", Offset = "0xD08A0C", VA = "0xD08A0C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000CD0")]
		[Address(RVA = "0xD08A8C", Offset = "0xD08A8C", VA = "0xD08A8C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000CD1")]
		[Address(RVA = "0xD08B0C", Offset = "0xD08B0C", VA = "0xD08B0C")]
		private void StateChanged()
		{
		}

		[Token(Token = "0x6000CD2")]
		[Address(RVA = "0xD08B90", Offset = "0xD08B90", VA = "0xD08B90")]
		public Stage()
		{
		}
	}
	[Token(Token = "0x20002A3")]
	public class StartCanvas : MonoBehaviour
	{
		[Token(Token = "0x6000CD3")]
		[Address(RVA = "0xD08BA4", Offset = "0xD08BA4", VA = "0xD08BA4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CD4")]
		[Address(RVA = "0xD08BA8", Offset = "0xD08BA8", VA = "0xD08BA8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000CD5")]
		[Address(RVA = "0xD08CAC", Offset = "0xD08CAC", VA = "0xD08CAC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000CD6")]
		[Address(RVA = "0xD08C30", Offset = "0xD08C30", VA = "0xD08C30")]
		private void StateChanged()
		{
		}

		[Token(Token = "0x6000CD7")]
		[Address(RVA = "0xD08D2C", Offset = "0xD08D2C", VA = "0xD08D2C")]
		public void StartBOD()
		{
		}

		[Token(Token = "0x6000CD8")]
		[Address(RVA = "0xD08D7C", Offset = "0xD08D7C", VA = "0xD08D7C")]
		public StartCanvas()
		{
		}
	}
	[Token(Token = "0x20002A4")]
	public class StateConditionalAdvance : MonoBehaviour
	{
		[Token(Token = "0x4000E47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public State advanceableState;

		[Token(Token = "0x6000CD9")]
		[Address(RVA = "0xD08D84", Offset = "0xD08D84", VA = "0xD08D84")]
		public void ConditionalAdvance()
		{
		}

		[Token(Token = "0x6000CDA")]
		[Address(RVA = "0xD08E00", Offset = "0xD08E00", VA = "0xD08E00")]
		public StateConditionalAdvance()
		{
		}
	}
	[Token(Token = "0x20002A5")]
	public class SuitcaseAttachContents : MonoBehaviour
	{
		[Token(Token = "0x4000E48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<DropLocationLTP> points;

		[Token(Token = "0x4000E49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEvent AllPacked;

		[Token(Token = "0x4000E4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<Collider> _cols;

		[Token(Token = "0x6000CDB")]
		[Address(RVA = "0xD08E08", Offset = "0xD08E08", VA = "0xD08E08")]
		public void Start()
		{
		}

		[Token(Token = "0x6000CDC")]
		[Address(RVA = "0xD08FCC", Offset = "0xD08FCC", VA = "0xD08FCC")]
		public void OnItemPlaced()
		{
		}

		[Token(Token = "0x6000CDD")]
		[Address(RVA = "0xD09278", Offset = "0xD09278", VA = "0xD09278")]
		public void OnLidClosed()
		{
		}

		[Token(Token = "0x6000CDE")]
		[Address(RVA = "0xD0937C", Offset = "0xD0937C", VA = "0xD0937C")]
		public SuitcaseAttachContents()
		{
		}
	}
	[Token(Token = "0x20002A6")]
	public class SuitcaseContents : MonoBehaviour
	{
		[Token(Token = "0x4000E4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform blocker;

		[Token(Token = "0x4000E4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<Rigidbody> requiredObjects;

		[Token(Token = "0x4000E4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEvent AllPacked;

		[Token(Token = "0x4000E4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<Rigidbody> contents;

		[Token(Token = "0x4000E4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool packed;

		[Token(Token = "0x4000E50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<Collider> _cols;

		[Token(Token = "0x4000E51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static List<Renderer> _renderers;

		[Token(Token = "0x6000CE0")]
		[Address(RVA = "0xD09410", Offset = "0xD09410", VA = "0xD09410")]
		public void OnLidClosed()
		{
		}

		[Token(Token = "0x6000CE1")]
		[Address(RVA = "0xD09558", Offset = "0xD09558", VA = "0xD09558")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000CE2")]
		[Address(RVA = "0xD09700", Offset = "0xD09700", VA = "0xD09700")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000CE3")]
		[Address(RVA = "0xD097FC", Offset = "0xD097FC", VA = "0xD097FC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000CE4")]
		[Address(RVA = "0xD0A030", Offset = "0xD0A030", VA = "0xD0A030")]
		public SuitcaseContents()
		{
		}
	}
	[Token(Token = "0x20002A7")]
	public class SyncCharacterAnimation : MonoBehaviour
	{
		[Token(Token = "0x20002A8")]
		[CompilerGenerated]
		private sealed class <CheckSync>d__3 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000E55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000E56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SyncCharacterAnimation <>4__this;

			[Token(Token = "0x17000149")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000CEC")]
				[Address(RVA = "0xD0A3CC", Offset = "0xD0A3CC", VA = "0xD0A3CC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700014A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000CEE")]
				[Address(RVA = "0xD0A414", Offset = "0xD0A414", VA = "0xD0A414", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000CE9")]
			[Address(RVA = "0xD0A22C", Offset = "0xD0A22C", VA = "0xD0A22C")]
			[DebuggerHidden]
			public <CheckSync>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x6000CEA")]
			[Address(RVA = "0xD0A25C", Offset = "0xD0A25C", VA = "0xD0A25C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000CEB")]
			[Address(RVA = "0xD0A260", Offset = "0xD0A260", VA = "0xD0A260", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000CED")]
			[Address(RVA = "0xD0A3D4", Offset = "0xD0A3D4", VA = "0xD0A3D4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000E52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SCENE_CHARACTER characterID;

		[Token(Token = "0x4000E53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Animation animation;

		[Token(Token = "0x6000CE6")]
		[Address(RVA = "0xD0A184", Offset = "0xD0A184", VA = "0xD0A184")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000CE7")]
		[Address(RVA = "0xD0A1C4", Offset = "0xD0A1C4", VA = "0xD0A1C4")]
		[IteratorStateMachine(typeof(<CheckSync>d__3))]
		private IEnumerator CheckSync()
		{
			return null;
		}

		[Token(Token = "0x6000CE8")]
		[Address(RVA = "0xD0A254", Offset = "0xD0A254", VA = "0xD0A254")]
		public SyncCharacterAnimation()
		{
		}
	}
	[Token(Token = "0x20002A9")]
	public class InteractableExit : MonoBehaviour
	{
		[Token(Token = "0x20002AA")]
		[CompilerGenerated]
		private sealed class <TransitionOut>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000E64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000E65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public InteractableExit <>4__this;

			[Token(Token = "0x4000E66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Vector3 <vel>5__2;

			[Token(Token = "0x4000E67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private Vector3 <dir>5__3;

			[Token(Token = "0x4000E68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Vector3 <pos>5__4;

			[Token(Token = "0x4000E69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private WaitForFixedUpdate <ret>5__5;

			[Token(Token = "0x4000E6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private float <reelSpeed>5__6;

			[Token(Token = "0x1700014B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000CFB")]
				[Address(RVA = "0xD0B138", Offset = "0xD0B138", VA = "0xD0B138", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700014C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000CFD")]
				[Address(RVA = "0xD0B180", Offset = "0xD0B180", VA = "0xD0B180", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000CF8")]
			[Address(RVA = "0xD0A720", Offset = "0xD0A720", VA = "0xD0A720")]
			[DebuggerHidden]
			public <TransitionOut>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6000CF9")]
			[Address(RVA = "0xD0A880", Offset = "0xD0A880", VA = "0xD0A880", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000CFA")]
			[Address(RVA = "0xD0A884", Offset = "0xD0A884", VA = "0xD0A884", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000CFC")]
			[Address(RVA = "0xD0B140", Offset = "0xD0B140", VA = "0xD0B140", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000E57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public State state;

		[Token(Token = "0x4000E58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float randomDelay;

		[Token(Token = "0x4000E59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float swingDistance;

		[Token(Token = "0x4000E5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool specificDirection;

		[Token(Token = "0x4000E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float direction;

		[Token(Token = "0x4000E5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool attached;

		[Token(Token = "0x4000E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		private bool exiting;

		[Token(Token = "0x4000E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Hand hand;

		[Token(Token = "0x4000E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<Collider> colliders;

		[Token(Token = "0x4000E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static float MaxReelSpeed;

		[Token(Token = "0x4000E61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static float ReelAcceleration;

		[Token(Token = "0x4000E62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static float TargetHeight;

		[Token(Token = "0x6000CEF")]
		[Address(RVA = "0xD0A41C", Offset = "0xD0A41C", VA = "0xD0A41C")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6000CF0")]
		[Address(RVA = "0xD0A4B8", Offset = "0xD0A4B8", VA = "0xD0A4B8")]
		private void SceneManager_OnStateChange()
		{
		}

		[Token(Token = "0x6000CF1")]
		[Address(RVA = "0xD0A638", Offset = "0xD0A638", VA = "0xD0A638")]
		public void OnAttachedToHand(Hand hand)
		{
		}

		[Token(Token = "0x6000CF2")]
		[Address(RVA = "0xD0A648", Offset = "0xD0A648", VA = "0xD0A648")]
		public void OnDetachedFromHand(Hand hand)
		{
		}

		[Token(Token = "0x6000CF3")]
		[Address(RVA = "0xD0A700", Offset = "0xD0A700", VA = "0xD0A700")]
		public void ForceExit()
		{
		}

		[Token(Token = "0x6000CF4")]
		[Address(RVA = "0xD0A5D0", Offset = "0xD0A5D0", VA = "0xD0A5D0")]
		[IteratorStateMachine(typeof(<TransitionOut>d__13))]
		private IEnumerator TransitionOut()
		{
			return null;
		}

		[Token(Token = "0x6000CF5")]
		[Address(RVA = "0xD0A748", Offset = "0xD0A748", VA = "0xD0A748")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000CF6")]
		[Address(RVA = "0xD0A7C8", Offset = "0xD0A7C8", VA = "0xD0A7C8")]
		public InteractableExit()
		{
		}
	}
	[Token(Token = "0x20002AB")]
	public class AppEntitlementCheck : MonoBehaviour
	{
		[Token(Token = "0x6000CFE")]
		[Address(RVA = "0xD0B188", Offset = "0xD0B188", VA = "0xD0B188")]
		public AppEntitlementCheck()
		{
		}
	}
	[Token(Token = "0x20002AC")]
	public class EnablePauseMenu : MonoBehaviour
	{
		[Token(Token = "0x4000E6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool PauseEnabled;

		[Token(Token = "0x6000CFF")]
		[Address(RVA = "0xD0B190", Offset = "0xD0B190", VA = "0xD0B190")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000D00")]
		[Address(RVA = "0xD0B1E8", Offset = "0xD0B1E8", VA = "0xD0B1E8")]
		public EnablePauseMenu()
		{
		}
	}
	[Token(Token = "0x20002AD")]
	[RequireComponent(typeof(Interactable))]
	public class InteractableSelection : MonoBehaviour, IProgressProvider
	{
		[Token(Token = "0x20002AE")]
		public enum InteractionType
		{
			[Token(Token = "0x4000E75")]
			Hover,
			[Token(Token = "0x4000E76")]
			Grab
		}

		[Token(Token = "0x4000E6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractionType interactionType;

		[Token(Token = "0x4000E6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float time;

		[Token(Token = "0x4000E6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEvent Selected;

		[Token(Token = "0x4000E6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2 progressRange;

		[Token(Token = "0x4000E70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ProgressEvent Progress;

		[Token(Token = "0x4000E72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private bool selecting;

		[Token(Token = "0x4000E73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float selectingTime;

		[Token(Token = "0x1700014D")]
		public float progress
		{
			[Token(Token = "0x6000D01")]
			[Address(RVA = "0xD0B1F0", Offset = "0xD0B1F0", VA = "0xD0B1F0", Slot = "4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700014E")]
		public bool progressChanged
		{
			[Token(Token = "0x6000D02")]
			[Address(RVA = "0xD0B224", Offset = "0xD0B224", VA = "0xD0B224", Slot = "5")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D03")]
			[Address(RVA = "0xD0B22C", Offset = "0xD0B22C", VA = "0xD0B22C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000D04")]
		[Address(RVA = "0xD0B238", Offset = "0xD0B238", VA = "0xD0B238")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000D05")]
		[Address(RVA = "0xD0B3E4", Offset = "0xD0B3E4", VA = "0xD0B3E4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D06")]
		[Address(RVA = "0xD0B518", Offset = "0xD0B518", VA = "0xD0B518")]
		[ContextMenu("DoCallback")]
		public void DoCallback()
		{
		}

		[Token(Token = "0x6000D07")]
		[Address(RVA = "0xD0B638", Offset = "0xD0B638", VA = "0xD0B638")]
		private void OnHoverStart()
		{
		}

		[Token(Token = "0x6000D08")]
		[Address(RVA = "0xD0B650", Offset = "0xD0B650", VA = "0xD0B650")]
		private void OnHoverEnd()
		{
		}

		[Token(Token = "0x6000D09")]
		[Address(RVA = "0xD0B664", Offset = "0xD0B664", VA = "0xD0B664")]
		private void OnGrabStart()
		{
		}

		[Token(Token = "0x6000D0A")]
		[Address(RVA = "0xD0B678", Offset = "0xD0B678", VA = "0xD0B678")]
		private void OnGrabEnd()
		{
		}

		[Token(Token = "0x6000D0B")]
		[Address(RVA = "0xD0B68C", Offset = "0xD0B68C", VA = "0xD0B68C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000D0C")]
		[Address(RVA = "0xD0B82C", Offset = "0xD0B82C", VA = "0xD0B82C")]
		public InteractableSelection()
		{
		}
	}
	[Token(Token = "0x20002AF")]
	public class PauseMenu : Singleton<PauseMenu>
	{
		[Token(Token = "0x20002B0")]
		[CompilerGenerated]
		private sealed class <FadeAudio>d__30 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000E88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000E89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float vol;

			[Token(Token = "0x4000E8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private float <delta>5__2;

			[Token(Token = "0x17000151")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000D1F")]
				[Address(RVA = "0xD0C37C", Offset = "0xD0C37C", VA = "0xD0C37C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000152")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D21")]
				[Address(RVA = "0xD0C3C4", Offset = "0xD0C3C4", VA = "0xD0C3C4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D1C")]
			[Address(RVA = "0xD0C1B0", Offset = "0xD0C1B0", VA = "0xD0C1B0")]
			[DebuggerHidden]
			public <FadeAudio>d__30(int <>1__state)
			{
			}

			[Token(Token = "0x6000D1D")]
			[Address(RVA = "0xD0C290", Offset = "0xD0C290", VA = "0xD0C290", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D1E")]
			[Address(RVA = "0xD0C294", Offset = "0xD0C294", VA = "0xD0C294", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D20")]
			[Address(RVA = "0xD0C384", Offset = "0xD0C384", VA = "0xD0C384", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002B1")]
		[CompilerGenerated]
		private sealed class <DoClose>d__31 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000E8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000E8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PauseMenu <>4__this;

			[Token(Token = "0x17000153")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000D25")]
				[Address(RVA = "0xD0C66C", Offset = "0xD0C66C", VA = "0xD0C66C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000154")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D27")]
				[Address(RVA = "0xD0C6B4", Offset = "0xD0C6B4", VA = "0xD0C6B4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D22")]
			[Address(RVA = "0xD0C1D8", Offset = "0xD0C1D8", VA = "0xD0C1D8")]
			[DebuggerHidden]
			public <DoClose>d__31(int <>1__state)
			{
			}

			[Token(Token = "0x6000D23")]
			[Address(RVA = "0xD0C3CC", Offset = "0xD0C3CC", VA = "0xD0C3CC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D24")]
			[Address(RVA = "0xD0C3D0", Offset = "0xD0C3D0", VA = "0xD0C3D0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D26")]
			[Address(RVA = "0xD0C674", Offset = "0xD0C674", VA = "0xD0C674", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEvent Paused;

		[Token(Token = "0x4000E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEvent Unpaused;

		[Token(Token = "0x4000E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public StayInGaze menuGaze;

		[Token(Token = "0x4000E7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameObject currentMenu;

		[Token(Token = "0x4000E7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject defaultMenu;

		[Token(Token = "0x4000E7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject endMenu;

		[Token(Token = "0x4000E7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Interactable[] menuItems;

		[Token(Token = "0x4000E7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public SetPostProcessProfile fog;

		[Token(Token = "0x4000E7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public SkinnedMeshRenderer leftHand;

		[Token(Token = "0x4000E80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public SkinnedMeshRenderer rightHand;

		[Token(Token = "0x4000E81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<AudioSource> audios;

		[Token(Token = "0x4000E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool isOpen;

		[Token(Token = "0x4000E83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		private bool focusOpened;

		[Token(Token = "0x4000E84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
		private bool paused;

		[Token(Token = "0x4000E85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private SetPostProcessProfile oldFog;

		[Token(Token = "0x4000E86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool buttonsEnabled;

		[Token(Token = "0x1700014F")]
		public bool HasMenu
		{
			[Token(Token = "0x6000D0D")]
			[Address(RVA = "0xD0B8D0", Offset = "0xD0B8D0", VA = "0xD0B8D0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000150")]
		public bool IsPaused
		{
			[Token(Token = "0x6000D0E")]
			[Address(RVA = "0xD0B930", Offset = "0xD0B930", VA = "0xD0B930")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000D0F")]
		[Address(RVA = "0xD0B938", Offset = "0xD0B938", VA = "0xD0B938")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D10")]
		[Address(RVA = "0xD0BA38", Offset = "0xD0BA38", VA = "0xD0BA38")]
		public void OnInputFocusLost()
		{
		}

		[Token(Token = "0x6000D11")]
		[Address(RVA = "0xD0BCF8", Offset = "0xD0BCF8", VA = "0xD0BCF8")]
		public void OnInputFocusAquired()
		{
		}

		[Token(Token = "0x6000D12")]
		[Address(RVA = "0xD0BEC4", Offset = "0xD0BEC4", VA = "0xD0BEC4")]
		private void SceneManager_OnStateChange()
		{
		}

		[Token(Token = "0x6000D13")]
		[Address(RVA = "0xD0BF44", Offset = "0xD0BF44", VA = "0xD0BF44")]
		private bool AppIsActive()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D14")]
		[Address(RVA = "0xD0BF4C", Offset = "0xD0BF4C", VA = "0xD0BF4C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000D15")]
		[Address(RVA = "0xD0BF58", Offset = "0xD0BF58", VA = "0xD0BF58")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000D16")]
		[Address(RVA = "0xD0BF38", Offset = "0xD0BF38", VA = "0xD0BF38")]
		[ContextMenu("Open")]
		public void Open()
		{
		}

		[Token(Token = "0x6000D17")]
		[Address(RVA = "0xD0BA44", Offset = "0xD0BA44", VA = "0xD0BA44")]
		public void Open(GameObject menu, bool hideHands)
		{
		}

		[Token(Token = "0x6000D18")]
		[Address(RVA = "0xD0BCFC", Offset = "0xD0BCFC", VA = "0xD0BCFC")]
		[ContextMenu("Close")]
		public void Close()
		{
		}

		[Token(Token = "0x6000D19")]
		[Address(RVA = "0xD0C0D8", Offset = "0xD0C0D8", VA = "0xD0C0D8")]
		[IteratorStateMachine(typeof(<FadeAudio>d__30))]
		private IEnumerator FadeAudio(float vol)
		{
			return null;
		}

		[Token(Token = "0x6000D1A")]
		[Address(RVA = "0xD0C148", Offset = "0xD0C148", VA = "0xD0C148")]
		[IteratorStateMachine(typeof(<DoClose>d__31))]
		private IEnumerator DoClose()
		{
			return null;
		}

		[Token(Token = "0x6000D1B")]
		[Address(RVA = "0xD0C200", Offset = "0xD0C200", VA = "0xD0C200")]
		public PauseMenu()
		{
		}
	}
	[Token(Token = "0x20002B2")]
	[ExecuteInEditMode]
	public class UpdateCharacterRefs : MonoBehaviour
	{
		[Token(Token = "0x4000E8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool update;

		[Token(Token = "0x6000D28")]
		[Address(RVA = "0xD0C6BC", Offset = "0xD0C6BC", VA = "0xD0C6BC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D29")]
		[Address(RVA = "0xD0C6C0", Offset = "0xD0C6C0", VA = "0xD0C6C0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D2A")]
		[Address(RVA = "0xD0C6C4", Offset = "0xD0C6C4", VA = "0xD0C6C4")]
		public UpdateCharacterRefs()
		{
		}
	}
	[Token(Token = "0x20002B3")]
	public class LinearMapping : MonoBehaviour
	{
		[Token(Token = "0x4000E8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float value;

		[Token(Token = "0x6000D2B")]
		[Address(RVA = "0xD0C6CC", Offset = "0xD0C6CC", VA = "0xD0C6CC")]
		public LinearMapping()
		{
		}
	}
	[Token(Token = "0x20002B4")]
	public static class Util
	{
		[Token(Token = "0x6000D2C")]
		[Address(RVA = "0xD0C6D4", Offset = "0xD0C6D4", VA = "0xD0C6D4")]
		public static void SetLayerRecursively(GameObject go, int layerNumber)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002B5")]
	public class AnimatorProperty
	{
		[Token(Token = "0x4000E90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string property;

		[Token(Token = "0x4000E91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float value;

		[Token(Token = "0x6000D2D")]
		[Address(RVA = "0xD0C788", Offset = "0xD0C788", VA = "0xD0C788")]
		public AnimatorProperty()
		{
		}
	}
	[Token(Token = "0x20002B6")]
	public class ControllerHandPose : MonoBehaviour
	{
		[Token(Token = "0x4000E92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HandPoser poser;

		[Token(Token = "0x4000E93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Hand hand;

		[Token(Token = "0x4000E94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private HandPose pose;

		[Token(Token = "0x4000E95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AnimatorProperty thumbX;

		[Token(Token = "0x4000E96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AnimatorProperty thumbY;

		[Token(Token = "0x4000E97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AnimatorProperty grip;

		[Token(Token = "0x4000E98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AnimatorProperty index;

		[Token(Token = "0x6000D2E")]
		[Address(RVA = "0xD0C790", Offset = "0xD0C790", VA = "0xD0C790")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D2F")]
		[Address(RVA = "0xD0CD28", Offset = "0xD0CD28", VA = "0xD0CD28")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D30")]
		[Address(RVA = "0xD0CE60", Offset = "0xD0CE60", VA = "0xD0CE60")]
		public ControllerHandPose()
		{
		}
	}
	[Token(Token = "0x20002B8")]
	[DefaultExecutionOrder(10000)]
	public class StayInPlayspace : MonoBehaviour
	{
		[Token(Token = "0x20002B9")]
		[Flags]
		public enum UpdateType
		{
			[Token(Token = "0x4000EA1")]
			OnEnable = 1,
			[Token(Token = "0x4000EA2")]
			Start = 2,
			[Token(Token = "0x4000EA3")]
			Update = 4
		}

		[Token(Token = "0x4000E9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float radius;

		[Token(Token = "0x4000E9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public UpdateType updateType;

		[Token(Token = "0x6000D37")]
		[Address(RVA = "0xD0D024", Offset = "0xD0D024", VA = "0xD0D024")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000D38")]
		[Address(RVA = "0xD0D17C", Offset = "0xD0D17C", VA = "0xD0D17C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D39")]
		[Address(RVA = "0xD0D18C", Offset = "0xD0D18C", VA = "0xD0D18C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D3A")]
		[Address(RVA = "0xD0D0B0", Offset = "0xD0D0B0", VA = "0xD0D0B0")]
		public void DoAdjustment(UpdateType currentUpdate)
		{
		}

		[Token(Token = "0x6000D3B")]
		[Address(RVA = "0xD0D19C", Offset = "0xD0D19C", VA = "0xD0D19C")]
		public void DoAdjustment()
		{
		}

		[Token(Token = "0x6000D3C")]
		[Address(RVA = "0xD0D3F8", Offset = "0xD0D3F8", VA = "0xD0D3F8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000D3D")]
		[Address(RVA = "0xD0D52C", Offset = "0xD0D52C", VA = "0xD0D52C")]
		public StayInPlayspace()
		{
		}
	}
	[Token(Token = "0x20002BA")]
	public enum GrabTypes
	{
		[Token(Token = "0x4000EA5")]
		None,
		[Token(Token = "0x4000EA6")]
		Trigger,
		[Token(Token = "0x4000EA7")]
		Pinch,
		[Token(Token = "0x4000EA8")]
		Grip,
		[Token(Token = "0x4000EA9")]
		Scripted
	}
	[Token(Token = "0x20002BB")]
	public class Hand : MonoBehaviour
	{
		[Token(Token = "0x20002BC")]
		[Flags]
		public enum AttachmentFlags
		{
			[Token(Token = "0x4000EC0")]
			SnapOnAttach = 1,
			[Token(Token = "0x4000EC1")]
			DetachOthers = 2,
			[Token(Token = "0x4000EC2")]
			DetachFromOtherHand = 4,
			[Token(Token = "0x4000EC3")]
			ParentToHand = 8,
			[Token(Token = "0x4000EC4")]
			VelocityMovement = 0x10,
			[Token(Token = "0x4000EC5")]
			TurnOnKinematic = 0x20,
			[Token(Token = "0x4000EC6")]
			TurnOffGravity = 0x40,
			[Token(Token = "0x4000EC7")]
			AllowSidegrade = 0x80
		}

		[Token(Token = "0x20002BD")]
		public struct AttachedObject
		{
			[Token(Token = "0x4000EC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public GameObject attachedObject;

			[Token(Token = "0x4000EC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Interactable interactable;

			[Token(Token = "0x4000ECA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody attachedRigidbody;

			[Token(Token = "0x4000ECB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public CollisionDetectionMode collisionDetectionMode;

			[Token(Token = "0x4000ECC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public bool attachedRigidbodyWasKinematic;

			[Token(Token = "0x4000ECD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
			public bool attachedRigidbodyUsedGravity;

			[Token(Token = "0x4000ECE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameObject originalParent;

			[Token(Token = "0x4000ECF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool isParentedToHand;

			[Token(Token = "0x4000ED0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public GrabTypes grabbedWithType;

			[Token(Token = "0x4000ED1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public AttachmentFlags attachmentFlags;

			[Token(Token = "0x4000ED2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Vector3 initialPositionalOffset;

			[Token(Token = "0x4000ED3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Quaternion initialRotationalOffset;

			[Token(Token = "0x4000ED4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Transform attachedOffsetTransform;

			[Token(Token = "0x4000ED5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public Transform handAttachmentPointTransform;

			[Token(Token = "0x4000ED6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Vector3 easeSourcePosition;

			[Token(Token = "0x4000ED7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			public Quaternion easeSourceRotation;

			[Token(Token = "0x4000ED8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			public float attachTime;

			[Token(Token = "0x6000D52")]
			[Address(RVA = "0xD0E1C8", Offset = "0xD0E1C8", VA = "0xD0E1C8")]
			public bool HasAttachFlag(AttachmentFlags flag)
			{
				return default(bool);
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20002BE")]
		[CompilerGenerated]
		private struct <TriggerHapticPulse>d__37 : IAsyncStateMachine
		{
			[Token(Token = "0x4000ED9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000EDA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncVoidMethodBuilder <>t__builder;

			[Token(Token = "0x4000EDB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Hand <>4__this;

			[Token(Token = "0x4000EDC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float frequency;

			[Token(Token = "0x4000EDD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float duration;

			[Token(Token = "0x6000D53")]
			[Address(RVA = "0xD0E1D8", Offset = "0xD0E1D8", VA = "0xD0E1D8", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6000D54")]
			[Address(RVA = "0xD0E2C4", Offset = "0xD0E2C4", VA = "0xD0E2C4", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[Token(Token = "0x4000EAA")]
		public const AttachmentFlags defaultAttachmentFlags = AttachmentFlags.SnapOnAttach | AttachmentFlags.DetachOthers | AttachmentFlags.DetachFromOtherHand | AttachmentFlags.ParentToHand | AttachmentFlags.TurnOnKinematic;

		[Token(Token = "0x4000EAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Hand otherHand;

		[Token(Token = "0x4000EAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public XRNode handNodeType;

		[Token(Token = "0x4000EAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InternedString handType;

		[Token(Token = "0x4000EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public XRController controller;

		[Token(Token = "0x4000EAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private InputHelpers.Button grabButton;

		[Token(Token = "0x4000EB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform objectAttachmentPoint;

		[Token(Token = "0x4000EB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform hoverSphereTransform;

		[Token(Token = "0x4000EB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform jointHoverTransform;

		[Token(Token = "0x4000EB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float overlapRadius;

		[Token(Token = "0x4000EB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public LayerMask overlapMask;

		[Token(Token = "0x4000EB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject graphic;

		[Token(Token = "0x4000EB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Interactable _hoveringInteractable;

		[Token(Token = "0x4000EB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject _attachedObject;

		[Token(Token = "0x4000EB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Collider[] overlaps;

		[Token(Token = "0x4000EB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private SkinnedMeshRenderer renderer;

		[Token(Token = "0x4000EBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal AttachedObject? currentAttachedObjectInfo;

		[Token(Token = "0x4000EBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private bool grabbing;

		[Token(Token = "0x4000EBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x121")]
		public bool bDebug;

		[Token(Token = "0x4000EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public Interactable objDebugGrab;

		[Token(Token = "0x17000155")]
		public HandPoser poser
		{
			[Token(Token = "0x6000D3E")]
			[Address(RVA = "0xD0D53C", Offset = "0xD0D53C", VA = "0xD0D53C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D3F")]
			[Address(RVA = "0xD0D544", Offset = "0xD0D544", VA = "0xD0D544")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000156")]
		public Interactable hoveringInteractable
		{
			[Token(Token = "0x6000D41")]
			[Address(RVA = "0xD0D61C", Offset = "0xD0D61C", VA = "0xD0D61C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D42")]
			[Address(RVA = "0xD0D638", Offset = "0xD0D638", VA = "0xD0D638")]
			private set
			{
			}
		}

		[Token(Token = "0x17000157")]
		public GameObject currentAttachedObject
		{
			[Token(Token = "0x6000D43")]
			[Address(RVA = "0xD0D814", Offset = "0xD0D814", VA = "0xD0D814")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D44")]
			[Address(RVA = "0xD0D81C", Offset = "0xD0D81C", VA = "0xD0D81C")]
			private set
			{
			}
		}

		[Token(Token = "0x6000D40")]
		[Address(RVA = "0xD0D54C", Offset = "0xD0D54C", VA = "0xD0D54C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D45")]
		[Address(RVA = "0xD0D9F8", Offset = "0xD0D9F8", VA = "0xD0D9F8")]
		internal void HoverUnlock(Interactable interactable)
		{
		}

		[Token(Token = "0x6000D46")]
		[Address(RVA = "0xD0DA38", Offset = "0xD0DA38", VA = "0xD0DA38")]
		internal void HoverLock(Interactable interactable)
		{
		}

		[Token(Token = "0x6000D47")]
		[Address(RVA = "0xD0B0AC", Offset = "0xD0B0AC", VA = "0xD0B0AC")]
		internal void DetachObject(GameObject gameObject)
		{
		}

		[Token(Token = "0x6000D48")]
		[Address(RVA = "0xD0DA78", Offset = "0xD0DA78", VA = "0xD0DA78")]
		public void TriggerHapticPulse(ushort microSecondsDuration)
		{
		}

		[Token(Token = "0x6000D49")]
		[Address(RVA = "0xD0DA98", Offset = "0xD0DA98", VA = "0xD0DA98")]
		[AsyncStateMachine(typeof(<TriggerHapticPulse>d__37))]
		public void TriggerHapticPulse(float duration, float frequency, float amplitude)
		{
		}

		[Token(Token = "0x6000D4A")]
		[Address(RVA = "0xD0DB30", Offset = "0xD0DB30", VA = "0xD0DB30", Slot = "4")]
		public virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000D4B")]
		[Address(RVA = "0xD06984", Offset = "0xD06984", VA = "0xD06984")]
		public Vector3 GetVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D4C")]
		[Address(RVA = "0xD0DFC4", Offset = "0xD0DFC4", VA = "0xD0DFC4")]
		internal bool IsGrabbing()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D4D")]
		[Address(RVA = "0xD0DFCC", Offset = "0xD0DFCC", VA = "0xD0DFCC")]
		internal bool GetGrabStarting()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D4E")]
		[Address(RVA = "0xD0E098", Offset = "0xD0E098", VA = "0xD0E098")]
		internal void Hide()
		{
		}

		[Token(Token = "0x6000D4F")]
		[Address(RVA = "0xD0E0B8", Offset = "0xD0E0B8", VA = "0xD0E0B8")]
		internal void Show()
		{
		}

		[Token(Token = "0x6000D50")]
		[Address(RVA = "0xD0E0D8", Offset = "0xD0E0D8", VA = "0xD0E0D8")]
		public Vector3 JointHoverPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D51")]
		[Address(RVA = "0xD0E158", Offset = "0xD0E158", VA = "0xD0E158")]
		public Hand()
		{
		}
	}
	[Token(Token = "0x20002BF")]
	public abstract class HandAttachBehaviour : InteractableBehaviour
	{
		[Token(Token = "0x4000EDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform attachAnchorLeft;

		[Token(Token = "0x4000EDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform attachAnchorRight;

		[Token(Token = "0x4000EE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEvent Grabbed;

		[Token(Token = "0x4000EE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEvent Released;

		[Token(Token = "0x17000158")]
		public Hand attachedHand
		{
			[Token(Token = "0x6000D55")]
			[Address(RVA = "0xD0E2D0", Offset = "0xD0E2D0", VA = "0xD0E2D0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D56")]
			[Address(RVA = "0xD0E2D8", Offset = "0xD0E2D8", VA = "0xD0E2D8")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x17000159")]
		protected Transform attachAnchor
		{
			[Token(Token = "0x6000D5A")]
			[Address(RVA = "0xD0E5B0", Offset = "0xD0E5B0", VA = "0xD0E5B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D57")]
		[Address(RVA = "0xD0E2E0", Offset = "0xD0E2E0", VA = "0xD0E2E0")]
		public void OnAttachedToHand(Hand hand)
		{
		}

		[Token(Token = "0x6000D58")]
		[Address(RVA = "0xD0E438", Offset = "0xD0E438", VA = "0xD0E438")]
		public void OnDetachedFromHand(Hand hand)
		{
		}

		[Token(Token = "0x6000D59")]
		[Address(RVA = "0xD0E508", Offset = "0xD0E508", VA = "0xD0E508", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000D5B")]
		[Address(RVA = "0xD0E68C", Offset = "0xD0E68C", VA = "0xD0E68C", Slot = "6")]
		protected virtual bool CanAttach(Hand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D5C")]
		[Address(RVA = "0xD0E694", Offset = "0xD0E694", VA = "0xD0E694", Slot = "7")]
		protected virtual void Attach(Hand hand)
		{
		}

		[Token(Token = "0x6000D5D")]
		[Address(RVA = "0xD0E698", Offset = "0xD0E698", VA = "0xD0E698", Slot = "8")]
		protected virtual void Detach(Hand hand)
		{
		}

		[Token(Token = "0x6000D5E")]
		[Address(RVA = "0xD0E69C", Offset = "0xD0E69C", VA = "0xD0E69C")]
		protected HandAttachBehaviour()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002C0")]
	[CreateAssetMenu]
	public class HandPose : ScriptableObject
	{
		[Token(Token = "0x4000EE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x4000EE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int layer;

		[Token(Token = "0x4000EE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<AnimatorProperty> properties;

		[Token(Token = "0x4000EE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Dictionary<int, AnimatorProperty> props;

		[Token(Token = "0x6000D5F")]
		[Address(RVA = "0xD0E728", Offset = "0xD0E728", VA = "0xD0E728")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000D60")]
		[Address(RVA = "0xD0CAB0", Offset = "0xD0CAB0", VA = "0xD0CAB0")]
		public HandPose Copy()
		{
			return null;
		}

		[Token(Token = "0x6000D61")]
		[Address(RVA = "0xD0E920", Offset = "0xD0E920", VA = "0xD0E920")]
		public HandPose()
		{
		}
	}
	[Token(Token = "0x20002C1")]
	public class HandPoser : MonoBehaviour
	{
		[Token(Token = "0x4000EE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HandPose defaultPose;

		[Token(Token = "0x4000EE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Dictionary<int, float> currentValues;

		[Token(Token = "0x4000EE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Animator anim;

		[Token(Token = "0x4000EEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<HandPose> poses;

		[Token(Token = "0x4000EEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float maxChangeSpeed;

		[Token(Token = "0x6000D62")]
		[Address(RVA = "0xD0E9E0", Offset = "0xD0E9E0", VA = "0xD0E9E0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D63")]
		[Address(RVA = "0xD0EB24", Offset = "0xD0EB24", VA = "0xD0EB24")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D64")]
		[Address(RVA = "0xD0EB28", Offset = "0xD0EB28", VA = "0xD0EB28")]
		public void UpdatePose()
		{
		}

		[Token(Token = "0x6000D65")]
		[Address(RVA = "0xD0CC54", Offset = "0xD0CC54", VA = "0xD0CC54")]
		public void AddPose(HandPose pose)
		{
		}

		[Token(Token = "0x6000D66")]
		[Address(RVA = "0xD0EF20", Offset = "0xD0EF20", VA = "0xD0EF20")]
		public void RemovePose(HandPose pose)
		{
		}

		[Token(Token = "0x6000D67")]
		[Address(RVA = "0xD0EF78", Offset = "0xD0EF78", VA = "0xD0EF78")]
		public HandPoser()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002C2")]
	public class HandEvent : UnityEvent<Hand>
	{
		[Token(Token = "0x6000D68")]
		[Address(RVA = "0xD0F040", Offset = "0xD0F040", VA = "0xD0F040")]
		public HandEvent()
		{
		}
	}
	[Token(Token = "0x20002C3")]
	[SelectionBase]
	public class Interactable : MonoBehaviour
	{
		[Token(Token = "0x4000EEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool active;

		[Token(Token = "0x4000EEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Hand> attachedHands;

		[Token(Token = "0x4000EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEvent onHandHoverBegin;

		[Token(Token = "0x4000EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEvent onHandHoverEnd;

		[Token(Token = "0x4000EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEvent onGrab;

		[Token(Token = "0x4000EF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityEvent onRelease;

		[Token(Token = "0x1700015A")]
		public Hand attachedToHand
		{
			[Token(Token = "0x6000D69")]
			[Address(RVA = "0xD0F088", Offset = "0xD0F088", VA = "0xD0F088")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D6A")]
			[Address(RVA = "0xD0F090", Offset = "0xD0F090", VA = "0xD0F090")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x1700015B")]
		public bool Active
		{
			[Token(Token = "0x6000D6B")]
			[Address(RVA = "0xD0F098", Offset = "0xD0F098", VA = "0xD0F098")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D6C")]
			[Address(RVA = "0xD0F0A0", Offset = "0xD0F0A0", VA = "0xD0F0A0")]
			set
			{
			}
		}

		[Token(Token = "0x6000D6D")]
		[Address(RVA = "0xD0F0AC", Offset = "0xD0F0AC", VA = "0xD0F0AC")]
		public void OnAttachedToHand(Hand hand)
		{
		}

		[Token(Token = "0x6000D6E")]
		[Address(RVA = "0xD0F188", Offset = "0xD0F188", VA = "0xD0F188")]
		public void OnDetachedFromHand(Hand hand)
		{
		}

		[Token(Token = "0x6000D6F")]
		[Address(RVA = "0xD0F1F0", Offset = "0xD0F1F0", VA = "0xD0F1F0")]
		public void OnHandHoverStart(Hand hand)
		{
		}

		[Token(Token = "0x6000D70")]
		[Address(RVA = "0xD0F20C", Offset = "0xD0F20C", VA = "0xD0F20C")]
		public void OnHandHoverEnd(Hand hand)
		{
		}

		[Token(Token = "0x6000D71")]
		[Address(RVA = "0xD0B57C", Offset = "0xD0B57C", VA = "0xD0B57C")]
		public void Detatch()
		{
		}

		[Token(Token = "0x6000D72")]
		[Address(RVA = "0xD0F228", Offset = "0xD0F228", VA = "0xD0F228")]
		public Interactable()
		{
		}
	}
	[Token(Token = "0x20002C4")]
	[RequireComponent(typeof(Interactable))]
	public abstract class InteractableBehaviour : MonoBehaviour
	{
		[Token(Token = "0x4000EF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Interactable interactable;

		[Token(Token = "0x6000D73")]
		[Address(RVA = "0xD0F330", Offset = "0xD0F330", VA = "0xD0F330", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000D74")]
		[Address(RVA = "0xD0E720", Offset = "0xD0E720", VA = "0xD0E720")]
		protected InteractableBehaviour()
		{
		}
	}
	[Token(Token = "0x20002C5")]
	[DisallowMultipleComponent]
	public class LockToPoint : MonoBehaviour
	{
		[Token(Token = "0x4000EF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform home;

		[Token(Token = "0x4000EF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Rigidbody body;

		[Token(Token = "0x4000EF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float snapTime;

		[Token(Token = "0x4000EF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float dropTime;

		[Token(Token = "0x4000EF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float dropTimer;

		[Token(Token = "0x4000EF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private HandAttachBehaviour attach;

		[Token(Token = "0x4000EFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int dropAreas;

		[Token(Token = "0x4000EFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private GameObject createdHome;

		[Token(Token = "0x4000EFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float timeScale;

		[Token(Token = "0x1700015C")]
		public bool Locked
		{
			[Token(Token = "0x6000D75")]
			[Address(RVA = "0xD0F380", Offset = "0xD0F380", VA = "0xD0F380")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700015D")]
		public Transform Home
		{
			[Token(Token = "0x6000D76")]
			[Address(RVA = "0xD0F45C", Offset = "0xD0F45C", VA = "0xD0F45C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D77")]
			[Address(RVA = "0xD0F464", Offset = "0xD0F464", VA = "0xD0F464")]
			set
			{
			}
		}

		[Token(Token = "0x1700015E")]
		private bool used
		{
			[Token(Token = "0x6000D7E")]
			[Address(RVA = "0xD0F3B0", Offset = "0xD0F3B0", VA = "0xD0F3B0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000D78")]
		[Address(RVA = "0xD0F7D0", Offset = "0xD0F7D0", VA = "0xD0F7D0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D79")]
		[Address(RVA = "0xD0F630", Offset = "0xD0F630", VA = "0xD0F630")]
		public void OnDetachedFromHand(Hand hand)
		{
		}

		[Token(Token = "0x6000D7A")]
		[Address(RVA = "0xD0F894", Offset = "0xD0F894", VA = "0xD0F894")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000D7B")]
		[Address(RVA = "0xD0FD88", Offset = "0xD0FD88", VA = "0xD0FD88")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000D7C")]
		[Address(RVA = "0xD0FE2C", Offset = "0xD0FE2C", VA = "0xD0FE2C")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000D7D")]
		[Address(RVA = "0xD0FED0", Offset = "0xD0FED0", VA = "0xD0FED0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000D7F")]
		[Address(RVA = "0xD0FF2C", Offset = "0xD0FF2C", VA = "0xD0FF2C")]
		public LockToPoint()
		{
		}
	}
	[Token(Token = "0x20002C6")]
	public class PackingItem : MonoBehaviour
	{
		[Token(Token = "0x4000EFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool forbidden;

		[Token(Token = "0x6000D80")]
		[Address(RVA = "0xD0FF3C", Offset = "0xD0FF3C", VA = "0xD0FF3C")]
		public void EnableObjectInteractions()
		{
		}

		[Token(Token = "0x6000D81")]
		[Address(RVA = "0xD0FFC8", Offset = "0xD0FFC8", VA = "0xD0FFC8")]
		public PackingItem()
		{
		}
	}
	[Token(Token = "0x20002C7")]
	[RequireComponent(typeof(Hand))]
	public class PauseInteractions : MonoBehaviour
	{
		[Token(Token = "0x4000EFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Hand hand;

		[Token(Token = "0x4000EFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private LayerMask handMask;

		[Token(Token = "0x4000F00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private LayerMask pausedMask;

		[Token(Token = "0x6000D82")]
		[Address(RVA = "0xD0FFD0", Offset = "0xD0FFD0", VA = "0xD0FFD0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D83")]
		[Address(RVA = "0xD101C4", Offset = "0xD101C4", VA = "0xD101C4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D84")]
		[Address(RVA = "0xD10238", Offset = "0xD10238", VA = "0xD10238")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000D85")]
		[Address(RVA = "0xD10388", Offset = "0xD10388", VA = "0xD10388")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000D86")]
		[Address(RVA = "0xD100EC", Offset = "0xD100EC", VA = "0xD100EC")]
		private void OnPause()
		{
		}

		[Token(Token = "0x6000D87")]
		[Address(RVA = "0xD104D8", Offset = "0xD104D8", VA = "0xD104D8")]
		private void OnUnpause()
		{
		}

		[Token(Token = "0x6000D88")]
		[Address(RVA = "0xD10590", Offset = "0xD10590", VA = "0xD10590")]
		public PauseInteractions()
		{
		}
	}
	[Token(Token = "0x20002C8")]
	public class Player : Singleton<Player>
	{
		[Token(Token = "0x4000F01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Hand[] hands;

		[Token(Token = "0x4000F02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Hand leftHand;

		[Token(Token = "0x4000F03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Hand rightHand;

		[Token(Token = "0x4000F04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public XROrigin rig;

		[Token(Token = "0x1700015F")]
		public float eyeLevel
		{
			[Token(Token = "0x6000D89")]
			[Address(RVA = "0xD10598", Offset = "0xD10598", VA = "0xD10598")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D8A")]
			[Address(RVA = "0xD105A0", Offset = "0xD105A0", VA = "0xD105A0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000160")]
		public Transform CameraTransform
		{
			[Token(Token = "0x6000D8B")]
			[Address(RVA = "0xD105A8", Offset = "0xD105A8", VA = "0xD105A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D8C")]
		[Address(RVA = "0xD105CC", Offset = "0xD105CC", VA = "0xD105CC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D8D")]
		[Address(RVA = "0xD1061C", Offset = "0xD1061C", VA = "0xD1061C")]
		public void Update()
		{
		}

		[Token(Token = "0x6000D8E")]
		[Address(RVA = "0xD10700", Offset = "0xD10700", VA = "0xD10700")]
		private void OnApplicationFocus(bool focus)
		{
		}

		[Token(Token = "0x6000D8F")]
		[Address(RVA = "0xD10774", Offset = "0xD10774", VA = "0xD10774")]
		public Player()
		{
		}
	}
	[Token(Token = "0x20002C9")]
	public class SaveHandOnDisable : MonoBehaviour
	{
		[Token(Token = "0x4000F06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Hand steamHand;

		[Token(Token = "0x6000D90")]
		[Address(RVA = "0xD107BC", Offset = "0xD107BC", VA = "0xD107BC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000D91")]
		[Address(RVA = "0xD10850", Offset = "0xD10850", VA = "0xD10850")]
		private void OnAttachedToHand(Hand _hand)
		{
		}

		[Token(Token = "0x6000D92")]
		[Address(RVA = "0xD10858", Offset = "0xD10858", VA = "0xD10858")]
		private void OnDetachedFromHand(Hand _hand)
		{
		}

		[Token(Token = "0x6000D93")]
		[Address(RVA = "0xD10860", Offset = "0xD10860", VA = "0xD10860")]
		public SaveHandOnDisable()
		{
		}
	}
	[Token(Token = "0x20002CA")]
	[RequireComponent(typeof(VelocityEstimator))]
	[RequireComponent(typeof(Rigidbody))]
	public class Throwable : HandAttachBehaviour
	{
		[Token(Token = "0x4000F07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Rigidbody rigidbody;

		[Token(Token = "0x4000F08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool useAttachPoint;

		[Token(Token = "0x4000F09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float maxForce;

		[Token(Token = "0x4000F0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float maxAngleVel;

		[Token(Token = "0x4000F0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float lerpSpeed;

		[Token(Token = "0x4000F0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public DropLocationLTP dropLocation;

		[Token(Token = "0x4000F0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public UnityEvent AttachedToPoint;

		[Token(Token = "0x4000F0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public UnityEvent LockedToPoint;

		[Token(Token = "0x4000F0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public UnityEvent DetachedFromPoint;

		[Token(Token = "0x4000F10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float lerpTime;

		[Token(Token = "0x4000F11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector3 grabPos;

		[Token(Token = "0x4000F12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Quaternion grabRot;

		[Token(Token = "0x4000F13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Hand prevAtachedHand;

		[Token(Token = "0x4000F14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private VelocityEstimator velocityEstimator;

		[Token(Token = "0x4000F15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private LockToPoint lockToPoint;

		[Token(Token = "0x4000F16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool doDropLocationLerp;

		[Token(Token = "0x4000F17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
		private bool inDropLocation;

		[Token(Token = "0x4000F18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private Vector3 lerpStartPos;

		[Token(Token = "0x4000F19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Quaternion lerpStatRot;

		[Token(Token = "0x17000161")]
		public DropLocationLTP DropLocation
		{
			[Token(Token = "0x6000D94")]
			[Address(RVA = "0xD10868", Offset = "0xD10868", VA = "0xD10868")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D95")]
			[Address(RVA = "0xD10870", Offset = "0xD10870", VA = "0xD10870")]
			set
			{
			}
		}

		[Token(Token = "0x6000D96")]
		[Address(RVA = "0xD10878", Offset = "0xD10878", VA = "0xD10878", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000D97")]
		[Address(RVA = "0xD10940", Offset = "0xD10940", VA = "0xD10940", Slot = "7")]
		protected override void Attach(Hand hand)
		{
		}

		[Token(Token = "0x6000D98")]
		[Address(RVA = "0xD10C78", Offset = "0xD10C78", VA = "0xD10C78", Slot = "8")]
		protected override void Detach(Hand hand)
		{
		}

		[Token(Token = "0x6000D99")]
		[Address(RVA = "0xD10FA8", Offset = "0xD10FA8", VA = "0xD10FA8", Slot = "5")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6000D9A")]
		[Address(RVA = "0xD11024", Offset = "0xD11024", VA = "0xD11024")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D9B")]
		[Address(RVA = "0xD11050", Offset = "0xD11050", VA = "0xD11050")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000D9C")]
		[Address(RVA = "0xD11570", Offset = "0xD11570", VA = "0xD11570")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000D9D")]
		[Address(RVA = "0xD11708", Offset = "0xD11708", VA = "0xD11708")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000D9E")]
		[Address(RVA = "0xD117D8", Offset = "0xD117D8", VA = "0xD117D8", Slot = "6")]
		protected override bool CanAttach(Hand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D9F")]
		[Address(RVA = "0xD10BA0", Offset = "0xD10BA0", VA = "0xD10BA0")]
		private void DetachFromPoint()
		{
		}

		[Token(Token = "0x6000DA0")]
		[Address(RVA = "0xD11838", Offset = "0xD11838", VA = "0xD11838")]
		public Throwable()
		{
		}
	}
	[Token(Token = "0x20002CB")]
	public class VelocityEstimator : MonoBehaviour
	{
		[Token(Token = "0x20002CC")]
		[CompilerGenerated]
		private sealed class <EstimateVelocityCoroutine>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VelocityEstimator <>4__this;

			[Token(Token = "0x4000F24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Vector3 <previousPosition>5__2;

			[Token(Token = "0x4000F25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private Quaternion <previousRotation>5__3;

			[Token(Token = "0x17000162")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000DAC")]
				[Address(RVA = "0xD11EC0", Offset = "0xD11EC0", VA = "0xD11EC0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000163")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000DAE")]
				[Address(RVA = "0xD11F08", Offset = "0xD11F08", VA = "0xD11F08", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000DA9")]
			[Address(RVA = "0xD11AFC", Offset = "0xD11AFC", VA = "0xD11AFC")]
			[DebuggerHidden]
			public <EstimateVelocityCoroutine>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6000DAA")]
			[Address(RVA = "0xD11B38", Offset = "0xD11B38", VA = "0xD11B38", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000DAB")]
			[Address(RVA = "0xD11B3C", Offset = "0xD11B3C", VA = "0xD11B3C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000DAD")]
			[Address(RVA = "0xD11EC8", Offset = "0xD11EC8", VA = "0xD11EC8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000F1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("How many frames to average over for computing velocity")]
		public int velocityAverageFrames;

		[Token(Token = "0x4000F1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("How many frames to average over for computing angular velocity")]
		public int angularVelocityAverageFrames;

		[Token(Token = "0x4000F1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool estimateOnAwake;

		[Token(Token = "0x4000F1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Coroutine routine;

		[Token(Token = "0x4000F1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int sampleCount;

		[Token(Token = "0x4000F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3[] velocitySamples;

		[Token(Token = "0x4000F20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3[] angularVelocitySamples;

		[Token(Token = "0x6000DA1")]
		[Address(RVA = "0xD10B5C", Offset = "0xD10B5C", VA = "0xD10B5C")]
		public void BeginEstimatingVelocity()
		{
		}

		[Token(Token = "0x6000DA2")]
		[Address(RVA = "0xD10F84", Offset = "0xD10F84", VA = "0xD10F84")]
		public void FinishEstimatingVelocity()
		{
		}

		[Token(Token = "0x6000DA3")]
		[Address(RVA = "0xD10DF4", Offset = "0xD10DF4", VA = "0xD10DF4")]
		public Vector3 GetVelocityEstimate()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DA4")]
		[Address(RVA = "0xD10EBC", Offset = "0xD10EBC", VA = "0xD10EBC")]
		public Vector3 GetAngularVelocityEstimate()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DA5")]
		[Address(RVA = "0xD11950", Offset = "0xD11950", VA = "0xD11950")]
		public Vector3 GetAccelerationEstimate()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DA6")]
		[Address(RVA = "0xD11A84", Offset = "0xD11A84", VA = "0xD11A84")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000DA7")]
		[Address(RVA = "0xD118E8", Offset = "0xD118E8", VA = "0xD118E8")]
		[IteratorStateMachine(typeof(<EstimateVelocityCoroutine>d__13))]
		private IEnumerator EstimateVelocityCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6000DA8")]
		[Address(RVA = "0xD11B24", Offset = "0xD11B24", VA = "0xD11B24")]
		public VelocityEstimator()
		{
		}
	}
	[Token(Token = "0x20002CD")]
	public class WaveAnimation : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20002CE")]
		public struct WaveObject
		{
			[Token(Token = "0x4000F29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Transform transform;

			[Token(Token = "0x4000F2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public bool vertical;

			[Token(Token = "0x4000F2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
			public bool horizontal;

			[Token(Token = "0x4000F2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal Vector3 startPos;
		}

		[Token(Token = "0x4000F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public WaveProfile waveProfile;

		[Token(Token = "0x4000F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WaveObject[] waveObjects;

		[Token(Token = "0x4000F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 startPos;

		[Token(Token = "0x6000DAF")]
		[Address(RVA = "0xD11F10", Offset = "0xD11F10", VA = "0xD11F10")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DB0")]
		[Address(RVA = "0xD11FE4", Offset = "0xD11FE4", VA = "0xD11FE4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000DB1")]
		[Address(RVA = "0xD121D8", Offset = "0xD121D8", VA = "0xD121D8")]
		public WaveAnimation()
		{
		}
	}
	[Token(Token = "0x20002CF")]
	[CreateAssetMenu(menuName = "BOD/Wave Flats/WaveProfile")]
	public class WaveProfile : ScriptableObject
	{
		[Token(Token = "0x4000F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float speed;

		[Token(Token = "0x4000F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 positionOffset;

		[Token(Token = "0x4000F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 axisScale;

		[Token(Token = "0x4000F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float radius;

		[Token(Token = "0x6000DB2")]
		[Address(RVA = "0xD121E0", Offset = "0xD121E0", VA = "0xD121E0")]
		public WaveProfile()
		{
		}
	}
	[Token(Token = "0x20002D0")]
	public class Wheelbarrow : MonoBehaviour
	{
		[Token(Token = "0x4000F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform rocksInsideWheelbarrow;

		[Token(Token = "0x4000F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Renderer glowingWheelbarrow;

		[Token(Token = "0x4000F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public WheelbarrowDropZone dropZone;

		[Token(Token = "0x4000F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Color glowingColor;

		[Token(Token = "0x4000F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool isGlowing;

		[Token(Token = "0x6000DB3")]
		[Address(RVA = "0xD12240", Offset = "0xD12240", VA = "0xD12240")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000DB4")]
		[Address(RVA = "0xD122AC", Offset = "0xD122AC", VA = "0xD122AC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000DB5")]
		[Address(RVA = "0xD1235C", Offset = "0xD1235C", VA = "0xD1235C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000DB6")]
		[Address(RVA = "0xD123DC", Offset = "0xD123DC", VA = "0xD123DC")]
		private void StateChanged()
		{
		}

		[Token(Token = "0x6000DB7")]
		[Address(RVA = "0xD126AC", Offset = "0xD126AC", VA = "0xD126AC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DB8")]
		[Address(RVA = "0xD12518", Offset = "0xD12518", VA = "0xD12518")]
		private void Glow(bool setGlowing = false)
		{
		}

		[Token(Token = "0x6000DB9")]
		[Address(RVA = "0xD126B0", Offset = "0xD126B0", VA = "0xD126B0")]
		private void Glow()
		{
		}

		[Token(Token = "0x6000DBA")]
		[Address(RVA = "0xD126B8", Offset = "0xD126B8", VA = "0xD126B8")]
		public Wheelbarrow()
		{
		}
	}
	[Token(Token = "0x20002D1")]
	public class WheelbarrowDropZone : MonoBehaviour
	{
		[Token(Token = "0x4000F36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform rocksInWheelbarrow;

		[Token(Token = "0x4000F37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<GameObject> rocks;

		[Token(Token = "0x6000DBB")]
		[Address(RVA = "0xD126C0", Offset = "0xD126C0", VA = "0xD126C0")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000DBC")]
		[Address(RVA = "0xD126C4", Offset = "0xD126C4", VA = "0xD126C4")]
		private void OnTriggerStay(Collider other)
		{
		}

		[Token(Token = "0x6000DBD")]
		[Address(RVA = "0xD12894", Offset = "0xD12894", VA = "0xD12894")]
		public WheelbarrowDropZone()
		{
		}
	}
	[Token(Token = "0x20002D2")]
	public class WindChimeTransition : MonoBehaviour
	{
		[Token(Token = "0x4000F38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vector3 position;

		[Token(Token = "0x4000F39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Rigidbody[] rigidbodies;

		[Token(Token = "0x4000F3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 tweenPosition;

		[Token(Token = "0x4000F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float tweenDuration;

		[Token(Token = "0x6000DBE")]
		[Address(RVA = "0xD12910", Offset = "0xD12910", VA = "0xD12910")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000DBF")]
		[Address(RVA = "0xD12A94", Offset = "0xD12A94", VA = "0xD12A94")]
		public void ShowWindChime()
		{
		}

		[Token(Token = "0x6000DC0")]
		[Address(RVA = "0xD12BC4", Offset = "0xD12BC4", VA = "0xD12BC4")]
		public void WindChimeActivated()
		{
		}

		[Token(Token = "0x6000DC1")]
		[Address(RVA = "0xD12D10", Offset = "0xD12D10", VA = "0xD12D10")]
		public void HideWindChime()
		{
		}

		[Token(Token = "0x6000DC2")]
		[Address(RVA = "0xD12DE0", Offset = "0xD12DE0", VA = "0xD12DE0")]
		public void WindChimeTween()
		{
		}

		[Token(Token = "0x6000DC3")]
		[Address(RVA = "0xD12ED0", Offset = "0xD12ED0", VA = "0xD12ED0")]
		private void NextState()
		{
		}

		[Token(Token = "0x6000DC4")]
		[Address(RVA = "0xD12A30", Offset = "0xD12A30", VA = "0xD12A30")]
		private void DisableKinematic()
		{
		}

		[Token(Token = "0x6000DC5")]
		[Address(RVA = "0xD12F40", Offset = "0xD12F40", VA = "0xD12F40")]
		private void EnableKinematic()
		{
		}

		[Token(Token = "0x6000DC6")]
		[Address(RVA = "0xD12FA4", Offset = "0xD12FA4", VA = "0xD12FA4")]
		public WindChimeTransition()
		{
		}
	}
}
namespace BOD.Playspace
{
	[Token(Token = "0x20002D3")]
	public class PlayspaceCenter : MonoBehaviour
	{
		[Token(Token = "0x4000F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static PlayspaceCenter current;

		[Token(Token = "0x4000F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool doRotation;

		[Token(Token = "0x17000164")]
		public Vector3 PrevPosition
		{
			[Token(Token = "0x6000DC9")]
			[Address(RVA = "0xD12FAC", Offset = "0xD12FAC", VA = "0xD12FAC")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000DCA")]
			[Address(RVA = "0xD12FB8", Offset = "0xD12FB8", VA = "0xD12FB8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000165")]
		public Quaternion PrevRotation
		{
			[Token(Token = "0x6000DCB")]
			[Address(RVA = "0xD12FC4", Offset = "0xD12FC4", VA = "0xD12FC4")]
			[CompilerGenerated]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x6000DCC")]
			[Address(RVA = "0xD12FD0", Offset = "0xD12FD0", VA = "0xD12FD0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1400000C")]
		public static event Action PlayspaceMoved
		{
			[Token(Token = "0x6000DC7")]
			[Address(RVA = "0xD0D0C4", Offset = "0xD0D0C4", VA = "0xD0D0C4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000DC8")]
			[Address(RVA = "0xD0D474", Offset = "0xD0D474", VA = "0xD0D474")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000DCD")]
		[Address(RVA = "0xD12FDC", Offset = "0xD12FDC", VA = "0xD12FDC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000DCE")]
		[Address(RVA = "0xD131A4", Offset = "0xD131A4", VA = "0xD131A4")]
		public void DoOffset()
		{
		}

		[Token(Token = "0x6000DCF")]
		[Address(RVA = "0xD13404", Offset = "0xD13404", VA = "0xD13404")]
		public void UndoOffset()
		{
		}

		[Token(Token = "0x6000DD0")]
		[Address(RVA = "0xD1351C", Offset = "0xD1351C", VA = "0xD1351C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000DD1")]
		[Address(RVA = "0xD135BC", Offset = "0xD135BC", VA = "0xD135BC")]
		public PlayspaceCenter()
		{
		}
	}
	[Token(Token = "0x20002D4")]
	public class PlayspaceManager : Singleton<PlayspaceManager>
	{
		[Token(Token = "0x4000F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool offsetPlayspace;

		[Token(Token = "0x4000F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector2 maxPlayspaceSize;

		[Token(Token = "0x4000F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector2 minPlayspaceSize;

		[Token(Token = "0x4000F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector2 playspaceSize;

		[Token(Token = "0x17000166")]
		public Vector3 PlayspaceScale
		{
			[Token(Token = "0x6000DD3")]
			[Address(RVA = "0xD13394", Offset = "0xD13394", VA = "0xD13394")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000DD2")]
		[Address(RVA = "0xD135C4", Offset = "0xD135C4", VA = "0xD135C4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DD4")]
		[Address(RVA = "0xD0D230", Offset = "0xD0D230", VA = "0xD0D230")]
		public Vector3 ClampToPlayspace(Vector3 position, float radius)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DD5")]
		[Address(RVA = "0xD137E8", Offset = "0xD137E8", VA = "0xD137E8")]
		public PlayspaceManager()
		{
		}
	}
}
namespace BOD.Transitions
{
	[Token(Token = "0x20002D5")]
	public class DoTweenTransformTransition : TransformTransition
	{
		[Token(Token = "0x4000F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float duration;

		[Token(Token = "0x4000F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Ease ease;

		[Token(Token = "0x4000F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool swapStartEnd;

		[Token(Token = "0x4000F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool local;

		[Token(Token = "0x4000F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Tween tween;

		[Token(Token = "0x17000167")]
		public override float Duration
		{
			[Token(Token = "0x6000DD6")]
			[Address(RVA = "0xD1388C", Offset = "0xD1388C", VA = "0xD1388C", Slot = "4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000DD7")]
		[Address(RVA = "0xD13894", Offset = "0xD13894", VA = "0xD13894", Slot = "9")]
		protected override bool Transition()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DD8")]
		[Address(RVA = "0xD138B4", Offset = "0xD138B4", VA = "0xD138B4", Slot = "7")]
		protected override void InternalReset()
		{
		}

		[Token(Token = "0x6000DD9")]
		[Address(RVA = "0xD138D0", Offset = "0xD138D0", VA = "0xD138D0", Slot = "6")]
		protected override void BeginTransition()
		{
		}

		[Token(Token = "0x6000DDA")]
		[Address(RVA = "0xD13B10", Offset = "0xD13B10", VA = "0xD13B10")]
		public DoTweenTransformTransition()
		{
		}
	}
	[Token(Token = "0x20002D6")]
	public class InstantTransformTransition : TransformTransition
	{
		[Token(Token = "0x17000168")]
		public override float Duration
		{
			[Token(Token = "0x6000DDB")]
			[Address(RVA = "0xD13B20", Offset = "0xD13B20", VA = "0xD13B20", Slot = "4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000DDC")]
		[Address(RVA = "0xD13B28", Offset = "0xD13B28", VA = "0xD13B28", Slot = "9")]
		protected override bool Transition()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DDD")]
		[Address(RVA = "0xD13B7C", Offset = "0xD13B7C", VA = "0xD13B7C")]
		public InstantTransformTransition()
		{
		}
	}
	[Token(Token = "0x20002D7")]
	public class ParentTransition : SetPieceTransition
	{
		[Token(Token = "0x4000F4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform newParent;

		[Token(Token = "0x17000169")]
		public override float Duration
		{
			[Token(Token = "0x6000DDE")]
			[Address(RVA = "0xD13B84", Offset = "0xD13B84", VA = "0xD13B84", Slot = "4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000DDF")]
		[Address(RVA = "0xD13B8C", Offset = "0xD13B8C", VA = "0xD13B8C", Slot = "9")]
		protected override bool Transition()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DE0")]
		[Address(RVA = "0xD13C60", Offset = "0xD13C60", VA = "0xD13C60")]
		public ParentTransition()
		{
		}
	}
	[Token(Token = "0x20002D8")]
	public class SetActiveTransition : SetPieceTransition
	{
		[Token(Token = "0x4000F4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool active;

		[Token(Token = "0x1700016A")]
		public override float Duration
		{
			[Token(Token = "0x6000DE1")]
			[Address(RVA = "0xD13C70", Offset = "0xD13C70", VA = "0xD13C70", Slot = "4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000DE2")]
		[Address(RVA = "0xD13C78", Offset = "0xD13C78", VA = "0xD13C78", Slot = "9")]
		protected override bool Transition()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DE3")]
		[Address(RVA = "0xD13CA8", Offset = "0xD13CA8", VA = "0xD13CA8")]
		public SetActiveTransition()
		{
		}
	}
	[Token(Token = "0x20002D9")]
	public abstract class SetPieceTransition : MonoBehaviour
	{
		[Token(Token = "0x20002DA")]
		public enum State
		{
			[Token(Token = "0x4000F51")]
			Stopped,
			[Token(Token = "0x4000F52")]
			Delay,
			[Token(Token = "0x4000F53")]
			Transition,
			[Token(Token = "0x4000F54")]
			Complete
		}

		[Token(Token = "0x4000F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BOD.State startState;

		[Token(Token = "0x4000F4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float delay;

		[Token(Token = "0x4000F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float startTime;

		[Token(Token = "0x1700016B")]
		public abstract float Duration
		{
			[Token(Token = "0x6000DE4")]
			get;
		}

		[Token(Token = "0x1700016C")]
		public State state
		{
			[Token(Token = "0x6000DE5")]
			[Address(RVA = "0xD13CB0", Offset = "0xD13CB0", VA = "0xD13CB0")]
			[CompilerGenerated]
			get
			{
				return default(State);
			}
			[Token(Token = "0x6000DE6")]
			[Address(RVA = "0xD13CB8", Offset = "0xD13CB8", VA = "0xD13CB8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000DE7")]
		[Address(RVA = "0xD13CC0", Offset = "0xD13CC0", VA = "0xD13CC0")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000DE8")]
		[Address(RVA = "0xD13CD0", Offset = "0xD13CD0", VA = "0xD13CD0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DE9")]
		[Address(RVA = "0xD13DD8", Offset = "0xD13DD8", VA = "0xD13DD8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000DEA")]
		[Address(RVA = "0xD13D68", Offset = "0xD13D68", VA = "0xD13D68")]
		public void OnStateChange()
		{
		}

		[Token(Token = "0x6000DEB")]
		[Address(RVA = "0xD13DF8", Offset = "0xD13DF8", VA = "0xD13DF8")]
		public void StartTransition()
		{
		}

		[Token(Token = "0x6000DEC")]
		[Address(RVA = "0xD13E70", Offset = "0xD13E70", VA = "0xD13E70")]
		public void UpdateTransition()
		{
		}

		[Token(Token = "0x6000DED")]
		[Address(RVA = "0xD13EE0", Offset = "0xD13EE0", VA = "0xD13EE0")]
		public void ForceComplete()
		{
		}

		[Token(Token = "0x6000DEE")]
		[Address(RVA = "0xD13F14", Offset = "0xD13F14", VA = "0xD13F14", Slot = "5")]
		protected virtual void BeginDelay()
		{
		}

		[Token(Token = "0x6000DEF")]
		[Address(RVA = "0xD13F18", Offset = "0xD13F18", VA = "0xD13F18", Slot = "6")]
		protected virtual void BeginTransition()
		{
		}

		[Token(Token = "0x6000DF0")]
		[Address(RVA = "0xD13F1C", Offset = "0xD13F1C", VA = "0xD13F1C", Slot = "7")]
		protected virtual void InternalReset()
		{
		}

		[Token(Token = "0x6000DF1")]
		[Address(RVA = "0xD13F20", Offset = "0xD13F20", VA = "0xD13F20", Slot = "8")]
		protected virtual void InternalForceComplete()
		{
		}

		[Token(Token = "0x6000DF2")]
		protected abstract bool Transition();

		[Token(Token = "0x6000DF3")]
		[Address(RVA = "0xD13F24", Offset = "0xD13F24", VA = "0xD13F24")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000DF4")]
		[Address(RVA = "0xD13C68", Offset = "0xD13C68", VA = "0xD13C68")]
		protected SetPieceTransition()
		{
		}
	}
	[Token(Token = "0x20002DB")]
	public class TimelineTransition : SetPieceTransition
	{
		[Token(Token = "0x4000F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private PlayableDirector timeline;

		[Token(Token = "0x1700016D")]
		public override float Duration
		{
			[Token(Token = "0x6000DF5")]
			[Address(RVA = "0xD13FA4", Offset = "0xD13FA4", VA = "0xD13FA4", Slot = "4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000DF6")]
		[Address(RVA = "0xD13FC8", Offset = "0xD13FC8", VA = "0xD13FC8", Slot = "7")]
		protected override void InternalReset()
		{
		}

		[Token(Token = "0x6000DF7")]
		[Address(RVA = "0xD13FFC", Offset = "0xD13FFC", VA = "0xD13FFC", Slot = "9")]
		protected override bool Transition()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DF8")]
		[Address(RVA = "0xD14044", Offset = "0xD14044", VA = "0xD14044", Slot = "6")]
		protected override void BeginTransition()
		{
		}

		[Token(Token = "0x6000DF9")]
		[Address(RVA = "0xD14060", Offset = "0xD14060", VA = "0xD14060", Slot = "5")]
		protected override void BeginDelay()
		{
		}

		[Token(Token = "0x6000DFA")]
		[Address(RVA = "0xD14094", Offset = "0xD14094", VA = "0xD14094")]
		public TimelineTransition()
		{
		}
	}
	[Token(Token = "0x20002DC")]
	public abstract class TransformTransition : SetPieceTransition
	{
		[Token(Token = "0x4000F56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 endPosition;

		[Token(Token = "0x4000F57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 endRotation;

		[Token(Token = "0x6000DFB")]
		[Address(RVA = "0xD13B18", Offset = "0xD13B18", VA = "0xD13B18")]
		protected TransformTransition()
		{
		}
	}
}
namespace BOD.SetControl
{
	[Token(Token = "0x20002DD")]
	[ExecuteInEditMode]
	public class GridFloor : MonoBehaviour
	{
		[Token(Token = "0x20002DE")]
		public enum Direction
		{
			[Token(Token = "0x4000F6A")]
			Left,
			[Token(Token = "0x4000F6B")]
			Right,
			[Token(Token = "0x4000F6C")]
			Up,
			[Token(Token = "0x4000F6D")]
			Down
		}

		[Token(Token = "0x4000F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Mesh tileMesh;

		[Token(Token = "0x4000F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector2 size;

		[Token(Token = "0x4000F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2Int gridDimensions;

		[Token(Token = "0x4000F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float thickness;

		[Token(Token = "0x4000F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GridFloorReference globalReference;

		[Token(Token = "0x4000F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Material[] materials;

		[Token(Token = "0x4000F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<GridTile> tiles;

		[Token(Token = "0x4000F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<GridTrapdoor> trapDoors;

		[Token(Token = "0x4000F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<string, GridTrapdoor> trapDoorList;

		[Token(Token = "0x4000F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private List<Vector2> originalUVs;

		[Token(Token = "0x4000F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<Vector3> originalVerts;

		[Token(Token = "0x4000F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private List<int> originalTrisBottom;

		[Token(Token = "0x4000F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private List<Vector3> vertBuffer;

		[Token(Token = "0x4000F65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private List<Vector2> uvBuffer;

		[Token(Token = "0x4000F66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<int> triBuffer;

		[Token(Token = "0x4000F67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private List<Mesh> tileMeshes;

		[Token(Token = "0x4000F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private List<Mesh> tileMeshesFlipped;

		[Token(Token = "0x1700016E")]
		public Vector3 tileSize
		{
			[Token(Token = "0x6000DFC")]
			[Address(RVA = "0xD1409C", Offset = "0xD1409C", VA = "0xD1409C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000DFD")]
		[Address(RVA = "0xD140B4", Offset = "0xD140B4", VA = "0xD140B4")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6000DFE")]
		[Address(RVA = "0xD14628", Offset = "0xD14628", VA = "0xD14628")]
		[ContextMenu("Rebuild")]
		public void Build()
		{
		}

		[Token(Token = "0x6000DFF")]
		[Address(RVA = "0xD1443C", Offset = "0xD1443C", VA = "0xD1443C")]
		[ContextMenu("Dimensions Changed")]
		private void UpdateBaseUVs()
		{
		}

		[Token(Token = "0x6000E00")]
		[Address(RVA = "0xD14C4C", Offset = "0xD14C4C", VA = "0xD14C4C")]
		public Vector3 GetTileCenter(Vector3 worldPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E01")]
		[Address(RVA = "0xD14DC4", Offset = "0xD14DC4", VA = "0xD14DC4")]
		public void CompleteFlip()
		{
		}

		[Token(Token = "0x6000E02")]
		[Address(RVA = "0xD14DC8", Offset = "0xD14DC8", VA = "0xD14DC8")]
		public void ResetTile(GridTile tile)
		{
		}

		[Token(Token = "0x6000E03")]
		[Address(RVA = "0xD14DF0", Offset = "0xD14DF0", VA = "0xD14DF0")]
		public void ResetTile(GridTile tile, int i, int j)
		{
		}

		[Token(Token = "0x6000E04")]
		[Address(RVA = "0xD15060", Offset = "0xD15060", VA = "0xD15060")]
		public GridTrapdoor GetTrapDoor(GameObject ob)
		{
			return null;
		}

		[Token(Token = "0x6000E05")]
		[Address(RVA = "0xD15218", Offset = "0xD15218", VA = "0xD15218")]
		public GridTrapdoor GetTrapDoor(Bounds bounds)
		{
			return null;
		}

		[Token(Token = "0x6000E06")]
		[Address(RVA = "0xD156E8", Offset = "0xD156E8", VA = "0xD156E8")]
		public void FlipTileX(GridTile tile, Vector3 center)
		{
		}

		[Token(Token = "0x6000E07")]
		[Address(RVA = "0xD15994", Offset = "0xD15994", VA = "0xD15994")]
		public void FlipTileY(GridTile tile, Vector3 center)
		{
		}

		[Token(Token = "0x6000E08")]
		[Address(RVA = "0xD15C3C", Offset = "0xD15C3C", VA = "0xD15C3C")]
		public void FlipTileX(GridTile tile, int moveX = 0, int moveY = 0)
		{
		}

		[Token(Token = "0x6000E09")]
		[Address(RVA = "0xD14A9C", Offset = "0xD14A9C", VA = "0xD14A9C")]
		private GridTile CreateTile()
		{
			return null;
		}

		[Token(Token = "0x6000E0A")]
		[Address(RVA = "0xD15ED0", Offset = "0xD15ED0", VA = "0xD15ED0")]
		public List<GridTile> GetTiles(int x, int y, int width, int height, [Optional] List<GridTile> list)
		{
			return null;
		}

		[Token(Token = "0x6000E0B")]
		[Address(RVA = "0xD160AC", Offset = "0xD160AC", VA = "0xD160AC")]
		public GridFloor()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002DF")]
	[CreateAssetMenu]
	public class GridFloorReference : ScriptableObject
	{
		[Token(Token = "0x4000F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GridFloor value;

		[Token(Token = "0x4000F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEvent ValueChanged;

		[Token(Token = "0x1700016F")]
		public GridFloor Value
		{
			[Token(Token = "0x6000E0C")]
			[Address(RVA = "0xD162A4", Offset = "0xD162A4", VA = "0xD162A4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E0D")]
			[Address(RVA = "0xD14418", Offset = "0xD14418", VA = "0xD14418")]
			set
			{
			}
		}

		[Token(Token = "0x6000E0E")]
		[Address(RVA = "0xD162AC", Offset = "0xD162AC", VA = "0xD162AC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E0F")]
		[Address(RVA = "0xD16314", Offset = "0xD16314", VA = "0xD16314")]
		public GridFloorReference()
		{
		}
	}
	[Token(Token = "0x20002E0")]
	public class GridTile : MonoBehaviour
	{
		[Token(Token = "0x4000F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Mesh mesh;

		[Token(Token = "0x4000F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Mesh flippedMesh;

		[Token(Token = "0x4000F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MeshRenderer renderer;

		[Token(Token = "0x4000F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool flipped;

		[Token(Token = "0x4000F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool locked;

		[Token(Token = "0x4000F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GridTrapdoor trapdoor;

		[Token(Token = "0x4000F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 center;

		[Token(Token = "0x4000F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public object animationLock;

		[Token(Token = "0x4000F78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		[ReadOnly]
		internal int index;

		[Token(Token = "0x6000E10")]
		[Address(RVA = "0xD1637C", Offset = "0xD1637C", VA = "0xD1637C")]
		public void ReleaseTrapdoor()
		{
		}

		[Token(Token = "0x6000E11")]
		[Address(RVA = "0xD163AC", Offset = "0xD163AC", VA = "0xD163AC")]
		public GridTile()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002E1")]
	public class GridTrapdoor : MonoBehaviour
	{
		[Token(Token = "0x20002E2")]
		public enum MotionType
		{
			[Token(Token = "0x4000F81")]
			Lower,
			[Token(Token = "0x4000F82")]
			Slide,
			[Token(Token = "0x4000F83")]
			SplitSlide,
			[Token(Token = "0x4000F84")]
			Flip
		}

		[Token(Token = "0x4000F79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector2Int gridCoord;

		[Token(Token = "0x4000F7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector2Int gridSize;

		[Token(Token = "0x4000F7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<GridTile> tiles;

		[Token(Token = "0x4000F7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool flipped;

		[Token(Token = "0x4000F7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GridFloorReference floor;

		[Token(Token = "0x4000F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool isActive;

		[Token(Token = "0x17000170")]
		public Vector3 center
		{
			[Token(Token = "0x6000E12")]
			[Address(RVA = "0xD163B4", Offset = "0xD163B4", VA = "0xD163B4")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000E13")]
			[Address(RVA = "0xD163C0", Offset = "0xD163C0", VA = "0xD163C0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000E14")]
		[Address(RVA = "0xD163CC", Offset = "0xD163CC", VA = "0xD163CC")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6000E15")]
		[Address(RVA = "0xD164EC", Offset = "0xD164EC", VA = "0xD164EC")]
		private void OnFloorChanged()
		{
		}

		[Token(Token = "0x6000E16")]
		[Address(RVA = "0xD16674", Offset = "0xD16674", VA = "0xD16674")]
		public void Activate()
		{
		}

		[Token(Token = "0x6000E17")]
		[Address(RVA = "0xD16974", Offset = "0xD16974", VA = "0xD16974")]
		public void Deactivate()
		{
		}

		[Token(Token = "0x6000E18")]
		[Address(RVA = "0xD156C4", Offset = "0xD156C4", VA = "0xD156C4")]
		public void FixPosition()
		{
		}

		[Token(Token = "0x6000E19")]
		[Address(RVA = "0xD16B48", Offset = "0xD16B48", VA = "0xD16B48")]
		public void BeginFlipX()
		{
		}

		[Token(Token = "0x6000E1A")]
		[Address(RVA = "0xD16CF8", Offset = "0xD16CF8", VA = "0xD16CF8")]
		public void BeginFlipY()
		{
		}

		[Token(Token = "0x6000E1B")]
		[Address(RVA = "0xD16EA8", Offset = "0xD16EA8", VA = "0xD16EA8")]
		public void Spawn(GameObject ob, MotionType motionType, Action onComplete)
		{
		}

		[Token(Token = "0x6000E1C")]
		[Address(RVA = "0xD17494", Offset = "0xD17494", VA = "0xD17494")]
		public void Close(MotionType motion, TweenCallback onComplete)
		{
		}

		[Token(Token = "0x6000E1D")]
		[Address(RVA = "0xD17114", Offset = "0xD17114", VA = "0xD17114")]
		public void Open(MotionType motion, TweenCallback onComplete)
		{
		}

		[Token(Token = "0x6000E1E")]
		[Address(RVA = "0xD17498", Offset = "0xD17498", VA = "0xD17498")]
		public void Offset(Vector3 localOffset)
		{
		}

		[Token(Token = "0x6000E1F")]
		[Address(RVA = "0xD176A4", Offset = "0xD176A4", VA = "0xD176A4")]
		public void SetLowerdPosition(float amount)
		{
		}

		[Token(Token = "0x6000E20")]
		[Address(RVA = "0xD17728", Offset = "0xD17728", VA = "0xD17728")]
		public void SetSlidePosition(float t, Vector2 axis)
		{
		}

		[Token(Token = "0x6000E21")]
		[Address(RVA = "0xD178FC", Offset = "0xD178FC", VA = "0xD178FC")]
		public void Rotate(Vector3 eulerAngles)
		{
		}

		[Token(Token = "0x6000E22")]
		[Address(RVA = "0xD17C3C", Offset = "0xD17C3C", VA = "0xD17C3C")]
		public void Rotate(float angle, Vector3 axis)
		{
		}

		[Token(Token = "0x6000E23")]
		[Address(RVA = "0xD1792C", Offset = "0xD1792C", VA = "0xD1792C")]
		public void Rotate(Quaternion rotation)
		{
		}

		[Token(Token = "0x6000E24")]
		[Address(RVA = "0xD17C58", Offset = "0xD17C58", VA = "0xD17C58")]
		public GridTrapdoor()
		{
		}
	}
	[Token(Token = "0x20002E4")]
	[ExecuteInEditMode]
	public class StageFloor : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20002E5")]
		public class MeshData
		{
			[Token(Token = "0x4000F95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public List<Vector3> verts;

			[Token(Token = "0x4000F96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public List<Vector2> uvs;

			[Token(Token = "0x4000F97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public List<int> tris;

			[Token(Token = "0x6000E34")]
			[Address(RVA = "0xD19F04", Offset = "0xD19F04", VA = "0xD19F04")]
			public void Apply(Mesh m)
			{
			}

			[Token(Token = "0x6000E35")]
			[Address(RVA = "0xD18A2C", Offset = "0xD18A2C", VA = "0xD18A2C")]
			public void Clear()
			{
			}

			[Token(Token = "0x6000E36")]
			[Address(RVA = "0xD197B0", Offset = "0xD197B0", VA = "0xD197B0")]
			public void AddTriFromOther(MeshData other, int a, int b, int c)
			{
			}

			[Token(Token = "0x6000E37")]
			[Address(RVA = "0xD19F68", Offset = "0xD19F68", VA = "0xD19F68")]
			public void Extrude(float thickness)
			{
			}

			[Token(Token = "0x6000E38")]
			[Address(RVA = "0xD1A1DC", Offset = "0xD1A1DC", VA = "0xD1A1DC")]
			private void GetEdge(int id, out int a, out int b)
			{
			}

			[Token(Token = "0x6000E39")]
			[Address(RVA = "0xD19E00", Offset = "0xD19E00", VA = "0xD19E00")]
			public MeshData()
			{
			}
		}

		[Token(Token = "0x4000F8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector2 floorSize;

		[Token(Token = "0x4000F8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[ReadOnly]
		private List<Trapdoor> trapDoors;

		[Token(Token = "0x4000F8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<float> xCoords;

		[Token(Token = "0x4000F8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<float> yCoords;

		[Token(Token = "0x4000F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[HideInInspector]
		private Mesh gridMesh;

		[Token(Token = "0x4000F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Vector3> verts;

		[Token(Token = "0x4000F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Vector2> uv;

		[Token(Token = "0x4000F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<int> tris;

		[Token(Token = "0x4000F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private MeshData mainFloorMesh;

		[Token(Token = "0x17000171")]
		public Material[] materials
		{
			[Token(Token = "0x6000E28")]
			[Address(RVA = "0xD18104", Offset = "0xD18104", VA = "0xD18104")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E29")]
			[Address(RVA = "0xD1810C", Offset = "0xD1810C", VA = "0xD1810C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000E2A")]
		[Address(RVA = "0xD18114", Offset = "0xD18114", VA = "0xD18114")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6000E2B")]
		[Address(RVA = "0xD18178", Offset = "0xD18178", VA = "0xD18178")]
		public void PopulateTrapdoorsList()
		{
		}

		[Token(Token = "0x6000E2C")]
		[Address(RVA = "0xD18348", Offset = "0xD18348", VA = "0xD18348")]
		public void RemoveDuplicateTrapdoors()
		{
		}

		[Token(Token = "0x6000E2D")]
		[Address(RVA = "0xD18434", Offset = "0xD18434", VA = "0xD18434")]
		public void Trapdoor()
		{
		}

		[Token(Token = "0x6000E2E")]
		[Address(RVA = "0xD18948", Offset = "0xD18948", VA = "0xD18948")]
		public Trapdoor CreateTrapDoor()
		{
			return null;
		}

		[Token(Token = "0x6000E2F")]
		[Address(RVA = "0xD18438", Offset = "0xD18438", VA = "0xD18438")]
		[ContextMenu("Rebuild")]
		public void BuildFloor()
		{
		}

		[Token(Token = "0x6000E30")]
		[Address(RVA = "0xD18BF0", Offset = "0xD18BF0", VA = "0xD18BF0")]
		private void BuildGrid()
		{
		}

		[Token(Token = "0x6000E31")]
		[Address(RVA = "0xD19310", Offset = "0xD19310", VA = "0xD19310")]
		private void AddTri(int a, int b, int c)
		{
		}

		[Token(Token = "0x6000E32")]
		[Address(RVA = "0xD18B1C", Offset = "0xD18B1C", VA = "0xD18B1C")]
		private void RemoveDuplicateCoords(List<float> list)
		{
		}

		[Token(Token = "0x6000E33")]
		[Address(RVA = "0xD19C68", Offset = "0xD19C68", VA = "0xD19C68")]
		public StageFloor()
		{
		}
	}
	[Token(Token = "0x20002E6")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(MeshFilter))]
	[RequireComponent(typeof(MeshRenderer))]
	public class Trapdoor : MonoBehaviour
	{
		[Token(Token = "0x4000F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector2 size;

		[Token(Token = "0x4000F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[HideInInspector]
		internal StageFloor.MeshData data;

		[Token(Token = "0x4000F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private MeshFilter meshFilter;

		[Token(Token = "0x4000F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private MeshRenderer meshRenderer;

		[Token(Token = "0x4000F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[HideInInspector]
		private StageFloor _stage;

		[Token(Token = "0x17000172")]
		public StageFloor stage
		{
			[Token(Token = "0x6000E3A")]
			[Address(RVA = "0xD1A290", Offset = "0xD1A290", VA = "0xD1A290")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E3B")]
			[Address(RVA = "0xD18320", Offset = "0xD18320", VA = "0xD18320")]
			internal set
			{
			}
		}

		[Token(Token = "0x17000173")]
		public Rect rect
		{
			[Token(Token = "0x6000E3C")]
			[Address(RVA = "0xD18ABC", Offset = "0xD18ABC", VA = "0xD18ABC")]
			get
			{
				return default(Rect);
			}
		}

		[Token(Token = "0x6000E3D")]
		[Address(RVA = "0xD1A298", Offset = "0xD1A298", VA = "0xD1A298")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000E3E")]
		[Address(RVA = "0xD1A314", Offset = "0xD1A314", VA = "0xD1A314")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000E3F")]
		[Address(RVA = "0xD195C8", Offset = "0xD195C8", VA = "0xD195C8")]
		public void ApplyMeshData()
		{
		}

		[Token(Token = "0x6000E40")]
		[Address(RVA = "0xD1A318", Offset = "0xD1A318", VA = "0xD1A318")]
		public Trapdoor()
		{
		}
	}
	[Token(Token = "0x20002E7")]
	public class TrapdoorSpawnTransition : SetPieceTransition
	{
		[Token(Token = "0x4000F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float duration;

		[Token(Token = "0x4000F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public GridTrapdoor.MotionType type;

		[Token(Token = "0x4000F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GridFloorReference floor;

		[Token(Token = "0x4000FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GridTrapdoor trapDoor;

		[Token(Token = "0x4000FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool complete;

		[Token(Token = "0x17000174")]
		public override float Duration
		{
			[Token(Token = "0x6000E41")]
			[Address(RVA = "0xD1A37C", Offset = "0xD1A37C", VA = "0xD1A37C", Slot = "4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000E42")]
		[Address(RVA = "0xD1A384", Offset = "0xD1A384", VA = "0xD1A384", Slot = "6")]
		protected override void BeginTransition()
		{
		}

		[Token(Token = "0x6000E43")]
		[Address(RVA = "0xD1A4BC", Offset = "0xD1A4BC", VA = "0xD1A4BC", Slot = "9")]
		protected override bool Transition()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E44")]
		[Address(RVA = "0xD1A4C4", Offset = "0xD1A4C4", VA = "0xD1A4C4")]
		public TrapdoorSpawnTransition()
		{
		}
	}
}
namespace Malee
{
	[Token(Token = "0x20002E8")]
	public class ReorderableAttribute : PropertyAttribute
	{
		[Token(Token = "0x4000FA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool add;

		[Token(Token = "0x4000FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool remove;

		[Token(Token = "0x4000FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public bool draggable;

		[Token(Token = "0x4000FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
		public bool singleLine;

		[Token(Token = "0x4000FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool paginate;

		[Token(Token = "0x4000FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		public bool sortable;

		[Token(Token = "0x4000FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int pageSize;

		[Token(Token = "0x4000FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string elementNameProperty;

		[Token(Token = "0x4000FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string elementNameOverride;

		[Token(Token = "0x4000FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string elementIconPath;

		[Token(Token = "0x4000FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Type surrogateType;

		[Token(Token = "0x4000FAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string surrogateProperty;

		[Token(Token = "0x6000E46")]
		[Address(RVA = "0xD1B4D8", Offset = "0xD1B4D8", VA = "0xD1B4D8")]
		public ReorderableAttribute()
		{
		}

		[Token(Token = "0x6000E47")]
		[Address(RVA = "0xD1B50C", Offset = "0xD1B50C", VA = "0xD1B50C")]
		public ReorderableAttribute(string elementNameProperty)
		{
		}

		[Token(Token = "0x6000E48")]
		[Address(RVA = "0xD1B5B0", Offset = "0xD1B5B0", VA = "0xD1B5B0")]
		public ReorderableAttribute(string elementNameProperty, string elementIconPath)
		{
		}

		[Token(Token = "0x6000E49")]
		[Address(RVA = "0xD1B5F4", Offset = "0xD1B5F4", VA = "0xD1B5F4")]
		public ReorderableAttribute(string elementNameProperty, string elementNameOverride, string elementIconPath)
		{
		}

		[Token(Token = "0x6000E4A")]
		[Address(RVA = "0xD1B644", Offset = "0xD1B644", VA = "0xD1B644")]
		public ReorderableAttribute(bool add, bool remove, bool draggable, [Optional] string elementNameProperty, [Optional] string elementIconPath)
		{
		}

		[Token(Token = "0x6000E4B")]
		[Address(RVA = "0xD1B54C", Offset = "0xD1B54C", VA = "0xD1B54C")]
		public ReorderableAttribute(bool add, bool remove, bool draggable, [Optional] string elementNameProperty, [Optional] string elementNameOverride, [Optional] string elementIconPath)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002E9")]
	public abstract class ReorderableArray<T> : ICloneable, IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable
	{
		[Token(Token = "0x4000FAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private List<T> array;

		[Token(Token = "0x17000175")]
		public T this[int index]
		{
			[Token(Token = "0x6000E4E")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x6000E4F")]
			set
			{
			}
		}

		[Token(Token = "0x17000176")]
		public int Length
		{
			[Token(Token = "0x6000E50")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000177")]
		public bool IsReadOnly
		{
			[Token(Token = "0x6000E51")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000178")]
		public int Count
		{
			[Token(Token = "0x6000E52")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000E4C")]
		public ReorderableArray()
		{
		}

		[Token(Token = "0x6000E4D")]
		public ReorderableArray(int length)
		{
		}

		[Token(Token = "0x6000E53")]
		public object Clone()
		{
			return null;
		}

		[Token(Token = "0x6000E54")]
		public void CopyFrom(IEnumerable<T> value)
		{
		}

		[Token(Token = "0x6000E55")]
		public bool Contains(T value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E56")]
		public int IndexOf(T value)
		{
			return default(int);
		}

		[Token(Token = "0x6000E57")]
		public void Insert(int index, T item)
		{
		}

		[Token(Token = "0x6000E58")]
		public void RemoveAt(int index)
		{
		}

		[Token(Token = "0x6000E59")]
		public void Add(T item)
		{
		}

		[Token(Token = "0x6000E5A")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000E5B")]
		public void CopyTo(T[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6000E5C")]
		public bool Remove(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E5D")]
		public T[] ToArray()
		{
			return null;
		}

		[Token(Token = "0x6000E5E")]
		public IEnumerator<T> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000E5F")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}
}
namespace PWCommon1
{
	[Token(Token = "0x20002EA")]
	public class AppConfig
	{
		[Token(Token = "0x4000FAF")]
		public const string VERSION = "1";

		[Token(Token = "0x4000FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string CfgVersion;

		[Token(Token = "0x4000FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly double LastUpdated;

		[Token(Token = "0x4000FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly string MinUnity;

		[Token(Token = "0x4000FB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly string Name;

		[Token(Token = "0x4000FB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly Texture2D Logo;

		[Token(Token = "0x4000FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public readonly string NameSpace;

		[Token(Token = "0x4000FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public readonly string Folder;

		[Token(Token = "0x4000FB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public readonly string ScriptsFolder;

		[Token(Token = "0x4000FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public readonly string EditorScriptsFolder;

		[Token(Token = "0x4000FB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public readonly string DocsFolder;

		[Token(Token = "0x4000FBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public readonly string DocsFolderSpaced;

		[Token(Token = "0x4000FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public readonly string MajorVersion;

		[Token(Token = "0x4000FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public readonly string MinorVersion;

		[Token(Token = "0x4000FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public readonly string PatchVersion;

		[Token(Token = "0x4000FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public readonly string Version;

		[Token(Token = "0x4000FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public readonly SystemLanguage[] AvailableLanguages;

		[Token(Token = "0x4000FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public readonly string TutorialsLink;

		[Token(Token = "0x4000FC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public readonly string DiscordLink;

		[Token(Token = "0x4000FC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public readonly string SupportLink;

		[Token(Token = "0x4000FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public readonly string ASLink;

		[Token(Token = "0x4000FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public readonly string NewsURLStripped;

		[Token(Token = "0x4000FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public readonly bool HasWelcome;

		[Token(Token = "0x17000179")]
		public string NewsURL
		{
			[Token(Token = "0x6000E60")]
			[Address(RVA = "0xD1B6A4", Offset = "0xD1B6A4", VA = "0xD1B6A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E61")]
		[Address(RVA = "0xD1B81C", Offset = "0xD1B81C", VA = "0xD1B81C")]
		public AppConfig(string minUnity, string name, SystemLanguage[] availableLanguages)
		{
		}

		[Token(Token = "0x6000E62")]
		[Address(RVA = "0xD1BB38", Offset = "0xD1BB38", VA = "0xD1BB38")]
		public AppConfig(string cfgVersion, double lastUpdated, string minUnity, string name, Texture2D logo, string nameSpace, string folder, string scriptsFolder, string editorScriptsFolder, string docsFolder, string majorVer, string minorVer, string patchVer, SystemLanguage[] availableLang, string tutorialsLink, string discordLink, string supportLink, string asLink, string newsURL, bool hasWelcome)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002EB")]
	public class DropStack<T>
	{
		[Token(Token = "0x4000FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		protected T[] m_items;

		[Token(Token = "0x4000FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		protected int m_topIndex;

		[Token(Token = "0x4000FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		protected int m_count;

		[Token(Token = "0x1700017A")]
		public int Capacity
		{
			[Token(Token = "0x6000E63")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700017B")]
		public int Count
		{
			[Token(Token = "0x6000E64")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000E65")]
		public DropStack(int capacity)
		{
		}

		[Token(Token = "0x6000E66")]
		public void Push(T item)
		{
		}

		[Token(Token = "0x6000E67")]
		public void Push(IEnumerable<T> items)
		{
		}

		[Token(Token = "0x6000E68")]
		public T Pop()
		{
			return (T)null;
		}

		[Token(Token = "0x6000E69")]
		public T Peek()
		{
			return (T)null;
		}
	}
	[Serializable]
	[Token(Token = "0x20002EC")]
	public class UBrush
	{
		[Token(Token = "0x4000FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float[] m_Strength;

		[Token(Token = "0x4000FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Texture2D m_Brush;

		[Token(Token = "0x4000FCB")]
		private const int MIN_BRUSH_SIZE = 3;

		[Token(Token = "0x1700017C")]
		public int Size
		{
			[Token(Token = "0x6000E6A")]
			[Address(RVA = "0xD1BDC8", Offset = "0xD1BDC8", VA = "0xD1BDC8")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000E6B")]
			[Address(RVA = "0xD1BDD0", Offset = "0xD1BDD0", VA = "0xD1BDD0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000E6C")]
		[Address(RVA = "0xD1BDD8", Offset = "0xD1BDD8", VA = "0xD1BDD8")]
		public bool Load(Texture2D brushTex, int size)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E6D")]
		[Address(RVA = "0xD1BFD8", Offset = "0xD1BFD8", VA = "0xD1BFD8")]
		public float GetStrengthAtCoords(int ix, int iy)
		{
			return default(float);
		}

		[Token(Token = "0x6000E6E")]
		[Address(RVA = "0xD1C02C", Offset = "0xD1C02C", VA = "0xD1C02C")]
		public UBrush()
		{
		}
	}
	[Token(Token = "0x20002ED")]
	public class Utils : MonoBehaviour
	{
		[Token(Token = "0x6000E6F")]
		[Address(RVA = "0xD1C034", Offset = "0xD1C034", VA = "0xD1C034")]
		public static string FixFileName(string sourceFileName)
		{
			return null;
		}

		[Token(Token = "0x6000E70")]
		[Address(RVA = "0xD1C11C", Offset = "0xD1C11C", VA = "0xD1C11C")]
		public static FileStream OpenRead(string path)
		{
			return null;
		}

		[Token(Token = "0x6000E71")]
		[Address(RVA = "0xD1C18C", Offset = "0xD1C18C", VA = "0xD1C18C")]
		public static string ReadAllText(string path)
		{
			return null;
		}

		[Token(Token = "0x6000E72")]
		[Address(RVA = "0xD1C3D8", Offset = "0xD1C3D8", VA = "0xD1C3D8")]
		public static void WriteAllText(string path, string contents)
		{
		}

		[Token(Token = "0x6000E73")]
		[Address(RVA = "0xD1C650", Offset = "0xD1C650", VA = "0xD1C650")]
		public static byte[] ReadAllBytes(string path)
		{
			return null;
		}

		[Token(Token = "0x6000E74")]
		[Address(RVA = "0xD1C914", Offset = "0xD1C914", VA = "0xD1C914")]
		public static void WriteAllBytes(string path, byte[] bytes)
		{
		}

		[Token(Token = "0x6000E75")]
		[Address(RVA = "0xD1CAB0", Offset = "0xD1CAB0", VA = "0xD1CAB0")]
		public static string GetEditorScriptsPath(AppConfig appConfig)
		{
			return null;
		}

		[Token(Token = "0x6000E76")]
		[Address(RVA = "0xD1CAD0", Offset = "0xD1CAD0", VA = "0xD1CAD0")]
		public static string GetAppsSubfolder(string appFolder, string subfolderPath)
		{
			return null;
		}

		[Token(Token = "0x6000E77")]
		[Address(RVA = "0xD1CF8C", Offset = "0xD1CF8C", VA = "0xD1CF8C")]
		public static bool Math_ApproximatelyEqual(float a, float b, float threshold)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E78")]
		[Address(RVA = "0xD1CFAC", Offset = "0xD1CFAC", VA = "0xD1CFAC")]
		public static bool Math_ApproximatelyEqual(float a, float b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E79")]
		[Address(RVA = "0xD1CFD4", Offset = "0xD1CFD4", VA = "0xD1CFD4")]
		public static bool Math_IsPowerOf2(int value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E7A")]
		[Address(RVA = "0xD1CFE4", Offset = "0xD1CFE4", VA = "0xD1CFE4")]
		public static float Math_Clamp(float min, float max, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6000E7B")]
		[Address(RVA = "0xD1CFF8", Offset = "0xD1CFF8", VA = "0xD1CFF8")]
		public static float Math_Modulo(float value, float mod)
		{
			return default(float);
		}

		[Token(Token = "0x6000E7C")]
		[Address(RVA = "0xD1D064", Offset = "0xD1D064", VA = "0xD1D064")]
		public static int Math_Modulo(int value, int mod)
		{
			return default(int);
		}

		[Token(Token = "0x6000E7D")]
		[Address(RVA = "0xD1D0F0", Offset = "0xD1D0F0", VA = "0xD1D0F0")]
		public static float Math_InterpolateLinear(float value1, float value2, float fraction)
		{
			return default(float);
		}

		[Token(Token = "0x6000E7E")]
		[Address(RVA = "0xD1D108", Offset = "0xD1D108", VA = "0xD1D108")]
		public static float Math_InterpolateSmooth(float value1, float value2, float fraction)
		{
			return default(float);
		}

		[Token(Token = "0x6000E7F")]
		[Address(RVA = "0xD1D150", Offset = "0xD1D150", VA = "0xD1D150")]
		public static float Math_Distance(float x1, float y1, float x2, float y2)
		{
			return default(float);
		}

		[Token(Token = "0x6000E80")]
		[Address(RVA = "0xD1D16C", Offset = "0xD1D16C", VA = "0xD1D16C")]
		public static float Math_InterpolateSmooth2(float v1, float v2, float fraction)
		{
			return default(float);
		}

		[Token(Token = "0x6000E81")]
		[Address(RVA = "0xD1D1A0", Offset = "0xD1D1A0", VA = "0xD1D1A0")]
		public static float Math_InterpolateCubic(float v0, float v1, float v2, float v3, float fraction)
		{
			return default(float);
		}

		[Token(Token = "0x6000E82")]
		[Address(RVA = "0xD1D1D8", Offset = "0xD1D1D8", VA = "0xD1D1D8")]
		public static Vector3 RotatePointAroundPivot(Vector3 point, Vector3 pivot, Vector3 angle)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E83")]
		[Address(RVA = "0xD1D258", Offset = "0xD1D258", VA = "0xD1D258")]
		public static int GetFrapoch()
		{
			return default(int);
		}

		[Token(Token = "0x6000E84")]
		[Address(RVA = "0xD1D310", Offset = "0xD1D310", VA = "0xD1D310")]
		public static int TimeToFrapoch(DateTime time)
		{
			return default(int);
		}

		[Token(Token = "0x6000E85")]
		[Address(RVA = "0xD1D3BC", Offset = "0xD1D3BC", VA = "0xD1D3BC")]
		public static DateTime FrapochToLocalDate(int seconds)
		{
			return default(DateTime);
		}

		[Token(Token = "0x6000E86")]
		[Address(RVA = "0xD1D3C4", Offset = "0xD1D3C4", VA = "0xD1D3C4")]
		public static DateTime FrapochToLocalDate(double seconds)
		{
			return default(DateTime);
		}

		[Token(Token = "0x6000E87")]
		[Address(RVA = "0xD1D438", Offset = "0xD1D438", VA = "0xD1D438")]
		public static bool IsInLayerMask(GameObject obj, LayerMask mask)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E88")]
		[Address(RVA = "0xD1D488", Offset = "0xD1D488", VA = "0xD1D488")]
		public static bool IsSameTexture(Texture2D tex1, Texture2D tex2, bool checkID = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E89")]
		[Address(RVA = "0xD1D5E4", Offset = "0xD1D5E4", VA = "0xD1D5E4")]
		public static bool IsSameGameObject(GameObject go1, GameObject go2, bool checkID = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E8A")]
		[Address(RVA = "0xD1D6EC", Offset = "0xD1D6EC", VA = "0xD1D6EC")]
		public static Type GetType(string TypeName)
		{
			return null;
		}

		[Token(Token = "0x6000E8B")]
		[Address(RVA = "0xD1DAA4", Offset = "0xD1DAA4", VA = "0xD1DAA4")]
		public Utils()
		{
		}
	}
}
namespace PWCommon1.Localization
{
	[Token(Token = "0x20002EE")]
	public class LanguagePack
	{
		[Token(Token = "0x4000FCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static IDictionary<string, LanguagePack> ms_loadedPacks;

		[Token(Token = "0x4000FCE")]
		public const string VERSION = "1";

		[Token(Token = "0x4000FCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Version;

		[Token(Token = "0x4000FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public double LastUpdated;

		[Token(Token = "0x4000FD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<LocalizationCategory> Categories;

		[Token(Token = "0x4000FD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IDictionary<string, LocalizationItem> Items;

		[Token(Token = "0x4000FD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string m_path;

		[Token(Token = "0x1400000D")]
		private event Action OnChange
		{
			[Token(Token = "0x6000E92")]
			[Address(RVA = "0xD1F1FC", Offset = "0xD1F1FC", VA = "0xD1F1FC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E93")]
			[Address(RVA = "0xD1F298", Offset = "0xD1F298", VA = "0xD1F298")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000E8C")]
		[Address(RVA = "0xD1DAAC", Offset = "0xD1DAAC", VA = "0xD1DAAC")]
		public LanguagePack()
		{
		}

		[Token(Token = "0x6000E8D")]
		[Address(RVA = "0xD1DBA0", Offset = "0xD1DBA0", VA = "0xD1DBA0")]
		public LanguagePack(LocalizationItem[] items)
		{
		}

		[Token(Token = "0x6000E8E")]
		[Address(RVA = "0xD1E088", Offset = "0xD1E088", VA = "0xD1E088")]
		public LanguagePack(LocalizationCategory[] categories)
		{
		}

		[Token(Token = "0x6000E8F")]
		[Address(RVA = "0xD1E3E4", Offset = "0xD1E3E4", VA = "0xD1E3E4")]
		public static LanguagePack Load(string path)
		{
			return null;
		}

		[Token(Token = "0x6000E90")]
		[Address(RVA = "0xD1EE00", Offset = "0xD1EE00", VA = "0xD1EE00")]
		public void ReLoad()
		{
		}

		[Token(Token = "0x6000E91")]
		[Address(RVA = "0xD1E950", Offset = "0xD1E950", VA = "0xD1E950")]
		private void LoadV1(BinaryFormatter formatter, Stream stream)
		{
		}

		[Token(Token = "0x6000E94")]
		[Address(RVA = "0xD1F334", Offset = "0xD1F334", VA = "0xD1F334")]
		[Conditional("UNITY_EDITOR")]
		public void Validate()
		{
		}

		[Token(Token = "0x6000E95")]
		[Address(RVA = "0xD1F350", Offset = "0xD1F350", VA = "0xD1F350")]
		[Conditional("UNITY_EDITOR")]
		public void AddOnChangeAction(Action action)
		{
		}

		[Token(Token = "0x6000E96")]
		[Address(RVA = "0xD1F354", Offset = "0xD1F354", VA = "0xD1F354")]
		[Conditional("UNITY_EDITOR")]
		public void RemoveOnChangeAction(Action action)
		{
		}
	}
	[Token(Token = "0x20002EF")]
	public class LocalizationCategory
	{
		[Token(Token = "0x4000FD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Name;

		[Token(Token = "0x4000FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<LocalizationItem> Items;

		[Token(Token = "0x6000E98")]
		[Address(RVA = "0xD1DFF8", Offset = "0xD1DFF8", VA = "0xD1DFF8")]
		public LocalizationCategory(string name)
		{
		}

		[Token(Token = "0x6000E99")]
		[Address(RVA = "0xD1F3E4", Offset = "0xD1F3E4", VA = "0xD1F3E4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20002F0")]
	public class LocalizationItem
	{
		[Token(Token = "0x4000FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Key;

		[Token(Token = "0x4000FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Val;

		[Token(Token = "0x4000FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string Tooltip;

		[Token(Token = "0x4000FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string Help;

		[Token(Token = "0x4000FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string Context;

		[Token(Token = "0x6000E9A")]
		[Address(RVA = "0xD1F3EC", Offset = "0xD1F3EC", VA = "0xD1F3EC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000E9B")]
		[Address(RVA = "0xD1F1A8", Offset = "0xD1F1A8", VA = "0xD1F1A8")]
		public LocalizationItem()
		{
		}
	}
}
namespace cakeslice
{
	[Token(Token = "0x20002F1")]
	public class MaterialSwitcher : MonoBehaviour
	{
		[Token(Token = "0x4000FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material target;

		[Token(Token = "0x4000FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int index;

		[Token(Token = "0x6000E9C")]
		[Address(RVA = "0xD1F3F4", Offset = "0xD1F3F4", VA = "0xD1F3F4")]
		public void Update()
		{
		}

		[Token(Token = "0x6000E9D")]
		[Address(RVA = "0xD1F4DC", Offset = "0xD1F4DC", VA = "0xD1F4DC")]
		public MaterialSwitcher()
		{
		}
	}
	[Token(Token = "0x20002F2")]
	public class OutlineAnimation : MonoBehaviour
	{
		[Token(Token = "0x4000FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool pingPong;

		[Token(Token = "0x6000E9E")]
		[Address(RVA = "0xD1F4E4", Offset = "0xD1F4E4", VA = "0xD1F4E4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E9F")]
		[Address(RVA = "0xD1F4E8", Offset = "0xD1F4E8", VA = "0xD1F4E8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EA0")]
		[Address(RVA = "0xD1F4EC", Offset = "0xD1F4EC", VA = "0xD1F4EC")]
		public OutlineAnimation()
		{
		}
	}
	[Token(Token = "0x20002F3")]
	public class Rotate : MonoBehaviour
	{
		[Token(Token = "0x4000FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float timer;

		[Token(Token = "0x4000FE0")]
		private const float time = 1f;

		[Token(Token = "0x6000EA1")]
		[Address(RVA = "0xD1F4F4", Offset = "0xD1F4F4", VA = "0xD1F4F4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EA2")]
		[Address(RVA = "0xD1F4F8", Offset = "0xD1F4F8", VA = "0xD1F4F8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EA3")]
		[Address(RVA = "0xD1F5B4", Offset = "0xD1F5B4", VA = "0xD1F5B4")]
		public Rotate()
		{
		}
	}
	[Token(Token = "0x20002F4")]
	public class Toggle : MonoBehaviour
	{
		[Token(Token = "0x6000EA4")]
		[Address(RVA = "0xD1F5BC", Offset = "0xD1F5BC", VA = "0xD1F5BC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EA5")]
		[Address(RVA = "0xD1F5C0", Offset = "0xD1F5C0", VA = "0xD1F5C0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EA6")]
		[Address(RVA = "0xD1F65C", Offset = "0xD1F65C", VA = "0xD1F65C")]
		public Toggle()
		{
		}
	}
	[Token(Token = "0x20002F5")]
	public class LinkedSet<T> : IEnumerable<T>, IEnumerable
	{
		[Token(Token = "0x20002F6")]
		public enum AddType
		{
			[Token(Token = "0x4000FE4")]
			NO_CHANGE,
			[Token(Token = "0x4000FE5")]
			ADDED,
			[Token(Token = "0x4000FE6")]
			MOVED
		}

		[Token(Token = "0x4000FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private LinkedList<T> list;

		[Token(Token = "0x4000FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Dictionary<T, LinkedListNode<T>> dictionary;

		[Token(Token = "0x1700017D")]
		public int Count
		{
			[Token(Token = "0x6000EAA")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000EA7")]
		public LinkedSet()
		{
		}

		[Token(Token = "0x6000EA8")]
		public LinkedSet(IEqualityComparer<T> comparer)
		{
		}

		[Token(Token = "0x6000EA9")]
		public bool Contains(T t)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EAB")]
		public bool Add(T t)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EAC")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000EAD")]
		public AddType AddOrMoveToEnd(T t)
		{
			return default(AddType);
		}

		[Token(Token = "0x6000EAE")]
		public bool Remove(T t)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EAF")]
		public void ExceptWith(IEnumerable<T> enumerable)
		{
		}

		[Token(Token = "0x6000EB0")]
		public IEnumerator<T> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000EB1")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}
	[Token(Token = "0x20002F7")]
	[RequireComponent(typeof(Renderer))]
	[ExecuteInEditMode]
	public class Outline : MonoBehaviour
	{
		[Token(Token = "0x4000FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int color;

		[Token(Token = "0x4000FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool eraseRenderer;

		[Token(Token = "0x4000FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public int originalLayer;

		[Token(Token = "0x4000FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public Material[] originalMaterials;

		[Token(Token = "0x1700017E")]
		public Renderer Renderer
		{
			[Token(Token = "0x6000EB2")]
			[Address(RVA = "0xD1F664", Offset = "0xD1F664", VA = "0xD1F664")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EB3")]
			[Address(RVA = "0xD1F66C", Offset = "0xD1F66C", VA = "0xD1F66C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000EB4")]
		[Address(RVA = "0xD1F674", Offset = "0xD1F674", VA = "0xD1F674")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000EB5")]
		[Address(RVA = "0xD1F6C4", Offset = "0xD1F6C4", VA = "0xD1F6C4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000EB6")]
		[Address(RVA = "0xD1FBE4", Offset = "0xD1FBE4", VA = "0xD1FBE4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000EB7")]
		[Address(RVA = "0xD2012C", Offset = "0xD2012C", VA = "0xD2012C")]
		public Outline()
		{
		}
	}
	[Token(Token = "0x20002F9")]
	[RequireComponent(typeof(Camera))]
	[ExecuteInEditMode]
	[DisallowMultipleComponent]
	public class OutlineEffect : MonoBehaviour
	{
		[Token(Token = "0x4000FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static OutlineEffect m_instance;

		[Token(Token = "0x4000FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly LinkedSet<Outline> outlines;

		[Token(Token = "0x4000FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(1f, 60f)]
		public float lineThickness;

		[Token(Token = "0x4000FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0f, 10f)]
		public float lineIntensity;

		[Token(Token = "0x4000FF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0f, 1f)]
		public float fillAmount;

		[Token(Token = "0x4000FF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool additiveRendering;

		[Token(Token = "0x4000FF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public bool backfaceCulling;

		[Token(Token = "0x4000FF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
		[Header("These settings can affect performance!")]
		public bool cornerOutlines;

		[Token(Token = "0x4000FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F")]
		public bool addLinesBetweenColors;

		[Token(Token = "0x4000FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Advanced settings")]
		public bool scaleWithScreenSize;

		[Token(Token = "0x4000FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(0.1f, 0.9f)]
		public float alphaCutoff;

		[Token(Token = "0x4000FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool flipY;

		[Token(Token = "0x4000FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Camera sourceCamera;

		[Token(Token = "0x4000FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float glowAmount;

		[Token(Token = "0x4000FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Color glowColor;

		[Token(Token = "0x4001000")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Camera outlineCamera;

		[Token(Token = "0x4001001")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Material outline1Material;

		[Token(Token = "0x4001002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Material outline2Material;

		[Token(Token = "0x4001003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Material outline3Material;

		[Token(Token = "0x4001004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Material outlineEraseMaterial;

		[Token(Token = "0x4001005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Shader outlineShader;

		[Token(Token = "0x4001006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Shader outlineBufferShader;

		[Token(Token = "0x4001007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HideInInspector]
		public Material outlineShaderMaterial;

		[Token(Token = "0x4001008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[HideInInspector]
		public RenderTexture renderTexture;

		[Token(Token = "0x4001009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		public RenderTexture extraRenderTexture;

		[Token(Token = "0x400100A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private CommandBuffer commandBuffer;

		[Token(Token = "0x400100B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private List<Material> materialBuffer;

		[Token(Token = "0x1700017F")]
		public static OutlineEffect Instance
		{
			[Token(Token = "0x6000EBE")]
			[Address(RVA = "0xD202F8", Offset = "0xD202F8", VA = "0xD202F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EBF")]
		[Address(RVA = "0xD20420", Offset = "0xD20420", VA = "0xD20420")]
		private OutlineEffect()
		{
		}

		[Token(Token = "0x6000EC0")]
		[Address(RVA = "0xD2050C", Offset = "0xD2050C", VA = "0xD2050C")]
		private Material GetMaterialFromID(int ID)
		{
			return null;
		}

		[Token(Token = "0x6000EC1")]
		[Address(RVA = "0xD20534", Offset = "0xD20534", VA = "0xD20534")]
		private Material CreateMaterial(Color emissionColor)
		{
			return null;
		}

		[Token(Token = "0x6000EC2")]
		[Address(RVA = "0xD20740", Offset = "0xD20740", VA = "0xD20740")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000EC3")]
		[Address(RVA = "0xD2078C", Offset = "0xD2078C", VA = "0xD2078C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EC4")]
		[Address(RVA = "0xD212B8", Offset = "0xD212B8", VA = "0xD212B8")]
		public void OnPreRender()
		{
		}

		[Token(Token = "0x6000EC5")]
		[Address(RVA = "0xD2212C", Offset = "0xD2212C", VA = "0xD2212C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000EC6")]
		[Address(RVA = "0xD22214", Offset = "0xD22214", VA = "0xD22214")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000EC7")]
		[Address(RVA = "0xD224C8", Offset = "0xD224C8", VA = "0xD224C8")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000EC8")]
		[Address(RVA = "0xD20ACC", Offset = "0xD20ACC", VA = "0xD20ACC")]
		private void CreateMaterialsIfNeeded()
		{
		}

		[Token(Token = "0x6000EC9")]
		[Address(RVA = "0xD222CC", Offset = "0xD222CC", VA = "0xD222CC")]
		private void DestroyMaterials()
		{
		}

		[Token(Token = "0x6000ECA")]
		[Address(RVA = "0xD20D34", Offset = "0xD20D34", VA = "0xD20D34")]
		public void UpdateMaterialsPublicProperties()
		{
		}

		[Token(Token = "0x6000ECB")]
		[Address(RVA = "0xD211AC", Offset = "0xD211AC", VA = "0xD211AC")]
		private void UpdateOutlineCameraFromSource()
		{
		}

		[Token(Token = "0x6000ECC")]
		[Address(RVA = "0xD1FB50", Offset = "0xD1FB50", VA = "0xD1FB50")]
		public void AddOutline(Outline outline)
		{
		}

		[Token(Token = "0x6000ECD")]
		[Address(RVA = "0xD20070", Offset = "0xD20070", VA = "0xD20070")]
		public void RemoveOutline(Outline outline)
		{
		}
	}
}
namespace Obi
{
	[Token(Token = "0x20002FA")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	public abstract class ObiBaseFluidRenderer : MonoBehaviour
	{
		[Token(Token = "0x400100C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ObiParticleRenderer[] particleRenderers;

		[Token(Token = "0x400100D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool autoupdate;

		[Token(Token = "0x400100E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected CommandBuffer renderFluid;

		[Token(Token = "0x400100F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Camera currentCam;

		[Token(Token = "0x6000ECE")]
		[Address(RVA = "0xD225C8", Offset = "0xD225C8", VA = "0xD225C8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000ECF")]
		[Address(RVA = "0xD22618", Offset = "0xD22618", VA = "0xD22618")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6000ED0")]
		[Address(RVA = "0xD226FC", Offset = "0xD226FC", VA = "0xD226FC")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6000ED1")]
		[Address(RVA = "0xD2271C", Offset = "0xD2271C", VA = "0xD2271C")]
		protected Material CreateMaterial(Shader shader)
		{
			return null;
		}

		[Token(Token = "0x6000ED2")]
		[Address(RVA = "0xD227E0", Offset = "0xD227E0", VA = "0xD227E0", Slot = "4")]
		protected virtual void Setup()
		{
		}

		[Token(Token = "0x6000ED3")]
		[Address(RVA = "0xD227E4", Offset = "0xD227E4", VA = "0xD227E4", Slot = "5")]
		protected virtual void Cleanup()
		{
		}

		[Token(Token = "0x6000ED4")]
		public abstract void UpdateFluidRenderingCommandBuffer();

		[Token(Token = "0x6000ED5")]
		[Address(RVA = "0xD2268C", Offset = "0xD2268C", VA = "0xD2268C")]
		private void DestroyCommandBuffer()
		{
		}

		[Token(Token = "0x6000ED6")]
		[Address(RVA = "0xD227E8", Offset = "0xD227E8", VA = "0xD227E8")]
		private void OnPreRender()
		{
		}

		[Token(Token = "0x6000ED7")]
		[Address(RVA = "0xD22924", Offset = "0xD22924", VA = "0xD22924")]
		protected ObiBaseFluidRenderer()
		{
		}
	}
	[Token(Token = "0x20002FB")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(ObiCollider))]
	public class ObiDistanceFieldRenderer : MonoBehaviour
	{
		[Token(Token = "0x20002FC")]
		public enum Axis
		{
			[Token(Token = "0x400101B")]
			X,
			[Token(Token = "0x400101C")]
			Y,
			[Token(Token = "0x400101D")]
			Z
		}

		[Token(Token = "0x4001010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Axis axis;

		[Token(Token = "0x4001011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 1f)]
		public float slice;

		[Token(Token = "0x4001012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float maxDistance;

		[Token(Token = "0x4001013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ObiCollider unityCollider;

		[Token(Token = "0x4001014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material material;

		[Token(Token = "0x4001015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Mesh planeMesh;

		[Token(Token = "0x4001016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Texture2D cutawayTexture;

		[Token(Token = "0x4001017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float sampleSize;

		[Token(Token = "0x4001018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int sampleCount;

		[Token(Token = "0x4001019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Color boundsColor;

		[Token(Token = "0x6000ED8")]
		[Address(RVA = "0xD22934", Offset = "0xD22934", VA = "0xD22934")]
		public void Awake()
		{
		}

		[Token(Token = "0x6000ED9")]
		[Address(RVA = "0xD22984", Offset = "0xD22984", VA = "0xD22984")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6000EDA")]
		[Address(RVA = "0xD22A4C", Offset = "0xD22A4C", VA = "0xD22A4C")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6000EDB")]
		[Address(RVA = "0xD22A50", Offset = "0xD22A50", VA = "0xD22A50")]
		private void Cleanup()
		{
		}

		[Token(Token = "0x6000EDC")]
		[Address(RVA = "0xD22AC4", Offset = "0xD22AC4", VA = "0xD22AC4")]
		private void ResizeTexture()
		{
		}

		[Token(Token = "0x6000EDD")]
		[Address(RVA = "0xD22BB4", Offset = "0xD22BB4", VA = "0xD22BB4")]
		private void CreatePlaneMesh(ObiDistanceField field)
		{
		}

		[Token(Token = "0x6000EDE")]
		[Address(RVA = "0xD22F34", Offset = "0xD22F34", VA = "0xD22F34")]
		private void RefreshCutawayTexture(ObiDistanceField field)
		{
		}

		[Token(Token = "0x6000EDF")]
		[Address(RVA = "0xD231AC", Offset = "0xD231AC", VA = "0xD231AC")]
		private void DrawCutawayPlane(ObiDistanceField field, Matrix4x4 matrix)
		{
		}

		[Token(Token = "0x6000EE0")]
		[Address(RVA = "0xD23570", Offset = "0xD23570", VA = "0xD23570")]
		public void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000EE1")]
		[Address(RVA = "0xD23754", Offset = "0xD23754", VA = "0xD23754")]
		public ObiDistanceFieldRenderer()
		{
		}
	}
	[Token(Token = "0x20002FD")]
	[AddComponentMenu("Physics/Obi/Obi Instanced Particle Renderer")]
	[RequireComponent(typeof(ObiActor))]
	[ExecuteInEditMode]
	public class ObiInstancedParticleRenderer : MonoBehaviour
	{
		[Token(Token = "0x400101E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool render;

		[Token(Token = "0x400101F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Mesh mesh;

		[Token(Token = "0x4001020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Material material;

		[Token(Token = "0x4001021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 instanceScale;

		[Token(Token = "0x4001022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ObiActor actor;

		[Token(Token = "0x4001023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Matrix4x4> matrices;

		[Token(Token = "0x4001024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<Vector4> colors;

		[Token(Token = "0x4001025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private MaterialPropertyBlock mpb;

		[Token(Token = "0x4001026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int meshesPerBatch;

		[Token(Token = "0x4001027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private int batchCount;

		[Token(Token = "0x6000EE2")]
		[Address(RVA = "0xD23774", Offset = "0xD23774", VA = "0xD23774")]
		public void Awake()
		{
		}

		[Token(Token = "0x6000EE3")]
		[Address(RVA = "0xD237C4", Offset = "0xD237C4", VA = "0xD237C4")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6000EE4")]
		[Address(RVA = "0xD238B4", Offset = "0xD238B4", VA = "0xD238B4")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6000EE5")]
		[Address(RVA = "0xD239A4", Offset = "0xD239A4", VA = "0xD239A4")]
		private void ScenePreCull(Camera cam)
		{
		}

		[Token(Token = "0x6000EE6")]
		[Address(RVA = "0xD23ED0", Offset = "0xD23ED0", VA = "0xD23ED0")]
		public ObiInstancedParticleRenderer()
		{
		}
	}
	[Token(Token = "0x20002FE")]
	[RequireComponent(typeof(ObiActor))]
	[ExecuteInEditMode]
	[AddComponentMenu("Physics/Obi/Obi Particle Renderer")]
	public class ObiParticleRenderer : MonoBehaviour
	{
		[Token(Token = "0x4001028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool render;

		[Token(Token = "0x4001029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Shader shader;

		[Token(Token = "0x400102A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color particleColor;

		[Token(Token = "0x400102B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float radiusScale;

		[Token(Token = "0x400102C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ObiActor actor;

		[Token(Token = "0x400102D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Mesh> meshes;

		[Token(Token = "0x400102E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material material;

		[Token(Token = "0x400102F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<Vector3> vertices;

		[Token(Token = "0x4001030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private List<Vector3> normals;

		[Token(Token = "0x4001031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<Color> colors;

		[Token(Token = "0x4001032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private List<int> triangles;

		[Token(Token = "0x4001033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private List<Vector4> anisotropy1;

		[Token(Token = "0x4001034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private List<Vector4> anisotropy2;

		[Token(Token = "0x4001035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<Vector4> anisotropy3;

		[Token(Token = "0x4001036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int particlesPerDrawcall;

		[Token(Token = "0x4001037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private int drawcallCount;

		[Token(Token = "0x4001038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 particleOffset0;

		[Token(Token = "0x4001039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 particleOffset1;

		[Token(Token = "0x400103A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 particleOffset2;

		[Token(Token = "0x400103B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private Vector3 particleOffset3;

		[Token(Token = "0x17000180")]
		public IEnumerable<Mesh> ParticleMeshes
		{
			[Token(Token = "0x6000EE7")]
			[Address(RVA = "0xD23FDC", Offset = "0xD23FDC", VA = "0xD23FDC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000181")]
		public Material ParticleMaterial
		{
			[Token(Token = "0x6000EE8")]
			[Address(RVA = "0xD23FE4", Offset = "0xD23FE4", VA = "0xD23FE4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EE9")]
		[Address(RVA = "0xD23FEC", Offset = "0xD23FEC", VA = "0xD23FEC")]
		public void Awake()
		{
		}

		[Token(Token = "0x6000EEA")]
		[Address(RVA = "0xD2403C", Offset = "0xD2403C", VA = "0xD2403C")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6000EEB")]
		[Address(RVA = "0xD2412C", Offset = "0xD2412C", VA = "0xD2412C")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6000EEC")]
		[Address(RVA = "0xD243EC", Offset = "0xD243EC", VA = "0xD243EC")]
		private void CreateMaterialIfNeeded()
		{
		}

		[Token(Token = "0x6000EED")]
		[Address(RVA = "0xD24594", Offset = "0xD24594", VA = "0xD24594")]
		private void ScenePreCull(Camera cam)
		{
		}

		[Token(Token = "0x6000EEE")]
		[Address(RVA = "0xD256BC", Offset = "0xD256BC", VA = "0xD256BC")]
		private void DrawParticles()
		{
		}

		[Token(Token = "0x6000EEF")]
		[Address(RVA = "0xD2560C", Offset = "0xD2560C", VA = "0xD2560C")]
		private void Apply(Mesh mesh)
		{
		}

		[Token(Token = "0x6000EF0")]
		[Address(RVA = "0xD24254", Offset = "0xD24254", VA = "0xD24254")]
		private void ClearMeshes()
		{
		}

		[Token(Token = "0x6000EF1")]
		[Address(RVA = "0xD25978", Offset = "0xD25978", VA = "0xD25978")]
		public ObiParticleRenderer()
		{
		}
	}
	[Token(Token = "0x20002FF")]
	public class ShadowmapExposer : MonoBehaviour
	{
		[Token(Token = "0x400103C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Light unityLight;

		[Token(Token = "0x400103D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CommandBuffer afterShadow;

		[Token(Token = "0x400103E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ObiParticleRenderer[] particleRenderers;

		[Token(Token = "0x6000EF2")]
		[Address(RVA = "0xD25BB8", Offset = "0xD25BB8", VA = "0xD25BB8")]
		public void Awake()
		{
		}

		[Token(Token = "0x6000EF3")]
		[Address(RVA = "0xD25C08", Offset = "0xD25C08", VA = "0xD25C08")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6000EF4")]
		[Address(RVA = "0xD25CDC", Offset = "0xD25CDC", VA = "0xD25CDC")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6000EF5")]
		[Address(RVA = "0xD25CA8", Offset = "0xD25CA8", VA = "0xD25CA8")]
		private void Cleanup()
		{
		}

		[Token(Token = "0x6000EF6")]
		[Address(RVA = "0xD25CE0", Offset = "0xD25CE0", VA = "0xD25CE0")]
		public void SetupFluidShadowsCommandBuffer()
		{
		}

		[Token(Token = "0x6000EF7")]
		[Address(RVA = "0xD26170", Offset = "0xD26170", VA = "0xD26170")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EF8")]
		[Address(RVA = "0xD261DC", Offset = "0xD261DC", VA = "0xD261DC")]
		public ShadowmapExposer()
		{
		}
	}
}
namespace FSG.MeshAnimator
{
	[Token(Token = "0x2000300")]
	[ExecuteInEditMode]
	public class AttachObjectToFace : MonoBehaviour
	{
		[Token(Token = "0x400103F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MeshAnimator meshAnimator;

		[Token(Token = "0x4001040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int faceIndex;

		[Token(Token = "0x4001041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 offset;

		[Token(Token = "0x4001042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 rotationOffset;

		[Token(Token = "0x4001043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool drawFaceDebugInfo;

		[Token(Token = "0x4001044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Color debugColor;

		[Token(Token = "0x4001045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform mTransform;

		[Token(Token = "0x4001046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform mMeshAnimatorTransform;

		[Token(Token = "0x4001047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int[] triangles;

		[Token(Token = "0x4001048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3[] vertices;

		[Token(Token = "0x6000EF9")]
		[Address(RVA = "0xD261E4", Offset = "0xD261E4", VA = "0xD261E4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000EFA")]
		[Address(RVA = "0xD262E4", Offset = "0xD262E4", VA = "0xD262E4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000EFB")]
		[Address(RVA = "0xD26C68", Offset = "0xD26C68", VA = "0xD26C68")]
		public AttachObjectToFace()
		{
		}
	}
	[Token(Token = "0x2000301")]
	public class MecanimMeshAnimatorController : MonoBehaviour
	{
		[Token(Token = "0x4001049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Animator animator;

		[Token(Token = "0x400104A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MeshAnimator meshAnimator;

		[Token(Token = "0x400104B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool crossFade;

		[Token(Token = "0x400104C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<int, string> animHashes;

		[Token(Token = "0x400104D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string cAnim;

		[Token(Token = "0x6000EFC")]
		[Address(RVA = "0xD26C7C", Offset = "0xD26C7C", VA = "0xD26C7C", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000EFD")]
		[Address(RVA = "0xD26E28", Offset = "0xD26E28", VA = "0xD26E28", Slot = "5")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x6000EFE")]
		[Address(RVA = "0xD27008", Offset = "0xD27008", VA = "0xD27008")]
		public MecanimMeshAnimatorController()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000302")]
	public class MeshAnimation : ScriptableObject
	{
		[Token(Token = "0x2000303")]
		public enum RootMotionMode
		{
			[Token(Token = "0x4001066")]
			None,
			[Token(Token = "0x4001067")]
			Baked,
			[Token(Token = "0x4001068")]
			AppliedToTransform
		}

		[Token(Token = "0x2000304")]
		private sealed class VertexEntry
		{
			[Token(Token = "0x4001069")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int _reserved;

			[Token(Token = "0x400106A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int[] TriangleIndex;

			[Token(Token = "0x400106B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int[] VertexIndex;

			[Token(Token = "0x400106C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int _count;

			[Token(Token = "0x17000183")]
			public int Count
			{
				[Token(Token = "0x6000F10")]
				[Address(RVA = "0xD29C58", Offset = "0xD29C58", VA = "0xD29C58")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x6000F11")]
			[Address(RVA = "0xD29C60", Offset = "0xD29C60", VA = "0xD29C60")]
			public VertexEntry()
			{
			}

			[Token(Token = "0x6000F12")]
			[Address(RVA = "0xD298BC", Offset = "0xD298BC", VA = "0xD298BC")]
			public void Add(int vertIndex, int triIndex)
			{
			}

			[Token(Token = "0x6000F13")]
			[Address(RVA = "0xD29834", Offset = "0xD29834", VA = "0xD29834")]
			public void PopulateArrays()
			{
			}

			[Token(Token = "0x6000F14")]
			[Address(RVA = "0xD29994", Offset = "0xD29994", VA = "0xD29994")]
			public void Clear()
			{
			}
		}

		[Token(Token = "0x400104E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static Dictionary<Mesh, Dictionary<MeshAnimation, Mesh[]>> generatedFrames;

		[Token(Token = "0x400104F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string animationName;

		[Token(Token = "0x4001050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool preGenerateFrames;

		[Token(Token = "0x4001051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float playbackSpeed;

		[Token(Token = "0x4001052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int smoothNormalsAngle;

		[Token(Token = "0x4001053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool instantNormalCalculation;

		[Token(Token = "0x4001054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public bool recalculateNormalsOnRotation;

		[Token(Token = "0x4001055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public WrapMode wrapMode;

		[Token(Token = "0x4001056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[HideInInspector]
		public RootMotionMode rootMotionMode;

		[Token(Token = "0x4001057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public DeltaCompressedFrameData compressedFrameData;

		[Token(Token = "0x4001058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public string[] exposedTransforms;

		[Token(Token = "0x4001059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public MeshAnimationEvent[] events;

		[Token(Token = "0x400105A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float length;

		[Token(Token = "0x400105B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[HideInInspector]
		public int frameSkip;

		[NonSerialized]
		[Token(Token = "0x400105C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Mesh[] frames;

		[NonSerialized]
		[Token(Token = "0x400105D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int totalFrames;

		[NonSerialized]
		[Token(Token = "0x400105E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool[] generatedMeshes;

		[NonSerialized]
		[Token(Token = "0x400105F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool completelyGenerated;

		[NonSerialized]
		[Token(Token = "0x4001060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private MeshFrameData[] decompressedFrameData;

		[NonSerialized]
		[Token(Token = "0x4001061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Quaternion lastRotation;

		[Token(Token = "0x4001062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Queue<Action> mainThreadActions;

		[Token(Token = "0x4001063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Dictionary<Mesh, KeyValuePair<int[], Vector3[]>> meshInfoCache;

		[Token(Token = "0x4001064")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static IEqualityComparer<Vector3> VectorComparer;

		[Token(Token = "0x17000182")]
		[HideInInspector]
		public MeshFrameData[] frameData
		{
			[Token(Token = "0x6000EFF")]
			[Address(RVA = "0xD270A8", Offset = "0xD270A8", VA = "0xD270A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F00")]
		[Address(RVA = "0xD27554", Offset = "0xD27554", VA = "0xD27554")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000F01")]
		[Address(RVA = "0xD275E4", Offset = "0xD275E4", VA = "0xD275E4")]
		public void GenerateFrames(Mesh baseMesh)
		{
		}

		[Token(Token = "0x6000F02")]
		[Address(RVA = "0xD27CA4", Offset = "0xD27CA4", VA = "0xD27CA4")]
		public void GenerateFrameIfNeeded(Mesh baseMesh, int frame)
		{
		}

		[Token(Token = "0x6000F03")]
		[Address(RVA = "0xD26974", Offset = "0xD26974", VA = "0xD26974")]
		public Vector3[] GetFrame(int frame)
		{
			return null;
		}

		[Token(Token = "0x6000F04")]
		[Address(RVA = "0xD28138", Offset = "0xD28138", VA = "0xD28138")]
		public float GetInterpolatingFrames(int frame, out MeshFrameData previousFrame, out MeshFrameData nextFrame)
		{
			return default(float);
		}

		[Token(Token = "0x6000F05")]
		[Address(RVA = "0xD28330", Offset = "0xD28330", VA = "0xD28330")]
		public MeshFrameData GetNearestFrame(int frame)
		{
			return null;
		}

		[Token(Token = "0x6000F06")]
		[Address(RVA = "0xD28494", Offset = "0xD28494", VA = "0xD28494")]
		public void DisplayFrame(MeshFilter meshFilter, int frame, int previousFrame)
		{
		}

		[Token(Token = "0x6000F07")]
		[Address(RVA = "0xD2930C", Offset = "0xD2930C", VA = "0xD2930C")]
		public void FireEvents(GameObject eventReciever, int frame)
		{
		}

		[Token(Token = "0x6000F08")]
		[Address(RVA = "0xD2948C", Offset = "0xD2948C", VA = "0xD2948C")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000F09")]
		[Address(RVA = "0xD295B4", Offset = "0xD295B4", VA = "0xD295B4")]
		public bool IsName(string animationName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F0A")]
		[Address(RVA = "0xD280C8", Offset = "0xD280C8", VA = "0xD280C8")]
		private void CheckFullGeneration(int newFrame)
		{
		}

		[Token(Token = "0x6000F0B")]
		[Address(RVA = "0xD278A8", Offset = "0xD278A8", VA = "0xD278A8")]
		private Mesh GenerateFrame(Mesh baseMesh, int frame)
		{
			return null;
		}

		[Token(Token = "0x6000F0C")]
		[Address(RVA = "0xD29600", Offset = "0xD29600", VA = "0xD29600")]
		private void RecalculateNormals(Mesh mesh, float angle)
		{
		}

		[Token(Token = "0x6000F0D")]
		[Address(RVA = "0xD2859C", Offset = "0xD2859C", VA = "0xD2859C")]
		private void RecalculateNormals(Mesh mesh, float angle, int[] triangles, Vector3[] vertices, bool instant = false)
		{
		}

		[Token(Token = "0x6000F0E")]
		[Address(RVA = "0xD29A30", Offset = "0xD29A30", VA = "0xD29A30")]
		public MeshAnimation()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000308")]
	public class MeshAnimationEvent
	{
		[Token(Token = "0x2000309")]
		public enum Mode : byte
		{
			[Token(Token = "0x400107C")]
			Data,
			[Token(Token = "0x400107D")]
			String,
			[Token(Token = "0x400107E")]
			Float
		}

		[Token(Token = "0x4001075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string methodName;

		[Token(Token = "0x4001076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int frame;

		[Token(Token = "0x4001077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Mode eventType;

		[Token(Token = "0x4001078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string stringValue;

		[Token(Token = "0x4001079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float floatValue;

		[Token(Token = "0x400107A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEngine.Object data;

		[Token(Token = "0x6000F1D")]
		[Address(RVA = "0xD29388", Offset = "0xD29388", VA = "0xD29388")]
		public void FireEvent(GameObject eventReciever)
		{
		}

		[Token(Token = "0x6000F1E")]
		[Address(RVA = "0xD29E58", Offset = "0xD29E58", VA = "0xD29E58")]
		public MeshAnimationEvent()
		{
		}
	}
	[Token(Token = "0x200030A")]
	[RequireComponent(typeof(MeshFilter))]
	[AddComponentMenu("Miscellaneous/Mesh Animator")]
	public class MeshAnimator : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200030B")]
		public class MeshAnimatorLODLevel
		{
			[Token(Token = "0x40010AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int fps;

			[Token(Token = "0x40010B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float distance;

			[Token(Token = "0x40010B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float distanceSquared;

			[Token(Token = "0x6000F3F")]
			[Address(RVA = "0xD2DE74", Offset = "0xD2DE74", VA = "0xD2DE74")]
			public MeshAnimatorLODLevel()
			{
			}
		}

		[Token(Token = "0x200030C")]
		private struct CurrentCrossFade
		{
			[Token(Token = "0x40010B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public MeshFrameData fromFrame;

			[Token(Token = "0x40010B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public MeshFrameData toFrame;

			[Token(Token = "0x40010B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int framesNeeded;

			[Token(Token = "0x40010B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int currentFrame;

			[Token(Token = "0x40010B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int generatedFrame;

			[Token(Token = "0x40010B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public bool isFading;

			[Token(Token = "0x40010B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float endTime;

			[Token(Token = "0x40010B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public CrossFadeFrameData frame;

			[Token(Token = "0x6000F40")]
			[Address(RVA = "0xD2AA38", Offset = "0xD2AA38", VA = "0xD2AA38")]
			public void Reset()
			{
			}

			[Token(Token = "0x6000F41")]
			[Address(RVA = "0xD2BAE4", Offset = "0xD2BAE4", VA = "0xD2BAE4")]
			public void PopulateFrame(int length)
			{
			}

			[Token(Token = "0x6000F42")]
			[Address(RVA = "0xD2D154", Offset = "0xD2D154", VA = "0xD2D154")]
			public void ReturnFrame()
			{
			}
		}

		[Token(Token = "0x200030D")]
		private class CrossFadeFrameData
		{
			[Token(Token = "0x40010BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3[] positions;

			[Token(Token = "0x40010BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3[] normals;

			[Token(Token = "0x40010BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Bounds bounds;

			[Token(Token = "0x6000F43")]
			[Address(RVA = "0xD2DE7C", Offset = "0xD2DE7C", VA = "0xD2DE7C")]
			public CrossFadeFrameData()
			{
			}
		}

		[Token(Token = "0x400107F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<Mesh, int> s_meshCount;

		[Token(Token = "0x4001080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static List<Thread> s_crossfadeThreads;

		[Token(Token = "0x4001081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static bool s_shutDownThreads;

		[Token(Token = "0x4001082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static Queue<MeshAnimator> s_crossfadeAnimators;

		[Token(Token = "0x4001083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static List<Stack<Mesh>> s_crossFadePool;

		[Token(Token = "0x4001084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static Dictionary<Mesh, int> s_crossFadeIndex;

		[Token(Token = "0x4001085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Mesh baseMesh;

		[Token(Token = "0x4001086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MeshAnimation defaultAnimation;

		[Token(Token = "0x4001087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MeshAnimation[] animations;

		[Token(Token = "0x4001088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float speed;

		[Token(Token = "0x4001089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool updateWhenOffscreen;

		[Token(Token = "0x400108A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		public bool playAutomatically;

		[Token(Token = "0x400108B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
		public bool resetOnEnable;

		[Token(Token = "0x400108C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject eventReciever;

		[Token(Token = "0x400108D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int FPS;

		[Token(Token = "0x400108E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool skipLastLoopFrame;

		[Token(Token = "0x400108F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		public bool recalculateCrossfadeNormals;

		[Token(Token = "0x4001090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Action<string> OnAnimationFinished;

		[Token(Token = "0x4001091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Action OnFrameUpdated;

		[Token(Token = "0x4001092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Action<bool> OnVisibilityChanged;

		[Token(Token = "0x4001093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int currentFrame;

		[Token(Token = "0x4001094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public bool randomizeStarTime;

		[Token(Token = "0x4001095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform LODCamera;

		[Token(Token = "0x4001096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public MeshAnimatorLODLevel[] LODLevels;

		[Token(Token = "0x4001097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public float nextTick;

		[Token(Token = "0x4001098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HideInInspector]
		public MeshFilter meshFilter;

		[Token(Token = "0x4001099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[HideInInspector]
		public MeshAnimation currentAnimation;

		[Token(Token = "0x400109A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[HideInInspector]
		public MeshTriangleData[] meshTriangleData;

		[Token(Token = "0x400109B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HideInInspector]
		public Vector2[] uv1Data;

		[Token(Token = "0x400109C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[HideInInspector]
		public Vector2[] uv2Data;

		[Token(Token = "0x400109D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		public Vector2[] uv3Data;

		[Token(Token = "0x400109E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		public Vector2[] uv4Data;

		[Token(Token = "0x400109F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private int currentAnimIndex;

		[Token(Token = "0x40010A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private bool isVisible;

		[Token(Token = "0x40010A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float lastFrameTime;

		[Token(Token = "0x40010A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private bool pingPong;

		[Token(Token = "0x40010A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC5")]
		private bool isPaused;

		[Token(Token = "0x40010A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float currentAnimTime;

		[Token(Token = "0x40010A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Mesh crossFadeMesh;

		[Token(Token = "0x40010A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Queue<string> queuedAnims;

		[Token(Token = "0x40010A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private CurrentCrossFade currentCrossFade;

		[Token(Token = "0x40010A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private int currentLodLevel;

		[Token(Token = "0x40010A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Transform mTransform;

		[Token(Token = "0x40010AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Dictionary<string, Transform> childMap;

		[Token(Token = "0x40010AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private bool initialized;

		[Token(Token = "0x40010AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private int previousEventFrame;

		[Token(Token = "0x40010AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private bool hasExposedTransforms;

		[Token(Token = "0x40010AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private int crossFadePoolIndex;

		[Token(Token = "0x6000F1F")]
		[Address(RVA = "0xD29E60", Offset = "0xD29E60", VA = "0xD29E60")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F20")]
		[Address(RVA = "0xD2A654", Offset = "0xD2A654", VA = "0xD2A654")]
		private void OnBecameVisible()
		{
		}

		[Token(Token = "0x6000F21")]
		[Address(RVA = "0xD2A684", Offset = "0xD2A684", VA = "0xD2A684")]
		private void OnBecameInvisible()
		{
		}

		[Token(Token = "0x6000F22")]
		[Address(RVA = "0xD2A6B0", Offset = "0xD2A6B0", VA = "0xD2A6B0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000F23")]
		[Address(RVA = "0xD2A90C", Offset = "0xD2A90C", VA = "0xD2A90C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000F24")]
		[Address(RVA = "0xD2AA54", Offset = "0xD2AA54", VA = "0xD2AA54")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000F25")]
		[Address(RVA = "0xD2B560", Offset = "0xD2B560", VA = "0xD2B560")]
		private void FireAnimationEvents(MeshAnimation cAnim, float totalSpeed, bool finished)
		{
		}

		[Token(Token = "0x6000F26")]
		[Address(RVA = "0xD2B6CC", Offset = "0xD2B6CC", VA = "0xD2B6CC")]
		private Mesh GetCrossfadeFromPool()
		{
			return null;
		}

		[Token(Token = "0x6000F27")]
		[Address(RVA = "0xD2B198", Offset = "0xD2B198", VA = "0xD2B198")]
		private void ReturnCrossfadeToPool()
		{
		}

		[Token(Token = "0x6000F28")]
		[Address(RVA = "0xD2B8E0", Offset = "0xD2B8E0", VA = "0xD2B8E0")]
		private void GenerateCrossfadeFrame()
		{
		}

		[Token(Token = "0x6000F29")]
		[Address(RVA = "0xD2BBD8", Offset = "0xD2BBD8", VA = "0xD2BBD8")]
		private static void EnqueueAnimatorForCrossfade(MeshAnimator animator)
		{
		}

		[Token(Token = "0x6000F2A")]
		[Address(RVA = "0xD2BD18", Offset = "0xD2BD18", VA = "0xD2BD18")]
		private static MeshAnimator DequeueAnimatorForCrossfade()
		{
			return null;
		}

		[Token(Token = "0x6000F2B")]
		[Address(RVA = "0xD2BEA8", Offset = "0xD2BEA8", VA = "0xD2BEA8")]
		private static Matrix4x4 MatrixLerp(Matrix4x4 from, Matrix4x4 to, float time)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6000F2C")]
		[Address(RVA = "0xD2BF60", Offset = "0xD2BF60", VA = "0xD2BF60")]
		private static void GenerateThreadedCrossfade()
		{
		}

		[Token(Token = "0x6000F2D")]
		[Address(RVA = "0xD2C1E4", Offset = "0xD2C1E4", VA = "0xD2C1E4")]
		public void UpdateTick(float time)
		{
		}

		[Token(Token = "0x6000F2E")]
		[Address(RVA = "0xD2D2C0", Offset = "0xD2D2C0", VA = "0xD2D2C0")]
		public void Crossfade(int index)
		{
		}

		[Token(Token = "0x6000F2F")]
		[Address(RVA = "0xD26F80", Offset = "0xD26F80", VA = "0xD26F80")]
		public void Crossfade(string animationName)
		{
		}

		[Token(Token = "0x6000F30")]
		[Address(RVA = "0xD2D2CC", Offset = "0xD2D2CC", VA = "0xD2D2CC")]
		public void Crossfade(int index, float speed)
		{
		}

		[Token(Token = "0x6000F31")]
		[Address(RVA = "0xD2D458", Offset = "0xD2D458", VA = "0xD2D458")]
		public void Crossfade(string animationName, float speed)
		{
		}

		[Token(Token = "0x6000F32")]
		[Address(RVA = "0xD2D4E8", Offset = "0xD2D4E8", VA = "0xD2D4E8")]
		public void Play()
		{
		}

		[Token(Token = "0x6000F33")]
		[Address(RVA = "0xD26F8C", Offset = "0xD26F8C", VA = "0xD26F8C")]
		public void Play(string animationName)
		{
		}

		[Token(Token = "0x6000F34")]
		[Address(RVA = "0xD2D08C", Offset = "0xD2D08C", VA = "0xD2D08C")]
		public void Play(int index)
		{
		}

		[Token(Token = "0x6000F35")]
		[Address(RVA = "0xD2D4F0", Offset = "0xD2D4F0", VA = "0xD2D4F0")]
		public void PlayRandom(params string[] animationNames)
		{
		}

		[Token(Token = "0x6000F36")]
		[Address(RVA = "0xD2D594", Offset = "0xD2D594", VA = "0xD2D594")]
		public void PlayQueued(string animationName)
		{
		}

		[Token(Token = "0x6000F37")]
		[Address(RVA = "0xD2D634", Offset = "0xD2D634", VA = "0xD2D634")]
		public void Pause()
		{
		}

		[Token(Token = "0x6000F38")]
		[Address(RVA = "0xD2D640", Offset = "0xD2D640", VA = "0xD2D640")]
		public void RestartAnim()
		{
		}

		[Token(Token = "0x6000F39")]
		[Address(RVA = "0xD2D648", Offset = "0xD2D648", VA = "0xD2D648")]
		public void SetTime(float time, bool instantUpdate = false)
		{
		}

		[Token(Token = "0x6000F3A")]
		[Address(RVA = "0xD2A588", Offset = "0xD2A588", VA = "0xD2A588")]
		public void SetTimeNormalized(float time, bool instantUpdate = false)
		{
		}

		[Token(Token = "0x6000F3B")]
		[Address(RVA = "0xD2D710", Offset = "0xD2D710", VA = "0xD2D710")]
		public MeshAnimation GetClip(string animationName)
		{
			return null;
		}

		[Token(Token = "0x6000F3C")]
		[Address(RVA = "0xD2D7A0", Offset = "0xD2D7A0", VA = "0xD2D7A0")]
		public void PrepopulateCrossfadePool(int count)
		{
		}

		[Token(Token = "0x6000F3D")]
		[Address(RVA = "0xD2DA78", Offset = "0xD2DA78", VA = "0xD2DA78")]
		public MeshAnimator()
		{
		}
	}
	[Token(Token = "0x200030F")]
	public class MeshAnimatorManager : MonoBehaviour
	{
		[Token(Token = "0x2000310")]
		[CompilerGenerated]
		private sealed class <UnscaledUpdate>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40010C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40010C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40010C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MeshAnimatorManager <>4__this;

			[Token(Token = "0x17000186")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F58")]
				[Address(RVA = "0xD2E68C", Offset = "0xD2E68C", VA = "0xD2E68C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000187")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F5A")]
				[Address(RVA = "0xD2E6D4", Offset = "0xD2E6D4", VA = "0xD2E6D4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F55")]
			[Address(RVA = "0xD2E280", Offset = "0xD2E280", VA = "0xD2E280")]
			[DebuggerHidden]
			public <UnscaledUpdate>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x6000F56")]
			[Address(RVA = "0xD2E5D8", Offset = "0xD2E5D8", VA = "0xD2E5D8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F57")]
			[Address(RVA = "0xD2E5DC", Offset = "0xD2E5DC", VA = "0xD2E5DC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F59")]
			[Address(RVA = "0xD2E694", Offset = "0xD2E694", VA = "0xD2E694", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40010C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static AnimatorUpdateMode mode;

		[Token(Token = "0x40010C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static MeshAnimatorManager mInstance;

		[Token(Token = "0x40010C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static List<MeshAnimator> mAnimators;

		[Token(Token = "0x17000184")]
		public static int AnimatorCount
		{
			[Token(Token = "0x6000F49")]
			[Address(RVA = "0xD2A4C0", Offset = "0xD2A4C0", VA = "0xD2A4C0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000185")]
		public static MeshAnimatorManager Instance
		{
			[Token(Token = "0x6000F4A")]
			[Address(RVA = "0xD2DEFC", Offset = "0xD2DEFC", VA = "0xD2DEFC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F4B")]
		[Address(RVA = "0xD2A7EC", Offset = "0xD2A7EC", VA = "0xD2A7EC")]
		public static void AddAnimator(MeshAnimator animator)
		{
		}

		[Token(Token = "0x6000F4C")]
		[Address(RVA = "0xD2A9B8", Offset = "0xD2A9B8", VA = "0xD2A9B8")]
		public static void RemoveAnimator(MeshAnimator animator)
		{
		}

		[Token(Token = "0x6000F4D")]
		[Address(RVA = "0xD2E09C", Offset = "0xD2E09C", VA = "0xD2E09C")]
		public static void SetUpdateMode(AnimatorUpdateMode updateMode)
		{
		}

		[Token(Token = "0x6000F4E")]
		[Address(RVA = "0xD2E1FC", Offset = "0xD2E1FC", VA = "0xD2E1FC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F4F")]
		[Address(RVA = "0xD2E194", Offset = "0xD2E194", VA = "0xD2E194")]
		[IteratorStateMachine(typeof(<UnscaledUpdate>d__11))]
		private IEnumerator UnscaledUpdate()
		{
			return null;
		}

		[Token(Token = "0x6000F50")]
		[Address(RVA = "0xD2E2A8", Offset = "0xD2E2A8", VA = "0xD2E2A8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F51")]
		[Address(RVA = "0xD2E4BC", Offset = "0xD2E4BC", VA = "0xD2E4BC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000F52")]
		[Address(RVA = "0xD2E318", Offset = "0xD2E318", VA = "0xD2E318")]
		private void UpdateTick(float time)
		{
		}

		[Token(Token = "0x6000F53")]
		[Address(RVA = "0xD2E530", Offset = "0xD2E530", VA = "0xD2E530")]
		public MeshAnimatorManager()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000311")]
	public class MeshFrameData
	{
		[NonSerialized]
		[Token(Token = "0x40010C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Vector3[] decompressed;

		[NonSerialized]
		[Token(Token = "0x40010C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Matrix4x4[] exposedTransforms;

		[NonSerialized]
		[Token(Token = "0x40010C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 rootMotionPosition;

		[NonSerialized]
		[Token(Token = "0x40010CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Quaternion rootMotionRotation;

		[Token(Token = "0x17000188")]
		public Vector3[] verts
		{
			[Token(Token = "0x6000F5B")]
			[Address(RVA = "0xD2E6DC", Offset = "0xD2E6DC", VA = "0xD2E6DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F5C")]
		[Address(RVA = "0xD2E6E4", Offset = "0xD2E6E4", VA = "0xD2E6E4")]
		public void SetVerts(Vector3[] v)
		{
		}

		[Token(Token = "0x6000F5D")]
		[Address(RVA = "0xD2E6EC", Offset = "0xD2E6EC", VA = "0xD2E6EC", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F5E")]
		[Address(RVA = "0xD2E810", Offset = "0xD2E810", VA = "0xD2E810", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000F5F")]
		[Address(RVA = "0xD2E818", Offset = "0xD2E818", VA = "0xD2E818")]
		public MeshFrameData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000312")]
	public class MeshTriangleData
	{
		[Token(Token = "0x40010CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int submesh;

		[Token(Token = "0x40010CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int[] triangles;

		[Token(Token = "0x6000F60")]
		[Address(RVA = "0xD2E820", Offset = "0xD2E820", VA = "0xD2E820")]
		public MeshTriangleData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000313")]
	public class DeltaCompressedFrameData
	{
		[Token(Token = "0x40010CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static float compressionAccuracy;

		[Token(Token = "0x40010CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float accuracy;

		[Token(Token = "0x40010CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int sizeOffset;

		[Token(Token = "0x40010D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int vertLength;

		[Token(Token = "0x40010D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int exposedLength;

		[Token(Token = "0x40010D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public short[] positionsUShort;

		[Token(Token = "0x40010D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public int[] positions;

		[Token(Token = "0x40010D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public int[] frameIndexes;

		[Token(Token = "0x40010D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public Matrix4x4[] exposedTransforms;

		[Token(Token = "0x40010D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public Vector3[] rootMotionPositions;

		[Token(Token = "0x40010D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public Quaternion[] rootMotionRotations;

		[Token(Token = "0x6000F61")]
		[Address(RVA = "0xD27144", Offset = "0xD27144", VA = "0xD27144")]
		public static implicit operator MeshFrameData[](DeltaCompressedFrameData s)
		{
			return null;
		}

		[Token(Token = "0x6000F62")]
		[Address(RVA = "0xD2E828", Offset = "0xD2E828", VA = "0xD2E828")]
		public static implicit operator DeltaCompressedFrameData(MeshFrameData[] frames)
		{
			return null;
		}

		[Token(Token = "0x6000F63")]
		[Address(RVA = "0xD2F134", Offset = "0xD2F134", VA = "0xD2F134")]
		public DeltaCompressedFrameData()
		{
		}
	}
	[Token(Token = "0x2000314")]
	public static class AllocatedArray<T>
	{
		[Token(Token = "0x40010D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static T defaultValue;

		[Token(Token = "0x40010D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<T[]> allocatedArrays;

		[Token(Token = "0x6000F65")]
		private static T[] AllocateArray(int size)
		{
			return null;
		}

		[Token(Token = "0x6000F66")]
		public static T[] Get(int size)
		{
			return null;
		}

		[Token(Token = "0x6000F67")]
		public static void Return(T[] array, bool resetValues = true)
		{
		}
	}
	[Token(Token = "0x2000315")]
	public static class Comparers
	{
		[Serializable]
		[Token(Token = "0x2000316")]
		public class StringComparer : IEqualityComparer<string>
		{
			[Token(Token = "0x6000F6B")]
			[Address(RVA = "0xD2F314", Offset = "0xD2F314", VA = "0xD2F314", Slot = "4")]
			private bool System.Collections.Generic.IEqualityComparer<System.String>.Equals(string x, string y)
			{
				return default(bool);
			}

			[Token(Token = "0x6000F6C")]
			[Address(RVA = "0xD2F324", Offset = "0xD2F324", VA = "0xD2F324", Slot = "5")]
			private int System.Collections.Generic.IEqualityComparer<System.String>.GetHashCode(string obj)
			{
				return default(int);
			}

			[Token(Token = "0x6000F6D")]
			[Address(RVA = "0xD2F2EC", Offset = "0xD2F2EC", VA = "0xD2F2EC")]
			public StringComparer()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000317")]
		public class FloatComparer : IEqualityComparer<float>
		{
			[Token(Token = "0x6000F6E")]
			[Address(RVA = "0xD2F344", Offset = "0xD2F344", VA = "0xD2F344", Slot = "4")]
			private bool System.Collections.Generic.IEqualityComparer<System.Single>.Equals(float x, float y)
			{
				return default(bool);
			}

			[Token(Token = "0x6000F6F")]
			[Address(RVA = "0xD2F350", Offset = "0xD2F350", VA = "0xD2F350", Slot = "5")]
			private int System.Collections.Generic.IEqualityComparer<System.Single>.GetHashCode(float obj)
			{
				return default(int);
			}

			[Token(Token = "0x6000F70")]
			[Address(RVA = "0xD2F2F4", Offset = "0xD2F2F4", VA = "0xD2F2F4")]
			public FloatComparer()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000318")]
		public class IntComparer : IEqualityComparer<int>
		{
			[Token(Token = "0x6000F71")]
			[Address(RVA = "0xD2F36C", Offset = "0xD2F36C", VA = "0xD2F36C", Slot = "4")]
			private bool System.Collections.Generic.IEqualityComparer<System.Int32>.Equals(int x, int y)
			{
				return default(bool);
			}

			[Token(Token = "0x6000F72")]
			[Address(RVA = "0xD2F378", Offset = "0xD2F378", VA = "0xD2F378", Slot = "5")]
			private int System.Collections.Generic.IEqualityComparer<System.Int32>.GetHashCode(int obj)
			{
				return default(int);
			}

			[Token(Token = "0x6000F73")]
			[Address(RVA = "0xD2F2FC", Offset = "0xD2F2FC", VA = "0xD2F2FC")]
			public IntComparer()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000319")]
		public class ByteComparer : IEqualityComparer<byte>
		{
			[Token(Token = "0x6000F74")]
			[Address(RVA = "0xD2F394", Offset = "0xD2F394", VA = "0xD2F394", Slot = "4")]
			private bool System.Collections.Generic.IEqualityComparer<System.Byte>.Equals(byte x, byte y)
			{
				return default(bool);
			}

			[Token(Token = "0x6000F75")]
			[Address(RVA = "0xD2F3A4", Offset = "0xD2F3A4", VA = "0xD2F3A4", Slot = "5")]
			private int System.Collections.Generic.IEqualityComparer<System.Byte>.GetHashCode(byte obj)
			{
				return default(int);
			}

			[Token(Token = "0x6000F76")]
			[Address(RVA = "0xD2F304", Offset = "0xD2F304", VA = "0xD2F304")]
			public ByteComparer()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200031A")]
		public class BoolComparer : IEqualityComparer<bool>
		{
			[Token(Token = "0x6000F77")]
			[Address(RVA = "0xD2F3C0", Offset = "0xD2F3C0", VA = "0xD2F3C0", Slot = "4")]
			private bool System.Collections.Generic.IEqualityComparer<System.Boolean>.Equals(bool x, bool y)
			{
				return default(bool);
			}

			[Token(Token = "0x6000F78")]
			[Address(RVA = "0xD2F3CC", Offset = "0xD2F3CC", VA = "0xD2F3CC", Slot = "5")]
			private int System.Collections.Generic.IEqualityComparer<System.Boolean>.GetHashCode(bool obj)
			{
				return default(int);
			}

			[Token(Token = "0x6000F79")]
			[Address(RVA = "0xD2F30C", Offset = "0xD2F30C", VA = "0xD2F30C")]
			public BoolComparer()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200031B")]
		private class FuncEqualityComparer<T> : EqualityComparer<T>
		{
			[Token(Token = "0x40010DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Func<T, T, bool> equals;

			[Token(Token = "0x40010E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Func<T, int> hash;

			[Token(Token = "0x6000F7A")]
			public FuncEqualityComparer(Func<T, T, bool> equals, Func<T, int> hash)
			{
			}

			[Token(Token = "0x6000F7B")]
			public override bool Equals(T a, T b)
			{
				return default(bool);
			}

			[Token(Token = "0x6000F7C")]
			public override int GetHashCode(T obj)
			{
				return default(int);
			}
		}

		[Token(Token = "0x40010DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly StringComparer String;

		[Token(Token = "0x40010DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly FloatComparer Float;

		[Token(Token = "0x40010DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly IntComparer Int;

		[Token(Token = "0x40010DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly ByteComparer Byte;

		[Token(Token = "0x40010DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly BoolComparer Bool;

		[Token(Token = "0x6000F69")]
		public static IEqualityComparer<T> Create<T>(Func<T, T, bool> equals, [Optional] Func<T, int> hash)
		{
			return null;
		}
	}
	[Token(Token = "0x200031D")]
	public static class GenericObjectPool<T>
	{
		[Token(Token = "0x40010E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Stack<T> pool;

		[Token(Token = "0x17000189")]
		public static int Count
		{
			[Token(Token = "0x6000F80")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000F81")]
		public static void InitPool(int count)
		{
		}

		[Token(Token = "0x6000F82")]
		public static T Get()
		{
			return (T)null;
		}

		[Token(Token = "0x6000F83")]
		public static void Return(T obj)
		{
		}
	}
	[Token(Token = "0x200031E")]
	public static class MatrixUtils
	{
		[Token(Token = "0x6000F85")]
		[Address(RVA = "0xD2D220", Offset = "0xD2D220", VA = "0xD2D220")]
		public static void FromMatrix4x4(Transform transform, Matrix4x4 matrix)
		{
		}

		[Token(Token = "0x6000F86")]
		[Address(RVA = "0xD2F3F8", Offset = "0xD2F3F8", VA = "0xD2F3F8")]
		public static Quaternion GetRotation(Matrix4x4 matrix)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000F87")]
		[Address(RVA = "0xD2F3EC", Offset = "0xD2F3EC", VA = "0xD2F3EC")]
		public static Vector3 GetPosition(Matrix4x4 matrix)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F88")]
		[Address(RVA = "0xD2F51C", Offset = "0xD2F51C", VA = "0xD2F51C")]
		public static Vector3 GetScale(Matrix4x4 m)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x200031F")]
	public class PooledDictionary<T, T2> : Dictionary<T, T2>
	{
		[Token(Token = "0x40010E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Stack<PooledDictionary<T, T2>> stack;

		[Token(Token = "0x40010E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static uint checkedOut;

		[Token(Token = "0x40010E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static uint returned;

		[Token(Token = "0x1700018A")]
		public bool recycleable
		{
			[Token(Token = "0x6000F89")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F8A")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000F8B")]
		public static void Init(int initialPoolSize = 10)
		{
		}

		[Token(Token = "0x6000F8C")]
		public static PooledDictionary<T, T2> Get(int capacity, [Optional] IEqualityComparer<T> comparer)
		{
			return null;
		}

		[Token(Token = "0x6000F8D")]
		public static PooledDictionary<T, T2> Get()
		{
			return null;
		}

		[Token(Token = "0x6000F8E")]
		public static PooledDictionary<T, T2> Get(IEqualityComparer<T> comparer)
		{
			return null;
		}

		[Token(Token = "0x6000F8F")]
		public PooledDictionary()
		{
		}

		[Token(Token = "0x6000F90")]
		public PooledDictionary(int capacity)
		{
		}

		[Token(Token = "0x6000F91")]
		public PooledDictionary(int capacity, IEqualityComparer<T> comparer)
		{
		}

		[Token(Token = "0x6000F92")]
		public void ReturnToPool(bool force = false)
		{
		}
	}
}
namespace Dustyroom
{
	[Token(Token = "0x2000320")]
	public class LinearMotion : MonoBehaviour
	{
		[Token(Token = "0x2000321")]
		public enum TranslationMode
		{
			[Token(Token = "0x40010F2")]
			Off,
			[Token(Token = "0x40010F3")]
			XAxis,
			[Token(Token = "0x40010F4")]
			YAxis,
			[Token(Token = "0x40010F5")]
			ZAxis,
			[Token(Token = "0x40010F6")]
			Vector
		}

		[Token(Token = "0x2000322")]
		public enum RotationMode
		{
			[Token(Token = "0x40010F8")]
			Off,
			[Token(Token = "0x40010F9")]
			XAxis,
			[Token(Token = "0x40010FA")]
			YAxis,
			[Token(Token = "0x40010FB")]
			ZAxis,
			[Token(Token = "0x40010FC")]
			Vector
		}

		[Token(Token = "0x40010E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TranslationMode translationMode;

		[Token(Token = "0x40010E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 translationVector;

		[Token(Token = "0x40010EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float translationSpeed;

		[Token(Token = "0x40010EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public RotationMode rotationMode;

		[Token(Token = "0x40010EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 rotationAxis;

		[Token(Token = "0x40010ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float rotationSpeed;

		[Token(Token = "0x40010EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool useLocalCoordinate;

		[Token(Token = "0x40010EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float translationAcceleration;

		[Token(Token = "0x40010F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float rotationAcceleration;

		[Token(Token = "0x1700018B")]
		private Vector3 TranslationVector
		{
			[Token(Token = "0x6000F94")]
			[Address(RVA = "0xD2F6B0", Offset = "0xD2F6B0", VA = "0xD2F6B0")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700018C")]
		private Vector3 RotationVector
		{
			[Token(Token = "0x6000F95")]
			[Address(RVA = "0xD2F830", Offset = "0xD2F830", VA = "0xD2F830")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000F96")]
		[Address(RVA = "0xD2F9B0", Offset = "0xD2F9B0", VA = "0xD2F9B0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F97")]
		[Address(RVA = "0xD2FC34", Offset = "0xD2FC34", VA = "0xD2FC34")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000F98")]
		[Address(RVA = "0xD2FC54", Offset = "0xD2FC54", VA = "0xD2FC54")]
		public LinearMotion()
		{
		}
	}
	[Token(Token = "0x2000323")]
	public class OrbitMotion : MonoBehaviour
	{
		[Token(Token = "0x2000324")]
		public enum TargetMode
		{
			[Token(Token = "0x4001117")]
			Transform,
			[Token(Token = "0x4001118")]
			Position
		}

		[Token(Token = "0x40010FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TargetMode targetMode;

		[Token(Token = "0x40010FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform targetTransform;

		[Token(Token = "0x40010FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool followTargetTransform;

		[Token(Token = "0x4001100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 targetOffset;

		[Token(Token = "0x4001101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 targetPosition;

		[Token(Token = "0x4001102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Space]
		public float distanceHorizontal;

		[Token(Token = "0x4001103")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float distanceVertical;

		[Token(Token = "0x4001104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float xSpeed;

		[Token(Token = "0x4001105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float ySpeed;

		[Token(Token = "0x4001106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float damping;

		[Token(Token = "0x4001107")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Space]
		public bool clampAngle;

		[Token(Token = "0x4001108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float yMinLimit;

		[Token(Token = "0x4001109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float yMaxLimit;

		[Token(Token = "0x400110A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Space]
		public bool allowZoom;

		[Token(Token = "0x400110B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float distanceMin;

		[Token(Token = "0x400110C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float distanceMax;

		[Token(Token = "0x400110D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float _x;

		[Token(Token = "0x400110E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float _y;

		[Token(Token = "0x400110F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Space]
		public bool autoMovement;

		[Token(Token = "0x4001110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float autoSpeedX;

		[Token(Token = "0x4001111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float autoSpeedY;

		[Token(Token = "0x4001112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float autoSpeedDistance;

		[Token(Token = "0x4001113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Space]
		public bool interactive;

		[Token(Token = "0x4001114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float _lastMoveTime;

		[Token(Token = "0x4001115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[HideInInspector]
		public float timeSinceLastMove;

		[Token(Token = "0x6000F99")]
		[Address(RVA = "0xD2FCF8", Offset = "0xD2FCF8", VA = "0xD2FCF8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F9A")]
		[Address(RVA = "0xD2FE78", Offset = "0xD2FE78", VA = "0xD2FE78")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F9B")]
		[Address(RVA = "0xD30360", Offset = "0xD30360", VA = "0xD30360")]
		private static float ClampAngle(float angle, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6000F9C")]
		[Address(RVA = "0xD3039C", Offset = "0xD3039C", VA = "0xD3039C")]
		public OrbitMotion()
		{
		}
	}
}
namespace FlatKit
{
	[Token(Token = "0x2000325")]
	public class CameraMouseOrbit : MonoBehaviour
	{
		[Token(Token = "0x2000326")]
		public enum TargetMode
		{
			[Token(Token = "0x4001133")]
			Transform,
			[Token(Token = "0x4001134")]
			Position
		}

		[Token(Token = "0x4001119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TargetMode targetMode;

		[Token(Token = "0x400111A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform targetTransform;

		[Token(Token = "0x400111B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool followTargetTransform;

		[Token(Token = "0x400111C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 targetOffset;

		[Token(Token = "0x400111D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 targetPosition;

		[Token(Token = "0x400111E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Space]
		public float distanceHorizontal;

		[Token(Token = "0x400111F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float distanceVertical;

		[Token(Token = "0x4001120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float xSpeed;

		[Token(Token = "0x4001121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float ySpeed;

		[Token(Token = "0x4001122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float damping;

		[Token(Token = "0x4001123")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Space]
		public bool clampAngle;

		[Token(Token = "0x4001124")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float yMinLimit;

		[Token(Token = "0x4001125")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float yMaxLimit;

		[Token(Token = "0x4001126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Space]
		public bool allowZoom;

		[Token(Token = "0x4001127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float distanceMin;

		[Token(Token = "0x4001128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float distanceMax;

		[Token(Token = "0x4001129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float _x;

		[Token(Token = "0x400112A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float _y;

		[Token(Token = "0x400112B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Space]
		public bool autoMovement;

		[Token(Token = "0x400112C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float autoSpeedX;

		[Token(Token = "0x400112D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float autoSpeedY;

		[Token(Token = "0x400112E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float autoSpeedDistance;

		[Token(Token = "0x400112F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Space]
		public bool interactive;

		[Token(Token = "0x4001130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float _lastMoveTime;

		[Token(Token = "0x4001131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[HideInInspector]
		public float timeSinceLastMove;

		[Token(Token = "0x6000F9D")]
		[Address(RVA = "0xC7E14C", Offset = "0xC7E14C", VA = "0xC7E14C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F9E")]
		[Address(RVA = "0xC7E2CC", Offset = "0xC7E2CC", VA = "0xC7E2CC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F9F")]
		[Address(RVA = "0xC7E7B4", Offset = "0xC7E7B4", VA = "0xC7E7B4")]
		private static float ClampAngle(float angle, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6000FA0")]
		[Address(RVA = "0xC7E7F0", Offset = "0xC7E7F0", VA = "0xC7E7F0")]
		public CameraMouseOrbit()
		{
		}
	}
	[Token(Token = "0x2000327")]
	public class UvScroller : MonoBehaviour
	{
		[Token(Token = "0x4001135")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material targetMaterial;

		[Token(Token = "0x4001136")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float speedX;

		[Token(Token = "0x4001137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float speedY;

		[Token(Token = "0x4001138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector2 offset;

		[Token(Token = "0x4001139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector2 initOffset;

		[Token(Token = "0x6000FA1")]
		[Address(RVA = "0xC7E8A0", Offset = "0xC7E8A0", VA = "0xC7E8A0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FA2")]
		[Address(RVA = "0xC7E8DC", Offset = "0xC7E8DC", VA = "0xC7E8DC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000FA3")]
		[Address(RVA = "0xC7E900", Offset = "0xC7E900", VA = "0xC7E900")]
		private void Update()
		{
		}

		[Token(Token = "0x6000FA4")]
		[Address(RVA = "0xC7E96C", Offset = "0xC7E96C", VA = "0xC7E96C")]
		public UvScroller()
		{
		}
	}
	[Token(Token = "0x2000328")]
	[ExecuteInEditMode]
	[ImageEffectAllowedInSceneView]
	[RequireComponent(typeof(Camera))]
	public class FogImageEffect : MonoBehaviour
	{
		[Token(Token = "0x400113A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool useDistance;

		[Token(Token = "0x400113B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Gradient distanceGradient;

		[Token(Token = "0x400113C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float near;

		[Token(Token = "0x400113D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float far;

		[Token(Token = "0x400113E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(0f, 1f)]
		public float distanceFogIntensity;

		[Token(Token = "0x400113F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool useDistanceFogOnSky;

		[Token(Token = "0x4001140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		[Space]
		public bool useHeight;

		[Token(Token = "0x4001141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Gradient heightGradient;

		[Token(Token = "0x4001142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float low;

		[Token(Token = "0x4001143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float high;

		[Token(Token = "0x4001144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Range(0f, 1f)]
		public float heightFogIntensity;

		[Token(Token = "0x4001145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool useHeightFogOnSky;

		[Token(Token = "0x4001146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Space]
		[Range(0f, 1f)]
		public float distanceHeightBlend;

		[Token(Token = "0x4001147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		public Material material;

		[Token(Token = "0x4001148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Camera _camera;

		[Token(Token = "0x4001149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Texture2D _lutDepth;

		[Token(Token = "0x400114A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Texture2D _lutHeight;

		[Token(Token = "0x400114B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly string ShaderName;

		[Token(Token = "0x400114C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int DistanceLut;

		[Token(Token = "0x400114D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static readonly int Near;

		[Token(Token = "0x400114E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly int Far;

		[Token(Token = "0x400114F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static readonly int UseDistanceFog;

		[Token(Token = "0x4001150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly int UseDistanceFogOnSky;

		[Token(Token = "0x4001151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private static readonly int DistanceFogIntensity;

		[Token(Token = "0x4001152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly int HeightLut;

		[Token(Token = "0x4001153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private static readonly int LowWorldY;

		[Token(Token = "0x4001154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static readonly int HighWorldY;

		[Token(Token = "0x4001155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private static readonly int UseHeightFog;

		[Token(Token = "0x4001156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static readonly int UseHeightFogOnSky;

		[Token(Token = "0x4001157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private static readonly int HeightFogIntensity;

		[Token(Token = "0x4001158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static readonly int DistanceHeightBlend;

		[Token(Token = "0x6000FA5")]
		[Address(RVA = "0xC7E974", Offset = "0xC7E974", VA = "0xC7E974")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000FA6")]
		[Address(RVA = "0xC7EA50", Offset = "0xC7EA50", VA = "0xC7EA50")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FA7")]
		[Address(RVA = "0xC7ECE4", Offset = "0xC7ECE4", VA = "0xC7ECE4")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6000FA8")]
		[Address(RVA = "0xC7EDC8", Offset = "0xC7EDC8", VA = "0xC7EDC8")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000FA9")]
		[Address(RVA = "0xC7EA54", Offset = "0xC7EA54", VA = "0xC7EA54")]
		private void UpdateShader()
		{
		}

		[Token(Token = "0x6000FAA")]
		[Address(RVA = "0xC7EEF8", Offset = "0xC7EEF8", VA = "0xC7EEF8")]
		private void UpdateDistanceLut()
		{
		}

		[Token(Token = "0x6000FAB")]
		[Address(RVA = "0xC7F114", Offset = "0xC7F114", VA = "0xC7F114")]
		private void UpdateHeightLut()
		{
		}

		[Token(Token = "0x6000FAC")]
		[Address(RVA = "0xC7F330", Offset = "0xC7F330", VA = "0xC7F330")]
		public FogImageEffect()
		{
		}
	}
	[Token(Token = "0x2000329")]
	[RequireComponent(typeof(Camera))]
	[ImageEffectAllowedInSceneView]
	[ExecuteInEditMode]
	public class OutlineImageEffect : MonoBehaviour
	{
		[Token(Token = "0x4001159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color edgeColor;

		[Token(Token = "0x400115A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0f, 5f)]
		public int thickness;

		[Token(Token = "0x400115B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Space]
		public bool useDepth;

		[Token(Token = "0x400115C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public bool useNormals;

		[Token(Token = "0x400115D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Space]
		[Header("Advanced settings")]
		public float minDepthThreshold;

		[Token(Token = "0x400115E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float maxDepthThreshold;

		[Token(Token = "0x400115F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Space]
		public float minNormalsThreshold;

		[Token(Token = "0x4001160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float maxNormalsThreshold;

		[Token(Token = "0x4001161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public Material material;

		[Token(Token = "0x4001162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Camera _camera;

		[Token(Token = "0x4001163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly string ShaderName;

		[Token(Token = "0x4001164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int EdgeColorProperty;

		[Token(Token = "0x4001165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static readonly int ThicknessProperty;

		[Token(Token = "0x4001166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly int DepthThresholdsProperty;

		[Token(Token = "0x4001167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static readonly int NormalsThresholdsProperty;

		[Token(Token = "0x6000FAE")]
		[Address(RVA = "0xC7F61C", Offset = "0xC7F61C", VA = "0xC7F61C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FAF")]
		[Address(RVA = "0xC7F888", Offset = "0xC7F888", VA = "0xC7F888")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6000FB0")]
		[Address(RVA = "0xC7F9C0", Offset = "0xC7F9C0", VA = "0xC7F9C0")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000FB1")]
		[Address(RVA = "0xC7F6F0", Offset = "0xC7F6F0", VA = "0xC7F6F0")]
		private void UpdateShader()
		{
		}

		[Token(Token = "0x6000FB2")]
		[Address(RVA = "0xC7FB44", Offset = "0xC7FB44", VA = "0xC7FB44")]
		public OutlineImageEffect()
		{
		}
	}
	[Token(Token = "0x200032A")]
	internal class BlitTexturePass : ScriptableRenderPass
	{
		[Token(Token = "0x4001168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string CopyEffectShaderName;

		[Token(Token = "0x4001169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private readonly ProfilingSampler _profilingSampler;

		[Token(Token = "0x400116A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private readonly Material _effectMaterial;

		[Token(Token = "0x400116B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private readonly Material _copyMaterial;

		[Token(Token = "0x400116C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private RenderTargetHandle _temporaryColorTexture;

		[Token(Token = "0x6000FB4")]
		[Address(RVA = "0xC7FC8C", Offset = "0xC7FC8C", VA = "0xC7FC8C")]
		public BlitTexturePass(Material effectMaterial, Material copyMaterial)
		{
		}

		[Token(Token = "0x6000FB5")]
		[Address(RVA = "0xC7FD88", Offset = "0xC7FD88", VA = "0xC7FD88")]
		public void Setup(bool useDepth, bool useNormals, bool useColor)
		{
		}

		[Token(Token = "0x6000FB6")]
		[Address(RVA = "0xC7FDC0", Offset = "0xC7FDC0", VA = "0xC7FDC0", Slot = "5")]
		public override void OnCameraSetup(CommandBuffer cmd, ref RenderingData renderingData)
		{
		}

		[Token(Token = "0x6000FB7")]
		[Address(RVA = "0xC7FE4C", Offset = "0xC7FE4C", VA = "0xC7FE4C", Slot = "9")]
		public override void Execute(ScriptableRenderContext context, ref RenderingData renderingData)
		{
		}

		[Token(Token = "0x6000FB8")]
		[Address(RVA = "0xC80418", Offset = "0xC80418", VA = "0xC80418")]
		private static void SetSourceSize(CommandBuffer cmd, RenderTextureDescriptor desc)
		{
		}
	}
	[Token(Token = "0x200032B")]
	public class FlatKitFog : ScriptableRendererFeature
	{
		[Token(Token = "0x400116D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("To create new settings use 'Create > FlatKit > Fog Settings'.")]
		public FogSettings settings;

		[Token(Token = "0x400116E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		[SerializeField]
		private Material _effectMaterial;

		[Token(Token = "0x400116F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		[SerializeField]
		private Material _copyMaterial;

		[Token(Token = "0x4001170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private BlitTexturePass _blitTexturePass;

		[Token(Token = "0x4001171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RenderTargetHandle _fogTexture;

		[Token(Token = "0x4001172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Texture2D _lutDepth;

		[Token(Token = "0x4001173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Texture2D _lutHeight;

		[Token(Token = "0x4001174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly string FogShaderName;

		[Token(Token = "0x4001175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int DistanceLut;

		[Token(Token = "0x4001176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static readonly int Near;

		[Token(Token = "0x4001177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly int Far;

		[Token(Token = "0x4001178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static readonly int UseDistanceFog;

		[Token(Token = "0x4001179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly int UseDistanceFogOnSky;

		[Token(Token = "0x400117A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private static readonly int DistanceFogIntensity;

		[Token(Token = "0x400117B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly int HeightLut;

		[Token(Token = "0x400117C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private static readonly int LowWorldY;

		[Token(Token = "0x400117D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static readonly int HighWorldY;

		[Token(Token = "0x400117E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private static readonly int UseHeightFog;

		[Token(Token = "0x400117F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static readonly int UseHeightFogOnSky;

		[Token(Token = "0x4001180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private static readonly int HeightFogIntensity;

		[Token(Token = "0x4001181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static readonly int DistanceHeightBlend;

		[Token(Token = "0x6000FBA")]
		[Address(RVA = "0xC80520", Offset = "0xC80520", VA = "0xC80520", Slot = "5")]
		public override void Create()
		{
		}

		[Token(Token = "0x6000FBB")]
		[Address(RVA = "0xC80B40", Offset = "0xC80B40", VA = "0xC80B40", Slot = "7")]
		public override void AddRenderPasses(ScriptableRenderer renderer, ref RenderingData renderingData)
		{
		}

		[Token(Token = "0x6000FBC")]
		[Address(RVA = "0xC80C48", Offset = "0xC80C48", VA = "0xC80C48", Slot = "9")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000FBD")]
		[Address(RVA = "0xC8065C", Offset = "0xC8065C", VA = "0xC8065C")]
		private bool CreateMaterials()
		{
			return default(bool);
		}

		[Token(Token = "0x6000FBE")]
		[Address(RVA = "0xC8080C", Offset = "0xC8080C", VA = "0xC8080C")]
		private void SetMaterialProperties()
		{
		}

		[Token(Token = "0x6000FBF")]
		[Address(RVA = "0xC80CB0", Offset = "0xC80CB0", VA = "0xC80CB0")]
		private void UpdateDistanceLut()
		{
		}

		[Token(Token = "0x6000FC0")]
		[Address(RVA = "0xC80EDC", Offset = "0xC80EDC", VA = "0xC80EDC")]
		private void UpdateHeightLut()
		{
		}

		[Token(Token = "0x6000FC1")]
		[Address(RVA = "0xC81108", Offset = "0xC81108", VA = "0xC81108")]
		public FlatKitFog()
		{
		}
	}
	[Token(Token = "0x200032C")]
	[CreateAssetMenu(fileName = "FogSettings", menuName = "FlatKit/Fog Settings")]
	public class FogSettings : ScriptableObject
	{
		[Token(Token = "0x4001182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Distance Fog")]
		public bool useDistance;

		[Token(Token = "0x4001183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Gradient distanceGradient;

		[Token(Token = "0x4001184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float near;

		[Token(Token = "0x4001185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float far;

		[Token(Token = "0x4001186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(0f, 1f)]
		public float distanceFogIntensity;

		[Token(Token = "0x4001187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool useDistanceFogOnSky;

		[Token(Token = "0x4001188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		[Space]
		[Header("Height Fog")]
		public bool useHeight;

		[Token(Token = "0x4001189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Gradient heightGradient;

		[Token(Token = "0x400118A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float low;

		[Token(Token = "0x400118B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float high;

		[Token(Token = "0x400118C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Range(0f, 1f)]
		public float heightFogIntensity;

		[Token(Token = "0x400118D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool useHeightFogOnSky;

		[Token(Token = "0x400118E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Blending")]
		[Space]
		[Range(0f, 1f)]
		public float distanceHeightBlend;

		[Token(Token = "0x400118F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Header("Advanced settings")]
		[Space]
		[Tooltip("The render stage at which the effect is applied. To exclude transparent objects, like water or UI elements, set this to \"Before Transparent\".")]
		public RenderPassEvent renderEvent;

		[Token(Token = "0x6000FC3")]
		[Address(RVA = "0xC813CC", Offset = "0xC813CC", VA = "0xC813CC")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6000FC4")]
		[Address(RVA = "0xC8148C", Offset = "0xC8148C", VA = "0xC8148C")]
		public FogSettings()
		{
		}
	}
	[Token(Token = "0x200032D")]
	public class FlatKitOutline : ScriptableRendererFeature
	{
		[Token(Token = "0x4001190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("To create new settings use 'Create > FlatKit > Outline Settings'.")]
		public OutlineSettings settings;

		[Token(Token = "0x4001191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[HideInInspector]
		private Material _effectMaterial;

		[Token(Token = "0x4001192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[HideInInspector]
		private Material _copyMaterial;

		[Token(Token = "0x4001193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private BlitTexturePass _blitTexturePass;

		[Token(Token = "0x4001194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly string OutlineShaderName;

		[Token(Token = "0x4001195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int EdgeColor;

		[Token(Token = "0x4001196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static readonly int Thickness;

		[Token(Token = "0x4001197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly int DepthThresholdMin;

		[Token(Token = "0x4001198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static readonly int DepthThresholdMax;

		[Token(Token = "0x4001199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly int NormalThresholdMin;

		[Token(Token = "0x400119A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private static readonly int NormalThresholdMax;

		[Token(Token = "0x400119B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly int ColorThresholdMin;

		[Token(Token = "0x400119C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private static readonly int ColorThresholdMax;

		[Token(Token = "0x6000FC5")]
		[Address(RVA = "0xC814C0", Offset = "0xC814C0", VA = "0xC814C0", Slot = "5")]
		public override void Create()
		{
		}

		[Token(Token = "0x6000FC6")]
		[Address(RVA = "0xC81AA4", Offset = "0xC81AA4", VA = "0xC81AA4", Slot = "7")]
		public override void AddRenderPasses(ScriptableRenderer renderer, ref RenderingData renderingData)
		{
		}

		[Token(Token = "0x6000FC7")]
		[Address(RVA = "0xC81BC0", Offset = "0xC81BC0", VA = "0xC81BC0", Slot = "9")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000FC8")]
		[Address(RVA = "0xC815D0", Offset = "0xC815D0", VA = "0xC815D0")]
		private bool CreateMaterials()
		{
			return default(bool);
		}

		[Token(Token = "0x6000FC9")]
		[Address(RVA = "0xC81780", Offset = "0xC81780", VA = "0xC81780")]
		private void SetMaterialProperties()
		{
		}

		[Token(Token = "0x6000FCA")]
		[Address(RVA = "0xC81C28", Offset = "0xC81C28", VA = "0xC81C28")]
		public FlatKitOutline()
		{
		}
	}
	[Token(Token = "0x200032E")]
	[CreateAssetMenu(fileName = "OutlineSettings", menuName = "FlatKit/Outline Settings")]
	public class OutlineSettings : ScriptableObject
	{
		[Token(Token = "0x400119D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color edgeColor;

		[Token(Token = "0x400119E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0f, 5f)]
		public int thickness;

		[Token(Token = "0x400119F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("If enabled, the line width will stay constant regardless of the rendering resolution. However, some of the lines may appear blurry.")]
		public bool resolutionInvariant;

		[Token(Token = "0x40011A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		[Space]
		public bool useDepth;

		[Token(Token = "0x40011A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
		public bool useNormals;

		[Token(Token = "0x40011A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F")]
		public bool useColor;

		[Token(Token = "0x40011A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Advanced settings")]
		public float minDepthThreshold;

		[Token(Token = "0x40011A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float maxDepthThreshold;

		[Token(Token = "0x40011A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Space]
		public float minNormalsThreshold;

		[Token(Token = "0x40011A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float maxNormalsThreshold;

		[Token(Token = "0x40011A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Space]
		public float minColorThreshold;

		[Token(Token = "0x40011A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float maxColorThreshold;

		[Token(Token = "0x40011A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Space]
		[Tooltip("The render stage at which the effect is applied. To exclude transparent objects, like water or UI elements, set this to \"Before Transparent\".")]
		public RenderPassEvent renderEvent;

		[Token(Token = "0x40011AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Space]
		public bool outlineOnly;

		[Token(Token = "0x6000FCC")]
		[Address(RVA = "0xC81E10", Offset = "0xC81E10", VA = "0xC81E10")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6000FCD")]
		[Address(RVA = "0xC81F0C", Offset = "0xC81F0C", VA = "0xC81F0C")]
		public OutlineSettings()
		{
		}
	}
	[Token(Token = "0x200032F")]
	public class Buoyancy : MonoBehaviour
	{
		[Token(Token = "0x40011AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The object that contains a Water material.")]
		public Transform water;

		[Token(Token = "0x40011AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Space]
		[Tooltip("Range of probing wave height for buoyancy rotation.")]
		public float size;

		[Token(Token = "0x40011AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Max height of buoyancy going up and down.")]
		public float amplitude;

		[Token(Token = "0x40011AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Optionally provide a separate material to get the wave parameters.")]
		[Space]
		public Material overrideWaterMaterial;

		[Token(Token = "0x40011AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material _material;

		[Token(Token = "0x40011B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float _speed;

		[Token(Token = "0x40011B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float _amplitude;

		[Token(Token = "0x40011B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float _frequency;

		[Token(Token = "0x40011B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float _direction;

		[Token(Token = "0x40011B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 _originalPosition;

		[Token(Token = "0x6000FCE")]
		[Address(RVA = "0xC81F40", Offset = "0xC81F40", VA = "0xC81F40")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FCF")]
		[Address(RVA = "0xC820C0", Offset = "0xC820C0", VA = "0xC820C0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000FD0")]
		[Address(RVA = "0xC82444", Offset = "0xC82444", VA = "0xC82444")]
		private Vector2 GradientNoiseDir(Vector2 p)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000FD1")]
		[Address(RVA = "0xC8259C", Offset = "0xC8259C", VA = "0xC8259C")]
		private float GradientNoise(Vector2 p)
		{
			return default(float);
		}

		[Token(Token = "0x6000FD2")]
		[Address(RVA = "0xC82254", Offset = "0xC82254", VA = "0xC82254")]
		private Vector3 GetNormalWS(Vector3 positionOS)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FD3")]
		[Address(RVA = "0xC82860", Offset = "0xC82860", VA = "0xC82860")]
		private float SineWave(Vector3 positionOS, float offset)
		{
			return default(float);
		}

		[Token(Token = "0x6000FD4")]
		[Address(RVA = "0xC82198", Offset = "0xC82198", VA = "0xC82198")]
		private float GetHeightOS(Vector3 positionOS)
		{
			return default(float);
		}

		[Token(Token = "0x6000FD5")]
		[Address(RVA = "0xC82950", Offset = "0xC82950", VA = "0xC82950")]
		public Buoyancy()
		{
		}
	}
}
namespace DG.Tweening
{
	[Token(Token = "0x2000330")]
	public static class DOTweenModuleAudio
	{
		[Token(Token = "0x6000FD6")]
		[Address(RVA = "0xC82960", Offset = "0xC82960", VA = "0xC82960")]
		public static TweenerCore<float, float, FloatOptions> DOFade(this AudioSource target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000FD7")]
		[Address(RVA = "0xC82AFC", Offset = "0xC82AFC", VA = "0xC82AFC")]
		public static TweenerCore<float, float, FloatOptions> DOPitch(this AudioSource target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000FD8")]
		[Address(RVA = "0xC82C70", Offset = "0xC82C70", VA = "0xC82C70")]
		public static TweenerCore<float, float, FloatOptions> DOSetFloat(this UnityEngine.Audio.AudioMixer target, string floatName, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6000FD9")]
		[Address(RVA = "0xC82DE8", Offset = "0xC82DE8", VA = "0xC82DE8")]
		public static int DOComplete(this UnityEngine.Audio.AudioMixer target, bool withCallbacks = false)
		{
			return default(int);
		}

		[Token(Token = "0x6000FDA")]
		[Address(RVA = "0xC82E50", Offset = "0xC82E50", VA = "0xC82E50")]
		public static int DOKill(this UnityEngine.Audio.AudioMixer target, bool complete = false)
		{
			return default(int);
		}

		[Token(Token = "0x6000FDB")]
		[Address(RVA = "0xC82EB8", Offset = "0xC82EB8", VA = "0xC82EB8")]
		public static int DOFlip(this UnityEngine.Audio.AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6000FDC")]
		[Address(RVA = "0xC82F10", Offset = "0xC82F10", VA = "0xC82F10")]
		public static int DOGoto(this UnityEngine.Audio.AudioMixer target, float to, bool andPlay = false)
		{
			return default(int);
		}

		[Token(Token = "0x6000FDD")]
		[Address(RVA = "0xC82F88", Offset = "0xC82F88", VA = "0xC82F88")]
		public static int DOPause(this UnityEngine.Audio.AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6000FDE")]
		[Address(RVA = "0xC82FE0", Offset = "0xC82FE0", VA = "0xC82FE0")]
		public static int DOPlay(this UnityEngine.Audio.AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6000FDF")]
		[Address(RVA = "0xC83038", Offset = "0xC83038", VA = "0xC83038")]
		public static int DOPlayBackwards(this UnityEngine.Audio.AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6000FE0")]
		[Address(RVA = "0xC83090", Offset = "0xC83090", VA = "0xC83090")]
		public static int DOPlayForward(this UnityEngine.Audio.AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6000FE1")]
		[Address(RVA = "0xC830E8", Offset = "0xC830E8", VA = "0xC830E8")]
		public static int DORestart(this UnityEngine.Audio.AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6000FE2")]
		[Address(RVA = "0xC83148", Offset = "0xC83148", VA = "0xC83148")]
		public static int DORewind(this UnityEngine.Audio.AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6000FE3")]
		[Address(RVA = "0xC831A4", Offset = "0xC831A4", VA = "0xC831A4")]
		public static int DOSmoothRewind(this UnityEngine.Audio.AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6000FE4")]
		[Address(RVA = "0xC831FC", Offset = "0xC831FC", VA = "0xC831FC")]
		public static int DOTogglePause(this UnityEngine.Audio.AudioMixer target)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000334")]
	public static class DOTweenModulePhysics
	{
		[Token(Token = "0x6000FEE")]
		[Address(RVA = "0xC8331C", Offset = "0xC8331C", VA = "0xC8331C")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOMove(this Rigidbody target, Vector3 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000FEF")]
		[Address(RVA = "0xC834C4", Offset = "0xC834C4", VA = "0xC834C4")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOMoveX(this Rigidbody target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000FF0")]
		[Address(RVA = "0xC83660", Offset = "0xC83660", VA = "0xC83660")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOMoveY(this Rigidbody target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000FF1")]
		[Address(RVA = "0xC837FC", Offset = "0xC837FC", VA = "0xC837FC")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOMoveZ(this Rigidbody target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000FF2")]
		[Address(RVA = "0xC83998", Offset = "0xC83998", VA = "0xC83998")]
		public static TweenerCore<Quaternion, Vector3, QuaternionOptions> DORotate(this Rigidbody target, Vector3 endValue, float duration, RotateMode mode = RotateMode.Fast)
		{
			return null;
		}

		[Token(Token = "0x6000FF3")]
		[Address(RVA = "0xC83B3C", Offset = "0xC83B3C", VA = "0xC83B3C")]
		public static TweenerCore<Quaternion, Vector3, QuaternionOptions> DOLookAt(this Rigidbody target, Vector3 towards, float duration, AxisConstraint axisConstraint = AxisConstraint.None, [Optional] Vector3? up)
		{
			return null;
		}

		[Token(Token = "0x6000FF4")]
		[Address(RVA = "0xC83D94", Offset = "0xC83D94", VA = "0xC83D94")]
		public static Sequence DOJump(this Rigidbody target, Vector3 endValue, float jumpPower, int numJumps, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6000FF5")]
		[Address(RVA = "0xC84274", Offset = "0xC84274", VA = "0xC84274")]
		public static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> DOPath(this Rigidbody target, Vector3[] path, float duration, PathType pathType = PathType.Linear, PathMode pathMode = PathMode.Full3D, int resolution = 10, [Optional] Color? gizmoColor)
		{
			return null;
		}

		[Token(Token = "0x6000FF6")]
		[Address(RVA = "0xC844D8", Offset = "0xC844D8", VA = "0xC844D8")]
		public static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> DOLocalPath(this Rigidbody target, Vector3[] path, float duration, PathType pathType = PathType.Linear, PathMode pathMode = PathMode.Full3D, int resolution = 10, [Optional] Color? gizmoColor)
		{
			return null;
		}

		[Token(Token = "0x6000FF7")]
		[Address(RVA = "0xC84748", Offset = "0xC84748", VA = "0xC84748")]
		internal static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> DOPath(this Rigidbody target, DG.Tweening.Plugins.Core.PathCore.Path path, float duration, PathMode pathMode = PathMode.Full3D)
		{
			return null;
		}

		[Token(Token = "0x6000FF8")]
		[Address(RVA = "0xC8490C", Offset = "0xC8490C", VA = "0xC8490C")]
		internal static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> DOLocalPath(this Rigidbody target, DG.Tweening.Plugins.Core.PathCore.Path path, float duration, PathMode pathMode = PathMode.Full3D)
		{
			return null;
		}
	}
	[Token(Token = "0x2000340")]
	public static class DOTweenModulePhysics2D
	{
		[Token(Token = "0x6001015")]
		[Address(RVA = "0xC84EFC", Offset = "0xC84EFC", VA = "0xC84EFC")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOMove(this Rigidbody2D target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001016")]
		[Address(RVA = "0xC8509C", Offset = "0xC8509C", VA = "0xC8509C")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOMoveX(this Rigidbody2D target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001017")]
		[Address(RVA = "0xC85234", Offset = "0xC85234", VA = "0xC85234")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOMoveY(this Rigidbody2D target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001018")]
		[Address(RVA = "0xC853CC", Offset = "0xC853CC", VA = "0xC853CC")]
		public static TweenerCore<float, float, FloatOptions> DORotate(this Rigidbody2D target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001019")]
		[Address(RVA = "0xC8554C", Offset = "0xC8554C", VA = "0xC8554C")]
		public static Sequence DOJump(this Rigidbody2D target, Vector2 endValue, float jumpPower, int numJumps, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600101A")]
		[Address(RVA = "0xC85954", Offset = "0xC85954", VA = "0xC85954")]
		public static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> DOPath(this Rigidbody2D target, Vector2[] path, float duration, PathType pathType = PathType.Linear, PathMode pathMode = PathMode.Full3D, int resolution = 10, [Optional] Color? gizmoColor)
		{
			return null;
		}

		[Token(Token = "0x600101B")]
		[Address(RVA = "0xC85C30", Offset = "0xC85C30", VA = "0xC85C30")]
		public static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> DOLocalPath(this Rigidbody2D target, Vector2[] path, float duration, PathType pathType = PathType.Linear, PathMode pathMode = PathMode.Full3D, int resolution = 10, [Optional] Color? gizmoColor)
		{
			return null;
		}
	}
	[Token(Token = "0x2000348")]
	public static class DOTweenModuleSprite
	{
		[Token(Token = "0x6001031")]
		[Address(RVA = "0xC86218", Offset = "0xC86218", VA = "0xC86218")]
		public static TweenerCore<Color, Color, ColorOptions> DOColor(this SpriteRenderer target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001032")]
		[Address(RVA = "0xC863B4", Offset = "0xC863B4", VA = "0xC863B4")]
		public static TweenerCore<Color, Color, ColorOptions> DOFade(this SpriteRenderer target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001033")]
		[Address(RVA = "0xC86528", Offset = "0xC86528", VA = "0xC86528")]
		public static Sequence DOGradientColor(this SpriteRenderer target, Gradient gradient, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001034")]
		[Address(RVA = "0xC86704", Offset = "0xC86704", VA = "0xC86704")]
		public static Tweener DOBlendableColor(this SpriteRenderer target, Color endValue, float duration)
		{
			return null;
		}
	}
	[Token(Token = "0x200034C")]
	public static class DOTweenModuleUI
	{
		[Token(Token = "0x200034D")]
		public static class Utils
		{
			[Token(Token = "0x6001067")]
			[Address(RVA = "0xC8AF6C", Offset = "0xC8AF6C", VA = "0xC8AF6C")]
			public static Vector2 SwitchToRectTransform(RectTransform from, RectTransform to)
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x600103E")]
		[Address(RVA = "0xC869E4", Offset = "0xC869E4", VA = "0xC869E4")]
		public static TweenerCore<float, float, FloatOptions> DOFade(this CanvasGroup target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x600103F")]
		[Address(RVA = "0xC86B58", Offset = "0xC86B58", VA = "0xC86B58")]
		public static TweenerCore<Color, Color, ColorOptions> DOColor(this Graphic target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001040")]
		[Address(RVA = "0xC86CF4", Offset = "0xC86CF4", VA = "0xC86CF4")]
		public static TweenerCore<Color, Color, ColorOptions> DOFade(this Graphic target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001041")]
		[Address(RVA = "0xC86E68", Offset = "0xC86E68", VA = "0xC86E68")]
		public static TweenerCore<Color, Color, ColorOptions> DOColor(this Image target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001042")]
		[Address(RVA = "0xC87004", Offset = "0xC87004", VA = "0xC87004")]
		public static TweenerCore<Color, Color, ColorOptions> DOFade(this Image target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001043")]
		[Address(RVA = "0xC87178", Offset = "0xC87178", VA = "0xC87178")]
		public static TweenerCore<float, float, FloatOptions> DOFillAmount(this Image target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001044")]
		[Address(RVA = "0xC87310", Offset = "0xC87310", VA = "0xC87310")]
		public static Sequence DOGradientColor(this Image target, Gradient gradient, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001045")]
		[Address(RVA = "0xC874F4", Offset = "0xC874F4", VA = "0xC874F4")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOFlexibleSize(this LayoutElement target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001046")]
		[Address(RVA = "0xC87690", Offset = "0xC87690", VA = "0xC87690")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOMinSize(this LayoutElement target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001047")]
		[Address(RVA = "0xC8782C", Offset = "0xC8782C", VA = "0xC8782C")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOPreferredSize(this LayoutElement target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001048")]
		[Address(RVA = "0xC879C8", Offset = "0xC879C8", VA = "0xC879C8")]
		public static TweenerCore<Color, Color, ColorOptions> DOColor(this Outline target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001049")]
		[Address(RVA = "0xC87B64", Offset = "0xC87B64", VA = "0xC87B64")]
		public static TweenerCore<Color, Color, ColorOptions> DOFade(this Outline target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x600104A")]
		[Address(RVA = "0xC87CD8", Offset = "0xC87CD8", VA = "0xC87CD8")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOScale(this Outline target, Vector2 endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x600104B")]
		[Address(RVA = "0xC87E5C", Offset = "0xC87E5C", VA = "0xC87E5C")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorPos(this RectTransform target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600104C")]
		[Address(RVA = "0xC87FF8", Offset = "0xC87FF8", VA = "0xC87FF8")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorPosX(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600104D")]
		[Address(RVA = "0xC8818C", Offset = "0xC8818C", VA = "0xC8818C")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorPosY(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600104E")]
		[Address(RVA = "0xC88320", Offset = "0xC88320", VA = "0xC88320")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOAnchorPos3D(this RectTransform target, Vector3 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600104F")]
		[Address(RVA = "0xC884C4", Offset = "0xC884C4", VA = "0xC884C4")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOAnchorPos3DX(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001050")]
		[Address(RVA = "0xC8865C", Offset = "0xC8865C", VA = "0xC8865C")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOAnchorPos3DY(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001051")]
		[Address(RVA = "0xC887F4", Offset = "0xC887F4", VA = "0xC887F4")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOAnchorPos3DZ(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001052")]
		[Address(RVA = "0xC8898C", Offset = "0xC8898C", VA = "0xC8898C")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorMax(this RectTransform target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001053")]
		[Address(RVA = "0xC88B28", Offset = "0xC88B28", VA = "0xC88B28")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorMin(this RectTransform target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001054")]
		[Address(RVA = "0xC88CC4", Offset = "0xC88CC4", VA = "0xC88CC4")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOPivot(this RectTransform target, Vector2 endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001055")]
		[Address(RVA = "0xC88E48", Offset = "0xC88E48", VA = "0xC88E48")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOPivotX(this RectTransform target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001056")]
		[Address(RVA = "0xC88FD0", Offset = "0xC88FD0", VA = "0xC88FD0")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOPivotY(this RectTransform target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001057")]
		[Address(RVA = "0xC89158", Offset = "0xC89158", VA = "0xC89158")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOSizeDelta(this RectTransform target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001058")]
		[Address(RVA = "0xC892F4", Offset = "0xC892F4", VA = "0xC892F4")]
		public static Tweener DOPunchAnchorPos(this RectTransform target, Vector2 punch, float duration, int vibrato = 10, float elasticity = 1f, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001059")]
		[Address(RVA = "0xC89498", Offset = "0xC89498", VA = "0xC89498")]
		public static Tweener DOShakeAnchorPos(this RectTransform target, float duration, float strength = 100f, int vibrato = 10, float randomness = 90f, bool snapping = false, bool fadeOut = true)
		{
			return null;
		}

		[Token(Token = "0x600105A")]
		[Address(RVA = "0xC89664", Offset = "0xC89664", VA = "0xC89664")]
		public static Tweener DOShakeAnchorPos(this RectTransform target, float duration, Vector2 strength, int vibrato = 10, float randomness = 90f, bool snapping = false, bool fadeOut = true)
		{
			return null;
		}

		[Token(Token = "0x600105B")]
		[Address(RVA = "0xC89838", Offset = "0xC89838", VA = "0xC89838")]
		public static Sequence DOJumpAnchorPos(this RectTransform target, Vector2 endValue, float jumpPower, int numJumps, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600105C")]
		[Address(RVA = "0xC89C44", Offset = "0xC89C44", VA = "0xC89C44")]
		public static Tweener DONormalizedPos(this ScrollRect target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600105D")]
		[Address(RVA = "0xC89DD4", Offset = "0xC89DD4", VA = "0xC89DD4")]
		public static Tweener DOHorizontalNormalizedPos(this ScrollRect target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600105E")]
		[Address(RVA = "0xC89F54", Offset = "0xC89F54", VA = "0xC89F54")]
		public static Tweener DOVerticalNormalizedPos(this ScrollRect target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600105F")]
		[Address(RVA = "0xC8A0D4", Offset = "0xC8A0D4", VA = "0xC8A0D4")]
		public static TweenerCore<float, float, FloatOptions> DOValue(this Slider target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001060")]
		[Address(RVA = "0xC8A260", Offset = "0xC8A260", VA = "0xC8A260")]
		public static TweenerCore<Color, Color, ColorOptions> DOColor(this Text target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001061")]
		[Address(RVA = "0xC8A3FC", Offset = "0xC8A3FC", VA = "0xC8A3FC")]
		public static TweenerCore<int, int, NoOptions> DOCounter(this Text target, int fromValue, int endValue, float duration, bool addThousandsSeparator = true, [Optional] CultureInfo culture)
		{
			return null;
		}

		[Token(Token = "0x6001062")]
		[Address(RVA = "0xC8A5D8", Offset = "0xC8A5D8", VA = "0xC8A5D8")]
		public static TweenerCore<Color, Color, ColorOptions> DOFade(this Text target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001063")]
		[Address(RVA = "0xC8A74C", Offset = "0xC8A74C", VA = "0xC8A74C")]
		public static TweenerCore<string, string, StringOptions> DOText(this Text target, string endValue, float duration, bool richTextEnabled = true, ScrambleMode scrambleMode = ScrambleMode.None, [Optional] string scrambleChars)
		{
			return null;
		}

		[Token(Token = "0x6001064")]
		[Address(RVA = "0xC8A96C", Offset = "0xC8A96C", VA = "0xC8A96C")]
		public static Tweener DOBlendableColor(this Graphic target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001065")]
		[Address(RVA = "0xC8AB6C", Offset = "0xC8AB6C", VA = "0xC8AB6C")]
		public static Tweener DOBlendableColor(this Image target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001066")]
		[Address(RVA = "0xC8AD6C", Offset = "0xC8AD6C", VA = "0xC8AD6C")]
		public static Tweener DOBlendableColor(this Text target, Color endValue, float duration)
		{
			return null;
		}
	}
	[Token(Token = "0x2000376")]
	public static class DOTweenModuleUnityVersion
	{
		[StructLayout(3)]
		[Token(Token = "0x2000379")]
		[CompilerGenerated]
		private struct <AsyncWaitForCompletion>d__10 : IAsyncStateMachine
		{
			[Token(Token = "0x4001215")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4001216")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4001217")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x4001218")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x60010FA")]
			[Address(RVA = "0xC8D1A8", Offset = "0xC8D1A8", VA = "0xC8D1A8", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x60010FB")]
			[Address(RVA = "0xC8D3E0", Offset = "0xC8D3E0", VA = "0xC8D3E0", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x200037A")]
		[CompilerGenerated]
		private struct <AsyncWaitForRewind>d__11 : IAsyncStateMachine
		{
			[Token(Token = "0x4001219")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x400121A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x400121B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x400121C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x60010FC")]
			[Address(RVA = "0xC8D3EC", Offset = "0xC8D3EC", VA = "0xC8D3EC", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x60010FD")]
			[Address(RVA = "0xC8D648", Offset = "0xC8D648", VA = "0xC8D648", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x200037B")]
		[CompilerGenerated]
		private struct <AsyncWaitForKill>d__12 : IAsyncStateMachine
		{
			[Token(Token = "0x400121D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x400121E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x400121F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x4001220")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x60010FE")]
			[Address(RVA = "0xC8D654", Offset = "0xC8D654", VA = "0xC8D654", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x60010FF")]
			[Address(RVA = "0xC8D878", Offset = "0xC8D878", VA = "0xC8D878", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x200037C")]
		[CompilerGenerated]
		private struct <AsyncWaitForElapsedLoops>d__13 : IAsyncStateMachine
		{
			[Token(Token = "0x4001221")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4001222")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4001223")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x4001224")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int elapsedLoops;

			[Token(Token = "0x4001225")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x6001100")]
			[Address(RVA = "0xC8D884", Offset = "0xC8D884", VA = "0xC8D884", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001101")]
			[Address(RVA = "0xC8DAC4", Offset = "0xC8DAC4", VA = "0xC8DAC4", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x200037D")]
		[CompilerGenerated]
		private struct <AsyncWaitForPosition>d__14 : IAsyncStateMachine
		{
			[Token(Token = "0x4001226")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4001227")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4001228")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x4001229")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float position;

			[Token(Token = "0x400122A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x6001102")]
			[Address(RVA = "0xC8DAD0", Offset = "0xC8DAD0", VA = "0xC8DAD0", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001103")]
			[Address(RVA = "0xC8DD28", Offset = "0xC8DD28", VA = "0xC8DD28", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x200037E")]
		[CompilerGenerated]
		private struct <AsyncWaitForStart>d__15 : IAsyncStateMachine
		{
			[Token(Token = "0x400122B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x400122C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x400122D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x400122E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x6001104")]
			[Address(RVA = "0xC8DD34", Offset = "0xC8DD34", VA = "0xC8DD34", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001105")]
			[Address(RVA = "0xC8DF60", Offset = "0xC8DF60", VA = "0xC8DF60", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[Token(Token = "0x60010E4")]
		[Address(RVA = "0xC8BEF4", Offset = "0xC8BEF4", VA = "0xC8BEF4")]
		public static Sequence DOGradientColor(this Material target, Gradient gradient, float duration)
		{
			return null;
		}

		[Token(Token = "0x60010E5")]
		[Address(RVA = "0xC8C0D4", Offset = "0xC8C0D4", VA = "0xC8C0D4")]
		public static Sequence DOGradientColor(this Material target, Gradient gradient, string property, float duration)
		{
			return null;
		}

		[Token(Token = "0x60010E6")]
		[Address(RVA = "0xC8C2C0", Offset = "0xC8C2C0", VA = "0xC8C2C0")]
		public static CustomYieldInstruction WaitForCompletion(this Tween t, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x60010E7")]
		[Address(RVA = "0xC8C3A8", Offset = "0xC8C3A8", VA = "0xC8C3A8")]
		public static CustomYieldInstruction WaitForRewind(this Tween t, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x60010E8")]
		[Address(RVA = "0xC8C490", Offset = "0xC8C490", VA = "0xC8C490")]
		public static CustomYieldInstruction WaitForKill(this Tween t, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x60010E9")]
		[Address(RVA = "0xC8C578", Offset = "0xC8C578", VA = "0xC8C578")]
		public static CustomYieldInstruction WaitForElapsedLoops(this Tween t, int elapsedLoops, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x60010EA")]
		[Address(RVA = "0xC8C670", Offset = "0xC8C670", VA = "0xC8C670")]
		public static CustomYieldInstruction WaitForPosition(this Tween t, float position, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x60010EB")]
		[Address(RVA = "0xC8C778", Offset = "0xC8C778", VA = "0xC8C778")]
		public static CustomYieldInstruction WaitForStart(this Tween t, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x60010EC")]
		[Address(RVA = "0xC8C860", Offset = "0xC8C860", VA = "0xC8C860")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOOffset(this Material target, Vector2 endValue, int propertyID, float duration)
		{
			return null;
		}

		[Token(Token = "0x60010ED")]
		[Address(RVA = "0xC8CA54", Offset = "0xC8CA54", VA = "0xC8CA54")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOTiling(this Material target, Vector2 endValue, int propertyID, float duration)
		{
			return null;
		}

		[Token(Token = "0x60010EE")]
		[Address(RVA = "0xC8CC48", Offset = "0xC8CC48", VA = "0xC8CC48")]
		[AsyncStateMachine(typeof(<AsyncWaitForCompletion>d__10))]
		public static Task AsyncWaitForCompletion(this Tween t)
		{
			return null;
		}

		[Token(Token = "0x60010EF")]
		[Address(RVA = "0xC8CD10", Offset = "0xC8CD10", VA = "0xC8CD10")]
		[AsyncStateMachine(typeof(<AsyncWaitForRewind>d__11))]
		public static Task AsyncWaitForRewind(this Tween t)
		{
			return null;
		}

		[Token(Token = "0x60010F0")]
		[Address(RVA = "0xC8CDD8", Offset = "0xC8CDD8", VA = "0xC8CDD8")]
		[AsyncStateMachine(typeof(<AsyncWaitForKill>d__12))]
		public static Task AsyncWaitForKill(this Tween t)
		{
			return null;
		}

		[Token(Token = "0x60010F1")]
		[Address(RVA = "0xC8CEA0", Offset = "0xC8CEA0", VA = "0xC8CEA0")]
		[AsyncStateMachine(typeof(<AsyncWaitForElapsedLoops>d__13))]
		public static Task AsyncWaitForElapsedLoops(this Tween t, int elapsedLoops)
		{
			return null;
		}

		[Token(Token = "0x60010F2")]
		[Address(RVA = "0xC8CF78", Offset = "0xC8CF78", VA = "0xC8CF78")]
		[AsyncStateMachine(typeof(<AsyncWaitForPosition>d__14))]
		public static Task AsyncWaitForPosition(this Tween t, float position)
		{
			return null;
		}

		[Token(Token = "0x60010F3")]
		[Address(RVA = "0xC8D050", Offset = "0xC8D050", VA = "0xC8D050")]
		[AsyncStateMachine(typeof(<AsyncWaitForStart>d__15))]
		public static Task AsyncWaitForStart(this Tween t)
		{
			return null;
		}
	}
	[Token(Token = "0x200037F")]
	public static class DOTweenCYInstruction
	{
		[Token(Token = "0x2000380")]
		public class WaitForCompletion : CustomYieldInstruction
		{
			[Token(Token = "0x400122F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x1700018D")]
			public override bool keepWaiting
			{
				[Token(Token = "0x6001106")]
				[Address(RVA = "0xC8DF6C", Offset = "0xC8DF6C", VA = "0xC8DF6C", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6001107")]
			[Address(RVA = "0xC8C380", Offset = "0xC8C380", VA = "0xC8C380")]
			public WaitForCompletion(Tween tween)
			{
			}
		}

		[Token(Token = "0x2000381")]
		public class WaitForRewind : CustomYieldInstruction
		{
			[Token(Token = "0x4001230")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x1700018E")]
			public override bool keepWaiting
			{
				[Token(Token = "0x6001108")]
				[Address(RVA = "0xC8DF9C", Offset = "0xC8DF9C", VA = "0xC8DF9C", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6001109")]
			[Address(RVA = "0xC8C468", Offset = "0xC8C468", VA = "0xC8C468")]
			public WaitForRewind(Tween tween)
			{
			}
		}

		[Token(Token = "0x2000382")]
		public class WaitForKill : CustomYieldInstruction
		{
			[Token(Token = "0x4001231")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x1700018F")]
			public override bool keepWaiting
			{
				[Token(Token = "0x600110A")]
				[Address(RVA = "0xC8DFFC", Offset = "0xC8DFFC", VA = "0xC8DFFC", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x600110B")]
			[Address(RVA = "0xC8C550", Offset = "0xC8C550", VA = "0xC8C550")]
			public WaitForKill(Tween tween)
			{
			}
		}

		[Token(Token = "0x2000383")]
		public class WaitForElapsedLoops : CustomYieldInstruction
		{
			[Token(Token = "0x4001232")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x4001233")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly int elapsedLoops;

			[Token(Token = "0x17000190")]
			public override bool keepWaiting
			{
				[Token(Token = "0x600110C")]
				[Address(RVA = "0xC8E018", Offset = "0xC8E018", VA = "0xC8E018", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x600110D")]
			[Address(RVA = "0xC8C640", Offset = "0xC8C640", VA = "0xC8C640")]
			public WaitForElapsedLoops(Tween tween, int elapsedLoops)
			{
			}
		}

		[Token(Token = "0x2000384")]
		public class WaitForPosition : CustomYieldInstruction
		{
			[Token(Token = "0x4001234")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x4001235")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly float position;

			[Token(Token = "0x17000191")]
			public override bool keepWaiting
			{
				[Token(Token = "0x600110E")]
				[Address(RVA = "0xC8E058", Offset = "0xC8E058", VA = "0xC8E058", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x600110F")]
			[Address(RVA = "0xC8C740", Offset = "0xC8C740", VA = "0xC8C740")]
			public WaitForPosition(Tween tween, float position)
			{
			}
		}

		[Token(Token = "0x2000385")]
		public class WaitForStart : CustomYieldInstruction
		{
			[Token(Token = "0x4001236")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x17000192")]
			public override bool keepWaiting
			{
				[Token(Token = "0x6001110")]
				[Address(RVA = "0xC8E0B0", Offset = "0xC8E0B0", VA = "0xC8E0B0", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6001111")]
			[Address(RVA = "0xC8C838", Offset = "0xC8C838", VA = "0xC8C838")]
			public WaitForStart(Tween tween)
			{
			}
		}
	}
	[Token(Token = "0x2000386")]
	public static class DOTweenModuleUtils
	{
		[Token(Token = "0x2000387")]
		public static class Physics
		{
			[Token(Token = "0x6001114")]
			[Address(RVA = "0xC8E240", Offset = "0xC8E240", VA = "0xC8E240")]
			public static void SetOrientationOnPath(PathOptions options, Tween t, Quaternion newRot, Transform trans)
			{
			}

			[Token(Token = "0x6001115")]
			[Address(RVA = "0xC8E340", Offset = "0xC8E340", VA = "0xC8E340")]
			public static bool HasRigidbody2D(Component target)
			{
				return default(bool);
			}

			[Token(Token = "0x6001116")]
			[Address(RVA = "0xC8E3CC", Offset = "0xC8E3CC", VA = "0xC8E3CC")]
			[Preserve]
			public static bool HasRigidbody(Component target)
			{
				return default(bool);
			}

			[Token(Token = "0x6001117")]
			[Address(RVA = "0xC8E458", Offset = "0xC8E458", VA = "0xC8E458")]
			[Preserve]
			public static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> CreateDOTweenPathTween(MonoBehaviour target, bool tweenRigidbody, bool isLocal, DG.Tweening.Plugins.Core.PathCore.Path path, float duration, PathMode pathMode)
			{
				return null;
			}
		}

		[Token(Token = "0x4001237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool _initialized;

		[Token(Token = "0x6001112")]
		[Address(RVA = "0xC8E0E4", Offset = "0xC8E0E4", VA = "0xC8E0E4")]
		[Preserve]
		public static void Init()
		{
		}

		[Token(Token = "0x6001113")]
		[Address(RVA = "0xC8E198", Offset = "0xC8E198", VA = "0xC8E198")]
		[Preserve]
		private static void Preserver()
		{
		}
	}
}
